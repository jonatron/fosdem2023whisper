{"text": " Okay, hello. Sorry for the technical trouble. My machine didn't work for this screen, so I got the help from a colleague. So, I'm Marco M\u00e4kele. I've been working on an ENO-DB code for 20 years almost, and today I will talk about one of my pet hates in ENO-DB, this change buffer, which I long time suspected that it's causing bugs, but I couldn't prove all of them. So, I took a car analogy because some software people like car analogies this unsafe at any speed. It's from the 1960s. I'm a bicycle person myself. So, what was the change buffer good for? It was something developed in the times of the spinning rust, the hard disks. The idea was that when you are doing sequential I.O., like page reads or page writes sequentially, then the read write hit will move less on the hard disk. And if you're doing random cx, it could take a long time to position the head to the correct track and then wait for the sector to come under the track when it's rotating. So, the idea of the change buffer was that instead of reading something from a page and then applying a change to that page, you would write a buffer change to somewhere else. So, if a B3 secondary index leaf page is not in the memory, in that case, instead of reading the page to perform an insert, originally it was only insert buffering, we would write that insert operation into a separate insert buffer tree. And then later when some other operation needs to read the page, it would merge the changes from that buffer to the page. And these structures are persistent. So, even the insert buffering could happen years ago and then at some point years later happens somebody wants to access that page and then you'll get the trouble. This was extended in MySQL 5.5 to cover delete operations and purge operations. Deleting in InnoDB only marks the record for deletion, same for update of a key in a secondary index, it will do delete marking and insert. So, the purge is what is actually removing the record. Those operations could be buffered, but not rollback of an insert, that was never buffered. And this leads to lots of problems, like the change buffer is located in the InnoDB system table space. And up to this time there is no mechanism to shrink the system table space. If you at some point use the change buffer a lot, the system table space will grow by some hundreds of gigabytes, there's no way to reclaim that space. Okay, in MariaDB we have something, we are working on something to help with that, but it's not done yet. And then this obvious right amplification, if you are doing an insert, okay, that's rather fine. Instead of doing just one insert, you are doing two inserts, you are doubling the right, plus you have to write some metadata, some index information so that the contents of the page can be interpreted correctly because the change buffer doesn't have access to the data dictionary. But for delete or delete marking, if you apply the change directly to the page, you would write one byte or couple of bytes, now you have to copy the entire record which you are going to delete or delete marked to the change buffer and the metadata. And then at some point it will be merged. And then there is some overhead, even if you are disabling the change buffer, you still have some overhead, you have to maintain some metadata saying how full your pages are. If somebody is going to enable the change buffering or insert buffering later, this data has to be accurate, otherwise you would get a page overflow. The insert buffering must know that the page will not get too full when you are buffering the insert and merging later. And then we got lots of nice corruptions where the secondary index gets out of sync with the primary key index. And these are very hard to reproduce. So why is it hard to reproduce? Well, the first part is the same as on the previous slide. It is exactly this that you cannot easily control when the change buffer merge happens. It's like the Spanish inquisition in the Montice Python sketch. Nobody expects a change buffer merge. And to reproduce something, as a user, you are unlucky and as a tester, you are lucky if you can reproduce this. And you need lots of luck to get that. Because especially this perching of the history, which is deleting records from the index, it can be blocked by reviews. Like if you have long running transactions which are holding a review open, that will prevent perch from running. And then at some point that review will be closed and perch can start running. And then there is also this buffer pool. If a page is locked by something, it can't be written out and it can't be evicted from the buffer pool. So the change buffer can't be used. And we have a debug setting that forces that, okay, user is asking for operation that could use the change buffer and we see the page is in the buffer pool. We are going the evil and we evict the page. But we cannot do that because somebody could be holding a latch on that page or the current thread is holding a latch and the page was modified. And we cannot wait for page writes to happen because this latch is blocking the page write. So this is really difficult to test. And there was a recent fix to some hanks which were introduced in MySQL 5.7. We have that fix in the release that is coming out next week. That one will make it even more tricky this debug option. So in order for tests for this to be effective, they have to do some smart tricks like abandon some tables for a while and let them cool down. Use some other tables meanwhile and then come back. Well, we got some nice magic tools as well. We have this random query generator. It's also used at MySQL and a grammar simplifier. We could start with the huge grammar of all of the SQL covering all the features and let it run. If the crash was frequent enough, then we could use this grammar simplifier. But in this case, this is very hard to reproduce back. We cannot use the simplifier. We cannot get any simpler grammar. We just have to run it all and hope for the best. But then we got this debugger RR, record and replay. That one is really a huge productivity boost. We started using it maybe two or three years ago. So when you are able to reproduce a problem while running it under RR, what you would do that you will save RR record will save a trace, a deterministic trace of an execution that is interleaving processors or threads that are being monitored by it. It saves the system calls and the results and so on. And this trace can be debugged as many times as you want. You just need the same binaries, same libraries and compatible processor. Then you can run it. And you can set break points, you can set data watch points and you can execute in forward and backward direction. You can see what happened before the bad thing was observed. And this can also be used for optimized code. You are probably familiar with cases where you are debugging an optimized executable, then the debugger complains that some variable has been optimized out. Well, then you can just single step some instructions, you get it from the registers, because you can go backwards in time. So now I am coming to describe one bug that we found last year. And actually there was a support customer last week who hit this bug or a consequence of this bug. So we had a bug that would be a slow shutdown which is doing this change buffer merge. It would hang because the change buffer got corrupted. And we were testing some fixes in a branch for that. And then we got this assertion failure. This assertion failure essentially means that when it tried to insert a record that was insert buffered, it ran out of space in the page. And what was the reason? Well, there were some extra records in the page. And it turned out that this is partly by design. Hei Kittori, the creator of InnoDB, he was a friend of lazy deletion or lazy operations. So drop index wouldn't clear anything from the change buffer. It would leave the garbage behind. And later on, if the same page is reallocated for something else, then we would pay the price and free the space from the change buffer, delete the records. And in MySQL 5.7, there was a new feature, bulk insert creation or building indexes faster. And that codebase didn't do this adjustment correctly. It only cleared some bit, but it didn't remove the records. And there was a mandatory Oracle security train I took several years ago before switching to MariaDB. It said something like complexity is the friend of security bugs. I found it somehow fitting here. So the immediate root cause of this failure was that this new code cleared a bit that says that there are buffer changes for this page. So when somebody is going to use that page, he will see that, OK, there's nothing to do. I don't have to care about the change buffer. And then later on, something adds records to the page, and then these old records from the change buffer will come to the page as part of a merge. And how can we prove this using this RR tool? By the way, you can download the slides from the first page, and you can also download an attachment that has a script replay recording of the RR session. So I'm only showing some high-level view here, but you can download a debugger session that shows the exact commands and the output, which I'm going to present in the next slides. So the short version, how we did this, how we can prove these claims in the debugger, we let it continue from the start to the crash or the assertion failure. Then we set the break point on a function that was the last one to access the change buffer bitmap bits. And from that function, we get the address of the bitmap bits for this page, and we can set the data watch point on that. And I found this hardware watch point is a very powerful tool. It's really much easier for some things when you don't have an idea which code is going to modify or read something. And then based on this watch point, we get some call stacks where these change buffer bits were last changed. And then we set the break points on functions that insert records into the change buffer and delete records from there. And then we observe that, okay, there was nothing to delete records for this page and basically proving this claim. So we are printing the index ID and index name to get some more detail to this proof. Oh, sorry. Okay, so we were unable to reproduce this with a small grammar. We just took something and we got lucky and got the trace and debugged it. Possible consequences of this bug are the wrong results. That's of course very difficult to prove. You don't have any testing tools to prove that really or not many tools. Or you could get the crash on change buffer merge like here we got. And that change buffer merge could happen any time, even if you are running check table to check if your table is okay, then before my score, MariaDB 10.6, your server would crash because of this change buffer corruption. So in our case, it was a page overflow when applying an insert. And change buffer doesn't allow any page splitting. It must fit in the page. In the support case I mentioned one week ago, the case was that the page split failed. It ran out of space. You are taking one page, you are trying to copy part of the records to a new page and it ran out of space. How can that be? It turned out that the page contained records for some other index which apparently had been dropped earlier and that index apparently had not null columns. So the length of a variable length field was interpreted, was stored there for that index where this correct index would have the null bit map. And then we would read the length of the record from previous byte and that's how we would get these two long records being copied. Oh, five minutes left. I have to hurry up. So this debugging, how it goes in detail, we continue to the end of the execution from the start. And then we reverse continue to go back from the abort signal. Then we set the temporary breakpoint to this bitmap page access. Then we get to that breakpoint and we get in a register we happen to have the byte address of the bitmap byte which we are interested in. And then we reverse continue to the changes of that byte. So the last occurrence of that was for an insert that was buffered after the at index. And we continue from that, we see that this, the previous occurrence is the at index that is clearing the flag. And from that we can get the page number which is affected and we can get the index ID and index name and the SQL statement which is alter table. And then we set some more breakpoints on this insert buffer delete and insert operations. Set the condition that we wanted only for this page and then we reverse continue, we get the insert that was buffered before this at index. Apparently there was a drop index in between but I didn't add statements to get a breakpoint there this time. So the index name is different as after the at index and index ID is different. And there was no call to the change buffer deletion. When we continue from this point to the end of the execution we just reached the assertion failure again without any change buffer record deletion in between. So I'm quoting this Finnish ski jumper who apparently was confusing to French phrases. He was wishing him a good trip when he is starting to do the ski jumping. And I'm wishing a good trip for anybody who is using the change buffer. So and the deja vu, yes, we have seen this shut down hang actually earlier. There was a 10.1, MariaDB 10.1 support customer case. They got this hang and we had to do something to fix that. But in MariaDB 10.5 we made another change hopefully to reduce the chances of getting like random change buffer much because basically after this change buffer much only happens when SQL statement needs that change buffer much to happen. No background operation. So we had to adjust that previous fix for the 10.5 code base but that was not adjusted correctly. And we were not able to reproduce this corruption or this hang earlier. So only quite lately we were able to reproduce it and then we were able to debug it properly. There are some other corruption caused by the change buffer. And one thing I want to notice that in MariaDB 10.6 recently there was a fix that we should not crash on any page corruption. If there are any cases where we are still crashing I would be interested in details. And this includes like check table when there is a crash. When there is a failure during change buffer much it will not cause a crash. There was a mystery bug filed like 12 years ago. MySQL bug. The customer got a crash during change buffer much because the page got empty as a result of applying a perch operation. I can think of several bugs that have been fixed in MariaDB that could be the explanation. The last one, this one from the previous example that cannot apply because that only was introduced in MySQL 5.7 which they didn't use. And of this list the 30422 it's a clone of MySQL fix which is applicable to MariaDB 10.3 and 10.4. Others I don't think have been fixed in MySQL yet. So this teaches us that it really pays off to analyze any obscure failure you get from running with RR because there are games in there. And I think that assertions are like lottery tickets. If you don't write assertions in your code then you can't win these kind of bug findings. And sometimes you can lose, you can write a bogus assertion okay you make mistake, you correct it and improve the assertion and then hopefully you will get something better later. We have some mitigation for this in MariaDB. We don't access the data file when executing drop table. So if in that case we are avoiding maybe more crashes on drop table. And there was a bug in you know DB slow shutdown that the change buffer merge wouldn't check for log file overflow. So if the user got impatient and killed the server because it's taken too long time then they could end up with unrecoverable database. And some more mitigation that we disabled this change buffer by default. We deprecated the parameter and we removed the change buffer in the 11.0 release. The upgrade code for handling it, it was tested and I hope that if there is some corruption notice during the upgrade it should still be a possible to go back to the earlier version and then do something to correct. Yes, if there are any records in the change buffer we ignore, we don't trust these bitmap bits. We go through the change buffer records and if there are any we will apply them. Yeah, so that was basically what I wanted to say and maybe this last slide that it's a good thing to have a nice layer design if you optimize things by breaking this layer boundaries then you are asking for trouble. That's basically what we can learn from this. Question, you said that you fixed a few things in Merle DB and they're not yet fixed in upstream. Are there bugs open upstream for fixing these things? I haven't filed any, I lost my MySQL account when I resigned Oracle. Okay, well, I'll look into it so we can get this fixed in upstream. Yeah, you are welcome to file bugs and maybe they will be fixed. Well, especially if it's a crashing bug. Yeah, but you can't repeat them, so you have a hard time proving that. Well, there are tools obviously now, weren't obvious before. I'm very persistent. It's like once we know it exists in Merle DB as it takes and somebody that is persistent enough should be able to do that. Yes. It is very bad. I mean, if you have multiple threats or processes, it's running them on a single CPU core at the time. So that's why we are running hundreds of servers in parallel on a single server for several hours to get these traces. Actually, also for normal debugging, there have been cases like if you have lots of conditional branches in your code like this debug library or performance schema. Those branches are never taken, but because RR is interested in conditional branches. I have seen a case where if I compile without these things, I get a crash or problem in let's say like three seconds. And then I was curious how long does it take if I use these stupid compilation options with these extra conditions. For that particular thing, I interrupted it after two hours. So it was 7,000 seconds versus three seconds. So don't use conditional branches or unnecessary debugging. Turn off all the code that you don't need. Conditional branches are evil for RR. Well, maybe you are not using it like multi-threaded with context switches and so on. For single-threaded, there is basically no overhead. Thank you for saving me. It was a team effort. Thank you. One, two, three. Is it working? Okay, there is no audio in the room, right? So you want me to speak loud. Well, anyway, we are going to talk today about MySQL 8 and MariaDB 10.10. Original Toxa is 10.11, but I wanted to make sure we're sticking to the latest GA or stable version so it had to go down a bit. Well, and let me start by congratulating MariaDB team with MariaDB Corporation going public. In particular, Monty, congrats for driving two very impactful open-source database companies to exit. That's quite an achievement, I think you people in the universe have that. Yeah. Well, so what are we going to talk about first? I think which we need to recognize where MariaDB and MySQL started from the same roots, right? We have diverged substantially, right? So I think it was interesting when on the previous talk, Jean-Fran\u00e7ois was talking about the upstream, right? I was thinking, hey, you know, what does MariaDB really consider MySQL upstream at this point? Or not quite, right? In this case, I think there is enough diversity right what this is our kind of, you know, ancestors, maybe, you know, like monkeys for humans, you know, something of this regard. Now, in this case, like I am trying to be fair the best way I can, right, which for me always means offends everybody equally, right? So, you know, if Monty is not screaming at me saying you are fucking moron, Peter, that is not how it is, then probably I am not doing my job properly. No, no, no, but you... Oh, you see? Yes, yes, yes. Of course, of course. You always do everything with loving your heart, right? And you don't use bad words as I do. That is wonderful. So, let's talk about development model first. Obviously, MySQL is developed by the Oracle corporations. We can see what the contributions are accepted, but I wouldn't say they are encouraged in the same way as MariaDB does. And we also have open source, as I would say, like a drop ship open source, right? We have those release coming, but we do not really have a tree there over developers changes, right, happen. You know, as we can see. That, I think, can be particularly problematic, for example, for security bugs where it can be hard to track, like, what exactly change fixes that particular issue, right, which is different from MariaDB, which is... has a server released by MariaDB Foundation, though there is a lot of work, right, for actual new features done by MariaDB corporations, though foundations ensure what the contributions are encouraged and developers really done in the public, right, as I would say, through open source project. One thing I wanted to point out, which I think is interesting, is also changes from the Oracle side, right? For years, I've been actually defender of Oracle in regards to, hey, you know, besides all this kind of stuff that Oracle is looking to kill MySQL, they have actually been doing a pretty good job in releasing majority features of the open source and the proprietary enterprise features have been kind of well-isolated, abstracted through API, and it was relatively easy for companies as well, especially, like, per corner, to implement the equivalent. Now things have been changing in the last couple of years, right? We can see what, everybody knows this guy? Yeah, yeah, yeah. Well, like, we can see what Larry actually discovered, what the MySQL exists in the last couple of years, right? And he only seems to care about the MySQL as a heatwave, because we all know heatwave supports the melt zone of lake, right? And we can see a lot of focus getting on this snowflake development, which is sort of a cloud-only, and of course, you know, proprietary version of MySQL. So far, it is only analytic extension, right? But I think it's all questions to us, hey, could there be some other critical features which will be only property, right? Maybe Oracle somewhere in a bellies developing something like transparent sharding for MySQL, maybe that is going to be proprietary first, right? So that is, I think, the questions what a lot of people in MySQL community are asking. Now, with MySQL, with MariaDB, I think what is interesting compared to, like, a MySQL is that there are actually two companies, MariaDB, well, two entities, probably better than MariaDB Foundation and MariaDB Corporation, right? That is the latest mission, which I just grabbed a couple of days ago from MariaDB Foundation side, right? And I think that is a very good to understand relationship with those companies to understand this, right? Now, if you think in this case is what MariaDB Foundation is really at large focusing on serving MariaDB community, MariaDB ecosystem, right? It develops open-source software around MySQL. They are MariaDB Corporation. That is now public company, right? Which is providing a property solutions and commercializing MariaDB software, right? That is, I think, the interest way, right? Now, relationship sometimes can be a little bit complicated, though I would say there have been some more complicated entitlements in which I mentioned in my previous talks, right? And some of them have been made more clear, which I think is a great progress. So if you think about this, what is interesting is MariaDB Foundation has responsibility kind of relatively narrow to the MariaDB server, right? And we can see what number of other components which are very valuable in MySQL ecosystem are owned by MariaDB Corporation, right? Not by the Foundation and also a lot of development. Roadmap is driven by the Corporation. I also find it interesting what we see MySQL knowledge base, which is kind of built by a community but is hosted by MariaDB Corporation. I find that not in a very good sense for like an open-source software, there is also entanglement on the website level, right? So if I am downloading MariaDB software from.org, right, then I am kind of redirected next to the MariaDB Corporation knowledge base, right? And encouraged to fill out the lead which will go to their MariaDB Corporation, which is not totally transparent, right? I think that's kind of, I may be still looking like, oh, I am engaging with a non-profit while actually I am giving my connections to somewhere else. Now, I wouldn't say though that that is completely unfair in this case because MariaDB does carry the largest way to development and promote in MariaDB, right? And they do also get the largest rewards compared to the other sponsors of MariaDB Foundation. Now let's look quickly at what is really open-source between those versions, right? Now, in MySQL, what we can see is a very clear open-core platform and we have Maria, MySQL community, right? And, you know, router, cluster, whatever, all that comes which comes in open-source edition and there is also enterprise version. Plus, as I mentioned, additionally, we have increasing focus on the cloud-only solution as a heat wave. In terms of MariaDB, there are, you know, a lot more nuance in this case, right? Because there are certain things coming from MariaDB Foundation which are completely open-source right now. The things in MariaDB Corporation Spaceway can be with a variety of licenses.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.24, "text": " Okay, hello. Sorry for the technical trouble. My machine didn't work for this screen, so", "tokens": [1033, 11, 7751, 13, 4919, 337, 264, 6191, 5253, 13, 1222, 3479, 994, 380, 589, 337, 341, 2568, 11, 370], "temperature": 0.0, "avg_logprob": -0.33946051778672615, "compression_ratio": 1.3471502590673574, "no_speech_prob": 0.1686946302652359}, {"id": 1, "seek": 0, "start": 11.24, "end": 19.52, "text": " I got the help from a colleague. So, I'm Marco M\u00e4kele. I've been working on an ENO-DB", "tokens": [286, 658, 264, 854, 490, 257, 13532, 13, 407, 11, 286, 478, 26535, 376, 737, 330, 306, 13, 286, 600, 668, 1364, 322, 364, 15244, 46, 12, 27735], "temperature": 0.0, "avg_logprob": -0.33946051778672615, "compression_ratio": 1.3471502590673574, "no_speech_prob": 0.1686946302652359}, {"id": 2, "seek": 0, "start": 19.52, "end": 27.52, "text": " code for 20 years almost, and today I will talk about one of my pet hates in ENO-DB,", "tokens": [3089, 337, 945, 924, 1920, 11, 293, 965, 286, 486, 751, 466, 472, 295, 452, 3817, 23000, 294, 15244, 46, 12, 27735, 11], "temperature": 0.0, "avg_logprob": -0.33946051778672615, "compression_ratio": 1.3471502590673574, "no_speech_prob": 0.1686946302652359}, {"id": 3, "seek": 2752, "start": 27.52, "end": 32.96, "text": " this change buffer, which I long time suspected that it's causing bugs, but I couldn't prove", "tokens": [341, 1319, 21762, 11, 597, 286, 938, 565, 26439, 300, 309, 311, 9853, 15120, 11, 457, 286, 2809, 380, 7081], "temperature": 0.0, "avg_logprob": -0.1991040994832804, "compression_ratio": 1.5521739130434782, "no_speech_prob": 3.928226578864269e-05}, {"id": 4, "seek": 2752, "start": 32.96, "end": 39.28, "text": " all of them. So, I took a car analogy because some software people like car analogies this", "tokens": [439, 295, 552, 13, 407, 11, 286, 1890, 257, 1032, 21663, 570, 512, 4722, 561, 411, 1032, 16660, 530, 341], "temperature": 0.0, "avg_logprob": -0.1991040994832804, "compression_ratio": 1.5521739130434782, "no_speech_prob": 3.928226578864269e-05}, {"id": 5, "seek": 2752, "start": 39.28, "end": 46.4, "text": " unsafe at any speed. It's from the 1960s. I'm a bicycle person myself. So, what was", "tokens": [35948, 412, 604, 3073, 13, 467, 311, 490, 264, 16157, 82, 13, 286, 478, 257, 20888, 954, 2059, 13, 407, 11, 437, 390], "temperature": 0.0, "avg_logprob": -0.1991040994832804, "compression_ratio": 1.5521739130434782, "no_speech_prob": 3.928226578864269e-05}, {"id": 6, "seek": 2752, "start": 46.4, "end": 53.480000000000004, "text": " the change buffer good for? It was something developed in the times of the spinning rust,", "tokens": [264, 1319, 21762, 665, 337, 30, 467, 390, 746, 4743, 294, 264, 1413, 295, 264, 15640, 15259, 11], "temperature": 0.0, "avg_logprob": -0.1991040994832804, "compression_ratio": 1.5521739130434782, "no_speech_prob": 3.928226578864269e-05}, {"id": 7, "seek": 5348, "start": 53.48, "end": 60.36, "text": " the hard disks. The idea was that when you are doing sequential I.O., like page reads", "tokens": [264, 1152, 41617, 13, 440, 1558, 390, 300, 562, 291, 366, 884, 42881, 286, 13, 46, 7933, 411, 3028, 15700], "temperature": 0.0, "avg_logprob": -0.22516906654441748, "compression_ratio": 1.6401869158878504, "no_speech_prob": 4.0565857489127666e-05}, {"id": 8, "seek": 5348, "start": 60.36, "end": 66.8, "text": " or page writes sequentially, then the read write hit will move less on the hard disk.", "tokens": [420, 3028, 13657, 5123, 3137, 11, 550, 264, 1401, 2464, 2045, 486, 1286, 1570, 322, 264, 1152, 12355, 13], "temperature": 0.0, "avg_logprob": -0.22516906654441748, "compression_ratio": 1.6401869158878504, "no_speech_prob": 4.0565857489127666e-05}, {"id": 9, "seek": 5348, "start": 66.8, "end": 75.96, "text": " And if you're doing random cx, it could take a long time to position the head to the correct", "tokens": [400, 498, 291, 434, 884, 4974, 269, 87, 11, 309, 727, 747, 257, 938, 565, 281, 2535, 264, 1378, 281, 264, 3006], "temperature": 0.0, "avg_logprob": -0.22516906654441748, "compression_ratio": 1.6401869158878504, "no_speech_prob": 4.0565857489127666e-05}, {"id": 10, "seek": 5348, "start": 75.96, "end": 81.24, "text": " track and then wait for the sector to come under the track when it's rotating. So, the", "tokens": [2837, 293, 550, 1699, 337, 264, 6977, 281, 808, 833, 264, 2837, 562, 309, 311, 19627, 13, 407, 11, 264], "temperature": 0.0, "avg_logprob": -0.22516906654441748, "compression_ratio": 1.6401869158878504, "no_speech_prob": 4.0565857489127666e-05}, {"id": 11, "seek": 8124, "start": 81.24, "end": 87.75999999999999, "text": " idea of the change buffer was that instead of reading something from a page and then", "tokens": [1558, 295, 264, 1319, 21762, 390, 300, 2602, 295, 3760, 746, 490, 257, 3028, 293, 550], "temperature": 0.0, "avg_logprob": -0.15407487324305943, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.00048870372120291}, {"id": 12, "seek": 8124, "start": 87.75999999999999, "end": 94.56, "text": " applying a change to that page, you would write a buffer change to somewhere else. So,", "tokens": [9275, 257, 1319, 281, 300, 3028, 11, 291, 576, 2464, 257, 21762, 1319, 281, 4079, 1646, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.15407487324305943, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.00048870372120291}, {"id": 13, "seek": 8124, "start": 94.56, "end": 102.91999999999999, "text": " if a B3 secondary index leaf page is not in the memory, in that case, instead of reading", "tokens": [498, 257, 363, 18, 11396, 8186, 10871, 3028, 307, 406, 294, 264, 4675, 11, 294, 300, 1389, 11, 2602, 295, 3760], "temperature": 0.0, "avg_logprob": -0.15407487324305943, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.00048870372120291}, {"id": 14, "seek": 8124, "start": 102.91999999999999, "end": 108.64, "text": " the page to perform an insert, originally it was only insert buffering, we would write", "tokens": [264, 3028, 281, 2042, 364, 8969, 11, 7993, 309, 390, 787, 8969, 9204, 1794, 11, 321, 576, 2464], "temperature": 0.0, "avg_logprob": -0.15407487324305943, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.00048870372120291}, {"id": 15, "seek": 10864, "start": 108.64, "end": 114.08, "text": " that insert operation into a separate insert buffer tree. And then later when some other", "tokens": [300, 8969, 6916, 666, 257, 4994, 8969, 21762, 4230, 13, 400, 550, 1780, 562, 512, 661], "temperature": 0.0, "avg_logprob": -0.15427226769296745, "compression_ratio": 1.7979274611398963, "no_speech_prob": 4.4818447349825874e-05}, {"id": 16, "seek": 10864, "start": 114.08, "end": 119.52, "text": " operation needs to read the page, it would merge the changes from that buffer to the", "tokens": [6916, 2203, 281, 1401, 264, 3028, 11, 309, 576, 22183, 264, 2962, 490, 300, 21762, 281, 264], "temperature": 0.0, "avg_logprob": -0.15427226769296745, "compression_ratio": 1.7979274611398963, "no_speech_prob": 4.4818447349825874e-05}, {"id": 17, "seek": 10864, "start": 119.52, "end": 125.0, "text": " page. And these structures are persistent. So, even the insert buffering could happen", "tokens": [3028, 13, 400, 613, 9227, 366, 24315, 13, 407, 11, 754, 264, 8969, 9204, 1794, 727, 1051], "temperature": 0.0, "avg_logprob": -0.15427226769296745, "compression_ratio": 1.7979274611398963, "no_speech_prob": 4.4818447349825874e-05}, {"id": 18, "seek": 10864, "start": 125.0, "end": 130.44, "text": " years ago and then at some point years later happens somebody wants to access that page", "tokens": [924, 2057, 293, 550, 412, 512, 935, 924, 1780, 2314, 2618, 2738, 281, 2105, 300, 3028], "temperature": 0.0, "avg_logprob": -0.15427226769296745, "compression_ratio": 1.7979274611398963, "no_speech_prob": 4.4818447349825874e-05}, {"id": 19, "seek": 13044, "start": 130.44, "end": 139.64, "text": " and then you'll get the trouble. This was extended in MySQL 5.5 to cover delete operations", "tokens": [293, 550, 291, 603, 483, 264, 5253, 13, 639, 390, 10913, 294, 1222, 39934, 1025, 13, 20, 281, 2060, 12097, 7705], "temperature": 0.0, "avg_logprob": -0.17340552553217461, "compression_ratio": 1.5720524017467248, "no_speech_prob": 4.619228275259957e-05}, {"id": 20, "seek": 13044, "start": 139.64, "end": 146.12, "text": " and purge operations. Deleting in InnoDB only marks the record for deletion, same for update", "tokens": [293, 1864, 432, 7705, 13, 5831, 9880, 294, 682, 1771, 27735, 787, 10640, 264, 2136, 337, 1103, 302, 313, 11, 912, 337, 5623], "temperature": 0.0, "avg_logprob": -0.17340552553217461, "compression_ratio": 1.5720524017467248, "no_speech_prob": 4.619228275259957e-05}, {"id": 21, "seek": 13044, "start": 146.12, "end": 153.24, "text": " of a key in a secondary index, it will do delete marking and insert. So, the purge is", "tokens": [295, 257, 2141, 294, 257, 11396, 8186, 11, 309, 486, 360, 12097, 25482, 293, 8969, 13, 407, 11, 264, 1864, 432, 307], "temperature": 0.0, "avg_logprob": -0.17340552553217461, "compression_ratio": 1.5720524017467248, "no_speech_prob": 4.619228275259957e-05}, {"id": 22, "seek": 13044, "start": 153.24, "end": 158.0, "text": " what is actually removing the record. Those operations could be buffered, but not rollback", "tokens": [437, 307, 767, 12720, 264, 2136, 13, 3950, 7705, 727, 312, 9204, 4073, 11, 457, 406, 3373, 3207], "temperature": 0.0, "avg_logprob": -0.17340552553217461, "compression_ratio": 1.5720524017467248, "no_speech_prob": 4.619228275259957e-05}, {"id": 23, "seek": 15800, "start": 158.0, "end": 165.8, "text": " of an insert, that was never buffered. And this leads to lots of problems, like the", "tokens": [295, 364, 8969, 11, 300, 390, 1128, 9204, 4073, 13, 400, 341, 6689, 281, 3195, 295, 2740, 11, 411, 264], "temperature": 0.0, "avg_logprob": -0.14505491433320222, "compression_ratio": 1.7933884297520661, "no_speech_prob": 9.086612408282235e-05}, {"id": 24, "seek": 15800, "start": 165.8, "end": 171.72, "text": " change buffer is located in the InnoDB system table space. And up to this time there is", "tokens": [1319, 21762, 307, 6870, 294, 264, 682, 1771, 27735, 1185, 3199, 1901, 13, 400, 493, 281, 341, 565, 456, 307], "temperature": 0.0, "avg_logprob": -0.14505491433320222, "compression_ratio": 1.7933884297520661, "no_speech_prob": 9.086612408282235e-05}, {"id": 25, "seek": 15800, "start": 171.72, "end": 176.28, "text": " no mechanism to shrink the system table space. If you at some point use the change buffer", "tokens": [572, 7513, 281, 23060, 264, 1185, 3199, 1901, 13, 759, 291, 412, 512, 935, 764, 264, 1319, 21762], "temperature": 0.0, "avg_logprob": -0.14505491433320222, "compression_ratio": 1.7933884297520661, "no_speech_prob": 9.086612408282235e-05}, {"id": 26, "seek": 15800, "start": 176.28, "end": 181.56, "text": " a lot, the system table space will grow by some hundreds of gigabytes, there's no way", "tokens": [257, 688, 11, 264, 1185, 3199, 1901, 486, 1852, 538, 512, 6779, 295, 42741, 11, 456, 311, 572, 636], "temperature": 0.0, "avg_logprob": -0.14505491433320222, "compression_ratio": 1.7933884297520661, "no_speech_prob": 9.086612408282235e-05}, {"id": 27, "seek": 15800, "start": 181.56, "end": 185.56, "text": " to reclaim that space. Okay, in MariaDB we have something, we are working on something", "tokens": [281, 40074, 300, 1901, 13, 1033, 11, 294, 12734, 27735, 321, 362, 746, 11, 321, 366, 1364, 322, 746], "temperature": 0.0, "avg_logprob": -0.14505491433320222, "compression_ratio": 1.7933884297520661, "no_speech_prob": 9.086612408282235e-05}, {"id": 28, "seek": 18556, "start": 185.56, "end": 193.72, "text": " to help with that, but it's not done yet. And then this obvious right amplification,", "tokens": [281, 854, 365, 300, 11, 457, 309, 311, 406, 1096, 1939, 13, 400, 550, 341, 6322, 558, 9731, 3774, 11], "temperature": 0.0, "avg_logprob": -0.17985920573389808, "compression_ratio": 1.6728971962616823, "no_speech_prob": 2.6346740924054757e-05}, {"id": 29, "seek": 18556, "start": 193.72, "end": 199.56, "text": " if you are doing an insert, okay, that's rather fine. Instead of doing just one insert, you", "tokens": [498, 291, 366, 884, 364, 8969, 11, 1392, 11, 300, 311, 2831, 2489, 13, 7156, 295, 884, 445, 472, 8969, 11, 291], "temperature": 0.0, "avg_logprob": -0.17985920573389808, "compression_ratio": 1.6728971962616823, "no_speech_prob": 2.6346740924054757e-05}, {"id": 30, "seek": 18556, "start": 199.56, "end": 205.36, "text": " are doing two inserts, you are doubling the right, plus you have to write some metadata,", "tokens": [366, 884, 732, 49163, 11, 291, 366, 33651, 264, 558, 11, 1804, 291, 362, 281, 2464, 512, 26603, 11], "temperature": 0.0, "avg_logprob": -0.17985920573389808, "compression_ratio": 1.6728971962616823, "no_speech_prob": 2.6346740924054757e-05}, {"id": 31, "seek": 18556, "start": 205.36, "end": 211.52, "text": " some index information so that the contents of the page can be interpreted correctly because", "tokens": [512, 8186, 1589, 370, 300, 264, 15768, 295, 264, 3028, 393, 312, 26749, 8944, 570], "temperature": 0.0, "avg_logprob": -0.17985920573389808, "compression_ratio": 1.6728971962616823, "no_speech_prob": 2.6346740924054757e-05}, {"id": 32, "seek": 21152, "start": 211.52, "end": 217.16, "text": " the change buffer doesn't have access to the data dictionary. But for delete or delete", "tokens": [264, 1319, 21762, 1177, 380, 362, 2105, 281, 264, 1412, 25890, 13, 583, 337, 12097, 420, 12097], "temperature": 0.0, "avg_logprob": -0.11965315682547432, "compression_ratio": 1.876595744680851, "no_speech_prob": 1.2027655429847073e-05}, {"id": 33, "seek": 21152, "start": 217.16, "end": 223.56, "text": " marking, if you apply the change directly to the page, you would write one byte or couple", "tokens": [25482, 11, 498, 291, 3079, 264, 1319, 3838, 281, 264, 3028, 11, 291, 576, 2464, 472, 40846, 420, 1916], "temperature": 0.0, "avg_logprob": -0.11965315682547432, "compression_ratio": 1.876595744680851, "no_speech_prob": 1.2027655429847073e-05}, {"id": 34, "seek": 21152, "start": 223.56, "end": 227.84, "text": " of bytes, now you have to copy the entire record which you are going to delete or delete", "tokens": [295, 36088, 11, 586, 291, 362, 281, 5055, 264, 2302, 2136, 597, 291, 366, 516, 281, 12097, 420, 12097], "temperature": 0.0, "avg_logprob": -0.11965315682547432, "compression_ratio": 1.876595744680851, "no_speech_prob": 1.2027655429847073e-05}, {"id": 35, "seek": 21152, "start": 227.84, "end": 234.0, "text": " marked to the change buffer and the metadata. And then at some point it will be merged.", "tokens": [12658, 281, 264, 1319, 21762, 293, 264, 26603, 13, 400, 550, 412, 512, 935, 309, 486, 312, 36427, 13], "temperature": 0.0, "avg_logprob": -0.11965315682547432, "compression_ratio": 1.876595744680851, "no_speech_prob": 1.2027655429847073e-05}, {"id": 36, "seek": 21152, "start": 234.0, "end": 237.96, "text": " And then there is some overhead, even if you are disabling the change buffer, you still", "tokens": [400, 550, 456, 307, 512, 19922, 11, 754, 498, 291, 366, 717, 20112, 264, 1319, 21762, 11, 291, 920], "temperature": 0.0, "avg_logprob": -0.11965315682547432, "compression_ratio": 1.876595744680851, "no_speech_prob": 1.2027655429847073e-05}, {"id": 37, "seek": 23796, "start": 237.96, "end": 245.0, "text": " have some overhead, you have to maintain some metadata saying how full your pages are. If", "tokens": [362, 512, 19922, 11, 291, 362, 281, 6909, 512, 26603, 1566, 577, 1577, 428, 7183, 366, 13, 759], "temperature": 0.0, "avg_logprob": -0.1342325580930247, "compression_ratio": 1.73828125, "no_speech_prob": 1.1123990589112509e-05}, {"id": 38, "seek": 23796, "start": 245.0, "end": 250.56, "text": " somebody is going to enable the change buffering or insert buffering later, this data has to", "tokens": [2618, 307, 516, 281, 9528, 264, 1319, 9204, 1794, 420, 8969, 9204, 1794, 1780, 11, 341, 1412, 575, 281], "temperature": 0.0, "avg_logprob": -0.1342325580930247, "compression_ratio": 1.73828125, "no_speech_prob": 1.1123990589112509e-05}, {"id": 39, "seek": 23796, "start": 250.56, "end": 255.84, "text": " be accurate, otherwise you would get a page overflow. The insert buffering must know that", "tokens": [312, 8559, 11, 5911, 291, 576, 483, 257, 3028, 37772, 13, 440, 8969, 9204, 1794, 1633, 458, 300], "temperature": 0.0, "avg_logprob": -0.1342325580930247, "compression_ratio": 1.73828125, "no_speech_prob": 1.1123990589112509e-05}, {"id": 40, "seek": 23796, "start": 255.84, "end": 261.96000000000004, "text": " the page will not get too full when you are buffering the insert and merging later. And", "tokens": [264, 3028, 486, 406, 483, 886, 1577, 562, 291, 366, 9204, 1794, 264, 8969, 293, 44559, 1780, 13, 400], "temperature": 0.0, "avg_logprob": -0.1342325580930247, "compression_ratio": 1.73828125, "no_speech_prob": 1.1123990589112509e-05}, {"id": 41, "seek": 23796, "start": 261.96000000000004, "end": 267.24, "text": " then we got lots of nice corruptions where the secondary index gets out of sync with", "tokens": [550, 321, 658, 3195, 295, 1481, 17366, 626, 689, 264, 11396, 8186, 2170, 484, 295, 20271, 365], "temperature": 0.0, "avg_logprob": -0.1342325580930247, "compression_ratio": 1.73828125, "no_speech_prob": 1.1123990589112509e-05}, {"id": 42, "seek": 26724, "start": 267.24, "end": 273.52, "text": " the primary key index. And these are very hard to reproduce. So why is it hard to reproduce?", "tokens": [264, 6194, 2141, 8186, 13, 400, 613, 366, 588, 1152, 281, 29501, 13, 407, 983, 307, 309, 1152, 281, 29501, 30], "temperature": 0.0, "avg_logprob": -0.20334284955805, "compression_ratio": 1.618421052631579, "no_speech_prob": 5.557714030146599e-05}, {"id": 43, "seek": 26724, "start": 273.52, "end": 280.96000000000004, "text": " Well, the first part is the same as on the previous slide. It is exactly this that you", "tokens": [1042, 11, 264, 700, 644, 307, 264, 912, 382, 322, 264, 3894, 4137, 13, 467, 307, 2293, 341, 300, 291], "temperature": 0.0, "avg_logprob": -0.20334284955805, "compression_ratio": 1.618421052631579, "no_speech_prob": 5.557714030146599e-05}, {"id": 44, "seek": 26724, "start": 280.96000000000004, "end": 288.48, "text": " cannot easily control when the change buffer merge happens. It's like the Spanish inquisition", "tokens": [2644, 3612, 1969, 562, 264, 1319, 21762, 22183, 2314, 13, 467, 311, 411, 264, 8058, 13570, 271, 849], "temperature": 0.0, "avg_logprob": -0.20334284955805, "compression_ratio": 1.618421052631579, "no_speech_prob": 5.557714030146599e-05}, {"id": 45, "seek": 26724, "start": 288.48, "end": 296.76, "text": " in the Montice Python sketch. Nobody expects a change buffer merge. And to reproduce something,", "tokens": [294, 264, 7947, 573, 15329, 12325, 13, 9297, 33280, 257, 1319, 21762, 22183, 13, 400, 281, 29501, 746, 11], "temperature": 0.0, "avg_logprob": -0.20334284955805, "compression_ratio": 1.618421052631579, "no_speech_prob": 5.557714030146599e-05}, {"id": 46, "seek": 29676, "start": 296.76, "end": 303.36, "text": " as a user, you are unlucky and as a tester, you are lucky if you can reproduce this. And", "tokens": [382, 257, 4195, 11, 291, 366, 38838, 293, 382, 257, 36101, 11, 291, 366, 6356, 498, 291, 393, 29501, 341, 13, 400], "temperature": 0.0, "avg_logprob": -0.20227306293991376, "compression_ratio": 1.7911646586345382, "no_speech_prob": 2.4006198145798407e-05}, {"id": 47, "seek": 29676, "start": 303.36, "end": 309.56, "text": " you need lots of luck to get that. Because especially this perching of the history, which", "tokens": [291, 643, 3195, 295, 3668, 281, 483, 300, 13, 1436, 2318, 341, 680, 17354, 295, 264, 2503, 11, 597], "temperature": 0.0, "avg_logprob": -0.20227306293991376, "compression_ratio": 1.7911646586345382, "no_speech_prob": 2.4006198145798407e-05}, {"id": 48, "seek": 29676, "start": 309.56, "end": 316.48, "text": " is deleting records from the index, it can be blocked by reviews. Like if you have long", "tokens": [307, 48946, 7724, 490, 264, 8186, 11, 309, 393, 312, 15470, 538, 10229, 13, 1743, 498, 291, 362, 938], "temperature": 0.0, "avg_logprob": -0.20227306293991376, "compression_ratio": 1.7911646586345382, "no_speech_prob": 2.4006198145798407e-05}, {"id": 49, "seek": 29676, "start": 316.48, "end": 321.4, "text": " running transactions which are holding a review open, that will prevent perch from running.", "tokens": [2614, 16856, 597, 366, 5061, 257, 3131, 1269, 11, 300, 486, 4871, 29240, 490, 2614, 13], "temperature": 0.0, "avg_logprob": -0.20227306293991376, "compression_ratio": 1.7911646586345382, "no_speech_prob": 2.4006198145798407e-05}, {"id": 50, "seek": 29676, "start": 321.4, "end": 326.59999999999997, "text": " And then at some point that review will be closed and perch can start running. And then", "tokens": [400, 550, 412, 512, 935, 300, 3131, 486, 312, 5395, 293, 29240, 393, 722, 2614, 13, 400, 550], "temperature": 0.0, "avg_logprob": -0.20227306293991376, "compression_ratio": 1.7911646586345382, "no_speech_prob": 2.4006198145798407e-05}, {"id": 51, "seek": 32660, "start": 326.6, "end": 331.28000000000003, "text": " there is also this buffer pool. If a page is locked by something, it can't be written", "tokens": [456, 307, 611, 341, 21762, 7005, 13, 759, 257, 3028, 307, 9376, 538, 746, 11, 309, 393, 380, 312, 3720], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 52, "seek": 32660, "start": 331.28000000000003, "end": 336.44, "text": " out and it can't be evicted from the buffer pool. So the change buffer can't be used.", "tokens": [484, 293, 309, 393, 380, 312, 1073, 11254, 490, 264, 21762, 7005, 13, 407, 264, 1319, 21762, 393, 380, 312, 1143, 13], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 53, "seek": 32660, "start": 336.44, "end": 342.16, "text": " And we have a debug setting that forces that, okay, user is asking for operation that could", "tokens": [400, 321, 362, 257, 24083, 3287, 300, 5874, 300, 11, 1392, 11, 4195, 307, 3365, 337, 6916, 300, 727], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 54, "seek": 32660, "start": 342.16, "end": 346.6, "text": " use the change buffer and we see the page is in the buffer pool. We are going the evil", "tokens": [764, 264, 1319, 21762, 293, 321, 536, 264, 3028, 307, 294, 264, 21762, 7005, 13, 492, 366, 516, 264, 6724], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 55, "seek": 32660, "start": 346.6, "end": 351.8, "text": " and we evict the page. But we cannot do that because somebody could be holding a latch", "tokens": [293, 321, 1073, 985, 264, 3028, 13, 583, 321, 2644, 360, 300, 570, 2618, 727, 312, 5061, 257, 31837], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 56, "seek": 32660, "start": 351.8, "end": 355.88, "text": " on that page or the current thread is holding a latch and the page was modified. And we", "tokens": [322, 300, 3028, 420, 264, 2190, 7207, 307, 5061, 257, 31837, 293, 264, 3028, 390, 15873, 13, 400, 321], "temperature": 0.0, "avg_logprob": -0.1351375293014641, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.00010026548261521384}, {"id": 57, "seek": 35588, "start": 355.88, "end": 364.04, "text": " cannot wait for page writes to happen because this latch is blocking the page write. So", "tokens": [2644, 1699, 337, 3028, 13657, 281, 1051, 570, 341, 31837, 307, 17776, 264, 3028, 2464, 13, 407], "temperature": 0.0, "avg_logprob": -0.19391081549904562, "compression_ratio": 1.452513966480447, "no_speech_prob": 1.1227305549255107e-05}, {"id": 58, "seek": 35588, "start": 364.04, "end": 371.36, "text": " this is really difficult to test. And there was a recent fix to some hanks which were", "tokens": [341, 307, 534, 2252, 281, 1500, 13, 400, 456, 390, 257, 5162, 3191, 281, 512, 276, 14592, 597, 645], "temperature": 0.0, "avg_logprob": -0.19391081549904562, "compression_ratio": 1.452513966480447, "no_speech_prob": 1.1227305549255107e-05}, {"id": 59, "seek": 35588, "start": 371.36, "end": 379.71999999999997, "text": " introduced in MySQL 5.7. We have that fix in the release that is coming out next week.", "tokens": [7268, 294, 1222, 39934, 1025, 13, 22, 13, 492, 362, 300, 3191, 294, 264, 4374, 300, 307, 1348, 484, 958, 1243, 13], "temperature": 0.0, "avg_logprob": -0.19391081549904562, "compression_ratio": 1.452513966480447, "no_speech_prob": 1.1227305549255107e-05}, {"id": 60, "seek": 37972, "start": 379.72, "end": 387.72, "text": " That one will make it even more tricky this debug option. So in order for tests for this", "tokens": [663, 472, 486, 652, 309, 754, 544, 12414, 341, 24083, 3614, 13, 407, 294, 1668, 337, 6921, 337, 341], "temperature": 0.0, "avg_logprob": -0.1806389107761613, "compression_ratio": 1.6018957345971565, "no_speech_prob": 3.102460323134437e-05}, {"id": 61, "seek": 37972, "start": 387.72, "end": 394.20000000000005, "text": " to be effective, they have to do some smart tricks like abandon some tables for a while", "tokens": [281, 312, 4942, 11, 436, 362, 281, 360, 512, 4069, 11733, 411, 9072, 512, 8020, 337, 257, 1339], "temperature": 0.0, "avg_logprob": -0.1806389107761613, "compression_ratio": 1.6018957345971565, "no_speech_prob": 3.102460323134437e-05}, {"id": 62, "seek": 37972, "start": 394.20000000000005, "end": 400.28000000000003, "text": " and let them cool down. Use some other tables meanwhile and then come back.", "tokens": [293, 718, 552, 1627, 760, 13, 8278, 512, 661, 8020, 29252, 293, 550, 808, 646, 13], "temperature": 0.0, "avg_logprob": -0.1806389107761613, "compression_ratio": 1.6018957345971565, "no_speech_prob": 3.102460323134437e-05}, {"id": 63, "seek": 37972, "start": 400.28000000000003, "end": 408.84000000000003, "text": " Well, we got some nice magic tools as well. We have this random query generator. It's", "tokens": [1042, 11, 321, 658, 512, 1481, 5585, 3873, 382, 731, 13, 492, 362, 341, 4974, 14581, 19265, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.1806389107761613, "compression_ratio": 1.6018957345971565, "no_speech_prob": 3.102460323134437e-05}, {"id": 64, "seek": 40884, "start": 408.84, "end": 418.08, "text": " also used at MySQL and a grammar simplifier. We could start with the huge grammar of all", "tokens": [611, 1143, 412, 1222, 39934, 293, 257, 22317, 6883, 9902, 13, 492, 727, 722, 365, 264, 2603, 22317, 295, 439], "temperature": 0.0, "avg_logprob": -0.15614738464355468, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.00019891923875547945}, {"id": 65, "seek": 40884, "start": 418.08, "end": 424.84, "text": " of the SQL covering all the features and let it run. If the crash was frequent enough,", "tokens": [295, 264, 19200, 10322, 439, 264, 4122, 293, 718, 309, 1190, 13, 759, 264, 8252, 390, 18004, 1547, 11], "temperature": 0.0, "avg_logprob": -0.15614738464355468, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.00019891923875547945}, {"id": 66, "seek": 40884, "start": 424.84, "end": 432.28, "text": " then we could use this grammar simplifier. But in this case, this is very hard to reproduce", "tokens": [550, 321, 727, 764, 341, 22317, 6883, 9902, 13, 583, 294, 341, 1389, 11, 341, 307, 588, 1152, 281, 29501], "temperature": 0.0, "avg_logprob": -0.15614738464355468, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.00019891923875547945}, {"id": 67, "seek": 40884, "start": 432.28, "end": 437.12, "text": " back. We cannot use the simplifier. We cannot get any simpler grammar. We just have to run", "tokens": [646, 13, 492, 2644, 764, 264, 6883, 9902, 13, 492, 2644, 483, 604, 18587, 22317, 13, 492, 445, 362, 281, 1190], "temperature": 0.0, "avg_logprob": -0.15614738464355468, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.00019891923875547945}, {"id": 68, "seek": 43712, "start": 437.12, "end": 446.08, "text": " it all and hope for the best. But then we got this debugger RR, record and replay.", "tokens": [309, 439, 293, 1454, 337, 264, 1151, 13, 583, 550, 321, 658, 341, 24083, 1321, 497, 49, 11, 2136, 293, 23836, 13], "temperature": 0.0, "avg_logprob": -0.13865234540856403, "compression_ratio": 1.5, "no_speech_prob": 5.3890529670752585e-05}, {"id": 69, "seek": 43712, "start": 446.08, "end": 454.32, "text": " That one is really a huge productivity boost. We started using it maybe two or three years", "tokens": [663, 472, 307, 534, 257, 2603, 15604, 9194, 13, 492, 1409, 1228, 309, 1310, 732, 420, 1045, 924], "temperature": 0.0, "avg_logprob": -0.13865234540856403, "compression_ratio": 1.5, "no_speech_prob": 5.3890529670752585e-05}, {"id": 70, "seek": 43712, "start": 454.32, "end": 462.36, "text": " ago. So when you are able to reproduce a problem while running it under RR, what you would", "tokens": [2057, 13, 407, 562, 291, 366, 1075, 281, 29501, 257, 1154, 1339, 2614, 309, 833, 497, 49, 11, 437, 291, 576], "temperature": 0.0, "avg_logprob": -0.13865234540856403, "compression_ratio": 1.5, "no_speech_prob": 5.3890529670752585e-05}, {"id": 71, "seek": 46236, "start": 462.36, "end": 470.32, "text": " do that you will save RR record will save a trace, a deterministic trace of an execution", "tokens": [360, 300, 291, 486, 3155, 497, 49, 2136, 486, 3155, 257, 13508, 11, 257, 15957, 3142, 13508, 295, 364, 15058], "temperature": 0.0, "avg_logprob": -0.1547958351844965, "compression_ratio": 1.6418604651162791, "no_speech_prob": 4.1187118767993525e-05}, {"id": 72, "seek": 46236, "start": 470.32, "end": 477.08000000000004, "text": " that is interleaving processors or threads that are being monitored by it. It saves", "tokens": [300, 307, 728, 306, 6152, 27751, 420, 19314, 300, 366, 885, 36255, 538, 309, 13, 467, 19155], "temperature": 0.0, "avg_logprob": -0.1547958351844965, "compression_ratio": 1.6418604651162791, "no_speech_prob": 4.1187118767993525e-05}, {"id": 73, "seek": 46236, "start": 477.08000000000004, "end": 484.88, "text": " the system calls and the results and so on. And this trace can be debugged as many times", "tokens": [264, 1185, 5498, 293, 264, 3542, 293, 370, 322, 13, 400, 341, 13508, 393, 312, 24083, 3004, 382, 867, 1413], "temperature": 0.0, "avg_logprob": -0.1547958351844965, "compression_ratio": 1.6418604651162791, "no_speech_prob": 4.1187118767993525e-05}, {"id": 74, "seek": 46236, "start": 484.88, "end": 490.36, "text": " as you want. You just need the same binaries, same libraries and compatible processor. Then", "tokens": [382, 291, 528, 13, 509, 445, 643, 264, 912, 5171, 4889, 11, 912, 15148, 293, 18218, 15321, 13, 1396], "temperature": 0.0, "avg_logprob": -0.1547958351844965, "compression_ratio": 1.6418604651162791, "no_speech_prob": 4.1187118767993525e-05}, {"id": 75, "seek": 49036, "start": 490.36, "end": 495.96000000000004, "text": " you can run it. And you can set break points, you can set data watch points and you can", "tokens": [291, 393, 1190, 309, 13, 400, 291, 393, 992, 1821, 2793, 11, 291, 393, 992, 1412, 1159, 2793, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.15455208572686888, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.00010110604489455}, {"id": 76, "seek": 49036, "start": 495.96000000000004, "end": 501.88, "text": " execute in forward and backward direction. You can see what happened before the bad thing", "tokens": [14483, 294, 2128, 293, 23897, 3513, 13, 509, 393, 536, 437, 2011, 949, 264, 1578, 551], "temperature": 0.0, "avg_logprob": -0.15455208572686888, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.00010110604489455}, {"id": 77, "seek": 49036, "start": 501.88, "end": 507.0, "text": " was observed. And this can also be used for optimized code. You are probably familiar", "tokens": [390, 13095, 13, 400, 341, 393, 611, 312, 1143, 337, 26941, 3089, 13, 509, 366, 1391, 4963], "temperature": 0.0, "avg_logprob": -0.15455208572686888, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.00010110604489455}, {"id": 78, "seek": 49036, "start": 507.0, "end": 513.8000000000001, "text": " with cases where you are debugging an optimized executable, then the debugger complains that", "tokens": [365, 3331, 689, 291, 366, 45592, 364, 26941, 7568, 712, 11, 550, 264, 24083, 1321, 1209, 2315, 300], "temperature": 0.0, "avg_logprob": -0.15455208572686888, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.00010110604489455}, {"id": 79, "seek": 49036, "start": 513.8000000000001, "end": 518.4, "text": " some variable has been optimized out. Well, then you can just single step some instructions,", "tokens": [512, 7006, 575, 668, 26941, 484, 13, 1042, 11, 550, 291, 393, 445, 2167, 1823, 512, 9415, 11], "temperature": 0.0, "avg_logprob": -0.15455208572686888, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.00010110604489455}, {"id": 80, "seek": 51840, "start": 518.4, "end": 524.68, "text": " you get it from the registers, because you can go backwards in time. So now I am coming", "tokens": [291, 483, 309, 490, 264, 38351, 11, 570, 291, 393, 352, 12204, 294, 565, 13, 407, 586, 286, 669, 1348], "temperature": 0.0, "avg_logprob": -0.19821061527027803, "compression_ratio": 1.6027397260273972, "no_speech_prob": 2.7941368898609653e-05}, {"id": 81, "seek": 51840, "start": 524.68, "end": 532.0799999999999, "text": " to describe one bug that we found last year. And actually there was a support customer", "tokens": [281, 6786, 472, 7426, 300, 321, 1352, 1036, 1064, 13, 400, 767, 456, 390, 257, 1406, 5474], "temperature": 0.0, "avg_logprob": -0.19821061527027803, "compression_ratio": 1.6027397260273972, "no_speech_prob": 2.7941368898609653e-05}, {"id": 82, "seek": 51840, "start": 532.0799999999999, "end": 539.76, "text": " last week who hit this bug or a consequence of this bug. So we had a bug that would be", "tokens": [1036, 1243, 567, 2045, 341, 7426, 420, 257, 18326, 295, 341, 7426, 13, 407, 321, 632, 257, 7426, 300, 576, 312], "temperature": 0.0, "avg_logprob": -0.19821061527027803, "compression_ratio": 1.6027397260273972, "no_speech_prob": 2.7941368898609653e-05}, {"id": 83, "seek": 51840, "start": 539.76, "end": 544.04, "text": " a slow shutdown which is doing this change buffer merge. It would hang because the change", "tokens": [257, 2964, 34927, 597, 307, 884, 341, 1319, 21762, 22183, 13, 467, 576, 3967, 570, 264, 1319], "temperature": 0.0, "avg_logprob": -0.19821061527027803, "compression_ratio": 1.6027397260273972, "no_speech_prob": 2.7941368898609653e-05}, {"id": 84, "seek": 54404, "start": 544.04, "end": 549.1999999999999, "text": " buffer got corrupted. And we were testing some fixes in a branch for that. And then", "tokens": [21762, 658, 39480, 13, 400, 321, 645, 4997, 512, 32539, 294, 257, 9819, 337, 300, 13, 400, 550], "temperature": 0.0, "avg_logprob": -0.14287315413009288, "compression_ratio": 1.7715736040609138, "no_speech_prob": 3.027235834451858e-05}, {"id": 85, "seek": 54404, "start": 549.1999999999999, "end": 555.04, "text": " we got this assertion failure. This assertion failure essentially means that when it tried", "tokens": [321, 658, 341, 19810, 313, 7763, 13, 639, 19810, 313, 7763, 4476, 1355, 300, 562, 309, 3031], "temperature": 0.0, "avg_logprob": -0.14287315413009288, "compression_ratio": 1.7715736040609138, "no_speech_prob": 3.027235834451858e-05}, {"id": 86, "seek": 54404, "start": 555.04, "end": 562.0799999999999, "text": " to insert a record that was insert buffered, it ran out of space in the page. And what", "tokens": [281, 8969, 257, 2136, 300, 390, 8969, 9204, 4073, 11, 309, 5872, 484, 295, 1901, 294, 264, 3028, 13, 400, 437], "temperature": 0.0, "avg_logprob": -0.14287315413009288, "compression_ratio": 1.7715736040609138, "no_speech_prob": 3.027235834451858e-05}, {"id": 87, "seek": 54404, "start": 562.0799999999999, "end": 570.0, "text": " was the reason? Well, there were some extra records in the page. And it turned out that", "tokens": [390, 264, 1778, 30, 1042, 11, 456, 645, 512, 2857, 7724, 294, 264, 3028, 13, 400, 309, 3574, 484, 300], "temperature": 0.0, "avg_logprob": -0.14287315413009288, "compression_ratio": 1.7715736040609138, "no_speech_prob": 3.027235834451858e-05}, {"id": 88, "seek": 57000, "start": 570.0, "end": 576.2, "text": " this is partly by design. Hei Kittori, the creator of InnoDB, he was a friend of lazy", "tokens": [341, 307, 17031, 538, 1715, 13, 634, 72, 591, 593, 7386, 11, 264, 14181, 295, 682, 1771, 27735, 11, 415, 390, 257, 1277, 295, 14847], "temperature": 0.0, "avg_logprob": -0.1871489073100843, "compression_ratio": 1.609865470852018, "no_speech_prob": 8.031602919800207e-05}, {"id": 89, "seek": 57000, "start": 576.2, "end": 582.4, "text": " deletion or lazy operations. So drop index wouldn't clear anything from the change buffer.", "tokens": [1103, 302, 313, 420, 14847, 7705, 13, 407, 3270, 8186, 2759, 380, 1850, 1340, 490, 264, 1319, 21762, 13], "temperature": 0.0, "avg_logprob": -0.1871489073100843, "compression_ratio": 1.609865470852018, "no_speech_prob": 8.031602919800207e-05}, {"id": 90, "seek": 57000, "start": 582.4, "end": 586.72, "text": " It would leave the garbage behind. And later on, if the same page is reallocated for something", "tokens": [467, 576, 1856, 264, 14150, 2261, 13, 400, 1780, 322, 11, 498, 264, 912, 3028, 307, 319, 336, 905, 770, 337, 746], "temperature": 0.0, "avg_logprob": -0.1871489073100843, "compression_ratio": 1.609865470852018, "no_speech_prob": 8.031602919800207e-05}, {"id": 91, "seek": 57000, "start": 586.72, "end": 594.04, "text": " else, then we would pay the price and free the space from the change buffer, delete the", "tokens": [1646, 11, 550, 321, 576, 1689, 264, 3218, 293, 1737, 264, 1901, 490, 264, 1319, 21762, 11, 12097, 264], "temperature": 0.0, "avg_logprob": -0.1871489073100843, "compression_ratio": 1.609865470852018, "no_speech_prob": 8.031602919800207e-05}, {"id": 92, "seek": 59404, "start": 594.04, "end": 602.36, "text": " records. And in MySQL 5.7, there was a new feature, bulk insert creation or building", "tokens": [7724, 13, 400, 294, 1222, 39934, 1025, 13, 22, 11, 456, 390, 257, 777, 4111, 11, 16139, 8969, 8016, 420, 2390], "temperature": 0.0, "avg_logprob": -0.1572186719803583, "compression_ratio": 1.5129310344827587, "no_speech_prob": 3.9822836697567254e-05}, {"id": 93, "seek": 59404, "start": 602.36, "end": 610.48, "text": " indexes faster. And that codebase didn't do this adjustment correctly. It only cleared", "tokens": [8186, 279, 4663, 13, 400, 300, 3089, 17429, 994, 380, 360, 341, 17132, 8944, 13, 467, 787, 19725], "temperature": 0.0, "avg_logprob": -0.1572186719803583, "compression_ratio": 1.5129310344827587, "no_speech_prob": 3.9822836697567254e-05}, {"id": 94, "seek": 59404, "start": 610.48, "end": 616.24, "text": " some bit, but it didn't remove the records. And there was a mandatory Oracle security", "tokens": [512, 857, 11, 457, 309, 994, 380, 4159, 264, 7724, 13, 400, 456, 390, 257, 22173, 25654, 3825], "temperature": 0.0, "avg_logprob": -0.1572186719803583, "compression_ratio": 1.5129310344827587, "no_speech_prob": 3.9822836697567254e-05}, {"id": 95, "seek": 59404, "start": 616.24, "end": 622.0, "text": " train I took several years ago before switching to MariaDB. It said something like complexity", "tokens": [3847, 286, 1890, 2940, 924, 2057, 949, 16493, 281, 12734, 27735, 13, 467, 848, 746, 411, 14024], "temperature": 0.0, "avg_logprob": -0.1572186719803583, "compression_ratio": 1.5129310344827587, "no_speech_prob": 3.9822836697567254e-05}, {"id": 96, "seek": 62200, "start": 622.0, "end": 628.12, "text": " is the friend of security bugs. I found it somehow fitting here.", "tokens": [307, 264, 1277, 295, 3825, 15120, 13, 286, 1352, 309, 6063, 15669, 510, 13], "temperature": 0.0, "avg_logprob": -0.1285348213635958, "compression_ratio": 1.7231404958677685, "no_speech_prob": 8.509308099746704e-05}, {"id": 97, "seek": 62200, "start": 628.12, "end": 634.36, "text": " So the immediate root cause of this failure was that this new code cleared a bit that", "tokens": [407, 264, 11629, 5593, 3082, 295, 341, 7763, 390, 300, 341, 777, 3089, 19725, 257, 857, 300], "temperature": 0.0, "avg_logprob": -0.1285348213635958, "compression_ratio": 1.7231404958677685, "no_speech_prob": 8.509308099746704e-05}, {"id": 98, "seek": 62200, "start": 634.36, "end": 641.24, "text": " says that there are buffer changes for this page. So when somebody is going to use that", "tokens": [1619, 300, 456, 366, 21762, 2962, 337, 341, 3028, 13, 407, 562, 2618, 307, 516, 281, 764, 300], "temperature": 0.0, "avg_logprob": -0.1285348213635958, "compression_ratio": 1.7231404958677685, "no_speech_prob": 8.509308099746704e-05}, {"id": 99, "seek": 62200, "start": 641.24, "end": 645.56, "text": " page, he will see that, OK, there's nothing to do. I don't have to care about the change", "tokens": [3028, 11, 415, 486, 536, 300, 11, 2264, 11, 456, 311, 1825, 281, 360, 13, 286, 500, 380, 362, 281, 1127, 466, 264, 1319], "temperature": 0.0, "avg_logprob": -0.1285348213635958, "compression_ratio": 1.7231404958677685, "no_speech_prob": 8.509308099746704e-05}, {"id": 100, "seek": 62200, "start": 645.56, "end": 651.68, "text": " buffer. And then later on, something adds records to the page, and then these old records", "tokens": [21762, 13, 400, 550, 1780, 322, 11, 746, 10860, 7724, 281, 264, 3028, 11, 293, 550, 613, 1331, 7724], "temperature": 0.0, "avg_logprob": -0.1285348213635958, "compression_ratio": 1.7231404958677685, "no_speech_prob": 8.509308099746704e-05}, {"id": 101, "seek": 65168, "start": 651.68, "end": 657.1999999999999, "text": " from the change buffer will come to the page as part of a merge.", "tokens": [490, 264, 1319, 21762, 486, 808, 281, 264, 3028, 382, 644, 295, 257, 22183, 13], "temperature": 0.0, "avg_logprob": -0.1407184600830078, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.000173140229890123}, {"id": 102, "seek": 65168, "start": 657.1999999999999, "end": 663.56, "text": " And how can we prove this using this RR tool? By the way, you can download the slides from", "tokens": [400, 577, 393, 321, 7081, 341, 1228, 341, 497, 49, 2290, 30, 3146, 264, 636, 11, 291, 393, 5484, 264, 9788, 490], "temperature": 0.0, "avg_logprob": -0.1407184600830078, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.000173140229890123}, {"id": 103, "seek": 65168, "start": 663.56, "end": 670.2399999999999, "text": " the first page, and you can also download an attachment that has a script replay recording", "tokens": [264, 700, 3028, 11, 293, 291, 393, 611, 5484, 364, 19431, 300, 575, 257, 5755, 23836, 6613], "temperature": 0.0, "avg_logprob": -0.1407184600830078, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.000173140229890123}, {"id": 104, "seek": 65168, "start": 670.2399999999999, "end": 675.56, "text": " of the RR session. So I'm only showing some high-level view here, but you can download", "tokens": [295, 264, 497, 49, 5481, 13, 407, 286, 478, 787, 4099, 512, 1090, 12, 12418, 1910, 510, 11, 457, 291, 393, 5484], "temperature": 0.0, "avg_logprob": -0.1407184600830078, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.000173140229890123}, {"id": 105, "seek": 67556, "start": 675.56, "end": 682.4399999999999, "text": " a debugger session that shows the exact commands and the output, which I'm going to present", "tokens": [257, 24083, 1321, 5481, 300, 3110, 264, 1900, 16901, 293, 264, 5598, 11, 597, 286, 478, 516, 281, 1974], "temperature": 0.0, "avg_logprob": -0.17242950268006058, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.470926847308874e-05}, {"id": 106, "seek": 67556, "start": 682.4399999999999, "end": 689.4399999999999, "text": " in the next slides. So the short version, how we did this, how we can prove these claims", "tokens": [294, 264, 958, 9788, 13, 407, 264, 2099, 3037, 11, 577, 321, 630, 341, 11, 577, 321, 393, 7081, 613, 9441], "temperature": 0.0, "avg_logprob": -0.17242950268006058, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.470926847308874e-05}, {"id": 107, "seek": 67556, "start": 689.4399999999999, "end": 695.3599999999999, "text": " in the debugger, we let it continue from the start to the crash or the assertion failure.", "tokens": [294, 264, 24083, 1321, 11, 321, 718, 309, 2354, 490, 264, 722, 281, 264, 8252, 420, 264, 19810, 313, 7763, 13], "temperature": 0.0, "avg_logprob": -0.17242950268006058, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.470926847308874e-05}, {"id": 108, "seek": 67556, "start": 695.3599999999999, "end": 701.0, "text": " Then we set the break point on a function that was the last one to access the change", "tokens": [1396, 321, 992, 264, 1821, 935, 322, 257, 2445, 300, 390, 264, 1036, 472, 281, 2105, 264, 1319], "temperature": 0.0, "avg_logprob": -0.17242950268006058, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.470926847308874e-05}, {"id": 109, "seek": 70100, "start": 701.0, "end": 707.36, "text": " buffer bitmap bits. And from that function, we get the address of the bitmap bits for", "tokens": [21762, 857, 24223, 9239, 13, 400, 490, 300, 2445, 11, 321, 483, 264, 2985, 295, 264, 857, 24223, 9239, 337], "temperature": 0.0, "avg_logprob": -0.11855842099331393, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.00040755627560429275}, {"id": 110, "seek": 70100, "start": 707.36, "end": 713.04, "text": " this page, and we can set the data watch point on that. And I found this hardware watch", "tokens": [341, 3028, 11, 293, 321, 393, 992, 264, 1412, 1159, 935, 322, 300, 13, 400, 286, 1352, 341, 8837, 1159], "temperature": 0.0, "avg_logprob": -0.11855842099331393, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.00040755627560429275}, {"id": 111, "seek": 70100, "start": 713.04, "end": 717.6, "text": " point is a very powerful tool. It's really much easier for some things when you don't", "tokens": [935, 307, 257, 588, 4005, 2290, 13, 467, 311, 534, 709, 3571, 337, 512, 721, 562, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.11855842099331393, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.00040755627560429275}, {"id": 112, "seek": 70100, "start": 717.6, "end": 722.64, "text": " have an idea which code is going to modify or read something.", "tokens": [362, 364, 1558, 597, 3089, 307, 516, 281, 16927, 420, 1401, 746, 13], "temperature": 0.0, "avg_logprob": -0.11855842099331393, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.00040755627560429275}, {"id": 113, "seek": 70100, "start": 722.64, "end": 727.56, "text": " And then based on this watch point, we get some call stacks where these change buffer", "tokens": [400, 550, 2361, 322, 341, 1159, 935, 11, 321, 483, 512, 818, 30792, 689, 613, 1319, 21762], "temperature": 0.0, "avg_logprob": -0.11855842099331393, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.00040755627560429275}, {"id": 114, "seek": 72756, "start": 727.56, "end": 733.2399999999999, "text": " bits were last changed. And then we set the break points on functions that insert records", "tokens": [9239, 645, 1036, 3105, 13, 400, 550, 321, 992, 264, 1821, 2793, 322, 6828, 300, 8969, 7724], "temperature": 0.0, "avg_logprob": -0.1855424446395681, "compression_ratio": 1.674757281553398, "no_speech_prob": 8.25458046165295e-05}, {"id": 115, "seek": 72756, "start": 733.2399999999999, "end": 737.1199999999999, "text": " into the change buffer and delete records from there. And then we observe that, okay,", "tokens": [666, 264, 1319, 21762, 293, 12097, 7724, 490, 456, 13, 400, 550, 321, 11441, 300, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.1855424446395681, "compression_ratio": 1.674757281553398, "no_speech_prob": 8.25458046165295e-05}, {"id": 116, "seek": 72756, "start": 737.1199999999999, "end": 743.9599999999999, "text": " there was nothing to delete records for this page and basically proving this claim. So", "tokens": [456, 390, 1825, 281, 12097, 7724, 337, 341, 3028, 293, 1936, 27221, 341, 3932, 13, 407], "temperature": 0.0, "avg_logprob": -0.1855424446395681, "compression_ratio": 1.674757281553398, "no_speech_prob": 8.25458046165295e-05}, {"id": 117, "seek": 72756, "start": 743.9599999999999, "end": 751.8399999999999, "text": " we are printing the index ID and index name to get some more detail to this proof.", "tokens": [321, 366, 14699, 264, 8186, 7348, 293, 8186, 1315, 281, 483, 512, 544, 2607, 281, 341, 8177, 13], "temperature": 0.0, "avg_logprob": -0.1855424446395681, "compression_ratio": 1.674757281553398, "no_speech_prob": 8.25458046165295e-05}, {"id": 118, "seek": 75184, "start": 751.84, "end": 761.0, "text": " Oh, sorry. Okay, so we were unable to reproduce this with a small grammar. We just took something", "tokens": [876, 11, 2597, 13, 1033, 11, 370, 321, 645, 11299, 281, 29501, 341, 365, 257, 1359, 22317, 13, 492, 445, 1890, 746], "temperature": 0.0, "avg_logprob": -0.17698920645364902, "compression_ratio": 1.514018691588785, "no_speech_prob": 4.931048533762805e-05}, {"id": 119, "seek": 75184, "start": 761.0, "end": 766.44, "text": " and we got lucky and got the trace and debugged it.", "tokens": [293, 321, 658, 6356, 293, 658, 264, 13508, 293, 24083, 3004, 309, 13], "temperature": 0.0, "avg_logprob": -0.17698920645364902, "compression_ratio": 1.514018691588785, "no_speech_prob": 4.931048533762805e-05}, {"id": 120, "seek": 75184, "start": 766.44, "end": 774.8000000000001, "text": " Possible consequences of this bug are the wrong results. That's of course very difficult", "tokens": [430, 5785, 10098, 295, 341, 7426, 366, 264, 2085, 3542, 13, 663, 311, 295, 1164, 588, 2252], "temperature": 0.0, "avg_logprob": -0.17698920645364902, "compression_ratio": 1.514018691588785, "no_speech_prob": 4.931048533762805e-05}, {"id": 121, "seek": 75184, "start": 774.8000000000001, "end": 780.32, "text": " to prove. You don't have any testing tools to prove that really or not many tools. Or", "tokens": [281, 7081, 13, 509, 500, 380, 362, 604, 4997, 3873, 281, 7081, 300, 534, 420, 406, 867, 3873, 13, 1610], "temperature": 0.0, "avg_logprob": -0.17698920645364902, "compression_ratio": 1.514018691588785, "no_speech_prob": 4.931048533762805e-05}, {"id": 122, "seek": 78032, "start": 780.32, "end": 786.0, "text": " you could get the crash on change buffer merge like here we got. And that change buffer merge", "tokens": [291, 727, 483, 264, 8252, 322, 1319, 21762, 22183, 411, 510, 321, 658, 13, 400, 300, 1319, 21762, 22183], "temperature": 0.0, "avg_logprob": -0.26619256745784653, "compression_ratio": 1.7061068702290076, "no_speech_prob": 0.00010470977576915175}, {"id": 123, "seek": 78032, "start": 786.0, "end": 790.2, "text": " could happen any time, even if you are running check table to check if your table is okay,", "tokens": [727, 1051, 604, 565, 11, 754, 498, 291, 366, 2614, 1520, 3199, 281, 1520, 498, 428, 3199, 307, 1392, 11], "temperature": 0.0, "avg_logprob": -0.26619256745784653, "compression_ratio": 1.7061068702290076, "no_speech_prob": 0.00010470977576915175}, {"id": 124, "seek": 78032, "start": 790.2, "end": 796.48, "text": " then before my score, MariaDB 10.6, your server would crash because of this change buffer", "tokens": [550, 949, 452, 6175, 11, 12734, 27735, 1266, 13, 21, 11, 428, 7154, 576, 8252, 570, 295, 341, 1319, 21762], "temperature": 0.0, "avg_logprob": -0.26619256745784653, "compression_ratio": 1.7061068702290076, "no_speech_prob": 0.00010470977576915175}, {"id": 125, "seek": 78032, "start": 796.48, "end": 803.84, "text": " corruption. So in our case, it was a page overflow when applying an insert. And change", "tokens": [17959, 13, 407, 294, 527, 1389, 11, 309, 390, 257, 3028, 37772, 562, 9275, 364, 8969, 13, 400, 1319], "temperature": 0.0, "avg_logprob": -0.26619256745784653, "compression_ratio": 1.7061068702290076, "no_speech_prob": 0.00010470977576915175}, {"id": 126, "seek": 78032, "start": 803.84, "end": 808.12, "text": " buffer doesn't allow any page splitting. It must fit in the page. In the support case", "tokens": [21762, 1177, 380, 2089, 604, 3028, 30348, 13, 467, 1633, 3318, 294, 264, 3028, 13, 682, 264, 1406, 1389], "temperature": 0.0, "avg_logprob": -0.26619256745784653, "compression_ratio": 1.7061068702290076, "no_speech_prob": 0.00010470977576915175}, {"id": 127, "seek": 80812, "start": 808.12, "end": 815.68, "text": " I mentioned one week ago, the case was that the page split failed. It ran out of space.", "tokens": [286, 2835, 472, 1243, 2057, 11, 264, 1389, 390, 300, 264, 3028, 7472, 7612, 13, 467, 5872, 484, 295, 1901, 13], "temperature": 0.0, "avg_logprob": -0.13701288090195768, "compression_ratio": 1.7524752475247525, "no_speech_prob": 5.2310741011751816e-05}, {"id": 128, "seek": 80812, "start": 815.68, "end": 820.16, "text": " You are taking one page, you are trying to copy part of the records to a new page and", "tokens": [509, 366, 1940, 472, 3028, 11, 291, 366, 1382, 281, 5055, 644, 295, 264, 7724, 281, 257, 777, 3028, 293], "temperature": 0.0, "avg_logprob": -0.13701288090195768, "compression_ratio": 1.7524752475247525, "no_speech_prob": 5.2310741011751816e-05}, {"id": 129, "seek": 80812, "start": 820.16, "end": 827.4, "text": " it ran out of space. How can that be? It turned out that the page contained records for some", "tokens": [309, 5872, 484, 295, 1901, 13, 1012, 393, 300, 312, 30, 467, 3574, 484, 300, 264, 3028, 16212, 7724, 337, 512], "temperature": 0.0, "avg_logprob": -0.13701288090195768, "compression_ratio": 1.7524752475247525, "no_speech_prob": 5.2310741011751816e-05}, {"id": 130, "seek": 80812, "start": 827.4, "end": 835.0, "text": " other index which apparently had been dropped earlier and that index apparently had not", "tokens": [661, 8186, 597, 7970, 632, 668, 8119, 3071, 293, 300, 8186, 7970, 632, 406], "temperature": 0.0, "avg_logprob": -0.13701288090195768, "compression_ratio": 1.7524752475247525, "no_speech_prob": 5.2310741011751816e-05}, {"id": 131, "seek": 83500, "start": 835.0, "end": 843.8, "text": " null columns. So the length of a variable length field was interpreted, was stored there for", "tokens": [18184, 13766, 13, 407, 264, 4641, 295, 257, 7006, 4641, 2519, 390, 26749, 11, 390, 12187, 456, 337], "temperature": 0.0, "avg_logprob": -0.22188794228338427, "compression_ratio": 1.608433734939759, "no_speech_prob": 0.0002199073787778616}, {"id": 132, "seek": 83500, "start": 843.8, "end": 850.56, "text": " that index where this correct index would have the null bit map. And then we would read", "tokens": [300, 8186, 689, 341, 3006, 8186, 576, 362, 264, 18184, 857, 4471, 13, 400, 550, 321, 576, 1401], "temperature": 0.0, "avg_logprob": -0.22188794228338427, "compression_ratio": 1.608433734939759, "no_speech_prob": 0.0002199073787778616}, {"id": 133, "seek": 83500, "start": 850.56, "end": 855.68, "text": " the length of the record from previous byte and that's how we would get these two long", "tokens": [264, 4641, 295, 264, 2136, 490, 3894, 40846, 293, 300, 311, 577, 321, 576, 483, 613, 732, 938], "temperature": 0.0, "avg_logprob": -0.22188794228338427, "compression_ratio": 1.608433734939759, "no_speech_prob": 0.0002199073787778616}, {"id": 134, "seek": 85568, "start": 855.68, "end": 864.64, "text": " records being copied. Oh, five minutes left. I have to hurry up. So this debugging, how", "tokens": [7724, 885, 25365, 13, 876, 11, 1732, 2077, 1411, 13, 286, 362, 281, 11025, 493, 13, 407, 341, 45592, 11, 577], "temperature": 0.0, "avg_logprob": -0.21079631285233932, "compression_ratio": 1.4802259887005649, "no_speech_prob": 6.318830855889246e-05}, {"id": 135, "seek": 85568, "start": 864.64, "end": 871.0, "text": " it goes in detail, we continue to the end of the execution from the start. And then", "tokens": [309, 1709, 294, 2607, 11, 321, 2354, 281, 264, 917, 295, 264, 15058, 490, 264, 722, 13, 400, 550], "temperature": 0.0, "avg_logprob": -0.21079631285233932, "compression_ratio": 1.4802259887005649, "no_speech_prob": 6.318830855889246e-05}, {"id": 136, "seek": 85568, "start": 871.0, "end": 877.28, "text": " we reverse continue to go back from the abort signal. Then we set the temporary breakpoint", "tokens": [321, 9943, 2354, 281, 352, 646, 490, 264, 38117, 6358, 13, 1396, 321, 992, 264, 13413, 1821, 6053], "temperature": 0.0, "avg_logprob": -0.21079631285233932, "compression_ratio": 1.4802259887005649, "no_speech_prob": 6.318830855889246e-05}, {"id": 137, "seek": 87728, "start": 877.28, "end": 886.48, "text": " to this bitmap page access. Then we get to that breakpoint and we get in a register we", "tokens": [281, 341, 857, 24223, 3028, 2105, 13, 1396, 321, 483, 281, 300, 1821, 6053, 293, 321, 483, 294, 257, 7280, 321], "temperature": 0.0, "avg_logprob": -0.16187664956757516, "compression_ratio": 1.607361963190184, "no_speech_prob": 7.336105772992596e-05}, {"id": 138, "seek": 87728, "start": 886.48, "end": 891.72, "text": " happen to have the byte address of the bitmap byte which we are interested in. And then", "tokens": [1051, 281, 362, 264, 40846, 2985, 295, 264, 857, 24223, 40846, 597, 321, 366, 3102, 294, 13, 400, 550], "temperature": 0.0, "avg_logprob": -0.16187664956757516, "compression_ratio": 1.607361963190184, "no_speech_prob": 7.336105772992596e-05}, {"id": 139, "seek": 87728, "start": 891.72, "end": 900.6, "text": " we reverse continue to the changes of that byte. So the last occurrence of that was for", "tokens": [321, 9943, 2354, 281, 264, 2962, 295, 300, 40846, 13, 407, 264, 1036, 36122, 295, 300, 390, 337], "temperature": 0.0, "avg_logprob": -0.16187664956757516, "compression_ratio": 1.607361963190184, "no_speech_prob": 7.336105772992596e-05}, {"id": 140, "seek": 90060, "start": 900.6, "end": 908.8000000000001, "text": " an insert that was buffered after the at index. And we continue from that, we see that this,", "tokens": [364, 8969, 300, 390, 9204, 4073, 934, 264, 412, 8186, 13, 400, 321, 2354, 490, 300, 11, 321, 536, 300, 341, 11], "temperature": 0.0, "avg_logprob": -0.18665858471032346, "compression_ratio": 1.6987179487179487, "no_speech_prob": 4.594787606038153e-05}, {"id": 141, "seek": 90060, "start": 908.8000000000001, "end": 914.44, "text": " the previous occurrence is the at index that is clearing the flag. And from that we can", "tokens": [264, 3894, 36122, 307, 264, 412, 8186, 300, 307, 23937, 264, 7166, 13, 400, 490, 300, 321, 393], "temperature": 0.0, "avg_logprob": -0.18665858471032346, "compression_ratio": 1.6987179487179487, "no_speech_prob": 4.594787606038153e-05}, {"id": 142, "seek": 90060, "start": 914.44, "end": 921.84, "text": " get the page number which is affected and we can get the index ID and index name and", "tokens": [483, 264, 3028, 1230, 597, 307, 8028, 293, 321, 393, 483, 264, 8186, 7348, 293, 8186, 1315, 293], "temperature": 0.0, "avg_logprob": -0.18665858471032346, "compression_ratio": 1.6987179487179487, "no_speech_prob": 4.594787606038153e-05}, {"id": 143, "seek": 92184, "start": 921.84, "end": 930.64, "text": " the SQL statement which is alter table. And then we set some more breakpoints on this", "tokens": [264, 19200, 5629, 597, 307, 11337, 3199, 13, 400, 550, 321, 992, 512, 544, 1821, 20552, 322, 341], "temperature": 0.0, "avg_logprob": -0.18573589566387708, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.00015172886196523905}, {"id": 144, "seek": 92184, "start": 930.64, "end": 934.72, "text": " insert buffer delete and insert operations. Set the condition that we wanted only for", "tokens": [8969, 21762, 12097, 293, 8969, 7705, 13, 8928, 264, 4188, 300, 321, 1415, 787, 337], "temperature": 0.0, "avg_logprob": -0.18573589566387708, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.00015172886196523905}, {"id": 145, "seek": 92184, "start": 934.72, "end": 940.88, "text": " this page and then we reverse continue, we get the insert that was buffered before this", "tokens": [341, 3028, 293, 550, 321, 9943, 2354, 11, 321, 483, 264, 8969, 300, 390, 9204, 4073, 949, 341], "temperature": 0.0, "avg_logprob": -0.18573589566387708, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.00015172886196523905}, {"id": 146, "seek": 92184, "start": 940.88, "end": 947.24, "text": " at index. Apparently there was a drop index in between but I didn't add statements to", "tokens": [412, 8186, 13, 16755, 456, 390, 257, 3270, 8186, 294, 1296, 457, 286, 994, 380, 909, 12363, 281], "temperature": 0.0, "avg_logprob": -0.18573589566387708, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.00015172886196523905}, {"id": 147, "seek": 94724, "start": 947.24, "end": 954.04, "text": " get a breakpoint there this time. So the index name is different as after the at index and", "tokens": [483, 257, 1821, 6053, 456, 341, 565, 13, 407, 264, 8186, 1315, 307, 819, 382, 934, 264, 412, 8186, 293], "temperature": 0.0, "avg_logprob": -0.13858914677100845, "compression_ratio": 1.6839378238341969, "no_speech_prob": 0.0005283418577164412}, {"id": 148, "seek": 94724, "start": 954.04, "end": 960.92, "text": " index ID is different. And there was no call to the change buffer deletion. When we continue", "tokens": [8186, 7348, 307, 819, 13, 400, 456, 390, 572, 818, 281, 264, 1319, 21762, 1103, 302, 313, 13, 1133, 321, 2354], "temperature": 0.0, "avg_logprob": -0.13858914677100845, "compression_ratio": 1.6839378238341969, "no_speech_prob": 0.0005283418577164412}, {"id": 149, "seek": 94724, "start": 960.92, "end": 966.12, "text": " from this point to the end of the execution we just reached the assertion failure again", "tokens": [490, 341, 935, 281, 264, 917, 295, 264, 15058, 321, 445, 6488, 264, 19810, 313, 7763, 797], "temperature": 0.0, "avg_logprob": -0.13858914677100845, "compression_ratio": 1.6839378238341969, "no_speech_prob": 0.0005283418577164412}, {"id": 150, "seek": 94724, "start": 966.12, "end": 972.52, "text": " without any change buffer record deletion in between.", "tokens": [1553, 604, 1319, 21762, 2136, 1103, 302, 313, 294, 1296, 13], "temperature": 0.0, "avg_logprob": -0.13858914677100845, "compression_ratio": 1.6839378238341969, "no_speech_prob": 0.0005283418577164412}, {"id": 151, "seek": 97252, "start": 972.52, "end": 981.96, "text": " So I'm quoting this Finnish ski jumper who apparently was confusing to French phrases.", "tokens": [407, 286, 478, 41552, 341, 38429, 14274, 44061, 567, 7970, 390, 13181, 281, 5522, 20312, 13], "temperature": 0.0, "avg_logprob": -0.2037670472088982, "compression_ratio": 1.5083798882681565, "no_speech_prob": 0.0009277105564251542}, {"id": 152, "seek": 97252, "start": 981.96, "end": 988.56, "text": " He was wishing him a good trip when he is starting to do the ski jumping. And I'm wishing", "tokens": [634, 390, 30049, 796, 257, 665, 4931, 562, 415, 307, 2891, 281, 360, 264, 14274, 11233, 13, 400, 286, 478, 30049], "temperature": 0.0, "avg_logprob": -0.2037670472088982, "compression_ratio": 1.5083798882681565, "no_speech_prob": 0.0009277105564251542}, {"id": 153, "seek": 97252, "start": 988.56, "end": 995.6, "text": " a good trip for anybody who is using the change buffer. So and the deja vu, yes, we have seen", "tokens": [257, 665, 4931, 337, 4472, 567, 307, 1228, 264, 1319, 21762, 13, 407, 293, 264, 38260, 9732, 11, 2086, 11, 321, 362, 1612], "temperature": 0.0, "avg_logprob": -0.2037670472088982, "compression_ratio": 1.5083798882681565, "no_speech_prob": 0.0009277105564251542}, {"id": 154, "seek": 99560, "start": 995.6, "end": 1003.52, "text": " this shut down hang actually earlier. There was a 10.1, MariaDB 10.1 support customer case.", "tokens": [341, 5309, 760, 3967, 767, 3071, 13, 821, 390, 257, 1266, 13, 16, 11, 12734, 27735, 1266, 13, 16, 1406, 5474, 1389, 13], "temperature": 0.0, "avg_logprob": -0.3234374663409065, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.00024833748466335237}, {"id": 155, "seek": 99560, "start": 1003.52, "end": 1010.24, "text": " They got this hang and we had to do something to fix that. But in MariaDB 10.5 we made", "tokens": [814, 658, 341, 3967, 293, 321, 632, 281, 360, 746, 281, 3191, 300, 13, 583, 294, 12734, 27735, 1266, 13, 20, 321, 1027], "temperature": 0.0, "avg_logprob": -0.3234374663409065, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.00024833748466335237}, {"id": 156, "seek": 99560, "start": 1010.24, "end": 1019.0, "text": " another change hopefully to reduce the chances of getting like random change buffer much", "tokens": [1071, 1319, 4696, 281, 5407, 264, 10486, 295, 1242, 411, 4974, 1319, 21762, 709], "temperature": 0.0, "avg_logprob": -0.3234374663409065, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.00024833748466335237}, {"id": 157, "seek": 101900, "start": 1019.0, "end": 1028.52, "text": " because basically after this change buffer much only happens when SQL statement needs", "tokens": [570, 1936, 934, 341, 1319, 21762, 709, 787, 2314, 562, 19200, 5629, 2203], "temperature": 0.0, "avg_logprob": -0.2667271614074707, "compression_ratio": 1.5084745762711864, "no_speech_prob": 0.00010691467468859628}, {"id": 158, "seek": 101900, "start": 1028.52, "end": 1034.0, "text": " that change buffer much to happen. No background operation. So we had to adjust that previous", "tokens": [300, 1319, 21762, 709, 281, 1051, 13, 883, 3678, 6916, 13, 407, 321, 632, 281, 4369, 300, 3894], "temperature": 0.0, "avg_logprob": -0.2667271614074707, "compression_ratio": 1.5084745762711864, "no_speech_prob": 0.00010691467468859628}, {"id": 159, "seek": 101900, "start": 1034.0, "end": 1040.8, "text": " fix for the 10.5 code base but that was not adjusted correctly. And we were not able to", "tokens": [3191, 337, 264, 1266, 13, 20, 3089, 3096, 457, 300, 390, 406, 19871, 8944, 13, 400, 321, 645, 406, 1075, 281], "temperature": 0.0, "avg_logprob": -0.2667271614074707, "compression_ratio": 1.5084745762711864, "no_speech_prob": 0.00010691467468859628}, {"id": 160, "seek": 104080, "start": 1040.8, "end": 1049.28, "text": " reproduce this corruption or this hang earlier. So only quite lately we were able to reproduce", "tokens": [29501, 341, 17959, 420, 341, 3967, 3071, 13, 407, 787, 1596, 12881, 321, 645, 1075, 281, 29501], "temperature": 0.0, "avg_logprob": -0.1361327398390997, "compression_ratio": 1.5371428571428571, "no_speech_prob": 1.5969957303241245e-06}, {"id": 161, "seek": 104080, "start": 1049.28, "end": 1057.72, "text": " it and then we were able to debug it properly. There are some other corruption caused by", "tokens": [309, 293, 550, 321, 645, 1075, 281, 24083, 309, 6108, 13, 821, 366, 512, 661, 17959, 7008, 538], "temperature": 0.0, "avg_logprob": -0.1361327398390997, "compression_ratio": 1.5371428571428571, "no_speech_prob": 1.5969957303241245e-06}, {"id": 162, "seek": 104080, "start": 1057.72, "end": 1066.56, "text": " the change buffer. And one thing I want to notice that in MariaDB 10.6 recently there", "tokens": [264, 1319, 21762, 13, 400, 472, 551, 286, 528, 281, 3449, 300, 294, 12734, 27735, 1266, 13, 21, 3938, 456], "temperature": 0.0, "avg_logprob": -0.1361327398390997, "compression_ratio": 1.5371428571428571, "no_speech_prob": 1.5969957303241245e-06}, {"id": 163, "seek": 106656, "start": 1066.56, "end": 1072.6399999999999, "text": " was a fix that we should not crash on any page corruption. If there are any cases where", "tokens": [390, 257, 3191, 300, 321, 820, 406, 8252, 322, 604, 3028, 17959, 13, 759, 456, 366, 604, 3331, 689], "temperature": 0.0, "avg_logprob": -0.18926296677700308, "compression_ratio": 1.5848214285714286, "no_speech_prob": 0.00019667732703965157}, {"id": 164, "seek": 106656, "start": 1072.6399999999999, "end": 1079.08, "text": " we are still crashing I would be interested in details. And this includes like check table", "tokens": [321, 366, 920, 26900, 286, 576, 312, 3102, 294, 4365, 13, 400, 341, 5974, 411, 1520, 3199], "temperature": 0.0, "avg_logprob": -0.18926296677700308, "compression_ratio": 1.5848214285714286, "no_speech_prob": 0.00019667732703965157}, {"id": 165, "seek": 106656, "start": 1079.08, "end": 1083.56, "text": " when there is a crash. When there is a failure during change buffer much it will not cause", "tokens": [562, 456, 307, 257, 8252, 13, 1133, 456, 307, 257, 7763, 1830, 1319, 21762, 709, 309, 486, 406, 3082], "temperature": 0.0, "avg_logprob": -0.18926296677700308, "compression_ratio": 1.5848214285714286, "no_speech_prob": 0.00019667732703965157}, {"id": 166, "seek": 106656, "start": 1083.56, "end": 1092.48, "text": " a crash. There was a mystery bug filed like 12 years ago. MySQL bug. The customer got", "tokens": [257, 8252, 13, 821, 390, 257, 11422, 7426, 18789, 411, 2272, 924, 2057, 13, 1222, 39934, 7426, 13, 440, 5474, 658], "temperature": 0.0, "avg_logprob": -0.18926296677700308, "compression_ratio": 1.5848214285714286, "no_speech_prob": 0.00019667732703965157}, {"id": 167, "seek": 109248, "start": 1092.48, "end": 1099.6, "text": " a crash during change buffer much because the page got empty as a result of applying", "tokens": [257, 8252, 1830, 1319, 21762, 709, 570, 264, 3028, 658, 6707, 382, 257, 1874, 295, 9275], "temperature": 0.0, "avg_logprob": -0.18773424334642363, "compression_ratio": 1.52, "no_speech_prob": 6.452696834458038e-05}, {"id": 168, "seek": 109248, "start": 1099.6, "end": 1105.48, "text": " a perch operation. I can think of several bugs that have been fixed in MariaDB that", "tokens": [257, 29240, 6916, 13, 286, 393, 519, 295, 2940, 15120, 300, 362, 668, 6806, 294, 12734, 27735, 300], "temperature": 0.0, "avg_logprob": -0.18773424334642363, "compression_ratio": 1.52, "no_speech_prob": 6.452696834458038e-05}, {"id": 169, "seek": 109248, "start": 1105.48, "end": 1113.8, "text": " could be the explanation. The last one, this one from the previous example that cannot", "tokens": [727, 312, 264, 10835, 13, 440, 1036, 472, 11, 341, 472, 490, 264, 3894, 1365, 300, 2644], "temperature": 0.0, "avg_logprob": -0.18773424334642363, "compression_ratio": 1.52, "no_speech_prob": 6.452696834458038e-05}, {"id": 170, "seek": 109248, "start": 1113.8, "end": 1120.96, "text": " apply because that only was introduced in MySQL 5.7 which they didn't use. And of this", "tokens": [3079, 570, 300, 787, 390, 7268, 294, 1222, 39934, 1025, 13, 22, 597, 436, 994, 380, 764, 13, 400, 295, 341], "temperature": 0.0, "avg_logprob": -0.18773424334642363, "compression_ratio": 1.52, "no_speech_prob": 6.452696834458038e-05}, {"id": 171, "seek": 112096, "start": 1120.96, "end": 1133.96, "text": " list the 30422 it's a clone of MySQL fix which is applicable to MariaDB 10.3 and 10.4. Others", "tokens": [1329, 264, 2217, 19, 7490, 309, 311, 257, 26506, 295, 1222, 39934, 3191, 597, 307, 21142, 281, 12734, 27735, 1266, 13, 18, 293, 1266, 13, 19, 13, 20277], "temperature": 0.0, "avg_logprob": -0.1705004952170632, "compression_ratio": 1.2328767123287672, "no_speech_prob": 7.540747901657596e-05}, {"id": 172, "seek": 112096, "start": 1133.96, "end": 1141.96, "text": " I don't think have been fixed in MySQL yet. So this teaches us that it really pays off", "tokens": [286, 500, 380, 519, 362, 668, 6806, 294, 1222, 39934, 1939, 13, 407, 341, 16876, 505, 300, 309, 534, 10604, 766], "temperature": 0.0, "avg_logprob": -0.1705004952170632, "compression_ratio": 1.2328767123287672, "no_speech_prob": 7.540747901657596e-05}, {"id": 173, "seek": 114196, "start": 1141.96, "end": 1150.8400000000001, "text": " to analyze any obscure failure you get from running with RR because there are games in", "tokens": [281, 12477, 604, 34443, 7763, 291, 483, 490, 2614, 365, 497, 49, 570, 456, 366, 2813, 294], "temperature": 0.0, "avg_logprob": -0.17106762799349698, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.8231050489703193e-05}, {"id": 174, "seek": 114196, "start": 1150.8400000000001, "end": 1155.96, "text": " there. And I think that assertions are like lottery tickets. If you don't write assertions", "tokens": [456, 13, 400, 286, 519, 300, 19810, 626, 366, 411, 27391, 12628, 13, 759, 291, 500, 380, 2464, 19810, 626], "temperature": 0.0, "avg_logprob": -0.17106762799349698, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.8231050489703193e-05}, {"id": 175, "seek": 114196, "start": 1155.96, "end": 1163.52, "text": " in your code then you can't win these kind of bug findings. And sometimes you can lose,", "tokens": [294, 428, 3089, 550, 291, 393, 380, 1942, 613, 733, 295, 7426, 16483, 13, 400, 2171, 291, 393, 3624, 11], "temperature": 0.0, "avg_logprob": -0.17106762799349698, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.8231050489703193e-05}, {"id": 176, "seek": 114196, "start": 1163.52, "end": 1168.44, "text": " you can write a bogus assertion okay you make mistake, you correct it and improve the assertion", "tokens": [291, 393, 2464, 257, 26132, 301, 19810, 313, 1392, 291, 652, 6146, 11, 291, 3006, 309, 293, 3470, 264, 19810, 313], "temperature": 0.0, "avg_logprob": -0.17106762799349698, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.8231050489703193e-05}, {"id": 177, "seek": 116844, "start": 1168.44, "end": 1177.3600000000001, "text": " and then hopefully you will get something better later. We have some mitigation for this in", "tokens": [293, 550, 4696, 291, 486, 483, 746, 1101, 1780, 13, 492, 362, 512, 32649, 337, 341, 294], "temperature": 0.0, "avg_logprob": -0.20405148014877783, "compression_ratio": 1.4550264550264551, "no_speech_prob": 3.224554529879242e-05}, {"id": 178, "seek": 116844, "start": 1177.3600000000001, "end": 1188.52, "text": " MariaDB. We don't access the data file when executing drop table. So if in that case we", "tokens": [12734, 27735, 13, 492, 500, 380, 2105, 264, 1412, 3991, 562, 32368, 3270, 3199, 13, 407, 498, 294, 300, 1389, 321], "temperature": 0.0, "avg_logprob": -0.20405148014877783, "compression_ratio": 1.4550264550264551, "no_speech_prob": 3.224554529879242e-05}, {"id": 179, "seek": 116844, "start": 1188.52, "end": 1197.1200000000001, "text": " are avoiding maybe more crashes on drop table. And there was a bug in you know DB slow shutdown", "tokens": [366, 20220, 1310, 544, 28642, 322, 3270, 3199, 13, 400, 456, 390, 257, 7426, 294, 291, 458, 26754, 2964, 34927], "temperature": 0.0, "avg_logprob": -0.20405148014877783, "compression_ratio": 1.4550264550264551, "no_speech_prob": 3.224554529879242e-05}, {"id": 180, "seek": 119712, "start": 1197.12, "end": 1202.4399999999998, "text": " that the change buffer merge wouldn't check for log file overflow. So if the user got", "tokens": [300, 264, 1319, 21762, 22183, 2759, 380, 1520, 337, 3565, 3991, 37772, 13, 407, 498, 264, 4195, 658], "temperature": 0.0, "avg_logprob": -0.16022052535091538, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00010781738819787279}, {"id": 181, "seek": 119712, "start": 1202.4399999999998, "end": 1206.6799999999998, "text": " impatient and killed the server because it's taken too long time then they could end up", "tokens": [36895, 293, 4652, 264, 7154, 570, 309, 311, 2726, 886, 938, 565, 550, 436, 727, 917, 493], "temperature": 0.0, "avg_logprob": -0.16022052535091538, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00010781738819787279}, {"id": 182, "seek": 119712, "start": 1206.6799999999998, "end": 1215.8, "text": " with unrecoverable database. And some more mitigation that we disabled this change buffer", "tokens": [365, 20584, 12516, 712, 8149, 13, 400, 512, 544, 32649, 300, 321, 15191, 341, 1319, 21762], "temperature": 0.0, "avg_logprob": -0.16022052535091538, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00010781738819787279}, {"id": 183, "seek": 119712, "start": 1215.8, "end": 1222.32, "text": " by default. We deprecated the parameter and we removed the change buffer in the 11.0 release.", "tokens": [538, 7576, 13, 492, 1367, 13867, 770, 264, 13075, 293, 321, 7261, 264, 1319, 21762, 294, 264, 2975, 13, 15, 4374, 13], "temperature": 0.0, "avg_logprob": -0.16022052535091538, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00010781738819787279}, {"id": 184, "seek": 122232, "start": 1222.32, "end": 1229.84, "text": " The upgrade code for handling it, it was tested and I hope that if there is some corruption", "tokens": [440, 11484, 3089, 337, 13175, 309, 11, 309, 390, 8246, 293, 286, 1454, 300, 498, 456, 307, 512, 17959], "temperature": 0.0, "avg_logprob": -0.19731366249822802, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00021968991495668888}, {"id": 185, "seek": 122232, "start": 1229.84, "end": 1235.96, "text": " notice during the upgrade it should still be a possible to go back to the earlier version", "tokens": [3449, 1830, 264, 11484, 309, 820, 920, 312, 257, 1944, 281, 352, 646, 281, 264, 3071, 3037], "temperature": 0.0, "avg_logprob": -0.19731366249822802, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00021968991495668888}, {"id": 186, "seek": 122232, "start": 1235.96, "end": 1247.6799999999998, "text": " and then do something to correct. Yes, if there are any records in the change buffer", "tokens": [293, 550, 360, 746, 281, 3006, 13, 1079, 11, 498, 456, 366, 604, 7724, 294, 264, 1319, 21762], "temperature": 0.0, "avg_logprob": -0.19731366249822802, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00021968991495668888}, {"id": 187, "seek": 124768, "start": 1247.68, "end": 1253.88, "text": " we ignore, we don't trust these bitmap bits. We go through the change buffer records and", "tokens": [321, 11200, 11, 321, 500, 380, 3361, 613, 857, 24223, 9239, 13, 492, 352, 807, 264, 1319, 21762, 7724, 293], "temperature": 0.0, "avg_logprob": -0.17159201117122874, "compression_ratio": 1.451086956521739, "no_speech_prob": 0.00011234638805035502}, {"id": 188, "seek": 124768, "start": 1253.88, "end": 1263.48, "text": " if there are any we will apply them. Yeah, so that was basically what I wanted to say", "tokens": [498, 456, 366, 604, 321, 486, 3079, 552, 13, 865, 11, 370, 300, 390, 1936, 437, 286, 1415, 281, 584], "temperature": 0.0, "avg_logprob": -0.17159201117122874, "compression_ratio": 1.451086956521739, "no_speech_prob": 0.00011234638805035502}, {"id": 189, "seek": 124768, "start": 1263.48, "end": 1273.1200000000001, "text": " and maybe this last slide that it's a good thing to have a nice layer design if you optimize", "tokens": [293, 1310, 341, 1036, 4137, 300, 309, 311, 257, 665, 551, 281, 362, 257, 1481, 4583, 1715, 498, 291, 19719], "temperature": 0.0, "avg_logprob": -0.17159201117122874, "compression_ratio": 1.451086956521739, "no_speech_prob": 0.00011234638805035502}, {"id": 190, "seek": 127312, "start": 1273.12, "end": 1278.3999999999999, "text": " things by breaking this layer boundaries then you are asking for trouble. That's basically", "tokens": [721, 538, 7697, 341, 4583, 13180, 550, 291, 366, 3365, 337, 5253, 13, 663, 311, 1936], "temperature": 0.0, "avg_logprob": -0.33436433730586884, "compression_ratio": 1.461111111111111, "no_speech_prob": 4.0472514228895307e-05}, {"id": 191, "seek": 127312, "start": 1278.3999999999999, "end": 1287.32, "text": " what we can learn from this. Question, you said that you fixed a few things in Merle", "tokens": [437, 321, 393, 1466, 490, 341, 13, 14464, 11, 291, 848, 300, 291, 6806, 257, 1326, 721, 294, 6124, 306], "temperature": 0.0, "avg_logprob": -0.33436433730586884, "compression_ratio": 1.461111111111111, "no_speech_prob": 4.0472514228895307e-05}, {"id": 192, "seek": 127312, "start": 1287.32, "end": 1296.4799999999998, "text": " DB and they're not yet fixed in upstream. Are there bugs open upstream for fixing these", "tokens": [26754, 293, 436, 434, 406, 1939, 6806, 294, 33915, 13, 2014, 456, 15120, 1269, 33915, 337, 19442, 613], "temperature": 0.0, "avg_logprob": -0.33436433730586884, "compression_ratio": 1.461111111111111, "no_speech_prob": 4.0472514228895307e-05}, {"id": 193, "seek": 129648, "start": 1296.48, "end": 1303.48, "text": " things? I haven't filed any, I lost my MySQL account when I resigned Oracle.", "tokens": [721, 30, 286, 2378, 380, 18789, 604, 11, 286, 2731, 452, 1222, 39934, 2696, 562, 286, 41180, 25654, 13], "temperature": 0.0, "avg_logprob": -0.36766196659633094, "compression_ratio": 1.358695652173913, "no_speech_prob": 1.817254815250635e-05}, {"id": 194, "seek": 129648, "start": 1303.48, "end": 1312.04, "text": " Okay, well, I'll look into it so we can get this fixed in upstream. Yeah, you are welcome", "tokens": [1033, 11, 731, 11, 286, 603, 574, 666, 309, 370, 321, 393, 483, 341, 6806, 294, 33915, 13, 865, 11, 291, 366, 2928], "temperature": 0.0, "avg_logprob": -0.36766196659633094, "compression_ratio": 1.358695652173913, "no_speech_prob": 1.817254815250635e-05}, {"id": 195, "seek": 129648, "start": 1312.04, "end": 1318.0, "text": " to file bugs and maybe they will be fixed. Well, especially if it's a crashing bug.", "tokens": [281, 3991, 15120, 293, 1310, 436, 486, 312, 6806, 13, 1042, 11, 2318, 498, 309, 311, 257, 26900, 7426, 13], "temperature": 0.0, "avg_logprob": -0.36766196659633094, "compression_ratio": 1.358695652173913, "no_speech_prob": 1.817254815250635e-05}, {"id": 196, "seek": 131800, "start": 1318.0, "end": 1327.96, "text": " Yeah, but you can't repeat them, so you have a hard time proving that. Well, there are", "tokens": [865, 11, 457, 291, 393, 380, 7149, 552, 11, 370, 291, 362, 257, 1152, 565, 27221, 300, 13, 1042, 11, 456, 366], "temperature": 0.0, "avg_logprob": -0.5128262837727865, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.002116365823894739}, {"id": 197, "seek": 131800, "start": 1327.96, "end": 1332.68, "text": " tools obviously now, weren't obvious before. I'm very persistent. It's like once we know", "tokens": [3873, 2745, 586, 11, 4999, 380, 6322, 949, 13, 286, 478, 588, 24315, 13, 467, 311, 411, 1564, 321, 458], "temperature": 0.0, "avg_logprob": -0.5128262837727865, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.002116365823894739}, {"id": 198, "seek": 131800, "start": 1332.68, "end": 1341.68, "text": " it exists in Merle DB as it takes and somebody that is persistent enough should be able to", "tokens": [309, 8198, 294, 6124, 306, 26754, 382, 309, 2516, 293, 2618, 300, 307, 24315, 1547, 820, 312, 1075, 281], "temperature": 0.0, "avg_logprob": -0.5128262837727865, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.002116365823894739}, {"id": 199, "seek": 134168, "start": 1341.68, "end": 1366.64, "text": " do that. Yes. It is very bad. I mean, if you have multiple threats or processes, it's running", "tokens": [360, 300, 13, 1079, 13, 467, 307, 588, 1578, 13, 286, 914, 11, 498, 291, 362, 3866, 14909, 420, 7555, 11, 309, 311, 2614], "temperature": 0.0, "avg_logprob": -0.43846610614231657, "compression_ratio": 1.0689655172413792, "no_speech_prob": 1.3268102520669345e-05}, {"id": 200, "seek": 136664, "start": 1366.64, "end": 1372.2800000000002, "text": " them on a single CPU core at the time. So that's why we are running hundreds of servers", "tokens": [552, 322, 257, 2167, 13199, 4965, 412, 264, 565, 13, 407, 300, 311, 983, 321, 366, 2614, 6779, 295, 15909], "temperature": 0.0, "avg_logprob": -0.17271451481053088, "compression_ratio": 1.4719101123595506, "no_speech_prob": 8.244499622378498e-05}, {"id": 201, "seek": 136664, "start": 1372.2800000000002, "end": 1384.2800000000002, "text": " in parallel on a single server for several hours to get these traces. Actually, also", "tokens": [294, 8952, 322, 257, 2167, 7154, 337, 2940, 2496, 281, 483, 613, 26076, 13, 5135, 11, 611], "temperature": 0.0, "avg_logprob": -0.17271451481053088, "compression_ratio": 1.4719101123595506, "no_speech_prob": 8.244499622378498e-05}, {"id": 202, "seek": 136664, "start": 1384.2800000000002, "end": 1389.1200000000001, "text": " for normal debugging, there have been cases like if you have lots of conditional branches", "tokens": [337, 2710, 45592, 11, 456, 362, 668, 3331, 411, 498, 291, 362, 3195, 295, 27708, 14770], "temperature": 0.0, "avg_logprob": -0.17271451481053088, "compression_ratio": 1.4719101123595506, "no_speech_prob": 8.244499622378498e-05}, {"id": 203, "seek": 138912, "start": 1389.12, "end": 1398.76, "text": " in your code like this debug library or performance schema. Those branches are never taken, but", "tokens": [294, 428, 3089, 411, 341, 24083, 6405, 420, 3389, 34078, 13, 3950, 14770, 366, 1128, 2726, 11, 457], "temperature": 0.0, "avg_logprob": -0.18966610487117325, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.00011551984789548442}, {"id": 204, "seek": 138912, "start": 1398.76, "end": 1404.08, "text": " because RR is interested in conditional branches. I have seen a case where if I compile without", "tokens": [570, 497, 49, 307, 3102, 294, 27708, 14770, 13, 286, 362, 1612, 257, 1389, 689, 498, 286, 31413, 1553], "temperature": 0.0, "avg_logprob": -0.18966610487117325, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.00011551984789548442}, {"id": 205, "seek": 138912, "start": 1404.08, "end": 1412.6, "text": " these things, I get a crash or problem in let's say like three seconds. And then I was curious", "tokens": [613, 721, 11, 286, 483, 257, 8252, 420, 1154, 294, 718, 311, 584, 411, 1045, 3949, 13, 400, 550, 286, 390, 6369], "temperature": 0.0, "avg_logprob": -0.18966610487117325, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.00011551984789548442}, {"id": 206, "seek": 138912, "start": 1412.6, "end": 1418.2399999999998, "text": " how long does it take if I use these stupid compilation options with these extra conditions.", "tokens": [577, 938, 775, 309, 747, 498, 286, 764, 613, 6631, 40261, 3956, 365, 613, 2857, 4487, 13], "temperature": 0.0, "avg_logprob": -0.18966610487117325, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.00011551984789548442}, {"id": 207, "seek": 141824, "start": 1418.24, "end": 1424.04, "text": " For that particular thing, I interrupted it after two hours. So it was 7,000 seconds", "tokens": [1171, 300, 1729, 551, 11, 286, 30329, 309, 934, 732, 2496, 13, 407, 309, 390, 1614, 11, 1360, 3949], "temperature": 0.0, "avg_logprob": -0.200274658203125, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.0005385681288316846}, {"id": 208, "seek": 141824, "start": 1424.04, "end": 1432.88, "text": " versus three seconds. So don't use conditional branches or unnecessary debugging. Turn off", "tokens": [5717, 1045, 3949, 13, 407, 500, 380, 764, 27708, 14770, 420, 19350, 45592, 13, 7956, 766], "temperature": 0.0, "avg_logprob": -0.200274658203125, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.0005385681288316846}, {"id": 209, "seek": 141824, "start": 1432.88, "end": 1443.2, "text": " all the code that you don't need. Conditional branches are evil for RR. Well, maybe you", "tokens": [439, 264, 3089, 300, 291, 500, 380, 643, 13, 21793, 2628, 14770, 366, 6724, 337, 497, 49, 13, 1042, 11, 1310, 291], "temperature": 0.0, "avg_logprob": -0.200274658203125, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.0005385681288316846}, {"id": 210, "seek": 144320, "start": 1443.2, "end": 1452.0800000000002, "text": " are not using it like multi-threaded with context switches and so on. For single-threaded,", "tokens": [366, 406, 1228, 309, 411, 4825, 12, 392, 2538, 292, 365, 4319, 19458, 293, 370, 322, 13, 1171, 2167, 12, 392, 2538, 292, 11], "temperature": 0.0, "avg_logprob": -0.345543588910784, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.0010256743989884853}, {"id": 211, "seek": 145208, "start": 1452.08, "end": 1478.8, "text": " there is basically no overhead. Thank you for saving me. It was a team effort.", "tokens": [456, 307, 1936, 572, 19922, 13, 1044, 291, 337, 6816, 385, 13, 467, 390, 257, 1469, 4630, 13], "temperature": 0.0, "avg_logprob": -0.311355937610973, "compression_ratio": 1.0263157894736843, "no_speech_prob": 8.328507101396099e-05}, {"id": 212, "seek": 147880, "start": 1478.8, "end": 1483.6, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50604], "temperature": 0.0, "avg_logprob": -0.6369031270345052, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.002157706068828702}, {"id": 213, "seek": 162880, "start": 1628.8, "end": 1654.6, "text": " One, two, three. Is it working? Okay, there is no audio in the room, right? So you want", "tokens": [1485, 11, 732, 11, 1045, 13, 1119, 309, 1364, 30, 1033, 11, 456, 307, 572, 6278, 294, 264, 1808, 11, 558, 30, 407, 291, 528], "temperature": 0.0, "avg_logprob": -0.3191113307558257, "compression_ratio": 1.0357142857142858, "no_speech_prob": 0.2725537419319153}, {"id": 214, "seek": 165460, "start": 1654.6, "end": 1664.12, "text": " me to speak loud. Well, anyway, we are going to talk today about MySQL 8 and MariaDB 10.10.", "tokens": [385, 281, 1710, 6588, 13, 1042, 11, 4033, 11, 321, 366, 516, 281, 751, 965, 466, 1222, 39934, 1649, 293, 12734, 27735, 1266, 13, 3279, 13], "temperature": 0.0, "avg_logprob": -0.20622475539581686, "compression_ratio": 1.4, "no_speech_prob": 0.003933511674404144}, {"id": 215, "seek": 165460, "start": 1664.12, "end": 1669.9599999999998, "text": " Original Toxa is 10.11, but I wanted to make sure we're sticking to the latest GA or stable", "tokens": [30022, 1407, 36852, 307, 1266, 13, 5348, 11, 457, 286, 1415, 281, 652, 988, 321, 434, 13465, 281, 264, 6792, 22841, 420, 8351], "temperature": 0.0, "avg_logprob": -0.20622475539581686, "compression_ratio": 1.4, "no_speech_prob": 0.003933511674404144}, {"id": 216, "seek": 165460, "start": 1669.9599999999998, "end": 1680.6399999999999, "text": " version so it had to go down a bit. Well, and let me start by congratulating MariaDB team", "tokens": [3037, 370, 309, 632, 281, 352, 760, 257, 857, 13, 1042, 11, 293, 718, 385, 722, 538, 9774, 12162, 12734, 27735, 1469], "temperature": 0.0, "avg_logprob": -0.20622475539581686, "compression_ratio": 1.4, "no_speech_prob": 0.003933511674404144}, {"id": 217, "seek": 168064, "start": 1680.64, "end": 1689.3200000000002, "text": " with MariaDB Corporation going public. In particular, Monty, congrats for driving two", "tokens": [365, 12734, 27735, 26464, 516, 1908, 13, 682, 1729, 11, 4713, 874, 11, 8882, 1720, 337, 4840, 732], "temperature": 0.0, "avg_logprob": -0.23629530993374911, "compression_ratio": 1.365482233502538, "no_speech_prob": 0.0017094991635531187}, {"id": 218, "seek": 168064, "start": 1689.3200000000002, "end": 1696.5200000000002, "text": " very impactful open-source database companies to exit. That's quite an achievement, I think", "tokens": [588, 30842, 1269, 12, 41676, 8149, 3431, 281, 11043, 13, 663, 311, 1596, 364, 15838, 11, 286, 519], "temperature": 0.0, "avg_logprob": -0.23629530993374911, "compression_ratio": 1.365482233502538, "no_speech_prob": 0.0017094991635531187}, {"id": 219, "seek": 168064, "start": 1696.5200000000002, "end": 1709.4, "text": " you people in the universe have that. Yeah. Well, so what are we going to talk about first?", "tokens": [291, 561, 294, 264, 6445, 362, 300, 13, 865, 13, 1042, 11, 370, 437, 366, 321, 516, 281, 751, 466, 700, 30], "temperature": 0.0, "avg_logprob": -0.23629530993374911, "compression_ratio": 1.365482233502538, "no_speech_prob": 0.0017094991635531187}, {"id": 220, "seek": 170940, "start": 1709.4, "end": 1717.88, "text": " I think which we need to recognize where MariaDB and MySQL started from the same roots, right?", "tokens": [286, 519, 597, 321, 643, 281, 5521, 689, 12734, 27735, 293, 1222, 39934, 1409, 490, 264, 912, 10669, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2541051563463713, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0013554584002122283}, {"id": 221, "seek": 170940, "start": 1717.88, "end": 1724.96, "text": " We have diverged substantially, right? So I think it was interesting when on the previous", "tokens": [492, 362, 18558, 3004, 30797, 11, 558, 30, 407, 286, 519, 309, 390, 1880, 562, 322, 264, 3894], "temperature": 0.0, "avg_logprob": -0.2541051563463713, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0013554584002122283}, {"id": 222, "seek": 170940, "start": 1724.96, "end": 1729.2, "text": " talk, Jean-Fran\u00e7ois was talking about the upstream, right? I was thinking, hey, you know,", "tokens": [751, 11, 13854, 12, 37, 4257, 1138, 7376, 390, 1417, 466, 264, 33915, 11, 558, 30, 286, 390, 1953, 11, 4177, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.2541051563463713, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0013554584002122283}, {"id": 223, "seek": 170940, "start": 1729.2, "end": 1738.0, "text": " what does MariaDB really consider MySQL upstream at this point? Or not quite, right? In this", "tokens": [437, 775, 12734, 27735, 534, 1949, 1222, 39934, 33915, 412, 341, 935, 30, 1610, 406, 1596, 11, 558, 30, 682, 341], "temperature": 0.0, "avg_logprob": -0.2541051563463713, "compression_ratio": 1.5726495726495726, "no_speech_prob": 0.0013554584002122283}, {"id": 224, "seek": 173800, "start": 1738.0, "end": 1744.68, "text": " case, I think there is enough diversity right what this is our kind of, you know, ancestors,", "tokens": [1389, 11, 286, 519, 456, 307, 1547, 8811, 558, 437, 341, 307, 527, 733, 295, 11, 291, 458, 11, 18069, 11], "temperature": 0.0, "avg_logprob": -0.20300663842095268, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.0010685180313885212}, {"id": 225, "seek": 173800, "start": 1744.68, "end": 1751.76, "text": " maybe, you know, like monkeys for humans, you know, something of this regard. Now, in", "tokens": [1310, 11, 291, 458, 11, 411, 29534, 337, 6255, 11, 291, 458, 11, 746, 295, 341, 3843, 13, 823, 11, 294], "temperature": 0.0, "avg_logprob": -0.20300663842095268, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.0010685180313885212}, {"id": 226, "seek": 173800, "start": 1751.76, "end": 1761.16, "text": " this case, like I am trying to be fair the best way I can, right, which for me always", "tokens": [341, 1389, 11, 411, 286, 669, 1382, 281, 312, 3143, 264, 1151, 636, 286, 393, 11, 558, 11, 597, 337, 385, 1009], "temperature": 0.0, "avg_logprob": -0.20300663842095268, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.0010685180313885212}, {"id": 227, "seek": 176116, "start": 1761.16, "end": 1768.44, "text": " means offends everybody equally, right? So, you know, if Monty is not screaming at me", "tokens": [1355, 766, 2581, 2201, 12309, 11, 558, 30, 407, 11, 291, 458, 11, 498, 4713, 874, 307, 406, 12636, 412, 385], "temperature": 0.0, "avg_logprob": -0.23063595460192993, "compression_ratio": 1.5466666666666666, "no_speech_prob": 0.0006160437478683889}, {"id": 228, "seek": 176116, "start": 1768.44, "end": 1772.96, "text": " saying you are fucking moron, Peter, that is not how it is, then probably I am not doing", "tokens": [1566, 291, 366, 5546, 1896, 266, 11, 6508, 11, 300, 307, 406, 577, 309, 307, 11, 550, 1391, 286, 669, 406, 884], "temperature": 0.0, "avg_logprob": -0.23063595460192993, "compression_ratio": 1.5466666666666666, "no_speech_prob": 0.0006160437478683889}, {"id": 229, "seek": 176116, "start": 1772.96, "end": 1785.0, "text": " my job properly. No, no, no, but you... Oh, you see? Yes, yes, yes. Of course, of course.", "tokens": [452, 1691, 6108, 13, 883, 11, 572, 11, 572, 11, 457, 291, 485, 876, 11, 291, 536, 30, 1079, 11, 2086, 11, 2086, 13, 2720, 1164, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.23063595460192993, "compression_ratio": 1.5466666666666666, "no_speech_prob": 0.0006160437478683889}, {"id": 230, "seek": 176116, "start": 1785.0, "end": 1790.52, "text": " You always do everything with loving your heart, right? And you don't use bad words", "tokens": [509, 1009, 360, 1203, 365, 9344, 428, 1917, 11, 558, 30, 400, 291, 500, 380, 764, 1578, 2283], "temperature": 0.0, "avg_logprob": -0.23063595460192993, "compression_ratio": 1.5466666666666666, "no_speech_prob": 0.0006160437478683889}, {"id": 231, "seek": 179052, "start": 1790.52, "end": 1797.52, "text": " as I do. That is wonderful. So, let's talk about development model first. Obviously,", "tokens": [382, 286, 360, 13, 663, 307, 3715, 13, 407, 11, 718, 311, 751, 466, 3250, 2316, 700, 13, 7580, 11], "temperature": 0.0, "avg_logprob": -0.20687569890703475, "compression_ratio": 1.5907473309608542, "no_speech_prob": 0.00016172605683095753}, {"id": 232, "seek": 179052, "start": 1797.52, "end": 1803.44, "text": " MySQL is developed by the Oracle corporations. We can see what the contributions are accepted,", "tokens": [1222, 39934, 307, 4743, 538, 264, 25654, 17676, 13, 492, 393, 536, 437, 264, 15725, 366, 9035, 11], "temperature": 0.0, "avg_logprob": -0.20687569890703475, "compression_ratio": 1.5907473309608542, "no_speech_prob": 0.00016172605683095753}, {"id": 233, "seek": 179052, "start": 1803.44, "end": 1809.6399999999999, "text": " but I wouldn't say they are encouraged in the same way as MariaDB does. And we also have", "tokens": [457, 286, 2759, 380, 584, 436, 366, 14658, 294, 264, 912, 636, 382, 12734, 27735, 775, 13, 400, 321, 611, 362], "temperature": 0.0, "avg_logprob": -0.20687569890703475, "compression_ratio": 1.5907473309608542, "no_speech_prob": 0.00016172605683095753}, {"id": 234, "seek": 179052, "start": 1809.6399999999999, "end": 1813.4, "text": " open source, as I would say, like a drop ship open source, right? We have those release", "tokens": [1269, 4009, 11, 382, 286, 576, 584, 11, 411, 257, 3270, 5374, 1269, 4009, 11, 558, 30, 492, 362, 729, 4374], "temperature": 0.0, "avg_logprob": -0.20687569890703475, "compression_ratio": 1.5907473309608542, "no_speech_prob": 0.00016172605683095753}, {"id": 235, "seek": 179052, "start": 1813.4, "end": 1820.4, "text": " coming, but we do not really have a tree there over developers changes, right, happen. You", "tokens": [1348, 11, 457, 321, 360, 406, 534, 362, 257, 4230, 456, 670, 8849, 2962, 11, 558, 11, 1051, 13, 509], "temperature": 0.0, "avg_logprob": -0.20687569890703475, "compression_ratio": 1.5907473309608542, "no_speech_prob": 0.00016172605683095753}, {"id": 236, "seek": 182040, "start": 1820.4, "end": 1824.92, "text": " know, as we can see. That, I think, can be particularly problematic, for example, for", "tokens": [458, 11, 382, 321, 393, 536, 13, 663, 11, 286, 519, 11, 393, 312, 4098, 19011, 11, 337, 1365, 11, 337], "temperature": 0.0, "avg_logprob": -0.2600746154785156, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0006439436110667884}, {"id": 237, "seek": 182040, "start": 1824.92, "end": 1831.76, "text": " security bugs where it can be hard to track, like, what exactly change fixes that particular", "tokens": [3825, 15120, 689, 309, 393, 312, 1152, 281, 2837, 11, 411, 11, 437, 2293, 1319, 32539, 300, 1729], "temperature": 0.0, "avg_logprob": -0.2600746154785156, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0006439436110667884}, {"id": 238, "seek": 182040, "start": 1831.76, "end": 1840.1200000000001, "text": " issue, right, which is different from MariaDB, which is... has a server released by MariaDB", "tokens": [2734, 11, 558, 11, 597, 307, 819, 490, 12734, 27735, 11, 597, 307, 485, 575, 257, 7154, 4736, 538, 12734, 27735], "temperature": 0.0, "avg_logprob": -0.2600746154785156, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0006439436110667884}, {"id": 239, "seek": 182040, "start": 1840.1200000000001, "end": 1848.0400000000002, "text": " Foundation, though there is a lot of work, right, for actual new features done by MariaDB", "tokens": [10335, 11, 1673, 456, 307, 257, 688, 295, 589, 11, 558, 11, 337, 3539, 777, 4122, 1096, 538, 12734, 27735], "temperature": 0.0, "avg_logprob": -0.2600746154785156, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0006439436110667884}, {"id": 240, "seek": 184804, "start": 1848.04, "end": 1854.52, "text": " corporations, though foundations ensure what the contributions are encouraged and developers", "tokens": [17676, 11, 1673, 22467, 5586, 437, 264, 15725, 366, 14658, 293, 8849], "temperature": 0.0, "avg_logprob": -0.1827281770252046, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.00021676122560165823}, {"id": 241, "seek": 184804, "start": 1854.52, "end": 1862.6, "text": " really done in the public, right, as I would say, through open source project. One thing", "tokens": [534, 1096, 294, 264, 1908, 11, 558, 11, 382, 286, 576, 584, 11, 807, 1269, 4009, 1716, 13, 1485, 551], "temperature": 0.0, "avg_logprob": -0.1827281770252046, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.00021676122560165823}, {"id": 242, "seek": 184804, "start": 1862.6, "end": 1869.56, "text": " I wanted to point out, which I think is interesting, is also changes from the Oracle side, right?", "tokens": [286, 1415, 281, 935, 484, 11, 597, 286, 519, 307, 1880, 11, 307, 611, 2962, 490, 264, 25654, 1252, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1827281770252046, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.00021676122560165823}, {"id": 243, "seek": 184804, "start": 1869.56, "end": 1876.6399999999999, "text": " For years, I've been actually defender of Oracle in regards to, hey, you know, besides", "tokens": [1171, 924, 11, 286, 600, 668, 767, 26537, 295, 25654, 294, 14258, 281, 11, 4177, 11, 291, 458, 11, 11868], "temperature": 0.0, "avg_logprob": -0.1827281770252046, "compression_ratio": 1.5508474576271187, "no_speech_prob": 0.00021676122560165823}, {"id": 244, "seek": 187664, "start": 1876.64, "end": 1881.5600000000002, "text": " all this kind of stuff that Oracle is looking to kill MySQL, they have actually been doing", "tokens": [439, 341, 733, 295, 1507, 300, 25654, 307, 1237, 281, 1961, 1222, 39934, 11, 436, 362, 767, 668, 884], "temperature": 0.0, "avg_logprob": -0.24051570892333984, "compression_ratio": 1.5868055555555556, "no_speech_prob": 0.00013062274956610054}, {"id": 245, "seek": 187664, "start": 1881.5600000000002, "end": 1887.88, "text": " a pretty good job in releasing majority features of the open source and the proprietary enterprise", "tokens": [257, 1238, 665, 1691, 294, 16327, 6286, 4122, 295, 264, 1269, 4009, 293, 264, 38992, 14132], "temperature": 0.0, "avg_logprob": -0.24051570892333984, "compression_ratio": 1.5868055555555556, "no_speech_prob": 0.00013062274956610054}, {"id": 246, "seek": 187664, "start": 1887.88, "end": 1893.72, "text": " features have been kind of well-isolated, abstracted through API, and it was relatively", "tokens": [4122, 362, 668, 733, 295, 731, 12, 29273, 770, 11, 12649, 292, 807, 9362, 11, 293, 309, 390, 7226], "temperature": 0.0, "avg_logprob": -0.24051570892333984, "compression_ratio": 1.5868055555555556, "no_speech_prob": 0.00013062274956610054}, {"id": 247, "seek": 187664, "start": 1893.72, "end": 1899.48, "text": " easy for companies as well, especially, like, per corner, to implement the equivalent.", "tokens": [1858, 337, 3431, 382, 731, 11, 2318, 11, 411, 11, 680, 4538, 11, 281, 4445, 264, 10344, 13], "temperature": 0.0, "avg_logprob": -0.24051570892333984, "compression_ratio": 1.5868055555555556, "no_speech_prob": 0.00013062274956610054}, {"id": 248, "seek": 187664, "start": 1899.48, "end": 1904.0, "text": " Now things have been changing in the last couple of years, right? We can see what, everybody", "tokens": [823, 721, 362, 668, 4473, 294, 264, 1036, 1916, 295, 924, 11, 558, 30, 492, 393, 536, 437, 11, 2201], "temperature": 0.0, "avg_logprob": -0.24051570892333984, "compression_ratio": 1.5868055555555556, "no_speech_prob": 0.00013062274956610054}, {"id": 249, "seek": 190400, "start": 1904.0, "end": 1914.12, "text": " knows this guy? Yeah, yeah, yeah. Well, like, we can see what Larry actually discovered,", "tokens": [3255, 341, 2146, 30, 865, 11, 1338, 11, 1338, 13, 1042, 11, 411, 11, 321, 393, 536, 437, 18145, 767, 6941, 11], "temperature": 0.0, "avg_logprob": -0.23387017121186127, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00042432211921550333}, {"id": 250, "seek": 190400, "start": 1914.12, "end": 1921.6, "text": " what the MySQL exists in the last couple of years, right? And he only seems to care about", "tokens": [437, 264, 1222, 39934, 8198, 294, 264, 1036, 1916, 295, 924, 11, 558, 30, 400, 415, 787, 2544, 281, 1127, 466], "temperature": 0.0, "avg_logprob": -0.23387017121186127, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00042432211921550333}, {"id": 251, "seek": 190400, "start": 1921.6, "end": 1929.68, "text": " the MySQL as a heatwave, because we all know heatwave supports the melt zone of lake, right?", "tokens": [264, 1222, 39934, 382, 257, 3738, 35461, 11, 570, 321, 439, 458, 3738, 35461, 9346, 264, 10083, 6668, 295, 11001, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.23387017121186127, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00042432211921550333}, {"id": 252, "seek": 192968, "start": 1929.68, "end": 1935.52, "text": " And we can see a lot of focus getting on this snowflake development, which is sort of a", "tokens": [400, 321, 393, 536, 257, 688, 295, 1879, 1242, 322, 341, 44124, 619, 3250, 11, 597, 307, 1333, 295, 257], "temperature": 0.0, "avg_logprob": -0.14994778549462034, "compression_ratio": 1.6097560975609757, "no_speech_prob": 1.1276423720119055e-05}, {"id": 253, "seek": 192968, "start": 1935.52, "end": 1943.4, "text": " cloud-only, and of course, you know, proprietary version of MySQL. So far, it is only analytic", "tokens": [4588, 12, 25202, 11, 293, 295, 1164, 11, 291, 458, 11, 38992, 3037, 295, 1222, 39934, 13, 407, 1400, 11, 309, 307, 787, 40358], "temperature": 0.0, "avg_logprob": -0.14994778549462034, "compression_ratio": 1.6097560975609757, "no_speech_prob": 1.1276423720119055e-05}, {"id": 254, "seek": 192968, "start": 1943.4, "end": 1948.6000000000001, "text": " extension, right? But I think it's all questions to us, hey, could there be some other critical", "tokens": [10320, 11, 558, 30, 583, 286, 519, 309, 311, 439, 1651, 281, 505, 11, 4177, 11, 727, 456, 312, 512, 661, 4924], "temperature": 0.0, "avg_logprob": -0.14994778549462034, "compression_ratio": 1.6097560975609757, "no_speech_prob": 1.1276423720119055e-05}, {"id": 255, "seek": 192968, "start": 1948.6000000000001, "end": 1953.96, "text": " features which will be only property, right? Maybe Oracle somewhere in a bellies developing", "tokens": [4122, 597, 486, 312, 787, 4707, 11, 558, 30, 2704, 25654, 4079, 294, 257, 4549, 530, 6416], "temperature": 0.0, "avg_logprob": -0.14994778549462034, "compression_ratio": 1.6097560975609757, "no_speech_prob": 1.1276423720119055e-05}, {"id": 256, "seek": 192968, "start": 1953.96, "end": 1957.96, "text": " something like transparent sharding for MySQL, maybe that is going to be proprietary first,", "tokens": [746, 411, 12737, 402, 515, 278, 337, 1222, 39934, 11, 1310, 300, 307, 516, 281, 312, 38992, 700, 11], "temperature": 0.0, "avg_logprob": -0.14994778549462034, "compression_ratio": 1.6097560975609757, "no_speech_prob": 1.1276423720119055e-05}, {"id": 257, "seek": 195796, "start": 1957.96, "end": 1962.8400000000001, "text": " right? So that is, I think, the questions what a lot of people in MySQL community are", "tokens": [558, 30, 407, 300, 307, 11, 286, 519, 11, 264, 1651, 437, 257, 688, 295, 561, 294, 1222, 39934, 1768, 366], "temperature": 0.0, "avg_logprob": -0.27605875333150226, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.0002039795508608222}, {"id": 258, "seek": 195796, "start": 1962.8400000000001, "end": 1974.24, "text": " asking. Now, with MySQL, with MariaDB, I think what is interesting compared to, like, a MySQL", "tokens": [3365, 13, 823, 11, 365, 1222, 39934, 11, 365, 12734, 27735, 11, 286, 519, 437, 307, 1880, 5347, 281, 11, 411, 11, 257, 1222, 39934], "temperature": 0.0, "avg_logprob": -0.27605875333150226, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.0002039795508608222}, {"id": 259, "seek": 195796, "start": 1974.24, "end": 1980.32, "text": " is that there are actually two companies, MariaDB, well, two entities, probably better", "tokens": [307, 300, 456, 366, 767, 732, 3431, 11, 12734, 27735, 11, 731, 11, 732, 16667, 11, 1391, 1101], "temperature": 0.0, "avg_logprob": -0.27605875333150226, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.0002039795508608222}, {"id": 260, "seek": 198032, "start": 1980.32, "end": 1988.12, "text": " than MariaDB Foundation and MariaDB Corporation, right? That is the latest mission, which I", "tokens": [813, 12734, 27735, 10335, 293, 12734, 27735, 26464, 11, 558, 30, 663, 307, 264, 6792, 4447, 11, 597, 286], "temperature": 0.0, "avg_logprob": -0.2130305382513231, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.00040871763485483825}, {"id": 261, "seek": 198032, "start": 1988.12, "end": 1996.52, "text": " just grabbed a couple of days ago from MariaDB Foundation side, right? And I think that is", "tokens": [445, 18607, 257, 1916, 295, 1708, 2057, 490, 12734, 27735, 10335, 1252, 11, 558, 30, 400, 286, 519, 300, 307], "temperature": 0.0, "avg_logprob": -0.2130305382513231, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.00040871763485483825}, {"id": 262, "seek": 198032, "start": 1996.52, "end": 2005.56, "text": " a very good to understand relationship with those companies to understand this, right?", "tokens": [257, 588, 665, 281, 1223, 2480, 365, 729, 3431, 281, 1223, 341, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2130305382513231, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.00040871763485483825}, {"id": 263, "seek": 200556, "start": 2005.56, "end": 2011.6, "text": " Now, if you think in this case is what MariaDB Foundation is really at large focusing on", "tokens": [823, 11, 498, 291, 519, 294, 341, 1389, 307, 437, 12734, 27735, 10335, 307, 534, 412, 2416, 8416, 322], "temperature": 0.0, "avg_logprob": -0.26325054826407596, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.00010489105625310913}, {"id": 264, "seek": 200556, "start": 2011.6, "end": 2018.76, "text": " serving MariaDB community, MariaDB ecosystem, right? It develops open-source software around", "tokens": [8148, 12734, 27735, 1768, 11, 12734, 27735, 11311, 11, 558, 30, 467, 25453, 1269, 12, 41676, 4722, 926], "temperature": 0.0, "avg_logprob": -0.26325054826407596, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.00010489105625310913}, {"id": 265, "seek": 200556, "start": 2018.76, "end": 2024.48, "text": " MySQL. They are MariaDB Corporation. That is now public company, right? Which is providing", "tokens": [1222, 39934, 13, 814, 366, 12734, 27735, 26464, 13, 663, 307, 586, 1908, 2237, 11, 558, 30, 3013, 307, 6530], "temperature": 0.0, "avg_logprob": -0.26325054826407596, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.00010489105625310913}, {"id": 266, "seek": 200556, "start": 2024.48, "end": 2031.9199999999998, "text": " a property solutions and commercializing MariaDB software, right? That is, I think, the interest", "tokens": [257, 4707, 6547, 293, 6841, 3319, 12734, 27735, 4722, 11, 558, 30, 663, 307, 11, 286, 519, 11, 264, 1179], "temperature": 0.0, "avg_logprob": -0.26325054826407596, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.00010489105625310913}, {"id": 267, "seek": 203192, "start": 2031.92, "end": 2038.3200000000002, "text": " way, right? Now, relationship sometimes can be a little bit complicated, though I would", "tokens": [636, 11, 558, 30, 823, 11, 2480, 2171, 393, 312, 257, 707, 857, 6179, 11, 1673, 286, 576], "temperature": 0.0, "avg_logprob": -0.16361245764307228, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0002916055382229388}, {"id": 268, "seek": 203192, "start": 2038.3200000000002, "end": 2043.92, "text": " say there have been some more complicated entitlements in which I mentioned in my previous", "tokens": [584, 456, 362, 668, 512, 544, 6179, 14789, 17988, 294, 597, 286, 2835, 294, 452, 3894], "temperature": 0.0, "avg_logprob": -0.16361245764307228, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0002916055382229388}, {"id": 269, "seek": 203192, "start": 2043.92, "end": 2051.76, "text": " talks, right? And some of them have been made more clear, which I think is a great progress.", "tokens": [6686, 11, 558, 30, 400, 512, 295, 552, 362, 668, 1027, 544, 1850, 11, 597, 286, 519, 307, 257, 869, 4205, 13], "temperature": 0.0, "avg_logprob": -0.16361245764307228, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0002916055382229388}, {"id": 270, "seek": 203192, "start": 2051.76, "end": 2057.2000000000003, "text": " So if you think about this, what is interesting is MariaDB Foundation has responsibility kind", "tokens": [407, 498, 291, 519, 466, 341, 11, 437, 307, 1880, 307, 12734, 27735, 10335, 575, 6357, 733], "temperature": 0.0, "avg_logprob": -0.16361245764307228, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0002916055382229388}, {"id": 271, "seek": 205720, "start": 2057.2, "end": 2062.04, "text": " of relatively narrow to the MariaDB server, right? And we can see what number of other", "tokens": [295, 7226, 9432, 281, 264, 12734, 27735, 7154, 11, 558, 30, 400, 321, 393, 536, 437, 1230, 295, 661], "temperature": 0.0, "avg_logprob": -0.17896663441377528, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0003856513067148626}, {"id": 272, "seek": 205720, "start": 2062.04, "end": 2070.12, "text": " components which are very valuable in MySQL ecosystem are owned by MariaDB Corporation,", "tokens": [6677, 597, 366, 588, 8263, 294, 1222, 39934, 11311, 366, 11684, 538, 12734, 27735, 26464, 11], "temperature": 0.0, "avg_logprob": -0.17896663441377528, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0003856513067148626}, {"id": 273, "seek": 205720, "start": 2070.12, "end": 2080.6, "text": " right? Not by the Foundation and also a lot of development. Roadmap is driven by the Corporation.", "tokens": [558, 30, 1726, 538, 264, 10335, 293, 611, 257, 688, 295, 3250, 13, 11507, 24223, 307, 9555, 538, 264, 26464, 13], "temperature": 0.0, "avg_logprob": -0.17896663441377528, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0003856513067148626}, {"id": 274, "seek": 205720, "start": 2080.6, "end": 2085.6, "text": " I also find it interesting what we see MySQL knowledge base, which is kind of built by", "tokens": [286, 611, 915, 309, 1880, 437, 321, 536, 1222, 39934, 3601, 3096, 11, 597, 307, 733, 295, 3094, 538], "temperature": 0.0, "avg_logprob": -0.17896663441377528, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0003856513067148626}, {"id": 275, "seek": 208560, "start": 2085.6, "end": 2092.7999999999997, "text": " a community but is hosted by MariaDB Corporation. I find that not in a very good sense for like", "tokens": [257, 1768, 457, 307, 19204, 538, 12734, 27735, 26464, 13, 286, 915, 300, 406, 294, 257, 588, 665, 2020, 337, 411], "temperature": 0.0, "avg_logprob": -0.20698235486004804, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.00043061785981990397}, {"id": 276, "seek": 208560, "start": 2092.7999999999997, "end": 2100.12, "text": " an open-source software, there is also entanglement on the website level, right? So if I am downloading", "tokens": [364, 1269, 12, 41676, 4722, 11, 456, 307, 611, 948, 656, 3054, 322, 264, 3144, 1496, 11, 558, 30, 407, 498, 286, 669, 32529], "temperature": 0.0, "avg_logprob": -0.20698235486004804, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.00043061785981990397}, {"id": 277, "seek": 208560, "start": 2100.12, "end": 2111.12, "text": " MariaDB software from.org, right, then I am kind of redirected next to the MariaDB", "tokens": [12734, 27735, 4722, 490, 2411, 4646, 11, 558, 11, 550, 286, 669, 733, 295, 29066, 292, 958, 281, 264, 12734, 27735], "temperature": 0.0, "avg_logprob": -0.20698235486004804, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.00043061785981990397}, {"id": 278, "seek": 211112, "start": 2111.12, "end": 2117.7999999999997, "text": " Corporation knowledge base, right? And encouraged to fill out the lead which will go to their", "tokens": [26464, 3601, 3096, 11, 558, 30, 400, 14658, 281, 2836, 484, 264, 1477, 597, 486, 352, 281, 641], "temperature": 0.0, "avg_logprob": -0.15827192730373807, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.00016642284754198045}, {"id": 279, "seek": 211112, "start": 2117.7999999999997, "end": 2122.64, "text": " MariaDB Corporation, which is not totally transparent, right? I think that's kind of, I may be still", "tokens": [12734, 27735, 26464, 11, 597, 307, 406, 3879, 12737, 11, 558, 30, 286, 519, 300, 311, 733, 295, 11, 286, 815, 312, 920], "temperature": 0.0, "avg_logprob": -0.15827192730373807, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.00016642284754198045}, {"id": 280, "seek": 211112, "start": 2122.64, "end": 2131.2, "text": " looking like, oh, I am engaging with a non-profit while actually I am giving my connections", "tokens": [1237, 411, 11, 1954, 11, 286, 669, 11268, 365, 257, 2107, 12, 14583, 1339, 767, 286, 669, 2902, 452, 9271], "temperature": 0.0, "avg_logprob": -0.15827192730373807, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.00016642284754198045}, {"id": 281, "seek": 211112, "start": 2131.2, "end": 2136.92, "text": " to somewhere else. Now, I wouldn't say though that that is completely unfair in this case", "tokens": [281, 4079, 1646, 13, 823, 11, 286, 2759, 380, 584, 1673, 300, 300, 307, 2584, 17019, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.15827192730373807, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.00016642284754198045}, {"id": 282, "seek": 213692, "start": 2136.92, "end": 2144.04, "text": " because MariaDB does carry the largest way to development and promote in MariaDB, right?", "tokens": [570, 12734, 27735, 775, 3985, 264, 6443, 636, 281, 3250, 293, 9773, 294, 12734, 27735, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1913013458251953, "compression_ratio": 1.461139896373057, "no_speech_prob": 0.000214610859984532}, {"id": 283, "seek": 213692, "start": 2144.04, "end": 2155.2000000000003, "text": " And they do also get the largest rewards compared to the other sponsors of MariaDB Foundation.", "tokens": [400, 436, 360, 611, 483, 264, 6443, 17203, 5347, 281, 264, 661, 22593, 295, 12734, 27735, 10335, 13], "temperature": 0.0, "avg_logprob": -0.1913013458251953, "compression_ratio": 1.461139896373057, "no_speech_prob": 0.000214610859984532}, {"id": 284, "seek": 213692, "start": 2155.2000000000003, "end": 2162.92, "text": " Now let's look quickly at what is really open-source between those versions, right? Now, in MySQL,", "tokens": [823, 718, 311, 574, 2661, 412, 437, 307, 534, 1269, 12, 41676, 1296, 729, 9606, 11, 558, 30, 823, 11, 294, 1222, 39934, 11], "temperature": 0.0, "avg_logprob": -0.1913013458251953, "compression_ratio": 1.461139896373057, "no_speech_prob": 0.000214610859984532}, {"id": 285, "seek": 216292, "start": 2162.92, "end": 2173.76, "text": " what we can see is a very clear open-core platform and we have Maria, MySQL community, right?", "tokens": [437, 321, 393, 536, 307, 257, 588, 1850, 1269, 12, 12352, 3663, 293, 321, 362, 12734, 11, 1222, 39934, 1768, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.252278436933245, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.00011356075992807746}, {"id": 286, "seek": 216292, "start": 2173.76, "end": 2180.6, "text": " And, you know, router, cluster, whatever, all that comes which comes in open-source edition", "tokens": [400, 11, 291, 458, 11, 22492, 11, 13630, 11, 2035, 11, 439, 300, 1487, 597, 1487, 294, 1269, 12, 41676, 11377], "temperature": 0.0, "avg_logprob": -0.252278436933245, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.00011356075992807746}, {"id": 287, "seek": 216292, "start": 2180.6, "end": 2186.36, "text": " and there is also enterprise version. Plus, as I mentioned, additionally, we have increasing", "tokens": [293, 456, 307, 611, 14132, 3037, 13, 7721, 11, 382, 286, 2835, 11, 43181, 11, 321, 362, 5662], "temperature": 0.0, "avg_logprob": -0.252278436933245, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.00011356075992807746}, {"id": 288, "seek": 218636, "start": 2186.36, "end": 2197.92, "text": " focus on the cloud-only solution as a heat wave. In terms of MariaDB, there are, you", "tokens": [1879, 322, 264, 4588, 12, 25202, 3827, 382, 257, 3738, 5772, 13, 682, 2115, 295, 12734, 27735, 11, 456, 366, 11, 291], "temperature": 0.0, "avg_logprob": -0.13515533618072964, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.00036504591116681695}, {"id": 289, "seek": 218636, "start": 2197.92, "end": 2204.2000000000003, "text": " know, a lot more nuance in this case, right? Because there are certain things coming from", "tokens": [458, 11, 257, 688, 544, 42625, 294, 341, 1389, 11, 558, 30, 1436, 456, 366, 1629, 721, 1348, 490], "temperature": 0.0, "avg_logprob": -0.13515533618072964, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.00036504591116681695}, {"id": 290, "seek": 218636, "start": 2204.2000000000003, "end": 2211.88, "text": " MariaDB Foundation which are completely open-source right now. The things in MariaDB Corporation", "tokens": [12734, 27735, 10335, 597, 366, 2584, 1269, 12, 41676, 558, 586, 13, 440, 721, 294, 12734, 27735, 26464], "temperature": 0.0, "avg_logprob": -0.13515533618072964, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.00036504591116681695}, {"id": 291, "seek": 221188, "start": 2211.88, "end": 2218.2000000000003, "text": " Spaceway can be with a variety of licenses.", "tokens": [50364, 8705, 676, 393, 312, 365, 257, 5673, 295, 32821, 13, 50680], "temperature": 0.0, "avg_logprob": -0.21880149841308594, "compression_ratio": 0.8431372549019608, "no_speech_prob": 0.00017202476738020778}], "language": "en"}