The talk was about a project called XRFoam, which aims to improve the performance of OpenFoam for HPC systems. The project uses code instrumentation to collect accurate and reliable performance data. The talk discussed the limitations of current instrumentation approaches, such as increasing run times by orders of magnitude, and presented a user-guided program instrumentation approach called Karpi, which uses link-time call graph analysis. The Karpi tool allows users to specify what they want to measure and generates low-overhead instrumentation configuration based on the call graph analysis. The talk also introduced the CAGE plugin, which generates the call graph at link time using LLVM intermediate representation, and enables dynamic augmentation of the call graph at runtime as shared libraries are loaded. The presenter acknowledged that more work needs to be done to evaluate the performance of the approach, especially for large programs with link-time optimization. The talk concluded by mentioning that there is a fork of LLD with the CAGE plugin and the goal is to upstream it to the LLVM project.