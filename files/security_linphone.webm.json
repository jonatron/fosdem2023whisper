{"text": " My name is Johan Pascal, I've been contributing on the LinFON project for the past 10 years, more or less, and going to talk about the introduction of post-contempt cryptography in the voice of our IP soft phone. So quickly the agenda for some context, then we'll dive into the RTP protocol, and then how we had to modify it to use post-contempt cryptography, and then a few words about hybrid post-quantum and classic key exchange, and some conclusions. So first some context for advertising for LinFON first, it's a project which is around for now more than 20 years, it's available on lots of platforms, the idea that we have like a common library, and then on top of that different application for different platforms. It's tried to use at most SIP standards and everything standardized, IFC and so on, for audio, video, instant messaging, we also provide secure group messaging, it's based on a derivative of Signal Protocols that we presented years ago. We also provide a SIP proxy, which is called Flexi SIP, also open source, everything is open source, and encourage you to use our free service on SIP, which is SIP.linfon.org. So basically I don't know if you are familiar with voice, but basically you have two streams of data, first stream is a signaling path, which connects the endpoints together, and then you have the media stream, which actually send data, video, audio encrypted, and this one we enter into it. So how it works, there is an IFC for that, and a protocol which is called SRTP, and SRTP is Symmetric Encryption, so far we are not very concerned by quantum computers. Main problem with that is that it requires an external command engine, so we have to exchange our symmetric keys. So for that we have three choices, the historical one is called SDS, so on this one the keys are transmitted in the signaling path, which if the signaling path is protected, which is normally the case by TLS, is okay, the only weakness is that the SIP proxy gets access to the symmetric keys, so we are not actually end to end encrypted. So basically the people running the service would decrypt your media stream. So there is another one, which also gets an RFC, which is called DTLS SRTP, basically on this one, on the media stream you perform a TLSN check, actually a DTLSN check because it's over UDP, and this one works well, but you have to deploy a PKI and you have to manage certificates for all of your clients and everything, so it's a bit heavy, and also you still have to trust someone, you trust certificates, sure, but still. And then there is another one that we favor, well all of three are available in the info, but the last one is called the RTP, which is one we'll focus on this one today. And this one on the media pass, you perform the RTP protocol, which is based on Diffie Elman, which using electric curve or a simple Diffie Elman. This one has no third party required, so which is good, the only small thing is that you have to confirm, make some kind of spy thing that you have, tell secrets on the phone, but as you are talking one with each other, it for the user and user is a bit an annoyance, but you have to do it once in the call list, the world call history with your other endpoint. So we think it's acceptable for users, obviously one has to get involved in security, but normally it works, and the experience tells that people focus on security tends to not be driven away by this small drawback on the protocol. So it's an RTP which is now more than 10 years old, it has been mainly written by Filsie Elman, the guy behind PGP, which are always focused on avoiding third parties. And it's probably different properties, I won't explain the key continuity and stuff because this one is unchanged, and I will focus on managing the middle attack detection. So first a small reminder of what is Diffie Elman, so basically it's a protocol where it's completely symmetric, one part, both parts will generate key pair, and then they exchange public keys, and with this secret key and other side public keys will get to share secret. So far so good, it's kind of easy, on a drawback it's obviously vulnerable as many key exchange protocol to manage middle attack. So managing middle attack, what it is, it's basically someone putting ourself in the middle and exchanging keys with both sides, so the side cannot know, basically Alice cannot know that Eve is sending her key, she thinks that Bob is sending the key, and she performs the exchange, and at the end what you get is that Alice gets a shared secret with Eve, and Eve gets another shared secret with Bob, but Alice is convinced that she exchanged keys with Bob, and she has no ways to actually detect this, well she has actually some ways, no? Yeah? Okay. No? Yeah? Sorry. So the DRTPN check is, there is first phase of discovery, so what is happening is both endpoints will exchange their capabilities, their choice of preferred algorithms, stuff like this, and then start the actual DRTPN check. So first you have one packet of commits, I will go into detail now, and then you actually perform the DH, Diffie-Ellman exchange, so Alice is sending a public key, Bob is sending his, and they both compute from this, they will compute the shared secret, and adding all the transcripts of the communication, they will generate S0, which is the base secret, the output of the DRTPN check. From the S0, they will derive the SRTP keys, which is what we are trying to do now here, and they also derive something called SAS, short authentication string, that will be vocally compared over the phone, because we are, Alice and Bob are talking, actually talking to each other. So the end of the protocol is just some updates and writing in cash for key continuities mechanisms and stuff, so it's not really interesting now, and then after that, the SRTP strings start, actually, and they can talk, and once they start to talk, once in the call history, they will do this vocally sus comparison, what it's for, this sus comparison is basically if they want to detect a man in the middle attacks, they have to ensure that Alice is using the keys that Bob has sent, and also Bob wants to know that the key that was sent by Alice is the one he actually got. So what they could do, as they are talking, is they could basically read their own keys to the other, but the key is something which is a few hundred bytes, so it's a bit long to read a few hundred bytes of the decimal chain over the phone, no one would do that. So what they do instead, we derive this short authentication string which is only four digits and has 20 bits, actually derived from 20 bits, and this sus is also derived from the secret zero, which is the output of the protocol. The only problem with that is that you can actually perform a sus collision with that because the sus is very short, how it will work, so actually the beginning of the protocol, as soon as Alice sent a public key to Bob, Bob is able to compute s zero because he has his own secret key, and he is able to compute the sus then. So what one could do is that if you perform first the RTP exchange with Alice, she got the sus one, and then she received Bob's public key. When she got Bob's public key, she can generate a huge set of key pairs until she finds a sus that collides. Basically she will try to generate a lot of pairs, sus is only 20 bits, so if you generate one million keys and try to hold them, you will for sure find a collision on the sus. So to prevent this, Eve is forced to send a commit packet. In the commit packet what we have, we do not have our public key, but we have hash of the public key, and so when you receive the hash of the public key, Alice will say for example Bob's hash public key, she will store it, and then when Bob sends the public key, she will compare, she will just hash Bob's public key, and she will compare, so that way she is sure that Bob did not wait for receiving a public key and cannot generate millions of key pairs to find a collision on the sus. So this is quite effective, and so far so good. Now we want to switch to using, to use post quantum cryptography. The problem with post quantum is that on the next call for standardization, they required all the algorithm to use key encapsulation mechanism, and not deferment. So key encapsulation mechanism is a bit different, because the two sides are not the same. In deferment, the two sides were exactly doing the same thing. They are both generating keys, exchanging public keys, and then computing secrets. There we have one side generating keys, one side encapsulating a key, a secret, and the other side will be able to decapsulate the secrets that was encapsulated by the first one. So it's not symmetric, so we cannot switch directly from deferment to KM form of key exchange. Obviously, KM is still vulnerable to man's middle attack, because nothing is changed. You can still put someone in the middle and perform the exchange with the other side without them knowing. So what we have to do is adapt the RTP and change a little bit the actual handshake, the central part of the protocol. So S0 is still derived from the exchange secret and transcript of all the conversations. I've got only commits and two packets, but you have also yellow packets and stuff. So in the commit packet, the one which used to hold only the hash of the second packet from Bob, Bob will now insert his public key. Why would he do that? So Alice can encapsulate the secret. So at this point Alice receives the public key from Bob, she encapsulates the secret, but at this point she's not able to compute S0 because she's missing the second packet from Bob. So she'll send back the ciphertext, so the output of the encapsulation, and at this point she has the share secret from the key encapsulation, but she cannot compute S0. Bob now retrieves the share secret, and he can compute S0, but he already committed on DH part 2 that he has to send to Alice, so still he cannot manipulate the secret, the final secret in S0. And what's in this packet? It's just a random number that is used once. So now another problem is that we don't want to use, to focus only, of using only post quantum algorithm, because we know that sometimes they got broken, like for example Psyche, which was broken a bit late in the standardization process. So it might happen or not in the future, so to protect against this weakness, its possible weakness, we still want to use a mix of post quantum and a classic algorithm. So we use both at the same time, and in order to not complexify the protocol too much, the idea is to have one version of the protocol which is doing DFIRMAN, and the other one key encapsulation mechanism. And the protocol won't know exactly if it's using a mix or not, because probably in the future, at some point we'll be confident in us with some post quantum algorithm, and then we'll stop using the classical one, maybe or not. But still the protocol should not be modified at this point. So the protocol is done to use a carry a mental fast without even knowing if it is a mix of classical and post quantum or just post quantum or several post quantum. So we made, first we have to make a carry interface from DFIRMAN, this is quite a standard construction, you generate, instead of, you can directly use the DFIRMAN construction to generate a keeper, then you can send your public key to the other side, the other side will encapsulate, how would the other side do that? It would just generate a keeper for DFIRMAN, compute the DFIRMAN, and then hash it with the transcript of the exchange, and send back its public key to the other side. So the encapsulation is quite obvious, same thing on the other side. And then we combine two or more occurrences together, so one we just built from a classical DFIRMAN or electrical DFIRMAN, with a post quantum one. So this way of doing it has been published by Nina Binder, a few years ago, so it's a bit convoluted, but if you want more details on why we are doing this, I encourage you to read the paper, it's quite interesting. So basically what you do, you generate the keeper, you generate keeper for sets of algorithm, in my example there, it's only two, but you can do more of that, and send concatenated both public keys or all the public keys to the other side. The encapsulation would just split your public keys to retrieve the individual ones, and perform the encapsulations on all the components. Then you use HMAC to combine your results, chaining it, so first you combine key one and then key two, and you can add several layers there, and the final step is to use the transcript of all the public keys you received, and the encapsulation is obviously completely symmetric. The paper from Nina Binder is quite clear on why these steps are needed, I have no time to explain it here. Two more words, we also tweak the protocol packets, because in the D-Filman form, the maximum size you can get is around a few hundred bytes, but if you start using Kyber, for example, or HQC, the one you will use, you'll reach several kilobytes, and several kilobytes you cannot send in one datagram over UDP, it's not possible, you probably won't arrive. So what we have to add is a way of fragment the RTP packet, so it's kind of classical way, just as DTLS is doing it, or other protocols using UDP, the only thing is that we made it in a way that packets are not fragmented, and the header is modified, but if it's not needed, the packet remains exactly the same as the old packet. The objective in this was to be able to start deploying the new ration of the RTP, but still keep compatibility with the old one, old deployment. So how it's done, in the end, we use crypto libraries LibOQS, which is from the open quantum safe project, which basically collects all the NIST candidates, and Kyber also, which is a normal candidate, in a convenient way, and we use LibDecaf and embed TLS for the ECDH and HASHMAC functions that we need. So we packed it all in an independent module, so our RTP library will use this module, but it's completely independent actually from it, so if anyone wants to directly use this hybrid KM, mixing varieties of fast quantum and classic exchange, it's fully available. You can combine it with more than two KMs, as it was printed, it's written in C++. And in our RTP implementation, we deployed it with some already preset combination, so we have X, well, we can see them, and we try to mix algorithms with more or less the same level of security, so mixing the Kyber 5012 with X250, this one. And it is, as I said before, fully compatible with the order version, so the deployment is progressive. It's basically in the agreement phase at the beginning, if most parties support this version of the RTP with this algorithm, they will use it, if one is old and don't support it, they will just fall back on classical Diffilman or electrical Diffilman. So just how it looks like. So first, you have the RTP and shake going, and the call is starting. And once the call is started, if it's the first one, the two endpoints are calling each other, you will get a pop-up that asks you to confirm the security string, so most parties will just confirm it, if, well, they just say it on the phone, it's written like you have to say this, the other one confirms, you said what it's expecting to say, and you confirm it, then this will be saved in the RTP cage, and you will never be asked again to do that. During, at any time during the call, you can check on the call start and see what kind of algorithm you use to perform the exchange. So on this screenshot, you see that it was using Kiber 512 and X225519. Here are some links, just if some of you download the presentation, so once a live in-phone website, directly pointing to the GitLab where you can find the source code of both the RTP and our post-quantum crypto module, and to the publication from Niana Bindel explaining how to hybrid server curves. Here we are, thank you for your attention. So we've got time for questions, and I've got one question on metrics, and there is a question, why post-quantum encryption is not enabled in the pre-compiled LinFone SDK? Sorry, I didn't. If, why the post-quantum encryption is not enabled in the pre-compiled LinFone SDK? It is now. It is now? It is now. Okay. It is now. Yeah. Yes, sorry. Hi, given that we're dealing with threat actors that might be capable of, you know, cracking quantum cryptography, okay, given that we're dealing with threat actors that might have a lot of resources, it seems like one particular attack vector might be to essentially use real-time deep-pick technology to intercept the vocal assay-ass comparison. Do you see any particular mitigation for an attack like that? Well, some kind of attack like this has been already studied and published, so basically what came out of what I found is that it's kind of easy to synthesize, to use speech synthesizer to synthesize the voice of someone else. The main problem there would be to insert the ass at the right moment in conversation without adding a huge daily in the conversation so that people won't be able to talk, basically, if you had like two to three second delays because you have to analyze the signal and like buffer it to be able to insert back your ass. People won't talk with three seconds, three to four second delays, there is no way people will be able to keep talking. I agree. I think it's going to be very difficult to do something like that in real-time, but I think that's probably, you know, because your solution looks really, really solid in terms of being able to fix it like that, so it looks like that might be one of the weaker aspects of it. Yeah. But since now I've been trying to monitor the publication on the subject and I never found someone able to publish an actual attack on the RTP working really, so it might depend on some point. That's great. Thank you. Can we be quiet to a question, please? Thank you. I think I missed it, but then in this particular method that you are doing, is it actually trusting the middle server that you're using, or is it using keys from another like a phone or something, SIP, assuming, is this running with the SIP protocol you said? I'm sorry. I cannot. Hello. The sound is very low. Hello. Better has. Yeah. So I wanted to ask if this was being used with a mobile phone to connect to the SIP server and then use post-quantum cryptography as you demonstrate. Can you go back to the two slides before, please? Yeah. Yeah. So the phone, is it actually trusting the server, which is running, or is it like the end-to-end, the actual key is being checked with the other host? Yeah. This is the main point of the RTP, that basically the idea is to not trust anyone, not your server. The server will be in charge just of connecting the two phones, and then the media will go directly from one to the other one. The media pass will go straight from one phone to another one, and it won't go through the server. And that's why the RTP exchange is performed on the media pass and not on the SIP signaling pass. When you establish your connection, actually, you'll go through ICE protocol, I don't know if you're familiar with that, which basically find a way to connect directly, because at the end, you don't want the media to be relayed, because you lose too much time, you have to send media packets directly from one endpoint to the other endpoint. Hi. You said that you have to compare the SAS only once. Yeah. Is it once per phone or once per user? It's one endpoint, basically, in each endpoint, you have a cache of previous, each time you end the RTP exchange, you'll keep some shared secret that you'll use the next time. And so during the exchange, at some point, you will compare these shared secrets, and if they're the same, you'll use them to compute a SAS, which is always a verb, and you can always ask to compare the SAS, but it won't pop, because the protocol will know that you performed the exchange before, but it's just one phone to another phone, this cache is not shared. Okay. So in practical terms, if I buy a new phone and then install the same app with the same account, I have to do it. You have to do it again. You have to do it again with all your correspondence. Okay. Thanks. We've got time for our last question. Is there any other last question? If not, thank you for your call. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.28, "text": " My name is Johan Pascal, I've been contributing on the LinFON project for the past 10 years,", "tokens": [1222, 1315, 307, 19180, 282, 41723, 11, 286, 600, 668, 19270, 322, 264, 9355, 37, 1928, 1716, 337, 264, 1791, 1266, 924, 11], "temperature": 0.0, "avg_logprob": -0.4582374095916748, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.32836613059043884}, {"id": 1, "seek": 0, "start": 11.28, "end": 14.96, "text": " more or less, and going to talk about the introduction of post-contempt cryptography", "tokens": [544, 420, 1570, 11, 293, 516, 281, 751, 466, 264, 9339, 295, 2183, 12, 9000, 4543, 9844, 5820], "temperature": 0.0, "avg_logprob": -0.4582374095916748, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.32836613059043884}, {"id": 2, "seek": 0, "start": 14.96, "end": 18.68, "text": " in the voice of our IP soft phone.", "tokens": [294, 264, 3177, 295, 527, 8671, 2787, 2593, 13], "temperature": 0.0, "avg_logprob": -0.4582374095916748, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.32836613059043884}, {"id": 3, "seek": 0, "start": 18.68, "end": 25.12, "text": " So quickly the agenda for some context, then we'll dive into the RTP protocol, and then", "tokens": [407, 2661, 264, 9829, 337, 512, 4319, 11, 550, 321, 603, 9192, 666, 264, 497, 16804, 10336, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.4582374095916748, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.32836613059043884}, {"id": 4, "seek": 2512, "start": 25.12, "end": 31.560000000000002, "text": " how we had to modify it to use post-contempt cryptography, and then a few words about", "tokens": [577, 321, 632, 281, 16927, 309, 281, 764, 2183, 12, 9000, 4543, 9844, 5820, 11, 293, 550, 257, 1326, 2283, 466], "temperature": 0.0, "avg_logprob": -0.24576559627757352, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0005416640779003501}, {"id": 5, "seek": 2512, "start": 31.560000000000002, "end": 38.52, "text": " hybrid post-quantum and classic key exchange, and some conclusions.", "tokens": [13051, 2183, 12, 358, 394, 449, 293, 7230, 2141, 7742, 11, 293, 512, 22865, 13], "temperature": 0.0, "avg_logprob": -0.24576559627757352, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0005416640779003501}, {"id": 6, "seek": 2512, "start": 38.52, "end": 44.6, "text": " So first some context for advertising for LinFON first, it's a project which is around", "tokens": [407, 700, 512, 4319, 337, 13097, 337, 9355, 37, 1928, 700, 11, 309, 311, 257, 1716, 597, 307, 926], "temperature": 0.0, "avg_logprob": -0.24576559627757352, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0005416640779003501}, {"id": 7, "seek": 2512, "start": 44.6, "end": 51.0, "text": " for now more than 20 years, it's available on lots of platforms, the idea that we have", "tokens": [337, 586, 544, 813, 945, 924, 11, 309, 311, 2435, 322, 3195, 295, 9473, 11, 264, 1558, 300, 321, 362], "temperature": 0.0, "avg_logprob": -0.24576559627757352, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0005416640779003501}, {"id": 8, "seek": 5100, "start": 51.0, "end": 58.12, "text": " like a common library, and then on top of that different application for different platforms.", "tokens": [411, 257, 2689, 6405, 11, 293, 550, 322, 1192, 295, 300, 819, 3861, 337, 819, 9473, 13], "temperature": 0.0, "avg_logprob": -0.3151965047798905, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00045980094000697136}, {"id": 9, "seek": 5100, "start": 58.12, "end": 63.2, "text": " It's tried to use at most SIP standards and everything standardized, IFC and so on, for", "tokens": [467, 311, 3031, 281, 764, 412, 881, 318, 9139, 7787, 293, 1203, 31677, 11, 286, 18671, 293, 370, 322, 11, 337], "temperature": 0.0, "avg_logprob": -0.3151965047798905, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00045980094000697136}, {"id": 10, "seek": 5100, "start": 63.2, "end": 68.44, "text": " audio, video, instant messaging, we also provide secure group messaging, it's based on a derivative", "tokens": [6278, 11, 960, 11, 9836, 21812, 11, 321, 611, 2893, 7144, 1594, 21812, 11, 309, 311, 2361, 322, 257, 13760], "temperature": 0.0, "avg_logprob": -0.3151965047798905, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00045980094000697136}, {"id": 11, "seek": 5100, "start": 68.44, "end": 73.6, "text": " of Signal Protocols that we presented years ago.", "tokens": [295, 43414, 48753, 82, 300, 321, 8212, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.3151965047798905, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00045980094000697136}, {"id": 12, "seek": 5100, "start": 73.6, "end": 79.44, "text": " We also provide a SIP proxy, which is called Flexi SIP, also open source, everything is", "tokens": [492, 611, 2893, 257, 318, 9139, 29690, 11, 597, 307, 1219, 29208, 72, 318, 9139, 11, 611, 1269, 4009, 11, 1203, 307], "temperature": 0.0, "avg_logprob": -0.3151965047798905, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00045980094000697136}, {"id": 13, "seek": 7944, "start": 79.44, "end": 90.2, "text": " open source, and encourage you to use our free service on SIP, which is SIP.linfon.org.", "tokens": [1269, 4009, 11, 293, 5373, 291, 281, 764, 527, 1737, 2643, 322, 318, 9139, 11, 597, 307, 318, 9139, 13, 5045, 69, 266, 13, 4646, 13], "temperature": 0.0, "avg_logprob": -0.2529259557309358, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.0002731403219513595}, {"id": 14, "seek": 7944, "start": 90.2, "end": 97.0, "text": " So basically I don't know if you are familiar with voice, but basically you have two streams", "tokens": [407, 1936, 286, 500, 380, 458, 498, 291, 366, 4963, 365, 3177, 11, 457, 1936, 291, 362, 732, 15842], "temperature": 0.0, "avg_logprob": -0.2529259557309358, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.0002731403219513595}, {"id": 15, "seek": 7944, "start": 97.0, "end": 102.44, "text": " of data, first stream is a signaling path, which connects the endpoints together, and", "tokens": [295, 1412, 11, 700, 4309, 307, 257, 38639, 3100, 11, 597, 16967, 264, 917, 20552, 1214, 11, 293], "temperature": 0.0, "avg_logprob": -0.2529259557309358, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.0002731403219513595}, {"id": 16, "seek": 7944, "start": 102.44, "end": 107.84, "text": " then you have the media stream, which actually send data, video, audio encrypted, and this", "tokens": [550, 291, 362, 264, 3021, 4309, 11, 597, 767, 2845, 1412, 11, 960, 11, 6278, 36663, 11, 293, 341], "temperature": 0.0, "avg_logprob": -0.2529259557309358, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.0002731403219513595}, {"id": 17, "seek": 10784, "start": 107.84, "end": 109.68, "text": " one we enter into it.", "tokens": [472, 321, 3242, 666, 309, 13], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 18, "seek": 10784, "start": 109.68, "end": 116.0, "text": " So how it works, there is an IFC for that, and a protocol which is called SRTP, and SRTP", "tokens": [407, 577, 309, 1985, 11, 456, 307, 364, 286, 18671, 337, 300, 11, 293, 257, 10336, 597, 307, 1219, 20840, 16804, 11, 293, 20840, 16804], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 19, "seek": 10784, "start": 116.0, "end": 122.88000000000001, "text": " is Symmetric Encryption, so far we are not very concerned by quantum computers.", "tokens": [307, 3902, 2174, 17475, 29584, 627, 1695, 11, 370, 1400, 321, 366, 406, 588, 5922, 538, 13018, 10807, 13], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 20, "seek": 10784, "start": 122.88000000000001, "end": 127.12, "text": " Main problem with that is that it requires an external command engine, so we have to", "tokens": [12383, 1154, 365, 300, 307, 300, 309, 7029, 364, 8320, 5622, 2848, 11, 370, 321, 362, 281], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 21, "seek": 10784, "start": 127.12, "end": 129.76, "text": " exchange our symmetric keys.", "tokens": [7742, 527, 32330, 9317, 13], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 22, "seek": 10784, "start": 129.76, "end": 136.88, "text": " So for that we have three choices, the historical one is called SDS, so on this one the keys", "tokens": [407, 337, 300, 321, 362, 1045, 7994, 11, 264, 8584, 472, 307, 1219, 318, 11844, 11, 370, 322, 341, 472, 264, 9317], "temperature": 0.0, "avg_logprob": -0.2522524727715386, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00035125191789120436}, {"id": 23, "seek": 13688, "start": 136.88, "end": 141.68, "text": " are transmitted in the signaling path, which if the signaling path is protected, which", "tokens": [366, 25355, 294, 264, 38639, 3100, 11, 597, 498, 264, 38639, 3100, 307, 10594, 11, 597], "temperature": 0.0, "avg_logprob": -0.2393940860785327, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.00011194532999070361}, {"id": 24, "seek": 13688, "start": 141.68, "end": 148.16, "text": " is normally the case by TLS, is okay, the only weakness is that the SIP proxy gets", "tokens": [307, 5646, 264, 1389, 538, 314, 19198, 11, 307, 1392, 11, 264, 787, 12772, 307, 300, 264, 318, 9139, 29690, 2170], "temperature": 0.0, "avg_logprob": -0.2393940860785327, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.00011194532999070361}, {"id": 25, "seek": 13688, "start": 148.16, "end": 153.72, "text": " access to the symmetric keys, so we are not actually end to end encrypted.", "tokens": [2105, 281, 264, 32330, 9317, 11, 370, 321, 366, 406, 767, 917, 281, 917, 36663, 13], "temperature": 0.0, "avg_logprob": -0.2393940860785327, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.00011194532999070361}, {"id": 26, "seek": 13688, "start": 153.72, "end": 159.48, "text": " So basically the people running the service would decrypt your media stream.", "tokens": [407, 1936, 264, 561, 2614, 264, 2643, 576, 979, 627, 662, 428, 3021, 4309, 13], "temperature": 0.0, "avg_logprob": -0.2393940860785327, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.00011194532999070361}, {"id": 27, "seek": 13688, "start": 159.48, "end": 164.76, "text": " So there is another one, which also gets an RFC, which is called DTLS SRTP, basically", "tokens": [407, 456, 307, 1071, 472, 11, 597, 611, 2170, 364, 497, 18671, 11, 597, 307, 1219, 413, 51, 19198, 20840, 16804, 11, 1936], "temperature": 0.0, "avg_logprob": -0.2393940860785327, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.00011194532999070361}, {"id": 28, "seek": 16476, "start": 164.76, "end": 171.6, "text": " on this one, on the media stream you perform a TLSN check, actually a DTLSN check because", "tokens": [322, 341, 472, 11, 322, 264, 3021, 4309, 291, 2042, 257, 314, 19198, 45, 1520, 11, 767, 257, 413, 51, 19198, 45, 1520, 570], "temperature": 0.0, "avg_logprob": -0.2166147949875042, "compression_ratio": 1.6172248803827751, "no_speech_prob": 0.0005717461463063955}, {"id": 29, "seek": 16476, "start": 171.6, "end": 178.72, "text": " it's over UDP, and this one works well, but you have to deploy a PKI and you have to", "tokens": [309, 311, 670, 624, 11373, 11, 293, 341, 472, 1985, 731, 11, 457, 291, 362, 281, 7274, 257, 430, 27731, 293, 291, 362, 281], "temperature": 0.0, "avg_logprob": -0.2166147949875042, "compression_ratio": 1.6172248803827751, "no_speech_prob": 0.0005717461463063955}, {"id": 30, "seek": 16476, "start": 178.72, "end": 185.6, "text": " manage certificates for all of your clients and everything, so it's a bit heavy, and also", "tokens": [3067, 32941, 337, 439, 295, 428, 6982, 293, 1203, 11, 370, 309, 311, 257, 857, 4676, 11, 293, 611], "temperature": 0.0, "avg_logprob": -0.2166147949875042, "compression_ratio": 1.6172248803827751, "no_speech_prob": 0.0005717461463063955}, {"id": 31, "seek": 16476, "start": 185.6, "end": 190.12, "text": " you still have to trust someone, you trust certificates, sure, but still.", "tokens": [291, 920, 362, 281, 3361, 1580, 11, 291, 3361, 32941, 11, 988, 11, 457, 920, 13], "temperature": 0.0, "avg_logprob": -0.2166147949875042, "compression_ratio": 1.6172248803827751, "no_speech_prob": 0.0005717461463063955}, {"id": 32, "seek": 19012, "start": 190.12, "end": 194.84, "text": " And then there is another one that we favor, well all of three are available in the info,", "tokens": [400, 550, 456, 307, 1071, 472, 300, 321, 2294, 11, 731, 439, 295, 1045, 366, 2435, 294, 264, 13614, 11], "temperature": 0.0, "avg_logprob": -0.31605577898455095, "compression_ratio": 1.7088607594936709, "no_speech_prob": 0.00038150406908243895}, {"id": 33, "seek": 19012, "start": 194.84, "end": 200.24, "text": " but the last one is called the RTP, which is one we'll focus on this one today.", "tokens": [457, 264, 1036, 472, 307, 1219, 264, 497, 16804, 11, 597, 307, 472, 321, 603, 1879, 322, 341, 472, 965, 13], "temperature": 0.0, "avg_logprob": -0.31605577898455095, "compression_ratio": 1.7088607594936709, "no_speech_prob": 0.00038150406908243895}, {"id": 34, "seek": 19012, "start": 200.24, "end": 205.92000000000002, "text": " And this one on the media pass, you perform the RTP protocol, which is based on Diffie", "tokens": [400, 341, 472, 322, 264, 3021, 1320, 11, 291, 2042, 264, 497, 16804, 10336, 11, 597, 307, 2361, 322, 413, 3661, 414], "temperature": 0.0, "avg_logprob": -0.31605577898455095, "compression_ratio": 1.7088607594936709, "no_speech_prob": 0.00038150406908243895}, {"id": 35, "seek": 19012, "start": 205.92000000000002, "end": 210.64000000000001, "text": " Elman, which using electric curve or a simple Diffie Elman.", "tokens": [2699, 1601, 11, 597, 1228, 5210, 7605, 420, 257, 2199, 413, 3661, 414, 2699, 1601, 13], "temperature": 0.0, "avg_logprob": -0.31605577898455095, "compression_ratio": 1.7088607594936709, "no_speech_prob": 0.00038150406908243895}, {"id": 36, "seek": 19012, "start": 210.64000000000001, "end": 216.96, "text": " This one has no third party required, so which is good, the only small thing is that you", "tokens": [639, 472, 575, 572, 2636, 3595, 4739, 11, 370, 597, 307, 665, 11, 264, 787, 1359, 551, 307, 300, 291], "temperature": 0.0, "avg_logprob": -0.31605577898455095, "compression_ratio": 1.7088607594936709, "no_speech_prob": 0.00038150406908243895}, {"id": 37, "seek": 21696, "start": 216.96, "end": 222.44, "text": " have to confirm, make some kind of spy thing that you have, tell secrets on the phone,", "tokens": [362, 281, 9064, 11, 652, 512, 733, 295, 20752, 551, 300, 291, 362, 11, 980, 14093, 322, 264, 2593, 11], "temperature": 0.0, "avg_logprob": -0.2925711083919444, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0006117545999586582}, {"id": 38, "seek": 21696, "start": 222.44, "end": 227.76000000000002, "text": " but as you are talking one with each other, it for the user and user is a bit an annoyance,", "tokens": [457, 382, 291, 366, 1417, 472, 365, 1184, 661, 11, 309, 337, 264, 4195, 293, 4195, 307, 257, 857, 364, 8759, 719, 11], "temperature": 0.0, "avg_logprob": -0.2925711083919444, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0006117545999586582}, {"id": 39, "seek": 21696, "start": 227.76000000000002, "end": 233.60000000000002, "text": " but you have to do it once in the call list, the world call history with your other endpoint.", "tokens": [457, 291, 362, 281, 360, 309, 1564, 294, 264, 818, 1329, 11, 264, 1002, 818, 2503, 365, 428, 661, 35795, 13], "temperature": 0.0, "avg_logprob": -0.2925711083919444, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0006117545999586582}, {"id": 40, "seek": 21696, "start": 233.60000000000002, "end": 240.68, "text": " So we think it's acceptable for users, obviously one has to get involved in security, but normally", "tokens": [407, 321, 519, 309, 311, 15513, 337, 5022, 11, 2745, 472, 575, 281, 483, 3288, 294, 3825, 11, 457, 5646], "temperature": 0.0, "avg_logprob": -0.2925711083919444, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0006117545999586582}, {"id": 41, "seek": 24068, "start": 240.68, "end": 247.52, "text": " it works, and the experience tells that people focus on security tends to not be driven away", "tokens": [309, 1985, 11, 293, 264, 1752, 5112, 300, 561, 1879, 322, 3825, 12258, 281, 406, 312, 9555, 1314], "temperature": 0.0, "avg_logprob": -0.30283867558346517, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.0011780982604250312}, {"id": 42, "seek": 24068, "start": 247.52, "end": 253.24, "text": " by this small drawback on the protocol.", "tokens": [538, 341, 1359, 2642, 3207, 322, 264, 10336, 13], "temperature": 0.0, "avg_logprob": -0.30283867558346517, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.0011780982604250312}, {"id": 43, "seek": 24068, "start": 253.24, "end": 259.28000000000003, "text": " So it's an RTP which is now more than 10 years old, it has been mainly written by Filsie", "tokens": [407, 309, 311, 364, 497, 16804, 597, 307, 586, 544, 813, 1266, 924, 1331, 11, 309, 575, 668, 8704, 3720, 538, 479, 4174, 414], "temperature": 0.0, "avg_logprob": -0.30283867558346517, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.0011780982604250312}, {"id": 44, "seek": 24068, "start": 259.28000000000003, "end": 266.04, "text": " Elman, the guy behind PGP, which are always focused on avoiding third parties.", "tokens": [2699, 1601, 11, 264, 2146, 2261, 40975, 47, 11, 597, 366, 1009, 5178, 322, 20220, 2636, 8265, 13], "temperature": 0.0, "avg_logprob": -0.30283867558346517, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.0011780982604250312}, {"id": 45, "seek": 26604, "start": 266.04, "end": 273.48, "text": " And it's probably different properties, I won't explain the key continuity and stuff", "tokens": [400, 309, 311, 1391, 819, 7221, 11, 286, 1582, 380, 2903, 264, 2141, 23807, 293, 1507], "temperature": 0.0, "avg_logprob": -0.2689056629087867, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.001030940213240683}, {"id": 46, "seek": 26604, "start": 273.48, "end": 281.20000000000005, "text": " because this one is unchanged, and I will focus on managing the middle attack detection.", "tokens": [570, 341, 472, 307, 44553, 11, 293, 286, 486, 1879, 322, 11642, 264, 2808, 2690, 17784, 13], "temperature": 0.0, "avg_logprob": -0.2689056629087867, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.001030940213240683}, {"id": 47, "seek": 26604, "start": 281.20000000000005, "end": 287.52000000000004, "text": " So first a small reminder of what is Diffie Elman, so basically it's a protocol where", "tokens": [407, 700, 257, 1359, 13548, 295, 437, 307, 413, 3661, 414, 2699, 1601, 11, 370, 1936, 309, 311, 257, 10336, 689], "temperature": 0.0, "avg_logprob": -0.2689056629087867, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.001030940213240683}, {"id": 48, "seek": 26604, "start": 287.52000000000004, "end": 292.08000000000004, "text": " it's completely symmetric, one part, both parts will generate key pair, and then they", "tokens": [309, 311, 2584, 32330, 11, 472, 644, 11, 1293, 3166, 486, 8460, 2141, 6119, 11, 293, 550, 436], "temperature": 0.0, "avg_logprob": -0.2689056629087867, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.001030940213240683}, {"id": 49, "seek": 29208, "start": 292.08, "end": 297.32, "text": " exchange public keys, and with this secret key and other side public keys will get to", "tokens": [7742, 1908, 9317, 11, 293, 365, 341, 4054, 2141, 293, 661, 1252, 1908, 9317, 486, 483, 281], "temperature": 0.0, "avg_logprob": -0.28396100997924806, "compression_ratio": 1.671875, "no_speech_prob": 0.0008781284559518099}, {"id": 50, "seek": 29208, "start": 297.32, "end": 298.32, "text": " share secret.", "tokens": [2073, 4054, 13], "temperature": 0.0, "avg_logprob": -0.28396100997924806, "compression_ratio": 1.671875, "no_speech_prob": 0.0008781284559518099}, {"id": 51, "seek": 29208, "start": 298.32, "end": 304.96, "text": " So far so good, it's kind of easy, on a drawback it's obviously vulnerable as many key exchange", "tokens": [407, 1400, 370, 665, 11, 309, 311, 733, 295, 1858, 11, 322, 257, 2642, 3207, 309, 311, 2745, 10955, 382, 867, 2141, 7742], "temperature": 0.0, "avg_logprob": -0.28396100997924806, "compression_ratio": 1.671875, "no_speech_prob": 0.0008781284559518099}, {"id": 52, "seek": 29208, "start": 304.96, "end": 307.59999999999997, "text": " protocol to manage middle attack.", "tokens": [10336, 281, 3067, 2808, 2690, 13], "temperature": 0.0, "avg_logprob": -0.28396100997924806, "compression_ratio": 1.671875, "no_speech_prob": 0.0008781284559518099}, {"id": 53, "seek": 29208, "start": 307.59999999999997, "end": 313.71999999999997, "text": " So managing middle attack, what it is, it's basically someone putting ourself in the middle", "tokens": [407, 11642, 2808, 2690, 11, 437, 309, 307, 11, 309, 311, 1936, 1580, 3372, 527, 927, 294, 264, 2808], "temperature": 0.0, "avg_logprob": -0.28396100997924806, "compression_ratio": 1.671875, "no_speech_prob": 0.0008781284559518099}, {"id": 54, "seek": 31372, "start": 313.72, "end": 323.40000000000003, "text": " and exchanging keys with both sides, so the side cannot know, basically Alice cannot", "tokens": [293, 6210, 9741, 9317, 365, 1293, 4881, 11, 370, 264, 1252, 2644, 458, 11, 1936, 16004, 2644], "temperature": 0.0, "avg_logprob": -0.2236452282599683, "compression_ratio": 1.947136563876652, "no_speech_prob": 0.0011362131917849183}, {"id": 55, "seek": 31372, "start": 323.40000000000003, "end": 328.56, "text": " know that Eve is sending her key, she thinks that Bob is sending the key, and she performs", "tokens": [458, 300, 15544, 307, 7750, 720, 2141, 11, 750, 7309, 300, 6085, 307, 7750, 264, 2141, 11, 293, 750, 26213], "temperature": 0.0, "avg_logprob": -0.2236452282599683, "compression_ratio": 1.947136563876652, "no_speech_prob": 0.0011362131917849183}, {"id": 56, "seek": 31372, "start": 328.56, "end": 333.04, "text": " the exchange, and at the end what you get is that Alice gets a shared secret with Eve,", "tokens": [264, 7742, 11, 293, 412, 264, 917, 437, 291, 483, 307, 300, 16004, 2170, 257, 5507, 4054, 365, 15544, 11], "temperature": 0.0, "avg_logprob": -0.2236452282599683, "compression_ratio": 1.947136563876652, "no_speech_prob": 0.0011362131917849183}, {"id": 57, "seek": 31372, "start": 333.04, "end": 337.56, "text": " and Eve gets another shared secret with Bob, but Alice is convinced that she exchanged keys", "tokens": [293, 15544, 2170, 1071, 5507, 4054, 365, 6085, 11, 457, 16004, 307, 12561, 300, 750, 38378, 9317], "temperature": 0.0, "avg_logprob": -0.2236452282599683, "compression_ratio": 1.947136563876652, "no_speech_prob": 0.0011362131917849183}, {"id": 58, "seek": 31372, "start": 337.56, "end": 343.68, "text": " with Bob, and she has no ways to actually detect this, well she has actually some ways,", "tokens": [365, 6085, 11, 293, 750, 575, 572, 2098, 281, 767, 5531, 341, 11, 731, 750, 575, 767, 512, 2098, 11], "temperature": 0.0, "avg_logprob": -0.2236452282599683, "compression_ratio": 1.947136563876652, "no_speech_prob": 0.0011362131917849183}, {"id": 59, "seek": 34368, "start": 343.68, "end": 344.68, "text": " no?", "tokens": [572, 30], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 60, "seek": 34368, "start": 344.68, "end": 345.68, "text": " Yeah?", "tokens": [865, 30], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 61, "seek": 34368, "start": 345.68, "end": 346.68, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 62, "seek": 34368, "start": 346.68, "end": 347.68, "text": " No?", "tokens": [883, 30], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 63, "seek": 34368, "start": 347.68, "end": 348.68, "text": " Yeah?", "tokens": [865, 30], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 64, "seek": 34368, "start": 348.68, "end": 349.68, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 65, "seek": 34368, "start": 349.68, "end": 366.64, "text": " So the DRTPN check is, there is first phase of discovery, so what is happening is both", "tokens": [407, 264, 12118, 16804, 45, 1520, 307, 11, 456, 307, 700, 5574, 295, 12114, 11, 370, 437, 307, 2737, 307, 1293], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 66, "seek": 34368, "start": 366.64, "end": 371.0, "text": " endpoints will exchange their capabilities, their choice of preferred algorithms, stuff", "tokens": [917, 20552, 486, 7742, 641, 10862, 11, 641, 3922, 295, 16494, 14642, 11, 1507], "temperature": 0.0, "avg_logprob": -0.3751216301551232, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0006471617962233722}, {"id": 67, "seek": 37100, "start": 371.0, "end": 375.72, "text": " like this, and then start the actual DRTPN check.", "tokens": [411, 341, 11, 293, 550, 722, 264, 3539, 12118, 16804, 45, 1520, 13], "temperature": 0.0, "avg_logprob": -0.3125871097340303, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.00040812918450683355}, {"id": 68, "seek": 37100, "start": 375.72, "end": 381.2, "text": " So first you have one packet of commits, I will go into detail now, and then you actually", "tokens": [407, 700, 291, 362, 472, 20300, 295, 48311, 11, 286, 486, 352, 666, 2607, 586, 11, 293, 550, 291, 767], "temperature": 0.0, "avg_logprob": -0.3125871097340303, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.00040812918450683355}, {"id": 69, "seek": 37100, "start": 381.2, "end": 387.48, "text": " perform the DH, Diffie-Ellman exchange, so Alice is sending a public key, Bob is sending", "tokens": [2042, 264, 28606, 11, 413, 3661, 414, 12, 36, 285, 1601, 7742, 11, 370, 16004, 307, 7750, 257, 1908, 2141, 11, 6085, 307, 7750], "temperature": 0.0, "avg_logprob": -0.3125871097340303, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.00040812918450683355}, {"id": 70, "seek": 37100, "start": 387.48, "end": 395.8, "text": " his, and they both compute from this, they will compute the shared secret, and adding", "tokens": [702, 11, 293, 436, 1293, 14722, 490, 341, 11, 436, 486, 14722, 264, 5507, 4054, 11, 293, 5127], "temperature": 0.0, "avg_logprob": -0.3125871097340303, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.00040812918450683355}, {"id": 71, "seek": 39580, "start": 395.8, "end": 401.72, "text": " all the transcripts of the communication, they will generate S0, which is the base secret,", "tokens": [439, 264, 24444, 82, 295, 264, 6101, 11, 436, 486, 8460, 318, 15, 11, 597, 307, 264, 3096, 4054, 11], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 72, "seek": 39580, "start": 401.72, "end": 403.8, "text": " the output of the DRTPN check.", "tokens": [264, 5598, 295, 264, 12118, 16804, 45, 1520, 13], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 73, "seek": 39580, "start": 403.8, "end": 410.08000000000004, "text": " From the S0, they will derive the SRTP keys, which is what we are trying to do now here,", "tokens": [3358, 264, 318, 15, 11, 436, 486, 28446, 264, 20840, 16804, 9317, 11, 597, 307, 437, 321, 366, 1382, 281, 360, 586, 510, 11], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 74, "seek": 39580, "start": 410.08000000000004, "end": 415.2, "text": " and they also derive something called SAS, short authentication string, that will be", "tokens": [293, 436, 611, 28446, 746, 1219, 33441, 11, 2099, 26643, 6798, 11, 300, 486, 312], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 75, "seek": 39580, "start": 415.2, "end": 419.96000000000004, "text": " vocally compared over the phone, because we are, Alice and Bob are talking, actually talking", "tokens": [2329, 379, 5347, 670, 264, 2593, 11, 570, 321, 366, 11, 16004, 293, 6085, 366, 1417, 11, 767, 1417], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 76, "seek": 39580, "start": 419.96000000000004, "end": 421.76, "text": " to each other.", "tokens": [281, 1184, 661, 13], "temperature": 0.0, "avg_logprob": -0.24591680254255022, "compression_ratio": 1.665289256198347, "no_speech_prob": 0.0006703622057102621}, {"id": 77, "seek": 42176, "start": 421.76, "end": 427.48, "text": " So the end of the protocol is just some updates and writing in cash for key continuities mechanisms", "tokens": [407, 264, 917, 295, 264, 10336, 307, 445, 512, 9205, 293, 3579, 294, 6388, 337, 2141, 2993, 1088, 15902], "temperature": 0.0, "avg_logprob": -0.27540349530744124, "compression_ratio": 1.76171875, "no_speech_prob": 0.000769532925914973}, {"id": 78, "seek": 42176, "start": 427.48, "end": 432.84, "text": " and stuff, so it's not really interesting now, and then after that, the SRTP strings", "tokens": [293, 1507, 11, 370, 309, 311, 406, 534, 1880, 586, 11, 293, 550, 934, 300, 11, 264, 20840, 16804, 13985], "temperature": 0.0, "avg_logprob": -0.27540349530744124, "compression_ratio": 1.76171875, "no_speech_prob": 0.000769532925914973}, {"id": 79, "seek": 42176, "start": 432.84, "end": 438.71999999999997, "text": " start, actually, and they can talk, and once they start to talk, once in the call history,", "tokens": [722, 11, 767, 11, 293, 436, 393, 751, 11, 293, 1564, 436, 722, 281, 751, 11, 1564, 294, 264, 818, 2503, 11], "temperature": 0.0, "avg_logprob": -0.27540349530744124, "compression_ratio": 1.76171875, "no_speech_prob": 0.000769532925914973}, {"id": 80, "seek": 42176, "start": 438.71999999999997, "end": 444.32, "text": " they will do this vocally sus comparison, what it's for, this sus comparison is basically", "tokens": [436, 486, 360, 341, 2329, 379, 3291, 9660, 11, 437, 309, 311, 337, 11, 341, 3291, 9660, 307, 1936], "temperature": 0.0, "avg_logprob": -0.27540349530744124, "compression_ratio": 1.76171875, "no_speech_prob": 0.000769532925914973}, {"id": 81, "seek": 42176, "start": 444.32, "end": 448.71999999999997, "text": " if they want to detect a man in the middle attacks, they have to ensure that Alice is", "tokens": [498, 436, 528, 281, 5531, 257, 587, 294, 264, 2808, 8122, 11, 436, 362, 281, 5586, 300, 16004, 307], "temperature": 0.0, "avg_logprob": -0.27540349530744124, "compression_ratio": 1.76171875, "no_speech_prob": 0.000769532925914973}, {"id": 82, "seek": 44872, "start": 448.72, "end": 455.12, "text": " using the keys that Bob has sent, and also Bob wants to know that the key that was sent", "tokens": [1228, 264, 9317, 300, 6085, 575, 2279, 11, 293, 611, 6085, 2738, 281, 458, 300, 264, 2141, 300, 390, 2279], "temperature": 0.0, "avg_logprob": -0.21393577725279564, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.00020282625337131321}, {"id": 83, "seek": 44872, "start": 455.12, "end": 457.72, "text": " by Alice is the one he actually got.", "tokens": [538, 16004, 307, 264, 472, 415, 767, 658, 13], "temperature": 0.0, "avg_logprob": -0.21393577725279564, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.00020282625337131321}, {"id": 84, "seek": 44872, "start": 457.72, "end": 462.0, "text": " So what they could do, as they are talking, is they could basically read their own keys", "tokens": [407, 437, 436, 727, 360, 11, 382, 436, 366, 1417, 11, 307, 436, 727, 1936, 1401, 641, 1065, 9317], "temperature": 0.0, "avg_logprob": -0.21393577725279564, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.00020282625337131321}, {"id": 85, "seek": 44872, "start": 462.0, "end": 467.44000000000005, "text": " to the other, but the key is something which is a few hundred bytes, so it's a bit long", "tokens": [281, 264, 661, 11, 457, 264, 2141, 307, 746, 597, 307, 257, 1326, 3262, 36088, 11, 370, 309, 311, 257, 857, 938], "temperature": 0.0, "avg_logprob": -0.21393577725279564, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.00020282625337131321}, {"id": 86, "seek": 44872, "start": 467.44000000000005, "end": 473.12, "text": " to read a few hundred bytes of the decimal chain over the phone, no one would do that.", "tokens": [281, 1401, 257, 1326, 3262, 36088, 295, 264, 26601, 5021, 670, 264, 2593, 11, 572, 472, 576, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.21393577725279564, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.00020282625337131321}, {"id": 87, "seek": 47312, "start": 473.12, "end": 479.44, "text": " So what they do instead, we derive this short authentication string which is only four digits", "tokens": [407, 437, 436, 360, 2602, 11, 321, 28446, 341, 2099, 26643, 6798, 597, 307, 787, 1451, 27011], "temperature": 0.0, "avg_logprob": -0.22131078619706004, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.00011036160867661238}, {"id": 88, "seek": 47312, "start": 479.44, "end": 485.16, "text": " and has 20 bits, actually derived from 20 bits, and this sus is also derived from the", "tokens": [293, 575, 945, 9239, 11, 767, 18949, 490, 945, 9239, 11, 293, 341, 3291, 307, 611, 18949, 490, 264], "temperature": 0.0, "avg_logprob": -0.22131078619706004, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.00011036160867661238}, {"id": 89, "seek": 47312, "start": 485.16, "end": 489.36, "text": " secret zero, which is the output of the protocol.", "tokens": [4054, 4018, 11, 597, 307, 264, 5598, 295, 264, 10336, 13], "temperature": 0.0, "avg_logprob": -0.22131078619706004, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.00011036160867661238}, {"id": 90, "seek": 47312, "start": 489.36, "end": 493.36, "text": " The only problem with that is that you can actually perform a sus collision with that", "tokens": [440, 787, 1154, 365, 300, 307, 300, 291, 393, 767, 2042, 257, 3291, 24644, 365, 300], "temperature": 0.0, "avg_logprob": -0.22131078619706004, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.00011036160867661238}, {"id": 91, "seek": 47312, "start": 493.36, "end": 499.4, "text": " because the sus is very short, how it will work, so actually the beginning of the protocol,", "tokens": [570, 264, 3291, 307, 588, 2099, 11, 577, 309, 486, 589, 11, 370, 767, 264, 2863, 295, 264, 10336, 11], "temperature": 0.0, "avg_logprob": -0.22131078619706004, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.00011036160867661238}, {"id": 92, "seek": 49940, "start": 499.4, "end": 505.84, "text": " as soon as Alice sent a public key to Bob, Bob is able to compute s zero because he has", "tokens": [382, 2321, 382, 16004, 2279, 257, 1908, 2141, 281, 6085, 11, 6085, 307, 1075, 281, 14722, 262, 4018, 570, 415, 575], "temperature": 0.0, "avg_logprob": -0.18994468392677677, "compression_ratio": 1.7008928571428572, "no_speech_prob": 8.40701031847857e-05}, {"id": 93, "seek": 49940, "start": 505.84, "end": 511.47999999999996, "text": " his own secret key, and he is able to compute the sus then.", "tokens": [702, 1065, 4054, 2141, 11, 293, 415, 307, 1075, 281, 14722, 264, 3291, 550, 13], "temperature": 0.0, "avg_logprob": -0.18994468392677677, "compression_ratio": 1.7008928571428572, "no_speech_prob": 8.40701031847857e-05}, {"id": 94, "seek": 49940, "start": 511.47999999999996, "end": 517.24, "text": " So what one could do is that if you perform first the RTP exchange with Alice, she got", "tokens": [407, 437, 472, 727, 360, 307, 300, 498, 291, 2042, 700, 264, 497, 16804, 7742, 365, 16004, 11, 750, 658], "temperature": 0.0, "avg_logprob": -0.18994468392677677, "compression_ratio": 1.7008928571428572, "no_speech_prob": 8.40701031847857e-05}, {"id": 95, "seek": 49940, "start": 517.24, "end": 521.52, "text": " the sus one, and then she received Bob's public key.", "tokens": [264, 3291, 472, 11, 293, 550, 750, 4613, 6085, 311, 1908, 2141, 13], "temperature": 0.0, "avg_logprob": -0.18994468392677677, "compression_ratio": 1.7008928571428572, "no_speech_prob": 8.40701031847857e-05}, {"id": 96, "seek": 49940, "start": 521.52, "end": 527.64, "text": " When she got Bob's public key, she can generate a huge set of key pairs until she finds a sus", "tokens": [1133, 750, 658, 6085, 311, 1908, 2141, 11, 750, 393, 8460, 257, 2603, 992, 295, 2141, 15494, 1826, 750, 10704, 257, 3291], "temperature": 0.0, "avg_logprob": -0.18994468392677677, "compression_ratio": 1.7008928571428572, "no_speech_prob": 8.40701031847857e-05}, {"id": 97, "seek": 52764, "start": 527.64, "end": 529.64, "text": " that collides.", "tokens": [300, 1263, 1875, 13], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 98, "seek": 52764, "start": 529.64, "end": 534.52, "text": " Basically she will try to generate a lot of pairs, sus is only 20 bits, so if you generate", "tokens": [8537, 750, 486, 853, 281, 8460, 257, 688, 295, 15494, 11, 3291, 307, 787, 945, 9239, 11, 370, 498, 291, 8460], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 99, "seek": 52764, "start": 534.52, "end": 539.84, "text": " one million keys and try to hold them, you will for sure find a collision on the sus.", "tokens": [472, 2459, 9317, 293, 853, 281, 1797, 552, 11, 291, 486, 337, 988, 915, 257, 24644, 322, 264, 3291, 13], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 100, "seek": 52764, "start": 539.84, "end": 545.16, "text": " So to prevent this, Eve is forced to send a commit packet.", "tokens": [407, 281, 4871, 341, 11, 15544, 307, 7579, 281, 2845, 257, 5599, 20300, 13], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 101, "seek": 52764, "start": 545.16, "end": 549.68, "text": " In the commit packet what we have, we do not have our public key, but we have hash of the", "tokens": [682, 264, 5599, 20300, 437, 321, 362, 11, 321, 360, 406, 362, 527, 1908, 2141, 11, 457, 321, 362, 22019, 295, 264], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 102, "seek": 52764, "start": 549.68, "end": 557.16, "text": " public key, and so when you receive the hash of the public key, Alice will say for example", "tokens": [1908, 2141, 11, 293, 370, 562, 291, 4774, 264, 22019, 295, 264, 1908, 2141, 11, 16004, 486, 584, 337, 1365], "temperature": 0.0, "avg_logprob": -0.30852677718452787, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.0004978918586857617}, {"id": 103, "seek": 55716, "start": 557.16, "end": 562.36, "text": " Bob's hash public key, she will store it, and then when Bob sends the public key, she", "tokens": [6085, 311, 22019, 1908, 2141, 11, 750, 486, 3531, 309, 11, 293, 550, 562, 6085, 14790, 264, 1908, 2141, 11, 750], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 104, "seek": 55716, "start": 562.36, "end": 567.68, "text": " will compare, she will just hash Bob's public key, and she will compare, so that way she", "tokens": [486, 6794, 11, 750, 486, 445, 22019, 6085, 311, 1908, 2141, 11, 293, 750, 486, 6794, 11, 370, 300, 636, 750], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 105, "seek": 55716, "start": 567.68, "end": 574.7199999999999, "text": " is sure that Bob did not wait for receiving a public key and cannot generate millions", "tokens": [307, 988, 300, 6085, 630, 406, 1699, 337, 10040, 257, 1908, 2141, 293, 2644, 8460, 6803], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 106, "seek": 55716, "start": 574.7199999999999, "end": 578.52, "text": " of key pairs to find a collision on the sus.", "tokens": [295, 2141, 15494, 281, 915, 257, 24644, 322, 264, 3291, 13], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 107, "seek": 55716, "start": 578.52, "end": 581.72, "text": " So this is quite effective, and so far so good.", "tokens": [407, 341, 307, 1596, 4942, 11, 293, 370, 1400, 370, 665, 13], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 108, "seek": 55716, "start": 581.72, "end": 586.3199999999999, "text": " Now we want to switch to using, to use post quantum cryptography.", "tokens": [823, 321, 528, 281, 3679, 281, 1228, 11, 281, 764, 2183, 13018, 9844, 5820, 13], "temperature": 0.0, "avg_logprob": -0.22497901916503907, "compression_ratio": 1.7829787234042553, "no_speech_prob": 0.0003323423443362117}, {"id": 109, "seek": 58632, "start": 586.32, "end": 591.88, "text": " The problem with post quantum is that on the next call for standardization, they required", "tokens": [440, 1154, 365, 2183, 13018, 307, 300, 322, 264, 958, 818, 337, 3832, 2144, 11, 436, 4739], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 110, "seek": 58632, "start": 591.88, "end": 596.96, "text": " all the algorithm to use key encapsulation mechanism, and not deferment.", "tokens": [439, 264, 9284, 281, 764, 2141, 38745, 2776, 7513, 11, 293, 406, 25704, 518, 13], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 111, "seek": 58632, "start": 596.96, "end": 602.9200000000001, "text": " So key encapsulation mechanism is a bit different, because the two sides are not the same.", "tokens": [407, 2141, 38745, 2776, 7513, 307, 257, 857, 819, 11, 570, 264, 732, 4881, 366, 406, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 112, "seek": 58632, "start": 602.9200000000001, "end": 605.6, "text": " In deferment, the two sides were exactly doing the same thing.", "tokens": [682, 25704, 518, 11, 264, 732, 4881, 645, 2293, 884, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 113, "seek": 58632, "start": 605.6, "end": 610.6, "text": " They are both generating keys, exchanging public keys, and then computing secrets.", "tokens": [814, 366, 1293, 17746, 9317, 11, 6210, 9741, 1908, 9317, 11, 293, 550, 15866, 14093, 13], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 114, "seek": 58632, "start": 610.6, "end": 615.72, "text": " There we have one side generating keys, one side encapsulating a key, a secret, and the", "tokens": [821, 321, 362, 472, 1252, 17746, 9317, 11, 472, 1252, 38745, 12162, 257, 2141, 11, 257, 4054, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.3026581805685292, "compression_ratio": 1.8803088803088803, "no_speech_prob": 0.0007017136667855084}, {"id": 115, "seek": 61572, "start": 615.72, "end": 619.6800000000001, "text": " other side will be able to decapsulate the secrets that was encapsulated by the first", "tokens": [661, 1252, 486, 312, 1075, 281, 368, 496, 1878, 5256, 264, 14093, 300, 390, 38745, 6987, 538, 264, 700], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 116, "seek": 61572, "start": 619.6800000000001, "end": 621.08, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 117, "seek": 61572, "start": 621.08, "end": 630.6800000000001, "text": " So it's not symmetric, so we cannot switch directly from deferment to KM form of key exchange.", "tokens": [407, 309, 311, 406, 32330, 11, 370, 321, 2644, 3679, 3838, 490, 25704, 518, 281, 591, 44, 1254, 295, 2141, 7742, 13], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 118, "seek": 61572, "start": 630.6800000000001, "end": 636.5600000000001, "text": " Obviously, KM is still vulnerable to man's middle attack, because nothing is changed.", "tokens": [7580, 11, 591, 44, 307, 920, 10955, 281, 587, 311, 2808, 2690, 11, 570, 1825, 307, 3105, 13], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 119, "seek": 61572, "start": 636.5600000000001, "end": 641.12, "text": " You can still put someone in the middle and perform the exchange with the other side without", "tokens": [509, 393, 920, 829, 1580, 294, 264, 2808, 293, 2042, 264, 7742, 365, 264, 661, 1252, 1553], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 120, "seek": 61572, "start": 641.12, "end": 644.24, "text": " them knowing.", "tokens": [552, 5276, 13], "temperature": 0.0, "avg_logprob": -0.2446113987972862, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00022190125309862196}, {"id": 121, "seek": 64424, "start": 644.24, "end": 650.8, "text": " So what we have to do is adapt the RTP and change a little bit the actual handshake,", "tokens": [407, 437, 321, 362, 281, 360, 307, 6231, 264, 497, 16804, 293, 1319, 257, 707, 857, 264, 3539, 2377, 34593, 11], "temperature": 0.0, "avg_logprob": -0.24470838587334814, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0001894478191388771}, {"id": 122, "seek": 64424, "start": 650.8, "end": 653.5600000000001, "text": " the central part of the protocol.", "tokens": [264, 5777, 644, 295, 264, 10336, 13], "temperature": 0.0, "avg_logprob": -0.24470838587334814, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0001894478191388771}, {"id": 123, "seek": 64424, "start": 653.5600000000001, "end": 662.44, "text": " So S0 is still derived from the exchange secret and transcript of all the conversations.", "tokens": [407, 318, 15, 307, 920, 18949, 490, 264, 7742, 4054, 293, 24444, 295, 439, 264, 7315, 13], "temperature": 0.0, "avg_logprob": -0.24470838587334814, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0001894478191388771}, {"id": 124, "seek": 64424, "start": 662.44, "end": 666.88, "text": " I've got only commits and two packets, but you have also yellow packets and stuff.", "tokens": [286, 600, 658, 787, 48311, 293, 732, 30364, 11, 457, 291, 362, 611, 5566, 30364, 293, 1507, 13], "temperature": 0.0, "avg_logprob": -0.24470838587334814, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0001894478191388771}, {"id": 125, "seek": 64424, "start": 666.88, "end": 672.48, "text": " So in the commit packet, the one which used to hold only the hash of the second packet", "tokens": [407, 294, 264, 5599, 20300, 11, 264, 472, 597, 1143, 281, 1797, 787, 264, 22019, 295, 264, 1150, 20300], "temperature": 0.0, "avg_logprob": -0.24470838587334814, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0001894478191388771}, {"id": 126, "seek": 67248, "start": 672.48, "end": 676.52, "text": " from Bob, Bob will now insert his public key.", "tokens": [490, 6085, 11, 6085, 486, 586, 8969, 702, 1908, 2141, 13], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 127, "seek": 67248, "start": 676.52, "end": 677.52, "text": " Why would he do that?", "tokens": [1545, 576, 415, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 128, "seek": 67248, "start": 677.52, "end": 679.8000000000001, "text": " So Alice can encapsulate the secret.", "tokens": [407, 16004, 393, 38745, 5256, 264, 4054, 13], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 129, "seek": 67248, "start": 679.8000000000001, "end": 684.44, "text": " So at this point Alice receives the public key from Bob, she encapsulates the secret,", "tokens": [407, 412, 341, 935, 16004, 20717, 264, 1908, 2141, 490, 6085, 11, 750, 38745, 26192, 264, 4054, 11], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 130, "seek": 67248, "start": 684.44, "end": 688.32, "text": " but at this point she's not able to compute S0 because she's missing the second packet", "tokens": [457, 412, 341, 935, 750, 311, 406, 1075, 281, 14722, 318, 15, 570, 750, 311, 5361, 264, 1150, 20300], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 131, "seek": 67248, "start": 688.32, "end": 690.16, "text": " from Bob.", "tokens": [490, 6085, 13], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 132, "seek": 67248, "start": 690.16, "end": 698.48, "text": " So she'll send back the ciphertext, so the output of the encapsulation, and at this point", "tokens": [407, 750, 603, 2845, 646, 264, 269, 21240, 25111, 11, 370, 264, 5598, 295, 264, 38745, 2776, 11, 293, 412, 341, 935], "temperature": 0.0, "avg_logprob": -0.20412417291437537, "compression_ratio": 1.7616822429906542, "no_speech_prob": 0.0001754131371853873}, {"id": 133, "seek": 69848, "start": 698.48, "end": 703.84, "text": " she has the share secret from the key encapsulation, but she cannot compute S0.", "tokens": [750, 575, 264, 2073, 4054, 490, 264, 2141, 38745, 2776, 11, 457, 750, 2644, 14722, 318, 15, 13], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 134, "seek": 69848, "start": 703.84, "end": 709.32, "text": " Bob now retrieves the share secret, and he can compute S0, but he already committed on", "tokens": [6085, 586, 19817, 977, 264, 2073, 4054, 11, 293, 415, 393, 14722, 318, 15, 11, 457, 415, 1217, 7784, 322], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 135, "seek": 69848, "start": 709.32, "end": 713.5600000000001, "text": " DH part 2 that he has to send to Alice, so still he cannot manipulate the secret, the", "tokens": [28606, 644, 568, 300, 415, 575, 281, 2845, 281, 16004, 11, 370, 920, 415, 2644, 20459, 264, 4054, 11, 264], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 136, "seek": 69848, "start": 713.5600000000001, "end": 715.2, "text": " final secret in S0.", "tokens": [2572, 4054, 294, 318, 15, 13], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 137, "seek": 69848, "start": 715.2, "end": 717.6, "text": " And what's in this packet?", "tokens": [400, 437, 311, 294, 341, 20300, 30], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 138, "seek": 69848, "start": 717.6, "end": 724.08, "text": " It's just a random number that is used once.", "tokens": [467, 311, 445, 257, 4974, 1230, 300, 307, 1143, 1564, 13], "temperature": 0.0, "avg_logprob": -0.32699882984161377, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.00014758850738871843}, {"id": 139, "seek": 72408, "start": 724.08, "end": 731.36, "text": " So now another problem is that we don't want to use, to focus only, of using only post", "tokens": [407, 586, 1071, 1154, 307, 300, 321, 500, 380, 528, 281, 764, 11, 281, 1879, 787, 11, 295, 1228, 787, 2183], "temperature": 0.0, "avg_logprob": -0.2222908161304615, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0004101671220269054}, {"id": 140, "seek": 72408, "start": 731.36, "end": 736.44, "text": " quantum algorithm, because we know that sometimes they got broken, like for example Psyche,", "tokens": [13018, 9284, 11, 570, 321, 458, 300, 2171, 436, 658, 5463, 11, 411, 337, 1365, 430, 3187, 1876, 11], "temperature": 0.0, "avg_logprob": -0.2222908161304615, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0004101671220269054}, {"id": 141, "seek": 72408, "start": 736.44, "end": 740.44, "text": " which was broken a bit late in the standardization process.", "tokens": [597, 390, 5463, 257, 857, 3469, 294, 264, 3832, 2144, 1399, 13], "temperature": 0.0, "avg_logprob": -0.2222908161304615, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0004101671220269054}, {"id": 142, "seek": 72408, "start": 740.44, "end": 747.48, "text": " So it might happen or not in the future, so to protect against this weakness, its possible", "tokens": [407, 309, 1062, 1051, 420, 406, 294, 264, 2027, 11, 370, 281, 2371, 1970, 341, 12772, 11, 1080, 1944], "temperature": 0.0, "avg_logprob": -0.2222908161304615, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0004101671220269054}, {"id": 143, "seek": 74748, "start": 747.48, "end": 754.36, "text": " weakness, we still want to use a mix of post quantum and a classic algorithm.", "tokens": [12772, 11, 321, 920, 528, 281, 764, 257, 2890, 295, 2183, 13018, 293, 257, 7230, 9284, 13], "temperature": 0.0, "avg_logprob": -0.2451168696085612, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0003287291619926691}, {"id": 144, "seek": 74748, "start": 754.36, "end": 760.6, "text": " So we use both at the same time, and in order to not complexify the protocol too much, the", "tokens": [407, 321, 764, 1293, 412, 264, 912, 565, 11, 293, 294, 1668, 281, 406, 3997, 2505, 264, 10336, 886, 709, 11, 264], "temperature": 0.0, "avg_logprob": -0.2451168696085612, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0003287291619926691}, {"id": 145, "seek": 74748, "start": 760.6, "end": 765.9200000000001, "text": " idea is to have one version of the protocol which is doing DFIRMAN, and the other one", "tokens": [1558, 307, 281, 362, 472, 3037, 295, 264, 10336, 597, 307, 884, 48336, 7740, 11866, 11, 293, 264, 661, 472], "temperature": 0.0, "avg_logprob": -0.2451168696085612, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0003287291619926691}, {"id": 146, "seek": 74748, "start": 765.9200000000001, "end": 767.88, "text": " key encapsulation mechanism.", "tokens": [2141, 38745, 2776, 7513, 13], "temperature": 0.0, "avg_logprob": -0.2451168696085612, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0003287291619926691}, {"id": 147, "seek": 74748, "start": 767.88, "end": 774.44, "text": " And the protocol won't know exactly if it's using a mix or not, because probably in the", "tokens": [400, 264, 10336, 1582, 380, 458, 2293, 498, 309, 311, 1228, 257, 2890, 420, 406, 11, 570, 1391, 294, 264], "temperature": 0.0, "avg_logprob": -0.2451168696085612, "compression_ratio": 1.5654008438818565, "no_speech_prob": 0.0003287291619926691}, {"id": 148, "seek": 77444, "start": 774.44, "end": 779.6400000000001, "text": " future, at some point we'll be confident in us with some post quantum algorithm, and", "tokens": [2027, 11, 412, 512, 935, 321, 603, 312, 6679, 294, 505, 365, 512, 2183, 13018, 9284, 11, 293], "temperature": 0.0, "avg_logprob": -0.2852864211864686, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.0009744130657054484}, {"id": 149, "seek": 77444, "start": 779.6400000000001, "end": 783.12, "text": " then we'll stop using the classical one, maybe or not.", "tokens": [550, 321, 603, 1590, 1228, 264, 13735, 472, 11, 1310, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.2852864211864686, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.0009744130657054484}, {"id": 150, "seek": 77444, "start": 783.12, "end": 785.8000000000001, "text": " But still the protocol should not be modified at this point.", "tokens": [583, 920, 264, 10336, 820, 406, 312, 15873, 412, 341, 935, 13], "temperature": 0.0, "avg_logprob": -0.2852864211864686, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.0009744130657054484}, {"id": 151, "seek": 77444, "start": 785.8000000000001, "end": 792.84, "text": " So the protocol is done to use a carry a mental fast without even knowing if it is a mix of", "tokens": [407, 264, 10336, 307, 1096, 281, 764, 257, 3985, 257, 4973, 2370, 1553, 754, 5276, 498, 309, 307, 257, 2890, 295], "temperature": 0.0, "avg_logprob": -0.2852864211864686, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.0009744130657054484}, {"id": 152, "seek": 77444, "start": 792.84, "end": 797.36, "text": " classical and post quantum or just post quantum or several post quantum.", "tokens": [13735, 293, 2183, 13018, 420, 445, 2183, 13018, 420, 2940, 2183, 13018, 13], "temperature": 0.0, "avg_logprob": -0.2852864211864686, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.0009744130657054484}, {"id": 153, "seek": 79736, "start": 797.36, "end": 805.96, "text": " So we made, first we have to make a carry interface from DFIRMAN, this is quite a standard", "tokens": [407, 321, 1027, 11, 700, 321, 362, 281, 652, 257, 3985, 9226, 490, 48336, 7740, 11866, 11, 341, 307, 1596, 257, 3832], "temperature": 0.0, "avg_logprob": -0.3041128229211878, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.0008515028166584671}, {"id": 154, "seek": 79736, "start": 805.96, "end": 813.84, "text": " construction, you generate, instead of, you can directly use the DFIRMAN construction", "tokens": [6435, 11, 291, 8460, 11, 2602, 295, 11, 291, 393, 3838, 764, 264, 48336, 7740, 11866, 6435], "temperature": 0.0, "avg_logprob": -0.3041128229211878, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.0008515028166584671}, {"id": 155, "seek": 79736, "start": 813.84, "end": 819.8000000000001, "text": " to generate a keeper, then you can send your public key to the other side, the other side", "tokens": [281, 8460, 257, 38709, 11, 550, 291, 393, 2845, 428, 1908, 2141, 281, 264, 661, 1252, 11, 264, 661, 1252], "temperature": 0.0, "avg_logprob": -0.3041128229211878, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.0008515028166584671}, {"id": 156, "seek": 79736, "start": 819.8000000000001, "end": 822.6800000000001, "text": " will encapsulate, how would the other side do that?", "tokens": [486, 38745, 5256, 11, 577, 576, 264, 661, 1252, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.3041128229211878, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.0008515028166584671}, {"id": 157, "seek": 82268, "start": 822.68, "end": 831.88, "text": " It would just generate a keeper for DFIRMAN, compute the DFIRMAN, and then hash it with", "tokens": [467, 576, 445, 8460, 257, 38709, 337, 48336, 7740, 11866, 11, 14722, 264, 48336, 7740, 11866, 11, 293, 550, 22019, 309, 365], "temperature": 0.0, "avg_logprob": -0.24684906005859375, "compression_ratio": 1.5255813953488373, "no_speech_prob": 0.0005365543765947223}, {"id": 158, "seek": 82268, "start": 831.88, "end": 838.92, "text": " the transcript of the exchange, and send back its public key to the other side.", "tokens": [264, 24444, 295, 264, 7742, 11, 293, 2845, 646, 1080, 1908, 2141, 281, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.24684906005859375, "compression_ratio": 1.5255813953488373, "no_speech_prob": 0.0005365543765947223}, {"id": 159, "seek": 82268, "start": 838.92, "end": 844.2399999999999, "text": " So the encapsulation is quite obvious, same thing on the other side.", "tokens": [407, 264, 38745, 2776, 307, 1596, 6322, 11, 912, 551, 322, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.24684906005859375, "compression_ratio": 1.5255813953488373, "no_speech_prob": 0.0005365543765947223}, {"id": 160, "seek": 82268, "start": 844.2399999999999, "end": 848.28, "text": " And then we combine two or more occurrences together, so one we just built from a classical", "tokens": [400, 550, 321, 10432, 732, 420, 544, 5160, 38983, 1214, 11, 370, 472, 321, 445, 3094, 490, 257, 13735], "temperature": 0.0, "avg_logprob": -0.24684906005859375, "compression_ratio": 1.5255813953488373, "no_speech_prob": 0.0005365543765947223}, {"id": 161, "seek": 84828, "start": 848.28, "end": 853.12, "text": " DFIRMAN or electrical DFIRMAN, with a post quantum one.", "tokens": [48336, 7740, 11866, 420, 12147, 48336, 7740, 11866, 11, 365, 257, 2183, 13018, 472, 13], "temperature": 0.0, "avg_logprob": -0.2727579689025879, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.0010158763034269214}, {"id": 162, "seek": 84828, "start": 853.12, "end": 864.0, "text": " So this way of doing it has been published by Nina Binder, a few years ago, so it's", "tokens": [407, 341, 636, 295, 884, 309, 575, 668, 6572, 538, 29204, 363, 5669, 11, 257, 1326, 924, 2057, 11, 370, 309, 311], "temperature": 0.0, "avg_logprob": -0.2727579689025879, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.0010158763034269214}, {"id": 163, "seek": 84828, "start": 864.0, "end": 867.9599999999999, "text": " a bit convoluted, but if you want more details on why we are doing this, I encourage you", "tokens": [257, 857, 3754, 2308, 292, 11, 457, 498, 291, 528, 544, 4365, 322, 983, 321, 366, 884, 341, 11, 286, 5373, 291], "temperature": 0.0, "avg_logprob": -0.2727579689025879, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.0010158763034269214}, {"id": 164, "seek": 84828, "start": 867.9599999999999, "end": 870.76, "text": " to read the paper, it's quite interesting.", "tokens": [281, 1401, 264, 3035, 11, 309, 311, 1596, 1880, 13], "temperature": 0.0, "avg_logprob": -0.2727579689025879, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.0010158763034269214}, {"id": 165, "seek": 84828, "start": 870.76, "end": 875.9599999999999, "text": " So basically what you do, you generate the keeper, you generate keeper for sets of algorithm,", "tokens": [407, 1936, 437, 291, 360, 11, 291, 8460, 264, 38709, 11, 291, 8460, 38709, 337, 6352, 295, 9284, 11], "temperature": 0.0, "avg_logprob": -0.2727579689025879, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.0010158763034269214}, {"id": 166, "seek": 87596, "start": 875.96, "end": 881.84, "text": " in my example there, it's only two, but you can do more of that, and send concatenated", "tokens": [294, 452, 1365, 456, 11, 309, 311, 787, 732, 11, 457, 291, 393, 360, 544, 295, 300, 11, 293, 2845, 1588, 7186, 770], "temperature": 0.0, "avg_logprob": -0.261446802239669, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.00025337206898257136}, {"id": 167, "seek": 87596, "start": 881.84, "end": 886.2, "text": " both public keys or all the public keys to the other side.", "tokens": [1293, 1908, 9317, 420, 439, 264, 1908, 9317, 281, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.261446802239669, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.00025337206898257136}, {"id": 168, "seek": 87596, "start": 886.2, "end": 892.72, "text": " The encapsulation would just split your public keys to retrieve the individual ones, and", "tokens": [440, 38745, 2776, 576, 445, 7472, 428, 1908, 9317, 281, 30254, 264, 2609, 2306, 11, 293], "temperature": 0.0, "avg_logprob": -0.261446802239669, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.00025337206898257136}, {"id": 169, "seek": 87596, "start": 892.72, "end": 898.0400000000001, "text": " perform the encapsulations on all the components.", "tokens": [2042, 264, 38745, 4136, 322, 439, 264, 6677, 13], "temperature": 0.0, "avg_logprob": -0.261446802239669, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.00025337206898257136}, {"id": 170, "seek": 87596, "start": 898.0400000000001, "end": 904.32, "text": " Then you use HMAC to combine your results, chaining it, so first you combine key one and", "tokens": [1396, 291, 764, 389, 44, 4378, 281, 10432, 428, 3542, 11, 417, 3686, 309, 11, 370, 700, 291, 10432, 2141, 472, 293], "temperature": 0.0, "avg_logprob": -0.261446802239669, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.00025337206898257136}, {"id": 171, "seek": 90432, "start": 904.32, "end": 910.6, "text": " then key two, and you can add several layers there, and the final step is to use the transcript", "tokens": [550, 2141, 732, 11, 293, 291, 393, 909, 2940, 7914, 456, 11, 293, 264, 2572, 1823, 307, 281, 764, 264, 24444], "temperature": 0.0, "avg_logprob": -0.2559345976947105, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.0002838976797647774}, {"id": 172, "seek": 90432, "start": 910.6, "end": 917.88, "text": " of all the public keys you received, and the encapsulation is obviously completely symmetric.", "tokens": [295, 439, 264, 1908, 9317, 291, 4613, 11, 293, 264, 38745, 2776, 307, 2745, 2584, 32330, 13], "temperature": 0.0, "avg_logprob": -0.2559345976947105, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.0002838976797647774}, {"id": 173, "seek": 90432, "start": 917.88, "end": 923.0400000000001, "text": " The paper from Nina Binder is quite clear on why these steps are needed, I have no time", "tokens": [440, 3035, 490, 29204, 363, 5669, 307, 1596, 1850, 322, 983, 613, 4439, 366, 2978, 11, 286, 362, 572, 565], "temperature": 0.0, "avg_logprob": -0.2559345976947105, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.0002838976797647774}, {"id": 174, "seek": 90432, "start": 923.0400000000001, "end": 927.24, "text": " to explain it here.", "tokens": [281, 2903, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.2559345976947105, "compression_ratio": 1.5076142131979695, "no_speech_prob": 0.0002838976797647774}, {"id": 175, "seek": 92724, "start": 927.24, "end": 936.92, "text": " Two more words, we also tweak the protocol packets, because in the D-Filman form, the", "tokens": [4453, 544, 2283, 11, 321, 611, 29879, 264, 10336, 30364, 11, 570, 294, 264, 413, 12, 39933, 1601, 1254, 11, 264], "temperature": 0.0, "avg_logprob": -0.3095826235684482, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0008360461797565222}, {"id": 176, "seek": 92724, "start": 936.92, "end": 943.24, "text": " maximum size you can get is around a few hundred bytes, but if you start using Kyber, for example,", "tokens": [6674, 2744, 291, 393, 483, 307, 926, 257, 1326, 3262, 36088, 11, 457, 498, 291, 722, 1228, 12237, 607, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.3095826235684482, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0008360461797565222}, {"id": 177, "seek": 92724, "start": 943.24, "end": 949.6, "text": " or HQC, the one you will use, you'll reach several kilobytes, and several kilobytes you", "tokens": [420, 43209, 34, 11, 264, 472, 291, 486, 764, 11, 291, 603, 2524, 2940, 5128, 996, 43673, 11, 293, 2940, 5128, 996, 43673, 291], "temperature": 0.0, "avg_logprob": -0.3095826235684482, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0008360461797565222}, {"id": 178, "seek": 92724, "start": 949.6, "end": 955.6800000000001, "text": " cannot send in one datagram over UDP, it's not possible, you probably won't arrive.", "tokens": [2644, 2845, 294, 472, 1137, 3914, 670, 624, 11373, 11, 309, 311, 406, 1944, 11, 291, 1391, 1582, 380, 8881, 13], "temperature": 0.0, "avg_logprob": -0.3095826235684482, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0008360461797565222}, {"id": 179, "seek": 95568, "start": 955.68, "end": 963.92, "text": " So what we have to add is a way of fragment the RTP packet, so it's kind of classical", "tokens": [407, 437, 321, 362, 281, 909, 307, 257, 636, 295, 26424, 264, 497, 16804, 20300, 11, 370, 309, 311, 733, 295, 13735], "temperature": 0.0, "avg_logprob": -0.22044868054597275, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.00014284762437455356}, {"id": 180, "seek": 95568, "start": 963.92, "end": 972.8399999999999, "text": " way, just as DTLS is doing it, or other protocols using UDP, the only thing is that we made", "tokens": [636, 11, 445, 382, 413, 51, 19198, 307, 884, 309, 11, 420, 661, 20618, 1228, 624, 11373, 11, 264, 787, 551, 307, 300, 321, 1027], "temperature": 0.0, "avg_logprob": -0.22044868054597275, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.00014284762437455356}, {"id": 181, "seek": 95568, "start": 972.8399999999999, "end": 979.16, "text": " it in a way that packets are not fragmented, and the header is modified, but if it's not", "tokens": [309, 294, 257, 636, 300, 30364, 366, 406, 9241, 14684, 11, 293, 264, 23117, 307, 15873, 11, 457, 498, 309, 311, 406], "temperature": 0.0, "avg_logprob": -0.22044868054597275, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.00014284762437455356}, {"id": 182, "seek": 95568, "start": 979.16, "end": 983.8399999999999, "text": " needed, the packet remains exactly the same as the old packet.", "tokens": [2978, 11, 264, 20300, 7023, 2293, 264, 912, 382, 264, 1331, 20300, 13], "temperature": 0.0, "avg_logprob": -0.22044868054597275, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.00014284762437455356}, {"id": 183, "seek": 98384, "start": 983.84, "end": 988.88, "text": " The objective in this was to be able to start deploying the new ration of the RTP, but still", "tokens": [440, 10024, 294, 341, 390, 281, 312, 1075, 281, 722, 34198, 264, 777, 24258, 295, 264, 497, 16804, 11, 457, 920], "temperature": 0.0, "avg_logprob": -0.2731388182867141, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.0004795013228431344}, {"id": 184, "seek": 98384, "start": 988.88, "end": 993.0, "text": " keep compatibility with the old one, old deployment.", "tokens": [1066, 34237, 365, 264, 1331, 472, 11, 1331, 19317, 13], "temperature": 0.0, "avg_logprob": -0.2731388182867141, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.0004795013228431344}, {"id": 185, "seek": 98384, "start": 993.0, "end": 1000.2, "text": " So how it's done, in the end, we use crypto libraries LibOQS, which is from the open quantum", "tokens": [407, 577, 309, 311, 1096, 11, 294, 264, 917, 11, 321, 764, 17240, 15148, 15834, 46, 48, 50, 11, 597, 307, 490, 264, 1269, 13018], "temperature": 0.0, "avg_logprob": -0.2731388182867141, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.0004795013228431344}, {"id": 186, "seek": 98384, "start": 1000.2, "end": 1005.9200000000001, "text": " safe project, which basically collects all the NIST candidates, and Kyber also, which", "tokens": [3273, 1716, 11, 597, 1936, 39897, 439, 264, 426, 19756, 11255, 11, 293, 12237, 607, 611, 11, 597], "temperature": 0.0, "avg_logprob": -0.2731388182867141, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.0004795013228431344}, {"id": 187, "seek": 100592, "start": 1005.92, "end": 1014.76, "text": " is a normal candidate, in a convenient way, and we use LibDecaf and embed TLS for the", "tokens": [307, 257, 2710, 11532, 11, 294, 257, 10851, 636, 11, 293, 321, 764, 15834, 11089, 496, 69, 293, 12240, 314, 19198, 337, 264], "temperature": 0.0, "avg_logprob": -0.2684640999299934, "compression_ratio": 1.470873786407767, "no_speech_prob": 0.0001622764830244705}, {"id": 188, "seek": 100592, "start": 1014.76, "end": 1019.1999999999999, "text": " ECDH and HASHMAC functions that we need.", "tokens": [19081, 35, 39, 293, 389, 24036, 44, 4378, 6828, 300, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.2684640999299934, "compression_ratio": 1.470873786407767, "no_speech_prob": 0.0001622764830244705}, {"id": 189, "seek": 100592, "start": 1019.1999999999999, "end": 1028.56, "text": " So we packed it all in an independent module, so our RTP library will use this module, but", "tokens": [407, 321, 13265, 309, 439, 294, 364, 6695, 10088, 11, 370, 527, 497, 16804, 6405, 486, 764, 341, 10088, 11, 457], "temperature": 0.0, "avg_logprob": -0.2684640999299934, "compression_ratio": 1.470873786407767, "no_speech_prob": 0.0001622764830244705}, {"id": 190, "seek": 100592, "start": 1028.56, "end": 1034.04, "text": " it's completely independent actually from it, so if anyone wants to directly use this", "tokens": [309, 311, 2584, 6695, 767, 490, 309, 11, 370, 498, 2878, 2738, 281, 3838, 764, 341], "temperature": 0.0, "avg_logprob": -0.2684640999299934, "compression_ratio": 1.470873786407767, "no_speech_prob": 0.0001622764830244705}, {"id": 191, "seek": 103404, "start": 1034.04, "end": 1043.1599999999999, "text": " hybrid KM, mixing varieties of fast quantum and classic exchange, it's fully available.", "tokens": [13051, 591, 44, 11, 11983, 22092, 295, 2370, 13018, 293, 7230, 7742, 11, 309, 311, 4498, 2435, 13], "temperature": 0.0, "avg_logprob": -0.42666617592612466, "compression_ratio": 1.508695652173913, "no_speech_prob": 0.0002602684835437685}, {"id": 192, "seek": 103404, "start": 1043.1599999999999, "end": 1049.24, "text": " You can combine it with more than two KMs, as it was printed, it's written in C++.", "tokens": [509, 393, 10432, 309, 365, 544, 813, 732, 591, 26386, 11, 382, 309, 390, 13567, 11, 309, 311, 3720, 294, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.42666617592612466, "compression_ratio": 1.508695652173913, "no_speech_prob": 0.0002602684835437685}, {"id": 193, "seek": 103404, "start": 1049.24, "end": 1055.96, "text": " And in our RTP implementation, we deployed it with some already preset combination, so", "tokens": [400, 294, 527, 497, 16804, 11420, 11, 321, 17826, 309, 365, 512, 1217, 32081, 6562, 11, 370], "temperature": 0.0, "avg_logprob": -0.42666617592612466, "compression_ratio": 1.508695652173913, "no_speech_prob": 0.0002602684835437685}, {"id": 194, "seek": 103404, "start": 1055.96, "end": 1063.36, "text": " we have X, well, we can see them, and we try to mix algorithms with more or less the same", "tokens": [321, 362, 1783, 11, 731, 11, 321, 393, 536, 552, 11, 293, 321, 853, 281, 2890, 14642, 365, 544, 420, 1570, 264, 912], "temperature": 0.0, "avg_logprob": -0.42666617592612466, "compression_ratio": 1.508695652173913, "no_speech_prob": 0.0002602684835437685}, {"id": 195, "seek": 106336, "start": 1063.36, "end": 1074.7199999999998, "text": " level of security, so mixing the Kyber 5012 with X250, this one.", "tokens": [1496, 295, 3825, 11, 370, 11983, 264, 12237, 607, 2625, 4762, 365, 1783, 23538, 11, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.28072357177734375, "compression_ratio": 1.39010989010989, "no_speech_prob": 0.0005900083342567086}, {"id": 196, "seek": 106336, "start": 1074.7199999999998, "end": 1079.1999999999998, "text": " And it is, as I said before, fully compatible with the order version, so the deployment", "tokens": [400, 309, 307, 11, 382, 286, 848, 949, 11, 4498, 18218, 365, 264, 1668, 3037, 11, 370, 264, 19317], "temperature": 0.0, "avg_logprob": -0.28072357177734375, "compression_ratio": 1.39010989010989, "no_speech_prob": 0.0005900083342567086}, {"id": 197, "seek": 106336, "start": 1079.1999999999998, "end": 1080.1999999999998, "text": " is progressive.", "tokens": [307, 16131, 13], "temperature": 0.0, "avg_logprob": -0.28072357177734375, "compression_ratio": 1.39010989010989, "no_speech_prob": 0.0005900083342567086}, {"id": 198, "seek": 106336, "start": 1080.1999999999998, "end": 1087.56, "text": " It's basically in the agreement phase at the beginning, if most parties support this", "tokens": [467, 311, 1936, 294, 264, 8106, 5574, 412, 264, 2863, 11, 498, 881, 8265, 1406, 341], "temperature": 0.0, "avg_logprob": -0.28072357177734375, "compression_ratio": 1.39010989010989, "no_speech_prob": 0.0005900083342567086}, {"id": 199, "seek": 108756, "start": 1087.56, "end": 1094.04, "text": " version of the RTP with this algorithm, they will use it, if one is old and don't support", "tokens": [3037, 295, 264, 497, 16804, 365, 341, 9284, 11, 436, 486, 764, 309, 11, 498, 472, 307, 1331, 293, 500, 380, 1406], "temperature": 0.0, "avg_logprob": -0.2239267671263063, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002643914194777608}, {"id": 200, "seek": 108756, "start": 1094.04, "end": 1101.76, "text": " it, they will just fall back on classical Diffilman or electrical Diffilman.", "tokens": [309, 11, 436, 486, 445, 2100, 646, 322, 13735, 413, 3661, 388, 1601, 420, 12147, 413, 3661, 388, 1601, 13], "temperature": 0.0, "avg_logprob": -0.2239267671263063, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002643914194777608}, {"id": 201, "seek": 108756, "start": 1101.76, "end": 1105.56, "text": " So just how it looks like.", "tokens": [407, 445, 577, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.2239267671263063, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002643914194777608}, {"id": 202, "seek": 108756, "start": 1105.56, "end": 1112.44, "text": " So first, you have the RTP and shake going, and the call is starting.", "tokens": [407, 700, 11, 291, 362, 264, 497, 16804, 293, 10283, 516, 11, 293, 264, 818, 307, 2891, 13], "temperature": 0.0, "avg_logprob": -0.2239267671263063, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002643914194777608}, {"id": 203, "seek": 111244, "start": 1112.44, "end": 1118.0, "text": " And once the call is started, if it's the first one, the two endpoints are calling each", "tokens": [400, 1564, 264, 818, 307, 1409, 11, 498, 309, 311, 264, 700, 472, 11, 264, 732, 917, 20552, 366, 5141, 1184], "temperature": 0.0, "avg_logprob": -0.2492088220887265, "compression_ratio": 1.7764227642276422, "no_speech_prob": 0.00019219038949813694}, {"id": 204, "seek": 111244, "start": 1118.0, "end": 1124.92, "text": " other, you will get a pop-up that asks you to confirm the security string, so most parties", "tokens": [661, 11, 291, 486, 483, 257, 1665, 12, 1010, 300, 8962, 291, 281, 9064, 264, 3825, 6798, 11, 370, 881, 8265], "temperature": 0.0, "avg_logprob": -0.2492088220887265, "compression_ratio": 1.7764227642276422, "no_speech_prob": 0.00019219038949813694}, {"id": 205, "seek": 111244, "start": 1124.92, "end": 1130.04, "text": " will just confirm it, if, well, they just say it on the phone, it's written like you", "tokens": [486, 445, 9064, 309, 11, 498, 11, 731, 11, 436, 445, 584, 309, 322, 264, 2593, 11, 309, 311, 3720, 411, 291], "temperature": 0.0, "avg_logprob": -0.2492088220887265, "compression_ratio": 1.7764227642276422, "no_speech_prob": 0.00019219038949813694}, {"id": 206, "seek": 111244, "start": 1130.04, "end": 1135.28, "text": " have to say this, the other one confirms, you said what it's expecting to say, and you", "tokens": [362, 281, 584, 341, 11, 264, 661, 472, 39982, 11, 291, 848, 437, 309, 311, 9650, 281, 584, 11, 293, 291], "temperature": 0.0, "avg_logprob": -0.2492088220887265, "compression_ratio": 1.7764227642276422, "no_speech_prob": 0.00019219038949813694}, {"id": 207, "seek": 111244, "start": 1135.28, "end": 1141.8400000000001, "text": " confirm it, then this will be saved in the RTP cage, and you will never be asked again", "tokens": [9064, 309, 11, 550, 341, 486, 312, 6624, 294, 264, 497, 16804, 17302, 11, 293, 291, 486, 1128, 312, 2351, 797], "temperature": 0.0, "avg_logprob": -0.2492088220887265, "compression_ratio": 1.7764227642276422, "no_speech_prob": 0.00019219038949813694}, {"id": 208, "seek": 114184, "start": 1141.84, "end": 1142.84, "text": " to do that.", "tokens": [281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 209, "seek": 114184, "start": 1142.84, "end": 1148.04, "text": " During, at any time during the call, you can check on the call start and see what kind", "tokens": [6842, 11, 412, 604, 565, 1830, 264, 818, 11, 291, 393, 1520, 322, 264, 818, 722, 293, 536, 437, 733], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 210, "seek": 114184, "start": 1148.04, "end": 1150.32, "text": " of algorithm you use to perform the exchange.", "tokens": [295, 9284, 291, 764, 281, 2042, 264, 7742, 13], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 211, "seek": 114184, "start": 1150.32, "end": 1156.8, "text": " So on this screenshot, you see that it was using Kiber 512 and X225519.", "tokens": [407, 322, 341, 27712, 11, 291, 536, 300, 309, 390, 1228, 591, 5331, 1025, 4762, 293, 1783, 17, 6074, 20, 3405, 13], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 212, "seek": 114184, "start": 1156.8, "end": 1163.36, "text": " Here are some links, just if some of you download the presentation, so once a live", "tokens": [1692, 366, 512, 6123, 11, 445, 498, 512, 295, 291, 5484, 264, 5860, 11, 370, 1564, 257, 1621], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 213, "seek": 114184, "start": 1163.36, "end": 1168.6799999999998, "text": " in-phone website, directly pointing to the GitLab where you can find the source code", "tokens": [294, 12, 4977, 3144, 11, 3838, 12166, 281, 264, 16939, 37880, 689, 291, 393, 915, 264, 4009, 3089], "temperature": 0.0, "avg_logprob": -0.33643304734002977, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.00015032583905849606}, {"id": 214, "seek": 116868, "start": 1168.68, "end": 1177.0, "text": " of both the RTP and our post-quantum crypto module, and to the publication from Niana", "tokens": [295, 1293, 264, 497, 16804, 293, 527, 2183, 12, 358, 394, 449, 17240, 10088, 11, 293, 281, 264, 19953, 490, 426, 8497], "temperature": 0.0, "avg_logprob": -0.3882948027716743, "compression_ratio": 1.430939226519337, "no_speech_prob": 0.0014072409830987453}, {"id": 215, "seek": 116868, "start": 1177.0, "end": 1181.4, "text": " Bindel explaining how to hybrid server curves.", "tokens": [363, 471, 338, 13468, 577, 281, 13051, 7154, 19490, 13], "temperature": 0.0, "avg_logprob": -0.3882948027716743, "compression_ratio": 1.430939226519337, "no_speech_prob": 0.0014072409830987453}, {"id": 216, "seek": 116868, "start": 1181.4, "end": 1192.72, "text": " Here we are, thank you for your attention.", "tokens": [1692, 321, 366, 11, 1309, 291, 337, 428, 3202, 13], "temperature": 0.0, "avg_logprob": -0.3882948027716743, "compression_ratio": 1.430939226519337, "no_speech_prob": 0.0014072409830987453}, {"id": 217, "seek": 116868, "start": 1192.72, "end": 1196.72, "text": " So we've got time for questions, and I've got one question on metrics, and there is", "tokens": [407, 321, 600, 658, 565, 337, 1651, 11, 293, 286, 600, 658, 472, 1168, 322, 16367, 11, 293, 456, 307], "temperature": 0.0, "avg_logprob": -0.3882948027716743, "compression_ratio": 1.430939226519337, "no_speech_prob": 0.0014072409830987453}, {"id": 218, "seek": 119672, "start": 1196.72, "end": 1201.72, "text": " a question, why post-quantum encryption is not enabled in the pre-compiled LinFone SDK?", "tokens": [257, 1168, 11, 983, 2183, 12, 358, 394, 449, 29575, 307, 406, 15172, 294, 264, 659, 12, 21541, 7292, 9355, 37, 546, 37135, 30], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 219, "seek": 119672, "start": 1201.72, "end": 1203.52, "text": " Sorry, I didn't.", "tokens": [4919, 11, 286, 994, 380, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 220, "seek": 119672, "start": 1203.52, "end": 1210.08, "text": " If, why the post-quantum encryption is not enabled in the pre-compiled LinFone SDK?", "tokens": [759, 11, 983, 264, 2183, 12, 358, 394, 449, 29575, 307, 406, 15172, 294, 264, 659, 12, 21541, 7292, 9355, 37, 546, 37135, 30], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 221, "seek": 119672, "start": 1210.08, "end": 1211.08, "text": " It is now.", "tokens": [467, 307, 586, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 222, "seek": 119672, "start": 1211.08, "end": 1212.08, "text": " It is now?", "tokens": [467, 307, 586, 30], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 223, "seek": 119672, "start": 1212.08, "end": 1213.08, "text": " It is now.", "tokens": [467, 307, 586, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 224, "seek": 119672, "start": 1213.08, "end": 1214.08, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 225, "seek": 119672, "start": 1214.08, "end": 1215.08, "text": " It is now.", "tokens": [467, 307, 586, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 226, "seek": 119672, "start": 1215.08, "end": 1216.08, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 227, "seek": 119672, "start": 1216.08, "end": 1217.08, "text": " Yes, sorry.", "tokens": [1079, 11, 2597, 13], "temperature": 0.0, "avg_logprob": -0.2810087203979492, "compression_ratio": 1.855072463768116, "no_speech_prob": 0.0034550894051790237}, {"id": 228, "seek": 121708, "start": 1217.08, "end": 1229.04, "text": " Hi, given that we're dealing with threat actors that might be capable of, you know, cracking", "tokens": [2421, 11, 2212, 300, 321, 434, 6260, 365, 4734, 10037, 300, 1062, 312, 8189, 295, 11, 291, 458, 11, 25229], "temperature": 0.0, "avg_logprob": -0.24104148585621904, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.0006158036412671208}, {"id": 229, "seek": 121708, "start": 1229.04, "end": 1234.96, "text": " quantum cryptography, okay, given that we're dealing with threat actors that might have", "tokens": [13018, 9844, 5820, 11, 1392, 11, 2212, 300, 321, 434, 6260, 365, 4734, 10037, 300, 1062, 362], "temperature": 0.0, "avg_logprob": -0.24104148585621904, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.0006158036412671208}, {"id": 230, "seek": 121708, "start": 1234.96, "end": 1241.28, "text": " a lot of resources, it seems like one particular attack vector might be to essentially use", "tokens": [257, 688, 295, 3593, 11, 309, 2544, 411, 472, 1729, 2690, 8062, 1062, 312, 281, 4476, 764], "temperature": 0.0, "avg_logprob": -0.24104148585621904, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.0006158036412671208}, {"id": 231, "seek": 121708, "start": 1241.28, "end": 1246.36, "text": " real-time deep-pick technology to intercept the vocal assay-ass comparison.", "tokens": [957, 12, 3766, 2452, 12, 79, 618, 2899, 281, 24700, 264, 11657, 1256, 320, 12, 640, 9660, 13], "temperature": 0.0, "avg_logprob": -0.24104148585621904, "compression_ratio": 1.743718592964824, "no_speech_prob": 0.0006158036412671208}, {"id": 232, "seek": 124636, "start": 1246.36, "end": 1250.28, "text": " Do you see any particular mitigation for an attack like that?", "tokens": [1144, 291, 536, 604, 1729, 32649, 337, 364, 2690, 411, 300, 30], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 233, "seek": 124636, "start": 1250.28, "end": 1256.04, "text": " Well, some kind of attack like this has been already studied and published, so basically", "tokens": [1042, 11, 512, 733, 295, 2690, 411, 341, 575, 668, 1217, 9454, 293, 6572, 11, 370, 1936], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 234, "seek": 124636, "start": 1256.04, "end": 1260.9199999999998, "text": " what came out of what I found is that it's kind of easy to synthesize, to use speech", "tokens": [437, 1361, 484, 295, 437, 286, 1352, 307, 300, 309, 311, 733, 295, 1858, 281, 26617, 1125, 11, 281, 764, 6218], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 235, "seek": 124636, "start": 1260.9199999999998, "end": 1263.4799999999998, "text": " synthesizer to synthesize the voice of someone else.", "tokens": [26617, 6545, 281, 26617, 1125, 264, 3177, 295, 1580, 1646, 13], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 236, "seek": 124636, "start": 1263.4799999999998, "end": 1268.32, "text": " The main problem there would be to insert the ass at the right moment in conversation", "tokens": [440, 2135, 1154, 456, 576, 312, 281, 8969, 264, 1256, 412, 264, 558, 1623, 294, 3761], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 237, "seek": 124636, "start": 1268.32, "end": 1273.12, "text": " without adding a huge daily in the conversation so that people won't be able to talk, basically,", "tokens": [1553, 5127, 257, 2603, 5212, 294, 264, 3761, 370, 300, 561, 1582, 380, 312, 1075, 281, 751, 11, 1936, 11], "temperature": 0.0, "avg_logprob": -0.24616866927963119, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.005477549508213997}, {"id": 238, "seek": 127312, "start": 1273.12, "end": 1278.0, "text": " if you had like two to three second delays because you have to analyze the signal and", "tokens": [498, 291, 632, 411, 732, 281, 1045, 1150, 28610, 570, 291, 362, 281, 12477, 264, 6358, 293], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 239, "seek": 127312, "start": 1278.0, "end": 1282.4399999999998, "text": " like buffer it to be able to insert back your ass.", "tokens": [411, 21762, 309, 281, 312, 1075, 281, 8969, 646, 428, 1256, 13], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 240, "seek": 127312, "start": 1282.4399999999998, "end": 1285.32, "text": " People won't talk with three seconds, three to four second delays, there is no way people", "tokens": [3432, 1582, 380, 751, 365, 1045, 3949, 11, 1045, 281, 1451, 1150, 28610, 11, 456, 307, 572, 636, 561], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 241, "seek": 127312, "start": 1285.32, "end": 1286.32, "text": " will be able to keep talking.", "tokens": [486, 312, 1075, 281, 1066, 1417, 13], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 242, "seek": 127312, "start": 1286.32, "end": 1287.32, "text": " I agree.", "tokens": [286, 3986, 13], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 243, "seek": 127312, "start": 1287.32, "end": 1290.76, "text": " I think it's going to be very difficult to do something like that in real-time, but", "tokens": [286, 519, 309, 311, 516, 281, 312, 588, 2252, 281, 360, 746, 411, 300, 294, 957, 12, 3766, 11, 457], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 244, "seek": 127312, "start": 1290.76, "end": 1295.8799999999999, "text": " I think that's probably, you know, because your solution looks really, really solid in", "tokens": [286, 519, 300, 311, 1391, 11, 291, 458, 11, 570, 428, 3827, 1542, 534, 11, 534, 5100, 294], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 245, "seek": 127312, "start": 1295.8799999999999, "end": 1299.52, "text": " terms of being able to fix it like that, so it looks like that might be one of the weaker", "tokens": [2115, 295, 885, 1075, 281, 3191, 309, 411, 300, 11, 370, 309, 1542, 411, 300, 1062, 312, 472, 295, 264, 24286], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 246, "seek": 127312, "start": 1299.52, "end": 1300.52, "text": " aspects of it.", "tokens": [7270, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 247, "seek": 127312, "start": 1300.52, "end": 1301.52, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.18897319662159887, "compression_ratio": 1.847972972972973, "no_speech_prob": 0.0028288369067013264}, {"id": 248, "seek": 130152, "start": 1301.52, "end": 1305.52, "text": " But since now I've been trying to monitor the publication on the subject and I never", "tokens": [583, 1670, 586, 286, 600, 668, 1382, 281, 6002, 264, 19953, 322, 264, 3983, 293, 286, 1128], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 249, "seek": 130152, "start": 1305.52, "end": 1311.76, "text": " found someone able to publish an actual attack on the RTP working really, so it might depend", "tokens": [1352, 1580, 1075, 281, 11374, 364, 3539, 2690, 322, 264, 497, 16804, 1364, 534, 11, 370, 309, 1062, 5672], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 250, "seek": 130152, "start": 1311.76, "end": 1312.76, "text": " on some point.", "tokens": [322, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 251, "seek": 130152, "start": 1312.76, "end": 1313.76, "text": " That's great.", "tokens": [663, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 252, "seek": 130152, "start": 1313.76, "end": 1314.76, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 253, "seek": 130152, "start": 1314.76, "end": 1322.6, "text": " Can we be quiet to a question, please?", "tokens": [1664, 321, 312, 5677, 281, 257, 1168, 11, 1767, 30], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 254, "seek": 130152, "start": 1322.6, "end": 1323.6, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 255, "seek": 130152, "start": 1323.6, "end": 1330.84, "text": " I think I missed it, but then in this particular method that you are doing, is it actually", "tokens": [286, 519, 286, 6721, 309, 11, 457, 550, 294, 341, 1729, 3170, 300, 291, 366, 884, 11, 307, 309, 767], "temperature": 0.0, "avg_logprob": -0.29052547532684947, "compression_ratio": 1.5169491525423728, "no_speech_prob": 0.0010736511321738362}, {"id": 256, "seek": 133084, "start": 1330.84, "end": 1336.9199999999998, "text": " trusting the middle server that you're using, or is it using keys from another like a phone", "tokens": [28235, 264, 2808, 7154, 300, 291, 434, 1228, 11, 420, 307, 309, 1228, 9317, 490, 1071, 411, 257, 2593], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 257, "seek": 133084, "start": 1336.9199999999998, "end": 1343.56, "text": " or something, SIP, assuming, is this running with the SIP protocol you said?", "tokens": [420, 746, 11, 318, 9139, 11, 11926, 11, 307, 341, 2614, 365, 264, 318, 9139, 10336, 291, 848, 30], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 258, "seek": 133084, "start": 1343.56, "end": 1344.56, "text": " I'm sorry.", "tokens": [286, 478, 2597, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 259, "seek": 133084, "start": 1344.56, "end": 1345.56, "text": " I cannot.", "tokens": [286, 2644, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 260, "seek": 133084, "start": 1345.56, "end": 1346.56, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 261, "seek": 133084, "start": 1346.56, "end": 1347.56, "text": " The sound is very low.", "tokens": [440, 1626, 307, 588, 2295, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 262, "seek": 133084, "start": 1347.56, "end": 1348.56, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 263, "seek": 133084, "start": 1348.56, "end": 1349.56, "text": " Better has.", "tokens": [15753, 575, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 264, "seek": 133084, "start": 1349.56, "end": 1350.56, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 265, "seek": 133084, "start": 1350.56, "end": 1358.1599999999999, "text": " So I wanted to ask if this was being used with a mobile phone to connect to the SIP server", "tokens": [407, 286, 1415, 281, 1029, 498, 341, 390, 885, 1143, 365, 257, 6013, 2593, 281, 1745, 281, 264, 318, 9139, 7154], "temperature": 0.0, "avg_logprob": -0.23388868165247648, "compression_ratio": 1.5296803652968036, "no_speech_prob": 0.0011498163221403956}, {"id": 266, "seek": 135816, "start": 1358.16, "end": 1361.3600000000001, "text": " and then use post-quantum cryptography as you demonstrate.", "tokens": [293, 550, 764, 2183, 12, 358, 394, 449, 9844, 5820, 382, 291, 11698, 13], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 267, "seek": 135816, "start": 1361.3600000000001, "end": 1364.3200000000002, "text": " Can you go back to the two slides before, please?", "tokens": [1664, 291, 352, 646, 281, 264, 732, 9788, 949, 11, 1767, 30], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 268, "seek": 135816, "start": 1364.3200000000002, "end": 1365.3200000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 269, "seek": 135816, "start": 1365.3200000000002, "end": 1366.3200000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 270, "seek": 135816, "start": 1366.3200000000002, "end": 1374.16, "text": " So the phone, is it actually trusting the server, which is running, or is it like the", "tokens": [407, 264, 2593, 11, 307, 309, 767, 28235, 264, 7154, 11, 597, 307, 2614, 11, 420, 307, 309, 411, 264], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 271, "seek": 135816, "start": 1374.16, "end": 1379.0800000000002, "text": " end-to-end, the actual key is being checked with the other host?", "tokens": [917, 12, 1353, 12, 521, 11, 264, 3539, 2141, 307, 885, 10033, 365, 264, 661, 3975, 30], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 272, "seek": 135816, "start": 1379.0800000000002, "end": 1380.0800000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 273, "seek": 135816, "start": 1380.0800000000002, "end": 1384.24, "text": " This is the main point of the RTP, that basically the idea is to not trust anyone, not your", "tokens": [639, 307, 264, 2135, 935, 295, 264, 497, 16804, 11, 300, 1936, 264, 1558, 307, 281, 406, 3361, 2878, 11, 406, 428], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 274, "seek": 135816, "start": 1384.24, "end": 1385.24, "text": " server.", "tokens": [7154, 13], "temperature": 0.0, "avg_logprob": -0.2637947386344977, "compression_ratio": 1.6180257510729614, "no_speech_prob": 0.0009871999500319362}, {"id": 275, "seek": 138524, "start": 1385.24, "end": 1389.76, "text": " The server will be in charge just of connecting the two phones, and then the media will go", "tokens": [440, 7154, 486, 312, 294, 4602, 445, 295, 11015, 264, 732, 10216, 11, 293, 550, 264, 3021, 486, 352], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 276, "seek": 138524, "start": 1389.76, "end": 1392.08, "text": " directly from one to the other one.", "tokens": [3838, 490, 472, 281, 264, 661, 472, 13], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 277, "seek": 138524, "start": 1392.08, "end": 1396.76, "text": " The media pass will go straight from one phone to another one, and it won't go through the", "tokens": [440, 3021, 1320, 486, 352, 2997, 490, 472, 2593, 281, 1071, 472, 11, 293, 309, 1582, 380, 352, 807, 264], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 278, "seek": 138524, "start": 1396.76, "end": 1397.76, "text": " server.", "tokens": [7154, 13], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 279, "seek": 138524, "start": 1397.76, "end": 1403.84, "text": " And that's why the RTP exchange is performed on the media pass and not on the SIP signaling", "tokens": [400, 300, 311, 983, 264, 497, 16804, 7742, 307, 10332, 322, 264, 3021, 1320, 293, 406, 322, 264, 318, 9139, 38639], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 280, "seek": 138524, "start": 1403.84, "end": 1405.84, "text": " pass.", "tokens": [1320, 13], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 281, "seek": 138524, "start": 1405.84, "end": 1409.6, "text": " When you establish your connection, actually, you'll go through ICE protocol, I don't know", "tokens": [1133, 291, 8327, 428, 4984, 11, 767, 11, 291, 603, 352, 807, 43337, 10336, 11, 286, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.2563632359014493, "compression_ratio": 1.7107438016528926, "no_speech_prob": 0.00031403786852024496}, {"id": 282, "seek": 140960, "start": 1409.6, "end": 1415.52, "text": " if you're familiar with that, which basically find a way to connect directly, because at", "tokens": [498, 291, 434, 4963, 365, 300, 11, 597, 1936, 915, 257, 636, 281, 1745, 3838, 11, 570, 412], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 283, "seek": 140960, "start": 1415.52, "end": 1420.1999999999998, "text": " the end, you don't want the media to be relayed, because you lose too much time, you have to", "tokens": [264, 917, 11, 291, 500, 380, 528, 264, 3021, 281, 312, 24214, 292, 11, 570, 291, 3624, 886, 709, 565, 11, 291, 362, 281], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 284, "seek": 140960, "start": 1420.1999999999998, "end": 1425.1599999999999, "text": " send media packets directly from one endpoint to the other endpoint.", "tokens": [2845, 3021, 30364, 3838, 490, 472, 35795, 281, 264, 661, 35795, 13], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 285, "seek": 140960, "start": 1425.1599999999999, "end": 1426.32, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 286, "seek": 140960, "start": 1426.32, "end": 1431.6, "text": " You said that you have to compare the SAS only once.", "tokens": [509, 848, 300, 291, 362, 281, 6794, 264, 33441, 787, 1564, 13], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 287, "seek": 140960, "start": 1431.6, "end": 1432.6, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 288, "seek": 140960, "start": 1432.6, "end": 1435.1599999999999, "text": " Is it once per phone or once per user?", "tokens": [1119, 309, 1564, 680, 2593, 420, 1564, 680, 4195, 30], "temperature": 0.0, "avg_logprob": -0.2387430469195048, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007884146762080491}, {"id": 289, "seek": 143516, "start": 1435.16, "end": 1444.1200000000001, "text": " It's one endpoint, basically, in each endpoint, you have a cache of previous, each time you", "tokens": [467, 311, 472, 35795, 11, 1936, 11, 294, 1184, 35795, 11, 291, 362, 257, 19459, 295, 3894, 11, 1184, 565, 291], "temperature": 0.0, "avg_logprob": -0.22596599209693172, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0002881185500882566}, {"id": 290, "seek": 143516, "start": 1444.1200000000001, "end": 1450.1200000000001, "text": " end the RTP exchange, you'll keep some shared secret that you'll use the next time.", "tokens": [917, 264, 497, 16804, 7742, 11, 291, 603, 1066, 512, 5507, 4054, 300, 291, 603, 764, 264, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.22596599209693172, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0002881185500882566}, {"id": 291, "seek": 143516, "start": 1450.1200000000001, "end": 1455.3600000000001, "text": " And so during the exchange, at some point, you will compare these shared secrets, and", "tokens": [400, 370, 1830, 264, 7742, 11, 412, 512, 935, 11, 291, 486, 6794, 613, 5507, 14093, 11, 293], "temperature": 0.0, "avg_logprob": -0.22596599209693172, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0002881185500882566}, {"id": 292, "seek": 143516, "start": 1455.3600000000001, "end": 1460.2, "text": " if they're the same, you'll use them to compute a SAS, which is always a verb, and you can", "tokens": [498, 436, 434, 264, 912, 11, 291, 603, 764, 552, 281, 14722, 257, 33441, 11, 597, 307, 1009, 257, 9595, 11, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.22596599209693172, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0002881185500882566}, {"id": 293, "seek": 146020, "start": 1460.2, "end": 1466.1200000000001, "text": " always ask to compare the SAS, but it won't pop, because the protocol will know that you", "tokens": [1009, 1029, 281, 6794, 264, 33441, 11, 457, 309, 1582, 380, 1665, 11, 570, 264, 10336, 486, 458, 300, 291], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 294, "seek": 146020, "start": 1466.1200000000001, "end": 1469.48, "text": " performed the exchange before, but it's just one phone to another phone, this cache is", "tokens": [10332, 264, 7742, 949, 11, 457, 309, 311, 445, 472, 2593, 281, 1071, 2593, 11, 341, 19459, 307], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 295, "seek": 146020, "start": 1469.48, "end": 1470.48, "text": " not shared.", "tokens": [406, 5507, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 296, "seek": 146020, "start": 1470.48, "end": 1471.48, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 297, "seek": 146020, "start": 1471.48, "end": 1475.16, "text": " So in practical terms, if I buy a new phone and then install the same app with the same", "tokens": [407, 294, 8496, 2115, 11, 498, 286, 2256, 257, 777, 2593, 293, 550, 3625, 264, 912, 724, 365, 264, 912], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 298, "seek": 146020, "start": 1475.16, "end": 1476.16, "text": " account, I have to do it.", "tokens": [2696, 11, 286, 362, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 299, "seek": 146020, "start": 1476.16, "end": 1477.16, "text": " You have to do it again.", "tokens": [509, 362, 281, 360, 309, 797, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 300, "seek": 146020, "start": 1477.16, "end": 1478.72, "text": " You have to do it again with all your correspondence.", "tokens": [509, 362, 281, 360, 309, 797, 365, 439, 428, 38135, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 301, "seek": 146020, "start": 1478.72, "end": 1479.72, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 302, "seek": 146020, "start": 1479.72, "end": 1480.72, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 303, "seek": 146020, "start": 1480.72, "end": 1484.4, "text": " We've got time for our last question.", "tokens": [492, 600, 658, 565, 337, 527, 1036, 1168, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 304, "seek": 146020, "start": 1484.4, "end": 1487.04, "text": " Is there any other last question?", "tokens": [1119, 456, 604, 661, 1036, 1168, 30], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 305, "seek": 146020, "start": 1487.04, "end": 1489.44, "text": " If not, thank you for your call.", "tokens": [759, 406, 11, 1309, 291, 337, 428, 818, 13], "temperature": 0.0, "avg_logprob": -0.24566180085482664, "compression_ratio": 1.7353951890034365, "no_speech_prob": 0.00016582848911639303}, {"id": 306, "seek": 148944, "start": 1489.44, "end": 1490.44, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.528359317779541, "compression_ratio": 0.6666666666666666, "no_speech_prob": 0.0001853969442890957}, {"id": 307, "seek": 149044, "start": 1490.44, "end": 1519.44, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 51814], "temperature": 0.0, "avg_logprob": -0.7380598386128744, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.00021770107559859753}], "language": "en"}