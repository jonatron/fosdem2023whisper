{"text": " So, this presentation I will try to show you the project, what's the current state, the features, most used plugins and which are the main features. Okay, so first of all, a quick presentation, I'm Sergei Alvarez, everybody knows me by my nickname, which is Pancake, I'm the author of the tool, I live in Barcelona and I work at Now Secure, which is a company from US, which we basically use different static and dynamic instrumentation tools for analyzing applications and find out privacy issues, like identifying if the application is leaking data, stuff like that, and then generate some reports for the customers and developers to improve the quality of the applications. So I work as a senior mobile security analyst, I like command line tools, I like command text interfaces, I brought many open source software, so my first goal is basically publishing all the stuff that I'm doing, so I like free software, and I'm maintaining the whole R2 ecosystem nowadays, so I'm basically focusing on R2, but I also maintain R2-Quitra, R2-Frida and many other plugins that work with R2. We'll have to reduce the font size here, this slide is a little bit. So it's a 17-year-old project, so I started this tool basically as a forensic tool, I wanted to recover some files that are lost in a hard drive. The thing is that I was working as a forensic analyst, but I was not going to use the private software that was in the company, so I wrote a simple hexadecimal editor that was able to find some patterns in the disk, and then dump like a one megabyte from there. After this I was interested in participating in CTF and different competitions for reverse engineering, and I found out that there were so many tools that didn't really solve my problems, so starting by, for example, GDB, it was not possible to script it at the time and typing comments all the time, it was kind of tedious, and I just wanted to automate many things. Also, there was hexadecimal editors, but it was not possible to extend them with plugins or anything like this, and there was like disassemblers, but Object Dump is cool, but it's not interactive, and the only interactive tool was private, which is IDA, and anyway, there was no real ecosystem for open source to solve any of these problems at once. And there were so many little tools that were solving one problem, but not really being able to integrate with the rest of the ecosystem or other tools. So I decided to start picking ideas, picking tools, developing everything from scratch, that's why I did R2, because R2 is not depending on anything, so you can, you only depend on the postics like Slipsy, and all the rest of dependencies are written from scratch, like console handling, read line interface, all the socket interface, parsing libraries, disassembling things, etc. It's licensed under LGPL3, and yeah, I mean, the focus of the project is basically to read other tools and be useful for hackers. It's not going to be a general proposed solution for all the problems, because for example, I don't plan to write like disassemblers from scratch, I think that there are better projects for this, so I'm integrating them into R2. Same goes for like Lipoak, it's one of the tools that is able to use R2. It's fully written in C, I mainly focus on portability because I like the things that I write to run everywhere. So the only option nowadays is C, I mean, there is some rast haters around that, anyway. The thing is that R2 can be run, can be compiled into WebAssembly, so you can run R2 inside your browser, you can also build it in a statical link at single binary, so you can drop it in a router. This year I plan to port it to a UFE, so you can run R2 inside your bootloader, and then you can use an independent operating system to use R2, mount file systems, and things like that. So there is some really high constraints on all the code that are shipping R2, so there is like a CI that is basically verifying everything, there is like a 24-7 fuzzer that is running and finding bugs and fixing them, so my policies, I don't let bugs stay for more than one day. So the code cannot contain like setJAMP, or Abort, or Asserts, or anything like this, because if you are doing something in hot, you don't want things to crash or to break. So the idea is that all the code that is running in R2 must be used from a library, so I don't want to use like double variables, I don't want to depend on something that, if it's not parsing properly, I don't want to crash, I want the, if the Moloch is failing, I want the program to still run, things like this. So this is the main concern that I have when I write code for R2. It's developing a single repo, but it's separated in different models, so it's like a big project in one repository, but there is like a bunch of libraries, each library has like a bunch of plugins, and many of these plugins are integrated or exposed, interfaces for extending it with scripting languages. So at the end is basically like a different layers of capabilities that can be extended pretty easily at different layers. So there is like a common line interface, so you have like a prompt, you can type things, there is like a visual mode, which is basically a list of comments that you execute every time that you press a key, and then you have the panels mode, which is like you can make splits, you can have like different tabs, you can have like different frames and so on, and then there is web interfaces, there is some people writing graphical interfaces for it, like Yaito, which is the Qt interface for it. For scripting, the easiest way for scripting R2 is Ertopipe, which is basically the simplest interface for interfacing with anything, which is basically you run something, you pass a string with a comment, and then you get the output of the comment as a string, but there is also bindings for the CAPI, there's automated bindings for Python, for Rust, etc. And there is also support for using these bindings from different scripting languages. So what are the libraries implementing or exposing? So you have the IO library, which is basically abstracting the access to the IO, this basically defines how you access like a file, everything is abstract, this means that a file doesn't need to be anything physical, there is support, I mean you cannot map like a full file in memory and then work on it because this is abstracted by the IO. So you can map like a remote file in a running in a remote instance of R2, so you can run R2 as an instance, and then you can map for example like a ptrace backend, which is basically reading and writing memory from another process, and this is like another IO interface, and all that stuff is just the file descriptor. So when you have like one IO open, then you can map this file descriptor into separate maps, a map is basically a portion of the memory taken from the file descriptor, so you say that from this offset to this offset from this file descriptor will be mapped in this virtual address in the IO space of R2, and then there are IO banks, and IO banks are basically a bunch of maps, so you can have like separate memory spaces, like for example you want to relate like a thread local stretch, you can have like one IO space that only contains the contents of the thread local stretch, but then there is like another bank that contains all the memory layout of the processing memory, and you can do that just by typing comments, you can do this also by using the API, but anyway, it's also possible to create like SQL memory maps, memory layouts, for example B850 is like an architecture that is used for automobiles and things like that, and this architecture basically relies on having like some solid infrastructure, so you see there is some models that have like two CPUs executing the same code at the same time, and there is like a verification that two CPUs are doing exactly the same at runtime, and the memory of this CPU is basically SQL, so there is some references that are going backward, so you have like one instruction at the zero address that is referencing something up, and this something up is basically going to the negative of other space, and this negative other space is not 32-bit in size, it's 26 for example, so you can basically configure this kind of things inside the R2, and you can basically get emulation, all the flags which are basically naming offsets in all these things and everything will be shaped properly, you can also define bit sizes memory spaces like 7-bit bytes and things like this, it's also able to pass binary formats, this works on any of the memory like I have said before, so you can pass from memory, you can pass from disk, there is support for the most known well-filed formats from console, binary, ROM, headers like Gameboy etc, but there is also for LFP, Makrokov etc, it's also parsing Dwarf, PDB and other debug information, this is only for getting like address of memory, making like a file name and so on, it's not really exporting all the structures and so on, but it's also possible to do that in the future, or using several libraries, it's also parsing like class information from SWIFT, Objective C or C++ binaries, and all that stuff is integrated inside the R2, so you can, it's subtracting all the information from all these final formats into single naming, so for example, imports in a PE is not the same as like an import in ELF, but for R2 is the same, so when you want to list what a binary is importing from other libraries, you can just use give me the imports, you don't have to use like different APIs or different comments depending on the file format, so it's unifying all the formats into a single naming, it's also supporting assembling and assembling, it's using like one API, so there is like a library that exposes an interface for doing this, and this library exposes plugins, so there's like plugins that are used by this API, and then you can basically implement like new architectures, like writing plugins for this library, but it's not only used for assembling and disassembling, which is basically text bytes, there is more low level detailed information, like you can, for some architectures you can get like a structure metadata, like which is the first operand, which is the size of the second argument, things like this, but it's also exposing a seal, a seal is like a very simple text interface for explaining what an instruction is doing at low level, it's kind of, it's very similar to fourth, like a stack based machine, and it's basically one statement separated by GOMA, so you have like O, GOMA, AX, GOMA equals, means that it will be pushing the number, then pushing the register name, and then pushing the operation, which is the equal, and then popping up from the operation to execute the statement. The reason for that is because there is so many ways to extend or to define an architecture, and there is some really fucked up things that can be done in so many architectures, so I was not going to define like extensible structures or doing some really complex things, because at the end I was always finding like something that was not compatible with another architecture, and I end up like saying, okay, I just can define like a comma separated string that it's just located in a single memory chunk, and I can just split it by comma and then emulate that. So there is a bunch of tools or libraries that can be, that are using a seal to extract this information, and then use that for emulation, use that for extracting information from a specific instruction, or even for the compiling. It's very portable, so it works on support debugging also, so you can do local and remote debugging. This means that you can run R2 as a local debugger in your Linux Mac or iOS device, but you can also attach to remote GDB or YDBG, et cetera. It's a functionality for searching for different patterns, so you can search for strings, access and model values, you can also find me something that is repeated multiple times, and then it will be finding like if there is any pattern that is repeated many times and give you the offset of these things, it's also able to generate function signatures, so by taking all the whole analysis for the program, it will identify all the functions, basic blocks, et cetera, and then you can generate like metadata for each of these functions, and this metadata can be imported again to search for this information in our binary. So you have like one binary with dwarf information, or the back symbols, then you can import this into a binary that is a stripet, and then you can basically identify these data structures or functions in another binary that is not containing this data. It's also possible to div code level, but you can also div data, you can find like using delta-diffing, so you have like two binaries that contain the same data, but in different offsets it will identify which offset is the stripet in the binary, and which is the main difference from that, it's not byte per byte level instruction checking. You can also div basic blocks, like you get the two control flow graphs, and then identifying which basic block is added, which removed, or if there is like a percentage of difference, so you can use that for bin-diffing, and you can also find differences like ABDIF for getting like there is new symbols removed, or things like that. I also took code from Grapp, a group, which is basically the bootloader, and I used that for parsing file systems, things that group is doing a lot of things for like assuming that the file system is correct, and R2 will never assume that anything is correct, so if there is like a corrupted file system I want to be able to mount it, so R2 is using this code basically for mounting file systems, you can have like a fake, or like a virtual file system interface in starter 2, and you can use that for mounting local or remote file systems. You can use R2-free, I will show that later, but I don't have time for showing it, but anyway, I will, you can use Freeda, which is like a tool for injecting code in remote applications, and you can use TCP or USB for communicating with that, and then Freeda can expose like an interface for accessing files remotely, so you can mount zips in a remote file system, extract the zip contents from one binary, pass the binary in local, mount that memory layout in local, and then whatever you would like to do with these things. Okay, obviously there is like a huge amount of things that can be done with that, so there is a need for a package manager. So I wrote R2-PM, it was like a 200 line shell script, so it's not really a big thing, but one year ago I decided to write it in C, so this way you can basically run the package manager anywhere, even in Windows, so it doesn't depend on anything that is not the same R2. So this package manager is basically pulling a zip repository, and this repository contains like scripts, and this script is basically defining a very simple way for installing and uninstalling, so it defines instructions for compiling and installing the plugin, and there is like basically a bunch of tools that are installed in your home, and also plugins that are loaded by R2. So the most common or most used plugins for R2 are, for example, about the compilers you have like R2-Dec, you have R2-Gidra, R2-Reddeck, so if you know Gidra for example, they provide like a compiler, there is like a part of the compiler which is written in C++, not in Java, and this code can be reused for writing at a compiler without depending on the whole Java thing, then there is Reddeck, which is the compiler based on LLVM and a bunch of parallel scripts that mess the thing, and they basically use the compiler toolchain to do the backward steps, to get from the binary disassembly to get like C like code for the compiling. Then you can also use the Aphora, there is support for signatures for IDA, there is like native signatures, there is like some repository of people writing this, and then there is support for Frida, if you know Frida, who knows Frida, where is your hand, okay, half of the room. Is that the compiler, right? No, Frida is a tool that basically injects code in a remote process, and then there is an agent that is running in a separate thread inside the process, so you can basically instrument the process at runtime, and you can basically inject JavaScript code or C or assembly inside the remote process and instrument that. You can use that for profiling, you can use that for modifying behavior, you can use that for tracing APIs, identifying when a specific function is called with some arguments, and then execute some code inside the remote process. Most people use JavaScript for doing this, but you can also use C with libgam or whatever, and yeah, we basically use that for dynamic instrumentation on iOS and Android applications. So you can use R2 Frida to have like a R2 interface for interfacing with Frida, which means that you don't need to type long JavaScript one-liners, you can also use R2 comments like which are pretty mnemonic and easy to type, if you know them, and there is also support for external assemblers like NuoGas or the Unicorn library, which is kind of like a stripping code from LVM, and there is also program solvers like Radius, SteelSol for Anger that are plugins that basically you define some constraints, you have like a function and you define, okay I want to know which are the arguments that I need to pass to this function to reach these specific others, like you want to know for example if it's possible to create like a buffer overflow in a specific variable in a local stack, or you want to define which, or you want to know which is the password that matches a specific crypto algorithm, so you can use that to define, okay, I want to know which is the amount, the block of bytes of one specific length that generate this hash, for example, things like that, and these won't be brute forcing, it's like using program solvers like Z3 and so on, so there is like different plugins that are integrated in R2 to use from R2 comments, and then you can define the preconditions, post-conditions, and the boundaries of the function to emulate. Then there is also support for parsing that structure, there is support for Kaitai, there is support for poke, this was integrated last week, because I didn't know it was possible to have like a library of poke, I was seeing it as a program, not a library, so it's integrated but it's not fully integrated, so I plan to continue integrating it to use like for disassembling, for parsing, headers, etc. So what can you do with R2 Frida? R2 Frida is basically, as I said before, it's front end for Frida, you can run scripts in your host, in your agent site, so you can write a JavaScript program that runs in R2, but it can be also loaded in the remote site, and you can load and unload plugins, so you can basically extend the R2 Frida comment set with JavaScript plugins that are loaded and unloaded at runtime. It's also scriptable with R2 Pipe, so you can write a program in Python, JavaScript, or the language you like, that interacts and automates comments and actions in the host site or the remote site of the Frida site. So you can spawn applications, you can attach to local remote processes, you can use different protocol or communication channels like USB, TCP, etc. You can remote the file systems, you can use that for interfacing with tracing APIs, profiling, and also supports extracting metadata from Java, Dalvik, Objective-C, and Swift support will be ready by the end of this year, because right now it's supported, but it's kind of like unstable, and the API is changing, so yeah, sort of like it will get better. So let's talk about R2 Pipe. Once the release, well, the first release that they did this year was the 5.8.0, I planned to keep ABA stable, actually I use ABDF in the CI, so every comment or pull request that people send to the project, they verify that it's ABA stable. This means that I'm not breaking the ABI, you can rebuild or update R2 without recompiling all the plugins or the tools that are using R2 libraries. This is pretty cool, and the thing is that I was having some kind of contract with myself that I don't break ABI, but this is something that you end up doing Ruby when code by hand, and having a tool that can automate this is great. But I wanted to have a runtime, something that you can run from R2, like interpreter, that is not a custom language or external library that needs to be integrated and it's really big. I was experimenting for some time with different languages and realizing that QuickJS is the only option, so even Lua is using setjump, so you cannot compile with Lua as a WebAssembly plugin. Also, if you want to use setjump with threads, it's kind of a mess. So I ended up picking QuickJS, which is the same JavaScript runtime that Frida is using. I picked the code from there, and as long as every comment in R2 is verifying with fuzzers, other sanitizers, and so on, I end up finding a lot of issues there. I sent like 12 patches to the project, so it's basically the fork that is used by Frida. So all these patches are upstream now, and the idea is basically that you can use TypeScript and JavaScript from R2, and you can write code like this. So you basically have an R2 pipe interface, but it's running inside R2. You can use this from WebAssembly, so you can basically open R2.online, and then you have a terminal that you can run R2, drag and drop a binary inside the browser, and use JavaScript to automate a bunch of actions for organizing the binary. Basically as I said before, you have a command that you run, and then you get the output of the command in exchange. As long as most of the comments in R2 speed out JSON, you can basically use the cmdj, which basically get the output of the command and pass the output as JSON. And then you get like a structure data that you can use for extracting it or processing it with the tools you like. I think that JavaScript and JSON are quite standard and useful nowadays, so you don't need to learn new things, but there is support for so many other languages. Like I said here, there is Python, support, Rust, Node.js, Rabi, Guile, Nivellisp, Haskell, Dlang, Swift, etc. So it's very easy to write this simple interface, and you can use basically different interfaces to communicate with R2, so you can use like a fork and a pipe, or you can also use like a TCP socket or an HTTP interface, WebSockets, whatever you like. And for the TypeScript thing, it's pretty cool, because I'm writing like a Type description that basically defines the APIs of R2, and also the structures that the commands are returning in JSON format. This means that you can get the JSON of a command, and then you can generate a schema out of that. And this schema can be used like a Types. So if you use TypeScript, ListServer, like the language service that autocompletes all the code, you can basically use that for using Type to autocomplete all the code. So for example, you can analyze function, you press P dot I, and then you get all the function name, you can get all the basic blocks, for each basic block you can use Type to get all the fields of this basic block, like the address, the amount of instructions, etc. And for each instruction, you can get the mnemonics, etc. And everything runs. I mean, you can use, like, Visual Studio Code, or NLVM, or whatever you like, or MX, I guess, that's also Supercell SP, and use that for automating and scripting using these languages. So R2 is able to visualize data and code in so many different ways, so all this, I mean, I can press E, so you can get the source code of the slides. So you can see here, this is the contents of the slide. So it's running a bunch of comments in R2, and the output is generated inside the visual mode that you saw before. So you can generate graphs, you can, from the control flow graph, you can also generate like a vertical horizontal line graph, like frame things, you can disassemble, you can render pictures in bit formats, in RGB format. You can also generate, like, different, like, comparing data and identifying which bytes are changing, by changing colors, you can define, like, a color for a specific bunch of addresses. So when you are disassembling, you can mark some regions, like, hot code, or this is, like, a portion of code that you're interested, and then you get headlights for one specific register, so you want to highlight SP, and then you get SP highlighted in the whole disassembly, things like that. But also, there is also UIs, but I'm, like, common line guys, so I prefer to use the shell. But there is, like, a Qt interface, but also I started to write, like, a new graphic interface using WX Widgets, because, I mean, Qt is great, because it's big, and it solves so many things, but I don't like the license, it's so huge, it's getting, like, really huge, and it's not handy for the kind of things that I like to do, so when I'm developing, I like to have fun, and I don't want to be suffering because of license, or companies that are developing things in the background. So I wrote so many UIs for it, too, like, in GTK, in using InBlip, also other HTML, CSS, for the web UI, because I do have, like, a web server inside, so at the end, I want to have fun, and I don't want to spend time, like, learning new APIs, and so on. So I'm writing, like, a WX Widgets API, a user interface, and the idea for this is to not follow the same flow, interaction flows that people use. So I want to have, like, a common line interface, but integrated in the UI. So I want to be able to have multiple windows using multiple sessions, or drag and drop things from one window to another one, instead of having, like, a big thing with panels and the common interaction ways. So what's the future? So there are short and long-term plans. It all depends on my time, because most of the things are maintained or done by me. There is a lot of contributors, but they come and live, so there is, like, not really a core developer team, or there is no really big plans for having, like, big organizations, there is, and so on. But the thing is that I want to be able to keep patching, like, stable releases. I want to have, like, ABA stability, mainly because there is some people or companies or users that are writing tools on top of this, and I don't want them to rewrite things every time that I make a release or break without updating this. I want to have, like, a create, so which is a Rust API that you can basically specify the version of R2 that you want to ship, and then this create will build R2 inside with a specific version, and then you can use your R2 statically linked inside your program. So you don't need to depend on system installations or depend on other things like that. I want to basically reduce the tech depth, because as long as I'm alone doing most of the things, I don't want to depend on humans. So I want to reduce the amount of things that are done manually. So for example, a friend of me brought, like, the flatback integration, so there is, like, a bot that basically detects when there is, like, a new release in R2 or in Yaito, and when this happens, it's basically pulling the code from all the projects, generating a changelog, generating a new build, and publishing that automatically. And you basically get, like, a graphical interface for Linux and Windows for free. I want to improve the code coverage and all the testing for fuzzing, and, yeah, I mean, there is, like, a lot of things that you can see, and if you have questions, please let me know after the talk with some beers. And I guess that everyone is hungry, so... Thank you so much guys.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.92, "text": " So, this presentation I will try to show you the project, what's the current state, the", "tokens": [407, 11, 341, 5860, 286, 486, 853, 281, 855, 291, 264, 1716, 11, 437, 311, 264, 2190, 1785, 11, 264], "temperature": 0.0, "avg_logprob": -0.3093491250818426, "compression_ratio": 1.4976958525345623, "no_speech_prob": 0.08357267081737518}, {"id": 1, "seek": 0, "start": 10.92, "end": 14.92, "text": " features, most used plugins and which are the main features.", "tokens": [4122, 11, 881, 1143, 33759, 293, 597, 366, 264, 2135, 4122, 13], "temperature": 0.0, "avg_logprob": -0.3093491250818426, "compression_ratio": 1.4976958525345623, "no_speech_prob": 0.08357267081737518}, {"id": 2, "seek": 0, "start": 14.92, "end": 20.64, "text": " Okay, so first of all, a quick presentation, I'm Sergei Alvarez, everybody knows me by", "tokens": [1033, 11, 370, 700, 295, 439, 11, 257, 1702, 5860, 11, 286, 478, 18885, 72, 967, 85, 39948, 11, 2201, 3255, 385, 538], "temperature": 0.0, "avg_logprob": -0.3093491250818426, "compression_ratio": 1.4976958525345623, "no_speech_prob": 0.08357267081737518}, {"id": 3, "seek": 0, "start": 20.64, "end": 25.68, "text": " my nickname, which is Pancake, I'm the author of the tool, I live in Barcelona and I work", "tokens": [452, 21641, 11, 597, 307, 7557, 13994, 11, 286, 478, 264, 3793, 295, 264, 2290, 11, 286, 1621, 294, 21247, 293, 286, 589], "temperature": 0.0, "avg_logprob": -0.3093491250818426, "compression_ratio": 1.4976958525345623, "no_speech_prob": 0.08357267081737518}, {"id": 4, "seek": 2568, "start": 25.68, "end": 30.84, "text": " at Now Secure, which is a company from US, which we basically use different static and", "tokens": [412, 823, 3306, 540, 11, 597, 307, 257, 2237, 490, 2546, 11, 597, 321, 1936, 764, 819, 13437, 293], "temperature": 0.0, "avg_logprob": -0.17737924291732463, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.00037409347714856267}, {"id": 5, "seek": 2568, "start": 30.84, "end": 35.12, "text": " dynamic instrumentation tools for analyzing applications and find out privacy issues,", "tokens": [8546, 7198, 399, 3873, 337, 23663, 5821, 293, 915, 484, 11427, 2663, 11], "temperature": 0.0, "avg_logprob": -0.17737924291732463, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.00037409347714856267}, {"id": 6, "seek": 2568, "start": 35.12, "end": 39.6, "text": " like identifying if the application is leaking data, stuff like that, and then generate some", "tokens": [411, 16696, 498, 264, 3861, 307, 32856, 1412, 11, 1507, 411, 300, 11, 293, 550, 8460, 512], "temperature": 0.0, "avg_logprob": -0.17737924291732463, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.00037409347714856267}, {"id": 7, "seek": 2568, "start": 39.6, "end": 47.04, "text": " reports for the customers and developers to improve the quality of the applications.", "tokens": [7122, 337, 264, 4581, 293, 8849, 281, 3470, 264, 3125, 295, 264, 5821, 13], "temperature": 0.0, "avg_logprob": -0.17737924291732463, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.00037409347714856267}, {"id": 8, "seek": 2568, "start": 47.04, "end": 52.28, "text": " So I work as a senior mobile security analyst, I like command line tools, I like command", "tokens": [407, 286, 589, 382, 257, 7965, 6013, 3825, 19085, 11, 286, 411, 5622, 1622, 3873, 11, 286, 411, 5622], "temperature": 0.0, "avg_logprob": -0.17737924291732463, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.00037409347714856267}, {"id": 9, "seek": 5228, "start": 52.28, "end": 60.64, "text": " text interfaces, I brought many open source software, so my first goal is basically publishing", "tokens": [2487, 28416, 11, 286, 3038, 867, 1269, 4009, 4722, 11, 370, 452, 700, 3387, 307, 1936, 17832], "temperature": 0.0, "avg_logprob": -0.25195194112843483, "compression_ratio": 1.5314009661835748, "no_speech_prob": 0.0007491324213333428}, {"id": 10, "seek": 5228, "start": 60.64, "end": 67.4, "text": " all the stuff that I'm doing, so I like free software, and I'm maintaining the whole", "tokens": [439, 264, 1507, 300, 286, 478, 884, 11, 370, 286, 411, 1737, 4722, 11, 293, 286, 478, 14916, 264, 1379], "temperature": 0.0, "avg_logprob": -0.25195194112843483, "compression_ratio": 1.5314009661835748, "no_speech_prob": 0.0007491324213333428}, {"id": 11, "seek": 5228, "start": 67.4, "end": 73.76, "text": " R2 ecosystem nowadays, so I'm basically focusing on R2, but I also maintain R2-Quitra, R2-Frida", "tokens": [497, 17, 11311, 13434, 11, 370, 286, 478, 1936, 8416, 322, 497, 17, 11, 457, 286, 611, 6909, 497, 17, 12, 48, 1983, 424, 11, 497, 17, 12, 40305, 2887], "temperature": 0.0, "avg_logprob": -0.25195194112843483, "compression_ratio": 1.5314009661835748, "no_speech_prob": 0.0007491324213333428}, {"id": 12, "seek": 5228, "start": 73.76, "end": 76.6, "text": " and many other plugins that work with R2.", "tokens": [293, 867, 661, 33759, 300, 589, 365, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.25195194112843483, "compression_ratio": 1.5314009661835748, "no_speech_prob": 0.0007491324213333428}, {"id": 13, "seek": 7660, "start": 76.6, "end": 86.67999999999999, "text": " We'll have to reduce the font size here, this slide is a little bit.", "tokens": [492, 603, 362, 281, 5407, 264, 10703, 2744, 510, 11, 341, 4137, 307, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.1882576034182594, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.0011558800470083952}, {"id": 14, "seek": 7660, "start": 86.67999999999999, "end": 93.56, "text": " So it's a 17-year-old project, so I started this tool basically as a forensic tool, I", "tokens": [407, 309, 311, 257, 3282, 12, 5294, 12, 2641, 1716, 11, 370, 286, 1409, 341, 2290, 1936, 382, 257, 39084, 2290, 11, 286], "temperature": 0.0, "avg_logprob": -0.1882576034182594, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.0011558800470083952}, {"id": 15, "seek": 7660, "start": 93.56, "end": 98.44, "text": " wanted to recover some files that are lost in a hard drive.", "tokens": [1415, 281, 8114, 512, 7098, 300, 366, 2731, 294, 257, 1152, 3332, 13], "temperature": 0.0, "avg_logprob": -0.1882576034182594, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.0011558800470083952}, {"id": 16, "seek": 7660, "start": 98.44, "end": 104.16, "text": " The thing is that I was working as a forensic analyst, but I was not going to use the private", "tokens": [440, 551, 307, 300, 286, 390, 1364, 382, 257, 39084, 19085, 11, 457, 286, 390, 406, 516, 281, 764, 264, 4551], "temperature": 0.0, "avg_logprob": -0.1882576034182594, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.0011558800470083952}, {"id": 17, "seek": 10416, "start": 104.16, "end": 107.84, "text": " software that was in the company, so I wrote a simple hexadecimal editor that was able", "tokens": [4722, 300, 390, 294, 264, 2237, 11, 370, 286, 4114, 257, 2199, 23291, 762, 66, 10650, 9839, 300, 390, 1075], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 18, "seek": 10416, "start": 107.84, "end": 114.56, "text": " to find some patterns in the disk, and then dump like a one megabyte from there.", "tokens": [281, 915, 512, 8294, 294, 264, 12355, 11, 293, 550, 11430, 411, 257, 472, 10816, 34529, 490, 456, 13], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 19, "seek": 10416, "start": 114.56, "end": 119.12, "text": " After this I was interested in participating in CTF and different competitions for reverse", "tokens": [2381, 341, 286, 390, 3102, 294, 13950, 294, 19529, 37, 293, 819, 26185, 337, 9943], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 20, "seek": 10416, "start": 119.12, "end": 123.92, "text": " engineering, and I found out that there were so many tools that didn't really solve my", "tokens": [7043, 11, 293, 286, 1352, 484, 300, 456, 645, 370, 867, 3873, 300, 994, 380, 534, 5039, 452], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 21, "seek": 10416, "start": 123.92, "end": 128.28, "text": " problems, so starting by, for example, GDB, it was not possible to script it at the time", "tokens": [2740, 11, 370, 2891, 538, 11, 337, 1365, 11, 460, 27735, 11, 309, 390, 406, 1944, 281, 5755, 309, 412, 264, 565], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 22, "seek": 10416, "start": 128.28, "end": 132.4, "text": " and typing comments all the time, it was kind of tedious, and I just wanted to automate", "tokens": [293, 18444, 3053, 439, 264, 565, 11, 309, 390, 733, 295, 38284, 11, 293, 286, 445, 1415, 281, 31605], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 23, "seek": 10416, "start": 132.4, "end": 133.4, "text": " many things.", "tokens": [867, 721, 13], "temperature": 0.0, "avg_logprob": -0.21343244205821643, "compression_ratio": 1.70926517571885, "no_speech_prob": 0.00029860978247597814}, {"id": 24, "seek": 13340, "start": 133.4, "end": 136.84, "text": " Also, there was hexadecimal editors, but it was not possible to extend them with plugins", "tokens": [2743, 11, 456, 390, 23291, 762, 66, 10650, 31446, 11, 457, 309, 390, 406, 1944, 281, 10101, 552, 365, 33759], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 25, "seek": 13340, "start": 136.84, "end": 142.44, "text": " or anything like this, and there was like disassemblers, but Object Dump is cool, but", "tokens": [420, 1340, 411, 341, 11, 293, 456, 390, 411, 717, 29386, 11977, 11, 457, 24753, 413, 1420, 307, 1627, 11, 457], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 26, "seek": 13340, "start": 142.44, "end": 148.84, "text": " it's not interactive, and the only interactive tool was private, which is IDA, and anyway,", "tokens": [309, 311, 406, 15141, 11, 293, 264, 787, 15141, 2290, 390, 4551, 11, 597, 307, 7348, 32, 11, 293, 4033, 11], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 27, "seek": 13340, "start": 148.84, "end": 153.8, "text": " there was no real ecosystem for open source to solve any of these problems at once.", "tokens": [456, 390, 572, 957, 11311, 337, 1269, 4009, 281, 5039, 604, 295, 613, 2740, 412, 1564, 13], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 28, "seek": 13340, "start": 153.8, "end": 158.0, "text": " And there were so many little tools that were solving one problem, but not really being", "tokens": [400, 456, 645, 370, 867, 707, 3873, 300, 645, 12606, 472, 1154, 11, 457, 406, 534, 885], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 29, "seek": 13340, "start": 158.0, "end": 161.24, "text": " able to integrate with the rest of the ecosystem or other tools.", "tokens": [1075, 281, 13365, 365, 264, 1472, 295, 264, 11311, 420, 661, 3873, 13], "temperature": 0.0, "avg_logprob": -0.14982038978638687, "compression_ratio": 1.8455882352941178, "no_speech_prob": 0.0003613900626078248}, {"id": 30, "seek": 16124, "start": 161.24, "end": 165.56, "text": " So I decided to start picking ideas, picking tools, developing everything from scratch,", "tokens": [407, 286, 3047, 281, 722, 8867, 3487, 11, 8867, 3873, 11, 6416, 1203, 490, 8459, 11], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 31, "seek": 16124, "start": 165.56, "end": 169.96, "text": " that's why I did R2, because R2 is not depending on anything, so you can, you only depend on", "tokens": [300, 311, 983, 286, 630, 497, 17, 11, 570, 497, 17, 307, 406, 5413, 322, 1340, 11, 370, 291, 393, 11, 291, 787, 5672, 322], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 32, "seek": 16124, "start": 169.96, "end": 173.96, "text": " the postics like Slipsy, and all the rest of dependencies are written from scratch,", "tokens": [264, 2183, 1167, 411, 6187, 2600, 88, 11, 293, 439, 264, 1472, 295, 36606, 366, 3720, 490, 8459, 11], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 33, "seek": 16124, "start": 173.96, "end": 180.16000000000003, "text": " like console handling, read line interface, all the socket interface, parsing libraries,", "tokens": [411, 11076, 13175, 11, 1401, 1622, 9226, 11, 439, 264, 19741, 9226, 11, 21156, 278, 15148, 11], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 34, "seek": 16124, "start": 180.16000000000003, "end": 182.96, "text": " disassembling things, etc.", "tokens": [717, 29386, 1688, 721, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 35, "seek": 16124, "start": 182.96, "end": 190.36, "text": " It's licensed under LGPL3, and yeah, I mean, the focus of the project is basically to read", "tokens": [467, 311, 25225, 833, 25449, 21593, 18, 11, 293, 1338, 11, 286, 914, 11, 264, 1879, 295, 264, 1716, 307, 1936, 281, 1401], "temperature": 0.0, "avg_logprob": -0.24613110881206418, "compression_ratio": 1.6761565836298933, "no_speech_prob": 0.0006069043301977217}, {"id": 36, "seek": 19036, "start": 190.36, "end": 192.8, "text": " other tools and be useful for hackers.", "tokens": [661, 3873, 293, 312, 4420, 337, 39766, 13], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 37, "seek": 19036, "start": 192.8, "end": 198.36, "text": " It's not going to be a general proposed solution for all the problems, because for example,", "tokens": [467, 311, 406, 516, 281, 312, 257, 2674, 10348, 3827, 337, 439, 264, 2740, 11, 570, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 38, "seek": 19036, "start": 198.36, "end": 202.24, "text": " I don't plan to write like disassemblers from scratch, I think that there are better projects", "tokens": [286, 500, 380, 1393, 281, 2464, 411, 717, 29386, 11977, 490, 8459, 11, 286, 519, 300, 456, 366, 1101, 4455], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 39, "seek": 19036, "start": 202.24, "end": 205.52, "text": " for this, so I'm integrating them into R2.", "tokens": [337, 341, 11, 370, 286, 478, 26889, 552, 666, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 40, "seek": 19036, "start": 205.52, "end": 211.84, "text": " Same goes for like Lipoak, it's one of the tools that is able to use R2.", "tokens": [10635, 1709, 337, 411, 27475, 78, 514, 11, 309, 311, 472, 295, 264, 3873, 300, 307, 1075, 281, 764, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 41, "seek": 19036, "start": 211.84, "end": 216.36, "text": " It's fully written in C, I mainly focus on portability because I like the things that", "tokens": [467, 311, 4498, 3720, 294, 383, 11, 286, 8704, 1879, 322, 2436, 2310, 570, 286, 411, 264, 721, 300], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 42, "seek": 19036, "start": 216.36, "end": 218.36, "text": " I write to run everywhere.", "tokens": [286, 2464, 281, 1190, 5315, 13], "temperature": 0.0, "avg_logprob": -0.15496203938468558, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.0004909610142931342}, {"id": 43, "seek": 21836, "start": 218.36, "end": 225.60000000000002, "text": " So the only option nowadays is C, I mean, there is some rast haters around that, anyway.", "tokens": [407, 264, 787, 3614, 13434, 307, 383, 11, 286, 914, 11, 456, 307, 512, 367, 525, 43675, 926, 300, 11, 4033, 13], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 44, "seek": 21836, "start": 225.60000000000002, "end": 231.04000000000002, "text": " The thing is that R2 can be run, can be compiled into WebAssembly, so you can run R2 inside", "tokens": [440, 551, 307, 300, 497, 17, 393, 312, 1190, 11, 393, 312, 36548, 666, 9573, 10884, 19160, 11, 370, 291, 393, 1190, 497, 17, 1854], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 45, "seek": 21836, "start": 231.04000000000002, "end": 235.0, "text": " your browser, you can also build it in a statical link at single binary, so you can drop it", "tokens": [428, 11185, 11, 291, 393, 611, 1322, 309, 294, 257, 2219, 804, 2113, 412, 2167, 17434, 11, 370, 291, 393, 3270, 309], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 46, "seek": 21836, "start": 235.0, "end": 236.84, "text": " in a router.", "tokens": [294, 257, 22492, 13], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 47, "seek": 21836, "start": 236.84, "end": 241.52, "text": " This year I plan to port it to a UFE, so you can run R2 inside your bootloader, and then", "tokens": [639, 1064, 286, 1393, 281, 2436, 309, 281, 257, 624, 28182, 11, 370, 291, 393, 1190, 497, 17, 1854, 428, 11450, 2907, 260, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 48, "seek": 21836, "start": 241.52, "end": 245.8, "text": " you can use an independent operating system to use R2, mount file systems, and things", "tokens": [291, 393, 764, 364, 6695, 7447, 1185, 281, 764, 497, 17, 11, 3746, 3991, 3652, 11, 293, 721], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 49, "seek": 21836, "start": 245.8, "end": 247.44000000000003, "text": " like that.", "tokens": [411, 300, 13], "temperature": 0.0, "avg_logprob": -0.24222934947294347, "compression_ratio": 1.7444444444444445, "no_speech_prob": 0.00016832318215165287}, {"id": 50, "seek": 24744, "start": 247.44, "end": 252.68, "text": " So there is some really high constraints on all the code that are shipping R2, so there", "tokens": [407, 456, 307, 512, 534, 1090, 18491, 322, 439, 264, 3089, 300, 366, 14122, 497, 17, 11, 370, 456], "temperature": 0.0, "avg_logprob": -0.23638858609986538, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.00022545014508068562}, {"id": 51, "seek": 24744, "start": 252.68, "end": 257.36, "text": " is like a CI that is basically verifying everything, there is like a 24-7 fuzzer that", "tokens": [307, 411, 257, 37777, 300, 307, 1936, 1306, 5489, 1203, 11, 456, 307, 411, 257, 4022, 12, 22, 283, 3334, 4527, 300], "temperature": 0.0, "avg_logprob": -0.23638858609986538, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.00022545014508068562}, {"id": 52, "seek": 24744, "start": 257.36, "end": 262.44, "text": " is running and finding bugs and fixing them, so my policies, I don't let bugs stay for", "tokens": [307, 2614, 293, 5006, 15120, 293, 19442, 552, 11, 370, 452, 7657, 11, 286, 500, 380, 718, 15120, 1754, 337], "temperature": 0.0, "avg_logprob": -0.23638858609986538, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.00022545014508068562}, {"id": 53, "seek": 24744, "start": 262.44, "end": 265.56, "text": " more than one day.", "tokens": [544, 813, 472, 786, 13], "temperature": 0.0, "avg_logprob": -0.23638858609986538, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.00022545014508068562}, {"id": 54, "seek": 24744, "start": 265.56, "end": 271.24, "text": " So the code cannot contain like setJAMP, or Abort, or Asserts, or anything like this,", "tokens": [407, 264, 3089, 2644, 5304, 411, 992, 41, 2865, 47, 11, 420, 2847, 477, 11, 420, 6281, 911, 82, 11, 420, 1340, 411, 341, 11], "temperature": 0.0, "avg_logprob": -0.23638858609986538, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.00022545014508068562}, {"id": 55, "seek": 27124, "start": 271.24, "end": 278.12, "text": " because if you are doing something in hot, you don't want things to crash or to break.", "tokens": [570, 498, 291, 366, 884, 746, 294, 2368, 11, 291, 500, 380, 528, 721, 281, 8252, 420, 281, 1821, 13], "temperature": 0.0, "avg_logprob": -0.16845936057841884, "compression_ratio": 1.8099547511312217, "no_speech_prob": 0.0002863132394850254}, {"id": 56, "seek": 27124, "start": 278.12, "end": 283.64, "text": " So the idea is that all the code that is running in R2 must be used from a library, so I don't", "tokens": [407, 264, 1558, 307, 300, 439, 264, 3089, 300, 307, 2614, 294, 497, 17, 1633, 312, 1143, 490, 257, 6405, 11, 370, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.16845936057841884, "compression_ratio": 1.8099547511312217, "no_speech_prob": 0.0002863132394850254}, {"id": 57, "seek": 27124, "start": 283.64, "end": 287.52, "text": " want to use like double variables, I don't want to depend on something that, if it's", "tokens": [528, 281, 764, 411, 3834, 9102, 11, 286, 500, 380, 528, 281, 5672, 322, 746, 300, 11, 498, 309, 311], "temperature": 0.0, "avg_logprob": -0.16845936057841884, "compression_ratio": 1.8099547511312217, "no_speech_prob": 0.0002863132394850254}, {"id": 58, "seek": 27124, "start": 287.52, "end": 293.48, "text": " not parsing properly, I don't want to crash, I want the, if the Moloch is failing, I want", "tokens": [406, 21156, 278, 6108, 11, 286, 500, 380, 528, 281, 8252, 11, 286, 528, 264, 11, 498, 264, 376, 7902, 339, 307, 18223, 11, 286, 528], "temperature": 0.0, "avg_logprob": -0.16845936057841884, "compression_ratio": 1.8099547511312217, "no_speech_prob": 0.0002863132394850254}, {"id": 59, "seek": 27124, "start": 293.48, "end": 296.32, "text": " the program to still run, things like this.", "tokens": [264, 1461, 281, 920, 1190, 11, 721, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.16845936057841884, "compression_ratio": 1.8099547511312217, "no_speech_prob": 0.0002863132394850254}, {"id": 60, "seek": 29632, "start": 296.32, "end": 302.76, "text": " So this is the main concern that I have when I write code for R2.", "tokens": [407, 341, 307, 264, 2135, 3136, 300, 286, 362, 562, 286, 2464, 3089, 337, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.1430477992348049, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0005477900849655271}, {"id": 61, "seek": 29632, "start": 302.76, "end": 308.15999999999997, "text": " It's developing a single repo, but it's separated in different models, so it's like a big project", "tokens": [467, 311, 6416, 257, 2167, 49040, 11, 457, 309, 311, 12005, 294, 819, 5245, 11, 370, 309, 311, 411, 257, 955, 1716], "temperature": 0.0, "avg_logprob": -0.1430477992348049, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0005477900849655271}, {"id": 62, "seek": 29632, "start": 308.15999999999997, "end": 312.68, "text": " in one repository, but there is like a bunch of libraries, each library has like a bunch", "tokens": [294, 472, 25841, 11, 457, 456, 307, 411, 257, 3840, 295, 15148, 11, 1184, 6405, 575, 411, 257, 3840], "temperature": 0.0, "avg_logprob": -0.1430477992348049, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0005477900849655271}, {"id": 63, "seek": 29632, "start": 312.68, "end": 318.56, "text": " of plugins, and many of these plugins are integrated or exposed, interfaces for extending", "tokens": [295, 33759, 11, 293, 867, 295, 613, 33759, 366, 10919, 420, 9495, 11, 28416, 337, 24360], "temperature": 0.0, "avg_logprob": -0.1430477992348049, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0005477900849655271}, {"id": 64, "seek": 29632, "start": 318.56, "end": 320.15999999999997, "text": " it with scripting languages.", "tokens": [309, 365, 5755, 278, 8650, 13], "temperature": 0.0, "avg_logprob": -0.1430477992348049, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0005477900849655271}, {"id": 65, "seek": 32016, "start": 320.16, "end": 326.36, "text": " So at the end is basically like a different layers of capabilities that can be extended", "tokens": [407, 412, 264, 917, 307, 1936, 411, 257, 819, 7914, 295, 10862, 300, 393, 312, 10913], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 66, "seek": 32016, "start": 326.36, "end": 329.08000000000004, "text": " pretty easily at different layers.", "tokens": [1238, 3612, 412, 819, 7914, 13], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 67, "seek": 32016, "start": 329.08000000000004, "end": 332.28000000000003, "text": " So there is like a common line interface, so you have like a prompt, you can type things,", "tokens": [407, 456, 307, 411, 257, 2689, 1622, 9226, 11, 370, 291, 362, 411, 257, 12391, 11, 291, 393, 2010, 721, 11], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 68, "seek": 32016, "start": 332.28000000000003, "end": 338.0, "text": " there is like a visual mode, which is basically a list of comments that you execute every", "tokens": [456, 307, 411, 257, 5056, 4391, 11, 597, 307, 1936, 257, 1329, 295, 3053, 300, 291, 14483, 633], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 69, "seek": 32016, "start": 338.0, "end": 342.64000000000004, "text": " time that you press a key, and then you have the panels mode, which is like you can make", "tokens": [565, 300, 291, 1886, 257, 2141, 11, 293, 550, 291, 362, 264, 13419, 4391, 11, 597, 307, 411, 291, 393, 652], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 70, "seek": 32016, "start": 342.64000000000004, "end": 347.96000000000004, "text": " splits, you can have like different tabs, you can have like different frames and so on,", "tokens": [37741, 11, 291, 393, 362, 411, 819, 20743, 11, 291, 393, 362, 411, 819, 12083, 293, 370, 322, 11], "temperature": 0.0, "avg_logprob": -0.15030184206755265, "compression_ratio": 2.021097046413502, "no_speech_prob": 0.00028119582566432655}, {"id": 71, "seek": 34796, "start": 347.96, "end": 351.44, "text": " and then there is web interfaces, there is some people writing graphical interfaces", "tokens": [293, 550, 456, 307, 3670, 28416, 11, 456, 307, 512, 561, 3579, 35942, 28416], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 72, "seek": 34796, "start": 351.44, "end": 355.91999999999996, "text": " for it, like Yaito, which is the Qt interface for it.", "tokens": [337, 309, 11, 411, 398, 1001, 78, 11, 597, 307, 264, 1249, 83, 9226, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 73, "seek": 34796, "start": 355.91999999999996, "end": 361.24, "text": " For scripting, the easiest way for scripting R2 is Ertopipe, which is basically the simplest", "tokens": [1171, 5755, 278, 11, 264, 12889, 636, 337, 5755, 278, 497, 17, 307, 3300, 83, 404, 6527, 11, 597, 307, 1936, 264, 22811], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 74, "seek": 34796, "start": 361.24, "end": 365.64, "text": " interface for interfacing with anything, which is basically you run something, you pass a", "tokens": [9226, 337, 14510, 5615, 365, 1340, 11, 597, 307, 1936, 291, 1190, 746, 11, 291, 1320, 257], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 75, "seek": 34796, "start": 365.64, "end": 370.35999999999996, "text": " string with a comment, and then you get the output of the comment as a string, but there", "tokens": [6798, 365, 257, 2871, 11, 293, 550, 291, 483, 264, 5598, 295, 264, 2871, 382, 257, 6798, 11, 457, 456], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 76, "seek": 34796, "start": 370.35999999999996, "end": 377.52, "text": " is also bindings for the CAPI, there's automated bindings for Python, for Rust, etc.", "tokens": [307, 611, 14786, 1109, 337, 264, 33636, 40, 11, 456, 311, 18473, 14786, 1109, 337, 15329, 11, 337, 34952, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.18901347363089013, "compression_ratio": 1.9372549019607843, "no_speech_prob": 0.0002491884515620768}, {"id": 77, "seek": 37752, "start": 377.52, "end": 386.12, "text": " And there is also support for using these bindings from different scripting languages.", "tokens": [400, 456, 307, 611, 1406, 337, 1228, 613, 14786, 1109, 490, 819, 5755, 278, 8650, 13], "temperature": 0.0, "avg_logprob": -0.12547680735588074, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.00013095264148432761}, {"id": 78, "seek": 37752, "start": 386.12, "end": 389.2, "text": " So what are the libraries implementing or exposing?", "tokens": [407, 437, 366, 264, 15148, 18114, 420, 33178, 30], "temperature": 0.0, "avg_logprob": -0.12547680735588074, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.00013095264148432761}, {"id": 79, "seek": 37752, "start": 389.2, "end": 394.0, "text": " So you have the IO library, which is basically abstracting the access to the IO, this basically", "tokens": [407, 291, 362, 264, 39839, 6405, 11, 597, 307, 1936, 12649, 278, 264, 2105, 281, 264, 39839, 11, 341, 1936], "temperature": 0.0, "avg_logprob": -0.12547680735588074, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.00013095264148432761}, {"id": 80, "seek": 37752, "start": 394.0, "end": 400.15999999999997, "text": " defines how you access like a file, everything is abstract, this means that a file doesn't", "tokens": [23122, 577, 291, 2105, 411, 257, 3991, 11, 1203, 307, 12649, 11, 341, 1355, 300, 257, 3991, 1177, 380], "temperature": 0.0, "avg_logprob": -0.12547680735588074, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.00013095264148432761}, {"id": 81, "seek": 37752, "start": 400.15999999999997, "end": 405.71999999999997, "text": " need to be anything physical, there is support, I mean you cannot map like a full file in", "tokens": [643, 281, 312, 1340, 4001, 11, 456, 307, 1406, 11, 286, 914, 291, 2644, 4471, 411, 257, 1577, 3991, 294], "temperature": 0.0, "avg_logprob": -0.12547680735588074, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.00013095264148432761}, {"id": 82, "seek": 40572, "start": 405.72, "end": 409.08000000000004, "text": " memory and then work on it because this is abstracted by the IO.", "tokens": [4675, 293, 550, 589, 322, 309, 570, 341, 307, 12649, 292, 538, 264, 39839, 13], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 83, "seek": 40572, "start": 409.08000000000004, "end": 416.16, "text": " So you can map like a remote file in a running in a remote instance of R2, so you can run", "tokens": [407, 291, 393, 4471, 411, 257, 8607, 3991, 294, 257, 2614, 294, 257, 8607, 5197, 295, 497, 17, 11, 370, 291, 393, 1190], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 84, "seek": 40572, "start": 416.16, "end": 421.44000000000005, "text": " R2 as an instance, and then you can map for example like a ptrace backend, which is basically", "tokens": [497, 17, 382, 364, 5197, 11, 293, 550, 291, 393, 4471, 337, 1365, 411, 257, 280, 6903, 617, 38087, 11, 597, 307, 1936], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 85, "seek": 40572, "start": 421.44000000000005, "end": 426.48, "text": " reading and writing memory from another process, and this is like another IO interface, and", "tokens": [3760, 293, 3579, 4675, 490, 1071, 1399, 11, 293, 341, 307, 411, 1071, 39839, 9226, 11, 293], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 86, "seek": 40572, "start": 426.48, "end": 428.56, "text": " all that stuff is just the file descriptor.", "tokens": [439, 300, 1507, 307, 445, 264, 3991, 31280, 284, 13], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 87, "seek": 40572, "start": 428.56, "end": 433.76000000000005, "text": " So when you have like one IO open, then you can map this file descriptor into separate", "tokens": [407, 562, 291, 362, 411, 472, 39839, 1269, 11, 550, 291, 393, 4471, 341, 3991, 31280, 284, 666, 4994], "temperature": 0.0, "avg_logprob": -0.1670046246741429, "compression_ratio": 1.8543307086614174, "no_speech_prob": 0.00036445618025027215}, {"id": 88, "seek": 43376, "start": 433.76, "end": 438.44, "text": " maps, a map is basically a portion of the memory taken from the file descriptor, so", "tokens": [11317, 11, 257, 4471, 307, 1936, 257, 8044, 295, 264, 4675, 2726, 490, 264, 3991, 31280, 284, 11, 370], "temperature": 0.0, "avg_logprob": -0.15614001550407053, "compression_ratio": 1.9078947368421053, "no_speech_prob": 0.0006990819238126278}, {"id": 89, "seek": 43376, "start": 438.44, "end": 443.03999999999996, "text": " you say that from this offset to this offset from this file descriptor will be mapped in", "tokens": [291, 584, 300, 490, 341, 18687, 281, 341, 18687, 490, 341, 3991, 31280, 284, 486, 312, 33318, 294], "temperature": 0.0, "avg_logprob": -0.15614001550407053, "compression_ratio": 1.9078947368421053, "no_speech_prob": 0.0006990819238126278}, {"id": 90, "seek": 43376, "start": 443.03999999999996, "end": 449.56, "text": " this virtual address in the IO space of R2, and then there are IO banks, and IO banks", "tokens": [341, 6374, 2985, 294, 264, 39839, 1901, 295, 497, 17, 11, 293, 550, 456, 366, 39839, 10237, 11, 293, 39839, 10237], "temperature": 0.0, "avg_logprob": -0.15614001550407053, "compression_ratio": 1.9078947368421053, "no_speech_prob": 0.0006990819238126278}, {"id": 91, "seek": 43376, "start": 449.56, "end": 453.71999999999997, "text": " are basically a bunch of maps, so you can have like separate memory spaces, like for", "tokens": [366, 1936, 257, 3840, 295, 11317, 11, 370, 291, 393, 362, 411, 4994, 4675, 7673, 11, 411, 337], "temperature": 0.0, "avg_logprob": -0.15614001550407053, "compression_ratio": 1.9078947368421053, "no_speech_prob": 0.0006990819238126278}, {"id": 92, "seek": 43376, "start": 453.71999999999997, "end": 459.32, "text": " example you want to relate like a thread local stretch, you can have like one IO space that", "tokens": [1365, 291, 528, 281, 10961, 411, 257, 7207, 2654, 5985, 11, 291, 393, 362, 411, 472, 39839, 1901, 300], "temperature": 0.0, "avg_logprob": -0.15614001550407053, "compression_ratio": 1.9078947368421053, "no_speech_prob": 0.0006990819238126278}, {"id": 93, "seek": 45932, "start": 459.32, "end": 464.15999999999997, "text": " only contains the contents of the thread local stretch, but then there is like another bank", "tokens": [787, 8306, 264, 15768, 295, 264, 7207, 2654, 5985, 11, 457, 550, 456, 307, 411, 1071, 3765], "temperature": 0.0, "avg_logprob": -0.14543407696944016, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00014637046842835844}, {"id": 94, "seek": 45932, "start": 464.15999999999997, "end": 469.24, "text": " that contains all the memory layout of the processing memory, and you can do that just", "tokens": [300, 8306, 439, 264, 4675, 13333, 295, 264, 9007, 4675, 11, 293, 291, 393, 360, 300, 445], "temperature": 0.0, "avg_logprob": -0.14543407696944016, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00014637046842835844}, {"id": 95, "seek": 45932, "start": 469.24, "end": 474.24, "text": " by typing comments, you can do this also by using the API, but anyway, it's also possible", "tokens": [538, 18444, 3053, 11, 291, 393, 360, 341, 611, 538, 1228, 264, 9362, 11, 457, 4033, 11, 309, 311, 611, 1944], "temperature": 0.0, "avg_logprob": -0.14543407696944016, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00014637046842835844}, {"id": 96, "seek": 45932, "start": 474.24, "end": 481.32, "text": " to create like SQL memory maps, memory layouts, for example B850 is like an architecture that", "tokens": [281, 1884, 411, 19200, 4675, 11317, 11, 4675, 46100, 11, 337, 1365, 363, 23, 2803, 307, 411, 364, 9482, 300], "temperature": 0.0, "avg_logprob": -0.14543407696944016, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00014637046842835844}, {"id": 97, "seek": 45932, "start": 481.32, "end": 486.64, "text": " is used for automobiles and things like that, and this architecture basically relies on", "tokens": [307, 1143, 337, 3553, 996, 4680, 293, 721, 411, 300, 11, 293, 341, 9482, 1936, 30910, 322], "temperature": 0.0, "avg_logprob": -0.14543407696944016, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00014637046842835844}, {"id": 98, "seek": 48664, "start": 486.64, "end": 491.0, "text": " having like some solid infrastructure, so you see there is some models that have like", "tokens": [1419, 411, 512, 5100, 6896, 11, 370, 291, 536, 456, 307, 512, 5245, 300, 362, 411], "temperature": 0.0, "avg_logprob": -0.1241844384977133, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.000308480579406023}, {"id": 99, "seek": 48664, "start": 491.0, "end": 495.08, "text": " two CPUs executing the same code at the same time, and there is like a verification that", "tokens": [732, 13199, 82, 32368, 264, 912, 3089, 412, 264, 912, 565, 11, 293, 456, 307, 411, 257, 30206, 300], "temperature": 0.0, "avg_logprob": -0.1241844384977133, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.000308480579406023}, {"id": 100, "seek": 48664, "start": 495.08, "end": 502.76, "text": " two CPUs are doing exactly the same at runtime, and the memory of this CPU is basically SQL,", "tokens": [732, 13199, 82, 366, 884, 2293, 264, 912, 412, 34474, 11, 293, 264, 4675, 295, 341, 13199, 307, 1936, 19200, 11], "temperature": 0.0, "avg_logprob": -0.1241844384977133, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.000308480579406023}, {"id": 101, "seek": 48664, "start": 502.76, "end": 507.52, "text": " so there is some references that are going backward, so you have like one instruction", "tokens": [370, 456, 307, 512, 15400, 300, 366, 516, 23897, 11, 370, 291, 362, 411, 472, 10951], "temperature": 0.0, "avg_logprob": -0.1241844384977133, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.000308480579406023}, {"id": 102, "seek": 48664, "start": 507.52, "end": 512.68, "text": " at the zero address that is referencing something up, and this something up is basically going", "tokens": [412, 264, 4018, 2985, 300, 307, 40582, 746, 493, 11, 293, 341, 746, 493, 307, 1936, 516], "temperature": 0.0, "avg_logprob": -0.1241844384977133, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.000308480579406023}, {"id": 103, "seek": 51268, "start": 512.68, "end": 520.12, "text": " to the negative of other space, and this negative other space is not 32-bit in size, it's 26", "tokens": [281, 264, 3671, 295, 661, 1901, 11, 293, 341, 3671, 661, 1901, 307, 406, 8858, 12, 5260, 294, 2744, 11, 309, 311, 7551], "temperature": 0.0, "avg_logprob": -0.21567519505818686, "compression_ratio": 1.776, "no_speech_prob": 0.00019707960018422455}, {"id": 104, "seek": 51268, "start": 520.12, "end": 524.1999999999999, "text": " for example, so you can basically configure this kind of things inside the R2, and you", "tokens": [337, 1365, 11, 370, 291, 393, 1936, 22162, 341, 733, 295, 721, 1854, 264, 497, 17, 11, 293, 291], "temperature": 0.0, "avg_logprob": -0.21567519505818686, "compression_ratio": 1.776, "no_speech_prob": 0.00019707960018422455}, {"id": 105, "seek": 51268, "start": 524.1999999999999, "end": 529.92, "text": " can basically get emulation, all the flags which are basically naming offsets in all", "tokens": [393, 1936, 483, 846, 2776, 11, 439, 264, 23265, 597, 366, 1936, 25290, 39457, 1385, 294, 439], "temperature": 0.0, "avg_logprob": -0.21567519505818686, "compression_ratio": 1.776, "no_speech_prob": 0.00019707960018422455}, {"id": 106, "seek": 51268, "start": 529.92, "end": 534.88, "text": " these things and everything will be shaped properly, you can also define bit sizes memory", "tokens": [613, 721, 293, 1203, 486, 312, 13475, 6108, 11, 291, 393, 611, 6964, 857, 11602, 4675], "temperature": 0.0, "avg_logprob": -0.21567519505818686, "compression_ratio": 1.776, "no_speech_prob": 0.00019707960018422455}, {"id": 107, "seek": 51268, "start": 534.88, "end": 542.0, "text": " spaces like 7-bit bytes and things like this, it's also able to pass binary formats, this", "tokens": [7673, 411, 1614, 12, 5260, 36088, 293, 721, 411, 341, 11, 309, 311, 611, 1075, 281, 1320, 17434, 25879, 11, 341], "temperature": 0.0, "avg_logprob": -0.21567519505818686, "compression_ratio": 1.776, "no_speech_prob": 0.00019707960018422455}, {"id": 108, "seek": 54200, "start": 542.0, "end": 547.48, "text": " works on any of the memory like I have said before, so you can pass from memory, you can", "tokens": [1985, 322, 604, 295, 264, 4675, 411, 286, 362, 848, 949, 11, 370, 291, 393, 1320, 490, 4675, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.31590752649788906, "compression_ratio": 1.6, "no_speech_prob": 0.0006751919281668961}, {"id": 109, "seek": 54200, "start": 547.48, "end": 553.64, "text": " pass from disk, there is support for the most known well-filed formats from console, binary,", "tokens": [1320, 490, 12355, 11, 456, 307, 1406, 337, 264, 881, 2570, 731, 12, 69, 7292, 25879, 490, 11076, 11, 17434, 11], "temperature": 0.0, "avg_logprob": -0.31590752649788906, "compression_ratio": 1.6, "no_speech_prob": 0.0006751919281668961}, {"id": 110, "seek": 54200, "start": 553.64, "end": 562.4, "text": " ROM, headers like Gameboy etc, but there is also for LFP, Makrokov etc, it's also parsing", "tokens": [41678, 11, 45101, 411, 7522, 12795, 5183, 11, 457, 456, 307, 611, 337, 441, 45882, 11, 16576, 340, 33516, 5183, 11, 309, 311, 611, 21156, 278], "temperature": 0.0, "avg_logprob": -0.31590752649788906, "compression_ratio": 1.6, "no_speech_prob": 0.0006751919281668961}, {"id": 111, "seek": 54200, "start": 562.4, "end": 569.04, "text": " Dwarf, PDB and other debug information, this is only for getting like address of memory,", "tokens": [413, 6925, 69, 11, 10464, 33, 293, 661, 24083, 1589, 11, 341, 307, 787, 337, 1242, 411, 2985, 295, 4675, 11], "temperature": 0.0, "avg_logprob": -0.31590752649788906, "compression_ratio": 1.6, "no_speech_prob": 0.0006751919281668961}, {"id": 112, "seek": 56904, "start": 569.04, "end": 573.9599999999999, "text": " making like a file name and so on, it's not really exporting all the structures and so", "tokens": [1455, 411, 257, 3991, 1315, 293, 370, 322, 11, 309, 311, 406, 534, 44686, 439, 264, 9227, 293, 370], "temperature": 0.0, "avg_logprob": -0.19155703420224396, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.00028472536359913647}, {"id": 113, "seek": 56904, "start": 573.9599999999999, "end": 578.5999999999999, "text": " on, but it's also possible to do that in the future, or using several libraries, it's", "tokens": [322, 11, 457, 309, 311, 611, 1944, 281, 360, 300, 294, 264, 2027, 11, 420, 1228, 2940, 15148, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.19155703420224396, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.00028472536359913647}, {"id": 114, "seek": 56904, "start": 578.5999999999999, "end": 587.64, "text": " also parsing like class information from SWIFT, Objective C or C++ binaries, and all that", "tokens": [611, 21156, 278, 411, 1508, 1589, 490, 20346, 12775, 51, 11, 24753, 488, 383, 420, 383, 25472, 5171, 4889, 11, 293, 439, 300], "temperature": 0.0, "avg_logprob": -0.19155703420224396, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.00028472536359913647}, {"id": 115, "seek": 56904, "start": 587.64, "end": 592.48, "text": " stuff is integrated inside the R2, so you can, it's subtracting all the information", "tokens": [1507, 307, 10919, 1854, 264, 497, 17, 11, 370, 291, 393, 11, 309, 311, 16390, 278, 439, 264, 1589], "temperature": 0.0, "avg_logprob": -0.19155703420224396, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.00028472536359913647}, {"id": 116, "seek": 59248, "start": 592.48, "end": 599.84, "text": " from all these final formats into single naming, so for example, imports in a PE is not the", "tokens": [490, 439, 613, 2572, 25879, 666, 2167, 25290, 11, 370, 337, 1365, 11, 41596, 294, 257, 24346, 307, 406, 264], "temperature": 0.0, "avg_logprob": -0.18988380432128907, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.00019242223061155528}, {"id": 117, "seek": 59248, "start": 599.84, "end": 604.64, "text": " same as like an import in ELF, but for R2 is the same, so when you want to list what", "tokens": [912, 382, 411, 364, 974, 294, 14426, 37, 11, 457, 337, 497, 17, 307, 264, 912, 11, 370, 562, 291, 528, 281, 1329, 437], "temperature": 0.0, "avg_logprob": -0.18988380432128907, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.00019242223061155528}, {"id": 118, "seek": 59248, "start": 604.64, "end": 608.8000000000001, "text": " a binary is importing from other libraries, you can just use give me the imports, you", "tokens": [257, 17434, 307, 43866, 490, 661, 15148, 11, 291, 393, 445, 764, 976, 385, 264, 41596, 11, 291], "temperature": 0.0, "avg_logprob": -0.18988380432128907, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.00019242223061155528}, {"id": 119, "seek": 59248, "start": 608.8000000000001, "end": 614.88, "text": " don't have to use like different APIs or different comments depending on the file format, so", "tokens": [500, 380, 362, 281, 764, 411, 819, 21445, 420, 819, 3053, 5413, 322, 264, 3991, 7877, 11, 370], "temperature": 0.0, "avg_logprob": -0.18988380432128907, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.00019242223061155528}, {"id": 120, "seek": 59248, "start": 614.88, "end": 621.0, "text": " it's unifying all the formats into a single naming, it's also supporting assembling and", "tokens": [309, 311, 517, 5489, 439, 264, 25879, 666, 257, 2167, 25290, 11, 309, 311, 611, 7231, 43867, 293], "temperature": 0.0, "avg_logprob": -0.18988380432128907, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.00019242223061155528}, {"id": 121, "seek": 62100, "start": 621.0, "end": 626.8, "text": " assembling, it's using like one API, so there is like a library that exposes an interface", "tokens": [43867, 11, 309, 311, 1228, 411, 472, 9362, 11, 370, 456, 307, 411, 257, 6405, 300, 1278, 4201, 364, 9226], "temperature": 0.0, "avg_logprob": -0.15581049742522063, "compression_ratio": 1.9049586776859504, "no_speech_prob": 9.901317389449105e-05}, {"id": 122, "seek": 62100, "start": 626.8, "end": 632.8, "text": " for doing this, and this library exposes plugins, so there's like plugins that are used by", "tokens": [337, 884, 341, 11, 293, 341, 6405, 1278, 4201, 33759, 11, 370, 456, 311, 411, 33759, 300, 366, 1143, 538], "temperature": 0.0, "avg_logprob": -0.15581049742522063, "compression_ratio": 1.9049586776859504, "no_speech_prob": 9.901317389449105e-05}, {"id": 123, "seek": 62100, "start": 632.8, "end": 638.24, "text": " this API, and then you can basically implement like new architectures, like writing plugins", "tokens": [341, 9362, 11, 293, 550, 291, 393, 1936, 4445, 411, 777, 6331, 1303, 11, 411, 3579, 33759], "temperature": 0.0, "avg_logprob": -0.15581049742522063, "compression_ratio": 1.9049586776859504, "no_speech_prob": 9.901317389449105e-05}, {"id": 124, "seek": 62100, "start": 638.24, "end": 644.0, "text": " for this library, but it's not only used for assembling and disassembling, which is basically", "tokens": [337, 341, 6405, 11, 457, 309, 311, 406, 787, 1143, 337, 43867, 293, 717, 29386, 1688, 11, 597, 307, 1936], "temperature": 0.0, "avg_logprob": -0.15581049742522063, "compression_ratio": 1.9049586776859504, "no_speech_prob": 9.901317389449105e-05}, {"id": 125, "seek": 62100, "start": 644.0, "end": 650.72, "text": " text bytes, there is more low level detailed information, like you can, for some architectures", "tokens": [2487, 36088, 11, 456, 307, 544, 2295, 1496, 9942, 1589, 11, 411, 291, 393, 11, 337, 512, 6331, 1303], "temperature": 0.0, "avg_logprob": -0.15581049742522063, "compression_ratio": 1.9049586776859504, "no_speech_prob": 9.901317389449105e-05}, {"id": 126, "seek": 65072, "start": 650.72, "end": 655.1600000000001, "text": " you can get like a structure metadata, like which is the first operand, which is the size", "tokens": [291, 393, 483, 411, 257, 3877, 26603, 11, 411, 597, 307, 264, 700, 2208, 474, 11, 597, 307, 264, 2744], "temperature": 0.0, "avg_logprob": -0.1862477054115103, "compression_ratio": 1.6768060836501901, "no_speech_prob": 0.00016278467955999076}, {"id": 127, "seek": 65072, "start": 655.1600000000001, "end": 659.6, "text": " of the second argument, things like this, but it's also exposing a seal, a seal is like", "tokens": [295, 264, 1150, 6770, 11, 721, 411, 341, 11, 457, 309, 311, 611, 33178, 257, 12185, 11, 257, 12185, 307, 411], "temperature": 0.0, "avg_logprob": -0.1862477054115103, "compression_ratio": 1.6768060836501901, "no_speech_prob": 0.00016278467955999076}, {"id": 128, "seek": 65072, "start": 659.6, "end": 665.52, "text": " a very simple text interface for explaining what an instruction is doing at low level,", "tokens": [257, 588, 2199, 2487, 9226, 337, 13468, 437, 364, 10951, 307, 884, 412, 2295, 1496, 11], "temperature": 0.0, "avg_logprob": -0.1862477054115103, "compression_ratio": 1.6768060836501901, "no_speech_prob": 0.00016278467955999076}, {"id": 129, "seek": 65072, "start": 665.52, "end": 670.0, "text": " it's kind of, it's very similar to fourth, like a stack based machine, and it's basically", "tokens": [309, 311, 733, 295, 11, 309, 311, 588, 2531, 281, 6409, 11, 411, 257, 8630, 2361, 3479, 11, 293, 309, 311, 1936], "temperature": 0.0, "avg_logprob": -0.1862477054115103, "compression_ratio": 1.6768060836501901, "no_speech_prob": 0.00016278467955999076}, {"id": 130, "seek": 65072, "start": 670.0, "end": 677.36, "text": " one statement separated by GOMA, so you have like O, GOMA, AX, GOMA equals, means that", "tokens": [472, 5629, 12005, 538, 460, 5251, 32, 11, 370, 291, 362, 411, 422, 11, 460, 5251, 32, 11, 316, 55, 11, 460, 5251, 32, 6915, 11, 1355, 300], "temperature": 0.0, "avg_logprob": -0.1862477054115103, "compression_ratio": 1.6768060836501901, "no_speech_prob": 0.00016278467955999076}, {"id": 131, "seek": 67736, "start": 677.36, "end": 681.16, "text": " it will be pushing the number, then pushing the register name, and then pushing the operation,", "tokens": [309, 486, 312, 7380, 264, 1230, 11, 550, 7380, 264, 7280, 1315, 11, 293, 550, 7380, 264, 6916, 11], "temperature": 0.0, "avg_logprob": -0.13211486409011397, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.00023934361524879932}, {"id": 132, "seek": 67736, "start": 681.16, "end": 688.28, "text": " which is the equal, and then popping up from the operation to execute the statement.", "tokens": [597, 307, 264, 2681, 11, 293, 550, 18374, 493, 490, 264, 6916, 281, 14483, 264, 5629, 13], "temperature": 0.0, "avg_logprob": -0.13211486409011397, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.00023934361524879932}, {"id": 133, "seek": 67736, "start": 688.28, "end": 694.48, "text": " The reason for that is because there is so many ways to extend or to define an architecture,", "tokens": [440, 1778, 337, 300, 307, 570, 456, 307, 370, 867, 2098, 281, 10101, 420, 281, 6964, 364, 9482, 11], "temperature": 0.0, "avg_logprob": -0.13211486409011397, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.00023934361524879932}, {"id": 134, "seek": 67736, "start": 694.48, "end": 699.36, "text": " and there is some really fucked up things that can be done in so many architectures,", "tokens": [293, 456, 307, 512, 534, 22518, 493, 721, 300, 393, 312, 1096, 294, 370, 867, 6331, 1303, 11], "temperature": 0.0, "avg_logprob": -0.13211486409011397, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.00023934361524879932}, {"id": 135, "seek": 67736, "start": 699.36, "end": 705.08, "text": " so I was not going to define like extensible structures or doing some really complex things,", "tokens": [370, 286, 390, 406, 516, 281, 6964, 411, 1279, 30633, 9227, 420, 884, 512, 534, 3997, 721, 11], "temperature": 0.0, "avg_logprob": -0.13211486409011397, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.00023934361524879932}, {"id": 136, "seek": 70508, "start": 705.08, "end": 709.5600000000001, "text": " because at the end I was always finding like something that was not compatible with another", "tokens": [570, 412, 264, 917, 286, 390, 1009, 5006, 411, 746, 300, 390, 406, 18218, 365, 1071], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 137, "seek": 70508, "start": 709.5600000000001, "end": 714.36, "text": " architecture, and I end up like saying, okay, I just can define like a comma separated string", "tokens": [9482, 11, 293, 286, 917, 493, 411, 1566, 11, 1392, 11, 286, 445, 393, 6964, 411, 257, 22117, 12005, 6798], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 138, "seek": 70508, "start": 714.36, "end": 718.6, "text": " that it's just located in a single memory chunk, and I can just split it by comma and", "tokens": [300, 309, 311, 445, 6870, 294, 257, 2167, 4675, 16635, 11, 293, 286, 393, 445, 7472, 309, 538, 22117, 293], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 139, "seek": 70508, "start": 718.6, "end": 720.8000000000001, "text": " then emulate that.", "tokens": [550, 45497, 300, 13], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 140, "seek": 70508, "start": 720.8000000000001, "end": 725.1600000000001, "text": " So there is a bunch of tools or libraries that can be, that are using a seal to extract", "tokens": [407, 456, 307, 257, 3840, 295, 3873, 420, 15148, 300, 393, 312, 11, 300, 366, 1228, 257, 12185, 281, 8947], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 141, "seek": 70508, "start": 725.1600000000001, "end": 730.2, "text": " this information, and then use that for emulation, use that for extracting information from a", "tokens": [341, 1589, 11, 293, 550, 764, 300, 337, 846, 2776, 11, 764, 300, 337, 49844, 1589, 490, 257], "temperature": 0.0, "avg_logprob": -0.13871683393205916, "compression_ratio": 1.8084291187739463, "no_speech_prob": 0.0001503537641838193}, {"id": 142, "seek": 73020, "start": 730.2, "end": 736.12, "text": " specific instruction, or even for the compiling.", "tokens": [2685, 10951, 11, 420, 754, 337, 264, 715, 4883, 13], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 143, "seek": 73020, "start": 736.12, "end": 741.76, "text": " It's very portable, so it works on support debugging also, so you can do local and remote", "tokens": [467, 311, 588, 21800, 11, 370, 309, 1985, 322, 1406, 45592, 611, 11, 370, 291, 393, 360, 2654, 293, 8607], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 144, "seek": 73020, "start": 741.76, "end": 742.76, "text": " debugging.", "tokens": [45592, 13], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 145, "seek": 73020, "start": 742.76, "end": 750.2, "text": " This means that you can run R2 as a local debugger in your Linux Mac or iOS device, but you can", "tokens": [639, 1355, 300, 291, 393, 1190, 497, 17, 382, 257, 2654, 24083, 1321, 294, 428, 18734, 5707, 420, 17430, 4302, 11, 457, 291, 393], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 146, "seek": 73020, "start": 750.2, "end": 754.72, "text": " also attach to remote GDB or YDBG, et cetera.", "tokens": [611, 5085, 281, 8607, 460, 27735, 420, 398, 27735, 38, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 147, "seek": 73020, "start": 754.72, "end": 758.8000000000001, "text": " It's a functionality for searching for different patterns, so you can search for strings, access", "tokens": [467, 311, 257, 14980, 337, 10808, 337, 819, 8294, 11, 370, 291, 393, 3164, 337, 13985, 11, 2105], "temperature": 0.0, "avg_logprob": -0.19799082886938954, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.00014290025865193456}, {"id": 148, "seek": 75880, "start": 758.8, "end": 764.7199999999999, "text": " and model values, you can also find me something that is repeated multiple times, and then", "tokens": [293, 2316, 4190, 11, 291, 393, 611, 915, 385, 746, 300, 307, 10477, 3866, 1413, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 149, "seek": 75880, "start": 764.7199999999999, "end": 768.28, "text": " it will be finding like if there is any pattern that is repeated many times and give you the", "tokens": [309, 486, 312, 5006, 411, 498, 456, 307, 604, 5102, 300, 307, 10477, 867, 1413, 293, 976, 291, 264], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 150, "seek": 75880, "start": 768.28, "end": 774.0, "text": " offset of these things, it's also able to generate function signatures, so by taking", "tokens": [18687, 295, 613, 721, 11, 309, 311, 611, 1075, 281, 8460, 2445, 32322, 11, 370, 538, 1940], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 151, "seek": 75880, "start": 774.0, "end": 778.12, "text": " all the whole analysis for the program, it will identify all the functions, basic blocks,", "tokens": [439, 264, 1379, 5215, 337, 264, 1461, 11, 309, 486, 5876, 439, 264, 6828, 11, 3875, 8474, 11], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 152, "seek": 75880, "start": 778.12, "end": 782.8, "text": " et cetera, and then you can generate like metadata for each of these functions, and", "tokens": [1030, 11458, 11, 293, 550, 291, 393, 8460, 411, 26603, 337, 1184, 295, 613, 6828, 11, 293], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 153, "seek": 75880, "start": 782.8, "end": 787.12, "text": " this metadata can be imported again to search for this information in our binary.", "tokens": [341, 26603, 393, 312, 25524, 797, 281, 3164, 337, 341, 1589, 294, 527, 17434, 13], "temperature": 0.0, "avg_logprob": -0.18219047481730832, "compression_ratio": 1.9054545454545455, "no_speech_prob": 0.00027563291951082647}, {"id": 154, "seek": 78712, "start": 787.12, "end": 792.2, "text": " So you have like one binary with dwarf information, or the back symbols, then you can import this", "tokens": [407, 291, 362, 411, 472, 17434, 365, 35527, 1589, 11, 420, 264, 646, 16944, 11, 550, 291, 393, 974, 341], "temperature": 0.0, "avg_logprob": -0.22172315688360306, "compression_ratio": 1.8, "no_speech_prob": 0.0004137112991884351}, {"id": 155, "seek": 78712, "start": 792.2, "end": 796.76, "text": " into a binary that is a stripet, and then you can basically identify these data structures", "tokens": [666, 257, 17434, 300, 307, 257, 3575, 7275, 11, 293, 550, 291, 393, 1936, 5876, 613, 1412, 9227], "temperature": 0.0, "avg_logprob": -0.22172315688360306, "compression_ratio": 1.8, "no_speech_prob": 0.0004137112991884351}, {"id": 156, "seek": 78712, "start": 796.76, "end": 801.68, "text": " or functions in another binary that is not containing this data.", "tokens": [420, 6828, 294, 1071, 17434, 300, 307, 406, 19273, 341, 1412, 13], "temperature": 0.0, "avg_logprob": -0.22172315688360306, "compression_ratio": 1.8, "no_speech_prob": 0.0004137112991884351}, {"id": 157, "seek": 78712, "start": 801.68, "end": 808.72, "text": " It's also possible to div code level, but you can also div data, you can find like using", "tokens": [467, 311, 611, 1944, 281, 3414, 3089, 1496, 11, 457, 291, 393, 611, 3414, 1412, 11, 291, 393, 915, 411, 1228], "temperature": 0.0, "avg_logprob": -0.22172315688360306, "compression_ratio": 1.8, "no_speech_prob": 0.0004137112991884351}, {"id": 158, "seek": 78712, "start": 808.72, "end": 813.08, "text": " delta-diffing, so you have like two binaries that contain the same data, but in different", "tokens": [8289, 12, 67, 3661, 278, 11, 370, 291, 362, 411, 732, 5171, 4889, 300, 5304, 264, 912, 1412, 11, 457, 294, 819], "temperature": 0.0, "avg_logprob": -0.22172315688360306, "compression_ratio": 1.8, "no_speech_prob": 0.0004137112991884351}, {"id": 159, "seek": 81308, "start": 813.08, "end": 818.96, "text": " offsets it will identify which offset is the stripet in the binary, and which is the main", "tokens": [39457, 1385, 309, 486, 5876, 597, 18687, 307, 264, 3575, 7275, 294, 264, 17434, 11, 293, 597, 307, 264, 2135], "temperature": 0.0, "avg_logprob": -0.22857956574341962, "compression_ratio": 1.7601626016260163, "no_speech_prob": 0.00041125642019324005}, {"id": 160, "seek": 81308, "start": 818.96, "end": 824.36, "text": " difference from that, it's not byte per byte level instruction checking.", "tokens": [2649, 490, 300, 11, 309, 311, 406, 40846, 680, 40846, 1496, 10951, 8568, 13], "temperature": 0.0, "avg_logprob": -0.22857956574341962, "compression_ratio": 1.7601626016260163, "no_speech_prob": 0.00041125642019324005}, {"id": 161, "seek": 81308, "start": 824.36, "end": 828.96, "text": " You can also div basic blocks, like you get the two control flow graphs, and then identifying", "tokens": [509, 393, 611, 3414, 3875, 8474, 11, 411, 291, 483, 264, 732, 1969, 3095, 24877, 11, 293, 550, 16696], "temperature": 0.0, "avg_logprob": -0.22857956574341962, "compression_ratio": 1.7601626016260163, "no_speech_prob": 0.00041125642019324005}, {"id": 162, "seek": 81308, "start": 828.96, "end": 833.76, "text": " which basic block is added, which removed, or if there is like a percentage of difference,", "tokens": [597, 3875, 3461, 307, 3869, 11, 597, 7261, 11, 420, 498, 456, 307, 411, 257, 9668, 295, 2649, 11], "temperature": 0.0, "avg_logprob": -0.22857956574341962, "compression_ratio": 1.7601626016260163, "no_speech_prob": 0.00041125642019324005}, {"id": 163, "seek": 81308, "start": 833.76, "end": 840.6800000000001, "text": " so you can use that for bin-diffing, and you can also find differences like ABDIF for", "tokens": [370, 291, 393, 764, 300, 337, 5171, 12, 67, 3661, 278, 11, 293, 291, 393, 611, 915, 7300, 411, 13838, 3085, 37, 337], "temperature": 0.0, "avg_logprob": -0.22857956574341962, "compression_ratio": 1.7601626016260163, "no_speech_prob": 0.00041125642019324005}, {"id": 164, "seek": 84068, "start": 840.68, "end": 846.3199999999999, "text": " getting like there is new symbols removed, or things like that.", "tokens": [1242, 411, 456, 307, 777, 16944, 7261, 11, 420, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.20977129000369635, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.00033842603443190455}, {"id": 165, "seek": 84068, "start": 846.3199999999999, "end": 852.8, "text": " I also took code from Grapp, a group, which is basically the bootloader, and I used that", "tokens": [286, 611, 1890, 3089, 490, 8985, 427, 11, 257, 1594, 11, 597, 307, 1936, 264, 11450, 2907, 260, 11, 293, 286, 1143, 300], "temperature": 0.0, "avg_logprob": -0.20977129000369635, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.00033842603443190455}, {"id": 166, "seek": 84068, "start": 852.8, "end": 859.0799999999999, "text": " for parsing file systems, things that group is doing a lot of things for like assuming", "tokens": [337, 21156, 278, 3991, 3652, 11, 721, 300, 1594, 307, 884, 257, 688, 295, 721, 337, 411, 11926], "temperature": 0.0, "avg_logprob": -0.20977129000369635, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.00033842603443190455}, {"id": 167, "seek": 84068, "start": 859.0799999999999, "end": 863.4399999999999, "text": " that the file system is correct, and R2 will never assume that anything is correct, so", "tokens": [300, 264, 3991, 1185, 307, 3006, 11, 293, 497, 17, 486, 1128, 6552, 300, 1340, 307, 3006, 11, 370], "temperature": 0.0, "avg_logprob": -0.20977129000369635, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.00033842603443190455}, {"id": 168, "seek": 84068, "start": 863.4399999999999, "end": 868.4, "text": " if there is like a corrupted file system I want to be able to mount it, so R2 is using", "tokens": [498, 456, 307, 411, 257, 39480, 3991, 1185, 286, 528, 281, 312, 1075, 281, 3746, 309, 11, 370, 497, 17, 307, 1228], "temperature": 0.0, "avg_logprob": -0.20977129000369635, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.00033842603443190455}, {"id": 169, "seek": 86840, "start": 868.4, "end": 873.28, "text": " this code basically for mounting file systems, you can have like a fake, or like a virtual", "tokens": [341, 3089, 1936, 337, 22986, 3991, 3652, 11, 291, 393, 362, 411, 257, 7592, 11, 420, 411, 257, 6374], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 170, "seek": 86840, "start": 873.28, "end": 877.68, "text": " file system interface in starter 2, and you can use that for mounting local or remote", "tokens": [3991, 1185, 9226, 294, 22465, 568, 11, 293, 291, 393, 764, 300, 337, 22986, 2654, 420, 8607], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 171, "seek": 86840, "start": 877.68, "end": 878.68, "text": " file systems.", "tokens": [3991, 3652, 13], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 172, "seek": 86840, "start": 878.68, "end": 881.88, "text": " You can use R2-free, I will show that later, but I don't have time for showing it, but", "tokens": [509, 393, 764, 497, 17, 12, 10792, 11, 286, 486, 855, 300, 1780, 11, 457, 286, 500, 380, 362, 565, 337, 4099, 309, 11, 457], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 173, "seek": 86840, "start": 881.88, "end": 887.1999999999999, "text": " anyway, I will, you can use Freeda, which is like a tool for injecting code in remote", "tokens": [4033, 11, 286, 486, 11, 291, 393, 764, 6142, 8801, 11, 597, 307, 411, 257, 2290, 337, 10711, 278, 3089, 294, 8607], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 174, "seek": 86840, "start": 887.1999999999999, "end": 892.24, "text": " applications, and you can use TCP or USB for communicating with that, and then Freeda can", "tokens": [5821, 11, 293, 291, 393, 764, 48965, 420, 10109, 337, 17559, 365, 300, 11, 293, 550, 6142, 8801, 393], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 175, "seek": 86840, "start": 892.24, "end": 897.0, "text": " expose like an interface for accessing files remotely, so you can mount zips in a remote", "tokens": [19219, 411, 364, 9226, 337, 26440, 7098, 20824, 11, 370, 291, 393, 3746, 710, 2600, 294, 257, 8607], "temperature": 0.0, "avg_logprob": -0.18718252936713128, "compression_ratio": 1.8951048951048952, "no_speech_prob": 0.0002134471433237195}, {"id": 176, "seek": 89700, "start": 897.0, "end": 901.92, "text": " file system, extract the zip contents from one binary, pass the binary in local, mount", "tokens": [3991, 1185, 11, 8947, 264, 710, 647, 15768, 490, 472, 17434, 11, 1320, 264, 17434, 294, 2654, 11, 3746], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 177, "seek": 89700, "start": 901.92, "end": 908.36, "text": " that memory layout in local, and then whatever you would like to do with these things.", "tokens": [300, 4675, 13333, 294, 2654, 11, 293, 550, 2035, 291, 576, 411, 281, 360, 365, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 178, "seek": 89700, "start": 908.36, "end": 914.4, "text": " Okay, obviously there is like a huge amount of things that can be done with that, so there", "tokens": [1033, 11, 2745, 456, 307, 411, 257, 2603, 2372, 295, 721, 300, 393, 312, 1096, 365, 300, 11, 370, 456], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 179, "seek": 89700, "start": 914.4, "end": 916.0, "text": " is a need for a package manager.", "tokens": [307, 257, 643, 337, 257, 7372, 6598, 13], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 180, "seek": 89700, "start": 916.0, "end": 921.56, "text": " So I wrote R2-PM, it was like a 200 line shell script, so it's not really a big thing, but", "tokens": [407, 286, 4114, 497, 17, 12, 18819, 11, 309, 390, 411, 257, 2331, 1622, 8720, 5755, 11, 370, 309, 311, 406, 534, 257, 955, 551, 11, 457], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 181, "seek": 89700, "start": 921.56, "end": 925.72, "text": " one year ago I decided to write it in C, so this way you can basically run the package", "tokens": [472, 1064, 2057, 286, 3047, 281, 2464, 309, 294, 383, 11, 370, 341, 636, 291, 393, 1936, 1190, 264, 7372], "temperature": 0.0, "avg_logprob": -0.14782178969610305, "compression_ratio": 1.6608391608391608, "no_speech_prob": 0.0001509993599029258}, {"id": 182, "seek": 92572, "start": 925.72, "end": 933.76, "text": " manager anywhere, even in Windows, so it doesn't depend on anything that is not the same R2.", "tokens": [6598, 4992, 11, 754, 294, 8591, 11, 370, 309, 1177, 380, 5672, 322, 1340, 300, 307, 406, 264, 912, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.19204585386974976, "compression_ratio": 1.836734693877551, "no_speech_prob": 0.00016485519881825894}, {"id": 183, "seek": 92572, "start": 933.76, "end": 938.72, "text": " So this package manager is basically pulling a zip repository, and this repository contains", "tokens": [407, 341, 7372, 6598, 307, 1936, 8407, 257, 710, 647, 25841, 11, 293, 341, 25841, 8306], "temperature": 0.0, "avg_logprob": -0.19204585386974976, "compression_ratio": 1.836734693877551, "no_speech_prob": 0.00016485519881825894}, {"id": 184, "seek": 92572, "start": 938.72, "end": 943.32, "text": " like scripts, and this script is basically defining a very simple way for installing", "tokens": [411, 23294, 11, 293, 341, 5755, 307, 1936, 17827, 257, 588, 2199, 636, 337, 20762], "temperature": 0.0, "avg_logprob": -0.19204585386974976, "compression_ratio": 1.836734693877551, "no_speech_prob": 0.00016485519881825894}, {"id": 185, "seek": 92572, "start": 943.32, "end": 950.48, "text": " and uninstalling, so it defines instructions for compiling and installing the plugin, and", "tokens": [293, 517, 13911, 24021, 11, 370, 309, 23122, 9415, 337, 715, 4883, 293, 20762, 264, 23407, 11, 293], "temperature": 0.0, "avg_logprob": -0.19204585386974976, "compression_ratio": 1.836734693877551, "no_speech_prob": 0.00016485519881825894}, {"id": 186, "seek": 92572, "start": 950.48, "end": 955.44, "text": " there is like basically a bunch of tools that are installed in your home, and also plugins", "tokens": [456, 307, 411, 1936, 257, 3840, 295, 3873, 300, 366, 8899, 294, 428, 1280, 11, 293, 611, 33759], "temperature": 0.0, "avg_logprob": -0.19204585386974976, "compression_ratio": 1.836734693877551, "no_speech_prob": 0.00016485519881825894}, {"id": 187, "seek": 95544, "start": 955.44, "end": 958.08, "text": " that are loaded by R2.", "tokens": [300, 366, 13210, 538, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.16983108197228383, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.809288632008247e-05}, {"id": 188, "seek": 95544, "start": 958.08, "end": 963.8800000000001, "text": " So the most common or most used plugins for R2 are, for example, about the compilers you", "tokens": [407, 264, 881, 2689, 420, 881, 1143, 33759, 337, 497, 17, 366, 11, 337, 1365, 11, 466, 264, 715, 388, 433, 291], "temperature": 0.0, "avg_logprob": -0.16983108197228383, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.809288632008247e-05}, {"id": 189, "seek": 95544, "start": 963.8800000000001, "end": 970.08, "text": " have like R2-Dec, you have R2-Gidra, R2-Reddeck, so if you know Gidra for example, they provide", "tokens": [362, 411, 497, 17, 12, 35, 3045, 11, 291, 362, 497, 17, 12, 38, 327, 424, 11, 497, 17, 12, 20544, 1479, 547, 11, 370, 498, 291, 458, 460, 327, 424, 337, 1365, 11, 436, 2893], "temperature": 0.0, "avg_logprob": -0.16983108197228383, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.809288632008247e-05}, {"id": 190, "seek": 95544, "start": 970.08, "end": 976.2800000000001, "text": " like a compiler, there is like a part of the compiler which is written in C++, not in Java,", "tokens": [411, 257, 31958, 11, 456, 307, 411, 257, 644, 295, 264, 31958, 597, 307, 3720, 294, 383, 25472, 11, 406, 294, 10745, 11], "temperature": 0.0, "avg_logprob": -0.16983108197228383, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.809288632008247e-05}, {"id": 191, "seek": 95544, "start": 976.2800000000001, "end": 981.6400000000001, "text": " and this code can be reused for writing at a compiler without depending on the whole Java", "tokens": [293, 341, 3089, 393, 312, 319, 4717, 337, 3579, 412, 257, 31958, 1553, 5413, 322, 264, 1379, 10745], "temperature": 0.0, "avg_logprob": -0.16983108197228383, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.809288632008247e-05}, {"id": 192, "seek": 98164, "start": 981.64, "end": 989.16, "text": " thing, then there is Reddeck, which is the compiler based on LLVM and a bunch of parallel", "tokens": [551, 11, 550, 456, 307, 4477, 1479, 547, 11, 597, 307, 264, 31958, 2361, 322, 441, 43, 53, 44, 293, 257, 3840, 295, 8952], "temperature": 0.0, "avg_logprob": -0.19157210902163857, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.00010487114195711911}, {"id": 193, "seek": 98164, "start": 989.16, "end": 994.84, "text": " scripts that mess the thing, and they basically use the compiler toolchain to do the backward", "tokens": [23294, 300, 2082, 264, 551, 11, 293, 436, 1936, 764, 264, 31958, 2290, 11509, 281, 360, 264, 23897], "temperature": 0.0, "avg_logprob": -0.19157210902163857, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.00010487114195711911}, {"id": 194, "seek": 98164, "start": 994.84, "end": 1002.04, "text": " steps, to get from the binary disassembly to get like C like code for the compiling.", "tokens": [4439, 11, 281, 483, 490, 264, 17434, 717, 29386, 356, 281, 483, 411, 383, 411, 3089, 337, 264, 715, 4883, 13], "temperature": 0.0, "avg_logprob": -0.19157210902163857, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.00010487114195711911}, {"id": 195, "seek": 98164, "start": 1002.04, "end": 1007.16, "text": " Then you can also use the Aphora, there is support for signatures for IDA, there is like", "tokens": [1396, 291, 393, 611, 764, 264, 316, 950, 3252, 11, 456, 307, 1406, 337, 32322, 337, 7348, 32, 11, 456, 307, 411], "temperature": 0.0, "avg_logprob": -0.19157210902163857, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.00010487114195711911}, {"id": 196, "seek": 100716, "start": 1007.16, "end": 1013.0, "text": " native signatures, there is like some repository of people writing this, and then there is", "tokens": [8470, 32322, 11, 456, 307, 411, 512, 25841, 295, 561, 3579, 341, 11, 293, 550, 456, 307], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 197, "seek": 100716, "start": 1013.0, "end": 1020.0799999999999, "text": " support for Frida, if you know Frida, who knows Frida, where is your hand, okay, half", "tokens": [1406, 337, 1526, 2887, 11, 498, 291, 458, 1526, 2887, 11, 567, 3255, 1526, 2887, 11, 689, 307, 428, 1011, 11, 1392, 11, 1922], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 198, "seek": 100716, "start": 1020.0799999999999, "end": 1021.0799999999999, "text": " of the room.", "tokens": [295, 264, 1808, 13], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 199, "seek": 100716, "start": 1021.0799999999999, "end": 1022.0799999999999, "text": " Is that the compiler, right?", "tokens": [1119, 300, 264, 31958, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 200, "seek": 100716, "start": 1022.0799999999999, "end": 1028.96, "text": " No, Frida is a tool that basically injects code in a remote process, and then there", "tokens": [883, 11, 1526, 2887, 307, 257, 2290, 300, 1936, 10711, 82, 3089, 294, 257, 8607, 1399, 11, 293, 550, 456], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 201, "seek": 100716, "start": 1028.96, "end": 1032.6, "text": " is an agent that is running in a separate thread inside the process, so you can basically", "tokens": [307, 364, 9461, 300, 307, 2614, 294, 257, 4994, 7207, 1854, 264, 1399, 11, 370, 291, 393, 1936], "temperature": 0.0, "avg_logprob": -0.2273554435143104, "compression_ratio": 1.75, "no_speech_prob": 0.0005399159272201359}, {"id": 202, "seek": 103260, "start": 1032.6, "end": 1037.9599999999998, "text": " instrument the process at runtime, and you can basically inject JavaScript code or C", "tokens": [7198, 264, 1399, 412, 34474, 11, 293, 291, 393, 1936, 10711, 15778, 3089, 420, 383], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 203, "seek": 103260, "start": 1037.9599999999998, "end": 1041.78, "text": " or assembly inside the remote process and instrument that.", "tokens": [420, 12103, 1854, 264, 8607, 1399, 293, 7198, 300, 13], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 204, "seek": 103260, "start": 1041.78, "end": 1045.0, "text": " You can use that for profiling, you can use that for modifying behavior, you can use that", "tokens": [509, 393, 764, 300, 337, 1740, 4883, 11, 291, 393, 764, 300, 337, 42626, 5223, 11, 291, 393, 764, 300], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 205, "seek": 103260, "start": 1045.0, "end": 1050.32, "text": " for tracing APIs, identifying when a specific function is called with some arguments, and", "tokens": [337, 25262, 21445, 11, 16696, 562, 257, 2685, 2445, 307, 1219, 365, 512, 12869, 11, 293], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 206, "seek": 103260, "start": 1050.32, "end": 1054.6399999999999, "text": " then execute some code inside the remote process.", "tokens": [550, 14483, 512, 3089, 1854, 264, 8607, 1399, 13], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 207, "seek": 103260, "start": 1054.6399999999999, "end": 1060.6799999999998, "text": " Most people use JavaScript for doing this, but you can also use C with libgam or whatever,", "tokens": [4534, 561, 764, 15778, 337, 884, 341, 11, 457, 291, 393, 611, 764, 383, 365, 22854, 33815, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.16148446156428412, "compression_ratio": 1.8412698412698412, "no_speech_prob": 9.20691090868786e-05}, {"id": 208, "seek": 106068, "start": 1060.68, "end": 1066.5600000000002, "text": " and yeah, we basically use that for dynamic instrumentation on iOS and Android applications.", "tokens": [293, 1338, 11, 321, 1936, 764, 300, 337, 8546, 7198, 399, 322, 17430, 293, 8853, 5821, 13], "temperature": 0.0, "avg_logprob": -0.20781900527629446, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.00019074715964961797}, {"id": 209, "seek": 106068, "start": 1066.5600000000002, "end": 1070.52, "text": " So you can use R2 Frida to have like a R2 interface for interfacing with Frida, which", "tokens": [407, 291, 393, 764, 497, 17, 1526, 2887, 281, 362, 411, 257, 497, 17, 9226, 337, 14510, 5615, 365, 1526, 2887, 11, 597], "temperature": 0.0, "avg_logprob": -0.20781900527629446, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.00019074715964961797}, {"id": 210, "seek": 106068, "start": 1070.52, "end": 1076.5600000000002, "text": " means that you don't need to type long JavaScript one-liners, you can also use R2 comments like", "tokens": [1355, 300, 291, 500, 380, 643, 281, 2010, 938, 15778, 472, 12, 5045, 433, 11, 291, 393, 611, 764, 497, 17, 3053, 411], "temperature": 0.0, "avg_logprob": -0.20781900527629446, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.00019074715964961797}, {"id": 211, "seek": 106068, "start": 1076.5600000000002, "end": 1082.44, "text": " which are pretty mnemonic and easy to type, if you know them, and there is also support", "tokens": [597, 366, 1238, 275, 25989, 11630, 293, 1858, 281, 2010, 11, 498, 291, 458, 552, 11, 293, 456, 307, 611, 1406], "temperature": 0.0, "avg_logprob": -0.20781900527629446, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.00019074715964961797}, {"id": 212, "seek": 108244, "start": 1082.44, "end": 1090.44, "text": " for external assemblers like NuoGas or the Unicorn library, which is kind of like a stripping", "tokens": [337, 8320, 8438, 11977, 411, 13612, 78, 38, 296, 420, 264, 1156, 23115, 6405, 11, 597, 307, 733, 295, 411, 257, 3575, 3759], "temperature": 0.0, "avg_logprob": -0.21352461109990659, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.00014788322732783854}, {"id": 213, "seek": 108244, "start": 1090.44, "end": 1098.64, "text": " code from LVM, and there is also program solvers like Radius, SteelSol for Anger that are plugins", "tokens": [3089, 490, 441, 53, 44, 11, 293, 456, 307, 611, 1461, 1404, 840, 411, 9654, 4872, 11, 26038, 50, 401, 337, 4521, 260, 300, 366, 33759], "temperature": 0.0, "avg_logprob": -0.21352461109990659, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.00014788322732783854}, {"id": 214, "seek": 108244, "start": 1098.64, "end": 1102.1200000000001, "text": " that basically you define some constraints, you have like a function and you define, okay", "tokens": [300, 1936, 291, 6964, 512, 18491, 11, 291, 362, 411, 257, 2445, 293, 291, 6964, 11, 1392], "temperature": 0.0, "avg_logprob": -0.21352461109990659, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.00014788322732783854}, {"id": 215, "seek": 108244, "start": 1102.1200000000001, "end": 1105.56, "text": " I want to know which are the arguments that I need to pass to this function to reach these", "tokens": [286, 528, 281, 458, 597, 366, 264, 12869, 300, 286, 643, 281, 1320, 281, 341, 2445, 281, 2524, 613], "temperature": 0.0, "avg_logprob": -0.21352461109990659, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.00014788322732783854}, {"id": 216, "seek": 108244, "start": 1105.56, "end": 1110.8400000000001, "text": " specific others, like you want to know for example if it's possible to create like a", "tokens": [2685, 2357, 11, 411, 291, 528, 281, 458, 337, 1365, 498, 309, 311, 1944, 281, 1884, 411, 257], "temperature": 0.0, "avg_logprob": -0.21352461109990659, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.00014788322732783854}, {"id": 217, "seek": 111084, "start": 1110.84, "end": 1116.56, "text": " buffer overflow in a specific variable in a local stack, or you want to define which,", "tokens": [21762, 37772, 294, 257, 2685, 7006, 294, 257, 2654, 8630, 11, 420, 291, 528, 281, 6964, 597, 11], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 218, "seek": 111084, "start": 1116.56, "end": 1120.12, "text": " or you want to know which is the password that matches a specific crypto algorithm,", "tokens": [420, 291, 528, 281, 458, 597, 307, 264, 11524, 300, 10676, 257, 2685, 17240, 9284, 11], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 219, "seek": 111084, "start": 1120.12, "end": 1124.48, "text": " so you can use that to define, okay, I want to know which is the amount, the block of", "tokens": [370, 291, 393, 764, 300, 281, 6964, 11, 1392, 11, 286, 528, 281, 458, 597, 307, 264, 2372, 11, 264, 3461, 295], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 220, "seek": 111084, "start": 1124.48, "end": 1129.76, "text": " bytes of one specific length that generate this hash, for example, things like that,", "tokens": [36088, 295, 472, 2685, 4641, 300, 8460, 341, 22019, 11, 337, 1365, 11, 721, 411, 300, 11], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 221, "seek": 111084, "start": 1129.76, "end": 1134.52, "text": " and these won't be brute forcing, it's like using program solvers like Z3 and so on, so", "tokens": [293, 613, 1582, 380, 312, 47909, 19030, 11, 309, 311, 411, 1228, 1461, 1404, 840, 411, 1176, 18, 293, 370, 322, 11, 370], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 222, "seek": 111084, "start": 1134.52, "end": 1139.6, "text": " there is like different plugins that are integrated in R2 to use from R2 comments, and then you", "tokens": [456, 307, 411, 819, 33759, 300, 366, 10919, 294, 497, 17, 281, 764, 490, 497, 17, 3053, 11, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.17104927820103769, "compression_ratio": 1.8257839721254356, "no_speech_prob": 0.00019849554519169033}, {"id": 223, "seek": 113960, "start": 1139.6, "end": 1145.3999999999999, "text": " can define the preconditions, post-conditions, and the boundaries of the function to emulate.", "tokens": [393, 6964, 264, 4346, 684, 2451, 11, 2183, 12, 18882, 2451, 11, 293, 264, 13180, 295, 264, 2445, 281, 45497, 13], "temperature": 0.0, "avg_logprob": -0.18211028922317374, "compression_ratio": 1.849802371541502, "no_speech_prob": 9.136835433309898e-05}, {"id": 224, "seek": 113960, "start": 1145.3999999999999, "end": 1148.24, "text": " Then there is also support for parsing that structure, there is support for Kaitai, there", "tokens": [1396, 456, 307, 611, 1406, 337, 21156, 278, 300, 3877, 11, 456, 307, 1406, 337, 45791, 1301, 11, 456], "temperature": 0.0, "avg_logprob": -0.18211028922317374, "compression_ratio": 1.849802371541502, "no_speech_prob": 9.136835433309898e-05}, {"id": 225, "seek": 113960, "start": 1148.24, "end": 1153.76, "text": " is support for poke, this was integrated last week, because I didn't know it was possible", "tokens": [307, 1406, 337, 19712, 11, 341, 390, 10919, 1036, 1243, 11, 570, 286, 994, 380, 458, 309, 390, 1944], "temperature": 0.0, "avg_logprob": -0.18211028922317374, "compression_ratio": 1.849802371541502, "no_speech_prob": 9.136835433309898e-05}, {"id": 226, "seek": 113960, "start": 1153.76, "end": 1159.8, "text": " to have like a library of poke, I was seeing it as a program, not a library, so it's integrated", "tokens": [281, 362, 411, 257, 6405, 295, 19712, 11, 286, 390, 2577, 309, 382, 257, 1461, 11, 406, 257, 6405, 11, 370, 309, 311, 10919], "temperature": 0.0, "avg_logprob": -0.18211028922317374, "compression_ratio": 1.849802371541502, "no_speech_prob": 9.136835433309898e-05}, {"id": 227, "seek": 113960, "start": 1159.8, "end": 1165.6799999999998, "text": " but it's not fully integrated, so I plan to continue integrating it to use like for disassembling,", "tokens": [457, 309, 311, 406, 4498, 10919, 11, 370, 286, 1393, 281, 2354, 26889, 309, 281, 764, 411, 337, 717, 29386, 1688, 11], "temperature": 0.0, "avg_logprob": -0.18211028922317374, "compression_ratio": 1.849802371541502, "no_speech_prob": 9.136835433309898e-05}, {"id": 228, "seek": 116568, "start": 1165.68, "end": 1170.4, "text": " for parsing, headers, etc.", "tokens": [337, 21156, 278, 11, 45101, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 229, "seek": 116568, "start": 1170.4, "end": 1172.6000000000001, "text": " So what can you do with R2 Frida?", "tokens": [407, 437, 393, 291, 360, 365, 497, 17, 1526, 2887, 30], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 230, "seek": 116568, "start": 1172.6000000000001, "end": 1178.92, "text": " R2 Frida is basically, as I said before, it's front end for Frida, you can run scripts", "tokens": [497, 17, 1526, 2887, 307, 1936, 11, 382, 286, 848, 949, 11, 309, 311, 1868, 917, 337, 1526, 2887, 11, 291, 393, 1190, 23294], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 231, "seek": 116568, "start": 1178.92, "end": 1185.0, "text": " in your host, in your agent site, so you can write a JavaScript program that runs in R2,", "tokens": [294, 428, 3975, 11, 294, 428, 9461, 3621, 11, 370, 291, 393, 2464, 257, 15778, 1461, 300, 6676, 294, 497, 17, 11], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 232, "seek": 116568, "start": 1185.0, "end": 1189.52, "text": " but it can be also loaded in the remote site, and you can load and unload plugins, so you", "tokens": [457, 309, 393, 312, 611, 13210, 294, 264, 8607, 3621, 11, 293, 291, 393, 3677, 293, 32165, 33759, 11, 370, 291], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 233, "seek": 116568, "start": 1189.52, "end": 1193.96, "text": " can basically extend the R2 Frida comment set with JavaScript plugins that are loaded", "tokens": [393, 1936, 10101, 264, 497, 17, 1526, 2887, 2871, 992, 365, 15778, 33759, 300, 366, 13210], "temperature": 0.0, "avg_logprob": -0.20075855583980165, "compression_ratio": 1.7682403433476395, "no_speech_prob": 0.0002614317345432937}, {"id": 234, "seek": 119396, "start": 1193.96, "end": 1196.04, "text": " and unloaded at runtime.", "tokens": [293, 32165, 292, 412, 34474, 13], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 235, "seek": 119396, "start": 1196.04, "end": 1200.16, "text": " It's also scriptable with R2 Pipe, so you can write a program in Python, JavaScript,", "tokens": [467, 311, 611, 5755, 712, 365, 497, 17, 430, 6527, 11, 370, 291, 393, 2464, 257, 1461, 294, 15329, 11, 15778, 11], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 236, "seek": 119396, "start": 1200.16, "end": 1206.4, "text": " or the language you like, that interacts and automates comments and actions in the host", "tokens": [420, 264, 2856, 291, 411, 11, 300, 43582, 293, 3553, 1024, 3053, 293, 5909, 294, 264, 3975], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 237, "seek": 119396, "start": 1206.4, "end": 1209.16, "text": " site or the remote site of the Frida site.", "tokens": [3621, 420, 264, 8607, 3621, 295, 264, 1526, 2887, 3621, 13], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 238, "seek": 119396, "start": 1209.16, "end": 1214.04, "text": " So you can spawn applications, you can attach to local remote processes, you can use different", "tokens": [407, 291, 393, 17088, 5821, 11, 291, 393, 5085, 281, 2654, 8607, 7555, 11, 291, 393, 764, 819], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 239, "seek": 119396, "start": 1214.04, "end": 1218.1200000000001, "text": " protocol or communication channels like USB, TCP, etc.", "tokens": [10336, 420, 6101, 9235, 411, 10109, 11, 48965, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.18951527759282275, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.00033830758184194565}, {"id": 240, "seek": 121812, "start": 1218.12, "end": 1226.84, "text": " You can remote the file systems, you can use that for interfacing with tracing APIs, profiling,", "tokens": [509, 393, 8607, 264, 3991, 3652, 11, 291, 393, 764, 300, 337, 14510, 5615, 365, 25262, 21445, 11, 1740, 4883, 11], "temperature": 0.0, "avg_logprob": -0.22257263843829816, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.00022182885732036084}, {"id": 241, "seek": 121812, "start": 1226.84, "end": 1232.9599999999998, "text": " and also supports extracting metadata from Java, Dalvik, Objective-C, and Swift support", "tokens": [293, 611, 9346, 49844, 26603, 490, 10745, 11, 17357, 42252, 11, 24753, 488, 12, 34, 11, 293, 25539, 1406], "temperature": 0.0, "avg_logprob": -0.22257263843829816, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.00022182885732036084}, {"id": 242, "seek": 121812, "start": 1232.9599999999998, "end": 1236.6799999999998, "text": " will be ready by the end of this year, because right now it's supported, but it's kind of", "tokens": [486, 312, 1919, 538, 264, 917, 295, 341, 1064, 11, 570, 558, 586, 309, 311, 8104, 11, 457, 309, 311, 733, 295], "temperature": 0.0, "avg_logprob": -0.22257263843829816, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.00022182885732036084}, {"id": 243, "seek": 121812, "start": 1236.6799999999998, "end": 1242.1599999999999, "text": " like unstable, and the API is changing, so yeah, sort of like it will get better.", "tokens": [411, 23742, 11, 293, 264, 9362, 307, 4473, 11, 370, 1338, 11, 1333, 295, 411, 309, 486, 483, 1101, 13], "temperature": 0.0, "avg_logprob": -0.22257263843829816, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.00022182885732036084}, {"id": 244, "seek": 121812, "start": 1242.1599999999999, "end": 1245.36, "text": " So let's talk about R2 Pipe.", "tokens": [407, 718, 311, 751, 466, 497, 17, 430, 6527, 13], "temperature": 0.0, "avg_logprob": -0.22257263843829816, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.00022182885732036084}, {"id": 245, "seek": 124536, "start": 1245.36, "end": 1251.08, "text": " Once the release, well, the first release that they did this year was the 5.8.0, I planned", "tokens": [3443, 264, 4374, 11, 731, 11, 264, 700, 4374, 300, 436, 630, 341, 1064, 390, 264, 1025, 13, 23, 13, 15, 11, 286, 8589], "temperature": 0.0, "avg_logprob": -0.21871905856662327, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.0005279894103296101}, {"id": 246, "seek": 124536, "start": 1251.08, "end": 1256.36, "text": " to keep ABA stable, actually I use ABDF in the CI, so every comment or pull request that", "tokens": [281, 1066, 316, 9295, 8351, 11, 767, 286, 764, 13838, 35, 37, 294, 264, 37777, 11, 370, 633, 2871, 420, 2235, 5308, 300], "temperature": 0.0, "avg_logprob": -0.21871905856662327, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.0005279894103296101}, {"id": 247, "seek": 124536, "start": 1256.36, "end": 1260.52, "text": " people send to the project, they verify that it's ABA stable.", "tokens": [561, 2845, 281, 264, 1716, 11, 436, 16888, 300, 309, 311, 316, 9295, 8351, 13], "temperature": 0.0, "avg_logprob": -0.21871905856662327, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.0005279894103296101}, {"id": 248, "seek": 124536, "start": 1260.52, "end": 1266.32, "text": " This means that I'm not breaking the ABI, you can rebuild or update R2 without recompiling", "tokens": [639, 1355, 300, 286, 478, 406, 7697, 264, 316, 11291, 11, 291, 393, 16877, 420, 5623, 497, 17, 1553, 48000, 4883], "temperature": 0.0, "avg_logprob": -0.21871905856662327, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.0005279894103296101}, {"id": 249, "seek": 124536, "start": 1266.32, "end": 1270.04, "text": " all the plugins or the tools that are using R2 libraries.", "tokens": [439, 264, 33759, 420, 264, 3873, 300, 366, 1228, 497, 17, 15148, 13], "temperature": 0.0, "avg_logprob": -0.21871905856662327, "compression_ratio": 1.541501976284585, "no_speech_prob": 0.0005279894103296101}, {"id": 250, "seek": 127004, "start": 1270.04, "end": 1275.84, "text": " This is pretty cool, and the thing is that I was having some kind of contract with myself", "tokens": [639, 307, 1238, 1627, 11, 293, 264, 551, 307, 300, 286, 390, 1419, 512, 733, 295, 4364, 365, 2059], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 251, "seek": 127004, "start": 1275.84, "end": 1280.28, "text": " that I don't break ABI, but this is something that you end up doing Ruby when code by hand,", "tokens": [300, 286, 500, 380, 1821, 316, 11291, 11, 457, 341, 307, 746, 300, 291, 917, 493, 884, 19907, 562, 3089, 538, 1011, 11], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 252, "seek": 127004, "start": 1280.28, "end": 1285.92, "text": " and having a tool that can automate this is great.", "tokens": [293, 1419, 257, 2290, 300, 393, 31605, 341, 307, 869, 13], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 253, "seek": 127004, "start": 1285.92, "end": 1291.52, "text": " But I wanted to have a runtime, something that you can run from R2, like interpreter,", "tokens": [583, 286, 1415, 281, 362, 257, 34474, 11, 746, 300, 291, 393, 1190, 490, 497, 17, 11, 411, 34132, 11], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 254, "seek": 127004, "start": 1291.52, "end": 1298.56, "text": " that is not a custom language or external library that needs to be integrated and it's", "tokens": [300, 307, 406, 257, 2375, 2856, 420, 8320, 6405, 300, 2203, 281, 312, 10919, 293, 309, 311], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 255, "seek": 127004, "start": 1298.56, "end": 1299.56, "text": " really big.", "tokens": [534, 955, 13], "temperature": 0.0, "avg_logprob": -0.17803849906564873, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00021457871480379254}, {"id": 256, "seek": 129956, "start": 1299.56, "end": 1304.56, "text": " I was experimenting for some time with different languages and realizing that QuickJS is the", "tokens": [286, 390, 29070, 337, 512, 565, 365, 819, 8650, 293, 16734, 300, 12101, 41, 50, 307, 264], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 257, "seek": 129956, "start": 1304.56, "end": 1310.8799999999999, "text": " only option, so even Lua is using setjump, so you cannot compile with Lua as a WebAssembly", "tokens": [787, 3614, 11, 370, 754, 441, 4398, 307, 1228, 992, 73, 1420, 11, 370, 291, 2644, 31413, 365, 441, 4398, 382, 257, 9573, 10884, 19160], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 258, "seek": 129956, "start": 1310.8799999999999, "end": 1311.8799999999999, "text": " plugin.", "tokens": [23407, 13], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 259, "seek": 129956, "start": 1311.8799999999999, "end": 1315.56, "text": " Also, if you want to use setjump with threads, it's kind of a mess.", "tokens": [2743, 11, 498, 291, 528, 281, 764, 992, 73, 1420, 365, 19314, 11, 309, 311, 733, 295, 257, 2082, 13], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 260, "seek": 129956, "start": 1315.56, "end": 1320.36, "text": " So I ended up picking QuickJS, which is the same JavaScript runtime that Frida is using.", "tokens": [407, 286, 4590, 493, 8867, 12101, 41, 50, 11, 597, 307, 264, 912, 15778, 34474, 300, 1526, 2887, 307, 1228, 13], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 261, "seek": 129956, "start": 1320.36, "end": 1324.84, "text": " I picked the code from there, and as long as every comment in R2 is verifying with", "tokens": [286, 6183, 264, 3089, 490, 456, 11, 293, 382, 938, 382, 633, 2871, 294, 497, 17, 307, 1306, 5489, 365], "temperature": 0.0, "avg_logprob": -0.2148070455599232, "compression_ratio": 1.5672727272727274, "no_speech_prob": 0.0006984047358855605}, {"id": 262, "seek": 132484, "start": 1324.84, "end": 1328.9599999999998, "text": " fuzzers, other sanitizers, and so on, I end up finding a lot of issues there.", "tokens": [283, 16740, 433, 11, 661, 24533, 22525, 11, 293, 370, 322, 11, 286, 917, 493, 5006, 257, 688, 295, 2663, 456, 13], "temperature": 0.0, "avg_logprob": -0.1711763043269933, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.0007211962947621942}, {"id": 263, "seek": 132484, "start": 1328.9599999999998, "end": 1336.28, "text": " I sent like 12 patches to the project, so it's basically the fork that is used by Frida.", "tokens": [286, 2279, 411, 2272, 26531, 281, 264, 1716, 11, 370, 309, 311, 1936, 264, 17716, 300, 307, 1143, 538, 1526, 2887, 13], "temperature": 0.0, "avg_logprob": -0.1711763043269933, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.0007211962947621942}, {"id": 264, "seek": 132484, "start": 1336.28, "end": 1341.08, "text": " So all these patches are upstream now, and the idea is basically that you can use TypeScript", "tokens": [407, 439, 613, 26531, 366, 33915, 586, 11, 293, 264, 1558, 307, 1936, 300, 291, 393, 764, 15576, 14237], "temperature": 0.0, "avg_logprob": -0.1711763043269933, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.0007211962947621942}, {"id": 265, "seek": 132484, "start": 1341.08, "end": 1346.12, "text": " and JavaScript from R2, and you can write code like this.", "tokens": [293, 15778, 490, 497, 17, 11, 293, 291, 393, 2464, 3089, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.1711763043269933, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.0007211962947621942}, {"id": 266, "seek": 132484, "start": 1346.12, "end": 1350.48, "text": " So you basically have an R2 pipe interface, but it's running inside R2.", "tokens": [407, 291, 1936, 362, 364, 497, 17, 11240, 9226, 11, 457, 309, 311, 2614, 1854, 497, 17, 13], "temperature": 0.0, "avg_logprob": -0.1711763043269933, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.0007211962947621942}, {"id": 267, "seek": 135048, "start": 1350.48, "end": 1356.8, "text": " You can use this from WebAssembly, so you can basically open R2.online, and then you have", "tokens": [509, 393, 764, 341, 490, 9573, 10884, 19160, 11, 370, 291, 393, 1936, 1269, 497, 17, 13, 266, 1889, 11, 293, 550, 291, 362], "temperature": 0.0, "avg_logprob": -0.18284491275219208, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.0004758051363751292}, {"id": 268, "seek": 135048, "start": 1356.8, "end": 1363.64, "text": " a terminal that you can run R2, drag and drop a binary inside the browser, and use JavaScript", "tokens": [257, 14709, 300, 291, 393, 1190, 497, 17, 11, 5286, 293, 3270, 257, 17434, 1854, 264, 11185, 11, 293, 764, 15778], "temperature": 0.0, "avg_logprob": -0.18284491275219208, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.0004758051363751292}, {"id": 269, "seek": 135048, "start": 1363.64, "end": 1368.4, "text": " to automate a bunch of actions for organizing the binary.", "tokens": [281, 31605, 257, 3840, 295, 5909, 337, 17608, 264, 17434, 13], "temperature": 0.0, "avg_logprob": -0.18284491275219208, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.0004758051363751292}, {"id": 270, "seek": 135048, "start": 1368.4, "end": 1372.0, "text": " Basically as I said before, you have a command that you run, and then you get the output", "tokens": [8537, 382, 286, 848, 949, 11, 291, 362, 257, 5622, 300, 291, 1190, 11, 293, 550, 291, 483, 264, 5598], "temperature": 0.0, "avg_logprob": -0.18284491275219208, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.0004758051363751292}, {"id": 271, "seek": 135048, "start": 1372.0, "end": 1375.6, "text": " of the command in exchange.", "tokens": [295, 264, 5622, 294, 7742, 13], "temperature": 0.0, "avg_logprob": -0.18284491275219208, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.0004758051363751292}, {"id": 272, "seek": 137560, "start": 1375.6, "end": 1381.3999999999999, "text": " As long as most of the comments in R2 speed out JSON, you can basically use the cmdj,", "tokens": [1018, 938, 382, 881, 295, 264, 3053, 294, 497, 17, 3073, 484, 31828, 11, 291, 393, 1936, 764, 264, 14668, 67, 73, 11], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 273, "seek": 137560, "start": 1381.3999999999999, "end": 1385.8, "text": " which basically get the output of the command and pass the output as JSON.", "tokens": [597, 1936, 483, 264, 5598, 295, 264, 5622, 293, 1320, 264, 5598, 382, 31828, 13], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 274, "seek": 137560, "start": 1385.8, "end": 1390.52, "text": " And then you get like a structure data that you can use for extracting it or processing", "tokens": [400, 550, 291, 483, 411, 257, 3877, 1412, 300, 291, 393, 764, 337, 49844, 309, 420, 9007], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 275, "seek": 137560, "start": 1390.52, "end": 1392.1599999999999, "text": " it with the tools you like.", "tokens": [309, 365, 264, 3873, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 276, "seek": 137560, "start": 1392.1599999999999, "end": 1397.6399999999999, "text": " I think that JavaScript and JSON are quite standard and useful nowadays, so you don't", "tokens": [286, 519, 300, 15778, 293, 31828, 366, 1596, 3832, 293, 4420, 13434, 11, 370, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 277, "seek": 137560, "start": 1397.6399999999999, "end": 1402.04, "text": " need to learn new things, but there is support for so many other languages.", "tokens": [643, 281, 1466, 777, 721, 11, 457, 456, 307, 1406, 337, 370, 867, 661, 8650, 13], "temperature": 0.0, "avg_logprob": -0.12856444962527774, "compression_ratio": 1.6653992395437263, "no_speech_prob": 0.0004904682282358408}, {"id": 278, "seek": 140204, "start": 1402.04, "end": 1407.68, "text": " Like I said here, there is Python, support, Rust, Node.js, Rabi, Guile, Nivellisp, Haskell,", "tokens": [1743, 286, 848, 510, 11, 456, 307, 15329, 11, 1406, 11, 34952, 11, 38640, 13, 25530, 11, 16781, 72, 11, 2694, 794, 11, 426, 488, 285, 7631, 11, 8646, 43723, 11], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 279, "seek": 140204, "start": 1407.68, "end": 1409.28, "text": " Dlang, Swift, etc.", "tokens": [413, 25241, 11, 25539, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 280, "seek": 140204, "start": 1409.28, "end": 1414.52, "text": " So it's very easy to write this simple interface, and you can use basically different interfaces", "tokens": [407, 309, 311, 588, 1858, 281, 2464, 341, 2199, 9226, 11, 293, 291, 393, 764, 1936, 819, 28416], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 281, "seek": 140204, "start": 1414.52, "end": 1419.96, "text": " to communicate with R2, so you can use like a fork and a pipe, or you can also use like", "tokens": [281, 7890, 365, 497, 17, 11, 370, 291, 393, 764, 411, 257, 17716, 293, 257, 11240, 11, 420, 291, 393, 611, 764, 411], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 282, "seek": 140204, "start": 1419.96, "end": 1424.36, "text": " a TCP socket or an HTTP interface, WebSockets, whatever you like.", "tokens": [257, 48965, 19741, 420, 364, 33283, 9226, 11, 9573, 50, 1560, 1385, 11, 2035, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 283, "seek": 140204, "start": 1424.36, "end": 1428.84, "text": " And for the TypeScript thing, it's pretty cool, because I'm writing like a Type description", "tokens": [400, 337, 264, 15576, 14237, 551, 11, 309, 311, 1238, 1627, 11, 570, 286, 478, 3579, 411, 257, 15576, 3855], "temperature": 0.0, "avg_logprob": -0.22765238835261417, "compression_ratio": 1.5950704225352113, "no_speech_prob": 0.00043576216557994485}, {"id": 284, "seek": 142884, "start": 1428.84, "end": 1435.48, "text": " that basically defines the APIs of R2, and also the structures that the commands are", "tokens": [300, 1936, 23122, 264, 21445, 295, 497, 17, 11, 293, 611, 264, 9227, 300, 264, 16901, 366], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 285, "seek": 142884, "start": 1435.48, "end": 1437.52, "text": " returning in JSON format.", "tokens": [12678, 294, 31828, 7877, 13], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 286, "seek": 142884, "start": 1437.52, "end": 1442.32, "text": " This means that you can get the JSON of a command, and then you can generate a schema", "tokens": [639, 1355, 300, 291, 393, 483, 264, 31828, 295, 257, 5622, 11, 293, 550, 291, 393, 8460, 257, 34078], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 287, "seek": 142884, "start": 1442.32, "end": 1443.32, "text": " out of that.", "tokens": [484, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 288, "seek": 142884, "start": 1443.32, "end": 1445.12, "text": " And this schema can be used like a Types.", "tokens": [400, 341, 34078, 393, 312, 1143, 411, 257, 5569, 5190, 13], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 289, "seek": 142884, "start": 1445.12, "end": 1453.9199999999998, "text": " So if you use TypeScript, ListServer, like the language service that autocompletes all", "tokens": [407, 498, 291, 764, 15576, 14237, 11, 17668, 31859, 331, 11, 411, 264, 2856, 2643, 300, 45833, 298, 14657, 279, 439], "temperature": 0.0, "avg_logprob": -0.2251977815732851, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.0004870228294748813}, {"id": 290, "seek": 145392, "start": 1453.92, "end": 1459.52, "text": " the code, you can basically use that for using Type to autocomplete all the code.", "tokens": [264, 3089, 11, 291, 393, 1936, 764, 300, 337, 1228, 15576, 281, 45833, 298, 17220, 439, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 291, "seek": 145392, "start": 1459.52, "end": 1464.64, "text": " So for example, you can analyze function, you press P dot I, and then you get all the", "tokens": [407, 337, 1365, 11, 291, 393, 12477, 2445, 11, 291, 1886, 430, 5893, 286, 11, 293, 550, 291, 483, 439, 264], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 292, "seek": 145392, "start": 1464.64, "end": 1468.8000000000002, "text": " function name, you can get all the basic blocks, for each basic block you can use Type to get", "tokens": [2445, 1315, 11, 291, 393, 483, 439, 264, 3875, 8474, 11, 337, 1184, 3875, 3461, 291, 393, 764, 15576, 281, 483], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 293, "seek": 145392, "start": 1468.8000000000002, "end": 1475.68, "text": " all the fields of this basic block, like the address, the amount of instructions, etc.", "tokens": [439, 264, 7909, 295, 341, 3875, 3461, 11, 411, 264, 2985, 11, 264, 2372, 295, 9415, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 294, "seek": 145392, "start": 1475.68, "end": 1478.96, "text": " And for each instruction, you can get the mnemonics, etc.", "tokens": [400, 337, 1184, 10951, 11, 291, 393, 483, 264, 275, 25989, 266, 1167, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 295, "seek": 145392, "start": 1478.96, "end": 1479.96, "text": " And everything runs.", "tokens": [400, 1203, 6676, 13], "temperature": 0.0, "avg_logprob": -0.1928694540994209, "compression_ratio": 1.986046511627907, "no_speech_prob": 0.0005025606951676309}, {"id": 296, "seek": 147996, "start": 1479.96, "end": 1486.04, "text": " I mean, you can use, like, Visual Studio Code, or NLVM, or whatever you like, or MX, I guess,", "tokens": [286, 914, 11, 291, 393, 764, 11, 411, 11, 23187, 13500, 15549, 11, 420, 426, 43, 53, 44, 11, 420, 2035, 291, 411, 11, 420, 47509, 11, 286, 2041, 11], "temperature": 0.0, "avg_logprob": -0.2615844649497909, "compression_ratio": 1.4977578475336324, "no_speech_prob": 8.231442916439846e-05}, {"id": 297, "seek": 147996, "start": 1486.04, "end": 1493.72, "text": " that's also Supercell SP, and use that for automating and scripting using these languages.", "tokens": [300, 311, 611, 4548, 4164, 8420, 11, 293, 764, 300, 337, 3553, 990, 293, 5755, 278, 1228, 613, 8650, 13], "temperature": 0.0, "avg_logprob": -0.2615844649497909, "compression_ratio": 1.4977578475336324, "no_speech_prob": 8.231442916439846e-05}, {"id": 298, "seek": 147996, "start": 1493.72, "end": 1501.2, "text": " So R2 is able to visualize data and code in so many different ways, so all this, I mean,", "tokens": [407, 497, 17, 307, 1075, 281, 23273, 1412, 293, 3089, 294, 370, 867, 819, 2098, 11, 370, 439, 341, 11, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.2615844649497909, "compression_ratio": 1.4977578475336324, "no_speech_prob": 8.231442916439846e-05}, {"id": 299, "seek": 147996, "start": 1501.2, "end": 1509.24, "text": " I can press E, so you can get the source code of the slides.", "tokens": [286, 393, 1886, 462, 11, 370, 291, 393, 483, 264, 4009, 3089, 295, 264, 9788, 13], "temperature": 0.0, "avg_logprob": -0.2615844649497909, "compression_ratio": 1.4977578475336324, "no_speech_prob": 8.231442916439846e-05}, {"id": 300, "seek": 150924, "start": 1509.24, "end": 1513.1200000000001, "text": " So you can see here, this is the contents of the slide.", "tokens": [407, 291, 393, 536, 510, 11, 341, 307, 264, 15768, 295, 264, 4137, 13], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 301, "seek": 150924, "start": 1513.1200000000001, "end": 1518.76, "text": " So it's running a bunch of comments in R2, and the output is generated inside the visual", "tokens": [407, 309, 311, 2614, 257, 3840, 295, 3053, 294, 497, 17, 11, 293, 264, 5598, 307, 10833, 1854, 264, 5056], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 302, "seek": 150924, "start": 1518.76, "end": 1522.2, "text": " mode that you saw before.", "tokens": [4391, 300, 291, 1866, 949, 13], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 303, "seek": 150924, "start": 1522.2, "end": 1526.36, "text": " So you can generate graphs, you can, from the control flow graph, you can also generate", "tokens": [407, 291, 393, 8460, 24877, 11, 291, 393, 11, 490, 264, 1969, 3095, 4295, 11, 291, 393, 611, 8460], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 304, "seek": 150924, "start": 1526.36, "end": 1531.92, "text": " like a vertical horizontal line graph, like frame things, you can disassemble, you can", "tokens": [411, 257, 9429, 12750, 1622, 4295, 11, 411, 3920, 721, 11, 291, 393, 717, 37319, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 305, "seek": 150924, "start": 1531.92, "end": 1536.96, "text": " render pictures in bit formats, in RGB format.", "tokens": [15529, 5242, 294, 857, 25879, 11, 294, 31231, 7877, 13], "temperature": 0.0, "avg_logprob": -0.1992010739770266, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0004060947394464165}, {"id": 306, "seek": 153696, "start": 1536.96, "end": 1543.0, "text": " You can also generate, like, different, like, comparing data and identifying which bytes", "tokens": [509, 393, 611, 8460, 11, 411, 11, 819, 11, 411, 11, 15763, 1412, 293, 16696, 597, 36088], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 307, "seek": 153696, "start": 1543.0, "end": 1548.68, "text": " are changing, by changing colors, you can define, like, a color for a specific bunch", "tokens": [366, 4473, 11, 538, 4473, 4577, 11, 291, 393, 6964, 11, 411, 11, 257, 2017, 337, 257, 2685, 3840], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 308, "seek": 153696, "start": 1548.68, "end": 1549.68, "text": " of addresses.", "tokens": [295, 16862, 13], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 309, "seek": 153696, "start": 1549.68, "end": 1553.96, "text": " So when you are disassembling, you can mark some regions, like, hot code, or this is,", "tokens": [407, 562, 291, 366, 717, 29386, 1688, 11, 291, 393, 1491, 512, 10682, 11, 411, 11, 2368, 3089, 11, 420, 341, 307, 11], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 310, "seek": 153696, "start": 1553.96, "end": 1558.8, "text": " like, a portion of code that you're interested, and then you get headlights for one specific", "tokens": [411, 11, 257, 8044, 295, 3089, 300, 291, 434, 3102, 11, 293, 550, 291, 483, 38487, 337, 472, 2685], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 311, "seek": 153696, "start": 1558.8, "end": 1563.52, "text": " register, so you want to highlight SP, and then you get SP highlighted in the whole", "tokens": [7280, 11, 370, 291, 528, 281, 5078, 8420, 11, 293, 550, 291, 483, 8420, 17173, 294, 264, 1379], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 312, "seek": 153696, "start": 1563.52, "end": 1565.8, "text": " disassembly, things like that.", "tokens": [717, 29386, 356, 11, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.19304892687293573, "compression_ratio": 1.85, "no_speech_prob": 0.0003495638375170529}, {"id": 313, "seek": 156580, "start": 1565.8, "end": 1573.12, "text": " But also, there is also UIs, but I'm, like, common line guys, so I prefer to use the shell.", "tokens": [583, 611, 11, 456, 307, 611, 624, 6802, 11, 457, 286, 478, 11, 411, 11, 2689, 1622, 1074, 11, 370, 286, 4382, 281, 764, 264, 8720, 13], "temperature": 0.0, "avg_logprob": -0.17959653285511754, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.002110179979354143}, {"id": 314, "seek": 156580, "start": 1573.12, "end": 1577.6399999999999, "text": " But there is, like, a Qt interface, but also I started to write, like, a new graphic interface", "tokens": [583, 456, 307, 11, 411, 11, 257, 1249, 83, 9226, 11, 457, 611, 286, 1409, 281, 2464, 11, 411, 11, 257, 777, 14089, 9226], "temperature": 0.0, "avg_logprob": -0.17959653285511754, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.002110179979354143}, {"id": 315, "seek": 156580, "start": 1577.6399999999999, "end": 1585.6, "text": " using WX Widgets, because, I mean, Qt is great, because it's big, and it solves so many things,", "tokens": [1228, 343, 55, 28331, 16284, 11, 570, 11, 286, 914, 11, 1249, 83, 307, 869, 11, 570, 309, 311, 955, 11, 293, 309, 39890, 370, 867, 721, 11], "temperature": 0.0, "avg_logprob": -0.17959653285511754, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.002110179979354143}, {"id": 316, "seek": 156580, "start": 1585.6, "end": 1591.96, "text": " but I don't like the license, it's so huge, it's getting, like, really huge, and it's", "tokens": [457, 286, 500, 380, 411, 264, 10476, 11, 309, 311, 370, 2603, 11, 309, 311, 1242, 11, 411, 11, 534, 2603, 11, 293, 309, 311], "temperature": 0.0, "avg_logprob": -0.17959653285511754, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.002110179979354143}, {"id": 317, "seek": 159196, "start": 1591.96, "end": 1596.8400000000001, "text": " not handy for the kind of things that I like to do, so when I'm developing, I like to have", "tokens": [406, 13239, 337, 264, 733, 295, 721, 300, 286, 411, 281, 360, 11, 370, 562, 286, 478, 6416, 11, 286, 411, 281, 362], "temperature": 0.0, "avg_logprob": -0.23291895682351632, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.00029269204242154956}, {"id": 318, "seek": 159196, "start": 1596.8400000000001, "end": 1602.16, "text": " fun, and I don't want to be suffering because of license, or companies that are developing", "tokens": [1019, 11, 293, 286, 500, 380, 528, 281, 312, 7755, 570, 295, 10476, 11, 420, 3431, 300, 366, 6416], "temperature": 0.0, "avg_logprob": -0.23291895682351632, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.00029269204242154956}, {"id": 319, "seek": 159196, "start": 1602.16, "end": 1603.32, "text": " things in the background.", "tokens": [721, 294, 264, 3678, 13], "temperature": 0.0, "avg_logprob": -0.23291895682351632, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.00029269204242154956}, {"id": 320, "seek": 159196, "start": 1603.32, "end": 1614.44, "text": " So I wrote so many UIs for it, too, like, in GTK, in using InBlip, also other HTML, CSS,", "tokens": [407, 286, 4114, 370, 867, 624, 6802, 337, 309, 11, 886, 11, 411, 11, 294, 17530, 42, 11, 294, 1228, 682, 14520, 647, 11, 611, 661, 17995, 11, 24387, 11], "temperature": 0.0, "avg_logprob": -0.23291895682351632, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.00029269204242154956}, {"id": 321, "seek": 159196, "start": 1614.44, "end": 1619.4, "text": " for the web UI, because I do have, like, a web server inside, so at the end, I want to", "tokens": [337, 264, 3670, 15682, 11, 570, 286, 360, 362, 11, 411, 11, 257, 3670, 7154, 1854, 11, 370, 412, 264, 917, 11, 286, 528, 281], "temperature": 0.0, "avg_logprob": -0.23291895682351632, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.00029269204242154956}, {"id": 322, "seek": 161940, "start": 1619.4, "end": 1625.2800000000002, "text": " have fun, and I don't want to spend time, like, learning new APIs, and so on.", "tokens": [362, 1019, 11, 293, 286, 500, 380, 528, 281, 3496, 565, 11, 411, 11, 2539, 777, 21445, 11, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.12922164245888038, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.00030027455068193376}, {"id": 323, "seek": 161940, "start": 1625.2800000000002, "end": 1630.88, "text": " So I'm writing, like, a WX Widgets API, a user interface, and the idea for this is to", "tokens": [407, 286, 478, 3579, 11, 411, 11, 257, 343, 55, 28331, 16284, 9362, 11, 257, 4195, 9226, 11, 293, 264, 1558, 337, 341, 307, 281], "temperature": 0.0, "avg_logprob": -0.12922164245888038, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.00030027455068193376}, {"id": 324, "seek": 161940, "start": 1630.88, "end": 1637.68, "text": " not follow the same flow, interaction flows that people use.", "tokens": [406, 1524, 264, 912, 3095, 11, 9285, 12867, 300, 561, 764, 13], "temperature": 0.0, "avg_logprob": -0.12922164245888038, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.00030027455068193376}, {"id": 325, "seek": 161940, "start": 1637.68, "end": 1641.6000000000001, "text": " So I want to have, like, a common line interface, but integrated in the UI.", "tokens": [407, 286, 528, 281, 362, 11, 411, 11, 257, 2689, 1622, 9226, 11, 457, 10919, 294, 264, 15682, 13], "temperature": 0.0, "avg_logprob": -0.12922164245888038, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.00030027455068193376}, {"id": 326, "seek": 161940, "start": 1641.6000000000001, "end": 1645.24, "text": " So I want to be able to have multiple windows using multiple sessions, or drag and drop", "tokens": [407, 286, 528, 281, 312, 1075, 281, 362, 3866, 9309, 1228, 3866, 11081, 11, 420, 5286, 293, 3270], "temperature": 0.0, "avg_logprob": -0.12922164245888038, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.00030027455068193376}, {"id": 327, "seek": 164524, "start": 1645.24, "end": 1650.36, "text": " things from one window to another one, instead of having, like, a big thing with panels and", "tokens": [721, 490, 472, 4910, 281, 1071, 472, 11, 2602, 295, 1419, 11, 411, 11, 257, 955, 551, 365, 13419, 293], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 328, "seek": 164524, "start": 1650.36, "end": 1653.24, "text": " the common interaction ways.", "tokens": [264, 2689, 9285, 2098, 13], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 329, "seek": 164524, "start": 1653.24, "end": 1654.96, "text": " So what's the future?", "tokens": [407, 437, 311, 264, 2027, 30], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 330, "seek": 164524, "start": 1654.96, "end": 1658.2, "text": " So there are short and long-term plans.", "tokens": [407, 456, 366, 2099, 293, 938, 12, 7039, 5482, 13], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 331, "seek": 164524, "start": 1658.2, "end": 1664.64, "text": " It all depends on my time, because most of the things are maintained or done by me.", "tokens": [467, 439, 5946, 322, 452, 565, 11, 570, 881, 295, 264, 721, 366, 17578, 420, 1096, 538, 385, 13], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 332, "seek": 164524, "start": 1664.64, "end": 1670.16, "text": " There is a lot of contributors, but they come and live, so there is, like, not really a", "tokens": [821, 307, 257, 688, 295, 45627, 11, 457, 436, 808, 293, 1621, 11, 370, 456, 307, 11, 411, 11, 406, 534, 257], "temperature": 0.0, "avg_logprob": -0.15479997793833414, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.000888664333615452}, {"id": 333, "seek": 167016, "start": 1670.16, "end": 1675.3200000000002, "text": " core developer team, or there is no really big plans for having, like, big organizations,", "tokens": [4965, 10754, 1469, 11, 420, 456, 307, 572, 534, 955, 5482, 337, 1419, 11, 411, 11, 955, 6150, 11], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 334, "seek": 167016, "start": 1675.3200000000002, "end": 1677.0400000000002, "text": " there is, and so on.", "tokens": [456, 307, 11, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 335, "seek": 167016, "start": 1677.0400000000002, "end": 1681.3200000000002, "text": " But the thing is that I want to be able to keep patching, like, stable releases.", "tokens": [583, 264, 551, 307, 300, 286, 528, 281, 312, 1075, 281, 1066, 9972, 278, 11, 411, 11, 8351, 16952, 13], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 336, "seek": 167016, "start": 1681.3200000000002, "end": 1685.92, "text": " I want to have, like, ABA stability, mainly because there is some people or companies", "tokens": [286, 528, 281, 362, 11, 411, 11, 316, 9295, 11826, 11, 8704, 570, 456, 307, 512, 561, 420, 3431], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 337, "seek": 167016, "start": 1685.92, "end": 1689.64, "text": " or users that are writing tools on top of this, and I don't want them to rewrite things", "tokens": [420, 5022, 300, 366, 3579, 3873, 322, 1192, 295, 341, 11, 293, 286, 500, 380, 528, 552, 281, 28132, 721], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 338, "seek": 167016, "start": 1689.64, "end": 1693.1200000000001, "text": " every time that I make a release or break without updating this.", "tokens": [633, 565, 300, 286, 652, 257, 4374, 420, 1821, 1553, 25113, 341, 13], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 339, "seek": 167016, "start": 1693.1200000000001, "end": 1698.72, "text": " I want to have, like, a create, so which is a Rust API that you can basically specify", "tokens": [286, 528, 281, 362, 11, 411, 11, 257, 1884, 11, 370, 597, 307, 257, 34952, 9362, 300, 291, 393, 1936, 16500], "temperature": 0.0, "avg_logprob": -0.1671948750813802, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.0004887687973678112}, {"id": 340, "seek": 169872, "start": 1698.72, "end": 1703.52, "text": " the version of R2 that you want to ship, and then this create will build R2 inside with", "tokens": [264, 3037, 295, 497, 17, 300, 291, 528, 281, 5374, 11, 293, 550, 341, 1884, 486, 1322, 497, 17, 1854, 365], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 341, "seek": 169872, "start": 1703.52, "end": 1708.28, "text": " a specific version, and then you can use your R2 statically linked inside your program.", "tokens": [257, 2685, 3037, 11, 293, 550, 291, 393, 764, 428, 497, 17, 2219, 984, 9408, 1854, 428, 1461, 13], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 342, "seek": 169872, "start": 1708.28, "end": 1714.24, "text": " So you don't need to depend on system installations or depend on other things like that.", "tokens": [407, 291, 500, 380, 643, 281, 5672, 322, 1185, 41932, 420, 5672, 322, 661, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 343, "seek": 169872, "start": 1714.24, "end": 1718.68, "text": " I want to basically reduce the tech depth, because as long as I'm alone doing most of", "tokens": [286, 528, 281, 1936, 5407, 264, 7553, 7161, 11, 570, 382, 938, 382, 286, 478, 3312, 884, 881, 295], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 344, "seek": 169872, "start": 1718.68, "end": 1720.72, "text": " the things, I don't want to depend on humans.", "tokens": [264, 721, 11, 286, 500, 380, 528, 281, 5672, 322, 6255, 13], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 345, "seek": 169872, "start": 1720.72, "end": 1724.32, "text": " So I want to reduce the amount of things that are done manually.", "tokens": [407, 286, 528, 281, 5407, 264, 2372, 295, 721, 300, 366, 1096, 16945, 13], "temperature": 0.0, "avg_logprob": -0.1287895267845219, "compression_ratio": 1.807843137254902, "no_speech_prob": 0.0003526399959810078}, {"id": 346, "seek": 172432, "start": 1724.32, "end": 1729.72, "text": " So for example, a friend of me brought, like, the flatback integration, so there is, like,", "tokens": [407, 337, 1365, 11, 257, 1277, 295, 385, 3038, 11, 411, 11, 264, 4962, 3207, 10980, 11, 370, 456, 307, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.19375845238014502, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.00032007150002755225}, {"id": 347, "seek": 172432, "start": 1729.72, "end": 1734.72, "text": " a bot that basically detects when there is, like, a new release in R2 or in Yaito, and", "tokens": [257, 10592, 300, 1936, 5531, 82, 562, 456, 307, 11, 411, 11, 257, 777, 4374, 294, 497, 17, 420, 294, 398, 1001, 78, 11, 293], "temperature": 0.0, "avg_logprob": -0.19375845238014502, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.00032007150002755225}, {"id": 348, "seek": 172432, "start": 1734.72, "end": 1738.24, "text": " when this happens, it's basically pulling the code from all the projects, generating", "tokens": [562, 341, 2314, 11, 309, 311, 1936, 8407, 264, 3089, 490, 439, 264, 4455, 11, 17746], "temperature": 0.0, "avg_logprob": -0.19375845238014502, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.00032007150002755225}, {"id": 349, "seek": 172432, "start": 1738.24, "end": 1743.32, "text": " a changelog, generating a new build, and publishing that automatically.", "tokens": [257, 1534, 338, 664, 11, 17746, 257, 777, 1322, 11, 293, 17832, 300, 6772, 13], "temperature": 0.0, "avg_logprob": -0.19375845238014502, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.00032007150002755225}, {"id": 350, "seek": 172432, "start": 1743.32, "end": 1750.6, "text": " And you basically get, like, a graphical interface for Linux and Windows for free.", "tokens": [400, 291, 1936, 483, 11, 411, 11, 257, 35942, 9226, 337, 18734, 293, 8591, 337, 1737, 13], "temperature": 0.0, "avg_logprob": -0.19375845238014502, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.00032007150002755225}, {"id": 351, "seek": 175060, "start": 1750.6, "end": 1757.28, "text": " I want to improve the code coverage and all the testing for fuzzing, and, yeah, I mean,", "tokens": [286, 528, 281, 3470, 264, 3089, 9645, 293, 439, 264, 4997, 337, 283, 3334, 8781, 11, 293, 11, 1338, 11, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.2785737063433673, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.00026297810836695135}, {"id": 352, "seek": 175060, "start": 1757.28, "end": 1763.04, "text": " there is, like, a lot of things that you can see, and if you have questions, please let", "tokens": [456, 307, 11, 411, 11, 257, 688, 295, 721, 300, 291, 393, 536, 11, 293, 498, 291, 362, 1651, 11, 1767, 718], "temperature": 0.0, "avg_logprob": -0.2785737063433673, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.00026297810836695135}, {"id": 353, "seek": 175060, "start": 1763.04, "end": 1765.1999999999998, "text": " me know after the talk with some beers.", "tokens": [385, 458, 934, 264, 751, 365, 512, 34159, 13], "temperature": 0.0, "avg_logprob": -0.2785737063433673, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.00026297810836695135}, {"id": 354, "seek": 175060, "start": 1765.1999999999998, "end": 1768.1999999999998, "text": " And I guess that everyone is hungry, so...", "tokens": [400, 286, 2041, 300, 1518, 307, 8067, 11, 370, 485], "temperature": 0.0, "avg_logprob": -0.2785737063433673, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.00026297810836695135}, {"id": 355, "seek": 176820, "start": 1768.2, "end": 1786.24, "text": " Thank you so much guys.", "tokens": [1044, 291, 370, 709, 1074, 13], "temperature": 1.0, "avg_logprob": -1.969654655456543, "compression_ratio": 0.7419354838709677, "no_speech_prob": 0.0010675368830561638}], "language": "en"}