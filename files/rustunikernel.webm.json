{"text": " Okay, now that Pierre is here, we can get started. So it's my pleasure to invite Martin to talk about Rust-based Unikernel. So combining the two cool words here, Unikernels and Rust and security. Go ahead, Martin. Yeah, there were two words. Okay. Hi, everyone. Thanks for coming to our talk. I'm going to be talking about Rusty Hermit, which is our Rust-based modular Unikernel for micro-VMs. Who are we? This is us. So there's Stefan, who initiated the project a few years ago. There's Jonathan, and there's Martin, that's me. We are from the Institute for Automation of Complex Power Systems at RWTH Aachen University. Stefan is the academic director, Jonathan is a PhD student, and I'm a master student. I'm currently writing my master thesis with both Stefan and Jonathan as my supervisors, and yeah, I'm happy to be able to present our project to you now. Yeah, just a remark, this project has been funded through EU projects. Okay, Rusty Hermit. Rusty Hermit is a library operating system for creating Unikernel images, similar to what you've seen before with Unicraft, if you were here. It started as a Hermit Core research project around eight years ago, started by Stefan. That project was written in C and had a focus on HPC, high-performance computing. And in 2018, it was completely rewritten in Rust, every component of it, well, and assembly, but that doesn't count. Quick recap, Unikernels, very similar to a slide you've seen before presented by Simon. On the left, we have the classical Linux VM, running on a hypervisor type 2 here. And we have a fully-fledged operating system inside of the VM image, which is quite large, and has its own distinction between kernel and user space inside the virtual machine. Docker containers run on a container runtime, which has their own user space, but share the kernel with the host system, which makes it faster and more flexible. Unikernels on the right are very small. They are created by linking your application against a library operating system to create a tightly integrated Unikernel image, which can then run on machines, real or virtual machines in this case. It has the same isolation from the host or other guests as classical Linux VMs. And since it's just one application and one process, we have a single address-based operating system and no distinction between user space and kernel space. This is really good for performance, because we don't need to do any privileged context switches, which are costly otherwise. And we don't have preemptions and don't do interruptions in that case either. Also, it's very small in this case, because we can just throw away everything we don't need from the binary and have a runnable hello world image at around half a megabyte. We also focus on micro VMs. Micro VMs are a special type of virtual machine platform, which are more bare bones, because we don't need to emulate things like PCI or ACPI. This of course requires para virtualization, so the guest image needs to be specialized and know that we don't want to talk about PCI in this case. That can make the unicolonial image even smaller in some cases. And let's talk about Rust. Our unicolonial is written in Rust for a number of reasons. It's productive, it's fun, and it's safe. Rust has many modern language features that are really nice to work with compared to C or other older languages. It has a strong type system, helpful compiler errors, which are really a bliss if you're coming from C++ template errors. It's a growing ecosystem. It's being adopted by several big projects. I'm sure you've heard of Linux adopting Rust at least in some part already upstream. Rust has also great tooling. There's a very nice package manager that virtually everyone uses to put their projects into so-called crates in Rust. And there's great tooling for formatting and linting, for example. For our case in OS programming, it's also very cool that you can use very much of the Rust standard library without an operating system, like, for example, a vector for a growable dynamically allocated array, for example. The biggest point which really put Rust on the landscape is the last point, which is that Rust is a safe language. It's the first major systems programming language that guarantees memory safety. And that's pretty cool because memory safety is hard if you do it manually. I think if you've programmed C or C++ before, you might have dereferenced a null pointer and resulted in some sec void or something. And it's very cool if you don't do that. Just don't. In big projects like Chromium or other cases, it's been shown that around more than 60% of vulnerabilities are caused by memory and safety. And moving those projects to Rust is in the spirit of hoping that that alleviates this problem. I have an example, proof of coolness of the Rust language. Just one example that I picked to demonstrate the modernity and elegance. It's sometimes aka tagged unions. You can see on the bottom here that there is a generic enum type option, which is either a none or some and then has some data in it. And in Rust, these types are coupled. So the some variant of the enumeration contains the data. And it's really nice working with that. If we have an option as shown at the bottom, we can match this option and then either unpack the none or the some variant and then reuse it directly. I've kind of lied to you before because Rust is really two languages. First, there's safe Rust and unsafe Rust. What does that mean? Safe Rust is awesome because safe Rust gives us all the guarantees that we want. Things like accessing invalid pointers, which would result in use after free, double free or out of bound problems, as well as data races, are classified as undefined behavior in Rust. And using only safe Rust, these problems can't happen to you. These problems don't guarantee correctness, though. So things like race conditions, which are different from data races or logic errors can occur, which is natural, I think. When doing OS development and other low level stuff, we have a few additional requirements, though. We might want to do raw memory access for MMIO. We have to sometimes write assembly code for invoking special CPU instructions. These, unfortunately, cannot be checked by the compiler for safety invariance. That means this is not possible to do in safe Rust. This is why unsafe Rust exists. Unsafe Rust is a strict superset of safe Rust. So it means you can do everything that you can do in safe Rust, but a few things more. But you have to tell the compiler that you promise to be extra careful and don't do any bad stuff. You have special superpowers, then. You can access raw pointers and call unsafe functions, which is required for inline assembly, for example. At the bottom, you can see how we can access raw pointers or write inline assembly, which, if we are not careful, might really do bad stuff. And this is why we have to put this in unsafe blocks. That means, if something goes wrong, we can just grab for any unsafe things and rethink if we did everything correctly there. When writing this unsafe code, we have to be sure not to violate Rust's fundamental soundness property, which says that no matter what, safe Rust cannot cause undefined behavior. And if we encapsulate some unsafe code in some safe function, we have to make sure that this API cannot be misused in any way. Okay. Enough about Rust. Let's talk about Rusty Hermit again. Rusty Hermit is tightly integrated with the Rust language. It's our first language of choice for applications and very specialized. Now I'm going to show you how you would port a Rust application that runs on Linux to Rusty Hermit, which is really easy, I think. But let's see. We have a few requirements. Rust up. The first one is the Rust toolchain manager that virtually every Rust developer has already installed. We then need, of course, a hypervisor of our choice. We can either use the ubiquitous QEMU or U-Hive. U-Hive is a specialized hypervisor created by us in Rust, of course, that is specialized for the Rusty Hermit operating system to have really fast API between those two. If we are compiling with simultaneous multiprocessing for Intel processors, we also need nothing, but that's not important if you don't need that. Okay. This is a bare-bones Rust project. We have a cargo tumble, which is a manifest file for the cargo package manager, which describes the package metadata, and it just says hello world, version, addition, something. Not very important. We have then our main source file, the main RS, which is just a main function and prints hello world. Everything that we need to do to get Rusty Hermit support is first add a Rusty Hermit dependency. It's written a bit complicated to just include this dependency if we actually compile for the Hermit operating system. Then we just need to add two more lines to the main RS to import this dependency. What this does then is that Hermit sys in the background transparently builds the Hermit kernel, the library operating system, and then by importing it like this, we make sure we actually link against this. What we then get is a runnable unicarnal image that can be run in Quemo or U-Hive. To then build this, we have to pin a Rust compiler version because we have some internal things that require that, but we're working on getting rid of that and then just build it. We say cargo build, then specify the Hermit target, which is our target, and then we tell it to build the standard library on the fly because we are small yet and only tier three target, which is why Rust does not support us natively yet, but we support Rust. There was easy. To make sure that all of you can believe me, I have prepared a small demo. I have to get on this screen. Right here you can see exactly the project I talked about. It's just a hello world with the Hermit CSS dependency. It's a main RS, which does hello world. Then we can go ahead and open a terminal, then do cargo build, which is really fast right now because I pre-built it. Normally it takes around one minute on this machine I'm logged into. Then we can run it on you have hello world. To make sure that we didn't cheat, I can also show you the verbose messages, which tells you I have to please print the kernel messages along with it. We can see that there's Rust, the Hermit booting and initializing all the hardware and preparing the memory and everything and then in the end jumping into our application and printing hello world. After that, there's just shut down. Okay, back to the presentation. Yes. Okay, now a bit about our modularity story in Rusty Hermit. There are several modularity stories. The first one is user facing. This is the same similar dependency declaration in our cargo manifest as before, but a little bit expanded. We added features. Features are a thing in the cargo package manager that allows us to select and configure conditional compilation in our dependency. In this case, Hermit's is. We use this to be able to specify in this manner which features we want to be present in the unicolonel image. In this case, I enabled SMP, TCP and DHCP4 and disabled PCI and ACPI. This means that this should be runnable in a micro VM, for example, with no PCI support present. Internally, we also quite modular and we're working on further modularizing our kernel. At the top, you can see the lib Hermit kernel, which has a few dependencies. The first one is a internal Hermit entry dependency, which is shared between the kernel and anything that loads and jumps into the kernel. We then have Hermit sync for internal collection of synchronization primitives like mutexes. The other crates are really provided by the Rust ecosystem, which is really rich. The linked list allocator is our allocation algorithm that we just import and then use. We can also just import and use some device drivers or architecture-specific abstractions so that we don't even have to write assembly code ourselves. Also, small TCP is our TCP stack. Just import it and configure it. We also contribute back upstream, which is cool, but this shows the strength of the Rust ecosystem and community for Rust OS development, I think. In the end, this is a broad overview of the Hermit ecosystem as it is today. On the left, you can see a unicorn image that has been built. At the top, we have the application. It's either a Rust application or a C application, although Rust application is our primary focus, which then either uses the Rust standard library or a new C library. Those are then customized by us to invoke the special syscalls into the kernel to do the required functionality, and this altogether then makes up the unicorn image. This can then be run on either our specialized virtual machine monitor, U-Hive, or a generic VM like Kimu. For Kimu, we have a Rusty loader, which then chain loads our unicorn image, and Rusty loader supports some boot protocols, as you can see here. That's been the main part. What are we working on right now? I'm working on the first three things. Further code-based oxidization, which means making it more Rusty. That means applying more Rust idioms more thoroughly, because there have been a few C-isms that we've been stuck with from the original part. I'm personally also working on Miri support, also as part of my master thesis. Miri is an interpreter for Rust, which initially sounds strange, but using Miri, we can spot a few cases of undefined behavior if we do something wrong in unsafe code. If something runs in Miri, though, that doesn't mean that this is guaranteed to be correct, but it can help us in some cases. Third point is more modularization, and I already talked about that. It's about spinning out internal drivers, for example, in separate projects and crates. Then TCPI stack overhaul is something that Stefan is currently working on, and U-Hive network overhaul is something that Jonathan oversees. We are also generally working on firecracker support and arm support, both of which have working prototypes, but have not really been mainline that much. Please find us at GitHub. We are always happy to have conversations and contributions. Yeah, that's been it. Thanks for listening. Okay, any questions for Martin? Unikernels, raw security. All righty. There's one. Yeah, I just want to know what the subprime focus of this project. So do you have some industry which is already picking up on Hermit, or is it pure science so far? What are the plans? As far as I understand, it started as a research project, and it's much there now, I think, Stefan? Yeah, it's still in research project, but we use it in two U-projects, and they are mostly partners from the cloud area and edge computing, and we want to use it here. Thanks. Hey, thank you for your talk. I have a question. As far as I know, the original C implementation supported quite a few more targets than only Rust and C. As far as I remember, you could run Go code as well, and Fortran, and some other stuff that linked against G-Lib C, if I'm remembering correctly. New Lib, I think. And New Lib, is there any plan to open up your targets as well for the new Rust implementation to support some more stuff, not only Rust and C? So as far as I've been there, it's been only Rust. I'm not that old into the project. I'm not sure what the plans are on further supporting that. We currently have bare-bound support for C, and I don't think the Go implementation is currently working, and it's possible to get it working, but we are not really working on that actively, I think. So, any plans for RISC-5 support? We have a quick press from RISC-5 support. This is also done by two students, but didn't need time to analyze this. So it's there, but a lack of time. Okay, so proof of concept is working, but not upstream yet. This question obviously has to be asked, is there async support? Is there what? Async support. Async. Rust async. We have a runtime, or like async runtime. I think not mainline yet, right? So the kernel uses it internally for networking, and I think the exposure to user space via Mio or something is not merged upstream, but it's something that we are actively interested in. Anything else? If not, thank you again, Martin. Thank you all for coming.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.4, "text": " Okay, now that Pierre is here, we can get started.", "tokens": [1033, 11, 586, 300, 28461, 307, 510, 11, 321, 393, 483, 1409, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 1, "seek": 0, "start": 11.4, "end": 19.32, "text": " So it's my pleasure to invite Martin to talk about Rust-based Unikernel.", "tokens": [407, 309, 311, 452, 6834, 281, 7980, 9184, 281, 751, 466, 34952, 12, 6032, 1156, 1035, 1248, 338, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 2, "seek": 0, "start": 19.32, "end": 24.28, "text": " So combining the two cool words here, Unikernels and Rust and security.", "tokens": [407, 21928, 264, 732, 1627, 2283, 510, 11, 1156, 1035, 1248, 1625, 293, 34952, 293, 3825, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 3, "seek": 0, "start": 24.28, "end": 25.28, "text": " Go ahead, Martin.", "tokens": [1037, 2286, 11, 9184, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 4, "seek": 0, "start": 25.28, "end": 27.28, "text": " Yeah, there were two words.", "tokens": [865, 11, 456, 645, 732, 2283, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 5, "seek": 0, "start": 27.28, "end": 28.28, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 6, "seek": 0, "start": 28.28, "end": 29.28, "text": " Hi, everyone.", "tokens": [2421, 11, 1518, 13], "temperature": 0.0, "avg_logprob": -0.2869856271399073, "compression_ratio": 1.434065934065934, "no_speech_prob": 0.16184015572071075}, {"id": 7, "seek": 2928, "start": 29.28, "end": 31.48, "text": " Thanks for coming to our talk.", "tokens": [2561, 337, 1348, 281, 527, 751, 13], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 8, "seek": 2928, "start": 31.48, "end": 37.64, "text": " I'm going to be talking about Rusty Hermit, which is our Rust-based modular Unikernel", "tokens": [286, 478, 516, 281, 312, 1417, 466, 34952, 88, 21842, 270, 11, 597, 307, 527, 34952, 12, 6032, 31111, 1156, 1035, 1248, 338], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 9, "seek": 2928, "start": 37.64, "end": 38.64, "text": " for micro-VMs.", "tokens": [337, 4532, 12, 53, 26386, 13], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 10, "seek": 2928, "start": 38.64, "end": 40.44, "text": " Who are we?", "tokens": [2102, 366, 321, 30], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 11, "seek": 2928, "start": 40.44, "end": 44.56, "text": " This is us.", "tokens": [639, 307, 505, 13], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 12, "seek": 2928, "start": 44.56, "end": 49.120000000000005, "text": " So there's Stefan, who initiated the project a few years ago.", "tokens": [407, 456, 311, 32158, 11, 567, 28578, 264, 1716, 257, 1326, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 13, "seek": 2928, "start": 49.120000000000005, "end": 52.6, "text": " There's Jonathan, and there's Martin, that's me.", "tokens": [821, 311, 15471, 11, 293, 456, 311, 9184, 11, 300, 311, 385, 13], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 14, "seek": 2928, "start": 52.6, "end": 58.400000000000006, "text": " We are from the Institute for Automation of Complex Power Systems at RWTH Aachen University", "tokens": [492, 366, 490, 264, 9446, 337, 24619, 399, 295, 41184, 7086, 27059, 412, 42513, 9620, 316, 11646, 3535], "temperature": 0.0, "avg_logprob": -0.2533904102361091, "compression_ratio": 1.4732510288065843, "no_speech_prob": 0.00012675498146563768}, {"id": 15, "seek": 5840, "start": 58.4, "end": 66.28, "text": ". Stefan is the academic director, Jonathan is a PhD student, and I'm a master student.", "tokens": [2411, 32158, 307, 264, 7778, 5391, 11, 15471, 307, 257, 14476, 3107, 11, 293, 286, 478, 257, 4505, 3107, 13], "temperature": 0.0, "avg_logprob": -0.2619084822825896, "compression_ratio": 1.5445544554455446, "no_speech_prob": 8.060815889621153e-05}, {"id": 16, "seek": 5840, "start": 66.28, "end": 74.12, "text": " I'm currently writing my master thesis with both Stefan and Jonathan as my supervisors,", "tokens": [286, 478, 4362, 3579, 452, 4505, 22288, 365, 1293, 32158, 293, 15471, 382, 452, 42218, 11], "temperature": 0.0, "avg_logprob": -0.2619084822825896, "compression_ratio": 1.5445544554455446, "no_speech_prob": 8.060815889621153e-05}, {"id": 17, "seek": 5840, "start": 74.12, "end": 79.88, "text": " and yeah, I'm happy to be able to present our project to you now.", "tokens": [293, 1338, 11, 286, 478, 2055, 281, 312, 1075, 281, 1974, 527, 1716, 281, 291, 586, 13], "temperature": 0.0, "avg_logprob": -0.2619084822825896, "compression_ratio": 1.5445544554455446, "no_speech_prob": 8.060815889621153e-05}, {"id": 18, "seek": 5840, "start": 79.88, "end": 85.84, "text": " Yeah, just a remark, this project has been funded through EU projects.", "tokens": [865, 11, 445, 257, 7942, 11, 341, 1716, 575, 668, 14385, 807, 10887, 4455, 13], "temperature": 0.0, "avg_logprob": -0.2619084822825896, "compression_ratio": 1.5445544554455446, "no_speech_prob": 8.060815889621153e-05}, {"id": 19, "seek": 8584, "start": 85.84, "end": 90.08, "text": " Okay, Rusty Hermit.", "tokens": [1033, 11, 34952, 88, 21842, 270, 13], "temperature": 0.0, "avg_logprob": -0.14105180381000906, "compression_ratio": 1.4228571428571428, "no_speech_prob": 9.308516746386886e-05}, {"id": 20, "seek": 8584, "start": 90.08, "end": 95.32000000000001, "text": " Rusty Hermit is a library operating system for creating Unikernel images, similar to", "tokens": [34952, 88, 21842, 270, 307, 257, 6405, 7447, 1185, 337, 4084, 1156, 1035, 1248, 338, 5267, 11, 2531, 281], "temperature": 0.0, "avg_logprob": -0.14105180381000906, "compression_ratio": 1.4228571428571428, "no_speech_prob": 9.308516746386886e-05}, {"id": 21, "seek": 8584, "start": 95.32000000000001, "end": 100.96000000000001, "text": " what you've seen before with Unicraft, if you were here.", "tokens": [437, 291, 600, 1612, 949, 365, 1156, 299, 4469, 11, 498, 291, 645, 510, 13], "temperature": 0.0, "avg_logprob": -0.14105180381000906, "compression_ratio": 1.4228571428571428, "no_speech_prob": 9.308516746386886e-05}, {"id": 22, "seek": 8584, "start": 100.96000000000001, "end": 109.72, "text": " It started as a Hermit Core research project around eight years ago, started by Stefan.", "tokens": [467, 1409, 382, 257, 21842, 270, 14798, 2132, 1716, 926, 3180, 924, 2057, 11, 1409, 538, 32158, 13], "temperature": 0.0, "avg_logprob": -0.14105180381000906, "compression_ratio": 1.4228571428571428, "no_speech_prob": 9.308516746386886e-05}, {"id": 23, "seek": 10972, "start": 109.72, "end": 116.44, "text": " That project was written in C and had a focus on HPC, high-performance computing.", "tokens": [663, 1716, 390, 3720, 294, 383, 293, 632, 257, 1879, 322, 12557, 34, 11, 1090, 12, 50242, 15866, 13], "temperature": 0.0, "avg_logprob": -0.17788239014454377, "compression_ratio": 1.3883495145631068, "no_speech_prob": 1.542737300042063e-05}, {"id": 24, "seek": 10972, "start": 116.44, "end": 126.4, "text": " And in 2018, it was completely rewritten in Rust, every component of it, well, and assembly,", "tokens": [400, 294, 6096, 11, 309, 390, 2584, 319, 26859, 294, 34952, 11, 633, 6542, 295, 309, 11, 731, 11, 293, 12103, 11], "temperature": 0.0, "avg_logprob": -0.17788239014454377, "compression_ratio": 1.3883495145631068, "no_speech_prob": 1.542737300042063e-05}, {"id": 25, "seek": 10972, "start": 126.4, "end": 129.44, "text": " but that doesn't count.", "tokens": [457, 300, 1177, 380, 1207, 13], "temperature": 0.0, "avg_logprob": -0.17788239014454377, "compression_ratio": 1.3883495145631068, "no_speech_prob": 1.542737300042063e-05}, {"id": 26, "seek": 10972, "start": 129.44, "end": 137.16, "text": " Quick recap, Unikernels, very similar to a slide you've seen before presented by Simon.", "tokens": [12101, 20928, 11, 1156, 1035, 1248, 1625, 11, 588, 2531, 281, 257, 4137, 291, 600, 1612, 949, 8212, 538, 13193, 13], "temperature": 0.0, "avg_logprob": -0.17788239014454377, "compression_ratio": 1.3883495145631068, "no_speech_prob": 1.542737300042063e-05}, {"id": 27, "seek": 13716, "start": 137.16, "end": 144.28, "text": " On the left, we have the classical Linux VM, running on a hypervisor type 2 here.", "tokens": [1282, 264, 1411, 11, 321, 362, 264, 13735, 18734, 18038, 11, 2614, 322, 257, 9848, 16457, 2010, 568, 510, 13], "temperature": 0.0, "avg_logprob": -0.17241023835681735, "compression_ratio": 1.5871559633027523, "no_speech_prob": 4.751118103740737e-05}, {"id": 28, "seek": 13716, "start": 144.28, "end": 150.24, "text": " And we have a fully-fledged operating system inside of the VM image, which is quite large,", "tokens": [400, 321, 362, 257, 4498, 12, 69, 1493, 3004, 7447, 1185, 1854, 295, 264, 18038, 3256, 11, 597, 307, 1596, 2416, 11], "temperature": 0.0, "avg_logprob": -0.17241023835681735, "compression_ratio": 1.5871559633027523, "no_speech_prob": 4.751118103740737e-05}, {"id": 29, "seek": 13716, "start": 150.24, "end": 157.2, "text": " and has its own distinction between kernel and user space inside the virtual machine.", "tokens": [293, 575, 1080, 1065, 16844, 1296, 28256, 293, 4195, 1901, 1854, 264, 6374, 3479, 13], "temperature": 0.0, "avg_logprob": -0.17241023835681735, "compression_ratio": 1.5871559633027523, "no_speech_prob": 4.751118103740737e-05}, {"id": 30, "seek": 13716, "start": 157.2, "end": 164.44, "text": " Docker containers run on a container runtime, which has their own user space, but share", "tokens": [33772, 17089, 1190, 322, 257, 10129, 34474, 11, 597, 575, 641, 1065, 4195, 1901, 11, 457, 2073], "temperature": 0.0, "avg_logprob": -0.17241023835681735, "compression_ratio": 1.5871559633027523, "no_speech_prob": 4.751118103740737e-05}, {"id": 31, "seek": 16444, "start": 164.44, "end": 172.35999999999999, "text": " the kernel with the host system, which makes it faster and more flexible.", "tokens": [264, 28256, 365, 264, 3975, 1185, 11, 597, 1669, 309, 4663, 293, 544, 11358, 13], "temperature": 0.0, "avg_logprob": -0.12466258751718622, "compression_ratio": 1.6082474226804124, "no_speech_prob": 1.2601070011442062e-05}, {"id": 32, "seek": 16444, "start": 172.35999999999999, "end": 176.18, "text": " Unikernels on the right are very small.", "tokens": [1156, 1035, 1248, 1625, 322, 264, 558, 366, 588, 1359, 13], "temperature": 0.0, "avg_logprob": -0.12466258751718622, "compression_ratio": 1.6082474226804124, "no_speech_prob": 1.2601070011442062e-05}, {"id": 33, "seek": 16444, "start": 176.18, "end": 182.16, "text": " They are created by linking your application against a library operating system to create", "tokens": [814, 366, 2942, 538, 25775, 428, 3861, 1970, 257, 6405, 7447, 1185, 281, 1884], "temperature": 0.0, "avg_logprob": -0.12466258751718622, "compression_ratio": 1.6082474226804124, "no_speech_prob": 1.2601070011442062e-05}, {"id": 34, "seek": 16444, "start": 182.16, "end": 190.28, "text": " a tightly integrated Unikernel image, which can then run on machines, real or virtual", "tokens": [257, 21952, 10919, 1156, 1035, 1248, 338, 3256, 11, 597, 393, 550, 1190, 322, 8379, 11, 957, 420, 6374], "temperature": 0.0, "avg_logprob": -0.12466258751718622, "compression_ratio": 1.6082474226804124, "no_speech_prob": 1.2601070011442062e-05}, {"id": 35, "seek": 16444, "start": 190.28, "end": 193.04, "text": " machines in this case.", "tokens": [8379, 294, 341, 1389, 13], "temperature": 0.0, "avg_logprob": -0.12466258751718622, "compression_ratio": 1.6082474226804124, "no_speech_prob": 1.2601070011442062e-05}, {"id": 36, "seek": 19304, "start": 193.04, "end": 200.4, "text": " It has the same isolation from the host or other guests as classical Linux VMs.", "tokens": [467, 575, 264, 912, 16001, 490, 264, 3975, 420, 661, 9804, 382, 13735, 18734, 18038, 82, 13], "temperature": 0.0, "avg_logprob": -0.11234340897525649, "compression_ratio": 1.5210084033613445, "no_speech_prob": 1.1654984518827405e-05}, {"id": 37, "seek": 19304, "start": 200.4, "end": 207.48, "text": " And since it's just one application and one process, we have a single address-based operating", "tokens": [400, 1670, 309, 311, 445, 472, 3861, 293, 472, 1399, 11, 321, 362, 257, 2167, 2985, 12, 6032, 7447], "temperature": 0.0, "avg_logprob": -0.11234340897525649, "compression_ratio": 1.5210084033613445, "no_speech_prob": 1.1654984518827405e-05}, {"id": 38, "seek": 19304, "start": 207.48, "end": 211.88, "text": " system and no distinction between user space and kernel space.", "tokens": [1185, 293, 572, 16844, 1296, 4195, 1901, 293, 28256, 1901, 13], "temperature": 0.0, "avg_logprob": -0.11234340897525649, "compression_ratio": 1.5210084033613445, "no_speech_prob": 1.1654984518827405e-05}, {"id": 39, "seek": 19304, "start": 211.88, "end": 216.6, "text": " This is really good for performance, because we don't need to do any privileged context", "tokens": [639, 307, 534, 665, 337, 3389, 11, 570, 321, 500, 380, 643, 281, 360, 604, 25293, 4319], "temperature": 0.0, "avg_logprob": -0.11234340897525649, "compression_ratio": 1.5210084033613445, "no_speech_prob": 1.1654984518827405e-05}, {"id": 40, "seek": 19304, "start": 216.6, "end": 220.2, "text": " switches, which are costly otherwise.", "tokens": [19458, 11, 597, 366, 28328, 5911, 13], "temperature": 0.0, "avg_logprob": -0.11234340897525649, "compression_ratio": 1.5210084033613445, "no_speech_prob": 1.1654984518827405e-05}, {"id": 41, "seek": 22020, "start": 220.2, "end": 228.44, "text": " And we don't have preemptions and don't do interruptions in that case either.", "tokens": [400, 321, 500, 380, 362, 659, 4543, 626, 293, 500, 380, 360, 12729, 626, 294, 300, 1389, 2139, 13], "temperature": 0.0, "avg_logprob": -0.12627257162065647, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.928229332610499e-05}, {"id": 42, "seek": 22020, "start": 228.44, "end": 234.11999999999998, "text": " Also, it's very small in this case, because we can just throw away everything we don't", "tokens": [2743, 11, 309, 311, 588, 1359, 294, 341, 1389, 11, 570, 321, 393, 445, 3507, 1314, 1203, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.12627257162065647, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.928229332610499e-05}, {"id": 43, "seek": 22020, "start": 234.11999999999998, "end": 244.67999999999998, "text": " need from the binary and have a runnable hello world image at around half a megabyte.", "tokens": [643, 490, 264, 17434, 293, 362, 257, 1190, 77, 712, 7751, 1002, 3256, 412, 926, 1922, 257, 10816, 34529, 13], "temperature": 0.0, "avg_logprob": -0.12627257162065647, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.928229332610499e-05}, {"id": 44, "seek": 24468, "start": 244.68, "end": 252.52, "text": " We also focus on micro VMs. Micro VMs are a special type of virtual machine platform,", "tokens": [492, 611, 1879, 322, 4532, 18038, 82, 13, 25642, 18038, 82, 366, 257, 2121, 2010, 295, 6374, 3479, 3663, 11], "temperature": 0.0, "avg_logprob": -0.1477174318753756, "compression_ratio": 1.3945945945945946, "no_speech_prob": 5.335056812327821e-06}, {"id": 45, "seek": 24468, "start": 252.52, "end": 260.12, "text": " which are more bare bones, because we don't need to emulate things like PCI or ACPI.", "tokens": [597, 366, 544, 6949, 10491, 11, 570, 321, 500, 380, 643, 281, 45497, 721, 411, 6465, 40, 420, 8157, 31701, 13], "temperature": 0.0, "avg_logprob": -0.1477174318753756, "compression_ratio": 1.3945945945945946, "no_speech_prob": 5.335056812327821e-06}, {"id": 46, "seek": 24468, "start": 260.12, "end": 266.84000000000003, "text": " This of course requires para virtualization, so the guest image needs to be specialized", "tokens": [639, 295, 1164, 7029, 1690, 6374, 2144, 11, 370, 264, 8341, 3256, 2203, 281, 312, 19813], "temperature": 0.0, "avg_logprob": -0.1477174318753756, "compression_ratio": 1.3945945945945946, "no_speech_prob": 5.335056812327821e-06}, {"id": 47, "seek": 26684, "start": 266.84, "end": 274.79999999999995, "text": " and know that we don't want to talk about PCI in this case. That can make the unicolonial", "tokens": [293, 458, 300, 321, 500, 380, 528, 281, 751, 466, 6465, 40, 294, 341, 1389, 13, 663, 393, 652, 264, 517, 299, 38780, 831], "temperature": 0.0, "avg_logprob": -0.16779322501940605, "compression_ratio": 1.5, "no_speech_prob": 1.9509441699483432e-05}, {"id": 48, "seek": 26684, "start": 274.79999999999995, "end": 278.32, "text": " image even smaller in some cases.", "tokens": [3256, 754, 4356, 294, 512, 3331, 13], "temperature": 0.0, "avg_logprob": -0.16779322501940605, "compression_ratio": 1.5, "no_speech_prob": 1.9509441699483432e-05}, {"id": 49, "seek": 26684, "start": 278.32, "end": 284.2, "text": " And let's talk about Rust.", "tokens": [400, 718, 311, 751, 466, 34952, 13], "temperature": 0.0, "avg_logprob": -0.16779322501940605, "compression_ratio": 1.5, "no_speech_prob": 1.9509441699483432e-05}, {"id": 50, "seek": 26684, "start": 284.2, "end": 288.32, "text": " Our unicolonial is written in Rust for a number of reasons.", "tokens": [2621, 517, 299, 38780, 831, 307, 3720, 294, 34952, 337, 257, 1230, 295, 4112, 13], "temperature": 0.0, "avg_logprob": -0.16779322501940605, "compression_ratio": 1.5, "no_speech_prob": 1.9509441699483432e-05}, {"id": 51, "seek": 26684, "start": 288.32, "end": 293.96, "text": " It's productive, it's fun, and it's safe.", "tokens": [467, 311, 13304, 11, 309, 311, 1019, 11, 293, 309, 311, 3273, 13], "temperature": 0.0, "avg_logprob": -0.16779322501940605, "compression_ratio": 1.5, "no_speech_prob": 1.9509441699483432e-05}, {"id": 52, "seek": 29396, "start": 293.96, "end": 299.96, "text": " Rust has many modern language features that are really nice to work with compared to C", "tokens": [34952, 575, 867, 4363, 2856, 4122, 300, 366, 534, 1481, 281, 589, 365, 5347, 281, 383], "temperature": 0.0, "avg_logprob": -0.14641791123610276, "compression_ratio": 1.5523809523809524, "no_speech_prob": 6.597852188860998e-05}, {"id": 53, "seek": 29396, "start": 299.96, "end": 305.91999999999996, "text": " or other older languages. It has a strong type system, helpful compiler errors, which", "tokens": [420, 661, 4906, 8650, 13, 467, 575, 257, 2068, 2010, 1185, 11, 4961, 31958, 13603, 11, 597], "temperature": 0.0, "avg_logprob": -0.14641791123610276, "compression_ratio": 1.5523809523809524, "no_speech_prob": 6.597852188860998e-05}, {"id": 54, "seek": 29396, "start": 305.91999999999996, "end": 311.44, "text": " are really a bliss if you're coming from C++ template errors.", "tokens": [366, 534, 257, 31522, 498, 291, 434, 1348, 490, 383, 25472, 12379, 13603, 13], "temperature": 0.0, "avg_logprob": -0.14641791123610276, "compression_ratio": 1.5523809523809524, "no_speech_prob": 6.597852188860998e-05}, {"id": 55, "seek": 29396, "start": 311.44, "end": 317.59999999999997, "text": " It's a growing ecosystem. It's being adopted by several big projects. I'm sure you've heard", "tokens": [467, 311, 257, 4194, 11311, 13, 467, 311, 885, 12175, 538, 2940, 955, 4455, 13, 286, 478, 988, 291, 600, 2198], "temperature": 0.0, "avg_logprob": -0.14641791123610276, "compression_ratio": 1.5523809523809524, "no_speech_prob": 6.597852188860998e-05}, {"id": 56, "seek": 31760, "start": 317.6, "end": 325.04, "text": " of Linux adopting Rust at least in some part already upstream.", "tokens": [295, 18734, 32328, 34952, 412, 1935, 294, 512, 644, 1217, 33915, 13], "temperature": 0.0, "avg_logprob": -0.1493259279915456, "compression_ratio": 1.6017699115044248, "no_speech_prob": 2.0135348677285947e-05}, {"id": 57, "seek": 31760, "start": 325.04, "end": 330.96000000000004, "text": " Rust has also great tooling. There's a very nice package manager that virtually everyone", "tokens": [34952, 575, 611, 869, 46593, 13, 821, 311, 257, 588, 1481, 7372, 6598, 300, 14103, 1518], "temperature": 0.0, "avg_logprob": -0.1493259279915456, "compression_ratio": 1.6017699115044248, "no_speech_prob": 2.0135348677285947e-05}, {"id": 58, "seek": 31760, "start": 330.96000000000004, "end": 337.0, "text": " uses to put their projects into so-called crates in Rust.", "tokens": [4960, 281, 829, 641, 4455, 666, 370, 12, 11880, 941, 1024, 294, 34952, 13], "temperature": 0.0, "avg_logprob": -0.1493259279915456, "compression_ratio": 1.6017699115044248, "no_speech_prob": 2.0135348677285947e-05}, {"id": 59, "seek": 31760, "start": 337.0, "end": 341.20000000000005, "text": " And there's great tooling for formatting and linting, for example.", "tokens": [400, 456, 311, 869, 46593, 337, 39366, 293, 287, 686, 278, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1493259279915456, "compression_ratio": 1.6017699115044248, "no_speech_prob": 2.0135348677285947e-05}, {"id": 60, "seek": 31760, "start": 341.20000000000005, "end": 347.12, "text": " For our case in OS programming, it's also very cool that you can use very much of the", "tokens": [1171, 527, 1389, 294, 12731, 9410, 11, 309, 311, 611, 588, 1627, 300, 291, 393, 764, 588, 709, 295, 264], "temperature": 0.0, "avg_logprob": -0.1493259279915456, "compression_ratio": 1.6017699115044248, "no_speech_prob": 2.0135348677285947e-05}, {"id": 61, "seek": 34712, "start": 347.12, "end": 353.76, "text": " Rust standard library without an operating system, like, for example, a vector for a", "tokens": [34952, 3832, 6405, 1553, 364, 7447, 1185, 11, 411, 11, 337, 1365, 11, 257, 8062, 337, 257], "temperature": 0.0, "avg_logprob": -0.1827500479561942, "compression_ratio": 1.6122448979591837, "no_speech_prob": 2.794023930619005e-05}, {"id": 62, "seek": 34712, "start": 353.76, "end": 360.48, "text": " growable dynamically allocated array, for example.", "tokens": [1852, 712, 43492, 29772, 10225, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1827500479561942, "compression_ratio": 1.6122448979591837, "no_speech_prob": 2.794023930619005e-05}, {"id": 63, "seek": 34712, "start": 360.48, "end": 365.72, "text": " The biggest point which really put Rust on the landscape is the last point, which is", "tokens": [440, 3880, 935, 597, 534, 829, 34952, 322, 264, 9661, 307, 264, 1036, 935, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.1827500479561942, "compression_ratio": 1.6122448979591837, "no_speech_prob": 2.794023930619005e-05}, {"id": 64, "seek": 34712, "start": 365.72, "end": 372.6, "text": " that Rust is a safe language. It's the first major systems programming language that guarantees", "tokens": [300, 34952, 307, 257, 3273, 2856, 13, 467, 311, 264, 700, 2563, 3652, 9410, 2856, 300, 32567], "temperature": 0.0, "avg_logprob": -0.1827500479561942, "compression_ratio": 1.6122448979591837, "no_speech_prob": 2.794023930619005e-05}, {"id": 65, "seek": 37260, "start": 372.6, "end": 378.96000000000004, "text": " memory safety. And that's pretty cool because memory safety is hard if you do it manually.", "tokens": [4675, 4514, 13, 400, 300, 311, 1238, 1627, 570, 4675, 4514, 307, 1152, 498, 291, 360, 309, 16945, 13], "temperature": 0.0, "avg_logprob": -0.16090915679931642, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.64634943252895e-05}, {"id": 66, "seek": 37260, "start": 378.96000000000004, "end": 385.48, "text": " I think if you've programmed C or C++ before, you might have dereferenced a null pointer", "tokens": [286, 519, 498, 291, 600, 31092, 383, 420, 383, 25472, 949, 11, 291, 1062, 362, 15969, 612, 14672, 257, 18184, 23918], "temperature": 0.0, "avg_logprob": -0.16090915679931642, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.64634943252895e-05}, {"id": 67, "seek": 37260, "start": 385.48, "end": 393.72, "text": " and resulted in some sec void or something. And it's very cool if you don't do that.", "tokens": [293, 18753, 294, 512, 907, 22009, 420, 746, 13, 400, 309, 311, 588, 1627, 498, 291, 500, 380, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.16090915679931642, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.64634943252895e-05}, {"id": 68, "seek": 37260, "start": 393.72, "end": 397.40000000000003, "text": " Just don't.", "tokens": [1449, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.16090915679931642, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.64634943252895e-05}, {"id": 69, "seek": 39740, "start": 397.4, "end": 406.0, "text": " In big projects like Chromium or other cases, it's been shown that around more than 60%", "tokens": [682, 955, 4455, 411, 1721, 298, 2197, 420, 661, 3331, 11, 309, 311, 668, 4898, 300, 926, 544, 813, 4060, 4], "temperature": 0.0, "avg_logprob": -0.16640021437305516, "compression_ratio": 1.3905325443786982, "no_speech_prob": 3.318427116028033e-05}, {"id": 70, "seek": 39740, "start": 406.0, "end": 410.84, "text": " of vulnerabilities are caused by memory and safety.", "tokens": [295, 37633, 366, 7008, 538, 4675, 293, 4514, 13], "temperature": 0.0, "avg_logprob": -0.16640021437305516, "compression_ratio": 1.3905325443786982, "no_speech_prob": 3.318427116028033e-05}, {"id": 71, "seek": 39740, "start": 410.84, "end": 419.23999999999995, "text": " And moving those projects to Rust is in the spirit of hoping that that alleviates this", "tokens": [400, 2684, 729, 4455, 281, 34952, 307, 294, 264, 3797, 295, 7159, 300, 300, 33201, 1024, 341], "temperature": 0.0, "avg_logprob": -0.16640021437305516, "compression_ratio": 1.3905325443786982, "no_speech_prob": 3.318427116028033e-05}, {"id": 72, "seek": 39740, "start": 419.23999999999995, "end": 420.23999999999995, "text": " problem.", "tokens": [1154, 13], "temperature": 0.0, "avg_logprob": -0.16640021437305516, "compression_ratio": 1.3905325443786982, "no_speech_prob": 3.318427116028033e-05}, {"id": 73, "seek": 42024, "start": 420.24, "end": 429.44, "text": " I have an example, proof of coolness of the Rust language. Just one example that I picked", "tokens": [286, 362, 364, 1365, 11, 8177, 295, 1627, 1287, 295, 264, 34952, 2856, 13, 1449, 472, 1365, 300, 286, 6183], "temperature": 0.0, "avg_logprob": -0.1342434287071228, "compression_ratio": 1.4655172413793103, "no_speech_prob": 7.957875641295686e-05}, {"id": 74, "seek": 42024, "start": 429.44, "end": 440.24, "text": " to demonstrate the modernity and elegance. It's sometimes aka tagged unions.", "tokens": [281, 11698, 264, 4363, 507, 293, 14459, 719, 13, 467, 311, 2171, 28042, 40239, 24914, 13], "temperature": 0.0, "avg_logprob": -0.1342434287071228, "compression_ratio": 1.4655172413793103, "no_speech_prob": 7.957875641295686e-05}, {"id": 75, "seek": 42024, "start": 440.24, "end": 447.16, "text": " You can see on the bottom here that there is a generic enum type option, which is either", "tokens": [509, 393, 536, 322, 264, 2767, 510, 300, 456, 307, 257, 19577, 465, 449, 2010, 3614, 11, 597, 307, 2139], "temperature": 0.0, "avg_logprob": -0.1342434287071228, "compression_ratio": 1.4655172413793103, "no_speech_prob": 7.957875641295686e-05}, {"id": 76, "seek": 44716, "start": 447.16, "end": 455.6, "text": " a none or some and then has some data in it. And in Rust, these types are coupled. So the", "tokens": [257, 6022, 420, 512, 293, 550, 575, 512, 1412, 294, 309, 13, 400, 294, 34952, 11, 613, 3467, 366, 29482, 13, 407, 264], "temperature": 0.0, "avg_logprob": -0.19046101100008253, "compression_ratio": 1.56, "no_speech_prob": 1.8623546566232108e-05}, {"id": 77, "seek": 44716, "start": 455.6, "end": 461.28000000000003, "text": " some variant of the enumeration contains the data. And it's really nice working with that.", "tokens": [512, 17501, 295, 264, 465, 449, 5053, 8306, 264, 1412, 13, 400, 309, 311, 534, 1481, 1364, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.19046101100008253, "compression_ratio": 1.56, "no_speech_prob": 1.8623546566232108e-05}, {"id": 78, "seek": 44716, "start": 461.28000000000003, "end": 468.84000000000003, "text": " If we have an option as shown at the bottom, we can match this option and then either unpack", "tokens": [759, 321, 362, 364, 3614, 382, 4898, 412, 264, 2767, 11, 321, 393, 2995, 341, 3614, 293, 550, 2139, 26699], "temperature": 0.0, "avg_logprob": -0.19046101100008253, "compression_ratio": 1.56, "no_speech_prob": 1.8623546566232108e-05}, {"id": 79, "seek": 46884, "start": 468.84, "end": 478.28, "text": " the none or the some variant and then reuse it directly.", "tokens": [264, 6022, 420, 264, 512, 17501, 293, 550, 26225, 309, 3838, 13], "temperature": 0.0, "avg_logprob": -0.2047115073484533, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.4506179468298797e-05}, {"id": 80, "seek": 46884, "start": 478.28, "end": 484.88, "text": " I've kind of lied to you before because Rust is really two languages. First, there's safe", "tokens": [286, 600, 733, 295, 20101, 281, 291, 949, 570, 34952, 307, 534, 732, 8650, 13, 2386, 11, 456, 311, 3273], "temperature": 0.0, "avg_logprob": -0.2047115073484533, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.4506179468298797e-05}, {"id": 81, "seek": 46884, "start": 484.88, "end": 491.03999999999996, "text": " Rust and unsafe Rust. What does that mean?", "tokens": [34952, 293, 35948, 34952, 13, 708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.2047115073484533, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.4506179468298797e-05}, {"id": 82, "seek": 46884, "start": 491.03999999999996, "end": 497.23999999999995, "text": " Safe Rust is awesome because safe Rust gives us all the guarantees that we want.", "tokens": [27030, 34952, 307, 3476, 570, 3273, 34952, 2709, 505, 439, 264, 32567, 300, 321, 528, 13], "temperature": 0.0, "avg_logprob": -0.2047115073484533, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.4506179468298797e-05}, {"id": 83, "seek": 49724, "start": 497.24, "end": 503.2, "text": " Things like accessing invalid pointers, which would result in use after free, double free", "tokens": [9514, 411, 26440, 34702, 44548, 11, 597, 576, 1874, 294, 764, 934, 1737, 11, 3834, 1737], "temperature": 0.0, "avg_logprob": -0.16009869575500488, "compression_ratio": 1.4470588235294117, "no_speech_prob": 2.2098274712334387e-05}, {"id": 84, "seek": 49724, "start": 503.2, "end": 510.04, "text": " or out of bound problems, as well as data races, are classified as undefined behavior", "tokens": [420, 484, 295, 5472, 2740, 11, 382, 731, 382, 1412, 15484, 11, 366, 20627, 382, 674, 5666, 2001, 5223], "temperature": 0.0, "avg_logprob": -0.16009869575500488, "compression_ratio": 1.4470588235294117, "no_speech_prob": 2.2098274712334387e-05}, {"id": 85, "seek": 49724, "start": 510.04, "end": 520.5600000000001, "text": " in Rust. And using only safe Rust, these problems can't happen to you.", "tokens": [294, 34952, 13, 400, 1228, 787, 3273, 34952, 11, 613, 2740, 393, 380, 1051, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.16009869575500488, "compression_ratio": 1.4470588235294117, "no_speech_prob": 2.2098274712334387e-05}, {"id": 86, "seek": 52056, "start": 520.56, "end": 528.1999999999999, "text": " These problems don't guarantee correctness, though. So things like race conditions, which", "tokens": [1981, 2740, 500, 380, 10815, 3006, 1287, 11, 1673, 13, 407, 721, 411, 4569, 4487, 11, 597], "temperature": 0.0, "avg_logprob": -0.15352329575871848, "compression_ratio": 1.5191489361702128, "no_speech_prob": 1.8920052752946503e-05}, {"id": 87, "seek": 52056, "start": 528.1999999999999, "end": 535.3599999999999, "text": " are different from data races or logic errors can occur, which is natural, I think.", "tokens": [366, 819, 490, 1412, 15484, 420, 9952, 13603, 393, 5160, 11, 597, 307, 3303, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.15352329575871848, "compression_ratio": 1.5191489361702128, "no_speech_prob": 1.8920052752946503e-05}, {"id": 88, "seek": 52056, "start": 535.3599999999999, "end": 541.0, "text": " When doing OS development and other low level stuff, we have a few additional requirements,", "tokens": [1133, 884, 12731, 3250, 293, 661, 2295, 1496, 1507, 11, 321, 362, 257, 1326, 4497, 7728, 11], "temperature": 0.0, "avg_logprob": -0.15352329575871848, "compression_ratio": 1.5191489361702128, "no_speech_prob": 1.8920052752946503e-05}, {"id": 89, "seek": 52056, "start": 541.0, "end": 548.88, "text": " though. We might want to do raw memory access for MMIO. We have to sometimes write assembly", "tokens": [1673, 13, 492, 1062, 528, 281, 360, 8936, 4675, 2105, 337, 376, 13808, 46, 13, 492, 362, 281, 2171, 2464, 12103], "temperature": 0.0, "avg_logprob": -0.15352329575871848, "compression_ratio": 1.5191489361702128, "no_speech_prob": 1.8920052752946503e-05}, {"id": 90, "seek": 54888, "start": 548.88, "end": 557.04, "text": " code for invoking special CPU instructions. These, unfortunately, cannot be checked by", "tokens": [3089, 337, 1048, 5953, 2121, 13199, 9415, 13, 1981, 11, 7015, 11, 2644, 312, 10033, 538], "temperature": 0.0, "avg_logprob": -0.1270797180406975, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.266354906372726e-05}, {"id": 91, "seek": 54888, "start": 557.04, "end": 563.68, "text": " the compiler for safety invariance. That means this is not possible to do in safe Rust.", "tokens": [264, 31958, 337, 4514, 33270, 719, 13, 663, 1355, 341, 307, 406, 1944, 281, 360, 294, 3273, 34952, 13], "temperature": 0.0, "avg_logprob": -0.1270797180406975, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.266354906372726e-05}, {"id": 92, "seek": 54888, "start": 563.68, "end": 572.84, "text": " This is why unsafe Rust exists. Unsafe Rust is a strict superset of safe Rust. So it means", "tokens": [639, 307, 983, 35948, 34952, 8198, 13, 1156, 5790, 2106, 34952, 307, 257, 10910, 37906, 302, 295, 3273, 34952, 13, 407, 309, 1355], "temperature": 0.0, "avg_logprob": -0.1270797180406975, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.266354906372726e-05}, {"id": 93, "seek": 57284, "start": 572.84, "end": 579.44, "text": " you can do everything that you can do in safe Rust, but a few things more. But you have", "tokens": [291, 393, 360, 1203, 300, 291, 393, 360, 294, 3273, 34952, 11, 457, 257, 1326, 721, 544, 13, 583, 291, 362], "temperature": 0.0, "avg_logprob": -0.0987990444356745, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.961024155316409e-06}, {"id": 94, "seek": 57284, "start": 579.44, "end": 590.12, "text": " to tell the compiler that you promise to be extra careful and don't do any bad stuff.", "tokens": [281, 980, 264, 31958, 300, 291, 6228, 281, 312, 2857, 5026, 293, 500, 380, 360, 604, 1578, 1507, 13], "temperature": 0.0, "avg_logprob": -0.0987990444356745, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.961024155316409e-06}, {"id": 95, "seek": 57284, "start": 590.12, "end": 594.52, "text": " You have special superpowers, then. You can access raw pointers and call unsafe functions,", "tokens": [509, 362, 2121, 1687, 47953, 11, 550, 13, 509, 393, 2105, 8936, 44548, 293, 818, 35948, 6828, 11], "temperature": 0.0, "avg_logprob": -0.0987990444356745, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.961024155316409e-06}, {"id": 96, "seek": 57284, "start": 594.52, "end": 600.36, "text": " which is required for inline assembly, for example. At the bottom, you can see how we", "tokens": [597, 307, 4739, 337, 294, 1889, 12103, 11, 337, 1365, 13, 1711, 264, 2767, 11, 291, 393, 536, 577, 321], "temperature": 0.0, "avg_logprob": -0.0987990444356745, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.961024155316409e-06}, {"id": 97, "seek": 60036, "start": 600.36, "end": 608.16, "text": " can access raw pointers or write inline assembly, which, if we are not careful, might really", "tokens": [393, 2105, 8936, 44548, 420, 2464, 294, 1889, 12103, 11, 597, 11, 498, 321, 366, 406, 5026, 11, 1062, 534], "temperature": 0.0, "avg_logprob": -0.09709917561391766, "compression_ratio": 1.5811965811965811, "no_speech_prob": 2.077449971693568e-05}, {"id": 98, "seek": 60036, "start": 608.16, "end": 615.08, "text": " do bad stuff. And this is why we have to put this in unsafe blocks. That means, if something", "tokens": [360, 1578, 1507, 13, 400, 341, 307, 983, 321, 362, 281, 829, 341, 294, 35948, 8474, 13, 663, 1355, 11, 498, 746], "temperature": 0.0, "avg_logprob": -0.09709917561391766, "compression_ratio": 1.5811965811965811, "no_speech_prob": 2.077449971693568e-05}, {"id": 99, "seek": 60036, "start": 615.08, "end": 622.08, "text": " goes wrong, we can just grab for any unsafe things and rethink if we did everything correctly", "tokens": [1709, 2085, 11, 321, 393, 445, 4444, 337, 604, 35948, 721, 293, 34595, 498, 321, 630, 1203, 8944], "temperature": 0.0, "avg_logprob": -0.09709917561391766, "compression_ratio": 1.5811965811965811, "no_speech_prob": 2.077449971693568e-05}, {"id": 100, "seek": 60036, "start": 622.08, "end": 629.28, "text": " there. When writing this unsafe code, we have to be sure not to violate Rust's fundamental", "tokens": [456, 13, 1133, 3579, 341, 35948, 3089, 11, 321, 362, 281, 312, 988, 406, 281, 37478, 34952, 311, 8088], "temperature": 0.0, "avg_logprob": -0.09709917561391766, "compression_ratio": 1.5811965811965811, "no_speech_prob": 2.077449971693568e-05}, {"id": 101, "seek": 62928, "start": 629.28, "end": 636.4399999999999, "text": " soundness property, which says that no matter what, safe Rust cannot cause undefined behavior.", "tokens": [1626, 1287, 4707, 11, 597, 1619, 300, 572, 1871, 437, 11, 3273, 34952, 2644, 3082, 674, 5666, 2001, 5223, 13], "temperature": 0.0, "avg_logprob": -0.10130456565082938, "compression_ratio": 1.454054054054054, "no_speech_prob": 2.3549118850496598e-05}, {"id": 102, "seek": 62928, "start": 636.4399999999999, "end": 642.56, "text": " And if we encapsulate some unsafe code in some safe function, we have to make sure that", "tokens": [400, 498, 321, 38745, 5256, 512, 35948, 3089, 294, 512, 3273, 2445, 11, 321, 362, 281, 652, 988, 300], "temperature": 0.0, "avg_logprob": -0.10130456565082938, "compression_ratio": 1.454054054054054, "no_speech_prob": 2.3549118850496598e-05}, {"id": 103, "seek": 62928, "start": 642.56, "end": 651.52, "text": " this API cannot be misused in any way. Okay. Enough about Rust. Let's talk about Rusty", "tokens": [341, 9362, 2644, 312, 3346, 4717, 294, 604, 636, 13, 1033, 13, 19401, 466, 34952, 13, 961, 311, 751, 466, 34952, 88], "temperature": 0.0, "avg_logprob": -0.10130456565082938, "compression_ratio": 1.454054054054054, "no_speech_prob": 2.3549118850496598e-05}, {"id": 104, "seek": 65152, "start": 651.52, "end": 661.48, "text": " Hermit again. Rusty Hermit is tightly integrated with the Rust language. It's our first language", "tokens": [21842, 270, 797, 13, 34952, 88, 21842, 270, 307, 21952, 10919, 365, 264, 34952, 2856, 13, 467, 311, 527, 700, 2856], "temperature": 0.0, "avg_logprob": -0.10423218182155064, "compression_ratio": 1.4973262032085561, "no_speech_prob": 2.8402551834005862e-05}, {"id": 105, "seek": 65152, "start": 661.48, "end": 668.8, "text": " of choice for applications and very specialized. Now I'm going to show you how you would port", "tokens": [295, 3922, 337, 5821, 293, 588, 19813, 13, 823, 286, 478, 516, 281, 855, 291, 577, 291, 576, 2436], "temperature": 0.0, "avg_logprob": -0.10423218182155064, "compression_ratio": 1.4973262032085561, "no_speech_prob": 2.8402551834005862e-05}, {"id": 106, "seek": 65152, "start": 668.8, "end": 676.48, "text": " a Rust application that runs on Linux to Rusty Hermit, which is really easy, I think. But", "tokens": [257, 34952, 3861, 300, 6676, 322, 18734, 281, 34952, 88, 21842, 270, 11, 597, 307, 534, 1858, 11, 286, 519, 13, 583], "temperature": 0.0, "avg_logprob": -0.10423218182155064, "compression_ratio": 1.4973262032085561, "no_speech_prob": 2.8402551834005862e-05}, {"id": 107, "seek": 67648, "start": 676.48, "end": 682.4, "text": " let's see. We have a few requirements. Rust up. The first one is the Rust toolchain manager", "tokens": [718, 311, 536, 13, 492, 362, 257, 1326, 7728, 13, 34952, 493, 13, 440, 700, 472, 307, 264, 34952, 2290, 11509, 6598], "temperature": 0.0, "avg_logprob": -0.17253599411401993, "compression_ratio": 1.4793814432989691, "no_speech_prob": 3.022767668880988e-05}, {"id": 108, "seek": 67648, "start": 682.4, "end": 687.6800000000001, "text": " that virtually every Rust developer has already installed. We then need, of course, a hypervisor", "tokens": [300, 14103, 633, 34952, 10754, 575, 1217, 8899, 13, 492, 550, 643, 11, 295, 1164, 11, 257, 9848, 16457], "temperature": 0.0, "avg_logprob": -0.17253599411401993, "compression_ratio": 1.4793814432989691, "no_speech_prob": 3.022767668880988e-05}, {"id": 109, "seek": 67648, "start": 687.6800000000001, "end": 698.9200000000001, "text": " of our choice. We can either use the ubiquitous QEMU or U-Hive. U-Hive is a specialized hypervisor", "tokens": [295, 527, 3922, 13, 492, 393, 2139, 764, 264, 43868, 39831, 1249, 6683, 52, 420, 624, 12, 39, 488, 13, 624, 12, 39, 488, 307, 257, 19813, 9848, 16457], "temperature": 0.0, "avg_logprob": -0.17253599411401993, "compression_ratio": 1.4793814432989691, "no_speech_prob": 3.022767668880988e-05}, {"id": 110, "seek": 69892, "start": 698.92, "end": 706.4, "text": " created by us in Rust, of course, that is specialized for the Rusty Hermit operating", "tokens": [2942, 538, 505, 294, 34952, 11, 295, 1164, 11, 300, 307, 19813, 337, 264, 34952, 88, 21842, 270, 7447], "temperature": 0.0, "avg_logprob": -0.15145060221354167, "compression_ratio": 1.4978723404255319, "no_speech_prob": 9.22142316994723e-06}, {"id": 111, "seek": 69892, "start": 706.4, "end": 715.4399999999999, "text": " system to have really fast API between those two. If we are compiling with simultaneous", "tokens": [1185, 281, 362, 534, 2370, 9362, 1296, 729, 732, 13, 759, 321, 366, 715, 4883, 365, 46218], "temperature": 0.0, "avg_logprob": -0.15145060221354167, "compression_ratio": 1.4978723404255319, "no_speech_prob": 9.22142316994723e-06}, {"id": 112, "seek": 69892, "start": 715.4399999999999, "end": 720.4399999999999, "text": " multiprocessing for Intel processors, we also need nothing, but that's not important", "tokens": [3311, 340, 780, 278, 337, 19762, 27751, 11, 321, 611, 643, 1825, 11, 457, 300, 311, 406, 1021], "temperature": 0.0, "avg_logprob": -0.15145060221354167, "compression_ratio": 1.4978723404255319, "no_speech_prob": 9.22142316994723e-06}, {"id": 113, "seek": 69892, "start": 720.4399999999999, "end": 728.0, "text": " if you don't need that. Okay. This is a bare-bones Rust project. We have a cargo tumble, which", "tokens": [498, 291, 500, 380, 643, 300, 13, 1033, 13, 639, 307, 257, 6949, 12, 44954, 34952, 1716, 13, 492, 362, 257, 19449, 13102, 638, 11, 597], "temperature": 0.0, "avg_logprob": -0.15145060221354167, "compression_ratio": 1.4978723404255319, "no_speech_prob": 9.22142316994723e-06}, {"id": 114, "seek": 72800, "start": 728.0, "end": 736.2, "text": " is a manifest file for the cargo package manager, which describes the package metadata, and", "tokens": [307, 257, 10067, 3991, 337, 264, 19449, 7372, 6598, 11, 597, 15626, 264, 7372, 26603, 11, 293], "temperature": 0.0, "avg_logprob": -0.15200260863907036, "compression_ratio": 1.6435185185185186, "no_speech_prob": 2.1107120119268075e-05}, {"id": 115, "seek": 72800, "start": 736.2, "end": 741.32, "text": " it just says hello world, version, addition, something. Not very important. We have then", "tokens": [309, 445, 1619, 7751, 1002, 11, 3037, 11, 4500, 11, 746, 13, 1726, 588, 1021, 13, 492, 362, 550], "temperature": 0.0, "avg_logprob": -0.15200260863907036, "compression_ratio": 1.6435185185185186, "no_speech_prob": 2.1107120119268075e-05}, {"id": 116, "seek": 72800, "start": 741.32, "end": 747.8, "text": " our main source file, the main RS, which is just a main function and prints hello world.", "tokens": [527, 2135, 4009, 3991, 11, 264, 2135, 25855, 11, 597, 307, 445, 257, 2135, 2445, 293, 22305, 7751, 1002, 13], "temperature": 0.0, "avg_logprob": -0.15200260863907036, "compression_ratio": 1.6435185185185186, "no_speech_prob": 2.1107120119268075e-05}, {"id": 117, "seek": 72800, "start": 747.8, "end": 754.88, "text": " Everything that we need to do to get Rusty Hermit support is first add a Rusty Hermit", "tokens": [5471, 300, 321, 643, 281, 360, 281, 483, 34952, 88, 21842, 270, 1406, 307, 700, 909, 257, 34952, 88, 21842, 270], "temperature": 0.0, "avg_logprob": -0.15200260863907036, "compression_ratio": 1.6435185185185186, "no_speech_prob": 2.1107120119268075e-05}, {"id": 118, "seek": 75488, "start": 754.88, "end": 761.48, "text": " dependency. It's written a bit complicated to just include this dependency if we actually", "tokens": [33621, 13, 467, 311, 3720, 257, 857, 6179, 281, 445, 4090, 341, 33621, 498, 321, 767], "temperature": 0.0, "avg_logprob": -0.10634740950569274, "compression_ratio": 1.563953488372093, "no_speech_prob": 2.7527426937012933e-05}, {"id": 119, "seek": 75488, "start": 761.48, "end": 768.4399999999999, "text": " compile for the Hermit operating system. Then we just need to add two more lines to", "tokens": [31413, 337, 264, 21842, 270, 7447, 1185, 13, 1396, 321, 445, 643, 281, 909, 732, 544, 3876, 281], "temperature": 0.0, "avg_logprob": -0.10634740950569274, "compression_ratio": 1.563953488372093, "no_speech_prob": 2.7527426937012933e-05}, {"id": 120, "seek": 75488, "start": 768.4399999999999, "end": 777.6, "text": " the main RS to import this dependency. What this does then is that Hermit sys in the background", "tokens": [264, 2135, 25855, 281, 974, 341, 33621, 13, 708, 341, 775, 550, 307, 300, 21842, 270, 262, 749, 294, 264, 3678], "temperature": 0.0, "avg_logprob": -0.10634740950569274, "compression_ratio": 1.563953488372093, "no_speech_prob": 2.7527426937012933e-05}, {"id": 121, "seek": 77760, "start": 777.6, "end": 785.08, "text": " transparently builds the Hermit kernel, the library operating system, and then by importing", "tokens": [7132, 6420, 15182, 264, 21842, 270, 28256, 11, 264, 6405, 7447, 1185, 11, 293, 550, 538, 43866], "temperature": 0.0, "avg_logprob": -0.16977866920264992, "compression_ratio": 1.4916201117318435, "no_speech_prob": 8.528409125574399e-06}, {"id": 122, "seek": 77760, "start": 785.08, "end": 794.32, "text": " it like this, we make sure we actually link against this. What we then get is a runnable", "tokens": [309, 411, 341, 11, 321, 652, 988, 321, 767, 2113, 1970, 341, 13, 708, 321, 550, 483, 307, 257, 1190, 77, 712], "temperature": 0.0, "avg_logprob": -0.16977866920264992, "compression_ratio": 1.4916201117318435, "no_speech_prob": 8.528409125574399e-06}, {"id": 123, "seek": 77760, "start": 794.32, "end": 802.8000000000001, "text": " unicarnal image that can be run in Quemo or U-Hive. To then build this, we have to pin", "tokens": [517, 299, 1083, 304, 3256, 300, 393, 312, 1190, 294, 2326, 36221, 420, 624, 12, 39, 488, 13, 1407, 550, 1322, 341, 11, 321, 362, 281, 5447], "temperature": 0.0, "avg_logprob": -0.16977866920264992, "compression_ratio": 1.4916201117318435, "no_speech_prob": 8.528409125574399e-06}, {"id": 124, "seek": 80280, "start": 802.8, "end": 809.76, "text": " a Rust compiler version because we have some internal things that require that, but we're", "tokens": [257, 34952, 31958, 3037, 570, 321, 362, 512, 6920, 721, 300, 3651, 300, 11, 457, 321, 434], "temperature": 0.0, "avg_logprob": -0.11648754793054918, "compression_ratio": 1.6857142857142857, "no_speech_prob": 9.078958100872114e-06}, {"id": 125, "seek": 80280, "start": 809.76, "end": 816.56, "text": " working on getting rid of that and then just build it. We say cargo build, then specify", "tokens": [1364, 322, 1242, 3973, 295, 300, 293, 550, 445, 1322, 309, 13, 492, 584, 19449, 1322, 11, 550, 16500], "temperature": 0.0, "avg_logprob": -0.11648754793054918, "compression_ratio": 1.6857142857142857, "no_speech_prob": 9.078958100872114e-06}, {"id": 126, "seek": 80280, "start": 816.56, "end": 822.7199999999999, "text": " the Hermit target, which is our target, and then we tell it to build the standard library", "tokens": [264, 21842, 270, 3779, 11, 597, 307, 527, 3779, 11, 293, 550, 321, 980, 309, 281, 1322, 264, 3832, 6405], "temperature": 0.0, "avg_logprob": -0.11648754793054918, "compression_ratio": 1.6857142857142857, "no_speech_prob": 9.078958100872114e-06}, {"id": 127, "seek": 80280, "start": 822.7199999999999, "end": 829.7199999999999, "text": " on the fly because we are small yet and only tier three target, which is why Rust does", "tokens": [322, 264, 3603, 570, 321, 366, 1359, 1939, 293, 787, 12362, 1045, 3779, 11, 597, 307, 983, 34952, 775], "temperature": 0.0, "avg_logprob": -0.11648754793054918, "compression_ratio": 1.6857142857142857, "no_speech_prob": 9.078958100872114e-06}, {"id": 128, "seek": 82972, "start": 829.72, "end": 839.9200000000001, "text": " not support us natively yet, but we support Rust. There was easy. To make sure that all", "tokens": [406, 1406, 505, 8470, 356, 1939, 11, 457, 321, 1406, 34952, 13, 821, 390, 1858, 13, 1407, 652, 988, 300, 439], "temperature": 0.0, "avg_logprob": -0.11465354760487874, "compression_ratio": 1.4944444444444445, "no_speech_prob": 2.1441694116219878e-05}, {"id": 129, "seek": 82972, "start": 839.9200000000001, "end": 847.96, "text": " of you can believe me, I have prepared a small demo. I have to get on this screen. Right", "tokens": [295, 291, 393, 1697, 385, 11, 286, 362, 4927, 257, 1359, 10723, 13, 286, 362, 281, 483, 322, 341, 2568, 13, 1779], "temperature": 0.0, "avg_logprob": -0.11465354760487874, "compression_ratio": 1.4944444444444445, "no_speech_prob": 2.1441694116219878e-05}, {"id": 130, "seek": 82972, "start": 847.96, "end": 854.0, "text": " here you can see exactly the project I talked about. It's just a hello world with the Hermit", "tokens": [510, 291, 393, 536, 2293, 264, 1716, 286, 2825, 466, 13, 467, 311, 445, 257, 7751, 1002, 365, 264, 21842, 270], "temperature": 0.0, "avg_logprob": -0.11465354760487874, "compression_ratio": 1.4944444444444445, "no_speech_prob": 2.1441694116219878e-05}, {"id": 131, "seek": 85400, "start": 854.0, "end": 863.68, "text": " CSS dependency. It's a main RS, which does hello world. Then we can go ahead and open", "tokens": [24387, 33621, 13, 467, 311, 257, 2135, 25855, 11, 597, 775, 7751, 1002, 13, 1396, 321, 393, 352, 2286, 293, 1269], "temperature": 0.0, "avg_logprob": -0.1858424855701959, "compression_ratio": 1.4189944134078212, "no_speech_prob": 8.5292822404881e-06}, {"id": 132, "seek": 85400, "start": 863.68, "end": 873.6, "text": " a terminal, then do cargo build, which is really fast right now because I pre-built", "tokens": [257, 14709, 11, 550, 360, 19449, 1322, 11, 597, 307, 534, 2370, 558, 586, 570, 286, 659, 12, 23018], "temperature": 0.0, "avg_logprob": -0.1858424855701959, "compression_ratio": 1.4189944134078212, "no_speech_prob": 8.5292822404881e-06}, {"id": 133, "seek": 85400, "start": 873.6, "end": 880.24, "text": " it. Normally it takes around one minute on this machine I'm logged into. Then we can", "tokens": [309, 13, 17424, 309, 2516, 926, 472, 3456, 322, 341, 3479, 286, 478, 27231, 666, 13, 1396, 321, 393], "temperature": 0.0, "avg_logprob": -0.1858424855701959, "compression_ratio": 1.4189944134078212, "no_speech_prob": 8.5292822404881e-06}, {"id": 134, "seek": 88024, "start": 880.24, "end": 888.48, "text": " run it on you have hello world. To make sure that we didn't cheat, I can also show you", "tokens": [1190, 309, 322, 291, 362, 7751, 1002, 13, 1407, 652, 988, 300, 321, 994, 380, 17470, 11, 286, 393, 611, 855, 291], "temperature": 0.0, "avg_logprob": -0.1782968432404274, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.5932866517687216e-05}, {"id": 135, "seek": 88024, "start": 888.48, "end": 894.24, "text": " the verbose messages, which tells you I have to please print the kernel messages along", "tokens": [264, 9595, 541, 7897, 11, 597, 5112, 291, 286, 362, 281, 1767, 4482, 264, 28256, 7897, 2051], "temperature": 0.0, "avg_logprob": -0.1782968432404274, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.5932866517687216e-05}, {"id": 136, "seek": 88024, "start": 894.24, "end": 900.04, "text": " with it. We can see that there's Rust, the Hermit booting and initializing all the hardware", "tokens": [365, 309, 13, 492, 393, 536, 300, 456, 311, 34952, 11, 264, 21842, 270, 11450, 278, 293, 5883, 3319, 439, 264, 8837], "temperature": 0.0, "avg_logprob": -0.1782968432404274, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.5932866517687216e-05}, {"id": 137, "seek": 88024, "start": 900.04, "end": 905.84, "text": " and preparing the memory and everything and then in the end jumping into our application", "tokens": [293, 10075, 264, 4675, 293, 1203, 293, 550, 294, 264, 917, 11233, 666, 527, 3861], "temperature": 0.0, "avg_logprob": -0.1782968432404274, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.5932866517687216e-05}, {"id": 138, "seek": 90584, "start": 905.84, "end": 915.08, "text": " and printing hello world. After that, there's just shut down. Okay, back to the presentation.", "tokens": [293, 14699, 7751, 1002, 13, 2381, 300, 11, 456, 311, 445, 5309, 760, 13, 1033, 11, 646, 281, 264, 5860, 13], "temperature": 0.0, "avg_logprob": -0.22767051528481877, "compression_ratio": 1.4731182795698925, "no_speech_prob": 1.7226851923624054e-05}, {"id": 139, "seek": 90584, "start": 915.08, "end": 925.12, "text": " Yes. Okay, now a bit about our modularity story in Rusty Hermit. There are several modularity", "tokens": [1079, 13, 1033, 11, 586, 257, 857, 466, 527, 31111, 507, 1657, 294, 34952, 88, 21842, 270, 13, 821, 366, 2940, 31111, 507], "temperature": 0.0, "avg_logprob": -0.22767051528481877, "compression_ratio": 1.4731182795698925, "no_speech_prob": 1.7226851923624054e-05}, {"id": 140, "seek": 90584, "start": 925.12, "end": 933.88, "text": " stories. The first one is user facing. This is the same similar dependency declaration", "tokens": [3676, 13, 440, 700, 472, 307, 4195, 7170, 13, 639, 307, 264, 912, 2531, 33621, 27606], "temperature": 0.0, "avg_logprob": -0.22767051528481877, "compression_ratio": 1.4731182795698925, "no_speech_prob": 1.7226851923624054e-05}, {"id": 141, "seek": 93388, "start": 933.88, "end": 941.72, "text": " in our cargo manifest as before, but a little bit expanded. We added features. Features are", "tokens": [294, 527, 19449, 10067, 382, 949, 11, 457, 257, 707, 857, 14342, 13, 492, 3869, 4122, 13, 3697, 3377, 366], "temperature": 0.0, "avg_logprob": -0.15708461174598107, "compression_ratio": 1.5055555555555555, "no_speech_prob": 2.5450632165302522e-05}, {"id": 142, "seek": 93388, "start": 941.72, "end": 950.1, "text": " a thing in the cargo package manager that allows us to select and configure conditional", "tokens": [257, 551, 294, 264, 19449, 7372, 6598, 300, 4045, 505, 281, 3048, 293, 22162, 27708], "temperature": 0.0, "avg_logprob": -0.15708461174598107, "compression_ratio": 1.5055555555555555, "no_speech_prob": 2.5450632165302522e-05}, {"id": 143, "seek": 93388, "start": 950.1, "end": 958.52, "text": " compilation in our dependency. In this case, Hermit's is. We use this to be able to specify", "tokens": [40261, 294, 527, 33621, 13, 682, 341, 1389, 11, 21842, 270, 311, 307, 13, 492, 764, 341, 281, 312, 1075, 281, 16500], "temperature": 0.0, "avg_logprob": -0.15708461174598107, "compression_ratio": 1.5055555555555555, "no_speech_prob": 2.5450632165302522e-05}, {"id": 144, "seek": 95852, "start": 958.52, "end": 964.76, "text": " in this manner which features we want to be present in the unicolonel image. In this case,", "tokens": [294, 341, 9060, 597, 4122, 321, 528, 281, 312, 1974, 294, 264, 517, 299, 38780, 338, 3256, 13, 682, 341, 1389, 11], "temperature": 0.0, "avg_logprob": -0.2347029648817979, "compression_ratio": 1.4293478260869565, "no_speech_prob": 1.951822378032375e-05}, {"id": 145, "seek": 95852, "start": 964.76, "end": 974.76, "text": " I enabled SMP, TCP and DHCP4 and disabled PCI and ACPI. This means that this should", "tokens": [286, 15172, 318, 12224, 11, 48965, 293, 28606, 20049, 19, 293, 15191, 6465, 40, 293, 8157, 31701, 13, 639, 1355, 300, 341, 820], "temperature": 0.0, "avg_logprob": -0.2347029648817979, "compression_ratio": 1.4293478260869565, "no_speech_prob": 1.951822378032375e-05}, {"id": 146, "seek": 95852, "start": 974.76, "end": 983.92, "text": " be runnable in a micro VM, for example, with no PCI support present. Internally, we also", "tokens": [312, 1190, 77, 712, 294, 257, 4532, 18038, 11, 337, 1365, 11, 365, 572, 6465, 40, 1406, 1974, 13, 4844, 379, 11, 321, 611], "temperature": 0.0, "avg_logprob": -0.2347029648817979, "compression_ratio": 1.4293478260869565, "no_speech_prob": 1.951822378032375e-05}, {"id": 147, "seek": 98392, "start": 983.92, "end": 990.5999999999999, "text": " quite modular and we're working on further modularizing our kernel. At the top, you", "tokens": [1596, 31111, 293, 321, 434, 1364, 322, 3052, 31111, 3319, 527, 28256, 13, 1711, 264, 1192, 11, 291], "temperature": 0.0, "avg_logprob": -0.17704313772696037, "compression_ratio": 1.6635071090047393, "no_speech_prob": 9.219984349329025e-06}, {"id": 148, "seek": 98392, "start": 990.5999999999999, "end": 997.8399999999999, "text": " can see the lib Hermit kernel, which has a few dependencies. The first one is a internal", "tokens": [393, 536, 264, 22854, 21842, 270, 28256, 11, 597, 575, 257, 1326, 36606, 13, 440, 700, 472, 307, 257, 6920], "temperature": 0.0, "avg_logprob": -0.17704313772696037, "compression_ratio": 1.6635071090047393, "no_speech_prob": 9.219984349329025e-06}, {"id": 149, "seek": 98392, "start": 997.8399999999999, "end": 1006.16, "text": " Hermit entry dependency, which is shared between the kernel and anything that loads and jumps", "tokens": [21842, 270, 8729, 33621, 11, 597, 307, 5507, 1296, 264, 28256, 293, 1340, 300, 12668, 293, 16704], "temperature": 0.0, "avg_logprob": -0.17704313772696037, "compression_ratio": 1.6635071090047393, "no_speech_prob": 9.219984349329025e-06}, {"id": 150, "seek": 98392, "start": 1006.16, "end": 1012.68, "text": " into the kernel. We then have Hermit sync for internal collection of synchronization", "tokens": [666, 264, 28256, 13, 492, 550, 362, 21842, 270, 20271, 337, 6920, 5765, 295, 19331, 2144], "temperature": 0.0, "avg_logprob": -0.17704313772696037, "compression_ratio": 1.6635071090047393, "no_speech_prob": 9.219984349329025e-06}, {"id": 151, "seek": 101268, "start": 1012.68, "end": 1020.88, "text": " primitives like mutexes. The other crates are really provided by the Rust ecosystem, which", "tokens": [2886, 38970, 411, 24523, 47047, 13, 440, 661, 941, 1024, 366, 534, 5649, 538, 264, 34952, 11311, 11, 597], "temperature": 0.0, "avg_logprob": -0.16679160187884076, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.5931682355585508e-05}, {"id": 152, "seek": 101268, "start": 1020.88, "end": 1027.1599999999999, "text": " is really rich. The linked list allocator is our allocation algorithm that we just import", "tokens": [307, 534, 4593, 13, 440, 9408, 1329, 12660, 1639, 307, 527, 27599, 9284, 300, 321, 445, 974], "temperature": 0.0, "avg_logprob": -0.16679160187884076, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.5931682355585508e-05}, {"id": 153, "seek": 101268, "start": 1027.1599999999999, "end": 1033.24, "text": " and then use. We can also just import and use some device drivers or architecture-specific", "tokens": [293, 550, 764, 13, 492, 393, 611, 445, 974, 293, 764, 512, 4302, 11590, 420, 9482, 12, 29258], "temperature": 0.0, "avg_logprob": -0.16679160187884076, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.5931682355585508e-05}, {"id": 154, "seek": 101268, "start": 1033.24, "end": 1039.32, "text": " abstractions so that we don't even have to write assembly code ourselves. Also, small", "tokens": [12649, 626, 370, 300, 321, 500, 380, 754, 362, 281, 2464, 12103, 3089, 4175, 13, 2743, 11, 1359], "temperature": 0.0, "avg_logprob": -0.16679160187884076, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.5931682355585508e-05}, {"id": 155, "seek": 103932, "start": 1039.32, "end": 1048.6399999999999, "text": " TCP is our TCP stack. Just import it and configure it. We also contribute back upstream, which", "tokens": [48965, 307, 527, 48965, 8630, 13, 1449, 974, 309, 293, 22162, 309, 13, 492, 611, 10586, 646, 33915, 11, 597], "temperature": 0.0, "avg_logprob": -0.16303179920583533, "compression_ratio": 1.4631578947368422, "no_speech_prob": 1.5680747310398147e-05}, {"id": 156, "seek": 103932, "start": 1048.6399999999999, "end": 1059.12, "text": " is cool, but this shows the strength of the Rust ecosystem and community for Rust OS development,", "tokens": [307, 1627, 11, 457, 341, 3110, 264, 3800, 295, 264, 34952, 11311, 293, 1768, 337, 34952, 12731, 3250, 11], "temperature": 0.0, "avg_logprob": -0.16303179920583533, "compression_ratio": 1.4631578947368422, "no_speech_prob": 1.5680747310398147e-05}, {"id": 157, "seek": 103932, "start": 1059.12, "end": 1069.24, "text": " I think. In the end, this is a broad overview of the Hermit ecosystem as it is today.", "tokens": [286, 519, 13, 682, 264, 917, 11, 341, 307, 257, 4152, 12492, 295, 264, 21842, 270, 11311, 382, 309, 307, 965, 13], "temperature": 0.0, "avg_logprob": -0.16303179920583533, "compression_ratio": 1.4631578947368422, "no_speech_prob": 1.5680747310398147e-05}, {"id": 158, "seek": 106924, "start": 1069.24, "end": 1077.16, "text": " On the left, you can see a unicorn image that has been built. At the top, we have the application.", "tokens": [1282, 264, 1411, 11, 291, 393, 536, 257, 28122, 3256, 300, 575, 668, 3094, 13, 1711, 264, 1192, 11, 321, 362, 264, 3861, 13], "temperature": 0.0, "avg_logprob": -0.11650077156398607, "compression_ratio": 1.6043956043956045, "no_speech_prob": 1.9828645235975273e-05}, {"id": 159, "seek": 106924, "start": 1077.16, "end": 1084.64, "text": " It's either a Rust application or a C application, although Rust application is our primary focus,", "tokens": [467, 311, 2139, 257, 34952, 3861, 420, 257, 383, 3861, 11, 4878, 34952, 3861, 307, 527, 6194, 1879, 11], "temperature": 0.0, "avg_logprob": -0.11650077156398607, "compression_ratio": 1.6043956043956045, "no_speech_prob": 1.9828645235975273e-05}, {"id": 160, "seek": 106924, "start": 1084.64, "end": 1092.48, "text": " which then either uses the Rust standard library or a new C library. Those are then customized", "tokens": [597, 550, 2139, 4960, 264, 34952, 3832, 6405, 420, 257, 777, 383, 6405, 13, 3950, 366, 550, 30581], "temperature": 0.0, "avg_logprob": -0.11650077156398607, "compression_ratio": 1.6043956043956045, "no_speech_prob": 1.9828645235975273e-05}, {"id": 161, "seek": 109248, "start": 1092.48, "end": 1106.28, "text": " by us to invoke the special syscalls into the kernel to do the required functionality,", "tokens": [538, 505, 281, 41117, 264, 2121, 262, 749, 66, 39655, 666, 264, 28256, 281, 360, 264, 4739, 14980, 11], "temperature": 0.0, "avg_logprob": -0.21337440048438916, "compression_ratio": 1.434782608695652, "no_speech_prob": 1.221397724293638e-05}, {"id": 162, "seek": 109248, "start": 1106.28, "end": 1112.92, "text": " and this altogether then makes up the unicorn image. This can then be run on either our", "tokens": [293, 341, 19051, 550, 1669, 493, 264, 28122, 3256, 13, 639, 393, 550, 312, 1190, 322, 2139, 527], "temperature": 0.0, "avg_logprob": -0.21337440048438916, "compression_ratio": 1.434782608695652, "no_speech_prob": 1.221397724293638e-05}, {"id": 163, "seek": 109248, "start": 1112.92, "end": 1119.88, "text": " specialized virtual machine monitor, U-Hive, or a generic VM like Kimu. For Kimu, we have", "tokens": [19813, 6374, 3479, 6002, 11, 624, 12, 39, 488, 11, 420, 257, 19577, 18038, 411, 5652, 84, 13, 1171, 5652, 84, 11, 321, 362], "temperature": 0.0, "avg_logprob": -0.21337440048438916, "compression_ratio": 1.434782608695652, "no_speech_prob": 1.221397724293638e-05}, {"id": 164, "seek": 111988, "start": 1119.88, "end": 1125.48, "text": " a Rusty loader, which then chain loads our unicorn image, and Rusty loader supports", "tokens": [257, 34952, 88, 3677, 260, 11, 597, 550, 5021, 12668, 527, 28122, 3256, 11, 293, 34952, 88, 3677, 260, 9346], "temperature": 0.0, "avg_logprob": -0.14796687534877231, "compression_ratio": 1.461111111111111, "no_speech_prob": 8.93812466529198e-06}, {"id": 165, "seek": 111988, "start": 1125.48, "end": 1136.1200000000001, "text": " some boot protocols, as you can see here. That's been the main part. What are we working", "tokens": [512, 11450, 20618, 11, 382, 291, 393, 536, 510, 13, 663, 311, 668, 264, 2135, 644, 13, 708, 366, 321, 1364], "temperature": 0.0, "avg_logprob": -0.14796687534877231, "compression_ratio": 1.461111111111111, "no_speech_prob": 8.93812466529198e-06}, {"id": 166, "seek": 111988, "start": 1136.1200000000001, "end": 1143.3600000000001, "text": " on right now? I'm working on the first three things. Further code-based oxidization, which", "tokens": [322, 558, 586, 30, 286, 478, 1364, 322, 264, 700, 1045, 721, 13, 15364, 3089, 12, 6032, 19924, 2144, 11, 597], "temperature": 0.0, "avg_logprob": -0.14796687534877231, "compression_ratio": 1.461111111111111, "no_speech_prob": 8.93812466529198e-06}, {"id": 167, "seek": 114336, "start": 1143.36, "end": 1150.08, "text": " means making it more Rusty. That means applying more Rust idioms more thoroughly, because", "tokens": [1355, 1455, 309, 544, 34952, 88, 13, 663, 1355, 9275, 544, 34952, 18014, 4785, 544, 17987, 11, 570], "temperature": 0.0, "avg_logprob": -0.17144420567680807, "compression_ratio": 1.4972375690607735, "no_speech_prob": 2.796087574097328e-05}, {"id": 168, "seek": 114336, "start": 1150.08, "end": 1158.7199999999998, "text": " there have been a few C-isms that we've been stuck with from the original part. I'm personally", "tokens": [456, 362, 668, 257, 1326, 383, 12, 13539, 300, 321, 600, 668, 5541, 365, 490, 264, 3380, 644, 13, 286, 478, 5665], "temperature": 0.0, "avg_logprob": -0.17144420567680807, "compression_ratio": 1.4972375690607735, "no_speech_prob": 2.796087574097328e-05}, {"id": 169, "seek": 114336, "start": 1158.7199999999998, "end": 1165.6399999999999, "text": " also working on Miri support, also as part of my master thesis. Miri is an interpreter", "tokens": [611, 1364, 322, 9421, 72, 1406, 11, 611, 382, 644, 295, 452, 4505, 22288, 13, 9421, 72, 307, 364, 34132], "temperature": 0.0, "avg_logprob": -0.17144420567680807, "compression_ratio": 1.4972375690607735, "no_speech_prob": 2.796087574097328e-05}, {"id": 170, "seek": 116564, "start": 1165.64, "end": 1173.8000000000002, "text": " for Rust, which initially sounds strange, but using Miri, we can spot a few cases of undefined", "tokens": [337, 34952, 11, 597, 9105, 3263, 5861, 11, 457, 1228, 9421, 72, 11, 321, 393, 4008, 257, 1326, 3331, 295, 674, 5666, 2001], "temperature": 0.0, "avg_logprob": -0.1088544929420555, "compression_ratio": 1.5676855895196506, "no_speech_prob": 1.6699636034900323e-05}, {"id": 171, "seek": 116564, "start": 1173.8000000000002, "end": 1180.1200000000001, "text": " behavior if we do something wrong in unsafe code. If something runs in Miri, though, that", "tokens": [5223, 498, 321, 360, 746, 2085, 294, 35948, 3089, 13, 759, 746, 6676, 294, 9421, 72, 11, 1673, 11, 300], "temperature": 0.0, "avg_logprob": -0.1088544929420555, "compression_ratio": 1.5676855895196506, "no_speech_prob": 1.6699636034900323e-05}, {"id": 172, "seek": 116564, "start": 1180.1200000000001, "end": 1185.96, "text": " doesn't mean that this is guaranteed to be correct, but it can help us in some cases.", "tokens": [1177, 380, 914, 300, 341, 307, 18031, 281, 312, 3006, 11, 457, 309, 393, 854, 505, 294, 512, 3331, 13], "temperature": 0.0, "avg_logprob": -0.1088544929420555, "compression_ratio": 1.5676855895196506, "no_speech_prob": 1.6699636034900323e-05}, {"id": 173, "seek": 116564, "start": 1185.96, "end": 1191.0, "text": " Third point is more modularization, and I already talked about that. It's about spinning", "tokens": [12548, 935, 307, 544, 31111, 2144, 11, 293, 286, 1217, 2825, 466, 300, 13, 467, 311, 466, 15640], "temperature": 0.0, "avg_logprob": -0.1088544929420555, "compression_ratio": 1.5676855895196506, "no_speech_prob": 1.6699636034900323e-05}, {"id": 174, "seek": 119100, "start": 1191.0, "end": 1197.84, "text": " out internal drivers, for example, in separate projects and crates. Then TCPI stack overhaul", "tokens": [484, 6920, 11590, 11, 337, 1365, 11, 294, 4994, 4455, 293, 941, 1024, 13, 1396, 48965, 40, 8630, 670, 39423], "temperature": 0.0, "avg_logprob": -0.20152228860294116, "compression_ratio": 1.6188340807174888, "no_speech_prob": 5.826936467201449e-05}, {"id": 175, "seek": 119100, "start": 1197.84, "end": 1203.96, "text": " is something that Stefan is currently working on, and U-Hive network overhaul is something", "tokens": [307, 746, 300, 32158, 307, 4362, 1364, 322, 11, 293, 624, 12, 39, 488, 3209, 670, 39423, 307, 746], "temperature": 0.0, "avg_logprob": -0.20152228860294116, "compression_ratio": 1.6188340807174888, "no_speech_prob": 5.826936467201449e-05}, {"id": 176, "seek": 119100, "start": 1203.96, "end": 1210.44, "text": " that Jonathan oversees. We are also generally working on firecracker support and arm support,", "tokens": [300, 15471, 11916, 279, 13, 492, 366, 611, 5101, 1364, 322, 2610, 10757, 23599, 1406, 293, 3726, 1406, 11], "temperature": 0.0, "avg_logprob": -0.20152228860294116, "compression_ratio": 1.6188340807174888, "no_speech_prob": 5.826936467201449e-05}, {"id": 177, "seek": 119100, "start": 1210.44, "end": 1217.84, "text": " both of which have working prototypes, but have not really been mainline that much.", "tokens": [1293, 295, 597, 362, 1364, 42197, 11, 457, 362, 406, 534, 668, 2135, 1889, 300, 709, 13], "temperature": 0.0, "avg_logprob": -0.20152228860294116, "compression_ratio": 1.6188340807174888, "no_speech_prob": 5.826936467201449e-05}, {"id": 178, "seek": 121784, "start": 1217.84, "end": 1227.28, "text": " Please find us at GitHub. We are always happy to have conversations and contributions. Yeah,", "tokens": [2555, 915, 505, 412, 23331, 13, 492, 366, 1009, 2055, 281, 362, 7315, 293, 15725, 13, 865, 11], "temperature": 0.0, "avg_logprob": -0.30028062878233014, "compression_ratio": 1.1607142857142858, "no_speech_prob": 0.000445022014901042}, {"id": 179, "seek": 121784, "start": 1227.28, "end": 1230.08, "text": " that's been it. Thanks for listening.", "tokens": [300, 311, 668, 309, 13, 2561, 337, 4764, 13], "temperature": 0.0, "avg_logprob": -0.30028062878233014, "compression_ratio": 1.1607142857142858, "no_speech_prob": 0.000445022014901042}, {"id": 180, "seek": 123008, "start": 1230.08, "end": 1248.0, "text": " Okay, any questions for Martin? Unikernels, raw security. All righty.", "tokens": [1033, 11, 604, 1651, 337, 9184, 30, 1156, 1035, 1248, 1625, 11, 8936, 3825, 13, 1057, 558, 88, 13], "temperature": 0.0, "avg_logprob": -0.38569771297394284, "compression_ratio": 1.276470588235294, "no_speech_prob": 0.0029603568837046623}, {"id": 181, "seek": 123008, "start": 1248.0, "end": 1252.72, "text": " There's one. Yeah, I just want to know what the subprime", "tokens": [821, 311, 472, 13, 865, 11, 286, 445, 528, 281, 458, 437, 264, 1422, 1424, 1312], "temperature": 0.0, "avg_logprob": -0.38569771297394284, "compression_ratio": 1.276470588235294, "no_speech_prob": 0.0029603568837046623}, {"id": 182, "seek": 123008, "start": 1252.72, "end": 1258.1999999999998, "text": " focus of this project. So do you have some industry which is already picking up on Hermit,", "tokens": [1879, 295, 341, 1716, 13, 407, 360, 291, 362, 512, 3518, 597, 307, 1217, 8867, 493, 322, 21842, 270, 11], "temperature": 0.0, "avg_logprob": -0.38569771297394284, "compression_ratio": 1.276470588235294, "no_speech_prob": 0.0029603568837046623}, {"id": 183, "seek": 125820, "start": 1258.2, "end": 1263.24, "text": " or is it pure science so far? What are the plans?", "tokens": [420, 307, 309, 6075, 3497, 370, 1400, 30, 708, 366, 264, 5482, 30], "temperature": 0.0, "avg_logprob": -0.2830538818801659, "compression_ratio": 1.4870129870129871, "no_speech_prob": 0.00014376862964127213}, {"id": 184, "seek": 125820, "start": 1263.24, "end": 1269.68, "text": " As far as I understand, it started as a research project, and it's much there now, I think,", "tokens": [1018, 1400, 382, 286, 1223, 11, 309, 1409, 382, 257, 2132, 1716, 11, 293, 309, 311, 709, 456, 586, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.2830538818801659, "compression_ratio": 1.4870129870129871, "no_speech_prob": 0.00014376862964127213}, {"id": 185, "seek": 125820, "start": 1269.68, "end": 1282.0800000000002, "text": " Stefan? Yeah, it's still in research project, but we use it in two U-projects, and they", "tokens": [32158, 30, 865, 11, 309, 311, 920, 294, 2132, 1716, 11, 457, 321, 764, 309, 294, 732, 624, 12, 4318, 1020, 82, 11, 293, 436], "temperature": 0.0, "avg_logprob": -0.2830538818801659, "compression_ratio": 1.4870129870129871, "no_speech_prob": 0.00014376862964127213}, {"id": 186, "seek": 128208, "start": 1282.08, "end": 1292.08, "text": " are mostly partners from the cloud area and edge computing, and we want to use it here.", "tokens": [366, 5240, 4462, 490, 264, 4588, 1859, 293, 4691, 15866, 11, 293, 321, 528, 281, 764, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.2168682896813681, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.0005854458431713283}, {"id": 187, "seek": 128208, "start": 1292.08, "end": 1298.96, "text": " Thanks. Hey, thank you for your talk. I have a question.", "tokens": [2561, 13, 1911, 11, 1309, 291, 337, 428, 751, 13, 286, 362, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2168682896813681, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.0005854458431713283}, {"id": 188, "seek": 128208, "start": 1298.96, "end": 1304.84, "text": " As far as I know, the original C implementation supported quite a few more targets than only", "tokens": [1018, 1400, 382, 286, 458, 11, 264, 3380, 383, 11420, 8104, 1596, 257, 1326, 544, 12911, 813, 787], "temperature": 0.0, "avg_logprob": -0.2168682896813681, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.0005854458431713283}, {"id": 189, "seek": 128208, "start": 1304.84, "end": 1310.1999999999998, "text": " Rust and C. As far as I remember, you could run Go code as well, and Fortran, and some", "tokens": [34952, 293, 383, 13, 1018, 1400, 382, 286, 1604, 11, 291, 727, 1190, 1037, 3089, 382, 731, 11, 293, 11002, 4257, 11, 293, 512], "temperature": 0.0, "avg_logprob": -0.2168682896813681, "compression_ratio": 1.528301886792453, "no_speech_prob": 0.0005854458431713283}, {"id": 190, "seek": 131020, "start": 1310.2, "end": 1315.44, "text": " other stuff that linked against G-Lib C, if I'm remembering correctly.", "tokens": [661, 1507, 300, 9408, 1970, 460, 12, 43, 897, 383, 11, 498, 286, 478, 20719, 8944, 13], "temperature": 0.0, "avg_logprob": -0.20323549402822363, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.0001457697944715619}, {"id": 191, "seek": 131020, "start": 1315.44, "end": 1320.28, "text": " New Lib, I think. And New Lib, is there any plan to open up your", "tokens": [1873, 15834, 11, 286, 519, 13, 400, 1873, 15834, 11, 307, 456, 604, 1393, 281, 1269, 493, 428], "temperature": 0.0, "avg_logprob": -0.20323549402822363, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.0001457697944715619}, {"id": 192, "seek": 131020, "start": 1320.28, "end": 1324.76, "text": " targets as well for the new Rust implementation to support some more stuff, not only Rust", "tokens": [12911, 382, 731, 337, 264, 777, 34952, 11420, 281, 1406, 512, 544, 1507, 11, 406, 787, 34952], "temperature": 0.0, "avg_logprob": -0.20323549402822363, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.0001457697944715619}, {"id": 193, "seek": 131020, "start": 1324.76, "end": 1329.32, "text": " and C? So as far as I've been there, it's been only", "tokens": [293, 383, 30, 407, 382, 1400, 382, 286, 600, 668, 456, 11, 309, 311, 668, 787], "temperature": 0.0, "avg_logprob": -0.20323549402822363, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.0001457697944715619}, {"id": 194, "seek": 131020, "start": 1329.32, "end": 1338.52, "text": " Rust. I'm not that old into the project. I'm not sure what the plans are on further", "tokens": [34952, 13, 286, 478, 406, 300, 1331, 666, 264, 1716, 13, 286, 478, 406, 988, 437, 264, 5482, 366, 322, 3052], "temperature": 0.0, "avg_logprob": -0.20323549402822363, "compression_ratio": 1.5695652173913044, "no_speech_prob": 0.0001457697944715619}, {"id": 195, "seek": 133852, "start": 1338.52, "end": 1345.8799999999999, "text": " supporting that. We currently have bare-bound support for C, and I don't think the Go implementation", "tokens": [7231, 300, 13, 492, 4362, 362, 6949, 12, 18767, 1406, 337, 383, 11, 293, 286, 500, 380, 519, 264, 1037, 11420], "temperature": 0.0, "avg_logprob": -0.16776009459993732, "compression_ratio": 1.4705882352941178, "no_speech_prob": 9.88935717032291e-05}, {"id": 196, "seek": 133852, "start": 1345.8799999999999, "end": 1351.76, "text": " is currently working, and it's possible to get it working, but we are not really working", "tokens": [307, 4362, 1364, 11, 293, 309, 311, 1944, 281, 483, 309, 1364, 11, 457, 321, 366, 406, 534, 1364], "temperature": 0.0, "avg_logprob": -0.16776009459993732, "compression_ratio": 1.4705882352941178, "no_speech_prob": 9.88935717032291e-05}, {"id": 197, "seek": 133852, "start": 1351.76, "end": 1359.36, "text": " on that actively, I think. So, any plans for RISC-5 support?", "tokens": [322, 300, 13022, 11, 286, 519, 13, 407, 11, 604, 5482, 337, 497, 2343, 34, 12, 20, 1406, 30], "temperature": 0.0, "avg_logprob": -0.16776009459993732, "compression_ratio": 1.4705882352941178, "no_speech_prob": 9.88935717032291e-05}, {"id": 198, "seek": 135936, "start": 1359.36, "end": 1372.52, "text": " We have a quick press from RISC-5 support. This is also done by two students, but didn't", "tokens": [492, 362, 257, 1702, 1886, 490, 497, 2343, 34, 12, 20, 1406, 13, 639, 307, 611, 1096, 538, 732, 1731, 11, 457, 994, 380], "temperature": 0.0, "avg_logprob": -0.5732205167729804, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0001765506895026192}, {"id": 199, "seek": 135936, "start": 1372.52, "end": 1379.76, "text": " need time to analyze this. So it's there, but a lack of time.", "tokens": [643, 565, 281, 12477, 341, 13, 407, 309, 311, 456, 11, 457, 257, 5011, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.5732205167729804, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0001765506895026192}, {"id": 200, "seek": 137976, "start": 1379.76, "end": 1393.28, "text": " Okay, so proof of concept is working, but not upstream yet.", "tokens": [1033, 11, 370, 8177, 295, 3410, 307, 1364, 11, 457, 406, 33915, 1939, 13], "temperature": 0.0, "avg_logprob": -0.3538313489971739, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.0005710856057703495}, {"id": 201, "seek": 137976, "start": 1393.28, "end": 1396.28, "text": " This question obviously has to be asked, is there async support?", "tokens": [639, 1168, 2745, 575, 281, 312, 2351, 11, 307, 456, 382, 34015, 1406, 30], "temperature": 0.0, "avg_logprob": -0.3538313489971739, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.0005710856057703495}, {"id": 202, "seek": 137976, "start": 1396.28, "end": 1398.44, "text": " Is there what? Async support.", "tokens": [1119, 456, 437, 30, 1018, 34015, 1406, 13], "temperature": 0.0, "avg_logprob": -0.3538313489971739, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.0005710856057703495}, {"id": 203, "seek": 137976, "start": 1398.44, "end": 1399.44, "text": " Async.", "tokens": [1018, 34015, 13], "temperature": 0.0, "avg_logprob": -0.3538313489971739, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.0005710856057703495}, {"id": 204, "seek": 137976, "start": 1399.44, "end": 1403.16, "text": " Rust async. We have a runtime, or like async runtime.", "tokens": [34952, 382, 34015, 13, 492, 362, 257, 34474, 11, 420, 411, 382, 34015, 34474, 13], "temperature": 0.0, "avg_logprob": -0.3538313489971739, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.0005710856057703495}, {"id": 205, "seek": 140316, "start": 1403.16, "end": 1414.28, "text": " I think not mainline yet, right?", "tokens": [286, 519, 406, 2135, 1889, 1939, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19677493257342643, "compression_ratio": 1.4304635761589404, "no_speech_prob": 6.69455694151111e-05}, {"id": 206, "seek": 140316, "start": 1414.28, "end": 1421.3200000000002, "text": " So the kernel uses it internally for networking, and I think the exposure to user space via", "tokens": [407, 264, 28256, 4960, 309, 19501, 337, 17985, 11, 293, 286, 519, 264, 10420, 281, 4195, 1901, 5766], "temperature": 0.0, "avg_logprob": -0.19677493257342643, "compression_ratio": 1.4304635761589404, "no_speech_prob": 6.69455694151111e-05}, {"id": 207, "seek": 140316, "start": 1421.3200000000002, "end": 1426.6000000000001, "text": " Mio or something is not merged upstream, but it's something that we are actively interested", "tokens": [376, 1004, 420, 746, 307, 406, 36427, 33915, 11, 457, 309, 311, 746, 300, 321, 366, 13022, 3102], "temperature": 0.0, "avg_logprob": -0.19677493257342643, "compression_ratio": 1.4304635761589404, "no_speech_prob": 6.69455694151111e-05}, {"id": 208, "seek": 142660, "start": 1426.6, "end": 1433.76, "text": " in. Anything else? If not, thank you again, Martin.", "tokens": [294, 13, 11998, 1646, 30, 759, 406, 11, 1309, 291, 797, 11, 9184, 13], "temperature": 0.0, "avg_logprob": -0.46160049438476564, "compression_ratio": 1.0266666666666666, "no_speech_prob": 0.00046051666140556335}, {"id": 209, "seek": 143376, "start": 1433.76, "end": 1459.8, "text": " Thank you all for coming.", "tokens": [50364, 1044, 291, 439, 337, 1348, 13, 51666], "temperature": 0.0, "avg_logprob": -0.5619213845994737, "compression_ratio": 0.7575757575757576, "no_speech_prob": 0.0008072709897533059}], "language": "en"}