{"text": " Hello, my name is Armin Legrand. I'm working on the graphic stack for a long time, as many of you know, and this is actually also a kind of update from the LibreOffice conference where I already talked about system dependent primitive renderers and why they are important. I'm talking about them for years, as you know, and at the last conference I was so, I wish to promise to implement a prototype, and I did, and it's finished, and I did it on Direct2D, and it renders what you expected to render, so with Direct2D, of course, it's on Windows, but there was no special reason for Direct2D, I just wanted to try out if it fits well to a standard graphic library, and if I could figure out how to do it myself because I didn't know Direct2D too good myself, so it was some safe training too. So it's finished, it's working, and everyone can have an example now how to do some system dependent primitive renderer if he wants to. So what happens when painting? I don't want to go in detail about that, I have tried to formulate what's all happening so you can just check it when you download the presentation, that's the history, why it happened, what happened, also some history, so what did I do? Just started with a simple primitive processor, and it's feature complete because it supports all necessary primitives, there are four primitives you have to support, and some grouping primitives you have to support, and there are quite some extra primitives supported to get some more speed into it, which is not necessary to be feature complete because as I hope you know all now, you can decompose a primitive and it just dismantles the simpler primitives which can then be rendered. So it's in a single source file, so no hacking required, inside this single source file you can do whatever you want, it's just 2000 lines, so not too much if you compare it with some back end implementations which are spreaded over the whole office. It translates primitive data directly to direct2d, uses already available system dependent buffering which was not used in other implementations, I don't know why because it's working and available, it does not need any adaption of bitmap-bitmap-x which of course would be even better to do, so to directly use the data without converting it, but now it's just converted once and held in this standard system dependent buffer. So it's quite fast and you can try yourself because it's in the master, so if you have a Windows Pro version and you started with environment variable mentioned here, you will get the new renderer and you will see the added view of your impasse and the parts of wider and calc as far as say support primitive rendering rendered directly by direct2d without using output device at all, so that's proof of concept and I delivered it. So now I hope we find some guys who can help, these are the ones I added to make it faster and it's not even optimized but already pretty fast because just think about the layers which I used, we have the model, it creates primitives, the primitives are thrown at a renderer currently to the VCL pixel renderer, that renderer packs it to output device, still to output device and that output device sends it to a back end, so you have a five level stack and output device alone does a lot of work in between, old, unmaintainable, incredible stuff in between. So what a system dependent primitive renderer does, it removes the three last steps and packs it into one, you go directly to the renderer you want, in this case direct2d. So what does it look like when you let it run? It looks the same and that was exactly the target, it looks the same but it's fast and it does not use output device. So what else can be done, currently it has no support for text, so text is decomposed and rendered as anti-aliased poly polygons, not too bad but of course for production state we would need something more and direct support for gradients, so for direct2d I already looked a little bit into it, it might just be done as a custom effect which is some kind of texturing, so with some more work this could easily be extended to product quality. Let's see if we find resources to do with this this time. So what also happened, Kralen started a system dependent primitive renderer on Kyro, thanks Kralen, you're my man, so he just tested out by copy pasting the structure and filling it out with Kyro stuff and it does render something, there are some caveats and it would need some more love but it's easy maintainable and can be extended, so another proof of concept says this really works well, so in the process I also did some upstream clean up stuff in the master which was in the race, it was another reason to do this proof of concept and prototype, I can no promise that you can do exactly the same in drawing layer and do your own system dependent primitive renderer for any target system without having to fear that you get hung on something in the master which would be in the way because I had to clean that up anyways. The other point is this is good for any few visualizations but what about the rest which is still painting using output device, so I did two more experiments, one is forward calls in the back ends, so the back ends has for lean API, I just made a proof of concept prototype, you can find it in Garrett with the link I gave, you can add it as a patch to the current office, compile it and see it running and you will see that it currently forwards a single method to a rectangle for test and to make it visible in the office it's just a little bit color coded so we can see it, so that works perfectly and the good thing is the back ends are libraries themselves, you can just link them against a drawing layer and all functionality can be in drawing layer and you are storing layer stuff. The other way I tried was a kind of draw forwarder in the output device itself, so for every paint command call something in a virtual structure which is then overloaded in output device also works flawlessly and I also used the direct again and this is proof of concept too, there is also a Garrett link, you can just use that link, patch it into your office compile and see it running, you get the same color styling to see how it's running, yeah. So which way to continue, best convert all to LibreOffice primitives, I always wanted to have said done but I know it's not possible, combination of one of these solutions with system dependent primitives or worst just keep it like it is, like always. So I'm still very interested to do this but I did this prototype now mostly in private with some support from Torsten thanks but I cannot continue doing it in the needed intensity just privately so without getting resources this will fail again and we will stay at VCL output device forever, that's it.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 16.88, "text": " Hello, my name is Armin Legrand.", "tokens": [2425, 11, 452, 1315, 307, 1587, 2367, 7470, 3699, 13], "temperature": 0.0, "avg_logprob": -0.2978303514677903, "compression_ratio": 1.3375, "no_speech_prob": 0.09275472909212112}, {"id": 1, "seek": 0, "start": 16.88, "end": 24.0, "text": " I'm working on the graphic stack for a long time, as many of you know, and this is actually", "tokens": [286, 478, 1364, 322, 264, 14089, 8630, 337, 257, 938, 565, 11, 382, 867, 295, 291, 458, 11, 293, 341, 307, 767], "temperature": 0.0, "avg_logprob": -0.2978303514677903, "compression_ratio": 1.3375, "no_speech_prob": 0.09275472909212112}, {"id": 2, "seek": 0, "start": 24.0, "end": 29.44, "text": " also a kind of update from the LibreOffice conference where I already talked about system", "tokens": [611, 257, 733, 295, 5623, 490, 264, 15834, 265, 29745, 573, 7586, 689, 286, 1217, 2825, 466, 1185], "temperature": 0.0, "avg_logprob": -0.2978303514677903, "compression_ratio": 1.3375, "no_speech_prob": 0.09275472909212112}, {"id": 3, "seek": 2944, "start": 29.44, "end": 33.0, "text": " dependent primitive renderers and why they are important.", "tokens": [12334, 28540, 15529, 433, 293, 983, 436, 366, 1021, 13], "temperature": 0.0, "avg_logprob": -0.21209967538212124, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.00032387860119342804}, {"id": 4, "seek": 2944, "start": 33.0, "end": 41.28, "text": " I'm talking about them for years, as you know, and at the last conference I was so,", "tokens": [286, 478, 1417, 466, 552, 337, 924, 11, 382, 291, 458, 11, 293, 412, 264, 1036, 7586, 286, 390, 370, 11], "temperature": 0.0, "avg_logprob": -0.21209967538212124, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.00032387860119342804}, {"id": 5, "seek": 2944, "start": 41.28, "end": 48.480000000000004, "text": " I wish to promise to implement a prototype, and I did, and it's finished, and I did it", "tokens": [286, 3172, 281, 6228, 281, 4445, 257, 19475, 11, 293, 286, 630, 11, 293, 309, 311, 4335, 11, 293, 286, 630, 309], "temperature": 0.0, "avg_logprob": -0.21209967538212124, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.00032387860119342804}, {"id": 6, "seek": 2944, "start": 48.480000000000004, "end": 58.36, "text": " on Direct2D, and it renders what you expected to render, so with Direct2D, of course, it's", "tokens": [322, 18308, 17, 35, 11, 293, 309, 6125, 433, 437, 291, 5176, 281, 15529, 11, 370, 365, 18308, 17, 35, 11, 295, 1164, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.21209967538212124, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.00032387860119342804}, {"id": 7, "seek": 5836, "start": 58.36, "end": 64.52, "text": " on Windows, but there was no special reason for Direct2D, I just wanted to try out if", "tokens": [322, 8591, 11, 457, 456, 390, 572, 2121, 1778, 337, 18308, 17, 35, 11, 286, 445, 1415, 281, 853, 484, 498], "temperature": 0.0, "avg_logprob": -0.12995578931725543, "compression_ratio": 1.4438202247191012, "no_speech_prob": 0.00012629118282347918}, {"id": 8, "seek": 5836, "start": 64.52, "end": 73.72, "text": " it fits well to a standard graphic library, and if I could figure out how to do it myself", "tokens": [309, 9001, 731, 281, 257, 3832, 14089, 6405, 11, 293, 498, 286, 727, 2573, 484, 577, 281, 360, 309, 2059], "temperature": 0.0, "avg_logprob": -0.12995578931725543, "compression_ratio": 1.4438202247191012, "no_speech_prob": 0.00012629118282347918}, {"id": 9, "seek": 5836, "start": 73.72, "end": 83.12, "text": " because I didn't know Direct2D too good myself, so it was some safe training too.", "tokens": [570, 286, 994, 380, 458, 18308, 17, 35, 886, 665, 2059, 11, 370, 309, 390, 512, 3273, 3097, 886, 13], "temperature": 0.0, "avg_logprob": -0.12995578931725543, "compression_ratio": 1.4438202247191012, "no_speech_prob": 0.00012629118282347918}, {"id": 10, "seek": 8312, "start": 83.12, "end": 93.28, "text": " So it's finished, it's working, and everyone can have an example now how to do some system", "tokens": [407, 309, 311, 4335, 11, 309, 311, 1364, 11, 293, 1518, 393, 362, 364, 1365, 586, 577, 281, 360, 512, 1185], "temperature": 0.0, "avg_logprob": -0.14146432009610263, "compression_ratio": 1.4597701149425288, "no_speech_prob": 0.00013893883442506194}, {"id": 11, "seek": 8312, "start": 93.28, "end": 96.28, "text": " dependent primitive renderer if he wants to.", "tokens": [12334, 28540, 15529, 260, 498, 415, 2738, 281, 13], "temperature": 0.0, "avg_logprob": -0.14146432009610263, "compression_ratio": 1.4597701149425288, "no_speech_prob": 0.00013893883442506194}, {"id": 12, "seek": 8312, "start": 96.28, "end": 98.04, "text": " So what happens when painting?", "tokens": [407, 437, 2314, 562, 5370, 30], "temperature": 0.0, "avg_logprob": -0.14146432009610263, "compression_ratio": 1.4597701149425288, "no_speech_prob": 0.00013893883442506194}, {"id": 13, "seek": 8312, "start": 98.04, "end": 106.44, "text": " I don't want to go in detail about that, I have tried to formulate what's all happening", "tokens": [286, 500, 380, 528, 281, 352, 294, 2607, 466, 300, 11, 286, 362, 3031, 281, 47881, 437, 311, 439, 2737], "temperature": 0.0, "avg_logprob": -0.14146432009610263, "compression_ratio": 1.4597701149425288, "no_speech_prob": 0.00013893883442506194}, {"id": 14, "seek": 10644, "start": 106.44, "end": 114.52, "text": " so you can just check it when you download the presentation, that's the history, why", "tokens": [370, 291, 393, 445, 1520, 309, 562, 291, 5484, 264, 5860, 11, 300, 311, 264, 2503, 11, 983], "temperature": 0.0, "avg_logprob": -0.17487925496594658, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.0001386985823046416}, {"id": 15, "seek": 10644, "start": 114.52, "end": 123.16, "text": " it happened, what happened, also some history, so what did I do?", "tokens": [309, 2011, 11, 437, 2011, 11, 611, 512, 2503, 11, 370, 437, 630, 286, 360, 30], "temperature": 0.0, "avg_logprob": -0.17487925496594658, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.0001386985823046416}, {"id": 16, "seek": 10644, "start": 123.16, "end": 130.56, "text": " Just started with a simple primitive processor, and it's feature complete because it supports", "tokens": [1449, 1409, 365, 257, 2199, 28540, 15321, 11, 293, 309, 311, 4111, 3566, 570, 309, 9346], "temperature": 0.0, "avg_logprob": -0.17487925496594658, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.0001386985823046416}, {"id": 17, "seek": 13056, "start": 130.56, "end": 138.16, "text": " all necessary primitives, there are four primitives you have to support, and some grouping primitives", "tokens": [439, 4818, 2886, 38970, 11, 456, 366, 1451, 2886, 38970, 291, 362, 281, 1406, 11, 293, 512, 40149, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.16858287479566492, "compression_ratio": 1.9029126213592233, "no_speech_prob": 0.00015751570754218847}, {"id": 18, "seek": 13056, "start": 138.16, "end": 144.28, "text": " you have to support, and there are quite some extra primitives supported to get some more", "tokens": [291, 362, 281, 1406, 11, 293, 456, 366, 1596, 512, 2857, 2886, 38970, 8104, 281, 483, 512, 544], "temperature": 0.0, "avg_logprob": -0.16858287479566492, "compression_ratio": 1.9029126213592233, "no_speech_prob": 0.00015751570754218847}, {"id": 19, "seek": 13056, "start": 144.28, "end": 149.72, "text": " speed into it, which is not necessary to be feature complete because as I hope you know", "tokens": [3073, 666, 309, 11, 597, 307, 406, 4818, 281, 312, 4111, 3566, 570, 382, 286, 1454, 291, 458], "temperature": 0.0, "avg_logprob": -0.16858287479566492, "compression_ratio": 1.9029126213592233, "no_speech_prob": 0.00015751570754218847}, {"id": 20, "seek": 13056, "start": 149.72, "end": 156.36, "text": " all now, you can decompose a primitive and it just dismantles the simpler primitives", "tokens": [439, 586, 11, 291, 393, 22867, 541, 257, 28540, 293, 309, 445, 30506, 904, 264, 18587, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.16858287479566492, "compression_ratio": 1.9029126213592233, "no_speech_prob": 0.00015751570754218847}, {"id": 21, "seek": 13056, "start": 156.36, "end": 159.48000000000002, "text": " which can then be rendered.", "tokens": [597, 393, 550, 312, 28748, 13], "temperature": 0.0, "avg_logprob": -0.16858287479566492, "compression_ratio": 1.9029126213592233, "no_speech_prob": 0.00015751570754218847}, {"id": 22, "seek": 15948, "start": 159.48, "end": 167.92, "text": " So it's in a single source file, so no hacking required, inside this single source file you", "tokens": [407, 309, 311, 294, 257, 2167, 4009, 3991, 11, 370, 572, 31422, 4739, 11, 1854, 341, 2167, 4009, 3991, 291], "temperature": 0.0, "avg_logprob": -0.16971106756301152, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.00010656599624780938}, {"id": 23, "seek": 15948, "start": 167.92, "end": 174.32, "text": " can do whatever you want, it's just 2000 lines, so not too much if you compare it with some", "tokens": [393, 360, 2035, 291, 528, 11, 309, 311, 445, 8132, 3876, 11, 370, 406, 886, 709, 498, 291, 6794, 309, 365, 512], "temperature": 0.0, "avg_logprob": -0.16971106756301152, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.00010656599624780938}, {"id": 24, "seek": 15948, "start": 174.32, "end": 180.83999999999997, "text": " back end implementations which are spreaded over the whole office.", "tokens": [646, 917, 4445, 763, 597, 366, 3974, 292, 670, 264, 1379, 3398, 13], "temperature": 0.0, "avg_logprob": -0.16971106756301152, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.00010656599624780938}, {"id": 25, "seek": 18084, "start": 180.84, "end": 190.32, "text": " It translates primitive data directly to direct2d, uses already available system dependent", "tokens": [467, 28468, 28540, 1412, 3838, 281, 2047, 17, 67, 11, 4960, 1217, 2435, 1185, 12334], "temperature": 0.0, "avg_logprob": -0.19674324989318848, "compression_ratio": 1.6, "no_speech_prob": 6.374005897669122e-05}, {"id": 26, "seek": 18084, "start": 190.32, "end": 196.64000000000001, "text": " buffering which was not used in other implementations, I don't know why because it's working and", "tokens": [9204, 1794, 597, 390, 406, 1143, 294, 661, 4445, 763, 11, 286, 500, 380, 458, 983, 570, 309, 311, 1364, 293], "temperature": 0.0, "avg_logprob": -0.19674324989318848, "compression_ratio": 1.6, "no_speech_prob": 6.374005897669122e-05}, {"id": 27, "seek": 18084, "start": 196.64000000000001, "end": 203.12, "text": " available, it does not need any adaption of bitmap-bitmap-x which of course would be", "tokens": [2435, 11, 309, 775, 406, 643, 604, 6231, 313, 295, 857, 24223, 12, 5260, 24223, 12, 87, 597, 295, 1164, 576, 312], "temperature": 0.0, "avg_logprob": -0.19674324989318848, "compression_ratio": 1.6, "no_speech_prob": 6.374005897669122e-05}, {"id": 28, "seek": 18084, "start": 203.12, "end": 209.32, "text": " even better to do, so to directly use the data without converting it, but now it's just", "tokens": [754, 1101, 281, 360, 11, 370, 281, 3838, 764, 264, 1412, 1553, 29942, 309, 11, 457, 586, 309, 311, 445], "temperature": 0.0, "avg_logprob": -0.19674324989318848, "compression_ratio": 1.6, "no_speech_prob": 6.374005897669122e-05}, {"id": 29, "seek": 20932, "start": 209.32, "end": 214.76, "text": " converted once and held in this standard system dependent buffer.", "tokens": [16424, 1564, 293, 5167, 294, 341, 3832, 1185, 12334, 21762, 13], "temperature": 0.0, "avg_logprob": -0.21964796793829536, "compression_ratio": 1.688, "no_speech_prob": 0.00017017840582411736}, {"id": 30, "seek": 20932, "start": 214.76, "end": 218.95999999999998, "text": " So it's quite fast and you can try yourself because it's in the master, so if you have", "tokens": [407, 309, 311, 1596, 2370, 293, 291, 393, 853, 1803, 570, 309, 311, 294, 264, 4505, 11, 370, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.21964796793829536, "compression_ratio": 1.688, "no_speech_prob": 0.00017017840582411736}, {"id": 31, "seek": 20932, "start": 218.95999999999998, "end": 224.76, "text": " a Windows Pro version and you started with environment variable mentioned here, you will", "tokens": [257, 8591, 1705, 3037, 293, 291, 1409, 365, 2823, 7006, 2835, 510, 11, 291, 486], "temperature": 0.0, "avg_logprob": -0.21964796793829536, "compression_ratio": 1.688, "no_speech_prob": 0.00017017840582411736}, {"id": 32, "seek": 20932, "start": 224.76, "end": 230.28, "text": " get the new renderer and you will see the added view of your impasse and the parts of", "tokens": [483, 264, 777, 15529, 260, 293, 291, 486, 536, 264, 3869, 1910, 295, 428, 704, 8604, 293, 264, 3166, 295], "temperature": 0.0, "avg_logprob": -0.21964796793829536, "compression_ratio": 1.688, "no_speech_prob": 0.00017017840582411736}, {"id": 33, "seek": 20932, "start": 230.28, "end": 237.72, "text": " wider and calc as far as say support primitive rendering rendered directly by direct2d without", "tokens": [11842, 293, 2104, 66, 382, 1400, 382, 584, 1406, 28540, 22407, 28748, 3838, 538, 2047, 17, 67, 1553], "temperature": 0.0, "avg_logprob": -0.21964796793829536, "compression_ratio": 1.688, "no_speech_prob": 0.00017017840582411736}, {"id": 34, "seek": 23772, "start": 237.72, "end": 243.64, "text": " using output device at all, so that's proof of concept and I delivered it.", "tokens": [1228, 5598, 4302, 412, 439, 11, 370, 300, 311, 8177, 295, 3410, 293, 286, 10144, 309, 13], "temperature": 0.0, "avg_logprob": -0.16526278853416443, "compression_ratio": 1.446927374301676, "no_speech_prob": 0.0002630666131153703}, {"id": 35, "seek": 23772, "start": 243.64, "end": 254.92, "text": " So now I hope we find some guys who can help, these are the ones I added to make it faster", "tokens": [407, 586, 286, 1454, 321, 915, 512, 1074, 567, 393, 854, 11, 613, 366, 264, 2306, 286, 3869, 281, 652, 309, 4663], "temperature": 0.0, "avg_logprob": -0.16526278853416443, "compression_ratio": 1.446927374301676, "no_speech_prob": 0.0002630666131153703}, {"id": 36, "seek": 23772, "start": 254.92, "end": 262.28, "text": " and it's not even optimized but already pretty fast because just think about the layers which", "tokens": [293, 309, 311, 406, 754, 26941, 457, 1217, 1238, 2370, 570, 445, 519, 466, 264, 7914, 597], "temperature": 0.0, "avg_logprob": -0.16526278853416443, "compression_ratio": 1.446927374301676, "no_speech_prob": 0.0002630666131153703}, {"id": 37, "seek": 26228, "start": 262.28, "end": 269.28, "text": " I used, we have the model, it creates primitives, the primitives are thrown at a renderer currently", "tokens": [286, 1143, 11, 321, 362, 264, 2316, 11, 309, 7829, 2886, 38970, 11, 264, 2886, 38970, 366, 11732, 412, 257, 15529, 260, 4362], "temperature": 0.0, "avg_logprob": -0.20432319906022814, "compression_ratio": 1.7329192546583851, "no_speech_prob": 0.00015789951430633664}, {"id": 38, "seek": 26228, "start": 269.28, "end": 278.91999999999996, "text": " to the VCL pixel renderer, that renderer packs it to output device, still to output device", "tokens": [281, 264, 691, 22458, 19261, 15529, 260, 11, 300, 15529, 260, 19403, 309, 281, 5598, 4302, 11, 920, 281, 5598, 4302], "temperature": 0.0, "avg_logprob": -0.20432319906022814, "compression_ratio": 1.7329192546583851, "no_speech_prob": 0.00015789951430633664}, {"id": 39, "seek": 26228, "start": 278.91999999999996, "end": 284.79999999999995, "text": " and that output device sends it to a back end, so you have a five level stack and output", "tokens": [293, 300, 5598, 4302, 14790, 309, 281, 257, 646, 917, 11, 370, 291, 362, 257, 1732, 1496, 8630, 293, 5598], "temperature": 0.0, "avg_logprob": -0.20432319906022814, "compression_ratio": 1.7329192546583851, "no_speech_prob": 0.00015789951430633664}, {"id": 40, "seek": 28480, "start": 284.8, "end": 293.76, "text": " device alone does a lot of work in between, old, unmaintainable, incredible stuff in between.", "tokens": [4302, 3312, 775, 257, 688, 295, 589, 294, 1296, 11, 1331, 11, 19334, 5114, 491, 712, 11, 4651, 1507, 294, 1296, 13], "temperature": 0.0, "avg_logprob": -0.1385767833296075, "compression_ratio": 1.583756345177665, "no_speech_prob": 0.00017281623149756342}, {"id": 41, "seek": 28480, "start": 293.76, "end": 299.96000000000004, "text": " So what a system dependent primitive renderer does, it removes the three last steps and", "tokens": [407, 437, 257, 1185, 12334, 28540, 15529, 260, 775, 11, 309, 30445, 264, 1045, 1036, 4439, 293], "temperature": 0.0, "avg_logprob": -0.1385767833296075, "compression_ratio": 1.583756345177665, "no_speech_prob": 0.00017281623149756342}, {"id": 42, "seek": 28480, "start": 299.96000000000004, "end": 307.52, "text": " packs it into one, you go directly to the renderer you want, in this case direct2d.", "tokens": [19403, 309, 666, 472, 11, 291, 352, 3838, 281, 264, 15529, 260, 291, 528, 11, 294, 341, 1389, 2047, 17, 67, 13], "temperature": 0.0, "avg_logprob": -0.1385767833296075, "compression_ratio": 1.583756345177665, "no_speech_prob": 0.00017281623149756342}, {"id": 43, "seek": 28480, "start": 307.52, "end": 311.0, "text": " So what does it look like when you let it run?", "tokens": [407, 437, 775, 309, 574, 411, 562, 291, 718, 309, 1190, 30], "temperature": 0.0, "avg_logprob": -0.1385767833296075, "compression_ratio": 1.583756345177665, "no_speech_prob": 0.00017281623149756342}, {"id": 44, "seek": 31100, "start": 311.0, "end": 317.8, "text": " It looks the same and that was exactly the target, it looks the same but it's fast and", "tokens": [467, 1542, 264, 912, 293, 300, 390, 2293, 264, 3779, 11, 309, 1542, 264, 912, 457, 309, 311, 2370, 293], "temperature": 0.0, "avg_logprob": -0.1381910593822749, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003704104747157544}, {"id": 45, "seek": 31100, "start": 317.8, "end": 320.6, "text": " it does not use output device.", "tokens": [309, 775, 406, 764, 5598, 4302, 13], "temperature": 0.0, "avg_logprob": -0.1381910593822749, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003704104747157544}, {"id": 46, "seek": 31100, "start": 320.6, "end": 325.68, "text": " So what else can be done, currently it has no support for text, so text is decomposed", "tokens": [407, 437, 1646, 393, 312, 1096, 11, 4362, 309, 575, 572, 1406, 337, 2487, 11, 370, 2487, 307, 22867, 1744], "temperature": 0.0, "avg_logprob": -0.1381910593822749, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003704104747157544}, {"id": 47, "seek": 31100, "start": 325.68, "end": 332.6, "text": " and rendered as anti-aliased poly polygons, not too bad but of course for production", "tokens": [293, 28748, 382, 6061, 12, 5103, 1937, 6754, 6754, 70, 892, 11, 406, 886, 1578, 457, 295, 1164, 337, 4265], "temperature": 0.0, "avg_logprob": -0.1381910593822749, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003704104747157544}, {"id": 48, "seek": 31100, "start": 332.6, "end": 340.56, "text": " state we would need something more and direct support for gradients, so for direct2d I already", "tokens": [1785, 321, 576, 643, 746, 544, 293, 2047, 1406, 337, 2771, 2448, 11, 370, 337, 2047, 17, 67, 286, 1217], "temperature": 0.0, "avg_logprob": -0.1381910593822749, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003704104747157544}, {"id": 49, "seek": 34056, "start": 340.56, "end": 346.04, "text": " looked a little bit into it, it might just be done as a custom effect which is some kind", "tokens": [2956, 257, 707, 857, 666, 309, 11, 309, 1062, 445, 312, 1096, 382, 257, 2375, 1802, 597, 307, 512, 733], "temperature": 0.0, "avg_logprob": -0.1957645183656274, "compression_ratio": 1.5116279069767442, "no_speech_prob": 3.309962266939692e-05}, {"id": 50, "seek": 34056, "start": 346.04, "end": 354.08, "text": " of texturing, so with some more work this could easily be extended to product quality.", "tokens": [295, 2487, 1345, 11, 370, 365, 512, 544, 589, 341, 727, 3612, 312, 10913, 281, 1674, 3125, 13], "temperature": 0.0, "avg_logprob": -0.1957645183656274, "compression_ratio": 1.5116279069767442, "no_speech_prob": 3.309962266939692e-05}, {"id": 51, "seek": 34056, "start": 354.08, "end": 360.8, "text": " Let's see if we find resources to do with this this time.", "tokens": [961, 311, 536, 498, 321, 915, 3593, 281, 360, 365, 341, 341, 565, 13], "temperature": 0.0, "avg_logprob": -0.1957645183656274, "compression_ratio": 1.5116279069767442, "no_speech_prob": 3.309962266939692e-05}, {"id": 52, "seek": 34056, "start": 360.8, "end": 367.24, "text": " So what also happened, Kralen started a system dependent primitive renderer on Kyro, thanks", "tokens": [407, 437, 611, 2011, 11, 591, 2155, 268, 1409, 257, 1185, 12334, 28540, 15529, 260, 322, 12237, 340, 11, 3231], "temperature": 0.0, "avg_logprob": -0.1957645183656274, "compression_ratio": 1.5116279069767442, "no_speech_prob": 3.309962266939692e-05}, {"id": 53, "seek": 36724, "start": 367.24, "end": 376.6, "text": " Kralen, you're my man, so he just tested out by copy pasting the structure and filling", "tokens": [591, 2155, 268, 11, 291, 434, 452, 587, 11, 370, 415, 445, 8246, 484, 538, 5055, 1791, 278, 264, 3877, 293, 10623], "temperature": 0.0, "avg_logprob": -0.1743621826171875, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00020823559316340834}, {"id": 54, "seek": 36724, "start": 376.6, "end": 381.68, "text": " it out with Kyro stuff and it does render something, there are some caveats and it would", "tokens": [309, 484, 365, 12237, 340, 1507, 293, 309, 775, 15529, 746, 11, 456, 366, 512, 11730, 1720, 293, 309, 576], "temperature": 0.0, "avg_logprob": -0.1743621826171875, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00020823559316340834}, {"id": 55, "seek": 36724, "start": 381.68, "end": 388.12, "text": " need some more love but it's easy maintainable and can be extended, so another proof of concept", "tokens": [643, 512, 544, 959, 457, 309, 311, 1858, 6909, 712, 293, 393, 312, 10913, 11, 370, 1071, 8177, 295, 3410], "temperature": 0.0, "avg_logprob": -0.1743621826171875, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00020823559316340834}, {"id": 56, "seek": 38812, "start": 388.12, "end": 397.76, "text": " says this really works well, so in the process I also did some upstream clean up stuff in", "tokens": [1619, 341, 534, 1985, 731, 11, 370, 294, 264, 1399, 286, 611, 630, 512, 33915, 2541, 493, 1507, 294], "temperature": 0.0, "avg_logprob": -0.18541434959129052, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00011008940055035055}, {"id": 57, "seek": 38812, "start": 397.76, "end": 402.16, "text": " the master which was in the race, it was another reason to do this proof of concept", "tokens": [264, 4505, 597, 390, 294, 264, 4569, 11, 309, 390, 1071, 1778, 281, 360, 341, 8177, 295, 3410], "temperature": 0.0, "avg_logprob": -0.18541434959129052, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00011008940055035055}, {"id": 58, "seek": 38812, "start": 402.16, "end": 409.24, "text": " and prototype, I can no promise that you can do exactly the same in drawing layer and do", "tokens": [293, 19475, 11, 286, 393, 572, 6228, 300, 291, 393, 360, 2293, 264, 912, 294, 6316, 4583, 293, 360], "temperature": 0.0, "avg_logprob": -0.18541434959129052, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00011008940055035055}, {"id": 59, "seek": 38812, "start": 409.24, "end": 417.0, "text": " your own system dependent primitive renderer for any target system without having to fear", "tokens": [428, 1065, 1185, 12334, 28540, 15529, 260, 337, 604, 3779, 1185, 1553, 1419, 281, 4240], "temperature": 0.0, "avg_logprob": -0.18541434959129052, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00011008940055035055}, {"id": 60, "seek": 41700, "start": 417.0, "end": 421.88, "text": " that you get hung on something in the master which would be in the way because I had to", "tokens": [300, 291, 483, 5753, 322, 746, 294, 264, 4505, 597, 576, 312, 294, 264, 636, 570, 286, 632, 281], "temperature": 0.0, "avg_logprob": -0.21144055629122085, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.00026302263722755015}, {"id": 61, "seek": 41700, "start": 421.88, "end": 427.52, "text": " clean that up anyways.", "tokens": [2541, 300, 493, 13448, 13], "temperature": 0.0, "avg_logprob": -0.21144055629122085, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.00026302263722755015}, {"id": 62, "seek": 41700, "start": 427.52, "end": 432.36, "text": " The other point is this is good for any few visualizations but what about the rest which", "tokens": [440, 661, 935, 307, 341, 307, 665, 337, 604, 1326, 5056, 14455, 457, 437, 466, 264, 1472, 597], "temperature": 0.0, "avg_logprob": -0.21144055629122085, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.00026302263722755015}, {"id": 63, "seek": 41700, "start": 432.36, "end": 443.48, "text": " is still painting using output device, so I did two more experiments, one is forward", "tokens": [307, 920, 5370, 1228, 5598, 4302, 11, 370, 286, 630, 732, 544, 12050, 11, 472, 307, 2128], "temperature": 0.0, "avg_logprob": -0.21144055629122085, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.00026302263722755015}, {"id": 64, "seek": 44348, "start": 443.48, "end": 450.04, "text": " calls in the back ends, so the back ends has for lean API, I just made a proof of concept", "tokens": [5498, 294, 264, 646, 5314, 11, 370, 264, 646, 5314, 575, 337, 11659, 9362, 11, 286, 445, 1027, 257, 8177, 295, 3410], "temperature": 0.0, "avg_logprob": -0.20684755932201038, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.00038167834281921387}, {"id": 65, "seek": 44348, "start": 450.04, "end": 456.68, "text": " prototype, you can find it in Garrett with the link I gave, you can add it as a patch", "tokens": [19475, 11, 291, 393, 915, 309, 294, 40266, 365, 264, 2113, 286, 2729, 11, 291, 393, 909, 309, 382, 257, 9972], "temperature": 0.0, "avg_logprob": -0.20684755932201038, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.00038167834281921387}, {"id": 66, "seek": 44348, "start": 456.68, "end": 462.96000000000004, "text": " to the current office, compile it and see it running and you will see that it currently", "tokens": [281, 264, 2190, 3398, 11, 31413, 309, 293, 536, 309, 2614, 293, 291, 486, 536, 300, 309, 4362], "temperature": 0.0, "avg_logprob": -0.20684755932201038, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.00038167834281921387}, {"id": 67, "seek": 44348, "start": 462.96000000000004, "end": 472.16, "text": " forwards a single method to a rectangle for test and to make it visible in the office", "tokens": [30126, 257, 2167, 3170, 281, 257, 21930, 337, 1500, 293, 281, 652, 309, 8974, 294, 264, 3398], "temperature": 0.0, "avg_logprob": -0.20684755932201038, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.00038167834281921387}, {"id": 68, "seek": 47216, "start": 472.16, "end": 478.48, "text": " it's just a little bit color coded so we can see it, so that works perfectly and the good", "tokens": [309, 311, 445, 257, 707, 857, 2017, 34874, 370, 321, 393, 536, 309, 11, 370, 300, 1985, 6239, 293, 264, 665], "temperature": 0.0, "avg_logprob": -0.186517333984375, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.00010497155017219484}, {"id": 69, "seek": 47216, "start": 478.48, "end": 484.36, "text": " thing is the back ends are libraries themselves, you can just link them against a drawing layer", "tokens": [551, 307, 264, 646, 5314, 366, 15148, 2969, 11, 291, 393, 445, 2113, 552, 1970, 257, 6316, 4583], "temperature": 0.0, "avg_logprob": -0.186517333984375, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.00010497155017219484}, {"id": 70, "seek": 47216, "start": 484.36, "end": 489.64000000000004, "text": " and all functionality can be in drawing layer and you are storing layer stuff.", "tokens": [293, 439, 14980, 393, 312, 294, 6316, 4583, 293, 291, 366, 26085, 4583, 1507, 13], "temperature": 0.0, "avg_logprob": -0.186517333984375, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.00010497155017219484}, {"id": 71, "seek": 47216, "start": 489.64000000000004, "end": 496.72, "text": " The other way I tried was a kind of draw forwarder in the output device itself, so for every", "tokens": [440, 661, 636, 286, 3031, 390, 257, 733, 295, 2642, 2128, 260, 294, 264, 5598, 4302, 2564, 11, 370, 337, 633], "temperature": 0.0, "avg_logprob": -0.186517333984375, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.00010497155017219484}, {"id": 72, "seek": 49672, "start": 496.72, "end": 503.20000000000005, "text": " paint command call something in a virtual structure which is then overloaded in output", "tokens": [4225, 5622, 818, 746, 294, 257, 6374, 3877, 597, 307, 550, 28777, 292, 294, 5598], "temperature": 0.0, "avg_logprob": -0.20785548610071983, "compression_ratio": 1.5375722543352601, "no_speech_prob": 0.00011728468234650791}, {"id": 73, "seek": 49672, "start": 503.20000000000005, "end": 511.24, "text": " device also works flawlessly and I also used the direct again and this is proof of concept", "tokens": [4302, 611, 1985, 13717, 12048, 293, 286, 611, 1143, 264, 2047, 797, 293, 341, 307, 8177, 295, 3410], "temperature": 0.0, "avg_logprob": -0.20785548610071983, "compression_ratio": 1.5375722543352601, "no_speech_prob": 0.00011728468234650791}, {"id": 74, "seek": 49672, "start": 511.24, "end": 516.32, "text": " too, there is also a Garrett link, you can just use that link, patch it into your office", "tokens": [886, 11, 456, 307, 611, 257, 40266, 2113, 11, 291, 393, 445, 764, 300, 2113, 11, 9972, 309, 666, 428, 3398], "temperature": 0.0, "avg_logprob": -0.20785548610071983, "compression_ratio": 1.5375722543352601, "no_speech_prob": 0.00011728468234650791}, {"id": 75, "seek": 51632, "start": 516.32, "end": 526.9200000000001, "text": " compile and see it running, you get the same color styling to see how it's running, yeah.", "tokens": [31413, 293, 536, 309, 2614, 11, 291, 483, 264, 912, 2017, 27944, 281, 536, 577, 309, 311, 2614, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.196901237263399, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0003542055783327669}, {"id": 76, "seek": 51632, "start": 526.9200000000001, "end": 535.0, "text": " So which way to continue, best convert all to LibreOffice primitives, I always wanted", "tokens": [407, 597, 636, 281, 2354, 11, 1151, 7620, 439, 281, 15834, 265, 29745, 573, 2886, 38970, 11, 286, 1009, 1415], "temperature": 0.0, "avg_logprob": -0.196901237263399, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0003542055783327669}, {"id": 77, "seek": 51632, "start": 535.0, "end": 542.5600000000001, "text": " to have said done but I know it's not possible, combination of one of these solutions with", "tokens": [281, 362, 848, 1096, 457, 286, 458, 309, 311, 406, 1944, 11, 6562, 295, 472, 295, 613, 6547, 365], "temperature": 0.0, "avg_logprob": -0.196901237263399, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0003542055783327669}, {"id": 78, "seek": 54256, "start": 542.56, "end": 549.1199999999999, "text": " system dependent primitives or worst just keep it like it is, like always.", "tokens": [1185, 12334, 2886, 38970, 420, 5855, 445, 1066, 309, 411, 309, 307, 11, 411, 1009, 13], "temperature": 0.0, "avg_logprob": -0.20314673888377655, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.00015174594591371715}, {"id": 79, "seek": 54256, "start": 549.1199999999999, "end": 556.1199999999999, "text": " So I'm still very interested to do this but I did this prototype now mostly in private", "tokens": [407, 286, 478, 920, 588, 3102, 281, 360, 341, 457, 286, 630, 341, 19475, 586, 5240, 294, 4551], "temperature": 0.0, "avg_logprob": -0.20314673888377655, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.00015174594591371715}, {"id": 80, "seek": 54256, "start": 556.1199999999999, "end": 565.4799999999999, "text": " with some support from Torsten thanks but I cannot continue doing it in the needed intensity", "tokens": [365, 512, 1406, 490, 7160, 6266, 3231, 457, 286, 2644, 2354, 884, 309, 294, 264, 2978, 13749], "temperature": 0.0, "avg_logprob": -0.20314673888377655, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.00015174594591371715}, {"id": 81, "seek": 54256, "start": 565.4799999999999, "end": 571.8, "text": " just privately so without getting resources this will fail again and we will stay at VCL", "tokens": [445, 31919, 370, 1553, 1242, 3593, 341, 486, 3061, 797, 293, 321, 486, 1754, 412, 691, 22458], "temperature": 0.0, "avg_logprob": -0.20314673888377655, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.00015174594591371715}, {"id": 82, "seek": 57180, "start": 571.8, "end": 575.88, "text": " output device forever, that's it.", "tokens": [50364, 5598, 4302, 5680, 11, 300, 311, 309, 13, 50568], "temperature": 0.0, "avg_logprob": -0.3823001167990945, "compression_ratio": 0.8048780487804879, "no_speech_prob": 0.0006478001596406102}], "language": "en"}