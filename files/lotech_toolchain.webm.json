{"text": " A very quick update on how we use C++ standards in LibreOffice to finish off this afternoon. So yeah, we're still using C++ 17, almost there's one thing that keeps cropping up. I think Noah will try to sneak it in twice and Mike wants. This is this unsuspecting standard from Kars thing where you have a string view of characters and you want to get an integer or floating point value out of that and there's a standard form function for that. Unfortunately it's not in Libre standards C++ 8 or only in 8 and only in 11 for floating point values which we don't have, we're still stuck at 7. So people keep trying to add that to the unolibraries and I as the gatekeeper of these unolibraries which we never want to change because then we have these maintenance problems. I keep banging them back that we don't need that, we don't need to add anything there because we'll have C++ 17 functionality for it anyway and I keep saying that for years now. At one point we'll get there, I'm pretty sure. So yeah, just C++ 17 for now still but of course we're making use of whatever becomes available in the later standards so that C++ 20 is out for two, three years now and C++ 23 is almost finished, it's the standardizing stuff takes its time but it's quite frozen by now. And then there's always these small things mostly in the standard library that are easy to approximate and then we usually make use of those ideas in our own code and have one header file, one include file where we either use the original alias to our O3 etl namespace or implement our own approximation which we then throw out once we have that available. So this is the span thing similar to the string view where you just have a range of values start and length. Then these comparison functions they are very interesting if you don't know them then check them out so you always have a hard time comparing two integers in C and C++ if they are of different types signed and unsigned and you get surprising results and finally in C++ 20 they decided to come up with ugly syntax functions but they will do the right thing whatever types you throw at them and we have at least one place where we use them by now for good measure. And another example is these standard unreachable magic function that they introduced we still have a macro for that to approximate it so if there is a place in your code where you can't reach so a default in a speech and you don't want to return any nonsense from that and the compiler would warn you that you don't have a return statement there then just add an unreachable there to tell the compiler this is impossible to reach anyway. Then there is bigger features or beyond library features that we try to make use of one way or another for example the C++ 20 const eval similar to const expression where you have something that should be computed at compile time and const expo is do it at compile time if possible otherwise do it at runtime and const eval is forcing you to do it at compile time and the trick there is if you have a function that has some assert and you make that function a const eval function then if the assert would not hold then you get a compilation error instead of just a runtime error later on or not even an error if you build with the asserts disabled and we make use of that in some places like this we have this color class and I think Noel again at one point tried to get rid of the ambiguity whether it has alpha channel or not so we now have a constructor that wants to make sure you pass in some value that doesn't have an alpha channel in there so we have an assert in there and if we have const eval in the latest compilers then we use it and then we would get a compiler at compilation time error already if you pass in some value that does have an alpha channel after all so that helped the improvement of the changing the code from the old semantics to the new semantics but so we have an if around that if have cpp const eval then use const eval otherwise we use const expo and in our configure script we have lots of checks whether we can use const eval and unfortunately only clang by now even the latest compiler versions we have five checks in there for bugs that we discovered with all these const eval implementations and clang the latest one has all its bugs sorted out but gcc and the Microsoft compiler still can't use it so that shows how if you have a feature sheet of what the compiler support and there is ticks for their adult trust that too much if you then actually try to use it you run into all kinds of issues and then of course coming up is issues there even even bigger way you can't use some if death trickery or some some include file where you approximate things biggest two things that come to my mind are the concepts in c++ 20 which would make code really more readable but which is hard to do in some macro way we have one place I think by now where we have again around this requires thing we have an if death or if we have a c++ 20 implementation that supports it and there is one place where we where we have some function that internally there's some dangerous dynamic casting and you know proxies didn't support dynamic casting so I wanted to make sure that we never use that function on a template type that does that is a you know could be you know proxy so I came up with this wonderful and requires cloth there to to if you have a lady new enough compiler to get that sorted out at runtime and otherwise we ignore it and even bigger thing is modules and I guess we will have to wait for for others to come up with real real implementations of that or real world usage to see how we would make use of them but even if these features are out in the dist in the distant future in some cases still what we already can do is try to force the compiler is hard to to run our code and demonstrate to them that they what what bugs they have worried what bugs are in the standard library implementations if they introduce new things so what I do is opt into this thing to use whatever compiler you use with the latest c++ you version that compiler implements which is typically c++ 23 by now and then have a big matrix of of platforms and compilers and libraries runtime standard long term standard runtime libraries to build on and and find all kinds of interesting bugs whenever I update one of those things and then mail the people mail Jonathan that he introduced something new in lip see lip standard c++ that doesn't get clang that doesn't make clang happy and so forth and these people are happy that we are the guinea pigs for them and that's it I guess we have time for question if there's any questions I'm not prepared for that who do you contact if you find it back in the Microsoft compiler oh they do have a web form now that you can fill in and I think I even got a response monster wow Mike again ski brought that up okay maybe one more question since we're at the end of the track so what's the status of of modules in compilers because as far as I know only Visual Studio does it and does it kind of sort of no I think they're all three by now in their head trunk versions they support them I think they claim it works but I didn't ever try it sorry a module is a new way of organizing your so that you don't have this issue of having all these includes that you need to include this is like pre-compiled a newer version of pre-compiled headers actually yeah yeah that sums it up okay then thanks again thanks", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 19.92, "text": " A very quick update on how we use C++ standards in LibreOffice to finish off this afternoon.", "tokens": [316, 588, 1702, 5623, 322, 577, 321, 764, 383, 25472, 7787, 294, 15834, 265, 29745, 573, 281, 2413, 766, 341, 6499, 13], "temperature": 0.0, "avg_logprob": -0.3365866470336914, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.13405610620975494}, {"id": 1, "seek": 0, "start": 19.92, "end": 28.12, "text": " So yeah, we're still using C++ 17, almost there's one thing that keeps cropping up.", "tokens": [407, 1338, 11, 321, 434, 920, 1228, 383, 25472, 3282, 11, 1920, 456, 311, 472, 551, 300, 5965, 4848, 3759, 493, 13], "temperature": 0.0, "avg_logprob": -0.3365866470336914, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.13405610620975494}, {"id": 2, "seek": 2812, "start": 28.12, "end": 33.0, "text": " I think Noah will try to sneak it in twice and Mike wants.", "tokens": [286, 519, 20895, 486, 853, 281, 13164, 309, 294, 6091, 293, 6602, 2738, 13], "temperature": 0.0, "avg_logprob": -0.26861314459161445, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0001365867501590401}, {"id": 3, "seek": 2812, "start": 33.0, "end": 40.72, "text": " This is this unsuspecting standard from Kars thing where you have a string view of characters", "tokens": [639, 307, 341, 2693, 301, 1043, 278, 3832, 490, 591, 685, 551, 689, 291, 362, 257, 6798, 1910, 295, 4342], "temperature": 0.0, "avg_logprob": -0.26861314459161445, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0001365867501590401}, {"id": 4, "seek": 2812, "start": 40.72, "end": 45.6, "text": " and you want to get an integer or floating point value out of that and there's a standard", "tokens": [293, 291, 528, 281, 483, 364, 24922, 420, 12607, 935, 2158, 484, 295, 300, 293, 456, 311, 257, 3832], "temperature": 0.0, "avg_logprob": -0.26861314459161445, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0001365867501590401}, {"id": 5, "seek": 2812, "start": 45.6, "end": 47.88, "text": " form function for that.", "tokens": [1254, 2445, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.26861314459161445, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0001365867501590401}, {"id": 6, "seek": 2812, "start": 47.88, "end": 54.400000000000006, "text": " Unfortunately it's not in Libre standards C++ 8 or only in 8 and only in 11 for floating", "tokens": [8590, 309, 311, 406, 294, 15834, 265, 7787, 383, 25472, 1649, 420, 787, 294, 1649, 293, 787, 294, 2975, 337, 12607], "temperature": 0.0, "avg_logprob": -0.26861314459161445, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0001365867501590401}, {"id": 7, "seek": 5440, "start": 54.4, "end": 58.32, "text": " point values which we don't have, we're still stuck at 7.", "tokens": [935, 4190, 597, 321, 500, 380, 362, 11, 321, 434, 920, 5541, 412, 1614, 13], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 8, "seek": 5440, "start": 58.32, "end": 66.08, "text": " So people keep trying to add that to the unolibraries and I as the gatekeeper of these unolibraries", "tokens": [407, 561, 1066, 1382, 281, 909, 300, 281, 264, 517, 401, 6414, 4889, 293, 286, 382, 264, 8539, 23083, 295, 613, 517, 401, 6414, 4889], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 9, "seek": 5440, "start": 66.08, "end": 70.03999999999999, "text": " which we never want to change because then we have these maintenance problems.", "tokens": [597, 321, 1128, 528, 281, 1319, 570, 550, 321, 362, 613, 11258, 2740, 13], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 10, "seek": 5440, "start": 70.03999999999999, "end": 74.8, "text": " I keep banging them back that we don't need that, we don't need to add anything there", "tokens": [286, 1066, 36982, 552, 646, 300, 321, 500, 380, 643, 300, 11, 321, 500, 380, 643, 281, 909, 1340, 456], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 11, "seek": 5440, "start": 74.8, "end": 81.4, "text": " because we'll have C++ 17 functionality for it anyway and I keep saying that for years", "tokens": [570, 321, 603, 362, 383, 25472, 3282, 14980, 337, 309, 4033, 293, 286, 1066, 1566, 300, 337, 924], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 12, "seek": 5440, "start": 81.4, "end": 82.4, "text": " now.", "tokens": [586, 13], "temperature": 0.0, "avg_logprob": -0.16172225387008102, "compression_ratio": 1.7178423236514522, "no_speech_prob": 6.469478103099391e-05}, {"id": 13, "seek": 8240, "start": 82.4, "end": 86.0, "text": " At one point we'll get there, I'm pretty sure.", "tokens": [1711, 472, 935, 321, 603, 483, 456, 11, 286, 478, 1238, 988, 13], "temperature": 0.0, "avg_logprob": -0.1988620324568315, "compression_ratio": 1.4744186046511627, "no_speech_prob": 4.3810621718876064e-05}, {"id": 14, "seek": 8240, "start": 86.0, "end": 95.48, "text": " So yeah, just C++ 17 for now still but of course we're making use of whatever becomes", "tokens": [407, 1338, 11, 445, 383, 25472, 3282, 337, 586, 920, 457, 295, 1164, 321, 434, 1455, 764, 295, 2035, 3643], "temperature": 0.0, "avg_logprob": -0.1988620324568315, "compression_ratio": 1.4744186046511627, "no_speech_prob": 4.3810621718876064e-05}, {"id": 15, "seek": 8240, "start": 95.48, "end": 102.0, "text": " available in the later standards so that C++ 20 is out for two, three years now and C++", "tokens": [2435, 294, 264, 1780, 7787, 370, 300, 383, 25472, 945, 307, 484, 337, 732, 11, 1045, 924, 586, 293, 383, 25472], "temperature": 0.0, "avg_logprob": -0.1988620324568315, "compression_ratio": 1.4744186046511627, "no_speech_prob": 4.3810621718876064e-05}, {"id": 16, "seek": 8240, "start": 102.0, "end": 110.36000000000001, "text": " 23 is almost finished, it's the standardizing stuff takes its time but it's quite frozen", "tokens": [6673, 307, 1920, 4335, 11, 309, 311, 264, 3832, 3319, 1507, 2516, 1080, 565, 457, 309, 311, 1596, 12496], "temperature": 0.0, "avg_logprob": -0.1988620324568315, "compression_ratio": 1.4744186046511627, "no_speech_prob": 4.3810621718876064e-05}, {"id": 17, "seek": 8240, "start": 110.36000000000001, "end": 111.68, "text": " by now.", "tokens": [538, 586, 13], "temperature": 0.0, "avg_logprob": -0.1988620324568315, "compression_ratio": 1.4744186046511627, "no_speech_prob": 4.3810621718876064e-05}, {"id": 18, "seek": 11168, "start": 111.68, "end": 117.56, "text": " And then there's always these small things mostly in the standard library that are easy", "tokens": [400, 550, 456, 311, 1009, 613, 1359, 721, 5240, 294, 264, 3832, 6405, 300, 366, 1858], "temperature": 0.0, "avg_logprob": -0.1624513566493988, "compression_ratio": 1.5227272727272727, "no_speech_prob": 1.5191913917078637e-05}, {"id": 19, "seek": 11168, "start": 117.56, "end": 127.24000000000001, "text": " to approximate and then we usually make use of those ideas in our own code and have one", "tokens": [281, 30874, 293, 550, 321, 2673, 652, 764, 295, 729, 3487, 294, 527, 1065, 3089, 293, 362, 472], "temperature": 0.0, "avg_logprob": -0.1624513566493988, "compression_ratio": 1.5227272727272727, "no_speech_prob": 1.5191913917078637e-05}, {"id": 20, "seek": 11168, "start": 127.24000000000001, "end": 135.8, "text": " header file, one include file where we either use the original alias to our O3 etl namespace", "tokens": [23117, 3991, 11, 472, 4090, 3991, 689, 321, 2139, 764, 264, 3380, 419, 4609, 281, 527, 422, 18, 1030, 75, 5288, 17940], "temperature": 0.0, "avg_logprob": -0.1624513566493988, "compression_ratio": 1.5227272727272727, "no_speech_prob": 1.5191913917078637e-05}, {"id": 21, "seek": 13580, "start": 135.8, "end": 143.96, "text": " or implement our own approximation which we then throw out once we have that available.", "tokens": [420, 4445, 527, 1065, 28023, 597, 321, 550, 3507, 484, 1564, 321, 362, 300, 2435, 13], "temperature": 0.0, "avg_logprob": -0.13848792674929597, "compression_ratio": 1.6103896103896105, "no_speech_prob": 2.2369731595972553e-05}, {"id": 22, "seek": 13580, "start": 143.96, "end": 150.0, "text": " So this is the span thing similar to the string view where you just have a range of values", "tokens": [407, 341, 307, 264, 16174, 551, 2531, 281, 264, 6798, 1910, 689, 291, 445, 362, 257, 3613, 295, 4190], "temperature": 0.0, "avg_logprob": -0.13848792674929597, "compression_ratio": 1.6103896103896105, "no_speech_prob": 2.2369731595972553e-05}, {"id": 23, "seek": 13580, "start": 150.0, "end": 152.20000000000002, "text": " start and length.", "tokens": [722, 293, 4641, 13], "temperature": 0.0, "avg_logprob": -0.13848792674929597, "compression_ratio": 1.6103896103896105, "no_speech_prob": 2.2369731595972553e-05}, {"id": 24, "seek": 13580, "start": 152.20000000000002, "end": 157.20000000000002, "text": " Then these comparison functions they are very interesting if you don't know them then", "tokens": [1396, 613, 9660, 6828, 436, 366, 588, 1880, 498, 291, 500, 380, 458, 552, 550], "temperature": 0.0, "avg_logprob": -0.13848792674929597, "compression_ratio": 1.6103896103896105, "no_speech_prob": 2.2369731595972553e-05}, {"id": 25, "seek": 13580, "start": 157.20000000000002, "end": 162.24, "text": " check them out so you always have a hard time comparing two integers in C and C++ if they", "tokens": [1520, 552, 484, 370, 291, 1009, 362, 257, 1152, 565, 15763, 732, 41674, 294, 383, 293, 383, 25472, 498, 436], "temperature": 0.0, "avg_logprob": -0.13848792674929597, "compression_ratio": 1.6103896103896105, "no_speech_prob": 2.2369731595972553e-05}, {"id": 26, "seek": 16224, "start": 162.24, "end": 167.72, "text": " are of different types signed and unsigned and you get surprising results and finally", "tokens": [366, 295, 819, 3467, 8175, 293, 2693, 16690, 293, 291, 483, 8830, 3542, 293, 2721], "temperature": 0.0, "avg_logprob": -0.16262275119160496, "compression_ratio": 1.6282051282051282, "no_speech_prob": 1.746975613059476e-05}, {"id": 27, "seek": 16224, "start": 167.72, "end": 174.76000000000002, "text": " in C++ 20 they decided to come up with ugly syntax functions but they will do the right", "tokens": [294, 383, 25472, 945, 436, 3047, 281, 808, 493, 365, 12246, 28431, 6828, 457, 436, 486, 360, 264, 558], "temperature": 0.0, "avg_logprob": -0.16262275119160496, "compression_ratio": 1.6282051282051282, "no_speech_prob": 1.746975613059476e-05}, {"id": 28, "seek": 16224, "start": 174.76000000000002, "end": 179.4, "text": " thing whatever types you throw at them and we have at least one place where we use them", "tokens": [551, 2035, 3467, 291, 3507, 412, 552, 293, 321, 362, 412, 1935, 472, 1081, 689, 321, 764, 552], "temperature": 0.0, "avg_logprob": -0.16262275119160496, "compression_ratio": 1.6282051282051282, "no_speech_prob": 1.746975613059476e-05}, {"id": 29, "seek": 16224, "start": 179.4, "end": 182.24, "text": " by now for good measure.", "tokens": [538, 586, 337, 665, 3481, 13], "temperature": 0.0, "avg_logprob": -0.16262275119160496, "compression_ratio": 1.6282051282051282, "no_speech_prob": 1.746975613059476e-05}, {"id": 30, "seek": 16224, "start": 182.24, "end": 187.48000000000002, "text": " And another example is these standard unreachable magic function that they introduced we still", "tokens": [400, 1071, 1365, 307, 613, 3832, 517, 16226, 712, 5585, 2445, 300, 436, 7268, 321, 920], "temperature": 0.0, "avg_logprob": -0.16262275119160496, "compression_ratio": 1.6282051282051282, "no_speech_prob": 1.746975613059476e-05}, {"id": 31, "seek": 18748, "start": 187.48, "end": 193.04, "text": " have a macro for that to approximate it so if there is a place in your code where you", "tokens": [362, 257, 18887, 337, 300, 281, 30874, 309, 370, 498, 456, 307, 257, 1081, 294, 428, 3089, 689, 291], "temperature": 0.0, "avg_logprob": -0.16696995424937053, "compression_ratio": 1.758974358974359, "no_speech_prob": 4.051182622788474e-05}, {"id": 32, "seek": 18748, "start": 193.04, "end": 199.32, "text": " can't reach so a default in a speech and you don't want to return any nonsense from that", "tokens": [393, 380, 2524, 370, 257, 7576, 294, 257, 6218, 293, 291, 500, 380, 528, 281, 2736, 604, 14925, 490, 300], "temperature": 0.0, "avg_logprob": -0.16696995424937053, "compression_ratio": 1.758974358974359, "no_speech_prob": 4.051182622788474e-05}, {"id": 33, "seek": 18748, "start": 199.32, "end": 203.56, "text": " and the compiler would warn you that you don't have a return statement there then just add", "tokens": [293, 264, 31958, 576, 12286, 291, 300, 291, 500, 380, 362, 257, 2736, 5629, 456, 550, 445, 909], "temperature": 0.0, "avg_logprob": -0.16696995424937053, "compression_ratio": 1.758974358974359, "no_speech_prob": 4.051182622788474e-05}, {"id": 34, "seek": 18748, "start": 203.56, "end": 212.07999999999998, "text": " an unreachable there to tell the compiler this is impossible to reach anyway.", "tokens": [364, 517, 16226, 712, 456, 281, 980, 264, 31958, 341, 307, 6243, 281, 2524, 4033, 13], "temperature": 0.0, "avg_logprob": -0.16696995424937053, "compression_ratio": 1.758974358974359, "no_speech_prob": 4.051182622788474e-05}, {"id": 35, "seek": 21208, "start": 212.08, "end": 220.24, "text": " Then there is bigger features or beyond library features that we try to make use of one way", "tokens": [1396, 456, 307, 3801, 4122, 420, 4399, 6405, 4122, 300, 321, 853, 281, 652, 764, 295, 472, 636], "temperature": 0.0, "avg_logprob": -0.15288335731230587, "compression_ratio": 1.7549019607843137, "no_speech_prob": 2.7865848096553236e-05}, {"id": 36, "seek": 21208, "start": 220.24, "end": 228.0, "text": " or another for example the C++ 20 const eval similar to const expression where you have", "tokens": [420, 1071, 337, 1365, 264, 383, 25472, 945, 1817, 1073, 304, 2531, 281, 1817, 6114, 689, 291, 362], "temperature": 0.0, "avg_logprob": -0.15288335731230587, "compression_ratio": 1.7549019607843137, "no_speech_prob": 2.7865848096553236e-05}, {"id": 37, "seek": 21208, "start": 228.0, "end": 235.76000000000002, "text": " something that should be computed at compile time and const expo is do it at compile time", "tokens": [746, 300, 820, 312, 40610, 412, 31413, 565, 293, 1817, 1278, 78, 307, 360, 309, 412, 31413, 565], "temperature": 0.0, "avg_logprob": -0.15288335731230587, "compression_ratio": 1.7549019607843137, "no_speech_prob": 2.7865848096553236e-05}, {"id": 38, "seek": 21208, "start": 235.76000000000002, "end": 241.88000000000002, "text": " if possible otherwise do it at runtime and const eval is forcing you to do it at compile", "tokens": [498, 1944, 5911, 360, 309, 412, 34474, 293, 1817, 1073, 304, 307, 19030, 291, 281, 360, 309, 412, 31413], "temperature": 0.0, "avg_logprob": -0.15288335731230587, "compression_ratio": 1.7549019607843137, "no_speech_prob": 2.7865848096553236e-05}, {"id": 39, "seek": 24188, "start": 241.88, "end": 247.24, "text": " time and the trick there is if you have a function that has some assert and you make", "tokens": [565, 293, 264, 4282, 456, 307, 498, 291, 362, 257, 2445, 300, 575, 512, 19810, 293, 291, 652], "temperature": 0.0, "avg_logprob": -0.1391675699324835, "compression_ratio": 1.8835978835978835, "no_speech_prob": 9.139340545516461e-05}, {"id": 40, "seek": 24188, "start": 247.24, "end": 254.76, "text": " that function a const eval function then if the assert would not hold then you get a compilation", "tokens": [300, 2445, 257, 1817, 1073, 304, 2445, 550, 498, 264, 19810, 576, 406, 1797, 550, 291, 483, 257, 40261], "temperature": 0.0, "avg_logprob": -0.1391675699324835, "compression_ratio": 1.8835978835978835, "no_speech_prob": 9.139340545516461e-05}, {"id": 41, "seek": 24188, "start": 254.76, "end": 261.36, "text": " error instead of just a runtime error later on or not even an error if you build with", "tokens": [6713, 2602, 295, 445, 257, 34474, 6713, 1780, 322, 420, 406, 754, 364, 6713, 498, 291, 1322, 365], "temperature": 0.0, "avg_logprob": -0.1391675699324835, "compression_ratio": 1.8835978835978835, "no_speech_prob": 9.139340545516461e-05}, {"id": 42, "seek": 24188, "start": 261.36, "end": 266.76, "text": " the asserts disabled and we make use of that in some places like this we have this color", "tokens": [264, 19810, 82, 15191, 293, 321, 652, 764, 295, 300, 294, 512, 3190, 411, 341, 321, 362, 341, 2017], "temperature": 0.0, "avg_logprob": -0.1391675699324835, "compression_ratio": 1.8835978835978835, "no_speech_prob": 9.139340545516461e-05}, {"id": 43, "seek": 26676, "start": 266.76, "end": 272.96, "text": " class and I think Noel again at one point tried to get rid of the ambiguity whether", "tokens": [1508, 293, 286, 519, 38824, 797, 412, 472, 935, 3031, 281, 483, 3973, 295, 264, 46519, 1968], "temperature": 0.0, "avg_logprob": -0.10642756772844979, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.909268293180503e-05}, {"id": 44, "seek": 26676, "start": 272.96, "end": 278.52, "text": " it has alpha channel or not so we now have a constructor that wants to make sure you", "tokens": [309, 575, 8961, 2269, 420, 406, 370, 321, 586, 362, 257, 47479, 300, 2738, 281, 652, 988, 291], "temperature": 0.0, "avg_logprob": -0.10642756772844979, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.909268293180503e-05}, {"id": 45, "seek": 26676, "start": 278.52, "end": 283.76, "text": " pass in some value that doesn't have an alpha channel in there so we have an assert in there", "tokens": [1320, 294, 512, 2158, 300, 1177, 380, 362, 364, 8961, 2269, 294, 456, 370, 321, 362, 364, 19810, 294, 456], "temperature": 0.0, "avg_logprob": -0.10642756772844979, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.909268293180503e-05}, {"id": 46, "seek": 26676, "start": 283.76, "end": 291.03999999999996, "text": " and if we have const eval in the latest compilers then we use it and then we would get a compiler", "tokens": [293, 498, 321, 362, 1817, 1073, 304, 294, 264, 6792, 715, 388, 433, 550, 321, 764, 309, 293, 550, 321, 576, 483, 257, 31958], "temperature": 0.0, "avg_logprob": -0.10642756772844979, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.909268293180503e-05}, {"id": 47, "seek": 29104, "start": 291.04, "end": 297.08000000000004, "text": " at compilation time error already if you pass in some value that does have an alpha channel", "tokens": [412, 40261, 565, 6713, 1217, 498, 291, 1320, 294, 512, 2158, 300, 775, 362, 364, 8961, 2269], "temperature": 0.0, "avg_logprob": -0.1434485267190372, "compression_ratio": 1.7889447236180904, "no_speech_prob": 3.702282629092224e-05}, {"id": 48, "seek": 29104, "start": 297.08000000000004, "end": 305.52000000000004, "text": " after all so that helped the improvement of the changing the code from the old semantics", "tokens": [934, 439, 370, 300, 4254, 264, 10444, 295, 264, 4473, 264, 3089, 490, 264, 1331, 4361, 45298], "temperature": 0.0, "avg_logprob": -0.1434485267190372, "compression_ratio": 1.7889447236180904, "no_speech_prob": 3.702282629092224e-05}, {"id": 49, "seek": 29104, "start": 305.52000000000004, "end": 313.8, "text": " to the new semantics but so we have an if around that if have cpp const eval then use", "tokens": [281, 264, 777, 4361, 45298, 457, 370, 321, 362, 364, 498, 926, 300, 498, 362, 269, 427, 1817, 1073, 304, 550, 764], "temperature": 0.0, "avg_logprob": -0.1434485267190372, "compression_ratio": 1.7889447236180904, "no_speech_prob": 3.702282629092224e-05}, {"id": 50, "seek": 29104, "start": 313.8, "end": 319.92, "text": " const eval otherwise we use const expo and in our configure script we have lots of checks", "tokens": [1817, 1073, 304, 5911, 321, 764, 1817, 1278, 78, 293, 294, 527, 22162, 5755, 321, 362, 3195, 295, 13834], "temperature": 0.0, "avg_logprob": -0.1434485267190372, "compression_ratio": 1.7889447236180904, "no_speech_prob": 3.702282629092224e-05}, {"id": 51, "seek": 31992, "start": 319.92, "end": 325.32, "text": " whether we can use const eval and unfortunately only clang by now even the latest compiler", "tokens": [1968, 321, 393, 764, 1817, 1073, 304, 293, 7015, 787, 596, 656, 538, 586, 754, 264, 6792, 31958], "temperature": 0.0, "avg_logprob": -0.1432224715628275, "compression_ratio": 1.7376237623762376, "no_speech_prob": 7.679290138185024e-05}, {"id": 52, "seek": 31992, "start": 325.32, "end": 331.84000000000003, "text": " versions we have five checks in there for bugs that we discovered with all these const", "tokens": [9606, 321, 362, 1732, 13834, 294, 456, 337, 15120, 300, 321, 6941, 365, 439, 613, 1817], "temperature": 0.0, "avg_logprob": -0.1432224715628275, "compression_ratio": 1.7376237623762376, "no_speech_prob": 7.679290138185024e-05}, {"id": 53, "seek": 31992, "start": 331.84000000000003, "end": 340.12, "text": " eval implementations and clang the latest one has all its bugs sorted out but gcc and", "tokens": [1073, 304, 4445, 763, 293, 596, 656, 264, 6792, 472, 575, 439, 1080, 15120, 25462, 484, 457, 290, 1914, 293], "temperature": 0.0, "avg_logprob": -0.1432224715628275, "compression_ratio": 1.7376237623762376, "no_speech_prob": 7.679290138185024e-05}, {"id": 54, "seek": 31992, "start": 340.12, "end": 348.76, "text": " the Microsoft compiler still can't use it so that shows how if you have a feature sheet", "tokens": [264, 8116, 31958, 920, 393, 380, 764, 309, 370, 300, 3110, 577, 498, 291, 362, 257, 4111, 8193], "temperature": 0.0, "avg_logprob": -0.1432224715628275, "compression_ratio": 1.7376237623762376, "no_speech_prob": 7.679290138185024e-05}, {"id": 55, "seek": 34876, "start": 348.76, "end": 353.56, "text": " of what the compiler support and there is ticks for their adult trust that too much if you", "tokens": [295, 437, 264, 31958, 1406, 293, 456, 307, 42475, 337, 641, 5075, 3361, 300, 886, 709, 498, 291], "temperature": 0.0, "avg_logprob": -0.21250362160765093, "compression_ratio": 1.7135922330097086, "no_speech_prob": 3.878100324072875e-05}, {"id": 56, "seek": 34876, "start": 353.56, "end": 361.96, "text": " then actually try to use it you run into all kinds of issues and then of course coming", "tokens": [550, 767, 853, 281, 764, 309, 291, 1190, 666, 439, 3685, 295, 2663, 293, 550, 295, 1164, 1348], "temperature": 0.0, "avg_logprob": -0.21250362160765093, "compression_ratio": 1.7135922330097086, "no_speech_prob": 3.878100324072875e-05}, {"id": 57, "seek": 34876, "start": 361.96, "end": 369.84, "text": " up is issues there even even bigger way you can't use some if death trickery or some some", "tokens": [493, 307, 2663, 456, 754, 754, 3801, 636, 291, 393, 380, 764, 512, 498, 2966, 4282, 2109, 420, 512, 512], "temperature": 0.0, "avg_logprob": -0.21250362160765093, "compression_ratio": 1.7135922330097086, "no_speech_prob": 3.878100324072875e-05}, {"id": 58, "seek": 34876, "start": 369.84, "end": 377.84, "text": " include file where you approximate things biggest two things that come to my mind are", "tokens": [4090, 3991, 689, 291, 30874, 721, 3880, 732, 721, 300, 808, 281, 452, 1575, 366], "temperature": 0.0, "avg_logprob": -0.21250362160765093, "compression_ratio": 1.7135922330097086, "no_speech_prob": 3.878100324072875e-05}, {"id": 59, "seek": 37784, "start": 377.84, "end": 386.0, "text": " the concepts in c++ 20 which would make code really more readable but which is hard to", "tokens": [264, 10392, 294, 269, 25472, 945, 597, 576, 652, 3089, 534, 544, 49857, 457, 597, 307, 1152, 281], "temperature": 0.0, "avg_logprob": -0.16008293267452356, "compression_ratio": 1.5813953488372092, "no_speech_prob": 3.585982631193474e-05}, {"id": 60, "seek": 37784, "start": 386.0, "end": 395.44, "text": " do in some macro way we have one place I think by now where we have again around this requires", "tokens": [360, 294, 512, 18887, 636, 321, 362, 472, 1081, 286, 519, 538, 586, 689, 321, 362, 797, 926, 341, 7029], "temperature": 0.0, "avg_logprob": -0.16008293267452356, "compression_ratio": 1.5813953488372092, "no_speech_prob": 3.585982631193474e-05}, {"id": 61, "seek": 37784, "start": 395.44, "end": 402.35999999999996, "text": " thing we have an if death or if we have a c++ 20 implementation that supports it and there", "tokens": [551, 321, 362, 364, 498, 2966, 420, 498, 321, 362, 257, 269, 25472, 945, 11420, 300, 9346, 309, 293, 456], "temperature": 0.0, "avg_logprob": -0.16008293267452356, "compression_ratio": 1.5813953488372092, "no_speech_prob": 3.585982631193474e-05}, {"id": 62, "seek": 40236, "start": 402.36, "end": 407.84000000000003, "text": " is one place where we where we have some function that internally there's some dangerous dynamic", "tokens": [307, 472, 1081, 689, 321, 689, 321, 362, 512, 2445, 300, 19501, 456, 311, 512, 5795, 8546], "temperature": 0.0, "avg_logprob": -0.17519057030771293, "compression_ratio": 1.7817460317460319, "no_speech_prob": 4.665112282964401e-05}, {"id": 63, "seek": 40236, "start": 407.84000000000003, "end": 413.56, "text": " casting and you know proxies didn't support dynamic casting so I wanted to make sure that", "tokens": [17301, 293, 291, 458, 447, 87, 530, 994, 380, 1406, 8546, 17301, 370, 286, 1415, 281, 652, 988, 300], "temperature": 0.0, "avg_logprob": -0.17519057030771293, "compression_ratio": 1.7817460317460319, "no_speech_prob": 4.665112282964401e-05}, {"id": 64, "seek": 40236, "start": 413.56, "end": 419.16, "text": " we never use that function on a template type that does that is a you know could be you", "tokens": [321, 1128, 764, 300, 2445, 322, 257, 12379, 2010, 300, 775, 300, 307, 257, 291, 458, 727, 312, 291], "temperature": 0.0, "avg_logprob": -0.17519057030771293, "compression_ratio": 1.7817460317460319, "no_speech_prob": 4.665112282964401e-05}, {"id": 65, "seek": 40236, "start": 419.16, "end": 424.72, "text": " know proxy so I came up with this wonderful and requires cloth there to to if you have", "tokens": [458, 29690, 370, 286, 1361, 493, 365, 341, 3715, 293, 7029, 13619, 456, 281, 281, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.17519057030771293, "compression_ratio": 1.7817460317460319, "no_speech_prob": 4.665112282964401e-05}, {"id": 66, "seek": 40236, "start": 424.72, "end": 431.32, "text": " a lady new enough compiler to get that sorted out at runtime and otherwise we ignore it", "tokens": [257, 7262, 777, 1547, 31958, 281, 483, 300, 25462, 484, 412, 34474, 293, 5911, 321, 11200, 309], "temperature": 0.0, "avg_logprob": -0.17519057030771293, "compression_ratio": 1.7817460317460319, "no_speech_prob": 4.665112282964401e-05}, {"id": 67, "seek": 43132, "start": 431.32, "end": 437.84, "text": " and even bigger thing is modules and I guess we will have to wait for for others to come", "tokens": [293, 754, 3801, 551, 307, 16679, 293, 286, 2041, 321, 486, 362, 281, 1699, 337, 337, 2357, 281, 808], "temperature": 0.0, "avg_logprob": -0.1491665542125702, "compression_ratio": 1.65, "no_speech_prob": 5.214628981775604e-05}, {"id": 68, "seek": 43132, "start": 437.84, "end": 445.15999999999997, "text": " up with real real implementations of that or real world usage to see how we would make", "tokens": [493, 365, 957, 957, 4445, 763, 295, 300, 420, 957, 1002, 14924, 281, 536, 577, 321, 576, 652], "temperature": 0.0, "avg_logprob": -0.1491665542125702, "compression_ratio": 1.65, "no_speech_prob": 5.214628981775604e-05}, {"id": 69, "seek": 43132, "start": 445.15999999999997, "end": 455.15999999999997, "text": " use of them but even if these features are out in the dist in the distant future in some", "tokens": [764, 295, 552, 457, 754, 498, 613, 4122, 366, 484, 294, 264, 1483, 294, 264, 17275, 2027, 294, 512], "temperature": 0.0, "avg_logprob": -0.1491665542125702, "compression_ratio": 1.65, "no_speech_prob": 5.214628981775604e-05}, {"id": 70, "seek": 45516, "start": 455.16, "end": 465.0, "text": " cases still what we already can do is try to force the compiler is hard to to run our", "tokens": [3331, 920, 437, 321, 1217, 393, 360, 307, 853, 281, 3464, 264, 31958, 307, 1152, 281, 281, 1190, 527], "temperature": 0.0, "avg_logprob": -0.17050041729890847, "compression_ratio": 1.7474747474747474, "no_speech_prob": 6.572689017048106e-05}, {"id": 71, "seek": 45516, "start": 465.0, "end": 470.36, "text": " code and demonstrate to them that they what what bugs they have worried what bugs are", "tokens": [3089, 293, 11698, 281, 552, 300, 436, 437, 437, 15120, 436, 362, 5804, 437, 15120, 366], "temperature": 0.0, "avg_logprob": -0.17050041729890847, "compression_ratio": 1.7474747474747474, "no_speech_prob": 6.572689017048106e-05}, {"id": 72, "seek": 45516, "start": 470.36, "end": 476.36, "text": " in the standard library implementations if they introduce new things so what I do is", "tokens": [294, 264, 3832, 6405, 4445, 763, 498, 436, 5366, 777, 721, 370, 437, 286, 360, 307], "temperature": 0.0, "avg_logprob": -0.17050041729890847, "compression_ratio": 1.7474747474747474, "no_speech_prob": 6.572689017048106e-05}, {"id": 73, "seek": 45516, "start": 476.36, "end": 483.40000000000003, "text": " opt into this thing to use whatever compiler you use with the latest c++ you version that", "tokens": [2427, 666, 341, 551, 281, 764, 2035, 31958, 291, 764, 365, 264, 6792, 269, 25472, 291, 3037, 300], "temperature": 0.0, "avg_logprob": -0.17050041729890847, "compression_ratio": 1.7474747474747474, "no_speech_prob": 6.572689017048106e-05}, {"id": 74, "seek": 48340, "start": 483.4, "end": 490.2, "text": " compiler implements which is typically c++ 23 by now and then have a big matrix of of", "tokens": [31958, 704, 17988, 597, 307, 5850, 269, 25472, 6673, 538, 586, 293, 550, 362, 257, 955, 8141, 295, 295], "temperature": 0.0, "avg_logprob": -0.22953900423916904, "compression_ratio": 1.6682242990654206, "no_speech_prob": 0.00015721189265605062}, {"id": 75, "seek": 48340, "start": 490.2, "end": 496.44, "text": " platforms and compilers and libraries runtime standard long term standard runtime libraries", "tokens": [9473, 293, 715, 388, 433, 293, 15148, 34474, 3832, 938, 1433, 3832, 34474, 15148], "temperature": 0.0, "avg_logprob": -0.22953900423916904, "compression_ratio": 1.6682242990654206, "no_speech_prob": 0.00015721189265605062}, {"id": 76, "seek": 48340, "start": 496.44, "end": 503.76, "text": " to build on and and find all kinds of interesting bugs whenever I update one of those things", "tokens": [281, 1322, 322, 293, 293, 915, 439, 3685, 295, 1880, 15120, 5699, 286, 5623, 472, 295, 729, 721], "temperature": 0.0, "avg_logprob": -0.22953900423916904, "compression_ratio": 1.6682242990654206, "no_speech_prob": 0.00015721189265605062}, {"id": 77, "seek": 48340, "start": 503.76, "end": 510.59999999999997, "text": " and then mail the people mail Jonathan that he introduced something new in lip see lip", "tokens": [293, 550, 10071, 264, 561, 10071, 15471, 300, 415, 7268, 746, 777, 294, 8280, 536, 8280], "temperature": 0.0, "avg_logprob": -0.22953900423916904, "compression_ratio": 1.6682242990654206, "no_speech_prob": 0.00015721189265605062}, {"id": 78, "seek": 51060, "start": 510.6, "end": 516.76, "text": " standard c++ that doesn't get clang that doesn't make clang happy and so forth and these people", "tokens": [3832, 269, 25472, 300, 1177, 380, 483, 596, 656, 300, 1177, 380, 652, 596, 656, 2055, 293, 370, 5220, 293, 613, 561], "temperature": 0.0, "avg_logprob": -0.2573946800784788, "compression_ratio": 1.66875, "no_speech_prob": 0.0005632389802485704}, {"id": 79, "seek": 51060, "start": 516.76, "end": 528.28, "text": " are happy that we are the guinea pigs for them and that's it I guess we have time for", "tokens": [366, 2055, 300, 321, 366, 264, 695, 31940, 24380, 337, 552, 293, 300, 311, 309, 286, 2041, 321, 362, 565, 337], "temperature": 0.0, "avg_logprob": -0.2573946800784788, "compression_ratio": 1.66875, "no_speech_prob": 0.0005632389802485704}, {"id": 80, "seek": 51060, "start": 528.28, "end": 536.36, "text": " question if there's any questions I'm not prepared for that who do you contact if you", "tokens": [1168, 498, 456, 311, 604, 1651, 286, 478, 406, 4927, 337, 300, 567, 360, 291, 3385, 498, 291], "temperature": 0.0, "avg_logprob": -0.2573946800784788, "compression_ratio": 1.66875, "no_speech_prob": 0.0005632389802485704}, {"id": 81, "seek": 53636, "start": 536.36, "end": 542.44, "text": " find it back in the Microsoft compiler oh they do have a web form now that you can fill", "tokens": [915, 309, 646, 294, 264, 8116, 31958, 1954, 436, 360, 362, 257, 3670, 1254, 586, 300, 291, 393, 2836], "temperature": 0.0, "avg_logprob": -0.2876160361550071, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.0006604751688428223}, {"id": 82, "seek": 53636, "start": 542.44, "end": 554.12, "text": " in and I think I even got a response monster wow Mike again ski brought that up okay maybe", "tokens": [294, 293, 286, 519, 286, 754, 658, 257, 4134, 10090, 6076, 6602, 797, 14274, 3038, 300, 493, 1392, 1310], "temperature": 0.0, "avg_logprob": -0.2876160361550071, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.0006604751688428223}, {"id": 83, "seek": 53636, "start": 554.12, "end": 566.16, "text": " one more question since we're at the end of the track so what's the status of of modules", "tokens": [472, 544, 1168, 1670, 321, 434, 412, 264, 917, 295, 264, 2837, 370, 437, 311, 264, 6558, 295, 295, 16679], "temperature": 0.0, "avg_logprob": -0.2876160361550071, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.0006604751688428223}, {"id": 84, "seek": 56616, "start": 566.16, "end": 571.12, "text": " in compilers because as far as I know only Visual Studio does it and does it kind of", "tokens": [294, 715, 388, 433, 570, 382, 1400, 382, 286, 458, 787, 23187, 13500, 775, 309, 293, 775, 309, 733, 295], "temperature": 0.0, "avg_logprob": -0.1443057621226591, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.0003594493609853089}, {"id": 85, "seek": 56616, "start": 571.12, "end": 581.28, "text": " sort of no I think they're all three by now in their head trunk versions they support", "tokens": [1333, 295, 572, 286, 519, 436, 434, 439, 1045, 538, 586, 294, 641, 1378, 19849, 9606, 436, 1406], "temperature": 0.0, "avg_logprob": -0.1443057621226591, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.0003594493609853089}, {"id": 86, "seek": 56616, "start": 581.28, "end": 594.9599999999999, "text": " them I think they claim it works but I didn't ever try it sorry a module is a new way of", "tokens": [552, 286, 519, 436, 3932, 309, 1985, 457, 286, 994, 380, 1562, 853, 309, 2597, 257, 10088, 307, 257, 777, 636, 295], "temperature": 0.0, "avg_logprob": -0.1443057621226591, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.0003594493609853089}, {"id": 87, "seek": 59496, "start": 594.96, "end": 600.0400000000001, "text": " organizing your so that you don't have this issue of having all these includes that you", "tokens": [17608, 428, 370, 300, 291, 500, 380, 362, 341, 2734, 295, 1419, 439, 613, 5974, 300, 291], "temperature": 0.0, "avg_logprob": -0.10874700546264648, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0004876274324487895}, {"id": 88, "seek": 59496, "start": 600.0400000000001, "end": 605.96, "text": " need to include this is like pre-compiled a newer version of pre-compiled headers actually", "tokens": [643, 281, 4090, 341, 307, 411, 659, 12, 21541, 7292, 257, 17628, 3037, 295, 659, 12, 21541, 7292, 45101, 767], "temperature": 0.0, "avg_logprob": -0.10874700546264648, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0004876274324487895}, {"id": 89, "seek": 60596, "start": 605.96, "end": 628.24, "text": " yeah yeah that sums it up okay then thanks again thanks", "tokens": [1338, 1338, 300, 34499, 309, 493, 1392, 550, 3231, 797, 3231], "temperature": 0.0, "avg_logprob": -0.4491093635559082, "compression_ratio": 1.0784313725490196, "no_speech_prob": 0.0002983159793075174}], "language": "en"}