{"text": " But what you should not do in Postgres, so please welcome Jimmy Angelacos. Thanks very much. I'm a Senior Solutions Architect at EDB and I am grateful to EDB for allowing me to make Postgres my day job because it is an excellent database, it is an excellent community and thank you all for attending a talk with such a clickbaity title. And thank you to the guys at home for clicking. So why this title? I didn't come up with it. So this title is the title of a Postgres Wiki page that's called Don't Do This. And I got all the content from there. So that's the end of the talk. But no, anyway, so this talk is not all inclusive, right? I'm not going to tell you all the mistakes you can make with Postgres. Who can? I mean, there is literally nothing that you cannot mess up with no matter which database you use. You can always find a way to mess up. But these are some of the things that we've noticed that people are doing wrong in general with Postgres. So some of them are misconceptions. Like I believe this thing works this way, but it doesn't. Some things are confusing because of the way they're implemented in Postgres, especially things that are not part of the SQL standard, but Postgres extensions to the SQL standard. So to be fair, Postgres is the most SQL standard compliant database. It just has some things on top of it. Other databases implement a subset of the SQL standard and also confusing things. So we're a bit better from that respect. And some common mistakes that people make that usually have a significant impact in production environments. So we'll be looking at some bad examples of SQL that you can write in Postgres. We'll be looking at some improper data types for storing certain things. Andreas had a good talk this morning about this, covering many of the same topics. We will be looking at wrong ways to use Postgres features. And also some things that affect your performance and affect the security of the server that you need to be aware of. So let's start off with some bad SQL. First and foremost, not in. As in the Boolean, not in, right? It doesn't work the way you expect it to. So when you're writing, select something where something else is not in this subquery. You have to keep in mind that SQL and Postgres by extension is not Python and it's not Ruby. So it doesn't behave the way you expect it to if you're used to writing not in Booleans in programming languages. So select A from table one where A not in one constant, right? So it's always true. And null returns nothing because if you perform a not in and there's even one null, the result is null. Not false, null. So equally, select A from table one, a more real world scenario where A is not in, select B from table two. Even if one B is null, then the whole result is null. So it's not doing what you're expecting it to. Let's say that table two has no null Bs, right? B is not null. Why is this still bad? And you should not use it because it doesn't optimize well in the Postgres query planner. And instead of performing what is known as an anti-join, so it's the complete opposite of a join. Show me the rows you cannot join from this table. So the Postgres query planner chooses a sub-plan and if that's a hashed sub-plan, that's kind of okay. If it's a simple sub-plan, then the performance of this thing is disastrous. So even if you don't have nulls, you don't want to use it. What should you use instead? You should use an anti-join, as we just said, which looks something like this. The column from table one where not exists is a better way to write not in. So wherever column from table two does not exist where table one column equals table two column. So you want the rows that table two doesn't, can't match up to table one. So that's an anti-join. Or another way you could write this is select column from table one and use a left join. So left join, table two, using the column, using this Postgres shorthand for join on column equals column, but in this case I'm using column because it's the same name in both tables. So left join where table two dot call is null. What does that do? If it cannot find matches on the left-hand side to the right-hand side, then the right-hand side, the result from table two is a null. And that's how you get your anti-join. To be fair, not in is okay. If you know that there are no nulls and you cannot know that for a table, and as we said it has performance implications, but when you're excluding constants that's fine, right? Because if you have an index and you're able to tell that none of this is in the index, then you're fine to use not in. But generally speaking, try to prefer not exists or anti-joins. Another thing is that we've seen people use the wrong way without knowing is between, especially when you write a query with a where clause that specifies between timestamp one and timestamp two. Why is that? Because between A and B is inclusive. It's a closed interval. So when you're saying between one and 100, you're saying include one and also include 100 in the results. When is this bad? This is bad when you're a bank, let's say, and you want to sum up the transactions for the day, right? The amounts from all transactions from the day. And your DBA has written the following query, select some of the amounts from transactions where transaction timestamp is between the end of the previous day and the end of the current day, right? So it should be fine. No, it's not. Because if a transaction has happened exactly at midnight, you'll get it twice. Because when you run that query tomorrow, it's going to return the same row because you've included midnight in both queries, right? So that's a bad thing. So it's better to be explicit instead and use select some amount from transactions where transaction timestamp is greater or equal than and transaction timestamp is less than, excluding the equality with midnight, right? So that is very, very safe. And there's no way to read it wrong. It's very explicit, very clear. Another thing, using uppercase in identifiers. Many people like to do this because it looks very professional because they're used to some database that was out there in the 80s that only could support uppercase table names. And that database can now use lowercase, but the habit is still there. Now why is that a bad thing in Postgres? So if you use table or column names that are all capitals or mixed case, Postgres will just ignore you and make everything lowercase unless you use double quotes around the names. So create table plurp and create table quacks. What are the consequences of issuing these two DDLs? It creates a table named plurp, lowercase, and a table named quacks with a capital Q. Why is that a problem? So table here is shorthand for select star from plurp. So table plurp works because it's not quoted, so Postgres ignores the case. Table plurp quoted, even if it's exactly the same way we specified it when we were creating the table, will fail and it will say there's no such table. Equally table quacks fails because there's no lowercase table quacks. Table quacks in double quotes works fine. So you can see how you can mess up your schema with this. If you give your schema to a developer and they're not aware that there's a difference between double quoted and unquoted table names, then you get in trouble. I think.NET by default, even if you don't do anything, double quotes everything. So if you make the mistake of including capitals there, then they're not going to work in Postgres. So unless you create the tables from within.NET, that is. So the same goes for column names. If you want pretty column names in your output and your reports, then just use select call as pretty name. Double quote the pretty name. It can have spaces, it can have emoji, whatever you want. And Postgres will just return exactly that name and you don't have to change your column name on your table to make accounting happy. Now moving on from SQL, let's look at the wrong use of some of Postgres' built in data types. Again timestamps. So if you create a column that is type timestamp, that means timestamp without time zone. So these are naive timestamps and they represent a local time somewhere. But you don't know where. It stores a date and a time with no time zone information. There's no way to retrieve the time zone where this row was inserted. And why is that a bad thing? Because arithmetic breaks down totally. You cannot add and subtract dates and intervals and anything else because you can't calculate, you can't make computations on what the time would be because of things such as time zone changes and daylight savings times. So it's meaningless, it will give you the wrong results. So instead please use timestamp TZ or TZ if you're British. Timestamp with time zone is the equivalent. Timestamp TZ is the shorthand and that stores a moment in time. A moment in time means the number of seconds that have passed from midnight at the beginning of the first of January 2000. So it's absolute, it's definite and you know exactly which moment in time you're specifying. The arithmetic works correctly as you would expect. And this by default displays in your time zone but you can also choose to display it at time zone. So if you've inserted something which is midnight UTC and you want it in Eastern time that would automatically convert it. If you said at time zone Eastern it would automatically convert it to minus five hours or minus six hours if there's a DST difference between the two time zones. So you don't have to worry about the conversions. Just use timestamp with time zone and you won't have to worry about it. Even if you don't need time zone calculations and all of your operations and all of your queries are coming from within the same time zone it's better to use this. Because then when you have to export your data and give it to someone else they know exactly what this means even if they don't know your time zone. So also if you've decided to only use UTC throughout your organization then don't use timestamp to store UTC because Postgres doesn't know it is UTC. It just sees a local time and doesn't know where it is so it can't convert it. Now something less frequently used is the type time TZ or time with time zone. That is a quirk of SQL. It is there because the standard specifies it and that's the only way Postgres implements. That's the only reason why Postgres has implemented this. So time with time zone has questionable usefulness. Because time zones in the real world have little meaning without dates. It can be the middle of the day in Australia and the previous day here. So it will be times in some time zone but the date is different and you don't know it. So the offset can vary with daily savings time and that's a bad thing because time TZ has a fixed offset and that makes it impossible to do date calculations across daily savings times boundaries. So just use timestamp TZ instead. There's also a space saving. For some reason this thing is 12 bytes. I don't know why. A timestamp is 8 bytes. So just use timestamp TZ or timestamp with time zone instead. Current underscore time is another favorite. Current time is timestamp TZ. So we just said don't use timestamp TZ. Just use current timestamp or the function now to get the current time with the time zone and local timestamp that returns the timestamp if you just want to know what time it is here in your local time zone. Equally you can use current date for date and local time for the local time. These are not timestamps. These are dates sometimes. This is one of my favorites. This morning Andres showed that many people when they want to store a string they just create car 255. That should take care of it. What is the problem with that? It's that this is padded with white space up to n. So if you create a car 255 and you insert a single character to store then that inserts 254 blank spaces after it in the database for no reason. The padding spaces are useless because they are ignored when comparing but equally they create a problem because they don't work for like expressions and they don't work for regular expressions because a regex will see the spaces. So it's inconsistent. So just don't use it. And anyway you're not gaining anything by specifying a limit in the number of characters because it's not even stored as a fixed width field in Postgres. The storage is exactly the same. You're just wasting space by adding white space. Once wise it's even worse because Postgres is spending the extra time discarding those zeros when you're requesting a result that it's supposed to ignore those zeros. So also another consequence of car n is that an index created for a character of n length may not work with a query that accepts a text parameter or a varchar parameter with no limit. The index is created for a different data type therefore it does not apply to that query. So also limits are bad always. Limits on strings are bad. If you create a company name and you think 50 characters are enough I don't know any company name that is more than 50 characters and then you get a customer that's called Petersons and Sons and Friends Bits and Parts Limited which is 54. And then you have to go and change the column width in the database and your DBA starts swearing even though they selected the character length themselves because they were told to. Also it's useless for restricting length. It throws an error okay but it doesn't make sure that the length is exactly what you want. So if you want a four digit pin and you enter it as car four that is not enforced if someone enters a three digit pin. You need an extra check so it doesn't guarantee anything. So to restrict length and make sure that the length of what everyone enters is consistent then use a check and strain and enforce it. So bottom line is just use text. Text is the same as the confusingly named Varkar with no parentheses. So text. Money get away from the type money because it's useless. It's fixed point which means that it doesn't handle fractions of a cent. So for finance that's very bad because you usually have subdivisions of the lowest denomination of currency whether it's a cent or a penny or whatever else. So the rounding may be off and that is a bad thing in finance. Another bad thing is that it doesn't know which currency it's storing the values for. So it assumes that the currency is what you specified in LC monetary. And if you don't know what LC monetary is it's just going to assume whatever it finds in your UNIX configuration or Linux. Even worse it accepts garbage input. So if you select that thing and convert it to money it casts it to whatever it believes is right. And because my laptop was set up for UK pounds it assumed that that's UK pounds. So just use numeric and store the currency in another column for that row with a foreign key so you know which currency that is. Serial how many people here use serial and like it. So I will explain why you shouldn't like it. It used to be useful shorthand it is still useful shorthand but it's now less useful than it used to be because it's non-SQL standard and it messes up the permissions when you use it. So permissions for sequences created using serial automatically created using the serial keyword when creating a table they need to be managed separately from the table. So a consequence of this disconnect is that create table like another table with a table that uses serial will use the same sequence from the other table. And you don't want that usually. So instead we've come up with identity columns that are more verbose but much clearer in what they do because they're attached to the table that created them. So create table ID begin generated by default as identity and also primary key. With an identity column you don't need to know the name of the sequence. So when you alter table tab, alter column ID, restart a thousand you don't need to know what the sequence is called. It's attached to the table so it will just restart the sequence from a thousand. A side note here if your application is depending on a serial sequence to generate things like receipt IDs, receipt numbers that is something you should generally generate in your application to make sure that there are no gaps because there's no guarantees whatsoever that a sequence in Postgres will have no gaps. If you try to insert something and there's an error and you're all back, you've skipped over that sequence number. Never goes back. Cool. So now let's look at improper usage of Postgres features. Character encoding SQL underscore ASCII. It is not a database encoding that you should be using unless you know exactly what you're doing. So things like storing text from the 1960s where no character sets other than ASCII. When you specify that your database is encoding is SQL ASCII, you are skipping all encoding conversion and all encoding validation. So it will accept just anything and it will assume that if your character has a byte value from 0 to 127 that it's ASCII and if it's over 127 to 255, then it will not even try. It will just store it and not interpret it as anything. So it doesn't behave the same way as a character set setting and it's very bad that this is the default. Fortunately, most distributions, the packages that Devin makes for distributions have UTF-8 as the default. So that's a safer choice. Also when you use SQL ASCII, you can end up storing a mixture of encodings because it doesn't check and validate anything. So once you've done that, there's no going back. There's no way to recover the original strings because you don't know which encoding they came from. Rules. Rules are a thing that predates SQL in Postgres. When it was just Postgres, not Postgres SQL. It's a very old thing that has its specific purpose and its purpose is not to work like a trigger. Rules do not apply conditional logic. They rewrite your queries to modify them or add extra queries on top of them. So any rule that's non-trivial, so any rule that's not like a select or an update into a view is going to have unintended consequences because it's going to execute the original query if it's an insert and then apply the rule and then generate another row potentially or change the value of the row you inserted. So also, as we said, it's older than SQL in Postgres and it's non-SQL standard. So unless you're using rules to create views that you can write to, use a trigger instead. That's what you want to use. There's an exhaustive blog post by Depeche that you can read. You will find the link in the slides afterwards. Table inheritance. Table inheritance is a relic of the time of object-oriented databases. If you remember, up on our website, we used to say that Postgres is an object-relational database. Maybe we still do. Okay. But everything in Postgres is an object. Fine. That doesn't mean that table inheritance applies to tables because it seemed like a good idea before ORMs that you would have some sort of inheritance from a table type to another table type. And the way you would write that was create table events, let's say, with an ID and some columns and then create a table meetings. Meetings are events, right? And they have a scheduled time, but all the other characteristics of an event. So why not create table inherits the other table? It's also used to implement partitioning in Postgres before Postgres 10, but is now incompatible with the new way of partitioning after Postgres 10. So you cannot inherit from a partition's table, and you cannot add inheritance to a table that's partitioned. So if you've got it in your database, there is a way to undo it, and I will just skim over it. You can replace it with a foreign key relationship between the two tables. And it works exactly the same way. So create table new meetings, like meetings. Table inheritance is scary. I apologize. It's not for young guys. So create table new meetings, like meetings, creates it in exactly the same way. Alter table to add another column to store the foreign key relationship. So that should have been event ID, excuse me. Anyway. So you copy the data from the old table into the new table. So insert into new meetings, select everything from meetings, including the ID. You create the required constraints, triggers, et cetera, everything you need for the table, new meetings. And if you have a very large table, you can apply a very dirty hack that says that because I know that the data in the other table is valid, I don't need to validate it again. So I add the constraint, the foreign key constraint, as not valid. If you're doing this in a live system that needs to be online while you're making this change, create a trigger so that changes coming into meetings can go into new meetings as well. And the dirtiness of the hack comes in the fact that you should really not be touching PG catalog at all, but if you do know that your constraint is valid because the data in your existing table is valid, you just go ahead and update PG constraint set, constraint validated equals true for that foreign key constraint we just created. And then finally, in order not to do lengthy locking when you're doing this, begin a transaction in a code block, an anonymous code block. You alter table meetings, rename to old meetings. Then you change new meetings that has exactly the same content now with an additional column. You rename it to meetings, you drop the old table, and then you commit. Be careful, also create a trigger to insert update delete items in events as they get changed in meetings. And that's about it. You've gotten rid of your table inheritance. Another very confusing thing, if you look at the Postgres documentation, it explains very well how to do this, but this is probably not what you want to do. So partitioning by multiple keys is not partitioning on multiple levels, right? So let's say we create a table transactions, and it has a location code and a timestamp among other columns. And I want to partition it by timestamp and also location code, because I want a separate table for each time period for each location code, right? So I create table transactions, 202302A for values from timestamp 2023, so the first of February to the first of March, and for location codes AAA to BAA. Then I create the second partition, and 202302B is a partition of transactions for values from the same time period, but different locations, okay? So I'm using locations BAA to BZZ, error, partition transactions 202302B would overlap. Why is that? because you're specifying limits for the keys within each partition. So it will accept values that satisfy those keys, but this is not subpartitioning. What you do want is subpartitioning. You want to partition by one key, and then partition those tables by another key. That is the way to do it correctly. So you create table transactions, location type, et cetera, et cetera, partition by range of timestamp first, okay? Because we want the first level of partitioning to be timestamp based. Then you create table partitions as transactions, excuse me, as a partition of transactions for values from the first of February to the first of March, and we choose hash partitioning within those partitions for the location code. And all that means over there is that when I create the first partition, it's for values with modulus four remainder, zero means just divided by four equal parts. And that creates a partition, a table that is partitioned by both things, subpartitions. Now let's talk a little bit about performance. One thing we see people doing all the time is using many more connections than they should be, accepting many more connections into their Postgres server than they should be. The default is very sensible, it's at 100 connections. We see things like 5,000 connections in production. And a server with 32 CPUs, a server with 32 CPUs, there's no way on Earth it's going to do more than 32 things at the same time, right? It's common sense, okay? You may accept up to 100 things with 32 CPUs and interleave and overlap, that's fine. Or one of the connections may be idle and you take advantage of that to serve the other connections but 5,000 is excessive and we'll see why. Because Postgres is process-based and for every new client connection it spawns a new process. And a new process comes with inter-process communication through semaphores and shared memory and that has an overhead. So every process you add to the system adds to that overhead and you run at the risk of your CPU spending most of its time doing context switching between one process and the other. Also accessing the same objects from multiple connections may cause many lightweight locks to appear, what are called latches in other databases. And if you're trying to access the same objects from many client connections, then that lock even if it's not explicit it becomes heavily contented and the other connections trying to access that object will slow each other down. So instead of opening one connection that does 400 times the work, you open 400 connections that do one 400th the amount of work and that doesn't perform the same, that performs worse because it's making your data hotter for no reason because they compete for access to that data. And also there's no fair queuing, it's more or less random, so lightweight locks don't have queuing so you don't know who will get priority and there's no guaranteed quality of service. Now mitigation strategy is also you need to be aware that before Postgres 13 there's the issue of snapshot contention. So each transaction keeps an MVCC snapshot even if it's idle and so you can end up using server resources even for idle connections and slow everything else down. So this is contention that is caused by too much concurrency. So instead of opening 5,000 connections just put a PG Bouncer in front of your database or another connection pooler and just allow fewer connections into the database while accepting the client connections from the connection pooler. That way you throttle or you introduce latency on the application side but that's not always bad because in some cases it can protect your server's performance which is more important than making let's say a non-interactive client wait for a few milliseconds more. It sounds counterintuitive but it leads to higher performance overall. High transaction rate is also a problem when you're burning through transactions very quickly because there's a lot of detail here about the way transaction IDs work in Postgres but the bottom line is that there's 4.2 billion transaction IDs. The future for you is 2.1 billion transactions in the future and the past is another 2.1 billion transactions. So if you are writing with a huge data rate with let's say an OLTP workload that can go through 2.1 billion transactions in a week that will overrun the last transaction and you will no longer know whether that transaction is in the past or in the future and that's a problem. Postgres won't let you do that, it will shut down to avoid doing that and the solution that we came up with is called freezing where you go through the table and you mark each row as you know to be old as frozen and you know that that row is always in the past even if it has a transaction ID from another time. So the problem is you need to make sure that Postgres has the chance to freeze those rows before the wrap around. So what can you do? You can reduce the number of transactions, you can use batching. Instead of committing 100 things, just batch them or 1,000 things and that automatically uses 1,000 transactions less, sorry 1,000 the transaction rate that you would have and that helps. Also it helps to bump up the effectiveness of auto vacuum and that takes care of freezing. Another favorite is people that turn off auto vacuum, so the thing that actually makes multi view concurrency control work, so don't turn it off. Its work is removing dead tuples, freezing things, among other things, it does have overhead because it scans tables and indexes and acquires locks and gives them up voluntarily and that's why it has limited capacity by default. But the defaults are not suitable for production workload. So if you're concerned about the overhead of auto vacuum then turning it off is not the solution because the alternative is worse. You can risk shutting down your database or accumulating bloat because there's no way to avoid the vacuum in Postgres yet. And when you outrun vacuum by writing faster than your database can auto vacuum it then you may come up with a bloat runaway that requires a vacuum full and that takes a total lock on the table and nobody can use it. So instead of turning off auto vacuum, actually make it work harder and you can find in the Postgres documentation how to make it work harder in order to avoid bloat and transaction ID wraparound. There's some standard stuff here about explicit locking. If your application needs to lock things to make sure that concurrency, oops, out of power, can I use something else? I have a copy. Okay, so we're only like two or three slides. If you're really interested in knowing them you can talk to Jimmy afterwards but you can ask now questions about what he already talked about. So if we have like five minutes for questions, so if you have a question please raise your hand and we are going to bring the microphone to you so you can ask questions. There is a question there. Good. Thanks, it's on the website. Is there any difference on how, is there any difference in how VARCAR and VARCAR N are stored on the disk? Sorry I didn't hear your question. If there is any difference in how VARCAR and VARCAR N and text are stored on the disk? No, VARCAR is exactly the same as text. It's the same type. Okay. So it doesn't matter like also for indexes like I know in my SQR. No, no, it doesn't make a difference but VARCAR with a limit is a different type. Got it. Thank you. Thanks. Another question? Just one of the browser. Questions, questions. Jimmy, I have a question. So you were talking about money and why does money is actually implemented? Is it SQL standard or? Connected. Sorry, what was the question? If money is so bad as a data type, why is it implemented in Postgres? Because it was actually deprecated because of those bad things that we talked about. Twice. Twice. As Andreas pointed out this morning and people requested it so we reinstated it twice. Oops. There you go. So people wanted it. Okay. People wants money. So. Different kind of money, exactly. Any other questions? Okay we have another question here. Quick question about table inheritance. So I know I've read the Postgres documentation about all its flaws and why you shouldn't use it especially now that there's partitioning. But overall I think the idea of having tables that have some common columns but then diverge on some others is an interesting idea. There's other ways to solve it. Like in previous jobs I've implemented one table that had all the common columns and then one separate table for each variation. But are there other solutions that you implement for those types of? ORMs. Why not use ORMs to make as complicated the data model as you like but not store the complexity as inheritance relationships on the database. But doesn't that create larger tables that you'll have to read no matter if the data is sparse? No all you need to link them is a foreign key relationship. So you're just storing an extra identifier I guess. Yeah. Thank you. Okay. Here. Never mind. So anyway, before the last thing I wanted to tell you, right, it was the security slides. They're important. Never use trust over TCPIP in your PGHBA conf. That was the most important thing I had to say in the remainder of the slides. Do not trust anything coming from TCPIP. Always use password, MD5 certificate, scram authentication. That was the last thing. Sorry. I'll take your question now. Thanks. I'm curious as to why outer left join isn't implemented, it's just left join, is that of course it's the same thing as using the anti-join you used earlier. I'm just curious why it isn't implemented. It's the same thing. Outer left join is the same thing as left join in Postgres. Yeah, I know. But outer left join should be, according to my old books of SQL89 or something, just the anti-join left side. So you do not take the center part where the rings meet. You remove the intersection, just take the left part. Right. So yeah, the way Postgres supplements it is it just enters null for the things that don't exist that don't correspond. And the right join would put the nulls on the other side. That's the difference. There was another question here before. So you mentioned about the date and the time handling. Is there any way in Postgres that doesn't involve an awful lot of hackery to deal with partial dates? E.g., for example, if I said I'm going to take the train tomorrow morning or I'm going on holiday in August. So you want to store like August? Well, August 24. Right. So you can use a date with no context. You can use a date that says August 24. Well no, not as in August 24, as in August 2024. Okay, so you can just use extract from that date or truncate and lose all of the other context with that date and only store August 2024. Thank you. We have time for the very last question here, somebody who is ready. Hi. When you write V2 of this presentation, what do the other don't do is that you would add? Other don't do is to involve like, I don't know, like foreign data wrappers or well or I guess the more exotic parts of Postgres that you would say. Yeah, as I said, this talk couldn't be all-inclusive. It was the top things that we see people doing wrong every day. Fair enough. Right. So thanks everybody for staying until the very last talk. Excellent. And remember, you can now get out here on the front because there are no more talks. You can pick up your stickers here. And once again, thank you, Jimmy, for your presentation. Cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.32, "text": " But what you should not do in Postgres, so please welcome Jimmy Angelacos.", "tokens": [583, 437, 291, 820, 406, 360, 294, 10223, 45189, 11, 370, 1767, 2928, 15709, 14902, 326, 329, 13], "temperature": 0.0, "avg_logprob": -0.32416826135971966, "compression_ratio": 1.2482758620689656, "no_speech_prob": 0.46233880519866943}, {"id": 1, "seek": 0, "start": 17.32, "end": 19.56, "text": " Thanks very much.", "tokens": [2561, 588, 709, 13], "temperature": 0.0, "avg_logprob": -0.32416826135971966, "compression_ratio": 1.2482758620689656, "no_speech_prob": 0.46233880519866943}, {"id": 2, "seek": 0, "start": 19.56, "end": 28.48, "text": " I'm a Senior Solutions Architect at EDB and I am grateful to EDB for allowing me to make", "tokens": [286, 478, 257, 18370, 36295, 29306, 412, 18050, 33, 293, 286, 669, 7941, 281, 18050, 33, 337, 8293, 385, 281, 652], "temperature": 0.0, "avg_logprob": -0.32416826135971966, "compression_ratio": 1.2482758620689656, "no_speech_prob": 0.46233880519866943}, {"id": 3, "seek": 2848, "start": 28.48, "end": 36.52, "text": " Postgres my day job because it is an excellent database, it is an excellent community and", "tokens": [10223, 45189, 452, 786, 1691, 570, 309, 307, 364, 7103, 8149, 11, 309, 307, 364, 7103, 1768, 293], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 4, "seek": 2848, "start": 36.52, "end": 41.6, "text": " thank you all for attending a talk with such a clickbaity title.", "tokens": [1309, 291, 439, 337, 15862, 257, 751, 365, 1270, 257, 2052, 4231, 507, 4876, 13], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 5, "seek": 2848, "start": 41.6, "end": 43.92, "text": " And thank you to the guys at home for clicking.", "tokens": [400, 1309, 291, 281, 264, 1074, 412, 1280, 337, 9697, 13], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 6, "seek": 2848, "start": 43.92, "end": 46.760000000000005, "text": " So why this title?", "tokens": [407, 983, 341, 4876, 30], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 7, "seek": 2848, "start": 46.760000000000005, "end": 48.08, "text": " I didn't come up with it.", "tokens": [286, 994, 380, 808, 493, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 8, "seek": 2848, "start": 48.08, "end": 56.88, "text": " So this title is the title of a Postgres Wiki page that's called Don't Do This.", "tokens": [407, 341, 4876, 307, 264, 4876, 295, 257, 10223, 45189, 35892, 3028, 300, 311, 1219, 1468, 380, 1144, 639, 13], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 9, "seek": 2848, "start": 56.88, "end": 58.36, "text": " And I got all the content from there.", "tokens": [400, 286, 658, 439, 264, 2701, 490, 456, 13], "temperature": 0.0, "avg_logprob": -0.14244605980667413, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.00039521983126178384}, {"id": 10, "seek": 5836, "start": 58.36, "end": 61.32, "text": " So that's the end of the talk.", "tokens": [407, 300, 311, 264, 917, 295, 264, 751, 13], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 11, "seek": 5836, "start": 61.32, "end": 66.72, "text": " But no, anyway, so this talk is not all inclusive, right?", "tokens": [583, 572, 11, 4033, 11, 370, 341, 751, 307, 406, 439, 13429, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 12, "seek": 5836, "start": 66.72, "end": 70.72, "text": " I'm not going to tell you all the mistakes you can make with Postgres.", "tokens": [286, 478, 406, 516, 281, 980, 291, 439, 264, 8038, 291, 393, 652, 365, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 13, "seek": 5836, "start": 70.72, "end": 71.72, "text": " Who can?", "tokens": [2102, 393, 30], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 14, "seek": 5836, "start": 71.72, "end": 78.44, "text": " I mean, there is literally nothing that you cannot mess up with no matter which database", "tokens": [286, 914, 11, 456, 307, 3736, 1825, 300, 291, 2644, 2082, 493, 365, 572, 1871, 597, 8149], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 15, "seek": 5836, "start": 78.44, "end": 79.44, "text": " you use.", "tokens": [291, 764, 13], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 16, "seek": 5836, "start": 79.44, "end": 83.4, "text": " You can always find a way to mess up.", "tokens": [509, 393, 1009, 915, 257, 636, 281, 2082, 493, 13], "temperature": 0.0, "avg_logprob": -0.1817344453599718, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.00015304308908525854}, {"id": 17, "seek": 8340, "start": 83.4, "end": 88.68, "text": " But these are some of the things that we've noticed that people are doing wrong in general", "tokens": [583, 613, 366, 512, 295, 264, 721, 300, 321, 600, 5694, 300, 561, 366, 884, 2085, 294, 2674], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 18, "seek": 8340, "start": 88.68, "end": 90.16000000000001, "text": " with Postgres.", "tokens": [365, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 19, "seek": 8340, "start": 90.16000000000001, "end": 92.84, "text": " So some of them are misconceptions.", "tokens": [407, 512, 295, 552, 366, 50012, 13], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 20, "seek": 8340, "start": 92.84, "end": 98.04, "text": " Like I believe this thing works this way, but it doesn't.", "tokens": [1743, 286, 1697, 341, 551, 1985, 341, 636, 11, 457, 309, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 21, "seek": 8340, "start": 98.04, "end": 104.12, "text": " Some things are confusing because of the way they're implemented in Postgres, especially", "tokens": [2188, 721, 366, 13181, 570, 295, 264, 636, 436, 434, 12270, 294, 10223, 45189, 11, 2318], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 22, "seek": 8340, "start": 104.12, "end": 112.28, "text": " things that are not part of the SQL standard, but Postgres extensions to the SQL standard.", "tokens": [721, 300, 366, 406, 644, 295, 264, 19200, 3832, 11, 457, 10223, 45189, 25129, 281, 264, 19200, 3832, 13], "temperature": 0.0, "avg_logprob": -0.11628136427506157, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.00024217528698500246}, {"id": 23, "seek": 11228, "start": 112.28, "end": 117.68, "text": " So to be fair, Postgres is the most SQL standard compliant database.", "tokens": [407, 281, 312, 3143, 11, 10223, 45189, 307, 264, 881, 19200, 3832, 36248, 8149, 13], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 24, "seek": 11228, "start": 117.68, "end": 120.48, "text": " It just has some things on top of it.", "tokens": [467, 445, 575, 512, 721, 322, 1192, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 25, "seek": 11228, "start": 120.48, "end": 125.44, "text": " Other databases implement a subset of the SQL standard and also confusing things.", "tokens": [5358, 22380, 4445, 257, 25993, 295, 264, 19200, 3832, 293, 611, 13181, 721, 13], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 26, "seek": 11228, "start": 125.44, "end": 129.58, "text": " So we're a bit better from that respect.", "tokens": [407, 321, 434, 257, 857, 1101, 490, 300, 3104, 13], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 27, "seek": 11228, "start": 129.58, "end": 135.48, "text": " And some common mistakes that people make that usually have a significant impact in", "tokens": [400, 512, 2689, 8038, 300, 561, 652, 300, 2673, 362, 257, 4776, 2712, 294], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 28, "seek": 11228, "start": 135.48, "end": 136.8, "text": " production environments.", "tokens": [4265, 12388, 13], "temperature": 0.0, "avg_logprob": -0.09371531009674072, "compression_ratio": 1.5576036866359446, "no_speech_prob": 4.818464003619738e-05}, {"id": 29, "seek": 13680, "start": 136.8, "end": 144.48000000000002, "text": " So we'll be looking at some bad examples of SQL that you can write in Postgres.", "tokens": [407, 321, 603, 312, 1237, 412, 512, 1578, 5110, 295, 19200, 300, 291, 393, 2464, 294, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.13056364451369193, "compression_ratio": 1.5891891891891892, "no_speech_prob": 8.591260120738298e-05}, {"id": 30, "seek": 13680, "start": 144.48000000000002, "end": 150.68, "text": " We'll be looking at some improper data types for storing certain things.", "tokens": [492, 603, 312, 1237, 412, 512, 40651, 1412, 3467, 337, 26085, 1629, 721, 13], "temperature": 0.0, "avg_logprob": -0.13056364451369193, "compression_ratio": 1.5891891891891892, "no_speech_prob": 8.591260120738298e-05}, {"id": 31, "seek": 13680, "start": 150.68, "end": 157.04000000000002, "text": " Andreas had a good talk this morning about this, covering many of the same topics.", "tokens": [38785, 632, 257, 665, 751, 341, 2446, 466, 341, 11, 10322, 867, 295, 264, 912, 8378, 13], "temperature": 0.0, "avg_logprob": -0.13056364451369193, "compression_ratio": 1.5891891891891892, "no_speech_prob": 8.591260120738298e-05}, {"id": 32, "seek": 13680, "start": 157.04000000000002, "end": 164.72000000000003, "text": " We will be looking at wrong ways to use Postgres features.", "tokens": [492, 486, 312, 1237, 412, 2085, 2098, 281, 764, 10223, 45189, 4122, 13], "temperature": 0.0, "avg_logprob": -0.13056364451369193, "compression_ratio": 1.5891891891891892, "no_speech_prob": 8.591260120738298e-05}, {"id": 33, "seek": 16472, "start": 164.72, "end": 171.2, "text": " And also some things that affect your performance and affect the security of the server that", "tokens": [400, 611, 512, 721, 300, 3345, 428, 3389, 293, 3345, 264, 3825, 295, 264, 7154, 300], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 34, "seek": 16472, "start": 171.2, "end": 173.8, "text": " you need to be aware of.", "tokens": [291, 643, 281, 312, 3650, 295, 13], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 35, "seek": 16472, "start": 173.8, "end": 180.12, "text": " So let's start off with some bad SQL.", "tokens": [407, 718, 311, 722, 766, 365, 512, 1578, 19200, 13], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 36, "seek": 16472, "start": 180.12, "end": 184.28, "text": " First and foremost, not in.", "tokens": [2386, 293, 18864, 11, 406, 294, 13], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 37, "seek": 16472, "start": 184.28, "end": 187.56, "text": " As in the Boolean, not in, right?", "tokens": [1018, 294, 264, 23351, 28499, 11, 406, 294, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 38, "seek": 16472, "start": 187.56, "end": 190.88, "text": " It doesn't work the way you expect it to.", "tokens": [467, 1177, 380, 589, 264, 636, 291, 2066, 309, 281, 13], "temperature": 0.0, "avg_logprob": -0.12796478522451302, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.00010817969450727105}, {"id": 39, "seek": 19088, "start": 190.88, "end": 200.04, "text": " So when you're writing, select something where something else is not in this subquery.", "tokens": [407, 562, 291, 434, 3579, 11, 3048, 746, 689, 746, 1646, 307, 406, 294, 341, 1422, 358, 2109, 13], "temperature": 0.0, "avg_logprob": -0.1097102165222168, "compression_ratio": 1.5502645502645502, "no_speech_prob": 2.7405776563682593e-05}, {"id": 40, "seek": 19088, "start": 200.04, "end": 205.72, "text": " You have to keep in mind that SQL and Postgres by extension is not Python and it's not Ruby.", "tokens": [509, 362, 281, 1066, 294, 1575, 300, 19200, 293, 10223, 45189, 538, 10320, 307, 406, 15329, 293, 309, 311, 406, 19907, 13], "temperature": 0.0, "avg_logprob": -0.1097102165222168, "compression_ratio": 1.5502645502645502, "no_speech_prob": 2.7405776563682593e-05}, {"id": 41, "seek": 19088, "start": 205.72, "end": 212.0, "text": " So it doesn't behave the way you expect it to if you're used to writing not in Booleans", "tokens": [407, 309, 1177, 380, 15158, 264, 636, 291, 2066, 309, 281, 498, 291, 434, 1143, 281, 3579, 406, 294, 23351, 24008], "temperature": 0.0, "avg_logprob": -0.1097102165222168, "compression_ratio": 1.5502645502645502, "no_speech_prob": 2.7405776563682593e-05}, {"id": 42, "seek": 19088, "start": 212.0, "end": 214.07999999999998, "text": " in programming languages.", "tokens": [294, 9410, 8650, 13], "temperature": 0.0, "avg_logprob": -0.1097102165222168, "compression_ratio": 1.5502645502645502, "no_speech_prob": 2.7405776563682593e-05}, {"id": 43, "seek": 21408, "start": 214.08, "end": 222.4, "text": " So select A from table one where A not in one constant, right?", "tokens": [407, 3048, 316, 490, 3199, 472, 689, 316, 406, 294, 472, 5754, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19741625863997664, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0002054863580269739}, {"id": 44, "seek": 21408, "start": 222.4, "end": 224.96, "text": " So it's always true.", "tokens": [407, 309, 311, 1009, 2074, 13], "temperature": 0.0, "avg_logprob": -0.19741625863997664, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0002054863580269739}, {"id": 45, "seek": 21408, "start": 224.96, "end": 237.76000000000002, "text": " And null returns nothing because if you perform a not in and there's even one null, the result", "tokens": [400, 18184, 11247, 1825, 570, 498, 291, 2042, 257, 406, 294, 293, 456, 311, 754, 472, 18184, 11, 264, 1874], "temperature": 0.0, "avg_logprob": -0.19741625863997664, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0002054863580269739}, {"id": 46, "seek": 21408, "start": 237.76000000000002, "end": 240.28, "text": " is null.", "tokens": [307, 18184, 13], "temperature": 0.0, "avg_logprob": -0.19741625863997664, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0002054863580269739}, {"id": 47, "seek": 21408, "start": 240.28, "end": 242.88000000000002, "text": " Not false, null.", "tokens": [1726, 7908, 11, 18184, 13], "temperature": 0.0, "avg_logprob": -0.19741625863997664, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0002054863580269739}, {"id": 48, "seek": 24288, "start": 242.88, "end": 252.76, "text": " So equally, select A from table one, a more real world scenario where A is not in, select", "tokens": [407, 12309, 11, 3048, 316, 490, 3199, 472, 11, 257, 544, 957, 1002, 9005, 689, 316, 307, 406, 294, 11, 3048], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 49, "seek": 24288, "start": 252.76, "end": 255.92, "text": " B from table two.", "tokens": [363, 490, 3199, 732, 13], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 50, "seek": 24288, "start": 255.92, "end": 261.56, "text": " Even if one B is null, then the whole result is null.", "tokens": [2754, 498, 472, 363, 307, 18184, 11, 550, 264, 1379, 1874, 307, 18184, 13], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 51, "seek": 24288, "start": 261.56, "end": 266.68, "text": " So it's not doing what you're expecting it to.", "tokens": [407, 309, 311, 406, 884, 437, 291, 434, 9650, 309, 281, 13], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 52, "seek": 24288, "start": 266.68, "end": 270.84, "text": " Let's say that table two has no null Bs, right?", "tokens": [961, 311, 584, 300, 3199, 732, 575, 572, 18184, 363, 82, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 53, "seek": 24288, "start": 270.84, "end": 272.48, "text": " B is not null.", "tokens": [363, 307, 406, 18184, 13], "temperature": 0.0, "avg_logprob": -0.1328482010785271, "compression_ratio": 1.5574712643678161, "no_speech_prob": 2.176092857553158e-05}, {"id": 54, "seek": 27248, "start": 272.48, "end": 274.6, "text": " Why is this still bad?", "tokens": [1545, 307, 341, 920, 1578, 30], "temperature": 0.0, "avg_logprob": -0.1328371630774604, "compression_ratio": 1.4130434782608696, "no_speech_prob": 9.741839312482625e-05}, {"id": 55, "seek": 27248, "start": 274.6, "end": 282.36, "text": " And you should not use it because it doesn't optimize well in the Postgres query planner.", "tokens": [400, 291, 820, 406, 764, 309, 570, 309, 1177, 380, 19719, 731, 294, 264, 10223, 45189, 14581, 31268, 13], "temperature": 0.0, "avg_logprob": -0.1328371630774604, "compression_ratio": 1.4130434782608696, "no_speech_prob": 9.741839312482625e-05}, {"id": 56, "seek": 27248, "start": 282.36, "end": 289.24, "text": " And instead of performing what is known as an anti-join, so it's the complete opposite", "tokens": [400, 2602, 295, 10205, 437, 307, 2570, 382, 364, 6061, 12, 5134, 259, 11, 370, 309, 311, 264, 3566, 6182], "temperature": 0.0, "avg_logprob": -0.1328371630774604, "compression_ratio": 1.4130434782608696, "no_speech_prob": 9.741839312482625e-05}, {"id": 57, "seek": 27248, "start": 289.24, "end": 290.24, "text": " of a join.", "tokens": [295, 257, 3917, 13], "temperature": 0.0, "avg_logprob": -0.1328371630774604, "compression_ratio": 1.4130434782608696, "no_speech_prob": 9.741839312482625e-05}, {"id": 58, "seek": 27248, "start": 290.24, "end": 294.96000000000004, "text": " Show me the rows you cannot join from this table.", "tokens": [6895, 385, 264, 13241, 291, 2644, 3917, 490, 341, 3199, 13], "temperature": 0.0, "avg_logprob": -0.1328371630774604, "compression_ratio": 1.4130434782608696, "no_speech_prob": 9.741839312482625e-05}, {"id": 59, "seek": 29496, "start": 294.96, "end": 302.59999999999997, "text": " So the Postgres query planner chooses a sub-plan and if that's a hashed sub-plan, that's kind", "tokens": [407, 264, 10223, 45189, 14581, 31268, 25963, 257, 1422, 12, 16554, 293, 498, 300, 311, 257, 22019, 292, 1422, 12, 16554, 11, 300, 311, 733], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 60, "seek": 29496, "start": 302.59999999999997, "end": 303.59999999999997, "text": " of okay.", "tokens": [295, 1392, 13], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 61, "seek": 29496, "start": 303.59999999999997, "end": 308.15999999999997, "text": " If it's a simple sub-plan, then the performance of this thing is disastrous.", "tokens": [759, 309, 311, 257, 2199, 1422, 12, 16554, 11, 550, 264, 3389, 295, 341, 551, 307, 44502, 13], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 62, "seek": 29496, "start": 308.15999999999997, "end": 312.4, "text": " So even if you don't have nulls, you don't want to use it.", "tokens": [407, 754, 498, 291, 500, 380, 362, 18184, 82, 11, 291, 500, 380, 528, 281, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 63, "seek": 29496, "start": 312.4, "end": 315.52, "text": " What should you use instead?", "tokens": [708, 820, 291, 764, 2602, 30], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 64, "seek": 29496, "start": 315.52, "end": 321.28, "text": " You should use an anti-join, as we just said, which looks something like this.", "tokens": [509, 820, 764, 364, 6061, 12, 5134, 259, 11, 382, 321, 445, 848, 11, 597, 1542, 746, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.09284208371089055, "compression_ratio": 1.6018518518518519, "no_speech_prob": 8.861909009283409e-05}, {"id": 65, "seek": 32128, "start": 321.28, "end": 328.2, "text": " The column from table one where not exists is a better way to write not in.", "tokens": [440, 7738, 490, 3199, 472, 689, 406, 8198, 307, 257, 1101, 636, 281, 2464, 406, 294, 13], "temperature": 0.0, "avg_logprob": -0.16897760331630707, "compression_ratio": 1.7826086956521738, "no_speech_prob": 9.159314504358917e-05}, {"id": 66, "seek": 32128, "start": 328.2, "end": 337.67999999999995, "text": " So wherever column from table two does not exist where table one column equals table", "tokens": [407, 8660, 7738, 490, 3199, 732, 775, 406, 2514, 689, 3199, 472, 7738, 6915, 3199], "temperature": 0.0, "avg_logprob": -0.16897760331630707, "compression_ratio": 1.7826086956521738, "no_speech_prob": 9.159314504358917e-05}, {"id": 67, "seek": 32128, "start": 337.67999999999995, "end": 338.67999999999995, "text": " two column.", "tokens": [732, 7738, 13], "temperature": 0.0, "avg_logprob": -0.16897760331630707, "compression_ratio": 1.7826086956521738, "no_speech_prob": 9.159314504358917e-05}, {"id": 68, "seek": 32128, "start": 338.67999999999995, "end": 347.08, "text": " So you want the rows that table two doesn't, can't match up to table one.", "tokens": [407, 291, 528, 264, 13241, 300, 3199, 732, 1177, 380, 11, 393, 380, 2995, 493, 281, 3199, 472, 13], "temperature": 0.0, "avg_logprob": -0.16897760331630707, "compression_ratio": 1.7826086956521738, "no_speech_prob": 9.159314504358917e-05}, {"id": 69, "seek": 34708, "start": 347.08, "end": 351.12, "text": " So that's an anti-join.", "tokens": [407, 300, 311, 364, 6061, 12, 5134, 259, 13], "temperature": 0.0, "avg_logprob": -0.13928542079695735, "compression_ratio": 1.6353591160220995, "no_speech_prob": 4.320227890275419e-05}, {"id": 70, "seek": 34708, "start": 351.12, "end": 357.76, "text": " Or another way you could write this is select column from table one and use a left join.", "tokens": [1610, 1071, 636, 291, 727, 2464, 341, 307, 3048, 7738, 490, 3199, 472, 293, 764, 257, 1411, 3917, 13], "temperature": 0.0, "avg_logprob": -0.13928542079695735, "compression_ratio": 1.6353591160220995, "no_speech_prob": 4.320227890275419e-05}, {"id": 71, "seek": 34708, "start": 357.76, "end": 366.59999999999997, "text": " So left join, table two, using the column, using this Postgres shorthand for join on", "tokens": [407, 1411, 3917, 11, 3199, 732, 11, 1228, 264, 7738, 11, 1228, 341, 10223, 45189, 402, 2652, 474, 337, 3917, 322], "temperature": 0.0, "avg_logprob": -0.13928542079695735, "compression_ratio": 1.6353591160220995, "no_speech_prob": 4.320227890275419e-05}, {"id": 72, "seek": 34708, "start": 366.59999999999997, "end": 371.88, "text": " column equals column, but in this case I'm using column because it's the same name in", "tokens": [7738, 6915, 7738, 11, 457, 294, 341, 1389, 286, 478, 1228, 7738, 570, 309, 311, 264, 912, 1315, 294], "temperature": 0.0, "avg_logprob": -0.13928542079695735, "compression_ratio": 1.6353591160220995, "no_speech_prob": 4.320227890275419e-05}, {"id": 73, "seek": 34708, "start": 371.88, "end": 373.12, "text": " both tables.", "tokens": [1293, 8020, 13], "temperature": 0.0, "avg_logprob": -0.13928542079695735, "compression_ratio": 1.6353591160220995, "no_speech_prob": 4.320227890275419e-05}, {"id": 74, "seek": 37312, "start": 373.12, "end": 378.48, "text": " So left join where table two dot call is null.", "tokens": [407, 1411, 3917, 689, 3199, 732, 5893, 818, 307, 18184, 13], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 75, "seek": 37312, "start": 378.48, "end": 380.62, "text": " What does that do?", "tokens": [708, 775, 300, 360, 30], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 76, "seek": 37312, "start": 380.62, "end": 387.2, "text": " If it cannot find matches on the left-hand side to the right-hand side, then the right-hand", "tokens": [759, 309, 2644, 915, 10676, 322, 264, 1411, 12, 5543, 1252, 281, 264, 558, 12, 5543, 1252, 11, 550, 264, 558, 12, 5543], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 77, "seek": 37312, "start": 387.2, "end": 391.96, "text": " side, the result from table two is a null.", "tokens": [1252, 11, 264, 1874, 490, 3199, 732, 307, 257, 18184, 13], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 78, "seek": 37312, "start": 391.96, "end": 395.52, "text": " And that's how you get your anti-join.", "tokens": [400, 300, 311, 577, 291, 483, 428, 6061, 12, 5134, 259, 13], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 79, "seek": 37312, "start": 395.52, "end": 398.56, "text": " To be fair, not in is okay.", "tokens": [1407, 312, 3143, 11, 406, 294, 307, 1392, 13], "temperature": 0.0, "avg_logprob": -0.10570301729090073, "compression_ratio": 1.608433734939759, "no_speech_prob": 1.0773173926281743e-05}, {"id": 80, "seek": 39856, "start": 398.56, "end": 405.96, "text": " If you know that there are no nulls and you cannot know that for a table, and as we said", "tokens": [759, 291, 458, 300, 456, 366, 572, 18184, 82, 293, 291, 2644, 458, 300, 337, 257, 3199, 11, 293, 382, 321, 848], "temperature": 0.0, "avg_logprob": -0.12143003940582275, "compression_ratio": 1.6116071428571428, "no_speech_prob": 2.8815278710681014e-05}, {"id": 81, "seek": 39856, "start": 405.96, "end": 411.92, "text": " it has performance implications, but when you're excluding constants that's fine, right?", "tokens": [309, 575, 3389, 16602, 11, 457, 562, 291, 434, 49999, 35870, 300, 311, 2489, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12143003940582275, "compression_ratio": 1.6116071428571428, "no_speech_prob": 2.8815278710681014e-05}, {"id": 82, "seek": 39856, "start": 411.92, "end": 417.16, "text": " Because if you have an index and you're able to tell that none of this is in the index,", "tokens": [1436, 498, 291, 362, 364, 8186, 293, 291, 434, 1075, 281, 980, 300, 6022, 295, 341, 307, 294, 264, 8186, 11], "temperature": 0.0, "avg_logprob": -0.12143003940582275, "compression_ratio": 1.6116071428571428, "no_speech_prob": 2.8815278710681014e-05}, {"id": 83, "seek": 39856, "start": 417.16, "end": 419.6, "text": " then you're fine to use not in.", "tokens": [550, 291, 434, 2489, 281, 764, 406, 294, 13], "temperature": 0.0, "avg_logprob": -0.12143003940582275, "compression_ratio": 1.6116071428571428, "no_speech_prob": 2.8815278710681014e-05}, {"id": 84, "seek": 39856, "start": 419.6, "end": 426.72, "text": " But generally speaking, try to prefer not exists or anti-joins.", "tokens": [583, 5101, 4124, 11, 853, 281, 4382, 406, 8198, 420, 6061, 12, 5134, 1292, 13], "temperature": 0.0, "avg_logprob": -0.12143003940582275, "compression_ratio": 1.6116071428571428, "no_speech_prob": 2.8815278710681014e-05}, {"id": 85, "seek": 42672, "start": 426.72, "end": 437.76000000000005, "text": " Another thing is that we've seen people use the wrong way without knowing is between,", "tokens": [3996, 551, 307, 300, 321, 600, 1612, 561, 764, 264, 2085, 636, 1553, 5276, 307, 1296, 11], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 86, "seek": 42672, "start": 437.76000000000005, "end": 444.24, "text": " especially when you write a query with a where clause that specifies between timestamp one", "tokens": [2318, 562, 291, 2464, 257, 14581, 365, 257, 689, 25925, 300, 1608, 11221, 1296, 49108, 1215, 472], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 87, "seek": 42672, "start": 444.24, "end": 446.12, "text": " and timestamp two.", "tokens": [293, 49108, 1215, 732, 13], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 88, "seek": 42672, "start": 446.12, "end": 448.72, "text": " Why is that?", "tokens": [1545, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 89, "seek": 42672, "start": 448.72, "end": 454.04, "text": " Because between A and B is inclusive.", "tokens": [1436, 1296, 316, 293, 363, 307, 13429, 13], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 90, "seek": 42672, "start": 454.04, "end": 455.96000000000004, "text": " It's a closed interval.", "tokens": [467, 311, 257, 5395, 15035, 13], "temperature": 0.0, "avg_logprob": -0.14708195269947322, "compression_ratio": 1.542857142857143, "no_speech_prob": 4.5350592699833214e-05}, {"id": 91, "seek": 45596, "start": 455.96, "end": 462.84, "text": " So when you're saying between one and 100, you're saying include one and also include", "tokens": [407, 562, 291, 434, 1566, 1296, 472, 293, 2319, 11, 291, 434, 1566, 4090, 472, 293, 611, 4090], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 92, "seek": 45596, "start": 462.84, "end": 467.0, "text": " 100 in the results.", "tokens": [2319, 294, 264, 3542, 13], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 93, "seek": 45596, "start": 467.0, "end": 468.34, "text": " When is this bad?", "tokens": [1133, 307, 341, 1578, 30], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 94, "seek": 45596, "start": 468.34, "end": 477.15999999999997, "text": " This is bad when you're a bank, let's say, and you want to sum up the transactions for", "tokens": [639, 307, 1578, 562, 291, 434, 257, 3765, 11, 718, 311, 584, 11, 293, 291, 528, 281, 2408, 493, 264, 16856, 337], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 95, "seek": 45596, "start": 477.15999999999997, "end": 479.12, "text": " the day, right?", "tokens": [264, 786, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 96, "seek": 45596, "start": 479.12, "end": 483.24, "text": " The amounts from all transactions from the day.", "tokens": [440, 11663, 490, 439, 16856, 490, 264, 786, 13], "temperature": 0.0, "avg_logprob": -0.13912356205475637, "compression_ratio": 1.6809815950920246, "no_speech_prob": 1.9798704670392908e-05}, {"id": 97, "seek": 48324, "start": 483.24, "end": 489.64, "text": " And your DBA has written the following query, select some of the amounts from transactions", "tokens": [400, 428, 413, 9295, 575, 3720, 264, 3480, 14581, 11, 3048, 512, 295, 264, 11663, 490, 16856], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 98, "seek": 48324, "start": 489.64, "end": 494.92, "text": " where transaction timestamp is between the end of the previous day and the end of the", "tokens": [689, 14425, 49108, 1215, 307, 1296, 264, 917, 295, 264, 3894, 786, 293, 264, 917, 295, 264], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 99, "seek": 48324, "start": 494.92, "end": 496.44, "text": " current day, right?", "tokens": [2190, 786, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 100, "seek": 48324, "start": 496.44, "end": 497.84000000000003, "text": " So it should be fine.", "tokens": [407, 309, 820, 312, 2489, 13], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 101, "seek": 48324, "start": 497.84000000000003, "end": 498.84000000000003, "text": " No, it's not.", "tokens": [883, 11, 309, 311, 406, 13], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 102, "seek": 48324, "start": 498.84000000000003, "end": 506.2, "text": " Because if a transaction has happened exactly at midnight, you'll get it twice.", "tokens": [1436, 498, 257, 14425, 575, 2011, 2293, 412, 19006, 11, 291, 603, 483, 309, 6091, 13], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 103, "seek": 48324, "start": 506.2, "end": 510.44, "text": " Because when you run that query tomorrow, it's going to return the same row because you've", "tokens": [1436, 562, 291, 1190, 300, 14581, 4153, 11, 309, 311, 516, 281, 2736, 264, 912, 5386, 570, 291, 600], "temperature": 0.0, "avg_logprob": -0.12567583719889322, "compression_ratio": 1.6861924686192469, "no_speech_prob": 8.460112439934164e-05}, {"id": 104, "seek": 51044, "start": 510.44, "end": 514.96, "text": " included midnight in both queries, right?", "tokens": [5556, 19006, 294, 1293, 24109, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 105, "seek": 51044, "start": 514.96, "end": 518.16, "text": " So that's a bad thing.", "tokens": [407, 300, 311, 257, 1578, 551, 13], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 106, "seek": 51044, "start": 518.16, "end": 524.64, "text": " So it's better to be explicit instead and use select some amount from transactions where", "tokens": [407, 309, 311, 1101, 281, 312, 13691, 2602, 293, 764, 3048, 512, 2372, 490, 16856, 689], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 107, "seek": 51044, "start": 524.64, "end": 533.6, "text": " transaction timestamp is greater or equal than and transaction timestamp is less than,", "tokens": [14425, 49108, 1215, 307, 5044, 420, 2681, 813, 293, 14425, 49108, 1215, 307, 1570, 813, 11], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 108, "seek": 51044, "start": 533.6, "end": 537.12, "text": " excluding the equality with midnight, right?", "tokens": [49999, 264, 14949, 365, 19006, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 109, "seek": 51044, "start": 537.12, "end": 539.84, "text": " So that is very, very safe.", "tokens": [407, 300, 307, 588, 11, 588, 3273, 13], "temperature": 0.0, "avg_logprob": -0.14576697659182858, "compression_ratio": 1.691891891891892, "no_speech_prob": 2.97472724923864e-05}, {"id": 110, "seek": 53984, "start": 539.84, "end": 542.48, "text": " And there's no way to read it wrong.", "tokens": [400, 456, 311, 572, 636, 281, 1401, 309, 2085, 13], "temperature": 0.0, "avg_logprob": -0.10462804274125533, "compression_ratio": 1.5181347150259068, "no_speech_prob": 9.305700950790197e-05}, {"id": 111, "seek": 53984, "start": 542.48, "end": 548.64, "text": " It's very explicit, very clear.", "tokens": [467, 311, 588, 13691, 11, 588, 1850, 13], "temperature": 0.0, "avg_logprob": -0.10462804274125533, "compression_ratio": 1.5181347150259068, "no_speech_prob": 9.305700950790197e-05}, {"id": 112, "seek": 53984, "start": 548.64, "end": 553.6, "text": " Another thing, using uppercase in identifiers.", "tokens": [3996, 551, 11, 1228, 11775, 2869, 651, 294, 2473, 23463, 13], "temperature": 0.0, "avg_logprob": -0.10462804274125533, "compression_ratio": 1.5181347150259068, "no_speech_prob": 9.305700950790197e-05}, {"id": 113, "seek": 53984, "start": 553.6, "end": 559.96, "text": " Many people like to do this because it looks very professional because they're used to", "tokens": [5126, 561, 411, 281, 360, 341, 570, 309, 1542, 588, 4843, 570, 436, 434, 1143, 281], "temperature": 0.0, "avg_logprob": -0.10462804274125533, "compression_ratio": 1.5181347150259068, "no_speech_prob": 9.305700950790197e-05}, {"id": 114, "seek": 53984, "start": 559.96, "end": 567.2800000000001, "text": " some database that was out there in the 80s that only could support uppercase table names.", "tokens": [512, 8149, 300, 390, 484, 456, 294, 264, 4688, 82, 300, 787, 727, 1406, 11775, 2869, 651, 3199, 5288, 13], "temperature": 0.0, "avg_logprob": -0.10462804274125533, "compression_ratio": 1.5181347150259068, "no_speech_prob": 9.305700950790197e-05}, {"id": 115, "seek": 56728, "start": 567.28, "end": 574.8, "text": " And that database can now use lowercase, but the habit is still there.", "tokens": [400, 300, 8149, 393, 586, 764, 3126, 9765, 11, 457, 264, 7164, 307, 920, 456, 13], "temperature": 0.0, "avg_logprob": -0.08923375284349597, "compression_ratio": 1.564516129032258, "no_speech_prob": 6.193840818013996e-05}, {"id": 116, "seek": 56728, "start": 574.8, "end": 578.92, "text": " Now why is that a bad thing in Postgres?", "tokens": [823, 983, 307, 300, 257, 1578, 551, 294, 10223, 45189, 30], "temperature": 0.0, "avg_logprob": -0.08923375284349597, "compression_ratio": 1.564516129032258, "no_speech_prob": 6.193840818013996e-05}, {"id": 117, "seek": 56728, "start": 578.92, "end": 585.4399999999999, "text": " So if you use table or column names that are all capitals or mixed case, Postgres will", "tokens": [407, 498, 291, 764, 3199, 420, 7738, 5288, 300, 366, 439, 1410, 11118, 420, 7467, 1389, 11, 10223, 45189, 486], "temperature": 0.0, "avg_logprob": -0.08923375284349597, "compression_ratio": 1.564516129032258, "no_speech_prob": 6.193840818013996e-05}, {"id": 118, "seek": 56728, "start": 585.4399999999999, "end": 593.28, "text": " just ignore you and make everything lowercase unless you use double quotes around the names.", "tokens": [445, 11200, 291, 293, 652, 1203, 3126, 9765, 5969, 291, 764, 3834, 19963, 926, 264, 5288, 13], "temperature": 0.0, "avg_logprob": -0.08923375284349597, "compression_ratio": 1.564516129032258, "no_speech_prob": 6.193840818013996e-05}, {"id": 119, "seek": 59328, "start": 593.28, "end": 599.36, "text": " So create table plurp and create table quacks.", "tokens": [407, 1884, 3199, 499, 374, 79, 293, 1884, 3199, 421, 7424, 13], "temperature": 0.0, "avg_logprob": -0.18933857679367067, "compression_ratio": 1.5748502994011977, "no_speech_prob": 5.63032845093403e-05}, {"id": 120, "seek": 59328, "start": 599.36, "end": 604.88, "text": " What are the consequences of issuing these two DDLs?", "tokens": [708, 366, 264, 10098, 295, 43214, 613, 732, 30778, 43, 82, 30], "temperature": 0.0, "avg_logprob": -0.18933857679367067, "compression_ratio": 1.5748502994011977, "no_speech_prob": 5.63032845093403e-05}, {"id": 121, "seek": 59328, "start": 604.88, "end": 616.12, "text": " It creates a table named plurp, lowercase, and a table named quacks with a capital Q.", "tokens": [467, 7829, 257, 3199, 4926, 499, 374, 79, 11, 3126, 9765, 11, 293, 257, 3199, 4926, 421, 7424, 365, 257, 4238, 1249, 13], "temperature": 0.0, "avg_logprob": -0.18933857679367067, "compression_ratio": 1.5748502994011977, "no_speech_prob": 5.63032845093403e-05}, {"id": 122, "seek": 59328, "start": 616.12, "end": 617.12, "text": " Why is that a problem?", "tokens": [1545, 307, 300, 257, 1154, 30], "temperature": 0.0, "avg_logprob": -0.18933857679367067, "compression_ratio": 1.5748502994011977, "no_speech_prob": 5.63032845093403e-05}, {"id": 123, "seek": 59328, "start": 617.12, "end": 622.52, "text": " So table here is shorthand for select star from plurp.", "tokens": [407, 3199, 510, 307, 402, 2652, 474, 337, 3048, 3543, 490, 499, 374, 79, 13], "temperature": 0.0, "avg_logprob": -0.18933857679367067, "compression_ratio": 1.5748502994011977, "no_speech_prob": 5.63032845093403e-05}, {"id": 124, "seek": 62252, "start": 622.52, "end": 630.36, "text": " So table plurp works because it's not quoted, so Postgres ignores the case.", "tokens": [407, 3199, 499, 374, 79, 1985, 570, 309, 311, 406, 30047, 11, 370, 10223, 45189, 5335, 2706, 264, 1389, 13], "temperature": 0.0, "avg_logprob": -0.13760299217410205, "compression_ratio": 1.6685393258426966, "no_speech_prob": 2.1081403247080743e-05}, {"id": 125, "seek": 62252, "start": 630.36, "end": 635.6, "text": " Table plurp quoted, even if it's exactly the same way we specified it when we were creating", "tokens": [25535, 499, 374, 79, 30047, 11, 754, 498, 309, 311, 2293, 264, 912, 636, 321, 22206, 309, 562, 321, 645, 4084], "temperature": 0.0, "avg_logprob": -0.13760299217410205, "compression_ratio": 1.6685393258426966, "no_speech_prob": 2.1081403247080743e-05}, {"id": 126, "seek": 62252, "start": 635.6, "end": 641.76, "text": " the table, will fail and it will say there's no such table.", "tokens": [264, 3199, 11, 486, 3061, 293, 309, 486, 584, 456, 311, 572, 1270, 3199, 13], "temperature": 0.0, "avg_logprob": -0.13760299217410205, "compression_ratio": 1.6685393258426966, "no_speech_prob": 2.1081403247080743e-05}, {"id": 127, "seek": 62252, "start": 641.76, "end": 649.48, "text": " Equally table quacks fails because there's no lowercase table quacks.", "tokens": [15624, 379, 3199, 421, 7424, 18199, 570, 456, 311, 572, 3126, 9765, 3199, 421, 7424, 13], "temperature": 0.0, "avg_logprob": -0.13760299217410205, "compression_ratio": 1.6685393258426966, "no_speech_prob": 2.1081403247080743e-05}, {"id": 128, "seek": 64948, "start": 649.48, "end": 652.84, "text": " Table quacks in double quotes works fine.", "tokens": [25535, 421, 7424, 294, 3834, 19963, 1985, 2489, 13], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 129, "seek": 64948, "start": 652.84, "end": 656.04, "text": " So you can see how you can mess up your schema with this.", "tokens": [407, 291, 393, 536, 577, 291, 393, 2082, 493, 428, 34078, 365, 341, 13], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 130, "seek": 64948, "start": 656.04, "end": 660.4, "text": " If you give your schema to a developer and they're not aware that there's a difference", "tokens": [759, 291, 976, 428, 34078, 281, 257, 10754, 293, 436, 434, 406, 3650, 300, 456, 311, 257, 2649], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 131, "seek": 64948, "start": 660.4, "end": 666.44, "text": " between double quoted and unquoted table names, then you get in trouble.", "tokens": [1296, 3834, 30047, 293, 517, 358, 23325, 3199, 5288, 11, 550, 291, 483, 294, 5253, 13], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 132, "seek": 64948, "start": 666.44, "end": 673.64, "text": " I think.NET by default, even if you don't do anything, double quotes everything.", "tokens": [286, 519, 2411, 35554, 538, 7576, 11, 754, 498, 291, 500, 380, 360, 1340, 11, 3834, 19963, 1203, 13], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 133, "seek": 64948, "start": 673.64, "end": 678.76, "text": " So if you make the mistake of including capitals there, then they're not going to work in Postgres.", "tokens": [407, 498, 291, 652, 264, 6146, 295, 3009, 1410, 11118, 456, 11, 550, 436, 434, 406, 516, 281, 589, 294, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.11698261193469563, "compression_ratio": 1.76, "no_speech_prob": 0.0001249361375812441}, {"id": 134, "seek": 67876, "start": 678.76, "end": 687.8, "text": " So unless you create the tables from within.NET, that is.", "tokens": [407, 5969, 291, 1884, 264, 8020, 490, 1951, 2411, 35554, 11, 300, 307, 13], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 135, "seek": 67876, "start": 687.8, "end": 692.36, "text": " So the same goes for column names.", "tokens": [407, 264, 912, 1709, 337, 7738, 5288, 13], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 136, "seek": 67876, "start": 692.36, "end": 698.84, "text": " If you want pretty column names in your output and your reports, then just use select call", "tokens": [759, 291, 528, 1238, 7738, 5288, 294, 428, 5598, 293, 428, 7122, 11, 550, 445, 764, 3048, 818], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 137, "seek": 67876, "start": 698.84, "end": 701.24, "text": " as pretty name.", "tokens": [382, 1238, 1315, 13], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 138, "seek": 67876, "start": 701.24, "end": 702.68, "text": " Double quote the pretty name.", "tokens": [16633, 6513, 264, 1238, 1315, 13], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 139, "seek": 67876, "start": 702.68, "end": 706.04, "text": " It can have spaces, it can have emoji, whatever you want.", "tokens": [467, 393, 362, 7673, 11, 309, 393, 362, 31595, 11, 2035, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.15035865245721278, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.00011540022387634963}, {"id": 140, "seek": 70604, "start": 706.04, "end": 711.88, "text": " And Postgres will just return exactly that name and you don't have to change your column", "tokens": [400, 10223, 45189, 486, 445, 2736, 2293, 300, 1315, 293, 291, 500, 380, 362, 281, 1319, 428, 7738], "temperature": 0.0, "avg_logprob": -0.20056438446044922, "compression_ratio": 1.4, "no_speech_prob": 3.116011430392973e-05}, {"id": 141, "seek": 70604, "start": 711.88, "end": 718.92, "text": " name on your table to make accounting happy.", "tokens": [1315, 322, 428, 3199, 281, 652, 19163, 2055, 13], "temperature": 0.0, "avg_logprob": -0.20056438446044922, "compression_ratio": 1.4, "no_speech_prob": 3.116011430392973e-05}, {"id": 142, "seek": 70604, "start": 718.92, "end": 727.8, "text": " Now moving on from SQL, let's look at the wrong use of some of Postgres' built in data", "tokens": [823, 2684, 322, 490, 19200, 11, 718, 311, 574, 412, 264, 2085, 764, 295, 512, 295, 10223, 45189, 6, 3094, 294, 1412], "temperature": 0.0, "avg_logprob": -0.20056438446044922, "compression_ratio": 1.4, "no_speech_prob": 3.116011430392973e-05}, {"id": 143, "seek": 70604, "start": 727.8, "end": 731.0799999999999, "text": " types.", "tokens": [3467, 13], "temperature": 0.0, "avg_logprob": -0.20056438446044922, "compression_ratio": 1.4, "no_speech_prob": 3.116011430392973e-05}, {"id": 144, "seek": 70604, "start": 731.0799999999999, "end": 733.36, "text": " Again timestamps.", "tokens": [3764, 49108, 23150, 13], "temperature": 0.0, "avg_logprob": -0.20056438446044922, "compression_ratio": 1.4, "no_speech_prob": 3.116011430392973e-05}, {"id": 145, "seek": 73336, "start": 733.36, "end": 744.6, "text": " So if you create a column that is type timestamp, that means timestamp without time zone.", "tokens": [407, 498, 291, 1884, 257, 7738, 300, 307, 2010, 49108, 1215, 11, 300, 1355, 49108, 1215, 1553, 565, 6668, 13], "temperature": 0.0, "avg_logprob": -0.12079793214797974, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.2435702703660354e-05}, {"id": 146, "seek": 73336, "start": 744.6, "end": 751.08, "text": " So these are naive timestamps and they represent a local time somewhere.", "tokens": [407, 613, 366, 29052, 49108, 23150, 293, 436, 2906, 257, 2654, 565, 4079, 13], "temperature": 0.0, "avg_logprob": -0.12079793214797974, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.2435702703660354e-05}, {"id": 147, "seek": 73336, "start": 751.08, "end": 754.16, "text": " But you don't know where.", "tokens": [583, 291, 500, 380, 458, 689, 13], "temperature": 0.0, "avg_logprob": -0.12079793214797974, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.2435702703660354e-05}, {"id": 148, "seek": 73336, "start": 754.16, "end": 758.76, "text": " It stores a date and a time with no time zone information.", "tokens": [467, 9512, 257, 4002, 293, 257, 565, 365, 572, 565, 6668, 1589, 13], "temperature": 0.0, "avg_logprob": -0.12079793214797974, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.2435702703660354e-05}, {"id": 149, "seek": 75876, "start": 758.76, "end": 765.16, "text": " There's no way to retrieve the time zone where this row was inserted.", "tokens": [821, 311, 572, 636, 281, 30254, 264, 565, 6668, 689, 341, 5386, 390, 27992, 13], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 150, "seek": 75876, "start": 765.16, "end": 766.52, "text": " And why is that a bad thing?", "tokens": [400, 983, 307, 300, 257, 1578, 551, 30], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 151, "seek": 75876, "start": 766.52, "end": 769.04, "text": " Because arithmetic breaks down totally.", "tokens": [1436, 42973, 9857, 760, 3879, 13], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 152, "seek": 75876, "start": 769.04, "end": 776.52, "text": " You cannot add and subtract dates and intervals and anything else because you can't calculate,", "tokens": [509, 2644, 909, 293, 16390, 11691, 293, 26651, 293, 1340, 1646, 570, 291, 393, 380, 8873, 11], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 153, "seek": 75876, "start": 776.52, "end": 781.4399999999999, "text": " you can't make computations on what the time would be because of things such as time zone", "tokens": [291, 393, 380, 652, 2807, 763, 322, 437, 264, 565, 576, 312, 570, 295, 721, 1270, 382, 565, 6668], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 154, "seek": 75876, "start": 781.4399999999999, "end": 785.84, "text": " changes and daylight savings times.", "tokens": [2962, 293, 29964, 13454, 1413, 13], "temperature": 0.0, "avg_logprob": -0.13548667010139018, "compression_ratio": 1.617117117117117, "no_speech_prob": 4.891739081358537e-05}, {"id": 155, "seek": 78584, "start": 785.84, "end": 790.88, "text": " So it's meaningless, it will give you the wrong results.", "tokens": [407, 309, 311, 33232, 11, 309, 486, 976, 291, 264, 2085, 3542, 13], "temperature": 0.0, "avg_logprob": -0.15167038939719976, "compression_ratio": 1.592964824120603, "no_speech_prob": 8.150700887199491e-05}, {"id": 156, "seek": 78584, "start": 790.88, "end": 797.36, "text": " So instead please use timestamp TZ or TZ if you're British.", "tokens": [407, 2602, 1767, 764, 49108, 1215, 314, 57, 420, 314, 57, 498, 291, 434, 6221, 13], "temperature": 0.0, "avg_logprob": -0.15167038939719976, "compression_ratio": 1.592964824120603, "no_speech_prob": 8.150700887199491e-05}, {"id": 157, "seek": 78584, "start": 797.36, "end": 802.24, "text": " Timestamp with time zone is the equivalent.", "tokens": [7172, 377, 1215, 365, 565, 6668, 307, 264, 10344, 13], "temperature": 0.0, "avg_logprob": -0.15167038939719976, "compression_ratio": 1.592964824120603, "no_speech_prob": 8.150700887199491e-05}, {"id": 158, "seek": 78584, "start": 802.24, "end": 808.0400000000001, "text": " Timestamp TZ is the shorthand and that stores a moment in time.", "tokens": [7172, 377, 1215, 314, 57, 307, 264, 402, 2652, 474, 293, 300, 9512, 257, 1623, 294, 565, 13], "temperature": 0.0, "avg_logprob": -0.15167038939719976, "compression_ratio": 1.592964824120603, "no_speech_prob": 8.150700887199491e-05}, {"id": 159, "seek": 78584, "start": 808.0400000000001, "end": 814.84, "text": " A moment in time means the number of seconds that have passed from midnight at the beginning", "tokens": [316, 1623, 294, 565, 1355, 264, 1230, 295, 3949, 300, 362, 4678, 490, 19006, 412, 264, 2863], "temperature": 0.0, "avg_logprob": -0.15167038939719976, "compression_ratio": 1.592964824120603, "no_speech_prob": 8.150700887199491e-05}, {"id": 160, "seek": 81484, "start": 814.84, "end": 818.6800000000001, "text": " of the first of January 2000.", "tokens": [295, 264, 700, 295, 7061, 8132, 13], "temperature": 0.0, "avg_logprob": -0.11342033658708844, "compression_ratio": 1.4598930481283423, "no_speech_prob": 5.801478255307302e-05}, {"id": 161, "seek": 81484, "start": 818.6800000000001, "end": 828.24, "text": " So it's absolute, it's definite and you know exactly which moment in time you're specifying.", "tokens": [407, 309, 311, 8236, 11, 309, 311, 25131, 293, 291, 458, 2293, 597, 1623, 294, 565, 291, 434, 1608, 5489, 13], "temperature": 0.0, "avg_logprob": -0.11342033658708844, "compression_ratio": 1.4598930481283423, "no_speech_prob": 5.801478255307302e-05}, {"id": 162, "seek": 81484, "start": 828.24, "end": 833.84, "text": " The arithmetic works correctly as you would expect.", "tokens": [440, 42973, 1985, 8944, 382, 291, 576, 2066, 13], "temperature": 0.0, "avg_logprob": -0.11342033658708844, "compression_ratio": 1.4598930481283423, "no_speech_prob": 5.801478255307302e-05}, {"id": 163, "seek": 81484, "start": 833.84, "end": 840.52, "text": " And this by default displays in your time zone but you can also choose to display it", "tokens": [400, 341, 538, 7576, 20119, 294, 428, 565, 6668, 457, 291, 393, 611, 2826, 281, 4674, 309], "temperature": 0.0, "avg_logprob": -0.11342033658708844, "compression_ratio": 1.4598930481283423, "no_speech_prob": 5.801478255307302e-05}, {"id": 164, "seek": 81484, "start": 840.52, "end": 842.0, "text": " at time zone.", "tokens": [412, 565, 6668, 13], "temperature": 0.0, "avg_logprob": -0.11342033658708844, "compression_ratio": 1.4598930481283423, "no_speech_prob": 5.801478255307302e-05}, {"id": 165, "seek": 84200, "start": 842.0, "end": 848.96, "text": " So if you've inserted something which is midnight UTC and you want it in Eastern time", "tokens": [407, 498, 291, 600, 27992, 746, 597, 307, 19006, 624, 18238, 293, 291, 528, 309, 294, 12901, 565], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 166, "seek": 84200, "start": 848.96, "end": 851.2, "text": " that would automatically convert it.", "tokens": [300, 576, 6772, 7620, 309, 13], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 167, "seek": 84200, "start": 851.2, "end": 857.24, "text": " If you said at time zone Eastern it would automatically convert it to minus five hours", "tokens": [759, 291, 848, 412, 565, 6668, 12901, 309, 576, 6772, 7620, 309, 281, 3175, 1732, 2496], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 168, "seek": 84200, "start": 857.24, "end": 863.8, "text": " or minus six hours if there's a DST difference between the two time zones.", "tokens": [420, 3175, 2309, 2496, 498, 456, 311, 257, 413, 6840, 2649, 1296, 264, 732, 565, 16025, 13], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 169, "seek": 84200, "start": 863.8, "end": 866.16, "text": " So you don't have to worry about the conversions.", "tokens": [407, 291, 500, 380, 362, 281, 3292, 466, 264, 42256, 13], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 170, "seek": 84200, "start": 866.16, "end": 870.48, "text": " Just use timestamp with time zone and you won't have to worry about it.", "tokens": [1449, 764, 49108, 1215, 365, 565, 6668, 293, 291, 1582, 380, 362, 281, 3292, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.09892591803964942, "compression_ratio": 1.8044444444444445, "no_speech_prob": 1.8029251805273816e-05}, {"id": 171, "seek": 87048, "start": 870.48, "end": 876.08, "text": " Even if you don't need time zone calculations and all of your operations and all of your", "tokens": [2754, 498, 291, 500, 380, 643, 565, 6668, 20448, 293, 439, 295, 428, 7705, 293, 439, 295, 428], "temperature": 0.0, "avg_logprob": -0.0871213109869706, "compression_ratio": 1.7304347826086957, "no_speech_prob": 8.308243559440598e-05}, {"id": 172, "seek": 87048, "start": 876.08, "end": 881.36, "text": " queries are coming from within the same time zone it's better to use this.", "tokens": [24109, 366, 1348, 490, 1951, 264, 912, 565, 6668, 309, 311, 1101, 281, 764, 341, 13], "temperature": 0.0, "avg_logprob": -0.0871213109869706, "compression_ratio": 1.7304347826086957, "no_speech_prob": 8.308243559440598e-05}, {"id": 173, "seek": 87048, "start": 881.36, "end": 885.64, "text": " Because then when you have to export your data and give it to someone else they know", "tokens": [1436, 550, 562, 291, 362, 281, 10725, 428, 1412, 293, 976, 309, 281, 1580, 1646, 436, 458], "temperature": 0.0, "avg_logprob": -0.0871213109869706, "compression_ratio": 1.7304347826086957, "no_speech_prob": 8.308243559440598e-05}, {"id": 174, "seek": 87048, "start": 885.64, "end": 890.64, "text": " exactly what this means even if they don't know your time zone.", "tokens": [2293, 437, 341, 1355, 754, 498, 436, 500, 380, 458, 428, 565, 6668, 13], "temperature": 0.0, "avg_logprob": -0.0871213109869706, "compression_ratio": 1.7304347826086957, "no_speech_prob": 8.308243559440598e-05}, {"id": 175, "seek": 87048, "start": 890.64, "end": 898.44, "text": " So also if you've decided to only use UTC throughout your organization then don't use", "tokens": [407, 611, 498, 291, 600, 3047, 281, 787, 764, 624, 18238, 3710, 428, 4475, 550, 500, 380, 764], "temperature": 0.0, "avg_logprob": -0.0871213109869706, "compression_ratio": 1.7304347826086957, "no_speech_prob": 8.308243559440598e-05}, {"id": 176, "seek": 89844, "start": 898.44, "end": 903.12, "text": " timestamp to store UTC because Postgres doesn't know it is UTC.", "tokens": [49108, 1215, 281, 3531, 624, 18238, 570, 10223, 45189, 1177, 380, 458, 309, 307, 624, 18238, 13], "temperature": 0.0, "avg_logprob": -0.13327324390411377, "compression_ratio": 1.4497041420118344, "no_speech_prob": 3.7563535443041474e-05}, {"id": 177, "seek": 89844, "start": 903.12, "end": 911.08, "text": " It just sees a local time and doesn't know where it is so it can't convert it.", "tokens": [467, 445, 8194, 257, 2654, 565, 293, 1177, 380, 458, 689, 309, 307, 370, 309, 393, 380, 7620, 309, 13], "temperature": 0.0, "avg_logprob": -0.13327324390411377, "compression_ratio": 1.4497041420118344, "no_speech_prob": 3.7563535443041474e-05}, {"id": 178, "seek": 89844, "start": 911.08, "end": 921.32, "text": " Now something less frequently used is the type time TZ or time with time zone.", "tokens": [823, 746, 1570, 10374, 1143, 307, 264, 2010, 565, 314, 57, 420, 565, 365, 565, 6668, 13], "temperature": 0.0, "avg_logprob": -0.13327324390411377, "compression_ratio": 1.4497041420118344, "no_speech_prob": 3.7563535443041474e-05}, {"id": 179, "seek": 89844, "start": 921.32, "end": 927.24, "text": " That is a quirk of SQL.", "tokens": [663, 307, 257, 421, 18610, 295, 19200, 13], "temperature": 0.0, "avg_logprob": -0.13327324390411377, "compression_ratio": 1.4497041420118344, "no_speech_prob": 3.7563535443041474e-05}, {"id": 180, "seek": 92724, "start": 927.24, "end": 932.84, "text": " It is there because the standard specifies it and that's the only way Postgres implements.", "tokens": [467, 307, 456, 570, 264, 3832, 1608, 11221, 309, 293, 300, 311, 264, 787, 636, 10223, 45189, 704, 17988, 13], "temperature": 0.0, "avg_logprob": -0.1031604330223727, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00010026230302173644}, {"id": 181, "seek": 92724, "start": 932.84, "end": 936.12, "text": " That's the only reason why Postgres has implemented this.", "tokens": [663, 311, 264, 787, 1778, 983, 10223, 45189, 575, 12270, 341, 13], "temperature": 0.0, "avg_logprob": -0.1031604330223727, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00010026230302173644}, {"id": 182, "seek": 92724, "start": 936.12, "end": 942.64, "text": " So time with time zone has questionable usefulness.", "tokens": [407, 565, 365, 565, 6668, 575, 37158, 4420, 1287, 13], "temperature": 0.0, "avg_logprob": -0.1031604330223727, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00010026230302173644}, {"id": 183, "seek": 92724, "start": 942.64, "end": 948.28, "text": " Because time zones in the real world have little meaning without dates.", "tokens": [1436, 565, 16025, 294, 264, 957, 1002, 362, 707, 3620, 1553, 11691, 13], "temperature": 0.0, "avg_logprob": -0.1031604330223727, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00010026230302173644}, {"id": 184, "seek": 92724, "start": 948.28, "end": 954.6, "text": " It can be the middle of the day in Australia and the previous day here.", "tokens": [467, 393, 312, 264, 2808, 295, 264, 786, 294, 7060, 293, 264, 3894, 786, 510, 13], "temperature": 0.0, "avg_logprob": -0.1031604330223727, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00010026230302173644}, {"id": 185, "seek": 95460, "start": 954.6, "end": 962.76, "text": " So it will be times in some time zone but the date is different and you don't know it.", "tokens": [407, 309, 486, 312, 1413, 294, 512, 565, 6668, 457, 264, 4002, 307, 819, 293, 291, 500, 380, 458, 309, 13], "temperature": 0.0, "avg_logprob": -0.11796175915261974, "compression_ratio": 1.5988700564971752, "no_speech_prob": 2.8768925403710455e-05}, {"id": 186, "seek": 95460, "start": 962.76, "end": 971.2, "text": " So the offset can vary with daily savings time and that's a bad thing because time TZ", "tokens": [407, 264, 18687, 393, 10559, 365, 5212, 13454, 565, 293, 300, 311, 257, 1578, 551, 570, 565, 314, 57], "temperature": 0.0, "avg_logprob": -0.11796175915261974, "compression_ratio": 1.5988700564971752, "no_speech_prob": 2.8768925403710455e-05}, {"id": 187, "seek": 95460, "start": 971.2, "end": 980.8000000000001, "text": " has a fixed offset and that makes it impossible to do date calculations across daily savings", "tokens": [575, 257, 6806, 18687, 293, 300, 1669, 309, 6243, 281, 360, 4002, 20448, 2108, 5212, 13454], "temperature": 0.0, "avg_logprob": -0.11796175915261974, "compression_ratio": 1.5988700564971752, "no_speech_prob": 2.8768925403710455e-05}, {"id": 188, "seek": 95460, "start": 980.8000000000001, "end": 983.44, "text": " times boundaries.", "tokens": [1413, 13180, 13], "temperature": 0.0, "avg_logprob": -0.11796175915261974, "compression_ratio": 1.5988700564971752, "no_speech_prob": 2.8768925403710455e-05}, {"id": 189, "seek": 98344, "start": 983.44, "end": 987.8000000000001, "text": " So just use timestamp TZ instead.", "tokens": [407, 445, 764, 49108, 1215, 314, 57, 2602, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 190, "seek": 98344, "start": 987.8000000000001, "end": 989.2, "text": " There's also a space saving.", "tokens": [821, 311, 611, 257, 1901, 6816, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 191, "seek": 98344, "start": 989.2, "end": 991.44, "text": " For some reason this thing is 12 bytes.", "tokens": [1171, 512, 1778, 341, 551, 307, 2272, 36088, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 192, "seek": 98344, "start": 991.44, "end": 993.5600000000001, "text": " I don't know why.", "tokens": [286, 500, 380, 458, 983, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 193, "seek": 98344, "start": 993.5600000000001, "end": 995.1600000000001, "text": " A timestamp is 8 bytes.", "tokens": [316, 49108, 1215, 307, 1649, 36088, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 194, "seek": 98344, "start": 995.1600000000001, "end": 1002.5600000000001, "text": " So just use timestamp TZ or timestamp with time zone instead.", "tokens": [407, 445, 764, 49108, 1215, 314, 57, 420, 49108, 1215, 365, 565, 6668, 2602, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 195, "seek": 98344, "start": 1002.5600000000001, "end": 1005.6800000000001, "text": " Current underscore time is another favorite.", "tokens": [15629, 37556, 565, 307, 1071, 2954, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 196, "seek": 98344, "start": 1005.6800000000001, "end": 1009.6400000000001, "text": " Current time is timestamp TZ.", "tokens": [15629, 565, 307, 49108, 1215, 314, 57, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 197, "seek": 98344, "start": 1009.6400000000001, "end": 1012.48, "text": " So we just said don't use timestamp TZ.", "tokens": [407, 321, 445, 848, 500, 380, 764, 49108, 1215, 314, 57, 13], "temperature": 0.0, "avg_logprob": -0.17370182037353515, "compression_ratio": 1.7833333333333334, "no_speech_prob": 3.0208369935280643e-05}, {"id": 198, "seek": 101248, "start": 1012.48, "end": 1018.72, "text": " Just use current timestamp or the function now to get the current time with the time", "tokens": [1449, 764, 2190, 49108, 1215, 420, 264, 2445, 586, 281, 483, 264, 2190, 565, 365, 264, 565], "temperature": 0.0, "avg_logprob": -0.14845559566835814, "compression_ratio": 1.8902439024390243, "no_speech_prob": 5.0560680392663926e-05}, {"id": 199, "seek": 101248, "start": 1018.72, "end": 1024.88, "text": " zone and local timestamp that returns the timestamp if you just want to know what time", "tokens": [6668, 293, 2654, 49108, 1215, 300, 11247, 264, 49108, 1215, 498, 291, 445, 528, 281, 458, 437, 565], "temperature": 0.0, "avg_logprob": -0.14845559566835814, "compression_ratio": 1.8902439024390243, "no_speech_prob": 5.0560680392663926e-05}, {"id": 200, "seek": 101248, "start": 1024.88, "end": 1029.52, "text": " it is here in your local time zone.", "tokens": [309, 307, 510, 294, 428, 2654, 565, 6668, 13], "temperature": 0.0, "avg_logprob": -0.14845559566835814, "compression_ratio": 1.8902439024390243, "no_speech_prob": 5.0560680392663926e-05}, {"id": 201, "seek": 101248, "start": 1029.52, "end": 1037.68, "text": " Equally you can use current date for date and local time for the local time.", "tokens": [15624, 379, 291, 393, 764, 2190, 4002, 337, 4002, 293, 2654, 565, 337, 264, 2654, 565, 13], "temperature": 0.0, "avg_logprob": -0.14845559566835814, "compression_ratio": 1.8902439024390243, "no_speech_prob": 5.0560680392663926e-05}, {"id": 202, "seek": 101248, "start": 1037.68, "end": 1040.04, "text": " These are not timestamps.", "tokens": [1981, 366, 406, 49108, 23150, 13], "temperature": 0.0, "avg_logprob": -0.14845559566835814, "compression_ratio": 1.8902439024390243, "no_speech_prob": 5.0560680392663926e-05}, {"id": 203, "seek": 104004, "start": 1040.04, "end": 1044.68, "text": " These are dates sometimes.", "tokens": [1981, 366, 11691, 2171, 13], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 204, "seek": 104004, "start": 1044.68, "end": 1048.2, "text": " This is one of my favorites.", "tokens": [639, 307, 472, 295, 452, 16907, 13], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 205, "seek": 104004, "start": 1048.2, "end": 1053.56, "text": " This morning Andres showed that many people when they want to store a string they just", "tokens": [639, 2446, 400, 495, 4712, 300, 867, 561, 562, 436, 528, 281, 3531, 257, 6798, 436, 445], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 206, "seek": 104004, "start": 1053.56, "end": 1057.48, "text": " create car 255.", "tokens": [1884, 1032, 3552, 20, 13], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 207, "seek": 104004, "start": 1057.48, "end": 1061.44, "text": " That should take care of it.", "tokens": [663, 820, 747, 1127, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 208, "seek": 104004, "start": 1061.44, "end": 1063.48, "text": " What is the problem with that?", "tokens": [708, 307, 264, 1154, 365, 300, 30], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 209, "seek": 104004, "start": 1063.48, "end": 1068.36, "text": " It's that this is padded with white space up to n.", "tokens": [467, 311, 300, 341, 307, 6887, 9207, 365, 2418, 1901, 493, 281, 297, 13], "temperature": 0.0, "avg_logprob": -0.14427110476371569, "compression_ratio": 1.4619565217391304, "no_speech_prob": 7.593180635012686e-05}, {"id": 210, "seek": 106836, "start": 1068.36, "end": 1077.12, "text": " So if you create a car 255 and you insert a single character to store then that inserts", "tokens": [407, 498, 291, 1884, 257, 1032, 3552, 20, 293, 291, 8969, 257, 2167, 2517, 281, 3531, 550, 300, 49163], "temperature": 0.0, "avg_logprob": -0.1259522895290427, "compression_ratio": 1.6476683937823835, "no_speech_prob": 2.463913733663503e-05}, {"id": 211, "seek": 106836, "start": 1077.12, "end": 1085.7199999999998, "text": " 254 blank spaces after it in the database for no reason.", "tokens": [3552, 19, 8247, 7673, 934, 309, 294, 264, 8149, 337, 572, 1778, 13], "temperature": 0.0, "avg_logprob": -0.1259522895290427, "compression_ratio": 1.6476683937823835, "no_speech_prob": 2.463913733663503e-05}, {"id": 212, "seek": 106836, "start": 1085.7199999999998, "end": 1091.52, "text": " The padding spaces are useless because they are ignored when comparing but equally they", "tokens": [440, 39562, 7673, 366, 14115, 570, 436, 366, 19735, 562, 15763, 457, 12309, 436], "temperature": 0.0, "avg_logprob": -0.1259522895290427, "compression_ratio": 1.6476683937823835, "no_speech_prob": 2.463913733663503e-05}, {"id": 213, "seek": 106836, "start": 1091.52, "end": 1097.56, "text": " create a problem because they don't work for like expressions and they don't work for", "tokens": [1884, 257, 1154, 570, 436, 500, 380, 589, 337, 411, 15277, 293, 436, 500, 380, 589, 337], "temperature": 0.0, "avg_logprob": -0.1259522895290427, "compression_ratio": 1.6476683937823835, "no_speech_prob": 2.463913733663503e-05}, {"id": 214, "seek": 109756, "start": 1097.56, "end": 1104.08, "text": " regular expressions because a regex will see the spaces.", "tokens": [3890, 15277, 570, 257, 319, 432, 87, 486, 536, 264, 7673, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 215, "seek": 109756, "start": 1104.08, "end": 1105.2, "text": " So it's inconsistent.", "tokens": [407, 309, 311, 36891, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 216, "seek": 109756, "start": 1105.2, "end": 1107.44, "text": " So just don't use it.", "tokens": [407, 445, 500, 380, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 217, "seek": 109756, "start": 1107.44, "end": 1113.48, "text": " And anyway you're not gaining anything by specifying a limit in the number of characters", "tokens": [400, 4033, 291, 434, 406, 19752, 1340, 538, 1608, 5489, 257, 4948, 294, 264, 1230, 295, 4342], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 218, "seek": 109756, "start": 1113.48, "end": 1118.3999999999999, "text": " because it's not even stored as a fixed width field in Postgres.", "tokens": [570, 309, 311, 406, 754, 12187, 382, 257, 6806, 11402, 2519, 294, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 219, "seek": 109756, "start": 1118.3999999999999, "end": 1121.12, "text": " The storage is exactly the same.", "tokens": [440, 6725, 307, 2293, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 220, "seek": 109756, "start": 1121.12, "end": 1126.48, "text": " You're just wasting space by adding white space.", "tokens": [509, 434, 445, 20457, 1901, 538, 5127, 2418, 1901, 13], "temperature": 0.0, "avg_logprob": -0.13472627789786693, "compression_ratio": 1.5555555555555556, "no_speech_prob": 8.855231135385111e-05}, {"id": 221, "seek": 112648, "start": 1126.48, "end": 1133.1200000000001, "text": " Once wise it's even worse because Postgres is spending the extra time discarding those", "tokens": [3443, 10829, 309, 311, 754, 5324, 570, 10223, 45189, 307, 6434, 264, 2857, 565, 31597, 278, 729], "temperature": 0.0, "avg_logprob": -0.11406399840015476, "compression_ratio": 1.4883720930232558, "no_speech_prob": 3.917388312402181e-05}, {"id": 222, "seek": 112648, "start": 1133.1200000000001, "end": 1139.4, "text": " zeros when you're requesting a result that it's supposed to ignore those zeros.", "tokens": [35193, 562, 291, 434, 31937, 257, 1874, 300, 309, 311, 3442, 281, 11200, 729, 35193, 13], "temperature": 0.0, "avg_logprob": -0.11406399840015476, "compression_ratio": 1.4883720930232558, "no_speech_prob": 3.917388312402181e-05}, {"id": 223, "seek": 112648, "start": 1139.4, "end": 1152.72, "text": " So also another consequence of car n is that an index created for a character of n length", "tokens": [407, 611, 1071, 18326, 295, 1032, 297, 307, 300, 364, 8186, 2942, 337, 257, 2517, 295, 297, 4641], "temperature": 0.0, "avg_logprob": -0.11406399840015476, "compression_ratio": 1.4883720930232558, "no_speech_prob": 3.917388312402181e-05}, {"id": 224, "seek": 115272, "start": 1152.72, "end": 1160.72, "text": " may not work with a query that accepts a text parameter or a varchar parameter with no limit.", "tokens": [815, 406, 589, 365, 257, 14581, 300, 33538, 257, 2487, 13075, 420, 257, 371, 1178, 289, 13075, 365, 572, 4948, 13], "temperature": 0.0, "avg_logprob": -0.13028151730456985, "compression_ratio": 1.5748792270531402, "no_speech_prob": 1.5921601516311057e-05}, {"id": 225, "seek": 115272, "start": 1160.72, "end": 1166.72, "text": " The index is created for a different data type therefore it does not apply to that query.", "tokens": [440, 8186, 307, 2942, 337, 257, 819, 1412, 2010, 4412, 309, 775, 406, 3079, 281, 300, 14581, 13], "temperature": 0.0, "avg_logprob": -0.13028151730456985, "compression_ratio": 1.5748792270531402, "no_speech_prob": 1.5921601516311057e-05}, {"id": 226, "seek": 115272, "start": 1166.72, "end": 1173.3600000000001, "text": " So also limits are bad always.", "tokens": [407, 611, 10406, 366, 1578, 1009, 13], "temperature": 0.0, "avg_logprob": -0.13028151730456985, "compression_ratio": 1.5748792270531402, "no_speech_prob": 1.5921601516311057e-05}, {"id": 227, "seek": 115272, "start": 1173.3600000000001, "end": 1175.48, "text": " Limits on strings are bad.", "tokens": [16406, 1208, 322, 13985, 366, 1578, 13], "temperature": 0.0, "avg_logprob": -0.13028151730456985, "compression_ratio": 1.5748792270531402, "no_speech_prob": 1.5921601516311057e-05}, {"id": 228, "seek": 115272, "start": 1175.48, "end": 1179.84, "text": " If you create a company name and you think 50 characters are enough I don't know any", "tokens": [759, 291, 1884, 257, 2237, 1315, 293, 291, 519, 2625, 4342, 366, 1547, 286, 500, 380, 458, 604], "temperature": 0.0, "avg_logprob": -0.13028151730456985, "compression_ratio": 1.5748792270531402, "no_speech_prob": 1.5921601516311057e-05}, {"id": 229, "seek": 117984, "start": 1179.84, "end": 1184.72, "text": " company name that is more than 50 characters and then you get a customer that's called", "tokens": [2237, 1315, 300, 307, 544, 813, 2625, 4342, 293, 550, 291, 483, 257, 5474, 300, 311, 1219], "temperature": 0.0, "avg_logprob": -0.1525249481201172, "compression_ratio": 1.6180257510729614, "no_speech_prob": 4.536493725026958e-05}, {"id": 230, "seek": 117984, "start": 1184.72, "end": 1190.4399999999998, "text": " Petersons and Sons and Friends Bits and Parts Limited which is 54.", "tokens": [26028, 892, 293, 318, 892, 293, 14042, 363, 1208, 293, 4100, 82, 43231, 597, 307, 20793, 13], "temperature": 0.0, "avg_logprob": -0.1525249481201172, "compression_ratio": 1.6180257510729614, "no_speech_prob": 4.536493725026958e-05}, {"id": 231, "seek": 117984, "start": 1190.4399999999998, "end": 1195.52, "text": " And then you have to go and change the column width in the database and your DBA starts", "tokens": [400, 550, 291, 362, 281, 352, 293, 1319, 264, 7738, 11402, 294, 264, 8149, 293, 428, 413, 9295, 3719], "temperature": 0.0, "avg_logprob": -0.1525249481201172, "compression_ratio": 1.6180257510729614, "no_speech_prob": 4.536493725026958e-05}, {"id": 232, "seek": 117984, "start": 1195.52, "end": 1205.48, "text": " swearing even though they selected the character length themselves because they were told to.", "tokens": [2484, 1921, 754, 1673, 436, 8209, 264, 2517, 4641, 2969, 570, 436, 645, 1907, 281, 13], "temperature": 0.0, "avg_logprob": -0.1525249481201172, "compression_ratio": 1.6180257510729614, "no_speech_prob": 4.536493725026958e-05}, {"id": 233, "seek": 117984, "start": 1205.48, "end": 1208.1599999999999, "text": " Also it's useless for restricting length.", "tokens": [2743, 309, 311, 14115, 337, 1472, 37714, 4641, 13], "temperature": 0.0, "avg_logprob": -0.1525249481201172, "compression_ratio": 1.6180257510729614, "no_speech_prob": 4.536493725026958e-05}, {"id": 234, "seek": 120816, "start": 1208.16, "end": 1214.3600000000001, "text": " It throws an error okay but it doesn't make sure that the length is exactly what you want.", "tokens": [467, 19251, 364, 6713, 1392, 457, 309, 1177, 380, 652, 988, 300, 264, 4641, 307, 2293, 437, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.1089880274630141, "compression_ratio": 1.785, "no_speech_prob": 0.000160085444804281}, {"id": 235, "seek": 120816, "start": 1214.3600000000001, "end": 1224.8400000000001, "text": " So if you want a four digit pin and you enter it as car four that is not enforced if someone", "tokens": [407, 498, 291, 528, 257, 1451, 14293, 5447, 293, 291, 3242, 309, 382, 1032, 1451, 300, 307, 406, 40953, 498, 1580], "temperature": 0.0, "avg_logprob": -0.1089880274630141, "compression_ratio": 1.785, "no_speech_prob": 0.000160085444804281}, {"id": 236, "seek": 120816, "start": 1224.8400000000001, "end": 1226.2, "text": " enters a three digit pin.", "tokens": [18780, 257, 1045, 14293, 5447, 13], "temperature": 0.0, "avg_logprob": -0.1089880274630141, "compression_ratio": 1.785, "no_speech_prob": 0.000160085444804281}, {"id": 237, "seek": 120816, "start": 1226.2, "end": 1229.4, "text": " You need an extra check so it doesn't guarantee anything.", "tokens": [509, 643, 364, 2857, 1520, 370, 309, 1177, 380, 10815, 1340, 13], "temperature": 0.0, "avg_logprob": -0.1089880274630141, "compression_ratio": 1.785, "no_speech_prob": 0.000160085444804281}, {"id": 238, "seek": 120816, "start": 1229.4, "end": 1235.8000000000002, "text": " So to restrict length and make sure that the length of what everyone enters is consistent", "tokens": [407, 281, 7694, 4641, 293, 652, 988, 300, 264, 4641, 295, 437, 1518, 18780, 307, 8398], "temperature": 0.0, "avg_logprob": -0.1089880274630141, "compression_ratio": 1.785, "no_speech_prob": 0.000160085444804281}, {"id": 239, "seek": 123580, "start": 1235.8, "end": 1240.84, "text": " then use a check and strain and enforce it.", "tokens": [550, 764, 257, 1520, 293, 14249, 293, 24825, 309, 13], "temperature": 0.0, "avg_logprob": -0.2002561131461722, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.00010962851956719533}, {"id": 240, "seek": 123580, "start": 1240.84, "end": 1243.96, "text": " So bottom line is just use text.", "tokens": [407, 2767, 1622, 307, 445, 764, 2487, 13], "temperature": 0.0, "avg_logprob": -0.2002561131461722, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.00010962851956719533}, {"id": 241, "seek": 123580, "start": 1243.96, "end": 1250.24, "text": " Text is the same as the confusingly named Varkar with no parentheses.", "tokens": [18643, 307, 264, 912, 382, 264, 13181, 356, 4926, 691, 809, 289, 365, 572, 34153, 13], "temperature": 0.0, "avg_logprob": -0.2002561131461722, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.00010962851956719533}, {"id": 242, "seek": 123580, "start": 1250.24, "end": 1252.12, "text": " So text.", "tokens": [407, 2487, 13], "temperature": 0.0, "avg_logprob": -0.2002561131461722, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.00010962851956719533}, {"id": 243, "seek": 123580, "start": 1252.12, "end": 1259.8799999999999, "text": " Money get away from the type money because it's useless.", "tokens": [16631, 483, 1314, 490, 264, 2010, 1460, 570, 309, 311, 14115, 13], "temperature": 0.0, "avg_logprob": -0.2002561131461722, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.00010962851956719533}, {"id": 244, "seek": 125988, "start": 1259.88, "end": 1266.2, "text": " It's fixed point which means that it doesn't handle fractions of a cent.", "tokens": [467, 311, 6806, 935, 597, 1355, 300, 309, 1177, 380, 4813, 36058, 295, 257, 1489, 13], "temperature": 0.0, "avg_logprob": -0.0874559128121154, "compression_ratio": 1.553191489361702, "no_speech_prob": 8.204530604416505e-05}, {"id": 245, "seek": 125988, "start": 1266.2, "end": 1272.0800000000002, "text": " So for finance that's very bad because you usually have subdivisions of the lowest denomination", "tokens": [407, 337, 10719, 300, 311, 588, 1578, 570, 291, 2673, 362, 45331, 4252, 295, 264, 12437, 1441, 46970], "temperature": 0.0, "avg_logprob": -0.0874559128121154, "compression_ratio": 1.553191489361702, "no_speech_prob": 8.204530604416505e-05}, {"id": 246, "seek": 125988, "start": 1272.0800000000002, "end": 1276.88, "text": " of currency whether it's a cent or a penny or whatever else.", "tokens": [295, 13346, 1968, 309, 311, 257, 1489, 420, 257, 24178, 420, 2035, 1646, 13], "temperature": 0.0, "avg_logprob": -0.0874559128121154, "compression_ratio": 1.553191489361702, "no_speech_prob": 8.204530604416505e-05}, {"id": 247, "seek": 125988, "start": 1276.88, "end": 1284.2800000000002, "text": " So the rounding may be off and that is a bad thing in finance.", "tokens": [407, 264, 48237, 815, 312, 766, 293, 300, 307, 257, 1578, 551, 294, 10719, 13], "temperature": 0.0, "avg_logprob": -0.0874559128121154, "compression_ratio": 1.553191489361702, "no_speech_prob": 8.204530604416505e-05}, {"id": 248, "seek": 128428, "start": 1284.28, "end": 1290.0, "text": " Another bad thing is that it doesn't know which currency it's storing the values for.", "tokens": [3996, 1578, 551, 307, 300, 309, 1177, 380, 458, 597, 13346, 309, 311, 26085, 264, 4190, 337, 13], "temperature": 0.0, "avg_logprob": -0.10697317123413086, "compression_ratio": 1.5365853658536586, "no_speech_prob": 3.585613740142435e-05}, {"id": 249, "seek": 128428, "start": 1290.0, "end": 1297.96, "text": " So it assumes that the currency is what you specified in LC monetary.", "tokens": [407, 309, 37808, 300, 264, 13346, 307, 437, 291, 22206, 294, 42198, 26388, 13], "temperature": 0.0, "avg_logprob": -0.10697317123413086, "compression_ratio": 1.5365853658536586, "no_speech_prob": 3.585613740142435e-05}, {"id": 250, "seek": 128428, "start": 1297.96, "end": 1302.48, "text": " And if you don't know what LC monetary is it's just going to assume whatever it finds", "tokens": [400, 498, 291, 500, 380, 458, 437, 42198, 26388, 307, 309, 311, 445, 516, 281, 6552, 2035, 309, 10704], "temperature": 0.0, "avg_logprob": -0.10697317123413086, "compression_ratio": 1.5365853658536586, "no_speech_prob": 3.585613740142435e-05}, {"id": 251, "seek": 128428, "start": 1302.48, "end": 1307.16, "text": " in your UNIX configuration or Linux.", "tokens": [294, 428, 8229, 21124, 11694, 420, 18734, 13], "temperature": 0.0, "avg_logprob": -0.10697317123413086, "compression_ratio": 1.5365853658536586, "no_speech_prob": 3.585613740142435e-05}, {"id": 252, "seek": 128428, "start": 1307.16, "end": 1310.12, "text": " Even worse it accepts garbage input.", "tokens": [2754, 5324, 309, 33538, 14150, 4846, 13], "temperature": 0.0, "avg_logprob": -0.10697317123413086, "compression_ratio": 1.5365853658536586, "no_speech_prob": 3.585613740142435e-05}, {"id": 253, "seek": 131012, "start": 1310.12, "end": 1317.8, "text": " So if you select that thing and convert it to money it casts it to whatever it believes", "tokens": [407, 498, 291, 3048, 300, 551, 293, 7620, 309, 281, 1460, 309, 41921, 309, 281, 2035, 309, 12307], "temperature": 0.0, "avg_logprob": -0.09600242216195633, "compression_ratio": 1.5257142857142858, "no_speech_prob": 3.868523708661087e-05}, {"id": 254, "seek": 131012, "start": 1317.8, "end": 1320.52, "text": " is right.", "tokens": [307, 558, 13], "temperature": 0.0, "avg_logprob": -0.09600242216195633, "compression_ratio": 1.5257142857142858, "no_speech_prob": 3.868523708661087e-05}, {"id": 255, "seek": 131012, "start": 1320.52, "end": 1330.84, "text": " And because my laptop was set up for UK pounds it assumed that that's UK pounds.", "tokens": [400, 570, 452, 10732, 390, 992, 493, 337, 7051, 8319, 309, 15895, 300, 300, 311, 7051, 8319, 13], "temperature": 0.0, "avg_logprob": -0.09600242216195633, "compression_ratio": 1.5257142857142858, "no_speech_prob": 3.868523708661087e-05}, {"id": 256, "seek": 131012, "start": 1330.84, "end": 1338.04, "text": " So just use numeric and store the currency in another column for that row with a foreign", "tokens": [407, 445, 764, 7866, 299, 293, 3531, 264, 13346, 294, 1071, 7738, 337, 300, 5386, 365, 257, 5329], "temperature": 0.0, "avg_logprob": -0.09600242216195633, "compression_ratio": 1.5257142857142858, "no_speech_prob": 3.868523708661087e-05}, {"id": 257, "seek": 133804, "start": 1338.04, "end": 1345.68, "text": " key so you know which currency that is.", "tokens": [2141, 370, 291, 458, 597, 13346, 300, 307, 13], "temperature": 0.0, "avg_logprob": -0.2043919184851268, "compression_ratio": 1.5347222222222223, "no_speech_prob": 7.336567068705335e-05}, {"id": 258, "seek": 133804, "start": 1345.68, "end": 1356.3999999999999, "text": " Serial how many people here use serial and like it.", "tokens": [4210, 831, 577, 867, 561, 510, 764, 17436, 293, 411, 309, 13], "temperature": 0.0, "avg_logprob": -0.2043919184851268, "compression_ratio": 1.5347222222222223, "no_speech_prob": 7.336567068705335e-05}, {"id": 259, "seek": 133804, "start": 1356.3999999999999, "end": 1359.68, "text": " So I will explain why you shouldn't like it.", "tokens": [407, 286, 486, 2903, 983, 291, 4659, 380, 411, 309, 13], "temperature": 0.0, "avg_logprob": -0.2043919184851268, "compression_ratio": 1.5347222222222223, "no_speech_prob": 7.336567068705335e-05}, {"id": 260, "seek": 133804, "start": 1359.68, "end": 1365.8799999999999, "text": " It used to be useful shorthand it is still useful shorthand but it's now less useful", "tokens": [467, 1143, 281, 312, 4420, 402, 2652, 474, 309, 307, 920, 4420, 402, 2652, 474, 457, 309, 311, 586, 1570, 4420], "temperature": 0.0, "avg_logprob": -0.2043919184851268, "compression_ratio": 1.5347222222222223, "no_speech_prob": 7.336567068705335e-05}, {"id": 261, "seek": 136588, "start": 1365.88, "end": 1374.2800000000002, "text": " than it used to be because it's non-SQL standard and it messes up the permissions when you", "tokens": [813, 309, 1143, 281, 312, 570, 309, 311, 2107, 12, 39934, 3832, 293, 309, 2082, 279, 493, 264, 32723, 562, 291], "temperature": 0.0, "avg_logprob": -0.11989436572111106, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.00013825752830598503}, {"id": 262, "seek": 136588, "start": 1374.2800000000002, "end": 1375.2800000000002, "text": " use it.", "tokens": [764, 309, 13], "temperature": 0.0, "avg_logprob": -0.11989436572111106, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.00013825752830598503}, {"id": 263, "seek": 136588, "start": 1375.2800000000002, "end": 1381.1200000000001, "text": " So permissions for sequences created using serial automatically created using the serial", "tokens": [407, 32723, 337, 22978, 2942, 1228, 17436, 6772, 2942, 1228, 264, 17436], "temperature": 0.0, "avg_logprob": -0.11989436572111106, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.00013825752830598503}, {"id": 264, "seek": 136588, "start": 1381.1200000000001, "end": 1386.64, "text": " keyword when creating a table they need to be managed separately from the table.", "tokens": [20428, 562, 4084, 257, 3199, 436, 643, 281, 312, 6453, 14759, 490, 264, 3199, 13], "temperature": 0.0, "avg_logprob": -0.11989436572111106, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.00013825752830598503}, {"id": 265, "seek": 136588, "start": 1386.64, "end": 1395.8400000000001, "text": " So a consequence of this disconnect is that create table like another table with a table", "tokens": [407, 257, 18326, 295, 341, 14299, 307, 300, 1884, 3199, 411, 1071, 3199, 365, 257, 3199], "temperature": 0.0, "avg_logprob": -0.11989436572111106, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.00013825752830598503}, {"id": 266, "seek": 139584, "start": 1395.84, "end": 1400.36, "text": " that uses serial will use the same sequence from the other table.", "tokens": [300, 4960, 17436, 486, 764, 264, 912, 8310, 490, 264, 661, 3199, 13], "temperature": 0.0, "avg_logprob": -0.12006543174622551, "compression_ratio": 1.5029239766081872, "no_speech_prob": 5.207908179727383e-05}, {"id": 267, "seek": 139584, "start": 1400.36, "end": 1404.0, "text": " And you don't want that usually.", "tokens": [400, 291, 500, 380, 528, 300, 2673, 13], "temperature": 0.0, "avg_logprob": -0.12006543174622551, "compression_ratio": 1.5029239766081872, "no_speech_prob": 5.207908179727383e-05}, {"id": 268, "seek": 139584, "start": 1404.0, "end": 1412.28, "text": " So instead we've come up with identity columns that are more verbose but much clearer in", "tokens": [407, 2602, 321, 600, 808, 493, 365, 6575, 13766, 300, 366, 544, 9595, 541, 457, 709, 26131, 294], "temperature": 0.0, "avg_logprob": -0.12006543174622551, "compression_ratio": 1.5029239766081872, "no_speech_prob": 5.207908179727383e-05}, {"id": 269, "seek": 139584, "start": 1412.28, "end": 1416.84, "text": " what they do because they're attached to the table that created them.", "tokens": [437, 436, 360, 570, 436, 434, 8570, 281, 264, 3199, 300, 2942, 552, 13], "temperature": 0.0, "avg_logprob": -0.12006543174622551, "compression_ratio": 1.5029239766081872, "no_speech_prob": 5.207908179727383e-05}, {"id": 270, "seek": 141684, "start": 1416.84, "end": 1428.28, "text": " So create table ID begin generated by default as identity and also primary key.", "tokens": [407, 1884, 3199, 7348, 1841, 10833, 538, 7576, 382, 6575, 293, 611, 6194, 2141, 13], "temperature": 0.0, "avg_logprob": -0.16032257364757024, "compression_ratio": 1.6107784431137724, "no_speech_prob": 3.207981353625655e-05}, {"id": 271, "seek": 141684, "start": 1428.28, "end": 1434.4399999999998, "text": " With an identity column you don't need to know the name of the sequence.", "tokens": [2022, 364, 6575, 7738, 291, 500, 380, 643, 281, 458, 264, 1315, 295, 264, 8310, 13], "temperature": 0.0, "avg_logprob": -0.16032257364757024, "compression_ratio": 1.6107784431137724, "no_speech_prob": 3.207981353625655e-05}, {"id": 272, "seek": 141684, "start": 1434.4399999999998, "end": 1441.6399999999999, "text": " So when you alter table tab, alter column ID, restart a thousand you don't need to know", "tokens": [407, 562, 291, 11337, 3199, 4421, 11, 11337, 7738, 7348, 11, 21022, 257, 4714, 291, 500, 380, 643, 281, 458], "temperature": 0.0, "avg_logprob": -0.16032257364757024, "compression_ratio": 1.6107784431137724, "no_speech_prob": 3.207981353625655e-05}, {"id": 273, "seek": 141684, "start": 1441.6399999999999, "end": 1443.32, "text": " what the sequence is called.", "tokens": [437, 264, 8310, 307, 1219, 13], "temperature": 0.0, "avg_logprob": -0.16032257364757024, "compression_ratio": 1.6107784431137724, "no_speech_prob": 3.207981353625655e-05}, {"id": 274, "seek": 144332, "start": 1443.32, "end": 1450.48, "text": " It's attached to the table so it will just restart the sequence from a thousand.", "tokens": [467, 311, 8570, 281, 264, 3199, 370, 309, 486, 445, 21022, 264, 8310, 490, 257, 4714, 13], "temperature": 0.0, "avg_logprob": -0.16224243474561115, "compression_ratio": 1.7217391304347827, "no_speech_prob": 7.580225792480633e-05}, {"id": 275, "seek": 144332, "start": 1450.48, "end": 1455.6399999999999, "text": " A side note here if your application is depending on a serial sequence to generate things like", "tokens": [316, 1252, 3637, 510, 498, 428, 3861, 307, 5413, 322, 257, 17436, 8310, 281, 8460, 721, 411], "temperature": 0.0, "avg_logprob": -0.16224243474561115, "compression_ratio": 1.7217391304347827, "no_speech_prob": 7.580225792480633e-05}, {"id": 276, "seek": 144332, "start": 1455.6399999999999, "end": 1461.36, "text": " receipt IDs, receipt numbers that is something you should generally generate in your application", "tokens": [33882, 48212, 11, 33882, 3547, 300, 307, 746, 291, 820, 5101, 8460, 294, 428, 3861], "temperature": 0.0, "avg_logprob": -0.16224243474561115, "compression_ratio": 1.7217391304347827, "no_speech_prob": 7.580225792480633e-05}, {"id": 277, "seek": 144332, "start": 1461.36, "end": 1466.56, "text": " to make sure that there are no gaps because there's no guarantees whatsoever that a sequence", "tokens": [281, 652, 988, 300, 456, 366, 572, 15031, 570, 456, 311, 572, 32567, 17076, 300, 257, 8310], "temperature": 0.0, "avg_logprob": -0.16224243474561115, "compression_ratio": 1.7217391304347827, "no_speech_prob": 7.580225792480633e-05}, {"id": 278, "seek": 144332, "start": 1466.56, "end": 1469.96, "text": " in Postgres will have no gaps.", "tokens": [294, 10223, 45189, 486, 362, 572, 15031, 13], "temperature": 0.0, "avg_logprob": -0.16224243474561115, "compression_ratio": 1.7217391304347827, "no_speech_prob": 7.580225792480633e-05}, {"id": 279, "seek": 146996, "start": 1469.96, "end": 1474.44, "text": " If you try to insert something and there's an error and you're all back, you've skipped", "tokens": [759, 291, 853, 281, 8969, 746, 293, 456, 311, 364, 6713, 293, 291, 434, 439, 646, 11, 291, 600, 30193], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 280, "seek": 146996, "start": 1474.44, "end": 1477.08, "text": " over that sequence number.", "tokens": [670, 300, 8310, 1230, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 281, "seek": 146996, "start": 1477.08, "end": 1478.6000000000001, "text": " Never goes back.", "tokens": [7344, 1709, 646, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 282, "seek": 146996, "start": 1478.6000000000001, "end": 1479.92, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 283, "seek": 146996, "start": 1479.92, "end": 1488.48, "text": " So now let's look at improper usage of Postgres features.", "tokens": [407, 586, 718, 311, 574, 412, 40651, 14924, 295, 10223, 45189, 4122, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 284, "seek": 146996, "start": 1488.48, "end": 1492.76, "text": " Character encoding SQL underscore ASCII.", "tokens": [36786, 43430, 19200, 37556, 7469, 34, 9503, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 285, "seek": 146996, "start": 1492.76, "end": 1498.0, "text": " It is not a database encoding that you should be using unless you know exactly what you're", "tokens": [467, 307, 406, 257, 8149, 43430, 300, 291, 820, 312, 1228, 5969, 291, 458, 2293, 437, 291, 434], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 286, "seek": 146996, "start": 1498.0, "end": 1499.64, "text": " doing.", "tokens": [884, 13], "temperature": 0.0, "avg_logprob": -0.16908606423272027, "compression_ratio": 1.4977578475336324, "no_speech_prob": 2.3885684640845284e-05}, {"id": 287, "seek": 149964, "start": 1499.64, "end": 1510.64, "text": " So things like storing text from the 1960s where no character sets other than ASCII.", "tokens": [407, 721, 411, 26085, 2487, 490, 264, 16157, 82, 689, 572, 2517, 6352, 661, 813, 7469, 34, 9503, 13], "temperature": 0.0, "avg_logprob": -0.14240382777320015, "compression_ratio": 1.5427135678391959, "no_speech_prob": 5.98676924710162e-05}, {"id": 288, "seek": 149964, "start": 1510.64, "end": 1518.6000000000001, "text": " When you specify that your database is encoding is SQL ASCII, you are skipping all encoding", "tokens": [1133, 291, 16500, 300, 428, 8149, 307, 43430, 307, 19200, 7469, 34, 9503, 11, 291, 366, 31533, 439, 43430], "temperature": 0.0, "avg_logprob": -0.14240382777320015, "compression_ratio": 1.5427135678391959, "no_speech_prob": 5.98676924710162e-05}, {"id": 289, "seek": 149964, "start": 1518.6000000000001, "end": 1521.5200000000002, "text": " conversion and all encoding validation.", "tokens": [14298, 293, 439, 43430, 24071, 13], "temperature": 0.0, "avg_logprob": -0.14240382777320015, "compression_ratio": 1.5427135678391959, "no_speech_prob": 5.98676924710162e-05}, {"id": 290, "seek": 149964, "start": 1521.5200000000002, "end": 1527.1200000000001, "text": " So it will accept just anything and it will assume that if your character has a byte value", "tokens": [407, 309, 486, 3241, 445, 1340, 293, 309, 486, 6552, 300, 498, 428, 2517, 575, 257, 40846, 2158], "temperature": 0.0, "avg_logprob": -0.14240382777320015, "compression_ratio": 1.5427135678391959, "no_speech_prob": 5.98676924710162e-05}, {"id": 291, "seek": 152712, "start": 1527.12, "end": 1537.6399999999999, "text": " from 0 to 127 that it's ASCII and if it's over 127 to 255, then it will not even try.", "tokens": [490, 1958, 281, 47561, 300, 309, 311, 7469, 34, 9503, 293, 498, 309, 311, 670, 47561, 281, 3552, 20, 11, 550, 309, 486, 406, 754, 853, 13], "temperature": 0.0, "avg_logprob": -0.1585041202910959, "compression_ratio": 1.4470588235294117, "no_speech_prob": 3.26734698319342e-05}, {"id": 292, "seek": 152712, "start": 1537.6399999999999, "end": 1541.56, "text": " It will just store it and not interpret it as anything.", "tokens": [467, 486, 445, 3531, 309, 293, 406, 7302, 309, 382, 1340, 13], "temperature": 0.0, "avg_logprob": -0.1585041202910959, "compression_ratio": 1.4470588235294117, "no_speech_prob": 3.26734698319342e-05}, {"id": 293, "seek": 152712, "start": 1541.56, "end": 1548.6799999999998, "text": " So it doesn't behave the same way as a character set setting and it's very bad that this is", "tokens": [407, 309, 1177, 380, 15158, 264, 912, 636, 382, 257, 2517, 992, 3287, 293, 309, 311, 588, 1578, 300, 341, 307], "temperature": 0.0, "avg_logprob": -0.1585041202910959, "compression_ratio": 1.4470588235294117, "no_speech_prob": 3.26734698319342e-05}, {"id": 294, "seek": 152712, "start": 1548.6799999999998, "end": 1550.12, "text": " the default.", "tokens": [264, 7576, 13], "temperature": 0.0, "avg_logprob": -0.1585041202910959, "compression_ratio": 1.4470588235294117, "no_speech_prob": 3.26734698319342e-05}, {"id": 295, "seek": 155012, "start": 1550.12, "end": 1558.28, "text": " Fortunately, most distributions, the packages that Devin makes for distributions have UTF-8", "tokens": [20652, 11, 881, 37870, 11, 264, 17401, 300, 1346, 4796, 1669, 337, 37870, 362, 624, 20527, 12, 23], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 296, "seek": 155012, "start": 1558.28, "end": 1559.8, "text": " as the default.", "tokens": [382, 264, 7576, 13], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 297, "seek": 155012, "start": 1559.8, "end": 1564.4799999999998, "text": " So that's a safer choice.", "tokens": [407, 300, 311, 257, 15856, 3922, 13], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 298, "seek": 155012, "start": 1564.4799999999998, "end": 1569.4399999999998, "text": " Also when you use SQL ASCII, you can end up storing a mixture of encodings because it", "tokens": [2743, 562, 291, 764, 19200, 7469, 34, 9503, 11, 291, 393, 917, 493, 26085, 257, 9925, 295, 2058, 378, 1109, 570, 309], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 299, "seek": 155012, "start": 1569.4399999999998, "end": 1572.32, "text": " doesn't check and validate anything.", "tokens": [1177, 380, 1520, 293, 29562, 1340, 13], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 300, "seek": 155012, "start": 1572.32, "end": 1575.4399999999998, "text": " So once you've done that, there's no going back.", "tokens": [407, 1564, 291, 600, 1096, 300, 11, 456, 311, 572, 516, 646, 13], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 301, "seek": 155012, "start": 1575.4399999999998, "end": 1579.52, "text": " There's no way to recover the original strings because you don't know which encoding they", "tokens": [821, 311, 572, 636, 281, 8114, 264, 3380, 13985, 570, 291, 500, 380, 458, 597, 43430, 436], "temperature": 0.0, "avg_logprob": -0.12998512158027062, "compression_ratio": 1.5612648221343874, "no_speech_prob": 3.477650534478016e-05}, {"id": 302, "seek": 157952, "start": 1579.52, "end": 1582.8, "text": " came from.", "tokens": [1361, 490, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 303, "seek": 157952, "start": 1582.8, "end": 1584.0, "text": " Rules.", "tokens": [38897, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 304, "seek": 157952, "start": 1584.0, "end": 1588.8799999999999, "text": " Rules are a thing that predates SQL in Postgres.", "tokens": [38897, 366, 257, 551, 300, 3852, 1024, 19200, 294, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 305, "seek": 157952, "start": 1588.8799999999999, "end": 1592.8799999999999, "text": " When it was just Postgres, not Postgres SQL.", "tokens": [1133, 309, 390, 445, 10223, 45189, 11, 406, 10223, 45189, 19200, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 306, "seek": 157952, "start": 1592.8799999999999, "end": 1600.6399999999999, "text": " It's a very old thing that has its specific purpose and its purpose is not to work like", "tokens": [467, 311, 257, 588, 1331, 551, 300, 575, 1080, 2685, 4334, 293, 1080, 4334, 307, 406, 281, 589, 411], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 307, "seek": 157952, "start": 1600.6399999999999, "end": 1602.48, "text": " a trigger.", "tokens": [257, 7875, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 308, "seek": 157952, "start": 1602.48, "end": 1607.36, "text": " Rules do not apply conditional logic.", "tokens": [38897, 360, 406, 3079, 27708, 9952, 13], "temperature": 0.0, "avg_logprob": -0.15309688207265493, "compression_ratio": 1.5403726708074534, "no_speech_prob": 7.11977481842041e-05}, {"id": 309, "seek": 160736, "start": 1607.36, "end": 1614.6799999999998, "text": " They rewrite your queries to modify them or add extra queries on top of them.", "tokens": [814, 28132, 428, 24109, 281, 16927, 552, 420, 909, 2857, 24109, 322, 1192, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.07979098370200709, "compression_ratio": 1.7180616740088106, "no_speech_prob": 4.0588849515188485e-05}, {"id": 310, "seek": 160736, "start": 1614.6799999999998, "end": 1621.3999999999999, "text": " So any rule that's non-trivial, so any rule that's not like a select or an update into", "tokens": [407, 604, 4978, 300, 311, 2107, 12, 83, 470, 22640, 11, 370, 604, 4978, 300, 311, 406, 411, 257, 3048, 420, 364, 5623, 666], "temperature": 0.0, "avg_logprob": -0.07979098370200709, "compression_ratio": 1.7180616740088106, "no_speech_prob": 4.0588849515188485e-05}, {"id": 311, "seek": 160736, "start": 1621.3999999999999, "end": 1626.52, "text": " a view is going to have unintended consequences because it's going to execute the original", "tokens": [257, 1910, 307, 516, 281, 362, 49902, 10098, 570, 309, 311, 516, 281, 14483, 264, 3380], "temperature": 0.0, "avg_logprob": -0.07979098370200709, "compression_ratio": 1.7180616740088106, "no_speech_prob": 4.0588849515188485e-05}, {"id": 312, "seek": 160736, "start": 1626.52, "end": 1631.8799999999999, "text": " query if it's an insert and then apply the rule and then generate another row potentially", "tokens": [14581, 498, 309, 311, 364, 8969, 293, 550, 3079, 264, 4978, 293, 550, 8460, 1071, 5386, 7263], "temperature": 0.0, "avg_logprob": -0.07979098370200709, "compression_ratio": 1.7180616740088106, "no_speech_prob": 4.0588849515188485e-05}, {"id": 313, "seek": 160736, "start": 1631.8799999999999, "end": 1634.4799999999998, "text": " or change the value of the row you inserted.", "tokens": [420, 1319, 264, 2158, 295, 264, 5386, 291, 27992, 13], "temperature": 0.0, "avg_logprob": -0.07979098370200709, "compression_ratio": 1.7180616740088106, "no_speech_prob": 4.0588849515188485e-05}, {"id": 314, "seek": 163448, "start": 1634.48, "end": 1641.28, "text": " So also, as we said, it's older than SQL in Postgres and it's non-SQL standard.", "tokens": [407, 611, 11, 382, 321, 848, 11, 309, 311, 4906, 813, 19200, 294, 10223, 45189, 293, 309, 311, 2107, 12, 39934, 3832, 13], "temperature": 0.0, "avg_logprob": -0.0999097502633427, "compression_ratio": 1.5196078431372548, "no_speech_prob": 2.7465908715385012e-05}, {"id": 315, "seek": 163448, "start": 1641.28, "end": 1648.48, "text": " So unless you're using rules to create views that you can write to, use a trigger instead.", "tokens": [407, 5969, 291, 434, 1228, 4474, 281, 1884, 6809, 300, 291, 393, 2464, 281, 11, 764, 257, 7875, 2602, 13], "temperature": 0.0, "avg_logprob": -0.0999097502633427, "compression_ratio": 1.5196078431372548, "no_speech_prob": 2.7465908715385012e-05}, {"id": 316, "seek": 163448, "start": 1648.48, "end": 1651.44, "text": " That's what you want to use.", "tokens": [663, 311, 437, 291, 528, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.0999097502633427, "compression_ratio": 1.5196078431372548, "no_speech_prob": 2.7465908715385012e-05}, {"id": 317, "seek": 163448, "start": 1651.44, "end": 1656.24, "text": " There's an exhaustive blog post by Depeche that you can read.", "tokens": [821, 311, 364, 14687, 488, 6968, 2183, 538, 1346, 494, 1876, 300, 291, 393, 1401, 13], "temperature": 0.0, "avg_logprob": -0.0999097502633427, "compression_ratio": 1.5196078431372548, "no_speech_prob": 2.7465908715385012e-05}, {"id": 318, "seek": 163448, "start": 1656.24, "end": 1661.8, "text": " You will find the link in the slides afterwards.", "tokens": [509, 486, 915, 264, 2113, 294, 264, 9788, 10543, 13], "temperature": 0.0, "avg_logprob": -0.0999097502633427, "compression_ratio": 1.5196078431372548, "no_speech_prob": 2.7465908715385012e-05}, {"id": 319, "seek": 166180, "start": 1661.8, "end": 1665.0, "text": " Table inheritance.", "tokens": [25535, 32122, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 320, "seek": 166180, "start": 1665.0, "end": 1673.84, "text": " Table inheritance is a relic of the time of object-oriented databases.", "tokens": [25535, 32122, 307, 257, 1039, 299, 295, 264, 565, 295, 2657, 12, 27414, 22380, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 321, "seek": 166180, "start": 1673.84, "end": 1679.24, "text": " If you remember, up on our website, we used to say that Postgres is an object-relational", "tokens": [759, 291, 1604, 11, 493, 322, 527, 3144, 11, 321, 1143, 281, 584, 300, 10223, 45189, 307, 364, 2657, 12, 4419, 1478], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 322, "seek": 166180, "start": 1679.24, "end": 1680.8799999999999, "text": " database.", "tokens": [8149, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 323, "seek": 166180, "start": 1680.8799999999999, "end": 1682.36, "text": " Maybe we still do.", "tokens": [2704, 321, 920, 360, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 324, "seek": 166180, "start": 1682.36, "end": 1683.36, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 325, "seek": 166180, "start": 1683.36, "end": 1687.76, "text": " But everything in Postgres is an object.", "tokens": [583, 1203, 294, 10223, 45189, 307, 364, 2657, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 326, "seek": 166180, "start": 1687.76, "end": 1688.76, "text": " Fine.", "tokens": [12024, 13], "temperature": 0.0, "avg_logprob": -0.25440118251702726, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0001688636839389801}, {"id": 327, "seek": 168876, "start": 1688.76, "end": 1696.4, "text": " That doesn't mean that table inheritance applies to tables because it seemed like a good idea", "tokens": [663, 1177, 380, 914, 300, 3199, 32122, 13165, 281, 8020, 570, 309, 6576, 411, 257, 665, 1558], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 328, "seek": 168876, "start": 1696.4, "end": 1701.64, "text": " before ORMs that you would have some sort of inheritance from a table type to another", "tokens": [949, 19654, 26386, 300, 291, 576, 362, 512, 1333, 295, 32122, 490, 257, 3199, 2010, 281, 1071], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 329, "seek": 168876, "start": 1701.64, "end": 1704.52, "text": " table type.", "tokens": [3199, 2010, 13], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 330, "seek": 168876, "start": 1704.52, "end": 1709.8799999999999, "text": " And the way you would write that was create table events, let's say, with an ID and some", "tokens": [400, 264, 636, 291, 576, 2464, 300, 390, 1884, 3199, 3931, 11, 718, 311, 584, 11, 365, 364, 7348, 293, 512], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 331, "seek": 168876, "start": 1709.8799999999999, "end": 1714.04, "text": " columns and then create a table meetings.", "tokens": [13766, 293, 550, 1884, 257, 3199, 8410, 13], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 332, "seek": 168876, "start": 1714.04, "end": 1716.68, "text": " Meetings are events, right?", "tokens": [22963, 1109, 366, 3931, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.144207789980132, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.00017857244529295713}, {"id": 333, "seek": 171668, "start": 1716.68, "end": 1723.64, "text": " And they have a scheduled time, but all the other characteristics of an event.", "tokens": [400, 436, 362, 257, 15678, 565, 11, 457, 439, 264, 661, 10891, 295, 364, 2280, 13], "temperature": 0.0, "avg_logprob": -0.12506159930162028, "compression_ratio": 1.538888888888889, "no_speech_prob": 0.00032644186285324395}, {"id": 334, "seek": 171668, "start": 1723.64, "end": 1729.68, "text": " So why not create table inherits the other table?", "tokens": [407, 983, 406, 1884, 3199, 9484, 1208, 264, 661, 3199, 30], "temperature": 0.0, "avg_logprob": -0.12506159930162028, "compression_ratio": 1.538888888888889, "no_speech_prob": 0.00032644186285324395}, {"id": 335, "seek": 171668, "start": 1729.68, "end": 1738.04, "text": " It's also used to implement partitioning in Postgres before Postgres 10, but is now incompatible", "tokens": [467, 311, 611, 1143, 281, 4445, 24808, 278, 294, 10223, 45189, 949, 10223, 45189, 1266, 11, 457, 307, 586, 40393, 267, 964], "temperature": 0.0, "avg_logprob": -0.12506159930162028, "compression_ratio": 1.538888888888889, "no_speech_prob": 0.00032644186285324395}, {"id": 336, "seek": 171668, "start": 1738.04, "end": 1741.76, "text": " with the new way of partitioning after Postgres 10.", "tokens": [365, 264, 777, 636, 295, 24808, 278, 934, 10223, 45189, 1266, 13], "temperature": 0.0, "avg_logprob": -0.12506159930162028, "compression_ratio": 1.538888888888889, "no_speech_prob": 0.00032644186285324395}, {"id": 337, "seek": 174176, "start": 1741.76, "end": 1750.8, "text": " So you cannot inherit from a partition's table, and you cannot add inheritance to a table", "tokens": [407, 291, 2644, 21389, 490, 257, 24808, 311, 3199, 11, 293, 291, 2644, 909, 32122, 281, 257, 3199], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 338, "seek": 174176, "start": 1750.8, "end": 1753.92, "text": " that's partitioned.", "tokens": [300, 311, 24808, 292, 13], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 339, "seek": 174176, "start": 1753.92, "end": 1759.48, "text": " So if you've got it in your database, there is a way to undo it, and I will just skim", "tokens": [407, 498, 291, 600, 658, 309, 294, 428, 8149, 11, 456, 307, 257, 636, 281, 23779, 309, 11, 293, 286, 486, 445, 1110, 332], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 340, "seek": 174176, "start": 1759.48, "end": 1760.8799999999999, "text": " over it.", "tokens": [670, 309, 13], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 341, "seek": 174176, "start": 1760.8799999999999, "end": 1765.52, "text": " You can replace it with a foreign key relationship between the two tables.", "tokens": [509, 393, 7406, 309, 365, 257, 5329, 2141, 2480, 1296, 264, 732, 8020, 13], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 342, "seek": 174176, "start": 1765.52, "end": 1768.4, "text": " And it works exactly the same way.", "tokens": [400, 309, 1985, 2293, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.12041531052700309, "compression_ratio": 1.5858585858585859, "no_speech_prob": 6.447600753745064e-05}, {"id": 343, "seek": 176840, "start": 1768.4, "end": 1778.5600000000002, "text": " So create table new meetings, like meetings.", "tokens": [407, 1884, 3199, 777, 8410, 11, 411, 8410, 13], "temperature": 0.0, "avg_logprob": -0.22776311986586628, "compression_ratio": 1.134020618556701, "no_speech_prob": 0.00011508986062835902}, {"id": 344, "seek": 176840, "start": 1778.5600000000002, "end": 1787.5600000000002, "text": " Table inheritance is scary.", "tokens": [25535, 32122, 307, 6958, 13], "temperature": 0.0, "avg_logprob": -0.22776311986586628, "compression_ratio": 1.134020618556701, "no_speech_prob": 0.00011508986062835902}, {"id": 345, "seek": 176840, "start": 1787.5600000000002, "end": 1790.48, "text": " I apologize.", "tokens": [286, 12328, 13], "temperature": 0.0, "avg_logprob": -0.22776311986586628, "compression_ratio": 1.134020618556701, "no_speech_prob": 0.00011508986062835902}, {"id": 346, "seek": 176840, "start": 1790.48, "end": 1792.1200000000001, "text": " It's not for young guys.", "tokens": [467, 311, 406, 337, 2037, 1074, 13], "temperature": 0.0, "avg_logprob": -0.22776311986586628, "compression_ratio": 1.134020618556701, "no_speech_prob": 0.00011508986062835902}, {"id": 347, "seek": 179212, "start": 1792.12, "end": 1798.6799999999998, "text": " So create table new meetings, like meetings, creates it in exactly the same way.", "tokens": [407, 1884, 3199, 777, 8410, 11, 411, 8410, 11, 7829, 309, 294, 2293, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.16419627701026807, "compression_ratio": 1.5433526011560694, "no_speech_prob": 6.980017496971413e-05}, {"id": 348, "seek": 179212, "start": 1798.6799999999998, "end": 1803.1999999999998, "text": " Alter table to add another column to store the foreign key relationship.", "tokens": [32608, 3199, 281, 909, 1071, 7738, 281, 3531, 264, 5329, 2141, 2480, 13], "temperature": 0.0, "avg_logprob": -0.16419627701026807, "compression_ratio": 1.5433526011560694, "no_speech_prob": 6.980017496971413e-05}, {"id": 349, "seek": 179212, "start": 1803.1999999999998, "end": 1810.12, "text": " So that should have been event ID, excuse me.", "tokens": [407, 300, 820, 362, 668, 2280, 7348, 11, 8960, 385, 13], "temperature": 0.0, "avg_logprob": -0.16419627701026807, "compression_ratio": 1.5433526011560694, "no_speech_prob": 6.980017496971413e-05}, {"id": 350, "seek": 179212, "start": 1810.12, "end": 1812.28, "text": " Anyway.", "tokens": [5684, 13], "temperature": 0.0, "avg_logprob": -0.16419627701026807, "compression_ratio": 1.5433526011560694, "no_speech_prob": 6.980017496971413e-05}, {"id": 351, "seek": 179212, "start": 1812.28, "end": 1816.6399999999999, "text": " So you copy the data from the old table into the new table.", "tokens": [407, 291, 5055, 264, 1412, 490, 264, 1331, 3199, 666, 264, 777, 3199, 13], "temperature": 0.0, "avg_logprob": -0.16419627701026807, "compression_ratio": 1.5433526011560694, "no_speech_prob": 6.980017496971413e-05}, {"id": 352, "seek": 181664, "start": 1816.64, "end": 1823.0, "text": " So insert into new meetings, select everything from meetings, including the ID.", "tokens": [407, 8969, 666, 777, 8410, 11, 3048, 1203, 490, 8410, 11, 3009, 264, 7348, 13], "temperature": 0.0, "avg_logprob": -0.10353471991721164, "compression_ratio": 1.6682027649769586, "no_speech_prob": 5.810503716929816e-05}, {"id": 353, "seek": 181664, "start": 1823.0, "end": 1828.1200000000001, "text": " You create the required constraints, triggers, et cetera, everything you need for the table,", "tokens": [509, 1884, 264, 4739, 18491, 11, 22827, 11, 1030, 11458, 11, 1203, 291, 643, 337, 264, 3199, 11], "temperature": 0.0, "avg_logprob": -0.10353471991721164, "compression_ratio": 1.6682027649769586, "no_speech_prob": 5.810503716929816e-05}, {"id": 354, "seek": 181664, "start": 1828.1200000000001, "end": 1831.16, "text": " new meetings.", "tokens": [777, 8410, 13], "temperature": 0.0, "avg_logprob": -0.10353471991721164, "compression_ratio": 1.6682027649769586, "no_speech_prob": 5.810503716929816e-05}, {"id": 355, "seek": 181664, "start": 1831.16, "end": 1836.44, "text": " And if you have a very large table, you can apply a very dirty hack that says that because", "tokens": [400, 498, 291, 362, 257, 588, 2416, 3199, 11, 291, 393, 3079, 257, 588, 9360, 10339, 300, 1619, 300, 570], "temperature": 0.0, "avg_logprob": -0.10353471991721164, "compression_ratio": 1.6682027649769586, "no_speech_prob": 5.810503716929816e-05}, {"id": 356, "seek": 181664, "start": 1836.44, "end": 1841.64, "text": " I know that the data in the other table is valid, I don't need to validate it again.", "tokens": [286, 458, 300, 264, 1412, 294, 264, 661, 3199, 307, 7363, 11, 286, 500, 380, 643, 281, 29562, 309, 797, 13], "temperature": 0.0, "avg_logprob": -0.10353471991721164, "compression_ratio": 1.6682027649769586, "no_speech_prob": 5.810503716929816e-05}, {"id": 357, "seek": 184164, "start": 1841.64, "end": 1849.6000000000001, "text": " So I add the constraint, the foreign key constraint, as not valid.", "tokens": [407, 286, 909, 264, 25534, 11, 264, 5329, 2141, 25534, 11, 382, 406, 7363, 13], "temperature": 0.0, "avg_logprob": -0.1343334841440959, "compression_ratio": 1.6633663366336633, "no_speech_prob": 1.5425963283632882e-05}, {"id": 358, "seek": 184164, "start": 1849.6000000000001, "end": 1853.0800000000002, "text": " If you're doing this in a live system that needs to be online while you're making this", "tokens": [759, 291, 434, 884, 341, 294, 257, 1621, 1185, 300, 2203, 281, 312, 2950, 1339, 291, 434, 1455, 341], "temperature": 0.0, "avg_logprob": -0.1343334841440959, "compression_ratio": 1.6633663366336633, "no_speech_prob": 1.5425963283632882e-05}, {"id": 359, "seek": 184164, "start": 1853.0800000000002, "end": 1858.2800000000002, "text": " change, create a trigger so that changes coming into meetings can go into new meetings as", "tokens": [1319, 11, 1884, 257, 7875, 370, 300, 2962, 1348, 666, 8410, 393, 352, 666, 777, 8410, 382], "temperature": 0.0, "avg_logprob": -0.1343334841440959, "compression_ratio": 1.6633663366336633, "no_speech_prob": 1.5425963283632882e-05}, {"id": 360, "seek": 184164, "start": 1858.2800000000002, "end": 1860.88, "text": " well.", "tokens": [731, 13], "temperature": 0.0, "avg_logprob": -0.1343334841440959, "compression_ratio": 1.6633663366336633, "no_speech_prob": 1.5425963283632882e-05}, {"id": 361, "seek": 184164, "start": 1860.88, "end": 1867.3600000000001, "text": " And the dirtiness of the hack comes in the fact that you should really not be touching", "tokens": [400, 264, 11483, 1324, 295, 264, 10339, 1487, 294, 264, 1186, 300, 291, 820, 534, 406, 312, 11175], "temperature": 0.0, "avg_logprob": -0.1343334841440959, "compression_ratio": 1.6633663366336633, "no_speech_prob": 1.5425963283632882e-05}, {"id": 362, "seek": 186736, "start": 1867.36, "end": 1872.8799999999999, "text": " PG catalog at all, but if you do know that your constraint is valid because the data", "tokens": [40975, 19746, 412, 439, 11, 457, 498, 291, 360, 458, 300, 428, 25534, 307, 7363, 570, 264, 1412], "temperature": 0.0, "avg_logprob": -0.12228536605834961, "compression_ratio": 1.638095238095238, "no_speech_prob": 5.9078367485199124e-05}, {"id": 363, "seek": 186736, "start": 1872.8799999999999, "end": 1878.32, "text": " in your existing table is valid, you just go ahead and update PG constraint set, constraint", "tokens": [294, 428, 6741, 3199, 307, 7363, 11, 291, 445, 352, 2286, 293, 5623, 40975, 25534, 992, 11, 25534], "temperature": 0.0, "avg_logprob": -0.12228536605834961, "compression_ratio": 1.638095238095238, "no_speech_prob": 5.9078367485199124e-05}, {"id": 364, "seek": 186736, "start": 1878.32, "end": 1888.3999999999999, "text": " validated equals true for that foreign key constraint we just created.", "tokens": [40693, 6915, 2074, 337, 300, 5329, 2141, 25534, 321, 445, 2942, 13], "temperature": 0.0, "avg_logprob": -0.12228536605834961, "compression_ratio": 1.638095238095238, "no_speech_prob": 5.9078367485199124e-05}, {"id": 365, "seek": 186736, "start": 1888.3999999999999, "end": 1897.1999999999998, "text": " And then finally, in order not to do lengthy locking when you're doing this, begin a transaction", "tokens": [400, 550, 2721, 11, 294, 1668, 406, 281, 360, 35374, 23954, 562, 291, 434, 884, 341, 11, 1841, 257, 14425], "temperature": 0.0, "avg_logprob": -0.12228536605834961, "compression_ratio": 1.638095238095238, "no_speech_prob": 5.9078367485199124e-05}, {"id": 366, "seek": 189720, "start": 1897.2, "end": 1901.8, "text": " in a code block, an anonymous code block.", "tokens": [294, 257, 3089, 3461, 11, 364, 24932, 3089, 3461, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 367, "seek": 189720, "start": 1901.8, "end": 1905.92, "text": " You alter table meetings, rename to old meetings.", "tokens": [509, 11337, 3199, 8410, 11, 36741, 281, 1331, 8410, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 368, "seek": 189720, "start": 1905.92, "end": 1912.16, "text": " Then you change new meetings that has exactly the same content now with an additional column.", "tokens": [1396, 291, 1319, 777, 8410, 300, 575, 2293, 264, 912, 2701, 586, 365, 364, 4497, 7738, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 369, "seek": 189720, "start": 1912.16, "end": 1916.8400000000001, "text": " You rename it to meetings, you drop the old table, and then you commit.", "tokens": [509, 36741, 309, 281, 8410, 11, 291, 3270, 264, 1331, 3199, 11, 293, 550, 291, 5599, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 370, "seek": 189720, "start": 1916.8400000000001, "end": 1922.6000000000001, "text": " Be careful, also create a trigger to insert update delete items in events as they get", "tokens": [879, 5026, 11, 611, 1884, 257, 7875, 281, 8969, 5623, 12097, 4754, 294, 3931, 382, 436, 483], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 371, "seek": 189720, "start": 1922.6000000000001, "end": 1926.0, "text": " changed in meetings.", "tokens": [3105, 294, 8410, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 372, "seek": 189720, "start": 1926.0, "end": 1927.0, "text": " And that's about it.", "tokens": [400, 300, 311, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.15407901449301808, "compression_ratio": 1.711111111111111, "no_speech_prob": 7.94966981629841e-05}, {"id": 373, "seek": 192700, "start": 1927.0, "end": 1933.2, "text": " You've gotten rid of your table inheritance.", "tokens": [509, 600, 5768, 3973, 295, 428, 3199, 32122, 13], "temperature": 0.0, "avg_logprob": -0.11757118114526721, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.0001579223753651604}, {"id": 374, "seek": 192700, "start": 1933.2, "end": 1938.64, "text": " Another very confusing thing, if you look at the Postgres documentation, it explains", "tokens": [3996, 588, 13181, 551, 11, 498, 291, 574, 412, 264, 10223, 45189, 14333, 11, 309, 13948], "temperature": 0.0, "avg_logprob": -0.11757118114526721, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.0001579223753651604}, {"id": 375, "seek": 192700, "start": 1938.64, "end": 1943.36, "text": " very well how to do this, but this is probably not what you want to do.", "tokens": [588, 731, 577, 281, 360, 341, 11, 457, 341, 307, 1391, 406, 437, 291, 528, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.11757118114526721, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.0001579223753651604}, {"id": 376, "seek": 192700, "start": 1943.36, "end": 1949.32, "text": " So partitioning by multiple keys is not partitioning on multiple levels, right?", "tokens": [407, 24808, 278, 538, 3866, 9317, 307, 406, 24808, 278, 322, 3866, 4358, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11757118114526721, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.0001579223753651604}, {"id": 377, "seek": 194932, "start": 1949.32, "end": 1958.6399999999999, "text": " So let's say we create a table transactions, and it has a location code and a timestamp", "tokens": [407, 718, 311, 584, 321, 1884, 257, 3199, 16856, 11, 293, 309, 575, 257, 4914, 3089, 293, 257, 49108, 1215], "temperature": 0.0, "avg_logprob": -0.13149323096642127, "compression_ratio": 1.641025641025641, "no_speech_prob": 9.961233445210382e-06}, {"id": 378, "seek": 194932, "start": 1958.6399999999999, "end": 1960.6399999999999, "text": " among other columns.", "tokens": [3654, 661, 13766, 13], "temperature": 0.0, "avg_logprob": -0.13149323096642127, "compression_ratio": 1.641025641025641, "no_speech_prob": 9.961233445210382e-06}, {"id": 379, "seek": 194932, "start": 1960.6399999999999, "end": 1966.76, "text": " And I want to partition it by timestamp and also location code, because I want a separate", "tokens": [400, 286, 528, 281, 24808, 309, 538, 49108, 1215, 293, 611, 4914, 3089, 11, 570, 286, 528, 257, 4994], "temperature": 0.0, "avg_logprob": -0.13149323096642127, "compression_ratio": 1.641025641025641, "no_speech_prob": 9.961233445210382e-06}, {"id": 380, "seek": 194932, "start": 1966.76, "end": 1972.36, "text": " table for each time period for each location code, right?", "tokens": [3199, 337, 1184, 565, 2896, 337, 1184, 4914, 3089, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13149323096642127, "compression_ratio": 1.641025641025641, "no_speech_prob": 9.961233445210382e-06}, {"id": 381, "seek": 197236, "start": 1972.36, "end": 1984.4799999999998, "text": " So I create table transactions, 202302A for values from timestamp 2023, so the first", "tokens": [407, 286, 1884, 3199, 16856, 11, 945, 17, 3446, 17, 32, 337, 4190, 490, 49108, 1215, 44377, 11, 370, 264, 700], "temperature": 0.0, "avg_logprob": -0.22469824010675604, "compression_ratio": 1.2419354838709677, "no_speech_prob": 3.0146975404932164e-05}, {"id": 382, "seek": 197236, "start": 1984.4799999999998, "end": 1993.04, "text": " of February to the first of March, and for location codes AAA to BAA.", "tokens": [295, 8711, 281, 264, 700, 295, 6129, 11, 293, 337, 4914, 14211, 34347, 281, 363, 5265, 13], "temperature": 0.0, "avg_logprob": -0.22469824010675604, "compression_ratio": 1.2419354838709677, "no_speech_prob": 3.0146975404932164e-05}, {"id": 383, "seek": 199304, "start": 1993.04, "end": 2003.68, "text": " Then I create the second partition, and 202302B is a partition of transactions for values from", "tokens": [1396, 286, 1884, 264, 1150, 24808, 11, 293, 945, 17, 3446, 17, 33, 307, 257, 24808, 295, 16856, 337, 4190, 490], "temperature": 0.0, "avg_logprob": -0.17327618977380177, "compression_ratio": 1.46875, "no_speech_prob": 3.164870577165857e-05}, {"id": 384, "seek": 199304, "start": 2003.68, "end": 2008.68, "text": " the same time period, but different locations, okay?", "tokens": [264, 912, 565, 2896, 11, 457, 819, 9253, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.17327618977380177, "compression_ratio": 1.46875, "no_speech_prob": 3.164870577165857e-05}, {"id": 385, "seek": 199304, "start": 2008.68, "end": 2019.92, "text": " So I'm using locations BAA to BZZ, error, partition transactions 202302B would overlap.", "tokens": [407, 286, 478, 1228, 9253, 363, 5265, 281, 363, 30108, 11, 6713, 11, 24808, 16856, 945, 17, 3446, 17, 33, 576, 19959, 13], "temperature": 0.0, "avg_logprob": -0.17327618977380177, "compression_ratio": 1.46875, "no_speech_prob": 3.164870577165857e-05}, {"id": 386, "seek": 201992, "start": 2019.92, "end": 2030.5800000000002, "text": " Why is that? because you're specifying limits for the keys within each partition.", "tokens": [1545, 307, 300, 30, 570, 291, 434, 1608, 5489, 10406, 337, 264, 9317, 1951, 1184, 24808, 13], "temperature": 0.0, "avg_logprob": -0.10193362690153576, "compression_ratio": 1.6275510204081634, "no_speech_prob": 5.135414903634228e-05}, {"id": 387, "seek": 201992, "start": 2030.5800000000002, "end": 2038.5600000000002, "text": " So it will accept values that satisfy those keys, but this is not subpartitioning.", "tokens": [407, 309, 486, 3241, 4190, 300, 19319, 729, 9317, 11, 457, 341, 307, 406, 1422, 6971, 849, 278, 13], "temperature": 0.0, "avg_logprob": -0.10193362690153576, "compression_ratio": 1.6275510204081634, "no_speech_prob": 5.135414903634228e-05}, {"id": 388, "seek": 201992, "start": 2038.5600000000002, "end": 2041.2, "text": " What you do want is subpartitioning.", "tokens": [708, 291, 360, 528, 307, 1422, 6971, 849, 278, 13], "temperature": 0.0, "avg_logprob": -0.10193362690153576, "compression_ratio": 1.6275510204081634, "no_speech_prob": 5.135414903634228e-05}, {"id": 389, "seek": 201992, "start": 2041.2, "end": 2046.4, "text": " You want to partition by one key, and then partition those tables by another key.", "tokens": [509, 528, 281, 24808, 538, 472, 2141, 11, 293, 550, 24808, 729, 8020, 538, 1071, 2141, 13], "temperature": 0.0, "avg_logprob": -0.10193362690153576, "compression_ratio": 1.6275510204081634, "no_speech_prob": 5.135414903634228e-05}, {"id": 390, "seek": 201992, "start": 2046.4, "end": 2048.36, "text": " That is the way to do it correctly.", "tokens": [663, 307, 264, 636, 281, 360, 309, 8944, 13], "temperature": 0.0, "avg_logprob": -0.10193362690153576, "compression_ratio": 1.6275510204081634, "no_speech_prob": 5.135414903634228e-05}, {"id": 391, "seek": 204836, "start": 2048.36, "end": 2052.84, "text": " So you create table transactions, location type, et cetera, et cetera, partition by", "tokens": [407, 291, 1884, 3199, 16856, 11, 4914, 2010, 11, 1030, 11458, 11, 1030, 11458, 11, 24808, 538], "temperature": 0.0, "avg_logprob": -0.1306230046532371, "compression_ratio": 1.883248730964467, "no_speech_prob": 2.4261358703370206e-05}, {"id": 392, "seek": 204836, "start": 2052.84, "end": 2056.6400000000003, "text": " range of timestamp first, okay?", "tokens": [3613, 295, 49108, 1215, 700, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.1306230046532371, "compression_ratio": 1.883248730964467, "no_speech_prob": 2.4261358703370206e-05}, {"id": 393, "seek": 204836, "start": 2056.6400000000003, "end": 2060.2000000000003, "text": " Because we want the first level of partitioning to be timestamp based.", "tokens": [1436, 321, 528, 264, 700, 1496, 295, 24808, 278, 281, 312, 49108, 1215, 2361, 13], "temperature": 0.0, "avg_logprob": -0.1306230046532371, "compression_ratio": 1.883248730964467, "no_speech_prob": 2.4261358703370206e-05}, {"id": 394, "seek": 204836, "start": 2060.2000000000003, "end": 2066.92, "text": " Then you create table partitions as transactions, excuse me, as a partition of transactions", "tokens": [1396, 291, 1884, 3199, 644, 2451, 382, 16856, 11, 8960, 385, 11, 382, 257, 24808, 295, 16856], "temperature": 0.0, "avg_logprob": -0.1306230046532371, "compression_ratio": 1.883248730964467, "no_speech_prob": 2.4261358703370206e-05}, {"id": 395, "seek": 204836, "start": 2066.92, "end": 2075.04, "text": " for values from the first of February to the first of March, and we choose hash partitioning", "tokens": [337, 4190, 490, 264, 700, 295, 8711, 281, 264, 700, 295, 6129, 11, 293, 321, 2826, 22019, 24808, 278], "temperature": 0.0, "avg_logprob": -0.1306230046532371, "compression_ratio": 1.883248730964467, "no_speech_prob": 2.4261358703370206e-05}, {"id": 396, "seek": 207504, "start": 2075.04, "end": 2078.96, "text": " within those partitions for the location code.", "tokens": [1951, 729, 644, 2451, 337, 264, 4914, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14018623034159342, "compression_ratio": 1.6836158192090396, "no_speech_prob": 5.634638364426792e-05}, {"id": 397, "seek": 207504, "start": 2078.96, "end": 2089.6, "text": " And all that means over there is that when I create the first partition, it's for values", "tokens": [400, 439, 300, 1355, 670, 456, 307, 300, 562, 286, 1884, 264, 700, 24808, 11, 309, 311, 337, 4190], "temperature": 0.0, "avg_logprob": -0.14018623034159342, "compression_ratio": 1.6836158192090396, "no_speech_prob": 5.634638364426792e-05}, {"id": 398, "seek": 207504, "start": 2089.6, "end": 2096.64, "text": " with modulus four remainder, zero means just divided by four equal parts.", "tokens": [365, 42287, 1451, 29837, 11, 4018, 1355, 445, 6666, 538, 1451, 2681, 3166, 13], "temperature": 0.0, "avg_logprob": -0.14018623034159342, "compression_ratio": 1.6836158192090396, "no_speech_prob": 5.634638364426792e-05}, {"id": 399, "seek": 207504, "start": 2096.64, "end": 2104.7599999999998, "text": " And that creates a partition, a table that is partitioned by both things, subpartitions.", "tokens": [400, 300, 7829, 257, 24808, 11, 257, 3199, 300, 307, 24808, 292, 538, 1293, 721, 11, 1422, 6971, 2451, 13], "temperature": 0.0, "avg_logprob": -0.14018623034159342, "compression_ratio": 1.6836158192090396, "no_speech_prob": 5.634638364426792e-05}, {"id": 400, "seek": 210476, "start": 2104.76, "end": 2109.6000000000004, "text": " Now let's talk a little bit about performance.", "tokens": [823, 718, 311, 751, 257, 707, 857, 466, 3389, 13], "temperature": 0.0, "avg_logprob": -0.11978988158397186, "compression_ratio": 1.682051282051282, "no_speech_prob": 0.00011554073716979474}, {"id": 401, "seek": 210476, "start": 2109.6000000000004, "end": 2119.32, "text": " One thing we see people doing all the time is using many more connections than they should", "tokens": [1485, 551, 321, 536, 561, 884, 439, 264, 565, 307, 1228, 867, 544, 9271, 813, 436, 820], "temperature": 0.0, "avg_logprob": -0.11978988158397186, "compression_ratio": 1.682051282051282, "no_speech_prob": 0.00011554073716979474}, {"id": 402, "seek": 210476, "start": 2119.32, "end": 2124.36, "text": " be, accepting many more connections into their Postgres server than they should be.", "tokens": [312, 11, 17391, 867, 544, 9271, 666, 641, 10223, 45189, 7154, 813, 436, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.11978988158397186, "compression_ratio": 1.682051282051282, "no_speech_prob": 0.00011554073716979474}, {"id": 403, "seek": 210476, "start": 2124.36, "end": 2129.6400000000003, "text": " The default is very sensible, it's at 100 connections.", "tokens": [440, 7576, 307, 588, 25380, 11, 309, 311, 412, 2319, 9271, 13], "temperature": 0.0, "avg_logprob": -0.11978988158397186, "compression_ratio": 1.682051282051282, "no_speech_prob": 0.00011554073716979474}, {"id": 404, "seek": 210476, "start": 2129.6400000000003, "end": 2133.8, "text": " We see things like 5,000 connections in production.", "tokens": [492, 536, 721, 411, 1025, 11, 1360, 9271, 294, 4265, 13], "temperature": 0.0, "avg_logprob": -0.11978988158397186, "compression_ratio": 1.682051282051282, "no_speech_prob": 0.00011554073716979474}, {"id": 405, "seek": 213380, "start": 2133.8, "end": 2141.52, "text": " And a server with 32 CPUs, a server with 32 CPUs, there's no way on Earth it's going", "tokens": [400, 257, 7154, 365, 8858, 13199, 82, 11, 257, 7154, 365, 8858, 13199, 82, 11, 456, 311, 572, 636, 322, 4755, 309, 311, 516], "temperature": 0.0, "avg_logprob": -0.14177635312080383, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.00015064845501910895}, {"id": 406, "seek": 213380, "start": 2141.52, "end": 2146.6800000000003, "text": " to do more than 32 things at the same time, right?", "tokens": [281, 360, 544, 813, 8858, 721, 412, 264, 912, 565, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14177635312080383, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.00015064845501910895}, {"id": 407, "seek": 213380, "start": 2146.6800000000003, "end": 2148.6800000000003, "text": " It's common sense, okay?", "tokens": [467, 311, 2689, 2020, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.14177635312080383, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.00015064845501910895}, {"id": 408, "seek": 213380, "start": 2148.6800000000003, "end": 2158.36, "text": " You may accept up to 100 things with 32 CPUs and interleave and overlap, that's fine.", "tokens": [509, 815, 3241, 493, 281, 2319, 721, 365, 8858, 13199, 82, 293, 728, 306, 946, 293, 19959, 11, 300, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.14177635312080383, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.00015064845501910895}, {"id": 409, "seek": 213380, "start": 2158.36, "end": 2162.7200000000003, "text": " Or one of the connections may be idle and you take advantage of that to serve the other", "tokens": [1610, 472, 295, 264, 9271, 815, 312, 30650, 293, 291, 747, 5002, 295, 300, 281, 4596, 264, 661], "temperature": 0.0, "avg_logprob": -0.14177635312080383, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.00015064845501910895}, {"id": 410, "seek": 216272, "start": 2162.72, "end": 2167.3599999999997, "text": " connections but 5,000 is excessive and we'll see why.", "tokens": [9271, 457, 1025, 11, 1360, 307, 22704, 293, 321, 603, 536, 983, 13], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 411, "seek": 216272, "start": 2167.3599999999997, "end": 2173.52, "text": " Because Postgres is process-based and for every new client connection it spawns a new", "tokens": [1436, 10223, 45189, 307, 1399, 12, 6032, 293, 337, 633, 777, 6423, 4984, 309, 17088, 82, 257, 777], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 412, "seek": 216272, "start": 2173.52, "end": 2174.7599999999998, "text": " process.", "tokens": [1399, 13], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 413, "seek": 216272, "start": 2174.7599999999998, "end": 2180.04, "text": " And a new process comes with inter-process communication through semaphores and shared", "tokens": [400, 257, 777, 1399, 1487, 365, 728, 12, 41075, 6101, 807, 4361, 13957, 2706, 293, 5507], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 414, "seek": 216272, "start": 2180.04, "end": 2183.52, "text": " memory and that has an overhead.", "tokens": [4675, 293, 300, 575, 364, 19922, 13], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 415, "seek": 216272, "start": 2183.52, "end": 2189.4399999999996, "text": " So every process you add to the system adds to that overhead and you run at the risk of", "tokens": [407, 633, 1399, 291, 909, 281, 264, 1185, 10860, 281, 300, 19922, 293, 291, 1190, 412, 264, 3148, 295], "temperature": 0.0, "avg_logprob": -0.15808906983793453, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.00016260768461506814}, {"id": 416, "seek": 218944, "start": 2189.44, "end": 2198.08, "text": " your CPU spending most of its time doing context switching between one process and the other.", "tokens": [428, 13199, 6434, 881, 295, 1080, 565, 884, 4319, 16493, 1296, 472, 1399, 293, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.13206686292375838, "compression_ratio": 1.6354679802955665, "no_speech_prob": 4.673179500969127e-05}, {"id": 417, "seek": 218944, "start": 2198.08, "end": 2204.76, "text": " Also accessing the same objects from multiple connections may cause many lightweight locks", "tokens": [2743, 26440, 264, 912, 6565, 490, 3866, 9271, 815, 3082, 867, 22052, 20703], "temperature": 0.0, "avg_logprob": -0.13206686292375838, "compression_ratio": 1.6354679802955665, "no_speech_prob": 4.673179500969127e-05}, {"id": 418, "seek": 218944, "start": 2204.76, "end": 2209.68, "text": " to appear, what are called latches in other databases.", "tokens": [281, 4204, 11, 437, 366, 1219, 31837, 279, 294, 661, 22380, 13], "temperature": 0.0, "avg_logprob": -0.13206686292375838, "compression_ratio": 1.6354679802955665, "no_speech_prob": 4.673179500969127e-05}, {"id": 419, "seek": 218944, "start": 2209.68, "end": 2216.36, "text": " And if you're trying to access the same objects from many client connections, then that lock", "tokens": [400, 498, 291, 434, 1382, 281, 2105, 264, 912, 6565, 490, 867, 6423, 9271, 11, 550, 300, 4017], "temperature": 0.0, "avg_logprob": -0.13206686292375838, "compression_ratio": 1.6354679802955665, "no_speech_prob": 4.673179500969127e-05}, {"id": 420, "seek": 221636, "start": 2216.36, "end": 2223.6, "text": " even if it's not explicit it becomes heavily contented and the other connections trying", "tokens": [754, 498, 309, 311, 406, 13691, 309, 3643, 10950, 2701, 292, 293, 264, 661, 9271, 1382], "temperature": 0.0, "avg_logprob": -0.12447509136828748, "compression_ratio": 1.75, "no_speech_prob": 7.349048246396706e-05}, {"id": 421, "seek": 221636, "start": 2223.6, "end": 2226.44, "text": " to access that object will slow each other down.", "tokens": [281, 2105, 300, 2657, 486, 2964, 1184, 661, 760, 13], "temperature": 0.0, "avg_logprob": -0.12447509136828748, "compression_ratio": 1.75, "no_speech_prob": 7.349048246396706e-05}, {"id": 422, "seek": 221636, "start": 2226.44, "end": 2234.1200000000003, "text": " So instead of opening one connection that does 400 times the work, you open 400 connections", "tokens": [407, 2602, 295, 5193, 472, 4984, 300, 775, 8423, 1413, 264, 589, 11, 291, 1269, 8423, 9271], "temperature": 0.0, "avg_logprob": -0.12447509136828748, "compression_ratio": 1.75, "no_speech_prob": 7.349048246396706e-05}, {"id": 423, "seek": 221636, "start": 2234.1200000000003, "end": 2241.0, "text": " that do one 400th the amount of work and that doesn't perform the same, that performs worse", "tokens": [300, 360, 472, 8423, 392, 264, 2372, 295, 589, 293, 300, 1177, 380, 2042, 264, 912, 11, 300, 26213, 5324], "temperature": 0.0, "avg_logprob": -0.12447509136828748, "compression_ratio": 1.75, "no_speech_prob": 7.349048246396706e-05}, {"id": 424, "seek": 221636, "start": 2241.0, "end": 2245.52, "text": " because it's making your data hotter for no reason because they compete for access to", "tokens": [570, 309, 311, 1455, 428, 1412, 32149, 337, 572, 1778, 570, 436, 11831, 337, 2105, 281], "temperature": 0.0, "avg_logprob": -0.12447509136828748, "compression_ratio": 1.75, "no_speech_prob": 7.349048246396706e-05}, {"id": 425, "seek": 224552, "start": 2245.52, "end": 2247.84, "text": " that data.", "tokens": [300, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15548168646322713, "compression_ratio": 1.4946808510638299, "no_speech_prob": 8.71107040438801e-05}, {"id": 426, "seek": 224552, "start": 2247.84, "end": 2253.32, "text": " And also there's no fair queuing, it's more or less random, so lightweight locks don't", "tokens": [400, 611, 456, 311, 572, 3143, 631, 9635, 11, 309, 311, 544, 420, 1570, 4974, 11, 370, 22052, 20703, 500, 380], "temperature": 0.0, "avg_logprob": -0.15548168646322713, "compression_ratio": 1.4946808510638299, "no_speech_prob": 8.71107040438801e-05}, {"id": 427, "seek": 224552, "start": 2253.32, "end": 2257.7599999999998, "text": " have queuing so you don't know who will get priority and there's no guaranteed quality", "tokens": [362, 631, 9635, 370, 291, 500, 380, 458, 567, 486, 483, 9365, 293, 456, 311, 572, 18031, 3125], "temperature": 0.0, "avg_logprob": -0.15548168646322713, "compression_ratio": 1.4946808510638299, "no_speech_prob": 8.71107040438801e-05}, {"id": 428, "seek": 224552, "start": 2257.7599999999998, "end": 2259.68, "text": " of service.", "tokens": [295, 2643, 13], "temperature": 0.0, "avg_logprob": -0.15548168646322713, "compression_ratio": 1.4946808510638299, "no_speech_prob": 8.71107040438801e-05}, {"id": 429, "seek": 224552, "start": 2259.68, "end": 2270.96, "text": " Now mitigation strategy is also you need to be aware that before Postgres 13 there's", "tokens": [823, 32649, 5206, 307, 611, 291, 643, 281, 312, 3650, 300, 949, 10223, 45189, 3705, 456, 311], "temperature": 0.0, "avg_logprob": -0.15548168646322713, "compression_ratio": 1.4946808510638299, "no_speech_prob": 8.71107040438801e-05}, {"id": 430, "seek": 227096, "start": 2270.96, "end": 2275.68, "text": " the issue of snapshot contention.", "tokens": [264, 2734, 295, 30163, 660, 1251, 13], "temperature": 0.0, "avg_logprob": -0.12499153803265284, "compression_ratio": 1.5636363636363637, "no_speech_prob": 8.545124001102522e-05}, {"id": 431, "seek": 227096, "start": 2275.68, "end": 2285.44, "text": " So each transaction keeps an MVCC snapshot even if it's idle and so you can end up using", "tokens": [407, 1184, 14425, 5965, 364, 17663, 11717, 30163, 754, 498, 309, 311, 30650, 293, 370, 291, 393, 917, 493, 1228], "temperature": 0.0, "avg_logprob": -0.12499153803265284, "compression_ratio": 1.5636363636363637, "no_speech_prob": 8.545124001102522e-05}, {"id": 432, "seek": 227096, "start": 2285.44, "end": 2291.88, "text": " server resources even for idle connections and slow everything else down.", "tokens": [7154, 3593, 754, 337, 30650, 9271, 293, 2964, 1203, 1646, 760, 13], "temperature": 0.0, "avg_logprob": -0.12499153803265284, "compression_ratio": 1.5636363636363637, "no_speech_prob": 8.545124001102522e-05}, {"id": 433, "seek": 227096, "start": 2291.88, "end": 2295.88, "text": " So this is contention that is caused by too much concurrency.", "tokens": [407, 341, 307, 660, 1251, 300, 307, 7008, 538, 886, 709, 23702, 10457, 13], "temperature": 0.0, "avg_logprob": -0.12499153803265284, "compression_ratio": 1.5636363636363637, "no_speech_prob": 8.545124001102522e-05}, {"id": 434, "seek": 229588, "start": 2295.88, "end": 2301.6, "text": " So instead of opening 5,000 connections just put a PG Bouncer in front of your database", "tokens": [407, 2602, 295, 5193, 1025, 11, 1360, 9271, 445, 829, 257, 40975, 363, 14296, 294, 1868, 295, 428, 8149], "temperature": 0.0, "avg_logprob": -0.11525678634643555, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.253315950743854e-05}, {"id": 435, "seek": 229588, "start": 2301.6, "end": 2308.44, "text": " or another connection pooler and just allow fewer connections into the database while", "tokens": [420, 1071, 4984, 7005, 260, 293, 445, 2089, 13366, 9271, 666, 264, 8149, 1339], "temperature": 0.0, "avg_logprob": -0.11525678634643555, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.253315950743854e-05}, {"id": 436, "seek": 229588, "start": 2308.44, "end": 2312.88, "text": " accepting the client connections from the connection pooler.", "tokens": [17391, 264, 6423, 9271, 490, 264, 4984, 7005, 260, 13], "temperature": 0.0, "avg_logprob": -0.11525678634643555, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.253315950743854e-05}, {"id": 437, "seek": 229588, "start": 2312.88, "end": 2318.44, "text": " That way you throttle or you introduce latency on the application side but that's not always", "tokens": [663, 636, 291, 24235, 420, 291, 5366, 27043, 322, 264, 3861, 1252, 457, 300, 311, 406, 1009], "temperature": 0.0, "avg_logprob": -0.11525678634643555, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.253315950743854e-05}, {"id": 438, "seek": 229588, "start": 2318.44, "end": 2323.76, "text": " bad because in some cases it can protect your server's performance which is more important", "tokens": [1578, 570, 294, 512, 3331, 309, 393, 2371, 428, 7154, 311, 3389, 597, 307, 544, 1021], "temperature": 0.0, "avg_logprob": -0.11525678634643555, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.253315950743854e-05}, {"id": 439, "seek": 232376, "start": 2323.76, "end": 2329.76, "text": " than making let's say a non-interactive client wait for a few milliseconds more.", "tokens": [813, 1455, 718, 311, 584, 257, 2107, 12, 5106, 12596, 6423, 1699, 337, 257, 1326, 34184, 544, 13], "temperature": 0.0, "avg_logprob": -0.09663948497256718, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.00030975815025158226}, {"id": 440, "seek": 232376, "start": 2329.76, "end": 2336.0400000000004, "text": " It sounds counterintuitive but it leads to higher performance overall.", "tokens": [467, 3263, 5682, 686, 48314, 457, 309, 6689, 281, 2946, 3389, 4787, 13], "temperature": 0.0, "avg_logprob": -0.09663948497256718, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.00030975815025158226}, {"id": 441, "seek": 232376, "start": 2336.0400000000004, "end": 2341.96, "text": " High transaction rate is also a problem when you're burning through transactions very quickly", "tokens": [5229, 14425, 3314, 307, 611, 257, 1154, 562, 291, 434, 9488, 807, 16856, 588, 2661], "temperature": 0.0, "avg_logprob": -0.09663948497256718, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.00030975815025158226}, {"id": 442, "seek": 232376, "start": 2341.96, "end": 2348.44, "text": " because there's a lot of detail here about the way transaction IDs work in Postgres but", "tokens": [570, 456, 311, 257, 688, 295, 2607, 510, 466, 264, 636, 14425, 48212, 589, 294, 10223, 45189, 457], "temperature": 0.0, "avg_logprob": -0.09663948497256718, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.00030975815025158226}, {"id": 443, "seek": 234844, "start": 2348.44, "end": 2354.28, "text": " the bottom line is that there's 4.2 billion transaction IDs.", "tokens": [264, 2767, 1622, 307, 300, 456, 311, 1017, 13, 17, 5218, 14425, 48212, 13], "temperature": 0.0, "avg_logprob": -0.1154202862062316, "compression_ratio": 1.5987654320987654, "no_speech_prob": 2.6195262762485072e-05}, {"id": 444, "seek": 234844, "start": 2354.28, "end": 2359.96, "text": " The future for you is 2.1 billion transactions in the future and the past is another 2.1 billion", "tokens": [440, 2027, 337, 291, 307, 568, 13, 16, 5218, 16856, 294, 264, 2027, 293, 264, 1791, 307, 1071, 568, 13, 16, 5218], "temperature": 0.0, "avg_logprob": -0.1154202862062316, "compression_ratio": 1.5987654320987654, "no_speech_prob": 2.6195262762485072e-05}, {"id": 445, "seek": 234844, "start": 2359.96, "end": 2361.52, "text": " transactions.", "tokens": [16856, 13], "temperature": 0.0, "avg_logprob": -0.1154202862062316, "compression_ratio": 1.5987654320987654, "no_speech_prob": 2.6195262762485072e-05}, {"id": 446, "seek": 234844, "start": 2361.52, "end": 2370.96, "text": " So if you are writing with a huge data rate with let's say an OLTP workload that can go", "tokens": [407, 498, 291, 366, 3579, 365, 257, 2603, 1412, 3314, 365, 718, 311, 584, 364, 39191, 16804, 20139, 300, 393, 352], "temperature": 0.0, "avg_logprob": -0.1154202862062316, "compression_ratio": 1.5987654320987654, "no_speech_prob": 2.6195262762485072e-05}, {"id": 447, "seek": 237096, "start": 2370.96, "end": 2380.48, "text": " through 2.1 billion transactions in a week that will overrun the last transaction and", "tokens": [807, 568, 13, 16, 5218, 16856, 294, 257, 1243, 300, 486, 670, 12997, 264, 1036, 14425, 293], "temperature": 0.0, "avg_logprob": -0.13023005591498482, "compression_ratio": 1.7116279069767442, "no_speech_prob": 3.637419285951182e-05}, {"id": 448, "seek": 237096, "start": 2380.48, "end": 2384.2400000000002, "text": " you will no longer know whether that transaction is in the past or in the future and that's", "tokens": [291, 486, 572, 2854, 458, 1968, 300, 14425, 307, 294, 264, 1791, 420, 294, 264, 2027, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.13023005591498482, "compression_ratio": 1.7116279069767442, "no_speech_prob": 3.637419285951182e-05}, {"id": 449, "seek": 237096, "start": 2384.2400000000002, "end": 2385.2400000000002, "text": " a problem.", "tokens": [257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.13023005591498482, "compression_ratio": 1.7116279069767442, "no_speech_prob": 3.637419285951182e-05}, {"id": 450, "seek": 237096, "start": 2385.2400000000002, "end": 2393.64, "text": " Postgres won't let you do that, it will shut down to avoid doing that and the solution that", "tokens": [10223, 45189, 1582, 380, 718, 291, 360, 300, 11, 309, 486, 5309, 760, 281, 5042, 884, 300, 293, 264, 3827, 300], "temperature": 0.0, "avg_logprob": -0.13023005591498482, "compression_ratio": 1.7116279069767442, "no_speech_prob": 3.637419285951182e-05}, {"id": 451, "seek": 237096, "start": 2393.64, "end": 2400.68, "text": " we came up with is called freezing where you go through the table and you mark each row", "tokens": [321, 1361, 493, 365, 307, 1219, 20200, 689, 291, 352, 807, 264, 3199, 293, 291, 1491, 1184, 5386], "temperature": 0.0, "avg_logprob": -0.13023005591498482, "compression_ratio": 1.7116279069767442, "no_speech_prob": 3.637419285951182e-05}, {"id": 452, "seek": 240068, "start": 2400.68, "end": 2408.08, "text": " as you know to be old as frozen and you know that that row is always in the past even if", "tokens": [382, 291, 458, 281, 312, 1331, 382, 12496, 293, 291, 458, 300, 300, 5386, 307, 1009, 294, 264, 1791, 754, 498], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 453, "seek": 240068, "start": 2408.08, "end": 2412.0, "text": " it has a transaction ID from another time.", "tokens": [309, 575, 257, 14425, 7348, 490, 1071, 565, 13], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 454, "seek": 240068, "start": 2412.0, "end": 2418.72, "text": " So the problem is you need to make sure that Postgres has the chance to freeze those rows", "tokens": [407, 264, 1154, 307, 291, 643, 281, 652, 988, 300, 10223, 45189, 575, 264, 2931, 281, 15959, 729, 13241], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 455, "seek": 240068, "start": 2418.72, "end": 2421.0, "text": " before the wrap around.", "tokens": [949, 264, 7019, 926, 13], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 456, "seek": 240068, "start": 2421.0, "end": 2424.2, "text": " So what can you do?", "tokens": [407, 437, 393, 291, 360, 30], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 457, "seek": 240068, "start": 2424.2, "end": 2428.68, "text": " You can reduce the number of transactions, you can use batching.", "tokens": [509, 393, 5407, 264, 1230, 295, 16856, 11, 291, 393, 764, 15245, 278, 13], "temperature": 0.0, "avg_logprob": -0.13370768590406937, "compression_ratio": 1.6019417475728155, "no_speech_prob": 6.78422293276526e-05}, {"id": 458, "seek": 242868, "start": 2428.68, "end": 2436.16, "text": " Instead of committing 100 things, just batch them or 1,000 things and that automatically", "tokens": [7156, 295, 26659, 2319, 721, 11, 445, 15245, 552, 420, 502, 11, 1360, 721, 293, 300, 6772], "temperature": 0.0, "avg_logprob": -0.16592280544451812, "compression_ratio": 1.606936416184971, "no_speech_prob": 0.00022597356291953474}, {"id": 459, "seek": 242868, "start": 2436.16, "end": 2445.04, "text": " uses 1,000 transactions less, sorry 1,000 the transaction rate that you would have and", "tokens": [4960, 502, 11, 1360, 16856, 1570, 11, 2597, 502, 11, 1360, 264, 14425, 3314, 300, 291, 576, 362, 293], "temperature": 0.0, "avg_logprob": -0.16592280544451812, "compression_ratio": 1.606936416184971, "no_speech_prob": 0.00022597356291953474}, {"id": 460, "seek": 242868, "start": 2445.04, "end": 2447.3999999999996, "text": " that helps.", "tokens": [300, 3665, 13], "temperature": 0.0, "avg_logprob": -0.16592280544451812, "compression_ratio": 1.606936416184971, "no_speech_prob": 0.00022597356291953474}, {"id": 461, "seek": 242868, "start": 2447.3999999999996, "end": 2454.8799999999997, "text": " Also it helps to bump up the effectiveness of auto vacuum and that takes care of freezing.", "tokens": [2743, 309, 3665, 281, 9961, 493, 264, 21208, 295, 8399, 14224, 293, 300, 2516, 1127, 295, 20200, 13], "temperature": 0.0, "avg_logprob": -0.16592280544451812, "compression_ratio": 1.606936416184971, "no_speech_prob": 0.00022597356291953474}, {"id": 462, "seek": 245488, "start": 2454.88, "end": 2460.12, "text": " Another favorite is people that turn off auto vacuum, so the thing that actually makes multi", "tokens": [3996, 2954, 307, 561, 300, 1261, 766, 8399, 14224, 11, 370, 264, 551, 300, 767, 1669, 4825], "temperature": 0.0, "avg_logprob": -0.13385865905068137, "compression_ratio": 1.5982905982905984, "no_speech_prob": 8.981430437415838e-05}, {"id": 463, "seek": 245488, "start": 2460.12, "end": 2465.04, "text": " view concurrency control work, so don't turn it off.", "tokens": [1910, 23702, 10457, 1969, 589, 11, 370, 500, 380, 1261, 309, 766, 13], "temperature": 0.0, "avg_logprob": -0.13385865905068137, "compression_ratio": 1.5982905982905984, "no_speech_prob": 8.981430437415838e-05}, {"id": 464, "seek": 245488, "start": 2465.04, "end": 2470.96, "text": " Its work is removing dead tuples, freezing things, among other things, it does have overhead", "tokens": [6953, 589, 307, 12720, 3116, 2604, 2622, 11, 20200, 721, 11, 3654, 661, 721, 11, 309, 775, 362, 19922], "temperature": 0.0, "avg_logprob": -0.13385865905068137, "compression_ratio": 1.5982905982905984, "no_speech_prob": 8.981430437415838e-05}, {"id": 465, "seek": 245488, "start": 2470.96, "end": 2478.8, "text": " because it scans tables and indexes and acquires locks and gives them up voluntarily and that's", "tokens": [570, 309, 35116, 8020, 293, 8186, 279, 293, 6667, 3145, 20703, 293, 2709, 552, 493, 41782, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.13385865905068137, "compression_ratio": 1.5982905982905984, "no_speech_prob": 8.981430437415838e-05}, {"id": 466, "seek": 245488, "start": 2478.8, "end": 2481.56, "text": " why it has limited capacity by default.", "tokens": [983, 309, 575, 5567, 6042, 538, 7576, 13], "temperature": 0.0, "avg_logprob": -0.13385865905068137, "compression_ratio": 1.5982905982905984, "no_speech_prob": 8.981430437415838e-05}, {"id": 467, "seek": 248156, "start": 2481.56, "end": 2485.6, "text": " But the defaults are not suitable for production workload.", "tokens": [583, 264, 7576, 82, 366, 406, 12873, 337, 4265, 20139, 13], "temperature": 0.0, "avg_logprob": -0.14043853089616104, "compression_ratio": 1.5522388059701493, "no_speech_prob": 8.829424768919125e-05}, {"id": 468, "seek": 248156, "start": 2485.6, "end": 2491.92, "text": " So if you're concerned about the overhead of auto vacuum then turning it off is not", "tokens": [407, 498, 291, 434, 5922, 466, 264, 19922, 295, 8399, 14224, 550, 6246, 309, 766, 307, 406], "temperature": 0.0, "avg_logprob": -0.14043853089616104, "compression_ratio": 1.5522388059701493, "no_speech_prob": 8.829424768919125e-05}, {"id": 469, "seek": 248156, "start": 2491.92, "end": 2495.68, "text": " the solution because the alternative is worse.", "tokens": [264, 3827, 570, 264, 8535, 307, 5324, 13], "temperature": 0.0, "avg_logprob": -0.14043853089616104, "compression_ratio": 1.5522388059701493, "no_speech_prob": 8.829424768919125e-05}, {"id": 470, "seek": 248156, "start": 2495.68, "end": 2502.12, "text": " You can risk shutting down your database or accumulating bloat because there's no way", "tokens": [509, 393, 3148, 36057, 760, 428, 8149, 420, 12989, 12162, 1749, 267, 570, 456, 311, 572, 636], "temperature": 0.0, "avg_logprob": -0.14043853089616104, "compression_ratio": 1.5522388059701493, "no_speech_prob": 8.829424768919125e-05}, {"id": 471, "seek": 248156, "start": 2502.12, "end": 2505.92, "text": " to avoid the vacuum in Postgres yet.", "tokens": [281, 5042, 264, 14224, 294, 10223, 45189, 1939, 13], "temperature": 0.0, "avg_logprob": -0.14043853089616104, "compression_ratio": 1.5522388059701493, "no_speech_prob": 8.829424768919125e-05}, {"id": 472, "seek": 250592, "start": 2505.92, "end": 2513.04, "text": " And when you outrun vacuum by writing faster than your database can auto vacuum it then", "tokens": [400, 562, 291, 484, 12997, 14224, 538, 3579, 4663, 813, 428, 8149, 393, 8399, 14224, 309, 550], "temperature": 0.0, "avg_logprob": -0.13238148940236946, "compression_ratio": 1.612565445026178, "no_speech_prob": 0.0001324219920206815}, {"id": 473, "seek": 250592, "start": 2513.04, "end": 2519.6800000000003, "text": " you may come up with a bloat runaway that requires a vacuum full and that takes a total", "tokens": [291, 815, 808, 493, 365, 257, 1749, 267, 1190, 10318, 300, 7029, 257, 14224, 1577, 293, 300, 2516, 257, 3217], "temperature": 0.0, "avg_logprob": -0.13238148940236946, "compression_ratio": 1.612565445026178, "no_speech_prob": 0.0001324219920206815}, {"id": 474, "seek": 250592, "start": 2519.6800000000003, "end": 2522.32, "text": " lock on the table and nobody can use it.", "tokens": [4017, 322, 264, 3199, 293, 5079, 393, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.13238148940236946, "compression_ratio": 1.612565445026178, "no_speech_prob": 0.0001324219920206815}, {"id": 475, "seek": 250592, "start": 2522.32, "end": 2530.52, "text": " So instead of turning off auto vacuum, actually make it work harder and you can find in the", "tokens": [407, 2602, 295, 6246, 766, 8399, 14224, 11, 767, 652, 309, 589, 6081, 293, 291, 393, 915, 294, 264], "temperature": 0.0, "avg_logprob": -0.13238148940236946, "compression_ratio": 1.612565445026178, "no_speech_prob": 0.0001324219920206815}, {"id": 476, "seek": 253052, "start": 2530.52, "end": 2536.32, "text": " Postgres documentation how to make it work harder in order to avoid bloat and transaction", "tokens": [10223, 45189, 14333, 577, 281, 652, 309, 589, 6081, 294, 1668, 281, 5042, 1749, 267, 293, 14425], "temperature": 0.0, "avg_logprob": -0.21163938891503117, "compression_ratio": 1.4213483146067416, "no_speech_prob": 0.0002463009732309729}, {"id": 477, "seek": 253052, "start": 2536.32, "end": 2539.28, "text": " ID wraparound.", "tokens": [7348, 7843, 2181, 554, 13], "temperature": 0.0, "avg_logprob": -0.21163938891503117, "compression_ratio": 1.4213483146067416, "no_speech_prob": 0.0002463009732309729}, {"id": 478, "seek": 253052, "start": 2539.28, "end": 2545.04, "text": " There's some standard stuff here about explicit locking.", "tokens": [821, 311, 512, 3832, 1507, 510, 466, 13691, 23954, 13], "temperature": 0.0, "avg_logprob": -0.21163938891503117, "compression_ratio": 1.4213483146067416, "no_speech_prob": 0.0002463009732309729}, {"id": 479, "seek": 253052, "start": 2545.04, "end": 2555.2, "text": " If your application needs to lock things to make sure that concurrency, oops, out of power,", "tokens": [759, 428, 3861, 2203, 281, 4017, 721, 281, 652, 988, 300, 23702, 10457, 11, 34166, 11, 484, 295, 1347, 11], "temperature": 0.0, "avg_logprob": -0.21163938891503117, "compression_ratio": 1.4213483146067416, "no_speech_prob": 0.0002463009732309729}, {"id": 480, "seek": 255520, "start": 2555.2, "end": 2567.24, "text": " can I use something else?", "tokens": [393, 286, 764, 746, 1646, 30], "temperature": 0.0, "avg_logprob": -0.4916579246520996, "compression_ratio": 0.7575757575757576, "no_speech_prob": 0.004772496875375509}, {"id": 481, "seek": 256724, "start": 2567.24, "end": 2595.2799999999997, "text": " I have a copy.", "tokens": [286, 362, 257, 5055, 13], "temperature": 0.0, "avg_logprob": -0.6478348837958442, "compression_ratio": 0.6363636363636364, "no_speech_prob": 0.0034946396481245756}, {"id": 482, "seek": 259528, "start": 2595.28, "end": 2604.6000000000004, "text": " Okay, so we're only like two or three slides.", "tokens": [1033, 11, 370, 321, 434, 787, 411, 732, 420, 1045, 9788, 13], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 483, "seek": 259528, "start": 2604.6000000000004, "end": 2608.0800000000004, "text": " If you're really interested in knowing them you can talk to Jimmy afterwards but you can", "tokens": [759, 291, 434, 534, 3102, 294, 5276, 552, 291, 393, 751, 281, 15709, 10543, 457, 291, 393], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 484, "seek": 259528, "start": 2608.0800000000004, "end": 2610.6000000000004, "text": " ask now questions about what he already talked about.", "tokens": [1029, 586, 1651, 466, 437, 415, 1217, 2825, 466, 13], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 485, "seek": 259528, "start": 2610.6000000000004, "end": 2614.48, "text": " So if we have like five minutes for questions, so if you have a question please raise your", "tokens": [407, 498, 321, 362, 411, 1732, 2077, 337, 1651, 11, 370, 498, 291, 362, 257, 1168, 1767, 5300, 428], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 486, "seek": 259528, "start": 2614.48, "end": 2617.7200000000003, "text": " hand and we are going to bring the microphone to you so you can ask questions.", "tokens": [1011, 293, 321, 366, 516, 281, 1565, 264, 10952, 281, 291, 370, 291, 393, 1029, 1651, 13], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 487, "seek": 259528, "start": 2617.7200000000003, "end": 2618.7200000000003, "text": " There is a question there.", "tokens": [821, 307, 257, 1168, 456, 13], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 488, "seek": 259528, "start": 2618.7200000000003, "end": 2619.7200000000003, "text": " Good.", "tokens": [2205, 13], "temperature": 0.0, "avg_logprob": -0.2511792616410689, "compression_ratio": 1.6926406926406927, "no_speech_prob": 0.021963704377412796}, {"id": 489, "seek": 261972, "start": 2619.72, "end": 2626.48, "text": " Thanks, it's on the website.", "tokens": [2561, 11, 309, 311, 322, 264, 3144, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 490, "seek": 261972, "start": 2626.48, "end": 2633.24, "text": " Is there any difference on how, is there any difference in how VARCAR and VARCAR N are", "tokens": [1119, 456, 604, 2649, 322, 577, 11, 307, 456, 604, 2649, 294, 577, 691, 1899, 34, 1899, 293, 691, 1899, 34, 1899, 426, 366], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 491, "seek": 261972, "start": 2633.24, "end": 2635.24, "text": " stored on the disk?", "tokens": [12187, 322, 264, 12355, 30], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 492, "seek": 261972, "start": 2635.24, "end": 2636.24, "text": " Sorry I didn't hear your question.", "tokens": [4919, 286, 994, 380, 1568, 428, 1168, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 493, "seek": 261972, "start": 2636.24, "end": 2641.9199999999996, "text": " If there is any difference in how VARCAR and VARCAR N and text are stored on the disk?", "tokens": [759, 456, 307, 604, 2649, 294, 577, 691, 1899, 34, 1899, 293, 691, 1899, 34, 1899, 426, 293, 2487, 366, 12187, 322, 264, 12355, 30], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 494, "seek": 261972, "start": 2641.9199999999996, "end": 2644.12, "text": " No, VARCAR is exactly the same as text.", "tokens": [883, 11, 691, 1899, 34, 1899, 307, 2293, 264, 912, 382, 2487, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 495, "seek": 261972, "start": 2644.12, "end": 2645.12, "text": " It's the same type.", "tokens": [467, 311, 264, 912, 2010, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 496, "seek": 261972, "start": 2645.12, "end": 2646.12, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 497, "seek": 261972, "start": 2646.12, "end": 2648.9599999999996, "text": " So it doesn't matter like also for indexes like I know in my SQR.", "tokens": [407, 309, 1177, 380, 1871, 411, 611, 337, 8186, 279, 411, 286, 458, 294, 452, 318, 48, 49, 13], "temperature": 0.0, "avg_logprob": -0.29832059420072116, "compression_ratio": 1.861244019138756, "no_speech_prob": 0.008843416348099709}, {"id": 498, "seek": 264896, "start": 2648.96, "end": 2653.8, "text": " No, no, it doesn't make a difference but VARCAR with a limit is a different type.", "tokens": [883, 11, 572, 11, 309, 1177, 380, 652, 257, 2649, 457, 691, 1899, 34, 1899, 365, 257, 4948, 307, 257, 819, 2010, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 499, "seek": 264896, "start": 2653.8, "end": 2654.8, "text": " Got it.", "tokens": [5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 500, "seek": 264896, "start": 2654.8, "end": 2655.8, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 501, "seek": 264896, "start": 2655.8, "end": 2656.8, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 502, "seek": 264896, "start": 2656.8, "end": 2657.8, "text": " Another question?", "tokens": [3996, 1168, 30], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 503, "seek": 264896, "start": 2657.8, "end": 2660.36, "text": " Just one of the browser.", "tokens": [1449, 472, 295, 264, 11185, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 504, "seek": 264896, "start": 2660.36, "end": 2661.36, "text": " Questions, questions.", "tokens": [27738, 11, 1651, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 505, "seek": 264896, "start": 2661.36, "end": 2664.32, "text": " Jimmy, I have a question.", "tokens": [15709, 11, 286, 362, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 506, "seek": 264896, "start": 2664.32, "end": 2670.7200000000003, "text": " So you were talking about money and why does money is actually implemented?", "tokens": [407, 291, 645, 1417, 466, 1460, 293, 983, 775, 1460, 307, 767, 12270, 30], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 507, "seek": 264896, "start": 2670.7200000000003, "end": 2672.96, "text": " Is it SQL standard or?", "tokens": [1119, 309, 19200, 3832, 420, 30], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 508, "seek": 264896, "start": 2672.96, "end": 2673.96, "text": " Connected.", "tokens": [11653, 292, 13], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 509, "seek": 264896, "start": 2673.96, "end": 2676.28, "text": " Sorry, what was the question?", "tokens": [4919, 11, 437, 390, 264, 1168, 30], "temperature": 0.0, "avg_logprob": -0.3102344263379819, "compression_ratio": 1.5, "no_speech_prob": 0.0011392795713618398}, {"id": 510, "seek": 267628, "start": 2676.28, "end": 2681.44, "text": " If money is so bad as a data type, why is it implemented in Postgres?", "tokens": [759, 1460, 307, 370, 1578, 382, 257, 1412, 2010, 11, 983, 307, 309, 12270, 294, 10223, 45189, 30], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 511, "seek": 267628, "start": 2681.44, "end": 2687.44, "text": " Because it was actually deprecated because of those bad things that we talked about.", "tokens": [1436, 309, 390, 767, 1367, 13867, 770, 570, 295, 729, 1578, 721, 300, 321, 2825, 466, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 512, "seek": 267628, "start": 2687.44, "end": 2688.44, "text": " Twice.", "tokens": [46964, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 513, "seek": 267628, "start": 2688.44, "end": 2689.44, "text": " Twice.", "tokens": [46964, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 514, "seek": 267628, "start": 2689.44, "end": 2694.96, "text": " As Andreas pointed out this morning and people requested it so we reinstated it twice.", "tokens": [1018, 38785, 10932, 484, 341, 2446, 293, 561, 16436, 309, 370, 321, 35056, 770, 309, 6091, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 515, "seek": 267628, "start": 2694.96, "end": 2695.96, "text": " Oops.", "tokens": [21726, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 516, "seek": 267628, "start": 2695.96, "end": 2696.96, "text": " There you go.", "tokens": [821, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 517, "seek": 267628, "start": 2696.96, "end": 2697.96, "text": " So people wanted it.", "tokens": [407, 561, 1415, 309, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 518, "seek": 267628, "start": 2697.96, "end": 2698.96, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 519, "seek": 267628, "start": 2698.96, "end": 2699.96, "text": " People wants money.", "tokens": [3432, 2738, 1460, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 520, "seek": 267628, "start": 2699.96, "end": 2700.96, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 521, "seek": 267628, "start": 2700.96, "end": 2704.92, "text": " Different kind of money, exactly.", "tokens": [20825, 733, 295, 1460, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.21935865614149305, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.0030969211366027594}, {"id": 522, "seek": 270492, "start": 2704.92, "end": 2706.48, "text": " Any other questions?", "tokens": [2639, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 523, "seek": 270492, "start": 2706.48, "end": 2711.84, "text": " Okay we have another question here.", "tokens": [1033, 321, 362, 1071, 1168, 510, 13], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 524, "seek": 270492, "start": 2711.84, "end": 2714.16, "text": " Quick question about table inheritance.", "tokens": [12101, 1168, 466, 3199, 32122, 13], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 525, "seek": 270492, "start": 2714.16, "end": 2719.48, "text": " So I know I've read the Postgres documentation about all its flaws and why you shouldn't", "tokens": [407, 286, 458, 286, 600, 1401, 264, 10223, 45189, 14333, 466, 439, 1080, 27108, 293, 983, 291, 4659, 380], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 526, "seek": 270492, "start": 2719.48, "end": 2722.92, "text": " use it especially now that there's partitioning.", "tokens": [764, 309, 2318, 586, 300, 456, 311, 24808, 278, 13], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 527, "seek": 270492, "start": 2722.92, "end": 2730.2400000000002, "text": " But overall I think the idea of having tables that have some common columns but then diverge", "tokens": [583, 4787, 286, 519, 264, 1558, 295, 1419, 8020, 300, 362, 512, 2689, 13766, 457, 550, 18558, 432], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 528, "seek": 270492, "start": 2730.2400000000002, "end": 2734.04, "text": " on some others is an interesting idea.", "tokens": [322, 512, 2357, 307, 364, 1880, 1558, 13], "temperature": 0.0, "avg_logprob": -0.20085625215010208, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005840546917170286}, {"id": 529, "seek": 273404, "start": 2734.04, "end": 2736.44, "text": " There's other ways to solve it.", "tokens": [821, 311, 661, 2098, 281, 5039, 309, 13], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 530, "seek": 273404, "start": 2736.44, "end": 2743.6, "text": " Like in previous jobs I've implemented one table that had all the common columns and", "tokens": [1743, 294, 3894, 4782, 286, 600, 12270, 472, 3199, 300, 632, 439, 264, 2689, 13766, 293], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 531, "seek": 273404, "start": 2743.6, "end": 2746.84, "text": " then one separate table for each variation.", "tokens": [550, 472, 4994, 3199, 337, 1184, 12990, 13], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 532, "seek": 273404, "start": 2746.84, "end": 2752.04, "text": " But are there other solutions that you implement for those types of?", "tokens": [583, 366, 456, 661, 6547, 300, 291, 4445, 337, 729, 3467, 295, 30], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 533, "seek": 273404, "start": 2752.04, "end": 2753.04, "text": " ORMs.", "tokens": [19654, 26386, 13], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 534, "seek": 273404, "start": 2753.04, "end": 2762.72, "text": " Why not use ORMs to make as complicated the data model as you like but not store the complexity", "tokens": [1545, 406, 764, 19654, 26386, 281, 652, 382, 6179, 264, 1412, 2316, 382, 291, 411, 457, 406, 3531, 264, 14024], "temperature": 0.0, "avg_logprob": -0.21579021360816025, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0014202856691554189}, {"id": 535, "seek": 276272, "start": 2762.72, "end": 2766.3199999999997, "text": " as inheritance relationships on the database.", "tokens": [382, 32122, 6159, 322, 264, 8149, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 536, "seek": 276272, "start": 2766.3199999999997, "end": 2773.9199999999996, "text": " But doesn't that create larger tables that you'll have to read no matter if the data", "tokens": [583, 1177, 380, 300, 1884, 4833, 8020, 300, 291, 603, 362, 281, 1401, 572, 1871, 498, 264, 1412], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 537, "seek": 276272, "start": 2773.9199999999996, "end": 2774.9199999999996, "text": " is sparse?", "tokens": [307, 637, 11668, 30], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 538, "seek": 276272, "start": 2774.9199999999996, "end": 2777.4399999999996, "text": " No all you need to link them is a foreign key relationship.", "tokens": [883, 439, 291, 643, 281, 2113, 552, 307, 257, 5329, 2141, 2480, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 539, "seek": 276272, "start": 2777.4399999999996, "end": 2780.52, "text": " So you're just storing an extra identifier I guess.", "tokens": [407, 291, 434, 445, 26085, 364, 2857, 45690, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 540, "seek": 276272, "start": 2780.52, "end": 2781.52, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 541, "seek": 276272, "start": 2781.52, "end": 2782.52, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 542, "seek": 276272, "start": 2782.52, "end": 2783.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 543, "seek": 276272, "start": 2783.52, "end": 2784.52, "text": " Here.", "tokens": [1692, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 544, "seek": 276272, "start": 2784.52, "end": 2786.52, "text": " Never mind.", "tokens": [7344, 1575, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 545, "seek": 276272, "start": 2786.52, "end": 2792.6, "text": " So anyway, before the last thing I wanted to tell you, right, it was the security slides.", "tokens": [407, 4033, 11, 949, 264, 1036, 551, 286, 1415, 281, 980, 291, 11, 558, 11, 309, 390, 264, 3825, 9788, 13], "temperature": 0.0, "avg_logprob": -0.22987986477938566, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.00054786546388641}, {"id": 546, "seek": 279260, "start": 2792.6, "end": 2794.04, "text": " They're important.", "tokens": [814, 434, 1021, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 547, "seek": 279260, "start": 2794.04, "end": 2799.6, "text": " Never use trust over TCPIP in your PGHBA conf.", "tokens": [7344, 764, 3361, 670, 48965, 9139, 294, 428, 430, 4269, 9295, 1497, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 548, "seek": 279260, "start": 2799.6, "end": 2803.24, "text": " That was the most important thing I had to say in the remainder of the slides.", "tokens": [663, 390, 264, 881, 1021, 551, 286, 632, 281, 584, 294, 264, 29837, 295, 264, 9788, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 549, "seek": 279260, "start": 2803.24, "end": 2807.48, "text": " Do not trust anything coming from TCPIP.", "tokens": [1144, 406, 3361, 1340, 1348, 490, 48965, 9139, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 550, "seek": 279260, "start": 2807.48, "end": 2814.3199999999997, "text": " Always use password, MD5 certificate, scram authentication.", "tokens": [11270, 764, 11524, 11, 22521, 20, 15953, 11, 795, 2356, 26643, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 551, "seek": 279260, "start": 2814.3199999999997, "end": 2815.3199999999997, "text": " That was the last thing.", "tokens": [663, 390, 264, 1036, 551, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 552, "seek": 279260, "start": 2815.3199999999997, "end": 2816.3199999999997, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 553, "seek": 279260, "start": 2816.3199999999997, "end": 2817.3199999999997, "text": " I'll take your question now.", "tokens": [286, 603, 747, 428, 1168, 586, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 554, "seek": 279260, "start": 2817.3199999999997, "end": 2818.3199999999997, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.17831619926120923, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.0015265238471329212}, {"id": 555, "seek": 281832, "start": 2818.32, "end": 2825.28, "text": " I'm curious as to why outer left join isn't implemented, it's just left join, is that", "tokens": [286, 478, 6369, 382, 281, 983, 10847, 1411, 3917, 1943, 380, 12270, 11, 309, 311, 445, 1411, 3917, 11, 307, 300], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 556, "seek": 281832, "start": 2825.28, "end": 2829.0, "text": " of course it's the same thing as using the anti-join you used earlier.", "tokens": [295, 1164, 309, 311, 264, 912, 551, 382, 1228, 264, 6061, 12, 5134, 259, 291, 1143, 3071, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 557, "seek": 281832, "start": 2829.0, "end": 2831.7200000000003, "text": " I'm just curious why it isn't implemented.", "tokens": [286, 478, 445, 6369, 983, 309, 1943, 380, 12270, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 558, "seek": 281832, "start": 2831.7200000000003, "end": 2833.92, "text": " It's the same thing.", "tokens": [467, 311, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 559, "seek": 281832, "start": 2833.92, "end": 2836.76, "text": " Outer left join is the same thing as left join in Postgres.", "tokens": [5925, 260, 1411, 3917, 307, 264, 912, 551, 382, 1411, 3917, 294, 10223, 45189, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 560, "seek": 281832, "start": 2836.76, "end": 2837.76, "text": " Yeah, I know.", "tokens": [865, 11, 286, 458, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 561, "seek": 281832, "start": 2837.76, "end": 2845.32, "text": " But outer left join should be, according to my old books of SQL89 or something, just", "tokens": [583, 10847, 1411, 3917, 820, 312, 11, 4650, 281, 452, 1331, 3642, 295, 19200, 21115, 420, 746, 11, 445], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 562, "seek": 281832, "start": 2845.32, "end": 2847.84, "text": " the anti-join left side.", "tokens": [264, 6061, 12, 5134, 259, 1411, 1252, 13], "temperature": 0.0, "avg_logprob": -0.24143182436625163, "compression_ratio": 1.8967136150234742, "no_speech_prob": 0.005793978460133076}, {"id": 563, "seek": 284784, "start": 2847.84, "end": 2852.8, "text": " So you do not take the center part where the rings meet.", "tokens": [407, 291, 360, 406, 747, 264, 3056, 644, 689, 264, 11136, 1677, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 564, "seek": 284784, "start": 2852.8, "end": 2855.8, "text": " You remove the intersection, just take the left part.", "tokens": [509, 4159, 264, 15236, 11, 445, 747, 264, 1411, 644, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 565, "seek": 284784, "start": 2855.8, "end": 2856.8, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 566, "seek": 284784, "start": 2856.8, "end": 2860.52, "text": " So yeah, the way Postgres supplements it is it just enters null for the things that", "tokens": [407, 1338, 11, 264, 636, 10223, 45189, 26645, 309, 307, 309, 445, 18780, 18184, 337, 264, 721, 300], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 567, "seek": 284784, "start": 2860.52, "end": 2863.04, "text": " don't exist that don't correspond.", "tokens": [500, 380, 2514, 300, 500, 380, 6805, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 568, "seek": 284784, "start": 2863.04, "end": 2866.04, "text": " And the right join would put the nulls on the other side.", "tokens": [400, 264, 558, 3917, 576, 829, 264, 18184, 82, 322, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 569, "seek": 284784, "start": 2866.04, "end": 2868.04, "text": " That's the difference.", "tokens": [663, 311, 264, 2649, 13], "temperature": 0.0, "avg_logprob": -0.2381871760576621, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.0047505623660981655}, {"id": 570, "seek": 286804, "start": 2868.04, "end": 2879.2799999999997, "text": " There was another question here before.", "tokens": [821, 390, 1071, 1168, 510, 949, 13], "temperature": 0.0, "avg_logprob": -0.2519560047224456, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.002244753297418356}, {"id": 571, "seek": 286804, "start": 2879.2799999999997, "end": 2886.16, "text": " So you mentioned about the date and the time handling.", "tokens": [407, 291, 2835, 466, 264, 4002, 293, 264, 565, 13175, 13], "temperature": 0.0, "avg_logprob": -0.2519560047224456, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.002244753297418356}, {"id": 572, "seek": 286804, "start": 2886.16, "end": 2892.52, "text": " Is there any way in Postgres that doesn't involve an awful lot of hackery to deal with", "tokens": [1119, 456, 604, 636, 294, 10223, 45189, 300, 1177, 380, 9494, 364, 11232, 688, 295, 10339, 2109, 281, 2028, 365], "temperature": 0.0, "avg_logprob": -0.2519560047224456, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.002244753297418356}, {"id": 573, "seek": 286804, "start": 2892.52, "end": 2893.52, "text": " partial dates?", "tokens": [14641, 11691, 30], "temperature": 0.0, "avg_logprob": -0.2519560047224456, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.002244753297418356}, {"id": 574, "seek": 289352, "start": 2893.52, "end": 2898.36, "text": " E.g., for example, if I said I'm going to take the train tomorrow morning or I'm going", "tokens": [462, 13, 70, 7933, 337, 1365, 11, 498, 286, 848, 286, 478, 516, 281, 747, 264, 3847, 4153, 2446, 420, 286, 478, 516], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 575, "seek": 289352, "start": 2898.36, "end": 2902.24, "text": " on holiday in August.", "tokens": [322, 9960, 294, 6897, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 576, "seek": 289352, "start": 2902.24, "end": 2906.84, "text": " So you want to store like August?", "tokens": [407, 291, 528, 281, 3531, 411, 6897, 30], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 577, "seek": 289352, "start": 2906.84, "end": 2908.92, "text": " Well, August 24.", "tokens": [1042, 11, 6897, 4022, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 578, "seek": 289352, "start": 2908.92, "end": 2910.32, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 579, "seek": 289352, "start": 2910.32, "end": 2912.7599999999998, "text": " So you can use a date with no context.", "tokens": [407, 291, 393, 764, 257, 4002, 365, 572, 4319, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 580, "seek": 289352, "start": 2912.7599999999998, "end": 2915.24, "text": " You can use a date that says August 24.", "tokens": [509, 393, 764, 257, 4002, 300, 1619, 6897, 4022, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 581, "seek": 289352, "start": 2915.24, "end": 2919.24, "text": " Well no, not as in August 24, as in August 2024.", "tokens": [1042, 572, 11, 406, 382, 294, 6897, 4022, 11, 382, 294, 6897, 45237, 13], "temperature": 0.0, "avg_logprob": -0.2694719816509046, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.0008376524201594293}, {"id": 582, "seek": 291924, "start": 2919.24, "end": 2926.24, "text": " Okay, so you can just use extract from that date or truncate and lose all of the other", "tokens": [1033, 11, 370, 291, 393, 445, 764, 8947, 490, 300, 4002, 420, 504, 409, 66, 473, 293, 3624, 439, 295, 264, 661], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 583, "seek": 291924, "start": 2926.24, "end": 2932.6, "text": " context with that date and only store August 2024.", "tokens": [4319, 365, 300, 4002, 293, 787, 3531, 6897, 45237, 13], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 584, "seek": 291924, "start": 2932.6, "end": 2933.6, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 585, "seek": 291924, "start": 2933.6, "end": 2941.3999999999996, "text": " We have time for the very last question here, somebody who is ready.", "tokens": [492, 362, 565, 337, 264, 588, 1036, 1168, 510, 11, 2618, 567, 307, 1919, 13], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 586, "seek": 291924, "start": 2941.3999999999996, "end": 2942.3999999999996, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 587, "seek": 291924, "start": 2942.3999999999996, "end": 2947.9599999999996, "text": " When you write V2 of this presentation, what do the other don't do is that you would add?", "tokens": [1133, 291, 2464, 691, 17, 295, 341, 5860, 11, 437, 360, 264, 661, 500, 380, 360, 307, 300, 291, 576, 909, 30], "temperature": 0.0, "avg_logprob": -0.31937961144880816, "compression_ratio": 1.502415458937198, "no_speech_prob": 0.00038334826240316033}, {"id": 588, "seek": 294796, "start": 2947.96, "end": 2953.08, "text": " Other don't do is to involve like, I don't know, like foreign data wrappers or well or", "tokens": [5358, 500, 380, 360, 307, 281, 9494, 411, 11, 286, 500, 380, 458, 11, 411, 5329, 1412, 7843, 15226, 420, 731, 420], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 589, "seek": 294796, "start": 2953.08, "end": 2955.84, "text": " I guess the more exotic parts of Postgres that you would say.", "tokens": [286, 2041, 264, 544, 27063, 3166, 295, 10223, 45189, 300, 291, 576, 584, 13], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 590, "seek": 294796, "start": 2955.84, "end": 2958.64, "text": " Yeah, as I said, this talk couldn't be all-inclusive.", "tokens": [865, 11, 382, 286, 848, 11, 341, 751, 2809, 380, 312, 439, 12, 4647, 7233, 13], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 591, "seek": 294796, "start": 2958.64, "end": 2964.44, "text": " It was the top things that we see people doing wrong every day.", "tokens": [467, 390, 264, 1192, 721, 300, 321, 536, 561, 884, 2085, 633, 786, 13], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 592, "seek": 294796, "start": 2964.44, "end": 2966.44, "text": " Fair enough.", "tokens": [12157, 1547, 13], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 593, "seek": 294796, "start": 2966.44, "end": 2967.44, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.3448909086339614, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.0006073404219932854}, {"id": 594, "seek": 296744, "start": 2967.44, "end": 2981.44, "text": " So thanks everybody for staying until the very last talk.", "tokens": [407, 3231, 2201, 337, 7939, 1826, 264, 588, 1036, 751, 13], "temperature": 0.0, "avg_logprob": -0.2629750756656422, "compression_ratio": 1.4514285714285715, "no_speech_prob": 0.001040821080096066}, {"id": 595, "seek": 296744, "start": 2981.44, "end": 2982.44, "text": " Excellent.", "tokens": [16723, 13], "temperature": 0.0, "avg_logprob": -0.2629750756656422, "compression_ratio": 1.4514285714285715, "no_speech_prob": 0.001040821080096066}, {"id": 596, "seek": 296744, "start": 2982.44, "end": 2985.96, "text": " And remember, you can now get out here on the front because there are no more talks.", "tokens": [400, 1604, 11, 291, 393, 586, 483, 484, 510, 322, 264, 1868, 570, 456, 366, 572, 544, 6686, 13], "temperature": 0.0, "avg_logprob": -0.2629750756656422, "compression_ratio": 1.4514285714285715, "no_speech_prob": 0.001040821080096066}, {"id": 597, "seek": 296744, "start": 2985.96, "end": 2988.28, "text": " You can pick up your stickers here.", "tokens": [509, 393, 1888, 493, 428, 21019, 510, 13], "temperature": 0.0, "avg_logprob": -0.2629750756656422, "compression_ratio": 1.4514285714285715, "no_speech_prob": 0.001040821080096066}, {"id": 598, "seek": 296744, "start": 2988.28, "end": 2991.28, "text": " And once again, thank you, Jimmy, for your presentation.", "tokens": [400, 1564, 797, 11, 1309, 291, 11, 15709, 11, 337, 428, 5860, 13], "temperature": 0.0, "avg_logprob": -0.2629750756656422, "compression_ratio": 1.4514285714285715, "no_speech_prob": 0.001040821080096066}, {"id": 599, "seek": 299128, "start": 2991.28, "end": 2998.28, "text": " Cheers.", "tokens": [50364, 13006, 13, 50714], "temperature": 0.0, "avg_logprob": -0.8866091728210449, "compression_ratio": 0.4666666666666667, "no_speech_prob": 0.0007068865234032273}], "language": "en"}