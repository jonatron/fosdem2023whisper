{"text": " So, hi, I will start right away because my talk is quite packed, so I'm focusing on this working for Amazon in the Amazon Coretto team. My slides and the examples are on GitHub, I will show this link one more time at the end of the talk, so you don't have to take a copy. I am principal engineer in the Amazon Coretto team, working in the OpenGDK since more than 15 years, been with SAP before, that's for also more than 15 years and have various duties in the OpenGDK and JCP. So let's get started about firecrackers, so firecracker is a minimalistic virtual machine monitor, it's KVM backed, it only supports a limited set of devices, basically block and network devices which are virtualized to Vortio and a VSOC and a serial device that makes it very fast and also very secure because it doesn't support any exotic devices like for example QMU, it has a rest-based configuration, it's completely written in Rust which also makes it kind of safe, it's based on, it was forked from Google's CrossVM and it's nowadays based on Rust VMM library which is like a based library for virtual machine monitors and I think that's also used by CrossVM meanwhile. It supports a microvia metadata service which is basically a JSON storage where you can share data between guest and host because with full virtualization it's not easy to exchange data between guest and host because all the guest applications run on their own kernel and with this data service for example you don't need a network connection between host and guest and then the firecracker process itself supports in addition to the security provided by KVM, sandboxing, so a jailer utility which basically places the firecracker process on the host into additional C-group, change-route and sec-comp environment and it's all open source, Apache 2 licensed and it's the technology behind AWS Lambda. So every Lambda runs in its own firecracker virtualized container. So here's just a picture of what I've just told you. So we have the kernel with KVM on the downside and then we have the firecracker process which has a thread for each VCPU which you configure in your guest and then it has a special thread to handle IO and an API thread which is low priority to handle the rest requests and then it boots the guest kernel which has the VATIO devices and the VM thread handles these VATIO queues and maps them for network to tap devices on the host and for the block devices for either on a native block device on the host or on a file system which is exported as block device to the guest and then you can run a bit more application on the guest and you can run as many guests as you want, it's only limited by your amount of memory basically, and overhead by firecracker is just about 50 megabytes per, I know it's less, we will see, it's very small. So let's go to a demo. So I have to truncate the file. So here we just start firecracker, we specify the API socket where we communicate, we have a log file and a log info in the boot timer to see the boot time. And now from another terminal we start to config this with JSON data as I told you before, so we configure two VCPUs and 512 megabytes of memory. I have here a root file system, extended X4 root file system and a freshly compiled Linux kernel, so I will now use another REST command to configure the Linux image which will be booted and I pass quite a lot of kernel arguments, it's mostly to switch off devices which we don't need anyway and which unsupported and we define as init script to just run bash, so init script will be just a shell and then we finally have to define a root file system, that's our X4 file which I showed you before and now that we've configured everything we can just start the virtual machine again with a JSON request and when we go back into our window we see that now the virtual machine has been started and it took about 200 milliseconds to start bash and it's fully configured Linux, the image was assembled from Ubuntu 22 image and the kernel I've compiled it myself, you see we have two CPUs and about 512 megabytes of memory, so if we exit the shell it will be able just reboot because it was our init process, from this 200 milliseconds which you take to boot the serial device alone took about 100 milliseconds, so if you take that away usually in production you don't need the serial device it puts in 100 milliseconds and that's on my laptop, okay, so very quick comparison of Firecracker and Docker, so Firecracker is fully KVM virtualized, Docker has only C group namespace isolation, the good thing about C group namespace isolation only is that Docker images run on the same kernel so they can do copy and write, page cache memory sharing so if you run many of them they are denser whereas for if you run several Firecracker images they cannot directly share memory so you have to use ballooning devices for example in the guest to give back memory to the host, on the other side that's much more secure because every container has its own memory, its own kernel and Firecracker has snapshot support to a checkpoint the whole container like with the kernel everything together and Docker can use Crewe checkpoint to store in user space to do the same thing basically serialize Docker container with all processes to a file, I will see examples for that now, so now what is crack and Crewe, so as was mentioned before crack is called in native to store and checkpoint that's a new project in the OpenJDK, it has basically three points which are important, first one is to create the standard checkpoint restore notification API because many applications are not aware of being cloned and there is state, security, time, all this kind of stuff which an application might want to react upon especially not only when cloning but not only when checkpointing and restoring but especially when cloning the application, think for example of an application which logs to a file and then you checkpoint it and restart two clones and they both write to the same file they will corrupt the file usually so you have to take some measures if you run many things in parallel and the application is not prepared for that, so if you want to, a crack is currently not part of an official OpenJDK release it's still mostly a research project in the OpenJDK but you can already now make your application ready for crack by using the org crack API that's available on Maven Central and that basically wraps JDK crack namespace which is currently in the crack repository in OpenJDK but if it finds javax.crack once it should become available it will switch to that and it also offers the possibility to pass the custom implementations to a system property and then finally what makes crack interesting for many people to experiment with is that it basically integrates with Creel so it has a copy of Creel packed with the crack distribution so you can easily checkpoint your java process and restart it and then as I mentioned before Creel is checkpoint and restore in user space that's an old java functionality which allows to serialize a single process to the file system it uses kernel free cgroup freezer to freeze the processes or process tree and then writes all the memory to the disk and so on. Still Creel has some issues because it has to take to look at all the open file descriptors, shared memory segments, stuff like that which might not be available again when you restore the image whereas firecracker as I said before it restores the whole kernel with all the file system everything in place so it's much much simpler from that perspective. So let's take a quick demo on crack. So I have here open gdk.17 with crack extensions and then you simply pass the option checkpoint to that's a file and this is just a pet clinic up a spring boot pet clinic example application and I modified it to register with the orc crack callbacks as I said you can see here it's registered to orc crack and now that I've started it I can use j command to checkpoint it so I send it a checkpoint command and when you see just out of the box it didn't work it shows some exception because it found for example that the port 8080 is open and this uses a vanilla version of Tomcat which is implementing the crack callbacks so but that's not that bad it has a developer option which has to ignore exceptions so for this simple case it will probably work so let's try it started one more time prepare the checkpoint here so let's wait until it becomes ready so and now now checkpoint it and you see we also locked the resources so you see what they were about 10 file descriptors and most of them were okay because like the crack modified VM already knows a lot of the file descriptors the VM is using for example for the jar files it has opened or for the module files and it closes them by themselves without need to register anything so and the checkpoint you work and what's interesting is here that before checkpointing it calls the my the the listener the handler I installed in my pet clinic application so I could do additional stuff before checkpointing and now we can just restore this frozen process and you see it starts instantly it calls the after restore a hook I have registered and we can send a serial request on 8080 and yeah it basically still works so that's nice let's go further so now firecracker so that's basically combination of initial firecracker and crack I found it somehow funny that words are so similar so it's a play with words and my my opinion it's the best of two worlds to combine these two currently as I said a crack project is based on crew but I think it might be interesting to add support for firecracker as well and I'm currently working on that so with firecracker you can basically checkpoint a plain JDK even with if it's not modified by crack because as I said no need to worry to worry about fire descriptors so on one issue with firecracker as I said before you cannot trigger the checkpoint from Java so the crack implementation in open JDK can checkpoint itself because crew is running on the same kernel like the Java application so the Java just so JNI calls crew and checkpoints itself that's obviously not possible in firecracker because you cannot escape from the gas that's the whole thing about running it in in a in a fully virtualized guest so we need another means of communication but that's not not that complicated it offers maximum security and speed and I said before no copy and write memory sharing but you can use ballooning same page merging kernel features which are also have their plus and their drawbacks but things to investigate so let's do a firecracker demo with Java now to not bore you more with all this JSON request I've written a shell script which basically does all that in in one script and instead of calling bash it just starts Java as in it process and we can now submit the request and you see it's it's it's working it's here here is the request my I have still registered this this callbacks although I'm running on a vanilla JDK by using the org crack library so they are they are empty they won't do anything and I can now snapshot firecracker you see that's also quite quite fix quite quick firecracker is not is resumed automatically so I have to kill it manually and now if I restart from snapshot you will see it also it takes just a few milliseconds to restart the whole image and again I can see well into it it it works you see there is no the hooks are not being called because there is no real crack implementation in the back in this case but like checkpointing for Java itself works and it's also easy to run a second clone now obviously we cannot run it in the same namespace because it will use the same IP address like the like the first version so we we started in a in a network namespace so minus and zero is just to create a new namespace for for the clone and you see it uses IP net NS net names with exec to execute firecracker but it restores quite as quickly and the initial IP address of the of the of the process has now in this namespace is it's now mapped on a different IP address on the host but you see it's it's still working so in the get the guest still has the same IP address it has in the first place it's just running in its own namespace and inside the guest again the Tomcat is running on the same port all no problem so we just kill the first instance and we kill the we kill the second instance how much time do I have oh okay okay so just a few words I I realized that talks which are rated highest are usually so some animation so I decided to do animation because usually only so console console demos so quick introduction user fold demon is a is a possibility to handle page faults from the user space and firecracker offers the possibility instead of mapping the image file right into fires firecrackers memory to to use an external user fold demon and if we write the user fold demon ourselves we have the possibility to follow page by page which addresses get loaded at the restore and I found it interesting so I created that kind of thing so to an animation for that and for that we we restart our our our firecracker service native memory enabled native memory tracking and from the guest we do now ssh into into our firecracker guest where Tomcat is running and just call j command native memory details and and put that into a file and we do the same thing with the pmap information this is just a shell script inside the guest which basically prints all the virtual to physical mappings for all processes into a file and now we can start the the visualizer and it takes the locks oops it it takes the locks of the user fold demon and the nmt and the native mapping so what you see here is basically the physical memory layout of the guest so it's memory page zero and in the end it's memory page one gigabyte and every square is four kilobyte page and if you go and that's on the java process for example you see the dark these are the pages the rss of the java process blue ones are occupied by the java process but they are also in the page cache so that's probably a file for example or something or uh uh class uh spare shell class for example when you when you look at the nmt output we see that for example for the classes we use about 66 i probably cannot read it it says virtually 69 megabytes uh rss is 60 megabytes and user fold demon loaded about 10 megabytes of it and here's the the animation i promised you so this is how the pages got loaded when we did the first call request on a on a resumed image and like the the yellow ones are all the pages which i've loaded and the orange one i don't know yeah some are orange belong to the to the to the virtual memory region i have selected here so for example all the orange pages are the the parts of the class space which got loaded for the first request so this is a lot of space for more investigation would be nice to to compact this more like physically because you want to prefetch the the things which get loaded especially if you download your images from from network for example and but the problem is that all the physical address space is continuous like the virtual uh the physical pages are are not and try to look into uh possibility to do that so that that's it thank you thank you very much there's about 30 seconds for questions is anyone got a question called your answer question i have a question regarding uh when you showed uh uh crack uh implementation there was uh implementation that put into the uh so yeah yes i unfortunately there is no time in 20 minutes to show that but you can obviously use the current crack implementation inside firecracker use j command and instead of crue there is a backend called uh post handler that's just a small program which instead of calling crue just dispense the whole process and then you can send in the signal to restore it so with firecracker you basically checkpoint with the post engine then do the firecracker snapshot then restore firecracker and then just do an ssh with a kill signal on on the process and it will will restart that's one possibility another one is i wrote the jvmti agent which basically has the same thing even without crue it uh it um suspends all threads it calls system gc and then waits uh on a on a port so you just ping it with telnet or whatsoever and and it even calls uh the the the the hooks by implementing the this custom possibility to uh with the property so i i i i say or crack to use my crack implementation to call the hooks so that all works it's in the in the repository which is i had a resource slide which i didn't show it has all the links so", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.26, "text": " So, hi, I will start right away because my talk is quite packed, so I'm focusing on", "tokens": [407, 11, 4879, 11, 286, 486, 722, 558, 1314, 570, 452, 751, 307, 1596, 13265, 11, 370, 286, 478, 8416, 322], "temperature": 0.0, "avg_logprob": -0.2526815055620552, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.1002337709069252}, {"id": 1, "seek": 0, "start": 12.26, "end": 17.44, "text": " this working for Amazon in the Amazon Coretto team.", "tokens": [341, 1364, 337, 6795, 294, 264, 6795, 14798, 83, 1353, 1469, 13], "temperature": 0.0, "avg_logprob": -0.2526815055620552, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.1002337709069252}, {"id": 2, "seek": 0, "start": 17.44, "end": 21.6, "text": " My slides and the examples are on GitHub, I will show this link one more time at the", "tokens": [1222, 9788, 293, 264, 5110, 366, 322, 23331, 11, 286, 486, 855, 341, 2113, 472, 544, 565, 412, 264], "temperature": 0.0, "avg_logprob": -0.2526815055620552, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.1002337709069252}, {"id": 3, "seek": 0, "start": 21.6, "end": 24.96, "text": " end of the talk, so you don't have to take a copy.", "tokens": [917, 295, 264, 751, 11, 370, 291, 500, 380, 362, 281, 747, 257, 5055, 13], "temperature": 0.0, "avg_logprob": -0.2526815055620552, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.1002337709069252}, {"id": 4, "seek": 0, "start": 24.96, "end": 29.28, "text": " I am principal engineer in the Amazon Coretto team, working in the OpenGDK since more than", "tokens": [286, 669, 9716, 11403, 294, 264, 6795, 14798, 83, 1353, 1469, 11, 1364, 294, 264, 7238, 38, 35, 42, 1670, 544, 813], "temperature": 0.0, "avg_logprob": -0.2526815055620552, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.1002337709069252}, {"id": 5, "seek": 2928, "start": 29.28, "end": 39.6, "text": " 15 years, been with SAP before, that's for also more than 15 years and have various duties", "tokens": [2119, 924, 11, 668, 365, 27743, 949, 11, 300, 311, 337, 611, 544, 813, 2119, 924, 293, 362, 3683, 20910], "temperature": 0.0, "avg_logprob": -0.25358234919034517, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.00016574724577367306}, {"id": 6, "seek": 2928, "start": 39.6, "end": 42.08, "text": " in the OpenGDK and JCP.", "tokens": [294, 264, 7238, 38, 35, 42, 293, 508, 20049, 13], "temperature": 0.0, "avg_logprob": -0.25358234919034517, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.00016574724577367306}, {"id": 7, "seek": 2928, "start": 42.08, "end": 46.08, "text": " So let's get started about firecrackers, so firecracker is a minimalistic virtual machine", "tokens": [407, 718, 311, 483, 1409, 466, 2610, 10757, 501, 433, 11, 370, 2610, 10757, 23599, 307, 257, 13206, 3142, 6374, 3479], "temperature": 0.0, "avg_logprob": -0.25358234919034517, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.00016574724577367306}, {"id": 8, "seek": 2928, "start": 46.08, "end": 52.36, "text": " monitor, it's KVM backed, it only supports a limited set of devices, basically block", "tokens": [6002, 11, 309, 311, 591, 53, 44, 20391, 11, 309, 787, 9346, 257, 5567, 992, 295, 5759, 11, 1936, 3461], "temperature": 0.0, "avg_logprob": -0.25358234919034517, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.00016574724577367306}, {"id": 9, "seek": 2928, "start": 52.36, "end": 57.24, "text": " and network devices which are virtualized to Vortio and a VSOC and a serial device that", "tokens": [293, 3209, 5759, 597, 366, 6374, 1602, 281, 691, 477, 1004, 293, 257, 691, 17188, 34, 293, 257, 17436, 4302, 300], "temperature": 0.0, "avg_logprob": -0.25358234919034517, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.00016574724577367306}, {"id": 10, "seek": 5724, "start": 57.24, "end": 63.440000000000005, "text": " makes it very fast and also very secure because it doesn't support any exotic devices like", "tokens": [1669, 309, 588, 2370, 293, 611, 588, 7144, 570, 309, 1177, 380, 1406, 604, 27063, 5759, 411], "temperature": 0.0, "avg_logprob": -0.17007088434128534, "compression_ratio": 1.6454183266932272, "no_speech_prob": 7.832455594325438e-05}, {"id": 11, "seek": 5724, "start": 63.440000000000005, "end": 68.72, "text": " for example QMU, it has a rest-based configuration, it's completely written in Rust which also", "tokens": [337, 1365, 1249, 44, 52, 11, 309, 575, 257, 1472, 12, 6032, 11694, 11, 309, 311, 2584, 3720, 294, 34952, 597, 611], "temperature": 0.0, "avg_logprob": -0.17007088434128534, "compression_ratio": 1.6454183266932272, "no_speech_prob": 7.832455594325438e-05}, {"id": 12, "seek": 5724, "start": 68.72, "end": 77.24000000000001, "text": " makes it kind of safe, it's based on, it was forked from Google's CrossVM and it's nowadays", "tokens": [1669, 309, 733, 295, 3273, 11, 309, 311, 2361, 322, 11, 309, 390, 17716, 292, 490, 3329, 311, 11623, 53, 44, 293, 309, 311, 13434], "temperature": 0.0, "avg_logprob": -0.17007088434128534, "compression_ratio": 1.6454183266932272, "no_speech_prob": 7.832455594325438e-05}, {"id": 13, "seek": 5724, "start": 77.24000000000001, "end": 82.88, "text": " based on Rust VMM library which is like a based library for virtual machine monitors", "tokens": [2361, 322, 34952, 691, 17365, 6405, 597, 307, 411, 257, 2361, 6405, 337, 6374, 3479, 26518], "temperature": 0.0, "avg_logprob": -0.17007088434128534, "compression_ratio": 1.6454183266932272, "no_speech_prob": 7.832455594325438e-05}, {"id": 14, "seek": 5724, "start": 82.88, "end": 86.24000000000001, "text": " and I think that's also used by CrossVM meanwhile.", "tokens": [293, 286, 519, 300, 311, 611, 1143, 538, 11623, 53, 44, 29252, 13], "temperature": 0.0, "avg_logprob": -0.17007088434128534, "compression_ratio": 1.6454183266932272, "no_speech_prob": 7.832455594325438e-05}, {"id": 15, "seek": 8624, "start": 86.24, "end": 91.19999999999999, "text": " It supports a microvia metadata service which is basically a JSON storage where you can", "tokens": [467, 9346, 257, 4532, 11617, 26603, 2643, 597, 307, 1936, 257, 31828, 6725, 689, 291, 393], "temperature": 0.0, "avg_logprob": -0.14405303416044815, "compression_ratio": 1.7894736842105263, "no_speech_prob": 5.965638410998508e-05}, {"id": 16, "seek": 8624, "start": 91.19999999999999, "end": 95.83999999999999, "text": " share data between guest and host because with full virtualization it's not easy to", "tokens": [2073, 1412, 1296, 8341, 293, 3975, 570, 365, 1577, 6374, 2144, 309, 311, 406, 1858, 281], "temperature": 0.0, "avg_logprob": -0.14405303416044815, "compression_ratio": 1.7894736842105263, "no_speech_prob": 5.965638410998508e-05}, {"id": 17, "seek": 8624, "start": 95.83999999999999, "end": 100.96, "text": " exchange data between guest and host because all the guest applications run on their own", "tokens": [7742, 1412, 1296, 8341, 293, 3975, 570, 439, 264, 8341, 5821, 1190, 322, 641, 1065], "temperature": 0.0, "avg_logprob": -0.14405303416044815, "compression_ratio": 1.7894736842105263, "no_speech_prob": 5.965638410998508e-05}, {"id": 18, "seek": 8624, "start": 100.96, "end": 106.28, "text": " kernel and with this data service for example you don't need a network connection between", "tokens": [28256, 293, 365, 341, 1412, 2643, 337, 1365, 291, 500, 380, 643, 257, 3209, 4984, 1296], "temperature": 0.0, "avg_logprob": -0.14405303416044815, "compression_ratio": 1.7894736842105263, "no_speech_prob": 5.965638410998508e-05}, {"id": 19, "seek": 8624, "start": 106.28, "end": 111.52, "text": " host and guest and then the firecracker process itself supports in addition to the security", "tokens": [3975, 293, 8341, 293, 550, 264, 2610, 10757, 23599, 1399, 2564, 9346, 294, 4500, 281, 264, 3825], "temperature": 0.0, "avg_logprob": -0.14405303416044815, "compression_ratio": 1.7894736842105263, "no_speech_prob": 5.965638410998508e-05}, {"id": 20, "seek": 11152, "start": 111.52, "end": 119.08, "text": " provided by KVM, sandboxing, so a jailer utility which basically places the firecracker process", "tokens": [5649, 538, 591, 53, 44, 11, 42115, 278, 11, 370, 257, 10511, 260, 14877, 597, 1936, 3190, 264, 2610, 10757, 23599, 1399], "temperature": 0.0, "avg_logprob": -0.23464816449636436, "compression_ratio": 1.452914798206278, "no_speech_prob": 5.0050064601236954e-05}, {"id": 21, "seek": 11152, "start": 119.08, "end": 124.08, "text": " on the host into additional C-group, change-route and sec-comp environment and it's all open", "tokens": [322, 264, 3975, 666, 4497, 383, 12, 17377, 11, 1319, 12, 81, 14040, 293, 907, 12, 21541, 2823, 293, 309, 311, 439, 1269], "temperature": 0.0, "avg_logprob": -0.23464816449636436, "compression_ratio": 1.452914798206278, "no_speech_prob": 5.0050064601236954e-05}, {"id": 22, "seek": 11152, "start": 124.08, "end": 131.24, "text": " source, Apache 2 licensed and it's the technology behind AWS Lambda.", "tokens": [4009, 11, 46597, 568, 25225, 293, 309, 311, 264, 2899, 2261, 17650, 45691, 13], "temperature": 0.0, "avg_logprob": -0.23464816449636436, "compression_ratio": 1.452914798206278, "no_speech_prob": 5.0050064601236954e-05}, {"id": 23, "seek": 11152, "start": 131.24, "end": 136.88, "text": " So every Lambda runs in its own firecracker virtualized container.", "tokens": [407, 633, 45691, 6676, 294, 1080, 1065, 2610, 10757, 23599, 6374, 1602, 10129, 13], "temperature": 0.0, "avg_logprob": -0.23464816449636436, "compression_ratio": 1.452914798206278, "no_speech_prob": 5.0050064601236954e-05}, {"id": 24, "seek": 13688, "start": 136.88, "end": 141.51999999999998, "text": " So here's just a picture of what I've just told you.", "tokens": [407, 510, 311, 445, 257, 3036, 295, 437, 286, 600, 445, 1907, 291, 13], "temperature": 0.0, "avg_logprob": -0.16506364412396868, "compression_ratio": 1.8034188034188035, "no_speech_prob": 2.1800435206387192e-05}, {"id": 25, "seek": 13688, "start": 141.51999999999998, "end": 146.68, "text": " So we have the kernel with KVM on the downside and then we have the firecracker process which", "tokens": [407, 321, 362, 264, 28256, 365, 591, 53, 44, 322, 264, 25060, 293, 550, 321, 362, 264, 2610, 10757, 23599, 1399, 597], "temperature": 0.0, "avg_logprob": -0.16506364412396868, "compression_ratio": 1.8034188034188035, "no_speech_prob": 2.1800435206387192e-05}, {"id": 26, "seek": 13688, "start": 146.68, "end": 153.35999999999999, "text": " has a thread for each VCPU which you configure in your guest and then it has a special thread", "tokens": [575, 257, 7207, 337, 1184, 41922, 8115, 597, 291, 22162, 294, 428, 8341, 293, 550, 309, 575, 257, 2121, 7207], "temperature": 0.0, "avg_logprob": -0.16506364412396868, "compression_ratio": 1.8034188034188035, "no_speech_prob": 2.1800435206387192e-05}, {"id": 27, "seek": 13688, "start": 153.35999999999999, "end": 159.48, "text": " to handle IO and an API thread which is low priority to handle the rest requests and then", "tokens": [281, 4813, 39839, 293, 364, 9362, 7207, 597, 307, 2295, 9365, 281, 4813, 264, 1472, 12475, 293, 550], "temperature": 0.0, "avg_logprob": -0.16506364412396868, "compression_ratio": 1.8034188034188035, "no_speech_prob": 2.1800435206387192e-05}, {"id": 28, "seek": 13688, "start": 159.48, "end": 166.35999999999999, "text": " it boots the guest kernel which has the VATIO devices and the VM thread handles these VATIO", "tokens": [309, 15194, 264, 8341, 28256, 597, 575, 264, 691, 2218, 15167, 5759, 293, 264, 18038, 7207, 18722, 613, 691, 2218, 15167], "temperature": 0.0, "avg_logprob": -0.16506364412396868, "compression_ratio": 1.8034188034188035, "no_speech_prob": 2.1800435206387192e-05}, {"id": 29, "seek": 16636, "start": 166.36, "end": 172.92000000000002, "text": " queues and maps them for network to tap devices on the host and for the block devices for", "tokens": [631, 1247, 293, 11317, 552, 337, 3209, 281, 5119, 5759, 322, 264, 3975, 293, 337, 264, 3461, 5759, 337], "temperature": 0.0, "avg_logprob": -0.16753798861836278, "compression_ratio": 1.8489583333333333, "no_speech_prob": 9.905657498165965e-05}, {"id": 30, "seek": 16636, "start": 172.92000000000002, "end": 177.92000000000002, "text": " either on a native block device on the host or on a file system which is exported as", "tokens": [2139, 322, 257, 8470, 3461, 4302, 322, 264, 3975, 420, 322, 257, 3991, 1185, 597, 307, 42055, 382], "temperature": 0.0, "avg_logprob": -0.16753798861836278, "compression_ratio": 1.8489583333333333, "no_speech_prob": 9.905657498165965e-05}, {"id": 31, "seek": 16636, "start": 177.92000000000002, "end": 183.0, "text": " block device to the guest and then you can run a bit more application on the guest and", "tokens": [3461, 4302, 281, 264, 8341, 293, 550, 291, 393, 1190, 257, 857, 544, 3861, 322, 264, 8341, 293], "temperature": 0.0, "avg_logprob": -0.16753798861836278, "compression_ratio": 1.8489583333333333, "no_speech_prob": 9.905657498165965e-05}, {"id": 32, "seek": 16636, "start": 183.0, "end": 190.0, "text": " you can run as many guests as you want, it's only limited by your amount of memory basically,", "tokens": [291, 393, 1190, 382, 867, 9804, 382, 291, 528, 11, 309, 311, 787, 5567, 538, 428, 2372, 295, 4675, 1936, 11], "temperature": 0.0, "avg_logprob": -0.16753798861836278, "compression_ratio": 1.8489583333333333, "no_speech_prob": 9.905657498165965e-05}, {"id": 33, "seek": 19000, "start": 190.0, "end": 198.32, "text": " and overhead by firecracker is just about 50 megabytes per, I know it's less, we will", "tokens": [293, 19922, 538, 2610, 10757, 23599, 307, 445, 466, 2625, 10816, 24538, 680, 11, 286, 458, 309, 311, 1570, 11, 321, 486], "temperature": 0.0, "avg_logprob": -0.21446492671966552, "compression_ratio": 1.4709302325581395, "no_speech_prob": 4.668223482440226e-05}, {"id": 34, "seek": 19000, "start": 198.32, "end": 201.52, "text": " see, it's very small.", "tokens": [536, 11, 309, 311, 588, 1359, 13], "temperature": 0.0, "avg_logprob": -0.21446492671966552, "compression_ratio": 1.4709302325581395, "no_speech_prob": 4.668223482440226e-05}, {"id": 35, "seek": 19000, "start": 201.52, "end": 208.12, "text": " So let's go to a demo.", "tokens": [407, 718, 311, 352, 281, 257, 10723, 13], "temperature": 0.0, "avg_logprob": -0.21446492671966552, "compression_ratio": 1.4709302325581395, "no_speech_prob": 4.668223482440226e-05}, {"id": 36, "seek": 19000, "start": 208.12, "end": 210.16, "text": " So I have to truncate the file.", "tokens": [407, 286, 362, 281, 504, 409, 66, 473, 264, 3991, 13], "temperature": 0.0, "avg_logprob": -0.21446492671966552, "compression_ratio": 1.4709302325581395, "no_speech_prob": 4.668223482440226e-05}, {"id": 37, "seek": 19000, "start": 210.16, "end": 218.16, "text": " So here we just start firecracker, we specify the API socket where we communicate, we have", "tokens": [407, 510, 321, 445, 722, 2610, 10757, 23599, 11, 321, 16500, 264, 9362, 19741, 689, 321, 7890, 11, 321, 362], "temperature": 0.0, "avg_logprob": -0.21446492671966552, "compression_ratio": 1.4709302325581395, "no_speech_prob": 4.668223482440226e-05}, {"id": 38, "seek": 21816, "start": 218.16, "end": 223.07999999999998, "text": " a log file and a log info in the boot timer to see the boot time.", "tokens": [257, 3565, 3991, 293, 257, 3565, 13614, 294, 264, 11450, 19247, 281, 536, 264, 11450, 565, 13], "temperature": 0.0, "avg_logprob": -0.21337828636169434, "compression_ratio": 1.4754901960784315, "no_speech_prob": 0.00010264375305268914}, {"id": 39, "seek": 21816, "start": 223.07999999999998, "end": 231.04, "text": " And now from another terminal we start to config this with JSON data as I told you before,", "tokens": [400, 586, 490, 1071, 14709, 321, 722, 281, 6662, 341, 365, 31828, 1412, 382, 286, 1907, 291, 949, 11], "temperature": 0.0, "avg_logprob": -0.21337828636169434, "compression_ratio": 1.4754901960784315, "no_speech_prob": 0.00010264375305268914}, {"id": 40, "seek": 21816, "start": 231.04, "end": 240.35999999999999, "text": " so we configure two VCPUs and 512 megabytes of memory.", "tokens": [370, 321, 22162, 732, 41922, 8115, 82, 293, 1025, 4762, 10816, 24538, 295, 4675, 13], "temperature": 0.0, "avg_logprob": -0.21337828636169434, "compression_ratio": 1.4754901960784315, "no_speech_prob": 0.00010264375305268914}, {"id": 41, "seek": 21816, "start": 240.35999999999999, "end": 247.4, "text": " I have here a root file system, extended X4 root file system and a freshly compiled Linux", "tokens": [286, 362, 510, 257, 5593, 3991, 1185, 11, 10913, 1783, 19, 5593, 3991, 1185, 293, 257, 34412, 36548, 18734], "temperature": 0.0, "avg_logprob": -0.21337828636169434, "compression_ratio": 1.4754901960784315, "no_speech_prob": 0.00010264375305268914}, {"id": 42, "seek": 24740, "start": 247.4, "end": 257.64, "text": " kernel, so I will now use another REST command to configure the Linux image which will be", "tokens": [28256, 11, 370, 286, 486, 586, 764, 1071, 497, 14497, 5622, 281, 22162, 264, 18734, 3256, 597, 486, 312], "temperature": 0.0, "avg_logprob": -0.18456147698795095, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.0002103830047417432}, {"id": 43, "seek": 24740, "start": 257.64, "end": 263.32, "text": " booted and I pass quite a lot of kernel arguments, it's mostly to switch off devices which we", "tokens": [11450, 292, 293, 286, 1320, 1596, 257, 688, 295, 28256, 12869, 11, 309, 311, 5240, 281, 3679, 766, 5759, 597, 321], "temperature": 0.0, "avg_logprob": -0.18456147698795095, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.0002103830047417432}, {"id": 44, "seek": 24740, "start": 263.32, "end": 268.52, "text": " don't need anyway and which unsupported and we define as init script to just run bash,", "tokens": [500, 380, 643, 4033, 293, 597, 2693, 10504, 14813, 293, 321, 6964, 382, 3157, 5755, 281, 445, 1190, 46183, 11], "temperature": 0.0, "avg_logprob": -0.18456147698795095, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.0002103830047417432}, {"id": 45, "seek": 26852, "start": 268.52, "end": 278.32, "text": " so init script will be just a shell and then we finally have to define a root file system,", "tokens": [370, 3157, 5755, 486, 312, 445, 257, 8720, 293, 550, 321, 2721, 362, 281, 6964, 257, 5593, 3991, 1185, 11], "temperature": 0.0, "avg_logprob": -0.16505458241417295, "compression_ratio": 1.5689655172413792, "no_speech_prob": 6.201047654030845e-05}, {"id": 46, "seek": 26852, "start": 278.32, "end": 284.47999999999996, "text": " that's our X4 file which I showed you before and now that we've configured everything we", "tokens": [300, 311, 527, 1783, 19, 3991, 597, 286, 4712, 291, 949, 293, 586, 300, 321, 600, 30538, 1203, 321], "temperature": 0.0, "avg_logprob": -0.16505458241417295, "compression_ratio": 1.5689655172413792, "no_speech_prob": 6.201047654030845e-05}, {"id": 47, "seek": 26852, "start": 284.47999999999996, "end": 292.08, "text": " can just start the virtual machine again with a JSON request and when we go back into our", "tokens": [393, 445, 722, 264, 6374, 3479, 797, 365, 257, 31828, 5308, 293, 562, 321, 352, 646, 666, 527], "temperature": 0.0, "avg_logprob": -0.16505458241417295, "compression_ratio": 1.5689655172413792, "no_speech_prob": 6.201047654030845e-05}, {"id": 48, "seek": 26852, "start": 292.08, "end": 297.64, "text": " window we see that now the virtual machine has been started and it took about 200 milliseconds", "tokens": [4910, 321, 536, 300, 586, 264, 6374, 3479, 575, 668, 1409, 293, 309, 1890, 466, 2331, 34184], "temperature": 0.0, "avg_logprob": -0.16505458241417295, "compression_ratio": 1.5689655172413792, "no_speech_prob": 6.201047654030845e-05}, {"id": 49, "seek": 29764, "start": 297.64, "end": 312.96, "text": " to start bash and it's fully configured Linux, the image was assembled from Ubuntu 22 image", "tokens": [281, 722, 46183, 293, 309, 311, 4498, 30538, 18734, 11, 264, 3256, 390, 24204, 490, 30230, 45605, 5853, 3256], "temperature": 0.0, "avg_logprob": -0.19184460847274118, "compression_ratio": 1.058139534883721, "no_speech_prob": 0.0007469817064702511}, {"id": 50, "seek": 31296, "start": 312.96, "end": 329.59999999999997, "text": " and the kernel I've compiled it myself, you see we have two CPUs and about 512 megabytes", "tokens": [293, 264, 28256, 286, 600, 36548, 309, 2059, 11, 291, 536, 321, 362, 732, 13199, 82, 293, 466, 1025, 4762, 10816, 24538], "temperature": 0.0, "avg_logprob": -0.20509417851765951, "compression_ratio": 1.2589928057553956, "no_speech_prob": 5.1761471695499495e-05}, {"id": 51, "seek": 31296, "start": 329.59999999999997, "end": 335.2, "text": " of memory, so if we exit the shell it will be able just reboot because it was our init", "tokens": [295, 4675, 11, 370, 498, 321, 11043, 264, 8720, 309, 486, 312, 1075, 445, 33818, 570, 309, 390, 527, 3157], "temperature": 0.0, "avg_logprob": -0.20509417851765951, "compression_ratio": 1.2589928057553956, "no_speech_prob": 5.1761471695499495e-05}, {"id": 52, "seek": 33520, "start": 335.2, "end": 343.47999999999996, "text": " process, from this 200 milliseconds which you take to boot the serial device alone took", "tokens": [1399, 11, 490, 341, 2331, 34184, 597, 291, 747, 281, 11450, 264, 17436, 4302, 3312, 1890], "temperature": 0.0, "avg_logprob": -0.17732320829879405, "compression_ratio": 1.6775700934579438, "no_speech_prob": 9.078121365746483e-06}, {"id": 53, "seek": 33520, "start": 343.47999999999996, "end": 348.32, "text": " about 100 milliseconds, so if you take that away usually in production you don't need", "tokens": [466, 2319, 34184, 11, 370, 498, 291, 747, 300, 1314, 2673, 294, 4265, 291, 500, 380, 643], "temperature": 0.0, "avg_logprob": -0.17732320829879405, "compression_ratio": 1.6775700934579438, "no_speech_prob": 9.078121365746483e-06}, {"id": 54, "seek": 33520, "start": 348.32, "end": 359.84, "text": " the serial device it puts in 100 milliseconds and that's on my laptop, okay, so very quick", "tokens": [264, 17436, 4302, 309, 8137, 294, 2319, 34184, 293, 300, 311, 322, 452, 10732, 11, 1392, 11, 370, 588, 1702], "temperature": 0.0, "avg_logprob": -0.17732320829879405, "compression_ratio": 1.6775700934579438, "no_speech_prob": 9.078121365746483e-06}, {"id": 55, "seek": 33520, "start": 359.84, "end": 365.15999999999997, "text": " comparison of Firecracker and Docker, so Firecracker is fully KVM virtualized, Docker has only", "tokens": [9660, 295, 7652, 10757, 23599, 293, 33772, 11, 370, 7652, 10757, 23599, 307, 4498, 591, 53, 44, 6374, 1602, 11, 33772, 575, 787], "temperature": 0.0, "avg_logprob": -0.17732320829879405, "compression_ratio": 1.6775700934579438, "no_speech_prob": 9.078121365746483e-06}, {"id": 56, "seek": 36516, "start": 365.16, "end": 371.20000000000005, "text": " C group namespace isolation, the good thing about C group namespace isolation only is", "tokens": [383, 1594, 5288, 17940, 16001, 11, 264, 665, 551, 466, 383, 1594, 5288, 17940, 16001, 787, 307], "temperature": 0.0, "avg_logprob": -0.1594470977783203, "compression_ratio": 1.810483870967742, "no_speech_prob": 0.00015057747077662498}, {"id": 57, "seek": 36516, "start": 371.20000000000005, "end": 376.08000000000004, "text": " that Docker images run on the same kernel so they can do copy and write, page cache memory", "tokens": [300, 33772, 5267, 1190, 322, 264, 912, 28256, 370, 436, 393, 360, 5055, 293, 2464, 11, 3028, 19459, 4675], "temperature": 0.0, "avg_logprob": -0.1594470977783203, "compression_ratio": 1.810483870967742, "no_speech_prob": 0.00015057747077662498}, {"id": 58, "seek": 36516, "start": 376.08000000000004, "end": 384.16, "text": " sharing so if you run many of them they are denser whereas for if you run several Firecracker", "tokens": [5414, 370, 498, 291, 1190, 867, 295, 552, 436, 366, 24505, 260, 9735, 337, 498, 291, 1190, 2940, 7652, 10757, 23599], "temperature": 0.0, "avg_logprob": -0.1594470977783203, "compression_ratio": 1.810483870967742, "no_speech_prob": 0.00015057747077662498}, {"id": 59, "seek": 36516, "start": 384.16, "end": 388.6, "text": " images they cannot directly share memory so you have to use ballooning devices for example", "tokens": [5267, 436, 2644, 3838, 2073, 4675, 370, 291, 362, 281, 764, 16994, 278, 5759, 337, 1365], "temperature": 0.0, "avg_logprob": -0.1594470977783203, "compression_ratio": 1.810483870967742, "no_speech_prob": 0.00015057747077662498}, {"id": 60, "seek": 36516, "start": 388.6, "end": 393.28000000000003, "text": " in the guest to give back memory to the host, on the other side that's much more secure", "tokens": [294, 264, 8341, 281, 976, 646, 4675, 281, 264, 3975, 11, 322, 264, 661, 1252, 300, 311, 709, 544, 7144], "temperature": 0.0, "avg_logprob": -0.1594470977783203, "compression_ratio": 1.810483870967742, "no_speech_prob": 0.00015057747077662498}, {"id": 61, "seek": 39328, "start": 393.28, "end": 401.67999999999995, "text": " because every container has its own memory, its own kernel and Firecracker has snapshot", "tokens": [570, 633, 10129, 575, 1080, 1065, 4675, 11, 1080, 1065, 28256, 293, 7652, 10757, 23599, 575, 30163], "temperature": 0.0, "avg_logprob": -0.20233397483825682, "compression_ratio": 1.721698113207547, "no_speech_prob": 2.4866696548997425e-05}, {"id": 62, "seek": 39328, "start": 401.67999999999995, "end": 406.55999999999995, "text": " support to a checkpoint the whole container like with the kernel everything together and", "tokens": [1406, 281, 257, 42269, 264, 1379, 10129, 411, 365, 264, 28256, 1203, 1214, 293], "temperature": 0.0, "avg_logprob": -0.20233397483825682, "compression_ratio": 1.721698113207547, "no_speech_prob": 2.4866696548997425e-05}, {"id": 63, "seek": 39328, "start": 406.55999999999995, "end": 413.59999999999997, "text": " Docker can use Crewe checkpoint to store in user space to do the same thing basically serialize", "tokens": [33772, 393, 764, 9549, 826, 42269, 281, 3531, 294, 4195, 1901, 281, 360, 264, 912, 551, 1936, 17436, 1125], "temperature": 0.0, "avg_logprob": -0.20233397483825682, "compression_ratio": 1.721698113207547, "no_speech_prob": 2.4866696548997425e-05}, {"id": 64, "seek": 39328, "start": 413.59999999999997, "end": 421.59999999999997, "text": " Docker container with all processes to a file, I will see examples for that now, so now what", "tokens": [33772, 10129, 365, 439, 7555, 281, 257, 3991, 11, 286, 486, 536, 5110, 337, 300, 586, 11, 370, 586, 437], "temperature": 0.0, "avg_logprob": -0.20233397483825682, "compression_ratio": 1.721698113207547, "no_speech_prob": 2.4866696548997425e-05}, {"id": 65, "seek": 42160, "start": 421.6, "end": 427.20000000000005, "text": " is crack and Crewe, so as was mentioned before crack is called in native to store and checkpoint", "tokens": [307, 6226, 293, 9549, 826, 11, 370, 382, 390, 2835, 949, 6226, 307, 1219, 294, 8470, 281, 3531, 293, 42269], "temperature": 0.0, "avg_logprob": -0.22520695176235464, "compression_ratio": 1.5991379310344827, "no_speech_prob": 6.312517507467419e-05}, {"id": 66, "seek": 42160, "start": 427.20000000000005, "end": 434.32000000000005, "text": " that's a new project in the OpenJDK, it has basically three points which are important,", "tokens": [300, 311, 257, 777, 1716, 294, 264, 7238, 41, 35, 42, 11, 309, 575, 1936, 1045, 2793, 597, 366, 1021, 11], "temperature": 0.0, "avg_logprob": -0.22520695176235464, "compression_ratio": 1.5991379310344827, "no_speech_prob": 6.312517507467419e-05}, {"id": 67, "seek": 42160, "start": 434.32000000000005, "end": 441.12, "text": " first one is to create the standard checkpoint restore notification API because many applications", "tokens": [700, 472, 307, 281, 1884, 264, 3832, 42269, 15227, 11554, 9362, 570, 867, 5821], "temperature": 0.0, "avg_logprob": -0.22520695176235464, "compression_ratio": 1.5991379310344827, "no_speech_prob": 6.312517507467419e-05}, {"id": 68, "seek": 42160, "start": 441.12, "end": 449.6, "text": " are not aware of being cloned and there is state, security, time, all this kind of stuff", "tokens": [366, 406, 3650, 295, 885, 596, 19009, 293, 456, 307, 1785, 11, 3825, 11, 565, 11, 439, 341, 733, 295, 1507], "temperature": 0.0, "avg_logprob": -0.22520695176235464, "compression_ratio": 1.5991379310344827, "no_speech_prob": 6.312517507467419e-05}, {"id": 69, "seek": 44960, "start": 449.6, "end": 455.92, "text": " which an application might want to react upon especially not only when cloning but not only", "tokens": [597, 364, 3861, 1062, 528, 281, 4515, 3564, 2318, 406, 787, 562, 596, 16638, 457, 406, 787], "temperature": 0.0, "avg_logprob": -0.1790142854054769, "compression_ratio": 2.004424778761062, "no_speech_prob": 3.784603177336976e-05}, {"id": 70, "seek": 44960, "start": 455.92, "end": 460.40000000000003, "text": " when checkpointing and restoring but especially when cloning the application, think for example", "tokens": [562, 42269, 278, 293, 36349, 457, 2318, 562, 596, 16638, 264, 3861, 11, 519, 337, 1365], "temperature": 0.0, "avg_logprob": -0.1790142854054769, "compression_ratio": 2.004424778761062, "no_speech_prob": 3.784603177336976e-05}, {"id": 71, "seek": 44960, "start": 460.40000000000003, "end": 466.24, "text": " of an application which logs to a file and then you checkpoint it and restart two clones", "tokens": [295, 364, 3861, 597, 20820, 281, 257, 3991, 293, 550, 291, 42269, 309, 293, 21022, 732, 43803], "temperature": 0.0, "avg_logprob": -0.1790142854054769, "compression_ratio": 2.004424778761062, "no_speech_prob": 3.784603177336976e-05}, {"id": 72, "seek": 44960, "start": 466.24, "end": 469.84000000000003, "text": " and they both write to the same file they will corrupt the file usually so you have", "tokens": [293, 436, 1293, 2464, 281, 264, 912, 3991, 436, 486, 17366, 264, 3991, 2673, 370, 291, 362], "temperature": 0.0, "avg_logprob": -0.1790142854054769, "compression_ratio": 2.004424778761062, "no_speech_prob": 3.784603177336976e-05}, {"id": 73, "seek": 44960, "start": 469.84000000000003, "end": 475.12, "text": " to take some measures if you run many things in parallel and the application is not prepared", "tokens": [281, 747, 512, 8000, 498, 291, 1190, 867, 721, 294, 8952, 293, 264, 3861, 307, 406, 4927], "temperature": 0.0, "avg_logprob": -0.1790142854054769, "compression_ratio": 2.004424778761062, "no_speech_prob": 3.784603177336976e-05}, {"id": 74, "seek": 47512, "start": 475.12, "end": 480.64, "text": " for that, so if you want to, a crack is currently not part of an official OpenJDK release it's still", "tokens": [337, 300, 11, 370, 498, 291, 528, 281, 11, 257, 6226, 307, 4362, 406, 644, 295, 364, 4783, 7238, 41, 35, 42, 4374, 309, 311, 920], "temperature": 0.0, "avg_logprob": -0.11344084488718133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 4.294600148568861e-05}, {"id": 75, "seek": 47512, "start": 481.84000000000003, "end": 486.4, "text": " mostly a research project in the OpenJDK but you can already now make your application ready", "tokens": [5240, 257, 2132, 1716, 294, 264, 7238, 41, 35, 42, 457, 291, 393, 1217, 586, 652, 428, 3861, 1919], "temperature": 0.0, "avg_logprob": -0.11344084488718133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 4.294600148568861e-05}, {"id": 76, "seek": 47512, "start": 486.4, "end": 493.04, "text": " for crack by using the org crack API that's available on Maven Central and that basically wraps", "tokens": [337, 6226, 538, 1228, 264, 14045, 6226, 9362, 300, 311, 2435, 322, 4042, 553, 9701, 293, 300, 1936, 25831], "temperature": 0.0, "avg_logprob": -0.11344084488718133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 4.294600148568861e-05}, {"id": 77, "seek": 47512, "start": 493.04, "end": 499.6, "text": " JDK crack namespace which is currently in the crack repository in OpenJDK but if it finds", "tokens": [37082, 42, 6226, 5288, 17940, 597, 307, 4362, 294, 264, 6226, 25841, 294, 7238, 41, 35, 42, 457, 498, 309, 10704], "temperature": 0.0, "avg_logprob": -0.11344084488718133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 4.294600148568861e-05}, {"id": 78, "seek": 49960, "start": 499.6, "end": 505.20000000000005, "text": " javax.crack once it should become available it will switch to that and it also offers the", "tokens": [361, 4061, 87, 13, 10757, 501, 1564, 309, 820, 1813, 2435, 309, 486, 3679, 281, 300, 293, 309, 611, 7736, 264], "temperature": 0.0, "avg_logprob": -0.12424033365131897, "compression_ratio": 1.6589861751152073, "no_speech_prob": 7.048485713312402e-06}, {"id": 79, "seek": 49960, "start": 505.92, "end": 513.84, "text": " possibility to pass the custom implementations to a system property and then finally what", "tokens": [7959, 281, 1320, 264, 2375, 4445, 763, 281, 257, 1185, 4707, 293, 550, 2721, 437], "temperature": 0.0, "avg_logprob": -0.12424033365131897, "compression_ratio": 1.6589861751152073, "no_speech_prob": 7.048485713312402e-06}, {"id": 80, "seek": 49960, "start": 513.84, "end": 518.72, "text": " makes crack interesting for many people to experiment with is that it basically integrates", "tokens": [1669, 6226, 1880, 337, 867, 561, 281, 5120, 365, 307, 300, 309, 1936, 3572, 1024], "temperature": 0.0, "avg_logprob": -0.12424033365131897, "compression_ratio": 1.6589861751152073, "no_speech_prob": 7.048485713312402e-06}, {"id": 81, "seek": 49960, "start": 518.72, "end": 526.48, "text": " with Creel so it has a copy of Creel packed with the crack distribution so you can easily", "tokens": [365, 9549, 338, 370, 309, 575, 257, 5055, 295, 9549, 338, 13265, 365, 264, 6226, 7316, 370, 291, 393, 3612], "temperature": 0.0, "avg_logprob": -0.12424033365131897, "compression_ratio": 1.6589861751152073, "no_speech_prob": 7.048485713312402e-06}, {"id": 82, "seek": 52648, "start": 526.48, "end": 534.0, "text": " checkpoint your java process and restart it and then as I mentioned before Creel is checkpoint", "tokens": [42269, 428, 361, 4061, 1399, 293, 21022, 309, 293, 550, 382, 286, 2835, 949, 9549, 338, 307, 42269], "temperature": 0.0, "avg_logprob": -0.16186225277253952, "compression_ratio": 1.704035874439462, "no_speech_prob": 4.780491144629195e-05}, {"id": 83, "seek": 52648, "start": 534.0, "end": 539.2, "text": " and restore in user space that's an old java functionality which allows to serialize a single", "tokens": [293, 15227, 294, 4195, 1901, 300, 311, 364, 1331, 361, 4061, 14980, 597, 4045, 281, 17436, 1125, 257, 2167], "temperature": 0.0, "avg_logprob": -0.16186225277253952, "compression_ratio": 1.704035874439462, "no_speech_prob": 4.780491144629195e-05}, {"id": 84, "seek": 52648, "start": 539.2, "end": 544.96, "text": " process to the file system it uses kernel free cgroup freezer to freeze the processes or process", "tokens": [1399, 281, 264, 3991, 1185, 309, 4960, 28256, 1737, 269, 17377, 1737, 4527, 281, 15959, 264, 7555, 420, 1399], "temperature": 0.0, "avg_logprob": -0.16186225277253952, "compression_ratio": 1.704035874439462, "no_speech_prob": 4.780491144629195e-05}, {"id": 85, "seek": 52648, "start": 544.96, "end": 552.5600000000001, "text": " tree and then writes all the memory to the disk and so on. Still Creel has some issues because", "tokens": [4230, 293, 550, 13657, 439, 264, 4675, 281, 264, 12355, 293, 370, 322, 13, 8291, 9549, 338, 575, 512, 2663, 570], "temperature": 0.0, "avg_logprob": -0.16186225277253952, "compression_ratio": 1.704035874439462, "no_speech_prob": 4.780491144629195e-05}, {"id": 86, "seek": 55256, "start": 552.56, "end": 560.56, "text": " it has to take to look at all the open file descriptors, shared memory segments, stuff like", "tokens": [309, 575, 281, 747, 281, 574, 412, 439, 264, 1269, 3991, 31280, 830, 11, 5507, 4675, 19904, 11, 1507, 411], "temperature": 0.0, "avg_logprob": -0.11434985342479888, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.00011298470053588971}, {"id": 87, "seek": 55256, "start": 560.56, "end": 565.52, "text": " that which might not be available again when you restore the image whereas firecracker as I said", "tokens": [300, 597, 1062, 406, 312, 2435, 797, 562, 291, 15227, 264, 3256, 9735, 2610, 10757, 23599, 382, 286, 848], "temperature": 0.0, "avg_logprob": -0.11434985342479888, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.00011298470053588971}, {"id": 88, "seek": 55256, "start": 565.52, "end": 569.1999999999999, "text": " before it restores the whole kernel with all the file system everything in place so it's much", "tokens": [949, 309, 1472, 2706, 264, 1379, 28256, 365, 439, 264, 3991, 1185, 1203, 294, 1081, 370, 309, 311, 709], "temperature": 0.0, "avg_logprob": -0.11434985342479888, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.00011298470053588971}, {"id": 89, "seek": 55256, "start": 569.1999999999999, "end": 576.8, "text": " much simpler from that perspective. So let's take a quick demo on crack.", "tokens": [709, 18587, 490, 300, 4585, 13, 407, 718, 311, 747, 257, 1702, 10723, 322, 6226, 13], "temperature": 0.0, "avg_logprob": -0.11434985342479888, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.00011298470053588971}, {"id": 90, "seek": 57680, "start": 576.8, "end": 587.92, "text": " So I have here open gdk.17 with crack extensions and then you simply pass the option checkpoint", "tokens": [407, 286, 362, 510, 1269, 290, 67, 74, 13, 7773, 365, 6226, 25129, 293, 550, 291, 2935, 1320, 264, 3614, 42269], "temperature": 0.0, "avg_logprob": -0.20742130279541016, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.0106522899586707e-05}, {"id": 91, "seek": 57680, "start": 587.92, "end": 595.8399999999999, "text": " to that's a file and this is just a pet clinic up a spring boot pet clinic example application", "tokens": [281, 300, 311, 257, 3991, 293, 341, 307, 445, 257, 3817, 14947, 493, 257, 5587, 11450, 3817, 14947, 1365, 3861], "temperature": 0.0, "avg_logprob": -0.20742130279541016, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.0106522899586707e-05}, {"id": 92, "seek": 57680, "start": 596.64, "end": 605.28, "text": " and I modified it to register with the orc crack callbacks as I said you can see here", "tokens": [293, 286, 15873, 309, 281, 7280, 365, 264, 420, 66, 6226, 818, 17758, 382, 286, 848, 291, 393, 536, 510], "temperature": 0.0, "avg_logprob": -0.20742130279541016, "compression_ratio": 1.5164835164835164, "no_speech_prob": 3.0106522899586707e-05}, {"id": 93, "seek": 60528, "start": 605.28, "end": 616.88, "text": " it's registered to orc crack and now that I've started it I can use j command to checkpoint it", "tokens": [309, 311, 13968, 281, 420, 66, 6226, 293, 586, 300, 286, 600, 1409, 309, 286, 393, 764, 361, 5622, 281, 42269, 309], "temperature": 0.0, "avg_logprob": -0.0921528372966068, "compression_ratio": 1.5351351351351352, "no_speech_prob": 3.252052920288406e-05}, {"id": 94, "seek": 60528, "start": 616.88, "end": 623.4399999999999, "text": " so I send it a checkpoint command and when you see just out of the box it didn't work it shows", "tokens": [370, 286, 2845, 309, 257, 42269, 5622, 293, 562, 291, 536, 445, 484, 295, 264, 2424, 309, 994, 380, 589, 309, 3110], "temperature": 0.0, "avg_logprob": -0.0921528372966068, "compression_ratio": 1.5351351351351352, "no_speech_prob": 3.252052920288406e-05}, {"id": 95, "seek": 60528, "start": 623.4399999999999, "end": 630.0799999999999, "text": " some exception because it found for example that the port 8080 is open and this uses a vanilla", "tokens": [512, 11183, 570, 309, 1352, 337, 1365, 300, 264, 2436, 4688, 4702, 307, 1269, 293, 341, 4960, 257, 17528], "temperature": 0.0, "avg_logprob": -0.0921528372966068, "compression_ratio": 1.5351351351351352, "no_speech_prob": 3.252052920288406e-05}, {"id": 96, "seek": 63008, "start": 630.08, "end": 639.36, "text": " version of Tomcat which is implementing the crack callbacks so but that's not that bad", "tokens": [3037, 295, 5041, 18035, 597, 307, 18114, 264, 6226, 818, 17758, 370, 457, 300, 311, 406, 300, 1578], "temperature": 0.0, "avg_logprob": -0.12407605109676238, "compression_ratio": 1.563953488372093, "no_speech_prob": 1.726380651234649e-05}, {"id": 97, "seek": 63008, "start": 640.5600000000001, "end": 648.64, "text": " it has a developer option which has to ignore exceptions so for this simple case it will probably", "tokens": [309, 575, 257, 10754, 3614, 597, 575, 281, 11200, 22847, 370, 337, 341, 2199, 1389, 309, 486, 1391], "temperature": 0.0, "avg_logprob": -0.12407605109676238, "compression_ratio": 1.563953488372093, "no_speech_prob": 1.726380651234649e-05}, {"id": 98, "seek": 63008, "start": 648.64, "end": 658.0, "text": " work so let's try it started one more time prepare the checkpoint here so let's wait", "tokens": [589, 370, 718, 311, 853, 309, 1409, 472, 544, 565, 5940, 264, 42269, 510, 370, 718, 311, 1699], "temperature": 0.0, "avg_logprob": -0.12407605109676238, "compression_ratio": 1.563953488372093, "no_speech_prob": 1.726380651234649e-05}, {"id": 99, "seek": 65800, "start": 658.0, "end": 669.12, "text": " until it becomes ready so and now now checkpoint it and you see we also locked the resources so", "tokens": [1826, 309, 3643, 1919, 370, 293, 586, 586, 42269, 309, 293, 291, 536, 321, 611, 9376, 264, 3593, 370], "temperature": 0.0, "avg_logprob": -0.11653349259320428, "compression_ratio": 1.7361111111111112, "no_speech_prob": 2.1041452782810666e-05}, {"id": 100, "seek": 65800, "start": 669.12, "end": 673.92, "text": " you see what they were about 10 file descriptors and most of them were okay because like the crack", "tokens": [291, 536, 437, 436, 645, 466, 1266, 3991, 31280, 830, 293, 881, 295, 552, 645, 1392, 570, 411, 264, 6226], "temperature": 0.0, "avg_logprob": -0.11653349259320428, "compression_ratio": 1.7361111111111112, "no_speech_prob": 2.1041452782810666e-05}, {"id": 101, "seek": 65800, "start": 673.92, "end": 681.2, "text": " modified VM already knows a lot of the file descriptors the VM is using for example for", "tokens": [15873, 18038, 1217, 3255, 257, 688, 295, 264, 3991, 31280, 830, 264, 18038, 307, 1228, 337, 1365, 337], "temperature": 0.0, "avg_logprob": -0.11653349259320428, "compression_ratio": 1.7361111111111112, "no_speech_prob": 2.1041452782810666e-05}, {"id": 102, "seek": 65800, "start": 681.2, "end": 686.8, "text": " the jar files it has opened or for the module files and it closes them by themselves without", "tokens": [264, 15181, 7098, 309, 575, 5625, 420, 337, 264, 10088, 7098, 293, 309, 24157, 552, 538, 2969, 1553], "temperature": 0.0, "avg_logprob": -0.11653349259320428, "compression_ratio": 1.7361111111111112, "no_speech_prob": 2.1041452782810666e-05}, {"id": 103, "seek": 68680, "start": 686.8, "end": 695.92, "text": " need to register anything so and the checkpoint you work and what's interesting is here that", "tokens": [643, 281, 7280, 1340, 370, 293, 264, 42269, 291, 589, 293, 437, 311, 1880, 307, 510, 300], "temperature": 0.0, "avg_logprob": -0.1341768215442526, "compression_ratio": 1.6625766871165644, "no_speech_prob": 1.6686770322849043e-05}, {"id": 104, "seek": 68680, "start": 695.92, "end": 702.0, "text": " before checkpointing it calls the my the the listener the handler I installed in my pet clinic", "tokens": [949, 42269, 278, 309, 5498, 264, 452, 264, 264, 31569, 264, 41967, 286, 8899, 294, 452, 3817, 14947], "temperature": 0.0, "avg_logprob": -0.1341768215442526, "compression_ratio": 1.6625766871165644, "no_speech_prob": 1.6686770322849043e-05}, {"id": 105, "seek": 68680, "start": 702.0, "end": 710.0, "text": " application so I could do additional stuff before checkpointing and now we can just", "tokens": [3861, 370, 286, 727, 360, 4497, 1507, 949, 42269, 278, 293, 586, 321, 393, 445], "temperature": 0.0, "avg_logprob": -0.1341768215442526, "compression_ratio": 1.6625766871165644, "no_speech_prob": 1.6686770322849043e-05}, {"id": 106, "seek": 71000, "start": 710.0, "end": 722.0, "text": " restore this frozen process and you see it starts instantly it calls the after restore a hook", "tokens": [15227, 341, 12496, 1399, 293, 291, 536, 309, 3719, 13518, 309, 5498, 264, 934, 15227, 257, 6328], "temperature": 0.0, "avg_logprob": -0.1032320052858383, "compression_ratio": 1.5454545454545454, "no_speech_prob": 5.72197932342533e-05}, {"id": 107, "seek": 71000, "start": 722.0, "end": 731.44, "text": " I have registered and we can send a serial request on 8080 and yeah it basically still works", "tokens": [286, 362, 13968, 293, 321, 393, 2845, 257, 17436, 5308, 322, 4688, 4702, 293, 1338, 309, 1936, 920, 1985], "temperature": 0.0, "avg_logprob": -0.1032320052858383, "compression_ratio": 1.5454545454545454, "no_speech_prob": 5.72197932342533e-05}, {"id": 108, "seek": 71000, "start": 732.48, "end": 738.72, "text": " so that's nice let's go further so now firecracker so that's basically combination of", "tokens": [370, 300, 311, 1481, 718, 311, 352, 3052, 370, 586, 2610, 10757, 23599, 370, 300, 311, 1936, 6562, 295], "temperature": 0.0, "avg_logprob": -0.1032320052858383, "compression_ratio": 1.5454545454545454, "no_speech_prob": 5.72197932342533e-05}, {"id": 109, "seek": 73872, "start": 738.72, "end": 743.84, "text": " initial firecracker and crack I found it somehow funny that words are so similar so", "tokens": [5883, 2610, 10757, 23599, 293, 6226, 286, 1352, 309, 6063, 4074, 300, 2283, 366, 370, 2531, 370], "temperature": 0.0, "avg_logprob": -0.10735976829957426, "compression_ratio": 1.6883720930232557, "no_speech_prob": 7.026863750070333e-05}, {"id": 110, "seek": 73872, "start": 743.84, "end": 748.64, "text": " it's a play with words and my my opinion it's the best of two worlds to combine these two", "tokens": [309, 311, 257, 862, 365, 2283, 293, 452, 452, 4800, 309, 311, 264, 1151, 295, 732, 13401, 281, 10432, 613, 732], "temperature": 0.0, "avg_logprob": -0.10735976829957426, "compression_ratio": 1.6883720930232557, "no_speech_prob": 7.026863750070333e-05}, {"id": 111, "seek": 73872, "start": 748.64, "end": 754.8000000000001, "text": " currently as I said a crack project is based on crew but I think it might be interesting to", "tokens": [4362, 382, 286, 848, 257, 6226, 1716, 307, 2361, 322, 7260, 457, 286, 519, 309, 1062, 312, 1880, 281], "temperature": 0.0, "avg_logprob": -0.10735976829957426, "compression_ratio": 1.6883720930232557, "no_speech_prob": 7.026863750070333e-05}, {"id": 112, "seek": 73872, "start": 754.8000000000001, "end": 761.12, "text": " add support for firecracker as well and I'm currently working on that so with firecracker you can", "tokens": [909, 1406, 337, 2610, 10757, 23599, 382, 731, 293, 286, 478, 4362, 1364, 322, 300, 370, 365, 2610, 10757, 23599, 291, 393], "temperature": 0.0, "avg_logprob": -0.10735976829957426, "compression_ratio": 1.6883720930232557, "no_speech_prob": 7.026863750070333e-05}, {"id": 113, "seek": 76112, "start": 761.12, "end": 771.84, "text": " basically checkpoint a plain JDK even with if it's not modified by crack because as I said no need", "tokens": [1936, 42269, 257, 11121, 37082, 42, 754, 365, 498, 309, 311, 406, 15873, 538, 6226, 570, 382, 286, 848, 572, 643], "temperature": 0.0, "avg_logprob": -0.15873277548587683, "compression_ratio": 1.6179775280898876, "no_speech_prob": 4.487571641220711e-05}, {"id": 114, "seek": 76112, "start": 771.84, "end": 779.04, "text": " to worry to worry about fire descriptors so on one issue with firecracker as I said before you", "tokens": [281, 3292, 281, 3292, 466, 2610, 31280, 830, 370, 322, 472, 2734, 365, 2610, 10757, 23599, 382, 286, 848, 949, 291], "temperature": 0.0, "avg_logprob": -0.15873277548587683, "compression_ratio": 1.6179775280898876, "no_speech_prob": 4.487571641220711e-05}, {"id": 115, "seek": 76112, "start": 779.04, "end": 784.8, "text": " cannot trigger the checkpoint from Java so the crack implementation in open JDK can checkpoint", "tokens": [2644, 7875, 264, 42269, 490, 10745, 370, 264, 6226, 11420, 294, 1269, 37082, 42, 393, 42269], "temperature": 0.0, "avg_logprob": -0.15873277548587683, "compression_ratio": 1.6179775280898876, "no_speech_prob": 4.487571641220711e-05}, {"id": 116, "seek": 78480, "start": 784.8, "end": 792.0, "text": " itself because crew is running on the same kernel like the Java application so the Java just", "tokens": [2564, 570, 7260, 307, 2614, 322, 264, 912, 28256, 411, 264, 10745, 3861, 370, 264, 10745, 445], "temperature": 0.0, "avg_logprob": -0.15533106934790517, "compression_ratio": 1.7378277153558053, "no_speech_prob": 2.1641262719640508e-05}, {"id": 117, "seek": 78480, "start": 792.0, "end": 797.68, "text": " so JNI calls crew and checkpoints itself that's obviously not possible in firecracker because", "tokens": [370, 508, 42496, 5498, 7260, 293, 1520, 20552, 2564, 300, 311, 2745, 406, 1944, 294, 2610, 10757, 23599, 570], "temperature": 0.0, "avg_logprob": -0.15533106934790517, "compression_ratio": 1.7378277153558053, "no_speech_prob": 2.1641262719640508e-05}, {"id": 118, "seek": 78480, "start": 797.68, "end": 802.56, "text": " you cannot escape from the gas that's the whole thing about running it in in a in a", "tokens": [291, 2644, 7615, 490, 264, 4211, 300, 311, 264, 1379, 551, 466, 2614, 309, 294, 294, 257, 294, 257], "temperature": 0.0, "avg_logprob": -0.15533106934790517, "compression_ratio": 1.7378277153558053, "no_speech_prob": 2.1641262719640508e-05}, {"id": 119, "seek": 78480, "start": 802.56, "end": 808.16, "text": " fully virtualized guest so we need another means of communication but that's not not that complicated", "tokens": [4498, 6374, 1602, 8341, 370, 321, 643, 1071, 1355, 295, 6101, 457, 300, 311, 406, 406, 300, 6179], "temperature": 0.0, "avg_logprob": -0.15533106934790517, "compression_ratio": 1.7378277153558053, "no_speech_prob": 2.1641262719640508e-05}, {"id": 120, "seek": 78480, "start": 809.4399999999999, "end": 814.7199999999999, "text": " it offers maximum security and speed and I said before no copy and write memory sharing but", "tokens": [309, 7736, 6674, 3825, 293, 3073, 293, 286, 848, 949, 572, 5055, 293, 2464, 4675, 5414, 457], "temperature": 0.0, "avg_logprob": -0.15533106934790517, "compression_ratio": 1.7378277153558053, "no_speech_prob": 2.1641262719640508e-05}, {"id": 121, "seek": 81472, "start": 814.72, "end": 820.64, "text": " you can use ballooning same page merging kernel features which are also have their plus and", "tokens": [291, 393, 764, 16994, 278, 912, 3028, 44559, 28256, 4122, 597, 366, 611, 362, 641, 1804, 293], "temperature": 0.0, "avg_logprob": -0.1385959661923922, "compression_ratio": 1.4391891891891893, "no_speech_prob": 0.00010860381735255942}, {"id": 122, "seek": 81472, "start": 820.64, "end": 827.6, "text": " their drawbacks but things to investigate so let's do a firecracker demo with Java now", "tokens": [641, 2642, 17758, 457, 721, 281, 15013, 370, 718, 311, 360, 257, 2610, 10757, 23599, 10723, 365, 10745, 586], "temperature": 0.0, "avg_logprob": -0.1385959661923922, "compression_ratio": 1.4391891891891893, "no_speech_prob": 0.00010860381735255942}, {"id": 123, "seek": 81472, "start": 831.28, "end": 834.96, "text": " to not bore you more with all this", "tokens": [281, 406, 26002, 291, 544, 365, 439, 341], "temperature": 0.0, "avg_logprob": -0.1385959661923922, "compression_ratio": 1.4391891891891893, "no_speech_prob": 0.00010860381735255942}, {"id": 124, "seek": 83496, "start": 834.96, "end": 844.96, "text": " JSON request I've written a shell script which basically does all that in in one script and", "tokens": [31828, 5308, 286, 600, 3720, 257, 8720, 5755, 597, 1936, 775, 439, 300, 294, 294, 472, 5755, 293], "temperature": 0.0, "avg_logprob": -0.17155428819878157, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.00015006102330517024}, {"id": 125, "seek": 83496, "start": 844.96, "end": 859.0400000000001, "text": " instead of calling bash it just starts Java as in it process and we can now submit the request", "tokens": [2602, 295, 5141, 46183, 309, 445, 3719, 10745, 382, 294, 309, 1399, 293, 321, 393, 586, 10315, 264, 5308], "temperature": 0.0, "avg_logprob": -0.17155428819878157, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.00015006102330517024}, {"id": 126, "seek": 85904, "start": 859.04, "end": 867.04, "text": " and you see it's it's it's working it's here here is the request my I have still registered", "tokens": [293, 291, 536, 309, 311, 309, 311, 309, 311, 1364, 309, 311, 510, 510, 307, 264, 5308, 452, 286, 362, 920, 13968], "temperature": 0.0, "avg_logprob": -0.20313829845852321, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.00010838243906619027}, {"id": 127, "seek": 85904, "start": 867.04, "end": 872.4, "text": " this this callbacks although I'm running on a vanilla JDK by using the org crack library so", "tokens": [341, 341, 818, 17758, 4878, 286, 478, 2614, 322, 257, 17528, 37082, 42, 538, 1228, 264, 14045, 6226, 6405, 370], "temperature": 0.0, "avg_logprob": -0.20313829845852321, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.00010838243906619027}, {"id": 128, "seek": 85904, "start": 872.4, "end": 880.4, "text": " they are they are empty they won't do anything and I can now snapshot firecracker you see that's", "tokens": [436, 366, 436, 366, 6707, 436, 1582, 380, 360, 1340, 293, 286, 393, 586, 30163, 2610, 10757, 23599, 291, 536, 300, 311], "temperature": 0.0, "avg_logprob": -0.20313829845852321, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.00010838243906619027}, {"id": 129, "seek": 88040, "start": 880.4, "end": 889.52, "text": " also quite quite fix quite quick firecracker is not is resumed automatically so I have to kill", "tokens": [611, 1596, 1596, 3191, 1596, 1702, 2610, 10757, 23599, 307, 406, 307, 725, 28189, 6772, 370, 286, 362, 281, 1961], "temperature": 0.0, "avg_logprob": -0.2179443525231403, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.0001464808010496199}, {"id": 130, "seek": 88040, "start": 889.52, "end": 901.52, "text": " it manually and now if I restart from snapshot you will see it also it takes just a few milliseconds", "tokens": [309, 16945, 293, 586, 498, 286, 21022, 490, 30163, 291, 486, 536, 309, 611, 309, 2516, 445, 257, 1326, 34184], "temperature": 0.0, "avg_logprob": -0.2179443525231403, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.0001464808010496199}, {"id": 131, "seek": 90152, "start": 901.52, "end": 913.76, "text": " to restart the whole image and again I can see well into it it it works you see there is no the", "tokens": [281, 21022, 264, 1379, 3256, 293, 797, 286, 393, 536, 731, 666, 309, 309, 309, 1985, 291, 536, 456, 307, 572, 264], "temperature": 0.0, "avg_logprob": -0.18910164619559672, "compression_ratio": 1.5988700564971752, "no_speech_prob": 4.6536046284018084e-05}, {"id": 132, "seek": 90152, "start": 913.76, "end": 919.4399999999999, "text": " hooks are not being called because there is no real crack implementation in the back in this case", "tokens": [26485, 366, 406, 885, 1219, 570, 456, 307, 572, 957, 6226, 11420, 294, 264, 646, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.18910164619559672, "compression_ratio": 1.5988700564971752, "no_speech_prob": 4.6536046284018084e-05}, {"id": 133, "seek": 90152, "start": 919.4399999999999, "end": 927.4399999999999, "text": " but like checkpointing for Java itself works and it's also easy to run a second clone now", "tokens": [457, 411, 42269, 278, 337, 10745, 2564, 1985, 293, 309, 311, 611, 1858, 281, 1190, 257, 1150, 26506, 586], "temperature": 0.0, "avg_logprob": -0.18910164619559672, "compression_ratio": 1.5988700564971752, "no_speech_prob": 4.6536046284018084e-05}, {"id": 134, "seek": 92744, "start": 927.44, "end": 934.72, "text": " obviously we cannot run it in the same namespace because it will use the same IP address like", "tokens": [2745, 321, 2644, 1190, 309, 294, 264, 912, 5288, 17940, 570, 309, 486, 764, 264, 912, 8671, 2985, 411], "temperature": 0.0, "avg_logprob": -0.2473529444800483, "compression_ratio": 1.6842105263157894, "no_speech_prob": 3.3087871997850016e-05}, {"id": 135, "seek": 92744, "start": 934.72, "end": 942.8000000000001, "text": " the like the first version so we we started in a in a network namespace so minus and zero is just", "tokens": [264, 411, 264, 700, 3037, 370, 321, 321, 1409, 294, 257, 294, 257, 3209, 5288, 17940, 370, 3175, 293, 4018, 307, 445], "temperature": 0.0, "avg_logprob": -0.2473529444800483, "compression_ratio": 1.6842105263157894, "no_speech_prob": 3.3087871997850016e-05}, {"id": 136, "seek": 92744, "start": 942.8000000000001, "end": 952.1600000000001, "text": " to create a new namespace for for the clone and you see it uses IP net NS net names with exec to", "tokens": [281, 1884, 257, 777, 5288, 17940, 337, 337, 264, 26506, 293, 291, 536, 309, 4960, 8671, 2533, 15943, 2533, 5288, 365, 4454, 281], "temperature": 0.0, "avg_logprob": -0.2473529444800483, "compression_ratio": 1.6842105263157894, "no_speech_prob": 3.3087871997850016e-05}, {"id": 137, "seek": 95216, "start": 952.16, "end": 962.48, "text": " execute firecracker but it restores quite as quickly and the initial IP address of the", "tokens": [14483, 2610, 10757, 23599, 457, 309, 1472, 2706, 1596, 382, 2661, 293, 264, 5883, 8671, 2985, 295, 264], "temperature": 0.0, "avg_logprob": -0.1932210922241211, "compression_ratio": 1.7239263803680982, "no_speech_prob": 2.673234121175483e-05}, {"id": 138, "seek": 95216, "start": 962.48, "end": 969.8399999999999, "text": " of the of the process has now in this namespace is it's now mapped on a different IP address on", "tokens": [295, 264, 295, 264, 1399, 575, 586, 294, 341, 5288, 17940, 307, 309, 311, 586, 33318, 322, 257, 819, 8671, 2985, 322], "temperature": 0.0, "avg_logprob": -0.1932210922241211, "compression_ratio": 1.7239263803680982, "no_speech_prob": 2.673234121175483e-05}, {"id": 139, "seek": 95216, "start": 969.8399999999999, "end": 976.64, "text": " the host but you see it's it's still working so in the get the guest still has the same IP address", "tokens": [264, 3975, 457, 291, 536, 309, 311, 309, 311, 920, 1364, 370, 294, 264, 483, 264, 8341, 920, 575, 264, 912, 8671, 2985], "temperature": 0.0, "avg_logprob": -0.1932210922241211, "compression_ratio": 1.7239263803680982, "no_speech_prob": 2.673234121175483e-05}, {"id": 140, "seek": 97664, "start": 976.64, "end": 983.12, "text": " it has in the first place it's just running in its own namespace and inside the guest again the", "tokens": [309, 575, 294, 264, 700, 1081, 309, 311, 445, 2614, 294, 1080, 1065, 5288, 17940, 293, 1854, 264, 8341, 797, 264], "temperature": 0.0, "avg_logprob": -0.2173954321413624, "compression_ratio": 1.5934959349593496, "no_speech_prob": 7.912659930298105e-05}, {"id": 141, "seek": 97664, "start": 983.12, "end": 995.04, "text": " Tomcat is running on the same port all no problem so we just kill the first instance and we kill the", "tokens": [5041, 18035, 307, 2614, 322, 264, 912, 2436, 439, 572, 1154, 370, 321, 445, 1961, 264, 700, 5197, 293, 321, 1961, 264], "temperature": 0.0, "avg_logprob": -0.2173954321413624, "compression_ratio": 1.5934959349593496, "no_speech_prob": 7.912659930298105e-05}, {"id": 142, "seek": 99504, "start": 995.04, "end": 1012.0799999999999, "text": " we kill the second instance how much time do I have oh okay okay so just a few words I I realized", "tokens": [321, 1961, 264, 1150, 5197, 577, 709, 565, 360, 286, 362, 1954, 1392, 1392, 370, 445, 257, 1326, 2283, 286, 286, 5334], "temperature": 0.0, "avg_logprob": -0.22238023546006944, "compression_ratio": 1.4580152671755726, "no_speech_prob": 9.340379619970918e-05}, {"id": 143, "seek": 99504, "start": 1012.0799999999999, "end": 1018.4, "text": " that talks which are rated highest are usually so some animation so I decided to do animation", "tokens": [300, 6686, 597, 366, 22103, 6343, 366, 2673, 370, 512, 9603, 370, 286, 3047, 281, 360, 9603], "temperature": 0.0, "avg_logprob": -0.22238023546006944, "compression_ratio": 1.4580152671755726, "no_speech_prob": 9.340379619970918e-05}, {"id": 144, "seek": 101840, "start": 1018.4, "end": 1025.68, "text": " because usually only so console console demos so quick introduction user fold demon is a", "tokens": [570, 2673, 787, 370, 11076, 11076, 33788, 370, 1702, 9339, 4195, 4860, 14283, 307, 257], "temperature": 0.0, "avg_logprob": -0.16681885719299316, "compression_ratio": 1.8844221105527639, "no_speech_prob": 0.00017797872715163976}, {"id": 145, "seek": 101840, "start": 1025.68, "end": 1032.8799999999999, "text": " is a possibility to handle page faults from the user space and firecracker offers the possibility", "tokens": [307, 257, 7959, 281, 4813, 3028, 36090, 490, 264, 4195, 1901, 293, 2610, 10757, 23599, 7736, 264, 7959], "temperature": 0.0, "avg_logprob": -0.16681885719299316, "compression_ratio": 1.8844221105527639, "no_speech_prob": 0.00017797872715163976}, {"id": 146, "seek": 101840, "start": 1032.8799999999999, "end": 1039.92, "text": " instead of mapping the image file right into fires firecrackers memory to to use an external", "tokens": [2602, 295, 18350, 264, 3256, 3991, 558, 666, 15044, 2610, 10757, 501, 433, 4675, 281, 281, 764, 364, 8320], "temperature": 0.0, "avg_logprob": -0.16681885719299316, "compression_ratio": 1.8844221105527639, "no_speech_prob": 0.00017797872715163976}, {"id": 147, "seek": 101840, "start": 1039.92, "end": 1046.08, "text": " user fold demon and if we write the user fold demon ourselves we have the possibility to follow", "tokens": [4195, 4860, 14283, 293, 498, 321, 2464, 264, 4195, 4860, 14283, 4175, 321, 362, 264, 7959, 281, 1524], "temperature": 0.0, "avg_logprob": -0.16681885719299316, "compression_ratio": 1.8844221105527639, "no_speech_prob": 0.00017797872715163976}, {"id": 148, "seek": 104608, "start": 1046.08, "end": 1052.3999999999999, "text": " page by page which addresses get loaded at the restore and I found it interesting so", "tokens": [3028, 538, 3028, 597, 16862, 483, 13210, 412, 264, 15227, 293, 286, 1352, 309, 1880, 370], "temperature": 0.0, "avg_logprob": -0.12783893238414418, "compression_ratio": 1.6554054054054055, "no_speech_prob": 0.0001367505028611049}, {"id": 149, "seek": 104608, "start": 1054.96, "end": 1062.6399999999999, "text": " I created that kind of thing so to an animation for that and for that", "tokens": [286, 2942, 300, 733, 295, 551, 370, 281, 364, 9603, 337, 300, 293, 337, 300], "temperature": 0.0, "avg_logprob": -0.12783893238414418, "compression_ratio": 1.6554054054054055, "no_speech_prob": 0.0001367505028611049}, {"id": 150, "seek": 104608, "start": 1065.1999999999998, "end": 1073.28, "text": " we we restart our our our firecracker service native memory enabled native memory tracking", "tokens": [321, 321, 21022, 527, 527, 527, 2610, 10757, 23599, 2643, 8470, 4675, 15172, 8470, 4675, 11603], "temperature": 0.0, "avg_logprob": -0.12783893238414418, "compression_ratio": 1.6554054054054055, "no_speech_prob": 0.0001367505028611049}, {"id": 151, "seek": 107328, "start": 1073.28, "end": 1084.3999999999999, "text": " and from the guest we do now ssh into into our firecracker guest where Tomcat is running", "tokens": [293, 490, 264, 8341, 321, 360, 586, 262, 2716, 666, 666, 527, 2610, 10757, 23599, 8341, 689, 5041, 18035, 307, 2614], "temperature": 0.0, "avg_logprob": -0.14582632527206885, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.3913456971058622e-05}, {"id": 152, "seek": 107328, "start": 1084.3999999999999, "end": 1091.52, "text": " and just call j command native memory details and and put that into a file and we do the same thing", "tokens": [293, 445, 818, 361, 5622, 8470, 4675, 4365, 293, 293, 829, 300, 666, 257, 3991, 293, 321, 360, 264, 912, 551], "temperature": 0.0, "avg_logprob": -0.14582632527206885, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.3913456971058622e-05}, {"id": 153, "seek": 107328, "start": 1094.32, "end": 1100.48, "text": " with the pmap information this is just a shell script inside the guest which basically", "tokens": [365, 264, 280, 24223, 1589, 341, 307, 445, 257, 8720, 5755, 1854, 264, 8341, 597, 1936], "temperature": 0.0, "avg_logprob": -0.14582632527206885, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.3913456971058622e-05}, {"id": 154, "seek": 110048, "start": 1100.48, "end": 1108.0, "text": " prints all the virtual to physical mappings for all processes into a file", "tokens": [22305, 439, 264, 6374, 281, 4001, 463, 28968, 337, 439, 7555, 666, 257, 3991], "temperature": 0.0, "avg_logprob": -0.20330647861256318, "compression_ratio": 1.36, "no_speech_prob": 0.0006921472959220409}, {"id": 155, "seek": 110048, "start": 1110.48, "end": 1121.1200000000001, "text": " and now we can start the the visualizer and it takes the locks", "tokens": [293, 586, 321, 393, 722, 264, 264, 5056, 6545, 293, 309, 2516, 264, 20703], "temperature": 0.0, "avg_logprob": -0.20330647861256318, "compression_ratio": 1.36, "no_speech_prob": 0.0006921472959220409}, {"id": 156, "seek": 112112, "start": 1121.12, "end": 1136.08, "text": " oops it it takes the locks of the user fold demon and the nmt and the native mapping so what you", "tokens": [34166, 309, 309, 2516, 264, 20703, 295, 264, 4195, 4860, 14283, 293, 264, 297, 42744, 293, 264, 8470, 18350, 370, 437, 291], "temperature": 0.0, "avg_logprob": -0.17304499944051108, "compression_ratio": 1.7484662576687116, "no_speech_prob": 5.53902136744e-05}, {"id": 157, "seek": 112112, "start": 1136.08, "end": 1141.6, "text": " see here is basically the physical memory layout of the guest so it's memory page zero and in the", "tokens": [536, 510, 307, 1936, 264, 4001, 4675, 13333, 295, 264, 8341, 370, 309, 311, 4675, 3028, 4018, 293, 294, 264], "temperature": 0.0, "avg_logprob": -0.17304499944051108, "compression_ratio": 1.7484662576687116, "no_speech_prob": 5.53902136744e-05}, {"id": 158, "seek": 112112, "start": 1141.6, "end": 1149.36, "text": " end it's memory page one gigabyte and every square is four kilobyte page and if you go and", "tokens": [917, 309, 311, 4675, 3028, 472, 8741, 34529, 293, 633, 3732, 307, 1451, 5128, 13944, 975, 3028, 293, 498, 291, 352, 293], "temperature": 0.0, "avg_logprob": -0.17304499944051108, "compression_ratio": 1.7484662576687116, "no_speech_prob": 5.53902136744e-05}, {"id": 159, "seek": 114936, "start": 1149.36, "end": 1154.9599999999998, "text": " that's on the java process for example you see the dark these are the pages the rss of the java", "tokens": [300, 311, 322, 264, 361, 4061, 1399, 337, 1365, 291, 536, 264, 2877, 613, 366, 264, 7183, 264, 367, 3810, 295, 264, 361, 4061], "temperature": 0.0, "avg_logprob": -0.10361526858422064, "compression_ratio": 1.9841269841269842, "no_speech_prob": 1.4821117474639323e-05}, {"id": 160, "seek": 114936, "start": 1154.9599999999998, "end": 1161.36, "text": " process blue ones are occupied by the java process but they are also in the page cache so that's", "tokens": [1399, 3344, 2306, 366, 19629, 538, 264, 361, 4061, 1399, 457, 436, 366, 611, 294, 264, 3028, 19459, 370, 300, 311], "temperature": 0.0, "avg_logprob": -0.10361526858422064, "compression_ratio": 1.9841269841269842, "no_speech_prob": 1.4821117474639323e-05}, {"id": 161, "seek": 114936, "start": 1161.36, "end": 1171.6, "text": " probably a file for example or something or uh uh class uh spare shell class for example", "tokens": [1391, 257, 3991, 337, 1365, 420, 746, 420, 2232, 2232, 1508, 2232, 13798, 8720, 1508, 337, 1365], "temperature": 0.0, "avg_logprob": -0.10361526858422064, "compression_ratio": 1.9841269841269842, "no_speech_prob": 1.4821117474639323e-05}, {"id": 162, "seek": 114936, "start": 1171.6, "end": 1176.8, "text": " when you when you look at the nmt output we see that for example for the classes we use about", "tokens": [562, 291, 562, 291, 574, 412, 264, 297, 42744, 5598, 321, 536, 300, 337, 1365, 337, 264, 5359, 321, 764, 466], "temperature": 0.0, "avg_logprob": -0.10361526858422064, "compression_ratio": 1.9841269841269842, "no_speech_prob": 1.4821117474639323e-05}, {"id": 163, "seek": 117680, "start": 1176.8, "end": 1185.52, "text": " 66 i probably cannot read it it says virtually 69 megabytes uh rss is 60 megabytes and user", "tokens": [21126, 741, 1391, 2644, 1401, 309, 309, 1619, 14103, 28267, 10816, 24538, 2232, 367, 3810, 307, 4060, 10816, 24538, 293, 4195], "temperature": 0.0, "avg_logprob": -0.11213004204534716, "compression_ratio": 1.6818181818181819, "no_speech_prob": 3.7434801924973726e-05}, {"id": 164, "seek": 117680, "start": 1185.52, "end": 1193.12, "text": " fold demon loaded about 10 megabytes of it and here's the the animation i promised you", "tokens": [4860, 14283, 13210, 466, 1266, 10816, 24538, 295, 309, 293, 510, 311, 264, 264, 9603, 741, 10768, 291], "temperature": 0.0, "avg_logprob": -0.11213004204534716, "compression_ratio": 1.6818181818181819, "no_speech_prob": 3.7434801924973726e-05}, {"id": 165, "seek": 117680, "start": 1193.12, "end": 1199.12, "text": " so this is how the pages got loaded when we did the first call request on a on a resumed image", "tokens": [370, 341, 307, 577, 264, 7183, 658, 13210, 562, 321, 630, 264, 700, 818, 5308, 322, 257, 322, 257, 725, 28189, 3256], "temperature": 0.0, "avg_logprob": -0.11213004204534716, "compression_ratio": 1.6818181818181819, "no_speech_prob": 3.7434801924973726e-05}, {"id": 166, "seek": 117680, "start": 1199.12, "end": 1204.96, "text": " and like the the yellow ones are all the pages which i've loaded and the orange one i don't know", "tokens": [293, 411, 264, 264, 5566, 2306, 366, 439, 264, 7183, 597, 741, 600, 13210, 293, 264, 7671, 472, 741, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.11213004204534716, "compression_ratio": 1.6818181818181819, "no_speech_prob": 3.7434801924973726e-05}, {"id": 167, "seek": 120496, "start": 1204.96, "end": 1211.8400000000001, "text": " yeah some are orange belong to the to the to the virtual memory region i have selected here so for", "tokens": [1338, 512, 366, 7671, 5784, 281, 264, 281, 264, 281, 264, 6374, 4675, 4458, 741, 362, 8209, 510, 370, 337], "temperature": 0.0, "avg_logprob": -0.07489001330207376, "compression_ratio": 1.7741935483870968, "no_speech_prob": 2.414503069303464e-05}, {"id": 168, "seek": 120496, "start": 1211.8400000000001, "end": 1218.0, "text": " example all the orange pages are the the parts of the class space which got loaded for the first", "tokens": [1365, 439, 264, 7671, 7183, 366, 264, 264, 3166, 295, 264, 1508, 1901, 597, 658, 13210, 337, 264, 700], "temperature": 0.0, "avg_logprob": -0.07489001330207376, "compression_ratio": 1.7741935483870968, "no_speech_prob": 2.414503069303464e-05}, {"id": 169, "seek": 120496, "start": 1218.0, "end": 1226.96, "text": " request so this is a lot of space for more investigation would be nice to to compact this", "tokens": [5308, 370, 341, 307, 257, 688, 295, 1901, 337, 544, 9627, 576, 312, 1481, 281, 281, 14679, 341], "temperature": 0.0, "avg_logprob": -0.07489001330207376, "compression_ratio": 1.7741935483870968, "no_speech_prob": 2.414503069303464e-05}, {"id": 170, "seek": 120496, "start": 1226.96, "end": 1232.64, "text": " more like physically because you want to prefetch the the things which get loaded especially if you", "tokens": [544, 411, 9762, 570, 291, 528, 281, 18417, 7858, 264, 264, 721, 597, 483, 13210, 2318, 498, 291], "temperature": 0.0, "avg_logprob": -0.07489001330207376, "compression_ratio": 1.7741935483870968, "no_speech_prob": 2.414503069303464e-05}, {"id": 171, "seek": 123264, "start": 1232.64, "end": 1239.0400000000002, "text": " download your images from from network for example and but the problem is that all the physical", "tokens": [5484, 428, 5267, 490, 490, 3209, 337, 1365, 293, 457, 264, 1154, 307, 300, 439, 264, 4001], "temperature": 0.0, "avg_logprob": -0.1658597787221273, "compression_ratio": 1.68125, "no_speech_prob": 6.409189518308267e-05}, {"id": 172, "seek": 123264, "start": 1239.0400000000002, "end": 1246.72, "text": " address space is continuous like the virtual uh the physical pages are are not and try to look", "tokens": [2985, 1901, 307, 10957, 411, 264, 6374, 2232, 264, 4001, 7183, 366, 366, 406, 293, 853, 281, 574], "temperature": 0.0, "avg_logprob": -0.1658597787221273, "compression_ratio": 1.68125, "no_speech_prob": 6.409189518308267e-05}, {"id": 173, "seek": 123264, "start": 1246.72, "end": 1256.48, "text": " into uh possibility to do that so that that's it thank you thank you very much", "tokens": [666, 2232, 7959, 281, 360, 300, 370, 300, 300, 311, 309, 1309, 291, 1309, 291, 588, 709], "temperature": 0.0, "avg_logprob": -0.1658597787221273, "compression_ratio": 1.68125, "no_speech_prob": 6.409189518308267e-05}, {"id": 174, "seek": 125648, "start": 1256.48, "end": 1262.88, "text": " there's about 30 seconds for questions is anyone got a question called your answer question", "tokens": [456, 311, 466, 2217, 3949, 337, 1651, 307, 2878, 658, 257, 1168, 1219, 428, 1867, 1168], "temperature": 0.0, "avg_logprob": -0.5673178003189412, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.004070439841598272}, {"id": 175, "seek": 125648, "start": 1262.88, "end": 1270.88, "text": " i have a question regarding uh when you showed uh uh crack uh implementation there was uh", "tokens": [741, 362, 257, 1168, 8595, 2232, 562, 291, 4712, 2232, 2232, 6226, 2232, 11420, 456, 390, 2232], "temperature": 0.0, "avg_logprob": -0.5673178003189412, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.004070439841598272}, {"id": 176, "seek": 125648, "start": 1270.88, "end": 1274.88, "text": " implementation that put into the uh", "tokens": [11420, 300, 829, 666, 264, 2232], "temperature": 0.0, "avg_logprob": -0.5673178003189412, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.004070439841598272}, {"id": 177, "seek": 127488, "start": 1274.88, "end": 1278.3200000000002, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.26319318771362304, "compression_ratio": 1.4744525547445255, "no_speech_prob": 0.00038865700480528176}, {"id": 178, "seek": 127488, "start": 1283.2, "end": 1286.3200000000002, "text": " yeah", "tokens": [1338], "temperature": 0.0, "avg_logprob": -0.26319318771362304, "compression_ratio": 1.4744525547445255, "no_speech_prob": 0.00038865700480528176}, {"id": 179, "seek": 127488, "start": 1290.72, "end": 1296.5600000000002, "text": " yes i unfortunately there is no time in 20 minutes to show that but you can obviously use the current", "tokens": [2086, 741, 7015, 456, 307, 572, 565, 294, 945, 2077, 281, 855, 300, 457, 291, 393, 2745, 764, 264, 2190], "temperature": 0.0, "avg_logprob": -0.26319318771362304, "compression_ratio": 1.4744525547445255, "no_speech_prob": 0.00038865700480528176}, {"id": 180, "seek": 127488, "start": 1296.5600000000002, "end": 1303.7600000000002, "text": " crack implementation inside firecracker use j command and instead of crue there is a backend", "tokens": [6226, 11420, 1854, 2610, 10757, 23599, 764, 361, 5622, 293, 2602, 295, 941, 622, 456, 307, 257, 38087], "temperature": 0.0, "avg_logprob": -0.26319318771362304, "compression_ratio": 1.4744525547445255, "no_speech_prob": 0.00038865700480528176}, {"id": 181, "seek": 130376, "start": 1303.76, "end": 1309.68, "text": " called uh post handler that's just a small program which instead of calling crue just", "tokens": [1219, 2232, 2183, 41967, 300, 311, 445, 257, 1359, 1461, 597, 2602, 295, 5141, 941, 622, 445], "temperature": 0.0, "avg_logprob": -0.11205058627658421, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.00016049118130467832}, {"id": 182, "seek": 130376, "start": 1309.68, "end": 1316.0, "text": " dispense the whole process and then you can send in the signal to restore it so with firecracker you", "tokens": [4920, 1288, 264, 1379, 1399, 293, 550, 291, 393, 2845, 294, 264, 6358, 281, 15227, 309, 370, 365, 2610, 10757, 23599, 291], "temperature": 0.0, "avg_logprob": -0.11205058627658421, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.00016049118130467832}, {"id": 183, "seek": 130376, "start": 1316.0, "end": 1323.04, "text": " basically checkpoint with the post engine then do the firecracker snapshot then restore firecracker", "tokens": [1936, 42269, 365, 264, 2183, 2848, 550, 360, 264, 2610, 10757, 23599, 30163, 550, 15227, 2610, 10757, 23599], "temperature": 0.0, "avg_logprob": -0.11205058627658421, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.00016049118130467832}, {"id": 184, "seek": 130376, "start": 1323.04, "end": 1327.92, "text": " and then just do an ssh with a kill signal on on the process and it will will restart that's one", "tokens": [293, 550, 445, 360, 364, 262, 2716, 365, 257, 1961, 6358, 322, 322, 264, 1399, 293, 309, 486, 486, 21022, 300, 311, 472], "temperature": 0.0, "avg_logprob": -0.11205058627658421, "compression_ratio": 1.8592233009708738, "no_speech_prob": 0.00016049118130467832}, {"id": 185, "seek": 132792, "start": 1327.92, "end": 1334.8000000000002, "text": " possibility another one is i wrote the jvmti agent which basically has the same thing even without crue", "tokens": [7959, 1071, 472, 307, 741, 4114, 264, 361, 85, 76, 7317, 9461, 597, 1936, 575, 264, 912, 551, 754, 1553, 941, 622], "temperature": 0.0, "avg_logprob": -0.15707290649414063, "compression_ratio": 1.6685393258426966, "no_speech_prob": 0.00025661083054728806}, {"id": 186, "seek": 132792, "start": 1334.8000000000002, "end": 1342.8000000000002, "text": " it uh it um suspends all threads it calls system gc and then waits uh on a on a port so you just", "tokens": [309, 2232, 309, 1105, 6535, 2581, 439, 19314, 309, 5498, 1185, 290, 66, 293, 550, 40597, 2232, 322, 257, 322, 257, 2436, 370, 291, 445], "temperature": 0.0, "avg_logprob": -0.15707290649414063, "compression_ratio": 1.6685393258426966, "no_speech_prob": 0.00025661083054728806}, {"id": 187, "seek": 132792, "start": 1342.8000000000002, "end": 1350.72, "text": " ping it with telnet or whatsoever and and it even calls uh the the the the hooks by implementing", "tokens": [26151, 309, 365, 15284, 7129, 420, 17076, 293, 293, 309, 754, 5498, 2232, 264, 264, 264, 264, 26485, 538, 18114], "temperature": 0.0, "avg_logprob": -0.15707290649414063, "compression_ratio": 1.6685393258426966, "no_speech_prob": 0.00025661083054728806}, {"id": 188, "seek": 135072, "start": 1350.72, "end": 1358.32, "text": " the this custom possibility to uh with the property so i i i i say or crack to use my", "tokens": [264, 341, 2375, 7959, 281, 2232, 365, 264, 4707, 370, 741, 741, 741, 741, 584, 420, 6226, 281, 764, 452], "temperature": 0.0, "avg_logprob": -0.12375546561347114, "compression_ratio": 1.5338983050847457, "no_speech_prob": 0.0005283575155772269}, {"id": 189, "seek": 135072, "start": 1358.32, "end": 1365.76, "text": " crack implementation to call the hooks so that all works it's in the in the repository which is", "tokens": [6226, 11420, 281, 818, 264, 26485, 370, 300, 439, 1985, 309, 311, 294, 264, 294, 264, 25841, 597, 307], "temperature": 0.0, "avg_logprob": -0.12375546561347114, "compression_ratio": 1.5338983050847457, "no_speech_prob": 0.0005283575155772269}, {"id": 190, "seek": 136576, "start": 1365.76, "end": 1381.68, "text": " i had a resource slide which i didn't show it has all the links so", "tokens": [50364, 741, 632, 257, 7684, 4137, 597, 741, 994, 380, 855, 309, 575, 439, 264, 6123, 370, 51160], "temperature": 0.0, "avg_logprob": -0.23465239374261154, "compression_ratio": 1.0476190476190477, "no_speech_prob": 0.0014856680063530803}], "language": "en"}