{"text": " So, my name is Neil Coffey. I'm a Java developer. Of course, I'm a Java developer with that surname. And so, this is a talk about a little side project that I started a couple of years ago. It was kind of, I was just keen to see in Java how far I would get with developing an emulator. This is the first emulator that I've developed from scratch. And it kind of started, you know, I had a bit of time, you know, we've had a lockdown and I kind of thought, well, what do I need to write an emulator? Well, one of the things I might try and do to start with is get a ROM reader to kind of start from scratch. And then I found, I don't know if you've heard, but my country left the EU a couple of years ago. And I actually found it hard to source the ROM reader from Germany. So, the first thing I did, if there's any work, is I built my own, obviously, that's the first thing. And then, so by the time I'd done this, I was kind of committed at that point. Okay. So, what I'm going to go through, then, is my experiences of writing an emulator and kind of, as I say, first time I've ever written decisions, challenges. It's going to be a little bit of a tour through some of the APIs that there are now in the Java platform, this kind of thing. And in all honesty, some kind of, there are some pros and cons that I'll talk about. Yeah. And above all, some kind of little, little tricks in the APIs that aren't always very well documented that can kind of help us. So, why Java? So, I'll be completely honest. The main reason for me was, it's the language I'm most familiar with. Yeah. So, I've been using Java now for about 20 years, about the first JRE that I used came on floppy disk. Okay. So, that's how long. These days, I'm just obviously cross-platform. And these days, it's got quite a rich set of APIs, hopefully, everything we need to develop an emulator. It's got good longevity. So, you tend not to have this thing in Java that you sometimes get in Swift, for example, where you kind of come in one morning, try and recompile your code and find it won't compile anymore because Apple's changed something. Java tends not to have that. It's maintained good backwards compatibility over the years. And so, hopefully, anything I write, moving forward, will also run. I don't have to have an emulator in a few years' time to emulate the emulator. Okay. There are, as well, from a personal view, there's some APIs coming up that I was kind of keen to have a benchmark to see, well, in a couple of years' time, you know, things like the, you know, the foreign function and memory API that's kind of just about to kind of hit stability. I was kind of interested to see, well, you know, what will I be able to do with that when it comes out? Okay. So, I set myself some goals that I wanted to be, my emulator, to be accurate enough to allow most software to run on. In all honesty, for kind of version one of my first emulator, there were some things that I decided not to emulate, to things like memory contention issues. There are some weird things that you can get that I'll maybe have time to talk about in the spectrum with kind of glitches in the video display. So, essentially, my kind of overall goal was anything that software uses that isn't a kind of bug in the hardware that people might accidentally get around or use, I'll try and emulate that. As Roddy mentioned, one thing I was trying to do is get a baseline from the basic Java APIs and try not to bring in additional libraries as a kind of starting point and want to be a cooperative applications like not necessarily just full screen, perform enough, yeah, as I say, I'm not trying to write a one gigahertz Z84 for my kind of first projects. Which machines do I try to emulate? So, I went for the trusty old ZX Spectrum. So, apologies to Steve, I'm adding to the pile of emulators now available from ZX Spectrum. And I also thought that the Sega Mars system, so why these two together? A, these are the machines I had as a kid, okay? But B, if we look at the technical specs, there are actually some similarities that are going to help us. So, you can see the video resolution is similar, although the video chips and formats that they use are very different. The CPU essentially is a data around 3.5. So, around 3.5, actually, there are different models of the spectrum with different speeds and the Mars system, very slight. I think it was 3.58 for the Mars system. And you can see then here, for the, probably everybody in this room is kind of fell if middle of these machines, but for those who aren't. So, you can see that the Sinclair Spectrum in comparison was all about saving money. So, you had one custom ULA here that was handling the video and the sound and was also memory controller compared to the Mars system that had a bit more on-board hardware that we're going to have to try and emulate. So, just a little bit more detail of some of the difficulties, again, for people and may be familiar. So, the ZX Spectrum, it renders its video all from RAM, essentially with kind of no acceleration as such. And it's got this format that really kind of gives the ZX Spectrum its look and feel. Yes, you had essentially a one bit per pixel bitmap and then over the top of that, you're allowed two colors, essentially, per rate by itself. Yeah, and this kind of gave the Spectrum a bit of a unique look and feel as bright and flash as well per cell. Compare that to the Mars system where you've got an actual dedicated graphics chip, but this was all tile based. Yeah, so you have a 34 by 24 tile display. Each tile can be 8 by 8 pixels. Yeah, so the eagle eyed amongst you will notice that you can't actually define enough unique tiles to give each pixel in that display. It's kind of a unique pixel. So anything that looks like it does, you'll see you get these kind of almost like little manga cards for some games. Or here where we've tried to fill the screen, obviously secretly around the edges, we've actually got blank space. So there wasn't actually enough memory to have unique tiles for every space on the screen. But despite that, it did have features that were actively kind of advocated by Sega to its developers to make the most possible use of that of the video chip. So the way it worked, you have a series of registers to control things like the scrolling, the colors. And there was a mechanism via interrupt to actually on each scan line or on every nth scan line, depending on how you programmed it, you could actually change those registers. Yes, you could change the scroll position at different parts of the screen. You could switch off the screen. You could potentially change the color palette. And so that's something when we're doing our video rendering, we're going to have to have a little think about how we can kind of optimize that a little bit. I'll just give a very quick example. So we're going to see here, we've got some parallax scrolling, where you see how on different scan lines, we're setting a different X position. And then that's quite a nice fact, that's a game called Choplifter. On the next example, we're actually going to have a case where here we're actually, it's not literally turning off the screen, but it's changing the base address of the screen memory to effectively turn it off at that bottom part. And this is kind of probably the most one, an extreme example here, where literally on kind of every other scan line, we're changing the scroll position to kind of give that effect there. So very briefly, I'll just give a little bit of the kind of the overall organization of the emulators, kind of the first thing you really need to think about. So it's how we kind of turn this, this is very high level obviously, but this essentially what the hardware looks like, we've got an address bus at the top with the ROM and the RAM connector, we've got a data bus at the bottom with any peripherals, which on the spectrum were fairly minimal, there was a one to eight version with the sound chip. And then on the master system, you can see again, similar idea, but notice that the ROM essentially is the cartridge that you plug in. Yes, when you plug a cartridge in, you're kind of directly communicating with the Z80 and any logic for things like memory paging, you can have that on the cartridge. And then a few more peripherals going on the data bus, we've got the video processor there, the programmable sound generator, there's not an FM unit, which I'll touch on briefly, and the controllers. So then what I try to do, and so there was the emulator clock there as well. And what I try to do is to abstract that down, so that I'm going to organize the program this way, we've obviously got the Z80 implementation is obviously a kind of fairly fundamental part. But then we've, what I've actually done is in my implementation, I've separated out the Z80 decoder from the actual instruction loop. This is quite nice and we want to add a debugger as well, then you can go through the same code to decode the instructions for the debugger. And then we've got an abstract IO bus, from which again then on the master system, we'll have our master system IO bus on the spectrum IO, etc. A memory of similar ideas, we have subclasses of these overall base classes. And the clock, which is actually working the other way round to the way that the hardware, the clock is effectively going to be a kind of break on the CPU thread and is going to tell it when to pause to keep things at the right rate of instructions. And there'll be a little bit of feedback as well between the video thread so that it can interact with the CPU to do the things I've just mentioned about accurately timing the scroll registers and things. So just an example, I end up with interfaces like this and then to the Z80, it's effectively, it doesn't care whether it's a master system or a spectrum it's communicating with, it just goes through these abstract interfaces like this. A little bit of detail just on, I've just mentioned about the the CPU. The implementation that I went for, which isn't necessarily the most kind of popular of the traditional emulators, I tried to really break down the instruction set into more of an object-oriented form. So I've got instruction types you'll see there and then for each type the individual instruction is kind of returned as an object that says well it's this type and it's from this source, this destination. So I've tried to kind of not have to write 900 different routines for all the various combinations that the Z80 had and that gives quite nice code. There's a little bit of a performance trade-off obviously but it turns out not to be not to be too bad. Okay and then the other decision I made was well we're now writing in Java in 2023 now so I decided well I want to make the most of multi-threading. So the various of the components I've just mentioned will actually sit in their own thread. Okay and that's kind of nice organizationally and also in terms of monitoring the performance of the app it means we can break down a little bit more easily what resources are being used for each component. So just to give a little bit of an overview of this, so we'll have at the top kind of got our, well this work yeah, is that good? So we've got our the CPU thread at the top there and which is going to be interacting with the clock and is periodically going to say you know I've done this many instruction cycles. How am I doing? Do I need to pause to kind of maintain the correct instruction rate? Then we've got the video controller which is going to be sending periodically sending V blank instructions every frame to the CPU to notify it. We've got then also a separate rendering thread which is going to do any of the kind of heavy lifting rendering that we need to do. So anything like scaling, calculating what the actual pixels are and then the idea is that here in the event dispatch thread which is a single threaded at that point we have to kind of have our ducks in a row and know what we're actually going to render. Then additional complication is it was going to be an audio service in its own thread as well. So different APIs that we're going to use. There's a standard Java Swing API so there's no additional open GL plug-ins here. A couple of the Java sounds I mentioned monitoring Neo kind of a little hidden one but when we're writing data, when we're emulating kind of cartridge saves and we want to write data actually open a mapped file for that to save the data and their threading is often important. I'm not going to really mention too much but there are also desktop and taskbar and integration APIs that help with integrating into the desktop with the system menus and things. So we'll start with the graphics. The standard Swing and Java 2D APIs people may be familiar with, the idea is that you override the the jcomponent class and you implement a paint component method and here in principle we can set various options to hint with whether we want quality speed etc and then finally we can render an image and it will be rendered with the with these different settings. But some caveats with that. Unfortunately it turns out that some of those options effectively end up turning off GPU acceleration and they can be quite CPU hungry and efficient. It's not clearly documented which ones actually run on the CPU and the GPU but effectively ends up that the fast options without any quality interpolation are the ones that run that just go straight to the GPU. So we're going to have to be a little bit careful not to use too much CPU time for each frame render. And then there's also an additional problem that the standard API to set and get pixels from buffered images actually it's quite inefficient for setting individual pixels but we have a workaround. So this will be the standard API that we'd use. We create our image like this, lovely, we set different types about 15 different types that we could use and then we can set RGB and whether that backing star is an input pixel or bytes per pixel or whatever it will work out how to set the RGB lovely. But in practice we're probably never going to have anything other than an input pixel. So this is the least efficient way we could possibly imagine to set the pixel data. Luckily we can actually with a little bit of jigglypokery we can ask Java 2D for the underlying interay and then we can just directly write to that. The advantage being then things like array fill, array copy, array dot fill sorry they then become available. There's a caveat that normally wouldn't do this because if you've got static images that you're rendering lots of times the what would normally happen is that Java 2D sends that to the GPU once then subsequent renders are effectively free but we don't really need that for our purposes. We're going to be rendering a different image on each frame effectively so that's not such a problem for us. So then just to come back to us I'm showing you earlier with the different scroll per frame on different raster lines. We kind of want to get the best of both worlds with how we then end up structuring things. So what I do is I basically I kind of break down the image and say well for this frame where are the points where the things like the scroll registers actually change. On some games that will they will just have one setting per frame and I can then just efficiently render the the the entire frame without without having to you know worry about clips per section etc. So I don't kind of literally go through pixel by pixel kind of chasing the beam. Just yes there's just a kind of brief example here so I'll split into sections and then I can say for that section get me the relevant settings and then go through and fetch from the from the the tile map data and render it kind of almost as you expect. So by doing that and by using this trick of getting the raw kind of interay this does allow us to get quite a good speed up on on the rendering. So if there's kind of one one thing you're doing in Java the kind of the one kind of speed up to think about is probably this. Mention so having having none about that trick there's some little little tricks that we can do obviously people familiar with with with CRTs where they were actually the way these systems work they kind of render every other scan line and we can if you've got a really good quality monitor a little like that most people's minds a little bit more that you kind of had bleed in between the scan lines and you also kind of get ghosting effects this kind of thing. So we can try and give a little bit of the that look and feel yeah so I'm literally going to do here in the Java is I'm going to render things that every other kind of scan line I'm going to render the kind of darkened version of that scan line so I can kind of produce something like this and then just have to be a little bit careful with the scaling because you can get more effects if if you've you've got a kind of odd scale factor so do a little bit of extra interpolation to try and get around that. Then another effect that we can do in Java is to like these kind of ghosting effects if we can define our effect in terms of a convolution matrix which you may have seen then we get native library built in that will allow us to render that efficiently and that will also access the integer data under the hood it won't go through that set RGB every time. So we can get effects like this again we're kind of at low rendering time and then this is for my favorite spectrum games from a child to do something like this combining the kind of CRT effect. Another issue we just have is there are multiple ways to scale images in Java and depending on which one we pick we kind of get different different performance characteristics so the thing I'm actually looking at which is kind of most stable is to actually just hard code just hard code the scaling myself because then I can go through this you know access the interay directly some of these other built-in APIs unfortunately you know they go through that get RGB set RGB to be you know support different formats but we don't really we don't really need that. Okay let's talk about sound so the the mass system and the spectrum had quite different ways of producing sound the spectrum obviously was this kind of very simple speaker it could effectively be a one or a zero and you kind of control a square wave literally from the CPU to produce your sound but then something like the master system that had an actual sound chip you would control the sound by setting register to say I want tone one to be this frequency etc so we want to abstract those two ways of producing sound so that we can we can just have one generate sample data method and then our audio service is going to call into that and so it's just a brief slip here of what I do so I've got it that'll be the subclass for example for the spectrum type sound there and then here a bit more complicated but we effectively you know do a similar thing we're going to be whenever we're asked for some sample data we're going to calculate that sample data and split it back yeah and then and then the question becomes well given that sample data production how do we actually pipe it down to the audio output and Java has this slightly quirky model where you have a notional mixer that's got inputs and outputs and the slightly perverse thing is that everything is seen in terms of this notional mixer so when you want to output sound you're actually sending it to an input of the mixer yeah so we call it a source line yeah whereas to us it's not really a source it's a target but that's the reason for that so if I you see here they're also tied to particular drivers and I can enumerate the different drivers on my machine I find that I found out for example that my Mac can listen through my iPhone microphone that was the first time I found that out so yeah so we we're clearly available mixers and then we query them for their available source lines okay and then we can we can write the data and to the source line we open it with a format that we want we write the data and so this is now where I can call my generate sample data method when there's some frames to send I send them okay people might have spotted a slight flaw with that I've got a nice infinite loop there on something like the spectrum I need to be able to tell the difference between there's no audio and there's no audio yet but but there's some on the way and I don't want to sit in an infinite loop in the meantime okay so this is where so yeah this was just code examples how I get we output those ones and zeros and then we translate them but so I'll just skip quickly we so we get those ones and zeros and then what we're actually going to do is we're going to use a condition object which is part of the Java concurrency API so that we can basically in our audio in our audio service thread we can wait for a notification that there's actually some audio that that we want to send okay there we go okay yeah there's also a little bit that we can do with yeah hybrid buffering is basically where we we want we want to ideally have a small buffer to fill to send but that then ensures the problem of we might we run the risk that if we can't fill our buffer in time we end up with choppy audio and so in practice what we can actually do is have a larger buffer and detect when it's half full and kind of keep topping it up and so that's basically how I do it okay and the FM synth which I'll mention briefly I never had one of these I think they're quite rake and I'll get them in Japan but the master system this was an option for the master system okay and I'm what I actually do for this I cheat slightly I use javas built in midi software synthesizer so I translate the instructions to that FM synth into midi commands and I send these to the soft synth and I don't know if this is going to play on the projector but I'll turn up the audio here and just see so you'll hear difference you'll hear the the normal PSG sound chip and then you will hear the FM kind of synth oh I don't hear that it's probably too quiet and you see there we can then start playing about with things like the the voices that we we assign to those okay so I'll just touch on very briefly because time is getting to the end and so I'll just touch very briefly on the timing and concurrency so the CP obviously we need to maintain it at a kind of our desired instruction rate so the way I do this is I introduce pauses and but then we want to be able to accurately measure those pauses and we also need to accurately measure the timings between the frames that were that we're sending and there are there's obviously standard APIs in in Java to do this a little issue that I did come across the standard executor framework that we'd normally use for doing this so here we say right okay I want to frame every every 60th of the second depending on your platform you can actually in practice get quite erratic intervals between between between the the events so you can see in particular on macOS I find you could get this kind of 20 error so this is just just one experiment for example if we and what I luckily found was that if we request low low sleep interval with the accuracy is actually better for low sleep intervals than the higher sleep intervals and it seems to it seems to max out a particular amount I'm not exactly sure of the underlying reason for that it was to meet in Darwin but then what this leads to is we can kind of come with depending on the platform we can come up with a different strategy for maintaining accurate timing and a challenge you know it's a perpetual challenge with Java really is then that the the the best strategy will will depend on the depend on the platform very briefly data manipulation which sometimes something a bit scared of in Java we all of the types are right well they're generally signed char is unsigned but they're generally fixed width and signed we can't do what we can in seeing other languages and defining our own types and so one way to work around this one want to do things like register access and the audio data is the byte buffer is generally the kind of the easiest way to do that and you'll notice that when we want when we want bytes because byte the byte type is signed so if on an unsigned byte then we would normally and promote it to an int and then we can basically undo the ff and lock lock off the lock lock off the the lowest bytes and then so there's just a I'll just skip further and there's just a question with that about well how do we check that the jit compiler is doing what we need to do and so I'll just let step forward slightly and what we can actually do we can ask it yeah so we can we can ask it to dump out the the the jit compiled assembler and then we can check if some of those optimizations are actually going in so this was very simple test I set up it's basically it's iterating through repeatedly effectively writing a word and then reading it from from a byte buffer yeah this obviously is slightly contrived this is you know really the kind of the contrived corner case example but it kind of illustrates the the kind of thing that's possible yeah so I'm effectively that bts effectively writing a two byte unsigned value into there via a byte buffer so it looks like I'm creating a byte buffer setting values on it calling a method on it but by the time we get down to the actual jit compiled assembly code in the best case we're actually not that just compiles down into a we are storing a half word in there and so that's the kind of thing that we can that we can do to kind of check for those things okay and I think we're skipped to the there we go yeah so mentions yeah the method those method calls are completely optimized out okay so so there you go so in conclusion using those various APIs together we can write them in Java a few pros and cons caveats around the different platform behavior a few things that still to add in here this is this is very much kind of version one however it was at the point where it will actually run quite a lot of the spectrum master system software if anyone's curious I've got initially released there on github there's going to be source code and further improvements on the way so watch that repo as they say a few references there that people may or may not have come across this book here by Chris Smith is I think kind of a remarkable piece of work about the kind of the very kind of low level details of how the spectrum works and the usual you know kind of reference guides that over the years have surfaced on the web and so with that I think I'll hand back", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 25.44, "text": " So, my name is Neil Coffey. I'm a Java developer. Of course, I'm a Java developer with that", "tokens": [407, 11, 452, 1315, 307, 18615, 3066, 602, 2030, 13, 286, 478, 257, 10745, 10754, 13, 2720, 1164, 11, 286, 478, 257, 10745, 10754, 365, 300], "temperature": 0.0, "avg_logprob": -0.3791420300801595, "compression_ratio": 1.1375, "no_speech_prob": 0.34801217913627625}, {"id": 1, "seek": 2544, "start": 25.44, "end": 32.24, "text": " surname. And so, this is a talk about a little side project that I started a couple of years ago.", "tokens": [50152, 13, 400, 370, 11, 341, 307, 257, 751, 466, 257, 707, 1252, 1716, 300, 286, 1409, 257, 1916, 295, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.12679334715300916, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.00018562441982794553}, {"id": 2, "seek": 2544, "start": 33.6, "end": 39.760000000000005, "text": " It was kind of, I was just keen to see in Java how far I would get with developing an emulator.", "tokens": [467, 390, 733, 295, 11, 286, 390, 445, 20297, 281, 536, 294, 10745, 577, 1400, 286, 576, 483, 365, 6416, 364, 846, 16381, 13], "temperature": 0.0, "avg_logprob": -0.12679334715300916, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.00018562441982794553}, {"id": 3, "seek": 2544, "start": 40.32, "end": 47.040000000000006, "text": " This is the first emulator that I've developed from scratch. And it kind of started, you know,", "tokens": [639, 307, 264, 700, 846, 16381, 300, 286, 600, 4743, 490, 8459, 13, 400, 309, 733, 295, 1409, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.12679334715300916, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.00018562441982794553}, {"id": 4, "seek": 2544, "start": 47.040000000000006, "end": 51.760000000000005, "text": " I had a bit of time, you know, we've had a lockdown and I kind of thought, well,", "tokens": [286, 632, 257, 857, 295, 565, 11, 291, 458, 11, 321, 600, 632, 257, 17267, 293, 286, 733, 295, 1194, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.12679334715300916, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.00018562441982794553}, {"id": 5, "seek": 5176, "start": 51.76, "end": 56.72, "text": " what do I need to write an emulator? Well, one of the things I might try and do to start with is", "tokens": [437, 360, 286, 643, 281, 2464, 364, 846, 16381, 30, 1042, 11, 472, 295, 264, 721, 286, 1062, 853, 293, 360, 281, 722, 365, 307], "temperature": 0.0, "avg_logprob": -0.10293064117431641, "compression_ratio": 1.6575342465753424, "no_speech_prob": 1.9381006495677866e-05}, {"id": 6, "seek": 5176, "start": 56.72, "end": 64.16, "text": " get a ROM reader to kind of start from scratch. And then I found, I don't know if you've heard,", "tokens": [483, 257, 41678, 15149, 281, 733, 295, 722, 490, 8459, 13, 400, 550, 286, 1352, 11, 286, 500, 380, 458, 498, 291, 600, 2198, 11], "temperature": 0.0, "avg_logprob": -0.10293064117431641, "compression_ratio": 1.6575342465753424, "no_speech_prob": 1.9381006495677866e-05}, {"id": 7, "seek": 5176, "start": 64.16, "end": 70.08, "text": " but my country left the EU a couple of years ago. And I actually found it hard to source the ROM reader", "tokens": [457, 452, 1941, 1411, 264, 10887, 257, 1916, 295, 924, 2057, 13, 400, 286, 767, 1352, 309, 1152, 281, 4009, 264, 41678, 15149], "temperature": 0.0, "avg_logprob": -0.10293064117431641, "compression_ratio": 1.6575342465753424, "no_speech_prob": 1.9381006495677866e-05}, {"id": 8, "seek": 5176, "start": 70.08, "end": 75.68, "text": " from Germany. So, the first thing I did, if there's any work, is I built my own, obviously,", "tokens": [490, 7244, 13, 407, 11, 264, 700, 551, 286, 630, 11, 498, 456, 311, 604, 589, 11, 307, 286, 3094, 452, 1065, 11, 2745, 11], "temperature": 0.0, "avg_logprob": -0.10293064117431641, "compression_ratio": 1.6575342465753424, "no_speech_prob": 1.9381006495677866e-05}, {"id": 9, "seek": 5176, "start": 75.68, "end": 81.12, "text": " that's the first thing. And then, so by the time I'd done this, I was kind of committed at that", "tokens": [300, 311, 264, 700, 551, 13, 400, 550, 11, 370, 538, 264, 565, 286, 1116, 1096, 341, 11, 286, 390, 733, 295, 7784, 412, 300], "temperature": 0.0, "avg_logprob": -0.10293064117431641, "compression_ratio": 1.6575342465753424, "no_speech_prob": 1.9381006495677866e-05}, {"id": 10, "seek": 8112, "start": 81.12, "end": 87.92, "text": " point. Okay. So, what I'm going to go through, then, is my experiences of writing an emulator and", "tokens": [935, 13, 1033, 13, 407, 11, 437, 286, 478, 516, 281, 352, 807, 11, 550, 11, 307, 452, 5235, 295, 3579, 364, 846, 16381, 293], "temperature": 0.0, "avg_logprob": -0.1451500654220581, "compression_ratio": 1.7269503546099292, "no_speech_prob": 8.721761696506292e-05}, {"id": 11, "seek": 8112, "start": 87.92, "end": 93.52000000000001, "text": " kind of, as I say, first time I've ever written decisions, challenges. It's going to be a little", "tokens": [733, 295, 11, 382, 286, 584, 11, 700, 565, 286, 600, 1562, 3720, 5327, 11, 4759, 13, 467, 311, 516, 281, 312, 257, 707], "temperature": 0.0, "avg_logprob": -0.1451500654220581, "compression_ratio": 1.7269503546099292, "no_speech_prob": 8.721761696506292e-05}, {"id": 12, "seek": 8112, "start": 93.52000000000001, "end": 98.56, "text": " bit of a tour through some of the APIs that there are now in the Java platform, this kind of thing.", "tokens": [857, 295, 257, 3512, 807, 512, 295, 264, 21445, 300, 456, 366, 586, 294, 264, 10745, 3663, 11, 341, 733, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.1451500654220581, "compression_ratio": 1.7269503546099292, "no_speech_prob": 8.721761696506292e-05}, {"id": 13, "seek": 8112, "start": 99.60000000000001, "end": 105.12, "text": " And in all honesty, some kind of, there are some pros and cons that I'll talk about. Yeah.", "tokens": [400, 294, 439, 26839, 11, 512, 733, 295, 11, 456, 366, 512, 6267, 293, 1014, 300, 286, 603, 751, 466, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.1451500654220581, "compression_ratio": 1.7269503546099292, "no_speech_prob": 8.721761696506292e-05}, {"id": 14, "seek": 8112, "start": 105.12, "end": 110.4, "text": " And above all, some kind of little, little tricks in the APIs that aren't always very well documented", "tokens": [400, 3673, 439, 11, 512, 733, 295, 707, 11, 707, 11733, 294, 264, 21445, 300, 3212, 380, 1009, 588, 731, 23007], "temperature": 0.0, "avg_logprob": -0.1451500654220581, "compression_ratio": 1.7269503546099292, "no_speech_prob": 8.721761696506292e-05}, {"id": 15, "seek": 11040, "start": 110.4, "end": 117.36, "text": " that can kind of help us. So, why Java? So, I'll be completely honest. The main reason for me was,", "tokens": [300, 393, 733, 295, 854, 505, 13, 407, 11, 983, 10745, 30, 407, 11, 286, 603, 312, 2584, 3245, 13, 440, 2135, 1778, 337, 385, 390, 11], "temperature": 0.0, "avg_logprob": -0.12353917714711782, "compression_ratio": 1.4743083003952568, "no_speech_prob": 3.819410994765349e-05}, {"id": 16, "seek": 11040, "start": 117.36, "end": 122.4, "text": " it's the language I'm most familiar with. Yeah. So, I've been using Java now for about 20 years,", "tokens": [309, 311, 264, 2856, 286, 478, 881, 4963, 365, 13, 865, 13, 407, 11, 286, 600, 668, 1228, 10745, 586, 337, 466, 945, 924, 11], "temperature": 0.0, "avg_logprob": -0.12353917714711782, "compression_ratio": 1.4743083003952568, "no_speech_prob": 3.819410994765349e-05}, {"id": 17, "seek": 11040, "start": 122.4, "end": 127.12, "text": " about the first JRE that I used came on floppy disk. Okay. So, that's how long.", "tokens": [466, 264, 700, 508, 3850, 300, 286, 1143, 1361, 322, 25343, 8200, 12355, 13, 1033, 13, 407, 11, 300, 311, 577, 938, 13], "temperature": 0.0, "avg_logprob": -0.12353917714711782, "compression_ratio": 1.4743083003952568, "no_speech_prob": 3.819410994765349e-05}, {"id": 18, "seek": 11040, "start": 128.24, "end": 133.04000000000002, "text": " These days, I'm just obviously cross-platform. And these days, it's got quite a rich set of APIs,", "tokens": [1981, 1708, 11, 286, 478, 445, 2745, 3278, 12, 39975, 837, 13, 400, 613, 1708, 11, 309, 311, 658, 1596, 257, 4593, 992, 295, 21445, 11], "temperature": 0.0, "avg_logprob": -0.12353917714711782, "compression_ratio": 1.4743083003952568, "no_speech_prob": 3.819410994765349e-05}, {"id": 19, "seek": 13304, "start": 133.04, "end": 140.72, "text": " hopefully, everything we need to develop an emulator. It's got good longevity. So, you tend", "tokens": [4696, 11, 1203, 321, 643, 281, 1499, 364, 846, 16381, 13, 467, 311, 658, 665, 36556, 13, 407, 11, 291, 3928], "temperature": 0.0, "avg_logprob": -0.08409727536714993, "compression_ratio": 1.6192468619246863, "no_speech_prob": 1.575032001710497e-05}, {"id": 20, "seek": 13304, "start": 140.72, "end": 147.2, "text": " not to have this thing in Java that you sometimes get in Swift, for example, where you kind of come", "tokens": [406, 281, 362, 341, 551, 294, 10745, 300, 291, 2171, 483, 294, 25539, 11, 337, 1365, 11, 689, 291, 733, 295, 808], "temperature": 0.0, "avg_logprob": -0.08409727536714993, "compression_ratio": 1.6192468619246863, "no_speech_prob": 1.575032001710497e-05}, {"id": 21, "seek": 13304, "start": 147.2, "end": 152.48, "text": " in one morning, try and recompile your code and find it won't compile anymore because Apple's changed", "tokens": [294, 472, 2446, 11, 853, 293, 48000, 794, 428, 3089, 293, 915, 309, 1582, 380, 31413, 3602, 570, 6373, 311, 3105], "temperature": 0.0, "avg_logprob": -0.08409727536714993, "compression_ratio": 1.6192468619246863, "no_speech_prob": 1.575032001710497e-05}, {"id": 22, "seek": 13304, "start": 152.48, "end": 158.39999999999998, "text": " something. Java tends not to have that. It's maintained good backwards compatibility over the", "tokens": [746, 13, 10745, 12258, 406, 281, 362, 300, 13, 467, 311, 17578, 665, 12204, 34237, 670, 264], "temperature": 0.0, "avg_logprob": -0.08409727536714993, "compression_ratio": 1.6192468619246863, "no_speech_prob": 1.575032001710497e-05}, {"id": 23, "seek": 15840, "start": 158.4, "end": 163.36, "text": " years. And so, hopefully, anything I write, moving forward, will also run. I don't have to have an", "tokens": [924, 13, 400, 370, 11, 4696, 11, 1340, 286, 2464, 11, 2684, 2128, 11, 486, 611, 1190, 13, 286, 500, 380, 362, 281, 362, 364], "temperature": 0.0, "avg_logprob": -0.10326154908137535, "compression_ratio": 1.7717391304347827, "no_speech_prob": 7.205265137599781e-05}, {"id": 24, "seek": 15840, "start": 163.36, "end": 168.64000000000001, "text": " emulator in a few years' time to emulate the emulator. Okay. There are, as well, from a personal", "tokens": [846, 16381, 294, 257, 1326, 924, 6, 565, 281, 45497, 264, 846, 16381, 13, 1033, 13, 821, 366, 11, 382, 731, 11, 490, 257, 2973], "temperature": 0.0, "avg_logprob": -0.10326154908137535, "compression_ratio": 1.7717391304347827, "no_speech_prob": 7.205265137599781e-05}, {"id": 25, "seek": 15840, "start": 168.64000000000001, "end": 174.88, "text": " view, there's some APIs coming up that I was kind of keen to have a benchmark to see, well, in a", "tokens": [1910, 11, 456, 311, 512, 21445, 1348, 493, 300, 286, 390, 733, 295, 20297, 281, 362, 257, 18927, 281, 536, 11, 731, 11, 294, 257], "temperature": 0.0, "avg_logprob": -0.10326154908137535, "compression_ratio": 1.7717391304347827, "no_speech_prob": 7.205265137599781e-05}, {"id": 26, "seek": 15840, "start": 174.88, "end": 180.48000000000002, "text": " couple of years' time, you know, things like the, you know, the foreign function and memory API that's", "tokens": [1916, 295, 924, 6, 565, 11, 291, 458, 11, 721, 411, 264, 11, 291, 458, 11, 264, 5329, 2445, 293, 4675, 9362, 300, 311], "temperature": 0.0, "avg_logprob": -0.10326154908137535, "compression_ratio": 1.7717391304347827, "no_speech_prob": 7.205265137599781e-05}, {"id": 27, "seek": 15840, "start": 180.48000000000002, "end": 186.4, "text": " kind of just about to kind of hit stability. I was kind of interested to see, well, you know,", "tokens": [733, 295, 445, 466, 281, 733, 295, 2045, 11826, 13, 286, 390, 733, 295, 3102, 281, 536, 11, 731, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.10326154908137535, "compression_ratio": 1.7717391304347827, "no_speech_prob": 7.205265137599781e-05}, {"id": 28, "seek": 18640, "start": 186.4, "end": 193.20000000000002, "text": " what will I be able to do with that when it comes out? Okay. So, I set myself some goals", "tokens": [437, 486, 286, 312, 1075, 281, 360, 365, 300, 562, 309, 1487, 484, 30, 1033, 13, 407, 11, 286, 992, 2059, 512, 5493], "temperature": 0.0, "avg_logprob": -0.10190384438697328, "compression_ratio": 1.635135135135135, "no_speech_prob": 5.648400110658258e-05}, {"id": 29, "seek": 18640, "start": 194.24, "end": 198.56, "text": " that I wanted to be, my emulator, to be accurate enough to allow most software to run on.", "tokens": [300, 286, 1415, 281, 312, 11, 452, 846, 16381, 11, 281, 312, 8559, 1547, 281, 2089, 881, 4722, 281, 1190, 322, 13], "temperature": 0.0, "avg_logprob": -0.10190384438697328, "compression_ratio": 1.635135135135135, "no_speech_prob": 5.648400110658258e-05}, {"id": 30, "seek": 18640, "start": 199.12, "end": 204.64000000000001, "text": " In all honesty, for kind of version one of my first emulator, there were some things that I", "tokens": [682, 439, 26839, 11, 337, 733, 295, 3037, 472, 295, 452, 700, 846, 16381, 11, 456, 645, 512, 721, 300, 286], "temperature": 0.0, "avg_logprob": -0.10190384438697328, "compression_ratio": 1.635135135135135, "no_speech_prob": 5.648400110658258e-05}, {"id": 31, "seek": 18640, "start": 204.64000000000001, "end": 211.6, "text": " decided not to emulate, to things like memory contention issues. There are some weird things", "tokens": [3047, 406, 281, 45497, 11, 281, 721, 411, 4675, 660, 1251, 2663, 13, 821, 366, 512, 3657, 721], "temperature": 0.0, "avg_logprob": -0.10190384438697328, "compression_ratio": 1.635135135135135, "no_speech_prob": 5.648400110658258e-05}, {"id": 32, "seek": 21160, "start": 211.6, "end": 217.51999999999998, "text": " that you can get that I'll maybe have time to talk about in the spectrum with kind of glitches in the", "tokens": [300, 291, 393, 483, 300, 286, 603, 1310, 362, 565, 281, 751, 466, 294, 264, 11143, 365, 733, 295, 23552, 279, 294, 264], "temperature": 0.0, "avg_logprob": -0.10819479289807771, "compression_ratio": 1.6483050847457628, "no_speech_prob": 4.522106610238552e-05}, {"id": 33, "seek": 21160, "start": 217.51999999999998, "end": 225.68, "text": " video display. So, essentially, my kind of overall goal was anything that software uses that isn't", "tokens": [960, 4674, 13, 407, 11, 4476, 11, 452, 733, 295, 4787, 3387, 390, 1340, 300, 4722, 4960, 300, 1943, 380], "temperature": 0.0, "avg_logprob": -0.10819479289807771, "compression_ratio": 1.6483050847457628, "no_speech_prob": 4.522106610238552e-05}, {"id": 34, "seek": 21160, "start": 225.68, "end": 231.51999999999998, "text": " a kind of bug in the hardware that people might accidentally get around or use, I'll try and", "tokens": [257, 733, 295, 7426, 294, 264, 8837, 300, 561, 1062, 15715, 483, 926, 420, 764, 11, 286, 603, 853, 293], "temperature": 0.0, "avg_logprob": -0.10819479289807771, "compression_ratio": 1.6483050847457628, "no_speech_prob": 4.522106610238552e-05}, {"id": 35, "seek": 21160, "start": 231.51999999999998, "end": 237.2, "text": " emulate that. As Roddy mentioned, one thing I was trying to do is get a baseline from the basic", "tokens": [45497, 300, 13, 1018, 11097, 3173, 2835, 11, 472, 551, 286, 390, 1382, 281, 360, 307, 483, 257, 20518, 490, 264, 3875], "temperature": 0.0, "avg_logprob": -0.10819479289807771, "compression_ratio": 1.6483050847457628, "no_speech_prob": 4.522106610238552e-05}, {"id": 36, "seek": 23720, "start": 237.2, "end": 244.88, "text": " Java APIs and try not to bring in additional libraries as a kind of starting point and want", "tokens": [10745, 21445, 293, 853, 406, 281, 1565, 294, 4497, 15148, 382, 257, 733, 295, 2891, 935, 293, 528], "temperature": 0.0, "avg_logprob": -0.1718652786747102, "compression_ratio": 1.4526748971193415, "no_speech_prob": 3.694060796988197e-05}, {"id": 37, "seek": 23720, "start": 244.88, "end": 249.92, "text": " to be a cooperative applications like not necessarily just full screen, perform enough,", "tokens": [281, 312, 257, 31772, 5821, 411, 406, 4725, 445, 1577, 2568, 11, 2042, 1547, 11], "temperature": 0.0, "avg_logprob": -0.1718652786747102, "compression_ratio": 1.4526748971193415, "no_speech_prob": 3.694060796988197e-05}, {"id": 38, "seek": 23720, "start": 249.92, "end": 255.44, "text": " yeah, as I say, I'm not trying to write a one gigahertz Z84 for my kind of first projects.", "tokens": [1338, 11, 382, 286, 584, 11, 286, 478, 406, 1382, 281, 2464, 257, 472, 8741, 64, 35655, 1176, 25494, 337, 452, 733, 295, 700, 4455, 13], "temperature": 0.0, "avg_logprob": -0.1718652786747102, "compression_ratio": 1.4526748971193415, "no_speech_prob": 3.694060796988197e-05}, {"id": 39, "seek": 23720, "start": 255.44, "end": 260.48, "text": " Which machines do I try to emulate? So, I went for the trusty old ZX Spectrum. So,", "tokens": [3013, 8379, 360, 286, 853, 281, 45497, 30, 407, 11, 286, 1437, 337, 264, 3361, 88, 1331, 1176, 55, 27078, 6247, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.1718652786747102, "compression_ratio": 1.4526748971193415, "no_speech_prob": 3.694060796988197e-05}, {"id": 40, "seek": 26048, "start": 260.48, "end": 267.76, "text": " apologies to Steve, I'm adding to the pile of emulators now available from ZX Spectrum. And", "tokens": [34929, 281, 7466, 11, 286, 478, 5127, 281, 264, 14375, 295, 846, 39265, 586, 2435, 490, 1176, 55, 27078, 6247, 13, 400], "temperature": 0.0, "avg_logprob": -0.11968812163995236, "compression_ratio": 1.5528455284552845, "no_speech_prob": 4.967068525729701e-05}, {"id": 41, "seek": 26048, "start": 267.76, "end": 273.12, "text": " I also thought that the Sega Mars system, so why these two together? A, these are the machines I", "tokens": [286, 611, 1194, 300, 264, 32114, 9692, 1185, 11, 370, 983, 613, 732, 1214, 30, 316, 11, 613, 366, 264, 8379, 286], "temperature": 0.0, "avg_logprob": -0.11968812163995236, "compression_ratio": 1.5528455284552845, "no_speech_prob": 4.967068525729701e-05}, {"id": 42, "seek": 26048, "start": 273.12, "end": 280.8, "text": " had as a kid, okay? But B, if we look at the technical specs, there are actually some similarities", "tokens": [632, 382, 257, 1636, 11, 1392, 30, 583, 363, 11, 498, 321, 574, 412, 264, 6191, 27911, 11, 456, 366, 767, 512, 24197], "temperature": 0.0, "avg_logprob": -0.11968812163995236, "compression_ratio": 1.5528455284552845, "no_speech_prob": 4.967068525729701e-05}, {"id": 43, "seek": 26048, "start": 280.8, "end": 288.0, "text": " that are going to help us. So, you can see the video resolution is similar, although the video", "tokens": [300, 366, 516, 281, 854, 505, 13, 407, 11, 291, 393, 536, 264, 960, 8669, 307, 2531, 11, 4878, 264, 960], "temperature": 0.0, "avg_logprob": -0.11968812163995236, "compression_ratio": 1.5528455284552845, "no_speech_prob": 4.967068525729701e-05}, {"id": 44, "seek": 28800, "start": 288.0, "end": 294.96, "text": " chips and formats that they use are very different. The CPU essentially is a data around 3.5. So,", "tokens": [11583, 293, 25879, 300, 436, 764, 366, 588, 819, 13, 440, 13199, 4476, 307, 257, 1412, 926, 805, 13, 20, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.2279457276867282, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0001387327502015978}, {"id": 45, "seek": 28800, "start": 294.96, "end": 299.52, "text": " around 3.5, actually, there are different models of the spectrum with different speeds and the", "tokens": [926, 805, 13, 20, 11, 767, 11, 456, 366, 819, 5245, 295, 264, 11143, 365, 819, 16411, 293, 264], "temperature": 0.0, "avg_logprob": -0.2279457276867282, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0001387327502015978}, {"id": 46, "seek": 28800, "start": 299.52, "end": 306.08, "text": " Mars system, very slight. I think it was 3.58 for the Mars system. And you can see then here,", "tokens": [9692, 1185, 11, 588, 4036, 13, 286, 519, 309, 390, 805, 13, 20419, 337, 264, 9692, 1185, 13, 400, 291, 393, 536, 550, 510, 11], "temperature": 0.0, "avg_logprob": -0.2279457276867282, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0001387327502015978}, {"id": 47, "seek": 28800, "start": 306.08, "end": 310.32, "text": " for the, probably everybody in this room is kind of fell if middle of these machines, but for those", "tokens": [337, 264, 11, 1391, 2201, 294, 341, 1808, 307, 733, 295, 5696, 498, 2808, 295, 613, 8379, 11, 457, 337, 729], "temperature": 0.0, "avg_logprob": -0.2279457276867282, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0001387327502015978}, {"id": 48, "seek": 28800, "start": 310.32, "end": 316.32, "text": " who aren't. So, you can see that the Sinclair Spectrum in comparison was all about saving money.", "tokens": [567, 3212, 380, 13, 407, 11, 291, 393, 536, 300, 264, 318, 4647, 24319, 27078, 6247, 294, 9660, 390, 439, 466, 6816, 1460, 13], "temperature": 0.0, "avg_logprob": -0.2279457276867282, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.0001387327502015978}, {"id": 49, "seek": 31632, "start": 316.32, "end": 323.84, "text": " So, you had one custom ULA here that was handling the video and the sound and was also memory controller", "tokens": [407, 11, 291, 632, 472, 2375, 624, 11435, 510, 300, 390, 13175, 264, 960, 293, 264, 1626, 293, 390, 611, 4675, 10561], "temperature": 0.0, "avg_logprob": -0.1453153436834162, "compression_ratio": 1.5725806451612903, "no_speech_prob": 3.819356788881123e-05}, {"id": 50, "seek": 31632, "start": 324.71999999999997, "end": 329.28, "text": " compared to the Mars system that had a bit more on-board hardware that we're going to have to", "tokens": [5347, 281, 264, 9692, 1185, 300, 632, 257, 857, 544, 322, 12, 3787, 8837, 300, 321, 434, 516, 281, 362, 281], "temperature": 0.0, "avg_logprob": -0.1453153436834162, "compression_ratio": 1.5725806451612903, "no_speech_prob": 3.819356788881123e-05}, {"id": 51, "seek": 31632, "start": 330.08, "end": 337.28, "text": " try and emulate. So, just a little bit more detail of some of the difficulties, again, for people", "tokens": [853, 293, 45497, 13, 407, 11, 445, 257, 707, 857, 544, 2607, 295, 512, 295, 264, 14399, 11, 797, 11, 337, 561], "temperature": 0.0, "avg_logprob": -0.1453153436834162, "compression_ratio": 1.5725806451612903, "no_speech_prob": 3.819356788881123e-05}, {"id": 52, "seek": 31632, "start": 338.48, "end": 345.76, "text": " and may be familiar. So, the ZX Spectrum, it renders its video all from RAM, essentially with", "tokens": [293, 815, 312, 4963, 13, 407, 11, 264, 1176, 55, 27078, 6247, 11, 309, 6125, 433, 1080, 960, 439, 490, 14561, 11, 4476, 365], "temperature": 0.0, "avg_logprob": -0.1453153436834162, "compression_ratio": 1.5725806451612903, "no_speech_prob": 3.819356788881123e-05}, {"id": 53, "seek": 34576, "start": 345.76, "end": 354.64, "text": " kind of no acceleration as such. And it's got this format that really kind of gives the ZX Spectrum", "tokens": [733, 295, 572, 17162, 382, 1270, 13, 400, 309, 311, 658, 341, 7877, 300, 534, 733, 295, 2709, 264, 1176, 55, 27078, 6247], "temperature": 0.0, "avg_logprob": -0.16716704430518212, "compression_ratio": 1.5340314136125655, "no_speech_prob": 3.576447124942206e-05}, {"id": 54, "seek": 34576, "start": 354.64, "end": 362.8, "text": " its look and feel. Yes, you had essentially a one bit per pixel bitmap and then over the top of", "tokens": [1080, 574, 293, 841, 13, 1079, 11, 291, 632, 4476, 257, 472, 857, 680, 19261, 857, 24223, 293, 550, 670, 264, 1192, 295], "temperature": 0.0, "avg_logprob": -0.16716704430518212, "compression_ratio": 1.5340314136125655, "no_speech_prob": 3.576447124942206e-05}, {"id": 55, "seek": 34576, "start": 362.8, "end": 369.36, "text": " that, you're allowed two colors, essentially, per rate by itself. Yeah, and this kind of gave the", "tokens": [300, 11, 291, 434, 4350, 732, 4577, 11, 4476, 11, 680, 3314, 538, 2564, 13, 865, 11, 293, 341, 733, 295, 2729, 264], "temperature": 0.0, "avg_logprob": -0.16716704430518212, "compression_ratio": 1.5340314136125655, "no_speech_prob": 3.576447124942206e-05}, {"id": 56, "seek": 36936, "start": 369.36, "end": 377.68, "text": " Spectrum a bit of a unique look and feel as bright and flash as well per cell. Compare that to the", "tokens": [27078, 6247, 257, 857, 295, 257, 3845, 574, 293, 841, 382, 4730, 293, 7319, 382, 731, 680, 2815, 13, 48523, 300, 281, 264], "temperature": 0.0, "avg_logprob": -0.15231075042333359, "compression_ratio": 1.45, "no_speech_prob": 6.8395274865906686e-06}, {"id": 57, "seek": 36936, "start": 377.68, "end": 387.44, "text": " Mars system where you've got an actual dedicated graphics chip, but this was all tile based. Yeah,", "tokens": [9692, 1185, 689, 291, 600, 658, 364, 3539, 8374, 11837, 11409, 11, 457, 341, 390, 439, 20590, 2361, 13, 865, 11], "temperature": 0.0, "avg_logprob": -0.15231075042333359, "compression_ratio": 1.45, "no_speech_prob": 6.8395274865906686e-06}, {"id": 58, "seek": 36936, "start": 387.44, "end": 397.12, "text": " so you have a 34 by 24 tile display. Each tile can be 8 by 8 pixels. Yeah, so the eagle eyed", "tokens": [370, 291, 362, 257, 12790, 538, 4022, 20590, 4674, 13, 6947, 20590, 393, 312, 1649, 538, 1649, 18668, 13, 865, 11, 370, 264, 30745, 9817, 292], "temperature": 0.0, "avg_logprob": -0.15231075042333359, "compression_ratio": 1.45, "no_speech_prob": 6.8395274865906686e-06}, {"id": 59, "seek": 39712, "start": 397.12, "end": 405.52, "text": " amongst you will notice that you can't actually define enough unique tiles to give each pixel in", "tokens": [12918, 291, 486, 3449, 300, 291, 393, 380, 767, 6964, 1547, 3845, 21982, 281, 976, 1184, 19261, 294], "temperature": 0.0, "avg_logprob": -0.1203240122113909, "compression_ratio": 1.5183246073298429, "no_speech_prob": 8.503326534992084e-05}, {"id": 60, "seek": 39712, "start": 405.52, "end": 413.12, "text": " that display. It's kind of a unique pixel. So anything that looks like it does, you'll see you", "tokens": [300, 4674, 13, 467, 311, 733, 295, 257, 3845, 19261, 13, 407, 1340, 300, 1542, 411, 309, 775, 11, 291, 603, 536, 291], "temperature": 0.0, "avg_logprob": -0.1203240122113909, "compression_ratio": 1.5183246073298429, "no_speech_prob": 8.503326534992084e-05}, {"id": 61, "seek": 39712, "start": 413.12, "end": 420.8, "text": " get these kind of almost like little manga cards for some games. Or here where we've tried to fill", "tokens": [483, 613, 733, 295, 1920, 411, 707, 23316, 5632, 337, 512, 2813, 13, 1610, 510, 689, 321, 600, 3031, 281, 2836], "temperature": 0.0, "avg_logprob": -0.1203240122113909, "compression_ratio": 1.5183246073298429, "no_speech_prob": 8.503326534992084e-05}, {"id": 62, "seek": 42080, "start": 420.8, "end": 427.6, "text": " the screen, obviously secretly around the edges, we've actually got blank space. So there wasn't", "tokens": [264, 2568, 11, 2745, 22611, 926, 264, 8819, 11, 321, 600, 767, 658, 8247, 1901, 13, 407, 456, 2067, 380], "temperature": 0.0, "avg_logprob": -0.14160575866699218, "compression_ratio": 1.507936507936508, "no_speech_prob": 2.2349309801938944e-05}, {"id": 63, "seek": 42080, "start": 427.6, "end": 436.72, "text": " actually enough memory to have unique tiles for every space on the screen. But despite that,", "tokens": [767, 1547, 4675, 281, 362, 3845, 21982, 337, 633, 1901, 322, 264, 2568, 13, 583, 7228, 300, 11], "temperature": 0.0, "avg_logprob": -0.14160575866699218, "compression_ratio": 1.507936507936508, "no_speech_prob": 2.2349309801938944e-05}, {"id": 64, "seek": 42080, "start": 437.52, "end": 446.8, "text": " it did have features that were actively kind of advocated by Sega to its developers to make the", "tokens": [309, 630, 362, 4122, 300, 645, 13022, 733, 295, 7915, 770, 538, 32114, 281, 1080, 8849, 281, 652, 264], "temperature": 0.0, "avg_logprob": -0.14160575866699218, "compression_ratio": 1.507936507936508, "no_speech_prob": 2.2349309801938944e-05}, {"id": 65, "seek": 44680, "start": 446.8, "end": 455.2, "text": " most possible use of that of the video chip. So the way it worked, you have a series of registers", "tokens": [881, 1944, 764, 295, 300, 295, 264, 960, 11409, 13, 407, 264, 636, 309, 2732, 11, 291, 362, 257, 2638, 295, 38351], "temperature": 0.0, "avg_logprob": -0.11712251084574153, "compression_ratio": 1.7048458149779735, "no_speech_prob": 4.058871490997262e-05}, {"id": 66, "seek": 44680, "start": 455.2, "end": 462.40000000000003, "text": " to control things like the scrolling, the colors. And there was a mechanism via interrupt to actually", "tokens": [281, 1969, 721, 411, 264, 29053, 11, 264, 4577, 13, 400, 456, 390, 257, 7513, 5766, 12729, 281, 767], "temperature": 0.0, "avg_logprob": -0.11712251084574153, "compression_ratio": 1.7048458149779735, "no_speech_prob": 4.058871490997262e-05}, {"id": 67, "seek": 44680, "start": 462.40000000000003, "end": 467.68, "text": " on each scan line or on every nth scan line, depending on how you programmed it, you could", "tokens": [322, 1184, 11049, 1622, 420, 322, 633, 297, 392, 11049, 1622, 11, 5413, 322, 577, 291, 31092, 309, 11, 291, 727], "temperature": 0.0, "avg_logprob": -0.11712251084574153, "compression_ratio": 1.7048458149779735, "no_speech_prob": 4.058871490997262e-05}, {"id": 68, "seek": 44680, "start": 467.68, "end": 473.04, "text": " actually change those registers. Yes, you could change the scroll position at different parts of", "tokens": [767, 1319, 729, 38351, 13, 1079, 11, 291, 727, 1319, 264, 11369, 2535, 412, 819, 3166, 295], "temperature": 0.0, "avg_logprob": -0.11712251084574153, "compression_ratio": 1.7048458149779735, "no_speech_prob": 4.058871490997262e-05}, {"id": 69, "seek": 47304, "start": 473.04, "end": 478.96000000000004, "text": " the screen. You could switch off the screen. You could potentially change the color palette.", "tokens": [264, 2568, 13, 509, 727, 3679, 766, 264, 2568, 13, 509, 727, 7263, 1319, 264, 2017, 15851, 13], "temperature": 0.0, "avg_logprob": -0.11078703814539416, "compression_ratio": 1.7453183520599251, "no_speech_prob": 8.449033884971868e-06}, {"id": 70, "seek": 47304, "start": 478.96000000000004, "end": 481.92, "text": " And so that's something when we're doing our video rendering, we're going to have to have a", "tokens": [400, 370, 300, 311, 746, 562, 321, 434, 884, 527, 960, 22407, 11, 321, 434, 516, 281, 362, 281, 362, 257], "temperature": 0.0, "avg_logprob": -0.11078703814539416, "compression_ratio": 1.7453183520599251, "no_speech_prob": 8.449033884971868e-06}, {"id": 71, "seek": 47304, "start": 481.92, "end": 487.76000000000005, "text": " little think about how we can kind of optimize that a little bit. I'll just give a very quick", "tokens": [707, 519, 466, 577, 321, 393, 733, 295, 19719, 300, 257, 707, 857, 13, 286, 603, 445, 976, 257, 588, 1702], "temperature": 0.0, "avg_logprob": -0.11078703814539416, "compression_ratio": 1.7453183520599251, "no_speech_prob": 8.449033884971868e-06}, {"id": 72, "seek": 47304, "start": 487.76000000000005, "end": 492.72, "text": " example. So we're going to see here, we've got some parallax scrolling, where you see how on", "tokens": [1365, 13, 407, 321, 434, 516, 281, 536, 510, 11, 321, 600, 658, 512, 8069, 2797, 29053, 11, 689, 291, 536, 577, 322], "temperature": 0.0, "avg_logprob": -0.11078703814539416, "compression_ratio": 1.7453183520599251, "no_speech_prob": 8.449033884971868e-06}, {"id": 73, "seek": 47304, "start": 492.72, "end": 499.44, "text": " different scan lines, we're setting a different X position. And then that's quite a nice fact,", "tokens": [819, 11049, 3876, 11, 321, 434, 3287, 257, 819, 1783, 2535, 13, 400, 550, 300, 311, 1596, 257, 1481, 1186, 11], "temperature": 0.0, "avg_logprob": -0.11078703814539416, "compression_ratio": 1.7453183520599251, "no_speech_prob": 8.449033884971868e-06}, {"id": 74, "seek": 49944, "start": 499.44, "end": 504.8, "text": " that's a game called Choplifter. On the next example, we're actually going to have a case where", "tokens": [300, 311, 257, 1216, 1219, 25615, 75, 30846, 13, 1282, 264, 958, 1365, 11, 321, 434, 767, 516, 281, 362, 257, 1389, 689], "temperature": 0.0, "avg_logprob": -0.1094348148633075, "compression_ratio": 1.6784140969162995, "no_speech_prob": 1.3584463886218145e-05}, {"id": 75, "seek": 49944, "start": 504.8, "end": 513.44, "text": " here we're actually, it's not literally turning off the screen, but it's changing the base address", "tokens": [510, 321, 434, 767, 11, 309, 311, 406, 3736, 6246, 766, 264, 2568, 11, 457, 309, 311, 4473, 264, 3096, 2985], "temperature": 0.0, "avg_logprob": -0.1094348148633075, "compression_ratio": 1.6784140969162995, "no_speech_prob": 1.3584463886218145e-05}, {"id": 76, "seek": 49944, "start": 513.44, "end": 519.44, "text": " of the screen memory to effectively turn it off at that bottom part. And this is kind of probably", "tokens": [295, 264, 2568, 4675, 281, 8659, 1261, 309, 766, 412, 300, 2767, 644, 13, 400, 341, 307, 733, 295, 1391], "temperature": 0.0, "avg_logprob": -0.1094348148633075, "compression_ratio": 1.6784140969162995, "no_speech_prob": 1.3584463886218145e-05}, {"id": 77, "seek": 49944, "start": 519.44, "end": 524.56, "text": " the most one, an extreme example here, where literally on kind of every other scan line,", "tokens": [264, 881, 472, 11, 364, 8084, 1365, 510, 11, 689, 3736, 322, 733, 295, 633, 661, 11049, 1622, 11], "temperature": 0.0, "avg_logprob": -0.1094348148633075, "compression_ratio": 1.6784140969162995, "no_speech_prob": 1.3584463886218145e-05}, {"id": 78, "seek": 52456, "start": 524.56, "end": 531.5999999999999, "text": " we're changing the scroll position to kind of give that effect there. So very briefly,", "tokens": [321, 434, 4473, 264, 11369, 2535, 281, 733, 295, 976, 300, 1802, 456, 13, 407, 588, 10515, 11], "temperature": 0.0, "avg_logprob": -0.1463273252759661, "compression_ratio": 1.7164750957854407, "no_speech_prob": 1.7962751371669583e-05}, {"id": 79, "seek": 52456, "start": 532.2399999999999, "end": 535.76, "text": " I'll just give a little bit of the kind of the overall organization of the emulators,", "tokens": [286, 603, 445, 976, 257, 707, 857, 295, 264, 733, 295, 264, 4787, 4475, 295, 264, 846, 39265, 11], "temperature": 0.0, "avg_logprob": -0.1463273252759661, "compression_ratio": 1.7164750957854407, "no_speech_prob": 1.7962751371669583e-05}, {"id": 80, "seek": 52456, "start": 535.76, "end": 540.2399999999999, "text": " kind of the first thing you really need to think about. So it's how we kind of turn this,", "tokens": [733, 295, 264, 700, 551, 291, 534, 643, 281, 519, 466, 13, 407, 309, 311, 577, 321, 733, 295, 1261, 341, 11], "temperature": 0.0, "avg_logprob": -0.1463273252759661, "compression_ratio": 1.7164750957854407, "no_speech_prob": 1.7962751371669583e-05}, {"id": 81, "seek": 52456, "start": 540.2399999999999, "end": 543.92, "text": " this is very high level obviously, but this essentially what the hardware looks like, we've", "tokens": [341, 307, 588, 1090, 1496, 2745, 11, 457, 341, 4476, 437, 264, 8837, 1542, 411, 11, 321, 600], "temperature": 0.0, "avg_logprob": -0.1463273252759661, "compression_ratio": 1.7164750957854407, "no_speech_prob": 1.7962751371669583e-05}, {"id": 82, "seek": 52456, "start": 543.92, "end": 549.3599999999999, "text": " got an address bus at the top with the ROM and the RAM connector, we've got a data bus at the", "tokens": [658, 364, 2985, 1255, 412, 264, 1192, 365, 264, 41678, 293, 264, 14561, 19127, 11, 321, 600, 658, 257, 1412, 1255, 412, 264], "temperature": 0.0, "avg_logprob": -0.1463273252759661, "compression_ratio": 1.7164750957854407, "no_speech_prob": 1.7962751371669583e-05}, {"id": 83, "seek": 54936, "start": 549.36, "end": 554.96, "text": " bottom with any peripherals, which on the spectrum were fairly minimal, there was a one to eight version", "tokens": [2767, 365, 604, 26807, 1124, 11, 597, 322, 264, 11143, 645, 6457, 13206, 11, 456, 390, 257, 472, 281, 3180, 3037], "temperature": 0.0, "avg_logprob": -0.09918104481493306, "compression_ratio": 1.740072202166065, "no_speech_prob": 1.024787070491584e-05}, {"id": 84, "seek": 54936, "start": 554.96, "end": 560.4, "text": " with the sound chip. And then on the master system, you can see again, similar idea,", "tokens": [365, 264, 1626, 11409, 13, 400, 550, 322, 264, 4505, 1185, 11, 291, 393, 536, 797, 11, 2531, 1558, 11], "temperature": 0.0, "avg_logprob": -0.09918104481493306, "compression_ratio": 1.740072202166065, "no_speech_prob": 1.024787070491584e-05}, {"id": 85, "seek": 54936, "start": 561.2, "end": 566.4, "text": " but notice that the ROM essentially is the cartridge that you plug in. Yes, when you plug a", "tokens": [457, 3449, 300, 264, 41678, 4476, 307, 264, 27753, 300, 291, 5452, 294, 13, 1079, 11, 562, 291, 5452, 257], "temperature": 0.0, "avg_logprob": -0.09918104481493306, "compression_ratio": 1.740072202166065, "no_speech_prob": 1.024787070491584e-05}, {"id": 86, "seek": 54936, "start": 566.4, "end": 572.88, "text": " cartridge in, you're kind of directly communicating with the Z80 and any logic for things like memory", "tokens": [27753, 294, 11, 291, 434, 733, 295, 3838, 17559, 365, 264, 1176, 4702, 293, 604, 9952, 337, 721, 411, 4675], "temperature": 0.0, "avg_logprob": -0.09918104481493306, "compression_ratio": 1.740072202166065, "no_speech_prob": 1.024787070491584e-05}, {"id": 87, "seek": 54936, "start": 572.88, "end": 578.4, "text": " paging, you can have that on the cartridge. And then a few more peripherals going on the data bus,", "tokens": [280, 3568, 11, 291, 393, 362, 300, 322, 264, 27753, 13, 400, 550, 257, 1326, 544, 26807, 1124, 516, 322, 264, 1412, 1255, 11], "temperature": 0.0, "avg_logprob": -0.09918104481493306, "compression_ratio": 1.740072202166065, "no_speech_prob": 1.024787070491584e-05}, {"id": 88, "seek": 57840, "start": 578.4, "end": 583.52, "text": " we've got the video processor there, the programmable sound generator, there's not an FM unit,", "tokens": [321, 600, 658, 264, 960, 15321, 456, 11, 264, 37648, 712, 1626, 19265, 11, 456, 311, 406, 364, 29614, 4985, 11], "temperature": 0.0, "avg_logprob": -0.14187572797139486, "compression_ratio": 1.7246376811594204, "no_speech_prob": 2.1412455680547282e-05}, {"id": 89, "seek": 57840, "start": 583.52, "end": 590.0799999999999, "text": " which I'll touch on briefly, and the controllers. So then what I try to do, and so there was the", "tokens": [597, 286, 603, 2557, 322, 10515, 11, 293, 264, 26903, 13, 407, 550, 437, 286, 853, 281, 360, 11, 293, 370, 456, 390, 264], "temperature": 0.0, "avg_logprob": -0.14187572797139486, "compression_ratio": 1.7246376811594204, "no_speech_prob": 2.1412455680547282e-05}, {"id": 90, "seek": 57840, "start": 590.0799999999999, "end": 596.24, "text": " emulator clock there as well. And what I try to do is to abstract that down, so that I'm going to", "tokens": [846, 16381, 7830, 456, 382, 731, 13, 400, 437, 286, 853, 281, 360, 307, 281, 12649, 300, 760, 11, 370, 300, 286, 478, 516, 281], "temperature": 0.0, "avg_logprob": -0.14187572797139486, "compression_ratio": 1.7246376811594204, "no_speech_prob": 2.1412455680547282e-05}, {"id": 91, "seek": 57840, "start": 596.24, "end": 601.28, "text": " organize the program this way, we've obviously got the Z80 implementation is obviously a kind of", "tokens": [13859, 264, 1461, 341, 636, 11, 321, 600, 2745, 658, 264, 1176, 4702, 11420, 307, 2745, 257, 733, 295], "temperature": 0.0, "avg_logprob": -0.14187572797139486, "compression_ratio": 1.7246376811594204, "no_speech_prob": 2.1412455680547282e-05}, {"id": 92, "seek": 57840, "start": 601.28, "end": 606.8, "text": " fairly fundamental part. But then we've, what I've actually done is in my implementation,", "tokens": [6457, 8088, 644, 13, 583, 550, 321, 600, 11, 437, 286, 600, 767, 1096, 307, 294, 452, 11420, 11], "temperature": 0.0, "avg_logprob": -0.14187572797139486, "compression_ratio": 1.7246376811594204, "no_speech_prob": 2.1412455680547282e-05}, {"id": 93, "seek": 60680, "start": 606.8, "end": 618.7199999999999, "text": " I've separated out the Z80 decoder from the actual instruction loop. This is quite nice and we want", "tokens": [286, 600, 12005, 484, 264, 1176, 4702, 979, 19866, 490, 264, 3539, 10951, 6367, 13, 639, 307, 1596, 1481, 293, 321, 528], "temperature": 0.0, "avg_logprob": -0.14143458048502605, "compression_ratio": 1.5051546391752577, "no_speech_prob": 9.71628469415009e-05}, {"id": 94, "seek": 60680, "start": 618.7199999999999, "end": 625.4399999999999, "text": " to add a debugger as well, then you can go through the same code to decode the instructions", "tokens": [281, 909, 257, 24083, 1321, 382, 731, 11, 550, 291, 393, 352, 807, 264, 912, 3089, 281, 979, 1429, 264, 9415], "temperature": 0.0, "avg_logprob": -0.14143458048502605, "compression_ratio": 1.5051546391752577, "no_speech_prob": 9.71628469415009e-05}, {"id": 95, "seek": 60680, "start": 625.4399999999999, "end": 632.24, "text": " for the debugger. And then we've got an abstract IO bus, from which again then on the master system,", "tokens": [337, 264, 24083, 1321, 13, 400, 550, 321, 600, 658, 364, 12649, 39839, 1255, 11, 490, 597, 797, 550, 322, 264, 4505, 1185, 11], "temperature": 0.0, "avg_logprob": -0.14143458048502605, "compression_ratio": 1.5051546391752577, "no_speech_prob": 9.71628469415009e-05}, {"id": 96, "seek": 63224, "start": 632.24, "end": 640.08, "text": " we'll have our master system IO bus on the spectrum IO, etc. A memory of similar ideas,", "tokens": [321, 603, 362, 527, 4505, 1185, 39839, 1255, 322, 264, 11143, 39839, 11, 5183, 13, 316, 4675, 295, 2531, 3487, 11], "temperature": 0.0, "avg_logprob": -0.1692327667068649, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.6567535314825363e-05}, {"id": 97, "seek": 63224, "start": 640.08, "end": 647.6, "text": " we have subclasses of these overall base classes. And the clock, which is actually working the other", "tokens": [321, 362, 1422, 11665, 279, 295, 613, 4787, 3096, 5359, 13, 400, 264, 7830, 11, 597, 307, 767, 1364, 264, 661], "temperature": 0.0, "avg_logprob": -0.1692327667068649, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.6567535314825363e-05}, {"id": 98, "seek": 63224, "start": 647.6, "end": 651.76, "text": " way round to the way that the hardware, the clock is effectively going to be a kind of break", "tokens": [636, 3098, 281, 264, 636, 300, 264, 8837, 11, 264, 7830, 307, 8659, 516, 281, 312, 257, 733, 295, 1821], "temperature": 0.0, "avg_logprob": -0.1692327667068649, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.6567535314825363e-05}, {"id": 99, "seek": 63224, "start": 651.76, "end": 657.12, "text": " on the CPU thread and is going to tell it when to pause to keep things at the right", "tokens": [322, 264, 13199, 7207, 293, 307, 516, 281, 980, 309, 562, 281, 10465, 281, 1066, 721, 412, 264, 558], "temperature": 0.0, "avg_logprob": -0.1692327667068649, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.6567535314825363e-05}, {"id": 100, "seek": 65712, "start": 657.12, "end": 664.72, "text": " rate of instructions. And there'll be a little bit of feedback as well between the video thread", "tokens": [3314, 295, 9415, 13, 400, 456, 603, 312, 257, 707, 857, 295, 5824, 382, 731, 1296, 264, 960, 7207], "temperature": 0.0, "avg_logprob": -0.14092785188521462, "compression_ratio": 1.553191489361702, "no_speech_prob": 1.2056907507940196e-05}, {"id": 101, "seek": 65712, "start": 665.68, "end": 671.52, "text": " so that it can interact with the CPU to do the things I've just mentioned about accurately timing", "tokens": [370, 300, 309, 393, 4648, 365, 264, 13199, 281, 360, 264, 721, 286, 600, 445, 2835, 466, 20095, 10822], "temperature": 0.0, "avg_logprob": -0.14092785188521462, "compression_ratio": 1.553191489361702, "no_speech_prob": 1.2056907507940196e-05}, {"id": 102, "seek": 65712, "start": 671.52, "end": 679.12, "text": " the scroll registers and things. So just an example, I end up with interfaces like this", "tokens": [264, 11369, 38351, 293, 721, 13, 407, 445, 364, 1365, 11, 286, 917, 493, 365, 28416, 411, 341], "temperature": 0.0, "avg_logprob": -0.14092785188521462, "compression_ratio": 1.553191489361702, "no_speech_prob": 1.2056907507940196e-05}, {"id": 103, "seek": 65712, "start": 680.16, "end": 686.0, "text": " and then to the Z80, it's effectively, it doesn't care whether it's a master system", "tokens": [293, 550, 281, 264, 1176, 4702, 11, 309, 311, 8659, 11, 309, 1177, 380, 1127, 1968, 309, 311, 257, 4505, 1185], "temperature": 0.0, "avg_logprob": -0.14092785188521462, "compression_ratio": 1.553191489361702, "no_speech_prob": 1.2056907507940196e-05}, {"id": 104, "seek": 68600, "start": 686.0, "end": 691.68, "text": " or a spectrum it's communicating with, it just goes through these abstract interfaces like this.", "tokens": [420, 257, 11143, 309, 311, 17559, 365, 11, 309, 445, 1709, 807, 613, 12649, 28416, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.12314810223049588, "compression_ratio": 1.5657370517928286, "no_speech_prob": 2.6995918233296834e-05}, {"id": 105, "seek": 68600, "start": 692.64, "end": 699.84, "text": " A little bit of detail just on, I've just mentioned about the the CPU. The implementation that I went", "tokens": [316, 707, 857, 295, 2607, 445, 322, 11, 286, 600, 445, 2835, 466, 264, 264, 13199, 13, 440, 11420, 300, 286, 1437], "temperature": 0.0, "avg_logprob": -0.12314810223049588, "compression_ratio": 1.5657370517928286, "no_speech_prob": 2.6995918233296834e-05}, {"id": 106, "seek": 68600, "start": 699.84, "end": 705.52, "text": " for, which isn't necessarily the most kind of popular of the traditional emulators, I tried to", "tokens": [337, 11, 597, 1943, 380, 4725, 264, 881, 733, 295, 3743, 295, 264, 5164, 846, 39265, 11, 286, 3031, 281], "temperature": 0.0, "avg_logprob": -0.12314810223049588, "compression_ratio": 1.5657370517928286, "no_speech_prob": 2.6995918233296834e-05}, {"id": 107, "seek": 68600, "start": 705.52, "end": 712.56, "text": " really break down the instruction set into more of an object-oriented form. So I've got instruction", "tokens": [534, 1821, 760, 264, 10951, 992, 666, 544, 295, 364, 2657, 12, 27414, 1254, 13, 407, 286, 600, 658, 10951], "temperature": 0.0, "avg_logprob": -0.12314810223049588, "compression_ratio": 1.5657370517928286, "no_speech_prob": 2.6995918233296834e-05}, {"id": 108, "seek": 71256, "start": 712.56, "end": 719.1999999999999, "text": " types you'll see there and then for each type the individual instruction is kind of returned as", "tokens": [3467, 291, 603, 536, 456, 293, 550, 337, 1184, 2010, 264, 2609, 10951, 307, 733, 295, 8752, 382], "temperature": 0.0, "avg_logprob": -0.1142557356092665, "compression_ratio": 1.5884773662551441, "no_speech_prob": 2.794456850097049e-05}, {"id": 109, "seek": 71256, "start": 719.1999999999999, "end": 723.68, "text": " an object that says well it's this type and it's from this source, this destination. So I've tried", "tokens": [364, 2657, 300, 1619, 731, 309, 311, 341, 2010, 293, 309, 311, 490, 341, 4009, 11, 341, 12236, 13, 407, 286, 600, 3031], "temperature": 0.0, "avg_logprob": -0.1142557356092665, "compression_ratio": 1.5884773662551441, "no_speech_prob": 2.794456850097049e-05}, {"id": 110, "seek": 71256, "start": 723.68, "end": 732.0799999999999, "text": " to kind of not have to write 900 different routines for all the various combinations that the Z80 had", "tokens": [281, 733, 295, 406, 362, 281, 2464, 22016, 819, 33827, 337, 439, 264, 3683, 21267, 300, 264, 1176, 4702, 632], "temperature": 0.0, "avg_logprob": -0.1142557356092665, "compression_ratio": 1.5884773662551441, "no_speech_prob": 2.794456850097049e-05}, {"id": 111, "seek": 71256, "start": 733.52, "end": 737.28, "text": " and that gives quite nice code. There's a little bit of a performance trade-off obviously", "tokens": [293, 300, 2709, 1596, 1481, 3089, 13, 821, 311, 257, 707, 857, 295, 257, 3389, 4923, 12, 4506, 2745], "temperature": 0.0, "avg_logprob": -0.1142557356092665, "compression_ratio": 1.5884773662551441, "no_speech_prob": 2.794456850097049e-05}, {"id": 112, "seek": 73728, "start": 737.28, "end": 744.88, "text": " but it turns out not to be not to be too bad. Okay and then the other decision I made was well", "tokens": [457, 309, 4523, 484, 406, 281, 312, 406, 281, 312, 886, 1578, 13, 1033, 293, 550, 264, 661, 3537, 286, 1027, 390, 731], "temperature": 0.0, "avg_logprob": -0.15132818995295344, "compression_ratio": 1.5132275132275133, "no_speech_prob": 1.704274836811237e-05}, {"id": 113, "seek": 73728, "start": 744.88, "end": 754.24, "text": " we're now writing in Java in 2023 now so I decided well I want to make the most of multi-threading.", "tokens": [321, 434, 586, 3579, 294, 10745, 294, 44377, 586, 370, 286, 3047, 731, 286, 528, 281, 652, 264, 881, 295, 4825, 12, 392, 35908, 13], "temperature": 0.0, "avg_logprob": -0.15132818995295344, "compression_ratio": 1.5132275132275133, "no_speech_prob": 1.704274836811237e-05}, {"id": 114, "seek": 73728, "start": 754.24, "end": 760.16, "text": " So the various of the components I've just mentioned will actually sit in their own thread.", "tokens": [407, 264, 3683, 295, 264, 6677, 286, 600, 445, 2835, 486, 767, 1394, 294, 641, 1065, 7207, 13], "temperature": 0.0, "avg_logprob": -0.15132818995295344, "compression_ratio": 1.5132275132275133, "no_speech_prob": 1.704274836811237e-05}, {"id": 115, "seek": 76016, "start": 760.16, "end": 767.4399999999999, "text": " Okay and that's kind of nice organizationally and also in terms of monitoring the performance of the", "tokens": [1033, 293, 300, 311, 733, 295, 1481, 4475, 379, 293, 611, 294, 2115, 295, 11028, 264, 3389, 295, 264], "temperature": 0.0, "avg_logprob": -0.18273291985193887, "compression_ratio": 1.610878661087866, "no_speech_prob": 8.017183427000418e-05}, {"id": 116, "seek": 76016, "start": 767.4399999999999, "end": 772.7199999999999, "text": " app it means we can break down a little bit more easily what resources are being used for each", "tokens": [724, 309, 1355, 321, 393, 1821, 760, 257, 707, 857, 544, 3612, 437, 3593, 366, 885, 1143, 337, 1184], "temperature": 0.0, "avg_logprob": -0.18273291985193887, "compression_ratio": 1.610878661087866, "no_speech_prob": 8.017183427000418e-05}, {"id": 117, "seek": 76016, "start": 772.7199999999999, "end": 779.8399999999999, "text": " component. So just to give a little bit of an overview of this, so we'll have at the top kind", "tokens": [6542, 13, 407, 445, 281, 976, 257, 707, 857, 295, 364, 12492, 295, 341, 11, 370, 321, 603, 362, 412, 264, 1192, 733], "temperature": 0.0, "avg_logprob": -0.18273291985193887, "compression_ratio": 1.610878661087866, "no_speech_prob": 8.017183427000418e-05}, {"id": 118, "seek": 76016, "start": 779.8399999999999, "end": 788.48, "text": " of got our, well this work yeah, is that good? So we've got our the CPU thread at the top there", "tokens": [295, 658, 527, 11, 731, 341, 589, 1338, 11, 307, 300, 665, 30, 407, 321, 600, 658, 527, 264, 13199, 7207, 412, 264, 1192, 456], "temperature": 0.0, "avg_logprob": -0.18273291985193887, "compression_ratio": 1.610878661087866, "no_speech_prob": 8.017183427000418e-05}, {"id": 119, "seek": 78848, "start": 788.48, "end": 793.6, "text": " and which is going to be interacting with the clock and is periodically going to say", "tokens": [293, 597, 307, 516, 281, 312, 18017, 365, 264, 7830, 293, 307, 38916, 516, 281, 584], "temperature": 0.0, "avg_logprob": -0.1506618646474985, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.153575668577105e-05}, {"id": 120, "seek": 78848, "start": 794.4, "end": 801.36, "text": " you know I've done this many instruction cycles. How am I doing? Do I need to pause to kind of", "tokens": [291, 458, 286, 600, 1096, 341, 867, 10951, 17796, 13, 1012, 669, 286, 884, 30, 1144, 286, 643, 281, 10465, 281, 733, 295], "temperature": 0.0, "avg_logprob": -0.1506618646474985, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.153575668577105e-05}, {"id": 121, "seek": 78848, "start": 801.36, "end": 810.72, "text": " maintain the correct instruction rate? Then we've got the video controller which is going to be", "tokens": [6909, 264, 3006, 10951, 3314, 30, 1396, 321, 600, 658, 264, 960, 10561, 597, 307, 516, 281, 312], "temperature": 0.0, "avg_logprob": -0.1506618646474985, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.153575668577105e-05}, {"id": 122, "seek": 81072, "start": 810.72, "end": 818.5600000000001, "text": " sending periodically sending V blank instructions every frame to the CPU to notify it.", "tokens": [7750, 38916, 7750, 691, 8247, 9415, 633, 3920, 281, 264, 13199, 281, 36560, 309, 13], "temperature": 0.0, "avg_logprob": -0.11871207346681689, "compression_ratio": 1.508108108108108, "no_speech_prob": 5.257307293504709e-06}, {"id": 123, "seek": 81072, "start": 819.52, "end": 827.2, "text": " We've got then also a separate rendering thread which is going to do any of the kind of heavy", "tokens": [492, 600, 658, 550, 611, 257, 4994, 22407, 7207, 597, 307, 516, 281, 360, 604, 295, 264, 733, 295, 4676], "temperature": 0.0, "avg_logprob": -0.11871207346681689, "compression_ratio": 1.508108108108108, "no_speech_prob": 5.257307293504709e-06}, {"id": 124, "seek": 81072, "start": 827.2, "end": 834.8000000000001, "text": " lifting rendering that we need to do. So anything like scaling, calculating what the actual pixels", "tokens": [15798, 22407, 300, 321, 643, 281, 360, 13, 407, 1340, 411, 21589, 11, 28258, 437, 264, 3539, 18668], "temperature": 0.0, "avg_logprob": -0.11871207346681689, "compression_ratio": 1.508108108108108, "no_speech_prob": 5.257307293504709e-06}, {"id": 125, "seek": 83480, "start": 834.8, "end": 840.7199999999999, "text": " are and then the idea is that here in the event dispatch thread which is a single threaded at", "tokens": [366, 293, 550, 264, 1558, 307, 300, 510, 294, 264, 2280, 36729, 7207, 597, 307, 257, 2167, 47493, 412], "temperature": 0.0, "avg_logprob": -0.13182394555274476, "compression_ratio": 1.662280701754386, "no_speech_prob": 9.75515376921976e-06}, {"id": 126, "seek": 83480, "start": 840.7199999999999, "end": 846.16, "text": " that point we have to kind of have our ducks in a row and know what we're actually going to render.", "tokens": [300, 935, 321, 362, 281, 733, 295, 362, 527, 34468, 294, 257, 5386, 293, 458, 437, 321, 434, 767, 516, 281, 15529, 13], "temperature": 0.0, "avg_logprob": -0.13182394555274476, "compression_ratio": 1.662280701754386, "no_speech_prob": 9.75515376921976e-06}, {"id": 127, "seek": 83480, "start": 848.0, "end": 853.04, "text": " Then additional complication is it was going to be an audio service in its own thread as well.", "tokens": [1396, 4497, 1209, 8758, 307, 309, 390, 516, 281, 312, 364, 6278, 2643, 294, 1080, 1065, 7207, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.13182394555274476, "compression_ratio": 1.662280701754386, "no_speech_prob": 9.75515376921976e-06}, {"id": 128, "seek": 83480, "start": 855.92, "end": 862.9599999999999, "text": " So different APIs that we're going to use. There's a standard Java Swing API so there's no", "tokens": [407, 819, 21445, 300, 321, 434, 516, 281, 764, 13, 821, 311, 257, 3832, 10745, 3926, 278, 9362, 370, 456, 311, 572], "temperature": 0.0, "avg_logprob": -0.13182394555274476, "compression_ratio": 1.662280701754386, "no_speech_prob": 9.75515376921976e-06}, {"id": 129, "seek": 86296, "start": 862.96, "end": 869.84, "text": " additional open GL plug-ins here. A couple of the Java sounds I mentioned monitoring", "tokens": [4497, 1269, 16225, 5452, 12, 1292, 510, 13, 316, 1916, 295, 264, 10745, 3263, 286, 2835, 11028], "temperature": 0.0, "avg_logprob": -0.17902988126908226, "compression_ratio": 1.6079295154185023, "no_speech_prob": 1.5111028005776461e-05}, {"id": 130, "seek": 86296, "start": 870.64, "end": 876.64, "text": " Neo kind of a little hidden one but when we're writing data, when we're emulating kind of", "tokens": [24458, 733, 295, 257, 707, 7633, 472, 457, 562, 321, 434, 3579, 1412, 11, 562, 321, 434, 846, 12162, 733, 295], "temperature": 0.0, "avg_logprob": -0.17902988126908226, "compression_ratio": 1.6079295154185023, "no_speech_prob": 1.5111028005776461e-05}, {"id": 131, "seek": 86296, "start": 876.64, "end": 881.76, "text": " cartridge saves and we want to write data actually open a mapped file for that to save the data", "tokens": [27753, 19155, 293, 321, 528, 281, 2464, 1412, 767, 1269, 257, 33318, 3991, 337, 300, 281, 3155, 264, 1412], "temperature": 0.0, "avg_logprob": -0.17902988126908226, "compression_ratio": 1.6079295154185023, "no_speech_prob": 1.5111028005776461e-05}, {"id": 132, "seek": 86296, "start": 882.48, "end": 886.08, "text": " and their threading is often important. I'm not going to really mention too much but there are", "tokens": [293, 641, 7207, 278, 307, 2049, 1021, 13, 286, 478, 406, 516, 281, 534, 2152, 886, 709, 457, 456, 366], "temperature": 0.0, "avg_logprob": -0.17902988126908226, "compression_ratio": 1.6079295154185023, "no_speech_prob": 1.5111028005776461e-05}, {"id": 133, "seek": 88608, "start": 886.08, "end": 893.2800000000001, "text": " also desktop and taskbar and integration APIs that help with integrating into the desktop with", "tokens": [611, 14502, 293, 5633, 5356, 293, 10980, 21445, 300, 854, 365, 26889, 666, 264, 14502, 365], "temperature": 0.0, "avg_logprob": -0.18375205993652344, "compression_ratio": 1.6460176991150441, "no_speech_prob": 1.9611081370385364e-05}, {"id": 134, "seek": 88608, "start": 893.2800000000001, "end": 899.9200000000001, "text": " the system menus and things. So we'll start with the graphics. The standard Swing and Java 2D APIs", "tokens": [264, 1185, 30347, 293, 721, 13, 407, 321, 603, 722, 365, 264, 11837, 13, 440, 3832, 3926, 278, 293, 10745, 568, 35, 21445], "temperature": 0.0, "avg_logprob": -0.18375205993652344, "compression_ratio": 1.6460176991150441, "no_speech_prob": 1.9611081370385364e-05}, {"id": 135, "seek": 88608, "start": 899.9200000000001, "end": 906.1600000000001, "text": " people may be familiar with, the idea is that you override the the jcomponent class and you", "tokens": [561, 815, 312, 4963, 365, 11, 264, 1558, 307, 300, 291, 42321, 264, 264, 361, 21541, 30365, 1508, 293, 291], "temperature": 0.0, "avg_logprob": -0.18375205993652344, "compression_ratio": 1.6460176991150441, "no_speech_prob": 1.9611081370385364e-05}, {"id": 136, "seek": 88608, "start": 906.1600000000001, "end": 914.88, "text": " implement a paint component method and here in principle we can set various options to", "tokens": [4445, 257, 4225, 6542, 3170, 293, 510, 294, 8665, 321, 393, 992, 3683, 3956, 281], "temperature": 0.0, "avg_logprob": -0.18375205993652344, "compression_ratio": 1.6460176991150441, "no_speech_prob": 1.9611081370385364e-05}, {"id": 137, "seek": 91488, "start": 914.88, "end": 922.72, "text": " hint with whether we want quality speed etc and then finally we can render an image and it will", "tokens": [12075, 365, 1968, 321, 528, 3125, 3073, 5183, 293, 550, 2721, 321, 393, 15529, 364, 3256, 293, 309, 486], "temperature": 0.0, "avg_logprob": -0.1354846954345703, "compression_ratio": 1.5989304812834224, "no_speech_prob": 2.083596154989209e-05}, {"id": 138, "seek": 91488, "start": 922.72, "end": 929.12, "text": " be rendered with the with these different settings. But some caveats with that. Unfortunately it turns", "tokens": [312, 28748, 365, 264, 365, 613, 819, 6257, 13, 583, 512, 11730, 1720, 365, 300, 13, 8590, 309, 4523], "temperature": 0.0, "avg_logprob": -0.1354846954345703, "compression_ratio": 1.5989304812834224, "no_speech_prob": 2.083596154989209e-05}, {"id": 139, "seek": 91488, "start": 929.12, "end": 937.52, "text": " out that some of those options effectively end up turning off GPU acceleration and they can be quite", "tokens": [484, 300, 512, 295, 729, 3956, 8659, 917, 493, 6246, 766, 18407, 17162, 293, 436, 393, 312, 1596], "temperature": 0.0, "avg_logprob": -0.1354846954345703, "compression_ratio": 1.5989304812834224, "no_speech_prob": 2.083596154989209e-05}, {"id": 140, "seek": 93752, "start": 937.52, "end": 946.8, "text": " CPU hungry and efficient. It's not clearly documented which ones actually run on the CPU and the GPU", "tokens": [13199, 8067, 293, 7148, 13, 467, 311, 406, 4448, 23007, 597, 2306, 767, 1190, 322, 264, 13199, 293, 264, 18407], "temperature": 0.0, "avg_logprob": -0.16502691037727124, "compression_ratio": 1.4818652849740932, "no_speech_prob": 3.1442552426597103e-05}, {"id": 141, "seek": 93752, "start": 948.24, "end": 956.4, "text": " but effectively ends up that the fast options without any quality interpolation are the ones that", "tokens": [457, 8659, 5314, 493, 300, 264, 2370, 3956, 1553, 604, 3125, 44902, 399, 366, 264, 2306, 300], "temperature": 0.0, "avg_logprob": -0.16502691037727124, "compression_ratio": 1.4818652849740932, "no_speech_prob": 3.1442552426597103e-05}, {"id": 142, "seek": 93752, "start": 956.4, "end": 963.1999999999999, "text": " run that just go straight to the GPU. So we're going to have to be a little bit careful", "tokens": [1190, 300, 445, 352, 2997, 281, 264, 18407, 13, 407, 321, 434, 516, 281, 362, 281, 312, 257, 707, 857, 5026], "temperature": 0.0, "avg_logprob": -0.16502691037727124, "compression_ratio": 1.4818652849740932, "no_speech_prob": 3.1442552426597103e-05}, {"id": 143, "seek": 96320, "start": 963.2, "end": 971.0400000000001, "text": " not to use too much CPU time for each frame render. And then there's also an additional problem", "tokens": [406, 281, 764, 886, 709, 13199, 565, 337, 1184, 3920, 15529, 13, 400, 550, 456, 311, 611, 364, 4497, 1154], "temperature": 0.0, "avg_logprob": -0.15570445177031728, "compression_ratio": 1.5267857142857142, "no_speech_prob": 2.5381845262018032e-05}, {"id": 144, "seek": 96320, "start": 971.0400000000001, "end": 975.2, "text": " that the standard API to set and get pixels from buffered images", "tokens": [300, 264, 3832, 9362, 281, 992, 293, 483, 18668, 490, 9204, 4073, 5267], "temperature": 0.0, "avg_logprob": -0.15570445177031728, "compression_ratio": 1.5267857142857142, "no_speech_prob": 2.5381845262018032e-05}, {"id": 145, "seek": 96320, "start": 977.6, "end": 982.32, "text": " actually it's quite inefficient for setting individual pixels but we have a workaround. So", "tokens": [767, 309, 311, 1596, 43495, 337, 3287, 2609, 18668, 457, 321, 362, 257, 589, 25762, 13, 407], "temperature": 0.0, "avg_logprob": -0.15570445177031728, "compression_ratio": 1.5267857142857142, "no_speech_prob": 2.5381845262018032e-05}, {"id": 146, "seek": 96320, "start": 982.32, "end": 988.48, "text": " this will be the standard API that we'd use. We create our image like this, lovely, we set", "tokens": [341, 486, 312, 264, 3832, 9362, 300, 321, 1116, 764, 13, 492, 1884, 527, 3256, 411, 341, 11, 7496, 11, 321, 992], "temperature": 0.0, "avg_logprob": -0.15570445177031728, "compression_ratio": 1.5267857142857142, "no_speech_prob": 2.5381845262018032e-05}, {"id": 147, "seek": 98848, "start": 988.48, "end": 994.88, "text": " different types about 15 different types that we could use and then we can set RGB and whether that", "tokens": [819, 3467, 466, 2119, 819, 3467, 300, 321, 727, 764, 293, 550, 321, 393, 992, 31231, 293, 1968, 300], "temperature": 0.0, "avg_logprob": -0.08546556982883187, "compression_ratio": 1.7013574660633484, "no_speech_prob": 7.985231604834553e-06}, {"id": 148, "seek": 98848, "start": 994.88, "end": 1001.2, "text": " backing star is an input pixel or bytes per pixel or whatever it will work out how to set the RGB", "tokens": [19373, 3543, 307, 364, 4846, 19261, 420, 36088, 680, 19261, 420, 2035, 309, 486, 589, 484, 577, 281, 992, 264, 31231], "temperature": 0.0, "avg_logprob": -0.08546556982883187, "compression_ratio": 1.7013574660633484, "no_speech_prob": 7.985231604834553e-06}, {"id": 149, "seek": 98848, "start": 1001.2, "end": 1008.0, "text": " lovely. But in practice we're probably never going to have anything other than an input pixel.", "tokens": [7496, 13, 583, 294, 3124, 321, 434, 1391, 1128, 516, 281, 362, 1340, 661, 813, 364, 4846, 19261, 13], "temperature": 0.0, "avg_logprob": -0.08546556982883187, "compression_ratio": 1.7013574660633484, "no_speech_prob": 7.985231604834553e-06}, {"id": 150, "seek": 98848, "start": 1008.96, "end": 1014.4, "text": " So this is the least efficient way we could possibly imagine to set the pixel data.", "tokens": [407, 341, 307, 264, 1935, 7148, 636, 321, 727, 6264, 3811, 281, 992, 264, 19261, 1412, 13], "temperature": 0.0, "avg_logprob": -0.08546556982883187, "compression_ratio": 1.7013574660633484, "no_speech_prob": 7.985231604834553e-06}, {"id": 151, "seek": 101440, "start": 1014.4, "end": 1023.92, "text": " Luckily we can actually with a little bit of jigglypokery we can ask Java 2D for the underlying", "tokens": [19726, 321, 393, 767, 365, 257, 707, 857, 295, 361, 46737, 79, 453, 2109, 321, 393, 1029, 10745, 568, 35, 337, 264, 14217], "temperature": 0.0, "avg_logprob": -0.1804923375447591, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.736254752264358e-05}, {"id": 152, "seek": 101440, "start": 1023.92, "end": 1029.68, "text": " interay and then we can just directly write to that. The advantage being then things like array", "tokens": [728, 320, 293, 550, 321, 393, 445, 3838, 2464, 281, 300, 13, 440, 5002, 885, 550, 721, 411, 10225], "temperature": 0.0, "avg_logprob": -0.1804923375447591, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.736254752264358e-05}, {"id": 153, "seek": 101440, "start": 1029.68, "end": 1035.68, "text": " fill, array copy, array dot fill sorry they then become available. There's a caveat that normally", "tokens": [2836, 11, 10225, 5055, 11, 10225, 5893, 2836, 2597, 436, 550, 1813, 2435, 13, 821, 311, 257, 43012, 300, 5646], "temperature": 0.0, "avg_logprob": -0.1804923375447591, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.736254752264358e-05}, {"id": 154, "seek": 101440, "start": 1036.72, "end": 1041.04, "text": " wouldn't do this because if you've got static images that you're rendering lots of times", "tokens": [2759, 380, 360, 341, 570, 498, 291, 600, 658, 13437, 5267, 300, 291, 434, 22407, 3195, 295, 1413], "temperature": 0.0, "avg_logprob": -0.1804923375447591, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.736254752264358e-05}, {"id": 155, "seek": 104104, "start": 1041.04, "end": 1047.84, "text": " the what would normally happen is that Java 2D sends that to the GPU once then subsequent", "tokens": [264, 437, 576, 5646, 1051, 307, 300, 10745, 568, 35, 14790, 300, 281, 264, 18407, 1564, 550, 19962], "temperature": 0.0, "avg_logprob": -0.17361666735480813, "compression_ratio": 1.5833333333333333, "no_speech_prob": 9.733991646498907e-06}, {"id": 156, "seek": 104104, "start": 1047.84, "end": 1053.28, "text": " renders are effectively free but we don't really need that for our purposes. We're going to be", "tokens": [6125, 433, 366, 8659, 1737, 457, 321, 500, 380, 534, 643, 300, 337, 527, 9932, 13, 492, 434, 516, 281, 312], "temperature": 0.0, "avg_logprob": -0.17361666735480813, "compression_ratio": 1.5833333333333333, "no_speech_prob": 9.733991646498907e-06}, {"id": 157, "seek": 104104, "start": 1053.28, "end": 1058.08, "text": " rendering a different image on each frame effectively so that's not such a problem for us.", "tokens": [22407, 257, 819, 3256, 322, 1184, 3920, 8659, 370, 300, 311, 406, 1270, 257, 1154, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.17361666735480813, "compression_ratio": 1.5833333333333333, "no_speech_prob": 9.733991646498907e-06}, {"id": 158, "seek": 104104, "start": 1059.84, "end": 1064.96, "text": " So then just to come back to us I'm showing you earlier with the different scroll per", "tokens": [407, 550, 445, 281, 808, 646, 281, 505, 286, 478, 4099, 291, 3071, 365, 264, 819, 11369, 680], "temperature": 0.0, "avg_logprob": -0.17361666735480813, "compression_ratio": 1.5833333333333333, "no_speech_prob": 9.733991646498907e-06}, {"id": 159, "seek": 106496, "start": 1064.96, "end": 1072.64, "text": " frame on different raster lines. We kind of want to get the best of both worlds with how we then", "tokens": [3920, 322, 819, 367, 1727, 3876, 13, 492, 733, 295, 528, 281, 483, 264, 1151, 295, 1293, 13401, 365, 577, 321, 550], "temperature": 0.0, "avg_logprob": -0.09322779925901499, "compression_ratio": 1.5480225988700564, "no_speech_prob": 8.921148400986567e-05}, {"id": 160, "seek": 106496, "start": 1072.64, "end": 1081.3600000000001, "text": " end up structuring things. So what I do is I basically I kind of break down the image", "tokens": [917, 493, 6594, 1345, 721, 13, 407, 437, 286, 360, 307, 286, 1936, 286, 733, 295, 1821, 760, 264, 3256], "temperature": 0.0, "avg_logprob": -0.09322779925901499, "compression_ratio": 1.5480225988700564, "no_speech_prob": 8.921148400986567e-05}, {"id": 161, "seek": 106496, "start": 1081.3600000000001, "end": 1088.96, "text": " and say well for this frame where are the points where the things like the scroll registers", "tokens": [293, 584, 731, 337, 341, 3920, 689, 366, 264, 2793, 689, 264, 721, 411, 264, 11369, 38351], "temperature": 0.0, "avg_logprob": -0.09322779925901499, "compression_ratio": 1.5480225988700564, "no_speech_prob": 8.921148400986567e-05}, {"id": 162, "seek": 108896, "start": 1088.96, "end": 1095.1200000000001, "text": " actually change. On some games that will they will just have one setting per frame and I can then", "tokens": [767, 1319, 13, 1282, 512, 2813, 300, 486, 436, 486, 445, 362, 472, 3287, 680, 3920, 293, 286, 393, 550], "temperature": 0.0, "avg_logprob": -0.11871969977090525, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.885351568693295e-05}, {"id": 163, "seek": 108896, "start": 1095.1200000000001, "end": 1101.52, "text": " just efficiently render the the the entire frame without without having to you know worry about", "tokens": [445, 19621, 15529, 264, 264, 264, 2302, 3920, 1553, 1553, 1419, 281, 291, 458, 3292, 466], "temperature": 0.0, "avg_logprob": -0.11871969977090525, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.885351568693295e-05}, {"id": 164, "seek": 108896, "start": 1102.16, "end": 1108.64, "text": " clips per section etc. So I don't kind of literally go through pixel by pixel kind of", "tokens": [13117, 680, 3541, 5183, 13, 407, 286, 500, 380, 733, 295, 3736, 352, 807, 19261, 538, 19261, 733, 295], "temperature": 0.0, "avg_logprob": -0.11871969977090525, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.885351568693295e-05}, {"id": 165, "seek": 108896, "start": 1108.64, "end": 1115.6000000000001, "text": " chasing the beam. Just yes there's just a kind of brief example here so I'll split into sections", "tokens": [17876, 264, 14269, 13, 1449, 2086, 456, 311, 445, 257, 733, 295, 5353, 1365, 510, 370, 286, 603, 7472, 666, 10863], "temperature": 0.0, "avg_logprob": -0.11871969977090525, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.885351568693295e-05}, {"id": 166, "seek": 111560, "start": 1115.6, "end": 1121.9199999999998, "text": " and then I can say for that section get me the relevant settings and then go through and fetch", "tokens": [293, 550, 286, 393, 584, 337, 300, 3541, 483, 385, 264, 7340, 6257, 293, 550, 352, 807, 293, 23673], "temperature": 0.0, "avg_logprob": -0.08794005163784685, "compression_ratio": 1.7079207920792079, "no_speech_prob": 3.2607415505481185e-06}, {"id": 167, "seek": 111560, "start": 1121.9199999999998, "end": 1127.36, "text": " from the from the the tile map data and render it kind of almost as you expect.", "tokens": [490, 264, 490, 264, 264, 20590, 4471, 1412, 293, 15529, 309, 733, 295, 1920, 382, 291, 2066, 13], "temperature": 0.0, "avg_logprob": -0.08794005163784685, "compression_ratio": 1.7079207920792079, "no_speech_prob": 3.2607415505481185e-06}, {"id": 168, "seek": 111560, "start": 1130.08, "end": 1136.3999999999999, "text": " So by doing that and by using this trick of getting the raw kind of interay", "tokens": [407, 538, 884, 300, 293, 538, 1228, 341, 4282, 295, 1242, 264, 8936, 733, 295, 728, 320], "temperature": 0.0, "avg_logprob": -0.08794005163784685, "compression_ratio": 1.7079207920792079, "no_speech_prob": 3.2607415505481185e-06}, {"id": 169, "seek": 111560, "start": 1137.6, "end": 1142.8799999999999, "text": " this does allow us to get quite a good speed up on on the rendering. So if there's kind of one", "tokens": [341, 775, 2089, 505, 281, 483, 1596, 257, 665, 3073, 493, 322, 322, 264, 22407, 13, 407, 498, 456, 311, 733, 295, 472], "temperature": 0.0, "avg_logprob": -0.08794005163784685, "compression_ratio": 1.7079207920792079, "no_speech_prob": 3.2607415505481185e-06}, {"id": 170, "seek": 114288, "start": 1142.88, "end": 1149.3600000000001, "text": " one thing you're doing in Java the kind of the one kind of speed up to think about is probably this.", "tokens": [472, 551, 291, 434, 884, 294, 10745, 264, 733, 295, 264, 472, 733, 295, 3073, 493, 281, 519, 466, 307, 1391, 341, 13], "temperature": 0.0, "avg_logprob": -0.17451024055480957, "compression_ratio": 1.7098214285714286, "no_speech_prob": 5.219730519456789e-05}, {"id": 171, "seek": 114288, "start": 1150.96, "end": 1156.64, "text": " Mention so having having none about that trick there's some little little tricks that we can do", "tokens": [376, 1251, 370, 1419, 1419, 6022, 466, 300, 4282, 456, 311, 512, 707, 707, 11733, 300, 321, 393, 360], "temperature": 0.0, "avg_logprob": -0.17451024055480957, "compression_ratio": 1.7098214285714286, "no_speech_prob": 5.219730519456789e-05}, {"id": 172, "seek": 114288, "start": 1156.64, "end": 1163.44, "text": " obviously people familiar with with with CRTs where they were actually the way these systems", "tokens": [2745, 561, 4963, 365, 365, 365, 14123, 33424, 689, 436, 645, 767, 264, 636, 613, 3652], "temperature": 0.0, "avg_logprob": -0.17451024055480957, "compression_ratio": 1.7098214285714286, "no_speech_prob": 5.219730519456789e-05}, {"id": 173, "seek": 114288, "start": 1163.44, "end": 1169.6000000000001, "text": " work they kind of render every other scan line and we can if you've got a really good quality", "tokens": [589, 436, 733, 295, 15529, 633, 661, 11049, 1622, 293, 321, 393, 498, 291, 600, 658, 257, 534, 665, 3125], "temperature": 0.0, "avg_logprob": -0.17451024055480957, "compression_ratio": 1.7098214285714286, "no_speech_prob": 5.219730519456789e-05}, {"id": 174, "seek": 116960, "start": 1169.6, "end": 1173.28, "text": " monitor a little like that most people's minds a little bit more that you kind of had bleed in", "tokens": [6002, 257, 707, 411, 300, 881, 561, 311, 9634, 257, 707, 857, 544, 300, 291, 733, 295, 632, 28385, 294], "temperature": 0.0, "avg_logprob": -0.13902555548626444, "compression_ratio": 1.9705882352941178, "no_speech_prob": 1.4867386198602617e-05}, {"id": 175, "seek": 116960, "start": 1173.28, "end": 1179.04, "text": " between the scan lines and you also kind of get ghosting effects this kind of thing. So we can", "tokens": [1296, 264, 11049, 3876, 293, 291, 611, 733, 295, 483, 8359, 278, 5065, 341, 733, 295, 551, 13, 407, 321, 393], "temperature": 0.0, "avg_logprob": -0.13902555548626444, "compression_ratio": 1.9705882352941178, "no_speech_prob": 1.4867386198602617e-05}, {"id": 176, "seek": 116960, "start": 1179.04, "end": 1186.3999999999999, "text": " try and give a little bit of the that look and feel yeah so I'm literally going to do here in", "tokens": [853, 293, 976, 257, 707, 857, 295, 264, 300, 574, 293, 841, 1338, 370, 286, 478, 3736, 516, 281, 360, 510, 294], "temperature": 0.0, "avg_logprob": -0.13902555548626444, "compression_ratio": 1.9705882352941178, "no_speech_prob": 1.4867386198602617e-05}, {"id": 177, "seek": 116960, "start": 1186.3999999999999, "end": 1192.6399999999999, "text": " the Java is I'm going to render things that every other kind of scan line I'm going to render the", "tokens": [264, 10745, 307, 286, 478, 516, 281, 15529, 721, 300, 633, 661, 733, 295, 11049, 1622, 286, 478, 516, 281, 15529, 264], "temperature": 0.0, "avg_logprob": -0.13902555548626444, "compression_ratio": 1.9705882352941178, "no_speech_prob": 1.4867386198602617e-05}, {"id": 178, "seek": 116960, "start": 1192.6399999999999, "end": 1197.36, "text": " kind of darkened version of that scan line so I can kind of produce something like this", "tokens": [733, 295, 2877, 5320, 3037, 295, 300, 11049, 1622, 370, 286, 393, 733, 295, 5258, 746, 411, 341], "temperature": 0.0, "avg_logprob": -0.13902555548626444, "compression_ratio": 1.9705882352941178, "no_speech_prob": 1.4867386198602617e-05}, {"id": 179, "seek": 119736, "start": 1197.36, "end": 1203.1999999999998, "text": " and then just have to be a little bit careful with the scaling because you can get more effects if", "tokens": [293, 550, 445, 362, 281, 312, 257, 707, 857, 5026, 365, 264, 21589, 570, 291, 393, 483, 544, 5065, 498], "temperature": 0.0, "avg_logprob": -0.13982092949651903, "compression_ratio": 1.7155555555555555, "no_speech_prob": 7.5030689004051965e-06}, {"id": 180, "seek": 119736, "start": 1203.1999999999998, "end": 1208.9599999999998, "text": " if you've you've got a kind of odd scale factor so do a little bit of extra interpolation to try", "tokens": [498, 291, 600, 291, 600, 658, 257, 733, 295, 7401, 4373, 5952, 370, 360, 257, 707, 857, 295, 2857, 44902, 399, 281, 853], "temperature": 0.0, "avg_logprob": -0.13982092949651903, "compression_ratio": 1.7155555555555555, "no_speech_prob": 7.5030689004051965e-06}, {"id": 181, "seek": 119736, "start": 1208.9599999999998, "end": 1216.08, "text": " and get around that. Then another effect that we can do in Java is to like these kind of ghosting", "tokens": [293, 483, 926, 300, 13, 1396, 1071, 1802, 300, 321, 393, 360, 294, 10745, 307, 281, 411, 613, 733, 295, 8359, 278], "temperature": 0.0, "avg_logprob": -0.13982092949651903, "compression_ratio": 1.7155555555555555, "no_speech_prob": 7.5030689004051965e-06}, {"id": 182, "seek": 119736, "start": 1216.08, "end": 1223.76, "text": " effects if we can define our effect in terms of a convolution matrix which you may have seen", "tokens": [5065, 498, 321, 393, 6964, 527, 1802, 294, 2115, 295, 257, 45216, 8141, 597, 291, 815, 362, 1612], "temperature": 0.0, "avg_logprob": -0.13982092949651903, "compression_ratio": 1.7155555555555555, "no_speech_prob": 7.5030689004051965e-06}, {"id": 183, "seek": 122376, "start": 1223.76, "end": 1230.08, "text": " then we get native library built in that will allow us to render that efficiently and that will", "tokens": [550, 321, 483, 8470, 6405, 3094, 294, 300, 486, 2089, 505, 281, 15529, 300, 19621, 293, 300, 486], "temperature": 0.0, "avg_logprob": -0.1378099314371745, "compression_ratio": 1.595, "no_speech_prob": 1.1399063623684924e-05}, {"id": 184, "seek": 122376, "start": 1230.08, "end": 1236.64, "text": " also access the integer data under the hood it won't go through that set RGB every time.", "tokens": [611, 2105, 264, 24922, 1412, 833, 264, 13376, 309, 1582, 380, 352, 807, 300, 992, 31231, 633, 565, 13], "temperature": 0.0, "avg_logprob": -0.1378099314371745, "compression_ratio": 1.595, "no_speech_prob": 1.1399063623684924e-05}, {"id": 185, "seek": 122376, "start": 1238.08, "end": 1244.16, "text": " So we can get effects like this again we're kind of at low rendering time", "tokens": [407, 321, 393, 483, 5065, 411, 341, 797, 321, 434, 733, 295, 412, 2295, 22407, 565], "temperature": 0.0, "avg_logprob": -0.1378099314371745, "compression_ratio": 1.595, "no_speech_prob": 1.1399063623684924e-05}, {"id": 186, "seek": 122376, "start": 1246.64, "end": 1249.44, "text": " and then this is for my favorite spectrum games from a child", "tokens": [293, 550, 341, 307, 337, 452, 2954, 11143, 2813, 490, 257, 1440], "temperature": 0.0, "avg_logprob": -0.1378099314371745, "compression_ratio": 1.595, "no_speech_prob": 1.1399063623684924e-05}, {"id": 187, "seek": 124944, "start": 1249.44, "end": 1257.44, "text": " to do something like this combining the kind of CRT effect. Another issue we just have is there", "tokens": [281, 360, 746, 411, 341, 21928, 264, 733, 295, 14123, 51, 1802, 13, 3996, 2734, 321, 445, 362, 307, 456], "temperature": 0.0, "avg_logprob": -0.13586109025137766, "compression_ratio": 1.668103448275862, "no_speech_prob": 2.810078331094701e-05}, {"id": 188, "seek": 124944, "start": 1257.44, "end": 1263.52, "text": " are multiple ways to scale images in Java and depending on which one we pick we kind of get", "tokens": [366, 3866, 2098, 281, 4373, 5267, 294, 10745, 293, 5413, 322, 597, 472, 321, 1888, 321, 733, 295, 483], "temperature": 0.0, "avg_logprob": -0.13586109025137766, "compression_ratio": 1.668103448275862, "no_speech_prob": 2.810078331094701e-05}, {"id": 189, "seek": 124944, "start": 1263.52, "end": 1270.24, "text": " different different performance characteristics so the thing I'm actually looking at which is kind", "tokens": [819, 819, 3389, 10891, 370, 264, 551, 286, 478, 767, 1237, 412, 597, 307, 733], "temperature": 0.0, "avg_logprob": -0.13586109025137766, "compression_ratio": 1.668103448275862, "no_speech_prob": 2.810078331094701e-05}, {"id": 190, "seek": 124944, "start": 1270.24, "end": 1278.0800000000002, "text": " of most stable is to actually just hard code just hard code the scaling myself because then I can go", "tokens": [295, 881, 8351, 307, 281, 767, 445, 1152, 3089, 445, 1152, 3089, 264, 21589, 2059, 570, 550, 286, 393, 352], "temperature": 0.0, "avg_logprob": -0.13586109025137766, "compression_ratio": 1.668103448275862, "no_speech_prob": 2.810078331094701e-05}, {"id": 191, "seek": 127808, "start": 1278.08, "end": 1284.6399999999999, "text": " through this you know access the interay directly some of these other built-in APIs unfortunately", "tokens": [807, 341, 291, 458, 2105, 264, 728, 320, 3838, 512, 295, 613, 661, 3094, 12, 259, 21445, 7015], "temperature": 0.0, "avg_logprob": -0.14878139276614136, "compression_ratio": 1.6808510638297873, "no_speech_prob": 1.563141995575279e-05}, {"id": 192, "seek": 127808, "start": 1284.6399999999999, "end": 1291.6, "text": " you know they go through that get RGB set RGB to be you know support different formats but we don't", "tokens": [291, 458, 436, 352, 807, 300, 483, 31231, 992, 31231, 281, 312, 291, 458, 1406, 819, 25879, 457, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.14878139276614136, "compression_ratio": 1.6808510638297873, "no_speech_prob": 1.563141995575279e-05}, {"id": 193, "seek": 127808, "start": 1291.6, "end": 1301.76, "text": " really we don't really need that. Okay let's talk about sound so the the mass system and the spectrum", "tokens": [534, 321, 500, 380, 534, 643, 300, 13, 1033, 718, 311, 751, 466, 1626, 370, 264, 264, 2758, 1185, 293, 264, 11143], "temperature": 0.0, "avg_logprob": -0.14878139276614136, "compression_ratio": 1.6808510638297873, "no_speech_prob": 1.563141995575279e-05}, {"id": 194, "seek": 127808, "start": 1301.76, "end": 1306.72, "text": " had quite different ways of producing sound the spectrum obviously was this kind of very simple", "tokens": [632, 1596, 819, 2098, 295, 10501, 1626, 264, 11143, 2745, 390, 341, 733, 295, 588, 2199], "temperature": 0.0, "avg_logprob": -0.14878139276614136, "compression_ratio": 1.6808510638297873, "no_speech_prob": 1.563141995575279e-05}, {"id": 195, "seek": 130672, "start": 1306.72, "end": 1313.1200000000001, "text": " speaker it could effectively be a one or a zero and you kind of control a square wave literally from", "tokens": [8145, 309, 727, 8659, 312, 257, 472, 420, 257, 4018, 293, 291, 733, 295, 1969, 257, 3732, 5772, 3736, 490], "temperature": 0.0, "avg_logprob": -0.07073801413349722, "compression_ratio": 1.668103448275862, "no_speech_prob": 1.6971587683656253e-05}, {"id": 196, "seek": 130672, "start": 1313.1200000000001, "end": 1319.2, "text": " the CPU to produce your sound but then something like the master system that had an actual sound", "tokens": [264, 13199, 281, 5258, 428, 1626, 457, 550, 746, 411, 264, 4505, 1185, 300, 632, 364, 3539, 1626], "temperature": 0.0, "avg_logprob": -0.07073801413349722, "compression_ratio": 1.668103448275862, "no_speech_prob": 1.6971587683656253e-05}, {"id": 197, "seek": 130672, "start": 1319.2, "end": 1324.8, "text": " chip you would control the sound by setting register to say I want tone one to be this frequency", "tokens": [11409, 291, 576, 1969, 264, 1626, 538, 3287, 7280, 281, 584, 286, 528, 8027, 472, 281, 312, 341, 7893], "temperature": 0.0, "avg_logprob": -0.07073801413349722, "compression_ratio": 1.668103448275862, "no_speech_prob": 1.6971587683656253e-05}, {"id": 198, "seek": 130672, "start": 1324.8, "end": 1332.72, "text": " etc so we want to abstract those two ways of producing sound so that we can we can just have", "tokens": [5183, 370, 321, 528, 281, 12649, 729, 732, 2098, 295, 10501, 1626, 370, 300, 321, 393, 321, 393, 445, 362], "temperature": 0.0, "avg_logprob": -0.07073801413349722, "compression_ratio": 1.668103448275862, "no_speech_prob": 1.6971587683656253e-05}, {"id": 199, "seek": 133272, "start": 1332.72, "end": 1341.28, "text": " one generate sample data method and then our audio service is going to call into that and so", "tokens": [472, 8460, 6889, 1412, 3170, 293, 550, 527, 6278, 2643, 307, 516, 281, 818, 666, 300, 293, 370], "temperature": 0.0, "avg_logprob": -0.11070393479388693, "compression_ratio": 1.7276785714285714, "no_speech_prob": 8.17804266262101e-06}, {"id": 200, "seek": 133272, "start": 1341.28, "end": 1347.1200000000001, "text": " it's just a brief slip here of what I do so I've got it that'll be the subclass for example for the", "tokens": [309, 311, 445, 257, 5353, 11140, 510, 295, 437, 286, 360, 370, 286, 600, 658, 309, 300, 603, 312, 264, 1422, 11665, 337, 1365, 337, 264], "temperature": 0.0, "avg_logprob": -0.11070393479388693, "compression_ratio": 1.7276785714285714, "no_speech_prob": 8.17804266262101e-06}, {"id": 201, "seek": 133272, "start": 1347.1200000000001, "end": 1353.6000000000001, "text": " spectrum type sound there and then here a bit more complicated but we effectively you know do a", "tokens": [11143, 2010, 1626, 456, 293, 550, 510, 257, 857, 544, 6179, 457, 321, 8659, 291, 458, 360, 257], "temperature": 0.0, "avg_logprob": -0.11070393479388693, "compression_ratio": 1.7276785714285714, "no_speech_prob": 8.17804266262101e-06}, {"id": 202, "seek": 133272, "start": 1353.6000000000001, "end": 1359.3600000000001, "text": " similar thing we're going to be whenever we're asked for some sample data we're going to calculate", "tokens": [2531, 551, 321, 434, 516, 281, 312, 5699, 321, 434, 2351, 337, 512, 6889, 1412, 321, 434, 516, 281, 8873], "temperature": 0.0, "avg_logprob": -0.11070393479388693, "compression_ratio": 1.7276785714285714, "no_speech_prob": 8.17804266262101e-06}, {"id": 203, "seek": 135936, "start": 1359.36, "end": 1365.1999999999998, "text": " that sample data and split it back yeah and then and then the question becomes well given that sample", "tokens": [300, 6889, 1412, 293, 7472, 309, 646, 1338, 293, 550, 293, 550, 264, 1168, 3643, 731, 2212, 300, 6889], "temperature": 0.0, "avg_logprob": -0.08333513106422863, "compression_ratio": 1.8036529680365296, "no_speech_prob": 1.409864125889726e-05}, {"id": 204, "seek": 135936, "start": 1365.1999999999998, "end": 1373.6, "text": " data production how do we actually pipe it down to the audio output and Java has this slightly", "tokens": [1412, 4265, 577, 360, 321, 767, 11240, 309, 760, 281, 264, 6278, 5598, 293, 10745, 575, 341, 4748], "temperature": 0.0, "avg_logprob": -0.08333513106422863, "compression_ratio": 1.8036529680365296, "no_speech_prob": 1.409864125889726e-05}, {"id": 205, "seek": 135936, "start": 1373.6, "end": 1382.7199999999998, "text": " quirky model where you have a notional mixer that's got inputs and outputs and the slightly perverse", "tokens": [49515, 2316, 689, 291, 362, 257, 406, 1966, 24063, 300, 311, 658, 15743, 293, 23930, 293, 264, 4748, 680, 4308], "temperature": 0.0, "avg_logprob": -0.08333513106422863, "compression_ratio": 1.8036529680365296, "no_speech_prob": 1.409864125889726e-05}, {"id": 206, "seek": 135936, "start": 1382.7199999999998, "end": 1389.28, "text": " thing is that everything is seen in terms of this notional mixer so when you want to output sound", "tokens": [551, 307, 300, 1203, 307, 1612, 294, 2115, 295, 341, 406, 1966, 24063, 370, 562, 291, 528, 281, 5598, 1626], "temperature": 0.0, "avg_logprob": -0.08333513106422863, "compression_ratio": 1.8036529680365296, "no_speech_prob": 1.409864125889726e-05}, {"id": 207, "seek": 138928, "start": 1389.28, "end": 1399.6, "text": " you're actually sending it to an input of the mixer yeah so we call it a source line yeah", "tokens": [291, 434, 767, 7750, 309, 281, 364, 4846, 295, 264, 24063, 1338, 370, 321, 818, 309, 257, 4009, 1622, 1338], "temperature": 0.0, "avg_logprob": -0.17043275099534255, "compression_ratio": 1.6757990867579908, "no_speech_prob": 2.3023098037810996e-05}, {"id": 208, "seek": 138928, "start": 1399.6, "end": 1406.8799999999999, "text": " whereas to us it's not really a source it's a target but that's the reason for that so if I", "tokens": [9735, 281, 505, 309, 311, 406, 534, 257, 4009, 309, 311, 257, 3779, 457, 300, 311, 264, 1778, 337, 300, 370, 498, 286], "temperature": 0.0, "avg_logprob": -0.17043275099534255, "compression_ratio": 1.6757990867579908, "no_speech_prob": 2.3023098037810996e-05}, {"id": 209, "seek": 138928, "start": 1407.52, "end": 1412.6399999999999, "text": " you see here they're also tied to particular drivers and I can enumerate the different", "tokens": [291, 536, 510, 436, 434, 611, 9601, 281, 1729, 11590, 293, 286, 393, 465, 15583, 473, 264, 819], "temperature": 0.0, "avg_logprob": -0.17043275099534255, "compression_ratio": 1.6757990867579908, "no_speech_prob": 2.3023098037810996e-05}, {"id": 210, "seek": 138928, "start": 1412.6399999999999, "end": 1418.72, "text": " drivers on my machine I find that I found out for example that my Mac can listen through my iPhone", "tokens": [11590, 322, 452, 3479, 286, 915, 300, 286, 1352, 484, 337, 1365, 300, 452, 5707, 393, 2140, 807, 452, 7252], "temperature": 0.0, "avg_logprob": -0.17043275099534255, "compression_ratio": 1.6757990867579908, "no_speech_prob": 2.3023098037810996e-05}, {"id": 211, "seek": 141872, "start": 1418.72, "end": 1424.96, "text": " microphone that was the first time I found that out so yeah so we we're clearly available mixers", "tokens": [10952, 300, 390, 264, 700, 565, 286, 1352, 300, 484, 370, 1338, 370, 321, 321, 434, 4448, 2435, 2890, 433], "temperature": 0.0, "avg_logprob": -0.10773961440376613, "compression_ratio": 1.8468899521531101, "no_speech_prob": 1.169951428892091e-05}, {"id": 212, "seek": 141872, "start": 1424.96, "end": 1432.48, "text": " and then we query them for their available source lines okay and then we can we can write the data", "tokens": [293, 550, 321, 14581, 552, 337, 641, 2435, 4009, 3876, 1392, 293, 550, 321, 393, 321, 393, 2464, 264, 1412], "temperature": 0.0, "avg_logprob": -0.10773961440376613, "compression_ratio": 1.8468899521531101, "no_speech_prob": 1.169951428892091e-05}, {"id": 213, "seek": 141872, "start": 1432.48, "end": 1439.04, "text": " and to the source line we open it with a format that we want we write the data and so this is", "tokens": [293, 281, 264, 4009, 1622, 321, 1269, 309, 365, 257, 7877, 300, 321, 528, 321, 2464, 264, 1412, 293, 370, 341, 307], "temperature": 0.0, "avg_logprob": -0.10773961440376613, "compression_ratio": 1.8468899521531101, "no_speech_prob": 1.169951428892091e-05}, {"id": 214, "seek": 141872, "start": 1439.04, "end": 1446.08, "text": " now where I can call my generate sample data method when there's some frames to send I send them", "tokens": [586, 689, 286, 393, 818, 452, 8460, 6889, 1412, 3170, 562, 456, 311, 512, 12083, 281, 2845, 286, 2845, 552], "temperature": 0.0, "avg_logprob": -0.10773961440376613, "compression_ratio": 1.8468899521531101, "no_speech_prob": 1.169951428892091e-05}, {"id": 215, "seek": 144608, "start": 1446.08, "end": 1452.32, "text": " okay people might have spotted a slight flaw with that I've got a nice infinite loop there", "tokens": [1392, 561, 1062, 362, 21010, 257, 4036, 13717, 365, 300, 286, 600, 658, 257, 1481, 13785, 6367, 456], "temperature": 0.0, "avg_logprob": -0.09641383488972982, "compression_ratio": 1.7302325581395348, "no_speech_prob": 6.10974821029231e-05}, {"id": 216, "seek": 144608, "start": 1452.32, "end": 1457.52, "text": " on something like the spectrum I need to be able to tell the difference between there's no audio", "tokens": [322, 746, 411, 264, 11143, 286, 643, 281, 312, 1075, 281, 980, 264, 2649, 1296, 456, 311, 572, 6278], "temperature": 0.0, "avg_logprob": -0.09641383488972982, "compression_ratio": 1.7302325581395348, "no_speech_prob": 6.10974821029231e-05}, {"id": 217, "seek": 144608, "start": 1458.24, "end": 1462.8799999999999, "text": " and there's no audio yet but but there's some on the way and I don't want to sit in an infinite", "tokens": [293, 456, 311, 572, 6278, 1939, 457, 457, 456, 311, 512, 322, 264, 636, 293, 286, 500, 380, 528, 281, 1394, 294, 364, 13785], "temperature": 0.0, "avg_logprob": -0.09641383488972982, "compression_ratio": 1.7302325581395348, "no_speech_prob": 6.10974821029231e-05}, {"id": 218, "seek": 144608, "start": 1462.8799999999999, "end": 1470.24, "text": " loop in the meantime okay so this is where so yeah this was just code examples how I get", "tokens": [6367, 294, 264, 14991, 1392, 370, 341, 307, 689, 370, 1338, 341, 390, 445, 3089, 5110, 577, 286, 483], "temperature": 0.0, "avg_logprob": -0.09641383488972982, "compression_ratio": 1.7302325581395348, "no_speech_prob": 6.10974821029231e-05}, {"id": 219, "seek": 147024, "start": 1470.24, "end": 1477.36, "text": " we output those ones and zeros and then we translate them but so I'll just skip quickly", "tokens": [321, 5598, 729, 2306, 293, 35193, 293, 550, 321, 13799, 552, 457, 370, 286, 603, 445, 10023, 2661], "temperature": 0.0, "avg_logprob": -0.12325927344235507, "compression_ratio": 1.7772511848341233, "no_speech_prob": 4.921862273477018e-05}, {"id": 220, "seek": 147024, "start": 1478.08, "end": 1482.64, "text": " we so we get those ones and zeros and then what we're actually going to do is we're going to use", "tokens": [321, 370, 321, 483, 729, 2306, 293, 35193, 293, 550, 437, 321, 434, 767, 516, 281, 360, 307, 321, 434, 516, 281, 764], "temperature": 0.0, "avg_logprob": -0.12325927344235507, "compression_ratio": 1.7772511848341233, "no_speech_prob": 4.921862273477018e-05}, {"id": 221, "seek": 147024, "start": 1482.64, "end": 1490.0, "text": " a condition object which is part of the Java concurrency API so that we can basically in our", "tokens": [257, 4188, 2657, 597, 307, 644, 295, 264, 10745, 23702, 10457, 9362, 370, 300, 321, 393, 1936, 294, 527], "temperature": 0.0, "avg_logprob": -0.12325927344235507, "compression_ratio": 1.7772511848341233, "no_speech_prob": 4.921862273477018e-05}, {"id": 222, "seek": 147024, "start": 1490.0, "end": 1497.44, "text": " audio in our audio service thread we can wait for a notification that there's actually some audio", "tokens": [6278, 294, 527, 6278, 2643, 7207, 321, 393, 1699, 337, 257, 11554, 300, 456, 311, 767, 512, 6278], "temperature": 0.0, "avg_logprob": -0.12325927344235507, "compression_ratio": 1.7772511848341233, "no_speech_prob": 4.921862273477018e-05}, {"id": 223, "seek": 149744, "start": 1497.44, "end": 1507.28, "text": " that that we want to send okay there we go okay yeah there's also a little bit that we can do with", "tokens": [300, 300, 321, 528, 281, 2845, 1392, 456, 321, 352, 1392, 1338, 456, 311, 611, 257, 707, 857, 300, 321, 393, 360, 365], "temperature": 0.0, "avg_logprob": -0.13926655138042612, "compression_ratio": 1.775, "no_speech_prob": 1.971884921658784e-05}, {"id": 224, "seek": 149744, "start": 1508.48, "end": 1515.2, "text": " yeah hybrid buffering is basically where we we want we want to ideally have a small buffer to", "tokens": [1338, 13051, 9204, 1794, 307, 1936, 689, 321, 321, 528, 321, 528, 281, 22915, 362, 257, 1359, 21762, 281], "temperature": 0.0, "avg_logprob": -0.13926655138042612, "compression_ratio": 1.775, "no_speech_prob": 1.971884921658784e-05}, {"id": 225, "seek": 149744, "start": 1515.2, "end": 1523.6000000000001, "text": " fill to send but that then ensures the problem of we might we run the risk that if we can't", "tokens": [2836, 281, 2845, 457, 300, 550, 28111, 264, 1154, 295, 321, 1062, 321, 1190, 264, 3148, 300, 498, 321, 393, 380], "temperature": 0.0, "avg_logprob": -0.13926655138042612, "compression_ratio": 1.775, "no_speech_prob": 1.971884921658784e-05}, {"id": 226, "seek": 152360, "start": 1523.6, "end": 1528.8, "text": " fill our buffer in time we end up with choppy audio and so in practice what we can actually do is", "tokens": [2836, 527, 21762, 294, 565, 321, 917, 493, 365, 7931, 8200, 6278, 293, 370, 294, 3124, 437, 321, 393, 767, 360, 307], "temperature": 0.0, "avg_logprob": -0.12610369823018058, "compression_ratio": 1.7357142857142858, "no_speech_prob": 6.0850168665638193e-05}, {"id": 227, "seek": 152360, "start": 1528.8, "end": 1533.76, "text": " have a larger buffer and detect when it's half full and kind of keep topping it up and so that's", "tokens": [362, 257, 4833, 21762, 293, 5531, 562, 309, 311, 1922, 1577, 293, 733, 295, 1066, 36676, 309, 493, 293, 370, 300, 311], "temperature": 0.0, "avg_logprob": -0.12610369823018058, "compression_ratio": 1.7357142857142858, "no_speech_prob": 6.0850168665638193e-05}, {"id": 228, "seek": 152360, "start": 1533.76, "end": 1538.9599999999998, "text": " basically how I do it okay and the FM synth which I'll mention briefly I never had one of these", "tokens": [1936, 577, 286, 360, 309, 1392, 293, 264, 29614, 10657, 597, 286, 603, 2152, 10515, 286, 1128, 632, 472, 295, 613], "temperature": 0.0, "avg_logprob": -0.12610369823018058, "compression_ratio": 1.7357142857142858, "no_speech_prob": 6.0850168665638193e-05}, {"id": 229, "seek": 152360, "start": 1538.9599999999998, "end": 1542.8799999999999, "text": " I think they're quite rake and I'll get them in Japan but the master system this was an option", "tokens": [286, 519, 436, 434, 1596, 367, 619, 293, 286, 603, 483, 552, 294, 3367, 457, 264, 4505, 1185, 341, 390, 364, 3614], "temperature": 0.0, "avg_logprob": -0.12610369823018058, "compression_ratio": 1.7357142857142858, "no_speech_prob": 6.0850168665638193e-05}, {"id": 230, "seek": 152360, "start": 1542.8799999999999, "end": 1551.9199999999998, "text": " for the master system okay and I'm what I actually do for this I cheat slightly I use javas built in", "tokens": [337, 264, 4505, 1185, 1392, 293, 286, 478, 437, 286, 767, 360, 337, 341, 286, 17470, 4748, 286, 764, 361, 37331, 3094, 294], "temperature": 0.0, "avg_logprob": -0.12610369823018058, "compression_ratio": 1.7357142857142858, "no_speech_prob": 6.0850168665638193e-05}, {"id": 231, "seek": 155192, "start": 1551.92, "end": 1559.92, "text": " midi software synthesizer so I translate the instructions to that FM synth into midi commands", "tokens": [2062, 72, 4722, 26617, 6545, 370, 286, 13799, 264, 9415, 281, 300, 29614, 10657, 666, 2062, 72, 16901], "temperature": 0.0, "avg_logprob": -0.07966529301234654, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00012970618263352662}, {"id": 232, "seek": 155192, "start": 1559.92, "end": 1565.1200000000001, "text": " and I send these to the soft synth and I don't know if this is going to play on the projector", "tokens": [293, 286, 2845, 613, 281, 264, 2787, 10657, 293, 286, 500, 380, 458, 498, 341, 307, 516, 281, 862, 322, 264, 39792], "temperature": 0.0, "avg_logprob": -0.07966529301234654, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00012970618263352662}, {"id": 233, "seek": 155192, "start": 1565.1200000000001, "end": 1569.76, "text": " but I'll turn up the audio here and just see so you'll hear difference you'll hear the the normal", "tokens": [457, 286, 603, 1261, 493, 264, 6278, 510, 293, 445, 536, 370, 291, 603, 1568, 2649, 291, 603, 1568, 264, 264, 2710], "temperature": 0.0, "avg_logprob": -0.07966529301234654, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00012970618263352662}, {"id": 234, "seek": 156976, "start": 1569.76, "end": 1584.48, "text": " PSG sound chip and then you will hear the FM kind of synth oh I don't hear that it's probably too", "tokens": [8168, 38, 1626, 11409, 293, 550, 291, 486, 1568, 264, 29614, 733, 295, 10657, 1954, 286, 500, 380, 1568, 300, 309, 311, 1391, 886], "temperature": 0.0, "avg_logprob": -0.17684360426299425, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.00012372755736578256}, {"id": 235, "seek": 156976, "start": 1584.48, "end": 1597.12, "text": " quiet and you see there we can then start playing about with things like the the voices that we", "tokens": [5677, 293, 291, 536, 456, 321, 393, 550, 722, 2433, 466, 365, 721, 411, 264, 264, 9802, 300, 321], "temperature": 0.0, "avg_logprob": -0.17684360426299425, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.00012372755736578256}, {"id": 236, "seek": 159712, "start": 1597.12, "end": 1605.04, "text": " we assign to those okay so I'll just touch on very briefly because time is getting to the end", "tokens": [321, 6269, 281, 729, 1392, 370, 286, 603, 445, 2557, 322, 588, 10515, 570, 565, 307, 1242, 281, 264, 917], "temperature": 0.0, "avg_logprob": -0.1462491989135742, "compression_ratio": 1.64, "no_speech_prob": 5.498976679518819e-05}, {"id": 237, "seek": 159712, "start": 1605.04, "end": 1611.28, "text": " and so I'll just touch very briefly on the timing and concurrency so the CP obviously we need to", "tokens": [293, 370, 286, 603, 445, 2557, 588, 10515, 322, 264, 10822, 293, 23702, 10457, 370, 264, 22431, 2745, 321, 643, 281], "temperature": 0.0, "avg_logprob": -0.1462491989135742, "compression_ratio": 1.64, "no_speech_prob": 5.498976679518819e-05}, {"id": 238, "seek": 159712, "start": 1611.84, "end": 1619.9199999999998, "text": " maintain it at a kind of our desired instruction rate so the way I do this is I introduce pauses", "tokens": [6909, 309, 412, 257, 733, 295, 527, 14721, 10951, 3314, 370, 264, 636, 286, 360, 341, 307, 286, 5366, 2502, 8355], "temperature": 0.0, "avg_logprob": -0.1462491989135742, "compression_ratio": 1.64, "no_speech_prob": 5.498976679518819e-05}, {"id": 239, "seek": 161992, "start": 1619.92, "end": 1627.04, "text": " and but then we want to be able to accurately measure those pauses and we also need to accurately", "tokens": [293, 457, 550, 321, 528, 281, 312, 1075, 281, 20095, 3481, 729, 2502, 8355, 293, 321, 611, 643, 281, 20095], "temperature": 0.0, "avg_logprob": -0.08805336897400604, "compression_ratio": 1.737327188940092, "no_speech_prob": 5.230138049228117e-05}, {"id": 240, "seek": 161992, "start": 1627.04, "end": 1632.4, "text": " measure the timings between the frames that were that we're sending and there are there's", "tokens": [3481, 264, 524, 1109, 1296, 264, 12083, 300, 645, 300, 321, 434, 7750, 293, 456, 366, 456, 311], "temperature": 0.0, "avg_logprob": -0.08805336897400604, "compression_ratio": 1.737327188940092, "no_speech_prob": 5.230138049228117e-05}, {"id": 241, "seek": 161992, "start": 1632.4, "end": 1640.0, "text": " obviously standard APIs in in Java to do this a little issue that I did come across the standard", "tokens": [2745, 3832, 21445, 294, 294, 10745, 281, 360, 341, 257, 707, 2734, 300, 286, 630, 808, 2108, 264, 3832], "temperature": 0.0, "avg_logprob": -0.08805336897400604, "compression_ratio": 1.737327188940092, "no_speech_prob": 5.230138049228117e-05}, {"id": 242, "seek": 161992, "start": 1640.0, "end": 1644.0800000000002, "text": " executor framework that we'd normally use for doing this so here we say right okay I want to", "tokens": [7568, 284, 8388, 300, 321, 1116, 5646, 764, 337, 884, 341, 370, 510, 321, 584, 558, 1392, 286, 528, 281], "temperature": 0.0, "avg_logprob": -0.08805336897400604, "compression_ratio": 1.737327188940092, "no_speech_prob": 5.230138049228117e-05}, {"id": 243, "seek": 164408, "start": 1644.08, "end": 1650.72, "text": " frame every every 60th of the second depending on your platform you can actually in practice get", "tokens": [3920, 633, 633, 4060, 392, 295, 264, 1150, 5413, 322, 428, 3663, 291, 393, 767, 294, 3124, 483], "temperature": 0.0, "avg_logprob": -0.16116181015968323, "compression_ratio": 1.5567567567567568, "no_speech_prob": 3.9162434404715896e-05}, {"id": 244, "seek": 164408, "start": 1650.72, "end": 1660.0, "text": " quite erratic intervals between between between the the events so you can see in particular on", "tokens": [1596, 1189, 25198, 26651, 1296, 1296, 1296, 264, 264, 3931, 370, 291, 393, 536, 294, 1729, 322], "temperature": 0.0, "avg_logprob": -0.16116181015968323, "compression_ratio": 1.5567567567567568, "no_speech_prob": 3.9162434404715896e-05}, {"id": 245, "seek": 164408, "start": 1660.0, "end": 1666.56, "text": " macOS I find you could get this kind of 20 error so this is just just one experiment for example", "tokens": [7912, 4367, 286, 915, 291, 727, 483, 341, 733, 295, 945, 6713, 370, 341, 307, 445, 445, 472, 5120, 337, 1365], "temperature": 0.0, "avg_logprob": -0.16116181015968323, "compression_ratio": 1.5567567567567568, "no_speech_prob": 3.9162434404715896e-05}, {"id": 246, "seek": 166656, "start": 1666.56, "end": 1675.6, "text": " if we and what I luckily found was that if we request low low sleep interval with the accuracy", "tokens": [498, 321, 293, 437, 286, 22880, 1352, 390, 300, 498, 321, 5308, 2295, 2295, 2817, 15035, 365, 264, 14170], "temperature": 0.0, "avg_logprob": -0.1262376918349155, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.3438536370813381e-05}, {"id": 247, "seek": 166656, "start": 1675.6, "end": 1683.2, "text": " is actually better for low sleep intervals than the higher sleep intervals and it seems to it", "tokens": [307, 767, 1101, 337, 2295, 2817, 26651, 813, 264, 2946, 2817, 26651, 293, 309, 2544, 281, 309], "temperature": 0.0, "avg_logprob": -0.1262376918349155, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.3438536370813381e-05}, {"id": 248, "seek": 166656, "start": 1683.2, "end": 1688.8799999999999, "text": " seems to max out a particular amount I'm not exactly sure of the underlying reason for that", "tokens": [2544, 281, 11469, 484, 257, 1729, 2372, 286, 478, 406, 2293, 988, 295, 264, 14217, 1778, 337, 300], "temperature": 0.0, "avg_logprob": -0.1262376918349155, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.3438536370813381e-05}, {"id": 249, "seek": 166656, "start": 1688.8799999999999, "end": 1692.8799999999999, "text": " it was to meet in Darwin but then what this leads to is we can kind of come with depending on the", "tokens": [309, 390, 281, 1677, 294, 30233, 457, 550, 437, 341, 6689, 281, 307, 321, 393, 733, 295, 808, 365, 5413, 322, 264], "temperature": 0.0, "avg_logprob": -0.1262376918349155, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.3438536370813381e-05}, {"id": 250, "seek": 169288, "start": 1692.88, "end": 1699.44, "text": " platform we can come up with a different strategy for maintaining accurate timing and a challenge", "tokens": [3663, 321, 393, 808, 493, 365, 257, 819, 5206, 337, 14916, 8559, 10822, 293, 257, 3430], "temperature": 0.0, "avg_logprob": -0.1781470469939403, "compression_ratio": 1.7534883720930232, "no_speech_prob": 7.796338650223333e-06}, {"id": 251, "seek": 169288, "start": 1700.0, "end": 1705.1200000000001, "text": " you know it's a perpetual challenge with Java really is then that the the the best strategy", "tokens": [291, 458, 309, 311, 257, 48216, 3430, 365, 10745, 534, 307, 550, 300, 264, 264, 264, 1151, 5206], "temperature": 0.0, "avg_logprob": -0.1781470469939403, "compression_ratio": 1.7534883720930232, "no_speech_prob": 7.796338650223333e-06}, {"id": 252, "seek": 169288, "start": 1705.1200000000001, "end": 1712.8000000000002, "text": " will will depend on the depend on the platform very briefly data manipulation which sometimes", "tokens": [486, 486, 5672, 322, 264, 5672, 322, 264, 3663, 588, 10515, 1412, 26475, 597, 2171], "temperature": 0.0, "avg_logprob": -0.1781470469939403, "compression_ratio": 1.7534883720930232, "no_speech_prob": 7.796338650223333e-06}, {"id": 253, "seek": 169288, "start": 1712.8000000000002, "end": 1719.92, "text": " something a bit scared of in Java we all of the types are right well they're generally signed", "tokens": [746, 257, 857, 5338, 295, 294, 10745, 321, 439, 295, 264, 3467, 366, 558, 731, 436, 434, 5101, 8175], "temperature": 0.0, "avg_logprob": -0.1781470469939403, "compression_ratio": 1.7534883720930232, "no_speech_prob": 7.796338650223333e-06}, {"id": 254, "seek": 171992, "start": 1719.92, "end": 1725.3600000000001, "text": " char is unsigned but they're generally fixed width and signed we can't do what we can in", "tokens": [1290, 307, 2693, 16690, 457, 436, 434, 5101, 6806, 11402, 293, 8175, 321, 393, 380, 360, 437, 321, 393, 294], "temperature": 0.0, "avg_logprob": -0.16583384559268044, "compression_ratio": 1.8860759493670887, "no_speech_prob": 4.1817496821749955e-05}, {"id": 255, "seek": 171992, "start": 1725.3600000000001, "end": 1730.0, "text": " seeing other languages and defining our own types and so one way to work around this one", "tokens": [2577, 661, 8650, 293, 17827, 527, 1065, 3467, 293, 370, 472, 636, 281, 589, 926, 341, 472], "temperature": 0.0, "avg_logprob": -0.16583384559268044, "compression_ratio": 1.8860759493670887, "no_speech_prob": 4.1817496821749955e-05}, {"id": 256, "seek": 171992, "start": 1730.0, "end": 1734.96, "text": " want to do things like register access and the audio data is the byte buffer is generally", "tokens": [528, 281, 360, 721, 411, 7280, 2105, 293, 264, 6278, 1412, 307, 264, 40846, 21762, 307, 5101], "temperature": 0.0, "avg_logprob": -0.16583384559268044, "compression_ratio": 1.8860759493670887, "no_speech_prob": 4.1817496821749955e-05}, {"id": 257, "seek": 171992, "start": 1735.6000000000001, "end": 1742.3200000000002, "text": " the kind of the easiest way to do that and you'll notice that when we want when we want bytes", "tokens": [264, 733, 295, 264, 12889, 636, 281, 360, 300, 293, 291, 603, 3449, 300, 562, 321, 528, 562, 321, 528, 36088], "temperature": 0.0, "avg_logprob": -0.16583384559268044, "compression_ratio": 1.8860759493670887, "no_speech_prob": 4.1817496821749955e-05}, {"id": 258, "seek": 171992, "start": 1742.3200000000002, "end": 1747.1200000000001, "text": " because byte the byte type is signed so if on an unsigned byte then we would normally", "tokens": [570, 40846, 264, 40846, 2010, 307, 8175, 370, 498, 322, 364, 2693, 16690, 40846, 550, 321, 576, 5646], "temperature": 0.0, "avg_logprob": -0.16583384559268044, "compression_ratio": 1.8860759493670887, "no_speech_prob": 4.1817496821749955e-05}, {"id": 259, "seek": 174712, "start": 1747.12, "end": 1754.3999999999999, "text": " and promote it to an int and then we can basically undo the ff and lock lock off the lock lock off", "tokens": [293, 9773, 309, 281, 364, 560, 293, 550, 321, 393, 1936, 23779, 264, 283, 69, 293, 4017, 4017, 766, 264, 4017, 4017, 766], "temperature": 0.0, "avg_logprob": -0.20493244171142577, "compression_ratio": 1.861904761904762, "no_speech_prob": 4.5385728299152106e-05}, {"id": 260, "seek": 174712, "start": 1754.3999999999999, "end": 1761.52, "text": " the the lowest bytes and then so there's just a I'll just skip further and there's just a question", "tokens": [264, 264, 12437, 36088, 293, 550, 370, 456, 311, 445, 257, 286, 603, 445, 10023, 3052, 293, 456, 311, 445, 257, 1168], "temperature": 0.0, "avg_logprob": -0.20493244171142577, "compression_ratio": 1.861904761904762, "no_speech_prob": 4.5385728299152106e-05}, {"id": 261, "seek": 174712, "start": 1761.52, "end": 1767.36, "text": " with that about well how do we check that the jit compiler is doing what we need to do and so I'll", "tokens": [365, 300, 466, 731, 577, 360, 321, 1520, 300, 264, 361, 270, 31958, 307, 884, 437, 321, 643, 281, 360, 293, 370, 286, 603], "temperature": 0.0, "avg_logprob": -0.20493244171142577, "compression_ratio": 1.861904761904762, "no_speech_prob": 4.5385728299152106e-05}, {"id": 262, "seek": 174712, "start": 1767.36, "end": 1773.9199999999998, "text": " just let step forward slightly and what we can actually do we can ask it yeah so we can we can", "tokens": [445, 718, 1823, 2128, 4748, 293, 437, 321, 393, 767, 360, 321, 393, 1029, 309, 1338, 370, 321, 393, 321, 393], "temperature": 0.0, "avg_logprob": -0.20493244171142577, "compression_ratio": 1.861904761904762, "no_speech_prob": 4.5385728299152106e-05}, {"id": 263, "seek": 177392, "start": 1773.92, "end": 1778.64, "text": " ask it to dump out the the the jit compiled assembler and then we can check if some of those", "tokens": [1029, 309, 281, 11430, 484, 264, 264, 264, 361, 270, 36548, 8438, 1918, 293, 550, 321, 393, 1520, 498, 512, 295, 729], "temperature": 0.0, "avg_logprob": -0.0807596990995318, "compression_ratio": 1.7471698113207548, "no_speech_prob": 1.5138120943447575e-05}, {"id": 264, "seek": 177392, "start": 1778.64, "end": 1786.0800000000002, "text": " optimizations are actually going in so this was very simple test I set up it's basically", "tokens": [5028, 14455, 366, 767, 516, 294, 370, 341, 390, 588, 2199, 1500, 286, 992, 493, 309, 311, 1936], "temperature": 0.0, "avg_logprob": -0.0807596990995318, "compression_ratio": 1.7471698113207548, "no_speech_prob": 1.5138120943447575e-05}, {"id": 265, "seek": 177392, "start": 1786.0800000000002, "end": 1792.24, "text": " it's iterating through repeatedly effectively writing a word and then reading it from from a", "tokens": [309, 311, 17138, 990, 807, 18227, 8659, 3579, 257, 1349, 293, 550, 3760, 309, 490, 490, 257], "temperature": 0.0, "avg_logprob": -0.0807596990995318, "compression_ratio": 1.7471698113207548, "no_speech_prob": 1.5138120943447575e-05}, {"id": 266, "seek": 177392, "start": 1792.24, "end": 1796.72, "text": " byte buffer yeah this obviously is slightly contrived this is you know really the kind of the", "tokens": [40846, 21762, 1338, 341, 2745, 307, 4748, 660, 470, 937, 341, 307, 291, 458, 534, 264, 733, 295, 264], "temperature": 0.0, "avg_logprob": -0.0807596990995318, "compression_ratio": 1.7471698113207548, "no_speech_prob": 1.5138120943447575e-05}, {"id": 267, "seek": 177392, "start": 1796.72, "end": 1801.04, "text": " contrived corner case example but it kind of illustrates the the kind of thing that's possible", "tokens": [660, 470, 937, 4538, 1389, 1365, 457, 309, 733, 295, 41718, 264, 264, 733, 295, 551, 300, 311, 1944], "temperature": 0.0, "avg_logprob": -0.0807596990995318, "compression_ratio": 1.7471698113207548, "no_speech_prob": 1.5138120943447575e-05}, {"id": 268, "seek": 180104, "start": 1801.04, "end": 1806.8, "text": " yeah so I'm effectively that bts effectively writing a two byte unsigned value into there", "tokens": [1338, 370, 286, 478, 8659, 300, 272, 1373, 8659, 3579, 257, 732, 40846, 2693, 16690, 2158, 666, 456], "temperature": 0.0, "avg_logprob": -0.0724343238992894, "compression_ratio": 1.8160377358490567, "no_speech_prob": 8.317429092130624e-06}, {"id": 269, "seek": 180104, "start": 1806.8, "end": 1812.24, "text": " via a byte buffer so it looks like I'm creating a byte buffer setting values on it calling a method", "tokens": [5766, 257, 40846, 21762, 370, 309, 1542, 411, 286, 478, 4084, 257, 40846, 21762, 3287, 4190, 322, 309, 5141, 257, 3170], "temperature": 0.0, "avg_logprob": -0.0724343238992894, "compression_ratio": 1.8160377358490567, "no_speech_prob": 8.317429092130624e-06}, {"id": 270, "seek": 180104, "start": 1812.24, "end": 1819.76, "text": " on it but by the time we get down to the actual jit compiled assembly code in the best case we're", "tokens": [322, 309, 457, 538, 264, 565, 321, 483, 760, 281, 264, 3539, 361, 270, 36548, 12103, 3089, 294, 264, 1151, 1389, 321, 434], "temperature": 0.0, "avg_logprob": -0.0724343238992894, "compression_ratio": 1.8160377358490567, "no_speech_prob": 8.317429092130624e-06}, {"id": 271, "seek": 180104, "start": 1819.76, "end": 1825.76, "text": " actually not that just compiles down into a we are storing a half word in there and so that's the", "tokens": [767, 406, 300, 445, 715, 4680, 760, 666, 257, 321, 366, 26085, 257, 1922, 1349, 294, 456, 293, 370, 300, 311, 264], "temperature": 0.0, "avg_logprob": -0.0724343238992894, "compression_ratio": 1.8160377358490567, "no_speech_prob": 8.317429092130624e-06}, {"id": 272, "seek": 182576, "start": 1825.76, "end": 1831.28, "text": " kind of thing that we can that we can do to kind of check for those things okay and I think we're", "tokens": [733, 295, 551, 300, 321, 393, 300, 321, 393, 360, 281, 733, 295, 1520, 337, 729, 721, 1392, 293, 286, 519, 321, 434], "temperature": 0.0, "avg_logprob": -0.18511729013352168, "compression_ratio": 1.6726457399103138, "no_speech_prob": 1.6034893633332103e-05}, {"id": 273, "seek": 182576, "start": 1831.92, "end": 1837.04, "text": " skipped to the there we go yeah so mentions yeah the method those method calls are completely", "tokens": [30193, 281, 264, 456, 321, 352, 1338, 370, 23844, 1338, 264, 3170, 729, 3170, 5498, 366, 2584], "temperature": 0.0, "avg_logprob": -0.18511729013352168, "compression_ratio": 1.6726457399103138, "no_speech_prob": 1.6034893633332103e-05}, {"id": 274, "seek": 182576, "start": 1837.04, "end": 1843.2, "text": " optimized out okay so so there you go so in conclusion using those various APIs together", "tokens": [26941, 484, 1392, 370, 370, 456, 291, 352, 370, 294, 10063, 1228, 729, 3683, 21445, 1214], "temperature": 0.0, "avg_logprob": -0.18511729013352168, "compression_ratio": 1.6726457399103138, "no_speech_prob": 1.6034893633332103e-05}, {"id": 275, "seek": 182576, "start": 1843.2, "end": 1849.76, "text": " we can write them in Java a few pros and cons caveats around the different platform behavior", "tokens": [321, 393, 2464, 552, 294, 10745, 257, 1326, 6267, 293, 1014, 11730, 1720, 926, 264, 819, 3663, 5223], "temperature": 0.0, "avg_logprob": -0.18511729013352168, "compression_ratio": 1.6726457399103138, "no_speech_prob": 1.6034893633332103e-05}, {"id": 276, "seek": 184976, "start": 1849.76, "end": 1854.8799999999999, "text": " a few things that still to add in here this is this is very much kind of version one", "tokens": [257, 1326, 721, 300, 920, 281, 909, 294, 510, 341, 307, 341, 307, 588, 709, 733, 295, 3037, 472], "temperature": 0.0, "avg_logprob": -0.13994311351402133, "compression_ratio": 1.697674418604651, "no_speech_prob": 6.839481557108229e-06}, {"id": 277, "seek": 184976, "start": 1856.56, "end": 1863.44, "text": " however it was at the point where it will actually run quite a lot of the spectrum", "tokens": [4461, 309, 390, 412, 264, 935, 689, 309, 486, 767, 1190, 1596, 257, 688, 295, 264, 11143], "temperature": 0.0, "avg_logprob": -0.13994311351402133, "compression_ratio": 1.697674418604651, "no_speech_prob": 6.839481557108229e-06}, {"id": 278, "seek": 184976, "start": 1863.44, "end": 1869.36, "text": " master system software if anyone's curious I've got initially released there on github", "tokens": [4505, 1185, 4722, 498, 2878, 311, 6369, 286, 600, 658, 9105, 4736, 456, 322, 290, 355, 836], "temperature": 0.0, "avg_logprob": -0.13994311351402133, "compression_ratio": 1.697674418604651, "no_speech_prob": 6.839481557108229e-06}, {"id": 279, "seek": 184976, "start": 1869.36, "end": 1873.68, "text": " there's going to be source code and further improvements on the way so watch that repo as", "tokens": [456, 311, 516, 281, 312, 4009, 3089, 293, 3052, 13797, 322, 264, 636, 370, 1159, 300, 49040, 382], "temperature": 0.0, "avg_logprob": -0.13994311351402133, "compression_ratio": 1.697674418604651, "no_speech_prob": 6.839481557108229e-06}, {"id": 280, "seek": 184976, "start": 1873.68, "end": 1879.12, "text": " they say a few references there that people may or may not have come across this book here by", "tokens": [436, 584, 257, 1326, 15400, 456, 300, 561, 815, 420, 815, 406, 362, 808, 2108, 341, 1446, 510, 538], "temperature": 0.0, "avg_logprob": -0.13994311351402133, "compression_ratio": 1.697674418604651, "no_speech_prob": 6.839481557108229e-06}, {"id": 281, "seek": 187912, "start": 1879.12, "end": 1885.6, "text": " Chris Smith is I think kind of a remarkable piece of work about the kind of the very kind of low", "tokens": [6688, 8538, 307, 286, 519, 733, 295, 257, 12802, 2522, 295, 589, 466, 264, 733, 295, 264, 588, 733, 295, 2295], "temperature": 0.0, "avg_logprob": -0.1478745142618815, "compression_ratio": 1.4809160305343512, "no_speech_prob": 3.7223489925963804e-05}, {"id": 282, "seek": 187912, "start": 1885.6, "end": 1891.28, "text": " level details of how the spectrum works and the usual you know kind of reference guides that over", "tokens": [1496, 4365, 295, 577, 264, 11143, 1985, 293, 264, 7713, 291, 458, 733, 295, 6408, 17007, 300, 670], "temperature": 0.0, "avg_logprob": -0.1478745142618815, "compression_ratio": 1.4809160305343512, "no_speech_prob": 3.7223489925963804e-05}, {"id": 283, "seek": 189128, "start": 1891.28, "end": 1909.76, "text": " the years have surfaced on the web and so with that I think I'll hand back", "tokens": [50364, 264, 924, 362, 9684, 3839, 322, 264, 3670, 293, 370, 365, 300, 286, 519, 286, 603, 1011, 646, 51288], "temperature": 0.0, "avg_logprob": -0.1752185821533203, "compression_ratio": 1.0277777777777777, "no_speech_prob": 9.542141015117522e-06}], "language": "en"}