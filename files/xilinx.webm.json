{"text": " All right. We are ready. We fixed it. We broke again and we fixed it again or I didn't do anything. The green shirts did it. All right, so next we have Francisco Iglesias. Now we're going to start building. Yes, yes. And to me at least, I'm just going to rant, but to me because it's always interesting to see how emulation is used in the enterprise, in the, you know, people's money world. Or not, or not. Let's see how it goes. All right. Okay. Hi everybody and welcome to this presentation. My name is Francisco Denon. I work at AMD with QMU Development and System C Development. Okay. So I'll try. I have a little threat problem, but okay. So and today I will be speaking about our open source cold simulation solution and the agenda of the talk then. It is, first, I will give a short introduction into what cold simulation is. And thereafter, I will be speaking a little about the AMD silence QMU itself and proceed with introducing live system C. Tell them, as you see, and since the repository system C, tell them closing demo. And lastly, I will show a short demo where QMU is co-simulating with a couple of RTL memories and using the infrastructure live system C. Tell them, as you see. Sorry, can you speak up a little bit more? Even more. Yeah. So in this slide, I tried to capture the one of the trade-offs that is done when you choose simulation technique for your RTL and it is the trade-off between speed and design capacity visibility. And we see that the three techniques that is used for RTL development, RTL simulation or simulation, FPGA prototyping, they all come with a different cost on the simulation speed. And on the left side here also, we have the virtual platforms that are fast and great for software development, but they do not help with pure RTL debugging or development. So an approach that can be used here to try to leverage from the two worlds here is to place a portion of interest in the portion of the RTL on one of the RTL simulation techniques and then keep the rest of the system modeled in one of the virtual platforms. And this way you will then keep most of the system simulated at a quite fast speed while still keeping the visibility to this portion of RTL that is in focus. So this is what we mean with co-simulation that you are mixing these two worlds. In our open source co-sim solution, we have the SILINX QMU where we model the processing systems of the FPGAs and then we have system C that we use for modeling the programmable logic. And LIM system C, the LMSC, it has bridges that allows us to connect the system C models of RTL and also FPGA prototypes and the hardware emulators. I will be speaking more about the bridges shortly. But first, a little about the AMD SILINX QMU fork. So this is where we have our improved support and modeling for the SILINX platforms then. And today it is based on the mainline QMU version 7.1.0 and we upgrade it around once a year to a more recent mainline version. And the AMD SILINX QMU then has some extra functionality. One of these is that it can create machines through a hardware DTB. And this allows us for having a more flexible machine creation and modification process. And the AMD SILINX QMU also has an implementation of the remote port protocol. This protocol is the protocol that is used when we co-simulate both different QMU architectures and also when we co-simulate with system C. This is an overview of this where we see an AR64 QMU co-simulating with a microblaze QMU and also with a system C application on the side. Continuing with the LibSystem C. This is a project that was started by Edgar Iglesias in 2016 and the license is MIT. One of the core features is that it has the remote port protocol implementation in system C that is then used for connecting with QMU and co-simulating with QMU. And going together with this, it also has system C wrappers, what we call. These are for wrappers for our SYNX in Campyversal, Rosonetten. And the short description of a wrapper is that it wraps QMU into a system C module so that for the rest of the system C application, the interaction from the other modules with QMU is done through the standard system C interfaces as TLM and signals, etc. The library also has TLM bridges into AXE4, AXE3, AXE4 Lite, EPBAs, A-slite, CHI, CXS, TLP, XDMII. And a bridge converts the communication from the TLM site into the protocol-specific site. So here's an example of the TLM to AXE bridge, which translates TLM into AXE. And these bridges then is what allows us to co-simulate, for example, in this case an AXE, DUT, that has been generated from RTL. So we see here that the system C wrapper communicates through TLM to the bridge that then converts this TLM to AXE signaling. And communicates through this AXE signaling with the AXE DUT then. And this is how QMU on the left-hand side then can access the DUT. There are also RTL bridges in the library for AXE4, 3, AXE4 Lite, AXE4, CHI and CXS. And the RTL bridges have two components. The first one is the bridge itself that is placed on the FPGA or in a Harvard emulator. And the other component is the driver of the bridge that is placed on the system C application software side. So the way it goes is that TLM transaction enters the driver, which then configures the RTL bridge to replicate this transaction as an AXE transaction, for example, inside the FPGA or the Harvard emulator. And this is an example of when these bridges are used with an Albeo U250 card, where we have between the bridge and the bridge driver and the bridge, we have some infrastructure there. The fire PCIe next year made them. And one can see these components as a transport channel where the driver accesses go through towards the RTL bridge. And looking at how it looks inside a hardware emulator is very similar. But instead of PCIe and here the vendor bridges are used for this transport. In the library we also have protocol checkers for AXE 4, AXE 3, AXE 4 Lite and AXE Lite CHI. And the protocol checkers, they are connected to the signals and monitors the signals and try to find issues, violations to the protocols then. Also in the library we have modules that can be used for generating AXE traffic. So we have AXE, AXE LiteMasters and AXE Interconnect. So the masters here, they generate ace transactions towards the interconnect and the interconnect will then when required snoop the other masters and otherwise forward the transaction to the TLM memory at the bottom. We have a similar setup for CHI where we have request nodes that generate CHI traffic and a CHI interconnect that does snoopy when required or forwards the request to a slave node at the bottom. Also in the library we have a tool called PySimGen that can generate simulations from IP exact descriptions. And there's a basic TLM traffic generator that one can configure to generate randomized traffic or provide a description of transactions to issue. And there are some simple, easy co-simulation examples that one can have a look at as a starting point. There's a lot of documentation for all the components and we also have an extensive test suite. The system seat TLM CoSIM demo is also a project that was started by Edgar Iglesias in 2016 and the license sense is MIT. And this contains several QMU co-simulation demos where we co-simulate the SyncMP QMU and VERSAL QMU with PL model on the system seat side and there's also a risk five demo where a risk five QMU is co-simulating with an open source. Internet controller core on the system seat side. We have several X86 QMU that co-simulate with PCIe endpoint models on the system seat side. And there is also a PySimGen demo where the system seat side of the co-simulation has been completely generated by from IP exact. And these demos they serve, they demonstrate how to embed the live system seat library in an own project and how to use it. So for the demo that I'll show now, it is a, here I will be launching a Linux system on the SyncMP QMU and it will be co-simulating with a system seat app where that includes a couple of RTL memories. One of the RTL memories is XC4 interface and the second one has a XC4 light interface. On the XC4 light signals there's a protocol checker connected and I also modified the XC4 light memory here and I injected that error so that we can see that the protocol checker finds this. So let's see then. So we see here that on this left terminal this is where QMU is being launched and on the yellow terminal on the top is where the system seat application has been launched. And we will start by doing some accesses to the XC4 memory and thereafter here comes the accesses for the XC4 memory and then thereafter we will do an access towards the XC4 light memory that has an error in it. And here we see that the protocol checker found the error and outputted some description message. After the simulation you get a trace that we can inspect and we can see here, follow the access signals and look at the transactions just issued. See that it is the expected data that we're seeing in here and you can see those at the bottom here that these are the data that we were writing to the memory. Then the protocol checker's error is also connected to a signal in this case. So for the transaction that failed it can be found when this signal has been asserted. So this is seen at the bottom here where there is the asserted signal and then we can look into the transaction here and find the problem. And that is all what I have today. Thank you for listening. That's a dumb question which I'm known for. No, so because like I said at the beginning I'm very interested in how this works in enterprises and I'm curious how do you guys like decide a feature to be implemented? How do you plan that kind of stuff? Do you know how that works in the community or if you're in your basement? Do you mean like in QMU or in the system C or overall? So it ends up with me. Yes. So how do we decide the features that we implement? And it's actually the demand that drives this. So if we see that some team internally at AMD siblings needs a feature in QMU then we implement it. Or if we see if there's a feature that might be useful later forward going forward. Not right now but perhaps in a year or so that also then we will consider implementing it too. So and often it ends up that our demands are pretty similar to all other developer or all other demands. So if we do a feature, implement a feature, it often becomes useful for others as well. Not only for the silencs, AMD silencs in part. A small follow-up. You guys probably do Agile like the rest of the world. I'm curious like how do you guys refine the story like this in Agile service? And I'm very sorry. Okay, how do we use Agile development in this? I don't care about Agile. I really care about the refinements. I don't like Agile actually. Like how do you guys brainstorm together on a feature? What do you put on paper? Like it needs to be this but how do we do this? Because it's not always comparable to something that already exists with emulators. It's usually something that's never been done before. I'm really sorry about this question. I know it's a very good question and I have to admit it. I'm not sure if we have such a process that we're probably looking at here. We get a request in our group, implement. We need this feature from, for example, one of the RTL groups. They need a feature, they ask us and we implement it. So we don't have really a process where we kind of do this very Agile in that sense. This is our team. It might be different in other teams at AMD. So Chris, how do you get the system C model from Verilog? And does that also work for co-gen generated IP which might be implemented? So how do we get the system C model from Verilog? So there's an open source tool named Verilator that will Verilog and create the module for you. But it's not going to work for the co-gen generated IP which is encrypted and which Verilator cannot process. For that I'm not sure how to do that. Sorry for that. There is no free line. I don't have to speak on that because I have to admit that I'm mostly on the QMU development side. But if you ping me afterwards I can take your card and see if I can contact give you a correct contact or something. Is there something for VHDL as well? I think there are tools that do this. But if there is a tool that automatically generates a system C model from VHDL, there are tools apparently. I'm pretty sure there are too. But we have not used them. Are you limiting yourself to the synthesizable subset of system C or do you don't care? No, we don't limit ourselves to system C now. I'm coming from the world of open source software-defined radio. I have flow graphs where I have data processing blocks that are running in software. On an mpsox R64 core. What I want to do is I want to take a block and implement it in some RTL and get it to run on the fpga part. How does that work? I have some part of software that I want to be accelerated by an fpga accelerator. These tools you mean? Yes. In that case you could... Yes, how... Random acceleration implementation of software. How do I go from software acceleration to hardware implementation? I know how to write. Yes, yes. I have to admit that I myself am not an expert hardware engineer. I think that the way I would have done it is just to go ahead and create the world of code. With this tool it's very sweet because you can connect it to the QMU system. Just as a library and say, okay, I have this XE stream. Yes. Put it in there and I call C functions in the end, right? You can launch your real software in QMU that interacts with it. How do I exchange data with the library? What's the interfaces? I see internally it's here and it's called the system C, right? Yes, yes. You don't have to choose that. But what's on the surface? How do I get data in and out? How do you get data in and out, the simulators? Yeah. Perhaps I would have needed a better overview picture, but if you can get... How you get data in into your system C application. That's... We don't have any magic frills, but... So the remote port protocol is just a protocol that transfers... Transactions from QMU into the system C side or to another QMU. And so it's not really a way to... That will allow you to load in a bunch of data into the system C application. But... Any more questions? Did I answer your question? Yes, I think afterwards and I can... Okay, we don't have time. Thank you very much. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.0, "text": " All right. We are ready. We fixed it. We broke again and we fixed it again or I didn't do anything. The green shirts did it.", "tokens": [50364, 1057, 558, 13, 492, 366, 1919, 13, 492, 6806, 309, 13, 492, 6902, 797, 293, 321, 6806, 309, 797, 420, 286, 994, 380, 360, 1340, 13, 440, 3092, 20832, 630, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4006548190335615, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.7132670879364014}, {"id": 1, "seek": 0, "start": 12.0, "end": 16.0, "text": " All right, so next we have Francisco Iglesias. Now we're going to start building.", "tokens": [50964, 1057, 558, 11, 370, 958, 321, 362, 12279, 19271, 904, 4609, 13, 823, 321, 434, 516, 281, 722, 2390, 13, 51164], "temperature": 0.0, "avg_logprob": -0.4006548190335615, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.7132670879364014}, {"id": 2, "seek": 0, "start": 16.0, "end": 17.0, "text": " Yes, yes.", "tokens": [51164, 1079, 11, 2086, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4006548190335615, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.7132670879364014}, {"id": 3, "seek": 0, "start": 17.0, "end": 27.0, "text": " And to me at least, I'm just going to rant, but to me because it's always interesting to see how emulation is used in the enterprise, in the, you know, people's money world.", "tokens": [51214, 400, 281, 385, 412, 1935, 11, 286, 478, 445, 516, 281, 45332, 11, 457, 281, 385, 570, 309, 311, 1009, 1880, 281, 536, 577, 846, 2776, 307, 1143, 294, 264, 14132, 11, 294, 264, 11, 291, 458, 11, 561, 311, 1460, 1002, 13, 51714], "temperature": 0.0, "avg_logprob": -0.4006548190335615, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.7132670879364014}, {"id": 4, "seek": 2700, "start": 28.0, "end": 33.0, "text": " Or not, or not. Let's see how it goes. All right.", "tokens": [50414, 1610, 406, 11, 420, 406, 13, 961, 311, 536, 577, 309, 1709, 13, 1057, 558, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3000347209426592, "compression_ratio": 1.2905405405405406, "no_speech_prob": 0.0658164769411087}, {"id": 5, "seek": 2700, "start": 33.0, "end": 51.0, "text": " Okay. Hi everybody and welcome to this presentation. My name is Francisco Denon. I work at AMD with QMU Development and System C Development.", "tokens": [50664, 1033, 13, 2421, 2201, 293, 2928, 281, 341, 5860, 13, 1222, 1315, 307, 12279, 6458, 266, 13, 286, 589, 412, 34808, 365, 1249, 44, 52, 15041, 293, 8910, 383, 15041, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3000347209426592, "compression_ratio": 1.2905405405405406, "no_speech_prob": 0.0658164769411087}, {"id": 6, "seek": 5100, "start": 51.0, "end": 76.0, "text": " Okay. So I'll try. I have a little threat problem, but okay. So and today I will be speaking about our open source cold simulation solution and the agenda of the talk then.", "tokens": [50364, 1033, 13, 407, 286, 603, 853, 13, 286, 362, 257, 707, 4734, 1154, 11, 457, 1392, 13, 407, 293, 965, 286, 486, 312, 4124, 466, 527, 1269, 4009, 3554, 16575, 3827, 293, 264, 9829, 295, 264, 751, 550, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3176594667656477, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.04506727308034897}, {"id": 7, "seek": 7600, "start": 76.0, "end": 94.0, "text": " It is, first, I will give a short introduction into what cold simulation is. And thereafter, I will be speaking a little about the AMD silence QMU itself and proceed with introducing live system C.", "tokens": [50364, 467, 307, 11, 700, 11, 286, 486, 976, 257, 2099, 9339, 666, 437, 3554, 16575, 307, 13, 400, 38729, 11, 286, 486, 312, 4124, 257, 707, 466, 264, 34808, 12239, 1249, 44, 52, 2564, 293, 8991, 365, 15424, 1621, 1185, 383, 13, 51264], "temperature": 0.0, "avg_logprob": -0.3442155174587084, "compression_ratio": 1.3493150684931507, "no_speech_prob": 0.1794477254152298}, {"id": 8, "seek": 9400, "start": 94.0, "end": 117.0, "text": " Tell them, as you see, and since the repository system C, tell them closing demo. And lastly, I will show a short demo where QMU is co-simulating with a couple of RTL memories and using the infrastructure live system C.", "tokens": [50364, 5115, 552, 11, 382, 291, 536, 11, 293, 1670, 264, 25841, 1185, 383, 11, 980, 552, 10377, 10723, 13, 400, 16386, 11, 286, 486, 855, 257, 2099, 10723, 689, 1249, 44, 52, 307, 598, 12, 30937, 12162, 365, 257, 1916, 295, 21797, 43, 8495, 293, 1228, 264, 6896, 1621, 1185, 383, 13, 51514], "temperature": 0.0, "avg_logprob": -0.4652589389256069, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.1742122620344162}, {"id": 9, "seek": 11700, "start": 117.0, "end": 122.0, "text": " Tell them, as you see. Sorry, can you speak up a little bit more? Even more.", "tokens": [50364, 5115, 552, 11, 382, 291, 536, 13, 4919, 11, 393, 291, 1710, 493, 257, 707, 857, 544, 30, 2754, 544, 13, 50614], "temperature": 0.0, "avg_logprob": -0.48884239196777346, "compression_ratio": 1.0, "no_speech_prob": 0.14307664334774017}, {"id": 10, "seek": 12200, "start": 122.0, "end": 143.0, "text": " Yeah. So in this slide, I tried to capture the one of the trade-offs that is done when you choose simulation technique for your RTL and it is the trade-off between speed and design capacity visibility.", "tokens": [50364, 865, 13, 407, 294, 341, 4137, 11, 286, 3031, 281, 7983, 264, 472, 295, 264, 4923, 12, 19231, 300, 307, 1096, 562, 291, 2826, 16575, 6532, 337, 428, 21797, 43, 293, 309, 307, 264, 4923, 12, 4506, 1296, 3073, 293, 1715, 6042, 19883, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1813284158706665, "compression_ratio": 1.3767123287671232, "no_speech_prob": 0.15869717299938202}, {"id": 11, "seek": 14300, "start": 143.0, "end": 156.0, "text": " And we see that the three techniques that is used for RTL development, RTL simulation or simulation, FPGA prototyping, they all come with a different cost on the simulation speed.", "tokens": [50364, 400, 321, 536, 300, 264, 1045, 7512, 300, 307, 1143, 337, 21797, 43, 3250, 11, 21797, 43, 16575, 420, 16575, 11, 36655, 12570, 46219, 3381, 11, 436, 439, 808, 365, 257, 819, 2063, 322, 264, 16575, 3073, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1333950863608831, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.3243464231491089}, {"id": 12, "seek": 14300, "start": 156.0, "end": 171.0, "text": " And on the left side here also, we have the virtual platforms that are fast and great for software development, but they do not help with pure RTL debugging or development.", "tokens": [51014, 400, 322, 264, 1411, 1252, 510, 611, 11, 321, 362, 264, 6374, 9473, 300, 366, 2370, 293, 869, 337, 4722, 3250, 11, 457, 436, 360, 406, 854, 365, 6075, 21797, 43, 45592, 420, 3250, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1333950863608831, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.3243464231491089}, {"id": 13, "seek": 17100, "start": 171.0, "end": 199.0, "text": " So an approach that can be used here to try to leverage from the two worlds here is to place a portion of interest in the portion of the RTL on one of the RTL simulation techniques and then keep the rest of the system modeled in one of the virtual platforms.", "tokens": [50364, 407, 364, 3109, 300, 393, 312, 1143, 510, 281, 853, 281, 13982, 490, 264, 732, 13401, 510, 307, 281, 1081, 257, 8044, 295, 1179, 294, 264, 8044, 295, 264, 21797, 43, 322, 472, 295, 264, 21797, 43, 16575, 7512, 293, 550, 1066, 264, 1472, 295, 264, 1185, 37140, 294, 472, 295, 264, 6374, 9473, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12181656239396435, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.04732127487659454}, {"id": 14, "seek": 19900, "start": 200.0, "end": 218.0, "text": " And this way you will then keep most of the system simulated at a quite fast speed while still keeping the visibility to this portion of RTL that is in focus.", "tokens": [50414, 400, 341, 636, 291, 486, 550, 1066, 881, 295, 264, 1185, 41713, 412, 257, 1596, 2370, 3073, 1339, 920, 5145, 264, 19883, 281, 341, 8044, 295, 21797, 43, 300, 307, 294, 1879, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12077070537366365, "compression_ratio": 1.5126582278481013, "no_speech_prob": 0.05933434143662453}, {"id": 15, "seek": 19900, "start": 219.0, "end": 223.0, "text": " So this is what we mean with co-simulation that you are mixing these two worlds.", "tokens": [51364, 407, 341, 307, 437, 321, 914, 365, 598, 12, 30937, 2776, 300, 291, 366, 11983, 613, 732, 13401, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12077070537366365, "compression_ratio": 1.5126582278481013, "no_speech_prob": 0.05933434143662453}, {"id": 16, "seek": 22900, "start": 229.0, "end": 250.0, "text": " In our open source co-sim solution, we have the SILINX QMU where we model the processing systems of the FPGAs and then we have system C that we use for modeling the programmable logic.", "tokens": [50364, 682, 527, 1269, 4009, 598, 12, 30937, 3827, 11, 321, 362, 264, 318, 4620, 1464, 55, 1249, 44, 52, 689, 321, 2316, 264, 9007, 3652, 295, 264, 36655, 38, 10884, 293, 550, 321, 362, 1185, 383, 300, 321, 764, 337, 15983, 264, 37648, 712, 9952, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20562711715698243, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.045239076018333435}, {"id": 17, "seek": 25000, "start": 251.0, "end": 268.0, "text": " And LIM system C, the LMSC, it has bridges that allows us to connect the system C models of RTL and also FPGA prototypes and the hardware emulators.", "tokens": [50414, 400, 441, 6324, 1185, 383, 11, 264, 441, 10288, 34, 11, 309, 575, 21114, 300, 4045, 505, 281, 1745, 264, 1185, 383, 5245, 295, 21797, 43, 293, 611, 36655, 12570, 42197, 293, 264, 8837, 846, 39265, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18105098436463554, "compression_ratio": 1.3266666666666667, "no_speech_prob": 0.14808976650238037}, {"id": 18, "seek": 25000, "start": 269.0, "end": 272.0, "text": " I will be speaking more about the bridges shortly.", "tokens": [51314, 286, 486, 312, 4124, 544, 466, 264, 21114, 13392, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18105098436463554, "compression_ratio": 1.3266666666666667, "no_speech_prob": 0.14808976650238037}, {"id": 19, "seek": 27200, "start": 273.0, "end": 283.0, "text": " But first, a little about the AMD SILINX QMU fork.", "tokens": [50414, 583, 700, 11, 257, 707, 466, 264, 34808, 318, 4620, 1464, 55, 1249, 44, 52, 17716, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14817047119140625, "compression_ratio": 1.1666666666666667, "no_speech_prob": 0.05188575014472008}, {"id": 20, "seek": 27200, "start": 284.0, "end": 295.0, "text": " So this is where we have our improved support and modeling for the SILINX platforms then.", "tokens": [50964, 407, 341, 307, 689, 321, 362, 527, 9689, 1406, 293, 15983, 337, 264, 318, 4620, 1464, 55, 9473, 550, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14817047119140625, "compression_ratio": 1.1666666666666667, "no_speech_prob": 0.05188575014472008}, {"id": 21, "seek": 29500, "start": 295.0, "end": 310.0, "text": " And today it is based on the mainline QMU version 7.1.0 and we upgrade it around once a year to a more recent mainline version.", "tokens": [50364, 400, 965, 309, 307, 2361, 322, 264, 2135, 1889, 1249, 44, 52, 3037, 1614, 13, 16, 13, 15, 293, 321, 11484, 309, 926, 1564, 257, 1064, 281, 257, 544, 5162, 2135, 1889, 3037, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1269573143550328, "compression_ratio": 1.2937062937062938, "no_speech_prob": 0.03512060269713402}, {"id": 22, "seek": 29500, "start": 311.0, "end": 316.0, "text": " And the AMD SILINX QMU then has some extra functionality.", "tokens": [51164, 400, 264, 34808, 318, 4620, 1464, 55, 1249, 44, 52, 550, 575, 512, 2857, 14980, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1269573143550328, "compression_ratio": 1.2937062937062938, "no_speech_prob": 0.03512060269713402}, {"id": 23, "seek": 31600, "start": 317.0, "end": 324.0, "text": " One of these is that it can create machines through a hardware DTB.", "tokens": [50414, 1485, 295, 613, 307, 300, 309, 393, 1884, 8379, 807, 257, 8837, 413, 51, 33, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12363593861208123, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.07744944840669632}, {"id": 24, "seek": 31600, "start": 325.0, "end": 331.0, "text": " And this allows us for having a more flexible machine creation and modification process.", "tokens": [50814, 400, 341, 4045, 505, 337, 1419, 257, 544, 11358, 3479, 8016, 293, 26747, 1399, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12363593861208123, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.07744944840669632}, {"id": 25, "seek": 31600, "start": 333.0, "end": 339.0, "text": " And the AMD SILINX QMU also has an implementation of the remote port protocol.", "tokens": [51214, 400, 264, 34808, 318, 4620, 1464, 55, 1249, 44, 52, 611, 575, 364, 11420, 295, 264, 8607, 2436, 10336, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12363593861208123, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.07744944840669632}, {"id": 26, "seek": 33900, "start": 340.0, "end": 354.0, "text": " This protocol is the protocol that is used when we co-simulate both different QMU architectures and also when we co-simulate with system C.", "tokens": [50414, 639, 10336, 307, 264, 10336, 300, 307, 1143, 562, 321, 598, 12, 30937, 5256, 1293, 819, 1249, 44, 52, 6331, 1303, 293, 611, 562, 321, 598, 12, 30937, 5256, 365, 1185, 383, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0921400431040171, "compression_ratio": 1.3365384615384615, "no_speech_prob": 0.023932678624987602}, {"id": 27, "seek": 35400, "start": 354.0, "end": 369.0, "text": " This is an overview of this where we see an AR64 QMU co-simulating with a microblaze QMU and also with a system C application on the side.", "tokens": [50364, 639, 307, 364, 12492, 295, 341, 689, 321, 536, 364, 8943, 19395, 1249, 44, 52, 598, 12, 30937, 12162, 365, 257, 4532, 36138, 1381, 1249, 44, 52, 293, 611, 365, 257, 1185, 383, 3861, 322, 264, 1252, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16305333092099145, "compression_ratio": 1.1694915254237288, "no_speech_prob": 0.03580471873283386}, {"id": 28, "seek": 36900, "start": 370.0, "end": 387.0, "text": " Continuing with the LibSystem C. This is a project that was started by Edgar Iglesias in 2016 and the license is MIT.", "tokens": [50414, 47585, 365, 264, 15834, 50, 9321, 383, 13, 639, 307, 257, 1716, 300, 390, 1409, 538, 42981, 19271, 904, 4609, 294, 6549, 293, 264, 10476, 307, 13100, 13, 51264], "temperature": 0.0, "avg_logprob": -0.32037147879600525, "compression_ratio": 1.0833333333333333, "no_speech_prob": 0.03760667145252228}, {"id": 29, "seek": 38700, "start": 388.0, "end": 401.0, "text": " One of the core features is that it has the remote port protocol implementation in system C that is then used for connecting with QMU and co-simulating with QMU.", "tokens": [50414, 1485, 295, 264, 4965, 4122, 307, 300, 309, 575, 264, 8607, 2436, 10336, 11420, 294, 1185, 383, 300, 307, 550, 1143, 337, 11015, 365, 1249, 44, 52, 293, 598, 12, 30937, 12162, 365, 1249, 44, 52, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09562013207412348, "compression_ratio": 1.3416666666666666, "no_speech_prob": 0.06600125879049301}, {"id": 30, "seek": 40100, "start": 402.0, "end": 407.0, "text": " And going together with this, it also has system C wrappers, what we call.", "tokens": [50414, 400, 516, 1214, 365, 341, 11, 309, 611, 575, 1185, 383, 7843, 15226, 11, 437, 321, 818, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3150652082342851, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.149257093667984}, {"id": 31, "seek": 40100, "start": 408.0, "end": 414.0, "text": " These are for wrappers for our SYNX in Campyversal, Rosonetten.", "tokens": [50714, 1981, 366, 337, 7843, 15226, 337, 527, 318, 22315, 55, 294, 9189, 88, 840, 304, 11, 11144, 266, 30759, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3150652082342851, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.149257093667984}, {"id": 32, "seek": 40100, "start": 414.0, "end": 425.0, "text": " And the short description of a wrapper is that it wraps QMU into a system C module so that for the rest of the system C application,", "tokens": [51014, 400, 264, 2099, 3855, 295, 257, 46906, 307, 300, 309, 25831, 1249, 44, 52, 666, 257, 1185, 383, 10088, 370, 300, 337, 264, 1472, 295, 264, 1185, 383, 3861, 11, 51564], "temperature": 0.0, "avg_logprob": -0.3150652082342851, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.149257093667984}, {"id": 33, "seek": 42500, "start": 426.0, "end": 438.0, "text": " the interaction from the other modules with QMU is done through the standard system C interfaces as TLM and signals, etc.", "tokens": [50414, 264, 9285, 490, 264, 661, 16679, 365, 1249, 44, 52, 307, 1096, 807, 264, 3832, 1185, 383, 28416, 382, 40277, 44, 293, 12354, 11, 5183, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18967857360839843, "compression_ratio": 1.1415094339622642, "no_speech_prob": 0.024452490732073784}, {"id": 34, "seek": 43800, "start": 439.0, "end": 459.0, "text": " The library also has TLM bridges into AXE4, AXE3, AXE4 Lite, EPBAs, A-slite, CHI, CXS, TLP, XDMII.", "tokens": [50414, 440, 6405, 611, 575, 40277, 44, 21114, 666, 316, 55, 36, 19, 11, 316, 55, 36, 18, 11, 316, 55, 36, 19, 32986, 11, 25330, 9295, 82, 11, 316, 12, 10418, 642, 11, 5995, 40, 11, 383, 55, 50, 11, 314, 45196, 11, 1783, 35, 13808, 40, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3418587904710036, "compression_ratio": 1.053763440860215, "no_speech_prob": 0.13495223224163055}, {"id": 35, "seek": 45900, "start": 459.0, "end": 471.0, "text": " And a bridge converts the communication from the TLM site into the protocol-specific site.", "tokens": [50364, 400, 257, 7283, 38874, 264, 6101, 490, 264, 40277, 44, 3621, 666, 264, 10336, 12, 29258, 3621, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17815794547398886, "compression_ratio": 1.3228346456692914, "no_speech_prob": 0.22445765137672424}, {"id": 36, "seek": 45900, "start": 471.0, "end": 478.0, "text": " So here's an example of the TLM to AXE bridge, which translates TLM into AXE.", "tokens": [50964, 407, 510, 311, 364, 1365, 295, 264, 40277, 44, 281, 316, 55, 36, 7283, 11, 597, 28468, 40277, 44, 666, 316, 55, 36, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17815794547398886, "compression_ratio": 1.3228346456692914, "no_speech_prob": 0.22445765137672424}, {"id": 37, "seek": 47800, "start": 479.0, "end": 498.0, "text": " And these bridges then is what allows us to co-simulate, for example, in this case an AXE, DUT, that has been generated from RTL.", "tokens": [50414, 400, 613, 21114, 550, 307, 437, 4045, 505, 281, 598, 12, 30937, 5256, 11, 337, 1365, 11, 294, 341, 1389, 364, 316, 55, 36, 11, 413, 8709, 11, 300, 575, 668, 10833, 490, 21797, 43, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18890615701675414, "compression_ratio": 1.1415929203539823, "no_speech_prob": 0.04303079470992088}, {"id": 38, "seek": 49800, "start": 499.0, "end": 510.0, "text": " So we see here that the system C wrapper communicates through TLM to the bridge that then converts this TLM to AXE signaling.", "tokens": [50414, 407, 321, 536, 510, 300, 264, 1185, 383, 46906, 3363, 1024, 807, 40277, 44, 281, 264, 7283, 300, 550, 38874, 341, 40277, 44, 281, 316, 55, 36, 38639, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1754959574285543, "compression_ratio": 1.5118110236220472, "no_speech_prob": 0.04753147065639496}, {"id": 39, "seek": 49800, "start": 510.0, "end": 517.0, "text": " And communicates through this AXE signaling with the AXE DUT then.", "tokens": [50964, 400, 3363, 1024, 807, 341, 316, 55, 36, 38639, 365, 264, 316, 55, 36, 413, 8709, 550, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1754959574285543, "compression_ratio": 1.5118110236220472, "no_speech_prob": 0.04753147065639496}, {"id": 40, "seek": 51700, "start": 518.0, "end": 526.0, "text": " And this is how QMU on the left-hand side then can access the DUT.", "tokens": [50414, 400, 341, 307, 577, 1249, 44, 52, 322, 264, 1411, 12, 5543, 1252, 550, 393, 2105, 264, 413, 8709, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14640894092497278, "compression_ratio": 1.188976377952756, "no_speech_prob": 0.015921082347631454}, {"id": 41, "seek": 51700, "start": 532.0, "end": 540.0, "text": " There are also RTL bridges in the library for AXE4, 3, AXE4 Lite, AXE4, CHI and CXS.", "tokens": [51114, 821, 366, 611, 21797, 43, 21114, 294, 264, 6405, 337, 316, 55, 36, 19, 11, 805, 11, 316, 55, 36, 19, 32986, 11, 316, 55, 36, 19, 11, 5995, 40, 293, 383, 55, 50, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14640894092497278, "compression_ratio": 1.188976377952756, "no_speech_prob": 0.015921082347631454}, {"id": 42, "seek": 54000, "start": 541.0, "end": 545.0, "text": " And the RTL bridges have two components.", "tokens": [50414, 400, 264, 21797, 43, 21114, 362, 732, 6677, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0933547989796784, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.025169363245368004}, {"id": 43, "seek": 54000, "start": 545.0, "end": 553.0, "text": " The first one is the bridge itself that is placed on the FPGA or in a Harvard emulator.", "tokens": [50614, 440, 700, 472, 307, 264, 7283, 2564, 300, 307, 7074, 322, 264, 36655, 12570, 420, 294, 257, 13378, 846, 16381, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0933547989796784, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.025169363245368004}, {"id": 44, "seek": 54000, "start": 553.0, "end": 561.0, "text": " And the other component is the driver of the bridge that is placed on the system C application software side.", "tokens": [51014, 400, 264, 661, 6542, 307, 264, 6787, 295, 264, 7283, 300, 307, 7074, 322, 264, 1185, 383, 3861, 4722, 1252, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0933547989796784, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.025169363245368004}, {"id": 45, "seek": 56100, "start": 561.0, "end": 576.0, "text": " So the way it goes is that TLM transaction enters the driver, which then configures the RTL bridge to replicate this transaction as an AXE transaction, for example, inside the FPGA or the Harvard emulator.", "tokens": [50364, 407, 264, 636, 309, 1709, 307, 300, 40277, 44, 14425, 18780, 264, 6787, 11, 597, 550, 6662, 1303, 264, 21797, 43, 7283, 281, 25356, 341, 14425, 382, 364, 316, 55, 36, 14425, 11, 337, 1365, 11, 1854, 264, 36655, 12570, 420, 264, 13378, 846, 16381, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10415940284729004, "compression_ratio": 1.3758389261744965, "no_speech_prob": 0.025340905413031578}, {"id": 46, "seek": 57600, "start": 577.0, "end": 602.0, "text": " And this is an example of when these bridges are used with an Albeo U250 card, where we have between the bridge and the bridge driver and the bridge, we have some infrastructure there.", "tokens": [50414, 400, 341, 307, 364, 1365, 295, 562, 613, 21114, 366, 1143, 365, 364, 967, 650, 78, 624, 23538, 2920, 11, 689, 321, 362, 1296, 264, 7283, 293, 264, 7283, 6787, 293, 264, 7283, 11, 321, 362, 512, 6896, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.169959003275091, "compression_ratio": 1.4488188976377954, "no_speech_prob": 0.06808921694755554}, {"id": 47, "seek": 60200, "start": 603.0, "end": 607.0, "text": " The fire PCIe next year made them.", "tokens": [50414, 440, 2610, 6465, 40, 68, 958, 1064, 1027, 552, 13, 50614], "temperature": 0.0, "avg_logprob": -0.267263616834368, "compression_ratio": 1.39375, "no_speech_prob": 0.02317819371819496}, {"id": 48, "seek": 60200, "start": 607.0, "end": 620.0, "text": " And one can see these components as a transport channel where the driver accesses go through towards the RTL bridge.", "tokens": [50614, 400, 472, 393, 536, 613, 6677, 382, 257, 5495, 2269, 689, 264, 6787, 2105, 279, 352, 807, 3030, 264, 21797, 43, 7283, 13, 51264], "temperature": 0.0, "avg_logprob": -0.267263616834368, "compression_ratio": 1.39375, "no_speech_prob": 0.02317819371819496}, {"id": 49, "seek": 60200, "start": 621.0, "end": 630.0, "text": " And looking at how it looks inside a hardware emulator is very similar.", "tokens": [51314, 400, 1237, 412, 577, 309, 1542, 1854, 257, 8837, 846, 16381, 307, 588, 2531, 13, 51764], "temperature": 0.0, "avg_logprob": -0.267263616834368, "compression_ratio": 1.39375, "no_speech_prob": 0.02317819371819496}, {"id": 50, "seek": 63000, "start": 630.0, "end": 641.0, "text": " But instead of PCIe and here the vendor bridges are used for this transport.", "tokens": [50364, 583, 2602, 295, 6465, 40, 68, 293, 510, 264, 24321, 21114, 366, 1143, 337, 341, 5495, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18086523101443336, "compression_ratio": 1.0410958904109588, "no_speech_prob": 0.012072544544935226}, {"id": 51, "seek": 64100, "start": 642.0, "end": 660.0, "text": " In the library we also have protocol checkers for AXE 4, AXE 3, AXE 4 Lite and AXE Lite CHI.", "tokens": [50414, 682, 264, 6405, 321, 611, 362, 10336, 1520, 433, 337, 316, 55, 36, 1017, 11, 316, 55, 36, 805, 11, 316, 55, 36, 1017, 32986, 293, 316, 55, 36, 32986, 5995, 40, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19294372764793602, "compression_ratio": 1.0952380952380953, "no_speech_prob": 0.16653695702552795}, {"id": 52, "seek": 66000, "start": 661.0, "end": 676.0, "text": " And the protocol checkers, they are connected to the signals and monitors the signals and try to find issues, violations to the protocols then.", "tokens": [50414, 400, 264, 10336, 1520, 433, 11, 436, 366, 4582, 281, 264, 12354, 293, 26518, 264, 12354, 293, 853, 281, 915, 2663, 11, 30405, 281, 264, 20618, 550, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1688431054353714, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.08489883691072464}, {"id": 53, "seek": 67600, "start": 677.0, "end": 690.0, "text": " Also in the library we have modules that can be used for generating AXE traffic.", "tokens": [50414, 2743, 294, 264, 6405, 321, 362, 16679, 300, 393, 312, 1143, 337, 17746, 316, 55, 36, 6419, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2373693206093528, "compression_ratio": 1.1964285714285714, "no_speech_prob": 0.08313340693712234}, {"id": 54, "seek": 67600, "start": 690.0, "end": 695.0, "text": " So we have AXE, AXE LiteMasters and AXE Interconnect.", "tokens": [51064, 407, 321, 362, 316, 55, 36, 11, 316, 55, 36, 32986, 44, 18817, 293, 316, 55, 36, 5751, 9826, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2373693206093528, "compression_ratio": 1.1964285714285714, "no_speech_prob": 0.08313340693712234}, {"id": 55, "seek": 69500, "start": 695.0, "end": 714.0, "text": " So the masters here, they generate ace transactions towards the interconnect and the interconnect will then when required snoop the other masters and otherwise forward the transaction to the TLM memory at the bottom.", "tokens": [50364, 407, 264, 19294, 510, 11, 436, 8460, 17117, 16856, 3030, 264, 26253, 293, 264, 26253, 486, 550, 562, 4739, 43287, 404, 264, 661, 19294, 293, 5911, 2128, 264, 14425, 281, 264, 40277, 44, 4675, 412, 264, 2767, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2756487528483073, "compression_ratio": 1.6, "no_speech_prob": 0.08993340283632278}, {"id": 56, "seek": 71400, "start": 714.0, "end": 738.0, "text": " We have a similar setup for CHI where we have request nodes that generate CHI traffic and a CHI interconnect that does snoopy when required or forwards the request to a slave node at the bottom.", "tokens": [50414, 492, 362, 257, 2531, 8657, 337, 5995, 40, 689, 321, 362, 5308, 13891, 300, 8460, 5995, 40, 6419, 293, 257, 5995, 40, 26253, 300, 775, 43287, 19680, 562, 4739, 420, 30126, 264, 5308, 281, 257, 14777, 9984, 412, 264, 2767, 13, 51564], "temperature": 0.0, "avg_logprob": -0.171070781621066, "compression_ratio": 1.4477611940298507, "no_speech_prob": 0.13777732849121094}, {"id": 57, "seek": 74400, "start": 745.0, "end": 753.0, "text": " Also in the library we have a tool called PySimGen that can generate simulations from IP exact descriptions.", "tokens": [50414, 2743, 294, 264, 6405, 321, 362, 257, 2290, 1219, 9953, 39392, 26647, 300, 393, 8460, 35138, 490, 8671, 1900, 24406, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15139286473112287, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.04823286086320877}, {"id": 58, "seek": 74400, "start": 753.0, "end": 766.0, "text": " And there's a basic TLM traffic generator that one can configure to generate randomized traffic or provide a description of transactions to issue.", "tokens": [50814, 400, 456, 311, 257, 3875, 40277, 44, 6419, 19265, 300, 472, 393, 22162, 281, 8460, 38513, 6419, 420, 2893, 257, 3855, 295, 16856, 281, 2734, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15139286473112287, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.04823286086320877}, {"id": 59, "seek": 76600, "start": 766.0, "end": 775.0, "text": " And there are some simple, easy co-simulation examples that one can have a look at as a starting point.", "tokens": [50364, 400, 456, 366, 512, 2199, 11, 1858, 598, 12, 30937, 2776, 5110, 300, 472, 393, 362, 257, 574, 412, 382, 257, 2891, 935, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12996047856856366, "compression_ratio": 1.4214285714285715, "no_speech_prob": 0.059578996151685715}, {"id": 60, "seek": 76600, "start": 775.0, "end": 784.0, "text": " There's a lot of documentation for all the components and we also have an extensive test suite.", "tokens": [50814, 821, 311, 257, 688, 295, 14333, 337, 439, 264, 6677, 293, 321, 611, 362, 364, 13246, 1500, 14205, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12996047856856366, "compression_ratio": 1.4214285714285715, "no_speech_prob": 0.059578996151685715}, {"id": 61, "seek": 78400, "start": 785.0, "end": 801.0, "text": " The system seat TLM CoSIM demo is also a project that was started by Edgar Iglesias in 2016 and the license sense is MIT.", "tokens": [50414, 440, 1185, 6121, 40277, 44, 3066, 50, 6324, 10723, 307, 611, 257, 1716, 300, 390, 1409, 538, 42981, 19271, 904, 4609, 294, 6549, 293, 264, 10476, 2020, 307, 13100, 13, 51214], "temperature": 0.0, "avg_logprob": -0.30628282883588004, "compression_ratio": 1.09009009009009, "no_speech_prob": 0.10734424740076065}, {"id": 62, "seek": 80100, "start": 801.0, "end": 830.0, "text": " And this contains several QMU co-simulation demos where we co-simulate the SyncMP QMU and VERSAL QMU with PL model on the system seat side and there's also a risk five demo where a risk five QMU is co-simulating with an open source.", "tokens": [50364, 400, 341, 8306, 2940, 1249, 44, 52, 598, 12, 30937, 2776, 33788, 689, 321, 598, 12, 30937, 5256, 264, 26155, 66, 12224, 1249, 44, 52, 293, 691, 14451, 3427, 1249, 44, 52, 365, 6999, 2316, 322, 264, 1185, 6121, 1252, 293, 456, 311, 611, 257, 3148, 1732, 10723, 689, 257, 3148, 1732, 1249, 44, 52, 307, 598, 12, 30937, 12162, 365, 364, 1269, 4009, 13, 51814], "temperature": 0.0, "avg_logprob": -0.24964310141170726, "compression_ratio": 1.4967741935483871, "no_speech_prob": 0.10075505077838898}, {"id": 63, "seek": 83100, "start": 831.0, "end": 836.0, "text": " Internet controller core on the system seat side.", "tokens": [50364, 7703, 10561, 4965, 322, 264, 1185, 6121, 1252, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20451717645349637, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.03159128874540329}, {"id": 64, "seek": 83100, "start": 836.0, "end": 844.0, "text": " We have several X86 QMU that co-simulate with PCIe endpoint models on the system seat side.", "tokens": [50614, 492, 362, 2940, 1783, 22193, 1249, 44, 52, 300, 598, 12, 30937, 5256, 365, 6465, 40, 68, 35795, 5245, 322, 264, 1185, 6121, 1252, 13, 51014], "temperature": 0.0, "avg_logprob": -0.20451717645349637, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.03159128874540329}, {"id": 65, "seek": 83100, "start": 844.0, "end": 857.0, "text": " And there is also a PySimGen demo where the system seat side of the co-simulation has been completely generated by from IP exact.", "tokens": [51014, 400, 456, 307, 611, 257, 9953, 39392, 26647, 10723, 689, 264, 1185, 6121, 1252, 295, 264, 598, 12, 30937, 2776, 575, 668, 2584, 10833, 538, 490, 8671, 1900, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20451717645349637, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.03159128874540329}, {"id": 66, "seek": 85700, "start": 858.0, "end": 868.0, "text": " And these demos they serve, they demonstrate how to embed the live system seat library in an own project and how to use it.", "tokens": [50414, 400, 613, 33788, 436, 4596, 11, 436, 11698, 577, 281, 12240, 264, 1621, 1185, 6121, 6405, 294, 364, 1065, 1716, 293, 577, 281, 764, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2701629002888997, "compression_ratio": 1.268041237113402, "no_speech_prob": 0.018368864431977272}, {"id": 67, "seek": 86800, "start": 868.0, "end": 896.0, "text": " So for the demo that I'll show now, it is a, here I will be launching a Linux system on the SyncMP QMU and it will be co-simulating with a system seat app where that includes a couple of RTL memories.", "tokens": [50364, 407, 337, 264, 10723, 300, 286, 603, 855, 586, 11, 309, 307, 257, 11, 510, 286, 486, 312, 18354, 257, 18734, 1185, 322, 264, 26155, 66, 12224, 1249, 44, 52, 293, 309, 486, 312, 598, 12, 30937, 12162, 365, 257, 1185, 6121, 724, 689, 300, 5974, 257, 1916, 295, 21797, 43, 8495, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1286890799539131, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.037500519305467606}, {"id": 68, "seek": 89600, "start": 896.0, "end": 908.0, "text": " One of the RTL memories is XC4 interface and the second one has a XC4 light interface.", "tokens": [50364, 1485, 295, 264, 21797, 43, 8495, 307, 1783, 34, 19, 9226, 293, 264, 1150, 472, 575, 257, 1783, 34, 19, 1442, 9226, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1997138261795044, "compression_ratio": 1.6787878787878787, "no_speech_prob": 0.05680236592888832}, {"id": 69, "seek": 89600, "start": 908.0, "end": 923.0, "text": " On the XC4 light signals there's a protocol checker connected and I also modified the XC4 light memory here and I injected that error so that we can see that the protocol checker finds this.", "tokens": [50964, 1282, 264, 1783, 34, 19, 1442, 12354, 456, 311, 257, 10336, 1520, 260, 4582, 293, 286, 611, 15873, 264, 1783, 34, 19, 1442, 4675, 510, 293, 286, 36967, 300, 6713, 370, 300, 321, 393, 536, 300, 264, 10336, 1520, 260, 10704, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1997138261795044, "compression_ratio": 1.6787878787878787, "no_speech_prob": 0.05680236592888832}, {"id": 70, "seek": 92300, "start": 923.0, "end": 927.0, "text": " So let's see then.", "tokens": [50414, 407, 718, 311, 536, 550, 13, 50564], "temperature": 0.0, "avg_logprob": -0.276114993625217, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.29733604192733765}, {"id": 71, "seek": 95300, "start": 954.0, "end": 973.0, "text": " So we see here that on this left terminal this is where QMU is being launched and on the yellow terminal on the top is where the system seat application has been launched.", "tokens": [50414, 407, 321, 536, 510, 300, 322, 341, 1411, 14709, 341, 307, 689, 1249, 44, 52, 307, 885, 8730, 293, 322, 264, 5566, 14709, 322, 264, 1192, 307, 689, 264, 1185, 6121, 3861, 575, 668, 8730, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13680837154388428, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.021592456847429276}, {"id": 72, "seek": 97300, "start": 974.0, "end": 998.0, "text": " And we will start by doing some accesses to the XC4 memory and thereafter here comes the accesses for the XC4 memory and then thereafter we will do an access towards the XC4 light memory that has an error in it.", "tokens": [50414, 400, 321, 486, 722, 538, 884, 512, 2105, 279, 281, 264, 1783, 34, 19, 4675, 293, 38729, 510, 1487, 264, 2105, 279, 337, 264, 1783, 34, 19, 4675, 293, 550, 38729, 321, 486, 360, 364, 2105, 3030, 264, 1783, 34, 19, 1442, 4675, 300, 575, 364, 6713, 294, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09929597819292987, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.09928785264492035}, {"id": 73, "seek": 99800, "start": 998.0, "end": 1006.0, "text": " And here we see that the protocol checker found the error and outputted some description message.", "tokens": [50364, 400, 510, 321, 536, 300, 264, 10336, 1520, 260, 1352, 264, 6713, 293, 5598, 14727, 512, 3855, 3636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1435536720134594, "compression_ratio": 1.5477707006369428, "no_speech_prob": 0.04573938250541687}, {"id": 74, "seek": 99800, "start": 1006.0, "end": 1024.0, "text": " After the simulation you get a trace that we can inspect and we can see here, follow the access signals and look at the transactions just issued.", "tokens": [50764, 2381, 264, 16575, 291, 483, 257, 13508, 300, 321, 393, 15018, 293, 321, 393, 536, 510, 11, 1524, 264, 2105, 12354, 293, 574, 412, 264, 16856, 445, 14379, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1435536720134594, "compression_ratio": 1.5477707006369428, "no_speech_prob": 0.04573938250541687}, {"id": 75, "seek": 102400, "start": 1024.0, "end": 1040.0, "text": " See that it is the expected data that we're seeing in here and you can see those at the bottom here that these are the data that we were writing to the memory.", "tokens": [50364, 3008, 300, 309, 307, 264, 5176, 1412, 300, 321, 434, 2577, 294, 510, 293, 291, 393, 536, 729, 412, 264, 2767, 510, 300, 613, 366, 264, 1412, 300, 321, 645, 3579, 281, 264, 4675, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1660802775415881, "compression_ratio": 1.5906040268456376, "no_speech_prob": 0.023483946919441223}, {"id": 76, "seek": 102400, "start": 1040.0, "end": 1046.0, "text": " Then the protocol checker's error is also connected to a signal in this case.", "tokens": [51164, 1396, 264, 10336, 1520, 260, 311, 6713, 307, 611, 4582, 281, 257, 6358, 294, 341, 1389, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1660802775415881, "compression_ratio": 1.5906040268456376, "no_speech_prob": 0.023483946919441223}, {"id": 77, "seek": 104600, "start": 1046.0, "end": 1057.0, "text": " So for the transaction that failed it can be found when this signal has been asserted.", "tokens": [50364, 407, 337, 264, 14425, 300, 7612, 309, 393, 312, 1352, 562, 341, 6358, 575, 668, 19810, 292, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10474289380587064, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0815565288066864}, {"id": 78, "seek": 104600, "start": 1057.0, "end": 1071.0, "text": " So this is seen at the bottom here where there is the asserted signal and then we can look into the transaction here and find the problem.", "tokens": [50914, 407, 341, 307, 1612, 412, 264, 2767, 510, 689, 456, 307, 264, 19810, 292, 6358, 293, 550, 321, 393, 574, 666, 264, 14425, 510, 293, 915, 264, 1154, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10474289380587064, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0815565288066864}, {"id": 79, "seek": 107600, "start": 1076.0, "end": 1087.0, "text": " And that is all what I have today.", "tokens": [50364, 400, 300, 307, 439, 437, 286, 362, 965, 13, 50914], "temperature": 0.0, "avg_logprob": -0.37959206731695877, "compression_ratio": 0.921875, "no_speech_prob": 0.06936363875865936}, {"id": 80, "seek": 107600, "start": 1087.0, "end": 1090.0, "text": " Thank you for listening.", "tokens": [50914, 1044, 291, 337, 4764, 13, 51064], "temperature": 0.0, "avg_logprob": -0.37959206731695877, "compression_ratio": 0.921875, "no_speech_prob": 0.06936363875865936}, {"id": 81, "seek": 110600, "start": 1106.0, "end": 1109.0, "text": " That's a dumb question which I'm known for.", "tokens": [50364, 663, 311, 257, 10316, 1168, 597, 286, 478, 2570, 337, 13, 50514], "temperature": 0.0, "avg_logprob": -0.26187870290019727, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.8856490850448608}, {"id": 82, "seek": 110600, "start": 1109.0, "end": 1119.0, "text": " No, so because like I said at the beginning I'm very interested in how this works in enterprises and I'm curious how do you guys like decide a feature to be implemented?", "tokens": [50514, 883, 11, 370, 570, 411, 286, 848, 412, 264, 2863, 286, 478, 588, 3102, 294, 577, 341, 1985, 294, 29034, 293, 286, 478, 6369, 577, 360, 291, 1074, 411, 4536, 257, 4111, 281, 312, 12270, 30, 51014], "temperature": 0.0, "avg_logprob": -0.26187870290019727, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.8856490850448608}, {"id": 83, "seek": 110600, "start": 1119.0, "end": 1121.0, "text": " How do you plan that kind of stuff?", "tokens": [51014, 1012, 360, 291, 1393, 300, 733, 295, 1507, 30, 51114], "temperature": 0.0, "avg_logprob": -0.26187870290019727, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.8856490850448608}, {"id": 84, "seek": 110600, "start": 1121.0, "end": 1127.0, "text": " Do you know how that works in the community or if you're in your basement?", "tokens": [51114, 1144, 291, 458, 577, 300, 1985, 294, 264, 1768, 420, 498, 291, 434, 294, 428, 16893, 30, 51414], "temperature": 0.0, "avg_logprob": -0.26187870290019727, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.8856490850448608}, {"id": 85, "seek": 110600, "start": 1127.0, "end": 1132.0, "text": " Do you mean like in QMU or in the system C or overall?", "tokens": [51414, 1144, 291, 914, 411, 294, 1249, 44, 52, 420, 294, 264, 1185, 383, 420, 4787, 30, 51664], "temperature": 0.0, "avg_logprob": -0.26187870290019727, "compression_ratio": 1.5924369747899159, "no_speech_prob": 0.8856490850448608}, {"id": 86, "seek": 113200, "start": 1133.0, "end": 1137.0, "text": " So it ends up with me.", "tokens": [50414, 407, 309, 5314, 493, 365, 385, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20106626657339244, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.02159462496638298}, {"id": 87, "seek": 113200, "start": 1137.0, "end": 1138.0, "text": " Yes.", "tokens": [50614, 1079, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20106626657339244, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.02159462496638298}, {"id": 88, "seek": 113200, "start": 1138.0, "end": 1141.0, "text": " So how do we decide the features that we implement?", "tokens": [50664, 407, 577, 360, 321, 4536, 264, 4122, 300, 321, 4445, 30, 50814], "temperature": 0.0, "avg_logprob": -0.20106626657339244, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.02159462496638298}, {"id": 89, "seek": 113200, "start": 1141.0, "end": 1148.0, "text": " And it's actually the demand that drives this.", "tokens": [50814, 400, 309, 311, 767, 264, 4733, 300, 11754, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20106626657339244, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.02159462496638298}, {"id": 90, "seek": 113200, "start": 1148.0, "end": 1156.0, "text": " So if we see that some team internally at AMD siblings needs a feature in QMU then we implement it.", "tokens": [51164, 407, 498, 321, 536, 300, 512, 1469, 19501, 412, 34808, 20571, 2203, 257, 4111, 294, 1249, 44, 52, 550, 321, 4445, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20106626657339244, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.02159462496638298}, {"id": 91, "seek": 115600, "start": 1156.0, "end": 1167.0, "text": " Or if we see if there's a feature that might be useful later forward going forward.", "tokens": [50364, 1610, 498, 321, 536, 498, 456, 311, 257, 4111, 300, 1062, 312, 4420, 1780, 2128, 516, 2128, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16438902508128772, "compression_ratio": 1.390625, "no_speech_prob": 0.020418347790837288}, {"id": 92, "seek": 115600, "start": 1167.0, "end": 1173.0, "text": " Not right now but perhaps in a year or so that also then we will consider implementing it too.", "tokens": [50914, 1726, 558, 586, 457, 4317, 294, 257, 1064, 420, 370, 300, 611, 550, 321, 486, 1949, 18114, 309, 886, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16438902508128772, "compression_ratio": 1.390625, "no_speech_prob": 0.020418347790837288}, {"id": 93, "seek": 117300, "start": 1173.0, "end": 1187.0, "text": " So and often it ends up that our demands are pretty similar to all other developer or all other demands.", "tokens": [50364, 407, 293, 2049, 309, 5314, 493, 300, 527, 15107, 366, 1238, 2531, 281, 439, 661, 10754, 420, 439, 661, 15107, 13, 51064], "temperature": 0.0, "avg_logprob": -0.23579153418540955, "compression_ratio": 1.5419354838709678, "no_speech_prob": 0.3292323052883148}, {"id": 94, "seek": 117300, "start": 1187.0, "end": 1192.0, "text": " So if we do a feature, implement a feature, it often becomes useful for others as well.", "tokens": [51064, 407, 498, 321, 360, 257, 4111, 11, 4445, 257, 4111, 11, 309, 2049, 3643, 4420, 337, 2357, 382, 731, 13, 51314], "temperature": 0.0, "avg_logprob": -0.23579153418540955, "compression_ratio": 1.5419354838709678, "no_speech_prob": 0.3292323052883148}, {"id": 95, "seek": 117300, "start": 1192.0, "end": 1196.0, "text": " Not only for the silencs, AMD silencs in part.", "tokens": [51314, 1726, 787, 337, 264, 3425, 268, 14368, 11, 34808, 3425, 268, 14368, 294, 644, 13, 51514], "temperature": 0.0, "avg_logprob": -0.23579153418540955, "compression_ratio": 1.5419354838709678, "no_speech_prob": 0.3292323052883148}, {"id": 96, "seek": 119600, "start": 1196.0, "end": 1202.0, "text": " A small follow-up. You guys probably do Agile like the rest of the world.", "tokens": [50364, 316, 1359, 1524, 12, 1010, 13, 509, 1074, 1391, 360, 2725, 794, 411, 264, 1472, 295, 264, 1002, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2759341564807263, "compression_ratio": 1.6402116402116402, "no_speech_prob": 0.6485342383384705}, {"id": 97, "seek": 119600, "start": 1202.0, "end": 1208.0, "text": " I'm curious like how do you guys refine the story like this in Agile service?", "tokens": [50664, 286, 478, 6369, 411, 577, 360, 291, 1074, 33906, 264, 1657, 411, 341, 294, 2725, 794, 2643, 30, 50964], "temperature": 0.0, "avg_logprob": -0.2759341564807263, "compression_ratio": 1.6402116402116402, "no_speech_prob": 0.6485342383384705}, {"id": 98, "seek": 119600, "start": 1208.0, "end": 1211.0, "text": " And I'm very sorry.", "tokens": [50964, 400, 286, 478, 588, 2597, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2759341564807263, "compression_ratio": 1.6402116402116402, "no_speech_prob": 0.6485342383384705}, {"id": 99, "seek": 119600, "start": 1211.0, "end": 1216.0, "text": " Okay, how do we use Agile development in this?", "tokens": [51114, 1033, 11, 577, 360, 321, 764, 2725, 794, 3250, 294, 341, 30, 51364], "temperature": 0.0, "avg_logprob": -0.2759341564807263, "compression_ratio": 1.6402116402116402, "no_speech_prob": 0.6485342383384705}, {"id": 100, "seek": 119600, "start": 1216.0, "end": 1221.0, "text": " I don't care about Agile. I really care about the refinements. I don't like Agile actually.", "tokens": [51364, 286, 500, 380, 1127, 466, 2725, 794, 13, 286, 534, 1127, 466, 264, 44395, 6400, 13, 286, 500, 380, 411, 2725, 794, 767, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2759341564807263, "compression_ratio": 1.6402116402116402, "no_speech_prob": 0.6485342383384705}, {"id": 101, "seek": 122100, "start": 1221.0, "end": 1226.0, "text": " Like how do you guys brainstorm together on a feature? What do you put on paper?", "tokens": [50364, 1743, 577, 360, 291, 1074, 35245, 1214, 322, 257, 4111, 30, 708, 360, 291, 829, 322, 3035, 30, 50614], "temperature": 0.0, "avg_logprob": -0.14477636907007788, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.1327710598707199}, {"id": 102, "seek": 122100, "start": 1226.0, "end": 1230.0, "text": " Like it needs to be this but how do we do this?", "tokens": [50614, 1743, 309, 2203, 281, 312, 341, 457, 577, 360, 321, 360, 341, 30, 50814], "temperature": 0.0, "avg_logprob": -0.14477636907007788, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.1327710598707199}, {"id": 103, "seek": 122100, "start": 1230.0, "end": 1237.0, "text": " Because it's not always comparable to something that already exists with emulators.", "tokens": [50814, 1436, 309, 311, 406, 1009, 25323, 281, 746, 300, 1217, 8198, 365, 846, 39265, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14477636907007788, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.1327710598707199}, {"id": 104, "seek": 122100, "start": 1237.0, "end": 1241.0, "text": " It's usually something that's never been done before.", "tokens": [51164, 467, 311, 2673, 746, 300, 311, 1128, 668, 1096, 949, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14477636907007788, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.1327710598707199}, {"id": 105, "seek": 122100, "start": 1241.0, "end": 1245.0, "text": " I'm really sorry about this question.", "tokens": [51364, 286, 478, 534, 2597, 466, 341, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14477636907007788, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.1327710598707199}, {"id": 106, "seek": 124500, "start": 1245.0, "end": 1250.0, "text": " I know it's a very good question and I have to admit it.", "tokens": [50364, 286, 458, 309, 311, 257, 588, 665, 1168, 293, 286, 362, 281, 9796, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13490548815046038, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.019027145579457283}, {"id": 107, "seek": 124500, "start": 1250.0, "end": 1255.0, "text": " I'm not sure if we have such a process that we're probably looking at here.", "tokens": [50614, 286, 478, 406, 988, 498, 321, 362, 1270, 257, 1399, 300, 321, 434, 1391, 1237, 412, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13490548815046038, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.019027145579457283}, {"id": 108, "seek": 124500, "start": 1255.0, "end": 1263.0, "text": " We get a request in our group, implement. We need this feature from, for example, one of the RTL groups.", "tokens": [50864, 492, 483, 257, 5308, 294, 527, 1594, 11, 4445, 13, 492, 643, 341, 4111, 490, 11, 337, 1365, 11, 472, 295, 264, 21797, 43, 3935, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13490548815046038, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.019027145579457283}, {"id": 109, "seek": 124500, "start": 1263.0, "end": 1268.0, "text": " They need a feature, they ask us and we implement it.", "tokens": [51264, 814, 643, 257, 4111, 11, 436, 1029, 505, 293, 321, 4445, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13490548815046038, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.019027145579457283}, {"id": 110, "seek": 124500, "start": 1268.0, "end": 1274.0, "text": " So we don't have really a process where we kind of do this very Agile in that sense.", "tokens": [51514, 407, 321, 500, 380, 362, 534, 257, 1399, 689, 321, 733, 295, 360, 341, 588, 2725, 794, 294, 300, 2020, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13490548815046038, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.019027145579457283}, {"id": 111, "seek": 127400, "start": 1274.0, "end": 1283.0, "text": " This is our team. It might be different in other teams at AMD.", "tokens": [50364, 639, 307, 527, 1469, 13, 467, 1062, 312, 819, 294, 661, 5491, 412, 34808, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2750971350871341, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.013020972721278667}, {"id": 112, "seek": 127400, "start": 1283.0, "end": 1289.0, "text": " So Chris, how do you get the system C model from Verilog?", "tokens": [50814, 407, 6688, 11, 577, 360, 291, 483, 264, 1185, 383, 2316, 490, 4281, 388, 664, 30, 51114], "temperature": 0.0, "avg_logprob": -0.2750971350871341, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.013020972721278667}, {"id": 113, "seek": 127400, "start": 1289.0, "end": 1298.0, "text": " And does that also work for co-gen generated IP which might be implemented?", "tokens": [51114, 400, 775, 300, 611, 589, 337, 598, 12, 1766, 10833, 8671, 597, 1062, 312, 12270, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2750971350871341, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.013020972721278667}, {"id": 114, "seek": 127400, "start": 1298.0, "end": 1303.0, "text": " So how do we get the system C model from Verilog?", "tokens": [51564, 407, 577, 360, 321, 483, 264, 1185, 383, 2316, 490, 4281, 388, 664, 30, 51814], "temperature": 0.0, "avg_logprob": -0.2750971350871341, "compression_ratio": 1.5471698113207548, "no_speech_prob": 0.013020972721278667}, {"id": 115, "seek": 130300, "start": 1303.0, "end": 1311.0, "text": " So there's an open source tool named Verilator that will Verilog and create the module for you.", "tokens": [50364, 407, 456, 311, 364, 1269, 4009, 2290, 4926, 4281, 388, 1639, 300, 486, 4281, 388, 664, 293, 1884, 264, 10088, 337, 291, 13, 50764], "temperature": 0.0, "avg_logprob": -0.24251966838595235, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.03161255642771721}, {"id": 116, "seek": 130300, "start": 1311.0, "end": 1317.0, "text": " But it's not going to work for the co-gen generated IP which is encrypted and which Verilator cannot process.", "tokens": [50764, 583, 309, 311, 406, 516, 281, 589, 337, 264, 598, 12, 1766, 10833, 8671, 597, 307, 36663, 293, 597, 4281, 388, 1639, 2644, 1399, 13, 51064], "temperature": 0.0, "avg_logprob": -0.24251966838595235, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.03161255642771721}, {"id": 117, "seek": 130300, "start": 1317.0, "end": 1322.0, "text": " For that I'm not sure how to do that. Sorry for that.", "tokens": [51064, 1171, 300, 286, 478, 406, 988, 577, 281, 360, 300, 13, 4919, 337, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.24251966838595235, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.03161255642771721}, {"id": 118, "seek": 130300, "start": 1322.0, "end": 1327.0, "text": " There is no free line.", "tokens": [51314, 821, 307, 572, 1737, 1622, 13, 51564], "temperature": 0.0, "avg_logprob": -0.24251966838595235, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.03161255642771721}, {"id": 119, "seek": 132700, "start": 1327.0, "end": 1346.0, "text": " I don't have to speak on that because I have to admit that I'm mostly on the QMU development side.", "tokens": [50364, 286, 500, 380, 362, 281, 1710, 322, 300, 570, 286, 362, 281, 9796, 300, 286, 478, 5240, 322, 264, 1249, 44, 52, 3250, 1252, 13, 51314], "temperature": 0.0, "avg_logprob": -0.24258417742592947, "compression_ratio": 1.4429530201342282, "no_speech_prob": 0.04329226166009903}, {"id": 120, "seek": 132700, "start": 1346.0, "end": 1355.0, "text": " But if you ping me afterwards I can take your card and see if I can contact give you a correct contact or something.", "tokens": [51314, 583, 498, 291, 26151, 385, 10543, 286, 393, 747, 428, 2920, 293, 536, 498, 286, 393, 3385, 976, 291, 257, 3006, 3385, 420, 746, 13, 51764], "temperature": 0.0, "avg_logprob": -0.24258417742592947, "compression_ratio": 1.4429530201342282, "no_speech_prob": 0.04329226166009903}, {"id": 121, "seek": 135500, "start": 1355.0, "end": 1360.0, "text": " Is there something for VHDL as well?", "tokens": [50364, 1119, 456, 746, 337, 691, 22859, 43, 382, 731, 30, 50614], "temperature": 0.0, "avg_logprob": -0.20923186060207993, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.048386119306087494}, {"id": 122, "seek": 135500, "start": 1360.0, "end": 1364.0, "text": " I think there are tools that do this.", "tokens": [50614, 286, 519, 456, 366, 3873, 300, 360, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.20923186060207993, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.048386119306087494}, {"id": 123, "seek": 135500, "start": 1364.0, "end": 1374.0, "text": " But if there is a tool that automatically generates a system C model from VHDL, there are tools apparently.", "tokens": [50814, 583, 498, 456, 307, 257, 2290, 300, 6772, 23815, 257, 1185, 383, 2316, 490, 691, 22859, 43, 11, 456, 366, 3873, 7970, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20923186060207993, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.048386119306087494}, {"id": 124, "seek": 135500, "start": 1374.0, "end": 1380.0, "text": " I'm pretty sure there are too. But we have not used them.", "tokens": [51314, 286, 478, 1238, 988, 456, 366, 886, 13, 583, 321, 362, 406, 1143, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20923186060207993, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.048386119306087494}, {"id": 125, "seek": 138000, "start": 1380.0, "end": 1388.0, "text": " Are you limiting yourself to the synthesizable subset of system C or do you don't care?", "tokens": [50364, 2014, 291, 22083, 1803, 281, 264, 26617, 22395, 25993, 295, 1185, 383, 420, 360, 291, 500, 380, 1127, 30, 50764], "temperature": 0.0, "avg_logprob": -0.24902931419578758, "compression_ratio": 1.2788461538461537, "no_speech_prob": 0.3633539080619812}, {"id": 126, "seek": 138000, "start": 1388.0, "end": 1401.0, "text": " No, we don't limit ourselves to system C now.", "tokens": [50764, 883, 11, 321, 500, 380, 4948, 4175, 281, 1185, 383, 586, 13, 51414], "temperature": 0.0, "avg_logprob": -0.24902931419578758, "compression_ratio": 1.2788461538461537, "no_speech_prob": 0.3633539080619812}, {"id": 127, "seek": 140100, "start": 1401.0, "end": 1406.0, "text": " I'm coming from the world of open source software-defined radio.", "tokens": [50364, 286, 478, 1348, 490, 264, 1002, 295, 1269, 4009, 4722, 12, 37716, 6477, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2564669457551475, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.36745133996009827}, {"id": 128, "seek": 140100, "start": 1406.0, "end": 1410.0, "text": " I have flow graphs where I have data processing blocks that are running in software.", "tokens": [50614, 286, 362, 3095, 24877, 689, 286, 362, 1412, 9007, 8474, 300, 366, 2614, 294, 4722, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2564669457551475, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.36745133996009827}, {"id": 129, "seek": 140100, "start": 1410.0, "end": 1415.0, "text": " On an mpsox R64 core.", "tokens": [50814, 1282, 364, 275, 79, 539, 87, 497, 19395, 4965, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2564669457551475, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.36745133996009827}, {"id": 130, "seek": 140100, "start": 1415.0, "end": 1424.0, "text": " What I want to do is I want to take a block and implement it in some RTL and get it to run on the fpga part.", "tokens": [51064, 708, 286, 528, 281, 360, 307, 286, 528, 281, 747, 257, 3461, 293, 4445, 309, 294, 512, 21797, 43, 293, 483, 309, 281, 1190, 322, 264, 283, 79, 3680, 644, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2564669457551475, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.36745133996009827}, {"id": 131, "seek": 140100, "start": 1424.0, "end": 1430.0, "text": " How does that work? I have some part of software that I want to be accelerated by an fpga accelerator.", "tokens": [51514, 1012, 775, 300, 589, 30, 286, 362, 512, 644, 295, 4722, 300, 286, 528, 281, 312, 29763, 538, 364, 283, 79, 3680, 39889, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2564669457551475, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.36745133996009827}, {"id": 132, "seek": 143000, "start": 1431.0, "end": 1434.0, "text": " These tools you mean?", "tokens": [50414, 1981, 3873, 291, 914, 30, 50564], "temperature": 0.0, "avg_logprob": -0.4726907457624163, "compression_ratio": 1.1428571428571428, "no_speech_prob": 0.11381949484348297}, {"id": 133, "seek": 143000, "start": 1434.0, "end": 1436.0, "text": " Yes.", "tokens": [50564, 1079, 13, 50664], "temperature": 0.0, "avg_logprob": -0.4726907457624163, "compression_ratio": 1.1428571428571428, "no_speech_prob": 0.11381949484348297}, {"id": 134, "seek": 143000, "start": 1436.0, "end": 1441.0, "text": " In that case you could...", "tokens": [50664, 682, 300, 1389, 291, 727, 485, 50914], "temperature": 0.0, "avg_logprob": -0.4726907457624163, "compression_ratio": 1.1428571428571428, "no_speech_prob": 0.11381949484348297}, {"id": 135, "seek": 143000, "start": 1441.0, "end": 1446.0, "text": " Yes, how...", "tokens": [50914, 1079, 11, 577, 485, 51164], "temperature": 0.0, "avg_logprob": -0.4726907457624163, "compression_ratio": 1.1428571428571428, "no_speech_prob": 0.11381949484348297}, {"id": 136, "seek": 143000, "start": 1446.0, "end": 1453.0, "text": " Random acceleration implementation of software.", "tokens": [51164, 37603, 17162, 11420, 295, 4722, 13, 51514], "temperature": 0.0, "avg_logprob": -0.4726907457624163, "compression_ratio": 1.1428571428571428, "no_speech_prob": 0.11381949484348297}, {"id": 137, "seek": 145300, "start": 1453.0, "end": 1462.0, "text": " How do I go from software acceleration to hardware implementation?", "tokens": [50364, 1012, 360, 286, 352, 490, 4722, 17162, 281, 8837, 11420, 30, 50814], "temperature": 0.0, "avg_logprob": -0.26922995249430337, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.03596104681491852}, {"id": 138, "seek": 145300, "start": 1462.0, "end": 1465.0, "text": " I know how to write.", "tokens": [50814, 286, 458, 577, 281, 2464, 13, 50964], "temperature": 0.0, "avg_logprob": -0.26922995249430337, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.03596104681491852}, {"id": 139, "seek": 145300, "start": 1465.0, "end": 1467.0, "text": " Yes, yes.", "tokens": [50964, 1079, 11, 2086, 13, 51064], "temperature": 0.0, "avg_logprob": -0.26922995249430337, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.03596104681491852}, {"id": 140, "seek": 145300, "start": 1467.0, "end": 1474.0, "text": " I have to admit that I myself am not an expert hardware engineer.", "tokens": [51064, 286, 362, 281, 9796, 300, 286, 2059, 669, 406, 364, 5844, 8837, 11403, 13, 51414], "temperature": 0.0, "avg_logprob": -0.26922995249430337, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.03596104681491852}, {"id": 141, "seek": 147400, "start": 1474.0, "end": 1480.0, "text": " I think that the way I would have done it is just to go ahead and create the world of code.", "tokens": [50364, 286, 519, 300, 264, 636, 286, 576, 362, 1096, 309, 307, 445, 281, 352, 2286, 293, 1884, 264, 1002, 295, 3089, 13, 50664], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 142, "seek": 147400, "start": 1480.0, "end": 1488.0, "text": " With this tool it's very sweet because you can connect it to the QMU system.", "tokens": [50664, 2022, 341, 2290, 309, 311, 588, 3844, 570, 291, 393, 1745, 309, 281, 264, 1249, 44, 52, 1185, 13, 51064], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 143, "seek": 147400, "start": 1488.0, "end": 1492.0, "text": " Just as a library and say, okay, I have this XE stream.", "tokens": [51064, 1449, 382, 257, 6405, 293, 584, 11, 1392, 11, 286, 362, 341, 1783, 36, 4309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 144, "seek": 147400, "start": 1492.0, "end": 1494.0, "text": " Yes.", "tokens": [51264, 1079, 13, 51364], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 145, "seek": 147400, "start": 1494.0, "end": 1497.0, "text": " Put it in there and I call C functions in the end, right?", "tokens": [51364, 4935, 309, 294, 456, 293, 286, 818, 383, 6828, 294, 264, 917, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 146, "seek": 147400, "start": 1497.0, "end": 1502.0, "text": " You can launch your real software in QMU that interacts with it.", "tokens": [51514, 509, 393, 4025, 428, 957, 4722, 294, 1249, 44, 52, 300, 43582, 365, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.31208934598756066, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.21961072087287903}, {"id": 147, "seek": 150200, "start": 1503.0, "end": 1507.0, "text": " How do I exchange data with the library?", "tokens": [50414, 1012, 360, 286, 7742, 1412, 365, 264, 6405, 30, 50614], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 148, "seek": 150200, "start": 1507.0, "end": 1508.0, "text": " What's the interfaces?", "tokens": [50614, 708, 311, 264, 28416, 30, 50664], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 149, "seek": 150200, "start": 1508.0, "end": 1511.0, "text": " I see internally it's here and it's called the system C, right?", "tokens": [50664, 286, 536, 19501, 309, 311, 510, 293, 309, 311, 1219, 264, 1185, 383, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 150, "seek": 150200, "start": 1511.0, "end": 1512.0, "text": " Yes, yes.", "tokens": [50814, 1079, 11, 2086, 13, 50864], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 151, "seek": 150200, "start": 1512.0, "end": 1513.0, "text": " You don't have to choose that.", "tokens": [50864, 509, 500, 380, 362, 281, 2826, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 152, "seek": 150200, "start": 1513.0, "end": 1516.0, "text": " But what's on the surface? How do I get data in and out?", "tokens": [50914, 583, 437, 311, 322, 264, 3753, 30, 1012, 360, 286, 483, 1412, 294, 293, 484, 30, 51064], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 153, "seek": 150200, "start": 1516.0, "end": 1519.0, "text": " How do you get data in and out, the simulators?", "tokens": [51064, 1012, 360, 291, 483, 1412, 294, 293, 484, 11, 264, 1034, 39265, 30, 51214], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 154, "seek": 150200, "start": 1519.0, "end": 1521.0, "text": " Yeah.", "tokens": [51214, 865, 13, 51314], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 155, "seek": 150200, "start": 1521.0, "end": 1529.0, "text": " Perhaps I would have needed a better overview picture, but if you can get...", "tokens": [51314, 10517, 286, 576, 362, 2978, 257, 1101, 12492, 3036, 11, 457, 498, 291, 393, 483, 485, 51714], "temperature": 0.0, "avg_logprob": -0.25843940524879944, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.00864846259355545}, {"id": 156, "seek": 152900, "start": 1529.0, "end": 1532.0, "text": " How you get data in into your system C application.", "tokens": [50364, 1012, 291, 483, 1412, 294, 666, 428, 1185, 383, 3861, 13, 50514], "temperature": 0.0, "avg_logprob": -0.31926179439463515, "compression_ratio": 1.2890625, "no_speech_prob": 0.012276179157197475}, {"id": 157, "seek": 152900, "start": 1532.0, "end": 1535.0, "text": " That's...", "tokens": [50514, 663, 311, 485, 50664], "temperature": 0.0, "avg_logprob": -0.31926179439463515, "compression_ratio": 1.2890625, "no_speech_prob": 0.012276179157197475}, {"id": 158, "seek": 152900, "start": 1535.0, "end": 1539.0, "text": " We don't have any magic frills, but...", "tokens": [50664, 492, 500, 380, 362, 604, 5585, 431, 2565, 11, 457, 485, 50864], "temperature": 0.0, "avg_logprob": -0.31926179439463515, "compression_ratio": 1.2890625, "no_speech_prob": 0.012276179157197475}, {"id": 159, "seek": 152900, "start": 1549.0, "end": 1558.0, "text": " So the remote port protocol is just a protocol that transfers...", "tokens": [51364, 407, 264, 8607, 2436, 10336, 307, 445, 257, 10336, 300, 29137, 485, 51814], "temperature": 0.0, "avg_logprob": -0.31926179439463515, "compression_ratio": 1.2890625, "no_speech_prob": 0.012276179157197475}, {"id": 160, "seek": 155800, "start": 1558.0, "end": 1564.0, "text": " Transactions from QMU into the system C side or to another QMU.", "tokens": [50364, 6531, 12299, 490, 1249, 44, 52, 666, 264, 1185, 383, 1252, 420, 281, 1071, 1249, 44, 52, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1330751861844744, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.01389691885560751}, {"id": 161, "seek": 155800, "start": 1564.0, "end": 1569.0, "text": " And so it's not really a way to...", "tokens": [50664, 400, 370, 309, 311, 406, 534, 257, 636, 281, 485, 50914], "temperature": 0.0, "avg_logprob": -0.1330751861844744, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.01389691885560751}, {"id": 162, "seek": 155800, "start": 1569.0, "end": 1574.0, "text": " That will allow you to load in a bunch of data into the system C application.", "tokens": [50914, 663, 486, 2089, 291, 281, 3677, 294, 257, 3840, 295, 1412, 666, 264, 1185, 383, 3861, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1330751861844744, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.01389691885560751}, {"id": 163, "seek": 155800, "start": 1574.0, "end": 1576.0, "text": " But...", "tokens": [51164, 583, 485, 51264], "temperature": 0.0, "avg_logprob": -0.1330751861844744, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.01389691885560751}, {"id": 164, "seek": 158800, "start": 1588.0, "end": 1591.0, "text": " Any more questions?", "tokens": [50364, 2639, 544, 1651, 30, 50514], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}, {"id": 165, "seek": 158800, "start": 1591.0, "end": 1594.0, "text": " Did I answer your question?", "tokens": [50514, 2589, 286, 1867, 428, 1168, 30, 50664], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}, {"id": 166, "seek": 158800, "start": 1594.0, "end": 1598.0, "text": " Yes, I think afterwards and I can...", "tokens": [50664, 1079, 11, 286, 519, 10543, 293, 286, 393, 485, 50864], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}, {"id": 167, "seek": 158800, "start": 1598.0, "end": 1601.0, "text": " Okay, we don't have time.", "tokens": [50864, 1033, 11, 321, 500, 380, 362, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}, {"id": 168, "seek": 158800, "start": 1601.0, "end": 1602.0, "text": " Thank you very much.", "tokens": [51014, 1044, 291, 588, 709, 13, 51064], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}, {"id": 169, "seek": 158800, "start": 1602.0, "end": 1604.0, "text": " Thank you.", "tokens": [51064, 1044, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.360337773958842, "compression_ratio": 1.2136752136752136, "no_speech_prob": 0.2560238242149353}], "language": "en"}