{"text": " Okay. Hello, everyone. Can you hear me okay? Good. Okay. My name is Arthur Cohen. I'm a compiler engineer at Ambicosm, top left, and today I'm going to talk to you a little bit about Rust GCC. So, first of all, a little summary. We're going to get into what is GCC because this is a Rust dev room. I assume at least some of you have never used GCC, which is good for you. It's good for your health. Then, what is Rust GCC? So, why do we make it? Why, I mean, working on it. Who was stupid enough to even think about re-implementing a Rust compiler from scratch? Then, how do we do that? So, I'm going to get into some of the steps of our compilers, our parser, our intermediate representation, and all of the extra fun Rust stuff that we have to handle because it's a really complex language. Then, I'd like to get into our workflow, the community. So, all of the contributors, how we work together, our merging process, GitHub, all of that, and all that interesting stuff that comes with it. And finally, some sort of future questions. What are we going to do? What are our goals? When are we going to stop? So, what is GCC? GCC stands for the GNU Compiler Collection. It's sort of a very, very big program that contains multiple compilers for multiple languages and that all share the same back end. So, the same sort of assembly and mission and optimizers and so on and so on. One fun thing about GCC is that it's very old. It's 30 years old, maybe more. It's really in C++11, so that's great. As I say, it's multiple languages in one. So, you got a C compiler, a C++ compiler, Fortran compiler, so on and so on, and we're trying to add Rust to it. And if you know a little bit about how Rust C works, Rust C is called a front-end. It sort of does its thing and then talks to LLVM to generate code. And that's what's good about LLVM is you can use it as a library. You cannot do that with GCC. So, you have libGCCJet, which is sort of an attempt at having a library for GCC, which is quite recent, or you can do like Rust GCC does, which is create the compiler in tree. If you've been following sort of the Rust in GCC story, you'll know that Rust C code gen GCC, the project by Antoyo, actually uses libGCCJet, and that's a way better idea than Rust GCC, but let's keep going. So, what is Rust GCC? It's a full implementation of Rust on top of the GNU tool chain. So, as I said earlier, this means that we're actually re-implementing the compiler from scratch. So, we started from sort of nothing and kept adding and adding stuff until, well, until today. The project was originally started in 2014. So, just for one quick bit, I think at the time libGCCJet did not exist. So, it's not as bad an idea as it is to add it to the entry GCC, to the GCC tree. And originally in 2014, if you know a bit about the history of Rust, you didn't have a stable version yet. Rust version 1.0 released in 2015. So, that meant that in 2014, there was a lot of churn within the language. If some of you were here at the beginning, you remember maybe the tilde pointer, the add symbol that was used for a lot of stuff, the garbage collector and so on and so on. So, eventually the project had to drop because one, even though he was very, very into it, one developer could not just keep up. It was revived in 2019, thanks to multiple people. First of all, open-source security and then Mbaccosm, where the two companies sponsoring this project. It receives contribution to from many GCC and non-GCC developers. So, I'm going to talk about that a bit later, but we do have some people that have been working on GCC for a very long time helping us and I'd like to thank them, but more on that later. So, why do we do that? The goal is to upstream it with mainline GCC. So, that means that whenever you're going to put your favorite Linux distribution, install GCC, you're going to have GCC Rust with it. It's an alternative implementation of Rust. We hope that it helps maybe draw out and sort of drive the specification effort and that we can help the Rust C team figure out some pieces where the language isn't as clear as they'd like it to be. It reuses the GNU toolchain, so GNU-LD, GNU-AS, GDB, but it does reuse the official Rust standard library, so Libcore, Libasti, and so on. And because of the way GCC is sort of architecture, once you get to that common GCC backend and common GCC intermediate representation, you can basically reuse all of the plugins that have been written for GCC ever. And that means a lot and a lot and a lot of plugins, security plugins, stuff like the static analyzers, so you might have heard about that, the LTO, which is not really a plugin, but we can make use of it, CFE, CFI security plugins, and so on. We also hope that because we're writing it in C++, that means we can backport it, so to previous versions of GCC. And hopefully, that will help some systems get Rust, hopefully. And then because GCC, as I said, is much older than LVM, it has support for more architectures and more targets than LVM. I mean, it had. Now, you guys have the M1 Mac, and we're still far on that. So technically, thanks to GCCRS, you will now be able to run Rust on your favorite Soviet satellite and so on. There's a link for that. The slides are on the talks page, and there's a lot of frequently asked questions. So that's sort of the milestone tab that we put together in each and every one of our weekly and monthly reports. And the takeaway from here is that the effort has been ongoing since 2020 and even a little bit beforehand, and we've done a lot of effort and a lot of progress. Right now, we're around there. So we have upstreamed the first version of GCC Rust within GCC. So next time, when you install GCC13, so sorry for the people on Ubuntu, that's in like 10 years, but next time you update GCC, you'll have GCCRS in it. You can use it, you can start hacking on it, you can please report issues when it inevitably crashes and dies horribly. And yeah, we're sending more and more patches upstream and getting more and more of our compiler whose development happens on GitHub towards and into GCC. So currently, what we're working on is sort of, we have a base for const generics. So I'm not going to get into details on that, just a cool feature of Rust that's not present in a lot of languages except C++ and we're getting them working. We're working hard on intrinsics. So those are functions declared in the standard library but implemented by the compiler. They are very LVM dependent and we're running to some issues doing the translation. One big thing we're doing is some work towards running the Rusty test suite. So because we want GCCRS to be an actual Rust compiler and not a toy project or something that compiles a language that looks like Rust but isn't Rust, we're striving to, I mean, we're trying really hard to get that test suite working and we're almost, I think, almost done with compiling an earlier version of Lipcore, so 1.49, which was released a few years ago. So a quick overview of our pipeline. Basically for a Rust compiler, if you don't know anything about compilers, that's fine. What you're going to do is you're going to do a parsing step. So you're going to take the Rust code and you're going to turn it into a data structure, which is sort of a tree, which is called an abstract syntax tree, AST. Then we're going to run an expansion on that. So anytime we're going to see a macro, we're going to expand it and then replace it by its expansion. Name resolution that's basically putting which use, any use linking it to its definition and so on. We're going to do some more transformation on that AST and then finally type check it. And then we can do a lot of error verifications, linting, so stuff like the warnings you get when you have an unused value and that you can prefix it with an underscore, for example. Finally, when that's done, we lower it to the GCC intermediate representation. So that's sort of similar to the last step of Rust C, where it gets lower to LLVM IR. So as I said, we have an AST. We have an HIR. The advantage of having these two sort of high level data structures to represent Rust code is that we can desugar the AST. So remove the syntactic sugar that you have in Rust source code to have sort of a simpler representation within the compiler. So one example, for example, is that the difference, as you know, between methods and function calls is you got like self.method. But within the compiler, it doesn't make any difference. A method is just a function called with an extra argument. So that's how we represent them in the HIR and we sort of do these other transformations such as removing macros because at this point they've already been expended and we don't care about them anymore. And finally, as I said, the last intermediate representation is called generic. And it's not generic at all. It's just the name and it's the GCC intermediate representation. So one thing I'd like to get into is macro expansion. And the reason I want to get into that is because, I mean, I wrote most of it in GCCRS. So I'm the one you have to blame if it stops working when you try GCCRS. So as you know, macros in Rust are typed. So you can have expressions, statements, path, and so on. And someone has to do that checking. And so that's part of the macro expansion part. And as I said, macros are sort of like function calls. You just expand them and then you paste the AST that was generated and you're done. And actually, in Rust, you've got repetitions in your macro. And that's extremely annoying to take care of. So repetitions, if you've ever written them, they're unreadable, but they're very useful. You'll have sort of these operators, which are the clean star interrogation mark and plus sign, which allow you to specify what I want between zero and infinite of something, at least one of something, one or more of something. And because Rust is a very well thought out language, it's actually got ambiguity restrictions to make sure that no matter how the language evolves, your macro is not suddenly going to become ambiguous. And so again, someone has to do that checking and make sure that your macro is not ambiguous. So that's me. So here, this is probably like a very basic macro that you've maybe written or used or whatever. It's a macro that does an addition and that takes any number of argument. You can see in green, I've highlighted the repetition sort of operator marker thingy. And yeah, this basically expands to E plus adding the rest of the expression. Okay. So that's a macro to make tuples. So basically, you're going to give it a list of arguments on the left. A list of arguments on the right is going to make a list of tuples. The thing I like to point out here is that whenever you don't have the same number of arguments, if you're merging repetitions together, it's actually going to, well, it's going to go bad and you have to check that. And again, on really complex macros, making sure that your merged fragments are actually the same number of repetitions and so on, it gets very hard and very tedious. And Rust macros are sort of a language within the language that needs to be taken care of. And that's just one last example on how fun Rust macros are for the ambiguity restriction. For example, you can't have a keyword after an expression because that keyword might become a reserved keyword, might be another expression of good reasons for why it's an ambiguity. And the thing here is if you look at the second sort of matching, second matcher, in that macro, you can see that the operator means it's going to appear between zero and one time. For the third matcher, it's going to happen like it's going to appear between zero and plus infinity times, same for the fourth matcher. So the macro sort of checker has to move forward and make sure that in the case where two doesn't appear, three doesn't appear, and four doesn't appear, the thing after that is allowed in the set of restrictions. In that case, it's not because, well, it's the same as above, so we have to error out. And it gets really annoying. And there's more checks that are Rust specific that we can't really copy paste from the other languages in GCC. So for example, you got privacy in Rust. So you know how you mark your functions as public or just leave them as private. But you've got fun privacy. So you can have a function that's public in a path, so in a module, but not in another one. You can have a function that's public for your parent module, but not anymore. You can have a function that's public for the entire create, but not for users of that create. And yeah, lots of stuff. Same, you've probably come across unsafe. So unsafe is a keyword that sort of unlocks superpowers and segfaults. And basically, at the language level, it's just a keyword. So whether we're dereferencing a row pointer or an actual safe pointer like box, it doesn't matter to the parser or the AST. But we have to go afterwards in the HIR on that type check representation and make sure that what we're dereferencing, well, if we're dereferencing something of type row pointer, it can only happen in unsafe context. Finally, macros are lazy. So if you're from Haskell, you know what that means. It means basically, you're going to expend them as they go before expending the arguments given to them. The fact is macros are not lazy because you got some built-in macros that need to be expended eagerly. And so when you just spent like three months rewriting the expansion system to make sure that they're expended lazily, and you realize that built-in macros need to be expended eagerly, well, I guess really annoying. Finally, caught sharing between crates. So if you've had the misfortune of writing CRC++, you know you have to write headers, basically declaring your generic functions, your bubbling functions, and so on. How do you do that in Rust? The answer is you don't. The compiler does it for you, and basically what it's doing is it's putting some metadata magic in the L format, so the object file, and it's going to encode and serialize all of your exported macros, the generic function, the generic types, the public macros, and so on, and so on. Again, more fun stuff that no one in GCC has done. Maybe GCC go and we have to figure out. Finally, the type system in Rust is extremely safe, complex, and powerful, as you know. There's lots of fun stuff like the never type, generic associated types, and so on. You got some types, and the fact is these constructs are not really present in any of the other languages within GCC. So that's stuff that we sort of have to figure out. Figure out how to, first of all, implement them, and then how to compile them, and translate them to the GCC internal representation. Finally, the last one bit, you got inline assembly in Rust. It's not the same format as GCC's in line assembly, so we have to do the translation. And if you look at Rust C code gen GCC, because Antonio is much farther advanced than us in sort of the back in turn, it's a very fun, like, thousand lines of code to translate from Rust's inline assembly to GCC. As I said, I'm going to talk a little bit about contributing, reviewing, and so on, our workflow, basically. So the workflow for GCCRS is inspired by Rust's workflow. All of our development happens on GitHub. Our communication messaging and so on happens on Zulip, and we use the bore spot to merge our PRs. But at the same time, because we're a GCC project, we have an IRC channel, we have a mailing list, and we accept patches sent on the mailing list, and so on. So the, sorry, the idea about that is that no matter your sort of background, whether you're a new, very young Rust developer who's only used GitHub, or sorry, Thomas Dinosaur, who's used IRC and mailing lists, you can send patches and we'll accept them, review them, and make sure that your contributions get accepted. So GCC development is hard. I made that experience firsthand because I'm not an IRC and mailing list kind of guy. I'm a GitHub kind of guy. And sending patches via email, getting reviews, submitting them, and so on. It's very, very hard. In GCC, you've got a fun thing that on your comments, you have to add change logs. They have a specific format. They're annoying to write. They're very helpful, but they're annoying to write. To send actually patches to get reviewed by GCC, you have to use getSendEmail. So sort of something that sends the email for you and sends the patches in the meantime. Because I wanted to, you know, make sure I didn't break anything, wasn't going to, I don't know, blow up my computer, I decided to try getSendEmail to my own personal address the first time. The one thing I didn't realize is that getSendEmail automatically adds every contributor to the CC list. The first time I sent patches, I actually pinged like 150 people three times, leaked my personal email address. That's fine. No one yelled at me. And so I removed the option to automatically CC people. And so when I actually sent the patches, no one was CC'd. When patches were getting reviewed, the authors weren't aware that their stuff was getting reviewed. Very fun. So, yeah, we do that. I got used to getSendEmail. I'll do that for you. If you submit comments on GitHub, pull requests, and so on, we'll take care of handling that. We have lots of continuous interrogation to make sure that your comments pass the weird new coding style, to make sure that they respect the change log format, to make sure that they build and pass the test, and so on. And we're actually working on a little bot to generate the change log skeleton for you. Furthermore, because of the way GCC works, development happens in stages. So right now, we're in stage four. So basically between sort of January and May, you're not allowed to make changes to common GCC parts. And this is a very good idea. It's to avoid breakage of sort of the common structure of GCC that's going to affect the most languages. But that also means that we have some patches that we cannot merge until May. And so, again, GCCRS takes care of that. We have a staging branch and so on. We keep track of the stages for you. You can merge your stuff. We'll do it for you. And make sure you don't get annoyed by that. So is that working? Are people happy to contribute on GCCRS? I think so. In 2022, we've had over 50 contributors. That's mostly code contributors. We've also had people helping us with the get stuff, the email stuff, CI stuff, and so on. But I'm not counting here the people reporting issues, because there's a lot more than that. We have a lot of students working on GCCRS, which I'm really proud of. I actually started as a Google Summer of Code student on GCCRS, and now I'm a full-time engineer. And we've got multiple internships that are also coming that way. So, for example, we'll have a full-time six-month internship to take care of Libproc this year. As I said, we also have a lot of GCC developers helping us. So people helping us with the get stuff, with the emerging stuff, and so on. People providing very valuable input. And we have people from the Rust team helping us, which is really nice. So people that are willing to work with us on getting the test suite to pass, people that are explaining us how Rust works because it's complex and just helping us not stray far from the path. So what's coming? When is GCCRS ready? GCCRS, to be at least sort of useful, has to be able to compile Libcore. So if you're not aware of this, the standard library in Rust is actually three kids in a trench coat, where you got the core stuff that's necessary for things like additions, creating lemdas, itch raters, four loops, and so on. On top of that, you got the alloc crate, which takes care of all of the structures that need dynamical locations, so your vector, your box, and so on. And all of that forms the Lib standard, which is used by most projects right now. There's a lot of unstable stuff in Libcore. So that means that even if we target Rust 1.49, we have to actually be able to compile a much more advanced version to compile the core library. Finally, we also have to take care of Libproc. If you've never written a proc macro in your life, well, you're missing out, but it's basically a very complex schmielblick that takes the AST, sends it to a remote process communication, gets an AST back, and pastes it. And we have to implement all of that sort of piping between the crate and the compiler, sending the AST tokens, and so on, sending it to a location, all stuff like that. Finally, borrow checking. If you've ever written Rust in your life, which I'm going to assume you have, you've been sort of held at gunpoint by the borough checker. And that's really a core part of the language experience. And we can't really be a Rust compiler without a borough checker. So our aim for that is to reuse the upcoming Polonius project, which is a formalization of the rules of borough checking, and make sure that we can integrate it to a GCCRS. So the way we're going to do that, again, is make sure we have sort of an intentional representation that works for Polonius, create that tiny FFI layer that allows us to speak to Rust from our C++ compiler, and ask Polonius to do the thing. Finally, we're part of this year's GSOC. So if any of what I said interests you, there's probably a project you can work on. For example, last year we had a student that ported the const evaluator from C++ over to our front end, meaning that we can do, well, const evaluation now. So run const functions, do conditionals, for loops, and so on, in const context. This year's GSOC at least includes the following four projects. So adding a better debugging experience for a high-level intermediate representation, adding proper Unicode support, proper metadata exports, so that stuff like the DAI lib, Rust lib, C lib, and so on formats that you'll find when you're exporting Rust libraries. And finally, better error handling for the user of GCCRS and starting to integrate the Rust C error codes to allow us to pass the Rust C test suite. There's a lot of tooling around GCCRS. So there's a test suite that takes like four hours that we run each night. There's a test suite generator because it's a thousand lines of code. So to make sure that, to make sure, well, we don't pass any of the test suites for now, but we have it. So there's a Blake 3 cryptography library, which is quite nice and doesn't rely on the standard library. And there's making sure we can compile libcore 1.49, making sure we can try and compile all of the Rusty test suites, and we're running that every night. We have a generator for that, as I meant. We have a website, a dashboard for the test suite. We have a report generator because they're annoying to write as well. And we got cargo GCCRS, which will allow you to, while instead of doing cargo build, use cargo GCCRS build to build your code with Rust with GCCRS. And all of that tooling is written in Rust for two reasons. The first one is it's much better than C++. The second one is it wouldn't be so freaking cool to compile our own tools with our own compiler. And three reasons, actually. The most important one is to get people from the Rust community to contribute to those tools. Actually, if you're interested in helping GCCRS in one way or another, a good thing would be to, you know, start working on that tooling. And it's all of just fun stuff. The web dashboard is Tokyo and Async and a rocket database and so on, so not database, API. I'm not a web dev. So if you're interested in that, feel free to come and contribute. Finally, can we rewrite GCC in Rust? Maybe. For bootstrapping purposes, so make sure that we have a full bootstrapping chain. You can read a lot of papers on that, trusting, trust, and so on. We'll have to write that compiler in Rust 1.49, which is going to be annoying. It's still a ways off. And I'd like to really point out that the goal of GCCRS is not to break the ecosystem. So we want to make sure that whenever someone compiles one of your crates with GCCRS, they're not actually blaming you for the failure that's going to happen. And yeah, that they report the issue to us because we're not a proper Rust compiler yet and you shouldn't have to suffer for our hubris. The community, we got mugs. If you do pull requests, we'll send you a mug. People that have helped with the compiler got this one. People that have helped with the merge got the one on the right. Lots of links. You can attend them. We have, as I said, maybe I didn't say it, but we have monthly and weekly calls on JetSea. You can attend them, even if you're just interested in listening in. We have an IRC channel, a website, and so on. The goal is to make compilers fun. The goal is to get contributions from everyone, from the GCC community as well as the Rust community. We have Google Summer of Code. There's lots of stuff for you to work on. We got good first PR issues. If you're interested in compilers, come talk to us. We don't bite. We got reports every week. We shout out contributors, so if you do pull requests, we'll tell you about it. We'll tell people about it. We got monthly calls. Do you have any questions? Hi. Awesome project. Thank you. You mentioned one of your goals was to help develop a spec of Rust with the Rust C team. Can you share more about that? There's nothing really started. It's just that you have the Rust reference at the moment, and it tells you how Rust works from a user point of view, but not specifically from a language point of view. At the same time, we don't want a Rust standard like you have with C or C++ where it gets really annoying to get features done. There are efforts from people like Mara Boss and Josh Triplet and so on to have a Rust specification. One of the goals of GCCRS is to say, well, we've had trouble with that because that's not how it is in the reference, or it's not explained well enough, and we had to look at the Rust C source code or try it out to figure out how that works. Stuff like dear reference chains, what type actually gets used for a method call, and so on, and so on. We can point out and say, well, maybe that could take some tweaking because that's not, yeah. Do you have a list already of stuff like that? It's mostly type system stuff. I have some on macros. There's not really a formal list. I think we have some, like we have an actual list somewhere, but yeah, I don't have it in my head right now, sorry. Thanks. Thanks so much. Two questions perhaps related. First, on performance. I wondered if you had any numbers at all on the performance comparison or what your goals are for that. And secondly, I'm kind of surprised by how much you re-implemented in terms of the IRs. Was that an intentional decision or was that because it needed to be in C++ or why not effectively consume more of the Rust stack and then replace LLVM with GCC at the bottom? So regarding performance, we're much faster because we do much less. But we actually don't know about performance yet. We haven't measured it. No benchmarks. We have a ton of stuff missing. The code we emit, we're not trying to optimize it sort of for Rust yet or at least not all the time. So yeah, we're just not there yet. It's going to happen eventually. Regarding the internal representation, consuming the Rust C stuff is difficult. There's a lot of, even if Rust is a very well designed compiler, Rust C, there is some stuff that makes sense only in a Rust C context. And that's also one of the things with Polonius that we're trying to work on is that it does depend on some Rust C specific stuff. So we do aim to contribute to Polonius and make it so that it's a little bit more compiler agnostic, I want to say, but not just to help us, just for it to make sort of more sense and maybe be used by even more languages, who knows? But yeah, sorry. We needed representations. I know it's still too far away, but is binary reproducibility a target of this? No, not really. Sorry. It would be difficult. The Rust ABI is not stable. Rust C changes its sort of internal formats and representations. I don't want to say often, but it does happen. And it would be really difficult to keep up with that without sort of a stability guarantee or a specification of that. It's really not one of our aims. Thanks for the talk. I was wondering about your cargo re-implementation. Wouldn't it be easier to have a command line compatibility with Rust C and then plug that thing into cargo to tell cargo don't use Rust C, use GCC Rust? So it's not a cargo re-implementation. It's a cargo sub-comment. So it's the same as cargo FMT, for example. How it actually works is that we intercept the Rust C command line, as you mentioned, instead of saying, well, fork and start Rust C, we start GCCRS. And on top of that, we do argument translation. So stuff like dash dash edition equals 2018 for Rust C is going to become dash F Rust dash edition equals 2018 for GCCRS. So we have that list and we do the translation and then just launch GCCRS and pipe the result back to cargo. Thanks for the great talk. And one question or maybe a tip, I don't know if it's one, but is there a project or some possibility to transform the LLVM IR to the GCC IR? Because if it is, then you could maybe run some tests on it, like creating the IR via normal Rust C and then your variant and then you can pair the IRs. I think there is a project like that. I can't remember which way around it is if it's an LLVM compiler that takes in GCC IR or a GCC sort of front end that takes in LLVM IR. I think something like that exists. I don't know much about it. I think it's not very famous or anything, but it could be interesting. Yeah. Hello. Do you have a link with Rust in Linux project? Because if I remember, Linux is compiled with GCC, right? Yes. So one of the big, big, big, big targets of GCC IR is for you to be able to at least help or be usable in Rust for Linux. Linux is compiled with GCC a lot. You also have efforts to compile it with Clang. At the moment, what Rust for Linux does is use Rust C, so an LLVM tool chain, but it is one of the sort of goals of the project to, yes, be able to have a fully comparable Linux project even using Rust and C in the kernel. But, yeah. Any other questions? Thank you. I would guess that while re-implementing such a complex project from basically scratch, you probably have a really good chance of finding some mistakes in the upstream, in the original implementation. So do you contribute back to the upstream in such cases? And maybe you remember some of such examples. Thank you. So I don't have sort of these specific examples in my head, sorry. But we do have, as I said, we did find some sort of stuff that didn't make a lot of sense in the specification, sorry, the Rust reference that might have been fixed and so on. But, yeah, whenever we see something that doesn't, to us, make a lot of sense or that deserves some explanation, we try and let people know about it. We try and contribute back to the Rust C project. We're really not treating Rust C as sort of a competitor or anything. And we do want to improve it. And GCCRS is built by people that love Rust and that want to push it forward in our own way. And for bugs regarding like Rust C bugs, GCCRS treats Rust C as sort of the overlord. So whenever Rust C does something, we do the same thing. We don't want to sort of argue about what is correct Rust and what is not correct Rust. Rust C is the Rust compiler. It's the Rust implementation. When you ship a Rust version, you ship the compiler, the library, the sort of the language is all of that, those three projects. So, yeah, we just try and stick with that as a reference. And we don't want to step on any toes. Yep. Unfortunately, that's all the time we have. I think we had a few more questions, but maybe we could do it in the hallway. Let's thank our speaker.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 18.52, "text": " Okay. Hello, everyone. Can you hear me okay? Good. Okay. My name is Arthur Cohen. I'm", "tokens": [50364, 1033, 13, 2425, 11, 1518, 13, 1664, 291, 1568, 385, 1392, 30, 2205, 13, 1033, 13, 1222, 1315, 307, 19624, 32968, 13, 286, 478, 51290], "temperature": 0.0, "avg_logprob": -0.24927873431511646, "compression_ratio": 1.2463768115942029, "no_speech_prob": 0.07961828261613846}, {"id": 1, "seek": 0, "start": 18.52, "end": 24.2, "text": " a compiler engineer at Ambicosm, top left, and today I'm going to talk to you a little", "tokens": [51290, 257, 31958, 11403, 412, 17196, 299, 329, 76, 11, 1192, 1411, 11, 293, 965, 286, 478, 516, 281, 751, 281, 291, 257, 707, 51574], "temperature": 0.0, "avg_logprob": -0.24927873431511646, "compression_ratio": 1.2463768115942029, "no_speech_prob": 0.07961828261613846}, {"id": 2, "seek": 2420, "start": 24.2, "end": 34.2, "text": " bit about Rust GCC. So, first of all, a little summary. We're going to get into what is GCC", "tokens": [50364, 857, 466, 34952, 460, 11717, 13, 407, 11, 700, 295, 439, 11, 257, 707, 12691, 13, 492, 434, 516, 281, 483, 666, 437, 307, 460, 11717, 50864], "temperature": 0.0, "avg_logprob": -0.16237032854998554, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.07882190495729446}, {"id": 3, "seek": 2420, "start": 34.2, "end": 39.84, "text": " because this is a Rust dev room. I assume at least some of you have never used GCC, which", "tokens": [50864, 570, 341, 307, 257, 34952, 1905, 1808, 13, 286, 6552, 412, 1935, 512, 295, 291, 362, 1128, 1143, 460, 11717, 11, 597, 51146], "temperature": 0.0, "avg_logprob": -0.16237032854998554, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.07882190495729446}, {"id": 4, "seek": 2420, "start": 39.84, "end": 46.64, "text": " is good for you. It's good for your health. Then, what is Rust GCC? So, why do we make", "tokens": [51146, 307, 665, 337, 291, 13, 467, 311, 665, 337, 428, 1585, 13, 1396, 11, 437, 307, 34952, 460, 11717, 30, 407, 11, 983, 360, 321, 652, 51486], "temperature": 0.0, "avg_logprob": -0.16237032854998554, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.07882190495729446}, {"id": 5, "seek": 2420, "start": 46.64, "end": 52.32, "text": " it? Why, I mean, working on it. Who was stupid enough to even think about re-implementing", "tokens": [51486, 309, 30, 1545, 11, 286, 914, 11, 1364, 322, 309, 13, 2102, 390, 6631, 1547, 281, 754, 519, 466, 319, 12, 332, 43704, 278, 51770], "temperature": 0.0, "avg_logprob": -0.16237032854998554, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.07882190495729446}, {"id": 6, "seek": 5232, "start": 52.32, "end": 57.96, "text": " a Rust compiler from scratch? Then, how do we do that? So, I'm going to get into some", "tokens": [50364, 257, 34952, 31958, 490, 8459, 30, 1396, 11, 577, 360, 321, 360, 300, 30, 407, 11, 286, 478, 516, 281, 483, 666, 512, 50646], "temperature": 0.0, "avg_logprob": -0.1494219930548417, "compression_ratio": 1.7054263565891472, "no_speech_prob": 0.01658012717962265}, {"id": 7, "seek": 5232, "start": 57.96, "end": 63.120000000000005, "text": " of the steps of our compilers, our parser, our intermediate representation, and all", "tokens": [50646, 295, 264, 4439, 295, 527, 715, 388, 433, 11, 527, 21156, 260, 11, 527, 19376, 10290, 11, 293, 439, 50904], "temperature": 0.0, "avg_logprob": -0.1494219930548417, "compression_ratio": 1.7054263565891472, "no_speech_prob": 0.01658012717962265}, {"id": 8, "seek": 5232, "start": 63.120000000000005, "end": 68.8, "text": " of the extra fun Rust stuff that we have to handle because it's a really complex language.", "tokens": [50904, 295, 264, 2857, 1019, 34952, 1507, 300, 321, 362, 281, 4813, 570, 309, 311, 257, 534, 3997, 2856, 13, 51188], "temperature": 0.0, "avg_logprob": -0.1494219930548417, "compression_ratio": 1.7054263565891472, "no_speech_prob": 0.01658012717962265}, {"id": 9, "seek": 5232, "start": 68.8, "end": 75.24000000000001, "text": " Then, I'd like to get into our workflow, the community. So, all of the contributors, how", "tokens": [51188, 1396, 11, 286, 1116, 411, 281, 483, 666, 527, 20993, 11, 264, 1768, 13, 407, 11, 439, 295, 264, 45627, 11, 577, 51510], "temperature": 0.0, "avg_logprob": -0.1494219930548417, "compression_ratio": 1.7054263565891472, "no_speech_prob": 0.01658012717962265}, {"id": 10, "seek": 5232, "start": 75.24000000000001, "end": 80.52, "text": " we work together, our merging process, GitHub, all of that, and all that interesting stuff", "tokens": [51510, 321, 589, 1214, 11, 527, 44559, 1399, 11, 23331, 11, 439, 295, 300, 11, 293, 439, 300, 1880, 1507, 51774], "temperature": 0.0, "avg_logprob": -0.1494219930548417, "compression_ratio": 1.7054263565891472, "no_speech_prob": 0.01658012717962265}, {"id": 11, "seek": 8052, "start": 80.6, "end": 86.6, "text": " that comes with it. And finally, some sort of future questions. What are we going to", "tokens": [50368, 300, 1487, 365, 309, 13, 400, 2721, 11, 512, 1333, 295, 2027, 1651, 13, 708, 366, 321, 516, 281, 50668], "temperature": 0.0, "avg_logprob": -0.16940108935038248, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.016252394765615463}, {"id": 12, "seek": 8052, "start": 86.6, "end": 94.6, "text": " do? What are our goals? When are we going to stop? So, what is GCC? GCC stands for the", "tokens": [50668, 360, 30, 708, 366, 527, 5493, 30, 1133, 366, 321, 516, 281, 1590, 30, 407, 11, 437, 307, 460, 11717, 30, 460, 11717, 7382, 337, 264, 51068], "temperature": 0.0, "avg_logprob": -0.16940108935038248, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.016252394765615463}, {"id": 13, "seek": 8052, "start": 94.6, "end": 103.28, "text": " GNU Compiler Collection. It's sort of a very, very big program that contains multiple compilers", "tokens": [51068, 46411, 52, 6620, 5441, 30981, 13, 467, 311, 1333, 295, 257, 588, 11, 588, 955, 1461, 300, 8306, 3866, 715, 388, 433, 51502], "temperature": 0.0, "avg_logprob": -0.16940108935038248, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.016252394765615463}, {"id": 14, "seek": 8052, "start": 103.28, "end": 110.0, "text": " for multiple languages and that all share the same back end. So, the same sort of assembly", "tokens": [51502, 337, 3866, 8650, 293, 300, 439, 2073, 264, 912, 646, 917, 13, 407, 11, 264, 912, 1333, 295, 12103, 51838], "temperature": 0.0, "avg_logprob": -0.16940108935038248, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.016252394765615463}, {"id": 15, "seek": 11000, "start": 110.0, "end": 115.64, "text": " and mission and optimizers and so on and so on. One fun thing about GCC is that it's", "tokens": [50364, 293, 4447, 293, 5028, 22525, 293, 370, 322, 293, 370, 322, 13, 1485, 1019, 551, 466, 460, 11717, 307, 300, 309, 311, 50646], "temperature": 0.0, "avg_logprob": -0.16068618080832742, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.002342181047424674}, {"id": 16, "seek": 11000, "start": 115.64, "end": 125.64, "text": " very old. It's 30 years old, maybe more. It's really in C++11, so that's great. As I say,", "tokens": [50646, 588, 1331, 13, 467, 311, 2217, 924, 1331, 11, 1310, 544, 13, 467, 311, 534, 294, 383, 25472, 5348, 11, 370, 300, 311, 869, 13, 1018, 286, 584, 11, 51146], "temperature": 0.0, "avg_logprob": -0.16068618080832742, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.002342181047424674}, {"id": 17, "seek": 11000, "start": 125.64, "end": 131.96, "text": " it's multiple languages in one. So, you got a C compiler, a C++ compiler, Fortran compiler,", "tokens": [51146, 309, 311, 3866, 8650, 294, 472, 13, 407, 11, 291, 658, 257, 383, 31958, 11, 257, 383, 25472, 31958, 11, 11002, 4257, 31958, 11, 51462], "temperature": 0.0, "avg_logprob": -0.16068618080832742, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.002342181047424674}, {"id": 18, "seek": 11000, "start": 131.96, "end": 136.48, "text": " so on and so on, and we're trying to add Rust to it. And if you know a little bit about how", "tokens": [51462, 370, 322, 293, 370, 322, 11, 293, 321, 434, 1382, 281, 909, 34952, 281, 309, 13, 400, 498, 291, 458, 257, 707, 857, 466, 577, 51688], "temperature": 0.0, "avg_logprob": -0.16068618080832742, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.002342181047424674}, {"id": 19, "seek": 13648, "start": 136.56, "end": 143.92, "text": " Rust C works, Rust C is called a front-end. It sort of does its thing and then talks to", "tokens": [50368, 34952, 383, 1985, 11, 34952, 383, 307, 1219, 257, 1868, 12, 521, 13, 467, 1333, 295, 775, 1080, 551, 293, 550, 6686, 281, 50736], "temperature": 0.0, "avg_logprob": -0.14182286696000532, "compression_ratio": 1.6073059360730593, "no_speech_prob": 0.0013356073759496212}, {"id": 20, "seek": 13648, "start": 143.92, "end": 150.32, "text": " LLVM to generate code. And that's what's good about LLVM is you can use it as a library.", "tokens": [50736, 441, 43, 53, 44, 281, 8460, 3089, 13, 400, 300, 311, 437, 311, 665, 466, 441, 43, 53, 44, 307, 291, 393, 764, 309, 382, 257, 6405, 13, 51056], "temperature": 0.0, "avg_logprob": -0.14182286696000532, "compression_ratio": 1.6073059360730593, "no_speech_prob": 0.0013356073759496212}, {"id": 21, "seek": 13648, "start": 150.32, "end": 157.44, "text": " You cannot do that with GCC. So, you have libGCCJet, which is sort of an attempt at having", "tokens": [51056, 509, 2644, 360, 300, 365, 460, 11717, 13, 407, 11, 291, 362, 22854, 38, 11717, 41, 302, 11, 597, 307, 1333, 295, 364, 5217, 412, 1419, 51412], "temperature": 0.0, "avg_logprob": -0.14182286696000532, "compression_ratio": 1.6073059360730593, "no_speech_prob": 0.0013356073759496212}, {"id": 22, "seek": 13648, "start": 157.44, "end": 163.39999999999998, "text": " a library for GCC, which is quite recent, or you can do like Rust GCC does, which is", "tokens": [51412, 257, 6405, 337, 460, 11717, 11, 597, 307, 1596, 5162, 11, 420, 291, 393, 360, 411, 34952, 460, 11717, 775, 11, 597, 307, 51710], "temperature": 0.0, "avg_logprob": -0.14182286696000532, "compression_ratio": 1.6073059360730593, "no_speech_prob": 0.0013356073759496212}, {"id": 23, "seek": 16340, "start": 163.44, "end": 172.04000000000002, "text": " create the compiler in tree. If you've been following sort of the Rust in GCC story, you'll", "tokens": [50366, 1884, 264, 31958, 294, 4230, 13, 759, 291, 600, 668, 3480, 1333, 295, 264, 34952, 294, 460, 11717, 1657, 11, 291, 603, 50796], "temperature": 0.0, "avg_logprob": -0.14943028387622298, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.0011261270847171545}, {"id": 24, "seek": 16340, "start": 172.04000000000002, "end": 178.6, "text": " know that Rust C code gen GCC, the project by Antoyo, actually uses libGCCJet, and that's a way", "tokens": [50796, 458, 300, 34952, 383, 3089, 1049, 460, 11717, 11, 264, 1716, 538, 5130, 26251, 11, 767, 4960, 22854, 38, 11717, 41, 302, 11, 293, 300, 311, 257, 636, 51124], "temperature": 0.0, "avg_logprob": -0.14943028387622298, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.0011261270847171545}, {"id": 25, "seek": 16340, "start": 178.6, "end": 184.6, "text": " better idea than Rust GCC, but let's keep going. So, what is Rust GCC? It's a full", "tokens": [51124, 1101, 1558, 813, 34952, 460, 11717, 11, 457, 718, 311, 1066, 516, 13, 407, 11, 437, 307, 34952, 460, 11717, 30, 467, 311, 257, 1577, 51424], "temperature": 0.0, "avg_logprob": -0.14943028387622298, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.0011261270847171545}, {"id": 26, "seek": 16340, "start": 184.6, "end": 190.44, "text": " implementation of Rust on top of the GNU tool chain. So, as I said earlier, this means that", "tokens": [51424, 11420, 295, 34952, 322, 1192, 295, 264, 46411, 52, 2290, 5021, 13, 407, 11, 382, 286, 848, 3071, 11, 341, 1355, 300, 51716], "temperature": 0.0, "avg_logprob": -0.14943028387622298, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.0011261270847171545}, {"id": 27, "seek": 19044, "start": 191.07999999999998, "end": 197.8, "text": " we're actually re-implementing the compiler from scratch. So, we started from sort of nothing", "tokens": [50396, 321, 434, 767, 319, 12, 332, 43704, 278, 264, 31958, 490, 8459, 13, 407, 11, 321, 1409, 490, 1333, 295, 1825, 50732], "temperature": 0.0, "avg_logprob": -0.09177168109748937, "compression_ratio": 1.4595959595959596, "no_speech_prob": 0.0012000259011983871}, {"id": 28, "seek": 19044, "start": 197.8, "end": 204.28, "text": " and kept adding and adding stuff until, well, until today. The project was originally started in", "tokens": [50732, 293, 4305, 5127, 293, 5127, 1507, 1826, 11, 731, 11, 1826, 965, 13, 440, 1716, 390, 7993, 1409, 294, 51056], "temperature": 0.0, "avg_logprob": -0.09177168109748937, "compression_ratio": 1.4595959595959596, "no_speech_prob": 0.0012000259011983871}, {"id": 29, "seek": 19044, "start": 204.28, "end": 214.04, "text": " 2014. So, just for one quick bit, I think at the time libGCCJet did not exist. So, it's not as bad", "tokens": [51056, 8227, 13, 407, 11, 445, 337, 472, 1702, 857, 11, 286, 519, 412, 264, 565, 22854, 38, 11717, 41, 302, 630, 406, 2514, 13, 407, 11, 309, 311, 406, 382, 1578, 51544], "temperature": 0.0, "avg_logprob": -0.09177168109748937, "compression_ratio": 1.4595959595959596, "no_speech_prob": 0.0012000259011983871}, {"id": 30, "seek": 21404, "start": 214.04, "end": 222.28, "text": " an idea as it is to add it to the entry GCC, to the GCC tree. And originally in 2014, if you", "tokens": [50364, 364, 1558, 382, 309, 307, 281, 909, 309, 281, 264, 8729, 460, 11717, 11, 281, 264, 460, 11717, 4230, 13, 400, 7993, 294, 8227, 11, 498, 291, 50776], "temperature": 0.0, "avg_logprob": -0.0810536078686984, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0023542463313788176}, {"id": 31, "seek": 21404, "start": 222.28, "end": 228.28, "text": " know a bit about the history of Rust, you didn't have a stable version yet. Rust version 1.0 released", "tokens": [50776, 458, 257, 857, 466, 264, 2503, 295, 34952, 11, 291, 994, 380, 362, 257, 8351, 3037, 1939, 13, 34952, 3037, 502, 13, 15, 4736, 51076], "temperature": 0.0, "avg_logprob": -0.0810536078686984, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0023542463313788176}, {"id": 32, "seek": 21404, "start": 228.28, "end": 235.16, "text": " in 2015. So, that meant that in 2014, there was a lot of churn within the language. If some of", "tokens": [51076, 294, 7546, 13, 407, 11, 300, 4140, 300, 294, 8227, 11, 456, 390, 257, 688, 295, 417, 925, 1951, 264, 2856, 13, 759, 512, 295, 51420], "temperature": 0.0, "avg_logprob": -0.0810536078686984, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0023542463313788176}, {"id": 33, "seek": 21404, "start": 235.16, "end": 240.6, "text": " you were here at the beginning, you remember maybe the tilde pointer, the add symbol that was used", "tokens": [51420, 291, 645, 510, 412, 264, 2863, 11, 291, 1604, 1310, 264, 45046, 23918, 11, 264, 909, 5986, 300, 390, 1143, 51692], "temperature": 0.0, "avg_logprob": -0.0810536078686984, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0023542463313788176}, {"id": 34, "seek": 24060, "start": 240.6, "end": 246.84, "text": " for a lot of stuff, the garbage collector and so on and so on. So, eventually the project had to", "tokens": [50364, 337, 257, 688, 295, 1507, 11, 264, 14150, 23960, 293, 370, 322, 293, 370, 322, 13, 407, 11, 4728, 264, 1716, 632, 281, 50676], "temperature": 0.0, "avg_logprob": -0.15617479162013276, "compression_ratio": 1.5349794238683128, "no_speech_prob": 0.003566112369298935}, {"id": 35, "seek": 24060, "start": 246.84, "end": 254.44, "text": " drop because one, even though he was very, very into it, one developer could not just keep up.", "tokens": [50676, 3270, 570, 472, 11, 754, 1673, 415, 390, 588, 11, 588, 666, 309, 11, 472, 10754, 727, 406, 445, 1066, 493, 13, 51056], "temperature": 0.0, "avg_logprob": -0.15617479162013276, "compression_ratio": 1.5349794238683128, "no_speech_prob": 0.003566112369298935}, {"id": 36, "seek": 24060, "start": 254.44, "end": 260.68, "text": " It was revived in 2019, thanks to multiple people. First of all, open-source security", "tokens": [51056, 467, 390, 48358, 294, 6071, 11, 3231, 281, 3866, 561, 13, 2386, 295, 439, 11, 1269, 12, 41676, 3825, 51368], "temperature": 0.0, "avg_logprob": -0.15617479162013276, "compression_ratio": 1.5349794238683128, "no_speech_prob": 0.003566112369298935}, {"id": 37, "seek": 24060, "start": 260.68, "end": 266.68, "text": " and then Mbaccosm, where the two companies sponsoring this project. It receives contribution to", "tokens": [51368, 293, 550, 376, 65, 326, 6877, 76, 11, 689, 264, 732, 3431, 30311, 341, 1716, 13, 467, 20717, 13150, 281, 51668], "temperature": 0.0, "avg_logprob": -0.15617479162013276, "compression_ratio": 1.5349794238683128, "no_speech_prob": 0.003566112369298935}, {"id": 38, "seek": 26668, "start": 267.40000000000003, "end": 272.76, "text": " from many GCC and non-GCC developers. So, I'm going to talk about that a bit later,", "tokens": [50400, 490, 867, 460, 11717, 293, 2107, 12, 38, 11717, 8849, 13, 407, 11, 286, 478, 516, 281, 751, 466, 300, 257, 857, 1780, 11, 50668], "temperature": 0.0, "avg_logprob": -0.0888190860590659, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0025305438321083784}, {"id": 39, "seek": 26668, "start": 272.76, "end": 277.08, "text": " but we do have some people that have been working on GCC for a very long time", "tokens": [50668, 457, 321, 360, 362, 512, 561, 300, 362, 668, 1364, 322, 460, 11717, 337, 257, 588, 938, 565, 50884], "temperature": 0.0, "avg_logprob": -0.0888190860590659, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0025305438321083784}, {"id": 40, "seek": 26668, "start": 277.08, "end": 283.8, "text": " helping us and I'd like to thank them, but more on that later. So, why do we do that?", "tokens": [50884, 4315, 505, 293, 286, 1116, 411, 281, 1309, 552, 11, 457, 544, 322, 300, 1780, 13, 407, 11, 983, 360, 321, 360, 300, 30, 51220], "temperature": 0.0, "avg_logprob": -0.0888190860590659, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0025305438321083784}, {"id": 41, "seek": 26668, "start": 284.76, "end": 290.28000000000003, "text": " The goal is to upstream it with mainline GCC. So, that means that whenever you're going to", "tokens": [51268, 440, 3387, 307, 281, 33915, 309, 365, 2135, 1889, 460, 11717, 13, 407, 11, 300, 1355, 300, 5699, 291, 434, 516, 281, 51544], "temperature": 0.0, "avg_logprob": -0.0888190860590659, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0025305438321083784}, {"id": 42, "seek": 26668, "start": 290.92, "end": 295.72, "text": " put your favorite Linux distribution, install GCC, you're going to have GCC Rust with it.", "tokens": [51576, 829, 428, 2954, 18734, 7316, 11, 3625, 460, 11717, 11, 291, 434, 516, 281, 362, 460, 11717, 34952, 365, 309, 13, 51816], "temperature": 0.0, "avg_logprob": -0.0888190860590659, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0025305438321083784}, {"id": 43, "seek": 29572, "start": 296.44000000000005, "end": 303.48, "text": " It's an alternative implementation of Rust. We hope that it helps maybe draw out and sort of", "tokens": [50400, 467, 311, 364, 8535, 11420, 295, 34952, 13, 492, 1454, 300, 309, 3665, 1310, 2642, 484, 293, 1333, 295, 50752], "temperature": 0.0, "avg_logprob": -0.1187668151043831, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.0009351925691589713}, {"id": 44, "seek": 29572, "start": 303.48, "end": 309.0, "text": " drive the specification effort and that we can help the Rust C team figure out some", "tokens": [50752, 3332, 264, 31256, 4630, 293, 300, 321, 393, 854, 264, 34952, 383, 1469, 2573, 484, 512, 51028], "temperature": 0.0, "avg_logprob": -0.1187668151043831, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.0009351925691589713}, {"id": 45, "seek": 29572, "start": 309.72, "end": 315.48, "text": " pieces where the language isn't as clear as they'd like it to be. It reuses the GNU toolchain,", "tokens": [51064, 3755, 689, 264, 2856, 1943, 380, 382, 1850, 382, 436, 1116, 411, 309, 281, 312, 13, 467, 319, 8355, 264, 46411, 52, 2290, 11509, 11, 51352], "temperature": 0.0, "avg_logprob": -0.1187668151043831, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.0009351925691589713}, {"id": 46, "seek": 29572, "start": 315.48, "end": 323.32000000000005, "text": " so GNU-LD, GNU-AS, GDB, but it does reuse the official Rust standard library,", "tokens": [51352, 370, 46411, 52, 12, 23704, 11, 46411, 52, 12, 3160, 11, 460, 27735, 11, 457, 309, 775, 26225, 264, 4783, 34952, 3832, 6405, 11, 51744], "temperature": 0.0, "avg_logprob": -0.1187668151043831, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.0009351925691589713}, {"id": 47, "seek": 32332, "start": 323.32, "end": 330.76, "text": " so Libcore, Libasti, and so on. And because of the way GCC is sort of architecture,", "tokens": [50364, 370, 15834, 12352, 11, 15834, 24080, 11, 293, 370, 322, 13, 400, 570, 295, 264, 636, 460, 11717, 307, 1333, 295, 9482, 11, 50736], "temperature": 0.0, "avg_logprob": -0.15051545037163627, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.0005766201065853238}, {"id": 48, "seek": 32332, "start": 331.32, "end": 337.4, "text": " once you get to that common GCC backend and common GCC intermediate representation,", "tokens": [50764, 1564, 291, 483, 281, 300, 2689, 460, 11717, 38087, 293, 2689, 460, 11717, 19376, 10290, 11, 51068], "temperature": 0.0, "avg_logprob": -0.15051545037163627, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.0005766201065853238}, {"id": 49, "seek": 32332, "start": 337.4, "end": 343.48, "text": " you can basically reuse all of the plugins that have been written for GCC ever. And that means", "tokens": [51068, 291, 393, 1936, 26225, 439, 295, 264, 33759, 300, 362, 668, 3720, 337, 460, 11717, 1562, 13, 400, 300, 1355, 51372], "temperature": 0.0, "avg_logprob": -0.15051545037163627, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.0005766201065853238}, {"id": 50, "seek": 32332, "start": 343.48, "end": 350.6, "text": " a lot and a lot and a lot of plugins, security plugins, stuff like the static analyzers,", "tokens": [51372, 257, 688, 293, 257, 688, 293, 257, 688, 295, 33759, 11, 3825, 33759, 11, 1507, 411, 264, 13437, 6459, 41698, 11, 51728], "temperature": 0.0, "avg_logprob": -0.15051545037163627, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.0005766201065853238}, {"id": 51, "seek": 35060, "start": 350.68, "end": 355.72, "text": " so you might have heard about that, the LTO, which is not really a plugin, but we can make use of it,", "tokens": [50368, 370, 291, 1062, 362, 2198, 466, 300, 11, 264, 441, 15427, 11, 597, 307, 406, 534, 257, 23407, 11, 457, 321, 393, 652, 764, 295, 309, 11, 50620], "temperature": 0.0, "avg_logprob": -0.11890252139590202, "compression_ratio": 1.5203252032520325, "no_speech_prob": 0.0006356872618198395}, {"id": 52, "seek": 35060, "start": 356.68, "end": 363.96000000000004, "text": " CFE, CFI security plugins, and so on. We also hope that because we're writing it in C++,", "tokens": [50668, 21792, 36, 11, 21792, 40, 3825, 33759, 11, 293, 370, 322, 13, 492, 611, 1454, 300, 570, 321, 434, 3579, 309, 294, 383, 25472, 11, 51032], "temperature": 0.0, "avg_logprob": -0.11890252139590202, "compression_ratio": 1.5203252032520325, "no_speech_prob": 0.0006356872618198395}, {"id": 53, "seek": 35060, "start": 363.96000000000004, "end": 370.28000000000003, "text": " that means we can backport it, so to previous versions of GCC. And hopefully, that will help", "tokens": [51032, 300, 1355, 321, 393, 646, 2707, 309, 11, 370, 281, 3894, 9606, 295, 460, 11717, 13, 400, 4696, 11, 300, 486, 854, 51348], "temperature": 0.0, "avg_logprob": -0.11890252139590202, "compression_ratio": 1.5203252032520325, "no_speech_prob": 0.0006356872618198395}, {"id": 54, "seek": 35060, "start": 370.92, "end": 378.12, "text": " some systems get Rust, hopefully. And then because GCC, as I said, is much older than LVM,", "tokens": [51380, 512, 3652, 483, 34952, 11, 4696, 13, 400, 550, 570, 460, 11717, 11, 382, 286, 848, 11, 307, 709, 4906, 813, 441, 53, 44, 11, 51740], "temperature": 0.0, "avg_logprob": -0.11890252139590202, "compression_ratio": 1.5203252032520325, "no_speech_prob": 0.0006356872618198395}, {"id": 55, "seek": 37812, "start": 378.12, "end": 384.68, "text": " it has support for more architectures and more targets than LVM. I mean, it had. Now,", "tokens": [50364, 309, 575, 1406, 337, 544, 6331, 1303, 293, 544, 12911, 813, 441, 53, 44, 13, 286, 914, 11, 309, 632, 13, 823, 11, 50692], "temperature": 0.0, "avg_logprob": -0.13070641731729313, "compression_ratio": 1.5064935064935066, "no_speech_prob": 0.0024801846593618393}, {"id": 56, "seek": 37812, "start": 384.68, "end": 390.92, "text": " you guys have the M1 Mac, and we're still far on that. So technically, thanks to GCCRS,", "tokens": [50692, 291, 1074, 362, 264, 376, 16, 5707, 11, 293, 321, 434, 920, 1400, 322, 300, 13, 407, 12120, 11, 3231, 281, 460, 11717, 43580, 11, 51004], "temperature": 0.0, "avg_logprob": -0.13070641731729313, "compression_ratio": 1.5064935064935066, "no_speech_prob": 0.0024801846593618393}, {"id": 57, "seek": 37812, "start": 390.92, "end": 396.04, "text": " you will now be able to run Rust on your favorite Soviet satellite and so on.", "tokens": [51004, 291, 486, 586, 312, 1075, 281, 1190, 34952, 322, 428, 2954, 11348, 16016, 293, 370, 322, 13, 51260], "temperature": 0.0, "avg_logprob": -0.13070641731729313, "compression_ratio": 1.5064935064935066, "no_speech_prob": 0.0024801846593618393}, {"id": 58, "seek": 37812, "start": 398.92, "end": 406.44, "text": " There's a link for that. The slides are on the talks page, and there's a lot of frequently asked", "tokens": [51404, 821, 311, 257, 2113, 337, 300, 13, 440, 9788, 366, 322, 264, 6686, 3028, 11, 293, 456, 311, 257, 688, 295, 10374, 2351, 51780], "temperature": 0.0, "avg_logprob": -0.13070641731729313, "compression_ratio": 1.5064935064935066, "no_speech_prob": 0.0024801846593618393}, {"id": 59, "seek": 40644, "start": 406.52, "end": 414.44, "text": " questions. So that's sort of the milestone tab that we put together in each and every one of our", "tokens": [50368, 1651, 13, 407, 300, 311, 1333, 295, 264, 28048, 4421, 300, 321, 829, 1214, 294, 1184, 293, 633, 472, 295, 527, 50764], "temperature": 0.0, "avg_logprob": -0.0872763827227164, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.0012806906597688794}, {"id": 60, "seek": 40644, "start": 414.44, "end": 421.08, "text": " weekly and monthly reports. And the takeaway from here is that the effort has been ongoing since", "tokens": [50764, 12460, 293, 12878, 7122, 13, 400, 264, 30681, 490, 510, 307, 300, 264, 4630, 575, 668, 10452, 1670, 51096], "temperature": 0.0, "avg_logprob": -0.0872763827227164, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.0012806906597688794}, {"id": 61, "seek": 40644, "start": 421.8, "end": 427.0, "text": " 2020 and even a little bit beforehand, and we've done a lot of effort and a lot of progress.", "tokens": [51132, 4808, 293, 754, 257, 707, 857, 22893, 11, 293, 321, 600, 1096, 257, 688, 295, 4630, 293, 257, 688, 295, 4205, 13, 51392], "temperature": 0.0, "avg_logprob": -0.0872763827227164, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.0012806906597688794}, {"id": 62, "seek": 42700, "start": 427.96, "end": 435.48, "text": " Right now, we're around there. So we have upstreamed the first version of GCC Rust", "tokens": [50412, 1779, 586, 11, 321, 434, 926, 456, 13, 407, 321, 362, 33915, 292, 264, 700, 3037, 295, 460, 11717, 34952, 50788], "temperature": 0.0, "avg_logprob": -0.11841643682800897, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.0040055676363408566}, {"id": 63, "seek": 42700, "start": 435.48, "end": 442.04, "text": " within GCC. So next time, when you install GCC13, so sorry for the people on Ubuntu,", "tokens": [50788, 1951, 460, 11717, 13, 407, 958, 565, 11, 562, 291, 3625, 460, 11717, 7668, 11, 370, 2597, 337, 264, 561, 322, 30230, 45605, 11, 51116], "temperature": 0.0, "avg_logprob": -0.11841643682800897, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.0040055676363408566}, {"id": 64, "seek": 42700, "start": 442.04, "end": 449.4, "text": " that's in like 10 years, but next time you update GCC, you'll have GCCRS in it. You can use it,", "tokens": [51116, 300, 311, 294, 411, 1266, 924, 11, 457, 958, 565, 291, 5623, 460, 11717, 11, 291, 603, 362, 460, 11717, 43580, 294, 309, 13, 509, 393, 764, 309, 11, 51484], "temperature": 0.0, "avg_logprob": -0.11841643682800897, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.0040055676363408566}, {"id": 65, "seek": 42700, "start": 449.4, "end": 454.36, "text": " you can start hacking on it, you can please report issues when it inevitably crashes and dies", "tokens": [51484, 291, 393, 722, 31422, 322, 309, 11, 291, 393, 1767, 2275, 2663, 562, 309, 28171, 28642, 293, 2714, 51732], "temperature": 0.0, "avg_logprob": -0.11841643682800897, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.0040055676363408566}, {"id": 66, "seek": 45436, "start": 454.36, "end": 462.28000000000003, "text": " horribly. And yeah, we're sending more and more patches upstream and getting more and more", "tokens": [50364, 45028, 13, 400, 1338, 11, 321, 434, 7750, 544, 293, 544, 26531, 33915, 293, 1242, 544, 293, 544, 50760], "temperature": 0.0, "avg_logprob": -0.1092561403910319, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.0008273875573650002}, {"id": 67, "seek": 45436, "start": 462.28000000000003, "end": 467.64, "text": " of our compiler whose development happens on GitHub towards and into GCC.", "tokens": [50760, 295, 527, 31958, 6104, 3250, 2314, 322, 23331, 3030, 293, 666, 460, 11717, 13, 51028], "temperature": 0.0, "avg_logprob": -0.1092561403910319, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.0008273875573650002}, {"id": 68, "seek": 45436, "start": 469.16, "end": 477.24, "text": " So currently, what we're working on is sort of, we have a base for const generics. So I'm not going", "tokens": [51104, 407, 4362, 11, 437, 321, 434, 1364, 322, 307, 1333, 295, 11, 321, 362, 257, 3096, 337, 1817, 1337, 1167, 13, 407, 286, 478, 406, 516, 51508], "temperature": 0.0, "avg_logprob": -0.1092561403910319, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.0008273875573650002}, {"id": 69, "seek": 45436, "start": 477.24, "end": 482.44, "text": " to get into details on that, just a cool feature of Rust that's not present in a lot of languages", "tokens": [51508, 281, 483, 666, 4365, 322, 300, 11, 445, 257, 1627, 4111, 295, 34952, 300, 311, 406, 1974, 294, 257, 688, 295, 8650, 51768], "temperature": 0.0, "avg_logprob": -0.1092561403910319, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.0008273875573650002}, {"id": 70, "seek": 48244, "start": 483.32, "end": 490.36, "text": " except C++ and we're getting them working. We're working hard on intrinsics. So those are functions", "tokens": [50408, 3993, 383, 25472, 293, 321, 434, 1242, 552, 1364, 13, 492, 434, 1364, 1152, 322, 28621, 1167, 13, 407, 729, 366, 6828, 50760], "temperature": 0.0, "avg_logprob": -0.10189419852362738, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.0011815151665359735}, {"id": 71, "seek": 48244, "start": 490.36, "end": 496.84, "text": " declared in the standard library but implemented by the compiler. They are very LVM dependent", "tokens": [50760, 15489, 294, 264, 3832, 6405, 457, 12270, 538, 264, 31958, 13, 814, 366, 588, 441, 53, 44, 12334, 51084], "temperature": 0.0, "avg_logprob": -0.10189419852362738, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.0011815151665359735}, {"id": 72, "seek": 48244, "start": 496.84, "end": 502.68, "text": " and we're running to some issues doing the translation. One big thing we're doing is some", "tokens": [51084, 293, 321, 434, 2614, 281, 512, 2663, 884, 264, 12853, 13, 1485, 955, 551, 321, 434, 884, 307, 512, 51376], "temperature": 0.0, "avg_logprob": -0.10189419852362738, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.0011815151665359735}, {"id": 73, "seek": 48244, "start": 502.68, "end": 509.08, "text": " work towards running the Rusty test suite. So because we want GCCRS to be an actual Rust", "tokens": [51376, 589, 3030, 2614, 264, 34952, 88, 1500, 14205, 13, 407, 570, 321, 528, 460, 11717, 43580, 281, 312, 364, 3539, 34952, 51696], "temperature": 0.0, "avg_logprob": -0.10189419852362738, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.0011815151665359735}, {"id": 74, "seek": 50908, "start": 509.08, "end": 515.4, "text": " compiler and not a toy project or something that compiles a language that looks like Rust but", "tokens": [50364, 31958, 293, 406, 257, 12058, 1716, 420, 746, 300, 715, 4680, 257, 2856, 300, 1542, 411, 34952, 457, 50680], "temperature": 0.0, "avg_logprob": -0.14021281401316324, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.0007602067198604345}, {"id": 75, "seek": 50908, "start": 515.4, "end": 521.0, "text": " isn't Rust, we're striving to, I mean, we're trying really hard to get that test suite working", "tokens": [50680, 1943, 380, 34952, 11, 321, 434, 36582, 281, 11, 286, 914, 11, 321, 434, 1382, 534, 1152, 281, 483, 300, 1500, 14205, 1364, 50960], "temperature": 0.0, "avg_logprob": -0.14021281401316324, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.0007602067198604345}, {"id": 76, "seek": 50908, "start": 521.56, "end": 528.04, "text": " and we're almost, I think, almost done with compiling an earlier version of Lipcore, so 1.49,", "tokens": [50988, 293, 321, 434, 1920, 11, 286, 519, 11, 1920, 1096, 365, 715, 4883, 364, 3071, 3037, 295, 27475, 12352, 11, 370, 502, 13, 14938, 11, 51312], "temperature": 0.0, "avg_logprob": -0.14021281401316324, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.0007602067198604345}, {"id": 77, "seek": 50908, "start": 528.04, "end": 535.3199999999999, "text": " which was released a few years ago. So a quick overview of our pipeline. Basically for a Rust", "tokens": [51312, 597, 390, 4736, 257, 1326, 924, 2057, 13, 407, 257, 1702, 12492, 295, 527, 15517, 13, 8537, 337, 257, 34952, 51676], "temperature": 0.0, "avg_logprob": -0.14021281401316324, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.0007602067198604345}, {"id": 78, "seek": 53532, "start": 535.32, "end": 540.6800000000001, "text": " compiler, if you don't know anything about compilers, that's fine. What you're going to do is you're", "tokens": [50364, 31958, 11, 498, 291, 500, 380, 458, 1340, 466, 715, 388, 433, 11, 300, 311, 2489, 13, 708, 291, 434, 516, 281, 360, 307, 291, 434, 50632], "temperature": 0.0, "avg_logprob": -0.09191828918457032, "compression_ratio": 1.8911290322580645, "no_speech_prob": 0.004164730664342642}, {"id": 79, "seek": 53532, "start": 540.6800000000001, "end": 545.0, "text": " going to do a parsing step. So you're going to take the Rust code and you're going to turn it", "tokens": [50632, 516, 281, 360, 257, 21156, 278, 1823, 13, 407, 291, 434, 516, 281, 747, 264, 34952, 3089, 293, 291, 434, 516, 281, 1261, 309, 50848], "temperature": 0.0, "avg_logprob": -0.09191828918457032, "compression_ratio": 1.8911290322580645, "no_speech_prob": 0.004164730664342642}, {"id": 80, "seek": 53532, "start": 545.0, "end": 550.5200000000001, "text": " into a data structure, which is sort of a tree, which is called an abstract syntax tree, AST.", "tokens": [50848, 666, 257, 1412, 3877, 11, 597, 307, 1333, 295, 257, 4230, 11, 597, 307, 1219, 364, 12649, 28431, 4230, 11, 316, 6840, 13, 51124], "temperature": 0.0, "avg_logprob": -0.09191828918457032, "compression_ratio": 1.8911290322580645, "no_speech_prob": 0.004164730664342642}, {"id": 81, "seek": 53532, "start": 551.4000000000001, "end": 555.24, "text": " Then we're going to run an expansion on that. So anytime we're going to see a macro,", "tokens": [51168, 1396, 321, 434, 516, 281, 1190, 364, 11260, 322, 300, 13, 407, 13038, 321, 434, 516, 281, 536, 257, 18887, 11, 51360], "temperature": 0.0, "avg_logprob": -0.09191828918457032, "compression_ratio": 1.8911290322580645, "no_speech_prob": 0.004164730664342642}, {"id": 82, "seek": 53532, "start": 555.24, "end": 560.84, "text": " we're going to expand it and then replace it by its expansion. Name resolution that's basically", "tokens": [51360, 321, 434, 516, 281, 5268, 309, 293, 550, 7406, 309, 538, 1080, 11260, 13, 13866, 8669, 300, 311, 1936, 51640], "temperature": 0.0, "avg_logprob": -0.09191828918457032, "compression_ratio": 1.8911290322580645, "no_speech_prob": 0.004164730664342642}, {"id": 83, "seek": 56084, "start": 560.84, "end": 566.44, "text": " putting which use, any use linking it to its definition and so on. We're going to", "tokens": [50364, 3372, 597, 764, 11, 604, 764, 25775, 309, 281, 1080, 7123, 293, 370, 322, 13, 492, 434, 516, 281, 50644], "temperature": 0.0, "avg_logprob": -0.1070778123263655, "compression_ratio": 1.6464285714285714, "no_speech_prob": 0.0010291618527844548}, {"id": 84, "seek": 56084, "start": 567.32, "end": 573.1600000000001, "text": " do some more transformation on that AST and then finally type check it. And then we can do a lot", "tokens": [50688, 360, 512, 544, 9887, 322, 300, 316, 6840, 293, 550, 2721, 2010, 1520, 309, 13, 400, 550, 321, 393, 360, 257, 688, 50980], "temperature": 0.0, "avg_logprob": -0.1070778123263655, "compression_ratio": 1.6464285714285714, "no_speech_prob": 0.0010291618527844548}, {"id": 85, "seek": 56084, "start": 573.1600000000001, "end": 579.08, "text": " of error verifications, linting, so stuff like the warnings you get when you have an unused value", "tokens": [50980, 295, 6713, 1306, 7833, 11, 287, 686, 278, 11, 370, 1507, 411, 264, 30009, 291, 483, 562, 291, 362, 364, 44383, 2158, 51276], "temperature": 0.0, "avg_logprob": -0.1070778123263655, "compression_ratio": 1.6464285714285714, "no_speech_prob": 0.0010291618527844548}, {"id": 86, "seek": 56084, "start": 579.08, "end": 583.64, "text": " and that you can prefix it with an underscore, for example. Finally, when that's done,", "tokens": [51276, 293, 300, 291, 393, 46969, 309, 365, 364, 37556, 11, 337, 1365, 13, 6288, 11, 562, 300, 311, 1096, 11, 51504], "temperature": 0.0, "avg_logprob": -0.1070778123263655, "compression_ratio": 1.6464285714285714, "no_speech_prob": 0.0010291618527844548}, {"id": 87, "seek": 56084, "start": 583.64, "end": 589.0, "text": " we lower it to the GCC intermediate representation. So that's sort of similar to the last step of", "tokens": [51504, 321, 3126, 309, 281, 264, 460, 11717, 19376, 10290, 13, 407, 300, 311, 1333, 295, 2531, 281, 264, 1036, 1823, 295, 51772], "temperature": 0.0, "avg_logprob": -0.1070778123263655, "compression_ratio": 1.6464285714285714, "no_speech_prob": 0.0010291618527844548}, {"id": 88, "seek": 58900, "start": 589.0, "end": 597.48, "text": " Rust C, where it gets lower to LLVM IR. So as I said, we have an AST. We have an HIR. The advantage", "tokens": [50364, 34952, 383, 11, 689, 309, 2170, 3126, 281, 441, 43, 53, 44, 16486, 13, 407, 382, 286, 848, 11, 321, 362, 364, 316, 6840, 13, 492, 362, 364, 389, 7740, 13, 440, 5002, 50788], "temperature": 0.0, "avg_logprob": -0.10878550276464345, "compression_ratio": 1.6177777777777778, "no_speech_prob": 0.00021604257926810533}, {"id": 89, "seek": 58900, "start": 597.48, "end": 604.36, "text": " of having these two sort of high level data structures to represent Rust code is that we can", "tokens": [50788, 295, 1419, 613, 732, 1333, 295, 1090, 1496, 1412, 9227, 281, 2906, 34952, 3089, 307, 300, 321, 393, 51132], "temperature": 0.0, "avg_logprob": -0.10878550276464345, "compression_ratio": 1.6177777777777778, "no_speech_prob": 0.00021604257926810533}, {"id": 90, "seek": 58900, "start": 604.92, "end": 610.2, "text": " desugar the AST. So remove the syntactic sugar that you have in Rust source code", "tokens": [51160, 730, 8307, 264, 316, 6840, 13, 407, 4159, 264, 23980, 19892, 5076, 300, 291, 362, 294, 34952, 4009, 3089, 51424], "temperature": 0.0, "avg_logprob": -0.10878550276464345, "compression_ratio": 1.6177777777777778, "no_speech_prob": 0.00021604257926810533}, {"id": 91, "seek": 58900, "start": 610.2, "end": 615.8, "text": " to have sort of a simpler representation within the compiler. So one example, for example,", "tokens": [51424, 281, 362, 1333, 295, 257, 18587, 10290, 1951, 264, 31958, 13, 407, 472, 1365, 11, 337, 1365, 11, 51704], "temperature": 0.0, "avg_logprob": -0.10878550276464345, "compression_ratio": 1.6177777777777778, "no_speech_prob": 0.00021604257926810533}, {"id": 92, "seek": 61580, "start": 616.68, "end": 621.9599999999999, "text": " is that the difference, as you know, between methods and function calls is you got like", "tokens": [50408, 307, 300, 264, 2649, 11, 382, 291, 458, 11, 1296, 7150, 293, 2445, 5498, 307, 291, 658, 411, 50672], "temperature": 0.0, "avg_logprob": -0.1220800064422272, "compression_ratio": 1.6008403361344539, "no_speech_prob": 0.0005956755485385656}, {"id": 93, "seek": 61580, "start": 622.68, "end": 629.4, "text": " self.method. But within the compiler, it doesn't make any difference. A method is just a function", "tokens": [50708, 2698, 13, 5537, 2926, 13, 583, 1951, 264, 31958, 11, 309, 1177, 380, 652, 604, 2649, 13, 316, 3170, 307, 445, 257, 2445, 51044], "temperature": 0.0, "avg_logprob": -0.1220800064422272, "compression_ratio": 1.6008403361344539, "no_speech_prob": 0.0005956755485385656}, {"id": 94, "seek": 61580, "start": 629.4, "end": 635.0799999999999, "text": " called with an extra argument. So that's how we represent them in the HIR and we sort of do these", "tokens": [51044, 1219, 365, 364, 2857, 6770, 13, 407, 300, 311, 577, 321, 2906, 552, 294, 264, 389, 7740, 293, 321, 1333, 295, 360, 613, 51328], "temperature": 0.0, "avg_logprob": -0.1220800064422272, "compression_ratio": 1.6008403361344539, "no_speech_prob": 0.0005956755485385656}, {"id": 95, "seek": 61580, "start": 635.0799999999999, "end": 640.52, "text": " other transformations such as removing macros because at this point they've already been expended", "tokens": [51328, 661, 34852, 1270, 382, 12720, 7912, 2635, 570, 412, 341, 935, 436, 600, 1217, 668, 1278, 3502, 51600], "temperature": 0.0, "avg_logprob": -0.1220800064422272, "compression_ratio": 1.6008403361344539, "no_speech_prob": 0.0005956755485385656}, {"id": 96, "seek": 64052, "start": 640.52, "end": 645.16, "text": " and we don't care about them anymore. And finally, as I said, the last intermediate", "tokens": [50364, 293, 321, 500, 380, 1127, 466, 552, 3602, 13, 400, 2721, 11, 382, 286, 848, 11, 264, 1036, 19376, 50596], "temperature": 0.0, "avg_logprob": -0.08891871452331543, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0004508385609369725}, {"id": 97, "seek": 64052, "start": 645.16, "end": 651.24, "text": " representation is called generic. And it's not generic at all. It's just the name and it's the", "tokens": [50596, 10290, 307, 1219, 19577, 13, 400, 309, 311, 406, 19577, 412, 439, 13, 467, 311, 445, 264, 1315, 293, 309, 311, 264, 50900], "temperature": 0.0, "avg_logprob": -0.08891871452331543, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0004508385609369725}, {"id": 98, "seek": 64052, "start": 651.24, "end": 658.28, "text": " GCC intermediate representation. So one thing I'd like to get into is macro expansion. And the", "tokens": [50900, 460, 11717, 19376, 10290, 13, 407, 472, 551, 286, 1116, 411, 281, 483, 666, 307, 18887, 11260, 13, 400, 264, 51252], "temperature": 0.0, "avg_logprob": -0.08891871452331543, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0004508385609369725}, {"id": 99, "seek": 64052, "start": 658.28, "end": 664.6, "text": " reason I want to get into that is because, I mean, I wrote most of it in GCCRS. So I'm the one you", "tokens": [51252, 1778, 286, 528, 281, 483, 666, 300, 307, 570, 11, 286, 914, 11, 286, 4114, 881, 295, 309, 294, 460, 11717, 43580, 13, 407, 286, 478, 264, 472, 291, 51568], "temperature": 0.0, "avg_logprob": -0.08891871452331543, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0004508385609369725}, {"id": 100, "seek": 66460, "start": 664.6, "end": 671.08, "text": " have to blame if it stops working when you try GCCRS. So as you know, macros in Rust are typed.", "tokens": [50364, 362, 281, 10127, 498, 309, 10094, 1364, 562, 291, 853, 460, 11717, 43580, 13, 407, 382, 291, 458, 11, 7912, 2635, 294, 34952, 366, 33941, 13, 50688], "temperature": 0.0, "avg_logprob": -0.07342424670469413, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0009095077402889729}, {"id": 101, "seek": 66460, "start": 671.08, "end": 677.5600000000001, "text": " So you can have expressions, statements, path, and so on. And someone has to do that checking.", "tokens": [50688, 407, 291, 393, 362, 15277, 11, 12363, 11, 3100, 11, 293, 370, 322, 13, 400, 1580, 575, 281, 360, 300, 8568, 13, 51012], "temperature": 0.0, "avg_logprob": -0.07342424670469413, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0009095077402889729}, {"id": 102, "seek": 66460, "start": 677.5600000000001, "end": 684.44, "text": " And so that's part of the macro expansion part. And as I said, macros are sort of like function", "tokens": [51012, 400, 370, 300, 311, 644, 295, 264, 18887, 11260, 644, 13, 400, 382, 286, 848, 11, 7912, 2635, 366, 1333, 295, 411, 2445, 51356], "temperature": 0.0, "avg_logprob": -0.07342424670469413, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0009095077402889729}, {"id": 103, "seek": 66460, "start": 684.44, "end": 690.9200000000001, "text": " calls. You just expand them and then you paste the AST that was generated and you're done. And", "tokens": [51356, 5498, 13, 509, 445, 5268, 552, 293, 550, 291, 9163, 264, 316, 6840, 300, 390, 10833, 293, 291, 434, 1096, 13, 400, 51680], "temperature": 0.0, "avg_logprob": -0.07342424670469413, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0009095077402889729}, {"id": 104, "seek": 69092, "start": 691.8, "end": 696.8399999999999, "text": " actually, in Rust, you've got repetitions in your macro. And that's extremely annoying to take", "tokens": [50408, 767, 11, 294, 34952, 11, 291, 600, 658, 13645, 2451, 294, 428, 18887, 13, 400, 300, 311, 4664, 11304, 281, 747, 50660], "temperature": 0.0, "avg_logprob": -0.11572210892387058, "compression_ratio": 1.697080291970803, "no_speech_prob": 0.0006429615314118564}, {"id": 105, "seek": 69092, "start": 696.8399999999999, "end": 702.5999999999999, "text": " care of. So repetitions, if you've ever written them, they're unreadable, but they're very useful.", "tokens": [50660, 1127, 295, 13, 407, 13645, 2451, 11, 498, 291, 600, 1562, 3720, 552, 11, 436, 434, 517, 2538, 712, 11, 457, 436, 434, 588, 4420, 13, 50948], "temperature": 0.0, "avg_logprob": -0.11572210892387058, "compression_ratio": 1.697080291970803, "no_speech_prob": 0.0006429615314118564}, {"id": 106, "seek": 69092, "start": 703.4799999999999, "end": 709.3199999999999, "text": " You'll have sort of these operators, which are the clean star interrogation mark and plus sign,", "tokens": [50992, 509, 603, 362, 1333, 295, 613, 19077, 11, 597, 366, 264, 2541, 3543, 24871, 399, 1491, 293, 1804, 1465, 11, 51284], "temperature": 0.0, "avg_logprob": -0.11572210892387058, "compression_ratio": 1.697080291970803, "no_speech_prob": 0.0006429615314118564}, {"id": 107, "seek": 69092, "start": 710.04, "end": 714.76, "text": " which allow you to specify what I want between zero and infinite of something,", "tokens": [51320, 597, 2089, 291, 281, 16500, 437, 286, 528, 1296, 4018, 293, 13785, 295, 746, 11, 51556], "temperature": 0.0, "avg_logprob": -0.11572210892387058, "compression_ratio": 1.697080291970803, "no_speech_prob": 0.0006429615314118564}, {"id": 108, "seek": 69092, "start": 714.76, "end": 720.52, "text": " at least one of something, one or more of something. And because Rust is a very well thought out", "tokens": [51556, 412, 1935, 472, 295, 746, 11, 472, 420, 544, 295, 746, 13, 400, 570, 34952, 307, 257, 588, 731, 1194, 484, 51844], "temperature": 0.0, "avg_logprob": -0.11572210892387058, "compression_ratio": 1.697080291970803, "no_speech_prob": 0.0006429615314118564}, {"id": 109, "seek": 72052, "start": 720.52, "end": 726.04, "text": " language, it's actually got ambiguity restrictions to make sure that no matter how the language", "tokens": [50364, 2856, 11, 309, 311, 767, 658, 46519, 14191, 281, 652, 988, 300, 572, 1871, 577, 264, 2856, 50640], "temperature": 0.0, "avg_logprob": -0.054870828338291336, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0004780529416166246}, {"id": 110, "seek": 72052, "start": 726.04, "end": 731.88, "text": " evolves, your macro is not suddenly going to become ambiguous. And so again, someone has to do that", "tokens": [50640, 43737, 11, 428, 18887, 307, 406, 5800, 516, 281, 1813, 39465, 13, 400, 370, 797, 11, 1580, 575, 281, 360, 300, 50932], "temperature": 0.0, "avg_logprob": -0.054870828338291336, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0004780529416166246}, {"id": 111, "seek": 72052, "start": 731.88, "end": 739.8, "text": " checking and make sure that your macro is not ambiguous. So that's me. So here, this is probably", "tokens": [50932, 8568, 293, 652, 988, 300, 428, 18887, 307, 406, 39465, 13, 407, 300, 311, 385, 13, 407, 510, 11, 341, 307, 1391, 51328], "temperature": 0.0, "avg_logprob": -0.054870828338291336, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0004780529416166246}, {"id": 112, "seek": 72052, "start": 739.8, "end": 746.52, "text": " like a very basic macro that you've maybe written or used or whatever. It's a macro that does an", "tokens": [51328, 411, 257, 588, 3875, 18887, 300, 291, 600, 1310, 3720, 420, 1143, 420, 2035, 13, 467, 311, 257, 18887, 300, 775, 364, 51664], "temperature": 0.0, "avg_logprob": -0.054870828338291336, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0004780529416166246}, {"id": 113, "seek": 74652, "start": 746.52, "end": 752.68, "text": " addition and that takes any number of argument. You can see in green, I've highlighted the repetition", "tokens": [50364, 4500, 293, 300, 2516, 604, 1230, 295, 6770, 13, 509, 393, 536, 294, 3092, 11, 286, 600, 17173, 264, 30432, 50672], "temperature": 0.0, "avg_logprob": -0.126991793983861, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0005176127888262272}, {"id": 114, "seek": 74652, "start": 752.68, "end": 760.36, "text": " sort of operator marker thingy. And yeah, this basically expands to E plus adding the rest of", "tokens": [50672, 1333, 295, 12973, 15247, 551, 88, 13, 400, 1338, 11, 341, 1936, 33706, 281, 462, 1804, 5127, 264, 1472, 295, 51056], "temperature": 0.0, "avg_logprob": -0.126991793983861, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0005176127888262272}, {"id": 115, "seek": 74652, "start": 760.36, "end": 768.6, "text": " the expression. Okay. So that's a macro to make tuples. So basically, you're going to give it", "tokens": [51056, 264, 6114, 13, 1033, 13, 407, 300, 311, 257, 18887, 281, 652, 2604, 2622, 13, 407, 1936, 11, 291, 434, 516, 281, 976, 309, 51468], "temperature": 0.0, "avg_logprob": -0.126991793983861, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0005176127888262272}, {"id": 116, "seek": 74652, "start": 768.6, "end": 772.6, "text": " a list of arguments on the left. A list of arguments on the right is going to make a list", "tokens": [51468, 257, 1329, 295, 12869, 322, 264, 1411, 13, 316, 1329, 295, 12869, 322, 264, 558, 307, 516, 281, 652, 257, 1329, 51668], "temperature": 0.0, "avg_logprob": -0.126991793983861, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0005176127888262272}, {"id": 117, "seek": 77260, "start": 772.6, "end": 779.0, "text": " of tuples. The thing I like to point out here is that whenever you don't have the same number of", "tokens": [50364, 295, 2604, 2622, 13, 440, 551, 286, 411, 281, 935, 484, 510, 307, 300, 5699, 291, 500, 380, 362, 264, 912, 1230, 295, 50684], "temperature": 0.0, "avg_logprob": -0.09549738180757773, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.001833573798649013}, {"id": 118, "seek": 77260, "start": 779.0, "end": 787.72, "text": " arguments, if you're merging repetitions together, it's actually going to, well, it's going to go bad", "tokens": [50684, 12869, 11, 498, 291, 434, 44559, 13645, 2451, 1214, 11, 309, 311, 767, 516, 281, 11, 731, 11, 309, 311, 516, 281, 352, 1578, 51120], "temperature": 0.0, "avg_logprob": -0.09549738180757773, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.001833573798649013}, {"id": 119, "seek": 77260, "start": 787.72, "end": 793.64, "text": " and you have to check that. And again, on really complex macros, making sure that your merged", "tokens": [51120, 293, 291, 362, 281, 1520, 300, 13, 400, 797, 11, 322, 534, 3997, 7912, 2635, 11, 1455, 988, 300, 428, 36427, 51416], "temperature": 0.0, "avg_logprob": -0.09549738180757773, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.001833573798649013}, {"id": 120, "seek": 77260, "start": 793.64, "end": 798.6800000000001, "text": " fragments are actually the same number of repetitions and so on, it gets very hard and very tedious.", "tokens": [51416, 29197, 366, 767, 264, 912, 1230, 295, 13645, 2451, 293, 370, 322, 11, 309, 2170, 588, 1152, 293, 588, 38284, 13, 51668], "temperature": 0.0, "avg_logprob": -0.09549738180757773, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.001833573798649013}, {"id": 121, "seek": 79868, "start": 799.16, "end": 805.0799999999999, "text": " And Rust macros are sort of a language within the language that needs to be taken care of.", "tokens": [50388, 400, 34952, 7912, 2635, 366, 1333, 295, 257, 2856, 1951, 264, 2856, 300, 2203, 281, 312, 2726, 1127, 295, 13, 50684], "temperature": 0.0, "avg_logprob": -0.09929336820329938, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.0009364860015921295}, {"id": 122, "seek": 79868, "start": 806.3599999999999, "end": 813.0, "text": " And that's just one last example on how fun Rust macros are for the ambiguity restriction.", "tokens": [50748, 400, 300, 311, 445, 472, 1036, 1365, 322, 577, 1019, 34952, 7912, 2635, 366, 337, 264, 46519, 29529, 13, 51080], "temperature": 0.0, "avg_logprob": -0.09929336820329938, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.0009364860015921295}, {"id": 123, "seek": 79868, "start": 813.9599999999999, "end": 818.8399999999999, "text": " For example, you can't have a keyword after an expression because that keyword might become a", "tokens": [51128, 1171, 1365, 11, 291, 393, 380, 362, 257, 20428, 934, 364, 6114, 570, 300, 20428, 1062, 1813, 257, 51372], "temperature": 0.0, "avg_logprob": -0.09929336820329938, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.0009364860015921295}, {"id": 124, "seek": 79868, "start": 818.8399999999999, "end": 824.12, "text": " reserved keyword, might be another expression of good reasons for why it's an ambiguity.", "tokens": [51372, 24819, 20428, 11, 1062, 312, 1071, 6114, 295, 665, 4112, 337, 983, 309, 311, 364, 46519, 13, 51636], "temperature": 0.0, "avg_logprob": -0.09929336820329938, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.0009364860015921295}, {"id": 125, "seek": 82412, "start": 824.92, "end": 830.76, "text": " And the thing here is if you look at the second sort of matching, second matcher,", "tokens": [50404, 400, 264, 551, 510, 307, 498, 291, 574, 412, 264, 1150, 1333, 295, 14324, 11, 1150, 2995, 260, 11, 50696], "temperature": 0.0, "avg_logprob": -0.0968025614706318, "compression_ratio": 1.8404255319148937, "no_speech_prob": 0.0005178512656129897}, {"id": 126, "seek": 82412, "start": 830.76, "end": 837.5600000000001, "text": " in that macro, you can see that the operator means it's going to appear between zero and one time.", "tokens": [50696, 294, 300, 18887, 11, 291, 393, 536, 300, 264, 12973, 1355, 309, 311, 516, 281, 4204, 1296, 4018, 293, 472, 565, 13, 51036], "temperature": 0.0, "avg_logprob": -0.0968025614706318, "compression_ratio": 1.8404255319148937, "no_speech_prob": 0.0005178512656129897}, {"id": 127, "seek": 82412, "start": 838.36, "end": 842.2, "text": " For the third matcher, it's going to happen like it's going to appear", "tokens": [51076, 1171, 264, 2636, 2995, 260, 11, 309, 311, 516, 281, 1051, 411, 309, 311, 516, 281, 4204, 51268], "temperature": 0.0, "avg_logprob": -0.0968025614706318, "compression_ratio": 1.8404255319148937, "no_speech_prob": 0.0005178512656129897}, {"id": 128, "seek": 82412, "start": 842.2, "end": 849.16, "text": " between zero and plus infinity times, same for the fourth matcher. So the macro sort of checker", "tokens": [51268, 1296, 4018, 293, 1804, 13202, 1413, 11, 912, 337, 264, 6409, 2995, 260, 13, 407, 264, 18887, 1333, 295, 1520, 260, 51616], "temperature": 0.0, "avg_logprob": -0.0968025614706318, "compression_ratio": 1.8404255319148937, "no_speech_prob": 0.0005178512656129897}, {"id": 129, "seek": 84916, "start": 849.16, "end": 853.9599999999999, "text": " has to move forward and make sure that in the case where two doesn't appear,", "tokens": [50364, 575, 281, 1286, 2128, 293, 652, 988, 300, 294, 264, 1389, 689, 732, 1177, 380, 4204, 11, 50604], "temperature": 0.0, "avg_logprob": -0.1241406253260425, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.0006440805154852569}, {"id": 130, "seek": 84916, "start": 853.9599999999999, "end": 859.4, "text": " three doesn't appear, and four doesn't appear, the thing after that is allowed in the set of", "tokens": [50604, 1045, 1177, 380, 4204, 11, 293, 1451, 1177, 380, 4204, 11, 264, 551, 934, 300, 307, 4350, 294, 264, 992, 295, 50876], "temperature": 0.0, "avg_logprob": -0.1241406253260425, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.0006440805154852569}, {"id": 131, "seek": 84916, "start": 859.4, "end": 864.28, "text": " restrictions. In that case, it's not because, well, it's the same as above, so we have to error out.", "tokens": [50876, 14191, 13, 682, 300, 1389, 11, 309, 311, 406, 570, 11, 731, 11, 309, 311, 264, 912, 382, 3673, 11, 370, 321, 362, 281, 6713, 484, 13, 51120], "temperature": 0.0, "avg_logprob": -0.1241406253260425, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.0006440805154852569}, {"id": 132, "seek": 84916, "start": 865.0799999999999, "end": 872.28, "text": " And it gets really annoying. And there's more checks that are Rust specific that we can't really", "tokens": [51160, 400, 309, 2170, 534, 11304, 13, 400, 456, 311, 544, 13834, 300, 366, 34952, 2685, 300, 321, 393, 380, 534, 51520], "temperature": 0.0, "avg_logprob": -0.1241406253260425, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.0006440805154852569}, {"id": 133, "seek": 84916, "start": 872.92, "end": 878.04, "text": " copy paste from the other languages in GCC. So for example, you got privacy in Rust.", "tokens": [51552, 5055, 9163, 490, 264, 661, 8650, 294, 460, 11717, 13, 407, 337, 1365, 11, 291, 658, 11427, 294, 34952, 13, 51808], "temperature": 0.0, "avg_logprob": -0.1241406253260425, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.0006440805154852569}, {"id": 134, "seek": 87804, "start": 878.68, "end": 882.8399999999999, "text": " So you know how you mark your functions as public or just leave them as private.", "tokens": [50396, 407, 291, 458, 577, 291, 1491, 428, 6828, 382, 1908, 420, 445, 1856, 552, 382, 4551, 13, 50604], "temperature": 0.0, "avg_logprob": -0.09646426585682652, "compression_ratio": 1.9864864864864864, "no_speech_prob": 0.0006345188012346625}, {"id": 135, "seek": 87804, "start": 882.8399999999999, "end": 887.3199999999999, "text": " But you've got fun privacy. So you can have a function that's public in a path,", "tokens": [50604, 583, 291, 600, 658, 1019, 11427, 13, 407, 291, 393, 362, 257, 2445, 300, 311, 1908, 294, 257, 3100, 11, 50828], "temperature": 0.0, "avg_logprob": -0.09646426585682652, "compression_ratio": 1.9864864864864864, "no_speech_prob": 0.0006345188012346625}, {"id": 136, "seek": 87804, "start": 887.3199999999999, "end": 892.76, "text": " so in a module, but not in another one. You can have a function that's public for your parent", "tokens": [50828, 370, 294, 257, 10088, 11, 457, 406, 294, 1071, 472, 13, 509, 393, 362, 257, 2445, 300, 311, 1908, 337, 428, 2596, 51100], "temperature": 0.0, "avg_logprob": -0.09646426585682652, "compression_ratio": 1.9864864864864864, "no_speech_prob": 0.0006345188012346625}, {"id": 137, "seek": 87804, "start": 892.76, "end": 896.8399999999999, "text": " module, but not anymore. You can have a function that's public for the entire create, but not for", "tokens": [51100, 10088, 11, 457, 406, 3602, 13, 509, 393, 362, 257, 2445, 300, 311, 1908, 337, 264, 2302, 1884, 11, 457, 406, 337, 51304], "temperature": 0.0, "avg_logprob": -0.09646426585682652, "compression_ratio": 1.9864864864864864, "no_speech_prob": 0.0006345188012346625}, {"id": 138, "seek": 87804, "start": 896.8399999999999, "end": 904.68, "text": " users of that create. And yeah, lots of stuff. Same, you've probably come across unsafe.", "tokens": [51304, 5022, 295, 300, 1884, 13, 400, 1338, 11, 3195, 295, 1507, 13, 10635, 11, 291, 600, 1391, 808, 2108, 35948, 13, 51696], "temperature": 0.0, "avg_logprob": -0.09646426585682652, "compression_ratio": 1.9864864864864864, "no_speech_prob": 0.0006345188012346625}, {"id": 139, "seek": 90468, "start": 904.68, "end": 910.5999999999999, "text": " So unsafe is a keyword that sort of unlocks superpowers and segfaults. And", "tokens": [50364, 407, 35948, 307, 257, 20428, 300, 1333, 295, 517, 34896, 1687, 47953, 293, 3896, 69, 5107, 82, 13, 400, 50660], "temperature": 0.0, "avg_logprob": -0.12813920324498956, "compression_ratio": 1.490909090909091, "no_speech_prob": 0.0013142862590029836}, {"id": 140, "seek": 90468, "start": 912.8399999999999, "end": 917.9599999999999, "text": " basically, at the language level, it's just a keyword. So whether we're", "tokens": [50772, 1936, 11, 412, 264, 2856, 1496, 11, 309, 311, 445, 257, 20428, 13, 407, 1968, 321, 434, 51028], "temperature": 0.0, "avg_logprob": -0.12813920324498956, "compression_ratio": 1.490909090909091, "no_speech_prob": 0.0013142862590029836}, {"id": 141, "seek": 90468, "start": 917.9599999999999, "end": 924.04, "text": " dereferencing a row pointer or an actual safe pointer like box, it doesn't matter to the parser", "tokens": [51028, 15969, 612, 13644, 257, 5386, 23918, 420, 364, 3539, 3273, 23918, 411, 2424, 11, 309, 1177, 380, 1871, 281, 264, 21156, 260, 51332], "temperature": 0.0, "avg_logprob": -0.12813920324498956, "compression_ratio": 1.490909090909091, "no_speech_prob": 0.0013142862590029836}, {"id": 142, "seek": 90468, "start": 924.04, "end": 931.4, "text": " or the AST. But we have to go afterwards in the HIR on that type check representation", "tokens": [51332, 420, 264, 316, 6840, 13, 583, 321, 362, 281, 352, 10543, 294, 264, 389, 7740, 322, 300, 2010, 1520, 10290, 51700], "temperature": 0.0, "avg_logprob": -0.12813920324498956, "compression_ratio": 1.490909090909091, "no_speech_prob": 0.0013142862590029836}, {"id": 143, "seek": 93140, "start": 931.4, "end": 936.04, "text": " and make sure that what we're dereferencing, well, if we're dereferencing something of type", "tokens": [50364, 293, 652, 988, 300, 437, 321, 434, 15969, 612, 13644, 11, 731, 11, 498, 321, 434, 15969, 612, 13644, 746, 295, 2010, 50596], "temperature": 0.0, "avg_logprob": -0.08722676268411339, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.00028951754211448133}, {"id": 144, "seek": 93140, "start": 936.04, "end": 939.56, "text": " row pointer, it can only happen in unsafe context.", "tokens": [50596, 5386, 23918, 11, 309, 393, 787, 1051, 294, 35948, 4319, 13, 50772], "temperature": 0.0, "avg_logprob": -0.08722676268411339, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.00028951754211448133}, {"id": 145, "seek": 93140, "start": 942.76, "end": 948.84, "text": " Finally, macros are lazy. So if you're from Haskell, you know what that means. It means basically,", "tokens": [50932, 6288, 11, 7912, 2635, 366, 14847, 13, 407, 498, 291, 434, 490, 8646, 43723, 11, 291, 458, 437, 300, 1355, 13, 467, 1355, 1936, 11, 51236], "temperature": 0.0, "avg_logprob": -0.08722676268411339, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.00028951754211448133}, {"id": 146, "seek": 93140, "start": 948.84, "end": 952.76, "text": " you're going to expend them as they go before expending the arguments given to them.", "tokens": [51236, 291, 434, 516, 281, 24439, 552, 382, 436, 352, 949, 1278, 2029, 264, 12869, 2212, 281, 552, 13, 51432], "temperature": 0.0, "avg_logprob": -0.08722676268411339, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.00028951754211448133}, {"id": 147, "seek": 93140, "start": 953.64, "end": 958.12, "text": " The fact is macros are not lazy because you got some built-in macros that need to be", "tokens": [51476, 440, 1186, 307, 7912, 2635, 366, 406, 14847, 570, 291, 658, 512, 3094, 12, 259, 7912, 2635, 300, 643, 281, 312, 51700], "temperature": 0.0, "avg_logprob": -0.08722676268411339, "compression_ratio": 1.6844262295081966, "no_speech_prob": 0.00028951754211448133}, {"id": 148, "seek": 95812, "start": 958.2, "end": 963.48, "text": " expended eagerly. And so when you just spent like three months rewriting the expansion system to", "tokens": [50368, 1278, 3502, 18259, 356, 13, 400, 370, 562, 291, 445, 4418, 411, 1045, 2493, 319, 19868, 264, 11260, 1185, 281, 50632], "temperature": 0.0, "avg_logprob": -0.10302386283874512, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.0006060684099793434}, {"id": 149, "seek": 95812, "start": 963.48, "end": 967.4, "text": " make sure that they're expended lazily, and you realize that built-in macros need to be", "tokens": [50632, 652, 988, 300, 436, 434, 1278, 3502, 19320, 953, 11, 293, 291, 4325, 300, 3094, 12, 259, 7912, 2635, 643, 281, 312, 50828], "temperature": 0.0, "avg_logprob": -0.10302386283874512, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.0006060684099793434}, {"id": 150, "seek": 95812, "start": 967.4, "end": 974.36, "text": " expended eagerly, well, I guess really annoying. Finally, caught sharing between crates. So if", "tokens": [50828, 1278, 3502, 18259, 356, 11, 731, 11, 286, 2041, 534, 11304, 13, 6288, 11, 5415, 5414, 1296, 941, 1024, 13, 407, 498, 51176], "temperature": 0.0, "avg_logprob": -0.10302386283874512, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.0006060684099793434}, {"id": 151, "seek": 95812, "start": 974.36, "end": 979.96, "text": " you've had the misfortune of writing CRC++, you know you have to write headers, basically declaring", "tokens": [51176, 291, 600, 632, 264, 47351, 27172, 295, 3579, 14123, 34, 25472, 11, 291, 458, 291, 362, 281, 2464, 45101, 11, 1936, 40374, 51456], "temperature": 0.0, "avg_logprob": -0.10302386283874512, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.0006060684099793434}, {"id": 152, "seek": 95812, "start": 979.96, "end": 986.04, "text": " your generic functions, your bubbling functions, and so on. How do you do that in Rust? The answer", "tokens": [51456, 428, 19577, 6828, 11, 428, 46360, 6828, 11, 293, 370, 322, 13, 1012, 360, 291, 360, 300, 294, 34952, 30, 440, 1867, 51760], "temperature": 0.0, "avg_logprob": -0.10302386283874512, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.0006060684099793434}, {"id": 153, "seek": 98604, "start": 986.04, "end": 991.64, "text": " is you don't. The compiler does it for you, and basically what it's doing is it's putting some", "tokens": [50364, 307, 291, 500, 380, 13, 440, 31958, 775, 309, 337, 291, 11, 293, 1936, 437, 309, 311, 884, 307, 309, 311, 3372, 512, 50644], "temperature": 0.0, "avg_logprob": -0.10291837762903285, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0007203202694654465}, {"id": 154, "seek": 98604, "start": 992.1999999999999, "end": 999.24, "text": " metadata magic in the L format, so the object file, and it's going to encode and serialize", "tokens": [50672, 26603, 5585, 294, 264, 441, 7877, 11, 370, 264, 2657, 3991, 11, 293, 309, 311, 516, 281, 2058, 1429, 293, 17436, 1125, 51024], "temperature": 0.0, "avg_logprob": -0.10291837762903285, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0007203202694654465}, {"id": 155, "seek": 98604, "start": 999.24, "end": 1004.52, "text": " all of your exported macros, the generic function, the generic types, the public macros, and so on,", "tokens": [51024, 439, 295, 428, 42055, 7912, 2635, 11, 264, 19577, 2445, 11, 264, 19577, 3467, 11, 264, 1908, 7912, 2635, 11, 293, 370, 322, 11, 51288], "temperature": 0.0, "avg_logprob": -0.10291837762903285, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0007203202694654465}, {"id": 156, "seek": 98604, "start": 1004.52, "end": 1012.5999999999999, "text": " and so on. Again, more fun stuff that no one in GCC has done. Maybe GCC go and we have to figure out.", "tokens": [51288, 293, 370, 322, 13, 3764, 11, 544, 1019, 1507, 300, 572, 472, 294, 460, 11717, 575, 1096, 13, 2704, 460, 11717, 352, 293, 321, 362, 281, 2573, 484, 13, 51692], "temperature": 0.0, "avg_logprob": -0.10291837762903285, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0007203202694654465}, {"id": 157, "seek": 101260, "start": 1012.84, "end": 1019.64, "text": " Finally, the type system in Rust is extremely safe, complex, and powerful, as you know. There's", "tokens": [50376, 6288, 11, 264, 2010, 1185, 294, 34952, 307, 4664, 3273, 11, 3997, 11, 293, 4005, 11, 382, 291, 458, 13, 821, 311, 50716], "temperature": 0.0, "avg_logprob": -0.15201160588215307, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.001057952526025474}, {"id": 158, "seek": 101260, "start": 1019.64, "end": 1024.92, "text": " lots of fun stuff like the never type, generic associated types, and so on. You got some types,", "tokens": [50716, 3195, 295, 1019, 1507, 411, 264, 1128, 2010, 11, 19577, 6615, 3467, 11, 293, 370, 322, 13, 509, 658, 512, 3467, 11, 50980], "temperature": 0.0, "avg_logprob": -0.15201160588215307, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.001057952526025474}, {"id": 159, "seek": 101260, "start": 1025.8, "end": 1030.92, "text": " and the fact is these constructs are not really present in any of the other languages", "tokens": [51024, 293, 264, 1186, 307, 613, 7690, 82, 366, 406, 534, 1974, 294, 604, 295, 264, 661, 8650, 51280], "temperature": 0.0, "avg_logprob": -0.15201160588215307, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.001057952526025474}, {"id": 160, "seek": 101260, "start": 1031.64, "end": 1038.52, "text": " within GCC. So that's stuff that we sort of have to figure out. Figure out how to, first of all,", "tokens": [51316, 1951, 460, 11717, 13, 407, 300, 311, 1507, 300, 321, 1333, 295, 362, 281, 2573, 484, 13, 43225, 484, 577, 281, 11, 700, 295, 439, 11, 51660], "temperature": 0.0, "avg_logprob": -0.15201160588215307, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.001057952526025474}, {"id": 161, "seek": 103852, "start": 1038.52, "end": 1045.4, "text": " implement them, and then how to compile them, and translate them to the GCC internal representation.", "tokens": [50364, 4445, 552, 11, 293, 550, 577, 281, 31413, 552, 11, 293, 13799, 552, 281, 264, 460, 11717, 6920, 10290, 13, 50708], "temperature": 0.0, "avg_logprob": -0.159168947090223, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0013373818947002292}, {"id": 162, "seek": 103852, "start": 1046.44, "end": 1052.6, "text": " Finally, the last one bit, you got inline assembly in Rust. It's not the same format as GCC's in", "tokens": [50760, 6288, 11, 264, 1036, 472, 857, 11, 291, 658, 294, 1889, 12103, 294, 34952, 13, 467, 311, 406, 264, 912, 7877, 382, 460, 11717, 311, 294, 51068], "temperature": 0.0, "avg_logprob": -0.159168947090223, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0013373818947002292}, {"id": 163, "seek": 103852, "start": 1052.6, "end": 1059.8, "text": " line assembly, so we have to do the translation. And if you look at Rust C code gen GCC, because", "tokens": [51068, 1622, 12103, 11, 370, 321, 362, 281, 360, 264, 12853, 13, 400, 498, 291, 574, 412, 34952, 383, 3089, 1049, 460, 11717, 11, 570, 51428], "temperature": 0.0, "avg_logprob": -0.159168947090223, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0013373818947002292}, {"id": 164, "seek": 103852, "start": 1059.8, "end": 1065.72, "text": " Antonio is much farther advanced than us in sort of the back in turn, it's a very fun, like,", "tokens": [51428, 22527, 307, 709, 20344, 7339, 813, 505, 294, 1333, 295, 264, 646, 294, 1261, 11, 309, 311, 257, 588, 1019, 11, 411, 11, 51724], "temperature": 0.0, "avg_logprob": -0.159168947090223, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0013373818947002292}, {"id": 165, "seek": 106572, "start": 1065.72, "end": 1070.2, "text": " thousand lines of code to translate from Rust's inline assembly to GCC.", "tokens": [50364, 4714, 3876, 295, 3089, 281, 13799, 490, 34952, 311, 294, 1889, 12103, 281, 460, 11717, 13, 50588], "temperature": 0.0, "avg_logprob": -0.10859517353336985, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0010551800951361656}, {"id": 166, "seek": 106572, "start": 1075.16, "end": 1080.3600000000001, "text": " As I said, I'm going to talk a little bit about contributing, reviewing, and so on,", "tokens": [50836, 1018, 286, 848, 11, 286, 478, 516, 281, 751, 257, 707, 857, 466, 19270, 11, 19576, 11, 293, 370, 322, 11, 51096], "temperature": 0.0, "avg_logprob": -0.10859517353336985, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0010551800951361656}, {"id": 167, "seek": 106572, "start": 1080.3600000000001, "end": 1086.3600000000001, "text": " our workflow, basically. So the workflow for GCCRS is inspired by Rust's workflow.", "tokens": [51096, 527, 20993, 11, 1936, 13, 407, 264, 20993, 337, 460, 11717, 43580, 307, 7547, 538, 34952, 311, 20993, 13, 51396], "temperature": 0.0, "avg_logprob": -0.10859517353336985, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0010551800951361656}, {"id": 168, "seek": 106572, "start": 1087.08, "end": 1092.52, "text": " All of our development happens on GitHub. Our communication messaging and so on happens on", "tokens": [51432, 1057, 295, 527, 3250, 2314, 322, 23331, 13, 2621, 6101, 21812, 293, 370, 322, 2314, 322, 51704], "temperature": 0.0, "avg_logprob": -0.10859517353336985, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0010551800951361656}, {"id": 169, "seek": 109252, "start": 1092.52, "end": 1099.72, "text": " Zulip, and we use the bore spot to merge our PRs. But at the same time, because we're a GCC project,", "tokens": [50364, 1176, 425, 647, 11, 293, 321, 764, 264, 26002, 4008, 281, 22183, 527, 11568, 82, 13, 583, 412, 264, 912, 565, 11, 570, 321, 434, 257, 460, 11717, 1716, 11, 50724], "temperature": 0.0, "avg_logprob": -0.12825165476117814, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.0021380591206252575}, {"id": 170, "seek": 109252, "start": 1099.72, "end": 1105.6399999999999, "text": " we have an IRC channel, we have a mailing list, and we accept patches sent on the mailing list,", "tokens": [50724, 321, 362, 364, 16486, 34, 2269, 11, 321, 362, 257, 41612, 1329, 11, 293, 321, 3241, 26531, 2279, 322, 264, 41612, 1329, 11, 51020], "temperature": 0.0, "avg_logprob": -0.12825165476117814, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.0021380591206252575}, {"id": 171, "seek": 109252, "start": 1105.6399999999999, "end": 1115.08, "text": " and so on. So the, sorry, the idea about that is that no matter your sort of background, whether", "tokens": [51020, 293, 370, 322, 13, 407, 264, 11, 2597, 11, 264, 1558, 466, 300, 307, 300, 572, 1871, 428, 1333, 295, 3678, 11, 1968, 51492], "temperature": 0.0, "avg_logprob": -0.12825165476117814, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.0021380591206252575}, {"id": 172, "seek": 111508, "start": 1115.08, "end": 1123.32, "text": " you're a new, very young Rust developer who's only used GitHub, or sorry, Thomas Dinosaur,", "tokens": [50364, 291, 434, 257, 777, 11, 588, 2037, 34952, 10754, 567, 311, 787, 1143, 23331, 11, 420, 2597, 11, 8500, 413, 15220, 3463, 11, 50776], "temperature": 0.0, "avg_logprob": -0.11054637480755242, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0019153810571879148}, {"id": 173, "seek": 111508, "start": 1123.32, "end": 1128.6799999999998, "text": " who's used IRC and mailing lists, you can send patches and we'll accept them, review them, and", "tokens": [50776, 567, 311, 1143, 16486, 34, 293, 41612, 14511, 11, 291, 393, 2845, 26531, 293, 321, 603, 3241, 552, 11, 3131, 552, 11, 293, 51044], "temperature": 0.0, "avg_logprob": -0.11054637480755242, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0019153810571879148}, {"id": 174, "seek": 111508, "start": 1128.6799999999998, "end": 1136.36, "text": " make sure that your contributions get accepted. So GCC development is hard. I made that experience", "tokens": [51044, 652, 988, 300, 428, 15725, 483, 9035, 13, 407, 460, 11717, 3250, 307, 1152, 13, 286, 1027, 300, 1752, 51428], "temperature": 0.0, "avg_logprob": -0.11054637480755242, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0019153810571879148}, {"id": 175, "seek": 111508, "start": 1136.36, "end": 1142.6, "text": " firsthand because I'm not an IRC and mailing list kind of guy. I'm a GitHub kind of guy.", "tokens": [51428, 38599, 570, 286, 478, 406, 364, 16486, 34, 293, 41612, 1329, 733, 295, 2146, 13, 286, 478, 257, 23331, 733, 295, 2146, 13, 51740], "temperature": 0.0, "avg_logprob": -0.11054637480755242, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0019153810571879148}, {"id": 176, "seek": 114260, "start": 1143.3999999999999, "end": 1149.1599999999999, "text": " And sending patches via email, getting reviews, submitting them, and so on. It's very, very hard.", "tokens": [50404, 400, 7750, 26531, 5766, 3796, 11, 1242, 10229, 11, 31836, 552, 11, 293, 370, 322, 13, 467, 311, 588, 11, 588, 1152, 13, 50692], "temperature": 0.0, "avg_logprob": -0.11235248565673828, "compression_ratio": 1.695852534562212, "no_speech_prob": 0.00047747985809110105}, {"id": 177, "seek": 114260, "start": 1149.8799999999999, "end": 1153.7199999999998, "text": " In GCC, you've got a fun thing that on your comments, you have to add change logs.", "tokens": [50728, 682, 460, 11717, 11, 291, 600, 658, 257, 1019, 551, 300, 322, 428, 3053, 11, 291, 362, 281, 909, 1319, 20820, 13, 50920], "temperature": 0.0, "avg_logprob": -0.11235248565673828, "compression_ratio": 1.695852534562212, "no_speech_prob": 0.00047747985809110105}, {"id": 178, "seek": 114260, "start": 1155.3999999999999, "end": 1159.7199999999998, "text": " They have a specific format. They're annoying to write. They're very helpful, but they're annoying", "tokens": [51004, 814, 362, 257, 2685, 7877, 13, 814, 434, 11304, 281, 2464, 13, 814, 434, 588, 4961, 11, 457, 436, 434, 11304, 51220], "temperature": 0.0, "avg_logprob": -0.11235248565673828, "compression_ratio": 1.695852534562212, "no_speech_prob": 0.00047747985809110105}, {"id": 179, "seek": 114260, "start": 1159.7199999999998, "end": 1166.6, "text": " to write. To send actually patches to get reviewed by GCC, you have to use getSendEmail.", "tokens": [51220, 281, 2464, 13, 1407, 2845, 767, 26531, 281, 483, 18429, 538, 460, 11717, 11, 291, 362, 281, 764, 483, 50, 521, 36, 11799, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11235248565673828, "compression_ratio": 1.695852534562212, "no_speech_prob": 0.00047747985809110105}, {"id": 180, "seek": 116660, "start": 1166.6, "end": 1173.1599999999999, "text": " So sort of something that sends the email for you and sends the patches in the meantime.", "tokens": [50364, 407, 1333, 295, 746, 300, 14790, 264, 3796, 337, 291, 293, 14790, 264, 26531, 294, 264, 14991, 13, 50692], "temperature": 0.0, "avg_logprob": -0.12052952989618829, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.0010803319746628404}, {"id": 181, "seek": 116660, "start": 1174.4399999999998, "end": 1179.24, "text": " Because I wanted to, you know, make sure I didn't break anything, wasn't going to,", "tokens": [50756, 1436, 286, 1415, 281, 11, 291, 458, 11, 652, 988, 286, 994, 380, 1821, 1340, 11, 2067, 380, 516, 281, 11, 50996], "temperature": 0.0, "avg_logprob": -0.12052952989618829, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.0010803319746628404}, {"id": 182, "seek": 116660, "start": 1180.04, "end": 1185.32, "text": " I don't know, blow up my computer, I decided to try getSendEmail to my own personal address", "tokens": [51036, 286, 500, 380, 458, 11, 6327, 493, 452, 3820, 11, 286, 3047, 281, 853, 483, 50, 521, 36, 11799, 281, 452, 1065, 2973, 2985, 51300], "temperature": 0.0, "avg_logprob": -0.12052952989618829, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.0010803319746628404}, {"id": 183, "seek": 116660, "start": 1185.32, "end": 1191.08, "text": " the first time. The one thing I didn't realize is that getSendEmail automatically adds every", "tokens": [51300, 264, 700, 565, 13, 440, 472, 551, 286, 994, 380, 4325, 307, 300, 483, 50, 521, 36, 11799, 6772, 10860, 633, 51588], "temperature": 0.0, "avg_logprob": -0.12052952989618829, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.0010803319746628404}, {"id": 184, "seek": 119108, "start": 1191.08, "end": 1198.36, "text": " contributor to the CC list. The first time I sent patches, I actually pinged like 150 people", "tokens": [50364, 42859, 281, 264, 12630, 1329, 13, 440, 700, 565, 286, 2279, 26531, 11, 286, 767, 26151, 292, 411, 8451, 561, 50728], "temperature": 0.0, "avg_logprob": -0.0973818584155011, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.004376623313874006}, {"id": 185, "seek": 119108, "start": 1198.36, "end": 1205.3999999999999, "text": " three times, leaked my personal email address. That's fine. No one yelled at me. And so I removed", "tokens": [50728, 1045, 1413, 11, 31779, 452, 2973, 3796, 2985, 13, 663, 311, 2489, 13, 883, 472, 38023, 412, 385, 13, 400, 370, 286, 7261, 51080], "temperature": 0.0, "avg_logprob": -0.0973818584155011, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.004376623313874006}, {"id": 186, "seek": 119108, "start": 1205.3999999999999, "end": 1211.1599999999999, "text": " the option to automatically CC people. And so when I actually sent the patches, no one was CC'd.", "tokens": [51080, 264, 3614, 281, 6772, 12630, 561, 13, 400, 370, 562, 286, 767, 2279, 264, 26531, 11, 572, 472, 390, 12630, 1116, 13, 51368], "temperature": 0.0, "avg_logprob": -0.0973818584155011, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.004376623313874006}, {"id": 187, "seek": 119108, "start": 1211.1599999999999, "end": 1216.1999999999998, "text": " When patches were getting reviewed, the authors weren't aware that their stuff was getting reviewed.", "tokens": [51368, 1133, 26531, 645, 1242, 18429, 11, 264, 16552, 4999, 380, 3650, 300, 641, 1507, 390, 1242, 18429, 13, 51620], "temperature": 0.0, "avg_logprob": -0.0973818584155011, "compression_ratio": 1.651063829787234, "no_speech_prob": 0.004376623313874006}, {"id": 188, "seek": 121620, "start": 1217.0, "end": 1225.48, "text": " Very fun. So, yeah, we do that. I got used to getSendEmail. I'll do that for you. If you submit", "tokens": [50404, 4372, 1019, 13, 407, 11, 1338, 11, 321, 360, 300, 13, 286, 658, 1143, 281, 483, 50, 521, 36, 11799, 13, 286, 603, 360, 300, 337, 291, 13, 759, 291, 10315, 50828], "temperature": 0.0, "avg_logprob": -0.11389836143044864, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.00466294027864933}, {"id": 189, "seek": 121620, "start": 1225.48, "end": 1231.72, "text": " comments on GitHub, pull requests, and so on, we'll take care of handling that. We have lots of", "tokens": [50828, 3053, 322, 23331, 11, 2235, 12475, 11, 293, 370, 322, 11, 321, 603, 747, 1127, 295, 13175, 300, 13, 492, 362, 3195, 295, 51140], "temperature": 0.0, "avg_logprob": -0.11389836143044864, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.00466294027864933}, {"id": 190, "seek": 121620, "start": 1231.72, "end": 1238.52, "text": " continuous interrogation to make sure that your comments pass the weird new coding style, to make", "tokens": [51140, 10957, 24871, 399, 281, 652, 988, 300, 428, 3053, 1320, 264, 3657, 777, 17720, 3758, 11, 281, 652, 51480], "temperature": 0.0, "avg_logprob": -0.11389836143044864, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.00466294027864933}, {"id": 191, "seek": 121620, "start": 1238.52, "end": 1243.24, "text": " sure that they respect the change log format, to make sure that they build and pass the test,", "tokens": [51480, 988, 300, 436, 3104, 264, 1319, 3565, 7877, 11, 281, 652, 988, 300, 436, 1322, 293, 1320, 264, 1500, 11, 51716], "temperature": 0.0, "avg_logprob": -0.11389836143044864, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.00466294027864933}, {"id": 192, "seek": 124324, "start": 1243.24, "end": 1249.88, "text": " and so on. And we're actually working on a little bot to generate the change log skeleton for you.", "tokens": [50364, 293, 370, 322, 13, 400, 321, 434, 767, 1364, 322, 257, 707, 10592, 281, 8460, 264, 1319, 3565, 25204, 337, 291, 13, 50696], "temperature": 0.0, "avg_logprob": -0.09949809005579997, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.005508010741323233}, {"id": 193, "seek": 124324, "start": 1251.32, "end": 1257.16, "text": " Furthermore, because of the way GCC works, development happens in stages. So right now,", "tokens": [50768, 23999, 11, 570, 295, 264, 636, 460, 11717, 1985, 11, 3250, 2314, 294, 10232, 13, 407, 558, 586, 11, 51060], "temperature": 0.0, "avg_logprob": -0.09949809005579997, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.005508010741323233}, {"id": 194, "seek": 124324, "start": 1257.16, "end": 1264.76, "text": " we're in stage four. So basically between sort of January and May, you're not allowed to make", "tokens": [51060, 321, 434, 294, 3233, 1451, 13, 407, 1936, 1296, 1333, 295, 7061, 293, 1891, 11, 291, 434, 406, 4350, 281, 652, 51440], "temperature": 0.0, "avg_logprob": -0.09949809005579997, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.005508010741323233}, {"id": 195, "seek": 124324, "start": 1264.76, "end": 1271.56, "text": " changes to common GCC parts. And this is a very good idea. It's to avoid breakage of sort of the", "tokens": [51440, 2962, 281, 2689, 460, 11717, 3166, 13, 400, 341, 307, 257, 588, 665, 1558, 13, 467, 311, 281, 5042, 1821, 609, 295, 1333, 295, 264, 51780], "temperature": 0.0, "avg_logprob": -0.09949809005579997, "compression_ratio": 1.551440329218107, "no_speech_prob": 0.005508010741323233}, {"id": 196, "seek": 127156, "start": 1271.56, "end": 1276.76, "text": " common structure of GCC that's going to affect the most languages. But that also means that", "tokens": [50364, 2689, 3877, 295, 460, 11717, 300, 311, 516, 281, 3345, 264, 881, 8650, 13, 583, 300, 611, 1355, 300, 50624], "temperature": 0.0, "avg_logprob": -0.08699311462103151, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0010424925712868571}, {"id": 197, "seek": 127156, "start": 1276.76, "end": 1282.6799999999998, "text": " we have some patches that we cannot merge until May. And so, again, GCCRS takes care of that.", "tokens": [50624, 321, 362, 512, 26531, 300, 321, 2644, 22183, 1826, 1891, 13, 400, 370, 11, 797, 11, 460, 11717, 43580, 2516, 1127, 295, 300, 13, 50920], "temperature": 0.0, "avg_logprob": -0.08699311462103151, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0010424925712868571}, {"id": 198, "seek": 127156, "start": 1283.3999999999999, "end": 1288.04, "text": " We have a staging branch and so on. We keep track of the stages for you. You can merge your stuff.", "tokens": [50956, 492, 362, 257, 41085, 9819, 293, 370, 322, 13, 492, 1066, 2837, 295, 264, 10232, 337, 291, 13, 509, 393, 22183, 428, 1507, 13, 51188], "temperature": 0.0, "avg_logprob": -0.08699311462103151, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0010424925712868571}, {"id": 199, "seek": 127156, "start": 1288.04, "end": 1295.56, "text": " We'll do it for you. And make sure you don't get annoyed by that. So is that working? Are people", "tokens": [51188, 492, 603, 360, 309, 337, 291, 13, 400, 652, 988, 291, 500, 380, 483, 25921, 538, 300, 13, 407, 307, 300, 1364, 30, 2014, 561, 51564], "temperature": 0.0, "avg_logprob": -0.08699311462103151, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0010424925712868571}, {"id": 200, "seek": 129556, "start": 1295.56, "end": 1303.24, "text": " happy to contribute on GCCRS? I think so. In 2022, we've had over 50 contributors.", "tokens": [50364, 2055, 281, 10586, 322, 460, 11717, 43580, 30, 286, 519, 370, 13, 682, 20229, 11, 321, 600, 632, 670, 2625, 45627, 13, 50748], "temperature": 0.0, "avg_logprob": -0.06940866285754789, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.0056851874105632305}, {"id": 201, "seek": 129556, "start": 1303.96, "end": 1308.84, "text": " That's mostly code contributors. We've also had people helping us with the get stuff,", "tokens": [50784, 663, 311, 5240, 3089, 45627, 13, 492, 600, 611, 632, 561, 4315, 505, 365, 264, 483, 1507, 11, 51028], "temperature": 0.0, "avg_logprob": -0.06940866285754789, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.0056851874105632305}, {"id": 202, "seek": 129556, "start": 1309.56, "end": 1315.56, "text": " the email stuff, CI stuff, and so on. But I'm not counting here the people reporting issues,", "tokens": [51064, 264, 3796, 1507, 11, 37777, 1507, 11, 293, 370, 322, 13, 583, 286, 478, 406, 13251, 510, 264, 561, 10031, 2663, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06940866285754789, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.0056851874105632305}, {"id": 203, "seek": 129556, "start": 1315.56, "end": 1322.04, "text": " because there's a lot more than that. We have a lot of students working on GCCRS,", "tokens": [51364, 570, 456, 311, 257, 688, 544, 813, 300, 13, 492, 362, 257, 688, 295, 1731, 1364, 322, 460, 11717, 43580, 11, 51688], "temperature": 0.0, "avg_logprob": -0.06940866285754789, "compression_ratio": 1.559090909090909, "no_speech_prob": 0.0056851874105632305}, {"id": 204, "seek": 132204, "start": 1322.12, "end": 1329.6399999999999, "text": " which I'm really proud of. I actually started as a Google Summer of Code student on GCCRS,", "tokens": [50368, 597, 286, 478, 534, 4570, 295, 13, 286, 767, 1409, 382, 257, 3329, 16161, 295, 15549, 3107, 322, 460, 11717, 43580, 11, 50744], "temperature": 0.0, "avg_logprob": -0.12107301675356351, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.002333957701921463}, {"id": 205, "seek": 132204, "start": 1329.6399999999999, "end": 1336.36, "text": " and now I'm a full-time engineer. And we've got multiple internships that are also coming that", "tokens": [50744, 293, 586, 286, 478, 257, 1577, 12, 3766, 11403, 13, 400, 321, 600, 658, 3866, 35712, 300, 366, 611, 1348, 300, 51080], "temperature": 0.0, "avg_logprob": -0.12107301675356351, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.002333957701921463}, {"id": 206, "seek": 132204, "start": 1336.36, "end": 1342.68, "text": " way. So, for example, we'll have a full-time six-month internship to take care of Libproc this year.", "tokens": [51080, 636, 13, 407, 11, 337, 1365, 11, 321, 603, 362, 257, 1577, 12, 3766, 2309, 12, 23534, 16861, 281, 747, 1127, 295, 15834, 4318, 66, 341, 1064, 13, 51396], "temperature": 0.0, "avg_logprob": -0.12107301675356351, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.002333957701921463}, {"id": 207, "seek": 132204, "start": 1343.8, "end": 1351.24, "text": " As I said, we also have a lot of GCC developers helping us. So people helping us with the get", "tokens": [51452, 1018, 286, 848, 11, 321, 611, 362, 257, 688, 295, 460, 11717, 8849, 4315, 505, 13, 407, 561, 4315, 505, 365, 264, 483, 51824], "temperature": 0.0, "avg_logprob": -0.12107301675356351, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.002333957701921463}, {"id": 208, "seek": 135124, "start": 1351.24, "end": 1357.16, "text": " stuff, with the emerging stuff, and so on. People providing very valuable input. And we have people", "tokens": [50364, 1507, 11, 365, 264, 14989, 1507, 11, 293, 370, 322, 13, 3432, 6530, 588, 8263, 4846, 13, 400, 321, 362, 561, 50660], "temperature": 0.0, "avg_logprob": -0.11340056294980257, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0008918861276470125}, {"id": 209, "seek": 135124, "start": 1357.16, "end": 1361.72, "text": " from the Rust team helping us, which is really nice. So people that are willing to work with us", "tokens": [50660, 490, 264, 34952, 1469, 4315, 505, 11, 597, 307, 534, 1481, 13, 407, 561, 300, 366, 4950, 281, 589, 365, 505, 50888], "temperature": 0.0, "avg_logprob": -0.11340056294980257, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0008918861276470125}, {"id": 210, "seek": 135124, "start": 1362.52, "end": 1368.04, "text": " on getting the test suite to pass, people that are explaining us how Rust works because it's", "tokens": [50928, 322, 1242, 264, 1500, 14205, 281, 1320, 11, 561, 300, 366, 13468, 505, 577, 34952, 1985, 570, 309, 311, 51204], "temperature": 0.0, "avg_logprob": -0.11340056294980257, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0008918861276470125}, {"id": 211, "seek": 136804, "start": 1368.04, "end": 1384.6, "text": " complex and just helping us not stray far from the path. So what's coming? When is GCCRS ready?", "tokens": [50364, 3997, 293, 445, 4315, 505, 406, 36219, 1400, 490, 264, 3100, 13, 407, 437, 311, 1348, 30, 1133, 307, 460, 11717, 43580, 1919, 30, 51192], "temperature": 0.0, "avg_logprob": -0.11490000997270856, "compression_ratio": 1.2847222222222223, "no_speech_prob": 0.0019173724576830864}, {"id": 212, "seek": 136804, "start": 1386.04, "end": 1392.76, "text": " GCCRS, to be at least sort of useful, has to be able to compile Libcore. So if you're not", "tokens": [51264, 460, 11717, 43580, 11, 281, 312, 412, 1935, 1333, 295, 4420, 11, 575, 281, 312, 1075, 281, 31413, 15834, 12352, 13, 407, 498, 291, 434, 406, 51600], "temperature": 0.0, "avg_logprob": -0.11490000997270856, "compression_ratio": 1.2847222222222223, "no_speech_prob": 0.0019173724576830864}, {"id": 213, "seek": 139276, "start": 1393.32, "end": 1399.08, "text": " aware of this, the standard library in Rust is actually three kids in a trench coat, where you", "tokens": [50392, 3650, 295, 341, 11, 264, 3832, 6405, 294, 34952, 307, 767, 1045, 2301, 294, 257, 39052, 10690, 11, 689, 291, 50680], "temperature": 0.0, "avg_logprob": -0.1330263969746042, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0036898613907396793}, {"id": 214, "seek": 139276, "start": 1399.08, "end": 1407.08, "text": " got the core stuff that's necessary for things like additions, creating lemdas, itch raters,", "tokens": [50680, 658, 264, 4965, 1507, 300, 311, 4818, 337, 721, 411, 35113, 11, 4084, 7495, 27476, 11, 309, 339, 5937, 433, 11, 51080], "temperature": 0.0, "avg_logprob": -0.1330263969746042, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0036898613907396793}, {"id": 215, "seek": 139276, "start": 1407.08, "end": 1413.0, "text": " four loops, and so on. On top of that, you got the alloc crate, which takes care of", "tokens": [51080, 1451, 16121, 11, 293, 370, 322, 13, 1282, 1192, 295, 300, 11, 291, 658, 264, 12660, 42426, 11, 597, 2516, 1127, 295, 51376], "temperature": 0.0, "avg_logprob": -0.1330263969746042, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0036898613907396793}, {"id": 216, "seek": 139276, "start": 1413.64, "end": 1417.72, "text": " all of the structures that need dynamical locations, so your vector, your box, and so on.", "tokens": [51408, 439, 295, 264, 9227, 300, 643, 5999, 804, 9253, 11, 370, 428, 8062, 11, 428, 2424, 11, 293, 370, 322, 13, 51612], "temperature": 0.0, "avg_logprob": -0.1330263969746042, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0036898613907396793}, {"id": 217, "seek": 141772, "start": 1418.52, "end": 1423.16, "text": " And all of that forms the Lib standard, which is used by most projects right now.", "tokens": [50404, 400, 439, 295, 300, 6422, 264, 15834, 3832, 11, 597, 307, 1143, 538, 881, 4455, 558, 586, 13, 50636], "temperature": 0.0, "avg_logprob": -0.0793183942635854, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.0012806450249627233}, {"id": 218, "seek": 141772, "start": 1425.16, "end": 1433.48, "text": " There's a lot of unstable stuff in Libcore. So that means that even if we target Rust 1.49,", "tokens": [50736, 821, 311, 257, 688, 295, 23742, 1507, 294, 15834, 12352, 13, 407, 300, 1355, 300, 754, 498, 321, 3779, 34952, 502, 13, 14938, 11, 51152], "temperature": 0.0, "avg_logprob": -0.0793183942635854, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.0012806450249627233}, {"id": 219, "seek": 141772, "start": 1433.48, "end": 1438.68, "text": " we have to actually be able to compile a much more advanced version to compile the core library.", "tokens": [51152, 321, 362, 281, 767, 312, 1075, 281, 31413, 257, 709, 544, 7339, 3037, 281, 31413, 264, 4965, 6405, 13, 51412], "temperature": 0.0, "avg_logprob": -0.0793183942635854, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.0012806450249627233}, {"id": 220, "seek": 141772, "start": 1440.84, "end": 1446.6000000000001, "text": " Finally, we also have to take care of Libproc. If you've never written a proc macro in your life,", "tokens": [51520, 6288, 11, 321, 611, 362, 281, 747, 1127, 295, 15834, 4318, 66, 13, 759, 291, 600, 1128, 3720, 257, 9510, 18887, 294, 428, 993, 11, 51808], "temperature": 0.0, "avg_logprob": -0.0793183942635854, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.0012806450249627233}, {"id": 221, "seek": 144660, "start": 1447.32, "end": 1456.84, "text": " well, you're missing out, but it's basically a very complex schmielblick that takes the AST,", "tokens": [50400, 731, 11, 291, 434, 5361, 484, 11, 457, 309, 311, 1936, 257, 588, 3997, 956, 76, 1187, 38263, 300, 2516, 264, 316, 6840, 11, 50876], "temperature": 0.0, "avg_logprob": -0.10452421915899847, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.000961248530074954}, {"id": 222, "seek": 144660, "start": 1456.84, "end": 1462.36, "text": " sends it to a remote process communication, gets an AST back, and pastes it. And we have", "tokens": [50876, 14790, 309, 281, 257, 8607, 1399, 6101, 11, 2170, 364, 316, 6840, 646, 11, 293, 1791, 279, 309, 13, 400, 321, 362, 51152], "temperature": 0.0, "avg_logprob": -0.10452421915899847, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.000961248530074954}, {"id": 223, "seek": 144660, "start": 1462.36, "end": 1468.9199999999998, "text": " to implement all of that sort of piping between the crate and the compiler, sending the AST tokens,", "tokens": [51152, 281, 4445, 439, 295, 300, 1333, 295, 35204, 1296, 264, 42426, 293, 264, 31958, 11, 7750, 264, 316, 6840, 22667, 11, 51480], "temperature": 0.0, "avg_logprob": -0.10452421915899847, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.000961248530074954}, {"id": 224, "seek": 144660, "start": 1468.9199999999998, "end": 1474.28, "text": " and so on, sending it to a location, all stuff like that. Finally, borrow checking.", "tokens": [51480, 293, 370, 322, 11, 7750, 309, 281, 257, 4914, 11, 439, 1507, 411, 300, 13, 6288, 11, 11172, 8568, 13, 51748], "temperature": 0.0, "avg_logprob": -0.10452421915899847, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.000961248530074954}, {"id": 225, "seek": 147428, "start": 1474.28, "end": 1479.32, "text": " If you've ever written Rust in your life, which I'm going to assume you have,", "tokens": [50364, 759, 291, 600, 1562, 3720, 34952, 294, 428, 993, 11, 597, 286, 478, 516, 281, 6552, 291, 362, 11, 50616], "temperature": 0.0, "avg_logprob": -0.09895654903945103, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012778249802067876}, {"id": 226, "seek": 147428, "start": 1481.08, "end": 1487.3999999999999, "text": " you've been sort of held at gunpoint by the borough checker. And that's really a core part", "tokens": [50704, 291, 600, 668, 1333, 295, 5167, 412, 3874, 6053, 538, 264, 14828, 581, 1520, 260, 13, 400, 300, 311, 534, 257, 4965, 644, 51020], "temperature": 0.0, "avg_logprob": -0.09895654903945103, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012778249802067876}, {"id": 227, "seek": 147428, "start": 1487.3999999999999, "end": 1492.6, "text": " of the language experience. And we can't really be a Rust compiler without a borough checker.", "tokens": [51020, 295, 264, 2856, 1752, 13, 400, 321, 393, 380, 534, 312, 257, 34952, 31958, 1553, 257, 14828, 581, 1520, 260, 13, 51280], "temperature": 0.0, "avg_logprob": -0.09895654903945103, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012778249802067876}, {"id": 228, "seek": 147428, "start": 1493.24, "end": 1501.16, "text": " So our aim for that is to reuse the upcoming Polonius project, which is a formalization", "tokens": [51312, 407, 527, 5939, 337, 300, 307, 281, 26225, 264, 11500, 3635, 266, 4872, 1716, 11, 597, 307, 257, 9860, 2144, 51708], "temperature": 0.0, "avg_logprob": -0.09895654903945103, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012778249802067876}, {"id": 229, "seek": 150116, "start": 1501.16, "end": 1507.0800000000002, "text": " of the rules of borough checking, and make sure that we can integrate it to a GCCRS. So the way", "tokens": [50364, 295, 264, 4474, 295, 14828, 581, 8568, 11, 293, 652, 988, 300, 321, 393, 13365, 309, 281, 257, 29435, 18547, 50, 13, 407, 264, 636, 50660], "temperature": 0.0, "avg_logprob": -0.09861986213755385, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0014104840811342}, {"id": 230, "seek": 150116, "start": 1507.0800000000002, "end": 1513.5600000000002, "text": " we're going to do that, again, is make sure we have sort of an intentional representation that", "tokens": [50660, 321, 434, 516, 281, 360, 300, 11, 797, 11, 307, 652, 988, 321, 362, 1333, 295, 364, 21935, 10290, 300, 50984], "temperature": 0.0, "avg_logprob": -0.09861986213755385, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0014104840811342}, {"id": 231, "seek": 150116, "start": 1513.5600000000002, "end": 1519.88, "text": " works for Polonius, create that tiny FFI layer that allows us to speak to Rust from our C++", "tokens": [50984, 1985, 337, 3635, 266, 4872, 11, 1884, 300, 5870, 479, 38568, 4583, 300, 4045, 505, 281, 1710, 281, 34952, 490, 527, 383, 25472, 51300], "temperature": 0.0, "avg_logprob": -0.09861986213755385, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0014104840811342}, {"id": 232, "seek": 150116, "start": 1519.88, "end": 1527.0, "text": " compiler, and ask Polonius to do the thing. Finally, we're part of this year's GSOC. So if any of", "tokens": [51300, 31958, 11, 293, 1029, 3635, 266, 4872, 281, 360, 264, 551, 13, 6288, 11, 321, 434, 644, 295, 341, 1064, 311, 460, 17188, 34, 13, 407, 498, 604, 295, 51656], "temperature": 0.0, "avg_logprob": -0.09861986213755385, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0014104840811342}, {"id": 233, "seek": 152700, "start": 1527.0, "end": 1533.24, "text": " what I said interests you, there's probably a project you can work on. For example, last year", "tokens": [50364, 437, 286, 848, 8847, 291, 11, 456, 311, 1391, 257, 1716, 291, 393, 589, 322, 13, 1171, 1365, 11, 1036, 1064, 50676], "temperature": 0.0, "avg_logprob": -0.10855674743652344, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0004789487866219133}, {"id": 234, "seek": 152700, "start": 1533.24, "end": 1540.84, "text": " we had a student that ported the const evaluator from C++ over to our front end, meaning that we", "tokens": [50676, 321, 632, 257, 3107, 300, 2436, 292, 264, 1817, 6133, 1639, 490, 383, 25472, 670, 281, 527, 1868, 917, 11, 3620, 300, 321, 51056], "temperature": 0.0, "avg_logprob": -0.10855674743652344, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0004789487866219133}, {"id": 235, "seek": 152700, "start": 1540.84, "end": 1548.84, "text": " can do, well, const evaluation now. So run const functions, do conditionals, for loops, and so on,", "tokens": [51056, 393, 360, 11, 731, 11, 1817, 13344, 586, 13, 407, 1190, 1817, 6828, 11, 360, 4188, 1124, 11, 337, 16121, 11, 293, 370, 322, 11, 51456], "temperature": 0.0, "avg_logprob": -0.10855674743652344, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0004789487866219133}, {"id": 236, "seek": 154884, "start": 1548.84, "end": 1559.0, "text": " in const context. This year's GSOC at least includes the following four projects.", "tokens": [50364, 294, 1817, 4319, 13, 639, 1064, 311, 460, 17188, 34, 412, 1935, 5974, 264, 3480, 1451, 4455, 13, 50872], "temperature": 0.0, "avg_logprob": -0.18380141258239746, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.0009500751621089876}, {"id": 237, "seek": 154884, "start": 1560.12, "end": 1564.1999999999998, "text": " So adding a better debugging experience for a high-level intermediate representation,", "tokens": [50928, 407, 5127, 257, 1101, 45592, 1752, 337, 257, 1090, 12, 12418, 19376, 10290, 11, 51132], "temperature": 0.0, "avg_logprob": -0.18380141258239746, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.0009500751621089876}, {"id": 238, "seek": 154884, "start": 1564.76, "end": 1570.9199999999998, "text": " adding proper Unicode support, proper metadata exports, so that stuff like the", "tokens": [51160, 5127, 2296, 1156, 299, 1429, 1406, 11, 2296, 26603, 31428, 11, 370, 300, 1507, 411, 264, 51468], "temperature": 0.0, "avg_logprob": -0.18380141258239746, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.0009500751621089876}, {"id": 239, "seek": 157092, "start": 1571.48, "end": 1577.64, "text": " DAI lib, Rust lib, C lib, and so on formats that you'll find when you're exporting Rust libraries.", "tokens": [50392, 9578, 40, 22854, 11, 34952, 22854, 11, 383, 22854, 11, 293, 370, 322, 25879, 300, 291, 603, 915, 562, 291, 434, 44686, 34952, 15148, 13, 50700], "temperature": 0.0, "avg_logprob": -0.1300734579563141, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0010291911894455552}, {"id": 240, "seek": 157092, "start": 1578.8400000000001, "end": 1584.8400000000001, "text": " And finally, better error handling for the user of GCCRS and starting to integrate the", "tokens": [50760, 400, 2721, 11, 1101, 6713, 13175, 337, 264, 4195, 295, 29435, 18547, 50, 293, 2891, 281, 13365, 264, 51060], "temperature": 0.0, "avg_logprob": -0.1300734579563141, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0010291911894455552}, {"id": 241, "seek": 157092, "start": 1584.8400000000001, "end": 1592.8400000000001, "text": " Rust C error codes to allow us to pass the Rust C test suite. There's a lot of tooling around", "tokens": [51060, 34952, 383, 6713, 14211, 281, 2089, 505, 281, 1320, 264, 34952, 383, 1500, 14205, 13, 821, 311, 257, 688, 295, 46593, 926, 51460], "temperature": 0.0, "avg_logprob": -0.1300734579563141, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0010291911894455552}, {"id": 242, "seek": 157092, "start": 1592.8400000000001, "end": 1598.3600000000001, "text": " GCCRS. So there's a test suite that takes like four hours that we run each night.", "tokens": [51460, 29435, 18547, 50, 13, 407, 456, 311, 257, 1500, 14205, 300, 2516, 411, 1451, 2496, 300, 321, 1190, 1184, 1818, 13, 51736], "temperature": 0.0, "avg_logprob": -0.1300734579563141, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0010291911894455552}, {"id": 243, "seek": 159836, "start": 1599.08, "end": 1603.9599999999998, "text": " There's a test suite generator because it's a thousand lines of code. So to make sure that,", "tokens": [50400, 821, 311, 257, 1500, 14205, 19265, 570, 309, 311, 257, 4714, 3876, 295, 3089, 13, 407, 281, 652, 988, 300, 11, 50644], "temperature": 0.0, "avg_logprob": -0.14672845458984374, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.0012397760292515159}, {"id": 244, "seek": 159836, "start": 1605.0, "end": 1608.6799999999998, "text": " to make sure, well, we don't pass any of the test suites for now, but we have it.", "tokens": [50696, 281, 652, 988, 11, 731, 11, 321, 500, 380, 1320, 604, 295, 264, 1500, 459, 3324, 337, 586, 11, 457, 321, 362, 309, 13, 50880], "temperature": 0.0, "avg_logprob": -0.14672845458984374, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.0012397760292515159}, {"id": 245, "seek": 159836, "start": 1609.24, "end": 1614.4399999999998, "text": " So there's a Blake 3 cryptography library, which is quite nice and doesn't rely on the standard", "tokens": [50908, 407, 456, 311, 257, 23451, 805, 9844, 5820, 6405, 11, 597, 307, 1596, 1481, 293, 1177, 380, 10687, 322, 264, 3832, 51168], "temperature": 0.0, "avg_logprob": -0.14672845458984374, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.0012397760292515159}, {"id": 246, "seek": 159836, "start": 1614.4399999999998, "end": 1622.04, "text": " library. And there's making sure we can compile libcore 1.49, making sure we can try and compile", "tokens": [51168, 6405, 13, 400, 456, 311, 1455, 988, 321, 393, 31413, 22854, 12352, 502, 13, 14938, 11, 1455, 988, 321, 393, 853, 293, 31413, 51548], "temperature": 0.0, "avg_logprob": -0.14672845458984374, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.0012397760292515159}, {"id": 247, "seek": 159836, "start": 1622.04, "end": 1627.24, "text": " all of the Rusty test suites, and we're running that every night. We have a generator for that,", "tokens": [51548, 439, 295, 264, 34952, 88, 1500, 459, 3324, 11, 293, 321, 434, 2614, 300, 633, 1818, 13, 492, 362, 257, 19265, 337, 300, 11, 51808], "temperature": 0.0, "avg_logprob": -0.14672845458984374, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.0012397760292515159}, {"id": 248, "seek": 162724, "start": 1627.24, "end": 1632.1200000000001, "text": " as I meant. We have a website, a dashboard for the test suite. We have a report generator", "tokens": [50364, 382, 286, 4140, 13, 492, 362, 257, 3144, 11, 257, 18342, 337, 264, 1500, 14205, 13, 492, 362, 257, 2275, 19265, 50608], "temperature": 0.0, "avg_logprob": -0.09649090864220444, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0005514356307685375}, {"id": 249, "seek": 162724, "start": 1632.1200000000001, "end": 1636.92, "text": " because they're annoying to write as well. And we got cargo GCCRS, which will allow you to,", "tokens": [50608, 570, 436, 434, 11304, 281, 2464, 382, 731, 13, 400, 321, 658, 19449, 29435, 18547, 50, 11, 597, 486, 2089, 291, 281, 11, 50848], "temperature": 0.0, "avg_logprob": -0.09649090864220444, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0005514356307685375}, {"id": 250, "seek": 162724, "start": 1637.56, "end": 1644.28, "text": " while instead of doing cargo build, use cargo GCCRS build to build your code with Rust with", "tokens": [50880, 1339, 2602, 295, 884, 19449, 1322, 11, 764, 19449, 29435, 18547, 50, 1322, 281, 1322, 428, 3089, 365, 34952, 365, 51216], "temperature": 0.0, "avg_logprob": -0.09649090864220444, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0005514356307685375}, {"id": 251, "seek": 162724, "start": 1644.28, "end": 1652.1200000000001, "text": " GCCRS. And all of that tooling is written in Rust for two reasons. The first one is it's much", "tokens": [51216, 29435, 18547, 50, 13, 400, 439, 295, 300, 46593, 307, 3720, 294, 34952, 337, 732, 4112, 13, 440, 700, 472, 307, 309, 311, 709, 51608], "temperature": 0.0, "avg_logprob": -0.09649090864220444, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0005514356307685375}, {"id": 252, "seek": 165212, "start": 1652.12, "end": 1659.8, "text": " better than C++. The second one is it wouldn't be so freaking cool to compile our own tools with", "tokens": [50364, 1101, 813, 383, 25472, 13, 440, 1150, 472, 307, 309, 2759, 380, 312, 370, 14612, 1627, 281, 31413, 527, 1065, 3873, 365, 50748], "temperature": 0.0, "avg_logprob": -0.07647911031195458, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0037464434280991554}, {"id": 253, "seek": 165212, "start": 1659.8, "end": 1664.9199999999998, "text": " our own compiler. And three reasons, actually. The most important one is to get people from", "tokens": [50748, 527, 1065, 31958, 13, 400, 1045, 4112, 11, 767, 13, 440, 881, 1021, 472, 307, 281, 483, 561, 490, 51004], "temperature": 0.0, "avg_logprob": -0.07647911031195458, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0037464434280991554}, {"id": 254, "seek": 165212, "start": 1664.9199999999998, "end": 1670.6, "text": " the Rust community to contribute to those tools. Actually, if you're interested in helping GCCRS", "tokens": [51004, 264, 34952, 1768, 281, 10586, 281, 729, 3873, 13, 5135, 11, 498, 291, 434, 3102, 294, 4315, 29435, 18547, 50, 51288], "temperature": 0.0, "avg_logprob": -0.07647911031195458, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0037464434280991554}, {"id": 255, "seek": 165212, "start": 1671.2399999999998, "end": 1677.32, "text": " in one way or another, a good thing would be to, you know, start working on that tooling. And", "tokens": [51320, 294, 472, 636, 420, 1071, 11, 257, 665, 551, 576, 312, 281, 11, 291, 458, 11, 722, 1364, 322, 300, 46593, 13, 400, 51624], "temperature": 0.0, "avg_logprob": -0.07647911031195458, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0037464434280991554}, {"id": 256, "seek": 167732, "start": 1677.32, "end": 1684.84, "text": " it's all of just fun stuff. The web dashboard is Tokyo and Async and a rocket database and so on,", "tokens": [50364, 309, 311, 439, 295, 445, 1019, 1507, 13, 440, 3670, 18342, 307, 15147, 293, 1018, 34015, 293, 257, 13012, 8149, 293, 370, 322, 11, 50740], "temperature": 0.0, "avg_logprob": -0.13577148060739777, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0008953027427196503}, {"id": 257, "seek": 167732, "start": 1684.84, "end": 1691.6399999999999, "text": " so not database, API. I'm not a web dev. So if you're interested in that, feel free to come and", "tokens": [50740, 370, 406, 8149, 11, 9362, 13, 286, 478, 406, 257, 3670, 1905, 13, 407, 498, 291, 434, 3102, 294, 300, 11, 841, 1737, 281, 808, 293, 51080], "temperature": 0.0, "avg_logprob": -0.13577148060739777, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0008953027427196503}, {"id": 258, "seek": 167732, "start": 1691.6399999999999, "end": 1702.28, "text": " contribute. Finally, can we rewrite GCC in Rust? Maybe. For bootstrapping purposes, so make sure", "tokens": [51080, 10586, 13, 6288, 11, 393, 321, 28132, 460, 11717, 294, 34952, 30, 2704, 13, 1171, 11450, 19639, 3759, 9932, 11, 370, 652, 988, 51612], "temperature": 0.0, "avg_logprob": -0.13577148060739777, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.0008953027427196503}, {"id": 259, "seek": 170228, "start": 1702.28, "end": 1707.24, "text": " that we have a full bootstrapping chain. You can read a lot of papers on that, trusting, trust,", "tokens": [50364, 300, 321, 362, 257, 1577, 11450, 19639, 3759, 5021, 13, 509, 393, 1401, 257, 688, 295, 10577, 322, 300, 11, 28235, 11, 3361, 11, 50612], "temperature": 0.0, "avg_logprob": -0.07455363980046024, "compression_ratio": 1.5179282868525896, "no_speech_prob": 0.006884914822876453}, {"id": 260, "seek": 170228, "start": 1707.24, "end": 1714.76, "text": " and so on. We'll have to write that compiler in Rust 1.49, which is going to be annoying. It's", "tokens": [50612, 293, 370, 322, 13, 492, 603, 362, 281, 2464, 300, 31958, 294, 34952, 502, 13, 14938, 11, 597, 307, 516, 281, 312, 11304, 13, 467, 311, 50988], "temperature": 0.0, "avg_logprob": -0.07455363980046024, "compression_ratio": 1.5179282868525896, "no_speech_prob": 0.006884914822876453}, {"id": 261, "seek": 170228, "start": 1714.76, "end": 1720.92, "text": " still a ways off. And I'd like to really point out that the goal of GCCRS is not to break the", "tokens": [50988, 920, 257, 2098, 766, 13, 400, 286, 1116, 411, 281, 534, 935, 484, 300, 264, 3387, 295, 29435, 18547, 50, 307, 406, 281, 1821, 264, 51296], "temperature": 0.0, "avg_logprob": -0.07455363980046024, "compression_ratio": 1.5179282868525896, "no_speech_prob": 0.006884914822876453}, {"id": 262, "seek": 170228, "start": 1720.92, "end": 1727.96, "text": " ecosystem. So we want to make sure that whenever someone compiles one of your crates with GCCRS,", "tokens": [51296, 11311, 13, 407, 321, 528, 281, 652, 988, 300, 5699, 1580, 715, 4680, 472, 295, 428, 941, 1024, 365, 29435, 18547, 50, 11, 51648], "temperature": 0.0, "avg_logprob": -0.07455363980046024, "compression_ratio": 1.5179282868525896, "no_speech_prob": 0.006884914822876453}, {"id": 263, "seek": 172796, "start": 1727.96, "end": 1734.3600000000001, "text": " they're not actually blaming you for the failure that's going to happen. And yeah, that they report", "tokens": [50364, 436, 434, 406, 767, 32364, 291, 337, 264, 7763, 300, 311, 516, 281, 1051, 13, 400, 1338, 11, 300, 436, 2275, 50684], "temperature": 0.0, "avg_logprob": -0.09095378674958882, "compression_ratio": 1.7072072072072073, "no_speech_prob": 0.002507196506485343}, {"id": 264, "seek": 172796, "start": 1734.3600000000001, "end": 1738.8400000000001, "text": " the issue to us because we're not a proper Rust compiler yet and you shouldn't have to suffer for", "tokens": [50684, 264, 2734, 281, 505, 570, 321, 434, 406, 257, 2296, 34952, 31958, 1939, 293, 291, 4659, 380, 362, 281, 9753, 337, 50908], "temperature": 0.0, "avg_logprob": -0.09095378674958882, "compression_ratio": 1.7072072072072073, "no_speech_prob": 0.002507196506485343}, {"id": 265, "seek": 172796, "start": 1739.48, "end": 1747.0, "text": " our hubris. The community, we got mugs. If you do pull requests, we'll send you a mug.", "tokens": [50940, 527, 11838, 5714, 13, 440, 1768, 11, 321, 658, 275, 14950, 13, 759, 291, 360, 2235, 12475, 11, 321, 603, 2845, 291, 257, 23610, 13, 51316], "temperature": 0.0, "avg_logprob": -0.09095378674958882, "compression_ratio": 1.7072072072072073, "no_speech_prob": 0.002507196506485343}, {"id": 266, "seek": 172796, "start": 1748.92, "end": 1752.92, "text": " People that have helped with the compiler got this one. People that have helped with the merge", "tokens": [51412, 3432, 300, 362, 4254, 365, 264, 31958, 658, 341, 472, 13, 3432, 300, 362, 4254, 365, 264, 22183, 51612], "temperature": 0.0, "avg_logprob": -0.09095378674958882, "compression_ratio": 1.7072072072072073, "no_speech_prob": 0.002507196506485343}, {"id": 267, "seek": 175292, "start": 1752.92, "end": 1759.5600000000002, "text": " got the one on the right. Lots of links. You can attend them. We have, as I said,", "tokens": [50364, 658, 264, 472, 322, 264, 558, 13, 15908, 295, 6123, 13, 509, 393, 6888, 552, 13, 492, 362, 11, 382, 286, 848, 11, 50696], "temperature": 0.0, "avg_logprob": -0.08887593788013123, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0031587250996381044}, {"id": 268, "seek": 175292, "start": 1759.5600000000002, "end": 1764.6000000000001, "text": " maybe I didn't say it, but we have monthly and weekly calls on JetSea. You can attend them,", "tokens": [50696, 1310, 286, 994, 380, 584, 309, 11, 457, 321, 362, 12878, 293, 12460, 5498, 322, 28730, 10637, 64, 13, 509, 393, 6888, 552, 11, 50948], "temperature": 0.0, "avg_logprob": -0.08887593788013123, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0031587250996381044}, {"id": 269, "seek": 175292, "start": 1764.6000000000001, "end": 1769.48, "text": " even if you're just interested in listening in. We have an IRC channel, a website, and so on.", "tokens": [50948, 754, 498, 291, 434, 445, 3102, 294, 4764, 294, 13, 492, 362, 364, 16486, 34, 2269, 11, 257, 3144, 11, 293, 370, 322, 13, 51192], "temperature": 0.0, "avg_logprob": -0.08887593788013123, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0031587250996381044}, {"id": 270, "seek": 175292, "start": 1770.3600000000001, "end": 1775.3200000000002, "text": " The goal is to make compilers fun. The goal is to get contributions from everyone,", "tokens": [51236, 440, 3387, 307, 281, 652, 715, 388, 433, 1019, 13, 440, 3387, 307, 281, 483, 15725, 490, 1518, 11, 51484], "temperature": 0.0, "avg_logprob": -0.08887593788013123, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0031587250996381044}, {"id": 271, "seek": 175292, "start": 1775.3200000000002, "end": 1777.8000000000002, "text": " from the GCC community as well as the Rust community.", "tokens": [51484, 490, 264, 460, 11717, 1768, 382, 731, 382, 264, 34952, 1768, 13, 51608], "temperature": 0.0, "avg_logprob": -0.08887593788013123, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0031587250996381044}, {"id": 272, "seek": 177780, "start": 1778.04, "end": 1783.48, "text": " We have Google Summer of Code. There's lots of stuff for you to work on. We got good first", "tokens": [50376, 492, 362, 3329, 16161, 295, 15549, 13, 821, 311, 3195, 295, 1507, 337, 291, 281, 589, 322, 13, 492, 658, 665, 700, 50648], "temperature": 0.0, "avg_logprob": -0.1436565121014913, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0030200022738426924}, {"id": 273, "seek": 177780, "start": 1783.48, "end": 1791.24, "text": " PR issues. If you're interested in compilers, come talk to us. We don't bite. We got reports every", "tokens": [50648, 11568, 2663, 13, 759, 291, 434, 3102, 294, 715, 388, 433, 11, 808, 751, 281, 505, 13, 492, 500, 380, 7988, 13, 492, 658, 7122, 633, 51036], "temperature": 0.0, "avg_logprob": -0.1436565121014913, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0030200022738426924}, {"id": 274, "seek": 177780, "start": 1791.24, "end": 1798.9199999999998, "text": " week. We shout out contributors, so if you do pull requests, we'll tell you about it. We'll", "tokens": [51036, 1243, 13, 492, 8043, 484, 45627, 11, 370, 498, 291, 360, 2235, 12475, 11, 321, 603, 980, 291, 466, 309, 13, 492, 603, 51420], "temperature": 0.0, "avg_logprob": -0.1436565121014913, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0030200022738426924}, {"id": 275, "seek": 177780, "start": 1798.9199999999998, "end": 1804.2, "text": " tell people about it. We got monthly calls. Do you have any questions?", "tokens": [51420, 980, 561, 466, 309, 13, 492, 658, 12878, 5498, 13, 1144, 291, 362, 604, 1651, 30, 51684], "temperature": 0.0, "avg_logprob": -0.1436565121014913, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0030200022738426924}, {"id": 276, "seek": 180780, "start": 1808.04, "end": 1825.3999999999999, "text": " Hi. Awesome project. Thank you. You mentioned one of your goals was to help develop a spec of", "tokens": [50376, 2421, 13, 10391, 1716, 13, 1044, 291, 13, 509, 2835, 472, 295, 428, 5493, 390, 281, 854, 1499, 257, 1608, 295, 51244], "temperature": 0.0, "avg_logprob": -0.2851501581620197, "compression_ratio": 1.2876712328767124, "no_speech_prob": 0.0071336328983306885}, {"id": 277, "seek": 180780, "start": 1825.3999999999999, "end": 1831.1599999999999, "text": " Rust with the Rust C team. Can you share more about that? There's nothing really started. It's", "tokens": [51244, 34952, 365, 264, 34952, 383, 1469, 13, 1664, 291, 2073, 544, 466, 300, 30, 821, 311, 1825, 534, 1409, 13, 467, 311, 51532], "temperature": 0.0, "avg_logprob": -0.2851501581620197, "compression_ratio": 1.2876712328767124, "no_speech_prob": 0.0071336328983306885}, {"id": 278, "seek": 183116, "start": 1831.24, "end": 1837.64, "text": " just that you have the Rust reference at the moment, and it tells you how Rust works from", "tokens": [50368, 445, 300, 291, 362, 264, 34952, 6408, 412, 264, 1623, 11, 293, 309, 5112, 291, 577, 34952, 1985, 490, 50688], "temperature": 0.0, "avg_logprob": -0.12598036924997966, "compression_ratio": 1.667844522968198, "no_speech_prob": 0.030892610549926758}, {"id": 279, "seek": 183116, "start": 1837.64, "end": 1842.0400000000002, "text": " a user point of view, but not specifically from a language point of view. At the same time, we", "tokens": [50688, 257, 4195, 935, 295, 1910, 11, 457, 406, 4682, 490, 257, 2856, 935, 295, 1910, 13, 1711, 264, 912, 565, 11, 321, 50908], "temperature": 0.0, "avg_logprob": -0.12598036924997966, "compression_ratio": 1.667844522968198, "no_speech_prob": 0.030892610549926758}, {"id": 280, "seek": 183116, "start": 1842.0400000000002, "end": 1847.48, "text": " don't want a Rust standard like you have with C or C++ where it gets really annoying to get features", "tokens": [50908, 500, 380, 528, 257, 34952, 3832, 411, 291, 362, 365, 383, 420, 383, 25472, 689, 309, 2170, 534, 11304, 281, 483, 4122, 51180], "temperature": 0.0, "avg_logprob": -0.12598036924997966, "compression_ratio": 1.667844522968198, "no_speech_prob": 0.030892610549926758}, {"id": 281, "seek": 183116, "start": 1847.48, "end": 1854.1200000000001, "text": " done. There are efforts from people like Mara Boss and Josh Triplet and so on to have a Rust", "tokens": [51180, 1096, 13, 821, 366, 6484, 490, 561, 411, 2039, 64, 15215, 293, 9785, 10931, 14657, 293, 370, 322, 281, 362, 257, 34952, 51512], "temperature": 0.0, "avg_logprob": -0.12598036924997966, "compression_ratio": 1.667844522968198, "no_speech_prob": 0.030892610549926758}, {"id": 282, "seek": 183116, "start": 1854.1200000000001, "end": 1859.88, "text": " specification. One of the goals of GCCRS is to say, well, we've had trouble with that because", "tokens": [51512, 31256, 13, 1485, 295, 264, 5493, 295, 460, 11717, 43580, 307, 281, 584, 11, 731, 11, 321, 600, 632, 5253, 365, 300, 570, 51800], "temperature": 0.0, "avg_logprob": -0.12598036924997966, "compression_ratio": 1.667844522968198, "no_speech_prob": 0.030892610549926758}, {"id": 283, "seek": 185988, "start": 1859.88, "end": 1865.16, "text": " that's not how it is in the reference, or it's not explained well enough, and we had to look at", "tokens": [50364, 300, 311, 406, 577, 309, 307, 294, 264, 6408, 11, 420, 309, 311, 406, 8825, 731, 1547, 11, 293, 321, 632, 281, 574, 412, 50628], "temperature": 0.0, "avg_logprob": -0.1512562835100785, "compression_ratio": 1.6125, "no_speech_prob": 0.0031043619383126497}, {"id": 284, "seek": 185988, "start": 1865.16, "end": 1870.2, "text": " the Rust C source code or try it out to figure out how that works. Stuff like dear reference", "tokens": [50628, 264, 34952, 383, 4009, 3089, 420, 853, 309, 484, 281, 2573, 484, 577, 300, 1985, 13, 31347, 411, 6875, 6408, 50880], "temperature": 0.0, "avg_logprob": -0.1512562835100785, "compression_ratio": 1.6125, "no_speech_prob": 0.0031043619383126497}, {"id": 285, "seek": 185988, "start": 1870.2, "end": 1879.48, "text": " chains, what type actually gets used for a method call, and so on, and so on. We can point out and", "tokens": [50880, 12626, 11, 437, 2010, 767, 2170, 1143, 337, 257, 3170, 818, 11, 293, 370, 322, 11, 293, 370, 322, 13, 492, 393, 935, 484, 293, 51344], "temperature": 0.0, "avg_logprob": -0.1512562835100785, "compression_ratio": 1.6125, "no_speech_prob": 0.0031043619383126497}, {"id": 286, "seek": 185988, "start": 1879.48, "end": 1886.6000000000001, "text": " say, well, maybe that could take some tweaking because that's not, yeah. Do you have a list already", "tokens": [51344, 584, 11, 731, 11, 1310, 300, 727, 747, 512, 6986, 2456, 570, 300, 311, 406, 11, 1338, 13, 1144, 291, 362, 257, 1329, 1217, 51700], "temperature": 0.0, "avg_logprob": -0.1512562835100785, "compression_ratio": 1.6125, "no_speech_prob": 0.0031043619383126497}, {"id": 287, "seek": 188660, "start": 1886.6799999999998, "end": 1894.28, "text": " of stuff like that? It's mostly type system stuff. I have some on macros. There's not really a formal", "tokens": [50368, 295, 1507, 411, 300, 30, 467, 311, 5240, 2010, 1185, 1507, 13, 286, 362, 512, 322, 7912, 2635, 13, 821, 311, 406, 534, 257, 9860, 50748], "temperature": 0.0, "avg_logprob": -0.12966414993884517, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.009571564383804798}, {"id": 288, "seek": 188660, "start": 1895.32, "end": 1900.76, "text": " list. I think we have some, like we have an actual list somewhere, but yeah, I don't have it in my", "tokens": [50800, 1329, 13, 286, 519, 321, 362, 512, 11, 411, 321, 362, 364, 3539, 1329, 4079, 11, 457, 1338, 11, 286, 500, 380, 362, 309, 294, 452, 51072], "temperature": 0.0, "avg_logprob": -0.12966414993884517, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.009571564383804798}, {"id": 289, "seek": 188660, "start": 1900.76, "end": 1909.32, "text": " head right now, sorry. Thanks. Thanks so much. Two questions perhaps related. First, on performance.", "tokens": [51072, 1378, 558, 586, 11, 2597, 13, 2561, 13, 2561, 370, 709, 13, 4453, 1651, 4317, 4077, 13, 2386, 11, 322, 3389, 13, 51500], "temperature": 0.0, "avg_logprob": -0.12966414993884517, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.009571564383804798}, {"id": 290, "seek": 188660, "start": 1909.32, "end": 1914.04, "text": " I wondered if you had any numbers at all on the performance comparison or what your goals are for", "tokens": [51500, 286, 17055, 498, 291, 632, 604, 3547, 412, 439, 322, 264, 3389, 9660, 420, 437, 428, 5493, 366, 337, 51736], "temperature": 0.0, "avg_logprob": -0.12966414993884517, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.009571564383804798}, {"id": 291, "seek": 191404, "start": 1914.04, "end": 1920.44, "text": " that. And secondly, I'm kind of surprised by how much you re-implemented in terms of the IRs. Was", "tokens": [50364, 300, 13, 400, 26246, 11, 286, 478, 733, 295, 6100, 538, 577, 709, 291, 319, 12, 332, 781, 14684, 294, 2115, 295, 264, 16486, 82, 13, 3027, 50684], "temperature": 0.0, "avg_logprob": -0.10278591307082979, "compression_ratio": 1.5096525096525097, "no_speech_prob": 0.0032018080819398165}, {"id": 292, "seek": 191404, "start": 1920.44, "end": 1926.36, "text": " that an intentional decision or was that because it needed to be in C++ or why not effectively consume", "tokens": [50684, 300, 364, 21935, 3537, 420, 390, 300, 570, 309, 2978, 281, 312, 294, 383, 25472, 420, 983, 406, 8659, 14732, 50980], "temperature": 0.0, "avg_logprob": -0.10278591307082979, "compression_ratio": 1.5096525096525097, "no_speech_prob": 0.0032018080819398165}, {"id": 293, "seek": 191404, "start": 1926.36, "end": 1933.8, "text": " more of the Rust stack and then replace LLVM with GCC at the bottom? So regarding performance,", "tokens": [50980, 544, 295, 264, 34952, 8630, 293, 550, 7406, 441, 43, 53, 44, 365, 460, 11717, 412, 264, 2767, 30, 407, 8595, 3389, 11, 51352], "temperature": 0.0, "avg_logprob": -0.10278591307082979, "compression_ratio": 1.5096525096525097, "no_speech_prob": 0.0032018080819398165}, {"id": 294, "seek": 191404, "start": 1933.8, "end": 1940.68, "text": " we're much faster because we do much less. But we actually don't know about performance yet. We", "tokens": [51352, 321, 434, 709, 4663, 570, 321, 360, 709, 1570, 13, 583, 321, 767, 500, 380, 458, 466, 3389, 1939, 13, 492, 51696], "temperature": 0.0, "avg_logprob": -0.10278591307082979, "compression_ratio": 1.5096525096525097, "no_speech_prob": 0.0032018080819398165}, {"id": 295, "seek": 194068, "start": 1940.76, "end": 1946.2, "text": " haven't measured it. No benchmarks. We have a ton of stuff missing. The code we emit, we're not trying", "tokens": [50368, 2378, 380, 12690, 309, 13, 883, 43751, 13, 492, 362, 257, 2952, 295, 1507, 5361, 13, 440, 3089, 321, 32084, 11, 321, 434, 406, 1382, 50640], "temperature": 0.0, "avg_logprob": -0.11125245045140847, "compression_ratio": 1.5743801652892562, "no_speech_prob": 0.001236306270584464}, {"id": 296, "seek": 194068, "start": 1946.2, "end": 1953.4, "text": " to optimize it sort of for Rust yet or at least not all the time. So yeah, we're just not there yet.", "tokens": [50640, 281, 19719, 309, 1333, 295, 337, 34952, 1939, 420, 412, 1935, 406, 439, 264, 565, 13, 407, 1338, 11, 321, 434, 445, 406, 456, 1939, 13, 51000], "temperature": 0.0, "avg_logprob": -0.11125245045140847, "compression_ratio": 1.5743801652892562, "no_speech_prob": 0.001236306270584464}, {"id": 297, "seek": 194068, "start": 1953.4, "end": 1960.76, "text": " It's going to happen eventually. Regarding the internal representation, consuming the", "tokens": [51000, 467, 311, 516, 281, 1051, 4728, 13, 35523, 264, 6920, 10290, 11, 19867, 264, 51368], "temperature": 0.0, "avg_logprob": -0.11125245045140847, "compression_ratio": 1.5743801652892562, "no_speech_prob": 0.001236306270584464}, {"id": 298, "seek": 194068, "start": 1961.72, "end": 1969.3200000000002, "text": " Rust C stuff is difficult. There's a lot of, even if Rust is a very well designed compiler,", "tokens": [51416, 34952, 383, 1507, 307, 2252, 13, 821, 311, 257, 688, 295, 11, 754, 498, 34952, 307, 257, 588, 731, 4761, 31958, 11, 51796], "temperature": 0.0, "avg_logprob": -0.11125245045140847, "compression_ratio": 1.5743801652892562, "no_speech_prob": 0.001236306270584464}, {"id": 299, "seek": 196932, "start": 1969.48, "end": 1976.36, "text": " Rust C, there is some stuff that makes sense only in a Rust C context. And that's also one of the", "tokens": [50372, 34952, 383, 11, 456, 307, 512, 1507, 300, 1669, 2020, 787, 294, 257, 34952, 383, 4319, 13, 400, 300, 311, 611, 472, 295, 264, 50716], "temperature": 0.0, "avg_logprob": -0.12440469832647415, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.0017916096840053797}, {"id": 300, "seek": 196932, "start": 1976.36, "end": 1981.6399999999999, "text": " things with Polonius that we're trying to work on is that it does depend on some Rust C specific", "tokens": [50716, 721, 365, 3635, 266, 4872, 300, 321, 434, 1382, 281, 589, 322, 307, 300, 309, 775, 5672, 322, 512, 34952, 383, 2685, 50980], "temperature": 0.0, "avg_logprob": -0.12440469832647415, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.0017916096840053797}, {"id": 301, "seek": 196932, "start": 1981.6399999999999, "end": 1986.9199999999998, "text": " stuff. So we do aim to contribute to Polonius and make it so that it's a little bit more", "tokens": [50980, 1507, 13, 407, 321, 360, 5939, 281, 10586, 281, 3635, 266, 4872, 293, 652, 309, 370, 300, 309, 311, 257, 707, 857, 544, 51244], "temperature": 0.0, "avg_logprob": -0.12440469832647415, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.0017916096840053797}, {"id": 302, "seek": 196932, "start": 1987.72, "end": 1993.32, "text": " compiler agnostic, I want to say, but not just to help us, just for it to make sort of more sense", "tokens": [51284, 31958, 623, 77, 19634, 11, 286, 528, 281, 584, 11, 457, 406, 445, 281, 854, 505, 11, 445, 337, 309, 281, 652, 1333, 295, 544, 2020, 51564], "temperature": 0.0, "avg_logprob": -0.12440469832647415, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.0017916096840053797}, {"id": 303, "seek": 199332, "start": 1993.32, "end": 2001.6399999999999, "text": " and maybe be used by even more languages, who knows? But yeah, sorry. We needed representations.", "tokens": [50364, 293, 1310, 312, 1143, 538, 754, 544, 8650, 11, 567, 3255, 30, 583, 1338, 11, 2597, 13, 492, 2978, 33358, 13, 50780], "temperature": 0.0, "avg_logprob": -0.15128552423764582, "compression_ratio": 1.3794871794871795, "no_speech_prob": 0.004232728388160467}, {"id": 304, "seek": 199332, "start": 2003.32, "end": 2009.8, "text": " I know it's still too far away, but is binary reproducibility a target of this?", "tokens": [50864, 286, 458, 309, 311, 920, 886, 1400, 1314, 11, 457, 307, 17434, 11408, 537, 39802, 257, 3779, 295, 341, 30, 51188], "temperature": 0.0, "avg_logprob": -0.15128552423764582, "compression_ratio": 1.3794871794871795, "no_speech_prob": 0.004232728388160467}, {"id": 305, "seek": 199332, "start": 2011.08, "end": 2018.84, "text": " No, not really. Sorry. It would be difficult. The Rust ABI is not stable. Rust C changes its", "tokens": [51252, 883, 11, 406, 534, 13, 4919, 13, 467, 576, 312, 2252, 13, 440, 34952, 316, 11291, 307, 406, 8351, 13, 34952, 383, 2962, 1080, 51640], "temperature": 0.0, "avg_logprob": -0.15128552423764582, "compression_ratio": 1.3794871794871795, "no_speech_prob": 0.004232728388160467}, {"id": 306, "seek": 201884, "start": 2018.84, "end": 2023.9599999999998, "text": " sort of internal formats and representations. I don't want to say often, but it does happen.", "tokens": [50364, 1333, 295, 6920, 25879, 293, 33358, 13, 286, 500, 380, 528, 281, 584, 2049, 11, 457, 309, 775, 1051, 13, 50620], "temperature": 0.0, "avg_logprob": -0.13545334074232313, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002826487412676215}, {"id": 307, "seek": 201884, "start": 2024.52, "end": 2030.4399999999998, "text": " And it would be really difficult to keep up with that without sort of a stability guarantee or", "tokens": [50648, 400, 309, 576, 312, 534, 2252, 281, 1066, 493, 365, 300, 1553, 1333, 295, 257, 11826, 10815, 420, 50944], "temperature": 0.0, "avg_logprob": -0.13545334074232313, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002826487412676215}, {"id": 308, "seek": 201884, "start": 2030.4399999999998, "end": 2040.12, "text": " a specification of that. It's really not one of our aims. Thanks for the talk. I was wondering", "tokens": [50944, 257, 31256, 295, 300, 13, 467, 311, 534, 406, 472, 295, 527, 24683, 13, 2561, 337, 264, 751, 13, 286, 390, 6359, 51428], "temperature": 0.0, "avg_logprob": -0.13545334074232313, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002826487412676215}, {"id": 309, "seek": 201884, "start": 2040.12, "end": 2047.9599999999998, "text": " about your cargo re-implementation. Wouldn't it be easier to have a command line compatibility", "tokens": [51428, 466, 428, 19449, 319, 12, 332, 781, 19631, 13, 26291, 380, 309, 312, 3571, 281, 362, 257, 5622, 1622, 34237, 51820], "temperature": 0.0, "avg_logprob": -0.13545334074232313, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002826487412676215}, {"id": 310, "seek": 204796, "start": 2048.04, "end": 2055.08, "text": " with Rust C and then plug that thing into cargo to tell cargo don't use Rust C, use GCC Rust?", "tokens": [50368, 365, 34952, 383, 293, 550, 5452, 300, 551, 666, 19449, 281, 980, 19449, 500, 380, 764, 34952, 383, 11, 764, 460, 11717, 34952, 30, 50720], "temperature": 0.0, "avg_logprob": -0.11368822168420863, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0017707982333377004}, {"id": 311, "seek": 204796, "start": 2056.52, "end": 2062.52, "text": " So it's not a cargo re-implementation. It's a cargo sub-comment. So it's the same as cargo", "tokens": [50792, 407, 309, 311, 406, 257, 19449, 319, 12, 332, 781, 19631, 13, 467, 311, 257, 19449, 1422, 12, 1112, 518, 13, 407, 309, 311, 264, 912, 382, 19449, 51092], "temperature": 0.0, "avg_logprob": -0.11368822168420863, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0017707982333377004}, {"id": 312, "seek": 204796, "start": 2062.52, "end": 2068.76, "text": " FMT, for example. How it actually works is that we intercept the Rust C command line,", "tokens": [51092, 29614, 51, 11, 337, 1365, 13, 1012, 309, 767, 1985, 307, 300, 321, 24700, 264, 34952, 383, 5622, 1622, 11, 51404], "temperature": 0.0, "avg_logprob": -0.11368822168420863, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0017707982333377004}, {"id": 313, "seek": 204796, "start": 2068.76, "end": 2076.04, "text": " as you mentioned, instead of saying, well, fork and start Rust C, we start GCCRS. And on top of", "tokens": [51404, 382, 291, 2835, 11, 2602, 295, 1566, 11, 731, 11, 17716, 293, 722, 34952, 383, 11, 321, 722, 460, 11717, 43580, 13, 400, 322, 1192, 295, 51768], "temperature": 0.0, "avg_logprob": -0.11368822168420863, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0017707982333377004}, {"id": 314, "seek": 207604, "start": 2076.12, "end": 2082.44, "text": " that, we do argument translation. So stuff like dash dash edition equals 2018 for Rust C is going", "tokens": [50368, 300, 11, 321, 360, 6770, 12853, 13, 407, 1507, 411, 8240, 8240, 11377, 6915, 6096, 337, 34952, 383, 307, 516, 50684], "temperature": 0.0, "avg_logprob": -0.15058284220488174, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0034080995246767998}, {"id": 315, "seek": 207604, "start": 2082.44, "end": 2089.4, "text": " to become dash F Rust dash edition equals 2018 for GCCRS. So we have that list and we do the", "tokens": [50684, 281, 1813, 8240, 479, 34952, 8240, 11377, 6915, 6096, 337, 460, 11717, 43580, 13, 407, 321, 362, 300, 1329, 293, 321, 360, 264, 51032], "temperature": 0.0, "avg_logprob": -0.15058284220488174, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0034080995246767998}, {"id": 316, "seek": 207604, "start": 2089.4, "end": 2093.72, "text": " translation and then just launch GCCRS and pipe the result back to cargo.", "tokens": [51032, 12853, 293, 550, 445, 4025, 460, 11717, 43580, 293, 11240, 264, 1874, 646, 281, 19449, 13, 51248], "temperature": 0.0, "avg_logprob": -0.15058284220488174, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0034080995246767998}, {"id": 317, "seek": 207604, "start": 2100.7599999999998, "end": 2104.44, "text": " Thanks for the great talk. And one question or maybe a tip, I don't know if it's one,", "tokens": [51600, 2561, 337, 264, 869, 751, 13, 400, 472, 1168, 420, 1310, 257, 4125, 11, 286, 500, 380, 458, 498, 309, 311, 472, 11, 51784], "temperature": 0.0, "avg_logprob": -0.15058284220488174, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0034080995246767998}, {"id": 318, "seek": 210444, "start": 2104.44, "end": 2110.84, "text": " but is there a project or some possibility to transform the LLVM IR to the GCC IR?", "tokens": [50364, 457, 307, 456, 257, 1716, 420, 512, 7959, 281, 4088, 264, 441, 43, 53, 44, 16486, 281, 264, 460, 11717, 16486, 30, 50684], "temperature": 0.0, "avg_logprob": -0.12453957398732503, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.0042250026017427444}, {"id": 319, "seek": 210444, "start": 2110.84, "end": 2116.28, "text": " Because if it is, then you could maybe run some tests on it, like creating the IR via", "tokens": [50684, 1436, 498, 309, 307, 11, 550, 291, 727, 1310, 1190, 512, 6921, 322, 309, 11, 411, 4084, 264, 16486, 5766, 50956], "temperature": 0.0, "avg_logprob": -0.12453957398732503, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.0042250026017427444}, {"id": 320, "seek": 210444, "start": 2117.0, "end": 2120.76, "text": " normal Rust C and then your variant and then you can pair the IRs.", "tokens": [50992, 2710, 34952, 383, 293, 550, 428, 17501, 293, 550, 291, 393, 6119, 264, 16486, 82, 13, 51180], "temperature": 0.0, "avg_logprob": -0.12453957398732503, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.0042250026017427444}, {"id": 321, "seek": 210444, "start": 2121.64, "end": 2126.44, "text": " I think there is a project like that. I can't remember which way around it is if it's", "tokens": [51224, 286, 519, 456, 307, 257, 1716, 411, 300, 13, 286, 393, 380, 1604, 597, 636, 926, 309, 307, 498, 309, 311, 51464], "temperature": 0.0, "avg_logprob": -0.12453957398732503, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.0042250026017427444}, {"id": 322, "seek": 210444, "start": 2127.0, "end": 2133.08, "text": " an LLVM compiler that takes in GCC IR or a GCC sort of front end that takes in LLVM IR.", "tokens": [51492, 364, 441, 43, 53, 44, 31958, 300, 2516, 294, 460, 11717, 16486, 420, 257, 460, 11717, 1333, 295, 1868, 917, 300, 2516, 294, 441, 43, 53, 44, 16486, 13, 51796], "temperature": 0.0, "avg_logprob": -0.12453957398732503, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.0042250026017427444}, {"id": 323, "seek": 213308, "start": 2133.08, "end": 2137.96, "text": " I think something like that exists. I don't know much about it. I think it's not", "tokens": [50364, 286, 519, 746, 411, 300, 8198, 13, 286, 500, 380, 458, 709, 466, 309, 13, 286, 519, 309, 311, 406, 50608], "temperature": 0.0, "avg_logprob": -0.163602902339055, "compression_ratio": 1.25, "no_speech_prob": 0.012401030398905277}, {"id": 324, "seek": 213308, "start": 2138.6, "end": 2149.0, "text": " very famous or anything, but it could be interesting. Yeah.", "tokens": [50640, 588, 4618, 420, 1340, 11, 457, 309, 727, 312, 1880, 13, 865, 13, 51160], "temperature": 0.0, "avg_logprob": -0.163602902339055, "compression_ratio": 1.25, "no_speech_prob": 0.012401030398905277}, {"id": 325, "seek": 214900, "start": 2149.32, "end": 2166.92, "text": " Hello. Do you have a link with Rust in Linux project? Because if I remember,", "tokens": [50380, 2425, 13, 1144, 291, 362, 257, 2113, 365, 34952, 294, 18734, 1716, 30, 1436, 498, 286, 1604, 11, 51260], "temperature": 0.0, "avg_logprob": -0.2286749945746528, "compression_ratio": 1.1983471074380165, "no_speech_prob": 0.014618035405874252}, {"id": 326, "seek": 214900, "start": 2166.92, "end": 2174.04, "text": " Linux is compiled with GCC, right? Yes. So one of the big, big, big,", "tokens": [51260, 18734, 307, 36548, 365, 460, 11717, 11, 558, 30, 1079, 13, 407, 472, 295, 264, 955, 11, 955, 11, 955, 11, 51616], "temperature": 0.0, "avg_logprob": -0.2286749945746528, "compression_ratio": 1.1983471074380165, "no_speech_prob": 0.014618035405874252}, {"id": 327, "seek": 217404, "start": 2174.52, "end": 2182.12, "text": " big targets of GCC IR is for you to be able to at least help or be usable in Rust for Linux.", "tokens": [50388, 955, 12911, 295, 460, 11717, 16486, 307, 337, 291, 281, 312, 1075, 281, 412, 1935, 854, 420, 312, 29975, 294, 34952, 337, 18734, 13, 50768], "temperature": 0.0, "avg_logprob": -0.12860076398734588, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.007091773673892021}, {"id": 328, "seek": 217404, "start": 2183.88, "end": 2190.44, "text": " Linux is compiled with GCC a lot. You also have efforts to compile it with Clang. At the moment,", "tokens": [50856, 18734, 307, 36548, 365, 460, 11717, 257, 688, 13, 509, 611, 362, 6484, 281, 31413, 309, 365, 2033, 656, 13, 1711, 264, 1623, 11, 51184], "temperature": 0.0, "avg_logprob": -0.12860076398734588, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.007091773673892021}, {"id": 329, "seek": 217404, "start": 2190.44, "end": 2198.2, "text": " what Rust for Linux does is use Rust C, so an LLVM tool chain, but it is one of the sort of", "tokens": [51184, 437, 34952, 337, 18734, 775, 307, 764, 34952, 383, 11, 370, 364, 441, 43, 53, 44, 2290, 5021, 11, 457, 309, 307, 472, 295, 264, 1333, 295, 51572], "temperature": 0.0, "avg_logprob": -0.12860076398734588, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.007091773673892021}, {"id": 330, "seek": 219820, "start": 2199.08, "end": 2208.4399999999996, "text": " goals of the project to, yes, be able to have a fully comparable Linux project even using Rust", "tokens": [50408, 5493, 295, 264, 1716, 281, 11, 2086, 11, 312, 1075, 281, 362, 257, 4498, 25323, 18734, 1716, 754, 1228, 34952, 50876], "temperature": 0.0, "avg_logprob": -0.2658468882242839, "compression_ratio": 1.119047619047619, "no_speech_prob": 0.006207234226167202}, {"id": 331, "seek": 220844, "start": 2208.44, "end": 2212.28, "text": " and C in the kernel. But, yeah.", "tokens": [50364, 293, 383, 294, 264, 28256, 13, 583, 11, 1338, 13, 50556], "temperature": 0.0, "avg_logprob": -0.4739499092102051, "compression_ratio": 0.7948717948717948, "no_speech_prob": 0.020076896995306015}, {"id": 332, "seek": 221228, "start": 2212.28, "end": 2224.1200000000003, "text": " Any other questions?", "tokens": [50364, 2639, 661, 1651, 30, 50956], "temperature": 0.0, "avg_logprob": -0.26461699701124625, "compression_ratio": 1.1333333333333333, "no_speech_prob": 0.05944599211215973}, {"id": 333, "seek": 221228, "start": 2231.1600000000003, "end": 2238.28, "text": " Thank you. I would guess that while re-implementing such a complex project from basically scratch,", "tokens": [51308, 1044, 291, 13, 286, 576, 2041, 300, 1339, 319, 12, 332, 43704, 278, 1270, 257, 3997, 1716, 490, 1936, 8459, 11, 51664], "temperature": 0.0, "avg_logprob": -0.26461699701124625, "compression_ratio": 1.1333333333333333, "no_speech_prob": 0.05944599211215973}, {"id": 334, "seek": 223828, "start": 2239.2400000000002, "end": 2246.28, "text": " you probably have a really good chance of finding some mistakes in the upstream,", "tokens": [50412, 291, 1391, 362, 257, 534, 665, 2931, 295, 5006, 512, 8038, 294, 264, 33915, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10475419362386068, "compression_ratio": 1.537313432835821, "no_speech_prob": 0.020589757710695267}, {"id": 335, "seek": 223828, "start": 2246.28, "end": 2252.6800000000003, "text": " in the original implementation. So do you contribute back to the upstream in such cases?", "tokens": [50764, 294, 264, 3380, 11420, 13, 407, 360, 291, 10586, 646, 281, 264, 33915, 294, 1270, 3331, 30, 51084], "temperature": 0.0, "avg_logprob": -0.10475419362386068, "compression_ratio": 1.537313432835821, "no_speech_prob": 0.020589757710695267}, {"id": 336, "seek": 223828, "start": 2252.6800000000003, "end": 2256.36, "text": " And maybe you remember some of such examples. Thank you.", "tokens": [51084, 400, 1310, 291, 1604, 512, 295, 1270, 5110, 13, 1044, 291, 13, 51268], "temperature": 0.0, "avg_logprob": -0.10475419362386068, "compression_ratio": 1.537313432835821, "no_speech_prob": 0.020589757710695267}, {"id": 337, "seek": 223828, "start": 2258.84, "end": 2267.48, "text": " So I don't have sort of these specific examples in my head, sorry. But we do have,", "tokens": [51392, 407, 286, 500, 380, 362, 1333, 295, 613, 2685, 5110, 294, 452, 1378, 11, 2597, 13, 583, 321, 360, 362, 11, 51824], "temperature": 0.0, "avg_logprob": -0.10475419362386068, "compression_ratio": 1.537313432835821, "no_speech_prob": 0.020589757710695267}, {"id": 338, "seek": 226748, "start": 2267.48, "end": 2275.16, "text": " as I said, we did find some sort of stuff that didn't make a lot of sense in the specification,", "tokens": [50364, 382, 286, 848, 11, 321, 630, 915, 512, 1333, 295, 1507, 300, 994, 380, 652, 257, 688, 295, 2020, 294, 264, 31256, 11, 50748], "temperature": 0.0, "avg_logprob": -0.09601016880310688, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.0021981385070830584}, {"id": 339, "seek": 226748, "start": 2275.16, "end": 2281.0, "text": " sorry, the Rust reference that might have been fixed and so on. But, yeah, whenever we see something", "tokens": [50748, 2597, 11, 264, 34952, 6408, 300, 1062, 362, 668, 6806, 293, 370, 322, 13, 583, 11, 1338, 11, 5699, 321, 536, 746, 51040], "temperature": 0.0, "avg_logprob": -0.09601016880310688, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.0021981385070830584}, {"id": 340, "seek": 226748, "start": 2281.0, "end": 2287.48, "text": " that doesn't, to us, make a lot of sense or that deserves some explanation, we try and", "tokens": [51040, 300, 1177, 380, 11, 281, 505, 11, 652, 257, 688, 295, 2020, 420, 300, 17037, 512, 10835, 11, 321, 853, 293, 51364], "temperature": 0.0, "avg_logprob": -0.09601016880310688, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.0021981385070830584}, {"id": 341, "seek": 226748, "start": 2287.48, "end": 2292.6, "text": " let people know about it. We try and contribute back to the Rust C project. We're really not", "tokens": [51364, 718, 561, 458, 466, 309, 13, 492, 853, 293, 10586, 646, 281, 264, 34952, 383, 1716, 13, 492, 434, 534, 406, 51620], "temperature": 0.0, "avg_logprob": -0.09601016880310688, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.0021981385070830584}, {"id": 342, "seek": 229260, "start": 2292.6, "end": 2298.04, "text": " treating Rust C as sort of a competitor or anything. And we do want to improve it. And", "tokens": [50364, 15083, 34952, 383, 382, 1333, 295, 257, 27266, 420, 1340, 13, 400, 321, 360, 528, 281, 3470, 309, 13, 400, 50636], "temperature": 0.0, "avg_logprob": -0.09590114865984235, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.013544546440243721}, {"id": 343, "seek": 229260, "start": 2298.04, "end": 2304.8399999999997, "text": " GCCRS is built by people that love Rust and that want to push it forward in our own way.", "tokens": [50636, 29435, 18547, 50, 307, 3094, 538, 561, 300, 959, 34952, 293, 300, 528, 281, 2944, 309, 2128, 294, 527, 1065, 636, 13, 50976], "temperature": 0.0, "avg_logprob": -0.09590114865984235, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.013544546440243721}, {"id": 344, "seek": 229260, "start": 2305.48, "end": 2315.4, "text": " And for bugs regarding like Rust C bugs, GCCRS treats Rust C as sort of the overlord. So whenever", "tokens": [51008, 400, 337, 15120, 8595, 411, 34952, 383, 15120, 11, 29435, 18547, 50, 19566, 34952, 383, 382, 1333, 295, 264, 15986, 765, 13, 407, 5699, 51504], "temperature": 0.0, "avg_logprob": -0.09590114865984235, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.013544546440243721}, {"id": 345, "seek": 229260, "start": 2315.4, "end": 2321.72, "text": " Rust C does something, we do the same thing. We don't want to sort of argue about what is", "tokens": [51504, 34952, 383, 775, 746, 11, 321, 360, 264, 912, 551, 13, 492, 500, 380, 528, 281, 1333, 295, 9695, 466, 437, 307, 51820], "temperature": 0.0, "avg_logprob": -0.09590114865984235, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.013544546440243721}, {"id": 346, "seek": 232172, "start": 2321.72, "end": 2325.8799999999997, "text": " correct Rust and what is not correct Rust. Rust C is the Rust compiler. It's the Rust", "tokens": [50364, 3006, 34952, 293, 437, 307, 406, 3006, 34952, 13, 34952, 383, 307, 264, 34952, 31958, 13, 467, 311, 264, 34952, 50572], "temperature": 0.0, "avg_logprob": -0.10046180925871197, "compression_ratio": 1.6454545454545455, "no_speech_prob": 0.0023757817689329386}, {"id": 347, "seek": 232172, "start": 2325.8799999999997, "end": 2334.2, "text": " implementation. When you ship a Rust version, you ship the compiler, the library, the sort", "tokens": [50572, 11420, 13, 1133, 291, 5374, 257, 34952, 3037, 11, 291, 5374, 264, 31958, 11, 264, 6405, 11, 264, 1333, 50988], "temperature": 0.0, "avg_logprob": -0.10046180925871197, "compression_ratio": 1.6454545454545455, "no_speech_prob": 0.0023757817689329386}, {"id": 348, "seek": 232172, "start": 2334.2, "end": 2340.12, "text": " of the language is all of that, those three projects. So, yeah, we just try and stick with", "tokens": [50988, 295, 264, 2856, 307, 439, 295, 300, 11, 729, 1045, 4455, 13, 407, 11, 1338, 11, 321, 445, 853, 293, 2897, 365, 51284], "temperature": 0.0, "avg_logprob": -0.10046180925871197, "compression_ratio": 1.6454545454545455, "no_speech_prob": 0.0023757817689329386}, {"id": 349, "seek": 232172, "start": 2340.12, "end": 2347.72, "text": " that as a reference. And we don't want to step on any toes. Yep. Unfortunately, that's all the", "tokens": [51284, 300, 382, 257, 6408, 13, 400, 321, 500, 380, 528, 281, 1823, 322, 604, 14681, 13, 7010, 13, 8590, 11, 300, 311, 439, 264, 51664], "temperature": 0.0, "avg_logprob": -0.10046180925871197, "compression_ratio": 1.6454545454545455, "no_speech_prob": 0.0023757817689329386}, {"id": 350, "seek": 234772, "start": 2347.72, "end": 2351.7999999999997, "text": " time we have. I think we had a few more questions, but maybe we could do it in the hallway.", "tokens": [50364, 565, 321, 362, 13, 286, 519, 321, 632, 257, 1326, 544, 1651, 11, 457, 1310, 321, 727, 360, 309, 294, 264, 23903, 13, 50568], "temperature": 0.0, "avg_logprob": -0.186307991252226, "compression_ratio": 1.1485148514851484, "no_speech_prob": 0.03182746842503548}, {"id": 351, "seek": 234772, "start": 2353.72, "end": 2362.6, "text": " Let's thank our speaker.", "tokens": [50664, 961, 311, 1309, 527, 8145, 13, 51108], "temperature": 0.0, "avg_logprob": -0.186307991252226, "compression_ratio": 1.1485148514851484, "no_speech_prob": 0.03182746842503548}], "language": "en"}