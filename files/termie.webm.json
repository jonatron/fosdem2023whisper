{"text": " Okay, hello everybody, welcome. Thank you for coming to my talk. My name is Brian Duggan. I'm going to be talking today about something called TERME, which is Practical and Fun Automation for all your terminal sessions. I'd like to thank my employer Instacart and the Pearl Foundation for helping me to be here. I'm on the logistics team at Instacart. Okay, so here's an outline of the talk. I'm going to give a quick overview of the concept of TERME, what it does, what it's all about, go through some of the features, explain the scripting capabilities, and then a little bit about why it's written in Raku, which is usually the first question I get, but I'm saving it for last. Okay, so here's the basic concept of TERME, works like this. So you have your shell, you type TERME to start the session, it starts a T-Mux session, how many T-Mux users in here? Oh good, okay, screen. Okay, you guys can fight it later. Okay, so it starts a T-Mux, starts a T-Mux session, it puts you in the bottom half, and basically anything that you type into the bottom half goes into both the bottom half and the top half. Okay, so you type, what is TERME? And it sends it to the bash shell session at the top, which doesn't know what what means, depending on your environment, you'll get some strange error messages about, you know, what command are you trying to type. So, you know, I did this and since this is the automation room, I thought, you know, probably, you know, maybe I could just automate this talk completely, so I found a command line version of ChatGPT on the internet that had a command line wrapper, I thought maybe I could just get ChatGPT to write my entire talk for me, automate it away, and then I would be done. Okay, so I did the pip install, which sends a lot of things to the terminal, as everybody probably knows, lots of recommendations about what to upgrade. Finally, I have the ChatGPT executable, so I typed that and I said, what is TERME? But did not get very much information since it didn't know about the talk that I hadn't given yet. So then I said, you know, TERME is being presented at FOSSTEM, which was a little bit more, a little bit better, but still I had to add a little more substance to the talk. And then, then the program hung, so I had to interrupt it with control C. And the way you do that with TERME is you use a backslash, which starts the command, anything that starts with a backslash, you kind of like the Postgres command line interface is a directive to TERME, so stop says send a control C signal to the other pane. Okay, so I got a keyboard interrupt, but that wasn't enough to stop it because that was trapped by the Python interpreter. So then I sent another one, and then that finally gave me a stack trace, which everybody who uses Python sees a lot. And then finally, you know, I was done with this session. Okay, so the basic concept here is simple, you know, you have something on the top, something on the bottom, it's the same, and the things on the bottom go to the top, so you have kind of an interactive session. And then you can also send these additional commands to the top. Okay, so now I'm going to go through some of the features. Okay, so as you saw from the last one, you have everything sort of organized on the bottom, even if you have stack traces and things on the top, you still have a nice little session that shows you what you're doing, and you have, you can set up macros, you can run scripts, you can wait for things, and I'm going to go through a few more of these in detail now in the next few minutes. So it has a new read line built in, it has a few ways of getting history, right, read line, there's a last command, there's also fuzzy find, fzf, anybody use fuzzy find for things, yep, so you can search your history for that. And it searches, right, even if you have several different sessions on the top, maybe you're on different machines or maybe part of it is in some other application, some of it is in a shell, it'll search your local history. So for instance, let's say you're using PSQL, you're connected to a remote database and you have, you know, your local history and maybe you run some sequel that's going to show you the long running queries. So you can write a macro to send all of this, and the way you do that is you say slash edit, then you have a text editor, put your file in an SQL file, and then slash alias will create a macro that says, you set the name of the macro and then slash run says run this, run this little script, which will send it to the other console. And then after that, you can just type slash find queries and the top will get the SQL that you put into the file. Okay, so it can be convenient for things like that, you know, or you could use it with Redis or, you know, building your, doing your kernel testings, they saw in the first talk or, you know, whatever, just any, any sort of session you can just make a macro and send it. So here's, here's another example. In this case, instead of using a macro, we're going to send standard out from a command that we run locally to the other pane. So on the bottom, I say delay three, which means wait three seconds between every line that you send to the top, and then slash shell means just run this, run this command, and then show me the output. So I say slash shell, cat, e.g. simple.bash, and here you can see my bash script, which does an echo, echo docker run, and then echo hostname. So then it runs that command when I say slash do, it runs that command, and the output from that command gets sent to the top, and it's sent, you know, after every line, it waits three seconds. So it sort of throttles the output, you know, which we, which we might need because it might take docker, you know, a few seconds to start before you run the hostname command on, you know, on the shell inside the container. So, so the bottom is what you're typing, the top is what you see. So here's another, here's another feature. So in addition to standard out, you can take, take the output of the top and send it to standard in of anything that you write. So in this example, I'm using the nl command, which the standard in, it basically takes standard in and outputs line numbers for, for the commands that are coming in. So I say sleep three and head user share addict words. The reason I do sleep three, if you think about it for a second is because when I do the exec command, I need time to type it, right? So I type sleep three and head, and that gets sent immediately to the shell, which waits a few seconds, then I type exec nl, and then standard in comes in, and then it prints out what goes out. So, you know, in the real world, you probably won't have to sleep because there will be constantly stuff coming through the top terminal. A few other interesting commands. So await, we'll just wait for either a string or a regular expression to appear in the top. In queue is something, is a way to in queue a command after you're finished awaiting it. Grab, repeat, send the same thing over and over, maybe add an interval, send a file, and we already saw what delay does, setting the delay. And there are actually a lot of commands. There are 43. Whenever I needed to do something, I added a new one. So if you have any ideas, send me a PR or send a request. There are 43 different commands right now. Actually, 44. I think I added one this morning. Okay, so script, anybody here use expect? A few people. Okay, so expect is been around for a long time, 1993, but it's still pretty useful if you have to interact with a program that requires a TTY. So here is an example of an expect script on the left. In this, in this case, what we're going to do is we're going to start a Docker container again, and then we're going to run user add to add a user. And then we'd like to set a password for the user. So we're going to run the password command, and we're also going to look for the prompts that are coming back. Okay, so on the left we see the way expect works is you say spawn, and then expect takes a pattern. So root at is what comes back in the prompt. And then you send user add, termy, we're going to add a username to termy. Then it has a regular expression expect dash re that you can then capture with the expect out. And then finally at the bottom, we're going to print out what we caught, like we captured the fact that the host name was something that was in the prompt. So you can do the same thing in termy. You can say a user bin end of termy and then set it to be an executable file. The default is to just send everything. So it's just kind of like you're interacting from the console. All the lines just get sent directly to the other pane. So you just say docker run, and then backslash expect is just kind of like the expect command. There's a little subtlety in there that you usually don't think about because it's sort of intuitive as a human, you know, you type it and you're expecting something. But really there's a race condition there, right? Because between the time that you send your command and the time you send the expect command, the output might have already happened. So the way that expect deals with it is it keeps track of the stream and then it kind of goes back and there's sort of this running, you know, a pointer to the output stream. And the way we do that with termy is we basically run the expect before we run the command. So it'll basically say now I'm starting to watch the output and then it'll send the output and then it'll capture it. So when we run this and it runs interactively in Tmux, so you can see on the top it sends docker run, pulls the image and it's waiting now to see the prompt. So it waits for the root and then after that it sends the user add, waits for new password and then finishes successfully. So the output here is in the test anything protocol. You may or may not be familiar with it, it's just okay and then the number of the test. And then currently if it doesn't get what it expects then it aborts the tests. Okay, so quickly I'm just going to say why it's written in Raku. And the main idea here is that Raku has a lot of very nice ways to do asynchronous programming and also interact with other commands. So you can quickly open a command, open a pipe to Tmux and interact with it using asynchronous processes. You can run things synchronously. It's got good not just inter-process but inter-thread communication. It has built-in constructs that like supplies and channels and promises which you may be familiar with from other languages. So this is like an example of how you could tail a file and create a supply which is a built-in type in Raku. And finally, this is kind of like the implementation of expect. So it's really, it's really pretty straightforward. You set, you can basically set up an event loop in a separate thread using this construct, you know, start, starts a thread, react whenever it says here's an event loop. And then when, if it's a string, we look to see if it contains the target, if it's a regex, then we send it to a channel so that then we can have it available to use locally. So even if you're not interested in using Termi, you might find some value in using Raku for automation. That's the end. Thank you for listening. Questions? I think I have a few minutes. Yeah, that's a good question. So different shells do different things that you kind of are not really aware of, even just the simple like printing of a prompt. They don't always send a new line character. Sometimes they'll send escape sequences that go to the beginning of the line and then go down the line or sometimes they'll even redraw the line above it. So it works fine. But you just have to be aware of the idiosyncrasies of the various shells in terms of what they do to the terminal. It does interfere. You can, one of the, one of the commands is to buffer the lines and it does get tricky to split up the lines when there's a lot of cursor movement. Sorry, with serial consoles. So that, that aspect is basically taken care of by Tmux. So it doesn't do the direct communication with the serial console the way that expect would. Yep. We have one more minute. Last question. So we only have a handful of users. So now is your opportunity to request features. We don't have to worry too much about backwards compatibility. Yep. That's it. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.6, "text": " Okay, hello everybody, welcome. Thank you for coming to my talk. My name is Brian Duggan.", "tokens": [1033, 11, 7751, 2201, 11, 2928, 13, 1044, 291, 337, 1348, 281, 452, 751, 13, 1222, 1315, 307, 10765, 413, 697, 1275, 13], "temperature": 0.0, "avg_logprob": -0.26339475631713866, "compression_ratio": 1.272108843537415, "no_speech_prob": 0.10472352802753448}, {"id": 1, "seek": 0, "start": 17.6, "end": 24.72, "text": " I'm going to be talking today about something called TERME, which is Practical and Fun Automation", "tokens": [286, 478, 516, 281, 312, 1417, 965, 466, 746, 1219, 41305, 15454, 11, 597, 307, 19170, 804, 293, 11166, 24619, 399], "temperature": 0.0, "avg_logprob": -0.26339475631713866, "compression_ratio": 1.272108843537415, "no_speech_prob": 0.10472352802753448}, {"id": 2, "seek": 2472, "start": 24.72, "end": 32.08, "text": " for all your terminal sessions. I'd like to thank my employer Instacart and the Pearl Foundation", "tokens": [337, 439, 428, 14709, 11081, 13, 286, 1116, 411, 281, 1309, 452, 16205, 2730, 326, 446, 293, 264, 24639, 10335], "temperature": 0.0, "avg_logprob": -0.10216250419616699, "compression_ratio": 1.4846938775510203, "no_speech_prob": 4.601061300490983e-05}, {"id": 3, "seek": 2472, "start": 32.08, "end": 42.16, "text": " for helping me to be here. I'm on the logistics team at Instacart. Okay, so here's an outline of", "tokens": [337, 4315, 385, 281, 312, 510, 13, 286, 478, 322, 264, 27420, 1469, 412, 2730, 326, 446, 13, 1033, 11, 370, 510, 311, 364, 16387, 295], "temperature": 0.0, "avg_logprob": -0.10216250419616699, "compression_ratio": 1.4846938775510203, "no_speech_prob": 4.601061300490983e-05}, {"id": 4, "seek": 2472, "start": 42.16, "end": 48.16, "text": " the talk. I'm going to give a quick overview of the concept of TERME, what it does, what it's all", "tokens": [264, 751, 13, 286, 478, 516, 281, 976, 257, 1702, 12492, 295, 264, 3410, 295, 41305, 15454, 11, 437, 309, 775, 11, 437, 309, 311, 439], "temperature": 0.0, "avg_logprob": -0.10216250419616699, "compression_ratio": 1.4846938775510203, "no_speech_prob": 4.601061300490983e-05}, {"id": 5, "seek": 4816, "start": 48.16, "end": 55.12, "text": " about, go through some of the features, explain the scripting capabilities, and then a little bit", "tokens": [466, 11, 352, 807, 512, 295, 264, 4122, 11, 2903, 264, 5755, 278, 10862, 11, 293, 550, 257, 707, 857], "temperature": 0.0, "avg_logprob": -0.09786194876620644, "compression_ratio": 1.4108910891089108, "no_speech_prob": 2.5431801986997016e-05}, {"id": 6, "seek": 4816, "start": 55.12, "end": 62.0, "text": " about why it's written in Raku, which is usually the first question I get, but I'm saving it for last.", "tokens": [466, 983, 309, 311, 3720, 294, 497, 15803, 11, 597, 307, 2673, 264, 700, 1168, 286, 483, 11, 457, 286, 478, 6816, 309, 337, 1036, 13], "temperature": 0.0, "avg_logprob": -0.09786194876620644, "compression_ratio": 1.4108910891089108, "no_speech_prob": 2.5431801986997016e-05}, {"id": 7, "seek": 4816, "start": 64.4, "end": 70.4, "text": " Okay, so here's the basic concept of TERME, works like this. So you have your shell,", "tokens": [1033, 11, 370, 510, 311, 264, 3875, 3410, 295, 41305, 15454, 11, 1985, 411, 341, 13, 407, 291, 362, 428, 8720, 11], "temperature": 0.0, "avg_logprob": -0.09786194876620644, "compression_ratio": 1.4108910891089108, "no_speech_prob": 2.5431801986997016e-05}, {"id": 8, "seek": 7040, "start": 70.4, "end": 78.56, "text": " you type TERME to start the session, it starts a T-Mux session, how many T-Mux users in here?", "tokens": [291, 2010, 41305, 15454, 281, 722, 264, 5481, 11, 309, 3719, 257, 314, 12, 44, 2449, 5481, 11, 577, 867, 314, 12, 44, 2449, 5022, 294, 510, 30], "temperature": 0.0, "avg_logprob": -0.13066512484883153, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.6956286344793625e-05}, {"id": 9, "seek": 7040, "start": 79.2, "end": 88.32000000000001, "text": " Oh good, okay, screen. Okay, you guys can fight it later. Okay, so it starts a T-Mux,", "tokens": [876, 665, 11, 1392, 11, 2568, 13, 1033, 11, 291, 1074, 393, 2092, 309, 1780, 13, 1033, 11, 370, 309, 3719, 257, 314, 12, 44, 2449, 11], "temperature": 0.0, "avg_logprob": -0.13066512484883153, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.6956286344793625e-05}, {"id": 10, "seek": 7040, "start": 89.12, "end": 94.64000000000001, "text": " starts a T-Mux session, it puts you in the bottom half, and basically anything that you type into", "tokens": [3719, 257, 314, 12, 44, 2449, 5481, 11, 309, 8137, 291, 294, 264, 2767, 1922, 11, 293, 1936, 1340, 300, 291, 2010, 666], "temperature": 0.0, "avg_logprob": -0.13066512484883153, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.6956286344793625e-05}, {"id": 11, "seek": 9464, "start": 94.64, "end": 102.0, "text": " the bottom half goes into both the bottom half and the top half. Okay, so you type, what is TERME?", "tokens": [264, 2767, 1922, 1709, 666, 1293, 264, 2767, 1922, 293, 264, 1192, 1922, 13, 1033, 11, 370, 291, 2010, 11, 437, 307, 41305, 15454, 30], "temperature": 0.0, "avg_logprob": -0.10081618056338057, "compression_ratio": 1.7234848484848484, "no_speech_prob": 4.1570579014660325e-06}, {"id": 12, "seek": 9464, "start": 102.64, "end": 108.96000000000001, "text": " And it sends it to the bash shell session at the top, which doesn't know what what means,", "tokens": [400, 309, 14790, 309, 281, 264, 46183, 8720, 5481, 412, 264, 1192, 11, 597, 1177, 380, 458, 437, 437, 1355, 11], "temperature": 0.0, "avg_logprob": -0.10081618056338057, "compression_ratio": 1.7234848484848484, "no_speech_prob": 4.1570579014660325e-06}, {"id": 13, "seek": 9464, "start": 108.96000000000001, "end": 112.56, "text": " depending on your environment, you'll get some strange error messages about,", "tokens": [5413, 322, 428, 2823, 11, 291, 603, 483, 512, 5861, 6713, 7897, 466, 11], "temperature": 0.0, "avg_logprob": -0.10081618056338057, "compression_ratio": 1.7234848484848484, "no_speech_prob": 4.1570579014660325e-06}, {"id": 14, "seek": 9464, "start": 113.28, "end": 118.56, "text": " you know, what command are you trying to type. So, you know, I did this and since this is the", "tokens": [291, 458, 11, 437, 5622, 366, 291, 1382, 281, 2010, 13, 407, 11, 291, 458, 11, 286, 630, 341, 293, 1670, 341, 307, 264], "temperature": 0.0, "avg_logprob": -0.10081618056338057, "compression_ratio": 1.7234848484848484, "no_speech_prob": 4.1570579014660325e-06}, {"id": 15, "seek": 9464, "start": 118.56, "end": 123.44, "text": " automation room, I thought, you know, probably, you know, maybe I could just automate this talk", "tokens": [17769, 1808, 11, 286, 1194, 11, 291, 458, 11, 1391, 11, 291, 458, 11, 1310, 286, 727, 445, 31605, 341, 751], "temperature": 0.0, "avg_logprob": -0.10081618056338057, "compression_ratio": 1.7234848484848484, "no_speech_prob": 4.1570579014660325e-06}, {"id": 16, "seek": 12344, "start": 123.44, "end": 130.72, "text": " completely, so I found a command line version of ChatGPT on the internet that had a command line", "tokens": [2584, 11, 370, 286, 1352, 257, 5622, 1622, 3037, 295, 27503, 38, 47, 51, 322, 264, 4705, 300, 632, 257, 5622, 1622], "temperature": 0.0, "avg_logprob": -0.12929455093715503, "compression_ratio": 1.5565217391304347, "no_speech_prob": 2.1442134311655536e-05}, {"id": 17, "seek": 12344, "start": 130.72, "end": 134.56, "text": " wrapper, I thought maybe I could just get ChatGPT to write my entire talk for me,", "tokens": [46906, 11, 286, 1194, 1310, 286, 727, 445, 483, 27503, 38, 47, 51, 281, 2464, 452, 2302, 751, 337, 385, 11], "temperature": 0.0, "avg_logprob": -0.12929455093715503, "compression_ratio": 1.5565217391304347, "no_speech_prob": 2.1442134311655536e-05}, {"id": 18, "seek": 12344, "start": 134.56, "end": 141.2, "text": " automate it away, and then I would be done. Okay, so I did the pip install, which sends", "tokens": [31605, 309, 1314, 11, 293, 550, 286, 576, 312, 1096, 13, 1033, 11, 370, 286, 630, 264, 8489, 3625, 11, 597, 14790], "temperature": 0.0, "avg_logprob": -0.12929455093715503, "compression_ratio": 1.5565217391304347, "no_speech_prob": 2.1442134311655536e-05}, {"id": 19, "seek": 12344, "start": 141.2, "end": 147.04, "text": " a lot of things to the terminal, as everybody probably knows, lots of recommendations about", "tokens": [257, 688, 295, 721, 281, 264, 14709, 11, 382, 2201, 1391, 3255, 11, 3195, 295, 10434, 466], "temperature": 0.0, "avg_logprob": -0.12929455093715503, "compression_ratio": 1.5565217391304347, "no_speech_prob": 2.1442134311655536e-05}, {"id": 20, "seek": 14704, "start": 147.04, "end": 153.51999999999998, "text": " what to upgrade. Finally, I have the ChatGPT executable, so I typed that and I said, what is", "tokens": [437, 281, 11484, 13, 6288, 11, 286, 362, 264, 27503, 38, 47, 51, 7568, 712, 11, 370, 286, 33941, 300, 293, 286, 848, 11, 437, 307], "temperature": 0.0, "avg_logprob": -0.12554965762917056, "compression_ratio": 1.5614754098360655, "no_speech_prob": 4.221830749884248e-06}, {"id": 21, "seek": 14704, "start": 153.51999999999998, "end": 160.39999999999998, "text": " TERME? But did not get very much information since it didn't know about the talk that I hadn't given", "tokens": [41305, 15454, 30, 583, 630, 406, 483, 588, 709, 1589, 1670, 309, 994, 380, 458, 466, 264, 751, 300, 286, 8782, 380, 2212], "temperature": 0.0, "avg_logprob": -0.12554965762917056, "compression_ratio": 1.5614754098360655, "no_speech_prob": 4.221830749884248e-06}, {"id": 22, "seek": 14704, "start": 160.39999999999998, "end": 167.2, "text": " yet. So then I said, you know, TERME is being presented at FOSSTEM, which was a little bit more,", "tokens": [1939, 13, 407, 550, 286, 848, 11, 291, 458, 11, 41305, 15454, 307, 885, 8212, 412, 479, 4367, 6840, 6683, 11, 597, 390, 257, 707, 857, 544, 11], "temperature": 0.0, "avg_logprob": -0.12554965762917056, "compression_ratio": 1.5614754098360655, "no_speech_prob": 4.221830749884248e-06}, {"id": 23, "seek": 14704, "start": 168.16, "end": 172.95999999999998, "text": " a little bit better, but still I had to add a little more substance to the talk. And then,", "tokens": [257, 707, 857, 1101, 11, 457, 920, 286, 632, 281, 909, 257, 707, 544, 12961, 281, 264, 751, 13, 400, 550, 11], "temperature": 0.0, "avg_logprob": -0.12554965762917056, "compression_ratio": 1.5614754098360655, "no_speech_prob": 4.221830749884248e-06}, {"id": 24, "seek": 17296, "start": 172.96, "end": 182.16, "text": " then the program hung, so I had to interrupt it with control C. And the way you do that with", "tokens": [550, 264, 1461, 5753, 11, 370, 286, 632, 281, 12729, 309, 365, 1969, 383, 13, 400, 264, 636, 291, 360, 300, 365], "temperature": 0.0, "avg_logprob": -0.1447813149654504, "compression_ratio": 1.6331877729257642, "no_speech_prob": 9.816690180741716e-06}, {"id": 25, "seek": 17296, "start": 182.16, "end": 187.44, "text": " TERME is you use a backslash, which starts the command, anything that starts with a backslash,", "tokens": [41305, 15454, 307, 291, 764, 257, 646, 10418, 1299, 11, 597, 3719, 264, 5622, 11, 1340, 300, 3719, 365, 257, 646, 10418, 1299, 11], "temperature": 0.0, "avg_logprob": -0.1447813149654504, "compression_ratio": 1.6331877729257642, "no_speech_prob": 9.816690180741716e-06}, {"id": 26, "seek": 17296, "start": 187.44, "end": 194.4, "text": " you kind of like the Postgres command line interface is a directive to TERME, so stop says", "tokens": [291, 733, 295, 411, 264, 10223, 45189, 5622, 1622, 9226, 307, 257, 45444, 281, 41305, 15454, 11, 370, 1590, 1619], "temperature": 0.0, "avg_logprob": -0.1447813149654504, "compression_ratio": 1.6331877729257642, "no_speech_prob": 9.816690180741716e-06}, {"id": 27, "seek": 17296, "start": 194.4, "end": 200.88, "text": " send a control C signal to the other pane. Okay, so I got a keyboard interrupt, but that wasn't", "tokens": [2845, 257, 1969, 383, 6358, 281, 264, 661, 32605, 13, 1033, 11, 370, 286, 658, 257, 10186, 12729, 11, 457, 300, 2067, 380], "temperature": 0.0, "avg_logprob": -0.1447813149654504, "compression_ratio": 1.6331877729257642, "no_speech_prob": 9.816690180741716e-06}, {"id": 28, "seek": 20088, "start": 200.88, "end": 206.56, "text": " enough to stop it because that was trapped by the Python interpreter. So then I sent another one,", "tokens": [1547, 281, 1590, 309, 570, 300, 390, 14994, 538, 264, 15329, 34132, 13, 407, 550, 286, 2279, 1071, 472, 11], "temperature": 0.0, "avg_logprob": -0.08235549097475799, "compression_ratio": 1.795275590551181, "no_speech_prob": 8.66373102326179e-06}, {"id": 29, "seek": 20088, "start": 206.56, "end": 213.28, "text": " and then that finally gave me a stack trace, which everybody who uses Python sees a lot.", "tokens": [293, 550, 300, 2721, 2729, 385, 257, 8630, 13508, 11, 597, 2201, 567, 4960, 15329, 8194, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.08235549097475799, "compression_ratio": 1.795275590551181, "no_speech_prob": 8.66373102326179e-06}, {"id": 30, "seek": 20088, "start": 214.16, "end": 219.6, "text": " And then finally, you know, I was done with this session. Okay, so the basic concept here", "tokens": [400, 550, 2721, 11, 291, 458, 11, 286, 390, 1096, 365, 341, 5481, 13, 1033, 11, 370, 264, 3875, 3410, 510], "temperature": 0.0, "avg_logprob": -0.08235549097475799, "compression_ratio": 1.795275590551181, "no_speech_prob": 8.66373102326179e-06}, {"id": 31, "seek": 20088, "start": 220.56, "end": 224.4, "text": " is simple, you know, you have something on the top, something on the bottom, it's the same,", "tokens": [307, 2199, 11, 291, 458, 11, 291, 362, 746, 322, 264, 1192, 11, 746, 322, 264, 2767, 11, 309, 311, 264, 912, 11], "temperature": 0.0, "avg_logprob": -0.08235549097475799, "compression_ratio": 1.795275590551181, "no_speech_prob": 8.66373102326179e-06}, {"id": 32, "seek": 20088, "start": 225.12, "end": 228.88, "text": " and the things on the bottom go to the top, so you have kind of an interactive session.", "tokens": [293, 264, 721, 322, 264, 2767, 352, 281, 264, 1192, 11, 370, 291, 362, 733, 295, 364, 15141, 5481, 13], "temperature": 0.0, "avg_logprob": -0.08235549097475799, "compression_ratio": 1.795275590551181, "no_speech_prob": 8.66373102326179e-06}, {"id": 33, "seek": 22888, "start": 228.88, "end": 237.28, "text": " And then you can also send these additional commands to the top. Okay, so now I'm going to go through", "tokens": [400, 550, 291, 393, 611, 2845, 613, 4497, 16901, 281, 264, 1192, 13, 1033, 11, 370, 586, 286, 478, 516, 281, 352, 807], "temperature": 0.0, "avg_logprob": -0.09787549224554323, "compression_ratio": 1.7336244541484715, "no_speech_prob": 2.7098101782030426e-05}, {"id": 34, "seek": 22888, "start": 237.28, "end": 243.35999999999999, "text": " some of the features. Okay, so as you saw from the last one, you have everything sort of organized", "tokens": [512, 295, 264, 4122, 13, 1033, 11, 370, 382, 291, 1866, 490, 264, 1036, 472, 11, 291, 362, 1203, 1333, 295, 9983], "temperature": 0.0, "avg_logprob": -0.09787549224554323, "compression_ratio": 1.7336244541484715, "no_speech_prob": 2.7098101782030426e-05}, {"id": 35, "seek": 22888, "start": 243.35999999999999, "end": 247.44, "text": " on the bottom, even if you have stack traces and things on the top, you still have a nice little", "tokens": [322, 264, 2767, 11, 754, 498, 291, 362, 8630, 26076, 293, 721, 322, 264, 1192, 11, 291, 920, 362, 257, 1481, 707], "temperature": 0.0, "avg_logprob": -0.09787549224554323, "compression_ratio": 1.7336244541484715, "no_speech_prob": 2.7098101782030426e-05}, {"id": 36, "seek": 22888, "start": 247.44, "end": 254.0, "text": " session that shows you what you're doing, and you have, you can set up macros, you can run scripts,", "tokens": [5481, 300, 3110, 291, 437, 291, 434, 884, 11, 293, 291, 362, 11, 291, 393, 992, 493, 7912, 2635, 11, 291, 393, 1190, 23294, 11], "temperature": 0.0, "avg_logprob": -0.09787549224554323, "compression_ratio": 1.7336244541484715, "no_speech_prob": 2.7098101782030426e-05}, {"id": 37, "seek": 25400, "start": 254.0, "end": 259.36, "text": " you can wait for things, and I'm going to go through a few more of these in detail now in", "tokens": [291, 393, 1699, 337, 721, 11, 293, 286, 478, 516, 281, 352, 807, 257, 1326, 544, 295, 613, 294, 2607, 586, 294], "temperature": 0.0, "avg_logprob": -0.15212982722691126, "compression_ratio": 1.730593607305936, "no_speech_prob": 1.695864921202883e-05}, {"id": 38, "seek": 25400, "start": 259.36, "end": 266.56, "text": " the next few minutes. So it has a new read line built in, it has a few ways of getting history,", "tokens": [264, 958, 1326, 2077, 13, 407, 309, 575, 257, 777, 1401, 1622, 3094, 294, 11, 309, 575, 257, 1326, 2098, 295, 1242, 2503, 11], "temperature": 0.0, "avg_logprob": -0.15212982722691126, "compression_ratio": 1.730593607305936, "no_speech_prob": 1.695864921202883e-05}, {"id": 39, "seek": 25400, "start": 266.56, "end": 274.4, "text": " right, read line, there's a last command, there's also fuzzy find, fzf, anybody use fuzzy find for", "tokens": [558, 11, 1401, 1622, 11, 456, 311, 257, 1036, 5622, 11, 456, 311, 611, 34710, 915, 11, 283, 89, 69, 11, 4472, 764, 34710, 915, 337], "temperature": 0.0, "avg_logprob": -0.15212982722691126, "compression_ratio": 1.730593607305936, "no_speech_prob": 1.695864921202883e-05}, {"id": 40, "seek": 25400, "start": 274.4, "end": 280.64, "text": " things, yep, so you can search your history for that. And it searches, right, even if you have", "tokens": [721, 11, 18633, 11, 370, 291, 393, 3164, 428, 2503, 337, 300, 13, 400, 309, 26701, 11, 558, 11, 754, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.15212982722691126, "compression_ratio": 1.730593607305936, "no_speech_prob": 1.695864921202883e-05}, {"id": 41, "seek": 28064, "start": 280.64, "end": 285.91999999999996, "text": " several different sessions on the top, maybe you're on different machines or maybe part of it is in", "tokens": [2940, 819, 11081, 322, 264, 1192, 11, 1310, 291, 434, 322, 819, 8379, 420, 1310, 644, 295, 309, 307, 294], "temperature": 0.0, "avg_logprob": -0.10291767120361328, "compression_ratio": 1.6954545454545455, "no_speech_prob": 7.644377546967007e-06}, {"id": 42, "seek": 28064, "start": 286.56, "end": 291.68, "text": " some other application, some of it is in a shell, it'll search your local history.", "tokens": [512, 661, 3861, 11, 512, 295, 309, 307, 294, 257, 8720, 11, 309, 603, 3164, 428, 2654, 2503, 13], "temperature": 0.0, "avg_logprob": -0.10291767120361328, "compression_ratio": 1.6954545454545455, "no_speech_prob": 7.644377546967007e-06}, {"id": 43, "seek": 28064, "start": 293.84, "end": 300.4, "text": " So for instance, let's say you're using PSQL, you're connected to a remote database and you have,", "tokens": [407, 337, 5197, 11, 718, 311, 584, 291, 434, 1228, 8168, 13695, 11, 291, 434, 4582, 281, 257, 8607, 8149, 293, 291, 362, 11], "temperature": 0.0, "avg_logprob": -0.10291767120361328, "compression_ratio": 1.6954545454545455, "no_speech_prob": 7.644377546967007e-06}, {"id": 44, "seek": 28064, "start": 300.96, "end": 304.71999999999997, "text": " you know, your local history and maybe you run some sequel that's going to show you the long", "tokens": [291, 458, 11, 428, 2654, 2503, 293, 1310, 291, 1190, 512, 20622, 300, 311, 516, 281, 855, 291, 264, 938], "temperature": 0.0, "avg_logprob": -0.10291767120361328, "compression_ratio": 1.6954545454545455, "no_speech_prob": 7.644377546967007e-06}, {"id": 45, "seek": 30472, "start": 304.72, "end": 311.28000000000003, "text": " running queries. So you can write a macro to send all of this, and the way you do that is you say", "tokens": [2614, 24109, 13, 407, 291, 393, 2464, 257, 18887, 281, 2845, 439, 295, 341, 11, 293, 264, 636, 291, 360, 300, 307, 291, 584], "temperature": 0.0, "avg_logprob": -0.0804424626486642, "compression_ratio": 1.7619047619047619, "no_speech_prob": 3.646546247182414e-05}, {"id": 46, "seek": 30472, "start": 311.28000000000003, "end": 317.84000000000003, "text": " slash edit, then you have a text editor, put your file in an SQL file, and then slash alias", "tokens": [17330, 8129, 11, 550, 291, 362, 257, 2487, 9839, 11, 829, 428, 3991, 294, 364, 19200, 3991, 11, 293, 550, 17330, 419, 4609], "temperature": 0.0, "avg_logprob": -0.0804424626486642, "compression_ratio": 1.7619047619047619, "no_speech_prob": 3.646546247182414e-05}, {"id": 47, "seek": 30472, "start": 317.84000000000003, "end": 324.96000000000004, "text": " will create a macro that says, you set the name of the macro and then slash run says run this,", "tokens": [486, 1884, 257, 18887, 300, 1619, 11, 291, 992, 264, 1315, 295, 264, 18887, 293, 550, 17330, 1190, 1619, 1190, 341, 11], "temperature": 0.0, "avg_logprob": -0.0804424626486642, "compression_ratio": 1.7619047619047619, "no_speech_prob": 3.646546247182414e-05}, {"id": 48, "seek": 30472, "start": 324.96000000000004, "end": 331.12, "text": " run this little script, which will send it to the other console. And then after that,", "tokens": [1190, 341, 707, 5755, 11, 597, 486, 2845, 309, 281, 264, 661, 11076, 13, 400, 550, 934, 300, 11], "temperature": 0.0, "avg_logprob": -0.0804424626486642, "compression_ratio": 1.7619047619047619, "no_speech_prob": 3.646546247182414e-05}, {"id": 49, "seek": 33112, "start": 331.12, "end": 338.24, "text": " you can just type slash find queries and the top will get the SQL that you put into the file.", "tokens": [291, 393, 445, 2010, 17330, 915, 24109, 293, 264, 1192, 486, 483, 264, 19200, 300, 291, 829, 666, 264, 3991, 13], "temperature": 0.0, "avg_logprob": -0.15239062601206255, "compression_ratio": 1.665137614678899, "no_speech_prob": 8.528299076715484e-06}, {"id": 50, "seek": 33112, "start": 339.6, "end": 344.72, "text": " Okay, so it can be convenient for things like that, you know, or you could use it with Redis or,", "tokens": [1033, 11, 370, 309, 393, 312, 10851, 337, 721, 411, 300, 11, 291, 458, 11, 420, 291, 727, 764, 309, 365, 4477, 271, 420, 11], "temperature": 0.0, "avg_logprob": -0.15239062601206255, "compression_ratio": 1.665137614678899, "no_speech_prob": 8.528299076715484e-06}, {"id": 51, "seek": 33112, "start": 345.36, "end": 349.12, "text": " you know, building your, doing your kernel testings, they saw in the first talk or,", "tokens": [291, 458, 11, 2390, 428, 11, 884, 428, 28256, 1500, 1109, 11, 436, 1866, 294, 264, 700, 751, 420, 11], "temperature": 0.0, "avg_logprob": -0.15239062601206255, "compression_ratio": 1.665137614678899, "no_speech_prob": 8.528299076715484e-06}, {"id": 52, "seek": 33112, "start": 349.12, "end": 353.76, "text": " you know, whatever, just any, any sort of session you can just make a macro and send it.", "tokens": [291, 458, 11, 2035, 11, 445, 604, 11, 604, 1333, 295, 5481, 291, 393, 445, 652, 257, 18887, 293, 2845, 309, 13], "temperature": 0.0, "avg_logprob": -0.15239062601206255, "compression_ratio": 1.665137614678899, "no_speech_prob": 8.528299076715484e-06}, {"id": 53, "seek": 35376, "start": 353.76, "end": 361.76, "text": " So here's, here's another example. In this case, instead of using a macro, we're going to send", "tokens": [407, 510, 311, 11, 510, 311, 1071, 1365, 13, 682, 341, 1389, 11, 2602, 295, 1228, 257, 18887, 11, 321, 434, 516, 281, 2845], "temperature": 0.0, "avg_logprob": -0.10797731804125237, "compression_ratio": 1.71875, "no_speech_prob": 8.138924386003055e-06}, {"id": 54, "seek": 35376, "start": 361.76, "end": 368.64, "text": " standard out from a command that we run locally to the other pane. So on the bottom, I say delay", "tokens": [3832, 484, 490, 257, 5622, 300, 321, 1190, 16143, 281, 264, 661, 32605, 13, 407, 322, 264, 2767, 11, 286, 584, 8577], "temperature": 0.0, "avg_logprob": -0.10797731804125237, "compression_ratio": 1.71875, "no_speech_prob": 8.138924386003055e-06}, {"id": 55, "seek": 35376, "start": 368.64, "end": 373.92, "text": " three, which means wait three seconds between every line that you send to the top, and then slash", "tokens": [1045, 11, 597, 1355, 1699, 1045, 3949, 1296, 633, 1622, 300, 291, 2845, 281, 264, 1192, 11, 293, 550, 17330], "temperature": 0.0, "avg_logprob": -0.10797731804125237, "compression_ratio": 1.71875, "no_speech_prob": 8.138924386003055e-06}, {"id": 56, "seek": 35376, "start": 373.92, "end": 380.15999999999997, "text": " shell means just run this, run this command, and then show me the output. So I say slash shell,", "tokens": [8720, 1355, 445, 1190, 341, 11, 1190, 341, 5622, 11, 293, 550, 855, 385, 264, 5598, 13, 407, 286, 584, 17330, 8720, 11], "temperature": 0.0, "avg_logprob": -0.10797731804125237, "compression_ratio": 1.71875, "no_speech_prob": 8.138924386003055e-06}, {"id": 57, "seek": 38016, "start": 380.16, "end": 384.24, "text": " cat, e.g. simple.bash, and here you can see my bash script, which does an echo,", "tokens": [3857, 11, 308, 13, 70, 13, 2199, 13, 65, 1299, 11, 293, 510, 291, 393, 536, 452, 46183, 5755, 11, 597, 775, 364, 14300, 11], "temperature": 0.0, "avg_logprob": -0.14133021235466003, "compression_ratio": 1.9102564102564104, "no_speech_prob": 6.7475975811248645e-06}, {"id": 58, "seek": 38016, "start": 384.8, "end": 391.28000000000003, "text": " echo docker run, and then echo hostname. So then it runs that command when I say slash do,", "tokens": [14300, 360, 9178, 1190, 11, 293, 550, 14300, 3975, 16344, 13, 407, 550, 309, 6676, 300, 5622, 562, 286, 584, 17330, 360, 11], "temperature": 0.0, "avg_logprob": -0.14133021235466003, "compression_ratio": 1.9102564102564104, "no_speech_prob": 6.7475975811248645e-06}, {"id": 59, "seek": 38016, "start": 391.28000000000003, "end": 397.44000000000005, "text": " it runs that command, and the output from that command gets sent to the top, and it's sent,", "tokens": [309, 6676, 300, 5622, 11, 293, 264, 5598, 490, 300, 5622, 2170, 2279, 281, 264, 1192, 11, 293, 309, 311, 2279, 11], "temperature": 0.0, "avg_logprob": -0.14133021235466003, "compression_ratio": 1.9102564102564104, "no_speech_prob": 6.7475975811248645e-06}, {"id": 60, "seek": 38016, "start": 397.44000000000005, "end": 401.20000000000005, "text": " you know, after every line, it waits three seconds. So it sort of throttles the output,", "tokens": [291, 458, 11, 934, 633, 1622, 11, 309, 40597, 1045, 3949, 13, 407, 309, 1333, 295, 739, 1521, 904, 264, 5598, 11], "temperature": 0.0, "avg_logprob": -0.14133021235466003, "compression_ratio": 1.9102564102564104, "no_speech_prob": 6.7475975811248645e-06}, {"id": 61, "seek": 38016, "start": 401.20000000000005, "end": 405.92, "text": " you know, which we, which we might need because it might take docker, you know, a few seconds to", "tokens": [291, 458, 11, 597, 321, 11, 597, 321, 1062, 643, 570, 309, 1062, 747, 360, 9178, 11, 291, 458, 11, 257, 1326, 3949, 281], "temperature": 0.0, "avg_logprob": -0.14133021235466003, "compression_ratio": 1.9102564102564104, "no_speech_prob": 6.7475975811248645e-06}, {"id": 62, "seek": 40592, "start": 405.92, "end": 411.2, "text": " start before you run the hostname command on, you know, on the shell inside the container.", "tokens": [722, 949, 291, 1190, 264, 3975, 16344, 5622, 322, 11, 291, 458, 11, 322, 264, 8720, 1854, 264, 10129, 13], "temperature": 0.0, "avg_logprob": -0.08468196351649397, "compression_ratio": 1.8577235772357723, "no_speech_prob": 9.664753633842338e-06}, {"id": 63, "seek": 40592, "start": 412.72, "end": 418.24, "text": " So, so the bottom is what you're typing, the top is what you see. So here's another,", "tokens": [407, 11, 370, 264, 2767, 307, 437, 291, 434, 18444, 11, 264, 1192, 307, 437, 291, 536, 13, 407, 510, 311, 1071, 11], "temperature": 0.0, "avg_logprob": -0.08468196351649397, "compression_ratio": 1.8577235772357723, "no_speech_prob": 9.664753633842338e-06}, {"id": 64, "seek": 40592, "start": 418.24, "end": 422.64, "text": " here's another feature. So in addition to standard out, you can take, take the output of the top", "tokens": [510, 311, 1071, 4111, 13, 407, 294, 4500, 281, 3832, 484, 11, 291, 393, 747, 11, 747, 264, 5598, 295, 264, 1192], "temperature": 0.0, "avg_logprob": -0.08468196351649397, "compression_ratio": 1.8577235772357723, "no_speech_prob": 9.664753633842338e-06}, {"id": 65, "seek": 40592, "start": 422.64, "end": 428.0, "text": " and send it to standard in of anything that you write. So in this example, I'm using the nl", "tokens": [293, 2845, 309, 281, 3832, 294, 295, 1340, 300, 291, 2464, 13, 407, 294, 341, 1365, 11, 286, 478, 1228, 264, 297, 75], "temperature": 0.0, "avg_logprob": -0.08468196351649397, "compression_ratio": 1.8577235772357723, "no_speech_prob": 9.664753633842338e-06}, {"id": 66, "seek": 40592, "start": 428.0, "end": 434.24, "text": " command, which the standard in, it basically takes standard in and outputs line numbers for,", "tokens": [5622, 11, 597, 264, 3832, 294, 11, 309, 1936, 2516, 3832, 294, 293, 23930, 1622, 3547, 337, 11], "temperature": 0.0, "avg_logprob": -0.08468196351649397, "compression_ratio": 1.8577235772357723, "no_speech_prob": 9.664753633842338e-06}, {"id": 67, "seek": 43424, "start": 434.24, "end": 439.84000000000003, "text": " for the commands that are coming in. So I say sleep three and head user share addict words.", "tokens": [337, 264, 16901, 300, 366, 1348, 294, 13, 407, 286, 584, 2817, 1045, 293, 1378, 4195, 2073, 909, 985, 2283, 13], "temperature": 0.0, "avg_logprob": -0.12756646539747102, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.4966858543630224e-05}, {"id": 68, "seek": 43424, "start": 441.12, "end": 447.52, "text": " The reason I do sleep three, if you think about it for a second is because when I do the exec", "tokens": [440, 1778, 286, 360, 2817, 1045, 11, 498, 291, 519, 466, 309, 337, 257, 1150, 307, 570, 562, 286, 360, 264, 4454], "temperature": 0.0, "avg_logprob": -0.12756646539747102, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.4966858543630224e-05}, {"id": 69, "seek": 43424, "start": 447.52, "end": 453.92, "text": " command, I need time to type it, right? So I type sleep three and head, and that gets sent", "tokens": [5622, 11, 286, 643, 565, 281, 2010, 309, 11, 558, 30, 407, 286, 2010, 2817, 1045, 293, 1378, 11, 293, 300, 2170, 2279], "temperature": 0.0, "avg_logprob": -0.12756646539747102, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.4966858543630224e-05}, {"id": 70, "seek": 43424, "start": 453.92, "end": 459.92, "text": " immediately to the shell, which waits a few seconds, then I type exec nl, and then standard", "tokens": [4258, 281, 264, 8720, 11, 597, 40597, 257, 1326, 3949, 11, 550, 286, 2010, 4454, 297, 75, 11, 293, 550, 3832], "temperature": 0.0, "avg_logprob": -0.12756646539747102, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.4966858543630224e-05}, {"id": 71, "seek": 45992, "start": 459.92, "end": 464.88, "text": " in comes in, and then it prints out what goes out. So, you know, in the real world, you probably", "tokens": [294, 1487, 294, 11, 293, 550, 309, 22305, 484, 437, 1709, 484, 13, 407, 11, 291, 458, 11, 294, 264, 957, 1002, 11, 291, 1391], "temperature": 0.0, "avg_logprob": -0.12197444713221187, "compression_ratio": 1.6556776556776556, "no_speech_prob": 3.7849881664442364e-06}, {"id": 72, "seek": 45992, "start": 464.88, "end": 469.04, "text": " won't have to sleep because there will be constantly stuff coming through the top terminal.", "tokens": [1582, 380, 362, 281, 2817, 570, 456, 486, 312, 6460, 1507, 1348, 807, 264, 1192, 14709, 13], "temperature": 0.0, "avg_logprob": -0.12197444713221187, "compression_ratio": 1.6556776556776556, "no_speech_prob": 3.7849881664442364e-06}, {"id": 73, "seek": 45992, "start": 471.28000000000003, "end": 476.88, "text": " A few other interesting commands. So await, we'll just wait for either a string or a regular", "tokens": [316, 1326, 661, 1880, 16901, 13, 407, 19670, 11, 321, 603, 445, 1699, 337, 2139, 257, 6798, 420, 257, 3890], "temperature": 0.0, "avg_logprob": -0.12197444713221187, "compression_ratio": 1.6556776556776556, "no_speech_prob": 3.7849881664442364e-06}, {"id": 74, "seek": 45992, "start": 476.88, "end": 482.8, "text": " expression to appear in the top. In queue is something, is a way to in queue a command", "tokens": [6114, 281, 4204, 294, 264, 1192, 13, 682, 18639, 307, 746, 11, 307, 257, 636, 281, 294, 18639, 257, 5622], "temperature": 0.0, "avg_logprob": -0.12197444713221187, "compression_ratio": 1.6556776556776556, "no_speech_prob": 3.7849881664442364e-06}, {"id": 75, "seek": 45992, "start": 483.44, "end": 488.08000000000004, "text": " after you're finished awaiting it. Grab, repeat, send the same thing over and over,", "tokens": [934, 291, 434, 4335, 43759, 309, 13, 20357, 11, 7149, 11, 2845, 264, 912, 551, 670, 293, 670, 11], "temperature": 0.0, "avg_logprob": -0.12197444713221187, "compression_ratio": 1.6556776556776556, "no_speech_prob": 3.7849881664442364e-06}, {"id": 76, "seek": 48808, "start": 488.08, "end": 493.91999999999996, "text": " maybe add an interval, send a file, and we already saw what delay does, setting the delay.", "tokens": [1310, 909, 364, 15035, 11, 2845, 257, 3991, 11, 293, 321, 1217, 1866, 437, 8577, 775, 11, 3287, 264, 8577, 13], "temperature": 0.0, "avg_logprob": -0.10946363018405053, "compression_ratio": 1.5936073059360731, "no_speech_prob": 1.8055183318210766e-05}, {"id": 77, "seek": 48808, "start": 495.2, "end": 498.56, "text": " And there are actually a lot of commands. There are 43. Whenever I needed to do something,", "tokens": [400, 456, 366, 767, 257, 688, 295, 16901, 13, 821, 366, 17914, 13, 14159, 286, 2978, 281, 360, 746, 11], "temperature": 0.0, "avg_logprob": -0.10946363018405053, "compression_ratio": 1.5936073059360731, "no_speech_prob": 1.8055183318210766e-05}, {"id": 78, "seek": 48808, "start": 498.56, "end": 505.52, "text": " I added a new one. So if you have any ideas, send me a PR or send a request. There are 43", "tokens": [286, 3869, 257, 777, 472, 13, 407, 498, 291, 362, 604, 3487, 11, 2845, 385, 257, 11568, 420, 2845, 257, 5308, 13, 821, 366, 17914], "temperature": 0.0, "avg_logprob": -0.10946363018405053, "compression_ratio": 1.5936073059360731, "no_speech_prob": 1.8055183318210766e-05}, {"id": 79, "seek": 48808, "start": 505.52, "end": 509.76, "text": " different commands right now. Actually, 44. I think I added one this morning.", "tokens": [819, 16901, 558, 586, 13, 5135, 11, 16408, 13, 286, 519, 286, 3869, 472, 341, 2446, 13], "temperature": 0.0, "avg_logprob": -0.10946363018405053, "compression_ratio": 1.5936073059360731, "no_speech_prob": 1.8055183318210766e-05}, {"id": 80, "seek": 50976, "start": 509.76, "end": 519.04, "text": " Okay, so script, anybody here use expect? A few people. Okay, so expect is been around for a", "tokens": [1033, 11, 370, 5755, 11, 4472, 510, 764, 2066, 30, 316, 1326, 561, 13, 1033, 11, 370, 2066, 307, 668, 926, 337, 257], "temperature": 0.0, "avg_logprob": -0.1284470184176576, "compression_ratio": 1.5643153526970954, "no_speech_prob": 4.1324179619550705e-05}, {"id": 81, "seek": 50976, "start": 519.04, "end": 526.56, "text": " long time, 1993, but it's still pretty useful if you have to interact with a program that requires", "tokens": [938, 565, 11, 25137, 11, 457, 309, 311, 920, 1238, 4420, 498, 291, 362, 281, 4648, 365, 257, 1461, 300, 7029], "temperature": 0.0, "avg_logprob": -0.1284470184176576, "compression_ratio": 1.5643153526970954, "no_speech_prob": 4.1324179619550705e-05}, {"id": 82, "seek": 50976, "start": 526.56, "end": 534.08, "text": " a TTY. So here is an example of an expect script on the left. In this, in this case,", "tokens": [257, 314, 23433, 13, 407, 510, 307, 364, 1365, 295, 364, 2066, 5755, 322, 264, 1411, 13, 682, 341, 11, 294, 341, 1389, 11], "temperature": 0.0, "avg_logprob": -0.1284470184176576, "compression_ratio": 1.5643153526970954, "no_speech_prob": 4.1324179619550705e-05}, {"id": 83, "seek": 50976, "start": 534.08, "end": 538.4, "text": " what we're going to do is we're going to start a Docker container again, and then we're going to run", "tokens": [437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 722, 257, 33772, 10129, 797, 11, 293, 550, 321, 434, 516, 281, 1190], "temperature": 0.0, "avg_logprob": -0.1284470184176576, "compression_ratio": 1.5643153526970954, "no_speech_prob": 4.1324179619550705e-05}, {"id": 84, "seek": 53840, "start": 538.4, "end": 544.72, "text": " user add to add a user. And then we'd like to set a password for the user. So we're going to run", "tokens": [4195, 909, 281, 909, 257, 4195, 13, 400, 550, 321, 1116, 411, 281, 992, 257, 11524, 337, 264, 4195, 13, 407, 321, 434, 516, 281, 1190], "temperature": 0.0, "avg_logprob": -0.12074506507729585, "compression_ratio": 1.812206572769953, "no_speech_prob": 8.396920748054981e-06}, {"id": 85, "seek": 53840, "start": 544.72, "end": 550.16, "text": " the password command, and we're also going to look for the prompts that are coming back. Okay, so", "tokens": [264, 11524, 5622, 11, 293, 321, 434, 611, 516, 281, 574, 337, 264, 41095, 300, 366, 1348, 646, 13, 1033, 11, 370], "temperature": 0.0, "avg_logprob": -0.12074506507729585, "compression_ratio": 1.812206572769953, "no_speech_prob": 8.396920748054981e-06}, {"id": 86, "seek": 53840, "start": 551.84, "end": 558.0799999999999, "text": " on the left we see the way expect works is you say spawn, and then expect takes a pattern. So", "tokens": [322, 264, 1411, 321, 536, 264, 636, 2066, 1985, 307, 291, 584, 17088, 11, 293, 550, 2066, 2516, 257, 5102, 13, 407], "temperature": 0.0, "avg_logprob": -0.12074506507729585, "compression_ratio": 1.812206572769953, "no_speech_prob": 8.396920748054981e-06}, {"id": 87, "seek": 53840, "start": 558.0799999999999, "end": 564.48, "text": " root at is what comes back in the prompt. And then you send user add, termy, we're going to add a", "tokens": [5593, 412, 307, 437, 1487, 646, 294, 264, 12391, 13, 400, 550, 291, 2845, 4195, 909, 11, 1433, 88, 11, 321, 434, 516, 281, 909, 257], "temperature": 0.0, "avg_logprob": -0.12074506507729585, "compression_ratio": 1.812206572769953, "no_speech_prob": 8.396920748054981e-06}, {"id": 88, "seek": 56448, "start": 564.48, "end": 570.64, "text": " username to termy. Then it has a regular expression expect dash re that you can then capture with", "tokens": [30351, 281, 1433, 88, 13, 1396, 309, 575, 257, 3890, 6114, 2066, 8240, 319, 300, 291, 393, 550, 7983, 365], "temperature": 0.0, "avg_logprob": -0.11314507949450785, "compression_ratio": 1.7695167286245352, "no_speech_prob": 6.338076673273463e-06}, {"id": 89, "seek": 56448, "start": 570.64, "end": 576.5600000000001, "text": " the expect out. And then finally at the bottom, we're going to print out what we caught, like", "tokens": [264, 2066, 484, 13, 400, 550, 2721, 412, 264, 2767, 11, 321, 434, 516, 281, 4482, 484, 437, 321, 5415, 11, 411], "temperature": 0.0, "avg_logprob": -0.11314507949450785, "compression_ratio": 1.7695167286245352, "no_speech_prob": 6.338076673273463e-06}, {"id": 90, "seek": 56448, "start": 576.5600000000001, "end": 581.44, "text": " we captured the fact that the host name was something that was in the prompt. So you can do", "tokens": [321, 11828, 264, 1186, 300, 264, 3975, 1315, 390, 746, 300, 390, 294, 264, 12391, 13, 407, 291, 393, 360], "temperature": 0.0, "avg_logprob": -0.11314507949450785, "compression_ratio": 1.7695167286245352, "no_speech_prob": 6.338076673273463e-06}, {"id": 91, "seek": 56448, "start": 581.44, "end": 586.5600000000001, "text": " the same thing in termy. You can say a user bin end of termy and then set it to be an executable", "tokens": [264, 912, 551, 294, 1433, 88, 13, 509, 393, 584, 257, 4195, 5171, 917, 295, 1433, 88, 293, 550, 992, 309, 281, 312, 364, 7568, 712], "temperature": 0.0, "avg_logprob": -0.11314507949450785, "compression_ratio": 1.7695167286245352, "no_speech_prob": 6.338076673273463e-06}, {"id": 92, "seek": 56448, "start": 586.5600000000001, "end": 592.5600000000001, "text": " file. The default is to just send everything. So it's just kind of like you're interacting from", "tokens": [3991, 13, 440, 7576, 307, 281, 445, 2845, 1203, 13, 407, 309, 311, 445, 733, 295, 411, 291, 434, 18017, 490], "temperature": 0.0, "avg_logprob": -0.11314507949450785, "compression_ratio": 1.7695167286245352, "no_speech_prob": 6.338076673273463e-06}, {"id": 93, "seek": 59256, "start": 592.56, "end": 598.8, "text": " the console. All the lines just get sent directly to the other pane. So you just say docker run,", "tokens": [264, 11076, 13, 1057, 264, 3876, 445, 483, 2279, 3838, 281, 264, 661, 32605, 13, 407, 291, 445, 584, 360, 9178, 1190, 11], "temperature": 0.0, "avg_logprob": -0.09529470786070213, "compression_ratio": 1.788679245283019, "no_speech_prob": 8.01228543423349e-06}, {"id": 94, "seek": 59256, "start": 598.8, "end": 605.76, "text": " and then backslash expect is just kind of like the expect command. There's a little subtlety in", "tokens": [293, 550, 646, 10418, 1299, 2066, 307, 445, 733, 295, 411, 264, 2066, 5622, 13, 821, 311, 257, 707, 7257, 75, 2210, 294], "temperature": 0.0, "avg_logprob": -0.09529470786070213, "compression_ratio": 1.788679245283019, "no_speech_prob": 8.01228543423349e-06}, {"id": 95, "seek": 59256, "start": 605.76, "end": 612.0, "text": " there that you usually don't think about because it's sort of intuitive as a human, you know,", "tokens": [456, 300, 291, 2673, 500, 380, 519, 466, 570, 309, 311, 1333, 295, 21769, 382, 257, 1952, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.09529470786070213, "compression_ratio": 1.788679245283019, "no_speech_prob": 8.01228543423349e-06}, {"id": 96, "seek": 59256, "start": 612.0, "end": 615.76, "text": " you type it and you're expecting something. But really there's a race condition there, right?", "tokens": [291, 2010, 309, 293, 291, 434, 9650, 746, 13, 583, 534, 456, 311, 257, 4569, 4188, 456, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09529470786070213, "compression_ratio": 1.788679245283019, "no_speech_prob": 8.01228543423349e-06}, {"id": 97, "seek": 59256, "start": 615.76, "end": 621.1199999999999, "text": " Because between the time that you send your command and the time you send the expect command,", "tokens": [1436, 1296, 264, 565, 300, 291, 2845, 428, 5622, 293, 264, 565, 291, 2845, 264, 2066, 5622, 11], "temperature": 0.0, "avg_logprob": -0.09529470786070213, "compression_ratio": 1.788679245283019, "no_speech_prob": 8.01228543423349e-06}, {"id": 98, "seek": 62112, "start": 621.12, "end": 626.16, "text": " the output might have already happened. So the way that expect deals with it is it keeps track of", "tokens": [264, 5598, 1062, 362, 1217, 2011, 13, 407, 264, 636, 300, 2066, 11215, 365, 309, 307, 309, 5965, 2837, 295], "temperature": 0.0, "avg_logprob": -0.16198763555409956, "compression_ratio": 1.7644444444444445, "no_speech_prob": 8.936853191698901e-06}, {"id": 99, "seek": 62112, "start": 626.16, "end": 631.76, "text": " the stream and then it kind of goes back and there's sort of this running, you know, a pointer to the", "tokens": [264, 4309, 293, 550, 309, 733, 295, 1709, 646, 293, 456, 311, 1333, 295, 341, 2614, 11, 291, 458, 11, 257, 23918, 281, 264], "temperature": 0.0, "avg_logprob": -0.16198763555409956, "compression_ratio": 1.7644444444444445, "no_speech_prob": 8.936853191698901e-06}, {"id": 100, "seek": 62112, "start": 631.76, "end": 638.72, "text": " output stream. And the way we do that with termy is we basically run the expect before we run the", "tokens": [5598, 4309, 13, 400, 264, 636, 321, 360, 300, 365, 1433, 88, 307, 321, 1936, 1190, 264, 2066, 949, 321, 1190, 264], "temperature": 0.0, "avg_logprob": -0.16198763555409956, "compression_ratio": 1.7644444444444445, "no_speech_prob": 8.936853191698901e-06}, {"id": 101, "seek": 62112, "start": 638.72, "end": 644.8, "text": " command. So it'll basically say now I'm starting to watch the output and then it'll send the output", "tokens": [5622, 13, 407, 309, 603, 1936, 584, 586, 286, 478, 2891, 281, 1159, 264, 5598, 293, 550, 309, 603, 2845, 264, 5598], "temperature": 0.0, "avg_logprob": -0.16198763555409956, "compression_ratio": 1.7644444444444445, "no_speech_prob": 8.936853191698901e-06}, {"id": 102, "seek": 64480, "start": 644.8, "end": 651.52, "text": " and then it'll capture it. So when we run this and it runs interactively in Tmux,", "tokens": [293, 550, 309, 603, 7983, 309, 13, 407, 562, 321, 1190, 341, 293, 309, 6676, 4648, 3413, 294, 314, 76, 2449, 11], "temperature": 0.0, "avg_logprob": -0.1429728528727656, "compression_ratio": 1.6854460093896713, "no_speech_prob": 3.392404778423952e-06}, {"id": 103, "seek": 64480, "start": 652.8, "end": 658.0799999999999, "text": " so you can see on the top it sends docker run, pulls the image and it's waiting now to see", "tokens": [370, 291, 393, 536, 322, 264, 1192, 309, 14790, 360, 9178, 1190, 11, 16982, 264, 3256, 293, 309, 311, 3806, 586, 281, 536], "temperature": 0.0, "avg_logprob": -0.1429728528727656, "compression_ratio": 1.6854460093896713, "no_speech_prob": 3.392404778423952e-06}, {"id": 104, "seek": 64480, "start": 658.64, "end": 665.1999999999999, "text": " the prompt. So it waits for the root and then after that it sends the user add, waits for new", "tokens": [264, 12391, 13, 407, 309, 40597, 337, 264, 5593, 293, 550, 934, 300, 309, 14790, 264, 4195, 909, 11, 40597, 337, 777], "temperature": 0.0, "avg_logprob": -0.1429728528727656, "compression_ratio": 1.6854460093896713, "no_speech_prob": 3.392404778423952e-06}, {"id": 105, "seek": 66520, "start": 665.2, "end": 674.72, "text": " password and then finishes successfully. So the output here is in the test anything protocol.", "tokens": [11524, 293, 550, 23615, 10727, 13, 407, 264, 5598, 510, 307, 294, 264, 1500, 1340, 10336, 13], "temperature": 0.0, "avg_logprob": -0.14758163949717645, "compression_ratio": 1.5964125560538116, "no_speech_prob": 7.181869477790315e-06}, {"id": 106, "seek": 66520, "start": 675.2800000000001, "end": 679.2, "text": " You may or may not be familiar with it, it's just okay and then the number of the test.", "tokens": [509, 815, 420, 815, 406, 312, 4963, 365, 309, 11, 309, 311, 445, 1392, 293, 550, 264, 1230, 295, 264, 1500, 13], "temperature": 0.0, "avg_logprob": -0.14758163949717645, "compression_ratio": 1.5964125560538116, "no_speech_prob": 7.181869477790315e-06}, {"id": 107, "seek": 66520, "start": 679.2, "end": 683.5200000000001, "text": " And then currently if it doesn't get what it expects then it aborts the tests.", "tokens": [400, 550, 4362, 498, 309, 1177, 380, 483, 437, 309, 33280, 550, 309, 410, 3299, 264, 6921, 13], "temperature": 0.0, "avg_logprob": -0.14758163949717645, "compression_ratio": 1.5964125560538116, "no_speech_prob": 7.181869477790315e-06}, {"id": 108, "seek": 66520, "start": 684.6400000000001, "end": 690.32, "text": " Okay, so quickly I'm just going to say why it's written in Raku. And the main idea here is that", "tokens": [1033, 11, 370, 2661, 286, 478, 445, 516, 281, 584, 983, 309, 311, 3720, 294, 497, 15803, 13, 400, 264, 2135, 1558, 510, 307, 300], "temperature": 0.0, "avg_logprob": -0.14758163949717645, "compression_ratio": 1.5964125560538116, "no_speech_prob": 7.181869477790315e-06}, {"id": 109, "seek": 69032, "start": 690.32, "end": 697.6, "text": " Raku has a lot of very nice ways to do asynchronous programming and also interact with other", "tokens": [497, 15803, 575, 257, 688, 295, 588, 1481, 2098, 281, 360, 49174, 9410, 293, 611, 4648, 365, 661], "temperature": 0.0, "avg_logprob": -0.06887230232580384, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.0138118998147547e-05}, {"id": 110, "seek": 69032, "start": 697.6, "end": 706.96, "text": " commands. So you can quickly open a command, open a pipe to Tmux and interact with it using", "tokens": [16901, 13, 407, 291, 393, 2661, 1269, 257, 5622, 11, 1269, 257, 11240, 281, 314, 76, 2449, 293, 4648, 365, 309, 1228], "temperature": 0.0, "avg_logprob": -0.06887230232580384, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.0138118998147547e-05}, {"id": 111, "seek": 69032, "start": 706.96, "end": 713.5200000000001, "text": " asynchronous processes. You can run things synchronously. It's got good not just inter-process", "tokens": [49174, 7555, 13, 509, 393, 1190, 721, 19331, 5098, 13, 467, 311, 658, 665, 406, 445, 728, 12, 41075], "temperature": 0.0, "avg_logprob": -0.06887230232580384, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.0138118998147547e-05}, {"id": 112, "seek": 71352, "start": 713.52, "end": 720.4, "text": " but inter-thread communication. It has built-in constructs that like supplies and channels", "tokens": [457, 728, 12, 392, 2538, 6101, 13, 467, 575, 3094, 12, 259, 7690, 82, 300, 411, 11768, 293, 9235], "temperature": 0.0, "avg_logprob": -0.09993289067195012, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.9470331810443895e-06}, {"id": 113, "seek": 71352, "start": 720.4, "end": 727.04, "text": " and promises which you may be familiar with from other languages. So this is like an example of", "tokens": [293, 16403, 597, 291, 815, 312, 4963, 365, 490, 661, 8650, 13, 407, 341, 307, 411, 364, 1365, 295], "temperature": 0.0, "avg_logprob": -0.09993289067195012, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.9470331810443895e-06}, {"id": 114, "seek": 71352, "start": 727.04, "end": 733.68, "text": " how you could tail a file and create a supply which is a built-in type in Raku. And finally,", "tokens": [577, 291, 727, 6838, 257, 3991, 293, 1884, 257, 5847, 597, 307, 257, 3094, 12, 259, 2010, 294, 497, 15803, 13, 400, 2721, 11], "temperature": 0.0, "avg_logprob": -0.09993289067195012, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.9470331810443895e-06}, {"id": 115, "seek": 71352, "start": 734.24, "end": 738.16, "text": " this is kind of like the implementation of expect. So it's really, it's really pretty", "tokens": [341, 307, 733, 295, 411, 264, 11420, 295, 2066, 13, 407, 309, 311, 534, 11, 309, 311, 534, 1238], "temperature": 0.0, "avg_logprob": -0.09993289067195012, "compression_ratio": 1.6079295154185023, "no_speech_prob": 2.9470331810443895e-06}, {"id": 116, "seek": 73816, "start": 738.16, "end": 745.28, "text": " straightforward. You set, you can basically set up an event loop in a separate thread using this", "tokens": [15325, 13, 509, 992, 11, 291, 393, 1936, 992, 493, 364, 2280, 6367, 294, 257, 4994, 7207, 1228, 341], "temperature": 0.0, "avg_logprob": -0.14620633125305177, "compression_ratio": 1.6756756756756757, "no_speech_prob": 3.500154207358719e-06}, {"id": 117, "seek": 73816, "start": 746.3199999999999, "end": 752.3199999999999, "text": " construct, you know, start, starts a thread, react whenever it says here's an event loop.", "tokens": [7690, 11, 291, 458, 11, 722, 11, 3719, 257, 7207, 11, 4515, 5699, 309, 1619, 510, 311, 364, 2280, 6367, 13], "temperature": 0.0, "avg_logprob": -0.14620633125305177, "compression_ratio": 1.6756756756756757, "no_speech_prob": 3.500154207358719e-06}, {"id": 118, "seek": 73816, "start": 752.3199999999999, "end": 757.36, "text": " And then when, if it's a string, we look to see if it contains the target, if it's a regex,", "tokens": [400, 550, 562, 11, 498, 309, 311, 257, 6798, 11, 321, 574, 281, 536, 498, 309, 8306, 264, 3779, 11, 498, 309, 311, 257, 319, 432, 87, 11], "temperature": 0.0, "avg_logprob": -0.14620633125305177, "compression_ratio": 1.6756756756756757, "no_speech_prob": 3.500154207358719e-06}, {"id": 119, "seek": 73816, "start": 758.16, "end": 764.48, "text": " then we send it to a channel so that then we can have it available to use locally. So even if", "tokens": [550, 321, 2845, 309, 281, 257, 2269, 370, 300, 550, 321, 393, 362, 309, 2435, 281, 764, 16143, 13, 407, 754, 498], "temperature": 0.0, "avg_logprob": -0.14620633125305177, "compression_ratio": 1.6756756756756757, "no_speech_prob": 3.500154207358719e-06}, {"id": 120, "seek": 76448, "start": 764.48, "end": 769.12, "text": " you're not interested in using Termi, you might find some value in using Raku for automation.", "tokens": [291, 434, 406, 3102, 294, 1228, 314, 966, 72, 11, 291, 1062, 915, 512, 2158, 294, 1228, 497, 15803, 337, 17769, 13], "temperature": 0.0, "avg_logprob": -0.2047099565204821, "compression_ratio": 1.2523364485981308, "no_speech_prob": 3.630717401392758e-05}, {"id": 121, "seek": 76448, "start": 771.04, "end": 772.5600000000001, "text": " That's the end. Thank you for listening.", "tokens": [663, 311, 264, 917, 13, 1044, 291, 337, 4764, 13], "temperature": 0.0, "avg_logprob": -0.2047099565204821, "compression_ratio": 1.2523364485981308, "no_speech_prob": 3.630717401392758e-05}, {"id": 122, "seek": 77256, "start": 772.56, "end": 802.16, "text": " Questions? I think I have a few minutes. Yeah, that's a good question. So different shells", "tokens": [27738, 30, 286, 519, 286, 362, 257, 1326, 2077, 13, 865, 11, 300, 311, 257, 665, 1168, 13, 407, 819, 22523], "temperature": 0.0, "avg_logprob": -0.1508957862854004, "compression_ratio": 1.0465116279069768, "no_speech_prob": 0.0004694524686783552}, {"id": 123, "seek": 80216, "start": 802.16, "end": 807.36, "text": " do different things that you kind of are not really aware of, even just the simple like printing", "tokens": [360, 819, 721, 300, 291, 733, 295, 366, 406, 534, 3650, 295, 11, 754, 445, 264, 2199, 411, 14699], "temperature": 0.0, "avg_logprob": -0.08391291247911689, "compression_ratio": 1.75, "no_speech_prob": 5.5593282013433054e-05}, {"id": 124, "seek": 80216, "start": 807.36, "end": 812.0, "text": " of a prompt. They don't always send a new line character. Sometimes they'll send escape sequences", "tokens": [295, 257, 12391, 13, 814, 500, 380, 1009, 2845, 257, 777, 1622, 2517, 13, 4803, 436, 603, 2845, 7615, 22978], "temperature": 0.0, "avg_logprob": -0.08391291247911689, "compression_ratio": 1.75, "no_speech_prob": 5.5593282013433054e-05}, {"id": 125, "seek": 80216, "start": 812.0, "end": 816.8, "text": " that go to the beginning of the line and then go down the line or sometimes they'll even redraw", "tokens": [300, 352, 281, 264, 2863, 295, 264, 1622, 293, 550, 352, 760, 264, 1622, 420, 2171, 436, 603, 754, 2182, 5131], "temperature": 0.0, "avg_logprob": -0.08391291247911689, "compression_ratio": 1.75, "no_speech_prob": 5.5593282013433054e-05}, {"id": 126, "seek": 80216, "start": 816.8, "end": 824.24, "text": " the line above it. So it works fine. But you just have to be aware of the idiosyncrasies of the", "tokens": [264, 1622, 3673, 309, 13, 407, 309, 1985, 2489, 13, 583, 291, 445, 362, 281, 312, 3650, 295, 264, 4496, 2717, 34015, 3906, 530, 295, 264], "temperature": 0.0, "avg_logprob": -0.08391291247911689, "compression_ratio": 1.75, "no_speech_prob": 5.5593282013433054e-05}, {"id": 127, "seek": 80216, "start": 824.24, "end": 830.4, "text": " various shells in terms of what they do to the terminal. It does interfere. You can, one of the,", "tokens": [3683, 22523, 294, 2115, 295, 437, 436, 360, 281, 264, 14709, 13, 467, 775, 23946, 13, 509, 393, 11, 472, 295, 264, 11], "temperature": 0.0, "avg_logprob": -0.08391291247911689, "compression_ratio": 1.75, "no_speech_prob": 5.5593282013433054e-05}, {"id": 128, "seek": 83040, "start": 830.4, "end": 834.64, "text": " one of the commands is to buffer the lines and it does get tricky to split up the lines when", "tokens": [472, 295, 264, 16901, 307, 281, 21762, 264, 3876, 293, 309, 775, 483, 12414, 281, 7472, 493, 264, 3876, 562], "temperature": 0.0, "avg_logprob": -0.14007593880236988, "compression_ratio": 1.6067415730337078, "no_speech_prob": 1.1476026884338353e-05}, {"id": 129, "seek": 83040, "start": 834.64, "end": 848.88, "text": " there's a lot of cursor movement. Sorry, with serial consoles. So that, that aspect is basically", "tokens": [456, 311, 257, 688, 295, 28169, 3963, 13, 4919, 11, 365, 17436, 28948, 13, 407, 300, 11, 300, 4171, 307, 1936], "temperature": 0.0, "avg_logprob": -0.14007593880236988, "compression_ratio": 1.6067415730337078, "no_speech_prob": 1.1476026884338353e-05}, {"id": 130, "seek": 83040, "start": 848.88, "end": 855.52, "text": " taken care of by Tmux. So it doesn't do the direct communication with the serial console the way", "tokens": [2726, 1127, 295, 538, 314, 76, 2449, 13, 407, 309, 1177, 380, 360, 264, 2047, 6101, 365, 264, 17436, 11076, 264, 636], "temperature": 0.0, "avg_logprob": -0.14007593880236988, "compression_ratio": 1.6067415730337078, "no_speech_prob": 1.1476026884338353e-05}, {"id": 131, "seek": 85552, "start": 855.52, "end": 876.4, "text": " that expect would. Yep. We have one more minute. Last question. So we only have a handful of users.", "tokens": [300, 2066, 576, 13, 7010, 13, 492, 362, 472, 544, 3456, 13, 5264, 1168, 13, 407, 321, 787, 362, 257, 16458, 295, 5022, 13], "temperature": 0.0, "avg_logprob": -0.2183156305429887, "compression_ratio": 1.3829787234042554, "no_speech_prob": 1.3416550245892722e-05}, {"id": 132, "seek": 85552, "start": 876.4, "end": 882.4, "text": " So now is your opportunity to request features. We don't have to worry too much about backwards", "tokens": [407, 586, 307, 428, 2650, 281, 5308, 4122, 13, 492, 500, 380, 362, 281, 3292, 886, 709, 466, 12204], "temperature": 0.0, "avg_logprob": -0.2183156305429887, "compression_ratio": 1.3829787234042554, "no_speech_prob": 1.3416550245892722e-05}, {"id": 133, "seek": 88240, "start": 882.4, "end": 892.4, "text": " compatibility. Yep. That's it. Thank you.", "tokens": [50364, 34237, 13, 7010, 13, 663, 311, 309, 13, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.48617645672389437, "compression_ratio": 0.9111111111111111, "no_speech_prob": 4.5279852201929316e-05}], "language": "en"}