{"text": " Okay, so let's start. So hi everyone, I'm going to be talking about advanced camera support on all-winner SOCs today. So the topic is quite similar to the previous one in that we are also going to talk about sensors that need particular care and processing. So unfortunately I will be maybe explaining some of the things that were said by Kirin just earlier, so sorry about that for the people who just attended the previous talk. But hopefully you'll also learn a thing or two in addition. So I'm Paul, I work at a company called Butlin, we are an embedded Linux engineering company, so we do services around that. And I have contributed a number of things, especially to the Linux kernel, so I worked on the Sidrus VPU driver, a little bit of DRM things on the all-winner side, but also others. And I made a training that we give about displaying and rendering. But today I am here to tell you about the camera support for all-winner SOCs using mainline Linux. So we are going to talk first about general things related to image capture technology and just complex camera pipelines in general. So let's start with kind of an overview of a typical capture chain. So we start with the optics, of course, where the light is kind of focused on a particular area where we have our sensor. So the optics are usually passive from a software perspective, but not necessarily because you can have coil drivers to change the focus and things like that, so it's not always a passive thing. So after that you have the sensor, which actually samples the light and produces data from that. And we want to transmit that data to something else, typically like your CPU, where you can do something with the data, like display it or encode it. But in between the acquisition and actually receiving the data, we need to do some processing. And that processing can sometimes happen on the sensor itself, in which case we talk about some embedded processing, or it can be on the other side of the interface. So on the side that receives the data, typically your SOC or your CPU package or whatever. So this processing step is really the one that is necessary to produce good looking pictures from, let's say, just samples coming out of an ADC. So typically what we call a row or barrier sensor will produce not pixels, but data in a biopattern, which is a grid of red, green and blue filters that is applied on the sensor. That gives you information for each of these different channels. And we kind of need to translate that to pixels. So this is called debiring, and this is how we get pixels. But these pixels typically look very bad. So you need to apply a number of processing, number of operations and enhancements to have something that looks like a nice picture. So a number of things need to be done. For example, the brightness that you get from your ADC is linear, and we want to apply some gamma curves to that to make it look nice to the human eye. Typically, there's some dark level current that we have to subtract, for example, because the zero value that you get from the sensor is not necessarily the, well, the darkest value that you get from the sensor is not necessarily zero, so you might need to subtract an offset, things like that. There's usually a lot of noise, and the colors will be off, so you will need to do some white balancing, things like that. So all of these different steps take place in what we call the ISP, the Image Signal Processor, and there's basically three domains in which we apply these enhancements. The first one is the Biodomain, so that's really the first step that we apply to the data coming from the raw sensor. At the end of that step, we get some RGB data that we also want to enhance, and at the end of that, we typically convert it to YUV representation, and then we can also apply some enhancements to that data, and at the end, we get a YUV picture that is, like, ready to be displayed and encoded, for example. So yeah, that's kind of a list of the different enhancements that we apply, so I mentioned a number of them already. I'm not going to go through the list, but you get some idea that there is really a lot of things to be done here, and it actually takes quite some processing power to do that. So that's why typically we consider that it's not something you can do in real time with a CPU or it's going to fully load your CPU just to produce pictures and let alone encode them and things like that. So lots of things to do. That's really the base that you need to have something that looks right. There's more advanced stuff that you can have in addition, like the lens shading correction, so it's about the fact that the lenses will typically be darker on the edges than they are at the center, so you want to kind of even that out. That's also an operation to do. Dewarping, that's when you have, like, a very short focal, and things look, well, the geometry looks distorted, so you need to kind of readapt that. That's also very intensive in terms of calculation. Stabilization can also be involved if you have, like, a very shaky footage, especially from, like, a smartphone or something like that, so you want to also apply a stabilization step to your picture, and then, finally, you might also want to apply some style to your picture, so that will typically be a color lookup table where you can decide that you want to make it look, I know, like, CPiaton or something like that. This is also some processing that you will need to apply. So I mentioned that there's basically two types of ways to deal with this operation. The first one is to have the ISP in the sensor, in which case it's typically quite simple, and when it's in the sensor, you get the data directly ready from the sensor, but when it's not, you get just the raw Bayer data, and you need to do all of these different enhancement steps on some system on a chip ISP, so that's typically a hardware block that is dedicated for the purpose in your SoC. So nowadays, many multimedia-oriented SoCs do have such blocks, and in order to properly configure that, you might need some specific calibration data that really depends on the sensor, sometimes on the environment that is used, things like that, so it's kind of highly specific to the setup that you have. So it's kind of just an illustration of the different steps, so that's the kind of picture that you would get as a raw thing from the sensor, and the steps you might apply to have something in YUV at the end that looks kind of okay. But it's not just about statically configuring an image processor to produce something good. Some parameters actually depend on the thing that you are shooting, so there's basically three things that you need to adjust depending on the situation. The first one is focus, so of course that implies that you have control over some coil to change the focus of the lens, but obviously your picture is going to look very different if it's out of focus or if it's sharply focused, so that's one of the things that the ISP is also involved with to basically tell you whether an image is sharp or not. There is white balance, which highly depends on the source light that you are using, especially the color temperature of that light, so if you are in broad daylight, it's not the same as being in a room with some particular type of lighting, so it needs to adjust to that. It will typically have an impact on how the image looks. And of course exposure, so what is basically the window of luminescence that your sensor is going to sample, so if you are in a very bright environment, you need to apply a different gain than when you are in a very dark environment, so that's also something that needs to be adjusted depending on what you are shooting, and this is also something that the ISP is going to help for by telling you basically how bright or how dark the scene is. So yeah, you can adjust those, especially exposure, you can adjust with three parameters, so if you do like photography, you probably know about that. You can change the aperture of the lens, you can change the exposure time, so for how long you are waiting for light to come in to charge yourselves that will be read by the ADC, and you can increase the gain, which will also increase noise typically. So advanced users will typically want to control these parameters manually to have exactly the picture that they want, but in most cases people just want to take their phone out and shoot at something and just press a button, it just works, so the idea is that we want all of these different parameters to be adjusted like automatically. So that's what we call the 3A, so the 3As are automatic exposition, auto focus and auto white balance, and that is typically again something that will be done with the ISP. So it works with a feedback loop, okay, there's a number of algorithms in the literature that exist that are known to be able to do that correctly and efficiently, but the way they are implemented in the actual ISP hardware really depends, of course, on the hardware itself and how it was designed and what the like register interface is to configure these different things, and that is often considered to be the secret source of the manufacturer of the ISPs, so that's the information that is often kind of difficult to get and that they don't want to release, and so that's why sometimes you end up with like a big binary blob that does all of this and you don't really know what's going on. Okay, so that was for the kind of, yeah, parameters for the image enhancement. Now let's take a little bit of a look at the hardware interfaces for the capture. So historically there's been different ways to transmit pictures from one side to another. There used to be analog interfaces which are now mostly deprecated, so let's not really focus so much on those. And then we have typically two types of hardware interfaces that are used for cameras. First one is the parallel, also called DVP sometimes, and that's when you basically just have like one line of data per bit, you have some sync signals, so it's a little bit like a display, a parallel display if you should know about that, and so you just kind of send the data like that, and there's also more advanced interfaces which are also more robust to noise that typically work with serial lanes, so there is MyPy CSI2 and other ones like LVDS, SDI, High Spy. So those are kind of the high end interfaces that allow you to stream a lot of data, they typically go pretty high speed, they are more robust to noise, so they are considered to be like the advanced ones. So that's the one MyPy CSI2 that we are going to focus on. Through my particular use case involving the Alwinner platforms, so in case you're not familiar with the Alwinner platforms, they are ARM SoCs, made by this company called Alwinner from China, they are widely available, especially on these kind of form factors as developer boards, and there's a number of these platforms that support MyPy CSI2 and that have an image signal processor, so it means that we can connect a raw Bayer sensor and get the data from that, pipe it through the ISP, and then get a picture at the end. So that was kind of the goal of the project that I had involving these platforms. So the scope was on the V3 and A83T platforms using two different image sensors, OV8, 865 and OV645648, which are, like I just said, MyPy CSI2 sensors that provide raw Bayer data. And these sensors don't really have an onboard ISP. I think one of the two actually has one, but it does very little, so you still need to do a lot on the receiving end of the interface. So that was the goal. That's the state of all-winner camera support in general with the mainline channel, because we wanted to use the mainline channel, of course. Let's first take a look at the general all-winner platform support. So there is a community called Sanxi, or Sanxi, I think, which has been working towards mainline support for all-winner SOCs, so it's very advanced, there's lots of people involved. You can check out this link, the Linux mainlining effort, which kind of lists all the features of the different SOCs and how they are currently supported in mainline Linux, and it's pretty impressive nowadays. Many of the features are supported, especially for the older SOCs, because of course it takes time to get it right. But the multimedia areas are often the ones that come last in support, because they are typically a bit complex to implement. So when I started the project, there were two drivers for capturing data. The first one is the SunFry CSI driver, which covers the first generation of these all-winner platforms. It was the hardware then evolved into a second generation, which is supported in mainline by a driver called SunSixi CSI. After that, all-winner made a new generation of platforms, which have a third generation of CSI, which is currently not supported. So the devices that I was interested in, so the V3 and A83T, work with the second generation driver. So this driver basically allows you to receive images from the parallel interface, but it didn't support MyPi CSI 2, and it didn't have support for the ISP. So there was actually some support for these features in the downstream vendor all-winner kernel. So they do have some code for that, but the ISP part, especially, was implemented as a binary blob, so it was like a static library that was linked to the kernel, which is not necessarily very legal, but never mind. So there was actually very, very few resources regarding how the ISP works on these platforms. Okay, right, okay. So generally speaking, how do we support cameras in Linux, at least at the kernel level? So there's this API called v4l2 that I think you've all heard of just before, and probably many people know about. So it's really about supporting anything that produces pixels that the CPU can receive. So it supports lots of different types of devices, not only cameras, but also, I don't know, things like skaters, DVBT receivers, lots of different things, now decoders, encoders, things like that, so really lots of different devices related to pixels. And typically the way it works is that you have one device node that corresponds to a driver, so typically dev video zero, and that device node gives you access to an API from user space where you can do all the different things that are necessary to get a picture from user space. So typically negotiating the pixel format that you want to receive, doing the memory management like allocating the buffers, how many buffers you want, et cetera, queuing and decuing buffers. So user space provides a buffer to the driver which will fill it with pixels and then return it to the application, and then the application has a buffer that has pixels in it that it can use to, again, display or encode them or whatever. So this video device works well for, I would say, all-in-one devices where you basically just receive the finished data from a device like a USB-UVC camera. So the camera itself will do all of the processing inside, and it will just give you the final result over USB, and you get that through this API on Linux. And yeah, typically you need some DMA interface to do that transfer. But in the case of a more complex pipeline, especially when you have multiple components involved, like with the ISP, with the Mypy CSI2 receiver, with a particular sensor that you can control directly, then you end up with a situation where you have multiple devices in the pipeline, and you kind of need to configure each one of these devices individually. So this called for a more advanced API, which is the subdev API, which allows not only to have one big device for receiving the data, but also side devices that you can use to configure each component in the chain. And there is also the Media Controller API that allows you to kind of control the topology between these devices. So the subdevs typically just represent one of the parts of the pipeline, and they typically cannot do DMA. So they will be connected from and to other devices through some interfaces that don't involve writing the data to memory. So it could be a FIFO, or it could be an actual hardware interface like Mypy CSI2. And basically, the top-level video device will be in charge of kind of calling the next subdev in the chain, which we'll call the next one it's touch to, and et cetera. So that, for example, you can coordinate starting the stream and starting all the elements at the same time to start receiving an image. But these subdevs still need to be parented to the V4L2 device. So basically, they need to be all controlled under the same top-level entity to be able to, let's say, coordinate between one another. So for that, there is an API in V4L2 that allows you to register the subdevs with V4L2 device. So again, that's the parent controlling entity, which is easy to do if all of the support for the subdevs are in the same driver, because you have access to that V4L2 dev pointer. But it can also happen that you have multiple drivers involved throughout the tree. So for example, you have one driver for your sensor, one driver for your DMA interface to transfer the data, one driver for your ISP, and you could even have more. So in that case, the drivers don't know exactly which other driver they should be attached to. So in that case, there is a asynchronous subdev registration interface, which allows you when basically you have, for example, a sensor driver to just make that subdev available to whichever driver is going to need it later. So the subdev drivers will just make the subdev available to the rest of the world. And then the top-level drivers will need a way to identify which subdevs they actually need and to get a handle of them, which will allow registering these subdevs with the top-level V4L2 device. So the way that this kind of linking is done is through the FW node graph, which is typically implemented in device tree. So it uses the port and endpoint representation that maybe you've seen in some device trees implementing this, and this description also allows describing some characteristics of the interface. For example, if you have a sensor that is on a MyPyCSI interface, it can use a different number of lanes. So in MyPyCSI 2, you can have up to four lanes, but maybe the sensor only uses two. So you have to kind of be able to share this information. And this is also done through this FW node graph description. So you have some device tree properties that you had to indicate that. And then the drivers can call these endpoint pass helper to actually retrieve the information about the interface. So to illustrate, on the left side, we have some sensor here. So we have the port and endpoint representation. The remote endpoint allows you to connect two sides together, and you have these extra properties here like the data lane and link frequencies that really describe the characteristics of the bus, so at which frequency it should be running and how many lanes it should have. And then on the other side, you have the same thing. In this case, the link frequency is controlled by the sensor, so you only need to provide it there, but the data lanes is present on both sides. So that's how you can link basically different devices and allow the top level driver to retrieve access to the sub devs that you want to use. So this is very flexible, of course, because then the same, for example, sensor driver can be connected to lots of different platforms and lots of different situations. So it's really the driver itself doesn't know about how it's connected. It's really the device tree and the FWU node graph that tells you how it works. So back to async notification, just quickly to illustrate how the top level driver would gain access to a sub dev. So first, it has to match using that FWU node graph representation. It has to match a particular sub dev and the top level driver registers a notifier which has a number of callbacks that will be called when a particular device becomes available and then it can pretty much bind to that device and then the matching sub dev will be registered with the top level vfoil to device and then everything can be linked together and the top level driver actually has a pointer to a vfoil to sub dev that it can use to apply some actions like stop streaming, stop streaming or configure the format or things like that. So this is how it kind of all works together. So yeah, that's also when the media controller API comes in. So the media controller API is there to control the topology of how these different devices are actually connected between one another. So it also implements particular functions. So you can say this block attached to this sub dev is an entity of this kind, okay? And each sub dev has an associated media entity which lists pads which are basically in and out points that you can use to connect other devices. And then you can create links between these pads which represent the actual connection in the hardware. So for example, you could have multiple links that are possible for one device and then you could decide to enable one at runtime. So for example, if you have a multiplexer or something like that, that would be a typical case where you would just select one of the inputs and have just one output. So this is really the API that allows you to configure the topology of the whole pipeline and how everything is connected together. There's also some runtime validation to make sure that when you connect two entities, they are configured with the same pixel format so that everyone agrees on what the data will be, the data that will be transferred. And there is a user space utility called media CTL that you can use to configure these links. So for example, here I'm configuring pad number one of this sub dev to be connected to pad number zero of this sub dev and the one indicates that the link should be enabled. So yeah, it's a bit blurry. This is kind of just to give you some kind of big idea or kind of a head start on that, but it's definitely complex, so it's normal that it seems a little bit blurry, it's just in case you have to work on that, then you know what are the things involved in this. So in the end, we can end up with very complex pipelines, okay? So each of the green blocks are sub devs, okay? So they represent a specific functionality that can be connected in different ways. And the yellow blocks are the actual DMA engine, so the video nodes that are visible from user space that programs can connect to to receive the data. But of course, if you haven't configured the rest of the chain properly, then there will be no data available. So this is really what you use at the end when everything is configured and everything is ready and it works. Okay, so that was for the general pipeline integration thing. Now let's talk about ISPs more specifically. So ISPs are just a kind of sub dev and media entity. And they typically have an internal pipeline with multiple things in it, so we don't necessarily represent the internal pipeline unless it's relevant. So there will normally just be one sub dev for the ISP. But this sub dev will have highly specific parameters. Like I said, it depends on the hardware implementation. So the representation of the parameters that you give to the hardware will differ from one implementation to another. So it means that it's actually very hard to have like a generic interface that will work for every ISP and that would be the same. So instead of that, in V4L2, there is actually driver-specific or hardware-specific structures that are used to configure the ISP sub devs. So the way it works is that we have, so one or more capture video devices that's the same as the dev video zero where you get the typical data, the final data that you want. And we have extra video devices that we can use to configure the ISP and to get side information from the ISP. So these are the meta output and meta capture video devices. So the meta output is there for parameters. So in V4L2, output is when you provide something to the driver, not when you get something from it, which is a bit confusing, but that's where it is. So with that, basically, you will also use the same Q interface as you have with a video device. But instead of having pixels in the buffers, you will have particular structures that correspond to the parameters of the ISP that you are going to fill with a particular configuration. And then you can push that as a buffer to the video device, and the ISP will be configured to use those parameters. For the meta capture, which is the data provided by the ISP, you get the typical feedback information from the ISP, so essentially it will be statistics about how sharp the picture is, how dark the picture is, things like that, so that you can use this information to create a feedback loop and then provide new parameters in the output video device to properly configure the ISP to respond to a change in the scene or something like that. So for example, if you switch off a light and turn a different one on that has a different color temperature, for example, then you will get the information from this statistics, and you will be able to adjust the parameters to respond to that change. So that's how it works. Here is an example from the RK ISP, the Rockchip ISP1, where you can typically find this same topology. So the ISP is here. It actually has extra sub-devs before having the video devices for capturing the pixels. But you also find this statistic video device and params video device. So the params will take a particular structure here that you can configure, and the statistics will take another one with the information provided by the ISP. Okay, so that gives you kind of a big overview of how all of this is supported in V4L2 in Mainline Linux. So now let's take a look at the thing I actually worked on for the all-winner cameras. So using, again, these same interfaces for the particular use case of all-winner cameras, or cameras, you know, interfaced with all-winner SoCs. So in the all-winner second-generation hardware implementation, we have MiPy CSI2 controllers, which are really the components connected to the actual bus, the actual MiPy CSI2 bus, which are separate hardware blocks that are connected through a FIFO to the CSI controller, which is really just a DMA engine that will get some pixels in and write them to memory, basically, with some formatting and timing things. But essentially, that's what it does. So this CSI controller again was already supported in Mainline, but not the MiPy CSI2 controllers. So the CSI controller actually also needs to be configured specifically to take its input from the MiPy CSI2 controller instead of the parallel interface, which is the only choice that was supported before. So that's one of the things I had to add support for. So there was a lot of kind of reworking of the CSI code to support that, even though the biggest rework was actually to support the ISP. We need to get some information from the sensor to properly configure the MiPy CSI2 interface on the receiving side. So for that, we use a V4L2 control that the MiPy CSI2 controller is going to retrieve from the sensor driver through the subdev interface again. So it knows what the clock frequency of the bus will be. And we also use a part of the GenericLinux-Phi API to do that, because MiPy CSI2 works with a physical, let's say, protocol or physical implementation called DeFi from MiPy, which is kind of like the physical layer implementation that is used by this interface. So there needs to be some configuration about that. And yeah, for that, we use the Linux-Phi API. Now if we look more closely at the platforms that I got interested in, first, for the A83T, there was actually some source code provided in the all-winner vendor releases that we could use as a base to implement a driver, a proper mainline driver. So it has lots of magic values in registers, so sometimes it's just writing things to registers and we have no idea what it means, but we basically just took that in and did the same and it just worked. So there's still some magic involved, but that's unfortunately not so uncommon, so we just have to deal with it. The DeFi part is separate, so it has different control registers, but that was also supported in that all-winner SDK downstream code, so we could also just reuse the same thing and it worked. For the A31 and V3 supports, so it's like, again, the second generation of all-winner SOCs, we have a different MiPy CSI2 controller from the A83T, so it was necessary to write a separate driver for that one. There was also reference source code available and some documentation in one of the user manuals of the platforms, so that was, again, sufficient to write a driver. It turns out that the DeFi part is actually the same controller that is already used for MiPy DSI, which is a display interface that uses the same physical layer encapsulation, I would say. So there was actually already a driver for the DeFi block used for MiPy DSI, in which case it's in transmit mode, because when you want to drive a display, you push pixels out, but in that case, we reused that driver but configured it instead in receive mode for MiPy CSI2, so we could get pixels in. So that was also a change in this driver. But it was then necessary to indicate in which direction it should be running, so there were different approaches that were possible for that. So I think at the end, we settled for a particular device tree property to configure this mode. So the kind of outcome of this work was first some series to support the MiPy CSI2 controllers, so about 2,600 added lines, so pretty big, that's two new drivers here and here, some changes to the DeFi, like I just mentioned, and some device tree changes, so that's most of it. I started this work in October 2020, and it was merged in the next 6.0 in June 2022. So now these drivers are upstream, and you can use them, and they work, and I actually got a number of people writing to me and saying that they actually have been using this in different situations, and apparently it works pretty well, so I'm pretty glad about that. It's pretty nice. So that was for the MiPy CSI2 part, and let's say the big part of the work was supporting the ISP. So the ISP is connected to the CSI controller as well, but on the other side, meaning that the data will flow from MiPy CSI2 to the CSI controller to the ISP. So there also needed to be some configuration to be able to support that, especially big rework was required because when you start using the ISP, the DMA engine that is used to write the data to memory is no longer the DMA engine of the CSI controller. So the CSI has to act like a regular subdev, okay? It's no longer the final, let's say the final sync for the data, but it's just one more element in the chain. So the driver had to be reworked to support this different mode of working, where it will basically not register itself as the parent V4L2 device, but instead it will register itself as a subdev and the parent V4L2 device will be the ISP driver, which is again a separate driver. So that required quite some rework, and also to support both modes, obviously, because not everyone is interested in using the ISP or not every platform even has an ISP. So yeah, so there needed to be some, yeah, some rework to support that. What else to say, it has, I don't know if I put it here, but it has some weird way of configuring it, basically, in a typical hardware, you would just like have some registers and configure them, and then the effects will be applied on the next frame or something like that. But in that hardware, it actually has a DMA buffer, where you write the new values of the register, and then you trigger some update bits, and the hardware itself will go and read from the DMA buffer and copy that data to its registers synchronously with the virtual synchronization, so when you receive a new frame. So it's very odd as a way of working, but that's how it does. So like if you write directly to the registers, it won't actually do anything. You need to write to a side buffer, and then tell the hardware to update its registers from that buffer. So yeah, it's a little bit weird. If you look at the driver, you'll see that there is this buffer that is allocated for that, so that's the reason why, that's how it works, and that's what the old winner code is doing. So that's how it's done. So that's the final pipeline that we have with the sensor here, connected to the Mypy CSI 2 subdev, which is a separate driver. Then it goes through the CSI driver, which in this case is configured as a subdev only. And then it goes to the ISP subdev, which provides a DMA capture interface where you have the final data that was processed, and that should look good. And it also has another video device for the parameters. Like I described with the RockTip ISP, this one is implemented the same way. So we also have a specific structure to configure it. Currently, there is no support for the statistics, but in the future, when such support is added, there will be another video device connected to this ISP subdev to be able to provide the feedback data out. OK, so yeah, that's pretty much what I just said. Few details about the currently supported features in that config parameters buffer. Currently, we support the buyer coefficients, so we can translate from the buyer raw data to actual RGB data, and we can tweak how much of each color channel we put in. So that will typically allow different color temperatures, basically. We also support 2D noise filtering, which is called BDNF, so it's bi-directional noise filtering, which basically is like a low-pass filter, so it will remove the high-frequency stuff in your picture, and that will make it look smoother and nicer. And also easier to encode, which is one of the big reasons why you need to do noise filtering. And yeah, that's the main two features, so there's still a lot to be added. That's just the scope of what our project was at the time, but there's definitely a lot of room for improvement, so the ISP itself has numerous hardware capabilities, and so those could be added later in the driver. So it was, for that reason, submitted to staging in Linux, because we don't yet support all the features, so we don't yet have a complete description of that structure, and since it's part of the API, we want to make it clear that it's not finalized yet, so there will be some additions to this structure to support other features that are currently not implemented. So this code was submitted in September 2021, and it was merged in November 2022. So this is also in Linux 6.2, so you can get that with the update, so that's pretty nice. This change was much bigger. You can see it's 8,000 lines of additions, so it's a whole new driver, and a big rework of the previous 6 ICSI driver, which was more or less a complete rewrite of the driver, so it's pretty big. Just to finish on what is left to do in this area, so currently the ISP only supports the V3 platform, but the same hardware is found on the AT3T, and there's a few other chips that have previous versions of the same hardware, so they could be supported in the same driver, so that's something that could be done in the future. I mentioned that there is no statistics currently, so that is also something that could be added in the future. It has numerous other features that we could support, scaling rotation, and of course all of the modules inside the ISP for all the different features that I mentioned, and we don't have any 3A algorithm support in user space to do this feedback loop implementation, so that is also something to be worked on. And of course, doing that would be a great fit for Lib Camera, so Teran has just talked about it, so I won't go over it again, but that's definitely a good fit for supporting an ISP with Mainline Linux, so hopefully it will soon be well integrated in Lib Camera. Someone recently submitted patches about this, so it's like going towards this direction, so that's pretty nice. That's pretty much the end of this talk. I just wanted to mention that Bootlin is hiring, so if you are interested in this kind of stuff, how to support everything, you can reach out to us and we have positions available, also internships, so feel free if you're interested. And that is pretty much it for me, so thanks everyone, and now I'll have questions if there's any. Hi there, that was fantastic, thank you, who knew it was so complicated. The last time I looked at some of this with NXP free scale parts, we were using GStreamer with V4L sources coming into it, and a lot of the headache was that there was loads of buffer copying all over the place, and there were different memory maps and different access for different components to different memory maps. So with what you're explaining here, typical use case might be, we do this image processing, then I want to encode it with H.264265, maybe I want to push it into a GPU to do some kind of image analysis with AI machine learning techniques. Could you say something about how that hangs together with buffer copying and so forth? So basically nowadays the V4L2 framework has great support for DMA buff, which is a technology used for buffer sharing across different devices. So with that driver you could absolutely reuse the same memory where the ISP is producing the picture and use that as the source for an encoder or even the GPU, because DRM also supports DMA buff pretty well. So you could do all of that with zero copy, that's definitely all supported, and I didn't have to do anything special to have that work, it's just the V4L2 framework has that now. So unless your hardware has weird constraints like the GPU can access this part of memory or things like that, which are not really well represented currently, but in the general case it should work pretty well. So yeah, basically when we have an encoder driver for these all-winner platforms we will definitely be able to directly import ISP output to encoder input and no copy and low latency. Yeah. So. Anyone else? Yeah, thanks for your talk and for supporting, hopefully, more mainline Linux so we have more phones available. I have a question about the support for artificial network declarators. Do you have any idea if this is somehow integrated into the kernel stack in this way? I mean, it's a lot of work like this as is, but well. Yeah, so the AI accelerator stuff, that's not really the same scope as the camera stuff, but that is definitely moving forward. There is an axle subsystem that was added to the kernel quite recently, which is based of DRM for some aspects. And I think more and more drivers are being contributed towards that, so the main issue currently with that would be that the compilers to compile the models into the hardware representation are typically non-free and probably going to remain so in a number of cases. So feel free to push for free compilers for these models to your hardware provider or whatever. Any more questions? You mentioned patches for the camera for the ISP. Could you point them to me? Sorry? Could you point me to the patches you mentioned, and do you have plenty of work on the camera? It's Adam Pig, right? Sorry? It's Adam Pig's. That's just for the CISAs receiver as far as I'm aware, just not for the ISP. Maybe I went a bit fast over that. So it's actually patches on the driver, the SunSix ICSI driver side to implement things that Leap Camera expects. So I think you know the one thing I'm talking about. So do you plan to work on the ISP support, the Leap Camera? So personally, I would be very happy to do so, so we're just looking for someone to fund that effort. So if, you know, someone with lots of money and interest, please come and talk to us. No, but seriously, I know that people would definitely be interested in that, so it's good to spread the word that we are available to do that. We just need someone interested and serious about funding this, but we would definitely be very happy to do it. So yeah. Okay. Cool. Thank you for a great talk. And that's the end of the question. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Okay, so let's start.", "tokens": [1033, 11, 370, 718, 311, 722, 13], "temperature": 0.0, "avg_logprob": -0.28788873423700745, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.1837535947561264}, {"id": 1, "seek": 0, "start": 7.0, "end": 12.96, "text": " So hi everyone, I'm going to be talking about advanced camera support on all-winner SOCs", "tokens": [407, 4879, 1518, 11, 286, 478, 516, 281, 312, 1417, 466, 7339, 2799, 1406, 322, 439, 12, 9136, 1193, 10621, 33290], "temperature": 0.0, "avg_logprob": -0.28788873423700745, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.1837535947561264}, {"id": 2, "seek": 0, "start": 12.96, "end": 13.96, "text": " today.", "tokens": [965, 13], "temperature": 0.0, "avg_logprob": -0.28788873423700745, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.1837535947561264}, {"id": 3, "seek": 0, "start": 13.96, "end": 20.76, "text": " So the topic is quite similar to the previous one in that we are also going to talk about", "tokens": [407, 264, 4829, 307, 1596, 2531, 281, 264, 3894, 472, 294, 300, 321, 366, 611, 516, 281, 751, 466], "temperature": 0.0, "avg_logprob": -0.28788873423700745, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.1837535947561264}, {"id": 4, "seek": 0, "start": 20.76, "end": 24.6, "text": " sensors that need particular care and processing.", "tokens": [14840, 300, 643, 1729, 1127, 293, 9007, 13], "temperature": 0.0, "avg_logprob": -0.28788873423700745, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.1837535947561264}, {"id": 5, "seek": 2460, "start": 24.6, "end": 29.96, "text": " So unfortunately I will be maybe explaining some of the things that were said by Kirin", "tokens": [407, 7015, 286, 486, 312, 1310, 13468, 512, 295, 264, 721, 300, 645, 848, 538, 11305, 259], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 6, "seek": 2460, "start": 29.96, "end": 35.28, "text": " just earlier, so sorry about that for the people who just attended the previous talk.", "tokens": [445, 3071, 11, 370, 2597, 466, 300, 337, 264, 561, 567, 445, 15990, 264, 3894, 751, 13], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 7, "seek": 2460, "start": 35.28, "end": 39.64, "text": " But hopefully you'll also learn a thing or two in addition.", "tokens": [583, 4696, 291, 603, 611, 1466, 257, 551, 420, 732, 294, 4500, 13], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 8, "seek": 2460, "start": 39.64, "end": 45.56, "text": " So I'm Paul, I work at a company called Butlin, we are an embedded Linux engineering company,", "tokens": [407, 286, 478, 4552, 11, 286, 589, 412, 257, 2237, 1219, 583, 5045, 11, 321, 366, 364, 16741, 18734, 7043, 2237, 11], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 9, "seek": 2460, "start": 45.56, "end": 47.6, "text": " so we do services around that.", "tokens": [370, 321, 360, 3328, 926, 300, 13], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 10, "seek": 2460, "start": 47.6, "end": 52.64, "text": " And I have contributed a number of things, especially to the Linux kernel, so I worked", "tokens": [400, 286, 362, 18434, 257, 1230, 295, 721, 11, 2318, 281, 264, 18734, 28256, 11, 370, 286, 2732], "temperature": 0.0, "avg_logprob": -0.15302792301884405, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.273654899909161e-05}, {"id": 11, "seek": 5264, "start": 52.64, "end": 58.96, "text": " on the Sidrus VPU driver, a little bit of DRM things on the all-winner side, but also", "tokens": [322, 264, 19797, 13783, 691, 8115, 6787, 11, 257, 707, 857, 295, 12118, 44, 721, 322, 264, 439, 12, 9136, 1193, 1252, 11, 457, 611], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 12, "seek": 5264, "start": 58.96, "end": 59.96, "text": " others.", "tokens": [2357, 13], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 13, "seek": 5264, "start": 59.96, "end": 66.08, "text": " And I made a training that we give about displaying and rendering.", "tokens": [400, 286, 1027, 257, 3097, 300, 321, 976, 466, 36834, 293, 22407, 13], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 14, "seek": 5264, "start": 66.08, "end": 73.52, "text": " But today I am here to tell you about the camera support for all-winner SOCs using mainline", "tokens": [583, 965, 286, 669, 510, 281, 980, 291, 466, 264, 2799, 1406, 337, 439, 12, 9136, 1193, 10621, 33290, 1228, 2135, 1889], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 15, "seek": 5264, "start": 73.52, "end": 74.52, "text": " Linux.", "tokens": [18734, 13], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 16, "seek": 5264, "start": 74.52, "end": 80.96000000000001, "text": " So we are going to talk first about general things related to image capture technology", "tokens": [407, 321, 366, 516, 281, 751, 700, 466, 2674, 721, 4077, 281, 3256, 7983, 2899], "temperature": 0.0, "avg_logprob": -0.15626445893318422, "compression_ratio": 1.5309734513274336, "no_speech_prob": 7.111555169103667e-05}, {"id": 17, "seek": 8096, "start": 80.96, "end": 84.91999999999999, "text": " and just complex camera pipelines in general.", "tokens": [293, 445, 3997, 2799, 40168, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.1412669328542856, "compression_ratio": 1.6097560975609757, "no_speech_prob": 2.8827964342781343e-05}, {"id": 18, "seek": 8096, "start": 84.91999999999999, "end": 89.08, "text": " So let's start with kind of an overview of a typical capture chain.", "tokens": [407, 718, 311, 722, 365, 733, 295, 364, 12492, 295, 257, 7476, 7983, 5021, 13], "temperature": 0.0, "avg_logprob": -0.1412669328542856, "compression_ratio": 1.6097560975609757, "no_speech_prob": 2.8827964342781343e-05}, {"id": 19, "seek": 8096, "start": 89.08, "end": 95.11999999999999, "text": " So we start with the optics, of course, where the light is kind of focused on a particular", "tokens": [407, 321, 722, 365, 264, 42599, 11, 295, 1164, 11, 689, 264, 1442, 307, 733, 295, 5178, 322, 257, 1729], "temperature": 0.0, "avg_logprob": -0.1412669328542856, "compression_ratio": 1.6097560975609757, "no_speech_prob": 2.8827964342781343e-05}, {"id": 20, "seek": 8096, "start": 95.11999999999999, "end": 98.72, "text": " area where we have our sensor.", "tokens": [1859, 689, 321, 362, 527, 10200, 13], "temperature": 0.0, "avg_logprob": -0.1412669328542856, "compression_ratio": 1.6097560975609757, "no_speech_prob": 2.8827964342781343e-05}, {"id": 21, "seek": 8096, "start": 98.72, "end": 104.36, "text": " So the optics are usually passive from a software perspective, but not necessarily because you", "tokens": [407, 264, 42599, 366, 2673, 14975, 490, 257, 4722, 4585, 11, 457, 406, 4725, 570, 291], "temperature": 0.0, "avg_logprob": -0.1412669328542856, "compression_ratio": 1.6097560975609757, "no_speech_prob": 2.8827964342781343e-05}, {"id": 22, "seek": 10436, "start": 104.36, "end": 111.48, "text": " can have coil drivers to change the focus and things like that, so it's not always a", "tokens": [393, 362, 22225, 11590, 281, 1319, 264, 1879, 293, 721, 411, 300, 11, 370, 309, 311, 406, 1009, 257], "temperature": 0.0, "avg_logprob": -0.14294114223746365, "compression_ratio": 1.6168224299065421, "no_speech_prob": 7.76164870330831e-06}, {"id": 23, "seek": 10436, "start": 111.48, "end": 113.56, "text": " passive thing.", "tokens": [14975, 551, 13], "temperature": 0.0, "avg_logprob": -0.14294114223746365, "compression_ratio": 1.6168224299065421, "no_speech_prob": 7.76164870330831e-06}, {"id": 24, "seek": 10436, "start": 113.56, "end": 121.03999999999999, "text": " So after that you have the sensor, which actually samples the light and produces data from that.", "tokens": [407, 934, 300, 291, 362, 264, 10200, 11, 597, 767, 10938, 264, 1442, 293, 14725, 1412, 490, 300, 13], "temperature": 0.0, "avg_logprob": -0.14294114223746365, "compression_ratio": 1.6168224299065421, "no_speech_prob": 7.76164870330831e-06}, {"id": 25, "seek": 10436, "start": 121.03999999999999, "end": 128.04, "text": " And we want to transmit that data to something else, typically like your CPU, where you can", "tokens": [400, 321, 528, 281, 17831, 300, 1412, 281, 746, 1646, 11, 5850, 411, 428, 13199, 11, 689, 291, 393], "temperature": 0.0, "avg_logprob": -0.14294114223746365, "compression_ratio": 1.6168224299065421, "no_speech_prob": 7.76164870330831e-06}, {"id": 26, "seek": 10436, "start": 128.04, "end": 132.2, "text": " do something with the data, like display it or encode it.", "tokens": [360, 746, 365, 264, 1412, 11, 411, 4674, 309, 420, 2058, 1429, 309, 13], "temperature": 0.0, "avg_logprob": -0.14294114223746365, "compression_ratio": 1.6168224299065421, "no_speech_prob": 7.76164870330831e-06}, {"id": 27, "seek": 13220, "start": 132.2, "end": 138.92, "text": " But in between the acquisition and actually receiving the data, we need to do some processing.", "tokens": [583, 294, 1296, 264, 21668, 293, 767, 10040, 264, 1412, 11, 321, 643, 281, 360, 512, 9007, 13], "temperature": 0.0, "avg_logprob": -0.1083153854181737, "compression_ratio": 1.6325581395348838, "no_speech_prob": 8.38981031847652e-06}, {"id": 28, "seek": 13220, "start": 138.92, "end": 143.67999999999998, "text": " And that processing can sometimes happen on the sensor itself, in which case we talk about", "tokens": [400, 300, 9007, 393, 2171, 1051, 322, 264, 10200, 2564, 11, 294, 597, 1389, 321, 751, 466], "temperature": 0.0, "avg_logprob": -0.1083153854181737, "compression_ratio": 1.6325581395348838, "no_speech_prob": 8.38981031847652e-06}, {"id": 29, "seek": 13220, "start": 143.67999999999998, "end": 149.04, "text": " some embedded processing, or it can be on the other side of the interface.", "tokens": [512, 16741, 9007, 11, 420, 309, 393, 312, 322, 264, 661, 1252, 295, 264, 9226, 13], "temperature": 0.0, "avg_logprob": -0.1083153854181737, "compression_ratio": 1.6325581395348838, "no_speech_prob": 8.38981031847652e-06}, {"id": 30, "seek": 13220, "start": 149.04, "end": 158.12, "text": " So on the side that receives the data, typically your SOC or your CPU package or whatever.", "tokens": [407, 322, 264, 1252, 300, 20717, 264, 1412, 11, 5850, 428, 10621, 34, 420, 428, 13199, 7372, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.1083153854181737, "compression_ratio": 1.6325581395348838, "no_speech_prob": 8.38981031847652e-06}, {"id": 31, "seek": 15812, "start": 158.12, "end": 164.48000000000002, "text": " So this processing step is really the one that is necessary to produce good looking", "tokens": [407, 341, 9007, 1823, 307, 534, 264, 472, 300, 307, 4818, 281, 5258, 665, 1237], "temperature": 0.0, "avg_logprob": -0.14202034264280086, "compression_ratio": 1.434782608695652, "no_speech_prob": 5.334909019438783e-06}, {"id": 32, "seek": 15812, "start": 164.48000000000002, "end": 172.6, "text": " pictures from, let's say, just samples coming out of an ADC.", "tokens": [5242, 490, 11, 718, 311, 584, 11, 445, 10938, 1348, 484, 295, 364, 9135, 34, 13], "temperature": 0.0, "avg_logprob": -0.14202034264280086, "compression_ratio": 1.434782608695652, "no_speech_prob": 5.334909019438783e-06}, {"id": 33, "seek": 15812, "start": 172.6, "end": 181.56, "text": " So typically what we call a row or barrier sensor will produce not pixels, but data in", "tokens": [407, 5850, 437, 321, 818, 257, 5386, 420, 13357, 10200, 486, 5258, 406, 18668, 11, 457, 1412, 294], "temperature": 0.0, "avg_logprob": -0.14202034264280086, "compression_ratio": 1.434782608695652, "no_speech_prob": 5.334909019438783e-06}, {"id": 34, "seek": 18156, "start": 181.56, "end": 188.4, "text": " a biopattern, which is a grid of red, green and blue filters that is applied on the sensor.", "tokens": [257, 3228, 404, 1161, 77, 11, 597, 307, 257, 10748, 295, 2182, 11, 3092, 293, 3344, 15995, 300, 307, 6456, 322, 264, 10200, 13], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 35, "seek": 18156, "start": 188.4, "end": 193.4, "text": " That gives you information for each of these different channels.", "tokens": [663, 2709, 291, 1589, 337, 1184, 295, 613, 819, 9235, 13], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 36, "seek": 18156, "start": 193.4, "end": 197.28, "text": " And we kind of need to translate that to pixels.", "tokens": [400, 321, 733, 295, 643, 281, 13799, 300, 281, 18668, 13], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 37, "seek": 18156, "start": 197.28, "end": 201.48000000000002, "text": " So this is called debiring, and this is how we get pixels.", "tokens": [407, 341, 307, 1219, 3001, 5057, 11, 293, 341, 307, 577, 321, 483, 18668, 13], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 38, "seek": 18156, "start": 201.48000000000002, "end": 203.52, "text": " But these pixels typically look very bad.", "tokens": [583, 613, 18668, 5850, 574, 588, 1578, 13], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 39, "seek": 18156, "start": 203.52, "end": 209.48000000000002, "text": " So you need to apply a number of processing, number of operations and enhancements to have", "tokens": [407, 291, 643, 281, 3079, 257, 1230, 295, 9007, 11, 1230, 295, 7705, 293, 11985, 1117, 281, 362], "temperature": 0.0, "avg_logprob": -0.12782905125381924, "compression_ratio": 1.6610878661087867, "no_speech_prob": 2.7457097530714236e-05}, {"id": 40, "seek": 20948, "start": 209.48, "end": 214.2, "text": " something that looks like a nice picture.", "tokens": [746, 300, 1542, 411, 257, 1481, 3036, 13], "temperature": 0.0, "avg_logprob": -0.16433298731424723, "compression_ratio": 1.5480769230769231, "no_speech_prob": 2.1418243704829365e-05}, {"id": 41, "seek": 20948, "start": 214.2, "end": 217.6, "text": " So a number of things need to be done.", "tokens": [407, 257, 1230, 295, 721, 643, 281, 312, 1096, 13], "temperature": 0.0, "avg_logprob": -0.16433298731424723, "compression_ratio": 1.5480769230769231, "no_speech_prob": 2.1418243704829365e-05}, {"id": 42, "seek": 20948, "start": 217.6, "end": 223.04, "text": " For example, the brightness that you get from your ADC is linear, and we want to apply some", "tokens": [1171, 1365, 11, 264, 21367, 300, 291, 483, 490, 428, 9135, 34, 307, 8213, 11, 293, 321, 528, 281, 3079, 512], "temperature": 0.0, "avg_logprob": -0.16433298731424723, "compression_ratio": 1.5480769230769231, "no_speech_prob": 2.1418243704829365e-05}, {"id": 43, "seek": 20948, "start": 223.04, "end": 227.39999999999998, "text": " gamma curves to that to make it look nice to the human eye.", "tokens": [15546, 19490, 281, 300, 281, 652, 309, 574, 1481, 281, 264, 1952, 3313, 13], "temperature": 0.0, "avg_logprob": -0.16433298731424723, "compression_ratio": 1.5480769230769231, "no_speech_prob": 2.1418243704829365e-05}, {"id": 44, "seek": 20948, "start": 227.39999999999998, "end": 234.88, "text": " Typically, there's some dark level current that we have to subtract, for example, because", "tokens": [23129, 11, 456, 311, 512, 2877, 1496, 2190, 300, 321, 362, 281, 16390, 11, 337, 1365, 11, 570], "temperature": 0.0, "avg_logprob": -0.16433298731424723, "compression_ratio": 1.5480769230769231, "no_speech_prob": 2.1418243704829365e-05}, {"id": 45, "seek": 23488, "start": 234.88, "end": 241.76, "text": " the zero value that you get from the sensor is not necessarily the, well, the darkest", "tokens": [264, 4018, 2158, 300, 291, 483, 490, 264, 10200, 307, 406, 4725, 264, 11, 731, 11, 264, 33460], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 46, "seek": 23488, "start": 241.76, "end": 245.12, "text": " value that you get from the sensor is not necessarily zero, so you might need to subtract", "tokens": [2158, 300, 291, 483, 490, 264, 10200, 307, 406, 4725, 4018, 11, 370, 291, 1062, 643, 281, 16390], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 47, "seek": 23488, "start": 245.12, "end": 248.16, "text": " an offset, things like that.", "tokens": [364, 18687, 11, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 48, "seek": 23488, "start": 248.16, "end": 252.88, "text": " There's usually a lot of noise, and the colors will be off, so you will need to do some white", "tokens": [821, 311, 2673, 257, 688, 295, 5658, 11, 293, 264, 4577, 486, 312, 766, 11, 370, 291, 486, 643, 281, 360, 512, 2418], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 49, "seek": 23488, "start": 252.88, "end": 254.92, "text": " balancing, things like that.", "tokens": [22495, 11, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 50, "seek": 23488, "start": 254.92, "end": 259.2, "text": " So all of these different steps take place in what we call the ISP, the Image Signal", "tokens": [407, 439, 295, 613, 819, 4439, 747, 1081, 294, 437, 321, 818, 264, 6205, 47, 11, 264, 29903, 43414], "temperature": 0.0, "avg_logprob": -0.13415055047898067, "compression_ratio": 1.8475336322869955, "no_speech_prob": 2.4262908482342027e-05}, {"id": 51, "seek": 25920, "start": 259.2, "end": 265.84, "text": " Processor, and there's basically three domains in which we apply these enhancements.", "tokens": [1705, 25432, 11, 293, 456, 311, 1936, 1045, 25514, 294, 597, 321, 3079, 613, 11985, 1117, 13], "temperature": 0.0, "avg_logprob": -0.10872712919983683, "compression_ratio": 1.655367231638418, "no_speech_prob": 2.7487276383908466e-05}, {"id": 52, "seek": 25920, "start": 265.84, "end": 273.56, "text": " The first one is the Biodomain, so that's really the first step that we apply to the", "tokens": [440, 700, 472, 307, 264, 13007, 378, 298, 491, 11, 370, 300, 311, 534, 264, 700, 1823, 300, 321, 3079, 281, 264], "temperature": 0.0, "avg_logprob": -0.10872712919983683, "compression_ratio": 1.655367231638418, "no_speech_prob": 2.7487276383908466e-05}, {"id": 53, "seek": 25920, "start": 273.56, "end": 277.28, "text": " data coming from the raw sensor.", "tokens": [1412, 1348, 490, 264, 8936, 10200, 13], "temperature": 0.0, "avg_logprob": -0.10872712919983683, "compression_ratio": 1.655367231638418, "no_speech_prob": 2.7487276383908466e-05}, {"id": 54, "seek": 25920, "start": 277.28, "end": 282.4, "text": " At the end of that step, we get some RGB data that we also want to enhance, and at the end", "tokens": [1711, 264, 917, 295, 300, 1823, 11, 321, 483, 512, 31231, 1412, 300, 321, 611, 528, 281, 11985, 11, 293, 412, 264, 917], "temperature": 0.0, "avg_logprob": -0.10872712919983683, "compression_ratio": 1.655367231638418, "no_speech_prob": 2.7487276383908466e-05}, {"id": 55, "seek": 28240, "start": 282.4, "end": 290.79999999999995, "text": " of that, we typically convert it to YUV representation, and then we can also apply some enhancements", "tokens": [295, 300, 11, 321, 5850, 7620, 309, 281, 33471, 53, 10290, 11, 293, 550, 321, 393, 611, 3079, 512, 11985, 1117], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 56, "seek": 28240, "start": 290.79999999999995, "end": 297.15999999999997, "text": " to that data, and at the end, we get a YUV picture that is, like, ready to be displayed", "tokens": [281, 300, 1412, 11, 293, 412, 264, 917, 11, 321, 483, 257, 33471, 53, 3036, 300, 307, 11, 411, 11, 1919, 281, 312, 16372], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 57, "seek": 28240, "start": 297.15999999999997, "end": 299.76, "text": " and encoded, for example.", "tokens": [293, 2058, 12340, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 58, "seek": 28240, "start": 299.76, "end": 305.67999999999995, "text": " So yeah, that's kind of a list of the different enhancements that we apply, so I mentioned", "tokens": [407, 1338, 11, 300, 311, 733, 295, 257, 1329, 295, 264, 819, 11985, 1117, 300, 321, 3079, 11, 370, 286, 2835], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 59, "seek": 28240, "start": 305.67999999999995, "end": 306.67999999999995, "text": " a number of them already.", "tokens": [257, 1230, 295, 552, 1217, 13], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 60, "seek": 28240, "start": 306.67999999999995, "end": 310.23999999999995, "text": " I'm not going to go through the list, but you get some idea that there is really a", "tokens": [286, 478, 406, 516, 281, 352, 807, 264, 1329, 11, 457, 291, 483, 512, 1558, 300, 456, 307, 534, 257], "temperature": 0.0, "avg_logprob": -0.1268667879357802, "compression_ratio": 1.6626506024096386, "no_speech_prob": 6.848222710686969e-06}, {"id": 61, "seek": 31024, "start": 310.24, "end": 318.0, "text": " lot of things to be done here, and it actually takes quite some processing power to do that.", "tokens": [688, 295, 721, 281, 312, 1096, 510, 11, 293, 309, 767, 2516, 1596, 512, 9007, 1347, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 62, "seek": 31024, "start": 318.0, "end": 322.52, "text": " So that's why typically we consider that it's not something you can do in real time with", "tokens": [407, 300, 311, 983, 5850, 321, 1949, 300, 309, 311, 406, 746, 291, 393, 360, 294, 957, 565, 365], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 63, "seek": 31024, "start": 322.52, "end": 328.2, "text": " a CPU or it's going to fully load your CPU just to produce pictures and let alone encode", "tokens": [257, 13199, 420, 309, 311, 516, 281, 4498, 3677, 428, 13199, 445, 281, 5258, 5242, 293, 718, 3312, 2058, 1429], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 64, "seek": 31024, "start": 328.2, "end": 329.94, "text": " them and things like that.", "tokens": [552, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 65, "seek": 31024, "start": 329.94, "end": 332.56, "text": " So lots of things to do.", "tokens": [407, 3195, 295, 721, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 66, "seek": 31024, "start": 332.56, "end": 336.6, "text": " That's really the base that you need to have something that looks right.", "tokens": [663, 311, 534, 264, 3096, 300, 291, 643, 281, 362, 746, 300, 1542, 558, 13], "temperature": 0.0, "avg_logprob": -0.13356833882851177, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.541365029173903e-05}, {"id": 67, "seek": 33660, "start": 336.6, "end": 342.64000000000004, "text": " There's more advanced stuff that you can have in addition, like the lens shading correction,", "tokens": [821, 311, 544, 7339, 1507, 300, 291, 393, 362, 294, 4500, 11, 411, 264, 6765, 30556, 19984, 11], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 68, "seek": 33660, "start": 342.64000000000004, "end": 346.52000000000004, "text": " so it's about the fact that the lenses will typically be darker on the edges than they", "tokens": [370, 309, 311, 466, 264, 1186, 300, 264, 18059, 486, 5850, 312, 12741, 322, 264, 8819, 813, 436], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 69, "seek": 33660, "start": 346.52000000000004, "end": 350.56, "text": " are at the center, so you want to kind of even that out.", "tokens": [366, 412, 264, 3056, 11, 370, 291, 528, 281, 733, 295, 754, 300, 484, 13], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 70, "seek": 33660, "start": 350.56, "end": 354.20000000000005, "text": " That's also an operation to do.", "tokens": [663, 311, 611, 364, 6916, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 71, "seek": 33660, "start": 354.20000000000005, "end": 361.40000000000003, "text": " Dewarping, that's when you have, like, a very short focal, and things look, well, the geometry", "tokens": [1346, 6925, 3381, 11, 300, 311, 562, 291, 362, 11, 411, 11, 257, 588, 2099, 26592, 11, 293, 721, 574, 11, 731, 11, 264, 18426], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 72, "seek": 33660, "start": 361.40000000000003, "end": 363.8, "text": " looks distorted, so you need to kind of readapt that.", "tokens": [1542, 33431, 11, 370, 291, 643, 281, 733, 295, 1401, 2796, 300, 13], "temperature": 0.0, "avg_logprob": -0.1746124233211483, "compression_ratio": 1.688259109311741, "no_speech_prob": 1.220940612256527e-05}, {"id": 73, "seek": 36380, "start": 363.8, "end": 367.56, "text": " That's also very intensive in terms of calculation.", "tokens": [663, 311, 611, 588, 18957, 294, 2115, 295, 17108, 13], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 74, "seek": 36380, "start": 367.56, "end": 373.0, "text": " Stabilization can also be involved if you have, like, a very shaky footage, especially", "tokens": [745, 5177, 2144, 393, 611, 312, 3288, 498, 291, 362, 11, 411, 11, 257, 588, 44785, 9556, 11, 2318], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 75, "seek": 36380, "start": 373.0, "end": 379.08000000000004, "text": " from, like, a smartphone or something like that, so you want to also apply a stabilization", "tokens": [490, 11, 411, 11, 257, 13307, 420, 746, 411, 300, 11, 370, 291, 528, 281, 611, 3079, 257, 35476], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 76, "seek": 36380, "start": 379.08000000000004, "end": 383.44, "text": " step to your picture, and then, finally, you might also want to apply some style to your", "tokens": [1823, 281, 428, 3036, 11, 293, 550, 11, 2721, 11, 291, 1062, 611, 528, 281, 3079, 512, 3758, 281, 428], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 77, "seek": 36380, "start": 383.44, "end": 389.44, "text": " picture, so that will typically be a color lookup table where you can decide that you", "tokens": [3036, 11, 370, 300, 486, 5850, 312, 257, 2017, 574, 1010, 3199, 689, 291, 393, 4536, 300, 291], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 78, "seek": 36380, "start": 389.44, "end": 393.12, "text": " want to make it look, I know, like, CPiaton or something like that.", "tokens": [528, 281, 652, 309, 574, 11, 286, 458, 11, 411, 11, 22431, 72, 25781, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1527966250892447, "compression_ratio": 1.8153846153846154, "no_speech_prob": 2.7891168429050595e-05}, {"id": 79, "seek": 39312, "start": 393.12, "end": 396.76, "text": " This is also some processing that you will need to apply.", "tokens": [639, 307, 611, 512, 9007, 300, 291, 486, 643, 281, 3079, 13], "temperature": 0.0, "avg_logprob": -0.12460404131785933, "compression_ratio": 1.6009852216748768, "no_speech_prob": 1.0776720046123955e-05}, {"id": 80, "seek": 39312, "start": 396.76, "end": 405.28000000000003, "text": " So I mentioned that there's basically two types of ways to deal with this operation.", "tokens": [407, 286, 2835, 300, 456, 311, 1936, 732, 3467, 295, 2098, 281, 2028, 365, 341, 6916, 13], "temperature": 0.0, "avg_logprob": -0.12460404131785933, "compression_ratio": 1.6009852216748768, "no_speech_prob": 1.0776720046123955e-05}, {"id": 81, "seek": 39312, "start": 405.28000000000003, "end": 411.64, "text": " The first one is to have the ISP in the sensor, in which case it's typically quite simple,", "tokens": [440, 700, 472, 307, 281, 362, 264, 6205, 47, 294, 264, 10200, 11, 294, 597, 1389, 309, 311, 5850, 1596, 2199, 11], "temperature": 0.0, "avg_logprob": -0.12460404131785933, "compression_ratio": 1.6009852216748768, "no_speech_prob": 1.0776720046123955e-05}, {"id": 82, "seek": 39312, "start": 411.64, "end": 418.28000000000003, "text": " and when it's in the sensor, you get the data directly ready from the sensor, but when it's", "tokens": [293, 562, 309, 311, 294, 264, 10200, 11, 291, 483, 264, 1412, 3838, 1919, 490, 264, 10200, 11, 457, 562, 309, 311], "temperature": 0.0, "avg_logprob": -0.12460404131785933, "compression_ratio": 1.6009852216748768, "no_speech_prob": 1.0776720046123955e-05}, {"id": 83, "seek": 41828, "start": 418.28, "end": 423.23999999999995, "text": " not, you get just the raw Bayer data, and you need to do all of these different enhancement", "tokens": [406, 11, 291, 483, 445, 264, 8936, 7840, 260, 1412, 11, 293, 291, 643, 281, 360, 439, 295, 613, 819, 40776], "temperature": 0.0, "avg_logprob": -0.12525428972746197, "compression_ratio": 1.5748987854251013, "no_speech_prob": 4.1287788917543367e-05}, {"id": 84, "seek": 41828, "start": 423.23999999999995, "end": 430.52, "text": " steps on some system on a chip ISP, so that's typically a hardware block that is dedicated", "tokens": [4439, 322, 512, 1185, 322, 257, 11409, 6205, 47, 11, 370, 300, 311, 5850, 257, 8837, 3461, 300, 307, 8374], "temperature": 0.0, "avg_logprob": -0.12525428972746197, "compression_ratio": 1.5748987854251013, "no_speech_prob": 4.1287788917543367e-05}, {"id": 85, "seek": 41828, "start": 430.52, "end": 433.23999999999995, "text": " for the purpose in your SoC.", "tokens": [337, 264, 4334, 294, 428, 407, 34, 13], "temperature": 0.0, "avg_logprob": -0.12525428972746197, "compression_ratio": 1.5748987854251013, "no_speech_prob": 4.1287788917543367e-05}, {"id": 86, "seek": 41828, "start": 433.23999999999995, "end": 441.28, "text": " So nowadays, many multimedia-oriented SoCs do have such blocks, and in order to properly", "tokens": [407, 13434, 11, 867, 49202, 12, 27414, 407, 33290, 360, 362, 1270, 8474, 11, 293, 294, 1668, 281, 6108], "temperature": 0.0, "avg_logprob": -0.12525428972746197, "compression_ratio": 1.5748987854251013, "no_speech_prob": 4.1287788917543367e-05}, {"id": 87, "seek": 41828, "start": 441.28, "end": 445.91999999999996, "text": " configure that, you might need some specific calibration data that really depends on the", "tokens": [22162, 300, 11, 291, 1062, 643, 512, 2685, 38732, 1412, 300, 534, 5946, 322, 264], "temperature": 0.0, "avg_logprob": -0.12525428972746197, "compression_ratio": 1.5748987854251013, "no_speech_prob": 4.1287788917543367e-05}, {"id": 88, "seek": 44592, "start": 445.92, "end": 451.84000000000003, "text": " sensor, sometimes on the environment that is used, things like that, so it's kind of", "tokens": [10200, 11, 2171, 322, 264, 2823, 300, 307, 1143, 11, 721, 411, 300, 11, 370, 309, 311, 733, 295], "temperature": 0.0, "avg_logprob": -0.12004864600396925, "compression_ratio": 1.7109004739336493, "no_speech_prob": 9.218668310495559e-06}, {"id": 89, "seek": 44592, "start": 451.84000000000003, "end": 455.32, "text": " highly specific to the setup that you have.", "tokens": [5405, 2685, 281, 264, 8657, 300, 291, 362, 13], "temperature": 0.0, "avg_logprob": -0.12004864600396925, "compression_ratio": 1.7109004739336493, "no_speech_prob": 9.218668310495559e-06}, {"id": 90, "seek": 44592, "start": 455.32, "end": 459.88, "text": " So it's kind of just an illustration of the different steps, so that's the kind of picture", "tokens": [407, 309, 311, 733, 295, 445, 364, 22645, 295, 264, 819, 4439, 11, 370, 300, 311, 264, 733, 295, 3036], "temperature": 0.0, "avg_logprob": -0.12004864600396925, "compression_ratio": 1.7109004739336493, "no_speech_prob": 9.218668310495559e-06}, {"id": 91, "seek": 44592, "start": 459.88, "end": 467.28000000000003, "text": " that you would get as a raw thing from the sensor, and the steps you might apply to have", "tokens": [300, 291, 576, 483, 382, 257, 8936, 551, 490, 264, 10200, 11, 293, 264, 4439, 291, 1062, 3079, 281, 362], "temperature": 0.0, "avg_logprob": -0.12004864600396925, "compression_ratio": 1.7109004739336493, "no_speech_prob": 9.218668310495559e-06}, {"id": 92, "seek": 44592, "start": 467.28000000000003, "end": 472.92, "text": " something in YUV at the end that looks kind of okay.", "tokens": [746, 294, 33471, 53, 412, 264, 917, 300, 1542, 733, 295, 1392, 13], "temperature": 0.0, "avg_logprob": -0.12004864600396925, "compression_ratio": 1.7109004739336493, "no_speech_prob": 9.218668310495559e-06}, {"id": 93, "seek": 47292, "start": 472.92, "end": 479.8, "text": " But it's not just about statically configuring an image processor to produce something good.", "tokens": [583, 309, 311, 406, 445, 466, 2219, 984, 6662, 1345, 364, 3256, 15321, 281, 5258, 746, 665, 13], "temperature": 0.0, "avg_logprob": -0.10385075021297374, "compression_ratio": 1.7068273092369477, "no_speech_prob": 2.620362829475198e-05}, {"id": 94, "seek": 47292, "start": 479.8, "end": 485.52000000000004, "text": " Some parameters actually depend on the thing that you are shooting, so there's basically", "tokens": [2188, 9834, 767, 5672, 322, 264, 551, 300, 291, 366, 5942, 11, 370, 456, 311, 1936], "temperature": 0.0, "avg_logprob": -0.10385075021297374, "compression_ratio": 1.7068273092369477, "no_speech_prob": 2.620362829475198e-05}, {"id": 95, "seek": 47292, "start": 485.52000000000004, "end": 489.76, "text": " three things that you need to adjust depending on the situation.", "tokens": [1045, 721, 300, 291, 643, 281, 4369, 5413, 322, 264, 2590, 13], "temperature": 0.0, "avg_logprob": -0.10385075021297374, "compression_ratio": 1.7068273092369477, "no_speech_prob": 2.620362829475198e-05}, {"id": 96, "seek": 47292, "start": 489.76, "end": 495.8, "text": " The first one is focus, so of course that implies that you have control over some coil", "tokens": [440, 700, 472, 307, 1879, 11, 370, 295, 1164, 300, 18779, 300, 291, 362, 1969, 670, 512, 22225], "temperature": 0.0, "avg_logprob": -0.10385075021297374, "compression_ratio": 1.7068273092369477, "no_speech_prob": 2.620362829475198e-05}, {"id": 97, "seek": 47292, "start": 495.8, "end": 500.88, "text": " to change the focus of the lens, but obviously your picture is going to look very different", "tokens": [281, 1319, 264, 1879, 295, 264, 6765, 11, 457, 2745, 428, 3036, 307, 516, 281, 574, 588, 819], "temperature": 0.0, "avg_logprob": -0.10385075021297374, "compression_ratio": 1.7068273092369477, "no_speech_prob": 2.620362829475198e-05}, {"id": 98, "seek": 50088, "start": 500.88, "end": 505.15999999999997, "text": " if it's out of focus or if it's sharply focused, so that's one of the things that the ISP", "tokens": [498, 309, 311, 484, 295, 1879, 420, 498, 309, 311, 42893, 5178, 11, 370, 300, 311, 472, 295, 264, 721, 300, 264, 6205, 47], "temperature": 0.0, "avg_logprob": -0.1066548000682484, "compression_ratio": 1.7254901960784315, "no_speech_prob": 3.064924749196507e-05}, {"id": 99, "seek": 50088, "start": 505.15999999999997, "end": 512.72, "text": " is also involved with to basically tell you whether an image is sharp or not.", "tokens": [307, 611, 3288, 365, 281, 1936, 980, 291, 1968, 364, 3256, 307, 8199, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.1066548000682484, "compression_ratio": 1.7254901960784315, "no_speech_prob": 3.064924749196507e-05}, {"id": 100, "seek": 50088, "start": 512.72, "end": 518.4399999999999, "text": " There is white balance, which highly depends on the source light that you are using, especially", "tokens": [821, 307, 2418, 4772, 11, 597, 5405, 5946, 322, 264, 4009, 1442, 300, 291, 366, 1228, 11, 2318], "temperature": 0.0, "avg_logprob": -0.1066548000682484, "compression_ratio": 1.7254901960784315, "no_speech_prob": 3.064924749196507e-05}, {"id": 101, "seek": 50088, "start": 518.4399999999999, "end": 522.68, "text": " the color temperature of that light, so if you are in broad daylight, it's not the same", "tokens": [264, 2017, 4292, 295, 300, 1442, 11, 370, 498, 291, 366, 294, 4152, 29964, 11, 309, 311, 406, 264, 912], "temperature": 0.0, "avg_logprob": -0.1066548000682484, "compression_ratio": 1.7254901960784315, "no_speech_prob": 3.064924749196507e-05}, {"id": 102, "seek": 50088, "start": 522.68, "end": 529.24, "text": " as being in a room with some particular type of lighting, so it needs to adjust to that.", "tokens": [382, 885, 294, 257, 1808, 365, 512, 1729, 2010, 295, 9577, 11, 370, 309, 2203, 281, 4369, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.1066548000682484, "compression_ratio": 1.7254901960784315, "no_speech_prob": 3.064924749196507e-05}, {"id": 103, "seek": 52924, "start": 529.24, "end": 533.28, "text": " It will typically have an impact on how the image looks.", "tokens": [467, 486, 5850, 362, 364, 2712, 322, 577, 264, 3256, 1542, 13], "temperature": 0.0, "avg_logprob": -0.09115565649353631, "compression_ratio": 1.728395061728395, "no_speech_prob": 2.4133187253028154e-05}, {"id": 104, "seek": 52924, "start": 533.28, "end": 540.8, "text": " And of course exposure, so what is basically the window of luminescence that your sensor", "tokens": [400, 295, 1164, 10420, 11, 370, 437, 307, 1936, 264, 4910, 295, 24635, 1652, 25434, 300, 428, 10200], "temperature": 0.0, "avg_logprob": -0.09115565649353631, "compression_ratio": 1.728395061728395, "no_speech_prob": 2.4133187253028154e-05}, {"id": 105, "seek": 52924, "start": 540.8, "end": 547.64, "text": " is going to sample, so if you are in a very bright environment, you need to apply a different", "tokens": [307, 516, 281, 6889, 11, 370, 498, 291, 366, 294, 257, 588, 4730, 2823, 11, 291, 643, 281, 3079, 257, 819], "temperature": 0.0, "avg_logprob": -0.09115565649353631, "compression_ratio": 1.728395061728395, "no_speech_prob": 2.4133187253028154e-05}, {"id": 106, "seek": 52924, "start": 547.64, "end": 552.4, "text": " gain than when you are in a very dark environment, so that's also something that needs to be", "tokens": [6052, 813, 562, 291, 366, 294, 257, 588, 2877, 2823, 11, 370, 300, 311, 611, 746, 300, 2203, 281, 312], "temperature": 0.0, "avg_logprob": -0.09115565649353631, "compression_ratio": 1.728395061728395, "no_speech_prob": 2.4133187253028154e-05}, {"id": 107, "seek": 52924, "start": 552.4, "end": 557.16, "text": " adjusted depending on what you are shooting, and this is also something that the ISP is", "tokens": [19871, 5413, 322, 437, 291, 366, 5942, 11, 293, 341, 307, 611, 746, 300, 264, 6205, 47, 307], "temperature": 0.0, "avg_logprob": -0.09115565649353631, "compression_ratio": 1.728395061728395, "no_speech_prob": 2.4133187253028154e-05}, {"id": 108, "seek": 55716, "start": 557.16, "end": 564.8399999999999, "text": " going to help for by telling you basically how bright or how dark the scene is.", "tokens": [516, 281, 854, 337, 538, 3585, 291, 1936, 577, 4730, 420, 577, 2877, 264, 4145, 307, 13], "temperature": 0.0, "avg_logprob": -0.1391587990980882, "compression_ratio": 1.671875, "no_speech_prob": 2.237420267192647e-05}, {"id": 109, "seek": 55716, "start": 564.8399999999999, "end": 572.28, "text": " So yeah, you can adjust those, especially exposure, you can adjust with three parameters,", "tokens": [407, 1338, 11, 291, 393, 4369, 729, 11, 2318, 10420, 11, 291, 393, 4369, 365, 1045, 9834, 11], "temperature": 0.0, "avg_logprob": -0.1391587990980882, "compression_ratio": 1.671875, "no_speech_prob": 2.237420267192647e-05}, {"id": 110, "seek": 55716, "start": 572.28, "end": 575.04, "text": " so if you do like photography, you probably know about that.", "tokens": [370, 498, 291, 360, 411, 13865, 11, 291, 1391, 458, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.1391587990980882, "compression_ratio": 1.671875, "no_speech_prob": 2.237420267192647e-05}, {"id": 111, "seek": 55716, "start": 575.04, "end": 580.3199999999999, "text": " You can change the aperture of the lens, you can change the exposure time, so for how long", "tokens": [509, 393, 1319, 264, 29848, 295, 264, 6765, 11, 291, 393, 1319, 264, 10420, 565, 11, 370, 337, 577, 938], "temperature": 0.0, "avg_logprob": -0.1391587990980882, "compression_ratio": 1.671875, "no_speech_prob": 2.237420267192647e-05}, {"id": 112, "seek": 58032, "start": 580.32, "end": 587.36, "text": " you are waiting for light to come in to charge yourselves that will be read by the ADC, and", "tokens": [291, 366, 3806, 337, 1442, 281, 808, 294, 281, 4602, 14791, 300, 486, 312, 1401, 538, 264, 9135, 34, 11, 293], "temperature": 0.0, "avg_logprob": -0.15781566350146978, "compression_ratio": 1.7228915662650603, "no_speech_prob": 1.220132708112942e-05}, {"id": 113, "seek": 58032, "start": 587.36, "end": 594.1600000000001, "text": " you can increase the gain, which will also increase noise typically.", "tokens": [291, 393, 3488, 264, 6052, 11, 597, 486, 611, 3488, 5658, 5850, 13], "temperature": 0.0, "avg_logprob": -0.15781566350146978, "compression_ratio": 1.7228915662650603, "no_speech_prob": 1.220132708112942e-05}, {"id": 114, "seek": 58032, "start": 594.1600000000001, "end": 598.6800000000001, "text": " So advanced users will typically want to control these parameters manually to have exactly", "tokens": [407, 7339, 5022, 486, 5850, 528, 281, 1969, 613, 9834, 16945, 281, 362, 2293], "temperature": 0.0, "avg_logprob": -0.15781566350146978, "compression_ratio": 1.7228915662650603, "no_speech_prob": 1.220132708112942e-05}, {"id": 115, "seek": 58032, "start": 598.6800000000001, "end": 603.5200000000001, "text": " the picture that they want, but in most cases people just want to take their phone out and", "tokens": [264, 3036, 300, 436, 528, 11, 457, 294, 881, 3331, 561, 445, 528, 281, 747, 641, 2593, 484, 293], "temperature": 0.0, "avg_logprob": -0.15781566350146978, "compression_ratio": 1.7228915662650603, "no_speech_prob": 1.220132708112942e-05}, {"id": 116, "seek": 58032, "start": 603.5200000000001, "end": 609.6800000000001, "text": " shoot at something and just press a button, it just works, so the idea is that we want", "tokens": [3076, 412, 746, 293, 445, 1886, 257, 2960, 11, 309, 445, 1985, 11, 370, 264, 1558, 307, 300, 321, 528], "temperature": 0.0, "avg_logprob": -0.15781566350146978, "compression_ratio": 1.7228915662650603, "no_speech_prob": 1.220132708112942e-05}, {"id": 117, "seek": 60968, "start": 609.68, "end": 614.9599999999999, "text": " all of these different parameters to be adjusted like automatically.", "tokens": [439, 295, 613, 819, 9834, 281, 312, 19871, 411, 6772, 13], "temperature": 0.0, "avg_logprob": -0.17582315351904892, "compression_ratio": 1.558139534883721, "no_speech_prob": 1.642020470171701e-05}, {"id": 118, "seek": 60968, "start": 614.9599999999999, "end": 620.7199999999999, "text": " So that's what we call the 3A, so the 3As are automatic exposition, auto focus and auto", "tokens": [407, 300, 311, 437, 321, 818, 264, 805, 32, 11, 370, 264, 805, 10884, 366, 12509, 1278, 5830, 11, 8399, 1879, 293, 8399], "temperature": 0.0, "avg_logprob": -0.17582315351904892, "compression_ratio": 1.558139534883721, "no_speech_prob": 1.642020470171701e-05}, {"id": 119, "seek": 60968, "start": 620.7199999999999, "end": 629.5999999999999, "text": " white balance, and that is typically again something that will be done with the ISP.", "tokens": [2418, 4772, 11, 293, 300, 307, 5850, 797, 746, 300, 486, 312, 1096, 365, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.17582315351904892, "compression_ratio": 1.558139534883721, "no_speech_prob": 1.642020470171701e-05}, {"id": 120, "seek": 60968, "start": 629.5999999999999, "end": 637.56, "text": " So it works with a feedback loop, okay, there's a number of algorithms in the literature that", "tokens": [407, 309, 1985, 365, 257, 5824, 6367, 11, 1392, 11, 456, 311, 257, 1230, 295, 14642, 294, 264, 10394, 300], "temperature": 0.0, "avg_logprob": -0.17582315351904892, "compression_ratio": 1.558139534883721, "no_speech_prob": 1.642020470171701e-05}, {"id": 121, "seek": 63756, "start": 637.56, "end": 643.64, "text": " exist that are known to be able to do that correctly and efficiently, but the way they", "tokens": [2514, 300, 366, 2570, 281, 312, 1075, 281, 360, 300, 8944, 293, 19621, 11, 457, 264, 636, 436], "temperature": 0.0, "avg_logprob": -0.12872863538337476, "compression_ratio": 1.752988047808765, "no_speech_prob": 1.5923154933261685e-05}, {"id": 122, "seek": 63756, "start": 643.64, "end": 648.64, "text": " are implemented in the actual ISP hardware really depends, of course, on the hardware", "tokens": [366, 12270, 294, 264, 3539, 6205, 47, 8837, 534, 5946, 11, 295, 1164, 11, 322, 264, 8837], "temperature": 0.0, "avg_logprob": -0.12872863538337476, "compression_ratio": 1.752988047808765, "no_speech_prob": 1.5923154933261685e-05}, {"id": 123, "seek": 63756, "start": 648.64, "end": 652.64, "text": " itself and how it was designed and what the like register interface is to configure these", "tokens": [2564, 293, 577, 309, 390, 4761, 293, 437, 264, 411, 7280, 9226, 307, 281, 22162, 613], "temperature": 0.0, "avg_logprob": -0.12872863538337476, "compression_ratio": 1.752988047808765, "no_speech_prob": 1.5923154933261685e-05}, {"id": 124, "seek": 63756, "start": 652.64, "end": 661.16, "text": " different things, and that is often considered to be the secret source of the manufacturer", "tokens": [819, 721, 11, 293, 300, 307, 2049, 4888, 281, 312, 264, 4054, 4009, 295, 264, 18022], "temperature": 0.0, "avg_logprob": -0.12872863538337476, "compression_ratio": 1.752988047808765, "no_speech_prob": 1.5923154933261685e-05}, {"id": 125, "seek": 63756, "start": 661.16, "end": 667.4799999999999, "text": " of the ISPs, so that's the information that is often kind of difficult to get and that", "tokens": [295, 264, 6205, 23043, 11, 370, 300, 311, 264, 1589, 300, 307, 2049, 733, 295, 2252, 281, 483, 293, 300], "temperature": 0.0, "avg_logprob": -0.12872863538337476, "compression_ratio": 1.752988047808765, "no_speech_prob": 1.5923154933261685e-05}, {"id": 126, "seek": 66748, "start": 667.48, "end": 672.72, "text": " they don't want to release, and so that's why sometimes you end up with like a big binary", "tokens": [436, 500, 380, 528, 281, 4374, 11, 293, 370, 300, 311, 983, 2171, 291, 917, 493, 365, 411, 257, 955, 17434], "temperature": 0.0, "avg_logprob": -0.17041552634466262, "compression_ratio": 1.6, "no_speech_prob": 3.8607850001426414e-05}, {"id": 127, "seek": 66748, "start": 672.72, "end": 678.08, "text": " blob that does all of this and you don't really know what's going on.", "tokens": [46115, 300, 775, 439, 295, 341, 293, 291, 500, 380, 534, 458, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.17041552634466262, "compression_ratio": 1.6, "no_speech_prob": 3.8607850001426414e-05}, {"id": 128, "seek": 66748, "start": 678.08, "end": 685.96, "text": " Okay, so that was for the kind of, yeah, parameters for the image enhancement.", "tokens": [1033, 11, 370, 300, 390, 337, 264, 733, 295, 11, 1338, 11, 9834, 337, 264, 3256, 40776, 13], "temperature": 0.0, "avg_logprob": -0.17041552634466262, "compression_ratio": 1.6, "no_speech_prob": 3.8607850001426414e-05}, {"id": 129, "seek": 66748, "start": 685.96, "end": 690.8000000000001, "text": " Now let's take a little bit of a look at the hardware interfaces for the capture.", "tokens": [823, 718, 311, 747, 257, 707, 857, 295, 257, 574, 412, 264, 8837, 28416, 337, 264, 7983, 13], "temperature": 0.0, "avg_logprob": -0.17041552634466262, "compression_ratio": 1.6, "no_speech_prob": 3.8607850001426414e-05}, {"id": 130, "seek": 69080, "start": 690.8, "end": 697.76, "text": " So historically there's been different ways to transmit pictures from one side to another.", "tokens": [407, 16180, 456, 311, 668, 819, 2098, 281, 17831, 5242, 490, 472, 1252, 281, 1071, 13], "temperature": 0.0, "avg_logprob": -0.12264745885675604, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.3122336642700247e-05}, {"id": 131, "seek": 69080, "start": 697.76, "end": 701.92, "text": " There used to be analog interfaces which are now mostly deprecated, so let's not really", "tokens": [821, 1143, 281, 312, 16660, 28416, 597, 366, 586, 5240, 1367, 13867, 770, 11, 370, 718, 311, 406, 534], "temperature": 0.0, "avg_logprob": -0.12264745885675604, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.3122336642700247e-05}, {"id": 132, "seek": 69080, "start": 701.92, "end": 703.8, "text": " focus so much on those.", "tokens": [1879, 370, 709, 322, 729, 13], "temperature": 0.0, "avg_logprob": -0.12264745885675604, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.3122336642700247e-05}, {"id": 133, "seek": 69080, "start": 703.8, "end": 710.24, "text": " And then we have typically two types of hardware interfaces that are used for cameras.", "tokens": [400, 550, 321, 362, 5850, 732, 3467, 295, 8837, 28416, 300, 366, 1143, 337, 8622, 13], "temperature": 0.0, "avg_logprob": -0.12264745885675604, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.3122336642700247e-05}, {"id": 134, "seek": 69080, "start": 710.24, "end": 718.16, "text": " First one is the parallel, also called DVP sometimes, and that's when you basically just", "tokens": [2386, 472, 307, 264, 8952, 11, 611, 1219, 17021, 47, 2171, 11, 293, 300, 311, 562, 291, 1936, 445], "temperature": 0.0, "avg_logprob": -0.12264745885675604, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.3122336642700247e-05}, {"id": 135, "seek": 71816, "start": 718.16, "end": 723.9599999999999, "text": " have like one line of data per bit, you have some sync signals, so it's a little bit like", "tokens": [362, 411, 472, 1622, 295, 1412, 680, 857, 11, 291, 362, 512, 20271, 12354, 11, 370, 309, 311, 257, 707, 857, 411], "temperature": 0.0, "avg_logprob": -0.1892000031702727, "compression_ratio": 1.5857740585774058, "no_speech_prob": 9.2116615633131e-06}, {"id": 136, "seek": 71816, "start": 723.9599999999999, "end": 729.1999999999999, "text": " a display, a parallel display if you should know about that, and so you just kind of send", "tokens": [257, 4674, 11, 257, 8952, 4674, 498, 291, 820, 458, 466, 300, 11, 293, 370, 291, 445, 733, 295, 2845], "temperature": 0.0, "avg_logprob": -0.1892000031702727, "compression_ratio": 1.5857740585774058, "no_speech_prob": 9.2116615633131e-06}, {"id": 137, "seek": 71816, "start": 729.1999999999999, "end": 736.4399999999999, "text": " the data like that, and there's also more advanced interfaces which are also more robust", "tokens": [264, 1412, 411, 300, 11, 293, 456, 311, 611, 544, 7339, 28416, 597, 366, 611, 544, 13956], "temperature": 0.0, "avg_logprob": -0.1892000031702727, "compression_ratio": 1.5857740585774058, "no_speech_prob": 9.2116615633131e-06}, {"id": 138, "seek": 71816, "start": 736.4399999999999, "end": 743.8399999999999, "text": " to noise that typically work with serial lanes, so there is MyPy CSI2 and other ones like", "tokens": [281, 5658, 300, 5850, 589, 365, 17436, 25397, 11, 370, 456, 307, 1222, 47, 88, 9460, 40, 17, 293, 661, 2306, 411], "temperature": 0.0, "avg_logprob": -0.1892000031702727, "compression_ratio": 1.5857740585774058, "no_speech_prob": 9.2116615633131e-06}, {"id": 139, "seek": 71816, "start": 743.8399999999999, "end": 747.28, "text": " LVDS, SDI, High Spy.", "tokens": [441, 53, 11844, 11, 318, 3085, 11, 5229, 35854, 13], "temperature": 0.0, "avg_logprob": -0.1892000031702727, "compression_ratio": 1.5857740585774058, "no_speech_prob": 9.2116615633131e-06}, {"id": 140, "seek": 74728, "start": 747.28, "end": 751.76, "text": " So those are kind of the high end interfaces that allow you to stream a lot of data, they", "tokens": [407, 729, 366, 733, 295, 264, 1090, 917, 28416, 300, 2089, 291, 281, 4309, 257, 688, 295, 1412, 11, 436], "temperature": 0.0, "avg_logprob": -0.12525741002892934, "compression_ratio": 1.5260869565217392, "no_speech_prob": 8.247056939580943e-06}, {"id": 141, "seek": 74728, "start": 751.76, "end": 755.6, "text": " typically go pretty high speed, they are more robust to noise, so they are considered to", "tokens": [5850, 352, 1238, 1090, 3073, 11, 436, 366, 544, 13956, 281, 5658, 11, 370, 436, 366, 4888, 281], "temperature": 0.0, "avg_logprob": -0.12525741002892934, "compression_ratio": 1.5260869565217392, "no_speech_prob": 8.247056939580943e-06}, {"id": 142, "seek": 74728, "start": 755.6, "end": 759.76, "text": " be like the advanced ones.", "tokens": [312, 411, 264, 7339, 2306, 13], "temperature": 0.0, "avg_logprob": -0.12525741002892934, "compression_ratio": 1.5260869565217392, "no_speech_prob": 8.247056939580943e-06}, {"id": 143, "seek": 74728, "start": 759.76, "end": 765.76, "text": " So that's the one MyPy CSI2 that we are going to focus on.", "tokens": [407, 300, 311, 264, 472, 1222, 47, 88, 9460, 40, 17, 300, 321, 366, 516, 281, 1879, 322, 13], "temperature": 0.0, "avg_logprob": -0.12525741002892934, "compression_ratio": 1.5260869565217392, "no_speech_prob": 8.247056939580943e-06}, {"id": 144, "seek": 74728, "start": 765.76, "end": 772.12, "text": " Through my particular use case involving the Alwinner platforms, so in case you're not", "tokens": [8927, 452, 1729, 764, 1389, 17030, 264, 967, 9136, 1193, 9473, 11, 370, 294, 1389, 291, 434, 406], "temperature": 0.0, "avg_logprob": -0.12525741002892934, "compression_ratio": 1.5260869565217392, "no_speech_prob": 8.247056939580943e-06}, {"id": 145, "seek": 77212, "start": 772.12, "end": 778.32, "text": " familiar with the Alwinner platforms, they are ARM SoCs, made by this company called", "tokens": [4963, 365, 264, 967, 9136, 1193, 9473, 11, 436, 366, 45209, 407, 33290, 11, 1027, 538, 341, 2237, 1219], "temperature": 0.0, "avg_logprob": -0.16393144103302354, "compression_ratio": 1.551111111111111, "no_speech_prob": 2.2065920347813517e-05}, {"id": 146, "seek": 77212, "start": 778.32, "end": 784.68, "text": " Alwinner from China, they are widely available, especially on these kind of form factors as", "tokens": [967, 9136, 1193, 490, 3533, 11, 436, 366, 13371, 2435, 11, 2318, 322, 613, 733, 295, 1254, 6771, 382], "temperature": 0.0, "avg_logprob": -0.16393144103302354, "compression_ratio": 1.551111111111111, "no_speech_prob": 2.2065920347813517e-05}, {"id": 147, "seek": 77212, "start": 784.68, "end": 793.08, "text": " developer boards, and there's a number of these platforms that support MyPy CSI2 and", "tokens": [10754, 13293, 11, 293, 456, 311, 257, 1230, 295, 613, 9473, 300, 1406, 1222, 47, 88, 9460, 40, 17, 293], "temperature": 0.0, "avg_logprob": -0.16393144103302354, "compression_ratio": 1.551111111111111, "no_speech_prob": 2.2065920347813517e-05}, {"id": 148, "seek": 77212, "start": 793.08, "end": 798.6, "text": " that have an image signal processor, so it means that we can connect a raw Bayer sensor", "tokens": [300, 362, 364, 3256, 6358, 15321, 11, 370, 309, 1355, 300, 321, 393, 1745, 257, 8936, 7840, 260, 10200], "temperature": 0.0, "avg_logprob": -0.16393144103302354, "compression_ratio": 1.551111111111111, "no_speech_prob": 2.2065920347813517e-05}, {"id": 149, "seek": 79860, "start": 798.6, "end": 805.2, "text": " and get the data from that, pipe it through the ISP, and then get a picture at the end.", "tokens": [293, 483, 264, 1412, 490, 300, 11, 11240, 309, 807, 264, 6205, 47, 11, 293, 550, 483, 257, 3036, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.20382263235849876, "compression_ratio": 1.4971098265895955, "no_speech_prob": 1.7414247849956155e-05}, {"id": 150, "seek": 79860, "start": 805.2, "end": 812.08, "text": " So that was kind of the goal of the project that I had involving these platforms.", "tokens": [407, 300, 390, 733, 295, 264, 3387, 295, 264, 1716, 300, 286, 632, 17030, 613, 9473, 13], "temperature": 0.0, "avg_logprob": -0.20382263235849876, "compression_ratio": 1.4971098265895955, "no_speech_prob": 1.7414247849956155e-05}, {"id": 151, "seek": 79860, "start": 812.08, "end": 821.44, "text": " So the scope was on the V3 and A83T platforms using two different image sensors, OV8, 865", "tokens": [407, 264, 11923, 390, 322, 264, 691, 18, 293, 316, 31849, 51, 9473, 1228, 732, 819, 3256, 14840, 11, 422, 53, 23, 11, 1649, 16824], "temperature": 0.0, "avg_logprob": -0.20382263235849876, "compression_ratio": 1.4971098265895955, "no_speech_prob": 1.7414247849956155e-05}, {"id": 152, "seek": 82144, "start": 821.44, "end": 832.4000000000001, "text": " and OV645648, which are, like I just said, MyPy CSI2 sensors that provide raw Bayer data.", "tokens": [293, 422, 53, 21, 8465, 21, 13318, 11, 597, 366, 11, 411, 286, 445, 848, 11, 1222, 47, 88, 9460, 40, 17, 14840, 300, 2893, 8936, 7840, 260, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15118785526441492, "compression_ratio": 1.4190476190476191, "no_speech_prob": 1.0757719792309217e-05}, {"id": 153, "seek": 82144, "start": 832.4000000000001, "end": 837.12, "text": " And these sensors don't really have an onboard ISP.", "tokens": [400, 613, 14840, 500, 380, 534, 362, 364, 24033, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.15118785526441492, "compression_ratio": 1.4190476190476191, "no_speech_prob": 1.0757719792309217e-05}, {"id": 154, "seek": 82144, "start": 837.12, "end": 841.6800000000001, "text": " I think one of the two actually has one, but it does very little, so you still need to", "tokens": [286, 519, 472, 295, 264, 732, 767, 575, 472, 11, 457, 309, 775, 588, 707, 11, 370, 291, 920, 643, 281], "temperature": 0.0, "avg_logprob": -0.15118785526441492, "compression_ratio": 1.4190476190476191, "no_speech_prob": 1.0757719792309217e-05}, {"id": 155, "seek": 82144, "start": 841.6800000000001, "end": 846.5200000000001, "text": " do a lot on the receiving end of the interface.", "tokens": [360, 257, 688, 322, 264, 10040, 917, 295, 264, 9226, 13], "temperature": 0.0, "avg_logprob": -0.15118785526441492, "compression_ratio": 1.4190476190476191, "no_speech_prob": 1.0757719792309217e-05}, {"id": 156, "seek": 82144, "start": 846.5200000000001, "end": 849.08, "text": " So that was the goal.", "tokens": [407, 300, 390, 264, 3387, 13], "temperature": 0.0, "avg_logprob": -0.15118785526441492, "compression_ratio": 1.4190476190476191, "no_speech_prob": 1.0757719792309217e-05}, {"id": 157, "seek": 84908, "start": 849.08, "end": 855.08, "text": " That's the state of all-winner camera support in general with the mainline channel, because", "tokens": [663, 311, 264, 1785, 295, 439, 12, 9136, 1193, 2799, 1406, 294, 2674, 365, 264, 2135, 1889, 2269, 11, 570], "temperature": 0.0, "avg_logprob": -0.15710289364769345, "compression_ratio": 1.670940170940171, "no_speech_prob": 8.054701174842194e-05}, {"id": 158, "seek": 84908, "start": 855.08, "end": 858.76, "text": " we wanted to use the mainline channel, of course.", "tokens": [321, 1415, 281, 764, 264, 2135, 1889, 2269, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.15710289364769345, "compression_ratio": 1.670940170940171, "no_speech_prob": 8.054701174842194e-05}, {"id": 159, "seek": 84908, "start": 858.76, "end": 861.8000000000001, "text": " Let's first take a look at the general all-winner platform support.", "tokens": [961, 311, 700, 747, 257, 574, 412, 264, 2674, 439, 12, 9136, 1193, 3663, 1406, 13], "temperature": 0.0, "avg_logprob": -0.15710289364769345, "compression_ratio": 1.670940170940171, "no_speech_prob": 8.054701174842194e-05}, {"id": 160, "seek": 84908, "start": 861.8000000000001, "end": 870.32, "text": " So there is a community called Sanxi, or Sanxi, I think, which has been working towards mainline", "tokens": [407, 456, 307, 257, 1768, 1219, 5271, 27579, 11, 420, 5271, 27579, 11, 286, 519, 11, 597, 575, 668, 1364, 3030, 2135, 1889], "temperature": 0.0, "avg_logprob": -0.15710289364769345, "compression_ratio": 1.670940170940171, "no_speech_prob": 8.054701174842194e-05}, {"id": 161, "seek": 84908, "start": 870.32, "end": 875.48, "text": " support for all-winner SOCs, so it's very advanced, there's lots of people involved.", "tokens": [1406, 337, 439, 12, 9136, 1193, 10621, 33290, 11, 370, 309, 311, 588, 7339, 11, 456, 311, 3195, 295, 561, 3288, 13], "temperature": 0.0, "avg_logprob": -0.15710289364769345, "compression_ratio": 1.670940170940171, "no_speech_prob": 8.054701174842194e-05}, {"id": 162, "seek": 87548, "start": 875.48, "end": 879.8000000000001, "text": " You can check out this link, the Linux mainlining effort, which kind of lists all the features", "tokens": [509, 393, 1520, 484, 341, 2113, 11, 264, 18734, 2135, 31079, 4630, 11, 597, 733, 295, 14511, 439, 264, 4122], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 163, "seek": 87548, "start": 879.8000000000001, "end": 885.12, "text": " of the different SOCs and how they are currently supported in mainline Linux, and it's pretty", "tokens": [295, 264, 819, 10621, 33290, 293, 577, 436, 366, 4362, 8104, 294, 2135, 1889, 18734, 11, 293, 309, 311, 1238], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 164, "seek": 87548, "start": 885.12, "end": 887.32, "text": " impressive nowadays.", "tokens": [8992, 13434, 13], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 165, "seek": 87548, "start": 887.32, "end": 892.48, "text": " Many of the features are supported, especially for the older SOCs, because of course it takes", "tokens": [5126, 295, 264, 4122, 366, 8104, 11, 2318, 337, 264, 4906, 10621, 33290, 11, 570, 295, 1164, 309, 2516], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 166, "seek": 87548, "start": 892.48, "end": 896.36, "text": " time to get it right.", "tokens": [565, 281, 483, 309, 558, 13], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 167, "seek": 87548, "start": 896.36, "end": 901.36, "text": " But the multimedia areas are often the ones that come last in support, because they are", "tokens": [583, 264, 49202, 3179, 366, 2049, 264, 2306, 300, 808, 1036, 294, 1406, 11, 570, 436, 366], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 168, "seek": 87548, "start": 901.36, "end": 904.6800000000001, "text": " typically a bit complex to implement.", "tokens": [5850, 257, 857, 3997, 281, 4445, 13], "temperature": 0.0, "avg_logprob": -0.12163801546450015, "compression_ratio": 1.714828897338403, "no_speech_prob": 2.920969382103067e-05}, {"id": 169, "seek": 90468, "start": 904.68, "end": 913.92, "text": " So when I started the project, there were two drivers for capturing data.", "tokens": [407, 562, 286, 1409, 264, 1716, 11, 456, 645, 732, 11590, 337, 23384, 1412, 13], "temperature": 0.0, "avg_logprob": -0.1912224292755127, "compression_ratio": 1.5384615384615385, "no_speech_prob": 4.65492375951726e-05}, {"id": 170, "seek": 90468, "start": 913.92, "end": 921.0799999999999, "text": " The first one is the SunFry CSI driver, which covers the first generation of these all-winner", "tokens": [440, 700, 472, 307, 264, 6163, 37, 627, 9460, 40, 6787, 11, 597, 10538, 264, 700, 5125, 295, 613, 439, 12, 9136, 1193], "temperature": 0.0, "avg_logprob": -0.1912224292755127, "compression_ratio": 1.5384615384615385, "no_speech_prob": 4.65492375951726e-05}, {"id": 171, "seek": 90468, "start": 921.0799999999999, "end": 922.64, "text": " platforms.", "tokens": [9473, 13], "temperature": 0.0, "avg_logprob": -0.1912224292755127, "compression_ratio": 1.5384615384615385, "no_speech_prob": 4.65492375951726e-05}, {"id": 172, "seek": 90468, "start": 922.64, "end": 927.9599999999999, "text": " It was the hardware then evolved into a second generation, which is supported in mainline", "tokens": [467, 390, 264, 8837, 550, 14178, 666, 257, 1150, 5125, 11, 597, 307, 8104, 294, 2135, 1889], "temperature": 0.0, "avg_logprob": -0.1912224292755127, "compression_ratio": 1.5384615384615385, "no_speech_prob": 4.65492375951726e-05}, {"id": 173, "seek": 90468, "start": 927.9599999999999, "end": 932.16, "text": " by a driver called SunSixi CSI.", "tokens": [538, 257, 6787, 1219, 6163, 50, 970, 72, 9460, 40, 13], "temperature": 0.0, "avg_logprob": -0.1912224292755127, "compression_ratio": 1.5384615384615385, "no_speech_prob": 4.65492375951726e-05}, {"id": 174, "seek": 93216, "start": 932.16, "end": 937.88, "text": " After that, all-winner made a new generation of platforms, which have a third generation", "tokens": [2381, 300, 11, 439, 12, 9136, 1193, 1027, 257, 777, 5125, 295, 9473, 11, 597, 362, 257, 2636, 5125], "temperature": 0.0, "avg_logprob": -0.1279377355808165, "compression_ratio": 1.558252427184466, "no_speech_prob": 2.6078025257447734e-05}, {"id": 175, "seek": 93216, "start": 937.88, "end": 942.28, "text": " of CSI, which is currently not supported.", "tokens": [295, 9460, 40, 11, 597, 307, 4362, 406, 8104, 13], "temperature": 0.0, "avg_logprob": -0.1279377355808165, "compression_ratio": 1.558252427184466, "no_speech_prob": 2.6078025257447734e-05}, {"id": 176, "seek": 93216, "start": 942.28, "end": 949.0, "text": " So the devices that I was interested in, so the V3 and A83T, work with the second generation", "tokens": [407, 264, 5759, 300, 286, 390, 3102, 294, 11, 370, 264, 691, 18, 293, 316, 31849, 51, 11, 589, 365, 264, 1150, 5125], "temperature": 0.0, "avg_logprob": -0.1279377355808165, "compression_ratio": 1.558252427184466, "no_speech_prob": 2.6078025257447734e-05}, {"id": 177, "seek": 93216, "start": 949.0, "end": 950.88, "text": " driver.", "tokens": [6787, 13], "temperature": 0.0, "avg_logprob": -0.1279377355808165, "compression_ratio": 1.558252427184466, "no_speech_prob": 2.6078025257447734e-05}, {"id": 178, "seek": 93216, "start": 950.88, "end": 959.0, "text": " So this driver basically allows you to receive images from the parallel interface, but it", "tokens": [407, 341, 6787, 1936, 4045, 291, 281, 4774, 5267, 490, 264, 8952, 9226, 11, 457, 309], "temperature": 0.0, "avg_logprob": -0.1279377355808165, "compression_ratio": 1.558252427184466, "no_speech_prob": 2.6078025257447734e-05}, {"id": 179, "seek": 95900, "start": 959.0, "end": 963.6, "text": " didn't support MyPi CSI 2, and it didn't have support for the ISP.", "tokens": [994, 380, 1406, 1222, 47, 72, 9460, 40, 568, 11, 293, 309, 994, 380, 362, 1406, 337, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.18194071451822916, "compression_ratio": 1.6267942583732058, "no_speech_prob": 4.897556937066838e-05}, {"id": 180, "seek": 95900, "start": 963.6, "end": 973.44, "text": " So there was actually some support for these features in the downstream vendor all-winner", "tokens": [407, 456, 390, 767, 512, 1406, 337, 613, 4122, 294, 264, 30621, 24321, 439, 12, 9136, 1193], "temperature": 0.0, "avg_logprob": -0.18194071451822916, "compression_ratio": 1.6267942583732058, "no_speech_prob": 4.897556937066838e-05}, {"id": 181, "seek": 95900, "start": 973.44, "end": 975.04, "text": " kernel.", "tokens": [28256, 13], "temperature": 0.0, "avg_logprob": -0.18194071451822916, "compression_ratio": 1.6267942583732058, "no_speech_prob": 4.897556937066838e-05}, {"id": 182, "seek": 95900, "start": 975.04, "end": 980.48, "text": " So they do have some code for that, but the ISP part, especially, was implemented as a", "tokens": [407, 436, 360, 362, 512, 3089, 337, 300, 11, 457, 264, 6205, 47, 644, 11, 2318, 11, 390, 12270, 382, 257], "temperature": 0.0, "avg_logprob": -0.18194071451822916, "compression_ratio": 1.6267942583732058, "no_speech_prob": 4.897556937066838e-05}, {"id": 183, "seek": 95900, "start": 980.48, "end": 987.0, "text": " binary blob, so it was like a static library that was linked to the kernel, which is not", "tokens": [17434, 46115, 11, 370, 309, 390, 411, 257, 13437, 6405, 300, 390, 9408, 281, 264, 28256, 11, 597, 307, 406], "temperature": 0.0, "avg_logprob": -0.18194071451822916, "compression_ratio": 1.6267942583732058, "no_speech_prob": 4.897556937066838e-05}, {"id": 184, "seek": 98700, "start": 987.0, "end": 990.24, "text": " necessarily very legal, but never mind.", "tokens": [4725, 588, 5089, 11, 457, 1128, 1575, 13], "temperature": 0.0, "avg_logprob": -0.23574750654159055, "compression_ratio": 1.3988439306358382, "no_speech_prob": 3.6383833503350616e-05}, {"id": 185, "seek": 98700, "start": 990.24, "end": 1000.72, "text": " So there was actually very, very few resources regarding how the ISP works on these platforms.", "tokens": [407, 456, 390, 767, 588, 11, 588, 1326, 3593, 8595, 577, 264, 6205, 47, 1985, 322, 613, 9473, 13], "temperature": 0.0, "avg_logprob": -0.23574750654159055, "compression_ratio": 1.3988439306358382, "no_speech_prob": 3.6383833503350616e-05}, {"id": 186, "seek": 98700, "start": 1000.72, "end": 1004.88, "text": " Okay, right, okay.", "tokens": [1033, 11, 558, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.23574750654159055, "compression_ratio": 1.3988439306358382, "no_speech_prob": 3.6383833503350616e-05}, {"id": 187, "seek": 98700, "start": 1004.88, "end": 1011.0, "text": " So generally speaking, how do we support cameras in Linux, at least at the kernel level?", "tokens": [407, 5101, 4124, 11, 577, 360, 321, 1406, 8622, 294, 18734, 11, 412, 1935, 412, 264, 28256, 1496, 30], "temperature": 0.0, "avg_logprob": -0.23574750654159055, "compression_ratio": 1.3988439306358382, "no_speech_prob": 3.6383833503350616e-05}, {"id": 188, "seek": 101100, "start": 1011.0, "end": 1019.0, "text": " So there's this API called v4l2 that I think you've all heard of just before, and probably", "tokens": [407, 456, 311, 341, 9362, 1219, 371, 19, 75, 17, 300, 286, 519, 291, 600, 439, 2198, 295, 445, 949, 11, 293, 1391], "temperature": 0.0, "avg_logprob": -0.137790280419427, "compression_ratio": 1.4378109452736318, "no_speech_prob": 2.203403528255876e-05}, {"id": 189, "seek": 101100, "start": 1019.0, "end": 1021.04, "text": " many people know about.", "tokens": [867, 561, 458, 466, 13], "temperature": 0.0, "avg_logprob": -0.137790280419427, "compression_ratio": 1.4378109452736318, "no_speech_prob": 2.203403528255876e-05}, {"id": 190, "seek": 101100, "start": 1021.04, "end": 1030.22, "text": " So it's really about supporting anything that produces pixels that the CPU can receive.", "tokens": [407, 309, 311, 534, 466, 7231, 1340, 300, 14725, 18668, 300, 264, 13199, 393, 4774, 13], "temperature": 0.0, "avg_logprob": -0.137790280419427, "compression_ratio": 1.4378109452736318, "no_speech_prob": 2.203403528255876e-05}, {"id": 191, "seek": 101100, "start": 1030.22, "end": 1035.8, "text": " So it supports lots of different types of devices, not only cameras, but also, I don't", "tokens": [407, 309, 9346, 3195, 295, 819, 3467, 295, 5759, 11, 406, 787, 8622, 11, 457, 611, 11, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.137790280419427, "compression_ratio": 1.4378109452736318, "no_speech_prob": 2.203403528255876e-05}, {"id": 192, "seek": 103580, "start": 1035.8, "end": 1043.72, "text": " know, things like skaters, DVBT receivers, lots of different things, now decoders, encoders,", "tokens": [458, 11, 721, 411, 1110, 16749, 11, 17021, 33, 51, 49196, 11, 3195, 295, 819, 721, 11, 586, 979, 378, 433, 11, 2058, 378, 433, 11], "temperature": 0.0, "avg_logprob": -0.14772416270056435, "compression_ratio": 1.6965174129353233, "no_speech_prob": 2.0438410501810722e-05}, {"id": 193, "seek": 103580, "start": 1043.72, "end": 1049.52, "text": " things like that, so really lots of different devices related to pixels.", "tokens": [721, 411, 300, 11, 370, 534, 3195, 295, 819, 5759, 4077, 281, 18668, 13], "temperature": 0.0, "avg_logprob": -0.14772416270056435, "compression_ratio": 1.6965174129353233, "no_speech_prob": 2.0438410501810722e-05}, {"id": 194, "seek": 103580, "start": 1049.52, "end": 1055.9199999999998, "text": " And typically the way it works is that you have one device node that corresponds to a", "tokens": [400, 5850, 264, 636, 309, 1985, 307, 300, 291, 362, 472, 4302, 9984, 300, 23249, 281, 257], "temperature": 0.0, "avg_logprob": -0.14772416270056435, "compression_ratio": 1.6965174129353233, "no_speech_prob": 2.0438410501810722e-05}, {"id": 195, "seek": 103580, "start": 1055.9199999999998, "end": 1063.44, "text": " driver, so typically dev video zero, and that device node gives you access to an API from", "tokens": [6787, 11, 370, 5850, 1905, 960, 4018, 11, 293, 300, 4302, 9984, 2709, 291, 2105, 281, 364, 9362, 490], "temperature": 0.0, "avg_logprob": -0.14772416270056435, "compression_ratio": 1.6965174129353233, "no_speech_prob": 2.0438410501810722e-05}, {"id": 196, "seek": 106344, "start": 1063.44, "end": 1068.96, "text": " user space where you can do all the different things that are necessary to get a picture", "tokens": [4195, 1901, 689, 291, 393, 360, 439, 264, 819, 721, 300, 366, 4818, 281, 483, 257, 3036], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 197, "seek": 106344, "start": 1068.96, "end": 1072.28, "text": " from user space.", "tokens": [490, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 198, "seek": 106344, "start": 1072.28, "end": 1078.56, "text": " So typically negotiating the pixel format that you want to receive, doing the memory", "tokens": [407, 5850, 30396, 264, 19261, 7877, 300, 291, 528, 281, 4774, 11, 884, 264, 4675], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 199, "seek": 106344, "start": 1078.56, "end": 1084.56, "text": " management like allocating the buffers, how many buffers you want, et cetera, queuing", "tokens": [4592, 411, 12660, 990, 264, 9204, 433, 11, 577, 867, 9204, 433, 291, 528, 11, 1030, 11458, 11, 631, 9635], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 200, "seek": 106344, "start": 1084.56, "end": 1085.76, "text": " and decuing buffers.", "tokens": [293, 979, 9635, 9204, 433, 13], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 201, "seek": 106344, "start": 1085.76, "end": 1090.3600000000001, "text": " So user space provides a buffer to the driver which will fill it with pixels and then return", "tokens": [407, 4195, 1901, 6417, 257, 21762, 281, 264, 6787, 597, 486, 2836, 309, 365, 18668, 293, 550, 2736], "temperature": 0.0, "avg_logprob": -0.1348768802399331, "compression_ratio": 1.7333333333333334, "no_speech_prob": 1.8034175809589215e-05}, {"id": 202, "seek": 109036, "start": 1090.36, "end": 1096.3999999999999, "text": " it to the application, and then the application has a buffer that has pixels in it that it", "tokens": [309, 281, 264, 3861, 11, 293, 550, 264, 3861, 575, 257, 21762, 300, 575, 18668, 294, 309, 300, 309], "temperature": 0.0, "avg_logprob": -0.14723262080439814, "compression_ratio": 1.51, "no_speech_prob": 2.6973320927936584e-05}, {"id": 203, "seek": 109036, "start": 1096.3999999999999, "end": 1102.52, "text": " can use to, again, display or encode them or whatever.", "tokens": [393, 764, 281, 11, 797, 11, 4674, 420, 2058, 1429, 552, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.14723262080439814, "compression_ratio": 1.51, "no_speech_prob": 2.6973320927936584e-05}, {"id": 204, "seek": 109036, "start": 1102.52, "end": 1109.6, "text": " So this video device works well for, I would say, all-in-one devices where you basically", "tokens": [407, 341, 960, 4302, 1985, 731, 337, 11, 286, 576, 584, 11, 439, 12, 259, 12, 546, 5759, 689, 291, 1936], "temperature": 0.0, "avg_logprob": -0.14723262080439814, "compression_ratio": 1.51, "no_speech_prob": 2.6973320927936584e-05}, {"id": 205, "seek": 109036, "start": 1109.6, "end": 1117.24, "text": " just receive the finished data from a device like a USB-UVC camera.", "tokens": [445, 4774, 264, 4335, 1412, 490, 257, 4302, 411, 257, 10109, 12, 52, 53, 34, 2799, 13], "temperature": 0.0, "avg_logprob": -0.14723262080439814, "compression_ratio": 1.51, "no_speech_prob": 2.6973320927936584e-05}, {"id": 206, "seek": 111724, "start": 1117.24, "end": 1122.92, "text": " So the camera itself will do all of the processing inside, and it will just give you the final", "tokens": [407, 264, 2799, 2564, 486, 360, 439, 295, 264, 9007, 1854, 11, 293, 309, 486, 445, 976, 291, 264, 2572], "temperature": 0.0, "avg_logprob": -0.1463156255086263, "compression_ratio": 1.4976076555023923, "no_speech_prob": 4.182146585662849e-05}, {"id": 207, "seek": 111724, "start": 1122.92, "end": 1129.52, "text": " result over USB, and you get that through this API on Linux.", "tokens": [1874, 670, 10109, 11, 293, 291, 483, 300, 807, 341, 9362, 322, 18734, 13], "temperature": 0.0, "avg_logprob": -0.1463156255086263, "compression_ratio": 1.4976076555023923, "no_speech_prob": 4.182146585662849e-05}, {"id": 208, "seek": 111724, "start": 1129.52, "end": 1135.44, "text": " And yeah, typically you need some DMA interface to do that transfer.", "tokens": [400, 1338, 11, 5850, 291, 643, 512, 413, 9998, 9226, 281, 360, 300, 5003, 13], "temperature": 0.0, "avg_logprob": -0.1463156255086263, "compression_ratio": 1.4976076555023923, "no_speech_prob": 4.182146585662849e-05}, {"id": 209, "seek": 111724, "start": 1135.44, "end": 1141.04, "text": " But in the case of a more complex pipeline, especially when you have multiple components", "tokens": [583, 294, 264, 1389, 295, 257, 544, 3997, 15517, 11, 2318, 562, 291, 362, 3866, 6677], "temperature": 0.0, "avg_logprob": -0.1463156255086263, "compression_ratio": 1.4976076555023923, "no_speech_prob": 4.182146585662849e-05}, {"id": 210, "seek": 114104, "start": 1141.04, "end": 1147.76, "text": " involved, like with the ISP, with the Mypy CSI2 receiver, with a particular sensor that", "tokens": [3288, 11, 411, 365, 264, 6205, 47, 11, 365, 264, 1222, 8200, 9460, 40, 17, 20086, 11, 365, 257, 1729, 10200, 300], "temperature": 0.0, "avg_logprob": -0.15033973347056995, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.061659688479267e-05}, {"id": 211, "seek": 114104, "start": 1147.76, "end": 1152.52, "text": " you can control directly, then you end up with a situation where you have multiple devices", "tokens": [291, 393, 1969, 3838, 11, 550, 291, 917, 493, 365, 257, 2590, 689, 291, 362, 3866, 5759], "temperature": 0.0, "avg_logprob": -0.15033973347056995, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.061659688479267e-05}, {"id": 212, "seek": 114104, "start": 1152.52, "end": 1157.6, "text": " in the pipeline, and you kind of need to configure each one of these devices individually.", "tokens": [294, 264, 15517, 11, 293, 291, 733, 295, 643, 281, 22162, 1184, 472, 295, 613, 5759, 16652, 13], "temperature": 0.0, "avg_logprob": -0.15033973347056995, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.061659688479267e-05}, {"id": 213, "seek": 114104, "start": 1157.6, "end": 1166.6399999999999, "text": " So this called for a more advanced API, which is the subdev API, which allows not only to", "tokens": [407, 341, 1219, 337, 257, 544, 7339, 9362, 11, 597, 307, 264, 1422, 40343, 9362, 11, 597, 4045, 406, 787, 281], "temperature": 0.0, "avg_logprob": -0.15033973347056995, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.061659688479267e-05}, {"id": 214, "seek": 116664, "start": 1166.64, "end": 1172.24, "text": " have one big device for receiving the data, but also side devices that you can use to", "tokens": [362, 472, 955, 4302, 337, 10040, 264, 1412, 11, 457, 611, 1252, 5759, 300, 291, 393, 764, 281], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 215, "seek": 116664, "start": 1172.24, "end": 1175.8400000000001, "text": " configure each component in the chain.", "tokens": [22162, 1184, 6542, 294, 264, 5021, 13], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 216, "seek": 116664, "start": 1175.8400000000001, "end": 1181.68, "text": " And there is also the Media Controller API that allows you to kind of control the topology", "tokens": [400, 456, 307, 611, 264, 14741, 44969, 9362, 300, 4045, 291, 281, 733, 295, 1969, 264, 1192, 1793], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 217, "seek": 116664, "start": 1181.68, "end": 1183.96, "text": " between these devices.", "tokens": [1296, 613, 5759, 13], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 218, "seek": 116664, "start": 1183.96, "end": 1192.16, "text": " So the subdevs typically just represent one of the parts of the pipeline, and they typically", "tokens": [407, 264, 1422, 40343, 82, 5850, 445, 2906, 472, 295, 264, 3166, 295, 264, 15517, 11, 293, 436, 5850], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 219, "seek": 116664, "start": 1192.16, "end": 1193.3600000000001, "text": " cannot do DMA.", "tokens": [2644, 360, 413, 9998, 13], "temperature": 0.0, "avg_logprob": -0.11307535732493681, "compression_ratio": 1.5871559633027523, "no_speech_prob": 1.5389687177957967e-05}, {"id": 220, "seek": 119336, "start": 1193.36, "end": 1200.6399999999999, "text": " So they will be connected from and to other devices through some interfaces that don't", "tokens": [407, 436, 486, 312, 4582, 490, 293, 281, 661, 5759, 807, 512, 28416, 300, 500, 380], "temperature": 0.0, "avg_logprob": -0.12703611976221987, "compression_ratio": 1.4873096446700507, "no_speech_prob": 1.7719063180265948e-05}, {"id": 221, "seek": 119336, "start": 1200.6399999999999, "end": 1202.9599999999998, "text": " involve writing the data to memory.", "tokens": [9494, 3579, 264, 1412, 281, 4675, 13], "temperature": 0.0, "avg_logprob": -0.12703611976221987, "compression_ratio": 1.4873096446700507, "no_speech_prob": 1.7719063180265948e-05}, {"id": 222, "seek": 119336, "start": 1202.9599999999998, "end": 1211.08, "text": " So it could be a FIFO, or it could be an actual hardware interface like Mypy CSI2.", "tokens": [407, 309, 727, 312, 257, 479, 12775, 46, 11, 420, 309, 727, 312, 364, 3539, 8837, 9226, 411, 1222, 8200, 9460, 40, 17, 13], "temperature": 0.0, "avg_logprob": -0.12703611976221987, "compression_ratio": 1.4873096446700507, "no_speech_prob": 1.7719063180265948e-05}, {"id": 223, "seek": 119336, "start": 1211.08, "end": 1219.76, "text": " And basically, the top-level video device will be in charge of kind of calling the next", "tokens": [400, 1936, 11, 264, 1192, 12, 12418, 960, 4302, 486, 312, 294, 4602, 295, 733, 295, 5141, 264, 958], "temperature": 0.0, "avg_logprob": -0.12703611976221987, "compression_ratio": 1.4873096446700507, "no_speech_prob": 1.7719063180265948e-05}, {"id": 224, "seek": 121976, "start": 1219.76, "end": 1224.32, "text": " subdev in the chain, which we'll call the next one it's touch to, and et cetera.", "tokens": [1422, 40343, 294, 264, 5021, 11, 597, 321, 603, 818, 264, 958, 472, 309, 311, 2557, 281, 11, 293, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.14132309923268327, "compression_ratio": 1.662162162162162, "no_speech_prob": 1.8857595932786353e-05}, {"id": 225, "seek": 121976, "start": 1224.32, "end": 1229.2, "text": " So that, for example, you can coordinate starting the stream and starting all the elements at", "tokens": [407, 300, 11, 337, 1365, 11, 291, 393, 15670, 2891, 264, 4309, 293, 2891, 439, 264, 4959, 412], "temperature": 0.0, "avg_logprob": -0.14132309923268327, "compression_ratio": 1.662162162162162, "no_speech_prob": 1.8857595932786353e-05}, {"id": 226, "seek": 121976, "start": 1229.2, "end": 1235.4, "text": " the same time to start receiving an image.", "tokens": [264, 912, 565, 281, 722, 10040, 364, 3256, 13], "temperature": 0.0, "avg_logprob": -0.14132309923268327, "compression_ratio": 1.662162162162162, "no_speech_prob": 1.8857595932786353e-05}, {"id": 227, "seek": 121976, "start": 1235.4, "end": 1241.12, "text": " But these subdevs still need to be parented to the V4L2 device.", "tokens": [583, 613, 1422, 40343, 82, 920, 643, 281, 312, 2596, 292, 281, 264, 691, 19, 43, 17, 4302, 13], "temperature": 0.0, "avg_logprob": -0.14132309923268327, "compression_ratio": 1.662162162162162, "no_speech_prob": 1.8857595932786353e-05}, {"id": 228, "seek": 121976, "start": 1241.12, "end": 1249.64, "text": " So basically, they need to be all controlled under the same top-level entity to be able", "tokens": [407, 1936, 11, 436, 643, 281, 312, 439, 10164, 833, 264, 912, 1192, 12, 12418, 13977, 281, 312, 1075], "temperature": 0.0, "avg_logprob": -0.14132309923268327, "compression_ratio": 1.662162162162162, "no_speech_prob": 1.8857595932786353e-05}, {"id": 229, "seek": 124964, "start": 1249.64, "end": 1254.2, "text": " to, let's say, coordinate between one another.", "tokens": [281, 11, 718, 311, 584, 11, 15670, 1296, 472, 1071, 13], "temperature": 0.0, "avg_logprob": -0.11829287807146709, "compression_ratio": 1.5432692307692308, "no_speech_prob": 2.0073366613360122e-05}, {"id": 230, "seek": 124964, "start": 1254.2, "end": 1264.5600000000002, "text": " So for that, there is an API in V4L2 that allows you to register the subdevs with V4L2", "tokens": [407, 337, 300, 11, 456, 307, 364, 9362, 294, 691, 19, 43, 17, 300, 4045, 291, 281, 7280, 264, 1422, 40343, 82, 365, 691, 19, 43, 17], "temperature": 0.0, "avg_logprob": -0.11829287807146709, "compression_ratio": 1.5432692307692308, "no_speech_prob": 2.0073366613360122e-05}, {"id": 231, "seek": 124964, "start": 1264.5600000000002, "end": 1265.5600000000002, "text": " device.", "tokens": [4302, 13], "temperature": 0.0, "avg_logprob": -0.11829287807146709, "compression_ratio": 1.5432692307692308, "no_speech_prob": 2.0073366613360122e-05}, {"id": 232, "seek": 124964, "start": 1265.5600000000002, "end": 1273.0800000000002, "text": " So again, that's the parent controlling entity, which is easy to do if all of the support", "tokens": [407, 797, 11, 300, 311, 264, 2596, 14905, 13977, 11, 597, 307, 1858, 281, 360, 498, 439, 295, 264, 1406], "temperature": 0.0, "avg_logprob": -0.11829287807146709, "compression_ratio": 1.5432692307692308, "no_speech_prob": 2.0073366613360122e-05}, {"id": 233, "seek": 124964, "start": 1273.0800000000002, "end": 1279.5200000000002, "text": " for the subdevs are in the same driver, because you have access to that V4L2 dev pointer.", "tokens": [337, 264, 1422, 40343, 82, 366, 294, 264, 912, 6787, 11, 570, 291, 362, 2105, 281, 300, 691, 19, 43, 17, 1905, 23918, 13], "temperature": 0.0, "avg_logprob": -0.11829287807146709, "compression_ratio": 1.5432692307692308, "no_speech_prob": 2.0073366613360122e-05}, {"id": 234, "seek": 127952, "start": 1279.52, "end": 1285.24, "text": " But it can also happen that you have multiple drivers involved throughout the tree.", "tokens": [583, 309, 393, 611, 1051, 300, 291, 362, 3866, 11590, 3288, 3710, 264, 4230, 13], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 235, "seek": 127952, "start": 1285.24, "end": 1289.76, "text": " So for example, you have one driver for your sensor, one driver for your DMA interface", "tokens": [407, 337, 1365, 11, 291, 362, 472, 6787, 337, 428, 10200, 11, 472, 6787, 337, 428, 413, 9998, 9226], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 236, "seek": 127952, "start": 1289.76, "end": 1295.76, "text": " to transfer the data, one driver for your ISP, and you could even have more.", "tokens": [281, 5003, 264, 1412, 11, 472, 6787, 337, 428, 6205, 47, 11, 293, 291, 727, 754, 362, 544, 13], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 237, "seek": 127952, "start": 1295.76, "end": 1301.2, "text": " So in that case, the drivers don't know exactly which other driver they should be attached", "tokens": [407, 294, 300, 1389, 11, 264, 11590, 500, 380, 458, 2293, 597, 661, 6787, 436, 820, 312, 8570], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 238, "seek": 127952, "start": 1301.2, "end": 1302.28, "text": " to.", "tokens": [281, 13], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 239, "seek": 127952, "start": 1302.28, "end": 1308.52, "text": " So in that case, there is a asynchronous subdev registration interface, which allows", "tokens": [407, 294, 300, 1389, 11, 456, 307, 257, 49174, 1422, 40343, 16847, 9226, 11, 597, 4045], "temperature": 0.0, "avg_logprob": -0.09277822438952993, "compression_ratio": 1.8170212765957447, "no_speech_prob": 1.6421092368545942e-05}, {"id": 240, "seek": 130852, "start": 1308.52, "end": 1315.52, "text": " you when basically you have, for example, a sensor driver to just make that subdev available", "tokens": [291, 562, 1936, 291, 362, 11, 337, 1365, 11, 257, 10200, 6787, 281, 445, 652, 300, 1422, 40343, 2435], "temperature": 0.0, "avg_logprob": -0.1145966641314618, "compression_ratio": 1.7318435754189945, "no_speech_prob": 1.4248723346099723e-05}, {"id": 241, "seek": 130852, "start": 1315.52, "end": 1320.76, "text": " to whichever driver is going to need it later.", "tokens": [281, 24123, 6787, 307, 516, 281, 643, 309, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1145966641314618, "compression_ratio": 1.7318435754189945, "no_speech_prob": 1.4248723346099723e-05}, {"id": 242, "seek": 130852, "start": 1320.76, "end": 1327.96, "text": " So the subdev drivers will just make the subdev available to the rest of the world.", "tokens": [407, 264, 1422, 40343, 11590, 486, 445, 652, 264, 1422, 40343, 2435, 281, 264, 1472, 295, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.1145966641314618, "compression_ratio": 1.7318435754189945, "no_speech_prob": 1.4248723346099723e-05}, {"id": 243, "seek": 130852, "start": 1327.96, "end": 1333.96, "text": " And then the top-level drivers will need a way to identify which subdevs they actually", "tokens": [400, 550, 264, 1192, 12, 12418, 11590, 486, 643, 257, 636, 281, 5876, 597, 1422, 40343, 82, 436, 767], "temperature": 0.0, "avg_logprob": -0.1145966641314618, "compression_ratio": 1.7318435754189945, "no_speech_prob": 1.4248723346099723e-05}, {"id": 244, "seek": 133396, "start": 1333.96, "end": 1340.04, "text": " need and to get a handle of them, which will allow registering these subdevs with the top-level", "tokens": [643, 293, 281, 483, 257, 4813, 295, 552, 11, 597, 486, 2089, 47329, 613, 1422, 40343, 82, 365, 264, 1192, 12, 12418], "temperature": 0.0, "avg_logprob": -0.15796854409826808, "compression_ratio": 1.5406698564593302, "no_speech_prob": 1.2396671991155017e-05}, {"id": 245, "seek": 133396, "start": 1340.04, "end": 1342.6000000000001, "text": " V4L2 device.", "tokens": [691, 19, 43, 17, 4302, 13], "temperature": 0.0, "avg_logprob": -0.15796854409826808, "compression_ratio": 1.5406698564593302, "no_speech_prob": 1.2396671991155017e-05}, {"id": 246, "seek": 133396, "start": 1342.6000000000001, "end": 1351.1200000000001, "text": " So the way that this kind of linking is done is through the FW node graph, which is typically", "tokens": [407, 264, 636, 300, 341, 733, 295, 25775, 307, 1096, 307, 807, 264, 479, 54, 9984, 4295, 11, 597, 307, 5850], "temperature": 0.0, "avg_logprob": -0.15796854409826808, "compression_ratio": 1.5406698564593302, "no_speech_prob": 1.2396671991155017e-05}, {"id": 247, "seek": 133396, "start": 1351.1200000000001, "end": 1353.96, "text": " implemented in device tree.", "tokens": [12270, 294, 4302, 4230, 13], "temperature": 0.0, "avg_logprob": -0.15796854409826808, "compression_ratio": 1.5406698564593302, "no_speech_prob": 1.2396671991155017e-05}, {"id": 248, "seek": 133396, "start": 1353.96, "end": 1359.16, "text": " So it uses the port and endpoint representation that maybe you've seen in some device trees", "tokens": [407, 309, 4960, 264, 2436, 293, 35795, 10290, 300, 1310, 291, 600, 1612, 294, 512, 4302, 5852], "temperature": 0.0, "avg_logprob": -0.15796854409826808, "compression_ratio": 1.5406698564593302, "no_speech_prob": 1.2396671991155017e-05}, {"id": 249, "seek": 135916, "start": 1359.16, "end": 1367.44, "text": " implementing this, and this description also allows describing some characteristics of", "tokens": [18114, 341, 11, 293, 341, 3855, 611, 4045, 16141, 512, 10891, 295], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 250, "seek": 135916, "start": 1367.44, "end": 1368.52, "text": " the interface.", "tokens": [264, 9226, 13], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 251, "seek": 135916, "start": 1368.52, "end": 1376.5600000000002, "text": " For example, if you have a sensor that is on a MyPyCSI interface, it can use a different", "tokens": [1171, 1365, 11, 498, 291, 362, 257, 10200, 300, 307, 322, 257, 1222, 47, 88, 34, 20262, 9226, 11, 309, 393, 764, 257, 819], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 252, "seek": 135916, "start": 1376.5600000000002, "end": 1377.72, "text": " number of lanes.", "tokens": [1230, 295, 25397, 13], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 253, "seek": 135916, "start": 1377.72, "end": 1383.3600000000001, "text": " So in MyPyCSI 2, you can have up to four lanes, but maybe the sensor only uses two.", "tokens": [407, 294, 1222, 47, 88, 34, 20262, 568, 11, 291, 393, 362, 493, 281, 1451, 25397, 11, 457, 1310, 264, 10200, 787, 4960, 732, 13], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 254, "seek": 135916, "start": 1383.3600000000001, "end": 1387.0800000000002, "text": " So you have to kind of be able to share this information.", "tokens": [407, 291, 362, 281, 733, 295, 312, 1075, 281, 2073, 341, 1589, 13], "temperature": 0.0, "avg_logprob": -0.13629487690172698, "compression_ratio": 1.5936073059360731, "no_speech_prob": 4.596777944243513e-05}, {"id": 255, "seek": 138708, "start": 1387.08, "end": 1391.6799999999998, "text": " And this is also done through this FW node graph description.", "tokens": [400, 341, 307, 611, 1096, 807, 341, 479, 54, 9984, 4295, 3855, 13], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 256, "seek": 138708, "start": 1391.6799999999998, "end": 1396.1599999999999, "text": " So you have some device tree properties that you had to indicate that.", "tokens": [407, 291, 362, 512, 4302, 4230, 7221, 300, 291, 632, 281, 13330, 300, 13], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 257, "seek": 138708, "start": 1396.1599999999999, "end": 1402.96, "text": " And then the drivers can call these endpoint pass helper to actually retrieve the information", "tokens": [400, 550, 264, 11590, 393, 818, 613, 35795, 1320, 36133, 281, 767, 30254, 264, 1589], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 258, "seek": 138708, "start": 1402.96, "end": 1404.3799999999999, "text": " about the interface.", "tokens": [466, 264, 9226, 13], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 259, "seek": 138708, "start": 1404.3799999999999, "end": 1410.6, "text": " So to illustrate, on the left side, we have some sensor here.", "tokens": [407, 281, 23221, 11, 322, 264, 1411, 1252, 11, 321, 362, 512, 10200, 510, 13], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 260, "seek": 138708, "start": 1410.6, "end": 1414.6799999999998, "text": " So we have the port and endpoint representation.", "tokens": [407, 321, 362, 264, 2436, 293, 35795, 10290, 13], "temperature": 0.0, "avg_logprob": -0.1272249902997698, "compression_ratio": 1.6574074074074074, "no_speech_prob": 9.951872016245034e-06}, {"id": 261, "seek": 141468, "start": 1414.68, "end": 1420.2, "text": " The remote endpoint allows you to connect two sides together, and you have these extra", "tokens": [440, 8607, 35795, 4045, 291, 281, 1745, 732, 4881, 1214, 11, 293, 291, 362, 613, 2857], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 262, "seek": 141468, "start": 1420.2, "end": 1426.1200000000001, "text": " properties here like the data lane and link frequencies that really describe the characteristics", "tokens": [7221, 510, 411, 264, 1412, 12705, 293, 2113, 20250, 300, 534, 6786, 264, 10891], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 263, "seek": 141468, "start": 1426.1200000000001, "end": 1432.2, "text": " of the bus, so at which frequency it should be running and how many lanes it should have.", "tokens": [295, 264, 1255, 11, 370, 412, 597, 7893, 309, 820, 312, 2614, 293, 577, 867, 25397, 309, 820, 362, 13], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 264, "seek": 141468, "start": 1432.2, "end": 1436.04, "text": " And then on the other side, you have the same thing.", "tokens": [400, 550, 322, 264, 661, 1252, 11, 291, 362, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 265, "seek": 141468, "start": 1436.04, "end": 1439.28, "text": " In this case, the link frequency is controlled by the sensor, so you only need to provide", "tokens": [682, 341, 1389, 11, 264, 2113, 7893, 307, 10164, 538, 264, 10200, 11, 370, 291, 787, 643, 281, 2893], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 266, "seek": 141468, "start": 1439.28, "end": 1443.1200000000001, "text": " it there, but the data lanes is present on both sides.", "tokens": [309, 456, 11, 457, 264, 1412, 25397, 307, 1974, 322, 1293, 4881, 13], "temperature": 0.0, "avg_logprob": -0.10910098049618783, "compression_ratio": 1.7773584905660378, "no_speech_prob": 2.4203420252888463e-05}, {"id": 267, "seek": 144312, "start": 1443.12, "end": 1453.2399999999998, "text": " So that's how you can link basically different devices and allow the top level driver to", "tokens": [407, 300, 311, 577, 291, 393, 2113, 1936, 819, 5759, 293, 2089, 264, 1192, 1496, 6787, 281], "temperature": 0.0, "avg_logprob": -0.11345321529514187, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.3191270227252971e-05}, {"id": 268, "seek": 144312, "start": 1453.2399999999998, "end": 1458.36, "text": " retrieve access to the sub devs that you want to use.", "tokens": [30254, 2105, 281, 264, 1422, 1905, 82, 300, 291, 528, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.11345321529514187, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.3191270227252971e-05}, {"id": 269, "seek": 144312, "start": 1458.36, "end": 1461.84, "text": " So this is very flexible, of course, because then the same, for example, sensor driver", "tokens": [407, 341, 307, 588, 11358, 11, 295, 1164, 11, 570, 550, 264, 912, 11, 337, 1365, 11, 10200, 6787], "temperature": 0.0, "avg_logprob": -0.11345321529514187, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.3191270227252971e-05}, {"id": 270, "seek": 144312, "start": 1461.84, "end": 1466.28, "text": " can be connected to lots of different platforms and lots of different situations.", "tokens": [393, 312, 4582, 281, 3195, 295, 819, 9473, 293, 3195, 295, 819, 6851, 13], "temperature": 0.0, "avg_logprob": -0.11345321529514187, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.3191270227252971e-05}, {"id": 271, "seek": 144312, "start": 1466.28, "end": 1471.6399999999999, "text": " So it's really the driver itself doesn't know about how it's connected.", "tokens": [407, 309, 311, 534, 264, 6787, 2564, 1177, 380, 458, 466, 577, 309, 311, 4582, 13], "temperature": 0.0, "avg_logprob": -0.11345321529514187, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.3191270227252971e-05}, {"id": 272, "seek": 147164, "start": 1471.64, "end": 1478.0400000000002, "text": " It's really the device tree and the FWU node graph that tells you how it works.", "tokens": [467, 311, 534, 264, 4302, 4230, 293, 264, 479, 54, 52, 9984, 4295, 300, 5112, 291, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1652839115687779, "compression_ratio": 1.4802259887005649, "no_speech_prob": 2.2770202122046612e-05}, {"id": 273, "seek": 147164, "start": 1478.0400000000002, "end": 1484.88, "text": " So back to async notification, just quickly to illustrate how the top level driver would", "tokens": [407, 646, 281, 382, 34015, 11554, 11, 445, 2661, 281, 23221, 577, 264, 1192, 1496, 6787, 576], "temperature": 0.0, "avg_logprob": -0.1652839115687779, "compression_ratio": 1.4802259887005649, "no_speech_prob": 2.2770202122046612e-05}, {"id": 274, "seek": 147164, "start": 1484.88, "end": 1487.16, "text": " gain access to a sub dev.", "tokens": [6052, 2105, 281, 257, 1422, 1905, 13], "temperature": 0.0, "avg_logprob": -0.1652839115687779, "compression_ratio": 1.4802259887005649, "no_speech_prob": 2.2770202122046612e-05}, {"id": 275, "seek": 147164, "start": 1487.16, "end": 1492.4, "text": " So first, it has to match using that FWU node graph representation.", "tokens": [407, 700, 11, 309, 575, 281, 2995, 1228, 300, 479, 54, 52, 9984, 4295, 10290, 13], "temperature": 0.0, "avg_logprob": -0.1652839115687779, "compression_ratio": 1.4802259887005649, "no_speech_prob": 2.2770202122046612e-05}, {"id": 276, "seek": 149240, "start": 1492.4, "end": 1505.2, "text": " It has to match a particular sub dev and the top level driver registers a notifier which", "tokens": [467, 575, 281, 2995, 257, 1729, 1422, 1905, 293, 264, 1192, 1496, 6787, 38351, 257, 406, 9902, 597], "temperature": 0.0, "avg_logprob": -0.13382015853631693, "compression_ratio": 1.7125, "no_speech_prob": 2.260638757434208e-05}, {"id": 277, "seek": 149240, "start": 1505.2, "end": 1509.72, "text": " has a number of callbacks that will be called when a particular device becomes available", "tokens": [575, 257, 1230, 295, 818, 17758, 300, 486, 312, 1219, 562, 257, 1729, 4302, 3643, 2435], "temperature": 0.0, "avg_logprob": -0.13382015853631693, "compression_ratio": 1.7125, "no_speech_prob": 2.260638757434208e-05}, {"id": 278, "seek": 149240, "start": 1509.72, "end": 1517.3200000000002, "text": " and then it can pretty much bind to that device and then the matching sub dev will be registered", "tokens": [293, 550, 309, 393, 1238, 709, 14786, 281, 300, 4302, 293, 550, 264, 14324, 1422, 1905, 486, 312, 13968], "temperature": 0.0, "avg_logprob": -0.13382015853631693, "compression_ratio": 1.7125, "no_speech_prob": 2.260638757434208e-05}, {"id": 279, "seek": 151732, "start": 1517.32, "end": 1523.3999999999999, "text": " with the top level vfoil to device and then everything can be linked together and the", "tokens": [365, 264, 1192, 1496, 371, 16931, 388, 281, 4302, 293, 550, 1203, 393, 312, 9408, 1214, 293, 264], "temperature": 0.0, "avg_logprob": -0.15014942743444956, "compression_ratio": 1.6726457399103138, "no_speech_prob": 2.350652175664436e-05}, {"id": 280, "seek": 151732, "start": 1523.3999999999999, "end": 1528.8799999999999, "text": " top level driver actually has a pointer to a vfoil to sub dev that it can use to apply", "tokens": [1192, 1496, 6787, 767, 575, 257, 23918, 281, 257, 371, 16931, 388, 281, 1422, 1905, 300, 309, 393, 764, 281, 3079], "temperature": 0.0, "avg_logprob": -0.15014942743444956, "compression_ratio": 1.6726457399103138, "no_speech_prob": 2.350652175664436e-05}, {"id": 281, "seek": 151732, "start": 1528.8799999999999, "end": 1535.36, "text": " some actions like stop streaming, stop streaming or configure the format or things like that.", "tokens": [512, 5909, 411, 1590, 11791, 11, 1590, 11791, 420, 22162, 264, 7877, 420, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.15014942743444956, "compression_ratio": 1.6726457399103138, "no_speech_prob": 2.350652175664436e-05}, {"id": 282, "seek": 151732, "start": 1535.36, "end": 1539.96, "text": " So this is how it kind of all works together.", "tokens": [407, 341, 307, 577, 309, 733, 295, 439, 1985, 1214, 13], "temperature": 0.0, "avg_logprob": -0.15014942743444956, "compression_ratio": 1.6726457399103138, "no_speech_prob": 2.350652175664436e-05}, {"id": 283, "seek": 151732, "start": 1539.96, "end": 1543.4399999999998, "text": " So yeah, that's also when the media controller API comes in.", "tokens": [407, 1338, 11, 300, 311, 611, 562, 264, 3021, 10561, 9362, 1487, 294, 13], "temperature": 0.0, "avg_logprob": -0.15014942743444956, "compression_ratio": 1.6726457399103138, "no_speech_prob": 2.350652175664436e-05}, {"id": 284, "seek": 154344, "start": 1543.44, "end": 1548.88, "text": " So the media controller API is there to control the topology of how these different devices", "tokens": [407, 264, 3021, 10561, 9362, 307, 456, 281, 1969, 264, 1192, 1793, 295, 577, 613, 819, 5759], "temperature": 0.0, "avg_logprob": -0.1430267826203377, "compression_ratio": 1.461111111111111, "no_speech_prob": 1.912399056891445e-05}, {"id": 285, "seek": 154344, "start": 1548.88, "end": 1552.52, "text": " are actually connected between one another.", "tokens": [366, 767, 4582, 1296, 472, 1071, 13], "temperature": 0.0, "avg_logprob": -0.1430267826203377, "compression_ratio": 1.461111111111111, "no_speech_prob": 1.912399056891445e-05}, {"id": 286, "seek": 154344, "start": 1552.52, "end": 1556.24, "text": " So it also implements particular functions.", "tokens": [407, 309, 611, 704, 17988, 1729, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1430267826203377, "compression_ratio": 1.461111111111111, "no_speech_prob": 1.912399056891445e-05}, {"id": 287, "seek": 154344, "start": 1556.24, "end": 1564.28, "text": " So you can say this block attached to this sub dev is an entity of this kind, okay?", "tokens": [407, 291, 393, 584, 341, 3461, 8570, 281, 341, 1422, 1905, 307, 364, 13977, 295, 341, 733, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.1430267826203377, "compression_ratio": 1.461111111111111, "no_speech_prob": 1.912399056891445e-05}, {"id": 288, "seek": 156428, "start": 1564.28, "end": 1574.16, "text": " And each sub dev has an associated media entity which lists pads which are basically in and", "tokens": [400, 1184, 1422, 1905, 575, 364, 6615, 3021, 13977, 597, 14511, 19179, 597, 366, 1936, 294, 293], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 289, "seek": 156428, "start": 1574.16, "end": 1579.24, "text": " out points that you can use to connect other devices.", "tokens": [484, 2793, 300, 291, 393, 764, 281, 1745, 661, 5759, 13], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 290, "seek": 156428, "start": 1579.24, "end": 1583.6399999999999, "text": " And then you can create links between these pads which represent the actual connection", "tokens": [400, 550, 291, 393, 1884, 6123, 1296, 613, 19179, 597, 2906, 264, 3539, 4984], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 291, "seek": 156428, "start": 1583.6399999999999, "end": 1584.6399999999999, "text": " in the hardware.", "tokens": [294, 264, 8837, 13], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 292, "seek": 156428, "start": 1584.6399999999999, "end": 1588.28, "text": " So for example, you could have multiple links that are possible for one device and then", "tokens": [407, 337, 1365, 11, 291, 727, 362, 3866, 6123, 300, 366, 1944, 337, 472, 4302, 293, 550], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 293, "seek": 156428, "start": 1588.28, "end": 1591.8, "text": " you could decide to enable one at runtime.", "tokens": [291, 727, 4536, 281, 9528, 472, 412, 34474, 13], "temperature": 0.0, "avg_logprob": -0.10769094422806141, "compression_ratio": 1.7194570135746607, "no_speech_prob": 5.012319888919592e-06}, {"id": 294, "seek": 159180, "start": 1591.8, "end": 1595.96, "text": " So for example, if you have a multiplexer or something like that, that would be a typical", "tokens": [407, 337, 1365, 11, 498, 291, 362, 257, 3311, 2021, 260, 420, 746, 411, 300, 11, 300, 576, 312, 257, 7476], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 295, "seek": 159180, "start": 1595.96, "end": 1599.76, "text": " case where you would just select one of the inputs and have just one output.", "tokens": [1389, 689, 291, 576, 445, 3048, 472, 295, 264, 15743, 293, 362, 445, 472, 5598, 13], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 296, "seek": 159180, "start": 1599.76, "end": 1605.76, "text": " So this is really the API that allows you to configure the topology of the whole pipeline", "tokens": [407, 341, 307, 534, 264, 9362, 300, 4045, 291, 281, 22162, 264, 1192, 1793, 295, 264, 1379, 15517], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 297, "seek": 159180, "start": 1605.76, "end": 1610.0, "text": " and how everything is connected together.", "tokens": [293, 577, 1203, 307, 4582, 1214, 13], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 298, "seek": 159180, "start": 1610.0, "end": 1613.9199999999998, "text": " There's also some runtime validation to make sure that when you connect two entities, they", "tokens": [821, 311, 611, 512, 34474, 24071, 281, 652, 988, 300, 562, 291, 1745, 732, 16667, 11, 436], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 299, "seek": 159180, "start": 1613.9199999999998, "end": 1619.08, "text": " are configured with the same pixel format so that everyone agrees on what the data will", "tokens": [366, 30538, 365, 264, 912, 19261, 7877, 370, 300, 1518, 26383, 322, 437, 264, 1412, 486], "temperature": 0.0, "avg_logprob": -0.10773846862512991, "compression_ratio": 1.697508896797153, "no_speech_prob": 2.0437464627320878e-05}, {"id": 300, "seek": 161908, "start": 1619.08, "end": 1623.32, "text": " be, the data that will be transferred.", "tokens": [312, 11, 264, 1412, 300, 486, 312, 15809, 13], "temperature": 0.0, "avg_logprob": -0.12171270630576393, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.519100806035567e-05}, {"id": 301, "seek": 161908, "start": 1623.32, "end": 1628.28, "text": " And there is a user space utility called media CTL that you can use to configure these links.", "tokens": [400, 456, 307, 257, 4195, 1901, 14877, 1219, 3021, 19529, 43, 300, 291, 393, 764, 281, 22162, 613, 6123, 13], "temperature": 0.0, "avg_logprob": -0.12171270630576393, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.519100806035567e-05}, {"id": 302, "seek": 161908, "start": 1628.28, "end": 1634.4399999999998, "text": " So for example, here I'm configuring pad number one of this sub dev to be connected to pad", "tokens": [407, 337, 1365, 11, 510, 286, 478, 6662, 1345, 6887, 1230, 472, 295, 341, 1422, 1905, 281, 312, 4582, 281, 6887], "temperature": 0.0, "avg_logprob": -0.12171270630576393, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.519100806035567e-05}, {"id": 303, "seek": 161908, "start": 1634.4399999999998, "end": 1640.84, "text": " number zero of this sub dev and the one indicates that the link should be enabled.", "tokens": [1230, 4018, 295, 341, 1422, 1905, 293, 264, 472, 16203, 300, 264, 2113, 820, 312, 15172, 13], "temperature": 0.0, "avg_logprob": -0.12171270630576393, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.519100806035567e-05}, {"id": 304, "seek": 161908, "start": 1640.84, "end": 1642.3999999999999, "text": " So yeah, it's a bit blurry.", "tokens": [407, 1338, 11, 309, 311, 257, 857, 37644, 13], "temperature": 0.0, "avg_logprob": -0.12171270630576393, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.519100806035567e-05}, {"id": 305, "seek": 164240, "start": 1642.4, "end": 1650.6000000000001, "text": " This is kind of just to give you some kind of big idea or kind of a head start on that,", "tokens": [639, 307, 733, 295, 445, 281, 976, 291, 512, 733, 295, 955, 1558, 420, 733, 295, 257, 1378, 722, 322, 300, 11], "temperature": 0.0, "avg_logprob": -0.1492240887421828, "compression_ratio": 1.654867256637168, "no_speech_prob": 7.63537627790356e-06}, {"id": 306, "seek": 164240, "start": 1650.6000000000001, "end": 1656.24, "text": " but it's definitely complex, so it's normal that it seems a little bit blurry, it's just", "tokens": [457, 309, 311, 2138, 3997, 11, 370, 309, 311, 2710, 300, 309, 2544, 257, 707, 857, 37644, 11, 309, 311, 445], "temperature": 0.0, "avg_logprob": -0.1492240887421828, "compression_ratio": 1.654867256637168, "no_speech_prob": 7.63537627790356e-06}, {"id": 307, "seek": 164240, "start": 1656.24, "end": 1662.16, "text": " in case you have to work on that, then you know what are the things involved in this.", "tokens": [294, 1389, 291, 362, 281, 589, 322, 300, 11, 550, 291, 458, 437, 366, 264, 721, 3288, 294, 341, 13], "temperature": 0.0, "avg_logprob": -0.1492240887421828, "compression_ratio": 1.654867256637168, "no_speech_prob": 7.63537627790356e-06}, {"id": 308, "seek": 164240, "start": 1662.16, "end": 1665.2800000000002, "text": " So in the end, we can end up with very complex pipelines, okay?", "tokens": [407, 294, 264, 917, 11, 321, 393, 917, 493, 365, 588, 3997, 40168, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.1492240887421828, "compression_ratio": 1.654867256637168, "no_speech_prob": 7.63537627790356e-06}, {"id": 309, "seek": 164240, "start": 1665.2800000000002, "end": 1668.3600000000001, "text": " So each of the green blocks are sub devs, okay?", "tokens": [407, 1184, 295, 264, 3092, 8474, 366, 1422, 1905, 82, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.1492240887421828, "compression_ratio": 1.654867256637168, "no_speech_prob": 7.63537627790356e-06}, {"id": 310, "seek": 166836, "start": 1668.36, "end": 1673.76, "text": " So they represent a specific functionality that can be connected in different ways.", "tokens": [407, 436, 2906, 257, 2685, 14980, 300, 393, 312, 4582, 294, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 311, "seek": 166836, "start": 1673.76, "end": 1681.6799999999998, "text": " And the yellow blocks are the actual DMA engine, so the video nodes that are visible from user", "tokens": [400, 264, 5566, 8474, 366, 264, 3539, 413, 9998, 2848, 11, 370, 264, 960, 13891, 300, 366, 8974, 490, 4195], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 312, "seek": 166836, "start": 1681.6799999999998, "end": 1687.24, "text": " space that programs can connect to to receive the data.", "tokens": [1901, 300, 4268, 393, 1745, 281, 281, 4774, 264, 1412, 13], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 313, "seek": 166836, "start": 1687.24, "end": 1690.7199999999998, "text": " But of course, if you haven't configured the rest of the chain properly, then there will", "tokens": [583, 295, 1164, 11, 498, 291, 2378, 380, 30538, 264, 1472, 295, 264, 5021, 6108, 11, 550, 456, 486], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 314, "seek": 166836, "start": 1690.7199999999998, "end": 1692.0, "text": " be no data available.", "tokens": [312, 572, 1412, 2435, 13], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 315, "seek": 166836, "start": 1692.0, "end": 1696.1999999999998, "text": " So this is really what you use at the end when everything is configured and everything", "tokens": [407, 341, 307, 534, 437, 291, 764, 412, 264, 917, 562, 1203, 307, 30538, 293, 1203], "temperature": 0.0, "avg_logprob": -0.12150675841052123, "compression_ratio": 1.6488549618320612, "no_speech_prob": 8.786802936811e-06}, {"id": 316, "seek": 169620, "start": 1696.2, "end": 1700.3600000000001, "text": " is ready and it works.", "tokens": [307, 1919, 293, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 317, "seek": 169620, "start": 1700.3600000000001, "end": 1703.92, "text": " Okay, so that was for the general pipeline integration thing.", "tokens": [1033, 11, 370, 300, 390, 337, 264, 2674, 15517, 10980, 551, 13], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 318, "seek": 169620, "start": 1703.92, "end": 1706.76, "text": " Now let's talk about ISPs more specifically.", "tokens": [823, 718, 311, 751, 466, 6205, 23043, 544, 4682, 13], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 319, "seek": 169620, "start": 1706.76, "end": 1714.88, "text": " So ISPs are just a kind of sub dev and media entity.", "tokens": [407, 6205, 23043, 366, 445, 257, 733, 295, 1422, 1905, 293, 3021, 13977, 13], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 320, "seek": 169620, "start": 1714.88, "end": 1720.56, "text": " And they typically have an internal pipeline with multiple things in it, so we don't necessarily", "tokens": [400, 436, 5850, 362, 364, 6920, 15517, 365, 3866, 721, 294, 309, 11, 370, 321, 500, 380, 4725], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 321, "seek": 169620, "start": 1720.56, "end": 1723.3600000000001, "text": " represent the internal pipeline unless it's relevant.", "tokens": [2906, 264, 6920, 15517, 5969, 309, 311, 7340, 13], "temperature": 0.0, "avg_logprob": -0.13565334641789817, "compression_ratio": 1.5633802816901408, "no_speech_prob": 1.592002809047699e-05}, {"id": 322, "seek": 172336, "start": 1723.36, "end": 1728.1599999999999, "text": " So there will normally just be one sub dev for the ISP.", "tokens": [407, 456, 486, 5646, 445, 312, 472, 1422, 1905, 337, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 323, "seek": 172336, "start": 1728.1599999999999, "end": 1734.12, "text": " But this sub dev will have highly specific parameters.", "tokens": [583, 341, 1422, 1905, 486, 362, 5405, 2685, 9834, 13], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 324, "seek": 172336, "start": 1734.12, "end": 1736.8799999999999, "text": " Like I said, it depends on the hardware implementation.", "tokens": [1743, 286, 848, 11, 309, 5946, 322, 264, 8837, 11420, 13], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 325, "seek": 172336, "start": 1736.8799999999999, "end": 1743.4799999999998, "text": " So the representation of the parameters that you give to the hardware will differ from", "tokens": [407, 264, 10290, 295, 264, 9834, 300, 291, 976, 281, 264, 8837, 486, 743, 490], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 326, "seek": 172336, "start": 1743.4799999999998, "end": 1747.9199999999998, "text": " one implementation to another.", "tokens": [472, 11420, 281, 1071, 13], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 327, "seek": 172336, "start": 1747.9199999999998, "end": 1753.0, "text": " So it means that it's actually very hard to have like a generic interface that will work", "tokens": [407, 309, 1355, 300, 309, 311, 767, 588, 1152, 281, 362, 411, 257, 19577, 9226, 300, 486, 589], "temperature": 0.0, "avg_logprob": -0.10345309904251976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 2.108764965669252e-05}, {"id": 328, "seek": 175300, "start": 1753.0, "end": 1756.8, "text": " for every ISP and that would be the same.", "tokens": [337, 633, 6205, 47, 293, 300, 576, 312, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.16203323163484273, "compression_ratio": 1.489010989010989, "no_speech_prob": 3.310867032269016e-05}, {"id": 329, "seek": 175300, "start": 1756.8, "end": 1765.96, "text": " So instead of that, in V4L2, there is actually driver-specific or hardware-specific structures", "tokens": [407, 2602, 295, 300, 11, 294, 691, 19, 43, 17, 11, 456, 307, 767, 6787, 12, 29258, 420, 8837, 12, 29258, 9227], "temperature": 0.0, "avg_logprob": -0.16203323163484273, "compression_ratio": 1.489010989010989, "no_speech_prob": 3.310867032269016e-05}, {"id": 330, "seek": 175300, "start": 1765.96, "end": 1770.04, "text": " that are used to configure the ISP sub devs.", "tokens": [300, 366, 1143, 281, 22162, 264, 6205, 47, 1422, 1905, 82, 13], "temperature": 0.0, "avg_logprob": -0.16203323163484273, "compression_ratio": 1.489010989010989, "no_speech_prob": 3.310867032269016e-05}, {"id": 331, "seek": 175300, "start": 1770.04, "end": 1780.12, "text": " So the way it works is that we have, so one or more capture video devices that's the same", "tokens": [407, 264, 636, 309, 1985, 307, 300, 321, 362, 11, 370, 472, 420, 544, 7983, 960, 5759, 300, 311, 264, 912], "temperature": 0.0, "avg_logprob": -0.16203323163484273, "compression_ratio": 1.489010989010989, "no_speech_prob": 3.310867032269016e-05}, {"id": 332, "seek": 178012, "start": 1780.12, "end": 1787.6399999999999, "text": " as the dev video zero where you get the typical data, the final data that you want.", "tokens": [382, 264, 1905, 960, 4018, 689, 291, 483, 264, 7476, 1412, 11, 264, 2572, 1412, 300, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.08259502633825525, "compression_ratio": 1.6797752808988764, "no_speech_prob": 1.7715608919388615e-05}, {"id": 333, "seek": 178012, "start": 1787.6399999999999, "end": 1795.7199999999998, "text": " And we have extra video devices that we can use to configure the ISP and to get side information", "tokens": [400, 321, 362, 2857, 960, 5759, 300, 321, 393, 764, 281, 22162, 264, 6205, 47, 293, 281, 483, 1252, 1589], "temperature": 0.0, "avg_logprob": -0.08259502633825525, "compression_ratio": 1.6797752808988764, "no_speech_prob": 1.7715608919388615e-05}, {"id": 334, "seek": 178012, "start": 1795.7199999999998, "end": 1797.2399999999998, "text": " from the ISP.", "tokens": [490, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.08259502633825525, "compression_ratio": 1.6797752808988764, "no_speech_prob": 1.7715608919388615e-05}, {"id": 335, "seek": 178012, "start": 1797.2399999999998, "end": 1803.6799999999998, "text": " So these are the meta output and meta capture video devices.", "tokens": [407, 613, 366, 264, 19616, 5598, 293, 19616, 7983, 960, 5759, 13], "temperature": 0.0, "avg_logprob": -0.08259502633825525, "compression_ratio": 1.6797752808988764, "no_speech_prob": 1.7715608919388615e-05}, {"id": 336, "seek": 178012, "start": 1803.6799999999998, "end": 1806.4799999999998, "text": " So the meta output is there for parameters.", "tokens": [407, 264, 19616, 5598, 307, 456, 337, 9834, 13], "temperature": 0.0, "avg_logprob": -0.08259502633825525, "compression_ratio": 1.6797752808988764, "no_speech_prob": 1.7715608919388615e-05}, {"id": 337, "seek": 180648, "start": 1806.48, "end": 1810.68, "text": " So in V4L2, output is when you provide something to the driver, not when you get something", "tokens": [407, 294, 691, 19, 43, 17, 11, 5598, 307, 562, 291, 2893, 746, 281, 264, 6787, 11, 406, 562, 291, 483, 746], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 338, "seek": 180648, "start": 1810.68, "end": 1814.84, "text": " from it, which is a bit confusing, but that's where it is.", "tokens": [490, 309, 11, 597, 307, 257, 857, 13181, 11, 457, 300, 311, 689, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 339, "seek": 180648, "start": 1814.84, "end": 1819.88, "text": " So with that, basically, you will also use the same Q interface as you have with a video", "tokens": [407, 365, 300, 11, 1936, 11, 291, 486, 611, 764, 264, 912, 1249, 9226, 382, 291, 362, 365, 257, 960], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 340, "seek": 180648, "start": 1819.88, "end": 1820.88, "text": " device.", "tokens": [4302, 13], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 341, "seek": 180648, "start": 1820.88, "end": 1825.4, "text": " But instead of having pixels in the buffers, you will have particular structures that correspond", "tokens": [583, 2602, 295, 1419, 18668, 294, 264, 9204, 433, 11, 291, 486, 362, 1729, 9227, 300, 6805], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 342, "seek": 180648, "start": 1825.4, "end": 1829.88, "text": " to the parameters of the ISP that you are going to fill with a particular configuration.", "tokens": [281, 264, 9834, 295, 264, 6205, 47, 300, 291, 366, 516, 281, 2836, 365, 257, 1729, 11694, 13], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 343, "seek": 180648, "start": 1829.88, "end": 1835.28, "text": " And then you can push that as a buffer to the video device, and the ISP will be configured", "tokens": [400, 550, 291, 393, 2944, 300, 382, 257, 21762, 281, 264, 960, 4302, 11, 293, 264, 6205, 47, 486, 312, 30538], "temperature": 0.0, "avg_logprob": -0.08877187064199736, "compression_ratio": 1.8096885813148789, "no_speech_prob": 1.2399606021062937e-05}, {"id": 344, "seek": 183528, "start": 1835.28, "end": 1837.76, "text": " to use those parameters.", "tokens": [281, 764, 729, 9834, 13], "temperature": 0.0, "avg_logprob": -0.10032126744588216, "compression_ratio": 1.6402116402116402, "no_speech_prob": 1.9184863049304113e-05}, {"id": 345, "seek": 183528, "start": 1837.76, "end": 1846.96, "text": " For the meta capture, which is the data provided by the ISP, you get the typical feedback information", "tokens": [1171, 264, 19616, 7983, 11, 597, 307, 264, 1412, 5649, 538, 264, 6205, 47, 11, 291, 483, 264, 7476, 5824, 1589], "temperature": 0.0, "avg_logprob": -0.10032126744588216, "compression_ratio": 1.6402116402116402, "no_speech_prob": 1.9184863049304113e-05}, {"id": 346, "seek": 183528, "start": 1846.96, "end": 1852.68, "text": " from the ISP, so essentially it will be statistics about how sharp the picture is, how dark the", "tokens": [490, 264, 6205, 47, 11, 370, 4476, 309, 486, 312, 12523, 466, 577, 8199, 264, 3036, 307, 11, 577, 2877, 264], "temperature": 0.0, "avg_logprob": -0.10032126744588216, "compression_ratio": 1.6402116402116402, "no_speech_prob": 1.9184863049304113e-05}, {"id": 347, "seek": 183528, "start": 1852.68, "end": 1858.04, "text": " picture is, things like that, so that you can use this information to create a feedback", "tokens": [3036, 307, 11, 721, 411, 300, 11, 370, 300, 291, 393, 764, 341, 1589, 281, 1884, 257, 5824], "temperature": 0.0, "avg_logprob": -0.10032126744588216, "compression_ratio": 1.6402116402116402, "no_speech_prob": 1.9184863049304113e-05}, {"id": 348, "seek": 185804, "start": 1858.04, "end": 1865.8, "text": " loop and then provide new parameters in the output video device to properly configure the", "tokens": [6367, 293, 550, 2893, 777, 9834, 294, 264, 5598, 960, 4302, 281, 6108, 22162, 264], "temperature": 0.0, "avg_logprob": -0.13127699205952306, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.5410380001412705e-05}, {"id": 349, "seek": 185804, "start": 1865.8, "end": 1870.36, "text": " ISP to respond to a change in the scene or something like that.", "tokens": [6205, 47, 281, 4196, 281, 257, 1319, 294, 264, 4145, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13127699205952306, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.5410380001412705e-05}, {"id": 350, "seek": 185804, "start": 1870.36, "end": 1877.12, "text": " So for example, if you switch off a light and turn a different one on that has a different", "tokens": [407, 337, 1365, 11, 498, 291, 3679, 766, 257, 1442, 293, 1261, 257, 819, 472, 322, 300, 575, 257, 819], "temperature": 0.0, "avg_logprob": -0.13127699205952306, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.5410380001412705e-05}, {"id": 351, "seek": 185804, "start": 1877.12, "end": 1882.28, "text": " color temperature, for example, then you will get the information from this statistics,", "tokens": [2017, 4292, 11, 337, 1365, 11, 550, 291, 486, 483, 264, 1589, 490, 341, 12523, 11], "temperature": 0.0, "avg_logprob": -0.13127699205952306, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.5410380001412705e-05}, {"id": 352, "seek": 185804, "start": 1882.28, "end": 1887.48, "text": " and you will be able to adjust the parameters to respond to that change.", "tokens": [293, 291, 486, 312, 1075, 281, 4369, 264, 9834, 281, 4196, 281, 300, 1319, 13], "temperature": 0.0, "avg_logprob": -0.13127699205952306, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.5410380001412705e-05}, {"id": 353, "seek": 188748, "start": 1887.48, "end": 1890.3600000000001, "text": " So that's how it works.", "tokens": [407, 300, 311, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 354, "seek": 188748, "start": 1890.3600000000001, "end": 1898.2, "text": " Here is an example from the RK ISP, the Rockchip ISP1, where you can typically find this same", "tokens": [1692, 307, 364, 1365, 490, 264, 497, 42, 6205, 47, 11, 264, 6922, 339, 647, 6205, 47, 16, 11, 689, 291, 393, 5850, 915, 341, 912], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 355, "seek": 188748, "start": 1898.2, "end": 1899.2, "text": " topology.", "tokens": [1192, 1793, 13], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 356, "seek": 188748, "start": 1899.2, "end": 1901.44, "text": " So the ISP is here.", "tokens": [407, 264, 6205, 47, 307, 510, 13], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 357, "seek": 188748, "start": 1901.44, "end": 1910.84, "text": " It actually has extra sub-devs before having the video devices for capturing the pixels.", "tokens": [467, 767, 575, 2857, 1422, 12, 40343, 82, 949, 1419, 264, 960, 5759, 337, 23384, 264, 18668, 13], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 358, "seek": 188748, "start": 1910.84, "end": 1915.44, "text": " But you also find this statistic video device and params video device.", "tokens": [583, 291, 611, 915, 341, 29588, 960, 4302, 293, 971, 4070, 960, 4302, 13], "temperature": 0.0, "avg_logprob": -0.20534474662180696, "compression_ratio": 1.535, "no_speech_prob": 5.4247273510554805e-05}, {"id": 359, "seek": 191544, "start": 1915.44, "end": 1921.4, "text": " So the params will take a particular structure here that you can configure, and the statistics", "tokens": [407, 264, 971, 4070, 486, 747, 257, 1729, 3877, 510, 300, 291, 393, 22162, 11, 293, 264, 12523], "temperature": 0.0, "avg_logprob": -0.14138568344936575, "compression_ratio": 1.5, "no_speech_prob": 2.4255181415355764e-05}, {"id": 360, "seek": 191544, "start": 1921.4, "end": 1928.56, "text": " will take another one with the information provided by the ISP.", "tokens": [486, 747, 1071, 472, 365, 264, 1589, 5649, 538, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.14138568344936575, "compression_ratio": 1.5, "no_speech_prob": 2.4255181415355764e-05}, {"id": 361, "seek": 191544, "start": 1928.56, "end": 1936.8400000000001, "text": " Okay, so that gives you kind of a big overview of how all of this is supported in V4L2 in", "tokens": [1033, 11, 370, 300, 2709, 291, 733, 295, 257, 955, 12492, 295, 577, 439, 295, 341, 307, 8104, 294, 691, 19, 43, 17, 294], "temperature": 0.0, "avg_logprob": -0.14138568344936575, "compression_ratio": 1.5, "no_speech_prob": 2.4255181415355764e-05}, {"id": 362, "seek": 191544, "start": 1936.8400000000001, "end": 1938.64, "text": " Mainline Linux.", "tokens": [12383, 1889, 18734, 13], "temperature": 0.0, "avg_logprob": -0.14138568344936575, "compression_ratio": 1.5, "no_speech_prob": 2.4255181415355764e-05}, {"id": 363, "seek": 191544, "start": 1938.64, "end": 1943.6000000000001, "text": " So now let's take a look at the thing I actually worked on for the all-winner cameras.", "tokens": [407, 586, 718, 311, 747, 257, 574, 412, 264, 551, 286, 767, 2732, 322, 337, 264, 439, 12, 9136, 1193, 8622, 13], "temperature": 0.0, "avg_logprob": -0.14138568344936575, "compression_ratio": 1.5, "no_speech_prob": 2.4255181415355764e-05}, {"id": 364, "seek": 194360, "start": 1943.6, "end": 1952.1999999999998, "text": " So using, again, these same interfaces for the particular use case of all-winner cameras,", "tokens": [407, 1228, 11, 797, 11, 613, 912, 28416, 337, 264, 1729, 764, 1389, 295, 439, 12, 9136, 1193, 8622, 11], "temperature": 0.0, "avg_logprob": -0.2527452725083081, "compression_ratio": 1.484472049689441, "no_speech_prob": 4.74875487270765e-05}, {"id": 365, "seek": 194360, "start": 1952.1999999999998, "end": 1956.12, "text": " or cameras, you know, interfaced with all-winner SoCs.", "tokens": [420, 8622, 11, 291, 458, 11, 14510, 3839, 365, 439, 12, 9136, 1193, 407, 33290, 13], "temperature": 0.0, "avg_logprob": -0.2527452725083081, "compression_ratio": 1.484472049689441, "no_speech_prob": 4.74875487270765e-05}, {"id": 366, "seek": 194360, "start": 1956.12, "end": 1968.0, "text": " So in the all-winner second-generation hardware implementation, we have MiPy CSI2 controllers,", "tokens": [407, 294, 264, 439, 12, 9136, 1193, 1150, 12, 30372, 8837, 11420, 11, 321, 362, 10204, 47, 88, 9460, 40, 17, 26903, 11], "temperature": 0.0, "avg_logprob": -0.2527452725083081, "compression_ratio": 1.484472049689441, "no_speech_prob": 4.74875487270765e-05}, {"id": 367, "seek": 196800, "start": 1968.0, "end": 1974.2, "text": " which are really the components connected to the actual bus, the actual MiPy CSI2 bus,", "tokens": [597, 366, 534, 264, 6677, 4582, 281, 264, 3539, 1255, 11, 264, 3539, 10204, 47, 88, 9460, 40, 17, 1255, 11], "temperature": 0.0, "avg_logprob": -0.11902089648776584, "compression_ratio": 1.5892857142857142, "no_speech_prob": 3.259099685237743e-05}, {"id": 368, "seek": 196800, "start": 1974.2, "end": 1981.36, "text": " which are separate hardware blocks that are connected through a FIFO to the CSI controller,", "tokens": [597, 366, 4994, 8837, 8474, 300, 366, 4582, 807, 257, 479, 12775, 46, 281, 264, 9460, 40, 10561, 11], "temperature": 0.0, "avg_logprob": -0.11902089648776584, "compression_ratio": 1.5892857142857142, "no_speech_prob": 3.259099685237743e-05}, {"id": 369, "seek": 196800, "start": 1981.36, "end": 1986.48, "text": " which is really just a DMA engine that will get some pixels in and write them to memory,", "tokens": [597, 307, 534, 445, 257, 413, 9998, 2848, 300, 486, 483, 512, 18668, 294, 293, 2464, 552, 281, 4675, 11], "temperature": 0.0, "avg_logprob": -0.11902089648776584, "compression_ratio": 1.5892857142857142, "no_speech_prob": 3.259099685237743e-05}, {"id": 370, "seek": 196800, "start": 1986.48, "end": 1989.88, "text": " basically, with some formatting and timing things.", "tokens": [1936, 11, 365, 512, 39366, 293, 10822, 721, 13], "temperature": 0.0, "avg_logprob": -0.11902089648776584, "compression_ratio": 1.5892857142857142, "no_speech_prob": 3.259099685237743e-05}, {"id": 371, "seek": 196800, "start": 1989.88, "end": 1992.2, "text": " But essentially, that's what it does.", "tokens": [583, 4476, 11, 300, 311, 437, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.11902089648776584, "compression_ratio": 1.5892857142857142, "no_speech_prob": 3.259099685237743e-05}, {"id": 372, "seek": 199220, "start": 1992.2, "end": 2001.32, "text": " So this CSI controller again was already supported in Mainline, but not the MiPy CSI2 controllers.", "tokens": [407, 341, 9460, 40, 10561, 797, 390, 1217, 8104, 294, 12383, 1889, 11, 457, 406, 264, 10204, 47, 88, 9460, 40, 17, 26903, 13], "temperature": 0.0, "avg_logprob": -0.08934999822260259, "compression_ratio": 1.6854460093896713, "no_speech_prob": 7.76187425799435e-06}, {"id": 373, "seek": 199220, "start": 2001.32, "end": 2005.64, "text": " So the CSI controller actually also needs to be configured specifically to take its", "tokens": [407, 264, 9460, 40, 10561, 767, 611, 2203, 281, 312, 30538, 4682, 281, 747, 1080], "temperature": 0.0, "avg_logprob": -0.08934999822260259, "compression_ratio": 1.6854460093896713, "no_speech_prob": 7.76187425799435e-06}, {"id": 374, "seek": 199220, "start": 2005.64, "end": 2010.92, "text": " input from the MiPy CSI2 controller instead of the parallel interface, which is the only", "tokens": [4846, 490, 264, 10204, 47, 88, 9460, 40, 17, 10561, 2602, 295, 264, 8952, 9226, 11, 597, 307, 264, 787], "temperature": 0.0, "avg_logprob": -0.08934999822260259, "compression_ratio": 1.6854460093896713, "no_speech_prob": 7.76187425799435e-06}, {"id": 375, "seek": 199220, "start": 2010.92, "end": 2013.04, "text": " choice that was supported before.", "tokens": [3922, 300, 390, 8104, 949, 13], "temperature": 0.0, "avg_logprob": -0.08934999822260259, "compression_ratio": 1.6854460093896713, "no_speech_prob": 7.76187425799435e-06}, {"id": 376, "seek": 199220, "start": 2013.04, "end": 2016.16, "text": " So that's one of the things I had to add support for.", "tokens": [407, 300, 311, 472, 295, 264, 721, 286, 632, 281, 909, 1406, 337, 13], "temperature": 0.0, "avg_logprob": -0.08934999822260259, "compression_ratio": 1.6854460093896713, "no_speech_prob": 7.76187425799435e-06}, {"id": 377, "seek": 201616, "start": 2016.16, "end": 2022.96, "text": " So there was a lot of kind of reworking of the CSI code to support that, even though", "tokens": [407, 456, 390, 257, 688, 295, 733, 295, 319, 22475, 295, 264, 9460, 40, 3089, 281, 1406, 300, 11, 754, 1673], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 378, "seek": 201616, "start": 2022.96, "end": 2027.4, "text": " the biggest rework was actually to support the ISP.", "tokens": [264, 3880, 48376, 390, 767, 281, 1406, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 379, "seek": 201616, "start": 2027.4, "end": 2033.24, "text": " We need to get some information from the sensor to properly configure the MiPy CSI2 interface", "tokens": [492, 643, 281, 483, 512, 1589, 490, 264, 10200, 281, 6108, 22162, 264, 10204, 47, 88, 9460, 40, 17, 9226], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 380, "seek": 201616, "start": 2033.24, "end": 2035.28, "text": " on the receiving side.", "tokens": [322, 264, 10040, 1252, 13], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 381, "seek": 201616, "start": 2035.28, "end": 2040.92, "text": " So for that, we use a V4L2 control that the MiPy CSI2 controller is going to retrieve", "tokens": [407, 337, 300, 11, 321, 764, 257, 691, 19, 43, 17, 1969, 300, 264, 10204, 47, 88, 9460, 40, 17, 10561, 307, 516, 281, 30254], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 382, "seek": 201616, "start": 2040.92, "end": 2044.96, "text": " from the sensor driver through the subdev interface again.", "tokens": [490, 264, 10200, 6787, 807, 264, 1422, 40343, 9226, 797, 13], "temperature": 0.0, "avg_logprob": -0.10988020674090519, "compression_ratio": 1.6864406779661016, "no_speech_prob": 7.513391665270319e-06}, {"id": 383, "seek": 204496, "start": 2044.96, "end": 2053.8, "text": " So it knows what the clock frequency of the bus will be.", "tokens": [407, 309, 3255, 437, 264, 7830, 7893, 295, 264, 1255, 486, 312, 13], "temperature": 0.0, "avg_logprob": -0.17719083436777894, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.9505021555232815e-05}, {"id": 384, "seek": 204496, "start": 2053.8, "end": 2064.84, "text": " And we also use a part of the GenericLinux-Phi API to do that, because MiPy CSI2 works with", "tokens": [400, 321, 611, 764, 257, 644, 295, 264, 15409, 299, 43, 259, 2449, 12, 47, 4954, 9362, 281, 360, 300, 11, 570, 10204, 47, 88, 9460, 40, 17, 1985, 365], "temperature": 0.0, "avg_logprob": -0.17719083436777894, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.9505021555232815e-05}, {"id": 385, "seek": 204496, "start": 2064.84, "end": 2073.0, "text": " a physical, let's say, protocol or physical implementation called DeFi from MiPy, which", "tokens": [257, 4001, 11, 718, 311, 584, 11, 10336, 420, 4001, 11420, 1219, 1346, 13229, 490, 10204, 47, 88, 11, 597], "temperature": 0.0, "avg_logprob": -0.17719083436777894, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.9505021555232815e-05}, {"id": 386, "seek": 207300, "start": 2073.0, "end": 2077.76, "text": " is kind of like the physical layer implementation that is used by this interface.", "tokens": [307, 733, 295, 411, 264, 4001, 4583, 11420, 300, 307, 1143, 538, 341, 9226, 13], "temperature": 0.0, "avg_logprob": -0.1549668312072754, "compression_ratio": 1.536480686695279, "no_speech_prob": 8.789181265456136e-06}, {"id": 387, "seek": 207300, "start": 2077.76, "end": 2082.24, "text": " So there needs to be some configuration about that.", "tokens": [407, 456, 2203, 281, 312, 512, 11694, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.1549668312072754, "compression_ratio": 1.536480686695279, "no_speech_prob": 8.789181265456136e-06}, {"id": 388, "seek": 207300, "start": 2082.24, "end": 2086.0, "text": " And yeah, for that, we use the Linux-Phi API.", "tokens": [400, 1338, 11, 337, 300, 11, 321, 764, 264, 18734, 12, 47, 4954, 9362, 13], "temperature": 0.0, "avg_logprob": -0.1549668312072754, "compression_ratio": 1.536480686695279, "no_speech_prob": 8.789181265456136e-06}, {"id": 389, "seek": 207300, "start": 2086.0, "end": 2094.72, "text": " Now if we look more closely at the platforms that I got interested in, first, for the A83T,", "tokens": [823, 498, 321, 574, 544, 8185, 412, 264, 9473, 300, 286, 658, 3102, 294, 11, 700, 11, 337, 264, 316, 31849, 51, 11], "temperature": 0.0, "avg_logprob": -0.1549668312072754, "compression_ratio": 1.536480686695279, "no_speech_prob": 8.789181265456136e-06}, {"id": 390, "seek": 207300, "start": 2094.72, "end": 2100.4, "text": " there was actually some source code provided in the all-winner vendor releases that we", "tokens": [456, 390, 767, 512, 4009, 3089, 5649, 294, 264, 439, 12, 9136, 1193, 24321, 16952, 300, 321], "temperature": 0.0, "avg_logprob": -0.1549668312072754, "compression_ratio": 1.536480686695279, "no_speech_prob": 8.789181265456136e-06}, {"id": 391, "seek": 210040, "start": 2100.4, "end": 2106.44, "text": " could use as a base to implement a driver, a proper mainline driver.", "tokens": [727, 764, 382, 257, 3096, 281, 4445, 257, 6787, 11, 257, 2296, 2135, 1889, 6787, 13], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 392, "seek": 210040, "start": 2106.44, "end": 2111.88, "text": " So it has lots of magic values in registers, so sometimes it's just writing things to registers", "tokens": [407, 309, 575, 3195, 295, 5585, 4190, 294, 38351, 11, 370, 2171, 309, 311, 445, 3579, 721, 281, 38351], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 393, "seek": 210040, "start": 2111.88, "end": 2116.8, "text": " and we have no idea what it means, but we basically just took that in and did the same", "tokens": [293, 321, 362, 572, 1558, 437, 309, 1355, 11, 457, 321, 1936, 445, 1890, 300, 294, 293, 630, 264, 912], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 394, "seek": 210040, "start": 2116.8, "end": 2118.32, "text": " and it just worked.", "tokens": [293, 309, 445, 2732, 13], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 395, "seek": 210040, "start": 2118.32, "end": 2124.2000000000003, "text": " So there's still some magic involved, but that's unfortunately not so uncommon, so we", "tokens": [407, 456, 311, 920, 512, 5585, 3288, 11, 457, 300, 311, 7015, 406, 370, 29289, 11, 370, 321], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 396, "seek": 210040, "start": 2124.2000000000003, "end": 2126.6, "text": " just have to deal with it.", "tokens": [445, 362, 281, 2028, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.12713422678937816, "compression_ratio": 1.6551724137931034, "no_speech_prob": 6.959939128137194e-06}, {"id": 397, "seek": 212660, "start": 2126.6, "end": 2132.24, "text": " The DeFi part is separate, so it has different control registers, but that was also supported", "tokens": [440, 1346, 13229, 644, 307, 4994, 11, 370, 309, 575, 819, 1969, 38351, 11, 457, 300, 390, 611, 8104], "temperature": 0.0, "avg_logprob": -0.1323627600303063, "compression_ratio": 1.5593220338983051, "no_speech_prob": 1.1108650141977705e-05}, {"id": 398, "seek": 212660, "start": 2132.24, "end": 2139.64, "text": " in that all-winner SDK downstream code, so we could also just reuse the same thing and", "tokens": [294, 300, 439, 12, 9136, 1193, 37135, 30621, 3089, 11, 370, 321, 727, 611, 445, 26225, 264, 912, 551, 293], "temperature": 0.0, "avg_logprob": -0.1323627600303063, "compression_ratio": 1.5593220338983051, "no_speech_prob": 1.1108650141977705e-05}, {"id": 399, "seek": 212660, "start": 2139.64, "end": 2141.72, "text": " it worked.", "tokens": [309, 2732, 13], "temperature": 0.0, "avg_logprob": -0.1323627600303063, "compression_ratio": 1.5593220338983051, "no_speech_prob": 1.1108650141977705e-05}, {"id": 400, "seek": 212660, "start": 2141.72, "end": 2147.64, "text": " For the A31 and V3 supports, so it's like, again, the second generation of all-winner", "tokens": [1171, 264, 316, 12967, 293, 691, 18, 9346, 11, 370, 309, 311, 411, 11, 797, 11, 264, 1150, 5125, 295, 439, 12, 9136, 1193], "temperature": 0.0, "avg_logprob": -0.1323627600303063, "compression_ratio": 1.5593220338983051, "no_speech_prob": 1.1108650141977705e-05}, {"id": 401, "seek": 212660, "start": 2147.64, "end": 2154.92, "text": " SOCs, we have a different MiPy CSI2 controller from the A83T, so it was necessary to write", "tokens": [10621, 33290, 11, 321, 362, 257, 819, 10204, 47, 88, 9460, 40, 17, 10561, 490, 264, 316, 31849, 51, 11, 370, 309, 390, 4818, 281, 2464], "temperature": 0.0, "avg_logprob": -0.1323627600303063, "compression_ratio": 1.5593220338983051, "no_speech_prob": 1.1108650141977705e-05}, {"id": 402, "seek": 215492, "start": 2154.92, "end": 2158.56, "text": " a separate driver for that one.", "tokens": [257, 4994, 6787, 337, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.12086267471313476, "compression_ratio": 1.5738396624472575, "no_speech_prob": 2.0681629393948242e-05}, {"id": 403, "seek": 215492, "start": 2158.56, "end": 2163.04, "text": " There was also reference source code available and some documentation in one of the user", "tokens": [821, 390, 611, 6408, 4009, 3089, 2435, 293, 512, 14333, 294, 472, 295, 264, 4195], "temperature": 0.0, "avg_logprob": -0.12086267471313476, "compression_ratio": 1.5738396624472575, "no_speech_prob": 2.0681629393948242e-05}, {"id": 404, "seek": 215492, "start": 2163.04, "end": 2170.6, "text": " manuals of the platforms, so that was, again, sufficient to write a driver.", "tokens": [9688, 82, 295, 264, 9473, 11, 370, 300, 390, 11, 797, 11, 11563, 281, 2464, 257, 6787, 13], "temperature": 0.0, "avg_logprob": -0.12086267471313476, "compression_ratio": 1.5738396624472575, "no_speech_prob": 2.0681629393948242e-05}, {"id": 405, "seek": 215492, "start": 2170.6, "end": 2176.12, "text": " It turns out that the DeFi part is actually the same controller that is already used for", "tokens": [467, 4523, 484, 300, 264, 1346, 13229, 644, 307, 767, 264, 912, 10561, 300, 307, 1217, 1143, 337], "temperature": 0.0, "avg_logprob": -0.12086267471313476, "compression_ratio": 1.5738396624472575, "no_speech_prob": 2.0681629393948242e-05}, {"id": 406, "seek": 215492, "start": 2176.12, "end": 2184.0, "text": " MiPy DSI, which is a display interface that uses the same physical layer encapsulation,", "tokens": [10204, 47, 88, 15816, 40, 11, 597, 307, 257, 4674, 9226, 300, 4960, 264, 912, 4001, 4583, 38745, 2776, 11], "temperature": 0.0, "avg_logprob": -0.12086267471313476, "compression_ratio": 1.5738396624472575, "no_speech_prob": 2.0681629393948242e-05}, {"id": 407, "seek": 218400, "start": 2184.0, "end": 2185.4, "text": " I would say.", "tokens": [286, 576, 584, 13], "temperature": 0.0, "avg_logprob": -0.1445165047278771, "compression_ratio": 1.5120772946859904, "no_speech_prob": 2.663105260580778e-05}, {"id": 408, "seek": 218400, "start": 2185.4, "end": 2191.56, "text": " So there was actually already a driver for the DeFi block used for MiPy DSI, in which", "tokens": [407, 456, 390, 767, 1217, 257, 6787, 337, 264, 1346, 13229, 3461, 1143, 337, 10204, 47, 88, 15816, 40, 11, 294, 597], "temperature": 0.0, "avg_logprob": -0.1445165047278771, "compression_ratio": 1.5120772946859904, "no_speech_prob": 2.663105260580778e-05}, {"id": 409, "seek": 218400, "start": 2191.56, "end": 2196.84, "text": " case it's in transmit mode, because when you want to drive a display, you push pixels", "tokens": [1389, 309, 311, 294, 17831, 4391, 11, 570, 562, 291, 528, 281, 3332, 257, 4674, 11, 291, 2944, 18668], "temperature": 0.0, "avg_logprob": -0.1445165047278771, "compression_ratio": 1.5120772946859904, "no_speech_prob": 2.663105260580778e-05}, {"id": 410, "seek": 218400, "start": 2196.84, "end": 2204.96, "text": " out, but in that case, we reused that driver but configured it instead in receive mode", "tokens": [484, 11, 457, 294, 300, 1389, 11, 321, 319, 4717, 300, 6787, 457, 30538, 309, 2602, 294, 4774, 4391], "temperature": 0.0, "avg_logprob": -0.1445165047278771, "compression_ratio": 1.5120772946859904, "no_speech_prob": 2.663105260580778e-05}, {"id": 411, "seek": 218400, "start": 2204.96, "end": 2209.08, "text": " for MiPy CSI2, so we could get pixels in.", "tokens": [337, 10204, 47, 88, 9460, 40, 17, 11, 370, 321, 727, 483, 18668, 294, 13], "temperature": 0.0, "avg_logprob": -0.1445165047278771, "compression_ratio": 1.5120772946859904, "no_speech_prob": 2.663105260580778e-05}, {"id": 412, "seek": 220908, "start": 2209.08, "end": 2215.16, "text": " So that was also a change in this driver.", "tokens": [407, 300, 390, 611, 257, 1319, 294, 341, 6787, 13], "temperature": 0.0, "avg_logprob": -0.11987832459536465, "compression_ratio": 1.4045801526717556, "no_speech_prob": 9.49797686189413e-06}, {"id": 413, "seek": 220908, "start": 2215.16, "end": 2221.68, "text": " But it was then necessary to indicate in which direction it should be running, so there were", "tokens": [583, 309, 390, 550, 4818, 281, 13330, 294, 597, 3513, 309, 820, 312, 2614, 11, 370, 456, 645], "temperature": 0.0, "avg_logprob": -0.11987832459536465, "compression_ratio": 1.4045801526717556, "no_speech_prob": 9.49797686189413e-06}, {"id": 414, "seek": 220908, "start": 2221.68, "end": 2229.04, "text": " different approaches that were possible for that.", "tokens": [819, 11587, 300, 645, 1944, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.11987832459536465, "compression_ratio": 1.4045801526717556, "no_speech_prob": 9.49797686189413e-06}, {"id": 415, "seek": 222904, "start": 2229.04, "end": 2241.16, "text": " So I think at the end, we settled for a particular device tree property to configure this mode.", "tokens": [407, 286, 519, 412, 264, 917, 11, 321, 14819, 337, 257, 1729, 4302, 4230, 4707, 281, 22162, 341, 4391, 13], "temperature": 0.0, "avg_logprob": -0.1613651976293447, "compression_ratio": 1.3356643356643356, "no_speech_prob": 1.9114611859549768e-05}, {"id": 416, "seek": 222904, "start": 2241.16, "end": 2249.52, "text": " So the kind of outcome of this work was first some series to support the MiPy CSI2 controllers,", "tokens": [407, 264, 733, 295, 9700, 295, 341, 589, 390, 700, 512, 2638, 281, 1406, 264, 10204, 47, 88, 9460, 40, 17, 26903, 11], "temperature": 0.0, "avg_logprob": -0.1613651976293447, "compression_ratio": 1.3356643356643356, "no_speech_prob": 1.9114611859549768e-05}, {"id": 417, "seek": 224952, "start": 2249.52, "end": 2260.36, "text": " so about 2,600 added lines, so pretty big, that's two new drivers here and here, some", "tokens": [370, 466, 568, 11, 15707, 3869, 3876, 11, 370, 1238, 955, 11, 300, 311, 732, 777, 11590, 510, 293, 510, 11, 512], "temperature": 0.0, "avg_logprob": -0.13993458870129707, "compression_ratio": 1.4378378378378378, "no_speech_prob": 1.319085913564777e-05}, {"id": 418, "seek": 224952, "start": 2260.36, "end": 2266.56, "text": " changes to the DeFi, like I just mentioned, and some device tree changes, so that's most", "tokens": [2962, 281, 264, 1346, 13229, 11, 411, 286, 445, 2835, 11, 293, 512, 4302, 4230, 2962, 11, 370, 300, 311, 881], "temperature": 0.0, "avg_logprob": -0.13993458870129707, "compression_ratio": 1.4378378378378378, "no_speech_prob": 1.319085913564777e-05}, {"id": 419, "seek": 224952, "start": 2266.56, "end": 2267.56, "text": " of it.", "tokens": [295, 309, 13], "temperature": 0.0, "avg_logprob": -0.13993458870129707, "compression_ratio": 1.4378378378378378, "no_speech_prob": 1.319085913564777e-05}, {"id": 420, "seek": 224952, "start": 2267.56, "end": 2275.1, "text": " I started this work in October 2020, and it was merged in the next 6.0 in June 2022.", "tokens": [286, 1409, 341, 589, 294, 7617, 4808, 11, 293, 309, 390, 36427, 294, 264, 958, 1386, 13, 15, 294, 6928, 20229, 13], "temperature": 0.0, "avg_logprob": -0.13993458870129707, "compression_ratio": 1.4378378378378378, "no_speech_prob": 1.319085913564777e-05}, {"id": 421, "seek": 227510, "start": 2275.1, "end": 2280.44, "text": " So now these drivers are upstream, and you can use them, and they work, and I actually", "tokens": [407, 586, 613, 11590, 366, 33915, 11, 293, 291, 393, 764, 552, 11, 293, 436, 589, 11, 293, 286, 767], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 422, "seek": 227510, "start": 2280.44, "end": 2286.96, "text": " got a number of people writing to me and saying that they actually have been using this in", "tokens": [658, 257, 1230, 295, 561, 3579, 281, 385, 293, 1566, 300, 436, 767, 362, 668, 1228, 341, 294], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 423, "seek": 227510, "start": 2286.96, "end": 2292.64, "text": " different situations, and apparently it works pretty well, so I'm pretty glad about that.", "tokens": [819, 6851, 11, 293, 7970, 309, 1985, 1238, 731, 11, 370, 286, 478, 1238, 5404, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 424, "seek": 227510, "start": 2292.64, "end": 2295.7999999999997, "text": " It's pretty nice.", "tokens": [467, 311, 1238, 1481, 13], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 425, "seek": 227510, "start": 2295.7999999999997, "end": 2301.4, "text": " So that was for the MiPy CSI2 part, and let's say the big part of the work was supporting", "tokens": [407, 300, 390, 337, 264, 10204, 47, 88, 9460, 40, 17, 644, 11, 293, 718, 311, 584, 264, 955, 644, 295, 264, 589, 390, 7231], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 426, "seek": 227510, "start": 2301.4, "end": 2304.24, "text": " the ISP.", "tokens": [264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.18183588981628418, "compression_ratio": 1.6623376623376624, "no_speech_prob": 3.739469320862554e-05}, {"id": 427, "seek": 230424, "start": 2304.24, "end": 2312.2, "text": " So the ISP is connected to the CSI controller as well, but on the other side, meaning that", "tokens": [407, 264, 6205, 47, 307, 4582, 281, 264, 9460, 40, 10561, 382, 731, 11, 457, 322, 264, 661, 1252, 11, 3620, 300], "temperature": 0.0, "avg_logprob": -0.09162835324748178, "compression_ratio": 1.5857142857142856, "no_speech_prob": 5.2392577345017344e-05}, {"id": 428, "seek": 230424, "start": 2312.2, "end": 2317.56, "text": " the data will flow from MiPy CSI2 to the CSI controller to the ISP.", "tokens": [264, 1412, 486, 3095, 490, 10204, 47, 88, 9460, 40, 17, 281, 264, 9460, 40, 10561, 281, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.09162835324748178, "compression_ratio": 1.5857142857142856, "no_speech_prob": 5.2392577345017344e-05}, {"id": 429, "seek": 230424, "start": 2317.56, "end": 2325.16, "text": " So there also needed to be some configuration to be able to support that, especially big", "tokens": [407, 456, 611, 2978, 281, 312, 512, 11694, 281, 312, 1075, 281, 1406, 300, 11, 2318, 955], "temperature": 0.0, "avg_logprob": -0.09162835324748178, "compression_ratio": 1.5857142857142856, "no_speech_prob": 5.2392577345017344e-05}, {"id": 430, "seek": 230424, "start": 2325.16, "end": 2330.56, "text": " rework was required because when you start using the ISP, the DMA engine that is used", "tokens": [48376, 390, 4739, 570, 562, 291, 722, 1228, 264, 6205, 47, 11, 264, 413, 9998, 2848, 300, 307, 1143], "temperature": 0.0, "avg_logprob": -0.09162835324748178, "compression_ratio": 1.5857142857142856, "no_speech_prob": 5.2392577345017344e-05}, {"id": 431, "seek": 233056, "start": 2330.56, "end": 2336.2, "text": " to write the data to memory is no longer the DMA engine of the CSI controller.", "tokens": [281, 2464, 264, 1412, 281, 4675, 307, 572, 2854, 264, 413, 9998, 2848, 295, 264, 9460, 40, 10561, 13], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 432, "seek": 233056, "start": 2336.2, "end": 2339.6, "text": " So the CSI has to act like a regular subdev, okay?", "tokens": [407, 264, 9460, 40, 575, 281, 605, 411, 257, 3890, 1422, 40343, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 433, "seek": 233056, "start": 2339.6, "end": 2345.72, "text": " It's no longer the final, let's say the final sync for the data, but it's just one more", "tokens": [467, 311, 572, 2854, 264, 2572, 11, 718, 311, 584, 264, 2572, 20271, 337, 264, 1412, 11, 457, 309, 311, 445, 472, 544], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 434, "seek": 233056, "start": 2345.72, "end": 2346.88, "text": " element in the chain.", "tokens": [4478, 294, 264, 5021, 13], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 435, "seek": 233056, "start": 2346.88, "end": 2352.84, "text": " So the driver had to be reworked to support this different mode of working, where it will", "tokens": [407, 264, 6787, 632, 281, 312, 48376, 292, 281, 1406, 341, 819, 4391, 295, 1364, 11, 689, 309, 486], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 436, "seek": 233056, "start": 2352.84, "end": 2358.4, "text": " basically not register itself as the parent V4L2 device, but instead it will register", "tokens": [1936, 406, 7280, 2564, 382, 264, 2596, 691, 19, 43, 17, 4302, 11, 457, 2602, 309, 486, 7280], "temperature": 0.0, "avg_logprob": -0.13561518846359927, "compression_ratio": 1.6468253968253967, "no_speech_prob": 2.3476964997826144e-05}, {"id": 437, "seek": 235840, "start": 2358.4, "end": 2365.1600000000003, "text": " itself as a subdev and the parent V4L2 device will be the ISP driver, which is again a separate", "tokens": [2564, 382, 257, 1422, 40343, 293, 264, 2596, 691, 19, 43, 17, 4302, 486, 312, 264, 6205, 47, 6787, 11, 597, 307, 797, 257, 4994], "temperature": 0.0, "avg_logprob": -0.15215066361100707, "compression_ratio": 1.467741935483871, "no_speech_prob": 1.0601938811305445e-05}, {"id": 438, "seek": 235840, "start": 2365.1600000000003, "end": 2366.6, "text": " driver.", "tokens": [6787, 13], "temperature": 0.0, "avg_logprob": -0.15215066361100707, "compression_ratio": 1.467741935483871, "no_speech_prob": 1.0601938811305445e-05}, {"id": 439, "seek": 235840, "start": 2366.6, "end": 2373.7200000000003, "text": " So that required quite some rework, and also to support both modes, obviously, because", "tokens": [407, 300, 4739, 1596, 512, 48376, 11, 293, 611, 281, 1406, 1293, 14068, 11, 2745, 11, 570], "temperature": 0.0, "avg_logprob": -0.15215066361100707, "compression_ratio": 1.467741935483871, "no_speech_prob": 1.0601938811305445e-05}, {"id": 440, "seek": 235840, "start": 2373.7200000000003, "end": 2379.76, "text": " not everyone is interested in using the ISP or not every platform even has an ISP.", "tokens": [406, 1518, 307, 3102, 294, 1228, 264, 6205, 47, 420, 406, 633, 3663, 754, 575, 364, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.15215066361100707, "compression_ratio": 1.467741935483871, "no_speech_prob": 1.0601938811305445e-05}, {"id": 441, "seek": 237976, "start": 2379.76, "end": 2390.7200000000003, "text": " So yeah, so there needed to be some, yeah, some rework to support that.", "tokens": [407, 1338, 11, 370, 456, 2978, 281, 312, 512, 11, 1338, 11, 512, 48376, 281, 1406, 300, 13], "temperature": 0.0, "avg_logprob": -0.21767486844744002, "compression_ratio": 1.494047619047619, "no_speech_prob": 1.9744822566281073e-05}, {"id": 442, "seek": 237976, "start": 2390.7200000000003, "end": 2399.44, "text": " What else to say, it has, I don't know if I put it here, but it has some weird way of", "tokens": [708, 1646, 281, 584, 11, 309, 575, 11, 286, 500, 380, 458, 498, 286, 829, 309, 510, 11, 457, 309, 575, 512, 3657, 636, 295], "temperature": 0.0, "avg_logprob": -0.21767486844744002, "compression_ratio": 1.494047619047619, "no_speech_prob": 1.9744822566281073e-05}, {"id": 443, "seek": 237976, "start": 2399.44, "end": 2407.4, "text": " configuring it, basically, in a typical hardware, you would just like have some registers and", "tokens": [6662, 1345, 309, 11, 1936, 11, 294, 257, 7476, 8837, 11, 291, 576, 445, 411, 362, 512, 38351, 293], "temperature": 0.0, "avg_logprob": -0.21767486844744002, "compression_ratio": 1.494047619047619, "no_speech_prob": 1.9744822566281073e-05}, {"id": 444, "seek": 240740, "start": 2407.4, "end": 2413.4, "text": " configure them, and then the effects will be applied on the next frame or something", "tokens": [22162, 552, 11, 293, 550, 264, 5065, 486, 312, 6456, 322, 264, 958, 3920, 420, 746], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 445, "seek": 240740, "start": 2413.4, "end": 2414.4, "text": " like that.", "tokens": [411, 300, 13], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 446, "seek": 240740, "start": 2414.4, "end": 2419.32, "text": " But in that hardware, it actually has a DMA buffer, where you write the new values of", "tokens": [583, 294, 300, 8837, 11, 309, 767, 575, 257, 413, 9998, 21762, 11, 689, 291, 2464, 264, 777, 4190, 295], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 447, "seek": 240740, "start": 2419.32, "end": 2423.88, "text": " the register, and then you trigger some update bits, and the hardware itself will go and", "tokens": [264, 7280, 11, 293, 550, 291, 7875, 512, 5623, 9239, 11, 293, 264, 8837, 2564, 486, 352, 293], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 448, "seek": 240740, "start": 2423.88, "end": 2430.6800000000003, "text": " read from the DMA buffer and copy that data to its registers synchronously with the virtual", "tokens": [1401, 490, 264, 413, 9998, 21762, 293, 5055, 300, 1412, 281, 1080, 38351, 19331, 5098, 365, 264, 6374], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 449, "seek": 240740, "start": 2430.6800000000003, "end": 2433.56, "text": " synchronization, so when you receive a new frame.", "tokens": [19331, 2144, 11, 370, 562, 291, 4774, 257, 777, 3920, 13], "temperature": 0.0, "avg_logprob": -0.15292684555053712, "compression_ratio": 1.7415254237288136, "no_speech_prob": 3.0187029551598243e-05}, {"id": 450, "seek": 243356, "start": 2433.56, "end": 2438.0, "text": " So it's very odd as a way of working, but that's how it does.", "tokens": [407, 309, 311, 588, 7401, 382, 257, 636, 295, 1364, 11, 457, 300, 311, 577, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 451, "seek": 243356, "start": 2438.0, "end": 2441.52, "text": " So like if you write directly to the registers, it won't actually do anything.", "tokens": [407, 411, 498, 291, 2464, 3838, 281, 264, 38351, 11, 309, 1582, 380, 767, 360, 1340, 13], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 452, "seek": 243356, "start": 2441.52, "end": 2446.72, "text": " You need to write to a side buffer, and then tell the hardware to update its registers", "tokens": [509, 643, 281, 2464, 281, 257, 1252, 21762, 11, 293, 550, 980, 264, 8837, 281, 5623, 1080, 38351], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 453, "seek": 243356, "start": 2446.72, "end": 2447.7999999999997, "text": " from that buffer.", "tokens": [490, 300, 21762, 13], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 454, "seek": 243356, "start": 2447.7999999999997, "end": 2449.7999999999997, "text": " So yeah, it's a little bit weird.", "tokens": [407, 1338, 11, 309, 311, 257, 707, 857, 3657, 13], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 455, "seek": 243356, "start": 2449.7999999999997, "end": 2454.52, "text": " If you look at the driver, you'll see that there is this buffer that is allocated for", "tokens": [759, 291, 574, 412, 264, 6787, 11, 291, 603, 536, 300, 456, 307, 341, 21762, 300, 307, 29772, 337], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 456, "seek": 243356, "start": 2454.52, "end": 2460.12, "text": " that, so that's the reason why, that's how it works, and that's what the old winner code", "tokens": [300, 11, 370, 300, 311, 264, 1778, 983, 11, 300, 311, 577, 309, 1985, 11, 293, 300, 311, 437, 264, 1331, 8507, 3089], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 457, "seek": 243356, "start": 2460.12, "end": 2461.12, "text": " is doing.", "tokens": [307, 884, 13], "temperature": 0.0, "avg_logprob": -0.13388087932880108, "compression_ratio": 1.7846153846153847, "no_speech_prob": 1.0942149856418837e-05}, {"id": 458, "seek": 246112, "start": 2461.12, "end": 2464.24, "text": " So that's how it's done.", "tokens": [407, 300, 311, 577, 309, 311, 1096, 13], "temperature": 0.0, "avg_logprob": -0.1795277388199516, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.137907358701341e-05}, {"id": 459, "seek": 246112, "start": 2464.24, "end": 2469.68, "text": " So that's the final pipeline that we have with the sensor here, connected to the Mypy", "tokens": [407, 300, 311, 264, 2572, 15517, 300, 321, 362, 365, 264, 10200, 510, 11, 4582, 281, 264, 1222, 8200], "temperature": 0.0, "avg_logprob": -0.1795277388199516, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.137907358701341e-05}, {"id": 460, "seek": 246112, "start": 2469.68, "end": 2474.56, "text": " CSI 2 subdev, which is a separate driver.", "tokens": [9460, 40, 568, 1422, 40343, 11, 597, 307, 257, 4994, 6787, 13], "temperature": 0.0, "avg_logprob": -0.1795277388199516, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.137907358701341e-05}, {"id": 461, "seek": 246112, "start": 2474.56, "end": 2481.88, "text": " Then it goes through the CSI driver, which in this case is configured as a subdev only.", "tokens": [1396, 309, 1709, 807, 264, 9460, 40, 6787, 11, 597, 294, 341, 1389, 307, 30538, 382, 257, 1422, 40343, 787, 13], "temperature": 0.0, "avg_logprob": -0.1795277388199516, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.137907358701341e-05}, {"id": 462, "seek": 246112, "start": 2481.88, "end": 2488.64, "text": " And then it goes to the ISP subdev, which provides a DMA capture interface where you", "tokens": [400, 550, 309, 1709, 281, 264, 6205, 47, 1422, 40343, 11, 597, 6417, 257, 413, 9998, 7983, 9226, 689, 291], "temperature": 0.0, "avg_logprob": -0.1795277388199516, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.137907358701341e-05}, {"id": 463, "seek": 248864, "start": 2488.64, "end": 2494.0, "text": " have the final data that was processed, and that should look good.", "tokens": [362, 264, 2572, 1412, 300, 390, 18846, 11, 293, 300, 820, 574, 665, 13], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 464, "seek": 248864, "start": 2494.0, "end": 2498.04, "text": " And it also has another video device for the parameters.", "tokens": [400, 309, 611, 575, 1071, 960, 4302, 337, 264, 9834, 13], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 465, "seek": 248864, "start": 2498.04, "end": 2502.08, "text": " Like I described with the RockTip ISP, this one is implemented the same way.", "tokens": [1743, 286, 7619, 365, 264, 6922, 51, 647, 6205, 47, 11, 341, 472, 307, 12270, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 466, "seek": 248864, "start": 2502.08, "end": 2505.8799999999997, "text": " So we also have a specific structure to configure it.", "tokens": [407, 321, 611, 362, 257, 2685, 3877, 281, 22162, 309, 13], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 467, "seek": 248864, "start": 2505.8799999999997, "end": 2510.8399999999997, "text": " Currently, there is no support for the statistics, but in the future, when such support is added,", "tokens": [19964, 11, 456, 307, 572, 1406, 337, 264, 12523, 11, 457, 294, 264, 2027, 11, 562, 1270, 1406, 307, 3869, 11], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 468, "seek": 248864, "start": 2510.8399999999997, "end": 2517.68, "text": " there will be another video device connected to this ISP subdev to be able to provide the", "tokens": [456, 486, 312, 1071, 960, 4302, 4582, 281, 341, 6205, 47, 1422, 40343, 281, 312, 1075, 281, 2893, 264], "temperature": 0.0, "avg_logprob": -0.12683684672784368, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.2188597793283407e-05}, {"id": 469, "seek": 251768, "start": 2517.68, "end": 2522.7999999999997, "text": " feedback data out.", "tokens": [5824, 1412, 484, 13], "temperature": 0.0, "avg_logprob": -0.24880590318124504, "compression_ratio": 1.5260663507109005, "no_speech_prob": 1.856692870205734e-05}, {"id": 470, "seek": 251768, "start": 2522.7999999999997, "end": 2527.04, "text": " OK, so yeah, that's pretty much what I just said.", "tokens": [2264, 11, 370, 1338, 11, 300, 311, 1238, 709, 437, 286, 445, 848, 13], "temperature": 0.0, "avg_logprob": -0.24880590318124504, "compression_ratio": 1.5260663507109005, "no_speech_prob": 1.856692870205734e-05}, {"id": 471, "seek": 251768, "start": 2527.04, "end": 2534.68, "text": " Few details about the currently supported features in that config parameters buffer.", "tokens": [33468, 4365, 466, 264, 4362, 8104, 4122, 294, 300, 6662, 9834, 21762, 13], "temperature": 0.0, "avg_logprob": -0.24880590318124504, "compression_ratio": 1.5260663507109005, "no_speech_prob": 1.856692870205734e-05}, {"id": 472, "seek": 251768, "start": 2534.68, "end": 2540.08, "text": " Currently, we support the buyer coefficients, so we can translate from the buyer raw data", "tokens": [19964, 11, 321, 1406, 264, 24645, 31994, 11, 370, 321, 393, 13799, 490, 264, 24645, 8936, 1412], "temperature": 0.0, "avg_logprob": -0.24880590318124504, "compression_ratio": 1.5260663507109005, "no_speech_prob": 1.856692870205734e-05}, {"id": 473, "seek": 251768, "start": 2540.08, "end": 2546.12, "text": " to actual RGB data, and we can tweak how much of each color channel we put in.", "tokens": [281, 3539, 31231, 1412, 11, 293, 321, 393, 29879, 577, 709, 295, 1184, 2017, 2269, 321, 829, 294, 13], "temperature": 0.0, "avg_logprob": -0.24880590318124504, "compression_ratio": 1.5260663507109005, "no_speech_prob": 1.856692870205734e-05}, {"id": 474, "seek": 254612, "start": 2546.12, "end": 2553.16, "text": " So that will typically allow different color temperatures, basically.", "tokens": [407, 300, 486, 5850, 2089, 819, 2017, 12633, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.1313544026127568, "compression_ratio": 1.553921568627451, "no_speech_prob": 2.923741703853011e-05}, {"id": 475, "seek": 254612, "start": 2553.16, "end": 2558.2, "text": " We also support 2D noise filtering, which is called BDNF, so it's bi-directional noise", "tokens": [492, 611, 1406, 568, 35, 5658, 30822, 11, 597, 307, 1219, 363, 35, 45, 37, 11, 370, 309, 311, 3228, 12, 18267, 41048, 5658], "temperature": 0.0, "avg_logprob": -0.1313544026127568, "compression_ratio": 1.553921568627451, "no_speech_prob": 2.923741703853011e-05}, {"id": 476, "seek": 254612, "start": 2558.2, "end": 2568.6, "text": " filtering, which basically is like a low-pass filter, so it will remove the high-frequency", "tokens": [30822, 11, 597, 1936, 307, 411, 257, 2295, 12, 9216, 6608, 11, 370, 309, 486, 4159, 264, 1090, 12, 19325, 48154], "temperature": 0.0, "avg_logprob": -0.1313544026127568, "compression_ratio": 1.553921568627451, "no_speech_prob": 2.923741703853011e-05}, {"id": 477, "seek": 254612, "start": 2568.6, "end": 2573.6, "text": " stuff in your picture, and that will make it look smoother and nicer.", "tokens": [1507, 294, 428, 3036, 11, 293, 300, 486, 652, 309, 574, 28640, 293, 22842, 13], "temperature": 0.0, "avg_logprob": -0.1313544026127568, "compression_ratio": 1.553921568627451, "no_speech_prob": 2.923741703853011e-05}, {"id": 478, "seek": 257360, "start": 2573.6, "end": 2581.04, "text": " And also easier to encode, which is one of the big reasons why you need to do noise filtering.", "tokens": [400, 611, 3571, 281, 2058, 1429, 11, 597, 307, 472, 295, 264, 955, 4112, 983, 291, 643, 281, 360, 5658, 30822, 13], "temperature": 0.0, "avg_logprob": -0.10355608940124511, "compression_ratio": 1.5884773662551441, "no_speech_prob": 1.0777853276522364e-05}, {"id": 479, "seek": 257360, "start": 2581.04, "end": 2584.7599999999998, "text": " And yeah, that's the main two features, so there's still a lot to be added.", "tokens": [400, 1338, 11, 300, 311, 264, 2135, 732, 4122, 11, 370, 456, 311, 920, 257, 688, 281, 312, 3869, 13], "temperature": 0.0, "avg_logprob": -0.10355608940124511, "compression_ratio": 1.5884773662551441, "no_speech_prob": 1.0777853276522364e-05}, {"id": 480, "seek": 257360, "start": 2584.7599999999998, "end": 2589.52, "text": " That's just the scope of what our project was at the time, but there's definitely a", "tokens": [663, 311, 445, 264, 11923, 295, 437, 527, 1716, 390, 412, 264, 565, 11, 457, 456, 311, 2138, 257], "temperature": 0.0, "avg_logprob": -0.10355608940124511, "compression_ratio": 1.5884773662551441, "no_speech_prob": 1.0777853276522364e-05}, {"id": 481, "seek": 257360, "start": 2589.52, "end": 2596.92, "text": " lot of room for improvement, so the ISP itself has numerous hardware capabilities, and so", "tokens": [688, 295, 1808, 337, 10444, 11, 370, 264, 6205, 47, 2564, 575, 12546, 8837, 10862, 11, 293, 370], "temperature": 0.0, "avg_logprob": -0.10355608940124511, "compression_ratio": 1.5884773662551441, "no_speech_prob": 1.0777853276522364e-05}, {"id": 482, "seek": 257360, "start": 2596.92, "end": 2600.68, "text": " those could be added later in the driver.", "tokens": [729, 727, 312, 3869, 1780, 294, 264, 6787, 13], "temperature": 0.0, "avg_logprob": -0.10355608940124511, "compression_ratio": 1.5884773662551441, "no_speech_prob": 1.0777853276522364e-05}, {"id": 483, "seek": 260068, "start": 2600.68, "end": 2605.68, "text": " So it was, for that reason, submitted to staging in Linux, because we don't yet support all", "tokens": [407, 309, 390, 11, 337, 300, 1778, 11, 14405, 281, 41085, 294, 18734, 11, 570, 321, 500, 380, 1939, 1406, 439], "temperature": 0.0, "avg_logprob": -0.08704622140091457, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.6148167560459115e-05}, {"id": 484, "seek": 260068, "start": 2605.68, "end": 2611.16, "text": " the features, so we don't yet have a complete description of that structure, and since it's", "tokens": [264, 4122, 11, 370, 321, 500, 380, 1939, 362, 257, 3566, 3855, 295, 300, 3877, 11, 293, 1670, 309, 311], "temperature": 0.0, "avg_logprob": -0.08704622140091457, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.6148167560459115e-05}, {"id": 485, "seek": 260068, "start": 2611.16, "end": 2618.0, "text": " part of the API, we want to make it clear that it's not finalized yet, so there will", "tokens": [644, 295, 264, 9362, 11, 321, 528, 281, 652, 309, 1850, 300, 309, 311, 406, 2572, 1602, 1939, 11, 370, 456, 486], "temperature": 0.0, "avg_logprob": -0.08704622140091457, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.6148167560459115e-05}, {"id": 486, "seek": 260068, "start": 2618.0, "end": 2626.04, "text": " be some additions to this structure to support other features that are currently not implemented.", "tokens": [312, 512, 35113, 281, 341, 3877, 281, 1406, 661, 4122, 300, 366, 4362, 406, 12270, 13], "temperature": 0.0, "avg_logprob": -0.08704622140091457, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.6148167560459115e-05}, {"id": 487, "seek": 262604, "start": 2626.04, "end": 2631.84, "text": " So this code was submitted in September 2021, and it was merged in November 2022.", "tokens": [407, 341, 3089, 390, 14405, 294, 7216, 7201, 11, 293, 309, 390, 36427, 294, 7674, 20229, 13], "temperature": 0.0, "avg_logprob": -0.09266666086708628, "compression_ratio": 1.469387755102041, "no_speech_prob": 3.633803498814814e-05}, {"id": 488, "seek": 262604, "start": 2631.84, "end": 2641.52, "text": " So this is also in Linux 6.2, so you can get that with the update, so that's pretty nice.", "tokens": [407, 341, 307, 611, 294, 18734, 1386, 13, 17, 11, 370, 291, 393, 483, 300, 365, 264, 5623, 11, 370, 300, 311, 1238, 1481, 13], "temperature": 0.0, "avg_logprob": -0.09266666086708628, "compression_ratio": 1.469387755102041, "no_speech_prob": 3.633803498814814e-05}, {"id": 489, "seek": 262604, "start": 2641.52, "end": 2642.88, "text": " This change was much bigger.", "tokens": [639, 1319, 390, 709, 3801, 13], "temperature": 0.0, "avg_logprob": -0.09266666086708628, "compression_ratio": 1.469387755102041, "no_speech_prob": 3.633803498814814e-05}, {"id": 490, "seek": 262604, "start": 2642.88, "end": 2649.88, "text": " You can see it's 8,000 lines of additions, so it's a whole new driver, and a big rework", "tokens": [509, 393, 536, 309, 311, 1649, 11, 1360, 3876, 295, 35113, 11, 370, 309, 311, 257, 1379, 777, 6787, 11, 293, 257, 955, 48376], "temperature": 0.0, "avg_logprob": -0.09266666086708628, "compression_ratio": 1.469387755102041, "no_speech_prob": 3.633803498814814e-05}, {"id": 491, "seek": 264988, "start": 2649.88, "end": 2658.96, "text": " of the previous 6 ICSI driver, which was more or less a complete rewrite of the driver,", "tokens": [295, 264, 3894, 1386, 14360, 20262, 6787, 11, 597, 390, 544, 420, 1570, 257, 3566, 28132, 295, 264, 6787, 11], "temperature": 0.0, "avg_logprob": -0.19280744791030885, "compression_ratio": 1.4489795918367347, "no_speech_prob": 4.817917215405032e-05}, {"id": 492, "seek": 264988, "start": 2658.96, "end": 2663.0, "text": " so it's pretty big.", "tokens": [370, 309, 311, 1238, 955, 13], "temperature": 0.0, "avg_logprob": -0.19280744791030885, "compression_ratio": 1.4489795918367347, "no_speech_prob": 4.817917215405032e-05}, {"id": 493, "seek": 264988, "start": 2663.0, "end": 2670.6800000000003, "text": " Just to finish on what is left to do in this area, so currently the ISP only supports the", "tokens": [1449, 281, 2413, 322, 437, 307, 1411, 281, 360, 294, 341, 1859, 11, 370, 4362, 264, 6205, 47, 787, 9346, 264], "temperature": 0.0, "avg_logprob": -0.19280744791030885, "compression_ratio": 1.4489795918367347, "no_speech_prob": 4.817917215405032e-05}, {"id": 494, "seek": 264988, "start": 2670.6800000000003, "end": 2678.04, "text": " V3 platform, but the same hardware is found on the AT3T, and there's a few other chips", "tokens": [691, 18, 3663, 11, 457, 264, 912, 8837, 307, 1352, 322, 264, 8872, 18, 51, 11, 293, 456, 311, 257, 1326, 661, 11583], "temperature": 0.0, "avg_logprob": -0.19280744791030885, "compression_ratio": 1.4489795918367347, "no_speech_prob": 4.817917215405032e-05}, {"id": 495, "seek": 267804, "start": 2678.04, "end": 2684.08, "text": " that have previous versions of the same hardware, so they could be supported in the same driver,", "tokens": [300, 362, 3894, 9606, 295, 264, 912, 8837, 11, 370, 436, 727, 312, 8104, 294, 264, 912, 6787, 11], "temperature": 0.0, "avg_logprob": -0.13210947920636432, "compression_ratio": 1.8333333333333333, "no_speech_prob": 3.419601489440538e-05}, {"id": 496, "seek": 267804, "start": 2684.08, "end": 2687.96, "text": " so that's something that could be done in the future.", "tokens": [370, 300, 311, 746, 300, 727, 312, 1096, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.13210947920636432, "compression_ratio": 1.8333333333333333, "no_speech_prob": 3.419601489440538e-05}, {"id": 497, "seek": 267804, "start": 2687.96, "end": 2693.12, "text": " I mentioned that there is no statistics currently, so that is also something that could be added", "tokens": [286, 2835, 300, 456, 307, 572, 12523, 4362, 11, 370, 300, 307, 611, 746, 300, 727, 312, 3869], "temperature": 0.0, "avg_logprob": -0.13210947920636432, "compression_ratio": 1.8333333333333333, "no_speech_prob": 3.419601489440538e-05}, {"id": 498, "seek": 267804, "start": 2693.12, "end": 2695.36, "text": " in the future.", "tokens": [294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.13210947920636432, "compression_ratio": 1.8333333333333333, "no_speech_prob": 3.419601489440538e-05}, {"id": 499, "seek": 267804, "start": 2695.36, "end": 2701.16, "text": " It has numerous other features that we could support, scaling rotation, and of course all", "tokens": [467, 575, 12546, 661, 4122, 300, 321, 727, 1406, 11, 21589, 12447, 11, 293, 295, 1164, 439], "temperature": 0.0, "avg_logprob": -0.13210947920636432, "compression_ratio": 1.8333333333333333, "no_speech_prob": 3.419601489440538e-05}, {"id": 500, "seek": 270116, "start": 2701.16, "end": 2709.6, "text": " of the modules inside the ISP for all the different features that I mentioned, and we", "tokens": [295, 264, 16679, 1854, 264, 6205, 47, 337, 439, 264, 819, 4122, 300, 286, 2835, 11, 293, 321], "temperature": 0.0, "avg_logprob": -0.1986951951856737, "compression_ratio": 1.4549763033175356, "no_speech_prob": 2.9268228900036775e-05}, {"id": 501, "seek": 270116, "start": 2709.6, "end": 2716.7999999999997, "text": " don't have any 3A algorithm support in user space to do this feedback loop implementation,", "tokens": [500, 380, 362, 604, 805, 32, 9284, 1406, 294, 4195, 1901, 281, 360, 341, 5824, 6367, 11420, 11], "temperature": 0.0, "avg_logprob": -0.1986951951856737, "compression_ratio": 1.4549763033175356, "no_speech_prob": 2.9268228900036775e-05}, {"id": 502, "seek": 270116, "start": 2716.7999999999997, "end": 2720.96, "text": " so that is also something to be worked on.", "tokens": [370, 300, 307, 611, 746, 281, 312, 2732, 322, 13], "temperature": 0.0, "avg_logprob": -0.1986951951856737, "compression_ratio": 1.4549763033175356, "no_speech_prob": 2.9268228900036775e-05}, {"id": 503, "seek": 270116, "start": 2720.96, "end": 2727.6, "text": " And of course, doing that would be a great fit for Lib Camera, so Teran has just talked", "tokens": [400, 295, 1164, 11, 884, 300, 576, 312, 257, 869, 3318, 337, 15834, 23734, 11, 370, 6564, 282, 575, 445, 2825], "temperature": 0.0, "avg_logprob": -0.1986951951856737, "compression_ratio": 1.4549763033175356, "no_speech_prob": 2.9268228900036775e-05}, {"id": 504, "seek": 272760, "start": 2727.6, "end": 2734.2, "text": " about it, so I won't go over it again, but that's definitely a good fit for supporting", "tokens": [466, 309, 11, 370, 286, 1582, 380, 352, 670, 309, 797, 11, 457, 300, 311, 2138, 257, 665, 3318, 337, 7231], "temperature": 0.0, "avg_logprob": -0.1465611177332261, "compression_ratio": 1.5115207373271888, "no_speech_prob": 3.4751072234939784e-05}, {"id": 505, "seek": 272760, "start": 2734.2, "end": 2742.16, "text": " an ISP with Mainline Linux, so hopefully it will soon be well integrated in Lib Camera.", "tokens": [364, 6205, 47, 365, 12383, 1889, 18734, 11, 370, 4696, 309, 486, 2321, 312, 731, 10919, 294, 15834, 23734, 13], "temperature": 0.0, "avg_logprob": -0.1465611177332261, "compression_ratio": 1.5115207373271888, "no_speech_prob": 3.4751072234939784e-05}, {"id": 506, "seek": 272760, "start": 2742.16, "end": 2748.92, "text": " Someone recently submitted patches about this, so it's like going towards this direction,", "tokens": [8734, 3938, 14405, 26531, 466, 341, 11, 370, 309, 311, 411, 516, 3030, 341, 3513, 11], "temperature": 0.0, "avg_logprob": -0.1465611177332261, "compression_ratio": 1.5115207373271888, "no_speech_prob": 3.4751072234939784e-05}, {"id": 507, "seek": 272760, "start": 2748.92, "end": 2752.2799999999997, "text": " so that's pretty nice.", "tokens": [370, 300, 311, 1238, 1481, 13], "temperature": 0.0, "avg_logprob": -0.1465611177332261, "compression_ratio": 1.5115207373271888, "no_speech_prob": 3.4751072234939784e-05}, {"id": 508, "seek": 272760, "start": 2752.2799999999997, "end": 2753.8399999999997, "text": " That's pretty much the end of this talk.", "tokens": [663, 311, 1238, 709, 264, 917, 295, 341, 751, 13], "temperature": 0.0, "avg_logprob": -0.1465611177332261, "compression_ratio": 1.5115207373271888, "no_speech_prob": 3.4751072234939784e-05}, {"id": 509, "seek": 275384, "start": 2753.84, "end": 2759.1200000000003, "text": " I just wanted to mention that Bootlin is hiring, so if you are interested in this kind of stuff,", "tokens": [286, 445, 1415, 281, 2152, 300, 37263, 5045, 307, 15335, 11, 370, 498, 291, 366, 3102, 294, 341, 733, 295, 1507, 11], "temperature": 0.0, "avg_logprob": -0.2640824872393941, "compression_ratio": 1.5961538461538463, "no_speech_prob": 0.000712331966497004}, {"id": 510, "seek": 275384, "start": 2759.1200000000003, "end": 2764.2400000000002, "text": " how to support everything, you can reach out to us and we have positions available, also", "tokens": [577, 281, 1406, 1203, 11, 291, 393, 2524, 484, 281, 505, 293, 321, 362, 8432, 2435, 11, 611], "temperature": 0.0, "avg_logprob": -0.2640824872393941, "compression_ratio": 1.5961538461538463, "no_speech_prob": 0.000712331966497004}, {"id": 511, "seek": 275384, "start": 2764.2400000000002, "end": 2767.52, "text": " internships, so feel free if you're interested.", "tokens": [35712, 11, 370, 841, 1737, 498, 291, 434, 3102, 13], "temperature": 0.0, "avg_logprob": -0.2640824872393941, "compression_ratio": 1.5961538461538463, "no_speech_prob": 0.000712331966497004}, {"id": 512, "seek": 275384, "start": 2767.52, "end": 2772.36, "text": " And that is pretty much it for me, so thanks everyone, and now I'll have questions if there's", "tokens": [400, 300, 307, 1238, 709, 309, 337, 385, 11, 370, 3231, 1518, 11, 293, 586, 286, 603, 362, 1651, 498, 456, 311], "temperature": 0.0, "avg_logprob": -0.2640824872393941, "compression_ratio": 1.5961538461538463, "no_speech_prob": 0.000712331966497004}, {"id": 513, "seek": 275384, "start": 2772.36, "end": 2773.36, "text": " any.", "tokens": [604, 13], "temperature": 0.0, "avg_logprob": -0.2640824872393941, "compression_ratio": 1.5961538461538463, "no_speech_prob": 0.000712331966497004}, {"id": 514, "seek": 277336, "start": 2773.36, "end": 2784.92, "text": " Hi there, that was fantastic, thank you, who knew it was so complicated.", "tokens": [2421, 456, 11, 300, 390, 5456, 11, 1309, 291, 11, 567, 2586, 309, 390, 370, 6179, 13], "temperature": 0.0, "avg_logprob": -0.1740993188352001, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.0004244129522703588}, {"id": 515, "seek": 277336, "start": 2784.92, "end": 2789.1200000000003, "text": " The last time I looked at some of this with NXP free scale parts, we were using GStreamer", "tokens": [440, 1036, 565, 286, 2956, 412, 512, 295, 341, 365, 426, 55, 47, 1737, 4373, 3166, 11, 321, 645, 1228, 460, 4520, 1572, 260], "temperature": 0.0, "avg_logprob": -0.1740993188352001, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.0004244129522703588}, {"id": 516, "seek": 277336, "start": 2789.1200000000003, "end": 2793.6800000000003, "text": " with V4L sources coming into it, and a lot of the headache was that there was loads of", "tokens": [365, 691, 19, 43, 7139, 1348, 666, 309, 11, 293, 257, 688, 295, 264, 23520, 390, 300, 456, 390, 12668, 295], "temperature": 0.0, "avg_logprob": -0.1740993188352001, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.0004244129522703588}, {"id": 517, "seek": 277336, "start": 2793.6800000000003, "end": 2798.28, "text": " buffer copying all over the place, and there were different memory maps and different access", "tokens": [21762, 27976, 439, 670, 264, 1081, 11, 293, 456, 645, 819, 4675, 11317, 293, 819, 2105], "temperature": 0.0, "avg_logprob": -0.1740993188352001, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.0004244129522703588}, {"id": 518, "seek": 277336, "start": 2798.28, "end": 2801.08, "text": " for different components to different memory maps.", "tokens": [337, 819, 6677, 281, 819, 4675, 11317, 13], "temperature": 0.0, "avg_logprob": -0.1740993188352001, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.0004244129522703588}, {"id": 519, "seek": 280108, "start": 2801.08, "end": 2806.08, "text": " So with what you're explaining here, typical use case might be, we do this image processing,", "tokens": [407, 365, 437, 291, 434, 13468, 510, 11, 7476, 764, 1389, 1062, 312, 11, 321, 360, 341, 3256, 9007, 11], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 520, "seek": 280108, "start": 2806.08, "end": 2811.64, "text": " then I want to encode it with H.264265, maybe I want to push it into a GPU to do some kind", "tokens": [550, 286, 528, 281, 2058, 1429, 309, 365, 389, 13, 10880, 19, 10880, 20, 11, 1310, 286, 528, 281, 2944, 309, 666, 257, 18407, 281, 360, 512, 733], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 521, "seek": 280108, "start": 2811.64, "end": 2815.36, "text": " of image analysis with AI machine learning techniques.", "tokens": [295, 3256, 5215, 365, 7318, 3479, 2539, 7512, 13], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 522, "seek": 280108, "start": 2815.36, "end": 2820.88, "text": " Could you say something about how that hangs together with buffer copying and so forth?", "tokens": [7497, 291, 584, 746, 466, 577, 300, 35947, 1214, 365, 21762, 27976, 293, 370, 5220, 30], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 523, "seek": 280108, "start": 2820.88, "end": 2827.72, "text": " So basically nowadays the V4L2 framework has great support for DMA buff, which is a technology", "tokens": [407, 1936, 13434, 264, 691, 19, 43, 17, 8388, 575, 869, 1406, 337, 413, 9998, 9204, 11, 597, 307, 257, 2899], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 524, "seek": 280108, "start": 2827.72, "end": 2830.46, "text": " used for buffer sharing across different devices.", "tokens": [1143, 337, 21762, 5414, 2108, 819, 5759, 13], "temperature": 0.0, "avg_logprob": -0.15886112739299907, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0001999737578444183}, {"id": 525, "seek": 283046, "start": 2830.46, "end": 2836.2, "text": " So with that driver you could absolutely reuse the same memory where the ISP is producing", "tokens": [407, 365, 300, 6787, 291, 727, 3122, 26225, 264, 912, 4675, 689, 264, 6205, 47, 307, 10501], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 526, "seek": 283046, "start": 2836.2, "end": 2842.2, "text": " the picture and use that as the source for an encoder or even the GPU, because DRM also", "tokens": [264, 3036, 293, 764, 300, 382, 264, 4009, 337, 364, 2058, 19866, 420, 754, 264, 18407, 11, 570, 12118, 44, 611], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 527, "seek": 283046, "start": 2842.2, "end": 2844.68, "text": " supports DMA buff pretty well.", "tokens": [9346, 413, 9998, 9204, 1238, 731, 13], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 528, "seek": 283046, "start": 2844.68, "end": 2849.48, "text": " So you could do all of that with zero copy, that's definitely all supported, and I didn't", "tokens": [407, 291, 727, 360, 439, 295, 300, 365, 4018, 5055, 11, 300, 311, 2138, 439, 8104, 11, 293, 286, 994, 380], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 529, "seek": 283046, "start": 2849.48, "end": 2854.3, "text": " have to do anything special to have that work, it's just the V4L2 framework has that now.", "tokens": [362, 281, 360, 1340, 2121, 281, 362, 300, 589, 11, 309, 311, 445, 264, 691, 19, 43, 17, 8388, 575, 300, 586, 13], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 530, "seek": 283046, "start": 2854.3, "end": 2859.8, "text": " So unless your hardware has weird constraints like the GPU can access this part of memory", "tokens": [407, 5969, 428, 8837, 575, 3657, 18491, 411, 264, 18407, 393, 2105, 341, 644, 295, 4675], "temperature": 0.0, "avg_logprob": -0.12012630751153, "compression_ratio": 1.6258503401360545, "no_speech_prob": 2.281558045069687e-05}, {"id": 531, "seek": 285980, "start": 2859.8, "end": 2865.1200000000003, "text": " or things like that, which are not really well represented currently, but in the general", "tokens": [420, 721, 411, 300, 11, 597, 366, 406, 534, 731, 10379, 4362, 11, 457, 294, 264, 2674], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 532, "seek": 285980, "start": 2865.1200000000003, "end": 2867.48, "text": " case it should work pretty well.", "tokens": [1389, 309, 820, 589, 1238, 731, 13], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 533, "seek": 285980, "start": 2867.48, "end": 2873.0, "text": " So yeah, basically when we have an encoder driver for these all-winner platforms we will", "tokens": [407, 1338, 11, 1936, 562, 321, 362, 364, 2058, 19866, 6787, 337, 613, 439, 12, 9136, 1193, 9473, 321, 486], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 534, "seek": 285980, "start": 2873.0, "end": 2879.0, "text": " definitely be able to directly import ISP output to encoder input and no copy and low", "tokens": [2138, 312, 1075, 281, 3838, 974, 6205, 47, 5598, 281, 2058, 19866, 4846, 293, 572, 5055, 293, 2295], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 535, "seek": 285980, "start": 2879.0, "end": 2880.0, "text": " latency.", "tokens": [27043, 13], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 536, "seek": 285980, "start": 2880.0, "end": 2881.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 537, "seek": 285980, "start": 2881.0, "end": 2882.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 538, "seek": 285980, "start": 2882.0, "end": 2883.0, "text": " Anyone else?", "tokens": [14643, 1646, 30], "temperature": 0.0, "avg_logprob": -0.23148549540659016, "compression_ratio": 1.5045871559633028, "no_speech_prob": 0.00011548666225280613}, {"id": 539, "seek": 288300, "start": 2883.0, "end": 2891.72, "text": " Yeah, thanks for your talk and for supporting, hopefully, more mainline Linux so we have", "tokens": [865, 11, 3231, 337, 428, 751, 293, 337, 7231, 11, 4696, 11, 544, 2135, 1889, 18734, 370, 321, 362], "temperature": 0.0, "avg_logprob": -0.2162451148033142, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.00079691520659253}, {"id": 540, "seek": 288300, "start": 2891.72, "end": 2894.36, "text": " more phones available.", "tokens": [544, 10216, 2435, 13], "temperature": 0.0, "avg_logprob": -0.2162451148033142, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.00079691520659253}, {"id": 541, "seek": 288300, "start": 2894.36, "end": 2903.24, "text": " I have a question about the support for artificial network declarators.", "tokens": [286, 362, 257, 1168, 466, 264, 1406, 337, 11677, 3209, 16694, 3391, 13], "temperature": 0.0, "avg_logprob": -0.2162451148033142, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.00079691520659253}, {"id": 542, "seek": 288300, "start": 2903.24, "end": 2908.52, "text": " Do you have any idea if this is somehow integrated into the kernel stack in this way?", "tokens": [1144, 291, 362, 604, 1558, 498, 341, 307, 6063, 10919, 666, 264, 28256, 8630, 294, 341, 636, 30], "temperature": 0.0, "avg_logprob": -0.2162451148033142, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.00079691520659253}, {"id": 543, "seek": 290852, "start": 2908.52, "end": 2914.0, "text": " I mean, it's a lot of work like this as is, but well.", "tokens": [286, 914, 11, 309, 311, 257, 688, 295, 589, 411, 341, 382, 307, 11, 457, 731, 13], "temperature": 0.0, "avg_logprob": -0.2539886662989487, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.00043473413097672164}, {"id": 544, "seek": 290852, "start": 2914.0, "end": 2920.88, "text": " Yeah, so the AI accelerator stuff, that's not really the same scope as the camera stuff,", "tokens": [865, 11, 370, 264, 7318, 39889, 1507, 11, 300, 311, 406, 534, 264, 912, 11923, 382, 264, 2799, 1507, 11], "temperature": 0.0, "avg_logprob": -0.2539886662989487, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.00043473413097672164}, {"id": 545, "seek": 290852, "start": 2920.88, "end": 2923.84, "text": " but that is definitely moving forward.", "tokens": [457, 300, 307, 2138, 2684, 2128, 13], "temperature": 0.0, "avg_logprob": -0.2539886662989487, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.00043473413097672164}, {"id": 546, "seek": 290852, "start": 2923.84, "end": 2929.64, "text": " There is an axle subsystem that was added to the kernel quite recently, which is based", "tokens": [821, 307, 364, 31192, 2090, 9321, 300, 390, 3869, 281, 264, 28256, 1596, 3938, 11, 597, 307, 2361], "temperature": 0.0, "avg_logprob": -0.2539886662989487, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.00043473413097672164}, {"id": 547, "seek": 290852, "start": 2929.64, "end": 2932.88, "text": " of DRM for some aspects.", "tokens": [295, 12118, 44, 337, 512, 7270, 13], "temperature": 0.0, "avg_logprob": -0.2539886662989487, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.00043473413097672164}, {"id": 548, "seek": 293288, "start": 2932.88, "end": 2940.04, "text": " And I think more and more drivers are being contributed towards that, so the main issue", "tokens": [400, 286, 519, 544, 293, 544, 11590, 366, 885, 18434, 3030, 300, 11, 370, 264, 2135, 2734], "temperature": 0.0, "avg_logprob": -0.14905734289260136, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0002464521676301956}, {"id": 549, "seek": 293288, "start": 2940.04, "end": 2945.92, "text": " currently with that would be that the compilers to compile the models into the hardware representation", "tokens": [4362, 365, 300, 576, 312, 300, 264, 715, 388, 433, 281, 31413, 264, 5245, 666, 264, 8837, 10290], "temperature": 0.0, "avg_logprob": -0.14905734289260136, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0002464521676301956}, {"id": 550, "seek": 293288, "start": 2945.92, "end": 2950.96, "text": " are typically non-free and probably going to remain so in a number of cases.", "tokens": [366, 5850, 2107, 12, 10792, 293, 1391, 516, 281, 6222, 370, 294, 257, 1230, 295, 3331, 13], "temperature": 0.0, "avg_logprob": -0.14905734289260136, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0002464521676301956}, {"id": 551, "seek": 293288, "start": 2950.96, "end": 2958.92, "text": " So feel free to push for free compilers for these models to your hardware provider or", "tokens": [407, 841, 1737, 281, 2944, 337, 1737, 715, 388, 433, 337, 613, 5245, 281, 428, 8837, 12398, 420], "temperature": 0.0, "avg_logprob": -0.14905734289260136, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0002464521676301956}, {"id": 552, "seek": 293288, "start": 2958.92, "end": 2961.12, "text": " whatever.", "tokens": [2035, 13], "temperature": 0.0, "avg_logprob": -0.14905734289260136, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0002464521676301956}, {"id": 553, "seek": 296112, "start": 2961.12, "end": 2966.48, "text": " Any more questions?", "tokens": [2639, 544, 1651, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 554, "seek": 296112, "start": 2966.48, "end": 2970.72, "text": " You mentioned patches for the camera for the ISP.", "tokens": [509, 2835, 26531, 337, 264, 2799, 337, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 555, "seek": 296112, "start": 2970.72, "end": 2971.96, "text": " Could you point them to me?", "tokens": [7497, 291, 935, 552, 281, 385, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 556, "seek": 296112, "start": 2971.96, "end": 2972.96, "text": " Sorry?", "tokens": [4919, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 557, "seek": 296112, "start": 2972.96, "end": 2976.96, "text": " Could you point me to the patches you mentioned, and do you have plenty of work on the camera?", "tokens": [7497, 291, 935, 385, 281, 264, 26531, 291, 2835, 11, 293, 360, 291, 362, 7140, 295, 589, 322, 264, 2799, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 558, "seek": 296112, "start": 2976.96, "end": 2977.96, "text": " It's Adam Pig, right?", "tokens": [467, 311, 7938, 27322, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 559, "seek": 296112, "start": 2977.96, "end": 2978.96, "text": " Sorry?", "tokens": [4919, 30], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 560, "seek": 296112, "start": 2978.96, "end": 2979.96, "text": " It's Adam Pig's.", "tokens": [467, 311, 7938, 27322, 311, 13], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 561, "seek": 296112, "start": 2979.96, "end": 2985.44, "text": " That's just for the CISAs receiver as far as I'm aware, just not for the ISP.", "tokens": [663, 311, 445, 337, 264, 383, 2343, 10884, 20086, 382, 1400, 382, 286, 478, 3650, 11, 445, 406, 337, 264, 6205, 47, 13], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 562, "seek": 296112, "start": 2985.44, "end": 2987.3599999999997, "text": " Maybe I went a bit fast over that.", "tokens": [2704, 286, 1437, 257, 857, 2370, 670, 300, 13], "temperature": 0.0, "avg_logprob": -0.3190700464081346, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.0018728770082816482}, {"id": 563, "seek": 298736, "start": 2987.36, "end": 2994.52, "text": " So it's actually patches on the driver, the SunSix ICSI driver side to implement things", "tokens": [407, 309, 311, 767, 26531, 322, 264, 6787, 11, 264, 6163, 50, 970, 14360, 20262, 6787, 1252, 281, 4445, 721], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 564, "seek": 298736, "start": 2994.52, "end": 2996.8, "text": " that Leap Camera expects.", "tokens": [300, 1456, 569, 23734, 33280, 13], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 565, "seek": 298736, "start": 2996.8, "end": 2999.4, "text": " So I think you know the one thing I'm talking about.", "tokens": [407, 286, 519, 291, 458, 264, 472, 551, 286, 478, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 566, "seek": 298736, "start": 2999.4, "end": 3002.28, "text": " So do you plan to work on the ISP support, the Leap Camera?", "tokens": [407, 360, 291, 1393, 281, 589, 322, 264, 6205, 47, 1406, 11, 264, 1456, 569, 23734, 30], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 567, "seek": 298736, "start": 3002.28, "end": 3006.6, "text": " So personally, I would be very happy to do so, so we're just looking for someone to fund", "tokens": [407, 5665, 11, 286, 576, 312, 588, 2055, 281, 360, 370, 11, 370, 321, 434, 445, 1237, 337, 1580, 281, 2374], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 568, "seek": 298736, "start": 3006.6, "end": 3007.6, "text": " that effort.", "tokens": [300, 4630, 13], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 569, "seek": 298736, "start": 3007.6, "end": 3012.6, "text": " So if, you know, someone with lots of money and interest, please come and talk to us.", "tokens": [407, 498, 11, 291, 458, 11, 1580, 365, 3195, 295, 1460, 293, 1179, 11, 1767, 808, 293, 751, 281, 505, 13], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 570, "seek": 298736, "start": 3012.6, "end": 3016.48, "text": " No, but seriously, I know that people would definitely be interested in that, so it's", "tokens": [883, 11, 457, 6638, 11, 286, 458, 300, 561, 576, 2138, 312, 3102, 294, 300, 11, 370, 309, 311], "temperature": 0.0, "avg_logprob": -0.18081460482832315, "compression_ratio": 1.7123287671232876, "no_speech_prob": 9.388569014845416e-05}, {"id": 571, "seek": 301648, "start": 3016.48, "end": 3020.6, "text": " good to spread the word that we are available to do that.", "tokens": [665, 281, 3974, 264, 1349, 300, 321, 366, 2435, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 572, "seek": 301648, "start": 3020.6, "end": 3026.2, "text": " We just need someone interested and serious about funding this, but we would definitely", "tokens": [492, 445, 643, 1580, 3102, 293, 3156, 466, 6137, 341, 11, 457, 321, 576, 2138], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 573, "seek": 301648, "start": 3026.2, "end": 3028.72, "text": " be very happy to do it.", "tokens": [312, 588, 2055, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 574, "seek": 301648, "start": 3028.72, "end": 3029.72, "text": " So yeah.", "tokens": [407, 1338, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 575, "seek": 301648, "start": 3029.72, "end": 3030.72, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 576, "seek": 301648, "start": 3030.72, "end": 3031.72, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 577, "seek": 301648, "start": 3031.72, "end": 3032.72, "text": " Thank you for a great talk.", "tokens": [1044, 291, 337, 257, 869, 751, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 578, "seek": 301648, "start": 3032.72, "end": 3033.72, "text": " And that's the end of the question.", "tokens": [400, 300, 311, 264, 917, 295, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.20048785209655762, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002982056757900864}, {"id": 579, "seek": 303372, "start": 3033.72, "end": 3047.8399999999997, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 51070], "temperature": 0.0, "avg_logprob": -0.8469533125559489, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.0004734463582281023}], "language": "en"}