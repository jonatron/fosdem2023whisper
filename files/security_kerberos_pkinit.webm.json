{"text": " Okay, we can't start. Hello, I'm Fraser, I come from Australia, work at Red Hat on identity management and PKI solutions, and yeah, talking about Kerberus PK Unit protocol. So I'll give an overview of the Kerberus authentication protocol, then I will discuss PK Unit, what its advantages are, how it works, and a short demo. Then I will discuss the security considerations and give a demonstration of a recently discovered attack against the implementation of Kerberus PK Unit that we have in free IPA. So Kerberus is an authentication protocol based on symmetric cryptography, it's a single sign on protocol so you can authenticate once per day, for example, and using a token from that initial authentication, you can then authenticate to additional services, hosts or users in the organisation's infrastructure. It was started at MIT in the late 80s, the current major version of the protocol is version five and it came about in the early 90s. The most recent IETF document describing the base protocol is RFC 4.1.2.0, and that was from 2005, so even that version is nearly 18 years old, but there have been many extensions and enhancements since then. The major implementations are MIT Kerberus, Microsoft Active Directory, Heimdall, and free IPA or identity management in RHEL, which uses MIT Kerberus under the hood with some additional extensions. The parties in the Kerberus authentication protocol are the client, the key distribution centre and services. So the key distribution centre or KDC consists of two services that are logically distinct within the protocol, but typically combined together into this one party, which is called the KDC. Users, services and the KDC itself are all represented as principles in a realm. So a principle is just a name for a user, host or service in the realm, and the realm is the namespace for those user hosts or services. So often you'll see one company, one organisation might have one realm, but as companies grow or have mergers and acquisitions, then typically you'll end up with multiple realms in your organisation. Each principle has a long term secret key, which is shared with the KDC. For users, it's typically derived from a password or passphrase, so using PBKDF2 or some other key derivation and algorithm. And for hosts and services, the file is often stored in just in a flat file, which we call a key tab. And the authentication tokens themselves, which are exchanged in this protocol, are called tickets. So let's do some diagrams. The parties, clients, server or services, and the KDC. We can see the client has a key, the server has a key, and the KDC has all of the keys, including the ticket granting service TGS key, which is one of the KDC services. So the initial authentication exchange involves what we call an ASREC or authentication service request. The client says, hey, it's me, I want to authenticate. It doesn't necessarily carry any authentication information. The authentication happens when the KDC responds to the client and the response includes a session key randomly generated by the KDC encrypted to the client's secret key. So the client does not authenticate to the KDC. There are ways that you can do that, but in the base protocol, the authentication happens because only the client can decrypt the response containing the session key. The response also contains a ticket called the ticket granting ticket, which is not encrypted to the client's key, but rather to the ticket granting services key. It also contains a copy of the session key and some information about the client. So the client can decrypt the session key and store the ticket granting ticket. After when the client wants to authenticate to the server, it sends a TGS request to the KDC saying, I would like to talk to such and such a principle, in this case, a server. It includes the ticket granting service ticket or TGT, and it also includes a timestamp for replay attack prevention and some client information encrypted to the session key. The KDC can use the TGS secret key to decrypt the ticket, pull out the session key, decrypt the client authenticator, make sure the client info matches up, make sure the timestamp is within an allowable skew, and if everything checks out, then in the TGS request, it will send a TGS reply. The KDC can return a ticket for the server, which contains a new session key, and it also returns the new session key encrypted under the existing session key for the TGS session. So the client can decrypt the second session key and store the ticket for the service, the service ticket, and finally, it can talk to the service. So it sends the application protocol request, it includes the service ticket, it includes an authenticator encrypted using the second session key. The server can then use its long-term secret key to decrypt the ticket, pull out the session key, and then it can use that session key to decrypt the authenticator, make sure the client info all lines up, make sure the timestamp is within the allowable skew, and then there's a shared session key between the client and the server. They can talk whatever protocol they want to talk using that session key. Okay, so that's the base Kerberos protocol. Kerberos has a bunch of extensions and integrations, there's a pre-authentication framework that allows you to integrate additional authentication mechanisms, such as a TOTP or an HOTP. There are mechanisms for embedding Kerberos authentication in the GSS API and in SASL, so that will allow you to use Kerberos authentication with other protocols that support those authentication frameworks, such as LDAP or SMTP, IMAP, et cetera. For HTTP, there's a protocol called Spenego or Spengo, and we can also include authorization information in the tickets which contain additional information about the client, how they authenticated to the KDC, so this is what we call the authentication indicator extension, and there are other kinds of authentication data. For example, Microsoft Active Directory includes what's called a PAC, I can't remember what that stands for, but Alexander will know. Forged attribute certificate, there you go, so that's the MS PAC extension, which you'll frequently see when you're working with Active Directory or Cross Realm trusts. With Active Directory, that's that final point, I explained that there were situations where you're dealing with multiple realms, what if principles from one realm need to communicate or authenticate to principles in a different realm, that is accomplished by trusts and the Cross Realm authentication mechanisms. The advantages of Kerberos, well, it's single sign-on which improves efficiency and reduces password fatigue for users. The client has to expose their long-term secret only once until the TGT expires, so maybe once per day at the start of the day logging into your workstation, a single authentication happens and from then on, you no longer need to explicitly authenticate. It is resistant to the replay attacks, that's why all of the authenticators include timestamps, and it works well for HTTP as well as bare network protocols, which is a shortcoming of the predominantly HTTP centric SSO protocols like SAML and OpenID Connect. But the problems are, of course, that passwords are not great and dealing with passwords or the secret keys in key tabs, making sure that they are rotated, making sure that they are secure in the first place, can be challenging and burdensome with substantial administrative overhead. So this brings us to PKINIT, or Public Key Cryptography for Initial Authentication in Kerberos as the RFC is called. In this protocol extension, the client can use asymmetric cryptography to authenticate to the KDC, and the client presents an X509 certificate in its initial authentication request, as well as a signature made with the public key or the private key corresponding to the public key contained in the certificate. The KDC verifies the certificate, the signature and the binding of the key in the certificate to the client principal, and if everything checks out, it can respond with a response encrypted either using Diffie-Hellman or some other analogous key agreement algorithm or another public key encryption algorithm such as direct RSA encryption. So visualizing this, the client in the Authentication Service request says, hey, it's me client, but this time it includes some additional pre-authentication data. It includes a timestamp, and if it wants to use Diffie-Hellman, a client DH value assigned by its public key, and it includes the X509 certificate containing that public key. In the KDC, once it has verified everything is happy to proceed, then its response includes the TGT, and it includes the session key encrypted using the public key algorithm, in this case Diffie-Hellman, as well as the KDC Diffie-Hellman value that the client will need to compute the secret with which the session key is encrypted, and then it can decrypt it, store the session key, store the TGT, and from this point forward, the rest of the protocol is exactly as before. In free IPA, by default, we can perform the binding of the certificate and key to the principal object using an exact certificate match only. So in the principal's LDAP entry, we'll store a complete copy of the certificate. We optionally support certificate mapping rules that allow you to be a bit more versatile in how you establish the binding between the certificate and the principal. For example, if you're using certificates for hosts, you can pull out the DNS name from the subject alternative name field in the certificate and construct an LDAP query saying, well, we're looking for hosts whose FQDN matches that DNS name from the certificate. And the client certificates can be signed by free IPA's internal CA or by a third-party CA that the KDC trusts. The user experience for PKInit, you can do it from a CLI, it's not very pleasant, but you can use SSSD integrated with your login manager to improve that experience, particularly if you're using smart cards or TPM for storing the private keys, or doing additional pre-authentication mechanisms like a two-factor authentication, and Windows offers a similar experience. It should be, in fact, it must be easy for users and friendly for users, otherwise people will not use it and you will not get the security benefits. So quick demo, K-list shows me what tickets I currently have, the answer is none. If I K-init as Alice, I can type Alice's passphrase, and I now have a TGT for Alice, so that was a password-based authentication, and if I ping the IPA server, that's just talking to the free IPA HTTP API, now if I K-list, I can see that behind the scenes, it's a quieter service ticket for one of the IPA HTTP servers, I'll just destroy those tickets now, and I'll do a PK-init, so if I change directory here, here I have a certificate and a key, and just pre-print the cert for you, so what can we say about this cert, and actually I'll tell you what, I'm doing things in the wrong order here, I'm going to do a host authentication first, so if I do K-init-x, X509, user identity equals file, and the certificate, and the key, and a host name, not a host name rather, but the principal name, host slash rel78.IPA.TEST, and K-list, here we have our TGT for the host principal, okay, so PK-init advantages, no more passwords or client-shared secrets, the keys can reside on the smart cards, or so for example in a UV key, in a TPM, or in hardware security module, and as I mentioned earlier, the rest of the protocol after the initial authentication service exchange is unchanged, which makes it easy for services. The complexities, well you need an X509PKI, this brings in the renewal considerations and revocation considerations, the hardware, if you want the benefit of the hardware security that will cause an additional financial cost to buy the hardware, and binding the public key to the principal is an important consideration, so in the RFC, it's RFC 4556 it says, the KDC must also check that the client's public key used to verify the client's signature is bound to the client principal name specified in the authentication service request, and it goes on to suggest how you can do that, a couple of ways you can do it, you can encode the principal name directly in the certificate in a specialised subject alternative name, or you can associate the certificate or the key directly with the principal in your database, that is what we have as the default behaviour in free IPA, but that introduces administrative overhead because when the certificate is renewed or the client re-keys, then you need to make sure that those entries are up to date, or you can use other heuristics, for example if the cert has a DNS name, pull that out and use that to look up a host, if the certificate has an RFC 822 name, which is an email address, pull that out, use it to look up a user principal, and you better not mess this up, which brings us to the CVE, so if we have a look at the certificate that I used to get this host principal, we'll see something interesting, it doesn't actually mention that principal name anywhere, the RAL7 8-0, but it does have a subject alternative name, it has two in fact, one of them is a wildcard DNS name. So what's happening here, it's an LDAP filter injection vulnerability, free IPA is not vulnerable in the default config because as I mentioned only exact certificate matches used by default. This bug is in the SSSD component, it was already resolved when I found it, so it was only older but still supported versions that were affected, and the fix has now been released and the details are public. So what's happening is that the cert map rule, sorry about that, the cert map rule is just pulling the DNS name out of the certificate and concatenating it directly into the LDAP filter without sanitization and in LDAP, asterisk is a substring match character, so using that certificate would let you get a TGT for any host principal in your realm. And another interesting question is what happens if this is your email address? Now this might seem like a stretch but that is a valid email address and I'm sure many of you work at companies or have worked at companies where you can request your own email alias at Red Hat, we certainly do. So if you managed to request an email alias such as this and the system approved it and you've got a certificate with that email address on it and you have a cert map rule that looks something like this where you're stuffing the subject RFC A22 name into the query and using it to look up a mail attribute and that was somehow nested inside an or list expression, then you've just got yourself a domain takeover. So let's see a demo of that. If there's time, there might not be time, I think, how much? Five minutes left. So I'm going to skip it. Sorry. I'll tell you what, after I finish the talk, if I can, I'll just do it. But let me discuss now the mitigation. So yes, if you're running a vulnerable version of SSSD, you should update it. The and list rules are harder to exploit than all lists. Just point out how the LDAP filter expressions work, the all list, if you have a single sub expression, then the whole list expression will match, but an and list you have to match every sub clause, so it's just easier to exploit an all list. You should definitely audit what data can get included in certificates, where that data comes from, and how it's included or encoded in the cert. And you could use exact certificate matching to avoid this issue, but that does come with the administrative overheads to handle renewals or re-keys. General security considerations for PK unit, well, and this first point is for just all software always, probably escape and sanitize your inputs according to how you're using them. You should review your CA trust, so which CAs are you trusting? What profiles for issuing the certificates are used or templates? And how are the attributes that go into the certificates validated? Who can issue the certificates that you trust, both in terms of their software systems and the agents, human or otherwise, who act to issue certificates? And can any of the attributes be influenced by users or other parties, such as if you have your email address alias request system? Just because a value is valid in a particular context does not mean that it's benign in another context. And the key in principle binding is a critical aspect of PK unit security and PKI application security in general. It is as critically important as validating your certificate chain and validating signatures. The full write up about this issue is at that link on my blog. And there's a link also to the entry about this issue in the Red Hat CVE database which includes the list of which products were affected and where the fixes have happened and where they are not happening. Okay. And that's also, I'll ask questions and then maybe I do the domain takeover demo in a minute. Maybe we have time up for one question. So is there anyone who has the best question that will be answered in one minute? They want the demo. Okay. So let's, I need to just change the cert map rules, which ones are active? Oops. If I can authenticate. Okay. My PA is cert map rule, find, this is just the set up. So I need to disable cert map two and enable cert map one. Okay. So this is the rule that I'm enabling. I didn't enable it. Oh, thank you for that. Okay. Now it's enabled. And I can do K in it. Let's see it'll be there in the scroll back somewhere. That's server, that's okay. So the naughty certificate and the naughty key. And I want to be admin. And now I'm admin. I'm going to show you the certificate. Okay. So the certificate was issued to Alice and the subject name includes Alice's malicious email alias. Okay. There you have it. That's, there you have it. Bye. Thank you. All right.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.84, "text": " Okay, we can't start.", "tokens": [1033, 11, 321, 393, 380, 722, 13], "temperature": 0.0, "avg_logprob": -0.5025390982627869, "compression_ratio": 1.0816326530612246, "no_speech_prob": 0.0755484476685524}, {"id": 1, "seek": 0, "start": 10.84, "end": 23.88, "text": " Hello, I'm Fraser, I come from Australia, work at Red Hat on identity management and", "tokens": [2425, 11, 286, 478, 49119, 11, 286, 808, 490, 7060, 11, 589, 412, 4477, 15867, 322, 6575, 4592, 293], "temperature": 0.0, "avg_logprob": -0.5025390982627869, "compression_ratio": 1.0816326530612246, "no_speech_prob": 0.0755484476685524}, {"id": 2, "seek": 2388, "start": 23.88, "end": 31.119999999999997, "text": " PKI solutions, and yeah, talking about Kerberus PK Unit protocol.", "tokens": [430, 27731, 6547, 11, 293, 1338, 11, 1417, 466, 20706, 607, 301, 49475, 27894, 10336, 13], "temperature": 0.0, "avg_logprob": -0.21643264670121043, "compression_ratio": 1.598984771573604, "no_speech_prob": 6.931654206709936e-05}, {"id": 3, "seek": 2388, "start": 31.119999999999997, "end": 36.96, "text": " So I'll give an overview of the Kerberus authentication protocol, then I will discuss", "tokens": [407, 286, 603, 976, 364, 12492, 295, 264, 20706, 607, 301, 26643, 10336, 11, 550, 286, 486, 2248], "temperature": 0.0, "avg_logprob": -0.21643264670121043, "compression_ratio": 1.598984771573604, "no_speech_prob": 6.931654206709936e-05}, {"id": 4, "seek": 2388, "start": 36.96, "end": 43.56, "text": " PK Unit, what its advantages are, how it works, and a short demo.", "tokens": [49475, 27894, 11, 437, 1080, 14906, 366, 11, 577, 309, 1985, 11, 293, 257, 2099, 10723, 13], "temperature": 0.0, "avg_logprob": -0.21643264670121043, "compression_ratio": 1.598984771573604, "no_speech_prob": 6.931654206709936e-05}, {"id": 5, "seek": 2388, "start": 43.56, "end": 51.68, "text": " Then I will discuss the security considerations and give a demonstration of a recently discovered", "tokens": [1396, 286, 486, 2248, 264, 3825, 24070, 293, 976, 257, 16520, 295, 257, 3938, 6941], "temperature": 0.0, "avg_logprob": -0.21643264670121043, "compression_ratio": 1.598984771573604, "no_speech_prob": 6.931654206709936e-05}, {"id": 6, "seek": 5168, "start": 51.68, "end": 61.24, "text": " attack against the implementation of Kerberus PK Unit that we have in free IPA.", "tokens": [2690, 1970, 264, 11420, 295, 20706, 607, 301, 49475, 27894, 300, 321, 362, 294, 1737, 8671, 32, 13], "temperature": 0.0, "avg_logprob": -0.12470167130231857, "compression_ratio": 1.4715909090909092, "no_speech_prob": 1.809752757253591e-05}, {"id": 7, "seek": 5168, "start": 61.24, "end": 68.0, "text": " So Kerberus is an authentication protocol based on symmetric cryptography, it's a single", "tokens": [407, 20706, 607, 301, 307, 364, 26643, 10336, 2361, 322, 32330, 9844, 5820, 11, 309, 311, 257, 2167], "temperature": 0.0, "avg_logprob": -0.12470167130231857, "compression_ratio": 1.4715909090909092, "no_speech_prob": 1.809752757253591e-05}, {"id": 8, "seek": 5168, "start": 68.0, "end": 76.24000000000001, "text": " sign on protocol so you can authenticate once per day, for example, and using a token from", "tokens": [1465, 322, 10336, 370, 291, 393, 9214, 8700, 1564, 680, 786, 11, 337, 1365, 11, 293, 1228, 257, 14862, 490], "temperature": 0.0, "avg_logprob": -0.12470167130231857, "compression_ratio": 1.4715909090909092, "no_speech_prob": 1.809752757253591e-05}, {"id": 9, "seek": 7624, "start": 76.24, "end": 83.47999999999999, "text": " that initial authentication, you can then authenticate to additional services, hosts", "tokens": [300, 5883, 26643, 11, 291, 393, 550, 9214, 8700, 281, 4497, 3328, 11, 21573], "temperature": 0.0, "avg_logprob": -0.16147645314534506, "compression_ratio": 1.5260115606936415, "no_speech_prob": 8.570232239435427e-06}, {"id": 10, "seek": 7624, "start": 83.47999999999999, "end": 89.75999999999999, "text": " or users in the organisation's infrastructure.", "tokens": [420, 5022, 294, 264, 18641, 311, 6896, 13], "temperature": 0.0, "avg_logprob": -0.16147645314534506, "compression_ratio": 1.5260115606936415, "no_speech_prob": 8.570232239435427e-06}, {"id": 11, "seek": 7624, "start": 89.75999999999999, "end": 97.24, "text": " It was started at MIT in the late 80s, the current major version of the protocol is version", "tokens": [467, 390, 1409, 412, 13100, 294, 264, 3469, 4688, 82, 11, 264, 2190, 2563, 3037, 295, 264, 10336, 307, 3037], "temperature": 0.0, "avg_logprob": -0.16147645314534506, "compression_ratio": 1.5260115606936415, "no_speech_prob": 8.570232239435427e-06}, {"id": 12, "seek": 7624, "start": 97.24, "end": 102.0, "text": " five and it came about in the early 90s.", "tokens": [1732, 293, 309, 1361, 466, 294, 264, 2440, 4289, 82, 13], "temperature": 0.0, "avg_logprob": -0.16147645314534506, "compression_ratio": 1.5260115606936415, "no_speech_prob": 8.570232239435427e-06}, {"id": 13, "seek": 10200, "start": 102.0, "end": 110.8, "text": " The most recent IETF document describing the base protocol is RFC 4.1.2.0, and that was", "tokens": [440, 881, 5162, 286, 4850, 37, 4166, 16141, 264, 3096, 10336, 307, 497, 18671, 1017, 13, 16, 13, 17, 13, 15, 11, 293, 300, 390], "temperature": 0.0, "avg_logprob": -0.15143553018569947, "compression_ratio": 1.3738317757009346, "no_speech_prob": 1.0354606274631806e-05}, {"id": 14, "seek": 10200, "start": 110.8, "end": 120.88, "text": " from 2005, so even that version is nearly 18 years old, but there have been many extensions", "tokens": [490, 14394, 11, 370, 754, 300, 3037, 307, 6217, 2443, 924, 1331, 11, 457, 456, 362, 668, 867, 25129], "temperature": 0.0, "avg_logprob": -0.15143553018569947, "compression_ratio": 1.3738317757009346, "no_speech_prob": 1.0354606274631806e-05}, {"id": 15, "seek": 10200, "start": 120.88, "end": 123.68, "text": " and enhancements since then.", "tokens": [293, 11985, 1117, 1670, 550, 13], "temperature": 0.0, "avg_logprob": -0.15143553018569947, "compression_ratio": 1.3738317757009346, "no_speech_prob": 1.0354606274631806e-05}, {"id": 16, "seek": 10200, "start": 123.68, "end": 130.16, "text": " The major implementations are MIT Kerberus, Microsoft Active Directory, Heimdall, and", "tokens": [440, 2563, 4445, 763, 366, 13100, 20706, 607, 301, 11, 8116, 26635, 49598, 11, 634, 332, 67, 336, 11, 293], "temperature": 0.0, "avg_logprob": -0.15143553018569947, "compression_ratio": 1.3738317757009346, "no_speech_prob": 1.0354606274631806e-05}, {"id": 17, "seek": 13016, "start": 130.16, "end": 138.07999999999998, "text": " free IPA or identity management in RHEL, which uses MIT Kerberus under the hood with some", "tokens": [1737, 8671, 32, 420, 6575, 4592, 294, 50209, 3158, 11, 597, 4960, 13100, 20706, 607, 301, 833, 264, 13376, 365, 512], "temperature": 0.0, "avg_logprob": -0.15274697762948494, "compression_ratio": 1.3703703703703705, "no_speech_prob": 1.1389607607270591e-05}, {"id": 18, "seek": 13016, "start": 138.07999999999998, "end": 142.92, "text": " additional extensions.", "tokens": [4497, 25129, 13], "temperature": 0.0, "avg_logprob": -0.15274697762948494, "compression_ratio": 1.3703703703703705, "no_speech_prob": 1.1389607607270591e-05}, {"id": 19, "seek": 13016, "start": 142.92, "end": 149.12, "text": " The parties in the Kerberus authentication protocol are the client, the key distribution", "tokens": [440, 8265, 294, 264, 20706, 607, 301, 26643, 10336, 366, 264, 6423, 11, 264, 2141, 7316], "temperature": 0.0, "avg_logprob": -0.15274697762948494, "compression_ratio": 1.3703703703703705, "no_speech_prob": 1.1389607607270591e-05}, {"id": 20, "seek": 13016, "start": 149.12, "end": 153.76, "text": " centre and services.", "tokens": [10093, 293, 3328, 13], "temperature": 0.0, "avg_logprob": -0.15274697762948494, "compression_ratio": 1.3703703703703705, "no_speech_prob": 1.1389607607270591e-05}, {"id": 21, "seek": 15376, "start": 153.76, "end": 161.12, "text": " So the key distribution centre or KDC consists of two services that are logically distinct", "tokens": [407, 264, 2141, 7316, 10093, 420, 591, 25619, 14689, 295, 732, 3328, 300, 366, 38887, 10644], "temperature": 0.0, "avg_logprob": -0.16239154061605765, "compression_ratio": 1.655813953488372, "no_speech_prob": 1.0221249794994947e-05}, {"id": 22, "seek": 15376, "start": 161.12, "end": 167.88, "text": " within the protocol, but typically combined together into this one party, which is called", "tokens": [1951, 264, 10336, 11, 457, 5850, 9354, 1214, 666, 341, 472, 3595, 11, 597, 307, 1219], "temperature": 0.0, "avg_logprob": -0.16239154061605765, "compression_ratio": 1.655813953488372, "no_speech_prob": 1.0221249794994947e-05}, {"id": 23, "seek": 15376, "start": 167.88, "end": 169.6, "text": " the KDC.", "tokens": [264, 591, 25619, 13], "temperature": 0.0, "avg_logprob": -0.16239154061605765, "compression_ratio": 1.655813953488372, "no_speech_prob": 1.0221249794994947e-05}, {"id": 24, "seek": 15376, "start": 169.6, "end": 177.07999999999998, "text": " Users, services and the KDC itself are all represented as principles in a realm.", "tokens": [47092, 11, 3328, 293, 264, 591, 25619, 2564, 366, 439, 10379, 382, 9156, 294, 257, 15355, 13], "temperature": 0.0, "avg_logprob": -0.16239154061605765, "compression_ratio": 1.655813953488372, "no_speech_prob": 1.0221249794994947e-05}, {"id": 25, "seek": 15376, "start": 177.07999999999998, "end": 182.23999999999998, "text": " So a principle is just a name for a user, host or service in the realm, and the realm", "tokens": [407, 257, 8665, 307, 445, 257, 1315, 337, 257, 4195, 11, 3975, 420, 2643, 294, 264, 15355, 11, 293, 264, 15355], "temperature": 0.0, "avg_logprob": -0.16239154061605765, "compression_ratio": 1.655813953488372, "no_speech_prob": 1.0221249794994947e-05}, {"id": 26, "seek": 18224, "start": 182.24, "end": 185.8, "text": " is the namespace for those user hosts or services.", "tokens": [307, 264, 5288, 17940, 337, 729, 4195, 21573, 420, 3328, 13], "temperature": 0.0, "avg_logprob": -0.10632305145263672, "compression_ratio": 1.5603864734299517, "no_speech_prob": 1.0356979146308731e-05}, {"id": 27, "seek": 18224, "start": 185.8, "end": 191.48000000000002, "text": " So often you'll see one company, one organisation might have one realm, but as companies grow", "tokens": [407, 2049, 291, 603, 536, 472, 2237, 11, 472, 18641, 1062, 362, 472, 15355, 11, 457, 382, 3431, 1852], "temperature": 0.0, "avg_logprob": -0.10632305145263672, "compression_ratio": 1.5603864734299517, "no_speech_prob": 1.0356979146308731e-05}, {"id": 28, "seek": 18224, "start": 191.48000000000002, "end": 198.16, "text": " or have mergers and acquisitions, then typically you'll end up with multiple realms in your", "tokens": [420, 362, 3551, 9458, 293, 17883, 2451, 11, 550, 5850, 291, 603, 917, 493, 365, 3866, 42824, 294, 428], "temperature": 0.0, "avg_logprob": -0.10632305145263672, "compression_ratio": 1.5603864734299517, "no_speech_prob": 1.0356979146308731e-05}, {"id": 29, "seek": 18224, "start": 198.16, "end": 200.76000000000002, "text": " organisation.", "tokens": [18641, 13], "temperature": 0.0, "avg_logprob": -0.10632305145263672, "compression_ratio": 1.5603864734299517, "no_speech_prob": 1.0356979146308731e-05}, {"id": 30, "seek": 18224, "start": 200.76000000000002, "end": 208.44, "text": " Each principle has a long term secret key, which is shared with the KDC.", "tokens": [6947, 8665, 575, 257, 938, 1433, 4054, 2141, 11, 597, 307, 5507, 365, 264, 591, 25619, 13], "temperature": 0.0, "avg_logprob": -0.10632305145263672, "compression_ratio": 1.5603864734299517, "no_speech_prob": 1.0356979146308731e-05}, {"id": 31, "seek": 20844, "start": 208.44, "end": 215.6, "text": " For users, it's typically derived from a password or passphrase, so using PBKDF2 or", "tokens": [1171, 5022, 11, 309, 311, 5850, 18949, 490, 257, 11524, 420, 1320, 44598, 651, 11, 370, 1228, 24056, 42, 35, 37, 17, 420], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 32, "seek": 20844, "start": 215.6, "end": 219.24, "text": " some other key derivation and algorithm.", "tokens": [512, 661, 2141, 10151, 399, 293, 9284, 13], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 33, "seek": 20844, "start": 219.24, "end": 225.16, "text": " And for hosts and services, the file is often stored in just in a flat file, which we call", "tokens": [400, 337, 21573, 293, 3328, 11, 264, 3991, 307, 2049, 12187, 294, 445, 294, 257, 4962, 3991, 11, 597, 321, 818], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 34, "seek": 20844, "start": 225.16, "end": 227.56, "text": " a key tab.", "tokens": [257, 2141, 4421, 13], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 35, "seek": 20844, "start": 227.56, "end": 232.84, "text": " And the authentication tokens themselves, which are exchanged in this protocol, are", "tokens": [400, 264, 26643, 22667, 2969, 11, 597, 366, 38378, 294, 341, 10336, 11, 366], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 36, "seek": 20844, "start": 232.84, "end": 235.6, "text": " called tickets.", "tokens": [1219, 12628, 13], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 37, "seek": 20844, "start": 235.6, "end": 238.04, "text": " So let's do some diagrams.", "tokens": [407, 718, 311, 360, 512, 36709, 13], "temperature": 0.0, "avg_logprob": -0.18190991878509521, "compression_ratio": 1.5281385281385282, "no_speech_prob": 5.3023868531454355e-06}, {"id": 38, "seek": 23804, "start": 238.04, "end": 243.32, "text": " The parties, clients, server or services, and the KDC.", "tokens": [440, 8265, 11, 6982, 11, 7154, 420, 3328, 11, 293, 264, 591, 25619, 13], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 39, "seek": 23804, "start": 243.32, "end": 248.79999999999998, "text": " We can see the client has a key, the server has a key, and the KDC has all of the keys,", "tokens": [492, 393, 536, 264, 6423, 575, 257, 2141, 11, 264, 7154, 575, 257, 2141, 11, 293, 264, 591, 25619, 575, 439, 295, 264, 9317, 11], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 40, "seek": 23804, "start": 248.79999999999998, "end": 255.88, "text": " including the ticket granting service TGS key, which is one of the KDC services.", "tokens": [3009, 264, 10550, 50204, 2643, 314, 24446, 2141, 11, 597, 307, 472, 295, 264, 591, 25619, 3328, 13], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 41, "seek": 23804, "start": 255.88, "end": 261.76, "text": " So the initial authentication exchange involves what we call an ASREC or authentication service", "tokens": [407, 264, 5883, 26643, 7742, 11626, 437, 321, 818, 364, 7469, 3850, 34, 420, 26643, 2643], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 42, "seek": 23804, "start": 261.76, "end": 262.76, "text": " request.", "tokens": [5308, 13], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 43, "seek": 23804, "start": 262.76, "end": 267.24, "text": " The client says, hey, it's me, I want to authenticate.", "tokens": [440, 6423, 1619, 11, 4177, 11, 309, 311, 385, 11, 286, 528, 281, 9214, 8700, 13], "temperature": 0.0, "avg_logprob": -0.12476569584437779, "compression_ratio": 1.7649769585253456, "no_speech_prob": 1.0993085197696928e-05}, {"id": 44, "seek": 26724, "start": 267.24, "end": 271.32, "text": " It doesn't necessarily carry any authentication information.", "tokens": [467, 1177, 380, 4725, 3985, 604, 26643, 1589, 13], "temperature": 0.0, "avg_logprob": -0.09405104510755424, "compression_ratio": 1.7912621359223302, "no_speech_prob": 1.490224076405866e-05}, {"id": 45, "seek": 26724, "start": 271.32, "end": 279.64, "text": " The authentication happens when the KDC responds to the client and the response includes a", "tokens": [440, 26643, 2314, 562, 264, 591, 25619, 27331, 281, 264, 6423, 293, 264, 4134, 5974, 257], "temperature": 0.0, "avg_logprob": -0.09405104510755424, "compression_ratio": 1.7912621359223302, "no_speech_prob": 1.490224076405866e-05}, {"id": 46, "seek": 26724, "start": 279.64, "end": 286.28000000000003, "text": " session key randomly generated by the KDC encrypted to the client's secret key.", "tokens": [5481, 2141, 16979, 10833, 538, 264, 591, 25619, 36663, 281, 264, 6423, 311, 4054, 2141, 13], "temperature": 0.0, "avg_logprob": -0.09405104510755424, "compression_ratio": 1.7912621359223302, "no_speech_prob": 1.490224076405866e-05}, {"id": 47, "seek": 26724, "start": 286.28000000000003, "end": 290.8, "text": " So the client does not authenticate to the KDC.", "tokens": [407, 264, 6423, 775, 406, 9214, 8700, 281, 264, 591, 25619, 13], "temperature": 0.0, "avg_logprob": -0.09405104510755424, "compression_ratio": 1.7912621359223302, "no_speech_prob": 1.490224076405866e-05}, {"id": 48, "seek": 26724, "start": 290.8, "end": 295.8, "text": " There are ways that you can do that, but in the base protocol, the authentication happens", "tokens": [821, 366, 2098, 300, 291, 393, 360, 300, 11, 457, 294, 264, 3096, 10336, 11, 264, 26643, 2314], "temperature": 0.0, "avg_logprob": -0.09405104510755424, "compression_ratio": 1.7912621359223302, "no_speech_prob": 1.490224076405866e-05}, {"id": 49, "seek": 29580, "start": 295.8, "end": 300.84000000000003, "text": " because only the client can decrypt the response containing the session key.", "tokens": [570, 787, 264, 6423, 393, 979, 627, 662, 264, 4134, 19273, 264, 5481, 2141, 13], "temperature": 0.0, "avg_logprob": -0.07211254979227925, "compression_ratio": 2.1793478260869565, "no_speech_prob": 3.3259877909586066e-06}, {"id": 50, "seek": 29580, "start": 300.84000000000003, "end": 307.32, "text": " The response also contains a ticket called the ticket granting ticket, which is not encrypted", "tokens": [440, 4134, 611, 8306, 257, 10550, 1219, 264, 10550, 50204, 10550, 11, 597, 307, 406, 36663], "temperature": 0.0, "avg_logprob": -0.07211254979227925, "compression_ratio": 2.1793478260869565, "no_speech_prob": 3.3259877909586066e-06}, {"id": 51, "seek": 29580, "start": 307.32, "end": 312.12, "text": " to the client's key, but rather to the ticket granting services key.", "tokens": [281, 264, 6423, 311, 2141, 11, 457, 2831, 281, 264, 10550, 50204, 3328, 2141, 13], "temperature": 0.0, "avg_logprob": -0.07211254979227925, "compression_ratio": 2.1793478260869565, "no_speech_prob": 3.3259877909586066e-06}, {"id": 52, "seek": 29580, "start": 312.12, "end": 318.16, "text": " It also contains a copy of the session key and some information about the client.", "tokens": [467, 611, 8306, 257, 5055, 295, 264, 5481, 2141, 293, 512, 1589, 466, 264, 6423, 13], "temperature": 0.0, "avg_logprob": -0.07211254979227925, "compression_ratio": 2.1793478260869565, "no_speech_prob": 3.3259877909586066e-06}, {"id": 53, "seek": 29580, "start": 318.16, "end": 324.48, "text": " So the client can decrypt the session key and store the ticket granting ticket.", "tokens": [407, 264, 6423, 393, 979, 627, 662, 264, 5481, 2141, 293, 3531, 264, 10550, 50204, 10550, 13], "temperature": 0.0, "avg_logprob": -0.07211254979227925, "compression_ratio": 2.1793478260869565, "no_speech_prob": 3.3259877909586066e-06}, {"id": 54, "seek": 32448, "start": 324.48, "end": 331.96000000000004, "text": " After when the client wants to authenticate to the server, it sends a TGS request to the", "tokens": [2381, 562, 264, 6423, 2738, 281, 9214, 8700, 281, 264, 7154, 11, 309, 14790, 257, 314, 24446, 5308, 281, 264], "temperature": 0.0, "avg_logprob": -0.1494431359427316, "compression_ratio": 1.5290697674418605, "no_speech_prob": 1.467480615247041e-05}, {"id": 55, "seek": 32448, "start": 331.96000000000004, "end": 339.24, "text": " KDC saying, I would like to talk to such and such a principle, in this case, a server.", "tokens": [591, 25619, 1566, 11, 286, 576, 411, 281, 751, 281, 1270, 293, 1270, 257, 8665, 11, 294, 341, 1389, 11, 257, 7154, 13], "temperature": 0.0, "avg_logprob": -0.1494431359427316, "compression_ratio": 1.5290697674418605, "no_speech_prob": 1.467480615247041e-05}, {"id": 56, "seek": 32448, "start": 339.24, "end": 347.64000000000004, "text": " It includes the ticket granting service ticket or TGT, and it also includes a timestamp", "tokens": [467, 5974, 264, 10550, 50204, 2643, 10550, 420, 314, 38, 51, 11, 293, 309, 611, 5974, 257, 49108, 1215], "temperature": 0.0, "avg_logprob": -0.1494431359427316, "compression_ratio": 1.5290697674418605, "no_speech_prob": 1.467480615247041e-05}, {"id": 57, "seek": 34764, "start": 347.64, "end": 354.84, "text": " for replay attack prevention and some client information encrypted to the session key.", "tokens": [337, 23836, 2690, 14630, 293, 512, 6423, 1589, 36663, 281, 264, 5481, 2141, 13], "temperature": 0.0, "avg_logprob": -0.1720519537454123, "compression_ratio": 1.7129186602870814, "no_speech_prob": 1.5548421288258396e-05}, {"id": 58, "seek": 34764, "start": 354.84, "end": 363.52, "text": " The KDC can use the TGS secret key to decrypt the ticket, pull out the session key, decrypt", "tokens": [440, 591, 25619, 393, 764, 264, 314, 24446, 4054, 2141, 281, 979, 627, 662, 264, 10550, 11, 2235, 484, 264, 5481, 2141, 11, 979, 627, 662], "temperature": 0.0, "avg_logprob": -0.1720519537454123, "compression_ratio": 1.7129186602870814, "no_speech_prob": 1.5548421288258396e-05}, {"id": 59, "seek": 34764, "start": 363.52, "end": 369.0, "text": " the client authenticator, make sure the client info matches up, make sure the timestamp", "tokens": [264, 6423, 12466, 1639, 11, 652, 988, 264, 6423, 13614, 10676, 493, 11, 652, 988, 264, 49108, 1215], "temperature": 0.0, "avg_logprob": -0.1720519537454123, "compression_ratio": 1.7129186602870814, "no_speech_prob": 1.5548421288258396e-05}, {"id": 60, "seek": 34764, "start": 369.0, "end": 377.0, "text": " is within an allowable skew, and if everything checks out, then in the TGS request, it will", "tokens": [307, 1951, 364, 2089, 712, 8756, 86, 11, 293, 498, 1203, 13834, 484, 11, 550, 294, 264, 314, 24446, 5308, 11, 309, 486], "temperature": 0.0, "avg_logprob": -0.1720519537454123, "compression_ratio": 1.7129186602870814, "no_speech_prob": 1.5548421288258396e-05}, {"id": 61, "seek": 37700, "start": 377.0, "end": 378.84, "text": " send a TGS reply.", "tokens": [2845, 257, 314, 24446, 16972, 13], "temperature": 0.0, "avg_logprob": -0.13045875677901708, "compression_ratio": 1.8852459016393444, "no_speech_prob": 1.4026608369022142e-05}, {"id": 62, "seek": 37700, "start": 378.84, "end": 385.96, "text": " The KDC can return a ticket for the server, which contains a new session key, and it also", "tokens": [440, 591, 25619, 393, 2736, 257, 10550, 337, 264, 7154, 11, 597, 8306, 257, 777, 5481, 2141, 11, 293, 309, 611], "temperature": 0.0, "avg_logprob": -0.13045875677901708, "compression_ratio": 1.8852459016393444, "no_speech_prob": 1.4026608369022142e-05}, {"id": 63, "seek": 37700, "start": 385.96, "end": 394.52, "text": " returns the new session key encrypted under the existing session key for the TGS session.", "tokens": [11247, 264, 777, 5481, 2141, 36663, 833, 264, 6741, 5481, 2141, 337, 264, 314, 24446, 5481, 13], "temperature": 0.0, "avg_logprob": -0.13045875677901708, "compression_ratio": 1.8852459016393444, "no_speech_prob": 1.4026608369022142e-05}, {"id": 64, "seek": 37700, "start": 394.52, "end": 400.84, "text": " So the client can decrypt the second session key and store the ticket for the service,", "tokens": [407, 264, 6423, 393, 979, 627, 662, 264, 1150, 5481, 2141, 293, 3531, 264, 10550, 337, 264, 2643, 11], "temperature": 0.0, "avg_logprob": -0.13045875677901708, "compression_ratio": 1.8852459016393444, "no_speech_prob": 1.4026608369022142e-05}, {"id": 65, "seek": 37700, "start": 400.84, "end": 404.52, "text": " the service ticket, and finally, it can talk to the service.", "tokens": [264, 2643, 10550, 11, 293, 2721, 11, 309, 393, 751, 281, 264, 2643, 13], "temperature": 0.0, "avg_logprob": -0.13045875677901708, "compression_ratio": 1.8852459016393444, "no_speech_prob": 1.4026608369022142e-05}, {"id": 66, "seek": 40452, "start": 404.52, "end": 410.12, "text": " So it sends the application protocol request, it includes the service ticket, it includes", "tokens": [407, 309, 14790, 264, 3861, 10336, 5308, 11, 309, 5974, 264, 2643, 10550, 11, 309, 5974], "temperature": 0.0, "avg_logprob": -0.07625275391798753, "compression_ratio": 1.9009009009009008, "no_speech_prob": 9.199444320984185e-06}, {"id": 67, "seek": 40452, "start": 410.12, "end": 414.12, "text": " an authenticator encrypted using the second session key.", "tokens": [364, 12466, 1639, 36663, 1228, 264, 1150, 5481, 2141, 13], "temperature": 0.0, "avg_logprob": -0.07625275391798753, "compression_ratio": 1.9009009009009008, "no_speech_prob": 9.199444320984185e-06}, {"id": 68, "seek": 40452, "start": 414.12, "end": 420.28, "text": " The server can then use its long-term secret key to decrypt the ticket, pull out the session", "tokens": [440, 7154, 393, 550, 764, 1080, 938, 12, 7039, 4054, 2141, 281, 979, 627, 662, 264, 10550, 11, 2235, 484, 264, 5481], "temperature": 0.0, "avg_logprob": -0.07625275391798753, "compression_ratio": 1.9009009009009008, "no_speech_prob": 9.199444320984185e-06}, {"id": 69, "seek": 40452, "start": 420.28, "end": 426.64, "text": " key, and then it can use that session key to decrypt the authenticator, make sure the", "tokens": [2141, 11, 293, 550, 309, 393, 764, 300, 5481, 2141, 281, 979, 627, 662, 264, 12466, 1639, 11, 652, 988, 264], "temperature": 0.0, "avg_logprob": -0.07625275391798753, "compression_ratio": 1.9009009009009008, "no_speech_prob": 9.199444320984185e-06}, {"id": 70, "seek": 40452, "start": 426.64, "end": 432.59999999999997, "text": " client info all lines up, make sure the timestamp is within the allowable skew, and then there's", "tokens": [6423, 13614, 439, 3876, 493, 11, 652, 988, 264, 49108, 1215, 307, 1951, 264, 2089, 712, 8756, 86, 11, 293, 550, 456, 311], "temperature": 0.0, "avg_logprob": -0.07625275391798753, "compression_ratio": 1.9009009009009008, "no_speech_prob": 9.199444320984185e-06}, {"id": 71, "seek": 43260, "start": 432.6, "end": 435.44, "text": " a shared session key between the client and the server.", "tokens": [257, 5507, 5481, 2141, 1296, 264, 6423, 293, 264, 7154, 13], "temperature": 0.0, "avg_logprob": -0.13434125040913678, "compression_ratio": 1.6543778801843319, "no_speech_prob": 1.0873694009205792e-05}, {"id": 72, "seek": 43260, "start": 435.44, "end": 441.28000000000003, "text": " They can talk whatever protocol they want to talk using that session key.", "tokens": [814, 393, 751, 2035, 10336, 436, 528, 281, 751, 1228, 300, 5481, 2141, 13], "temperature": 0.0, "avg_logprob": -0.13434125040913678, "compression_ratio": 1.6543778801843319, "no_speech_prob": 1.0873694009205792e-05}, {"id": 73, "seek": 43260, "start": 441.28000000000003, "end": 448.12, "text": " Okay, so that's the base Kerberos protocol.", "tokens": [1033, 11, 370, 300, 311, 264, 3096, 20706, 607, 329, 10336, 13], "temperature": 0.0, "avg_logprob": -0.13434125040913678, "compression_ratio": 1.6543778801843319, "no_speech_prob": 1.0873694009205792e-05}, {"id": 74, "seek": 43260, "start": 448.12, "end": 453.44, "text": " Kerberos has a bunch of extensions and integrations, there's a pre-authentication framework that", "tokens": [20706, 607, 329, 575, 257, 3840, 295, 25129, 293, 3572, 763, 11, 456, 311, 257, 659, 12, 40198, 317, 8758, 8388, 300], "temperature": 0.0, "avg_logprob": -0.13434125040913678, "compression_ratio": 1.6543778801843319, "no_speech_prob": 1.0873694009205792e-05}, {"id": 75, "seek": 43260, "start": 453.44, "end": 462.0, "text": " allows you to integrate additional authentication mechanisms, such as a TOTP or an HOTP.", "tokens": [4045, 291, 281, 13365, 4497, 26643, 15902, 11, 1270, 382, 257, 314, 5068, 47, 420, 364, 389, 5068, 47, 13], "temperature": 0.0, "avg_logprob": -0.13434125040913678, "compression_ratio": 1.6543778801843319, "no_speech_prob": 1.0873694009205792e-05}, {"id": 76, "seek": 46200, "start": 462.0, "end": 469.28, "text": " There are mechanisms for embedding Kerberos authentication in the GSS API and in SASL,", "tokens": [821, 366, 15902, 337, 12240, 3584, 20706, 607, 329, 26643, 294, 264, 460, 21929, 9362, 293, 294, 33441, 43, 11], "temperature": 0.0, "avg_logprob": -0.13838231703814338, "compression_ratio": 1.555045871559633, "no_speech_prob": 1.639168112888001e-05}, {"id": 77, "seek": 46200, "start": 469.28, "end": 474.76, "text": " so that will allow you to use Kerberos authentication with other protocols that support those authentication", "tokens": [370, 300, 486, 2089, 291, 281, 764, 20706, 607, 329, 26643, 365, 661, 20618, 300, 1406, 729, 26643], "temperature": 0.0, "avg_logprob": -0.13838231703814338, "compression_ratio": 1.555045871559633, "no_speech_prob": 1.639168112888001e-05}, {"id": 78, "seek": 46200, "start": 474.76, "end": 481.12, "text": " frameworks, such as LDAP or SMTP, IMAP, et cetera.", "tokens": [29834, 11, 1270, 382, 33936, 4715, 420, 13115, 16804, 11, 21463, 4715, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.13838231703814338, "compression_ratio": 1.555045871559633, "no_speech_prob": 1.639168112888001e-05}, {"id": 79, "seek": 46200, "start": 481.12, "end": 489.6, "text": " For HTTP, there's a protocol called Spenego or Spengo, and we can also include authorization", "tokens": [1171, 33283, 11, 456, 311, 257, 10336, 1219, 1738, 268, 6308, 420, 1738, 30362, 11, 293, 321, 393, 611, 4090, 33697], "temperature": 0.0, "avg_logprob": -0.13838231703814338, "compression_ratio": 1.555045871559633, "no_speech_prob": 1.639168112888001e-05}, {"id": 80, "seek": 48960, "start": 489.6, "end": 498.08000000000004, "text": " information in the tickets which contain additional information about the client, how they authenticated", "tokens": [1589, 294, 264, 12628, 597, 5304, 4497, 1589, 466, 264, 6423, 11, 577, 436, 9214, 3587], "temperature": 0.0, "avg_logprob": -0.17893071174621583, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.2340560462907888e-05}, {"id": 81, "seek": 48960, "start": 498.08000000000004, "end": 504.40000000000003, "text": " to the KDC, so this is what we call the authentication indicator extension, and there are other kinds", "tokens": [281, 264, 591, 25619, 11, 370, 341, 307, 437, 321, 818, 264, 26643, 16961, 10320, 11, 293, 456, 366, 661, 3685], "temperature": 0.0, "avg_logprob": -0.17893071174621583, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.2340560462907888e-05}, {"id": 82, "seek": 48960, "start": 504.40000000000003, "end": 505.84000000000003, "text": " of authentication data.", "tokens": [295, 26643, 1412, 13], "temperature": 0.0, "avg_logprob": -0.17893071174621583, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.2340560462907888e-05}, {"id": 83, "seek": 48960, "start": 505.84000000000003, "end": 511.32000000000005, "text": " For example, Microsoft Active Directory includes what's called a PAC, I can't remember what", "tokens": [1171, 1365, 11, 8116, 26635, 49598, 5974, 437, 311, 1219, 257, 46644, 11, 286, 393, 380, 1604, 437], "temperature": 0.0, "avg_logprob": -0.17893071174621583, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.2340560462907888e-05}, {"id": 84, "seek": 48960, "start": 511.32000000000005, "end": 519.32, "text": " that stands for, but Alexander will know.", "tokens": [300, 7382, 337, 11, 457, 14845, 486, 458, 13], "temperature": 0.0, "avg_logprob": -0.17893071174621583, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.2340560462907888e-05}, {"id": 85, "seek": 51932, "start": 519.32, "end": 523.36, "text": " Forged attribute certificate, there you go, so that's the MS PAC extension, which you'll", "tokens": [1171, 3004, 19667, 15953, 11, 456, 291, 352, 11, 370, 300, 311, 264, 7395, 46644, 10320, 11, 597, 291, 603], "temperature": 0.0, "avg_logprob": -0.16986284757915296, "compression_ratio": 1.6692015209125475, "no_speech_prob": 2.8171310987090692e-05}, {"id": 86, "seek": 51932, "start": 523.36, "end": 529.08, "text": " frequently see when you're working with Active Directory or Cross Realm trusts.", "tokens": [10374, 536, 562, 291, 434, 1364, 365, 26635, 49598, 420, 11623, 44723, 45358, 13], "temperature": 0.0, "avg_logprob": -0.16986284757915296, "compression_ratio": 1.6692015209125475, "no_speech_prob": 2.8171310987090692e-05}, {"id": 87, "seek": 51932, "start": 529.08, "end": 535.2800000000001, "text": " With Active Directory, that's that final point, I explained that there were situations where", "tokens": [2022, 26635, 49598, 11, 300, 311, 300, 2572, 935, 11, 286, 8825, 300, 456, 645, 6851, 689], "temperature": 0.0, "avg_logprob": -0.16986284757915296, "compression_ratio": 1.6692015209125475, "no_speech_prob": 2.8171310987090692e-05}, {"id": 88, "seek": 51932, "start": 535.2800000000001, "end": 541.1600000000001, "text": " you're dealing with multiple realms, what if principles from one realm need to communicate", "tokens": [291, 434, 6260, 365, 3866, 42824, 11, 437, 498, 9156, 490, 472, 15355, 643, 281, 7890], "temperature": 0.0, "avg_logprob": -0.16986284757915296, "compression_ratio": 1.6692015209125475, "no_speech_prob": 2.8171310987090692e-05}, {"id": 89, "seek": 51932, "start": 541.1600000000001, "end": 546.8000000000001, "text": " or authenticate to principles in a different realm, that is accomplished by trusts and", "tokens": [420, 9214, 8700, 281, 9156, 294, 257, 819, 15355, 11, 300, 307, 15419, 538, 45358, 293], "temperature": 0.0, "avg_logprob": -0.16986284757915296, "compression_ratio": 1.6692015209125475, "no_speech_prob": 2.8171310987090692e-05}, {"id": 90, "seek": 54680, "start": 546.8, "end": 551.92, "text": " the Cross Realm authentication mechanisms.", "tokens": [264, 11623, 44723, 26643, 15902, 13], "temperature": 0.0, "avg_logprob": -0.16309876039803747, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.1899195669684559e-05}, {"id": 91, "seek": 54680, "start": 551.92, "end": 556.88, "text": " The advantages of Kerberos, well, it's single sign-on which improves efficiency and reduces", "tokens": [440, 14906, 295, 20706, 607, 329, 11, 731, 11, 309, 311, 2167, 1465, 12, 266, 597, 24771, 10493, 293, 18081], "temperature": 0.0, "avg_logprob": -0.16309876039803747, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.1899195669684559e-05}, {"id": 92, "seek": 54680, "start": 556.88, "end": 561.0799999999999, "text": " password fatigue for users.", "tokens": [11524, 20574, 337, 5022, 13], "temperature": 0.0, "avg_logprob": -0.16309876039803747, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.1899195669684559e-05}, {"id": 93, "seek": 54680, "start": 561.0799999999999, "end": 568.8, "text": " The client has to expose their long-term secret only once until the TGT expires, so maybe", "tokens": [440, 6423, 575, 281, 19219, 641, 938, 12, 7039, 4054, 787, 1564, 1826, 264, 314, 38, 51, 1278, 3145, 11, 370, 1310], "temperature": 0.0, "avg_logprob": -0.16309876039803747, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.1899195669684559e-05}, {"id": 94, "seek": 54680, "start": 568.8, "end": 575.4399999999999, "text": " once per day at the start of the day logging into your workstation, a single authentication", "tokens": [1564, 680, 786, 412, 264, 722, 295, 264, 786, 27991, 666, 428, 589, 19159, 11, 257, 2167, 26643], "temperature": 0.0, "avg_logprob": -0.16309876039803747, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.1899195669684559e-05}, {"id": 95, "seek": 57544, "start": 575.44, "end": 583.0, "text": " happens and from then on, you no longer need to explicitly authenticate.", "tokens": [2314, 293, 490, 550, 322, 11, 291, 572, 2854, 643, 281, 20803, 9214, 8700, 13], "temperature": 0.0, "avg_logprob": -0.13205223698769847, "compression_ratio": 1.4628571428571429, "no_speech_prob": 1.7420501535525545e-05}, {"id": 96, "seek": 57544, "start": 583.0, "end": 589.6400000000001, "text": " It is resistant to the replay attacks, that's why all of the authenticators include timestamps,", "tokens": [467, 307, 20383, 281, 264, 23836, 8122, 11, 300, 311, 983, 439, 295, 264, 12466, 3391, 4090, 49108, 23150, 11], "temperature": 0.0, "avg_logprob": -0.13205223698769847, "compression_ratio": 1.4628571428571429, "no_speech_prob": 1.7420501535525545e-05}, {"id": 97, "seek": 57544, "start": 589.6400000000001, "end": 596.72, "text": " and it works well for HTTP as well as bare network protocols, which is a shortcoming of", "tokens": [293, 309, 1985, 731, 337, 33283, 382, 731, 382, 6949, 3209, 20618, 11, 597, 307, 257, 2099, 6590, 295], "temperature": 0.0, "avg_logprob": -0.13205223698769847, "compression_ratio": 1.4628571428571429, "no_speech_prob": 1.7420501535525545e-05}, {"id": 98, "seek": 59672, "start": 596.72, "end": 607.24, "text": " the predominantly HTTP centric SSO protocols like SAML and OpenID Connect.", "tokens": [264, 29893, 33283, 1489, 1341, 12238, 46, 20618, 411, 9617, 43, 293, 7238, 2777, 11653, 13], "temperature": 0.0, "avg_logprob": -0.13475496341020632, "compression_ratio": 1.572072072072072, "no_speech_prob": 1.705652175587602e-05}, {"id": 99, "seek": 59672, "start": 607.24, "end": 613.32, "text": " But the problems are, of course, that passwords are not great and dealing with passwords or", "tokens": [583, 264, 2740, 366, 11, 295, 1164, 11, 300, 33149, 366, 406, 869, 293, 6260, 365, 33149, 420], "temperature": 0.0, "avg_logprob": -0.13475496341020632, "compression_ratio": 1.572072072072072, "no_speech_prob": 1.705652175587602e-05}, {"id": 100, "seek": 59672, "start": 613.32, "end": 618.72, "text": " the secret keys in key tabs, making sure that they are rotated, making sure that they are", "tokens": [264, 4054, 9317, 294, 2141, 20743, 11, 1455, 988, 300, 436, 366, 42146, 11, 1455, 988, 300, 436, 366], "temperature": 0.0, "avg_logprob": -0.13475496341020632, "compression_ratio": 1.572072072072072, "no_speech_prob": 1.705652175587602e-05}, {"id": 101, "seek": 59672, "start": 618.72, "end": 626.0, "text": " secure in the first place, can be challenging and burdensome with substantial administrative", "tokens": [7144, 294, 264, 700, 1081, 11, 393, 312, 7595, 293, 37882, 423, 365, 16726, 17900], "temperature": 0.0, "avg_logprob": -0.13475496341020632, "compression_ratio": 1.572072072072072, "no_speech_prob": 1.705652175587602e-05}, {"id": 102, "seek": 62600, "start": 626.0, "end": 629.28, "text": " overhead.", "tokens": [19922, 13], "temperature": 0.0, "avg_logprob": -0.1558210638504994, "compression_ratio": 1.5025125628140703, "no_speech_prob": 2.6115751097677276e-05}, {"id": 103, "seek": 62600, "start": 629.28, "end": 635.56, "text": " So this brings us to PKINIT, or Public Key Cryptography for Initial Authentication in", "tokens": [407, 341, 5607, 505, 281, 49475, 1464, 3927, 11, 420, 9489, 12759, 34809, 5820, 337, 22937, 831, 40231, 317, 8758, 294], "temperature": 0.0, "avg_logprob": -0.1558210638504994, "compression_ratio": 1.5025125628140703, "no_speech_prob": 2.6115751097677276e-05}, {"id": 104, "seek": 62600, "start": 635.56, "end": 639.76, "text": " Kerberos as the RFC is called.", "tokens": [20706, 607, 329, 382, 264, 497, 18671, 307, 1219, 13], "temperature": 0.0, "avg_logprob": -0.1558210638504994, "compression_ratio": 1.5025125628140703, "no_speech_prob": 2.6115751097677276e-05}, {"id": 105, "seek": 62600, "start": 639.76, "end": 645.04, "text": " In this protocol extension, the client can use asymmetric cryptography to authenticate", "tokens": [682, 341, 10336, 10320, 11, 264, 6423, 393, 764, 37277, 17475, 9844, 5820, 281, 9214, 8700], "temperature": 0.0, "avg_logprob": -0.1558210638504994, "compression_ratio": 1.5025125628140703, "no_speech_prob": 2.6115751097677276e-05}, {"id": 106, "seek": 62600, "start": 645.04, "end": 653.32, "text": " to the KDC, and the client presents an X509 certificate in its initial authentication", "tokens": [281, 264, 591, 25619, 11, 293, 264, 6423, 13533, 364, 1783, 2803, 24, 15953, 294, 1080, 5883, 26643], "temperature": 0.0, "avg_logprob": -0.1558210638504994, "compression_ratio": 1.5025125628140703, "no_speech_prob": 2.6115751097677276e-05}, {"id": 107, "seek": 65332, "start": 653.32, "end": 661.84, "text": " request, as well as a signature made with the public key or the private key corresponding", "tokens": [5308, 11, 382, 731, 382, 257, 13397, 1027, 365, 264, 1908, 2141, 420, 264, 4551, 2141, 11760], "temperature": 0.0, "avg_logprob": -0.1369932492574056, "compression_ratio": 1.770949720670391, "no_speech_prob": 3.565436782082543e-05}, {"id": 108, "seek": 65332, "start": 661.84, "end": 666.0, "text": " to the public key contained in the certificate.", "tokens": [281, 264, 1908, 2141, 16212, 294, 264, 15953, 13], "temperature": 0.0, "avg_logprob": -0.1369932492574056, "compression_ratio": 1.770949720670391, "no_speech_prob": 3.565436782082543e-05}, {"id": 109, "seek": 65332, "start": 666.0, "end": 674.2800000000001, "text": " The KDC verifies the certificate, the signature and the binding of the key in the certificate", "tokens": [440, 591, 25619, 1306, 11221, 264, 15953, 11, 264, 13397, 293, 264, 17359, 295, 264, 2141, 294, 264, 15953], "temperature": 0.0, "avg_logprob": -0.1369932492574056, "compression_ratio": 1.770949720670391, "no_speech_prob": 3.565436782082543e-05}, {"id": 110, "seek": 65332, "start": 674.2800000000001, "end": 681.12, "text": " to the client principal, and if everything checks out, it can respond with a response", "tokens": [281, 264, 6423, 9716, 11, 293, 498, 1203, 13834, 484, 11, 309, 393, 4196, 365, 257, 4134], "temperature": 0.0, "avg_logprob": -0.1369932492574056, "compression_ratio": 1.770949720670391, "no_speech_prob": 3.565436782082543e-05}, {"id": 111, "seek": 68112, "start": 681.12, "end": 688.88, "text": " encrypted either using Diffie-Hellman or some other analogous key agreement algorithm or", "tokens": [36663, 2139, 1228, 413, 3661, 414, 12, 39, 898, 1601, 420, 512, 661, 16660, 563, 2141, 8106, 9284, 420], "temperature": 0.0, "avg_logprob": -0.17141393514779898, "compression_ratio": 1.599009900990099, "no_speech_prob": 1.9425942809903063e-05}, {"id": 112, "seek": 68112, "start": 688.88, "end": 694.24, "text": " another public key encryption algorithm such as direct RSA encryption.", "tokens": [1071, 1908, 2141, 29575, 9284, 1270, 382, 2047, 497, 8886, 29575, 13], "temperature": 0.0, "avg_logprob": -0.17141393514779898, "compression_ratio": 1.599009900990099, "no_speech_prob": 1.9425942809903063e-05}, {"id": 113, "seek": 68112, "start": 694.24, "end": 701.08, "text": " So visualizing this, the client in the Authentication Service request says, hey, it's me client,", "tokens": [407, 5056, 3319, 341, 11, 264, 6423, 294, 264, 40231, 317, 8758, 9561, 5308, 1619, 11, 4177, 11, 309, 311, 385, 6423, 11], "temperature": 0.0, "avg_logprob": -0.17141393514779898, "compression_ratio": 1.599009900990099, "no_speech_prob": 1.9425942809903063e-05}, {"id": 114, "seek": 68112, "start": 701.08, "end": 705.16, "text": " but this time it includes some additional pre-authentication data.", "tokens": [457, 341, 565, 309, 5974, 512, 4497, 659, 12, 40198, 317, 8758, 1412, 13], "temperature": 0.0, "avg_logprob": -0.17141393514779898, "compression_ratio": 1.599009900990099, "no_speech_prob": 1.9425942809903063e-05}, {"id": 115, "seek": 70516, "start": 705.16, "end": 711.88, "text": " It includes a timestamp, and if it wants to use Diffie-Hellman, a client DH value assigned", "tokens": [467, 5974, 257, 49108, 1215, 11, 293, 498, 309, 2738, 281, 764, 413, 3661, 414, 12, 39, 898, 1601, 11, 257, 6423, 28606, 2158, 13279], "temperature": 0.0, "avg_logprob": -0.15485655920846123, "compression_ratio": 1.453551912568306, "no_speech_prob": 7.866115083743352e-06}, {"id": 116, "seek": 70516, "start": 711.88, "end": 719.7199999999999, "text": " by its public key, and it includes the X509 certificate containing that public key.", "tokens": [538, 1080, 1908, 2141, 11, 293, 309, 5974, 264, 1783, 2803, 24, 15953, 19273, 300, 1908, 2141, 13], "temperature": 0.0, "avg_logprob": -0.15485655920846123, "compression_ratio": 1.453551912568306, "no_speech_prob": 7.866115083743352e-06}, {"id": 117, "seek": 70516, "start": 719.7199999999999, "end": 727.92, "text": " In the KDC, once it has verified everything is happy to proceed, then its response includes", "tokens": [682, 264, 591, 25619, 11, 1564, 309, 575, 31197, 1203, 307, 2055, 281, 8991, 11, 550, 1080, 4134, 5974], "temperature": 0.0, "avg_logprob": -0.15485655920846123, "compression_ratio": 1.453551912568306, "no_speech_prob": 7.866115083743352e-06}, {"id": 118, "seek": 72792, "start": 727.92, "end": 736.0, "text": " the TGT, and it includes the session key encrypted using the public key algorithm, in this case", "tokens": [264, 314, 38, 51, 11, 293, 309, 5974, 264, 5481, 2141, 36663, 1228, 264, 1908, 2141, 9284, 11, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.09174220966842939, "compression_ratio": 1.7442922374429224, "no_speech_prob": 7.992127393663395e-06}, {"id": 119, "seek": 72792, "start": 736.0, "end": 742.16, "text": " Diffie-Hellman, as well as the KDC Diffie-Hellman value that the client will need to compute", "tokens": [413, 3661, 414, 12, 39, 898, 1601, 11, 382, 731, 382, 264, 591, 25619, 413, 3661, 414, 12, 39, 898, 1601, 2158, 300, 264, 6423, 486, 643, 281, 14722], "temperature": 0.0, "avg_logprob": -0.09174220966842939, "compression_ratio": 1.7442922374429224, "no_speech_prob": 7.992127393663395e-06}, {"id": 120, "seek": 72792, "start": 742.16, "end": 748.12, "text": " the secret with which the session key is encrypted, and then it can decrypt it, store the session", "tokens": [264, 4054, 365, 597, 264, 5481, 2141, 307, 36663, 11, 293, 550, 309, 393, 979, 627, 662, 309, 11, 3531, 264, 5481], "temperature": 0.0, "avg_logprob": -0.09174220966842939, "compression_ratio": 1.7442922374429224, "no_speech_prob": 7.992127393663395e-06}, {"id": 121, "seek": 72792, "start": 748.12, "end": 757.3199999999999, "text": " key, store the TGT, and from this point forward, the rest of the protocol is exactly as before.", "tokens": [2141, 11, 3531, 264, 314, 38, 51, 11, 293, 490, 341, 935, 2128, 11, 264, 1472, 295, 264, 10336, 307, 2293, 382, 949, 13], "temperature": 0.0, "avg_logprob": -0.09174220966842939, "compression_ratio": 1.7442922374429224, "no_speech_prob": 7.992127393663395e-06}, {"id": 122, "seek": 75732, "start": 757.32, "end": 765.12, "text": " In free IPA, by default, we can perform the binding of the certificate and key to the", "tokens": [682, 1737, 8671, 32, 11, 538, 7576, 11, 321, 393, 2042, 264, 17359, 295, 264, 15953, 293, 2141, 281, 264], "temperature": 0.0, "avg_logprob": -0.1068186384908269, "compression_ratio": 1.7762557077625571, "no_speech_prob": 1.2182711543573532e-05}, {"id": 123, "seek": 75732, "start": 765.12, "end": 768.96, "text": " principal object using an exact certificate match only.", "tokens": [9716, 2657, 1228, 364, 1900, 15953, 2995, 787, 13], "temperature": 0.0, "avg_logprob": -0.1068186384908269, "compression_ratio": 1.7762557077625571, "no_speech_prob": 1.2182711543573532e-05}, {"id": 124, "seek": 75732, "start": 768.96, "end": 774.96, "text": " So in the principal's LDAP entry, we'll store a complete copy of the certificate.", "tokens": [407, 294, 264, 9716, 311, 33936, 4715, 8729, 11, 321, 603, 3531, 257, 3566, 5055, 295, 264, 15953, 13], "temperature": 0.0, "avg_logprob": -0.1068186384908269, "compression_ratio": 1.7762557077625571, "no_speech_prob": 1.2182711543573532e-05}, {"id": 125, "seek": 75732, "start": 774.96, "end": 779.84, "text": " We optionally support certificate mapping rules that allow you to be a bit more versatile", "tokens": [492, 3614, 379, 1406, 15953, 18350, 4474, 300, 2089, 291, 281, 312, 257, 857, 544, 25057], "temperature": 0.0, "avg_logprob": -0.1068186384908269, "compression_ratio": 1.7762557077625571, "no_speech_prob": 1.2182711543573532e-05}, {"id": 126, "seek": 75732, "start": 779.84, "end": 785.5200000000001, "text": " in how you establish the binding between the certificate and the principal.", "tokens": [294, 577, 291, 8327, 264, 17359, 1296, 264, 15953, 293, 264, 9716, 13], "temperature": 0.0, "avg_logprob": -0.1068186384908269, "compression_ratio": 1.7762557077625571, "no_speech_prob": 1.2182711543573532e-05}, {"id": 127, "seek": 78552, "start": 785.52, "end": 792.76, "text": " For example, if you're using certificates for hosts, you can pull out the DNS name from", "tokens": [1171, 1365, 11, 498, 291, 434, 1228, 32941, 337, 21573, 11, 291, 393, 2235, 484, 264, 35153, 1315, 490], "temperature": 0.0, "avg_logprob": -0.1318135093240177, "compression_ratio": 1.5909090909090908, "no_speech_prob": 1.422413424734259e-05}, {"id": 128, "seek": 78552, "start": 792.76, "end": 798.72, "text": " the subject alternative name field in the certificate and construct an LDAP query saying,", "tokens": [264, 3983, 8535, 1315, 2519, 294, 264, 15953, 293, 7690, 364, 33936, 4715, 14581, 1566, 11], "temperature": 0.0, "avg_logprob": -0.1318135093240177, "compression_ratio": 1.5909090909090908, "no_speech_prob": 1.422413424734259e-05}, {"id": 129, "seek": 78552, "start": 798.72, "end": 807.0, "text": " well, we're looking for hosts whose FQDN matches that DNS name from the certificate.", "tokens": [731, 11, 321, 434, 1237, 337, 21573, 6104, 479, 48, 35, 45, 10676, 300, 35153, 1315, 490, 264, 15953, 13], "temperature": 0.0, "avg_logprob": -0.1318135093240177, "compression_ratio": 1.5909090909090908, "no_speech_prob": 1.422413424734259e-05}, {"id": 130, "seek": 78552, "start": 807.0, "end": 811.56, "text": " And the client certificates can be signed by free IPA's internal CA or by a third-party", "tokens": [400, 264, 6423, 32941, 393, 312, 8175, 538, 1737, 8671, 32, 311, 6920, 22852, 420, 538, 257, 2636, 12, 23409], "temperature": 0.0, "avg_logprob": -0.1318135093240177, "compression_ratio": 1.5909090909090908, "no_speech_prob": 1.422413424734259e-05}, {"id": 131, "seek": 81156, "start": 811.56, "end": 816.0, "text": " CA that the KDC trusts.", "tokens": [22852, 300, 264, 591, 25619, 45358, 13], "temperature": 0.0, "avg_logprob": -0.19719702005386353, "compression_ratio": 1.4433962264150944, "no_speech_prob": 8.247273399319965e-06}, {"id": 132, "seek": 81156, "start": 816.0, "end": 822.64, "text": " The user experience for PKInit, you can do it from a CLI, it's not very pleasant, but", "tokens": [440, 4195, 1752, 337, 49475, 4575, 270, 11, 291, 393, 360, 309, 490, 257, 12855, 40, 11, 309, 311, 406, 588, 16232, 11, 457], "temperature": 0.0, "avg_logprob": -0.19719702005386353, "compression_ratio": 1.4433962264150944, "no_speech_prob": 8.247273399319965e-06}, {"id": 133, "seek": 81156, "start": 822.64, "end": 829.9599999999999, "text": " you can use SSSD integrated with your login manager to improve that experience, particularly", "tokens": [291, 393, 764, 12238, 23969, 10919, 365, 428, 24276, 6598, 281, 3470, 300, 1752, 11, 4098], "temperature": 0.0, "avg_logprob": -0.19719702005386353, "compression_ratio": 1.4433962264150944, "no_speech_prob": 8.247273399319965e-06}, {"id": 134, "seek": 81156, "start": 829.9599999999999, "end": 838.28, "text": " if you're using smart cards or TPM for storing the private keys, or doing additional pre-authentication", "tokens": [498, 291, 434, 1228, 4069, 5632, 420, 314, 18819, 337, 26085, 264, 4551, 9317, 11, 420, 884, 4497, 659, 12, 40198, 317, 8758], "temperature": 0.0, "avg_logprob": -0.19719702005386353, "compression_ratio": 1.4433962264150944, "no_speech_prob": 8.247273399319965e-06}, {"id": 135, "seek": 83828, "start": 838.28, "end": 844.4399999999999, "text": " mechanisms like a two-factor authentication, and Windows offers a similar experience.", "tokens": [15902, 411, 257, 732, 12, 69, 15104, 26643, 11, 293, 8591, 7736, 257, 2531, 1752, 13], "temperature": 0.0, "avg_logprob": -0.17788277396672889, "compression_ratio": 1.5240384615384615, "no_speech_prob": 1.1808097951870877e-05}, {"id": 136, "seek": 83828, "start": 844.4399999999999, "end": 849.92, "text": " It should be, in fact, it must be easy for users and friendly for users, otherwise people", "tokens": [467, 820, 312, 11, 294, 1186, 11, 309, 1633, 312, 1858, 337, 5022, 293, 9208, 337, 5022, 11, 5911, 561], "temperature": 0.0, "avg_logprob": -0.17788277396672889, "compression_ratio": 1.5240384615384615, "no_speech_prob": 1.1808097951870877e-05}, {"id": 137, "seek": 83828, "start": 849.92, "end": 854.12, "text": " will not use it and you will not get the security benefits.", "tokens": [486, 406, 764, 309, 293, 291, 486, 406, 483, 264, 3825, 5311, 13], "temperature": 0.0, "avg_logprob": -0.17788277396672889, "compression_ratio": 1.5240384615384615, "no_speech_prob": 1.1808097951870877e-05}, {"id": 138, "seek": 83828, "start": 854.12, "end": 862.68, "text": " So quick demo, K-list shows me what tickets I currently have, the answer is none.", "tokens": [407, 1702, 10723, 11, 591, 12, 8264, 3110, 385, 437, 12628, 286, 4362, 362, 11, 264, 1867, 307, 6022, 13], "temperature": 0.0, "avg_logprob": -0.17788277396672889, "compression_ratio": 1.5240384615384615, "no_speech_prob": 1.1808097951870877e-05}, {"id": 139, "seek": 86268, "start": 862.68, "end": 875.3199999999999, "text": " If I K-init as Alice, I can type Alice's passphrase, and I now have a TGT for Alice,", "tokens": [759, 286, 591, 12, 259, 270, 382, 16004, 11, 286, 393, 2010, 16004, 311, 1320, 44598, 651, 11, 293, 286, 586, 362, 257, 314, 38, 51, 337, 16004, 11], "temperature": 0.0, "avg_logprob": -0.14562306753019008, "compression_ratio": 1.4970760233918128, "no_speech_prob": 5.5786176744732074e-06}, {"id": 140, "seek": 86268, "start": 875.3199999999999, "end": 881.52, "text": " so that was a password-based authentication, and if I ping the IPA server, that's just", "tokens": [370, 300, 390, 257, 11524, 12, 6032, 26643, 11, 293, 498, 286, 26151, 264, 8671, 32, 7154, 11, 300, 311, 445], "temperature": 0.0, "avg_logprob": -0.14562306753019008, "compression_ratio": 1.4970760233918128, "no_speech_prob": 5.5786176744732074e-06}, {"id": 141, "seek": 86268, "start": 881.52, "end": 889.52, "text": " talking to the free IPA HTTP API, now if I K-list, I can see that behind the scenes,", "tokens": [1417, 281, 264, 1737, 8671, 32, 33283, 9362, 11, 586, 498, 286, 591, 12, 8264, 11, 286, 393, 536, 300, 2261, 264, 8026, 11], "temperature": 0.0, "avg_logprob": -0.14562306753019008, "compression_ratio": 1.4970760233918128, "no_speech_prob": 5.5786176744732074e-06}, {"id": 142, "seek": 88952, "start": 889.52, "end": 899.4, "text": " it's a quieter service ticket for one of the IPA HTTP servers, I'll just destroy those", "tokens": [309, 311, 257, 43339, 2643, 10550, 337, 472, 295, 264, 8671, 32, 33283, 15909, 11, 286, 603, 445, 5293, 729], "temperature": 0.0, "avg_logprob": -0.1603678348017674, "compression_ratio": 1.3161764705882353, "no_speech_prob": 2.172280255763326e-05}, {"id": 143, "seek": 88952, "start": 899.4, "end": 906.92, "text": " tickets now, and I'll do a PK-init, so if I change directory here, here I have a certificate", "tokens": [12628, 586, 11, 293, 286, 603, 360, 257, 49475, 12, 259, 270, 11, 370, 498, 286, 1319, 21120, 510, 11, 510, 286, 362, 257, 15953], "temperature": 0.0, "avg_logprob": -0.1603678348017674, "compression_ratio": 1.3161764705882353, "no_speech_prob": 2.172280255763326e-05}, {"id": 144, "seek": 90692, "start": 906.92, "end": 924.0, "text": " and a key, and just pre-print the cert for you, so what can we say about this cert, and", "tokens": [293, 257, 2141, 11, 293, 445, 659, 12, 14030, 264, 5351, 337, 291, 11, 370, 437, 393, 321, 584, 466, 341, 5351, 11, 293], "temperature": 0.0, "avg_logprob": -0.2032438674063053, "compression_ratio": 1.408, "no_speech_prob": 4.7826149966567755e-05}, {"id": 145, "seek": 90692, "start": 924.0, "end": 927.36, "text": " actually I'll tell you what, I'm doing things in the wrong order here, I'm going to do a", "tokens": [767, 286, 603, 980, 291, 437, 11, 286, 478, 884, 721, 294, 264, 2085, 1668, 510, 11, 286, 478, 516, 281, 360, 257], "temperature": 0.0, "avg_logprob": -0.2032438674063053, "compression_ratio": 1.408, "no_speech_prob": 4.7826149966567755e-05}, {"id": 146, "seek": 92736, "start": 927.36, "end": 949.92, "text": " host authentication first, so if I do K-init-x, X509, user identity equals file, and the certificate,", "tokens": [3975, 26643, 700, 11, 370, 498, 286, 360, 591, 12, 259, 270, 12, 87, 11, 1783, 2803, 24, 11, 4195, 6575, 6915, 3991, 11, 293, 264, 15953, 11], "temperature": 0.0, "avg_logprob": -0.20500710606575012, "compression_ratio": 1.086021505376344, "no_speech_prob": 0.00010228777682641521}, {"id": 147, "seek": 94992, "start": 949.92, "end": 964.1999999999999, "text": " and the key, and a host name, not a host name rather, but the principal name, host slash", "tokens": [293, 264, 2141, 11, 293, 257, 3975, 1315, 11, 406, 257, 3975, 1315, 2831, 11, 457, 264, 9716, 1315, 11, 3975, 17330], "temperature": 0.0, "avg_logprob": -0.20720735143442623, "compression_ratio": 1.3484848484848484, "no_speech_prob": 1.512531889602542e-05}, {"id": 148, "seek": 94992, "start": 964.1999999999999, "end": 976.76, "text": " rel78.IPA.TEST, and K-list, here we have our TGT for the host principal, okay, so PK-init", "tokens": [1039, 30693, 13, 9139, 32, 13, 51, 14497, 11, 293, 591, 12, 8264, 11, 510, 321, 362, 527, 314, 38, 51, 337, 264, 3975, 9716, 11, 1392, 11, 370, 49475, 12, 259, 270], "temperature": 0.0, "avg_logprob": -0.20720735143442623, "compression_ratio": 1.3484848484848484, "no_speech_prob": 1.512531889602542e-05}, {"id": 149, "seek": 97676, "start": 976.76, "end": 982.04, "text": " advantages, no more passwords or client-shared secrets, the keys can reside on the smart", "tokens": [14906, 11, 572, 544, 33149, 420, 6423, 12, 2716, 1642, 14093, 11, 264, 9317, 393, 40134, 322, 264, 4069], "temperature": 0.0, "avg_logprob": -0.15660488244258997, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.9777773559326306e-05}, {"id": 150, "seek": 97676, "start": 982.04, "end": 989.28, "text": " cards, or so for example in a UV key, in a TPM, or in hardware security module, and", "tokens": [5632, 11, 420, 370, 337, 1365, 294, 257, 17887, 2141, 11, 294, 257, 314, 18819, 11, 420, 294, 8837, 3825, 10088, 11, 293], "temperature": 0.0, "avg_logprob": -0.15660488244258997, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.9777773559326306e-05}, {"id": 151, "seek": 97676, "start": 989.28, "end": 994.36, "text": " as I mentioned earlier, the rest of the protocol after the initial authentication service exchange", "tokens": [382, 286, 2835, 3071, 11, 264, 1472, 295, 264, 10336, 934, 264, 5883, 26643, 2643, 7742], "temperature": 0.0, "avg_logprob": -0.15660488244258997, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.9777773559326306e-05}, {"id": 152, "seek": 97676, "start": 994.36, "end": 999.3199999999999, "text": " is unchanged, which makes it easy for services.", "tokens": [307, 44553, 11, 597, 1669, 309, 1858, 337, 3328, 13], "temperature": 0.0, "avg_logprob": -0.15660488244258997, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.9777773559326306e-05}, {"id": 153, "seek": 97676, "start": 999.3199999999999, "end": 1004.92, "text": " The complexities, well you need an X509PKI, this brings in the renewal considerations", "tokens": [440, 48705, 11, 731, 291, 643, 364, 1783, 2803, 24, 47, 27731, 11, 341, 5607, 294, 264, 35516, 24070], "temperature": 0.0, "avg_logprob": -0.15660488244258997, "compression_ratio": 1.5517241379310345, "no_speech_prob": 1.9777773559326306e-05}, {"id": 154, "seek": 100492, "start": 1004.92, "end": 1011.3199999999999, "text": " and revocation considerations, the hardware, if you want the benefit of the hardware security", "tokens": [293, 3698, 27943, 24070, 11, 264, 8837, 11, 498, 291, 528, 264, 5121, 295, 264, 8837, 3825], "temperature": 0.0, "avg_logprob": -0.13408223972764127, "compression_ratio": 1.704225352112676, "no_speech_prob": 7.448157703038305e-05}, {"id": 155, "seek": 100492, "start": 1011.3199999999999, "end": 1018.4, "text": " that will cause an additional financial cost to buy the hardware, and binding the public", "tokens": [300, 486, 3082, 364, 4497, 4669, 2063, 281, 2256, 264, 8837, 11, 293, 17359, 264, 1908], "temperature": 0.0, "avg_logprob": -0.13408223972764127, "compression_ratio": 1.704225352112676, "no_speech_prob": 7.448157703038305e-05}, {"id": 156, "seek": 100492, "start": 1018.4, "end": 1026.28, "text": " key to the principal is an important consideration, so in the RFC, it's RFC 4556 it says, the", "tokens": [2141, 281, 264, 9716, 307, 364, 1021, 12381, 11, 370, 294, 264, 497, 18671, 11, 309, 311, 497, 18671, 6905, 18317, 309, 1619, 11, 264], "temperature": 0.0, "avg_logprob": -0.13408223972764127, "compression_ratio": 1.704225352112676, "no_speech_prob": 7.448157703038305e-05}, {"id": 157, "seek": 100492, "start": 1026.28, "end": 1032.48, "text": " KDC must also check that the client's public key used to verify the client's signature", "tokens": [591, 25619, 1633, 611, 1520, 300, 264, 6423, 311, 1908, 2141, 1143, 281, 16888, 264, 6423, 311, 13397], "temperature": 0.0, "avg_logprob": -0.13408223972764127, "compression_ratio": 1.704225352112676, "no_speech_prob": 7.448157703038305e-05}, {"id": 158, "seek": 103248, "start": 1032.48, "end": 1038.64, "text": " is bound to the client principal name specified in the authentication service request, and", "tokens": [307, 5472, 281, 264, 6423, 9716, 1315, 22206, 294, 264, 26643, 2643, 5308, 11, 293], "temperature": 0.0, "avg_logprob": -0.1295656638570351, "compression_ratio": 1.8393574297188755, "no_speech_prob": 1.0569765436230227e-05}, {"id": 159, "seek": 103248, "start": 1038.64, "end": 1044.4, "text": " it goes on to suggest how you can do that, a couple of ways you can do it, you can encode", "tokens": [309, 1709, 322, 281, 3402, 577, 291, 393, 360, 300, 11, 257, 1916, 295, 2098, 291, 393, 360, 309, 11, 291, 393, 2058, 1429], "temperature": 0.0, "avg_logprob": -0.1295656638570351, "compression_ratio": 1.8393574297188755, "no_speech_prob": 1.0569765436230227e-05}, {"id": 160, "seek": 103248, "start": 1044.4, "end": 1050.16, "text": " the principal name directly in the certificate in a specialised subject alternative name,", "tokens": [264, 9716, 1315, 3838, 294, 264, 15953, 294, 257, 2121, 2640, 3983, 8535, 1315, 11], "temperature": 0.0, "avg_logprob": -0.1295656638570351, "compression_ratio": 1.8393574297188755, "no_speech_prob": 1.0569765436230227e-05}, {"id": 161, "seek": 103248, "start": 1050.16, "end": 1056.0, "text": " or you can associate the certificate or the key directly with the principal in your database,", "tokens": [420, 291, 393, 14644, 264, 15953, 420, 264, 2141, 3838, 365, 264, 9716, 294, 428, 8149, 11], "temperature": 0.0, "avg_logprob": -0.1295656638570351, "compression_ratio": 1.8393574297188755, "no_speech_prob": 1.0569765436230227e-05}, {"id": 162, "seek": 103248, "start": 1056.0, "end": 1061.68, "text": " that is what we have as the default behaviour in free IPA, but that introduces administrative", "tokens": [300, 307, 437, 321, 362, 382, 264, 7576, 17229, 294, 1737, 8671, 32, 11, 457, 300, 31472, 17900], "temperature": 0.0, "avg_logprob": -0.1295656638570351, "compression_ratio": 1.8393574297188755, "no_speech_prob": 1.0569765436230227e-05}, {"id": 163, "seek": 106168, "start": 1061.68, "end": 1066.92, "text": " overhead because when the certificate is renewed or the client re-keys, then you need to make", "tokens": [19922, 570, 562, 264, 15953, 307, 30228, 420, 264, 6423, 319, 12, 18847, 11, 550, 291, 643, 281, 652], "temperature": 0.0, "avg_logprob": -0.11170915160516295, "compression_ratio": 1.6818181818181819, "no_speech_prob": 5.244808107818244e-06}, {"id": 164, "seek": 106168, "start": 1066.92, "end": 1072.3200000000002, "text": " sure that those entries are up to date, or you can use other heuristics, for example", "tokens": [988, 300, 729, 23041, 366, 493, 281, 4002, 11, 420, 291, 393, 764, 661, 415, 374, 6006, 11, 337, 1365], "temperature": 0.0, "avg_logprob": -0.11170915160516295, "compression_ratio": 1.6818181818181819, "no_speech_prob": 5.244808107818244e-06}, {"id": 165, "seek": 106168, "start": 1072.3200000000002, "end": 1077.68, "text": " if the cert has a DNS name, pull that out and use that to look up a host, if the certificate", "tokens": [498, 264, 5351, 575, 257, 35153, 1315, 11, 2235, 300, 484, 293, 764, 300, 281, 574, 493, 257, 3975, 11, 498, 264, 15953], "temperature": 0.0, "avg_logprob": -0.11170915160516295, "compression_ratio": 1.6818181818181819, "no_speech_prob": 5.244808107818244e-06}, {"id": 166, "seek": 106168, "start": 1077.68, "end": 1086.52, "text": " has an RFC 822 name, which is an email address, pull that out, use it to look up a user principal,", "tokens": [575, 364, 497, 18671, 1649, 7490, 1315, 11, 597, 307, 364, 3796, 2985, 11, 2235, 300, 484, 11, 764, 309, 281, 574, 493, 257, 4195, 9716, 11], "temperature": 0.0, "avg_logprob": -0.11170915160516295, "compression_ratio": 1.6818181818181819, "no_speech_prob": 5.244808107818244e-06}, {"id": 167, "seek": 108652, "start": 1086.52, "end": 1096.68, "text": " and you better not mess this up, which brings us to the CVE, so if we have a look at the", "tokens": [293, 291, 1101, 406, 2082, 341, 493, 11, 597, 5607, 505, 281, 264, 383, 7540, 11, 370, 498, 321, 362, 257, 574, 412, 264], "temperature": 0.0, "avg_logprob": -0.18976527697419468, "compression_ratio": 1.4564102564102563, "no_speech_prob": 8.505980076733977e-06}, {"id": 168, "seek": 108652, "start": 1096.68, "end": 1107.44, "text": " certificate that I used to get this host principal, we'll see something interesting, it doesn't", "tokens": [15953, 300, 286, 1143, 281, 483, 341, 3975, 9716, 11, 321, 603, 536, 746, 1880, 11, 309, 1177, 380], "temperature": 0.0, "avg_logprob": -0.18976527697419468, "compression_ratio": 1.4564102564102563, "no_speech_prob": 8.505980076733977e-06}, {"id": 169, "seek": 108652, "start": 1107.44, "end": 1115.04, "text": " actually mention that principal name anywhere, the RAL7 8-0, but it does have a subject alternative", "tokens": [767, 2152, 300, 9716, 1315, 4992, 11, 264, 497, 3427, 22, 1649, 12, 15, 11, 457, 309, 775, 362, 257, 3983, 8535], "temperature": 0.0, "avg_logprob": -0.18976527697419468, "compression_ratio": 1.4564102564102563, "no_speech_prob": 8.505980076733977e-06}, {"id": 170, "seek": 111504, "start": 1115.04, "end": 1123.3999999999999, "text": " name, it has two in fact, one of them is a wildcard DNS name.", "tokens": [1315, 11, 309, 575, 732, 294, 1186, 11, 472, 295, 552, 307, 257, 4868, 22259, 35153, 1315, 13], "temperature": 0.0, "avg_logprob": -0.13550592023272848, "compression_ratio": 1.4824561403508771, "no_speech_prob": 1.4420294064620975e-05}, {"id": 171, "seek": 111504, "start": 1123.3999999999999, "end": 1129.2, "text": " So what's happening here, it's an LDAP filter injection vulnerability, free IPA is not vulnerable", "tokens": [407, 437, 311, 2737, 510, 11, 309, 311, 364, 33936, 4715, 6608, 22873, 24210, 11, 1737, 8671, 32, 307, 406, 10955], "temperature": 0.0, "avg_logprob": -0.13550592023272848, "compression_ratio": 1.4824561403508771, "no_speech_prob": 1.4420294064620975e-05}, {"id": 172, "seek": 111504, "start": 1129.2, "end": 1135.44, "text": " in the default config because as I mentioned only exact certificate matches used by default.", "tokens": [294, 264, 7576, 6662, 570, 382, 286, 2835, 787, 1900, 15953, 10676, 1143, 538, 7576, 13], "temperature": 0.0, "avg_logprob": -0.13550592023272848, "compression_ratio": 1.4824561403508771, "no_speech_prob": 1.4420294064620975e-05}, {"id": 173, "seek": 111504, "start": 1135.44, "end": 1140.92, "text": " This bug is in the SSSD component, it was already resolved when I found it, so it was", "tokens": [639, 7426, 307, 294, 264, 12238, 23969, 6542, 11, 309, 390, 1217, 20772, 562, 286, 1352, 309, 11, 370, 309, 390], "temperature": 0.0, "avg_logprob": -0.13550592023272848, "compression_ratio": 1.4824561403508771, "no_speech_prob": 1.4420294064620975e-05}, {"id": 174, "seek": 114092, "start": 1140.92, "end": 1147.1200000000001, "text": " only older but still supported versions that were affected, and the fix has now been released", "tokens": [787, 4906, 457, 920, 8104, 9606, 300, 645, 8028, 11, 293, 264, 3191, 575, 586, 668, 4736], "temperature": 0.0, "avg_logprob": -0.13406719101799858, "compression_ratio": 1.5463917525773196, "no_speech_prob": 1.1441563401604071e-05}, {"id": 175, "seek": 114092, "start": 1147.1200000000001, "end": 1151.2, "text": " and the details are public.", "tokens": [293, 264, 4365, 366, 1908, 13], "temperature": 0.0, "avg_logprob": -0.13406719101799858, "compression_ratio": 1.5463917525773196, "no_speech_prob": 1.1441563401604071e-05}, {"id": 176, "seek": 114092, "start": 1151.2, "end": 1157.72, "text": " So what's happening is that the cert map rule, sorry about that, the cert map rule is just", "tokens": [407, 437, 311, 2737, 307, 300, 264, 5351, 4471, 4978, 11, 2597, 466, 300, 11, 264, 5351, 4471, 4978, 307, 445], "temperature": 0.0, "avg_logprob": -0.13406719101799858, "compression_ratio": 1.5463917525773196, "no_speech_prob": 1.1441563401604071e-05}, {"id": 177, "seek": 114092, "start": 1157.72, "end": 1163.72, "text": " pulling the DNS name out of the certificate and concatenating it directly into the LDAP", "tokens": [8407, 264, 35153, 1315, 484, 295, 264, 15953, 293, 1588, 7186, 990, 309, 3838, 666, 264, 33936, 4715], "temperature": 0.0, "avg_logprob": -0.13406719101799858, "compression_ratio": 1.5463917525773196, "no_speech_prob": 1.1441563401604071e-05}, {"id": 178, "seek": 116372, "start": 1163.72, "end": 1173.28, "text": " filter without sanitization and in LDAP, asterisk is a substring match character, so using that", "tokens": [6608, 1553, 24533, 2144, 293, 294, 33936, 4715, 11, 257, 3120, 7797, 307, 257, 4594, 2937, 2995, 2517, 11, 370, 1228, 300], "temperature": 0.0, "avg_logprob": -0.13512496250431713, "compression_ratio": 1.4867256637168142, "no_speech_prob": 1.3376565220823977e-05}, {"id": 179, "seek": 116372, "start": 1173.28, "end": 1180.32, "text": " certificate would let you get a TGT for any host principal in your realm.", "tokens": [15953, 576, 718, 291, 483, 257, 314, 38, 51, 337, 604, 3975, 9716, 294, 428, 15355, 13], "temperature": 0.0, "avg_logprob": -0.13512496250431713, "compression_ratio": 1.4867256637168142, "no_speech_prob": 1.3376565220823977e-05}, {"id": 180, "seek": 116372, "start": 1180.32, "end": 1185.88, "text": " And another interesting question is what happens if this is your email address?", "tokens": [400, 1071, 1880, 1168, 307, 437, 2314, 498, 341, 307, 428, 3796, 2985, 30], "temperature": 0.0, "avg_logprob": -0.13512496250431713, "compression_ratio": 1.4867256637168142, "no_speech_prob": 1.3376565220823977e-05}, {"id": 181, "seek": 116372, "start": 1185.88, "end": 1192.4, "text": " Now this might seem like a stretch but that is a valid email address and I'm sure many", "tokens": [823, 341, 1062, 1643, 411, 257, 5985, 457, 300, 307, 257, 7363, 3796, 2985, 293, 286, 478, 988, 867], "temperature": 0.0, "avg_logprob": -0.13512496250431713, "compression_ratio": 1.4867256637168142, "no_speech_prob": 1.3376565220823977e-05}, {"id": 182, "seek": 119240, "start": 1192.4, "end": 1198.3200000000002, "text": " of you work at companies or have worked at companies where you can request your own email", "tokens": [295, 291, 589, 412, 3431, 420, 362, 2732, 412, 3431, 689, 291, 393, 5308, 428, 1065, 3796], "temperature": 0.0, "avg_logprob": -0.11998385190963745, "compression_ratio": 1.6939655172413792, "no_speech_prob": 7.863152859499678e-06}, {"id": 183, "seek": 119240, "start": 1198.3200000000002, "end": 1201.24, "text": " alias at Red Hat, we certainly do.", "tokens": [419, 4609, 412, 4477, 15867, 11, 321, 3297, 360, 13], "temperature": 0.0, "avg_logprob": -0.11998385190963745, "compression_ratio": 1.6939655172413792, "no_speech_prob": 7.863152859499678e-06}, {"id": 184, "seek": 119240, "start": 1201.24, "end": 1208.2, "text": " So if you managed to request an email alias such as this and the system approved it and", "tokens": [407, 498, 291, 6453, 281, 5308, 364, 3796, 419, 4609, 1270, 382, 341, 293, 264, 1185, 10826, 309, 293], "temperature": 0.0, "avg_logprob": -0.11998385190963745, "compression_ratio": 1.6939655172413792, "no_speech_prob": 7.863152859499678e-06}, {"id": 185, "seek": 119240, "start": 1208.2, "end": 1213.72, "text": " you've got a certificate with that email address on it and you have a cert map rule that looks", "tokens": [291, 600, 658, 257, 15953, 365, 300, 3796, 2985, 322, 309, 293, 291, 362, 257, 5351, 4471, 4978, 300, 1542], "temperature": 0.0, "avg_logprob": -0.11998385190963745, "compression_ratio": 1.6939655172413792, "no_speech_prob": 7.863152859499678e-06}, {"id": 186, "seek": 119240, "start": 1213.72, "end": 1221.76, "text": " something like this where you're stuffing the subject RFC A22 name into the query and", "tokens": [746, 411, 341, 689, 291, 434, 36046, 264, 3983, 497, 18671, 316, 7490, 1315, 666, 264, 14581, 293], "temperature": 0.0, "avg_logprob": -0.11998385190963745, "compression_ratio": 1.6939655172413792, "no_speech_prob": 7.863152859499678e-06}, {"id": 187, "seek": 122176, "start": 1221.76, "end": 1229.48, "text": " using it to look up a mail attribute and that was somehow nested inside an or list expression,", "tokens": [1228, 309, 281, 574, 493, 257, 10071, 19667, 293, 300, 390, 6063, 15646, 292, 1854, 364, 420, 1329, 6114, 11], "temperature": 0.0, "avg_logprob": -0.20060918102525685, "compression_ratio": 1.4318181818181819, "no_speech_prob": 1.7453190594096668e-05}, {"id": 188, "seek": 122176, "start": 1229.48, "end": 1235.48, "text": " then you've just got yourself a domain takeover.", "tokens": [550, 291, 600, 445, 658, 1803, 257, 9274, 747, 3570, 13], "temperature": 0.0, "avg_logprob": -0.20060918102525685, "compression_ratio": 1.4318181818181819, "no_speech_prob": 1.7453190594096668e-05}, {"id": 189, "seek": 122176, "start": 1235.48, "end": 1239.96, "text": " So let's see a demo of that.", "tokens": [407, 718, 311, 536, 257, 10723, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.20060918102525685, "compression_ratio": 1.4318181818181819, "no_speech_prob": 1.7453190594096668e-05}, {"id": 190, "seek": 122176, "start": 1239.96, "end": 1245.96, "text": " If there's time, there might not be time, I think, how much?", "tokens": [759, 456, 311, 565, 11, 456, 1062, 406, 312, 565, 11, 286, 519, 11, 577, 709, 30], "temperature": 0.0, "avg_logprob": -0.20060918102525685, "compression_ratio": 1.4318181818181819, "no_speech_prob": 1.7453190594096668e-05}, {"id": 191, "seek": 122176, "start": 1245.96, "end": 1247.96, "text": " Five minutes left.", "tokens": [9436, 2077, 1411, 13], "temperature": 0.0, "avg_logprob": -0.20060918102525685, "compression_ratio": 1.4318181818181819, "no_speech_prob": 1.7453190594096668e-05}, {"id": 192, "seek": 124796, "start": 1247.96, "end": 1252.04, "text": " So I'm going to skip it.", "tokens": [407, 286, 478, 516, 281, 10023, 309, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 193, "seek": 124796, "start": 1252.04, "end": 1253.04, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 194, "seek": 124796, "start": 1253.04, "end": 1258.16, "text": " I'll tell you what, after I finish the talk, if I can, I'll just do it.", "tokens": [286, 603, 980, 291, 437, 11, 934, 286, 2413, 264, 751, 11, 498, 286, 393, 11, 286, 603, 445, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 195, "seek": 124796, "start": 1258.16, "end": 1260.68, "text": " But let me discuss now the mitigation.", "tokens": [583, 718, 385, 2248, 586, 264, 32649, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 196, "seek": 124796, "start": 1260.68, "end": 1267.08, "text": " So yes, if you're running a vulnerable version of SSSD, you should update it.", "tokens": [407, 2086, 11, 498, 291, 434, 2614, 257, 10955, 3037, 295, 12238, 23969, 11, 291, 820, 5623, 309, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 197, "seek": 124796, "start": 1267.08, "end": 1271.0, "text": " The and list rules are harder to exploit than all lists.", "tokens": [440, 293, 1329, 4474, 366, 6081, 281, 25924, 813, 439, 14511, 13], "temperature": 0.0, "avg_logprob": -0.21847141490263097, "compression_ratio": 1.4278350515463918, "no_speech_prob": 2.072552524623461e-05}, {"id": 198, "seek": 127100, "start": 1271.0, "end": 1279.32, "text": " Just point out how the LDAP filter expressions work, the all list, if you have a single sub", "tokens": [1449, 935, 484, 577, 264, 33936, 4715, 6608, 15277, 589, 11, 264, 439, 1329, 11, 498, 291, 362, 257, 2167, 1422], "temperature": 0.0, "avg_logprob": -0.17577935472319398, "compression_ratio": 1.5942028985507246, "no_speech_prob": 7.1456061050412245e-06}, {"id": 199, "seek": 127100, "start": 1279.32, "end": 1286.24, "text": " expression, then the whole list expression will match, but an and list you have to match", "tokens": [6114, 11, 550, 264, 1379, 1329, 6114, 486, 2995, 11, 457, 364, 293, 1329, 291, 362, 281, 2995], "temperature": 0.0, "avg_logprob": -0.17577935472319398, "compression_ratio": 1.5942028985507246, "no_speech_prob": 7.1456061050412245e-06}, {"id": 200, "seek": 127100, "start": 1286.24, "end": 1292.0, "text": " every sub clause, so it's just easier to exploit an all list.", "tokens": [633, 1422, 25925, 11, 370, 309, 311, 445, 3571, 281, 25924, 364, 439, 1329, 13], "temperature": 0.0, "avg_logprob": -0.17577935472319398, "compression_ratio": 1.5942028985507246, "no_speech_prob": 7.1456061050412245e-06}, {"id": 201, "seek": 127100, "start": 1292.0, "end": 1296.56, "text": " You should definitely audit what data can get included in certificates, where that data", "tokens": [509, 820, 2138, 17748, 437, 1412, 393, 483, 5556, 294, 32941, 11, 689, 300, 1412], "temperature": 0.0, "avg_logprob": -0.17577935472319398, "compression_ratio": 1.5942028985507246, "no_speech_prob": 7.1456061050412245e-06}, {"id": 202, "seek": 129656, "start": 1296.56, "end": 1301.44, "text": " comes from, and how it's included or encoded in the cert.", "tokens": [1487, 490, 11, 293, 577, 309, 311, 5556, 420, 2058, 12340, 294, 264, 5351, 13], "temperature": 0.0, "avg_logprob": -0.1768186781141493, "compression_ratio": 1.538152610441767, "no_speech_prob": 1.1429332516854629e-05}, {"id": 203, "seek": 129656, "start": 1301.44, "end": 1306.48, "text": " And you could use exact certificate matching to avoid this issue, but that does come with", "tokens": [400, 291, 727, 764, 1900, 15953, 14324, 281, 5042, 341, 2734, 11, 457, 300, 775, 808, 365], "temperature": 0.0, "avg_logprob": -0.1768186781141493, "compression_ratio": 1.538152610441767, "no_speech_prob": 1.1429332516854629e-05}, {"id": 204, "seek": 129656, "start": 1306.48, "end": 1312.8799999999999, "text": " the administrative overheads to handle renewals or re-keys.", "tokens": [264, 17900, 19922, 82, 281, 4813, 10162, 1124, 420, 319, 12, 18847, 13], "temperature": 0.0, "avg_logprob": -0.1768186781141493, "compression_ratio": 1.538152610441767, "no_speech_prob": 1.1429332516854629e-05}, {"id": 205, "seek": 129656, "start": 1312.8799999999999, "end": 1318.72, "text": " General security considerations for PK unit, well, and this first point is for just all", "tokens": [6996, 3825, 24070, 337, 49475, 4985, 11, 731, 11, 293, 341, 700, 935, 307, 337, 445, 439], "temperature": 0.0, "avg_logprob": -0.1768186781141493, "compression_ratio": 1.538152610441767, "no_speech_prob": 1.1429332516854629e-05}, {"id": 206, "seek": 129656, "start": 1318.72, "end": 1324.76, "text": " software always, probably escape and sanitize your inputs according to how you're using", "tokens": [4722, 1009, 11, 1391, 7615, 293, 24533, 1125, 428, 15743, 4650, 281, 577, 291, 434, 1228], "temperature": 0.0, "avg_logprob": -0.1768186781141493, "compression_ratio": 1.538152610441767, "no_speech_prob": 1.1429332516854629e-05}, {"id": 207, "seek": 132476, "start": 1324.76, "end": 1326.6, "text": " them.", "tokens": [552, 13], "temperature": 0.0, "avg_logprob": -0.18994815107704938, "compression_ratio": 1.651685393258427, "no_speech_prob": 2.2056794477975927e-05}, {"id": 208, "seek": 132476, "start": 1326.6, "end": 1331.96, "text": " You should review your CA trust, so which CAs are you trusting?", "tokens": [509, 820, 3131, 428, 22852, 3361, 11, 370, 597, 22852, 82, 366, 291, 28235, 30], "temperature": 0.0, "avg_logprob": -0.18994815107704938, "compression_ratio": 1.651685393258427, "no_speech_prob": 2.2056794477975927e-05}, {"id": 209, "seek": 132476, "start": 1331.96, "end": 1337.28, "text": " What profiles for issuing the certificates are used or templates?", "tokens": [708, 23693, 337, 43214, 264, 32941, 366, 1143, 420, 21165, 30], "temperature": 0.0, "avg_logprob": -0.18994815107704938, "compression_ratio": 1.651685393258427, "no_speech_prob": 2.2056794477975927e-05}, {"id": 210, "seek": 132476, "start": 1337.28, "end": 1341.84, "text": " And how are the attributes that go into the certificates validated?", "tokens": [400, 577, 366, 264, 17212, 300, 352, 666, 264, 32941, 40693, 30], "temperature": 0.0, "avg_logprob": -0.18994815107704938, "compression_ratio": 1.651685393258427, "no_speech_prob": 2.2056794477975927e-05}, {"id": 211, "seek": 132476, "start": 1341.84, "end": 1347.92, "text": " Who can issue the certificates that you trust, both in terms of their software systems and", "tokens": [2102, 393, 2734, 264, 32941, 300, 291, 3361, 11, 1293, 294, 2115, 295, 641, 4722, 3652, 293], "temperature": 0.0, "avg_logprob": -0.18994815107704938, "compression_ratio": 1.651685393258427, "no_speech_prob": 2.2056794477975927e-05}, {"id": 212, "seek": 134792, "start": 1347.92, "end": 1354.76, "text": " the agents, human or otherwise, who act to issue certificates?", "tokens": [264, 12554, 11, 1952, 420, 5911, 11, 567, 605, 281, 2734, 32941, 30], "temperature": 0.0, "avg_logprob": -0.12637539167661924, "compression_ratio": 1.517766497461929, "no_speech_prob": 5.006242645322345e-06}, {"id": 213, "seek": 134792, "start": 1354.76, "end": 1362.2, "text": " And can any of the attributes be influenced by users or other parties, such as if you", "tokens": [400, 393, 604, 295, 264, 17212, 312, 15269, 538, 5022, 420, 661, 8265, 11, 1270, 382, 498, 291], "temperature": 0.0, "avg_logprob": -0.12637539167661924, "compression_ratio": 1.517766497461929, "no_speech_prob": 5.006242645322345e-06}, {"id": 214, "seek": 134792, "start": 1362.2, "end": 1366.72, "text": " have your email address alias request system?", "tokens": [362, 428, 3796, 2985, 419, 4609, 5308, 1185, 30], "temperature": 0.0, "avg_logprob": -0.12637539167661924, "compression_ratio": 1.517766497461929, "no_speech_prob": 5.006242645322345e-06}, {"id": 215, "seek": 134792, "start": 1366.72, "end": 1371.8000000000002, "text": " Just because a value is valid in a particular context does not mean that it's benign in", "tokens": [1449, 570, 257, 2158, 307, 7363, 294, 257, 1729, 4319, 775, 406, 914, 300, 309, 311, 3271, 788, 294], "temperature": 0.0, "avg_logprob": -0.12637539167661924, "compression_ratio": 1.517766497461929, "no_speech_prob": 5.006242645322345e-06}, {"id": 216, "seek": 134792, "start": 1371.8000000000002, "end": 1374.6000000000001, "text": " another context.", "tokens": [1071, 4319, 13], "temperature": 0.0, "avg_logprob": -0.12637539167661924, "compression_ratio": 1.517766497461929, "no_speech_prob": 5.006242645322345e-06}, {"id": 217, "seek": 137460, "start": 1374.6, "end": 1380.7199999999998, "text": " And the key in principle binding is a critical aspect of PK unit security and PKI application", "tokens": [400, 264, 2141, 294, 8665, 17359, 307, 257, 4924, 4171, 295, 49475, 4985, 3825, 293, 430, 27731, 3861], "temperature": 0.0, "avg_logprob": -0.13484255846808937, "compression_ratio": 1.5955555555555556, "no_speech_prob": 6.7368350755714346e-06}, {"id": 218, "seek": 137460, "start": 1380.7199999999998, "end": 1382.08, "text": " security in general.", "tokens": [3825, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.13484255846808937, "compression_ratio": 1.5955555555555556, "no_speech_prob": 6.7368350755714346e-06}, {"id": 219, "seek": 137460, "start": 1382.08, "end": 1393.04, "text": " It is as critically important as validating your certificate chain and validating signatures.", "tokens": [467, 307, 382, 22797, 1021, 382, 7363, 990, 428, 15953, 5021, 293, 7363, 990, 32322, 13], "temperature": 0.0, "avg_logprob": -0.13484255846808937, "compression_ratio": 1.5955555555555556, "no_speech_prob": 6.7368350755714346e-06}, {"id": 220, "seek": 137460, "start": 1393.04, "end": 1397.84, "text": " The full write up about this issue is at that link on my blog.", "tokens": [440, 1577, 2464, 493, 466, 341, 2734, 307, 412, 300, 2113, 322, 452, 6968, 13], "temperature": 0.0, "avg_logprob": -0.13484255846808937, "compression_ratio": 1.5955555555555556, "no_speech_prob": 6.7368350755714346e-06}, {"id": 221, "seek": 137460, "start": 1397.84, "end": 1402.9199999999998, "text": " And there's a link also to the entry about this issue in the Red Hat CVE database which", "tokens": [400, 456, 311, 257, 2113, 611, 281, 264, 8729, 466, 341, 2734, 294, 264, 4477, 15867, 383, 7540, 8149, 597], "temperature": 0.0, "avg_logprob": -0.13484255846808937, "compression_ratio": 1.5955555555555556, "no_speech_prob": 6.7368350755714346e-06}, {"id": 222, "seek": 140292, "start": 1402.92, "end": 1409.0, "text": " includes the list of which products were affected and where the fixes have happened", "tokens": [5974, 264, 1329, 295, 597, 3383, 645, 8028, 293, 689, 264, 32539, 362, 2011], "temperature": 0.0, "avg_logprob": -0.2402654334680358, "compression_ratio": 1.4770114942528736, "no_speech_prob": 8.529373008059338e-05}, {"id": 223, "seek": 140292, "start": 1409.0, "end": 1411.44, "text": " and where they are not happening.", "tokens": [293, 689, 436, 366, 406, 2737, 13], "temperature": 0.0, "avg_logprob": -0.2402654334680358, "compression_ratio": 1.4770114942528736, "no_speech_prob": 8.529373008059338e-05}, {"id": 224, "seek": 140292, "start": 1411.44, "end": 1412.44, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2402654334680358, "compression_ratio": 1.4770114942528736, "no_speech_prob": 8.529373008059338e-05}, {"id": 225, "seek": 140292, "start": 1412.44, "end": 1428.6000000000001, "text": " And that's also, I'll ask questions and then maybe I do the domain takeover demo in a minute.", "tokens": [400, 300, 311, 611, 11, 286, 603, 1029, 1651, 293, 550, 1310, 286, 360, 264, 9274, 747, 3570, 10723, 294, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.2402654334680358, "compression_ratio": 1.4770114942528736, "no_speech_prob": 8.529373008059338e-05}, {"id": 226, "seek": 140292, "start": 1428.6000000000001, "end": 1430.1200000000001, "text": " Maybe we have time up for one question.", "tokens": [2704, 321, 362, 565, 493, 337, 472, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2402654334680358, "compression_ratio": 1.4770114942528736, "no_speech_prob": 8.529373008059338e-05}, {"id": 227, "seek": 143012, "start": 1430.12, "end": 1438.56, "text": " So is there anyone who has the best question that will be answered in one minute?", "tokens": [407, 307, 456, 2878, 567, 575, 264, 1151, 1168, 300, 486, 312, 10103, 294, 472, 3456, 30], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 228, "seek": 143012, "start": 1438.56, "end": 1439.56, "text": " They want the demo.", "tokens": [814, 528, 264, 10723, 13], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 229, "seek": 143012, "start": 1439.56, "end": 1440.56, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 230, "seek": 143012, "start": 1440.56, "end": 1450.36, "text": " So let's, I need to just change the cert map rules, which ones are active?", "tokens": [407, 718, 311, 11, 286, 643, 281, 445, 1319, 264, 5351, 4471, 4474, 11, 597, 2306, 366, 4967, 30], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 231, "seek": 143012, "start": 1450.36, "end": 1452.8799999999999, "text": " Oops.", "tokens": [21726, 13], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 232, "seek": 143012, "start": 1452.8799999999999, "end": 1453.8799999999999, "text": " If I can authenticate.", "tokens": [759, 286, 393, 9214, 8700, 13], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 233, "seek": 143012, "start": 1453.8799999999999, "end": 1454.8799999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.34604523147361865, "compression_ratio": 1.3821656050955413, "no_speech_prob": 0.00011672286200337112}, {"id": 234, "seek": 145488, "start": 1454.88, "end": 1461.88, "text": " My PA is cert map rule, find, this is just the set up.", "tokens": [1222, 17718, 307, 5351, 4471, 4978, 11, 915, 11, 341, 307, 445, 264, 992, 493, 13], "temperature": 0.0, "avg_logprob": -0.37089784328754133, "compression_ratio": 1.3389830508474576, "no_speech_prob": 6.001352085149847e-05}, {"id": 235, "seek": 145488, "start": 1461.88, "end": 1473.16, "text": " So I need to disable cert map two and enable cert map one.", "tokens": [407, 286, 643, 281, 28362, 5351, 4471, 732, 293, 9528, 5351, 4471, 472, 13], "temperature": 0.0, "avg_logprob": -0.37089784328754133, "compression_ratio": 1.3389830508474576, "no_speech_prob": 6.001352085149847e-05}, {"id": 236, "seek": 145488, "start": 1473.16, "end": 1474.8000000000002, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.37089784328754133, "compression_ratio": 1.3389830508474576, "no_speech_prob": 6.001352085149847e-05}, {"id": 237, "seek": 145488, "start": 1474.8000000000002, "end": 1481.3600000000001, "text": " So this is the rule that I'm enabling.", "tokens": [407, 341, 307, 264, 4978, 300, 286, 478, 23148, 13], "temperature": 0.0, "avg_logprob": -0.37089784328754133, "compression_ratio": 1.3389830508474576, "no_speech_prob": 6.001352085149847e-05}, {"id": 238, "seek": 148136, "start": 1481.36, "end": 1485.1599999999999, "text": " I didn't enable it.", "tokens": [286, 994, 380, 9528, 309, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 239, "seek": 148136, "start": 1485.1599999999999, "end": 1491.36, "text": " Oh, thank you for that.", "tokens": [876, 11, 1309, 291, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 240, "seek": 148136, "start": 1491.36, "end": 1494.8799999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 241, "seek": 148136, "start": 1494.8799999999999, "end": 1496.7199999999998, "text": " Now it's enabled.", "tokens": [823, 309, 311, 15172, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 242, "seek": 148136, "start": 1496.7199999999998, "end": 1505.28, "text": " And I can do K in it.", "tokens": [400, 286, 393, 360, 591, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 243, "seek": 148136, "start": 1505.28, "end": 1509.4399999999998, "text": " Let's see it'll be there in the scroll back somewhere.", "tokens": [961, 311, 536, 309, 603, 312, 456, 294, 264, 11369, 646, 4079, 13], "temperature": 0.0, "avg_logprob": -0.4586739280007102, "compression_ratio": 1.2743362831858407, "no_speech_prob": 4.598624582285993e-05}, {"id": 244, "seek": 150944, "start": 1509.44, "end": 1517.6000000000001, "text": " That's server, that's okay.", "tokens": [663, 311, 7154, 11, 300, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.28307065963745115, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.0002405683189863339}, {"id": 245, "seek": 150944, "start": 1517.6000000000001, "end": 1523.72, "text": " So the naughty certificate and the naughty key.", "tokens": [407, 264, 32154, 15953, 293, 264, 32154, 2141, 13], "temperature": 0.0, "avg_logprob": -0.28307065963745115, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.0002405683189863339}, {"id": 246, "seek": 150944, "start": 1523.72, "end": 1528.8400000000001, "text": " And I want to be admin.", "tokens": [400, 286, 528, 281, 312, 24236, 13], "temperature": 0.0, "avg_logprob": -0.28307065963745115, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.0002405683189863339}, {"id": 247, "seek": 150944, "start": 1528.8400000000001, "end": 1529.8400000000001, "text": " And now I'm admin.", "tokens": [400, 586, 286, 478, 24236, 13], "temperature": 0.0, "avg_logprob": -0.28307065963745115, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.0002405683189863339}, {"id": 248, "seek": 152984, "start": 1529.84, "end": 1539.8799999999999, "text": " I'm going to show you the certificate.", "tokens": [286, 478, 516, 281, 855, 291, 264, 15953, 13], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 249, "seek": 152984, "start": 1539.8799999999999, "end": 1540.8799999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 250, "seek": 152984, "start": 1540.8799999999999, "end": 1551.36, "text": " So the certificate was issued to Alice and the subject name includes Alice's malicious", "tokens": [407, 264, 15953, 390, 14379, 281, 16004, 293, 264, 3983, 1315, 5974, 16004, 311, 33496], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 251, "seek": 152984, "start": 1551.36, "end": 1552.36, "text": " email alias.", "tokens": [3796, 419, 4609, 13], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 252, "seek": 152984, "start": 1552.36, "end": 1553.36, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 253, "seek": 152984, "start": 1553.36, "end": 1554.36, "text": " There you have it.", "tokens": [821, 291, 362, 309, 13], "temperature": 0.0, "avg_logprob": -0.30077823938107956, "compression_ratio": 1.3739837398373984, "no_speech_prob": 4.565240305964835e-05}, {"id": 254, "seek": 155436, "start": 1554.36, "end": 1561.6399999999999, "text": " That's, there you have it.", "tokens": [663, 311, 11, 456, 291, 362, 309, 13], "temperature": 1.0, "avg_logprob": -1.9468253209040716, "compression_ratio": 0.8983050847457628, "no_speech_prob": 0.00014524595462717116}, {"id": 255, "seek": 155436, "start": 1561.6399999999999, "end": 1566.7199999999998, "text": " Bye.", "tokens": [4621, 13], "temperature": 1.0, "avg_logprob": -1.9468253209040716, "compression_ratio": 0.8983050847457628, "no_speech_prob": 0.00014524595462717116}, {"id": 256, "seek": 155436, "start": 1566.7199999999998, "end": 1570.56, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 1.0, "avg_logprob": -1.9468253209040716, "compression_ratio": 0.8983050847457628, "no_speech_prob": 0.00014524595462717116}, {"id": 257, "seek": 155436, "start": 1570.56, "end": 1577.9599999999998, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 1.0, "avg_logprob": -1.9468253209040716, "compression_ratio": 0.8983050847457628, "no_speech_prob": 0.00014524595462717116}], "language": "en"}