{"text": " Hello everyone, my name is Moritz Eckert and in this talk I want to highlight a challenge of confidential computing that goes more into this DevOps direction. I want to talk about how we can deploy, orchestrate and manage confidential applications in a scalable, more cloud native way using a tool called Maburon. Before we go into the details, I want to first set the scene, give you an understanding of a use case, of the problem set we're dealing with and then step by step explore the solution that Maburon offers and in the end you might even have time for a short demo. So we were doing a project together with Bosch where we were dealing with cars, vehicles, creating video streams that contain personal identifiable information, PII. That means license plates, faces, other things that we wanted to feed into a model training, AI model training pipeline and we wanted to train that model on the raw real data. That means no blurring, no cutouts and at the same time we wanted to make use of an external labeling service that we would provide this material and they would label it for us so we can train our model on it. Of course this should all be done in a privacy preserving way, not sharing any of this PII. And therefore we developed a pipeline that essentially splitted the image based on what is PII and what is not and then would send the let's call it safe non-PII footage to the labeling companies and get back the labels, put together the image with the PII information again and then feed it to our model training. And for that we wanted to use confidential computing. That means from the car fleet to the actual trained model data would always be encrypted also at runtime and we can have this whole pipeline verifiable. And this pipeline should be scalable, should hold up against the challenges of a large car fleet sending a lot of footage, a lot of video data. You can find more about this use case of this project, we presented that with Bosch at Microsoft Build, Intel Vision, you will find those talks online. We from the actual site, we built open source projects to realize such types of confidential computing applications, we have a bunch of tools targeting more of these new types of applications and then we have a tool called Constellation that's more for the lift and shift side. So for this specific project we choose the Mavaron framework which we call the control plane for scalable confidential apps. But now that we know the problem statement, let's see in more detail what are the challenges when you want to deploy such scalable AI pipeline or any other type of microservice architecture in Kubernetes or any other cloud orchestrator. So on the right hand side we have our cluster that's already confidential computing capable, in that case it were SGX equipped machines, we already packaged our application into secure enclaves, in this case we used the Grameen framework for Intel SGX which will be presented in the next talk after that one. So this is already done, now on the left hand side on the top left we have our DevOps team and the DevOps team now wants to deploy all those different microservices that together build up the pipeline and they want to ensure that all of them have integrity, they have the right identity, they want to do remote attestation essentially. But how can they do that without doing that for each and every service individually that potentially can scale up and down dynamically, this is going to be a huge pain if you would do that. And then they want to provide configuration, they want to provide parameters similarly how you would do in a regular Kubernetes deployment, but you can't trust the Kubernetes environment, you can't trust the control plane or anything. So how can they manage orchestrate such applications? And then once deployed how can the individual services, how can they securely communicate with each other knowing that the other end of the connection is indeed a valid secure enclave, it has the right identity, it's also part of the pipeline and how can we do that decoupled from the application layer? So we don't have to do that over and over again when we build a new type of application and need to do remote attestation on the application logic. No, we want to do that in a service mesh fashion where we decouple this functionality and solve it on a different layer. And lastly, how can an external party like the Carfleet verify an entire deployment that's just not one big monolith but consists of several services? How can they verify it from the outside in one single simple step without knowing the inner details of our architecture? These are the challenges we are facing when we do real world deployments using confidential computing. So now that we know the challenge, let's see how Maveron approaches this problem. So with Maveron, we deploy a control plane component, we call it the coordinator. So we deploy the coordinator that itself runs inside a secure enclave. That means our DevOps team can first verify that coordinator and then they can provide or they provide the coordinator with a configuration, a deployment configuration we call the manifest and that is similar to any other deployment configuration for Kubernetes. But we deploy it to a trusted controller that we verified beforehand. So I want to show a quick example of how such manifest could look like. You can see here it's JSON format. The first thing we define here are packages. Packages are essentially the enclaves. This right here is specific to into SGX. We have the MR signer or here signer ID and so forth. In the future, this will also support other types of CC hardware, for example, AMG, SCV and so forth. But in this case, we have two SGX enclaves back and front end and they are identified with their unique signatures. And once we have these packages defined, think of them like you defined a container, a containerized enclave. We define the next section, which is our models. And models now consume such package or things like a Kubernetes pod consuming a container. In this case, it consumes the back end package and then we can define several parameters like files that should be available to that marble or the environment variables that you want to have to find for that model and the arguments. And this is similar to any other Kubernetes deployment, but now, because it's the manifest, because you can verify it, the coordinator can enforce this configuration for your outplaves and you can trust these configurations and that's the important point. What we also have here is called roles. So this model is associated with two roles, third reader and key reader. And Maveron implements a type of role-based access control. So if I scroll down in this manifest, I will find a section that is called roles. And here, similar to any other role-based system, every role is associated with a resource and the specific instances of these resource and it defines what action that role can perform on the resource. And these roles, we can then use to attach them to marbles. So a model can do certain operations on resources and we also have users and users are authenticated using PKI and then they can do whatever their role allows them to do. One of the things, for example, would be to define a secret. And the secret could be, for example, a user-defined secret, for example, an API key. And then we have a user, we have a role that allows them to update the API key. And this would, for example, allow you to have a multi-tenant scenario where you have the DevOps team that deploys this application and you have another team that is managing another service or access to something and that provides a key or an API key into that application. And using the role-based access control, they can deploy that or set that specific secret after the manifest has been put in place. So this key is then uploaded, is managed by the coordinator which is trusted and is from there distributed to your services to your marbles. And that means the DevOps team can never access a secret. So you have a split of trust. You have the owners of that secret that will always stay in control and you have the DevOps team and they can engage in a multi-tenant scenario. So we now have seen the manifest, we have seen the packages, the marbles, the role-based access control and resources such as secrets. So we go back to our example. After setting the manifest, the coordinator will then take care of providing those credentials or secrets or configurations to your marbles to your services. So once you deploy them using regular Kubernetes means of deploying the application, they will come up, they will be authenticated by the Marble Run coordinator and then receive their parameters, their credentials. Part of these credentials are TLS certificates. So every service has a unique leave TLS certificate which goes up to a root certificate that is established by Marble Run as a PKI infrastructure. So there's for every deployment, you have one root certificate. Those can then be used to establish secure connections between the services. For certain runtime environments such as EGO, this can be done automatically in a neutral TLS fashion if you're familiar with service mesh kind of things, you might be familiar with that term, but essentially it means you will wrap every TCP connection between your services automatically into TLS so they are secured. For other types of runtime environments or if they're specific need, you can also consume those credentials using the Marble Run manifest. You can place them into files, you can place them into the environment and then your application can take them from there and use them to establish secure connections. That's very similar to how you would operate with like CertManager or other certificate management systems for Kubernetes. The difference being that those certificates are only available inside that secure confidential environment, inside your secure confidential deployment, that means the coordinator and then your services. So now what we have is we have our running deployment, everything is connected, they can communicate with each other. So in the last step now an outside party can connect to the coordinator again, can obtain its attestation statement that contains the Marble Run manifest so they can verify that indeed a valid Marble Run coordinator, they can verify that indeed the deployment, the manifest they expect it to be in place there and they will obtain the root certificate from this deployment and after verifying that they can use the root certificate to authenticate to their deployment, in this case the front end of the AI pipeline that consumes the video stream from the cars and transitively because they verify the coordinator, they verify the manifest, they verified the entire deployment in one concise simple step. And that's it. Now we have all of those problems I showed you earlier, we have them solved, we can manage and orchestrate that deployment from the DevOps team side, we can communicate with that deployment from the car fleet and potentially any other third party or legislator or regulator can verify this deployment as well using the same type of mechanism. So in summary, what does Marble Run do? It adds a orchestratability, a configurability, a manageability to your confidential deployments, make some scalable, make them updatable, make them manageable. It can run standalone but it runs best on Kubernetes and the usual cloud environments. It supports several runtimes so far it's SGX specific, so for example Ego, Graphene, Ocklum and the future, we plan to also support other types of confidential computing runtimes like AMD, SAP, Intel, TDAX, most likely based on the confidential containers project. Okay, now we have a little bit of time left to look at a demo. Let me switch to my console. I have a Kubernetes cluster running here on Microsoft Azure with two nodes that are both equipped with SGX capabilities and we will now install Marble Run, set the manifest and deploy a simple demo application. So we use the Marble Run CLI tool that you can use to interact with the Marble Run coordinator and perform your usual DevOps tasks. So Marble Run will make sure to install the Microsoft coordinator that just should take a second for everything to be set up and then we can port forward the client API to local hosts so we can interact with the coordinator and this should be, if you're in a production environment, you can of course also use an external open server or any other way of exporting that service to any kind of environment you want to. You just need to wait a second for the coordinator to be up and running and then I can use this client API from here. And the second step would be then to verify the coordinators in DDA valid Marble Run coordinator with the correct enclave, you can use any type of command that will automatically do this verification and in this case we want to obtain the root certificate of this Marble Run deployment here. This would also be what an external party like a Carfleet can do to obtain a root certificate and then connect to the application, of course you can always do that ahead of time and then just distribute that certificate as the root of trust. But once we trust the coordinator, which is just a plain constellation coordinator, we can do Marble Run check providing the Marble Run, oh sorry it's not check, it's status. We can use Marble Run status to see what status the Marble Run coordinator is in, in this case it's waiting for a manifest to be set. Now we can set the manifest, I have one prepared here. It's a very simple application, just having three packages, microservice, demo application, one front end, two back end services, so three packages, also three marbles for these packages and they build up such demo, emoji, voting service. We have already seen the manifest, I'm not going to go into the detail again but of course also this is in GitHub so you can have a look at it if you want to. And then we can just set this manifest using Marble Run manifest set and it will upload the manifest and now the Marble Run coordinator should be in the state of being ready to accept and authenticate marbles. So now we can just go ahead and deploy our application and this is just regular Kubernetes application deployments. So in this case we're using Helm for this emoji voter demo application, it will install those three services and make sure that they are continuously running. And we can now check Marble Run and see those authentication requests where those marbles for example the web front end or one of those two back end services will contact the coordinator, will authenticate itself and be provided with the configurational parameters and their credentials. So we see the web front end was first and it was successfully activated as a new model. And this will continuously be running. So now if I go ahead and get all the parts in the emoji voter namespace I will see that all of these services are indeed running and if I would now scale up and down one of them they will be automatically authenticated again by Marble Run and be added to this deployment spanning a confidential overlay, a confidential deployment. Yeah and that's it from the demo. I think we've seen how you can interact with the Marble Run CLI, how you can install it, how easy it is to deploy a confidential application and we can then now keep using Marble Run to orchestrate and update secrets and update things based on what we defined in the manifest. Yeah let's go back to the slides. That's it. I think we've seen in summary Marble Run makes it quite easy to deploy, orchestrate, just manage applications during the lifecycle, manage confidential applications during the lifecycle and it augments the usual DevOps stack of cloud native deployments using Kubernetes, using your regular service mesh and so forth. So if you want to try it out or want more details please see our Github page, it also links to a documentation, you can very quickly create your first confidential deployment. We also have a simulation node so if you're not, don't have access to any type of confidential computing hardware you can just use the simulation node to run it locally using MiniCube or whatever the tooling you have in place. And then if you have further questions please get in touch, you can find me on LinkedIn, you can join our Discord. I will also be there tomorrow for the day two of the confidential computing dev room. Please hit me up if you have any questions or just want to have a chat. And yeah, before we go into the Q&A one last cheeky little self-advertisement, we have the open confidential computing conference coming up in March. I think this is you're the right audience for that. There are a lot of confidential computing open source projects that are going to be presented, some interesting applications and other insights into confidential computing in general. So yeah, it's free. It's online. Please register if you're interested. It will be very, very cool to see you all there. That's it. Thank you very much. And I think we have a bit of time left for questions. you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.36, "text": " Hello everyone, my name is Moritz Eckert and in this talk I want to highlight a challenge", "tokens": [50364, 2425, 1518, 11, 452, 1315, 307, 5146, 6862, 46354, 911, 293, 294, 341, 751, 286, 528, 281, 5078, 257, 3430, 50982], "temperature": 0.0, "avg_logprob": -0.2348761171907992, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.10464219003915787}, {"id": 1, "seek": 0, "start": 12.36, "end": 15.72, "text": " of confidential computing that goes more into this DevOps direction.", "tokens": [50982, 295, 27054, 15866, 300, 1709, 544, 666, 341, 43051, 3513, 13, 51150], "temperature": 0.0, "avg_logprob": -0.2348761171907992, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.10464219003915787}, {"id": 2, "seek": 0, "start": 15.72, "end": 22.84, "text": " I want to talk about how we can deploy, orchestrate and manage confidential applications in a", "tokens": [51150, 286, 528, 281, 751, 466, 577, 321, 393, 7274, 11, 14161, 4404, 293, 3067, 27054, 5821, 294, 257, 51506], "temperature": 0.0, "avg_logprob": -0.2348761171907992, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.10464219003915787}, {"id": 3, "seek": 0, "start": 22.84, "end": 28.96, "text": " scalable, more cloud native way using a tool called Maburon.", "tokens": [51506, 38481, 11, 544, 4588, 8470, 636, 1228, 257, 2290, 1219, 376, 455, 374, 266, 13, 51812], "temperature": 0.0, "avg_logprob": -0.2348761171907992, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.10464219003915787}, {"id": 4, "seek": 2896, "start": 28.96, "end": 33.72, "text": " Before we go into the details, I want to first set the scene, give you an understanding of", "tokens": [50364, 4546, 321, 352, 666, 264, 4365, 11, 286, 528, 281, 700, 992, 264, 4145, 11, 976, 291, 364, 3701, 295, 50602], "temperature": 0.0, "avg_logprob": -0.1818044212427032, "compression_ratio": 1.5810810810810811, "no_speech_prob": 0.20128868520259857}, {"id": 5, "seek": 2896, "start": 33.72, "end": 38.760000000000005, "text": " a use case, of the problem set we're dealing with and then step by step explore the solution", "tokens": [50602, 257, 764, 1389, 11, 295, 264, 1154, 992, 321, 434, 6260, 365, 293, 550, 1823, 538, 1823, 6839, 264, 3827, 50854], "temperature": 0.0, "avg_logprob": -0.1818044212427032, "compression_ratio": 1.5810810810810811, "no_speech_prob": 0.20128868520259857}, {"id": 6, "seek": 2896, "start": 38.760000000000005, "end": 45.08, "text": " that Maburon offers and in the end you might even have time for a short demo.", "tokens": [50854, 300, 376, 455, 374, 266, 7736, 293, 294, 264, 917, 291, 1062, 754, 362, 565, 337, 257, 2099, 10723, 13, 51170], "temperature": 0.0, "avg_logprob": -0.1818044212427032, "compression_ratio": 1.5810810810810811, "no_speech_prob": 0.20128868520259857}, {"id": 7, "seek": 2896, "start": 45.08, "end": 55.0, "text": " So we were doing a project together with Bosch where we were dealing with cars, vehicles,", "tokens": [51170, 407, 321, 645, 884, 257, 1716, 1214, 365, 22264, 339, 689, 321, 645, 6260, 365, 5163, 11, 8948, 11, 51666], "temperature": 0.0, "avg_logprob": -0.1818044212427032, "compression_ratio": 1.5810810810810811, "no_speech_prob": 0.20128868520259857}, {"id": 8, "seek": 5500, "start": 55.0, "end": 63.2, "text": " creating video streams that contain personal identifiable information, PII.", "tokens": [50364, 4084, 960, 15842, 300, 5304, 2973, 2473, 30876, 1589, 11, 430, 9503, 13, 50774], "temperature": 0.0, "avg_logprob": -0.23469568553723788, "compression_ratio": 1.5886075949367089, "no_speech_prob": 0.4363880157470703}, {"id": 9, "seek": 5500, "start": 63.2, "end": 75.2, "text": " That means license plates, faces, other things that we wanted to feed into a model training,", "tokens": [50774, 663, 1355, 10476, 14231, 11, 8475, 11, 661, 721, 300, 321, 1415, 281, 3154, 666, 257, 2316, 3097, 11, 51374], "temperature": 0.0, "avg_logprob": -0.23469568553723788, "compression_ratio": 1.5886075949367089, "no_speech_prob": 0.4363880157470703}, {"id": 10, "seek": 5500, "start": 75.2, "end": 82.08, "text": " AI model training pipeline and we wanted to train that model on the raw real data.", "tokens": [51374, 7318, 2316, 3097, 15517, 293, 321, 1415, 281, 3847, 300, 2316, 322, 264, 8936, 957, 1412, 13, 51718], "temperature": 0.0, "avg_logprob": -0.23469568553723788, "compression_ratio": 1.5886075949367089, "no_speech_prob": 0.4363880157470703}, {"id": 11, "seek": 8208, "start": 82.08, "end": 88.75999999999999, "text": " That means no blurring, no cutouts and at the same time we wanted to make use of an", "tokens": [50364, 663, 1355, 572, 14257, 2937, 11, 572, 1723, 7711, 293, 412, 264, 912, 565, 321, 1415, 281, 652, 764, 295, 364, 50698], "temperature": 0.0, "avg_logprob": -0.16889990136978475, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.058305010199546814}, {"id": 12, "seek": 8208, "start": 88.75999999999999, "end": 94.72, "text": " external labeling service that we would provide this material and they would label it for", "tokens": [50698, 8320, 40244, 2643, 300, 321, 576, 2893, 341, 2527, 293, 436, 576, 7645, 309, 337, 50996], "temperature": 0.0, "avg_logprob": -0.16889990136978475, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.058305010199546814}, {"id": 13, "seek": 8208, "start": 94.72, "end": 97.56, "text": " us so we can train our model on it.", "tokens": [50996, 505, 370, 321, 393, 3847, 527, 2316, 322, 309, 13, 51138], "temperature": 0.0, "avg_logprob": -0.16889990136978475, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.058305010199546814}, {"id": 14, "seek": 8208, "start": 97.56, "end": 105.2, "text": " Of course this should all be done in a privacy preserving way, not sharing any of this PII.", "tokens": [51138, 2720, 1164, 341, 820, 439, 312, 1096, 294, 257, 11427, 33173, 636, 11, 406, 5414, 604, 295, 341, 430, 9503, 13, 51520], "temperature": 0.0, "avg_logprob": -0.16889990136978475, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.058305010199546814}, {"id": 15, "seek": 8208, "start": 105.2, "end": 111.08, "text": " And therefore we developed a pipeline that essentially splitted the image based on what", "tokens": [51520, 400, 4412, 321, 4743, 257, 15517, 300, 4476, 4732, 3944, 264, 3256, 2361, 322, 437, 51814], "temperature": 0.0, "avg_logprob": -0.16889990136978475, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.058305010199546814}, {"id": 16, "seek": 11108, "start": 111.08, "end": 118.88, "text": " is PII and what is not and then would send the let's call it safe non-PII footage to", "tokens": [50364, 307, 430, 9503, 293, 437, 307, 406, 293, 550, 576, 2845, 264, 718, 311, 818, 309, 3273, 2107, 12, 47, 9503, 9556, 281, 50754], "temperature": 0.0, "avg_logprob": -0.15413881151863698, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.02478771284222603}, {"id": 17, "seek": 11108, "start": 118.88, "end": 125.75999999999999, "text": " the labeling companies and get back the labels, put together the image with the PII information", "tokens": [50754, 264, 40244, 3431, 293, 483, 646, 264, 16949, 11, 829, 1214, 264, 3256, 365, 264, 430, 9503, 1589, 51098], "temperature": 0.0, "avg_logprob": -0.15413881151863698, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.02478771284222603}, {"id": 18, "seek": 11108, "start": 125.75999999999999, "end": 129.84, "text": " again and then feed it to our model training.", "tokens": [51098, 797, 293, 550, 3154, 309, 281, 527, 2316, 3097, 13, 51302], "temperature": 0.0, "avg_logprob": -0.15413881151863698, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.02478771284222603}, {"id": 19, "seek": 11108, "start": 129.84, "end": 133.28, "text": " And for that we wanted to use confidential computing.", "tokens": [51302, 400, 337, 300, 321, 1415, 281, 764, 27054, 15866, 13, 51474], "temperature": 0.0, "avg_logprob": -0.15413881151863698, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.02478771284222603}, {"id": 20, "seek": 11108, "start": 133.28, "end": 139.76, "text": " That means from the car fleet to the actual trained model data would always be encrypted", "tokens": [51474, 663, 1355, 490, 264, 1032, 19396, 281, 264, 3539, 8895, 2316, 1412, 576, 1009, 312, 36663, 51798], "temperature": 0.0, "avg_logprob": -0.15413881151863698, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.02478771284222603}, {"id": 21, "seek": 13976, "start": 139.76, "end": 144.72, "text": " also at runtime and we can have this whole pipeline verifiable.", "tokens": [50364, 611, 412, 34474, 293, 321, 393, 362, 341, 1379, 15517, 1306, 30876, 13, 50612], "temperature": 0.0, "avg_logprob": -0.13984613308961363, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.018827198073267937}, {"id": 22, "seek": 13976, "start": 144.72, "end": 150.16, "text": " And this pipeline should be scalable, should hold up against the challenges of a large", "tokens": [50612, 400, 341, 15517, 820, 312, 38481, 11, 820, 1797, 493, 1970, 264, 4759, 295, 257, 2416, 50884], "temperature": 0.0, "avg_logprob": -0.13984613308961363, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.018827198073267937}, {"id": 23, "seek": 13976, "start": 150.16, "end": 156.68, "text": " car fleet sending a lot of footage, a lot of video data.", "tokens": [50884, 1032, 19396, 7750, 257, 688, 295, 9556, 11, 257, 688, 295, 960, 1412, 13, 51210], "temperature": 0.0, "avg_logprob": -0.13984613308961363, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.018827198073267937}, {"id": 24, "seek": 13976, "start": 156.68, "end": 162.0, "text": " You can find more about this use case of this project, we presented that with Bosch at Microsoft", "tokens": [51210, 509, 393, 915, 544, 466, 341, 764, 1389, 295, 341, 1716, 11, 321, 8212, 300, 365, 22264, 339, 412, 8116, 51476], "temperature": 0.0, "avg_logprob": -0.13984613308961363, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.018827198073267937}, {"id": 25, "seek": 13976, "start": 162.0, "end": 168.88, "text": " Build, Intel Vision, you will find those talks online.", "tokens": [51476, 11875, 11, 19762, 25170, 11, 291, 486, 915, 729, 6686, 2950, 13, 51820], "temperature": 0.0, "avg_logprob": -0.13984613308961363, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.018827198073267937}, {"id": 26, "seek": 16888, "start": 168.88, "end": 175.92, "text": " We from the actual site, we built open source projects to realize such types of confidential", "tokens": [50364, 492, 490, 264, 3539, 3621, 11, 321, 3094, 1269, 4009, 4455, 281, 4325, 1270, 3467, 295, 27054, 50716], "temperature": 0.0, "avg_logprob": -0.23711691707013602, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.021591417491436005}, {"id": 27, "seek": 16888, "start": 175.92, "end": 180.72, "text": " computing applications, we have a bunch of tools targeting more of these new types of", "tokens": [50716, 15866, 5821, 11, 321, 362, 257, 3840, 295, 3873, 17918, 544, 295, 613, 777, 3467, 295, 50956], "temperature": 0.0, "avg_logprob": -0.23711691707013602, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.021591417491436005}, {"id": 28, "seek": 16888, "start": 180.72, "end": 185.92, "text": " applications and then we have a tool called Constellation that's more for the lift and", "tokens": [50956, 5821, 293, 550, 321, 362, 257, 2290, 1219, 8574, 898, 399, 300, 311, 544, 337, 264, 5533, 293, 51216], "temperature": 0.0, "avg_logprob": -0.23711691707013602, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.021591417491436005}, {"id": 29, "seek": 16888, "start": 185.92, "end": 187.32, "text": " shift side.", "tokens": [51216, 5513, 1252, 13, 51286], "temperature": 0.0, "avg_logprob": -0.23711691707013602, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.021591417491436005}, {"id": 30, "seek": 16888, "start": 187.32, "end": 194.04, "text": " So for this specific project we choose the Mavaron framework which we call the control", "tokens": [51286, 407, 337, 341, 2685, 1716, 321, 2826, 264, 376, 706, 6372, 8388, 597, 321, 818, 264, 1969, 51622], "temperature": 0.0, "avg_logprob": -0.23711691707013602, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.021591417491436005}, {"id": 31, "seek": 19404, "start": 194.04, "end": 199.2, "text": " plane for scalable confidential apps.", "tokens": [50364, 5720, 337, 38481, 27054, 7733, 13, 50622], "temperature": 0.0, "avg_logprob": -0.14019734859466554, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.2170630693435669}, {"id": 32, "seek": 19404, "start": 199.2, "end": 204.76, "text": " But now that we know the problem statement, let's see in more detail what are the challenges", "tokens": [50622, 583, 586, 300, 321, 458, 264, 1154, 5629, 11, 718, 311, 536, 294, 544, 2607, 437, 366, 264, 4759, 50900], "temperature": 0.0, "avg_logprob": -0.14019734859466554, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.2170630693435669}, {"id": 33, "seek": 19404, "start": 204.76, "end": 210.6, "text": " when you want to deploy such scalable AI pipeline or any other type of microservice architecture", "tokens": [50900, 562, 291, 528, 281, 7274, 1270, 38481, 7318, 15517, 420, 604, 661, 2010, 295, 15547, 25006, 9482, 51192], "temperature": 0.0, "avg_logprob": -0.14019734859466554, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.2170630693435669}, {"id": 34, "seek": 19404, "start": 210.6, "end": 215.56, "text": " in Kubernetes or any other cloud orchestrator.", "tokens": [51192, 294, 23145, 420, 604, 661, 4588, 14161, 19802, 13, 51440], "temperature": 0.0, "avg_logprob": -0.14019734859466554, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.2170630693435669}, {"id": 35, "seek": 19404, "start": 215.56, "end": 221.16, "text": " So on the right hand side we have our cluster that's already confidential computing capable,", "tokens": [51440, 407, 322, 264, 558, 1011, 1252, 321, 362, 527, 13630, 300, 311, 1217, 27054, 15866, 8189, 11, 51720], "temperature": 0.0, "avg_logprob": -0.14019734859466554, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.2170630693435669}, {"id": 36, "seek": 22116, "start": 221.16, "end": 228.07999999999998, "text": " in that case it were SGX equipped machines, we already packaged our application into secure", "tokens": [50364, 294, 300, 1389, 309, 645, 34520, 55, 15218, 8379, 11, 321, 1217, 38162, 527, 3861, 666, 7144, 50710], "temperature": 0.0, "avg_logprob": -0.17165735934643037, "compression_ratio": 1.6213991769547325, "no_speech_prob": 0.07155023515224457}, {"id": 37, "seek": 22116, "start": 228.07999999999998, "end": 234.44, "text": " enclaves, in this case we used the Grameen framework for Intel SGX which will be presented", "tokens": [50710, 20987, 5423, 11, 294, 341, 1389, 321, 1143, 264, 2606, 529, 268, 8388, 337, 19762, 34520, 55, 597, 486, 312, 8212, 51028], "temperature": 0.0, "avg_logprob": -0.17165735934643037, "compression_ratio": 1.6213991769547325, "no_speech_prob": 0.07155023515224457}, {"id": 38, "seek": 22116, "start": 234.44, "end": 238.2, "text": " in the next talk after that one.", "tokens": [51028, 294, 264, 958, 751, 934, 300, 472, 13, 51216], "temperature": 0.0, "avg_logprob": -0.17165735934643037, "compression_ratio": 1.6213991769547325, "no_speech_prob": 0.07155023515224457}, {"id": 39, "seek": 22116, "start": 238.2, "end": 244.48, "text": " So this is already done, now on the left hand side on the top left we have our DevOps team", "tokens": [51216, 407, 341, 307, 1217, 1096, 11, 586, 322, 264, 1411, 1011, 1252, 322, 264, 1192, 1411, 321, 362, 527, 43051, 1469, 51530], "temperature": 0.0, "avg_logprob": -0.17165735934643037, "compression_ratio": 1.6213991769547325, "no_speech_prob": 0.07155023515224457}, {"id": 40, "seek": 22116, "start": 244.48, "end": 250.76, "text": " and the DevOps team now wants to deploy all those different microservices that together", "tokens": [51530, 293, 264, 43051, 1469, 586, 2738, 281, 7274, 439, 729, 819, 15547, 47480, 300, 1214, 51844], "temperature": 0.0, "avg_logprob": -0.17165735934643037, "compression_ratio": 1.6213991769547325, "no_speech_prob": 0.07155023515224457}, {"id": 41, "seek": 25076, "start": 250.76, "end": 256.92, "text": " build up the pipeline and they want to ensure that all of them have integrity, they have", "tokens": [50364, 1322, 493, 264, 15517, 293, 436, 528, 281, 5586, 300, 439, 295, 552, 362, 16000, 11, 436, 362, 50672], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 42, "seek": 25076, "start": 256.92, "end": 260.12, "text": " the right identity, they want to do remote attestation essentially.", "tokens": [50672, 264, 558, 6575, 11, 436, 528, 281, 360, 8607, 951, 377, 399, 4476, 13, 50832], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 43, "seek": 25076, "start": 260.12, "end": 265.71999999999997, "text": " But how can they do that without doing that for each and every service individually that", "tokens": [50832, 583, 577, 393, 436, 360, 300, 1553, 884, 300, 337, 1184, 293, 633, 2643, 16652, 300, 51112], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 44, "seek": 25076, "start": 265.71999999999997, "end": 270.68, "text": " potentially can scale up and down dynamically, this is going to be a huge pain if you would", "tokens": [51112, 7263, 393, 4373, 493, 293, 760, 43492, 11, 341, 307, 516, 281, 312, 257, 2603, 1822, 498, 291, 576, 51360], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 45, "seek": 25076, "start": 270.68, "end": 271.68, "text": " do that.", "tokens": [51360, 360, 300, 13, 51410], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 46, "seek": 25076, "start": 271.68, "end": 277.96, "text": " And then they want to provide configuration, they want to provide parameters similarly", "tokens": [51410, 400, 550, 436, 528, 281, 2893, 11694, 11, 436, 528, 281, 2893, 9834, 14138, 51724], "temperature": 0.0, "avg_logprob": -0.17156534778828525, "compression_ratio": 1.8117154811715481, "no_speech_prob": 0.38421738147735596}, {"id": 47, "seek": 27796, "start": 278.03999999999996, "end": 282.44, "text": " how you would do in a regular Kubernetes deployment, but you can't trust the Kubernetes environment,", "tokens": [50368, 577, 291, 576, 360, 294, 257, 3890, 23145, 19317, 11, 457, 291, 393, 380, 3361, 264, 23145, 2823, 11, 50588], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 48, "seek": 27796, "start": 282.44, "end": 285.35999999999996, "text": " you can't trust the control plane or anything.", "tokens": [50588, 291, 393, 380, 3361, 264, 1969, 5720, 420, 1340, 13, 50734], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 49, "seek": 27796, "start": 285.35999999999996, "end": 290.71999999999997, "text": " So how can they manage orchestrate such applications?", "tokens": [50734, 407, 577, 393, 436, 3067, 14161, 4404, 1270, 5821, 30, 51002], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 50, "seek": 27796, "start": 290.71999999999997, "end": 296.52, "text": " And then once deployed how can the individual services, how can they securely communicate", "tokens": [51002, 400, 550, 1564, 17826, 577, 393, 264, 2609, 3328, 11, 577, 393, 436, 38348, 7890, 51292], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 51, "seek": 27796, "start": 296.52, "end": 302.76, "text": " with each other knowing that the other end of the connection is indeed a valid secure", "tokens": [51292, 365, 1184, 661, 5276, 300, 264, 661, 917, 295, 264, 4984, 307, 6451, 257, 7363, 7144, 51604], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 52, "seek": 27796, "start": 302.76, "end": 307.76, "text": " enclave, it has the right identity, it's also part of the pipeline and how can we do that", "tokens": [51604, 2058, 27995, 11, 309, 575, 264, 558, 6575, 11, 309, 311, 611, 644, 295, 264, 15517, 293, 577, 393, 321, 360, 300, 51854], "temperature": 0.0, "avg_logprob": -0.13639352006732292, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.019114790484309196}, {"id": 53, "seek": 30776, "start": 307.76, "end": 309.68, "text": " decoupled from the application layer?", "tokens": [50364, 979, 263, 15551, 490, 264, 3861, 4583, 30, 50460], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 54, "seek": 30776, "start": 309.68, "end": 314.32, "text": " So we don't have to do that over and over again when we build a new type of application", "tokens": [50460, 407, 321, 500, 380, 362, 281, 360, 300, 670, 293, 670, 797, 562, 321, 1322, 257, 777, 2010, 295, 3861, 50692], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 55, "seek": 30776, "start": 314.32, "end": 317.15999999999997, "text": " and need to do remote attestation on the application logic.", "tokens": [50692, 293, 643, 281, 360, 8607, 951, 377, 399, 322, 264, 3861, 9952, 13, 50834], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 56, "seek": 30776, "start": 317.15999999999997, "end": 321.96, "text": " No, we want to do that in a service mesh fashion where we decouple this functionality and solve", "tokens": [50834, 883, 11, 321, 528, 281, 360, 300, 294, 257, 2643, 17407, 6700, 689, 321, 979, 263, 781, 341, 14980, 293, 5039, 51074], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 57, "seek": 30776, "start": 321.96, "end": 324.0, "text": " it on a different layer.", "tokens": [51074, 309, 322, 257, 819, 4583, 13, 51176], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 58, "seek": 30776, "start": 324.0, "end": 331.03999999999996, "text": " And lastly, how can an external party like the Carfleet verify an entire deployment that's", "tokens": [51176, 400, 16386, 11, 577, 393, 364, 8320, 3595, 411, 264, 2741, 38921, 302, 16888, 364, 2302, 19317, 300, 311, 51528], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 59, "seek": 30776, "start": 331.03999999999996, "end": 334.48, "text": " just not one big monolith but consists of several services?", "tokens": [51528, 445, 406, 472, 955, 1108, 29131, 457, 14689, 295, 2940, 3328, 30, 51700], "temperature": 0.0, "avg_logprob": -0.1756866620934528, "compression_ratio": 1.6925925925925926, "no_speech_prob": 0.01690482720732689}, {"id": 60, "seek": 33448, "start": 334.48, "end": 340.40000000000003, "text": " How can they verify it from the outside in one single simple step without knowing the", "tokens": [50364, 1012, 393, 436, 16888, 309, 490, 264, 2380, 294, 472, 2167, 2199, 1823, 1553, 5276, 264, 50660], "temperature": 0.0, "avg_logprob": -0.16309567572365344, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.005639815703034401}, {"id": 61, "seek": 33448, "start": 340.40000000000003, "end": 344.32, "text": " inner details of our architecture?", "tokens": [50660, 7284, 4365, 295, 527, 9482, 30, 50856], "temperature": 0.0, "avg_logprob": -0.16309567572365344, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.005639815703034401}, {"id": 62, "seek": 33448, "start": 344.32, "end": 349.20000000000005, "text": " These are the challenges we are facing when we do real world deployments using confidential", "tokens": [50856, 1981, 366, 264, 4759, 321, 366, 7170, 562, 321, 360, 957, 1002, 7274, 1117, 1228, 27054, 51100], "temperature": 0.0, "avg_logprob": -0.16309567572365344, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.005639815703034401}, {"id": 63, "seek": 33448, "start": 349.20000000000005, "end": 352.32, "text": " computing.", "tokens": [51100, 15866, 13, 51256], "temperature": 0.0, "avg_logprob": -0.16309567572365344, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.005639815703034401}, {"id": 64, "seek": 33448, "start": 352.32, "end": 358.72, "text": " So now that we know the challenge, let's see how Maveron approaches this problem.", "tokens": [51256, 407, 586, 300, 321, 458, 264, 3430, 11, 718, 311, 536, 577, 4042, 331, 266, 11587, 341, 1154, 13, 51576], "temperature": 0.0, "avg_logprob": -0.16309567572365344, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.005639815703034401}, {"id": 65, "seek": 35872, "start": 358.72, "end": 365.36, "text": " So with Maveron, we deploy a control plane component, we call it the coordinator.", "tokens": [50364, 407, 365, 4042, 331, 266, 11, 321, 7274, 257, 1969, 5720, 6542, 11, 321, 818, 309, 264, 27394, 13, 50696], "temperature": 0.0, "avg_logprob": -0.15082351581470385, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.08626671880483627}, {"id": 66, "seek": 35872, "start": 365.36, "end": 370.8, "text": " So we deploy the coordinator that itself runs inside a secure enclave.", "tokens": [50696, 407, 321, 7274, 264, 27394, 300, 2564, 6676, 1854, 257, 7144, 2058, 27995, 13, 50968], "temperature": 0.0, "avg_logprob": -0.15082351581470385, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.08626671880483627}, {"id": 67, "seek": 35872, "start": 370.8, "end": 379.40000000000003, "text": " That means our DevOps team can first verify that coordinator and then they can provide", "tokens": [50968, 663, 1355, 527, 43051, 1469, 393, 700, 16888, 300, 27394, 293, 550, 436, 393, 2893, 51398], "temperature": 0.0, "avg_logprob": -0.15082351581470385, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.08626671880483627}, {"id": 68, "seek": 35872, "start": 379.40000000000003, "end": 387.16, "text": " or they provide the coordinator with a configuration, a deployment configuration we call the manifest", "tokens": [51398, 420, 436, 2893, 264, 27394, 365, 257, 11694, 11, 257, 19317, 11694, 321, 818, 264, 10067, 51786], "temperature": 0.0, "avg_logprob": -0.15082351581470385, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.08626671880483627}, {"id": 69, "seek": 38716, "start": 387.16, "end": 393.12, "text": " and that is similar to any other deployment configuration for Kubernetes.", "tokens": [50364, 293, 300, 307, 2531, 281, 604, 661, 19317, 11694, 337, 23145, 13, 50662], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 70, "seek": 38716, "start": 393.12, "end": 399.76000000000005, "text": " But we deploy it to a trusted controller that we verified beforehand.", "tokens": [50662, 583, 321, 7274, 309, 281, 257, 16034, 10561, 300, 321, 31197, 22893, 13, 50994], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 71, "seek": 38716, "start": 399.76000000000005, "end": 406.12, "text": " So I want to show a quick example of how such manifest could look like.", "tokens": [50994, 407, 286, 528, 281, 855, 257, 1702, 1365, 295, 577, 1270, 10067, 727, 574, 411, 13, 51312], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 72, "seek": 38716, "start": 406.12, "end": 408.36, "text": " You can see here it's JSON format.", "tokens": [51312, 509, 393, 536, 510, 309, 311, 31828, 7877, 13, 51424], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 73, "seek": 38716, "start": 408.36, "end": 411.24, "text": " The first thing we define here are packages.", "tokens": [51424, 440, 700, 551, 321, 6964, 510, 366, 17401, 13, 51568], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 74, "seek": 38716, "start": 411.24, "end": 414.16, "text": " Packages are essentially the enclaves.", "tokens": [51568, 18466, 1660, 366, 4476, 264, 20987, 5423, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16984858336272063, "compression_ratio": 1.4844444444444445, "no_speech_prob": 0.014949231408536434}, {"id": 75, "seek": 41416, "start": 414.16, "end": 417.52000000000004, "text": " This right here is specific to into SGX.", "tokens": [50364, 639, 558, 510, 307, 2685, 281, 666, 34520, 55, 13, 50532], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 76, "seek": 41416, "start": 417.52000000000004, "end": 422.16, "text": " We have the MR signer or here signer ID and so forth.", "tokens": [50532, 492, 362, 264, 9808, 1465, 260, 420, 510, 1465, 260, 7348, 293, 370, 5220, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 77, "seek": 41416, "start": 422.16, "end": 429.0, "text": " In the future, this will also support other types of CC hardware, for example, AMG, SCV", "tokens": [50764, 682, 264, 2027, 11, 341, 486, 611, 1406, 661, 3467, 295, 12630, 8837, 11, 337, 1365, 11, 6475, 38, 11, 9028, 53, 51106], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 78, "seek": 41416, "start": 429.0, "end": 431.08000000000004, "text": " and so forth.", "tokens": [51106, 293, 370, 5220, 13, 51210], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 79, "seek": 41416, "start": 431.08000000000004, "end": 437.12, "text": " But in this case, we have two SGX enclaves back and front end and they are identified", "tokens": [51210, 583, 294, 341, 1389, 11, 321, 362, 732, 34520, 55, 20987, 5423, 646, 293, 1868, 917, 293, 436, 366, 9234, 51512], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 80, "seek": 41416, "start": 437.12, "end": 441.8, "text": " with their unique signatures.", "tokens": [51512, 365, 641, 3845, 32322, 13, 51746], "temperature": 0.0, "avg_logprob": -0.3391948488023546, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.04955410584807396}, {"id": 81, "seek": 44180, "start": 441.8, "end": 445.76, "text": " And once we have these packages defined, think of them like you defined a container,", "tokens": [50364, 400, 1564, 321, 362, 613, 17401, 7642, 11, 519, 295, 552, 411, 291, 7642, 257, 10129, 11, 50562], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 82, "seek": 44180, "start": 445.76, "end": 448.24, "text": " a containerized enclave.", "tokens": [50562, 257, 10129, 1602, 2058, 27995, 13, 50686], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 83, "seek": 44180, "start": 448.24, "end": 451.16, "text": " We define the next section, which is our models.", "tokens": [50686, 492, 6964, 264, 958, 3541, 11, 597, 307, 527, 5245, 13, 50832], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 84, "seek": 44180, "start": 451.16, "end": 457.88, "text": " And models now consume such package or things like a Kubernetes pod consuming a container.", "tokens": [50832, 400, 5245, 586, 14732, 1270, 7372, 420, 721, 411, 257, 23145, 2497, 19867, 257, 10129, 13, 51168], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 85, "seek": 44180, "start": 457.88, "end": 464.6, "text": " In this case, it consumes the back end package and then we can define several parameters", "tokens": [51168, 682, 341, 1389, 11, 309, 48823, 264, 646, 917, 7372, 293, 550, 321, 393, 6964, 2940, 9834, 51504], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 86, "seek": 44180, "start": 464.6, "end": 471.2, "text": " like files that should be available to that marble or the environment variables that you", "tokens": [51504, 411, 7098, 300, 820, 312, 2435, 281, 300, 26844, 420, 264, 2823, 9102, 300, 291, 51834], "temperature": 0.0, "avg_logprob": -0.24051102002461752, "compression_ratio": 1.757201646090535, "no_speech_prob": 0.1275382936000824}, {"id": 87, "seek": 47120, "start": 471.2, "end": 476.2, "text": " want to have to find for that model and the arguments.", "tokens": [50364, 528, 281, 362, 281, 915, 337, 300, 2316, 293, 264, 12869, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2301997208013767, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.02367759682238102}, {"id": 88, "seek": 47120, "start": 476.2, "end": 481.68, "text": " And this is similar to any other Kubernetes deployment, but now, because it's the manifest,", "tokens": [50614, 400, 341, 307, 2531, 281, 604, 661, 23145, 19317, 11, 457, 586, 11, 570, 309, 311, 264, 10067, 11, 50888], "temperature": 0.0, "avg_logprob": -0.2301997208013767, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.02367759682238102}, {"id": 89, "seek": 47120, "start": 481.68, "end": 487.76, "text": " because you can verify it, the coordinator can enforce this configuration for your outplaves", "tokens": [50888, 570, 291, 393, 16888, 309, 11, 264, 27394, 393, 24825, 341, 11694, 337, 428, 484, 564, 5423, 51192], "temperature": 0.0, "avg_logprob": -0.2301997208013767, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.02367759682238102}, {"id": 90, "seek": 47120, "start": 487.76, "end": 492.52, "text": " and you can trust these configurations and that's the important point.", "tokens": [51192, 293, 291, 393, 3361, 613, 31493, 293, 300, 311, 264, 1021, 935, 13, 51430], "temperature": 0.0, "avg_logprob": -0.2301997208013767, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.02367759682238102}, {"id": 91, "seek": 47120, "start": 492.52, "end": 495.4, "text": " What we also have here is called roles.", "tokens": [51430, 708, 321, 611, 362, 510, 307, 1219, 9604, 13, 51574], "temperature": 0.0, "avg_logprob": -0.2301997208013767, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.02367759682238102}, {"id": 92, "seek": 49540, "start": 495.4, "end": 500.47999999999996, "text": " So this model is associated with two roles, third reader and key reader.", "tokens": [50364, 407, 341, 2316, 307, 6615, 365, 732, 9604, 11, 2636, 15149, 293, 2141, 15149, 13, 50618], "temperature": 0.0, "avg_logprob": -0.15522322287926307, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.008314262144267559}, {"id": 93, "seek": 49540, "start": 500.47999999999996, "end": 505.2, "text": " And Maveron implements a type of role-based access control.", "tokens": [50618, 400, 4042, 331, 266, 704, 17988, 257, 2010, 295, 3090, 12, 6032, 2105, 1969, 13, 50854], "temperature": 0.0, "avg_logprob": -0.15522322287926307, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.008314262144267559}, {"id": 94, "seek": 49540, "start": 505.2, "end": 511.79999999999995, "text": " So if I scroll down in this manifest, I will find a section that is called roles.", "tokens": [50854, 407, 498, 286, 11369, 760, 294, 341, 10067, 11, 286, 486, 915, 257, 3541, 300, 307, 1219, 9604, 13, 51184], "temperature": 0.0, "avg_logprob": -0.15522322287926307, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.008314262144267559}, {"id": 95, "seek": 49540, "start": 511.79999999999995, "end": 518.56, "text": " And here, similar to any other role-based system, every role is associated with a resource", "tokens": [51184, 400, 510, 11, 2531, 281, 604, 661, 3090, 12, 6032, 1185, 11, 633, 3090, 307, 6615, 365, 257, 7684, 51522], "temperature": 0.0, "avg_logprob": -0.15522322287926307, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.008314262144267559}, {"id": 96, "seek": 51856, "start": 518.56, "end": 525.68, "text": " and the specific instances of these resource and it defines what action that role can perform", "tokens": [50364, 293, 264, 2685, 14519, 295, 613, 7684, 293, 309, 23122, 437, 3069, 300, 3090, 393, 2042, 50720], "temperature": 0.0, "avg_logprob": -0.14748179040304044, "compression_ratio": 1.6965174129353233, "no_speech_prob": 0.08265853673219681}, {"id": 97, "seek": 51856, "start": 525.68, "end": 528.0799999999999, "text": " on the resource.", "tokens": [50720, 322, 264, 7684, 13, 50840], "temperature": 0.0, "avg_logprob": -0.14748179040304044, "compression_ratio": 1.6965174129353233, "no_speech_prob": 0.08265853673219681}, {"id": 98, "seek": 51856, "start": 528.0799999999999, "end": 532.04, "text": " And these roles, we can then use to attach them to marbles.", "tokens": [50840, 400, 613, 9604, 11, 321, 393, 550, 764, 281, 5085, 552, 281, 1849, 8806, 13, 51038], "temperature": 0.0, "avg_logprob": -0.14748179040304044, "compression_ratio": 1.6965174129353233, "no_speech_prob": 0.08265853673219681}, {"id": 99, "seek": 51856, "start": 532.04, "end": 540.04, "text": " So a model can do certain operations on resources and we also have users and users are authenticated", "tokens": [51038, 407, 257, 2316, 393, 360, 1629, 7705, 322, 3593, 293, 321, 611, 362, 5022, 293, 5022, 366, 9214, 3587, 51438], "temperature": 0.0, "avg_logprob": -0.14748179040304044, "compression_ratio": 1.6965174129353233, "no_speech_prob": 0.08265853673219681}, {"id": 100, "seek": 51856, "start": 540.04, "end": 546.52, "text": " using PKI and then they can do whatever their role allows them to do.", "tokens": [51438, 1228, 430, 27731, 293, 550, 436, 393, 360, 2035, 641, 3090, 4045, 552, 281, 360, 13, 51762], "temperature": 0.0, "avg_logprob": -0.14748179040304044, "compression_ratio": 1.6965174129353233, "no_speech_prob": 0.08265853673219681}, {"id": 101, "seek": 54652, "start": 546.52, "end": 551.0799999999999, "text": " One of the things, for example, would be to define a secret.", "tokens": [50364, 1485, 295, 264, 721, 11, 337, 1365, 11, 576, 312, 281, 6964, 257, 4054, 13, 50592], "temperature": 0.0, "avg_logprob": -0.16686615716843378, "compression_ratio": 1.9186602870813396, "no_speech_prob": 0.24767076969146729}, {"id": 102, "seek": 54652, "start": 551.0799999999999, "end": 559.0799999999999, "text": " And the secret could be, for example, a user-defined secret, for example, an API key.", "tokens": [50592, 400, 264, 4054, 727, 312, 11, 337, 1365, 11, 257, 4195, 12, 37716, 4054, 11, 337, 1365, 11, 364, 9362, 2141, 13, 50992], "temperature": 0.0, "avg_logprob": -0.16686615716843378, "compression_ratio": 1.9186602870813396, "no_speech_prob": 0.24767076969146729}, {"id": 103, "seek": 54652, "start": 559.0799999999999, "end": 563.4399999999999, "text": " And then we have a user, we have a role that allows them to update the API key.", "tokens": [50992, 400, 550, 321, 362, 257, 4195, 11, 321, 362, 257, 3090, 300, 4045, 552, 281, 5623, 264, 9362, 2141, 13, 51210], "temperature": 0.0, "avg_logprob": -0.16686615716843378, "compression_ratio": 1.9186602870813396, "no_speech_prob": 0.24767076969146729}, {"id": 104, "seek": 54652, "start": 563.4399999999999, "end": 568.28, "text": " And this would, for example, allow you to have a multi-tenant scenario where you have", "tokens": [51210, 400, 341, 576, 11, 337, 1365, 11, 2089, 291, 281, 362, 257, 4825, 12, 1147, 394, 9005, 689, 291, 362, 51452], "temperature": 0.0, "avg_logprob": -0.16686615716843378, "compression_ratio": 1.9186602870813396, "no_speech_prob": 0.24767076969146729}, {"id": 105, "seek": 54652, "start": 568.28, "end": 576.12, "text": " the DevOps team that deploys this application and you have another team that is managing", "tokens": [51452, 264, 43051, 1469, 300, 368, 49522, 341, 3861, 293, 291, 362, 1071, 1469, 300, 307, 11642, 51844], "temperature": 0.0, "avg_logprob": -0.16686615716843378, "compression_ratio": 1.9186602870813396, "no_speech_prob": 0.24767076969146729}, {"id": 106, "seek": 57612, "start": 576.12, "end": 583.92, "text": " another service or access to something and that provides a key or an API key into that", "tokens": [50364, 1071, 2643, 420, 2105, 281, 746, 293, 300, 6417, 257, 2141, 420, 364, 9362, 2141, 666, 300, 50754], "temperature": 0.0, "avg_logprob": -0.15664179701554148, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.005058614071458578}, {"id": 107, "seek": 57612, "start": 583.92, "end": 585.44, "text": " application.", "tokens": [50754, 3861, 13, 50830], "temperature": 0.0, "avg_logprob": -0.15664179701554148, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.005058614071458578}, {"id": 108, "seek": 57612, "start": 585.44, "end": 591.48, "text": " And using the role-based access control, they can deploy that or set that specific secret", "tokens": [50830, 400, 1228, 264, 3090, 12, 6032, 2105, 1969, 11, 436, 393, 7274, 300, 420, 992, 300, 2685, 4054, 51132], "temperature": 0.0, "avg_logprob": -0.15664179701554148, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.005058614071458578}, {"id": 109, "seek": 57612, "start": 591.48, "end": 595.8, "text": " after the manifest has been put in place.", "tokens": [51132, 934, 264, 10067, 575, 668, 829, 294, 1081, 13, 51348], "temperature": 0.0, "avg_logprob": -0.15664179701554148, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.005058614071458578}, {"id": 110, "seek": 57612, "start": 595.8, "end": 602.64, "text": " So this key is then uploaded, is managed by the coordinator which is trusted and is from", "tokens": [51348, 407, 341, 2141, 307, 550, 17135, 11, 307, 6453, 538, 264, 27394, 597, 307, 16034, 293, 307, 490, 51690], "temperature": 0.0, "avg_logprob": -0.15664179701554148, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.005058614071458578}, {"id": 111, "seek": 60264, "start": 602.64, "end": 606.68, "text": " there distributed to your services to your marbles.", "tokens": [50364, 456, 12631, 281, 428, 3328, 281, 428, 1849, 8806, 13, 50566], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 112, "seek": 60264, "start": 606.68, "end": 609.96, "text": " And that means the DevOps team can never access a secret.", "tokens": [50566, 400, 300, 1355, 264, 43051, 1469, 393, 1128, 2105, 257, 4054, 13, 50730], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 113, "seek": 60264, "start": 609.96, "end": 611.68, "text": " So you have a split of trust.", "tokens": [50730, 407, 291, 362, 257, 7472, 295, 3361, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 114, "seek": 60264, "start": 611.68, "end": 618.3199999999999, "text": " You have the owners of that secret that will always stay in control and you have the DevOps", "tokens": [50816, 509, 362, 264, 7710, 295, 300, 4054, 300, 486, 1009, 1754, 294, 1969, 293, 291, 362, 264, 43051, 51148], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 115, "seek": 60264, "start": 618.3199999999999, "end": 623.24, "text": " team and they can engage in a multi-tenant scenario.", "tokens": [51148, 1469, 293, 436, 393, 4683, 294, 257, 4825, 12, 1147, 394, 9005, 13, 51394], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 116, "seek": 60264, "start": 623.24, "end": 628.8, "text": " So we now have seen the manifest, we have seen the packages, the marbles, the role-based", "tokens": [51394, 407, 321, 586, 362, 1612, 264, 10067, 11, 321, 362, 1612, 264, 17401, 11, 264, 1849, 8806, 11, 264, 3090, 12, 6032, 51672], "temperature": 0.0, "avg_logprob": -0.15460394829818883, "compression_ratio": 1.7268518518518519, "no_speech_prob": 0.013845257461071014}, {"id": 117, "seek": 62880, "start": 628.8, "end": 634.76, "text": " access control and resources such as secrets.", "tokens": [50364, 2105, 1969, 293, 3593, 1270, 382, 14093, 13, 50662], "temperature": 0.0, "avg_logprob": -0.1478865448857697, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.030664023011922836}, {"id": 118, "seek": 62880, "start": 634.76, "end": 639.52, "text": " So we go back to our example.", "tokens": [50662, 407, 321, 352, 646, 281, 527, 1365, 13, 50900], "temperature": 0.0, "avg_logprob": -0.1478865448857697, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.030664023011922836}, {"id": 119, "seek": 62880, "start": 639.52, "end": 646.24, "text": " After setting the manifest, the coordinator will then take care of providing those credentials", "tokens": [50900, 2381, 3287, 264, 10067, 11, 264, 27394, 486, 550, 747, 1127, 295, 6530, 729, 27404, 51236], "temperature": 0.0, "avg_logprob": -0.1478865448857697, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.030664023011922836}, {"id": 120, "seek": 62880, "start": 646.24, "end": 651.5999999999999, "text": " or secrets or configurations to your marbles to your services.", "tokens": [51236, 420, 14093, 420, 31493, 281, 428, 1849, 8806, 281, 428, 3328, 13, 51504], "temperature": 0.0, "avg_logprob": -0.1478865448857697, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.030664023011922836}, {"id": 121, "seek": 62880, "start": 651.5999999999999, "end": 655.88, "text": " So once you deploy them using regular Kubernetes means of deploying the application, they will", "tokens": [51504, 407, 1564, 291, 7274, 552, 1228, 3890, 23145, 1355, 295, 34198, 264, 3861, 11, 436, 486, 51718], "temperature": 0.0, "avg_logprob": -0.1478865448857697, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.030664023011922836}, {"id": 122, "seek": 65588, "start": 655.88, "end": 661.6, "text": " come up, they will be authenticated by the Marble Run coordinator and then receive their", "tokens": [50364, 808, 493, 11, 436, 486, 312, 9214, 3587, 538, 264, 2039, 638, 8950, 27394, 293, 550, 4774, 641, 50650], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 123, "seek": 65588, "start": 661.6, "end": 664.28, "text": " parameters, their credentials.", "tokens": [50650, 9834, 11, 641, 27404, 13, 50784], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 124, "seek": 65588, "start": 664.28, "end": 669.0, "text": " Part of these credentials are TLS certificates.", "tokens": [50784, 4100, 295, 613, 27404, 366, 314, 19198, 32941, 13, 51020], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 125, "seek": 65588, "start": 669.0, "end": 676.68, "text": " So every service has a unique leave TLS certificate which goes up to a root certificate that is", "tokens": [51020, 407, 633, 2643, 575, 257, 3845, 1856, 314, 19198, 15953, 597, 1709, 493, 281, 257, 5593, 15953, 300, 307, 51404], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 126, "seek": 65588, "start": 676.68, "end": 680.36, "text": " established by Marble Run as a PKI infrastructure.", "tokens": [51404, 7545, 538, 2039, 638, 8950, 382, 257, 430, 27731, 6896, 13, 51588], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 127, "seek": 65588, "start": 680.36, "end": 684.96, "text": " So there's for every deployment, you have one root certificate.", "tokens": [51588, 407, 456, 311, 337, 633, 19317, 11, 291, 362, 472, 5593, 15953, 13, 51818], "temperature": 0.0, "avg_logprob": -0.2045139998532413, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.04143254831433296}, {"id": 128, "seek": 68496, "start": 685.6800000000001, "end": 690.52, "text": " Those can then be used to establish secure connections between the services.", "tokens": [50400, 3950, 393, 550, 312, 1143, 281, 8327, 7144, 9271, 1296, 264, 3328, 13, 50642], "temperature": 0.0, "avg_logprob": -0.1690425429233285, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.023320551961660385}, {"id": 129, "seek": 68496, "start": 690.52, "end": 695.5600000000001, "text": " For certain runtime environments such as EGO, this can be done automatically in a neutral", "tokens": [50642, 1171, 1629, 34474, 12388, 1270, 382, 462, 11601, 11, 341, 393, 312, 1096, 6772, 294, 257, 10598, 50894], "temperature": 0.0, "avg_logprob": -0.1690425429233285, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.023320551961660385}, {"id": 130, "seek": 68496, "start": 695.5600000000001, "end": 701.08, "text": " TLS fashion if you're familiar with service mesh kind of things, you might be familiar", "tokens": [50894, 314, 19198, 6700, 498, 291, 434, 4963, 365, 2643, 17407, 733, 295, 721, 11, 291, 1062, 312, 4963, 51170], "temperature": 0.0, "avg_logprob": -0.1690425429233285, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.023320551961660385}, {"id": 131, "seek": 68496, "start": 701.08, "end": 705.32, "text": " with that term, but essentially it means you will wrap every TCP connection between your", "tokens": [51170, 365, 300, 1433, 11, 457, 4476, 309, 1355, 291, 486, 7019, 633, 48965, 4984, 1296, 428, 51382], "temperature": 0.0, "avg_logprob": -0.1690425429233285, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.023320551961660385}, {"id": 132, "seek": 68496, "start": 705.32, "end": 711.5600000000001, "text": " services automatically into TLS so they are secured.", "tokens": [51382, 3328, 6772, 666, 314, 19198, 370, 436, 366, 22905, 13, 51694], "temperature": 0.0, "avg_logprob": -0.1690425429233285, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.023320551961660385}, {"id": 133, "seek": 71156, "start": 711.56, "end": 717.5999999999999, "text": " For other types of runtime environments or if they're specific need, you can also consume", "tokens": [50364, 1171, 661, 3467, 295, 34474, 12388, 420, 498, 436, 434, 2685, 643, 11, 291, 393, 611, 14732, 50666], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 134, "seek": 71156, "start": 717.5999999999999, "end": 720.28, "text": " those credentials using the Marble Run manifest.", "tokens": [50666, 729, 27404, 1228, 264, 2039, 638, 8950, 10067, 13, 50800], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 135, "seek": 71156, "start": 720.28, "end": 724.64, "text": " You can place them into files, you can place them into the environment and then your application", "tokens": [50800, 509, 393, 1081, 552, 666, 7098, 11, 291, 393, 1081, 552, 666, 264, 2823, 293, 550, 428, 3861, 51018], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 136, "seek": 71156, "start": 724.64, "end": 728.56, "text": " can take them from there and use them to establish secure connections.", "tokens": [51018, 393, 747, 552, 490, 456, 293, 764, 552, 281, 8327, 7144, 9271, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 137, "seek": 71156, "start": 728.56, "end": 732.2399999999999, "text": " That's very similar to how you would operate with like CertManager or other certificate", "tokens": [51214, 663, 311, 588, 2531, 281, 577, 291, 576, 9651, 365, 411, 31036, 6652, 3557, 420, 661, 15953, 51398], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 138, "seek": 71156, "start": 732.2399999999999, "end": 734.76, "text": " management systems for Kubernetes.", "tokens": [51398, 4592, 3652, 337, 23145, 13, 51524], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 139, "seek": 71156, "start": 734.76, "end": 740.68, "text": " The difference being that those certificates are only available inside that secure confidential", "tokens": [51524, 440, 2649, 885, 300, 729, 32941, 366, 787, 2435, 1854, 300, 7144, 27054, 51820], "temperature": 0.0, "avg_logprob": -0.1497266380875199, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.06095445901155472}, {"id": 140, "seek": 74068, "start": 740.68, "end": 745.5999999999999, "text": " environment, inside your secure confidential deployment, that means the coordinator and", "tokens": [50364, 2823, 11, 1854, 428, 7144, 27054, 19317, 11, 300, 1355, 264, 27394, 293, 50610], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 141, "seek": 74068, "start": 745.5999999999999, "end": 749.1999999999999, "text": " then your services.", "tokens": [50610, 550, 428, 3328, 13, 50790], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 142, "seek": 74068, "start": 749.1999999999999, "end": 755.52, "text": " So now what we have is we have our running deployment, everything is connected, they", "tokens": [50790, 407, 586, 437, 321, 362, 307, 321, 362, 527, 2614, 19317, 11, 1203, 307, 4582, 11, 436, 51106], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 143, "seek": 74068, "start": 755.52, "end": 757.3199999999999, "text": " can communicate with each other.", "tokens": [51106, 393, 7890, 365, 1184, 661, 13, 51196], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 144, "seek": 74068, "start": 757.3199999999999, "end": 763.3599999999999, "text": " So in the last step now an outside party can connect to the coordinator again, can obtain", "tokens": [51196, 407, 294, 264, 1036, 1823, 586, 364, 2380, 3595, 393, 1745, 281, 264, 27394, 797, 11, 393, 12701, 51498], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 145, "seek": 74068, "start": 763.3599999999999, "end": 768.16, "text": " its attestation statement that contains the Marble Run manifest so they can verify that", "tokens": [51498, 1080, 951, 377, 399, 5629, 300, 8306, 264, 2039, 638, 8950, 10067, 370, 436, 393, 16888, 300, 51738], "temperature": 0.0, "avg_logprob": -0.1792247107859408, "compression_ratio": 1.791111111111111, "no_speech_prob": 0.002396348863840103}, {"id": 146, "seek": 76816, "start": 768.16, "end": 773.7199999999999, "text": " indeed a valid Marble Run coordinator, they can verify that indeed the deployment, the", "tokens": [50364, 6451, 257, 7363, 2039, 638, 8950, 27394, 11, 436, 393, 16888, 300, 6451, 264, 19317, 11, 264, 50642], "temperature": 0.0, "avg_logprob": -0.1774712847424792, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.12926626205444336}, {"id": 147, "seek": 76816, "start": 773.7199999999999, "end": 779.36, "text": " manifest they expect it to be in place there and they will obtain the root certificate", "tokens": [50642, 10067, 436, 2066, 309, 281, 312, 294, 1081, 456, 293, 436, 486, 12701, 264, 5593, 15953, 50924], "temperature": 0.0, "avg_logprob": -0.1774712847424792, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.12926626205444336}, {"id": 148, "seek": 76816, "start": 779.36, "end": 786.8, "text": " from this deployment and after verifying that they can use the root certificate to authenticate", "tokens": [50924, 490, 341, 19317, 293, 934, 1306, 5489, 300, 436, 393, 764, 264, 5593, 15953, 281, 9214, 8700, 51296], "temperature": 0.0, "avg_logprob": -0.1774712847424792, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.12926626205444336}, {"id": 149, "seek": 76816, "start": 786.8, "end": 793.56, "text": " to their deployment, in this case the front end of the AI pipeline that consumes the", "tokens": [51296, 281, 641, 19317, 11, 294, 341, 1389, 264, 1868, 917, 295, 264, 7318, 15517, 300, 48823, 264, 51634], "temperature": 0.0, "avg_logprob": -0.1774712847424792, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.12926626205444336}, {"id": 150, "seek": 79356, "start": 793.56, "end": 798.04, "text": " video stream from the cars and transitively because they verify the coordinator, they", "tokens": [50364, 960, 4309, 490, 264, 5163, 293, 17976, 3413, 570, 436, 16888, 264, 27394, 11, 436, 50588], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 151, "seek": 79356, "start": 798.04, "end": 805.8399999999999, "text": " verify the manifest, they verified the entire deployment in one concise simple step.", "tokens": [50588, 16888, 264, 10067, 11, 436, 31197, 264, 2302, 19317, 294, 472, 44882, 2199, 1823, 13, 50978], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 152, "seek": 79356, "start": 805.8399999999999, "end": 806.8399999999999, "text": " And that's it.", "tokens": [50978, 400, 300, 311, 309, 13, 51028], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 153, "seek": 79356, "start": 806.8399999999999, "end": 812.8399999999999, "text": " Now we have all of those problems I showed you earlier, we have them solved, we can manage", "tokens": [51028, 823, 321, 362, 439, 295, 729, 2740, 286, 4712, 291, 3071, 11, 321, 362, 552, 13041, 11, 321, 393, 3067, 51328], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 154, "seek": 79356, "start": 812.8399999999999, "end": 817.4, "text": " and orchestrate that deployment from the DevOps team side, we can communicate with", "tokens": [51328, 293, 14161, 4404, 300, 19317, 490, 264, 43051, 1469, 1252, 11, 321, 393, 7890, 365, 51556], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 155, "seek": 79356, "start": 817.4, "end": 823.28, "text": " that deployment from the car fleet and potentially any other third party or legislator or regulator", "tokens": [51556, 300, 19317, 490, 264, 1032, 19396, 293, 7263, 604, 661, 2636, 3595, 420, 6593, 1639, 420, 36250, 51850], "temperature": 0.0, "avg_logprob": -0.18778085236502165, "compression_ratio": 1.8, "no_speech_prob": 0.3846381902694702}, {"id": 156, "seek": 82328, "start": 823.28, "end": 829.4, "text": " can verify this deployment as well using the same type of mechanism.", "tokens": [50364, 393, 16888, 341, 19317, 382, 731, 1228, 264, 912, 2010, 295, 7513, 13, 50670], "temperature": 0.0, "avg_logprob": -0.18833010056439567, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.0345725379884243}, {"id": 157, "seek": 82328, "start": 829.4, "end": 831.8399999999999, "text": " So in summary, what does Marble Run do?", "tokens": [50670, 407, 294, 12691, 11, 437, 775, 2039, 638, 8950, 360, 30, 50792], "temperature": 0.0, "avg_logprob": -0.18833010056439567, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.0345725379884243}, {"id": 158, "seek": 82328, "start": 831.8399999999999, "end": 839.24, "text": " It adds a orchestratability, a configurability, a manageability to your confidential deployments,", "tokens": [50792, 467, 10860, 257, 14161, 4481, 2310, 11, 257, 22192, 2310, 11, 257, 3067, 2310, 281, 428, 27054, 7274, 1117, 11, 51162], "temperature": 0.0, "avg_logprob": -0.18833010056439567, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.0345725379884243}, {"id": 159, "seek": 82328, "start": 839.24, "end": 844.16, "text": " make some scalable, make them updatable, make them manageable.", "tokens": [51162, 652, 512, 38481, 11, 652, 552, 3460, 31415, 11, 652, 552, 38798, 13, 51408], "temperature": 0.0, "avg_logprob": -0.18833010056439567, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.0345725379884243}, {"id": 160, "seek": 82328, "start": 844.16, "end": 851.56, "text": " It can run standalone but it runs best on Kubernetes and the usual cloud environments.", "tokens": [51408, 467, 393, 1190, 37454, 457, 309, 6676, 1151, 322, 23145, 293, 264, 7713, 4588, 12388, 13, 51778], "temperature": 0.0, "avg_logprob": -0.18833010056439567, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.0345725379884243}, {"id": 161, "seek": 85156, "start": 852.56, "end": 858.0, "text": " It supports several runtimes so far it's SGX specific, so for example Ego, Graphene,", "tokens": [50414, 467, 9346, 2940, 49435, 1532, 370, 1400, 309, 311, 34520, 55, 2685, 11, 370, 337, 1365, 462, 1571, 11, 21884, 1450, 11, 50686], "temperature": 0.0, "avg_logprob": -0.34874919969208384, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.310056209564209}, {"id": 162, "seek": 85156, "start": 858.0, "end": 865.4399999999999, "text": " Ocklum and the future, we plan to also support other types of confidential computing runtimes", "tokens": [50686, 422, 547, 75, 449, 293, 264, 2027, 11, 321, 1393, 281, 611, 1406, 661, 3467, 295, 27054, 15866, 49435, 1532, 51058], "temperature": 0.0, "avg_logprob": -0.34874919969208384, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.310056209564209}, {"id": 163, "seek": 85156, "start": 865.4399999999999, "end": 871.8399999999999, "text": " like AMD, SAP, Intel, TDAX, most likely based on the confidential containers project.", "tokens": [51058, 411, 34808, 11, 27743, 11, 19762, 11, 314, 7509, 55, 11, 881, 3700, 2361, 322, 264, 27054, 17089, 1716, 13, 51378], "temperature": 0.0, "avg_logprob": -0.34874919969208384, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.310056209564209}, {"id": 164, "seek": 85156, "start": 871.8399999999999, "end": 877.28, "text": " Okay, now we have a little bit of time left to look at a demo.", "tokens": [51378, 1033, 11, 586, 321, 362, 257, 707, 857, 295, 565, 1411, 281, 574, 412, 257, 10723, 13, 51650], "temperature": 0.0, "avg_logprob": -0.34874919969208384, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.310056209564209}, {"id": 165, "seek": 85156, "start": 877.28, "end": 880.68, "text": " Let me switch to my console.", "tokens": [51650, 961, 385, 3679, 281, 452, 11076, 13, 51820], "temperature": 0.0, "avg_logprob": -0.34874919969208384, "compression_ratio": 1.4833333333333334, "no_speech_prob": 0.310056209564209}, {"id": 166, "seek": 88068, "start": 880.68, "end": 886.7199999999999, "text": " I have a Kubernetes cluster running here on Microsoft Azure with two nodes that are both", "tokens": [50364, 286, 362, 257, 23145, 13630, 2614, 510, 322, 8116, 11969, 365, 732, 13891, 300, 366, 1293, 50666], "temperature": 0.0, "avg_logprob": -0.1422816514968872, "compression_ratio": 1.5024630541871922, "no_speech_prob": 0.00031501613557338715}, {"id": 167, "seek": 88068, "start": 886.7199999999999, "end": 897.56, "text": " equipped with SGX capabilities and we will now install Marble Run, set the manifest and", "tokens": [50666, 15218, 365, 34520, 55, 10862, 293, 321, 486, 586, 3625, 2039, 638, 8950, 11, 992, 264, 10067, 293, 51208], "temperature": 0.0, "avg_logprob": -0.1422816514968872, "compression_ratio": 1.5024630541871922, "no_speech_prob": 0.00031501613557338715}, {"id": 168, "seek": 88068, "start": 897.56, "end": 899.3199999999999, "text": " deploy a simple demo application.", "tokens": [51208, 7274, 257, 2199, 10723, 3861, 13, 51296], "temperature": 0.0, "avg_logprob": -0.1422816514968872, "compression_ratio": 1.5024630541871922, "no_speech_prob": 0.00031501613557338715}, {"id": 169, "seek": 88068, "start": 899.3199999999999, "end": 907.4799999999999, "text": " So we use the Marble Run CLI tool that you can use to interact with the Marble Run coordinator", "tokens": [51296, 407, 321, 764, 264, 2039, 638, 8950, 12855, 40, 2290, 300, 291, 393, 764, 281, 4648, 365, 264, 2039, 638, 8950, 27394, 51704], "temperature": 0.0, "avg_logprob": -0.1422816514968872, "compression_ratio": 1.5024630541871922, "no_speech_prob": 0.00031501613557338715}, {"id": 170, "seek": 90748, "start": 907.48, "end": 909.9200000000001, "text": " and perform your usual DevOps tasks.", "tokens": [50364, 293, 2042, 428, 7713, 43051, 9608, 13, 50486], "temperature": 0.0, "avg_logprob": -0.22249945788316325, "compression_ratio": 1.5, "no_speech_prob": 0.005384038668125868}, {"id": 171, "seek": 90748, "start": 909.9200000000001, "end": 919.8000000000001, "text": " So Marble Run will make sure to install the Microsoft coordinator that just should take", "tokens": [50486, 407, 2039, 638, 8950, 486, 652, 988, 281, 3625, 264, 8116, 27394, 300, 445, 820, 747, 50980], "temperature": 0.0, "avg_logprob": -0.22249945788316325, "compression_ratio": 1.5, "no_speech_prob": 0.005384038668125868}, {"id": 172, "seek": 90748, "start": 919.8000000000001, "end": 927.9200000000001, "text": " a second for everything to be set up and then we can port forward the client API to local", "tokens": [50980, 257, 1150, 337, 1203, 281, 312, 992, 493, 293, 550, 321, 393, 2436, 2128, 264, 6423, 9362, 281, 2654, 51386], "temperature": 0.0, "avg_logprob": -0.22249945788316325, "compression_ratio": 1.5, "no_speech_prob": 0.005384038668125868}, {"id": 173, "seek": 90748, "start": 927.9200000000001, "end": 936.16, "text": " hosts so we can interact with the coordinator and this should be, if you're in a production", "tokens": [51386, 21573, 370, 321, 393, 4648, 365, 264, 27394, 293, 341, 820, 312, 11, 498, 291, 434, 294, 257, 4265, 51798], "temperature": 0.0, "avg_logprob": -0.22249945788316325, "compression_ratio": 1.5, "no_speech_prob": 0.005384038668125868}, {"id": 174, "seek": 93616, "start": 936.16, "end": 941.9599999999999, "text": " environment, you can of course also use an external open server or any other way of exporting", "tokens": [50364, 2823, 11, 291, 393, 295, 1164, 611, 764, 364, 8320, 1269, 7154, 420, 604, 661, 636, 295, 44686, 50654], "temperature": 0.0, "avg_logprob": -0.20423790504192485, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.1776384562253952}, {"id": 175, "seek": 93616, "start": 941.9599999999999, "end": 946.4399999999999, "text": " that service to any kind of environment you want to.", "tokens": [50654, 300, 2643, 281, 604, 733, 295, 2823, 291, 528, 281, 13, 50878], "temperature": 0.0, "avg_logprob": -0.20423790504192485, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.1776384562253952}, {"id": 176, "seek": 93616, "start": 946.4399999999999, "end": 956.9599999999999, "text": " You just need to wait a second for the coordinator to be up and running and then I can use this", "tokens": [50878, 509, 445, 643, 281, 1699, 257, 1150, 337, 264, 27394, 281, 312, 493, 293, 2614, 293, 550, 286, 393, 764, 341, 51404], "temperature": 0.0, "avg_logprob": -0.20423790504192485, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.1776384562253952}, {"id": 177, "seek": 93616, "start": 956.9599999999999, "end": 959.68, "text": " client API from here.", "tokens": [51404, 6423, 9362, 490, 510, 13, 51540], "temperature": 0.0, "avg_logprob": -0.20423790504192485, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.1776384562253952}, {"id": 178, "seek": 93616, "start": 959.68, "end": 966.0799999999999, "text": " And the second step would be then to verify the coordinators in DDA valid Marble Run coordinator", "tokens": [51540, 400, 264, 1150, 1823, 576, 312, 550, 281, 16888, 264, 8285, 3391, 294, 413, 7509, 7363, 2039, 638, 8950, 27394, 51860], "temperature": 0.0, "avg_logprob": -0.20423790504192485, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.1776384562253952}, {"id": 179, "seek": 96608, "start": 966.08, "end": 972.88, "text": " with the correct enclave, you can use any type of command that will automatically do", "tokens": [50364, 365, 264, 3006, 2058, 27995, 11, 291, 393, 764, 604, 2010, 295, 5622, 300, 486, 6772, 360, 50704], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 180, "seek": 96608, "start": 972.88, "end": 979.84, "text": " this verification and in this case we want to obtain the root certificate of this Marble", "tokens": [50704, 341, 30206, 293, 294, 341, 1389, 321, 528, 281, 12701, 264, 5593, 15953, 295, 341, 2039, 638, 51052], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 181, "seek": 96608, "start": 979.84, "end": 981.2, "text": " Run deployment here.", "tokens": [51052, 8950, 19317, 510, 13, 51120], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 182, "seek": 96608, "start": 981.2, "end": 986.84, "text": " This would also be what an external party like a Carfleet can do to obtain a root certificate", "tokens": [51120, 639, 576, 611, 312, 437, 364, 8320, 3595, 411, 257, 2741, 38921, 302, 393, 360, 281, 12701, 257, 5593, 15953, 51402], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 183, "seek": 96608, "start": 986.84, "end": 991.1600000000001, "text": " and then connect to the application, of course you can always do that ahead of time and then", "tokens": [51402, 293, 550, 1745, 281, 264, 3861, 11, 295, 1164, 291, 393, 1009, 360, 300, 2286, 295, 565, 293, 550, 51618], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 184, "seek": 96608, "start": 991.1600000000001, "end": 995.0400000000001, "text": " just distribute that certificate as the root of trust.", "tokens": [51618, 445, 20594, 300, 15953, 382, 264, 5593, 295, 3361, 13, 51812], "temperature": 0.0, "avg_logprob": -0.16104588650240756, "compression_ratio": 1.779591836734694, "no_speech_prob": 0.030657745897769928}, {"id": 185, "seek": 99504, "start": 995.04, "end": 1004.28, "text": " But once we trust the coordinator, which is just a plain constellation coordinator,", "tokens": [50364, 583, 1564, 321, 3361, 264, 27394, 11, 597, 307, 445, 257, 11121, 42336, 27394, 11, 50826], "temperature": 0.0, "avg_logprob": -0.22037282402132763, "compression_ratio": 1.75, "no_speech_prob": 0.11119068413972855}, {"id": 186, "seek": 99504, "start": 1004.28, "end": 1015.92, "text": " we can do Marble Run check providing the Marble Run, oh sorry it's not check, it's status.", "tokens": [50826, 321, 393, 360, 2039, 638, 8950, 1520, 6530, 264, 2039, 638, 8950, 11, 1954, 2597, 309, 311, 406, 1520, 11, 309, 311, 6558, 13, 51408], "temperature": 0.0, "avg_logprob": -0.22037282402132763, "compression_ratio": 1.75, "no_speech_prob": 0.11119068413972855}, {"id": 187, "seek": 99504, "start": 1015.92, "end": 1020.76, "text": " We can use Marble Run status to see what status the Marble Run coordinator is in, in this", "tokens": [51408, 492, 393, 764, 2039, 638, 8950, 6558, 281, 536, 437, 6558, 264, 2039, 638, 8950, 27394, 307, 294, 11, 294, 341, 51650], "temperature": 0.0, "avg_logprob": -0.22037282402132763, "compression_ratio": 1.75, "no_speech_prob": 0.11119068413972855}, {"id": 188, "seek": 99504, "start": 1020.76, "end": 1024.1599999999999, "text": " case it's waiting for a manifest to be set.", "tokens": [51650, 1389, 309, 311, 3806, 337, 257, 10067, 281, 312, 992, 13, 51820], "temperature": 0.0, "avg_logprob": -0.22037282402132763, "compression_ratio": 1.75, "no_speech_prob": 0.11119068413972855}, {"id": 189, "seek": 102416, "start": 1024.6000000000001, "end": 1030.24, "text": " Now we can set the manifest, I have one prepared here.", "tokens": [50386, 823, 321, 393, 992, 264, 10067, 11, 286, 362, 472, 4927, 510, 13, 50668], "temperature": 0.0, "avg_logprob": -0.21539441158897, "compression_ratio": 1.6991150442477876, "no_speech_prob": 0.033564623445272446}, {"id": 190, "seek": 102416, "start": 1030.24, "end": 1036.1200000000001, "text": " It's a very simple application, just having three packages, microservice, demo application,", "tokens": [50668, 467, 311, 257, 588, 2199, 3861, 11, 445, 1419, 1045, 17401, 11, 15547, 25006, 11, 10723, 3861, 11, 50962], "temperature": 0.0, "avg_logprob": -0.21539441158897, "compression_ratio": 1.6991150442477876, "no_speech_prob": 0.033564623445272446}, {"id": 191, "seek": 102416, "start": 1036.1200000000001, "end": 1042.3600000000001, "text": " one front end, two back end services, so three packages, also three marbles for these packages", "tokens": [50962, 472, 1868, 917, 11, 732, 646, 917, 3328, 11, 370, 1045, 17401, 11, 611, 1045, 1849, 8806, 337, 613, 17401, 51274], "temperature": 0.0, "avg_logprob": -0.21539441158897, "compression_ratio": 1.6991150442477876, "no_speech_prob": 0.033564623445272446}, {"id": 192, "seek": 102416, "start": 1042.3600000000001, "end": 1048.64, "text": " and they build up such demo, emoji, voting service.", "tokens": [51274, 293, 436, 1322, 493, 1270, 10723, 11, 31595, 11, 10419, 2643, 13, 51588], "temperature": 0.0, "avg_logprob": -0.21539441158897, "compression_ratio": 1.6991150442477876, "no_speech_prob": 0.033564623445272446}, {"id": 193, "seek": 102416, "start": 1048.64, "end": 1052.24, "text": " We have already seen the manifest, I'm not going to go into the detail again but of course", "tokens": [51588, 492, 362, 1217, 1612, 264, 10067, 11, 286, 478, 406, 516, 281, 352, 666, 264, 2607, 797, 457, 295, 1164, 51768], "temperature": 0.0, "avg_logprob": -0.21539441158897, "compression_ratio": 1.6991150442477876, "no_speech_prob": 0.033564623445272446}, {"id": 194, "seek": 105224, "start": 1052.24, "end": 1057.2, "text": " also this is in GitHub so you can have a look at it if you want to.", "tokens": [50364, 611, 341, 307, 294, 23331, 370, 291, 393, 362, 257, 574, 412, 309, 498, 291, 528, 281, 13, 50612], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 195, "seek": 105224, "start": 1057.2, "end": 1063.76, "text": " And then we can just set this manifest using Marble Run manifest set and it will upload", "tokens": [50612, 400, 550, 321, 393, 445, 992, 341, 10067, 1228, 2039, 638, 8950, 10067, 992, 293, 309, 486, 6580, 50940], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 196, "seek": 105224, "start": 1063.76, "end": 1070.76, "text": " the manifest and now the Marble Run coordinator should be in the state of being ready to accept", "tokens": [50940, 264, 10067, 293, 586, 264, 2039, 638, 8950, 27394, 820, 312, 294, 264, 1785, 295, 885, 1919, 281, 3241, 51290], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 197, "seek": 105224, "start": 1070.76, "end": 1073.56, "text": " and authenticate marbles.", "tokens": [51290, 293, 9214, 8700, 1849, 8806, 13, 51430], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 198, "seek": 105224, "start": 1073.56, "end": 1078.28, "text": " So now we can just go ahead and deploy our application and this is just regular Kubernetes", "tokens": [51430, 407, 586, 321, 393, 445, 352, 2286, 293, 7274, 527, 3861, 293, 341, 307, 445, 3890, 23145, 51666], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 199, "seek": 105224, "start": 1078.28, "end": 1079.88, "text": " application deployments.", "tokens": [51666, 3861, 7274, 1117, 13, 51746], "temperature": 0.0, "avg_logprob": -0.13817516962687174, "compression_ratio": 1.7702702702702702, "no_speech_prob": 0.00453796423971653}, {"id": 200, "seek": 107988, "start": 1079.88, "end": 1087.16, "text": " So in this case we're using Helm for this emoji voter demo application, it will install", "tokens": [50364, 407, 294, 341, 1389, 321, 434, 1228, 6128, 76, 337, 341, 31595, 21722, 10723, 3861, 11, 309, 486, 3625, 50728], "temperature": 0.0, "avg_logprob": -0.1708845534881988, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0005112202488817275}, {"id": 201, "seek": 107988, "start": 1087.16, "end": 1094.8000000000002, "text": " those three services and make sure that they are continuously running.", "tokens": [50728, 729, 1045, 3328, 293, 652, 988, 300, 436, 366, 15684, 2614, 13, 51110], "temperature": 0.0, "avg_logprob": -0.1708845534881988, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0005112202488817275}, {"id": 202, "seek": 107988, "start": 1094.8000000000002, "end": 1100.96, "text": " And we can now check Marble Run and see those authentication requests where those marbles", "tokens": [51110, 400, 321, 393, 586, 1520, 2039, 638, 8950, 293, 536, 729, 26643, 12475, 689, 729, 1849, 8806, 51418], "temperature": 0.0, "avg_logprob": -0.1708845534881988, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0005112202488817275}, {"id": 203, "seek": 107988, "start": 1100.96, "end": 1106.3600000000001, "text": " for example the web front end or one of those two back end services will contact the coordinator,", "tokens": [51418, 337, 1365, 264, 3670, 1868, 917, 420, 472, 295, 729, 732, 646, 917, 3328, 486, 3385, 264, 27394, 11, 51688], "temperature": 0.0, "avg_logprob": -0.1708845534881988, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0005112202488817275}, {"id": 204, "seek": 110636, "start": 1106.3999999999999, "end": 1111.8, "text": " will authenticate itself and be provided with the configurational parameters and their credentials.", "tokens": [50366, 486, 9214, 8700, 2564, 293, 312, 5649, 365, 264, 22192, 1478, 9834, 293, 641, 27404, 13, 50636], "temperature": 0.0, "avg_logprob": -0.14846329993390023, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.010984680615365505}, {"id": 205, "seek": 110636, "start": 1111.8, "end": 1118.52, "text": " So we see the web front end was first and it was successfully activated as a new model.", "tokens": [50636, 407, 321, 536, 264, 3670, 1868, 917, 390, 700, 293, 309, 390, 10727, 18157, 382, 257, 777, 2316, 13, 50972], "temperature": 0.0, "avg_logprob": -0.14846329993390023, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.010984680615365505}, {"id": 206, "seek": 110636, "start": 1118.52, "end": 1122.9199999999998, "text": " And this will continuously be running.", "tokens": [50972, 400, 341, 486, 15684, 312, 2614, 13, 51192], "temperature": 0.0, "avg_logprob": -0.14846329993390023, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.010984680615365505}, {"id": 207, "seek": 110636, "start": 1122.9199999999998, "end": 1130.84, "text": " So now if I go ahead and get all the parts in the emoji voter namespace I will see that", "tokens": [51192, 407, 586, 498, 286, 352, 2286, 293, 483, 439, 264, 3166, 294, 264, 31595, 21722, 5288, 17940, 286, 486, 536, 300, 51588], "temperature": 0.0, "avg_logprob": -0.14846329993390023, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.010984680615365505}, {"id": 208, "seek": 110636, "start": 1130.84, "end": 1135.3999999999999, "text": " all of these services are indeed running and if I would now scale up and down one of them", "tokens": [51588, 439, 295, 613, 3328, 366, 6451, 2614, 293, 498, 286, 576, 586, 4373, 493, 293, 760, 472, 295, 552, 51816], "temperature": 0.0, "avg_logprob": -0.14846329993390023, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.010984680615365505}, {"id": 209, "seek": 113540, "start": 1135.8400000000001, "end": 1142.44, "text": " they will be automatically authenticated again by Marble Run and be added to this deployment", "tokens": [50386, 436, 486, 312, 6772, 9214, 3587, 797, 538, 2039, 638, 8950, 293, 312, 3869, 281, 341, 19317, 50716], "temperature": 0.0, "avg_logprob": -0.2133405449685086, "compression_ratio": 1.7571428571428571, "no_speech_prob": 0.005383287090808153}, {"id": 210, "seek": 113540, "start": 1142.44, "end": 1148.0400000000002, "text": " spanning a confidential overlay, a confidential deployment.", "tokens": [50716, 47626, 257, 27054, 31741, 11, 257, 27054, 19317, 13, 50996], "temperature": 0.0, "avg_logprob": -0.2133405449685086, "compression_ratio": 1.7571428571428571, "no_speech_prob": 0.005383287090808153}, {"id": 211, "seek": 113540, "start": 1148.0400000000002, "end": 1150.52, "text": " Yeah and that's it from the demo.", "tokens": [50996, 865, 293, 300, 311, 309, 490, 264, 10723, 13, 51120], "temperature": 0.0, "avg_logprob": -0.2133405449685086, "compression_ratio": 1.7571428571428571, "no_speech_prob": 0.005383287090808153}, {"id": 212, "seek": 113540, "start": 1150.52, "end": 1154.48, "text": " I think we've seen how you can interact with the Marble Run CLI, how you can install it,", "tokens": [51120, 286, 519, 321, 600, 1612, 577, 291, 393, 4648, 365, 264, 2039, 638, 8950, 12855, 40, 11, 577, 291, 393, 3625, 309, 11, 51318], "temperature": 0.0, "avg_logprob": -0.2133405449685086, "compression_ratio": 1.7571428571428571, "no_speech_prob": 0.005383287090808153}, {"id": 213, "seek": 113540, "start": 1154.48, "end": 1161.0, "text": " how easy it is to deploy a confidential application and we can then now keep using Marble Run", "tokens": [51318, 577, 1858, 309, 307, 281, 7274, 257, 27054, 3861, 293, 321, 393, 550, 586, 1066, 1228, 2039, 638, 8950, 51644], "temperature": 0.0, "avg_logprob": -0.2133405449685086, "compression_ratio": 1.7571428571428571, "no_speech_prob": 0.005383287090808153}, {"id": 214, "seek": 116100, "start": 1161.0, "end": 1166.04, "text": " to orchestrate and update secrets and update things based on what we defined in the manifest.", "tokens": [50364, 281, 14161, 4404, 293, 5623, 14093, 293, 5623, 721, 2361, 322, 437, 321, 7642, 294, 264, 10067, 13, 50616], "temperature": 0.0, "avg_logprob": -0.14131374090490206, "compression_ratio": 1.5538461538461539, "no_speech_prob": 0.006288948934525251}, {"id": 215, "seek": 116100, "start": 1167.8, "end": 1169.32, "text": " Yeah let's go back to the slides.", "tokens": [50704, 865, 718, 311, 352, 646, 281, 264, 9788, 13, 50780], "temperature": 0.0, "avg_logprob": -0.14131374090490206, "compression_ratio": 1.5538461538461539, "no_speech_prob": 0.006288948934525251}, {"id": 216, "seek": 116100, "start": 1173.08, "end": 1179.48, "text": " That's it. I think we've seen in summary Marble Run makes it quite easy to deploy,", "tokens": [50968, 663, 311, 309, 13, 286, 519, 321, 600, 1612, 294, 12691, 2039, 638, 8950, 1669, 309, 1596, 1858, 281, 7274, 11, 51288], "temperature": 0.0, "avg_logprob": -0.14131374090490206, "compression_ratio": 1.5538461538461539, "no_speech_prob": 0.006288948934525251}, {"id": 217, "seek": 116100, "start": 1180.2, "end": 1188.36, "text": " orchestrate, just manage applications during the lifecycle, manage confidential applications", "tokens": [51324, 14161, 4404, 11, 445, 3067, 5821, 1830, 264, 45722, 11, 3067, 27054, 5821, 51732], "temperature": 0.0, "avg_logprob": -0.14131374090490206, "compression_ratio": 1.5538461538461539, "no_speech_prob": 0.006288948934525251}, {"id": 218, "seek": 118836, "start": 1188.36, "end": 1194.36, "text": " during the lifecycle and it augments the usual DevOps stack of cloud native deployments", "tokens": [50364, 1830, 264, 45722, 293, 309, 14501, 1117, 264, 7713, 43051, 8630, 295, 4588, 8470, 7274, 1117, 50664], "temperature": 0.0, "avg_logprob": -0.17208469157316247, "compression_ratio": 1.6293436293436294, "no_speech_prob": 0.010485339909791946}, {"id": 219, "seek": 118836, "start": 1195.32, "end": 1198.6799999999998, "text": " using Kubernetes, using your regular service mesh and so forth.", "tokens": [50712, 1228, 23145, 11, 1228, 428, 3890, 2643, 17407, 293, 370, 5220, 13, 50880], "temperature": 0.0, "avg_logprob": -0.17208469157316247, "compression_ratio": 1.6293436293436294, "no_speech_prob": 0.010485339909791946}, {"id": 220, "seek": 118836, "start": 1198.6799999999998, "end": 1203.4799999999998, "text": " So if you want to try it out or want more details please see our Github page, it also", "tokens": [50880, 407, 498, 291, 528, 281, 853, 309, 484, 420, 528, 544, 4365, 1767, 536, 527, 460, 355, 836, 3028, 11, 309, 611, 51120], "temperature": 0.0, "avg_logprob": -0.17208469157316247, "compression_ratio": 1.6293436293436294, "no_speech_prob": 0.010485339909791946}, {"id": 221, "seek": 118836, "start": 1203.4799999999998, "end": 1208.84, "text": " links to a documentation, you can very quickly create your first confidential deployment.", "tokens": [51120, 6123, 281, 257, 14333, 11, 291, 393, 588, 2661, 1884, 428, 700, 27054, 19317, 13, 51388], "temperature": 0.0, "avg_logprob": -0.17208469157316247, "compression_ratio": 1.6293436293436294, "no_speech_prob": 0.010485339909791946}, {"id": 222, "seek": 118836, "start": 1209.6399999999999, "end": 1214.28, "text": " We also have a simulation node so if you're not, don't have access to any type of confidential", "tokens": [51428, 492, 611, 362, 257, 16575, 9984, 370, 498, 291, 434, 406, 11, 500, 380, 362, 2105, 281, 604, 2010, 295, 27054, 51660], "temperature": 0.0, "avg_logprob": -0.17208469157316247, "compression_ratio": 1.6293436293436294, "no_speech_prob": 0.010485339909791946}, {"id": 223, "seek": 121428, "start": 1214.52, "end": 1218.12, "text": " computing hardware you can just use the simulation node to run it locally using MiniCube", "tokens": [50376, 15866, 8837, 291, 393, 445, 764, 264, 16575, 9984, 281, 1190, 309, 16143, 1228, 18239, 34, 1977, 50556], "temperature": 0.0, "avg_logprob": -0.1407513765944648, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.04269988834857941}, {"id": 224, "seek": 121428, "start": 1219.96, "end": 1222.68, "text": " or whatever the tooling you have in place.", "tokens": [50648, 420, 2035, 264, 46593, 291, 362, 294, 1081, 13, 50784], "temperature": 0.0, "avg_logprob": -0.1407513765944648, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.04269988834857941}, {"id": 225, "seek": 121428, "start": 1223.56, "end": 1228.2, "text": " And then if you have further questions please get in touch, you can find me on LinkedIn,", "tokens": [50828, 400, 550, 498, 291, 362, 3052, 1651, 1767, 483, 294, 2557, 11, 291, 393, 915, 385, 322, 20657, 11, 51060], "temperature": 0.0, "avg_logprob": -0.1407513765944648, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.04269988834857941}, {"id": 226, "seek": 121428, "start": 1228.2, "end": 1235.08, "text": " you can join our Discord. I will also be there tomorrow for the day two of the confidential", "tokens": [51060, 291, 393, 3917, 527, 32623, 13, 286, 486, 611, 312, 456, 4153, 337, 264, 786, 732, 295, 264, 27054, 51404], "temperature": 0.0, "avg_logprob": -0.1407513765944648, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.04269988834857941}, {"id": 227, "seek": 121428, "start": 1235.08, "end": 1241.56, "text": " computing dev room. Please hit me up if you have any questions or just want to have a chat.", "tokens": [51404, 15866, 1905, 1808, 13, 2555, 2045, 385, 493, 498, 291, 362, 604, 1651, 420, 445, 528, 281, 362, 257, 5081, 13, 51728], "temperature": 0.0, "avg_logprob": -0.1407513765944648, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.04269988834857941}, {"id": 228, "seek": 124156, "start": 1242.2, "end": 1249.96, "text": " And yeah, before we go into the Q&A one last cheeky little self-advertisement,", "tokens": [50396, 400, 1338, 11, 949, 321, 352, 666, 264, 1249, 5, 32, 472, 1036, 12839, 88, 707, 2698, 12, 345, 3281, 271, 1712, 11, 50784], "temperature": 0.0, "avg_logprob": -0.1728966236114502, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.06004225090146065}, {"id": 229, "seek": 124156, "start": 1249.96, "end": 1253.56, "text": " we have the open confidential computing conference coming up in March.", "tokens": [50784, 321, 362, 264, 1269, 27054, 15866, 7586, 1348, 493, 294, 6129, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1728966236114502, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.06004225090146065}, {"id": 230, "seek": 124156, "start": 1254.12, "end": 1259.0, "text": " I think this is you're the right audience for that. There are a lot of confidential computing open", "tokens": [50992, 286, 519, 341, 307, 291, 434, 264, 558, 4034, 337, 300, 13, 821, 366, 257, 688, 295, 27054, 15866, 1269, 51236], "temperature": 0.0, "avg_logprob": -0.1728966236114502, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.06004225090146065}, {"id": 231, "seek": 124156, "start": 1259.0, "end": 1265.24, "text": " source projects that are going to be presented, some interesting applications and other insights", "tokens": [51236, 4009, 4455, 300, 366, 516, 281, 312, 8212, 11, 512, 1880, 5821, 293, 661, 14310, 51548], "temperature": 0.0, "avg_logprob": -0.1728966236114502, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.06004225090146065}, {"id": 232, "seek": 126524, "start": 1265.24, "end": 1271.8, "text": " into confidential computing in general. So yeah, it's free. It's online. Please register if you're", "tokens": [50364, 666, 27054, 15866, 294, 2674, 13, 407, 1338, 11, 309, 311, 1737, 13, 467, 311, 2950, 13, 2555, 7280, 498, 291, 434, 50692], "temperature": 0.0, "avg_logprob": -0.15560914530898584, "compression_ratio": 1.432748538011696, "no_speech_prob": 0.038426827639341354}, {"id": 233, "seek": 126524, "start": 1271.8, "end": 1278.2, "text": " interested. It will be very, very cool to see you all there. That's it. Thank you very much.", "tokens": [50692, 3102, 13, 467, 486, 312, 588, 11, 588, 1627, 281, 536, 291, 439, 456, 13, 663, 311, 309, 13, 1044, 291, 588, 709, 13, 51012], "temperature": 0.0, "avg_logprob": -0.15560914530898584, "compression_ratio": 1.432748538011696, "no_speech_prob": 0.038426827639341354}, {"id": 234, "seek": 126524, "start": 1278.2, "end": 1284.2, "text": " And I think we have a bit of time left for questions.", "tokens": [51012, 400, 286, 519, 321, 362, 257, 857, 295, 565, 1411, 337, 1651, 13, 51312], "temperature": 0.0, "avg_logprob": -0.15560914530898584, "compression_ratio": 1.432748538011696, "no_speech_prob": 0.038426827639341354}, {"id": 235, "seek": 129524, "start": 1295.24, "end": 1296.6200000000001, "text": " you", "tokens": [50408, 291, 50433], "temperature": 0.0, "avg_logprob": -0.9186006784439087, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9282292127609253}], "language": "en"}