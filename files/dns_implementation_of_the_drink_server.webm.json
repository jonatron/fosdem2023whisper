{"text": " Hello everybody, this is Stefan, Stefan Bortmaier of AFNIC, we will talk about drink, which is, I guess, an experimental DNS server? No, not at all. It's a Tramway station in Belgium, actually. I hope that you explain. Well, yes, it's a DNS server, and you can see here an example of it working at FOSDEM. I ask 2plus2.diamondname txtrecord and that's extraordinary. I get four as an answer, which is really, really useful. It was not possible before, but, but, exactly, exactly, this is authentic. So you can be sure it's really, really full because it's signed with DNSSEC. So now we are going to see how it is done by Medlector. So drink is a dynamic, authoritative name server, and with several services. The main one, which was the original goal, is to return the IP address of the client. You have a lot of services on the Internet doing this, but all of them are very minimum. They don't implement all of the funny things of the DNS. We have also other services, for instance, ECS, EDNS Client Subnet Echo, can be useful also if you want to know what your resolver is sending about you, and you have other services such as Calculator. Well, the goals to develop drink were first to learn, to have fun also, and also to implement a lot of DNS stuff that are missing from the typical dynamic DNS services, such as TCP, NSID, cookies, DNSSEC, of course, et cetera, extended DNS errors, et cetera, et cetera. So that was the idea, and also it also provides a platform to test IDs at IETF Hackathon. IETF Hackathon are great because you can have t-shirts, and it's an opportunity to test new IDs, new stuff, and modifying existing software like NSD or Bind or Not is not always easy, so I wanted something which was easier, at least for me. So as you see, it does not pretend to be a competitor to things like Power DNS, NSD, Not, et cetera. It's experimental. So the implementation is done in Elixir. For the people who don't know Elixir, it's mostly a functional programming language which compiles to Erlang bytecode, which is then executed by the Erlang virtual machine. The good thing about Erlang is massive parallelism, so the virtual machine is really, really good for that. The syntax of Erlang is seen by many people as a bit of style. So the Elixir was mostly done, at least at the beginning, to have a better syntax for the same bytecode on the virtual machine. Also it's always fun to learn a new language. I didn't do everything myself. I had to rely on several existing libraries, and it's one of the pleasures of free software. You have a lot of libraries with free software lessons compatible with the one you use, hopelessly. The problem is that Elixir is not mainstream, so unlike languages like Go or Python, which have very, very good mature, maintained, debugged DNS libraries, Elixir, wow. There are some DNS libraries, typically with the last commit three or four years ago, sometimes older, and not always maintained and things like that. So it's a typical problem when you program in Elixir. When you go to X, which is the main repository of libraries, you always find something, whatever you are looking for, but pay attention, is it still maintained, debugged, et cetera. You have many libraries for the same stuff, but not all of them perfect. So it's one of the problems you have when you program in Elixir. Everything can itself call external microservices with HTTP or things like that, which as consequences for the implementation, because external services can be slow or unreliable, so you have to be careful not to crash, not to ung everything while you are waiting for the microservices. It's a bit like the talk about DNS resolution for graphical program. In Elixir, we may, unlike the typical authoritative server, which only depends on what is in its memory, so it's very predictable, and the response time is constant, unlike this typical authoritative name server, drink as a response time on success rates, which are highly dependent on the external services. That's free software, of course, because we are at FOSDEM, so I wouldn't dare to present it if it were not free software. You are here, but let's go to the important implementation point. First one, which is probably the most important, parallelism. So I don't like events. I think that events are an invention of the devil. Again, God intended parallelism to be done with processes, and Elixir, well, Erlang actually, because the run time is Erlang one, Erlang encouraged you to use massive parallelism, and when I say massive, really massive. You have anything to do, you create a new thread of execution, and it's very, very efficient. So in drink, every DNS request is a separate process. When I say process, it's not an operating system process, because of course creating them or managing them would be much too costly. But one of the funny things with the Erlang world is that they have a terminology which is quite specific. So words like process or application do not have the same meaning in the Erlang world as everywhere else. So a process here, it's what Go is calling a Go routine, for instance. For those who programmed in Go, it's more or less the same. Basically, it's very clip to create and to manage. So don't hesitate. One of the things that we always tell to the beginners in Elixir or Erlang, don't hesitate to create process. So every request is a process. When it does TCP, every TCP connection is a process. And everything is done by process. For instance, logging statistics, where it's not implemented yet, but control through a local socket is also done by a separate process. As I said, there is a process for everything. So as consequences, if you crash, if there is an exception, remember it's experimental code and it's written by me so there are a lot of bugs. But if you crash, you only crash one process. You don't take down the entire server. So that's a very interesting thing because it's one of the motto of the Erlang and Elixir programmers, let it crash. If a process crashes, it's not a big problem as long as the entire server continues to work. In the same way, if a request is stuck because you are waiting for something, you are calling a microservice somewhere at the other end of the internet and it does not reply or not immediately, it's not a big problem for drink because all the other requests will continue to work. Because parallelism is really great and unlike what many people are saying, it's even simpler than traditional programming. So for TCP, as a consequence, when I programmed it in the Elixir way, pipelining, meaning sending several requests over the TCP connection without waiting for the reply of the first one, worked immediately without me having anything to do at all. On out-of-order replies, which are not only allowed in TCP DNS but also mandated by the RFC, work also immediately the first time I tested, it worked without anything specific because every DNS request is a process. It works in parallel, so you have out-of-order replies. Remember that for a typical authoritative name server, out-of-order replies are not necessary because the response time is typically the same for every request. So there is not really any point in making out-of-order replies, unlike a resolver for instance. But drink is a bit special because any request can take some time, a lot of time. So out-of-order replies are still very important. And as I said, parallel programming is simpler, this is something you have to teach to the students. Parallel programming is not something very complicated that you see only at the end of the year. It's something very simple, very natural, and if you don't use events, everything is fine. And you don't care about things like, this request may block me, yeah, okay, let it block, no problem, other process will work. So here is an example of Elixir code. It's a functional language, so we use a map a lot. We don't do loops because loops also are an invention of the devil. So we have a set of IP addresses, and we just map a function. The function simply listen on this address with some options, okay. Then you open the socket, and for each socket, you create a server which runs this function, TCP loop acceptor, which will itself create a process for every DNS request received over the TCP connection. And that's all, and it's the end of the function that you map on the set of all IP addresses. Okay. Not even a bug in this one, no, I don't think so. Another important point when you write an internet server, whatever type of internet server it is, is of course robustness, because as you know, the internet is hostile. You see a lot of funny things, a lot of funny DNS packets, and sometimes even random binaries sent to the 53 port. So I assume everybody in the room have read LFC 9267. Is that the one that has no work? Yeah. Okay. It's very good reading if you are interested in DNS implementation, how it works. Basically, it's a list of the things that can go wrong when you pass DNS request. It's not a complete list. So the internet is a dangle. In packets can have whatever, literally whatever, everything is possible. And of course, the main example in LFC 9267 are compression pointers, because compression pointers can do things like pointing to themself, pointing outside of the packet. So if you program in C in a completely careless way, you can imagine what will happen. And indeed happens in the real world. Most of example in the LFC are from DNS mask on the windows, but it can happen to anyone. EDNS is not mentioned in the LFC, but it can be fun also. It was specially fun for me because the DNS libraries that I choose, I discovered later that it has no support for EDNS. So EDNS had to be done entirely. And EDNS options, for instance, are type length value. So you can have a length which is too large or too small and make the packet impossible to pass or even worse can trigger a crash of the server or remote code execution in the worst case. If you program in C, this is the sort of thing that can happen. So here is an example on how to pass EDNS. The second line with the brackets, the brackets are when you handle binary data, you extract the code. And you use for that pattern matching because it's a functional language, LXC relies a lot on pattern matching. So here the equal here is not an assignment. It simply means that you pattern match. And if it fails, there is an exception. So binary part which extracts the first two bytes of the data is a safe function, meaning that itself it uses pattern matching. If there are, for instance, not enough bytes to get the first two, you will have also an exception. You won't execute a remote code or go outside in the memory or things like that. Then you do things. You extract also the length of the packet and then you read the length. So if you do this sort of thing in C without paying attention, you can imagine the catastrophic thing that can happen. But here it's safe. In the worst case, you will have an exception here because not enough bytes. So here we trap the exception and we raise a proper exception and then we will return form error to the guy. In case you have something unexpected, this may crash, of course. It may take down the process. But remember, each request is a separate process, so the other request will be fine. DNSSEC. Ha! DNSSEC is fun. Because it's dynamic, you need to have dynamic signing. But cryptography, one of the things I really dislike with cryptography is that each bit wrong on the signature is completely off the mark. So it makes things really difficult to debug because some software tells you that the signature does not match. Okay, what's the problem exactly? Did I forget a field or did I forget something in the LFC? Ah, yes, something. So an example, a bug that I added, for instance, is that default encoding of the DNS library uses compression for the data which is inside the R data. So the domain name in the SOA or NS record, for instance. But the LFC about DNSSEC says that the signing has to be done on encoding which is done without any compression. So it didn't match and it took me some time to figure out what's the problem. Also the library I used did not allow to encode without name compression. So I had to redo everything myself. Like most programming projects, Drink was at the beginning, oh, it seems simple, it will be done in a weekend. And of course, in the end, it was much longer. So here is an example of code for signing, again binary data. We put all the information that are mandated by the LFC in the pseudo LFC which is then encoded by myself, unsigned. There are a few funny tricks, for instance, all domain names has to be put in lower case, the sort of problem that you discover when you go through a resolver which does case randomization. That's how you learn. But the most funny in DNSSEC is, of course, negative answers. So Moses came back from the mountain with ten commandments and one says that you should not lie. But you have to lie here because you have to say that there is nothing between this name and this name. And you don't know all the names because the server is completely dynamic. So Drink used something called white lies which are described in LFC 4470. So the Ensec record is just a bit before the name to a bit later. It seems simple, but it's very hard to get by. At one step, for instance, when implementing the algorithm of LFC, I had a code which worked with unbound or not, but failed with bind. And I never really discovered why, but after some tweaking, it worked. Also encoding of Ensec bitmaps, it's quite interesting, Ensec bitmaps are encoded in a very clever way, but very hard to get right, especially since LFC has only one test vector. So it's very difficult to see if you are on the right track or not. But in the end, it works with, we have everything in LX here necessary, enumerate, it's all the things that you can enumerate. It's a very generic library, so you can do things like finding the minimum, filtering to extract some data, map to apply a function, et cetera, et cetera, it's cool. Of course you need to test LX here like most programming languages as a framework for testing. But also I made external tests from a Python program written in Python to be sure that I don't have the same bug in both the tester and the testee. So it's also especially important in the DNS to test not only with proper DNS request, but also with broken request to see how the server reacts. So here is a Python code to create, for instance, an incorrect EDNS option. This is a comment on the second line. The length, NSID has no data, but here we put a random length, so any server that will try to decode EDNS stupidly will read too much bytes and something wrong will happen. So we create this EDNS option for DNS packet, we send it to the server and we hope that the server will reply as the RFC said with form error, otherwise the test will fail. And that's all. So time for questions. Yes, that's this. Good question. I have to think about it. The question was about byte order because DNS RFC specifies byte order for things like a length in EDNS packets, for instance, and it's not explicit in the Elixir code and that's a good question because I don't remember how I did it, but I won the program on several machines with different byte order to be sure that it was okay, but I don't remember how I did it. That's an interesting question. This is a code that I wrote. The last code that I wrote was DNSSEC, so DNSSEC is still fresh in my mind. The rest is a bit more complicated. I can probably add to that. When you specify the binary pattern matching, you can choose how you want it done, and you can specify the elements, and you've got a default in DNS, but I don't remember which input, which input. So you mentioned that when you added TCP, the pipelining just worked. How does it handle a larger plot if you do not have that? Is it always like the answer comes back and so there's no chance that a big answer has to worry about a small answer arriving while it's being sent to anything like that? So about TCP, when there are some questions or replies that are larger than other or takes more time. So because of the parallelism and because every DNS request is a separate process, they follow their own path. The only case where they meet is when they try to send the reply back. So in that case, it's a long virtual machine which is in charge of being sure that you cannot interrupt a white operation. So the way it's implemented is that everything goes through a process. For instance, logging works the same way. We send everything to a logging process which then serializes. So we can be sure. And also, writing on the socket is done by the Erlang library, not by me, so it cannot be interrupted, so there is no risk of interleaving replies, if that was your question. On the Erlang socket library also does a few things that are not really important but are fun. For instance, when creating the socket, maybe you notice this option, packet 2. It means that two bytes length has to be added automatically, which is good for EPP or for DNS. And also by default, it's in network byte order, which is good again. Oh, performance. Yes, with DNS perf. And I compare the drink with NSD. Drink is typically three to four times slower, which is expected, of course, because it's dynamic. It has not been optimized for speed, and because NSD is very fast. So of course, as you know, performance testing is something complicated. It depends on a lot of things. So I don't have strong, serious measurements, but the measurements I did on my machine show that the difference in performance is, in my opinion, quite acceptable. Three times slower than NSD is actually quite good. The question is, do I plan to add some caching in it because some questions can take time to retrieve or to compute? No. It's don't think it's, as you know, caching is one of the two or three complicated things in computer programming. So in my opinion, it's not worth it. Caching can be done by the client, anyway. Or you can run the drink behind the NSD, if you will insist. Thank you, Stefa.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.8, "text": " Hello everybody, this is Stefan, Stefan Bortmaier of AFNIC, we will talk about drink, which", "tokens": [50364, 2425, 2201, 11, 341, 307, 32158, 11, 32158, 363, 477, 1696, 811, 295, 20389, 45, 2532, 11, 321, 486, 751, 466, 2822, 11, 597, 50904], "temperature": 0.0, "avg_logprob": -0.5904536655970982, "compression_ratio": 1.3053892215568863, "no_speech_prob": 0.5010330677032471}, {"id": 1, "seek": 0, "start": 10.8, "end": 14.120000000000001, "text": " is, I guess, an experimental DNS server?", "tokens": [50904, 307, 11, 286, 2041, 11, 364, 17069, 35153, 7154, 30, 51070], "temperature": 0.0, "avg_logprob": -0.5904536655970982, "compression_ratio": 1.3053892215568863, "no_speech_prob": 0.5010330677032471}, {"id": 2, "seek": 0, "start": 14.120000000000001, "end": 16.92, "text": " No, not at all.", "tokens": [51070, 883, 11, 406, 412, 439, 13, 51210], "temperature": 0.0, "avg_logprob": -0.5904536655970982, "compression_ratio": 1.3053892215568863, "no_speech_prob": 0.5010330677032471}, {"id": 3, "seek": 0, "start": 16.92, "end": 20.2, "text": " It's a Tramway station in Belgium, actually.", "tokens": [51210, 467, 311, 257, 1765, 335, 676, 5214, 294, 28094, 11, 767, 13, 51374], "temperature": 0.0, "avg_logprob": -0.5904536655970982, "compression_ratio": 1.3053892215568863, "no_speech_prob": 0.5010330677032471}, {"id": 4, "seek": 0, "start": 20.2, "end": 24.080000000000002, "text": " I hope that you explain.", "tokens": [51374, 286, 1454, 300, 291, 2903, 13, 51568], "temperature": 0.0, "avg_logprob": -0.5904536655970982, "compression_ratio": 1.3053892215568863, "no_speech_prob": 0.5010330677032471}, {"id": 5, "seek": 2408, "start": 24.08, "end": 33.4, "text": " Well, yes, it's a DNS server, and you can see here an example of it working at FOSDEM.", "tokens": [50364, 1042, 11, 2086, 11, 309, 311, 257, 35153, 7154, 11, 293, 291, 393, 536, 510, 364, 1365, 295, 309, 1364, 412, 479, 4367, 35, 6683, 13, 50830], "temperature": 0.0, "avg_logprob": -0.3317789033401844, "compression_ratio": 1.4020100502512562, "no_speech_prob": 0.11243889480829239}, {"id": 6, "seek": 2408, "start": 33.4, "end": 41.12, "text": " I ask 2plus2.diamondname txtrecord and that's extraordinary.", "tokens": [50830, 286, 1029, 568, 18954, 17, 13, 67, 2918, 684, 16344, 256, 734, 38500, 293, 300, 311, 10581, 13, 51216], "temperature": 0.0, "avg_logprob": -0.3317789033401844, "compression_ratio": 1.4020100502512562, "no_speech_prob": 0.11243889480829239}, {"id": 7, "seek": 2408, "start": 41.12, "end": 45.72, "text": " I get four as an answer, which is really, really useful.", "tokens": [51216, 286, 483, 1451, 382, 364, 1867, 11, 597, 307, 534, 11, 534, 4420, 13, 51446], "temperature": 0.0, "avg_logprob": -0.3317789033401844, "compression_ratio": 1.4020100502512562, "no_speech_prob": 0.11243889480829239}, {"id": 8, "seek": 2408, "start": 45.72, "end": 53.16, "text": " It was not possible before, but, but, exactly, exactly, this is authentic.", "tokens": [51446, 467, 390, 406, 1944, 949, 11, 457, 11, 457, 11, 2293, 11, 2293, 11, 341, 307, 12466, 13, 51818], "temperature": 0.0, "avg_logprob": -0.3317789033401844, "compression_ratio": 1.4020100502512562, "no_speech_prob": 0.11243889480829239}, {"id": 9, "seek": 5316, "start": 53.16, "end": 58.4, "text": " So you can be sure it's really, really full because it's signed with DNSSEC.", "tokens": [50364, 407, 291, 393, 312, 988, 309, 311, 534, 11, 534, 1577, 570, 309, 311, 8175, 365, 35153, 5879, 34, 13, 50626], "temperature": 0.0, "avg_logprob": -0.20797864402212748, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.036785826086997986}, {"id": 10, "seek": 5316, "start": 58.4, "end": 65.24, "text": " So now we are going to see how it is done by Medlector.", "tokens": [50626, 407, 586, 321, 366, 516, 281, 536, 577, 309, 307, 1096, 538, 3982, 306, 1672, 13, 50968], "temperature": 0.0, "avg_logprob": -0.20797864402212748, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.036785826086997986}, {"id": 11, "seek": 5316, "start": 65.24, "end": 72.64, "text": " So drink is a dynamic, authoritative name server, and with several services.", "tokens": [50968, 407, 2822, 307, 257, 8546, 11, 3793, 14275, 1315, 7154, 11, 293, 365, 2940, 3328, 13, 51338], "temperature": 0.0, "avg_logprob": -0.20797864402212748, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.036785826086997986}, {"id": 12, "seek": 5316, "start": 72.64, "end": 77.56, "text": " The main one, which was the original goal, is to return the IP address of the client.", "tokens": [51338, 440, 2135, 472, 11, 597, 390, 264, 3380, 3387, 11, 307, 281, 2736, 264, 8671, 2985, 295, 264, 6423, 13, 51584], "temperature": 0.0, "avg_logprob": -0.20797864402212748, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.036785826086997986}, {"id": 13, "seek": 7756, "start": 77.56, "end": 83.52, "text": " You have a lot of services on the Internet doing this, but all of them are very minimum.", "tokens": [50364, 509, 362, 257, 688, 295, 3328, 322, 264, 7703, 884, 341, 11, 457, 439, 295, 552, 366, 588, 7285, 13, 50662], "temperature": 0.0, "avg_logprob": -0.24558756428380166, "compression_ratio": 1.5656108597285068, "no_speech_prob": 0.6601371169090271}, {"id": 14, "seek": 7756, "start": 83.52, "end": 89.04, "text": " They don't implement all of the funny things of the DNS.", "tokens": [50662, 814, 500, 380, 4445, 439, 295, 264, 4074, 721, 295, 264, 35153, 13, 50938], "temperature": 0.0, "avg_logprob": -0.24558756428380166, "compression_ratio": 1.5656108597285068, "no_speech_prob": 0.6601371169090271}, {"id": 15, "seek": 7756, "start": 89.04, "end": 95.28, "text": " We have also other services, for instance, ECS, EDNS Client Subnet Echo, can be useful", "tokens": [50938, 492, 362, 611, 661, 3328, 11, 337, 5197, 11, 19081, 50, 11, 18050, 42003, 2033, 1196, 8511, 7129, 31887, 11, 393, 312, 4420, 51250], "temperature": 0.0, "avg_logprob": -0.24558756428380166, "compression_ratio": 1.5656108597285068, "no_speech_prob": 0.6601371169090271}, {"id": 16, "seek": 7756, "start": 95.28, "end": 102.0, "text": " also if you want to know what your resolver is sending about you, and you have other services", "tokens": [51250, 611, 498, 291, 528, 281, 458, 437, 428, 34480, 307, 7750, 466, 291, 11, 293, 291, 362, 661, 3328, 51586], "temperature": 0.0, "avg_logprob": -0.24558756428380166, "compression_ratio": 1.5656108597285068, "no_speech_prob": 0.6601371169090271}, {"id": 17, "seek": 7756, "start": 102.0, "end": 104.0, "text": " such as Calculator.", "tokens": [51586, 1270, 382, 3511, 2444, 1639, 13, 51686], "temperature": 0.0, "avg_logprob": -0.24558756428380166, "compression_ratio": 1.5656108597285068, "no_speech_prob": 0.6601371169090271}, {"id": 18, "seek": 10400, "start": 105.0, "end": 113.68, "text": " Well, the goals to develop drink were first to learn, to have fun also, and also to implement", "tokens": [50414, 1042, 11, 264, 5493, 281, 1499, 2822, 645, 700, 281, 1466, 11, 281, 362, 1019, 611, 11, 293, 611, 281, 4445, 50848], "temperature": 0.0, "avg_logprob": -0.18311247107100814, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.02625528909265995}, {"id": 19, "seek": 10400, "start": 113.68, "end": 121.52, "text": " a lot of DNS stuff that are missing from the typical dynamic DNS services, such as TCP,", "tokens": [50848, 257, 688, 295, 35153, 1507, 300, 366, 5361, 490, 264, 7476, 8546, 35153, 3328, 11, 1270, 382, 48965, 11, 51240], "temperature": 0.0, "avg_logprob": -0.18311247107100814, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.02625528909265995}, {"id": 20, "seek": 10400, "start": 121.52, "end": 129.96, "text": " NSID, cookies, DNSSEC, of course, et cetera, extended DNS errors, et cetera, et cetera.", "tokens": [51240, 15943, 2777, 11, 13670, 11, 35153, 5879, 34, 11, 295, 1164, 11, 1030, 11458, 11, 10913, 35153, 13603, 11, 1030, 11458, 11, 1030, 11458, 13, 51662], "temperature": 0.0, "avg_logprob": -0.18311247107100814, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.02625528909265995}, {"id": 21, "seek": 12996, "start": 129.96, "end": 138.8, "text": " So that was the idea, and also it also provides a platform to test IDs at IETF Hackathon.", "tokens": [50364, 407, 300, 390, 264, 1558, 11, 293, 611, 309, 611, 6417, 257, 3663, 281, 1500, 48212, 412, 286, 4850, 37, 35170, 18660, 13, 50806], "temperature": 0.0, "avg_logprob": -0.19330643035553313, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.0223261509090662}, {"id": 22, "seek": 12996, "start": 138.8, "end": 144.72, "text": " IETF Hackathon are great because you can have t-shirts, and it's an opportunity to test", "tokens": [50806, 286, 4850, 37, 35170, 18660, 366, 869, 570, 291, 393, 362, 256, 12, 25892, 11, 293, 309, 311, 364, 2650, 281, 1500, 51102], "temperature": 0.0, "avg_logprob": -0.19330643035553313, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.0223261509090662}, {"id": 23, "seek": 12996, "start": 144.72, "end": 152.68, "text": " new IDs, new stuff, and modifying existing software like NSD or Bind or Not is not always", "tokens": [51102, 777, 48212, 11, 777, 1507, 11, 293, 42626, 6741, 4722, 411, 15943, 35, 420, 363, 471, 420, 1726, 307, 406, 1009, 51500], "temperature": 0.0, "avg_logprob": -0.19330643035553313, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.0223261509090662}, {"id": 24, "seek": 12996, "start": 152.68, "end": 159.04000000000002, "text": " easy, so I wanted something which was easier, at least for me.", "tokens": [51500, 1858, 11, 370, 286, 1415, 746, 597, 390, 3571, 11, 412, 1935, 337, 385, 13, 51818], "temperature": 0.0, "avg_logprob": -0.19330643035553313, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.0223261509090662}, {"id": 25, "seek": 15904, "start": 159.12, "end": 166.95999999999998, "text": " So as you see, it does not pretend to be a competitor to things like Power DNS, NSD,", "tokens": [50368, 407, 382, 291, 536, 11, 309, 775, 406, 11865, 281, 312, 257, 27266, 281, 721, 411, 7086, 35153, 11, 15943, 35, 11, 50760], "temperature": 0.0, "avg_logprob": -0.2218929131825765, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.0094388322904706}, {"id": 26, "seek": 15904, "start": 166.95999999999998, "end": 168.95999999999998, "text": " Not, et cetera.", "tokens": [50760, 1726, 11, 1030, 11458, 13, 50860], "temperature": 0.0, "avg_logprob": -0.2218929131825765, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.0094388322904706}, {"id": 27, "seek": 15904, "start": 168.95999999999998, "end": 171.45999999999998, "text": " It's experimental.", "tokens": [50860, 467, 311, 17069, 13, 50985], "temperature": 0.0, "avg_logprob": -0.2218929131825765, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.0094388322904706}, {"id": 28, "seek": 15904, "start": 171.45999999999998, "end": 175.72, "text": " So the implementation is done in Elixir.", "tokens": [50985, 407, 264, 11420, 307, 1096, 294, 2699, 970, 347, 13, 51198], "temperature": 0.0, "avg_logprob": -0.2218929131825765, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.0094388322904706}, {"id": 29, "seek": 15904, "start": 175.72, "end": 182.72, "text": " For the people who don't know Elixir, it's mostly a functional programming language which", "tokens": [51198, 1171, 264, 561, 567, 500, 380, 458, 2699, 970, 347, 11, 309, 311, 5240, 257, 11745, 9410, 2856, 597, 51548], "temperature": 0.0, "avg_logprob": -0.2218929131825765, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.0094388322904706}, {"id": 30, "seek": 18272, "start": 182.8, "end": 190.04, "text": " compiles to Erlang bytecode, which is then executed by the Erlang virtual machine.", "tokens": [50368, 715, 4680, 281, 3300, 25241, 40846, 22332, 11, 597, 307, 550, 17577, 538, 264, 3300, 25241, 6374, 3479, 13, 50730], "temperature": 0.0, "avg_logprob": -0.14243676112248346, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.03136133402585983}, {"id": 31, "seek": 18272, "start": 190.04, "end": 195.96, "text": " The good thing about Erlang is massive parallelism, so the virtual machine is really, really good", "tokens": [50730, 440, 665, 551, 466, 3300, 25241, 307, 5994, 8952, 1434, 11, 370, 264, 6374, 3479, 307, 534, 11, 534, 665, 51026], "temperature": 0.0, "avg_logprob": -0.14243676112248346, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.03136133402585983}, {"id": 32, "seek": 18272, "start": 195.96, "end": 197.96, "text": " for that.", "tokens": [51026, 337, 300, 13, 51126], "temperature": 0.0, "avg_logprob": -0.14243676112248346, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.03136133402585983}, {"id": 33, "seek": 18272, "start": 197.96, "end": 205.32, "text": " The syntax of Erlang is seen by many people as a bit of style.", "tokens": [51126, 440, 28431, 295, 3300, 25241, 307, 1612, 538, 867, 561, 382, 257, 857, 295, 3758, 13, 51494], "temperature": 0.0, "avg_logprob": -0.14243676112248346, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.03136133402585983}, {"id": 34, "seek": 18272, "start": 205.32, "end": 211.4, "text": " So the Elixir was mostly done, at least at the beginning, to have a better syntax for", "tokens": [51494, 407, 264, 2699, 970, 347, 390, 5240, 1096, 11, 412, 1935, 412, 264, 2863, 11, 281, 362, 257, 1101, 28431, 337, 51798], "temperature": 0.0, "avg_logprob": -0.14243676112248346, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.03136133402585983}, {"id": 35, "seek": 21140, "start": 211.4, "end": 215.0, "text": " the same bytecode on the virtual machine.", "tokens": [50364, 264, 912, 40846, 22332, 322, 264, 6374, 3479, 13, 50544], "temperature": 0.0, "avg_logprob": -0.1762528238417227, "compression_ratio": 1.555, "no_speech_prob": 0.01126228179782629}, {"id": 36, "seek": 21140, "start": 215.0, "end": 221.08, "text": " Also it's always fun to learn a new language.", "tokens": [50544, 2743, 309, 311, 1009, 1019, 281, 1466, 257, 777, 2856, 13, 50848], "temperature": 0.0, "avg_logprob": -0.1762528238417227, "compression_ratio": 1.555, "no_speech_prob": 0.01126228179782629}, {"id": 37, "seek": 21140, "start": 221.08, "end": 223.16, "text": " I didn't do everything myself.", "tokens": [50848, 286, 994, 380, 360, 1203, 2059, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1762528238417227, "compression_ratio": 1.555, "no_speech_prob": 0.01126228179782629}, {"id": 38, "seek": 21140, "start": 223.16, "end": 229.6, "text": " I had to rely on several existing libraries, and it's one of the pleasures of free software.", "tokens": [50952, 286, 632, 281, 10687, 322, 2940, 6741, 15148, 11, 293, 309, 311, 472, 295, 264, 48627, 295, 1737, 4722, 13, 51274], "temperature": 0.0, "avg_logprob": -0.1762528238417227, "compression_ratio": 1.555, "no_speech_prob": 0.01126228179782629}, {"id": 39, "seek": 21140, "start": 229.6, "end": 239.72, "text": " You have a lot of libraries with free software lessons compatible with the one you use, hopelessly.", "tokens": [51274, 509, 362, 257, 688, 295, 15148, 365, 1737, 4722, 8820, 18218, 365, 264, 472, 291, 764, 11, 27317, 356, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1762528238417227, "compression_ratio": 1.555, "no_speech_prob": 0.01126228179782629}, {"id": 40, "seek": 23972, "start": 240.2, "end": 248.64, "text": " The problem is that Elixir is not mainstream, so unlike languages like Go or Python, which", "tokens": [50388, 440, 1154, 307, 300, 2699, 970, 347, 307, 406, 15960, 11, 370, 8343, 8650, 411, 1037, 420, 15329, 11, 597, 50810], "temperature": 0.0, "avg_logprob": -0.2736281624323205, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.07199258357286453}, {"id": 41, "seek": 23972, "start": 248.64, "end": 257.4, "text": " have very, very good mature, maintained, debugged DNS libraries, Elixir, wow.", "tokens": [50810, 362, 588, 11, 588, 665, 14442, 11, 17578, 11, 24083, 3004, 35153, 15148, 11, 2699, 970, 347, 11, 6076, 13, 51248], "temperature": 0.0, "avg_logprob": -0.2736281624323205, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.07199258357286453}, {"id": 42, "seek": 23972, "start": 257.4, "end": 264.0, "text": " There are some DNS libraries, typically with the last commit three or four years ago, sometimes", "tokens": [51248, 821, 366, 512, 35153, 15148, 11, 5850, 365, 264, 1036, 5599, 1045, 420, 1451, 924, 2057, 11, 2171, 51578], "temperature": 0.0, "avg_logprob": -0.2736281624323205, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.07199258357286453}, {"id": 43, "seek": 23972, "start": 264.0, "end": 269.44, "text": " older, and not always maintained and things like that.", "tokens": [51578, 4906, 11, 293, 406, 1009, 17578, 293, 721, 411, 300, 13, 51850], "temperature": 0.0, "avg_logprob": -0.2736281624323205, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.07199258357286453}, {"id": 44, "seek": 26944, "start": 269.44, "end": 273.88, "text": " So it's a typical problem when you program in Elixir.", "tokens": [50364, 407, 309, 311, 257, 7476, 1154, 562, 291, 1461, 294, 2699, 970, 347, 13, 50586], "temperature": 0.0, "avg_logprob": -0.13968553446760082, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.006936835590749979}, {"id": 45, "seek": 26944, "start": 273.88, "end": 281.36, "text": " When you go to X, which is the main repository of libraries, you always find something, whatever", "tokens": [50586, 1133, 291, 352, 281, 1783, 11, 597, 307, 264, 2135, 25841, 295, 15148, 11, 291, 1009, 915, 746, 11, 2035, 50960], "temperature": 0.0, "avg_logprob": -0.13968553446760082, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.006936835590749979}, {"id": 46, "seek": 26944, "start": 281.36, "end": 287.32, "text": " you are looking for, but pay attention, is it still maintained, debugged, et cetera.", "tokens": [50960, 291, 366, 1237, 337, 11, 457, 1689, 3202, 11, 307, 309, 920, 17578, 11, 24083, 3004, 11, 1030, 11458, 13, 51258], "temperature": 0.0, "avg_logprob": -0.13968553446760082, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.006936835590749979}, {"id": 47, "seek": 26944, "start": 287.32, "end": 291.96, "text": " You have many libraries for the same stuff, but not all of them perfect.", "tokens": [51258, 509, 362, 867, 15148, 337, 264, 912, 1507, 11, 457, 406, 439, 295, 552, 2176, 13, 51490], "temperature": 0.0, "avg_logprob": -0.13968553446760082, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.006936835590749979}, {"id": 48, "seek": 26944, "start": 291.96, "end": 297.84, "text": " So it's one of the problems you have when you program in Elixir.", "tokens": [51490, 407, 309, 311, 472, 295, 264, 2740, 291, 362, 562, 291, 1461, 294, 2699, 970, 347, 13, 51784], "temperature": 0.0, "avg_logprob": -0.13968553446760082, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.006936835590749979}, {"id": 49, "seek": 29784, "start": 297.84, "end": 306.56, "text": " Everything can itself call external microservices with HTTP or things like that, which as consequences", "tokens": [50364, 5471, 393, 2564, 818, 8320, 15547, 47480, 365, 33283, 420, 721, 411, 300, 11, 597, 382, 10098, 50800], "temperature": 0.0, "avg_logprob": -0.22314472439922864, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.09193848818540573}, {"id": 50, "seek": 29784, "start": 306.56, "end": 312.03999999999996, "text": " for the implementation, because external services can be slow or unreliable, so you have to", "tokens": [50800, 337, 264, 11420, 11, 570, 8320, 3328, 393, 312, 2964, 420, 20584, 2081, 712, 11, 370, 291, 362, 281, 51074], "temperature": 0.0, "avg_logprob": -0.22314472439922864, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.09193848818540573}, {"id": 51, "seek": 29784, "start": 312.03999999999996, "end": 319.52, "text": " be careful not to crash, not to ung everything while you are waiting for the microservices.", "tokens": [51074, 312, 5026, 406, 281, 8252, 11, 406, 281, 29038, 1203, 1339, 291, 366, 3806, 337, 264, 15547, 47480, 13, 51448], "temperature": 0.0, "avg_logprob": -0.22314472439922864, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.09193848818540573}, {"id": 52, "seek": 29784, "start": 319.52, "end": 324.67999999999995, "text": " It's a bit like the talk about DNS resolution for graphical program.", "tokens": [51448, 467, 311, 257, 857, 411, 264, 751, 466, 35153, 8669, 337, 35942, 1461, 13, 51706], "temperature": 0.0, "avg_logprob": -0.22314472439922864, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.09193848818540573}, {"id": 53, "seek": 32468, "start": 324.68, "end": 331.92, "text": " In Elixir, we may, unlike the typical authoritative server, which only depends on what is in its", "tokens": [50364, 682, 2699, 970, 347, 11, 321, 815, 11, 8343, 264, 7476, 3793, 14275, 7154, 11, 597, 787, 5946, 322, 437, 307, 294, 1080, 50726], "temperature": 0.0, "avg_logprob": -0.2835775581566063, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.31333836913108826}, {"id": 54, "seek": 32468, "start": 331.92, "end": 339.56, "text": " memory, so it's very predictable, and the response time is constant, unlike this typical authoritative", "tokens": [50726, 4675, 11, 370, 309, 311, 588, 27737, 11, 293, 264, 4134, 565, 307, 5754, 11, 8343, 341, 7476, 3793, 14275, 51108], "temperature": 0.0, "avg_logprob": -0.2835775581566063, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.31333836913108826}, {"id": 55, "seek": 32468, "start": 339.56, "end": 347.2, "text": " name server, drink as a response time on success rates, which are highly dependent on the external", "tokens": [51108, 1315, 7154, 11, 2822, 382, 257, 4134, 565, 322, 2245, 6846, 11, 597, 366, 5405, 12334, 322, 264, 8320, 51490], "temperature": 0.0, "avg_logprob": -0.2835775581566063, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.31333836913108826}, {"id": 56, "seek": 32468, "start": 347.2, "end": 351.0, "text": " services.", "tokens": [51490, 3328, 13, 51680], "temperature": 0.0, "avg_logprob": -0.2835775581566063, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.31333836913108826}, {"id": 57, "seek": 35100, "start": 351.0, "end": 355.16, "text": " That's free software, of course, because we are at FOSDEM, so I wouldn't dare to present", "tokens": [50364, 663, 311, 1737, 4722, 11, 295, 1164, 11, 570, 321, 366, 412, 479, 4367, 35, 6683, 11, 370, 286, 2759, 380, 8955, 281, 1974, 50572], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 58, "seek": 35100, "start": 355.16, "end": 358.84, "text": " it if it were not free software.", "tokens": [50572, 309, 498, 309, 645, 406, 1737, 4722, 13, 50756], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 59, "seek": 35100, "start": 358.84, "end": 364.84, "text": " You are here, but let's go to the important implementation point.", "tokens": [50756, 509, 366, 510, 11, 457, 718, 311, 352, 281, 264, 1021, 11420, 935, 13, 51056], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 60, "seek": 35100, "start": 364.84, "end": 368.48, "text": " First one, which is probably the most important, parallelism.", "tokens": [51056, 2386, 472, 11, 597, 307, 1391, 264, 881, 1021, 11, 8952, 1434, 13, 51238], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 61, "seek": 35100, "start": 368.48, "end": 370.04, "text": " So I don't like events.", "tokens": [51238, 407, 286, 500, 380, 411, 3931, 13, 51316], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 62, "seek": 35100, "start": 370.04, "end": 374.36, "text": " I think that events are an invention of the devil.", "tokens": [51316, 286, 519, 300, 3931, 366, 364, 22265, 295, 264, 13297, 13, 51532], "temperature": 0.0, "avg_logprob": -0.18944149226932736, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.45163077116012573}, {"id": 63, "seek": 37436, "start": 374.36, "end": 382.04, "text": " Again, God intended parallelism to be done with processes, and Elixir, well, Erlang actually,", "tokens": [50364, 3764, 11, 1265, 10226, 8952, 1434, 281, 312, 1096, 365, 7555, 11, 293, 2699, 970, 347, 11, 731, 11, 3300, 25241, 767, 11, 50748], "temperature": 0.0, "avg_logprob": -0.2348548245717244, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.45963382720947266}, {"id": 64, "seek": 37436, "start": 382.04, "end": 390.24, "text": " because the run time is Erlang one, Erlang encouraged you to use massive parallelism,", "tokens": [50748, 570, 264, 1190, 565, 307, 3300, 25241, 472, 11, 3300, 25241, 14658, 291, 281, 764, 5994, 8952, 1434, 11, 51158], "temperature": 0.0, "avg_logprob": -0.2348548245717244, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.45963382720947266}, {"id": 65, "seek": 37436, "start": 390.24, "end": 392.84000000000003, "text": " and when I say massive, really massive.", "tokens": [51158, 293, 562, 286, 584, 5994, 11, 534, 5994, 13, 51288], "temperature": 0.0, "avg_logprob": -0.2348548245717244, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.45963382720947266}, {"id": 66, "seek": 37436, "start": 392.84000000000003, "end": 400.04, "text": " You have anything to do, you create a new thread of execution, and it's very, very efficient.", "tokens": [51288, 509, 362, 1340, 281, 360, 11, 291, 1884, 257, 777, 7207, 295, 15058, 11, 293, 309, 311, 588, 11, 588, 7148, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2348548245717244, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.45963382720947266}, {"id": 67, "seek": 40004, "start": 400.04, "end": 405.72, "text": " So in drink, every DNS request is a separate process.", "tokens": [50364, 407, 294, 2822, 11, 633, 35153, 5308, 307, 257, 4994, 1399, 13, 50648], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 68, "seek": 40004, "start": 405.72, "end": 410.40000000000003, "text": " When I say process, it's not an operating system process, because of course creating", "tokens": [50648, 1133, 286, 584, 1399, 11, 309, 311, 406, 364, 7447, 1185, 1399, 11, 570, 295, 1164, 4084, 50882], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 69, "seek": 40004, "start": 410.40000000000003, "end": 414.72, "text": " them or managing them would be much too costly.", "tokens": [50882, 552, 420, 11642, 552, 576, 312, 709, 886, 28328, 13, 51098], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 70, "seek": 40004, "start": 414.72, "end": 420.32000000000005, "text": " But one of the funny things with the Erlang world is that they have a terminology which", "tokens": [51098, 583, 472, 295, 264, 4074, 721, 365, 264, 3300, 25241, 1002, 307, 300, 436, 362, 257, 27575, 597, 51378], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 71, "seek": 40004, "start": 420.32000000000005, "end": 422.12, "text": " is quite specific.", "tokens": [51378, 307, 1596, 2685, 13, 51468], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 72, "seek": 40004, "start": 422.12, "end": 429.28000000000003, "text": " So words like process or application do not have the same meaning in the Erlang world as", "tokens": [51468, 407, 2283, 411, 1399, 420, 3861, 360, 406, 362, 264, 912, 3620, 294, 264, 3300, 25241, 1002, 382, 51826], "temperature": 0.0, "avg_logprob": -0.15515820698071553, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.1402130275964737}, {"id": 73, "seek": 42928, "start": 429.28, "end": 430.71999999999997, "text": " everywhere else.", "tokens": [50364, 5315, 1646, 13, 50436], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 74, "seek": 42928, "start": 430.71999999999997, "end": 435.71999999999997, "text": " So a process here, it's what Go is calling a Go routine, for instance.", "tokens": [50436, 407, 257, 1399, 510, 11, 309, 311, 437, 1037, 307, 5141, 257, 1037, 9927, 11, 337, 5197, 13, 50686], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 75, "seek": 42928, "start": 435.71999999999997, "end": 438.91999999999996, "text": " For those who programmed in Go, it's more or less the same.", "tokens": [50686, 1171, 729, 567, 31092, 294, 1037, 11, 309, 311, 544, 420, 1570, 264, 912, 13, 50846], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 76, "seek": 42928, "start": 438.91999999999996, "end": 443.47999999999996, "text": " Basically, it's very clip to create and to manage.", "tokens": [50846, 8537, 11, 309, 311, 588, 7353, 281, 1884, 293, 281, 3067, 13, 51074], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 77, "seek": 42928, "start": 443.47999999999996, "end": 444.71999999999997, "text": " So don't hesitate.", "tokens": [51074, 407, 500, 380, 20842, 13, 51136], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 78, "seek": 42928, "start": 444.71999999999997, "end": 450.28, "text": " One of the things that we always tell to the beginners in Elixir or Erlang, don't hesitate", "tokens": [51136, 1485, 295, 264, 721, 300, 321, 1009, 980, 281, 264, 26992, 294, 2699, 970, 347, 420, 3300, 25241, 11, 500, 380, 20842, 51414], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 79, "seek": 42928, "start": 450.28, "end": 452.55999999999995, "text": " to create process.", "tokens": [51414, 281, 1884, 1399, 13, 51528], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 80, "seek": 42928, "start": 452.55999999999995, "end": 455.0, "text": " So every request is a process.", "tokens": [51528, 407, 633, 5308, 307, 257, 1399, 13, 51650], "temperature": 0.0, "avg_logprob": -0.20508687312786394, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.03383689746260643}, {"id": 81, "seek": 45500, "start": 455.0, "end": 462.4, "text": " When it does TCP, every TCP connection is a process.", "tokens": [50364, 1133, 309, 775, 48965, 11, 633, 48965, 4984, 307, 257, 1399, 13, 50734], "temperature": 0.0, "avg_logprob": -0.21821579034777655, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.03735433891415596}, {"id": 82, "seek": 45500, "start": 462.4, "end": 464.4, "text": " And everything is done by process.", "tokens": [50734, 400, 1203, 307, 1096, 538, 1399, 13, 50834], "temperature": 0.0, "avg_logprob": -0.21821579034777655, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.03735433891415596}, {"id": 83, "seek": 45500, "start": 464.4, "end": 469.84, "text": " For instance, logging statistics, where it's not implemented yet, but control through a", "tokens": [50834, 1171, 5197, 11, 27991, 12523, 11, 689, 309, 311, 406, 12270, 1939, 11, 457, 1969, 807, 257, 51106], "temperature": 0.0, "avg_logprob": -0.21821579034777655, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.03735433891415596}, {"id": 84, "seek": 45500, "start": 469.84, "end": 473.44, "text": " local socket is also done by a separate process.", "tokens": [51106, 2654, 19741, 307, 611, 1096, 538, 257, 4994, 1399, 13, 51286], "temperature": 0.0, "avg_logprob": -0.21821579034777655, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.03735433891415596}, {"id": 85, "seek": 45500, "start": 473.44, "end": 478.92, "text": " As I said, there is a process for everything.", "tokens": [51286, 1018, 286, 848, 11, 456, 307, 257, 1399, 337, 1203, 13, 51560], "temperature": 0.0, "avg_logprob": -0.21821579034777655, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.03735433891415596}, {"id": 86, "seek": 47892, "start": 478.92, "end": 484.92, "text": " So as consequences, if you crash, if there is an exception, remember it's experimental", "tokens": [50364, 407, 382, 10098, 11, 498, 291, 8252, 11, 498, 456, 307, 364, 11183, 11, 1604, 309, 311, 17069, 50664], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 87, "seek": 47892, "start": 484.92, "end": 488.52000000000004, "text": " code and it's written by me so there are a lot of bugs.", "tokens": [50664, 3089, 293, 309, 311, 3720, 538, 385, 370, 456, 366, 257, 688, 295, 15120, 13, 50844], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 88, "seek": 47892, "start": 488.52000000000004, "end": 490.84000000000003, "text": " But if you crash, you only crash one process.", "tokens": [50844, 583, 498, 291, 8252, 11, 291, 787, 8252, 472, 1399, 13, 50960], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 89, "seek": 47892, "start": 490.84000000000003, "end": 494.44, "text": " You don't take down the entire server.", "tokens": [50960, 509, 500, 380, 747, 760, 264, 2302, 7154, 13, 51140], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 90, "seek": 47892, "start": 494.44, "end": 501.20000000000005, "text": " So that's a very interesting thing because it's one of the motto of the Erlang and Elixir", "tokens": [51140, 407, 300, 311, 257, 588, 1880, 551, 570, 309, 311, 472, 295, 264, 32680, 295, 264, 3300, 25241, 293, 2699, 970, 347, 51478], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 91, "seek": 47892, "start": 501.20000000000005, "end": 504.12, "text": " programmers, let it crash.", "tokens": [51478, 41504, 11, 718, 309, 8252, 13, 51624], "temperature": 0.0, "avg_logprob": -0.1543231161017167, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.13306330144405365}, {"id": 92, "seek": 50412, "start": 504.12, "end": 509.64, "text": " If a process crashes, it's not a big problem as long as the entire server continues to", "tokens": [50364, 759, 257, 1399, 28642, 11, 309, 311, 406, 257, 955, 1154, 382, 938, 382, 264, 2302, 7154, 6515, 281, 50640], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 93, "seek": 50412, "start": 509.64, "end": 511.14, "text": " work.", "tokens": [50640, 589, 13, 50715], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 94, "seek": 50412, "start": 511.14, "end": 516.64, "text": " In the same way, if a request is stuck because you are waiting for something, you are calling", "tokens": [50715, 682, 264, 912, 636, 11, 498, 257, 5308, 307, 5541, 570, 291, 366, 3806, 337, 746, 11, 291, 366, 5141, 50990], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 95, "seek": 50412, "start": 516.64, "end": 521.88, "text": " a microservice somewhere at the other end of the internet and it does not reply or not", "tokens": [50990, 257, 15547, 25006, 4079, 412, 264, 661, 917, 295, 264, 4705, 293, 309, 775, 406, 16972, 420, 406, 51252], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 96, "seek": 50412, "start": 521.88, "end": 530.5600000000001, "text": " immediately, it's not a big problem for drink because all the other requests will continue", "tokens": [51252, 4258, 11, 309, 311, 406, 257, 955, 1154, 337, 2822, 570, 439, 264, 661, 12475, 486, 2354, 51686], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 97, "seek": 50412, "start": 530.5600000000001, "end": 531.64, "text": " to work.", "tokens": [51686, 281, 589, 13, 51740], "temperature": 0.0, "avg_logprob": -0.17135424255042947, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.39980995655059814}, {"id": 98, "seek": 53164, "start": 531.64, "end": 538.64, "text": " Because parallelism is really great and unlike what many people are saying, it's even simpler", "tokens": [50364, 1436, 8952, 1434, 307, 534, 869, 293, 8343, 437, 867, 561, 366, 1566, 11, 309, 311, 754, 18587, 50714], "temperature": 0.0, "avg_logprob": -0.15732720840808956, "compression_ratio": 1.5611814345991561, "no_speech_prob": 0.13773271441459656}, {"id": 99, "seek": 53164, "start": 538.64, "end": 540.8, "text": " than traditional programming.", "tokens": [50714, 813, 5164, 9410, 13, 50822], "temperature": 0.0, "avg_logprob": -0.15732720840808956, "compression_ratio": 1.5611814345991561, "no_speech_prob": 0.13773271441459656}, {"id": 100, "seek": 53164, "start": 540.8, "end": 547.8, "text": " So for TCP, as a consequence, when I programmed it in the Elixir way, pipelining, meaning", "tokens": [50822, 407, 337, 48965, 11, 382, 257, 18326, 11, 562, 286, 31092, 309, 294, 264, 2699, 970, 347, 636, 11, 8489, 338, 1760, 11, 3620, 51172], "temperature": 0.0, "avg_logprob": -0.15732720840808956, "compression_ratio": 1.5611814345991561, "no_speech_prob": 0.13773271441459656}, {"id": 101, "seek": 53164, "start": 547.8, "end": 552.84, "text": " sending several requests over the TCP connection without waiting for the reply of the first", "tokens": [51172, 7750, 2940, 12475, 670, 264, 48965, 4984, 1553, 3806, 337, 264, 16972, 295, 264, 700, 51424], "temperature": 0.0, "avg_logprob": -0.15732720840808956, "compression_ratio": 1.5611814345991561, "no_speech_prob": 0.13773271441459656}, {"id": 102, "seek": 53164, "start": 552.84, "end": 558.92, "text": " one, worked immediately without me having anything to do at all.", "tokens": [51424, 472, 11, 2732, 4258, 1553, 385, 1419, 1340, 281, 360, 412, 439, 13, 51728], "temperature": 0.0, "avg_logprob": -0.15732720840808956, "compression_ratio": 1.5611814345991561, "no_speech_prob": 0.13773271441459656}, {"id": 103, "seek": 55892, "start": 558.92, "end": 566.52, "text": " On out-of-order replies, which are not only allowed in TCP DNS but also mandated by the", "tokens": [50364, 1282, 484, 12, 2670, 12, 4687, 42289, 11, 597, 366, 406, 787, 4350, 294, 48965, 35153, 457, 611, 47563, 538, 264, 50744], "temperature": 0.0, "avg_logprob": -0.2164537828047197, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.20388513803482056}, {"id": 104, "seek": 55892, "start": 566.52, "end": 574.7199999999999, "text": " RFC, work also immediately the first time I tested, it worked without anything specific", "tokens": [50744, 497, 18671, 11, 589, 611, 4258, 264, 700, 565, 286, 8246, 11, 309, 2732, 1553, 1340, 2685, 51154], "temperature": 0.0, "avg_logprob": -0.2164537828047197, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.20388513803482056}, {"id": 105, "seek": 55892, "start": 574.7199999999999, "end": 578.4799999999999, "text": " because every DNS request is a process.", "tokens": [51154, 570, 633, 35153, 5308, 307, 257, 1399, 13, 51342], "temperature": 0.0, "avg_logprob": -0.2164537828047197, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.20388513803482056}, {"id": 106, "seek": 55892, "start": 578.4799999999999, "end": 582.16, "text": " It works in parallel, so you have out-of-order replies.", "tokens": [51342, 467, 1985, 294, 8952, 11, 370, 291, 362, 484, 12, 2670, 12, 4687, 42289, 13, 51526], "temperature": 0.0, "avg_logprob": -0.2164537828047197, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.20388513803482056}, {"id": 107, "seek": 55892, "start": 582.16, "end": 587.48, "text": " Remember that for a typical authoritative name server, out-of-order replies are not", "tokens": [51526, 5459, 300, 337, 257, 7476, 3793, 14275, 1315, 7154, 11, 484, 12, 2670, 12, 4687, 42289, 366, 406, 51792], "temperature": 0.0, "avg_logprob": -0.2164537828047197, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.20388513803482056}, {"id": 108, "seek": 58748, "start": 587.48, "end": 592.32, "text": " necessary because the response time is typically the same for every request.", "tokens": [50364, 4818, 570, 264, 4134, 565, 307, 5850, 264, 912, 337, 633, 5308, 13, 50606], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 109, "seek": 58748, "start": 592.32, "end": 598.48, "text": " So there is not really any point in making out-of-order replies, unlike a resolver for", "tokens": [50606, 407, 456, 307, 406, 534, 604, 935, 294, 1455, 484, 12, 2670, 12, 4687, 42289, 11, 8343, 257, 34480, 337, 50914], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 110, "seek": 58748, "start": 598.48, "end": 599.48, "text": " instance.", "tokens": [50914, 5197, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 111, "seek": 58748, "start": 599.48, "end": 606.8000000000001, "text": " But drink is a bit special because any request can take some time, a lot of time.", "tokens": [50964, 583, 2822, 307, 257, 857, 2121, 570, 604, 5308, 393, 747, 512, 565, 11, 257, 688, 295, 565, 13, 51330], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 112, "seek": 58748, "start": 606.8000000000001, "end": 611.88, "text": " So out-of-order replies are still very important.", "tokens": [51330, 407, 484, 12, 2670, 12, 4687, 42289, 366, 920, 588, 1021, 13, 51584], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 113, "seek": 58748, "start": 611.88, "end": 616.44, "text": " And as I said, parallel programming is simpler, this is something you have to teach to the", "tokens": [51584, 400, 382, 286, 848, 11, 8952, 9410, 307, 18587, 11, 341, 307, 746, 291, 362, 281, 2924, 281, 264, 51812], "temperature": 0.0, "avg_logprob": -0.16919238157946653, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.1545817255973816}, {"id": 114, "seek": 61644, "start": 616.44, "end": 617.44, "text": " students.", "tokens": [50364, 1731, 13, 50414], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 115, "seek": 61644, "start": 617.44, "end": 621.5600000000001, "text": " Parallel programming is not something very complicated that you see only at the end of", "tokens": [50414, 3457, 336, 338, 9410, 307, 406, 746, 588, 6179, 300, 291, 536, 787, 412, 264, 917, 295, 50620], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 116, "seek": 61644, "start": 621.5600000000001, "end": 622.5600000000001, "text": " the year.", "tokens": [50620, 264, 1064, 13, 50670], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 117, "seek": 61644, "start": 622.5600000000001, "end": 630.84, "text": " It's something very simple, very natural, and if you don't use events, everything is fine.", "tokens": [50670, 467, 311, 746, 588, 2199, 11, 588, 3303, 11, 293, 498, 291, 500, 380, 764, 3931, 11, 1203, 307, 2489, 13, 51084], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 118, "seek": 61644, "start": 630.84, "end": 636.24, "text": " And you don't care about things like, this request may block me, yeah, okay, let it block,", "tokens": [51084, 400, 291, 500, 380, 1127, 466, 721, 411, 11, 341, 5308, 815, 3461, 385, 11, 1338, 11, 1392, 11, 718, 309, 3461, 11, 51354], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 119, "seek": 61644, "start": 636.24, "end": 642.1600000000001, "text": " no problem, other process will work.", "tokens": [51354, 572, 1154, 11, 661, 1399, 486, 589, 13, 51650], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 120, "seek": 61644, "start": 642.1600000000001, "end": 645.5600000000001, "text": " So here is an example of Elixir code.", "tokens": [51650, 407, 510, 307, 364, 1365, 295, 2699, 970, 347, 3089, 13, 51820], "temperature": 0.0, "avg_logprob": -0.23375333653818262, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.05679904669523239}, {"id": 121, "seek": 64556, "start": 645.56, "end": 648.68, "text": " It's a functional language, so we use a map a lot.", "tokens": [50364, 467, 311, 257, 11745, 2856, 11, 370, 321, 764, 257, 4471, 257, 688, 13, 50520], "temperature": 0.0, "avg_logprob": -0.2199886745876736, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.102032870054245}, {"id": 122, "seek": 64556, "start": 648.68, "end": 653.4799999999999, "text": " We don't do loops because loops also are an invention of the devil.", "tokens": [50520, 492, 500, 380, 360, 16121, 570, 16121, 611, 366, 364, 22265, 295, 264, 13297, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2199886745876736, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.102032870054245}, {"id": 123, "seek": 64556, "start": 653.4799999999999, "end": 659.4, "text": " So we have a set of IP addresses, and we just map a function.", "tokens": [50760, 407, 321, 362, 257, 992, 295, 8671, 16862, 11, 293, 321, 445, 4471, 257, 2445, 13, 51056], "temperature": 0.0, "avg_logprob": -0.2199886745876736, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.102032870054245}, {"id": 124, "seek": 64556, "start": 659.4, "end": 666.0, "text": " The function simply listen on this address with some options, okay.", "tokens": [51056, 440, 2445, 2935, 2140, 322, 341, 2985, 365, 512, 3956, 11, 1392, 13, 51386], "temperature": 0.0, "avg_logprob": -0.2199886745876736, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.102032870054245}, {"id": 125, "seek": 64556, "start": 666.0, "end": 672.76, "text": " Then you open the socket, and for each socket, you create a server which runs this function,", "tokens": [51386, 1396, 291, 1269, 264, 19741, 11, 293, 337, 1184, 19741, 11, 291, 1884, 257, 7154, 597, 6676, 341, 2445, 11, 51724], "temperature": 0.0, "avg_logprob": -0.2199886745876736, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.102032870054245}, {"id": 126, "seek": 67276, "start": 673.2, "end": 680.4399999999999, "text": " TCP loop acceptor, which will itself create a process for every DNS request received", "tokens": [50386, 48965, 6367, 3241, 284, 11, 597, 486, 2564, 1884, 257, 1399, 337, 633, 35153, 5308, 4613, 50748], "temperature": 0.0, "avg_logprob": -0.2709584045410156, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.029645320028066635}, {"id": 127, "seek": 67276, "start": 680.4399999999999, "end": 683.48, "text": " over the TCP connection.", "tokens": [50748, 670, 264, 48965, 4984, 13, 50900], "temperature": 0.0, "avg_logprob": -0.2709584045410156, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.029645320028066635}, {"id": 128, "seek": 67276, "start": 683.48, "end": 690.96, "text": " And that's all, and it's the end of the function that you map on the set of all IP addresses.", "tokens": [50900, 400, 300, 311, 439, 11, 293, 309, 311, 264, 917, 295, 264, 2445, 300, 291, 4471, 322, 264, 992, 295, 439, 8671, 16862, 13, 51274], "temperature": 0.0, "avg_logprob": -0.2709584045410156, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.029645320028066635}, {"id": 129, "seek": 67276, "start": 690.96, "end": 694.88, "text": " Okay.", "tokens": [51274, 1033, 13, 51470], "temperature": 0.0, "avg_logprob": -0.2709584045410156, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.029645320028066635}, {"id": 130, "seek": 67276, "start": 694.88, "end": 699.6, "text": " Not even a bug in this one, no, I don't think so.", "tokens": [51470, 1726, 754, 257, 7426, 294, 341, 472, 11, 572, 11, 286, 500, 380, 519, 370, 13, 51706], "temperature": 0.0, "avg_logprob": -0.2709584045410156, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.029645320028066635}, {"id": 131, "seek": 69960, "start": 699.6, "end": 704.8000000000001, "text": " Another important point when you write an internet server, whatever type of internet", "tokens": [50364, 3996, 1021, 935, 562, 291, 2464, 364, 4705, 7154, 11, 2035, 2010, 295, 4705, 50624], "temperature": 0.0, "avg_logprob": -0.2232797918185382, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.08360369503498077}, {"id": 132, "seek": 69960, "start": 704.8000000000001, "end": 711.44, "text": " server it is, is of course robustness, because as you know, the internet is hostile.", "tokens": [50624, 7154, 309, 307, 11, 307, 295, 1164, 13956, 1287, 11, 570, 382, 291, 458, 11, 264, 4705, 307, 27312, 13, 50956], "temperature": 0.0, "avg_logprob": -0.2232797918185382, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.08360369503498077}, {"id": 133, "seek": 69960, "start": 711.44, "end": 718.28, "text": " You see a lot of funny things, a lot of funny DNS packets, and sometimes even random binaries", "tokens": [50956, 509, 536, 257, 688, 295, 4074, 721, 11, 257, 688, 295, 4074, 35153, 30364, 11, 293, 2171, 754, 4974, 5171, 4889, 51298], "temperature": 0.0, "avg_logprob": -0.2232797918185382, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.08360369503498077}, {"id": 134, "seek": 69960, "start": 718.28, "end": 720.84, "text": " sent to the 53 port.", "tokens": [51298, 2279, 281, 264, 21860, 2436, 13, 51426], "temperature": 0.0, "avg_logprob": -0.2232797918185382, "compression_ratio": 1.5434782608695652, "no_speech_prob": 0.08360369503498077}, {"id": 135, "seek": 72084, "start": 720.84, "end": 727.52, "text": " So I assume everybody in the room have read LFC 9267.", "tokens": [50364, 407, 286, 6552, 2201, 294, 264, 1808, 362, 1401, 441, 18671, 1722, 10880, 22, 13, 50698], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 136, "seek": 72084, "start": 727.52, "end": 730.1600000000001, "text": " Is that the one that has no work?", "tokens": [50698, 1119, 300, 264, 472, 300, 575, 572, 589, 30, 50830], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 137, "seek": 72084, "start": 730.1600000000001, "end": 731.1600000000001, "text": " Yeah.", "tokens": [50830, 865, 13, 50880], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 138, "seek": 72084, "start": 731.1600000000001, "end": 732.1600000000001, "text": " Okay.", "tokens": [50880, 1033, 13, 50930], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 139, "seek": 72084, "start": 732.1600000000001, "end": 736.36, "text": " It's very good reading if you are interested in DNS implementation, how it works.", "tokens": [50930, 467, 311, 588, 665, 3760, 498, 291, 366, 3102, 294, 35153, 11420, 11, 577, 309, 1985, 13, 51140], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 140, "seek": 72084, "start": 736.36, "end": 743.1600000000001, "text": " Basically, it's a list of the things that can go wrong when you pass DNS request.", "tokens": [51140, 8537, 11, 309, 311, 257, 1329, 295, 264, 721, 300, 393, 352, 2085, 562, 291, 1320, 35153, 5308, 13, 51480], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 141, "seek": 72084, "start": 743.1600000000001, "end": 746.32, "text": " It's not a complete list.", "tokens": [51480, 467, 311, 406, 257, 3566, 1329, 13, 51638], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 142, "seek": 72084, "start": 746.32, "end": 748.88, "text": " So the internet is a dangle.", "tokens": [51638, 407, 264, 4705, 307, 257, 274, 7846, 13, 51766], "temperature": 0.0, "avg_logprob": -0.30557775989021224, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.03265504166483879}, {"id": 143, "seek": 74888, "start": 748.88, "end": 756.0, "text": " In packets can have whatever, literally whatever, everything is possible.", "tokens": [50364, 682, 30364, 393, 362, 2035, 11, 3736, 2035, 11, 1203, 307, 1944, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2281573654769303, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.03072989732027054}, {"id": 144, "seek": 74888, "start": 756.0, "end": 761.6, "text": " And of course, the main example in LFC 9267 are compression pointers, because compression", "tokens": [50720, 400, 295, 1164, 11, 264, 2135, 1365, 294, 441, 18671, 1722, 10880, 22, 366, 19355, 44548, 11, 570, 19355, 51000], "temperature": 0.0, "avg_logprob": -0.2281573654769303, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.03072989732027054}, {"id": 145, "seek": 74888, "start": 761.6, "end": 767.4, "text": " pointers can do things like pointing to themself, pointing outside of the packet.", "tokens": [51000, 44548, 393, 360, 721, 411, 12166, 281, 552, 927, 11, 12166, 2380, 295, 264, 20300, 13, 51290], "temperature": 0.0, "avg_logprob": -0.2281573654769303, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.03072989732027054}, {"id": 146, "seek": 74888, "start": 767.4, "end": 773.68, "text": " So if you program in C in a completely careless way, you can imagine what will happen.", "tokens": [51290, 407, 498, 291, 1461, 294, 383, 294, 257, 2584, 46187, 636, 11, 291, 393, 3811, 437, 486, 1051, 13, 51604], "temperature": 0.0, "avg_logprob": -0.2281573654769303, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.03072989732027054}, {"id": 147, "seek": 77368, "start": 773.68, "end": 778.3199999999999, "text": " And indeed happens in the real world.", "tokens": [50364, 400, 6451, 2314, 294, 264, 957, 1002, 13, 50596], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 148, "seek": 77368, "start": 778.3199999999999, "end": 785.12, "text": " Most of example in the LFC are from DNS mask on the windows, but it can happen to anyone.", "tokens": [50596, 4534, 295, 1365, 294, 264, 441, 18671, 366, 490, 35153, 6094, 322, 264, 9309, 11, 457, 309, 393, 1051, 281, 2878, 13, 50936], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 149, "seek": 77368, "start": 785.12, "end": 790.0799999999999, "text": " EDNS is not mentioned in the LFC, but it can be fun also.", "tokens": [50936, 18050, 42003, 307, 406, 2835, 294, 264, 441, 18671, 11, 457, 309, 393, 312, 1019, 611, 13, 51184], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 150, "seek": 77368, "start": 790.0799999999999, "end": 795.8, "text": " It was specially fun for me because the DNS libraries that I choose, I discovered later", "tokens": [51184, 467, 390, 22549, 1019, 337, 385, 570, 264, 35153, 15148, 300, 286, 2826, 11, 286, 6941, 1780, 51470], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 151, "seek": 77368, "start": 795.8, "end": 798.0, "text": " that it has no support for EDNS.", "tokens": [51470, 300, 309, 575, 572, 1406, 337, 18050, 42003, 13, 51580], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 152, "seek": 77368, "start": 798.0, "end": 800.24, "text": " So EDNS had to be done entirely.", "tokens": [51580, 407, 18050, 42003, 632, 281, 312, 1096, 7696, 13, 51692], "temperature": 0.0, "avg_logprob": -0.261777659257253, "compression_ratio": 1.5694444444444444, "no_speech_prob": 0.1220269650220871}, {"id": 153, "seek": 80024, "start": 800.24, "end": 804.96, "text": " And EDNS options, for instance, are type length value.", "tokens": [50364, 400, 18050, 42003, 3956, 11, 337, 5197, 11, 366, 2010, 4641, 2158, 13, 50600], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 154, "seek": 80024, "start": 804.96, "end": 811.16, "text": " So you can have a length which is too large or too small and make the packet impossible", "tokens": [50600, 407, 291, 393, 362, 257, 4641, 597, 307, 886, 2416, 420, 886, 1359, 293, 652, 264, 20300, 6243, 50910], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 155, "seek": 80024, "start": 811.16, "end": 817.76, "text": " to pass or even worse can trigger a crash of the server or remote code execution in", "tokens": [50910, 281, 1320, 420, 754, 5324, 393, 7875, 257, 8252, 295, 264, 7154, 420, 8607, 3089, 15058, 294, 51240], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 156, "seek": 80024, "start": 817.76, "end": 818.76, "text": " the worst case.", "tokens": [51240, 264, 5855, 1389, 13, 51290], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 157, "seek": 80024, "start": 818.76, "end": 822.8, "text": " If you program in C, this is the sort of thing that can happen.", "tokens": [51290, 759, 291, 1461, 294, 383, 11, 341, 307, 264, 1333, 295, 551, 300, 393, 1051, 13, 51492], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 158, "seek": 80024, "start": 822.8, "end": 826.92, "text": " So here is an example on how to pass EDNS.", "tokens": [51492, 407, 510, 307, 364, 1365, 322, 577, 281, 1320, 18050, 42003, 13, 51698], "temperature": 0.0, "avg_logprob": -0.14107199932666534, "compression_ratio": 1.5442477876106195, "no_speech_prob": 0.021989336237311363}, {"id": 159, "seek": 82692, "start": 826.92, "end": 834.92, "text": " The second line with the brackets, the brackets are when you handle binary data, you extract", "tokens": [50364, 440, 1150, 1622, 365, 264, 26179, 11, 264, 26179, 366, 562, 291, 4813, 17434, 1412, 11, 291, 8947, 50764], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 160, "seek": 82692, "start": 834.92, "end": 835.92, "text": " the code.", "tokens": [50764, 264, 3089, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 161, "seek": 82692, "start": 835.92, "end": 842.04, "text": " And you use for that pattern matching because it's a functional language, LXC relies a lot", "tokens": [50814, 400, 291, 764, 337, 300, 5102, 14324, 570, 309, 311, 257, 11745, 2856, 11, 441, 55, 34, 30910, 257, 688, 51120], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 162, "seek": 82692, "start": 842.04, "end": 843.28, "text": " on pattern matching.", "tokens": [51120, 322, 5102, 14324, 13, 51182], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 163, "seek": 82692, "start": 843.28, "end": 847.24, "text": " So here the equal here is not an assignment.", "tokens": [51182, 407, 510, 264, 2681, 510, 307, 406, 364, 15187, 13, 51380], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 164, "seek": 82692, "start": 847.24, "end": 849.4799999999999, "text": " It simply means that you pattern match.", "tokens": [51380, 467, 2935, 1355, 300, 291, 5102, 2995, 13, 51492], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 165, "seek": 82692, "start": 849.4799999999999, "end": 852.92, "text": " And if it fails, there is an exception.", "tokens": [51492, 400, 498, 309, 18199, 11, 456, 307, 364, 11183, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22785405362589975, "compression_ratio": 1.6298076923076923, "no_speech_prob": 0.07254233211278915}, {"id": 166, "seek": 85292, "start": 852.92, "end": 860.9599999999999, "text": " So binary part which extracts the first two bytes of the data is a safe function, meaning", "tokens": [50364, 407, 17434, 644, 597, 8947, 82, 264, 700, 732, 36088, 295, 264, 1412, 307, 257, 3273, 2445, 11, 3620, 50766], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 167, "seek": 85292, "start": 860.9599999999999, "end": 863.88, "text": " that itself it uses pattern matching.", "tokens": [50766, 300, 2564, 309, 4960, 5102, 14324, 13, 50912], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 168, "seek": 85292, "start": 863.88, "end": 869.92, "text": " If there are, for instance, not enough bytes to get the first two, you will have also an", "tokens": [50912, 759, 456, 366, 11, 337, 5197, 11, 406, 1547, 36088, 281, 483, 264, 700, 732, 11, 291, 486, 362, 611, 364, 51214], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 169, "seek": 85292, "start": 869.92, "end": 871.04, "text": " exception.", "tokens": [51214, 11183, 13, 51270], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 170, "seek": 85292, "start": 871.04, "end": 877.28, "text": " You won't execute a remote code or go outside in the memory or things like that.", "tokens": [51270, 509, 1582, 380, 14483, 257, 8607, 3089, 420, 352, 2380, 294, 264, 4675, 420, 721, 411, 300, 13, 51582], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 171, "seek": 85292, "start": 877.28, "end": 879.04, "text": " Then you do things.", "tokens": [51582, 1396, 291, 360, 721, 13, 51670], "temperature": 0.0, "avg_logprob": -0.16426598748495413, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.05127480626106262}, {"id": 172, "seek": 87904, "start": 879.04, "end": 883.04, "text": " You extract also the length of the packet and then you read the length.", "tokens": [50364, 509, 8947, 611, 264, 4641, 295, 264, 20300, 293, 550, 291, 1401, 264, 4641, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 173, "seek": 87904, "start": 883.04, "end": 888.68, "text": " So if you do this sort of thing in C without paying attention, you can imagine the catastrophic", "tokens": [50564, 407, 498, 291, 360, 341, 1333, 295, 551, 294, 383, 1553, 6229, 3202, 11, 291, 393, 3811, 264, 34915, 50846], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 174, "seek": 87904, "start": 888.68, "end": 890.3199999999999, "text": " thing that can happen.", "tokens": [50846, 551, 300, 393, 1051, 13, 50928], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 175, "seek": 87904, "start": 890.3199999999999, "end": 891.52, "text": " But here it's safe.", "tokens": [50928, 583, 510, 309, 311, 3273, 13, 50988], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 176, "seek": 87904, "start": 891.52, "end": 895.8399999999999, "text": " In the worst case, you will have an exception here because not enough bytes.", "tokens": [50988, 682, 264, 5855, 1389, 11, 291, 486, 362, 364, 11183, 510, 570, 406, 1547, 36088, 13, 51204], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 177, "seek": 87904, "start": 895.8399999999999, "end": 901.48, "text": " So here we trap the exception and we raise a proper exception and then we will return", "tokens": [51204, 407, 510, 321, 11487, 264, 11183, 293, 321, 5300, 257, 2296, 11183, 293, 550, 321, 486, 2736, 51486], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 178, "seek": 87904, "start": 901.48, "end": 905.0799999999999, "text": " form error to the guy.", "tokens": [51486, 1254, 6713, 281, 264, 2146, 13, 51666], "temperature": 0.0, "avg_logprob": -0.18119029998779296, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.21728947758674622}, {"id": 179, "seek": 90508, "start": 905.08, "end": 910.96, "text": " In case you have something unexpected, this may crash, of course.", "tokens": [50364, 682, 1389, 291, 362, 746, 13106, 11, 341, 815, 8252, 11, 295, 1164, 13, 50658], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 180, "seek": 90508, "start": 910.96, "end": 912.76, "text": " It may take down the process.", "tokens": [50658, 467, 815, 747, 760, 264, 1399, 13, 50748], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 181, "seek": 90508, "start": 912.76, "end": 920.44, "text": " But remember, each request is a separate process, so the other request will be fine.", "tokens": [50748, 583, 1604, 11, 1184, 5308, 307, 257, 4994, 1399, 11, 370, 264, 661, 5308, 486, 312, 2489, 13, 51132], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 182, "seek": 90508, "start": 920.44, "end": 921.44, "text": " DNSSEC.", "tokens": [51132, 35153, 5879, 34, 13, 51182], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 183, "seek": 90508, "start": 921.44, "end": 922.44, "text": " Ha!", "tokens": [51182, 4064, 0, 51232], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 184, "seek": 90508, "start": 922.44, "end": 925.64, "text": " DNSSEC is fun.", "tokens": [51232, 35153, 5879, 34, 307, 1019, 13, 51392], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 185, "seek": 90508, "start": 925.64, "end": 931.6800000000001, "text": " Because it's dynamic, you need to have dynamic signing.", "tokens": [51392, 1436, 309, 311, 8546, 11, 291, 643, 281, 362, 8546, 13393, 13, 51694], "temperature": 0.0, "avg_logprob": -0.26839748817154124, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.03455414995551109}, {"id": 186, "seek": 93168, "start": 931.68, "end": 938.0799999999999, "text": " But cryptography, one of the things I really dislike with cryptography is that each bit", "tokens": [50364, 583, 9844, 5820, 11, 472, 295, 264, 721, 286, 534, 26006, 365, 9844, 5820, 307, 300, 1184, 857, 50684], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 187, "seek": 93168, "start": 938.0799999999999, "end": 942.16, "text": " wrong on the signature is completely off the mark.", "tokens": [50684, 2085, 322, 264, 13397, 307, 2584, 766, 264, 1491, 13, 50888], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 188, "seek": 93168, "start": 942.16, "end": 948.76, "text": " So it makes things really difficult to debug because some software tells you that the signature", "tokens": [50888, 407, 309, 1669, 721, 534, 2252, 281, 24083, 570, 512, 4722, 5112, 291, 300, 264, 13397, 51218], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 189, "seek": 93168, "start": 948.76, "end": 949.76, "text": " does not match.", "tokens": [51218, 775, 406, 2995, 13, 51268], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 190, "seek": 93168, "start": 949.76, "end": 951.28, "text": " Okay, what's the problem exactly?", "tokens": [51268, 1033, 11, 437, 311, 264, 1154, 2293, 30, 51344], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 191, "seek": 93168, "start": 951.28, "end": 955.04, "text": " Did I forget a field or did I forget something in the LFC?", "tokens": [51344, 2589, 286, 2870, 257, 2519, 420, 630, 286, 2870, 746, 294, 264, 441, 18671, 30, 51532], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 192, "seek": 93168, "start": 955.04, "end": 958.0, "text": " Ah, yes, something.", "tokens": [51532, 2438, 11, 2086, 11, 746, 13, 51680], "temperature": 0.0, "avg_logprob": -0.22758967902070731, "compression_ratio": 1.6061946902654867, "no_speech_prob": 0.34435275197029114}, {"id": 193, "seek": 95800, "start": 958.0, "end": 965.16, "text": " So an example, a bug that I added, for instance, is that default encoding of the DNS library", "tokens": [50364, 407, 364, 1365, 11, 257, 7426, 300, 286, 3869, 11, 337, 5197, 11, 307, 300, 7576, 43430, 295, 264, 35153, 6405, 50722], "temperature": 0.0, "avg_logprob": -0.15810397653018726, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.04771491140127182}, {"id": 194, "seek": 95800, "start": 965.16, "end": 970.4, "text": " uses compression for the data which is inside the R data.", "tokens": [50722, 4960, 19355, 337, 264, 1412, 597, 307, 1854, 264, 497, 1412, 13, 50984], "temperature": 0.0, "avg_logprob": -0.15810397653018726, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.04771491140127182}, {"id": 195, "seek": 95800, "start": 970.4, "end": 975.32, "text": " So the domain name in the SOA or NS record, for instance.", "tokens": [50984, 407, 264, 9274, 1315, 294, 264, 10621, 32, 420, 15943, 2136, 11, 337, 5197, 13, 51230], "temperature": 0.0, "avg_logprob": -0.15810397653018726, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.04771491140127182}, {"id": 196, "seek": 95800, "start": 975.32, "end": 982.36, "text": " But the LFC about DNSSEC says that the signing has to be done on encoding which is done without", "tokens": [51230, 583, 264, 441, 18671, 466, 35153, 5879, 34, 1619, 300, 264, 13393, 575, 281, 312, 1096, 322, 43430, 597, 307, 1096, 1553, 51582], "temperature": 0.0, "avg_logprob": -0.15810397653018726, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.04771491140127182}, {"id": 197, "seek": 95800, "start": 982.36, "end": 984.72, "text": " any compression.", "tokens": [51582, 604, 19355, 13, 51700], "temperature": 0.0, "avg_logprob": -0.15810397653018726, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.04771491140127182}, {"id": 198, "seek": 98472, "start": 984.72, "end": 989.12, "text": " So it didn't match and it took me some time to figure out what's the problem.", "tokens": [50364, 407, 309, 994, 380, 2995, 293, 309, 1890, 385, 512, 565, 281, 2573, 484, 437, 311, 264, 1154, 13, 50584], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 199, "seek": 98472, "start": 989.12, "end": 995.88, "text": " Also the library I used did not allow to encode without name compression.", "tokens": [50584, 2743, 264, 6405, 286, 1143, 630, 406, 2089, 281, 2058, 1429, 1553, 1315, 19355, 13, 50922], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 200, "seek": 98472, "start": 995.88, "end": 999.0, "text": " So I had to redo everything myself.", "tokens": [50922, 407, 286, 632, 281, 29956, 1203, 2059, 13, 51078], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 201, "seek": 98472, "start": 999.0, "end": 1004.08, "text": " Like most programming projects, Drink was at the beginning, oh, it seems simple, it will", "tokens": [51078, 1743, 881, 9410, 4455, 11, 24529, 390, 412, 264, 2863, 11, 1954, 11, 309, 2544, 2199, 11, 309, 486, 51332], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 202, "seek": 98472, "start": 1004.08, "end": 1006.08, "text": " be done in a weekend.", "tokens": [51332, 312, 1096, 294, 257, 6711, 13, 51432], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 203, "seek": 98472, "start": 1006.08, "end": 1010.76, "text": " And of course, in the end, it was much longer.", "tokens": [51432, 400, 295, 1164, 11, 294, 264, 917, 11, 309, 390, 709, 2854, 13, 51666], "temperature": 0.0, "avg_logprob": -0.17302640955498877, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.05226200819015503}, {"id": 204, "seek": 101076, "start": 1010.76, "end": 1015.3199999999999, "text": " So here is an example of code for signing, again binary data.", "tokens": [50364, 407, 510, 307, 364, 1365, 295, 3089, 337, 13393, 11, 797, 17434, 1412, 13, 50592], "temperature": 0.0, "avg_logprob": -0.21753432724502061, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.08088750392198563}, {"id": 205, "seek": 101076, "start": 1015.3199999999999, "end": 1024.56, "text": " We put all the information that are mandated by the LFC in the pseudo LFC which is then", "tokens": [50592, 492, 829, 439, 264, 1589, 300, 366, 47563, 538, 264, 441, 18671, 294, 264, 35899, 441, 18671, 597, 307, 550, 51054], "temperature": 0.0, "avg_logprob": -0.21753432724502061, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.08088750392198563}, {"id": 206, "seek": 101076, "start": 1024.56, "end": 1027.24, "text": " encoded by myself, unsigned.", "tokens": [51054, 2058, 12340, 538, 2059, 11, 2693, 16690, 13, 51188], "temperature": 0.0, "avg_logprob": -0.21753432724502061, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.08088750392198563}, {"id": 207, "seek": 101076, "start": 1027.24, "end": 1033.96, "text": " There are a few funny tricks, for instance, all domain names has to be put in lower case,", "tokens": [51188, 821, 366, 257, 1326, 4074, 11733, 11, 337, 5197, 11, 439, 9274, 5288, 575, 281, 312, 829, 294, 3126, 1389, 11, 51524], "temperature": 0.0, "avg_logprob": -0.21753432724502061, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.08088750392198563}, {"id": 208, "seek": 101076, "start": 1033.96, "end": 1039.04, "text": " the sort of problem that you discover when you go through a resolver which does case", "tokens": [51524, 264, 1333, 295, 1154, 300, 291, 4411, 562, 291, 352, 807, 257, 34480, 597, 775, 1389, 51778], "temperature": 0.0, "avg_logprob": -0.21753432724502061, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.08088750392198563}, {"id": 209, "seek": 103904, "start": 1039.04, "end": 1042.32, "text": " randomization.", "tokens": [50364, 4974, 2144, 13, 50528], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 210, "seek": 103904, "start": 1042.32, "end": 1050.12, "text": " That's how you learn.", "tokens": [50528, 663, 311, 577, 291, 1466, 13, 50918], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 211, "seek": 103904, "start": 1050.12, "end": 1054.96, "text": " But the most funny in DNSSEC is, of course, negative answers.", "tokens": [50918, 583, 264, 881, 4074, 294, 35153, 5879, 34, 307, 11, 295, 1164, 11, 3671, 6338, 13, 51160], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 212, "seek": 103904, "start": 1054.96, "end": 1061.32, "text": " So Moses came back from the mountain with ten commandments and one says that you should", "tokens": [51160, 407, 17580, 1361, 646, 490, 264, 6937, 365, 2064, 40289, 293, 472, 1619, 300, 291, 820, 51478], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 213, "seek": 103904, "start": 1061.32, "end": 1062.84, "text": " not lie.", "tokens": [51478, 406, 4544, 13, 51554], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 214, "seek": 103904, "start": 1062.84, "end": 1068.84, "text": " But you have to lie here because you have to say that there is nothing between this", "tokens": [51554, 583, 291, 362, 281, 4544, 510, 570, 291, 362, 281, 584, 300, 456, 307, 1825, 1296, 341, 51854], "temperature": 0.0, "avg_logprob": -0.24831436157226563, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.172757089138031}, {"id": 215, "seek": 106884, "start": 1068.84, "end": 1070.32, "text": " name and this name.", "tokens": [50364, 1315, 293, 341, 1315, 13, 50438], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 216, "seek": 106884, "start": 1070.32, "end": 1074.1599999999999, "text": " And you don't know all the names because the server is completely dynamic.", "tokens": [50438, 400, 291, 500, 380, 458, 439, 264, 5288, 570, 264, 7154, 307, 2584, 8546, 13, 50630], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 217, "seek": 106884, "start": 1074.1599999999999, "end": 1080.6, "text": " So Drink used something called white lies which are described in LFC 4470.", "tokens": [50630, 407, 24529, 1143, 746, 1219, 2418, 9134, 597, 366, 7619, 294, 441, 18671, 16408, 5867, 13, 50952], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 218, "seek": 106884, "start": 1080.6, "end": 1085.9599999999998, "text": " So the Ensec record is just a bit before the name to a bit later.", "tokens": [50952, 407, 264, 2193, 8159, 2136, 307, 445, 257, 857, 949, 264, 1315, 281, 257, 857, 1780, 13, 51220], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 219, "seek": 106884, "start": 1085.9599999999998, "end": 1089.36, "text": " It seems simple, but it's very hard to get by.", "tokens": [51220, 467, 2544, 2199, 11, 457, 309, 311, 588, 1152, 281, 483, 538, 13, 51390], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 220, "seek": 106884, "start": 1089.36, "end": 1095.72, "text": " At one step, for instance, when implementing the algorithm of LFC, I had a code which worked", "tokens": [51390, 1711, 472, 1823, 11, 337, 5197, 11, 562, 18114, 264, 9284, 295, 441, 18671, 11, 286, 632, 257, 3089, 597, 2732, 51708], "temperature": 0.0, "avg_logprob": -0.22822440496765742, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.08823064714670181}, {"id": 221, "seek": 109572, "start": 1095.72, "end": 1100.2, "text": " with unbound or not, but failed with bind.", "tokens": [50364, 365, 517, 18767, 420, 406, 11, 457, 7612, 365, 14786, 13, 50588], "temperature": 0.0, "avg_logprob": -0.1750489036635597, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07250656932592392}, {"id": 222, "seek": 109572, "start": 1100.2, "end": 1106.72, "text": " And I never really discovered why, but after some tweaking, it worked.", "tokens": [50588, 400, 286, 1128, 534, 6941, 983, 11, 457, 934, 512, 6986, 2456, 11, 309, 2732, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1750489036635597, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07250656932592392}, {"id": 223, "seek": 109572, "start": 1106.72, "end": 1112.16, "text": " Also encoding of Ensec bitmaps, it's quite interesting, Ensec bitmaps are encoded in", "tokens": [50914, 2743, 43430, 295, 2193, 8159, 857, 76, 2382, 11, 309, 311, 1596, 1880, 11, 2193, 8159, 857, 76, 2382, 366, 2058, 12340, 294, 51186], "temperature": 0.0, "avg_logprob": -0.1750489036635597, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07250656932592392}, {"id": 224, "seek": 109572, "start": 1112.16, "end": 1119.24, "text": " a very clever way, but very hard to get right, especially since LFC has only one test vector.", "tokens": [51186, 257, 588, 13494, 636, 11, 457, 588, 1152, 281, 483, 558, 11, 2318, 1670, 441, 18671, 575, 787, 472, 1500, 8062, 13, 51540], "temperature": 0.0, "avg_logprob": -0.1750489036635597, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07250656932592392}, {"id": 225, "seek": 109572, "start": 1119.24, "end": 1123.48, "text": " So it's very difficult to see if you are on the right track or not.", "tokens": [51540, 407, 309, 311, 588, 2252, 281, 536, 498, 291, 366, 322, 264, 558, 2837, 420, 406, 13, 51752], "temperature": 0.0, "avg_logprob": -0.1750489036635597, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07250656932592392}, {"id": 226, "seek": 112348, "start": 1123.48, "end": 1130.88, "text": " But in the end, it works with, we have everything in LX here necessary, enumerate, it's all", "tokens": [50364, 583, 294, 264, 917, 11, 309, 1985, 365, 11, 321, 362, 1203, 294, 441, 55, 510, 4818, 11, 465, 15583, 473, 11, 309, 311, 439, 50734], "temperature": 0.0, "avg_logprob": -0.22544327149024376, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.06314817816019058}, {"id": 227, "seek": 112348, "start": 1130.88, "end": 1133.04, "text": " the things that you can enumerate.", "tokens": [50734, 264, 721, 300, 291, 393, 465, 15583, 473, 13, 50842], "temperature": 0.0, "avg_logprob": -0.22544327149024376, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.06314817816019058}, {"id": 228, "seek": 112348, "start": 1133.04, "end": 1138.64, "text": " It's a very generic library, so you can do things like finding the minimum, filtering", "tokens": [50842, 467, 311, 257, 588, 19577, 6405, 11, 370, 291, 393, 360, 721, 411, 5006, 264, 7285, 11, 30822, 51122], "temperature": 0.0, "avg_logprob": -0.22544327149024376, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.06314817816019058}, {"id": 229, "seek": 112348, "start": 1138.64, "end": 1145.52, "text": " to extract some data, map to apply a function, et cetera, et cetera, it's cool.", "tokens": [51122, 281, 8947, 512, 1412, 11, 4471, 281, 3079, 257, 2445, 11, 1030, 11458, 11, 1030, 11458, 11, 309, 311, 1627, 13, 51466], "temperature": 0.0, "avg_logprob": -0.22544327149024376, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.06314817816019058}, {"id": 230, "seek": 112348, "start": 1145.52, "end": 1153.16, "text": " Of course you need to test LX here like most programming languages as a framework for testing.", "tokens": [51466, 2720, 1164, 291, 643, 281, 1500, 441, 55, 510, 411, 881, 9410, 8650, 382, 257, 8388, 337, 4997, 13, 51848], "temperature": 0.0, "avg_logprob": -0.22544327149024376, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.06314817816019058}, {"id": 231, "seek": 115316, "start": 1153.16, "end": 1157.8000000000002, "text": " But also I made external tests from a Python program written in Python to be sure that", "tokens": [50364, 583, 611, 286, 1027, 8320, 6921, 490, 257, 15329, 1461, 3720, 294, 15329, 281, 312, 988, 300, 50596], "temperature": 0.0, "avg_logprob": -0.16732080521122103, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.040257181972265244}, {"id": 232, "seek": 115316, "start": 1157.8000000000002, "end": 1163.1200000000001, "text": " I don't have the same bug in both the tester and the testee.", "tokens": [50596, 286, 500, 380, 362, 264, 912, 7426, 294, 1293, 264, 36101, 293, 264, 1500, 1653, 13, 50862], "temperature": 0.0, "avg_logprob": -0.16732080521122103, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.040257181972265244}, {"id": 233, "seek": 115316, "start": 1163.1200000000001, "end": 1168.88, "text": " So it's also especially important in the DNS to test not only with proper DNS request,", "tokens": [50862, 407, 309, 311, 611, 2318, 1021, 294, 264, 35153, 281, 1500, 406, 787, 365, 2296, 35153, 5308, 11, 51150], "temperature": 0.0, "avg_logprob": -0.16732080521122103, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.040257181972265244}, {"id": 234, "seek": 115316, "start": 1168.88, "end": 1172.8400000000001, "text": " but also with broken request to see how the server reacts.", "tokens": [51150, 457, 611, 365, 5463, 5308, 281, 536, 577, 264, 7154, 33305, 13, 51348], "temperature": 0.0, "avg_logprob": -0.16732080521122103, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.040257181972265244}, {"id": 235, "seek": 115316, "start": 1172.8400000000001, "end": 1178.88, "text": " So here is a Python code to create, for instance, an incorrect EDNS option.", "tokens": [51348, 407, 510, 307, 257, 15329, 3089, 281, 1884, 11, 337, 5197, 11, 364, 18424, 18050, 42003, 3614, 13, 51650], "temperature": 0.0, "avg_logprob": -0.16732080521122103, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.040257181972265244}, {"id": 236, "seek": 117888, "start": 1178.88, "end": 1181.0400000000002, "text": " This is a comment on the second line.", "tokens": [50364, 639, 307, 257, 2871, 322, 264, 1150, 1622, 13, 50472], "temperature": 0.0, "avg_logprob": -0.20271887602629485, "compression_ratio": 1.49, "no_speech_prob": 0.2642625570297241}, {"id": 237, "seek": 117888, "start": 1181.0400000000002, "end": 1190.1200000000001, "text": " The length, NSID has no data, but here we put a random length, so any server that will", "tokens": [50472, 440, 4641, 11, 15943, 2777, 575, 572, 1412, 11, 457, 510, 321, 829, 257, 4974, 4641, 11, 370, 604, 7154, 300, 486, 50926], "temperature": 0.0, "avg_logprob": -0.20271887602629485, "compression_ratio": 1.49, "no_speech_prob": 0.2642625570297241}, {"id": 238, "seek": 117888, "start": 1190.1200000000001, "end": 1196.96, "text": " try to decode EDNS stupidly will read too much bytes and something wrong will happen.", "tokens": [50926, 853, 281, 979, 1429, 18050, 42003, 6631, 356, 486, 1401, 886, 709, 36088, 293, 746, 2085, 486, 1051, 13, 51268], "temperature": 0.0, "avg_logprob": -0.20271887602629485, "compression_ratio": 1.49, "no_speech_prob": 0.2642625570297241}, {"id": 239, "seek": 117888, "start": 1196.96, "end": 1204.7600000000002, "text": " So we create this EDNS option for DNS packet, we send it to the server and we hope that", "tokens": [51268, 407, 321, 1884, 341, 18050, 42003, 3614, 337, 35153, 20300, 11, 321, 2845, 309, 281, 264, 7154, 293, 321, 1454, 300, 51658], "temperature": 0.0, "avg_logprob": -0.20271887602629485, "compression_ratio": 1.49, "no_speech_prob": 0.2642625570297241}, {"id": 240, "seek": 120476, "start": 1204.76, "end": 1214.8, "text": " the server will reply as the RFC said with form error, otherwise the test will fail.", "tokens": [50364, 264, 7154, 486, 16972, 382, 264, 497, 18671, 848, 365, 1254, 6713, 11, 5911, 264, 1500, 486, 3061, 13, 50866], "temperature": 0.0, "avg_logprob": -0.3829247792561849, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.19370684027671814}, {"id": 241, "seek": 120476, "start": 1214.8, "end": 1215.96, "text": " And that's all.", "tokens": [50866, 400, 300, 311, 439, 13, 50924], "temperature": 0.0, "avg_logprob": -0.3829247792561849, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.19370684027671814}, {"id": 242, "seek": 121596, "start": 1215.96, "end": 1235.76, "text": " So time for questions.", "tokens": [50364, 407, 565, 337, 1651, 13, 51354], "temperature": 0.0, "avg_logprob": -0.7181968688964844, "compression_ratio": 0.7333333333333333, "no_speech_prob": 0.5056414008140564}, {"id": 243, "seek": 123576, "start": 1235.76, "end": 1246.84, "text": " Yes, that's this.", "tokens": [50364, 1079, 11, 300, 311, 341, 13, 50918], "temperature": 0.0, "avg_logprob": -0.2962151403012483, "compression_ratio": 1.427710843373494, "no_speech_prob": 0.410054475069046}, {"id": 244, "seek": 123576, "start": 1246.84, "end": 1247.84, "text": " Good question.", "tokens": [50918, 2205, 1168, 13, 50968], "temperature": 0.0, "avg_logprob": -0.2962151403012483, "compression_ratio": 1.427710843373494, "no_speech_prob": 0.410054475069046}, {"id": 245, "seek": 123576, "start": 1247.84, "end": 1249.72, "text": " I have to think about it.", "tokens": [50968, 286, 362, 281, 519, 466, 309, 13, 51062], "temperature": 0.0, "avg_logprob": -0.2962151403012483, "compression_ratio": 1.427710843373494, "no_speech_prob": 0.410054475069046}, {"id": 246, "seek": 123576, "start": 1249.72, "end": 1256.48, "text": " The question was about byte order because DNS RFC specifies byte order for things like", "tokens": [51062, 440, 1168, 390, 466, 40846, 1668, 570, 35153, 497, 18671, 1608, 11221, 40846, 1668, 337, 721, 411, 51400], "temperature": 0.0, "avg_logprob": -0.2962151403012483, "compression_ratio": 1.427710843373494, "no_speech_prob": 0.410054475069046}, {"id": 247, "seek": 123576, "start": 1256.48, "end": 1263.24, "text": " a length in EDNS packets, for instance, and it's not explicit in the Elixir code and that's", "tokens": [51400, 257, 4641, 294, 18050, 42003, 30364, 11, 337, 5197, 11, 293, 309, 311, 406, 13691, 294, 264, 2699, 970, 347, 3089, 293, 300, 311, 51738], "temperature": 0.0, "avg_logprob": -0.2962151403012483, "compression_ratio": 1.427710843373494, "no_speech_prob": 0.410054475069046}, {"id": 248, "seek": 126324, "start": 1263.24, "end": 1268.48, "text": " a good question because I don't remember how I did it, but I won the program on several", "tokens": [50364, 257, 665, 1168, 570, 286, 500, 380, 1604, 577, 286, 630, 309, 11, 457, 286, 1582, 264, 1461, 322, 2940, 50626], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 249, "seek": 126324, "start": 1268.48, "end": 1273.64, "text": " machines with different byte order to be sure that it was okay, but I don't remember how", "tokens": [50626, 8379, 365, 819, 40846, 1668, 281, 312, 988, 300, 309, 390, 1392, 11, 457, 286, 500, 380, 1604, 577, 50884], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 250, "seek": 126324, "start": 1273.64, "end": 1277.2, "text": " I did it.", "tokens": [50884, 286, 630, 309, 13, 51062], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 251, "seek": 126324, "start": 1277.2, "end": 1279.08, "text": " That's an interesting question.", "tokens": [51062, 663, 311, 364, 1880, 1168, 13, 51156], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 252, "seek": 126324, "start": 1279.08, "end": 1280.88, "text": " This is a code that I wrote.", "tokens": [51156, 639, 307, 257, 3089, 300, 286, 4114, 13, 51246], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 253, "seek": 126324, "start": 1280.88, "end": 1285.64, "text": " The last code that I wrote was DNSSEC, so DNSSEC is still fresh in my mind.", "tokens": [51246, 440, 1036, 3089, 300, 286, 4114, 390, 35153, 5879, 34, 11, 370, 35153, 5879, 34, 307, 920, 4451, 294, 452, 1575, 13, 51484], "temperature": 0.0, "avg_logprob": -0.23407692037602906, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.45526015758514404}, {"id": 254, "seek": 128564, "start": 1285.64, "end": 1286.64, "text": " The rest is a bit more complicated.", "tokens": [50364, 440, 1472, 307, 257, 857, 544, 6179, 13, 50414], "temperature": 0.0, "avg_logprob": -0.5927484631538391, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.7333047389984131}, {"id": 255, "seek": 128564, "start": 1286.64, "end": 1287.64, "text": " I can probably add to that.", "tokens": [50414, 286, 393, 1391, 909, 281, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.5927484631538391, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.7333047389984131}, {"id": 256, "seek": 128564, "start": 1287.64, "end": 1292.64, "text": " When you specify the binary pattern matching, you can choose how you want it done, and you", "tokens": [50464, 1133, 291, 16500, 264, 17434, 5102, 14324, 11, 291, 393, 2826, 577, 291, 528, 309, 1096, 11, 293, 291, 50714], "temperature": 0.0, "avg_logprob": -0.5927484631538391, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.7333047389984131}, {"id": 257, "seek": 128564, "start": 1292.64, "end": 1301.64, "text": " can specify the elements, and you've got a default in DNS, but I don't remember which", "tokens": [50714, 393, 16500, 264, 4959, 11, 293, 291, 600, 658, 257, 7576, 294, 35153, 11, 457, 286, 500, 380, 1604, 597, 51164], "temperature": 0.0, "avg_logprob": -0.5927484631538391, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.7333047389984131}, {"id": 258, "seek": 130164, "start": 1301.64, "end": 1314.64, "text": " input, which input.", "tokens": [50364, 4846, 11, 597, 4846, 13, 51014], "temperature": 0.4, "avg_logprob": -0.5875511169433594, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.10258999466896057}, {"id": 259, "seek": 130164, "start": 1314.64, "end": 1317.64, "text": " So you mentioned that when you added TCP, the pipelining just worked.", "tokens": [51014, 407, 291, 2835, 300, 562, 291, 3869, 48965, 11, 264, 8489, 338, 1760, 445, 2732, 13, 51164], "temperature": 0.4, "avg_logprob": -0.5875511169433594, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.10258999466896057}, {"id": 260, "seek": 130164, "start": 1317.64, "end": 1321.64, "text": " How does it handle a larger plot if you do not have that?", "tokens": [51164, 1012, 775, 309, 4813, 257, 4833, 7542, 498, 291, 360, 406, 362, 300, 30, 51364], "temperature": 0.4, "avg_logprob": -0.5875511169433594, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.10258999466896057}, {"id": 261, "seek": 130164, "start": 1321.64, "end": 1326.64, "text": " Is it always like the answer comes back and so there's no chance that a big answer has", "tokens": [51364, 1119, 309, 1009, 411, 264, 1867, 1487, 646, 293, 370, 456, 311, 572, 2931, 300, 257, 955, 1867, 575, 51614], "temperature": 0.4, "avg_logprob": -0.5875511169433594, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.10258999466896057}, {"id": 262, "seek": 130164, "start": 1326.64, "end": 1331.6000000000001, "text": " to worry about a small answer arriving while it's being sent to anything like that?", "tokens": [51614, 281, 3292, 466, 257, 1359, 1867, 22436, 1339, 309, 311, 885, 2279, 281, 1340, 411, 300, 30, 51862], "temperature": 0.4, "avg_logprob": -0.5875511169433594, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.10258999466896057}, {"id": 263, "seek": 133160, "start": 1332.6, "end": 1338.6, "text": " So about TCP, when there are some questions or replies that are larger than other or takes", "tokens": [50414, 407, 466, 48965, 11, 562, 456, 366, 512, 1651, 420, 42289, 300, 366, 4833, 813, 661, 420, 2516, 50714], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 264, "seek": 133160, "start": 1338.6, "end": 1341.6, "text": " more time.", "tokens": [50714, 544, 565, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 265, "seek": 133160, "start": 1341.6, "end": 1346.6, "text": " So because of the parallelism and because every DNS request is a separate process, they", "tokens": [50864, 407, 570, 295, 264, 8952, 1434, 293, 570, 633, 35153, 5308, 307, 257, 4994, 1399, 11, 436, 51114], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 266, "seek": 133160, "start": 1346.6, "end": 1348.6, "text": " follow their own path.", "tokens": [51114, 1524, 641, 1065, 3100, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 267, "seek": 133160, "start": 1348.6, "end": 1353.6, "text": " The only case where they meet is when they try to send the reply back.", "tokens": [51214, 440, 787, 1389, 689, 436, 1677, 307, 562, 436, 853, 281, 2845, 264, 16972, 646, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 268, "seek": 133160, "start": 1353.6, "end": 1358.6, "text": " So in that case, it's a long virtual machine which is in charge of being sure that you", "tokens": [51464, 407, 294, 300, 1389, 11, 309, 311, 257, 938, 6374, 3479, 597, 307, 294, 4602, 295, 885, 988, 300, 291, 51714], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 269, "seek": 133160, "start": 1358.6, "end": 1360.6, "text": " cannot interrupt a white operation.", "tokens": [51714, 2644, 12729, 257, 2418, 6916, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19530532383682705, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.25881850719451904}, {"id": 270, "seek": 136060, "start": 1360.6, "end": 1364.6, "text": " So the way it's implemented is that everything goes through a process.", "tokens": [50364, 407, 264, 636, 309, 311, 12270, 307, 300, 1203, 1709, 807, 257, 1399, 13, 50564], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 271, "seek": 136060, "start": 1364.6, "end": 1366.6, "text": " For instance, logging works the same way.", "tokens": [50564, 1171, 5197, 11, 27991, 1985, 264, 912, 636, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 272, "seek": 136060, "start": 1366.6, "end": 1371.6, "text": " We send everything to a logging process which then serializes.", "tokens": [50664, 492, 2845, 1203, 281, 257, 27991, 1399, 597, 550, 17436, 5660, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 273, "seek": 136060, "start": 1371.6, "end": 1373.6, "text": " So we can be sure.", "tokens": [50914, 407, 321, 393, 312, 988, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 274, "seek": 136060, "start": 1373.6, "end": 1378.6, "text": " And also, writing on the socket is done by the Erlang library, not by me, so it cannot", "tokens": [51014, 400, 611, 11, 3579, 322, 264, 19741, 307, 1096, 538, 264, 3300, 25241, 6405, 11, 406, 538, 385, 11, 370, 309, 2644, 51264], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 275, "seek": 136060, "start": 1378.6, "end": 1384.6, "text": " be interrupted, so there is no risk of interleaving replies, if that was your question.", "tokens": [51264, 312, 30329, 11, 370, 456, 307, 572, 3148, 295, 728, 306, 6152, 42289, 11, 498, 300, 390, 428, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15949462615337567, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.07674824446439743}, {"id": 276, "seek": 138460, "start": 1384.6, "end": 1391.6, "text": " On the Erlang socket library also does a few things that are not really important but", "tokens": [50364, 1282, 264, 3300, 25241, 19741, 6405, 611, 775, 257, 1326, 721, 300, 366, 406, 534, 1021, 457, 50714], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 277, "seek": 138460, "start": 1391.6, "end": 1392.6, "text": " are fun.", "tokens": [50714, 366, 1019, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 278, "seek": 138460, "start": 1392.6, "end": 1398.6, "text": " For instance, when creating the socket, maybe you notice this option, packet 2.", "tokens": [50764, 1171, 5197, 11, 562, 4084, 264, 19741, 11, 1310, 291, 3449, 341, 3614, 11, 20300, 568, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 279, "seek": 138460, "start": 1398.6, "end": 1404.6, "text": " It means that two bytes length has to be added automatically, which is good for EPP or for", "tokens": [51064, 467, 1355, 300, 732, 36088, 4641, 575, 281, 312, 3869, 6772, 11, 597, 307, 665, 337, 462, 17755, 420, 337, 51364], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 280, "seek": 138460, "start": 1404.6, "end": 1405.6, "text": " DNS.", "tokens": [51364, 35153, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 281, "seek": 138460, "start": 1405.6, "end": 1410.6, "text": " And also by default, it's in network byte order, which is good again.", "tokens": [51414, 400, 611, 538, 7576, 11, 309, 311, 294, 3209, 40846, 1668, 11, 597, 307, 665, 797, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15624414936880046, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.017549637705087662}, {"id": 282, "seek": 141460, "start": 1415.6, "end": 1418.6, "text": " Oh, performance.", "tokens": [50414, 876, 11, 3389, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 283, "seek": 141460, "start": 1418.6, "end": 1420.6, "text": " Yes, with DNS perf.", "tokens": [50564, 1079, 11, 365, 35153, 13826, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 284, "seek": 141460, "start": 1420.6, "end": 1423.6, "text": " And I compare the drink with NSD.", "tokens": [50664, 400, 286, 6794, 264, 2822, 365, 15943, 35, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 285, "seek": 141460, "start": 1423.6, "end": 1429.6, "text": " Drink is typically three to four times slower, which is expected, of course, because it's", "tokens": [50814, 24529, 307, 5850, 1045, 281, 1451, 1413, 14009, 11, 597, 307, 5176, 11, 295, 1164, 11, 570, 309, 311, 51114], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 286, "seek": 141460, "start": 1429.6, "end": 1430.6, "text": " dynamic.", "tokens": [51114, 8546, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 287, "seek": 141460, "start": 1430.6, "end": 1434.6, "text": " It has not been optimized for speed, and because NSD is very fast.", "tokens": [51164, 467, 575, 406, 668, 26941, 337, 3073, 11, 293, 570, 15943, 35, 307, 588, 2370, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 288, "seek": 141460, "start": 1434.6, "end": 1438.6, "text": " So of course, as you know, performance testing is something complicated.", "tokens": [51364, 407, 295, 1164, 11, 382, 291, 458, 11, 3389, 4997, 307, 746, 6179, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 289, "seek": 141460, "start": 1438.6, "end": 1440.6, "text": " It depends on a lot of things.", "tokens": [51564, 467, 5946, 322, 257, 688, 295, 721, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1464069982369741, "compression_ratio": 1.5315315315315314, "no_speech_prob": 0.05457375571131706}, {"id": 290, "seek": 144060, "start": 1440.6, "end": 1447.6, "text": " So I don't have strong, serious measurements, but the measurements I did on my machine show", "tokens": [50364, 407, 286, 500, 380, 362, 2068, 11, 3156, 15383, 11, 457, 264, 15383, 286, 630, 322, 452, 3479, 855, 50714], "temperature": 0.0, "avg_logprob": -0.09159584228809063, "compression_ratio": 1.4144736842105263, "no_speech_prob": 0.015914099290966988}, {"id": 291, "seek": 144060, "start": 1447.6, "end": 1451.6, "text": " that the difference in performance is, in my opinion, quite acceptable.", "tokens": [50714, 300, 264, 2649, 294, 3389, 307, 11, 294, 452, 4800, 11, 1596, 15513, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09159584228809063, "compression_ratio": 1.4144736842105263, "no_speech_prob": 0.015914099290966988}, {"id": 292, "seek": 144060, "start": 1451.6, "end": 1455.6, "text": " Three times slower than NSD is actually quite good.", "tokens": [50914, 6244, 1413, 14009, 813, 15943, 35, 307, 767, 1596, 665, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09159584228809063, "compression_ratio": 1.4144736842105263, "no_speech_prob": 0.015914099290966988}, {"id": 293, "seek": 145560, "start": 1456.6, "end": 1471.6, "text": " The question is, do I plan to add some caching in it because some questions can take time", "tokens": [50414, 440, 1168, 307, 11, 360, 286, 1393, 281, 909, 512, 269, 2834, 294, 309, 570, 512, 1651, 393, 747, 565, 51164], "temperature": 0.0, "avg_logprob": -0.156726082759117, "compression_ratio": 1.46875, "no_speech_prob": 0.01579931564629078}, {"id": 294, "seek": 145560, "start": 1471.6, "end": 1474.6, "text": " to retrieve or to compute?", "tokens": [51164, 281, 30254, 420, 281, 14722, 30, 51314], "temperature": 0.0, "avg_logprob": -0.156726082759117, "compression_ratio": 1.46875, "no_speech_prob": 0.01579931564629078}, {"id": 295, "seek": 145560, "start": 1474.6, "end": 1475.6, "text": " No.", "tokens": [51314, 883, 13, 51364], "temperature": 0.0, "avg_logprob": -0.156726082759117, "compression_ratio": 1.46875, "no_speech_prob": 0.01579931564629078}, {"id": 296, "seek": 145560, "start": 1475.6, "end": 1481.6, "text": " It's don't think it's, as you know, caching is one of the two or three complicated things", "tokens": [51364, 467, 311, 500, 380, 519, 309, 311, 11, 382, 291, 458, 11, 269, 2834, 307, 472, 295, 264, 732, 420, 1045, 6179, 721, 51664], "temperature": 0.0, "avg_logprob": -0.156726082759117, "compression_ratio": 1.46875, "no_speech_prob": 0.01579931564629078}, {"id": 297, "seek": 145560, "start": 1481.6, "end": 1483.6, "text": " in computer programming.", "tokens": [51664, 294, 3820, 9410, 13, 51764], "temperature": 0.0, "avg_logprob": -0.156726082759117, "compression_ratio": 1.46875, "no_speech_prob": 0.01579931564629078}, {"id": 298, "seek": 148360, "start": 1483.6, "end": 1488.6, "text": " So in my opinion, it's not worth it.", "tokens": [50364, 407, 294, 452, 4800, 11, 309, 311, 406, 3163, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2205280088028818, "compression_ratio": 1.264, "no_speech_prob": 0.006971435155719519}, {"id": 299, "seek": 148360, "start": 1488.6, "end": 1492.6, "text": " Caching can be done by the client, anyway.", "tokens": [50614, 383, 2834, 393, 312, 1096, 538, 264, 6423, 11, 4033, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2205280088028818, "compression_ratio": 1.264, "no_speech_prob": 0.006971435155719519}, {"id": 300, "seek": 148360, "start": 1492.6, "end": 1498.6, "text": " Or you can run the drink behind the NSD, if you will insist.", "tokens": [50814, 1610, 291, 393, 1190, 264, 2822, 2261, 264, 15943, 35, 11, 498, 291, 486, 13466, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2205280088028818, "compression_ratio": 1.264, "no_speech_prob": 0.006971435155719519}, {"id": 301, "seek": 148360, "start": 1498.6, "end": 1500.6, "text": " Thank you, Stefa.", "tokens": [51114, 1044, 291, 11, 3592, 11771, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2205280088028818, "compression_ratio": 1.264, "no_speech_prob": 0.006971435155719519}], "language": "en"}