{"text": " Yeah, so let's go right into the topic. So I'm Alex. I work for Switch. Switch is the national research and education network in Switzerland. Like most countries have something like us, like in Belgium, it's BellNet, and in Germany it's DFN, and in France it's Renataire. So we connect to Swiss universities and universities of applied sciences via the ISP of those institutions. So NetFlow, I'm not sure if everyone is familiar with NetFlow, so I just recaptured the like a central thing about what the network flow actually is. So when you look at an IP packet, you extract the source and destination addresses, the IP protocol, and if the protocol is UDP or TCP, also the source and destination ports, and those five numbers identify a flow. So every packet with the same values is said to belong to the same flow. And then in the simplest possible way, you basically just aggregate, you count the bytes and packets of all the packets that belong to the flow, and then you export this information to a collector where you can then analyze the data. So this is an old thing, like these days people talk about network telemetry, and back in the day when this was developed, that name didn't exist yet, and I'm not sure when exactly Cisco came up with this, but it must have been the early 90s or mid 90s, and it used to be a de facto standard for a long time, but people just figured out what Cisco did and then did the same thing, and then finally got properly standardized with the IPfix IETF standard. And you can do this either in sampled mode or unsampled mode, so unsampled means you look at every single packet and account for it in the flow, and with sampling you just look at every nth packet, and then you have to make certain assumptions to then reconstruct the actual values. So we at Switch, we've been using NetFlow for a very long time as the basic, as the most important metric or means to analyze our data, our network data, since the mid 1990s. It used to be that this was provided by the Rogers themselves, which is reasonable, and the packets passed through that device, and so the device has immediately access to the packets and then can construct the flow data itself. So initially that was done in software, then it was done in hardware. It used to be basically always unsampled, but with the advent of more powerful networking gear, and especially with the arrival of the 100 gig ports, it became basically unfeasible to do this on the Rogers themselves because of typically software restrictions, also hardware restrictions. If you want to do this in software, you usually can because the Rogers are not very powerful in terms of CPU, and in hardware it becomes very expensive. So the vendors started to basically only implement sampled NetFlow, so these days if you buy a Cisco or a Juniper box and you do NetFlow, you get sampling. And sampling is fine, of course, if you're only interested in aggregate data anyway, so big aggregated network flows between networks, for instance, sampling is perfectly fine, you make certain assumptions about the traffic, and then you just upscale it, and you get fairly reasonable numbers. So why would you even want to do unsampled NetFlow? Well, there are some couple of use cases that are really useful. So for instance, in terms of security, one thing that sampling is fine is detect DDoS, for instance, that's volumetric DDoS, that's very simple, so you basically have a constant packet rate, and if you just look at every end packet, it's easy to scale this up. But if you want to detect a bot, for instance, in your network, then it's more difficult. So maybe you want to do this by looking at the communication with the command and control channels, those are short lift flows, and if you do sampling, you're probably going to miss them. But with unsampled NetFlow, you see every single flow, so you can identify these things. And we as a network operator, we use this fairly often to troubleshoot network problems, so if a customer says complaints, you can't reach a certain IP address in the internet, we can actually go look in our flows for the outgoing TCP SYN packet and see whether there's a TCP SYN coming back in. You can do this because we see every single flow, so this is extremely useful. But as I said, so we cannot longer do that on our big new core routers, we can't do that, they only give us sampled NetFlow, so we started to do this with an external box, and that's where this SnapFlow software implementation comes in. Because I mean, there are always ways to do that, but they might be very expensive if you have to buy dedicated hardware, for instance. So just to give an idea of what type of traffic we're dealing with, Switzerland is a small country, we are a small network, and we only do NetFlow on our borders, so when the traffic that we exchange with neighboring networks, and the peak values are these days, it's roughly maybe 180 gigabits per second, something like that, and 20 million packets per second, and roughly 350,000 flows per second, unsampled. And this can actually be even much more. The flow rate, because of the aggressive scanning that's going on for the past couple of years, has started to perform very aggressive network scans, like plain TCP SIN scans, as fast as they can, so sometimes a single host can easily generate 100,000 flows per second. So the actual IPv6 traffic that the export is done in the order of 200 to 300 megabits per second, so the flow records themselves, so this is all for the unsampled flow. The average flow rate is maybe just around 200,000 per second, and the data it generates, the actual NetFlow data is like roughly 1.5 terabits per day, so the actual scaling problem is more on the collector side than. We have 10 gig, 100 gig, and 400 gig ports, so that's what our solution needs to support. So we used to do this historically on the routers themselves until a couple of years ago, then we moved to a commercial NetFlow generator that did that in hardware, which was pretty expensive, maybe the whole solution for one pop was 100,000 euros, something like that, and then we finally moved to SnapFlow and Pure Software. So how do we do this? On the borders, these are all fiber connections, so we have optical splitters, we create a copy of all the traffic flow, and then we have a second device, or the primary device that these tabs are connected to is what we call a packet broker, it's basically a switch that aggregates all the packets and sends it out on 200 gig ports to our actual exporter box. So it uses VLAN tags to identify, so in NetFlow we also want to keep track of the router ports where the traffic was sent or received from, so because then that information gets lost and you aggregate them, so we use VLANs to tag them. The box we use are white box switches based on the Tofino ASIC, the ones that Intel just decided they stopped developing, unfortunately, these are very nice boxes, like there's one with 3,200 gig ports for 5,000 euros, and the other one has 3,200, 400 gig ports and costs about 20,000 euros. The thing is you have to program them yourself and you buy them, they're just plain hardware, and so you can use the P4 language to do this. I link here to another project of mine where I actually developed the P4 program to do that, so that's also part of this entire architecture. And then the traffic gets to the NetFlow exporter box, which is currently just one rack unit, that's basic rack mount server, we use AMD Epics, mainly these days with a fairly large number of cores, that's the way we scale, with the number of cores, NetFlow always scales very well the cores because you just have to make sure that you keep the packets to a flow together. They use, the exporter has a Melonox 2.4, 100 gig card, that's connected to the packet broker, that's where it receives the packets. So in a picture that's what it looks like, on the upper left that would be our border router, on the upper right that would be the bordering router of our neighboring networks, in the middle you have this optical spitter, which is completely on passive box, just as an optical splitter, and then you have this packet broker switch in between that aggregates all the packets and distributes them by flow on these two links currently. So these are now 200 gig ports between the broker and the exporter, we can easily add more ports if that's not sufficient, and on the SnapFlow exporter we can basically just add more cores to be able to scale. So now let's hear Max talk about the actual software. Hello, hello, does this work, good, all right. All right, how do we know how SnapFlow is deployed, I want to talk about how it's built, how it scales, how you configure it, how you monitor your running application, etc. So SnapFlow as the name suggests is built using Snap, Snap is a toolkit for writing high performance networking applications, Snap is written in Lua, using the amazing Lua JIT compiler, and it does packet IO without going through the kernel, like generally the Linux kernel packet networking stack is slow from an ISP perspective, so a Snap bypass is that, uses its own device drivers, and this is also often called kernel bypass networking, I think nowadays it's fairly common, and Snap is open source and independent, we're not sponsored by any vendor in particular. So Snap is built with these three core values in mind, we prefer simple designs over complex designs, we prefer our software to be small rather than large, and we are open, you can read the source, you can understand it, you can modify it, you can rewrite it, etc. So here I have a snippet of code taken directly from SnapFlow, unedited, so this is how the Lua code that powers the usual Snap application sort of looks like, just to give you an idea. In this particular example we read a batch of packets from an incoming link, we extract some metadata that tells us which flow this packet belongs to, then we look up a matching flow in the flow table that we maintain, if we already have a flow we count that packet towards that flow, if not we create a new entry in the flow table. Got one more snippet, this function is called every now and then to actually export the flows, so we walk over a section of the flow table here, and add flow aggregates from that flow table into a next data export record, and if it's time to export the data record we send it off to an IPfix collector, which is a separate program. So from a bird's eye view, SnapFlow works sort of like this, we read packets from a 100 gigabits nick, the garden hole so to speak, we process those packets to extract flow information in a snap process, and then we send off data records over a ton-tap interface to the IPfix collector. So on the right side here you have a device driver written, like that is part of Snap written in Lua, that actually happens like the actual traffic, the bulk of it, and on the left side you have an interface to the Linux network stack, so since the flow export data is rather small in comparison, you can just do that over the regular Linux network stack, and that works. On the very left side you have the IPfix collector, that's a different application, like a separate program that we send the flow data to in the end. So sadly, or I mean I guess just obviously, single CPU core is not enough to handle 100 gigabits of traffic, so instead what we do is we do receive side scaling provided by the network device, this way we can process n different sets of flows on n different processes running on n different CPU cores, so every circle here is a CPU core. And we also support to repeat basically the same trick in software, so we can do another round of received side scaling after filtering the traffic by protocol, and this way we can process for example DNS traffic on different set of cores than IP traffic, like non-DNS IP traffic, and that way we can sort of like segregate the server resources into the workloads that we actually care about. We might for example care more about that we have an accurate general IP flow profile to send to the collectors, and maybe if we still have some time left we will also do some DNS analysis, but we don't want one to slow down the other necessarily. So SNAP programs are organized into independent apps, so an app is like a logical packet processing component, could be for example a device driver or an app that implements the address resolution protocol, and these apps are combined into implications like SNAP flow using links. Links are unidirectional, they really just ring buffers, and any app can have like any number of them to use as input or output for packet data. And you communicate with like you use those links like shown here, that's basically the API that you call link receive on a link to receive a packet, and you call link transmit on an output link to send a packet. So now to forward packets from one CPU core to another CPU core we have this thing called live interlink, these are really just like regular links except that they span process and CPU core boundaries, and you can also use them just like any link, you have the same interface if you want to operate with them, and we use those to implement the software based receive set scaling that I talked about earlier, right? We also have libp3, so libp3 implements a very strict control plane data plane segregation, I think for most networking folks the concept of control plane data plane is pretty common, but just to recap it, control plane is something that basically is fancy and elaborate, you expect it to be really nice, you want to have a nice interface to configure your application and monitor it, the data plane on the other hand you really just want it to work, it should like preferably run at line rate, and you don't really have any time to mess around. So since these like two different parts of the application have very different requirements nice to keep them separate, and that's what we do. We also have libyang, so you see both the configuration and the application state of snap flow are actually managed by described in the yang schema. So for example you can tell the control plane to load a new configuration of snap flow or you can query it for some state counters while it's running, and on this slide I have some examples how you will use the snap command line interface to do those things. So here we have a snippet of the snap flow yang schema, and yang is one of these things where at the beginning you wonder if you're really going to need it, but once that you have it you are usually really happy that you do have it. So what I like specifically about yang is it's very expressive. If a configuration passes the control plane and it doesn't reject it because it says hey this is invalid, I'm pretty confident that this configuration will do something useful in the data plane and it will not just like crash. For example here we have a list of interfaces and one of the fields is a device which is a PCI address and the PCI address in this case this type is attached to some regular expression that makes sure that it actually looks like a PCI address and we kind of just pass any string in there and validate it somewhere way down the line. Like if you don't put a thing that at least looks like a PCI address then this won't even be loaded. So sadly any piece of software has bugs and in our case even suboptimal performance often considered a bug right and we deal with the second issue here with the performance by shipping snap with a flight recorder. So this flight recorder has minimal overhead, it's always on you even run in production preferably and it stores useful data, part of that data is really useful to profile your application after the fact or while it's running. To analyze the collected data we have built a little UI that we used to do that, it's usually running on one of our development servers so we test stuff but you can really run it anywhere. Did I mention snap? I did right? So we're dealing with a JIT compiler here. So the UI shows you stuff that you would expect from a profiler like basically where does my program spend its time but also some JIT related stuff like did the compiler have issues generating efficient code for particular parts of my program. So for example here there's like a JGC column that's like when the injected code the garbage collector is invoked and that's for example something to look out for. And another part of the flight recorder is a high resolution event log. It can give you accurate latency measurements of the pieces that make up your software. And you can see here on the slide that the OUI has or it shows latency histograms for individual events. These events are, some of these events are like already defined in snap but you can also use a defined new event. And here for example I could tell that processing a batch of packets and extracting the flow data so this is like the main IP fix app main loop takes us about 35 microseconds per iteration per process. And this is really useful if you want to debug tail-latencies, right? And tail-latencies translate basically to drop packets in our world so that's something that's really valuable. So to close things, if you were to write a new application based on snap today you would have all these things and more ready at your disposal. And also it is possible to purchase consultancy services like commercial support for snap and developing snap applications from your friendly open source consultancy Igalia, which is my current employer. So yeah, that's all for now, thanks for your attention. On the right there are some pointers if you have some contacts, if you have questions or inquiries about snap or snap flow you can email us there after the conference or for now. If you have any questions, please ask them. Thank you. Please come down. There are some seats available here in the middle. The next speaker is Peter Manev, that is one of the key guys of Suricata, a very popular open source ideas. And today is going to talk about this open source platform. Please have a seat here in the middle.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 29.28, "text": " Yeah, so let's go right into the topic.", "tokens": [865, 11, 370, 718, 311, 352, 558, 666, 264, 4829, 13], "temperature": 0.0, "avg_logprob": -0.5402915954589844, "compression_ratio": 0.8297872340425532, "no_speech_prob": 0.17454460263252258}, {"id": 1, "seek": 2928, "start": 29.28, "end": 30.28, "text": " So I'm Alex.", "tokens": [407, 286, 478, 5202, 13], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 2, "seek": 2928, "start": 30.28, "end": 31.28, "text": " I work for Switch.", "tokens": [286, 589, 337, 13893, 13], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 3, "seek": 2928, "start": 31.28, "end": 35.160000000000004, "text": " Switch is the national research and education network in Switzerland.", "tokens": [13893, 307, 264, 4048, 2132, 293, 3309, 3209, 294, 23312, 13], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 4, "seek": 2928, "start": 35.160000000000004, "end": 40.72, "text": " Like most countries have something like us, like in Belgium, it's BellNet, and in Germany", "tokens": [1743, 881, 3517, 362, 746, 411, 505, 11, 411, 294, 28094, 11, 309, 311, 11485, 31890, 11, 293, 294, 7244], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 5, "seek": 2928, "start": 40.72, "end": 43.160000000000004, "text": " it's DFN, and in France it's Renataire.", "tokens": [309, 311, 48336, 45, 11, 293, 294, 6190, 309, 311, 12883, 3274, 621, 13], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 6, "seek": 2928, "start": 43.160000000000004, "end": 52.32, "text": " So we connect to Swiss universities and universities of applied sciences via the ISP of those institutions.", "tokens": [407, 321, 1745, 281, 21965, 11779, 293, 11779, 295, 6456, 17677, 5766, 264, 6205, 47, 295, 729, 8142, 13], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 7, "seek": 2928, "start": 52.32, "end": 57.760000000000005, "text": " So NetFlow, I'm not sure if everyone is familiar with NetFlow, so I just recaptured the like", "tokens": [407, 6188, 31091, 11, 286, 478, 406, 988, 498, 1518, 307, 4963, 365, 6188, 31091, 11, 370, 286, 445, 43086, 662, 3831, 264, 411], "temperature": 0.0, "avg_logprob": -0.2714810120432, "compression_ratio": 1.6059479553903346, "no_speech_prob": 0.000868355855345726}, {"id": 8, "seek": 5776, "start": 57.76, "end": 61.76, "text": " a central thing about what the network flow actually is.", "tokens": [257, 5777, 551, 466, 437, 264, 3209, 3095, 767, 307, 13], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 9, "seek": 5776, "start": 61.76, "end": 65.8, "text": " So when you look at an IP packet, you extract the source and destination addresses, the", "tokens": [407, 562, 291, 574, 412, 364, 8671, 20300, 11, 291, 8947, 264, 4009, 293, 12236, 16862, 11, 264], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 10, "seek": 5776, "start": 65.8, "end": 71.24, "text": " IP protocol, and if the protocol is UDP or TCP, also the source and destination ports,", "tokens": [8671, 10336, 11, 293, 498, 264, 10336, 307, 624, 11373, 420, 48965, 11, 611, 264, 4009, 293, 12236, 18160, 11], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 11, "seek": 5776, "start": 71.24, "end": 75.28, "text": " and those five numbers identify a flow.", "tokens": [293, 729, 1732, 3547, 5876, 257, 3095, 13], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 12, "seek": 5776, "start": 75.28, "end": 80.92, "text": " So every packet with the same values is said to belong to the same flow.", "tokens": [407, 633, 20300, 365, 264, 912, 4190, 307, 848, 281, 5784, 281, 264, 912, 3095, 13], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 13, "seek": 5776, "start": 80.92, "end": 86.24, "text": " And then in the simplest possible way, you basically just aggregate, you count the bytes", "tokens": [400, 550, 294, 264, 22811, 1944, 636, 11, 291, 1936, 445, 26118, 11, 291, 1207, 264, 36088], "temperature": 0.0, "avg_logprob": -0.13714442803309515, "compression_ratio": 1.7250996015936255, "no_speech_prob": 9.368736937176436e-05}, {"id": 14, "seek": 8624, "start": 86.24, "end": 91.67999999999999, "text": " and packets of all the packets that belong to the flow, and then you export this information", "tokens": [293, 30364, 295, 439, 264, 30364, 300, 5784, 281, 264, 3095, 11, 293, 550, 291, 10725, 341, 1589], "temperature": 0.0, "avg_logprob": -0.14202385128669018, "compression_ratio": 1.64, "no_speech_prob": 2.7049351047025993e-05}, {"id": 15, "seek": 8624, "start": 91.67999999999999, "end": 97.72, "text": " to a collector where you can then analyze the data.", "tokens": [281, 257, 23960, 689, 291, 393, 550, 12477, 264, 1412, 13], "temperature": 0.0, "avg_logprob": -0.14202385128669018, "compression_ratio": 1.64, "no_speech_prob": 2.7049351047025993e-05}, {"id": 16, "seek": 8624, "start": 97.72, "end": 102.63999999999999, "text": " So this is an old thing, like these days people talk about network telemetry, and back in", "tokens": [407, 341, 307, 364, 1331, 551, 11, 411, 613, 1708, 561, 751, 466, 3209, 4304, 5537, 627, 11, 293, 646, 294], "temperature": 0.0, "avg_logprob": -0.14202385128669018, "compression_ratio": 1.64, "no_speech_prob": 2.7049351047025993e-05}, {"id": 17, "seek": 8624, "start": 102.63999999999999, "end": 107.03999999999999, "text": " the day when this was developed, that name didn't exist yet, and I'm not sure when exactly", "tokens": [264, 786, 562, 341, 390, 4743, 11, 300, 1315, 994, 380, 2514, 1939, 11, 293, 286, 478, 406, 988, 562, 2293], "temperature": 0.0, "avg_logprob": -0.14202385128669018, "compression_ratio": 1.64, "no_speech_prob": 2.7049351047025993e-05}, {"id": 18, "seek": 8624, "start": 107.03999999999999, "end": 111.8, "text": " Cisco came up with this, but it must have been the early 90s or mid 90s, and it used", "tokens": [38528, 1361, 493, 365, 341, 11, 457, 309, 1633, 362, 668, 264, 2440, 4289, 82, 420, 2062, 4289, 82, 11, 293, 309, 1143], "temperature": 0.0, "avg_logprob": -0.14202385128669018, "compression_ratio": 1.64, "no_speech_prob": 2.7049351047025993e-05}, {"id": 19, "seek": 11180, "start": 111.8, "end": 117.8, "text": " to be a de facto standard for a long time, but people just figured out what Cisco did", "tokens": [281, 312, 257, 368, 42225, 3832, 337, 257, 938, 565, 11, 457, 561, 445, 8932, 484, 437, 38528, 630], "temperature": 0.0, "avg_logprob": -0.1706713224712171, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.505545232153963e-06}, {"id": 20, "seek": 11180, "start": 117.8, "end": 125.12, "text": " and then did the same thing, and then finally got properly standardized with the IPfix IETF", "tokens": [293, 550, 630, 264, 912, 551, 11, 293, 550, 2721, 658, 6108, 31677, 365, 264, 8671, 69, 970, 286, 4850, 37], "temperature": 0.0, "avg_logprob": -0.1706713224712171, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.505545232153963e-06}, {"id": 21, "seek": 11180, "start": 125.12, "end": 126.67999999999999, "text": " standard.", "tokens": [3832, 13], "temperature": 0.0, "avg_logprob": -0.1706713224712171, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.505545232153963e-06}, {"id": 22, "seek": 11180, "start": 126.67999999999999, "end": 132.16, "text": " And you can do this either in sampled mode or unsampled mode, so unsampled means you look", "tokens": [400, 291, 393, 360, 341, 2139, 294, 3247, 15551, 4391, 420, 2693, 335, 15551, 4391, 11, 370, 2693, 335, 15551, 1355, 291, 574], "temperature": 0.0, "avg_logprob": -0.1706713224712171, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.505545232153963e-06}, {"id": 23, "seek": 11180, "start": 132.16, "end": 136.4, "text": " at every single packet and account for it in the flow, and with sampling you just look", "tokens": [412, 633, 2167, 20300, 293, 2696, 337, 309, 294, 264, 3095, 11, 293, 365, 21179, 291, 445, 574], "temperature": 0.0, "avg_logprob": -0.1706713224712171, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.505545232153963e-06}, {"id": 24, "seek": 13640, "start": 136.4, "end": 146.8, "text": " at every nth packet, and then you have to make certain assumptions to then reconstruct", "tokens": [412, 633, 297, 392, 20300, 11, 293, 550, 291, 362, 281, 652, 1629, 17695, 281, 550, 31499], "temperature": 0.0, "avg_logprob": -0.16917717293517232, "compression_ratio": 1.4659685863874345, "no_speech_prob": 2.790629878290929e-05}, {"id": 25, "seek": 13640, "start": 146.8, "end": 148.76, "text": " the actual values.", "tokens": [264, 3539, 4190, 13], "temperature": 0.0, "avg_logprob": -0.16917717293517232, "compression_ratio": 1.4659685863874345, "no_speech_prob": 2.790629878290929e-05}, {"id": 26, "seek": 13640, "start": 148.76, "end": 154.76, "text": " So we at Switch, we've been using NetFlow for a very long time as the basic, as the most", "tokens": [407, 321, 412, 13893, 11, 321, 600, 668, 1228, 6188, 31091, 337, 257, 588, 938, 565, 382, 264, 3875, 11, 382, 264, 881], "temperature": 0.0, "avg_logprob": -0.16917717293517232, "compression_ratio": 1.4659685863874345, "no_speech_prob": 2.790629878290929e-05}, {"id": 27, "seek": 13640, "start": 154.76, "end": 164.44, "text": " important metric or means to analyze our data, our network data, since the mid 1990s.", "tokens": [1021, 20678, 420, 1355, 281, 12477, 527, 1412, 11, 527, 3209, 1412, 11, 1670, 264, 2062, 13384, 82, 13], "temperature": 0.0, "avg_logprob": -0.16917717293517232, "compression_ratio": 1.4659685863874345, "no_speech_prob": 2.790629878290929e-05}, {"id": 28, "seek": 16444, "start": 164.44, "end": 169.2, "text": " It used to be that this was provided by the Rogers themselves, which is reasonable, and", "tokens": [467, 1143, 281, 312, 300, 341, 390, 5649, 538, 264, 29877, 2969, 11, 597, 307, 10585, 11, 293], "temperature": 0.0, "avg_logprob": -0.1513240471314848, "compression_ratio": 1.6943231441048034, "no_speech_prob": 7.175861810537754e-06}, {"id": 29, "seek": 16444, "start": 169.2, "end": 175.68, "text": " the packets passed through that device, and so the device has immediately access to the", "tokens": [264, 30364, 4678, 807, 300, 4302, 11, 293, 370, 264, 4302, 575, 4258, 2105, 281, 264], "temperature": 0.0, "avg_logprob": -0.1513240471314848, "compression_ratio": 1.6943231441048034, "no_speech_prob": 7.175861810537754e-06}, {"id": 30, "seek": 16444, "start": 175.68, "end": 180.2, "text": " packets and then can construct the flow data itself.", "tokens": [30364, 293, 550, 393, 7690, 264, 3095, 1412, 2564, 13], "temperature": 0.0, "avg_logprob": -0.1513240471314848, "compression_ratio": 1.6943231441048034, "no_speech_prob": 7.175861810537754e-06}, {"id": 31, "seek": 16444, "start": 180.2, "end": 184.07999999999998, "text": " So initially that was done in software, then it was done in hardware.", "tokens": [407, 9105, 300, 390, 1096, 294, 4722, 11, 550, 309, 390, 1096, 294, 8837, 13], "temperature": 0.0, "avg_logprob": -0.1513240471314848, "compression_ratio": 1.6943231441048034, "no_speech_prob": 7.175861810537754e-06}, {"id": 32, "seek": 16444, "start": 184.07999999999998, "end": 191.44, "text": " It used to be basically always unsampled, but with the advent of more powerful networking", "tokens": [467, 1143, 281, 312, 1936, 1009, 2693, 335, 15551, 11, 457, 365, 264, 7045, 295, 544, 4005, 17985], "temperature": 0.0, "avg_logprob": -0.1513240471314848, "compression_ratio": 1.6943231441048034, "no_speech_prob": 7.175861810537754e-06}, {"id": 33, "seek": 19144, "start": 191.44, "end": 197.8, "text": " gear, and especially with the arrival of the 100 gig ports, it became basically unfeasible", "tokens": [7394, 11, 293, 2318, 365, 264, 18365, 295, 264, 2319, 8741, 18160, 11, 309, 3062, 1936, 517, 2106, 296, 964], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 34, "seek": 19144, "start": 197.8, "end": 204.52, "text": " to do this on the Rogers themselves because of typically software restrictions, also hardware", "tokens": [281, 360, 341, 322, 264, 29877, 2969, 570, 295, 5850, 4722, 14191, 11, 611, 8837], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 35, "seek": 19144, "start": 204.52, "end": 205.52, "text": " restrictions.", "tokens": [14191, 13], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 36, "seek": 19144, "start": 205.52, "end": 209.12, "text": " If you want to do this in software, you usually can because the Rogers are not very powerful", "tokens": [759, 291, 528, 281, 360, 341, 294, 4722, 11, 291, 2673, 393, 570, 264, 29877, 366, 406, 588, 4005], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 37, "seek": 19144, "start": 209.12, "end": 213.04, "text": " in terms of CPU, and in hardware it becomes very expensive.", "tokens": [294, 2115, 295, 13199, 11, 293, 294, 8837, 309, 3643, 588, 5124, 13], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 38, "seek": 19144, "start": 213.04, "end": 218.24, "text": " So the vendors started to basically only implement sampled NetFlow, so these days if you buy a", "tokens": [407, 264, 22056, 1409, 281, 1936, 787, 4445, 3247, 15551, 6188, 31091, 11, 370, 613, 1708, 498, 291, 2256, 257], "temperature": 0.0, "avg_logprob": -0.1271107590314254, "compression_ratio": 1.7421875, "no_speech_prob": 2.7013842554879375e-05}, {"id": 39, "seek": 21824, "start": 218.24, "end": 224.60000000000002, "text": " Cisco or a Juniper box and you do NetFlow, you get sampling.", "tokens": [38528, 420, 257, 8492, 15402, 2424, 293, 291, 360, 6188, 31091, 11, 291, 483, 21179, 13], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 40, "seek": 21824, "start": 224.60000000000002, "end": 228.56, "text": " And sampling is fine, of course, if you're only interested in aggregate data anyway,", "tokens": [400, 21179, 307, 2489, 11, 295, 1164, 11, 498, 291, 434, 787, 3102, 294, 26118, 1412, 4033, 11], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 41, "seek": 21824, "start": 228.56, "end": 234.64000000000001, "text": " so big aggregated network flows between networks, for instance, sampling is perfectly fine,", "tokens": [370, 955, 16743, 770, 3209, 12867, 1296, 9590, 11, 337, 5197, 11, 21179, 307, 6239, 2489, 11], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 42, "seek": 21824, "start": 234.64000000000001, "end": 240.16000000000003, "text": " you make certain assumptions about the traffic, and then you just upscale it, and you get", "tokens": [291, 652, 1629, 17695, 466, 264, 6419, 11, 293, 550, 291, 445, 493, 20033, 309, 11, 293, 291, 483], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 43, "seek": 21824, "start": 240.16000000000003, "end": 241.92000000000002, "text": " fairly reasonable numbers.", "tokens": [6457, 10585, 3547, 13], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 44, "seek": 21824, "start": 241.92000000000002, "end": 245.20000000000002, "text": " So why would you even want to do unsampled NetFlow?", "tokens": [407, 983, 576, 291, 754, 528, 281, 360, 2693, 335, 15551, 6188, 31091, 30], "temperature": 0.0, "avg_logprob": -0.16759913575415517, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.2453246856457554e-05}, {"id": 45, "seek": 24520, "start": 245.2, "end": 250.76, "text": " Well, there are some couple of use cases that are really useful.", "tokens": [1042, 11, 456, 366, 512, 1916, 295, 764, 3331, 300, 366, 534, 4420, 13], "temperature": 0.0, "avg_logprob": -0.12332740716174641, "compression_ratio": 1.7219917012448134, "no_speech_prob": 1.9196089851902798e-05}, {"id": 46, "seek": 24520, "start": 250.76, "end": 256.76, "text": " So for instance, in terms of security, one thing that sampling is fine is detect DDoS,", "tokens": [407, 337, 5197, 11, 294, 2115, 295, 3825, 11, 472, 551, 300, 21179, 307, 2489, 307, 5531, 413, 7653, 50, 11], "temperature": 0.0, "avg_logprob": -0.12332740716174641, "compression_ratio": 1.7219917012448134, "no_speech_prob": 1.9196089851902798e-05}, {"id": 47, "seek": 24520, "start": 256.76, "end": 261.84, "text": " for instance, that's volumetric DDoS, that's very simple, so you basically have a constant", "tokens": [337, 5197, 11, 300, 311, 1996, 449, 17475, 413, 7653, 50, 11, 300, 311, 588, 2199, 11, 370, 291, 1936, 362, 257, 5754], "temperature": 0.0, "avg_logprob": -0.12332740716174641, "compression_ratio": 1.7219917012448134, "no_speech_prob": 1.9196089851902798e-05}, {"id": 48, "seek": 24520, "start": 261.84, "end": 266.0, "text": " packet rate, and if you just look at every end packet, it's easy to scale this up.", "tokens": [20300, 3314, 11, 293, 498, 291, 445, 574, 412, 633, 917, 20300, 11, 309, 311, 1858, 281, 4373, 341, 493, 13], "temperature": 0.0, "avg_logprob": -0.12332740716174641, "compression_ratio": 1.7219917012448134, "no_speech_prob": 1.9196089851902798e-05}, {"id": 49, "seek": 24520, "start": 266.0, "end": 271.28, "text": " But if you want to detect a bot, for instance, in your network, then it's more difficult.", "tokens": [583, 498, 291, 528, 281, 5531, 257, 10592, 11, 337, 5197, 11, 294, 428, 3209, 11, 550, 309, 311, 544, 2252, 13], "temperature": 0.0, "avg_logprob": -0.12332740716174641, "compression_ratio": 1.7219917012448134, "no_speech_prob": 1.9196089851902798e-05}, {"id": 50, "seek": 27128, "start": 271.28, "end": 276.67999999999995, "text": " So maybe you want to do this by looking at the communication with the command and control", "tokens": [407, 1310, 291, 528, 281, 360, 341, 538, 1237, 412, 264, 6101, 365, 264, 5622, 293, 1969], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 51, "seek": 27128, "start": 276.67999999999995, "end": 283.44, "text": " channels, those are short lift flows, and if you do sampling, you're probably going", "tokens": [9235, 11, 729, 366, 2099, 5533, 12867, 11, 293, 498, 291, 360, 21179, 11, 291, 434, 1391, 516], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 52, "seek": 27128, "start": 283.44, "end": 284.44, "text": " to miss them.", "tokens": [281, 1713, 552, 13], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 53, "seek": 27128, "start": 284.44, "end": 289.88, "text": " But with unsampled NetFlow, you see every single flow, so you can identify these things.", "tokens": [583, 365, 2693, 335, 15551, 6188, 31091, 11, 291, 536, 633, 2167, 3095, 11, 370, 291, 393, 5876, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 54, "seek": 27128, "start": 289.88, "end": 294.32, "text": " And we as a network operator, we use this fairly often to troubleshoot network problems,", "tokens": [400, 321, 382, 257, 3209, 12973, 11, 321, 764, 341, 6457, 2049, 281, 15379, 24467, 3209, 2740, 11], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 55, "seek": 27128, "start": 294.32, "end": 299.52, "text": " so if a customer says complaints, you can't reach a certain IP address in the internet,", "tokens": [370, 498, 257, 5474, 1619, 19585, 11, 291, 393, 380, 2524, 257, 1629, 8671, 2985, 294, 264, 4705, 11], "temperature": 0.0, "avg_logprob": -0.15649745700595616, "compression_ratio": 1.6178571428571429, "no_speech_prob": 1.8317054127692245e-05}, {"id": 56, "seek": 29952, "start": 299.52, "end": 304.2, "text": " we can actually go look in our flows for the outgoing TCP SYN packet and see whether there's", "tokens": [321, 393, 767, 352, 574, 294, 527, 12867, 337, 264, 41565, 48965, 318, 22315, 20300, 293, 536, 1968, 456, 311], "temperature": 0.0, "avg_logprob": -0.17958343142554872, "compression_ratio": 1.596638655462185, "no_speech_prob": 1.8320666640647687e-05}, {"id": 57, "seek": 29952, "start": 304.2, "end": 306.59999999999997, "text": " a TCP SYN coming back in.", "tokens": [257, 48965, 318, 22315, 1348, 646, 294, 13], "temperature": 0.0, "avg_logprob": -0.17958343142554872, "compression_ratio": 1.596638655462185, "no_speech_prob": 1.8320666640647687e-05}, {"id": 58, "seek": 29952, "start": 306.59999999999997, "end": 312.79999999999995, "text": " You can do this because we see every single flow, so this is extremely useful.", "tokens": [509, 393, 360, 341, 570, 321, 536, 633, 2167, 3095, 11, 370, 341, 307, 4664, 4420, 13], "temperature": 0.0, "avg_logprob": -0.17958343142554872, "compression_ratio": 1.596638655462185, "no_speech_prob": 1.8320666640647687e-05}, {"id": 59, "seek": 29952, "start": 312.79999999999995, "end": 319.79999999999995, "text": " But as I said, so we cannot longer do that on our big new core routers, we can't do that,", "tokens": [583, 382, 286, 848, 11, 370, 321, 2644, 2854, 360, 300, 322, 527, 955, 777, 4965, 4020, 433, 11, 321, 393, 380, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.17958343142554872, "compression_ratio": 1.596638655462185, "no_speech_prob": 1.8320666640647687e-05}, {"id": 60, "seek": 29952, "start": 319.79999999999995, "end": 326.88, "text": " they only give us sampled NetFlow, so we started to do this with an external box, and that's", "tokens": [436, 787, 976, 505, 3247, 15551, 6188, 31091, 11, 370, 321, 1409, 281, 360, 341, 365, 364, 8320, 2424, 11, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.17958343142554872, "compression_ratio": 1.596638655462185, "no_speech_prob": 1.8320666640647687e-05}, {"id": 61, "seek": 32688, "start": 326.88, "end": 333.08, "text": " where this SnapFlow software implementation comes in.", "tokens": [689, 341, 18254, 31091, 4722, 11420, 1487, 294, 13], "temperature": 0.0, "avg_logprob": -0.19322633743286133, "compression_ratio": 1.5183673469387755, "no_speech_prob": 3.364853182574734e-05}, {"id": 62, "seek": 32688, "start": 333.08, "end": 336.71999999999997, "text": " Because I mean, there are always ways to do that, but they might be very expensive if", "tokens": [1436, 286, 914, 11, 456, 366, 1009, 2098, 281, 360, 300, 11, 457, 436, 1062, 312, 588, 5124, 498], "temperature": 0.0, "avg_logprob": -0.19322633743286133, "compression_ratio": 1.5183673469387755, "no_speech_prob": 3.364853182574734e-05}, {"id": 63, "seek": 32688, "start": 336.71999999999997, "end": 340.96, "text": " you have to buy dedicated hardware, for instance.", "tokens": [291, 362, 281, 2256, 8374, 8837, 11, 337, 5197, 13], "temperature": 0.0, "avg_logprob": -0.19322633743286133, "compression_ratio": 1.5183673469387755, "no_speech_prob": 3.364853182574734e-05}, {"id": 64, "seek": 32688, "start": 340.96, "end": 346.12, "text": " So just to give an idea of what type of traffic we're dealing with, Switzerland is a small", "tokens": [407, 445, 281, 976, 364, 1558, 295, 437, 2010, 295, 6419, 321, 434, 6260, 365, 11, 23312, 307, 257, 1359], "temperature": 0.0, "avg_logprob": -0.19322633743286133, "compression_ratio": 1.5183673469387755, "no_speech_prob": 3.364853182574734e-05}, {"id": 65, "seek": 32688, "start": 346.12, "end": 352.12, "text": " country, we are a small network, and we only do NetFlow on our borders, so when the traffic", "tokens": [1941, 11, 321, 366, 257, 1359, 3209, 11, 293, 321, 787, 360, 6188, 31091, 322, 527, 16287, 11, 370, 562, 264, 6419], "temperature": 0.0, "avg_logprob": -0.19322633743286133, "compression_ratio": 1.5183673469387755, "no_speech_prob": 3.364853182574734e-05}, {"id": 66, "seek": 35212, "start": 352.12, "end": 359.12, "text": " that we exchange with neighboring networks, and the peak values are these days, it's roughly", "tokens": [300, 321, 7742, 365, 31521, 9590, 11, 293, 264, 10651, 4190, 366, 613, 1708, 11, 309, 311, 9810], "temperature": 0.0, "avg_logprob": -0.17495065207009788, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.875206675729714e-05}, {"id": 67, "seek": 35212, "start": 359.12, "end": 366.12, "text": " maybe 180 gigabits per second, something like that, and 20 million packets per second,", "tokens": [1310, 11971, 8741, 455, 1208, 680, 1150, 11, 746, 411, 300, 11, 293, 945, 2459, 30364, 680, 1150, 11], "temperature": 0.0, "avg_logprob": -0.17495065207009788, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.875206675729714e-05}, {"id": 68, "seek": 35212, "start": 366.12, "end": 371.8, "text": " and roughly 350,000 flows per second, unsampled.", "tokens": [293, 9810, 18065, 11, 1360, 12867, 680, 1150, 11, 2693, 335, 15551, 13], "temperature": 0.0, "avg_logprob": -0.17495065207009788, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.875206675729714e-05}, {"id": 69, "seek": 35212, "start": 371.8, "end": 374.16, "text": " And this can actually be even much more.", "tokens": [400, 341, 393, 767, 312, 754, 709, 544, 13], "temperature": 0.0, "avg_logprob": -0.17495065207009788, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.875206675729714e-05}, {"id": 70, "seek": 35212, "start": 374.16, "end": 379.32, "text": " The flow rate, because of the aggressive scanning that's going on for the past couple of years,", "tokens": [440, 3095, 3314, 11, 570, 295, 264, 10762, 27019, 300, 311, 516, 322, 337, 264, 1791, 1916, 295, 924, 11], "temperature": 0.0, "avg_logprob": -0.17495065207009788, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.875206675729714e-05}, {"id": 71, "seek": 37932, "start": 379.32, "end": 387.15999999999997, "text": " has started to perform very aggressive network scans, like plain TCP SIN scans, as fast as", "tokens": [575, 1409, 281, 2042, 588, 10762, 3209, 35116, 11, 411, 11121, 48965, 318, 1464, 35116, 11, 382, 2370, 382], "temperature": 0.0, "avg_logprob": -0.17803999011436206, "compression_ratio": 1.5110132158590308, "no_speech_prob": 1.8297099813935347e-05}, {"id": 72, "seek": 37932, "start": 387.15999999999997, "end": 395.04, "text": " they can, so sometimes a single host can easily generate 100,000 flows per second.", "tokens": [436, 393, 11, 370, 2171, 257, 2167, 3975, 393, 3612, 8460, 2319, 11, 1360, 12867, 680, 1150, 13], "temperature": 0.0, "avg_logprob": -0.17803999011436206, "compression_ratio": 1.5110132158590308, "no_speech_prob": 1.8297099813935347e-05}, {"id": 73, "seek": 37932, "start": 395.04, "end": 400.88, "text": " So the actual IPv6 traffic that the export is done in the order of 200 to 300 megabits", "tokens": [407, 264, 3539, 8671, 85, 21, 6419, 300, 264, 10725, 307, 1096, 294, 264, 1668, 295, 2331, 281, 6641, 10816, 455, 1208], "temperature": 0.0, "avg_logprob": -0.17803999011436206, "compression_ratio": 1.5110132158590308, "no_speech_prob": 1.8297099813935347e-05}, {"id": 74, "seek": 37932, "start": 400.88, "end": 407.2, "text": " per second, so the flow records themselves, so this is all for the unsampled flow.", "tokens": [680, 1150, 11, 370, 264, 3095, 7724, 2969, 11, 370, 341, 307, 439, 337, 264, 2693, 335, 15551, 3095, 13], "temperature": 0.0, "avg_logprob": -0.17803999011436206, "compression_ratio": 1.5110132158590308, "no_speech_prob": 1.8297099813935347e-05}, {"id": 75, "seek": 40720, "start": 407.2, "end": 412.15999999999997, "text": " The average flow rate is maybe just around 200,000 per second, and the data it generates,", "tokens": [440, 4274, 3095, 3314, 307, 1310, 445, 926, 2331, 11, 1360, 680, 1150, 11, 293, 264, 1412, 309, 23815, 11], "temperature": 0.0, "avg_logprob": -0.1543407346688065, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.956983376468997e-06}, {"id": 76, "seek": 40720, "start": 412.15999999999997, "end": 419.36, "text": " the actual NetFlow data is like roughly 1.5 terabits per day, so the actual scaling problem", "tokens": [264, 3539, 6188, 31091, 1412, 307, 411, 9810, 502, 13, 20, 1796, 455, 1208, 680, 786, 11, 370, 264, 3539, 21589, 1154], "temperature": 0.0, "avg_logprob": -0.1543407346688065, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.956983376468997e-06}, {"id": 77, "seek": 40720, "start": 419.36, "end": 422.71999999999997, "text": " is more on the collector side than.", "tokens": [307, 544, 322, 264, 23960, 1252, 813, 13], "temperature": 0.0, "avg_logprob": -0.1543407346688065, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.956983376468997e-06}, {"id": 78, "seek": 40720, "start": 422.71999999999997, "end": 429.76, "text": " We have 10 gig, 100 gig, and 400 gig ports, so that's what our solution needs to support.", "tokens": [492, 362, 1266, 8741, 11, 2319, 8741, 11, 293, 8423, 8741, 18160, 11, 370, 300, 311, 437, 527, 3827, 2203, 281, 1406, 13], "temperature": 0.0, "avg_logprob": -0.1543407346688065, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.956983376468997e-06}, {"id": 79, "seek": 40720, "start": 429.76, "end": 434.8, "text": " So we used to do this historically on the routers themselves until a couple of years", "tokens": [407, 321, 1143, 281, 360, 341, 16180, 322, 264, 4020, 433, 2969, 1826, 257, 1916, 295, 924], "temperature": 0.0, "avg_logprob": -0.1543407346688065, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.956983376468997e-06}, {"id": 80, "seek": 43480, "start": 434.8, "end": 440.92, "text": " ago, then we moved to a commercial NetFlow generator that did that in hardware, which", "tokens": [2057, 11, 550, 321, 4259, 281, 257, 6841, 6188, 31091, 19265, 300, 630, 300, 294, 8837, 11, 597], "temperature": 0.0, "avg_logprob": -0.1600710974799262, "compression_ratio": 1.5391304347826087, "no_speech_prob": 3.216151526430622e-05}, {"id": 81, "seek": 43480, "start": 440.92, "end": 446.40000000000003, "text": " was pretty expensive, maybe the whole solution for one pop was 100,000 euros, something like", "tokens": [390, 1238, 5124, 11, 1310, 264, 1379, 3827, 337, 472, 1665, 390, 2319, 11, 1360, 14160, 11, 746, 411], "temperature": 0.0, "avg_logprob": -0.1600710974799262, "compression_ratio": 1.5391304347826087, "no_speech_prob": 3.216151526430622e-05}, {"id": 82, "seek": 43480, "start": 446.40000000000003, "end": 452.36, "text": " that, and then we finally moved to SnapFlow and Pure Software.", "tokens": [300, 11, 293, 550, 321, 2721, 4259, 281, 18254, 31091, 293, 29474, 27428, 13], "temperature": 0.0, "avg_logprob": -0.1600710974799262, "compression_ratio": 1.5391304347826087, "no_speech_prob": 3.216151526430622e-05}, {"id": 83, "seek": 43480, "start": 452.36, "end": 453.84000000000003, "text": " So how do we do this?", "tokens": [407, 577, 360, 321, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.1600710974799262, "compression_ratio": 1.5391304347826087, "no_speech_prob": 3.216151526430622e-05}, {"id": 84, "seek": 43480, "start": 453.84000000000003, "end": 458.72, "text": " On the borders, these are all fiber connections, so we have optical splitters, we create a", "tokens": [1282, 264, 16287, 11, 613, 366, 439, 12874, 9271, 11, 370, 321, 362, 20674, 7472, 1559, 11, 321, 1884, 257], "temperature": 0.0, "avg_logprob": -0.1600710974799262, "compression_ratio": 1.5391304347826087, "no_speech_prob": 3.216151526430622e-05}, {"id": 85, "seek": 45872, "start": 458.72, "end": 465.0, "text": " copy of all the traffic flow, and then we have a second device, or the primary device", "tokens": [5055, 295, 439, 264, 6419, 3095, 11, 293, 550, 321, 362, 257, 1150, 4302, 11, 420, 264, 6194, 4302], "temperature": 0.0, "avg_logprob": -0.15080508779972157, "compression_ratio": 1.548936170212766, "no_speech_prob": 1.6416206563008018e-05}, {"id": 86, "seek": 45872, "start": 465.0, "end": 469.92, "text": " that these tabs are connected to is what we call a packet broker, it's basically a switch", "tokens": [300, 613, 20743, 366, 4582, 281, 307, 437, 321, 818, 257, 20300, 26502, 11, 309, 311, 1936, 257, 3679], "temperature": 0.0, "avg_logprob": -0.15080508779972157, "compression_ratio": 1.548936170212766, "no_speech_prob": 1.6416206563008018e-05}, {"id": 87, "seek": 45872, "start": 469.92, "end": 476.0, "text": " that aggregates all the packets and sends it out on 200 gig ports to our actual exporter", "tokens": [300, 16743, 1024, 439, 264, 30364, 293, 14790, 309, 484, 322, 2331, 8741, 18160, 281, 527, 3539, 1278, 6122], "temperature": 0.0, "avg_logprob": -0.15080508779972157, "compression_ratio": 1.548936170212766, "no_speech_prob": 1.6416206563008018e-05}, {"id": 88, "seek": 45872, "start": 476.0, "end": 478.84000000000003, "text": " box.", "tokens": [2424, 13], "temperature": 0.0, "avg_logprob": -0.15080508779972157, "compression_ratio": 1.548936170212766, "no_speech_prob": 1.6416206563008018e-05}, {"id": 89, "seek": 45872, "start": 478.84000000000003, "end": 484.92, "text": " So it uses VLAN tags to identify, so in NetFlow we also want to keep track of the router ports", "tokens": [407, 309, 4960, 691, 36527, 18632, 281, 5876, 11, 370, 294, 6188, 31091, 321, 611, 528, 281, 1066, 2837, 295, 264, 22492, 18160], "temperature": 0.0, "avg_logprob": -0.15080508779972157, "compression_ratio": 1.548936170212766, "no_speech_prob": 1.6416206563008018e-05}, {"id": 90, "seek": 48492, "start": 484.92, "end": 490.8, "text": " where the traffic was sent or received from, so because then that information gets lost", "tokens": [689, 264, 6419, 390, 2279, 420, 4613, 490, 11, 370, 570, 550, 300, 1589, 2170, 2731], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 91, "seek": 48492, "start": 490.8, "end": 494.68, "text": " and you aggregate them, so we use VLANs to tag them.", "tokens": [293, 291, 26118, 552, 11, 370, 321, 764, 691, 36527, 82, 281, 6162, 552, 13], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 92, "seek": 48492, "start": 494.68, "end": 500.24, "text": " The box we use are white box switches based on the Tofino ASIC, the ones that Intel just", "tokens": [440, 2424, 321, 764, 366, 2418, 2424, 19458, 2361, 322, 264, 1407, 69, 2982, 7469, 2532, 11, 264, 2306, 300, 19762, 445], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 93, "seek": 48492, "start": 500.24, "end": 505.8, "text": " decided they stopped developing, unfortunately, these are very nice boxes, like there's one", "tokens": [3047, 436, 5936, 6416, 11, 7015, 11, 613, 366, 588, 1481, 9002, 11, 411, 456, 311, 472], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 94, "seek": 48492, "start": 505.8, "end": 512.12, "text": " with 3,200 gig ports for 5,000 euros, and the other one has 3,200, 400 gig ports and", "tokens": [365, 805, 11, 7629, 8741, 18160, 337, 1025, 11, 1360, 14160, 11, 293, 264, 661, 472, 575, 805, 11, 7629, 11, 8423, 8741, 18160, 293], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 95, "seek": 48492, "start": 512.12, "end": 513.88, "text": " costs about 20,000 euros.", "tokens": [5497, 466, 945, 11, 1360, 14160, 13], "temperature": 0.0, "avg_logprob": -0.2162431519607018, "compression_ratio": 1.5940959409594095, "no_speech_prob": 1.7194266547448933e-05}, {"id": 96, "seek": 51388, "start": 513.88, "end": 518.88, "text": " The thing is you have to program them yourself and you buy them, they're just plain hardware,", "tokens": [440, 551, 307, 291, 362, 281, 1461, 552, 1803, 293, 291, 2256, 552, 11, 436, 434, 445, 11121, 8837, 11], "temperature": 0.0, "avg_logprob": -0.14646772543589273, "compression_ratio": 1.5732217573221758, "no_speech_prob": 1.831021836551372e-05}, {"id": 97, "seek": 51388, "start": 518.88, "end": 521.32, "text": " and so you can use the P4 language to do this.", "tokens": [293, 370, 291, 393, 764, 264, 430, 19, 2856, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.14646772543589273, "compression_ratio": 1.5732217573221758, "no_speech_prob": 1.831021836551372e-05}, {"id": 98, "seek": 51388, "start": 521.32, "end": 528.2, "text": " I link here to another project of mine where I actually developed the P4 program to do that,", "tokens": [286, 2113, 510, 281, 1071, 1716, 295, 3892, 689, 286, 767, 4743, 264, 430, 19, 1461, 281, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.14646772543589273, "compression_ratio": 1.5732217573221758, "no_speech_prob": 1.831021836551372e-05}, {"id": 99, "seek": 51388, "start": 528.2, "end": 530.96, "text": " so that's also part of this entire architecture.", "tokens": [370, 300, 311, 611, 644, 295, 341, 2302, 9482, 13], "temperature": 0.0, "avg_logprob": -0.14646772543589273, "compression_ratio": 1.5732217573221758, "no_speech_prob": 1.831021836551372e-05}, {"id": 100, "seek": 51388, "start": 530.96, "end": 537.8, "text": " And then the traffic gets to the NetFlow exporter box, which is currently just one rack unit,", "tokens": [400, 550, 264, 6419, 2170, 281, 264, 6188, 31091, 1278, 6122, 2424, 11, 597, 307, 4362, 445, 472, 14788, 4985, 11], "temperature": 0.0, "avg_logprob": -0.14646772543589273, "compression_ratio": 1.5732217573221758, "no_speech_prob": 1.831021836551372e-05}, {"id": 101, "seek": 53780, "start": 537.8, "end": 549.04, "text": " that's basic rack mount server, we use AMD Epics, mainly these days with a fairly large", "tokens": [300, 311, 3875, 14788, 3746, 7154, 11, 321, 764, 34808, 9970, 1167, 11, 8704, 613, 1708, 365, 257, 6457, 2416], "temperature": 0.0, "avg_logprob": -0.20830847157372367, "compression_ratio": 1.5706214689265536, "no_speech_prob": 2.791319820971694e-05}, {"id": 102, "seek": 53780, "start": 549.04, "end": 553.16, "text": " number of cores, that's the way we scale, with the number of cores, NetFlow always scales", "tokens": [1230, 295, 24826, 11, 300, 311, 264, 636, 321, 4373, 11, 365, 264, 1230, 295, 24826, 11, 6188, 31091, 1009, 17408], "temperature": 0.0, "avg_logprob": -0.20830847157372367, "compression_ratio": 1.5706214689265536, "no_speech_prob": 2.791319820971694e-05}, {"id": 103, "seek": 53780, "start": 553.16, "end": 557.0, "text": " very well the cores because you just have to make sure that you keep the packets to", "tokens": [588, 731, 264, 24826, 570, 291, 445, 362, 281, 652, 988, 300, 291, 1066, 264, 30364, 281], "temperature": 0.0, "avg_logprob": -0.20830847157372367, "compression_ratio": 1.5706214689265536, "no_speech_prob": 2.791319820971694e-05}, {"id": 104, "seek": 53780, "start": 557.0, "end": 560.56, "text": " a flow together.", "tokens": [257, 3095, 1214, 13], "temperature": 0.0, "avg_logprob": -0.20830847157372367, "compression_ratio": 1.5706214689265536, "no_speech_prob": 2.791319820971694e-05}, {"id": 105, "seek": 56056, "start": 560.56, "end": 568.1999999999999, "text": " They use, the exporter has a Melonox 2.4, 100 gig card, that's connected to the packet", "tokens": [814, 764, 11, 264, 1278, 6122, 575, 257, 7375, 266, 5230, 568, 13, 19, 11, 2319, 8741, 2920, 11, 300, 311, 4582, 281, 264, 20300], "temperature": 0.0, "avg_logprob": -0.22695429508502668, "compression_ratio": 1.6793248945147679, "no_speech_prob": 1.0276692592015024e-05}, {"id": 106, "seek": 56056, "start": 568.1999999999999, "end": 571.9599999999999, "text": " broker, that's where it receives the packets.", "tokens": [26502, 11, 300, 311, 689, 309, 20717, 264, 30364, 13], "temperature": 0.0, "avg_logprob": -0.22695429508502668, "compression_ratio": 1.6793248945147679, "no_speech_prob": 1.0276692592015024e-05}, {"id": 107, "seek": 56056, "start": 571.9599999999999, "end": 578.4, "text": " So in a picture that's what it looks like, on the upper left that would be our border", "tokens": [407, 294, 257, 3036, 300, 311, 437, 309, 1542, 411, 11, 322, 264, 6597, 1411, 300, 576, 312, 527, 7838], "temperature": 0.0, "avg_logprob": -0.22695429508502668, "compression_ratio": 1.6793248945147679, "no_speech_prob": 1.0276692592015024e-05}, {"id": 108, "seek": 56056, "start": 578.4, "end": 584.3599999999999, "text": " router, on the upper right that would be the bordering router of our neighboring networks,", "tokens": [22492, 11, 322, 264, 6597, 558, 300, 576, 312, 264, 25872, 1794, 22492, 295, 527, 31521, 9590, 11], "temperature": 0.0, "avg_logprob": -0.22695429508502668, "compression_ratio": 1.6793248945147679, "no_speech_prob": 1.0276692592015024e-05}, {"id": 109, "seek": 56056, "start": 584.3599999999999, "end": 590.04, "text": " in the middle you have this optical spitter, which is completely on passive box, just as", "tokens": [294, 264, 2808, 291, 362, 341, 20674, 637, 3904, 11, 597, 307, 2584, 322, 14975, 2424, 11, 445, 382], "temperature": 0.0, "avg_logprob": -0.22695429508502668, "compression_ratio": 1.6793248945147679, "no_speech_prob": 1.0276692592015024e-05}, {"id": 110, "seek": 59004, "start": 590.04, "end": 596.24, "text": " an optical splitter, and then you have this packet broker switch in between that aggregates", "tokens": [364, 20674, 4732, 3904, 11, 293, 550, 291, 362, 341, 20300, 26502, 3679, 294, 1296, 300, 16743, 1024], "temperature": 0.0, "avg_logprob": -0.17004958443019702, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.2112984879640862e-05}, {"id": 111, "seek": 59004, "start": 596.24, "end": 602.16, "text": " all the packets and distributes them by flow on these two links currently.", "tokens": [439, 264, 30364, 293, 4400, 1819, 552, 538, 3095, 322, 613, 732, 6123, 4362, 13], "temperature": 0.0, "avg_logprob": -0.17004958443019702, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.2112984879640862e-05}, {"id": 112, "seek": 59004, "start": 602.16, "end": 607.88, "text": " So these are now 200 gig ports between the broker and the exporter, we can easily add", "tokens": [407, 613, 366, 586, 2331, 8741, 18160, 1296, 264, 26502, 293, 264, 1278, 6122, 11, 321, 393, 3612, 909], "temperature": 0.0, "avg_logprob": -0.17004958443019702, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.2112984879640862e-05}, {"id": 113, "seek": 59004, "start": 607.88, "end": 614.0, "text": " more ports if that's not sufficient, and on the SnapFlow exporter we can basically just", "tokens": [544, 18160, 498, 300, 311, 406, 11563, 11, 293, 322, 264, 18254, 31091, 1278, 6122, 321, 393, 1936, 445], "temperature": 0.0, "avg_logprob": -0.17004958443019702, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.2112984879640862e-05}, {"id": 114, "seek": 59004, "start": 614.0, "end": 619.36, "text": " add more cores to be able to scale.", "tokens": [909, 544, 24826, 281, 312, 1075, 281, 4373, 13], "temperature": 0.0, "avg_logprob": -0.17004958443019702, "compression_ratio": 1.6563876651982379, "no_speech_prob": 2.2112984879640862e-05}, {"id": 115, "seek": 61936, "start": 619.36, "end": 638.32, "text": " So now let's hear Max talk about the actual software.", "tokens": [407, 586, 718, 311, 1568, 7402, 751, 466, 264, 3539, 4722, 13], "temperature": 0.0, "avg_logprob": -0.43136775493621826, "compression_ratio": 0.8688524590163934, "no_speech_prob": 0.001301150186918676}, {"id": 116, "seek": 63832, "start": 638.32, "end": 654.5200000000001, "text": " Hello, hello, does this work, good, all right.", "tokens": [2425, 11, 7751, 11, 775, 341, 589, 11, 665, 11, 439, 558, 13], "temperature": 0.0, "avg_logprob": -0.309308739595635, "compression_ratio": 1.2522522522522523, "no_speech_prob": 0.0007644419092684984}, {"id": 117, "seek": 63832, "start": 654.5200000000001, "end": 660.8000000000001, "text": " All right, how do we know how SnapFlow is deployed, I want to talk about how it's built, how", "tokens": [1057, 558, 11, 577, 360, 321, 458, 577, 18254, 31091, 307, 17826, 11, 286, 528, 281, 751, 466, 577, 309, 311, 3094, 11, 577], "temperature": 0.0, "avg_logprob": -0.309308739595635, "compression_ratio": 1.2522522522522523, "no_speech_prob": 0.0007644419092684984}, {"id": 118, "seek": 66080, "start": 660.8, "end": 668.5999999999999, "text": " it scales, how you configure it, how you monitor your running application, etc.", "tokens": [309, 17408, 11, 577, 291, 22162, 309, 11, 577, 291, 6002, 428, 2614, 3861, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.18008118867874146, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.982875073736068e-05}, {"id": 119, "seek": 66080, "start": 668.5999999999999, "end": 675.56, "text": " So SnapFlow as the name suggests is built using Snap, Snap is a toolkit for writing", "tokens": [407, 18254, 31091, 382, 264, 1315, 13409, 307, 3094, 1228, 18254, 11, 18254, 307, 257, 40167, 337, 3579], "temperature": 0.0, "avg_logprob": -0.18008118867874146, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.982875073736068e-05}, {"id": 120, "seek": 66080, "start": 675.56, "end": 681.3599999999999, "text": " high performance networking applications, Snap is written in Lua, using the amazing", "tokens": [1090, 3389, 17985, 5821, 11, 18254, 307, 3720, 294, 441, 4398, 11, 1228, 264, 2243], "temperature": 0.0, "avg_logprob": -0.18008118867874146, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.982875073736068e-05}, {"id": 121, "seek": 66080, "start": 681.3599999999999, "end": 688.76, "text": " Lua JIT compiler, and it does packet IO without going through the kernel, like generally the", "tokens": [441, 4398, 508, 3927, 31958, 11, 293, 309, 775, 20300, 39839, 1553, 516, 807, 264, 28256, 11, 411, 5101, 264], "temperature": 0.0, "avg_logprob": -0.18008118867874146, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.982875073736068e-05}, {"id": 122, "seek": 68876, "start": 688.76, "end": 695.68, "text": " Linux kernel packet networking stack is slow from an ISP perspective, so a Snap bypass", "tokens": [18734, 28256, 20300, 17985, 8630, 307, 2964, 490, 364, 6205, 47, 4585, 11, 370, 257, 18254, 24996], "temperature": 0.0, "avg_logprob": -0.23610284593370226, "compression_ratio": 1.5049019607843137, "no_speech_prob": 3.588923573261127e-05}, {"id": 123, "seek": 68876, "start": 695.68, "end": 701.88, "text": " is that, uses its own device drivers, and this is also often called kernel bypass networking,", "tokens": [307, 300, 11, 4960, 1080, 1065, 4302, 11590, 11, 293, 341, 307, 611, 2049, 1219, 28256, 24996, 17985, 11], "temperature": 0.0, "avg_logprob": -0.23610284593370226, "compression_ratio": 1.5049019607843137, "no_speech_prob": 3.588923573261127e-05}, {"id": 124, "seek": 68876, "start": 701.88, "end": 706.64, "text": " I think nowadays it's fairly common, and Snap is open source and independent, we're not", "tokens": [286, 519, 13434, 309, 311, 6457, 2689, 11, 293, 18254, 307, 1269, 4009, 293, 6695, 11, 321, 434, 406], "temperature": 0.0, "avg_logprob": -0.23610284593370226, "compression_ratio": 1.5049019607843137, "no_speech_prob": 3.588923573261127e-05}, {"id": 125, "seek": 68876, "start": 706.64, "end": 712.88, "text": " sponsored by any vendor in particular.", "tokens": [16621, 538, 604, 24321, 294, 1729, 13], "temperature": 0.0, "avg_logprob": -0.23610284593370226, "compression_ratio": 1.5049019607843137, "no_speech_prob": 3.588923573261127e-05}, {"id": 126, "seek": 71288, "start": 712.88, "end": 719.72, "text": " So Snap is built with these three core values in mind, we prefer simple designs over complex", "tokens": [407, 18254, 307, 3094, 365, 613, 1045, 4965, 4190, 294, 1575, 11, 321, 4382, 2199, 11347, 670, 3997], "temperature": 0.0, "avg_logprob": -0.1111811666346308, "compression_ratio": 1.65, "no_speech_prob": 1.3414320164883975e-05}, {"id": 127, "seek": 71288, "start": 719.72, "end": 727.36, "text": " designs, we prefer our software to be small rather than large, and we are open, you can", "tokens": [11347, 11, 321, 4382, 527, 4722, 281, 312, 1359, 2831, 813, 2416, 11, 293, 321, 366, 1269, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.1111811666346308, "compression_ratio": 1.65, "no_speech_prob": 1.3414320164883975e-05}, {"id": 128, "seek": 71288, "start": 727.36, "end": 737.08, "text": " read the source, you can understand it, you can modify it, you can rewrite it, etc.", "tokens": [1401, 264, 4009, 11, 291, 393, 1223, 309, 11, 291, 393, 16927, 309, 11, 291, 393, 28132, 309, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.1111811666346308, "compression_ratio": 1.65, "no_speech_prob": 1.3414320164883975e-05}, {"id": 129, "seek": 73708, "start": 737.08, "end": 745.0, "text": " So here I have a snippet of code taken directly from SnapFlow, unedited, so this is how the", "tokens": [407, 510, 286, 362, 257, 35623, 302, 295, 3089, 2726, 3838, 490, 18254, 31091, 11, 517, 292, 1226, 11, 370, 341, 307, 577, 264], "temperature": 0.0, "avg_logprob": -0.11164105733235677, "compression_ratio": 1.55793991416309, "no_speech_prob": 2.427545223326888e-05}, {"id": 130, "seek": 73708, "start": 745.0, "end": 752.12, "text": " Lua code that powers the usual Snap application sort of looks like, just to give you an idea.", "tokens": [441, 4398, 3089, 300, 8674, 264, 7713, 18254, 3861, 1333, 295, 1542, 411, 11, 445, 281, 976, 291, 364, 1558, 13], "temperature": 0.0, "avg_logprob": -0.11164105733235677, "compression_ratio": 1.55793991416309, "no_speech_prob": 2.427545223326888e-05}, {"id": 131, "seek": 73708, "start": 752.12, "end": 756.96, "text": " In this particular example we read a batch of packets from an incoming link, we extract", "tokens": [682, 341, 1729, 1365, 321, 1401, 257, 15245, 295, 30364, 490, 364, 22341, 2113, 11, 321, 8947], "temperature": 0.0, "avg_logprob": -0.11164105733235677, "compression_ratio": 1.55793991416309, "no_speech_prob": 2.427545223326888e-05}, {"id": 132, "seek": 73708, "start": 756.96, "end": 762.5200000000001, "text": " some metadata that tells us which flow this packet belongs to, then we look up a matching", "tokens": [512, 26603, 300, 5112, 505, 597, 3095, 341, 20300, 12953, 281, 11, 550, 321, 574, 493, 257, 14324], "temperature": 0.0, "avg_logprob": -0.11164105733235677, "compression_ratio": 1.55793991416309, "no_speech_prob": 2.427545223326888e-05}, {"id": 133, "seek": 76252, "start": 762.52, "end": 767.28, "text": " flow in the flow table that we maintain, if we already have a flow we count that packet", "tokens": [3095, 294, 264, 3095, 3199, 300, 321, 6909, 11, 498, 321, 1217, 362, 257, 3095, 321, 1207, 300, 20300], "temperature": 0.0, "avg_logprob": -0.19303399040585473, "compression_ratio": 1.7253886010362693, "no_speech_prob": 3.119233952020295e-05}, {"id": 134, "seek": 76252, "start": 767.28, "end": 775.48, "text": " towards that flow, if not we create a new entry in the flow table.", "tokens": [3030, 300, 3095, 11, 498, 406, 321, 1884, 257, 777, 8729, 294, 264, 3095, 3199, 13], "temperature": 0.0, "avg_logprob": -0.19303399040585473, "compression_ratio": 1.7253886010362693, "no_speech_prob": 3.119233952020295e-05}, {"id": 135, "seek": 76252, "start": 775.48, "end": 778.76, "text": " Got one more snippet, this function is called every now and then to actually export the", "tokens": [5803, 472, 544, 35623, 302, 11, 341, 2445, 307, 1219, 633, 586, 293, 550, 281, 767, 10725, 264], "temperature": 0.0, "avg_logprob": -0.19303399040585473, "compression_ratio": 1.7253886010362693, "no_speech_prob": 3.119233952020295e-05}, {"id": 136, "seek": 76252, "start": 778.76, "end": 788.52, "text": " flows, so we walk over a section of the flow table here, and add flow aggregates from that", "tokens": [12867, 11, 370, 321, 1792, 670, 257, 3541, 295, 264, 3095, 3199, 510, 11, 293, 909, 3095, 16743, 1024, 490, 300], "temperature": 0.0, "avg_logprob": -0.19303399040585473, "compression_ratio": 1.7253886010362693, "no_speech_prob": 3.119233952020295e-05}, {"id": 137, "seek": 78852, "start": 788.52, "end": 793.72, "text": " flow table into a next data export record, and if it's time to export the data record", "tokens": [3095, 3199, 666, 257, 958, 1412, 10725, 2136, 11, 293, 498, 309, 311, 565, 281, 10725, 264, 1412, 2136], "temperature": 0.0, "avg_logprob": -0.217669508673928, "compression_ratio": 1.5318181818181817, "no_speech_prob": 3.263075268478133e-05}, {"id": 138, "seek": 78852, "start": 793.72, "end": 802.24, "text": " we send it off to an IPfix collector, which is a separate program.", "tokens": [321, 2845, 309, 766, 281, 364, 8671, 69, 970, 23960, 11, 597, 307, 257, 4994, 1461, 13], "temperature": 0.0, "avg_logprob": -0.217669508673928, "compression_ratio": 1.5318181818181817, "no_speech_prob": 3.263075268478133e-05}, {"id": 139, "seek": 78852, "start": 802.24, "end": 810.48, "text": " So from a bird's eye view, SnapFlow works sort of like this, we read packets from a 100", "tokens": [407, 490, 257, 5255, 311, 3313, 1910, 11, 18254, 31091, 1985, 1333, 295, 411, 341, 11, 321, 1401, 30364, 490, 257, 2319], "temperature": 0.0, "avg_logprob": -0.217669508673928, "compression_ratio": 1.5318181818181817, "no_speech_prob": 3.263075268478133e-05}, {"id": 140, "seek": 78852, "start": 810.48, "end": 817.48, "text": " gigabits nick, the garden hole so to speak, we process those packets to extract flow information", "tokens": [8741, 455, 1208, 15416, 11, 264, 7431, 5458, 370, 281, 1710, 11, 321, 1399, 729, 30364, 281, 8947, 3095, 1589], "temperature": 0.0, "avg_logprob": -0.217669508673928, "compression_ratio": 1.5318181818181817, "no_speech_prob": 3.263075268478133e-05}, {"id": 141, "seek": 81748, "start": 817.48, "end": 825.12, "text": " in a snap process, and then we send off data records over a ton-tap interface to the IPfix", "tokens": [294, 257, 13650, 1399, 11, 293, 550, 321, 2845, 766, 1412, 7724, 670, 257, 2952, 12, 83, 569, 9226, 281, 264, 8671, 69, 970], "temperature": 0.0, "avg_logprob": -0.24914289775647616, "compression_ratio": 1.6605504587155964, "no_speech_prob": 2.8388200007611886e-05}, {"id": 142, "seek": 81748, "start": 825.12, "end": 826.12, "text": " collector.", "tokens": [23960, 13], "temperature": 0.0, "avg_logprob": -0.24914289775647616, "compression_ratio": 1.6605504587155964, "no_speech_prob": 2.8388200007611886e-05}, {"id": 143, "seek": 81748, "start": 826.12, "end": 831.72, "text": " So on the right side here you have a device driver written, like that is part of Snap", "tokens": [407, 322, 264, 558, 1252, 510, 291, 362, 257, 4302, 6787, 3720, 11, 411, 300, 307, 644, 295, 18254], "temperature": 0.0, "avg_logprob": -0.24914289775647616, "compression_ratio": 1.6605504587155964, "no_speech_prob": 2.8388200007611886e-05}, {"id": 144, "seek": 81748, "start": 831.72, "end": 838.04, "text": " written in Lua, that actually happens like the actual traffic, the bulk of it, and on", "tokens": [3720, 294, 441, 4398, 11, 300, 767, 2314, 411, 264, 3539, 6419, 11, 264, 16139, 295, 309, 11, 293, 322], "temperature": 0.0, "avg_logprob": -0.24914289775647616, "compression_ratio": 1.6605504587155964, "no_speech_prob": 2.8388200007611886e-05}, {"id": 145, "seek": 81748, "start": 838.04, "end": 843.04, "text": " the left side you have an interface to the Linux network stack, so since the flow export", "tokens": [264, 1411, 1252, 291, 362, 364, 9226, 281, 264, 18734, 3209, 8630, 11, 370, 1670, 264, 3095, 10725], "temperature": 0.0, "avg_logprob": -0.24914289775647616, "compression_ratio": 1.6605504587155964, "no_speech_prob": 2.8388200007611886e-05}, {"id": 146, "seek": 84304, "start": 843.04, "end": 848.56, "text": " data is rather small in comparison, you can just do that over the regular Linux network", "tokens": [1412, 307, 2831, 1359, 294, 9660, 11, 291, 393, 445, 360, 300, 670, 264, 3890, 18734, 3209], "temperature": 0.0, "avg_logprob": -0.21051687604925606, "compression_ratio": 1.5064935064935066, "no_speech_prob": 2.3131477064453065e-05}, {"id": 147, "seek": 84304, "start": 848.56, "end": 850.9599999999999, "text": " stack, and that works.", "tokens": [8630, 11, 293, 300, 1985, 13], "temperature": 0.0, "avg_logprob": -0.21051687604925606, "compression_ratio": 1.5064935064935066, "no_speech_prob": 2.3131477064453065e-05}, {"id": 148, "seek": 84304, "start": 850.9599999999999, "end": 854.68, "text": " On the very left side you have the IPfix collector, that's a different application,", "tokens": [1282, 264, 588, 1411, 1252, 291, 362, 264, 8671, 69, 970, 23960, 11, 300, 311, 257, 819, 3861, 11], "temperature": 0.0, "avg_logprob": -0.21051687604925606, "compression_ratio": 1.5064935064935066, "no_speech_prob": 2.3131477064453065e-05}, {"id": 149, "seek": 84304, "start": 854.68, "end": 863.9599999999999, "text": " like a separate program that we send the flow data to in the end.", "tokens": [411, 257, 4994, 1461, 300, 321, 2845, 264, 3095, 1412, 281, 294, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.21051687604925606, "compression_ratio": 1.5064935064935066, "no_speech_prob": 2.3131477064453065e-05}, {"id": 150, "seek": 84304, "start": 863.9599999999999, "end": 870.92, "text": " So sadly, or I mean I guess just obviously, single CPU core is not enough to handle 100", "tokens": [407, 22023, 11, 420, 286, 914, 286, 2041, 445, 2745, 11, 2167, 13199, 4965, 307, 406, 1547, 281, 4813, 2319], "temperature": 0.0, "avg_logprob": -0.21051687604925606, "compression_ratio": 1.5064935064935066, "no_speech_prob": 2.3131477064453065e-05}, {"id": 151, "seek": 87092, "start": 870.92, "end": 876.12, "text": " gigabits of traffic, so instead what we do is we do receive side scaling provided by", "tokens": [8741, 455, 1208, 295, 6419, 11, 370, 2602, 437, 321, 360, 307, 321, 360, 4774, 1252, 21589, 5649, 538], "temperature": 0.0, "avg_logprob": -0.1817651089326835, "compression_ratio": 1.6328502415458936, "no_speech_prob": 5.469312964123674e-05}, {"id": 152, "seek": 87092, "start": 876.12, "end": 882.1999999999999, "text": " the network device, this way we can process n different sets of flows on n different processes", "tokens": [264, 3209, 4302, 11, 341, 636, 321, 393, 1399, 297, 819, 6352, 295, 12867, 322, 297, 819, 7555], "temperature": 0.0, "avg_logprob": -0.1817651089326835, "compression_ratio": 1.6328502415458936, "no_speech_prob": 5.469312964123674e-05}, {"id": 153, "seek": 87092, "start": 882.1999999999999, "end": 891.9599999999999, "text": " running on n different CPU cores, so every circle here is a CPU core.", "tokens": [2614, 322, 297, 819, 13199, 24826, 11, 370, 633, 6329, 510, 307, 257, 13199, 4965, 13], "temperature": 0.0, "avg_logprob": -0.1817651089326835, "compression_ratio": 1.6328502415458936, "no_speech_prob": 5.469312964123674e-05}, {"id": 154, "seek": 87092, "start": 891.9599999999999, "end": 897.36, "text": " And we also support to repeat basically the same trick in software, so we can do another", "tokens": [400, 321, 611, 1406, 281, 7149, 1936, 264, 912, 4282, 294, 4722, 11, 370, 321, 393, 360, 1071], "temperature": 0.0, "avg_logprob": -0.1817651089326835, "compression_ratio": 1.6328502415458936, "no_speech_prob": 5.469312964123674e-05}, {"id": 155, "seek": 89736, "start": 897.36, "end": 903.08, "text": " round of received side scaling after filtering the traffic by protocol, and this way we can", "tokens": [3098, 295, 4613, 1252, 21589, 934, 30822, 264, 6419, 538, 10336, 11, 293, 341, 636, 321, 393], "temperature": 0.0, "avg_logprob": -0.18942138586151466, "compression_ratio": 1.683982683982684, "no_speech_prob": 4.5255812437972054e-05}, {"id": 156, "seek": 89736, "start": 903.08, "end": 910.52, "text": " process for example DNS traffic on different set of cores than IP traffic, like non-DNS", "tokens": [1399, 337, 1365, 35153, 6419, 322, 819, 992, 295, 24826, 813, 8671, 6419, 11, 411, 2107, 12, 35, 42003], "temperature": 0.0, "avg_logprob": -0.18942138586151466, "compression_ratio": 1.683982683982684, "no_speech_prob": 4.5255812437972054e-05}, {"id": 157, "seek": 89736, "start": 910.52, "end": 918.0, "text": " IP traffic, and that way we can sort of like segregate the server resources into the workloads", "tokens": [8671, 6419, 11, 293, 300, 636, 321, 393, 1333, 295, 411, 37630, 473, 264, 7154, 3593, 666, 264, 32452], "temperature": 0.0, "avg_logprob": -0.18942138586151466, "compression_ratio": 1.683982683982684, "no_speech_prob": 4.5255812437972054e-05}, {"id": 158, "seek": 89736, "start": 918.0, "end": 920.44, "text": " that we actually care about.", "tokens": [300, 321, 767, 1127, 466, 13], "temperature": 0.0, "avg_logprob": -0.18942138586151466, "compression_ratio": 1.683982683982684, "no_speech_prob": 4.5255812437972054e-05}, {"id": 159, "seek": 89736, "start": 920.44, "end": 926.0, "text": " We might for example care more about that we have an accurate general IP flow profile", "tokens": [492, 1062, 337, 1365, 1127, 544, 466, 300, 321, 362, 364, 8559, 2674, 8671, 3095, 7964], "temperature": 0.0, "avg_logprob": -0.18942138586151466, "compression_ratio": 1.683982683982684, "no_speech_prob": 4.5255812437972054e-05}, {"id": 160, "seek": 92600, "start": 926.0, "end": 930.48, "text": " to send to the collectors, and maybe if we still have some time left we will also do", "tokens": [281, 2845, 281, 264, 35384, 11, 293, 1310, 498, 321, 920, 362, 512, 565, 1411, 321, 486, 611, 360], "temperature": 0.0, "avg_logprob": -0.1545743023056582, "compression_ratio": 1.536480686695279, "no_speech_prob": 5.297059760778211e-05}, {"id": 161, "seek": 92600, "start": 930.48, "end": 940.4, "text": " some DNS analysis, but we don't want one to slow down the other necessarily.", "tokens": [512, 35153, 5215, 11, 457, 321, 500, 380, 528, 472, 281, 2964, 760, 264, 661, 4725, 13], "temperature": 0.0, "avg_logprob": -0.1545743023056582, "compression_ratio": 1.536480686695279, "no_speech_prob": 5.297059760778211e-05}, {"id": 162, "seek": 92600, "start": 940.4, "end": 946.68, "text": " So SNAP programs are organized into independent apps, so an app is like a logical packet processing", "tokens": [407, 13955, 4715, 4268, 366, 9983, 666, 6695, 7733, 11, 370, 364, 724, 307, 411, 257, 14978, 20300, 9007], "temperature": 0.0, "avg_logprob": -0.1545743023056582, "compression_ratio": 1.536480686695279, "no_speech_prob": 5.297059760778211e-05}, {"id": 163, "seek": 92600, "start": 946.68, "end": 954.88, "text": " component, could be for example a device driver or an app that implements the address resolution", "tokens": [6542, 11, 727, 312, 337, 1365, 257, 4302, 6787, 420, 364, 724, 300, 704, 17988, 264, 2985, 8669], "temperature": 0.0, "avg_logprob": -0.1545743023056582, "compression_ratio": 1.536480686695279, "no_speech_prob": 5.297059760778211e-05}, {"id": 164, "seek": 95488, "start": 954.88, "end": 962.04, "text": " protocol, and these apps are combined into implications like SNAP flow using links.", "tokens": [10336, 11, 293, 613, 7733, 366, 9354, 666, 16602, 411, 13955, 4715, 3095, 1228, 6123, 13], "temperature": 0.0, "avg_logprob": -0.18062616854297872, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.00011222160537727177}, {"id": 165, "seek": 95488, "start": 962.04, "end": 968.32, "text": " Links are unidirectional, they really just ring buffers, and any app can have like any", "tokens": [37156, 366, 517, 327, 621, 41048, 11, 436, 534, 445, 4875, 9204, 433, 11, 293, 604, 724, 393, 362, 411, 604], "temperature": 0.0, "avg_logprob": -0.18062616854297872, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.00011222160537727177}, {"id": 166, "seek": 95488, "start": 968.32, "end": 972.48, "text": " number of them to use as input or output for packet data.", "tokens": [1230, 295, 552, 281, 764, 382, 4846, 420, 5598, 337, 20300, 1412, 13], "temperature": 0.0, "avg_logprob": -0.18062616854297872, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.00011222160537727177}, {"id": 167, "seek": 95488, "start": 972.48, "end": 976.08, "text": " And you communicate with like you use those links like shown here, that's basically the", "tokens": [400, 291, 7890, 365, 411, 291, 764, 729, 6123, 411, 4898, 510, 11, 300, 311, 1936, 264], "temperature": 0.0, "avg_logprob": -0.18062616854297872, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.00011222160537727177}, {"id": 168, "seek": 95488, "start": 976.08, "end": 981.16, "text": " API that you call link receive on a link to receive a packet, and you call link transmit", "tokens": [9362, 300, 291, 818, 2113, 4774, 322, 257, 2113, 281, 4774, 257, 20300, 11, 293, 291, 818, 2113, 17831], "temperature": 0.0, "avg_logprob": -0.18062616854297872, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.00011222160537727177}, {"id": 169, "seek": 98116, "start": 981.16, "end": 990.8, "text": " on an output link to send a packet.", "tokens": [322, 364, 5598, 2113, 281, 2845, 257, 20300, 13], "temperature": 0.0, "avg_logprob": -0.19529454604439114, "compression_ratio": 1.7017543859649122, "no_speech_prob": 1.9510942365741357e-05}, {"id": 170, "seek": 98116, "start": 990.8, "end": 994.48, "text": " So now to forward packets from one CPU core to another CPU core we have this thing called", "tokens": [407, 586, 281, 2128, 30364, 490, 472, 13199, 4965, 281, 1071, 13199, 4965, 321, 362, 341, 551, 1219], "temperature": 0.0, "avg_logprob": -0.19529454604439114, "compression_ratio": 1.7017543859649122, "no_speech_prob": 1.9510942365741357e-05}, {"id": 171, "seek": 98116, "start": 994.48, "end": 999.48, "text": " live interlink, these are really just like regular links except that they span process", "tokens": [1621, 728, 22473, 11, 613, 366, 534, 445, 411, 3890, 6123, 3993, 300, 436, 16174, 1399], "temperature": 0.0, "avg_logprob": -0.19529454604439114, "compression_ratio": 1.7017543859649122, "no_speech_prob": 1.9510942365741357e-05}, {"id": 172, "seek": 98116, "start": 999.48, "end": 1005.68, "text": " and CPU core boundaries, and you can also use them just like any link, you have the", "tokens": [293, 13199, 4965, 13180, 11, 293, 291, 393, 611, 764, 552, 445, 411, 604, 2113, 11, 291, 362, 264], "temperature": 0.0, "avg_logprob": -0.19529454604439114, "compression_ratio": 1.7017543859649122, "no_speech_prob": 1.9510942365741357e-05}, {"id": 173, "seek": 98116, "start": 1005.68, "end": 1010.8, "text": " same interface if you want to operate with them, and we use those to implement the software", "tokens": [912, 9226, 498, 291, 528, 281, 9651, 365, 552, 11, 293, 321, 764, 729, 281, 4445, 264, 4722], "temperature": 0.0, "avg_logprob": -0.19529454604439114, "compression_ratio": 1.7017543859649122, "no_speech_prob": 1.9510942365741357e-05}, {"id": 174, "seek": 101080, "start": 1010.8, "end": 1018.28, "text": " based receive set scaling that I talked about earlier, right?", "tokens": [2361, 4774, 992, 21589, 300, 286, 2825, 466, 3071, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1902917418817077, "compression_ratio": 1.72, "no_speech_prob": 3.1672490877099335e-05}, {"id": 175, "seek": 101080, "start": 1018.28, "end": 1025.0, "text": " We also have libp3, so libp3 implements a very strict control plane data plane segregation,", "tokens": [492, 611, 362, 22854, 79, 18, 11, 370, 22854, 79, 18, 704, 17988, 257, 588, 10910, 1969, 5720, 1412, 5720, 34317, 11], "temperature": 0.0, "avg_logprob": -0.1902917418817077, "compression_ratio": 1.72, "no_speech_prob": 3.1672490877099335e-05}, {"id": 176, "seek": 101080, "start": 1025.0, "end": 1031.32, "text": " I think for most networking folks the concept of control plane data plane is pretty common,", "tokens": [286, 519, 337, 881, 17985, 4024, 264, 3410, 295, 1969, 5720, 1412, 5720, 307, 1238, 2689, 11], "temperature": 0.0, "avg_logprob": -0.1902917418817077, "compression_ratio": 1.72, "no_speech_prob": 3.1672490877099335e-05}, {"id": 177, "seek": 101080, "start": 1031.32, "end": 1036.24, "text": " but just to recap it, control plane is something that basically is fancy and elaborate, you", "tokens": [457, 445, 281, 20928, 309, 11, 1969, 5720, 307, 746, 300, 1936, 307, 10247, 293, 20945, 11, 291], "temperature": 0.0, "avg_logprob": -0.1902917418817077, "compression_ratio": 1.72, "no_speech_prob": 3.1672490877099335e-05}, {"id": 178, "seek": 101080, "start": 1036.24, "end": 1039.84, "text": " expect it to be really nice, you want to have a nice interface to configure your application", "tokens": [2066, 309, 281, 312, 534, 1481, 11, 291, 528, 281, 362, 257, 1481, 9226, 281, 22162, 428, 3861], "temperature": 0.0, "avg_logprob": -0.1902917418817077, "compression_ratio": 1.72, "no_speech_prob": 3.1672490877099335e-05}, {"id": 179, "seek": 103984, "start": 1039.84, "end": 1044.32, "text": " and monitor it, the data plane on the other hand you really just want it to work, it should", "tokens": [293, 6002, 309, 11, 264, 1412, 5720, 322, 264, 661, 1011, 291, 534, 445, 528, 309, 281, 589, 11, 309, 820], "temperature": 0.0, "avg_logprob": -0.16774315028995662, "compression_ratio": 1.595, "no_speech_prob": 2.3911328753456473e-05}, {"id": 180, "seek": 103984, "start": 1044.32, "end": 1054.52, "text": " like preferably run at line rate, and you don't really have any time to mess around.", "tokens": [411, 45916, 1190, 412, 1622, 3314, 11, 293, 291, 500, 380, 534, 362, 604, 565, 281, 2082, 926, 13], "temperature": 0.0, "avg_logprob": -0.16774315028995662, "compression_ratio": 1.595, "no_speech_prob": 2.3911328753456473e-05}, {"id": 181, "seek": 103984, "start": 1054.52, "end": 1059.08, "text": " So since these like two different parts of the application have very different requirements", "tokens": [407, 1670, 613, 411, 732, 819, 3166, 295, 264, 3861, 362, 588, 819, 7728], "temperature": 0.0, "avg_logprob": -0.16774315028995662, "compression_ratio": 1.595, "no_speech_prob": 2.3911328753456473e-05}, {"id": 182, "seek": 103984, "start": 1059.08, "end": 1066.32, "text": " nice to keep them separate, and that's what we do.", "tokens": [1481, 281, 1066, 552, 4994, 11, 293, 300, 311, 437, 321, 360, 13], "temperature": 0.0, "avg_logprob": -0.16774315028995662, "compression_ratio": 1.595, "no_speech_prob": 2.3911328753456473e-05}, {"id": 183, "seek": 106632, "start": 1066.32, "end": 1072.36, "text": " We also have libyang, so you see both the configuration and the application state of", "tokens": [492, 611, 362, 22854, 23594, 11, 370, 291, 536, 1293, 264, 11694, 293, 264, 3861, 1785, 295], "temperature": 0.0, "avg_logprob": -0.21163915658926036, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00012684304965659976}, {"id": 184, "seek": 106632, "start": 1072.36, "end": 1078.12, "text": " snap flow are actually managed by described in the yang schema.", "tokens": [13650, 3095, 366, 767, 6453, 538, 7619, 294, 264, 5581, 34078, 13], "temperature": 0.0, "avg_logprob": -0.21163915658926036, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00012684304965659976}, {"id": 185, "seek": 106632, "start": 1078.12, "end": 1082.76, "text": " So for example you can tell the control plane to load a new configuration of snap flow or", "tokens": [407, 337, 1365, 291, 393, 980, 264, 1969, 5720, 281, 3677, 257, 777, 11694, 295, 13650, 3095, 420], "temperature": 0.0, "avg_logprob": -0.21163915658926036, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00012684304965659976}, {"id": 186, "seek": 106632, "start": 1082.76, "end": 1086.8, "text": " you can query it for some state counters while it's running, and on this slide I have some", "tokens": [291, 393, 14581, 309, 337, 512, 1785, 39338, 1339, 309, 311, 2614, 11, 293, 322, 341, 4137, 286, 362, 512], "temperature": 0.0, "avg_logprob": -0.21163915658926036, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00012684304965659976}, {"id": 187, "seek": 108680, "start": 1086.8, "end": 1099.96, "text": " examples how you will use the snap command line interface to do those things.", "tokens": [5110, 577, 291, 486, 764, 264, 13650, 5622, 1622, 9226, 281, 360, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.11357944439619015, "compression_ratio": 1.6939890710382515, "no_speech_prob": 6.0988604673184454e-05}, {"id": 188, "seek": 108680, "start": 1099.96, "end": 1105.96, "text": " So here we have a snippet of the snap flow yang schema, and yang is one of these things", "tokens": [407, 510, 321, 362, 257, 35623, 302, 295, 264, 13650, 3095, 5581, 34078, 11, 293, 5581, 307, 472, 295, 613, 721], "temperature": 0.0, "avg_logprob": -0.11357944439619015, "compression_ratio": 1.6939890710382515, "no_speech_prob": 6.0988604673184454e-05}, {"id": 189, "seek": 108680, "start": 1105.96, "end": 1109.68, "text": " where at the beginning you wonder if you're really going to need it, but once that you", "tokens": [689, 412, 264, 2863, 291, 2441, 498, 291, 434, 534, 516, 281, 643, 309, 11, 457, 1564, 300, 291], "temperature": 0.0, "avg_logprob": -0.11357944439619015, "compression_ratio": 1.6939890710382515, "no_speech_prob": 6.0988604673184454e-05}, {"id": 190, "seek": 108680, "start": 1109.68, "end": 1112.96, "text": " have it you are usually really happy that you do have it.", "tokens": [362, 309, 291, 366, 2673, 534, 2055, 300, 291, 360, 362, 309, 13], "temperature": 0.0, "avg_logprob": -0.11357944439619015, "compression_ratio": 1.6939890710382515, "no_speech_prob": 6.0988604673184454e-05}, {"id": 191, "seek": 111296, "start": 1112.96, "end": 1119.8400000000001, "text": " So what I like specifically about yang is it's very expressive.", "tokens": [407, 437, 286, 411, 4682, 466, 5581, 307, 309, 311, 588, 40189, 13], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 192, "seek": 111296, "start": 1119.8400000000001, "end": 1123.72, "text": " If a configuration passes the control plane and it doesn't reject it because it says hey", "tokens": [759, 257, 11694, 11335, 264, 1969, 5720, 293, 309, 1177, 380, 8248, 309, 570, 309, 1619, 4177], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 193, "seek": 111296, "start": 1123.72, "end": 1126.8, "text": " this is invalid, I'm pretty confident that this configuration will do something useful", "tokens": [341, 307, 34702, 11, 286, 478, 1238, 6679, 300, 341, 11694, 486, 360, 746, 4420], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 194, "seek": 111296, "start": 1126.8, "end": 1130.52, "text": " in the data plane and it will not just like crash.", "tokens": [294, 264, 1412, 5720, 293, 309, 486, 406, 445, 411, 8252, 13], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 195, "seek": 111296, "start": 1130.52, "end": 1136.04, "text": " For example here we have a list of interfaces and one of the fields is a device which is", "tokens": [1171, 1365, 510, 321, 362, 257, 1329, 295, 28416, 293, 472, 295, 264, 7909, 307, 257, 4302, 597, 307], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 196, "seek": 111296, "start": 1136.04, "end": 1140.92, "text": " a PCI address and the PCI address in this case this type is attached to some regular", "tokens": [257, 6465, 40, 2985, 293, 264, 6465, 40, 2985, 294, 341, 1389, 341, 2010, 307, 8570, 281, 512, 3890], "temperature": 0.0, "avg_logprob": -0.15865791390795225, "compression_ratio": 1.6996336996336996, "no_speech_prob": 6.199915515026078e-05}, {"id": 197, "seek": 114092, "start": 1140.92, "end": 1144.0800000000002, "text": " expression that makes sure that it actually looks like a PCI address and we kind of just", "tokens": [6114, 300, 1669, 988, 300, 309, 767, 1542, 411, 257, 6465, 40, 2985, 293, 321, 733, 295, 445], "temperature": 0.0, "avg_logprob": -0.17395001992411996, "compression_ratio": 1.6308411214953271, "no_speech_prob": 3.268646469223313e-05}, {"id": 198, "seek": 114092, "start": 1144.0800000000002, "end": 1148.16, "text": " pass any string in there and validate it somewhere way down the line.", "tokens": [1320, 604, 6798, 294, 456, 293, 29562, 309, 4079, 636, 760, 264, 1622, 13], "temperature": 0.0, "avg_logprob": -0.17395001992411996, "compression_ratio": 1.6308411214953271, "no_speech_prob": 3.268646469223313e-05}, {"id": 199, "seek": 114092, "start": 1148.16, "end": 1155.0, "text": " Like if you don't put a thing that at least looks like a PCI address then this won't even", "tokens": [1743, 498, 291, 500, 380, 829, 257, 551, 300, 412, 1935, 1542, 411, 257, 6465, 40, 2985, 550, 341, 1582, 380, 754], "temperature": 0.0, "avg_logprob": -0.17395001992411996, "compression_ratio": 1.6308411214953271, "no_speech_prob": 3.268646469223313e-05}, {"id": 200, "seek": 114092, "start": 1155.0, "end": 1160.52, "text": " be loaded.", "tokens": [312, 13210, 13], "temperature": 0.0, "avg_logprob": -0.17395001992411996, "compression_ratio": 1.6308411214953271, "no_speech_prob": 3.268646469223313e-05}, {"id": 201, "seek": 114092, "start": 1160.52, "end": 1166.24, "text": " So sadly any piece of software has bugs and in our case even suboptimal performance often", "tokens": [407, 22023, 604, 2522, 295, 4722, 575, 15120, 293, 294, 527, 1389, 754, 1422, 5747, 10650, 3389, 2049], "temperature": 0.0, "avg_logprob": -0.17395001992411996, "compression_ratio": 1.6308411214953271, "no_speech_prob": 3.268646469223313e-05}, {"id": 202, "seek": 116624, "start": 1166.24, "end": 1171.0, "text": " considered a bug right and we deal with the second issue here with the performance by", "tokens": [4888, 257, 7426, 558, 293, 321, 2028, 365, 264, 1150, 2734, 510, 365, 264, 3389, 538], "temperature": 0.0, "avg_logprob": -0.2735608499261397, "compression_ratio": 1.6431924882629108, "no_speech_prob": 3.6467230529524386e-05}, {"id": 203, "seek": 116624, "start": 1171.0, "end": 1173.56, "text": " shipping snap with a flight recorder.", "tokens": [14122, 13650, 365, 257, 7018, 37744, 13], "temperature": 0.0, "avg_logprob": -0.2735608499261397, "compression_ratio": 1.6431924882629108, "no_speech_prob": 3.6467230529524386e-05}, {"id": 204, "seek": 116624, "start": 1173.56, "end": 1177.24, "text": " So this flight recorder has minimal overhead, it's always on you even run in production", "tokens": [407, 341, 7018, 37744, 575, 13206, 19922, 11, 309, 311, 1009, 322, 291, 754, 1190, 294, 4265], "temperature": 0.0, "avg_logprob": -0.2735608499261397, "compression_ratio": 1.6431924882629108, "no_speech_prob": 3.6467230529524386e-05}, {"id": 205, "seek": 116624, "start": 1177.24, "end": 1184.56, "text": " preferably and it stores useful data, part of that data is really useful to profile your", "tokens": [45916, 293, 309, 9512, 4420, 1412, 11, 644, 295, 300, 1412, 307, 534, 4420, 281, 7964, 428], "temperature": 0.0, "avg_logprob": -0.2735608499261397, "compression_ratio": 1.6431924882629108, "no_speech_prob": 3.6467230529524386e-05}, {"id": 206, "seek": 116624, "start": 1184.56, "end": 1195.24, "text": " application after the fact or while it's running.", "tokens": [3861, 934, 264, 1186, 420, 1339, 309, 311, 2614, 13], "temperature": 0.0, "avg_logprob": -0.2735608499261397, "compression_ratio": 1.6431924882629108, "no_speech_prob": 3.6467230529524386e-05}, {"id": 207, "seek": 119524, "start": 1195.24, "end": 1200.76, "text": " To analyze the collected data we have built a little UI that we used to do that, it's", "tokens": [1407, 12477, 264, 11087, 1412, 321, 362, 3094, 257, 707, 15682, 300, 321, 1143, 281, 360, 300, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 208, "seek": 119524, "start": 1200.76, "end": 1204.16, "text": " usually running on one of our development servers so we test stuff but you can really", "tokens": [2673, 2614, 322, 472, 295, 527, 3250, 15909, 370, 321, 1500, 1507, 457, 291, 393, 534], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 209, "seek": 119524, "start": 1204.16, "end": 1206.84, "text": " run it anywhere.", "tokens": [1190, 309, 4992, 13], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 210, "seek": 119524, "start": 1206.84, "end": 1207.84, "text": " Did I mention snap?", "tokens": [2589, 286, 2152, 13650, 30], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 211, "seek": 119524, "start": 1207.84, "end": 1208.84, "text": " I did right?", "tokens": [286, 630, 558, 30], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 212, "seek": 119524, "start": 1208.84, "end": 1212.68, "text": " So we're dealing with a JIT compiler here.", "tokens": [407, 321, 434, 6260, 365, 257, 508, 3927, 31958, 510, 13], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 213, "seek": 119524, "start": 1212.68, "end": 1216.84, "text": " So the UI shows you stuff that you would expect from a profiler like basically where does", "tokens": [407, 264, 15682, 3110, 291, 1507, 300, 291, 576, 2066, 490, 257, 1740, 5441, 411, 1936, 689, 775], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 214, "seek": 119524, "start": 1216.84, "end": 1223.08, "text": " my program spend its time but also some JIT related stuff like did the compiler have issues", "tokens": [452, 1461, 3496, 1080, 565, 457, 611, 512, 508, 3927, 4077, 1507, 411, 630, 264, 31958, 362, 2663], "temperature": 0.0, "avg_logprob": -0.21449194456401624, "compression_ratio": 1.6218181818181818, "no_speech_prob": 9.01426246855408e-05}, {"id": 215, "seek": 122308, "start": 1223.08, "end": 1226.52, "text": " generating efficient code for particular parts of my program.", "tokens": [17746, 7148, 3089, 337, 1729, 3166, 295, 452, 1461, 13], "temperature": 0.0, "avg_logprob": -0.21578408649989536, "compression_ratio": 1.5549738219895288, "no_speech_prob": 6.910369847901165e-05}, {"id": 216, "seek": 122308, "start": 1226.52, "end": 1234.1599999999999, "text": " So for example here there's like a JGC column that's like when the injected code the garbage", "tokens": [407, 337, 1365, 510, 456, 311, 411, 257, 508, 38, 34, 7738, 300, 311, 411, 562, 264, 36967, 3089, 264, 14150], "temperature": 0.0, "avg_logprob": -0.21578408649989536, "compression_ratio": 1.5549738219895288, "no_speech_prob": 6.910369847901165e-05}, {"id": 217, "seek": 122308, "start": 1234.1599999999999, "end": 1245.56, "text": " collector is invoked and that's for example something to look out for.", "tokens": [23960, 307, 1048, 9511, 293, 300, 311, 337, 1365, 746, 281, 574, 484, 337, 13], "temperature": 0.0, "avg_logprob": -0.21578408649989536, "compression_ratio": 1.5549738219895288, "no_speech_prob": 6.910369847901165e-05}, {"id": 218, "seek": 122308, "start": 1245.56, "end": 1249.12, "text": " And another part of the flight recorder is a high resolution event log.", "tokens": [400, 1071, 644, 295, 264, 7018, 37744, 307, 257, 1090, 8669, 2280, 3565, 13], "temperature": 0.0, "avg_logprob": -0.21578408649989536, "compression_ratio": 1.5549738219895288, "no_speech_prob": 6.910369847901165e-05}, {"id": 219, "seek": 124912, "start": 1249.12, "end": 1255.4799999999998, "text": " It can give you accurate latency measurements of the pieces that make up your software.", "tokens": [467, 393, 976, 291, 8559, 27043, 15383, 295, 264, 3755, 300, 652, 493, 428, 4722, 13], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 220, "seek": 124912, "start": 1255.4799999999998, "end": 1262.12, "text": " And you can see here on the slide that the OUI has or it shows latency histograms for", "tokens": [400, 291, 393, 536, 510, 322, 264, 4137, 300, 264, 422, 46324, 575, 420, 309, 3110, 27043, 49816, 82, 337], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 221, "seek": 124912, "start": 1262.12, "end": 1263.36, "text": " individual events.", "tokens": [2609, 3931, 13], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 222, "seek": 124912, "start": 1263.36, "end": 1266.84, "text": " These events are, some of these events are like already defined in snap but you can also", "tokens": [1981, 3931, 366, 11, 512, 295, 613, 3931, 366, 411, 1217, 7642, 294, 13650, 457, 291, 393, 611], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 223, "seek": 124912, "start": 1266.84, "end": 1269.52, "text": " use a defined new event.", "tokens": [764, 257, 7642, 777, 2280, 13], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 224, "seek": 124912, "start": 1269.52, "end": 1277.12, "text": " And here for example I could tell that processing a batch of packets and extracting the flow", "tokens": [400, 510, 337, 1365, 286, 727, 980, 300, 9007, 257, 15245, 295, 30364, 293, 49844, 264, 3095], "temperature": 0.0, "avg_logprob": -0.19164531788927444, "compression_ratio": 1.6625, "no_speech_prob": 9.595492156222463e-05}, {"id": 225, "seek": 127712, "start": 1277.12, "end": 1285.12, "text": " data so this is like the main IP fix app main loop takes us about 35 microseconds per iteration", "tokens": [1412, 370, 341, 307, 411, 264, 2135, 8671, 3191, 724, 2135, 6367, 2516, 505, 466, 6976, 3123, 37841, 28750, 680, 24784], "temperature": 0.0, "avg_logprob": -0.18833483378092447, "compression_ratio": 1.5183246073298429, "no_speech_prob": 4.00394965254236e-05}, {"id": 226, "seek": 127712, "start": 1285.12, "end": 1288.08, "text": " per process.", "tokens": [680, 1399, 13], "temperature": 0.0, "avg_logprob": -0.18833483378092447, "compression_ratio": 1.5183246073298429, "no_speech_prob": 4.00394965254236e-05}, {"id": 227, "seek": 127712, "start": 1288.08, "end": 1291.8, "text": " And this is really useful if you want to debug tail-latencies, right?", "tokens": [400, 341, 307, 534, 4420, 498, 291, 528, 281, 24083, 6838, 12, 14087, 6464, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18833483378092447, "compression_ratio": 1.5183246073298429, "no_speech_prob": 4.00394965254236e-05}, {"id": 228, "seek": 127712, "start": 1291.8, "end": 1298.6799999999998, "text": " And tail-latencies translate basically to drop packets in our world so that's something", "tokens": [400, 6838, 12, 14087, 6464, 13799, 1936, 281, 3270, 30364, 294, 527, 1002, 370, 300, 311, 746], "temperature": 0.0, "avg_logprob": -0.18833483378092447, "compression_ratio": 1.5183246073298429, "no_speech_prob": 4.00394965254236e-05}, {"id": 229, "seek": 127712, "start": 1298.6799999999998, "end": 1303.32, "text": " that's really valuable.", "tokens": [300, 311, 534, 8263, 13], "temperature": 0.0, "avg_logprob": -0.18833483378092447, "compression_ratio": 1.5183246073298429, "no_speech_prob": 4.00394965254236e-05}, {"id": 230, "seek": 130332, "start": 1303.32, "end": 1311.28, "text": " So to close things, if you were to write a new application based on snap today you would", "tokens": [407, 281, 1998, 721, 11, 498, 291, 645, 281, 2464, 257, 777, 3861, 2361, 322, 13650, 965, 291, 576], "temperature": 0.0, "avg_logprob": -0.1207271971792545, "compression_ratio": 1.45625, "no_speech_prob": 6.282476533669978e-05}, {"id": 231, "seek": 130332, "start": 1311.28, "end": 1318.4399999999998, "text": " have all these things and more ready at your disposal.", "tokens": [362, 439, 613, 721, 293, 544, 1919, 412, 428, 26400, 13], "temperature": 0.0, "avg_logprob": -0.1207271971792545, "compression_ratio": 1.45625, "no_speech_prob": 6.282476533669978e-05}, {"id": 232, "seek": 130332, "start": 1318.4399999999998, "end": 1325.8, "text": " And also it is possible to purchase consultancy services like commercial support for snap", "tokens": [400, 611, 309, 307, 1944, 281, 8110, 7189, 6717, 3328, 411, 6841, 1406, 337, 13650], "temperature": 0.0, "avg_logprob": -0.1207271971792545, "compression_ratio": 1.45625, "no_speech_prob": 6.282476533669978e-05}, {"id": 233, "seek": 132580, "start": 1325.8, "end": 1334.1599999999999, "text": " and developing snap applications from your friendly open source consultancy Igalia, which", "tokens": [293, 6416, 13650, 5821, 490, 428, 9208, 1269, 4009, 7189, 6717, 286, 9800, 654, 11, 597], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 234, "seek": 132580, "start": 1334.1599999999999, "end": 1336.48, "text": " is my current employer.", "tokens": [307, 452, 2190, 16205, 13], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 235, "seek": 132580, "start": 1336.48, "end": 1341.24, "text": " So yeah, that's all for now, thanks for your attention.", "tokens": [407, 1338, 11, 300, 311, 439, 337, 586, 11, 3231, 337, 428, 3202, 13], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 236, "seek": 132580, "start": 1341.24, "end": 1345.0, "text": " On the right there are some pointers if you have some contacts, if you have questions", "tokens": [1282, 264, 558, 456, 366, 512, 44548, 498, 291, 362, 512, 15836, 11, 498, 291, 362, 1651], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 237, "seek": 132580, "start": 1345.0, "end": 1349.8, "text": " or inquiries about snap or snap flow you can email us there after the conference or for", "tokens": [420, 13570, 38619, 466, 13650, 420, 13650, 3095, 291, 393, 3796, 505, 456, 934, 264, 7586, 420, 337], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 238, "seek": 132580, "start": 1349.8, "end": 1350.8, "text": " now.", "tokens": [586, 13], "temperature": 0.0, "avg_logprob": -0.23885074881620186, "compression_ratio": 1.5963302752293578, "no_speech_prob": 5.994189268676564e-05}, {"id": 239, "seek": 135080, "start": 1350.8, "end": 1357.8, "text": " If you have any questions, please ask them.", "tokens": [759, 291, 362, 604, 1651, 11, 1767, 1029, 552, 13], "temperature": 0.0, "avg_logprob": -0.42889833450317383, "compression_ratio": 0.86, "no_speech_prob": 0.005965869408100843}, {"id": 240, "seek": 135780, "start": 1357.8, "end": 1387.48, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.423405613218035, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.018819306045770645}, {"id": 241, "seek": 138748, "start": 1387.48, "end": 1388.48, "text": " Please come down.", "tokens": [2555, 808, 760, 13], "temperature": 0.0, "avg_logprob": -0.25737971525925857, "compression_ratio": 1.3233082706766917, "no_speech_prob": 0.008281776681542397}, {"id": 242, "seek": 138748, "start": 1388.48, "end": 1403.2, "text": " There are some seats available here in the middle.", "tokens": [821, 366, 512, 11069, 2435, 510, 294, 264, 2808, 13], "temperature": 0.0, "avg_logprob": -0.25737971525925857, "compression_ratio": 1.3233082706766917, "no_speech_prob": 0.008281776681542397}, {"id": 243, "seek": 138748, "start": 1403.2, "end": 1409.76, "text": " The next speaker is Peter Manev, that is one of the key guys of Suricata, a very popular", "tokens": [440, 958, 8145, 307, 6508, 376, 1929, 85, 11, 300, 307, 472, 295, 264, 2141, 1074, 295, 6732, 299, 3274, 11, 257, 588, 3743], "temperature": 0.0, "avg_logprob": -0.25737971525925857, "compression_ratio": 1.3233082706766917, "no_speech_prob": 0.008281776681542397}, {"id": 244, "seek": 138748, "start": 1409.76, "end": 1412.56, "text": " open source ideas.", "tokens": [1269, 4009, 3487, 13], "temperature": 0.0, "avg_logprob": -0.25737971525925857, "compression_ratio": 1.3233082706766917, "no_speech_prob": 0.008281776681542397}, {"id": 245, "seek": 141256, "start": 1412.56, "end": 1417.84, "text": " And today is going to talk about this open source platform.", "tokens": [400, 965, 307, 516, 281, 751, 466, 341, 1269, 4009, 3663, 13], "temperature": 0.0, "avg_logprob": -0.30777791830209583, "compression_ratio": 1.1136363636363635, "no_speech_prob": 0.018818005919456482}, {"id": 246, "seek": 141784, "start": 1417.84, "end": 1443.84, "text": " Please have a seat here in the middle.", "tokens": [2555, 362, 257, 6121, 510, 294, 264, 2808, 13], "temperature": 0.0, "avg_logprob": -0.5111867831303523, "compression_ratio": 0.8260869565217391, "no_speech_prob": 0.010272656567394733}], "language": "en"}