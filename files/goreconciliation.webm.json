{"text": " We still have one minute before the game starts, ready to go? Thank you. Our next talk is by Sachin, and he's going to talk about a thing that I use every day in Go, but it's kind of weird because it's only existing in this language, as far as I know. But it's how Kubernetes is built, which is the reconciliation pattern. Go ahead. Thank you. Thank you. Thank you all. Thanks for coming. Welcome to Forstium. Today, I'm going to talk about control theories, reconciliation pattern, and how do we use that in Cluster API? So a little bit about me. I work at Canonical, particularly the MicroKStream. Previously, I used to work at VMware. Then I got to know about Cluster API, BIOH, and I try to contribute to Cluster API upstream too. And I'm very much interested in distributed system and cloud-native technologies, so ping me with your favorite tech. So the agenda is like this. So we start with the first basic principles, like what is control theory and PID control system. Then we go up this tech. So L0, L2, just simulate tech, we're going up this tech, one more layer of abstraction. Then we'll see about reconciliation pattern and how they are using Kubernetes. We then see how we extend those reconciliation patterns, and finally, we'll take a look into those patterns in Cluster API and a short demo to come to play with it. So a quick one-on-one of control theory. I'm talking to you. You folks are taking a feedback, and that's like 90% of control theory right there. So control theory is like a branch of mathematics, engineering. So there's a lot of folks who are in trying to find a common theme for dynamic systems, and they were all like, wait, we are all talking about the same things, let's just unify it. So that's how control theory was. It's just a study of how dynamic systems work, particularly the main fundamental crux of it to bring a desired state, a final state into a desired state. So this is kind of what control theories are about. Let's take a very simple example to know more about it. And open-loop controllers, what is it? A simple example will be you have some wet clothes you want to dry them. You put them in a dryer, you set the timer on. Now the clothes are in no way dependent on if they will be dried or not. The only function that is variable is the timer. It times the duration that it needs to shut down the dryer to. It doesn't matter if the clothes are dry or wet. So it's not a good approach to take this. Before I introduce closed-loop controllers, there are a few terms that we need to see. A system is the entity that we want to control. Set point is our desired state, process variable will be observed state. Error is the difference of how overshot or undershot we are from the set point and the process variable. Controller is a simple finite state machine which drives essentially your process variable to the set point. A very favorite example of mine is thermostat. So we are in the room, we have an air conditioner and we have set the thermostat to maintain the temperature at T1, let's say, and currently the temperature is T0. So the thermostat says, no, no, no, the temperature I want is T1. So it produces some processes to the machine, to the AC and it does like an adiabatic process or something to achieve that state. So in that case, our thermostat will be the controller, T0 will be our process variable, T1 is the set point and the error is the difference between the temperature that we want and the room is our system in that case. But it's not always this ideal, this change takes time. It's not like instantly you do, instantly the thermostat says, okay, make the temperature T1 and the AC does that. It takes a gradual amount of time to do that. And so we need a non-ideal situation. What would be an ideal controller look like? So it needs to do these three things essentially. It needs to see, okay, how far am I undershooting or undershooting from the set variable. It needs to do the compensation for large changes and try to adjust based on it. And also it needs to make prediction of how to minimize this error based on previous experiences it has. A very good example of this will be cruise control in your car system. When you're going you turn on the cruise control and it identifies, okay, now I'm going straight but I need to, and there's a turn coming up, I need to apply this amount of turn essentially to make that, to avoid an accident or something. So PID controller is essentially what these three accumulate to, the P is the positional. It's essentially the amount of, for example, in the case of cruise control, it's essentially the amount of turn that the car needs to take to make that curve. It is the linear component, the P is the proportional or the linear component. In the graph we see that it is defined by, if the set point is like a straight line and PV just fluctuates all around, it's the magnitude of the point from the set point to the process variable. The I is the integral component, it is the compensator. So it adjusts based on what the current state is and how I need to set to the desired state but also it needs to compensate fastly. So you're going on a straight road, you need to quickly make the curve. So you cannot, the car cannot go like, okay, I'll make the turn right away when the turn comes up, it needs to gradually make that change. And so for that it uses, the integral component just signifies that gradual curve that it needs to take. And it is defined by the area under the curve in the magnitude versus time graph. D is actually really interesting. It's the predictor, it's how previous experiences that it has, it applies the previous experience that it has and tries to control the state it is trying to achieve. In our cruise control example, it will be as simple as, it sees the curve, it slowly gradually starts to make that adjustment based on like previous experiences that it has, that I should not just overshoot when the curve comes but start gradually differentiating that. The other controllers that we have fall under PID, the D is not much used but it's a really interesting one if you look at it. This funny looking diagram is just a block diagram of how the PID controller tries to manage the process and like it has a sensor in it, which just takes the state of it. This example R is the set point, the signal that we are sending into the controller. The Y becomes the Y function, that becomes the process variable, E is obviously the error and U becomes the signal that is sent to the process here. This fancy looking thing is just a state of the process that we are in. So U takes the signal that we are sending into it, which was as in our previous slide, the set point, sorry, U was the, yeah, the controller, the signal that was sent to the process. YT is the measured output, as you can see from there. The error is the difference between RT and YT. So RT was our set variable from this previous example. And so this, this simple differential equation is just tries to find the particular state of the controller that is written and how is it trying to achieve that state. The coefficients K0, K1, and K2 totally depend on the system that we are in. So reconciliation patterns in Kubernetes. How do Kubernetes incorporate these patterns that we see and use it to make controllers and you can silence it? So on a very high level, this is what a simple reconciliation look like. It's a forever loop, which has a desired and a current state, which are set points and process variables, and actuator that makes this change. Let's try to take the current state into a desired state. And this is like available on, this is like from the controller, and you can check it out it has a very good specification of how to make a controller. Let's take a very simple example to see how it actually works in a one node cluster. So we have a one node cluster, we have deployment that is deployed, which has a replica set which provisions two pods on a single node cluster. The node talks to the API server, the API server talks to HCD, and it has a bunch of controllers that it needs to run that state. So everything is fun. Now, pod decides to bail out, it's gone, just like that. And so there is now, the state is not maintained, the desired state is lost. So what the Kubelet does, it talks to, it mostly talks to the API server, API server that says, talks to the HCD, it says, okay, I need two pods, but there is no pod here. So there is the, API server talks to the controllers, it's the scheduler, the deployments and the scheduler and replica set controllers, she gives a new pod to that node, it is mentioned in the HCD server, and finally a pod to its provision on node zero. So this is a very simple example of how controllers works in Kubernetes. Now how do we extend the reconciliation pattern? How do we use it to make CRDs and stuff? So first of all, how many of you folks have used Kubernetes cluster API, CRDs, all these fancy words? Quite a lot. So most of these frameworks, CubeBuilder, Operator SDK, these have this basic structure to make a controller. You create a spec which is set point in this case, we have a status which will, which will the process variable in this case, which is the desired state that we, which is the observed state that we want at any point of time, and it will, and we have a schema that is just defines this object foo in this case, and it has all these spec and status, this I mean, the meta objects, like the name, type, and all that stuff, information in that side that. We create, and we need to fulfill the reconciled interface, so we create a foo reconciler object, and we, we essentially provide it with, with all these business logic that we need to reach that desired state from the current state at any given point of time. The way we do that is we define a CRD, our CRD has a spec which is the desired state, and the controller continuously looks at the CRD to check, okay, this is a desired spec, but we don't have a desired spec right now, so it needs to change, and it's called the, it calls the reconciler, and it does, it executes the business logic that we want it to do. And so that is how we use the, the reconcilation pattern that we've seen earlier in, and extend this for other custom-made objects that we have. Now how do we use these patterns that we saw, and incorporate them in Cluster API? So first of all, Cluster API is a Kubernetes project which tries to declaratively use Cluster APIs to create and figure, manage the life cycle of other clusters that you have. So in a very crude example, the user applies a spec to the cluster, there's a management cluster which is kind of a cluster of clusters, it manages all these other clusters that we have. So a spec defines all those, what those other clusters need to be do, and the management cluster basically has these four kind of things, it has Cluster API CRDs, infrastructure provider CRDs, control plane, and bootstrap provider CRDs. So all these need to be present in the management cluster, and based on these, these specs that it has in CRDs, it will try to maintain the state of all these other, all these other clusters that we have, sorry. So what do these different CRDs do, these different objects, what is the purpose? The Cluster API is basically all these copy objects, like machine set clusters, all this stuff that we, the upstream Cluster API provides us. The bootstrap provider does the job of turning your VM or any default server into a Kubernetes node. You can utilize logic to that, and convert it to the particular Kubernetes node that we want, for EC2, for OpenStack, whatever your cloud provider is. The control plane provider, it provides you with the objects that the control plane of the, like the simple control plane in Cluster API, in Kubernetes, it provides you with all those reconciliation loops and controllers that the control plane needs to mark those states. And the infrastructure provider is basically how particular infrastructure, like EC2, OpenStack, whatever infrastructure you have, and how they will be incorporated into bootstrap or control plane providers. So this is kind of like how these different CRDs go into, CRDs interact with each other, so Cluster, Cluster is from Cluster API, but we need to provide an infrastructure cluster which comes from infrastructure provider to that, and then it will manage. So all of these are very much dependent on which cloud you're using. We'll see an example of this in a few minutes. So a control plane directly comes from control plane provider, machine deployment, machine set, it's all Cluster API stuff, but we need to provide it bootstrap and infrastructure, and similarly bootstrap config and infrastructure machine for it to work, machine health check comes directly from Cluster API, its job essentially is to keep checking the state of the machines and if it's working fine or not. A bit about microcades, because we're going to use microcades, control plane and bootstrap provider. So what happens, so microcades is lightweight communities we have, we have been working on, it is one touch communities highly available, it has all the same configs, you don't need to do much, and it has a very good add-on ecosystem that you can call your own tools, you don't need to rely on us to do all this stuff, you can bring your own custom tools that you need for your clusters. So for the demo, it's a small demo, we need three essential things, so the Cluster API comes from the upstream step, but we need to provide these other three things, and then for this, for bootstrap provider, we'll use our microcades bootstrap provider for control plane, same thing, and from infrastructure we will use open stack providers that we have. So for the demo, let's go, let's see if it works, so like I said, these clusters, these are from upstream cluster API, we just take these CRDs, but then we need to apply what control plane reference will be using, what infrastructure will be using, and it's all like custom based on what you want to do. Similarly to that, we have open stack cluster, open stack cluster that is specific for open stack cluster, we have different projects for that, AWS, Azure, EC2. Then we see microcades control plane, it's specific to microcades, it defines all these specs that a particular instance of microcades will have, and this is a thing to see a bit. So we define a particular version that this particular control plane will have, open stack machine template that we saw before, that is needed for that, and machine deployments, and machine deployments will also have a version that is essential for our demo. So and then there are all these stuff that comes from template, whatever template you apply, it comes from that, so it's quite default, so without trying to actually go into entirety, I have screenshots of it because the entire demo took like an R2 issue. So if I apply this cluster, I'll get this too, so I don't know if you can see, but I'll have six machines in an open stack cluster, which will have a version of 1.24 each. As the time progresses, it provides a provider ID, and at a certain point in time, they're all in ready state and good to go with all of them with 124 communities version. I think to note that is both of them are controlled by different providers, so the machine deployments are controlled by the bootstrap provider, and the control plane takes care of all these control plane nodes. So we'll see how, what happens when we try to update this cluster, what reconciliation is happening when we try to do that. So if I go there, I'll change it to six, and then again to six, as soon as I apply this manifest back, I have changed the desired state for me to have version 126 on both of the control plane and the machine nodes. So as and when I apply that, both the controllers, the bootstrap and the control plane controllers, we'll see 124 is now not what we want, we want 126, so it will start provisioning these machines at 126 version. It goes through the entire place of, so these are the rollout updates, so what happens is a new node is provisioned, a old node is depleted, and this happens until all the nodes are in the desired state. So it's also in place updates, which is a very cool idea, so rather than depleting the nodes, it just does the upgrade in place without having to drain nodes each time it comes and go, and it is a very good use case for when you have a stateful application like a database or something. So it does that, it does the deletion, it does all that stuff, until the entire cluster will be 126, which was the desired state. So all of this we see, we go from basic first principles is like what was control theory, how it gives us controller, then we apply, then we see how we applied it to our communities ecosystem, and then how we extended that, extended those patterns for our cluster API, and finally how can we, how we can have a feature from that first principles. These are some of the talks that I took inspiration from, I definitely recommend control theory in Fitment Rewind by Valerie, it has lots and lots to say about this. Control theory and all these stuff, control theory is dope, it's a very good article that you should definitely check it out. It also talks about reactive patterns, which is cool stuff, lots more use in AI and stuff, so it is cool, and these are all references that I use from other sources as well. So yeah, thank you, thank you for coming, I hope you didn't come in for me. Thank you. I'll take questions if you have, yeah. Are there any questions about Kubernetes, I'm just going to try to get the microphone to you, not any questions about Kubernetes, about the talk, thank you. Can you pass the microphone along, thank you. Hey Guruji, thank you for your talk. In the theory you have the state, the desired state and the current state of the system, and then when you're talking about the thermostat, this is the desired temperature and this is the current temperature, how do you accommodate for when, can the system predict when this is not going to happen, oh I've been pumping the heater for 48 hours and I see that the temperature is not raising, not a single degree, like how do you cater for that? So first of all it means that the system has a fault if it does not reach the desired state, but it will take it as an experience, so if I go to here, the predictor component is what predicts it, it will see okay, the derivative is the predictor component, it will see okay, at some point of time previously this did not work, this change was not working, so it will take that into account and the next time it does that it will take it as an experience, so if it was not working and how did we try to make it work, it will try to take that experience and incorporate it into the next time it tries to do that. Thank you, any other questions? I'll take it as a note, thank you very much again, we have a small 5 minute break so you can stand up, stretch a bit.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 27.6, "text": " We still have one minute before the game starts, ready to go?", "tokens": [492, 920, 362, 472, 3456, 949, 264, 1216, 3719, 11, 1919, 281, 352, 30], "temperature": 0.0, "avg_logprob": -0.72482697168986, "compression_ratio": 0.9242424242424242, "no_speech_prob": 0.47257107496261597}, {"id": 1, "seek": 2760, "start": 27.6, "end": 30.48, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 2, "seek": 2760, "start": 30.48, "end": 35.8, "text": " Our next talk is by Sachin, and he's going to talk about a thing that I use every day", "tokens": [2621, 958, 751, 307, 538, 25626, 259, 11, 293, 415, 311, 516, 281, 751, 466, 257, 551, 300, 286, 764, 633, 786], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 3, "seek": 2760, "start": 35.8, "end": 39.800000000000004, "text": " in Go, but it's kind of weird because it's only existing in this language, as far as", "tokens": [294, 1037, 11, 457, 309, 311, 733, 295, 3657, 570, 309, 311, 787, 6741, 294, 341, 2856, 11, 382, 1400, 382], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 4, "seek": 2760, "start": 39.800000000000004, "end": 40.800000000000004, "text": " I know.", "tokens": [286, 458, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 5, "seek": 2760, "start": 40.800000000000004, "end": 44.08, "text": " But it's how Kubernetes is built, which is the reconciliation pattern.", "tokens": [583, 309, 311, 577, 23145, 307, 3094, 11, 597, 307, 264, 31281, 5102, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 6, "seek": 2760, "start": 44.08, "end": 45.08, "text": " Go ahead.", "tokens": [1037, 2286, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 7, "seek": 2760, "start": 45.08, "end": 46.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 8, "seek": 2760, "start": 46.08, "end": 47.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 9, "seek": 2760, "start": 47.08, "end": 48.08, "text": " Thank you all.", "tokens": [1044, 291, 439, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 10, "seek": 2760, "start": 48.08, "end": 49.08, "text": " Thanks for coming.", "tokens": [2561, 337, 1348, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 11, "seek": 2760, "start": 49.08, "end": 50.08, "text": " Welcome to Forstium.", "tokens": [4027, 281, 1171, 372, 2197, 13], "temperature": 0.0, "avg_logprob": -0.28774627338756215, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.01836729608476162}, {"id": 12, "seek": 5008, "start": 50.08, "end": 58.879999999999995, "text": " Today, I'm going to talk about control theories, reconciliation pattern, and how do we use that", "tokens": [2692, 11, 286, 478, 516, 281, 751, 466, 1969, 13667, 11, 31281, 5102, 11, 293, 577, 360, 321, 764, 300], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 13, "seek": 5008, "start": 58.879999999999995, "end": 59.879999999999995, "text": " in Cluster API?", "tokens": [294, 2033, 8393, 9362, 30], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 14, "seek": 5008, "start": 59.879999999999995, "end": 62.0, "text": " So a little bit about me.", "tokens": [407, 257, 707, 857, 466, 385, 13], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 15, "seek": 5008, "start": 62.0, "end": 64.64, "text": " I work at Canonical, particularly the MicroKStream.", "tokens": [286, 589, 412, 27666, 804, 11, 4098, 264, 25642, 42, 4520, 1572, 13], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 16, "seek": 5008, "start": 64.64, "end": 66.64, "text": " Previously, I used to work at VMware.", "tokens": [33606, 11, 286, 1143, 281, 589, 412, 40146, 13], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 17, "seek": 5008, "start": 66.64, "end": 72.68, "text": " Then I got to know about Cluster API, BIOH, and I try to contribute to Cluster API upstream", "tokens": [1396, 286, 658, 281, 458, 466, 2033, 8393, 9362, 11, 363, 15167, 39, 11, 293, 286, 853, 281, 10586, 281, 2033, 8393, 9362, 33915], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 18, "seek": 5008, "start": 72.68, "end": 73.68, "text": " too.", "tokens": [886, 13], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 19, "seek": 5008, "start": 73.68, "end": 77.88, "text": " And I'm very much interested in distributed system and cloud-native technologies, so ping", "tokens": [400, 286, 478, 588, 709, 3102, 294, 12631, 1185, 293, 4588, 12, 77, 1166, 7943, 11, 370, 26151], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 20, "seek": 5008, "start": 77.88, "end": 79.88, "text": " me with your favorite tech.", "tokens": [385, 365, 428, 2954, 7553, 13], "temperature": 0.0, "avg_logprob": -0.3447054278466009, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00011895504576386884}, {"id": 21, "seek": 7988, "start": 79.88, "end": 83.11999999999999, "text": " So the agenda is like this.", "tokens": [407, 264, 9829, 307, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 22, "seek": 7988, "start": 83.11999999999999, "end": 87.39999999999999, "text": " So we start with the first basic principles, like what is control theory and PID control", "tokens": [407, 321, 722, 365, 264, 700, 3875, 9156, 11, 411, 437, 307, 1969, 5261, 293, 430, 2777, 1969], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 23, "seek": 7988, "start": 87.39999999999999, "end": 88.39999999999999, "text": " system.", "tokens": [1185, 13], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 24, "seek": 7988, "start": 88.39999999999999, "end": 89.39999999999999, "text": " Then we go up this tech.", "tokens": [1396, 321, 352, 493, 341, 7553, 13], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 25, "seek": 7988, "start": 89.39999999999999, "end": 95.52, "text": " So L0, L2, just simulate tech, we're going up this tech, one more layer of abstraction.", "tokens": [407, 441, 15, 11, 441, 17, 11, 445, 27817, 7553, 11, 321, 434, 516, 493, 341, 7553, 11, 472, 544, 4583, 295, 37765, 13], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 26, "seek": 7988, "start": 95.52, "end": 99.67999999999999, "text": " Then we'll see about reconciliation pattern and how they are using Kubernetes.", "tokens": [1396, 321, 603, 536, 466, 31281, 5102, 293, 577, 436, 366, 1228, 23145, 13], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 27, "seek": 7988, "start": 99.67999999999999, "end": 106.6, "text": " We then see how we extend those reconciliation patterns, and finally, we'll take a look into", "tokens": [492, 550, 536, 577, 321, 10101, 729, 31281, 8294, 11, 293, 2721, 11, 321, 603, 747, 257, 574, 666], "temperature": 0.0, "avg_logprob": -0.25155828600731966, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.00015571709081996232}, {"id": 28, "seek": 10660, "start": 106.6, "end": 112.28, "text": " those patterns in Cluster API and a short demo to come to play with it.", "tokens": [729, 8294, 294, 2033, 8393, 9362, 293, 257, 2099, 10723, 281, 808, 281, 862, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 29, "seek": 10660, "start": 112.28, "end": 116.0, "text": " So a quick one-on-one of control theory.", "tokens": [407, 257, 1702, 472, 12, 266, 12, 546, 295, 1969, 5261, 13], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 30, "seek": 10660, "start": 116.0, "end": 117.16, "text": " I'm talking to you.", "tokens": [286, 478, 1417, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 31, "seek": 10660, "start": 117.16, "end": 122.88, "text": " You folks are taking a feedback, and that's like 90% of control theory right there.", "tokens": [509, 4024, 366, 1940, 257, 5824, 11, 293, 300, 311, 411, 4289, 4, 295, 1969, 5261, 558, 456, 13], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 32, "seek": 10660, "start": 122.88, "end": 129.0, "text": " So control theory is like a branch of mathematics, engineering.", "tokens": [407, 1969, 5261, 307, 411, 257, 9819, 295, 18666, 11, 7043, 13], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 33, "seek": 10660, "start": 129.0, "end": 135.79999999999998, "text": " So there's a lot of folks who are in trying to find a common theme for dynamic systems,", "tokens": [407, 456, 311, 257, 688, 295, 4024, 567, 366, 294, 1382, 281, 915, 257, 2689, 6314, 337, 8546, 3652, 11], "temperature": 0.0, "avg_logprob": -0.17932605743408203, "compression_ratio": 1.6, "no_speech_prob": 8.199620788218454e-05}, {"id": 34, "seek": 13580, "start": 135.8, "end": 140.52, "text": " and they were all like, wait, we are all talking about the same things, let's just unify it.", "tokens": [293, 436, 645, 439, 411, 11, 1699, 11, 321, 366, 439, 1417, 466, 264, 912, 721, 11, 718, 311, 445, 517, 2505, 309, 13], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 35, "seek": 13580, "start": 140.52, "end": 143.04000000000002, "text": " So that's how control theory was.", "tokens": [407, 300, 311, 577, 1969, 5261, 390, 13], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 36, "seek": 13580, "start": 143.04000000000002, "end": 149.44, "text": " It's just a study of how dynamic systems work, particularly the main fundamental crux of", "tokens": [467, 311, 445, 257, 2979, 295, 577, 8546, 3652, 589, 11, 4098, 264, 2135, 8088, 5140, 87, 295], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 37, "seek": 13580, "start": 149.44, "end": 155.16000000000003, "text": " it to bring a desired state, a final state into a desired state.", "tokens": [309, 281, 1565, 257, 14721, 1785, 11, 257, 2572, 1785, 666, 257, 14721, 1785, 13], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 38, "seek": 13580, "start": 155.16000000000003, "end": 159.28, "text": " So this is kind of what control theories are about.", "tokens": [407, 341, 307, 733, 295, 437, 1969, 13667, 366, 466, 13], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 39, "seek": 13580, "start": 159.28, "end": 162.56, "text": " Let's take a very simple example to know more about it.", "tokens": [961, 311, 747, 257, 588, 2199, 1365, 281, 458, 544, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 40, "seek": 13580, "start": 162.56, "end": 165.0, "text": " And open-loop controllers, what is it?", "tokens": [400, 1269, 12, 46623, 26903, 11, 437, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.21002593662427818, "compression_ratio": 1.6944444444444444, "no_speech_prob": 2.2806478227721527e-05}, {"id": 41, "seek": 16500, "start": 165.0, "end": 169.52, "text": " A simple example will be you have some wet clothes you want to dry them.", "tokens": [316, 2199, 1365, 486, 312, 291, 362, 512, 6630, 5534, 291, 528, 281, 4016, 552, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 42, "seek": 16500, "start": 169.52, "end": 173.0, "text": " You put them in a dryer, you set the timer on.", "tokens": [509, 829, 552, 294, 257, 29880, 11, 291, 992, 264, 19247, 322, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 43, "seek": 16500, "start": 173.0, "end": 178.52, "text": " Now the clothes are in no way dependent on if they will be dried or not.", "tokens": [823, 264, 5534, 366, 294, 572, 636, 12334, 322, 498, 436, 486, 312, 13538, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 44, "seek": 16500, "start": 178.52, "end": 181.2, "text": " The only function that is variable is the timer.", "tokens": [440, 787, 2445, 300, 307, 7006, 307, 264, 19247, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 45, "seek": 16500, "start": 181.2, "end": 186.8, "text": " It times the duration that it needs to shut down the dryer to.", "tokens": [467, 1413, 264, 16365, 300, 309, 2203, 281, 5309, 760, 264, 29880, 281, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 46, "seek": 16500, "start": 186.8, "end": 189.52, "text": " It doesn't matter if the clothes are dry or wet.", "tokens": [467, 1177, 380, 1871, 498, 264, 5534, 366, 4016, 420, 6630, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 47, "seek": 16500, "start": 189.52, "end": 193.88, "text": " So it's not a good approach to take this.", "tokens": [407, 309, 311, 406, 257, 665, 3109, 281, 747, 341, 13], "temperature": 0.0, "avg_logprob": -0.17051002082474734, "compression_ratio": 1.6952789699570816, "no_speech_prob": 6.781162664992735e-05}, {"id": 48, "seek": 19388, "start": 193.88, "end": 199.44, "text": " Before I introduce closed-loop controllers, there are a few terms that we need to see.", "tokens": [4546, 286, 5366, 5395, 12, 46623, 26903, 11, 456, 366, 257, 1326, 2115, 300, 321, 643, 281, 536, 13], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 49, "seek": 19388, "start": 199.44, "end": 202.92, "text": " A system is the entity that we want to control.", "tokens": [316, 1185, 307, 264, 13977, 300, 321, 528, 281, 1969, 13], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 50, "seek": 19388, "start": 202.92, "end": 207.0, "text": " Set point is our desired state, process variable will be observed state.", "tokens": [8928, 935, 307, 527, 14721, 1785, 11, 1399, 7006, 486, 312, 13095, 1785, 13], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 51, "seek": 19388, "start": 207.0, "end": 212.6, "text": " Error is the difference of how overshot or undershot we are from the set point and the", "tokens": [3300, 2874, 307, 264, 2649, 295, 577, 670, 18402, 420, 16692, 12194, 321, 366, 490, 264, 992, 935, 293, 264], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 52, "seek": 19388, "start": 212.6, "end": 214.72, "text": " process variable.", "tokens": [1399, 7006, 13], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 53, "seek": 19388, "start": 214.72, "end": 222.07999999999998, "text": " Controller is a simple finite state machine which drives essentially your process variable", "tokens": [44969, 307, 257, 2199, 19362, 1785, 3479, 597, 11754, 4476, 428, 1399, 7006], "temperature": 0.0, "avg_logprob": -0.23362253067341257, "compression_ratio": 1.7370689655172413, "no_speech_prob": 2.503104042261839e-05}, {"id": 54, "seek": 22208, "start": 222.08, "end": 224.64000000000001, "text": " to the set point.", "tokens": [281, 264, 992, 935, 13], "temperature": 0.0, "avg_logprob": -0.24928738350091978, "compression_ratio": 1.7396449704142012, "no_speech_prob": 8.845105912769213e-05}, {"id": 55, "seek": 22208, "start": 224.64000000000001, "end": 228.68, "text": " A very favorite example of mine is thermostat.", "tokens": [316, 588, 2954, 1365, 295, 3892, 307, 8810, 39036, 13], "temperature": 0.0, "avg_logprob": -0.24928738350091978, "compression_ratio": 1.7396449704142012, "no_speech_prob": 8.845105912769213e-05}, {"id": 56, "seek": 22208, "start": 228.68, "end": 235.08, "text": " So we are in the room, we have an air conditioner and we have set the thermostat to maintain", "tokens": [407, 321, 366, 294, 264, 1808, 11, 321, 362, 364, 1988, 33558, 293, 321, 362, 992, 264, 8810, 39036, 281, 6909], "temperature": 0.0, "avg_logprob": -0.24928738350091978, "compression_ratio": 1.7396449704142012, "no_speech_prob": 8.845105912769213e-05}, {"id": 57, "seek": 22208, "start": 235.08, "end": 241.04000000000002, "text": " the temperature at T1, let's say, and currently the temperature is T0.", "tokens": [264, 4292, 412, 314, 16, 11, 718, 311, 584, 11, 293, 4362, 264, 4292, 307, 314, 15, 13], "temperature": 0.0, "avg_logprob": -0.24928738350091978, "compression_ratio": 1.7396449704142012, "no_speech_prob": 8.845105912769213e-05}, {"id": 58, "seek": 22208, "start": 241.04000000000002, "end": 244.92000000000002, "text": " So the thermostat says, no, no, no, the temperature I want is T1.", "tokens": [407, 264, 8810, 39036, 1619, 11, 572, 11, 572, 11, 572, 11, 264, 4292, 286, 528, 307, 314, 16, 13], "temperature": 0.0, "avg_logprob": -0.24928738350091978, "compression_ratio": 1.7396449704142012, "no_speech_prob": 8.845105912769213e-05}, {"id": 59, "seek": 24492, "start": 244.92, "end": 252.28, "text": " So it produces some processes to the machine, to the AC and it does like an adiabatic process", "tokens": [407, 309, 14725, 512, 7555, 281, 264, 3479, 11, 281, 264, 8157, 293, 309, 775, 411, 364, 614, 72, 455, 2399, 1399], "temperature": 0.0, "avg_logprob": -0.1947374979654948, "compression_ratio": 1.7227722772277227, "no_speech_prob": 2.9677225029445253e-05}, {"id": 60, "seek": 24492, "start": 252.28, "end": 255.83999999999997, "text": " or something to achieve that state.", "tokens": [420, 746, 281, 4584, 300, 1785, 13], "temperature": 0.0, "avg_logprob": -0.1947374979654948, "compression_ratio": 1.7227722772277227, "no_speech_prob": 2.9677225029445253e-05}, {"id": 61, "seek": 24492, "start": 255.83999999999997, "end": 260.36, "text": " So in that case, our thermostat will be the controller, T0 will be our process variable,", "tokens": [407, 294, 300, 1389, 11, 527, 8810, 39036, 486, 312, 264, 10561, 11, 314, 15, 486, 312, 527, 1399, 7006, 11], "temperature": 0.0, "avg_logprob": -0.1947374979654948, "compression_ratio": 1.7227722772277227, "no_speech_prob": 2.9677225029445253e-05}, {"id": 62, "seek": 24492, "start": 260.36, "end": 265.47999999999996, "text": " T1 is the set point and the error is the difference between the temperature that we want and the", "tokens": [314, 16, 307, 264, 992, 935, 293, 264, 6713, 307, 264, 2649, 1296, 264, 4292, 300, 321, 528, 293, 264], "temperature": 0.0, "avg_logprob": -0.1947374979654948, "compression_ratio": 1.7227722772277227, "no_speech_prob": 2.9677225029445253e-05}, {"id": 63, "seek": 24492, "start": 265.47999999999996, "end": 270.08, "text": " room is our system in that case.", "tokens": [1808, 307, 527, 1185, 294, 300, 1389, 13], "temperature": 0.0, "avg_logprob": -0.1947374979654948, "compression_ratio": 1.7227722772277227, "no_speech_prob": 2.9677225029445253e-05}, {"id": 64, "seek": 27008, "start": 270.08, "end": 276.0, "text": " But it's not always this ideal, this change takes time.", "tokens": [583, 309, 311, 406, 1009, 341, 7157, 11, 341, 1319, 2516, 565, 13], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 65, "seek": 27008, "start": 276.0, "end": 281.96, "text": " It's not like instantly you do, instantly the thermostat says, okay, make the temperature", "tokens": [467, 311, 406, 411, 13518, 291, 360, 11, 13518, 264, 8810, 39036, 1619, 11, 1392, 11, 652, 264, 4292], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 66, "seek": 27008, "start": 281.96, "end": 284.03999999999996, "text": " T1 and the AC does that.", "tokens": [314, 16, 293, 264, 8157, 775, 300, 13], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 67, "seek": 27008, "start": 284.03999999999996, "end": 287.15999999999997, "text": " It takes a gradual amount of time to do that.", "tokens": [467, 2516, 257, 32890, 2372, 295, 565, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 68, "seek": 27008, "start": 287.15999999999997, "end": 291.2, "text": " And so we need a non-ideal situation.", "tokens": [400, 370, 321, 643, 257, 2107, 12, 482, 304, 2590, 13], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 69, "seek": 27008, "start": 291.2, "end": 293.88, "text": " What would be an ideal controller look like?", "tokens": [708, 576, 312, 364, 7157, 10561, 574, 411, 30], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 70, "seek": 27008, "start": 293.88, "end": 298.28, "text": " So it needs to do these three things essentially.", "tokens": [407, 309, 2203, 281, 360, 613, 1045, 721, 4476, 13], "temperature": 0.0, "avg_logprob": -0.19621703550987638, "compression_ratio": 1.5936073059360731, "no_speech_prob": 8.16708488855511e-05}, {"id": 71, "seek": 29828, "start": 298.28, "end": 304.71999999999997, "text": " It needs to see, okay, how far am I undershooting or undershooting from the set variable.", "tokens": [467, 2203, 281, 536, 11, 1392, 11, 577, 1400, 669, 286, 16692, 47011, 420, 16692, 47011, 490, 264, 992, 7006, 13], "temperature": 0.0, "avg_logprob": -0.15117030424230238, "compression_ratio": 1.6168224299065421, "no_speech_prob": 4.526493285084143e-05}, {"id": 72, "seek": 29828, "start": 304.71999999999997, "end": 311.44, "text": " It needs to do the compensation for large changes and try to adjust based on it.", "tokens": [467, 2203, 281, 360, 264, 19644, 337, 2416, 2962, 293, 853, 281, 4369, 2361, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.15117030424230238, "compression_ratio": 1.6168224299065421, "no_speech_prob": 4.526493285084143e-05}, {"id": 73, "seek": 29828, "start": 311.44, "end": 318.35999999999996, "text": " And also it needs to make prediction of how to minimize this error based on previous experiences", "tokens": [400, 611, 309, 2203, 281, 652, 17630, 295, 577, 281, 17522, 341, 6713, 2361, 322, 3894, 5235], "temperature": 0.0, "avg_logprob": -0.15117030424230238, "compression_ratio": 1.6168224299065421, "no_speech_prob": 4.526493285084143e-05}, {"id": 74, "seek": 29828, "start": 318.35999999999996, "end": 319.35999999999996, "text": " it has.", "tokens": [309, 575, 13], "temperature": 0.0, "avg_logprob": -0.15117030424230238, "compression_ratio": 1.6168224299065421, "no_speech_prob": 4.526493285084143e-05}, {"id": 75, "seek": 29828, "start": 319.35999999999996, "end": 324.64, "text": " A very good example of this will be cruise control in your car system.", "tokens": [316, 588, 665, 1365, 295, 341, 486, 312, 17754, 1969, 294, 428, 1032, 1185, 13], "temperature": 0.0, "avg_logprob": -0.15117030424230238, "compression_ratio": 1.6168224299065421, "no_speech_prob": 4.526493285084143e-05}, {"id": 76, "seek": 32464, "start": 324.64, "end": 330.96, "text": " When you're going you turn on the cruise control and it identifies, okay, now I'm going straight", "tokens": [1133, 291, 434, 516, 291, 1261, 322, 264, 17754, 1969, 293, 309, 34597, 11, 1392, 11, 586, 286, 478, 516, 2997], "temperature": 0.0, "avg_logprob": -0.20995804200689477, "compression_ratio": 1.5845410628019323, "no_speech_prob": 4.0610528230899945e-05}, {"id": 77, "seek": 32464, "start": 330.96, "end": 337.08, "text": " but I need to, and there's a turn coming up, I need to apply this amount of turn essentially", "tokens": [457, 286, 643, 281, 11, 293, 456, 311, 257, 1261, 1348, 493, 11, 286, 643, 281, 3079, 341, 2372, 295, 1261, 4476], "temperature": 0.0, "avg_logprob": -0.20995804200689477, "compression_ratio": 1.5845410628019323, "no_speech_prob": 4.0610528230899945e-05}, {"id": 78, "seek": 32464, "start": 337.08, "end": 343.0, "text": " to make that, to avoid an accident or something.", "tokens": [281, 652, 300, 11, 281, 5042, 364, 6398, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.20995804200689477, "compression_ratio": 1.5845410628019323, "no_speech_prob": 4.0610528230899945e-05}, {"id": 79, "seek": 32464, "start": 343.0, "end": 352.59999999999997, "text": " So PID controller is essentially what these three accumulate to, the P is the positional.", "tokens": [407, 430, 2777, 10561, 307, 4476, 437, 613, 1045, 33384, 281, 11, 264, 430, 307, 264, 2535, 304, 13], "temperature": 0.0, "avg_logprob": -0.20995804200689477, "compression_ratio": 1.5845410628019323, "no_speech_prob": 4.0610528230899945e-05}, {"id": 80, "seek": 35260, "start": 352.6, "end": 357.72, "text": " It's essentially the amount of, for example, in the case of cruise control, it's essentially", "tokens": [467, 311, 4476, 264, 2372, 295, 11, 337, 1365, 11, 294, 264, 1389, 295, 17754, 1969, 11, 309, 311, 4476], "temperature": 0.0, "avg_logprob": -0.14804366883777437, "compression_ratio": 1.8590308370044053, "no_speech_prob": 4.1150742617901415e-05}, {"id": 81, "seek": 35260, "start": 357.72, "end": 363.68, "text": " the amount of turn that the car needs to take to make that curve.", "tokens": [264, 2372, 295, 1261, 300, 264, 1032, 2203, 281, 747, 281, 652, 300, 7605, 13], "temperature": 0.0, "avg_logprob": -0.14804366883777437, "compression_ratio": 1.8590308370044053, "no_speech_prob": 4.1150742617901415e-05}, {"id": 82, "seek": 35260, "start": 363.68, "end": 368.24, "text": " It is the linear component, the P is the proportional or the linear component.", "tokens": [467, 307, 264, 8213, 6542, 11, 264, 430, 307, 264, 24969, 420, 264, 8213, 6542, 13], "temperature": 0.0, "avg_logprob": -0.14804366883777437, "compression_ratio": 1.8590308370044053, "no_speech_prob": 4.1150742617901415e-05}, {"id": 83, "seek": 35260, "start": 368.24, "end": 374.56, "text": " In the graph we see that it is defined by, if the set point is like a straight line and", "tokens": [682, 264, 4295, 321, 536, 300, 309, 307, 7642, 538, 11, 498, 264, 992, 935, 307, 411, 257, 2997, 1622, 293], "temperature": 0.0, "avg_logprob": -0.14804366883777437, "compression_ratio": 1.8590308370044053, "no_speech_prob": 4.1150742617901415e-05}, {"id": 84, "seek": 35260, "start": 374.56, "end": 382.36, "text": " PV just fluctuates all around, it's the magnitude of the point from the set point to the process", "tokens": [23035, 445, 23448, 27710, 439, 926, 11, 309, 311, 264, 15668, 295, 264, 935, 490, 264, 992, 935, 281, 264, 1399], "temperature": 0.0, "avg_logprob": -0.14804366883777437, "compression_ratio": 1.8590308370044053, "no_speech_prob": 4.1150742617901415e-05}, {"id": 85, "seek": 38236, "start": 382.36, "end": 385.2, "text": " variable.", "tokens": [7006, 13], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 86, "seek": 38236, "start": 385.2, "end": 388.92, "text": " The I is the integral component, it is the compensator.", "tokens": [440, 286, 307, 264, 11573, 6542, 11, 309, 307, 264, 11598, 1639, 13], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 87, "seek": 38236, "start": 388.92, "end": 395.0, "text": " So it adjusts based on what the current state is and how I need to set to the desired state", "tokens": [407, 309, 4369, 82, 2361, 322, 437, 264, 2190, 1785, 307, 293, 577, 286, 643, 281, 992, 281, 264, 14721, 1785], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 88, "seek": 38236, "start": 395.0, "end": 398.0, "text": " but also it needs to compensate fastly.", "tokens": [457, 611, 309, 2203, 281, 29458, 2370, 356, 13], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 89, "seek": 38236, "start": 398.0, "end": 403.32, "text": " So you're going on a straight road, you need to quickly make the curve.", "tokens": [407, 291, 434, 516, 322, 257, 2997, 3060, 11, 291, 643, 281, 2661, 652, 264, 7605, 13], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 90, "seek": 38236, "start": 403.32, "end": 407.64, "text": " So you cannot, the car cannot go like, okay, I'll make the turn right away when the turn", "tokens": [407, 291, 2644, 11, 264, 1032, 2644, 352, 411, 11, 1392, 11, 286, 603, 652, 264, 1261, 558, 1314, 562, 264, 1261], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 91, "seek": 38236, "start": 407.64, "end": 410.08000000000004, "text": " comes up, it needs to gradually make that change.", "tokens": [1487, 493, 11, 309, 2203, 281, 13145, 652, 300, 1319, 13], "temperature": 0.0, "avg_logprob": -0.1692053476969401, "compression_ratio": 1.7739130434782608, "no_speech_prob": 0.00010522345110075548}, {"id": 92, "seek": 41008, "start": 410.08, "end": 415.91999999999996, "text": " And so for that it uses, the integral component just signifies that gradual curve that it", "tokens": [400, 370, 337, 300, 309, 4960, 11, 264, 11573, 6542, 445, 1465, 11221, 300, 32890, 7605, 300, 309], "temperature": 0.0, "avg_logprob": -0.23956962684532265, "compression_ratio": 1.6224489795918366, "no_speech_prob": 2.6091045583598316e-05}, {"id": 93, "seek": 41008, "start": 415.91999999999996, "end": 416.91999999999996, "text": " needs to take.", "tokens": [2203, 281, 747, 13], "temperature": 0.0, "avg_logprob": -0.23956962684532265, "compression_ratio": 1.6224489795918366, "no_speech_prob": 2.6091045583598316e-05}, {"id": 94, "seek": 41008, "start": 416.91999999999996, "end": 424.36, "text": " And it is defined by the area under the curve in the magnitude versus time graph.", "tokens": [400, 309, 307, 7642, 538, 264, 1859, 833, 264, 7605, 294, 264, 15668, 5717, 565, 4295, 13], "temperature": 0.0, "avg_logprob": -0.23956962684532265, "compression_ratio": 1.6224489795918366, "no_speech_prob": 2.6091045583598316e-05}, {"id": 95, "seek": 41008, "start": 424.36, "end": 428.52, "text": " D is actually really interesting.", "tokens": [413, 307, 767, 534, 1880, 13], "temperature": 0.0, "avg_logprob": -0.23956962684532265, "compression_ratio": 1.6224489795918366, "no_speech_prob": 2.6091045583598316e-05}, {"id": 96, "seek": 41008, "start": 428.52, "end": 437.24, "text": " It's the predictor, it's how previous experiences that it has, it applies the previous experience", "tokens": [467, 311, 264, 6069, 284, 11, 309, 311, 577, 3894, 5235, 300, 309, 575, 11, 309, 13165, 264, 3894, 1752], "temperature": 0.0, "avg_logprob": -0.23956962684532265, "compression_ratio": 1.6224489795918366, "no_speech_prob": 2.6091045583598316e-05}, {"id": 97, "seek": 43724, "start": 437.24, "end": 442.8, "text": " that it has and tries to control the state it is trying to achieve.", "tokens": [300, 309, 575, 293, 9898, 281, 1969, 264, 1785, 309, 307, 1382, 281, 4584, 13], "temperature": 0.0, "avg_logprob": -0.15744367837905884, "compression_ratio": 1.6600985221674878, "no_speech_prob": 3.5727636714000255e-05}, {"id": 98, "seek": 43724, "start": 442.8, "end": 449.68, "text": " In our cruise control example, it will be as simple as, it sees the curve, it slowly", "tokens": [682, 527, 17754, 1969, 1365, 11, 309, 486, 312, 382, 2199, 382, 11, 309, 8194, 264, 7605, 11, 309, 5692], "temperature": 0.0, "avg_logprob": -0.15744367837905884, "compression_ratio": 1.6600985221674878, "no_speech_prob": 3.5727636714000255e-05}, {"id": 99, "seek": 43724, "start": 449.68, "end": 455.92, "text": " gradually starts to make that adjustment based on like previous experiences that it has,", "tokens": [13145, 3719, 281, 652, 300, 17132, 2361, 322, 411, 3894, 5235, 300, 309, 575, 11], "temperature": 0.0, "avg_logprob": -0.15744367837905884, "compression_ratio": 1.6600985221674878, "no_speech_prob": 3.5727636714000255e-05}, {"id": 100, "seek": 43724, "start": 455.92, "end": 462.2, "text": " that I should not just overshoot when the curve comes but start gradually differentiating", "tokens": [300, 286, 820, 406, 445, 15488, 24467, 562, 264, 7605, 1487, 457, 722, 13145, 27372, 990], "temperature": 0.0, "avg_logprob": -0.15744367837905884, "compression_ratio": 1.6600985221674878, "no_speech_prob": 3.5727636714000255e-05}, {"id": 101, "seek": 43724, "start": 462.2, "end": 463.2, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.15744367837905884, "compression_ratio": 1.6600985221674878, "no_speech_prob": 3.5727636714000255e-05}, {"id": 102, "seek": 46320, "start": 463.2, "end": 470.0, "text": " The other controllers that we have fall under PID, the D is not much used but it's a really", "tokens": [440, 661, 26903, 300, 321, 362, 2100, 833, 430, 2777, 11, 264, 413, 307, 406, 709, 1143, 457, 309, 311, 257, 534], "temperature": 0.0, "avg_logprob": -0.2047275567983652, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.98119359993143e-05}, {"id": 103, "seek": 46320, "start": 470.0, "end": 474.12, "text": " interesting one if you look at it.", "tokens": [1880, 472, 498, 291, 574, 412, 309, 13], "temperature": 0.0, "avg_logprob": -0.2047275567983652, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.98119359993143e-05}, {"id": 104, "seek": 46320, "start": 474.12, "end": 479.71999999999997, "text": " This funny looking diagram is just a block diagram of how the PID controller tries to", "tokens": [639, 4074, 1237, 10686, 307, 445, 257, 3461, 10686, 295, 577, 264, 430, 2777, 10561, 9898, 281], "temperature": 0.0, "avg_logprob": -0.2047275567983652, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.98119359993143e-05}, {"id": 105, "seek": 46320, "start": 479.71999999999997, "end": 489.96, "text": " manage the process and like it has a sensor in it, which just takes the state of it.", "tokens": [3067, 264, 1399, 293, 411, 309, 575, 257, 10200, 294, 309, 11, 597, 445, 2516, 264, 1785, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.2047275567983652, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.98119359993143e-05}, {"id": 106, "seek": 48996, "start": 489.96, "end": 495.68, "text": " This example R is the set point, the signal that we are sending into the controller.", "tokens": [639, 1365, 497, 307, 264, 992, 935, 11, 264, 6358, 300, 321, 366, 7750, 666, 264, 10561, 13], "temperature": 0.0, "avg_logprob": -0.17875975290934246, "compression_ratio": 1.7329545454545454, "no_speech_prob": 1.6643973140162416e-05}, {"id": 107, "seek": 48996, "start": 495.68, "end": 502.91999999999996, "text": " The Y becomes the Y function, that becomes the process variable, E is obviously the error", "tokens": [440, 398, 3643, 264, 398, 2445, 11, 300, 3643, 264, 1399, 7006, 11, 462, 307, 2745, 264, 6713], "temperature": 0.0, "avg_logprob": -0.17875975290934246, "compression_ratio": 1.7329545454545454, "no_speech_prob": 1.6643973140162416e-05}, {"id": 108, "seek": 48996, "start": 502.91999999999996, "end": 509.84, "text": " and U becomes the signal that is sent to the process here.", "tokens": [293, 624, 3643, 264, 6358, 300, 307, 2279, 281, 264, 1399, 510, 13], "temperature": 0.0, "avg_logprob": -0.17875975290934246, "compression_ratio": 1.7329545454545454, "no_speech_prob": 1.6643973140162416e-05}, {"id": 109, "seek": 48996, "start": 509.84, "end": 516.16, "text": " This fancy looking thing is just a state of the process that we are in.", "tokens": [639, 10247, 1237, 551, 307, 445, 257, 1785, 295, 264, 1399, 300, 321, 366, 294, 13], "temperature": 0.0, "avg_logprob": -0.17875975290934246, "compression_ratio": 1.7329545454545454, "no_speech_prob": 1.6643973140162416e-05}, {"id": 110, "seek": 51616, "start": 516.16, "end": 520.68, "text": " So U takes the signal that we are sending into it, which was as in our previous slide,", "tokens": [407, 624, 2516, 264, 6358, 300, 321, 366, 7750, 666, 309, 11, 597, 390, 382, 294, 527, 3894, 4137, 11], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 111, "seek": 51616, "start": 520.68, "end": 527.3199999999999, "text": " the set point, sorry, U was the, yeah, the controller, the signal that was sent to the", "tokens": [264, 992, 935, 11, 2597, 11, 624, 390, 264, 11, 1338, 11, 264, 10561, 11, 264, 6358, 300, 390, 2279, 281, 264], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 112, "seek": 51616, "start": 527.3199999999999, "end": 528.3199999999999, "text": " process.", "tokens": [1399, 13], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 113, "seek": 51616, "start": 528.3199999999999, "end": 533.24, "text": " YT is the measured output, as you can see from there.", "tokens": [398, 51, 307, 264, 12690, 5598, 11, 382, 291, 393, 536, 490, 456, 13], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 114, "seek": 51616, "start": 533.24, "end": 536.4, "text": " The error is the difference between RT and YT.", "tokens": [440, 6713, 307, 264, 2649, 1296, 21797, 293, 398, 51, 13], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 115, "seek": 51616, "start": 536.4, "end": 540.8399999999999, "text": " So RT was our set variable from this previous example.", "tokens": [407, 21797, 390, 527, 992, 7006, 490, 341, 3894, 1365, 13], "temperature": 0.0, "avg_logprob": -0.29702208904509847, "compression_ratio": 1.6407766990291262, "no_speech_prob": 9.656714610173367e-06}, {"id": 116, "seek": 54084, "start": 540.84, "end": 546.5600000000001, "text": " And so this, this simple differential equation is just tries to find the particular state", "tokens": [400, 370, 341, 11, 341, 2199, 15756, 5367, 307, 445, 9898, 281, 915, 264, 1729, 1785], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 117, "seek": 54084, "start": 546.5600000000001, "end": 552.0400000000001, "text": " of the controller that is written and how is it trying to achieve that state.", "tokens": [295, 264, 10561, 300, 307, 3720, 293, 577, 307, 309, 1382, 281, 4584, 300, 1785, 13], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 118, "seek": 54084, "start": 552.0400000000001, "end": 558.52, "text": " The coefficients K0, K1, and K2 totally depend on the system that we are in.", "tokens": [440, 31994, 591, 15, 11, 591, 16, 11, 293, 591, 17, 3879, 5672, 322, 264, 1185, 300, 321, 366, 294, 13], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 119, "seek": 54084, "start": 558.52, "end": 561.2, "text": " So reconciliation patterns in Kubernetes.", "tokens": [407, 31281, 8294, 294, 23145, 13], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 120, "seek": 54084, "start": 561.2, "end": 567.12, "text": " How do Kubernetes incorporate these patterns that we see and use it to make controllers", "tokens": [1012, 360, 23145, 16091, 613, 8294, 300, 321, 536, 293, 764, 309, 281, 652, 26903], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 121, "seek": 54084, "start": 567.12, "end": 569.24, "text": " and you can silence it?", "tokens": [293, 291, 393, 12239, 309, 30], "temperature": 0.0, "avg_logprob": -0.27164934036579536, "compression_ratio": 1.6378600823045268, "no_speech_prob": 0.0001027505932142958}, {"id": 122, "seek": 56924, "start": 569.24, "end": 573.6800000000001, "text": " So on a very high level, this is what a simple reconciliation look like.", "tokens": [407, 322, 257, 588, 1090, 1496, 11, 341, 307, 437, 257, 2199, 31281, 574, 411, 13], "temperature": 0.0, "avg_logprob": -0.27824561492256494, "compression_ratio": 1.672811059907834, "no_speech_prob": 8.062884444370866e-05}, {"id": 123, "seek": 56924, "start": 573.6800000000001, "end": 579.4, "text": " It's a forever loop, which has a desired and a current state, which are set points and", "tokens": [467, 311, 257, 5680, 6367, 11, 597, 575, 257, 14721, 293, 257, 2190, 1785, 11, 597, 366, 992, 2793, 293], "temperature": 0.0, "avg_logprob": -0.27824561492256494, "compression_ratio": 1.672811059907834, "no_speech_prob": 8.062884444370866e-05}, {"id": 124, "seek": 56924, "start": 579.4, "end": 582.88, "text": " process variables, and actuator that makes this change.", "tokens": [1399, 9102, 11, 293, 34964, 1639, 300, 1669, 341, 1319, 13], "temperature": 0.0, "avg_logprob": -0.27824561492256494, "compression_ratio": 1.672811059907834, "no_speech_prob": 8.062884444370866e-05}, {"id": 125, "seek": 56924, "start": 582.88, "end": 589.32, "text": " Let's try to take the current state into a desired state.", "tokens": [961, 311, 853, 281, 747, 264, 2190, 1785, 666, 257, 14721, 1785, 13], "temperature": 0.0, "avg_logprob": -0.27824561492256494, "compression_ratio": 1.672811059907834, "no_speech_prob": 8.062884444370866e-05}, {"id": 126, "seek": 56924, "start": 589.32, "end": 595.12, "text": " And this is like available on, this is like from the controller, and you can check it out", "tokens": [400, 341, 307, 411, 2435, 322, 11, 341, 307, 411, 490, 264, 10561, 11, 293, 291, 393, 1520, 309, 484], "temperature": 0.0, "avg_logprob": -0.27824561492256494, "compression_ratio": 1.672811059907834, "no_speech_prob": 8.062884444370866e-05}, {"id": 127, "seek": 59512, "start": 595.12, "end": 599.08, "text": " it has a very good specification of how to make a controller.", "tokens": [309, 575, 257, 588, 665, 31256, 295, 577, 281, 652, 257, 10561, 13], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 128, "seek": 59512, "start": 599.08, "end": 604.04, "text": " Let's take a very simple example to see how it actually works in a one node cluster.", "tokens": [961, 311, 747, 257, 588, 2199, 1365, 281, 536, 577, 309, 767, 1985, 294, 257, 472, 9984, 13630, 13], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 129, "seek": 59512, "start": 604.04, "end": 608.96, "text": " So we have a one node cluster, we have deployment that is deployed, which has a replica set", "tokens": [407, 321, 362, 257, 472, 9984, 13630, 11, 321, 362, 19317, 300, 307, 17826, 11, 597, 575, 257, 35456, 992], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 130, "seek": 59512, "start": 608.96, "end": 613.08, "text": " which provisions two pods on a single node cluster.", "tokens": [597, 25034, 732, 31925, 322, 257, 2167, 9984, 13630, 13], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 131, "seek": 59512, "start": 613.08, "end": 619.24, "text": " The node talks to the API server, the API server talks to HCD, and it has a bunch of", "tokens": [440, 9984, 6686, 281, 264, 9362, 7154, 11, 264, 9362, 7154, 6686, 281, 389, 16508, 11, 293, 309, 575, 257, 3840, 295], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 132, "seek": 59512, "start": 619.24, "end": 621.64, "text": " controllers that it needs to run that state.", "tokens": [26903, 300, 309, 2203, 281, 1190, 300, 1785, 13], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 133, "seek": 59512, "start": 621.64, "end": 623.8, "text": " So everything is fun.", "tokens": [407, 1203, 307, 1019, 13], "temperature": 0.0, "avg_logprob": -0.22169123197856702, "compression_ratio": 1.782258064516129, "no_speech_prob": 8.05417075753212e-05}, {"id": 134, "seek": 62380, "start": 623.8, "end": 629.56, "text": " Now, pod decides to bail out, it's gone, just like that.", "tokens": [823, 11, 2497, 14898, 281, 19313, 484, 11, 309, 311, 2780, 11, 445, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.32210718930422605, "compression_ratio": 1.6576086956521738, "no_speech_prob": 9.433335799258202e-05}, {"id": 135, "seek": 62380, "start": 629.56, "end": 637.4799999999999, "text": " And so there is now, the state is not maintained, the desired state is lost.", "tokens": [400, 370, 456, 307, 586, 11, 264, 1785, 307, 406, 17578, 11, 264, 14721, 1785, 307, 2731, 13], "temperature": 0.0, "avg_logprob": -0.32210718930422605, "compression_ratio": 1.6576086956521738, "no_speech_prob": 9.433335799258202e-05}, {"id": 136, "seek": 62380, "start": 637.4799999999999, "end": 642.8399999999999, "text": " So what the Kubelet does, it talks to, it mostly talks to the API server, API server", "tokens": [407, 437, 264, 35805, 15966, 775, 11, 309, 6686, 281, 11, 309, 5240, 6686, 281, 264, 9362, 7154, 11, 9362, 7154], "temperature": 0.0, "avg_logprob": -0.32210718930422605, "compression_ratio": 1.6576086956521738, "no_speech_prob": 9.433335799258202e-05}, {"id": 137, "seek": 62380, "start": 642.8399999999999, "end": 648.9599999999999, "text": " that says, talks to the HCD, it says, okay, I need two pods, but there is no pod here.", "tokens": [300, 1619, 11, 6686, 281, 264, 389, 16508, 11, 309, 1619, 11, 1392, 11, 286, 643, 732, 31925, 11, 457, 456, 307, 572, 2497, 510, 13], "temperature": 0.0, "avg_logprob": -0.32210718930422605, "compression_ratio": 1.6576086956521738, "no_speech_prob": 9.433335799258202e-05}, {"id": 138, "seek": 64896, "start": 648.96, "end": 655.1600000000001, "text": " So there is the, API server talks to the controllers, it's the scheduler, the deployments and the", "tokens": [407, 456, 307, 264, 11, 9362, 7154, 6686, 281, 264, 26903, 11, 309, 311, 264, 12000, 260, 11, 264, 7274, 1117, 293, 264], "temperature": 0.0, "avg_logprob": -0.24183987556619846, "compression_ratio": 1.6563876651982379, "no_speech_prob": 3.3649339457042515e-05}, {"id": 139, "seek": 64896, "start": 655.1600000000001, "end": 660.76, "text": " scheduler and replica set controllers, she gives a new pod to that node, it is mentioned", "tokens": [12000, 260, 293, 35456, 992, 26903, 11, 750, 2709, 257, 777, 2497, 281, 300, 9984, 11, 309, 307, 2835], "temperature": 0.0, "avg_logprob": -0.24183987556619846, "compression_ratio": 1.6563876651982379, "no_speech_prob": 3.3649339457042515e-05}, {"id": 140, "seek": 64896, "start": 660.76, "end": 666.6, "text": " in the HCD server, and finally a pod to its provision on node zero.", "tokens": [294, 264, 389, 16508, 7154, 11, 293, 2721, 257, 2497, 281, 1080, 17225, 322, 9984, 4018, 13], "temperature": 0.0, "avg_logprob": -0.24183987556619846, "compression_ratio": 1.6563876651982379, "no_speech_prob": 3.3649339457042515e-05}, {"id": 141, "seek": 64896, "start": 666.6, "end": 673.24, "text": " So this is a very simple example of how controllers works in Kubernetes.", "tokens": [407, 341, 307, 257, 588, 2199, 1365, 295, 577, 26903, 1985, 294, 23145, 13], "temperature": 0.0, "avg_logprob": -0.24183987556619846, "compression_ratio": 1.6563876651982379, "no_speech_prob": 3.3649339457042515e-05}, {"id": 142, "seek": 64896, "start": 673.24, "end": 675.8000000000001, "text": " Now how do we extend the reconciliation pattern?", "tokens": [823, 577, 360, 321, 10101, 264, 31281, 5102, 30], "temperature": 0.0, "avg_logprob": -0.24183987556619846, "compression_ratio": 1.6563876651982379, "no_speech_prob": 3.3649339457042515e-05}, {"id": 143, "seek": 67580, "start": 675.8, "end": 679.68, "text": " How do we use it to make CRDs and stuff?", "tokens": [1012, 360, 321, 764, 309, 281, 652, 14123, 35, 82, 293, 1507, 30], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 144, "seek": 67580, "start": 679.68, "end": 685.8, "text": " So first of all, how many of you folks have used Kubernetes cluster API, CRDs, all these", "tokens": [407, 700, 295, 439, 11, 577, 867, 295, 291, 4024, 362, 1143, 23145, 13630, 9362, 11, 14123, 35, 82, 11, 439, 613], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 145, "seek": 67580, "start": 685.8, "end": 687.5999999999999, "text": " fancy words?", "tokens": [10247, 2283, 30], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 146, "seek": 67580, "start": 687.5999999999999, "end": 690.56, "text": " Quite a lot.", "tokens": [20464, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 147, "seek": 67580, "start": 690.56, "end": 700.5999999999999, "text": " So most of these frameworks, CubeBuilder, Operator SDK, these have this basic structure", "tokens": [407, 881, 295, 613, 29834, 11, 33003, 28110, 793, 260, 11, 12480, 1639, 37135, 11, 613, 362, 341, 3875, 3877], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 148, "seek": 67580, "start": 700.5999999999999, "end": 702.68, "text": " to make a controller.", "tokens": [281, 652, 257, 10561, 13], "temperature": 0.0, "avg_logprob": -0.22664781264316888, "compression_ratio": 1.4095744680851063, "no_speech_prob": 4.972512761014514e-05}, {"id": 149, "seek": 70268, "start": 702.68, "end": 710.9599999999999, "text": " You create a spec which is set point in this case, we have a status which will, which will", "tokens": [509, 1884, 257, 1608, 597, 307, 992, 935, 294, 341, 1389, 11, 321, 362, 257, 6558, 597, 486, 11, 597, 486], "temperature": 0.0, "avg_logprob": -0.20219039916992188, "compression_ratio": 1.9672131147540983, "no_speech_prob": 5.729443728341721e-05}, {"id": 150, "seek": 70268, "start": 710.9599999999999, "end": 715.4, "text": " the process variable in this case, which is the desired state that we, which is the observed", "tokens": [264, 1399, 7006, 294, 341, 1389, 11, 597, 307, 264, 14721, 1785, 300, 321, 11, 597, 307, 264, 13095], "temperature": 0.0, "avg_logprob": -0.20219039916992188, "compression_ratio": 1.9672131147540983, "no_speech_prob": 5.729443728341721e-05}, {"id": 151, "seek": 70268, "start": 715.4, "end": 721.0799999999999, "text": " state that we want at any point of time, and it will, and we have a schema that is just", "tokens": [1785, 300, 321, 528, 412, 604, 935, 295, 565, 11, 293, 309, 486, 11, 293, 321, 362, 257, 34078, 300, 307, 445], "temperature": 0.0, "avg_logprob": -0.20219039916992188, "compression_ratio": 1.9672131147540983, "no_speech_prob": 5.729443728341721e-05}, {"id": 152, "seek": 70268, "start": 721.0799999999999, "end": 727.28, "text": " defines this object foo in this case, and it has all these spec and status, this I mean,", "tokens": [23122, 341, 2657, 726, 78, 294, 341, 1389, 11, 293, 309, 575, 439, 613, 1608, 293, 6558, 11, 341, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.20219039916992188, "compression_ratio": 1.9672131147540983, "no_speech_prob": 5.729443728341721e-05}, {"id": 153, "seek": 72728, "start": 727.28, "end": 735.52, "text": " the meta objects, like the name, type, and all that stuff, information in that side that.", "tokens": [264, 19616, 6565, 11, 411, 264, 1315, 11, 2010, 11, 293, 439, 300, 1507, 11, 1589, 294, 300, 1252, 300, 13], "temperature": 0.0, "avg_logprob": -0.24591317337550475, "compression_ratio": 1.7277227722772277, "no_speech_prob": 5.726192466681823e-05}, {"id": 154, "seek": 72728, "start": 735.52, "end": 742.28, "text": " We create, and we need to fulfill the reconciled interface, so we create a foo reconciler object,", "tokens": [492, 1884, 11, 293, 321, 643, 281, 13875, 264, 9993, 3208, 292, 9226, 11, 370, 321, 1884, 257, 726, 78, 9993, 3208, 260, 2657, 11], "temperature": 0.0, "avg_logprob": -0.24591317337550475, "compression_ratio": 1.7277227722772277, "no_speech_prob": 5.726192466681823e-05}, {"id": 155, "seek": 72728, "start": 742.28, "end": 749.9599999999999, "text": " and we, we essentially provide it with, with all these business logic that we need to reach", "tokens": [293, 321, 11, 321, 4476, 2893, 309, 365, 11, 365, 439, 613, 1606, 9952, 300, 321, 643, 281, 2524], "temperature": 0.0, "avg_logprob": -0.24591317337550475, "compression_ratio": 1.7277227722772277, "no_speech_prob": 5.726192466681823e-05}, {"id": 156, "seek": 72728, "start": 749.9599999999999, "end": 753.8399999999999, "text": " that desired state from the current state at any given point of time.", "tokens": [300, 14721, 1785, 490, 264, 2190, 1785, 412, 604, 2212, 935, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.24591317337550475, "compression_ratio": 1.7277227722772277, "no_speech_prob": 5.726192466681823e-05}, {"id": 157, "seek": 75384, "start": 753.84, "end": 762.5600000000001, "text": " The way we do that is we define a CRD, our CRD has a spec which is the desired state,", "tokens": [440, 636, 321, 360, 300, 307, 321, 6964, 257, 14123, 35, 11, 527, 14123, 35, 575, 257, 1608, 597, 307, 264, 14721, 1785, 11], "temperature": 0.0, "avg_logprob": -0.14046588746627958, "compression_ratio": 1.6857142857142857, "no_speech_prob": 6.171432323753834e-05}, {"id": 158, "seek": 75384, "start": 762.5600000000001, "end": 768.84, "text": " and the controller continuously looks at the CRD to check, okay, this is a desired spec,", "tokens": [293, 264, 10561, 15684, 1542, 412, 264, 14123, 35, 281, 1520, 11, 1392, 11, 341, 307, 257, 14721, 1608, 11], "temperature": 0.0, "avg_logprob": -0.14046588746627958, "compression_ratio": 1.6857142857142857, "no_speech_prob": 6.171432323753834e-05}, {"id": 159, "seek": 75384, "start": 768.84, "end": 772.96, "text": " but we don't have a desired spec right now, so it needs to change, and it's called the,", "tokens": [457, 321, 500, 380, 362, 257, 14721, 1608, 558, 586, 11, 370, 309, 2203, 281, 1319, 11, 293, 309, 311, 1219, 264, 11], "temperature": 0.0, "avg_logprob": -0.14046588746627958, "compression_ratio": 1.6857142857142857, "no_speech_prob": 6.171432323753834e-05}, {"id": 160, "seek": 75384, "start": 772.96, "end": 780.52, "text": " it calls the reconciler, and it does, it executes the business logic that we want it to do.", "tokens": [309, 5498, 264, 9993, 3208, 260, 11, 293, 309, 775, 11, 309, 4454, 1819, 264, 1606, 9952, 300, 321, 528, 309, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.14046588746627958, "compression_ratio": 1.6857142857142857, "no_speech_prob": 6.171432323753834e-05}, {"id": 161, "seek": 78052, "start": 780.52, "end": 787.76, "text": " And so that is how we use the, the reconcilation pattern that we've seen earlier in, and extend", "tokens": [400, 370, 300, 307, 577, 321, 764, 264, 11, 264, 9993, 3208, 399, 5102, 300, 321, 600, 1612, 3071, 294, 11, 293, 10101], "temperature": 0.0, "avg_logprob": -0.23517029543957077, "compression_ratio": 1.5812807881773399, "no_speech_prob": 3.5851186112267897e-05}, {"id": 162, "seek": 78052, "start": 787.76, "end": 792.1999999999999, "text": " this for other custom-made objects that we have.", "tokens": [341, 337, 661, 2375, 12, 10341, 6565, 300, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.23517029543957077, "compression_ratio": 1.5812807881773399, "no_speech_prob": 3.5851186112267897e-05}, {"id": 163, "seek": 78052, "start": 792.1999999999999, "end": 797.6, "text": " Now how do we use these patterns that we saw, and incorporate them in Cluster API?", "tokens": [823, 577, 360, 321, 764, 613, 8294, 300, 321, 1866, 11, 293, 16091, 552, 294, 2033, 8393, 9362, 30], "temperature": 0.0, "avg_logprob": -0.23517029543957077, "compression_ratio": 1.5812807881773399, "no_speech_prob": 3.5851186112267897e-05}, {"id": 164, "seek": 78052, "start": 797.6, "end": 805.48, "text": " So first of all, Cluster API is a Kubernetes project which tries to declaratively use Cluster", "tokens": [407, 700, 295, 439, 11, 2033, 8393, 9362, 307, 257, 23145, 1716, 597, 9898, 281, 16694, 19020, 764, 2033, 8393], "temperature": 0.0, "avg_logprob": -0.23517029543957077, "compression_ratio": 1.5812807881773399, "no_speech_prob": 3.5851186112267897e-05}, {"id": 165, "seek": 80548, "start": 805.48, "end": 810.96, "text": " APIs to create and figure, manage the life cycle of other clusters that you have.", "tokens": [21445, 281, 1884, 293, 2573, 11, 3067, 264, 993, 6586, 295, 661, 23313, 300, 291, 362, 13], "temperature": 0.0, "avg_logprob": -0.19160246849060059, "compression_ratio": 1.8121827411167513, "no_speech_prob": 3.152669523842633e-05}, {"id": 166, "seek": 80548, "start": 810.96, "end": 817.24, "text": " So in a very crude example, the user applies a spec to the cluster, there's a management", "tokens": [407, 294, 257, 588, 30796, 1365, 11, 264, 4195, 13165, 257, 1608, 281, 264, 13630, 11, 456, 311, 257, 4592], "temperature": 0.0, "avg_logprob": -0.19160246849060059, "compression_ratio": 1.8121827411167513, "no_speech_prob": 3.152669523842633e-05}, {"id": 167, "seek": 80548, "start": 817.24, "end": 823.5600000000001, "text": " cluster which is kind of a cluster of clusters, it manages all these other clusters that we", "tokens": [13630, 597, 307, 733, 295, 257, 13630, 295, 23313, 11, 309, 22489, 439, 613, 661, 23313, 300, 321], "temperature": 0.0, "avg_logprob": -0.19160246849060059, "compression_ratio": 1.8121827411167513, "no_speech_prob": 3.152669523842633e-05}, {"id": 168, "seek": 80548, "start": 823.5600000000001, "end": 824.5600000000001, "text": " have.", "tokens": [362, 13], "temperature": 0.0, "avg_logprob": -0.19160246849060059, "compression_ratio": 1.8121827411167513, "no_speech_prob": 3.152669523842633e-05}, {"id": 169, "seek": 80548, "start": 824.5600000000001, "end": 832.0, "text": " So a spec defines all those, what those other clusters need to be do, and the management", "tokens": [407, 257, 1608, 23122, 439, 729, 11, 437, 729, 661, 23313, 643, 281, 312, 360, 11, 293, 264, 4592], "temperature": 0.0, "avg_logprob": -0.19160246849060059, "compression_ratio": 1.8121827411167513, "no_speech_prob": 3.152669523842633e-05}, {"id": 170, "seek": 83200, "start": 832.0, "end": 836.24, "text": " cluster basically has these four kind of things, it has Cluster API CRDs, infrastructure", "tokens": [13630, 1936, 575, 613, 1451, 733, 295, 721, 11, 309, 575, 2033, 8393, 9362, 14123, 35, 82, 11, 6896], "temperature": 0.0, "avg_logprob": -0.1819914992974729, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.135885294293985e-05}, {"id": 171, "seek": 83200, "start": 836.24, "end": 840.64, "text": " provider CRDs, control plane, and bootstrap provider CRDs.", "tokens": [12398, 14123, 35, 82, 11, 1969, 5720, 11, 293, 11450, 372, 4007, 12398, 14123, 35, 82, 13], "temperature": 0.0, "avg_logprob": -0.1819914992974729, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.135885294293985e-05}, {"id": 172, "seek": 83200, "start": 840.64, "end": 845.6, "text": " So all these need to be present in the management cluster, and based on these, these specs that", "tokens": [407, 439, 613, 643, 281, 312, 1974, 294, 264, 4592, 13630, 11, 293, 2361, 322, 613, 11, 613, 1608, 82, 300], "temperature": 0.0, "avg_logprob": -0.1819914992974729, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.135885294293985e-05}, {"id": 173, "seek": 83200, "start": 845.6, "end": 853.76, "text": " it has in CRDs, it will try to maintain the state of all these other, all these other", "tokens": [309, 575, 294, 14123, 35, 82, 11, 309, 486, 853, 281, 6909, 264, 1785, 295, 439, 613, 661, 11, 439, 613, 661], "temperature": 0.0, "avg_logprob": -0.1819914992974729, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.135885294293985e-05}, {"id": 174, "seek": 83200, "start": 853.76, "end": 859.04, "text": " clusters that we have, sorry.", "tokens": [23313, 300, 321, 362, 11, 2597, 13], "temperature": 0.0, "avg_logprob": -0.1819914992974729, "compression_ratio": 1.7684729064039408, "no_speech_prob": 5.135885294293985e-05}, {"id": 175, "seek": 85904, "start": 859.04, "end": 865.48, "text": " So what do these different CRDs do, these different objects, what is the purpose?", "tokens": [407, 437, 360, 613, 819, 14123, 35, 82, 360, 11, 613, 819, 6565, 11, 437, 307, 264, 4334, 30], "temperature": 0.0, "avg_logprob": -0.25005412683254336, "compression_ratio": 1.565217391304348, "no_speech_prob": 6.073243639548309e-05}, {"id": 176, "seek": 85904, "start": 865.48, "end": 872.68, "text": " The Cluster API is basically all these copy objects, like machine set clusters, all this", "tokens": [440, 2033, 8393, 9362, 307, 1936, 439, 613, 5055, 6565, 11, 411, 3479, 992, 23313, 11, 439, 341], "temperature": 0.0, "avg_logprob": -0.25005412683254336, "compression_ratio": 1.565217391304348, "no_speech_prob": 6.073243639548309e-05}, {"id": 177, "seek": 85904, "start": 872.68, "end": 877.28, "text": " stuff that we, the upstream Cluster API provides us.", "tokens": [1507, 300, 321, 11, 264, 33915, 2033, 8393, 9362, 6417, 505, 13], "temperature": 0.0, "avg_logprob": -0.25005412683254336, "compression_ratio": 1.565217391304348, "no_speech_prob": 6.073243639548309e-05}, {"id": 178, "seek": 85904, "start": 877.28, "end": 883.52, "text": " The bootstrap provider does the job of turning your VM or any default server into a Kubernetes", "tokens": [440, 11450, 372, 4007, 12398, 775, 264, 1691, 295, 6246, 428, 18038, 420, 604, 7576, 7154, 666, 257, 23145], "temperature": 0.0, "avg_logprob": -0.25005412683254336, "compression_ratio": 1.565217391304348, "no_speech_prob": 6.073243639548309e-05}, {"id": 179, "seek": 85904, "start": 883.52, "end": 884.52, "text": " node.", "tokens": [9984, 13], "temperature": 0.0, "avg_logprob": -0.25005412683254336, "compression_ratio": 1.565217391304348, "no_speech_prob": 6.073243639548309e-05}, {"id": 180, "seek": 88452, "start": 884.52, "end": 889.36, "text": " You can utilize logic to that, and convert it to the particular Kubernetes node that", "tokens": [509, 393, 16117, 9952, 281, 300, 11, 293, 7620, 309, 281, 264, 1729, 23145, 9984, 300], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 181, "seek": 88452, "start": 889.36, "end": 894.04, "text": " we want, for EC2, for OpenStack, whatever your cloud provider is.", "tokens": [321, 528, 11, 337, 19081, 17, 11, 337, 7238, 4520, 501, 11, 2035, 428, 4588, 12398, 307, 13], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 182, "seek": 88452, "start": 894.04, "end": 902.28, "text": " The control plane provider, it provides you with the objects that the control plane of", "tokens": [440, 1969, 5720, 12398, 11, 309, 6417, 291, 365, 264, 6565, 300, 264, 1969, 5720, 295], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 183, "seek": 88452, "start": 902.28, "end": 907.88, "text": " the, like the simple control plane in Cluster API, in Kubernetes, it provides you with all", "tokens": [264, 11, 411, 264, 2199, 1969, 5720, 294, 2033, 8393, 9362, 11, 294, 23145, 11, 309, 6417, 291, 365, 439], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 184, "seek": 88452, "start": 907.88, "end": 912.72, "text": " those reconciliation loops and controllers that the control plane needs to mark those", "tokens": [729, 31281, 16121, 293, 26903, 300, 264, 1969, 5720, 2203, 281, 1491, 729], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 185, "seek": 88452, "start": 912.72, "end": 914.28, "text": " states.", "tokens": [4368, 13], "temperature": 0.0, "avg_logprob": -0.27611507068980823, "compression_ratio": 1.8111587982832618, "no_speech_prob": 0.00016899884212762117}, {"id": 186, "seek": 91428, "start": 914.28, "end": 920.4399999999999, "text": " And the infrastructure provider is basically how particular infrastructure, like EC2, OpenStack,", "tokens": [400, 264, 6896, 12398, 307, 1936, 577, 1729, 6896, 11, 411, 19081, 17, 11, 7238, 4520, 501, 11], "temperature": 0.0, "avg_logprob": -0.22030450964486728, "compression_ratio": 1.7004405286343611, "no_speech_prob": 6.0824022511951625e-05}, {"id": 187, "seek": 91428, "start": 920.4399999999999, "end": 924.64, "text": " whatever infrastructure you have, and how they will be incorporated into bootstrap or", "tokens": [2035, 6896, 291, 362, 11, 293, 577, 436, 486, 312, 21654, 666, 11450, 372, 4007, 420], "temperature": 0.0, "avg_logprob": -0.22030450964486728, "compression_ratio": 1.7004405286343611, "no_speech_prob": 6.0824022511951625e-05}, {"id": 188, "seek": 91428, "start": 924.64, "end": 928.4399999999999, "text": " control plane providers.", "tokens": [1969, 5720, 11330, 13], "temperature": 0.0, "avg_logprob": -0.22030450964486728, "compression_ratio": 1.7004405286343611, "no_speech_prob": 6.0824022511951625e-05}, {"id": 189, "seek": 91428, "start": 928.4399999999999, "end": 935.8399999999999, "text": " So this is kind of like how these different CRDs go into, CRDs interact with each other,", "tokens": [407, 341, 307, 733, 295, 411, 577, 613, 819, 14123, 35, 82, 352, 666, 11, 14123, 35, 82, 4648, 365, 1184, 661, 11], "temperature": 0.0, "avg_logprob": -0.22030450964486728, "compression_ratio": 1.7004405286343611, "no_speech_prob": 6.0824022511951625e-05}, {"id": 190, "seek": 91428, "start": 935.8399999999999, "end": 942.1999999999999, "text": " so Cluster, Cluster is from Cluster API, but we need to provide an infrastructure cluster", "tokens": [370, 2033, 8393, 11, 2033, 8393, 307, 490, 2033, 8393, 9362, 11, 457, 321, 643, 281, 2893, 364, 6896, 13630], "temperature": 0.0, "avg_logprob": -0.22030450964486728, "compression_ratio": 1.7004405286343611, "no_speech_prob": 6.0824022511951625e-05}, {"id": 191, "seek": 94220, "start": 942.2, "end": 945.1600000000001, "text": " which comes from infrastructure provider to that, and then it will manage.", "tokens": [597, 1487, 490, 6896, 12398, 281, 300, 11, 293, 550, 309, 486, 3067, 13], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 192, "seek": 94220, "start": 945.1600000000001, "end": 950.4000000000001, "text": " So all of these are very much dependent on which cloud you're using.", "tokens": [407, 439, 295, 613, 366, 588, 709, 12334, 322, 597, 4588, 291, 434, 1228, 13], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 193, "seek": 94220, "start": 950.4000000000001, "end": 954.12, "text": " We'll see an example of this in a few minutes.", "tokens": [492, 603, 536, 364, 1365, 295, 341, 294, 257, 1326, 2077, 13], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 194, "seek": 94220, "start": 954.12, "end": 958.8000000000001, "text": " So a control plane directly comes from control plane provider, machine deployment, machine", "tokens": [407, 257, 1969, 5720, 3838, 1487, 490, 1969, 5720, 12398, 11, 3479, 19317, 11, 3479], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 195, "seek": 94220, "start": 958.8000000000001, "end": 964.36, "text": " set, it's all Cluster API stuff, but we need to provide it bootstrap and infrastructure,", "tokens": [992, 11, 309, 311, 439, 2033, 8393, 9362, 1507, 11, 457, 321, 643, 281, 2893, 309, 11450, 372, 4007, 293, 6896, 11], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 196, "seek": 94220, "start": 964.36, "end": 970.2800000000001, "text": " and similarly bootstrap config and infrastructure machine for it to work, machine health check", "tokens": [293, 14138, 11450, 372, 4007, 6662, 293, 6896, 3479, 337, 309, 281, 589, 11, 3479, 1585, 1520], "temperature": 0.0, "avg_logprob": -0.2365196298021789, "compression_ratio": 1.768060836501901, "no_speech_prob": 7.321578596020117e-05}, {"id": 197, "seek": 97028, "start": 970.28, "end": 975.48, "text": " comes directly from Cluster API, its job essentially is to keep checking the state of the machines", "tokens": [1487, 3838, 490, 2033, 8393, 9362, 11, 1080, 1691, 4476, 307, 281, 1066, 8568, 264, 1785, 295, 264, 8379], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 198, "seek": 97028, "start": 975.48, "end": 979.36, "text": " and if it's working fine or not.", "tokens": [293, 498, 309, 311, 1364, 2489, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 199, "seek": 97028, "start": 979.36, "end": 984.8, "text": " A bit about microcades, because we're going to use microcades, control plane and bootstrap", "tokens": [316, 857, 466, 4532, 66, 2977, 11, 570, 321, 434, 516, 281, 764, 4532, 66, 2977, 11, 1969, 5720, 293, 11450, 372, 4007], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 200, "seek": 97028, "start": 984.8, "end": 986.1999999999999, "text": " provider.", "tokens": [12398, 13], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 201, "seek": 97028, "start": 986.1999999999999, "end": 992.8399999999999, "text": " So what happens, so microcades is lightweight communities we have, we have been working on,", "tokens": [407, 437, 2314, 11, 370, 4532, 66, 2977, 307, 22052, 4456, 321, 362, 11, 321, 362, 668, 1364, 322, 11], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 202, "seek": 97028, "start": 992.8399999999999, "end": 997.64, "text": " it is one touch communities highly available, it has all the same configs, you don't need", "tokens": [309, 307, 472, 2557, 4456, 5405, 2435, 11, 309, 575, 439, 264, 912, 6662, 82, 11, 291, 500, 380, 643], "temperature": 0.0, "avg_logprob": -0.2418363874203691, "compression_ratio": 1.6299212598425197, "no_speech_prob": 6.383367872331291e-05}, {"id": 203, "seek": 99764, "start": 997.64, "end": 1006.08, "text": " to do much, and it has a very good add-on ecosystem that you can call your own tools,", "tokens": [281, 360, 709, 11, 293, 309, 575, 257, 588, 665, 909, 12, 266, 11311, 300, 291, 393, 818, 428, 1065, 3873, 11], "temperature": 0.0, "avg_logprob": -0.20942801963992236, "compression_ratio": 1.6043956043956045, "no_speech_prob": 6.286702409852296e-05}, {"id": 204, "seek": 99764, "start": 1006.08, "end": 1012.36, "text": " you don't need to rely on us to do all this stuff, you can bring your own custom tools", "tokens": [291, 500, 380, 643, 281, 10687, 322, 505, 281, 360, 439, 341, 1507, 11, 291, 393, 1565, 428, 1065, 2375, 3873], "temperature": 0.0, "avg_logprob": -0.20942801963992236, "compression_ratio": 1.6043956043956045, "no_speech_prob": 6.286702409852296e-05}, {"id": 205, "seek": 99764, "start": 1012.36, "end": 1017.6, "text": " that you need for your clusters.", "tokens": [300, 291, 643, 337, 428, 23313, 13], "temperature": 0.0, "avg_logprob": -0.20942801963992236, "compression_ratio": 1.6043956043956045, "no_speech_prob": 6.286702409852296e-05}, {"id": 206, "seek": 99764, "start": 1017.6, "end": 1025.08, "text": " So for the demo, it's a small demo, we need three essential things, so the Cluster API", "tokens": [407, 337, 264, 10723, 11, 309, 311, 257, 1359, 10723, 11, 321, 643, 1045, 7115, 721, 11, 370, 264, 2033, 8393, 9362], "temperature": 0.0, "avg_logprob": -0.20942801963992236, "compression_ratio": 1.6043956043956045, "no_speech_prob": 6.286702409852296e-05}, {"id": 207, "seek": 102508, "start": 1025.08, "end": 1035.1599999999999, "text": " comes from the upstream step, but we need to provide these other three things, and then", "tokens": [1487, 490, 264, 33915, 1823, 11, 457, 321, 643, 281, 2893, 613, 661, 1045, 721, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.3106453635475852, "compression_ratio": 1.66875, "no_speech_prob": 0.00020532603957690299}, {"id": 208, "seek": 102508, "start": 1035.1599999999999, "end": 1042.0, "text": " for this, for bootstrap provider, we'll use our microcades bootstrap provider for control", "tokens": [337, 341, 11, 337, 11450, 372, 4007, 12398, 11, 321, 603, 764, 527, 4532, 66, 2977, 11450, 372, 4007, 12398, 337, 1969], "temperature": 0.0, "avg_logprob": -0.3106453635475852, "compression_ratio": 1.66875, "no_speech_prob": 0.00020532603957690299}, {"id": 209, "seek": 102508, "start": 1042.0, "end": 1049.76, "text": " plane, same thing, and from infrastructure we will use open stack providers that we have.", "tokens": [5720, 11, 912, 551, 11, 293, 490, 6896, 321, 486, 764, 1269, 8630, 11330, 300, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.3106453635475852, "compression_ratio": 1.66875, "no_speech_prob": 0.00020532603957690299}, {"id": 210, "seek": 104976, "start": 1049.76, "end": 1071.16, "text": " So for the demo, let's go, let's see if it works, so like I said, these clusters, these", "tokens": [407, 337, 264, 10723, 11, 718, 311, 352, 11, 718, 311, 536, 498, 309, 1985, 11, 370, 411, 286, 848, 11, 613, 23313, 11, 613], "temperature": 0.0, "avg_logprob": -0.28001898985642654, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.0004352424875833094}, {"id": 211, "seek": 104976, "start": 1071.16, "end": 1078.04, "text": " are from upstream cluster API, we just take these CRDs, but then we need to apply what", "tokens": [366, 490, 33915, 13630, 9362, 11, 321, 445, 747, 613, 14123, 35, 82, 11, 457, 550, 321, 643, 281, 3079, 437], "temperature": 0.0, "avg_logprob": -0.28001898985642654, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.0004352424875833094}, {"id": 212, "seek": 107804, "start": 1078.04, "end": 1081.68, "text": " control plane reference will be using, what infrastructure will be using, and it's all", "tokens": [1969, 5720, 6408, 486, 312, 1228, 11, 437, 6896, 486, 312, 1228, 11, 293, 309, 311, 439], "temperature": 0.0, "avg_logprob": -0.2054799330861945, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00028395073604770005}, {"id": 213, "seek": 107804, "start": 1081.68, "end": 1084.56, "text": " like custom based on what you want to do.", "tokens": [411, 2375, 2361, 322, 437, 291, 528, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.2054799330861945, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00028395073604770005}, {"id": 214, "seek": 107804, "start": 1084.56, "end": 1091.72, "text": " Similarly to that, we have open stack cluster, open stack cluster that is specific for open", "tokens": [13157, 281, 300, 11, 321, 362, 1269, 8630, 13630, 11, 1269, 8630, 13630, 300, 307, 2685, 337, 1269], "temperature": 0.0, "avg_logprob": -0.2054799330861945, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00028395073604770005}, {"id": 215, "seek": 107804, "start": 1091.72, "end": 1100.68, "text": " stack cluster, we have different projects for that, AWS, Azure, EC2.", "tokens": [8630, 13630, 11, 321, 362, 819, 4455, 337, 300, 11, 17650, 11, 11969, 11, 19081, 17, 13], "temperature": 0.0, "avg_logprob": -0.2054799330861945, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00028395073604770005}, {"id": 216, "seek": 107804, "start": 1100.68, "end": 1104.84, "text": " Then we see microcades control plane, it's specific to microcades, it defines all these", "tokens": [1396, 321, 536, 4532, 66, 2977, 1969, 5720, 11, 309, 311, 2685, 281, 4532, 66, 2977, 11, 309, 23122, 439, 613], "temperature": 0.0, "avg_logprob": -0.2054799330861945, "compression_ratio": 1.7534883720930232, "no_speech_prob": 0.00028395073604770005}, {"id": 217, "seek": 110484, "start": 1104.84, "end": 1114.32, "text": " specs that a particular instance of microcades will have, and this is a thing to see a bit.", "tokens": [27911, 300, 257, 1729, 5197, 295, 4532, 66, 2977, 486, 362, 11, 293, 341, 307, 257, 551, 281, 536, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.14287462467100562, "compression_ratio": 1.8617021276595744, "no_speech_prob": 0.00033345402334816754}, {"id": 218, "seek": 110484, "start": 1114.32, "end": 1119.9199999999998, "text": " So we define a particular version that this particular control plane will have, open stack", "tokens": [407, 321, 6964, 257, 1729, 3037, 300, 341, 1729, 1969, 5720, 486, 362, 11, 1269, 8630], "temperature": 0.0, "avg_logprob": -0.14287462467100562, "compression_ratio": 1.8617021276595744, "no_speech_prob": 0.00033345402334816754}, {"id": 219, "seek": 110484, "start": 1119.9199999999998, "end": 1126.76, "text": " machine template that we saw before, that is needed for that, and machine deployments,", "tokens": [3479, 12379, 300, 321, 1866, 949, 11, 300, 307, 2978, 337, 300, 11, 293, 3479, 7274, 1117, 11], "temperature": 0.0, "avg_logprob": -0.14287462467100562, "compression_ratio": 1.8617021276595744, "no_speech_prob": 0.00033345402334816754}, {"id": 220, "seek": 110484, "start": 1126.76, "end": 1133.28, "text": " and machine deployments will also have a version that is essential for our demo.", "tokens": [293, 3479, 7274, 1117, 486, 611, 362, 257, 3037, 300, 307, 7115, 337, 527, 10723, 13], "temperature": 0.0, "avg_logprob": -0.14287462467100562, "compression_ratio": 1.8617021276595744, "no_speech_prob": 0.00033345402334816754}, {"id": 221, "seek": 113328, "start": 1133.28, "end": 1139.8, "text": " So and then there are all these stuff that comes from template, whatever template you", "tokens": [407, 293, 550, 456, 366, 439, 613, 1507, 300, 1487, 490, 12379, 11, 2035, 12379, 291], "temperature": 0.0, "avg_logprob": -0.2498705820603804, "compression_ratio": 1.5576036866359446, "no_speech_prob": 7.012440619291738e-05}, {"id": 222, "seek": 113328, "start": 1139.8, "end": 1150.52, "text": " apply, it comes from that, so it's quite default, so without trying to actually go into entirety,", "tokens": [3079, 11, 309, 1487, 490, 300, 11, 370, 309, 311, 1596, 7576, 11, 370, 1553, 1382, 281, 767, 352, 666, 31557, 11], "temperature": 0.0, "avg_logprob": -0.2498705820603804, "compression_ratio": 1.5576036866359446, "no_speech_prob": 7.012440619291738e-05}, {"id": 223, "seek": 113328, "start": 1150.52, "end": 1155.6, "text": " I have screenshots of it because the entire demo took like an R2 issue.", "tokens": [286, 362, 40661, 295, 309, 570, 264, 2302, 10723, 1890, 411, 364, 497, 17, 2734, 13], "temperature": 0.0, "avg_logprob": -0.2498705820603804, "compression_ratio": 1.5576036866359446, "no_speech_prob": 7.012440619291738e-05}, {"id": 224, "seek": 113328, "start": 1155.6, "end": 1163.08, "text": " So if I apply this cluster, I'll get this too, so I don't know if you can see, but", "tokens": [407, 498, 286, 3079, 341, 13630, 11, 286, 603, 483, 341, 886, 11, 370, 286, 500, 380, 458, 498, 291, 393, 536, 11, 457], "temperature": 0.0, "avg_logprob": -0.2498705820603804, "compression_ratio": 1.5576036866359446, "no_speech_prob": 7.012440619291738e-05}, {"id": 225, "seek": 116308, "start": 1163.08, "end": 1172.04, "text": " I'll have six machines in an open stack cluster, which will have a version of 1.24 each.", "tokens": [286, 603, 362, 2309, 8379, 294, 364, 1269, 8630, 13630, 11, 597, 486, 362, 257, 3037, 295, 502, 13, 7911, 1184, 13], "temperature": 0.0, "avg_logprob": -0.17836023687006353, "compression_ratio": 1.5782608695652174, "no_speech_prob": 7.455541344825178e-05}, {"id": 226, "seek": 116308, "start": 1172.04, "end": 1176.36, "text": " As the time progresses, it provides a provider ID, and at a certain point in time, they're", "tokens": [1018, 264, 565, 41929, 11, 309, 6417, 257, 12398, 7348, 11, 293, 412, 257, 1629, 935, 294, 565, 11, 436, 434], "temperature": 0.0, "avg_logprob": -0.17836023687006353, "compression_ratio": 1.5782608695652174, "no_speech_prob": 7.455541344825178e-05}, {"id": 227, "seek": 116308, "start": 1176.36, "end": 1184.48, "text": " all in ready state and good to go with all of them with 124 communities version.", "tokens": [439, 294, 1919, 1785, 293, 665, 281, 352, 365, 439, 295, 552, 365, 2272, 19, 4456, 3037, 13], "temperature": 0.0, "avg_logprob": -0.17836023687006353, "compression_ratio": 1.5782608695652174, "no_speech_prob": 7.455541344825178e-05}, {"id": 228, "seek": 116308, "start": 1184.48, "end": 1190.96, "text": " I think to note that is both of them are controlled by different providers, so the machine deployments", "tokens": [286, 519, 281, 3637, 300, 307, 1293, 295, 552, 366, 10164, 538, 819, 11330, 11, 370, 264, 3479, 7274, 1117], "temperature": 0.0, "avg_logprob": -0.17836023687006353, "compression_ratio": 1.5782608695652174, "no_speech_prob": 7.455541344825178e-05}, {"id": 229, "seek": 119096, "start": 1190.96, "end": 1196.2, "text": " are controlled by the bootstrap provider, and the control plane takes care of all these", "tokens": [366, 10164, 538, 264, 11450, 372, 4007, 12398, 11, 293, 264, 1969, 5720, 2516, 1127, 295, 439, 613], "temperature": 0.0, "avg_logprob": -0.21069592944646287, "compression_ratio": 1.6, "no_speech_prob": 0.00014160860155243427}, {"id": 230, "seek": 119096, "start": 1196.2, "end": 1200.72, "text": " control plane nodes.", "tokens": [1969, 5720, 13891, 13], "temperature": 0.0, "avg_logprob": -0.21069592944646287, "compression_ratio": 1.6, "no_speech_prob": 0.00014160860155243427}, {"id": 231, "seek": 119096, "start": 1200.72, "end": 1209.0, "text": " So we'll see how, what happens when we try to update this cluster, what reconciliation", "tokens": [407, 321, 603, 536, 577, 11, 437, 2314, 562, 321, 853, 281, 5623, 341, 13630, 11, 437, 31281], "temperature": 0.0, "avg_logprob": -0.21069592944646287, "compression_ratio": 1.6, "no_speech_prob": 0.00014160860155243427}, {"id": 232, "seek": 119096, "start": 1209.0, "end": 1211.24, "text": " is happening when we try to do that.", "tokens": [307, 2737, 562, 321, 853, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.21069592944646287, "compression_ratio": 1.6, "no_speech_prob": 0.00014160860155243427}, {"id": 233, "seek": 121124, "start": 1211.24, "end": 1226.6, "text": " So if I go there, I'll change it to six, and then again to six, as soon as I apply this", "tokens": [407, 498, 286, 352, 456, 11, 286, 603, 1319, 309, 281, 2309, 11, 293, 550, 797, 281, 2309, 11, 382, 2321, 382, 286, 3079, 341], "temperature": 0.0, "avg_logprob": -0.1742824872334798, "compression_ratio": 1.436241610738255, "no_speech_prob": 8.074578363448381e-05}, {"id": 234, "seek": 121124, "start": 1226.6, "end": 1233.4, "text": " manifest back, I have changed the desired state for me to have version 126 on both of", "tokens": [10067, 646, 11, 286, 362, 3105, 264, 14721, 1785, 337, 385, 281, 362, 3037, 2272, 21, 322, 1293, 295], "temperature": 0.0, "avg_logprob": -0.1742824872334798, "compression_ratio": 1.436241610738255, "no_speech_prob": 8.074578363448381e-05}, {"id": 235, "seek": 121124, "start": 1233.4, "end": 1236.16, "text": " the control plane and the machine nodes.", "tokens": [264, 1969, 5720, 293, 264, 3479, 13891, 13], "temperature": 0.0, "avg_logprob": -0.1742824872334798, "compression_ratio": 1.436241610738255, "no_speech_prob": 8.074578363448381e-05}, {"id": 236, "seek": 123616, "start": 1236.16, "end": 1242.48, "text": " So as and when I apply that, both the controllers, the bootstrap and the control plane controllers,", "tokens": [407, 382, 293, 562, 286, 3079, 300, 11, 1293, 264, 26903, 11, 264, 11450, 372, 4007, 293, 264, 1969, 5720, 26903, 11], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 237, "seek": 123616, "start": 1242.48, "end": 1249.44, "text": " we'll see 124 is now not what we want, we want 126, so it will start provisioning these", "tokens": [321, 603, 536, 2272, 19, 307, 586, 406, 437, 321, 528, 11, 321, 528, 2272, 21, 11, 370, 309, 486, 722, 17225, 278, 613], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 238, "seek": 123616, "start": 1249.44, "end": 1253.4, "text": " machines at 126 version.", "tokens": [8379, 412, 2272, 21, 3037, 13], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 239, "seek": 123616, "start": 1253.4, "end": 1257.96, "text": " It goes through the entire place of, so these are the rollout updates, so what happens is", "tokens": [467, 1709, 807, 264, 2302, 1081, 295, 11, 370, 613, 366, 264, 3373, 346, 9205, 11, 370, 437, 2314, 307], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 240, "seek": 123616, "start": 1257.96, "end": 1264.92, "text": " a new node is provisioned, a old node is depleted, and this happens until all the nodes are in", "tokens": [257, 777, 9984, 307, 17225, 292, 11, 257, 1331, 9984, 307, 37546, 10993, 11, 293, 341, 2314, 1826, 439, 264, 13891, 366, 294], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 241, "seek": 123616, "start": 1264.92, "end": 1265.92, "text": " the desired state.", "tokens": [264, 14721, 1785, 13], "temperature": 0.0, "avg_logprob": -0.21659665403112902, "compression_ratio": 1.7552742616033756, "no_speech_prob": 2.9293889383552596e-05}, {"id": 242, "seek": 126592, "start": 1265.92, "end": 1270.16, "text": " So it's also in place updates, which is a very cool idea, so rather than depleting", "tokens": [407, 309, 311, 611, 294, 1081, 9205, 11, 597, 307, 257, 588, 1627, 1558, 11, 370, 2831, 813, 37546, 9880], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 243, "seek": 126592, "start": 1270.16, "end": 1276.76, "text": " the nodes, it just does the upgrade in place without having to drain nodes each time it", "tokens": [264, 13891, 11, 309, 445, 775, 264, 11484, 294, 1081, 1553, 1419, 281, 12339, 13891, 1184, 565, 309], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 244, "seek": 126592, "start": 1276.76, "end": 1282.3600000000001, "text": " comes and go, and it is a very good use case for when you have a stateful application like", "tokens": [1487, 293, 352, 11, 293, 309, 307, 257, 588, 665, 764, 1389, 337, 562, 291, 362, 257, 1785, 906, 3861, 411], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 245, "seek": 126592, "start": 1282.3600000000001, "end": 1284.88, "text": " a database or something.", "tokens": [257, 8149, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 246, "seek": 126592, "start": 1284.88, "end": 1291.2, "text": " So it does that, it does the deletion, it does all that stuff, until the entire cluster", "tokens": [407, 309, 775, 300, 11, 309, 775, 264, 1103, 302, 313, 11, 309, 775, 439, 300, 1507, 11, 1826, 264, 2302, 13630], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 247, "seek": 126592, "start": 1291.2, "end": 1295.76, "text": " will be 126, which was the desired state.", "tokens": [486, 312, 2272, 21, 11, 597, 390, 264, 14721, 1785, 13], "temperature": 0.0, "avg_logprob": -0.22383741430334142, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001330464001512155}, {"id": 248, "seek": 129576, "start": 1295.76, "end": 1303.2, "text": " So all of this we see, we go from basic first principles is like what was control theory,", "tokens": [407, 439, 295, 341, 321, 536, 11, 321, 352, 490, 3875, 700, 9156, 307, 411, 437, 390, 1969, 5261, 11], "temperature": 0.0, "avg_logprob": -0.19315131505330405, "compression_ratio": 1.696078431372549, "no_speech_prob": 3.531920810928568e-05}, {"id": 249, "seek": 129576, "start": 1303.2, "end": 1309.36, "text": " how it gives us controller, then we apply, then we see how we applied it to our communities", "tokens": [577, 309, 2709, 505, 10561, 11, 550, 321, 3079, 11, 550, 321, 536, 577, 321, 6456, 309, 281, 527, 4456], "temperature": 0.0, "avg_logprob": -0.19315131505330405, "compression_ratio": 1.696078431372549, "no_speech_prob": 3.531920810928568e-05}, {"id": 250, "seek": 129576, "start": 1309.36, "end": 1319.0, "text": " ecosystem, and then how we extended that, extended those patterns for our cluster API,", "tokens": [11311, 11, 293, 550, 577, 321, 10913, 300, 11, 10913, 729, 8294, 337, 527, 13630, 9362, 11], "temperature": 0.0, "avg_logprob": -0.19315131505330405, "compression_ratio": 1.696078431372549, "no_speech_prob": 3.531920810928568e-05}, {"id": 251, "seek": 129576, "start": 1319.0, "end": 1324.96, "text": " and finally how can we, how we can have a feature from that first principles.", "tokens": [293, 2721, 577, 393, 321, 11, 577, 321, 393, 362, 257, 4111, 490, 300, 700, 9156, 13], "temperature": 0.0, "avg_logprob": -0.19315131505330405, "compression_ratio": 1.696078431372549, "no_speech_prob": 3.531920810928568e-05}, {"id": 252, "seek": 132496, "start": 1324.96, "end": 1329.52, "text": " These are some of the talks that I took inspiration from, I definitely recommend control theory", "tokens": [1981, 366, 512, 295, 264, 6686, 300, 286, 1890, 10249, 490, 11, 286, 2138, 2748, 1969, 5261], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 253, "seek": 132496, "start": 1329.52, "end": 1335.56, "text": " in Fitment Rewind by Valerie, it has lots and lots to say about this.", "tokens": [294, 29263, 518, 497, 1023, 471, 538, 46656, 11, 309, 575, 3195, 293, 3195, 281, 584, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 254, "seek": 132496, "start": 1335.56, "end": 1340.88, "text": " Control theory and all these stuff, control theory is dope, it's a very good article that", "tokens": [12912, 5261, 293, 439, 613, 1507, 11, 1969, 5261, 307, 23383, 11, 309, 311, 257, 588, 665, 7222, 300], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 255, "seek": 132496, "start": 1340.88, "end": 1342.4, "text": " you should definitely check it out.", "tokens": [291, 820, 2138, 1520, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 256, "seek": 132496, "start": 1342.4, "end": 1348.68, "text": " It also talks about reactive patterns, which is cool stuff, lots more use in AI and stuff,", "tokens": [467, 611, 6686, 466, 28897, 8294, 11, 597, 307, 1627, 1507, 11, 3195, 544, 764, 294, 7318, 293, 1507, 11], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 257, "seek": 132496, "start": 1348.68, "end": 1354.88, "text": " so it is cool, and these are all references that I use from other sources as well.", "tokens": [370, 309, 307, 1627, 11, 293, 613, 366, 439, 15400, 300, 286, 764, 490, 661, 7139, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.26796609629755436, "compression_ratio": 1.7415730337078652, "no_speech_prob": 0.0002184900367865339}, {"id": 258, "seek": 135488, "start": 1354.88, "end": 1361.88, "text": " So yeah, thank you, thank you for coming, I hope you didn't come in for me.", "tokens": [407, 1338, 11, 1309, 291, 11, 1309, 291, 337, 1348, 11, 286, 1454, 291, 994, 380, 808, 294, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 259, "seek": 135488, "start": 1361.88, "end": 1362.88, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 260, "seek": 135488, "start": 1362.88, "end": 1368.8000000000002, "text": " I'll take questions if you have, yeah.", "tokens": [286, 603, 747, 1651, 498, 291, 362, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 261, "seek": 135488, "start": 1368.8000000000002, "end": 1373.5600000000002, "text": " Are there any questions about Kubernetes, I'm just going to try to get the microphone", "tokens": [2014, 456, 604, 1651, 466, 23145, 11, 286, 478, 445, 516, 281, 853, 281, 483, 264, 10952], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 262, "seek": 135488, "start": 1373.5600000000002, "end": 1377.96, "text": " to you, not any questions about Kubernetes, about the talk, thank you.", "tokens": [281, 291, 11, 406, 604, 1651, 466, 23145, 11, 466, 264, 751, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 263, "seek": 135488, "start": 1377.96, "end": 1384.0400000000002, "text": " Can you pass the microphone along, thank you.", "tokens": [1664, 291, 1320, 264, 10952, 2051, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.4009499183067909, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.011831427924335003}, {"id": 264, "seek": 138404, "start": 1384.04, "end": 1386.48, "text": " Hey Guruji, thank you for your talk.", "tokens": [1911, 22389, 4013, 11, 1309, 291, 337, 428, 751, 13], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 265, "seek": 138404, "start": 1386.48, "end": 1392.48, "text": " In the theory you have the state, the desired state and the current state of the system,", "tokens": [682, 264, 5261, 291, 362, 264, 1785, 11, 264, 14721, 1785, 293, 264, 2190, 1785, 295, 264, 1185, 11], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 266, "seek": 138404, "start": 1392.48, "end": 1395.44, "text": " and then when you're talking about the thermostat, this is the desired temperature and this is", "tokens": [293, 550, 562, 291, 434, 1417, 466, 264, 8810, 39036, 11, 341, 307, 264, 14721, 4292, 293, 341, 307], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 267, "seek": 138404, "start": 1395.44, "end": 1402.0, "text": " the current temperature, how do you accommodate for when, can the system predict when this", "tokens": [264, 2190, 4292, 11, 577, 360, 291, 21410, 337, 562, 11, 393, 264, 1185, 6069, 562, 341], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 268, "seek": 138404, "start": 1402.0, "end": 1407.48, "text": " is not going to happen, oh I've been pumping the heater for 48 hours and I see that the", "tokens": [307, 406, 516, 281, 1051, 11, 1954, 286, 600, 668, 27131, 264, 30408, 337, 11174, 2496, 293, 286, 536, 300, 264], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 269, "seek": 138404, "start": 1407.48, "end": 1412.72, "text": " temperature is not raising, not a single degree, like how do you cater for that?", "tokens": [4292, 307, 406, 11225, 11, 406, 257, 2167, 4314, 11, 411, 577, 360, 291, 21557, 337, 300, 30], "temperature": 0.0, "avg_logprob": -0.18562756554555085, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0020980858244001865}, {"id": 270, "seek": 141272, "start": 1412.72, "end": 1420.1200000000001, "text": " So first of all it means that the system has a fault if it does not reach the desired state,", "tokens": [407, 700, 295, 439, 309, 1355, 300, 264, 1185, 575, 257, 7441, 498, 309, 775, 406, 2524, 264, 14721, 1785, 11], "temperature": 0.0, "avg_logprob": -0.1573082708543347, "compression_ratio": 1.7810945273631842, "no_speech_prob": 4.899982377537526e-05}, {"id": 271, "seek": 141272, "start": 1420.1200000000001, "end": 1428.68, "text": " but it will take it as an experience, so if I go to here, the predictor component is what", "tokens": [457, 309, 486, 747, 309, 382, 364, 1752, 11, 370, 498, 286, 352, 281, 510, 11, 264, 6069, 284, 6542, 307, 437], "temperature": 0.0, "avg_logprob": -0.1573082708543347, "compression_ratio": 1.7810945273631842, "no_speech_prob": 4.899982377537526e-05}, {"id": 272, "seek": 141272, "start": 1428.68, "end": 1434.68, "text": " predicts it, it will see okay, the derivative is the predictor component, it will see okay,", "tokens": [6069, 82, 309, 11, 309, 486, 536, 1392, 11, 264, 13760, 307, 264, 6069, 284, 6542, 11, 309, 486, 536, 1392, 11], "temperature": 0.0, "avg_logprob": -0.1573082708543347, "compression_ratio": 1.7810945273631842, "no_speech_prob": 4.899982377537526e-05}, {"id": 273, "seek": 141272, "start": 1434.68, "end": 1440.04, "text": " at some point of time previously this did not work, this change was not working, so", "tokens": [412, 512, 935, 295, 565, 8046, 341, 630, 406, 589, 11, 341, 1319, 390, 406, 1364, 11, 370], "temperature": 0.0, "avg_logprob": -0.1573082708543347, "compression_ratio": 1.7810945273631842, "no_speech_prob": 4.899982377537526e-05}, {"id": 274, "seek": 144004, "start": 1440.04, "end": 1444.36, "text": " it will take that into account and the next time it does that it will take it as an experience,", "tokens": [309, 486, 747, 300, 666, 2696, 293, 264, 958, 565, 309, 775, 300, 309, 486, 747, 309, 382, 364, 1752, 11], "temperature": 0.0, "avg_logprob": -0.22369663135425463, "compression_ratio": 1.7577639751552796, "no_speech_prob": 0.0012142392806708813}, {"id": 275, "seek": 144004, "start": 1444.36, "end": 1449.0, "text": " so if it was not working and how did we try to make it work, it will try to take that", "tokens": [370, 498, 309, 390, 406, 1364, 293, 577, 630, 321, 853, 281, 652, 309, 589, 11, 309, 486, 853, 281, 747, 300], "temperature": 0.0, "avg_logprob": -0.22369663135425463, "compression_ratio": 1.7577639751552796, "no_speech_prob": 0.0012142392806708813}, {"id": 276, "seek": 144004, "start": 1449.0, "end": 1455.44, "text": " experience and incorporate it into the next time it tries to do that.", "tokens": [1752, 293, 16091, 309, 666, 264, 958, 565, 309, 9898, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.22369663135425463, "compression_ratio": 1.7577639751552796, "no_speech_prob": 0.0012142392806708813}, {"id": 277, "seek": 144004, "start": 1455.44, "end": 1458.44, "text": " Thank you, any other questions?", "tokens": [1044, 291, 11, 604, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.22369663135425463, "compression_ratio": 1.7577639751552796, "no_speech_prob": 0.0012142392806708813}, {"id": 278, "seek": 145844, "start": 1458.44, "end": 1473.48, "text": " I'll take it as a note, thank you very much again, we have a small 5 minute break so you", "tokens": [286, 603, 747, 309, 382, 257, 3637, 11, 1309, 291, 588, 709, 797, 11, 321, 362, 257, 1359, 1025, 3456, 1821, 370, 291], "temperature": 0.0, "avg_logprob": -0.3216988245646159, "compression_ratio": 1.0864197530864197, "no_speech_prob": 0.005814533680677414}, {"id": 279, "seek": 147348, "start": 1473.48, "end": 1490.52, "text": " can stand up, stretch a bit.", "tokens": [393, 1463, 493, 11, 5985, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.510391632715861, "compression_ratio": 0.8235294117647058, "no_speech_prob": 0.0015175604494288564}], "language": "en"}