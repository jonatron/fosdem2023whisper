{"text": " So, once again, hello everybody, welcome to my talk. This talk is going to be about OSV, evolution of OSV towards greater modularity and composability. Thanks for introducing me. So I've been contributing to OSV since 2016. Here I go, in 2015 I heard about OSV in one of the conferences and then a couple of years later I was nominated to be one of its committers and my greatest contributions to OSV include making OSV run on Firecracker and significantly improving ARCH 64 port among other things. So I'm not sure if you can tell it but OSV is actually my hobby so I'm not like a real current developer like many of previous speakers are so it's actually, you know, I work on it in my night when I feel and I have a day job so I don't represent my company that I work for so this is all my personal contribution to the project. So in today's presentation I will talk about enhancements introduced by the latest release of OSV 057 with the focus on greater modularity and composability but I will also discuss other interesting enhancements like lazy stack, novel ways to build ZFS images and improvements to the ARM port. Finally I will also cover an interesting use case of OSV, seaweed FS running on OSV which is a distributed file system. So as you can see in this talk besides the title, modularity, I will actually try to give you like state of the art where OSV is, how it has changed recently and a little bit of where it's going hopefully. So I know there are probably many definitions of unique kernels and each of them is a little bit different right but so I'm sure most of you understand what unique kernels are but just a quick recap with emphasis on how OSV is a little bit different. So OSV is a unique kernel that was designed to run single and modified Linux application on top of hypervisor whereas traditional operating system were originally designed to run on a vast range of physical machines. But simply speaking OSV is an OS designed to run single application without isolation between application and kernel or it can be thought as a way to run highly isolated process without ability to make system calls to the host OS. Finally OSV can run on both 64-bit X86 and ARM V8 architectures. Now a little bit of history, so OSV for those that don't know, OSV was started in late 2012 by the company called Cloud Use Systems and they built pretty strong team of 10, 20 developers I think. I wasn't one of them but they pretty much wrote most of OSV but at some point they basically I guess realized they have to make money I'm guessing so they basically moved on and started working on this product you may have know CillaDB which is this high-performance database but I think they took some learning so and after that basically I think OSV did receive some grant from European Union so there was some project on that and I think there may have been some companies also using OSV but honestly since then it's been really maintained by volunteers so like me like there's still some people from CillaDB, Nadaf, Harrell and others that contribute to the project you know I would just single out Fortisks and Akis which actually was the one that implemented Virtio FS as a you know for very interesting contribution to OSV and obviously I would like to take this opportunity to invite more people to become part of our community because honestly you may not realize it but our community is very small so it's just really me, Nadaf and a couple of other people that contribute to the project so I hope we you know we're gonna grow as a community after this talk. So quick recap of a little bit of how OSV looks like what the design is so in this slide you can see major components of OSV across layers starting with G-Lipsy, the top which is greatly based actually on Musil, then core layer in the middle comprised of ELF dynamic linker of VFS, virtual file system, networking stack, thread scheduler, page cache, RCU, read copy update, page table management and L1, L2 pools to manage memory and then you have a layer of device drivers where we OSV implements Virtio devices on both of our PCI transport and MMIO transport and then Zen and VMware among others and obviously and one more thing so as we can run on KVM based hypervisors like QMU like Firecracker I did test also OSV on cloud hypervisor which is I think Intel's hypervisor written in Rust and then I personally didn't really run OSV on Zen so I know that the Zen support is a little bit dated probably and I'm not sure how much it has been tested. I did test on VMware Vbox, virtual box and I think on Hyperkit at some point. So I will just I want to go into more detail about this diagram but I will leave it with you just as a reference later. So in the first part of this presentation I will about modularity and composability I will focus on new experimental modes to hide the non-Gilipsi symbols and standard C++ library. I will also discuss how ZFS code was extracted out of the kernel in form of a dynamically linked library and finally I will also explain another new build option to tailor the kernel to a set of specific drivers. I call them driver profiles and another new mechanism to allow building a version of kernel with a subset of Gilipsi symbols needed to support a specific application which I think is quite interesting. So by design OSV has always been a FAT unicolonal and which has been some sort of some of the criticism and by default provided a large subset of Gilipsi functionality has included full standard C++ library and ZFS implementation drivers for many devices and has supported many hypervisors. So on one hand it makes running arbitrary application on any hypervisor very easy using a single universal kernel. But on another hand such universality comes with the price of bloated kernel with many symbols and drivers and possibly ZFS that is unused. That's causing inefficient memory usage, longer boot time and potential security vulnerabilities. In addition C++ application linked against one version of LeapSTD C++ different than the version the kernel was linked against may simply not work. For example that happened to me when I was testing OSV with.NET and the only way to make it work was to hide basically the C++ standard library and use the one that was part of the.NET app. So one way to lower memory utilization of the guest is to minimize the kernel size. By default OSV comes with a universal kernel that provides quite large spectrum of Gilipsi library and full standard C++ library and exposes over a total of 17,000 symbols and most of those are very long as C++ symbols that make up the symbol table. So the question may be posed why not have a mechanism where we can build a kernel with all known Gilipsi symbols hidden and all unneeded code that is unused garbage collected. So the extra benefit of fewer exported symbols is increased security that stems from the fact that there is simply less potential code that is left that could be harmful. And also that way we can achieve better compatibility as any potential symbol collisions for example and mismatch standard C++ library which I mentioned can be avoided. So the release 057 added a new build option called conf-hide symbols to hide those non-Gilipsi symbols and the standard C++ library symbols. These are enabled if enabled in essence most files in a source tree of OSV except the ones under Lipsi and Musil directories would be compiled with the flags of visibility hidden and only if that build flag is enabled. On the other hand the symbols to be exposed as public like the Gilipsi one would be annotated with OSV Asterisk API macros that translate basically to attribute visibility default and the standard C++ library is linked with the flag no whole archive. Those SV Asterisk API macros basically would be like OSV Lipsi API or OSV Pthreads API OSV Lipsi API and so on basically that match all then I think around 10 libraries that OSV dynamic linker exposes. Finally the list of public symbols exported by the kernel is enforced during the build process based on the symbol list files for each advertised library like for example Lipsi SO6 and is maintained under the directory exported symbols. So these files are basically list of symbols that are concatenated using the script called generate version script and which goes into version script file and then is fed to the linker as an argument to the version script file. So in order to now remove all unedited code basically garbage all files would be compiled with the function sections and data sections and then they would be linked with the flag GC section. Now any code that needs to stay like for example the bootstrap start point or dynamically enabled code like the optimal memcpy implementation or trace point patch size is retained by putting relevant kept directives and relevant sections in the linker script. The kernel L file built with most symbols hidden is roughly 4.3 megabytes in size compared to 6.7 which is reduction of around 40%. This great reduction stems from the fact that the standard library standard C++ library is no longer linked with whole archive. The symbol table is way smaller and unused code is garbage collected. Please note that the resulting kernel is still universal as it exports all glipsy symbols and includes all the device drivers. And as a result of this size reduction kernel boots also a little bit faster. Well this all sounds great so one may ask why not hide most symbols and standard C++ library by default. The problem is that there are around 35 unit tests and some also applications that were written in the past that rely on C++ symbols and they basically would not run if we hide all of those symbols. And those are basically used to, they were implemented in the past and it was done sometimes out of convenience, sometimes basically out of necessity. So to address this specific problem we will need to expose some of those OSVC++ symbols as the API expressed in C. So we'll basically define very simple C wrapper functions that we'll call those C++ code. Well I can use this one. A good example of modularity improvements made in the release 057 is extracting ZFS code out of kernel as a dynamically linked library, LibSolarisSO, which effectively is a new module. To accomplish that we changed the main OSV make file to build new artifact, LibSolarisSO out of ZFS and Solaris file sets in the make file, which basically used to be linked into kernel. The new library has to be linked with a bind now flag and OSV specific OSVmlog node to force OSV dynamic linker to resolve symbols eagerly and populate the mappings eagerly as well. This basically is done to prevent page faults that would lead to potential deadlocks as the libraries loaded and initialized. The init function ZFS initialized called upon the libraries loaded creates necessary thread pools and registers various callbacks so that the page cache arc, which is adaptive replacement cache from ZFS and ZFS depth driver can interact with relevant code in the ZFS library. On another hand, the OSV kernel needs to expose some around 100 symbols that provides some internal free BSD originating functionality that LibSolarisSO depends on. OSV borrowed some code from free BSD and actually a good chunk of this code was actually implementation of ZFS, which right now is outside of the kernel. Finally, the virtual file system bootstrap code needs to dynamically load LibSolarisSO from bootFS or read-only-FS using DL open before mounting ZFS file system. There are at least three advantages of moving ZFS to a separate library. First off, ZFS can be optionally loaded from another file system like bootFS or read-only-FS partition on the same disk or another disk and I will actually discuss that in more detail in one of the upcoming slides later. Then also, kernel gets smaller by around 800 kilobytes and effectively becomes 3.6 megabytes in size. Finally, there are at least 10 fewer threads that are needed to run non-ZFS image. So for example, when you run read-only-FS image on OSV, with one CPU it only requires 25 threads. The regular Linux Jalipsi apps should run fine on kernel with most symbols and standard C++ library hidden, but unfortunately many unit tests which I mentioned and various internal OSV apps which are written mostly in C++, so-called modules, do not, as they had been coded in the past to use those internal C++ symbols from the kernel and we have to do something to deal with that problem. So in the release 057 we introduced some of the C wrapper API which are basically in C style convention and then we changed those modules to use those C wrapper functions instead of C++ code. The benefit is that down the road we might have some newer apps or some newer modules that would use those C wrapper functions and it also may make OSV more modular. As you can see some of those, one of the example is, for example, OSV gets all threads which is basically a function that gives a thread safe way to color, to iterate over threads which, for example, is used in an HTTP monitoring module to list all the threads. A good example of OSV specific modules that uses some internal C++ symbols is HTTP server monitoring. We modify the HTTP monitoring module to stop using internal kernel C++ API. We do it by replacing some of the calls to internal C++ symbols with this new module C style API, symbols from the slide which you saw on the slide before, for example, SCAD with all threads, with this new OSV get all threads function. In other scenarios we fall back to standard G-Lipsy API, for example, the monitoring app used to call OSV current mounts and right now it uses basically getMTNT and function and related ones. So the release 0.57 introduced another built mechanism that allows creating a custom kernel with a specific list of drivers intended to target given hypervisor. Obviously such kernel benefits from even smaller size and better security as all unneeded code, all unneeded drivers are basically excluded during the build process. In essence we introduce a new build script and makefile parameter, driver, driver's profile. This new parameter is intended to specify a driver profile which is simply a list of device drivers to be linked into the kernel and some extra functionality like PCI or ACPI, these drivers depend on. Each profile is specified in a tiny include files with the MK extension under conf profiles arch directory and included by the main makefile as requested by the driver profile parameter. The main makefile has a number of basically if expressions and add conditionally given driver object to the linked object list depending on the value of 0 or 1 of the given conf drivers parameter specified in that include file. The benefit of using drivers as are most profound when they are used with when you build kernel and hide most of the symbols as I talked about in one of the previous slides. It's also possible to enable or disable individual drivers on top of profiles as profiles are basically list of the drivers but the number of configuration parameters that where you can specifically for example include, which I'm going to be actually showing here, you can include specific driver. One may ask a question why not use something more standard like when you config like for example what Unicraft does, well actually OSV has this specific build system and I didn't want to basically now introduce another way of doing things so that's where we basically script build uses the various effectively parameters to for example to hide symbols or specify specific driver profile or list of other parameters. So as you can see in the first example we built default kernel with all symbols hidden and the resulting kernel is around 36, 3.6 megabytes. In the next example we actually use, we built kernel with the VIRTIO over PCI profiles which is like 300 kilobytes smaller and then in the third one we built kernel which is intended to for example for firecracker when we include only VIRTIO block device and networking driver over MMO transport and then just to see basically in a fourth one just to see how large the driver's code in OSV is when you basically use driver profiles base which is basically nothing, no drivers, you can see that roughly 600 kilobytes of the driver's code is roughly 600 kilobytes in size. And then in the last one actually option is where you can specify, you use basically driver's profile and then you explicitly say which specific drivers or you know driver related capability like in this case ACPI, VIRTIO FS and VIRTIO NET and PV panic devices you want to use. Actually with the new release of OSV 057 we started publishing new versions of new variations effectively of OSV kernel that correspond to this I thought you know interesting build configuration that I just mentioned and in this example the OSV loader hidden artifacts are effectively the versions of OSV kernel built with most symbols hidden and then for example which will be at the top for both ARM and X86 and then for example right here in the second and third and fourth artifacts basically version of the kernel built for micro VM profile which is effectively something that you would use to run OSV on Firecracker which only has VIRTIO over MMIO transport. Now the release 057 introduced yet another built mechanism and that allows creation of a custom kernel by exporting only symbols required by a specific application. The extra such kernel benefits from the fact that again it's a little bit smaller and tasks offers better security as in essence all unneeded code by that specific application is removed. This new mechanism relies on two scripts that analyze the built manifest, detect application L files, identify symbols required from OSV kernel and finally produce the application specific version script under app version script. The generate app version script iterates over the manifest files produced by list manifest files pi, identifies undefined symbols in the L files using objectDump that are also exported by OSV kernel and finally generates basically the app version script. So please note that this functionality only works when you build kernel with most symbols hidden. So I think what is kind of interesting worth noting in that approach is that you basically run a built script against given application twice. Basically first time to identify all symbols that application needs from OSV kernel and then actually second time we do is to build the kernel for that specific app. In this example we actually generate kernel specific to run a simple going app on OSV and when you actually build kernel with symbols around I think 30 symbols by going pi example the kernel is effectively by around half megabytes smaller and it's around 3.2 megabytes. So this approach has obviously some limitations. So some applications obviously use for example DLSM right to dynamically resolve symbols and those would be missed by this technique. So in this scenario basically for now you have to manually find those symbols and add them to the app version script file. Basically a lot of Jalipsi functionality is still in OSV in Linux CC where all the system calls are actually implemented is still basically references all the code in some of the parts of the Lipsi implementation so this obviously also would not be removed. So obviously we could think of ways of finding some kind of build mechanism that could for example find all the usages of Cisco instruction or SVC on ARM and analyze and find all this only code that is needed. In the future we may componentize other functional elements of the kernel for example the DHCP lookup code could be either loaded from a separate library or compiled out depending on some build option to improve compatibility while also planning to add support of statically linked executables which would require implementing at least clone BRK and arch PRCTL Cisco. We may also introduce ability to swap built in version of Jalipsi libraries with third party ones for example the subset of libm so that is provided by OSV kernel could be possibly hidden with the mechanism that is discussed and we could use different implementation of that library. Finally we are considering to expand standard PROCFS and CISFS and OSV specific parts of CISFS that would better support statically linked executables but also allow regular apps to interact with OSV. A good example of it could be implementation of net stat like type of capability application that could expose the networking in terms of OSV better during runtime. In the next part of the presentation I will discuss the other interesting enhancements introduced as part of the latest 0.57 release. More specifically I will talk about lazy stack and new ways to build ZFS images and finally the improvements to the ARH64 port. The lazy stack which by the way is actually the idea that was felt off by Nadav Harrell which maybe is listening to this presentation effectively allows to save substantial amount of memory if an application spawns many p-threads with large stack by letting stack grow dynamically as needed instead of getting prepopulated ahead of time which is normally the case right now with OSV. So on OSV right now all kernel threads and all application threads have stacks that are automatically prepopulated which is obviously not very memory efficient. Now the crux of the solution is based on observation that OSV page fault handler requires that both interrupts and preemption must be enabled when fault is triggered. And therefore if stack is dynamically mapped we need to make sure that the stack page fault never happens in these relatively few places where the kernel code that executes with either interrupts or preemption disabled. And we basically satisfy this requirement by refolking the stack by reading one byte, one page down per stack pointer just before preemption or interrupts are disabled. So a good example of that code would be in a scheduler right when OSV scheduler is trying to figure out what the next threat to switch to. And obviously that code has preemption and interrupts disabled and we wouldn't obviously want to have page fault happen at that moment. So there are relatively few places when that happens and this idea is to basically pre-fault this code. So to achieve that we basically analyze OSV code to find all the places where the IRQ disabled and preempt disabled is called directly or indirectly sometimes and pre-fault the stack there if necessary. As we analyze all call sites we need to follow basically five rules. The first one do nothing if the call in question executes always on the kernel thread right because it has pre-populated stack there's no chance that page fault is going to happen. Second one is do nothing if the call site executes on other type of pre-populated stack. The good example of that would be the interrupt and exception stack or Cisco stack which are all pre-populated. And the number three rule is do nothing if the call site executes when we know that either interrupts or preemptions are disabled because we don't need to somebody already probably pre-faulted that. And then pre-fault unconditionally if we know that both preemption and interrupts are about to be enabled right. And otherwise pre-fault stack by determining dynamically basically by calling the preemptable is preemptable and IRQ enabled functions. And now the idea basically if we only always if we did if we followed only rule number five which actually this is what I tried to do in the very beginning the first attempt to implement lazy stack it will be actually pretty inefficient. I mean I saw pretty significant degradation of for example context switch and other parts of the OSV when I dynamically checked if preemption and interrupts were disabled. So this was accessible pretty painful to basically analyze the code but I think it was worth it. As you remember from the modularity slides the ZFS file system has been extracted from the kernel as a separate shared library called LipsolizeSO which can be loaded from the different file system before ZFS file system can be mounted. This allows for three ways ZFS can be mounted by OSV. The first and original way assumes that ZFS is mounted at the root from the first partition of the first disk. The second one involves mounting ZFS from the second partition of the first disk and at an arbitrary non-root point for example slash data. Similarly the third way involves mounting ZFS from the first partition of the second or higher disk at an arbitrary non-root point as well. Please note that the second and third options assume that the root file system is non-ZFS obviously and which could be like read-only-FS or boot-FS. This slide shows you the build command and how OSV runs when we follow the original and default method of building and mounting ZFS. For those that have done it, there's nothing really interesting here. This is a new method, the first of the two new ones where we actually allow ZFS to be mounted at a non-root mount point like data for example and mixed with another file system on the same disk. Please note that lib-solaris-so is placed on the root file system typically read-only-FS under USR-lib-FS and loaded from it automatically. The build script will automatically add the relevant mount point time to each ZFS. The last method is basically similar to the one before but this time we allow ZFS to be mounted from the partition from the second disk or another one. It's actually what happens with this option, I noticed that OSV would actually mount ZFS file system by around 30 to 40 milliseconds faster. Now there's another new feature we used to run in order to build ZFS images and file system we would use OSV itself to do it. With this new release there's a specialized version of the kernel called ZFS loader which basically delegates to this utilities like Zipple, ZFS and so on to mount OSV but there's also now a new script called ZFS image on host that can be used to mount OSV ZFS images provided you have open ZFS functionality on your host system which is actually quite nice because you can mount basically OSV disk and introspect it, you can also modify it using standard Linux tools and unmount it and use it on OSV again. Here's some help on how this script can be used. Now I think I don't have much time left but I will try. So there's also, I will focus a little bit on the AR64 improvements, I will focus on three things that I think are worth mentioning, the changes to dynamically map the kernel during the boot from the second basically gigabyte of visual memory to the 63rd gigabyte of memory, addition enhancements to handle system calls and then also handle exceptions on a dedicated stack. As far as the moving memory, virtual memory to the 63rd gigabyte so I'm not sure if you realize OSV kernel is actually position dependent but obviously the kernel itself may be loaded in different parts of physical memory so and it used to be before that release that you would have to build different versions for Firecracker or for the QEMU. So basically we, in this release we changed the logic in the assembly, in a bootloader where we basically OSV detects itself where it is in a physical memory and in essence the, you know, dynamically the early mapping tables to then eventually bootstrap to the right place in the positional code. So now basically you don't need to, you can use the same version of the kernel on any hypervisor. Now we had system calls on ARM, we had to handle the SVC instruction, there's not really much interesting if you know how that works and what is maybe a little bit more interesting was the change that I made to make all exceptions including system calls to work on a dedicated stack so before that change all exceptions would be handled on the same stack as the application which was, which wasn't you know really, which caused all kinds of problems and it was, for example, that would effectively prevent implementation of the lazy stack. So to support basically that we would, you know, SV which runs in EL1 in a kernel mode we would basically take advantage of the stack selector register and we would have, we would basically use both stack pointer register SPL0 and SPL1. So normally OSV uses SPL1 register to points to the stack for each thread. So with the new implementation what basically we would do before the exception was taken basically we would switch the stack pointer selector to SPL0 and once basically the exception was handled it would basically go back to normal which was SPL1. I think I was going to skip C with FS because we're running very little half time left but you can read it on that. Yeah we've also added netlink support and we've made quite many improvements to VFS layer so both actually of those netlink and VFS improvements were done to support C with FS so there are basically more gaps that have been filled by trying to run this new use case. So just briefly as we are pretty much at the end of the presentation I think in the next releases of OSV whenever they're going to happen I would like to, I would like us to focus on supporting statically linked executables, adding proper support of spin locks because OSV for example Mutex right now is lockless but under high contention it would actually make sense to use spin locks and we have actually a prototype on that on the mailing list and then supporting ASLR, refreshing Capstan which is a build tool which hasn't been really out because we don't have volunteers, improved for a long time and then even the website and there are many other interesting ones and so I would, as a last slide I would like to basically use this as occasion to thank basically organizer Razvan for inviting me and everybody else from the community of Unikernals and I would also want to thank ScyllaDB for supporting me and Dorlaor and Nadav Harrell for reviewing all the patches and his other improvements and I also want to thank all other contributors to OSV and I also would like to invite you to join us because there are not many of us and if you want to have OSV alive we definitely need you and so there are some resources about OSV, there's my P99 presentation here as well and yeah if you guys have any questions I'm happy to answer them, thank you. Thank you Voldemort, thank you. So any questions for Voldemort, yeah please Marta, just ask it's going to be a bit of the mic. Okay I have two questions, first when you have spoken about the symbols, about the G-Lipsy symbols and the symbols for symbols, do I understand it correctly that the problem is that the kernel might be using some G-Lipsy functions and the applications might be linked to its own G-Lipsy and so-so symbols apply basically? Well not really, they would use the same version it's just you know and there's no problem with for example malloc, like malloc we don't want to expose malloc but there is a good chunk of OSV is implemented in C++ and all of those symbols don't need to be exposed because they inflate the symbols table a lot and they are not, they shouldn't be really you know available to, visible to others and yeah I mean now I think OSV exposes if you build with that option around I think sixteen hundreds of symbols instead of you know seventeen thousands. So it's really about the binary size there? Yeah, yeah basically binary size and with in case of C++ library avoiding a collision where you build OSV with different version of C++ library versus you know the application that. Yeah okay so this is the case I'm interested in, so have you thought about maybe renaming the symbols in the kernel image during link time, maybe adding some prefixes to all the symbols so that you can have them visible but they would not clash? That's an interesting idea, I haven't thought about it yeah. And Marty the other second question, yeah. Yeah that's just a quick second question, so when you have spoken about the latest tag you said that you pre-fold the stack to avoid the problematic case when it drops in preemption disabled, so basically when I'm thinking about it you still need to have some kind of upper bound of the size of the stack so that you know that you pre-fold it large enough to not get into the issue. So my question is why not then have the kernel stacks in all fixed size because if you already need to have some upper bound then why not have a local upper bound for the whole kernel? Wouldn't it be just easier? Well I mean this is for applications threads only, so for application stacks where the kernel threads would still have the pre-populated fixed size stack, yeah so because I mean there are many applications like good example is Java that would start like 200 threads and all of them right now are proposed like one megabyte and all of a sudden need like 200, so this is just for application. Okay so basically my understanding is wrong, so you have the user stack and the kernel stack is the same stack? Well no, it's in the same virtual memory but yeah, I mean when I say kernel stack I mean in OSV basically there are two types of threads, there are kernel threads and there are application threads so basically application threads use their own stack, but when they enter the kernel so to speak they are still reusing the original stack right? I mean application threads use application stack and kernel use kernel and when I say like some kernel code obviously because unicernel as the code executes in an application it runs on application stack but it might execute some kernel code as well which yeah, yeah. Thank you, any other question? Okay thank you so much, let's move on.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.52, "text": " So, once again, hello everybody, welcome to my talk.", "tokens": [407, 11, 1564, 797, 11, 7751, 2201, 11, 2928, 281, 452, 751, 13], "temperature": 0.0, "avg_logprob": -0.32311536444992317, "compression_ratio": 1.3353293413173652, "no_speech_prob": 0.13827870786190033}, {"id": 1, "seek": 0, "start": 10.52, "end": 19.68, "text": " This talk is going to be about OSV, evolution of OSV towards greater modularity and composability.", "tokens": [639, 751, 307, 516, 281, 312, 466, 12731, 53, 11, 9303, 295, 12731, 53, 3030, 5044, 31111, 507, 293, 10199, 2310, 13], "temperature": 0.0, "avg_logprob": -0.32311536444992317, "compression_ratio": 1.3353293413173652, "no_speech_prob": 0.13827870786190033}, {"id": 2, "seek": 0, "start": 19.68, "end": 21.8, "text": " Thanks for introducing me.", "tokens": [2561, 337, 15424, 385, 13], "temperature": 0.0, "avg_logprob": -0.32311536444992317, "compression_ratio": 1.3353293413173652, "no_speech_prob": 0.13827870786190033}, {"id": 3, "seek": 0, "start": 21.8, "end": 27.36, "text": " So I've been contributing to OSV since 2016.", "tokens": [407, 286, 600, 668, 19270, 281, 12731, 53, 1670, 6549, 13], "temperature": 0.0, "avg_logprob": -0.32311536444992317, "compression_ratio": 1.3353293413173652, "no_speech_prob": 0.13827870786190033}, {"id": 4, "seek": 2736, "start": 27.36, "end": 35.64, "text": " Here I go, in 2015 I heard about OSV in one of the conferences and then a couple of years", "tokens": [1692, 286, 352, 11, 294, 7546, 286, 2198, 466, 12731, 53, 294, 472, 295, 264, 22032, 293, 550, 257, 1916, 295, 924], "temperature": 0.0, "avg_logprob": -0.21485565690433278, "compression_ratio": 1.4175257731958764, "no_speech_prob": 0.0009518040460534394}, {"id": 5, "seek": 2736, "start": 35.64, "end": 42.480000000000004, "text": " later I was nominated to be one of its committers and my greatest contributions to OSV include", "tokens": [1780, 286, 390, 25159, 281, 312, 472, 295, 1080, 5599, 1559, 293, 452, 6636, 15725, 281, 12731, 53, 4090], "temperature": 0.0, "avg_logprob": -0.21485565690433278, "compression_ratio": 1.4175257731958764, "no_speech_prob": 0.0009518040460534394}, {"id": 6, "seek": 2736, "start": 42.480000000000004, "end": 53.2, "text": " making OSV run on Firecracker and significantly improving ARCH 64 port among other things.", "tokens": [1455, 12731, 53, 1190, 322, 7652, 10757, 23599, 293, 10591, 11470, 8943, 5462, 12145, 2436, 3654, 661, 721, 13], "temperature": 0.0, "avg_logprob": -0.21485565690433278, "compression_ratio": 1.4175257731958764, "no_speech_prob": 0.0009518040460534394}, {"id": 7, "seek": 5320, "start": 53.2, "end": 59.6, "text": " So I'm not sure if you can tell it but OSV is actually my hobby so I'm not like a real", "tokens": [407, 286, 478, 406, 988, 498, 291, 393, 980, 309, 457, 12731, 53, 307, 767, 452, 18240, 370, 286, 478, 406, 411, 257, 957], "temperature": 0.0, "avg_logprob": -0.1697911301704302, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.00048459868412464857}, {"id": 8, "seek": 5320, "start": 59.6, "end": 65.8, "text": " current developer like many of previous speakers are so it's actually, you know, I work on", "tokens": [2190, 10754, 411, 867, 295, 3894, 9518, 366, 370, 309, 311, 767, 11, 291, 458, 11, 286, 589, 322], "temperature": 0.0, "avg_logprob": -0.1697911301704302, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.00048459868412464857}, {"id": 9, "seek": 5320, "start": 65.8, "end": 73.80000000000001, "text": " it in my night when I feel and I have a day job so I don't represent my company that I", "tokens": [309, 294, 452, 1818, 562, 286, 841, 293, 286, 362, 257, 786, 1691, 370, 286, 500, 380, 2906, 452, 2237, 300, 286], "temperature": 0.0, "avg_logprob": -0.1697911301704302, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.00048459868412464857}, {"id": 10, "seek": 7380, "start": 73.8, "end": 84.92, "text": " work for so this is all my personal contribution to the project.", "tokens": [589, 337, 370, 341, 307, 439, 452, 2973, 13150, 281, 264, 1716, 13], "temperature": 0.0, "avg_logprob": -0.12635888551410876, "compression_ratio": 1.4, "no_speech_prob": 0.0003019468276761472}, {"id": 11, "seek": 7380, "start": 84.92, "end": 92.03999999999999, "text": " So in today's presentation I will talk about enhancements introduced by the latest release", "tokens": [407, 294, 965, 311, 5860, 286, 486, 751, 466, 11985, 1117, 7268, 538, 264, 6792, 4374], "temperature": 0.0, "avg_logprob": -0.12635888551410876, "compression_ratio": 1.4, "no_speech_prob": 0.0003019468276761472}, {"id": 12, "seek": 7380, "start": 92.03999999999999, "end": 102.03999999999999, "text": " of OSV 057 with the focus on greater modularity and composability but I will also discuss", "tokens": [295, 12731, 53, 1958, 19004, 365, 264, 1879, 322, 5044, 31111, 507, 293, 10199, 2310, 457, 286, 486, 611, 2248], "temperature": 0.0, "avg_logprob": -0.12635888551410876, "compression_ratio": 1.4, "no_speech_prob": 0.0003019468276761472}, {"id": 13, "seek": 10204, "start": 102.04, "end": 111.92, "text": " other interesting enhancements like lazy stack, novel ways to build ZFS images and improvements", "tokens": [661, 1880, 11985, 1117, 411, 14847, 8630, 11, 7613, 2098, 281, 1322, 1176, 29318, 5267, 293, 13797], "temperature": 0.0, "avg_logprob": -0.19240685166983768, "compression_ratio": 1.3727810650887573, "no_speech_prob": 0.00026215316029265523}, {"id": 14, "seek": 10204, "start": 111.92, "end": 114.76, "text": " to the ARM port.", "tokens": [281, 264, 45209, 2436, 13], "temperature": 0.0, "avg_logprob": -0.19240685166983768, "compression_ratio": 1.3727810650887573, "no_speech_prob": 0.00026215316029265523}, {"id": 15, "seek": 10204, "start": 114.76, "end": 123.4, "text": " Finally I will also cover an interesting use case of OSV, seaweed FS running on OSV which", "tokens": [6288, 286, 486, 611, 2060, 364, 1880, 764, 1389, 295, 12731, 53, 11, 29449, 41138, 2614, 322, 12731, 53, 597], "temperature": 0.0, "avg_logprob": -0.19240685166983768, "compression_ratio": 1.3727810650887573, "no_speech_prob": 0.00026215316029265523}, {"id": 16, "seek": 10204, "start": 123.4, "end": 127.08000000000001, "text": " is a distributed file system.", "tokens": [307, 257, 12631, 3991, 1185, 13], "temperature": 0.0, "avg_logprob": -0.19240685166983768, "compression_ratio": 1.3727810650887573, "no_speech_prob": 0.00026215316029265523}, {"id": 17, "seek": 12708, "start": 127.08, "end": 136.28, "text": " So as you can see in this talk besides the title, modularity, I will actually try to", "tokens": [407, 382, 291, 393, 536, 294, 341, 751, 11868, 264, 4876, 11, 31111, 507, 11, 286, 486, 767, 853, 281], "temperature": 0.0, "avg_logprob": -0.15498818979634868, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00018661002104636282}, {"id": 18, "seek": 12708, "start": 136.28, "end": 143.0, "text": " give you like state of the art where OSV is, how it has changed recently and a little bit", "tokens": [976, 291, 411, 1785, 295, 264, 1523, 689, 12731, 53, 307, 11, 577, 309, 575, 3105, 3938, 293, 257, 707, 857], "temperature": 0.0, "avg_logprob": -0.15498818979634868, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00018661002104636282}, {"id": 19, "seek": 12708, "start": 143.0, "end": 148.4, "text": " of where it's going hopefully.", "tokens": [295, 689, 309, 311, 516, 4696, 13], "temperature": 0.0, "avg_logprob": -0.15498818979634868, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00018661002104636282}, {"id": 20, "seek": 12708, "start": 148.4, "end": 155.0, "text": " So I know there are probably many definitions of unique kernels and each of them is a little", "tokens": [407, 286, 458, 456, 366, 1391, 867, 21988, 295, 3845, 23434, 1625, 293, 1184, 295, 552, 307, 257, 707], "temperature": 0.0, "avg_logprob": -0.15498818979634868, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00018661002104636282}, {"id": 21, "seek": 15500, "start": 155.0, "end": 161.08, "text": " bit different right but so I'm sure most of you understand what unique kernels are but", "tokens": [857, 819, 558, 457, 370, 286, 478, 988, 881, 295, 291, 1223, 437, 3845, 23434, 1625, 366, 457], "temperature": 0.0, "avg_logprob": -0.16454384747673484, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00011371030268492177}, {"id": 22, "seek": 15500, "start": 161.08, "end": 167.16, "text": " just a quick recap with emphasis on how OSV is a little bit different.", "tokens": [445, 257, 1702, 20928, 365, 16271, 322, 577, 12731, 53, 307, 257, 707, 857, 819, 13], "temperature": 0.0, "avg_logprob": -0.16454384747673484, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00011371030268492177}, {"id": 23, "seek": 15500, "start": 167.16, "end": 172.92000000000002, "text": " So OSV is a unique kernel that was designed to run single and modified Linux application", "tokens": [407, 12731, 53, 307, 257, 3845, 28256, 300, 390, 4761, 281, 1190, 2167, 293, 15873, 18734, 3861], "temperature": 0.0, "avg_logprob": -0.16454384747673484, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00011371030268492177}, {"id": 24, "seek": 15500, "start": 172.92000000000002, "end": 178.76, "text": " on top of hypervisor whereas traditional operating system were originally designed to run on", "tokens": [322, 1192, 295, 9848, 16457, 9735, 5164, 7447, 1185, 645, 7993, 4761, 281, 1190, 322], "temperature": 0.0, "avg_logprob": -0.16454384747673484, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00011371030268492177}, {"id": 25, "seek": 15500, "start": 178.76, "end": 182.16, "text": " a vast range of physical machines.", "tokens": [257, 8369, 3613, 295, 4001, 8379, 13], "temperature": 0.0, "avg_logprob": -0.16454384747673484, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00011371030268492177}, {"id": 26, "seek": 18216, "start": 182.16, "end": 190.24, "text": " But simply speaking OSV is an OS designed to run single application without isolation", "tokens": [583, 2935, 4124, 12731, 53, 307, 364, 12731, 4761, 281, 1190, 2167, 3861, 1553, 16001], "temperature": 0.0, "avg_logprob": -0.14588360692940505, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.00011218347208341584}, {"id": 27, "seek": 18216, "start": 190.24, "end": 198.8, "text": " between application and kernel or it can be thought as a way to run highly isolated process", "tokens": [1296, 3861, 293, 28256, 420, 309, 393, 312, 1194, 382, 257, 636, 281, 1190, 5405, 14621, 1399], "temperature": 0.0, "avg_logprob": -0.14588360692940505, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.00011218347208341584}, {"id": 28, "seek": 18216, "start": 198.8, "end": 204.07999999999998, "text": " without ability to make system calls to the host OS.", "tokens": [1553, 3485, 281, 652, 1185, 5498, 281, 264, 3975, 12731, 13], "temperature": 0.0, "avg_logprob": -0.14588360692940505, "compression_ratio": 1.5032679738562091, "no_speech_prob": 0.00011218347208341584}, {"id": 29, "seek": 20408, "start": 204.08, "end": 214.76000000000002, "text": " Finally OSV can run on both 64-bit X86 and ARM V8 architectures.", "tokens": [6288, 12731, 53, 393, 1190, 322, 1293, 12145, 12, 5260, 1783, 22193, 293, 45209, 691, 23, 6331, 1303, 13], "temperature": 0.0, "avg_logprob": -0.22512867985939494, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.00012883171439170837}, {"id": 30, "seek": 20408, "start": 214.76000000000002, "end": 224.8, "text": " Now a little bit of history, so OSV for those that don't know, OSV was started in late 2012", "tokens": [823, 257, 707, 857, 295, 2503, 11, 370, 12731, 53, 337, 729, 300, 500, 380, 458, 11, 12731, 53, 390, 1409, 294, 3469, 9125], "temperature": 0.0, "avg_logprob": -0.22512867985939494, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.00012883171439170837}, {"id": 31, "seek": 22480, "start": 224.8, "end": 234.8, "text": " by the company called Cloud Use Systems and they built pretty strong team of 10, 20 developers", "tokens": [538, 264, 2237, 1219, 8061, 8278, 27059, 293, 436, 3094, 1238, 2068, 1469, 295, 1266, 11, 945, 8849], "temperature": 0.0, "avg_logprob": -0.18796006611415317, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.00017892071628011763}, {"id": 32, "seek": 22480, "start": 234.8, "end": 236.0, "text": " I think.", "tokens": [286, 519, 13], "temperature": 0.0, "avg_logprob": -0.18796006611415317, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.00017892071628011763}, {"id": 33, "seek": 22480, "start": 236.0, "end": 244.08, "text": " I wasn't one of them but they pretty much wrote most of OSV but at some point they basically", "tokens": [286, 2067, 380, 472, 295, 552, 457, 436, 1238, 709, 4114, 881, 295, 12731, 53, 457, 412, 512, 935, 436, 1936], "temperature": 0.0, "avg_logprob": -0.18796006611415317, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.00017892071628011763}, {"id": 34, "seek": 22480, "start": 244.08, "end": 251.0, "text": " I guess realized they have to make money I'm guessing so they basically moved on and started", "tokens": [286, 2041, 5334, 436, 362, 281, 652, 1460, 286, 478, 17939, 370, 436, 1936, 4259, 322, 293, 1409], "temperature": 0.0, "avg_logprob": -0.18796006611415317, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.00017892071628011763}, {"id": 35, "seek": 25100, "start": 251.0, "end": 258.28, "text": " working on this product you may have know CillaDB which is this high-performance database", "tokens": [1364, 322, 341, 1674, 291, 815, 362, 458, 383, 5291, 27735, 597, 307, 341, 1090, 12, 50242, 8149], "temperature": 0.0, "avg_logprob": -0.20105648040771484, "compression_ratio": 1.5822222222222222, "no_speech_prob": 9.936127025866881e-05}, {"id": 36, "seek": 25100, "start": 258.28, "end": 265.6, "text": " but I think they took some learning so and after that basically I think OSV did receive", "tokens": [457, 286, 519, 436, 1890, 512, 2539, 370, 293, 934, 300, 1936, 286, 519, 12731, 53, 630, 4774], "temperature": 0.0, "avg_logprob": -0.20105648040771484, "compression_ratio": 1.5822222222222222, "no_speech_prob": 9.936127025866881e-05}, {"id": 37, "seek": 25100, "start": 265.6, "end": 270.44, "text": " some grant from European Union so there was some project on that and I think there may", "tokens": [512, 6386, 490, 6473, 8133, 370, 456, 390, 512, 1716, 322, 300, 293, 286, 519, 456, 815], "temperature": 0.0, "avg_logprob": -0.20105648040771484, "compression_ratio": 1.5822222222222222, "no_speech_prob": 9.936127025866881e-05}, {"id": 38, "seek": 25100, "start": 270.44, "end": 279.0, "text": " have been some companies also using OSV but honestly since then it's been really maintained", "tokens": [362, 668, 512, 3431, 611, 1228, 12731, 53, 457, 6095, 1670, 550, 309, 311, 668, 534, 17578], "temperature": 0.0, "avg_logprob": -0.20105648040771484, "compression_ratio": 1.5822222222222222, "no_speech_prob": 9.936127025866881e-05}, {"id": 39, "seek": 27900, "start": 279.0, "end": 289.76, "text": " by volunteers so like me like there's still some people from CillaDB, Nadaf, Harrell and", "tokens": [538, 14352, 370, 411, 385, 411, 456, 311, 920, 512, 561, 490, 383, 5291, 27735, 11, 40992, 69, 11, 3653, 19771, 293], "temperature": 0.0, "avg_logprob": -0.28298301696777345, "compression_ratio": 1.5414847161572052, "no_speech_prob": 0.0005556846153922379}, {"id": 40, "seek": 27900, "start": 289.76, "end": 295.4, "text": " others that contribute to the project you know I would just single out Fortisks and", "tokens": [2357, 300, 10586, 281, 264, 1716, 291, 458, 286, 576, 445, 2167, 484, 11002, 271, 1694, 293], "temperature": 0.0, "avg_logprob": -0.28298301696777345, "compression_ratio": 1.5414847161572052, "no_speech_prob": 0.0005556846153922379}, {"id": 41, "seek": 27900, "start": 295.4, "end": 302.28, "text": " Akis which actually was the one that implemented Virtio FS as a you know for very interesting", "tokens": [9629, 271, 597, 767, 390, 264, 472, 300, 12270, 691, 2498, 1004, 41138, 382, 257, 291, 458, 337, 588, 1880], "temperature": 0.0, "avg_logprob": -0.28298301696777345, "compression_ratio": 1.5414847161572052, "no_speech_prob": 0.0005556846153922379}, {"id": 42, "seek": 27900, "start": 302.28, "end": 307.44, "text": " contribution to OSV and obviously I would like to take this opportunity to invite more", "tokens": [13150, 281, 12731, 53, 293, 2745, 286, 576, 411, 281, 747, 341, 2650, 281, 7980, 544], "temperature": 0.0, "avg_logprob": -0.28298301696777345, "compression_ratio": 1.5414847161572052, "no_speech_prob": 0.0005556846153922379}, {"id": 43, "seek": 30744, "start": 307.44, "end": 316.88, "text": " people to become part of our community because honestly you may not realize it but our community", "tokens": [561, 281, 1813, 644, 295, 527, 1768, 570, 6095, 291, 815, 406, 4325, 309, 457, 527, 1768], "temperature": 0.0, "avg_logprob": -0.14840971139761117, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00016251846682280302}, {"id": 44, "seek": 30744, "start": 316.88, "end": 325.96, "text": " is very small so it's just really me, Nadaf and a couple of other people that contribute", "tokens": [307, 588, 1359, 370, 309, 311, 445, 534, 385, 11, 40992, 69, 293, 257, 1916, 295, 661, 561, 300, 10586], "temperature": 0.0, "avg_logprob": -0.14840971139761117, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00016251846682280302}, {"id": 45, "seek": 30744, "start": 325.96, "end": 334.8, "text": " to the project so I hope we you know we're gonna grow as a community after this talk.", "tokens": [281, 264, 1716, 370, 286, 1454, 321, 291, 458, 321, 434, 799, 1852, 382, 257, 1768, 934, 341, 751, 13], "temperature": 0.0, "avg_logprob": -0.14840971139761117, "compression_ratio": 1.5485714285714285, "no_speech_prob": 0.00016251846682280302}, {"id": 46, "seek": 33480, "start": 334.8, "end": 342.56, "text": " So quick recap of a little bit of how OSV looks like what the design is so in this slide", "tokens": [407, 1702, 20928, 295, 257, 707, 857, 295, 577, 12731, 53, 1542, 411, 437, 264, 1715, 307, 370, 294, 341, 4137], "temperature": 0.0, "avg_logprob": -0.22781229710233383, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.0004237480752635747}, {"id": 47, "seek": 33480, "start": 342.56, "end": 350.24, "text": " you can see major components of OSV across layers starting with G-Lipsy, the top which", "tokens": [291, 393, 536, 2563, 6677, 295, 12731, 53, 2108, 7914, 2891, 365, 460, 12, 43, 2600, 88, 11, 264, 1192, 597], "temperature": 0.0, "avg_logprob": -0.22781229710233383, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.0004237480752635747}, {"id": 48, "seek": 33480, "start": 350.24, "end": 357.96000000000004, "text": " is greatly based actually on Musil, then core layer in the middle comprised of ELF dynamic", "tokens": [307, 14147, 2361, 767, 322, 3569, 388, 11, 550, 4965, 4583, 294, 264, 2808, 38062, 295, 14426, 37, 8546], "temperature": 0.0, "avg_logprob": -0.22781229710233383, "compression_ratio": 1.4301075268817205, "no_speech_prob": 0.0004237480752635747}, {"id": 49, "seek": 35796, "start": 357.96, "end": 368.23999999999995, "text": " linker of VFS, virtual file system, networking stack, thread scheduler, page cache, RCU,", "tokens": [2113, 260, 295, 691, 29318, 11, 6374, 3991, 1185, 11, 17985, 8630, 11, 7207, 12000, 260, 11, 3028, 19459, 11, 497, 25864, 11], "temperature": 0.0, "avg_logprob": -0.2670496013802542, "compression_ratio": 1.4130434782608696, "no_speech_prob": 0.0005448493757285178}, {"id": 50, "seek": 35796, "start": 368.23999999999995, "end": 377.0, "text": " read copy update, page table management and L1, L2 pools to manage memory and then you", "tokens": [1401, 5055, 5623, 11, 3028, 3199, 4592, 293, 441, 16, 11, 441, 17, 28688, 281, 3067, 4675, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.2670496013802542, "compression_ratio": 1.4130434782608696, "no_speech_prob": 0.0005448493757285178}, {"id": 51, "seek": 35796, "start": 377.0, "end": 387.84, "text": " have a layer of device drivers where we OSV implements Virtio devices on both of our", "tokens": [362, 257, 4583, 295, 4302, 11590, 689, 321, 12731, 53, 704, 17988, 691, 2498, 1004, 5759, 322, 1293, 295, 527], "temperature": 0.0, "avg_logprob": -0.2670496013802542, "compression_ratio": 1.4130434782608696, "no_speech_prob": 0.0005448493757285178}, {"id": 52, "seek": 38784, "start": 387.84, "end": 398.15999999999997, "text": " PCI transport and MMIO transport and then Zen and VMware among others and obviously", "tokens": [6465, 40, 5495, 293, 34191, 15167, 5495, 293, 550, 22387, 293, 40146, 3654, 2357, 293, 2745], "temperature": 0.0, "avg_logprob": -0.23183067985202954, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.0005040864343754947}, {"id": 53, "seek": 38784, "start": 398.15999999999997, "end": 405.79999999999995, "text": " and one more thing so as we can run on KVM based hypervisors like QMU like Firecracker", "tokens": [293, 472, 544, 551, 370, 382, 321, 393, 1190, 322, 591, 53, 44, 2361, 9848, 4938, 830, 411, 1249, 44, 52, 411, 7652, 10757, 23599], "temperature": 0.0, "avg_logprob": -0.23183067985202954, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.0005040864343754947}, {"id": 54, "seek": 38784, "start": 405.79999999999995, "end": 414.88, "text": " I did test also OSV on cloud hypervisor which is I think Intel's hypervisor written in", "tokens": [286, 630, 1500, 611, 12731, 53, 322, 4588, 9848, 16457, 597, 307, 286, 519, 19762, 311, 9848, 16457, 3720, 294], "temperature": 0.0, "avg_logprob": -0.23183067985202954, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.0005040864343754947}, {"id": 55, "seek": 41488, "start": 414.88, "end": 423.56, "text": " Rust and then I personally didn't really run OSV on Zen so I know that the Zen support", "tokens": [34952, 293, 550, 286, 5665, 994, 380, 534, 1190, 12731, 53, 322, 22387, 370, 286, 458, 300, 264, 22387, 1406], "temperature": 0.0, "avg_logprob": -0.15433718941428445, "compression_ratio": 1.5, "no_speech_prob": 0.00011930014443350956}, {"id": 56, "seek": 41488, "start": 423.56, "end": 427.8, "text": " is a little bit dated probably and I'm not sure how much it has been tested.", "tokens": [307, 257, 707, 857, 23804, 1391, 293, 286, 478, 406, 988, 577, 709, 309, 575, 668, 8246, 13], "temperature": 0.0, "avg_logprob": -0.15433718941428445, "compression_ratio": 1.5, "no_speech_prob": 0.00011930014443350956}, {"id": 57, "seek": 41488, "start": 427.8, "end": 435.36, "text": " I did test on VMware Vbox, virtual box and I think on Hyperkit at some point.", "tokens": [286, 630, 1500, 322, 40146, 691, 4995, 11, 6374, 2424, 293, 286, 519, 322, 29592, 22681, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.15433718941428445, "compression_ratio": 1.5, "no_speech_prob": 0.00011930014443350956}, {"id": 58, "seek": 41488, "start": 435.36, "end": 442.2, "text": " So I will just I want to go into more detail about this diagram but I will leave it with", "tokens": [407, 286, 486, 445, 286, 528, 281, 352, 666, 544, 2607, 466, 341, 10686, 457, 286, 486, 1856, 309, 365], "temperature": 0.0, "avg_logprob": -0.15433718941428445, "compression_ratio": 1.5, "no_speech_prob": 0.00011930014443350956}, {"id": 59, "seek": 44220, "start": 442.2, "end": 448.68, "text": " you just as a reference later.", "tokens": [291, 445, 382, 257, 6408, 1780, 13], "temperature": 0.0, "avg_logprob": -0.21996303967067174, "compression_ratio": 1.3790849673202614, "no_speech_prob": 0.0002062093117274344}, {"id": 60, "seek": 44220, "start": 448.68, "end": 457.24, "text": " So in the first part of this presentation I will about modularity and composability", "tokens": [407, 294, 264, 700, 644, 295, 341, 5860, 286, 486, 466, 31111, 507, 293, 10199, 2310], "temperature": 0.0, "avg_logprob": -0.21996303967067174, "compression_ratio": 1.3790849673202614, "no_speech_prob": 0.0002062093117274344}, {"id": 61, "seek": 44220, "start": 457.24, "end": 465.44, "text": " I will focus on new experimental modes to hide the non-Gilipsi symbols and standard C++", "tokens": [286, 486, 1879, 322, 777, 17069, 14068, 281, 6479, 264, 2107, 12, 38, 388, 2600, 72, 16944, 293, 3832, 383, 25472], "temperature": 0.0, "avg_logprob": -0.21996303967067174, "compression_ratio": 1.3790849673202614, "no_speech_prob": 0.0002062093117274344}, {"id": 62, "seek": 44220, "start": 465.44, "end": 466.44, "text": " library.", "tokens": [6405, 13], "temperature": 0.0, "avg_logprob": -0.21996303967067174, "compression_ratio": 1.3790849673202614, "no_speech_prob": 0.0002062093117274344}, {"id": 63, "seek": 46644, "start": 466.44, "end": 473.16, "text": " I will also discuss how ZFS code was extracted out of the kernel in form of a dynamically", "tokens": [286, 486, 611, 2248, 577, 1176, 29318, 3089, 390, 34086, 484, 295, 264, 28256, 294, 1254, 295, 257, 43492], "temperature": 0.0, "avg_logprob": -0.12525125110850616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 4.1383660573046654e-05}, {"id": 64, "seek": 46644, "start": 473.16, "end": 481.76, "text": " linked library and finally I will also explain another new build option to tailor the kernel", "tokens": [9408, 6405, 293, 2721, 286, 486, 611, 2903, 1071, 777, 1322, 3614, 281, 33068, 264, 28256], "temperature": 0.0, "avg_logprob": -0.12525125110850616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 4.1383660573046654e-05}, {"id": 65, "seek": 46644, "start": 481.76, "end": 483.8, "text": " to a set of specific drivers.", "tokens": [281, 257, 992, 295, 2685, 11590, 13], "temperature": 0.0, "avg_logprob": -0.12525125110850616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 4.1383660573046654e-05}, {"id": 66, "seek": 46644, "start": 483.8, "end": 490.48, "text": " I call them driver profiles and another new mechanism to allow building a version of kernel", "tokens": [286, 818, 552, 6787, 23693, 293, 1071, 777, 7513, 281, 2089, 2390, 257, 3037, 295, 28256], "temperature": 0.0, "avg_logprob": -0.12525125110850616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 4.1383660573046654e-05}, {"id": 67, "seek": 49048, "start": 490.48, "end": 497.08000000000004, "text": " with a subset of Gilipsi symbols needed to support a specific application which I think", "tokens": [365, 257, 25993, 295, 17654, 2600, 72, 16944, 2978, 281, 1406, 257, 2685, 3861, 597, 286, 519], "temperature": 0.0, "avg_logprob": -0.20666575096022916, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00013923051301389933}, {"id": 68, "seek": 49048, "start": 497.08000000000004, "end": 503.88, "text": " is quite interesting.", "tokens": [307, 1596, 1880, 13], "temperature": 0.0, "avg_logprob": -0.20666575096022916, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00013923051301389933}, {"id": 69, "seek": 49048, "start": 503.88, "end": 512.44, "text": " So by design OSV has always been a FAT unicolonal and which has been some sort of some of the", "tokens": [407, 538, 1715, 12731, 53, 575, 1009, 668, 257, 479, 2218, 517, 299, 38780, 304, 293, 597, 575, 668, 512, 1333, 295, 512, 295, 264], "temperature": 0.0, "avg_logprob": -0.20666575096022916, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00013923051301389933}, {"id": 70, "seek": 49048, "start": 512.44, "end": 519.6, "text": " criticism and by default provided a large subset of Gilipsi functionality has included", "tokens": [15835, 293, 538, 7576, 5649, 257, 2416, 25993, 295, 17654, 2600, 72, 14980, 575, 5556], "temperature": 0.0, "avg_logprob": -0.20666575096022916, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.00013923051301389933}, {"id": 71, "seek": 51960, "start": 519.6, "end": 527.6, "text": " full standard C++ library and ZFS implementation drivers for many devices and has supported", "tokens": [1577, 3832, 383, 25472, 6405, 293, 1176, 29318, 11420, 11590, 337, 867, 5759, 293, 575, 8104], "temperature": 0.0, "avg_logprob": -0.10794415272457498, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.00032938411459326744}, {"id": 72, "seek": 51960, "start": 527.6, "end": 529.8000000000001, "text": " many hypervisors.", "tokens": [867, 9848, 4938, 830, 13], "temperature": 0.0, "avg_logprob": -0.10794415272457498, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.00032938411459326744}, {"id": 73, "seek": 51960, "start": 529.8000000000001, "end": 538.12, "text": " So on one hand it makes running arbitrary application on any hypervisor very easy using", "tokens": [407, 322, 472, 1011, 309, 1669, 2614, 23211, 3861, 322, 604, 9848, 16457, 588, 1858, 1228], "temperature": 0.0, "avg_logprob": -0.10794415272457498, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.00032938411459326744}, {"id": 74, "seek": 51960, "start": 538.12, "end": 540.8000000000001, "text": " a single universal kernel.", "tokens": [257, 2167, 11455, 28256, 13], "temperature": 0.0, "avg_logprob": -0.10794415272457498, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.00032938411459326744}, {"id": 75, "seek": 51960, "start": 540.8000000000001, "end": 547.44, "text": " But on another hand such universality comes with the price of bloated kernel with many", "tokens": [583, 322, 1071, 1011, 1270, 5950, 1860, 1487, 365, 264, 3218, 295, 1749, 770, 28256, 365, 867], "temperature": 0.0, "avg_logprob": -0.10794415272457498, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.00032938411459326744}, {"id": 76, "seek": 54744, "start": 547.44, "end": 553.4000000000001, "text": " symbols and drivers and possibly ZFS that is unused.", "tokens": [16944, 293, 11590, 293, 6264, 1176, 29318, 300, 307, 44383, 13], "temperature": 0.0, "avg_logprob": -0.20867867903275925, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.00015331266331486404}, {"id": 77, "seek": 54744, "start": 553.4000000000001, "end": 563.0400000000001, "text": " That's causing inefficient memory usage, longer boot time and potential security vulnerabilities.", "tokens": [663, 311, 9853, 43495, 4675, 14924, 11, 2854, 11450, 565, 293, 3995, 3825, 37633, 13], "temperature": 0.0, "avg_logprob": -0.20867867903275925, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.00015331266331486404}, {"id": 78, "seek": 54744, "start": 563.0400000000001, "end": 570.8000000000001, "text": " In addition C++ application linked against one version of LeapSTD C++ different than", "tokens": [682, 4500, 383, 25472, 3861, 9408, 1970, 472, 3037, 295, 1456, 569, 6840, 35, 383, 25472, 819, 813], "temperature": 0.0, "avg_logprob": -0.20867867903275925, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.00015331266331486404}, {"id": 79, "seek": 54744, "start": 570.8000000000001, "end": 575.84, "text": " the version the kernel was linked against may simply not work.", "tokens": [264, 3037, 264, 28256, 390, 9408, 1970, 815, 2935, 406, 589, 13], "temperature": 0.0, "avg_logprob": -0.20867867903275925, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.00015331266331486404}, {"id": 80, "seek": 57584, "start": 575.84, "end": 585.44, "text": " For example that happened to me when I was testing OSV with.NET and the only way to", "tokens": [1171, 1365, 300, 2011, 281, 385, 562, 286, 390, 4997, 12731, 53, 365, 2411, 35554, 293, 264, 787, 636, 281], "temperature": 0.0, "avg_logprob": -0.12798723184837485, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00012573979620356113}, {"id": 81, "seek": 57584, "start": 585.44, "end": 595.64, "text": " make it work was to hide basically the C++ standard library and use the one that was", "tokens": [652, 309, 589, 390, 281, 6479, 1936, 264, 383, 25472, 3832, 6405, 293, 764, 264, 472, 300, 390], "temperature": 0.0, "avg_logprob": -0.12798723184837485, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00012573979620356113}, {"id": 82, "seek": 57584, "start": 595.64, "end": 603.76, "text": " part of the.NET app.", "tokens": [644, 295, 264, 2411, 35554, 724, 13], "temperature": 0.0, "avg_logprob": -0.12798723184837485, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00012573979620356113}, {"id": 83, "seek": 60376, "start": 603.76, "end": 610.12, "text": " So one way to lower memory utilization of the guest is to minimize the kernel size.", "tokens": [407, 472, 636, 281, 3126, 4675, 37074, 295, 264, 8341, 307, 281, 17522, 264, 28256, 2744, 13], "temperature": 0.0, "avg_logprob": -0.11096026573652103, "compression_ratio": 1.5275229357798166, "no_speech_prob": 6.289776501944289e-05}, {"id": 84, "seek": 60376, "start": 610.12, "end": 617.12, "text": " By default OSV comes with a universal kernel that provides quite large spectrum of Gilipsi", "tokens": [3146, 7576, 12731, 53, 1487, 365, 257, 11455, 28256, 300, 6417, 1596, 2416, 11143, 295, 17654, 2600, 72], "temperature": 0.0, "avg_logprob": -0.11096026573652103, "compression_ratio": 1.5275229357798166, "no_speech_prob": 6.289776501944289e-05}, {"id": 85, "seek": 60376, "start": 617.12, "end": 625.92, "text": " library and full standard C++ library and exposes over a total of 17,000 symbols and", "tokens": [6405, 293, 1577, 3832, 383, 25472, 6405, 293, 1278, 4201, 670, 257, 3217, 295, 3282, 11, 1360, 16944, 293], "temperature": 0.0, "avg_logprob": -0.11096026573652103, "compression_ratio": 1.5275229357798166, "no_speech_prob": 6.289776501944289e-05}, {"id": 86, "seek": 60376, "start": 625.92, "end": 633.4, "text": " most of those are very long as C++ symbols that make up the symbol table.", "tokens": [881, 295, 729, 366, 588, 938, 382, 383, 25472, 16944, 300, 652, 493, 264, 5986, 3199, 13], "temperature": 0.0, "avg_logprob": -0.11096026573652103, "compression_ratio": 1.5275229357798166, "no_speech_prob": 6.289776501944289e-05}, {"id": 87, "seek": 63340, "start": 633.4, "end": 641.0, "text": " So the question may be posed why not have a mechanism where we can build a kernel with", "tokens": [407, 264, 1168, 815, 312, 31399, 983, 406, 362, 257, 7513, 689, 321, 393, 1322, 257, 28256, 365], "temperature": 0.0, "avg_logprob": -0.17087969779968262, "compression_ratio": 1.4831460674157304, "no_speech_prob": 7.07422659615986e-05}, {"id": 88, "seek": 63340, "start": 641.0, "end": 650.0799999999999, "text": " all known Gilipsi symbols hidden and all unneeded code that is unused garbage collected.", "tokens": [439, 2570, 17654, 2600, 72, 16944, 7633, 293, 439, 517, 716, 37679, 3089, 300, 307, 44383, 14150, 11087, 13], "temperature": 0.0, "avg_logprob": -0.17087969779968262, "compression_ratio": 1.4831460674157304, "no_speech_prob": 7.07422659615986e-05}, {"id": 89, "seek": 63340, "start": 650.0799999999999, "end": 656.24, "text": " So the extra benefit of fewer exported symbols is increased security that stems from the", "tokens": [407, 264, 2857, 5121, 295, 13366, 42055, 16944, 307, 6505, 3825, 300, 27600, 490, 264], "temperature": 0.0, "avg_logprob": -0.17087969779968262, "compression_ratio": 1.4831460674157304, "no_speech_prob": 7.07422659615986e-05}, {"id": 90, "seek": 65624, "start": 656.24, "end": 665.36, "text": " fact that there is simply less potential code that is left that could be harmful.", "tokens": [1186, 300, 456, 307, 2935, 1570, 3995, 3089, 300, 307, 1411, 300, 727, 312, 19727, 13], "temperature": 0.0, "avg_logprob": -0.17384323320890727, "compression_ratio": 1.421875, "no_speech_prob": 6.533630221383646e-05}, {"id": 91, "seek": 65624, "start": 665.36, "end": 675.04, "text": " And also that way we can achieve better compatibility as any potential symbol collisions for example", "tokens": [400, 611, 300, 636, 321, 393, 4584, 1101, 34237, 382, 604, 3995, 5986, 46537, 337, 1365], "temperature": 0.0, "avg_logprob": -0.17384323320890727, "compression_ratio": 1.421875, "no_speech_prob": 6.533630221383646e-05}, {"id": 92, "seek": 67504, "start": 675.04, "end": 686.68, "text": " and mismatch standard C++ library which I mentioned can be avoided.", "tokens": [293, 23220, 852, 3832, 383, 25472, 6405, 597, 286, 2835, 393, 312, 24890, 13], "temperature": 0.0, "avg_logprob": -0.2257643597466605, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.00019288717885501683}, {"id": 93, "seek": 67504, "start": 686.68, "end": 697.68, "text": " So the release 057 added a new build option called conf-hide symbols to hide those non-Gilipsi", "tokens": [407, 264, 4374, 1958, 19004, 3869, 257, 777, 1322, 3614, 1219, 1497, 12, 71, 482, 16944, 281, 6479, 729, 2107, 12, 38, 388, 2600, 72], "temperature": 0.0, "avg_logprob": -0.2257643597466605, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.00019288717885501683}, {"id": 94, "seek": 67504, "start": 697.68, "end": 702.48, "text": " symbols and the standard C++ library symbols.", "tokens": [16944, 293, 264, 3832, 383, 25472, 6405, 16944, 13], "temperature": 0.0, "avg_logprob": -0.2257643597466605, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.00019288717885501683}, {"id": 95, "seek": 70248, "start": 702.48, "end": 710.4, "text": " These are enabled if enabled in essence most files in a source tree of OSV except the ones", "tokens": [1981, 366, 15172, 498, 15172, 294, 12801, 881, 7098, 294, 257, 4009, 4230, 295, 12731, 53, 3993, 264, 2306], "temperature": 0.0, "avg_logprob": -0.20066564733331854, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.00015016407996881753}, {"id": 96, "seek": 70248, "start": 710.4, "end": 716.84, "text": " under Lipsi and Musil directories would be compiled with the flags of visibility hidden", "tokens": [833, 441, 2600, 72, 293, 3569, 388, 5391, 530, 576, 312, 36548, 365, 264, 23265, 295, 19883, 7633], "temperature": 0.0, "avg_logprob": -0.20066564733331854, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.00015016407996881753}, {"id": 97, "seek": 70248, "start": 716.84, "end": 722.08, "text": " and only if that build flag is enabled.", "tokens": [293, 787, 498, 300, 1322, 7166, 307, 15172, 13], "temperature": 0.0, "avg_logprob": -0.20066564733331854, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.00015016407996881753}, {"id": 98, "seek": 70248, "start": 722.08, "end": 728.64, "text": " On the other hand the symbols to be exposed as public like the Gilipsi one would be annotated", "tokens": [1282, 264, 661, 1011, 264, 16944, 281, 312, 9495, 382, 1908, 411, 264, 17654, 2600, 72, 472, 576, 312, 25339, 770], "temperature": 0.0, "avg_logprob": -0.20066564733331854, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.00015016407996881753}, {"id": 99, "seek": 72864, "start": 728.64, "end": 736.12, "text": " with OSV Asterisk API macros that translate basically to attribute visibility default", "tokens": [365, 12731, 53, 316, 3120, 7797, 9362, 7912, 2635, 300, 13799, 1936, 281, 19667, 19883, 7576], "temperature": 0.0, "avg_logprob": -0.2550552955040565, "compression_ratio": 1.4817073170731707, "no_speech_prob": 0.00013070015120320022}, {"id": 100, "seek": 72864, "start": 736.12, "end": 742.76, "text": " and the standard C++ library is linked with the flag no whole archive.", "tokens": [293, 264, 3832, 383, 25472, 6405, 307, 9408, 365, 264, 7166, 572, 1379, 23507, 13], "temperature": 0.0, "avg_logprob": -0.2550552955040565, "compression_ratio": 1.4817073170731707, "no_speech_prob": 0.00013070015120320022}, {"id": 101, "seek": 72864, "start": 742.76, "end": 750.28, "text": " Those SV Asterisk API macros basically would be like OSV Lipsi API or OSV Pthreads API", "tokens": [3950, 31910, 316, 3120, 7797, 9362, 7912, 2635, 1936, 576, 312, 411, 12731, 53, 441, 2600, 72, 9362, 420, 12731, 53, 430, 392, 2538, 82, 9362], "temperature": 0.0, "avg_logprob": -0.2550552955040565, "compression_ratio": 1.4817073170731707, "no_speech_prob": 0.00013070015120320022}, {"id": 102, "seek": 75028, "start": 750.28, "end": 758.8399999999999, "text": " OSV Lipsi API and so on basically that match all then I think around 10 libraries that OSV", "tokens": [12731, 53, 441, 2600, 72, 9362, 293, 370, 322, 1936, 300, 2995, 439, 550, 286, 519, 926, 1266, 15148, 300, 12731, 53], "temperature": 0.0, "avg_logprob": -0.28807226816813153, "compression_ratio": 1.3581081081081081, "no_speech_prob": 0.0001682777510723099}, {"id": 103, "seek": 75028, "start": 758.8399999999999, "end": 763.36, "text": " dynamic linker exposes.", "tokens": [8546, 2113, 260, 1278, 4201, 13], "temperature": 0.0, "avg_logprob": -0.28807226816813153, "compression_ratio": 1.3581081081081081, "no_speech_prob": 0.0001682777510723099}, {"id": 104, "seek": 75028, "start": 763.36, "end": 773.0799999999999, "text": " Finally the list of public symbols exported by the kernel is enforced during the build", "tokens": [6288, 264, 1329, 295, 1908, 16944, 42055, 538, 264, 28256, 307, 40953, 1830, 264, 1322], "temperature": 0.0, "avg_logprob": -0.28807226816813153, "compression_ratio": 1.3581081081081081, "no_speech_prob": 0.0001682777510723099}, {"id": 105, "seek": 77308, "start": 773.08, "end": 780.9200000000001, "text": " process based on the symbol list files for each advertised library like for example Lipsi", "tokens": [1399, 2361, 322, 264, 5986, 1329, 7098, 337, 1184, 42310, 6405, 411, 337, 1365, 441, 2600, 72], "temperature": 0.0, "avg_logprob": -0.15223190146432797, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00013790831144433469}, {"id": 106, "seek": 77308, "start": 780.9200000000001, "end": 788.36, "text": " SO6 and is maintained under the directory exported symbols.", "tokens": [10621, 21, 293, 307, 17578, 833, 264, 21120, 42055, 16944, 13], "temperature": 0.0, "avg_logprob": -0.15223190146432797, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00013790831144433469}, {"id": 107, "seek": 77308, "start": 788.36, "end": 794.6800000000001, "text": " So these files are basically list of symbols that are concatenated using the script called", "tokens": [407, 613, 7098, 366, 1936, 1329, 295, 16944, 300, 366, 1588, 7186, 770, 1228, 264, 5755, 1219], "temperature": 0.0, "avg_logprob": -0.15223190146432797, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00013790831144433469}, {"id": 108, "seek": 77308, "start": 794.6800000000001, "end": 800.8000000000001, "text": " generate version script and which goes into version script file and then is fed to the", "tokens": [8460, 3037, 5755, 293, 597, 1709, 666, 3037, 5755, 3991, 293, 550, 307, 4636, 281, 264], "temperature": 0.0, "avg_logprob": -0.15223190146432797, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00013790831144433469}, {"id": 109, "seek": 80080, "start": 800.8, "end": 808.28, "text": " linker as an argument to the version script file.", "tokens": [2113, 260, 382, 364, 6770, 281, 264, 3037, 5755, 3991, 13], "temperature": 0.0, "avg_logprob": -0.22202841988925276, "compression_ratio": 1.5686274509803921, "no_speech_prob": 3.110127363470383e-05}, {"id": 110, "seek": 80080, "start": 808.28, "end": 815.5999999999999, "text": " So in order to now remove all unedited code basically garbage all files would be compiled", "tokens": [407, 294, 1668, 281, 586, 4159, 439, 517, 292, 1226, 3089, 1936, 14150, 439, 7098, 576, 312, 36548], "temperature": 0.0, "avg_logprob": -0.22202841988925276, "compression_ratio": 1.5686274509803921, "no_speech_prob": 3.110127363470383e-05}, {"id": 111, "seek": 80080, "start": 815.5999999999999, "end": 823.0, "text": " with the function sections and data sections and then they would be linked with the flag", "tokens": [365, 264, 2445, 10863, 293, 1412, 10863, 293, 550, 436, 576, 312, 9408, 365, 264, 7166], "temperature": 0.0, "avg_logprob": -0.22202841988925276, "compression_ratio": 1.5686274509803921, "no_speech_prob": 3.110127363470383e-05}, {"id": 112, "seek": 80080, "start": 823.0, "end": 824.8, "text": " GC section.", "tokens": [29435, 3541, 13], "temperature": 0.0, "avg_logprob": -0.22202841988925276, "compression_ratio": 1.5686274509803921, "no_speech_prob": 3.110127363470383e-05}, {"id": 113, "seek": 82480, "start": 824.8, "end": 831.56, "text": " Now any code that needs to stay like for example the bootstrap start point or dynamically", "tokens": [823, 604, 3089, 300, 2203, 281, 1754, 411, 337, 1365, 264, 11450, 372, 4007, 722, 935, 420, 43492], "temperature": 0.0, "avg_logprob": -0.1934251116033186, "compression_ratio": 1.5416666666666667, "no_speech_prob": 5.071682608104311e-05}, {"id": 114, "seek": 82480, "start": 831.56, "end": 841.92, "text": " enabled code like the optimal memcpy implementation or trace point patch size is retained by", "tokens": [15172, 3089, 411, 264, 16252, 1334, 66, 8200, 11420, 420, 13508, 935, 9972, 2744, 307, 33438, 538], "temperature": 0.0, "avg_logprob": -0.1934251116033186, "compression_ratio": 1.5416666666666667, "no_speech_prob": 5.071682608104311e-05}, {"id": 115, "seek": 82480, "start": 841.92, "end": 851.5999999999999, "text": " putting relevant kept directives and relevant sections in the linker script.", "tokens": [3372, 7340, 4305, 2047, 1539, 293, 7340, 10863, 294, 264, 2113, 260, 5755, 13], "temperature": 0.0, "avg_logprob": -0.1934251116033186, "compression_ratio": 1.5416666666666667, "no_speech_prob": 5.071682608104311e-05}, {"id": 116, "seek": 85160, "start": 851.6, "end": 861.4, "text": " The kernel L file built with most symbols hidden is roughly 4.3 megabytes in size compared", "tokens": [440, 28256, 441, 3991, 3094, 365, 881, 16944, 7633, 307, 9810, 1017, 13, 18, 10816, 24538, 294, 2744, 5347], "temperature": 0.0, "avg_logprob": -0.182098630874876, "compression_ratio": 1.4076086956521738, "no_speech_prob": 6.97486029821448e-05}, {"id": 117, "seek": 85160, "start": 861.4, "end": 867.28, "text": " to 6.7 which is reduction of around 40%.", "tokens": [281, 1386, 13, 22, 597, 307, 11004, 295, 926, 3356, 6856], "temperature": 0.0, "avg_logprob": -0.182098630874876, "compression_ratio": 1.4076086956521738, "no_speech_prob": 6.97486029821448e-05}, {"id": 118, "seek": 85160, "start": 867.28, "end": 873.0400000000001, "text": " This great reduction stems from the fact that the standard library standard C++ library", "tokens": [639, 869, 11004, 27600, 490, 264, 1186, 300, 264, 3832, 6405, 3832, 383, 25472, 6405], "temperature": 0.0, "avg_logprob": -0.182098630874876, "compression_ratio": 1.4076086956521738, "no_speech_prob": 6.97486029821448e-05}, {"id": 119, "seek": 85160, "start": 873.0400000000001, "end": 876.44, "text": " is no longer linked with whole archive.", "tokens": [307, 572, 2854, 9408, 365, 1379, 23507, 13], "temperature": 0.0, "avg_logprob": -0.182098630874876, "compression_ratio": 1.4076086956521738, "no_speech_prob": 6.97486029821448e-05}, {"id": 120, "seek": 87644, "start": 876.44, "end": 883.84, "text": " The symbol table is way smaller and unused code is garbage collected.", "tokens": [440, 5986, 3199, 307, 636, 4356, 293, 44383, 3089, 307, 14150, 11087, 13], "temperature": 0.0, "avg_logprob": -0.23276786198691715, "compression_ratio": 1.5222222222222221, "no_speech_prob": 5.46230876352638e-05}, {"id": 121, "seek": 87644, "start": 883.84, "end": 892.6800000000001, "text": " Please note that the resulting kernel is still universal as it exports all glipsy symbols", "tokens": [2555, 3637, 300, 264, 16505, 28256, 307, 920, 11455, 382, 309, 31428, 439, 1563, 2600, 88, 16944], "temperature": 0.0, "avg_logprob": -0.23276786198691715, "compression_ratio": 1.5222222222222221, "no_speech_prob": 5.46230876352638e-05}, {"id": 122, "seek": 87644, "start": 892.6800000000001, "end": 896.32, "text": " and includes all the device drivers.", "tokens": [293, 5974, 439, 264, 4302, 11590, 13], "temperature": 0.0, "avg_logprob": -0.23276786198691715, "compression_ratio": 1.5222222222222221, "no_speech_prob": 5.46230876352638e-05}, {"id": 123, "seek": 87644, "start": 896.32, "end": 903.36, "text": " And as a result of this size reduction kernel boots also a little bit faster.", "tokens": [400, 382, 257, 1874, 295, 341, 2744, 11004, 28256, 15194, 611, 257, 707, 857, 4663, 13], "temperature": 0.0, "avg_logprob": -0.23276786198691715, "compression_ratio": 1.5222222222222221, "no_speech_prob": 5.46230876352638e-05}, {"id": 124, "seek": 90336, "start": 903.36, "end": 911.5600000000001, "text": " Well this all sounds great so one may ask why not hide most symbols and standard C++", "tokens": [1042, 341, 439, 3263, 869, 370, 472, 815, 1029, 983, 406, 6479, 881, 16944, 293, 3832, 383, 25472], "temperature": 0.0, "avg_logprob": -0.2145836673565765, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0005390515434555709}, {"id": 125, "seek": 90336, "start": 911.5600000000001, "end": 913.72, "text": " library by default.", "tokens": [6405, 538, 7576, 13], "temperature": 0.0, "avg_logprob": -0.2145836673565765, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0005390515434555709}, {"id": 126, "seek": 90336, "start": 913.72, "end": 922.24, "text": " The problem is that there are around 35 unit tests and some also applications that were", "tokens": [440, 1154, 307, 300, 456, 366, 926, 6976, 4985, 6921, 293, 512, 611, 5821, 300, 645], "temperature": 0.0, "avg_logprob": -0.2145836673565765, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0005390515434555709}, {"id": 127, "seek": 90336, "start": 922.24, "end": 933.32, "text": " written in the past that rely on C++ symbols and they basically would not run if we hide", "tokens": [3720, 294, 264, 1791, 300, 10687, 322, 383, 25472, 16944, 293, 436, 1936, 576, 406, 1190, 498, 321, 6479], "temperature": 0.0, "avg_logprob": -0.2145836673565765, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0005390515434555709}, {"id": 128, "seek": 93332, "start": 933.32, "end": 935.6800000000001, "text": " all of those symbols.", "tokens": [439, 295, 729, 16944, 13], "temperature": 0.0, "avg_logprob": -0.18822223909439578, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.00022013821580912918}, {"id": 129, "seek": 93332, "start": 935.6800000000001, "end": 945.12, "text": " And those are basically used to, they were implemented in the past and it was done sometimes", "tokens": [400, 729, 366, 1936, 1143, 281, 11, 436, 645, 12270, 294, 264, 1791, 293, 309, 390, 1096, 2171], "temperature": 0.0, "avg_logprob": -0.18822223909439578, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.00022013821580912918}, {"id": 130, "seek": 93332, "start": 945.12, "end": 948.7600000000001, "text": " out of convenience, sometimes basically out of necessity.", "tokens": [484, 295, 19283, 11, 2171, 1936, 484, 295, 24217, 13], "temperature": 0.0, "avg_logprob": -0.18822223909439578, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.00022013821580912918}, {"id": 131, "seek": 93332, "start": 948.7600000000001, "end": 957.08, "text": " So to address this specific problem we will need to expose some of those OSVC++ symbols", "tokens": [407, 281, 2985, 341, 2685, 1154, 321, 486, 643, 281, 19219, 512, 295, 729, 12731, 53, 34, 25472, 16944], "temperature": 0.0, "avg_logprob": -0.18822223909439578, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.00022013821580912918}, {"id": 132, "seek": 95708, "start": 957.08, "end": 963.48, "text": " as the API expressed in C.", "tokens": [382, 264, 9362, 12675, 294, 383, 13], "temperature": 0.0, "avg_logprob": -0.32446282084395245, "compression_ratio": 1.184873949579832, "no_speech_prob": 0.00017415790352970362}, {"id": 133, "seek": 95708, "start": 963.48, "end": 974.64, "text": " So we'll basically define very simple C wrapper functions that we'll call those C++ code.", "tokens": [407, 321, 603, 1936, 6964, 588, 2199, 383, 46906, 6828, 300, 321, 603, 818, 729, 383, 25472, 3089, 13], "temperature": 0.0, "avg_logprob": -0.32446282084395245, "compression_ratio": 1.184873949579832, "no_speech_prob": 0.00017415790352970362}, {"id": 134, "seek": 95708, "start": 974.64, "end": 981.6400000000001, "text": " Well I can use this one.", "tokens": [1042, 286, 393, 764, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.32446282084395245, "compression_ratio": 1.184873949579832, "no_speech_prob": 0.00017415790352970362}, {"id": 135, "seek": 98164, "start": 981.64, "end": 988.92, "text": " A good example of modularity improvements made in the release 057 is extracting ZFS", "tokens": [316, 665, 1365, 295, 31111, 507, 13797, 1027, 294, 264, 4374, 1958, 19004, 307, 49844, 1176, 29318], "temperature": 0.0, "avg_logprob": -0.22894142043422644, "compression_ratio": 1.385786802030457, "no_speech_prob": 0.00022007930965628475}, {"id": 136, "seek": 98164, "start": 988.92, "end": 995.08, "text": " code out of kernel as a dynamically linked library, LibSolarisSO, which effectively is", "tokens": [3089, 484, 295, 28256, 382, 257, 43492, 9408, 6405, 11, 15834, 50, 15276, 271, 17188, 11, 597, 8659, 307], "temperature": 0.0, "avg_logprob": -0.22894142043422644, "compression_ratio": 1.385786802030457, "no_speech_prob": 0.00022007930965628475}, {"id": 137, "seek": 98164, "start": 995.08, "end": 997.4399999999999, "text": " a new module.", "tokens": [257, 777, 10088, 13], "temperature": 0.0, "avg_logprob": -0.22894142043422644, "compression_ratio": 1.385786802030457, "no_speech_prob": 0.00022007930965628475}, {"id": 138, "seek": 98164, "start": 997.4399999999999, "end": 1005.28, "text": " To accomplish that we changed the main OSV make file to build new artifact, LibSolarisSO", "tokens": [1407, 9021, 300, 321, 3105, 264, 2135, 12731, 53, 652, 3991, 281, 1322, 777, 34806, 11, 15834, 50, 15276, 271, 17188], "temperature": 0.0, "avg_logprob": -0.22894142043422644, "compression_ratio": 1.385786802030457, "no_speech_prob": 0.00022007930965628475}, {"id": 139, "seek": 100528, "start": 1005.28, "end": 1011.8, "text": " out of ZFS and Solaris file sets in the make file, which basically used to be linked into", "tokens": [484, 295, 1176, 29318, 293, 7026, 27489, 3991, 6352, 294, 264, 652, 3991, 11, 597, 1936, 1143, 281, 312, 9408, 666], "temperature": 0.0, "avg_logprob": -0.20022382615487785, "compression_ratio": 1.5, "no_speech_prob": 0.00019586631970014423}, {"id": 140, "seek": 100528, "start": 1011.8, "end": 1013.24, "text": " kernel.", "tokens": [28256, 13], "temperature": 0.0, "avg_logprob": -0.20022382615487785, "compression_ratio": 1.5, "no_speech_prob": 0.00019586631970014423}, {"id": 141, "seek": 100528, "start": 1013.24, "end": 1022.28, "text": " The new library has to be linked with a bind now flag and OSV specific OSVmlog node to", "tokens": [440, 777, 6405, 575, 281, 312, 9408, 365, 257, 14786, 586, 7166, 293, 12731, 53, 2685, 12731, 53, 76, 4987, 9984, 281], "temperature": 0.0, "avg_logprob": -0.20022382615487785, "compression_ratio": 1.5, "no_speech_prob": 0.00019586631970014423}, {"id": 142, "seek": 100528, "start": 1022.28, "end": 1030.32, "text": " force OSV dynamic linker to resolve symbols eagerly and populate the mappings eagerly", "tokens": [3464, 12731, 53, 8546, 2113, 260, 281, 14151, 16944, 18259, 356, 293, 1665, 5256, 264, 463, 28968, 18259, 356], "temperature": 0.0, "avg_logprob": -0.20022382615487785, "compression_ratio": 1.5, "no_speech_prob": 0.00019586631970014423}, {"id": 143, "seek": 100528, "start": 1030.32, "end": 1031.32, "text": " as well.", "tokens": [382, 731, 13], "temperature": 0.0, "avg_logprob": -0.20022382615487785, "compression_ratio": 1.5, "no_speech_prob": 0.00019586631970014423}, {"id": 144, "seek": 103132, "start": 1031.32, "end": 1038.08, "text": " This basically is done to prevent page faults that would lead to potential deadlocks as the", "tokens": [639, 1936, 307, 1096, 281, 4871, 3028, 36090, 300, 576, 1477, 281, 3995, 3116, 34896, 382, 264], "temperature": 0.0, "avg_logprob": -0.20040418207645416, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00025373269454576075}, {"id": 145, "seek": 103132, "start": 1038.08, "end": 1042.48, "text": " libraries loaded and initialized.", "tokens": [15148, 13210, 293, 5883, 1602, 13], "temperature": 0.0, "avg_logprob": -0.20040418207645416, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00025373269454576075}, {"id": 146, "seek": 103132, "start": 1042.48, "end": 1050.8799999999999, "text": " The init function ZFS initialized called upon the libraries loaded creates necessary", "tokens": [440, 3157, 2445, 1176, 29318, 5883, 1602, 1219, 3564, 264, 15148, 13210, 7829, 4818], "temperature": 0.0, "avg_logprob": -0.20040418207645416, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00025373269454576075}, {"id": 147, "seek": 103132, "start": 1050.8799999999999, "end": 1058.12, "text": " thread pools and registers various callbacks so that the page cache arc, which is adaptive", "tokens": [7207, 28688, 293, 38351, 3683, 818, 17758, 370, 300, 264, 3028, 19459, 10346, 11, 597, 307, 27912], "temperature": 0.0, "avg_logprob": -0.20040418207645416, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00025373269454576075}, {"id": 148, "seek": 105812, "start": 1058.12, "end": 1067.7199999999998, "text": " replacement cache from ZFS and ZFS depth driver can interact with relevant code in", "tokens": [14419, 19459, 490, 1176, 29318, 293, 1176, 29318, 7161, 6787, 393, 4648, 365, 7340, 3089, 294], "temperature": 0.0, "avg_logprob": -0.21801935342641976, "compression_ratio": 1.382198952879581, "no_speech_prob": 0.00018810165056493133}, {"id": 149, "seek": 105812, "start": 1067.7199999999998, "end": 1070.4399999999998, "text": " the ZFS library.", "tokens": [264, 1176, 29318, 6405, 13], "temperature": 0.0, "avg_logprob": -0.21801935342641976, "compression_ratio": 1.382198952879581, "no_speech_prob": 0.00018810165056493133}, {"id": 150, "seek": 105812, "start": 1070.4399999999998, "end": 1078.84, "text": " On another hand, the OSV kernel needs to expose some around 100 symbols that provides some", "tokens": [1282, 1071, 1011, 11, 264, 12731, 53, 28256, 2203, 281, 19219, 512, 926, 2319, 16944, 300, 6417, 512], "temperature": 0.0, "avg_logprob": -0.21801935342641976, "compression_ratio": 1.382198952879581, "no_speech_prob": 0.00018810165056493133}, {"id": 151, "seek": 105812, "start": 1078.84, "end": 1085.56, "text": " internal free BSD originating functionality that LibSolarisSO depends on.", "tokens": [6920, 1737, 363, 23969, 4957, 990, 14980, 300, 15834, 50, 15276, 271, 17188, 5946, 322, 13], "temperature": 0.0, "avg_logprob": -0.21801935342641976, "compression_ratio": 1.382198952879581, "no_speech_prob": 0.00018810165056493133}, {"id": 152, "seek": 108556, "start": 1085.56, "end": 1093.6399999999999, "text": " OSV borrowed some code from free BSD and actually a good chunk of this code was actually implementation", "tokens": [12731, 53, 26805, 512, 3089, 490, 1737, 363, 23969, 293, 767, 257, 665, 16635, 295, 341, 3089, 390, 767, 11420], "temperature": 0.0, "avg_logprob": -0.26285560925801593, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.0008390969014726579}, {"id": 153, "seek": 108556, "start": 1093.6399999999999, "end": 1098.0, "text": " of ZFS, which right now is outside of the kernel.", "tokens": [295, 1176, 29318, 11, 597, 558, 586, 307, 2380, 295, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.26285560925801593, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.0008390969014726579}, {"id": 154, "seek": 108556, "start": 1098.0, "end": 1107.32, "text": " Finally, the virtual file system bootstrap code needs to dynamically load LibSolarisSO", "tokens": [6288, 11, 264, 6374, 3991, 1185, 11450, 372, 4007, 3089, 2203, 281, 43492, 3677, 15834, 50, 15276, 271, 17188], "temperature": 0.0, "avg_logprob": -0.26285560925801593, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.0008390969014726579}, {"id": 155, "seek": 110732, "start": 1107.32, "end": 1117.6, "text": " from bootFS or read-only-FS using DL open before mounting ZFS file system.", "tokens": [490, 11450, 29318, 420, 1401, 12, 25202, 12, 29318, 1228, 413, 43, 1269, 949, 22986, 1176, 29318, 3991, 1185, 13], "temperature": 0.0, "avg_logprob": -0.19784267649931067, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.00021286672563292086}, {"id": 156, "seek": 110732, "start": 1117.6, "end": 1124.08, "text": " There are at least three advantages of moving ZFS to a separate library.", "tokens": [821, 366, 412, 1935, 1045, 14906, 295, 2684, 1176, 29318, 281, 257, 4994, 6405, 13], "temperature": 0.0, "avg_logprob": -0.19784267649931067, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.00021286672563292086}, {"id": 157, "seek": 110732, "start": 1124.08, "end": 1130.24, "text": " First off, ZFS can be optionally loaded from another file system like bootFS or read-only-FS", "tokens": [2386, 766, 11, 1176, 29318, 393, 312, 3614, 379, 13210, 490, 1071, 3991, 1185, 411, 11450, 29318, 420, 1401, 12, 25202, 12, 29318], "temperature": 0.0, "avg_logprob": -0.19784267649931067, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.00021286672563292086}, {"id": 158, "seek": 110732, "start": 1130.24, "end": 1135.9199999999998, "text": " partition on the same disk or another disk and I will actually discuss that in more detail", "tokens": [24808, 322, 264, 912, 12355, 420, 1071, 12355, 293, 286, 486, 767, 2248, 300, 294, 544, 2607], "temperature": 0.0, "avg_logprob": -0.19784267649931067, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.00021286672563292086}, {"id": 159, "seek": 113592, "start": 1135.92, "end": 1140.0800000000002, "text": " in one of the upcoming slides later.", "tokens": [294, 472, 295, 264, 11500, 9788, 1780, 13], "temperature": 0.0, "avg_logprob": -0.17218923568725586, "compression_ratio": 1.3891402714932126, "no_speech_prob": 0.00048389891162514687}, {"id": 160, "seek": 113592, "start": 1140.0800000000002, "end": 1148.04, "text": " Then also, kernel gets smaller by around 800 kilobytes and effectively becomes 3.6 megabytes", "tokens": [1396, 611, 11, 28256, 2170, 4356, 538, 926, 13083, 5128, 996, 43673, 293, 8659, 3643, 805, 13, 21, 10816, 24538], "temperature": 0.0, "avg_logprob": -0.17218923568725586, "compression_ratio": 1.3891402714932126, "no_speech_prob": 0.00048389891162514687}, {"id": 161, "seek": 113592, "start": 1148.04, "end": 1149.04, "text": " in size.", "tokens": [294, 2744, 13], "temperature": 0.0, "avg_logprob": -0.17218923568725586, "compression_ratio": 1.3891402714932126, "no_speech_prob": 0.00048389891162514687}, {"id": 162, "seek": 113592, "start": 1149.04, "end": 1154.92, "text": " Finally, there are at least 10 fewer threads that are needed to run non-ZFS image.", "tokens": [6288, 11, 456, 366, 412, 1935, 1266, 13366, 19314, 300, 366, 2978, 281, 1190, 2107, 12, 57, 29318, 3256, 13], "temperature": 0.0, "avg_logprob": -0.17218923568725586, "compression_ratio": 1.3891402714932126, "no_speech_prob": 0.00048389891162514687}, {"id": 163, "seek": 113592, "start": 1154.92, "end": 1162.4, "text": " So for example, when you run read-only-FS image on OSV, with one CPU it only requires", "tokens": [407, 337, 1365, 11, 562, 291, 1190, 1401, 12, 25202, 12, 29318, 3256, 322, 12731, 53, 11, 365, 472, 13199, 309, 787, 7029], "temperature": 0.0, "avg_logprob": -0.17218923568725586, "compression_ratio": 1.3891402714932126, "no_speech_prob": 0.00048389891162514687}, {"id": 164, "seek": 116240, "start": 1162.4, "end": 1179.72, "text": " 25 threads.", "tokens": [3552, 19314, 13], "temperature": 0.0, "avg_logprob": -0.2616967095269097, "compression_ratio": 1.2885906040268456, "no_speech_prob": 0.0007426296942867339}, {"id": 165, "seek": 116240, "start": 1179.72, "end": 1185.24, "text": " The regular Linux Jalipsi apps should run fine on kernel with most symbols and standard", "tokens": [440, 3890, 18734, 508, 304, 2600, 72, 7733, 820, 1190, 2489, 322, 28256, 365, 881, 16944, 293, 3832], "temperature": 0.0, "avg_logprob": -0.2616967095269097, "compression_ratio": 1.2885906040268456, "no_speech_prob": 0.0007426296942867339}, {"id": 166, "seek": 116240, "start": 1185.24, "end": 1192.0800000000002, "text": " C++ library hidden, but unfortunately many unit tests which I mentioned and various internal", "tokens": [383, 25472, 6405, 7633, 11, 457, 7015, 867, 4985, 6921, 597, 286, 2835, 293, 3683, 6920], "temperature": 0.0, "avg_logprob": -0.2616967095269097, "compression_ratio": 1.2885906040268456, "no_speech_prob": 0.0007426296942867339}, {"id": 167, "seek": 119208, "start": 1192.08, "end": 1200.8, "text": " OSV apps which are written mostly in C++, so-called modules, do not, as they had been", "tokens": [12731, 53, 7733, 597, 366, 3720, 5240, 294, 383, 25472, 11, 370, 12, 11880, 16679, 11, 360, 406, 11, 382, 436, 632, 668], "temperature": 0.0, "avg_logprob": -0.1989057607818068, "compression_ratio": 1.368421052631579, "no_speech_prob": 8.716746378922835e-05}, {"id": 168, "seek": 119208, "start": 1200.8, "end": 1208.1999999999998, "text": " coded in the past to use those internal C++ symbols from the kernel and we have to do", "tokens": [34874, 294, 264, 1791, 281, 764, 729, 6920, 383, 25472, 16944, 490, 264, 28256, 293, 321, 362, 281, 360], "temperature": 0.0, "avg_logprob": -0.1989057607818068, "compression_ratio": 1.368421052631579, "no_speech_prob": 8.716746378922835e-05}, {"id": 169, "seek": 119208, "start": 1208.1999999999998, "end": 1211.4399999999998, "text": " something to deal with that problem.", "tokens": [746, 281, 2028, 365, 300, 1154, 13], "temperature": 0.0, "avg_logprob": -0.1989057607818068, "compression_ratio": 1.368421052631579, "no_speech_prob": 8.716746378922835e-05}, {"id": 170, "seek": 121144, "start": 1211.44, "end": 1223.0, "text": " So in the release 057 we introduced some of the C wrapper API which are basically in C", "tokens": [407, 294, 264, 4374, 1958, 19004, 321, 7268, 512, 295, 264, 383, 46906, 9362, 597, 366, 1936, 294, 383], "temperature": 0.0, "avg_logprob": -0.24381006524917928, "compression_ratio": 1.3356643356643356, "no_speech_prob": 6.506362115032971e-05}, {"id": 171, "seek": 121144, "start": 1223.0, "end": 1233.76, "text": " style convention and then we changed those modules to use those C wrapper functions instead", "tokens": [3758, 10286, 293, 550, 321, 3105, 729, 16679, 281, 764, 729, 383, 46906, 6828, 2602], "temperature": 0.0, "avg_logprob": -0.24381006524917928, "compression_ratio": 1.3356643356643356, "no_speech_prob": 6.506362115032971e-05}, {"id": 172, "seek": 121144, "start": 1233.76, "end": 1238.92, "text": " of C++ code.", "tokens": [295, 383, 25472, 3089, 13], "temperature": 0.0, "avg_logprob": -0.24381006524917928, "compression_ratio": 1.3356643356643356, "no_speech_prob": 6.506362115032971e-05}, {"id": 173, "seek": 123892, "start": 1238.92, "end": 1244.88, "text": " The benefit is that down the road we might have some newer apps or some newer modules", "tokens": [440, 5121, 307, 300, 760, 264, 3060, 321, 1062, 362, 512, 17628, 7733, 420, 512, 17628, 16679], "temperature": 0.0, "avg_logprob": -0.16546379969670222, "compression_ratio": 1.5, "no_speech_prob": 0.0003986754745710641}, {"id": 174, "seek": 123892, "start": 1244.88, "end": 1253.28, "text": " that would use those C wrapper functions and it also may make OSV more modular.", "tokens": [300, 576, 764, 729, 383, 46906, 6828, 293, 309, 611, 815, 652, 12731, 53, 544, 31111, 13], "temperature": 0.0, "avg_logprob": -0.16546379969670222, "compression_ratio": 1.5, "no_speech_prob": 0.0003986754745710641}, {"id": 175, "seek": 123892, "start": 1253.28, "end": 1260.68, "text": " As you can see some of those, one of the example is, for example, OSV gets all threads which", "tokens": [1018, 291, 393, 536, 512, 295, 729, 11, 472, 295, 264, 1365, 307, 11, 337, 1365, 11, 12731, 53, 2170, 439, 19314, 597], "temperature": 0.0, "avg_logprob": -0.16546379969670222, "compression_ratio": 1.5, "no_speech_prob": 0.0003986754745710641}, {"id": 176, "seek": 126068, "start": 1260.68, "end": 1272.48, "text": " is basically a function that gives a thread safe way to color, to iterate over threads", "tokens": [307, 1936, 257, 2445, 300, 2709, 257, 7207, 3273, 636, 281, 2017, 11, 281, 44497, 670, 19314], "temperature": 0.0, "avg_logprob": -0.31734666591737326, "compression_ratio": 1.3125, "no_speech_prob": 6.583605863852426e-05}, {"id": 177, "seek": 126068, "start": 1272.48, "end": 1281.48, "text": " which, for example, is used in an HTTP monitoring module to list all the threads.", "tokens": [597, 11, 337, 1365, 11, 307, 1143, 294, 364, 33283, 11028, 10088, 281, 1329, 439, 264, 19314, 13], "temperature": 0.0, "avg_logprob": -0.31734666591737326, "compression_ratio": 1.3125, "no_speech_prob": 6.583605863852426e-05}, {"id": 178, "seek": 128148, "start": 1281.48, "end": 1292.24, "text": " A good example of OSV specific modules that uses some internal C++ symbols is HTTP server", "tokens": [316, 665, 1365, 295, 12731, 53, 2685, 16679, 300, 4960, 512, 6920, 383, 25472, 16944, 307, 33283, 7154], "temperature": 0.0, "avg_logprob": -0.15483883023262024, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.00016462722851429135}, {"id": 179, "seek": 128148, "start": 1292.24, "end": 1293.48, "text": " monitoring.", "tokens": [11028, 13], "temperature": 0.0, "avg_logprob": -0.15483883023262024, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.00016462722851429135}, {"id": 180, "seek": 128148, "start": 1293.48, "end": 1301.68, "text": " We modify the HTTP monitoring module to stop using internal kernel C++ API.", "tokens": [492, 16927, 264, 33283, 11028, 10088, 281, 1590, 1228, 6920, 28256, 383, 25472, 9362, 13], "temperature": 0.0, "avg_logprob": -0.15483883023262024, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.00016462722851429135}, {"id": 181, "seek": 128148, "start": 1301.68, "end": 1307.68, "text": " We do it by replacing some of the calls to internal C++ symbols with this new module C", "tokens": [492, 360, 309, 538, 19139, 512, 295, 264, 5498, 281, 6920, 383, 25472, 16944, 365, 341, 777, 10088, 383], "temperature": 0.0, "avg_logprob": -0.15483883023262024, "compression_ratio": 1.5529411764705883, "no_speech_prob": 0.00016462722851429135}, {"id": 182, "seek": 130768, "start": 1307.68, "end": 1314.48, "text": " style API, symbols from the slide which you saw on the slide before, for example, SCAD", "tokens": [3758, 9362, 11, 16944, 490, 264, 4137, 597, 291, 1866, 322, 264, 4137, 949, 11, 337, 1365, 11, 9028, 6112], "temperature": 0.0, "avg_logprob": -0.2749486650739397, "compression_ratio": 1.4363636363636363, "no_speech_prob": 0.0003087428049184382}, {"id": 183, "seek": 130768, "start": 1314.48, "end": 1319.8, "text": " with all threads, with this new OSV get all threads function.", "tokens": [365, 439, 19314, 11, 365, 341, 777, 12731, 53, 483, 439, 19314, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2749486650739397, "compression_ratio": 1.4363636363636363, "no_speech_prob": 0.0003087428049184382}, {"id": 184, "seek": 130768, "start": 1319.8, "end": 1329.44, "text": " In other scenarios we fall back to standard G-Lipsy API, for example, the monitoring app", "tokens": [682, 661, 15077, 321, 2100, 646, 281, 3832, 460, 12, 43, 2600, 88, 9362, 11, 337, 1365, 11, 264, 11028, 724], "temperature": 0.0, "avg_logprob": -0.2749486650739397, "compression_ratio": 1.4363636363636363, "no_speech_prob": 0.0003087428049184382}, {"id": 185, "seek": 132944, "start": 1329.44, "end": 1338.72, "text": " used to call OSV current mounts and right now it uses basically getMTNT and function", "tokens": [1143, 281, 818, 12731, 53, 2190, 40982, 293, 558, 586, 309, 4960, 1936, 483, 44, 51, 30817, 293, 2445], "temperature": 0.0, "avg_logprob": -0.24953809697577295, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.000158685288624838}, {"id": 186, "seek": 132944, "start": 1338.72, "end": 1349.16, "text": " and related ones.", "tokens": [293, 4077, 2306, 13], "temperature": 0.0, "avg_logprob": -0.24953809697577295, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.000158685288624838}, {"id": 187, "seek": 132944, "start": 1349.16, "end": 1357.44, "text": " So the release 0.57 introduced another built mechanism that allows creating a custom kernel", "tokens": [407, 264, 4374, 1958, 13, 19004, 7268, 1071, 3094, 7513, 300, 4045, 4084, 257, 2375, 28256], "temperature": 0.0, "avg_logprob": -0.24953809697577295, "compression_ratio": 1.3287671232876712, "no_speech_prob": 0.000158685288624838}, {"id": 188, "seek": 135744, "start": 1357.44, "end": 1362.96, "text": " with a specific list of drivers intended to target given hypervisor.", "tokens": [365, 257, 2685, 1329, 295, 11590, 10226, 281, 3779, 2212, 9848, 16457, 13], "temperature": 0.0, "avg_logprob": -0.19548988342285156, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00022071014973334968}, {"id": 189, "seek": 135744, "start": 1362.96, "end": 1370.0800000000002, "text": " Obviously such kernel benefits from even smaller size and better security as all unneeded", "tokens": [7580, 1270, 28256, 5311, 490, 754, 4356, 2744, 293, 1101, 3825, 382, 439, 517, 716, 37679], "temperature": 0.0, "avg_logprob": -0.19548988342285156, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00022071014973334968}, {"id": 190, "seek": 135744, "start": 1370.0800000000002, "end": 1375.48, "text": " code, all unneeded drivers are basically excluded during the build process.", "tokens": [3089, 11, 439, 517, 716, 37679, 11590, 366, 1936, 29486, 1830, 264, 1322, 1399, 13], "temperature": 0.0, "avg_logprob": -0.19548988342285156, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00022071014973334968}, {"id": 191, "seek": 135744, "start": 1375.48, "end": 1382.3600000000001, "text": " In essence we introduce a new build script and makefile parameter, driver, driver's profile.", "tokens": [682, 12801, 321, 5366, 257, 777, 1322, 5755, 293, 652, 69, 794, 13075, 11, 6787, 11, 6787, 311, 7964, 13], "temperature": 0.0, "avg_logprob": -0.19548988342285156, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00022071014973334968}, {"id": 192, "seek": 138236, "start": 1382.36, "end": 1389.24, "text": " This new parameter is intended to specify a driver profile which is simply a list of", "tokens": [639, 777, 13075, 307, 10226, 281, 16500, 257, 6787, 7964, 597, 307, 2935, 257, 1329, 295], "temperature": 0.0, "avg_logprob": -0.14965446067578864, "compression_ratio": 1.4974358974358974, "no_speech_prob": 2.831656274793204e-05}, {"id": 193, "seek": 138236, "start": 1389.24, "end": 1399.32, "text": " device drivers to be linked into the kernel and some extra functionality like PCI or ACPI,", "tokens": [4302, 11590, 281, 312, 9408, 666, 264, 28256, 293, 512, 2857, 14980, 411, 6465, 40, 420, 8157, 31701, 11], "temperature": 0.0, "avg_logprob": -0.14965446067578864, "compression_ratio": 1.4974358974358974, "no_speech_prob": 2.831656274793204e-05}, {"id": 194, "seek": 138236, "start": 1399.32, "end": 1401.76, "text": " these drivers depend on.", "tokens": [613, 11590, 5672, 322, 13], "temperature": 0.0, "avg_logprob": -0.14965446067578864, "compression_ratio": 1.4974358974358974, "no_speech_prob": 2.831656274793204e-05}, {"id": 195, "seek": 138236, "start": 1401.76, "end": 1410.6399999999999, "text": " Each profile is specified in a tiny include files with the MK extension under conf profiles", "tokens": [6947, 7964, 307, 22206, 294, 257, 5870, 4090, 7098, 365, 264, 30770, 10320, 833, 1497, 23693], "temperature": 0.0, "avg_logprob": -0.14965446067578864, "compression_ratio": 1.4974358974358974, "no_speech_prob": 2.831656274793204e-05}, {"id": 196, "seek": 141064, "start": 1410.64, "end": 1419.4, "text": " arch directory and included by the main makefile as requested by the driver profile parameter.", "tokens": [3912, 21120, 293, 5556, 538, 264, 2135, 652, 69, 794, 382, 16436, 538, 264, 6787, 7964, 13075, 13], "temperature": 0.0, "avg_logprob": -0.20654234810480995, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.00017295377620030195}, {"id": 197, "seek": 141064, "start": 1419.4, "end": 1428.2, "text": " The main makefile has a number of basically if expressions and add conditionally given", "tokens": [440, 2135, 652, 69, 794, 575, 257, 1230, 295, 1936, 498, 15277, 293, 909, 4188, 379, 2212], "temperature": 0.0, "avg_logprob": -0.20654234810480995, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.00017295377620030195}, {"id": 198, "seek": 141064, "start": 1428.2, "end": 1437.8000000000002, "text": " driver object to the linked object list depending on the value of 0 or 1 of the given conf drivers", "tokens": [6787, 2657, 281, 264, 9408, 2657, 1329, 5413, 322, 264, 2158, 295, 1958, 420, 502, 295, 264, 2212, 1497, 11590], "temperature": 0.0, "avg_logprob": -0.20654234810480995, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.00017295377620030195}, {"id": 199, "seek": 143780, "start": 1437.8, "end": 1443.0, "text": " parameter specified in that include file.", "tokens": [13075, 22206, 294, 300, 4090, 3991, 13], "temperature": 0.0, "avg_logprob": -0.18613867828811426, "compression_ratio": 1.5846153846153845, "no_speech_prob": 8.079263352556154e-05}, {"id": 200, "seek": 143780, "start": 1443.0, "end": 1450.48, "text": " The benefit of using drivers as are most profound when they are used with when you build kernel", "tokens": [440, 5121, 295, 1228, 11590, 382, 366, 881, 14382, 562, 436, 366, 1143, 365, 562, 291, 1322, 28256], "temperature": 0.0, "avg_logprob": -0.18613867828811426, "compression_ratio": 1.5846153846153845, "no_speech_prob": 8.079263352556154e-05}, {"id": 201, "seek": 143780, "start": 1450.48, "end": 1457.72, "text": " and hide most of the symbols as I talked about in one of the previous slides.", "tokens": [293, 6479, 881, 295, 264, 16944, 382, 286, 2825, 466, 294, 472, 295, 264, 3894, 9788, 13], "temperature": 0.0, "avg_logprob": -0.18613867828811426, "compression_ratio": 1.5846153846153845, "no_speech_prob": 8.079263352556154e-05}, {"id": 202, "seek": 143780, "start": 1457.72, "end": 1464.6, "text": " It's also possible to enable or disable individual drivers on top of profiles as profiles are", "tokens": [467, 311, 611, 1944, 281, 9528, 420, 28362, 2609, 11590, 322, 1192, 295, 23693, 382, 23693, 366], "temperature": 0.0, "avg_logprob": -0.18613867828811426, "compression_ratio": 1.5846153846153845, "no_speech_prob": 8.079263352556154e-05}, {"id": 203, "seek": 146460, "start": 1464.6, "end": 1471.0, "text": " basically list of the drivers but the number of configuration parameters that where you", "tokens": [1936, 1329, 295, 264, 11590, 457, 264, 1230, 295, 11694, 9834, 300, 689, 291], "temperature": 0.0, "avg_logprob": -0.24299364241342697, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00021664179803337902}, {"id": 204, "seek": 146460, "start": 1471.0, "end": 1476.56, "text": " can specifically for example include, which I'm going to be actually showing here, you", "tokens": [393, 4682, 337, 1365, 4090, 11, 597, 286, 478, 516, 281, 312, 767, 4099, 510, 11, 291], "temperature": 0.0, "avg_logprob": -0.24299364241342697, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00021664179803337902}, {"id": 205, "seek": 146460, "start": 1476.56, "end": 1482.12, "text": " can include specific driver.", "tokens": [393, 4090, 2685, 6787, 13], "temperature": 0.0, "avg_logprob": -0.24299364241342697, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00021664179803337902}, {"id": 206, "seek": 146460, "start": 1482.12, "end": 1486.9199999999998, "text": " One may ask a question why not use something more standard like when you config like for", "tokens": [1485, 815, 1029, 257, 1168, 983, 406, 764, 746, 544, 3832, 411, 562, 291, 6662, 411, 337], "temperature": 0.0, "avg_logprob": -0.24299364241342697, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00021664179803337902}, {"id": 207, "seek": 148692, "start": 1486.92, "end": 1496.52, "text": " example what Unicraft does, well actually OSV has this specific build system and I didn't", "tokens": [1365, 437, 1156, 299, 4469, 775, 11, 731, 767, 12731, 53, 575, 341, 2685, 1322, 1185, 293, 286, 994, 380], "temperature": 0.0, "avg_logprob": -0.1863462020610941, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0003847105544991791}, {"id": 208, "seek": 148692, "start": 1496.52, "end": 1503.2, "text": " want to basically now introduce another way of doing things so that's where we basically", "tokens": [528, 281, 1936, 586, 5366, 1071, 636, 295, 884, 721, 370, 300, 311, 689, 321, 1936], "temperature": 0.0, "avg_logprob": -0.1863462020610941, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0003847105544991791}, {"id": 209, "seek": 148692, "start": 1503.2, "end": 1514.2, "text": " script build uses the various effectively parameters to for example to hide symbols or", "tokens": [5755, 1322, 4960, 264, 3683, 8659, 9834, 281, 337, 1365, 281, 6479, 16944, 420], "temperature": 0.0, "avg_logprob": -0.1863462020610941, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0003847105544991791}, {"id": 210, "seek": 151420, "start": 1514.2, "end": 1521.24, "text": " specify specific driver profile or list of other parameters.", "tokens": [16500, 2685, 6787, 7964, 420, 1329, 295, 661, 9834, 13], "temperature": 0.0, "avg_logprob": -0.13547732613303445, "compression_ratio": 1.3008849557522124, "no_speech_prob": 6.870787910884246e-05}, {"id": 211, "seek": 151420, "start": 1521.24, "end": 1537.88, "text": " So as you can see in the first example we built default kernel with all symbols hidden", "tokens": [407, 382, 291, 393, 536, 294, 264, 700, 1365, 321, 3094, 7576, 28256, 365, 439, 16944, 7633], "temperature": 0.0, "avg_logprob": -0.13547732613303445, "compression_ratio": 1.3008849557522124, "no_speech_prob": 6.870787910884246e-05}, {"id": 212, "seek": 153788, "start": 1537.88, "end": 1546.3600000000001, "text": " and the resulting kernel is around 36, 3.6 megabytes.", "tokens": [293, 264, 16505, 28256, 307, 926, 8652, 11, 805, 13, 21, 10816, 24538, 13], "temperature": 0.0, "avg_logprob": -0.20548878018818204, "compression_ratio": 1.4567901234567902, "no_speech_prob": 4.585810165735893e-05}, {"id": 213, "seek": 153788, "start": 1546.3600000000001, "end": 1556.8000000000002, "text": " In the next example we actually use, we built kernel with the VIRTIO over PCI profiles which", "tokens": [682, 264, 958, 1365, 321, 767, 764, 11, 321, 3094, 28256, 365, 264, 691, 7740, 5422, 46, 670, 6465, 40, 23693, 597], "temperature": 0.0, "avg_logprob": -0.20548878018818204, "compression_ratio": 1.4567901234567902, "no_speech_prob": 4.585810165735893e-05}, {"id": 214, "seek": 153788, "start": 1556.8000000000002, "end": 1567.0400000000002, "text": " is like 300 kilobytes smaller and then in the third one we built kernel which is intended", "tokens": [307, 411, 6641, 5128, 996, 43673, 4356, 293, 550, 294, 264, 2636, 472, 321, 3094, 28256, 597, 307, 10226], "temperature": 0.0, "avg_logprob": -0.20548878018818204, "compression_ratio": 1.4567901234567902, "no_speech_prob": 4.585810165735893e-05}, {"id": 215, "seek": 156704, "start": 1567.04, "end": 1581.3999999999999, "text": " to for example for firecracker when we include only VIRTIO block device and networking driver", "tokens": [281, 337, 1365, 337, 2610, 10757, 23599, 562, 321, 4090, 787, 691, 7740, 5422, 46, 3461, 4302, 293, 17985, 6787], "temperature": 0.0, "avg_logprob": -0.21988695584810697, "compression_ratio": 1.5542857142857143, "no_speech_prob": 9.466394112678245e-05}, {"id": 216, "seek": 156704, "start": 1581.3999999999999, "end": 1590.36, "text": " over MMO transport and then just to see basically in a fourth one just to see how large the", "tokens": [670, 376, 18976, 5495, 293, 550, 445, 281, 536, 1936, 294, 257, 6409, 472, 445, 281, 536, 577, 2416, 264], "temperature": 0.0, "avg_logprob": -0.21988695584810697, "compression_ratio": 1.5542857142857143, "no_speech_prob": 9.466394112678245e-05}, {"id": 217, "seek": 156704, "start": 1590.36, "end": 1595.76, "text": " driver's code in OSV is when you basically use driver profiles base which is basically", "tokens": [6787, 311, 3089, 294, 12731, 53, 307, 562, 291, 1936, 764, 6787, 23693, 3096, 597, 307, 1936], "temperature": 0.0, "avg_logprob": -0.21988695584810697, "compression_ratio": 1.5542857142857143, "no_speech_prob": 9.466394112678245e-05}, {"id": 218, "seek": 159576, "start": 1595.76, "end": 1605.92, "text": " nothing, no drivers, you can see that roughly 600 kilobytes of the driver's code is roughly", "tokens": [1825, 11, 572, 11590, 11, 291, 393, 536, 300, 9810, 11849, 5128, 996, 43673, 295, 264, 6787, 311, 3089, 307, 9810], "temperature": 0.0, "avg_logprob": -0.21167302812848773, "compression_ratio": 1.6923076923076923, "no_speech_prob": 9.756454528542235e-05}, {"id": 219, "seek": 159576, "start": 1605.92, "end": 1608.32, "text": " 600 kilobytes in size.", "tokens": [11849, 5128, 996, 43673, 294, 2744, 13], "temperature": 0.0, "avg_logprob": -0.21167302812848773, "compression_ratio": 1.6923076923076923, "no_speech_prob": 9.756454528542235e-05}, {"id": 220, "seek": 159576, "start": 1608.32, "end": 1614.12, "text": " And then in the last one actually option is where you can specify, you use basically", "tokens": [400, 550, 294, 264, 1036, 472, 767, 3614, 307, 689, 291, 393, 16500, 11, 291, 764, 1936], "temperature": 0.0, "avg_logprob": -0.21167302812848773, "compression_ratio": 1.6923076923076923, "no_speech_prob": 9.756454528542235e-05}, {"id": 221, "seek": 159576, "start": 1614.12, "end": 1621.28, "text": " driver's profile and then you explicitly say which specific drivers or you know driver", "tokens": [6787, 311, 7964, 293, 550, 291, 20803, 584, 597, 2685, 11590, 420, 291, 458, 6787], "temperature": 0.0, "avg_logprob": -0.21167302812848773, "compression_ratio": 1.6923076923076923, "no_speech_prob": 9.756454528542235e-05}, {"id": 222, "seek": 162128, "start": 1621.28, "end": 1628.6, "text": " related capability like in this case ACPI, VIRTIO FS and VIRTIO NET and PV panic devices", "tokens": [4077, 13759, 411, 294, 341, 1389, 8157, 31701, 11, 691, 7740, 5422, 46, 41138, 293, 691, 7740, 5422, 46, 426, 4850, 293, 23035, 14783, 5759], "temperature": 0.0, "avg_logprob": -0.22836102758135116, "compression_ratio": 1.2922077922077921, "no_speech_prob": 0.00042866080184467137}, {"id": 223, "seek": 162128, "start": 1628.6, "end": 1634.8, "text": " you want to use.", "tokens": [291, 528, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.22836102758135116, "compression_ratio": 1.2922077922077921, "no_speech_prob": 0.00042866080184467137}, {"id": 224, "seek": 162128, "start": 1634.8, "end": 1643.16, "text": " Actually with the new release of OSV 057 we started publishing new versions of new variations", "tokens": [5135, 365, 264, 777, 4374, 295, 12731, 53, 1958, 19004, 321, 1409, 17832, 777, 9606, 295, 777, 17840], "temperature": 0.0, "avg_logprob": -0.22836102758135116, "compression_ratio": 1.2922077922077921, "no_speech_prob": 0.00042866080184467137}, {"id": 225, "seek": 164316, "start": 1643.16, "end": 1650.64, "text": " effectively of OSV kernel that correspond to this I thought you know interesting build", "tokens": [8659, 295, 12731, 53, 28256, 300, 6805, 281, 341, 286, 1194, 291, 458, 1880, 1322], "temperature": 0.0, "avg_logprob": -0.13632935610684482, "compression_ratio": 1.535294117647059, "no_speech_prob": 0.00022285673185251653}, {"id": 226, "seek": 164316, "start": 1650.64, "end": 1658.2, "text": " configuration that I just mentioned and in this example the OSV loader hidden artifacts", "tokens": [11694, 300, 286, 445, 2835, 293, 294, 341, 1365, 264, 12731, 53, 3677, 260, 7633, 24617], "temperature": 0.0, "avg_logprob": -0.13632935610684482, "compression_ratio": 1.535294117647059, "no_speech_prob": 0.00022285673185251653}, {"id": 227, "seek": 164316, "start": 1658.2, "end": 1665.92, "text": " are effectively the versions of OSV kernel built with most symbols hidden and then for", "tokens": [366, 8659, 264, 9606, 295, 12731, 53, 28256, 3094, 365, 881, 16944, 7633, 293, 550, 337], "temperature": 0.0, "avg_logprob": -0.13632935610684482, "compression_ratio": 1.535294117647059, "no_speech_prob": 0.00022285673185251653}, {"id": 228, "seek": 166592, "start": 1665.92, "end": 1679.76, "text": " example which will be at the top for both ARM and X86 and then for example right here", "tokens": [1365, 597, 486, 312, 412, 264, 1192, 337, 1293, 45209, 293, 1783, 22193, 293, 550, 337, 1365, 558, 510], "temperature": 0.0, "avg_logprob": -0.21402077596695696, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002342378575121984}, {"id": 229, "seek": 166592, "start": 1679.76, "end": 1687.5600000000002, "text": " in the second and third and fourth artifacts basically version of the kernel built for", "tokens": [294, 264, 1150, 293, 2636, 293, 6409, 24617, 1936, 3037, 295, 264, 28256, 3094, 337], "temperature": 0.0, "avg_logprob": -0.21402077596695696, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002342378575121984}, {"id": 230, "seek": 166592, "start": 1687.5600000000002, "end": 1693.68, "text": " micro VM profile which is effectively something that you would use to run OSV on Firecracker", "tokens": [4532, 18038, 7964, 597, 307, 8659, 746, 300, 291, 576, 764, 281, 1190, 12731, 53, 322, 7652, 10757, 23599], "temperature": 0.0, "avg_logprob": -0.21402077596695696, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.0002342378575121984}, {"id": 231, "seek": 169368, "start": 1693.68, "end": 1705.04, "text": " which only has VIRTIO over MMIO transport.", "tokens": [597, 787, 575, 691, 7740, 5422, 46, 670, 34191, 15167, 5495, 13], "temperature": 0.0, "avg_logprob": -0.17512919505437216, "compression_ratio": 1.29375, "no_speech_prob": 0.00012128618982387707}, {"id": 232, "seek": 169368, "start": 1705.04, "end": 1712.24, "text": " Now the release 057 introduced yet another built mechanism and that allows creation", "tokens": [823, 264, 4374, 1958, 19004, 7268, 1939, 1071, 3094, 7513, 293, 300, 4045, 8016], "temperature": 0.0, "avg_logprob": -0.17512919505437216, "compression_ratio": 1.29375, "no_speech_prob": 0.00012128618982387707}, {"id": 233, "seek": 169368, "start": 1712.24, "end": 1718.3600000000001, "text": " of a custom kernel by exporting only symbols required by a specific application.", "tokens": [295, 257, 2375, 28256, 538, 44686, 787, 16944, 4739, 538, 257, 2685, 3861, 13], "temperature": 0.0, "avg_logprob": -0.17512919505437216, "compression_ratio": 1.29375, "no_speech_prob": 0.00012128618982387707}, {"id": 234, "seek": 171836, "start": 1718.36, "end": 1724.6399999999999, "text": " The extra such kernel benefits from the fact that again it's a little bit smaller and", "tokens": [440, 2857, 1270, 28256, 5311, 490, 264, 1186, 300, 797, 309, 311, 257, 707, 857, 4356, 293], "temperature": 0.0, "avg_logprob": -0.19344233243893355, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.00010541009396547452}, {"id": 235, "seek": 171836, "start": 1724.6399999999999, "end": 1730.6399999999999, "text": " tasks offers better security as in essence all unneeded code by that specific application", "tokens": [9608, 7736, 1101, 3825, 382, 294, 12801, 439, 517, 716, 37679, 3089, 538, 300, 2685, 3861], "temperature": 0.0, "avg_logprob": -0.19344233243893355, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.00010541009396547452}, {"id": 236, "seek": 171836, "start": 1730.6399999999999, "end": 1733.36, "text": " is removed.", "tokens": [307, 7261, 13], "temperature": 0.0, "avg_logprob": -0.19344233243893355, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.00010541009396547452}, {"id": 237, "seek": 171836, "start": 1733.36, "end": 1739.76, "text": " This new mechanism relies on two scripts that analyze the built manifest, detect application", "tokens": [639, 777, 7513, 30910, 322, 732, 23294, 300, 12477, 264, 3094, 10067, 11, 5531, 3861], "temperature": 0.0, "avg_logprob": -0.19344233243893355, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.00010541009396547452}, {"id": 238, "seek": 171836, "start": 1739.76, "end": 1747.8, "text": " L files, identify symbols required from OSV kernel and finally produce the application", "tokens": [441, 7098, 11, 5876, 16944, 4739, 490, 12731, 53, 28256, 293, 2721, 5258, 264, 3861], "temperature": 0.0, "avg_logprob": -0.19344233243893355, "compression_ratio": 1.581896551724138, "no_speech_prob": 0.00010541009396547452}, {"id": 239, "seek": 174780, "start": 1747.8, "end": 1754.32, "text": " specific version script under app version script.", "tokens": [2685, 3037, 5755, 833, 724, 3037, 5755, 13], "temperature": 0.0, "avg_logprob": -0.19381345402110706, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.00021344890410546213}, {"id": 240, "seek": 174780, "start": 1754.32, "end": 1761.36, "text": " The generate app version script iterates over the manifest files produced by list manifest", "tokens": [440, 8460, 724, 3037, 5755, 17138, 1024, 670, 264, 10067, 7098, 7126, 538, 1329, 10067], "temperature": 0.0, "avg_logprob": -0.19381345402110706, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.00021344890410546213}, {"id": 241, "seek": 174780, "start": 1761.36, "end": 1769.52, "text": " files pi, identifies undefined symbols in the L files using objectDump that are also", "tokens": [7098, 3895, 11, 34597, 674, 5666, 2001, 16944, 294, 264, 441, 7098, 1228, 2657, 35, 1420, 300, 366, 611], "temperature": 0.0, "avg_logprob": -0.19381345402110706, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.00021344890410546213}, {"id": 242, "seek": 174780, "start": 1769.52, "end": 1775.56, "text": " exported by OSV kernel and finally generates basically the app version script.", "tokens": [42055, 538, 12731, 53, 28256, 293, 2721, 23815, 1936, 264, 724, 3037, 5755, 13], "temperature": 0.0, "avg_logprob": -0.19381345402110706, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.00021344890410546213}, {"id": 243, "seek": 177556, "start": 1775.56, "end": 1780.84, "text": " So please note that this functionality only works when you build kernel with most symbols", "tokens": [407, 1767, 3637, 300, 341, 14980, 787, 1985, 562, 291, 1322, 28256, 365, 881, 16944], "temperature": 0.0, "avg_logprob": -0.16895753315516882, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0006321711116470397}, {"id": 244, "seek": 177556, "start": 1780.84, "end": 1783.48, "text": " hidden.", "tokens": [7633, 13], "temperature": 0.0, "avg_logprob": -0.16895753315516882, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0006321711116470397}, {"id": 245, "seek": 177556, "start": 1783.48, "end": 1793.24, "text": " So I think what is kind of interesting worth noting in that approach is that you basically", "tokens": [407, 286, 519, 437, 307, 733, 295, 1880, 3163, 26801, 294, 300, 3109, 307, 300, 291, 1936], "temperature": 0.0, "avg_logprob": -0.16895753315516882, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0006321711116470397}, {"id": 246, "seek": 177556, "start": 1793.24, "end": 1796.6799999999998, "text": " run a built script against given application twice.", "tokens": [1190, 257, 3094, 5755, 1970, 2212, 3861, 6091, 13], "temperature": 0.0, "avg_logprob": -0.16895753315516882, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0006321711116470397}, {"id": 247, "seek": 177556, "start": 1796.6799999999998, "end": 1802.9199999999998, "text": " Basically first time to identify all symbols that application needs from OSV kernel and", "tokens": [8537, 700, 565, 281, 5876, 439, 16944, 300, 3861, 2203, 490, 12731, 53, 28256, 293], "temperature": 0.0, "avg_logprob": -0.16895753315516882, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0006321711116470397}, {"id": 248, "seek": 180292, "start": 1802.92, "end": 1815.0800000000002, "text": " then actually second time we do is to build the kernel for that specific app.", "tokens": [550, 767, 1150, 565, 321, 360, 307, 281, 1322, 264, 28256, 337, 300, 2685, 724, 13], "temperature": 0.0, "avg_logprob": -0.13870637844770384, "compression_ratio": 1.38135593220339, "no_speech_prob": 0.00021315818594302982}, {"id": 249, "seek": 180292, "start": 1815.0800000000002, "end": 1823.96, "text": " In this example we actually generate kernel specific to run a simple going app on OSV", "tokens": [682, 341, 1365, 321, 767, 8460, 28256, 2685, 281, 1190, 257, 2199, 516, 724, 322, 12731, 53], "temperature": 0.0, "avg_logprob": -0.13870637844770384, "compression_ratio": 1.38135593220339, "no_speech_prob": 0.00021315818594302982}, {"id": 250, "seek": 182396, "start": 1823.96, "end": 1838.48, "text": " and when you actually build kernel with symbols around I think 30 symbols by going pi example", "tokens": [293, 562, 291, 767, 1322, 28256, 365, 16944, 926, 286, 519, 2217, 16944, 538, 516, 3895, 1365], "temperature": 0.0, "avg_logprob": -0.34985923767089844, "compression_ratio": 1.4296875, "no_speech_prob": 0.0001404999929945916}, {"id": 251, "seek": 182396, "start": 1838.48, "end": 1850.52, "text": " the kernel is effectively by around half megabytes smaller and it's around 3.2 megabytes.", "tokens": [264, 28256, 307, 8659, 538, 926, 1922, 10816, 24538, 4356, 293, 309, 311, 926, 805, 13, 17, 10816, 24538, 13], "temperature": 0.0, "avg_logprob": -0.34985923767089844, "compression_ratio": 1.4296875, "no_speech_prob": 0.0001404999929945916}, {"id": 252, "seek": 185052, "start": 1850.52, "end": 1859.72, "text": " So this approach has obviously some limitations.", "tokens": [407, 341, 3109, 575, 2745, 512, 15705, 13], "temperature": 0.0, "avg_logprob": -0.2526584513047162, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.00024596837465651333}, {"id": 253, "seek": 185052, "start": 1859.72, "end": 1866.92, "text": " So some applications obviously use for example DLSM right to dynamically resolve symbols", "tokens": [407, 512, 5821, 2745, 764, 337, 1365, 413, 19198, 44, 558, 281, 43492, 14151, 16944], "temperature": 0.0, "avg_logprob": -0.2526584513047162, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.00024596837465651333}, {"id": 254, "seek": 185052, "start": 1866.92, "end": 1870.48, "text": " and those would be missed by this technique.", "tokens": [293, 729, 576, 312, 6721, 538, 341, 6532, 13], "temperature": 0.0, "avg_logprob": -0.2526584513047162, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.00024596837465651333}, {"id": 255, "seek": 185052, "start": 1870.48, "end": 1876.44, "text": " So in this scenario basically for now you have to manually find those symbols and add", "tokens": [407, 294, 341, 9005, 1936, 337, 586, 291, 362, 281, 16945, 915, 729, 16944, 293, 909], "temperature": 0.0, "avg_logprob": -0.2526584513047162, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.00024596837465651333}, {"id": 256, "seek": 185052, "start": 1876.44, "end": 1880.2, "text": " them to the app version script file.", "tokens": [552, 281, 264, 724, 3037, 5755, 3991, 13], "temperature": 0.0, "avg_logprob": -0.2526584513047162, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.00024596837465651333}, {"id": 257, "seek": 188020, "start": 1880.2, "end": 1887.92, "text": " Basically a lot of Jalipsi functionality is still in OSV in Linux CC where all the system", "tokens": [8537, 257, 688, 295, 508, 304, 2600, 72, 14980, 307, 920, 294, 12731, 53, 294, 18734, 12630, 689, 439, 264, 1185], "temperature": 0.0, "avg_logprob": -0.2526144027709961, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0002531838254071772}, {"id": 258, "seek": 188020, "start": 1887.92, "end": 1899.3600000000001, "text": " calls are actually implemented is still basically references all the code in some of the parts", "tokens": [5498, 366, 767, 12270, 307, 920, 1936, 15400, 439, 264, 3089, 294, 512, 295, 264, 3166], "temperature": 0.0, "avg_logprob": -0.2526144027709961, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0002531838254071772}, {"id": 259, "seek": 188020, "start": 1899.3600000000001, "end": 1903.24, "text": " of the Lipsi implementation so this obviously also would not be removed.", "tokens": [295, 264, 441, 2600, 72, 11420, 370, 341, 2745, 611, 576, 406, 312, 7261, 13], "temperature": 0.0, "avg_logprob": -0.2526144027709961, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0002531838254071772}, {"id": 260, "seek": 190324, "start": 1903.24, "end": 1914.08, "text": " So obviously we could think of ways of finding some kind of build mechanism that could for", "tokens": [407, 2745, 321, 727, 519, 295, 2098, 295, 5006, 512, 733, 295, 1322, 7513, 300, 727, 337], "temperature": 0.0, "avg_logprob": -0.2067895029105392, "compression_ratio": 1.4026845637583893, "no_speech_prob": 6.064599074306898e-05}, {"id": 261, "seek": 190324, "start": 1914.08, "end": 1924.68, "text": " example find all the usages of Cisco instruction or SVC on ARM and analyze and find all this", "tokens": [1365, 915, 439, 264, 505, 1660, 295, 38528, 10951, 420, 31910, 34, 322, 45209, 293, 12477, 293, 915, 439, 341], "temperature": 0.0, "avg_logprob": -0.2067895029105392, "compression_ratio": 1.4026845637583893, "no_speech_prob": 6.064599074306898e-05}, {"id": 262, "seek": 190324, "start": 1924.68, "end": 1929.52, "text": " only code that is needed.", "tokens": [787, 3089, 300, 307, 2978, 13], "temperature": 0.0, "avg_logprob": -0.2067895029105392, "compression_ratio": 1.4026845637583893, "no_speech_prob": 6.064599074306898e-05}, {"id": 263, "seek": 192952, "start": 1929.52, "end": 1934.28, "text": " In the future we may componentize other functional elements of the kernel for example the DHCP", "tokens": [682, 264, 2027, 321, 815, 6542, 1125, 661, 11745, 4959, 295, 264, 28256, 337, 1365, 264, 28606, 20049], "temperature": 0.0, "avg_logprob": -0.17992017707046198, "compression_ratio": 1.5709342560553634, "no_speech_prob": 9.412706276634708e-05}, {"id": 264, "seek": 192952, "start": 1934.28, "end": 1939.72, "text": " lookup code could be either loaded from a separate library or compiled out depending", "tokens": [574, 1010, 3089, 727, 312, 2139, 13210, 490, 257, 4994, 6405, 420, 36548, 484, 5413], "temperature": 0.0, "avg_logprob": -0.17992017707046198, "compression_ratio": 1.5709342560553634, "no_speech_prob": 9.412706276634708e-05}, {"id": 265, "seek": 192952, "start": 1939.72, "end": 1945.12, "text": " on some build option to improve compatibility while also planning to add support of statically", "tokens": [322, 512, 1322, 3614, 281, 3470, 34237, 1339, 611, 5038, 281, 909, 1406, 295, 2219, 984], "temperature": 0.0, "avg_logprob": -0.17992017707046198, "compression_ratio": 1.5709342560553634, "no_speech_prob": 9.412706276634708e-05}, {"id": 266, "seek": 192952, "start": 1945.12, "end": 1953.24, "text": " linked executables which would require implementing at least clone BRK and arch PRCTL Cisco.", "tokens": [9408, 7568, 2965, 597, 576, 3651, 18114, 412, 1935, 26506, 10262, 42, 293, 3912, 11568, 10259, 43, 38528, 13], "temperature": 0.0, "avg_logprob": -0.17992017707046198, "compression_ratio": 1.5709342560553634, "no_speech_prob": 9.412706276634708e-05}, {"id": 267, "seek": 192952, "start": 1953.24, "end": 1958.68, "text": " We may also introduce ability to swap built in version of Jalipsi libraries with third", "tokens": [492, 815, 611, 5366, 3485, 281, 18135, 3094, 294, 3037, 295, 508, 304, 2600, 72, 15148, 365, 2636], "temperature": 0.0, "avg_logprob": -0.17992017707046198, "compression_ratio": 1.5709342560553634, "no_speech_prob": 9.412706276634708e-05}, {"id": 268, "seek": 195868, "start": 1958.68, "end": 1965.88, "text": " party ones for example the subset of libm so that is provided by OSV kernel could be", "tokens": [3595, 2306, 337, 1365, 264, 25993, 295, 22854, 76, 370, 300, 307, 5649, 538, 12731, 53, 28256, 727, 312], "temperature": 0.0, "avg_logprob": -0.2318538267221024, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0002091176575049758}, {"id": 269, "seek": 195868, "start": 1965.88, "end": 1975.28, "text": " possibly hidden with the mechanism that is discussed and we could use different implementation", "tokens": [6264, 7633, 365, 264, 7513, 300, 307, 7152, 293, 321, 727, 764, 819, 11420], "temperature": 0.0, "avg_logprob": -0.2318538267221024, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0002091176575049758}, {"id": 270, "seek": 195868, "start": 1975.28, "end": 1977.16, "text": " of that library.", "tokens": [295, 300, 6405, 13], "temperature": 0.0, "avg_logprob": -0.2318538267221024, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0002091176575049758}, {"id": 271, "seek": 195868, "start": 1977.16, "end": 1984.6000000000001, "text": " Finally we are considering to expand standard PROCFS and CISFS and OSV specific parts of", "tokens": [6288, 321, 366, 8079, 281, 5268, 3832, 15008, 34, 29318, 293, 383, 2343, 29318, 293, 12731, 53, 2685, 3166, 295], "temperature": 0.0, "avg_logprob": -0.2318538267221024, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0002091176575049758}, {"id": 272, "seek": 198460, "start": 1984.6, "end": 1990.6399999999999, "text": " CISFS that would better support statically linked executables but also allow regular", "tokens": [383, 2343, 29318, 300, 576, 1101, 1406, 2219, 984, 9408, 7568, 2965, 457, 611, 2089, 3890], "temperature": 0.0, "avg_logprob": -0.16170589507572233, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.00014415045734494925}, {"id": 273, "seek": 198460, "start": 1990.6399999999999, "end": 1993.8, "text": " apps to interact with OSV.", "tokens": [7733, 281, 4648, 365, 12731, 53, 13], "temperature": 0.0, "avg_logprob": -0.16170589507572233, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.00014415045734494925}, {"id": 274, "seek": 198460, "start": 1993.8, "end": 2000.6399999999999, "text": " A good example of it could be implementation of net stat like type of capability application", "tokens": [316, 665, 1365, 295, 309, 727, 312, 11420, 295, 2533, 2219, 411, 2010, 295, 13759, 3861], "temperature": 0.0, "avg_logprob": -0.16170589507572233, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.00014415045734494925}, {"id": 275, "seek": 198460, "start": 2000.6399999999999, "end": 2011.6799999999998, "text": " that could expose the networking in terms of OSV better during runtime.", "tokens": [300, 727, 19219, 264, 17985, 294, 2115, 295, 12731, 53, 1101, 1830, 34474, 13], "temperature": 0.0, "avg_logprob": -0.16170589507572233, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.00014415045734494925}, {"id": 276, "seek": 201168, "start": 2011.68, "end": 2015.92, "text": " In the next part of the presentation I will discuss the other interesting enhancements", "tokens": [682, 264, 958, 644, 295, 264, 5860, 286, 486, 2248, 264, 661, 1880, 11985, 1117], "temperature": 0.0, "avg_logprob": -0.2055244670194738, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.0004706242762040347}, {"id": 277, "seek": 201168, "start": 2015.92, "end": 2019.3600000000001, "text": " introduced as part of the latest 0.57 release.", "tokens": [7268, 382, 644, 295, 264, 6792, 1958, 13, 19004, 4374, 13], "temperature": 0.0, "avg_logprob": -0.2055244670194738, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.0004706242762040347}, {"id": 278, "seek": 201168, "start": 2019.3600000000001, "end": 2025.76, "text": " More specifically I will talk about lazy stack and new ways to build ZFS images and finally", "tokens": [5048, 4682, 286, 486, 751, 466, 14847, 8630, 293, 777, 2098, 281, 1322, 1176, 29318, 5267, 293, 2721], "temperature": 0.0, "avg_logprob": -0.2055244670194738, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.0004706242762040347}, {"id": 279, "seek": 201168, "start": 2025.76, "end": 2031.64, "text": " the improvements to the ARH64 port.", "tokens": [264, 13797, 281, 264, 8943, 39, 19395, 2436, 13], "temperature": 0.0, "avg_logprob": -0.2055244670194738, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.0004706242762040347}, {"id": 280, "seek": 201168, "start": 2031.64, "end": 2040.0800000000002, "text": " The lazy stack which by the way is actually the idea that was felt off by Nadav Harrell", "tokens": [440, 14847, 8630, 597, 538, 264, 636, 307, 767, 264, 1558, 300, 390, 2762, 766, 538, 23269, 706, 3653, 19771], "temperature": 0.0, "avg_logprob": -0.2055244670194738, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.0004706242762040347}, {"id": 281, "seek": 204008, "start": 2040.08, "end": 2046.76, "text": " which maybe is listening to this presentation effectively allows to save substantial amount", "tokens": [597, 1310, 307, 4764, 281, 341, 5860, 8659, 4045, 281, 3155, 16726, 2372], "temperature": 0.0, "avg_logprob": -0.18143189374138327, "compression_ratio": 1.6724890829694323, "no_speech_prob": 0.0003175532619934529}, {"id": 282, "seek": 204008, "start": 2046.76, "end": 2053.3199999999997, "text": " of memory if an application spawns many p-threads with large stack by letting stack grow dynamically", "tokens": [295, 4675, 498, 364, 3861, 17088, 82, 867, 280, 12, 392, 2538, 82, 365, 2416, 8630, 538, 8295, 8630, 1852, 43492], "temperature": 0.0, "avg_logprob": -0.18143189374138327, "compression_ratio": 1.6724890829694323, "no_speech_prob": 0.0003175532619934529}, {"id": 283, "seek": 204008, "start": 2053.3199999999997, "end": 2058.36, "text": " as needed instead of getting prepopulated ahead of time which is normally the case right", "tokens": [382, 2978, 2602, 295, 1242, 2666, 404, 6987, 2286, 295, 565, 597, 307, 5646, 264, 1389, 558], "temperature": 0.0, "avg_logprob": -0.18143189374138327, "compression_ratio": 1.6724890829694323, "no_speech_prob": 0.0003175532619934529}, {"id": 284, "seek": 204008, "start": 2058.36, "end": 2059.72, "text": " now with OSV.", "tokens": [586, 365, 12731, 53, 13], "temperature": 0.0, "avg_logprob": -0.18143189374138327, "compression_ratio": 1.6724890829694323, "no_speech_prob": 0.0003175532619934529}, {"id": 285, "seek": 204008, "start": 2059.72, "end": 2066.04, "text": " So on OSV right now all kernel threads and all application threads have stacks that are", "tokens": [407, 322, 12731, 53, 558, 586, 439, 28256, 19314, 293, 439, 3861, 19314, 362, 30792, 300, 366], "temperature": 0.0, "avg_logprob": -0.18143189374138327, "compression_ratio": 1.6724890829694323, "no_speech_prob": 0.0003175532619934529}, {"id": 286, "seek": 206604, "start": 2066.04, "end": 2071.2, "text": " automatically prepopulated which is obviously not very memory efficient.", "tokens": [6772, 2666, 404, 6987, 597, 307, 2745, 406, 588, 4675, 7148, 13], "temperature": 0.0, "avg_logprob": -0.12822283638848198, "compression_ratio": 1.5539906103286385, "no_speech_prob": 7.551976887043566e-05}, {"id": 287, "seek": 206604, "start": 2071.2, "end": 2076.4, "text": " Now the crux of the solution is based on observation that OSV page fault handler requires that", "tokens": [823, 264, 5140, 87, 295, 264, 3827, 307, 2361, 322, 14816, 300, 12731, 53, 3028, 7441, 41967, 7029, 300], "temperature": 0.0, "avg_logprob": -0.12822283638848198, "compression_ratio": 1.5539906103286385, "no_speech_prob": 7.551976887043566e-05}, {"id": 288, "seek": 206604, "start": 2076.4, "end": 2084.72, "text": " both interrupts and preemption must be enabled when fault is triggered.", "tokens": [1293, 12729, 82, 293, 659, 26033, 1633, 312, 15172, 562, 7441, 307, 21710, 13], "temperature": 0.0, "avg_logprob": -0.12822283638848198, "compression_ratio": 1.5539906103286385, "no_speech_prob": 7.551976887043566e-05}, {"id": 289, "seek": 206604, "start": 2084.72, "end": 2089.7599999999998, "text": " And therefore if stack is dynamically mapped we need to make sure that the stack page fault", "tokens": [400, 4412, 498, 8630, 307, 43492, 33318, 321, 643, 281, 652, 988, 300, 264, 8630, 3028, 7441], "temperature": 0.0, "avg_logprob": -0.12822283638848198, "compression_ratio": 1.5539906103286385, "no_speech_prob": 7.551976887043566e-05}, {"id": 290, "seek": 208976, "start": 2089.76, "end": 2096.28, "text": " never happens in these relatively few places where the kernel code that executes with either", "tokens": [1128, 2314, 294, 613, 7226, 1326, 3190, 689, 264, 28256, 3089, 300, 4454, 1819, 365, 2139], "temperature": 0.0, "avg_logprob": -0.13720758845297137, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.00011661749886116013}, {"id": 291, "seek": 208976, "start": 2096.28, "end": 2100.1600000000003, "text": " interrupts or preemption disabled.", "tokens": [12729, 82, 420, 659, 26033, 15191, 13], "temperature": 0.0, "avg_logprob": -0.13720758845297137, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.00011661749886116013}, {"id": 292, "seek": 208976, "start": 2100.1600000000003, "end": 2106.1600000000003, "text": " And we basically satisfy this requirement by refolking the stack by reading one byte,", "tokens": [400, 321, 1936, 19319, 341, 11695, 538, 1895, 401, 5092, 264, 8630, 538, 3760, 472, 40846, 11], "temperature": 0.0, "avg_logprob": -0.13720758845297137, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.00011661749886116013}, {"id": 293, "seek": 208976, "start": 2106.1600000000003, "end": 2114.28, "text": " one page down per stack pointer just before preemption or interrupts are disabled.", "tokens": [472, 3028, 760, 680, 8630, 23918, 445, 949, 659, 26033, 420, 12729, 82, 366, 15191, 13], "temperature": 0.0, "avg_logprob": -0.13720758845297137, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.00011661749886116013}, {"id": 294, "seek": 208976, "start": 2114.28, "end": 2118.76, "text": " So a good example of that code would be in a scheduler right when OSV scheduler is trying", "tokens": [407, 257, 665, 1365, 295, 300, 3089, 576, 312, 294, 257, 12000, 260, 558, 562, 12731, 53, 12000, 260, 307, 1382], "temperature": 0.0, "avg_logprob": -0.13720758845297137, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.00011661749886116013}, {"id": 295, "seek": 211876, "start": 2118.76, "end": 2125.44, "text": " to figure out what the next threat to switch to.", "tokens": [281, 2573, 484, 437, 264, 958, 4734, 281, 3679, 281, 13], "temperature": 0.0, "avg_logprob": -0.16754526487538512, "compression_ratio": 1.5567567567567568, "no_speech_prob": 0.0007024494116194546}, {"id": 296, "seek": 211876, "start": 2125.44, "end": 2131.8, "text": " And obviously that code has preemption and interrupts disabled and we wouldn't obviously", "tokens": [400, 2745, 300, 3089, 575, 659, 26033, 293, 12729, 82, 15191, 293, 321, 2759, 380, 2745], "temperature": 0.0, "avg_logprob": -0.16754526487538512, "compression_ratio": 1.5567567567567568, "no_speech_prob": 0.0007024494116194546}, {"id": 297, "seek": 211876, "start": 2131.8, "end": 2138.2400000000002, "text": " want to have page fault happen at that moment.", "tokens": [528, 281, 362, 3028, 7441, 1051, 412, 300, 1623, 13], "temperature": 0.0, "avg_logprob": -0.16754526487538512, "compression_ratio": 1.5567567567567568, "no_speech_prob": 0.0007024494116194546}, {"id": 298, "seek": 211876, "start": 2138.2400000000002, "end": 2147.28, "text": " So there are relatively few places when that happens and this idea is to basically pre-fault", "tokens": [407, 456, 366, 7226, 1326, 3190, 562, 300, 2314, 293, 341, 1558, 307, 281, 1936, 659, 12, 69, 5107], "temperature": 0.0, "avg_logprob": -0.16754526487538512, "compression_ratio": 1.5567567567567568, "no_speech_prob": 0.0007024494116194546}, {"id": 299, "seek": 211876, "start": 2147.28, "end": 2148.28, "text": " this code.", "tokens": [341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.16754526487538512, "compression_ratio": 1.5567567567567568, "no_speech_prob": 0.0007024494116194546}, {"id": 300, "seek": 214828, "start": 2148.28, "end": 2154.28, "text": " So to achieve that we basically analyze OSV code to find all the places where the IRQ", "tokens": [407, 281, 4584, 300, 321, 1936, 12477, 12731, 53, 3089, 281, 915, 439, 264, 3190, 689, 264, 16486, 48], "temperature": 0.0, "avg_logprob": -0.15862103630514707, "compression_ratio": 1.6133333333333333, "no_speech_prob": 0.00017379503697156906}, {"id": 301, "seek": 214828, "start": 2154.28, "end": 2161.1600000000003, "text": " disabled and preempt disabled is called directly or indirectly sometimes and pre-fault the", "tokens": [15191, 293, 659, 4543, 15191, 307, 1219, 3838, 420, 37779, 2171, 293, 659, 12, 69, 5107, 264], "temperature": 0.0, "avg_logprob": -0.15862103630514707, "compression_ratio": 1.6133333333333333, "no_speech_prob": 0.00017379503697156906}, {"id": 302, "seek": 214828, "start": 2161.1600000000003, "end": 2163.76, "text": " stack there if necessary.", "tokens": [8630, 456, 498, 4818, 13], "temperature": 0.0, "avg_logprob": -0.15862103630514707, "compression_ratio": 1.6133333333333333, "no_speech_prob": 0.00017379503697156906}, {"id": 303, "seek": 214828, "start": 2163.76, "end": 2167.84, "text": " As we analyze all call sites we need to follow basically five rules.", "tokens": [1018, 321, 12477, 439, 818, 7533, 321, 643, 281, 1524, 1936, 1732, 4474, 13], "temperature": 0.0, "avg_logprob": -0.15862103630514707, "compression_ratio": 1.6133333333333333, "no_speech_prob": 0.00017379503697156906}, {"id": 304, "seek": 214828, "start": 2167.84, "end": 2173.2400000000002, "text": " The first one do nothing if the call in question executes always on the kernel thread right", "tokens": [440, 700, 472, 360, 1825, 498, 264, 818, 294, 1168, 4454, 1819, 1009, 322, 264, 28256, 7207, 558], "temperature": 0.0, "avg_logprob": -0.15862103630514707, "compression_ratio": 1.6133333333333333, "no_speech_prob": 0.00017379503697156906}, {"id": 305, "seek": 217324, "start": 2173.24, "end": 2179.7599999999998, "text": " because it has pre-populated stack there's no chance that page fault is going to happen.", "tokens": [570, 309, 575, 659, 12, 13872, 6987, 8630, 456, 311, 572, 2931, 300, 3028, 7441, 307, 516, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.18095184016872096, "compression_ratio": 1.6055555555555556, "no_speech_prob": 9.738017979543656e-05}, {"id": 306, "seek": 217324, "start": 2179.7599999999998, "end": 2186.9599999999996, "text": " Second one is do nothing if the call site executes on other type of pre-populated stack.", "tokens": [5736, 472, 307, 360, 1825, 498, 264, 818, 3621, 4454, 1819, 322, 661, 2010, 295, 659, 12, 13872, 6987, 8630, 13], "temperature": 0.0, "avg_logprob": -0.18095184016872096, "compression_ratio": 1.6055555555555556, "no_speech_prob": 9.738017979543656e-05}, {"id": 307, "seek": 217324, "start": 2186.9599999999996, "end": 2194.56, "text": " The good example of that would be the interrupt and exception stack or Cisco stack which are", "tokens": [440, 665, 1365, 295, 300, 576, 312, 264, 12729, 293, 11183, 8630, 420, 38528, 8630, 597, 366], "temperature": 0.0, "avg_logprob": -0.18095184016872096, "compression_ratio": 1.6055555555555556, "no_speech_prob": 9.738017979543656e-05}, {"id": 308, "seek": 217324, "start": 2194.56, "end": 2197.3199999999997, "text": " all pre-populated.", "tokens": [439, 659, 12, 13872, 6987, 13], "temperature": 0.0, "avg_logprob": -0.18095184016872096, "compression_ratio": 1.6055555555555556, "no_speech_prob": 9.738017979543656e-05}, {"id": 309, "seek": 219732, "start": 2197.32, "end": 2204.52, "text": " And the number three rule is do nothing if the call site executes when we know that either", "tokens": [400, 264, 1230, 1045, 4978, 307, 360, 1825, 498, 264, 818, 3621, 4454, 1819, 562, 321, 458, 300, 2139], "temperature": 0.0, "avg_logprob": -0.1724911093711853, "compression_ratio": 1.6455026455026456, "no_speech_prob": 0.00019518350018188357}, {"id": 310, "seek": 219732, "start": 2204.52, "end": 2210.76, "text": " interrupts or preemptions are disabled because we don't need to somebody already probably", "tokens": [12729, 82, 420, 659, 4543, 626, 366, 15191, 570, 321, 500, 380, 643, 281, 2618, 1217, 1391], "temperature": 0.0, "avg_logprob": -0.1724911093711853, "compression_ratio": 1.6455026455026456, "no_speech_prob": 0.00019518350018188357}, {"id": 311, "seek": 219732, "start": 2210.76, "end": 2212.4, "text": " pre-faulted that.", "tokens": [659, 12, 69, 5107, 292, 300, 13], "temperature": 0.0, "avg_logprob": -0.1724911093711853, "compression_ratio": 1.6455026455026456, "no_speech_prob": 0.00019518350018188357}, {"id": 312, "seek": 219732, "start": 2212.4, "end": 2218.0800000000004, "text": " And then pre-fault unconditionally if we know that both preemption and interrupts are about", "tokens": [400, 550, 659, 12, 69, 5107, 34959, 15899, 498, 321, 458, 300, 1293, 659, 26033, 293, 12729, 82, 366, 466], "temperature": 0.0, "avg_logprob": -0.1724911093711853, "compression_ratio": 1.6455026455026456, "no_speech_prob": 0.00019518350018188357}, {"id": 313, "seek": 219732, "start": 2218.0800000000004, "end": 2220.0, "text": " to be enabled right.", "tokens": [281, 312, 15172, 558, 13], "temperature": 0.0, "avg_logprob": -0.1724911093711853, "compression_ratio": 1.6455026455026456, "no_speech_prob": 0.00019518350018188357}, {"id": 314, "seek": 222000, "start": 2220.0, "end": 2227.28, "text": " And otherwise pre-fault stack by determining dynamically basically by calling the preemptable", "tokens": [400, 5911, 659, 12, 69, 5107, 8630, 538, 23751, 43492, 1936, 538, 5141, 264, 659, 4543, 712], "temperature": 0.0, "avg_logprob": -0.1942514082964729, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.0003567016392480582}, {"id": 315, "seek": 222000, "start": 2227.28, "end": 2231.32, "text": " is preemptable and IRQ enabled functions.", "tokens": [307, 659, 4543, 712, 293, 16486, 48, 15172, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1942514082964729, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.0003567016392480582}, {"id": 316, "seek": 222000, "start": 2231.32, "end": 2238.84, "text": " And now the idea basically if we only always if we did if we followed only rule number", "tokens": [400, 586, 264, 1558, 1936, 498, 321, 787, 1009, 498, 321, 630, 498, 321, 6263, 787, 4978, 1230], "temperature": 0.0, "avg_logprob": -0.1942514082964729, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.0003567016392480582}, {"id": 317, "seek": 222000, "start": 2238.84, "end": 2244.16, "text": " five which actually this is what I tried to do in the very beginning the first attempt", "tokens": [1732, 597, 767, 341, 307, 437, 286, 3031, 281, 360, 294, 264, 588, 2863, 264, 700, 5217], "temperature": 0.0, "avg_logprob": -0.1942514082964729, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.0003567016392480582}, {"id": 318, "seek": 222000, "start": 2244.16, "end": 2248.72, "text": " to implement lazy stack it will be actually pretty inefficient.", "tokens": [281, 4445, 14847, 8630, 309, 486, 312, 767, 1238, 43495, 13], "temperature": 0.0, "avg_logprob": -0.1942514082964729, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.0003567016392480582}, {"id": 319, "seek": 224872, "start": 2248.72, "end": 2257.4399999999996, "text": " I mean I saw pretty significant degradation of for example context switch and other parts", "tokens": [286, 914, 286, 1866, 1238, 4776, 40519, 295, 337, 1365, 4319, 3679, 293, 661, 3166], "temperature": 0.0, "avg_logprob": -0.20301181987180547, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.0002060043771052733}, {"id": 320, "seek": 224872, "start": 2257.4399999999996, "end": 2267.04, "text": " of the OSV when I dynamically checked if preemption and interrupts were disabled.", "tokens": [295, 264, 12731, 53, 562, 286, 43492, 10033, 498, 659, 26033, 293, 12729, 82, 645, 15191, 13], "temperature": 0.0, "avg_logprob": -0.20301181987180547, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.0002060043771052733}, {"id": 321, "seek": 224872, "start": 2267.04, "end": 2275.48, "text": " So this was accessible pretty painful to basically analyze the code but I think it was worth it.", "tokens": [407, 341, 390, 9515, 1238, 11697, 281, 1936, 12477, 264, 3089, 457, 286, 519, 309, 390, 3163, 309, 13], "temperature": 0.0, "avg_logprob": -0.20301181987180547, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.0002060043771052733}, {"id": 322, "seek": 227548, "start": 2275.48, "end": 2280.72, "text": " As you remember from the modularity slides the ZFS file system has been extracted from", "tokens": [1018, 291, 1604, 490, 264, 31111, 507, 9788, 264, 1176, 29318, 3991, 1185, 575, 668, 34086, 490], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 323, "seek": 227548, "start": 2280.72, "end": 2287.64, "text": " the kernel as a separate shared library called LipsolizeSO which can be loaded from the different", "tokens": [264, 28256, 382, 257, 4994, 5507, 6405, 1219, 441, 2600, 401, 1125, 17188, 597, 393, 312, 13210, 490, 264, 819], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 324, "seek": 227548, "start": 2287.64, "end": 2291.48, "text": " file system before ZFS file system can be mounted.", "tokens": [3991, 1185, 949, 1176, 29318, 3991, 1185, 393, 312, 19138, 13], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 325, "seek": 227548, "start": 2291.48, "end": 2295.68, "text": " This allows for three ways ZFS can be mounted by OSV.", "tokens": [639, 4045, 337, 1045, 2098, 1176, 29318, 393, 312, 19138, 538, 12731, 53, 13], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 326, "seek": 227548, "start": 2295.68, "end": 2301.68, "text": " The first and original way assumes that ZFS is mounted at the root from the first partition", "tokens": [440, 700, 293, 3380, 636, 37808, 300, 1176, 29318, 307, 19138, 412, 264, 5593, 490, 264, 700, 24808], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 327, "seek": 227548, "start": 2301.68, "end": 2303.32, "text": " of the first disk.", "tokens": [295, 264, 700, 12355, 13], "temperature": 0.0, "avg_logprob": -0.1554938711301245, "compression_ratio": 1.7543859649122806, "no_speech_prob": 0.0009607151732780039}, {"id": 328, "seek": 230332, "start": 2303.32, "end": 2309.1200000000003, "text": " The second one involves mounting ZFS from the second partition of the first disk and", "tokens": [440, 1150, 472, 11626, 22986, 1176, 29318, 490, 264, 1150, 24808, 295, 264, 700, 12355, 293], "temperature": 0.0, "avg_logprob": -0.16231073182204675, "compression_ratio": 1.9119170984455958, "no_speech_prob": 0.000148958686622791}, {"id": 329, "seek": 230332, "start": 2309.1200000000003, "end": 2314.6800000000003, "text": " at an arbitrary non-root point for example slash data.", "tokens": [412, 364, 23211, 2107, 12, 44147, 935, 337, 1365, 17330, 1412, 13], "temperature": 0.0, "avg_logprob": -0.16231073182204675, "compression_ratio": 1.9119170984455958, "no_speech_prob": 0.000148958686622791}, {"id": 330, "seek": 230332, "start": 2314.6800000000003, "end": 2320.0, "text": " Similarly the third way involves mounting ZFS from the first partition of the second", "tokens": [13157, 264, 2636, 636, 11626, 22986, 1176, 29318, 490, 264, 700, 24808, 295, 264, 1150], "temperature": 0.0, "avg_logprob": -0.16231073182204675, "compression_ratio": 1.9119170984455958, "no_speech_prob": 0.000148958686622791}, {"id": 331, "seek": 230332, "start": 2320.0, "end": 2326.2000000000003, "text": " or higher disk at an arbitrary non-root point as well.", "tokens": [420, 2946, 12355, 412, 364, 23211, 2107, 12, 44147, 935, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.16231073182204675, "compression_ratio": 1.9119170984455958, "no_speech_prob": 0.000148958686622791}, {"id": 332, "seek": 230332, "start": 2326.2000000000003, "end": 2332.04, "text": " Please note that the second and third options assume that the root file system is non-ZFS", "tokens": [2555, 3637, 300, 264, 1150, 293, 2636, 3956, 6552, 300, 264, 5593, 3991, 1185, 307, 2107, 12, 57, 29318], "temperature": 0.0, "avg_logprob": -0.16231073182204675, "compression_ratio": 1.9119170984455958, "no_speech_prob": 0.000148958686622791}, {"id": 333, "seek": 233204, "start": 2332.04, "end": 2339.48, "text": " obviously and which could be like read-only-FS or boot-FS.", "tokens": [2745, 293, 597, 727, 312, 411, 1401, 12, 25202, 12, 29318, 420, 11450, 12, 29318, 13], "temperature": 0.0, "avg_logprob": -0.17637701595530791, "compression_ratio": 1.3356643356643356, "no_speech_prob": 0.00034498050808906555}, {"id": 334, "seek": 233204, "start": 2339.48, "end": 2349.12, "text": " This slide shows you the build command and how OSV runs when we follow the original and", "tokens": [639, 4137, 3110, 291, 264, 1322, 5622, 293, 577, 12731, 53, 6676, 562, 321, 1524, 264, 3380, 293], "temperature": 0.0, "avg_logprob": -0.17637701595530791, "compression_ratio": 1.3356643356643356, "no_speech_prob": 0.00034498050808906555}, {"id": 335, "seek": 233204, "start": 2349.12, "end": 2353.32, "text": " default method of building and mounting ZFS.", "tokens": [7576, 3170, 295, 2390, 293, 22986, 1176, 29318, 13], "temperature": 0.0, "avg_logprob": -0.17637701595530791, "compression_ratio": 1.3356643356643356, "no_speech_prob": 0.00034498050808906555}, {"id": 336, "seek": 235332, "start": 2353.32, "end": 2363.0800000000004, "text": " For those that have done it, there's nothing really interesting here.", "tokens": [1171, 729, 300, 362, 1096, 309, 11, 456, 311, 1825, 534, 1880, 510, 13], "temperature": 0.0, "avg_logprob": -0.15379855212043314, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.00013606241554953158}, {"id": 337, "seek": 235332, "start": 2363.0800000000004, "end": 2371.4, "text": " This is a new method, the first of the two new ones where we actually allow ZFS to be", "tokens": [639, 307, 257, 777, 3170, 11, 264, 700, 295, 264, 732, 777, 2306, 689, 321, 767, 2089, 1176, 29318, 281, 312], "temperature": 0.0, "avg_logprob": -0.15379855212043314, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.00013606241554953158}, {"id": 338, "seek": 235332, "start": 2371.4, "end": 2378.04, "text": " mounted at a non-root mount point like data for example and mixed with another file system", "tokens": [19138, 412, 257, 2107, 12, 44147, 3746, 935, 411, 1412, 337, 1365, 293, 7467, 365, 1071, 3991, 1185], "temperature": 0.0, "avg_logprob": -0.15379855212043314, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.00013606241554953158}, {"id": 339, "seek": 235332, "start": 2378.04, "end": 2379.52, "text": " on the same disk.", "tokens": [322, 264, 912, 12355, 13], "temperature": 0.0, "avg_logprob": -0.15379855212043314, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.00013606241554953158}, {"id": 340, "seek": 237952, "start": 2379.52, "end": 2385.68, "text": " Please note that lib-solaris-so is placed on the root file system typically read-only-FS", "tokens": [2555, 3637, 300, 22854, 12, 30926, 27489, 12, 539, 307, 7074, 322, 264, 5593, 3991, 1185, 5850, 1401, 12, 25202, 12, 29318], "temperature": 0.0, "avg_logprob": -0.21754701137542726, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.0002793535531964153}, {"id": 341, "seek": 237952, "start": 2385.68, "end": 2390.6, "text": " under USR-lib-FS and loaded from it automatically.", "tokens": [833, 2546, 49, 12, 38270, 12, 29318, 293, 13210, 490, 309, 6772, 13], "temperature": 0.0, "avg_logprob": -0.21754701137542726, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.0002793535531964153}, {"id": 342, "seek": 237952, "start": 2390.6, "end": 2398.96, "text": " The build script will automatically add the relevant mount point time to each ZFS.", "tokens": [440, 1322, 5755, 486, 6772, 909, 264, 7340, 3746, 935, 565, 281, 1184, 1176, 29318, 13], "temperature": 0.0, "avg_logprob": -0.21754701137542726, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.0002793535531964153}, {"id": 343, "seek": 237952, "start": 2398.96, "end": 2406.24, "text": " The last method is basically similar to the one before but this time we allow ZFS to be", "tokens": [440, 1036, 3170, 307, 1936, 2531, 281, 264, 472, 949, 457, 341, 565, 321, 2089, 1176, 29318, 281, 312], "temperature": 0.0, "avg_logprob": -0.21754701137542726, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.0002793535531964153}, {"id": 344, "seek": 240624, "start": 2406.24, "end": 2413.4399999999996, "text": " mounted from the partition from the second disk or another one.", "tokens": [19138, 490, 264, 24808, 490, 264, 1150, 12355, 420, 1071, 472, 13], "temperature": 0.0, "avg_logprob": -0.22493619334941006, "compression_ratio": 1.3421052631578947, "no_speech_prob": 0.0005729253753088415}, {"id": 345, "seek": 240624, "start": 2413.4399999999996, "end": 2420.16, "text": " It's actually what happens with this option, I noticed that OSV would actually mount ZFS", "tokens": [467, 311, 767, 437, 2314, 365, 341, 3614, 11, 286, 5694, 300, 12731, 53, 576, 767, 3746, 1176, 29318], "temperature": 0.0, "avg_logprob": -0.22493619334941006, "compression_ratio": 1.3421052631578947, "no_speech_prob": 0.0005729253753088415}, {"id": 346, "seek": 240624, "start": 2420.16, "end": 2427.56, "text": " file system by around 30 to 40 milliseconds faster.", "tokens": [3991, 1185, 538, 926, 2217, 281, 3356, 34184, 4663, 13], "temperature": 0.0, "avg_logprob": -0.22493619334941006, "compression_ratio": 1.3421052631578947, "no_speech_prob": 0.0005729253753088415}, {"id": 347, "seek": 242756, "start": 2427.56, "end": 2438.92, "text": " Now there's another new feature we used to run in order to build ZFS images and file", "tokens": [823, 456, 311, 1071, 777, 4111, 321, 1143, 281, 1190, 294, 1668, 281, 1322, 1176, 29318, 5267, 293, 3991], "temperature": 0.0, "avg_logprob": -0.1616462128502982, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.00018830153567250818}, {"id": 348, "seek": 242756, "start": 2438.92, "end": 2443.7599999999998, "text": " system we would use OSV itself to do it.", "tokens": [1185, 321, 576, 764, 12731, 53, 2564, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1616462128502982, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.00018830153567250818}, {"id": 349, "seek": 242756, "start": 2443.7599999999998, "end": 2450.36, "text": " With this new release there's a specialized version of the kernel called ZFS loader which", "tokens": [2022, 341, 777, 4374, 456, 311, 257, 19813, 3037, 295, 264, 28256, 1219, 1176, 29318, 3677, 260, 597], "temperature": 0.0, "avg_logprob": -0.1616462128502982, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.00018830153567250818}, {"id": 350, "seek": 245036, "start": 2450.36, "end": 2458.48, "text": " basically delegates to this utilities like Zipple, ZFS and so on to mount OSV but there's", "tokens": [1936, 45756, 281, 341, 30482, 411, 1176, 23476, 11, 1176, 29318, 293, 370, 322, 281, 3746, 12731, 53, 457, 456, 311], "temperature": 0.0, "avg_logprob": -0.20273564466789587, "compression_ratio": 1.5, "no_speech_prob": 5.963669900665991e-05}, {"id": 351, "seek": 245036, "start": 2458.48, "end": 2469.1600000000003, "text": " also now a new script called ZFS image on host that can be used to mount OSV ZFS images", "tokens": [611, 586, 257, 777, 5755, 1219, 1176, 29318, 3256, 322, 3975, 300, 393, 312, 1143, 281, 3746, 12731, 53, 1176, 29318, 5267], "temperature": 0.0, "avg_logprob": -0.20273564466789587, "compression_ratio": 1.5, "no_speech_prob": 5.963669900665991e-05}, {"id": 352, "seek": 245036, "start": 2469.1600000000003, "end": 2474.08, "text": " provided you have open ZFS functionality on your host system which is actually quite nice", "tokens": [5649, 291, 362, 1269, 1176, 29318, 14980, 322, 428, 3975, 1185, 597, 307, 767, 1596, 1481], "temperature": 0.0, "avg_logprob": -0.20273564466789587, "compression_ratio": 1.5, "no_speech_prob": 5.963669900665991e-05}, {"id": 353, "seek": 247408, "start": 2474.08, "end": 2483.2, "text": " because you can mount basically OSV disk and introspect it, you can also modify it using", "tokens": [570, 291, 393, 3746, 1936, 12731, 53, 12355, 293, 560, 28713, 309, 11, 291, 393, 611, 16927, 309, 1228], "temperature": 0.0, "avg_logprob": -0.18625663703596088, "compression_ratio": 1.4189944134078212, "no_speech_prob": 0.00015028681082185358}, {"id": 354, "seek": 247408, "start": 2483.2, "end": 2490.56, "text": " standard Linux tools and unmount it and use it on OSV again.", "tokens": [3832, 18734, 3873, 293, 19334, 792, 309, 293, 764, 309, 322, 12731, 53, 797, 13], "temperature": 0.0, "avg_logprob": -0.18625663703596088, "compression_ratio": 1.4189944134078212, "no_speech_prob": 0.00015028681082185358}, {"id": 355, "seek": 247408, "start": 2490.56, "end": 2498.72, "text": " Here's some help on how this script can be used.", "tokens": [1692, 311, 512, 854, 322, 577, 341, 5755, 393, 312, 1143, 13], "temperature": 0.0, "avg_logprob": -0.18625663703596088, "compression_ratio": 1.4189944134078212, "no_speech_prob": 0.00015028681082185358}, {"id": 356, "seek": 247408, "start": 2498.72, "end": 2503.0, "text": " Now I think I don't have much time left but I will try.", "tokens": [823, 286, 519, 286, 500, 380, 362, 709, 565, 1411, 457, 286, 486, 853, 13], "temperature": 0.0, "avg_logprob": -0.18625663703596088, "compression_ratio": 1.4189944134078212, "no_speech_prob": 0.00015028681082185358}, {"id": 357, "seek": 250300, "start": 2503.0, "end": 2510.2, "text": " So there's also, I will focus a little bit on the AR64 improvements, I will focus on", "tokens": [407, 456, 311, 611, 11, 286, 486, 1879, 257, 707, 857, 322, 264, 8943, 19395, 13797, 11, 286, 486, 1879, 322], "temperature": 0.0, "avg_logprob": -0.15648136441669766, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002492503554094583}, {"id": 358, "seek": 250300, "start": 2510.2, "end": 2517.24, "text": " three things that I think are worth mentioning, the changes to dynamically map the kernel", "tokens": [1045, 721, 300, 286, 519, 366, 3163, 18315, 11, 264, 2962, 281, 43492, 4471, 264, 28256], "temperature": 0.0, "avg_logprob": -0.15648136441669766, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002492503554094583}, {"id": 359, "seek": 250300, "start": 2517.24, "end": 2527.88, "text": " during the boot from the second basically gigabyte of visual memory to the 63rd gigabyte", "tokens": [1830, 264, 11450, 490, 264, 1150, 1936, 8741, 34529, 295, 5056, 4675, 281, 264, 25082, 7800, 8741, 34529], "temperature": 0.0, "avg_logprob": -0.15648136441669766, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0002492503554094583}, {"id": 360, "seek": 252788, "start": 2527.88, "end": 2535.28, "text": " of memory, addition enhancements to handle system calls and then also handle exceptions", "tokens": [295, 4675, 11, 4500, 11985, 1117, 281, 4813, 1185, 5498, 293, 550, 611, 4813, 22847], "temperature": 0.0, "avg_logprob": -0.16580612519208124, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.00019543910457286984}, {"id": 361, "seek": 252788, "start": 2535.28, "end": 2539.92, "text": " on a dedicated stack.", "tokens": [322, 257, 8374, 8630, 13], "temperature": 0.0, "avg_logprob": -0.16580612519208124, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.00019543910457286984}, {"id": 362, "seek": 252788, "start": 2539.92, "end": 2545.4, "text": " As far as the moving memory, virtual memory to the 63rd gigabyte so I'm not sure if you", "tokens": [1018, 1400, 382, 264, 2684, 4675, 11, 6374, 4675, 281, 264, 25082, 7800, 8741, 34529, 370, 286, 478, 406, 988, 498, 291], "temperature": 0.0, "avg_logprob": -0.16580612519208124, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.00019543910457286984}, {"id": 363, "seek": 252788, "start": 2545.4, "end": 2553.6, "text": " realize OSV kernel is actually position dependent but obviously the kernel itself may be loaded", "tokens": [4325, 12731, 53, 28256, 307, 767, 2535, 12334, 457, 2745, 264, 28256, 2564, 815, 312, 13210], "temperature": 0.0, "avg_logprob": -0.16580612519208124, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.00019543910457286984}, {"id": 364, "seek": 255360, "start": 2553.6, "end": 2559.16, "text": " in different parts of physical memory so and it used to be before that release that you", "tokens": [294, 819, 3166, 295, 4001, 4675, 370, 293, 309, 1143, 281, 312, 949, 300, 4374, 300, 291], "temperature": 0.0, "avg_logprob": -0.19756524155779584, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00028312430367805064}, {"id": 365, "seek": 255360, "start": 2559.16, "end": 2564.36, "text": " would have to build different versions for Firecracker or for the QEMU.", "tokens": [576, 362, 281, 1322, 819, 9606, 337, 7652, 10757, 23599, 420, 337, 264, 1249, 6683, 52, 13], "temperature": 0.0, "avg_logprob": -0.19756524155779584, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00028312430367805064}, {"id": 366, "seek": 255360, "start": 2564.36, "end": 2571.7599999999998, "text": " So basically we, in this release we changed the logic in the assembly, in a bootloader", "tokens": [407, 1936, 321, 11, 294, 341, 4374, 321, 3105, 264, 9952, 294, 264, 12103, 11, 294, 257, 11450, 2907, 260], "temperature": 0.0, "avg_logprob": -0.19756524155779584, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00028312430367805064}, {"id": 367, "seek": 255360, "start": 2571.7599999999998, "end": 2580.96, "text": " where we basically OSV detects itself where it is in a physical memory and in essence", "tokens": [689, 321, 1936, 12731, 53, 5531, 82, 2564, 689, 309, 307, 294, 257, 4001, 4675, 293, 294, 12801], "temperature": 0.0, "avg_logprob": -0.19756524155779584, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00028312430367805064}, {"id": 368, "seek": 258096, "start": 2580.96, "end": 2590.4, "text": " the, you know, dynamically the early mapping tables to then eventually bootstrap to the", "tokens": [264, 11, 291, 458, 11, 43492, 264, 2440, 18350, 8020, 281, 550, 4728, 11450, 372, 4007, 281, 264], "temperature": 0.0, "avg_logprob": -0.18898622868424755, "compression_ratio": 1.4733333333333334, "no_speech_prob": 0.0001471010473323986}, {"id": 369, "seek": 258096, "start": 2590.4, "end": 2595.2400000000002, "text": " right place in the positional code.", "tokens": [558, 1081, 294, 264, 2535, 304, 3089, 13], "temperature": 0.0, "avg_logprob": -0.18898622868424755, "compression_ratio": 1.4733333333333334, "no_speech_prob": 0.0001471010473323986}, {"id": 370, "seek": 258096, "start": 2595.2400000000002, "end": 2600.6, "text": " So now basically you don't need to, you can use the same version of the kernel on any", "tokens": [407, 586, 1936, 291, 500, 380, 643, 281, 11, 291, 393, 764, 264, 912, 3037, 295, 264, 28256, 322, 604], "temperature": 0.0, "avg_logprob": -0.18898622868424755, "compression_ratio": 1.4733333333333334, "no_speech_prob": 0.0001471010473323986}, {"id": 371, "seek": 258096, "start": 2600.6, "end": 2601.76, "text": " hypervisor.", "tokens": [9848, 16457, 13], "temperature": 0.0, "avg_logprob": -0.18898622868424755, "compression_ratio": 1.4733333333333334, "no_speech_prob": 0.0001471010473323986}, {"id": 372, "seek": 260176, "start": 2601.76, "end": 2611.2000000000003, "text": " Now we had system calls on ARM, we had to handle the SVC instruction, there's not really", "tokens": [823, 321, 632, 1185, 5498, 322, 45209, 11, 321, 632, 281, 4813, 264, 31910, 34, 10951, 11, 456, 311, 406, 534], "temperature": 0.0, "avg_logprob": -0.1969226449728012, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00033257825998589396}, {"id": 373, "seek": 260176, "start": 2611.2000000000003, "end": 2621.44, "text": " much interesting if you know how that works and what is maybe a little bit more interesting", "tokens": [709, 1880, 498, 291, 458, 577, 300, 1985, 293, 437, 307, 1310, 257, 707, 857, 544, 1880], "temperature": 0.0, "avg_logprob": -0.1969226449728012, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00033257825998589396}, {"id": 374, "seek": 260176, "start": 2621.44, "end": 2628.5200000000004, "text": " was the change that I made to make all exceptions including system calls to work on a dedicated", "tokens": [390, 264, 1319, 300, 286, 1027, 281, 652, 439, 22847, 3009, 1185, 5498, 281, 589, 322, 257, 8374], "temperature": 0.0, "avg_logprob": -0.1969226449728012, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00033257825998589396}, {"id": 375, "seek": 262852, "start": 2628.52, "end": 2635.04, "text": " stack so before that change all exceptions would be handled on the same stack as the", "tokens": [8630, 370, 949, 300, 1319, 439, 22847, 576, 312, 18033, 322, 264, 912, 8630, 382, 264], "temperature": 0.0, "avg_logprob": -0.1744196497160813, "compression_ratio": 1.5688622754491017, "no_speech_prob": 0.00018569841631688178}, {"id": 376, "seek": 262852, "start": 2635.04, "end": 2642.72, "text": " application which was, which wasn't you know really, which caused all kinds of problems", "tokens": [3861, 597, 390, 11, 597, 2067, 380, 291, 458, 534, 11, 597, 7008, 439, 3685, 295, 2740], "temperature": 0.0, "avg_logprob": -0.1744196497160813, "compression_ratio": 1.5688622754491017, "no_speech_prob": 0.00018569841631688178}, {"id": 377, "seek": 262852, "start": 2642.72, "end": 2648.52, "text": " and it was, for example, that would effectively prevent implementation of the lazy stack.", "tokens": [293, 309, 390, 11, 337, 1365, 11, 300, 576, 8659, 4871, 11420, 295, 264, 14847, 8630, 13], "temperature": 0.0, "avg_logprob": -0.1744196497160813, "compression_ratio": 1.5688622754491017, "no_speech_prob": 0.00018569841631688178}, {"id": 378, "seek": 264852, "start": 2648.52, "end": 2661.04, "text": " So to support basically that we would, you know, SV which runs in EL1 in a kernel mode", "tokens": [407, 281, 1406, 1936, 300, 321, 576, 11, 291, 458, 11, 31910, 597, 6676, 294, 14426, 16, 294, 257, 28256, 4391], "temperature": 0.0, "avg_logprob": -0.14051743804431352, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.0001189772374345921}, {"id": 379, "seek": 264852, "start": 2661.04, "end": 2666.32, "text": " we would basically take advantage of the stack selector register and we would have, we would", "tokens": [321, 576, 1936, 747, 5002, 295, 264, 8630, 23264, 1672, 7280, 293, 321, 576, 362, 11, 321, 576], "temperature": 0.0, "avg_logprob": -0.14051743804431352, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.0001189772374345921}, {"id": 380, "seek": 264852, "start": 2666.32, "end": 2674.04, "text": " basically use both stack pointer register SPL0 and SPL1.", "tokens": [1936, 764, 1293, 8630, 23918, 7280, 8420, 43, 15, 293, 8420, 43, 16, 13], "temperature": 0.0, "avg_logprob": -0.14051743804431352, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.0001189772374345921}, {"id": 381, "seek": 267404, "start": 2674.04, "end": 2683.36, "text": " So normally OSV uses SPL1 register to points to the stack for each thread.", "tokens": [407, 5646, 12731, 53, 4960, 8420, 43, 16, 7280, 281, 2793, 281, 264, 8630, 337, 1184, 7207, 13], "temperature": 0.0, "avg_logprob": -0.16664737766071902, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.00014080366236157715}, {"id": 382, "seek": 267404, "start": 2683.36, "end": 2693.08, "text": " So with the new implementation what basically we would do before the exception was taken", "tokens": [407, 365, 264, 777, 11420, 437, 1936, 321, 576, 360, 949, 264, 11183, 390, 2726], "temperature": 0.0, "avg_logprob": -0.16664737766071902, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.00014080366236157715}, {"id": 383, "seek": 267404, "start": 2693.08, "end": 2703.96, "text": " basically we would switch the stack pointer selector to SPL0 and once basically the exception", "tokens": [1936, 321, 576, 3679, 264, 8630, 23918, 23264, 1672, 281, 8420, 43, 15, 293, 1564, 1936, 264, 11183], "temperature": 0.0, "avg_logprob": -0.16664737766071902, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.00014080366236157715}, {"id": 384, "seek": 270396, "start": 2703.96, "end": 2711.96, "text": " was handled it would basically go back to normal which was SPL1.", "tokens": [390, 18033, 309, 576, 1936, 352, 646, 281, 2710, 597, 390, 8420, 43, 16, 13], "temperature": 0.0, "avg_logprob": -0.35268138885498046, "compression_ratio": 1.25, "no_speech_prob": 7.869433466112241e-05}, {"id": 385, "seek": 270396, "start": 2711.96, "end": 2724.28, "text": " I think I was going to skip C with FS because we're running very little half time left but", "tokens": [286, 519, 286, 390, 516, 281, 10023, 383, 365, 41138, 570, 321, 434, 2614, 588, 707, 1922, 565, 1411, 457], "temperature": 0.0, "avg_logprob": -0.35268138885498046, "compression_ratio": 1.25, "no_speech_prob": 7.869433466112241e-05}, {"id": 386, "seek": 270396, "start": 2724.28, "end": 2727.28, "text": " you can read it on that.", "tokens": [291, 393, 1401, 309, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.35268138885498046, "compression_ratio": 1.25, "no_speech_prob": 7.869433466112241e-05}, {"id": 387, "seek": 272728, "start": 2727.28, "end": 2739.2000000000003, "text": " Yeah we've also added netlink support and we've made quite many improvements to VFS layer", "tokens": [865, 321, 600, 611, 3869, 2533, 22473, 1406, 293, 321, 600, 1027, 1596, 867, 13797, 281, 691, 29318, 4583], "temperature": 0.0, "avg_logprob": -0.1581205888227983, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.00024920125724747777}, {"id": 388, "seek": 272728, "start": 2739.2000000000003, "end": 2747.44, "text": " so both actually of those netlink and VFS improvements were done to support C with FS", "tokens": [370, 1293, 767, 295, 729, 2533, 22473, 293, 691, 29318, 13797, 645, 1096, 281, 1406, 383, 365, 41138], "temperature": 0.0, "avg_logprob": -0.1581205888227983, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.00024920125724747777}, {"id": 389, "seek": 272728, "start": 2747.44, "end": 2753.0800000000004, "text": " so there are basically more gaps that have been filled by trying to run this new use", "tokens": [370, 456, 366, 1936, 544, 15031, 300, 362, 668, 6412, 538, 1382, 281, 1190, 341, 777, 764], "temperature": 0.0, "avg_logprob": -0.1581205888227983, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.00024920125724747777}, {"id": 390, "seek": 272728, "start": 2753.0800000000004, "end": 2756.0800000000004, "text": " case.", "tokens": [1389, 13], "temperature": 0.0, "avg_logprob": -0.1581205888227983, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.00024920125724747777}, {"id": 391, "seek": 275608, "start": 2756.08, "end": 2761.84, "text": " So just briefly as we are pretty much at the end of the presentation I think in the next", "tokens": [407, 445, 10515, 382, 321, 366, 1238, 709, 412, 264, 917, 295, 264, 5860, 286, 519, 294, 264, 958], "temperature": 0.0, "avg_logprob": -0.17038475550138032, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00021623387874569744}, {"id": 392, "seek": 275608, "start": 2761.84, "end": 2766.2799999999997, "text": " releases of OSV whenever they're going to happen I would like to, I would like us to", "tokens": [16952, 295, 12731, 53, 5699, 436, 434, 516, 281, 1051, 286, 576, 411, 281, 11, 286, 576, 411, 505, 281], "temperature": 0.0, "avg_logprob": -0.17038475550138032, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00021623387874569744}, {"id": 393, "seek": 275608, "start": 2766.2799999999997, "end": 2772.64, "text": " focus on supporting statically linked executables, adding proper support of spin locks because", "tokens": [1879, 322, 7231, 2219, 984, 9408, 7568, 2965, 11, 5127, 2296, 1406, 295, 6060, 20703, 570], "temperature": 0.0, "avg_logprob": -0.17038475550138032, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00021623387874569744}, {"id": 394, "seek": 275608, "start": 2772.64, "end": 2779.4, "text": " OSV for example Mutex right now is lockless but under high contention it would actually", "tokens": [12731, 53, 337, 1365, 376, 1169, 87, 558, 586, 307, 4017, 1832, 457, 833, 1090, 660, 1251, 309, 576, 767], "temperature": 0.0, "avg_logprob": -0.17038475550138032, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00021623387874569744}, {"id": 395, "seek": 275608, "start": 2779.4, "end": 2785.12, "text": " make sense to use spin locks and we have actually a prototype on that on the mailing", "tokens": [652, 2020, 281, 764, 6060, 20703, 293, 321, 362, 767, 257, 19475, 322, 300, 322, 264, 41612], "temperature": 0.0, "avg_logprob": -0.17038475550138032, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00021623387874569744}, {"id": 396, "seek": 278512, "start": 2785.12, "end": 2790.16, "text": " list and then supporting ASLR, refreshing Capstan which is a build tool which hasn't", "tokens": [1329, 293, 550, 7231, 7469, 31722, 11, 19772, 8363, 18758, 597, 307, 257, 1322, 2290, 597, 6132, 380], "temperature": 0.0, "avg_logprob": -0.19134028163957006, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007621991098858416}, {"id": 397, "seek": 278512, "start": 2790.16, "end": 2795.6, "text": " been really out because we don't have volunteers, improved for a long time and then even the", "tokens": [668, 534, 484, 570, 321, 500, 380, 362, 14352, 11, 9689, 337, 257, 938, 565, 293, 550, 754, 264], "temperature": 0.0, "avg_logprob": -0.19134028163957006, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007621991098858416}, {"id": 398, "seek": 278512, "start": 2795.6, "end": 2803.04, "text": " website and there are many other interesting ones and so I would, as a last slide I would", "tokens": [3144, 293, 456, 366, 867, 661, 1880, 2306, 293, 370, 286, 576, 11, 382, 257, 1036, 4137, 286, 576], "temperature": 0.0, "avg_logprob": -0.19134028163957006, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007621991098858416}, {"id": 399, "seek": 278512, "start": 2803.04, "end": 2809.7999999999997, "text": " like to basically use this as occasion to thank basically organizer Razvan for inviting", "tokens": [411, 281, 1936, 764, 341, 382, 9674, 281, 1309, 1936, 41363, 29051, 9768, 337, 18202], "temperature": 0.0, "avg_logprob": -0.19134028163957006, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007621991098858416}, {"id": 400, "seek": 280980, "start": 2809.8, "end": 2819.32, "text": " me and everybody else from the community of Unikernals and I would also want to thank", "tokens": [385, 293, 2201, 1646, 490, 264, 1768, 295, 1156, 1035, 1248, 1124, 293, 286, 576, 611, 528, 281, 1309], "temperature": 0.0, "avg_logprob": -0.2533814063439002, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.002407750813290477}, {"id": 401, "seek": 280980, "start": 2819.32, "end": 2827.88, "text": " ScyllaDB for supporting me and Dorlaor and Nadav Harrell for reviewing all the patches", "tokens": [318, 1344, 3505, 27735, 337, 7231, 385, 293, 13643, 875, 284, 293, 23269, 706, 3653, 19771, 337, 19576, 439, 264, 26531], "temperature": 0.0, "avg_logprob": -0.2533814063439002, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.002407750813290477}, {"id": 402, "seek": 280980, "start": 2827.88, "end": 2835.96, "text": " and his other improvements and I also want to thank all other contributors to OSV and", "tokens": [293, 702, 661, 13797, 293, 286, 611, 528, 281, 1309, 439, 661, 45627, 281, 12731, 53, 293], "temperature": 0.0, "avg_logprob": -0.2533814063439002, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.002407750813290477}, {"id": 403, "seek": 283596, "start": 2835.96, "end": 2842.08, "text": " I also would like to invite you to join us because there are not many of us and if you", "tokens": [286, 611, 576, 411, 281, 7980, 291, 281, 3917, 505, 570, 456, 366, 406, 867, 295, 505, 293, 498, 291], "temperature": 0.0, "avg_logprob": -0.21567619930614124, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.001761929364874959}, {"id": 404, "seek": 283596, "start": 2842.08, "end": 2849.92, "text": " want to have OSV alive we definitely need you and so there are some resources about", "tokens": [528, 281, 362, 12731, 53, 5465, 321, 2138, 643, 291, 293, 370, 456, 366, 512, 3593, 466], "temperature": 0.0, "avg_logprob": -0.21567619930614124, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.001761929364874959}, {"id": 405, "seek": 283596, "start": 2849.92, "end": 2856.56, "text": " OSV, there's my P99 presentation here as well and yeah if you guys have any questions I'm", "tokens": [12731, 53, 11, 456, 311, 452, 430, 8494, 5860, 510, 382, 731, 293, 1338, 498, 291, 1074, 362, 604, 1651, 286, 478], "temperature": 0.0, "avg_logprob": -0.21567619930614124, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.001761929364874959}, {"id": 406, "seek": 283596, "start": 2856.56, "end": 2857.84, "text": " happy to answer them, thank you.", "tokens": [2055, 281, 1867, 552, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.21567619930614124, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.001761929364874959}, {"id": 407, "seek": 283596, "start": 2857.84, "end": 2864.36, "text": " Thank you Voldemort, thank you.", "tokens": [1044, 291, 48791, 443, 477, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.21567619930614124, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.001761929364874959}, {"id": 408, "seek": 286436, "start": 2864.36, "end": 2868.88, "text": " So any questions for Voldemort, yeah please Marta, just ask it's going to be a bit of", "tokens": [407, 604, 1651, 337, 48791, 443, 477, 11, 1338, 1767, 5807, 64, 11, 445, 1029, 309, 311, 516, 281, 312, 257, 857, 295], "temperature": 0.0, "avg_logprob": -0.41497650146484377, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.007599342614412308}, {"id": 409, "seek": 286436, "start": 2868.88, "end": 2869.88, "text": " the mic.", "tokens": [264, 3123, 13], "temperature": 0.0, "avg_logprob": -0.41497650146484377, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.007599342614412308}, {"id": 410, "seek": 286436, "start": 2869.88, "end": 2875.88, "text": " Okay I have two questions, first when you have spoken about the symbols, about the", "tokens": [1033, 286, 362, 732, 1651, 11, 700, 562, 291, 362, 10759, 466, 264, 16944, 11, 466, 264], "temperature": 0.0, "avg_logprob": -0.41497650146484377, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.007599342614412308}, {"id": 411, "seek": 286436, "start": 2875.88, "end": 2883.1600000000003, "text": " G-Lipsy symbols and the symbols for symbols, do I understand it correctly that the problem", "tokens": [460, 12, 43, 2600, 88, 16944, 293, 264, 16944, 337, 16944, 11, 360, 286, 1223, 309, 8944, 300, 264, 1154], "temperature": 0.0, "avg_logprob": -0.41497650146484377, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.007599342614412308}, {"id": 412, "seek": 286436, "start": 2883.1600000000003, "end": 2889.6400000000003, "text": " is that the kernel might be using some G-Lipsy functions and the applications might be linked", "tokens": [307, 300, 264, 28256, 1062, 312, 1228, 512, 460, 12, 43, 2600, 88, 6828, 293, 264, 5821, 1062, 312, 9408], "temperature": 0.0, "avg_logprob": -0.41497650146484377, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.007599342614412308}, {"id": 413, "seek": 288964, "start": 2889.64, "end": 2895.4, "text": " to its own G-Lipsy and so-so symbols apply basically?", "tokens": [281, 1080, 1065, 460, 12, 43, 2600, 88, 293, 370, 12, 539, 16944, 3079, 1936, 30], "temperature": 0.0, "avg_logprob": -0.22856509357417396, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012599127367138863}, {"id": 414, "seek": 288964, "start": 2895.4, "end": 2899.7999999999997, "text": " Well not really, they would use the same version it's just you know and there's no problem", "tokens": [1042, 406, 534, 11, 436, 576, 764, 264, 912, 3037, 309, 311, 445, 291, 458, 293, 456, 311, 572, 1154], "temperature": 0.0, "avg_logprob": -0.22856509357417396, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012599127367138863}, {"id": 415, "seek": 288964, "start": 2899.7999999999997, "end": 2906.4, "text": " with for example malloc, like malloc we don't want to expose malloc but there is a good", "tokens": [365, 337, 1365, 16026, 905, 11, 411, 16026, 905, 321, 500, 380, 528, 281, 19219, 16026, 905, 457, 456, 307, 257, 665], "temperature": 0.0, "avg_logprob": -0.22856509357417396, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012599127367138863}, {"id": 416, "seek": 288964, "start": 2906.4, "end": 2912.68, "text": " chunk of OSV is implemented in C++ and all of those symbols don't need to be exposed", "tokens": [16635, 295, 12731, 53, 307, 12270, 294, 383, 25472, 293, 439, 295, 729, 16944, 500, 380, 643, 281, 312, 9495], "temperature": 0.0, "avg_logprob": -0.22856509357417396, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012599127367138863}, {"id": 417, "seek": 288964, "start": 2912.68, "end": 2918.48, "text": " because they inflate the symbols table a lot and they are not, they shouldn't be really", "tokens": [570, 436, 9922, 473, 264, 16944, 3199, 257, 688, 293, 436, 366, 406, 11, 436, 4659, 380, 312, 534], "temperature": 0.0, "avg_logprob": -0.22856509357417396, "compression_ratio": 1.639676113360324, "no_speech_prob": 0.0012599127367138863}, {"id": 418, "seek": 291848, "start": 2918.48, "end": 2927.12, "text": " you know available to, visible to others and yeah I mean now I think OSV exposes if you", "tokens": [291, 458, 2435, 281, 11, 8974, 281, 2357, 293, 1338, 286, 914, 586, 286, 519, 12731, 53, 1278, 4201, 498, 291], "temperature": 0.0, "avg_logprob": -0.27148114717923677, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.0003322529373690486}, {"id": 419, "seek": 291848, "start": 2927.12, "end": 2933.36, "text": " build with that option around I think sixteen hundreds of symbols instead of you know seventeen", "tokens": [1322, 365, 300, 3614, 926, 286, 519, 27847, 6779, 295, 16944, 2602, 295, 291, 458, 39532], "temperature": 0.0, "avg_logprob": -0.27148114717923677, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.0003322529373690486}, {"id": 420, "seek": 291848, "start": 2933.36, "end": 2934.36, "text": " thousands.", "tokens": [5383, 13], "temperature": 0.0, "avg_logprob": -0.27148114717923677, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.0003322529373690486}, {"id": 421, "seek": 291848, "start": 2934.36, "end": 2937.28, "text": " So it's really about the binary size there?", "tokens": [407, 309, 311, 534, 466, 264, 17434, 2744, 456, 30], "temperature": 0.0, "avg_logprob": -0.27148114717923677, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.0003322529373690486}, {"id": 422, "seek": 291848, "start": 2937.28, "end": 2945.36, "text": " Yeah, yeah basically binary size and with in case of C++ library avoiding a collision", "tokens": [865, 11, 1338, 1936, 17434, 2744, 293, 365, 294, 1389, 295, 383, 25472, 6405, 20220, 257, 24644], "temperature": 0.0, "avg_logprob": -0.27148114717923677, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.0003322529373690486}, {"id": 423, "seek": 294536, "start": 2945.36, "end": 2951.1200000000003, "text": " where you build OSV with different version of C++ library versus you know the application", "tokens": [689, 291, 1322, 12731, 53, 365, 819, 3037, 295, 383, 25472, 6405, 5717, 291, 458, 264, 3861], "temperature": 0.0, "avg_logprob": -0.28914874433034876, "compression_ratio": 1.5155555555555555, "no_speech_prob": 0.001091877231374383}, {"id": 424, "seek": 294536, "start": 2951.1200000000003, "end": 2952.1200000000003, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.28914874433034876, "compression_ratio": 1.5155555555555555, "no_speech_prob": 0.001091877231374383}, {"id": 425, "seek": 294536, "start": 2952.1200000000003, "end": 2958.6800000000003, "text": " Yeah okay so this is the case I'm interested in, so have you thought about maybe renaming", "tokens": [865, 1392, 370, 341, 307, 264, 1389, 286, 478, 3102, 294, 11, 370, 362, 291, 1194, 466, 1310, 8124, 5184], "temperature": 0.0, "avg_logprob": -0.28914874433034876, "compression_ratio": 1.5155555555555555, "no_speech_prob": 0.001091877231374383}, {"id": 426, "seek": 294536, "start": 2958.6800000000003, "end": 2965.8, "text": " the symbols in the kernel image during link time, maybe adding some prefixes to all the", "tokens": [264, 16944, 294, 264, 28256, 3256, 1830, 2113, 565, 11, 1310, 5127, 512, 18417, 36005, 281, 439, 264], "temperature": 0.0, "avg_logprob": -0.28914874433034876, "compression_ratio": 1.5155555555555555, "no_speech_prob": 0.001091877231374383}, {"id": 427, "seek": 294536, "start": 2965.8, "end": 2971.36, "text": " symbols so that you can have them visible but they would not clash?", "tokens": [16944, 370, 300, 291, 393, 362, 552, 8974, 457, 436, 576, 406, 36508, 30], "temperature": 0.0, "avg_logprob": -0.28914874433034876, "compression_ratio": 1.5155555555555555, "no_speech_prob": 0.001091877231374383}, {"id": 428, "seek": 297136, "start": 2971.36, "end": 2975.44, "text": " That's an interesting idea, I haven't thought about it yeah.", "tokens": [663, 311, 364, 1880, 1558, 11, 286, 2378, 380, 1194, 466, 309, 1338, 13], "temperature": 0.0, "avg_logprob": -0.47966131956680963, "compression_ratio": 1.6462882096069869, "no_speech_prob": 0.004357212223112583}, {"id": 429, "seek": 297136, "start": 2975.44, "end": 2976.96, "text": " And Marty the other second question, yeah.", "tokens": [400, 29192, 264, 661, 1150, 1168, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.47966131956680963, "compression_ratio": 1.6462882096069869, "no_speech_prob": 0.004357212223112583}, {"id": 430, "seek": 297136, "start": 2976.96, "end": 2981.96, "text": " Yeah that's just a quick second question, so when you have spoken about the latest tag", "tokens": [865, 300, 311, 445, 257, 1702, 1150, 1168, 11, 370, 562, 291, 362, 10759, 466, 264, 6792, 6162], "temperature": 0.0, "avg_logprob": -0.47966131956680963, "compression_ratio": 1.6462882096069869, "no_speech_prob": 0.004357212223112583}, {"id": 431, "seek": 297136, "start": 2981.96, "end": 2988.96, "text": " you said that you pre-fold the stack to avoid the problematic case when it drops in preemption", "tokens": [291, 848, 300, 291, 659, 12, 18353, 264, 8630, 281, 5042, 264, 19011, 1389, 562, 309, 11438, 294, 659, 26033], "temperature": 0.0, "avg_logprob": -0.47966131956680963, "compression_ratio": 1.6462882096069869, "no_speech_prob": 0.004357212223112583}, {"id": 432, "seek": 297136, "start": 2988.96, "end": 2995.2000000000003, "text": " disabled, so basically when I'm thinking about it you still need to have some kind of upper", "tokens": [15191, 11, 370, 1936, 562, 286, 478, 1953, 466, 309, 291, 920, 643, 281, 362, 512, 733, 295, 6597], "temperature": 0.0, "avg_logprob": -0.47966131956680963, "compression_ratio": 1.6462882096069869, "no_speech_prob": 0.004357212223112583}, {"id": 433, "seek": 299520, "start": 2995.2, "end": 3002.2, "text": " bound of the size of the stack so that you know that you pre-fold it large enough to", "tokens": [5472, 295, 264, 2744, 295, 264, 8630, 370, 300, 291, 458, 300, 291, 659, 12, 18353, 309, 2416, 1547, 281], "temperature": 0.0, "avg_logprob": -0.2935216283223715, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0012193293077871203}, {"id": 434, "seek": 299520, "start": 3002.2, "end": 3005.2, "text": " not get into the issue.", "tokens": [406, 483, 666, 264, 2734, 13], "temperature": 0.0, "avg_logprob": -0.2935216283223715, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0012193293077871203}, {"id": 435, "seek": 299520, "start": 3005.2, "end": 3012.2, "text": " So my question is why not then have the kernel stacks in all fixed size because if you already", "tokens": [407, 452, 1168, 307, 983, 406, 550, 362, 264, 28256, 30792, 294, 439, 6806, 2744, 570, 498, 291, 1217], "temperature": 0.0, "avg_logprob": -0.2935216283223715, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0012193293077871203}, {"id": 436, "seek": 299520, "start": 3012.2, "end": 3018.2, "text": " need to have some upper bound then why not have a local upper bound for the whole kernel?", "tokens": [643, 281, 362, 512, 6597, 5472, 550, 983, 406, 362, 257, 2654, 6597, 5472, 337, 264, 1379, 28256, 30], "temperature": 0.0, "avg_logprob": -0.2935216283223715, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0012193293077871203}, {"id": 437, "seek": 299520, "start": 3018.2, "end": 3019.7599999999998, "text": " Wouldn't it be just easier?", "tokens": [26291, 380, 309, 312, 445, 3571, 30], "temperature": 0.0, "avg_logprob": -0.2935216283223715, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.0012193293077871203}, {"id": 438, "seek": 301976, "start": 3019.76, "end": 3026.7200000000003, "text": " Well I mean this is for applications threads only, so for application stacks where the", "tokens": [1042, 286, 914, 341, 307, 337, 5821, 19314, 787, 11, 370, 337, 3861, 30792, 689, 264], "temperature": 0.0, "avg_logprob": -0.278069093492296, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.0002154624235117808}, {"id": 439, "seek": 301976, "start": 3026.7200000000003, "end": 3033.6000000000004, "text": " kernel threads would still have the pre-populated fixed size stack, yeah so because I mean there", "tokens": [28256, 19314, 576, 920, 362, 264, 659, 12, 13872, 6987, 6806, 2744, 8630, 11, 1338, 370, 570, 286, 914, 456], "temperature": 0.0, "avg_logprob": -0.278069093492296, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.0002154624235117808}, {"id": 440, "seek": 301976, "start": 3033.6000000000004, "end": 3039.5200000000004, "text": " are many applications like good example is Java that would start like 200 threads and", "tokens": [366, 867, 5821, 411, 665, 1365, 307, 10745, 300, 576, 722, 411, 2331, 19314, 293], "temperature": 0.0, "avg_logprob": -0.278069093492296, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.0002154624235117808}, {"id": 441, "seek": 301976, "start": 3039.5200000000004, "end": 3045.48, "text": " all of them right now are proposed like one megabyte and all of a sudden need like 200,", "tokens": [439, 295, 552, 558, 586, 366, 10348, 411, 472, 10816, 34529, 293, 439, 295, 257, 3990, 643, 411, 2331, 11], "temperature": 0.0, "avg_logprob": -0.278069093492296, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.0002154624235117808}, {"id": 442, "seek": 301976, "start": 3045.48, "end": 3046.48, "text": " so this is just for application.", "tokens": [370, 341, 307, 445, 337, 3861, 13], "temperature": 0.0, "avg_logprob": -0.278069093492296, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.0002154624235117808}, {"id": 443, "seek": 304648, "start": 3046.48, "end": 3055.48, "text": " Okay so basically my understanding is wrong, so you have the user stack and the kernel", "tokens": [1033, 370, 1936, 452, 3701, 307, 2085, 11, 370, 291, 362, 264, 4195, 8630, 293, 264, 28256], "temperature": 0.0, "avg_logprob": -0.32860418268152186, "compression_ratio": 1.675977653631285, "no_speech_prob": 0.0016488959081470966}, {"id": 444, "seek": 304648, "start": 3055.48, "end": 3057.8, "text": " stack is the same stack?", "tokens": [8630, 307, 264, 912, 8630, 30], "temperature": 0.0, "avg_logprob": -0.32860418268152186, "compression_ratio": 1.675977653631285, "no_speech_prob": 0.0016488959081470966}, {"id": 445, "seek": 304648, "start": 3057.8, "end": 3068.2400000000002, "text": " Well no, it's in the same virtual memory but yeah, I mean when I say kernel stack I mean", "tokens": [1042, 572, 11, 309, 311, 294, 264, 912, 6374, 4675, 457, 1338, 11, 286, 914, 562, 286, 584, 28256, 8630, 286, 914], "temperature": 0.0, "avg_logprob": -0.32860418268152186, "compression_ratio": 1.675977653631285, "no_speech_prob": 0.0016488959081470966}, {"id": 446, "seek": 304648, "start": 3068.2400000000002, "end": 3073.36, "text": " in OSV basically there are two types of threads, there are kernel threads and there are application", "tokens": [294, 12731, 53, 1936, 456, 366, 732, 3467, 295, 19314, 11, 456, 366, 28256, 19314, 293, 456, 366, 3861], "temperature": 0.0, "avg_logprob": -0.32860418268152186, "compression_ratio": 1.675977653631285, "no_speech_prob": 0.0016488959081470966}, {"id": 447, "seek": 307336, "start": 3073.36, "end": 3080.36, "text": " threads so basically application threads use their own stack, but when they enter the kernel", "tokens": [19314, 370, 1936, 3861, 19314, 764, 641, 1065, 8630, 11, 457, 562, 436, 3242, 264, 28256], "temperature": 0.0, "avg_logprob": -0.26997506128598564, "compression_ratio": 1.8388888888888888, "no_speech_prob": 0.0001699048007139936}, {"id": 448, "seek": 307336, "start": 3080.36, "end": 3085.6800000000003, "text": " so to speak they are still reusing the original stack right?", "tokens": [370, 281, 1710, 436, 366, 920, 319, 7981, 264, 3380, 8630, 558, 30], "temperature": 0.0, "avg_logprob": -0.26997506128598564, "compression_ratio": 1.8388888888888888, "no_speech_prob": 0.0001699048007139936}, {"id": 449, "seek": 307336, "start": 3085.6800000000003, "end": 3091.4, "text": " I mean application threads use application stack and kernel use kernel and when I say", "tokens": [286, 914, 3861, 19314, 764, 3861, 8630, 293, 28256, 764, 28256, 293, 562, 286, 584], "temperature": 0.0, "avg_logprob": -0.26997506128598564, "compression_ratio": 1.8388888888888888, "no_speech_prob": 0.0001699048007139936}, {"id": 450, "seek": 307336, "start": 3091.4, "end": 3101.2000000000003, "text": " like some kernel code obviously because unicernel as the code executes in an application it", "tokens": [411, 512, 28256, 3089, 2745, 570, 517, 299, 1248, 338, 382, 264, 3089, 4454, 1819, 294, 364, 3861, 309], "temperature": 0.0, "avg_logprob": -0.26997506128598564, "compression_ratio": 1.8388888888888888, "no_speech_prob": 0.0001699048007139936}, {"id": 451, "seek": 310120, "start": 3101.2, "end": 3109.8799999999997, "text": " runs on application stack but it might execute some kernel code as well which yeah, yeah.", "tokens": [6676, 322, 3861, 8630, 457, 309, 1062, 14483, 512, 28256, 3089, 382, 731, 597, 1338, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.3926924328471339, "compression_ratio": 1.2519685039370079, "no_speech_prob": 0.000761751551181078}, {"id": 452, "seek": 310120, "start": 3109.8799999999997, "end": 3112.04, "text": " Thank you, any other question?", "tokens": [1044, 291, 11, 604, 661, 1168, 30], "temperature": 0.0, "avg_logprob": -0.3926924328471339, "compression_ratio": 1.2519685039370079, "no_speech_prob": 0.000761751551181078}, {"id": 453, "seek": 311204, "start": 3112.04, "end": 3132.16, "text": " Okay thank you so much, let's move on.", "tokens": [50364, 1033, 1309, 291, 370, 709, 11, 718, 311, 1286, 322, 13, 51370], "temperature": 0.0, "avg_logprob": -0.379950795854841, "compression_ratio": 0.8260869565217391, "no_speech_prob": 0.006859094835817814}], "language": "en"}