{"text": " up to you. Can I start? Okay. Can you hear me? Okay. I am Gabriele Falazca, a front-end developer working in a company called Surzents and located in Rome. And if you don't understand, I will speak to you about a finite set machine with some example inspired by retro game and arcade games of the 90s. Let's start with this slide that is very clear and self-explanatory. A finite set machine is an abstract machine that can be exactly in one of finite states at any given time. It can change from a state to another in response to some inputs. This is the Wikipedia definition of finite state machine. And it's very theoretical definition. But now we will see how to apply that pattern in programming. For a representative finite state machine, you can use the state charts that are a sort of graphs where the states, the nodes are called the states. And the links between the nodes are called the transitions. This is the state charts of an application that made a fetch call. So we have the state of the application is idle, loading, such as, and failure. And the events that trigger the transition are fetch event that trigger the transition from idle to loading. Reactive event that trigger the transition from loading to failure. Retrievent that triggers the transition from failure to loading. And resolve event that trigger the transition from loading to such as. Another state chart is this, a little bit complex. This is an elevator. An elevator starts in idle state. When a user called the elevator, he passes to state prepared up or prepared down, based on the floor where is it in that moment. When the user select the floor, elevator passing state moving until it reaches the right floor. After it reaches the right floor, elevator passing in state door opening. And when the user left the cabin, elevator returns to idle state. Now let's create a state chart. Yes, we are going to create the state chart of this animation. Okay, the chart take off his panties, make military grids, and return to idle. So the states of the state chart are idle state. When a waiting, panty state, and military state. Before defining transition, I think I give you some context about this chart there. If you don't know, this chart there is called Yaku Taro Chimori, is a side chart of a famous arcade game in the 90s called Metaslag. He triggered this animation when the main character, Marco, worked near to him, and he made this animation for dropping bombs, a reward for the main character. So the first event that linked the idle state with the panty state is Marco is near. Second event that connect the panty state with the military state is a reward drop. Because after drop the reward, he redress his panties and grids Marco with military grids. And after, when Marco is far, he returns to idle state. Now let's see this event live, but before, I want to show you the simplest code of finite state machine. It's a JavaScript, because here we are in a room called JavaScript Debrum. But you can apply this pattern in every modern programming language. It's a simple ES6 class with two methods. One for setting a state, and the other one for executing the routine of the current state. This machine live we can see here. This is a little part of Metaslag game in the browser. I made for demo. When you press the arrow right and left, Marco walks back and forward, and when he's near Yakutaro, in very big screen, there are a lot of iterations. Yakutaro plays his animation, take off the panties and grids Marco. When Marco returns far, he returns to idle state. Let's see the code of this demo. We have, you see, I have to zoom. Okay. Okay, this is the HTML page. It's very simple. It has a sheen, that's the sheen, and two images that are the sprites of two charters. Now, we have a simple entry point of the application that has a demo list for the arrow keys, and initialize the script for Marco and Yakutaro. Our machine is the same, so in the slide. And the two script for Marco and Yakutaro. Marco is a simple script as just two methods for going back and forward. And Yakutaro script is as the finished machine as brain. So it has the three methods that are the states we have defined before, and another utility method for observing Marco and trigger the events for changing the states of the machine. And it's just this code. Return to slide. Another type of machine, a bit optimized from this, is the stack-based finite state machine. This kind of machine has not a single active state, but as a stack of state, and consider active the state on top of the stack. So in this model, you can navigate through the states back and forward way. Think the history of the browser like our finite state machine, where think to the web pages as the states, and the back and forward event of the browser, the events that trigger the transition. Okay, it's clear. This is the code of stack-based finite state machine. It's very similar to the previous one, but we have the stack of the states instead of the active state, and three utility for pushing and popping the state in the stack. Very simple. If you have to develop a more complex machine, there are various tools and frameworks. In JavaScript, the most famous is Xstate. That is a series of utility for finite state chart and finite state machine. This is the code of a machine created with Xstate. It's a very functionally way. We have got utility for creating the machine, all configuration based, and a toggle service for defining and sending the event, and define the transitions. My goal in this talk is not to show you a single framework, because you can choose one study by yourself. I want to explain the theory and the pattern, and how to apply it to real life. I introduced Xstate, because it has a cool tool called XstateVidz, that can help you to test your machine. The tool is this. I don't know if you see. This is the same state chart of our previous event, and it's interactive. You can trigger the events directly from the chart, and see what's happened. On the sidebar, you have three tabs. In the first one, you can put the code of your machine in Xstate way. The second tab is the state that contains all information of the current state of the machine. From the third tab, you can programmatically send the event for testing your machine. As you can see, I can send the event directly from here. You can reset the machine. My talk is finished. Have you got any questions? Who has the first question? And do raise the hands. Hello. Thank you for your presentation. What happens to your state if an event is triggered that you can't handle? What happens to your state if an event is triggered that you can't handle at that state? If they are not connected to a transition, nothing happens, because the machine doesn't respond to this event. This depends on the implementation that you use. In Xstate, the most famous implementation, this thing is safe. It depends on which machine you use and how you have implemented. Okay? Next question, raise your hand very high, please. While you think about it, thank you for the video team up there with the green T-shirt. They'll hear it after. Don't worry. They hear everything. How is the animation graphically that we see on the screen is handled with regard to the state machine because there is some delay. It has some time of duration. Thank you. The animation is how it's made. Okay. I have just the three sprites and every state of the machine set the correct sprite in the image tag and prepare the machine for the next state. Observe Marco is updated the state and run the routine of every state. Next question. Okay. Will you be around? Will you be around? Will you be in the deaf room or outside? There are no more questions. Thanks again. Okay. Thanks for the fish.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.0, "text": " up to you. Can I start? Okay. Can you hear me? Okay. I am Gabriele Falazca, a front-end", "tokens": [493, 281, 291, 13, 1664, 286, 722, 30, 1033, 13, 1664, 291, 1568, 385, 30, 1033, 13, 286, 669, 50053, 306, 15202, 921, 496, 11, 257, 1868, 12, 521], "temperature": 0.0, "avg_logprob": -0.33953724588666645, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.1111508160829544}, {"id": 1, "seek": 0, "start": 15.0, "end": 23.080000000000002, "text": " developer working in a company called Surzents and located in Rome. And if you don't understand,", "tokens": [10754, 1364, 294, 257, 2237, 1219, 6732, 89, 791, 293, 6870, 294, 12043, 13, 400, 498, 291, 500, 380, 1223, 11], "temperature": 0.0, "avg_logprob": -0.33953724588666645, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.1111508160829544}, {"id": 2, "seek": 2308, "start": 23.08, "end": 30.159999999999997, "text": " I will speak to you about a finite set machine with some example inspired by retro game and", "tokens": [286, 486, 1710, 281, 291, 466, 257, 19362, 992, 3479, 365, 512, 1365, 7547, 538, 18820, 1216, 293], "temperature": 0.0, "avg_logprob": -0.2787235601624446, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.000743295531719923}, {"id": 3, "seek": 2308, "start": 30.159999999999997, "end": 42.44, "text": " arcade games of the 90s. Let's start with this slide that is very clear and self-explanatory.", "tokens": [25664, 2813, 295, 264, 4289, 82, 13, 961, 311, 722, 365, 341, 4137, 300, 307, 588, 1850, 293, 2698, 12, 3121, 16554, 4745, 13], "temperature": 0.0, "avg_logprob": -0.2787235601624446, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.000743295531719923}, {"id": 4, "seek": 2308, "start": 42.44, "end": 48.04, "text": " A finite set machine is an abstract machine that can be exactly in one of finite states", "tokens": [316, 19362, 992, 3479, 307, 364, 12649, 3479, 300, 393, 312, 2293, 294, 472, 295, 19362, 4368], "temperature": 0.0, "avg_logprob": -0.2787235601624446, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.000743295531719923}, {"id": 5, "seek": 4804, "start": 48.04, "end": 53.48, "text": " at any given time. It can change from a state to another in response to some inputs. This is", "tokens": [412, 604, 2212, 565, 13, 467, 393, 1319, 490, 257, 1785, 281, 1071, 294, 4134, 281, 512, 15743, 13, 639, 307], "temperature": 0.0, "avg_logprob": -0.19742488861083984, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00039976733387447894}, {"id": 6, "seek": 4804, "start": 53.48, "end": 60.879999999999995, "text": " the Wikipedia definition of finite state machine. And it's very theoretical definition. But now", "tokens": [264, 28999, 7123, 295, 19362, 1785, 3479, 13, 400, 309, 311, 588, 20864, 7123, 13, 583, 586], "temperature": 0.0, "avg_logprob": -0.19742488861083984, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00039976733387447894}, {"id": 7, "seek": 4804, "start": 60.879999999999995, "end": 72.12, "text": " we will see how to apply that pattern in programming. For a representative finite state", "tokens": [321, 486, 536, 577, 281, 3079, 300, 5102, 294, 9410, 13, 1171, 257, 12424, 19362, 1785], "temperature": 0.0, "avg_logprob": -0.19742488861083984, "compression_ratio": 1.5164835164835164, "no_speech_prob": 0.00039976733387447894}, {"id": 8, "seek": 7212, "start": 72.12, "end": 80.16000000000001, "text": " machine, you can use the state charts that are a sort of graphs where the states, the nodes are", "tokens": [3479, 11, 291, 393, 764, 264, 1785, 17767, 300, 366, 257, 1333, 295, 24877, 689, 264, 4368, 11, 264, 13891, 366], "temperature": 0.0, "avg_logprob": -0.21386028372723123, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.00022034294670447707}, {"id": 9, "seek": 7212, "start": 80.16000000000001, "end": 89.92, "text": " called the states. And the links between the nodes are called the transitions. This is the state", "tokens": [1219, 264, 4368, 13, 400, 264, 6123, 1296, 264, 13891, 366, 1219, 264, 23767, 13, 639, 307, 264, 1785], "temperature": 0.0, "avg_logprob": -0.21386028372723123, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.00022034294670447707}, {"id": 10, "seek": 8992, "start": 89.92, "end": 103.36, "text": " charts of an application that made a fetch call. So we have the state of the application is idle,", "tokens": [17767, 295, 364, 3861, 300, 1027, 257, 23673, 818, 13, 407, 321, 362, 264, 1785, 295, 264, 3861, 307, 30650, 11], "temperature": 0.0, "avg_logprob": -0.19864755868911743, "compression_ratio": 1.912751677852349, "no_speech_prob": 1.6686621165717952e-05}, {"id": 11, "seek": 8992, "start": 103.36, "end": 112.0, "text": " loading, such as, and failure. And the events that trigger the transition are fetch event that", "tokens": [15114, 11, 1270, 382, 11, 293, 7763, 13, 400, 264, 3931, 300, 7875, 264, 6034, 366, 23673, 2280, 300], "temperature": 0.0, "avg_logprob": -0.19864755868911743, "compression_ratio": 1.912751677852349, "no_speech_prob": 1.6686621165717952e-05}, {"id": 12, "seek": 8992, "start": 112.0, "end": 118.84, "text": " trigger the transition from idle to loading. Reactive event that trigger the transition from", "tokens": [7875, 264, 6034, 490, 30650, 281, 15114, 13, 1300, 12596, 2280, 300, 7875, 264, 6034, 490], "temperature": 0.0, "avg_logprob": -0.19864755868911743, "compression_ratio": 1.912751677852349, "no_speech_prob": 1.6686621165717952e-05}, {"id": 13, "seek": 11884, "start": 118.84, "end": 126.4, "text": " loading to failure. Retrievent that triggers the transition from failure to loading. And resolve", "tokens": [15114, 281, 7763, 13, 11495, 5469, 2475, 300, 22827, 264, 6034, 490, 7763, 281, 15114, 13, 400, 14151], "temperature": 0.0, "avg_logprob": -0.20526457941809365, "compression_ratio": 1.6355932203389831, "no_speech_prob": 2.0642761228373274e-05}, {"id": 14, "seek": 11884, "start": 126.4, "end": 141.0, "text": " event that trigger the transition from loading to such as. Another state chart is this, a little", "tokens": [2280, 300, 7875, 264, 6034, 490, 15114, 281, 1270, 382, 13, 3996, 1785, 6927, 307, 341, 11, 257, 707], "temperature": 0.0, "avg_logprob": -0.20526457941809365, "compression_ratio": 1.6355932203389831, "no_speech_prob": 2.0642761228373274e-05}, {"id": 15, "seek": 14100, "start": 141.0, "end": 150.0, "text": " bit complex. This is an elevator. An elevator starts in idle state. When a user called the", "tokens": [857, 3997, 13, 639, 307, 364, 18782, 13, 1107, 18782, 3719, 294, 30650, 1785, 13, 1133, 257, 4195, 1219, 264], "temperature": 0.0, "avg_logprob": -0.2270140861397359, "compression_ratio": 1.6863905325443787, "no_speech_prob": 7.807748625054955e-05}, {"id": 16, "seek": 14100, "start": 150.0, "end": 155.96, "text": " elevator, he passes to state prepared up or prepared down, based on the floor where is it in that", "tokens": [18782, 11, 415, 11335, 281, 1785, 4927, 493, 420, 4927, 760, 11, 2361, 322, 264, 4123, 689, 307, 309, 294, 300], "temperature": 0.0, "avg_logprob": -0.2270140861397359, "compression_ratio": 1.6863905325443787, "no_speech_prob": 7.807748625054955e-05}, {"id": 17, "seek": 14100, "start": 155.96, "end": 167.04, "text": " moment. When the user select the floor, elevator passing state moving until it reaches the right", "tokens": [1623, 13, 1133, 264, 4195, 3048, 264, 4123, 11, 18782, 8437, 1785, 2684, 1826, 309, 14235, 264, 558], "temperature": 0.0, "avg_logprob": -0.2270140861397359, "compression_ratio": 1.6863905325443787, "no_speech_prob": 7.807748625054955e-05}, {"id": 18, "seek": 16704, "start": 167.04, "end": 175.39999999999998, "text": " floor. After it reaches the right floor, elevator passing in state door opening. And when the user", "tokens": [4123, 13, 2381, 309, 14235, 264, 558, 4123, 11, 18782, 8437, 294, 1785, 2853, 5193, 13, 400, 562, 264, 4195], "temperature": 0.0, "avg_logprob": -0.19655764832788583, "compression_ratio": 1.4202898550724639, "no_speech_prob": 3.1794690585229546e-05}, {"id": 19, "seek": 16704, "start": 175.39999999999998, "end": 187.0, "text": " left the cabin, elevator returns to idle state. Now let's create a state chart. Yes, we are going", "tokens": [1411, 264, 9401, 11, 18782, 11247, 281, 30650, 1785, 13, 823, 718, 311, 1884, 257, 1785, 6927, 13, 1079, 11, 321, 366, 516], "temperature": 0.0, "avg_logprob": -0.19655764832788583, "compression_ratio": 1.4202898550724639, "no_speech_prob": 3.1794690585229546e-05}, {"id": 20, "seek": 18700, "start": 187.0, "end": 198.12, "text": " to create the state chart of this animation. Okay, the chart take off his panties, make military", "tokens": [281, 1884, 264, 1785, 6927, 295, 341, 9603, 13, 1033, 11, 264, 6927, 747, 766, 702, 14869, 530, 11, 652, 4632], "temperature": 0.0, "avg_logprob": -0.3118803215026855, "compression_ratio": 1.492063492063492, "no_speech_prob": 7.438212196575478e-05}, {"id": 21, "seek": 18700, "start": 198.12, "end": 209.32, "text": " grids, and return to idle. So the states of the state chart are idle state. When a waiting,", "tokens": [677, 3742, 11, 293, 2736, 281, 30650, 13, 407, 264, 4368, 295, 264, 1785, 6927, 366, 30650, 1785, 13, 1133, 257, 3806, 11], "temperature": 0.0, "avg_logprob": -0.3118803215026855, "compression_ratio": 1.492063492063492, "no_speech_prob": 7.438212196575478e-05}, {"id": 22, "seek": 20932, "start": 209.32, "end": 222.23999999999998, "text": " panty state, and military state. Before defining transition, I think I give you some context", "tokens": [14869, 88, 1785, 11, 293, 4632, 1785, 13, 4546, 17827, 6034, 11, 286, 519, 286, 976, 291, 512, 4319], "temperature": 0.0, "avg_logprob": -0.3305240207248264, "compression_ratio": 1.5, "no_speech_prob": 0.00015441760479006916}, {"id": 23, "seek": 20932, "start": 222.23999999999998, "end": 228.92, "text": " about this chart there. If you don't know, this chart there is called Yaku Taro Chimori,", "tokens": [466, 341, 6927, 456, 13, 759, 291, 500, 380, 458, 11, 341, 6927, 456, 307, 1219, 398, 15803, 314, 9708, 761, 332, 7386, 11], "temperature": 0.0, "avg_logprob": -0.3305240207248264, "compression_ratio": 1.5, "no_speech_prob": 0.00015441760479006916}, {"id": 24, "seek": 20932, "start": 228.92, "end": 237.2, "text": " is a side chart of a famous arcade game in the 90s called Metaslag. He triggered this", "tokens": [307, 257, 1252, 6927, 295, 257, 4618, 25664, 1216, 294, 264, 4289, 82, 1219, 6377, 296, 27298, 13, 634, 21710, 341], "temperature": 0.0, "avg_logprob": -0.3305240207248264, "compression_ratio": 1.5, "no_speech_prob": 0.00015441760479006916}, {"id": 25, "seek": 23720, "start": 237.2, "end": 245.72, "text": " animation when the main character, Marco, worked near to him, and he made this animation for", "tokens": [9603, 562, 264, 2135, 2517, 11, 26535, 11, 2732, 2651, 281, 796, 11, 293, 415, 1027, 341, 9603, 337], "temperature": 0.0, "avg_logprob": -0.23114776611328125, "compression_ratio": 1.7654320987654322, "no_speech_prob": 7.145084236981347e-05}, {"id": 26, "seek": 23720, "start": 245.72, "end": 255.88, "text": " dropping bombs, a reward for the main character. So the first event that linked the idle state", "tokens": [13601, 19043, 11, 257, 7782, 337, 264, 2135, 2517, 13, 407, 264, 700, 2280, 300, 9408, 264, 30650, 1785], "temperature": 0.0, "avg_logprob": -0.23114776611328125, "compression_ratio": 1.7654320987654322, "no_speech_prob": 7.145084236981347e-05}, {"id": 27, "seek": 23720, "start": 255.88, "end": 264.64, "text": " with the panty state is Marco is near. Second event that connect the panty state with the military", "tokens": [365, 264, 14869, 88, 1785, 307, 26535, 307, 2651, 13, 5736, 2280, 300, 1745, 264, 14869, 88, 1785, 365, 264, 4632], "temperature": 0.0, "avg_logprob": -0.23114776611328125, "compression_ratio": 1.7654320987654322, "no_speech_prob": 7.145084236981347e-05}, {"id": 28, "seek": 26464, "start": 264.64, "end": 273.03999999999996, "text": " state is a reward drop. Because after drop the reward, he redress his panties and grids Marco", "tokens": [1785, 307, 257, 7782, 3270, 13, 1436, 934, 3270, 264, 7782, 11, 415, 2182, 735, 702, 14869, 530, 293, 677, 3742, 26535], "temperature": 0.0, "avg_logprob": -0.2137476268567537, "compression_ratio": 1.5326086956521738, "no_speech_prob": 5.117264299769886e-05}, {"id": 29, "seek": 26464, "start": 273.03999999999996, "end": 283.52, "text": " with military grids. And after, when Marco is far, he returns to idle state. Now let's see this", "tokens": [365, 4632, 677, 3742, 13, 400, 934, 11, 562, 26535, 307, 1400, 11, 415, 11247, 281, 30650, 1785, 13, 823, 718, 311, 536, 341], "temperature": 0.0, "avg_logprob": -0.2137476268567537, "compression_ratio": 1.5326086956521738, "no_speech_prob": 5.117264299769886e-05}, {"id": 30, "seek": 26464, "start": 283.52, "end": 290.56, "text": " event live, but before, I want to show you the simplest code of finite state machine. It's a", "tokens": [2280, 1621, 11, 457, 949, 11, 286, 528, 281, 855, 291, 264, 22811, 3089, 295, 19362, 1785, 3479, 13, 467, 311, 257], "temperature": 0.0, "avg_logprob": -0.2137476268567537, "compression_ratio": 1.5326086956521738, "no_speech_prob": 5.117264299769886e-05}, {"id": 31, "seek": 29056, "start": 290.56, "end": 299.8, "text": " JavaScript, because here we are in a room called JavaScript Debrum. But you can apply this pattern", "tokens": [15778, 11, 570, 510, 321, 366, 294, 257, 1808, 1219, 15778, 1346, 1443, 449, 13, 583, 291, 393, 3079, 341, 5102], "temperature": 0.0, "avg_logprob": -0.2576130979201373, "compression_ratio": 1.4422110552763818, "no_speech_prob": 0.0001575046480866149}, {"id": 32, "seek": 29056, "start": 299.8, "end": 307.44, "text": " in every modern programming language. It's a simple ES6 class with two methods. One for setting", "tokens": [294, 633, 4363, 9410, 2856, 13, 467, 311, 257, 2199, 12564, 21, 1508, 365, 732, 7150, 13, 1485, 337, 3287], "temperature": 0.0, "avg_logprob": -0.2576130979201373, "compression_ratio": 1.4422110552763818, "no_speech_prob": 0.0001575046480866149}, {"id": 33, "seek": 29056, "start": 307.44, "end": 320.0, "text": " a state, and the other one for executing the routine of the current state. This machine live", "tokens": [257, 1785, 11, 293, 264, 661, 472, 337, 32368, 264, 9927, 295, 264, 2190, 1785, 13, 639, 3479, 1621], "temperature": 0.0, "avg_logprob": -0.2576130979201373, "compression_ratio": 1.4422110552763818, "no_speech_prob": 0.0001575046480866149}, {"id": 34, "seek": 32000, "start": 320.0, "end": 332.36, "text": " we can see here. This is a little part of Metaslag game in the browser. I made for demo. When you", "tokens": [321, 393, 536, 510, 13, 639, 307, 257, 707, 644, 295, 6377, 296, 27298, 1216, 294, 264, 11185, 13, 286, 1027, 337, 10723, 13, 1133, 291], "temperature": 0.0, "avg_logprob": -0.205166463498716, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0001203238352900371}, {"id": 35, "seek": 32000, "start": 332.36, "end": 342.64, "text": " press the arrow right and left, Marco walks back and forward, and when he's near Yakutaro,", "tokens": [1886, 264, 11610, 558, 293, 1411, 11, 26535, 12896, 646, 293, 2128, 11, 293, 562, 415, 311, 2651, 31484, 325, 9708, 11], "temperature": 0.0, "avg_logprob": -0.205166463498716, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0001203238352900371}, {"id": 36, "seek": 34264, "start": 342.64, "end": 354.15999999999997, "text": " in very big screen, there are a lot of iterations. Yakutaro plays his animation, take off the", "tokens": [294, 588, 955, 2568, 11, 456, 366, 257, 688, 295, 36540, 13, 31484, 325, 9708, 5749, 702, 9603, 11, 747, 766, 264], "temperature": 0.0, "avg_logprob": -0.20169366323030913, "compression_ratio": 1.3970588235294117, "no_speech_prob": 4.643228749046102e-05}, {"id": 37, "seek": 34264, "start": 354.15999999999997, "end": 362.88, "text": " panties and grids Marco. When Marco returns far, he returns to idle state. Let's see the code of", "tokens": [14869, 530, 293, 677, 3742, 26535, 13, 1133, 26535, 11247, 1400, 11, 415, 11247, 281, 30650, 1785, 13, 961, 311, 536, 264, 3089, 295], "temperature": 0.0, "avg_logprob": -0.20169366323030913, "compression_ratio": 1.3970588235294117, "no_speech_prob": 4.643228749046102e-05}, {"id": 38, "seek": 36288, "start": 362.88, "end": 390.6, "text": " this demo. We have, you see, I have to zoom. Okay. Okay, this is the HTML page. It's very simple.", "tokens": [341, 10723, 13, 492, 362, 11, 291, 536, 11, 286, 362, 281, 8863, 13, 1033, 13, 1033, 11, 341, 307, 264, 17995, 3028, 13, 467, 311, 588, 2199, 13], "temperature": 0.0, "avg_logprob": -0.20101350726503314, "compression_ratio": 1.0777777777777777, "no_speech_prob": 0.000701847777236253}, {"id": 39, "seek": 39060, "start": 390.6, "end": 402.20000000000005, "text": " It has a sheen, that's the sheen, and two images that are the sprites of two charters. Now, we", "tokens": [467, 575, 257, 750, 268, 11, 300, 311, 264, 750, 268, 11, 293, 732, 5267, 300, 366, 264, 637, 30931, 295, 732, 1290, 1559, 13, 823, 11, 321], "temperature": 0.0, "avg_logprob": -0.3005372084580459, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00017397636838722974}, {"id": 40, "seek": 39060, "start": 402.20000000000005, "end": 408.24, "text": " have a simple entry point of the application that has a demo list for the arrow keys, and", "tokens": [362, 257, 2199, 8729, 935, 295, 264, 3861, 300, 575, 257, 10723, 1329, 337, 264, 11610, 9317, 11, 293], "temperature": 0.0, "avg_logprob": -0.3005372084580459, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00017397636838722974}, {"id": 41, "seek": 39060, "start": 408.24, "end": 420.12, "text": " initialize the script for Marco and Yakutaro. Our machine is the same, so in the slide.", "tokens": [5883, 1125, 264, 5755, 337, 26535, 293, 31484, 325, 9708, 13, 2621, 3479, 307, 264, 912, 11, 370, 294, 264, 4137, 13], "temperature": 0.0, "avg_logprob": -0.3005372084580459, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00017397636838722974}, {"id": 42, "seek": 42012, "start": 420.12, "end": 429.56, "text": " And the two script for Marco and Yakutaro. Marco is a simple script as just two methods for going", "tokens": [400, 264, 732, 5755, 337, 26535, 293, 31484, 325, 9708, 13, 26535, 307, 257, 2199, 5755, 382, 445, 732, 7150, 337, 516], "temperature": 0.0, "avg_logprob": -0.23532724380493164, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.0003942482580896467}, {"id": 43, "seek": 42012, "start": 429.56, "end": 442.64, "text": " back and forward. And Yakutaro script is as the finished machine as brain. So it has the three", "tokens": [646, 293, 2128, 13, 400, 31484, 325, 9708, 5755, 307, 382, 264, 4335, 3479, 382, 3567, 13, 407, 309, 575, 264, 1045], "temperature": 0.0, "avg_logprob": -0.23532724380493164, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.0003942482580896467}, {"id": 44, "seek": 44264, "start": 442.64, "end": 450.68, "text": " methods that are the states we have defined before, and another utility method for observing", "tokens": [7150, 300, 366, 264, 4368, 321, 362, 7642, 949, 11, 293, 1071, 14877, 3170, 337, 22107], "temperature": 0.0, "avg_logprob": -0.21186008907499768, "compression_ratio": 1.3984962406015038, "no_speech_prob": 7.11627071723342e-05}, {"id": 45, "seek": 44264, "start": 450.68, "end": 462.64, "text": " Marco and trigger the events for changing the states of the machine. And it's just this code.", "tokens": [26535, 293, 7875, 264, 3931, 337, 4473, 264, 4368, 295, 264, 3479, 13, 400, 309, 311, 445, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.21186008907499768, "compression_ratio": 1.3984962406015038, "no_speech_prob": 7.11627071723342e-05}, {"id": 46, "seek": 46264, "start": 462.64, "end": 479.52, "text": " Return to slide. Another type of machine, a bit optimized from this, is the stack-based", "tokens": [24350, 281, 4137, 13, 3996, 2010, 295, 3479, 11, 257, 857, 26941, 490, 341, 11, 307, 264, 8630, 12, 6032], "temperature": 0.0, "avg_logprob": -0.26045022408167523, "compression_ratio": 1.4198473282442747, "no_speech_prob": 8.650949166622013e-05}, {"id": 47, "seek": 46264, "start": 479.52, "end": 486.8, "text": " finite state machine. This kind of machine has not a single active state, but as a stack of state,", "tokens": [19362, 1785, 3479, 13, 639, 733, 295, 3479, 575, 406, 257, 2167, 4967, 1785, 11, 457, 382, 257, 8630, 295, 1785, 11], "temperature": 0.0, "avg_logprob": -0.26045022408167523, "compression_ratio": 1.4198473282442747, "no_speech_prob": 8.650949166622013e-05}, {"id": 48, "seek": 48680, "start": 486.8, "end": 496.44, "text": " and consider active the state on top of the stack. So in this model, you can navigate through the", "tokens": [293, 1949, 4967, 264, 1785, 322, 1192, 295, 264, 8630, 13, 407, 294, 341, 2316, 11, 291, 393, 12350, 807, 264], "temperature": 0.0, "avg_logprob": -0.2127229775955428, "compression_ratio": 1.7345679012345678, "no_speech_prob": 7.638870010850951e-05}, {"id": 49, "seek": 48680, "start": 496.44, "end": 504.8, "text": " states back and forward way. Think the history of the browser like our finite state machine,", "tokens": [4368, 646, 293, 2128, 636, 13, 6557, 264, 2503, 295, 264, 11185, 411, 527, 19362, 1785, 3479, 11], "temperature": 0.0, "avg_logprob": -0.2127229775955428, "compression_ratio": 1.7345679012345678, "no_speech_prob": 7.638870010850951e-05}, {"id": 50, "seek": 48680, "start": 504.8, "end": 512.2, "text": " where think to the web pages as the states, and the back and forward event of the browser,", "tokens": [689, 519, 281, 264, 3670, 7183, 382, 264, 4368, 11, 293, 264, 646, 293, 2128, 2280, 295, 264, 11185, 11], "temperature": 0.0, "avg_logprob": -0.2127229775955428, "compression_ratio": 1.7345679012345678, "no_speech_prob": 7.638870010850951e-05}, {"id": 51, "seek": 51220, "start": 512.2, "end": 521.08, "text": " the events that trigger the transition. Okay, it's clear. This is the code of stack-based", "tokens": [264, 3931, 300, 7875, 264, 6034, 13, 1033, 11, 309, 311, 1850, 13, 639, 307, 264, 3089, 295, 8630, 12, 6032], "temperature": 0.0, "avg_logprob": -0.17800819009974383, "compression_ratio": 1.5611111111111111, "no_speech_prob": 2.0537296222755685e-05}, {"id": 52, "seek": 51220, "start": 521.08, "end": 526.6, "text": " finite state machine. It's very similar to the previous one, but we have the stack of the states", "tokens": [19362, 1785, 3479, 13, 467, 311, 588, 2531, 281, 264, 3894, 472, 11, 457, 321, 362, 264, 8630, 295, 264, 4368], "temperature": 0.0, "avg_logprob": -0.17800819009974383, "compression_ratio": 1.5611111111111111, "no_speech_prob": 2.0537296222755685e-05}, {"id": 53, "seek": 51220, "start": 526.6, "end": 536.0400000000001, "text": " instead of the active state, and three utility for pushing and popping the state in the stack.", "tokens": [2602, 295, 264, 4967, 1785, 11, 293, 1045, 14877, 337, 7380, 293, 18374, 264, 1785, 294, 264, 8630, 13], "temperature": 0.0, "avg_logprob": -0.17800819009974383, "compression_ratio": 1.5611111111111111, "no_speech_prob": 2.0537296222755685e-05}, {"id": 54, "seek": 53604, "start": 536.04, "end": 550.7199999999999, "text": " Very simple. If you have to develop a more complex machine, there are various tools and", "tokens": [4372, 2199, 13, 759, 291, 362, 281, 1499, 257, 544, 3997, 3479, 11, 456, 366, 3683, 3873, 293], "temperature": 0.0, "avg_logprob": -0.2611050051312114, "compression_ratio": 1.291044776119403, "no_speech_prob": 7.028834079392254e-05}, {"id": 55, "seek": 53604, "start": 550.7199999999999, "end": 562.56, "text": " frameworks. In JavaScript, the most famous is Xstate. That is a series of utility for", "tokens": [29834, 13, 682, 15778, 11, 264, 881, 4618, 307, 1783, 15406, 13, 663, 307, 257, 2638, 295, 14877, 337], "temperature": 0.0, "avg_logprob": -0.2611050051312114, "compression_ratio": 1.291044776119403, "no_speech_prob": 7.028834079392254e-05}, {"id": 56, "seek": 56256, "start": 562.56, "end": 575.88, "text": " finite state chart and finite state machine. This is the code of a machine created with Xstate.", "tokens": [19362, 1785, 6927, 293, 19362, 1785, 3479, 13, 639, 307, 264, 3089, 295, 257, 3479, 2942, 365, 1783, 15406, 13], "temperature": 0.0, "avg_logprob": -0.2614823659261068, "compression_ratio": 1.4210526315789473, "no_speech_prob": 3.973107595811598e-05}, {"id": 57, "seek": 56256, "start": 575.88, "end": 586.5999999999999, "text": " It's a very functionally way. We have got utility for creating the machine, all configuration", "tokens": [467, 311, 257, 588, 2445, 379, 636, 13, 492, 362, 658, 14877, 337, 4084, 264, 3479, 11, 439, 11694], "temperature": 0.0, "avg_logprob": -0.2614823659261068, "compression_ratio": 1.4210526315789473, "no_speech_prob": 3.973107595811598e-05}, {"id": 58, "seek": 58660, "start": 586.6, "end": 595.2, "text": " based, and a toggle service for defining and sending the event, and define the transitions.", "tokens": [2361, 11, 293, 257, 31225, 2643, 337, 17827, 293, 7750, 264, 2280, 11, 293, 6964, 264, 23767, 13], "temperature": 0.0, "avg_logprob": -0.29620363545972245, "compression_ratio": 1.4015748031496063, "no_speech_prob": 3.6795605410588905e-05}, {"id": 59, "seek": 58660, "start": 595.2, "end": 608.48, "text": " My goal in this talk is not to show you a single framework, because you can choose one", "tokens": [1222, 3387, 294, 341, 751, 307, 406, 281, 855, 291, 257, 2167, 8388, 11, 570, 291, 393, 2826, 472], "temperature": 0.0, "avg_logprob": -0.29620363545972245, "compression_ratio": 1.4015748031496063, "no_speech_prob": 3.6795605410588905e-05}, {"id": 60, "seek": 60848, "start": 608.48, "end": 616.6800000000001, "text": " study by yourself. I want to explain the theory and the pattern, and how to apply it to real life.", "tokens": [2979, 538, 1803, 13, 286, 528, 281, 2903, 264, 5261, 293, 264, 5102, 11, 293, 577, 281, 3079, 309, 281, 957, 993, 13], "temperature": 0.0, "avg_logprob": -0.283062071170447, "compression_ratio": 1.3941605839416058, "no_speech_prob": 0.00020134240912739187}, {"id": 61, "seek": 60848, "start": 616.6800000000001, "end": 628.0, "text": " I introduced Xstate, because it has a cool tool called XstateVidz, that can help you to test", "tokens": [286, 7268, 1783, 15406, 11, 570, 309, 575, 257, 1627, 2290, 1219, 1783, 15406, 53, 327, 89, 11, 300, 393, 854, 291, 281, 1500], "temperature": 0.0, "avg_logprob": -0.283062071170447, "compression_ratio": 1.3941605839416058, "no_speech_prob": 0.00020134240912739187}, {"id": 62, "seek": 62800, "start": 628.0, "end": 641.96, "text": " your machine. The tool is this. I don't know if you see. This is the same state chart of our", "tokens": [428, 3479, 13, 440, 2290, 307, 341, 13, 286, 500, 380, 458, 498, 291, 536, 13, 639, 307, 264, 912, 1785, 6927, 295, 527], "temperature": 0.0, "avg_logprob": -0.14945141474405924, "compression_ratio": 1.378787878787879, "no_speech_prob": 0.00010627902520354837}, {"id": 63, "seek": 62800, "start": 641.96, "end": 650.28, "text": " previous event, and it's interactive. You can trigger the events directly from the chart,", "tokens": [3894, 2280, 11, 293, 309, 311, 15141, 13, 509, 393, 7875, 264, 3931, 3838, 490, 264, 6927, 11], "temperature": 0.0, "avg_logprob": -0.14945141474405924, "compression_ratio": 1.378787878787879, "no_speech_prob": 0.00010627902520354837}, {"id": 64, "seek": 65028, "start": 650.28, "end": 661.8399999999999, "text": " and see what's happened. On the sidebar, you have three tabs. In the first one,", "tokens": [293, 536, 437, 311, 2011, 13, 1282, 264, 1252, 5356, 11, 291, 362, 1045, 20743, 13, 682, 264, 700, 472, 11], "temperature": 0.0, "avg_logprob": -0.1453546682993571, "compression_ratio": 1.3622047244094488, "no_speech_prob": 9.280299855163321e-05}, {"id": 65, "seek": 65028, "start": 661.8399999999999, "end": 674.28, "text": " you can put the code of your machine in Xstate way. The second tab is the state that contains", "tokens": [291, 393, 829, 264, 3089, 295, 428, 3479, 294, 1783, 15406, 636, 13, 440, 1150, 4421, 307, 264, 1785, 300, 8306], "temperature": 0.0, "avg_logprob": -0.1453546682993571, "compression_ratio": 1.3622047244094488, "no_speech_prob": 9.280299855163321e-05}, {"id": 66, "seek": 67428, "start": 674.28, "end": 682.8, "text": " all information of the current state of the machine. From the third tab, you can programmatically", "tokens": [439, 1589, 295, 264, 2190, 1785, 295, 264, 3479, 13, 3358, 264, 2636, 4421, 11, 291, 393, 37648, 5030], "temperature": 0.0, "avg_logprob": -0.18293820256772247, "compression_ratio": 1.1547619047619047, "no_speech_prob": 0.0007231322233565152}, {"id": 67, "seek": 68280, "start": 682.8, "end": 711.68, "text": " send the event for testing your machine. As you can see, I can send the event directly from here.", "tokens": [2845, 264, 2280, 337, 4997, 428, 3479, 13, 1018, 291, 393, 536, 11, 286, 393, 2845, 264, 2280, 3838, 490, 510, 13], "temperature": 0.0, "avg_logprob": -0.19440243794367865, "compression_ratio": 1.1829268292682926, "no_speech_prob": 0.0035594061482697725}, {"id": 68, "seek": 71168, "start": 711.68, "end": 725.4399999999999, "text": " You can reset the machine. My talk is finished. Have you got any questions?", "tokens": [509, 393, 14322, 264, 3479, 13, 1222, 751, 307, 4335, 13, 3560, 291, 658, 604, 1651, 30], "temperature": 0.0, "avg_logprob": -0.31490323657081243, "compression_ratio": 0.974025974025974, "no_speech_prob": 0.0020913288462907076}, {"id": 69, "seek": 72544, "start": 725.44, "end": 743.2, "text": " Who has the first question? And do raise the hands.", "tokens": [2102, 575, 264, 700, 1168, 30, 400, 360, 5300, 264, 2377, 13], "temperature": 0.0, "avg_logprob": -0.34424275822109646, "compression_ratio": 1.2434782608695651, "no_speech_prob": 0.006341650616377592}, {"id": 70, "seek": 72544, "start": 743.2, "end": 752.8800000000001, "text": " Hello. Thank you for your presentation. What happens to your state if an event is triggered", "tokens": [2425, 13, 1044, 291, 337, 428, 5860, 13, 708, 2314, 281, 428, 1785, 498, 364, 2280, 307, 21710], "temperature": 0.0, "avg_logprob": -0.34424275822109646, "compression_ratio": 1.2434782608695651, "no_speech_prob": 0.006341650616377592}, {"id": 71, "seek": 75288, "start": 752.88, "end": 759.8, "text": " that you can't handle? What happens to your state if an event is triggered that you can't", "tokens": [300, 291, 393, 380, 4813, 30, 708, 2314, 281, 428, 1785, 498, 364, 2280, 307, 21710, 300, 291, 393, 380], "temperature": 0.0, "avg_logprob": -0.309152709113227, "compression_ratio": 1.4758064516129032, "no_speech_prob": 0.0011304576182737947}, {"id": 72, "seek": 75288, "start": 759.8, "end": 770.48, "text": " handle at that state? If they are not connected to a transition, nothing happens, because the", "tokens": [4813, 412, 300, 1785, 30, 759, 436, 366, 406, 4582, 281, 257, 6034, 11, 1825, 2314, 11, 570, 264], "temperature": 0.0, "avg_logprob": -0.309152709113227, "compression_ratio": 1.4758064516129032, "no_speech_prob": 0.0011304576182737947}, {"id": 73, "seek": 77048, "start": 770.48, "end": 786.44, "text": " machine doesn't respond to this event. This depends on the implementation that you use.", "tokens": [3479, 1177, 380, 4196, 281, 341, 2280, 13, 639, 5946, 322, 264, 11420, 300, 291, 764, 13], "temperature": 0.0, "avg_logprob": -0.3075312432788667, "compression_ratio": 1.4471544715447155, "no_speech_prob": 0.00037246980355121195}, {"id": 74, "seek": 77048, "start": 786.44, "end": 797.16, "text": " In Xstate, the most famous implementation, this thing is safe. It depends on which machine", "tokens": [682, 1783, 15406, 11, 264, 881, 4618, 11420, 11, 341, 551, 307, 3273, 13, 467, 5946, 322, 597, 3479], "temperature": 0.0, "avg_logprob": -0.3075312432788667, "compression_ratio": 1.4471544715447155, "no_speech_prob": 0.00037246980355121195}, {"id": 75, "seek": 79716, "start": 797.16, "end": 817.4399999999999, "text": " you use and how you have implemented. Okay? Next question, raise your hand very high,", "tokens": [291, 764, 293, 577, 291, 362, 12270, 13, 1033, 30, 3087, 1168, 11, 5300, 428, 1011, 588, 1090, 11], "temperature": 0.0, "avg_logprob": -0.3379034562544389, "compression_ratio": 1.34375, "no_speech_prob": 0.010261345654726028}, {"id": 76, "seek": 79716, "start": 817.4399999999999, "end": 825.04, "text": " please. While you think about it, thank you for the video team up there with the green", "tokens": [1767, 13, 3987, 291, 519, 466, 309, 11, 1309, 291, 337, 264, 960, 1469, 493, 456, 365, 264, 3092], "temperature": 0.0, "avg_logprob": -0.3379034562544389, "compression_ratio": 1.34375, "no_speech_prob": 0.010261345654726028}, {"id": 77, "seek": 82504, "start": 825.04, "end": 838.68, "text": " T-shirt. They'll hear it after. Don't worry. They hear everything.", "tokens": [314, 12, 15313, 13, 814, 603, 1568, 309, 934, 13, 1468, 380, 3292, 13, 814, 1568, 1203, 13], "temperature": 0.0, "avg_logprob": -0.2731906214068013, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.006437832955271006}, {"id": 78, "seek": 82504, "start": 838.68, "end": 844.68, "text": " How is the animation graphically that we see on the screen is handled with regard to the", "tokens": [1012, 307, 264, 9603, 4295, 984, 300, 321, 536, 322, 264, 2568, 307, 18033, 365, 3843, 281, 264], "temperature": 0.0, "avg_logprob": -0.2731906214068013, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.006437832955271006}, {"id": 79, "seek": 82504, "start": 844.68, "end": 849.8399999999999, "text": " state machine because there is some delay. It has some time of duration. Thank you.", "tokens": [1785, 3479, 570, 456, 307, 512, 8577, 13, 467, 575, 512, 565, 295, 16365, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2731906214068013, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.006437832955271006}, {"id": 80, "seek": 84984, "start": 849.84, "end": 862.12, "text": " The animation is how it's made. Okay. I have just the three sprites and every state of", "tokens": [440, 9603, 307, 577, 309, 311, 1027, 13, 1033, 13, 286, 362, 445, 264, 1045, 637, 30931, 293, 633, 1785, 295], "temperature": 0.0, "avg_logprob": -0.24488375907720522, "compression_ratio": 1.4049586776859504, "no_speech_prob": 0.0005614730762317777}, {"id": 81, "seek": 84984, "start": 862.12, "end": 877.5600000000001, "text": " the machine set the correct sprite in the image tag and prepare the machine for the", "tokens": [264, 3479, 992, 264, 3006, 43848, 294, 264, 3256, 6162, 293, 5940, 264, 3479, 337, 264], "temperature": 0.0, "avg_logprob": -0.24488375907720522, "compression_ratio": 1.4049586776859504, "no_speech_prob": 0.0005614730762317777}, {"id": 82, "seek": 87756, "start": 877.56, "end": 893.3599999999999, "text": " next state. Observe Marco is updated the state and run the routine of every state.", "tokens": [958, 1785, 13, 20707, 3768, 26535, 307, 10588, 264, 1785, 293, 1190, 264, 9927, 295, 633, 1785, 13], "temperature": 0.0, "avg_logprob": -0.26407361030578613, "compression_ratio": 1.1232876712328768, "no_speech_prob": 0.012742547318339348}, {"id": 83, "seek": 89336, "start": 893.36, "end": 910.12, "text": " Next question. Okay. Will you be around? Will you be around? Will you be in the deaf room", "tokens": [3087, 1168, 13, 1033, 13, 3099, 291, 312, 926, 30, 3099, 291, 312, 926, 30, 3099, 291, 312, 294, 264, 15559, 1808], "temperature": 0.0, "avg_logprob": -0.4668262799580892, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.009113174863159657}, {"id": 84, "seek": 89336, "start": 910.12, "end": 918.64, "text": " or outside? There are no more questions. Thanks again.", "tokens": [420, 2380, 30, 821, 366, 572, 544, 1651, 13, 2561, 797, 13], "temperature": 0.0, "avg_logprob": -0.4668262799580892, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.009113174863159657}, {"id": 85, "seek": 91864, "start": 918.64, "end": 924.16, "text": " Okay. Thanks for the fish.", "tokens": [50364, 1033, 13, 2561, 337, 264, 3506, 13, 50640], "temperature": 0.0, "avg_logprob": -0.41420717239379884, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.003160449443385005}], "language": "en"}