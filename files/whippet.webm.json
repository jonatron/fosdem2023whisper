{"text": " We're starting. My name is Andy and I'm here to say we're talking garbage collectors in a really great way. This is my talk about WhipIt, which is a new garbage collector for Gile. So Gile is an imitation of Scheme, as most people know. But if you looked at it, and you tried to determine its composition, you would notice that there's a big C library that's part of it. And it has an API, like we show, like there's a cons function, which is defined as cons, and it takes some arguments, and it returns a value. And there's a lot of code inside Gile that uses this API, and a lot of code in external projects and files that also use this API. So it's exposed to third-party users. And Gile is a garbage collected language. Data is allocated by the garbage collector, and the garbage collector takes responsibility for freeing it. And how is this going to work? So let's say I cons the value, I'm making a new object, I need to include it in the set of live data, right? So what's a live object? A live object is one of the roots, or anything referred to by a live object. So it's a circular definition. You compute the fixed point of this computation. And how are we going to do this? I'm sorry, I'm getting on to the next slide. So there are actually three strategies we can use here. One, we can ref count values, and you know, we used to laugh at this, but it's coming back in style, actually. Here you could register the location of this value with the runtime, and unregister it at some point when it goes out of scope. And another way we could find this value would be what is called conservative root scanning. And that's what Gile has done for many, many years now. And the idea, I don't know, if this is the first time you're hearing this, this is going to be wild. You know, like your brain's just going to go poof, because you take the stack, right? The machine stack. And you treat every word on it as if, like, it's an integer, you know? But if it's an integer, which is within the range of the objects managed by the heap, then we consider this maybe a pointer. And then we keep those objects alive. So it's conservative in the sense that it doesn't compute the minimal set of live objects. It's an over approximation of the live objects. It seems to work, though, historically. It's not one of those things you have guarantees on. It's very strange. And Gile's very old, 30 years old, I think, today, or not today, but like this year, I think, something like that. We're getting older, also. And since it's very beginning, it had a custom GC, which we inherited from a previous limitation that Gile was based on, SCM. And then in the mid-2000s, we added support for proper P threads. We had other things before. It was a kind of buggy time, because threads and garbage collectors, it's a very tricky thing to get right. And if you just half-hazardly add them together without understanding what you're doing, you can make some bugs. When we switch to a third-party collector called the Bohm-Demmers-Weiser collector, I should have spelled it out here, a lot of these bugs went away, actually, because it takes threads more into account. It's better designed in some ways. And a nice thing when we switch to the Bohm collector is it scans not only stacks, but also static data segments, P thread keys. It tries to find all the roots that it might possibly find. It grovels your system for special magic integers. And actually, with conservative collection, there are some advantages, and some real advantages. It is very nice to program with a conservative garage collector. I work on web browsers, they all have, well, two of the three major ones have precise roots, and it's a pain getting the handles right. And I've had bugs, you know, where you forget to register the location of a value, and everything blows up, but only sometimes, it depends on when the garage collector runs. And it doesn't constrain the compiler, because the compiler doesn't have to keep track, you don't have to make the compiler tell the system about where the values are. And yeah, but on the neighbor side, you might leak values. We don't know to what extent this is a thing. It appears to be fine in practice. We actually don't have a lot of data there. With the advent of 64-bit address spaces, I think it is less of a problem, though. Another issue is we can't move values. If any integer that we ever find during the whole trace of the heap might be a pointer to a value, we can never compact the heap. And this is actually a real, it's a real limitation for us in the sense that we can't use some of the newer, better performing garbage collecting algorithms. And as a technical constraint, it also constrains the garbage collector from changing. It's very difficult to change to one of those garbage collector algorithms now, because we have so much user code, we have so much implementation, and it'll be hard. But whatever I told you, there is actually a better way. Because we thought we were at a local maximum. We couldn't get any better without getting worse for a while. We wouldn't reach that mountaintop without having to descend into the valley. But it turns out that you can have conservative roots and move objects and compact the heap. You can have conservative roots and do a fast bump pointer allocation, which we'll get to in a minute. And you can have conservative roots and eventually possibly add more precision to your scan. And the thing that came along that allowed me to know this was something called Immix. This is a paper that was published in 2008 by Steve Blackburn, his group. And it is a new, well, he characterizes in that paper a new class of fundamental GC algorithms. So you have basically four things you can do when you're doing a GC. You can have what's called mark compact, meaning find the live objects, and then slide them all to one side of the same space. So within the space that you found the objects in, you slide them all to one side. You have mark sweep, find all the objects, and then collect all the holes into, these are the holes that are two words long, and these are the holes that are three words long, and these are the holes, like that, into free lists. This is what it's called. You sweep to a free list. Mark sweep. Evacuation, find all the live objects, and as you find them, you copy them somewhere else. So instead of sliding to part of one space, you get them out of the space entirely. And that's a semi-space, for example, that's a number of different Java collection algorithms. And this other new algorithm is mark region. Find all the holes and bump pointer allocate into them. As you allocate, you sort of sweep across the space, and you allocate in a bump pointer fashion into this hole, and then to that hole, and then to that hole, instead of collecting free lists. And IMIX is one of these new kind of collectors. This is a diagram from the paper, the 2008 paper. IMIX organizes the heap into blocks and lines. Blocks are about 64 kilobytes in size, should be a multiple of the page size, and lines for IMIX are 128 bytes. And as you allocate, here in this diagram, we can see that there are some blocks that are all full. Full block, we don't have to do anything about it. There are some blocks that have some lines which were marked in the previous collection, and some lines that were not marked in the previous collection. The lines that are not marked, a set of contiguous lines, is a hole. You can bump pointer allocate into the holes. Objects can be part of a line, in which case maybe many objects fit in a line. They can span multiple lines, but they can't span blocks, okay? When you allocate, you bump pointer allocate, and you sweep through all the blocks in the system in the course of that GC cycle. When you trace, you mark objects in the same way as a mark sweep collector, so there's a mark bit associated with every object, possibly an object's header, possibly an aside table. But as you mark them, you also mark lines, the lines that they're on, using address math. Typically the way this is invented is all these blocks are allocated as part of a line 2 megabyte slabs, basically, and you can use address arithmetic to get to the aside table of mark bytes for the line. When you sweep, you do, at the end of collection, there is an eager sweep over all of the line mark bytes, so the contiguous array of mark bytes for lines, to identify which blocks are full, which are completely empty, and which are recycled, containing some old data, and those you would bump pointer allocate into the holes. The cool thing about it is that IMIX does opportunistic evacuation, so it's not simply leaving these objects in place. If it determines that your system needs to be defragmented, then it can choose some set of blocks to evacuate, and choose some other set of blocks which are already empty to be evacuation targets. So it's still a one-pass algorithm over the heap, but instead of marking objects in place, it tries to put them into an empty block. And if you do this a couple of times, you'll completely defragment the heap. And it can fail because parallel markers, and ordering, and alignment issues, and that's okay if the evacuation fails, you just mark in place. It's always okay to mark in place, and it's always okay to try to evacuate, evacuation may or may not succeed. So when I realize this, that you can mark in place or evacuate, this is something that is compatible with guile, right? We can do bump-point allocation now instead of allocating from free lists, which would improve throughput in guile programs. We can compact the heap, which is, I mean, I know there are many users here, and python-xyz.scm is one of the files you have, yes. I say no more. So I started a year on this, on this work-in-progress whip GC implementation, hence where the name comes from. There are a couple of differences from IMEX. IMEX has these 128-byte lines, and if just one object on a line is left over, then the line is kept live, right? In the next collection, nobody will allocate, nobody will put an object in that line. It's not a hole, basically. And for various reasons, I didn't make sense to me, so instead in Whippet, we have 16-byte lines, so effectively the line mark table is the object mark table. You only have one mark byte, it's a byte because of parallel markers, and it's a bit more overhead in terms of space, but maybe it's a bit more parsimonious with memory, we'll see how it works out. It's an open question here. And additionally, with these line mark bytes being more fine-grained, it's a lose to do an eager sweep over the heap, so we do lazy sweeping, so as you allocate, you just sweep one block, and then sweep another block, and then sweep another block, like that. And the good thing about that is that it parallelizes things. The bad thing is that you don't know how much data was live at the previous collection right after your collection, because you haven't swept yet. Yeah, okay. So some comparisons with Whippet compared to the Bohm collector, and there are a number of different points here. So one of them is you can move values. If every edge in your graph is potentially conservative, then you can't move anything, because you could find an edge that keeps an object live and doesn't allow moving late in the trace. But if you can partition your edges into a set that's conservative and a set that's not conservative, a set that's precise, you do the conservative ones first, and any object which isn't reached in that conservative trace is then movable. So what happens is you mark the stack first, and you mark in place, you don't evacuate. That is an implicit pin on every object that you mark. And then you go and you mark the heap, and if you find another object there, you can evacuate at that point. And then in Whippet, if we see that the heap is fragmented, we can turn evacuation on, and if we don't, if we see the heap is not fragmented, we can always mark in place and not incur the overhead of copying. There is also explicit pinning for various reasons. We can shrink the heap, which is nice, because these blocks are multiples of the OS page size, they're easy to return to the OS whenever we find that a block is empty, and you can just mark it as being empty, and MAdvise, MAV don't need it, and if you ever need it again, you can pull it right back in, it's zeroed by the OS. And additionally, there's a possibility to use adaptive heap sizing techniques, such as the one that I link here, it's an online algorithm that depends on what's your current cost of GC and how fast are you allocating. So a process which sort of stops and goes quiet, gets its memory slowly reduced to the minimum. You can fit more on a system. And we can also do a generational collection, if we want to, using the sticky mark-byte algorithm, which I link to here, it's described more in that post. For some programs, it doesn't make a difference, because some data isn't very generation friendly. This is the case of the first empty GC bench pair over there, where the first bar is Whippet without generational collection, and the second is with. But in some cases, it's very effective, like in this, I'm making a bunch of quad trees, and it pretty much doubles the throughput of the system. Additionally, with Whippet, we scale a lot better for multiple allocator threads. In BDW, you have these size segregated free lists, the free lists of size two, three, four, and that sort of thing, and you need to lock the heap to sweep and find more and fill those free lists. In Whippet, you use uncontended atomic ops to obtain the next block, just basically incrementing a counter, because the blocks are contiguous in these two megabyte slabs, and you sweep without contention. So these are two graphs showing the time it takes as problem size increases and number of mutator threads increases. So at each step, I'm adding on an additional mutator, an additional thread, doing the same amount of work. So with two mutator threads, the heap is twice as big as it was with one, and with eight, it's eight times as big as it was with one. So we do expect to see some increase. What we see is that BDW takes more time, ultimately, like it's at nine seconds with an eight thread mutator, whereas we're only at three and a half with Whippet, it scales much better when you're adding allocators. And this is with a single marker thread, so we expect to see some increase as the problem size gets larger. This is, what do you call that? It's like when you make a quilt, apparently you're supposed to put a part in it that's incorrect because you don't want to show too much pride in the face of God, right? It's like a touch of the hand sort of thing. This is my humility slide showing Whippet being slower than BDWGC on this one machine. I have no idea what's going on with this because I remeasure it on my other machine. It looks much better. But it does point that as you add on marker threads, things improve, although I don't understand the relative BDW Whippet thing right there, so that's a question. So with the heap, with twice as much memory as the problem takes, as we add markers, things get better for both BDW and Whippet, but a little bit better for Whippet. So ephemerons. This is weak maps like you have in JavaScript where you have keys associated with value, but what if value references key? Can you have a circular reference? Could the weak reference, does it leak memory? I don't know. You people have heard about ephemerons, I would imagine. You cannot do them in the boom collector. It's impossible, right? I've tried a lot and thought about this, but with Whippet we have them. You really need deep GC integration to implement ephemerons. Right and precision. So with BDW, you're always stack conservative. You're always scanning the heap, the stack for smelly pointers, right, or smelly integers, integers that could point to the heap. And it's often configured in such a way that every edge on the heap also is conservative. And with Whippet we can configure it in a number of different ways. And probably we're heading down the mid-near term is this conservative scan of the C stack, precise scan of the scheme stack, and a precise scan of the heap. So we will be able to get the advantages of motion and compaction and all that. But we could move to a fully precise stack as well. And potentially things to get better. BDW GC is terrible to hack on. I just counted it's like 15 or 16% CP processor directives. You can imagine it's probably 90% of the code is covered by if thefts. It's really, really hard. Right. So some more words about how it is that we are, we are, that royal we, right, okay. Working on getting Whippet implemented in such a way that it could land in Guile and not break the world because I'm going to make a confession. I don't maintain software, I develop software, and I throw it over the wallet, I forget about it. So if I'm going to get bugs in the garbage collector, that's not, I better not start because, you know, I'm not going to fix them. So the repositories here, it is designed to be an embed only library, kind of like an include style library, but you actually do separate compilation. But it's something that you include in your source tree because it needs to be specialized with respect to the program that's using it. In the case of Guile, Guile will tell Whippet how to put a forwarding pointer in an object, for example, how to do a precise trace of the heap. And then we also specify Whippet with respect to the domain. So what should we scan conservatively, what should we scan precisely, that sort of thing. There is, we use LTO, and it appears to remove the overhead of the separate compilation, link time optimization. I'm actually suspecting LTO for that other graph that I showed you. So we actually managed to get performance and abstraction at the same time by being inspired by MMTK. MMTK is a memory management toolkit, it's fantastic. It's a library of garbage collectors and technique and experience and knowledge, currently written in Rust, formerly part of the Jyx research JVM, but now retargeting to open JDK and V8 and a number of other systems. We could actually slot this into Guile if we wanted to at some point. But we have enough information exposed in the API to allow a JIT to use that exposed information and generate machine code for the fast path for allocation, for example. And by having like a real abstract barrier between the two sides, we allow both sides to evolve at their own pace. And when we think about migrating Guile to Whippet, which is kind of where I want to go here, I know in the talk description it kind of oversold the item, right, it's like now we have a new production garbage collector in Guile, it's not there yet. So this abstract API can be implemented by the current garbage collector being used by Guile, by the Bohm collector, by the BDW collector. And so that's going to be the first step, is to switch Guile over to use the new API but still use the old collector implementation. And then we can look at switching to Whippet, but that wouldn't require any code changes ideally in Guile. I mean, so you have the Whippet API, but then you have the Whippet garbage implementation algorithm that we were talking about. There are a lot of variants on the algorithm in Sonali that you can, these are different ways you can configure Whippet on two different tests, one there's MTGC bench, one there's quads here. And going across we can first see serial Whippet, one marker, one marking thread, it's not going to be parallel marking. That's the first light blue bar on both of those sides. And then we have parallel Whippet, four markers in this case is what I was measuring. It improves things in some cases, a little bit in other cases, minor improvements. Generational Whippet, collect more recently allocated objects more frequently than older objects. Parallel generational Whippet, four markers and generational. And then after that there's four more bars which are the same thing, but collecting stack routes conservatively. The previous one is a precise scan of the stack, the previous four bars and then the next four bars are conservative scan and as you'll note it actually performs better. And there are two reasons for this, one conservative scanning can actually reduce the lifetime of objects if the compiler determines that an object isn't needed at any given point it can reuse its register or stack slot or what have you, whereas you have to wait for the unregister part of a registration, deregistration API if you're using precise routes. And the other thing is that when using this API from C, I don't actually have cooperation from the compiler where it's going to write out a table of where all the values are. I have to explicitly say, and now remember this one, okay, now forget it. And now remember this one, and now forget it. And that's overhead, right? And by doing a conservative scan, I remove that overhead. And then the final two bars, I didn't include generational because it doesn't really make sense in this context as a fully heap conservative scan. We increase a lot on this empty GC benchmark because it allocates a very big array and I don't have the equivalent of point on this allocation that the BDW API gives you. So we end up tracing all the elements of that really big array, which gives a big spike over there. And in the case of quads, we never have large objects, we're always tracing everything anyway and it doesn't really matter. But heap conservative does slow you down relative to just having stack conservative. Right. And then as a project, it's written in C, which I know is a sin, but Guile has this sort of odd place in the supply chain of geeks and it's useful to depend on a more minimal set of things rather than using Rust, for example. But it's a relatively modern C, uses stethatomic, uses things in a way that are constexpr-ish in a way that you know that the compiler is going to reduce them down. It avoids void pointers completely, using instead structs containing a single number, which gets boiled away by the compiler as well, which can't be cast to each other, you need explicit conversions, that way you won't confuse a conservative reference with a precise reference and things like that. And we don't actually have any API or API concern at all because it's an embedded-only library. If something breaks, don't update it. And it does have a bit of an abstraction for how do you find conservative roots on whatever your platform is. It's not so bad, it turns out. So if we think about when it is that this might reach Guile, then we are, it's when we can, right, you know, in the end. This is kind of a side project for me. I have other side projects, children, you know, so I can't really give an ETA here, but I would mention that there are a few things to do, and what we might end up with is that we could get a new release series for Guile, which is I think is what would be required for this, maybe starting in six months or so, just switching over to the API and staying with the Balm Collector, and maybe we could release a new stable version in another six months or really a little bit more. But we'd have to do a few things for there. Wipit is done mostly with the exception of actually growing and shrinking the heap, implementing finalizers, and having an API for checking in with Wipit, checking in with the GC as to when a mutator should stop, because that's one other thing that the BDW Collector does is it uses signals to stop all the threads, whereas Wipit relies on periodic save points. There are trade-offs. In Guile we'd have to switch over to these save points, I think it's possible. And I think we would start with a heap conservative Wipit, just because it's the same thing that we do with the BDW Collector, and then we'd move over to a precise scan of the heap. When we get to a precise scan of the heap, we have to implement a few things on the Guile side. There are some hazards about current uses of the API. In particular, if a third-party user ever allocates an object and then stuffs something in it that Guile doesn't know about, is it an integer or is it a pointer to the heap? And there are a couple of places that people can do that that are unclear. And we can't allow this if we want to trace the heap precisely and move objects. So this might require some small API changes and API breaks, because it's a new series, around this area. It might be actually time to remove smobs entirely, possibly. So that's what's actually pushing us to a new major release. So in summary, Wipit is a new GC, it's a replacement for BDW GC. It has the potential to reach a new local maximum, the better than BDW. And I think we can get into Guile 3.2. I would like to thank particularly the MMTK people for inspiration and discussions, because it's been really helpful to be able to properly learn about garbage collection over the last year or so. I'll leave you with one slide. When you evaluate a GC, you need to do so with a space-time diagram, because GC is a function, it's a trade-off between space and time. So on the x-axis, you should have your heap size as a function of what is the minimum heap size. Here, I measured some algorithms at 1.3x, 1.5x, 1.75x, 2, 2.5, 3, 4, 5, and 6, or just a 5. I don't know, on the y-axis, you should have whatever you're measuring, be it instructions retired or wall clock time or memory or something like that, because the heap size is one of the, and the response to heap size is one of the fundamental trade-offs in GC. Here we show that actually, we show the BDW collector, a semi-space collector, which is also implemented behind the Wipit API, and the Wipit algorithm, serial, one marker, one mutator on this benchmark. We see performance as we change heap size. Wipit is the only one that gets to 1.3x. This is an analytical calculation of how big the heap should be. It's not measured as to how small I can get anything to run, but it's like what I think the heap should take. So it might not precisely be 1.3, it might be one, you know, it's a number in that range. It can get to the smallest. It takes a bit of effort to do so. As you become more parsimonious with your heap, you end up tracing it more. So the curve goes up on that side, but it's the only one that actually gets to that x-axis point of view. And then it quickly passes, and you want these numbers to be low. That's what you want. It quickly passes BDW GC, it's only one point where it takes more time than BDW GC, and that's concerning. I need to fix that one. Let me see the green line. This is a semi-space collector. Semi-space, as you add memory, it gets easier and easier and easier, right, because it depends only on the size of the live data. Whereas WIPPET and BDW need to sweep the heap. So as you add memory, it sort of plateaus. It doesn't keep on going down. I don't know why it goes up at the end. This is my other little touch of the hand. I don't know. That looks like a bug to me. So that's something I fixed. Anyway, there's WIPPET. Thank you for enduring this blathering. And good luck, everybody, in about 18 months when this starts rolling out to geeks. Just joking, because I won't be around. Good. So I'll take any questions. Even dumb questions. That's okay. Yes, sir? It seems to me like conservative stack scanning is incompatible with address sanitizer from LVM or GCC. So how do you debug address bugs in the GCC? So the question is, conservative stack scanning seems to be incompatible with address sanitizer from LVM GCC. I'm a professional C++ developer, and I work on web browsers. I don't know what address sanitizer does. I know it gives me bugs sometimes and tells me things I have to fix, but I don't know what's going on there. I should know. Can you tell us, why is it incompatible? Basically, every time you access something that wasn't registered properly via malloc, for example, or aloca, it tells you you're in the red zone or you're in something that doesn't work. So to scan your wall stack, only part of it is actually valid. So the answer is that it only signals warnings if you ever access a value after it's been freed. Is that right? For example, you are in a function and you access something that wasn't. I think it's actually not a problem because we don't trigger the malloc-free detection at all. What makes a complete third-party allocator is if you M-map the page and we're just reading values from that page, and so it doesn't trigger the particular logic there, which also means you have no tool support. You're as wild west with the bugs that go with it, so yeah, I guess that's the answer there. Yes, so the question. How will this affect Geeks users? Well, this will affect Geeks users in the sense that, one, I hope that when you read build the system, Geeks launches multiple threads to compile things. And as we see, there is contention in BDWGC. It doesn't actually scale very well as you add threads if you have an allocation-heavy workload. And so I think that when Guile incorporates WIPIT, Geeks with multiple threads should scale better. In addition, we will be able to have better tooling for how understanding the heap and heap usage, and ideally, be able to place ourselves better on the kind of space-time trade-off if you need more throughput, give it a bigger heap, also let it shrink. And that can affect also longer-running demons like the shepherd and things like that. So it should yield a more robust system. Yes? There are some architectures which can be used in 64-bit page. Would that be a problem with using 16K blocks? They're actually 64 kilobyte blocks. So I think I chose the least common multiple or whatever. It's configurable, but I think the default size is such that they are large enough for any common architecture. The question was about page size, is 16 kilobytes big enough for blocks, but it's actually 64 kilobytes. Yes? With the collection, would it ever have to stop all threads simultaneously, or do the threads stop at a different location? Basically, are there stops in the world? Yeah. Yeah, that's a very good question. I didn't mention this. So this is a stop-the-world collector. It's not a concurrent collector with the exception of threads mark their own stacks while other threads are running. There's a little bit of concurrency there. We may add concurrent marking at some point, but you need write barriers for that to work. And so that would be something to add once generational collection is working, because you've proven that you have all the write barriers in the right place. Then write barriers is just like a little piece of code that runs whenever you store a pointer. And if write barriers can be used to indicate pointers from old objects to new objects, helping you do generational collection, they can also be used to mark an object as being allocated after the concurrent marker has already marked it in that cycle. I'm not explaining myself very well. But basically, you need write barriers to be able to have, to be able to minimize the stop-the-world component of the mark phase. Does that answer the question? Yes? Is this simply guy or complicate the guy with the web assembly? Oh, yeah. It's a good question. So there's a project to compile a guy's web assembly. I think initially this will probably start by having a guy library produce web assembly that has its own runtime. And this could grow to a whole program standalone compiler in which a guy has a library that takes your guile program and spits out a native binary. And in that case, that native binary would include WIPPET, embedded in it, instead of having that native binary then link to the BDW collector. So the goal would be to produce one binary that's all finished. Is that it? Thank you. Thank you very much. Thank you very much. Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 19.92, "text": " We're starting.", "tokens": [492, 434, 2891, 13], "temperature": 0.0, "avg_logprob": -0.2711129333033706, "compression_ratio": 1.1263157894736842, "no_speech_prob": 0.1952594369649887}, {"id": 1, "seek": 0, "start": 19.92, "end": 24.68, "text": " My name is Andy and I'm here to say we're talking garbage collectors in a really great", "tokens": [1222, 1315, 307, 13285, 293, 286, 478, 510, 281, 584, 321, 434, 1417, 14150, 35384, 294, 257, 534, 869], "temperature": 0.0, "avg_logprob": -0.2711129333033706, "compression_ratio": 1.1263157894736842, "no_speech_prob": 0.1952594369649887}, {"id": 2, "seek": 0, "start": 24.68, "end": 25.68, "text": " way.", "tokens": [636, 13], "temperature": 0.0, "avg_logprob": -0.2711129333033706, "compression_ratio": 1.1263157894736842, "no_speech_prob": 0.1952594369649887}, {"id": 3, "seek": 2568, "start": 25.68, "end": 30.2, "text": " This is my talk about WhipIt, which is a new garbage collector for Gile.", "tokens": [639, 307, 452, 751, 466, 506, 647, 3522, 11, 597, 307, 257, 777, 14150, 23960, 337, 460, 794, 13], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 4, "seek": 2568, "start": 30.2, "end": 33.56, "text": " So Gile is an imitation of Scheme, as most people know.", "tokens": [407, 460, 794, 307, 364, 47624, 295, 2065, 5729, 11, 382, 881, 561, 458, 13], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 5, "seek": 2568, "start": 33.56, "end": 37.480000000000004, "text": " But if you looked at it, and you tried to determine its composition, you would notice", "tokens": [583, 498, 291, 2956, 412, 309, 11, 293, 291, 3031, 281, 6997, 1080, 12686, 11, 291, 576, 3449], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 6, "seek": 2568, "start": 37.480000000000004, "end": 41.12, "text": " that there's a big C library that's part of it.", "tokens": [300, 456, 311, 257, 955, 383, 6405, 300, 311, 644, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 7, "seek": 2568, "start": 41.12, "end": 46.92, "text": " And it has an API, like we show, like there's a cons function, which is defined as cons,", "tokens": [400, 309, 575, 364, 9362, 11, 411, 321, 855, 11, 411, 456, 311, 257, 1014, 2445, 11, 597, 307, 7642, 382, 1014, 11], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 8, "seek": 2568, "start": 46.92, "end": 50.120000000000005, "text": " and it takes some arguments, and it returns a value.", "tokens": [293, 309, 2516, 512, 12869, 11, 293, 309, 11247, 257, 2158, 13], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 9, "seek": 2568, "start": 50.120000000000005, "end": 54.56, "text": " And there's a lot of code inside Gile that uses this API, and a lot of code in external", "tokens": [400, 456, 311, 257, 688, 295, 3089, 1854, 460, 794, 300, 4960, 341, 9362, 11, 293, 257, 688, 295, 3089, 294, 8320], "temperature": 0.0, "avg_logprob": -0.2659980939782184, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.00010543053213041276}, {"id": 10, "seek": 5456, "start": 54.56, "end": 57.760000000000005, "text": " projects and files that also use this API.", "tokens": [4455, 293, 7098, 300, 611, 764, 341, 9362, 13], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 11, "seek": 5456, "start": 57.760000000000005, "end": 63.24, "text": " So it's exposed to third-party users.", "tokens": [407, 309, 311, 9495, 281, 2636, 12, 23409, 5022, 13], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 12, "seek": 5456, "start": 63.24, "end": 67.72, "text": " And Gile is a garbage collected language.", "tokens": [400, 460, 794, 307, 257, 14150, 11087, 2856, 13], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 13, "seek": 5456, "start": 67.72, "end": 71.82000000000001, "text": " Data is allocated by the garbage collector, and the garbage collector takes responsibility", "tokens": [11888, 307, 29772, 538, 264, 14150, 23960, 11, 293, 264, 14150, 23960, 2516, 6357], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 14, "seek": 5456, "start": 71.82000000000001, "end": 73.16, "text": " for freeing it.", "tokens": [337, 1737, 278, 309, 13], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 15, "seek": 5456, "start": 73.16, "end": 74.72, "text": " And how is this going to work?", "tokens": [400, 577, 307, 341, 516, 281, 589, 30], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 16, "seek": 5456, "start": 74.72, "end": 79.24000000000001, "text": " So let's say I cons the value, I'm making a new object, I need to include it in the set", "tokens": [407, 718, 311, 584, 286, 1014, 264, 2158, 11, 286, 478, 1455, 257, 777, 2657, 11, 286, 643, 281, 4090, 309, 294, 264, 992], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 17, "seek": 5456, "start": 79.24000000000001, "end": 81.16, "text": " of live data, right?", "tokens": [295, 1621, 1412, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 18, "seek": 5456, "start": 81.16, "end": 82.84, "text": " So what's a live object?", "tokens": [407, 437, 311, 257, 1621, 2657, 30], "temperature": 0.0, "avg_logprob": -0.16918792043413436, "compression_ratio": 1.6485355648535565, "no_speech_prob": 2.391802081547212e-05}, {"id": 19, "seek": 8284, "start": 82.84, "end": 87.60000000000001, "text": " A live object is one of the roots, or anything referred to by a live object.", "tokens": [316, 1621, 2657, 307, 472, 295, 264, 10669, 11, 420, 1340, 10839, 281, 538, 257, 1621, 2657, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 20, "seek": 8284, "start": 87.60000000000001, "end": 88.92, "text": " So it's a circular definition.", "tokens": [407, 309, 311, 257, 16476, 7123, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 21, "seek": 8284, "start": 88.92, "end": 93.68, "text": " You compute the fixed point of this computation.", "tokens": [509, 14722, 264, 6806, 935, 295, 341, 24903, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 22, "seek": 8284, "start": 93.68, "end": 96.0, "text": " And how are we going to do this?", "tokens": [400, 577, 366, 321, 516, 281, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 23, "seek": 8284, "start": 96.0, "end": 98.12, "text": " I'm sorry, I'm getting on to the next slide.", "tokens": [286, 478, 2597, 11, 286, 478, 1242, 322, 281, 264, 958, 4137, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 24, "seek": 8284, "start": 98.12, "end": 100.36, "text": " So there are actually three strategies we can use here.", "tokens": [407, 456, 366, 767, 1045, 9029, 321, 393, 764, 510, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 25, "seek": 8284, "start": 100.36, "end": 105.0, "text": " One, we can ref count values, and you know, we used to laugh at this, but it's coming", "tokens": [1485, 11, 321, 393, 1895, 1207, 4190, 11, 293, 291, 458, 11, 321, 1143, 281, 5801, 412, 341, 11, 457, 309, 311, 1348], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 26, "seek": 8284, "start": 105.0, "end": 107.48, "text": " back in style, actually.", "tokens": [646, 294, 3758, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.1876030302884286, "compression_ratio": 1.6169354838709677, "no_speech_prob": 1.568833067722153e-05}, {"id": 27, "seek": 10748, "start": 107.48, "end": 114.44, "text": " Here you could register the location of this value with the runtime, and unregister it", "tokens": [1692, 291, 727, 7280, 264, 4914, 295, 341, 2158, 365, 264, 34474, 11, 293, 517, 3375, 1964, 309], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 28, "seek": 10748, "start": 114.44, "end": 116.04, "text": " at some point when it goes out of scope.", "tokens": [412, 512, 935, 562, 309, 1709, 484, 295, 11923, 13], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 29, "seek": 10748, "start": 116.04, "end": 122.08, "text": " And another way we could find this value would be what is called conservative root scanning.", "tokens": [400, 1071, 636, 321, 727, 915, 341, 2158, 576, 312, 437, 307, 1219, 13780, 5593, 27019, 13], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 30, "seek": 10748, "start": 122.08, "end": 126.24000000000001, "text": " And that's what Gile has done for many, many years now.", "tokens": [400, 300, 311, 437, 460, 794, 575, 1096, 337, 867, 11, 867, 924, 586, 13], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 31, "seek": 10748, "start": 126.24000000000001, "end": 130.2, "text": " And the idea, I don't know, if this is the first time you're hearing this, this is going", "tokens": [400, 264, 1558, 11, 286, 500, 380, 458, 11, 498, 341, 307, 264, 700, 565, 291, 434, 4763, 341, 11, 341, 307, 516], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 32, "seek": 10748, "start": 130.2, "end": 131.2, "text": " to be wild.", "tokens": [281, 312, 4868, 13], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 33, "seek": 10748, "start": 131.2, "end": 134.76, "text": " You know, like your brain's just going to go poof, because you take the stack, right?", "tokens": [509, 458, 11, 411, 428, 3567, 311, 445, 516, 281, 352, 714, 2670, 11, 570, 291, 747, 264, 8630, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 34, "seek": 10748, "start": 134.76, "end": 136.12, "text": " The machine stack.", "tokens": [440, 3479, 8630, 13], "temperature": 0.0, "avg_logprob": -0.19767097298425573, "compression_ratio": 1.7092198581560283, "no_speech_prob": 2.7103476895717904e-05}, {"id": 35, "seek": 13612, "start": 136.12, "end": 139.04, "text": " And you treat every word on it as if, like, it's an integer, you know?", "tokens": [400, 291, 2387, 633, 1349, 322, 309, 382, 498, 11, 411, 11, 309, 311, 364, 24922, 11, 291, 458, 30], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 36, "seek": 13612, "start": 139.04, "end": 143.64000000000001, "text": " But if it's an integer, which is within the range of the objects managed by the heap,", "tokens": [583, 498, 309, 311, 364, 24922, 11, 597, 307, 1951, 264, 3613, 295, 264, 6565, 6453, 538, 264, 33591, 11], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 37, "seek": 13612, "start": 143.64000000000001, "end": 145.88, "text": " then we consider this maybe a pointer.", "tokens": [550, 321, 1949, 341, 1310, 257, 23918, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 38, "seek": 13612, "start": 145.88, "end": 147.4, "text": " And then we keep those objects alive.", "tokens": [400, 550, 321, 1066, 729, 6565, 5465, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 39, "seek": 13612, "start": 147.4, "end": 152.4, "text": " So it's conservative in the sense that it doesn't compute the minimal set of live objects.", "tokens": [407, 309, 311, 13780, 294, 264, 2020, 300, 309, 1177, 380, 14722, 264, 13206, 992, 295, 1621, 6565, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 40, "seek": 13612, "start": 152.4, "end": 155.04000000000002, "text": " It's an over approximation of the live objects.", "tokens": [467, 311, 364, 670, 28023, 295, 264, 1621, 6565, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 41, "seek": 13612, "start": 155.04000000000002, "end": 157.92000000000002, "text": " It seems to work, though, historically.", "tokens": [467, 2544, 281, 589, 11, 1673, 11, 16180, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 42, "seek": 13612, "start": 157.92000000000002, "end": 159.64000000000001, "text": " It's not one of those things you have guarantees on.", "tokens": [467, 311, 406, 472, 295, 729, 721, 291, 362, 32567, 322, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 43, "seek": 13612, "start": 159.64000000000001, "end": 161.4, "text": " It's very strange.", "tokens": [467, 311, 588, 5861, 13], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 44, "seek": 13612, "start": 161.4, "end": 165.92000000000002, "text": " And Gile's very old, 30 years old, I think, today, or not today, but like this year, I", "tokens": [400, 460, 794, 311, 588, 1331, 11, 2217, 924, 1331, 11, 286, 519, 11, 965, 11, 420, 406, 965, 11, 457, 411, 341, 1064, 11, 286], "temperature": 0.0, "avg_logprob": -0.15001058278593626, "compression_ratio": 1.8184713375796178, "no_speech_prob": 7.294862825801829e-06}, {"id": 45, "seek": 16592, "start": 165.92, "end": 168.88, "text": " think, something like that.", "tokens": [519, 11, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 46, "seek": 16592, "start": 168.88, "end": 172.39999999999998, "text": " We're getting older, also.", "tokens": [492, 434, 1242, 4906, 11, 611, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 47, "seek": 16592, "start": 172.39999999999998, "end": 177.23999999999998, "text": " And since it's very beginning, it had a custom GC, which we inherited from a previous limitation", "tokens": [400, 1670, 309, 311, 588, 2863, 11, 309, 632, 257, 2375, 29435, 11, 597, 321, 27091, 490, 257, 3894, 27432], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 48, "seek": 16592, "start": 177.23999999999998, "end": 180.04, "text": " that Gile was based on, SCM.", "tokens": [300, 460, 794, 390, 2361, 322, 11, 9028, 44, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 49, "seek": 16592, "start": 180.04, "end": 183.23999999999998, "text": " And then in the mid-2000s, we added support for proper P threads.", "tokens": [400, 550, 294, 264, 2062, 12, 25743, 82, 11, 321, 3869, 1406, 337, 2296, 430, 19314, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 50, "seek": 16592, "start": 183.23999999999998, "end": 184.88, "text": " We had other things before.", "tokens": [492, 632, 661, 721, 949, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 51, "seek": 16592, "start": 184.88, "end": 190.11999999999998, "text": " It was a kind of buggy time, because threads and garbage collectors, it's a very tricky", "tokens": [467, 390, 257, 733, 295, 7426, 1480, 565, 11, 570, 19314, 293, 14150, 35384, 11, 309, 311, 257, 588, 12414], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 52, "seek": 16592, "start": 190.11999999999998, "end": 191.11999999999998, "text": " thing to get right.", "tokens": [551, 281, 483, 558, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 53, "seek": 16592, "start": 191.11999999999998, "end": 194.27999999999997, "text": " And if you just half-hazardly add them together without understanding what you're doing, you", "tokens": [400, 498, 291, 445, 1922, 12, 71, 921, 515, 356, 909, 552, 1214, 1553, 3701, 437, 291, 434, 884, 11, 291], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 54, "seek": 16592, "start": 194.27999999999997, "end": 195.51999999999998, "text": " can make some bugs.", "tokens": [393, 652, 512, 15120, 13], "temperature": 0.0, "avg_logprob": -0.16080646377673252, "compression_ratio": 1.5615141955835963, "no_speech_prob": 2.1778787413495593e-05}, {"id": 55, "seek": 19552, "start": 195.52, "end": 200.12, "text": " When we switch to a third-party collector called the Bohm-Demmers-Weiser collector, I should", "tokens": [1133, 321, 3679, 281, 257, 2636, 12, 23409, 23960, 1219, 264, 32484, 76, 12, 35, 443, 18552, 12, 4360, 6694, 23960, 11, 286, 820], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 56, "seek": 19552, "start": 200.12, "end": 206.72, "text": " have spelled it out here, a lot of these bugs went away, actually, because it takes threads", "tokens": [362, 34388, 309, 484, 510, 11, 257, 688, 295, 613, 15120, 1437, 1314, 11, 767, 11, 570, 309, 2516, 19314], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 57, "seek": 19552, "start": 206.72, "end": 207.72, "text": " more into account.", "tokens": [544, 666, 2696, 13], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 58, "seek": 19552, "start": 207.72, "end": 210.32000000000002, "text": " It's better designed in some ways.", "tokens": [467, 311, 1101, 4761, 294, 512, 2098, 13], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 59, "seek": 19552, "start": 210.32000000000002, "end": 214.72, "text": " And a nice thing when we switch to the Bohm collector is it scans not only stacks, but", "tokens": [400, 257, 1481, 551, 562, 321, 3679, 281, 264, 32484, 76, 23960, 307, 309, 35116, 406, 787, 30792, 11, 457], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 60, "seek": 19552, "start": 214.72, "end": 218.32000000000002, "text": " also static data segments, P thread keys.", "tokens": [611, 13437, 1412, 19904, 11, 430, 7207, 9317, 13], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 61, "seek": 19552, "start": 218.32000000000002, "end": 221.76000000000002, "text": " It tries to find all the roots that it might possibly find.", "tokens": [467, 9898, 281, 915, 439, 264, 10669, 300, 309, 1062, 6264, 915, 13], "temperature": 0.0, "avg_logprob": -0.17335915147212513, "compression_ratio": 1.6423076923076922, "no_speech_prob": 8.13789574749535e-06}, {"id": 62, "seek": 22176, "start": 221.76, "end": 225.64, "text": " It grovels your system for special magic integers.", "tokens": [467, 4634, 779, 82, 428, 1185, 337, 2121, 5585, 41674, 13], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 63, "seek": 22176, "start": 225.64, "end": 231.12, "text": " And actually, with conservative collection, there are some advantages, and some real advantages.", "tokens": [400, 767, 11, 365, 13780, 5765, 11, 456, 366, 512, 14906, 11, 293, 512, 957, 14906, 13], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 64, "seek": 22176, "start": 231.12, "end": 234.35999999999999, "text": " It is very nice to program with a conservative garage collector.", "tokens": [467, 307, 588, 1481, 281, 1461, 365, 257, 13780, 14400, 23960, 13], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 65, "seek": 22176, "start": 234.35999999999999, "end": 240.56, "text": " I work on web browsers, they all have, well, two of the three major ones have precise roots,", "tokens": [286, 589, 322, 3670, 36069, 11, 436, 439, 362, 11, 731, 11, 732, 295, 264, 1045, 2563, 2306, 362, 13600, 10669, 11], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 66, "seek": 22176, "start": 240.56, "end": 242.48, "text": " and it's a pain getting the handles right.", "tokens": [293, 309, 311, 257, 1822, 1242, 264, 18722, 558, 13], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 67, "seek": 22176, "start": 242.48, "end": 246.56, "text": " And I've had bugs, you know, where you forget to register the location of a value, and everything", "tokens": [400, 286, 600, 632, 15120, 11, 291, 458, 11, 689, 291, 2870, 281, 7280, 264, 4914, 295, 257, 2158, 11, 293, 1203], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 68, "seek": 22176, "start": 246.56, "end": 250.84, "text": " blows up, but only sometimes, it depends on when the garage collector runs.", "tokens": [18458, 493, 11, 457, 787, 2171, 11, 309, 5946, 322, 562, 264, 14400, 23960, 6676, 13], "temperature": 0.0, "avg_logprob": -0.14808504922049387, "compression_ratio": 1.73421926910299, "no_speech_prob": 1.184106895379955e-05}, {"id": 69, "seek": 25084, "start": 250.84, "end": 254.12, "text": " And it doesn't constrain the compiler, because the compiler doesn't have to keep track, you", "tokens": [400, 309, 1177, 380, 1817, 7146, 264, 31958, 11, 570, 264, 31958, 1177, 380, 362, 281, 1066, 2837, 11, 291], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 70, "seek": 25084, "start": 254.12, "end": 260.72, "text": " don't have to make the compiler tell the system about where the values are.", "tokens": [500, 380, 362, 281, 652, 264, 31958, 980, 264, 1185, 466, 689, 264, 4190, 366, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 71, "seek": 25084, "start": 260.72, "end": 265.56, "text": " And yeah, but on the neighbor side, you might leak values.", "tokens": [400, 1338, 11, 457, 322, 264, 5987, 1252, 11, 291, 1062, 17143, 4190, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 72, "seek": 25084, "start": 265.56, "end": 268.84000000000003, "text": " We don't know to what extent this is a thing.", "tokens": [492, 500, 380, 458, 281, 437, 8396, 341, 307, 257, 551, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 73, "seek": 25084, "start": 268.84000000000003, "end": 271.28000000000003, "text": " It appears to be fine in practice.", "tokens": [467, 7038, 281, 312, 2489, 294, 3124, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 74, "seek": 25084, "start": 271.28000000000003, "end": 273.04, "text": " We actually don't have a lot of data there.", "tokens": [492, 767, 500, 380, 362, 257, 688, 295, 1412, 456, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 75, "seek": 25084, "start": 273.04, "end": 278.24, "text": " With the advent of 64-bit address spaces, I think it is less of a problem, though.", "tokens": [2022, 264, 7045, 295, 12145, 12, 5260, 2985, 7673, 11, 286, 519, 309, 307, 1570, 295, 257, 1154, 11, 1673, 13], "temperature": 0.0, "avg_logprob": -0.11417563486907442, "compression_ratio": 1.6953125, "no_speech_prob": 1.8626054952619597e-05}, {"id": 76, "seek": 27824, "start": 278.24, "end": 281.24, "text": " Another issue is we can't move values.", "tokens": [3996, 2734, 307, 321, 393, 380, 1286, 4190, 13], "temperature": 0.0, "avg_logprob": -0.11210532360766308, "compression_ratio": 1.6218905472636815, "no_speech_prob": 3.217691482859664e-05}, {"id": 77, "seek": 27824, "start": 281.24, "end": 287.6, "text": " If any integer that we ever find during the whole trace of the heap might be a pointer", "tokens": [759, 604, 24922, 300, 321, 1562, 915, 1830, 264, 1379, 13508, 295, 264, 33591, 1062, 312, 257, 23918], "temperature": 0.0, "avg_logprob": -0.11210532360766308, "compression_ratio": 1.6218905472636815, "no_speech_prob": 3.217691482859664e-05}, {"id": 78, "seek": 27824, "start": 287.6, "end": 290.40000000000003, "text": " to a value, we can never compact the heap.", "tokens": [281, 257, 2158, 11, 321, 393, 1128, 14679, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.11210532360766308, "compression_ratio": 1.6218905472636815, "no_speech_prob": 3.217691482859664e-05}, {"id": 79, "seek": 27824, "start": 290.40000000000003, "end": 296.64, "text": " And this is actually a real, it's a real limitation for us in the sense that we can't", "tokens": [400, 341, 307, 767, 257, 957, 11, 309, 311, 257, 957, 27432, 337, 505, 294, 264, 2020, 300, 321, 393, 380], "temperature": 0.0, "avg_logprob": -0.11210532360766308, "compression_ratio": 1.6218905472636815, "no_speech_prob": 3.217691482859664e-05}, {"id": 80, "seek": 27824, "start": 296.64, "end": 301.8, "text": " use some of the newer, better performing garbage collecting algorithms.", "tokens": [764, 512, 295, 264, 17628, 11, 1101, 10205, 14150, 12510, 14642, 13], "temperature": 0.0, "avg_logprob": -0.11210532360766308, "compression_ratio": 1.6218905472636815, "no_speech_prob": 3.217691482859664e-05}, {"id": 81, "seek": 30180, "start": 301.8, "end": 309.64, "text": " And as a technical constraint, it also constrains the garbage collector from changing.", "tokens": [400, 382, 257, 6191, 25534, 11, 309, 611, 11525, 1292, 264, 14150, 23960, 490, 4473, 13], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 82, "seek": 30180, "start": 309.64, "end": 312.64, "text": " It's very difficult to change to one of those garbage collector algorithms now, because", "tokens": [467, 311, 588, 2252, 281, 1319, 281, 472, 295, 729, 14150, 23960, 14642, 586, 11, 570], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 83, "seek": 30180, "start": 312.64, "end": 316.6, "text": " we have so much user code, we have so much implementation, and it'll be hard.", "tokens": [321, 362, 370, 709, 4195, 3089, 11, 321, 362, 370, 709, 11420, 11, 293, 309, 603, 312, 1152, 13], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 84, "seek": 30180, "start": 316.6, "end": 321.68, "text": " But whatever I told you, there is actually a better way.", "tokens": [583, 2035, 286, 1907, 291, 11, 456, 307, 767, 257, 1101, 636, 13], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 85, "seek": 30180, "start": 321.68, "end": 323.68, "text": " Because we thought we were at a local maximum.", "tokens": [1436, 321, 1194, 321, 645, 412, 257, 2654, 6674, 13], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 86, "seek": 30180, "start": 323.68, "end": 327.8, "text": " We couldn't get any better without getting worse for a while.", "tokens": [492, 2809, 380, 483, 604, 1101, 1553, 1242, 5324, 337, 257, 1339, 13], "temperature": 0.0, "avg_logprob": -0.1468279810235052, "compression_ratio": 1.685483870967742, "no_speech_prob": 9.816685633268207e-06}, {"id": 87, "seek": 32780, "start": 327.8, "end": 331.88, "text": " We wouldn't reach that mountaintop without having to descend into the valley.", "tokens": [492, 2759, 380, 2524, 300, 3746, 5114, 404, 1553, 1419, 281, 16333, 666, 264, 17636, 13], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 88, "seek": 32780, "start": 331.88, "end": 338.40000000000003, "text": " But it turns out that you can have conservative roots and move objects and compact the heap.", "tokens": [583, 309, 4523, 484, 300, 291, 393, 362, 13780, 10669, 293, 1286, 6565, 293, 14679, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 89, "seek": 32780, "start": 338.40000000000003, "end": 343.36, "text": " You can have conservative roots and do a fast bump pointer allocation, which we'll get to", "tokens": [509, 393, 362, 13780, 10669, 293, 360, 257, 2370, 9961, 23918, 27599, 11, 597, 321, 603, 483, 281], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 90, "seek": 32780, "start": 343.36, "end": 344.36, "text": " in a minute.", "tokens": [294, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 91, "seek": 32780, "start": 344.36, "end": 350.8, "text": " And you can have conservative roots and eventually possibly add more precision to your scan.", "tokens": [400, 291, 393, 362, 13780, 10669, 293, 4728, 6264, 909, 544, 18356, 281, 428, 11049, 13], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 92, "seek": 32780, "start": 350.8, "end": 355.08000000000004, "text": " And the thing that came along that allowed me to know this was something called Immix.", "tokens": [400, 264, 551, 300, 1361, 2051, 300, 4350, 385, 281, 458, 341, 390, 746, 1219, 17322, 970, 13], "temperature": 0.0, "avg_logprob": -0.16219350007864144, "compression_ratio": 1.8266129032258065, "no_speech_prob": 1.0287980330758728e-05}, {"id": 93, "seek": 35508, "start": 355.08, "end": 362.12, "text": " This is a paper that was published in 2008 by Steve Blackburn, his group.", "tokens": [639, 307, 257, 3035, 300, 390, 6572, 294, 10389, 538, 7466, 4076, 21763, 11, 702, 1594, 13], "temperature": 0.0, "avg_logprob": -0.13627375552528784, "compression_ratio": 1.5082644628099173, "no_speech_prob": 6.397877587005496e-05}, {"id": 94, "seek": 35508, "start": 362.12, "end": 369.56, "text": " And it is a new, well, he characterizes in that paper a new class of fundamental GC algorithms.", "tokens": [400, 309, 307, 257, 777, 11, 731, 11, 415, 2517, 5660, 294, 300, 3035, 257, 777, 1508, 295, 8088, 29435, 14642, 13], "temperature": 0.0, "avg_logprob": -0.13627375552528784, "compression_ratio": 1.5082644628099173, "no_speech_prob": 6.397877587005496e-05}, {"id": 95, "seek": 35508, "start": 369.56, "end": 374.44, "text": " So you have basically four things you can do when you're doing a GC.", "tokens": [407, 291, 362, 1936, 1451, 721, 291, 393, 360, 562, 291, 434, 884, 257, 29435, 13], "temperature": 0.0, "avg_logprob": -0.13627375552528784, "compression_ratio": 1.5082644628099173, "no_speech_prob": 6.397877587005496e-05}, {"id": 96, "seek": 35508, "start": 374.44, "end": 378.88, "text": " You can have what's called mark compact, meaning find the live objects, and then slide them", "tokens": [509, 393, 362, 437, 311, 1219, 1491, 14679, 11, 3620, 915, 264, 1621, 6565, 11, 293, 550, 4137, 552], "temperature": 0.0, "avg_logprob": -0.13627375552528784, "compression_ratio": 1.5082644628099173, "no_speech_prob": 6.397877587005496e-05}, {"id": 97, "seek": 35508, "start": 378.88, "end": 381.4, "text": " all to one side of the same space.", "tokens": [439, 281, 472, 1252, 295, 264, 912, 1901, 13], "temperature": 0.0, "avg_logprob": -0.13627375552528784, "compression_ratio": 1.5082644628099173, "no_speech_prob": 6.397877587005496e-05}, {"id": 98, "seek": 38140, "start": 381.4, "end": 385.44, "text": " So within the space that you found the objects in, you slide them all to one side.", "tokens": [407, 1951, 264, 1901, 300, 291, 1352, 264, 6565, 294, 11, 291, 4137, 552, 439, 281, 472, 1252, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 99, "seek": 38140, "start": 385.44, "end": 391.12, "text": " You have mark sweep, find all the objects, and then collect all the holes into, these", "tokens": [509, 362, 1491, 22169, 11, 915, 439, 264, 6565, 11, 293, 550, 2500, 439, 264, 8118, 666, 11, 613], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 100, "seek": 38140, "start": 391.12, "end": 394.15999999999997, "text": " are the holes that are two words long, and these are the holes that are three words long,", "tokens": [366, 264, 8118, 300, 366, 732, 2283, 938, 11, 293, 613, 366, 264, 8118, 300, 366, 1045, 2283, 938, 11], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 101, "seek": 38140, "start": 394.15999999999997, "end": 396.15999999999997, "text": " and these are the holes, like that, into free lists.", "tokens": [293, 613, 366, 264, 8118, 11, 411, 300, 11, 666, 1737, 14511, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 102, "seek": 38140, "start": 396.15999999999997, "end": 397.15999999999997, "text": " This is what it's called.", "tokens": [639, 307, 437, 309, 311, 1219, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 103, "seek": 38140, "start": 397.15999999999997, "end": 398.56, "text": " You sweep to a free list.", "tokens": [509, 22169, 281, 257, 1737, 1329, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 104, "seek": 38140, "start": 398.56, "end": 399.56, "text": " Mark sweep.", "tokens": [3934, 22169, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 105, "seek": 38140, "start": 399.56, "end": 403.84, "text": " Evacuation, find all the live objects, and as you find them, you copy them somewhere else.", "tokens": [5689, 326, 16073, 11, 915, 439, 264, 1621, 6565, 11, 293, 382, 291, 915, 552, 11, 291, 5055, 552, 4079, 1646, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 106, "seek": 38140, "start": 403.84, "end": 407.91999999999996, "text": " So instead of sliding to part of one space, you get them out of the space entirely.", "tokens": [407, 2602, 295, 21169, 281, 644, 295, 472, 1901, 11, 291, 483, 552, 484, 295, 264, 1901, 7696, 13], "temperature": 0.0, "avg_logprob": -0.15767564709554582, "compression_ratio": 2.0676691729323307, "no_speech_prob": 6.642579592153197e-06}, {"id": 107, "seek": 40792, "start": 407.92, "end": 414.6, "text": " And that's a semi-space, for example, that's a number of different Java collection algorithms.", "tokens": [400, 300, 311, 257, 12909, 12, 24824, 11, 337, 1365, 11, 300, 311, 257, 1230, 295, 819, 10745, 5765, 14642, 13], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 108, "seek": 40792, "start": 414.6, "end": 417.72, "text": " And this other new algorithm is mark region.", "tokens": [400, 341, 661, 777, 9284, 307, 1491, 4458, 13], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 109, "seek": 40792, "start": 417.72, "end": 422.6, "text": " Find all the holes and bump pointer allocate into them.", "tokens": [11809, 439, 264, 8118, 293, 9961, 23918, 35713, 666, 552, 13], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 110, "seek": 40792, "start": 422.6, "end": 427.44, "text": " As you allocate, you sort of sweep across the space, and you allocate in a bump pointer", "tokens": [1018, 291, 35713, 11, 291, 1333, 295, 22169, 2108, 264, 1901, 11, 293, 291, 35713, 294, 257, 9961, 23918], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 111, "seek": 40792, "start": 427.44, "end": 431.0, "text": " fashion into this hole, and then to that hole, and then to that hole, instead of collecting", "tokens": [6700, 666, 341, 5458, 11, 293, 550, 281, 300, 5458, 11, 293, 550, 281, 300, 5458, 11, 2602, 295, 12510], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 112, "seek": 40792, "start": 431.0, "end": 432.20000000000005, "text": " free lists.", "tokens": [1737, 14511, 13], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 113, "seek": 40792, "start": 432.20000000000005, "end": 434.52000000000004, "text": " And IMIX is one of these new kind of collectors.", "tokens": [400, 286, 13808, 55, 307, 472, 295, 613, 777, 733, 295, 35384, 13], "temperature": 0.0, "avg_logprob": -0.18244647979736328, "compression_ratio": 1.847457627118644, "no_speech_prob": 1.3843521628587041e-05}, {"id": 114, "seek": 43452, "start": 434.52, "end": 438.4, "text": " This is a diagram from the paper, the 2008 paper.", "tokens": [639, 307, 257, 10686, 490, 264, 3035, 11, 264, 10389, 3035, 13], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 115, "seek": 43452, "start": 438.4, "end": 442.88, "text": " IMIX organizes the heap into blocks and lines.", "tokens": [286, 13808, 55, 4645, 279, 264, 33591, 666, 8474, 293, 3876, 13], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 116, "seek": 43452, "start": 442.88, "end": 447.59999999999997, "text": " Blocks are about 64 kilobytes in size, should be a multiple of the page size, and lines", "tokens": [9865, 2761, 366, 466, 12145, 5128, 996, 43673, 294, 2744, 11, 820, 312, 257, 3866, 295, 264, 3028, 2744, 11, 293, 3876], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 117, "seek": 43452, "start": 447.59999999999997, "end": 451.91999999999996, "text": " for IMIX are 128 bytes.", "tokens": [337, 286, 13808, 55, 366, 29810, 36088, 13], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 118, "seek": 43452, "start": 451.91999999999996, "end": 457.03999999999996, "text": " And as you allocate, here in this diagram, we can see that there are some blocks that", "tokens": [400, 382, 291, 35713, 11, 510, 294, 341, 10686, 11, 321, 393, 536, 300, 456, 366, 512, 8474, 300], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 119, "seek": 43452, "start": 457.03999999999996, "end": 458.03999999999996, "text": " are all full.", "tokens": [366, 439, 1577, 13], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 120, "seek": 43452, "start": 458.03999999999996, "end": 460.56, "text": " Full block, we don't have to do anything about it.", "tokens": [13841, 3461, 11, 321, 500, 380, 362, 281, 360, 1340, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.15751442819271447, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.0459454390220344e-05}, {"id": 121, "seek": 46056, "start": 460.56, "end": 465.68, "text": " There are some blocks that have some lines which were marked in the previous collection,", "tokens": [821, 366, 512, 8474, 300, 362, 512, 3876, 597, 645, 12658, 294, 264, 3894, 5765, 11], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 122, "seek": 46056, "start": 465.68, "end": 468.4, "text": " and some lines that were not marked in the previous collection.", "tokens": [293, 512, 3876, 300, 645, 406, 12658, 294, 264, 3894, 5765, 13], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 123, "seek": 46056, "start": 468.4, "end": 471.52, "text": " The lines that are not marked, a set of contiguous lines, is a hole.", "tokens": [440, 3876, 300, 366, 406, 12658, 11, 257, 992, 295, 660, 30525, 3876, 11, 307, 257, 5458, 13], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 124, "seek": 46056, "start": 471.52, "end": 474.16, "text": " You can bump pointer allocate into the holes.", "tokens": [509, 393, 9961, 23918, 35713, 666, 264, 8118, 13], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 125, "seek": 46056, "start": 474.16, "end": 478.38, "text": " Objects can be part of a line, in which case maybe many objects fit in a line.", "tokens": [24753, 82, 393, 312, 644, 295, 257, 1622, 11, 294, 597, 1389, 1310, 867, 6565, 3318, 294, 257, 1622, 13], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 126, "seek": 46056, "start": 478.38, "end": 483.88, "text": " They can span multiple lines, but they can't span blocks, okay?", "tokens": [814, 393, 16174, 3866, 3876, 11, 457, 436, 393, 380, 16174, 8474, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 127, "seek": 46056, "start": 483.88, "end": 487.12, "text": " When you allocate, you bump pointer allocate, and you sweep through all the blocks in the", "tokens": [1133, 291, 35713, 11, 291, 9961, 23918, 35713, 11, 293, 291, 22169, 807, 439, 264, 8474, 294, 264], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 128, "seek": 46056, "start": 487.12, "end": 490.04, "text": " system in the course of that GC cycle.", "tokens": [1185, 294, 264, 1164, 295, 300, 29435, 6586, 13], "temperature": 0.0, "avg_logprob": -0.12041296782316985, "compression_ratio": 1.96, "no_speech_prob": 8.937423444876913e-06}, {"id": 129, "seek": 49004, "start": 490.04, "end": 494.52000000000004, "text": " When you trace, you mark objects in the same way as a mark sweep collector, so there's", "tokens": [1133, 291, 13508, 11, 291, 1491, 6565, 294, 264, 912, 636, 382, 257, 1491, 22169, 23960, 11, 370, 456, 311], "temperature": 0.0, "avg_logprob": -0.16728531230579724, "compression_ratio": 1.7297297297297298, "no_speech_prob": 2.3918066290207207e-05}, {"id": 130, "seek": 49004, "start": 494.52000000000004, "end": 499.8, "text": " a mark bit associated with every object, possibly an object's header, possibly an aside table.", "tokens": [257, 1491, 857, 6615, 365, 633, 2657, 11, 6264, 364, 2657, 311, 23117, 11, 6264, 364, 7359, 3199, 13], "temperature": 0.0, "avg_logprob": -0.16728531230579724, "compression_ratio": 1.7297297297297298, "no_speech_prob": 2.3918066290207207e-05}, {"id": 131, "seek": 49004, "start": 499.8, "end": 505.56, "text": " But as you mark them, you also mark lines, the lines that they're on, using address math.", "tokens": [583, 382, 291, 1491, 552, 11, 291, 611, 1491, 3876, 11, 264, 3876, 300, 436, 434, 322, 11, 1228, 2985, 5221, 13], "temperature": 0.0, "avg_logprob": -0.16728531230579724, "compression_ratio": 1.7297297297297298, "no_speech_prob": 2.3918066290207207e-05}, {"id": 132, "seek": 49004, "start": 505.56, "end": 510.48, "text": " Typically the way this is invented is all these blocks are allocated as part of a line", "tokens": [23129, 264, 636, 341, 307, 14479, 307, 439, 613, 8474, 366, 29772, 382, 644, 295, 257, 1622], "temperature": 0.0, "avg_logprob": -0.16728531230579724, "compression_ratio": 1.7297297297297298, "no_speech_prob": 2.3918066290207207e-05}, {"id": 133, "seek": 49004, "start": 510.48, "end": 517.24, "text": " 2 megabyte slabs, basically, and you can use address arithmetic to get to the aside table", "tokens": [568, 10816, 34529, 1061, 17243, 11, 1936, 11, 293, 291, 393, 764, 2985, 42973, 281, 483, 281, 264, 7359, 3199], "temperature": 0.0, "avg_logprob": -0.16728531230579724, "compression_ratio": 1.7297297297297298, "no_speech_prob": 2.3918066290207207e-05}, {"id": 134, "seek": 51724, "start": 517.24, "end": 521.76, "text": " of mark bytes for the line.", "tokens": [295, 1491, 36088, 337, 264, 1622, 13], "temperature": 0.0, "avg_logprob": -0.13476571072353405, "compression_ratio": 1.726829268292683, "no_speech_prob": 4.936807272315491e-06}, {"id": 135, "seek": 51724, "start": 521.76, "end": 529.2, "text": " When you sweep, you do, at the end of collection, there is an eager sweep over all of the line", "tokens": [1133, 291, 22169, 11, 291, 360, 11, 412, 264, 917, 295, 5765, 11, 456, 307, 364, 18259, 22169, 670, 439, 295, 264, 1622], "temperature": 0.0, "avg_logprob": -0.13476571072353405, "compression_ratio": 1.726829268292683, "no_speech_prob": 4.936807272315491e-06}, {"id": 136, "seek": 51724, "start": 529.2, "end": 534.8, "text": " mark bytes, so the contiguous array of mark bytes for lines, to identify which blocks", "tokens": [1491, 36088, 11, 370, 264, 660, 30525, 10225, 295, 1491, 36088, 337, 3876, 11, 281, 5876, 597, 8474], "temperature": 0.0, "avg_logprob": -0.13476571072353405, "compression_ratio": 1.726829268292683, "no_speech_prob": 4.936807272315491e-06}, {"id": 137, "seek": 51724, "start": 534.8, "end": 539.96, "text": " are full, which are completely empty, and which are recycled, containing some old data,", "tokens": [366, 1577, 11, 597, 366, 2584, 6707, 11, 293, 597, 366, 30674, 11, 19273, 512, 1331, 1412, 11], "temperature": 0.0, "avg_logprob": -0.13476571072353405, "compression_ratio": 1.726829268292683, "no_speech_prob": 4.936807272315491e-06}, {"id": 138, "seek": 51724, "start": 539.96, "end": 544.16, "text": " and those you would bump pointer allocate into the holes.", "tokens": [293, 729, 291, 576, 9961, 23918, 35713, 666, 264, 8118, 13], "temperature": 0.0, "avg_logprob": -0.13476571072353405, "compression_ratio": 1.726829268292683, "no_speech_prob": 4.936807272315491e-06}, {"id": 139, "seek": 54416, "start": 544.16, "end": 551.04, "text": " The cool thing about it is that IMIX does opportunistic evacuation, so it's not simply", "tokens": [440, 1627, 551, 466, 309, 307, 300, 286, 13808, 55, 775, 2070, 3142, 42740, 11, 370, 309, 311, 406, 2935], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 140, "seek": 54416, "start": 551.04, "end": 552.9599999999999, "text": " leaving these objects in place.", "tokens": [5012, 613, 6565, 294, 1081, 13], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 141, "seek": 54416, "start": 552.9599999999999, "end": 557.64, "text": " If it determines that your system needs to be defragmented, then it can choose some set", "tokens": [759, 309, 24799, 300, 428, 1185, 2203, 281, 312, 1060, 3731, 14684, 11, 550, 309, 393, 2826, 512, 992], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 142, "seek": 54416, "start": 557.64, "end": 562.12, "text": " of blocks to evacuate, and choose some other set of blocks which are already empty to be", "tokens": [295, 8474, 281, 48570, 11, 293, 2826, 512, 661, 992, 295, 8474, 597, 366, 1217, 6707, 281, 312], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 143, "seek": 54416, "start": 562.12, "end": 563.8, "text": " evacuation targets.", "tokens": [42740, 12911, 13], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 144, "seek": 54416, "start": 563.8, "end": 567.8399999999999, "text": " So it's still a one-pass algorithm over the heap, but instead of marking objects in place,", "tokens": [407, 309, 311, 920, 257, 472, 12, 9216, 9284, 670, 264, 33591, 11, 457, 2602, 295, 25482, 6565, 294, 1081, 11], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 145, "seek": 54416, "start": 567.8399999999999, "end": 570.8, "text": " it tries to put them into an empty block.", "tokens": [309, 9898, 281, 829, 552, 666, 364, 6707, 3461, 13], "temperature": 0.0, "avg_logprob": -0.13655162068594873, "compression_ratio": 1.7099236641221374, "no_speech_prob": 9.817471436690539e-06}, {"id": 146, "seek": 57080, "start": 570.8, "end": 575.76, "text": " And if you do this a couple of times, you'll completely defragment the heap.", "tokens": [400, 498, 291, 360, 341, 257, 1916, 295, 1413, 11, 291, 603, 2584, 1060, 3731, 518, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 147, "seek": 57080, "start": 575.76, "end": 582.88, "text": " And it can fail because parallel markers, and ordering, and alignment issues, and that's", "tokens": [400, 309, 393, 3061, 570, 8952, 19175, 11, 293, 21739, 11, 293, 18515, 2663, 11, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 148, "seek": 57080, "start": 582.88, "end": 586.24, "text": " okay if the evacuation fails, you just mark in place.", "tokens": [1392, 498, 264, 42740, 18199, 11, 291, 445, 1491, 294, 1081, 13], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 149, "seek": 57080, "start": 586.24, "end": 591.4, "text": " It's always okay to mark in place, and it's always okay to try to evacuate, evacuation", "tokens": [467, 311, 1009, 1392, 281, 1491, 294, 1081, 11, 293, 309, 311, 1009, 1392, 281, 853, 281, 48570, 11, 42740], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 150, "seek": 57080, "start": 591.4, "end": 593.04, "text": " may or may not succeed.", "tokens": [815, 420, 815, 406, 7754, 13], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 151, "seek": 57080, "start": 593.04, "end": 598.3599999999999, "text": " So when I realize this, that you can mark in place or evacuate, this is something that", "tokens": [407, 562, 286, 4325, 341, 11, 300, 291, 393, 1491, 294, 1081, 420, 48570, 11, 341, 307, 746, 300], "temperature": 0.0, "avg_logprob": -0.1375607207969383, "compression_ratio": 1.8051948051948052, "no_speech_prob": 1.6962118024821393e-05}, {"id": 152, "seek": 59836, "start": 598.36, "end": 601.2, "text": " is compatible with guile, right?", "tokens": [307, 18218, 365, 695, 794, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 153, "seek": 59836, "start": 601.2, "end": 605.36, "text": " We can do bump-point allocation now instead of allocating from free lists, which would", "tokens": [492, 393, 360, 9961, 12, 6053, 27599, 586, 2602, 295, 12660, 990, 490, 1737, 14511, 11, 597, 576], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 154, "seek": 59836, "start": 605.36, "end": 608.44, "text": " improve throughput in guile programs.", "tokens": [3470, 44629, 294, 695, 794, 4268, 13], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 155, "seek": 59836, "start": 608.44, "end": 616.92, "text": " We can compact the heap, which is, I mean, I know there are many users here, and python-xyz.scm", "tokens": [492, 393, 14679, 264, 33591, 11, 597, 307, 11, 286, 914, 11, 286, 458, 456, 366, 867, 5022, 510, 11, 293, 38797, 12, 12876, 89, 13, 4417, 76], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 156, "seek": 59836, "start": 616.92, "end": 621.08, "text": " is one of the files you have, yes.", "tokens": [307, 472, 295, 264, 7098, 291, 362, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 157, "seek": 59836, "start": 621.08, "end": 622.28, "text": " I say no more.", "tokens": [286, 584, 572, 544, 13], "temperature": 0.0, "avg_logprob": -0.21738944583468967, "compression_ratio": 1.4926108374384237, "no_speech_prob": 6.604108784813434e-05}, {"id": 158, "seek": 62228, "start": 622.28, "end": 628.6, "text": " So I started a year on this, on this work-in-progress whip GC implementation, hence where the name", "tokens": [407, 286, 1409, 257, 1064, 322, 341, 11, 322, 341, 589, 12, 259, 12, 4318, 3091, 22377, 29435, 11420, 11, 16678, 689, 264, 1315], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 159, "seek": 62228, "start": 628.6, "end": 629.6, "text": " comes from.", "tokens": [1487, 490, 13], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 160, "seek": 62228, "start": 629.6, "end": 631.0799999999999, "text": " There are a couple of differences from IMEX.", "tokens": [821, 366, 257, 1916, 295, 7300, 490, 286, 15454, 55, 13], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 161, "seek": 62228, "start": 631.0799999999999, "end": 638.0, "text": " IMEX has these 128-byte lines, and if just one object on a line is left over, then the", "tokens": [286, 15454, 55, 575, 613, 29810, 12, 2322, 975, 3876, 11, 293, 498, 445, 472, 2657, 322, 257, 1622, 307, 1411, 670, 11, 550, 264], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 162, "seek": 62228, "start": 638.0, "end": 640.76, "text": " line is kept live, right?", "tokens": [1622, 307, 4305, 1621, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 163, "seek": 62228, "start": 640.76, "end": 646.8, "text": " In the next collection, nobody will allocate, nobody will put an object in that line.", "tokens": [682, 264, 958, 5765, 11, 5079, 486, 35713, 11, 5079, 486, 829, 364, 2657, 294, 300, 1622, 13], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 164, "seek": 62228, "start": 646.8, "end": 649.6, "text": " It's not a hole, basically.", "tokens": [467, 311, 406, 257, 5458, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.18533003330230713, "compression_ratio": 1.5591836734693878, "no_speech_prob": 8.137732947943732e-06}, {"id": 165, "seek": 64960, "start": 649.6, "end": 655.9200000000001, "text": " And for various reasons, I didn't make sense to me, so instead in Whippet, we have 16-byte", "tokens": [400, 337, 3683, 4112, 11, 286, 994, 380, 652, 2020, 281, 385, 11, 370, 2602, 294, 506, 2488, 302, 11, 321, 362, 3165, 12, 2322, 975], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 166, "seek": 64960, "start": 655.9200000000001, "end": 661.44, "text": " lines, so effectively the line mark table is the object mark table.", "tokens": [3876, 11, 370, 8659, 264, 1622, 1491, 3199, 307, 264, 2657, 1491, 3199, 13], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 167, "seek": 64960, "start": 661.44, "end": 669.0400000000001, "text": " You only have one mark byte, it's a byte because of parallel markers, and it's a bit more", "tokens": [509, 787, 362, 472, 1491, 40846, 11, 309, 311, 257, 40846, 570, 295, 8952, 19175, 11, 293, 309, 311, 257, 857, 544], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 168, "seek": 64960, "start": 669.0400000000001, "end": 673.96, "text": " overhead in terms of space, but maybe it's a bit more parsimonious with memory, we'll", "tokens": [19922, 294, 2115, 295, 1901, 11, 457, 1310, 309, 311, 257, 857, 544, 21156, 25098, 851, 365, 4675, 11, 321, 603], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 169, "seek": 64960, "start": 673.96, "end": 674.96, "text": " see how it works out.", "tokens": [536, 577, 309, 1985, 484, 13], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 170, "seek": 64960, "start": 674.96, "end": 677.4, "text": " It's an open question here.", "tokens": [467, 311, 364, 1269, 1168, 510, 13], "temperature": 0.0, "avg_logprob": -0.18767587488347834, "compression_ratio": 1.6134453781512605, "no_speech_prob": 8.396661542064976e-06}, {"id": 171, "seek": 67740, "start": 677.4, "end": 682.9599999999999, "text": " And additionally, with these line mark bytes being more fine-grained, it's a lose to do", "tokens": [400, 43181, 11, 365, 613, 1622, 1491, 36088, 885, 544, 2489, 12, 20735, 2001, 11, 309, 311, 257, 3624, 281, 360], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 172, "seek": 67740, "start": 682.9599999999999, "end": 687.3199999999999, "text": " an eager sweep over the heap, so we do lazy sweeping, so as you allocate, you just sweep", "tokens": [364, 18259, 22169, 670, 264, 33591, 11, 370, 321, 360, 14847, 33285, 11, 370, 382, 291, 35713, 11, 291, 445, 22169], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 173, "seek": 67740, "start": 687.3199999999999, "end": 691.1999999999999, "text": " one block, and then sweep another block, and then sweep another block, like that.", "tokens": [472, 3461, 11, 293, 550, 22169, 1071, 3461, 11, 293, 550, 22169, 1071, 3461, 11, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 174, "seek": 67740, "start": 691.1999999999999, "end": 694.36, "text": " And the good thing about that is that it parallelizes things.", "tokens": [400, 264, 665, 551, 466, 300, 307, 300, 309, 8952, 5660, 721, 13], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 175, "seek": 67740, "start": 694.36, "end": 697.8, "text": " The bad thing is that you don't know how much data was live at the previous collection right", "tokens": [440, 1578, 551, 307, 300, 291, 500, 380, 458, 577, 709, 1412, 390, 1621, 412, 264, 3894, 5765, 558], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 176, "seek": 67740, "start": 697.8, "end": 700.24, "text": " after your collection, because you haven't swept yet.", "tokens": [934, 428, 5765, 11, 570, 291, 2378, 380, 31791, 1939, 13], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 177, "seek": 67740, "start": 700.24, "end": 702.92, "text": " Yeah, okay.", "tokens": [865, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.17001493190362202, "compression_ratio": 1.7806691449814127, "no_speech_prob": 1.165719277196331e-05}, {"id": 178, "seek": 70292, "start": 702.92, "end": 708.4799999999999, "text": " So some comparisons with Whippet compared to the Bohm collector, and there are a number", "tokens": [407, 512, 33157, 365, 506, 2488, 302, 5347, 281, 264, 32484, 76, 23960, 11, 293, 456, 366, 257, 1230], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 179, "seek": 70292, "start": 708.4799999999999, "end": 709.92, "text": " of different points here.", "tokens": [295, 819, 2793, 510, 13], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 180, "seek": 70292, "start": 709.92, "end": 711.8399999999999, "text": " So one of them is you can move values.", "tokens": [407, 472, 295, 552, 307, 291, 393, 1286, 4190, 13], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 181, "seek": 70292, "start": 711.8399999999999, "end": 719.0799999999999, "text": " If every edge in your graph is potentially conservative, then you can't move anything,", "tokens": [759, 633, 4691, 294, 428, 4295, 307, 7263, 13780, 11, 550, 291, 393, 380, 1286, 1340, 11], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 182, "seek": 70292, "start": 719.0799999999999, "end": 725.52, "text": " because you could find an edge that keeps an object live and doesn't allow moving late", "tokens": [570, 291, 727, 915, 364, 4691, 300, 5965, 364, 2657, 1621, 293, 1177, 380, 2089, 2684, 3469], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 183, "seek": 70292, "start": 725.52, "end": 727.28, "text": " in the trace.", "tokens": [294, 264, 13508, 13], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 184, "seek": 70292, "start": 727.28, "end": 731.0, "text": " But if you can partition your edges into a set that's conservative and a set that's not", "tokens": [583, 498, 291, 393, 24808, 428, 8819, 666, 257, 992, 300, 311, 13780, 293, 257, 992, 300, 311, 406], "temperature": 0.0, "avg_logprob": -0.14398921538736217, "compression_ratio": 1.68503937007874, "no_speech_prob": 7.069907951517962e-06}, {"id": 185, "seek": 73100, "start": 731.0, "end": 735.12, "text": " conservative, a set that's precise, you do the conservative ones first, and any object", "tokens": [13780, 11, 257, 992, 300, 311, 13600, 11, 291, 360, 264, 13780, 2306, 700, 11, 293, 604, 2657], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 186, "seek": 73100, "start": 735.12, "end": 738.48, "text": " which isn't reached in that conservative trace is then movable.", "tokens": [597, 1943, 380, 6488, 294, 300, 13780, 13508, 307, 550, 2402, 712, 13], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 187, "seek": 73100, "start": 738.48, "end": 742.48, "text": " So what happens is you mark the stack first, and you mark in place, you don't evacuate.", "tokens": [407, 437, 2314, 307, 291, 1491, 264, 8630, 700, 11, 293, 291, 1491, 294, 1081, 11, 291, 500, 380, 48570, 13], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 188, "seek": 73100, "start": 742.48, "end": 746.28, "text": " That is an implicit pin on every object that you mark.", "tokens": [663, 307, 364, 26947, 5447, 322, 633, 2657, 300, 291, 1491, 13], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 189, "seek": 73100, "start": 746.28, "end": 748.88, "text": " And then you go and you mark the heap, and if you find another object there, you can", "tokens": [400, 550, 291, 352, 293, 291, 1491, 264, 33591, 11, 293, 498, 291, 915, 1071, 2657, 456, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 190, "seek": 73100, "start": 748.88, "end": 752.8, "text": " evacuate at that point.", "tokens": [48570, 412, 300, 935, 13], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 191, "seek": 73100, "start": 752.8, "end": 758.6, "text": " And then in Whippet, if we see that the heap is fragmented, we can turn evacuation on,", "tokens": [400, 550, 294, 506, 2488, 302, 11, 498, 321, 536, 300, 264, 33591, 307, 9241, 14684, 11, 321, 393, 1261, 42740, 322, 11], "temperature": 0.0, "avg_logprob": -0.09812910854816437, "compression_ratio": 1.9328063241106719, "no_speech_prob": 4.468830593395978e-05}, {"id": 192, "seek": 75860, "start": 758.6, "end": 761.5600000000001, "text": " and if we don't, if we see the heap is not fragmented, we can always mark in place and", "tokens": [293, 498, 321, 500, 380, 11, 498, 321, 536, 264, 33591, 307, 406, 9241, 14684, 11, 321, 393, 1009, 1491, 294, 1081, 293], "temperature": 0.0, "avg_logprob": -0.11990437456356581, "compression_ratio": 1.5482456140350878, "no_speech_prob": 1.8341112081543542e-05}, {"id": 193, "seek": 75860, "start": 761.5600000000001, "end": 767.8000000000001, "text": " not incur the overhead of copying.", "tokens": [406, 35774, 264, 19922, 295, 27976, 13], "temperature": 0.0, "avg_logprob": -0.11990437456356581, "compression_ratio": 1.5482456140350878, "no_speech_prob": 1.8341112081543542e-05}, {"id": 194, "seek": 75860, "start": 767.8000000000001, "end": 771.36, "text": " There is also explicit pinning for various reasons.", "tokens": [821, 307, 611, 13691, 5447, 773, 337, 3683, 4112, 13], "temperature": 0.0, "avg_logprob": -0.11990437456356581, "compression_ratio": 1.5482456140350878, "no_speech_prob": 1.8341112081543542e-05}, {"id": 195, "seek": 75860, "start": 771.36, "end": 779.0, "text": " We can shrink the heap, which is nice, because these blocks are multiples of the OS page size,", "tokens": [492, 393, 23060, 264, 33591, 11, 597, 307, 1481, 11, 570, 613, 8474, 366, 46099, 295, 264, 12731, 3028, 2744, 11], "temperature": 0.0, "avg_logprob": -0.11990437456356581, "compression_ratio": 1.5482456140350878, "no_speech_prob": 1.8341112081543542e-05}, {"id": 196, "seek": 75860, "start": 779.0, "end": 783.6, "text": " they're easy to return to the OS whenever we find that a block is empty, and you can", "tokens": [436, 434, 1858, 281, 2736, 281, 264, 12731, 5699, 321, 915, 300, 257, 3461, 307, 6707, 11, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.11990437456356581, "compression_ratio": 1.5482456140350878, "no_speech_prob": 1.8341112081543542e-05}, {"id": 197, "seek": 78360, "start": 783.6, "end": 788.88, "text": " just mark it as being empty, and MAdvise, MAV don't need it, and if you ever need it", "tokens": [445, 1491, 309, 382, 885, 6707, 11, 293, 376, 15830, 85, 908, 11, 12191, 53, 500, 380, 643, 309, 11, 293, 498, 291, 1562, 643, 309], "temperature": 0.0, "avg_logprob": -0.151001257054946, "compression_ratio": 1.5041322314049588, "no_speech_prob": 3.821822247118689e-05}, {"id": 198, "seek": 78360, "start": 788.88, "end": 793.64, "text": " again, you can pull it right back in, it's zeroed by the OS.", "tokens": [797, 11, 291, 393, 2235, 309, 558, 646, 294, 11, 309, 311, 4018, 292, 538, 264, 12731, 13], "temperature": 0.0, "avg_logprob": -0.151001257054946, "compression_ratio": 1.5041322314049588, "no_speech_prob": 3.821822247118689e-05}, {"id": 199, "seek": 78360, "start": 793.64, "end": 800.08, "text": " And additionally, there's a possibility to use adaptive heap sizing techniques, such", "tokens": [400, 43181, 11, 456, 311, 257, 7959, 281, 764, 27912, 33591, 45435, 7512, 11, 1270], "temperature": 0.0, "avg_logprob": -0.151001257054946, "compression_ratio": 1.5041322314049588, "no_speech_prob": 3.821822247118689e-05}, {"id": 200, "seek": 78360, "start": 800.08, "end": 807.2, "text": " as the one that I link here, it's an online algorithm that depends on what's your current", "tokens": [382, 264, 472, 300, 286, 2113, 510, 11, 309, 311, 364, 2950, 9284, 300, 5946, 322, 437, 311, 428, 2190], "temperature": 0.0, "avg_logprob": -0.151001257054946, "compression_ratio": 1.5041322314049588, "no_speech_prob": 3.821822247118689e-05}, {"id": 201, "seek": 78360, "start": 807.2, "end": 809.6800000000001, "text": " cost of GC and how fast are you allocating.", "tokens": [2063, 295, 29435, 293, 577, 2370, 366, 291, 12660, 990, 13], "temperature": 0.0, "avg_logprob": -0.151001257054946, "compression_ratio": 1.5041322314049588, "no_speech_prob": 3.821822247118689e-05}, {"id": 202, "seek": 80968, "start": 809.68, "end": 814.4399999999999, "text": " So a process which sort of stops and goes quiet, gets its memory slowly reduced to the", "tokens": [407, 257, 1399, 597, 1333, 295, 10094, 293, 1709, 5677, 11, 2170, 1080, 4675, 5692, 9212, 281, 264], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 203, "seek": 80968, "start": 814.4399999999999, "end": 815.4399999999999, "text": " minimum.", "tokens": [7285, 13], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 204, "seek": 80968, "start": 815.4399999999999, "end": 817.04, "text": " You can fit more on a system.", "tokens": [509, 393, 3318, 544, 322, 257, 1185, 13], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 205, "seek": 80968, "start": 817.04, "end": 822.8399999999999, "text": " And we can also do a generational collection, if we want to, using the sticky mark-byte", "tokens": [400, 321, 393, 611, 360, 257, 48320, 5765, 11, 498, 321, 528, 281, 11, 1228, 264, 14470, 1491, 12, 2322, 975], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 206, "seek": 80968, "start": 822.8399999999999, "end": 828.12, "text": " algorithm, which I link to here, it's described more in that post.", "tokens": [9284, 11, 597, 286, 2113, 281, 510, 11, 309, 311, 7619, 544, 294, 300, 2183, 13], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 207, "seek": 80968, "start": 828.12, "end": 832.88, "text": " For some programs, it doesn't make a difference, because some data isn't very generation friendly.", "tokens": [1171, 512, 4268, 11, 309, 1177, 380, 652, 257, 2649, 11, 570, 512, 1412, 1943, 380, 588, 5125, 9208, 13], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 208, "seek": 80968, "start": 832.88, "end": 839.04, "text": " This is the case of the first empty GC bench pair over there, where the first bar is Whippet", "tokens": [639, 307, 264, 1389, 295, 264, 700, 6707, 29435, 10638, 6119, 670, 456, 11, 689, 264, 700, 2159, 307, 506, 2488, 302], "temperature": 0.0, "avg_logprob": -0.15793818962283251, "compression_ratio": 1.5892255892255893, "no_speech_prob": 1.0946481779683381e-05}, {"id": 209, "seek": 83904, "start": 839.04, "end": 842.0799999999999, "text": " without generational collection, and the second is with.", "tokens": [1553, 48320, 5765, 11, 293, 264, 1150, 307, 365, 13], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 210, "seek": 83904, "start": 842.0799999999999, "end": 847.4399999999999, "text": " But in some cases, it's very effective, like in this, I'm making a bunch of quad trees,", "tokens": [583, 294, 512, 3331, 11, 309, 311, 588, 4942, 11, 411, 294, 341, 11, 286, 478, 1455, 257, 3840, 295, 10787, 5852, 11], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 211, "seek": 83904, "start": 847.4399999999999, "end": 852.9599999999999, "text": " and it pretty much doubles the throughput of the system.", "tokens": [293, 309, 1238, 709, 31634, 264, 44629, 295, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 212, "seek": 83904, "start": 852.9599999999999, "end": 858.1999999999999, "text": " Additionally, with Whippet, we scale a lot better for multiple allocator threads.", "tokens": [19927, 11, 365, 506, 2488, 302, 11, 321, 4373, 257, 688, 1101, 337, 3866, 12660, 1639, 19314, 13], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 213, "seek": 83904, "start": 858.1999999999999, "end": 863.3199999999999, "text": " In BDW, you have these size segregated free lists, the free lists of size two, three,", "tokens": [682, 363, 35, 54, 11, 291, 362, 613, 2744, 47370, 1737, 14511, 11, 264, 1737, 14511, 295, 2744, 732, 11, 1045, 11], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 214, "seek": 83904, "start": 863.3199999999999, "end": 868.16, "text": " four, and that sort of thing, and you need to lock the heap to sweep and find more and", "tokens": [1451, 11, 293, 300, 1333, 295, 551, 11, 293, 291, 643, 281, 4017, 264, 33591, 281, 22169, 293, 915, 544, 293], "temperature": 0.0, "avg_logprob": -0.19500184259494813, "compression_ratio": 1.6285714285714286, "no_speech_prob": 1.4965749869588763e-05}, {"id": 215, "seek": 86816, "start": 868.16, "end": 869.7199999999999, "text": " fill those free lists.", "tokens": [2836, 729, 1737, 14511, 13], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 216, "seek": 86816, "start": 869.7199999999999, "end": 876.12, "text": " In Whippet, you use uncontended atomic ops to obtain the next block, just basically incrementing", "tokens": [682, 506, 2488, 302, 11, 291, 764, 36019, 3502, 22275, 44663, 281, 12701, 264, 958, 3461, 11, 445, 1936, 26200, 278], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 217, "seek": 86816, "start": 876.12, "end": 883.3199999999999, "text": " a counter, because the blocks are contiguous in these two megabyte slabs, and you sweep", "tokens": [257, 5682, 11, 570, 264, 8474, 366, 660, 30525, 294, 613, 732, 10816, 34529, 1061, 17243, 11, 293, 291, 22169], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 218, "seek": 86816, "start": 883.3199999999999, "end": 884.48, "text": " without contention.", "tokens": [1553, 660, 1251, 13], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 219, "seek": 86816, "start": 884.48, "end": 889.8, "text": " So these are two graphs showing the time it takes as problem size increases and number", "tokens": [407, 613, 366, 732, 24877, 4099, 264, 565, 309, 2516, 382, 1154, 2744, 8637, 293, 1230], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 220, "seek": 86816, "start": 889.8, "end": 891.36, "text": " of mutator threads increases.", "tokens": [295, 5839, 1639, 19314, 8637, 13], "temperature": 0.0, "avg_logprob": -0.15204929751019144, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.0450841728015803e-05}, {"id": 221, "seek": 89136, "start": 891.36, "end": 898.12, "text": " So at each step, I'm adding on an additional mutator, an additional thread, doing the same", "tokens": [407, 412, 1184, 1823, 11, 286, 478, 5127, 322, 364, 4497, 5839, 1639, 11, 364, 4497, 7207, 11, 884, 264, 912], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 222, "seek": 89136, "start": 898.12, "end": 899.12, "text": " amount of work.", "tokens": [2372, 295, 589, 13], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 223, "seek": 89136, "start": 899.12, "end": 904.28, "text": " So with two mutator threads, the heap is twice as big as it was with one, and with eight,", "tokens": [407, 365, 732, 5839, 1639, 19314, 11, 264, 33591, 307, 6091, 382, 955, 382, 309, 390, 365, 472, 11, 293, 365, 3180, 11], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 224, "seek": 89136, "start": 904.28, "end": 906.16, "text": " it's eight times as big as it was with one.", "tokens": [309, 311, 3180, 1413, 382, 955, 382, 309, 390, 365, 472, 13], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 225, "seek": 89136, "start": 906.16, "end": 907.96, "text": " So we do expect to see some increase.", "tokens": [407, 321, 360, 2066, 281, 536, 512, 3488, 13], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 226, "seek": 89136, "start": 907.96, "end": 916.6800000000001, "text": " What we see is that BDW takes more time, ultimately, like it's at nine seconds with an eight thread", "tokens": [708, 321, 536, 307, 300, 363, 35, 54, 2516, 544, 565, 11, 6284, 11, 411, 309, 311, 412, 4949, 3949, 365, 364, 3180, 7207], "temperature": 0.0, "avg_logprob": -0.14328895996664173, "compression_ratio": 1.758139534883721, "no_speech_prob": 1.4738035133632366e-05}, {"id": 227, "seek": 91668, "start": 916.68, "end": 921.76, "text": " mutator, whereas we're only at three and a half with Whippet, it scales much better when", "tokens": [5839, 1639, 11, 9735, 321, 434, 787, 412, 1045, 293, 257, 1922, 365, 506, 2488, 302, 11, 309, 17408, 709, 1101, 562], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 228, "seek": 91668, "start": 921.76, "end": 922.76, "text": " you're adding allocators.", "tokens": [291, 434, 5127, 12660, 3391, 13], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 229, "seek": 91668, "start": 922.76, "end": 927.4399999999999, "text": " And this is with a single marker thread, so we expect to see some increase as the problem", "tokens": [400, 341, 307, 365, 257, 2167, 15247, 7207, 11, 370, 321, 2066, 281, 536, 512, 3488, 382, 264, 1154], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 230, "seek": 91668, "start": 927.4399999999999, "end": 930.28, "text": " size gets larger.", "tokens": [2744, 2170, 4833, 13], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 231, "seek": 91668, "start": 930.28, "end": 932.52, "text": " This is, what do you call that?", "tokens": [639, 307, 11, 437, 360, 291, 818, 300, 30], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 232, "seek": 91668, "start": 932.52, "end": 936.64, "text": " It's like when you make a quilt, apparently you're supposed to put a part in it that's", "tokens": [467, 311, 411, 562, 291, 652, 257, 27566, 11, 7970, 291, 434, 3442, 281, 829, 257, 644, 294, 309, 300, 311], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 233, "seek": 91668, "start": 936.64, "end": 941.16, "text": " incorrect because you don't want to show too much pride in the face of God, right?", "tokens": [18424, 570, 291, 500, 380, 528, 281, 855, 886, 709, 10936, 294, 264, 1851, 295, 1265, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 234, "seek": 91668, "start": 941.16, "end": 943.4799999999999, "text": " It's like a touch of the hand sort of thing.", "tokens": [467, 311, 411, 257, 2557, 295, 264, 1011, 1333, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.13753811762883114, "compression_ratio": 1.6341463414634145, "no_speech_prob": 1.0615071005304344e-05}, {"id": 235, "seek": 94348, "start": 943.48, "end": 949.0, "text": " This is my humility slide showing Whippet being slower than BDWGC on this one machine.", "tokens": [639, 307, 452, 27106, 4137, 4099, 506, 2488, 302, 885, 14009, 813, 363, 35, 54, 38, 34, 322, 341, 472, 3479, 13], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 236, "seek": 94348, "start": 949.0, "end": 952.48, "text": " I have no idea what's going on with this because I remeasure it on my other machine.", "tokens": [286, 362, 572, 1558, 437, 311, 516, 322, 365, 341, 570, 286, 890, 68, 2508, 309, 322, 452, 661, 3479, 13], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 237, "seek": 94348, "start": 952.48, "end": 953.72, "text": " It looks much better.", "tokens": [467, 1542, 709, 1101, 13], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 238, "seek": 94348, "start": 953.72, "end": 958.48, "text": " But it does point that as you add on marker threads, things improve, although I don't", "tokens": [583, 309, 775, 935, 300, 382, 291, 909, 322, 15247, 19314, 11, 721, 3470, 11, 4878, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 239, "seek": 94348, "start": 958.48, "end": 963.32, "text": " understand the relative BDW Whippet thing right there, so that's a question.", "tokens": [1223, 264, 4972, 363, 35, 54, 506, 2488, 302, 551, 558, 456, 11, 370, 300, 311, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 240, "seek": 94348, "start": 963.32, "end": 969.44, "text": " So with the heap, with twice as much memory as the problem takes, as we add markers, things", "tokens": [407, 365, 264, 33591, 11, 365, 6091, 382, 709, 4675, 382, 264, 1154, 2516, 11, 382, 321, 909, 19175, 11, 721], "temperature": 0.0, "avg_logprob": -0.13648721994447313, "compression_ratio": 1.635036496350365, "no_speech_prob": 8.138625162246171e-06}, {"id": 241, "seek": 96944, "start": 969.44, "end": 975.48, "text": " get better for both BDW and Whippet, but a little bit better for Whippet.", "tokens": [483, 1101, 337, 1293, 363, 35, 54, 293, 506, 2488, 302, 11, 457, 257, 707, 857, 1101, 337, 506, 2488, 302, 13], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 242, "seek": 96944, "start": 975.48, "end": 977.2, "text": " So ephemerons.", "tokens": [407, 308, 950, 29660, 892, 13], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 243, "seek": 96944, "start": 977.2, "end": 981.6, "text": " This is weak maps like you have in JavaScript where you have keys associated with value,", "tokens": [639, 307, 5336, 11317, 411, 291, 362, 294, 15778, 689, 291, 362, 9317, 6615, 365, 2158, 11], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 244, "seek": 96944, "start": 981.6, "end": 983.8000000000001, "text": " but what if value references key?", "tokens": [457, 437, 498, 2158, 15400, 2141, 30], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 245, "seek": 96944, "start": 983.8000000000001, "end": 986.84, "text": " Can you have a circular reference?", "tokens": [1664, 291, 362, 257, 16476, 6408, 30], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 246, "seek": 96944, "start": 986.84, "end": 990.08, "text": " Could the weak reference, does it leak memory?", "tokens": [7497, 264, 5336, 6408, 11, 775, 309, 17143, 4675, 30], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 247, "seek": 96944, "start": 990.08, "end": 991.08, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 248, "seek": 96944, "start": 991.08, "end": 993.5600000000001, "text": " You people have heard about ephemerons, I would imagine.", "tokens": [509, 561, 362, 2198, 466, 308, 950, 29660, 892, 11, 286, 576, 3811, 13], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 249, "seek": 96944, "start": 993.5600000000001, "end": 995.96, "text": " You cannot do them in the boom collector.", "tokens": [509, 2644, 360, 552, 294, 264, 9351, 23960, 13], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 250, "seek": 96944, "start": 995.96, "end": 997.6, "text": " It's impossible, right?", "tokens": [467, 311, 6243, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.22090303039550782, "compression_ratio": 1.6412213740458015, "no_speech_prob": 2.2122423615655862e-05}, {"id": 251, "seek": 99760, "start": 997.6, "end": 1001.4, "text": " I've tried a lot and thought about this, but with Whippet we have them.", "tokens": [286, 600, 3031, 257, 688, 293, 1194, 466, 341, 11, 457, 365, 506, 2488, 302, 321, 362, 552, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 252, "seek": 99760, "start": 1001.4, "end": 1005.9200000000001, "text": " You really need deep GC integration to implement ephemerons.", "tokens": [509, 534, 643, 2452, 29435, 10980, 281, 4445, 308, 950, 29660, 892, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 253, "seek": 99760, "start": 1005.9200000000001, "end": 1007.6, "text": " Right and precision.", "tokens": [1779, 293, 18356, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 254, "seek": 99760, "start": 1007.6, "end": 1010.0, "text": " So with BDW, you're always stack conservative.", "tokens": [407, 365, 363, 35, 54, 11, 291, 434, 1009, 8630, 13780, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 255, "seek": 99760, "start": 1010.0, "end": 1017.4, "text": " You're always scanning the heap, the stack for smelly pointers, right, or smelly integers,", "tokens": [509, 434, 1009, 27019, 264, 33591, 11, 264, 8630, 337, 4316, 88, 44548, 11, 558, 11, 420, 4316, 88, 41674, 11], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 256, "seek": 99760, "start": 1017.4, "end": 1020.12, "text": " integers that could point to the heap.", "tokens": [41674, 300, 727, 935, 281, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 257, "seek": 99760, "start": 1020.12, "end": 1025.88, "text": " And it's often configured in such a way that every edge on the heap also is conservative.", "tokens": [400, 309, 311, 2049, 30538, 294, 1270, 257, 636, 300, 633, 4691, 322, 264, 33591, 611, 307, 13780, 13], "temperature": 0.0, "avg_logprob": -0.18185017790113175, "compression_ratio": 1.6600790513833992, "no_speech_prob": 2.2826252461527474e-05}, {"id": 258, "seek": 102588, "start": 1025.88, "end": 1028.92, "text": " And with Whippet we can configure it in a number of different ways.", "tokens": [400, 365, 506, 2488, 302, 321, 393, 22162, 309, 294, 257, 1230, 295, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 259, "seek": 102588, "start": 1028.92, "end": 1034.96, "text": " And probably we're heading down the mid-near term is this conservative scan of the C stack,", "tokens": [400, 1391, 321, 434, 9864, 760, 264, 2062, 12, 716, 289, 1433, 307, 341, 13780, 11049, 295, 264, 383, 8630, 11], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 260, "seek": 102588, "start": 1034.96, "end": 1039.64, "text": " precise scan of the scheme stack, and a precise scan of the heap.", "tokens": [13600, 11049, 295, 264, 12232, 8630, 11, 293, 257, 13600, 11049, 295, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 261, "seek": 102588, "start": 1039.64, "end": 1043.3600000000001, "text": " So we will be able to get the advantages of motion and compaction and all that.", "tokens": [407, 321, 486, 312, 1075, 281, 483, 264, 14906, 295, 5394, 293, 715, 2894, 293, 439, 300, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 262, "seek": 102588, "start": 1043.3600000000001, "end": 1047.6000000000001, "text": " But we could move to a fully precise stack as well.", "tokens": [583, 321, 727, 1286, 281, 257, 4498, 13600, 8630, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 263, "seek": 102588, "start": 1047.6000000000001, "end": 1049.1200000000001, "text": " And potentially things to get better.", "tokens": [400, 7263, 721, 281, 483, 1101, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 264, "seek": 102588, "start": 1049.1200000000001, "end": 1050.68, "text": " BDW GC is terrible to hack on.", "tokens": [363, 35, 54, 29435, 307, 6237, 281, 10339, 322, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 265, "seek": 102588, "start": 1050.68, "end": 1055.68, "text": " I just counted it's like 15 or 16% CP processor directives.", "tokens": [286, 445, 20150, 309, 311, 411, 2119, 420, 3165, 4, 22431, 15321, 2047, 1539, 13], "temperature": 0.0, "avg_logprob": -0.19622492067741626, "compression_ratio": 1.647457627118644, "no_speech_prob": 1.8921202354249544e-05}, {"id": 266, "seek": 105568, "start": 1055.68, "end": 1059.3600000000001, "text": " You can imagine it's probably 90% of the code is covered by if thefts.", "tokens": [509, 393, 3811, 309, 311, 1391, 4289, 4, 295, 264, 3089, 307, 5343, 538, 498, 28508, 82, 13], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 267, "seek": 105568, "start": 1059.3600000000001, "end": 1061.64, "text": " It's really, really hard.", "tokens": [467, 311, 534, 11, 534, 1152, 13], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 268, "seek": 105568, "start": 1061.64, "end": 1062.64, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 269, "seek": 105568, "start": 1062.64, "end": 1071.68, "text": " So some more words about how it is that we are, we are, that royal we, right, okay.", "tokens": [407, 512, 544, 2283, 466, 577, 309, 307, 300, 321, 366, 11, 321, 366, 11, 300, 13351, 321, 11, 558, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 270, "seek": 105568, "start": 1071.68, "end": 1077.4, "text": " Working on getting Whippet implemented in such a way that it could land in Guile and", "tokens": [18337, 322, 1242, 506, 2488, 302, 12270, 294, 1270, 257, 636, 300, 309, 727, 2117, 294, 2694, 794, 293], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 271, "seek": 105568, "start": 1077.4, "end": 1085.6000000000001, "text": " not break the world because I'm going to make a confession.", "tokens": [406, 1821, 264, 1002, 570, 286, 478, 516, 281, 652, 257, 29154, 13], "temperature": 0.0, "avg_logprob": -0.24016388257344565, "compression_ratio": 1.4821428571428572, "no_speech_prob": 7.64558444643626e-06}, {"id": 272, "seek": 108560, "start": 1085.6, "end": 1091.9599999999998, "text": " I don't maintain software, I develop software, and I throw it over the wallet, I forget about", "tokens": [286, 500, 380, 6909, 4722, 11, 286, 1499, 4722, 11, 293, 286, 3507, 309, 670, 264, 16599, 11, 286, 2870, 466], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 273, "seek": 108560, "start": 1091.9599999999998, "end": 1092.9599999999998, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 274, "seek": 108560, "start": 1092.9599999999998, "end": 1096.6, "text": " So if I'm going to get bugs in the garbage collector, that's not, I better not start", "tokens": [407, 498, 286, 478, 516, 281, 483, 15120, 294, 264, 14150, 23960, 11, 300, 311, 406, 11, 286, 1101, 406, 722], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 275, "seek": 108560, "start": 1096.6, "end": 1101.8, "text": " because, you know, I'm not going to fix them.", "tokens": [570, 11, 291, 458, 11, 286, 478, 406, 516, 281, 3191, 552, 13], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 276, "seek": 108560, "start": 1101.8, "end": 1110.3999999999999, "text": " So the repositories here, it is designed to be an embed only library, kind of like an", "tokens": [407, 264, 22283, 2083, 510, 11, 309, 307, 4761, 281, 312, 364, 12240, 787, 6405, 11, 733, 295, 411, 364], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 277, "seek": 108560, "start": 1110.3999999999999, "end": 1114.7199999999998, "text": " include style library, but you actually do separate compilation.", "tokens": [4090, 3758, 6405, 11, 457, 291, 767, 360, 4994, 40261, 13], "temperature": 0.0, "avg_logprob": -0.2051067165299958, "compression_ratio": 1.6196581196581197, "no_speech_prob": 1.1123773219878785e-05}, {"id": 278, "seek": 111472, "start": 1114.72, "end": 1119.04, "text": " But it's something that you include in your source tree because it needs to be specialized", "tokens": [583, 309, 311, 746, 300, 291, 4090, 294, 428, 4009, 4230, 570, 309, 2203, 281, 312, 19813], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 279, "seek": 111472, "start": 1119.04, "end": 1121.8, "text": " with respect to the program that's using it.", "tokens": [365, 3104, 281, 264, 1461, 300, 311, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 280, "seek": 111472, "start": 1121.8, "end": 1127.72, "text": " In the case of Guile, Guile will tell Whippet how to put a forwarding pointer in an object,", "tokens": [682, 264, 1389, 295, 2694, 794, 11, 2694, 794, 486, 980, 506, 2488, 302, 577, 281, 829, 257, 2128, 278, 23918, 294, 364, 2657, 11], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 281, "seek": 111472, "start": 1127.72, "end": 1132.8, "text": " for example, how to do a precise trace of the heap.", "tokens": [337, 1365, 11, 577, 281, 360, 257, 13600, 13508, 295, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 282, "seek": 111472, "start": 1132.8, "end": 1137.4, "text": " And then we also specify Whippet with respect to the domain.", "tokens": [400, 550, 321, 611, 16500, 506, 2488, 302, 365, 3104, 281, 264, 9274, 13], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 283, "seek": 111472, "start": 1137.4, "end": 1144.0, "text": " So what should we scan conservatively, what should we scan precisely, that sort of thing.", "tokens": [407, 437, 820, 321, 11049, 13780, 356, 11, 437, 820, 321, 11049, 13402, 11, 300, 1333, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.10166469642094203, "compression_ratio": 1.7269076305220883, "no_speech_prob": 1.52035909195547e-05}, {"id": 284, "seek": 114400, "start": 1144.0, "end": 1152.04, "text": " There is, we use LTO, and it appears to remove the overhead of the separate compilation,", "tokens": [821, 307, 11, 321, 764, 441, 15427, 11, 293, 309, 7038, 281, 4159, 264, 19922, 295, 264, 4994, 40261, 11], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 285, "seek": 114400, "start": 1152.04, "end": 1154.56, "text": " link time optimization.", "tokens": [2113, 565, 19618, 13], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 286, "seek": 114400, "start": 1154.56, "end": 1160.48, "text": " I'm actually suspecting LTO for that other graph that I showed you.", "tokens": [286, 478, 767, 9091, 278, 441, 15427, 337, 300, 661, 4295, 300, 286, 4712, 291, 13], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 287, "seek": 114400, "start": 1160.48, "end": 1165.96, "text": " So we actually managed to get performance and abstraction at the same time by being", "tokens": [407, 321, 767, 6453, 281, 483, 3389, 293, 37765, 412, 264, 912, 565, 538, 885], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 288, "seek": 114400, "start": 1165.96, "end": 1166.96, "text": " inspired by MMTK.", "tokens": [7547, 538, 34191, 51, 42, 13], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 289, "seek": 114400, "start": 1166.96, "end": 1171.36, "text": " MMTK is a memory management toolkit, it's fantastic.", "tokens": [34191, 51, 42, 307, 257, 4675, 4592, 40167, 11, 309, 311, 5456, 13], "temperature": 0.0, "avg_logprob": -0.18480463461442428, "compression_ratio": 1.5158371040723981, "no_speech_prob": 1.5444300515810028e-05}, {"id": 290, "seek": 117136, "start": 1171.36, "end": 1176.9799999999998, "text": " It's a library of garbage collectors and technique and experience and knowledge, currently", "tokens": [467, 311, 257, 6405, 295, 14150, 35384, 293, 6532, 293, 1752, 293, 3601, 11, 4362], "temperature": 0.0, "avg_logprob": -0.1662744738391994, "compression_ratio": 1.4722222222222223, "no_speech_prob": 2.6269592126482166e-05}, {"id": 291, "seek": 117136, "start": 1176.9799999999998, "end": 1186.24, "text": " written in Rust, formerly part of the Jyx research JVM, but now retargeting to open", "tokens": [3720, 294, 34952, 11, 34777, 644, 295, 264, 508, 88, 87, 2132, 508, 53, 44, 11, 457, 586, 1533, 289, 847, 278, 281, 1269], "temperature": 0.0, "avg_logprob": -0.1662744738391994, "compression_ratio": 1.4722222222222223, "no_speech_prob": 2.6269592126482166e-05}, {"id": 292, "seek": 117136, "start": 1186.24, "end": 1188.9599999999998, "text": " JDK and V8 and a number of other systems.", "tokens": [37082, 42, 293, 691, 23, 293, 257, 1230, 295, 661, 3652, 13], "temperature": 0.0, "avg_logprob": -0.1662744738391994, "compression_ratio": 1.4722222222222223, "no_speech_prob": 2.6269592126482166e-05}, {"id": 293, "seek": 117136, "start": 1188.9599999999998, "end": 1193.32, "text": " We could actually slot this into Guile if we wanted to at some point.", "tokens": [492, 727, 767, 14747, 341, 666, 2694, 794, 498, 321, 1415, 281, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.1662744738391994, "compression_ratio": 1.4722222222222223, "no_speech_prob": 2.6269592126482166e-05}, {"id": 294, "seek": 117136, "start": 1193.32, "end": 1198.9599999999998, "text": " But we have enough information exposed in the API to allow a JIT to use that exposed", "tokens": [583, 321, 362, 1547, 1589, 9495, 294, 264, 9362, 281, 2089, 257, 508, 3927, 281, 764, 300, 9495], "temperature": 0.0, "avg_logprob": -0.1662744738391994, "compression_ratio": 1.4722222222222223, "no_speech_prob": 2.6269592126482166e-05}, {"id": 295, "seek": 119896, "start": 1198.96, "end": 1205.4, "text": " information and generate machine code for the fast path for allocation, for example.", "tokens": [1589, 293, 8460, 3479, 3089, 337, 264, 2370, 3100, 337, 27599, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.15915755221718236, "compression_ratio": 1.5991379310344827, "no_speech_prob": 1.165773664979497e-05}, {"id": 296, "seek": 119896, "start": 1205.4, "end": 1210.32, "text": " And by having like a real abstract barrier between the two sides, we allow both sides", "tokens": [400, 538, 1419, 411, 257, 957, 12649, 13357, 1296, 264, 732, 4881, 11, 321, 2089, 1293, 4881], "temperature": 0.0, "avg_logprob": -0.15915755221718236, "compression_ratio": 1.5991379310344827, "no_speech_prob": 1.165773664979497e-05}, {"id": 297, "seek": 119896, "start": 1210.32, "end": 1214.72, "text": " to evolve at their own pace.", "tokens": [281, 16693, 412, 641, 1065, 11638, 13], "temperature": 0.0, "avg_logprob": -0.15915755221718236, "compression_ratio": 1.5991379310344827, "no_speech_prob": 1.165773664979497e-05}, {"id": 298, "seek": 119896, "start": 1214.72, "end": 1217.92, "text": " And when we think about migrating Guile to Whippet, which is kind of where I want to", "tokens": [400, 562, 321, 519, 466, 6186, 8754, 2694, 794, 281, 506, 2488, 302, 11, 597, 307, 733, 295, 689, 286, 528, 281], "temperature": 0.0, "avg_logprob": -0.15915755221718236, "compression_ratio": 1.5991379310344827, "no_speech_prob": 1.165773664979497e-05}, {"id": 299, "seek": 119896, "start": 1217.92, "end": 1225.0, "text": " go here, I know in the talk description it kind of oversold the item, right, it's like", "tokens": [352, 510, 11, 286, 458, 294, 264, 751, 3855, 309, 733, 295, 670, 45537, 264, 3174, 11, 558, 11, 309, 311, 411], "temperature": 0.0, "avg_logprob": -0.15915755221718236, "compression_ratio": 1.5991379310344827, "no_speech_prob": 1.165773664979497e-05}, {"id": 300, "seek": 122500, "start": 1225.0, "end": 1229.32, "text": " now we have a new production garbage collector in Guile, it's not there yet.", "tokens": [586, 321, 362, 257, 777, 4265, 14150, 23960, 294, 2694, 794, 11, 309, 311, 406, 456, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 301, "seek": 122500, "start": 1229.32, "end": 1233.64, "text": " So this abstract API can be implemented by the current garbage collector being used by", "tokens": [407, 341, 12649, 9362, 393, 312, 12270, 538, 264, 2190, 14150, 23960, 885, 1143, 538], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 302, "seek": 122500, "start": 1233.64, "end": 1236.92, "text": " Guile, by the Bohm collector, by the BDW collector.", "tokens": [2694, 794, 11, 538, 264, 32484, 76, 23960, 11, 538, 264, 363, 35, 54, 23960, 13], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 303, "seek": 122500, "start": 1236.92, "end": 1240.88, "text": " And so that's going to be the first step, is to switch Guile over to use the new API", "tokens": [400, 370, 300, 311, 516, 281, 312, 264, 700, 1823, 11, 307, 281, 3679, 2694, 794, 670, 281, 764, 264, 777, 9362], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 304, "seek": 122500, "start": 1240.88, "end": 1243.48, "text": " but still use the old collector implementation.", "tokens": [457, 920, 764, 264, 1331, 23960, 11420, 13], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 305, "seek": 122500, "start": 1243.48, "end": 1247.32, "text": " And then we can look at switching to Whippet, but that wouldn't require any code changes", "tokens": [400, 550, 321, 393, 574, 412, 16493, 281, 506, 2488, 302, 11, 457, 300, 2759, 380, 3651, 604, 3089, 2962], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 306, "seek": 122500, "start": 1247.32, "end": 1251.48, "text": " ideally in Guile.", "tokens": [22915, 294, 2694, 794, 13], "temperature": 0.0, "avg_logprob": -0.1410260041554769, "compression_ratio": 1.7843137254901962, "no_speech_prob": 1.2604950825334527e-05}, {"id": 307, "seek": 125148, "start": 1251.48, "end": 1256.32, "text": " I mean, so you have the Whippet API, but then you have the Whippet garbage implementation", "tokens": [286, 914, 11, 370, 291, 362, 264, 506, 2488, 302, 9362, 11, 457, 550, 291, 362, 264, 506, 2488, 302, 14150, 11420], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 308, "seek": 125148, "start": 1256.32, "end": 1258.0, "text": " algorithm that we were talking about.", "tokens": [9284, 300, 321, 645, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 309, "seek": 125148, "start": 1258.0, "end": 1262.76, "text": " There are a lot of variants on the algorithm in Sonali that you can, these are different", "tokens": [821, 366, 257, 688, 295, 21669, 322, 264, 9284, 294, 5185, 5103, 300, 291, 393, 11, 613, 366, 819], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 310, "seek": 125148, "start": 1262.76, "end": 1267.92, "text": " ways you can configure Whippet on two different tests, one there's MTGC bench, one there's", "tokens": [2098, 291, 393, 22162, 506, 2488, 302, 322, 732, 819, 6921, 11, 472, 456, 311, 37333, 38, 34, 10638, 11, 472, 456, 311], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 311, "seek": 125148, "start": 1267.92, "end": 1269.32, "text": " quads here.", "tokens": [421, 5834, 510, 13], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 312, "seek": 125148, "start": 1269.32, "end": 1277.1200000000001, "text": " And going across we can first see serial Whippet, one marker, one marking thread, it's not going", "tokens": [400, 516, 2108, 321, 393, 700, 536, 17436, 506, 2488, 302, 11, 472, 15247, 11, 472, 25482, 7207, 11, 309, 311, 406, 516], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 313, "seek": 125148, "start": 1277.1200000000001, "end": 1278.44, "text": " to be parallel marking.", "tokens": [281, 312, 8952, 25482, 13], "temperature": 0.0, "avg_logprob": -0.21874573651482077, "compression_ratio": 1.7670682730923695, "no_speech_prob": 9.816677447815891e-06}, {"id": 314, "seek": 127844, "start": 1278.44, "end": 1281.68, "text": " That's the first light blue bar on both of those sides.", "tokens": [663, 311, 264, 700, 1442, 3344, 2159, 322, 1293, 295, 729, 4881, 13], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 315, "seek": 127844, "start": 1281.68, "end": 1287.96, "text": " And then we have parallel Whippet, four markers in this case is what I was measuring.", "tokens": [400, 550, 321, 362, 8952, 506, 2488, 302, 11, 1451, 19175, 294, 341, 1389, 307, 437, 286, 390, 13389, 13], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 316, "seek": 127844, "start": 1287.96, "end": 1293.1200000000001, "text": " It improves things in some cases, a little bit in other cases, minor improvements.", "tokens": [467, 24771, 721, 294, 512, 3331, 11, 257, 707, 857, 294, 661, 3331, 11, 6696, 13797, 13], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 317, "seek": 127844, "start": 1293.1200000000001, "end": 1298.8, "text": " Generational Whippet, collect more recently allocated objects more frequently than older", "tokens": [15409, 1478, 506, 2488, 302, 11, 2500, 544, 3938, 29772, 6565, 544, 10374, 813, 4906], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 318, "seek": 127844, "start": 1298.8, "end": 1299.96, "text": " objects.", "tokens": [6565, 13], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 319, "seek": 127844, "start": 1299.96, "end": 1303.0800000000002, "text": " Parallel generational Whippet, four markers and generational.", "tokens": [3457, 336, 338, 48320, 506, 2488, 302, 11, 1451, 19175, 293, 48320, 13], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 320, "seek": 127844, "start": 1303.0800000000002, "end": 1307.72, "text": " And then after that there's four more bars which are the same thing, but collecting stack", "tokens": [400, 550, 934, 300, 456, 311, 1451, 544, 10228, 597, 366, 264, 912, 551, 11, 457, 12510, 8630], "temperature": 0.0, "avg_logprob": -0.1503791474459464, "compression_ratio": 1.781954887218045, "no_speech_prob": 1.3005342225369532e-05}, {"id": 321, "seek": 130772, "start": 1307.72, "end": 1310.44, "text": " routes conservatively.", "tokens": [18242, 13780, 356, 13], "temperature": 0.0, "avg_logprob": -0.18488218726181402, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.0232849894673564e-05}, {"id": 322, "seek": 130772, "start": 1310.44, "end": 1314.72, "text": " The previous one is a precise scan of the stack, the previous four bars and then the", "tokens": [440, 3894, 472, 307, 257, 13600, 11049, 295, 264, 8630, 11, 264, 3894, 1451, 10228, 293, 550, 264], "temperature": 0.0, "avg_logprob": -0.18488218726181402, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.0232849894673564e-05}, {"id": 323, "seek": 130772, "start": 1314.72, "end": 1321.32, "text": " next four bars are conservative scan and as you'll note it actually performs better.", "tokens": [958, 1451, 10228, 366, 13780, 11049, 293, 382, 291, 603, 3637, 309, 767, 26213, 1101, 13], "temperature": 0.0, "avg_logprob": -0.18488218726181402, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.0232849894673564e-05}, {"id": 324, "seek": 130772, "start": 1321.32, "end": 1327.18, "text": " And there are two reasons for this, one conservative scanning can actually reduce the lifetime", "tokens": [400, 456, 366, 732, 4112, 337, 341, 11, 472, 13780, 27019, 393, 767, 5407, 264, 11364], "temperature": 0.0, "avg_logprob": -0.18488218726181402, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.0232849894673564e-05}, {"id": 325, "seek": 130772, "start": 1327.18, "end": 1332.88, "text": " of objects if the compiler determines that an object isn't needed at any given point", "tokens": [295, 6565, 498, 264, 31958, 24799, 300, 364, 2657, 1943, 380, 2978, 412, 604, 2212, 935], "temperature": 0.0, "avg_logprob": -0.18488218726181402, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.0232849894673564e-05}, {"id": 326, "seek": 133288, "start": 1332.88, "end": 1338.16, "text": " it can reuse its register or stack slot or what have you, whereas you have to wait for", "tokens": [309, 393, 26225, 1080, 7280, 420, 8630, 14747, 420, 437, 362, 291, 11, 9735, 291, 362, 281, 1699, 337], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 327, "seek": 133288, "start": 1338.16, "end": 1344.0400000000002, "text": " the unregister part of a registration, deregistration API if you're using precise routes.", "tokens": [264, 517, 3375, 1964, 644, 295, 257, 16847, 11, 15969, 70, 468, 2405, 9362, 498, 291, 434, 1228, 13600, 18242, 13], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 328, "seek": 133288, "start": 1344.0400000000002, "end": 1349.88, "text": " And the other thing is that when using this API from C, I don't actually have cooperation", "tokens": [400, 264, 661, 551, 307, 300, 562, 1228, 341, 9362, 490, 383, 11, 286, 500, 380, 767, 362, 14968], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 329, "seek": 133288, "start": 1349.88, "end": 1354.48, "text": " from the compiler where it's going to write out a table of where all the values are.", "tokens": [490, 264, 31958, 689, 309, 311, 516, 281, 2464, 484, 257, 3199, 295, 689, 439, 264, 4190, 366, 13], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 330, "seek": 133288, "start": 1354.48, "end": 1358.4, "text": " I have to explicitly say, and now remember this one, okay, now forget it.", "tokens": [286, 362, 281, 20803, 584, 11, 293, 586, 1604, 341, 472, 11, 1392, 11, 586, 2870, 309, 13], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 331, "seek": 133288, "start": 1358.4, "end": 1360.0800000000002, "text": " And now remember this one, and now forget it.", "tokens": [400, 586, 1604, 341, 472, 11, 293, 586, 2870, 309, 13], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 332, "seek": 133288, "start": 1360.0800000000002, "end": 1361.3600000000001, "text": " And that's overhead, right?", "tokens": [400, 300, 311, 19922, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1552498303926908, "compression_ratio": 1.8079710144927537, "no_speech_prob": 3.3205644285771996e-05}, {"id": 333, "seek": 136136, "start": 1361.36, "end": 1366.3999999999999, "text": " And by doing a conservative scan, I remove that overhead.", "tokens": [400, 538, 884, 257, 13780, 11049, 11, 286, 4159, 300, 19922, 13], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 334, "seek": 136136, "start": 1366.3999999999999, "end": 1368.8, "text": " And then the final two bars, I didn't include generational because it doesn't really make", "tokens": [400, 550, 264, 2572, 732, 10228, 11, 286, 994, 380, 4090, 48320, 570, 309, 1177, 380, 534, 652], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 335, "seek": 136136, "start": 1368.8, "end": 1373.12, "text": " sense in this context as a fully heap conservative scan.", "tokens": [2020, 294, 341, 4319, 382, 257, 4498, 33591, 13780, 11049, 13], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 336, "seek": 136136, "start": 1373.12, "end": 1377.6, "text": " We increase a lot on this empty GC benchmark because it allocates a very big array and", "tokens": [492, 3488, 257, 688, 322, 341, 6707, 29435, 18927, 570, 309, 12660, 1024, 257, 588, 955, 10225, 293], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 337, "seek": 136136, "start": 1377.6, "end": 1383.56, "text": " I don't have the equivalent of point on this allocation that the BDW API gives you.", "tokens": [286, 500, 380, 362, 264, 10344, 295, 935, 322, 341, 27599, 300, 264, 363, 35, 54, 9362, 2709, 291, 13], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 338, "seek": 136136, "start": 1383.56, "end": 1387.12, "text": " So we end up tracing all the elements of that really big array, which gives a big spike", "tokens": [407, 321, 917, 493, 25262, 439, 264, 4959, 295, 300, 534, 955, 10225, 11, 597, 2709, 257, 955, 21053], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 339, "seek": 136136, "start": 1387.12, "end": 1388.36, "text": " over there.", "tokens": [670, 456, 13], "temperature": 0.0, "avg_logprob": -0.12601964086548895, "compression_ratio": 1.6843971631205674, "no_speech_prob": 9.515157216810621e-06}, {"id": 340, "seek": 138836, "start": 1388.36, "end": 1391.76, "text": " And in the case of quads, we never have large objects, we're always tracing everything anyway", "tokens": [400, 294, 264, 1389, 295, 421, 5834, 11, 321, 1128, 362, 2416, 6565, 11, 321, 434, 1009, 25262, 1203, 4033], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 341, "seek": 138836, "start": 1391.76, "end": 1393.4399999999998, "text": " and it doesn't really matter.", "tokens": [293, 309, 1177, 380, 534, 1871, 13], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 342, "seek": 138836, "start": 1393.4399999999998, "end": 1397.36, "text": " But heap conservative does slow you down relative to just having stack conservative.", "tokens": [583, 33591, 13780, 775, 2964, 291, 760, 4972, 281, 445, 1419, 8630, 13780, 13], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 343, "seek": 138836, "start": 1397.36, "end": 1398.36, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 344, "seek": 138836, "start": 1398.36, "end": 1406.84, "text": " And then as a project, it's written in C, which I know is a sin, but Guile has this sort of", "tokens": [400, 550, 382, 257, 1716, 11, 309, 311, 3720, 294, 383, 11, 597, 286, 458, 307, 257, 3343, 11, 457, 2694, 794, 575, 341, 1333, 295], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 345, "seek": 138836, "start": 1406.84, "end": 1411.84, "text": " odd place in the supply chain of geeks and it's useful to depend on a more minimal set", "tokens": [7401, 1081, 294, 264, 5847, 5021, 295, 1519, 24785, 293, 309, 311, 4420, 281, 5672, 322, 257, 544, 13206, 992], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 346, "seek": 138836, "start": 1411.84, "end": 1414.36, "text": " of things rather than using Rust, for example.", "tokens": [295, 721, 2831, 813, 1228, 34952, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.18540510094684104, "compression_ratio": 1.592057761732852, "no_speech_prob": 4.1568177948647644e-06}, {"id": 347, "seek": 141436, "start": 1414.36, "end": 1421.84, "text": " But it's a relatively modern C, uses stethatomic, uses things in a way that are constexpr-ish", "tokens": [583, 309, 311, 257, 7226, 4363, 383, 11, 4960, 342, 3293, 267, 21401, 11, 4960, 721, 294, 257, 636, 300, 366, 1817, 3121, 1424, 12, 742], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 348, "seek": 141436, "start": 1421.84, "end": 1426.0, "text": " in a way that you know that the compiler is going to reduce them down.", "tokens": [294, 257, 636, 300, 291, 458, 300, 264, 31958, 307, 516, 281, 5407, 552, 760, 13], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 349, "seek": 141436, "start": 1426.0, "end": 1431.6399999999999, "text": " It avoids void pointers completely, using instead structs containing a single number,", "tokens": [467, 3641, 3742, 22009, 44548, 2584, 11, 1228, 2602, 6594, 82, 19273, 257, 2167, 1230, 11], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 350, "seek": 141436, "start": 1431.6399999999999, "end": 1435.76, "text": " which gets boiled away by the compiler as well, which can't be cast to each other, you need", "tokens": [597, 2170, 21058, 1314, 538, 264, 31958, 382, 731, 11, 597, 393, 380, 312, 4193, 281, 1184, 661, 11, 291, 643], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 351, "seek": 141436, "start": 1435.76, "end": 1439.7199999999998, "text": " explicit conversions, that way you won't confuse a conservative reference with a precise reference", "tokens": [13691, 42256, 11, 300, 636, 291, 1582, 380, 28584, 257, 13780, 6408, 365, 257, 13600, 6408], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 352, "seek": 141436, "start": 1439.7199999999998, "end": 1441.36, "text": " and things like that.", "tokens": [293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1746638113992256, "compression_ratio": 1.7340823970037453, "no_speech_prob": 9.970330211217515e-06}, {"id": 353, "seek": 144136, "start": 1441.36, "end": 1445.76, "text": " And we don't actually have any API or API concern at all because it's an embedded-only", "tokens": [400, 321, 500, 380, 767, 362, 604, 9362, 420, 9362, 3136, 412, 439, 570, 309, 311, 364, 16741, 12, 25202], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 354, "seek": 144136, "start": 1445.76, "end": 1446.76, "text": " library.", "tokens": [6405, 13], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 355, "seek": 144136, "start": 1446.76, "end": 1451.32, "text": " If something breaks, don't update it.", "tokens": [759, 746, 9857, 11, 500, 380, 5623, 309, 13], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 356, "seek": 144136, "start": 1451.32, "end": 1455.08, "text": " And it does have a bit of an abstraction for how do you find conservative roots on whatever", "tokens": [400, 309, 775, 362, 257, 857, 295, 364, 37765, 337, 577, 360, 291, 915, 13780, 10669, 322, 2035], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 357, "seek": 144136, "start": 1455.08, "end": 1456.56, "text": " your platform is.", "tokens": [428, 3663, 307, 13], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 358, "seek": 144136, "start": 1456.56, "end": 1458.9599999999998, "text": " It's not so bad, it turns out.", "tokens": [467, 311, 406, 370, 1578, 11, 309, 4523, 484, 13], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 359, "seek": 144136, "start": 1458.9599999999998, "end": 1466.04, "text": " So if we think about when it is that this might reach Guile, then we are, it's when", "tokens": [407, 498, 321, 519, 466, 562, 309, 307, 300, 341, 1062, 2524, 2694, 794, 11, 550, 321, 366, 11, 309, 311, 562], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 360, "seek": 144136, "start": 1466.04, "end": 1469.0, "text": " we can, right, you know, in the end.", "tokens": [321, 393, 11, 558, 11, 291, 458, 11, 294, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.16457265770953636, "compression_ratio": 1.5612648221343874, "no_speech_prob": 1.5203366274363361e-05}, {"id": 361, "seek": 146900, "start": 1469.0, "end": 1471.8, "text": " This is kind of a side project for me.", "tokens": [639, 307, 733, 295, 257, 1252, 1716, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.182715334211077, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.816371857596096e-06}, {"id": 362, "seek": 146900, "start": 1471.8, "end": 1481.4, "text": " I have other side projects, children, you know, so I can't really give an ETA here,", "tokens": [286, 362, 661, 1252, 4455, 11, 2227, 11, 291, 458, 11, 370, 286, 393, 380, 534, 976, 364, 462, 8241, 510, 11], "temperature": 0.0, "avg_logprob": -0.182715334211077, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.816371857596096e-06}, {"id": 363, "seek": 146900, "start": 1481.4, "end": 1487.72, "text": " but I would mention that there are a few things to do, and what we might end up with is that", "tokens": [457, 286, 576, 2152, 300, 456, 366, 257, 1326, 721, 281, 360, 11, 293, 437, 321, 1062, 917, 493, 365, 307, 300], "temperature": 0.0, "avg_logprob": -0.182715334211077, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.816371857596096e-06}, {"id": 364, "seek": 146900, "start": 1487.72, "end": 1491.44, "text": " we could get a new release series for Guile, which is I think is what would be required", "tokens": [321, 727, 483, 257, 777, 4374, 2638, 337, 2694, 794, 11, 597, 307, 286, 519, 307, 437, 576, 312, 4739], "temperature": 0.0, "avg_logprob": -0.182715334211077, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.816371857596096e-06}, {"id": 365, "seek": 146900, "start": 1491.44, "end": 1497.32, "text": " for this, maybe starting in six months or so, just switching over to the API and staying", "tokens": [337, 341, 11, 1310, 2891, 294, 2309, 2493, 420, 370, 11, 445, 16493, 670, 281, 264, 9362, 293, 7939], "temperature": 0.0, "avg_logprob": -0.182715334211077, "compression_ratio": 1.5742971887550201, "no_speech_prob": 9.816371857596096e-06}, {"id": 366, "seek": 149732, "start": 1497.32, "end": 1502.48, "text": " with the Balm Collector, and maybe we could release a new stable version in another six", "tokens": [365, 264, 13140, 76, 4586, 20814, 11, 293, 1310, 321, 727, 4374, 257, 777, 8351, 3037, 294, 1071, 2309], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 367, "seek": 149732, "start": 1502.48, "end": 1506.12, "text": " months or really a little bit more.", "tokens": [2493, 420, 534, 257, 707, 857, 544, 13], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 368, "seek": 149732, "start": 1506.12, "end": 1507.76, "text": " But we'd have to do a few things for there.", "tokens": [583, 321, 1116, 362, 281, 360, 257, 1326, 721, 337, 456, 13], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 369, "seek": 149732, "start": 1507.76, "end": 1514.2, "text": " Wipit is done mostly with the exception of actually growing and shrinking the heap, implementing", "tokens": [343, 647, 270, 307, 1096, 5240, 365, 264, 11183, 295, 767, 4194, 293, 41684, 264, 33591, 11, 18114], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 370, "seek": 149732, "start": 1514.2, "end": 1522.56, "text": " finalizers, and having an API for checking in with Wipit, checking in with the GC as", "tokens": [2572, 22525, 11, 293, 1419, 364, 9362, 337, 8568, 294, 365, 343, 647, 270, 11, 8568, 294, 365, 264, 29435, 382], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 371, "seek": 149732, "start": 1522.56, "end": 1526.8799999999999, "text": " to when a mutator should stop, because that's one other thing that the BDW Collector does", "tokens": [281, 562, 257, 5839, 1639, 820, 1590, 11, 570, 300, 311, 472, 661, 551, 300, 264, 363, 35, 54, 4586, 20814, 775], "temperature": 0.0, "avg_logprob": -0.1982786111664354, "compression_ratio": 1.650375939849624, "no_speech_prob": 2.3183509256341495e-05}, {"id": 372, "seek": 152688, "start": 1526.88, "end": 1532.3600000000001, "text": " is it uses signals to stop all the threads, whereas Wipit relies on periodic save points.", "tokens": [307, 309, 4960, 12354, 281, 1590, 439, 264, 19314, 11, 9735, 343, 647, 270, 30910, 322, 27790, 3155, 2793, 13], "temperature": 0.0, "avg_logprob": -0.17030264781071588, "compression_ratio": 1.5965665236051503, "no_speech_prob": 1.618606438569259e-05}, {"id": 373, "seek": 152688, "start": 1532.3600000000001, "end": 1534.88, "text": " There are trade-offs.", "tokens": [821, 366, 4923, 12, 19231, 13], "temperature": 0.0, "avg_logprob": -0.17030264781071588, "compression_ratio": 1.5965665236051503, "no_speech_prob": 1.618606438569259e-05}, {"id": 374, "seek": 152688, "start": 1534.88, "end": 1539.44, "text": " In Guile we'd have to switch over to these save points, I think it's possible.", "tokens": [682, 2694, 794, 321, 1116, 362, 281, 3679, 670, 281, 613, 3155, 2793, 11, 286, 519, 309, 311, 1944, 13], "temperature": 0.0, "avg_logprob": -0.17030264781071588, "compression_ratio": 1.5965665236051503, "no_speech_prob": 1.618606438569259e-05}, {"id": 375, "seek": 152688, "start": 1539.44, "end": 1543.6000000000001, "text": " And I think we would start with a heap conservative Wipit, just because it's the same thing that", "tokens": [400, 286, 519, 321, 576, 722, 365, 257, 33591, 13780, 343, 647, 270, 11, 445, 570, 309, 311, 264, 912, 551, 300], "temperature": 0.0, "avg_logprob": -0.17030264781071588, "compression_ratio": 1.5965665236051503, "no_speech_prob": 1.618606438569259e-05}, {"id": 376, "seek": 152688, "start": 1543.6000000000001, "end": 1552.1200000000001, "text": " we do with the BDW Collector, and then we'd move over to a precise scan of the heap.", "tokens": [321, 360, 365, 264, 363, 35, 54, 4586, 20814, 11, 293, 550, 321, 1116, 1286, 670, 281, 257, 13600, 11049, 295, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.17030264781071588, "compression_ratio": 1.5965665236051503, "no_speech_prob": 1.618606438569259e-05}, {"id": 377, "seek": 155212, "start": 1552.12, "end": 1557.7199999999998, "text": " When we get to a precise scan of the heap, we have to implement a few things on the Guile", "tokens": [1133, 321, 483, 281, 257, 13600, 11049, 295, 264, 33591, 11, 321, 362, 281, 4445, 257, 1326, 721, 322, 264, 2694, 794], "temperature": 0.0, "avg_logprob": -0.10533079234036533, "compression_ratio": 1.516431924882629, "no_speech_prob": 6.850685167592019e-06}, {"id": 378, "seek": 155212, "start": 1557.7199999999998, "end": 1558.7199999999998, "text": " side.", "tokens": [1252, 13], "temperature": 0.0, "avg_logprob": -0.10533079234036533, "compression_ratio": 1.516431924882629, "no_speech_prob": 6.850685167592019e-06}, {"id": 379, "seek": 155212, "start": 1558.7199999999998, "end": 1563.1999999999998, "text": " There are some hazards about current uses of the API.", "tokens": [821, 366, 512, 34516, 466, 2190, 4960, 295, 264, 9362, 13], "temperature": 0.0, "avg_logprob": -0.10533079234036533, "compression_ratio": 1.516431924882629, "no_speech_prob": 6.850685167592019e-06}, {"id": 380, "seek": 155212, "start": 1563.1999999999998, "end": 1570.3999999999999, "text": " In particular, if a third-party user ever allocates an object and then stuffs something", "tokens": [682, 1729, 11, 498, 257, 2636, 12, 23409, 4195, 1562, 12660, 1024, 364, 2657, 293, 550, 48719, 746], "temperature": 0.0, "avg_logprob": -0.10533079234036533, "compression_ratio": 1.516431924882629, "no_speech_prob": 6.850685167592019e-06}, {"id": 381, "seek": 155212, "start": 1570.3999999999999, "end": 1575.8799999999999, "text": " in it that Guile doesn't know about, is it an integer or is it a pointer to the heap?", "tokens": [294, 309, 300, 2694, 794, 1177, 380, 458, 466, 11, 307, 309, 364, 24922, 420, 307, 309, 257, 23918, 281, 264, 33591, 30], "temperature": 0.0, "avg_logprob": -0.10533079234036533, "compression_ratio": 1.516431924882629, "no_speech_prob": 6.850685167592019e-06}, {"id": 382, "seek": 157588, "start": 1575.88, "end": 1582.68, "text": " And there are a couple of places that people can do that that are unclear.", "tokens": [400, 456, 366, 257, 1916, 295, 3190, 300, 561, 393, 360, 300, 300, 366, 25636, 13], "temperature": 0.0, "avg_logprob": -0.16886676230081699, "compression_ratio": 1.516431924882629, "no_speech_prob": 9.07928915694356e-06}, {"id": 383, "seek": 157588, "start": 1582.68, "end": 1588.44, "text": " And we can't allow this if we want to trace the heap precisely and move objects.", "tokens": [400, 321, 393, 380, 2089, 341, 498, 321, 528, 281, 13508, 264, 33591, 13402, 293, 1286, 6565, 13], "temperature": 0.0, "avg_logprob": -0.16886676230081699, "compression_ratio": 1.516431924882629, "no_speech_prob": 9.07928915694356e-06}, {"id": 384, "seek": 157588, "start": 1588.44, "end": 1597.0400000000002, "text": " So this might require some small API changes and API breaks, because it's a new series,", "tokens": [407, 341, 1062, 3651, 512, 1359, 9362, 2962, 293, 9362, 9857, 11, 570, 309, 311, 257, 777, 2638, 11], "temperature": 0.0, "avg_logprob": -0.16886676230081699, "compression_ratio": 1.516431924882629, "no_speech_prob": 9.07928915694356e-06}, {"id": 385, "seek": 157588, "start": 1597.0400000000002, "end": 1598.0400000000002, "text": " around this area.", "tokens": [926, 341, 1859, 13], "temperature": 0.0, "avg_logprob": -0.16886676230081699, "compression_ratio": 1.516431924882629, "no_speech_prob": 9.07928915694356e-06}, {"id": 386, "seek": 157588, "start": 1598.0400000000002, "end": 1601.68, "text": " It might be actually time to remove smobs entirely, possibly.", "tokens": [467, 1062, 312, 767, 565, 281, 4159, 899, 16537, 7696, 11, 6264, 13], "temperature": 0.0, "avg_logprob": -0.16886676230081699, "compression_ratio": 1.516431924882629, "no_speech_prob": 9.07928915694356e-06}, {"id": 387, "seek": 160168, "start": 1601.68, "end": 1607.2, "text": " So that's what's actually pushing us to a new major release.", "tokens": [407, 300, 311, 437, 311, 767, 7380, 505, 281, 257, 777, 2563, 4374, 13], "temperature": 0.0, "avg_logprob": -0.1872310439745585, "compression_ratio": 1.4449339207048457, "no_speech_prob": 3.168372859363444e-05}, {"id": 388, "seek": 160168, "start": 1607.2, "end": 1613.96, "text": " So in summary, Wipit is a new GC, it's a replacement for BDW GC.", "tokens": [407, 294, 12691, 11, 343, 647, 270, 307, 257, 777, 29435, 11, 309, 311, 257, 14419, 337, 363, 35, 54, 29435, 13], "temperature": 0.0, "avg_logprob": -0.1872310439745585, "compression_ratio": 1.4449339207048457, "no_speech_prob": 3.168372859363444e-05}, {"id": 389, "seek": 160168, "start": 1613.96, "end": 1620.88, "text": " It has the potential to reach a new local maximum, the better than BDW.", "tokens": [467, 575, 264, 3995, 281, 2524, 257, 777, 2654, 6674, 11, 264, 1101, 813, 363, 35, 54, 13], "temperature": 0.0, "avg_logprob": -0.1872310439745585, "compression_ratio": 1.4449339207048457, "no_speech_prob": 3.168372859363444e-05}, {"id": 390, "seek": 160168, "start": 1620.88, "end": 1622.72, "text": " And I think we can get into Guile 3.2.", "tokens": [400, 286, 519, 321, 393, 483, 666, 2694, 794, 805, 13, 17, 13], "temperature": 0.0, "avg_logprob": -0.1872310439745585, "compression_ratio": 1.4449339207048457, "no_speech_prob": 3.168372859363444e-05}, {"id": 391, "seek": 160168, "start": 1622.72, "end": 1629.3200000000002, "text": " I would like to thank particularly the MMTK people for inspiration and discussions, because", "tokens": [286, 576, 411, 281, 1309, 4098, 264, 34191, 51, 42, 561, 337, 10249, 293, 11088, 11, 570], "temperature": 0.0, "avg_logprob": -0.1872310439745585, "compression_ratio": 1.4449339207048457, "no_speech_prob": 3.168372859363444e-05}, {"id": 392, "seek": 162932, "start": 1629.32, "end": 1633.8, "text": " it's been really helpful to be able to properly learn about garbage collection over the last", "tokens": [309, 311, 668, 534, 4961, 281, 312, 1075, 281, 6108, 1466, 466, 14150, 5765, 670, 264, 1036], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 393, "seek": 162932, "start": 1633.8, "end": 1634.8, "text": " year or so.", "tokens": [1064, 420, 370, 13], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 394, "seek": 162932, "start": 1634.8, "end": 1636.3999999999999, "text": " I'll leave you with one slide.", "tokens": [286, 603, 1856, 291, 365, 472, 4137, 13], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 395, "seek": 162932, "start": 1636.3999999999999, "end": 1641.3999999999999, "text": " When you evaluate a GC, you need to do so with a space-time diagram, because GC is a", "tokens": [1133, 291, 13059, 257, 29435, 11, 291, 643, 281, 360, 370, 365, 257, 1901, 12, 3766, 10686, 11, 570, 29435, 307, 257], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 396, "seek": 162932, "start": 1641.3999999999999, "end": 1643.72, "text": " function, it's a trade-off between space and time.", "tokens": [2445, 11, 309, 311, 257, 4923, 12, 4506, 1296, 1901, 293, 565, 13], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 397, "seek": 162932, "start": 1643.72, "end": 1648.4399999999998, "text": " So on the x-axis, you should have your heap size as a function of what is the minimum", "tokens": [407, 322, 264, 2031, 12, 24633, 11, 291, 820, 362, 428, 33591, 2744, 382, 257, 2445, 295, 437, 307, 264, 7285], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 398, "seek": 162932, "start": 1648.4399999999998, "end": 1649.4399999999998, "text": " heap size.", "tokens": [33591, 2744, 13], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 399, "seek": 162932, "start": 1649.4399999999998, "end": 1656.32, "text": " Here, I measured some algorithms at 1.3x, 1.5x, 1.75x, 2, 2.5, 3, 4, 5, and 6, or just", "tokens": [1692, 11, 286, 12690, 512, 14642, 412, 502, 13, 18, 87, 11, 502, 13, 20, 87, 11, 502, 13, 11901, 87, 11, 568, 11, 568, 13, 20, 11, 805, 11, 1017, 11, 1025, 11, 293, 1386, 11, 420, 445], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 400, "seek": 162932, "start": 1656.32, "end": 1657.32, "text": " a 5.", "tokens": [257, 1025, 13], "temperature": 0.0, "avg_logprob": -0.15507901509602864, "compression_ratio": 1.564625850340136, "no_speech_prob": 2.7529771614354104e-05}, {"id": 401, "seek": 165732, "start": 1657.32, "end": 1661.3999999999999, "text": " I don't know, on the y-axis, you should have whatever you're measuring, be it instructions", "tokens": [286, 500, 380, 458, 11, 322, 264, 288, 12, 24633, 11, 291, 820, 362, 2035, 291, 434, 13389, 11, 312, 309, 9415], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 402, "seek": 165732, "start": 1661.3999999999999, "end": 1667.4399999999998, "text": " retired or wall clock time or memory or something like that, because the heap size is one of", "tokens": [16776, 420, 2929, 7830, 565, 420, 4675, 420, 746, 411, 300, 11, 570, 264, 33591, 2744, 307, 472, 295], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 403, "seek": 165732, "start": 1667.4399999999998, "end": 1672.28, "text": " the, and the response to heap size is one of the fundamental trade-offs in GC.", "tokens": [264, 11, 293, 264, 4134, 281, 33591, 2744, 307, 472, 295, 264, 8088, 4923, 12, 19231, 294, 29435, 13], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 404, "seek": 165732, "start": 1672.28, "end": 1677.3999999999999, "text": " Here we show that actually, we show the BDW collector, a semi-space collector, which is", "tokens": [1692, 321, 855, 300, 767, 11, 321, 855, 264, 363, 35, 54, 23960, 11, 257, 12909, 12, 24824, 23960, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 405, "seek": 165732, "start": 1677.3999999999999, "end": 1685.48, "text": " also implemented behind the Wipit API, and the Wipit algorithm, serial, one marker, one", "tokens": [611, 12270, 2261, 264, 343, 647, 270, 9362, 11, 293, 264, 343, 647, 270, 9284, 11, 17436, 11, 472, 15247, 11, 472], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 406, "seek": 165732, "start": 1685.48, "end": 1687.2, "text": " mutator on this benchmark.", "tokens": [5839, 1639, 322, 341, 18927, 13], "temperature": 0.0, "avg_logprob": -0.17137178297965758, "compression_ratio": 1.648936170212766, "no_speech_prob": 1.7228914657607675e-05}, {"id": 407, "seek": 168720, "start": 1687.2, "end": 1690.52, "text": " We see performance as we change heap size.", "tokens": [492, 536, 3389, 382, 321, 1319, 33591, 2744, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 408, "seek": 168720, "start": 1690.52, "end": 1693.96, "text": " Wipit is the only one that gets to 1.3x.", "tokens": [343, 647, 270, 307, 264, 787, 472, 300, 2170, 281, 502, 13, 18, 87, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 409, "seek": 168720, "start": 1693.96, "end": 1697.96, "text": " This is an analytical calculation of how big the heap should be.", "tokens": [639, 307, 364, 29579, 17108, 295, 577, 955, 264, 33591, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 410, "seek": 168720, "start": 1697.96, "end": 1701.96, "text": " It's not measured as to how small I can get anything to run, but it's like what I think", "tokens": [467, 311, 406, 12690, 382, 281, 577, 1359, 286, 393, 483, 1340, 281, 1190, 11, 457, 309, 311, 411, 437, 286, 519], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 411, "seek": 168720, "start": 1701.96, "end": 1704.4, "text": " the heap should take.", "tokens": [264, 33591, 820, 747, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 412, "seek": 168720, "start": 1704.4, "end": 1710.64, "text": " So it might not precisely be 1.3, it might be one, you know, it's a number in that range.", "tokens": [407, 309, 1062, 406, 13402, 312, 502, 13, 18, 11, 309, 1062, 312, 472, 11, 291, 458, 11, 309, 311, 257, 1230, 294, 300, 3613, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 413, "seek": 168720, "start": 1710.64, "end": 1711.64, "text": " It can get to the smallest.", "tokens": [467, 393, 483, 281, 264, 16998, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 414, "seek": 168720, "start": 1711.64, "end": 1713.44, "text": " It takes a bit of effort to do so.", "tokens": [467, 2516, 257, 857, 295, 4630, 281, 360, 370, 13], "temperature": 0.0, "avg_logprob": -0.1523426513671875, "compression_ratio": 1.630952380952381, "no_speech_prob": 2.2123860617284663e-05}, {"id": 415, "seek": 171344, "start": 1713.44, "end": 1718.52, "text": " As you become more parsimonious with your heap, you end up tracing it more.", "tokens": [1018, 291, 1813, 544, 21156, 25098, 851, 365, 428, 33591, 11, 291, 917, 493, 25262, 309, 544, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 416, "seek": 171344, "start": 1718.52, "end": 1722.1200000000001, "text": " So the curve goes up on that side, but it's the only one that actually gets to that x-axis", "tokens": [407, 264, 7605, 1709, 493, 322, 300, 1252, 11, 457, 309, 311, 264, 787, 472, 300, 767, 2170, 281, 300, 2031, 12, 24633], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 417, "seek": 171344, "start": 1722.1200000000001, "end": 1724.3600000000001, "text": " point of view.", "tokens": [935, 295, 1910, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 418, "seek": 171344, "start": 1724.3600000000001, "end": 1729.92, "text": " And then it quickly passes, and you want these numbers to be low.", "tokens": [400, 550, 309, 2661, 11335, 11, 293, 291, 528, 613, 3547, 281, 312, 2295, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 419, "seek": 171344, "start": 1729.92, "end": 1730.92, "text": " That's what you want.", "tokens": [663, 311, 437, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 420, "seek": 171344, "start": 1730.92, "end": 1737.8400000000001, "text": " It quickly passes BDW GC, it's only one point where it takes more time than BDW GC, and", "tokens": [467, 2661, 11335, 363, 35, 54, 29435, 11, 309, 311, 787, 472, 935, 689, 309, 2516, 544, 565, 813, 363, 35, 54, 29435, 11, 293], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 421, "seek": 171344, "start": 1737.8400000000001, "end": 1738.8400000000001, "text": " that's concerning.", "tokens": [300, 311, 18087, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 422, "seek": 171344, "start": 1738.8400000000001, "end": 1739.8400000000001, "text": " I need to fix that one.", "tokens": [286, 643, 281, 3191, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 423, "seek": 171344, "start": 1739.8400000000001, "end": 1740.8400000000001, "text": " Let me see the green line.", "tokens": [961, 385, 536, 264, 3092, 1622, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 424, "seek": 171344, "start": 1740.8400000000001, "end": 1742.16, "text": " This is a semi-space collector.", "tokens": [639, 307, 257, 12909, 12, 24824, 23960, 13], "temperature": 0.0, "avg_logprob": -0.15176033459121374, "compression_ratio": 1.6510791366906474, "no_speech_prob": 8.397460078413133e-06}, {"id": 425, "seek": 174216, "start": 1742.16, "end": 1747.0800000000002, "text": " Semi-space, as you add memory, it gets easier and easier and easier, right, because it depends", "tokens": [318, 13372, 12, 24824, 11, 382, 291, 909, 4675, 11, 309, 2170, 3571, 293, 3571, 293, 3571, 11, 558, 11, 570, 309, 5946], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 426, "seek": 174216, "start": 1747.0800000000002, "end": 1749.44, "text": " only on the size of the live data.", "tokens": [787, 322, 264, 2744, 295, 264, 1621, 1412, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 427, "seek": 174216, "start": 1749.44, "end": 1753.24, "text": " Whereas WIPPET and BDW need to sweep the heap.", "tokens": [13813, 343, 9139, 47, 4850, 293, 363, 35, 54, 643, 281, 22169, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 428, "seek": 174216, "start": 1753.24, "end": 1756.8000000000002, "text": " So as you add memory, it sort of plateaus.", "tokens": [407, 382, 291, 909, 4675, 11, 309, 1333, 295, 5924, 8463, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 429, "seek": 174216, "start": 1756.8000000000002, "end": 1758.3200000000002, "text": " It doesn't keep on going down.", "tokens": [467, 1177, 380, 1066, 322, 516, 760, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 430, "seek": 174216, "start": 1758.3200000000002, "end": 1759.64, "text": " I don't know why it goes up at the end.", "tokens": [286, 500, 380, 458, 983, 309, 1709, 493, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 431, "seek": 174216, "start": 1759.64, "end": 1761.6000000000001, "text": " This is my other little touch of the hand.", "tokens": [639, 307, 452, 661, 707, 2557, 295, 264, 1011, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 432, "seek": 174216, "start": 1761.6000000000001, "end": 1762.6000000000001, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 433, "seek": 174216, "start": 1762.6000000000001, "end": 1765.4, "text": " That looks like a bug to me.", "tokens": [663, 1542, 411, 257, 7426, 281, 385, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 434, "seek": 174216, "start": 1765.4, "end": 1767.16, "text": " So that's something I fixed.", "tokens": [407, 300, 311, 746, 286, 6806, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 435, "seek": 174216, "start": 1767.16, "end": 1768.88, "text": " Anyway, there's WIPPET.", "tokens": [5684, 11, 456, 311, 343, 9139, 47, 4850, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 436, "seek": 174216, "start": 1768.88, "end": 1771.52, "text": " Thank you for enduring this blathering.", "tokens": [1044, 291, 337, 36562, 341, 888, 1172, 278, 13], "temperature": 0.0, "avg_logprob": -0.19741106968300015, "compression_ratio": 1.6870503597122302, "no_speech_prob": 4.7559897211613134e-05}, {"id": 437, "seek": 177152, "start": 1771.52, "end": 1776.4, "text": " And good luck, everybody, in about 18 months when this starts rolling out to geeks.", "tokens": [400, 665, 3668, 11, 2201, 11, 294, 466, 2443, 2493, 562, 341, 3719, 9439, 484, 281, 1519, 24785, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 438, "seek": 177152, "start": 1776.4, "end": 1778.96, "text": " Just joking, because I won't be around.", "tokens": [1449, 17396, 11, 570, 286, 1582, 380, 312, 926, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 439, "seek": 177152, "start": 1778.96, "end": 1779.96, "text": " Good.", "tokens": [2205, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 440, "seek": 177152, "start": 1779.96, "end": 1786.96, "text": " So I'll take any questions.", "tokens": [407, 286, 603, 747, 604, 1651, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 441, "seek": 177152, "start": 1786.96, "end": 1791.52, "text": " Even dumb questions.", "tokens": [2754, 10316, 1651, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 442, "seek": 177152, "start": 1791.52, "end": 1792.52, "text": " That's okay.", "tokens": [663, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 443, "seek": 177152, "start": 1792.52, "end": 1793.52, "text": " Yes, sir?", "tokens": [1079, 11, 4735, 30], "temperature": 0.0, "avg_logprob": -0.4127630753950639, "compression_ratio": 1.2802547770700636, "no_speech_prob": 6.394733645720407e-05}, {"id": 444, "seek": 179352, "start": 1793.52, "end": 1801.84, "text": " It seems to me like conservative stack scanning is incompatible with address sanitizer from", "tokens": [467, 2544, 281, 385, 411, 13780, 8630, 27019, 307, 40393, 267, 964, 365, 2985, 47080, 490], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 445, "seek": 179352, "start": 1801.84, "end": 1802.84, "text": " LVM or GCC.", "tokens": [441, 53, 44, 420, 460, 11717, 13], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 446, "seek": 179352, "start": 1802.84, "end": 1809.96, "text": " So how do you debug address bugs in the GCC?", "tokens": [407, 577, 360, 291, 24083, 2985, 15120, 294, 264, 460, 11717, 30], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 447, "seek": 179352, "start": 1809.96, "end": 1815.24, "text": " So the question is, conservative stack scanning seems to be incompatible with address sanitizer", "tokens": [407, 264, 1168, 307, 11, 13780, 8630, 27019, 2544, 281, 312, 40393, 267, 964, 365, 2985, 47080], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 448, "seek": 179352, "start": 1815.24, "end": 1816.24, "text": " from LVM GCC.", "tokens": [490, 441, 53, 44, 460, 11717, 13], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 449, "seek": 179352, "start": 1816.24, "end": 1823.28, "text": " I'm a professional C++ developer, and I work on web browsers.", "tokens": [286, 478, 257, 4843, 383, 25472, 10754, 11, 293, 286, 589, 322, 3670, 36069, 13], "temperature": 0.0, "avg_logprob": -0.2524903254075484, "compression_ratio": 1.7297297297297298, "no_speech_prob": 6.106773798819631e-05}, {"id": 450, "seek": 182328, "start": 1823.28, "end": 1826.16, "text": " I don't know what address sanitizer does.", "tokens": [286, 500, 380, 458, 437, 2985, 47080, 775, 13], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 451, "seek": 182328, "start": 1826.16, "end": 1829.72, "text": " I know it gives me bugs sometimes and tells me things I have to fix, but I don't know", "tokens": [286, 458, 309, 2709, 385, 15120, 2171, 293, 5112, 385, 721, 286, 362, 281, 3191, 11, 457, 286, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 452, "seek": 182328, "start": 1829.72, "end": 1830.72, "text": " what's going on there.", "tokens": [437, 311, 516, 322, 456, 13], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 453, "seek": 182328, "start": 1830.72, "end": 1831.72, "text": " I should know.", "tokens": [286, 820, 458, 13], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 454, "seek": 182328, "start": 1831.72, "end": 1833.72, "text": " Can you tell us, why is it incompatible?", "tokens": [1664, 291, 980, 505, 11, 983, 307, 309, 40393, 267, 964, 30], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 455, "seek": 182328, "start": 1833.72, "end": 1840.72, "text": " Basically, every time you access something that wasn't registered properly via malloc,", "tokens": [8537, 11, 633, 565, 291, 2105, 746, 300, 2067, 380, 13968, 6108, 5766, 16026, 905, 11], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 456, "seek": 182328, "start": 1840.72, "end": 1846.28, "text": " for example, or aloca, it tells you you're in the red zone or you're in something that", "tokens": [337, 1365, 11, 420, 419, 78, 496, 11, 309, 5112, 291, 291, 434, 294, 264, 2182, 6668, 420, 291, 434, 294, 746, 300], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 457, "seek": 182328, "start": 1846.28, "end": 1847.28, "text": " doesn't work.", "tokens": [1177, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.27871542061324667, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.00010381072206655517}, {"id": 458, "seek": 184728, "start": 1847.28, "end": 1854.36, "text": " So to scan your wall stack, only part of it is actually valid.", "tokens": [407, 281, 11049, 428, 2929, 8630, 11, 787, 644, 295, 309, 307, 767, 7363, 13], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 459, "seek": 184728, "start": 1854.36, "end": 1863.36, "text": " So the answer is that it only signals warnings if you ever access a value after it's been", "tokens": [407, 264, 1867, 307, 300, 309, 787, 12354, 30009, 498, 291, 1562, 2105, 257, 2158, 934, 309, 311, 668], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 460, "seek": 184728, "start": 1863.36, "end": 1864.36, "text": " freed.", "tokens": [21796, 13], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 461, "seek": 184728, "start": 1864.36, "end": 1865.36, "text": " Is that right?", "tokens": [1119, 300, 558, 30], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 462, "seek": 184728, "start": 1865.36, "end": 1869.92, "text": " For example, you are in a function and you access something that wasn't.", "tokens": [1171, 1365, 11, 291, 366, 294, 257, 2445, 293, 291, 2105, 746, 300, 2067, 380, 13], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 463, "seek": 184728, "start": 1869.92, "end": 1874.32, "text": " I think it's actually not a problem because we don't trigger the malloc-free detection", "tokens": [286, 519, 309, 311, 767, 406, 257, 1154, 570, 321, 500, 380, 7875, 264, 16026, 905, 12, 10792, 17784], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 464, "seek": 184728, "start": 1874.32, "end": 1875.32, "text": " at all.", "tokens": [412, 439, 13], "temperature": 0.0, "avg_logprob": -0.2336084893409242, "compression_ratio": 1.576036866359447, "no_speech_prob": 5.3899373597232625e-05}, {"id": 465, "seek": 187532, "start": 1875.32, "end": 1880.52, "text": " What makes a complete third-party allocator is if you M-map the page and we're just reading", "tokens": [708, 1669, 257, 3566, 2636, 12, 23409, 12660, 1639, 307, 498, 291, 376, 12, 24223, 264, 3028, 293, 321, 434, 445, 3760], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 466, "seek": 187532, "start": 1880.52, "end": 1885.1599999999999, "text": " values from that page, and so it doesn't trigger the particular logic there, which", "tokens": [4190, 490, 300, 3028, 11, 293, 370, 309, 1177, 380, 7875, 264, 1729, 9952, 456, 11, 597], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 467, "seek": 187532, "start": 1885.1599999999999, "end": 1888.32, "text": " also means you have no tool support.", "tokens": [611, 1355, 291, 362, 572, 2290, 1406, 13], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 468, "seek": 187532, "start": 1888.32, "end": 1894.76, "text": " You're as wild west with the bugs that go with it, so yeah, I guess that's the answer", "tokens": [509, 434, 382, 4868, 7009, 365, 264, 15120, 300, 352, 365, 309, 11, 370, 1338, 11, 286, 2041, 300, 311, 264, 1867], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 469, "seek": 187532, "start": 1894.76, "end": 1895.76, "text": " there.", "tokens": [456, 13], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 470, "seek": 187532, "start": 1895.76, "end": 1896.76, "text": " Yes, so the question.", "tokens": [1079, 11, 370, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 471, "seek": 187532, "start": 1896.76, "end": 1897.76, "text": " How will this affect Geeks users?", "tokens": [1012, 486, 341, 3345, 2876, 24785, 5022, 30], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 472, "seek": 187532, "start": 1897.76, "end": 1905.28, "text": " Well, this will affect Geeks users in the sense that, one, I hope that when you read", "tokens": [1042, 11, 341, 486, 3345, 2876, 24785, 5022, 294, 264, 2020, 300, 11, 472, 11, 286, 1454, 300, 562, 291, 1401], "temperature": 0.0, "avg_logprob": -0.26960548277824153, "compression_ratio": 1.6729323308270676, "no_speech_prob": 4.132034882786684e-05}, {"id": 473, "seek": 190528, "start": 1905.28, "end": 1911.04, "text": " build the system, Geeks launches multiple threads to compile things.", "tokens": [1322, 264, 1185, 11, 2876, 24785, 31841, 3866, 19314, 281, 31413, 721, 13], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 474, "seek": 190528, "start": 1911.04, "end": 1914.0, "text": " And as we see, there is contention in BDWGC.", "tokens": [400, 382, 321, 536, 11, 456, 307, 660, 1251, 294, 363, 35, 54, 38, 34, 13], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 475, "seek": 190528, "start": 1914.0, "end": 1917.28, "text": " It doesn't actually scale very well as you add threads if you have an allocation-heavy", "tokens": [467, 1177, 380, 767, 4373, 588, 731, 382, 291, 909, 19314, 498, 291, 362, 364, 27599, 12, 37157], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 476, "seek": 190528, "start": 1917.28, "end": 1918.28, "text": " workload.", "tokens": [20139, 13], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 477, "seek": 190528, "start": 1918.28, "end": 1924.28, "text": " And so I think that when Guile incorporates WIPIT, Geeks with multiple threads should scale", "tokens": [400, 370, 286, 519, 300, 562, 2694, 794, 50193, 343, 9139, 3927, 11, 2876, 24785, 365, 3866, 19314, 820, 4373], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 478, "seek": 190528, "start": 1924.28, "end": 1925.28, "text": " better.", "tokens": [1101, 13], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 479, "seek": 190528, "start": 1925.28, "end": 1932.3999999999999, "text": " In addition, we will be able to have better tooling for how understanding the heap and", "tokens": [682, 4500, 11, 321, 486, 312, 1075, 281, 362, 1101, 46593, 337, 577, 3701, 264, 33591, 293], "temperature": 0.0, "avg_logprob": -0.21228553698613092, "compression_ratio": 1.5753968253968254, "no_speech_prob": 2.9766964871669188e-05}, {"id": 480, "seek": 193240, "start": 1932.4, "end": 1939.4, "text": " heap usage, and ideally, be able to place ourselves better on the kind of space-time", "tokens": [33591, 14924, 11, 293, 22915, 11, 312, 1075, 281, 1081, 4175, 1101, 322, 264, 733, 295, 1901, 12, 3766], "temperature": 0.0, "avg_logprob": -0.21857500679885286, "compression_ratio": 1.495, "no_speech_prob": 3.16877594741527e-05}, {"id": 481, "seek": 193240, "start": 1939.4, "end": 1945.3600000000001, "text": " trade-off if you need more throughput, give it a bigger heap, also let it shrink.", "tokens": [4923, 12, 4506, 498, 291, 643, 544, 44629, 11, 976, 309, 257, 3801, 33591, 11, 611, 718, 309, 23060, 13], "temperature": 0.0, "avg_logprob": -0.21857500679885286, "compression_ratio": 1.495, "no_speech_prob": 3.16877594741527e-05}, {"id": 482, "seek": 193240, "start": 1945.3600000000001, "end": 1949.0400000000002, "text": " And that can affect also longer-running demons like the shepherd and things like that.", "tokens": [400, 300, 393, 3345, 611, 2854, 12, 45482, 19733, 411, 264, 40317, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.21857500679885286, "compression_ratio": 1.495, "no_speech_prob": 3.16877594741527e-05}, {"id": 483, "seek": 193240, "start": 1949.0400000000002, "end": 1951.88, "text": " So it should yield a more robust system.", "tokens": [407, 309, 820, 11257, 257, 544, 13956, 1185, 13], "temperature": 0.0, "avg_logprob": -0.21857500679885286, "compression_ratio": 1.495, "no_speech_prob": 3.16877594741527e-05}, {"id": 484, "seek": 193240, "start": 1951.88, "end": 1952.88, "text": " Yes?", "tokens": [1079, 30], "temperature": 0.0, "avg_logprob": -0.21857500679885286, "compression_ratio": 1.495, "no_speech_prob": 3.16877594741527e-05}, {"id": 485, "seek": 195288, "start": 1952.88, "end": 1962.88, "text": " There are some architectures which can be used in 64-bit page.", "tokens": [821, 366, 512, 6331, 1303, 597, 393, 312, 1143, 294, 12145, 12, 5260, 3028, 13], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 486, "seek": 195288, "start": 1962.88, "end": 1965.0400000000002, "text": " Would that be a problem with using 16K blocks?", "tokens": [6068, 300, 312, 257, 1154, 365, 1228, 3165, 42, 8474, 30], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 487, "seek": 195288, "start": 1965.0400000000002, "end": 1968.44, "text": " They're actually 64 kilobyte blocks.", "tokens": [814, 434, 767, 12145, 5128, 13944, 975, 8474, 13], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 488, "seek": 195288, "start": 1968.44, "end": 1974.6000000000001, "text": " So I think I chose the least common multiple or whatever.", "tokens": [407, 286, 519, 286, 5111, 264, 1935, 2689, 3866, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 489, "seek": 195288, "start": 1974.6000000000001, "end": 1979.0800000000002, "text": " It's configurable, but I think the default size is such that they are large enough for", "tokens": [467, 311, 22192, 712, 11, 457, 286, 519, 264, 7576, 2744, 307, 1270, 300, 436, 366, 2416, 1547, 337], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 490, "seek": 195288, "start": 1979.0800000000002, "end": 1981.3200000000002, "text": " any common architecture.", "tokens": [604, 2689, 9482, 13], "temperature": 0.0, "avg_logprob": -0.23863424573625838, "compression_ratio": 1.456221198156682, "no_speech_prob": 1.0449945875734556e-05}, {"id": 491, "seek": 198132, "start": 1981.32, "end": 1987.32, "text": " The question was about page size, is 16 kilobytes big enough for blocks, but it's actually", "tokens": [440, 1168, 390, 466, 3028, 2744, 11, 307, 3165, 5128, 996, 43673, 955, 1547, 337, 8474, 11, 457, 309, 311, 767], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 492, "seek": 198132, "start": 1987.32, "end": 1988.32, "text": " 64 kilobytes.", "tokens": [12145, 5128, 996, 43673, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 493, "seek": 198132, "start": 1988.32, "end": 1989.32, "text": " Yes?", "tokens": [1079, 30], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 494, "seek": 198132, "start": 1989.32, "end": 1995.32, "text": " With the collection, would it ever have to stop all threads simultaneously, or do the", "tokens": [2022, 264, 5765, 11, 576, 309, 1562, 362, 281, 1590, 439, 19314, 16561, 11, 420, 360, 264], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 495, "seek": 198132, "start": 1995.32, "end": 1996.32, "text": " threads stop at a different location?", "tokens": [19314, 1590, 412, 257, 819, 4914, 30], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 496, "seek": 198132, "start": 1996.32, "end": 1997.32, "text": " Basically, are there stops in the world?", "tokens": [8537, 11, 366, 456, 10094, 294, 264, 1002, 30], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 497, "seek": 198132, "start": 1997.32, "end": 1998.32, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 498, "seek": 198132, "start": 1998.32, "end": 1999.32, "text": " Yeah, that's a very good question.", "tokens": [865, 11, 300, 311, 257, 588, 665, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 499, "seek": 198132, "start": 1999.32, "end": 2000.32, "text": " I didn't mention this.", "tokens": [286, 994, 380, 2152, 341, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 500, "seek": 198132, "start": 2000.32, "end": 2002.52, "text": " So this is a stop-the-world collector.", "tokens": [407, 341, 307, 257, 1590, 12, 3322, 12, 13217, 23960, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 501, "seek": 198132, "start": 2002.52, "end": 2008.84, "text": " It's not a concurrent collector with the exception of threads mark their own stacks while other", "tokens": [467, 311, 406, 257, 37702, 23960, 365, 264, 11183, 295, 19314, 1491, 641, 1065, 30792, 1339, 661], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 502, "seek": 198132, "start": 2008.84, "end": 2009.84, "text": " threads are running.", "tokens": [19314, 366, 2614, 13], "temperature": 0.0, "avg_logprob": -0.2603906182681813, "compression_ratio": 1.6917808219178083, "no_speech_prob": 3.6685585200757487e-06}, {"id": 503, "seek": 200984, "start": 2009.84, "end": 2012.3999999999999, "text": " There's a little bit of concurrency there.", "tokens": [821, 311, 257, 707, 857, 295, 23702, 10457, 456, 13], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 504, "seek": 200984, "start": 2012.3999999999999, "end": 2019.52, "text": " We may add concurrent marking at some point, but you need write barriers for that to work.", "tokens": [492, 815, 909, 37702, 25482, 412, 512, 935, 11, 457, 291, 643, 2464, 13565, 337, 300, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 505, "seek": 200984, "start": 2019.52, "end": 2023.52, "text": " And so that would be something to add once generational collection is working, because", "tokens": [400, 370, 300, 576, 312, 746, 281, 909, 1564, 48320, 5765, 307, 1364, 11, 570], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 506, "seek": 200984, "start": 2023.52, "end": 2026.9199999999998, "text": " you've proven that you have all the write barriers in the right place.", "tokens": [291, 600, 12785, 300, 291, 362, 439, 264, 2464, 13565, 294, 264, 558, 1081, 13], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 507, "seek": 200984, "start": 2026.9199999999998, "end": 2033.1599999999999, "text": " Then write barriers is just like a little piece of code that runs whenever you store", "tokens": [1396, 2464, 13565, 307, 445, 411, 257, 707, 2522, 295, 3089, 300, 6676, 5699, 291, 3531], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 508, "seek": 200984, "start": 2033.1599999999999, "end": 2034.3999999999999, "text": " a pointer.", "tokens": [257, 23918, 13], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 509, "seek": 200984, "start": 2034.3999999999999, "end": 2039.8, "text": " And if write barriers can be used to indicate pointers from old objects to new objects,", "tokens": [400, 498, 2464, 13565, 393, 312, 1143, 281, 13330, 44548, 490, 1331, 6565, 281, 777, 6565, 11], "temperature": 0.0, "avg_logprob": -0.13147318900168478, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.6267027351423167e-05}, {"id": 510, "seek": 203980, "start": 2039.8, "end": 2045.32, "text": " helping you do generational collection, they can also be used to mark an object as being", "tokens": [4315, 291, 360, 48320, 5765, 11, 436, 393, 611, 312, 1143, 281, 1491, 364, 2657, 382, 885], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 511, "seek": 203980, "start": 2045.32, "end": 2051.24, "text": " allocated after the concurrent marker has already marked it in that cycle.", "tokens": [29772, 934, 264, 37702, 15247, 575, 1217, 12658, 309, 294, 300, 6586, 13], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 512, "seek": 203980, "start": 2051.24, "end": 2053.04, "text": " I'm not explaining myself very well.", "tokens": [286, 478, 406, 13468, 2059, 588, 731, 13], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 513, "seek": 203980, "start": 2053.04, "end": 2059.44, "text": " But basically, you need write barriers to be able to have, to be able to minimize the", "tokens": [583, 1936, 11, 291, 643, 2464, 13565, 281, 312, 1075, 281, 362, 11, 281, 312, 1075, 281, 17522, 264], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 514, "seek": 203980, "start": 2059.44, "end": 2063.64, "text": " stop-the-world component of the mark phase.", "tokens": [1590, 12, 3322, 12, 13217, 6542, 295, 264, 1491, 5574, 13], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 515, "seek": 203980, "start": 2063.64, "end": 2066.64, "text": " Does that answer the question?", "tokens": [4402, 300, 1867, 264, 1168, 30], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 516, "seek": 203980, "start": 2066.64, "end": 2067.64, "text": " Yes?", "tokens": [1079, 30], "temperature": 0.0, "avg_logprob": -0.21893322986105215, "compression_ratio": 1.5574468085106383, "no_speech_prob": 3.021869997610338e-05}, {"id": 517, "seek": 206764, "start": 2067.64, "end": 2073.08, "text": " Is this simply guy or complicate the guy with the web assembly?", "tokens": [1119, 341, 2935, 2146, 420, 1209, 8700, 264, 2146, 365, 264, 3670, 12103, 30], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 518, "seek": 206764, "start": 2073.08, "end": 2074.08, "text": " Oh, yeah.", "tokens": [876, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 519, "seek": 206764, "start": 2074.08, "end": 2075.08, "text": " It's a good question.", "tokens": [467, 311, 257, 665, 1168, 13], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 520, "seek": 206764, "start": 2075.08, "end": 2078.12, "text": " So there's a project to compile a guy's web assembly.", "tokens": [407, 456, 311, 257, 1716, 281, 31413, 257, 2146, 311, 3670, 12103, 13], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 521, "seek": 206764, "start": 2078.12, "end": 2084.64, "text": " I think initially this will probably start by having a guy library produce web assembly", "tokens": [286, 519, 9105, 341, 486, 1391, 722, 538, 1419, 257, 2146, 6405, 5258, 3670, 12103], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 522, "seek": 206764, "start": 2084.64, "end": 2087.16, "text": " that has its own runtime.", "tokens": [300, 575, 1080, 1065, 34474, 13], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 523, "seek": 206764, "start": 2087.16, "end": 2093.24, "text": " And this could grow to a whole program standalone compiler in which a guy has a library that", "tokens": [400, 341, 727, 1852, 281, 257, 1379, 1461, 37454, 31958, 294, 597, 257, 2146, 575, 257, 6405, 300], "temperature": 0.0, "avg_logprob": -0.28475715803063434, "compression_ratio": 1.640552995391705, "no_speech_prob": 5.82504908379633e-05}, {"id": 524, "seek": 209324, "start": 2093.24, "end": 2098.0, "text": " takes your guile program and spits out a native binary.", "tokens": [2516, 428, 695, 794, 1461, 293, 637, 1208, 484, 257, 8470, 17434, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 525, "seek": 209324, "start": 2098.0, "end": 2101.9599999999996, "text": " And in that case, that native binary would include WIPPET, embedded in it, instead of", "tokens": [400, 294, 300, 1389, 11, 300, 8470, 17434, 576, 4090, 343, 9139, 47, 4850, 11, 16741, 294, 309, 11, 2602, 295], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 526, "seek": 209324, "start": 2101.9599999999996, "end": 2106.8799999999997, "text": " having that native binary then link to the BDW collector.", "tokens": [1419, 300, 8470, 17434, 550, 2113, 281, 264, 363, 35, 54, 23960, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 527, "seek": 209324, "start": 2106.8799999999997, "end": 2108.8799999999997, "text": " So the goal would be to produce one binary that's all finished.", "tokens": [407, 264, 3387, 576, 312, 281, 5258, 472, 17434, 300, 311, 439, 4335, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 528, "seek": 209324, "start": 2108.8799999999997, "end": 2109.8799999999997, "text": " Is that it?", "tokens": [1119, 300, 309, 30], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 529, "seek": 209324, "start": 2109.8799999999997, "end": 2110.8799999999997, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 530, "seek": 209324, "start": 2110.8799999999997, "end": 2111.8799999999997, "text": " Thank you very much.", "tokens": [1044, 291, 588, 709, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 531, "seek": 209324, "start": 2111.8799999999997, "end": 2112.8799999999997, "text": " Thank you very much.", "tokens": [1044, 291, 588, 709, 13], "temperature": 0.0, "avg_logprob": -0.20735996961593628, "compression_ratio": 1.6649746192893402, "no_speech_prob": 3.3701828215271235e-05}, {"id": 532, "seek": 211288, "start": 2112.88, "end": 2139.4, "text": " Thank you very much.", "tokens": [50364, 1044, 291, 588, 709, 13, 51690], "temperature": 1.0, "avg_logprob": -1.2921862602233887, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.000932094466406852}], "language": "en"}