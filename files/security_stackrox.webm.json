{"text": " from RUTWIC about demystifying, demystifying Stackrocks. Welcome RUTWIC. Thank you. Good evening everyone. Thanks for showing back for the late evening talk. I appreciate your time. So my name is RUTWIC Shiv Sagar. I work at that as a senior technical support engineer. I mainly work on solving open shift as well as Stackrocks issues with the customer and with engineering teams. So with the recent time and security threats or attacks, we have seen that container and Kubernetes adoption has equally increased. With that, security has become a biggest concern, right? So we'll see how Stackrocks is paving the way for Kubernetes native security and helping us to achieve or resolve the security issues with ease and automation. So this is the brief agenda for today's talk. So in the first few slides, we'll discuss current state of Kubernetes security, what are the best practices and how DevSecOps approach benefits into the security posture, you know, to shift the security for your developers as well as your security admins. And then we will see how Stackrocks ecosystem is helping end users, developers, as well as your security teams to overcome the security issues with ease. And then we will have some demo at then. Yeah. So first of all, let's understand what is zero-dose security, why we require zero-dose security, right? So zero-dose security is basically a framework which requires all the users to be authenticated and authorized continuously before they've been granted an access to your application and data. So if you manage to achieve zero-dose security model, then I would say that we could resolve or minimize the impact at the very early stage of your application lifecycle. Then how exactly zero-dose security fits into the software supply chain. So what exactly is software supply chain? It includes everything, everyone and everything that touches your application code into entire software development lifecycle, right? It could be your deployment, it could be your final artifact, it could be a CI CD pipeline. So it's essential that we build the application in such a way that the assurance at every stage of application is being taken seriously. That way we could achieve the trust rates of software supply chain. So yeah, we can see that security dependencies, securing code, securing containers as well as the infrastructure are all part of the software supply chain. Let me ask you this question. If you're using Kubernetes or in general any applications, have you ever delayed or slowed down the application deployment into production due to container security concerns? Anyone of you? All right, I assume so because that's how we go through application lifecycle. We deploy the application, then we analyze the application, behavior and we detect the vulnerabilities. So in the recent trend, we have seen some common factors or common anti-patterns which were causing delays for an application to get deployed on the production. So misconfiguration has topped the percentage where following to that we have vulnerabilities to remediate, right? So for example, we kind of able to detect the vulnerabilities but somehow we tend to overlook them or we could not assist them accurately. That leads to the vulnerability. I mean, we get to know that okay, vulnerability exists but there are no proper ways or tooling to fix that kind of vulnerability. Then we ultimately have security issues at the runtime, you know, which could be costly or it could affect your entire production. So how can we make sure that these kind of issues are reduced? Let's say, so in today's world, we need DevSecOps approach, DevOps, just DevOps isn't enough, right? We need DevSecOps to shift the security from our traditional security practices. So DevSecOps helps us define microservices architecture. It provides us declared definition to, you know, harden your security parameters, network policies and deployment conflicts. It also makes sure that the infrastructure stays immutable. So at the runtime, nobody else is allowed to, you know, touch the software or your application deployment. At the same time, it is important that we know Kubernetes native security is increasingly critical and securing supply chain is also equally essential. So what are the basic Kubernetes security scan challenges? So we know that containers are numerous and everywhere. If I have to put analogy, like we say that everything is a file in Linux in a similar way, everything runs in a container when we talk about Kubernetes, right? So they may tend to pose compliance challenges. Every container image is tied up with some of the other container registers, right? So sometimes we even forget to add TLS with best authentication to our image registry that may, you know, expose security threats over the internet if at all we expose that. And we are also aware that containers by default talk to each other without any network policies. So it is important that we define network policies at early stages. And this one, I think most of you can relate that when we show Kubernetes, all of the configurations looks pretty easy, but defaults are usually the less secure, right? So we as an admin or developer have to proactively understand what configuration or what risk tolerance required for my organization or developer environment. So in Kubernetes, application lifecycle span across three phases mainly, that is build phase, deployment phase, and runtime phase. So how we can make sure that we secure each and every stage of the application, right? So when we talk about build phase, it's important that we isolate the vulnerability of security issue at the earliest. Otherwise, it would be very costly and risky to detect the vulnerabilities at the runtime, right? So what we can do, we can use minimal base images so that we can avoid unnecessary package managers or, you know, any executable programs into your container images. Then we can always use image scanner to identify known vulnerabilities. I think identifying vulnerabilities just once is not enough. You need to make sure that whatever security integration scanner you're using that will continuously validate your container images and send the real-time alerts to your development team as well as security admins. Then yes, at the build phase, we need to integrate CI CD pipeline. So that way, most of the things becomes automated and you don't have to look around each and every build config to understand where the security issue lies through CI CD pipeline. If the stage gets filled, your production won't be affected and build would be stopped over there. Then at the deployment phase, as I mentioned, the default deployment config doesn't come with network policy. We need to understand what services that deployment is trying to communicate, what are the ports that are defining the deployment config. And accordingly, we can define our own network policies. Then we also need to make sure that the deployment doesn't allow root-level privileges or any unknown users, you know, user IDs to access your application. You should be always aware of what users are going to access your application. And then yes, we can extend the image scanning to deployment phase. So it's important that we do not restrict our image scanning at the build phase, but we continue doing that at the deployment phase as well. Then runtime phase, as I mentioned, we need to extend our scanning at the runtime as well. So we can easily understand and quickly understand what issues have appeared and what actions I need to take. It also helps monitoring network traffic to limit unnecessary or insecure communications. Then if you find any suspicious activity, and if we, at the same time, if we have multiple replicas of your application, then we can compare all the replicas and processes in time to understand what anonymous activity is happening. So to overcome all the challenges, we see Sycrox is helping the end users and the community as well. So why Sycrox is open source, right? Red Hat believes open model when it comes to your software or developing the application. And we believe that open source software can significantly help developers to drive the project with innovation as well as foster the collaboration within community. So Sycrox is working towards providing the open source solution which will allow end users to decide how they want to protect their Kubernetes clusters. So let's understand what Sycrox has to offer us. It enable users to address all significant secretive cases across entire application lifecycle that we discussed, right? Right from your build deployment and runtime. It also gives you greater visibility over vulnerability management, configuration management, network segmentation, compliance, threat detection, incident response, and risk profiling and tolerance. So Sycrox has a policy engine that allows user to run the policies out of the box, meaning that let's say if I have severity with CVSS score greater than or equal to seven, then I could have alert for the same CVSS score and understand what deployments are associated with it. Then Sycrox API allows user to integrate with the image scanning tools, CICD tools, container and times of their own choice, secret management, DevOps notification, to ease and security flow end to end. You can also run it on any cloud or hybrid cloud, or if you want to choose on prem, you can deploy it over there. So this is the bird eye view architecture. I would say where you would see a central in the blue box as a central hub, which gets exposed over load balancer for the clients to consume the Sycrox API. It is written in the REST API. And then we have sensor, admission controller collector, which is logically grouped and called as a secure cluster, right? So you can, once you configure this set of components, you can call a Kubernetes cluster as a secure cluster. And then you can keep on adding as many Kubernetes cluster as you want into the secure central. Then central also has scanner, which aggregates the vulnerability feeds that are fetched from the central. So central basically collect vulnerabilities feed from upstream sources as well as NVD database. Then on each and every node, we would have collector agent, which will collect host level data for the container network and the runtime. So this is the UI where let's say if I have integrated 100 Kubernetes clusters, then how can I manage or understand how those are behaving? What are the healthy components and what are unhealthy? So we can have a quick look to see how systems are performing. So what problem segments Stacrox is going to solve? So these are four problem segments, which I found very common between developers and security teams to understand whether my container contains content-compromising infrastructure, are there any known vulnerabilities, are there any runtime and OS layers, container up-to-date, is my Kubernetes cluster compliant with industry-certified security benchmarks? So let's see how Stacrox solved these problems. So Stacrox can identify the vulnerabilities in the base image package that are installed by the package managers, then programming language-specific dependencies, programming runtime and frameworks. It supports package formats, which I have mentioned there. And I believe most of you work with the same package formats. And there are supported operating systems like Alpine, Amazon, CentOS, Red Hat, Enterprise Linux. So managing compliance is equally important for our organizations to the security standards. So it supports out-of-the-box compliance standards like CIS, benchmark for Kubernetes is occur, then HIPAA, NIST, PCI. So you can run scans through this profile. So Centel or Stacrox specifically collect snapshots of your Kubernetes cluster, then it aggregates the data and analyzes what checks are being passed and what checks are getting filled. It will help to evaluate for the regulatory compliance. It will help to harden your Docker and underlying container runtime. So this is the UI where you can see passing percentage across your cluster, across namespaces, across the nodes. So you can have a better idea where the issue or what compliance checks are filling. Accordingly, you can navigate to that. In the right section, here you will see what controls are filling, what needs to be set. For example, here I have taken an example of CNF files, which says that the file permission should be more restricted. You can accordingly take the actions and fix that control. So what is Collector? Collector overall helps all the Stacrox ecosystem to maintain and manage the container runtime activities as well as post-level processes information. So it's an agent that runs on every node, under strict performance limitations and gather data via either kernel module or a BPF probes. It collects, it analyzes and monitor content activity on cluster nodes. It collects information about runtime and network activity and sends collected data to the sensor. Sensor then will help central to display all the data over the UI. Okay, we'll quickly see. This is the traditional way of how we used to see at kernel when we when we deployed the application. We have user space where application, user application runs and for every resource that we need into user application, we need system calls. So then user request any data, the kernel copies that information from kernel space to user space. But due to some limitations, it is not possible for user to access everything that is into the kernel space, right? And this was not a problem when we talk about a single Linux source, but with container adoption, we know that the number of processes or container that may run on a Linux source have increased, the density of container have increased, right? So resource overhead, managing container issues, container runtime issues has become a great challenge. So all these required activities require kernel support that we know. So how, how do we overcome that? We can use EPPF rules. What is that? It is an extended Berkeley packet filter, right? It is not just a packet filter. It is more than that. It helps us in networking, tracing, profiling, observability and monitoring and security. I will quickly go ahead because of time constraint. Then we have network policies. In Kubernetes, we know that by default, network is, network policies are not there. We need to define our network policies by our own. But considering a production grade environment, it is really difficult to, you know, write each and every network policy ML because sometimes we do not understand what source, from what source the traffic is coming. At large scale, it could be a difficult, right? So it provides network graph, network segment, segmentation to understand or to modify baselines so that we can define, okay, if traffic is coming from this source, then this should be blocked or network policy should be created accordingly with this baseline. So this provide is, so yeah, we, Cyclox provide a network simulator, network policy simulator through which you can understand what are the active connection from where the connection is coming, whether it is allowed by the deployment or whether it is anonymous. Accordingly, you can define your baseline and restrict the traffic. It will help us to create the network policies at the runtime. So we can just copy that network policy and configure it in our Kubernetes lecture. Then we have admission controllers. So it basically helps control, to enforce the security policies before Kubernetes creates workload. For example, deployment, demo sets, it intercepts the API request when any program runs or application runs into the pod. So in Cyclox, we use admission controller with security policies so that any policy gets violated, then it will immediately prevent the deployment from getting into running straight. Okay, so I will quickly show a demo where I have given an example of log forces, forces CV and to understand how it can prevent the deployment. Just let me show it quickly. I hope screen is visible, yeah. So this is the cluster dashboard, where I can see images at the most risk, what are the policies, current policies violated. So Cyclox provides some default policies as per the best practices pertaining to the security posture. So considering the criticality of the log forces, we have included this policy as well. So you can configure policies into two modes, inform as well as enforce. So currently, if I look at this policy, it is into inform mode only. So I have edited it and make it enforced. Yeah, so it executes on build stage, deployment stage. I marked inform and enforce and enable it for the deployment phase. Right, so once the policy created, it will show whether any existing deployments are violating this policy or not. Then for the demonstration purpose, I have run a vulnerable deployment which has this log forces CVT. So this container image has the vulnerable app. So in the parallel terminal, I have keep a watch to trace the events in the run time. So as soon as I create this deployment, you will see that the parts are getting terminated because of the policy violation. So it won't allow the part to get into a running state because of policy violation. And in the events, you will see that stack rock enforcement has been detected and the deployment has been scaled to zero. Okay, time is up. I have one more demo, quick demo. If you would like to see, let me know. Quick demo, yeah, that would be interesting. So in this demo, I have explained how we can leverage the DevSecOps approach to shift the security. For that, I have used Tekton in the pipeline operator, which is deployed in an open shift. So this operator is nothing but using Tekton framework under the hood. Let's see it quickly. So it provides a standard CICD pipeline definition in a declarative approach. So we can define the task as well as pipeline, which further than can be portable across all your Kubernetes infrastructure. So I have defined these three tasks where images, image will be checked and scanned. And in the task, it's in the background, it is calling a stack rocks API through rock CTL. It's same as keep CTL. It talks with the stack rocks API and performs the scanning for the image. So these two tasks I have mentioned in the pipeline definition, image check and image scan. And there is one more secret where I have provided stack rocks API endpoint and the credentials. So we'll create a name space called pipeline demo. Then I have created secret as well as the pipeline definition. Next, we will execute those tasks. We should develop more and see that pipeline has been defined. So these two tasks are there. Pipeline run is not initiated yet. So we'll initiate the pipeline run. We'll pass the container image that we want to scan. For example, here I have provided MySQL 80. So pipeline has been created. You can check the logs, real-time logs through Tecton. It's a client for Tecton through which you can perform the operations. So it also gives you better visibility if in case your tasks are failing. For example, here my credentials were expired. So I had to refresh the credentials and then I ran the pipeline. Now we will see the pipeline gets into running set. The tasks has been passed. Now we will see all the CVs that are associated with this particular container images. You can get each and every CV ID, its CVS score, and you can accordingly share those security admin. You can also check policy violation through image check tasks to understand what policies have been violated, what are their ratings, whether those are rated as low or moderate or risky. That is it. So I have put some handful resources for you to go ahead and get started with the StackFox community project. You can also hop into our Slack channel and that is it from my side. So do we have some questions here? Thanks for the excellent presentation. I have one question regarding you mentioned a lot about the agent which is kind of scanning and detecting the vulnerabilities. You briefly touched upon the object central, which I think if I understand correctly you are pushing that detection of vulnerabilities into the central. Is that right? Yes. So central fetches the vulnerability feeds from the upstream sources or let's say you have NVD database. So every five minutes it will keep on checking what vulnerability are present in the upstream. So accordingly once you download then the collector or the sensor fetches those data into your respective Kubernetes cluster. So what if when the container is running, the pod is running and suddenly the agent checks the vulnerability database and detects possibly that the version running in the pod has having some critical vulnerability. What actions would it do actually? It actually depends on us what actions we want the admission controller to perform. Either we can have it in inform mode so that we understand okay policy is violated but that whether that is really affecting my workload or the runtime accordingly we can take actions. If you want strictly not to allow any deployment to run as soon as the policy is violated we can put it into enforced mode and we can decide at what stage we want to terminate that at the build stage, deploy stage. It's basically based on your policy. And the central is kind of accessible by is it like a closed environment or it is open where anywhere anyone can access that. Any containers running in any cloud can access that. It can be configured in online mode as well as air gap environment. So again it depends on your case or your organizational requirements how you want to install it. In terms of offline mode you can always download those vulnerability feeds or kernel probes modules in your secure host and then you can inject those to center offline way. Okay. That option is also there. Thank you. Any other questions? Yes. I just have a question. Can you use stack rocks as a honeypot? I mean can you just let the intruder or the security thing to go to actually get a like a description of all the things it's doing. The attacker instead. So let's say you not just cut it because you just right now basically applying a policy you're cutting the thing. But can you let it just isolate the container and let it run just to have 4 and 6 out of it. See how things are behaving. Yeah other than policies we can always do the risk analysis. Sometimes it happens that vulnerability that may found as a critical but in terms of my application I might not have that vulnerable code at the runtime stage right. So I can always mark that vulnerability as a false positive or I can defer that vulnerability. Does that answer your question or you have something else? Yeah I mean as long as you can get I mean sometimes the scenario is that you have the pod actually in production and something happens to it and you want to actually isolate it but you still want to have 4 and 6. You don't want to just cut it. You just want to understand the attack. So in terms of isolation it gives us a rich context from the UI at what layer the vulnerability is present. For example we can inspect each and every Docker layer. It allows us to see at what component the vulnerability exists. So you can always you know modify the image. You can build it again and patch the changes. Thank you for the question and thank you for the talk. I think we are out of the time. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.32, "text": " from RUTWIC about demystifying, demystifying Stackrocks. Welcome RUTWIC.", "tokens": [490, 497, 8709, 54, 2532, 466, 1371, 38593, 5489, 11, 1371, 38593, 5489, 37649, 340, 2761, 13, 4027, 497, 8709, 54, 2532, 13], "temperature": 0.2, "avg_logprob": -0.4244578585905187, "compression_ratio": 1.435897435897436, "no_speech_prob": 0.4670026898384094}, {"id": 1, "seek": 0, "start": 12.32, "end": 20.64, "text": " Thank you. Good evening everyone. Thanks for showing back for the late evening talk.", "tokens": [1044, 291, 13, 2205, 5634, 1518, 13, 2561, 337, 4099, 646, 337, 264, 3469, 5634, 751, 13], "temperature": 0.2, "avg_logprob": -0.4244578585905187, "compression_ratio": 1.435897435897436, "no_speech_prob": 0.4670026898384094}, {"id": 2, "seek": 0, "start": 20.64, "end": 25.44, "text": " I appreciate your time. So my name is RUTWIC Shiv Sagar. I work at", "tokens": [286, 4449, 428, 565, 13, 407, 452, 1315, 307, 497, 8709, 54, 2532, 47839, 318, 29124, 13, 286, 589, 412], "temperature": 0.2, "avg_logprob": -0.4244578585905187, "compression_ratio": 1.435897435897436, "no_speech_prob": 0.4670026898384094}, {"id": 3, "seek": 2544, "start": 25.44, "end": 30.96, "text": " that as a senior technical support engineer. I mainly work on solving open shift as well as", "tokens": [300, 382, 257, 7965, 6191, 1406, 11403, 13, 286, 8704, 589, 322, 12606, 1269, 5513, 382, 731, 382], "temperature": 0.0, "avg_logprob": -0.18646107912063598, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.001375804073177278}, {"id": 4, "seek": 2544, "start": 30.96, "end": 37.44, "text": " Stackrocks issues with the customer and with engineering teams. So with the recent time and", "tokens": [37649, 340, 2761, 2663, 365, 264, 5474, 293, 365, 7043, 5491, 13, 407, 365, 264, 5162, 565, 293], "temperature": 0.0, "avg_logprob": -0.18646107912063598, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.001375804073177278}, {"id": 5, "seek": 2544, "start": 38.400000000000006, "end": 44.08, "text": " security threats or attacks, we have seen that container and Kubernetes adoption has equally", "tokens": [3825, 14909, 420, 8122, 11, 321, 362, 1612, 300, 10129, 293, 23145, 19215, 575, 12309], "temperature": 0.0, "avg_logprob": -0.18646107912063598, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.001375804073177278}, {"id": 6, "seek": 2544, "start": 44.08, "end": 51.040000000000006, "text": " increased. With that, security has become a biggest concern, right? So we'll see how", "tokens": [6505, 13, 2022, 300, 11, 3825, 575, 1813, 257, 3880, 3136, 11, 558, 30, 407, 321, 603, 536, 577], "temperature": 0.0, "avg_logprob": -0.18646107912063598, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.001375804073177278}, {"id": 7, "seek": 5104, "start": 51.04, "end": 57.6, "text": " Stackrocks is paving the way for Kubernetes native security and helping us to achieve or resolve", "tokens": [37649, 340, 2761, 307, 280, 6152, 264, 636, 337, 23145, 8470, 3825, 293, 4315, 505, 281, 4584, 420, 14151], "temperature": 0.0, "avg_logprob": -0.12172198906922951, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0007725656614638865}, {"id": 8, "seek": 5104, "start": 57.6, "end": 65.84, "text": " the security issues with ease and automation. So this is the brief agenda for today's talk.", "tokens": [264, 3825, 2663, 365, 12708, 293, 17769, 13, 407, 341, 307, 264, 5353, 9829, 337, 965, 311, 751, 13], "temperature": 0.0, "avg_logprob": -0.12172198906922951, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0007725656614638865}, {"id": 9, "seek": 5104, "start": 65.84, "end": 70.48, "text": " So in the first few slides, we'll discuss current state of Kubernetes security,", "tokens": [407, 294, 264, 700, 1326, 9788, 11, 321, 603, 2248, 2190, 1785, 295, 23145, 3825, 11], "temperature": 0.0, "avg_logprob": -0.12172198906922951, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0007725656614638865}, {"id": 10, "seek": 5104, "start": 71.52, "end": 76.16, "text": " what are the best practices and how DevSecOps approach benefits into the", "tokens": [437, 366, 264, 1151, 7525, 293, 577, 9096, 29511, 36179, 3109, 5311, 666, 264], "temperature": 0.0, "avg_logprob": -0.12172198906922951, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0007725656614638865}, {"id": 11, "seek": 7616, "start": 76.16, "end": 82.96, "text": " security posture, you know, to shift the security for your developers as well as your security", "tokens": [3825, 18502, 11, 291, 458, 11, 281, 5513, 264, 3825, 337, 428, 8849, 382, 731, 382, 428, 3825], "temperature": 0.0, "avg_logprob": -0.15649326112535264, "compression_ratio": 1.7548076923076923, "no_speech_prob": 0.00018891335639636964}, {"id": 12, "seek": 7616, "start": 82.96, "end": 89.6, "text": " admins. And then we will see how Stackrocks ecosystem is helping end users, developers,", "tokens": [5910, 1292, 13, 400, 550, 321, 486, 536, 577, 37649, 340, 2761, 11311, 307, 4315, 917, 5022, 11, 8849, 11], "temperature": 0.0, "avg_logprob": -0.15649326112535264, "compression_ratio": 1.7548076923076923, "no_speech_prob": 0.00018891335639636964}, {"id": 13, "seek": 7616, "start": 89.6, "end": 96.47999999999999, "text": " as well as your security teams to overcome the security issues with ease. And then we will", "tokens": [382, 731, 382, 428, 3825, 5491, 281, 10473, 264, 3825, 2663, 365, 12708, 13, 400, 550, 321, 486], "temperature": 0.0, "avg_logprob": -0.15649326112535264, "compression_ratio": 1.7548076923076923, "no_speech_prob": 0.00018891335639636964}, {"id": 14, "seek": 7616, "start": 96.47999999999999, "end": 104.64, "text": " have some demo at then. Yeah. So first of all, let's understand what is zero-dose security,", "tokens": [362, 512, 10723, 412, 550, 13, 865, 13, 407, 700, 295, 439, 11, 718, 311, 1223, 437, 307, 4018, 12, 67, 541, 3825, 11], "temperature": 0.0, "avg_logprob": -0.15649326112535264, "compression_ratio": 1.7548076923076923, "no_speech_prob": 0.00018891335639636964}, {"id": 15, "seek": 10464, "start": 104.64, "end": 111.12, "text": " why we require zero-dose security, right? So zero-dose security is basically a framework", "tokens": [983, 321, 3651, 4018, 12, 67, 541, 3825, 11, 558, 30, 407, 4018, 12, 67, 541, 3825, 307, 1936, 257, 8388], "temperature": 0.0, "avg_logprob": -0.07780541496715326, "compression_ratio": 1.6785714285714286, "no_speech_prob": 4.3198117054998875e-05}, {"id": 16, "seek": 10464, "start": 111.12, "end": 117.92, "text": " which requires all the users to be authenticated and authorized continuously before they've been", "tokens": [597, 7029, 439, 264, 5022, 281, 312, 9214, 3587, 293, 28312, 15684, 949, 436, 600, 668], "temperature": 0.0, "avg_logprob": -0.07780541496715326, "compression_ratio": 1.6785714285714286, "no_speech_prob": 4.3198117054998875e-05}, {"id": 17, "seek": 10464, "start": 117.92, "end": 124.24000000000001, "text": " granted an access to your application and data. So if you manage to achieve zero-dose security", "tokens": [12344, 364, 2105, 281, 428, 3861, 293, 1412, 13, 407, 498, 291, 3067, 281, 4584, 4018, 12, 67, 541, 3825], "temperature": 0.0, "avg_logprob": -0.07780541496715326, "compression_ratio": 1.6785714285714286, "no_speech_prob": 4.3198117054998875e-05}, {"id": 18, "seek": 10464, "start": 124.24000000000001, "end": 130.96, "text": " model, then I would say that we could resolve or minimize the impact at the very early stage of", "tokens": [2316, 11, 550, 286, 576, 584, 300, 321, 727, 14151, 420, 17522, 264, 2712, 412, 264, 588, 2440, 3233, 295], "temperature": 0.0, "avg_logprob": -0.07780541496715326, "compression_ratio": 1.6785714285714286, "no_speech_prob": 4.3198117054998875e-05}, {"id": 19, "seek": 13096, "start": 130.96, "end": 139.20000000000002, "text": " your application lifecycle. Then how exactly zero-dose security fits into the software supply", "tokens": [428, 3861, 45722, 13, 1396, 577, 2293, 4018, 12, 67, 541, 3825, 9001, 666, 264, 4722, 5847], "temperature": 0.0, "avg_logprob": -0.09645639819863402, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.00010374659177614376}, {"id": 20, "seek": 13096, "start": 139.20000000000002, "end": 147.20000000000002, "text": " chain. So what exactly is software supply chain? It includes everything, everyone and everything", "tokens": [5021, 13, 407, 437, 2293, 307, 4722, 5847, 5021, 30, 467, 5974, 1203, 11, 1518, 293, 1203], "temperature": 0.0, "avg_logprob": -0.09645639819863402, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.00010374659177614376}, {"id": 21, "seek": 13096, "start": 147.20000000000002, "end": 152.64000000000001, "text": " that touches your application code into entire software development lifecycle, right? It could", "tokens": [300, 17431, 428, 3861, 3089, 666, 2302, 4722, 3250, 45722, 11, 558, 30, 467, 727], "temperature": 0.0, "avg_logprob": -0.09645639819863402, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.00010374659177614376}, {"id": 22, "seek": 13096, "start": 152.64000000000001, "end": 159.20000000000002, "text": " be your deployment, it could be your final artifact, it could be a CI CD pipeline. So it's", "tokens": [312, 428, 19317, 11, 309, 727, 312, 428, 2572, 34806, 11, 309, 727, 312, 257, 37777, 6743, 15517, 13, 407, 309, 311], "temperature": 0.0, "avg_logprob": -0.09645639819863402, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.00010374659177614376}, {"id": 23, "seek": 15920, "start": 159.2, "end": 166.39999999999998, "text": " essential that we build the application in such a way that the assurance at every stage of", "tokens": [7115, 300, 321, 1322, 264, 3861, 294, 1270, 257, 636, 300, 264, 32189, 412, 633, 3233, 295], "temperature": 0.0, "avg_logprob": -0.14237627665201824, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0001841416087700054}, {"id": 24, "seek": 15920, "start": 166.39999999999998, "end": 172.95999999999998, "text": " application is being taken seriously. That way we could achieve the trust rates of software", "tokens": [3861, 307, 885, 2726, 6638, 13, 663, 636, 321, 727, 4584, 264, 3361, 6846, 295, 4722], "temperature": 0.0, "avg_logprob": -0.14237627665201824, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0001841416087700054}, {"id": 25, "seek": 15920, "start": 172.95999999999998, "end": 180.95999999999998, "text": " supply chain. So yeah, we can see that security dependencies, securing code, securing containers", "tokens": [5847, 5021, 13, 407, 1338, 11, 321, 393, 536, 300, 3825, 36606, 11, 33640, 3089, 11, 33640, 17089], "temperature": 0.0, "avg_logprob": -0.14237627665201824, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0001841416087700054}, {"id": 26, "seek": 15920, "start": 180.95999999999998, "end": 186.07999999999998, "text": " as well as the infrastructure are all part of the software supply chain.", "tokens": [382, 731, 382, 264, 6896, 366, 439, 644, 295, 264, 4722, 5847, 5021, 13], "temperature": 0.0, "avg_logprob": -0.14237627665201824, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0001841416087700054}, {"id": 27, "seek": 18608, "start": 186.08, "end": 193.60000000000002, "text": " Let me ask you this question. If you're using Kubernetes or in general any applications,", "tokens": [961, 385, 1029, 291, 341, 1168, 13, 759, 291, 434, 1228, 23145, 420, 294, 2674, 604, 5821, 11], "temperature": 0.0, "avg_logprob": -0.11049806916868532, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.00018388959870208055}, {"id": 28, "seek": 18608, "start": 193.60000000000002, "end": 198.48000000000002, "text": " have you ever delayed or slowed down the application deployment into production due", "tokens": [362, 291, 1562, 20268, 420, 32057, 760, 264, 3861, 19317, 666, 4265, 3462], "temperature": 0.0, "avg_logprob": -0.11049806916868532, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.00018388959870208055}, {"id": 29, "seek": 18608, "start": 198.48000000000002, "end": 210.08, "text": " to container security concerns? Anyone of you? All right, I assume so because that's how we go", "tokens": [281, 10129, 3825, 7389, 30, 14643, 295, 291, 30, 1057, 558, 11, 286, 6552, 370, 570, 300, 311, 577, 321, 352], "temperature": 0.0, "avg_logprob": -0.11049806916868532, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.00018388959870208055}, {"id": 30, "seek": 18608, "start": 210.08, "end": 215.04000000000002, "text": " through application lifecycle. We deploy the application, then we analyze the application,", "tokens": [807, 3861, 45722, 13, 492, 7274, 264, 3861, 11, 550, 321, 12477, 264, 3861, 11], "temperature": 0.0, "avg_logprob": -0.11049806916868532, "compression_ratio": 1.6422018348623852, "no_speech_prob": 0.00018388959870208055}, {"id": 31, "seek": 21504, "start": 215.04, "end": 223.68, "text": " behavior and we detect the vulnerabilities. So in the recent trend, we have seen some common factors", "tokens": [5223, 293, 321, 5531, 264, 37633, 13, 407, 294, 264, 5162, 6028, 11, 321, 362, 1612, 512, 2689, 6771], "temperature": 0.0, "avg_logprob": -0.1359700823939124, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.00020033982582390308}, {"id": 32, "seek": 21504, "start": 223.68, "end": 230.64, "text": " or common anti-patterns which were causing delays for an application to get deployed on the production.", "tokens": [420, 2689, 6061, 12, 79, 1161, 3695, 597, 645, 9853, 28610, 337, 364, 3861, 281, 483, 17826, 322, 264, 4265, 13], "temperature": 0.0, "avg_logprob": -0.1359700823939124, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.00020033982582390308}, {"id": 33, "seek": 21504, "start": 231.2, "end": 237.6, "text": " So misconfiguration has topped the percentage where following to that we have vulnerabilities", "tokens": [407, 27631, 20646, 8167, 575, 38781, 264, 9668, 689, 3480, 281, 300, 321, 362, 37633], "temperature": 0.0, "avg_logprob": -0.1359700823939124, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.00020033982582390308}, {"id": 34, "seek": 21504, "start": 237.6, "end": 243.92, "text": " to remediate, right? So for example, we kind of able to detect the vulnerabilities but somehow", "tokens": [281, 890, 10323, 473, 11, 558, 30, 407, 337, 1365, 11, 321, 733, 295, 1075, 281, 5531, 264, 37633, 457, 6063], "temperature": 0.0, "avg_logprob": -0.1359700823939124, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.00020033982582390308}, {"id": 35, "seek": 24392, "start": 243.92, "end": 250.79999999999998, "text": " we tend to overlook them or we could not assist them accurately. That leads to the vulnerability.", "tokens": [321, 3928, 281, 37826, 552, 420, 321, 727, 406, 4255, 552, 20095, 13, 663, 6689, 281, 264, 24210, 13], "temperature": 0.0, "avg_logprob": -0.11153534312307099, "compression_ratio": 1.6651162790697673, "no_speech_prob": 8.663427433930337e-05}, {"id": 36, "seek": 24392, "start": 251.92, "end": 258.0, "text": " I mean, we get to know that okay, vulnerability exists but there are no proper ways or tooling", "tokens": [286, 914, 11, 321, 483, 281, 458, 300, 1392, 11, 24210, 8198, 457, 456, 366, 572, 2296, 2098, 420, 46593], "temperature": 0.0, "avg_logprob": -0.11153534312307099, "compression_ratio": 1.6651162790697673, "no_speech_prob": 8.663427433930337e-05}, {"id": 37, "seek": 24392, "start": 258.0, "end": 263.91999999999996, "text": " to fix that kind of vulnerability. Then we ultimately have security issues at the runtime,", "tokens": [281, 3191, 300, 733, 295, 24210, 13, 1396, 321, 6284, 362, 3825, 2663, 412, 264, 34474, 11], "temperature": 0.0, "avg_logprob": -0.11153534312307099, "compression_ratio": 1.6651162790697673, "no_speech_prob": 8.663427433930337e-05}, {"id": 38, "seek": 24392, "start": 263.91999999999996, "end": 268.56, "text": " you know, which could be costly or it could affect your entire production.", "tokens": [291, 458, 11, 597, 727, 312, 28328, 420, 309, 727, 3345, 428, 2302, 4265, 13], "temperature": 0.0, "avg_logprob": -0.11153534312307099, "compression_ratio": 1.6651162790697673, "no_speech_prob": 8.663427433930337e-05}, {"id": 39, "seek": 26856, "start": 268.56, "end": 277.92, "text": " So how can we make sure that these kind of issues are reduced? Let's say,", "tokens": [407, 577, 393, 321, 652, 988, 300, 613, 733, 295, 2663, 366, 9212, 30, 961, 311, 584, 11], "temperature": 0.0, "avg_logprob": -0.2400751241048177, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00018437531252857298}, {"id": 40, "seek": 26856, "start": 279.04, "end": 286.16, "text": " so in today's world, we need DevSecOps approach, DevOps, just DevOps isn't enough, right? We need", "tokens": [370, 294, 965, 311, 1002, 11, 321, 643, 9096, 29511, 36179, 3109, 11, 9096, 46, 1878, 11, 445, 9096, 46, 1878, 1943, 380, 1547, 11, 558, 30, 492, 643], "temperature": 0.0, "avg_logprob": -0.2400751241048177, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00018437531252857298}, {"id": 41, "seek": 26856, "start": 286.16, "end": 296.24, "text": " DevSecOps to shift the security from our traditional security practices. So DevSecOps helps us define", "tokens": [9096, 29511, 36179, 281, 5513, 264, 3825, 490, 527, 5164, 3825, 7525, 13, 407, 9096, 29511, 36179, 3665, 505, 6964], "temperature": 0.0, "avg_logprob": -0.2400751241048177, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00018437531252857298}, {"id": 42, "seek": 29624, "start": 296.24, "end": 301.2, "text": " microservices architecture. It provides us declared definition to, you know, harden your", "tokens": [15547, 47480, 9482, 13, 467, 6417, 505, 15489, 7123, 281, 11, 291, 458, 11, 50203, 428], "temperature": 0.0, "avg_logprob": -0.12923804415932186, "compression_ratio": 1.6339285714285714, "no_speech_prob": 0.00031936727464199066}, {"id": 43, "seek": 29624, "start": 301.2, "end": 306.16, "text": " security parameters, network policies and deployment conflicts. It also makes sure that", "tokens": [3825, 9834, 11, 3209, 7657, 293, 19317, 19807, 13, 467, 611, 1669, 988, 300], "temperature": 0.0, "avg_logprob": -0.12923804415932186, "compression_ratio": 1.6339285714285714, "no_speech_prob": 0.00031936727464199066}, {"id": 44, "seek": 29624, "start": 306.16, "end": 311.6, "text": " the infrastructure stays immutable. So at the runtime, nobody else is allowed to, you know,", "tokens": [264, 6896, 10834, 3397, 32148, 13, 407, 412, 264, 34474, 11, 5079, 1646, 307, 4350, 281, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.12923804415932186, "compression_ratio": 1.6339285714285714, "no_speech_prob": 0.00031936727464199066}, {"id": 45, "seek": 29624, "start": 311.6, "end": 319.92, "text": " touch the software or your application deployment. At the same time, it is important that we know", "tokens": [2557, 264, 4722, 420, 428, 3861, 19317, 13, 1711, 264, 912, 565, 11, 309, 307, 1021, 300, 321, 458], "temperature": 0.0, "avg_logprob": -0.12923804415932186, "compression_ratio": 1.6339285714285714, "no_speech_prob": 0.00031936727464199066}, {"id": 46, "seek": 31992, "start": 319.92, "end": 325.76, "text": " Kubernetes native security is increasingly critical and securing supply chain is also", "tokens": [23145, 8470, 3825, 307, 12980, 4924, 293, 33640, 5847, 5021, 307, 611], "temperature": 0.0, "avg_logprob": -0.18797873161934517, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00010213487257715315}, {"id": 47, "seek": 31992, "start": 326.32, "end": 334.32, "text": " equally essential. So what are the basic Kubernetes security scan challenges? So we know", "tokens": [12309, 7115, 13, 407, 437, 366, 264, 3875, 23145, 3825, 11049, 4759, 30, 407, 321, 458], "temperature": 0.0, "avg_logprob": -0.18797873161934517, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00010213487257715315}, {"id": 48, "seek": 31992, "start": 334.32, "end": 340.96000000000004, "text": " that containers are numerous and everywhere. If I have to put analogy, like we say that", "tokens": [300, 17089, 366, 12546, 293, 5315, 13, 759, 286, 362, 281, 829, 21663, 11, 411, 321, 584, 300], "temperature": 0.0, "avg_logprob": -0.18797873161934517, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00010213487257715315}, {"id": 49, "seek": 31992, "start": 340.96000000000004, "end": 345.92, "text": " everything is a file in Linux in a similar way, everything runs in a container when we", "tokens": [1203, 307, 257, 3991, 294, 18734, 294, 257, 2531, 636, 11, 1203, 6676, 294, 257, 10129, 562, 321], "temperature": 0.0, "avg_logprob": -0.18797873161934517, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00010213487257715315}, {"id": 50, "seek": 34592, "start": 345.92, "end": 352.24, "text": " talk about Kubernetes, right? So they may tend to pose compliance challenges. Every container", "tokens": [751, 466, 23145, 11, 558, 30, 407, 436, 815, 3928, 281, 10774, 15882, 4759, 13, 2048, 10129], "temperature": 0.0, "avg_logprob": -0.15684038985009288, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0003023720346391201}, {"id": 51, "seek": 34592, "start": 352.24, "end": 358.08000000000004, "text": " image is tied up with some of the other container registers, right? So sometimes we even forget to", "tokens": [3256, 307, 9601, 493, 365, 512, 295, 264, 661, 10129, 38351, 11, 558, 30, 407, 2171, 321, 754, 2870, 281], "temperature": 0.0, "avg_logprob": -0.15684038985009288, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0003023720346391201}, {"id": 52, "seek": 34592, "start": 358.08000000000004, "end": 363.44, "text": " add TLS with best authentication to our image registry that may, you know, expose", "tokens": [909, 314, 19198, 365, 1151, 26643, 281, 527, 3256, 36468, 300, 815, 11, 291, 458, 11, 19219], "temperature": 0.0, "avg_logprob": -0.15684038985009288, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0003023720346391201}, {"id": 53, "seek": 34592, "start": 364.08000000000004, "end": 369.68, "text": " security threats over the internet if at all we expose that. And we are also aware that", "tokens": [3825, 14909, 670, 264, 4705, 498, 412, 439, 321, 19219, 300, 13, 400, 321, 366, 611, 3650, 300], "temperature": 0.0, "avg_logprob": -0.15684038985009288, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0003023720346391201}, {"id": 54, "seek": 34592, "start": 369.68, "end": 375.68, "text": " containers by default talk to each other without any network policies. So it is important that we", "tokens": [17089, 538, 7576, 751, 281, 1184, 661, 1553, 604, 3209, 7657, 13, 407, 309, 307, 1021, 300, 321], "temperature": 0.0, "avg_logprob": -0.15684038985009288, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0003023720346391201}, {"id": 55, "seek": 37568, "start": 375.68, "end": 382.24, "text": " define network policies at early stages. And this one, I think most of you can relate that", "tokens": [6964, 3209, 7657, 412, 2440, 10232, 13, 400, 341, 472, 11, 286, 519, 881, 295, 291, 393, 10961, 300], "temperature": 0.0, "avg_logprob": -0.13698516314542747, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0002511456550564617}, {"id": 56, "seek": 37568, "start": 382.24, "end": 388.16, "text": " when we show Kubernetes, all of the configurations looks pretty easy, but defaults are usually", "tokens": [562, 321, 855, 23145, 11, 439, 295, 264, 31493, 1542, 1238, 1858, 11, 457, 7576, 82, 366, 2673], "temperature": 0.0, "avg_logprob": -0.13698516314542747, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0002511456550564617}, {"id": 57, "seek": 37568, "start": 388.88, "end": 394.0, "text": " the less secure, right? So we as an admin or developer have to proactively understand what", "tokens": [264, 1570, 7144, 11, 558, 30, 407, 321, 382, 364, 24236, 420, 10754, 362, 281, 447, 45679, 1223, 437], "temperature": 0.0, "avg_logprob": -0.13698516314542747, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0002511456550564617}, {"id": 58, "seek": 37568, "start": 394.0, "end": 400.16, "text": " configuration or what risk tolerance required for my organization or developer environment.", "tokens": [11694, 420, 437, 3148, 23368, 4739, 337, 452, 4475, 420, 10754, 2823, 13], "temperature": 0.0, "avg_logprob": -0.13698516314542747, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0002511456550564617}, {"id": 59, "seek": 40016, "start": 400.16, "end": 407.36, "text": " So in Kubernetes, application lifecycle span across three phases mainly, that is build phase,", "tokens": [407, 294, 23145, 11, 3861, 45722, 16174, 2108, 1045, 18764, 8704, 11, 300, 307, 1322, 5574, 11], "temperature": 0.0, "avg_logprob": -0.18955920463384585, "compression_ratio": 1.648068669527897, "no_speech_prob": 5.866066203452647e-05}, {"id": 60, "seek": 40016, "start": 407.36, "end": 414.08000000000004, "text": " deployment phase, and runtime phase. So how we can make sure that we secure each and every stage", "tokens": [19317, 5574, 11, 293, 34474, 5574, 13, 407, 577, 321, 393, 652, 988, 300, 321, 7144, 1184, 293, 633, 3233], "temperature": 0.0, "avg_logprob": -0.18955920463384585, "compression_ratio": 1.648068669527897, "no_speech_prob": 5.866066203452647e-05}, {"id": 61, "seek": 40016, "start": 414.08000000000004, "end": 419.92, "text": " of the application, right? So when we talk about build phase, it's important that we isolate the", "tokens": [295, 264, 3861, 11, 558, 30, 407, 562, 321, 751, 466, 1322, 5574, 11, 309, 311, 1021, 300, 321, 25660, 264], "temperature": 0.0, "avg_logprob": -0.18955920463384585, "compression_ratio": 1.648068669527897, "no_speech_prob": 5.866066203452647e-05}, {"id": 62, "seek": 40016, "start": 419.92, "end": 425.84000000000003, "text": " vulnerability of security issue at the earliest. Otherwise, it would be very costly and risky to", "tokens": [24210, 295, 3825, 2734, 412, 264, 20573, 13, 10328, 11, 309, 576, 312, 588, 28328, 293, 21137, 281], "temperature": 0.0, "avg_logprob": -0.18955920463384585, "compression_ratio": 1.648068669527897, "no_speech_prob": 5.866066203452647e-05}, {"id": 63, "seek": 42584, "start": 425.84, "end": 432.15999999999997, "text": " detect the vulnerabilities at the runtime, right? So what we can do, we can use minimal base images", "tokens": [5531, 264, 37633, 412, 264, 34474, 11, 558, 30, 407, 437, 321, 393, 360, 11, 321, 393, 764, 13206, 3096, 5267], "temperature": 0.0, "avg_logprob": -0.1815047380400867, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.00018153067503590137}, {"id": 64, "seek": 42584, "start": 432.15999999999997, "end": 438.96, "text": " so that we can avoid unnecessary package managers or, you know, any executable programs into your", "tokens": [370, 300, 321, 393, 5042, 19350, 7372, 14084, 420, 11, 291, 458, 11, 604, 7568, 712, 4268, 666, 428], "temperature": 0.0, "avg_logprob": -0.1815047380400867, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.00018153067503590137}, {"id": 65, "seek": 42584, "start": 438.96, "end": 446.15999999999997, "text": " container images. Then we can always use image scanner to identify known vulnerabilities. I think", "tokens": [10129, 5267, 13, 1396, 321, 393, 1009, 764, 3256, 30211, 281, 5876, 2570, 37633, 13, 286, 519], "temperature": 0.0, "avg_logprob": -0.1815047380400867, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.00018153067503590137}, {"id": 66, "seek": 42584, "start": 446.15999999999997, "end": 451.03999999999996, "text": " identifying vulnerabilities just once is not enough. You need to make sure that whatever", "tokens": [16696, 37633, 445, 1564, 307, 406, 1547, 13, 509, 643, 281, 652, 988, 300, 2035], "temperature": 0.0, "avg_logprob": -0.1815047380400867, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.00018153067503590137}, {"id": 67, "seek": 45104, "start": 451.04, "end": 456.32, "text": " security integration scanner you're using that will continuously validate your container images and", "tokens": [3825, 10980, 30211, 291, 434, 1228, 300, 486, 15684, 29562, 428, 10129, 5267, 293], "temperature": 0.0, "avg_logprob": -0.2026874630950218, "compression_ratio": 1.6097560975609757, "no_speech_prob": 7.891237328294665e-05}, {"id": 68, "seek": 45104, "start": 456.32, "end": 462.8, "text": " send the real-time alerts to your development team as well as security admins. Then yes, at the", "tokens": [2845, 264, 957, 12, 3766, 28061, 281, 428, 3250, 1469, 382, 731, 382, 3825, 5910, 1292, 13, 1396, 2086, 11, 412, 264], "temperature": 0.0, "avg_logprob": -0.2026874630950218, "compression_ratio": 1.6097560975609757, "no_speech_prob": 7.891237328294665e-05}, {"id": 69, "seek": 45104, "start": 462.8, "end": 469.92, "text": " build phase, we need to integrate CI CD pipeline. So that way, most of the things becomes automated", "tokens": [1322, 5574, 11, 321, 643, 281, 13365, 37777, 6743, 15517, 13, 407, 300, 636, 11, 881, 295, 264, 721, 3643, 18473], "temperature": 0.0, "avg_logprob": -0.2026874630950218, "compression_ratio": 1.6097560975609757, "no_speech_prob": 7.891237328294665e-05}, {"id": 70, "seek": 45104, "start": 469.92, "end": 475.84000000000003, "text": " and you don't have to look around each and every build config to understand where the security issue", "tokens": [293, 291, 500, 380, 362, 281, 574, 926, 1184, 293, 633, 1322, 6662, 281, 1223, 689, 264, 3825, 2734], "temperature": 0.0, "avg_logprob": -0.2026874630950218, "compression_ratio": 1.6097560975609757, "no_speech_prob": 7.891237328294665e-05}, {"id": 71, "seek": 47584, "start": 475.84, "end": 481.84, "text": " lies through CI CD pipeline. If the stage gets filled, your production won't be affected and", "tokens": [9134, 807, 37777, 6743, 15517, 13, 759, 264, 3233, 2170, 6412, 11, 428, 4265, 1582, 380, 312, 8028, 293], "temperature": 0.0, "avg_logprob": -0.21849020027819974, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.00013376113201957196}, {"id": 72, "seek": 47584, "start": 481.84, "end": 488.96, "text": " build would be stopped over there. Then at the deployment phase, as I mentioned, the default", "tokens": [1322, 576, 312, 5936, 670, 456, 13, 1396, 412, 264, 19317, 5574, 11, 382, 286, 2835, 11, 264, 7576], "temperature": 0.0, "avg_logprob": -0.21849020027819974, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.00013376113201957196}, {"id": 73, "seek": 47584, "start": 488.96, "end": 496.15999999999997, "text": " deployment config doesn't come with network policy. We need to understand what services that", "tokens": [19317, 6662, 1177, 380, 808, 365, 3209, 3897, 13, 492, 643, 281, 1223, 437, 3328, 300], "temperature": 0.0, "avg_logprob": -0.21849020027819974, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.00013376113201957196}, {"id": 74, "seek": 47584, "start": 496.15999999999997, "end": 502.0, "text": " deployment is trying to communicate, what are the ports that are defining the deployment config.", "tokens": [19317, 307, 1382, 281, 7890, 11, 437, 366, 264, 18160, 300, 366, 17827, 264, 19317, 6662, 13], "temperature": 0.0, "avg_logprob": -0.21849020027819974, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.00013376113201957196}, {"id": 75, "seek": 50200, "start": 502.0, "end": 508.96, "text": " And accordingly, we can define our own network policies. Then we also need to make sure that", "tokens": [400, 19717, 11, 321, 393, 6964, 527, 1065, 3209, 7657, 13, 1396, 321, 611, 643, 281, 652, 988, 300], "temperature": 0.0, "avg_logprob": -0.13227884840257098, "compression_ratio": 1.7120622568093384, "no_speech_prob": 0.00016990856966003776}, {"id": 76, "seek": 50200, "start": 508.96, "end": 515.12, "text": " the deployment doesn't allow root-level privileges or any unknown users, you know,", "tokens": [264, 19317, 1177, 380, 2089, 5593, 12, 12418, 32588, 420, 604, 9841, 5022, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.13227884840257098, "compression_ratio": 1.7120622568093384, "no_speech_prob": 0.00016990856966003776}, {"id": 77, "seek": 50200, "start": 515.12, "end": 519.76, "text": " user IDs to access your application. You should be always aware of what users are", "tokens": [4195, 48212, 281, 2105, 428, 3861, 13, 509, 820, 312, 1009, 3650, 295, 437, 5022, 366], "temperature": 0.0, "avg_logprob": -0.13227884840257098, "compression_ratio": 1.7120622568093384, "no_speech_prob": 0.00016990856966003776}, {"id": 78, "seek": 50200, "start": 519.76, "end": 525.44, "text": " going to access your application. And then yes, we can extend the image scanning to", "tokens": [516, 281, 2105, 428, 3861, 13, 400, 550, 2086, 11, 321, 393, 10101, 264, 3256, 27019, 281], "temperature": 0.0, "avg_logprob": -0.13227884840257098, "compression_ratio": 1.7120622568093384, "no_speech_prob": 0.00016990856966003776}, {"id": 79, "seek": 50200, "start": 525.44, "end": 531.44, "text": " deployment phase. So it's important that we do not restrict our image scanning at the build phase,", "tokens": [19317, 5574, 13, 407, 309, 311, 1021, 300, 321, 360, 406, 7694, 527, 3256, 27019, 412, 264, 1322, 5574, 11], "temperature": 0.0, "avg_logprob": -0.13227884840257098, "compression_ratio": 1.7120622568093384, "no_speech_prob": 0.00016990856966003776}, {"id": 80, "seek": 53144, "start": 531.44, "end": 538.72, "text": " but we continue doing that at the deployment phase as well. Then runtime phase, as I mentioned,", "tokens": [457, 321, 2354, 884, 300, 412, 264, 19317, 5574, 382, 731, 13, 1396, 34474, 5574, 11, 382, 286, 2835, 11], "temperature": 0.0, "avg_logprob": -0.06996046900749206, "compression_ratio": 1.6787330316742082, "no_speech_prob": 4.6384800953092054e-05}, {"id": 81, "seek": 53144, "start": 538.72, "end": 545.6, "text": " we need to extend our scanning at the runtime as well. So we can easily understand and quickly", "tokens": [321, 643, 281, 10101, 527, 27019, 412, 264, 34474, 382, 731, 13, 407, 321, 393, 3612, 1223, 293, 2661], "temperature": 0.0, "avg_logprob": -0.06996046900749206, "compression_ratio": 1.6787330316742082, "no_speech_prob": 4.6384800953092054e-05}, {"id": 82, "seek": 53144, "start": 545.6, "end": 550.72, "text": " understand what issues have appeared and what actions I need to take. It also helps", "tokens": [1223, 437, 2663, 362, 8516, 293, 437, 5909, 286, 643, 281, 747, 13, 467, 611, 3665], "temperature": 0.0, "avg_logprob": -0.06996046900749206, "compression_ratio": 1.6787330316742082, "no_speech_prob": 4.6384800953092054e-05}, {"id": 83, "seek": 53144, "start": 551.5200000000001, "end": 558.08, "text": " monitoring network traffic to limit unnecessary or insecure communications. Then if you find any", "tokens": [11028, 3209, 6419, 281, 4948, 19350, 420, 32215, 15163, 13, 1396, 498, 291, 915, 604], "temperature": 0.0, "avg_logprob": -0.06996046900749206, "compression_ratio": 1.6787330316742082, "no_speech_prob": 4.6384800953092054e-05}, {"id": 84, "seek": 55808, "start": 558.08, "end": 564.0, "text": " suspicious activity, and if we, at the same time, if we have multiple replicas of your application,", "tokens": [17931, 5191, 11, 293, 498, 321, 11, 412, 264, 912, 565, 11, 498, 321, 362, 3866, 3248, 9150, 295, 428, 3861, 11], "temperature": 0.0, "avg_logprob": -0.18547594678270948, "compression_ratio": 1.6860986547085202, "no_speech_prob": 2.844057416950818e-05}, {"id": 85, "seek": 55808, "start": 564.0, "end": 569.12, "text": " then we can compare all the replicas and processes in time to understand what anonymous", "tokens": [550, 321, 393, 6794, 439, 264, 3248, 9150, 293, 7555, 294, 565, 281, 1223, 437, 24932], "temperature": 0.0, "avg_logprob": -0.18547594678270948, "compression_ratio": 1.6860986547085202, "no_speech_prob": 2.844057416950818e-05}, {"id": 86, "seek": 55808, "start": 569.12, "end": 578.88, "text": " activity is happening. So to overcome all the challenges, we see Sycrox is helping the end", "tokens": [5191, 307, 2737, 13, 407, 281, 10473, 439, 264, 4759, 11, 321, 536, 3902, 23401, 87, 307, 4315, 264, 917], "temperature": 0.0, "avg_logprob": -0.18547594678270948, "compression_ratio": 1.6860986547085202, "no_speech_prob": 2.844057416950818e-05}, {"id": 87, "seek": 55808, "start": 578.88, "end": 587.0400000000001, "text": " users and the community as well. So why Sycrox is open source, right? Red Hat believes open model", "tokens": [5022, 293, 264, 1768, 382, 731, 13, 407, 983, 3902, 23401, 87, 307, 1269, 4009, 11, 558, 30, 4477, 15867, 12307, 1269, 2316], "temperature": 0.0, "avg_logprob": -0.18547594678270948, "compression_ratio": 1.6860986547085202, "no_speech_prob": 2.844057416950818e-05}, {"id": 88, "seek": 58704, "start": 587.04, "end": 594.16, "text": " when it comes to your software or developing the application. And we believe that open source", "tokens": [562, 309, 1487, 281, 428, 4722, 420, 6416, 264, 3861, 13, 400, 321, 1697, 300, 1269, 4009], "temperature": 0.0, "avg_logprob": -0.08594624837239584, "compression_ratio": 1.6740088105726871, "no_speech_prob": 7.425126386806369e-05}, {"id": 89, "seek": 58704, "start": 594.16, "end": 601.28, "text": " software can significantly help developers to drive the project with innovation as well as foster", "tokens": [4722, 393, 10591, 854, 8849, 281, 3332, 264, 1716, 365, 8504, 382, 731, 382, 17114], "temperature": 0.0, "avg_logprob": -0.08594624837239584, "compression_ratio": 1.6740088105726871, "no_speech_prob": 7.425126386806369e-05}, {"id": 90, "seek": 58704, "start": 601.28, "end": 607.92, "text": " the collaboration within community. So Sycrox is working towards providing the open source solution", "tokens": [264, 9363, 1951, 1768, 13, 407, 3902, 23401, 87, 307, 1364, 3030, 6530, 264, 1269, 4009, 3827], "temperature": 0.0, "avg_logprob": -0.08594624837239584, "compression_ratio": 1.6740088105726871, "no_speech_prob": 7.425126386806369e-05}, {"id": 91, "seek": 58704, "start": 608.48, "end": 614.0, "text": " which will allow end users to decide how they want to protect their Kubernetes clusters.", "tokens": [597, 486, 2089, 917, 5022, 281, 4536, 577, 436, 528, 281, 2371, 641, 23145, 23313, 13], "temperature": 0.0, "avg_logprob": -0.08594624837239584, "compression_ratio": 1.6740088105726871, "no_speech_prob": 7.425126386806369e-05}, {"id": 92, "seek": 61400, "start": 614.0, "end": 623.92, "text": " So let's understand what Sycrox has to offer us. It enable users to address all significant", "tokens": [407, 718, 311, 1223, 437, 3902, 23401, 87, 575, 281, 2626, 505, 13, 467, 9528, 5022, 281, 2985, 439, 4776], "temperature": 0.0, "avg_logprob": -0.13206913596705386, "compression_ratio": 1.5767634854771784, "no_speech_prob": 0.0001275642280234024}, {"id": 93, "seek": 61400, "start": 623.92, "end": 628.72, "text": " secretive cases across entire application lifecycle that we discussed, right? Right from", "tokens": [4054, 488, 3331, 2108, 2302, 3861, 45722, 300, 321, 7152, 11, 558, 30, 1779, 490], "temperature": 0.0, "avg_logprob": -0.13206913596705386, "compression_ratio": 1.5767634854771784, "no_speech_prob": 0.0001275642280234024}, {"id": 94, "seek": 61400, "start": 628.72, "end": 634.96, "text": " your build deployment and runtime. It also gives you greater visibility over vulnerability management,", "tokens": [428, 1322, 19317, 293, 34474, 13, 467, 611, 2709, 291, 5044, 19883, 670, 24210, 4592, 11], "temperature": 0.0, "avg_logprob": -0.13206913596705386, "compression_ratio": 1.5767634854771784, "no_speech_prob": 0.0001275642280234024}, {"id": 95, "seek": 61400, "start": 635.52, "end": 640.72, "text": " configuration management, network segmentation, compliance, threat detection, incident response,", "tokens": [11694, 4592, 11, 3209, 9469, 399, 11, 15882, 11, 4734, 17784, 11, 9348, 4134, 11], "temperature": 0.0, "avg_logprob": -0.13206913596705386, "compression_ratio": 1.5767634854771784, "no_speech_prob": 0.0001275642280234024}, {"id": 96, "seek": 64072, "start": 640.72, "end": 651.6, "text": " and risk profiling and tolerance. So Sycrox has a policy engine that allows user to run the policies", "tokens": [293, 3148, 1740, 4883, 293, 23368, 13, 407, 3902, 23401, 87, 575, 257, 3897, 2848, 300, 4045, 4195, 281, 1190, 264, 7657], "temperature": 0.0, "avg_logprob": -0.12603791119301155, "compression_ratio": 1.52020202020202, "no_speech_prob": 8.101804269244894e-05}, {"id": 97, "seek": 64072, "start": 651.6, "end": 656.96, "text": " out of the box, meaning that let's say if I have severity with CVSS score greater than or equal to", "tokens": [484, 295, 264, 2424, 11, 3620, 300, 718, 311, 584, 498, 286, 362, 35179, 365, 22995, 21929, 6175, 5044, 813, 420, 2681, 281], "temperature": 0.0, "avg_logprob": -0.12603791119301155, "compression_ratio": 1.52020202020202, "no_speech_prob": 8.101804269244894e-05}, {"id": 98, "seek": 64072, "start": 656.96, "end": 662.8000000000001, "text": " seven, then I could have alert for the same CVSS score and understand what deployments are associated", "tokens": [3407, 11, 550, 286, 727, 362, 9615, 337, 264, 912, 22995, 21929, 6175, 293, 1223, 437, 7274, 1117, 366, 6615], "temperature": 0.0, "avg_logprob": -0.12603791119301155, "compression_ratio": 1.52020202020202, "no_speech_prob": 8.101804269244894e-05}, {"id": 99, "seek": 66280, "start": 662.8, "end": 670.88, "text": " with it. Then Sycrox API allows user to integrate with the image scanning tools, CICD tools,", "tokens": [365, 309, 13, 1396, 3902, 23401, 87, 9362, 4045, 4195, 281, 13365, 365, 264, 3256, 27019, 3873, 11, 383, 2532, 35, 3873, 11], "temperature": 0.0, "avg_logprob": -0.11751339549110049, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.0001310628285864368}, {"id": 100, "seek": 66280, "start": 670.88, "end": 675.5999999999999, "text": " container and times of their own choice, secret management, DevOps notification,", "tokens": [10129, 293, 1413, 295, 641, 1065, 3922, 11, 4054, 4592, 11, 43051, 11554, 11], "temperature": 0.0, "avg_logprob": -0.11751339549110049, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.0001310628285864368}, {"id": 101, "seek": 66280, "start": 675.5999999999999, "end": 683.8399999999999, "text": " to ease and security flow end to end. You can also run it on any cloud or hybrid cloud,", "tokens": [281, 12708, 293, 3825, 3095, 917, 281, 917, 13, 509, 393, 611, 1190, 309, 322, 604, 4588, 420, 13051, 4588, 11], "temperature": 0.0, "avg_logprob": -0.11751339549110049, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.0001310628285864368}, {"id": 102, "seek": 66280, "start": 683.8399999999999, "end": 687.12, "text": " or if you want to choose on prem, you can deploy it over there.", "tokens": [420, 498, 291, 528, 281, 2826, 322, 5624, 11, 291, 393, 7274, 309, 670, 456, 13], "temperature": 0.0, "avg_logprob": -0.11751339549110049, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.0001310628285864368}, {"id": 103, "seek": 68712, "start": 687.12, "end": 694.88, "text": " So this is the bird eye view architecture. I would say where you would see a central", "tokens": [407, 341, 307, 264, 5255, 3313, 1910, 9482, 13, 286, 576, 584, 689, 291, 576, 536, 257, 5777], "temperature": 0.0, "avg_logprob": -0.16350131199277682, "compression_ratio": 1.5414847161572052, "no_speech_prob": 9.14768606889993e-05}, {"id": 104, "seek": 68712, "start": 694.88, "end": 699.92, "text": " in the blue box as a central hub, which gets exposed over load balancer for the", "tokens": [294, 264, 3344, 2424, 382, 257, 5777, 11838, 11, 597, 2170, 9495, 670, 3677, 3119, 28347, 337, 264], "temperature": 0.0, "avg_logprob": -0.16350131199277682, "compression_ratio": 1.5414847161572052, "no_speech_prob": 9.14768606889993e-05}, {"id": 105, "seek": 68712, "start": 699.92, "end": 706.64, "text": " clients to consume the Sycrox API. It is written in the REST API. And then we have sensor,", "tokens": [6982, 281, 14732, 264, 3902, 23401, 87, 9362, 13, 467, 307, 3720, 294, 264, 497, 14497, 9362, 13, 400, 550, 321, 362, 10200, 11], "temperature": 0.0, "avg_logprob": -0.16350131199277682, "compression_ratio": 1.5414847161572052, "no_speech_prob": 9.14768606889993e-05}, {"id": 106, "seek": 68712, "start": 706.64, "end": 712.08, "text": " admission controller collector, which is logically grouped and called as a secure cluster, right?", "tokens": [24668, 10561, 23960, 11, 597, 307, 38887, 41877, 293, 1219, 382, 257, 7144, 13630, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16350131199277682, "compression_ratio": 1.5414847161572052, "no_speech_prob": 9.14768606889993e-05}, {"id": 107, "seek": 71208, "start": 712.08, "end": 717.36, "text": " So you can, once you configure this set of components, you can call a Kubernetes cluster", "tokens": [407, 291, 393, 11, 1564, 291, 22162, 341, 992, 295, 6677, 11, 291, 393, 818, 257, 23145, 13630], "temperature": 0.0, "avg_logprob": -0.13854647174323956, "compression_ratio": 1.7661290322580645, "no_speech_prob": 7.543786341557279e-05}, {"id": 108, "seek": 71208, "start": 717.36, "end": 722.5600000000001, "text": " as a secure cluster. And then you can keep on adding as many Kubernetes cluster as you want", "tokens": [382, 257, 7144, 13630, 13, 400, 550, 291, 393, 1066, 322, 5127, 382, 867, 23145, 13630, 382, 291, 528], "temperature": 0.0, "avg_logprob": -0.13854647174323956, "compression_ratio": 1.7661290322580645, "no_speech_prob": 7.543786341557279e-05}, {"id": 109, "seek": 71208, "start": 722.5600000000001, "end": 729.6800000000001, "text": " into the secure central. Then central also has scanner, which aggregates the vulnerability", "tokens": [666, 264, 7144, 5777, 13, 1396, 5777, 611, 575, 30211, 11, 597, 16743, 1024, 264, 24210], "temperature": 0.0, "avg_logprob": -0.13854647174323956, "compression_ratio": 1.7661290322580645, "no_speech_prob": 7.543786341557279e-05}, {"id": 110, "seek": 71208, "start": 729.6800000000001, "end": 734.96, "text": " feeds that are fetched from the central. So central basically collect vulnerabilities", "tokens": [23712, 300, 366, 23673, 292, 490, 264, 5777, 13, 407, 5777, 1936, 2500, 37633], "temperature": 0.0, "avg_logprob": -0.13854647174323956, "compression_ratio": 1.7661290322580645, "no_speech_prob": 7.543786341557279e-05}, {"id": 111, "seek": 71208, "start": 735.76, "end": 741.2, "text": " feed from upstream sources as well as NVD database. Then on each and every node,", "tokens": [3154, 490, 33915, 7139, 382, 731, 382, 46512, 35, 8149, 13, 1396, 322, 1184, 293, 633, 9984, 11], "temperature": 0.0, "avg_logprob": -0.13854647174323956, "compression_ratio": 1.7661290322580645, "no_speech_prob": 7.543786341557279e-05}, {"id": 112, "seek": 74120, "start": 741.2, "end": 746.88, "text": " we would have collector agent, which will collect host level data for the container network and", "tokens": [321, 576, 362, 23960, 9461, 11, 597, 486, 2500, 3975, 1496, 1412, 337, 264, 10129, 3209, 293], "temperature": 0.0, "avg_logprob": -0.10802243703819182, "compression_ratio": 1.555084745762712, "no_speech_prob": 9.451185178477317e-05}, {"id": 113, "seek": 74120, "start": 746.88, "end": 756.0, "text": " the runtime. So this is the UI where let's say if I have integrated 100 Kubernetes clusters,", "tokens": [264, 34474, 13, 407, 341, 307, 264, 15682, 689, 718, 311, 584, 498, 286, 362, 10919, 2319, 23145, 23313, 11], "temperature": 0.0, "avg_logprob": -0.10802243703819182, "compression_ratio": 1.555084745762712, "no_speech_prob": 9.451185178477317e-05}, {"id": 114, "seek": 74120, "start": 756.0, "end": 761.6, "text": " then how can I manage or understand how those are behaving? What are the healthy components", "tokens": [550, 577, 393, 286, 3067, 420, 1223, 577, 729, 366, 35263, 30, 708, 366, 264, 4627, 6677], "temperature": 0.0, "avg_logprob": -0.10802243703819182, "compression_ratio": 1.555084745762712, "no_speech_prob": 9.451185178477317e-05}, {"id": 115, "seek": 74120, "start": 761.6, "end": 767.84, "text": " and what are unhealthy? So we can have a quick look to see how systems are performing.", "tokens": [293, 437, 366, 29147, 30, 407, 321, 393, 362, 257, 1702, 574, 281, 536, 577, 3652, 366, 10205, 13], "temperature": 0.0, "avg_logprob": -0.10802243703819182, "compression_ratio": 1.555084745762712, "no_speech_prob": 9.451185178477317e-05}, {"id": 116, "seek": 76784, "start": 767.84, "end": 775.0400000000001, "text": " So what problem segments Stacrox is going to solve? So these are four problem", "tokens": [407, 437, 1154, 19904, 745, 326, 340, 87, 307, 516, 281, 5039, 30, 407, 613, 366, 1451, 1154], "temperature": 0.0, "avg_logprob": -0.26964397056429995, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00019732564396690577}, {"id": 117, "seek": 76784, "start": 775.0400000000001, "end": 779.44, "text": " segments, which I found very common between developers and security teams to understand", "tokens": [19904, 11, 597, 286, 1352, 588, 2689, 1296, 8849, 293, 3825, 5491, 281, 1223], "temperature": 0.0, "avg_logprob": -0.26964397056429995, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00019732564396690577}, {"id": 118, "seek": 76784, "start": 779.44, "end": 785.12, "text": " whether my container contains content-compromising infrastructure, are there any known vulnerabilities,", "tokens": [1968, 452, 10129, 8306, 2701, 12, 1112, 28722, 3436, 6896, 11, 366, 456, 604, 2570, 37633, 11], "temperature": 0.0, "avg_logprob": -0.26964397056429995, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00019732564396690577}, {"id": 119, "seek": 76784, "start": 785.12, "end": 790.5600000000001, "text": " are there any runtime and OS layers, container up-to-date, is my Kubernetes cluster compliant", "tokens": [366, 456, 604, 34474, 293, 12731, 7914, 11, 10129, 493, 12, 1353, 12, 17393, 11, 307, 452, 23145, 13630, 36248], "temperature": 0.0, "avg_logprob": -0.26964397056429995, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00019732564396690577}, {"id": 120, "seek": 76784, "start": 790.5600000000001, "end": 797.76, "text": " with industry-certified security benchmarks? So let's see how Stacrox solved these problems.", "tokens": [365, 3518, 12, 48999, 2587, 3825, 43751, 30, 407, 718, 311, 536, 577, 745, 326, 340, 87, 13041, 613, 2740, 13], "temperature": 0.0, "avg_logprob": -0.26964397056429995, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00019732564396690577}, {"id": 121, "seek": 79776, "start": 797.76, "end": 804.72, "text": " So Stacrox can identify the vulnerabilities in the base image package that are installed by the", "tokens": [407, 745, 326, 340, 87, 393, 5876, 264, 37633, 294, 264, 3096, 3256, 7372, 300, 366, 8899, 538, 264], "temperature": 0.0, "avg_logprob": -0.1407041182884803, "compression_ratio": 1.6403508771929824, "no_speech_prob": 8.56284677865915e-05}, {"id": 122, "seek": 79776, "start": 804.72, "end": 810.16, "text": " package managers, then programming language-specific dependencies, programming runtime and frameworks.", "tokens": [7372, 14084, 11, 550, 9410, 2856, 12, 29258, 36606, 11, 9410, 34474, 293, 29834, 13], "temperature": 0.0, "avg_logprob": -0.1407041182884803, "compression_ratio": 1.6403508771929824, "no_speech_prob": 8.56284677865915e-05}, {"id": 123, "seek": 79776, "start": 810.16, "end": 815.28, "text": " It supports package formats, which I have mentioned there. And I believe most of you", "tokens": [467, 9346, 7372, 25879, 11, 597, 286, 362, 2835, 456, 13, 400, 286, 1697, 881, 295, 291], "temperature": 0.0, "avg_logprob": -0.1407041182884803, "compression_ratio": 1.6403508771929824, "no_speech_prob": 8.56284677865915e-05}, {"id": 124, "seek": 79776, "start": 815.28, "end": 821.68, "text": " work with the same package formats. And there are supported operating systems like Alpine,", "tokens": [589, 365, 264, 912, 7372, 25879, 13, 400, 456, 366, 8104, 7447, 3652, 411, 967, 40412, 11], "temperature": 0.0, "avg_logprob": -0.1407041182884803, "compression_ratio": 1.6403508771929824, "no_speech_prob": 8.56284677865915e-05}, {"id": 125, "seek": 82168, "start": 821.68, "end": 828.56, "text": " Amazon, CentOS, Red Hat, Enterprise Linux. So managing compliance is equally important for", "tokens": [6795, 11, 3408, 4367, 11, 4477, 15867, 11, 26696, 18734, 13, 407, 11642, 15882, 307, 12309, 1021, 337], "temperature": 0.0, "avg_logprob": -0.21737227232559866, "compression_ratio": 1.4898785425101215, "no_speech_prob": 0.00018466862093191594}, {"id": 126, "seek": 82168, "start": 828.56, "end": 834.7199999999999, "text": " our organizations to the security standards. So it supports out-of-the-box compliance standards", "tokens": [527, 6150, 281, 264, 3825, 7787, 13, 407, 309, 9346, 484, 12, 2670, 12, 3322, 12, 4995, 15882, 7787], "temperature": 0.0, "avg_logprob": -0.21737227232559866, "compression_ratio": 1.4898785425101215, "no_speech_prob": 0.00018466862093191594}, {"id": 127, "seek": 82168, "start": 834.7199999999999, "end": 841.68, "text": " like CIS, benchmark for Kubernetes is occur, then HIPAA, NIST, PCI. So you can run scans", "tokens": [411, 383, 2343, 11, 18927, 337, 23145, 307, 5160, 11, 550, 389, 9139, 5265, 11, 426, 19756, 11, 6465, 40, 13, 407, 291, 393, 1190, 35116], "temperature": 0.0, "avg_logprob": -0.21737227232559866, "compression_ratio": 1.4898785425101215, "no_speech_prob": 0.00018466862093191594}, {"id": 128, "seek": 82168, "start": 842.2399999999999, "end": 848.24, "text": " through this profile. So Centel or Stacrox specifically collect snapshots of your Kubernetes", "tokens": [807, 341, 7964, 13, 407, 3408, 338, 420, 745, 326, 340, 87, 4682, 2500, 19206, 27495, 295, 428, 23145], "temperature": 0.0, "avg_logprob": -0.21737227232559866, "compression_ratio": 1.4898785425101215, "no_speech_prob": 0.00018466862093191594}, {"id": 129, "seek": 84824, "start": 848.24, "end": 855.28, "text": " cluster, then it aggregates the data and analyzes what checks are being passed and what checks are", "tokens": [13630, 11, 550, 309, 16743, 1024, 264, 1412, 293, 6459, 12214, 437, 13834, 366, 885, 4678, 293, 437, 13834, 366], "temperature": 0.0, "avg_logprob": -0.16210227542453343, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.0001397006562910974}, {"id": 130, "seek": 84824, "start": 855.28, "end": 862.24, "text": " getting filled. It will help to evaluate for the regulatory compliance. It will help to harden", "tokens": [1242, 6412, 13, 467, 486, 854, 281, 13059, 337, 264, 18260, 15882, 13, 467, 486, 854, 281, 50203], "temperature": 0.0, "avg_logprob": -0.16210227542453343, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.0001397006562910974}, {"id": 131, "seek": 84824, "start": 862.24, "end": 870.08, "text": " your Docker and underlying container runtime. So this is the UI where you can see passing", "tokens": [428, 33772, 293, 14217, 10129, 34474, 13, 407, 341, 307, 264, 15682, 689, 291, 393, 536, 8437], "temperature": 0.0, "avg_logprob": -0.16210227542453343, "compression_ratio": 1.554945054945055, "no_speech_prob": 0.0001397006562910974}, {"id": 132, "seek": 87008, "start": 870.08, "end": 880.48, "text": " percentage across your cluster, across namespaces, across the nodes. So you can have a better idea", "tokens": [9668, 2108, 428, 13630, 11, 2108, 5288, 79, 2116, 11, 2108, 264, 13891, 13, 407, 291, 393, 362, 257, 1101, 1558], "temperature": 0.0, "avg_logprob": -0.11275178061591254, "compression_ratio": 1.6431718061674008, "no_speech_prob": 4.9975686124525964e-05}, {"id": 133, "seek": 87008, "start": 880.48, "end": 885.5200000000001, "text": " where the issue or what compliance checks are filling. Accordingly, you can navigate to that.", "tokens": [689, 264, 2734, 420, 437, 15882, 13834, 366, 10623, 13, 7328, 356, 11, 291, 393, 12350, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.11275178061591254, "compression_ratio": 1.6431718061674008, "no_speech_prob": 4.9975686124525964e-05}, {"id": 134, "seek": 87008, "start": 885.5200000000001, "end": 891.2800000000001, "text": " In the right section, here you will see what controls are filling, what needs to be set.", "tokens": [682, 264, 558, 3541, 11, 510, 291, 486, 536, 437, 9003, 366, 10623, 11, 437, 2203, 281, 312, 992, 13], "temperature": 0.0, "avg_logprob": -0.11275178061591254, "compression_ratio": 1.6431718061674008, "no_speech_prob": 4.9975686124525964e-05}, {"id": 135, "seek": 87008, "start": 891.2800000000001, "end": 896.4000000000001, "text": " For example, here I have taken an example of CNF files, which says that the file permission", "tokens": [1171, 1365, 11, 510, 286, 362, 2726, 364, 1365, 295, 14589, 37, 7098, 11, 597, 1619, 300, 264, 3991, 11226], "temperature": 0.0, "avg_logprob": -0.11275178061591254, "compression_ratio": 1.6431718061674008, "no_speech_prob": 4.9975686124525964e-05}, {"id": 136, "seek": 89640, "start": 896.4, "end": 901.68, "text": " should be more restricted. You can accordingly take the actions and fix that control.", "tokens": [820, 312, 544, 20608, 13, 509, 393, 19717, 747, 264, 5909, 293, 3191, 300, 1969, 13], "temperature": 0.0, "avg_logprob": -0.12078605463475357, "compression_ratio": 1.5991379310344827, "no_speech_prob": 5.497994425240904e-05}, {"id": 137, "seek": 89640, "start": 903.04, "end": 911.84, "text": " So what is Collector? Collector overall helps all the Stacrox ecosystem to maintain and manage the", "tokens": [407, 437, 307, 4586, 20814, 30, 4586, 20814, 4787, 3665, 439, 264, 745, 326, 340, 87, 11311, 281, 6909, 293, 3067, 264], "temperature": 0.0, "avg_logprob": -0.12078605463475357, "compression_ratio": 1.5991379310344827, "no_speech_prob": 5.497994425240904e-05}, {"id": 138, "seek": 89640, "start": 912.56, "end": 918.8, "text": " container runtime activities as well as post-level processes information. So it's an agent that", "tokens": [10129, 34474, 5354, 382, 731, 382, 2183, 12, 12418, 7555, 1589, 13, 407, 309, 311, 364, 9461, 300], "temperature": 0.0, "avg_logprob": -0.12078605463475357, "compression_ratio": 1.5991379310344827, "no_speech_prob": 5.497994425240904e-05}, {"id": 139, "seek": 89640, "start": 918.8, "end": 923.36, "text": " runs on every node, under strict performance limitations and gather data via either kernel", "tokens": [6676, 322, 633, 9984, 11, 833, 10910, 3389, 15705, 293, 5448, 1412, 5766, 2139, 28256], "temperature": 0.0, "avg_logprob": -0.12078605463475357, "compression_ratio": 1.5991379310344827, "no_speech_prob": 5.497994425240904e-05}, {"id": 140, "seek": 92336, "start": 923.36, "end": 930.32, "text": " module or a BPF probes. It collects, it analyzes and monitor content activity on cluster nodes.", "tokens": [10088, 420, 257, 40533, 37, 1239, 279, 13, 467, 39897, 11, 309, 6459, 12214, 293, 6002, 2701, 5191, 322, 13630, 13891, 13], "temperature": 0.0, "avg_logprob": -0.21085083905388327, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.00016006665828172117}, {"id": 141, "seek": 92336, "start": 930.32, "end": 936.48, "text": " It collects information about runtime and network activity and sends collected data to the sensor.", "tokens": [467, 39897, 1589, 466, 34474, 293, 3209, 5191, 293, 14790, 11087, 1412, 281, 264, 10200, 13], "temperature": 0.0, "avg_logprob": -0.21085083905388327, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.00016006665828172117}, {"id": 142, "seek": 92336, "start": 936.48, "end": 941.12, "text": " Sensor then will help central to display all the data over the UI.", "tokens": [318, 23153, 550, 486, 854, 5777, 281, 4674, 439, 264, 1412, 670, 264, 15682, 13], "temperature": 0.0, "avg_logprob": -0.21085083905388327, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.00016006665828172117}, {"id": 143, "seek": 92336, "start": 943.92, "end": 950.32, "text": " Okay, we'll quickly see. This is the traditional way of how we used to see at kernel when we", "tokens": [1033, 11, 321, 603, 2661, 536, 13, 639, 307, 264, 5164, 636, 295, 577, 321, 1143, 281, 536, 412, 28256, 562, 321], "temperature": 0.0, "avg_logprob": -0.21085083905388327, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.00016006665828172117}, {"id": 144, "seek": 95032, "start": 950.32, "end": 956.6400000000001, "text": " when we deployed the application. We have user space where application, user application runs", "tokens": [562, 321, 17826, 264, 3861, 13, 492, 362, 4195, 1901, 689, 3861, 11, 4195, 3861, 6676], "temperature": 0.0, "avg_logprob": -0.15444187164306641, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.082575029926375e-05}, {"id": 145, "seek": 95032, "start": 956.6400000000001, "end": 961.9200000000001, "text": " and for every resource that we need into user application, we need system calls. So", "tokens": [293, 337, 633, 7684, 300, 321, 643, 666, 4195, 3861, 11, 321, 643, 1185, 5498, 13, 407], "temperature": 0.0, "avg_logprob": -0.15444187164306641, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.082575029926375e-05}, {"id": 146, "seek": 95032, "start": 963.2, "end": 968.4000000000001, "text": " then user request any data, the kernel copies that information from kernel space to user space.", "tokens": [550, 4195, 5308, 604, 1412, 11, 264, 28256, 14341, 300, 1589, 490, 28256, 1901, 281, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.15444187164306641, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.082575029926375e-05}, {"id": 147, "seek": 95032, "start": 968.4000000000001, "end": 972.8000000000001, "text": " But due to some limitations, it is not possible for user to access", "tokens": [583, 3462, 281, 512, 15705, 11, 309, 307, 406, 1944, 337, 4195, 281, 2105], "temperature": 0.0, "avg_logprob": -0.15444187164306641, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.082575029926375e-05}, {"id": 148, "seek": 97280, "start": 972.8, "end": 980.9599999999999, "text": " everything that is into the kernel space, right? And this was not a problem when we talk about", "tokens": [1203, 300, 307, 666, 264, 28256, 1901, 11, 558, 30, 400, 341, 390, 406, 257, 1154, 562, 321, 751, 466], "temperature": 0.0, "avg_logprob": -0.128394494573754, "compression_ratio": 1.761467889908257, "no_speech_prob": 3.94207272620406e-05}, {"id": 149, "seek": 97280, "start": 980.9599999999999, "end": 986.56, "text": " a single Linux source, but with container adoption, we know that the number of processes or container", "tokens": [257, 2167, 18734, 4009, 11, 457, 365, 10129, 19215, 11, 321, 458, 300, 264, 1230, 295, 7555, 420, 10129], "temperature": 0.0, "avg_logprob": -0.128394494573754, "compression_ratio": 1.761467889908257, "no_speech_prob": 3.94207272620406e-05}, {"id": 150, "seek": 97280, "start": 986.56, "end": 991.3599999999999, "text": " that may run on a Linux source have increased, the density of container have increased, right?", "tokens": [300, 815, 1190, 322, 257, 18734, 4009, 362, 6505, 11, 264, 10305, 295, 10129, 362, 6505, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.128394494573754, "compression_ratio": 1.761467889908257, "no_speech_prob": 3.94207272620406e-05}, {"id": 151, "seek": 97280, "start": 991.3599999999999, "end": 996.88, "text": " So resource overhead, managing container issues, container runtime issues has become a great", "tokens": [407, 7684, 19922, 11, 11642, 10129, 2663, 11, 10129, 34474, 2663, 575, 1813, 257, 869], "temperature": 0.0, "avg_logprob": -0.128394494573754, "compression_ratio": 1.761467889908257, "no_speech_prob": 3.94207272620406e-05}, {"id": 152, "seek": 99688, "start": 996.88, "end": 1003.2, "text": " challenge. So all these required activities require kernel support that we know. So how,", "tokens": [3430, 13, 407, 439, 613, 4739, 5354, 3651, 28256, 1406, 300, 321, 458, 13, 407, 577, 11], "temperature": 0.0, "avg_logprob": -0.16510095903950353, "compression_ratio": 1.5957446808510638, "no_speech_prob": 4.6573095460189506e-05}, {"id": 153, "seek": 99688, "start": 1003.2, "end": 1008.88, "text": " how do we overcome that? We can use EPPF rules. What is that? It is an extended Berkeley packet", "tokens": [577, 360, 321, 10473, 300, 30, 492, 393, 764, 462, 17755, 37, 4474, 13, 708, 307, 300, 30, 467, 307, 364, 10913, 23684, 20300], "temperature": 0.0, "avg_logprob": -0.16510095903950353, "compression_ratio": 1.5957446808510638, "no_speech_prob": 4.6573095460189506e-05}, {"id": 154, "seek": 99688, "start": 1008.88, "end": 1014.72, "text": " filter, right? It is not just a packet filter. It is more than that. It helps us in networking,", "tokens": [6608, 11, 558, 30, 467, 307, 406, 445, 257, 20300, 6608, 13, 467, 307, 544, 813, 300, 13, 467, 3665, 505, 294, 17985, 11], "temperature": 0.0, "avg_logprob": -0.16510095903950353, "compression_ratio": 1.5957446808510638, "no_speech_prob": 4.6573095460189506e-05}, {"id": 155, "seek": 99688, "start": 1014.72, "end": 1021.84, "text": " tracing, profiling, observability and monitoring and security. I will quickly go ahead because", "tokens": [25262, 11, 1740, 4883, 11, 9951, 2310, 293, 11028, 293, 3825, 13, 286, 486, 2661, 352, 2286, 570], "temperature": 0.0, "avg_logprob": -0.16510095903950353, "compression_ratio": 1.5957446808510638, "no_speech_prob": 4.6573095460189506e-05}, {"id": 156, "seek": 102184, "start": 1021.84, "end": 1029.04, "text": " of time constraint. Then we have network policies. In Kubernetes, we know that by default,", "tokens": [295, 565, 25534, 13, 1396, 321, 362, 3209, 7657, 13, 682, 23145, 11, 321, 458, 300, 538, 7576, 11], "temperature": 0.0, "avg_logprob": -0.13984388518101962, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.00032279701554216444}, {"id": 157, "seek": 102184, "start": 1029.04, "end": 1034.0, "text": " network is, network policies are not there. We need to define our network policies by our own.", "tokens": [3209, 307, 11, 3209, 7657, 366, 406, 456, 13, 492, 643, 281, 6964, 527, 3209, 7657, 538, 527, 1065, 13], "temperature": 0.0, "avg_logprob": -0.13984388518101962, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.00032279701554216444}, {"id": 158, "seek": 102184, "start": 1034.0, "end": 1039.3600000000001, "text": " But considering a production grade environment, it is really difficult to, you know, write", "tokens": [583, 8079, 257, 4265, 7204, 2823, 11, 309, 307, 534, 2252, 281, 11, 291, 458, 11, 2464], "temperature": 0.0, "avg_logprob": -0.13984388518101962, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.00032279701554216444}, {"id": 159, "seek": 102184, "start": 1039.3600000000001, "end": 1045.1200000000001, "text": " each and every network policy ML because sometimes we do not understand what source,", "tokens": [1184, 293, 633, 3209, 3897, 21601, 570, 2171, 321, 360, 406, 1223, 437, 4009, 11], "temperature": 0.0, "avg_logprob": -0.13984388518101962, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.00032279701554216444}, {"id": 160, "seek": 102184, "start": 1046.16, "end": 1050.56, "text": " from what source the traffic is coming. At large scale, it could be a difficult, right?", "tokens": [490, 437, 4009, 264, 6419, 307, 1348, 13, 1711, 2416, 4373, 11, 309, 727, 312, 257, 2252, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13984388518101962, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.00032279701554216444}, {"id": 161, "seek": 105056, "start": 1050.56, "end": 1058.08, "text": " So it provides network graph, network segment, segmentation to understand or to modify baselines", "tokens": [407, 309, 6417, 3209, 4295, 11, 3209, 9469, 11, 9469, 399, 281, 1223, 420, 281, 16927, 987, 9173], "temperature": 0.0, "avg_logprob": -0.20890970927913013, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.00018707413983065635}, {"id": 162, "seek": 105056, "start": 1058.08, "end": 1063.84, "text": " so that we can define, okay, if traffic is coming from this source, then this should be blocked", "tokens": [370, 300, 321, 393, 6964, 11, 1392, 11, 498, 6419, 307, 1348, 490, 341, 4009, 11, 550, 341, 820, 312, 15470], "temperature": 0.0, "avg_logprob": -0.20890970927913013, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.00018707413983065635}, {"id": 163, "seek": 105056, "start": 1063.84, "end": 1067.84, "text": " or network policy should be created accordingly with this baseline.", "tokens": [420, 3209, 3897, 820, 312, 2942, 19717, 365, 341, 20518, 13], "temperature": 0.0, "avg_logprob": -0.20890970927913013, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.00018707413983065635}, {"id": 164, "seek": 105056, "start": 1071.6, "end": 1079.6, "text": " So this provide is, so yeah, we, Cyclox provide a network simulator, network policy simulator", "tokens": [407, 341, 2893, 307, 11, 370, 1338, 11, 321, 11, 10295, 66, 752, 87, 2893, 257, 3209, 32974, 11, 3209, 3897, 32974], "temperature": 0.0, "avg_logprob": -0.20890970927913013, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.00018707413983065635}, {"id": 165, "seek": 107960, "start": 1079.6, "end": 1084.0, "text": " through which you can understand what are the active connection from where the connection is", "tokens": [807, 597, 291, 393, 1223, 437, 366, 264, 4967, 4984, 490, 689, 264, 4984, 307], "temperature": 0.0, "avg_logprob": -0.11783861160278321, "compression_ratio": 1.72992700729927, "no_speech_prob": 9.637911716708913e-05}, {"id": 166, "seek": 107960, "start": 1084.0, "end": 1089.6, "text": " coming, whether it is allowed by the deployment or whether it is anonymous. Accordingly, you can", "tokens": [1348, 11, 1968, 309, 307, 4350, 538, 264, 19317, 420, 1968, 309, 307, 24932, 13, 7328, 356, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.11783861160278321, "compression_ratio": 1.72992700729927, "no_speech_prob": 9.637911716708913e-05}, {"id": 167, "seek": 107960, "start": 1089.6, "end": 1094.6399999999999, "text": " define your baseline and restrict the traffic. It will help us to create the network policies at", "tokens": [6964, 428, 20518, 293, 7694, 264, 6419, 13, 467, 486, 854, 505, 281, 1884, 264, 3209, 7657, 412], "temperature": 0.0, "avg_logprob": -0.11783861160278321, "compression_ratio": 1.72992700729927, "no_speech_prob": 9.637911716708913e-05}, {"id": 168, "seek": 107960, "start": 1094.6399999999999, "end": 1099.6799999999998, "text": " the runtime. So we can just copy that network policy and configure it in our Kubernetes lecture.", "tokens": [264, 34474, 13, 407, 321, 393, 445, 5055, 300, 3209, 3897, 293, 22162, 309, 294, 527, 23145, 7991, 13], "temperature": 0.0, "avg_logprob": -0.11783861160278321, "compression_ratio": 1.72992700729927, "no_speech_prob": 9.637911716708913e-05}, {"id": 169, "seek": 107960, "start": 1102.8, "end": 1107.9199999999998, "text": " Then we have admission controllers. So it basically helps control, to enforce the security", "tokens": [1396, 321, 362, 24668, 26903, 13, 407, 309, 1936, 3665, 1969, 11, 281, 24825, 264, 3825], "temperature": 0.0, "avg_logprob": -0.11783861160278321, "compression_ratio": 1.72992700729927, "no_speech_prob": 9.637911716708913e-05}, {"id": 170, "seek": 110792, "start": 1107.92, "end": 1114.64, "text": " policies before Kubernetes creates workload. For example, deployment, demo sets, it intercepts", "tokens": [7657, 949, 23145, 7829, 20139, 13, 1171, 1365, 11, 19317, 11, 10723, 6352, 11, 309, 24700, 82], "temperature": 0.0, "avg_logprob": -0.12248120625813802, "compression_ratio": 1.530701754385965, "no_speech_prob": 0.00019038663594983518}, {"id": 171, "seek": 110792, "start": 1114.64, "end": 1120.88, "text": " the API request when any program runs or application runs into the pod. So in Cyclox,", "tokens": [264, 9362, 5308, 562, 604, 1461, 6676, 420, 3861, 6676, 666, 264, 2497, 13, 407, 294, 10295, 66, 752, 87, 11], "temperature": 0.0, "avg_logprob": -0.12248120625813802, "compression_ratio": 1.530701754385965, "no_speech_prob": 0.00019038663594983518}, {"id": 172, "seek": 110792, "start": 1120.88, "end": 1125.92, "text": " we use admission controller with security policies so that any policy gets violated,", "tokens": [321, 764, 24668, 10561, 365, 3825, 7657, 370, 300, 604, 3897, 2170, 33239, 11], "temperature": 0.0, "avg_logprob": -0.12248120625813802, "compression_ratio": 1.530701754385965, "no_speech_prob": 0.00019038663594983518}, {"id": 173, "seek": 110792, "start": 1125.92, "end": 1130.48, "text": " then it will immediately prevent the deployment from getting into running straight.", "tokens": [550, 309, 486, 4258, 4871, 264, 19317, 490, 1242, 666, 2614, 2997, 13], "temperature": 0.0, "avg_logprob": -0.12248120625813802, "compression_ratio": 1.530701754385965, "no_speech_prob": 0.00019038663594983518}, {"id": 174, "seek": 113048, "start": 1130.48, "end": 1140.8, "text": " Okay, so I will quickly show a demo where I have given an example of log forces,", "tokens": [1033, 11, 370, 286, 486, 2661, 855, 257, 10723, 689, 286, 362, 2212, 364, 1365, 295, 3565, 5874, 11], "temperature": 0.0, "avg_logprob": -0.31168091815450916, "compression_ratio": 1.0256410256410255, "no_speech_prob": 0.0003817812539637089}, {"id": 175, "seek": 114080, "start": 1140.8, "end": 1161.12, "text": " forces CV and to understand how it can prevent the deployment. Just let me show it quickly.", "tokens": [5874, 22995, 293, 281, 1223, 577, 309, 393, 4871, 264, 19317, 13, 1449, 718, 385, 855, 309, 2661, 13], "temperature": 0.0, "avg_logprob": -0.32547459395035455, "compression_ratio": 1.0833333333333333, "no_speech_prob": 0.00025627066497690976}, {"id": 176, "seek": 116112, "start": 1161.12, "end": 1172.1599999999999, "text": " I hope screen is visible, yeah. So this is the cluster dashboard,", "tokens": [286, 1454, 2568, 307, 8974, 11, 1338, 13, 407, 341, 307, 264, 13630, 18342, 11], "temperature": 0.0, "avg_logprob": -0.1932375192642212, "compression_ratio": 1.3109243697478992, "no_speech_prob": 0.00021258241031318903}, {"id": 177, "seek": 116112, "start": 1178.8, "end": 1183.9199999999998, "text": " where I can see images at the most risk, what are the policies, current policies violated.", "tokens": [689, 286, 393, 536, 5267, 412, 264, 881, 3148, 11, 437, 366, 264, 7657, 11, 2190, 7657, 33239, 13], "temperature": 0.0, "avg_logprob": -0.1932375192642212, "compression_ratio": 1.3109243697478992, "no_speech_prob": 0.00021258241031318903}, {"id": 178, "seek": 118392, "start": 1183.92, "end": 1193.2, "text": " So Cyclox provides some default policies as per the best practices pertaining to the security", "tokens": [407, 10295, 66, 752, 87, 6417, 512, 7576, 7657, 382, 680, 264, 1151, 7525, 49582, 281, 264, 3825], "temperature": 0.0, "avg_logprob": -0.11823877068453056, "compression_ratio": 1.6952380952380952, "no_speech_prob": 5.884592610527761e-05}, {"id": 179, "seek": 118392, "start": 1193.2, "end": 1199.04, "text": " posture. So considering the criticality of the log forces, we have included this policy as well.", "tokens": [18502, 13, 407, 8079, 264, 4924, 507, 295, 264, 3565, 5874, 11, 321, 362, 5556, 341, 3897, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.11823877068453056, "compression_ratio": 1.6952380952380952, "no_speech_prob": 5.884592610527761e-05}, {"id": 180, "seek": 118392, "start": 1201.6000000000001, "end": 1205.92, "text": " So you can configure policies into two modes, inform as well as enforce.", "tokens": [407, 291, 393, 22162, 7657, 666, 732, 14068, 11, 1356, 382, 731, 382, 24825, 13], "temperature": 0.0, "avg_logprob": -0.11823877068453056, "compression_ratio": 1.6952380952380952, "no_speech_prob": 5.884592610527761e-05}, {"id": 181, "seek": 118392, "start": 1205.92, "end": 1213.28, "text": " So currently, if I look at this policy, it is into inform mode only. So I have edited it and", "tokens": [407, 4362, 11, 498, 286, 574, 412, 341, 3897, 11, 309, 307, 666, 1356, 4391, 787, 13, 407, 286, 362, 23016, 309, 293], "temperature": 0.0, "avg_logprob": -0.11823877068453056, "compression_ratio": 1.6952380952380952, "no_speech_prob": 5.884592610527761e-05}, {"id": 182, "seek": 121328, "start": 1213.28, "end": 1221.6, "text": " make it enforced.", "tokens": [652, 309, 40953, 13], "temperature": 0.0, "avg_logprob": -0.30011479750923487, "compression_ratio": 1.0140845070422535, "no_speech_prob": 0.0012320132227614522}, {"id": 183, "seek": 121328, "start": 1233.84, "end": 1237.04, "text": " Yeah, so it executes on build stage, deployment stage.", "tokens": [865, 11, 370, 309, 4454, 1819, 322, 1322, 3233, 11, 19317, 3233, 13], "temperature": 0.0, "avg_logprob": -0.30011479750923487, "compression_ratio": 1.0140845070422535, "no_speech_prob": 0.0012320132227614522}, {"id": 184, "seek": 123704, "start": 1237.04, "end": 1244.0, "text": " I marked inform and enforce and enable it for the deployment phase.", "tokens": [286, 12658, 1356, 293, 24825, 293, 9528, 309, 337, 264, 19317, 5574, 13], "temperature": 0.0, "avg_logprob": -0.16451970880681818, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.00012775673530995846}, {"id": 185, "seek": 123704, "start": 1245.68, "end": 1250.6399999999999, "text": " Right, so once the policy created, it will show whether any existing deployments are", "tokens": [1779, 11, 370, 1564, 264, 3897, 2942, 11, 309, 486, 855, 1968, 604, 6741, 7274, 1117, 366], "temperature": 0.0, "avg_logprob": -0.16451970880681818, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.00012775673530995846}, {"id": 186, "seek": 123704, "start": 1251.44, "end": 1258.24, "text": " violating this policy or not. Then for the demonstration purpose, I have run a vulnerable", "tokens": [42201, 341, 3897, 420, 406, 13, 1396, 337, 264, 16520, 4334, 11, 286, 362, 1190, 257, 10955], "temperature": 0.0, "avg_logprob": -0.16451970880681818, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.00012775673530995846}, {"id": 187, "seek": 125824, "start": 1258.24, "end": 1268.56, "text": " deployment which has this log forces CVT. So this container image has the vulnerable app.", "tokens": [19317, 597, 575, 341, 3565, 5874, 22995, 51, 13, 407, 341, 10129, 3256, 575, 264, 10955, 724, 13], "temperature": 0.0, "avg_logprob": -0.17872679233551025, "compression_ratio": 1.3461538461538463, "no_speech_prob": 9.920863521983847e-05}, {"id": 188, "seek": 125824, "start": 1273.84, "end": 1281.36, "text": " So in the parallel terminal, I have keep a watch to trace the events in the run time.", "tokens": [407, 294, 264, 8952, 14709, 11, 286, 362, 1066, 257, 1159, 281, 13508, 264, 3931, 294, 264, 1190, 565, 13], "temperature": 0.0, "avg_logprob": -0.17872679233551025, "compression_ratio": 1.3461538461538463, "no_speech_prob": 9.920863521983847e-05}, {"id": 189, "seek": 128136, "start": 1281.36, "end": 1292.56, "text": " So as soon as I create this deployment, you will see that the parts are getting terminated", "tokens": [407, 382, 2321, 382, 286, 1884, 341, 19317, 11, 291, 486, 536, 300, 264, 3166, 366, 1242, 1433, 5410], "temperature": 0.0, "avg_logprob": -0.13496249516805012, "compression_ratio": 1.6486486486486487, "no_speech_prob": 6.705532723572105e-05}, {"id": 190, "seek": 128136, "start": 1293.36, "end": 1298.0, "text": " because of the policy violation. So it won't allow the part to get into a running state", "tokens": [570, 295, 264, 3897, 22840, 13, 407, 309, 1582, 380, 2089, 264, 644, 281, 483, 666, 257, 2614, 1785], "temperature": 0.0, "avg_logprob": -0.13496249516805012, "compression_ratio": 1.6486486486486487, "no_speech_prob": 6.705532723572105e-05}, {"id": 191, "seek": 128136, "start": 1298.0, "end": 1305.04, "text": " because of policy violation. And in the events, you will see that", "tokens": [570, 295, 3897, 22840, 13, 400, 294, 264, 3931, 11, 291, 486, 536, 300], "temperature": 0.0, "avg_logprob": -0.13496249516805012, "compression_ratio": 1.6486486486486487, "no_speech_prob": 6.705532723572105e-05}, {"id": 192, "seek": 130504, "start": 1305.04, "end": 1310.6399999999999, "text": " stack rock enforcement has been detected and the deployment has been scaled to zero.", "tokens": [8630, 3727, 11475, 575, 668, 21896, 293, 264, 19317, 575, 668, 36039, 281, 4018, 13], "temperature": 0.0, "avg_logprob": -0.20555945100455447, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.00011918350355699658}, {"id": 193, "seek": 130504, "start": 1318.3999999999999, "end": 1325.44, "text": " Okay, time is up. I have one more demo, quick demo. If you would like to see, let me know.", "tokens": [1033, 11, 565, 307, 493, 13, 286, 362, 472, 544, 10723, 11, 1702, 10723, 13, 759, 291, 576, 411, 281, 536, 11, 718, 385, 458, 13], "temperature": 0.0, "avg_logprob": -0.20555945100455447, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.00011918350355699658}, {"id": 194, "seek": 132544, "start": 1325.44, "end": 1338.4, "text": " Quick demo, yeah, that would be interesting. So in this demo, I have explained how we can", "tokens": [12101, 10723, 11, 1338, 11, 300, 576, 312, 1880, 13, 407, 294, 341, 10723, 11, 286, 362, 8825, 577, 321, 393], "temperature": 0.0, "avg_logprob": -0.21895848459272244, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.00011679480667226017}, {"id": 195, "seek": 132544, "start": 1338.4, "end": 1344.0, "text": " leverage the DevSecOps approach to shift the security. For that, I have used Tekton in the", "tokens": [13982, 264, 9096, 29511, 36179, 3109, 281, 5513, 264, 3825, 13, 1171, 300, 11, 286, 362, 1143, 27821, 1756, 294, 264], "temperature": 0.0, "avg_logprob": -0.21895848459272244, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.00011679480667226017}, {"id": 196, "seek": 132544, "start": 1344.72, "end": 1349.3600000000001, "text": " pipeline operator, which is deployed in an open shift. So this operator is nothing but", "tokens": [15517, 12973, 11, 597, 307, 17826, 294, 364, 1269, 5513, 13, 407, 341, 12973, 307, 1825, 457], "temperature": 0.0, "avg_logprob": -0.21895848459272244, "compression_ratio": 1.4916201117318435, "no_speech_prob": 0.00011679480667226017}, {"id": 197, "seek": 134936, "start": 1349.36, "end": 1358.0, "text": " using Tekton framework under the hood. Let's see it quickly. So it provides a standard CICD", "tokens": [1228, 27821, 1756, 8388, 833, 264, 13376, 13, 961, 311, 536, 309, 2661, 13, 407, 309, 6417, 257, 3832, 383, 2532, 35], "temperature": 0.0, "avg_logprob": -0.1476482033729553, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.00012197535397717729}, {"id": 198, "seek": 134936, "start": 1358.0, "end": 1364.0, "text": " pipeline definition in a declarative approach. So we can define the task as well as pipeline,", "tokens": [15517, 7123, 294, 257, 16694, 1166, 3109, 13, 407, 321, 393, 6964, 264, 5633, 382, 731, 382, 15517, 11], "temperature": 0.0, "avg_logprob": -0.1476482033729553, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.00012197535397717729}, {"id": 199, "seek": 134936, "start": 1364.0, "end": 1368.0, "text": " which further than can be portable across all your Kubernetes infrastructure.", "tokens": [597, 3052, 813, 393, 312, 21800, 2108, 439, 428, 23145, 6896, 13], "temperature": 0.0, "avg_logprob": -0.1476482033729553, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.00012197535397717729}, {"id": 200, "seek": 134936, "start": 1370.0, "end": 1375.6799999999998, "text": " So I have defined these three tasks where images, image will be checked and scanned.", "tokens": [407, 286, 362, 7642, 613, 1045, 9608, 689, 5267, 11, 3256, 486, 312, 10033, 293, 45089, 13], "temperature": 0.0, "avg_logprob": -0.1476482033729553, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.00012197535397717729}, {"id": 201, "seek": 137568, "start": 1375.68, "end": 1381.44, "text": " And in the task, it's in the background, it is calling a stack rocks API through rock CTL.", "tokens": [400, 294, 264, 5633, 11, 309, 311, 294, 264, 3678, 11, 309, 307, 5141, 257, 8630, 10989, 9362, 807, 3727, 19529, 43, 13], "temperature": 0.0, "avg_logprob": -0.1924258550008138, "compression_ratio": 1.7169811320754718, "no_speech_prob": 2.573348865553271e-05}, {"id": 202, "seek": 137568, "start": 1382.24, "end": 1390.4, "text": " It's same as keep CTL. It talks with the stack rocks API and performs the scanning for the image.", "tokens": [467, 311, 912, 382, 1066, 19529, 43, 13, 467, 6686, 365, 264, 8630, 10989, 9362, 293, 26213, 264, 27019, 337, 264, 3256, 13], "temperature": 0.0, "avg_logprob": -0.1924258550008138, "compression_ratio": 1.7169811320754718, "no_speech_prob": 2.573348865553271e-05}, {"id": 203, "seek": 137568, "start": 1395.3600000000001, "end": 1399.2, "text": " So these two tasks I have mentioned in the pipeline definition, image check and image scan.", "tokens": [407, 613, 732, 9608, 286, 362, 2835, 294, 264, 15517, 7123, 11, 3256, 1520, 293, 3256, 11049, 13], "temperature": 0.0, "avg_logprob": -0.1924258550008138, "compression_ratio": 1.7169811320754718, "no_speech_prob": 2.573348865553271e-05}, {"id": 204, "seek": 137568, "start": 1400.0, "end": 1404.72, "text": " And there is one more secret where I have provided stack rocks API endpoint and the", "tokens": [400, 456, 307, 472, 544, 4054, 689, 286, 362, 5649, 8630, 10989, 9362, 35795, 293, 264], "temperature": 0.0, "avg_logprob": -0.1924258550008138, "compression_ratio": 1.7169811320754718, "no_speech_prob": 2.573348865553271e-05}, {"id": 205, "seek": 140472, "start": 1404.72, "end": 1414.56, "text": " credentials. So we'll create a name space called pipeline demo.", "tokens": [27404, 13, 407, 321, 603, 1884, 257, 1315, 1901, 1219, 15517, 10723, 13], "temperature": 0.0, "avg_logprob": -0.2533764009890349, "compression_ratio": 1.3623188405797102, "no_speech_prob": 8.579259156249464e-05}, {"id": 206, "seek": 140472, "start": 1419.44, "end": 1424.56, "text": " Then I have created secret as well as the pipeline definition. Next, we will", "tokens": [1396, 286, 362, 2942, 4054, 382, 731, 382, 264, 15517, 7123, 13, 3087, 11, 321, 486], "temperature": 0.0, "avg_logprob": -0.2533764009890349, "compression_ratio": 1.3623188405797102, "no_speech_prob": 8.579259156249464e-05}, {"id": 207, "seek": 140472, "start": 1426.24, "end": 1430.48, "text": " execute those tasks. We should develop more and", "tokens": [14483, 729, 9608, 13, 492, 820, 1499, 544, 293], "temperature": 0.0, "avg_logprob": -0.2533764009890349, "compression_ratio": 1.3623188405797102, "no_speech_prob": 8.579259156249464e-05}, {"id": 208, "seek": 143048, "start": 1430.48, "end": 1441.3600000000001, "text": " see that pipeline has been defined. So these two tasks are there. Pipeline run is not initiated", "tokens": [536, 300, 15517, 575, 668, 7642, 13, 407, 613, 732, 9608, 366, 456, 13, 35396, 5440, 1190, 307, 406, 28578], "temperature": 0.0, "avg_logprob": -0.15369837049027563, "compression_ratio": 1.518918918918919, "no_speech_prob": 9.70179244177416e-05}, {"id": 209, "seek": 143048, "start": 1441.3600000000001, "end": 1447.2, "text": " yet. So we'll initiate the pipeline run. We'll pass the container image that we want to scan.", "tokens": [1939, 13, 407, 321, 603, 31574, 264, 15517, 1190, 13, 492, 603, 1320, 264, 10129, 3256, 300, 321, 528, 281, 11049, 13], "temperature": 0.0, "avg_logprob": -0.15369837049027563, "compression_ratio": 1.518918918918919, "no_speech_prob": 9.70179244177416e-05}, {"id": 210, "seek": 143048, "start": 1447.2, "end": 1457.04, "text": " For example, here I have provided MySQL 80. So pipeline has been created. You can check the", "tokens": [1171, 1365, 11, 510, 286, 362, 5649, 1222, 39934, 4688, 13, 407, 15517, 575, 668, 2942, 13, 509, 393, 1520, 264], "temperature": 0.0, "avg_logprob": -0.15369837049027563, "compression_ratio": 1.518918918918919, "no_speech_prob": 9.70179244177416e-05}, {"id": 211, "seek": 145704, "start": 1457.04, "end": 1467.28, "text": " logs, real-time logs through Tecton. It's a client for Tecton through which you can perform the", "tokens": [20820, 11, 957, 12, 3766, 20820, 807, 314, 557, 266, 13, 467, 311, 257, 6423, 337, 314, 557, 266, 807, 597, 291, 393, 2042, 264], "temperature": 0.0, "avg_logprob": -0.12925819555918375, "compression_ratio": 1.5260416666666667, "no_speech_prob": 4.585313217830844e-05}, {"id": 212, "seek": 145704, "start": 1467.28, "end": 1477.76, "text": " operations. So it also gives you better visibility if in case your tasks are failing. For example,", "tokens": [7705, 13, 407, 309, 611, 2709, 291, 1101, 19883, 498, 294, 1389, 428, 9608, 366, 18223, 13, 1171, 1365, 11], "temperature": 0.0, "avg_logprob": -0.12925819555918375, "compression_ratio": 1.5260416666666667, "no_speech_prob": 4.585313217830844e-05}, {"id": 213, "seek": 147776, "start": 1477.76, "end": 1487.28, "text": " here my credentials were expired. So I had to refresh the credentials and then I ran the pipeline.", "tokens": [510, 452, 27404, 645, 36587, 13, 407, 286, 632, 281, 15134, 264, 27404, 293, 550, 286, 5872, 264, 15517, 13], "temperature": 0.0, "avg_logprob": -0.1695951428906671, "compression_ratio": 1.587837837837838, "no_speech_prob": 9.495408448856324e-05}, {"id": 214, "seek": 147776, "start": 1489.2, "end": 1491.76, "text": " Now we will see the pipeline gets into running set.", "tokens": [823, 321, 486, 536, 264, 15517, 2170, 666, 2614, 992, 13], "temperature": 0.0, "avg_logprob": -0.1695951428906671, "compression_ratio": 1.587837837837838, "no_speech_prob": 9.495408448856324e-05}, {"id": 215, "seek": 147776, "start": 1494.4, "end": 1501.6, "text": " The tasks has been passed. Now we will see all the CVs that are associated with this", "tokens": [440, 9608, 575, 668, 4678, 13, 823, 321, 486, 536, 439, 264, 22995, 82, 300, 366, 6615, 365, 341], "temperature": 0.0, "avg_logprob": -0.1695951428906671, "compression_ratio": 1.587837837837838, "no_speech_prob": 9.495408448856324e-05}, {"id": 216, "seek": 150160, "start": 1501.6, "end": 1508.1599999999999, "text": " particular container images. You can get each and every CV ID, its CVS score, and you can", "tokens": [1729, 10129, 5267, 13, 509, 393, 483, 1184, 293, 633, 22995, 7348, 11, 1080, 22995, 50, 6175, 11, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.18945754369099935, "compression_ratio": 1.5561797752808988, "no_speech_prob": 0.0002856483624782413}, {"id": 217, "seek": 150160, "start": 1508.1599999999999, "end": 1516.24, "text": " accordingly share those security admin. You can also check policy violation through image check", "tokens": [19717, 2073, 729, 3825, 24236, 13, 509, 393, 611, 1520, 3897, 22840, 807, 3256, 1520], "temperature": 0.0, "avg_logprob": -0.18945754369099935, "compression_ratio": 1.5561797752808988, "no_speech_prob": 0.0002856483624782413}, {"id": 218, "seek": 150160, "start": 1516.24, "end": 1524.0, "text": " tasks to understand what policies have been violated, what are their ratings, whether those", "tokens": [9608, 281, 1223, 437, 7657, 362, 668, 33239, 11, 437, 366, 641, 24603, 11, 1968, 729], "temperature": 0.0, "avg_logprob": -0.18945754369099935, "compression_ratio": 1.5561797752808988, "no_speech_prob": 0.0002856483624782413}, {"id": 219, "seek": 152400, "start": 1524.0, "end": 1547.04, "text": " are rated as low or moderate or risky. That is it. So I have put some handful resources", "tokens": [366, 22103, 382, 2295, 420, 18174, 420, 21137, 13, 663, 307, 309, 13, 407, 286, 362, 829, 512, 16458, 3593], "temperature": 0.0, "avg_logprob": -0.21336733776590097, "compression_ratio": 1.3111111111111111, "no_speech_prob": 8.561864524381235e-05}, {"id": 220, "seek": 152400, "start": 1547.04, "end": 1552.64, "text": " for you to go ahead and get started with the StackFox community project. You can also hop", "tokens": [337, 291, 281, 352, 2286, 293, 483, 1409, 365, 264, 37649, 37, 5230, 1768, 1716, 13, 509, 393, 611, 3818], "temperature": 0.0, "avg_logprob": -0.21336733776590097, "compression_ratio": 1.3111111111111111, "no_speech_prob": 8.561864524381235e-05}, {"id": 221, "seek": 155264, "start": 1552.64, "end": 1559.68, "text": " into our Slack channel and that is it from my side. So do we have some questions here?", "tokens": [666, 527, 37211, 2269, 293, 300, 307, 309, 490, 452, 1252, 13, 407, 360, 321, 362, 512, 1651, 510, 30], "temperature": 0.0, "avg_logprob": -0.17735503149814294, "compression_ratio": 1.4712041884816753, "no_speech_prob": 0.00047508516581729054}, {"id": 222, "seek": 155264, "start": 1568.96, "end": 1573.6000000000001, "text": " Thanks for the excellent presentation. I have one question regarding you mentioned a lot about", "tokens": [2561, 337, 264, 7103, 5860, 13, 286, 362, 472, 1168, 8595, 291, 2835, 257, 688, 466], "temperature": 0.0, "avg_logprob": -0.17735503149814294, "compression_ratio": 1.4712041884816753, "no_speech_prob": 0.00047508516581729054}, {"id": 223, "seek": 155264, "start": 1573.6000000000001, "end": 1579.0400000000002, "text": " the agent which is kind of scanning and detecting the vulnerabilities. You briefly touched upon the", "tokens": [264, 9461, 597, 307, 733, 295, 27019, 293, 40237, 264, 37633, 13, 509, 10515, 9828, 3564, 264], "temperature": 0.0, "avg_logprob": -0.17735503149814294, "compression_ratio": 1.4712041884816753, "no_speech_prob": 0.00047508516581729054}, {"id": 224, "seek": 157904, "start": 1579.04, "end": 1587.04, "text": " object central, which I think if I understand correctly you are pushing that detection of", "tokens": [2657, 5777, 11, 597, 286, 519, 498, 286, 1223, 8944, 291, 366, 7380, 300, 17784, 295], "temperature": 0.0, "avg_logprob": -0.20870819091796874, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0004771031381096691}, {"id": 225, "seek": 157904, "start": 1587.04, "end": 1594.72, "text": " vulnerabilities into the central. Is that right? Yes. So central fetches the vulnerability", "tokens": [37633, 666, 264, 5777, 13, 1119, 300, 558, 30, 1079, 13, 407, 5777, 15136, 3781, 264, 24210], "temperature": 0.0, "avg_logprob": -0.20870819091796874, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0004771031381096691}, {"id": 226, "seek": 157904, "start": 1594.72, "end": 1600.1599999999999, "text": " feeds from the upstream sources or let's say you have NVD database. So every five minutes it will", "tokens": [23712, 490, 264, 33915, 7139, 420, 718, 311, 584, 291, 362, 46512, 35, 8149, 13, 407, 633, 1732, 2077, 309, 486], "temperature": 0.0, "avg_logprob": -0.20870819091796874, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0004771031381096691}, {"id": 227, "seek": 157904, "start": 1600.1599999999999, "end": 1606.8, "text": " keep on checking what vulnerability are present in the upstream. So accordingly once you download", "tokens": [1066, 322, 8568, 437, 24210, 366, 1974, 294, 264, 33915, 13, 407, 19717, 1564, 291, 5484], "temperature": 0.0, "avg_logprob": -0.20870819091796874, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0004771031381096691}, {"id": 228, "seek": 160680, "start": 1606.8, "end": 1612.56, "text": " then the collector or the sensor fetches those data into your respective Kubernetes cluster.", "tokens": [550, 264, 23960, 420, 264, 10200, 15136, 3781, 729, 1412, 666, 428, 23649, 23145, 13630, 13], "temperature": 0.0, "avg_logprob": -0.12233720681606194, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.0009890309302136302}, {"id": 229, "seek": 160680, "start": 1613.76, "end": 1621.28, "text": " So what if when the container is running, the pod is running and suddenly the agent checks the", "tokens": [407, 437, 498, 562, 264, 10129, 307, 2614, 11, 264, 2497, 307, 2614, 293, 5800, 264, 9461, 13834, 264], "temperature": 0.0, "avg_logprob": -0.12233720681606194, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.0009890309302136302}, {"id": 230, "seek": 160680, "start": 1621.28, "end": 1628.1599999999999, "text": " vulnerability database and detects possibly that the version running in the pod has having some", "tokens": [24210, 8149, 293, 5531, 82, 6264, 300, 264, 3037, 2614, 294, 264, 2497, 575, 1419, 512], "temperature": 0.0, "avg_logprob": -0.12233720681606194, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.0009890309302136302}, {"id": 231, "seek": 160680, "start": 1628.1599999999999, "end": 1634.72, "text": " critical vulnerability. What actions would it do actually? It actually depends on us what actions", "tokens": [4924, 24210, 13, 708, 5909, 576, 309, 360, 767, 30, 467, 767, 5946, 322, 505, 437, 5909], "temperature": 0.0, "avg_logprob": -0.12233720681606194, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.0009890309302136302}, {"id": 232, "seek": 163472, "start": 1634.72, "end": 1640.96, "text": " we want the admission controller to perform. Either we can have it in inform mode so that we", "tokens": [321, 528, 264, 24668, 10561, 281, 2042, 13, 13746, 321, 393, 362, 309, 294, 1356, 4391, 370, 300, 321], "temperature": 0.0, "avg_logprob": -0.11415337380908784, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00014412938617169857}, {"id": 233, "seek": 163472, "start": 1640.96, "end": 1646.96, "text": " understand okay policy is violated but that whether that is really affecting my workload or the", "tokens": [1223, 1392, 3897, 307, 33239, 457, 300, 1968, 300, 307, 534, 17476, 452, 20139, 420, 264], "temperature": 0.0, "avg_logprob": -0.11415337380908784, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00014412938617169857}, {"id": 234, "seek": 163472, "start": 1646.96, "end": 1652.96, "text": " runtime accordingly we can take actions. If you want strictly not to allow any deployment to run", "tokens": [34474, 19717, 321, 393, 747, 5909, 13, 759, 291, 528, 20792, 406, 281, 2089, 604, 19317, 281, 1190], "temperature": 0.0, "avg_logprob": -0.11415337380908784, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00014412938617169857}, {"id": 235, "seek": 163472, "start": 1652.96, "end": 1659.6000000000001, "text": " as soon as the policy is violated we can put it into enforced mode and we can decide at what stage", "tokens": [382, 2321, 382, 264, 3897, 307, 33239, 321, 393, 829, 309, 666, 40953, 4391, 293, 321, 393, 4536, 412, 437, 3233], "temperature": 0.0, "avg_logprob": -0.11415337380908784, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00014412938617169857}, {"id": 236, "seek": 165960, "start": 1659.6, "end": 1664.6399999999999, "text": " we want to terminate that at the build stage, deploy stage. It's basically based on your policy.", "tokens": [321, 528, 281, 10761, 473, 300, 412, 264, 1322, 3233, 11, 7274, 3233, 13, 467, 311, 1936, 2361, 322, 428, 3897, 13], "temperature": 0.0, "avg_logprob": -0.18521699038418857, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.00024407648015767336}, {"id": 237, "seek": 165960, "start": 1666.32, "end": 1673.52, "text": " And the central is kind of accessible by is it like a closed environment or it is open where", "tokens": [400, 264, 5777, 307, 733, 295, 9515, 538, 307, 309, 411, 257, 5395, 2823, 420, 309, 307, 1269, 689], "temperature": 0.0, "avg_logprob": -0.18521699038418857, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.00024407648015767336}, {"id": 238, "seek": 165960, "start": 1674.1599999999999, "end": 1680.1599999999999, "text": " anywhere anyone can access that. Any containers running in any cloud can access that. It can be", "tokens": [4992, 2878, 393, 2105, 300, 13, 2639, 17089, 2614, 294, 604, 4588, 393, 2105, 300, 13, 467, 393, 312], "temperature": 0.0, "avg_logprob": -0.18521699038418857, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.00024407648015767336}, {"id": 239, "seek": 165960, "start": 1680.1599999999999, "end": 1684.7199999999998, "text": " configured in online mode as well as air gap environment. So again it depends on your case", "tokens": [30538, 294, 2950, 4391, 382, 731, 382, 1988, 7417, 2823, 13, 407, 797, 309, 5946, 322, 428, 1389], "temperature": 0.0, "avg_logprob": -0.18521699038418857, "compression_ratio": 1.6711111111111112, "no_speech_prob": 0.00024407648015767336}, {"id": 240, "seek": 168472, "start": 1684.72, "end": 1690.08, "text": " or your organizational requirements how you want to install it. In terms of offline mode you can", "tokens": [420, 428, 24730, 7728, 577, 291, 528, 281, 3625, 309, 13, 682, 2115, 295, 21857, 4391, 291, 393], "temperature": 0.0, "avg_logprob": -0.19576410500400038, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.00019970868015661836}, {"id": 241, "seek": 168472, "start": 1690.08, "end": 1697.28, "text": " always download those vulnerability feeds or kernel probes modules in your secure host and", "tokens": [1009, 5484, 729, 24210, 23712, 420, 28256, 1239, 279, 16679, 294, 428, 7144, 3975, 293], "temperature": 0.0, "avg_logprob": -0.19576410500400038, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.00019970868015661836}, {"id": 242, "seek": 168472, "start": 1697.28, "end": 1703.1200000000001, "text": " then you can inject those to center offline way. Okay. That option is also there. Thank you.", "tokens": [550, 291, 393, 10711, 729, 281, 3056, 21857, 636, 13, 1033, 13, 663, 3614, 307, 611, 456, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.19576410500400038, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.00019970868015661836}, {"id": 243, "seek": 168472, "start": 1705.44, "end": 1714.24, "text": " Any other questions? Yes. I just have a question. Can you use stack rocks as a", "tokens": [2639, 661, 1651, 30, 1079, 13, 286, 445, 362, 257, 1168, 13, 1664, 291, 764, 8630, 10989, 382, 257], "temperature": 0.0, "avg_logprob": -0.19576410500400038, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.00019970868015661836}, {"id": 244, "seek": 171424, "start": 1714.24, "end": 1722.24, "text": " honeypot? I mean can you just let the intruder or the security thing to go to actually get a", "tokens": [8330, 17698, 30, 286, 914, 393, 291, 445, 718, 264, 17467, 28230, 420, 264, 3825, 551, 281, 352, 281, 767, 483, 257], "temperature": 0.0, "avg_logprob": -0.2295978546142578, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.00016674962535034865}, {"id": 245, "seek": 171424, "start": 1725.28, "end": 1733.44, "text": " like a description of all the things it's doing. The attacker instead. So let's say you not just", "tokens": [411, 257, 3855, 295, 439, 264, 721, 309, 311, 884, 13, 440, 35871, 2602, 13, 407, 718, 311, 584, 291, 406, 445], "temperature": 0.0, "avg_logprob": -0.2295978546142578, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.00016674962535034865}, {"id": 246, "seek": 171424, "start": 1733.44, "end": 1739.68, "text": " cut it because you just right now basically applying a policy you're cutting the thing. But", "tokens": [1723, 309, 570, 291, 445, 558, 586, 1936, 9275, 257, 3897, 291, 434, 6492, 264, 551, 13, 583], "temperature": 0.0, "avg_logprob": -0.2295978546142578, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.00016674962535034865}, {"id": 247, "seek": 173968, "start": 1739.68, "end": 1746.4, "text": " can you let it just isolate the container and let it run just to have 4 and 6 out of it. See how", "tokens": [393, 291, 718, 309, 445, 25660, 264, 10129, 293, 718, 309, 1190, 445, 281, 362, 1017, 293, 1386, 484, 295, 309, 13, 3008, 577], "temperature": 0.0, "avg_logprob": -0.13334982422576552, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00015532983525190502}, {"id": 248, "seek": 173968, "start": 1746.4, "end": 1754.72, "text": " things are behaving. Yeah other than policies we can always do the risk analysis. Sometimes it", "tokens": [721, 366, 35263, 13, 865, 661, 813, 7657, 321, 393, 1009, 360, 264, 3148, 5215, 13, 4803, 309], "temperature": 0.0, "avg_logprob": -0.13334982422576552, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00015532983525190502}, {"id": 249, "seek": 173968, "start": 1754.72, "end": 1761.52, "text": " happens that vulnerability that may found as a critical but in terms of my application I might", "tokens": [2314, 300, 24210, 300, 815, 1352, 382, 257, 4924, 457, 294, 2115, 295, 452, 3861, 286, 1062], "temperature": 0.0, "avg_logprob": -0.13334982422576552, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00015532983525190502}, {"id": 250, "seek": 173968, "start": 1761.52, "end": 1768.0800000000002, "text": " not have that vulnerable code at the runtime stage right. So I can always mark that vulnerability", "tokens": [406, 362, 300, 10955, 3089, 412, 264, 34474, 3233, 558, 13, 407, 286, 393, 1009, 1491, 300, 24210], "temperature": 0.0, "avg_logprob": -0.13334982422576552, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00015532983525190502}, {"id": 251, "seek": 176808, "start": 1768.08, "end": 1775.6799999999998, "text": " as a false positive or I can defer that vulnerability. Does that answer your question or you have", "tokens": [382, 257, 7908, 3353, 420, 286, 393, 25704, 300, 24210, 13, 4402, 300, 1867, 428, 1168, 420, 291, 362], "temperature": 0.0, "avg_logprob": -0.12298470801049537, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00018235461902804673}, {"id": 252, "seek": 176808, "start": 1775.6799999999998, "end": 1779.84, "text": " something else? Yeah I mean as long as you can get I mean sometimes the scenario is that you", "tokens": [746, 1646, 30, 865, 286, 914, 382, 938, 382, 291, 393, 483, 286, 914, 2171, 264, 9005, 307, 300, 291], "temperature": 0.0, "avg_logprob": -0.12298470801049537, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00018235461902804673}, {"id": 253, "seek": 176808, "start": 1779.84, "end": 1786.48, "text": " have the pod actually in production and something happens to it and you want to actually isolate", "tokens": [362, 264, 2497, 767, 294, 4265, 293, 746, 2314, 281, 309, 293, 291, 528, 281, 767, 25660], "temperature": 0.0, "avg_logprob": -0.12298470801049537, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00018235461902804673}, {"id": 254, "seek": 176808, "start": 1786.48, "end": 1791.04, "text": " it but you still want to have 4 and 6. You don't want to just cut it. You just want to understand", "tokens": [309, 457, 291, 920, 528, 281, 362, 1017, 293, 1386, 13, 509, 500, 380, 528, 281, 445, 1723, 309, 13, 509, 445, 528, 281, 1223], "temperature": 0.0, "avg_logprob": -0.12298470801049537, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.00018235461902804673}, {"id": 255, "seek": 179104, "start": 1791.04, "end": 1799.2, "text": " the attack. So in terms of isolation it gives us a rich context from the UI at what layer the", "tokens": [264, 2690, 13, 407, 294, 2115, 295, 16001, 309, 2709, 505, 257, 4593, 4319, 490, 264, 15682, 412, 437, 4583, 264], "temperature": 0.0, "avg_logprob": -0.1930363972981771, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.00010478571493877098}, {"id": 256, "seek": 179104, "start": 1799.2, "end": 1806.56, "text": " vulnerability is present. For example we can inspect each and every Docker layer. It allows us to see", "tokens": [24210, 307, 1974, 13, 1171, 1365, 321, 393, 15018, 1184, 293, 633, 33772, 4583, 13, 467, 4045, 505, 281, 536], "temperature": 0.0, "avg_logprob": -0.1930363972981771, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.00010478571493877098}, {"id": 257, "seek": 179104, "start": 1806.56, "end": 1813.52, "text": " at what component the vulnerability exists. So you can always you know modify the image. You", "tokens": [412, 437, 6542, 264, 24210, 8198, 13, 407, 291, 393, 1009, 291, 458, 16927, 264, 3256, 13, 509], "temperature": 0.0, "avg_logprob": -0.1930363972981771, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.00010478571493877098}, {"id": 258, "seek": 179104, "start": 1813.52, "end": 1820.3999999999999, "text": " can build it again and patch the changes. Thank you for the question and thank you for", "tokens": [393, 1322, 309, 797, 293, 9972, 264, 2962, 13, 1044, 291, 337, 264, 1168, 293, 1309, 291, 337], "temperature": 0.0, "avg_logprob": -0.1930363972981771, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.00010478571493877098}, {"id": 259, "seek": 182040, "start": 1820.4, "end": 1827.76, "text": " the talk. I think we are out of the time. Thank you.", "tokens": [50364, 264, 751, 13, 286, 519, 321, 366, 484, 295, 264, 565, 13, 1044, 291, 13, 50732], "temperature": 0.0, "avg_logprob": -0.2823443677690294, "compression_ratio": 0.9285714285714286, "no_speech_prob": 0.000509945850353688}], "language": "en"}