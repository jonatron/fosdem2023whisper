{"text": " The presentation, so it's about de-embarity to establish root fascism integrity. My name is Renk Riewerger, I've got a small demonstrator following this link, so that's my sandbox to evaluate those techniques. So let's jump into the presentation, so what is de-embarity? So as already mentioned, it belongs to a family of kernel device-mapper modules. It's mapping a physical block device onto high-level virtual block devices, for example, first to mention part of this family is de-emcrypt. It's intended for encryption and realizing confidentiality of your partition or the data in your partition. It establishes a read-writeable access, de-emintegrity, it's kind of journaling, establishing a read-write access also, and there is de-embarity for authenticity or integrity and optional authenticity and establishing a read-only access to your device. De-emcrypt, as already mentioned, is all established confidentiality, that means the authenticity or integrity is not enforced, so it might be possible to modify your content of your encrypted file system and you would never notice if by luck the block or the file structures or the directory structures are met, you wouldn't notice. De-embarity is different. If you use de-embarity, any modification of your partition, file structure, content of your files will be noticed and the integrity of your partition is enforced. It's also possible to sign your de-embarity setup. In this case, you achieve authenticity, so you know for sure that whatever you delivered and the signature matches, your data has not been manipulated, so de-embarity is available since kernel 3.4 or Android 4.4, so it's quite old, late 2013, so it's not a new feature we're talking about. So how does de-embarity work? De-embarity is based on a hash tree, so you have got your block device contained, for example, containing your root file system, these are the blue boxes on the bottom, and for every block device, 1K, 4K, whatever you choose, a hash value is calculated and a group of hash values is forming one more hash value on a higher level and so on and so on until you reach a single hash value on top called the root hash value. And this root hash value represents the state of your partition. If you sign this root hash value, you achieve authenticity of your overall partition. The good thing is to achieve this, you don't need any secret on the target, you just have to ship assigned entity to your target and the public key, and using the public key, your authenticity of your partition can verify. So it's different to TPM achievements or de-emcrypt, for de-emcrypt you need a security, here you don't need a secret. So how does it work? So once you created this root hash tree, or this hash tree, you install your root file system, your partition, for example on SDA3, and your hash tree will be placed in the partition SDA4. The invarity in the kernel is set up using both partitions, and it's providing a virtual file system into user space, and every time user space a block is read from your partition, it will be verified with a corresponding hash tree. So each block from root file system in SDA3 will be hashed, and the hash is compared to the hash value in the hash tree. And it will be calculated, the hash will be verified up to the root hash. And as the root hash is signed, you are sure it's not only the integrity is given, but authenticity is given also, because of the signed root hash value. So what can we, so what do we achieve now using the invarity? So we, it's a counter measure against one of the major threats for embedded devices in the field, IoT devices, somewhere being installed along the roads or whatever, detecting manipulation during startup. You can detect manipulation during runtime, because every time a block is read from your root file system, it will be hashed again, and it will be compared to the signed hash tree. So this way, even after startup during runtime, it's not possible to modify the content of your partition. You can use the invarity to terminate the execution of your kernel and the overall operating system, in case manipulation has been detected. It can deal with forward error correction in case of outwearing of your hashed devices, re-arranging blocks on your flash, and it requires a minimal run time overhead and almost zero latency during startup. So compare it to a naive way to verify the integrity and authenticity of a hash file system, let's say 150 megabyte, and you hash the complete 150 megabyte during startup, 50 megabyte per second, so that will take 10 seconds, at least, to verify. So using this one, there is zero latency, almost zero, so it's not noticeable. It's just reading a few blocks, all the few blocks being read to startup your, to start system D, your basic services, the few blocks have got to be verified and compared with a corresponding hash tree managed by DM Verity. So where should I? In line 11, the signature of the root hash, it's about 560 bytes, so we are talking about half a K of command line parameters here. So what do we need in the kernel? We just need a few parameters, or we need some kernel features. We have got to tell or integrate into the kernel the device mapper init capability, Verity, of course, the root hash verification, a trusted key ring, and we have got to specify the root, the certificate being used to verify the root hash. And this is the only cryptographic item we need to compile into the binaries. It's a public key, it's a certificate required to verify the hash tree. So let's get me back to this one. As you know, we must make sure that we have got a secure boot process without gaps. So you showed that public key, is that public key compiled into your kernel, is that how it works? Yes, it's a certificate, but it contains public key, and that's all you need. So we have got to make sure that the boot process is secure. And the signed boot loader, for example, UBOOT, we must make sure that there's no escape, no possibility of escape, we have got to lock down UBOOT. This is difficult if we want to establish some kind of AB booting, booting to A, booting to B. So UBOOT must provide some support for UBOOT environment. So here we need some features to lock down UBOOT to allow only certain variables being read and evaluated from the environment. If we do AB booting, we will have two different kernel command lines. We have got to specify device or partition representing the slot A, and we need another command line representing slot B. So we can't manage this now in UBOOT as UBOOT environment, with the containing also the seed and the root hash value and the signature of the root hash. So for this reason, the device tree now contains the boot argument, and we can provide two different configurations in the fit image. One device tree containing the boot step, the boot commands for slot A, and one for slot B. And everything else, the only thing UBOOT has to specify now is should it boot to A, slot A, or should it boot to slot B? And it starts, so as it would look like, it works like UBOOT is loading the fit image and specifying which configuration it would boot. It would just specify boot configuration A, boot configuration or slot B. And then these would represent the device tree configurations either for slot A or for slot B. And that's the reason the boot arguments have been moved into the fit image. So we can provide two different device trees with two different boot arguments, either for slot A and for slot B booting. So the benefits, it's very, so the de-invarity introduced a very low overhead. It allows us to do root of its integrity, authenticity, it's terminating the application case, manipulation of the root file system has been detected, and it's, well, it's just it's nice, it's nice, it's a nice feature. And I wondered, there's little in, there's not a lot of documentation about this feature as far as I got to know. So is there any other questions? Yes. Yeah, thank you for your talk. I have a question about the verification. So how I understand it, it's an on-the-fly verification of the image, meaning that the system is already being in use when there are still some of those blocks to be verified, meaning that you, let's say, in a secure boot, you might have that condition that you say I only execute signed code, meaning that either I have the, either I know that this is all, that this all has integrity, or I'm not starting it up at all, right? Yeah. For, let's say, for some critical applications, this might be important because if you've some kind of control device for, yeah, I don't know, an autopilot or something like that, then maybe you don't want to get into that application if you're not, if you don't have the security that everything's okay. Yes. That's the reason the kernel is not allowed or must not be stored in the root FS. So for some embedded systems, you will find that our build root is putting the kernel into the root file system by default. That's not, you can't do it here because you have got to start the kernel, you have got to, you have got to start the kernel and then you are able to verify the dm-varity tree. For that reason, the kernel is located in the fit image and the fit image is verified by the bootloader. So once we start the kernel, we know that the kernel is, the integrity of the kernel is given. If you start an application from root file system, it's read block-wise and it must be read into the memory and linked. And if during reading block-wise, you have got to start the kernel, you have got to start", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.44, "text": " The presentation, so it's about de-embarity to establish root fascism integrity.", "tokens": [50364, 440, 5860, 11, 370, 309, 311, 466, 368, 12, 443, 5356, 507, 281, 8327, 5593, 7184, 1434, 16000, 13, 50936], "temperature": 0.0, "avg_logprob": -0.37944843242694803, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.11969666928052902}, {"id": 1, "seek": 0, "start": 11.44, "end": 19.76, "text": " My name is Renk Riewerger, I've got a small demonstrator following this link, so that's", "tokens": [50936, 1222, 1315, 307, 12883, 74, 497, 414, 1554, 1321, 11, 286, 600, 658, 257, 1359, 5516, 19802, 3480, 341, 2113, 11, 370, 300, 311, 51352], "temperature": 0.0, "avg_logprob": -0.37944843242694803, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.11969666928052902}, {"id": 2, "seek": 0, "start": 19.76, "end": 24.92, "text": " my sandbox to evaluate those techniques.", "tokens": [51352, 452, 42115, 281, 13059, 729, 7512, 13, 51610], "temperature": 0.0, "avg_logprob": -0.37944843242694803, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.11969666928052902}, {"id": 3, "seek": 0, "start": 24.92, "end": 28.52, "text": " So let's jump into the presentation, so what is de-embarity?", "tokens": [51610, 407, 718, 311, 3012, 666, 264, 5860, 11, 370, 437, 307, 368, 12, 443, 5356, 507, 30, 51790], "temperature": 0.0, "avg_logprob": -0.37944843242694803, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.11969666928052902}, {"id": 4, "seek": 2852, "start": 28.52, "end": 37.68, "text": " So as already mentioned, it belongs to a family of kernel device-mapper modules.", "tokens": [50364, 407, 382, 1217, 2835, 11, 309, 12953, 281, 257, 1605, 295, 28256, 4302, 12, 1696, 3717, 16679, 13, 50822], "temperature": 0.0, "avg_logprob": -0.2950275421142578, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0035111382603645325}, {"id": 5, "seek": 2852, "start": 37.68, "end": 42.84, "text": " It's mapping a physical block device onto high-level virtual block devices, for example,", "tokens": [50822, 467, 311, 18350, 257, 4001, 3461, 4302, 3911, 1090, 12, 12418, 6374, 3461, 5759, 11, 337, 1365, 11, 51080], "temperature": 0.0, "avg_logprob": -0.2950275421142578, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0035111382603645325}, {"id": 6, "seek": 2852, "start": 42.84, "end": 47.4, "text": " first to mention part of this family is de-emcrypt.", "tokens": [51080, 700, 281, 2152, 644, 295, 341, 1605, 307, 368, 12, 443, 46555, 662, 13, 51308], "temperature": 0.0, "avg_logprob": -0.2950275421142578, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0035111382603645325}, {"id": 7, "seek": 2852, "start": 47.4, "end": 55.16, "text": " It's intended for encryption and realizing confidentiality of your partition or the data", "tokens": [51308, 467, 311, 10226, 337, 29575, 293, 16734, 27054, 507, 295, 428, 24808, 420, 264, 1412, 51696], "temperature": 0.0, "avg_logprob": -0.2950275421142578, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.0035111382603645325}, {"id": 8, "seek": 5516, "start": 55.16, "end": 56.4, "text": " in your partition.", "tokens": [50364, 294, 428, 24808, 13, 50426], "temperature": 0.0, "avg_logprob": -0.2761132146271182, "compression_ratio": 1.7483870967741935, "no_speech_prob": 0.02795126847922802}, {"id": 9, "seek": 5516, "start": 56.4, "end": 65.67999999999999, "text": " It establishes a read-writeable access, de-emintegrity, it's kind of journaling, establishing a read-write", "tokens": [50426, 467, 8327, 279, 257, 1401, 12, 21561, 712, 2105, 11, 368, 12, 443, 31131, 507, 11, 309, 311, 733, 295, 17598, 4270, 11, 22494, 257, 1401, 12, 21561, 50890], "temperature": 0.0, "avg_logprob": -0.2761132146271182, "compression_ratio": 1.7483870967741935, "no_speech_prob": 0.02795126847922802}, {"id": 10, "seek": 5516, "start": 65.67999999999999, "end": 73.72, "text": " access also, and there is de-embarity for authenticity or integrity and optional authenticity", "tokens": [50890, 2105, 611, 11, 293, 456, 307, 368, 12, 443, 5356, 507, 337, 34215, 420, 16000, 293, 17312, 34215, 51292], "temperature": 0.0, "avg_logprob": -0.2761132146271182, "compression_ratio": 1.7483870967741935, "no_speech_prob": 0.02795126847922802}, {"id": 11, "seek": 5516, "start": 73.72, "end": 78.6, "text": " and establishing a read-only access to your device.", "tokens": [51292, 293, 22494, 257, 1401, 12, 25202, 2105, 281, 428, 4302, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2761132146271182, "compression_ratio": 1.7483870967741935, "no_speech_prob": 0.02795126847922802}, {"id": 12, "seek": 7860, "start": 78.6, "end": 85.44, "text": " De-emcrypt, as already mentioned, is all established confidentiality, that means the", "tokens": [50364, 1346, 12, 443, 46555, 662, 11, 382, 1217, 2835, 11, 307, 439, 7545, 27054, 507, 11, 300, 1355, 264, 50706], "temperature": 0.0, "avg_logprob": -0.20687258870978104, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.04990697279572487}, {"id": 13, "seek": 7860, "start": 85.44, "end": 92.47999999999999, "text": " authenticity or integrity is not enforced, so it might be possible to modify your content", "tokens": [50706, 34215, 420, 16000, 307, 406, 40953, 11, 370, 309, 1062, 312, 1944, 281, 16927, 428, 2701, 51058], "temperature": 0.0, "avg_logprob": -0.20687258870978104, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.04990697279572487}, {"id": 14, "seek": 7860, "start": 92.47999999999999, "end": 100.16, "text": " of your encrypted file system and you would never notice if by luck the block or the file", "tokens": [51058, 295, 428, 36663, 3991, 1185, 293, 291, 576, 1128, 3449, 498, 538, 3668, 264, 3461, 420, 264, 3991, 51442], "temperature": 0.0, "avg_logprob": -0.20687258870978104, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.04990697279572487}, {"id": 15, "seek": 7860, "start": 100.16, "end": 107.03999999999999, "text": " structures or the directory structures are met, you wouldn't notice.", "tokens": [51442, 9227, 420, 264, 21120, 9227, 366, 1131, 11, 291, 2759, 380, 3449, 13, 51786], "temperature": 0.0, "avg_logprob": -0.20687258870978104, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.04990697279572487}, {"id": 16, "seek": 10704, "start": 107.04, "end": 108.04, "text": " De-embarity is different.", "tokens": [50364, 1346, 12, 443, 5356, 507, 307, 819, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1687692305620979, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.18930256366729736}, {"id": 17, "seek": 10704, "start": 108.04, "end": 114.84, "text": " If you use de-embarity, any modification of your partition, file structure, content of", "tokens": [50414, 759, 291, 764, 368, 12, 443, 5356, 507, 11, 604, 26747, 295, 428, 24808, 11, 3991, 3877, 11, 2701, 295, 50754], "temperature": 0.0, "avg_logprob": -0.1687692305620979, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.18930256366729736}, {"id": 18, "seek": 10704, "start": 114.84, "end": 122.56, "text": " your files will be noticed and the integrity of your partition is enforced.", "tokens": [50754, 428, 7098, 486, 312, 5694, 293, 264, 16000, 295, 428, 24808, 307, 40953, 13, 51140], "temperature": 0.0, "avg_logprob": -0.1687692305620979, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.18930256366729736}, {"id": 19, "seek": 10704, "start": 122.56, "end": 129.04000000000002, "text": " It's also possible to sign your de-embarity setup.", "tokens": [51140, 467, 311, 611, 1944, 281, 1465, 428, 368, 12, 443, 5356, 507, 8657, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1687692305620979, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.18930256366729736}, {"id": 20, "seek": 10704, "start": 129.04000000000002, "end": 134.60000000000002, "text": " In this case, you achieve authenticity, so you know for sure that whatever you delivered", "tokens": [51464, 682, 341, 1389, 11, 291, 4584, 34215, 11, 370, 291, 458, 337, 988, 300, 2035, 291, 10144, 51742], "temperature": 0.0, "avg_logprob": -0.1687692305620979, "compression_ratio": 1.6482412060301508, "no_speech_prob": 0.18930256366729736}, {"id": 21, "seek": 13460, "start": 134.6, "end": 142.44, "text": " and the signature matches, your data has not been manipulated, so de-embarity is available", "tokens": [50364, 293, 264, 13397, 10676, 11, 428, 1412, 575, 406, 668, 37161, 11, 370, 368, 12, 443, 5356, 507, 307, 2435, 50756], "temperature": 0.0, "avg_logprob": -0.21944783131281534, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.002067473717033863}, {"id": 22, "seek": 13460, "start": 142.44, "end": 149.04, "text": " since kernel 3.4 or Android 4.4, so it's quite old, late 2013, so it's not a new feature", "tokens": [50756, 1670, 28256, 805, 13, 19, 420, 8853, 1017, 13, 19, 11, 370, 309, 311, 1596, 1331, 11, 3469, 9012, 11, 370, 309, 311, 406, 257, 777, 4111, 51086], "temperature": 0.0, "avg_logprob": -0.21944783131281534, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.002067473717033863}, {"id": 23, "seek": 13460, "start": 149.04, "end": 153.0, "text": " we're talking about.", "tokens": [51086, 321, 434, 1417, 466, 13, 51284], "temperature": 0.0, "avg_logprob": -0.21944783131281534, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.002067473717033863}, {"id": 24, "seek": 13460, "start": 153.0, "end": 156.84, "text": " So how does de-embarity work?", "tokens": [51284, 407, 577, 775, 368, 12, 443, 5356, 507, 589, 30, 51476], "temperature": 0.0, "avg_logprob": -0.21944783131281534, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.002067473717033863}, {"id": 25, "seek": 13460, "start": 156.84, "end": 162.48, "text": " De-embarity is based on a hash tree, so you have got your block device contained, for", "tokens": [51476, 1346, 12, 443, 5356, 507, 307, 2361, 322, 257, 22019, 4230, 11, 370, 291, 362, 658, 428, 3461, 4302, 16212, 11, 337, 51758], "temperature": 0.0, "avg_logprob": -0.21944783131281534, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.002067473717033863}, {"id": 26, "seek": 16248, "start": 162.48, "end": 170.12, "text": " example, containing your root file system, these are the blue boxes on the bottom, and", "tokens": [50364, 1365, 11, 19273, 428, 5593, 3991, 1185, 11, 613, 366, 264, 3344, 9002, 322, 264, 2767, 11, 293, 50746], "temperature": 0.0, "avg_logprob": -0.17292672325583064, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.05358843505382538}, {"id": 27, "seek": 16248, "start": 170.12, "end": 176.48, "text": " for every block device, 1K, 4K, whatever you choose, a hash value is calculated and a group", "tokens": [50746, 337, 633, 3461, 4302, 11, 502, 42, 11, 1017, 42, 11, 2035, 291, 2826, 11, 257, 22019, 2158, 307, 15598, 293, 257, 1594, 51064], "temperature": 0.0, "avg_logprob": -0.17292672325583064, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.05358843505382538}, {"id": 28, "seek": 16248, "start": 176.48, "end": 184.79999999999998, "text": " of hash values is forming one more hash value on a higher level and so on and so on until", "tokens": [51064, 295, 22019, 4190, 307, 15745, 472, 544, 22019, 2158, 322, 257, 2946, 1496, 293, 370, 322, 293, 370, 322, 1826, 51480], "temperature": 0.0, "avg_logprob": -0.17292672325583064, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.05358843505382538}, {"id": 29, "seek": 16248, "start": 184.79999999999998, "end": 189.16, "text": " you reach a single hash value on top called the root hash value.", "tokens": [51480, 291, 2524, 257, 2167, 22019, 2158, 322, 1192, 1219, 264, 5593, 22019, 2158, 13, 51698], "temperature": 0.0, "avg_logprob": -0.17292672325583064, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.05358843505382538}, {"id": 30, "seek": 18916, "start": 189.16, "end": 195.72, "text": " And this root hash value represents the state of your partition.", "tokens": [50364, 400, 341, 5593, 22019, 2158, 8855, 264, 1785, 295, 428, 24808, 13, 50692], "temperature": 0.0, "avg_logprob": -0.1412390052498161, "compression_ratio": 1.7955801104972375, "no_speech_prob": 0.007722234353423119}, {"id": 31, "seek": 18916, "start": 195.72, "end": 202.48, "text": " If you sign this root hash value, you achieve authenticity of your overall partition.", "tokens": [50692, 759, 291, 1465, 341, 5593, 22019, 2158, 11, 291, 4584, 34215, 295, 428, 4787, 24808, 13, 51030], "temperature": 0.0, "avg_logprob": -0.1412390052498161, "compression_ratio": 1.7955801104972375, "no_speech_prob": 0.007722234353423119}, {"id": 32, "seek": 18916, "start": 202.48, "end": 207.07999999999998, "text": " The good thing is to achieve this, you don't need any secret on the target, you just have", "tokens": [51030, 440, 665, 551, 307, 281, 4584, 341, 11, 291, 500, 380, 643, 604, 4054, 322, 264, 3779, 11, 291, 445, 362, 51260], "temperature": 0.0, "avg_logprob": -0.1412390052498161, "compression_ratio": 1.7955801104972375, "no_speech_prob": 0.007722234353423119}, {"id": 33, "seek": 18916, "start": 207.07999999999998, "end": 216.48, "text": " to ship assigned entity to your target and the public key, and using the public key,", "tokens": [51260, 281, 5374, 13279, 13977, 281, 428, 3779, 293, 264, 1908, 2141, 11, 293, 1228, 264, 1908, 2141, 11, 51730], "temperature": 0.0, "avg_logprob": -0.1412390052498161, "compression_ratio": 1.7955801104972375, "no_speech_prob": 0.007722234353423119}, {"id": 34, "seek": 21648, "start": 216.48, "end": 218.64, "text": " your authenticity of your partition can verify.", "tokens": [50364, 428, 34215, 295, 428, 24808, 393, 16888, 13, 50472], "temperature": 0.0, "avg_logprob": -0.18207313441023043, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0677306205034256}, {"id": 35, "seek": 21648, "start": 218.64, "end": 226.16, "text": " So it's different to TPM achievements or de-emcrypt, for de-emcrypt you need a security, here", "tokens": [50472, 407, 309, 311, 819, 281, 314, 18819, 21420, 420, 368, 12, 443, 46555, 662, 11, 337, 368, 12, 443, 46555, 662, 291, 643, 257, 3825, 11, 510, 50848], "temperature": 0.0, "avg_logprob": -0.18207313441023043, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0677306205034256}, {"id": 36, "seek": 21648, "start": 226.16, "end": 231.79999999999998, "text": " you don't need a secret.", "tokens": [50848, 291, 500, 380, 643, 257, 4054, 13, 51130], "temperature": 0.0, "avg_logprob": -0.18207313441023043, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0677306205034256}, {"id": 37, "seek": 21648, "start": 231.79999999999998, "end": 232.79999999999998, "text": " So how does it work?", "tokens": [51130, 407, 577, 775, 309, 589, 30, 51180], "temperature": 0.0, "avg_logprob": -0.18207313441023043, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0677306205034256}, {"id": 38, "seek": 21648, "start": 232.79999999999998, "end": 242.35999999999999, "text": " So once you created this root hash tree, or this hash tree, you install your root file", "tokens": [51180, 407, 1564, 291, 2942, 341, 5593, 22019, 4230, 11, 420, 341, 22019, 4230, 11, 291, 3625, 428, 5593, 3991, 51658], "temperature": 0.0, "avg_logprob": -0.18207313441023043, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0677306205034256}, {"id": 39, "seek": 24236, "start": 242.36, "end": 248.92000000000002, "text": " system, your partition, for example on SDA3, and your hash tree will be placed in the partition", "tokens": [50364, 1185, 11, 428, 24808, 11, 337, 1365, 322, 318, 7509, 18, 11, 293, 428, 22019, 4230, 486, 312, 7074, 294, 264, 24808, 50692], "temperature": 0.0, "avg_logprob": -0.26925155639648435, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.22914797067642212}, {"id": 40, "seek": 24236, "start": 248.92000000000002, "end": 251.92000000000002, "text": " SDA4.", "tokens": [50692, 318, 7509, 19, 13, 50842], "temperature": 0.0, "avg_logprob": -0.26925155639648435, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.22914797067642212}, {"id": 41, "seek": 24236, "start": 251.92000000000002, "end": 259.36, "text": " The invarity in the kernel is set up using both partitions, and it's providing a virtual", "tokens": [50842, 440, 1048, 17409, 294, 264, 28256, 307, 992, 493, 1228, 1293, 644, 2451, 11, 293, 309, 311, 6530, 257, 6374, 51214], "temperature": 0.0, "avg_logprob": -0.26925155639648435, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.22914797067642212}, {"id": 42, "seek": 24236, "start": 259.36, "end": 266.32, "text": " file system into user space, and every time user space a block is read from your partition,", "tokens": [51214, 3991, 1185, 666, 4195, 1901, 11, 293, 633, 565, 4195, 1901, 257, 3461, 307, 1401, 490, 428, 24808, 11, 51562], "temperature": 0.0, "avg_logprob": -0.26925155639648435, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.22914797067642212}, {"id": 43, "seek": 26632, "start": 266.32, "end": 272.44, "text": " it will be verified with a corresponding hash tree.", "tokens": [50364, 309, 486, 312, 31197, 365, 257, 11760, 22019, 4230, 13, 50670], "temperature": 0.0, "avg_logprob": -0.16470202340020074, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.009469285607337952}, {"id": 44, "seek": 26632, "start": 272.44, "end": 277.88, "text": " So each block from root file system in SDA3 will be hashed, and the hash is compared to", "tokens": [50670, 407, 1184, 3461, 490, 5593, 3991, 1185, 294, 318, 7509, 18, 486, 312, 22019, 292, 11, 293, 264, 22019, 307, 5347, 281, 50942], "temperature": 0.0, "avg_logprob": -0.16470202340020074, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.009469285607337952}, {"id": 45, "seek": 26632, "start": 277.88, "end": 282.36, "text": " the hash value in the hash tree.", "tokens": [50942, 264, 22019, 2158, 294, 264, 22019, 4230, 13, 51166], "temperature": 0.0, "avg_logprob": -0.16470202340020074, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.009469285607337952}, {"id": 46, "seek": 26632, "start": 282.36, "end": 288.28, "text": " And it will be calculated, the hash will be verified up to the root hash.", "tokens": [51166, 400, 309, 486, 312, 15598, 11, 264, 22019, 486, 312, 31197, 493, 281, 264, 5593, 22019, 13, 51462], "temperature": 0.0, "avg_logprob": -0.16470202340020074, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.009469285607337952}, {"id": 47, "seek": 26632, "start": 288.28, "end": 295.2, "text": " And as the root hash is signed, you are sure it's not only the integrity is given, but", "tokens": [51462, 400, 382, 264, 5593, 22019, 307, 8175, 11, 291, 366, 988, 309, 311, 406, 787, 264, 16000, 307, 2212, 11, 457, 51808], "temperature": 0.0, "avg_logprob": -0.16470202340020074, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.009469285607337952}, {"id": 48, "seek": 29520, "start": 295.2, "end": 303.71999999999997, "text": " authenticity is given also, because of the signed root hash value.", "tokens": [50364, 34215, 307, 2212, 611, 11, 570, 295, 264, 8175, 5593, 22019, 2158, 13, 50790], "temperature": 0.0, "avg_logprob": -0.24782094249018916, "compression_ratio": 1.4228187919463087, "no_speech_prob": 0.017593111842870712}, {"id": 49, "seek": 29520, "start": 303.71999999999997, "end": 308.68, "text": " So what can we, so what do we achieve now using the invarity?", "tokens": [50790, 407, 437, 393, 321, 11, 370, 437, 360, 321, 4584, 586, 1228, 264, 1048, 17409, 30, 51038], "temperature": 0.0, "avg_logprob": -0.24782094249018916, "compression_ratio": 1.4228187919463087, "no_speech_prob": 0.017593111842870712}, {"id": 50, "seek": 29520, "start": 308.68, "end": 314.76, "text": " So we, it's a counter measure against one of the major threats for embedded devices", "tokens": [51038, 407, 321, 11, 309, 311, 257, 5682, 3481, 1970, 472, 295, 264, 2563, 14909, 337, 16741, 5759, 51342], "temperature": 0.0, "avg_logprob": -0.24782094249018916, "compression_ratio": 1.4228187919463087, "no_speech_prob": 0.017593111842870712}, {"id": 51, "seek": 31476, "start": 314.76, "end": 325.15999999999997, "text": " in the field, IoT devices, somewhere being installed along the roads or whatever, detecting", "tokens": [50364, 294, 264, 2519, 11, 30112, 5759, 11, 4079, 885, 8899, 2051, 264, 11344, 420, 2035, 11, 40237, 50884], "temperature": 0.0, "avg_logprob": -0.17088226533271897, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.12377690523862839}, {"id": 52, "seek": 31476, "start": 325.15999999999997, "end": 328.48, "text": " manipulation during startup.", "tokens": [50884, 26475, 1830, 18578, 13, 51050], "temperature": 0.0, "avg_logprob": -0.17088226533271897, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.12377690523862839}, {"id": 53, "seek": 31476, "start": 328.48, "end": 334.24, "text": " You can detect manipulation during runtime, because every time a block is read from your", "tokens": [51050, 509, 393, 5531, 26475, 1830, 34474, 11, 570, 633, 565, 257, 3461, 307, 1401, 490, 428, 51338], "temperature": 0.0, "avg_logprob": -0.17088226533271897, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.12377690523862839}, {"id": 54, "seek": 31476, "start": 334.24, "end": 342.44, "text": " root file system, it will be hashed again, and it will be compared to the signed hash", "tokens": [51338, 5593, 3991, 1185, 11, 309, 486, 312, 22019, 292, 797, 11, 293, 309, 486, 312, 5347, 281, 264, 8175, 22019, 51748], "temperature": 0.0, "avg_logprob": -0.17088226533271897, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.12377690523862839}, {"id": 55, "seek": 31476, "start": 342.44, "end": 344.59999999999997, "text": " tree.", "tokens": [51748, 4230, 13, 51856], "temperature": 0.0, "avg_logprob": -0.17088226533271897, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.12377690523862839}, {"id": 56, "seek": 34460, "start": 344.6, "end": 351.04, "text": " So this way, even after startup during runtime, it's not possible to modify the content of", "tokens": [50364, 407, 341, 636, 11, 754, 934, 18578, 1830, 34474, 11, 309, 311, 406, 1944, 281, 16927, 264, 2701, 295, 50686], "temperature": 0.0, "avg_logprob": -0.20526628494262694, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.0004151934408582747}, {"id": 57, "seek": 34460, "start": 351.04, "end": 354.48, "text": " your partition.", "tokens": [50686, 428, 24808, 13, 50858], "temperature": 0.0, "avg_logprob": -0.20526628494262694, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.0004151934408582747}, {"id": 58, "seek": 34460, "start": 354.48, "end": 360.84000000000003, "text": " You can use the invarity to terminate the execution of your kernel and the overall operating", "tokens": [50858, 509, 393, 764, 264, 1048, 17409, 281, 10761, 473, 264, 15058, 295, 428, 28256, 293, 264, 4787, 7447, 51176], "temperature": 0.0, "avg_logprob": -0.20526628494262694, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.0004151934408582747}, {"id": 59, "seek": 34460, "start": 360.84000000000003, "end": 365.68, "text": " system, in case manipulation has been detected.", "tokens": [51176, 1185, 11, 294, 1389, 26475, 575, 668, 21896, 13, 51418], "temperature": 0.0, "avg_logprob": -0.20526628494262694, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.0004151934408582747}, {"id": 60, "seek": 34460, "start": 365.68, "end": 373.32000000000005, "text": " It can deal with forward error correction in case of outwearing of your hashed devices,", "tokens": [51418, 467, 393, 2028, 365, 2128, 6713, 19984, 294, 1389, 295, 484, 826, 1921, 295, 428, 22019, 292, 5759, 11, 51800], "temperature": 0.0, "avg_logprob": -0.20526628494262694, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.0004151934408582747}, {"id": 61, "seek": 37332, "start": 373.32, "end": 387.8, "text": " re-arranging blocks on your flash, and it requires a minimal run time overhead and almost", "tokens": [50364, 319, 12, 2284, 9741, 8474, 322, 428, 7319, 11, 293, 309, 7029, 257, 13206, 1190, 565, 19922, 293, 1920, 51088], "temperature": 0.0, "avg_logprob": -0.2540423334861288, "compression_ratio": 1.4, "no_speech_prob": 0.013762305490672588}, {"id": 62, "seek": 37332, "start": 387.8, "end": 390.0, "text": " zero latency during startup.", "tokens": [51088, 4018, 27043, 1830, 18578, 13, 51198], "temperature": 0.0, "avg_logprob": -0.2540423334861288, "compression_ratio": 1.4, "no_speech_prob": 0.013762305490672588}, {"id": 63, "seek": 37332, "start": 390.0, "end": 400.28, "text": " So compare it to a naive way to verify the integrity and authenticity of a hash file", "tokens": [51198, 407, 6794, 309, 281, 257, 29052, 636, 281, 16888, 264, 16000, 293, 34215, 295, 257, 22019, 3991, 51712], "temperature": 0.0, "avg_logprob": -0.2540423334861288, "compression_ratio": 1.4, "no_speech_prob": 0.013762305490672588}, {"id": 64, "seek": 40028, "start": 400.28, "end": 407.76, "text": " system, let's say 150 megabyte, and you hash the complete 150 megabyte during startup,", "tokens": [50364, 1185, 11, 718, 311, 584, 8451, 10816, 34529, 11, 293, 291, 22019, 264, 3566, 8451, 10816, 34529, 1830, 18578, 11, 50738], "temperature": 0.0, "avg_logprob": -0.1709858070720326, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.2557579576969147}, {"id": 65, "seek": 40028, "start": 407.76, "end": 413.28, "text": " 50 megabyte per second, so that will take 10 seconds, at least, to verify.", "tokens": [50738, 2625, 10816, 34529, 680, 1150, 11, 370, 300, 486, 747, 1266, 3949, 11, 412, 1935, 11, 281, 16888, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1709858070720326, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.2557579576969147}, {"id": 66, "seek": 40028, "start": 413.28, "end": 420.76, "text": " So using this one, there is zero latency, almost zero, so it's not noticeable.", "tokens": [51014, 407, 1228, 341, 472, 11, 456, 307, 4018, 27043, 11, 1920, 4018, 11, 370, 309, 311, 406, 26041, 13, 51388], "temperature": 0.0, "avg_logprob": -0.1709858070720326, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.2557579576969147}, {"id": 67, "seek": 40028, "start": 420.76, "end": 426.0, "text": " It's just reading a few blocks, all the few blocks being read to startup your, to start", "tokens": [51388, 467, 311, 445, 3760, 257, 1326, 8474, 11, 439, 264, 1326, 8474, 885, 1401, 281, 18578, 428, 11, 281, 722, 51650], "temperature": 0.0, "avg_logprob": -0.1709858070720326, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.2557579576969147}, {"id": 68, "seek": 42600, "start": 426.0, "end": 435.56, "text": " system D, your basic services, the few blocks have got to be verified and compared with", "tokens": [50364, 1185, 413, 11, 428, 3875, 3328, 11, 264, 1326, 8474, 362, 658, 281, 312, 31197, 293, 5347, 365, 50842], "temperature": 0.0, "avg_logprob": -0.2556413482217228, "compression_ratio": 1.2053571428571428, "no_speech_prob": 0.01891384646296501}, {"id": 69, "seek": 42600, "start": 435.56, "end": 443.84, "text": " a corresponding hash tree managed by DM Verity.", "tokens": [50842, 257, 11760, 22019, 4230, 6453, 538, 15322, 4281, 507, 13, 51256], "temperature": 0.0, "avg_logprob": -0.2556413482217228, "compression_ratio": 1.2053571428571428, "no_speech_prob": 0.01891384646296501}, {"id": 70, "seek": 44384, "start": 443.84, "end": 445.4, "text": " So where should I?", "tokens": [50364, 407, 689, 820, 286, 30, 50442], "temperature": 0.2, "avg_logprob": -0.9698943495750427, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.9766411185264587}, {"id": 71, "seek": 74384, "start": 743.84, "end": 773.64, "text": " In line 11, the signature of the root hash, it's about 560 bytes, so we are talking about", "tokens": [50364, 682, 1622, 2975, 11, 264, 13397, 295, 264, 5593, 22019, 11, 309, 311, 466, 1025, 4550, 36088, 11, 370, 321, 366, 1417, 466, 51854], "temperature": 0.0, "avg_logprob": -0.24361069997151694, "compression_ratio": 1.0595238095238095, "no_speech_prob": 0.07341155409812927}, {"id": 72, "seek": 77364, "start": 774.6, "end": 781.56, "text": " half a K of command line parameters here.", "tokens": [50412, 1922, 257, 591, 295, 5622, 1622, 9834, 510, 13, 50760], "temperature": 0.0, "avg_logprob": -0.26147559381300406, "compression_ratio": 1.54, "no_speech_prob": 0.10741152614355087}, {"id": 73, "seek": 77364, "start": 781.56, "end": 785.68, "text": " So what do we need in the kernel?", "tokens": [50760, 407, 437, 360, 321, 643, 294, 264, 28256, 30, 50966], "temperature": 0.0, "avg_logprob": -0.26147559381300406, "compression_ratio": 1.54, "no_speech_prob": 0.10741152614355087}, {"id": 74, "seek": 77364, "start": 785.68, "end": 791.84, "text": " We just need a few parameters, or we need some kernel features.", "tokens": [50966, 492, 445, 643, 257, 1326, 9834, 11, 420, 321, 643, 512, 28256, 4122, 13, 51274], "temperature": 0.0, "avg_logprob": -0.26147559381300406, "compression_ratio": 1.54, "no_speech_prob": 0.10741152614355087}, {"id": 75, "seek": 77364, "start": 791.84, "end": 800.56, "text": " We have got to tell or integrate into the kernel the device mapper init capability, Verity,", "tokens": [51274, 492, 362, 658, 281, 980, 420, 13365, 666, 264, 28256, 264, 4302, 463, 3717, 3157, 13759, 11, 4281, 507, 11, 51710], "temperature": 0.0, "avg_logprob": -0.26147559381300406, "compression_ratio": 1.54, "no_speech_prob": 0.10741152614355087}, {"id": 76, "seek": 80056, "start": 800.56, "end": 810.3199999999999, "text": " of course, the root hash verification, a trusted key ring, and we have got to specify", "tokens": [50364, 295, 1164, 11, 264, 5593, 22019, 30206, 11, 257, 16034, 2141, 4875, 11, 293, 321, 362, 658, 281, 16500, 50852], "temperature": 0.0, "avg_logprob": -0.19679410834061473, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.004561650566756725}, {"id": 77, "seek": 80056, "start": 810.3199999999999, "end": 816.88, "text": " the root, the certificate being used to verify the root hash.", "tokens": [50852, 264, 5593, 11, 264, 15953, 885, 1143, 281, 16888, 264, 5593, 22019, 13, 51180], "temperature": 0.0, "avg_logprob": -0.19679410834061473, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.004561650566756725}, {"id": 78, "seek": 80056, "start": 816.88, "end": 822.4799999999999, "text": " And this is the only cryptographic item we need to compile into the binaries.", "tokens": [51180, 400, 341, 307, 264, 787, 9844, 12295, 3174, 321, 643, 281, 31413, 666, 264, 5171, 4889, 13, 51460], "temperature": 0.0, "avg_logprob": -0.19679410834061473, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.004561650566756725}, {"id": 79, "seek": 82248, "start": 822.48, "end": 833.64, "text": " It's a public key, it's a certificate required to verify the hash tree.", "tokens": [50364, 467, 311, 257, 1908, 2141, 11, 309, 311, 257, 15953, 4739, 281, 16888, 264, 22019, 4230, 13, 50922], "temperature": 0.0, "avg_logprob": -0.1829427613152398, "compression_ratio": 1.3404255319148937, "no_speech_prob": 0.03941911831498146}, {"id": 80, "seek": 82248, "start": 833.64, "end": 840.88, "text": " So let's get me back to this one.", "tokens": [50922, 407, 718, 311, 483, 385, 646, 281, 341, 472, 13, 51284], "temperature": 0.0, "avg_logprob": -0.1829427613152398, "compression_ratio": 1.3404255319148937, "no_speech_prob": 0.03941911831498146}, {"id": 81, "seek": 82248, "start": 840.88, "end": 850.32, "text": " As you know, we must make sure that we have got a secure boot process without gaps.", "tokens": [51284, 1018, 291, 458, 11, 321, 1633, 652, 988, 300, 321, 362, 658, 257, 7144, 11450, 1399, 1553, 15031, 13, 51756], "temperature": 0.0, "avg_logprob": -0.1829427613152398, "compression_ratio": 1.3404255319148937, "no_speech_prob": 0.03941911831498146}, {"id": 82, "seek": 85032, "start": 850.32, "end": 865.48, "text": " So you showed that public key, is that public key compiled into your kernel, is that how", "tokens": [50364, 407, 291, 4712, 300, 1908, 2141, 11, 307, 300, 1908, 2141, 36548, 666, 428, 28256, 11, 307, 300, 577, 51122], "temperature": 0.0, "avg_logprob": -0.28460466384887695, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.03704439476132393}, {"id": 83, "seek": 85032, "start": 865.48, "end": 866.48, "text": " it works?", "tokens": [51122, 309, 1985, 30, 51172], "temperature": 0.0, "avg_logprob": -0.28460466384887695, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.03704439476132393}, {"id": 84, "seek": 85032, "start": 866.48, "end": 873.08, "text": " Yes, it's a certificate, but it contains public key, and that's all you need.", "tokens": [51172, 1079, 11, 309, 311, 257, 15953, 11, 457, 309, 8306, 1908, 2141, 11, 293, 300, 311, 439, 291, 643, 13, 51502], "temperature": 0.0, "avg_logprob": -0.28460466384887695, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.03704439476132393}, {"id": 85, "seek": 87308, "start": 873.08, "end": 879.5200000000001, "text": " So we have got to make sure that the boot process is secure.", "tokens": [50364, 407, 321, 362, 658, 281, 652, 988, 300, 264, 11450, 1399, 307, 7144, 13, 50686], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 86, "seek": 87308, "start": 879.5200000000001, "end": 885.84, "text": " And the signed boot loader, for example, UBOOT, we must make sure that there's no escape,", "tokens": [50686, 400, 264, 8175, 11450, 3677, 260, 11, 337, 1365, 11, 624, 33, 3783, 51, 11, 321, 1633, 652, 988, 300, 456, 311, 572, 7615, 11, 51002], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 87, "seek": 87308, "start": 885.84, "end": 889.08, "text": " no possibility of escape, we have got to lock down UBOOT.", "tokens": [51002, 572, 7959, 295, 7615, 11, 321, 362, 658, 281, 4017, 760, 624, 33, 3783, 51, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 88, "seek": 87308, "start": 889.08, "end": 896.76, "text": " This is difficult if we want to establish some kind of AB booting, booting to A, booting", "tokens": [51164, 639, 307, 2252, 498, 321, 528, 281, 8327, 512, 733, 295, 13838, 11450, 278, 11, 11450, 278, 281, 316, 11, 11450, 278, 51548], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 89, "seek": 87308, "start": 896.76, "end": 897.76, "text": " to B.", "tokens": [51548, 281, 363, 13, 51598], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 90, "seek": 87308, "start": 897.76, "end": 902.88, "text": " So UBOOT must provide some support for UBOOT environment.", "tokens": [51598, 407, 624, 33, 3783, 51, 1633, 2893, 512, 1406, 337, 624, 33, 3783, 51, 2823, 13, 51854], "temperature": 0.0, "avg_logprob": -0.18296815698797053, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.07488372921943665}, {"id": 91, "seek": 90288, "start": 902.88, "end": 913.24, "text": " So here we need some features to lock down UBOOT to allow only certain variables being", "tokens": [50364, 407, 510, 321, 643, 512, 4122, 281, 4017, 760, 624, 33, 3783, 51, 281, 2089, 787, 1629, 9102, 885, 50882], "temperature": 0.0, "avg_logprob": -0.1090294075012207, "compression_ratio": 1.3310810810810811, "no_speech_prob": 0.0026672794483602047}, {"id": 92, "seek": 90288, "start": 913.24, "end": 916.4399999999999, "text": " read and evaluated from the environment.", "tokens": [50882, 1401, 293, 25509, 490, 264, 2823, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1090294075012207, "compression_ratio": 1.3310810810810811, "no_speech_prob": 0.0026672794483602047}, {"id": 93, "seek": 90288, "start": 916.4399999999999, "end": 925.92, "text": " If we do AB booting, we will have two different kernel command lines.", "tokens": [51042, 759, 321, 360, 13838, 11450, 278, 11, 321, 486, 362, 732, 819, 28256, 5622, 3876, 13, 51516], "temperature": 0.0, "avg_logprob": -0.1090294075012207, "compression_ratio": 1.3310810810810811, "no_speech_prob": 0.0026672794483602047}, {"id": 94, "seek": 92592, "start": 925.92, "end": 938.0, "text": " We have got to specify device or partition representing the slot A, and we need another", "tokens": [50364, 492, 362, 658, 281, 16500, 4302, 420, 24808, 13460, 264, 14747, 316, 11, 293, 321, 643, 1071, 50968], "temperature": 0.0, "avg_logprob": -0.18782603523947977, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.05755454674363136}, {"id": 95, "seek": 92592, "start": 938.0, "end": 940.9599999999999, "text": " command line representing slot B.", "tokens": [50968, 5622, 1622, 13460, 14747, 363, 13, 51116], "temperature": 0.0, "avg_logprob": -0.18782603523947977, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.05755454674363136}, {"id": 96, "seek": 92592, "start": 940.9599999999999, "end": 953.16, "text": " So we can't manage this now in UBOOT as UBOOT environment, with the containing also the", "tokens": [51116, 407, 321, 393, 380, 3067, 341, 586, 294, 624, 33, 3783, 51, 382, 624, 33, 3783, 51, 2823, 11, 365, 264, 19273, 611, 264, 51726], "temperature": 0.0, "avg_logprob": -0.18782603523947977, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.05755454674363136}, {"id": 97, "seek": 95316, "start": 953.16, "end": 958.8, "text": " seed and the root hash value and the signature of the root hash.", "tokens": [50364, 8871, 293, 264, 5593, 22019, 2158, 293, 264, 13397, 295, 264, 5593, 22019, 13, 50646], "temperature": 0.0, "avg_logprob": -0.1394217575297636, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.037506382912397385}, {"id": 98, "seek": 95316, "start": 958.8, "end": 968.36, "text": " So for this reason, the device tree now contains the boot argument, and we can provide two", "tokens": [50646, 407, 337, 341, 1778, 11, 264, 4302, 4230, 586, 8306, 264, 11450, 6770, 11, 293, 321, 393, 2893, 732, 51124], "temperature": 0.0, "avg_logprob": -0.1394217575297636, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.037506382912397385}, {"id": 99, "seek": 95316, "start": 968.36, "end": 972.28, "text": " different configurations in the fit image.", "tokens": [51124, 819, 31493, 294, 264, 3318, 3256, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1394217575297636, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.037506382912397385}, {"id": 100, "seek": 95316, "start": 972.28, "end": 978.16, "text": " One device tree containing the boot step, the boot commands for slot A, and one for", "tokens": [51320, 1485, 4302, 4230, 19273, 264, 11450, 1823, 11, 264, 11450, 16901, 337, 14747, 316, 11, 293, 472, 337, 51614], "temperature": 0.0, "avg_logprob": -0.1394217575297636, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.037506382912397385}, {"id": 101, "seek": 97816, "start": 978.16, "end": 987.9599999999999, "text": " slot B. And everything else, the only thing UBOOT has to specify now is should it boot", "tokens": [50364, 14747, 363, 13, 400, 1203, 1646, 11, 264, 787, 551, 624, 33, 3783, 51, 575, 281, 16500, 586, 307, 820, 309, 11450, 50854], "temperature": 0.0, "avg_logprob": -0.18177515395144198, "compression_ratio": 1.7842105263157895, "no_speech_prob": 0.08026895672082901}, {"id": 102, "seek": 97816, "start": 987.9599999999999, "end": 991.4, "text": " to A, slot A, or should it boot to slot B?", "tokens": [50854, 281, 316, 11, 14747, 316, 11, 420, 820, 309, 11450, 281, 14747, 363, 30, 51026], "temperature": 0.0, "avg_logprob": -0.18177515395144198, "compression_ratio": 1.7842105263157895, "no_speech_prob": 0.08026895672082901}, {"id": 103, "seek": 97816, "start": 991.4, "end": 998.76, "text": " And it starts, so as it would look like, it works like UBOOT is loading the fit image", "tokens": [51026, 400, 309, 3719, 11, 370, 382, 309, 576, 574, 411, 11, 309, 1985, 411, 624, 33, 3783, 51, 307, 15114, 264, 3318, 3256, 51394], "temperature": 0.0, "avg_logprob": -0.18177515395144198, "compression_ratio": 1.7842105263157895, "no_speech_prob": 0.08026895672082901}, {"id": 104, "seek": 97816, "start": 998.76, "end": 1001.0, "text": " and specifying which configuration it would boot.", "tokens": [51394, 293, 1608, 5489, 597, 11694, 309, 576, 11450, 13, 51506], "temperature": 0.0, "avg_logprob": -0.18177515395144198, "compression_ratio": 1.7842105263157895, "no_speech_prob": 0.08026895672082901}, {"id": 105, "seek": 97816, "start": 1001.0, "end": 1007.36, "text": " It would just specify boot configuration A, boot configuration or slot B.", "tokens": [51506, 467, 576, 445, 16500, 11450, 11694, 316, 11, 11450, 11694, 420, 14747, 363, 13, 51824], "temperature": 0.0, "avg_logprob": -0.18177515395144198, "compression_ratio": 1.7842105263157895, "no_speech_prob": 0.08026895672082901}, {"id": 106, "seek": 100736, "start": 1007.36, "end": 1014.12, "text": " And then these would represent the device tree configurations either for slot A or for", "tokens": [50364, 400, 550, 613, 576, 2906, 264, 4302, 4230, 31493, 2139, 337, 14747, 316, 420, 337, 50702], "temperature": 0.0, "avg_logprob": -0.14071362260459125, "compression_ratio": 1.7650602409638554, "no_speech_prob": 0.013749100267887115}, {"id": 107, "seek": 100736, "start": 1014.12, "end": 1022.5600000000001, "text": " slot B. And that's the reason the boot arguments have been moved into the fit image.", "tokens": [50702, 14747, 363, 13, 400, 300, 311, 264, 1778, 264, 11450, 12869, 362, 668, 4259, 666, 264, 3318, 3256, 13, 51124], "temperature": 0.0, "avg_logprob": -0.14071362260459125, "compression_ratio": 1.7650602409638554, "no_speech_prob": 0.013749100267887115}, {"id": 108, "seek": 100736, "start": 1022.5600000000001, "end": 1030.3600000000001, "text": " So we can provide two different device trees with two different boot arguments, either", "tokens": [51124, 407, 321, 393, 2893, 732, 819, 4302, 5852, 365, 732, 819, 11450, 12869, 11, 2139, 51514], "temperature": 0.0, "avg_logprob": -0.14071362260459125, "compression_ratio": 1.7650602409638554, "no_speech_prob": 0.013749100267887115}, {"id": 109, "seek": 100736, "start": 1030.3600000000001, "end": 1036.96, "text": " for slot A and for slot B booting.", "tokens": [51514, 337, 14747, 316, 293, 337, 14747, 363, 11450, 278, 13, 51844], "temperature": 0.0, "avg_logprob": -0.14071362260459125, "compression_ratio": 1.7650602409638554, "no_speech_prob": 0.013749100267887115}, {"id": 110, "seek": 103696, "start": 1036.96, "end": 1047.72, "text": " So the benefits, it's very, so the de-invarity introduced a very low overhead.", "tokens": [50364, 407, 264, 5311, 11, 309, 311, 588, 11, 370, 264, 368, 12, 259, 85, 17409, 7268, 257, 588, 2295, 19922, 13, 50902], "temperature": 0.0, "avg_logprob": -0.36800457449520335, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.00461783679202199}, {"id": 111, "seek": 103696, "start": 1047.72, "end": 1056.32, "text": " It allows us to do root of its integrity, authenticity, it's terminating the application", "tokens": [50902, 467, 4045, 505, 281, 360, 5593, 295, 1080, 16000, 11, 34215, 11, 309, 311, 1433, 8205, 264, 3861, 51332], "temperature": 0.0, "avg_logprob": -0.36800457449520335, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.00461783679202199}, {"id": 112, "seek": 103696, "start": 1056.32, "end": 1066.48, "text": " case, manipulation of the root file system has been detected, and it's, well, it's just", "tokens": [51332, 1389, 11, 26475, 295, 264, 5593, 3991, 1185, 575, 668, 21896, 11, 293, 309, 311, 11, 731, 11, 309, 311, 445, 51840], "temperature": 0.0, "avg_logprob": -0.36800457449520335, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.00461783679202199}, {"id": 113, "seek": 106648, "start": 1067.48, "end": 1071.76, "text": " it's nice, it's nice, it's a nice feature.", "tokens": [50414, 309, 311, 1481, 11, 309, 311, 1481, 11, 309, 311, 257, 1481, 4111, 13, 50628], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 114, "seek": 106648, "start": 1071.76, "end": 1079.1200000000001, "text": " And I wondered, there's little in, there's not a lot of documentation about this feature", "tokens": [50628, 400, 286, 17055, 11, 456, 311, 707, 294, 11, 456, 311, 406, 257, 688, 295, 14333, 466, 341, 4111, 50996], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 115, "seek": 106648, "start": 1079.1200000000001, "end": 1081.3600000000001, "text": " as far as I got to know.", "tokens": [50996, 382, 1400, 382, 286, 658, 281, 458, 13, 51108], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 116, "seek": 106648, "start": 1081.3600000000001, "end": 1083.68, "text": " So is there any other questions?", "tokens": [51108, 407, 307, 456, 604, 661, 1651, 30, 51224], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 117, "seek": 106648, "start": 1083.68, "end": 1084.68, "text": " Yes.", "tokens": [51224, 1079, 13, 51274], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 118, "seek": 106648, "start": 1084.68, "end": 1089.08, "text": " Yeah, thank you for your talk.", "tokens": [51274, 865, 11, 1309, 291, 337, 428, 751, 13, 51494], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 119, "seek": 106648, "start": 1089.08, "end": 1092.84, "text": " I have a question about the verification.", "tokens": [51494, 286, 362, 257, 1168, 466, 264, 30206, 13, 51682], "temperature": 0.0, "avg_logprob": -0.27793830778540635, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.05527753010392189}, {"id": 120, "seek": 109284, "start": 1092.84, "end": 1099.9199999999998, "text": " So how I understand it, it's an on-the-fly verification of the image, meaning that the", "tokens": [50364, 407, 577, 286, 1223, 309, 11, 309, 311, 364, 322, 12, 3322, 12, 14061, 30206, 295, 264, 3256, 11, 3620, 300, 264, 50718], "temperature": 0.0, "avg_logprob": -0.21624567888785098, "compression_ratio": 1.5497076023391814, "no_speech_prob": 0.11191574484109879}, {"id": 121, "seek": 109284, "start": 1099.9199999999998, "end": 1109.72, "text": " system is already being in use when there are still some of those blocks to be verified,", "tokens": [50718, 1185, 307, 1217, 885, 294, 764, 562, 456, 366, 920, 512, 295, 729, 8474, 281, 312, 31197, 11, 51208], "temperature": 0.0, "avg_logprob": -0.21624567888785098, "compression_ratio": 1.5497076023391814, "no_speech_prob": 0.11191574484109879}, {"id": 122, "seek": 109284, "start": 1109.72, "end": 1116.6, "text": " meaning that you, let's say, in a secure boot, you might have that condition that you say", "tokens": [51208, 3620, 300, 291, 11, 718, 311, 584, 11, 294, 257, 7144, 11450, 11, 291, 1062, 362, 300, 4188, 300, 291, 584, 51552], "temperature": 0.0, "avg_logprob": -0.21624567888785098, "compression_ratio": 1.5497076023391814, "no_speech_prob": 0.11191574484109879}, {"id": 123, "seek": 111660, "start": 1116.6, "end": 1125.36, "text": " I only execute signed code, meaning that either I have the, either I know that this is all,", "tokens": [50364, 286, 787, 14483, 8175, 3089, 11, 3620, 300, 2139, 286, 362, 264, 11, 2139, 286, 458, 300, 341, 307, 439, 11, 50802], "temperature": 0.0, "avg_logprob": -0.225438747000187, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.20106947422027588}, {"id": 124, "seek": 111660, "start": 1125.36, "end": 1130.36, "text": " that this all has integrity, or I'm not starting it up at all, right?", "tokens": [50802, 300, 341, 439, 575, 16000, 11, 420, 286, 478, 406, 2891, 309, 493, 412, 439, 11, 558, 30, 51052], "temperature": 0.0, "avg_logprob": -0.225438747000187, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.20106947422027588}, {"id": 125, "seek": 111660, "start": 1130.36, "end": 1131.36, "text": " Yeah.", "tokens": [51052, 865, 13, 51102], "temperature": 0.0, "avg_logprob": -0.225438747000187, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.20106947422027588}, {"id": 126, "seek": 111660, "start": 1131.36, "end": 1136.08, "text": " For, let's say, for some critical applications, this might be important because if you've some", "tokens": [51102, 1171, 11, 718, 311, 584, 11, 337, 512, 4924, 5821, 11, 341, 1062, 312, 1021, 570, 498, 291, 600, 512, 51338], "temperature": 0.0, "avg_logprob": -0.225438747000187, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.20106947422027588}, {"id": 127, "seek": 111660, "start": 1136.08, "end": 1143.24, "text": " kind of control device for, yeah, I don't know, an autopilot or something like that,", "tokens": [51338, 733, 295, 1969, 4302, 337, 11, 1338, 11, 286, 500, 380, 458, 11, 364, 31090, 31516, 420, 746, 411, 300, 11, 51696], "temperature": 0.0, "avg_logprob": -0.225438747000187, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.20106947422027588}, {"id": 128, "seek": 114324, "start": 1143.24, "end": 1148.76, "text": " then maybe you don't want to get into that application if you're not, if you don't have", "tokens": [50364, 550, 1310, 291, 500, 380, 528, 281, 483, 666, 300, 3861, 498, 291, 434, 406, 11, 498, 291, 500, 380, 362, 50640], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 129, "seek": 114324, "start": 1148.76, "end": 1150.88, "text": " the security that everything's okay.", "tokens": [50640, 264, 3825, 300, 1203, 311, 1392, 13, 50746], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 130, "seek": 114324, "start": 1150.88, "end": 1151.88, "text": " Yes.", "tokens": [50746, 1079, 13, 50796], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 131, "seek": 114324, "start": 1151.88, "end": 1157.2, "text": " That's the reason the kernel is not allowed or must not be stored in the root FS.", "tokens": [50796, 663, 311, 264, 1778, 264, 28256, 307, 406, 4350, 420, 1633, 406, 312, 12187, 294, 264, 5593, 41138, 13, 51062], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 132, "seek": 114324, "start": 1157.2, "end": 1162.6, "text": " So for some embedded systems, you will find that our build root is putting the kernel", "tokens": [51062, 407, 337, 512, 16741, 3652, 11, 291, 486, 915, 300, 527, 1322, 5593, 307, 3372, 264, 28256, 51332], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 133, "seek": 114324, "start": 1162.6, "end": 1167.04, "text": " into the root file system by default.", "tokens": [51332, 666, 264, 5593, 3991, 1185, 538, 7576, 13, 51554], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 134, "seek": 114324, "start": 1167.04, "end": 1171.24, "text": " That's not, you can't do it here because you have got to start the kernel, you have", "tokens": [51554, 663, 311, 406, 11, 291, 393, 380, 360, 309, 510, 570, 291, 362, 658, 281, 722, 264, 28256, 11, 291, 362, 51764], "temperature": 0.0, "avg_logprob": -0.21524180163134327, "compression_ratio": 1.7242798353909465, "no_speech_prob": 0.04703384265303612}, {"id": 135, "seek": 117124, "start": 1171.24, "end": 1177.24, "text": " got to, you have got to start the kernel and then you are able to verify the dm-varity", "tokens": [50364, 658, 281, 11, 291, 362, 658, 281, 722, 264, 28256, 293, 550, 291, 366, 1075, 281, 16888, 264, 274, 76, 12, 8517, 507, 50664], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 136, "seek": 117124, "start": 1177.24, "end": 1179.1200000000001, "text": " tree.", "tokens": [50664, 4230, 13, 50758], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 137, "seek": 117124, "start": 1179.1200000000001, "end": 1183.8, "text": " For that reason, the kernel is located in the fit image and the fit image is verified", "tokens": [50758, 1171, 300, 1778, 11, 264, 28256, 307, 6870, 294, 264, 3318, 3256, 293, 264, 3318, 3256, 307, 31197, 50992], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 138, "seek": 117124, "start": 1183.8, "end": 1185.1200000000001, "text": " by the bootloader.", "tokens": [50992, 538, 264, 11450, 2907, 260, 13, 51058], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 139, "seek": 117124, "start": 1185.1200000000001, "end": 1190.64, "text": " So once we start the kernel, we know that the kernel is, the integrity of the kernel", "tokens": [51058, 407, 1564, 321, 722, 264, 28256, 11, 321, 458, 300, 264, 28256, 307, 11, 264, 16000, 295, 264, 28256, 51334], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 140, "seek": 117124, "start": 1190.64, "end": 1192.56, "text": " is given.", "tokens": [51334, 307, 2212, 13, 51430], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 141, "seek": 117124, "start": 1192.56, "end": 1197.64, "text": " If you start an application from root file system, it's read block-wise and it must be", "tokens": [51430, 759, 291, 722, 364, 3861, 490, 5593, 3991, 1185, 11, 309, 311, 1401, 3461, 12, 3711, 293, 309, 1633, 312, 51684], "temperature": 0.0, "avg_logprob": -0.23127026424229702, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.0020897272042930126}, {"id": 142, "seek": 119764, "start": 1197.64, "end": 1202.0, "text": " read into the memory and linked.", "tokens": [50364, 1401, 666, 264, 4675, 293, 9408, 13, 50582], "temperature": 0.0, "avg_logprob": -0.6790051209299188, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.6410022377967834}, {"id": 143, "seek": 119764, "start": 1202.0, "end": 1205.0800000000002, "text": " And if during reading block-wise, you have got to start the kernel, you have got to start", "tokens": [50582, 400, 498, 1830, 3760, 3461, 12, 3711, 11, 291, 362, 658, 281, 722, 264, 28256, 11, 291, 362, 658, 281, 722, 50736], "temperature": 0.0, "avg_logprob": -0.6790051209299188, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.6410022377967834}, {"id": 144, "seek": 119764, "start": 1205.0800000000002, "end": 1205.0800000000002, "text": "", "tokens": [], "temperature": 0.0, "avg_logprob": -0.6790051209299188, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.6410022377967834, "words": []}], "language": "en"}