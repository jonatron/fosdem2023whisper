{"text": " We continue with our next speaker, which is going to be a V extension. We continue with our next speaker, which is going to be kind of a follow-up of the previous one, because it's approximately the same topic, but this time about wrist drive and arm. So please welcome Remi. Hi, good afternoon, everyone. I hope you are done with the digestion. So, yeah, this pretty much follows up our compliments Karen's previous speech. But before I go into the details, obviously, I work for big companies, so I have to put this disclaimer. And then if I speak too fast or if I don't articulate properly, please stop. Please stop me. With that said, who am I? I don't think it matters much, but this is my 16th time in first day, and it's only my first presentation, so bear with me. Having said that, I don't work in this field at all, so just a fancy thing for me to do. So some history. So has anybody ever seen this outside the computer museum? Right. Yeah, so that's the Cray one. It's the first, indeed, it's the first vector processor. It's from the late or second half of the 70s. I wasn't even born back then. But in point being, it's the first vector processor, and we all now, finally, after almost 50 years, are coming back to this kind of, maybe coming back to this approach to calculations in computers. But for people in my generation, this is more what we associate with SIND before multimedia. So this is POD, the first video game that actually used the MMX, which MMX being the first SIND extensions in the consumer business, in the consumer space, let's say. So as I said, the MMX came in 1997, and that was 64-bit vectors. So you could compute over 64-bit at a time. Minded, back then, computers was pretty much only 32-bits. And two years later came SSE, and many, many, many versions of SSE. SSE2, which is more popular in multimedia use cases, 2000. I'm not going to go through all the details of SSE because there's like a billion, million versions. And AVX1 came in 2008. AVX2, which Karen mentioned, came in 2011. That was the first to have 256-bits vectors. Then AVX512, which was the topic of the previous presentation, officially came in 2013. But as Karen mentioned, the only real, real, proper CPUs were only out in 2017. On ARM side, the first SIND was actually 32-bit, only on ARM V6, 2002. That doesn't really seem to make sense, but that's because it's basically calculating as a 4 times 8-bits or 2 times 16-bit at a time. Then 128-bits came. There was no 64-bit SIMD on ARM. 28-bit came with ARM V7, so Cortex-A8, usually called Neon, officially called Advanced SIMD in 2005. And on ARM V8, it's pretty much the same. Now, it's not actually compatible on X86 or 64-bit, but it came with basically ARM V8 in 2012. It's also officially called Advanced SIMD, and it's also colloquially known as Neon. As for RISC-V, RISC-V is much more recent. There is no SIMD. The problem, and I've only summarized, this is only a short summary, there's way more extension, especially on the X86 side, is that every damn time you have to rewrite your assembly, and as the questions and answers in the previous talks and even the previous previous talk covered, this is kind of damn consuming. So, with that said, this was all fixed size SIMD, so what about viable length SIMD, which is what we will be talking about today. So, how would you go about doing it? Well, the simple way to do it is to just ask the CPU what is your vector size, and if you do RISC-V, this is how you do it. So, control-register read operation, the vector is called VL and B for vector lengths in bytes, and it will store in this case, T0, whatever, it's one register, the number of bytes in a vector, and with that you could then iterate. So, if you want to know the number of elements, well, you have to do a left shift to compute the number of elements, so if you want to have 32-bit elements, you divide by 4, shift by 2 bits. You could do it like that, and then you would write your main, you would take your C loop, you would convert it into assembler to operate on however many elements at a time, then you would probably unroll to, like, if you have space in your vector bank, you'd probably unroll to eliminate, try to hit up the latency a little bit because usually between instructions, if you operate only on one dataset, you will have inter-instruction latencies which are going to hurt your performance, so you typically, in multimedia, unroll twice, so you will do, work over two sets of vectors at the same time in parallel, and when you have done all of that, you will be working on however many, like, say, 32-bit, 32 items, 32 elements at a time, so you have to deal with ages because you might not have a multiple of 32 elements that you are dealing with. And that's fine, and that's one way to do it. In fact, last I checked, that's how Clang, LLVM, does the three vectorization on risk five if you enable it, even so you have, it literally starts by reading the vector lengths and then deal with ages and unrolls twice, and if it manages to implement, I mean, if you have enabled three vectorization and you have enabled the risk five vectors, but that's not really how you want to do it. But before we go on how to actually do it, what vector lengths are we dealing with here? So, obviously, well, as mentioned earlier, common values are 128 and 2,512 bits. So, both arm and risk five guarantee that even if you have a viable vector length, it's going to be at least 128 bits, and it's also going to be a power of two bits, which is kind of convenient for the calculations. So, as far as I've seen, there are announcements for real hardware which would have 256 and 312 bits that you should be able to buy at some point in the near future. More crazy stuff. I've seen actually, like, designs also being announced with 1,000 bits. I don't know if they're going to store all those bits in the physical register bank, but it would be interesting if it happens. And I haven't seen theoretical designs at 4,000 bits, and I mean theoretical to the point that there is a schema, theoretical in this case, I mean that there are actual schematics of how you could write a chip and they have even simulation of the performance that the chip would get in certain algorithms as to whether it's actually practically implementable in an existing industrial process. I don't know. I'm not a specialist in electronics, but that sounds a little bit questionable. So, in theory, on the syntactic level, so in the instruction and coding level, you can have up to two power 16 bits, at least on S5. I'm not sure about that, actually. So, how you actually do vector lengths, how you're supposed to do a viable vector length, a SIMD or vector processing, as it's often called, also, practically vector and SIMD are synonyms. Well, at first you have to use predication, which is very highly prevalent in viable vector length scenarios. Now, it's not a completely new concept. Kieran mentioned the K-mask in AVX, so AVX also has predication, but in viable vector lengths, it's really essential because this is basically the programming model on viable vector lengths and or loops is essentially built on predication. And that's true both for ARM and RISC-5. So, a predicate is a vector of Boolean. So, like the K-mask in X86, it's called the p-vector in ARM, and it's the mask vector in RISC-5. And as Kieran said, kind of repeating, but it just specifies which of the elements in your vector, it specifies which ones you will be loading or modifying or storing out of a given instruction. So, if it's a load instruction, which values you load for memory and overwrite into the register, if it's a stored instruction, it's going to be the other way, which values in memory are going to overwrite versus which ones are going to live as they are. And if it's a calculation instruction, vector to vector, then it's going to affect which ones, which results are actually stored into the register versus which ones are just discarded. So, on ARM-V9 or SVE, one way you would typically do now your SVE loop instead of, say, your NEON loop, is you would start by counting down, you would initialize, say, extend to a zero, and then you would... So, you have to imagine here that you have your actual NEON or SVE loop, so you will check... You have this funny instruction, which is actually called YLT or YLLO, and you initialize the p-zero vector in this case, which is one of the predicate registers to say that, essentially, you want to count how many elements you still have in your input data. So, here, we have... We imagine that X0 is the number of elements we have been given to this function. X10 is the count of how far we've been, so it's our iterator. And we'll say... Essentially, what we'll say is, as long as X10 is larger... As long as the number of elements we still have... So, as long as X0 is larger than the size of the vector that the CPU can handle, we'll just set the predicate to handle to be clear, so we'll use the full size of the vector for our programming. And once the number of elements is more than zero, but strictly less than the vector size than the CPU can handle, then we'll start basically just ignoring the values at the end of the vector, so we'll have a bunch of ones, and then at the end, a bunch of zeros. And this is how you abstract away and hide away the complexity of dealing with the edge in your loop. So, essentially, by doing this, you don't care what is the actual capacity of... You don't actually need, at any point, to know how many elements you're dealing with in any iteration of your loop, because it's all hidden away by the... Essentially, the size of the vector and the size of the predicate are matched, so you don't actually care. And you also don't need to deal with edges, because, well, even if there's one or two or three or four elements left over at the end, you can just deal with them in the last iteration, which, of course, will be a little bit less efficient than using the full size of the vector, but it's still much faster than having a separate edge if only because you will not be stressing the instruction cache of the CPU. So that's predication. Now, unrolling. If you thought about it, all that I just said with predication, it doesn't really work with unrolling, because now you've counted down... You've set your predicate vector to count down how many elements you have still in your total count of elements. You can't unroll, because now, like, you've said, oh, I have 10 elements left, I'm going to use 10 elements in my vector, but if you have... It just doesn't work, like, because if you had, like, one and a half vector left, you would want to have one predicate with all the bit set and another predicate with half of the bit set. This doesn't really work very well. And, yes, now, it's a bit of a hot tech. Maybe I will never be ever again allowed to write a session-peck code after this, but just don't unroll if you use variable vector lengths. Now, there may be cases where you can unroll because, naturally, you have some kind of parallel in your design aspect in your algorithm, but the idea of vector processing is that we have higher latency and larger vectors, which, in the end, result in higher throughput, and we shouldn't need to unroll. I'm sure you will find actual designs real hardware, real processors, where it will be faster if you do unroll, and how much you need to unroll will depend on the design. And, of course, if you are trying to squeeze the very last MIPS out of a given specific piece of hardware, then maybe you should unroll, but, I think, generally speaking, at least you shouldn't start by unrolling. And another interesting thing to keep in mind, which kind of already mentioned in the previous slide, is that you don't have alignment issues. The one common problem with CMD instruction set is that the load and store instructions require overaligned data, typically aligned on the side of the vector, which is very inconvenient when you're operating from C or C++ code, because it's usually C or C++ allocator will only allocate align on whatever the ABI specifies, which on RBA, it would be 16 bytes for the stack and 8 bytes for the heap. So, usually, while at least both SV and RIC5 vectors, the alignment needed is only the alignment of the element, and it's not the alignment, it's not the side of the vector. So, if you are operating on, say, 4 bytes pieces of data elements, then you only need your vectors to be aligned on 4 bytes, which is a very nice property for dealing, especially on the edge cases, and also you don't have to deal with, like, if you have one input that is perfectly aligned and the output is not perfectly aligned, like, you end up having this weird mismatch and you end up having to deal with different edge cases, it's really a mess. With vector processing, you don't do that, so you don't actually have to worry about it. So, with that, we've covered generality, so how is it looking on ARM side, and then we'll see RIC5 side, because it's a bit weird if I would... I thought, like, to put everything together, but then it becomes a huge mess. So, it's going to be a bit repetitive, because, of course, there's a lot of similarities, so SVE came about, like, five years ago, a little bit more than five years ago, I think it was announced late 2016, if I recall correctly. It was pretty much less on multimedia. It was explicitly meant for other things, like, well, scientific applications, or engineering modeling and this kind of stuff, well, HPC, and so nobody used it. At least nobody in this room used it. This was fixed with SVE2, which is sometimes called ARMv9, because it kind of comes with ARMv9, but it's really called SVE2. Fixed that issue, the realisation that, actually, this is a good idea. This pattern programming model is also interesting for multimedia and crypto, which was also missing from SVE1. And so what they did is they just took, so which neomonics are missing, and added those, and it's pretty much the same mnemonics you just add the predicate register. That's why this is, of course, a little bit more complicated, but as I mentioned, you just use a while instruction, which will then provision your predicate, and you have to pick the element size so that, of course, this adds up correctly, and then you have a new set of branch conditions, so first element, last element, and so on and so forth. So the remaining elements will be determined by the predicate register, and the predicate register will set the condition flag, and the while instruction will also subtract. There is a count, the number of processed elements from your output register. And yeah, at this point, stop pretending that I'm at risk. How do you detect this stuff? So there's a processor macro, otherwise, as usual, on ARMv8, you have a bunch of privileged registers for the OS to look at, and then you have also Linux, you have a bunch of flags in the auxiliary vector bit, so it's all classic. Another OS that you're out of luck. Availability, so as we said, 2016, but it didn't really work for us. SV2 was specified in 2019, but so the real hardware came earlier last year, so Cortex-AX2 and all the other things from dynamic IQ 110. So Samsung actually knows 2,200, and so Cortex-AX2 and all the other things, they do have SVE, unfortunately, it's only 128-bit vectors, and it's pretty damn expensive, but if you want to do it, you can find the hardware. So RIS5, it's a different model. Can I add? Yeah. There's also the Alibaba one, the Yi-Tian. Yeah, maybe. It's possible, yes. It's only available in China, but it's available. So on RIS5, the predication is a little bit different, so they have separation between element count and the actual predicate. And so in practice in multimedia, maybe not in David, but usually you don't use the predicate at all, so we will instead just count the elements. This is the instruction you always find at the beginning of the loop, which considers the vectors. So in this case, what we say is that we have a certain number of input elements. We want to get the number of output parameters and the number of elements the CPU will deal with in the iteration. We then have to say the size of the element in bits, in this case, for instance, 16 bits. The group size, which is kind of free unrolling, it will automatically, if you set it to 2, it will use all the, and you say you want to use vector 8, it will use vector 8 and vector 9 at the same time, for instance. And tail mode, we always set it to agnostic because we don't really care about tail mode and mask mode, we also always set it to agnostic. There might be use cases where you need to do something else, which might be a little bit slower, but usually you don't. This is about how to deal with the stuff that is masked or with the element that are at the end of the vector which we don't care about. Usually you don't care about them, so you just tell the CPU you don't care about them. One cool thing about RISC-V, the floating point registers are separate from the vectors and like on ARM, so you have more registers available if you have hybrid calculations between scalar and vector side. But do mind the floating point convention, calling convention when this happens, otherwise you will screw up your register state and confuse your CPU. The interesting stuff also about RISC-V, they have segmented load and store, which is similar to structured load and store in ARM, but they can do it up to 8 structures, whereas ARM is only up to 4. What is much more interesting perhaps is strided loads and store where you can say, I have this register X which contains a value and that's going to be my stride. So for instance with that you can put the width of your video inside one register and you can load all the pixels in a column in an instruction without having to do weird shuffling and whatever. Does that actually perform a practice? I think that's going to depend on the design, but normally it should be in the data cache which should be okay. So I'll come to that. Yes, on the downside you don't have transposer or zipping instructions, which should be annoying, which is kind of the same, so you have to replace it with strides. So it's fine if you want to take every second element from one vector and so on. Feature detection, they have very, very detailed pre-processor feature flags. I mean you can download the slides if you're interested. On the other hand, on runtime detection it's pretty crappy. You have to trust the device tree node. So you have to trust the boot loader to actually tell it to your OS correctly in the device tree data structure and otherwise there is a flag in there. So the V, the Vth bit, so the 21, because V is the 22nd later in the alphabet is a vector flag in the auxiliary vector for hardware capabilities on Linux. Availability, unfortunately at this time there is no hardware. Ali Baba, sorry, T-Head has made hardware available but it's implementing version 0.71 from about 18 months before the standardised specification which is implemented by Clang and GCC. So you can kind of work with that and it gives you some idea of the performance but you're going to have to rewrite stuff because it's not completely bit compatible so it's kind of annoying. I don't know when the stuff is going to happen. I'm pretty sure it's going to happen but I would guess by the end of this year we are going to see hardware available. Also I think one kind of not answering or dodging the previous question but because we have so many different vendors on RISC 5 and I think there's more than I did. I only listed three here but I think there's other. There might be big difference between the performance characteristics of the different vendors. These are our references. Yes, I have just a few questions. Have you heard of the SVP64 project from Lever SoC yet which is a kind of similar vector approach for PowerPC? No, I haven't looked at PowerPC at all. Another question that I had with my own CIDD programming workers we often have applications that are inherently horizontal. For example, let's say you are writing a vectorized string search operation or you're doing something like decoding JPEGs where you have these 8.8 blocks where you want to do some sort of close-in transform on them and they have this fixed size and depending on the vector size you want to break them up or you maybe have to process multiple of them at the same time. Is there an intelligent way to solve this? I've had this case. The question is when you have a naturally fixed size input kind of block that you want to process at the time how do you do this? Because then you actually want to have a fixed size vector in effect, paraphrasing the question. I've had this case with the SVP64 a couple of times. One way is to just check that the vector size of the CPU is big enough and just do one at a time. If you can, try to do it at a time because it's always going to be a power of 2 so you should be able relatively easily to parallelize. Obviously the ideal situation is to parallelize. What you will have a problem is if your dataset is larger than the vector then it's going to become complicated for you. On RISC-5 you can deal with this with the group multiplier which will allow you to use multiple vectors as a single vector. And the last question I have is how do you realistically test vectorized triangles? When the hardware you have only supports one vector length at most so you have to probably use some sort of relation to set up for this? Most of the loops will not depend. So the question is how do you test a different vector size for validation I guess. Most of the loops don't really care about the vector size because if you have a simple case where you follow the simple pattern it doesn't really care what the vector size is except for benchmarking of course and you have a problem. Otherwise QMU and Spark at least for RISC-5 support any vector size to give that as long as it's a valid one from specification plan point. Do you realistically really test for that? Or do you just say it's simply not going to be a problem? I mean personally when I've had the situation where I had a fixed size input and I had to test with different vector size and I tested with different vector size in most cases you don't actually care. I mean then it's a matter of choice of you do your testing and no strict you want to be with the validation I think. Thank you. We have no one on question now? Firstly disclaimer, I'm related to the Leversock project with SB64. It's similar to RISC-5 vectors but not exactly the same but they share a lot of the common ideas. You mentioned a very good point that CMD is not vector processing. In order we had to try to report some code from Neon to SV2 and it was less than suboptimal let's say. We had to revert back to the original C algorithm.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.0, "text": " We continue with our next speaker, which is going to be a", "tokens": [492, 2354, 365, 527, 958, 8145, 11, 597, 307, 516, 281, 312, 257], "temperature": 0.0, "avg_logprob": -0.9104099273681641, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.3915795087814331}, {"id": 1, "seek": 0, "start": 14.0, "end": 20.0, "text": " V extension.", "tokens": [691, 10320, 13], "temperature": 0.0, "avg_logprob": -0.9104099273681641, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.3915795087814331}, {"id": 2, "seek": 0, "start": 20.0, "end": 28.0, "text": " We continue with our next speaker, which is going to be", "tokens": [492, 2354, 365, 527, 958, 8145, 11, 597, 307, 516, 281, 312], "temperature": 0.0, "avg_logprob": -0.9104099273681641, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.3915795087814331}, {"id": 3, "seek": 2800, "start": 28.0, "end": 32.0, "text": " kind of a follow-up of the previous one, because it's", "tokens": [733, 295, 257, 1524, 12, 1010, 295, 264, 3894, 472, 11, 570, 309, 311], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 4, "seek": 2800, "start": 32.0, "end": 35.0, "text": " approximately the same topic, but this time about wrist drive", "tokens": [10447, 264, 912, 4829, 11, 457, 341, 565, 466, 15043, 3332], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 5, "seek": 2800, "start": 35.0, "end": 36.0, "text": " and arm.", "tokens": [293, 3726, 13], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 6, "seek": 2800, "start": 36.0, "end": 38.0, "text": " So please welcome Remi.", "tokens": [407, 1767, 2928, 4080, 72, 13], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 7, "seek": 2800, "start": 38.0, "end": 45.0, "text": " Hi, good afternoon, everyone.", "tokens": [2421, 11, 665, 6499, 11, 1518, 13], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 8, "seek": 2800, "start": 45.0, "end": 47.0, "text": " I hope you are done with the digestion.", "tokens": [286, 1454, 291, 366, 1096, 365, 264, 40560, 13], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 9, "seek": 2800, "start": 47.0, "end": 51.0, "text": " So, yeah, this pretty much follows up our", "tokens": [407, 11, 1338, 11, 341, 1238, 709, 10002, 493, 527], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 10, "seek": 2800, "start": 51.0, "end": 53.0, "text": " compliments Karen's previous speech.", "tokens": [35468, 14834, 311, 3894, 6218, 13], "temperature": 0.0, "avg_logprob": -0.3065029098874047, "compression_ratio": 1.4702970297029703, "no_speech_prob": 0.0019156329799443483}, {"id": 11, "seek": 5300, "start": 53.0, "end": 59.0, "text": " But before I go into the details, obviously, I work for big", "tokens": [583, 949, 286, 352, 666, 264, 4365, 11, 2745, 11, 286, 589, 337, 955], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 12, "seek": 5300, "start": 59.0, "end": 61.0, "text": " companies, so I have to put this disclaimer.", "tokens": [3431, 11, 370, 286, 362, 281, 829, 341, 40896, 13], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 13, "seek": 5300, "start": 61.0, "end": 64.0, "text": " And then if I speak too fast or if I don't articulate", "tokens": [400, 550, 498, 286, 1710, 886, 2370, 420, 498, 286, 500, 380, 30305], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 14, "seek": 5300, "start": 64.0, "end": 66.0, "text": " properly, please stop.", "tokens": [6108, 11, 1767, 1590, 13], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 15, "seek": 5300, "start": 66.0, "end": 68.0, "text": " Please stop me.", "tokens": [2555, 1590, 385, 13], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 16, "seek": 5300, "start": 68.0, "end": 70.0, "text": " With that said, who am I?", "tokens": [2022, 300, 848, 11, 567, 669, 286, 30], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 17, "seek": 5300, "start": 70.0, "end": 72.0, "text": " I don't think it matters much, but this is my 16th time", "tokens": [286, 500, 380, 519, 309, 7001, 709, 11, 457, 341, 307, 452, 3165, 392, 565], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 18, "seek": 5300, "start": 72.0, "end": 74.0, "text": " in first day, and it's only my first presentation,", "tokens": [294, 700, 786, 11, 293, 309, 311, 787, 452, 700, 5860, 11], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 19, "seek": 5300, "start": 74.0, "end": 75.0, "text": " so bear with me.", "tokens": [370, 6155, 365, 385, 13], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 20, "seek": 5300, "start": 75.0, "end": 78.0, "text": " Having said that, I don't work in this field at all,", "tokens": [10222, 848, 300, 11, 286, 500, 380, 589, 294, 341, 2519, 412, 439, 11], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 21, "seek": 5300, "start": 78.0, "end": 80.0, "text": " so just a fancy thing for me to do.", "tokens": [370, 445, 257, 10247, 551, 337, 385, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.13544943795275333, "compression_ratio": 1.614814814814815, "no_speech_prob": 0.0008575568208470941}, {"id": 22, "seek": 8000, "start": 80.0, "end": 83.0, "text": " So some history.", "tokens": [407, 512, 2503, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 23, "seek": 8000, "start": 83.0, "end": 87.0, "text": " So has anybody ever seen this outside the computer museum?", "tokens": [407, 575, 4472, 1562, 1612, 341, 2380, 264, 3820, 8441, 30], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 24, "seek": 8000, "start": 87.0, "end": 88.0, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 25, "seek": 8000, "start": 88.0, "end": 89.0, "text": " Yeah, so that's the Cray one.", "tokens": [865, 11, 370, 300, 311, 264, 383, 3458, 472, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 26, "seek": 8000, "start": 89.0, "end": 93.0, "text": " It's the first, indeed, it's the first vector processor.", "tokens": [467, 311, 264, 700, 11, 6451, 11, 309, 311, 264, 700, 8062, 15321, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 27, "seek": 8000, "start": 93.0, "end": 96.0, "text": " It's from the late or second half of the 70s.", "tokens": [467, 311, 490, 264, 3469, 420, 1150, 1922, 295, 264, 5285, 82, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 28, "seek": 8000, "start": 96.0, "end": 98.0, "text": " I wasn't even born back then.", "tokens": [286, 2067, 380, 754, 4232, 646, 550, 13], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 29, "seek": 8000, "start": 98.0, "end": 101.0, "text": " But in point being, it's the first vector processor,", "tokens": [583, 294, 935, 885, 11, 309, 311, 264, 700, 8062, 15321, 11], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 30, "seek": 8000, "start": 101.0, "end": 103.0, "text": " and we all now, finally, after almost 50 years,", "tokens": [293, 321, 439, 586, 11, 2721, 11, 934, 1920, 2625, 924, 11], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 31, "seek": 8000, "start": 103.0, "end": 106.0, "text": " are coming back to this kind of, maybe coming back to this", "tokens": [366, 1348, 646, 281, 341, 733, 295, 11, 1310, 1348, 646, 281, 341], "temperature": 0.0, "avg_logprob": -0.1923164178517239, "compression_ratio": 1.6945606694560669, "no_speech_prob": 0.00021042929438408464}, {"id": 32, "seek": 10600, "start": 106.0, "end": 110.0, "text": " approach to calculations in computers.", "tokens": [3109, 281, 20448, 294, 10807, 13], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 33, "seek": 10600, "start": 110.0, "end": 113.0, "text": " But for people in my generation, this is more what we associate", "tokens": [583, 337, 561, 294, 452, 5125, 11, 341, 307, 544, 437, 321, 14644], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 34, "seek": 10600, "start": 113.0, "end": 116.0, "text": " with SIND before multimedia.", "tokens": [365, 318, 1464, 35, 949, 49202, 13], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 35, "seek": 10600, "start": 116.0, "end": 120.0, "text": " So this is POD, the first video game that actually used", "tokens": [407, 341, 307, 430, 14632, 11, 264, 700, 960, 1216, 300, 767, 1143], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 36, "seek": 10600, "start": 120.0, "end": 126.0, "text": " the MMX, which MMX being the first SIND extensions", "tokens": [264, 34191, 55, 11, 597, 34191, 55, 885, 264, 700, 318, 1464, 35, 25129], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 37, "seek": 10600, "start": 126.0, "end": 130.0, "text": " in the consumer business, in the consumer space, let's say.", "tokens": [294, 264, 9711, 1606, 11, 294, 264, 9711, 1901, 11, 718, 311, 584, 13], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 38, "seek": 10600, "start": 130.0, "end": 135.0, "text": " So as I said, the MMX came in 1997, and that was 64-bit", "tokens": [407, 382, 286, 848, 11, 264, 34191, 55, 1361, 294, 22383, 11, 293, 300, 390, 12145, 12, 5260], "temperature": 0.0, "avg_logprob": -0.18255551026599243, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.00014481082325801253}, {"id": 39, "seek": 13500, "start": 135.0, "end": 136.0, "text": " vectors.", "tokens": [18875, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 40, "seek": 13500, "start": 136.0, "end": 138.0, "text": " So you could compute over 64-bit at a time.", "tokens": [407, 291, 727, 14722, 670, 12145, 12, 5260, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 41, "seek": 13500, "start": 138.0, "end": 142.0, "text": " Minded, back then, computers was pretty much only 32-bits.", "tokens": [13719, 292, 11, 646, 550, 11, 10807, 390, 1238, 709, 787, 8858, 12, 34010, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 42, "seek": 13500, "start": 142.0, "end": 145.0, "text": " And two years later came SSE, and many, many, many versions", "tokens": [400, 732, 924, 1780, 1361, 318, 5879, 11, 293, 867, 11, 867, 11, 867, 9606], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 43, "seek": 13500, "start": 145.0, "end": 146.0, "text": " of SSE.", "tokens": [295, 318, 5879, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 44, "seek": 13500, "start": 146.0, "end": 150.0, "text": " SSE2, which is more popular in multimedia use cases, 2000.", "tokens": [318, 5879, 17, 11, 597, 307, 544, 3743, 294, 49202, 764, 3331, 11, 8132, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 45, "seek": 13500, "start": 150.0, "end": 152.0, "text": " I'm not going to go through all the details of SSE", "tokens": [286, 478, 406, 516, 281, 352, 807, 439, 264, 4365, 295, 318, 5879], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 46, "seek": 13500, "start": 152.0, "end": 155.0, "text": " because there's like a billion, million versions.", "tokens": [570, 456, 311, 411, 257, 5218, 11, 2459, 9606, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 47, "seek": 13500, "start": 155.0, "end": 159.0, "text": " And AVX1 came in 2008.", "tokens": [400, 30198, 55, 16, 1361, 294, 10389, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 48, "seek": 13500, "start": 159.0, "end": 161.0, "text": " AVX2, which Karen mentioned, came in 2011.", "tokens": [30198, 55, 17, 11, 597, 14834, 2835, 11, 1361, 294, 10154, 13], "temperature": 0.0, "avg_logprob": -0.13009291887283325, "compression_ratio": 1.5458015267175573, "no_speech_prob": 6.298808875726536e-05}, {"id": 49, "seek": 16100, "start": 161.0, "end": 167.0, "text": " That was the first to have 256-bits vectors.", "tokens": [663, 390, 264, 700, 281, 362, 38882, 12, 34010, 18875, 13], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 50, "seek": 16100, "start": 167.0, "end": 172.0, "text": " Then AVX512, which was the topic of the previous presentation,", "tokens": [1396, 30198, 55, 20, 4762, 11, 597, 390, 264, 4829, 295, 264, 3894, 5860, 11], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 51, "seek": 16100, "start": 172.0, "end": 174.0, "text": " officially came in 2013.", "tokens": [12053, 1361, 294, 9012, 13], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 52, "seek": 16100, "start": 174.0, "end": 178.0, "text": " But as Karen mentioned, the only real, real, proper CPUs", "tokens": [583, 382, 14834, 2835, 11, 264, 787, 957, 11, 957, 11, 2296, 13199, 82], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 53, "seek": 16100, "start": 178.0, "end": 182.0, "text": " were only out in 2017.", "tokens": [645, 787, 484, 294, 6591, 13], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 54, "seek": 16100, "start": 182.0, "end": 186.0, "text": " On ARM side, the first SIND was actually 32-bit,", "tokens": [1282, 45209, 1252, 11, 264, 700, 318, 1464, 35, 390, 767, 8858, 12, 5260, 11], "temperature": 0.0, "avg_logprob": -0.16320488452911378, "compression_ratio": 1.359375, "no_speech_prob": 4.307473136577755e-05}, {"id": 55, "seek": 18600, "start": 186.0, "end": 191.0, "text": " only on ARM V6, 2002.", "tokens": [787, 322, 45209, 691, 21, 11, 17822, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 56, "seek": 18600, "start": 191.0, "end": 193.0, "text": " That doesn't really seem to make sense, but that's because", "tokens": [663, 1177, 380, 534, 1643, 281, 652, 2020, 11, 457, 300, 311, 570], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 57, "seek": 18600, "start": 193.0, "end": 195.0, "text": " it's basically calculating as a 4 times 8-bits or 2 times", "tokens": [309, 311, 1936, 28258, 382, 257, 1017, 1413, 1649, 12, 34010, 420, 568, 1413], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 58, "seek": 18600, "start": 195.0, "end": 198.0, "text": " 16-bit at a time.", "tokens": [3165, 12, 5260, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 59, "seek": 18600, "start": 198.0, "end": 200.0, "text": " Then 128-bits came.", "tokens": [1396, 29810, 12, 34010, 1361, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 60, "seek": 18600, "start": 200.0, "end": 202.0, "text": " There was no 64-bit SIMD on ARM.", "tokens": [821, 390, 572, 12145, 12, 5260, 24738, 35, 322, 45209, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 61, "seek": 18600, "start": 202.0, "end": 209.0, "text": " 28-bit came with ARM V7, so Cortex-A8, usually called Neon,", "tokens": [7562, 12, 5260, 1361, 365, 45209, 691, 22, 11, 370, 28522, 3121, 12, 32, 23, 11, 2673, 1219, 1734, 266, 11], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 62, "seek": 18600, "start": 209.0, "end": 212.0, "text": " officially called Advanced SIMD in 2005.", "tokens": [12053, 1219, 26951, 24738, 35, 294, 14394, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 63, "seek": 18600, "start": 212.0, "end": 215.0, "text": " And on ARM V8, it's pretty much the same.", "tokens": [400, 322, 45209, 691, 23, 11, 309, 311, 1238, 709, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.18505938191059207, "compression_ratio": 1.537117903930131, "no_speech_prob": 3.6792502214666456e-05}, {"id": 64, "seek": 21500, "start": 215.0, "end": 219.0, "text": " Now, it's not actually compatible on X86 or 64-bit,", "tokens": [823, 11, 309, 311, 406, 767, 18218, 322, 1783, 22193, 420, 12145, 12, 5260, 11], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 65, "seek": 21500, "start": 219.0, "end": 223.0, "text": " but it came with basically ARM V8 in 2012.", "tokens": [457, 309, 1361, 365, 1936, 45209, 691, 23, 294, 9125, 13], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 66, "seek": 21500, "start": 223.0, "end": 226.0, "text": " It's also officially called Advanced SIMD,", "tokens": [467, 311, 611, 12053, 1219, 26951, 24738, 35, 11], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 67, "seek": 21500, "start": 226.0, "end": 229.0, "text": " and it's also colloquially known as Neon.", "tokens": [293, 309, 311, 611, 1263, 29826, 2270, 2570, 382, 1734, 266, 13], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 68, "seek": 21500, "start": 229.0, "end": 232.0, "text": " As for RISC-V, RISC-V is much more recent.", "tokens": [1018, 337, 497, 2343, 34, 12, 53, 11, 497, 2343, 34, 12, 53, 307, 709, 544, 5162, 13], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 69, "seek": 21500, "start": 232.0, "end": 234.0, "text": " There is no SIMD.", "tokens": [821, 307, 572, 24738, 35, 13], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 70, "seek": 21500, "start": 234.0, "end": 237.0, "text": " The problem, and I've only summarized,", "tokens": [440, 1154, 11, 293, 286, 600, 787, 14611, 1602, 11], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 71, "seek": 21500, "start": 237.0, "end": 239.0, "text": " this is only a short summary, there's way more extension,", "tokens": [341, 307, 787, 257, 2099, 12691, 11, 456, 311, 636, 544, 10320, 11], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 72, "seek": 21500, "start": 239.0, "end": 242.0, "text": " especially on the X86 side, is that every damn time", "tokens": [2318, 322, 264, 1783, 22193, 1252, 11, 307, 300, 633, 8151, 565], "temperature": 0.0, "avg_logprob": -0.18865894135974703, "compression_ratio": 1.4904214559386972, "no_speech_prob": 0.00011536854435689747}, {"id": 73, "seek": 24200, "start": 242.0, "end": 245.0, "text": " you have to rewrite your assembly, and as the questions", "tokens": [291, 362, 281, 28132, 428, 12103, 11, 293, 382, 264, 1651], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 74, "seek": 24200, "start": 245.0, "end": 247.0, "text": " and answers in the previous talks and even the previous", "tokens": [293, 6338, 294, 264, 3894, 6686, 293, 754, 264, 3894], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 75, "seek": 24200, "start": 247.0, "end": 251.0, "text": " previous talk covered, this is kind of damn consuming.", "tokens": [3894, 751, 5343, 11, 341, 307, 733, 295, 8151, 19867, 13], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 76, "seek": 24200, "start": 251.0, "end": 256.0, "text": " So, with that said, this was all fixed size SIMD,", "tokens": [407, 11, 365, 300, 848, 11, 341, 390, 439, 6806, 2744, 24738, 35, 11], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 77, "seek": 24200, "start": 256.0, "end": 259.0, "text": " so what about viable length SIMD,", "tokens": [370, 437, 466, 22024, 4641, 24738, 35, 11], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 78, "seek": 24200, "start": 259.0, "end": 262.0, "text": " which is what we will be talking about today.", "tokens": [597, 307, 437, 321, 486, 312, 1417, 466, 965, 13], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 79, "seek": 24200, "start": 262.0, "end": 264.0, "text": " So, how would you go about doing it?", "tokens": [407, 11, 577, 576, 291, 352, 466, 884, 309, 30], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 80, "seek": 24200, "start": 264.0, "end": 267.0, "text": " Well, the simple way to do it is to just ask the CPU", "tokens": [1042, 11, 264, 2199, 636, 281, 360, 309, 307, 281, 445, 1029, 264, 13199], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 81, "seek": 24200, "start": 267.0, "end": 271.0, "text": " what is your vector size, and if you do RISC-V,", "tokens": [437, 307, 428, 8062, 2744, 11, 293, 498, 291, 360, 497, 2343, 34, 12, 53, 11], "temperature": 0.0, "avg_logprob": -0.15391448236280872, "compression_ratio": 1.650190114068441, "no_speech_prob": 0.00020514361676760018}, {"id": 82, "seek": 27100, "start": 271.0, "end": 272.0, "text": " this is how you do it.", "tokens": [341, 307, 577, 291, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 83, "seek": 27100, "start": 272.0, "end": 275.0, "text": " So, control-register read operation,", "tokens": [407, 11, 1969, 12, 3375, 1964, 1401, 6916, 11], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 84, "seek": 27100, "start": 275.0, "end": 278.0, "text": " the vector is called VL and B for vector lengths in bytes,", "tokens": [264, 8062, 307, 1219, 691, 43, 293, 363, 337, 8062, 26329, 294, 36088, 11], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 85, "seek": 27100, "start": 278.0, "end": 281.0, "text": " and it will store in this case, T0, whatever,", "tokens": [293, 309, 486, 3531, 294, 341, 1389, 11, 314, 15, 11, 2035, 11], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 86, "seek": 27100, "start": 281.0, "end": 284.0, "text": " it's one register, the number of bytes in a vector,", "tokens": [309, 311, 472, 7280, 11, 264, 1230, 295, 36088, 294, 257, 8062, 11], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 87, "seek": 27100, "start": 284.0, "end": 286.0, "text": " and with that you could then iterate.", "tokens": [293, 365, 300, 291, 727, 550, 44497, 13], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 88, "seek": 27100, "start": 286.0, "end": 288.0, "text": " So, if you want to know the number of elements,", "tokens": [407, 11, 498, 291, 528, 281, 458, 264, 1230, 295, 4959, 11], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 89, "seek": 27100, "start": 288.0, "end": 292.0, "text": " well, you have to do a left shift to compute", "tokens": [731, 11, 291, 362, 281, 360, 257, 1411, 5513, 281, 14722], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 90, "seek": 27100, "start": 292.0, "end": 294.0, "text": " the number of elements, so if you want to have", "tokens": [264, 1230, 295, 4959, 11, 370, 498, 291, 528, 281, 362], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 91, "seek": 27100, "start": 294.0, "end": 298.0, "text": " 32-bit elements, you divide by 4, shift by 2 bits.", "tokens": [8858, 12, 5260, 4959, 11, 291, 9845, 538, 1017, 11, 5513, 538, 568, 9239, 13], "temperature": 0.0, "avg_logprob": -0.17515237596299912, "compression_ratio": 1.7729083665338645, "no_speech_prob": 1.6065898307715543e-05}, {"id": 92, "seek": 29800, "start": 298.0, "end": 301.0, "text": " You could do it like that, and then you would write your main,", "tokens": [509, 727, 360, 309, 411, 300, 11, 293, 550, 291, 576, 2464, 428, 2135, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 93, "seek": 29800, "start": 301.0, "end": 303.0, "text": " you would take your C loop, you would convert it into assembler", "tokens": [291, 576, 747, 428, 383, 6367, 11, 291, 576, 7620, 309, 666, 8438, 1918], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 94, "seek": 29800, "start": 303.0, "end": 306.0, "text": " to operate on however many elements at a time,", "tokens": [281, 9651, 322, 4461, 867, 4959, 412, 257, 565, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 95, "seek": 29800, "start": 306.0, "end": 308.0, "text": " then you would probably unroll to, like,", "tokens": [550, 291, 576, 1391, 517, 3970, 281, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 96, "seek": 29800, "start": 308.0, "end": 311.0, "text": " if you have space in your vector bank,", "tokens": [498, 291, 362, 1901, 294, 428, 8062, 3765, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 97, "seek": 29800, "start": 311.0, "end": 313.0, "text": " you'd probably unroll to eliminate,", "tokens": [291, 1116, 1391, 517, 3970, 281, 13819, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 98, "seek": 29800, "start": 313.0, "end": 315.0, "text": " try to hit up the latency a little bit", "tokens": [853, 281, 2045, 493, 264, 27043, 257, 707, 857], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 99, "seek": 29800, "start": 315.0, "end": 317.0, "text": " because usually between instructions,", "tokens": [570, 2673, 1296, 9415, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 100, "seek": 29800, "start": 317.0, "end": 319.0, "text": " if you operate only on one dataset,", "tokens": [498, 291, 9651, 787, 322, 472, 28872, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 101, "seek": 29800, "start": 319.0, "end": 321.0, "text": " you will have inter-instruction latencies", "tokens": [291, 486, 362, 728, 12, 13911, 3826, 4465, 6464], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 102, "seek": 29800, "start": 321.0, "end": 323.0, "text": " which are going to hurt your performance,", "tokens": [597, 366, 516, 281, 4607, 428, 3389, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 103, "seek": 29800, "start": 323.0, "end": 326.0, "text": " so you typically, in multimedia, unroll twice,", "tokens": [370, 291, 5850, 11, 294, 49202, 11, 517, 3970, 6091, 11], "temperature": 0.0, "avg_logprob": -0.15022439016422756, "compression_ratio": 1.8571428571428572, "no_speech_prob": 2.3745385988149792e-05}, {"id": 104, "seek": 32600, "start": 326.0, "end": 329.0, "text": " so you will do, work over two sets of vectors", "tokens": [370, 291, 486, 360, 11, 589, 670, 732, 6352, 295, 18875], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 105, "seek": 32600, "start": 329.0, "end": 331.0, "text": " at the same time in parallel,", "tokens": [412, 264, 912, 565, 294, 8952, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 106, "seek": 32600, "start": 331.0, "end": 333.0, "text": " and when you have done all of that,", "tokens": [293, 562, 291, 362, 1096, 439, 295, 300, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 107, "seek": 32600, "start": 333.0, "end": 335.0, "text": " you will be working on however many, like, say,", "tokens": [291, 486, 312, 1364, 322, 4461, 867, 11, 411, 11, 584, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 108, "seek": 32600, "start": 335.0, "end": 338.0, "text": " 32-bit, 32 items, 32 elements at a time,", "tokens": [8858, 12, 5260, 11, 8858, 4754, 11, 8858, 4959, 412, 257, 565, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 109, "seek": 32600, "start": 338.0, "end": 340.0, "text": " so you have to deal with ages because you might not", "tokens": [370, 291, 362, 281, 2028, 365, 12357, 570, 291, 1062, 406], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 110, "seek": 32600, "start": 340.0, "end": 343.0, "text": " have a multiple of 32 elements that you are dealing with.", "tokens": [362, 257, 3866, 295, 8858, 4959, 300, 291, 366, 6260, 365, 13], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 111, "seek": 32600, "start": 343.0, "end": 345.0, "text": " And that's fine, and that's one way to do it.", "tokens": [400, 300, 311, 2489, 11, 293, 300, 311, 472, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 112, "seek": 32600, "start": 345.0, "end": 348.0, "text": " In fact, last I checked, that's how Clang, LLVM,", "tokens": [682, 1186, 11, 1036, 286, 10033, 11, 300, 311, 577, 2033, 656, 11, 441, 43, 53, 44, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 113, "seek": 32600, "start": 348.0, "end": 350.0, "text": " does the three vectorization on risk five", "tokens": [775, 264, 1045, 8062, 2144, 322, 3148, 1732], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 114, "seek": 32600, "start": 350.0, "end": 352.0, "text": " if you enable it, even so you have,", "tokens": [498, 291, 9528, 309, 11, 754, 370, 291, 362, 11], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 115, "seek": 32600, "start": 352.0, "end": 354.0, "text": " it literally starts by reading the vector lengths", "tokens": [309, 3736, 3719, 538, 3760, 264, 8062, 26329], "temperature": 0.0, "avg_logprob": -0.1664902429160832, "compression_ratio": 1.7249190938511327, "no_speech_prob": 6.437561387429014e-05}, {"id": 116, "seek": 35400, "start": 354.0, "end": 357.0, "text": " and then deal with ages and unrolls twice,", "tokens": [293, 550, 2028, 365, 12357, 293, 517, 3970, 82, 6091, 11], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 117, "seek": 35400, "start": 357.0, "end": 361.0, "text": " and if it manages to implement, I mean,", "tokens": [293, 498, 309, 22489, 281, 4445, 11, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 118, "seek": 35400, "start": 361.0, "end": 363.0, "text": " if you have enabled three vectorization", "tokens": [498, 291, 362, 15172, 1045, 8062, 2144], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 119, "seek": 35400, "start": 363.0, "end": 365.0, "text": " and you have enabled the risk five vectors,", "tokens": [293, 291, 362, 15172, 264, 3148, 1732, 18875, 11], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 120, "seek": 35400, "start": 365.0, "end": 369.0, "text": " but that's not really how you want to do it.", "tokens": [457, 300, 311, 406, 534, 577, 291, 528, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 121, "seek": 35400, "start": 369.0, "end": 372.0, "text": " But before we go on how to actually do it,", "tokens": [583, 949, 321, 352, 322, 577, 281, 767, 360, 309, 11], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 122, "seek": 35400, "start": 372.0, "end": 375.0, "text": " what vector lengths are we dealing with here?", "tokens": [437, 8062, 26329, 366, 321, 6260, 365, 510, 30], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 123, "seek": 35400, "start": 375.0, "end": 380.0, "text": " So, obviously, well, as mentioned earlier,", "tokens": [407, 11, 2745, 11, 731, 11, 382, 2835, 3071, 11], "temperature": 0.0, "avg_logprob": -0.12963604681270638, "compression_ratio": 1.6103286384976525, "no_speech_prob": 3.1739440601086244e-05}, {"id": 124, "seek": 38000, "start": 380.0, "end": 385.0, "text": " common values are 128 and 2,512 bits.", "tokens": [2689, 4190, 366, 2272, 23, 293, 568, 11, 20, 4762, 9239, 13], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 125, "seek": 38000, "start": 385.0, "end": 390.0, "text": " So, both arm and risk five guarantee that even if you have", "tokens": [407, 11, 1293, 3726, 293, 3148, 1732, 10815, 300, 754, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 126, "seek": 38000, "start": 390.0, "end": 394.0, "text": " a viable vector length, it's going to be at least 128 bits,", "tokens": [257, 22024, 8062, 4641, 11, 309, 311, 516, 281, 312, 412, 1935, 29810, 9239, 11], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 127, "seek": 38000, "start": 394.0, "end": 397.0, "text": " and it's also going to be a power of two bits,", "tokens": [293, 309, 311, 611, 516, 281, 312, 257, 1347, 295, 732, 9239, 11], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 128, "seek": 38000, "start": 397.0, "end": 400.0, "text": " which is kind of convenient for the calculations.", "tokens": [597, 307, 733, 295, 10851, 337, 264, 20448, 13], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 129, "seek": 38000, "start": 400.0, "end": 406.0, "text": " So, as far as I've seen, there are announcements", "tokens": [407, 11, 382, 1400, 382, 286, 600, 1612, 11, 456, 366, 23785], "temperature": 0.0, "avg_logprob": -0.18922318111766467, "compression_ratio": 1.5024875621890548, "no_speech_prob": 8.327893010573462e-05}, {"id": 130, "seek": 40600, "start": 406.0, "end": 411.0, "text": " for real hardware which would have 256 and 312 bits", "tokens": [337, 957, 8837, 597, 576, 362, 38882, 293, 805, 4762, 9239], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 131, "seek": 40600, "start": 411.0, "end": 417.0, "text": " that you should be able to buy at some point in the near future.", "tokens": [300, 291, 820, 312, 1075, 281, 2256, 412, 512, 935, 294, 264, 2651, 2027, 13], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 132, "seek": 40600, "start": 417.0, "end": 419.0, "text": " More crazy stuff.", "tokens": [5048, 3219, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 133, "seek": 40600, "start": 419.0, "end": 422.0, "text": " I've seen actually, like, designs also being announced", "tokens": [286, 600, 1612, 767, 11, 411, 11, 11347, 611, 885, 7548], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 134, "seek": 40600, "start": 422.0, "end": 424.0, "text": " with 1,000 bits.", "tokens": [365, 502, 11, 1360, 9239, 13], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 135, "seek": 40600, "start": 424.0, "end": 426.0, "text": " I don't know if they're going to store all those bits", "tokens": [286, 500, 380, 458, 498, 436, 434, 516, 281, 3531, 439, 729, 9239], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 136, "seek": 40600, "start": 426.0, "end": 429.0, "text": " in the physical register bank,", "tokens": [294, 264, 4001, 7280, 3765, 11], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 137, "seek": 40600, "start": 429.0, "end": 431.0, "text": " but it would be interesting if it happens.", "tokens": [457, 309, 576, 312, 1880, 498, 309, 2314, 13], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 138, "seek": 40600, "start": 431.0, "end": 435.0, "text": " And I haven't seen theoretical designs at 4,000 bits,", "tokens": [400, 286, 2378, 380, 1612, 20864, 11347, 412, 1017, 11, 1360, 9239, 11], "temperature": 0.0, "avg_logprob": -0.1087858588607223, "compression_ratio": 1.5396825396825398, "no_speech_prob": 4.58902504760772e-05}, {"id": 139, "seek": 43500, "start": 435.0, "end": 439.0, "text": " and I mean theoretical to the point that there is a schema,", "tokens": [293, 286, 914, 20864, 281, 264, 935, 300, 456, 307, 257, 34078, 11], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 140, "seek": 43500, "start": 439.0, "end": 441.0, "text": " theoretical in this case, I mean that there are actual", "tokens": [20864, 294, 341, 1389, 11, 286, 914, 300, 456, 366, 3539], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 141, "seek": 43500, "start": 441.0, "end": 444.0, "text": " schematics of how you could write a chip", "tokens": [956, 37541, 295, 577, 291, 727, 2464, 257, 11409], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 142, "seek": 43500, "start": 444.0, "end": 446.0, "text": " and they have even simulation of the performance", "tokens": [293, 436, 362, 754, 16575, 295, 264, 3389], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 143, "seek": 43500, "start": 446.0, "end": 449.0, "text": " that the chip would get in certain algorithms", "tokens": [300, 264, 11409, 576, 483, 294, 1629, 14642], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 144, "seek": 43500, "start": 449.0, "end": 452.0, "text": " as to whether it's actually practically implementable", "tokens": [382, 281, 1968, 309, 311, 767, 15667, 4445, 712], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 145, "seek": 43500, "start": 452.0, "end": 456.0, "text": " in an existing industrial process.", "tokens": [294, 364, 6741, 9987, 1399, 13], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 146, "seek": 43500, "start": 456.0, "end": 457.0, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 147, "seek": 43500, "start": 457.0, "end": 459.0, "text": " I'm not a specialist in electronics,", "tokens": [286, 478, 406, 257, 17008, 294, 20611, 11], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 148, "seek": 43500, "start": 459.0, "end": 462.0, "text": " but that sounds a little bit questionable.", "tokens": [457, 300, 3263, 257, 707, 857, 37158, 13], "temperature": 0.0, "avg_logprob": -0.14215772397050233, "compression_ratio": 1.7182539682539681, "no_speech_prob": 3.615626701503061e-05}, {"id": 149, "seek": 46200, "start": 462.0, "end": 465.0, "text": " So, in theory, on the syntactic level,", "tokens": [407, 11, 294, 5261, 11, 322, 264, 23980, 19892, 1496, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 150, "seek": 46200, "start": 465.0, "end": 467.0, "text": " so in the instruction and coding level,", "tokens": [370, 294, 264, 10951, 293, 17720, 1496, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 151, "seek": 46200, "start": 467.0, "end": 470.0, "text": " you can have up to two power 16 bits,", "tokens": [291, 393, 362, 493, 281, 732, 1347, 3165, 9239, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 152, "seek": 46200, "start": 470.0, "end": 471.0, "text": " at least on S5.", "tokens": [412, 1935, 322, 318, 20, 13], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 153, "seek": 46200, "start": 471.0, "end": 474.0, "text": " I'm not sure about that, actually.", "tokens": [286, 478, 406, 988, 466, 300, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 154, "seek": 46200, "start": 474.0, "end": 477.0, "text": " So, how you actually do vector lengths,", "tokens": [407, 11, 577, 291, 767, 360, 8062, 26329, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 155, "seek": 46200, "start": 477.0, "end": 479.0, "text": " how you're supposed to do a viable vector length,", "tokens": [577, 291, 434, 3442, 281, 360, 257, 22024, 8062, 4641, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 156, "seek": 46200, "start": 479.0, "end": 482.0, "text": " a SIMD or vector processing, as it's often called,", "tokens": [257, 24738, 35, 420, 8062, 9007, 11, 382, 309, 311, 2049, 1219, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 157, "seek": 46200, "start": 482.0, "end": 487.0, "text": " also, practically vector and SIMD are synonyms.", "tokens": [611, 11, 15667, 8062, 293, 24738, 35, 366, 5451, 2526, 2592, 13], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 158, "seek": 46200, "start": 487.0, "end": 490.0, "text": " Well, at first you have to use predication,", "tokens": [1042, 11, 412, 700, 291, 362, 281, 764, 3852, 8758, 11], "temperature": 0.0, "avg_logprob": -0.25806713104248047, "compression_ratio": 1.6326530612244898, "no_speech_prob": 2.5055067453649826e-05}, {"id": 159, "seek": 49000, "start": 490.0, "end": 496.0, "text": " which is very highly prevalent in viable vector length scenarios.", "tokens": [597, 307, 588, 5405, 30652, 294, 22024, 8062, 4641, 15077, 13], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 160, "seek": 49000, "start": 496.0, "end": 498.0, "text": " Now, it's not a completely new concept.", "tokens": [823, 11, 309, 311, 406, 257, 2584, 777, 3410, 13], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 161, "seek": 49000, "start": 498.0, "end": 502.0, "text": " Kieran mentioned the K-mask in AVX,", "tokens": [591, 38516, 2835, 264, 591, 12, 3799, 74, 294, 30198, 55, 11], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 162, "seek": 49000, "start": 502.0, "end": 505.0, "text": " so AVX also has predication,", "tokens": [370, 30198, 55, 611, 575, 3852, 8758, 11], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 163, "seek": 49000, "start": 505.0, "end": 510.0, "text": " but in viable vector lengths, it's really essential", "tokens": [457, 294, 22024, 8062, 26329, 11, 309, 311, 534, 7115], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 164, "seek": 49000, "start": 510.0, "end": 513.0, "text": " because this is basically the programming model", "tokens": [570, 341, 307, 1936, 264, 9410, 2316], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 165, "seek": 49000, "start": 513.0, "end": 517.0, "text": " on viable vector lengths and or loops", "tokens": [322, 22024, 8062, 26329, 293, 420, 16121], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 166, "seek": 49000, "start": 517.0, "end": 519.0, "text": " is essentially built on predication.", "tokens": [307, 4476, 3094, 322, 3852, 8758, 13], "temperature": 0.0, "avg_logprob": -0.1955781936645508, "compression_ratio": 1.6911764705882353, "no_speech_prob": 3.367543104104698e-05}, {"id": 167, "seek": 51900, "start": 519.0, "end": 522.0, "text": " And that's true both for ARM and RISC-5.", "tokens": [400, 300, 311, 2074, 1293, 337, 45209, 293, 497, 2343, 34, 12, 20, 13], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 168, "seek": 51900, "start": 522.0, "end": 525.0, "text": " So, a predicate is a vector of Boolean.", "tokens": [407, 11, 257, 3852, 8700, 307, 257, 8062, 295, 23351, 28499, 13], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 169, "seek": 51900, "start": 525.0, "end": 527.0, "text": " So, like the K-mask in X86,", "tokens": [407, 11, 411, 264, 591, 12, 3799, 74, 294, 1783, 22193, 11], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 170, "seek": 51900, "start": 527.0, "end": 532.0, "text": " it's called the p-vector in ARM,", "tokens": [309, 311, 1219, 264, 280, 12, 303, 1672, 294, 45209, 11], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 171, "seek": 51900, "start": 532.0, "end": 536.0, "text": " and it's the mask vector in RISC-5.", "tokens": [293, 309, 311, 264, 6094, 8062, 294, 497, 2343, 34, 12, 20, 13], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 172, "seek": 51900, "start": 536.0, "end": 538.0, "text": " And as Kieran said, kind of repeating,", "tokens": [400, 382, 591, 38516, 848, 11, 733, 295, 18617, 11], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 173, "seek": 51900, "start": 538.0, "end": 543.0, "text": " but it just specifies which of the elements in your vector,", "tokens": [457, 309, 445, 1608, 11221, 597, 295, 264, 4959, 294, 428, 8062, 11], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 174, "seek": 51900, "start": 543.0, "end": 545.0, "text": " it specifies which ones you will be loading", "tokens": [309, 1608, 11221, 597, 2306, 291, 486, 312, 15114], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 175, "seek": 51900, "start": 545.0, "end": 548.0, "text": " or modifying or storing out of a given instruction.", "tokens": [420, 42626, 420, 26085, 484, 295, 257, 2212, 10951, 13], "temperature": 0.0, "avg_logprob": -0.12327731809308452, "compression_ratio": 1.5897435897435896, "no_speech_prob": 1.2423915904946625e-05}, {"id": 176, "seek": 54800, "start": 548.0, "end": 549.0, "text": " So, if it's a load instruction,", "tokens": [407, 11, 498, 309, 311, 257, 3677, 10951, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 177, "seek": 54800, "start": 549.0, "end": 553.0, "text": " which values you load for memory and overwrite into the register,", "tokens": [597, 4190, 291, 3677, 337, 4675, 293, 670, 21561, 666, 264, 7280, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 178, "seek": 54800, "start": 553.0, "end": 554.0, "text": " if it's a stored instruction,", "tokens": [498, 309, 311, 257, 12187, 10951, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 179, "seek": 54800, "start": 554.0, "end": 555.0, "text": " it's going to be the other way,", "tokens": [309, 311, 516, 281, 312, 264, 661, 636, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 180, "seek": 54800, "start": 555.0, "end": 557.0, "text": " which values in memory are going to overwrite", "tokens": [597, 4190, 294, 4675, 366, 516, 281, 670, 21561], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 181, "seek": 54800, "start": 557.0, "end": 559.0, "text": " versus which ones are going to live as they are.", "tokens": [5717, 597, 2306, 366, 516, 281, 1621, 382, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 182, "seek": 54800, "start": 559.0, "end": 561.0, "text": " And if it's a calculation instruction,", "tokens": [400, 498, 309, 311, 257, 17108, 10951, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 183, "seek": 54800, "start": 561.0, "end": 565.0, "text": " vector to vector, then it's going to affect which ones,", "tokens": [8062, 281, 8062, 11, 550, 309, 311, 516, 281, 3345, 597, 2306, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 184, "seek": 54800, "start": 565.0, "end": 567.0, "text": " which results are actually stored into the register", "tokens": [597, 3542, 366, 767, 12187, 666, 264, 7280], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 185, "seek": 54800, "start": 567.0, "end": 570.0, "text": " versus which ones are just discarded.", "tokens": [5717, 597, 2306, 366, 445, 45469, 13], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 186, "seek": 54800, "start": 570.0, "end": 574.0, "text": " So, on ARM-V9 or SVE,", "tokens": [407, 11, 322, 45209, 12, 53, 24, 420, 318, 7540, 11], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 187, "seek": 54800, "start": 574.0, "end": 577.0, "text": " one way you would typically do now your SVE loop", "tokens": [472, 636, 291, 576, 5850, 360, 586, 428, 318, 7540, 6367], "temperature": 0.0, "avg_logprob": -0.12695336677658725, "compression_ratio": 2.0318725099601593, "no_speech_prob": 5.169290670892224e-05}, {"id": 188, "seek": 57700, "start": 577.0, "end": 579.0, "text": " instead of, say, your NEON loop,", "tokens": [2602, 295, 11, 584, 11, 428, 12384, 1928, 6367, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 189, "seek": 57700, "start": 579.0, "end": 582.0, "text": " is you would start by counting down,", "tokens": [307, 291, 576, 722, 538, 13251, 760, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 190, "seek": 57700, "start": 582.0, "end": 585.0, "text": " you would initialize, say, extend to a zero,", "tokens": [291, 576, 5883, 1125, 11, 584, 11, 10101, 281, 257, 4018, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 191, "seek": 57700, "start": 585.0, "end": 587.0, "text": " and then you would...", "tokens": [293, 550, 291, 576, 485], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 192, "seek": 57700, "start": 587.0, "end": 589.0, "text": " So, you have to imagine here", "tokens": [407, 11, 291, 362, 281, 3811, 510], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 193, "seek": 57700, "start": 589.0, "end": 593.0, "text": " that you have your actual NEON or SVE loop,", "tokens": [300, 291, 362, 428, 3539, 12384, 1928, 420, 318, 7540, 6367, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 194, "seek": 57700, "start": 593.0, "end": 594.0, "text": " so you will check...", "tokens": [370, 291, 486, 1520, 485], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 195, "seek": 57700, "start": 594.0, "end": 595.0, "text": " You have this funny instruction,", "tokens": [509, 362, 341, 4074, 10951, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 196, "seek": 57700, "start": 595.0, "end": 598.0, "text": " which is actually called YLT or YLLO,", "tokens": [597, 307, 767, 1219, 398, 43, 51, 420, 398, 43, 20184, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 197, "seek": 57700, "start": 598.0, "end": 600.0, "text": " and you initialize the p-zero vector in this case,", "tokens": [293, 291, 5883, 1125, 264, 280, 12, 32226, 8062, 294, 341, 1389, 11], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 198, "seek": 57700, "start": 600.0, "end": 603.0, "text": " which is one of the predicate registers", "tokens": [597, 307, 472, 295, 264, 3852, 8700, 38351], "temperature": 0.0, "avg_logprob": -0.14174580183185514, "compression_ratio": 1.6896551724137931, "no_speech_prob": 5.181095912121236e-05}, {"id": 199, "seek": 60300, "start": 603.0, "end": 607.0, "text": " to say that, essentially,", "tokens": [281, 584, 300, 11, 4476, 11], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 200, "seek": 60300, "start": 607.0, "end": 609.0, "text": " you want to count how many elements you still have", "tokens": [291, 528, 281, 1207, 577, 867, 4959, 291, 920, 362], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 201, "seek": 60300, "start": 609.0, "end": 610.0, "text": " in your input data.", "tokens": [294, 428, 4846, 1412, 13], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 202, "seek": 60300, "start": 610.0, "end": 611.0, "text": " So, here, we have...", "tokens": [407, 11, 510, 11, 321, 362, 485], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 203, "seek": 60300, "start": 611.0, "end": 613.0, "text": " We imagine that X0 is the number of elements", "tokens": [492, 3811, 300, 1783, 15, 307, 264, 1230, 295, 4959], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 204, "seek": 60300, "start": 613.0, "end": 615.0, "text": " we have been given to this function.", "tokens": [321, 362, 668, 2212, 281, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 205, "seek": 60300, "start": 615.0, "end": 617.0, "text": " X10 is the count of how far we've been,", "tokens": [1783, 3279, 307, 264, 1207, 295, 577, 1400, 321, 600, 668, 11], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 206, "seek": 60300, "start": 617.0, "end": 620.0, "text": " so it's our iterator.", "tokens": [370, 309, 311, 527, 17138, 1639, 13], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 207, "seek": 60300, "start": 620.0, "end": 621.0, "text": " And we'll say...", "tokens": [400, 321, 603, 584, 485], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 208, "seek": 60300, "start": 621.0, "end": 622.0, "text": " Essentially, what we'll say is,", "tokens": [23596, 11, 437, 321, 603, 584, 307, 11], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 209, "seek": 60300, "start": 622.0, "end": 625.0, "text": " as long as X10 is larger...", "tokens": [382, 938, 382, 1783, 3279, 307, 4833, 485], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 210, "seek": 60300, "start": 625.0, "end": 627.0, "text": " As long as the number of elements we still have...", "tokens": [1018, 938, 382, 264, 1230, 295, 4959, 321, 920, 362, 485], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 211, "seek": 60300, "start": 627.0, "end": 630.0, "text": " So, as long as X0 is larger than the size", "tokens": [407, 11, 382, 938, 382, 1783, 15, 307, 4833, 813, 264, 2744], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 212, "seek": 60300, "start": 630.0, "end": 632.0, "text": " of the vector that the CPU can handle,", "tokens": [295, 264, 8062, 300, 264, 13199, 393, 4813, 11], "temperature": 0.0, "avg_logprob": -0.12557033590368322, "compression_ratio": 1.8577075098814229, "no_speech_prob": 1.6835036149132065e-05}, {"id": 213, "seek": 63200, "start": 632.0, "end": 635.0, "text": " we'll just set the predicate to handle to be clear,", "tokens": [321, 603, 445, 992, 264, 3852, 8700, 281, 4813, 281, 312, 1850, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 214, "seek": 63200, "start": 635.0, "end": 639.0, "text": " so we'll use the full size of the vector for our programming.", "tokens": [370, 321, 603, 764, 264, 1577, 2744, 295, 264, 8062, 337, 527, 9410, 13], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 215, "seek": 63200, "start": 639.0, "end": 643.0, "text": " And once the number of elements is more than zero,", "tokens": [400, 1564, 264, 1230, 295, 4959, 307, 544, 813, 4018, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 216, "seek": 63200, "start": 643.0, "end": 645.0, "text": " but strictly less than the vector size", "tokens": [457, 20792, 1570, 813, 264, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 217, "seek": 63200, "start": 645.0, "end": 646.0, "text": " than the CPU can handle,", "tokens": [813, 264, 13199, 393, 4813, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 218, "seek": 63200, "start": 646.0, "end": 649.0, "text": " then we'll start basically just ignoring the values", "tokens": [550, 321, 603, 722, 1936, 445, 26258, 264, 4190], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 219, "seek": 63200, "start": 649.0, "end": 650.0, "text": " at the end of the vector,", "tokens": [412, 264, 917, 295, 264, 8062, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 220, "seek": 63200, "start": 650.0, "end": 651.0, "text": " so we'll have a bunch of ones,", "tokens": [370, 321, 603, 362, 257, 3840, 295, 2306, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 221, "seek": 63200, "start": 651.0, "end": 653.0, "text": " and then at the end, a bunch of zeros.", "tokens": [293, 550, 412, 264, 917, 11, 257, 3840, 295, 35193, 13], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 222, "seek": 63200, "start": 653.0, "end": 655.0, "text": " And this is how you abstract away and hide away", "tokens": [400, 341, 307, 577, 291, 12649, 1314, 293, 6479, 1314], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 223, "seek": 63200, "start": 655.0, "end": 659.0, "text": " the complexity of dealing with the edge in your loop.", "tokens": [264, 14024, 295, 6260, 365, 264, 4691, 294, 428, 6367, 13], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 224, "seek": 63200, "start": 659.0, "end": 661.0, "text": " So, essentially, by doing this,", "tokens": [407, 11, 4476, 11, 538, 884, 341, 11], "temperature": 0.0, "avg_logprob": -0.09427708639225489, "compression_ratio": 1.8149466192170818, "no_speech_prob": 2.1283862224663608e-05}, {"id": 225, "seek": 66100, "start": 661.0, "end": 663.0, "text": " you don't care what is the actual capacity of...", "tokens": [291, 500, 380, 1127, 437, 307, 264, 3539, 6042, 295, 485], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 226, "seek": 66100, "start": 663.0, "end": 665.0, "text": " You don't actually need, at any point, to know", "tokens": [509, 500, 380, 767, 643, 11, 412, 604, 935, 11, 281, 458], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 227, "seek": 66100, "start": 665.0, "end": 667.0, "text": " how many elements you're dealing with", "tokens": [577, 867, 4959, 291, 434, 6260, 365], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 228, "seek": 66100, "start": 667.0, "end": 668.0, "text": " in any iteration of your loop,", "tokens": [294, 604, 24784, 295, 428, 6367, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 229, "seek": 66100, "start": 668.0, "end": 671.0, "text": " because it's all hidden away by the...", "tokens": [570, 309, 311, 439, 7633, 1314, 538, 264, 485], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 230, "seek": 66100, "start": 671.0, "end": 672.0, "text": " Essentially, the size of the vector", "tokens": [23596, 11, 264, 2744, 295, 264, 8062], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 231, "seek": 66100, "start": 672.0, "end": 673.0, "text": " and the size of the predicate are matched,", "tokens": [293, 264, 2744, 295, 264, 3852, 8700, 366, 21447, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 232, "seek": 66100, "start": 673.0, "end": 674.0, "text": " so you don't actually care.", "tokens": [370, 291, 500, 380, 767, 1127, 13], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 233, "seek": 66100, "start": 674.0, "end": 676.0, "text": " And you also don't need to deal with edges,", "tokens": [400, 291, 611, 500, 380, 643, 281, 2028, 365, 8819, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 234, "seek": 66100, "start": 676.0, "end": 678.0, "text": " because, well, even if there's one or two or three", "tokens": [570, 11, 731, 11, 754, 498, 456, 311, 472, 420, 732, 420, 1045], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 235, "seek": 66100, "start": 678.0, "end": 680.0, "text": " or four elements left over at the end,", "tokens": [420, 1451, 4959, 1411, 670, 412, 264, 917, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 236, "seek": 66100, "start": 680.0, "end": 683.0, "text": " you can just deal with them in the last iteration,", "tokens": [291, 393, 445, 2028, 365, 552, 294, 264, 1036, 24784, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 237, "seek": 66100, "start": 683.0, "end": 685.0, "text": " which, of course, will be a little bit less efficient", "tokens": [597, 11, 295, 1164, 11, 486, 312, 257, 707, 857, 1570, 7148], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 238, "seek": 66100, "start": 685.0, "end": 688.0, "text": " than using the full size of the vector,", "tokens": [813, 1228, 264, 1577, 2744, 295, 264, 8062, 11], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 239, "seek": 66100, "start": 688.0, "end": 690.0, "text": " but it's still much faster than having a separate edge", "tokens": [457, 309, 311, 920, 709, 4663, 813, 1419, 257, 4994, 4691], "temperature": 0.0, "avg_logprob": -0.08178652002570334, "compression_ratio": 1.8666666666666667, "no_speech_prob": 2.6832565708900802e-05}, {"id": 240, "seek": 69000, "start": 690.0, "end": 692.0, "text": " if only because you will not be stressing", "tokens": [498, 787, 570, 291, 486, 406, 312, 48233], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 241, "seek": 69000, "start": 692.0, "end": 696.0, "text": " the instruction cache of the CPU.", "tokens": [264, 10951, 19459, 295, 264, 13199, 13], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 242, "seek": 69000, "start": 696.0, "end": 699.0, "text": " So that's predication.", "tokens": [407, 300, 311, 3852, 8758, 13], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 243, "seek": 69000, "start": 699.0, "end": 700.0, "text": " Now, unrolling.", "tokens": [823, 11, 517, 18688, 13], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 244, "seek": 69000, "start": 700.0, "end": 701.0, "text": " If you thought about it,", "tokens": [759, 291, 1194, 466, 309, 11], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 245, "seek": 69000, "start": 701.0, "end": 703.0, "text": " all that I just said with predication,", "tokens": [439, 300, 286, 445, 848, 365, 3852, 8758, 11], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 246, "seek": 69000, "start": 703.0, "end": 705.0, "text": " it doesn't really work with unrolling,", "tokens": [309, 1177, 380, 534, 589, 365, 517, 18688, 11], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 247, "seek": 69000, "start": 705.0, "end": 707.0, "text": " because now you've counted down...", "tokens": [570, 586, 291, 600, 20150, 760, 485], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 248, "seek": 69000, "start": 707.0, "end": 709.0, "text": " You've set your predicate vector to count down", "tokens": [509, 600, 992, 428, 3852, 8700, 8062, 281, 1207, 760], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 249, "seek": 69000, "start": 709.0, "end": 711.0, "text": " how many elements you have still", "tokens": [577, 867, 4959, 291, 362, 920], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 250, "seek": 69000, "start": 711.0, "end": 714.0, "text": " in your total count of elements.", "tokens": [294, 428, 3217, 1207, 295, 4959, 13], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 251, "seek": 69000, "start": 714.0, "end": 716.0, "text": " You can't unroll, because now, like,", "tokens": [509, 393, 380, 517, 3970, 11, 570, 586, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 252, "seek": 69000, "start": 716.0, "end": 718.0, "text": " you've said, oh, I have 10 elements left,", "tokens": [291, 600, 848, 11, 1954, 11, 286, 362, 1266, 4959, 1411, 11], "temperature": 0.0, "avg_logprob": -0.13761063204466842, "compression_ratio": 1.734375, "no_speech_prob": 2.802738526952453e-05}, {"id": 253, "seek": 71800, "start": 718.0, "end": 720.0, "text": " I'm going to use 10 elements in my vector,", "tokens": [286, 478, 516, 281, 764, 1266, 4959, 294, 452, 8062, 11], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 254, "seek": 71800, "start": 720.0, "end": 722.0, "text": " but if you have...", "tokens": [457, 498, 291, 362, 485], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 255, "seek": 71800, "start": 722.0, "end": 723.0, "text": " It just doesn't work, like,", "tokens": [467, 445, 1177, 380, 589, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 256, "seek": 71800, "start": 723.0, "end": 725.0, "text": " because if you had, like, one and a half vector left,", "tokens": [570, 498, 291, 632, 11, 411, 11, 472, 293, 257, 1922, 8062, 1411, 11], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 257, "seek": 71800, "start": 725.0, "end": 728.0, "text": " you would want to have one predicate with all the bit set", "tokens": [291, 576, 528, 281, 362, 472, 3852, 8700, 365, 439, 264, 857, 992], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 258, "seek": 71800, "start": 728.0, "end": 730.0, "text": " and another predicate with half of the bit set.", "tokens": [293, 1071, 3852, 8700, 365, 1922, 295, 264, 857, 992, 13], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 259, "seek": 71800, "start": 730.0, "end": 732.0, "text": " This doesn't really work very well.", "tokens": [639, 1177, 380, 534, 589, 588, 731, 13], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 260, "seek": 71800, "start": 732.0, "end": 735.0, "text": " And, yes, now, it's a bit of a hot tech.", "tokens": [400, 11, 2086, 11, 586, 11, 309, 311, 257, 857, 295, 257, 2368, 7553, 13], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 261, "seek": 71800, "start": 735.0, "end": 737.0, "text": " Maybe I will never be ever again allowed", "tokens": [2704, 286, 486, 1128, 312, 1562, 797, 4350], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 262, "seek": 71800, "start": 737.0, "end": 739.0, "text": " to write a session-peck code after this,", "tokens": [281, 2464, 257, 5481, 12, 494, 547, 3089, 934, 341, 11], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 263, "seek": 71800, "start": 739.0, "end": 744.0, "text": " but just don't unroll if you use variable vector lengths.", "tokens": [457, 445, 500, 380, 517, 3970, 498, 291, 764, 7006, 8062, 26329, 13], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 264, "seek": 71800, "start": 744.0, "end": 746.0, "text": " Now, there may be cases where you can unroll", "tokens": [823, 11, 456, 815, 312, 3331, 689, 291, 393, 517, 3970], "temperature": 0.0, "avg_logprob": -0.13475353686840502, "compression_ratio": 1.7380952380952381, "no_speech_prob": 3.512664625304751e-05}, {"id": 265, "seek": 74600, "start": 746.0, "end": 750.0, "text": " because, naturally, you have some kind of parallel", "tokens": [570, 11, 8195, 11, 291, 362, 512, 733, 295, 8952], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 266, "seek": 74600, "start": 750.0, "end": 753.0, "text": " in your design aspect in your algorithm,", "tokens": [294, 428, 1715, 4171, 294, 428, 9284, 11], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 267, "seek": 74600, "start": 753.0, "end": 757.0, "text": " but the idea of vector processing", "tokens": [457, 264, 1558, 295, 8062, 9007], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 268, "seek": 74600, "start": 757.0, "end": 761.0, "text": " is that we have higher latency and larger vectors,", "tokens": [307, 300, 321, 362, 2946, 27043, 293, 4833, 18875, 11], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 269, "seek": 74600, "start": 761.0, "end": 764.0, "text": " which, in the end, result in higher throughput,", "tokens": [597, 11, 294, 264, 917, 11, 1874, 294, 2946, 44629, 11], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 270, "seek": 74600, "start": 764.0, "end": 767.0, "text": " and we shouldn't need to unroll.", "tokens": [293, 321, 4659, 380, 643, 281, 517, 3970, 13], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 271, "seek": 74600, "start": 767.0, "end": 771.0, "text": " I'm sure you will find actual designs real hardware,", "tokens": [286, 478, 988, 291, 486, 915, 3539, 11347, 957, 8837, 11], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 272, "seek": 74600, "start": 771.0, "end": 773.0, "text": " real processors, where it will be faster if you do unroll,", "tokens": [957, 27751, 11, 689, 309, 486, 312, 4663, 498, 291, 360, 517, 3970, 11], "temperature": 0.0, "avg_logprob": -0.1270090870021545, "compression_ratio": 1.669683257918552, "no_speech_prob": 5.3191939514363185e-05}, {"id": 273, "seek": 77300, "start": 773.0, "end": 779.0, "text": " and how much you need to unroll will depend on the design.", "tokens": [293, 577, 709, 291, 643, 281, 517, 3970, 486, 5672, 322, 264, 1715, 13], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 274, "seek": 77300, "start": 779.0, "end": 782.0, "text": " And, of course, if you are trying to squeeze the very last", "tokens": [400, 11, 295, 1164, 11, 498, 291, 366, 1382, 281, 13578, 264, 588, 1036], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 275, "seek": 77300, "start": 782.0, "end": 786.0, "text": " MIPS out of a given specific piece of hardware,", "tokens": [13696, 6273, 484, 295, 257, 2212, 2685, 2522, 295, 8837, 11], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 276, "seek": 77300, "start": 786.0, "end": 788.0, "text": " then maybe you should unroll,", "tokens": [550, 1310, 291, 820, 517, 3970, 11], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 277, "seek": 77300, "start": 788.0, "end": 790.0, "text": " but, I think, generally speaking,", "tokens": [457, 11, 286, 519, 11, 5101, 4124, 11], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 278, "seek": 77300, "start": 790.0, "end": 793.0, "text": " at least you shouldn't start by unrolling.", "tokens": [412, 1935, 291, 4659, 380, 722, 538, 517, 18688, 13], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 279, "seek": 77300, "start": 793.0, "end": 795.0, "text": " And another interesting thing to keep in mind,", "tokens": [400, 1071, 1880, 551, 281, 1066, 294, 1575, 11], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 280, "seek": 77300, "start": 795.0, "end": 799.0, "text": " which kind of already mentioned in the previous slide,", "tokens": [597, 733, 295, 1217, 2835, 294, 264, 3894, 4137, 11], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 281, "seek": 77300, "start": 799.0, "end": 802.0, "text": " is that you don't have alignment issues.", "tokens": [307, 300, 291, 500, 380, 362, 18515, 2663, 13], "temperature": 0.0, "avg_logprob": -0.14815616607666016, "compression_ratio": 1.6085271317829457, "no_speech_prob": 4.240931593813002e-05}, {"id": 282, "seek": 80200, "start": 802.0, "end": 804.0, "text": " The one common problem with CMD instruction set", "tokens": [440, 472, 2689, 1154, 365, 20424, 35, 10951, 992], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 283, "seek": 80200, "start": 804.0, "end": 806.0, "text": " is that the load and store instructions", "tokens": [307, 300, 264, 3677, 293, 3531, 9415], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 284, "seek": 80200, "start": 806.0, "end": 808.0, "text": " require overaligned data,", "tokens": [3651, 670, 304, 16690, 1412, 11], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 285, "seek": 80200, "start": 808.0, "end": 810.0, "text": " typically aligned on the side of the vector,", "tokens": [5850, 17962, 322, 264, 1252, 295, 264, 8062, 11], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 286, "seek": 80200, "start": 810.0, "end": 812.0, "text": " which is very inconvenient when you're operating", "tokens": [597, 307, 588, 46196, 562, 291, 434, 7447], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 287, "seek": 80200, "start": 812.0, "end": 816.0, "text": " from C or C++ code, because it's usually C or C++ allocator", "tokens": [490, 383, 420, 383, 25472, 3089, 11, 570, 309, 311, 2673, 383, 420, 383, 25472, 12660, 1639], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 288, "seek": 80200, "start": 816.0, "end": 820.0, "text": " will only allocate align on whatever the ABI specifies,", "tokens": [486, 787, 35713, 7975, 322, 2035, 264, 316, 11291, 1608, 11221, 11], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 289, "seek": 80200, "start": 820.0, "end": 822.0, "text": " which on RBA, it would be 16 bytes for the stack", "tokens": [597, 322, 497, 9295, 11, 309, 576, 312, 3165, 36088, 337, 264, 8630], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 290, "seek": 80200, "start": 822.0, "end": 826.0, "text": " and 8 bytes for the heap.", "tokens": [293, 1649, 36088, 337, 264, 33591, 13], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 291, "seek": 80200, "start": 826.0, "end": 830.0, "text": " So, usually, while at least both SV and RIC5 vectors,", "tokens": [407, 11, 2673, 11, 1339, 412, 1935, 1293, 31910, 293, 497, 2532, 20, 18875, 11], "temperature": 0.0, "avg_logprob": -0.2140654296875, "compression_ratio": 1.6085409252669038, "no_speech_prob": 4.9075737479142845e-05}, {"id": 292, "seek": 83000, "start": 830.0, "end": 833.0, "text": " the alignment needed is only the alignment of the element,", "tokens": [264, 18515, 2978, 307, 787, 264, 18515, 295, 264, 4478, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 293, "seek": 83000, "start": 833.0, "end": 836.0, "text": " and it's not the alignment, it's not the side of the vector.", "tokens": [293, 309, 311, 406, 264, 18515, 11, 309, 311, 406, 264, 1252, 295, 264, 8062, 13], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 294, "seek": 83000, "start": 836.0, "end": 841.0, "text": " So, if you are operating on, say, 4 bytes pieces of data elements,", "tokens": [407, 11, 498, 291, 366, 7447, 322, 11, 584, 11, 1017, 36088, 3755, 295, 1412, 4959, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 295, "seek": 83000, "start": 841.0, "end": 844.0, "text": " then you only need your vectors to be aligned on 4 bytes,", "tokens": [550, 291, 787, 643, 428, 18875, 281, 312, 17962, 322, 1017, 36088, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 296, "seek": 83000, "start": 844.0, "end": 846.0, "text": " which is a very nice property for dealing,", "tokens": [597, 307, 257, 588, 1481, 4707, 337, 6260, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 297, "seek": 83000, "start": 846.0, "end": 849.0, "text": " especially on the edge cases,", "tokens": [2318, 322, 264, 4691, 3331, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 298, "seek": 83000, "start": 849.0, "end": 851.0, "text": " and also you don't have to deal with,", "tokens": [293, 611, 291, 500, 380, 362, 281, 2028, 365, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 299, "seek": 83000, "start": 851.0, "end": 855.0, "text": " like, if you have one input that is perfectly aligned", "tokens": [411, 11, 498, 291, 362, 472, 4846, 300, 307, 6239, 17962], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 300, "seek": 83000, "start": 855.0, "end": 857.0, "text": " and the output is not perfectly aligned,", "tokens": [293, 264, 5598, 307, 406, 6239, 17962, 11], "temperature": 0.0, "avg_logprob": -0.14371517275975756, "compression_ratio": 1.9067796610169492, "no_speech_prob": 7.856281445128843e-05}, {"id": 301, "seek": 85700, "start": 857.0, "end": 860.0, "text": " like, you end up having this weird mismatch", "tokens": [411, 11, 291, 917, 493, 1419, 341, 3657, 23220, 852], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 302, "seek": 85700, "start": 860.0, "end": 862.0, "text": " and you end up having to deal with different edge cases,", "tokens": [293, 291, 917, 493, 1419, 281, 2028, 365, 819, 4691, 3331, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 303, "seek": 85700, "start": 862.0, "end": 863.0, "text": " it's really a mess.", "tokens": [309, 311, 534, 257, 2082, 13], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 304, "seek": 85700, "start": 863.0, "end": 865.0, "text": " With vector processing, you don't do that,", "tokens": [2022, 8062, 9007, 11, 291, 500, 380, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 305, "seek": 85700, "start": 865.0, "end": 869.0, "text": " so you don't actually have to worry about it.", "tokens": [370, 291, 500, 380, 767, 362, 281, 3292, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 306, "seek": 85700, "start": 869.0, "end": 872.0, "text": " So, with that, we've covered generality,", "tokens": [407, 11, 365, 300, 11, 321, 600, 5343, 1337, 1860, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 307, "seek": 85700, "start": 872.0, "end": 874.0, "text": " so how is it looking on ARM side,", "tokens": [370, 577, 307, 309, 1237, 322, 45209, 1252, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 308, "seek": 85700, "start": 874.0, "end": 877.0, "text": " and then we'll see RIC5 side, because it's a bit weird", "tokens": [293, 550, 321, 603, 536, 497, 2532, 20, 1252, 11, 570, 309, 311, 257, 857, 3657], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 309, "seek": 85700, "start": 877.0, "end": 878.0, "text": " if I would...", "tokens": [498, 286, 576, 485], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 310, "seek": 85700, "start": 878.0, "end": 880.0, "text": " I thought, like, to put everything together,", "tokens": [286, 1194, 11, 411, 11, 281, 829, 1203, 1214, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 311, "seek": 85700, "start": 880.0, "end": 881.0, "text": " but then it becomes a huge mess.", "tokens": [457, 550, 309, 3643, 257, 2603, 2082, 13], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 312, "seek": 85700, "start": 881.0, "end": 883.0, "text": " So, it's going to be a bit repetitive,", "tokens": [407, 11, 309, 311, 516, 281, 312, 257, 857, 29404, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 313, "seek": 85700, "start": 883.0, "end": 885.0, "text": " because, of course, there's a lot of similarities,", "tokens": [570, 11, 295, 1164, 11, 456, 311, 257, 688, 295, 24197, 11], "temperature": 0.0, "avg_logprob": -0.12823159181618993, "compression_ratio": 1.6970684039087949, "no_speech_prob": 2.0900943127344362e-05}, {"id": 314, "seek": 88500, "start": 885.0, "end": 890.0, "text": " so SVE came about, like, five years ago,", "tokens": [370, 318, 7540, 1361, 466, 11, 411, 11, 1732, 924, 2057, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 315, "seek": 88500, "start": 890.0, "end": 892.0, "text": " a little bit more than five years ago,", "tokens": [257, 707, 857, 544, 813, 1732, 924, 2057, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 316, "seek": 88500, "start": 892.0, "end": 895.0, "text": " I think it was announced late 2016,", "tokens": [286, 519, 309, 390, 7548, 3469, 6549, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 317, "seek": 88500, "start": 895.0, "end": 896.0, "text": " if I recall correctly.", "tokens": [498, 286, 9901, 8944, 13], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 318, "seek": 88500, "start": 896.0, "end": 899.0, "text": " It was pretty much less on multimedia.", "tokens": [467, 390, 1238, 709, 1570, 322, 49202, 13], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 319, "seek": 88500, "start": 899.0, "end": 901.0, "text": " It was explicitly meant for other things,", "tokens": [467, 390, 20803, 4140, 337, 661, 721, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 320, "seek": 88500, "start": 901.0, "end": 904.0, "text": " like, well, scientific applications,", "tokens": [411, 11, 731, 11, 8134, 5821, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 321, "seek": 88500, "start": 904.0, "end": 909.0, "text": " or engineering modeling and this kind of stuff,", "tokens": [420, 7043, 15983, 293, 341, 733, 295, 1507, 11], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 322, "seek": 88500, "start": 909.0, "end": 914.0, "text": " well, HPC, and so nobody used it.", "tokens": [731, 11, 12557, 34, 11, 293, 370, 5079, 1143, 309, 13], "temperature": 0.0, "avg_logprob": -0.19632624596664586, "compression_ratio": 1.5363636363636364, "no_speech_prob": 7.285918400157243e-05}, {"id": 323, "seek": 91400, "start": 914.0, "end": 916.0, "text": " At least nobody in this room used it.", "tokens": [1711, 1935, 5079, 294, 341, 1808, 1143, 309, 13], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 324, "seek": 91400, "start": 916.0, "end": 919.0, "text": " This was fixed with SVE2,", "tokens": [639, 390, 6806, 365, 318, 7540, 17, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 325, "seek": 91400, "start": 919.0, "end": 922.0, "text": " which is sometimes called ARMv9,", "tokens": [597, 307, 2171, 1219, 45209, 85, 24, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 326, "seek": 91400, "start": 922.0, "end": 925.0, "text": " because it kind of comes with ARMv9,", "tokens": [570, 309, 733, 295, 1487, 365, 45209, 85, 24, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 327, "seek": 91400, "start": 925.0, "end": 929.0, "text": " but it's really called SVE2.", "tokens": [457, 309, 311, 534, 1219, 318, 7540, 17, 13], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 328, "seek": 91400, "start": 929.0, "end": 931.0, "text": " Fixed that issue, the realisation that, actually,", "tokens": [25538, 292, 300, 2734, 11, 264, 957, 7623, 300, 11, 767, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 329, "seek": 91400, "start": 931.0, "end": 932.0, "text": " this is a good idea.", "tokens": [341, 307, 257, 665, 1558, 13], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 330, "seek": 91400, "start": 932.0, "end": 934.0, "text": " This pattern programming model is also interesting", "tokens": [639, 5102, 9410, 2316, 307, 611, 1880], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 331, "seek": 91400, "start": 934.0, "end": 936.0, "text": " for multimedia and crypto,", "tokens": [337, 49202, 293, 17240, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 332, "seek": 91400, "start": 936.0, "end": 940.0, "text": " which was also missing from SVE1.", "tokens": [597, 390, 611, 5361, 490, 318, 7540, 16, 13], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 333, "seek": 91400, "start": 940.0, "end": 942.0, "text": " And so what they did is they just took,", "tokens": [400, 370, 437, 436, 630, 307, 436, 445, 1890, 11], "temperature": 0.0, "avg_logprob": -0.1757098629943326, "compression_ratio": 1.565040650406504, "no_speech_prob": 9.545592911308631e-05}, {"id": 334, "seek": 94200, "start": 942.0, "end": 944.0, "text": " so which neomonics are missing,", "tokens": [370, 597, 408, 24488, 1167, 366, 5361, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 335, "seek": 94200, "start": 944.0, "end": 947.0, "text": " and added those,", "tokens": [293, 3869, 729, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 336, "seek": 94200, "start": 947.0, "end": 949.0, "text": " and it's pretty much the same mnemonics", "tokens": [293, 309, 311, 1238, 709, 264, 912, 275, 25989, 266, 1167], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 337, "seek": 94200, "start": 949.0, "end": 952.0, "text": " you just add the predicate register.", "tokens": [291, 445, 909, 264, 3852, 8700, 7280, 13], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 338, "seek": 94200, "start": 952.0, "end": 954.0, "text": " That's why this is, of course, a little bit more complicated,", "tokens": [663, 311, 983, 341, 307, 11, 295, 1164, 11, 257, 707, 857, 544, 6179, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 339, "seek": 94200, "start": 954.0, "end": 957.0, "text": " but as I mentioned, you just use a while instruction,", "tokens": [457, 382, 286, 2835, 11, 291, 445, 764, 257, 1339, 10951, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 340, "seek": 94200, "start": 957.0, "end": 959.0, "text": " which will then provision your predicate,", "tokens": [597, 486, 550, 17225, 428, 3852, 8700, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 341, "seek": 94200, "start": 959.0, "end": 961.0, "text": " and you have to pick the element size", "tokens": [293, 291, 362, 281, 1888, 264, 4478, 2744], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 342, "seek": 94200, "start": 961.0, "end": 963.0, "text": " so that, of course, this adds up correctly,", "tokens": [370, 300, 11, 295, 1164, 11, 341, 10860, 493, 8944, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 343, "seek": 94200, "start": 963.0, "end": 965.0, "text": " and then you have a new set of branch conditions,", "tokens": [293, 550, 291, 362, 257, 777, 992, 295, 9819, 4487, 11], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 344, "seek": 94200, "start": 965.0, "end": 971.0, "text": " so first element, last element, and so on and so forth.", "tokens": [370, 700, 4478, 11, 1036, 4478, 11, 293, 370, 322, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.194022634136143, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.00010273900261381641}, {"id": 345, "seek": 97100, "start": 971.0, "end": 974.0, "text": " So the remaining elements will be determined", "tokens": [407, 264, 8877, 4959, 486, 312, 9540], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 346, "seek": 97100, "start": 974.0, "end": 976.0, "text": " by the predicate register,", "tokens": [538, 264, 3852, 8700, 7280, 11], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 347, "seek": 97100, "start": 976.0, "end": 978.0, "text": " and the predicate register will set the condition flag,", "tokens": [293, 264, 3852, 8700, 7280, 486, 992, 264, 4188, 7166, 11], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 348, "seek": 97100, "start": 978.0, "end": 981.0, "text": " and the while instruction will also subtract.", "tokens": [293, 264, 1339, 10951, 486, 611, 16390, 13], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 349, "seek": 97100, "start": 981.0, "end": 983.0, "text": " There is a count, the number of processed elements", "tokens": [821, 307, 257, 1207, 11, 264, 1230, 295, 18846, 4959], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 350, "seek": 97100, "start": 983.0, "end": 986.0, "text": " from your output register.", "tokens": [490, 428, 5598, 7280, 13], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 351, "seek": 97100, "start": 986.0, "end": 990.0, "text": " And yeah, at this point, stop pretending that I'm at risk.", "tokens": [400, 1338, 11, 412, 341, 935, 11, 1590, 22106, 300, 286, 478, 412, 3148, 13], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 352, "seek": 97100, "start": 990.0, "end": 991.0, "text": " How do you detect this stuff?", "tokens": [1012, 360, 291, 5531, 341, 1507, 30], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 353, "seek": 97100, "start": 991.0, "end": 993.0, "text": " So there's a processor macro,", "tokens": [407, 456, 311, 257, 15321, 18887, 11], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 354, "seek": 97100, "start": 993.0, "end": 995.0, "text": " otherwise, as usual, on ARMv8,", "tokens": [5911, 11, 382, 7713, 11, 322, 45209, 85, 23, 11], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 355, "seek": 97100, "start": 995.0, "end": 997.0, "text": " you have a bunch of privileged registers", "tokens": [291, 362, 257, 3840, 295, 25293, 38351], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 356, "seek": 97100, "start": 997.0, "end": 999.0, "text": " for the OS to look at,", "tokens": [337, 264, 12731, 281, 574, 412, 11], "temperature": 0.0, "avg_logprob": -0.15364036862812344, "compression_ratio": 1.684782608695652, "no_speech_prob": 4.451560016605072e-05}, {"id": 357, "seek": 99900, "start": 999.0, "end": 1001.0, "text": " and then you have also Linux,", "tokens": [293, 550, 291, 362, 611, 18734, 11], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 358, "seek": 99900, "start": 1001.0, "end": 1004.0, "text": " you have a bunch of flags in the auxiliary vector bit,", "tokens": [291, 362, 257, 3840, 295, 23265, 294, 264, 43741, 8062, 857, 11], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 359, "seek": 99900, "start": 1004.0, "end": 1006.0, "text": " so it's all classic.", "tokens": [370, 309, 311, 439, 7230, 13], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 360, "seek": 99900, "start": 1006.0, "end": 1009.0, "text": " Another OS that you're out of luck.", "tokens": [3996, 12731, 300, 291, 434, 484, 295, 3668, 13], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 361, "seek": 99900, "start": 1009.0, "end": 1012.0, "text": " Availability, so as we said, 2016,", "tokens": [11667, 864, 2310, 11, 370, 382, 321, 848, 11, 6549, 11], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 362, "seek": 99900, "start": 1012.0, "end": 1014.0, "text": " but it didn't really work for us.", "tokens": [457, 309, 994, 380, 534, 589, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 363, "seek": 99900, "start": 1014.0, "end": 1016.0, "text": " SV2 was specified in 2019,", "tokens": [31910, 17, 390, 22206, 294, 6071, 11], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 364, "seek": 99900, "start": 1016.0, "end": 1020.0, "text": " but so the real hardware came earlier last year,", "tokens": [457, 370, 264, 957, 8837, 1361, 3071, 1036, 1064, 11], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 365, "seek": 99900, "start": 1020.0, "end": 1023.0, "text": " so Cortex-AX2 and all the other things", "tokens": [370, 28522, 3121, 12, 32, 55, 17, 293, 439, 264, 661, 721], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 366, "seek": 99900, "start": 1023.0, "end": 1027.0, "text": " from dynamic IQ 110.", "tokens": [490, 8546, 28921, 20154, 13], "temperature": 0.0, "avg_logprob": -0.2269465359774503, "compression_ratio": 1.4416666666666667, "no_speech_prob": 3.0232527933549136e-05}, {"id": 367, "seek": 102700, "start": 1027.0, "end": 1030.0, "text": " So Samsung actually knows 2,200,", "tokens": [407, 13173, 767, 3255, 568, 11, 7629, 11], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 368, "seek": 102700, "start": 1030.0, "end": 1032.0, "text": " and so Cortex-AX2 and all the other things,", "tokens": [293, 370, 28522, 3121, 12, 32, 55, 17, 293, 439, 264, 661, 721, 11], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 369, "seek": 102700, "start": 1032.0, "end": 1034.0, "text": " they do have SVE,", "tokens": [436, 360, 362, 318, 7540, 11], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 370, "seek": 102700, "start": 1034.0, "end": 1037.0, "text": " unfortunately, it's only 128-bit vectors,", "tokens": [7015, 11, 309, 311, 787, 29810, 12, 5260, 18875, 11], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 371, "seek": 102700, "start": 1037.0, "end": 1039.0, "text": " and it's pretty damn expensive,", "tokens": [293, 309, 311, 1238, 8151, 5124, 11], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 372, "seek": 102700, "start": 1039.0, "end": 1042.0, "text": " but if you want to do it, you can find the hardware.", "tokens": [457, 498, 291, 528, 281, 360, 309, 11, 291, 393, 915, 264, 8837, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 373, "seek": 102700, "start": 1042.0, "end": 1045.0, "text": " So RIS5, it's a different model.", "tokens": [407, 497, 2343, 20, 11, 309, 311, 257, 819, 2316, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 374, "seek": 102700, "start": 1045.0, "end": 1046.0, "text": " Can I add?", "tokens": [1664, 286, 909, 30], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 375, "seek": 102700, "start": 1046.0, "end": 1047.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 376, "seek": 102700, "start": 1047.0, "end": 1050.0, "text": " There's also the Alibaba one, the Yi-Tian.", "tokens": [821, 311, 611, 264, 967, 897, 5509, 472, 11, 264, 16747, 12, 51, 952, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 377, "seek": 102700, "start": 1050.0, "end": 1051.0, "text": " Yeah, maybe.", "tokens": [865, 11, 1310, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 378, "seek": 102700, "start": 1051.0, "end": 1052.0, "text": " It's possible, yes.", "tokens": [467, 311, 1944, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 379, "seek": 102700, "start": 1052.0, "end": 1055.0, "text": " It's only available in China, but it's available.", "tokens": [467, 311, 787, 2435, 294, 3533, 11, 457, 309, 311, 2435, 13], "temperature": 0.0, "avg_logprob": -0.2861102489714927, "compression_ratio": 1.4868913857677903, "no_speech_prob": 0.0002371641166973859}, {"id": 380, "seek": 105500, "start": 1055.0, "end": 1058.0, "text": " So on RIS5, the predication is a little bit different,", "tokens": [407, 322, 497, 2343, 20, 11, 264, 3852, 8758, 307, 257, 707, 857, 819, 11], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 381, "seek": 105500, "start": 1058.0, "end": 1062.0, "text": " so they have separation between element count", "tokens": [370, 436, 362, 14634, 1296, 4478, 1207], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 382, "seek": 105500, "start": 1062.0, "end": 1064.0, "text": " and the actual predicate.", "tokens": [293, 264, 3539, 3852, 8700, 13], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 383, "seek": 105500, "start": 1064.0, "end": 1066.0, "text": " And so in practice in multimedia, maybe not in David,", "tokens": [400, 370, 294, 3124, 294, 49202, 11, 1310, 406, 294, 4389, 11], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 384, "seek": 105500, "start": 1066.0, "end": 1068.0, "text": " but usually you don't use the predicate at all,", "tokens": [457, 2673, 291, 500, 380, 764, 264, 3852, 8700, 412, 439, 11], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 385, "seek": 105500, "start": 1068.0, "end": 1071.0, "text": " so we will instead just count the elements.", "tokens": [370, 321, 486, 2602, 445, 1207, 264, 4959, 13], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 386, "seek": 105500, "start": 1071.0, "end": 1073.0, "text": " This is the instruction you always find", "tokens": [639, 307, 264, 10951, 291, 1009, 915], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 387, "seek": 105500, "start": 1073.0, "end": 1076.0, "text": " at the beginning of the loop, which considers the vectors.", "tokens": [412, 264, 2863, 295, 264, 6367, 11, 597, 33095, 264, 18875, 13], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 388, "seek": 105500, "start": 1076.0, "end": 1079.0, "text": " So in this case, what we say is that we have", "tokens": [407, 294, 341, 1389, 11, 437, 321, 584, 307, 300, 321, 362], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 389, "seek": 105500, "start": 1079.0, "end": 1081.0, "text": " a certain number of input elements.", "tokens": [257, 1629, 1230, 295, 4846, 4959, 13], "temperature": 0.0, "avg_logprob": -0.11455090577937355, "compression_ratio": 1.6802973977695168, "no_speech_prob": 6.626969116041437e-05}, {"id": 390, "seek": 108100, "start": 1081.0, "end": 1085.0, "text": " We want to get the number of output parameters", "tokens": [492, 528, 281, 483, 264, 1230, 295, 5598, 9834], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 391, "seek": 108100, "start": 1085.0, "end": 1088.0, "text": " and the number of elements the CPU will deal with", "tokens": [293, 264, 1230, 295, 4959, 264, 13199, 486, 2028, 365], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 392, "seek": 108100, "start": 1088.0, "end": 1090.0, "text": " in the iteration.", "tokens": [294, 264, 24784, 13], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 393, "seek": 108100, "start": 1090.0, "end": 1092.0, "text": " We then have to say the size of the element in bits,", "tokens": [492, 550, 362, 281, 584, 264, 2744, 295, 264, 4478, 294, 9239, 11], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 394, "seek": 108100, "start": 1092.0, "end": 1095.0, "text": " in this case, for instance, 16 bits.", "tokens": [294, 341, 1389, 11, 337, 5197, 11, 3165, 9239, 13], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 395, "seek": 108100, "start": 1095.0, "end": 1097.0, "text": " The group size, which is kind of free unrolling,", "tokens": [440, 1594, 2744, 11, 597, 307, 733, 295, 1737, 517, 18688, 11], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 396, "seek": 108100, "start": 1097.0, "end": 1099.0, "text": " it will automatically, if you set it to 2,", "tokens": [309, 486, 6772, 11, 498, 291, 992, 309, 281, 568, 11], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 397, "seek": 108100, "start": 1099.0, "end": 1102.0, "text": " it will use all the, and you say you want to use", "tokens": [309, 486, 764, 439, 264, 11, 293, 291, 584, 291, 528, 281, 764], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 398, "seek": 108100, "start": 1102.0, "end": 1104.0, "text": " vector 8, it will use vector 8 and vector 9", "tokens": [8062, 1649, 11, 309, 486, 764, 8062, 1649, 293, 8062, 1722], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 399, "seek": 108100, "start": 1104.0, "end": 1106.0, "text": " at the same time, for instance.", "tokens": [412, 264, 912, 565, 11, 337, 5197, 13], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 400, "seek": 108100, "start": 1106.0, "end": 1109.0, "text": " And tail mode, we always set it to agnostic", "tokens": [400, 6838, 4391, 11, 321, 1009, 992, 309, 281, 623, 77, 19634], "temperature": 0.0, "avg_logprob": -0.10068311482450387, "compression_ratio": 1.7884615384615385, "no_speech_prob": 3.828150511253625e-05}, {"id": 401, "seek": 110900, "start": 1109.0, "end": 1111.0, "text": " because we don't really care about tail mode", "tokens": [570, 321, 500, 380, 534, 1127, 466, 6838, 4391], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 402, "seek": 110900, "start": 1111.0, "end": 1113.0, "text": " and mask mode, we also always set it to agnostic.", "tokens": [293, 6094, 4391, 11, 321, 611, 1009, 992, 309, 281, 623, 77, 19634, 13], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 403, "seek": 110900, "start": 1113.0, "end": 1115.0, "text": " There might be use cases where you need to do something else,", "tokens": [821, 1062, 312, 764, 3331, 689, 291, 643, 281, 360, 746, 1646, 11], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 404, "seek": 110900, "start": 1115.0, "end": 1119.0, "text": " which might be a little bit slower, but usually you don't.", "tokens": [597, 1062, 312, 257, 707, 857, 14009, 11, 457, 2673, 291, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 405, "seek": 110900, "start": 1119.0, "end": 1121.0, "text": " This is about how to deal with the stuff that is masked", "tokens": [639, 307, 466, 577, 281, 2028, 365, 264, 1507, 300, 307, 45249], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 406, "seek": 110900, "start": 1121.0, "end": 1123.0, "text": " or with the element that are at the end of the vector", "tokens": [420, 365, 264, 4478, 300, 366, 412, 264, 917, 295, 264, 8062], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 407, "seek": 110900, "start": 1123.0, "end": 1124.0, "text": " which we don't care about.", "tokens": [597, 321, 500, 380, 1127, 466, 13], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 408, "seek": 110900, "start": 1124.0, "end": 1125.0, "text": " Usually you don't care about them,", "tokens": [11419, 291, 500, 380, 1127, 466, 552, 11], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 409, "seek": 110900, "start": 1125.0, "end": 1128.0, "text": " so you just tell the CPU you don't care about them.", "tokens": [370, 291, 445, 980, 264, 13199, 291, 500, 380, 1127, 466, 552, 13], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 410, "seek": 110900, "start": 1128.0, "end": 1130.0, "text": " One cool thing about RISC-V,", "tokens": [1485, 1627, 551, 466, 497, 2343, 34, 12, 53, 11], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 411, "seek": 110900, "start": 1130.0, "end": 1132.0, "text": " the floating point registers are separate from the vectors", "tokens": [264, 12607, 935, 38351, 366, 4994, 490, 264, 18875], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 412, "seek": 110900, "start": 1132.0, "end": 1135.0, "text": " and like on ARM, so you have more registers available", "tokens": [293, 411, 322, 45209, 11, 370, 291, 362, 544, 38351, 2435], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 413, "seek": 110900, "start": 1135.0, "end": 1138.0, "text": " if you have hybrid calculations between scalar and vector side.", "tokens": [498, 291, 362, 13051, 20448, 1296, 39684, 293, 8062, 1252, 13], "temperature": 0.0, "avg_logprob": -0.10479838945712262, "compression_ratio": 1.8859649122807018, "no_speech_prob": 2.9584070944110863e-05}, {"id": 414, "seek": 113800, "start": 1138.0, "end": 1140.0, "text": " But do mind the floating point convention,", "tokens": [583, 360, 1575, 264, 12607, 935, 10286, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 415, "seek": 113800, "start": 1140.0, "end": 1143.0, "text": " calling convention when this happens,", "tokens": [5141, 10286, 562, 341, 2314, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 416, "seek": 113800, "start": 1143.0, "end": 1146.0, "text": " otherwise you will screw up your register state", "tokens": [5911, 291, 486, 5630, 493, 428, 7280, 1785], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 417, "seek": 113800, "start": 1146.0, "end": 1149.0, "text": " and confuse your CPU.", "tokens": [293, 28584, 428, 13199, 13], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 418, "seek": 113800, "start": 1149.0, "end": 1152.0, "text": " The interesting stuff also about RISC-V,", "tokens": [440, 1880, 1507, 611, 466, 497, 2343, 34, 12, 53, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 419, "seek": 113800, "start": 1152.0, "end": 1153.0, "text": " they have segmented load and store,", "tokens": [436, 362, 9469, 292, 3677, 293, 3531, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 420, "seek": 113800, "start": 1153.0, "end": 1156.0, "text": " which is similar to structured load and store in ARM,", "tokens": [597, 307, 2531, 281, 18519, 3677, 293, 3531, 294, 45209, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 421, "seek": 113800, "start": 1156.0, "end": 1159.0, "text": " but they can do it up to 8 structures,", "tokens": [457, 436, 393, 360, 309, 493, 281, 1649, 9227, 11], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 422, "seek": 113800, "start": 1159.0, "end": 1162.0, "text": " whereas ARM is only up to 4.", "tokens": [9735, 45209, 307, 787, 493, 281, 1017, 13], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 423, "seek": 113800, "start": 1162.0, "end": 1166.0, "text": " What is much more interesting perhaps is", "tokens": [708, 307, 709, 544, 1880, 4317, 307], "temperature": 0.0, "avg_logprob": -0.15346293266002947, "compression_ratio": 1.6049382716049383, "no_speech_prob": 2.1434370864881203e-05}, {"id": 424, "seek": 116600, "start": 1166.0, "end": 1169.0, "text": " strided loads and store where you can say,", "tokens": [1056, 2112, 12668, 293, 3531, 689, 291, 393, 584, 11], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 425, "seek": 116600, "start": 1169.0, "end": 1172.0, "text": " I have this register X which contains a value", "tokens": [286, 362, 341, 7280, 1783, 597, 8306, 257, 2158], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 426, "seek": 116600, "start": 1172.0, "end": 1173.0, "text": " and that's going to be my stride.", "tokens": [293, 300, 311, 516, 281, 312, 452, 1056, 482, 13], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 427, "seek": 116600, "start": 1173.0, "end": 1175.0, "text": " So for instance with that you can put", "tokens": [407, 337, 5197, 365, 300, 291, 393, 829], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 428, "seek": 116600, "start": 1175.0, "end": 1177.0, "text": " the width of your video inside one register", "tokens": [264, 11402, 295, 428, 960, 1854, 472, 7280], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 429, "seek": 116600, "start": 1177.0, "end": 1181.0, "text": " and you can load all the pixels in a column in an instruction", "tokens": [293, 291, 393, 3677, 439, 264, 18668, 294, 257, 7738, 294, 364, 10951], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 430, "seek": 116600, "start": 1181.0, "end": 1184.0, "text": " without having to do weird shuffling and whatever.", "tokens": [1553, 1419, 281, 360, 3657, 402, 1245, 1688, 293, 2035, 13], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 431, "seek": 116600, "start": 1184.0, "end": 1186.0, "text": " Does that actually perform a practice?", "tokens": [4402, 300, 767, 2042, 257, 3124, 30], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 432, "seek": 116600, "start": 1186.0, "end": 1188.0, "text": " I think that's going to depend on the design,", "tokens": [286, 519, 300, 311, 516, 281, 5672, 322, 264, 1715, 11], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 433, "seek": 116600, "start": 1188.0, "end": 1191.0, "text": " but normally it should be in the data cache", "tokens": [457, 5646, 309, 820, 312, 294, 264, 1412, 19459], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 434, "seek": 116600, "start": 1191.0, "end": 1193.0, "text": " which should be okay.", "tokens": [597, 820, 312, 1392, 13], "temperature": 0.0, "avg_logprob": -0.19579843139648437, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.0001152541590272449}, {"id": 435, "seek": 119300, "start": 1193.0, "end": 1200.0, "text": " So I'll come to that.", "tokens": [407, 286, 603, 808, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 436, "seek": 119300, "start": 1200.0, "end": 1204.0, "text": " Yes, on the downside you don't have transposer", "tokens": [1079, 11, 322, 264, 25060, 291, 500, 380, 362, 7132, 22150], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 437, "seek": 119300, "start": 1204.0, "end": 1207.0, "text": " or zipping instructions, which should be annoying,", "tokens": [420, 710, 6297, 9415, 11, 597, 820, 312, 11304, 11], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 438, "seek": 119300, "start": 1207.0, "end": 1208.0, "text": " which is kind of the same,", "tokens": [597, 307, 733, 295, 264, 912, 11], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 439, "seek": 119300, "start": 1208.0, "end": 1210.0, "text": " so you have to replace it with strides.", "tokens": [370, 291, 362, 281, 7406, 309, 365, 1056, 1875, 13], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 440, "seek": 119300, "start": 1210.0, "end": 1213.0, "text": " So it's fine if you want to take every second element", "tokens": [407, 309, 311, 2489, 498, 291, 528, 281, 747, 633, 1150, 4478], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 441, "seek": 119300, "start": 1213.0, "end": 1216.0, "text": " from one vector and so on.", "tokens": [490, 472, 8062, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 442, "seek": 119300, "start": 1216.0, "end": 1221.0, "text": " Feature detection, they have very, very detailed", "tokens": [3697, 1503, 17784, 11, 436, 362, 588, 11, 588, 9942], "temperature": 0.0, "avg_logprob": -0.25923034419184143, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.9830516218207777e-05}, {"id": 443, "seek": 122100, "start": 1221.0, "end": 1225.0, "text": " pre-processor feature flags.", "tokens": [659, 12, 4318, 25432, 4111, 23265, 13], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 444, "seek": 122100, "start": 1225.0, "end": 1227.0, "text": " I mean you can download the slides if you're interested.", "tokens": [286, 914, 291, 393, 5484, 264, 9788, 498, 291, 434, 3102, 13], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 445, "seek": 122100, "start": 1227.0, "end": 1230.0, "text": " On the other hand, on runtime detection it's pretty crappy.", "tokens": [1282, 264, 661, 1011, 11, 322, 34474, 17784, 309, 311, 1238, 36531, 13], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 446, "seek": 122100, "start": 1230.0, "end": 1233.0, "text": " You have to trust the device tree node.", "tokens": [509, 362, 281, 3361, 264, 4302, 4230, 9984, 13], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 447, "seek": 122100, "start": 1233.0, "end": 1236.0, "text": " So you have to trust the boot loader to actually tell it", "tokens": [407, 291, 362, 281, 3361, 264, 11450, 3677, 260, 281, 767, 980, 309], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 448, "seek": 122100, "start": 1236.0, "end": 1240.0, "text": " to your OS correctly in the device tree data structure", "tokens": [281, 428, 12731, 8944, 294, 264, 4302, 4230, 1412, 3877], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 449, "seek": 122100, "start": 1240.0, "end": 1242.0, "text": " and otherwise there is a flag in there.", "tokens": [293, 5911, 456, 307, 257, 7166, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 450, "seek": 122100, "start": 1242.0, "end": 1246.0, "text": " So the V, the Vth bit, so the 21,", "tokens": [407, 264, 691, 11, 264, 691, 392, 857, 11, 370, 264, 5080, 11], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 451, "seek": 122100, "start": 1246.0, "end": 1248.0, "text": " because V is the 22nd later in the alphabet", "tokens": [570, 691, 307, 264, 5853, 273, 1780, 294, 264, 23339], "temperature": 0.0, "avg_logprob": -0.24690373190518083, "compression_ratio": 1.6869918699186992, "no_speech_prob": 3.155173908453435e-05}, {"id": 452, "seek": 124800, "start": 1248.0, "end": 1251.0, "text": " is a vector flag in the auxiliary vector", "tokens": [307, 257, 8062, 7166, 294, 264, 43741, 8062], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 453, "seek": 124800, "start": 1251.0, "end": 1253.0, "text": " for hardware capabilities on Linux.", "tokens": [337, 8837, 10862, 322, 18734, 13], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 454, "seek": 124800, "start": 1253.0, "end": 1258.0, "text": " Availability, unfortunately at this time there is no hardware.", "tokens": [11667, 864, 2310, 11, 7015, 412, 341, 565, 456, 307, 572, 8837, 13], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 455, "seek": 124800, "start": 1258.0, "end": 1262.0, "text": " Ali Baba, sorry, T-Head has made hardware available", "tokens": [12020, 22529, 11, 2597, 11, 314, 12, 39, 2056, 575, 1027, 8837, 2435], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 456, "seek": 124800, "start": 1262.0, "end": 1266.0, "text": " but it's implementing version 0.71", "tokens": [457, 309, 311, 18114, 3037, 1958, 13, 29985], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 457, "seek": 124800, "start": 1266.0, "end": 1271.0, "text": " from about 18 months before the standardised specification", "tokens": [490, 466, 2443, 2493, 949, 264, 3832, 2640, 31256], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 458, "seek": 124800, "start": 1271.0, "end": 1274.0, "text": " which is implemented by Clang and GCC.", "tokens": [597, 307, 12270, 538, 2033, 656, 293, 460, 11717, 13], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 459, "seek": 124800, "start": 1274.0, "end": 1276.0, "text": " So you can kind of work with that", "tokens": [407, 291, 393, 733, 295, 589, 365, 300], "temperature": 0.0, "avg_logprob": -0.19533343981671078, "compression_ratio": 1.510548523206751, "no_speech_prob": 5.79099178139586e-05}, {"id": 460, "seek": 127600, "start": 1276.0, "end": 1278.0, "text": " and it gives you some idea of the performance", "tokens": [293, 309, 2709, 291, 512, 1558, 295, 264, 3389], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 461, "seek": 127600, "start": 1278.0, "end": 1280.0, "text": " but you're going to have to rewrite stuff", "tokens": [457, 291, 434, 516, 281, 362, 281, 28132, 1507], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 462, "seek": 127600, "start": 1280.0, "end": 1282.0, "text": " because it's not completely bit compatible", "tokens": [570, 309, 311, 406, 2584, 857, 18218], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 463, "seek": 127600, "start": 1282.0, "end": 1284.0, "text": " so it's kind of annoying.", "tokens": [370, 309, 311, 733, 295, 11304, 13], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 464, "seek": 127600, "start": 1284.0, "end": 1286.0, "text": " I don't know when the stuff is going to happen.", "tokens": [286, 500, 380, 458, 562, 264, 1507, 307, 516, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 465, "seek": 127600, "start": 1286.0, "end": 1287.0, "text": " I'm pretty sure it's going to happen", "tokens": [286, 478, 1238, 988, 309, 311, 516, 281, 1051], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 466, "seek": 127600, "start": 1287.0, "end": 1290.0, "text": " but I would guess by the end of this year", "tokens": [457, 286, 576, 2041, 538, 264, 917, 295, 341, 1064], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 467, "seek": 127600, "start": 1290.0, "end": 1295.0, "text": " we are going to see hardware available.", "tokens": [321, 366, 516, 281, 536, 8837, 2435, 13], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 468, "seek": 127600, "start": 1295.0, "end": 1298.0, "text": " Also I think one kind of not answering", "tokens": [2743, 286, 519, 472, 733, 295, 406, 13430], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 469, "seek": 127600, "start": 1298.0, "end": 1299.0, "text": " or dodging the previous question", "tokens": [420, 13886, 3249, 264, 3894, 1168], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 470, "seek": 127600, "start": 1299.0, "end": 1302.0, "text": " but because we have so many different vendors on RISC 5", "tokens": [457, 570, 321, 362, 370, 867, 819, 22056, 322, 497, 2343, 34, 1025], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 471, "seek": 127600, "start": 1302.0, "end": 1304.0, "text": " and I think there's more than I did.", "tokens": [293, 286, 519, 456, 311, 544, 813, 286, 630, 13], "temperature": 0.0, "avg_logprob": -0.11555154287993018, "compression_ratio": 1.7243816254416962, "no_speech_prob": 0.00010567036952124909}, {"id": 472, "seek": 130400, "start": 1304.0, "end": 1308.0, "text": " I only listed three here but I think there's other.", "tokens": [286, 787, 10052, 1045, 510, 457, 286, 519, 456, 311, 661, 13], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 473, "seek": 130400, "start": 1308.0, "end": 1310.0, "text": " There might be big difference", "tokens": [821, 1062, 312, 955, 2649], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 474, "seek": 130400, "start": 1310.0, "end": 1311.0, "text": " between the performance characteristics", "tokens": [1296, 264, 3389, 10891], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 475, "seek": 130400, "start": 1311.0, "end": 1313.0, "text": " of the different vendors.", "tokens": [295, 264, 819, 22056, 13], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 476, "seek": 130400, "start": 1313.0, "end": 1315.0, "text": " These are our references.", "tokens": [1981, 366, 527, 15400, 13], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 477, "seek": 130400, "start": 1321.0, "end": 1326.0, "text": " Yes, I have just a few questions.", "tokens": [1079, 11, 286, 362, 445, 257, 1326, 1651, 13], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 478, "seek": 130400, "start": 1326.0, "end": 1331.0, "text": " Have you heard of the SVP64 project from Lever SoC yet", "tokens": [3560, 291, 2198, 295, 264, 31910, 47, 19395, 1716, 490, 441, 1054, 407, 34, 1939], "temperature": 0.0, "avg_logprob": -0.26392423602896675, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.00019955597235821187}, {"id": 479, "seek": 133100, "start": 1331.0, "end": 1337.0, "text": " which is a kind of similar vector approach for PowerPC?", "tokens": [597, 307, 257, 733, 295, 2531, 8062, 3109, 337, 7086, 12986, 30], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 480, "seek": 133100, "start": 1337.0, "end": 1339.0, "text": " No, I haven't looked at PowerPC at all.", "tokens": [883, 11, 286, 2378, 380, 2956, 412, 7086, 12986, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 481, "seek": 133100, "start": 1339.0, "end": 1343.0, "text": " Another question that I had with my own CIDD programming workers", "tokens": [3996, 1168, 300, 286, 632, 365, 452, 1065, 383, 2777, 35, 9410, 5600], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 482, "seek": 133100, "start": 1343.0, "end": 1346.0, "text": " we often have applications that are inherently horizontal.", "tokens": [321, 2049, 362, 5821, 300, 366, 27993, 12750, 13], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 483, "seek": 133100, "start": 1346.0, "end": 1350.0, "text": " For example, let's say you are writing a vectorized string search operation", "tokens": [1171, 1365, 11, 718, 311, 584, 291, 366, 3579, 257, 8062, 1602, 6798, 3164, 6916], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 484, "seek": 133100, "start": 1350.0, "end": 1352.0, "text": " or you're doing something like decoding JPEGs", "tokens": [420, 291, 434, 884, 746, 411, 979, 8616, 508, 5208, 33715], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 485, "seek": 133100, "start": 1352.0, "end": 1354.0, "text": " where you have these 8.8 blocks", "tokens": [689, 291, 362, 613, 1649, 13, 23, 8474], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 486, "seek": 133100, "start": 1354.0, "end": 1357.0, "text": " where you want to do some sort of close-in transform on them", "tokens": [689, 291, 528, 281, 360, 512, 1333, 295, 1998, 12, 259, 4088, 322, 552], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 487, "seek": 133100, "start": 1357.0, "end": 1358.0, "text": " and they have this fixed size", "tokens": [293, 436, 362, 341, 6806, 2744], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 488, "seek": 133100, "start": 1358.0, "end": 1360.0, "text": " and depending on the vector size", "tokens": [293, 5413, 322, 264, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.21367019414901733, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.0007208978058770299}, {"id": 489, "seek": 136000, "start": 1360.0, "end": 1361.0, "text": " you want to break them up", "tokens": [291, 528, 281, 1821, 552, 493], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 490, "seek": 136000, "start": 1361.0, "end": 1364.0, "text": " or you maybe have to process multiple of them at the same time.", "tokens": [420, 291, 1310, 362, 281, 1399, 3866, 295, 552, 412, 264, 912, 565, 13], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 491, "seek": 136000, "start": 1364.0, "end": 1366.0, "text": " Is there an intelligent way to solve this?", "tokens": [1119, 456, 364, 13232, 636, 281, 5039, 341, 30], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 492, "seek": 136000, "start": 1366.0, "end": 1368.0, "text": " I've had this case.", "tokens": [286, 600, 632, 341, 1389, 13], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 493, "seek": 136000, "start": 1368.0, "end": 1371.0, "text": " The question is when you have a naturally fixed size", "tokens": [440, 1168, 307, 562, 291, 362, 257, 8195, 6806, 2744], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 494, "seek": 136000, "start": 1371.0, "end": 1375.0, "text": " input kind of block that you want to process at the time", "tokens": [4846, 733, 295, 3461, 300, 291, 528, 281, 1399, 412, 264, 565], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 495, "seek": 136000, "start": 1375.0, "end": 1376.0, "text": " how do you do this?", "tokens": [577, 360, 291, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 496, "seek": 136000, "start": 1376.0, "end": 1379.0, "text": " Because then you actually want to have a fixed size vector", "tokens": [1436, 550, 291, 767, 528, 281, 362, 257, 6806, 2744, 8062], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 497, "seek": 136000, "start": 1379.0, "end": 1381.0, "text": " in effect, paraphrasing the question.", "tokens": [294, 1802, 11, 36992, 1703, 3349, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 498, "seek": 136000, "start": 1381.0, "end": 1384.0, "text": " I've had this case with the SVP64 a couple of times.", "tokens": [286, 600, 632, 341, 1389, 365, 264, 31910, 47, 19395, 257, 1916, 295, 1413, 13], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 499, "seek": 136000, "start": 1384.0, "end": 1387.0, "text": " One way is to just check that the vector size of the CPU", "tokens": [1485, 636, 307, 281, 445, 1520, 300, 264, 8062, 2744, 295, 264, 13199], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 500, "seek": 136000, "start": 1387.0, "end": 1389.0, "text": " is big enough and just do one at a time.", "tokens": [307, 955, 1547, 293, 445, 360, 472, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.18361210178684545, "compression_ratio": 1.7725752508361203, "no_speech_prob": 8.833825995679945e-05}, {"id": 501, "seek": 138900, "start": 1389.0, "end": 1391.0, "text": " If you can, try to do it at a time", "tokens": [759, 291, 393, 11, 853, 281, 360, 309, 412, 257, 565], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 502, "seek": 138900, "start": 1391.0, "end": 1393.0, "text": " because it's always going to be a power of 2", "tokens": [570, 309, 311, 1009, 516, 281, 312, 257, 1347, 295, 568], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 503, "seek": 138900, "start": 1393.0, "end": 1396.0, "text": " so you should be able relatively easily to parallelize.", "tokens": [370, 291, 820, 312, 1075, 7226, 3612, 281, 8952, 1125, 13], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 504, "seek": 138900, "start": 1396.0, "end": 1398.0, "text": " Obviously the ideal situation is to parallelize.", "tokens": [7580, 264, 7157, 2590, 307, 281, 8952, 1125, 13], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 505, "seek": 138900, "start": 1398.0, "end": 1401.0, "text": " What you will have a problem is if your dataset is larger than the vector", "tokens": [708, 291, 486, 362, 257, 1154, 307, 498, 428, 28872, 307, 4833, 813, 264, 8062], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 506, "seek": 138900, "start": 1401.0, "end": 1403.0, "text": " then it's going to become complicated for you.", "tokens": [550, 309, 311, 516, 281, 1813, 6179, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 507, "seek": 138900, "start": 1403.0, "end": 1408.0, "text": " On RISC-5 you can deal with this with the group multiplier", "tokens": [1282, 497, 2343, 34, 12, 20, 291, 393, 2028, 365, 341, 365, 264, 1594, 44106], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 508, "seek": 138900, "start": 1408.0, "end": 1412.0, "text": " which will allow you to use multiple vectors as a single vector.", "tokens": [597, 486, 2089, 291, 281, 764, 3866, 18875, 382, 257, 2167, 8062, 13], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 509, "seek": 138900, "start": 1412.0, "end": 1418.0, "text": " And the last question I have is how do you realistically test", "tokens": [400, 264, 1036, 1168, 286, 362, 307, 577, 360, 291, 40734, 1500], "temperature": 0.0, "avg_logprob": -0.17314301137849103, "compression_ratio": 1.7048611111111112, "no_speech_prob": 5.24846873304341e-05}, {"id": 510, "seek": 141800, "start": 1418.0, "end": 1420.0, "text": " vectorized triangles?", "tokens": [8062, 1602, 29896, 30], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 511, "seek": 141800, "start": 1420.0, "end": 1423.0, "text": " When the hardware you have only supports one vector length at most", "tokens": [1133, 264, 8837, 291, 362, 787, 9346, 472, 8062, 4641, 412, 881], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 512, "seek": 141800, "start": 1423.0, "end": 1426.0, "text": " so you have to probably use some sort of relation to set up for this?", "tokens": [370, 291, 362, 281, 1391, 764, 512, 1333, 295, 9721, 281, 992, 493, 337, 341, 30], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 513, "seek": 141800, "start": 1426.0, "end": 1429.0, "text": " Most of the loops will not depend.", "tokens": [4534, 295, 264, 16121, 486, 406, 5672, 13], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 514, "seek": 141800, "start": 1429.0, "end": 1431.0, "text": " So the question is how do you test a different vector size", "tokens": [407, 264, 1168, 307, 577, 360, 291, 1500, 257, 819, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 515, "seek": 141800, "start": 1431.0, "end": 1433.0, "text": " for validation I guess.", "tokens": [337, 24071, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 516, "seek": 141800, "start": 1433.0, "end": 1436.0, "text": " Most of the loops don't really care about the vector size", "tokens": [4534, 295, 264, 16121, 500, 380, 534, 1127, 466, 264, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 517, "seek": 141800, "start": 1436.0, "end": 1439.0, "text": " because if you have a simple case where you follow the simple pattern", "tokens": [570, 498, 291, 362, 257, 2199, 1389, 689, 291, 1524, 264, 2199, 5102], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 518, "seek": 141800, "start": 1439.0, "end": 1441.0, "text": " it doesn't really care what the vector size is", "tokens": [309, 1177, 380, 534, 1127, 437, 264, 8062, 2744, 307], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 519, "seek": 141800, "start": 1441.0, "end": 1444.0, "text": " except for benchmarking of course and you have a problem.", "tokens": [3993, 337, 18927, 278, 295, 1164, 293, 291, 362, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.1538456053960891, "compression_ratio": 1.8243727598566308, "no_speech_prob": 8.426867134403437e-05}, {"id": 520, "seek": 144400, "start": 1444.0, "end": 1449.0, "text": " Otherwise QMU and Spark at least for RISC-5 support any vector size", "tokens": [10328, 1249, 44, 52, 293, 23424, 412, 1935, 337, 497, 2343, 34, 12, 20, 1406, 604, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 521, "seek": 144400, "start": 1449.0, "end": 1452.0, "text": " to give that as long as it's a valid one from specification plan point.", "tokens": [281, 976, 300, 382, 938, 382, 309, 311, 257, 7363, 472, 490, 31256, 1393, 935, 13], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 522, "seek": 144400, "start": 1452.0, "end": 1454.0, "text": " Do you realistically really test for that?", "tokens": [1144, 291, 40734, 534, 1500, 337, 300, 30], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 523, "seek": 144400, "start": 1454.0, "end": 1457.0, "text": " Or do you just say it's simply not going to be a problem?", "tokens": [1610, 360, 291, 445, 584, 309, 311, 2935, 406, 516, 281, 312, 257, 1154, 30], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 524, "seek": 144400, "start": 1457.0, "end": 1462.0, "text": " I mean personally when I've had the situation where I had a fixed size input", "tokens": [286, 914, 5665, 562, 286, 600, 632, 264, 2590, 689, 286, 632, 257, 6806, 2744, 4846], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 525, "seek": 144400, "start": 1462.0, "end": 1465.0, "text": " and I had to test with different vector size and I tested with different vector size", "tokens": [293, 286, 632, 281, 1500, 365, 819, 8062, 2744, 293, 286, 8246, 365, 819, 8062, 2744], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 526, "seek": 144400, "start": 1465.0, "end": 1468.0, "text": " in most cases you don't actually care.", "tokens": [294, 881, 3331, 291, 500, 380, 767, 1127, 13], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 527, "seek": 144400, "start": 1468.0, "end": 1471.0, "text": " I mean then it's a matter of choice of you do your testing", "tokens": [286, 914, 550, 309, 311, 257, 1871, 295, 3922, 295, 291, 360, 428, 4997], "temperature": 0.0, "avg_logprob": -0.21348518958458534, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.000109200926090125}, {"id": 528, "seek": 147100, "start": 1471.0, "end": 1475.0, "text": " and no strict you want to be with the validation I think.", "tokens": [293, 572, 10910, 291, 528, 281, 312, 365, 264, 24071, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 529, "seek": 147100, "start": 1475.0, "end": 1476.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 530, "seek": 147100, "start": 1476.0, "end": 1478.0, "text": " We have no one on question now?", "tokens": [492, 362, 572, 472, 322, 1168, 586, 30], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 531, "seek": 147100, "start": 1478.0, "end": 1483.0, "text": " Firstly disclaimer, I'm related to the Leversock project with SB64.", "tokens": [20042, 40896, 11, 286, 478, 4077, 281, 264, 441, 1054, 539, 547, 1716, 365, 26944, 19395, 13], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 532, "seek": 147100, "start": 1483.0, "end": 1486.0, "text": " It's similar to RISC-5 vectors but not exactly the same", "tokens": [467, 311, 2531, 281, 497, 2343, 34, 12, 20, 18875, 457, 406, 2293, 264, 912], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 533, "seek": 147100, "start": 1486.0, "end": 1489.0, "text": " but they share a lot of the common ideas.", "tokens": [457, 436, 2073, 257, 688, 295, 264, 2689, 3487, 13], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 534, "seek": 147100, "start": 1489.0, "end": 1493.0, "text": " You mentioned a very good point that CMD is not vector processing.", "tokens": [509, 2835, 257, 588, 665, 935, 300, 20424, 35, 307, 406, 8062, 9007, 13], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 535, "seek": 147100, "start": 1493.0, "end": 1498.0, "text": " In order we had to try to report some code from Neon to SV2", "tokens": [682, 1668, 321, 632, 281, 853, 281, 2275, 512, 3089, 490, 1734, 266, 281, 31910, 17], "temperature": 0.0, "avg_logprob": -0.22940737741035327, "compression_ratio": 1.4609665427509293, "no_speech_prob": 0.002829828532412648}, {"id": 536, "seek": 149800, "start": 1498.0, "end": 1502.0, "text": " and it was less than suboptimal let's say.", "tokens": [293, 309, 390, 1570, 813, 1422, 5747, 10650, 718, 311, 584, 13], "temperature": 0.0, "avg_logprob": -0.2022392338719861, "compression_ratio": 1.0813953488372092, "no_speech_prob": 0.005221026949584484}, {"id": 537, "seek": 150200, "start": 1502.0, "end": 1531.0, "text": " We had to revert back to the original C algorithm.", "tokens": [50364, 492, 632, 281, 319, 3281, 646, 281, 264, 3380, 383, 9284, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21989118258158366, "compression_ratio": 0.9259259259259259, "no_speech_prob": 0.001422413159161806}], "language": "en"}