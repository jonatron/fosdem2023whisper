{"text": " Next lightning talk is Jan Verschijl talking about multiple double arithmetic on GPUs. Thank you very much, the organizers for allowing me to speak here. So I will hope to talk about computations that I've been doing with multiple doubles. So the multiple doubles go back actually from the time when people, when the hardware was not yet supporting doubles. So this was the late 60s. So this is actually a similar idea. So you use the hardware arithmetic to extend your precision. It has a lot of advantages. So if you're used to working with complex arithmetic, then double-double arithmetic has about the same intensity. So speaking of intensities, relative to the previous talk where we were working with graphs, so in the previous talk I had the impression that everything was about graphs and there was a memory bound. My problems are compute bound. So I get really good arithmetic intensities. There are some disadvantages, of course. If you want to work with, say, 17 decimal places, you can't. Also if you want to work with truly infinite decimals, well, you can't either because you're still having your 11 bits of the exponent. Disadvantage might also be that you can still do numerical analysis. So this might be an advantage or disadvantage. I got into this by power series arithmetic. So this is about the EXP and the EPS. So when I started working with power series, I was using 11111111. And I know the binomial theorem. Well, I only knew it when I saw the numbers blowing up on me. So you know it when you don't know it. So here is a table. The exponential has a very nice development, nicely decaying. And if you multiply these exponentials, you don't have any blow-up. However, the last coefficient, if you want to represent that, and you have to think about GPUs. GPUs are actually quite happy if they can do things in groups of 32. So actually a 32 power series, an order 32 power series, is actually still very small for GPUs. But there you have already to use quad doubles. Otherwise, your last coefficients, you can't represent it anymore. OK. So I started working with the QD library. And then we were doing multi-core. Me and my student, Gennady Jofi, and we looked at each other, should we do this on the GPU? Should we write the entire library on the GPU? My student didn't really want to do it, and I didn't want to do it. But then we discovered GQD, and we used GQD. And the recent package that we are using is Compari. It's actually the only software I know that is named after a beverage. I don't know if that's a good sign or not. In my supermarket store in Chicago, I once saw Compari, but it's not my drink. So I didn't want to ruin the taste of using Compari. So I stayed off this. Compari is actually quite good. So because it allowed me to go to quad double, and now also octo double. The numbers in this table are kind of good, because I want to have really performance. But it also comes somehow misleading, because as soon as you're using complex double-double, everything becomes compute bound. And the problems that you have with memory transfer and all, you do a lot of arithmetic operations on a relatively small amount of data. I also like to do quality up. If you can afford the time for, say, a double precision calculation, well, you will see that everything is not really right. But then you can allow the same amount of time, and you quadruple the precision. So the 439 there, think about 1 gigaflop, 2 gigaflop, and then you go to teraflop. So the 439 is kind of, if you have teraflop performance, it's like as if you would be doing this on a single core. So I mentioned the funding agencies at the very slight. I would like to have a hopper. But so for now, I have to deal with Pascal and Volta. And the last one is a gaming laptop, which is also actually quite a powerful GPU. My first teraflop card was Kepler. And this last list of GPU actually gets there. Okay. If you think of a double-double, there is a double-two. And then for a quad-double, there is the double-four. So that was what the GQD was using. And that's very good for memory coalescing. But we actually got into trouble with the complex quad-double because there was no double-eight. So instead of working, if you work with a vector of quad-doubles, a vector of arrays of four length, you actually better use four vectors. The first one with the highest double, second double, third double, fourth double. So it's a little bit similar like working with power series. So power series is invertible if the leading coefficient is not zero. You can work with matrices of power series. But actually, that's not good. You should actually work with a series where the coefficients are matrices. Same idea here. QDLIP is a very good library still. It's quite complete. So I have extended the square root, for example, to octodouble precision. OK. So here is then my beginning. So I mentioned, so you saw this eight. So if you take a vector of random complex numbers, 64, then the norm is eight. Should be eight. So that's a really nice test property. If you work with GPUs, you actually define kernels, and kernels, the name says it itself, it should be small. So think small. And actually, this problem is a small problem, mathematically speaking, but it has all the richness and the complexity of all the problems that you will run into. You will have to study the prefix sum algorithm, for example. So that is needed. You also have to tune your software for large vectors or for small vectors. You can only have one block of threads that is active. The square root works with staggered. So you apply a Newton method. And then actually, this is where the dot comes in. So the nice thing about double doubles, quad doubles, is that everything fits into registers. So it's also very good if you do multi-core. So you don't have to use the heap ever. But of course, when you get to complex quad doubles, you have these eight arrays. If you do octodoubles, so it doubles and doubles and doubles. So I have with my old graphics cards, they can no longer even compile the octodoubles if you inline too much. So it's still very interesting that, actually, you have to tailor your kernels towards the precision levels. So here is my last slide. I did more than just norms. So we have teraflop performance when we evaluate polynomials and differentiate them. The QR, the blocked householder QR, is also wonderful. You get already teraflop performance with 1,000 in complex double-double. And then the last paper is where you try to combine these things by computing Taylor series for solutions of solution developments for polynomial systems. Newton's method is actually a quite nice operator. You start with a multivariate system where all the variables are linked to each other. And what Newton actually does, it spits out power series for each component. So actually, it untangles all the linearities, all the nonlinearities. So I listed the archive. So the IEEE puts things in a paywall, behind the paywall. So you have the archive versions there. And you're more than welcome to the bottom line of this slide. I mean, the conclusion, actually, is that all the software is free and open source. I'd have the GitHub handle there.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 18.92, "text": " Next lightning talk is Jan Verschijl talking about multiple double arithmetic on GPUs.", "tokens": [3087, 16589, 751, 307, 4956, 12226, 339, 1718, 75, 1417, 466, 3866, 3834, 42973, 322, 18407, 82, 13], "temperature": 0.0, "avg_logprob": -0.37220713966771174, "compression_ratio": 1.204724409448819, "no_speech_prob": 0.3004617989063263}, {"id": 1, "seek": 0, "start": 18.92, "end": 25.400000000000002, "text": " Thank you very much, the organizers for allowing me to speak here.", "tokens": [1044, 291, 588, 709, 11, 264, 35071, 337, 8293, 385, 281, 1710, 510, 13], "temperature": 0.0, "avg_logprob": -0.37220713966771174, "compression_ratio": 1.204724409448819, "no_speech_prob": 0.3004617989063263}, {"id": 2, "seek": 2540, "start": 25.4, "end": 36.12, "text": " So I will hope to talk about computations that I've been doing with multiple doubles.", "tokens": [407, 286, 486, 1454, 281, 751, 466, 2807, 763, 300, 286, 600, 668, 884, 365, 3866, 31634, 13], "temperature": 0.0, "avg_logprob": -0.16593387547661276, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.0007106199045665562}, {"id": 3, "seek": 2540, "start": 36.12, "end": 43.36, "text": " So the multiple doubles go back actually from the time when people, when the hardware was", "tokens": [407, 264, 3866, 31634, 352, 646, 767, 490, 264, 565, 562, 561, 11, 562, 264, 8837, 390], "temperature": 0.0, "avg_logprob": -0.16593387547661276, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.0007106199045665562}, {"id": 4, "seek": 2540, "start": 43.36, "end": 45.84, "text": " not yet supporting doubles.", "tokens": [406, 1939, 7231, 31634, 13], "temperature": 0.0, "avg_logprob": -0.16593387547661276, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.0007106199045665562}, {"id": 5, "seek": 2540, "start": 45.84, "end": 49.08, "text": " So this was the late 60s.", "tokens": [407, 341, 390, 264, 3469, 4060, 82, 13], "temperature": 0.0, "avg_logprob": -0.16593387547661276, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.0007106199045665562}, {"id": 6, "seek": 2540, "start": 49.08, "end": 51.72, "text": " So this is actually a similar idea.", "tokens": [407, 341, 307, 767, 257, 2531, 1558, 13], "temperature": 0.0, "avg_logprob": -0.16593387547661276, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.0007106199045665562}, {"id": 7, "seek": 5172, "start": 51.72, "end": 58.68, "text": " So you use the hardware arithmetic to extend your precision.", "tokens": [407, 291, 764, 264, 8837, 42973, 281, 10101, 428, 18356, 13], "temperature": 0.0, "avg_logprob": -0.1379835370560767, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0007348248618654907}, {"id": 8, "seek": 5172, "start": 58.68, "end": 60.6, "text": " It has a lot of advantages.", "tokens": [467, 575, 257, 688, 295, 14906, 13], "temperature": 0.0, "avg_logprob": -0.1379835370560767, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0007348248618654907}, {"id": 9, "seek": 5172, "start": 60.6, "end": 67.32, "text": " So if you're used to working with complex arithmetic, then double-double arithmetic has about the", "tokens": [407, 498, 291, 434, 1143, 281, 1364, 365, 3997, 42973, 11, 550, 3834, 12, 67, 33147, 42973, 575, 466, 264], "temperature": 0.0, "avg_logprob": -0.1379835370560767, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0007348248618654907}, {"id": 10, "seek": 5172, "start": 67.32, "end": 70.4, "text": " same intensity.", "tokens": [912, 13749, 13], "temperature": 0.0, "avg_logprob": -0.1379835370560767, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0007348248618654907}, {"id": 11, "seek": 5172, "start": 70.4, "end": 77.92, "text": " So speaking of intensities, relative to the previous talk where we were working with graphs,", "tokens": [407, 4124, 295, 14056, 1088, 11, 4972, 281, 264, 3894, 751, 689, 321, 645, 1364, 365, 24877, 11], "temperature": 0.0, "avg_logprob": -0.1379835370560767, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0007348248618654907}, {"id": 12, "seek": 7792, "start": 77.92, "end": 83.08, "text": " so in the previous talk I had the impression that everything was about graphs and there", "tokens": [370, 294, 264, 3894, 751, 286, 632, 264, 9995, 300, 1203, 390, 466, 24877, 293, 456], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 13, "seek": 7792, "start": 83.08, "end": 84.76, "text": " was a memory bound.", "tokens": [390, 257, 4675, 5472, 13], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 14, "seek": 7792, "start": 84.76, "end": 87.44, "text": " My problems are compute bound.", "tokens": [1222, 2740, 366, 14722, 5472, 13], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 15, "seek": 7792, "start": 87.44, "end": 93.2, "text": " So I get really good arithmetic intensities.", "tokens": [407, 286, 483, 534, 665, 42973, 14056, 1088, 13], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 16, "seek": 7792, "start": 93.2, "end": 95.0, "text": " There are some disadvantages, of course.", "tokens": [821, 366, 512, 37431, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 17, "seek": 7792, "start": 95.0, "end": 100.32000000000001, "text": " If you want to work with, say, 17 decimal places, you can't.", "tokens": [759, 291, 528, 281, 589, 365, 11, 584, 11, 3282, 26601, 3190, 11, 291, 393, 380, 13], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 18, "seek": 7792, "start": 100.32000000000001, "end": 106.04, "text": " Also if you want to work with truly infinite decimals, well, you can't either because", "tokens": [2743, 498, 291, 528, 281, 589, 365, 4908, 13785, 979, 332, 1124, 11, 731, 11, 291, 393, 380, 2139, 570], "temperature": 0.0, "avg_logprob": -0.147103702899107, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.0002636386197991669}, {"id": 19, "seek": 10604, "start": 106.04, "end": 112.60000000000001, "text": " you're still having your 11 bits of the exponent.", "tokens": [291, 434, 920, 1419, 428, 2975, 9239, 295, 264, 37871, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 20, "seek": 10604, "start": 112.60000000000001, "end": 117.24000000000001, "text": " Disadvantage might also be that you can still do numerical analysis.", "tokens": [4208, 345, 23408, 1062, 611, 312, 300, 291, 393, 920, 360, 29054, 5215, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 21, "seek": 10604, "start": 117.24000000000001, "end": 122.44, "text": " So this might be an advantage or disadvantage.", "tokens": [407, 341, 1062, 312, 364, 5002, 420, 24292, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 22, "seek": 10604, "start": 122.44, "end": 125.96000000000001, "text": " I got into this by power series arithmetic.", "tokens": [286, 658, 666, 341, 538, 1347, 2638, 42973, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 23, "seek": 10604, "start": 125.96000000000001, "end": 129.76, "text": " So this is about the EXP and the EPS.", "tokens": [407, 341, 307, 466, 264, 16385, 47, 293, 264, 462, 6273, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 24, "seek": 10604, "start": 129.76, "end": 135.24, "text": " So when I started working with power series, I was using 11111111.", "tokens": [407, 562, 286, 1409, 1364, 365, 1347, 2638, 11, 286, 390, 1228, 2975, 5348, 5348, 5348, 13], "temperature": 0.0, "avg_logprob": -0.1331540595653445, "compression_ratio": 1.5939086294416243, "no_speech_prob": 0.00024737638887017965}, {"id": 25, "seek": 13524, "start": 135.24, "end": 137.12, "text": " And I know the binomial theorem.", "tokens": [400, 286, 458, 264, 5171, 47429, 20904, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 26, "seek": 13524, "start": 137.12, "end": 142.08, "text": " Well, I only knew it when I saw the numbers blowing up on me.", "tokens": [1042, 11, 286, 787, 2586, 309, 562, 286, 1866, 264, 3547, 15068, 493, 322, 385, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 27, "seek": 13524, "start": 142.08, "end": 144.8, "text": " So you know it when you don't know it.", "tokens": [407, 291, 458, 309, 562, 291, 500, 380, 458, 309, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 28, "seek": 13524, "start": 144.8, "end": 146.48000000000002, "text": " So here is a table.", "tokens": [407, 510, 307, 257, 3199, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 29, "seek": 13524, "start": 146.48000000000002, "end": 151.88, "text": " The exponential has a very nice development, nicely decaying.", "tokens": [440, 21510, 575, 257, 588, 1481, 3250, 11, 9594, 21039, 278, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 30, "seek": 13524, "start": 151.88, "end": 156.12, "text": " And if you multiply these exponentials, you don't have any blow-up.", "tokens": [400, 498, 291, 12972, 613, 21510, 82, 11, 291, 500, 380, 362, 604, 6327, 12, 1010, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 31, "seek": 13524, "start": 156.12, "end": 163.32000000000002, "text": " However, the last coefficient, if you want to represent that, and you have to think about", "tokens": [2908, 11, 264, 1036, 17619, 11, 498, 291, 528, 281, 2906, 300, 11, 293, 291, 362, 281, 519, 466], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 32, "seek": 13524, "start": 163.32000000000002, "end": 164.32000000000002, "text": " GPUs.", "tokens": [18407, 82, 13], "temperature": 0.0, "avg_logprob": -0.1473651712590998, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.00033639752655290067}, {"id": 33, "seek": 16432, "start": 164.32, "end": 168.64, "text": " GPUs are actually quite happy if they can do things in groups of 32.", "tokens": [18407, 82, 366, 767, 1596, 2055, 498, 436, 393, 360, 721, 294, 3935, 295, 8858, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 34, "seek": 16432, "start": 168.64, "end": 176.44, "text": " So actually a 32 power series, an order 32 power series, is actually still very small", "tokens": [407, 767, 257, 8858, 1347, 2638, 11, 364, 1668, 8858, 1347, 2638, 11, 307, 767, 920, 588, 1359], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 35, "seek": 16432, "start": 176.44, "end": 177.44, "text": " for GPUs.", "tokens": [337, 18407, 82, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 36, "seek": 16432, "start": 177.44, "end": 180.04, "text": " But there you have already to use quad doubles.", "tokens": [583, 456, 291, 362, 1217, 281, 764, 10787, 31634, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 37, "seek": 16432, "start": 180.04, "end": 187.92, "text": " Otherwise, your last coefficients, you can't represent it anymore.", "tokens": [10328, 11, 428, 1036, 31994, 11, 291, 393, 380, 2906, 309, 3602, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 38, "seek": 16432, "start": 187.92, "end": 189.92, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 39, "seek": 16432, "start": 189.92, "end": 193.92, "text": " So I started working with the QD library.", "tokens": [407, 286, 1409, 1364, 365, 264, 1249, 35, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1976318145066165, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.00020308773673605174}, {"id": 40, "seek": 19392, "start": 193.92, "end": 198.0, "text": " And then we were doing multi-core.", "tokens": [400, 550, 321, 645, 884, 4825, 12, 12352, 13], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 41, "seek": 19392, "start": 198.0, "end": 204.67999999999998, "text": " Me and my student, Gennady Jofi, and we looked at each other, should we do this on the GPU?", "tokens": [1923, 293, 452, 3107, 11, 460, 1857, 880, 508, 2670, 72, 11, 293, 321, 2956, 412, 1184, 661, 11, 820, 321, 360, 341, 322, 264, 18407, 30], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 42, "seek": 19392, "start": 204.67999999999998, "end": 208.0, "text": " Should we write the entire library on the GPU?", "tokens": [6454, 321, 2464, 264, 2302, 6405, 322, 264, 18407, 30], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 43, "seek": 19392, "start": 208.0, "end": 211.16, "text": " My student didn't really want to do it, and I didn't want to do it.", "tokens": [1222, 3107, 994, 380, 534, 528, 281, 360, 309, 11, 293, 286, 994, 380, 528, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 44, "seek": 19392, "start": 211.16, "end": 215.67999999999998, "text": " But then we discovered GQD, and we used GQD.", "tokens": [583, 550, 321, 6941, 460, 48, 35, 11, 293, 321, 1143, 460, 48, 35, 13], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 45, "seek": 19392, "start": 215.67999999999998, "end": 219.79999999999998, "text": " And the recent package that we are using is Compari.", "tokens": [400, 264, 5162, 7372, 300, 321, 366, 1228, 307, 2432, 2181, 72, 13], "temperature": 0.0, "avg_logprob": -0.15621550729341596, "compression_ratio": 1.6066350710900474, "no_speech_prob": 0.0003444779431447387}, {"id": 46, "seek": 21980, "start": 219.8, "end": 223.88000000000002, "text": " It's actually the only software I know that is named after a beverage.", "tokens": [467, 311, 767, 264, 787, 4722, 286, 458, 300, 307, 4926, 934, 257, 35519, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 47, "seek": 21980, "start": 223.88000000000002, "end": 226.56, "text": " I don't know if that's a good sign or not.", "tokens": [286, 500, 380, 458, 498, 300, 311, 257, 665, 1465, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 48, "seek": 21980, "start": 226.56, "end": 232.04000000000002, "text": " In my supermarket store in Chicago, I once saw Compari, but it's not my drink.", "tokens": [682, 452, 25180, 3531, 294, 9525, 11, 286, 1564, 1866, 2432, 2181, 72, 11, 457, 309, 311, 406, 452, 2822, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 49, "seek": 21980, "start": 232.04000000000002, "end": 238.04000000000002, "text": " So I didn't want to ruin the taste of using Compari.", "tokens": [407, 286, 994, 380, 528, 281, 15514, 264, 3939, 295, 1228, 2432, 2181, 72, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 50, "seek": 21980, "start": 238.04000000000002, "end": 239.44, "text": " So I stayed off this.", "tokens": [407, 286, 9181, 766, 341, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 51, "seek": 21980, "start": 239.44, "end": 241.08, "text": " Compari is actually quite good.", "tokens": [2432, 2181, 72, 307, 767, 1596, 665, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 52, "seek": 21980, "start": 241.08, "end": 248.92000000000002, "text": " So because it allowed me to go to quad double, and now also octo double.", "tokens": [407, 570, 309, 4350, 385, 281, 352, 281, 10787, 3834, 11, 293, 586, 611, 13350, 78, 3834, 13], "temperature": 0.0, "avg_logprob": -0.13541450670787267, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0006848168559372425}, {"id": 53, "seek": 24892, "start": 248.92, "end": 255.83999999999997, "text": " The numbers in this table are kind of good, because I want to have really performance.", "tokens": [440, 3547, 294, 341, 3199, 366, 733, 295, 665, 11, 570, 286, 528, 281, 362, 534, 3389, 13], "temperature": 0.0, "avg_logprob": -0.20117468950225087, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.0003691857564263046}, {"id": 54, "seek": 24892, "start": 255.83999999999997, "end": 262.03999999999996, "text": " But it also comes somehow misleading, because as soon as you're using complex double-double,", "tokens": [583, 309, 611, 1487, 6063, 36429, 11, 570, 382, 2321, 382, 291, 434, 1228, 3997, 3834, 12, 67, 33147, 11], "temperature": 0.0, "avg_logprob": -0.20117468950225087, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.0003691857564263046}, {"id": 55, "seek": 24892, "start": 262.03999999999996, "end": 264.32, "text": " everything becomes compute bound.", "tokens": [1203, 3643, 14722, 5472, 13], "temperature": 0.0, "avg_logprob": -0.20117468950225087, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.0003691857564263046}, {"id": 56, "seek": 24892, "start": 264.32, "end": 270.32, "text": " And the problems that you have with memory transfer and all, you do a lot of arithmetic", "tokens": [400, 264, 2740, 300, 291, 362, 365, 4675, 5003, 293, 439, 11, 291, 360, 257, 688, 295, 42973], "temperature": 0.0, "avg_logprob": -0.20117468950225087, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.0003691857564263046}, {"id": 57, "seek": 24892, "start": 270.32, "end": 277.76, "text": " operations on a relatively small amount of data.", "tokens": [7705, 322, 257, 7226, 1359, 2372, 295, 1412, 13], "temperature": 0.0, "avg_logprob": -0.20117468950225087, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.0003691857564263046}, {"id": 58, "seek": 27776, "start": 277.76, "end": 280.36, "text": " I also like to do quality up.", "tokens": [286, 611, 411, 281, 360, 3125, 493, 13], "temperature": 0.0, "avg_logprob": -0.09920739382505417, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.00036350791924633086}, {"id": 59, "seek": 27776, "start": 280.36, "end": 288.32, "text": " If you can afford the time for, say, a double precision calculation, well, you will see", "tokens": [759, 291, 393, 6157, 264, 565, 337, 11, 584, 11, 257, 3834, 18356, 17108, 11, 731, 11, 291, 486, 536], "temperature": 0.0, "avg_logprob": -0.09920739382505417, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.00036350791924633086}, {"id": 60, "seek": 27776, "start": 288.32, "end": 290.88, "text": " that everything is not really right.", "tokens": [300, 1203, 307, 406, 534, 558, 13], "temperature": 0.0, "avg_logprob": -0.09920739382505417, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.00036350791924633086}, {"id": 61, "seek": 27776, "start": 290.88, "end": 299.76, "text": " But then you can allow the same amount of time, and you quadruple the precision.", "tokens": [583, 550, 291, 393, 2089, 264, 912, 2372, 295, 565, 11, 293, 291, 10787, 894, 781, 264, 18356, 13], "temperature": 0.0, "avg_logprob": -0.09920739382505417, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.00036350791924633086}, {"id": 62, "seek": 29976, "start": 299.76, "end": 309.59999999999997, "text": " So the 439 there, think about 1 gigaflop, 2 gigaflop, and then you go to teraflop.", "tokens": [407, 264, 1017, 12493, 456, 11, 519, 466, 502, 8741, 2792, 75, 404, 11, 568, 8741, 2792, 75, 404, 11, 293, 550, 291, 352, 281, 256, 1663, 3423, 404, 13], "temperature": 0.0, "avg_logprob": -0.12551448700275827, "compression_ratio": 1.5351351351351352, "no_speech_prob": 9.767580922925845e-05}, {"id": 63, "seek": 29976, "start": 309.59999999999997, "end": 315.03999999999996, "text": " So the 439 is kind of, if you have teraflop performance, it's like as if you would be", "tokens": [407, 264, 1017, 12493, 307, 733, 295, 11, 498, 291, 362, 256, 1663, 3423, 404, 3389, 11, 309, 311, 411, 382, 498, 291, 576, 312], "temperature": 0.0, "avg_logprob": -0.12551448700275827, "compression_ratio": 1.5351351351351352, "no_speech_prob": 9.767580922925845e-05}, {"id": 64, "seek": 29976, "start": 315.03999999999996, "end": 319.14, "text": " doing this on a single core.", "tokens": [884, 341, 322, 257, 2167, 4965, 13], "temperature": 0.0, "avg_logprob": -0.12551448700275827, "compression_ratio": 1.5351351351351352, "no_speech_prob": 9.767580922925845e-05}, {"id": 65, "seek": 29976, "start": 319.14, "end": 323.0, "text": " So I mentioned the funding agencies at the very slight.", "tokens": [407, 286, 2835, 264, 6137, 9504, 412, 264, 588, 4036, 13], "temperature": 0.0, "avg_logprob": -0.12551448700275827, "compression_ratio": 1.5351351351351352, "no_speech_prob": 9.767580922925845e-05}, {"id": 66, "seek": 29976, "start": 323.0, "end": 326.08, "text": " I would like to have a hopper.", "tokens": [286, 576, 411, 281, 362, 257, 3818, 610, 13], "temperature": 0.0, "avg_logprob": -0.12551448700275827, "compression_ratio": 1.5351351351351352, "no_speech_prob": 9.767580922925845e-05}, {"id": 67, "seek": 32608, "start": 326.08, "end": 331.0, "text": " But so for now, I have to deal with Pascal and Volta.", "tokens": [583, 370, 337, 586, 11, 286, 362, 281, 2028, 365, 41723, 293, 8911, 1328, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 68, "seek": 32608, "start": 331.0, "end": 338.71999999999997, "text": " And the last one is a gaming laptop, which is also actually quite a powerful GPU.", "tokens": [400, 264, 1036, 472, 307, 257, 9703, 10732, 11, 597, 307, 611, 767, 1596, 257, 4005, 18407, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 69, "seek": 32608, "start": 338.71999999999997, "end": 342.03999999999996, "text": " My first teraflop card was Kepler.", "tokens": [1222, 700, 256, 1663, 3423, 404, 2920, 390, 3189, 22732, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 70, "seek": 32608, "start": 342.03999999999996, "end": 346.96, "text": " And this last list of GPU actually gets there.", "tokens": [400, 341, 1036, 1329, 295, 18407, 767, 2170, 456, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 71, "seek": 32608, "start": 346.96, "end": 349.96, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 72, "seek": 32608, "start": 349.96, "end": 354.47999999999996, "text": " If you think of a double-double, there is a double-two.", "tokens": [759, 291, 519, 295, 257, 3834, 12, 67, 33147, 11, 456, 307, 257, 3834, 12, 20534, 13], "temperature": 0.0, "avg_logprob": -0.1981756056862316, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.0003022601886186749}, {"id": 73, "seek": 35448, "start": 354.48, "end": 357.48, "text": " And then for a quad-double, there is the double-four.", "tokens": [400, 550, 337, 257, 10787, 12, 67, 33147, 11, 456, 307, 264, 3834, 12, 23251, 13], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 74, "seek": 35448, "start": 357.48, "end": 360.52000000000004, "text": " So that was what the GQD was using.", "tokens": [407, 300, 390, 437, 264, 460, 48, 35, 390, 1228, 13], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 75, "seek": 35448, "start": 360.52000000000004, "end": 363.16, "text": " And that's very good for memory coalescing.", "tokens": [400, 300, 311, 588, 665, 337, 4675, 598, 4229, 2175, 13], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 76, "seek": 35448, "start": 363.16, "end": 369.04, "text": " But we actually got into trouble with the complex quad-double because there was no double-eight.", "tokens": [583, 321, 767, 658, 666, 5253, 365, 264, 3997, 10787, 12, 67, 33147, 570, 456, 390, 572, 3834, 12, 36309, 13], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 77, "seek": 35448, "start": 369.04, "end": 375.68, "text": " So instead of working, if you work with a vector of quad-doubles, a vector of arrays", "tokens": [407, 2602, 295, 1364, 11, 498, 291, 589, 365, 257, 8062, 295, 10787, 12, 67, 263, 8806, 11, 257, 8062, 295, 41011], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 78, "seek": 35448, "start": 375.68, "end": 380.36, "text": " of four length, you actually better use four vectors.", "tokens": [295, 1451, 4641, 11, 291, 767, 1101, 764, 1451, 18875, 13], "temperature": 0.0, "avg_logprob": -0.10973812499136296, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.00019678164971992373}, {"id": 79, "seek": 38036, "start": 380.36, "end": 385.8, "text": " The first one with the highest double, second double, third double, fourth double.", "tokens": [440, 700, 472, 365, 264, 6343, 3834, 11, 1150, 3834, 11, 2636, 3834, 11, 6409, 3834, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 80, "seek": 38036, "start": 385.8, "end": 389.16, "text": " So it's a little bit similar like working with power series.", "tokens": [407, 309, 311, 257, 707, 857, 2531, 411, 1364, 365, 1347, 2638, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 81, "seek": 38036, "start": 389.16, "end": 393.28000000000003, "text": " So power series is invertible if the leading coefficient is not zero.", "tokens": [407, 1347, 2638, 307, 33966, 964, 498, 264, 5775, 17619, 307, 406, 4018, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 82, "seek": 38036, "start": 393.28000000000003, "end": 396.2, "text": " You can work with matrices of power series.", "tokens": [509, 393, 589, 365, 32284, 295, 1347, 2638, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 83, "seek": 38036, "start": 396.2, "end": 397.28000000000003, "text": " But actually, that's not good.", "tokens": [583, 767, 11, 300, 311, 406, 665, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 84, "seek": 38036, "start": 397.28000000000003, "end": 401.64, "text": " You should actually work with a series where the coefficients are matrices.", "tokens": [509, 820, 767, 589, 365, 257, 2638, 689, 264, 31994, 366, 32284, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 85, "seek": 38036, "start": 401.64, "end": 403.36, "text": " Same idea here.", "tokens": [10635, 1558, 510, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 86, "seek": 38036, "start": 403.36, "end": 407.76, "text": " QDLIP is a very good library still.", "tokens": [1249, 35, 43, 9139, 307, 257, 588, 665, 6405, 920, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 87, "seek": 38036, "start": 407.76, "end": 408.94, "text": " It's quite complete.", "tokens": [467, 311, 1596, 3566, 13], "temperature": 0.0, "avg_logprob": -0.18287568343313118, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.00015315607015509158}, {"id": 88, "seek": 40894, "start": 408.94, "end": 415.2, "text": " So I have extended the square root, for example, to octodouble precision.", "tokens": [407, 286, 362, 10913, 264, 3732, 5593, 11, 337, 1365, 11, 281, 13350, 378, 33147, 18356, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 89, "seek": 40894, "start": 415.2, "end": 416.48, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 90, "seek": 40894, "start": 416.48, "end": 421.84, "text": " So here is then my beginning.", "tokens": [407, 510, 307, 550, 452, 2863, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 91, "seek": 40894, "start": 421.84, "end": 424.88, "text": " So I mentioned, so you saw this eight.", "tokens": [407, 286, 2835, 11, 370, 291, 1866, 341, 3180, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 92, "seek": 40894, "start": 424.88, "end": 432.4, "text": " So if you take a vector of random complex numbers, 64, then the norm is eight.", "tokens": [407, 498, 291, 747, 257, 8062, 295, 4974, 3997, 3547, 11, 12145, 11, 550, 264, 2026, 307, 3180, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 93, "seek": 40894, "start": 432.4, "end": 433.4, "text": " Should be eight.", "tokens": [6454, 312, 3180, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 94, "seek": 40894, "start": 433.4, "end": 436.48, "text": " So that's a really nice test property.", "tokens": [407, 300, 311, 257, 534, 1481, 1500, 4707, 13], "temperature": 0.0, "avg_logprob": -0.15589552833920434, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.00014599651331081986}, {"id": 95, "seek": 43648, "start": 436.48, "end": 442.20000000000005, "text": " If you work with GPUs, you actually define kernels, and kernels, the name says it itself,", "tokens": [759, 291, 589, 365, 18407, 82, 11, 291, 767, 6964, 23434, 1625, 11, 293, 23434, 1625, 11, 264, 1315, 1619, 309, 2564, 11], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 96, "seek": 43648, "start": 442.20000000000005, "end": 443.20000000000005, "text": " it should be small.", "tokens": [309, 820, 312, 1359, 13], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 97, "seek": 43648, "start": 443.20000000000005, "end": 444.8, "text": " So think small.", "tokens": [407, 519, 1359, 13], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 98, "seek": 43648, "start": 444.8, "end": 449.12, "text": " And actually, this problem is a small problem, mathematically speaking, but it has all the", "tokens": [400, 767, 11, 341, 1154, 307, 257, 1359, 1154, 11, 44003, 4124, 11, 457, 309, 575, 439, 264], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 99, "seek": 43648, "start": 449.12, "end": 455.48, "text": " richness and the complexity of all the problems that you will run into.", "tokens": [44506, 293, 264, 14024, 295, 439, 264, 2740, 300, 291, 486, 1190, 666, 13], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 100, "seek": 43648, "start": 455.48, "end": 459.20000000000005, "text": " You will have to study the prefix sum algorithm, for example.", "tokens": [509, 486, 362, 281, 2979, 264, 46969, 2408, 9284, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 101, "seek": 43648, "start": 459.20000000000005, "end": 460.56, "text": " So that is needed.", "tokens": [407, 300, 307, 2978, 13], "temperature": 0.0, "avg_logprob": -0.12744780949183873, "compression_ratio": 1.64, "no_speech_prob": 7.493585871998221e-05}, {"id": 102, "seek": 46056, "start": 460.56, "end": 466.6, "text": " You also have to tune your software for large vectors or for small vectors.", "tokens": [509, 611, 362, 281, 10864, 428, 4722, 337, 2416, 18875, 420, 337, 1359, 18875, 13], "temperature": 0.0, "avg_logprob": -0.21373137560757724, "compression_ratio": 1.4310344827586208, "no_speech_prob": 0.0001838711032178253}, {"id": 103, "seek": 46056, "start": 466.6, "end": 473.44, "text": " You can only have one block of threads that is active.", "tokens": [509, 393, 787, 362, 472, 3461, 295, 19314, 300, 307, 4967, 13], "temperature": 0.0, "avg_logprob": -0.21373137560757724, "compression_ratio": 1.4310344827586208, "no_speech_prob": 0.0001838711032178253}, {"id": 104, "seek": 46056, "start": 473.44, "end": 476.68, "text": " The square root works with staggered.", "tokens": [440, 3732, 5593, 1985, 365, 29656, 292, 13], "temperature": 0.0, "avg_logprob": -0.21373137560757724, "compression_ratio": 1.4310344827586208, "no_speech_prob": 0.0001838711032178253}, {"id": 105, "seek": 46056, "start": 476.68, "end": 481.88, "text": " So you apply a Newton method.", "tokens": [407, 291, 3079, 257, 19541, 3170, 13], "temperature": 0.0, "avg_logprob": -0.21373137560757724, "compression_ratio": 1.4310344827586208, "no_speech_prob": 0.0001838711032178253}, {"id": 106, "seek": 46056, "start": 481.88, "end": 487.32, "text": " And then actually, this is where the dot comes in.", "tokens": [400, 550, 767, 11, 341, 307, 689, 264, 5893, 1487, 294, 13], "temperature": 0.0, "avg_logprob": -0.21373137560757724, "compression_ratio": 1.4310344827586208, "no_speech_prob": 0.0001838711032178253}, {"id": 107, "seek": 48732, "start": 487.32, "end": 495.59999999999997, "text": " So the nice thing about double doubles, quad doubles, is that everything fits into registers.", "tokens": [407, 264, 1481, 551, 466, 3834, 31634, 11, 10787, 31634, 11, 307, 300, 1203, 9001, 666, 38351, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 108, "seek": 48732, "start": 495.59999999999997, "end": 499.12, "text": " So it's also very good if you do multi-core.", "tokens": [407, 309, 311, 611, 588, 665, 498, 291, 360, 4825, 12, 12352, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 109, "seek": 48732, "start": 499.12, "end": 501.12, "text": " So you don't have to use the heap ever.", "tokens": [407, 291, 500, 380, 362, 281, 764, 264, 33591, 1562, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 110, "seek": 48732, "start": 501.12, "end": 505.56, "text": " But of course, when you get to complex quad doubles, you have these eight arrays.", "tokens": [583, 295, 1164, 11, 562, 291, 483, 281, 3997, 10787, 31634, 11, 291, 362, 613, 3180, 41011, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 111, "seek": 48732, "start": 505.56, "end": 509.15999999999997, "text": " If you do octodoubles, so it doubles and doubles and doubles.", "tokens": [759, 291, 360, 13350, 378, 263, 8806, 11, 370, 309, 31634, 293, 31634, 293, 31634, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 112, "seek": 48732, "start": 509.15999999999997, "end": 514.84, "text": " So I have with my old graphics cards, they can no longer even compile the octodoubles", "tokens": [407, 286, 362, 365, 452, 1331, 11837, 5632, 11, 436, 393, 572, 2854, 754, 31413, 264, 13350, 378, 263, 8806], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 113, "seek": 48732, "start": 514.84, "end": 516.88, "text": " if you inline too much.", "tokens": [498, 291, 294, 1889, 886, 709, 13], "temperature": 0.0, "avg_logprob": -0.12145221133192047, "compression_ratio": 1.815126050420168, "no_speech_prob": 0.00010290812497260049}, {"id": 114, "seek": 51688, "start": 516.88, "end": 525.96, "text": " So it's still very interesting that, actually, you have to tailor your kernels towards the", "tokens": [407, 309, 311, 920, 588, 1880, 300, 11, 767, 11, 291, 362, 281, 33068, 428, 23434, 1625, 3030, 264], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 115, "seek": 51688, "start": 525.96, "end": 528.76, "text": " precision levels.", "tokens": [18356, 4358, 13], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 116, "seek": 51688, "start": 528.76, "end": 530.0, "text": " So here is my last slide.", "tokens": [407, 510, 307, 452, 1036, 4137, 13], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 117, "seek": 51688, "start": 530.0, "end": 532.8, "text": " I did more than just norms.", "tokens": [286, 630, 544, 813, 445, 24357, 13], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 118, "seek": 51688, "start": 532.8, "end": 540.32, "text": " So we have teraflop performance when we evaluate polynomials and differentiate them.", "tokens": [407, 321, 362, 256, 1663, 3423, 404, 3389, 562, 321, 13059, 22560, 12356, 293, 23203, 552, 13], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 119, "seek": 51688, "start": 540.32, "end": 544.08, "text": " The QR, the blocked householder QR, is also wonderful.", "tokens": [440, 32784, 11, 264, 15470, 9888, 260, 32784, 11, 307, 611, 3715, 13], "temperature": 0.0, "avg_logprob": -0.17092021703720092, "compression_ratio": 1.4803921568627452, "no_speech_prob": 0.00011222410830669105}, {"id": 120, "seek": 54408, "start": 544.08, "end": 552.2800000000001, "text": " You get already teraflop performance with 1,000 in complex double-double.", "tokens": [509, 483, 1217, 256, 1663, 3423, 404, 3389, 365, 502, 11, 1360, 294, 3997, 3834, 12, 67, 33147, 13], "temperature": 0.0, "avg_logprob": -0.12243924030037813, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.000259520165855065}, {"id": 121, "seek": 54408, "start": 552.2800000000001, "end": 557.5200000000001, "text": " And then the last paper is where you try to combine these things by computing Taylor series", "tokens": [400, 550, 264, 1036, 3035, 307, 689, 291, 853, 281, 10432, 613, 721, 538, 15866, 12060, 2638], "temperature": 0.0, "avg_logprob": -0.12243924030037813, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.000259520165855065}, {"id": 122, "seek": 54408, "start": 557.5200000000001, "end": 564.72, "text": " for solutions of solution developments for polynomial systems.", "tokens": [337, 6547, 295, 3827, 20862, 337, 26110, 3652, 13], "temperature": 0.0, "avg_logprob": -0.12243924030037813, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.000259520165855065}, {"id": 123, "seek": 54408, "start": 564.72, "end": 567.24, "text": " Newton's method is actually a quite nice operator.", "tokens": [19541, 311, 3170, 307, 767, 257, 1596, 1481, 12973, 13], "temperature": 0.0, "avg_logprob": -0.12243924030037813, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.000259520165855065}, {"id": 124, "seek": 54408, "start": 567.24, "end": 572.6800000000001, "text": " You start with a multivariate system where all the variables are linked to each other.", "tokens": [509, 722, 365, 257, 2120, 592, 3504, 473, 1185, 689, 439, 264, 9102, 366, 9408, 281, 1184, 661, 13], "temperature": 0.0, "avg_logprob": -0.12243924030037813, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.000259520165855065}, {"id": 125, "seek": 57268, "start": 572.68, "end": 578.88, "text": " And what Newton actually does, it spits out power series for each component.", "tokens": [400, 437, 19541, 767, 775, 11, 309, 637, 1208, 484, 1347, 2638, 337, 1184, 6542, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 126, "seek": 57268, "start": 578.88, "end": 586.2399999999999, "text": " So actually, it untangles all the linearities, all the nonlinearities.", "tokens": [407, 767, 11, 309, 1701, 656, 904, 439, 264, 8213, 1088, 11, 439, 264, 2107, 28263, 1088, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 127, "seek": 57268, "start": 586.2399999999999, "end": 587.64, "text": " So I listed the archive.", "tokens": [407, 286, 10052, 264, 23507, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 128, "seek": 57268, "start": 587.64, "end": 592.16, "text": " So the IEEE puts things in a paywall, behind the paywall.", "tokens": [407, 264, 286, 7258, 36, 8137, 721, 294, 257, 1689, 16256, 11, 2261, 264, 1689, 16256, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 129, "seek": 57268, "start": 592.16, "end": 595.2399999999999, "text": " So you have the archive versions there.", "tokens": [407, 291, 362, 264, 23507, 9606, 456, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 130, "seek": 57268, "start": 595.2399999999999, "end": 599.0, "text": " And you're more than welcome to the bottom line of this slide.", "tokens": [400, 291, 434, 544, 813, 2928, 281, 264, 2767, 1622, 295, 341, 4137, 13], "temperature": 0.0, "avg_logprob": -0.15641881060856644, "compression_ratio": 1.6243902439024391, "no_speech_prob": 9.216125909006223e-05}, {"id": 131, "seek": 59900, "start": 599.0, "end": 602.96, "text": " I mean, the conclusion, actually, is that all the software is free and open source.", "tokens": [286, 914, 11, 264, 10063, 11, 767, 11, 307, 300, 439, 264, 4722, 307, 1737, 293, 1269, 4009, 13], "temperature": 0.0, "avg_logprob": -0.25959640741348267, "compression_ratio": 1.21875, "no_speech_prob": 0.0005352291045710444}, {"id": 132, "seek": 60296, "start": 602.96, "end": 632.0400000000001, "text": " I'd have the GitHub handle there.", "tokens": [286, 1116, 362, 264, 23331, 4813, 456, 13], "temperature": 0.0, "avg_logprob": -0.5851419766743978, "compression_ratio": 0.9166666666666666, "no_speech_prob": 0.00019068665278609842}], "language": "en"}