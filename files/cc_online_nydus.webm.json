{"text": " Hello everybody, this is my honor to introduce in my recent work about enabling NIDA's image service for confidential containers. Let me introduce myself first. I am Gary Niel from Antibaba Cloud. Currently I am working in the OS team to enable NIDA's operating system for cloud workloads. I am a non-standing NIDA's cloud hacker and has contributed much to the NIDA's kernel. In the last few years, I am also interested in cloud-related technologies such as micro-oVM, container runtime, container image management, and I have joined several open source projects such as the Cata containers project, confidential containers project, the NIDA's image service project, and the masterman project. I will go over three topics. First, I will explain the special requirement of image management for confidential containers, the current available technologies, and the challenging we are still facing. Then I will give a brief introduction about the NIDA's image project. Its design, its feature, and its current status. Last, I will give my ideas to enhance NIDA's image service for confidential containers to improve the image loading process for confidential containers. Project COCO, or the Confidential Container Project, aims to protect confidentiality and the integrity of a container workload by using hardware TEs. A way to protect a container application is to adopt the Cata container architecture, which is to run a dedicated virtual machine for each port. And we can enhance confidentiality and the integrity of Cata virtual machines with hardware TEs. So to protect an application, we need to protect all the sources accessed by the application, such as CPU, memory, network storage, and external device, such as GPUs. As a container, in addition to those resources accessed by the application, we also need to protect the container image of the workload. So how could we protect container images for confidential containers? So why do we care about image management for confidential containers? What's the special requirement? Before talking about special requirements, let's go through the current way to managing container images for normal containers. Take a container D as an example. To run a container, container D will first download a raw image blob from registry and store those blobs to local FS. Once all blobs are ready, container D will call slap shorter to convert those blobs into fast system and prepare root FS for containers. Once the root FS is ready, container D will start a container and the container can access all files and the data inside the container image. Here, we can say that the raw image blob and the mounted fast system are available on host sites, which expose special challenge to confidential containers because we need to protect confidentiality and integrity of images for containers. Let's move on to image management for confidential containers. To summary, confidential image management will face three special requirements, which are confidentiality, integrity, and efficiency. To ensure confidentiality, all image containers should be encrypted, both on registry and on local host. So the image container can be kept private. Second, the image management must be moved from host inside into guest. Because if we store image container and mounted fast system on host, the container will be available to host, which breaks confidentiality. Even worse, host can make changes to those images and break the integrity of container images. By encryption and moving image management inside a guest, we can ensure confidentiality and integrity of images. But we will face another new challenges. With traditional image management, each blob and fast system are mounted on host, which can be reused for different container instances and restart. But by moving image management inside into guest, we need to download and prepare images for each container instance. In other words, container images can't be reused for different container instances, which will bring bigger costs, such as high pressure on registry, slow container startup time, and heavy IO requests on local device. So how could we achieve both confidentiality, integrity, and efficiency for confidential containers? There are some existing technologies for confidential containers. The OSI Cript project provides a way to encrypt the whole images and the cosine project provides a way to ensure the integrity of container images. And the confidential container community also invented some new technologies to move image management from host into guest. We modified the container D and Cata container and introduced a new component named imageRS. These three components help us to management container images inside a guest. So we have technologies to ensure container image confidentiality and integrity, but we are still facing the challenge of efficiency. How could we improve efficiency for image management? The latest image management service project provides an interesting way to achieve efficiency for confidential containers. What's the latest image service? The latest image project provides a framework to provide image management service for containers. The following picture is a co-architecture of the latest project. It has been split into build, ship, and run stages. This project has different aspects. First, it defines a read-only file system format with plenty features such as laser loading, data de-definification, and compatible with OSI-V1 images. And we are also adding encryption to the image format. Second, it's a read-only file system for containers, AI models, and software packages. It's very flexible to access the latest image. We provide different interfaces such as fields on Linux and Mac OS, water IFS for virtual machines, and ERFs page sharing on Linux. And we are also developing a real-space library for application to directly access files from our latest image. Third, we also develop a storage subsystem for loader. We also develop a load-neighbors storage subsystem with P2P, Cache, and data de-definification. We build a load-load content-address storage subsystem to duplicate data among different images. Last, the latest image project has put much effort to get integrated with the ecosystem. There is one more feature we should mention here. The latest latest release provides an OSI-V1 compatible model. We will get more information about the compatible model in later. The core of the latest project is the latest image format. So, let's get an undetected explanation about the latest image format. The way to convert an existing OSI-V1 image into a latest image, as we know, an OSI-V1 image contains one manifest and one or more data layers. Each data layer is a binary blob. Actually, the binary blob is a tar stream. Within the tar stream, there are tar headers and file data. To convert an OSI-V1 image layer to latest layer, latest data blob, we first group all tar headers together and translate them into a file system meta data. The file system meta data can be mounted directly by a Fuse server or by the Incola IRFS file system. With this file system meta data, let us can provide full file system view to the workspace. Then, we chunk file data into fixed size and compress the chunk data. At last, we need some information to decompress the compressed chunk data. So, our latest data blob includes three parts. First is meta data, chunk info array, and chunk data. There is one latest data blob for every OSI-V1 image layer. In addition, latest has an extra layer. We call it latest meta data blob. latest meta data blob is generated by merging all file system meta data from all data blobs. In other words, the latest meta data blob is built-time overview file system. With the meta data blob, we do not need to mount each data blob individually. Instead, we directly mount the meta data blob. Thus, we don't need to overlay image layers at a long time. We don't notice that if we care about backward compatibility, we need to both generate OSI-V1 image and the latest image for the same container. That will cause container image data saved twice and waste storage space. To solve this problem, the latest NIDAS provides a new model called NIDAS OSI-V1 compatible model. With this mode, the latest data blob only contains file system meta data and chunk information. It doesn't save chunk data. The OSI image spec version 1.1 provides an OSI reference type. By using the reference type, we can get the data from the original OSI-V1 image. That means for existing OSI-V1 images, we can build an extra NIDAS image to provide lazy loading and other features. The OSI compatible model generates various more NIDAS images, typically about 3 to 5% of the original OSI-V1 images. The OSI-V1 compatible model is very useful for backward compatibility. NIDAS has two modes. One is NIDAS native mode and the other is OSI-V1 compatible mode. Each NIDAS image contains two types of blob, data blob and meta blob. The meta blob contains file system meta data and can provide a full file system view. And the data blob contains file chunks for each layer. The NIDAS project also provides flexible interface to access NIDAS images. It can be accessed by a source of use, URLFS, waterFS, and even through some URL space library. For example, the NIDAS image is URLFS compatible. Let's look at the way for URLFS to make use of NIDAS images. The URLFS will directly mount a NIDAS meta data blob and provide a full file system view. The application can work the file system tree. When the application tries to read the data from a file and the file data is not ready, URLFS will notify the FS catch and FS catch will send a request to NIDASD and MSD will fetch the data from the remote registry. And when the data is ready, NIDAS will notify FS catch and notify URLFS. Eventually, the data will be sent back to the application. As image service, help to improve the efficiency of confidential containers. There are several enhancements needed for NIDAS images to support confidential containers. First, we need to add data encryption to NIDAS image format. We use a hybrid mode to protect NIDAS image. First, we will use OSI craps to protect the NIDAS meta data blob. And the meta data blob contains case to describe data from data blobs. So the data blobs are protected by NIDAS. By that way, we can support both data encryption and meta loading at the same time. For data integrity, traditionally, the integrity of data blobs or images are verified at a download time. And there is no mechanism to ensure data integrity at a run time. NIDAS adds a special attribute to the image management to verify the integrity of data checks at a run time. So, like encryption, we will combine cosine and NIDAS to protect the integrity of the whole image. First, we will use cosine to protect the integrity of manifest and NIDAS meta blob. And the meta data blob contains digest of the data blob. And there is a monetary to usually ensure the data integrity of each data chunk. So the data blob is protected by NIDAS again. With the enhancement of encryption and data integrity verification, we can support laser loading and image cards for confidential containers. So, we can fetch image data from remote registry or from remote node through P2P, or we can fetch the image data from host, from data cache on host through what type of interface or what type of block interface. And we also support different modes to access encrypted images. It can be accessed through LADASD and fuels, or it can also be accessed through LADASD and URFS. And we are working on researching to enable URFS to directly access LADAS images, but that is still in the early stage. We are still working on that direction. That is our development plan. The first stage is to integrate LADAS image service with the image IIS create. After the first stage, we only provide the laser loading capability and do not include data caching. The next step is to add data caching to LADASD. By that, we can perfect the image data and cache it inside the trusted domain that will greatly improve the performance and reliability. And as I mentioned just now, we are still investigating to enhance the URFS to directly access LADAS images through what type of block. If we achieve that, it will be very flexible. There is no URFS demon to serve the image. That will be very great. But how to provide image caching and host is out of scope. We won't discuss it here. And there are other ways to provide image caching service, such as we can block-based image caching. For example, we can use code call to image format to provide encrypted image. Then we can use DEM integrity and DEM craft to ensure the confidentiality and integrity. Let us do the same simple, but it is not very inflexible. So we will enable LADAS image service for confidential container first. We are targeting to integrate LADAS image service into confidential containers by end of code 2. If you are interested in the technology or project, please join us. Thank you for listening. .", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 21.36, "text": " Hello everybody, this is my honor to introduce in my recent work about enabling NIDA's image", "tokens": [50364, 2425, 2201, 11, 341, 307, 452, 5968, 281, 5366, 294, 452, 5162, 589, 466, 23148, 426, 2777, 32, 311, 3256, 51432], "temperature": 0.0, "avg_logprob": -0.5331028353783392, "compression_ratio": 1.1415929203539823, "no_speech_prob": 0.13641417026519775}, {"id": 1, "seek": 0, "start": 21.36, "end": 25.92, "text": " service for confidential containers.", "tokens": [51432, 2643, 337, 27054, 17089, 13, 51660], "temperature": 0.0, "avg_logprob": -0.5331028353783392, "compression_ratio": 1.1415929203539823, "no_speech_prob": 0.13641417026519775}, {"id": 2, "seek": 2592, "start": 25.92, "end": 33.400000000000006, "text": " Let me introduce myself first. I am Gary Niel from Antibaba Cloud. Currently I am working", "tokens": [50364, 961, 385, 5366, 2059, 700, 13, 286, 669, 13788, 426, 1187, 490, 5130, 897, 5509, 8061, 13, 19964, 286, 669, 1364, 50738], "temperature": 0.0, "avg_logprob": -0.37775250752766926, "compression_ratio": 1.446236559139785, "no_speech_prob": 0.052282605320215225}, {"id": 3, "seek": 2592, "start": 33.400000000000006, "end": 42.44, "text": " in the OS team to enable NIDA's operating system for cloud workloads. I am a non-standing", "tokens": [50738, 294, 264, 12731, 1469, 281, 9528, 426, 2777, 32, 311, 7447, 1185, 337, 4588, 32452, 13, 286, 669, 257, 2107, 12, 8618, 51190], "temperature": 0.0, "avg_logprob": -0.37775250752766926, "compression_ratio": 1.446236559139785, "no_speech_prob": 0.052282605320215225}, {"id": 4, "seek": 2592, "start": 42.44, "end": 52.24, "text": " NIDA's cloud hacker and has contributed much to the NIDA's kernel. In the last few years,", "tokens": [51190, 426, 2777, 32, 311, 4588, 38155, 293, 575, 18434, 709, 281, 264, 426, 2777, 32, 311, 28256, 13, 682, 264, 1036, 1326, 924, 11, 51680], "temperature": 0.0, "avg_logprob": -0.37775250752766926, "compression_ratio": 1.446236559139785, "no_speech_prob": 0.052282605320215225}, {"id": 5, "seek": 5224, "start": 52.24, "end": 61.56, "text": " I am also interested in cloud-related technologies such as micro-oVM, container runtime, container", "tokens": [50364, 286, 669, 611, 3102, 294, 4588, 12, 12004, 7943, 1270, 382, 4532, 12, 78, 53, 44, 11, 10129, 34474, 11, 10129, 50830], "temperature": 0.0, "avg_logprob": -0.28863495115249876, "compression_ratio": 1.6467065868263473, "no_speech_prob": 0.007282705511897802}, {"id": 6, "seek": 5224, "start": 61.56, "end": 70.16, "text": " image management, and I have joined several open source projects such as the Cata containers", "tokens": [50830, 3256, 4592, 11, 293, 286, 362, 6869, 2940, 1269, 4009, 4455, 1270, 382, 264, 383, 3274, 17089, 51260], "temperature": 0.0, "avg_logprob": -0.28863495115249876, "compression_ratio": 1.6467065868263473, "no_speech_prob": 0.007282705511897802}, {"id": 7, "seek": 5224, "start": 70.16, "end": 75.76, "text": " project, confidential containers project, the NIDA's image service project, and the", "tokens": [51260, 1716, 11, 27054, 17089, 1716, 11, 264, 426, 2777, 32, 311, 3256, 2643, 1716, 11, 293, 264, 51540], "temperature": 0.0, "avg_logprob": -0.28863495115249876, "compression_ratio": 1.6467065868263473, "no_speech_prob": 0.007282705511897802}, {"id": 8, "seek": 7576, "start": 75.76, "end": 84.76, "text": " masterman project. I will go over three topics. First, I will explain the special requirement", "tokens": [50364, 4505, 1601, 1716, 13, 286, 486, 352, 670, 1045, 8378, 13, 2386, 11, 286, 486, 2903, 264, 2121, 11695, 50814], "temperature": 0.0, "avg_logprob": -0.2912121772766113, "compression_ratio": 1.4421052631578948, "no_speech_prob": 0.025545582175254822}, {"id": 9, "seek": 7576, "start": 84.76, "end": 93.24000000000001, "text": " of image management for confidential containers, the current available technologies, and the", "tokens": [50814, 295, 3256, 4592, 337, 27054, 17089, 11, 264, 2190, 2435, 7943, 11, 293, 264, 51238], "temperature": 0.0, "avg_logprob": -0.2912121772766113, "compression_ratio": 1.4421052631578948, "no_speech_prob": 0.025545582175254822}, {"id": 10, "seek": 7576, "start": 93.24000000000001, "end": 99.36000000000001, "text": " challenging we are still facing. Then I will give a brief introduction about the NIDA's", "tokens": [51238, 7595, 321, 366, 920, 7170, 13, 1396, 286, 486, 976, 257, 5353, 9339, 466, 264, 426, 2777, 32, 311, 51544], "temperature": 0.0, "avg_logprob": -0.2912121772766113, "compression_ratio": 1.4421052631578948, "no_speech_prob": 0.025545582175254822}, {"id": 11, "seek": 9936, "start": 99.36, "end": 110.92, "text": " image project. Its design, its feature, and its current status. Last, I will give my ideas", "tokens": [50364, 3256, 1716, 13, 6953, 1715, 11, 1080, 4111, 11, 293, 1080, 2190, 6558, 13, 5264, 11, 286, 486, 976, 452, 3487, 50942], "temperature": 0.0, "avg_logprob": -0.20561236143112183, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.00653496477752924}, {"id": 12, "seek": 9936, "start": 110.92, "end": 118.8, "text": " to enhance NIDA's image service for confidential containers to improve the image loading process", "tokens": [50942, 281, 11985, 426, 2777, 32, 311, 3256, 2643, 337, 27054, 17089, 281, 3470, 264, 3256, 15114, 1399, 51336], "temperature": 0.0, "avg_logprob": -0.20561236143112183, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.00653496477752924}, {"id": 13, "seek": 9936, "start": 118.8, "end": 127.0, "text": " for confidential containers. Project COCO, or the Confidential Container Project, aims", "tokens": [51336, 337, 27054, 17089, 13, 9849, 3002, 12322, 11, 420, 264, 11701, 1078, 831, 43732, 260, 9849, 11, 24683, 51746], "temperature": 0.0, "avg_logprob": -0.20561236143112183, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.00653496477752924}, {"id": 14, "seek": 12700, "start": 127.0, "end": 133.26, "text": " to protect confidentiality and the integrity of a container workload by using hardware", "tokens": [50364, 281, 2371, 27054, 507, 293, 264, 16000, 295, 257, 10129, 20139, 538, 1228, 8837, 50677], "temperature": 0.0, "avg_logprob": -0.25890712414757683, "compression_ratio": 1.622754491017964, "no_speech_prob": 0.030117779970169067}, {"id": 15, "seek": 12700, "start": 133.26, "end": 142.4, "text": " TEs. A way to protect a container application is to adopt the Cata container architecture,", "tokens": [50677, 314, 20442, 13, 316, 636, 281, 2371, 257, 10129, 3861, 307, 281, 6878, 264, 383, 3274, 10129, 9482, 11, 51134], "temperature": 0.0, "avg_logprob": -0.25890712414757683, "compression_ratio": 1.622754491017964, "no_speech_prob": 0.030117779970169067}, {"id": 16, "seek": 12700, "start": 142.4, "end": 152.72, "text": " which is to run a dedicated virtual machine for each port. And we can enhance confidentiality", "tokens": [51134, 597, 307, 281, 1190, 257, 8374, 6374, 3479, 337, 1184, 2436, 13, 400, 321, 393, 11985, 27054, 507, 51650], "temperature": 0.0, "avg_logprob": -0.25890712414757683, "compression_ratio": 1.622754491017964, "no_speech_prob": 0.030117779970169067}, {"id": 17, "seek": 15272, "start": 152.72, "end": 164.76, "text": " and the integrity of Cata virtual machines with hardware TEs. So to protect an application,", "tokens": [50364, 293, 264, 16000, 295, 383, 3274, 6374, 8379, 365, 8837, 314, 20442, 13, 407, 281, 2371, 364, 3861, 11, 50966], "temperature": 0.0, "avg_logprob": -0.2329862623503714, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.0037660219240933657}, {"id": 18, "seek": 15272, "start": 164.76, "end": 172.76, "text": " we need to protect all the sources accessed by the application, such as CPU, memory, network", "tokens": [50966, 321, 643, 281, 2371, 439, 264, 7139, 34211, 538, 264, 3861, 11, 1270, 382, 13199, 11, 4675, 11, 3209, 51366], "temperature": 0.0, "avg_logprob": -0.2329862623503714, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.0037660219240933657}, {"id": 19, "seek": 15272, "start": 172.76, "end": 181.32, "text": " storage, and external device, such as GPUs. As a container, in addition to those resources", "tokens": [51366, 6725, 11, 293, 8320, 4302, 11, 1270, 382, 18407, 82, 13, 1018, 257, 10129, 11, 294, 4500, 281, 729, 3593, 51794], "temperature": 0.0, "avg_logprob": -0.2329862623503714, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.0037660219240933657}, {"id": 20, "seek": 18132, "start": 181.32, "end": 189.44, "text": " accessed by the application, we also need to protect the container image of the workload.", "tokens": [50364, 34211, 538, 264, 3861, 11, 321, 611, 643, 281, 2371, 264, 10129, 3256, 295, 264, 20139, 13, 50770], "temperature": 0.0, "avg_logprob": -0.1686107431139265, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.03955322504043579}, {"id": 21, "seek": 18132, "start": 189.44, "end": 200.84, "text": " So how could we protect container images for confidential containers? So why do we care", "tokens": [50770, 407, 577, 727, 321, 2371, 10129, 5267, 337, 27054, 17089, 30, 407, 983, 360, 321, 1127, 51340], "temperature": 0.0, "avg_logprob": -0.1686107431139265, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.03955322504043579}, {"id": 22, "seek": 18132, "start": 200.84, "end": 209.56, "text": " about image management for confidential containers? What's the special requirement? Before talking", "tokens": [51340, 466, 3256, 4592, 337, 27054, 17089, 30, 708, 311, 264, 2121, 11695, 30, 4546, 1417, 51776], "temperature": 0.0, "avg_logprob": -0.1686107431139265, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.03955322504043579}, {"id": 23, "seek": 20956, "start": 209.56, "end": 215.8, "text": " about special requirements, let's go through the current way to managing container images", "tokens": [50364, 466, 2121, 7728, 11, 718, 311, 352, 807, 264, 2190, 636, 281, 11642, 10129, 5267, 50676], "temperature": 0.0, "avg_logprob": -0.20764541625976562, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.04103505611419678}, {"id": 24, "seek": 20956, "start": 215.8, "end": 225.8, "text": " for normal containers. Take a container D as an example. To run a container, container", "tokens": [50676, 337, 2710, 17089, 13, 3664, 257, 10129, 413, 382, 364, 1365, 13, 1407, 1190, 257, 10129, 11, 10129, 51176], "temperature": 0.0, "avg_logprob": -0.20764541625976562, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.04103505611419678}, {"id": 25, "seek": 20956, "start": 225.8, "end": 237.24, "text": " D will first download a raw image blob from registry and store those blobs to local FS.", "tokens": [51176, 413, 486, 700, 5484, 257, 8936, 3256, 46115, 490, 36468, 293, 3531, 729, 1749, 929, 281, 2654, 41138, 13, 51748], "temperature": 0.0, "avg_logprob": -0.20764541625976562, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.04103505611419678}, {"id": 26, "seek": 23724, "start": 237.24, "end": 244.52, "text": " Once all blobs are ready, container D will call slap shorter to convert those blobs into", "tokens": [50364, 3443, 439, 1749, 929, 366, 1919, 11, 10129, 413, 486, 818, 21075, 11639, 281, 7620, 729, 1749, 929, 666, 50728], "temperature": 0.0, "avg_logprob": -0.250322941810854, "compression_ratio": 1.8066666666666666, "no_speech_prob": 0.005817836616188288}, {"id": 27, "seek": 23724, "start": 244.52, "end": 255.12, "text": " fast system and prepare root FS for containers. Once the root FS is ready, container D will", "tokens": [50728, 2370, 1185, 293, 5940, 5593, 41138, 337, 17089, 13, 3443, 264, 5593, 41138, 307, 1919, 11, 10129, 413, 486, 51258], "temperature": 0.0, "avg_logprob": -0.250322941810854, "compression_ratio": 1.8066666666666666, "no_speech_prob": 0.005817836616188288}, {"id": 28, "seek": 23724, "start": 255.12, "end": 263.44, "text": " start a container and the container can access all files and the data inside the container", "tokens": [51258, 722, 257, 10129, 293, 264, 10129, 393, 2105, 439, 7098, 293, 264, 1412, 1854, 264, 10129, 51674], "temperature": 0.0, "avg_logprob": -0.250322941810854, "compression_ratio": 1.8066666666666666, "no_speech_prob": 0.005817836616188288}, {"id": 29, "seek": 26344, "start": 263.44, "end": 275.96, "text": " image. Here, we can say that the raw image blob and the mounted fast system are available", "tokens": [50364, 3256, 13, 1692, 11, 321, 393, 584, 300, 264, 8936, 3256, 46115, 293, 264, 19138, 2370, 1185, 366, 2435, 50990], "temperature": 0.0, "avg_logprob": -0.3608590395022661, "compression_ratio": 1.3692307692307693, "no_speech_prob": 0.07394734025001526}, {"id": 30, "seek": 26344, "start": 275.96, "end": 285.56, "text": " on host sites, which expose special challenge to confidential containers because we need", "tokens": [50990, 322, 3975, 7533, 11, 597, 19219, 2121, 3430, 281, 27054, 17089, 570, 321, 643, 51470], "temperature": 0.0, "avg_logprob": -0.3608590395022661, "compression_ratio": 1.3692307692307693, "no_speech_prob": 0.07394734025001526}, {"id": 31, "seek": 28556, "start": 285.56, "end": 297.84000000000003, "text": " to protect confidentiality and integrity of images for containers. Let's move on to image", "tokens": [50364, 281, 2371, 27054, 507, 293, 16000, 295, 5267, 337, 17089, 13, 961, 311, 1286, 322, 281, 3256, 50978], "temperature": 0.0, "avg_logprob": -0.25943619864327566, "compression_ratio": 1.6, "no_speech_prob": 0.1140630692243576}, {"id": 32, "seek": 28556, "start": 297.84000000000003, "end": 307.92, "text": " management for confidential containers. To summary, confidential image management will", "tokens": [50978, 4592, 337, 27054, 17089, 13, 1407, 12691, 11, 27054, 3256, 4592, 486, 51482], "temperature": 0.0, "avg_logprob": -0.25943619864327566, "compression_ratio": 1.6, "no_speech_prob": 0.1140630692243576}, {"id": 33, "seek": 30792, "start": 307.92, "end": 318.44, "text": " face three special requirements, which are confidentiality, integrity, and efficiency.", "tokens": [50364, 1851, 1045, 2121, 7728, 11, 597, 366, 27054, 507, 11, 16000, 11, 293, 10493, 13, 50890], "temperature": 0.0, "avg_logprob": -0.3140965281306086, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.2675432860851288}, {"id": 34, "seek": 30792, "start": 318.44, "end": 327.0, "text": " To ensure confidentiality, all image containers should be encrypted, both on registry and", "tokens": [50890, 1407, 5586, 27054, 507, 11, 439, 3256, 17089, 820, 312, 36663, 11, 1293, 322, 36468, 293, 51318], "temperature": 0.0, "avg_logprob": -0.3140965281306086, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.2675432860851288}, {"id": 35, "seek": 32700, "start": 327.0, "end": 339.2, "text": " on local host. So the image container can be kept private. Second, the image management", "tokens": [50364, 322, 2654, 3975, 13, 407, 264, 3256, 10129, 393, 312, 4305, 4551, 13, 5736, 11, 264, 3256, 4592, 50974], "temperature": 0.0, "avg_logprob": -0.272936216214808, "compression_ratio": 1.4471544715447155, "no_speech_prob": 0.038603611290454865}, {"id": 36, "seek": 32700, "start": 339.2, "end": 350.44, "text": " must be moved from host inside into guest. Because if we store image container and mounted", "tokens": [50974, 1633, 312, 4259, 490, 3975, 1854, 666, 8341, 13, 1436, 498, 321, 3531, 3256, 10129, 293, 19138, 51536], "temperature": 0.0, "avg_logprob": -0.272936216214808, "compression_ratio": 1.4471544715447155, "no_speech_prob": 0.038603611290454865}, {"id": 37, "seek": 35044, "start": 350.44, "end": 359.44, "text": " fast system on host, the container will be available to host, which breaks confidentiality.", "tokens": [50364, 2370, 1185, 322, 3975, 11, 264, 10129, 486, 312, 2435, 281, 3975, 11, 597, 9857, 27054, 507, 13, 50814], "temperature": 0.0, "avg_logprob": -0.20181939601898194, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.07989265769720078}, {"id": 38, "seek": 35044, "start": 359.44, "end": 369.68, "text": " Even worse, host can make changes to those images and break the integrity of container", "tokens": [50814, 2754, 5324, 11, 3975, 393, 652, 2962, 281, 729, 5267, 293, 1821, 264, 16000, 295, 10129, 51326], "temperature": 0.0, "avg_logprob": -0.20181939601898194, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.07989265769720078}, {"id": 39, "seek": 36968, "start": 369.68, "end": 382.48, "text": " images. By encryption and moving image management inside a guest, we can ensure confidentiality", "tokens": [50364, 5267, 13, 3146, 29575, 293, 2684, 3256, 4592, 1854, 257, 8341, 11, 321, 393, 5586, 27054, 507, 51004], "temperature": 0.0, "avg_logprob": -0.26401094111000617, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0703417956829071}, {"id": 40, "seek": 36968, "start": 382.48, "end": 395.52, "text": " and integrity of images. But we will face another new challenges. With traditional image management,", "tokens": [51004, 293, 16000, 295, 5267, 13, 583, 321, 486, 1851, 1071, 777, 4759, 13, 2022, 5164, 3256, 4592, 11, 51656], "temperature": 0.0, "avg_logprob": -0.26401094111000617, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0703417956829071}, {"id": 41, "seek": 39552, "start": 395.52, "end": 403.59999999999997, "text": " each blob and fast system are mounted on host, which can be reused for different container", "tokens": [50364, 1184, 46115, 293, 2370, 1185, 366, 19138, 322, 3975, 11, 597, 393, 312, 319, 4717, 337, 819, 10129, 50768], "temperature": 0.0, "avg_logprob": -0.2785900206792922, "compression_ratio": 1.3955223880597014, "no_speech_prob": 0.0915214866399765}, {"id": 42, "seek": 39552, "start": 403.59999999999997, "end": 418.47999999999996, "text": " instances and restart. But by moving image management inside into guest, we need to download and", "tokens": [50768, 14519, 293, 21022, 13, 583, 538, 2684, 3256, 4592, 1854, 666, 8341, 11, 321, 643, 281, 5484, 293, 51512], "temperature": 0.0, "avg_logprob": -0.2785900206792922, "compression_ratio": 1.3955223880597014, "no_speech_prob": 0.0915214866399765}, {"id": 43, "seek": 41848, "start": 418.48, "end": 426.44, "text": " prepare images for each container instance. In other words, container images can't be", "tokens": [50364, 5940, 5267, 337, 1184, 10129, 5197, 13, 682, 661, 2283, 11, 10129, 5267, 393, 380, 312, 50762], "temperature": 0.0, "avg_logprob": -0.27071724439922135, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.2522919774055481}, {"id": 44, "seek": 41848, "start": 426.44, "end": 438.72, "text": " reused for different container instances, which will bring bigger costs, such as high", "tokens": [50762, 319, 4717, 337, 819, 10129, 14519, 11, 597, 486, 1565, 3801, 5497, 11, 1270, 382, 1090, 51376], "temperature": 0.0, "avg_logprob": -0.27071724439922135, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.2522919774055481}, {"id": 45, "seek": 43872, "start": 438.72, "end": 456.52000000000004, "text": " pressure on registry, slow container startup time, and heavy IO requests on local device.", "tokens": [50364, 3321, 322, 36468, 11, 2964, 10129, 18578, 565, 11, 293, 4676, 39839, 12475, 322, 2654, 4302, 13, 51254], "temperature": 0.0, "avg_logprob": -0.3125477841025905, "compression_ratio": 1.3587786259541985, "no_speech_prob": 0.1727215200662613}, {"id": 46, "seek": 43872, "start": 456.52000000000004, "end": 464.0, "text": " So how could we achieve both confidentiality, integrity, and efficiency for confidential", "tokens": [51254, 407, 577, 727, 321, 4584, 1293, 27054, 507, 11, 16000, 11, 293, 10493, 337, 27054, 51628], "temperature": 0.0, "avg_logprob": -0.3125477841025905, "compression_ratio": 1.3587786259541985, "no_speech_prob": 0.1727215200662613}, {"id": 47, "seek": 46400, "start": 464.0, "end": 472.32, "text": " containers? There are some existing technologies for confidential containers. The OSI Cript", "tokens": [50364, 17089, 30, 821, 366, 512, 6741, 7943, 337, 27054, 17089, 13, 440, 12731, 40, 383, 470, 662, 50780], "temperature": 0.0, "avg_logprob": -0.2918897696903774, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.2530263364315033}, {"id": 48, "seek": 46400, "start": 472.32, "end": 482.48, "text": " project provides a way to encrypt the whole images and the cosine project provides a way", "tokens": [50780, 1716, 6417, 257, 636, 281, 17972, 662, 264, 1379, 5267, 293, 264, 23565, 1716, 6417, 257, 636, 51288], "temperature": 0.0, "avg_logprob": -0.2918897696903774, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.2530263364315033}, {"id": 49, "seek": 46400, "start": 482.48, "end": 491.4, "text": " to ensure the integrity of container images. And the confidential container community also", "tokens": [51288, 281, 5586, 264, 16000, 295, 10129, 5267, 13, 400, 264, 27054, 10129, 1768, 611, 51734], "temperature": 0.0, "avg_logprob": -0.2918897696903774, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.2530263364315033}, {"id": 50, "seek": 49140, "start": 491.4, "end": 500.56, "text": " invented some new technologies to move image management from host into guest. We modified", "tokens": [50364, 14479, 512, 777, 7943, 281, 1286, 3256, 4592, 490, 3975, 666, 8341, 13, 492, 15873, 50822], "temperature": 0.0, "avg_logprob": -0.3171626499720982, "compression_ratio": 1.6687116564417177, "no_speech_prob": 0.1263604313135147}, {"id": 51, "seek": 49140, "start": 500.56, "end": 508.64, "text": " the container D and Cata container and introduced a new component named imageRS. These three", "tokens": [50822, 264, 10129, 413, 293, 383, 3274, 10129, 293, 7268, 257, 777, 6542, 4926, 3256, 43580, 13, 1981, 1045, 51226], "temperature": 0.0, "avg_logprob": -0.3171626499720982, "compression_ratio": 1.6687116564417177, "no_speech_prob": 0.1263604313135147}, {"id": 52, "seek": 49140, "start": 508.64, "end": 520.4399999999999, "text": " components help us to management container images inside a guest. So we have technologies", "tokens": [51226, 6677, 854, 505, 281, 4592, 10129, 5267, 1854, 257, 8341, 13, 407, 321, 362, 7943, 51816], "temperature": 0.0, "avg_logprob": -0.3171626499720982, "compression_ratio": 1.6687116564417177, "no_speech_prob": 0.1263604313135147}, {"id": 53, "seek": 52044, "start": 520.44, "end": 527.4000000000001, "text": " to ensure container image confidentiality and integrity, but we are still facing the", "tokens": [50364, 281, 5586, 10129, 3256, 27054, 507, 293, 16000, 11, 457, 321, 366, 920, 7170, 264, 50712], "temperature": 0.0, "avg_logprob": -0.2872877311706543, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0203010905534029}, {"id": 54, "seek": 52044, "start": 527.4000000000001, "end": 539.1600000000001, "text": " challenge of efficiency. How could we improve efficiency for image management? The latest", "tokens": [50712, 3430, 295, 10493, 13, 1012, 727, 321, 3470, 10493, 337, 3256, 4592, 30, 440, 6792, 51300], "temperature": 0.0, "avg_logprob": -0.2872877311706543, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0203010905534029}, {"id": 55, "seek": 52044, "start": 539.1600000000001, "end": 545.12, "text": " image management service project provides an interesting way to achieve efficiency for", "tokens": [51300, 3256, 4592, 2643, 1716, 6417, 364, 1880, 636, 281, 4584, 10493, 337, 51598], "temperature": 0.0, "avg_logprob": -0.2872877311706543, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0203010905534029}, {"id": 56, "seek": 54512, "start": 545.12, "end": 559.8, "text": " confidential containers. What's the latest image service? The latest image project provides", "tokens": [50364, 27054, 17089, 13, 708, 311, 264, 6792, 3256, 2643, 30, 440, 6792, 3256, 1716, 6417, 51098], "temperature": 0.0, "avg_logprob": -0.26278336842854816, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.11352594196796417}, {"id": 57, "seek": 54512, "start": 559.8, "end": 568.64, "text": " a framework to provide image management service for containers. The following picture is a", "tokens": [51098, 257, 8388, 281, 2893, 3256, 4592, 2643, 337, 17089, 13, 440, 3480, 3036, 307, 257, 51540], "temperature": 0.0, "avg_logprob": -0.26278336842854816, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.11352594196796417}, {"id": 58, "seek": 56864, "start": 568.64, "end": 577.8, "text": " co-architecture of the latest project. It has been split into build, ship, and run stages.", "tokens": [50364, 598, 12, 1178, 5739, 540, 295, 264, 6792, 1716, 13, 467, 575, 668, 7472, 666, 1322, 11, 5374, 11, 293, 1190, 10232, 13, 50822], "temperature": 0.0, "avg_logprob": -0.3510944193059748, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.08563105762004852}, {"id": 59, "seek": 56864, "start": 577.8, "end": 587.4399999999999, "text": " This project has different aspects. First, it defines a read-only file system format", "tokens": [50822, 639, 1716, 575, 819, 7270, 13, 2386, 11, 309, 23122, 257, 1401, 12, 25202, 3991, 1185, 7877, 51304], "temperature": 0.0, "avg_logprob": -0.3510944193059748, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.08563105762004852}, {"id": 60, "seek": 56864, "start": 587.4399999999999, "end": 593.0, "text": " with plenty features such as laser loading, data de-definification, and compatible with", "tokens": [51304, 365, 7140, 4122, 1270, 382, 12530, 15114, 11, 1412, 368, 12, 1479, 5194, 3774, 11, 293, 18218, 365, 51582], "temperature": 0.0, "avg_logprob": -0.3510944193059748, "compression_ratio": 1.461111111111111, "no_speech_prob": 0.08563105762004852}, {"id": 61, "seek": 59300, "start": 593.0, "end": 604.32, "text": " OSI-V1 images. And we are also adding encryption to the image format. Second, it's a read-only", "tokens": [50364, 12731, 40, 12, 53, 16, 5267, 13, 400, 321, 366, 611, 5127, 29575, 281, 264, 3256, 7877, 13, 5736, 11, 309, 311, 257, 1401, 12, 25202, 50930], "temperature": 0.0, "avg_logprob": -0.25079439163208006, "compression_ratio": 1.2758620689655173, "no_speech_prob": 0.04566100612282753}, {"id": 62, "seek": 59300, "start": 604.32, "end": 614.36, "text": " file system for containers, AI models, and software packages. It's very flexible to access", "tokens": [50930, 3991, 1185, 337, 17089, 11, 7318, 5245, 11, 293, 4722, 17401, 13, 467, 311, 588, 11358, 281, 2105, 51432], "temperature": 0.0, "avg_logprob": -0.25079439163208006, "compression_ratio": 1.2758620689655173, "no_speech_prob": 0.04566100612282753}, {"id": 63, "seek": 61436, "start": 614.36, "end": 625.16, "text": " the latest image. We provide different interfaces such as fields on Linux and Mac OS, water", "tokens": [50364, 264, 6792, 3256, 13, 492, 2893, 819, 28416, 1270, 382, 7909, 322, 18734, 293, 5707, 12731, 11, 1281, 50904], "temperature": 0.0, "avg_logprob": -0.456463098526001, "compression_ratio": 1.277027027027027, "no_speech_prob": 0.17833009362220764}, {"id": 64, "seek": 61436, "start": 625.16, "end": 635.36, "text": " IFS for virtual machines, and ERFs page sharing on Linux. And we are also developing a real-space", "tokens": [50904, 26080, 50, 337, 6374, 8379, 11, 293, 14929, 37, 82, 3028, 5414, 322, 18734, 13, 400, 321, 366, 611, 6416, 257, 957, 12, 24824, 51414], "temperature": 0.0, "avg_logprob": -0.456463098526001, "compression_ratio": 1.277027027027027, "no_speech_prob": 0.17833009362220764}, {"id": 65, "seek": 63536, "start": 635.36, "end": 647.44, "text": " library for application to directly access files from our latest image. Third, we also", "tokens": [50364, 6405, 337, 3861, 281, 3838, 2105, 7098, 490, 527, 6792, 3256, 13, 12548, 11, 321, 611, 50968], "temperature": 0.0, "avg_logprob": -0.3186405652189908, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.01231389120221138}, {"id": 66, "seek": 63536, "start": 647.44, "end": 655.8000000000001, "text": " develop a storage subsystem for loader. We also develop a load-neighbors storage subsystem", "tokens": [50968, 1499, 257, 6725, 2090, 9321, 337, 3677, 260, 13, 492, 611, 1499, 257, 3677, 12, 716, 910, 65, 830, 6725, 2090, 9321, 51386], "temperature": 0.0, "avg_logprob": -0.3186405652189908, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.01231389120221138}, {"id": 67, "seek": 63536, "start": 655.8000000000001, "end": 664.32, "text": " with P2P, Cache, and data de-definification. We build a load-load content-address storage", "tokens": [51386, 365, 430, 17, 47, 11, 383, 6000, 11, 293, 1412, 368, 12, 1479, 5194, 3774, 13, 492, 1322, 257, 3677, 12, 2907, 2701, 12, 25224, 735, 6725, 51812], "temperature": 0.0, "avg_logprob": -0.3186405652189908, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.01231389120221138}, {"id": 68, "seek": 66432, "start": 664.32, "end": 676.9200000000001, "text": " subsystem to duplicate data among different images. Last, the latest image project has", "tokens": [50364, 2090, 9321, 281, 23976, 1412, 3654, 819, 5267, 13, 5264, 11, 264, 6792, 3256, 1716, 575, 50994], "temperature": 0.0, "avg_logprob": -0.22973463612218056, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02269578166306019}, {"id": 69, "seek": 66432, "start": 676.9200000000001, "end": 684.84, "text": " put much effort to get integrated with the ecosystem. There is one more feature we should", "tokens": [50994, 829, 709, 4630, 281, 483, 10919, 365, 264, 11311, 13, 821, 307, 472, 544, 4111, 321, 820, 51390], "temperature": 0.0, "avg_logprob": -0.22973463612218056, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02269578166306019}, {"id": 70, "seek": 66432, "start": 684.84, "end": 693.0400000000001, "text": " mention here. The latest latest release provides an OSI-V1 compatible model. We will get more", "tokens": [51390, 2152, 510, 13, 440, 6792, 6792, 4374, 6417, 364, 12731, 40, 12, 53, 16, 18218, 2316, 13, 492, 486, 483, 544, 51800], "temperature": 0.0, "avg_logprob": -0.22973463612218056, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02269578166306019}, {"id": 71, "seek": 69304, "start": 693.04, "end": 702.56, "text": " information about the compatible model in later. The core of the latest project is the", "tokens": [50364, 1589, 466, 264, 18218, 2316, 294, 1780, 13, 440, 4965, 295, 264, 6792, 1716, 307, 264, 50840], "temperature": 0.0, "avg_logprob": -0.21385370173924406, "compression_ratio": 1.6772151898734178, "no_speech_prob": 0.057089608162641525}, {"id": 72, "seek": 69304, "start": 702.56, "end": 709.76, "text": " latest image format. So, let's get an undetected explanation about the latest image format.", "tokens": [50840, 6792, 3256, 7877, 13, 407, 11, 718, 311, 483, 364, 674, 302, 39963, 10835, 466, 264, 6792, 3256, 7877, 13, 51200], "temperature": 0.0, "avg_logprob": -0.21385370173924406, "compression_ratio": 1.6772151898734178, "no_speech_prob": 0.057089608162641525}, {"id": 73, "seek": 69304, "start": 709.76, "end": 720.8399999999999, "text": " The way to convert an existing OSI-V1 image into a latest image, as we know, an OSI-V1", "tokens": [51200, 440, 636, 281, 7620, 364, 6741, 12731, 40, 12, 53, 16, 3256, 666, 257, 6792, 3256, 11, 382, 321, 458, 11, 364, 12731, 40, 12, 53, 16, 51754], "temperature": 0.0, "avg_logprob": -0.21385370173924406, "compression_ratio": 1.6772151898734178, "no_speech_prob": 0.057089608162641525}, {"id": 74, "seek": 72084, "start": 720.84, "end": 728.5600000000001, "text": " image contains one manifest and one or more data layers. Each data layer is a binary", "tokens": [50364, 3256, 8306, 472, 10067, 293, 472, 420, 544, 1412, 7914, 13, 6947, 1412, 4583, 307, 257, 17434, 50750], "temperature": 0.0, "avg_logprob": -0.23493837629045758, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.12063104659318924}, {"id": 75, "seek": 72084, "start": 728.5600000000001, "end": 738.48, "text": " blob. Actually, the binary blob is a tar stream. Within the tar stream, there are tar headers", "tokens": [50750, 46115, 13, 5135, 11, 264, 17434, 46115, 307, 257, 3112, 4309, 13, 15996, 264, 3112, 4309, 11, 456, 366, 3112, 45101, 51246], "temperature": 0.0, "avg_logprob": -0.23493837629045758, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.12063104659318924}, {"id": 76, "seek": 72084, "start": 738.48, "end": 750.64, "text": " and file data. To convert an OSI-V1 image layer to latest layer, latest data blob, we first", "tokens": [51246, 293, 3991, 1412, 13, 1407, 7620, 364, 12731, 40, 12, 53, 16, 3256, 4583, 281, 6792, 4583, 11, 6792, 1412, 46115, 11, 321, 700, 51854], "temperature": 0.0, "avg_logprob": -0.23493837629045758, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.12063104659318924}, {"id": 77, "seek": 75064, "start": 751.36, "end": 762.36, "text": " group all tar headers together and translate them into a file system meta data. The file", "tokens": [50400, 1594, 439, 3112, 45101, 1214, 293, 13799, 552, 666, 257, 3991, 1185, 19616, 1412, 13, 440, 3991, 50950], "temperature": 0.0, "avg_logprob": -0.4423024726636482, "compression_ratio": 1.6646341463414633, "no_speech_prob": 0.05290529504418373}, {"id": 78, "seek": 75064, "start": 762.36, "end": 769.36, "text": " system meta data can be mounted directly by a Fuse server or by the Incola IRFS file system.", "tokens": [50950, 1185, 19616, 1412, 393, 312, 19138, 3838, 538, 257, 479, 438, 7154, 420, 538, 264, 7779, 4711, 16486, 29318, 3991, 1185, 13, 51300], "temperature": 0.0, "avg_logprob": -0.4423024726636482, "compression_ratio": 1.6646341463414633, "no_speech_prob": 0.05290529504418373}, {"id": 79, "seek": 75064, "start": 770.36, "end": 777.64, "text": " With this file system meta data, let us can provide full file system view to the workspace.", "tokens": [51350, 2022, 341, 3991, 1185, 19616, 1412, 11, 718, 505, 393, 2893, 1577, 3991, 1185, 1910, 281, 264, 32706, 13, 51714], "temperature": 0.0, "avg_logprob": -0.4423024726636482, "compression_ratio": 1.6646341463414633, "no_speech_prob": 0.05290529504418373}, {"id": 80, "seek": 77764, "start": 778.64, "end": 789.64, "text": " Then, we chunk file data into fixed size and compress the chunk data.", "tokens": [50414, 1396, 11, 321, 16635, 3991, 1412, 666, 6806, 2744, 293, 14778, 264, 16635, 1412, 13, 50964], "temperature": 0.0, "avg_logprob": -0.355739035257479, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.0017823008820414543}, {"id": 81, "seek": 77764, "start": 791.64, "end": 803.64, "text": " At last, we need some information to decompress the compressed chunk data. So, our latest data", "tokens": [51064, 1711, 1036, 11, 321, 643, 512, 1589, 281, 22867, 735, 264, 30353, 16635, 1412, 13, 407, 11, 527, 6792, 1412, 51664], "temperature": 0.0, "avg_logprob": -0.355739035257479, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.0017823008820414543}, {"id": 82, "seek": 80364, "start": 803.64, "end": 812.64, "text": " blob includes three parts. First is meta data, chunk info array, and chunk data.", "tokens": [50364, 46115, 5974, 1045, 3166, 13, 2386, 307, 19616, 1412, 11, 16635, 13614, 10225, 11, 293, 16635, 1412, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2089180236167096, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.0057936981320381165}, {"id": 83, "seek": 80364, "start": 815.64, "end": 829.64, "text": " There is one latest data blob for every OSI-V1 image layer. In addition, latest has an extra", "tokens": [50964, 821, 307, 472, 6792, 1412, 46115, 337, 633, 12731, 40, 12, 53, 16, 3256, 4583, 13, 682, 4500, 11, 6792, 575, 364, 2857, 51664], "temperature": 0.0, "avg_logprob": -0.2089180236167096, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.0057936981320381165}, {"id": 84, "seek": 82964, "start": 829.64, "end": 840.64, "text": " layer. We call it latest meta data blob. latest meta data blob is generated by merging all", "tokens": [50364, 4583, 13, 492, 818, 309, 6792, 19616, 1412, 46115, 13, 6792, 19616, 1412, 46115, 307, 10833, 538, 44559, 439, 50914], "temperature": 0.0, "avg_logprob": -0.23631070454915365, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.0040937489829957485}, {"id": 85, "seek": 82964, "start": 840.64, "end": 850.64, "text": " file system meta data from all data blobs. In other words, the latest meta data blob is", "tokens": [50914, 3991, 1185, 19616, 1412, 490, 439, 1412, 1749, 929, 13, 682, 661, 2283, 11, 264, 6792, 19616, 1412, 46115, 307, 51414], "temperature": 0.0, "avg_logprob": -0.23631070454915365, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.0040937489829957485}, {"id": 86, "seek": 85064, "start": 850.64, "end": 863.64, "text": " built-time overview file system. With the meta data blob, we do not need to mount each data blob", "tokens": [50364, 3094, 12, 3766, 12492, 3991, 1185, 13, 2022, 264, 19616, 1412, 46115, 11, 321, 360, 406, 643, 281, 3746, 1184, 1412, 46115, 51014], "temperature": 0.0, "avg_logprob": -0.20266085254902744, "compression_ratio": 1.503875968992248, "no_speech_prob": 0.009342269971966743}, {"id": 87, "seek": 85064, "start": 863.64, "end": 872.64, "text": " individually. Instead, we directly mount the meta data blob. Thus, we don't need to overlay image", "tokens": [51014, 16652, 13, 7156, 11, 321, 3838, 3746, 264, 19616, 1412, 46115, 13, 13827, 11, 321, 500, 380, 643, 281, 31741, 3256, 51464], "temperature": 0.0, "avg_logprob": -0.20266085254902744, "compression_ratio": 1.503875968992248, "no_speech_prob": 0.009342269971966743}, {"id": 88, "seek": 87264, "start": 872.64, "end": 880.64, "text": " layers at a long time. We don't notice that if we care about backward compatibility, we", "tokens": [50364, 7914, 412, 257, 938, 565, 13, 492, 500, 380, 3449, 300, 498, 321, 1127, 466, 23897, 34237, 11, 321, 50764], "temperature": 0.0, "avg_logprob": -0.23816337991268077, "compression_ratio": 1.297872340425532, "no_speech_prob": 0.007711984217166901}, {"id": 89, "seek": 87264, "start": 880.64, "end": 890.64, "text": " need to both generate OSI-V1 image and the latest image for the same container. That will cause", "tokens": [50764, 643, 281, 1293, 8460, 12731, 40, 12, 53, 16, 3256, 293, 264, 6792, 3256, 337, 264, 912, 10129, 13, 663, 486, 3082, 51264], "temperature": 0.0, "avg_logprob": -0.23816337991268077, "compression_ratio": 1.297872340425532, "no_speech_prob": 0.007711984217166901}, {"id": 90, "seek": 89064, "start": 890.64, "end": 904.64, "text": " container image data saved twice and waste storage space. To solve this problem, the", "tokens": [50364, 10129, 3256, 1412, 6624, 6091, 293, 5964, 6725, 1901, 13, 1407, 5039, 341, 1154, 11, 264, 51064], "temperature": 0.0, "avg_logprob": -0.18977468663995917, "compression_ratio": 1.2671755725190839, "no_speech_prob": 0.0033759246580302715}, {"id": 91, "seek": 89064, "start": 904.64, "end": 916.64, "text": " latest NIDAS provides a new model called NIDAS OSI-V1 compatible model. With this", "tokens": [51064, 6792, 426, 2777, 3160, 6417, 257, 777, 2316, 1219, 426, 2777, 3160, 12731, 40, 12, 53, 16, 18218, 2316, 13, 2022, 341, 51664], "temperature": 0.0, "avg_logprob": -0.18977468663995917, "compression_ratio": 1.2671755725190839, "no_speech_prob": 0.0033759246580302715}, {"id": 92, "seek": 91664, "start": 916.64, "end": 924.64, "text": " mode, the latest data blob only contains file system meta data and chunk information. It", "tokens": [50364, 4391, 11, 264, 6792, 1412, 46115, 787, 8306, 3991, 1185, 19616, 1412, 293, 16635, 1589, 13, 467, 50764], "temperature": 0.0, "avg_logprob": -0.17027937571207682, "compression_ratio": 1.3037037037037038, "no_speech_prob": 0.0013316817348822951}, {"id": 93, "seek": 91664, "start": 924.64, "end": 939.64, "text": " doesn't save chunk data. The OSI image spec version 1.1 provides an OSI reference type.", "tokens": [50764, 1177, 380, 3155, 16635, 1412, 13, 440, 12731, 40, 3256, 1608, 3037, 502, 13, 16, 6417, 364, 12731, 40, 6408, 2010, 13, 51514], "temperature": 0.0, "avg_logprob": -0.17027937571207682, "compression_ratio": 1.3037037037037038, "no_speech_prob": 0.0013316817348822951}, {"id": 94, "seek": 93964, "start": 939.64, "end": 948.64, "text": " By using the reference type, we can get the data from the original OSI-V1 image. That means", "tokens": [50364, 3146, 1228, 264, 6408, 2010, 11, 321, 393, 483, 264, 1412, 490, 264, 3380, 12731, 40, 12, 53, 16, 3256, 13, 663, 1355, 50814], "temperature": 0.0, "avg_logprob": -0.10876322727577359, "compression_ratio": 1.3111111111111111, "no_speech_prob": 0.0037551228888332844}, {"id": 95, "seek": 93964, "start": 948.64, "end": 958.64, "text": " for existing OSI-V1 images, we can build an extra NIDAS image to provide lazy loading", "tokens": [50814, 337, 6741, 12731, 40, 12, 53, 16, 5267, 11, 321, 393, 1322, 364, 2857, 426, 2777, 3160, 3256, 281, 2893, 14847, 15114, 51314], "temperature": 0.0, "avg_logprob": -0.10876322727577359, "compression_ratio": 1.3111111111111111, "no_speech_prob": 0.0037551228888332844}, {"id": 96, "seek": 95864, "start": 958.64, "end": 970.64, "text": " and other features. The OSI compatible model generates various more NIDAS images, typically", "tokens": [50364, 293, 661, 4122, 13, 440, 12731, 40, 18218, 2316, 23815, 3683, 544, 426, 2777, 3160, 5267, 11, 5850, 50964], "temperature": 0.0, "avg_logprob": -0.14559977531433105, "compression_ratio": 1.3161764705882353, "no_speech_prob": 0.012074285186827183}, {"id": 97, "seek": 95864, "start": 970.64, "end": 981.64, "text": " about 3 to 5% of the original OSI-V1 images. The OSI-V1 compatible model is very useful", "tokens": [50964, 466, 805, 281, 1025, 4, 295, 264, 3380, 12731, 40, 12, 53, 16, 5267, 13, 440, 12731, 40, 12, 53, 16, 18218, 2316, 307, 588, 4420, 51514], "temperature": 0.0, "avg_logprob": -0.14559977531433105, "compression_ratio": 1.3161764705882353, "no_speech_prob": 0.012074285186827183}, {"id": 98, "seek": 98164, "start": 981.64, "end": 986.64, "text": " for backward compatibility.", "tokens": [50364, 337, 23897, 34237, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14991356154619637, "compression_ratio": 1.4577464788732395, "no_speech_prob": 0.029278269037604332}, {"id": 99, "seek": 98164, "start": 990.64, "end": 1001.64, "text": " NIDAS has two modes. One is NIDAS native mode and the other is OSI-V1 compatible mode. Each", "tokens": [50814, 426, 2777, 3160, 575, 732, 14068, 13, 1485, 307, 426, 2777, 3160, 8470, 4391, 293, 264, 661, 307, 12731, 40, 12, 53, 16, 18218, 4391, 13, 6947, 51364], "temperature": 0.0, "avg_logprob": -0.14991356154619637, "compression_ratio": 1.4577464788732395, "no_speech_prob": 0.029278269037604332}, {"id": 100, "seek": 98164, "start": 1001.64, "end": 1010.64, "text": " NIDAS image contains two types of blob, data blob and meta blob. The meta blob contains", "tokens": [51364, 426, 2777, 3160, 3256, 8306, 732, 3467, 295, 46115, 11, 1412, 46115, 293, 19616, 46115, 13, 440, 19616, 46115, 8306, 51814], "temperature": 0.0, "avg_logprob": -0.14991356154619637, "compression_ratio": 1.4577464788732395, "no_speech_prob": 0.029278269037604332}, {"id": 101, "seek": 101064, "start": 1010.64, "end": 1017.64, "text": " file system meta data and can provide a full file system view. And the data blob contains", "tokens": [50364, 3991, 1185, 19616, 1412, 293, 393, 2893, 257, 1577, 3991, 1185, 1910, 13, 400, 264, 1412, 46115, 8306, 50714], "temperature": 0.0, "avg_logprob": -0.19510772648979635, "compression_ratio": 1.4308510638297873, "no_speech_prob": 0.0008790094288997352}, {"id": 102, "seek": 101064, "start": 1017.64, "end": 1026.6399999999999, "text": " file chunks for each layer. The NIDAS project also provides flexible interface to access", "tokens": [50714, 3991, 24004, 337, 1184, 4583, 13, 440, 426, 2777, 3160, 1716, 611, 6417, 11358, 9226, 281, 2105, 51164], "temperature": 0.0, "avg_logprob": -0.19510772648979635, "compression_ratio": 1.4308510638297873, "no_speech_prob": 0.0008790094288997352}, {"id": 103, "seek": 101064, "start": 1026.6399999999999, "end": 1038.6399999999999, "text": " NIDAS images. It can be accessed by a source of use, URLFS, waterFS, and even through some", "tokens": [51164, 426, 2777, 3160, 5267, 13, 467, 393, 312, 34211, 538, 257, 4009, 295, 764, 11, 12905, 29318, 11, 1281, 29318, 11, 293, 754, 807, 512, 51764], "temperature": 0.0, "avg_logprob": -0.19510772648979635, "compression_ratio": 1.4308510638297873, "no_speech_prob": 0.0008790094288997352}, {"id": 104, "seek": 103864, "start": 1038.64, "end": 1049.64, "text": " URL space library. For example, the NIDAS image is URLFS compatible. Let's look at the way", "tokens": [50364, 12905, 1901, 6405, 13, 1171, 1365, 11, 264, 426, 2777, 3160, 3256, 307, 12905, 29318, 18218, 13, 961, 311, 574, 412, 264, 636, 50914], "temperature": 0.0, "avg_logprob": -0.21155819526085487, "compression_ratio": 1.2932330827067668, "no_speech_prob": 0.0008222175529226661}, {"id": 105, "seek": 103864, "start": 1049.64, "end": 1057.64, "text": " for URLFS to make use of NIDAS images. The URLFS will directly mount a NIDAS meta", "tokens": [50914, 337, 12905, 29318, 281, 652, 764, 295, 426, 2777, 3160, 5267, 13, 440, 12905, 29318, 486, 3838, 3746, 257, 426, 2777, 3160, 19616, 51314], "temperature": 0.0, "avg_logprob": -0.21155819526085487, "compression_ratio": 1.2932330827067668, "no_speech_prob": 0.0008222175529226661}, {"id": 106, "seek": 105764, "start": 1057.64, "end": 1067.64, "text": " data blob and provide a full file system view. The application can work the file system tree.", "tokens": [50364, 1412, 46115, 293, 2893, 257, 1577, 3991, 1185, 1910, 13, 440, 3861, 393, 589, 264, 3991, 1185, 4230, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1993948967902215, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.004328628070652485}, {"id": 107, "seek": 105764, "start": 1067.64, "end": 1073.64, "text": " When the application tries to read the data from a file and the file data is not ready,", "tokens": [50864, 1133, 264, 3861, 9898, 281, 1401, 264, 1412, 490, 257, 3991, 293, 264, 3991, 1412, 307, 406, 1919, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1993948967902215, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.004328628070652485}, {"id": 108, "seek": 105764, "start": 1073.64, "end": 1080.64, "text": " URLFS will notify the FS catch and FS catch will send a request to NIDASD and MSD will", "tokens": [51164, 12905, 29318, 486, 36560, 264, 41138, 3745, 293, 41138, 3745, 486, 2845, 257, 5308, 281, 426, 2777, 3160, 35, 293, 7395, 35, 486, 51514], "temperature": 0.0, "avg_logprob": -0.1993948967902215, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.004328628070652485}, {"id": 109, "seek": 105764, "start": 1080.64, "end": 1086.64, "text": " fetch the data from the remote registry. And when the data is ready, NIDAS will notify", "tokens": [51514, 23673, 264, 1412, 490, 264, 8607, 36468, 13, 400, 562, 264, 1412, 307, 1919, 11, 426, 2777, 3160, 486, 36560, 51814], "temperature": 0.0, "avg_logprob": -0.1993948967902215, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.004328628070652485}, {"id": 110, "seek": 108664, "start": 1086.64, "end": 1095.64, "text": " FS catch and notify URLFS. Eventually, the data will be sent back to the application.", "tokens": [50364, 41138, 3745, 293, 36560, 12905, 29318, 13, 17586, 11, 264, 1412, 486, 312, 2279, 646, 281, 264, 3861, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18446353224457288, "compression_ratio": 1.4728260869565217, "no_speech_prob": 0.0058744619600474834}, {"id": 111, "seek": 108664, "start": 1095.64, "end": 1104.64, "text": " As image service, help to improve the efficiency of confidential containers. There are several", "tokens": [50814, 1018, 3256, 2643, 11, 854, 281, 3470, 264, 10493, 295, 27054, 17089, 13, 821, 366, 2940, 51264], "temperature": 0.0, "avg_logprob": -0.18446353224457288, "compression_ratio": 1.4728260869565217, "no_speech_prob": 0.0058744619600474834}, {"id": 112, "seek": 108664, "start": 1104.64, "end": 1114.64, "text": " enhancements needed for NIDAS images to support confidential containers. First, we need to", "tokens": [51264, 11985, 1117, 2978, 337, 426, 2777, 3160, 5267, 281, 1406, 27054, 17089, 13, 2386, 11, 321, 643, 281, 51764], "temperature": 0.0, "avg_logprob": -0.18446353224457288, "compression_ratio": 1.4728260869565217, "no_speech_prob": 0.0058744619600474834}, {"id": 113, "seek": 111464, "start": 1114.64, "end": 1124.64, "text": " add data encryption to NIDAS image format. We use a hybrid mode to protect NIDAS image.", "tokens": [50364, 909, 1412, 29575, 281, 426, 2777, 3160, 3256, 7877, 13, 492, 764, 257, 13051, 4391, 281, 2371, 426, 2777, 3160, 3256, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1771217126112718, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.002649593399837613}, {"id": 114, "seek": 111464, "start": 1124.64, "end": 1135.64, "text": " First, we will use OSI craps to protect the NIDAS meta data blob. And the meta data blob", "tokens": [50864, 2386, 11, 321, 486, 764, 12731, 40, 2094, 1878, 281, 2371, 264, 426, 2777, 3160, 19616, 1412, 46115, 13, 400, 264, 19616, 1412, 46115, 51414], "temperature": 0.0, "avg_logprob": -0.1771217126112718, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.002649593399837613}, {"id": 115, "seek": 113564, "start": 1135.64, "end": 1147.64, "text": " contains case to describe data from data blobs. So the data blobs are protected by NIDAS.", "tokens": [50364, 8306, 1389, 281, 6786, 1412, 490, 1412, 1749, 929, 13, 407, 264, 1412, 1749, 929, 366, 10594, 538, 426, 2777, 3160, 13, 50964], "temperature": 0.0, "avg_logprob": -0.20884012139361838, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.006366378162056208}, {"id": 116, "seek": 113564, "start": 1147.64, "end": 1156.64, "text": " By that way, we can support both data encryption and meta loading at the same time.", "tokens": [50964, 3146, 300, 636, 11, 321, 393, 1406, 1293, 1412, 29575, 293, 19616, 15114, 412, 264, 912, 565, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20884012139361838, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.006366378162056208}, {"id": 117, "seek": 115664, "start": 1156.64, "end": 1171.64, "text": " For data integrity, traditionally, the integrity of data blobs or images are verified at a", "tokens": [50364, 1171, 1412, 16000, 11, 19067, 11, 264, 16000, 295, 1412, 1749, 929, 420, 5267, 366, 31197, 412, 257, 51114], "temperature": 0.0, "avg_logprob": -0.2232367992401123, "compression_ratio": 1.4047619047619047, "no_speech_prob": 0.021579574793577194}, {"id": 118, "seek": 115664, "start": 1171.64, "end": 1178.64, "text": " download time. And there is no mechanism to ensure data integrity at a run time. NIDAS", "tokens": [51114, 5484, 565, 13, 400, 456, 307, 572, 7513, 281, 5586, 1412, 16000, 412, 257, 1190, 565, 13, 426, 2777, 3160, 51464], "temperature": 0.0, "avg_logprob": -0.2232367992401123, "compression_ratio": 1.4047619047619047, "no_speech_prob": 0.021579574793577194}, {"id": 119, "seek": 117864, "start": 1178.64, "end": 1187.64, "text": " adds a special attribute to the image management to verify the integrity of data checks at a", "tokens": [50364, 10860, 257, 2121, 19667, 281, 264, 3256, 4592, 281, 16888, 264, 16000, 295, 1412, 13834, 412, 257, 50814], "temperature": 0.0, "avg_logprob": -0.2073222507130016, "compression_ratio": 1.362962962962963, "no_speech_prob": 0.01650433987379074}, {"id": 120, "seek": 117864, "start": 1187.64, "end": 1199.64, "text": " run time. So, like encryption, we will combine cosine and NIDAS to protect the integrity of", "tokens": [50814, 1190, 565, 13, 407, 11, 411, 29575, 11, 321, 486, 10432, 23565, 293, 426, 2777, 3160, 281, 2371, 264, 16000, 295, 51414], "temperature": 0.0, "avg_logprob": -0.2073222507130016, "compression_ratio": 1.362962962962963, "no_speech_prob": 0.01650433987379074}, {"id": 121, "seek": 119964, "start": 1199.64, "end": 1207.64, "text": " the whole image. First, we will use cosine to protect the integrity of manifest and NIDAS", "tokens": [50364, 264, 1379, 3256, 13, 2386, 11, 321, 486, 764, 23565, 281, 2371, 264, 16000, 295, 10067, 293, 426, 2777, 3160, 50764], "temperature": 0.0, "avg_logprob": -0.1831665772658128, "compression_ratio": 1.6242424242424243, "no_speech_prob": 0.013012251816689968}, {"id": 122, "seek": 119964, "start": 1207.64, "end": 1216.64, "text": " meta blob. And the meta data blob contains digest of the data blob. And there is a", "tokens": [50764, 19616, 46115, 13, 400, 264, 19616, 1412, 46115, 8306, 13884, 295, 264, 1412, 46115, 13, 400, 456, 307, 257, 51214], "temperature": 0.0, "avg_logprob": -0.1831665772658128, "compression_ratio": 1.6242424242424243, "no_speech_prob": 0.013012251816689968}, {"id": 123, "seek": 119964, "start": 1216.64, "end": 1226.64, "text": " monetary to usually ensure the data integrity of each data chunk. So the data blob is protected", "tokens": [51214, 26388, 281, 2673, 5586, 264, 1412, 16000, 295, 1184, 1412, 16635, 13, 407, 264, 1412, 46115, 307, 10594, 51714], "temperature": 0.0, "avg_logprob": -0.1831665772658128, "compression_ratio": 1.6242424242424243, "no_speech_prob": 0.013012251816689968}, {"id": 124, "seek": 122664, "start": 1226.64, "end": 1236.64, "text": " by NIDAS again. With the enhancement of encryption and data integrity verification, we", "tokens": [50364, 538, 426, 2777, 3160, 797, 13, 2022, 264, 40776, 295, 29575, 293, 1412, 16000, 30206, 11, 321, 50864], "temperature": 0.0, "avg_logprob": -0.20056084663637222, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.011610747314989567}, {"id": 125, "seek": 122664, "start": 1236.64, "end": 1245.64, "text": " can support laser loading and image cards for confidential containers. So, we can fetch image", "tokens": [50864, 393, 1406, 12530, 15114, 293, 3256, 5632, 337, 27054, 17089, 13, 407, 11, 321, 393, 23673, 3256, 51314], "temperature": 0.0, "avg_logprob": -0.20056084663637222, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.011610747314989567}, {"id": 126, "seek": 122664, "start": 1245.64, "end": 1254.64, "text": " data from remote registry or from remote node through P2P, or we can fetch the image data", "tokens": [51314, 1412, 490, 8607, 36468, 420, 490, 8607, 9984, 807, 430, 17, 47, 11, 420, 321, 393, 23673, 264, 3256, 1412, 51764], "temperature": 0.0, "avg_logprob": -0.20056084663637222, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.011610747314989567}, {"id": 127, "seek": 125464, "start": 1254.64, "end": 1263.64, "text": " from host, from data cache on host through what type of interface or what type of block interface.", "tokens": [50364, 490, 3975, 11, 490, 1412, 19459, 322, 3975, 807, 437, 2010, 295, 9226, 420, 437, 2010, 295, 3461, 9226, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3252393964310767, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0016562392702326179}, {"id": 128, "seek": 125464, "start": 1263.64, "end": 1273.64, "text": " And we also support different modes to access encrypted images. It can be accessed through", "tokens": [50814, 400, 321, 611, 1406, 819, 14068, 281, 2105, 36663, 5267, 13, 467, 393, 312, 34211, 807, 51314], "temperature": 0.0, "avg_logprob": -0.3252393964310767, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0016562392702326179}, {"id": 129, "seek": 125464, "start": 1273.64, "end": 1283.64, "text": " LADASD and fuels, or it can also be accessed through LADASD and URFS. And we are working", "tokens": [51314, 441, 6112, 3160, 35, 293, 24616, 11, 420, 309, 393, 611, 312, 34211, 807, 441, 6112, 3160, 35, 293, 624, 49, 29318, 13, 400, 321, 366, 1364, 51814], "temperature": 0.0, "avg_logprob": -0.3252393964310767, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0016562392702326179}, {"id": 130, "seek": 128364, "start": 1283.64, "end": 1294.64, "text": " on researching to enable URFS to directly access LADAS images, but that is still in", "tokens": [50364, 322, 24176, 281, 9528, 624, 49, 29318, 281, 3838, 2105, 441, 6112, 3160, 5267, 11, 457, 300, 307, 920, 294, 50914], "temperature": 0.0, "avg_logprob": -0.2194617165459527, "compression_ratio": 1.3181818181818181, "no_speech_prob": 0.0022726869210600853}, {"id": 131, "seek": 128364, "start": 1294.64, "end": 1305.64, "text": " the early stage. We are still working on that direction. That is our development plan. The", "tokens": [50914, 264, 2440, 3233, 13, 492, 366, 920, 1364, 322, 300, 3513, 13, 663, 307, 527, 3250, 1393, 13, 440, 51464], "temperature": 0.0, "avg_logprob": -0.2194617165459527, "compression_ratio": 1.3181818181818181, "no_speech_prob": 0.0022726869210600853}, {"id": 132, "seek": 130564, "start": 1305.64, "end": 1313.64, "text": " first stage is to integrate LADAS image service with the image IIS create. After the first", "tokens": [50364, 700, 3233, 307, 281, 13365, 441, 6112, 3160, 3256, 2643, 365, 264, 3256, 286, 2343, 1884, 13, 2381, 264, 700, 50764], "temperature": 0.0, "avg_logprob": -0.2268188885280064, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.011527319438755512}, {"id": 133, "seek": 130564, "start": 1313.64, "end": 1323.64, "text": " stage, we only provide the laser loading capability and do not include data caching. The", "tokens": [50764, 3233, 11, 321, 787, 2893, 264, 12530, 15114, 13759, 293, 360, 406, 4090, 1412, 269, 2834, 13, 440, 51264], "temperature": 0.0, "avg_logprob": -0.2268188885280064, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.011527319438755512}, {"id": 134, "seek": 130564, "start": 1323.64, "end": 1333.64, "text": " next step is to add data caching to LADASD. By that, we can perfect the image data and", "tokens": [51264, 958, 1823, 307, 281, 909, 1412, 269, 2834, 281, 441, 6112, 3160, 35, 13, 3146, 300, 11, 321, 393, 2176, 264, 3256, 1412, 293, 51764], "temperature": 0.0, "avg_logprob": -0.2268188885280064, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.011527319438755512}, {"id": 135, "seek": 133364, "start": 1333.64, "end": 1343.64, "text": " cache it inside the trusted domain that will greatly improve the performance and reliability.", "tokens": [50364, 19459, 309, 1854, 264, 16034, 9274, 300, 486, 14147, 3470, 264, 3389, 293, 24550, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2339829468145603, "compression_ratio": 1.323943661971831, "no_speech_prob": 0.004735814407467842}, {"id": 136, "seek": 133364, "start": 1343.64, "end": 1353.64, "text": " And as I mentioned just now, we are still investigating to enhance the URFS to directly access", "tokens": [50864, 400, 382, 286, 2835, 445, 586, 11, 321, 366, 920, 22858, 281, 11985, 264, 624, 49, 29318, 281, 3838, 2105, 51364], "temperature": 0.0, "avg_logprob": -0.2339829468145603, "compression_ratio": 1.323943661971831, "no_speech_prob": 0.004735814407467842}, {"id": 137, "seek": 135364, "start": 1353.64, "end": 1364.64, "text": " LADAS images through what type of block. If we achieve that, it will be very flexible.", "tokens": [50364, 441, 6112, 3160, 5267, 807, 437, 2010, 295, 3461, 13, 759, 321, 4584, 300, 11, 309, 486, 312, 588, 11358, 13, 50914], "temperature": 0.0, "avg_logprob": -0.19236111154361646, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.008468437008559704}, {"id": 138, "seek": 135364, "start": 1364.64, "end": 1378.64, "text": " There is no URFS demon to serve the image. That will be very great. But how to provide", "tokens": [50914, 821, 307, 572, 624, 49, 29318, 14283, 281, 4596, 264, 3256, 13, 663, 486, 312, 588, 869, 13, 583, 577, 281, 2893, 51614], "temperature": 0.0, "avg_logprob": -0.19236111154361646, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.008468437008559704}, {"id": 139, "seek": 137864, "start": 1378.64, "end": 1389.64, "text": " image caching and host is out of scope. We won't discuss it here. And there are other ways", "tokens": [50364, 3256, 269, 2834, 293, 3975, 307, 484, 295, 11923, 13, 492, 1582, 380, 2248, 309, 510, 13, 400, 456, 366, 661, 2098, 50914], "temperature": 0.0, "avg_logprob": -0.21396183481021802, "compression_ratio": 1.3984375, "no_speech_prob": 0.16370053589344025}, {"id": 140, "seek": 137864, "start": 1389.64, "end": 1399.64, "text": " to provide image caching service, such as we can block-based image caching. For example,", "tokens": [50914, 281, 2893, 3256, 269, 2834, 2643, 11, 1270, 382, 321, 393, 3461, 12, 6032, 3256, 269, 2834, 13, 1171, 1365, 11, 51414], "temperature": 0.0, "avg_logprob": -0.21396183481021802, "compression_ratio": 1.3984375, "no_speech_prob": 0.16370053589344025}, {"id": 141, "seek": 139964, "start": 1399.64, "end": 1410.64, "text": " we can use code call to image format to provide encrypted image. Then we can use", "tokens": [50364, 321, 393, 764, 3089, 818, 281, 3256, 7877, 281, 2893, 36663, 3256, 13, 1396, 321, 393, 764, 50914], "temperature": 0.0, "avg_logprob": -0.41748275254902084, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.13660286366939545}, {"id": 142, "seek": 139964, "start": 1410.64, "end": 1417.64, "text": " DEM integrity and DEM craft to ensure the confidentiality and integrity.", "tokens": [50914, 413, 6683, 16000, 293, 413, 6683, 8448, 281, 5586, 264, 27054, 507, 293, 16000, 13, 51264], "temperature": 0.0, "avg_logprob": -0.41748275254902084, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.13660286366939545}, {"id": 143, "seek": 141764, "start": 1417.64, "end": 1430.64, "text": " Let us do the same simple, but it is not very inflexible. So we will enable LADAS image", "tokens": [50364, 961, 505, 360, 264, 912, 2199, 11, 457, 309, 307, 406, 588, 1536, 2021, 964, 13, 407, 321, 486, 9528, 441, 6112, 3160, 3256, 51014], "temperature": 0.0, "avg_logprob": -0.3093351576063368, "compression_ratio": 1.3053435114503817, "no_speech_prob": 0.09062530100345612}, {"id": 144, "seek": 141764, "start": 1430.64, "end": 1443.64, "text": " service for confidential container first. We are targeting to integrate LADAS image", "tokens": [51014, 2643, 337, 27054, 10129, 700, 13, 492, 366, 17918, 281, 13365, 441, 6112, 3160, 3256, 51664], "temperature": 0.0, "avg_logprob": -0.3093351576063368, "compression_ratio": 1.3053435114503817, "no_speech_prob": 0.09062530100345612}, {"id": 145, "seek": 144364, "start": 1443.64, "end": 1450.64, "text": " service into confidential containers by end of code 2. If you are interested in the technology", "tokens": [50364, 2643, 666, 27054, 17089, 538, 917, 295, 3089, 568, 13, 759, 291, 366, 3102, 294, 264, 2899, 50714], "temperature": 0.0, "avg_logprob": -0.2298741761375876, "compression_ratio": 1.2564102564102564, "no_speech_prob": 0.1753978431224823}, {"id": 146, "seek": 144364, "start": 1450.64, "end": 1456.64, "text": " or project, please join us. Thank you for listening.", "tokens": [50714, 420, 1716, 11, 1767, 3917, 505, 13, 1044, 291, 337, 4764, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2298741761375876, "compression_ratio": 1.2564102564102564, "no_speech_prob": 0.1753978431224823}, {"id": 147, "seek": 147364, "start": 1473.64, "end": 1475.64, "text": " .", "tokens": [50414, 2411, 50464], "temperature": 0.0, "avg_logprob": -0.5695632696151733, "compression_ratio": 0.1111111111111111, "no_speech_prob": 0.9960395097732544}], "language": "en"}