{"text": " Hi, I'm Sean. Today I'm going to talk about semi-hosting in the context of Uboot and what it is and how it works and maybe why you might want to use it. So, first I want to ask how do you boot Strapasystem? So, you might do this for two reasons. One, you have a new board right from the factory and it has nothing on it at all and you have to get something on it and the other one is maybe you bricked it and this happens to me sometimes. It actually happens quite a lot especially when I'm working on Uboot and the board will no longer boot. So, there's two basic steps usually. The first one is you want to get something running on your board and the second one is you want to then write something to storage so you don't have to do the process again. So, there's a variety of protocols you can use. USB of course. I like UMS. It's very nice. It makes your device look like a USB flash drive which is very, very convenient. There's also a bunch of Ethernet stuff. The classic TFTP. Baskoot makes an appearance twice because it can do both. If you have an SD card, bootstrapping is super easy. You just pop out the SD card and put whatever you want on it and put the SD card back in but a lot of boards don't have SD cards. So, this is not always an option. There's Serial. This is usually kind of slow so you might only want to use it for the code execution part but it's definitely there. Some boards have it built into the boot loader. You can just flash something over Serial. And there's also JTAG and JTAG is kind of a classic one. Also slow. You probably wouldn't want to flash your whole root file system over it but it's pretty reliable and a lot of boards have it. What if you only have JTAG and you don't have any of these other nice protocols? So, I'd like to take a little bit of a different approach to the problem and let's talk about something totally different which is the NXP Core IQ line of communications processors. These are the newest iterations of a very old line which stretches to the M68K and there's a very long lineage of PowerPC stuff in there and they tend to have lots of Ethernet, some PCIe, some USB but not any display interfaces. So, they're not really media sucks and they often have hardware accelerated networking so you can do some stuff in hardware which you would normally do in software. And this is kind of the main selling point on why you might want to use these. So, all of these have something they call a reset configuration word or RCW and this started back in the PowerPC days as just basic initialization. What enviousness your sock is going to be, maybe what dividers you're going to have on some clocks, how wide your boot bus is, what are you going to do with your debug pins and this is kind of a small amount of data so they stuck it on there some pull-ups and pull-downs on some of the pins and this is a very standard thing you'll see on a lot of different socks and then they wanted some pin boxing because when they originally started with this they all the pins were fixed function and you can sell more chips if you can change the function of some of the pins so that you can use like USB on one chip and maybe ethernet on another so they added some pin boxing and they added it to the RCW and then they added a lot more pin boxing because the more pin boxing you have the more applications your chip can fit into and so they started running out of pins because they started getting maybe like 128, 256, 512 bits of stuff that they needed to configure and so they decided they were going to put the RCW on the boot device so the first thing the sock does when it boots up is it reads off this RCW and it configures all the pins and then it continues with the boot and this is kind of convenient but it creates a chicken and egg problem where in order for your sock to boot up there has to be something on your initial device and if you're in a situation where you have to bootstrap it there's nothing there so the sock won't boot up so what they did is they created a hard-coded reset configuration word this is for maximum compatibility they would disable all the peripherals and you would just have your boot device and so you could always boot into this and be safe and not break your board but this is not so great because they never added runtime pin muxing so this chip you select a function for your pins and you can't change it there are a few pins where you can change it but for the most of them you're stuck so when you have this maximum compatibility RCW with everything disabled you have no ethernet you have no usb you have no serial even and all you get is jtag and your boot device so nxp knew they had a problem and they decided to solve it by introducing this override so you would boot via the hard-coded reset configuration word and then you would program via jtag the values that you actually wanted that would enable all your peripherals for your board and then you would do a partial reset and it would come up and it would load everything like it was supposed to but there's a couple problems with this the main one is that they never documented this stuff so in order to use it you you have to use the jtag probe which is like most jtag probes kind of a gouge because they they know you're buying the chip so you gotta have the jtag probe and you have to use their IDE which is a yearly subscription and they're not cheap so this is not a great situation and if you didn't think this was great here's a glowing review i found on the forums our manufacturer uses a single pc to perform the initial programming on this pc they have an evaluation copy of code warrior which is their IDE every time that evaluation copy expires they erase the hard drive of the pc install the os again and load another evaluation copy uh so this is not ideal uh and i thought about how i might address this uh and make it better and i remembered um something that i learned about a couple months ago it's called semi hosting and the basic idea of semi hosting is that you attach a debugger in my case it's over jtag and uh your code is going to execute a special breakpoint instruction and when your debugger sees this it will read out there on opcode in r0 and an argument in r1 and it will do something for you and then it will give you a return code back in r0 and this is very very similar to how sys calls work because your program will execute a special instruction the operating system will read out your registers it will do something for you and give you a return code so what do you get well the thing that i wanted most is serial because i didn't have any so first i looked at some of the sys write c and sys write c is basically put char uh you uh so we can implement put s here and so we're going to take in a string and we're going to loop over all the characters in the string and for each character we're going to trap or execute our breakpoint instruction and we're going to pass for our opcode the write c and we're also going to pass a pointer to the character uh and if you may know that put char actually just takes the character um and so this is kind of an unfortunate uh performance implication because we have one breakpoint and one memory access per character in the string and for j tag this is not very performant if you've ever used a 300 bod modem you know that's very slow this is even slower so this is really not useful if you actually want to use your serial output so we can do better though they also have something called sys write zero this is basically put s so uh our pit of implementation gets very simple uh we're just going to trap with write zero and now we get one breakpoint per string uh but we still have to do one memory access per character and the problem is that we don't want to read off the end of the string we have to make sure that we don't go past the null terminator so the debugger has to read a character and then see it was at the null terminator and if it's not you read another character and you keep doing this uh and we really don't want to go off the end uh but the problem is that for j tag setting up a read is a pretty intensive process um there's a lot of overhead and it can be still pretty slow so this is faster uh about 10 times as fast but it's still slow uh really not usable but we can do even better um so we're going to use sys write which is basically the write system call and for this one because we have multiple parameters uh the previous ones only had one parameter so it just goes in the argument but for this one we're going to fill in our arguments inside of a struct and we're going to take the file descriptor and the buffer and the length of the buffer and we're going to fill this in with standard out and uh there are string and the length of our string and then we're going to trap and we're going to pass a pointer to our struct and this is generally how we pass multiple arguments um to semi-hosting because there's only one argument register so they will take a pointer to the struct and so now we get one breakpoint per string and two memory accesses per string and this is reasonably fast we can do stuff with this and it's not glacially slow um so this is the kind of implementation I ended up using it uh and if you've been paying attention you'll note that sys write kind of implies the existence of sys open and you can open any file on your host system which is pretty convenient and you can do all the standard stuff like seeking it and reading it and closing it uh we don't get stat but we do get the file length which is mostly what we want because usually we just want to open it find out how long it is and then read the whole thing uh so in uboot you may classically do something like this if you want to load your linux and then boot it you're going to load it from mmc0 add a particular address uh and then you're going to give your file name and then you'll boot it uh and so we can replace this with load host fs which is the something on your host debugger file system uh and that linux image will get read from the directory that you're running your debugger from um and it it's the same structure because under the hood it's using the same api and there's a dash because there's only one host fs and we don't need to have multiple debugger support uh and there's a special file called colon tt uh which i think stands for teletype and this is your standard in and standard out and almost everybody uses this uh except q mu because q mu doesn't have this huge overhead for memory accesses so they don't actually care uh if you can use your console with uh read and write and so you just use uh write zero with them and it's works uh so one classic problem with booting with j tag is that your regular boot process is going to look something like load spl and spl is going to initialize d ram and then spl is going to load regular u boot into d ram and execute it and when you do this with j tag instead you have to load spl over j tag and j tag is going to run and initialize d ram and sometime you have to uh load u boot into j you load u boot into d ram over j tag but we don't really know when um and so a really classic way to do this is uh you just pick a time and you wait that long and then you load u boot but this is kind of awful because if you have any kind of variance in how long d ram initialization takes or how long it takes especially if you're doing other hardware initialization um you have to just wait a lot longer and in the average case you're going to be doing nothing and this can really drive you nuts as a developer because you might be waiting like 20 seconds because sometimes it takes 20 seconds but most of the time it doesn't um so you can also reimplement d ram in tickle and uh this is a really common thing for vendors to do because they love just you know it's it's very simple for them they just write all the registers and it happens over j tag and this avoids the whole timing problem because we know exactly when d ram has vision is sliced but it's a totally different process from normal you have to specify your parameters in a different format in a different language it's not going to be tested as much and it probably won't initialize things in the same way so it's it can be more buggy um and it's kind of uh worrisome especially when you have to uh your regular u boot will work fine and maybe this doesn't work so well but semi hosting makes this really simple because spl can load and then it will over j tag and initialize d ram and it says to your host please load u boot at this address and your host will do that and then it continues on its way and it's um extremely simple to use and it solves this whole timing problem which can be very annoying uh so what else do you get well we get some error handling uh error no is practically essential um to find out why something failed uh is error is not uh the idea of is errors that you will pass in a return code and is there will tell you if it's an error or not but the problem is that some of these semi hosting commands um have different semantics for the return code and most of the time the semantic is negative numbers are errors so effectively you're doing this whole big semi hosting call just to compare to zero um so i don't really know why this is in here and there's actually several functions that are kind of like that um for example sys uh sys time will get you the real time which can be helpful if you're uh if your device doesn't have an rtc or you don't want to initialize it um but sys elapsed will get the number of ticks that your program has been running so maybe you would use this for uh benchmarking but the overhead of doing semi hosting is a lot larger than the the amount of precision that you're going to get so i'm not really sure why you use that one either um there's some libc emulation uh you can pass in a command line you but we don't really need this because we have the environment and we have the device tree and those are kind of classic ways to pass in um parameters but if you're not using uboot and you don't have this sort of system set up uh you can get command line parameters pretty easily there's also a sys heap which is where you tell the device where it thinks the heap is and where it should malloc stuff but usually you know this when you compile you say this address range is going to be or i'm going to stick my heap so also i'm not really sure why that's in there um and as you may have noticed uh you can write files um so of course you can mess things up especially on unix where you can open up a lot of files that aren't really files and do some fun stuff with them but you can also just run arbitrary commands and you can remove files too um so you have to really trust this stuff that you're going to run uh because as far as i know no one does sandboxing they just implement all this stuff uh so maybe they shouldn't but that's how it is uh so if you've ever used semi-hosting before you may be familiar with the this problem uh break points are actually invalid instructions and your program will crash unless there is a debugger attached and the debugger will handle it for you and you won't end up executing it um so typically you would have to have two programs one with semi-hosting enabled and one with semi-hosting not enabled and the one with semi-hosting enabled you'd have to run with a debugger but we can get around this using a pretty simple trick um this one is from uh tom verbuer uh and the idea is that in your synchronous support handler you first check to make sure that we have an invalid instruction and otherwise you panic which you know probably involves printing out the registers or doing something um complaining loudly on the serial which you might not have uh then you would do you we need to check to make sure our instruction which is held in elr is the semi-hosting arm 64 halt instruction which is the special breakpoint um and the lower bits of the pc are actually not the pc on uh arm because they have stuff like are you in thumb mode or not um so we need to mask those off well you could probably just do and uh till the three um and if we actually find out that it was supposed to be a semi-hosting instruction we're going to disable semi-hosting which on your processor can do whatever it wants but on u boot it just sits a global variable that says we don't have semi-hosting don't try it again and then we pretend that we get a failure negative one is almost always a failure and then we advance the pc by four bytes so if you want to use semi-hosting in u boot uh you can enable these configs uh the first one enables semi-hosting of any kind um and also enables this uh command uh the second one semi-hosting serial will get you some serial input and output and you'll probably want this serial put s uh because normally u boot will print a character at a time uh and put s will group those characters into strings and print them all at once and if you want to have this thing you will need to enable config semi-hosting fallback and if you want to use an spl then you can enable the spl versions there's no serial version because u boot always enables the uh serial device in spl that it's using in the regular u boot um and these are the things that i worked on adding uh and i also worked on config semi-hosting a lot but uh the basic support was already there uh there's also risk five support from a kautok console and this is pretty recently added so it's either in the january release or maybe the march release i'm not sure um and if you want to know more about how to enable this we have a documentation link and of course you're also going to need a debugger so i like to use open ocd um maybe because i'm a masochist uh and open ocd is a debug server for j tag so the idea is you launch open ocd and it connects to your debug probe and then you can you can tell the debug probe to do things like uh start or stop your processor and you can also attach gdb to it like it's a running process so this is pretty simple for open ocd you just halt the processor you enable semi-hosting and then you resume it and typically what you would do is in between this enabling semi-hosting and resuming you would load your program and then resume out a particular address and this you could stick in a script and just run and automate the whole thing uh so there's a couple of downsides to open ocd uh you can kind of think of this as like a wish list or things that are knowing me but not enough that i fixed them uh the one of them is that uses the same terminal for regular like logging messages like uh you know i attached a debugger um and that sort of thing as semi-hosting output so they can be kind of get intermixed so you have to watch out for that uh the serial is cooked which means that when you type something uh nothing happens until you hit enter and then everything happens uh and this can is kind of okay because if you're editing a command line um it it's generally really slow if like you hit backspace and then you have to go to u boot and u boot interprets the backspace and echoes it back and then it gets displayed on your terminal so cooked is nice here um the problem is that open ocd is single threaded so while it's waiting for you to input it's not doing anything so if you unplug the device or you hit control c in your debugger it won't notice until you hit enter uh so this is uh can be kind of fun especially because even if you know about it you might forget um and this single threaded thing also ties into there's no sandboxing so ideally you would do something like fork off another process and maybe unshare some stuff or put it in a ch route and then that would be where you would run all your semi-hosting stuff like it would open the file and you could limit it to just a few files but there's no sandboxing so uh your whole system is there uh once again you have to trust your stuff so should you use semi-hosting uh i would say not unless you have to especially not the serial stuff but it's good to have if you have to use it it's nice uh and sometimes it's convenient if you're doing emulation it can be really simple because you don't have to emulate an mmc device you don't have to write a driver for an mmc device you just uh call your semi-hosting instruction and you can load the file right into where you want it um and you don't have to do any hardware and if you're already using jtag boot this can be really nice to solve some of your sequencing stuff uh but i wouldn't recommend it in general um so i'd like to thank a couple people uh tom verberware wrote a blog post on this stuff that got me thinking about the whole thing uh andre psivara uh did the initial semi-hosting and uh i'm he also worked with me when i was upstreaming my stuff so i'm grateful for that and of course tom rini and simon glass who reviewed and merged all of this code and a lot of other patches along the years um and of course maric who put me up to this talk and seiko who employed me while i was writing the code and if you're interested in this there's that blog post i was talking about uh there is the risk five software spec which is just the arm software spec but they use a different instruction and different registers and of course the arm software spec and this link may die because arm has a tendency to rearrange things but uh for now it works thank you anyone have a question questions yeah i do um can you actually use semi-hosting for serial control in linux uh yes but only for debug prints and i haven't looked into it that closely um i think the whole uh stopping linux to do a breakpoint is kind of invasive because linux tends not to like that because like your interrupts for that core will just not happen while it's stuck on the debugger and uh you can kind of break your devices that expect there to be an interrupt that gets handled in a reasonable manner um so typically when you stop the processor in linux uh like your emmc will just break um so generally i've only seen it for debug prints and usually only if like you can't get to the real serial console yeah okay since we have a couple minutes i have a one more slide um so normally when you boot print something uh this is what it gets it'll get like hello uh slash n and it'll normally print this like h e l l o slash r slash n and it inserts the slash r and it'll do it one character at a time but as we've established earlier this is glitchily slow on semi-hosted hardware so what i initially did was this and i printed out hello slash n and then i added the dash slash r um but this will actually break things because they expect it to be r n and not n r even though like functionally they're the same um so i ended up having to do it the other way uh so if you're implement this stuff be aware of that although uh if if you are doing this like on a microcontroller you can probably just put hello r n in your strings and maybe that's better", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.76, "text": " Hi, I'm Sean. Today I'm going to talk about semi-hosting in the context of Uboot and what", "tokens": [2421, 11, 286, 478, 14839, 13, 2692, 286, 478, 516, 281, 751, 466, 12909, 12, 6037, 278, 294, 264, 4319, 295, 624, 1763, 310, 293, 437], "temperature": 0.0, "avg_logprob": -0.17168683913147564, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.03725831210613251}, {"id": 1, "seek": 0, "start": 11.76, "end": 19.2, "text": " it is and how it works and maybe why you might want to use it. So, first I want to ask how", "tokens": [309, 307, 293, 577, 309, 1985, 293, 1310, 983, 291, 1062, 528, 281, 764, 309, 13, 407, 11, 700, 286, 528, 281, 1029, 577], "temperature": 0.0, "avg_logprob": -0.17168683913147564, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.03725831210613251}, {"id": 2, "seek": 0, "start": 19.2, "end": 24.240000000000002, "text": " do you boot Strapasystem? So, you might do this for two reasons. One, you have a new", "tokens": [360, 291, 11450, 745, 4007, 296, 9321, 30, 407, 11, 291, 1062, 360, 341, 337, 732, 4112, 13, 1485, 11, 291, 362, 257, 777], "temperature": 0.0, "avg_logprob": -0.17168683913147564, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.03725831210613251}, {"id": 3, "seek": 0, "start": 24.240000000000002, "end": 28.400000000000002, "text": " board right from the factory and it has nothing on it at all and you have to get something", "tokens": [3150, 558, 490, 264, 9265, 293, 309, 575, 1825, 322, 309, 412, 439, 293, 291, 362, 281, 483, 746], "temperature": 0.0, "avg_logprob": -0.17168683913147564, "compression_ratio": 1.6108597285067874, "no_speech_prob": 0.03725831210613251}, {"id": 4, "seek": 2840, "start": 28.4, "end": 33.44, "text": " on it and the other one is maybe you bricked it and this happens to me sometimes. It actually", "tokens": [322, 309, 293, 264, 661, 472, 307, 1310, 291, 738, 12598, 309, 293, 341, 2314, 281, 385, 2171, 13, 467, 767], "temperature": 0.0, "avg_logprob": -0.13108348038236975, "compression_ratio": 1.7786259541984732, "no_speech_prob": 1.2027386219415348e-05}, {"id": 5, "seek": 2840, "start": 33.44, "end": 38.96, "text": " happens quite a lot especially when I'm working on Uboot and the board will no longer boot.", "tokens": [2314, 1596, 257, 688, 2318, 562, 286, 478, 1364, 322, 624, 1763, 310, 293, 264, 3150, 486, 572, 2854, 11450, 13], "temperature": 0.0, "avg_logprob": -0.13108348038236975, "compression_ratio": 1.7786259541984732, "no_speech_prob": 1.2027386219415348e-05}, {"id": 6, "seek": 2840, "start": 40.879999999999995, "end": 46.16, "text": " So, there's two basic steps usually. The first one is you want to get something running on your", "tokens": [407, 11, 456, 311, 732, 3875, 4439, 2673, 13, 440, 700, 472, 307, 291, 528, 281, 483, 746, 2614, 322, 428], "temperature": 0.0, "avg_logprob": -0.13108348038236975, "compression_ratio": 1.7786259541984732, "no_speech_prob": 1.2027386219415348e-05}, {"id": 7, "seek": 2840, "start": 46.16, "end": 51.28, "text": " board and the second one is you want to then write something to storage so you don't have to do", "tokens": [3150, 293, 264, 1150, 472, 307, 291, 528, 281, 550, 2464, 746, 281, 6725, 370, 291, 500, 380, 362, 281, 360], "temperature": 0.0, "avg_logprob": -0.13108348038236975, "compression_ratio": 1.7786259541984732, "no_speech_prob": 1.2027386219415348e-05}, {"id": 8, "seek": 2840, "start": 51.28, "end": 58.16, "text": " the process again. So, there's a variety of protocols you can use. USB of course. I like", "tokens": [264, 1399, 797, 13, 407, 11, 456, 311, 257, 5673, 295, 20618, 291, 393, 764, 13, 10109, 295, 1164, 13, 286, 411], "temperature": 0.0, "avg_logprob": -0.13108348038236975, "compression_ratio": 1.7786259541984732, "no_speech_prob": 1.2027386219415348e-05}, {"id": 9, "seek": 5816, "start": 58.16, "end": 65.2, "text": " UMS. It's very nice. It makes your device look like a USB flash drive which is very, very convenient.", "tokens": [624, 10288, 13, 467, 311, 588, 1481, 13, 467, 1669, 428, 4302, 574, 411, 257, 10109, 7319, 3332, 597, 307, 588, 11, 588, 10851, 13], "temperature": 0.0, "avg_logprob": -0.12115738278343564, "compression_ratio": 1.5461847389558232, "no_speech_prob": 7.526504759880481e-06}, {"id": 10, "seek": 5816, "start": 66.32, "end": 71.84, "text": " There's also a bunch of Ethernet stuff. The classic TFTP. Baskoot makes an appearance twice", "tokens": [821, 311, 611, 257, 3840, 295, 38636, 7129, 1507, 13, 440, 7230, 40964, 16804, 13, 363, 3863, 6259, 1669, 364, 8967, 6091], "temperature": 0.0, "avg_logprob": -0.12115738278343564, "compression_ratio": 1.5461847389558232, "no_speech_prob": 7.526504759880481e-06}, {"id": 11, "seek": 5816, "start": 71.84, "end": 77.19999999999999, "text": " because it can do both. If you have an SD card, bootstrapping is super easy. You just pop out", "tokens": [570, 309, 393, 360, 1293, 13, 759, 291, 362, 364, 14638, 2920, 11, 11450, 19639, 3759, 307, 1687, 1858, 13, 509, 445, 1665, 484], "temperature": 0.0, "avg_logprob": -0.12115738278343564, "compression_ratio": 1.5461847389558232, "no_speech_prob": 7.526504759880481e-06}, {"id": 12, "seek": 5816, "start": 77.19999999999999, "end": 82.24, "text": " the SD card and put whatever you want on it and put the SD card back in but a lot of boards don't", "tokens": [264, 14638, 2920, 293, 829, 2035, 291, 528, 322, 309, 293, 829, 264, 14638, 2920, 646, 294, 457, 257, 688, 295, 13293, 500, 380], "temperature": 0.0, "avg_logprob": -0.12115738278343564, "compression_ratio": 1.5461847389558232, "no_speech_prob": 7.526504759880481e-06}, {"id": 13, "seek": 8224, "start": 82.24, "end": 89.67999999999999, "text": " have SD cards. So, this is not always an option. There's Serial. This is usually kind of slow", "tokens": [362, 14638, 5632, 13, 407, 11, 341, 307, 406, 1009, 364, 3614, 13, 821, 311, 4210, 831, 13, 639, 307, 2673, 733, 295, 2964], "temperature": 0.0, "avg_logprob": -0.09693808633773053, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.341884217254119e-05}, {"id": 14, "seek": 8224, "start": 90.32, "end": 94.47999999999999, "text": " so you might only want to use it for the code execution part but it's definitely there.", "tokens": [370, 291, 1062, 787, 528, 281, 764, 309, 337, 264, 3089, 15058, 644, 457, 309, 311, 2138, 456, 13], "temperature": 0.0, "avg_logprob": -0.09693808633773053, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.341884217254119e-05}, {"id": 15, "seek": 8224, "start": 94.47999999999999, "end": 98.16, "text": " Some boards have it built into the boot loader. You can just flash something over Serial.", "tokens": [2188, 13293, 362, 309, 3094, 666, 264, 11450, 3677, 260, 13, 509, 393, 445, 7319, 746, 670, 4210, 831, 13], "temperature": 0.0, "avg_logprob": -0.09693808633773053, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.341884217254119e-05}, {"id": 16, "seek": 8224, "start": 99.52, "end": 105.75999999999999, "text": " And there's also JTAG and JTAG is kind of a classic one. Also slow. You probably wouldn't", "tokens": [400, 456, 311, 611, 508, 8241, 38, 293, 508, 8241, 38, 307, 733, 295, 257, 7230, 472, 13, 2743, 2964, 13, 509, 1391, 2759, 380], "temperature": 0.0, "avg_logprob": -0.09693808633773053, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.341884217254119e-05}, {"id": 17, "seek": 10576, "start": 105.76, "end": 112.0, "text": " want to flash your whole root file system over it but it's pretty reliable and a lot of boards have it.", "tokens": [528, 281, 7319, 428, 1379, 5593, 3991, 1185, 670, 309, 457, 309, 311, 1238, 12924, 293, 257, 688, 295, 13293, 362, 309, 13], "temperature": 0.0, "avg_logprob": -0.10726265473799272, "compression_ratio": 1.5133928571428572, "no_speech_prob": 2.6424561383464606e-06}, {"id": 18, "seek": 10576, "start": 113.44, "end": 117.84, "text": " What if you only have JTAG and you don't have any of these other nice protocols?", "tokens": [708, 498, 291, 787, 362, 508, 8241, 38, 293, 291, 500, 380, 362, 604, 295, 613, 661, 1481, 20618, 30], "temperature": 0.0, "avg_logprob": -0.10726265473799272, "compression_ratio": 1.5133928571428572, "no_speech_prob": 2.6424561383464606e-06}, {"id": 19, "seek": 10576, "start": 118.80000000000001, "end": 122.96000000000001, "text": " So, I'd like to take a little bit of a different approach to the problem", "tokens": [407, 11, 286, 1116, 411, 281, 747, 257, 707, 857, 295, 257, 819, 3109, 281, 264, 1154], "temperature": 0.0, "avg_logprob": -0.10726265473799272, "compression_ratio": 1.5133928571428572, "no_speech_prob": 2.6424561383464606e-06}, {"id": 20, "seek": 10576, "start": 124.4, "end": 129.28, "text": " and let's talk about something totally different which is the NXP Core IQ line of", "tokens": [293, 718, 311, 751, 466, 746, 3879, 819, 597, 307, 264, 426, 55, 47, 14798, 28921, 1622, 295], "temperature": 0.0, "avg_logprob": -0.10726265473799272, "compression_ratio": 1.5133928571428572, "no_speech_prob": 2.6424561383464606e-06}, {"id": 21, "seek": 12928, "start": 129.28, "end": 136.4, "text": " communications processors. These are the newest iterations of a very old line", "tokens": [15163, 27751, 13, 1981, 366, 264, 17569, 36540, 295, 257, 588, 1331, 1622], "temperature": 0.0, "avg_logprob": -0.1507065619951413, "compression_ratio": 1.5132743362831858, "no_speech_prob": 4.936695859214524e-06}, {"id": 22, "seek": 12928, "start": 137.2, "end": 142.96, "text": " which stretches to the M68K and there's a very long lineage of PowerPC stuff in there", "tokens": [597, 29058, 281, 264, 376, 27102, 42, 293, 456, 311, 257, 588, 938, 38257, 295, 7086, 12986, 1507, 294, 456], "temperature": 0.0, "avg_logprob": -0.1507065619951413, "compression_ratio": 1.5132743362831858, "no_speech_prob": 4.936695859214524e-06}, {"id": 23, "seek": 12928, "start": 144.4, "end": 151.2, "text": " and they tend to have lots of Ethernet, some PCIe, some USB but not any display interfaces. So,", "tokens": [293, 436, 3928, 281, 362, 3195, 295, 38636, 7129, 11, 512, 6465, 40, 68, 11, 512, 10109, 457, 406, 604, 4674, 28416, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.1507065619951413, "compression_ratio": 1.5132743362831858, "no_speech_prob": 4.936695859214524e-06}, {"id": 24, "seek": 12928, "start": 151.2, "end": 156.16, "text": " they're not really media sucks and they often have hardware accelerated networking", "tokens": [436, 434, 406, 534, 3021, 15846, 293, 436, 2049, 362, 8837, 29763, 17985], "temperature": 0.0, "avg_logprob": -0.1507065619951413, "compression_ratio": 1.5132743362831858, "no_speech_prob": 4.936695859214524e-06}, {"id": 25, "seek": 15616, "start": 156.16, "end": 161.12, "text": " so you can do some stuff in hardware which you would normally do in software.", "tokens": [370, 291, 393, 360, 512, 1507, 294, 8837, 597, 291, 576, 5646, 360, 294, 4722, 13], "temperature": 0.0, "avg_logprob": -0.12548037408625037, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.3211203622631729e-05}, {"id": 26, "seek": 15616, "start": 161.12, "end": 164.4, "text": " And this is kind of the main selling point on why you might want to use these.", "tokens": [400, 341, 307, 733, 295, 264, 2135, 6511, 935, 322, 983, 291, 1062, 528, 281, 764, 613, 13], "temperature": 0.0, "avg_logprob": -0.12548037408625037, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.3211203622631729e-05}, {"id": 27, "seek": 15616, "start": 166.0, "end": 170.4, "text": " So, all of these have something they call a reset configuration word or RCW", "tokens": [407, 11, 439, 295, 613, 362, 746, 436, 818, 257, 14322, 11694, 1349, 420, 28987, 54], "temperature": 0.0, "avg_logprob": -0.12548037408625037, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.3211203622631729e-05}, {"id": 28, "seek": 15616, "start": 171.04, "end": 177.04, "text": " and this started back in the PowerPC days as just basic initialization. What enviousness", "tokens": [293, 341, 1409, 646, 294, 264, 7086, 12986, 1708, 382, 445, 3875, 5883, 2144, 13, 708, 465, 1502, 1287], "temperature": 0.0, "avg_logprob": -0.12548037408625037, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.3211203622631729e-05}, {"id": 29, "seek": 15616, "start": 177.04, "end": 182.16, "text": " your sock is going to be, maybe what dividers you're going to have on some clocks, how wide", "tokens": [428, 35302, 307, 516, 281, 312, 11, 1310, 437, 4996, 433, 291, 434, 516, 281, 362, 322, 512, 41528, 11, 577, 4874], "temperature": 0.0, "avg_logprob": -0.12548037408625037, "compression_ratio": 1.5945945945945945, "no_speech_prob": 1.3211203622631729e-05}, {"id": 30, "seek": 18216, "start": 182.16, "end": 186.79999999999998, "text": " your boot bus is, what are you going to do with your debug pins and this is kind of a small amount", "tokens": [428, 11450, 1255, 307, 11, 437, 366, 291, 516, 281, 360, 365, 428, 24083, 16392, 293, 341, 307, 733, 295, 257, 1359, 2372], "temperature": 0.0, "avg_logprob": -0.10127122648831072, "compression_ratio": 1.9076305220883534, "no_speech_prob": 5.337971742847003e-06}, {"id": 31, "seek": 18216, "start": 186.79999999999998, "end": 192.8, "text": " of data so they stuck it on there some pull-ups and pull-downs on some of the pins and this is a", "tokens": [295, 1412, 370, 436, 5541, 309, 322, 456, 512, 2235, 12, 7528, 293, 2235, 12, 5093, 82, 322, 512, 295, 264, 16392, 293, 341, 307, 257], "temperature": 0.0, "avg_logprob": -0.10127122648831072, "compression_ratio": 1.9076305220883534, "no_speech_prob": 5.337971742847003e-06}, {"id": 32, "seek": 18216, "start": 192.8, "end": 199.04, "text": " very standard thing you'll see on a lot of different socks and then they wanted some pin", "tokens": [588, 3832, 551, 291, 603, 536, 322, 257, 688, 295, 819, 17564, 293, 550, 436, 1415, 512, 5447], "temperature": 0.0, "avg_logprob": -0.10127122648831072, "compression_ratio": 1.9076305220883534, "no_speech_prob": 5.337971742847003e-06}, {"id": 33, "seek": 18216, "start": 199.04, "end": 203.35999999999999, "text": " boxing because when they originally started with this they all the pins were fixed function", "tokens": [24424, 570, 562, 436, 7993, 1409, 365, 341, 436, 439, 264, 16392, 645, 6806, 2445], "temperature": 0.0, "avg_logprob": -0.10127122648831072, "compression_ratio": 1.9076305220883534, "no_speech_prob": 5.337971742847003e-06}, {"id": 34, "seek": 18216, "start": 203.35999999999999, "end": 208.32, "text": " and you can sell more chips if you can change the function of some of the pins so that you can use", "tokens": [293, 291, 393, 3607, 544, 11583, 498, 291, 393, 1319, 264, 2445, 295, 512, 295, 264, 16392, 370, 300, 291, 393, 764], "temperature": 0.0, "avg_logprob": -0.10127122648831072, "compression_ratio": 1.9076305220883534, "no_speech_prob": 5.337971742847003e-06}, {"id": 35, "seek": 20832, "start": 208.32, "end": 214.4, "text": " like USB on one chip and maybe ethernet on another so they added some pin boxing and they added it", "tokens": [411, 10109, 322, 472, 11409, 293, 1310, 37096, 7129, 322, 1071, 370, 436, 3869, 512, 5447, 24424, 293, 436, 3869, 309], "temperature": 0.0, "avg_logprob": -0.0764317512512207, "compression_ratio": 1.8238095238095238, "no_speech_prob": 7.888980690040626e-06}, {"id": 36, "seek": 20832, "start": 214.4, "end": 221.04, "text": " to the RCW and then they added a lot more pin boxing because the more pin boxing you have the", "tokens": [281, 264, 28987, 54, 293, 550, 436, 3869, 257, 688, 544, 5447, 24424, 570, 264, 544, 5447, 24424, 291, 362, 264], "temperature": 0.0, "avg_logprob": -0.0764317512512207, "compression_ratio": 1.8238095238095238, "no_speech_prob": 7.888980690040626e-06}, {"id": 37, "seek": 20832, "start": 221.04, "end": 226.64, "text": " more applications your chip can fit into and so they started running out of pins because they", "tokens": [544, 5821, 428, 11409, 393, 3318, 666, 293, 370, 436, 1409, 2614, 484, 295, 16392, 570, 436], "temperature": 0.0, "avg_logprob": -0.0764317512512207, "compression_ratio": 1.8238095238095238, "no_speech_prob": 7.888980690040626e-06}, {"id": 38, "seek": 20832, "start": 226.64, "end": 235.12, "text": " started getting maybe like 128, 256, 512 bits of stuff that they needed to configure and so they", "tokens": [1409, 1242, 1310, 411, 29810, 11, 38882, 11, 1025, 4762, 9239, 295, 1507, 300, 436, 2978, 281, 22162, 293, 370, 436], "temperature": 0.0, "avg_logprob": -0.0764317512512207, "compression_ratio": 1.8238095238095238, "no_speech_prob": 7.888980690040626e-06}, {"id": 39, "seek": 23512, "start": 235.12, "end": 241.12, "text": " decided they were going to put the RCW on the boot device so the first thing the sock does when it", "tokens": [3047, 436, 645, 516, 281, 829, 264, 28987, 54, 322, 264, 11450, 4302, 370, 264, 700, 551, 264, 35302, 775, 562, 309], "temperature": 0.0, "avg_logprob": -0.044788134725470295, "compression_ratio": 1.7713004484304933, "no_speech_prob": 2.090363523166161e-06}, {"id": 40, "seek": 23512, "start": 241.12, "end": 246.08, "text": " boots up is it reads off this RCW and it configures all the pins and then it continues with the boot", "tokens": [15194, 493, 307, 309, 15700, 766, 341, 28987, 54, 293, 309, 6662, 1303, 439, 264, 16392, 293, 550, 309, 6515, 365, 264, 11450], "temperature": 0.0, "avg_logprob": -0.044788134725470295, "compression_ratio": 1.7713004484304933, "no_speech_prob": 2.090363523166161e-06}, {"id": 41, "seek": 23512, "start": 246.88, "end": 253.84, "text": " and this is kind of convenient but it creates a chicken and egg problem where in order for your", "tokens": [293, 341, 307, 733, 295, 10851, 457, 309, 7829, 257, 4662, 293, 3777, 1154, 689, 294, 1668, 337, 428], "temperature": 0.0, "avg_logprob": -0.044788134725470295, "compression_ratio": 1.7713004484304933, "no_speech_prob": 2.090363523166161e-06}, {"id": 42, "seek": 23512, "start": 253.84, "end": 260.64, "text": " sock to boot up there has to be something on your initial device and if you're in a situation where", "tokens": [35302, 281, 11450, 493, 456, 575, 281, 312, 746, 322, 428, 5883, 4302, 293, 498, 291, 434, 294, 257, 2590, 689], "temperature": 0.0, "avg_logprob": -0.044788134725470295, "compression_ratio": 1.7713004484304933, "no_speech_prob": 2.090363523166161e-06}, {"id": 43, "seek": 26064, "start": 260.64, "end": 266.47999999999996, "text": " you have to bootstrap it there's nothing there so the sock won't boot up so what they did is they", "tokens": [291, 362, 281, 11450, 372, 4007, 309, 456, 311, 1825, 456, 370, 264, 35302, 1582, 380, 11450, 493, 370, 437, 436, 630, 307, 436], "temperature": 0.0, "avg_logprob": -0.054290671924968344, "compression_ratio": 1.724890829694323, "no_speech_prob": 3.1874815249466337e-06}, {"id": 44, "seek": 26064, "start": 266.47999999999996, "end": 272.88, "text": " created a hard-coded reset configuration word this is for maximum compatibility they would disable", "tokens": [2942, 257, 1152, 12, 66, 12340, 14322, 11694, 1349, 341, 307, 337, 6674, 34237, 436, 576, 28362], "temperature": 0.0, "avg_logprob": -0.054290671924968344, "compression_ratio": 1.724890829694323, "no_speech_prob": 3.1874815249466337e-06}, {"id": 45, "seek": 26064, "start": 272.88, "end": 277.84, "text": " all the peripherals and you would just have your boot device and so you could always boot into this", "tokens": [439, 264, 26807, 1124, 293, 291, 576, 445, 362, 428, 11450, 4302, 293, 370, 291, 727, 1009, 11450, 666, 341], "temperature": 0.0, "avg_logprob": -0.054290671924968344, "compression_ratio": 1.724890829694323, "no_speech_prob": 3.1874815249466337e-06}, {"id": 46, "seek": 26064, "start": 277.84, "end": 285.44, "text": " and be safe and not break your board but this is not so great because they never added runtime pin", "tokens": [293, 312, 3273, 293, 406, 1821, 428, 3150, 457, 341, 307, 406, 370, 869, 570, 436, 1128, 3869, 34474, 5447], "temperature": 0.0, "avg_logprob": -0.054290671924968344, "compression_ratio": 1.724890829694323, "no_speech_prob": 3.1874815249466337e-06}, {"id": 47, "seek": 28544, "start": 285.44, "end": 291.84, "text": " muxing so this chip you select a function for your pins and you can't change it there are a few", "tokens": [275, 2449, 278, 370, 341, 11409, 291, 3048, 257, 2445, 337, 428, 16392, 293, 291, 393, 380, 1319, 309, 456, 366, 257, 1326], "temperature": 0.0, "avg_logprob": -0.06829238178754093, "compression_ratio": 1.7268722466960353, "no_speech_prob": 7.071749678289052e-06}, {"id": 48, "seek": 28544, "start": 291.84, "end": 296.56, "text": " pins where you can change it but for the most of them you're stuck so when you have this maximum", "tokens": [16392, 689, 291, 393, 1319, 309, 457, 337, 264, 881, 295, 552, 291, 434, 5541, 370, 562, 291, 362, 341, 6674], "temperature": 0.0, "avg_logprob": -0.06829238178754093, "compression_ratio": 1.7268722466960353, "no_speech_prob": 7.071749678289052e-06}, {"id": 49, "seek": 28544, "start": 296.56, "end": 302.88, "text": " compatibility RCW with everything disabled you have no ethernet you have no usb you have no serial", "tokens": [34237, 28987, 54, 365, 1203, 15191, 291, 362, 572, 37096, 7129, 291, 362, 572, 505, 65, 291, 362, 572, 17436], "temperature": 0.0, "avg_logprob": -0.06829238178754093, "compression_ratio": 1.7268722466960353, "no_speech_prob": 7.071749678289052e-06}, {"id": 50, "seek": 28544, "start": 302.88, "end": 310.8, "text": " even and all you get is jtag and your boot device so nxp knew they had a problem and they decided to", "tokens": [754, 293, 439, 291, 483, 307, 361, 25030, 293, 428, 11450, 4302, 370, 297, 87, 79, 2586, 436, 632, 257, 1154, 293, 436, 3047, 281], "temperature": 0.0, "avg_logprob": -0.06829238178754093, "compression_ratio": 1.7268722466960353, "no_speech_prob": 7.071749678289052e-06}, {"id": 51, "seek": 31080, "start": 310.8, "end": 318.96000000000004, "text": " solve it by introducing this override so you would boot via the hard-coded reset configuration word", "tokens": [5039, 309, 538, 15424, 341, 42321, 370, 291, 576, 11450, 5766, 264, 1152, 12, 66, 12340, 14322, 11694, 1349], "temperature": 0.0, "avg_logprob": -0.07196863045853176, "compression_ratio": 1.7847533632286996, "no_speech_prob": 2.6015093226305908e-06}, {"id": 52, "seek": 31080, "start": 318.96000000000004, "end": 323.76, "text": " and then you would program via jtag the values that you actually wanted that would enable all your", "tokens": [293, 550, 291, 576, 1461, 5766, 361, 25030, 264, 4190, 300, 291, 767, 1415, 300, 576, 9528, 439, 428], "temperature": 0.0, "avg_logprob": -0.07196863045853176, "compression_ratio": 1.7847533632286996, "no_speech_prob": 2.6015093226305908e-06}, {"id": 53, "seek": 31080, "start": 323.76, "end": 328.88, "text": " peripherals for your board and then you would do a partial reset and it would come up and it would", "tokens": [26807, 1124, 337, 428, 3150, 293, 550, 291, 576, 360, 257, 14641, 14322, 293, 309, 576, 808, 493, 293, 309, 576], "temperature": 0.0, "avg_logprob": -0.07196863045853176, "compression_ratio": 1.7847533632286996, "no_speech_prob": 2.6015093226305908e-06}, {"id": 54, "seek": 31080, "start": 328.88, "end": 334.48, "text": " load everything like it was supposed to but there's a couple problems with this the main one is that", "tokens": [3677, 1203, 411, 309, 390, 3442, 281, 457, 456, 311, 257, 1916, 2740, 365, 341, 264, 2135, 472, 307, 300], "temperature": 0.0, "avg_logprob": -0.07196863045853176, "compression_ratio": 1.7847533632286996, "no_speech_prob": 2.6015093226305908e-06}, {"id": 55, "seek": 33448, "start": 334.48, "end": 342.24, "text": " they never documented this stuff so in order to use it you you have to use the jtag probe which is", "tokens": [436, 1128, 23007, 341, 1507, 370, 294, 1668, 281, 764, 309, 291, 291, 362, 281, 764, 264, 361, 25030, 22715, 597, 307], "temperature": 0.0, "avg_logprob": -0.09289896856878221, "compression_ratio": 1.8, "no_speech_prob": 3.5558484796638368e-06}, {"id": 56, "seek": 33448, "start": 342.96000000000004, "end": 347.36, "text": " like most jtag probes kind of a gouge because they they know you're buying the chip so you", "tokens": [411, 881, 361, 25030, 1239, 279, 733, 295, 257, 21301, 432, 570, 436, 436, 458, 291, 434, 6382, 264, 11409, 370, 291], "temperature": 0.0, "avg_logprob": -0.09289896856878221, "compression_ratio": 1.8, "no_speech_prob": 3.5558484796638368e-06}, {"id": 57, "seek": 33448, "start": 347.36, "end": 352.96000000000004, "text": " gotta have the jtag probe and you have to use their IDE which is a yearly subscription and they're", "tokens": [3428, 362, 264, 361, 25030, 22715, 293, 291, 362, 281, 764, 641, 40930, 597, 307, 257, 39102, 17231, 293, 436, 434], "temperature": 0.0, "avg_logprob": -0.09289896856878221, "compression_ratio": 1.8, "no_speech_prob": 3.5558484796638368e-06}, {"id": 58, "seek": 33448, "start": 352.96000000000004, "end": 360.16, "text": " not cheap so this is not a great situation and if you didn't think this was great here's a glowing", "tokens": [406, 7084, 370, 341, 307, 406, 257, 869, 2590, 293, 498, 291, 994, 380, 519, 341, 390, 869, 510, 311, 257, 27064], "temperature": 0.0, "avg_logprob": -0.09289896856878221, "compression_ratio": 1.8, "no_speech_prob": 3.5558484796638368e-06}, {"id": 59, "seek": 36016, "start": 360.16, "end": 365.84000000000003, "text": " review i found on the forums our manufacturer uses a single pc to perform the initial programming", "tokens": [3131, 741, 1352, 322, 264, 26998, 527, 18022, 4960, 257, 2167, 43451, 281, 2042, 264, 5883, 9410], "temperature": 0.0, "avg_logprob": -0.07578471063197344, "compression_ratio": 1.7444933920704846, "no_speech_prob": 9.222634616889991e-06}, {"id": 60, "seek": 36016, "start": 365.84000000000003, "end": 371.28000000000003, "text": " on this pc they have an evaluation copy of code warrior which is their IDE every time that evaluation", "tokens": [322, 341, 43451, 436, 362, 364, 13344, 5055, 295, 3089, 20173, 597, 307, 641, 40930, 633, 565, 300, 13344], "temperature": 0.0, "avg_logprob": -0.07578471063197344, "compression_ratio": 1.7444933920704846, "no_speech_prob": 9.222634616889991e-06}, {"id": 61, "seek": 36016, "start": 371.28000000000003, "end": 376.64000000000004, "text": " copy expires they erase the hard drive of the pc install the os again and load another evaluation", "tokens": [5055, 1278, 3145, 436, 23525, 264, 1152, 3332, 295, 264, 43451, 3625, 264, 3003, 797, 293, 3677, 1071, 13344], "temperature": 0.0, "avg_logprob": -0.07578471063197344, "compression_ratio": 1.7444933920704846, "no_speech_prob": 9.222634616889991e-06}, {"id": 62, "seek": 36016, "start": 376.64000000000004, "end": 385.92, "text": " copy uh so this is not ideal uh and i thought about how i might address this uh and make it better", "tokens": [5055, 2232, 370, 341, 307, 406, 7157, 2232, 293, 741, 1194, 466, 577, 741, 1062, 2985, 341, 2232, 293, 652, 309, 1101], "temperature": 0.0, "avg_logprob": -0.07578471063197344, "compression_ratio": 1.7444933920704846, "no_speech_prob": 9.222634616889991e-06}, {"id": 63, "seek": 38592, "start": 385.92, "end": 391.6, "text": " and i remembered um something that i learned about a couple months ago it's called semi hosting", "tokens": [293, 741, 13745, 1105, 746, 300, 741, 3264, 466, 257, 1916, 2493, 2057, 309, 311, 1219, 12909, 16058], "temperature": 0.0, "avg_logprob": -0.09231363932291667, "compression_ratio": 1.842911877394636, "no_speech_prob": 6.048763225408038e-06}, {"id": 64, "seek": 38592, "start": 392.40000000000003, "end": 396.96000000000004, "text": " and the basic idea of semi hosting is that you attach a debugger in my case it's over jtag", "tokens": [293, 264, 3875, 1558, 295, 12909, 16058, 307, 300, 291, 5085, 257, 24083, 1321, 294, 452, 1389, 309, 311, 670, 361, 25030], "temperature": 0.0, "avg_logprob": -0.09231363932291667, "compression_ratio": 1.842911877394636, "no_speech_prob": 6.048763225408038e-06}, {"id": 65, "seek": 38592, "start": 397.52000000000004, "end": 402.48, "text": " and uh your code is going to execute a special breakpoint instruction and when your debugger", "tokens": [293, 2232, 428, 3089, 307, 516, 281, 14483, 257, 2121, 1821, 6053, 10951, 293, 562, 428, 24083, 1321], "temperature": 0.0, "avg_logprob": -0.09231363932291667, "compression_ratio": 1.842911877394636, "no_speech_prob": 6.048763225408038e-06}, {"id": 66, "seek": 38592, "start": 402.48, "end": 409.20000000000005, "text": " sees this it will read out there on opcode in r0 and an argument in r1 and it will do something for", "tokens": [8194, 341, 309, 486, 1401, 484, 456, 322, 999, 22332, 294, 367, 15, 293, 364, 6770, 294, 367, 16, 293, 309, 486, 360, 746, 337], "temperature": 0.0, "avg_logprob": -0.09231363932291667, "compression_ratio": 1.842911877394636, "no_speech_prob": 6.048763225408038e-06}, {"id": 67, "seek": 38592, "start": 409.20000000000005, "end": 415.68, "text": " you and then it will give you a return code back in r0 and this is very very similar to how sys calls", "tokens": [291, 293, 550, 309, 486, 976, 291, 257, 2736, 3089, 646, 294, 367, 15, 293, 341, 307, 588, 588, 2531, 281, 577, 262, 749, 5498], "temperature": 0.0, "avg_logprob": -0.09231363932291667, "compression_ratio": 1.842911877394636, "no_speech_prob": 6.048763225408038e-06}, {"id": 68, "seek": 41568, "start": 415.68, "end": 420.96, "text": " work because your program will execute a special instruction the operating system will read out", "tokens": [589, 570, 428, 1461, 486, 14483, 257, 2121, 10951, 264, 7447, 1185, 486, 1401, 484], "temperature": 0.0, "avg_logprob": -0.06359508999607019, "compression_ratio": 1.8333333333333333, "no_speech_prob": 1.0129676411452238e-05}, {"id": 69, "seek": 41568, "start": 420.96, "end": 427.92, "text": " your registers it will do something for you and give you a return code so what do you get well", "tokens": [428, 38351, 309, 486, 360, 746, 337, 291, 293, 976, 291, 257, 2736, 3089, 370, 437, 360, 291, 483, 731], "temperature": 0.0, "avg_logprob": -0.06359508999607019, "compression_ratio": 1.8333333333333333, "no_speech_prob": 1.0129676411452238e-05}, {"id": 70, "seek": 41568, "start": 427.92, "end": 434.4, "text": " the thing that i wanted most is serial because i didn't have any so first i looked at some of the", "tokens": [264, 551, 300, 741, 1415, 881, 307, 17436, 570, 741, 994, 380, 362, 604, 370, 700, 741, 2956, 412, 512, 295, 264], "temperature": 0.0, "avg_logprob": -0.06359508999607019, "compression_ratio": 1.8333333333333333, "no_speech_prob": 1.0129676411452238e-05}, {"id": 71, "seek": 41568, "start": 434.4, "end": 440.48, "text": " sys write c and sys write c is basically put char uh you uh so we can implement put s here", "tokens": [262, 749, 2464, 269, 293, 262, 749, 2464, 269, 307, 1936, 829, 1290, 2232, 291, 2232, 370, 321, 393, 4445, 829, 262, 510], "temperature": 0.0, "avg_logprob": -0.06359508999607019, "compression_ratio": 1.8333333333333333, "no_speech_prob": 1.0129676411452238e-05}, {"id": 72, "seek": 41568, "start": 441.12, "end": 444.8, "text": " and so we're going to take in a string and we're going to loop over all the characters in the", "tokens": [293, 370, 321, 434, 516, 281, 747, 294, 257, 6798, 293, 321, 434, 516, 281, 6367, 670, 439, 264, 4342, 294, 264], "temperature": 0.0, "avg_logprob": -0.06359508999607019, "compression_ratio": 1.8333333333333333, "no_speech_prob": 1.0129676411452238e-05}, {"id": 73, "seek": 44480, "start": 444.8, "end": 450.40000000000003, "text": " string and for each character we're going to trap or execute our breakpoint instruction", "tokens": [6798, 293, 337, 1184, 2517, 321, 434, 516, 281, 11487, 420, 14483, 527, 1821, 6053, 10951], "temperature": 0.0, "avg_logprob": -0.049143998019666554, "compression_ratio": 1.8383838383838385, "no_speech_prob": 1.0451279194967356e-05}, {"id": 74, "seek": 44480, "start": 450.40000000000003, "end": 455.28000000000003, "text": " and we're going to pass for our opcode the write c and we're also going to pass a pointer to the", "tokens": [293, 321, 434, 516, 281, 1320, 337, 527, 999, 22332, 264, 2464, 269, 293, 321, 434, 611, 516, 281, 1320, 257, 23918, 281, 264], "temperature": 0.0, "avg_logprob": -0.049143998019666554, "compression_ratio": 1.8383838383838385, "no_speech_prob": 1.0451279194967356e-05}, {"id": 75, "seek": 44480, "start": 455.28000000000003, "end": 462.56, "text": " character uh and if you may know that put char actually just takes the character um and so this", "tokens": [2517, 2232, 293, 498, 291, 815, 458, 300, 829, 1290, 767, 445, 2516, 264, 2517, 1105, 293, 370, 341], "temperature": 0.0, "avg_logprob": -0.049143998019666554, "compression_ratio": 1.8383838383838385, "no_speech_prob": 1.0451279194967356e-05}, {"id": 76, "seek": 44480, "start": 462.56, "end": 468.48, "text": " is kind of an unfortunate uh performance implication because we have one breakpoint", "tokens": [307, 733, 295, 364, 17843, 2232, 3389, 37814, 570, 321, 362, 472, 1821, 6053], "temperature": 0.0, "avg_logprob": -0.049143998019666554, "compression_ratio": 1.8383838383838385, "no_speech_prob": 1.0451279194967356e-05}, {"id": 77, "seek": 46848, "start": 468.48, "end": 475.04, "text": " and one memory access per character in the string and for j tag this is not very performant", "tokens": [293, 472, 4675, 2105, 680, 2517, 294, 264, 6798, 293, 337, 361, 6162, 341, 307, 406, 588, 2042, 394], "temperature": 0.0, "avg_logprob": -0.1223192328498477, "compression_ratio": 1.6445497630331753, "no_speech_prob": 8.26752875582315e-06}, {"id": 78, "seek": 46848, "start": 476.32, "end": 482.64000000000004, "text": " if you've ever used a 300 bod modem you know that's very slow this is even slower so this is", "tokens": [498, 291, 600, 1562, 1143, 257, 6641, 16737, 1072, 443, 291, 458, 300, 311, 588, 2964, 341, 307, 754, 14009, 370, 341, 307], "temperature": 0.0, "avg_logprob": -0.1223192328498477, "compression_ratio": 1.6445497630331753, "no_speech_prob": 8.26752875582315e-06}, {"id": 79, "seek": 46848, "start": 482.64000000000004, "end": 487.6, "text": " really not useful if you actually want to use your serial output so we can do better though", "tokens": [534, 406, 4420, 498, 291, 767, 528, 281, 764, 428, 17436, 5598, 370, 321, 393, 360, 1101, 1673], "temperature": 0.0, "avg_logprob": -0.1223192328498477, "compression_ratio": 1.6445497630331753, "no_speech_prob": 8.26752875582315e-06}, {"id": 80, "seek": 46848, "start": 488.32, "end": 491.6, "text": " they also have something called sys write zero this is basically put s", "tokens": [436, 611, 362, 746, 1219, 262, 749, 2464, 4018, 341, 307, 1936, 829, 262], "temperature": 0.0, "avg_logprob": -0.1223192328498477, "compression_ratio": 1.6445497630331753, "no_speech_prob": 8.26752875582315e-06}, {"id": 81, "seek": 49160, "start": 491.6, "end": 498.32000000000005, "text": " so uh our pit of implementation gets very simple uh we're just going to trap with write zero", "tokens": [370, 2232, 527, 10147, 295, 11420, 2170, 588, 2199, 2232, 321, 434, 445, 516, 281, 11487, 365, 2464, 4018], "temperature": 0.0, "avg_logprob": -0.09595400094985962, "compression_ratio": 1.903361344537815, "no_speech_prob": 2.1567743715422694e-06}, {"id": 82, "seek": 49160, "start": 499.12, "end": 504.96000000000004, "text": " and now we get one breakpoint per string uh but we still have to do one memory access per character", "tokens": [293, 586, 321, 483, 472, 1821, 6053, 680, 6798, 2232, 457, 321, 920, 362, 281, 360, 472, 4675, 2105, 680, 2517], "temperature": 0.0, "avg_logprob": -0.09595400094985962, "compression_ratio": 1.903361344537815, "no_speech_prob": 2.1567743715422694e-06}, {"id": 83, "seek": 49160, "start": 504.96000000000004, "end": 509.6, "text": " and the problem is that we don't want to read off the end of the string we have to make sure", "tokens": [293, 264, 1154, 307, 300, 321, 500, 380, 528, 281, 1401, 766, 264, 917, 295, 264, 6798, 321, 362, 281, 652, 988], "temperature": 0.0, "avg_logprob": -0.09595400094985962, "compression_ratio": 1.903361344537815, "no_speech_prob": 2.1567743715422694e-06}, {"id": 84, "seek": 49160, "start": 509.6, "end": 513.36, "text": " that we don't go past the null terminator so the debugger has to read a character", "tokens": [300, 321, 500, 380, 352, 1791, 264, 18184, 10761, 1639, 370, 264, 24083, 1321, 575, 281, 1401, 257, 2517], "temperature": 0.0, "avg_logprob": -0.09595400094985962, "compression_ratio": 1.903361344537815, "no_speech_prob": 2.1567743715422694e-06}, {"id": 85, "seek": 49160, "start": 514.0, "end": 517.84, "text": " and then see it was at the null terminator and if it's not you read another character", "tokens": [293, 550, 536, 309, 390, 412, 264, 18184, 10761, 1639, 293, 498, 309, 311, 406, 291, 1401, 1071, 2517], "temperature": 0.0, "avg_logprob": -0.09595400094985962, "compression_ratio": 1.903361344537815, "no_speech_prob": 2.1567743715422694e-06}, {"id": 86, "seek": 51784, "start": 517.84, "end": 523.12, "text": " and you keep doing this uh and we really don't want to go off the end uh but the problem is that", "tokens": [293, 291, 1066, 884, 341, 2232, 293, 321, 534, 500, 380, 528, 281, 352, 766, 264, 917, 2232, 457, 264, 1154, 307, 300], "temperature": 0.0, "avg_logprob": -0.04296804447563327, "compression_ratio": 1.6991150442477876, "no_speech_prob": 3.966863459936576e-06}, {"id": 87, "seek": 51784, "start": 523.12, "end": 529.52, "text": " for j tag setting up a read is a pretty intensive process um there's a lot of overhead and it can", "tokens": [337, 361, 6162, 3287, 493, 257, 1401, 307, 257, 1238, 18957, 1399, 1105, 456, 311, 257, 688, 295, 19922, 293, 309, 393], "temperature": 0.0, "avg_logprob": -0.04296804447563327, "compression_ratio": 1.6991150442477876, "no_speech_prob": 3.966863459936576e-06}, {"id": 88, "seek": 51784, "start": 529.52, "end": 536.8000000000001, "text": " be still pretty slow so this is faster uh about 10 times as fast but it's still slow uh really", "tokens": [312, 920, 1238, 2964, 370, 341, 307, 4663, 2232, 466, 1266, 1413, 382, 2370, 457, 309, 311, 920, 2964, 2232, 534], "temperature": 0.0, "avg_logprob": -0.04296804447563327, "compression_ratio": 1.6991150442477876, "no_speech_prob": 3.966863459936576e-06}, {"id": 89, "seek": 51784, "start": 536.8000000000001, "end": 543.44, "text": " not usable but we can do even better um so we're going to use sys write which is basically the", "tokens": [406, 29975, 457, 321, 393, 360, 754, 1101, 1105, 370, 321, 434, 516, 281, 764, 262, 749, 2464, 597, 307, 1936, 264], "temperature": 0.0, "avg_logprob": -0.04296804447563327, "compression_ratio": 1.6991150442477876, "no_speech_prob": 3.966863459936576e-06}, {"id": 90, "seek": 54344, "start": 543.44, "end": 549.36, "text": " write system call and for this one because we have multiple parameters uh the previous ones", "tokens": [2464, 1185, 818, 293, 337, 341, 472, 570, 321, 362, 3866, 9834, 2232, 264, 3894, 2306], "temperature": 0.0, "avg_logprob": -0.04161775434339369, "compression_ratio": 2.1402714932126696, "no_speech_prob": 9.817865247896407e-06}, {"id": 91, "seek": 54344, "start": 549.36, "end": 553.5200000000001, "text": " only had one parameter so it just goes in the argument but for this one we're going to fill", "tokens": [787, 632, 472, 13075, 370, 309, 445, 1709, 294, 264, 6770, 457, 337, 341, 472, 321, 434, 516, 281, 2836], "temperature": 0.0, "avg_logprob": -0.04161775434339369, "compression_ratio": 2.1402714932126696, "no_speech_prob": 9.817865247896407e-06}, {"id": 92, "seek": 54344, "start": 553.5200000000001, "end": 558.72, "text": " in our arguments inside of a struct and we're going to take the file descriptor and the buffer", "tokens": [294, 527, 12869, 1854, 295, 257, 6594, 293, 321, 434, 516, 281, 747, 264, 3991, 31280, 284, 293, 264, 21762], "temperature": 0.0, "avg_logprob": -0.04161775434339369, "compression_ratio": 2.1402714932126696, "no_speech_prob": 9.817865247896407e-06}, {"id": 93, "seek": 54344, "start": 558.72, "end": 564.32, "text": " and the length of the buffer and we're going to fill this in with standard out and uh there are", "tokens": [293, 264, 4641, 295, 264, 21762, 293, 321, 434, 516, 281, 2836, 341, 294, 365, 3832, 484, 293, 2232, 456, 366], "temperature": 0.0, "avg_logprob": -0.04161775434339369, "compression_ratio": 2.1402714932126696, "no_speech_prob": 9.817865247896407e-06}, {"id": 94, "seek": 54344, "start": 564.32, "end": 569.6, "text": " string and the length of our string and then we're going to trap and we're going to pass a pointer", "tokens": [6798, 293, 264, 4641, 295, 527, 6798, 293, 550, 321, 434, 516, 281, 11487, 293, 321, 434, 516, 281, 1320, 257, 23918], "temperature": 0.0, "avg_logprob": -0.04161775434339369, "compression_ratio": 2.1402714932126696, "no_speech_prob": 9.817865247896407e-06}, {"id": 95, "seek": 56960, "start": 569.6, "end": 576.72, "text": " to our struct and this is generally how we pass multiple arguments um to semi-hosting because", "tokens": [281, 527, 6594, 293, 341, 307, 5101, 577, 321, 1320, 3866, 12869, 1105, 281, 12909, 12, 6037, 278, 570], "temperature": 0.0, "avg_logprob": -0.058067507214016385, "compression_ratio": 1.740909090909091, "no_speech_prob": 2.1907549125899095e-06}, {"id": 96, "seek": 56960, "start": 576.72, "end": 582.5600000000001, "text": " there's only one argument register so they will take a pointer to the struct and so now we get", "tokens": [456, 311, 787, 472, 6770, 7280, 370, 436, 486, 747, 257, 23918, 281, 264, 6594, 293, 370, 586, 321, 483], "temperature": 0.0, "avg_logprob": -0.058067507214016385, "compression_ratio": 1.740909090909091, "no_speech_prob": 2.1907549125899095e-06}, {"id": 97, "seek": 56960, "start": 582.5600000000001, "end": 589.12, "text": " one breakpoint per string and two memory accesses per string and this is reasonably fast we can do", "tokens": [472, 1821, 6053, 680, 6798, 293, 732, 4675, 2105, 279, 680, 6798, 293, 341, 307, 23551, 2370, 321, 393, 360], "temperature": 0.0, "avg_logprob": -0.058067507214016385, "compression_ratio": 1.740909090909091, "no_speech_prob": 2.1907549125899095e-06}, {"id": 98, "seek": 56960, "start": 589.12, "end": 595.2, "text": " stuff with this and it's not glacially slow um so this is the kind of implementation I ended up", "tokens": [1507, 365, 341, 293, 309, 311, 406, 29700, 2270, 2964, 1105, 370, 341, 307, 264, 733, 295, 11420, 286, 4590, 493], "temperature": 0.0, "avg_logprob": -0.058067507214016385, "compression_ratio": 1.740909090909091, "no_speech_prob": 2.1907549125899095e-06}, {"id": 99, "seek": 59520, "start": 595.2, "end": 600.1600000000001, "text": " using it uh and if you've been paying attention you'll note that sys write kind of implies the", "tokens": [1228, 309, 2232, 293, 498, 291, 600, 668, 6229, 3202, 291, 603, 3637, 300, 262, 749, 2464, 733, 295, 18779, 264], "temperature": 0.0, "avg_logprob": -0.051299819239863646, "compression_ratio": 1.8395061728395061, "no_speech_prob": 9.36814922170015e-06}, {"id": 100, "seek": 59520, "start": 600.1600000000001, "end": 607.36, "text": " existence of sys open and you can open any file on your host system which is pretty convenient", "tokens": [9123, 295, 262, 749, 1269, 293, 291, 393, 1269, 604, 3991, 322, 428, 3975, 1185, 597, 307, 1238, 10851], "temperature": 0.0, "avg_logprob": -0.051299819239863646, "compression_ratio": 1.8395061728395061, "no_speech_prob": 9.36814922170015e-06}, {"id": 101, "seek": 59520, "start": 608.24, "end": 612.0, "text": " and you can do all the standard stuff like seeking it and reading it", "tokens": [293, 291, 393, 360, 439, 264, 3832, 1507, 411, 11670, 309, 293, 3760, 309], "temperature": 0.0, "avg_logprob": -0.051299819239863646, "compression_ratio": 1.8395061728395061, "no_speech_prob": 9.36814922170015e-06}, {"id": 102, "seek": 59520, "start": 612.0, "end": 618.1600000000001, "text": " and closing it uh we don't get stat but we do get the file length which is mostly what we want", "tokens": [293, 10377, 309, 2232, 321, 500, 380, 483, 2219, 457, 321, 360, 483, 264, 3991, 4641, 597, 307, 5240, 437, 321, 528], "temperature": 0.0, "avg_logprob": -0.051299819239863646, "compression_ratio": 1.8395061728395061, "no_speech_prob": 9.36814922170015e-06}, {"id": 103, "seek": 59520, "start": 618.1600000000001, "end": 622.32, "text": " because usually we just want to open it find out how long it is and then read the whole thing", "tokens": [570, 2673, 321, 445, 528, 281, 1269, 309, 915, 484, 577, 938, 309, 307, 293, 550, 1401, 264, 1379, 551], "temperature": 0.0, "avg_logprob": -0.051299819239863646, "compression_ratio": 1.8395061728395061, "no_speech_prob": 9.36814922170015e-06}, {"id": 104, "seek": 62232, "start": 622.32, "end": 629.6800000000001, "text": " uh so in uboot you may classically do something like this if you want to load your linux and", "tokens": [2232, 370, 294, 344, 1763, 310, 291, 815, 1508, 984, 360, 746, 411, 341, 498, 291, 528, 281, 3677, 428, 22896, 2449, 293], "temperature": 0.0, "avg_logprob": -0.10768983821676235, "compression_ratio": 1.8606965174129353, "no_speech_prob": 1.2606644304469228e-05}, {"id": 105, "seek": 62232, "start": 629.6800000000001, "end": 634.0, "text": " then boot it you're going to load it from mmc0 add a particular address uh and then you're", "tokens": [550, 11450, 309, 291, 434, 516, 281, 3677, 309, 490, 275, 76, 66, 15, 909, 257, 1729, 2985, 2232, 293, 550, 291, 434], "temperature": 0.0, "avg_logprob": -0.10768983821676235, "compression_ratio": 1.8606965174129353, "no_speech_prob": 1.2606644304469228e-05}, {"id": 106, "seek": 62232, "start": 634.0, "end": 640.32, "text": " going to give your file name and then you'll boot it uh and so we can replace this with load host fs", "tokens": [516, 281, 976, 428, 3991, 1315, 293, 550, 291, 603, 11450, 309, 2232, 293, 370, 321, 393, 7406, 341, 365, 3677, 3975, 283, 82], "temperature": 0.0, "avg_logprob": -0.10768983821676235, "compression_ratio": 1.8606965174129353, "no_speech_prob": 1.2606644304469228e-05}, {"id": 107, "seek": 62232, "start": 640.32, "end": 648.48, "text": " which is the something on your host debugger file system uh and that linux image will get", "tokens": [597, 307, 264, 746, 322, 428, 3975, 24083, 1321, 3991, 1185, 2232, 293, 300, 22896, 2449, 3256, 486, 483], "temperature": 0.0, "avg_logprob": -0.10768983821676235, "compression_ratio": 1.8606965174129353, "no_speech_prob": 1.2606644304469228e-05}, {"id": 108, "seek": 64848, "start": 648.48, "end": 654.24, "text": " read from the directory that you're running your debugger from um and it it's the same structure", "tokens": [1401, 490, 264, 21120, 300, 291, 434, 2614, 428, 24083, 1321, 490, 1105, 293, 309, 309, 311, 264, 912, 3877], "temperature": 0.0, "avg_logprob": -0.06986988858973726, "compression_ratio": 1.799043062200957, "no_speech_prob": 8.664276720082853e-06}, {"id": 109, "seek": 64848, "start": 654.24, "end": 662.0, "text": " because under the hood it's using the same api and there's a dash because there's only one host fs", "tokens": [570, 833, 264, 13376, 309, 311, 1228, 264, 912, 1882, 72, 293, 456, 311, 257, 8240, 570, 456, 311, 787, 472, 3975, 283, 82], "temperature": 0.0, "avg_logprob": -0.06986988858973726, "compression_ratio": 1.799043062200957, "no_speech_prob": 8.664276720082853e-06}, {"id": 110, "seek": 64848, "start": 662.0, "end": 668.8000000000001, "text": " and we don't need to have multiple debugger support uh and there's a special file called", "tokens": [293, 321, 500, 380, 643, 281, 362, 3866, 24083, 1321, 1406, 2232, 293, 456, 311, 257, 2121, 3991, 1219], "temperature": 0.0, "avg_logprob": -0.06986988858973726, "compression_ratio": 1.799043062200957, "no_speech_prob": 8.664276720082853e-06}, {"id": 111, "seek": 64848, "start": 668.8000000000001, "end": 673.76, "text": " colon tt uh which i think stands for teletype and this is your standard in and standard out", "tokens": [8255, 256, 83, 2232, 597, 741, 519, 7382, 337, 15284, 2210, 494, 293, 341, 307, 428, 3832, 294, 293, 3832, 484], "temperature": 0.0, "avg_logprob": -0.06986988858973726, "compression_ratio": 1.799043062200957, "no_speech_prob": 8.664276720082853e-06}, {"id": 112, "seek": 67376, "start": 673.76, "end": 679.28, "text": " and almost everybody uses this uh except q mu because q mu doesn't have this huge overhead", "tokens": [293, 1920, 2201, 4960, 341, 2232, 3993, 9505, 2992, 570, 9505, 2992, 1177, 380, 362, 341, 2603, 19922], "temperature": 0.0, "avg_logprob": -0.07978503439161512, "compression_ratio": 1.7013574660633484, "no_speech_prob": 9.972631232813e-06}, {"id": 113, "seek": 67376, "start": 679.28, "end": 685.6, "text": " for memory accesses so they don't actually care uh if you can use your console with uh read and write", "tokens": [337, 4675, 2105, 279, 370, 436, 500, 380, 767, 1127, 2232, 498, 291, 393, 764, 428, 11076, 365, 2232, 1401, 293, 2464], "temperature": 0.0, "avg_logprob": -0.07978503439161512, "compression_ratio": 1.7013574660633484, "no_speech_prob": 9.972631232813e-06}, {"id": 114, "seek": 67376, "start": 685.6, "end": 694.72, "text": " and so you just use uh write zero with them and it's works uh so one classic problem with", "tokens": [293, 370, 291, 445, 764, 2232, 2464, 4018, 365, 552, 293, 309, 311, 1985, 2232, 370, 472, 7230, 1154, 365], "temperature": 0.0, "avg_logprob": -0.07978503439161512, "compression_ratio": 1.7013574660633484, "no_speech_prob": 9.972631232813e-06}, {"id": 115, "seek": 67376, "start": 694.72, "end": 700.56, "text": " booting with j tag is that your regular boot process is going to look something like load spl", "tokens": [11450, 278, 365, 361, 6162, 307, 300, 428, 3890, 11450, 1399, 307, 516, 281, 574, 746, 411, 3677, 637, 75], "temperature": 0.0, "avg_logprob": -0.07978503439161512, "compression_ratio": 1.7013574660633484, "no_speech_prob": 9.972631232813e-06}, {"id": 116, "seek": 70056, "start": 700.56, "end": 706.2399999999999, "text": " and spl is going to initialize d ram and then spl is going to load regular u boot into d ram", "tokens": [293, 637, 75, 307, 516, 281, 5883, 1125, 274, 10211, 293, 550, 637, 75, 307, 516, 281, 3677, 3890, 344, 11450, 666, 274, 10211], "temperature": 0.0, "avg_logprob": -0.06924251481598499, "compression_ratio": 2.1136363636363638, "no_speech_prob": 2.2827049178886227e-05}, {"id": 117, "seek": 70056, "start": 706.2399999999999, "end": 712.56, "text": " and execute it and when you do this with j tag instead you have to load spl over j tag and j", "tokens": [293, 14483, 309, 293, 562, 291, 360, 341, 365, 361, 6162, 2602, 291, 362, 281, 3677, 637, 75, 670, 361, 6162, 293, 361], "temperature": 0.0, "avg_logprob": -0.06924251481598499, "compression_ratio": 2.1136363636363638, "no_speech_prob": 2.2827049178886227e-05}, {"id": 118, "seek": 70056, "start": 712.56, "end": 720.88, "text": " tag is going to run and initialize d ram and sometime you have to uh load u boot into j you", "tokens": [6162, 307, 516, 281, 1190, 293, 5883, 1125, 274, 10211, 293, 15053, 291, 362, 281, 2232, 3677, 344, 11450, 666, 361, 291], "temperature": 0.0, "avg_logprob": -0.06924251481598499, "compression_ratio": 2.1136363636363638, "no_speech_prob": 2.2827049178886227e-05}, {"id": 119, "seek": 70056, "start": 720.88, "end": 727.3599999999999, "text": " load u boot into d ram over j tag but we don't really know when um and so a really classic way", "tokens": [3677, 344, 11450, 666, 274, 10211, 670, 361, 6162, 457, 321, 500, 380, 534, 458, 562, 1105, 293, 370, 257, 534, 7230, 636], "temperature": 0.0, "avg_logprob": -0.06924251481598499, "compression_ratio": 2.1136363636363638, "no_speech_prob": 2.2827049178886227e-05}, {"id": 120, "seek": 72736, "start": 727.36, "end": 735.52, "text": " to do this is uh you just pick a time and you wait that long and then you load u boot but this", "tokens": [281, 360, 341, 307, 2232, 291, 445, 1888, 257, 565, 293, 291, 1699, 300, 938, 293, 550, 291, 3677, 344, 11450, 457, 341], "temperature": 0.0, "avg_logprob": -0.046816764621559634, "compression_ratio": 1.8983739837398375, "no_speech_prob": 7.296060175576713e-06}, {"id": 121, "seek": 72736, "start": 735.52, "end": 740.96, "text": " is kind of awful because if you have any kind of variance in how long d ram initialization takes or", "tokens": [307, 733, 295, 11232, 570, 498, 291, 362, 604, 733, 295, 21977, 294, 577, 938, 274, 10211, 5883, 2144, 2516, 420], "temperature": 0.0, "avg_logprob": -0.046816764621559634, "compression_ratio": 1.8983739837398375, "no_speech_prob": 7.296060175576713e-06}, {"id": 122, "seek": 72736, "start": 740.96, "end": 745.6, "text": " how long it takes especially if you're doing other hardware initialization um you have to", "tokens": [577, 938, 309, 2516, 2318, 498, 291, 434, 884, 661, 8837, 5883, 2144, 1105, 291, 362, 281], "temperature": 0.0, "avg_logprob": -0.046816764621559634, "compression_ratio": 1.8983739837398375, "no_speech_prob": 7.296060175576713e-06}, {"id": 123, "seek": 72736, "start": 745.6, "end": 750.64, "text": " just wait a lot longer and in the average case you're going to be doing nothing and this can", "tokens": [445, 1699, 257, 688, 2854, 293, 294, 264, 4274, 1389, 291, 434, 516, 281, 312, 884, 1825, 293, 341, 393], "temperature": 0.0, "avg_logprob": -0.046816764621559634, "compression_ratio": 1.8983739837398375, "no_speech_prob": 7.296060175576713e-06}, {"id": 124, "seek": 72736, "start": 750.64, "end": 754.72, "text": " really drive you nuts as a developer because you might be waiting like 20 seconds because", "tokens": [534, 3332, 291, 10483, 382, 257, 10754, 570, 291, 1062, 312, 3806, 411, 945, 3949, 570], "temperature": 0.0, "avg_logprob": -0.046816764621559634, "compression_ratio": 1.8983739837398375, "no_speech_prob": 7.296060175576713e-06}, {"id": 125, "seek": 75472, "start": 754.72, "end": 761.12, "text": " sometimes it takes 20 seconds but most of the time it doesn't um so you can also reimplement", "tokens": [2171, 309, 2516, 945, 3949, 457, 881, 295, 264, 565, 309, 1177, 380, 1105, 370, 291, 393, 611, 33433, 43704], "temperature": 0.0, "avg_logprob": -0.09264234134129115, "compression_ratio": 1.7127659574468086, "no_speech_prob": 3.5007813039555913e-06}, {"id": 126, "seek": 75472, "start": 761.12, "end": 768.8000000000001, "text": " d ram in tickle and uh this is a really common thing for vendors to do because they love just", "tokens": [274, 10211, 294, 5204, 306, 293, 2232, 341, 307, 257, 534, 2689, 551, 337, 22056, 281, 360, 570, 436, 959, 445], "temperature": 0.0, "avg_logprob": -0.09264234134129115, "compression_ratio": 1.7127659574468086, "no_speech_prob": 3.5007813039555913e-06}, {"id": 127, "seek": 75472, "start": 768.8000000000001, "end": 772.72, "text": " you know it's it's very simple for them they just write all the registers and it happens over j tag", "tokens": [291, 458, 309, 311, 309, 311, 588, 2199, 337, 552, 436, 445, 2464, 439, 264, 38351, 293, 309, 2314, 670, 361, 6162], "temperature": 0.0, "avg_logprob": -0.09264234134129115, "compression_ratio": 1.7127659574468086, "no_speech_prob": 3.5007813039555913e-06}, {"id": 128, "seek": 75472, "start": 773.6800000000001, "end": 778.0, "text": " and this avoids the whole timing problem because we know exactly when d ram has vision is sliced", "tokens": [293, 341, 3641, 3742, 264, 1379, 10822, 1154, 570, 321, 458, 2293, 562, 274, 10211, 575, 5201, 307, 27098], "temperature": 0.0, "avg_logprob": -0.09264234134129115, "compression_ratio": 1.7127659574468086, "no_speech_prob": 3.5007813039555913e-06}, {"id": 129, "seek": 75472, "start": 779.28, "end": 783.44, "text": " but it's a totally different process from normal you have to specify your parameters in a different", "tokens": [457, 309, 311, 257, 3879, 819, 1399, 490, 2710, 291, 362, 281, 16500, 428, 9834, 294, 257, 819], "temperature": 0.0, "avg_logprob": -0.09264234134129115, "compression_ratio": 1.7127659574468086, "no_speech_prob": 3.5007813039555913e-06}, {"id": 130, "seek": 78344, "start": 783.44, "end": 789.0400000000001, "text": " format in a different language it's not going to be tested as much and it probably won't initialize", "tokens": [7877, 294, 257, 819, 2856, 309, 311, 406, 516, 281, 312, 8246, 382, 709, 293, 309, 1391, 1582, 380, 5883, 1125], "temperature": 0.0, "avg_logprob": -0.08181625034498131, "compression_ratio": 1.748091603053435, "no_speech_prob": 7.1830841079645324e-06}, {"id": 131, "seek": 78344, "start": 789.0400000000001, "end": 795.44, "text": " things in the same way so it's it can be more buggy um and it's kind of uh worrisome especially", "tokens": [721, 294, 264, 912, 636, 370, 309, 311, 309, 393, 312, 544, 7426, 1480, 1105, 293, 309, 311, 733, 295, 2232, 469, 5714, 423, 2318], "temperature": 0.0, "avg_logprob": -0.08181625034498131, "compression_ratio": 1.748091603053435, "no_speech_prob": 7.1830841079645324e-06}, {"id": 132, "seek": 78344, "start": 795.44, "end": 800.48, "text": " when you have to uh your regular u boot will work fine and maybe this doesn't work so well", "tokens": [562, 291, 362, 281, 2232, 428, 3890, 344, 11450, 486, 589, 2489, 293, 1310, 341, 1177, 380, 589, 370, 731], "temperature": 0.0, "avg_logprob": -0.08181625034498131, "compression_ratio": 1.748091603053435, "no_speech_prob": 7.1830841079645324e-06}, {"id": 133, "seek": 78344, "start": 801.36, "end": 808.32, "text": " but semi hosting makes this really simple because spl can load and then it will over j tag", "tokens": [457, 12909, 16058, 1669, 341, 534, 2199, 570, 637, 75, 393, 3677, 293, 550, 309, 486, 670, 361, 6162], "temperature": 0.0, "avg_logprob": -0.08181625034498131, "compression_ratio": 1.748091603053435, "no_speech_prob": 7.1830841079645324e-06}, {"id": 134, "seek": 78344, "start": 808.32, "end": 812.1600000000001, "text": " and initialize d ram and it says to your host please load u boot at this address", "tokens": [293, 5883, 1125, 274, 10211, 293, 309, 1619, 281, 428, 3975, 1767, 3677, 344, 11450, 412, 341, 2985], "temperature": 0.0, "avg_logprob": -0.08181625034498131, "compression_ratio": 1.748091603053435, "no_speech_prob": 7.1830841079645324e-06}, {"id": 135, "seek": 81216, "start": 812.16, "end": 819.28, "text": " and your host will do that and then it continues on its way and it's um extremely simple to use", "tokens": [293, 428, 3975, 486, 360, 300, 293, 550, 309, 6515, 322, 1080, 636, 293, 309, 311, 1105, 4664, 2199, 281, 764], "temperature": 0.0, "avg_logprob": -0.07719073125294276, "compression_ratio": 1.821011673151751, "no_speech_prob": 6.048792783985846e-06}, {"id": 136, "seek": 81216, "start": 819.28, "end": 824.4, "text": " and it solves this whole timing problem which can be very annoying uh so what else do you get", "tokens": [293, 309, 39890, 341, 1379, 10822, 1154, 597, 393, 312, 588, 11304, 2232, 370, 437, 1646, 360, 291, 483], "temperature": 0.0, "avg_logprob": -0.07719073125294276, "compression_ratio": 1.821011673151751, "no_speech_prob": 6.048792783985846e-06}, {"id": 137, "seek": 81216, "start": 825.04, "end": 829.68, "text": " well we get some error handling uh error no is practically essential um to find out why", "tokens": [731, 321, 483, 512, 6713, 13175, 2232, 6713, 572, 307, 15667, 7115, 1105, 281, 915, 484, 983], "temperature": 0.0, "avg_logprob": -0.07719073125294276, "compression_ratio": 1.821011673151751, "no_speech_prob": 6.048792783985846e-06}, {"id": 138, "seek": 81216, "start": 829.68, "end": 835.52, "text": " something failed uh is error is not uh the idea of is errors that you will pass in a return code", "tokens": [746, 7612, 2232, 307, 6713, 307, 406, 2232, 264, 1558, 295, 307, 13603, 300, 291, 486, 1320, 294, 257, 2736, 3089], "temperature": 0.0, "avg_logprob": -0.07719073125294276, "compression_ratio": 1.821011673151751, "no_speech_prob": 6.048792783985846e-06}, {"id": 139, "seek": 81216, "start": 835.52, "end": 840.88, "text": " and is there will tell you if it's an error or not but the problem is that some of these semi", "tokens": [293, 307, 456, 486, 980, 291, 498, 309, 311, 364, 6713, 420, 406, 457, 264, 1154, 307, 300, 512, 295, 613, 12909], "temperature": 0.0, "avg_logprob": -0.07719073125294276, "compression_ratio": 1.821011673151751, "no_speech_prob": 6.048792783985846e-06}, {"id": 140, "seek": 84088, "start": 840.88, "end": 845.92, "text": " hosting commands um have different semantics for the return code and most of the time the", "tokens": [16058, 16901, 1105, 362, 819, 4361, 45298, 337, 264, 2736, 3089, 293, 881, 295, 264, 565, 264], "temperature": 0.0, "avg_logprob": -0.0634139861379351, "compression_ratio": 1.758490566037736, "no_speech_prob": 7.527700745413313e-06}, {"id": 141, "seek": 84088, "start": 845.92, "end": 851.68, "text": " semantic is negative numbers are errors so effectively you're doing this whole big semi", "tokens": [47982, 307, 3671, 3547, 366, 13603, 370, 8659, 291, 434, 884, 341, 1379, 955, 12909], "temperature": 0.0, "avg_logprob": -0.0634139861379351, "compression_ratio": 1.758490566037736, "no_speech_prob": 7.527700745413313e-06}, {"id": 142, "seek": 84088, "start": 851.68, "end": 857.6, "text": " hosting call just to compare to zero um so i don't really know why this is in here and there's", "tokens": [16058, 818, 445, 281, 6794, 281, 4018, 1105, 370, 741, 500, 380, 534, 458, 983, 341, 307, 294, 510, 293, 456, 311], "temperature": 0.0, "avg_logprob": -0.0634139861379351, "compression_ratio": 1.758490566037736, "no_speech_prob": 7.527700745413313e-06}, {"id": 143, "seek": 84088, "start": 857.6, "end": 863.28, "text": " actually several functions that are kind of like that um for example sys uh sys time will get you", "tokens": [767, 2940, 6828, 300, 366, 733, 295, 411, 300, 1105, 337, 1365, 262, 749, 2232, 262, 749, 565, 486, 483, 291], "temperature": 0.0, "avg_logprob": -0.0634139861379351, "compression_ratio": 1.758490566037736, "no_speech_prob": 7.527700745413313e-06}, {"id": 144, "seek": 84088, "start": 863.28, "end": 868.72, "text": " the real time which can be helpful if you're uh if your device doesn't have an rtc or you don't", "tokens": [264, 957, 565, 597, 393, 312, 4961, 498, 291, 434, 2232, 498, 428, 4302, 1177, 380, 362, 364, 367, 83, 66, 420, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.0634139861379351, "compression_ratio": 1.758490566037736, "no_speech_prob": 7.527700745413313e-06}, {"id": 145, "seek": 86872, "start": 868.72, "end": 873.6800000000001, "text": " want to initialize it um but sys elapsed will get the number of ticks that your program has been", "tokens": [528, 281, 5883, 1125, 309, 1105, 457, 262, 749, 806, 2382, 292, 486, 483, 264, 1230, 295, 42475, 300, 428, 1461, 575, 668], "temperature": 0.0, "avg_logprob": -0.050705032833551954, "compression_ratio": 1.7572463768115942, "no_speech_prob": 2.6015673029178288e-06}, {"id": 146, "seek": 86872, "start": 873.6800000000001, "end": 880.4, "text": " running so maybe you would use this for uh benchmarking but the overhead of doing semi hosting is", "tokens": [2614, 370, 1310, 291, 576, 764, 341, 337, 2232, 18927, 278, 457, 264, 19922, 295, 884, 12909, 16058, 307], "temperature": 0.0, "avg_logprob": -0.050705032833551954, "compression_ratio": 1.7572463768115942, "no_speech_prob": 2.6015673029178288e-06}, {"id": 147, "seek": 86872, "start": 881.2, "end": 886.8000000000001, "text": " a lot larger than the the amount of precision that you're going to get so i'm not really sure", "tokens": [257, 688, 4833, 813, 264, 264, 2372, 295, 18356, 300, 291, 434, 516, 281, 483, 370, 741, 478, 406, 534, 988], "temperature": 0.0, "avg_logprob": -0.050705032833551954, "compression_ratio": 1.7572463768115942, "no_speech_prob": 2.6015673029178288e-06}, {"id": 148, "seek": 86872, "start": 886.8000000000001, "end": 892.64, "text": " why you use that one either um there's some libc emulation uh you can pass in a command line you", "tokens": [983, 291, 764, 300, 472, 2139, 1105, 456, 311, 512, 22854, 66, 846, 2776, 2232, 291, 393, 1320, 294, 257, 5622, 1622, 291], "temperature": 0.0, "avg_logprob": -0.050705032833551954, "compression_ratio": 1.7572463768115942, "no_speech_prob": 2.6015673029178288e-06}, {"id": 149, "seek": 86872, "start": 892.64, "end": 896.48, "text": " but we don't really need this because we have the environment and we have the device tree and those", "tokens": [457, 321, 500, 380, 534, 643, 341, 570, 321, 362, 264, 2823, 293, 321, 362, 264, 4302, 4230, 293, 729], "temperature": 0.0, "avg_logprob": -0.050705032833551954, "compression_ratio": 1.7572463768115942, "no_speech_prob": 2.6015673029178288e-06}, {"id": 150, "seek": 89648, "start": 896.48, "end": 901.6, "text": " are kind of classic ways to pass in um parameters but if you're not using uboot and you don't have", "tokens": [366, 733, 295, 7230, 2098, 281, 1320, 294, 1105, 9834, 457, 498, 291, 434, 406, 1228, 344, 1763, 310, 293, 291, 500, 380, 362], "temperature": 0.0, "avg_logprob": -0.09139315287272136, "compression_ratio": 1.8198529411764706, "no_speech_prob": 9.080260497285053e-06}, {"id": 151, "seek": 89648, "start": 901.6, "end": 907.84, "text": " this sort of system set up uh you can get command line parameters pretty easily there's also a sys", "tokens": [341, 1333, 295, 1185, 992, 493, 2232, 291, 393, 483, 5622, 1622, 9834, 1238, 3612, 456, 311, 611, 257, 262, 749], "temperature": 0.0, "avg_logprob": -0.09139315287272136, "compression_ratio": 1.8198529411764706, "no_speech_prob": 9.080260497285053e-06}, {"id": 152, "seek": 89648, "start": 907.84, "end": 913.36, "text": " heap which is where you tell the device where it thinks the heap is and where it should malloc stuff", "tokens": [33591, 597, 307, 689, 291, 980, 264, 4302, 689, 309, 7309, 264, 33591, 307, 293, 689, 309, 820, 16026, 905, 1507], "temperature": 0.0, "avg_logprob": -0.09139315287272136, "compression_ratio": 1.8198529411764706, "no_speech_prob": 9.080260497285053e-06}, {"id": 153, "seek": 89648, "start": 914.16, "end": 918.4, "text": " but usually you know this when you compile you say this address range is going to be or i'm going", "tokens": [457, 2673, 291, 458, 341, 562, 291, 31413, 291, 584, 341, 2985, 3613, 307, 516, 281, 312, 420, 741, 478, 516], "temperature": 0.0, "avg_logprob": -0.09139315287272136, "compression_ratio": 1.8198529411764706, "no_speech_prob": 9.080260497285053e-06}, {"id": 154, "seek": 89648, "start": 918.4, "end": 924.4, "text": " to stick my heap so also i'm not really sure why that's in there um and as you may have noticed uh", "tokens": [281, 2897, 452, 33591, 370, 611, 741, 478, 406, 534, 988, 983, 300, 311, 294, 456, 1105, 293, 382, 291, 815, 362, 5694, 2232], "temperature": 0.0, "avg_logprob": -0.09139315287272136, "compression_ratio": 1.8198529411764706, "no_speech_prob": 9.080260497285053e-06}, {"id": 155, "seek": 92440, "start": 924.4, "end": 931.4399999999999, "text": " you can write files um so of course you can mess things up especially on unix where you can open", "tokens": [291, 393, 2464, 7098, 1105, 370, 295, 1164, 291, 393, 2082, 721, 493, 2318, 322, 517, 970, 689, 291, 393, 1269], "temperature": 0.0, "avg_logprob": -0.046414689814790765, "compression_ratio": 1.7818181818181817, "no_speech_prob": 7.646248377568554e-06}, {"id": 156, "seek": 92440, "start": 931.4399999999999, "end": 936.4, "text": " up a lot of files that aren't really files and do some fun stuff with them but you can also just", "tokens": [493, 257, 688, 295, 7098, 300, 3212, 380, 534, 7098, 293, 360, 512, 1019, 1507, 365, 552, 457, 291, 393, 611, 445], "temperature": 0.0, "avg_logprob": -0.046414689814790765, "compression_ratio": 1.7818181818181817, "no_speech_prob": 7.646248377568554e-06}, {"id": 157, "seek": 92440, "start": 936.4, "end": 942.3199999999999, "text": " run arbitrary commands and you can remove files too um so you have to really trust this stuff that", "tokens": [1190, 23211, 16901, 293, 291, 393, 4159, 7098, 886, 1105, 370, 291, 362, 281, 534, 3361, 341, 1507, 300], "temperature": 0.0, "avg_logprob": -0.046414689814790765, "compression_ratio": 1.7818181818181817, "no_speech_prob": 7.646248377568554e-06}, {"id": 158, "seek": 92440, "start": 942.3199999999999, "end": 947.28, "text": " you're going to run uh because as far as i know no one does sandboxing they just implement all this", "tokens": [291, 434, 516, 281, 1190, 2232, 570, 382, 1400, 382, 741, 458, 572, 472, 775, 42115, 278, 436, 445, 4445, 439, 341], "temperature": 0.0, "avg_logprob": -0.046414689814790765, "compression_ratio": 1.7818181818181817, "no_speech_prob": 7.646248377568554e-06}, {"id": 159, "seek": 94728, "start": 947.28, "end": 955.6, "text": " stuff uh so maybe they shouldn't but that's how it is uh so if you've ever used semi-hosting before", "tokens": [1507, 2232, 370, 1310, 436, 4659, 380, 457, 300, 311, 577, 309, 307, 2232, 370, 498, 291, 600, 1562, 1143, 12909, 12, 6037, 278, 949], "temperature": 0.0, "avg_logprob": -0.047275863844772864, "compression_ratio": 1.9173228346456692, "no_speech_prob": 9.81815901468508e-06}, {"id": 160, "seek": 94728, "start": 955.6, "end": 960.8, "text": " you may be familiar with the this problem uh break points are actually invalid instructions", "tokens": [291, 815, 312, 4963, 365, 264, 341, 1154, 2232, 1821, 2793, 366, 767, 34702, 9415], "temperature": 0.0, "avg_logprob": -0.047275863844772864, "compression_ratio": 1.9173228346456692, "no_speech_prob": 9.81815901468508e-06}, {"id": 161, "seek": 94728, "start": 960.8, "end": 965.36, "text": " and your program will crash unless there is a debugger attached and the debugger will handle it for", "tokens": [293, 428, 1461, 486, 8252, 5969, 456, 307, 257, 24083, 1321, 8570, 293, 264, 24083, 1321, 486, 4813, 309, 337], "temperature": 0.0, "avg_logprob": -0.047275863844772864, "compression_ratio": 1.9173228346456692, "no_speech_prob": 9.81815901468508e-06}, {"id": 162, "seek": 94728, "start": 965.36, "end": 971.52, "text": " you and you won't end up executing it um so typically you would have to have two programs one", "tokens": [291, 293, 291, 1582, 380, 917, 493, 32368, 309, 1105, 370, 5850, 291, 576, 362, 281, 362, 732, 4268, 472], "temperature": 0.0, "avg_logprob": -0.047275863844772864, "compression_ratio": 1.9173228346456692, "no_speech_prob": 9.81815901468508e-06}, {"id": 163, "seek": 94728, "start": 971.52, "end": 976.4, "text": " with semi-hosting enabled and one with semi-hosting not enabled and the one with semi-hosting enabled", "tokens": [365, 12909, 12, 6037, 278, 15172, 293, 472, 365, 12909, 12, 6037, 278, 406, 15172, 293, 264, 472, 365, 12909, 12, 6037, 278, 15172], "temperature": 0.0, "avg_logprob": -0.047275863844772864, "compression_ratio": 1.9173228346456692, "no_speech_prob": 9.81815901468508e-06}, {"id": 164, "seek": 97640, "start": 976.4, "end": 982.8, "text": " you'd have to run with a debugger but we can get around this using a pretty simple trick um this", "tokens": [291, 1116, 362, 281, 1190, 365, 257, 24083, 1321, 457, 321, 393, 483, 926, 341, 1228, 257, 1238, 2199, 4282, 1105, 341], "temperature": 0.0, "avg_logprob": -0.09803861525000596, "compression_ratio": 1.6347826086956523, "no_speech_prob": 5.337940820027143e-06}, {"id": 165, "seek": 97640, "start": 982.8, "end": 988.24, "text": " one is from uh tom verbuer uh and the idea is that in your synchronous support handler", "tokens": [472, 307, 490, 2232, 2916, 9595, 5486, 2232, 293, 264, 1558, 307, 300, 294, 428, 44743, 1406, 41967], "temperature": 0.0, "avg_logprob": -0.09803861525000596, "compression_ratio": 1.6347826086956523, "no_speech_prob": 5.337940820027143e-06}, {"id": 166, "seek": 97640, "start": 990.24, "end": 994.8, "text": " you first check to make sure that we have an invalid instruction and otherwise you panic which", "tokens": [291, 700, 1520, 281, 652, 988, 300, 321, 362, 364, 34702, 10951, 293, 5911, 291, 14783, 597], "temperature": 0.0, "avg_logprob": -0.09803861525000596, "compression_ratio": 1.6347826086956523, "no_speech_prob": 5.337940820027143e-06}, {"id": 167, "seek": 97640, "start": 994.8, "end": 999.92, "text": " you know probably involves printing out the registers or doing something um complaining loudly on", "tokens": [291, 458, 1391, 11626, 14699, 484, 264, 38351, 420, 884, 746, 1105, 20740, 22958, 322], "temperature": 0.0, "avg_logprob": -0.09803861525000596, "compression_ratio": 1.6347826086956523, "no_speech_prob": 5.337940820027143e-06}, {"id": 168, "seek": 99992, "start": 999.92, "end": 1006.4, "text": " the serial which you might not have uh then you would do you we need to check to make sure our", "tokens": [264, 17436, 597, 291, 1062, 406, 362, 2232, 550, 291, 576, 360, 291, 321, 643, 281, 1520, 281, 652, 988, 527], "temperature": 0.0, "avg_logprob": -0.06542723736864456, "compression_ratio": 1.7330316742081449, "no_speech_prob": 2.81291727333155e-06}, {"id": 169, "seek": 99992, "start": 1006.4, "end": 1014.7199999999999, "text": " instruction which is held in elr is the semi-hosting arm 64 halt instruction which is the special", "tokens": [10951, 597, 307, 5167, 294, 806, 81, 307, 264, 12909, 12, 6037, 278, 3726, 12145, 12479, 10951, 597, 307, 264, 2121], "temperature": 0.0, "avg_logprob": -0.06542723736864456, "compression_ratio": 1.7330316742081449, "no_speech_prob": 2.81291727333155e-06}, {"id": 170, "seek": 99992, "start": 1014.7199999999999, "end": 1023.92, "text": " breakpoint um and the lower bits of the pc are actually not the pc on uh arm because they have", "tokens": [1821, 6053, 1105, 293, 264, 3126, 9239, 295, 264, 43451, 366, 767, 406, 264, 43451, 322, 2232, 3726, 570, 436, 362], "temperature": 0.0, "avg_logprob": -0.06542723736864456, "compression_ratio": 1.7330316742081449, "no_speech_prob": 2.81291727333155e-06}, {"id": 171, "seek": 99992, "start": 1023.92, "end": 1028.96, "text": " stuff like are you in thumb mode or not um so we need to mask those off well you could probably", "tokens": [1507, 411, 366, 291, 294, 9298, 4391, 420, 406, 1105, 370, 321, 643, 281, 6094, 729, 766, 731, 291, 727, 1391], "temperature": 0.0, "avg_logprob": -0.06542723736864456, "compression_ratio": 1.7330316742081449, "no_speech_prob": 2.81291727333155e-06}, {"id": 172, "seek": 102896, "start": 1028.96, "end": 1036.16, "text": " just do and uh till the three um and if we actually find out that it was supposed to be a semi-hosting", "tokens": [445, 360, 293, 2232, 4288, 264, 1045, 1105, 293, 498, 321, 767, 915, 484, 300, 309, 390, 3442, 281, 312, 257, 12909, 12, 6037, 278], "temperature": 0.0, "avg_logprob": -0.07864233232894034, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.668792032840429e-06}, {"id": 173, "seek": 102896, "start": 1036.16, "end": 1040.48, "text": " instruction we're going to disable semi-hosting which on your processor can do whatever it wants", "tokens": [10951, 321, 434, 516, 281, 28362, 12909, 12, 6037, 278, 597, 322, 428, 15321, 393, 360, 2035, 309, 2738], "temperature": 0.0, "avg_logprob": -0.07864233232894034, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.668792032840429e-06}, {"id": 174, "seek": 102896, "start": 1040.48, "end": 1044.56, "text": " but on u boot it just sits a global variable that says we don't have semi-hosting don't try it again", "tokens": [457, 322, 344, 11450, 309, 445, 12696, 257, 4338, 7006, 300, 1619, 321, 500, 380, 362, 12909, 12, 6037, 278, 500, 380, 853, 309, 797], "temperature": 0.0, "avg_logprob": -0.07864233232894034, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.668792032840429e-06}, {"id": 175, "seek": 102896, "start": 1045.52, "end": 1049.76, "text": " and then we pretend that we get a failure negative one is almost always a failure", "tokens": [293, 550, 321, 11865, 300, 321, 483, 257, 7763, 3671, 472, 307, 1920, 1009, 257, 7763], "temperature": 0.0, "avg_logprob": -0.07864233232894034, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.668792032840429e-06}, {"id": 176, "seek": 102896, "start": 1050.32, "end": 1053.52, "text": " and then we advance the pc by four bytes", "tokens": [293, 550, 321, 7295, 264, 43451, 538, 1451, 36088], "temperature": 0.0, "avg_logprob": -0.07864233232894034, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.668792032840429e-06}, {"id": 177, "seek": 105352, "start": 1053.52, "end": 1061.04, "text": " so if you want to use semi-hosting in u boot uh you can enable these configs uh the first one", "tokens": [370, 498, 291, 528, 281, 764, 12909, 12, 6037, 278, 294, 344, 11450, 2232, 291, 393, 9528, 613, 6662, 82, 2232, 264, 700, 472], "temperature": 0.0, "avg_logprob": -0.0999248605025442, "compression_ratio": 1.8829268292682926, "no_speech_prob": 1.3006083463551477e-05}, {"id": 178, "seek": 105352, "start": 1061.04, "end": 1068.4, "text": " enables semi-hosting of any kind um and also enables this uh command uh the second one semi-hosting", "tokens": [17077, 12909, 12, 6037, 278, 295, 604, 733, 1105, 293, 611, 17077, 341, 2232, 5622, 2232, 264, 1150, 472, 12909, 12, 6037, 278], "temperature": 0.0, "avg_logprob": -0.0999248605025442, "compression_ratio": 1.8829268292682926, "no_speech_prob": 1.3006083463551477e-05}, {"id": 179, "seek": 105352, "start": 1068.4, "end": 1073.36, "text": " serial will get you some serial input and output and you'll probably want this serial put s uh", "tokens": [17436, 486, 483, 291, 512, 17436, 4846, 293, 5598, 293, 291, 603, 1391, 528, 341, 17436, 829, 262, 2232], "temperature": 0.0, "avg_logprob": -0.0999248605025442, "compression_ratio": 1.8829268292682926, "no_speech_prob": 1.3006083463551477e-05}, {"id": 180, "seek": 105352, "start": 1073.36, "end": 1078.96, "text": " because normally u boot will print a character at a time uh and put s will group those characters", "tokens": [570, 5646, 344, 11450, 486, 4482, 257, 2517, 412, 257, 565, 2232, 293, 829, 262, 486, 1594, 729, 4342], "temperature": 0.0, "avg_logprob": -0.0999248605025442, "compression_ratio": 1.8829268292682926, "no_speech_prob": 1.3006083463551477e-05}, {"id": 181, "seek": 107896, "start": 1078.96, "end": 1084.96, "text": " into strings and print them all at once and if you want to have this thing you will need to enable", "tokens": [666, 13985, 293, 4482, 552, 439, 412, 1564, 293, 498, 291, 528, 281, 362, 341, 551, 291, 486, 643, 281, 9528], "temperature": 0.0, "avg_logprob": -0.06894564628601074, "compression_ratio": 1.9593495934959348, "no_speech_prob": 2.7263952233624877e-06}, {"id": 182, "seek": 107896, "start": 1084.96, "end": 1090.96, "text": " config semi-hosting fallback and if you want to use an spl then you can enable the spl versions", "tokens": [6662, 12909, 12, 6037, 278, 2100, 3207, 293, 498, 291, 528, 281, 764, 364, 637, 75, 550, 291, 393, 9528, 264, 637, 75, 9606], "temperature": 0.0, "avg_logprob": -0.06894564628601074, "compression_ratio": 1.9593495934959348, "no_speech_prob": 2.7263952233624877e-06}, {"id": 183, "seek": 107896, "start": 1090.96, "end": 1096.16, "text": " there's no serial version because u boot always enables the uh serial device in spl that it's", "tokens": [456, 311, 572, 17436, 3037, 570, 344, 11450, 1009, 17077, 264, 2232, 17436, 4302, 294, 637, 75, 300, 309, 311], "temperature": 0.0, "avg_logprob": -0.06894564628601074, "compression_ratio": 1.9593495934959348, "no_speech_prob": 2.7263952233624877e-06}, {"id": 184, "seek": 107896, "start": 1096.16, "end": 1102.48, "text": " using in the regular u boot um and these are the things that i worked on adding uh and i also worked", "tokens": [1228, 294, 264, 3890, 344, 11450, 1105, 293, 613, 366, 264, 721, 300, 741, 2732, 322, 5127, 2232, 293, 741, 611, 2732], "temperature": 0.0, "avg_logprob": -0.06894564628601074, "compression_ratio": 1.9593495934959348, "no_speech_prob": 2.7263952233624877e-06}, {"id": 185, "seek": 107896, "start": 1102.48, "end": 1108.08, "text": " on config semi-hosting a lot but uh the basic support was already there uh there's also risk", "tokens": [322, 6662, 12909, 12, 6037, 278, 257, 688, 457, 2232, 264, 3875, 1406, 390, 1217, 456, 2232, 456, 311, 611, 3148], "temperature": 0.0, "avg_logprob": -0.06894564628601074, "compression_ratio": 1.9593495934959348, "no_speech_prob": 2.7263952233624877e-06}, {"id": 186, "seek": 110808, "start": 1108.08, "end": 1114.6399999999999, "text": " five support from a kautok console and this is pretty recently added so it's either in the january", "tokens": [1732, 1406, 490, 257, 350, 1375, 453, 11076, 293, 341, 307, 1238, 3938, 3869, 370, 309, 311, 2139, 294, 264, 25442, 6164], "temperature": 0.0, "avg_logprob": -0.09614171333683347, "compression_ratio": 1.672340425531915, "no_speech_prob": 8.939033250499051e-06}, {"id": 187, "seek": 110808, "start": 1114.6399999999999, "end": 1120.0, "text": " release or maybe the march release i'm not sure um and if you want to know more about how to enable", "tokens": [4374, 420, 1310, 264, 8368, 4374, 741, 478, 406, 988, 1105, 293, 498, 291, 528, 281, 458, 544, 466, 577, 281, 9528], "temperature": 0.0, "avg_logprob": -0.09614171333683347, "compression_ratio": 1.672340425531915, "no_speech_prob": 8.939033250499051e-06}, {"id": 188, "seek": 110808, "start": 1120.0, "end": 1127.12, "text": " this we have a documentation link and of course you're also going to need a debugger so i like to", "tokens": [341, 321, 362, 257, 14333, 2113, 293, 295, 1164, 291, 434, 611, 516, 281, 643, 257, 24083, 1321, 370, 741, 411, 281], "temperature": 0.0, "avg_logprob": -0.09614171333683347, "compression_ratio": 1.672340425531915, "no_speech_prob": 8.939033250499051e-06}, {"id": 189, "seek": 110808, "start": 1127.12, "end": 1136.0, "text": " use open ocd um maybe because i'm a masochist uh and open ocd is a debug server for j tag so the", "tokens": [764, 1269, 10409, 67, 1105, 1310, 570, 741, 478, 257, 2300, 8997, 468, 2232, 293, 1269, 10409, 67, 307, 257, 24083, 7154, 337, 361, 6162, 370, 264], "temperature": 0.0, "avg_logprob": -0.09614171333683347, "compression_ratio": 1.672340425531915, "no_speech_prob": 8.939033250499051e-06}, {"id": 190, "seek": 113600, "start": 1136.0, "end": 1142.64, "text": " idea is you launch open ocd and it connects to your debug probe and then you can you can tell the", "tokens": [1558, 307, 291, 4025, 1269, 10409, 67, 293, 309, 16967, 281, 428, 24083, 22715, 293, 550, 291, 393, 291, 393, 980, 264], "temperature": 0.0, "avg_logprob": -0.042636032762198614, "compression_ratio": 1.987603305785124, "no_speech_prob": 2.7692981348081958e-06}, {"id": 191, "seek": 113600, "start": 1142.64, "end": 1148.08, "text": " debug probe to do things like uh start or stop your processor and you can also attach gdb to it", "tokens": [24083, 22715, 281, 360, 721, 411, 2232, 722, 420, 1590, 428, 15321, 293, 291, 393, 611, 5085, 290, 67, 65, 281, 309], "temperature": 0.0, "avg_logprob": -0.042636032762198614, "compression_ratio": 1.987603305785124, "no_speech_prob": 2.7692981348081958e-06}, {"id": 192, "seek": 113600, "start": 1148.08, "end": 1154.4, "text": " like it's a running process so this is pretty simple for open ocd you just halt the processor", "tokens": [411, 309, 311, 257, 2614, 1399, 370, 341, 307, 1238, 2199, 337, 1269, 10409, 67, 291, 445, 12479, 264, 15321], "temperature": 0.0, "avg_logprob": -0.042636032762198614, "compression_ratio": 1.987603305785124, "no_speech_prob": 2.7692981348081958e-06}, {"id": 193, "seek": 113600, "start": 1154.4, "end": 1159.36, "text": " you enable semi-hosting and then you resume it and typically what you would do is in between this", "tokens": [291, 9528, 12909, 12, 6037, 278, 293, 550, 291, 15358, 309, 293, 5850, 437, 291, 576, 360, 307, 294, 1296, 341], "temperature": 0.0, "avg_logprob": -0.042636032762198614, "compression_ratio": 1.987603305785124, "no_speech_prob": 2.7692981348081958e-06}, {"id": 194, "seek": 113600, "start": 1159.36, "end": 1163.6, "text": " enabling semi-hosting and resuming you would load your program and then resume out a particular", "tokens": [23148, 12909, 12, 6037, 278, 293, 725, 24919, 291, 576, 3677, 428, 1461, 293, 550, 15358, 484, 257, 1729], "temperature": 0.0, "avg_logprob": -0.042636032762198614, "compression_ratio": 1.987603305785124, "no_speech_prob": 2.7692981348081958e-06}, {"id": 195, "seek": 116360, "start": 1163.6, "end": 1171.04, "text": " address and this you could stick in a script and just run and automate the whole thing uh so there's", "tokens": [2985, 293, 341, 291, 727, 2897, 294, 257, 5755, 293, 445, 1190, 293, 31605, 264, 1379, 551, 2232, 370, 456, 311], "temperature": 0.0, "avg_logprob": -0.08074201742808024, "compression_ratio": 1.801498127340824, "no_speech_prob": 8.139444616972469e-06}, {"id": 196, "seek": 116360, "start": 1171.04, "end": 1177.1999999999998, "text": " a couple of downsides to open ocd uh you can kind of think of this as like a wish list or", "tokens": [257, 1916, 295, 21554, 1875, 281, 1269, 10409, 67, 2232, 291, 393, 733, 295, 519, 295, 341, 382, 411, 257, 3172, 1329, 420], "temperature": 0.0, "avg_logprob": -0.08074201742808024, "compression_ratio": 1.801498127340824, "no_speech_prob": 8.139444616972469e-06}, {"id": 197, "seek": 116360, "start": 1177.1999999999998, "end": 1182.6399999999999, "text": " things that are knowing me but not enough that i fixed them uh the one of them is that uses the", "tokens": [721, 300, 366, 5276, 385, 457, 406, 1547, 300, 741, 6806, 552, 2232, 264, 472, 295, 552, 307, 300, 4960, 264], "temperature": 0.0, "avg_logprob": -0.08074201742808024, "compression_ratio": 1.801498127340824, "no_speech_prob": 8.139444616972469e-06}, {"id": 198, "seek": 116360, "start": 1182.6399999999999, "end": 1187.9199999999998, "text": " same terminal for regular like logging messages like uh you know i attached a debugger um and that", "tokens": [912, 14709, 337, 3890, 411, 27991, 7897, 411, 2232, 291, 458, 741, 8570, 257, 24083, 1321, 1105, 293, 300], "temperature": 0.0, "avg_logprob": -0.08074201742808024, "compression_ratio": 1.801498127340824, "no_speech_prob": 8.139444616972469e-06}, {"id": 199, "seek": 116360, "start": 1187.9199999999998, "end": 1192.9599999999998, "text": " sort of thing as semi-hosting output so they can be kind of get intermixed so you have to watch", "tokens": [1333, 295, 551, 382, 12909, 12, 6037, 278, 5598, 370, 436, 393, 312, 733, 295, 483, 728, 76, 40303, 370, 291, 362, 281, 1159], "temperature": 0.0, "avg_logprob": -0.08074201742808024, "compression_ratio": 1.801498127340824, "no_speech_prob": 8.139444616972469e-06}, {"id": 200, "seek": 119296, "start": 1192.96, "end": 1199.04, "text": " out for that uh the serial is cooked which means that when you type something uh nothing happens", "tokens": [484, 337, 300, 2232, 264, 17436, 307, 9267, 597, 1355, 300, 562, 291, 2010, 746, 2232, 1825, 2314], "temperature": 0.0, "avg_logprob": -0.06526449970577074, "compression_ratio": 1.8287037037037037, "no_speech_prob": 8.664492270327173e-06}, {"id": 201, "seek": 119296, "start": 1199.04, "end": 1205.2, "text": " until you hit enter and then everything happens uh and this can is kind of okay because if you're", "tokens": [1826, 291, 2045, 3242, 293, 550, 1203, 2314, 2232, 293, 341, 393, 307, 733, 295, 1392, 570, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.06526449970577074, "compression_ratio": 1.8287037037037037, "no_speech_prob": 8.664492270327173e-06}, {"id": 202, "seek": 119296, "start": 1205.2, "end": 1211.68, "text": " editing a command line um it it's generally really slow if like you hit backspace and then you have", "tokens": [10000, 257, 5622, 1622, 1105, 309, 309, 311, 5101, 534, 2964, 498, 411, 291, 2045, 646, 24824, 293, 550, 291, 362], "temperature": 0.0, "avg_logprob": -0.06526449970577074, "compression_ratio": 1.8287037037037037, "no_speech_prob": 8.664492270327173e-06}, {"id": 203, "seek": 119296, "start": 1211.68, "end": 1217.1200000000001, "text": " to go to u boot and u boot interprets the backspace and echoes it back and then it gets displayed on", "tokens": [281, 352, 281, 344, 11450, 293, 344, 11450, 17489, 1373, 264, 646, 24824, 293, 47051, 309, 646, 293, 550, 309, 2170, 16372, 322], "temperature": 0.0, "avg_logprob": -0.06526449970577074, "compression_ratio": 1.8287037037037037, "no_speech_prob": 8.664492270327173e-06}, {"id": 204, "seek": 121712, "start": 1217.12, "end": 1224.1599999999999, "text": " your terminal so cooked is nice here um the problem is that open ocd is single threaded so while it's", "tokens": [428, 14709, 370, 9267, 307, 1481, 510, 1105, 264, 1154, 307, 300, 1269, 10409, 67, 307, 2167, 47493, 370, 1339, 309, 311], "temperature": 0.0, "avg_logprob": -0.06704957861649363, "compression_ratio": 1.75, "no_speech_prob": 6.43890325591201e-06}, {"id": 205, "seek": 121712, "start": 1224.1599999999999, "end": 1229.1999999999998, "text": " waiting for you to input it's not doing anything so if you unplug the device or you hit control c", "tokens": [3806, 337, 291, 281, 4846, 309, 311, 406, 884, 1340, 370, 498, 291, 39456, 264, 4302, 420, 291, 2045, 1969, 269], "temperature": 0.0, "avg_logprob": -0.06704957861649363, "compression_ratio": 1.75, "no_speech_prob": 6.43890325591201e-06}, {"id": 206, "seek": 121712, "start": 1229.1999999999998, "end": 1237.12, "text": " in your debugger it won't notice until you hit enter uh so this is uh can be kind of fun especially", "tokens": [294, 428, 24083, 1321, 309, 1582, 380, 3449, 1826, 291, 2045, 3242, 2232, 370, 341, 307, 2232, 393, 312, 733, 295, 1019, 2318], "temperature": 0.0, "avg_logprob": -0.06704957861649363, "compression_ratio": 1.75, "no_speech_prob": 6.43890325591201e-06}, {"id": 207, "seek": 121712, "start": 1237.12, "end": 1243.4399999999998, "text": " because even if you know about it you might forget um and this single threaded thing also ties into", "tokens": [570, 754, 498, 291, 458, 466, 309, 291, 1062, 2870, 1105, 293, 341, 2167, 47493, 551, 611, 14039, 666], "temperature": 0.0, "avg_logprob": -0.06704957861649363, "compression_ratio": 1.75, "no_speech_prob": 6.43890325591201e-06}, {"id": 208, "seek": 124344, "start": 1243.44, "end": 1248.4, "text": " there's no sandboxing so ideally you would do something like fork off another process and", "tokens": [456, 311, 572, 42115, 278, 370, 22915, 291, 576, 360, 746, 411, 17716, 766, 1071, 1399, 293], "temperature": 0.0, "avg_logprob": -0.0597063631846987, "compression_ratio": 1.900398406374502, "no_speech_prob": 8.139531018969137e-06}, {"id": 209, "seek": 124344, "start": 1248.4, "end": 1254.24, "text": " maybe unshare some stuff or put it in a ch route and then that would be where you would run all your", "tokens": [1310, 2693, 31932, 512, 1507, 420, 829, 309, 294, 257, 417, 7955, 293, 550, 300, 576, 312, 689, 291, 576, 1190, 439, 428], "temperature": 0.0, "avg_logprob": -0.0597063631846987, "compression_ratio": 1.900398406374502, "no_speech_prob": 8.139531018969137e-06}, {"id": 210, "seek": 124344, "start": 1254.24, "end": 1259.44, "text": " semi-hosting stuff like it would open the file and you could limit it to just a few files but", "tokens": [12909, 12, 6037, 278, 1507, 411, 309, 576, 1269, 264, 3991, 293, 291, 727, 4948, 309, 281, 445, 257, 1326, 7098, 457], "temperature": 0.0, "avg_logprob": -0.0597063631846987, "compression_ratio": 1.900398406374502, "no_speech_prob": 8.139531018969137e-06}, {"id": 211, "seek": 124344, "start": 1259.44, "end": 1264.88, "text": " there's no sandboxing so uh your whole system is there uh once again you have to trust your stuff", "tokens": [456, 311, 572, 42115, 278, 370, 2232, 428, 1379, 1185, 307, 456, 2232, 1564, 797, 291, 362, 281, 3361, 428, 1507], "temperature": 0.0, "avg_logprob": -0.0597063631846987, "compression_ratio": 1.900398406374502, "no_speech_prob": 8.139531018969137e-06}, {"id": 212, "seek": 124344, "start": 1265.76, "end": 1271.1200000000001, "text": " so should you use semi-hosting uh i would say not unless you have to especially not the serial", "tokens": [370, 820, 291, 764, 12909, 12, 6037, 278, 2232, 741, 576, 584, 406, 5969, 291, 362, 281, 2318, 406, 264, 17436], "temperature": 0.0, "avg_logprob": -0.0597063631846987, "compression_ratio": 1.900398406374502, "no_speech_prob": 8.139531018969137e-06}, {"id": 213, "seek": 127112, "start": 1271.12, "end": 1277.6799999999998, "text": " stuff but it's good to have if you have to use it it's nice uh and sometimes it's convenient if", "tokens": [1507, 457, 309, 311, 665, 281, 362, 498, 291, 362, 281, 764, 309, 309, 311, 1481, 2232, 293, 2171, 309, 311, 10851, 498], "temperature": 0.0, "avg_logprob": -0.05317459261514307, "compression_ratio": 1.9314516129032258, "no_speech_prob": 2.5215467758243904e-06}, {"id": 214, "seek": 127112, "start": 1277.6799999999998, "end": 1282.2399999999998, "text": " you're doing emulation it can be really simple because you don't have to emulate an mmc device", "tokens": [291, 434, 884, 846, 2776, 309, 393, 312, 534, 2199, 570, 291, 500, 380, 362, 281, 45497, 364, 275, 76, 66, 4302], "temperature": 0.0, "avg_logprob": -0.05317459261514307, "compression_ratio": 1.9314516129032258, "no_speech_prob": 2.5215467758243904e-06}, {"id": 215, "seek": 127112, "start": 1282.2399999999998, "end": 1287.6799999999998, "text": " you don't have to write a driver for an mmc device you just uh call your semi-hosting instruction", "tokens": [291, 500, 380, 362, 281, 2464, 257, 6787, 337, 364, 275, 76, 66, 4302, 291, 445, 2232, 818, 428, 12909, 12, 6037, 278, 10951], "temperature": 0.0, "avg_logprob": -0.05317459261514307, "compression_ratio": 1.9314516129032258, "no_speech_prob": 2.5215467758243904e-06}, {"id": 216, "seek": 127112, "start": 1287.6799999999998, "end": 1291.6, "text": " and you can load the file right into where you want it um and you don't have to do any hardware", "tokens": [293, 291, 393, 3677, 264, 3991, 558, 666, 689, 291, 528, 309, 1105, 293, 291, 500, 380, 362, 281, 360, 604, 8837], "temperature": 0.0, "avg_logprob": -0.05317459261514307, "compression_ratio": 1.9314516129032258, "no_speech_prob": 2.5215467758243904e-06}, {"id": 217, "seek": 127112, "start": 1292.4799999999998, "end": 1296.8, "text": " and if you're already using jtag boot this can be really nice to solve some of your sequencing", "tokens": [293, 498, 291, 434, 1217, 1228, 361, 25030, 11450, 341, 393, 312, 534, 1481, 281, 5039, 512, 295, 428, 32693], "temperature": 0.0, "avg_logprob": -0.05317459261514307, "compression_ratio": 1.9314516129032258, "no_speech_prob": 2.5215467758243904e-06}, {"id": 218, "seek": 129680, "start": 1296.8, "end": 1303.76, "text": " stuff uh but i wouldn't recommend it in general um so i'd like to thank a couple people uh tom", "tokens": [1507, 2232, 457, 741, 2759, 380, 2748, 309, 294, 2674, 1105, 370, 741, 1116, 411, 281, 1309, 257, 1916, 561, 2232, 2916], "temperature": 0.0, "avg_logprob": -0.1381822767711821, "compression_ratio": 1.7311827956989247, "no_speech_prob": 6.539985406561755e-06}, {"id": 219, "seek": 129680, "start": 1303.76, "end": 1309.04, "text": " verberware wrote a blog post on this stuff that got me thinking about the whole thing uh andre", "tokens": [1306, 607, 3039, 4114, 257, 6968, 2183, 322, 341, 1507, 300, 658, 385, 1953, 466, 264, 1379, 551, 2232, 293, 265], "temperature": 0.0, "avg_logprob": -0.1381822767711821, "compression_ratio": 1.7311827956989247, "no_speech_prob": 6.539985406561755e-06}, {"id": 220, "seek": 129680, "start": 1309.04, "end": 1315.12, "text": " psivara uh did the initial semi-hosting and uh i'm he also worked with me when i was upstreaming", "tokens": [18815, 592, 2419, 2232, 630, 264, 5883, 12909, 12, 6037, 278, 293, 2232, 741, 478, 415, 611, 2732, 365, 385, 562, 741, 390, 33915, 278], "temperature": 0.0, "avg_logprob": -0.1381822767711821, "compression_ratio": 1.7311827956989247, "no_speech_prob": 6.539985406561755e-06}, {"id": 221, "seek": 129680, "start": 1315.12, "end": 1320.3999999999999, "text": " my stuff so i'm grateful for that and of course tom rini and simon glass who reviewed and merged", "tokens": [452, 1507, 370, 741, 478, 7941, 337, 300, 293, 295, 1164, 2916, 367, 3812, 293, 1034, 266, 4276, 567, 18429, 293, 36427], "temperature": 0.0, "avg_logprob": -0.1381822767711821, "compression_ratio": 1.7311827956989247, "no_speech_prob": 6.539985406561755e-06}, {"id": 222, "seek": 129680, "start": 1320.3999999999999, "end": 1326.08, "text": " all of this code and a lot of other patches along the years um and of course maric who put me up to", "tokens": [439, 295, 341, 3089, 293, 257, 688, 295, 661, 26531, 2051, 264, 924, 1105, 293, 295, 1164, 1849, 299, 567, 829, 385, 493, 281], "temperature": 0.0, "avg_logprob": -0.1381822767711821, "compression_ratio": 1.7311827956989247, "no_speech_prob": 6.539985406561755e-06}, {"id": 223, "seek": 132608, "start": 1326.08, "end": 1332.3999999999999, "text": " this talk and seiko who employed me while i was writing the code and if you're interested in this", "tokens": [341, 751, 293, 369, 10770, 567, 20115, 385, 1339, 741, 390, 3579, 264, 3089, 293, 498, 291, 434, 3102, 294, 341], "temperature": 0.0, "avg_logprob": -0.0740733037049743, "compression_ratio": 1.8110599078341014, "no_speech_prob": 1.0129073416464962e-05}, {"id": 224, "seek": 132608, "start": 1332.96, "end": 1338.56, "text": " there's that blog post i was talking about uh there is the risk five software spec which is", "tokens": [456, 311, 300, 6968, 2183, 741, 390, 1417, 466, 2232, 456, 307, 264, 3148, 1732, 4722, 1608, 597, 307], "temperature": 0.0, "avg_logprob": -0.0740733037049743, "compression_ratio": 1.8110599078341014, "no_speech_prob": 1.0129073416464962e-05}, {"id": 225, "seek": 132608, "start": 1338.56, "end": 1344.08, "text": " just the arm software spec but they use a different instruction and different registers and of course", "tokens": [445, 264, 3726, 4722, 1608, 457, 436, 764, 257, 819, 10951, 293, 819, 38351, 293, 295, 1164], "temperature": 0.0, "avg_logprob": -0.0740733037049743, "compression_ratio": 1.8110599078341014, "no_speech_prob": 1.0129073416464962e-05}, {"id": 226, "seek": 132608, "start": 1344.08, "end": 1350.1599999999999, "text": " the arm software spec and this link may die because arm has a tendency to rearrange things but uh for", "tokens": [264, 3726, 4722, 1608, 293, 341, 2113, 815, 978, 570, 3726, 575, 257, 18187, 281, 39568, 721, 457, 2232, 337], "temperature": 0.0, "avg_logprob": -0.0740733037049743, "compression_ratio": 1.8110599078341014, "no_speech_prob": 1.0129073416464962e-05}, {"id": 227, "seek": 135016, "start": 1350.16, "end": 1360.16, "text": " now it works thank you", "tokens": [586, 309, 1985, 1309, 291], "temperature": 0.0, "avg_logprob": -0.2838998794555664, "compression_ratio": 1.3394495412844036, "no_speech_prob": 1.1656810784188565e-05}, {"id": 228, "seek": 135016, "start": 1364.3200000000002, "end": 1366.16, "text": " anyone have a question questions", "tokens": [2878, 362, 257, 1168, 1651], "temperature": 0.0, "avg_logprob": -0.2838998794555664, "compression_ratio": 1.3394495412844036, "no_speech_prob": 1.1656810784188565e-05}, {"id": 229, "seek": 135016, "start": 1367.68, "end": 1375.6000000000001, "text": " yeah i do um can you actually use semi-hosting for serial control in linux uh yes but only", "tokens": [1338, 741, 360, 1105, 393, 291, 767, 764, 12909, 12, 6037, 278, 337, 17436, 1969, 294, 22896, 2449, 2232, 2086, 457, 787], "temperature": 0.0, "avg_logprob": -0.2838998794555664, "compression_ratio": 1.3394495412844036, "no_speech_prob": 1.1656810784188565e-05}, {"id": 230, "seek": 137560, "start": 1375.6, "end": 1382.9599999999998, "text": " for debug prints and i haven't looked into it that closely um i think the whole uh stopping", "tokens": [337, 24083, 22305, 293, 741, 2378, 380, 2956, 666, 309, 300, 8185, 1105, 741, 519, 264, 1379, 2232, 12767], "temperature": 0.0, "avg_logprob": -0.049320189158121745, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.061497187038185e-05}, {"id": 231, "seek": 137560, "start": 1382.9599999999998, "end": 1388.48, "text": " linux to do a breakpoint is kind of invasive because linux tends not to like that because like", "tokens": [22896, 2449, 281, 360, 257, 1821, 6053, 307, 733, 295, 30894, 570, 22896, 2449, 12258, 406, 281, 411, 300, 570, 411], "temperature": 0.0, "avg_logprob": -0.049320189158121745, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.061497187038185e-05}, {"id": 232, "seek": 137560, "start": 1388.48, "end": 1393.84, "text": " your interrupts for that core will just not happen while it's stuck on the debugger and uh you can", "tokens": [428, 12729, 82, 337, 300, 4965, 486, 445, 406, 1051, 1339, 309, 311, 5541, 322, 264, 24083, 1321, 293, 2232, 291, 393], "temperature": 0.0, "avg_logprob": -0.049320189158121745, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.061497187038185e-05}, {"id": 233, "seek": 137560, "start": 1393.84, "end": 1398.08, "text": " kind of break your devices that expect there to be an interrupt that gets handled in a reasonable", "tokens": [733, 295, 1821, 428, 5759, 300, 2066, 456, 281, 312, 364, 12729, 300, 2170, 18033, 294, 257, 10585], "temperature": 0.0, "avg_logprob": -0.049320189158121745, "compression_ratio": 1.7174887892376682, "no_speech_prob": 1.061497187038185e-05}, {"id": 234, "seek": 139808, "start": 1398.08, "end": 1406.8, "text": " manner um so typically when you stop the processor in linux uh like your emmc will just break um so", "tokens": [9060, 1105, 370, 5850, 562, 291, 1590, 264, 15321, 294, 22896, 2449, 2232, 411, 428, 846, 76, 66, 486, 445, 1821, 1105, 370], "temperature": 0.0, "avg_logprob": -0.06548096656799317, "compression_ratio": 1.4772727272727273, "no_speech_prob": 1.544429687783122e-05}, {"id": 235, "seek": 139808, "start": 1406.8, "end": 1411.4399999999998, "text": " generally i've only seen it for debug prints and usually only if like you can't get to the real", "tokens": [5101, 741, 600, 787, 1612, 309, 337, 24083, 22305, 293, 2673, 787, 498, 411, 291, 393, 380, 483, 281, 264, 957], "temperature": 0.0, "avg_logprob": -0.06548096656799317, "compression_ratio": 1.4772727272727273, "no_speech_prob": 1.544429687783122e-05}, {"id": 236, "seek": 141144, "start": 1411.44, "end": 1434.88, "text": " serial console yeah okay since we have a couple minutes i have a one more slide", "tokens": [17436, 11076, 1338, 1392, 1670, 321, 362, 257, 1916, 2077, 741, 362, 257, 472, 544, 4137], "temperature": 0.0, "avg_logprob": -0.1971447467803955, "compression_ratio": 1.144927536231884, "no_speech_prob": 2.443793619022472e-06}, {"id": 237, "seek": 143488, "start": 1434.88, "end": 1442.24, "text": " um so normally when you boot print something uh this is what it gets it'll get like hello uh", "tokens": [1105, 370, 5646, 562, 291, 11450, 4482, 746, 2232, 341, 307, 437, 309, 2170, 309, 603, 483, 411, 7751, 2232], "temperature": 0.0, "avg_logprob": -0.13289420137700347, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.7107318601338193e-05}, {"id": 238, "seek": 143488, "start": 1442.24, "end": 1449.2800000000002, "text": " slash n and it'll normally print this like h e l l o slash r slash n and it inserts the slash r", "tokens": [17330, 297, 293, 309, 603, 5646, 4482, 341, 411, 276, 308, 287, 287, 277, 17330, 367, 17330, 297, 293, 309, 49163, 264, 17330, 367], "temperature": 0.0, "avg_logprob": -0.13289420137700347, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.7107318601338193e-05}, {"id": 239, "seek": 143488, "start": 1449.2800000000002, "end": 1453.92, "text": " and it'll do it one character at a time but as we've established earlier this is glitchily slow", "tokens": [293, 309, 603, 360, 309, 472, 2517, 412, 257, 565, 457, 382, 321, 600, 7545, 3071, 341, 307, 23552, 953, 2964], "temperature": 0.0, "avg_logprob": -0.13289420137700347, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.7107318601338193e-05}, {"id": 240, "seek": 143488, "start": 1453.92, "end": 1460.72, "text": " on semi-hosted hardware so what i initially did was this and i printed out hello slash n and then", "tokens": [322, 12909, 12, 6037, 292, 8837, 370, 437, 741, 9105, 630, 390, 341, 293, 741, 13567, 484, 7751, 17330, 297, 293, 550], "temperature": 0.0, "avg_logprob": -0.13289420137700347, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.7107318601338193e-05}, {"id": 241, "seek": 146072, "start": 1460.72, "end": 1467.1200000000001, "text": " i added the dash slash r um but this will actually break things because they expect it to be r n and", "tokens": [741, 3869, 264, 8240, 17330, 367, 1105, 457, 341, 486, 767, 1821, 721, 570, 436, 2066, 309, 281, 312, 367, 297, 293], "temperature": 0.0, "avg_logprob": -0.08059713520954565, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.28787326048041e-06}, {"id": 242, "seek": 146072, "start": 1467.1200000000001, "end": 1472.72, "text": " not n r even though like functionally they're the same um so i ended up having to do it the other", "tokens": [406, 297, 367, 754, 1673, 411, 2445, 379, 436, 434, 264, 912, 1105, 370, 741, 4590, 493, 1419, 281, 360, 309, 264, 661], "temperature": 0.0, "avg_logprob": -0.08059713520954565, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.28787326048041e-06}, {"id": 243, "seek": 146072, "start": 1472.72, "end": 1482.24, "text": " way uh so if you're implement this stuff be aware of that although uh if if you are doing this like", "tokens": [636, 2232, 370, 498, 291, 434, 4445, 341, 1507, 312, 3650, 295, 300, 4878, 2232, 498, 498, 291, 366, 884, 341, 411], "temperature": 0.0, "avg_logprob": -0.08059713520954565, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.28787326048041e-06}, {"id": 244, "seek": 148224, "start": 1482.24, "end": 1493.2, "text": " on a microcontroller you can probably just put hello r n in your strings and maybe that's better", "tokens": [50364, 322, 257, 4532, 9000, 22922, 291, 393, 1391, 445, 829, 7751, 367, 297, 294, 428, 13985, 293, 1310, 300, 311, 1101, 50912], "temperature": 0.0, "avg_logprob": -0.1678145925203959, "compression_ratio": 1.1851851851851851, "no_speech_prob": 9.816470992518589e-06}], "language": "en"}