{"text": " Hello, our next talk is going to be by Ahmad about having something to hide. Thank you. Yes, so my name is Ahmad Fatoum, I'm an embedded Linux engineer with Pingotronics and thanks for attending my talk on having something to hide trusted key storage in Linux. So Pingotronics, a company I work for is a German Linux consulting company. We specialize in embedded systems. So all around embedded Linux consulting, around drivers, bootloaders, kernel porting. And in the course of one project, I had occasion to get more familiar with kernel's trusted key subsystem, which I will talk about today. But first I will talk about what we need to store these keys for. This is usually disk encryption. So if you install a new Linux distribution on many systems, you already have whole disk encryption out of the box. And it's just really one click affair. But what are the mechanisms underlying that? That's usually the M-crypt. So the M-crypt is device mapper with the cryptarget. And what that does is that it maps physical devices to a virtual device and applies some transformation to it. In this case, it's cryptography. And you see how that looks like in code at the end of the slide. You specify a range. You start from the first block, the number of blocks. You specify that you want to use crypt. You specify your crypto parameters. For example, here it's AES. And then you reference crypto key that you want to use for this symmetric encryption. Here is 32 byte long key with the name key, and it's of type lock on. And in the line after that, you see this key being added. And that's all you need to do. So to initialize your Dm-crypt, then there is a Dm setup tool you can call. And then you have the M-script running. You can use this virtual device, just write to it. And the physical device, everything that will be written there will be encrypted with this parameters that you have set. Most people don't do this manually via Dm setup, but they have a wrapper around that. That's usually crypt setup with looks. So looks is desk encryption specification. You see at the end how the header is laid out. You have this binary header that's still there for compatibility. And you have a JSON area that can describe these parameters that we had in our Dm setup table, like what sort of algorithm is used or what HMAC is used. And then there is this key slots area. And in this key slots area, you have this volume key that was at 32 byte long keys that we had. That key is what's actually used for crypto. But if that leaks, yeah, you have all your data encrypted with it. So the idea with the M-crypt is what the crypt setup and looks do is that you can have multiple key phrases. For example, your normal key phrase that you always enter or a recovery key. And then in turn, you encrypt that volume key with each time with a different key. And that's stored in these key slots area. And that way, you can have multiple passphrases for the same volume. And yeah, where does that passphrase come from? So it's usually entered by the user. So in the init.rd, you are asked what's the passphrase that you want. And then you enter it. You could be a bit more sophisticated and insert a USB stick that has a file. That's the same code pass, basically. You could insert a Fido security key or a smart card, but what all of these have in common is that the user is inserting or writing or you need user involvement. And in my project, it was an embedded system. And we don't have really a user powering up the devices. And yeah, we need some sort of automated solution for unattended boots. And here is where trusted storage comes in. So in the regular case, the trusted storage is like the memory of the user or his USB stick. But for an unattended boot, you need some on-chip or off-chip device that's appropriately secure that can hold the key. Such device is in many systems, the TPM or the trusted platform with yours. This is an industry-wide standard. It's also an international standard and it's mandated by Windows 11, which helps its adoption in a lot of modern systems because you couldn't boot Linux otherwise. They are available as discrete devices, as chips, sometimes on like a breakout board for your motherboard, but they can also be implemented in firmware. And TPMs have this standardized interface where you can talk to them and they provide you a lot of services. What's interesting for us is that it has a random number generator built-in, so it has its own entropy source and gives you access to it. And it holds a unique never-disclosed key. And with this unique never-disclosed key, you can encrypt arbitrary data. So instead of having a passphrase that you need to remember, you could have an encrypted passphrase and then you pass it to the TPM and the TPM will decrypt it with this unique never-disclosed key that it has inside and then pass you the data in a decrypted form, which you can then pass into the M-crypt or into the crypto setup or whatever. And you can make this even dependent on having reached a state that's an unintegrity measurement. So each boot state could verify the boot stage after it and then tell the TPM this is a measurement value. And these measurement values are concatenated and hashed and kept in the TPM. And you can configure the TPM to only release and only to decrypt data when it reaches that state. And then you can be, yeah, and when you configure it correctly, the TPM would only decrypt your encrypted blob when you are indeed in that secure, in that measured boot state that you want to be. You can even bind it to a time. So after a given time has elapsed, you can't access it anymore. Yeah, how does it look like in practice? The kernel has drivers for that that abstract away the different modes of communication. It can be I squared C, it can be SPI. You don't need to worry about that in user space. You have these device files that provide your access. There are user space libraries that wrap that and there is even a system D support since I think a year and a half or so, where you can enroll looks keys into TPMs. It's very easy to set up. But whatever you do, the common way of using this with looks has the common, you could call it issue that privileged user space has access to this key material. So if you, you have seen there is this JSON area where you could store stuff. So you could store your encrypted key there. And what would happen on boot is that prep setup or system decrypt setup would go there, it would get this encrypted key, encrypted key, it would send it to the TPM. The TPM would do its checks and see, okay, I'm in the correct state. It will decrypt this data and then send it back to your user space. And then your user space now has this passphrase, which it could use to decrypt the M-crypt key and then it would pass it into the kernel again. So it's a real roundabout way to get the M-crypt key into the kernel key ring. So the idea behind trusted key was why not directly decrypt the TPM secured key into the kernel key ring and reference it from there without involving user space at all. And yeah, so it has been implemented. It was first added in 2010. The first kernel was released in 2011. It was originally TPM specific, but the naming was held generic enough, I think, in hopes that it can be extended in future. So the same patch series that added it added also encrypted keys. So encrypted keys are keys that you can only observe from user space in encrypted form. That's how it should be. So you will tell the kernel, generate a key for me. And then when you try to export the key, you only get it in encrypted form. And then when you want to load it, you give it a kernel in encrypted form and it will decrypt it, but it will stay in kernel memory in decrypted form. And that's encrypted keys. And trusted key additionally have hardware root of trust. So they use a TPM for doing the encryption and decryption. So in theory, you shouldn't be able to decrypt a trusted key to load it and have it decrypted on another system than the one where you generate it on. Because on the other system, you would have another trust source with its own unique key which is used for the encryption. How does it look like in code? So it's basically the same line as we have seen before, but instead of having a 32-byte long login key, we have a 32-byte trusted key here. It's called KMK. And to create it, you can use the key CTL command, you add a trusted key. You don't specify the key material like we did with the logon key because you can do that. You can just ask the kernel to generate you a 32-byte key. And then when you try to pipe it, which is the command to pipe the key contents out, unlike a user key which would just output the key material in plain text, it would output the encrypted key and set you can store wherever and use it on subsequent boots. So what the rest does is it sets up a loop device and does the encrypt on it and write it works and then it reboots. And then on the second boot, if you were to create a new trusted key, it would be completely different. It would be generated randomly. And you want to use the key that you have stored already, which is what the blue line is doing. It does add trusted KMK, but instead of creating a new key, it loads the key blobs that we have stored. And with that, you should be able to read back what you have written before. Yeah, so that's how it works. We have a way to do it in user space already, and that's how it's usually done. And not everyone agrees that sets strict advantages by doing it in the kernel. But what was interesting to me is that it is a very useful interface to represent much more than just TPMs. Because on modern system, you can have off-ship secure enclaves, basically a TPM that doesn't speak to TPM protocol and doesn't implement everything, but it implements part of it. You can have an on-ship trusted execution environment. You can have crypto units inside everyday socks. Very often you have a crypto accelerator that also has access to a key that it could use for wrapping and unwrapping data. And indeed, in 2019, work started from Sumit Garg at Linaro to generalize trusted keys and add T support in the first instance. So what is T? T is also an API standard. And what it's about, it's having a hardware isolated environment where you can run trusted applications on the same CPU where you execute your Linux. But thanks to this hardware isolation, normally armed trust zone, if you do everything right and have firewalls in place and all that stuff, you shouldn't be able to read the secure memory from your normal world, which is Linux. And these trusted applications can do basically everything. You can have a trusted application that offers you a TPM. And in that case, you could just use trusted keys with TPMs. But you can do basically anything. It's software. You can just do random number generation in T. You can do key sealing and unsealing with a hardware unique key. So that's available on some processors that when you are in the secure mode, you have access to a key that you can never see from Linux, which is unique and fused in. And there are even people doing clock reset power domain support stuff in it because they don't want Linux to have access to these things. So if you are interested, you can just grab the kernel tree for a T client driver and see all the stuff that's there. And what was interesting to me was the crypto unit inside the IMX SOCs. It's called CAM by free scale. And we already have a CAM driver in Linux. It does random number generation. It does crypto acceleration. It works a bit like a network card. So I have these shared TMA rings where you push the jobs you want the CAM to do. And then the CAM replies to you. And you can do, as I said, the crypto acceleration RNG. And it also has access to a one-time programmable master key that's fused by NXP in the factory. And that's unique between devices. That's the selling point. And the CAM can use it for red blob generation, which means it seals and unseals user supplied data using it. Basically the same we have seen with the TPM and with T. And it has black blob generation. So TPMs are very slow. And I don't know if they support crypto offloading, but you probably don't want to do that if you want to do something quickly. But the CAM can do it much quicker. And you can have this key never exit the CAM and use it for crypto inside the CAM. You are, of course, limited to the crypto algorithm. The CAM supports. But the possibility is there if you don't want your key to even enter the kernel. It should be all the time in the CAM itself. And yeah, so why do we need that for? The common use case is certificate storage. So you are a vendor and you need to call into your own cloud. And you have client certificates for that. And you don't want someone to be able to desolder this EMMC and read it out and get access to your certificates. And thus you decrypt the certificates and at runtime encrypt it into memory, maybe normal memory, maybe unshipped memory, however, whatever. And yeah, we had many customers that needed something like that. And we had been carrying out of three patches for it in 2015. We send it out the first time to get some feedback. Back then it was using the standard thing, a custom CSS interface. In the following years, NXP tried to upstream their own new key types to represent, to rep this hardware functionality. And finally in 2019, work began on generalizing trusted keys. And yeah, it was finally merged in 2021. In 2021, I also started then with implementing it for CAM. And that support is now available since 5.19. And it's usable exactly the same way as with TPMs. You can't do this measurement stuff because a CAM doesn't have support for that. But on NXP SOCs, you would rather use their form of verified boot. So this unique key that's inside the CAM, it's only released when the SOC believes it's in a high assurance boot state. It means that the boot ROM has verified the boot loader. And then you are supposed to keep that chain of verification going. And boot loader verifies the kernel, verifies the init.rd and so on. Yeah, some interesting tidbits. While I upstreamed the series, T and TPM both don't use a kernel entropy pool for TPMs. They always have a random number generator for T. It was specified that they need to provide random number generation. That's not something that I wanted to do for CAM because we have a perfectly fine CAM RNG driver. Not everyone was fine with it, but eventually, stubbornness prevailed. And yeah, you can now choose it for existing backends as well. You can specify trusted RNG equals kernel, and then you can, even for T or TPM, use the kernel entropy pool if you want to use that. The default is leaving it to the trust source to decide what it wants to do. And that's also useful for devices like on the IMX6 ultra-light light, you can guess from the name. It's supposed to be very lightweight. And their crypto unit doesn't support an RNG as is, and yeah. So you rather want to use the kernel driver that's available, that does this differently than you have to do it in your own driver. And what was also interesting, hardware feature bits were broken on some variants, so you can ask the CAM what features it supports, and the R-CAMs that support, say they have a blob support, but they lack AES support, so they fail with an internal exception when you try to use it, because it's, yeah. Because the ceiling and unsealing is AES based. But yeah, that's one more thing the kernel needs to take into account to work on these systems. And yeah, that's also something I only learned about while getting review feedback was not something I anticipated. As you have seen, NXP had different, okay, NXP had different attempts on getting into the kernel, and they applied that to their vendor tree. They called it secure keys, and during the upstreaming feedback I was asked if I wouldn't want to change my modifier key to be compatible with the NXP kernel, so people have an easier time migrating to it, because it was no problem for me. It broke my SysS interface, but I needed a migration step anyway, and yeah, this makes stuff easier for most of the users that want to switch, and yeah, so I did that. Why did I need a migration step? Because I was using looks before, but looks doesn't have trusted key support. So what I did is I used the M-Crip directly. I basically did the same things that looks would be doing, but only on the M-Crip part, and I would exclude the header you had seen in the first, one of the first slides. You can specify the range of blocks that it should work on, and then you can just cut out the looks area and do the M-Crip directly. And yeah, and you need a one-time import step, because the first time you don't want to generate the trusted key randomly, but you want to take the ones that you have already been using for years. Of course, in a new product, you don't want that non-upstream patch I linked there, but in an existing product, yeah, that's how you could do it. Old key blob, put into CISFS, gets a plain text key out, keysetlmports, and you have the new key blob. We store both alongside, so if the update fails for whatever reason, you can fall back to the old system and use the old key blob and both work. Yeah, finally, what more is there to do? So there's encrypted key support for the M-Crip, eCryptFS, eFAM, and VDM. There's direct key support, trusted key support, without involving encrypted key for the M-Crip, and yeah, you can use encrypted keys. Future candidates would be FS-Cript, there has been attempts, one for the old key set-up scheme, the second by me for the new key set-up scheme, UBFS authentication also currently uses a logon key that could be changed to be a trusted or encrypted key, but yeah, these patches have died down. Look support would be awesome, because yeah, with looks it just works out of the box, with the M-Crip, we still need to do it manually, but that enables us to do it completely in the kernel without involving user space, and yeah, you don't really want user space missing with a DMA-capable device that could just overwrite the kernel if you give it access, so trusted keys was the correct solution for us there. And that concludes my talk, and I would accept your questions if you have any. Thank you, and we have some time for a few questions. I have a question, are you aware of any way to kind of get this step of getting the secret from the hardware to automate that into the kernel as well, so you don't need user space interaction, user space utilities, my use case is mainly like the root file system, and to forego using an NDRAMFS that needs to run a lot of commands, so you could, from the kernel command line, similar, like with DMInit, also get the key. Personally, if I had that requirement, I would consider doing it from the boot loader and then have the kernel read it off the kernel command line, because the encrypted key blobs there is nothing confidential about it, so yeah, in theory the kernel could accept it over the kernel command line, but there is nothing like that currently. I can repeat the question, if it's to. Is there a way to also combine these hardware keys with some pin and looks, so you have to authorize yourself to the device? That's not really how it's meant to be used, because, well, yeah, the key material shouldn't exit the kernel, and you directly reference the DMCrypt key, insert the key in the kernel key ring and directly reference it, so I don't know how to do it to easily factor in a user pin. There's a passphrase option, apparently there is a passphrase option that I need to look up when using trusted keys. So thanks for the talk, would it be possible to add a manual step before communicating with the TPM, for example, a fingerprint scanner or anything like that? Is there a hardware and software option to combine the two verification steps? You could. So currently you need to have an init RD, so in my case you have an init RD, or I don't even have an init RD, I don't use it for the root file system, but if you were to use it for the root file system, for example, you could in the init RD first check that you have that fingerprint is there, but there is no way to wire it in the kernel, first this needs to happen, that's more of a policy thing that you would do in user space.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.84, "text": " Hello, our next talk is going to be by Ahmad about having something to hide.", "tokens": [2425, 11, 527, 958, 751, 307, 516, 281, 312, 538, 35911, 466, 1419, 746, 281, 6479, 13], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 1, "seek": 0, "start": 11.84, "end": 12.84, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 2, "seek": 0, "start": 12.84, "end": 17.96, "text": " Yes, so my name is Ahmad Fatoum, I'm an embedded Linux engineer with Pingotronics and thanks", "tokens": [1079, 11, 370, 452, 1315, 307, 35911, 16948, 263, 76, 11, 286, 478, 364, 16741, 18734, 11403, 365, 33645, 310, 37042, 293, 3231], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 3, "seek": 0, "start": 17.96, "end": 23.48, "text": " for attending my talk on having something to hide trusted key storage in Linux.", "tokens": [337, 15862, 452, 751, 322, 1419, 746, 281, 6479, 16034, 2141, 6725, 294, 18734, 13], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 4, "seek": 0, "start": 23.48, "end": 27.52, "text": " So Pingotronics, a company I work for is a German Linux consulting company.", "tokens": [407, 33645, 310, 37042, 11, 257, 2237, 286, 589, 337, 307, 257, 6521, 18734, 23682, 2237, 13], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 5, "seek": 0, "start": 27.52, "end": 29.84, "text": " We specialize in embedded systems.", "tokens": [492, 37938, 294, 16741, 3652, 13], "temperature": 0.0, "avg_logprob": -0.2154391238563939, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.2970464825630188}, {"id": 6, "seek": 2984, "start": 29.84, "end": 34.24, "text": " So all around embedded Linux consulting, around drivers, bootloaders, kernel porting.", "tokens": [407, 439, 926, 16741, 18734, 23682, 11, 926, 11590, 11, 11450, 2907, 433, 11, 28256, 2436, 278, 13], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 7, "seek": 2984, "start": 34.24, "end": 39.84, "text": " And in the course of one project, I had occasion to get more familiar with kernel's trusted", "tokens": [400, 294, 264, 1164, 295, 472, 1716, 11, 286, 632, 9674, 281, 483, 544, 4963, 365, 28256, 311, 16034], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 8, "seek": 2984, "start": 39.84, "end": 43.6, "text": " key subsystem, which I will talk about today.", "tokens": [2141, 2090, 9321, 11, 597, 286, 486, 751, 466, 965, 13], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 9, "seek": 2984, "start": 43.6, "end": 49.2, "text": " But first I will talk about what we need to store these keys for.", "tokens": [583, 700, 286, 486, 751, 466, 437, 321, 643, 281, 3531, 613, 9317, 337, 13], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 10, "seek": 2984, "start": 49.2, "end": 52.24, "text": " This is usually disk encryption.", "tokens": [639, 307, 2673, 12355, 29575, 13], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 11, "seek": 2984, "start": 52.24, "end": 58.2, "text": " So if you install a new Linux distribution on many systems, you already have whole disk", "tokens": [407, 498, 291, 3625, 257, 777, 18734, 7316, 322, 867, 3652, 11, 291, 1217, 362, 1379, 12355], "temperature": 0.0, "avg_logprob": -0.17850605010986328, "compression_ratio": 1.5769230769230769, "no_speech_prob": 6.511825631605461e-05}, {"id": 12, "seek": 5820, "start": 58.2, "end": 60.56, "text": " encryption out of the box.", "tokens": [29575, 484, 295, 264, 2424, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 13, "seek": 5820, "start": 60.56, "end": 63.480000000000004, "text": " And it's just really one click affair.", "tokens": [400, 309, 311, 445, 534, 472, 2052, 22987, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 14, "seek": 5820, "start": 63.480000000000004, "end": 66.92, "text": " But what are the mechanisms underlying that?", "tokens": [583, 437, 366, 264, 15902, 14217, 300, 30], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 15, "seek": 5820, "start": 66.92, "end": 68.72, "text": " That's usually the M-crypt.", "tokens": [663, 311, 2673, 264, 376, 12, 46555, 662, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 16, "seek": 5820, "start": 68.72, "end": 73.32000000000001, "text": " So the M-crypt is device mapper with the cryptarget.", "tokens": [407, 264, 376, 12, 46555, 662, 307, 4302, 463, 3717, 365, 264, 9844, 289, 847, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 17, "seek": 5820, "start": 73.32000000000001, "end": 80.80000000000001, "text": " And what that does is that it maps physical devices to a virtual device and applies some", "tokens": [400, 437, 300, 775, 307, 300, 309, 11317, 4001, 5759, 281, 257, 6374, 4302, 293, 13165, 512], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 18, "seek": 5820, "start": 80.80000000000001, "end": 81.96000000000001, "text": " transformation to it.", "tokens": [9887, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 19, "seek": 5820, "start": 81.96000000000001, "end": 84.44, "text": " In this case, it's cryptography.", "tokens": [682, 341, 1389, 11, 309, 311, 9844, 5820, 13], "temperature": 0.0, "avg_logprob": -0.18391396601994833, "compression_ratio": 1.5727699530516432, "no_speech_prob": 6.088205918786116e-05}, {"id": 20, "seek": 8444, "start": 84.44, "end": 90.39999999999999, "text": " And you see how that looks like in code at the end of the slide.", "tokens": [400, 291, 536, 577, 300, 1542, 411, 294, 3089, 412, 264, 917, 295, 264, 4137, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 21, "seek": 8444, "start": 90.39999999999999, "end": 92.32, "text": " You specify a range.", "tokens": [509, 16500, 257, 3613, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 22, "seek": 8444, "start": 92.32, "end": 95.8, "text": " You start from the first block, the number of blocks.", "tokens": [509, 722, 490, 264, 700, 3461, 11, 264, 1230, 295, 8474, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 23, "seek": 8444, "start": 95.8, "end": 98.6, "text": " You specify that you want to use crypt.", "tokens": [509, 16500, 300, 291, 528, 281, 764, 9844, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 24, "seek": 8444, "start": 98.6, "end": 100.16, "text": " You specify your crypto parameters.", "tokens": [509, 16500, 428, 17240, 9834, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 25, "seek": 8444, "start": 100.16, "end": 103.32, "text": " For example, here it's AES.", "tokens": [1171, 1365, 11, 510, 309, 311, 316, 2358, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 26, "seek": 8444, "start": 103.32, "end": 108.32, "text": " And then you reference crypto key that you want to use for this symmetric encryption.", "tokens": [400, 550, 291, 6408, 17240, 2141, 300, 291, 528, 281, 764, 337, 341, 32330, 29575, 13], "temperature": 0.0, "avg_logprob": -0.1484337067336179, "compression_ratio": 1.6785714285714286, "no_speech_prob": 3.819267658400349e-05}, {"id": 27, "seek": 10832, "start": 108.32, "end": 114.63999999999999, "text": " Here is 32 byte long key with the name key, and it's of type lock on.", "tokens": [1692, 307, 8858, 40846, 938, 2141, 365, 264, 1315, 2141, 11, 293, 309, 311, 295, 2010, 4017, 322, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 28, "seek": 10832, "start": 114.63999999999999, "end": 118.44, "text": " And in the line after that, you see this key being added.", "tokens": [400, 294, 264, 1622, 934, 300, 11, 291, 536, 341, 2141, 885, 3869, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 29, "seek": 10832, "start": 118.44, "end": 120.39999999999999, "text": " And that's all you need to do.", "tokens": [400, 300, 311, 439, 291, 643, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 30, "seek": 10832, "start": 120.39999999999999, "end": 126.6, "text": " So to initialize your Dm-crypt, then there is a Dm setup tool you can call.", "tokens": [407, 281, 5883, 1125, 428, 413, 76, 12, 46555, 662, 11, 550, 456, 307, 257, 413, 76, 8657, 2290, 291, 393, 818, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 31, "seek": 10832, "start": 126.6, "end": 128.44, "text": " And then you have the M-script running.", "tokens": [400, 550, 291, 362, 264, 376, 12, 82, 5944, 2614, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 32, "seek": 10832, "start": 128.44, "end": 131.84, "text": " You can use this virtual device, just write to it.", "tokens": [509, 393, 764, 341, 6374, 4302, 11, 445, 2464, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 33, "seek": 10832, "start": 131.84, "end": 135.56, "text": " And the physical device, everything that will be written there will be encrypted with this", "tokens": [400, 264, 4001, 4302, 11, 1203, 300, 486, 312, 3720, 456, 486, 312, 36663, 365, 341], "temperature": 0.0, "avg_logprob": -0.1774584134419759, "compression_ratio": 1.6706827309236947, "no_speech_prob": 5.3878895414527506e-05}, {"id": 34, "seek": 13556, "start": 135.56, "end": 139.76, "text": " parameters that you have set.", "tokens": [9834, 300, 291, 362, 992, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 35, "seek": 13556, "start": 139.76, "end": 144.6, "text": " Most people don't do this manually via Dm setup, but they have a wrapper around that.", "tokens": [4534, 561, 500, 380, 360, 341, 16945, 5766, 413, 76, 8657, 11, 457, 436, 362, 257, 46906, 926, 300, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 36, "seek": 13556, "start": 144.6, "end": 146.92000000000002, "text": " That's usually crypt setup with looks.", "tokens": [663, 311, 2673, 9844, 8657, 365, 1542, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 37, "seek": 13556, "start": 146.92000000000002, "end": 151.0, "text": " So looks is desk encryption specification.", "tokens": [407, 1542, 307, 10026, 29575, 31256, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 38, "seek": 13556, "start": 151.0, "end": 154.6, "text": " You see at the end how the header is laid out.", "tokens": [509, 536, 412, 264, 917, 577, 264, 23117, 307, 9897, 484, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 39, "seek": 13556, "start": 154.6, "end": 157.88, "text": " You have this binary header that's still there for compatibility.", "tokens": [509, 362, 341, 17434, 23117, 300, 311, 920, 456, 337, 34237, 13], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 40, "seek": 13556, "start": 157.88, "end": 165.16, "text": " And you have a JSON area that can describe these parameters that we had in our Dm setup", "tokens": [400, 291, 362, 257, 31828, 1859, 300, 393, 6786, 613, 9834, 300, 321, 632, 294, 527, 413, 76, 8657], "temperature": 0.0, "avg_logprob": -0.17570322036743163, "compression_ratio": 1.6446280991735538, "no_speech_prob": 6.806325109209865e-05}, {"id": 41, "seek": 16516, "start": 165.16, "end": 171.76, "text": " table, like what sort of algorithm is used or what HMAC is used.", "tokens": [3199, 11, 411, 437, 1333, 295, 9284, 307, 1143, 420, 437, 389, 44, 4378, 307, 1143, 13], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 42, "seek": 16516, "start": 171.76, "end": 174.24, "text": " And then there is this key slots area.", "tokens": [400, 550, 456, 307, 341, 2141, 24266, 1859, 13], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 43, "seek": 16516, "start": 174.24, "end": 181.92, "text": " And in this key slots area, you have this volume key that was at 32 byte long keys that", "tokens": [400, 294, 341, 2141, 24266, 1859, 11, 291, 362, 341, 5523, 2141, 300, 390, 412, 8858, 40846, 938, 9317, 300], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 44, "seek": 16516, "start": 181.92, "end": 183.92, "text": " we had.", "tokens": [321, 632, 13], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 45, "seek": 16516, "start": 183.92, "end": 187.16, "text": " That key is what's actually used for crypto.", "tokens": [663, 2141, 307, 437, 311, 767, 1143, 337, 17240, 13], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 46, "seek": 16516, "start": 187.16, "end": 192.96, "text": " But if that leaks, yeah, you have all your data encrypted with it.", "tokens": [583, 498, 300, 28885, 11, 1338, 11, 291, 362, 439, 428, 1412, 36663, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.1562798853670613, "compression_ratio": 1.61139896373057, "no_speech_prob": 2.667587250471115e-05}, {"id": 47, "seek": 19296, "start": 192.96, "end": 202.52, "text": " So the idea with the M-crypt is what the crypt setup and looks do is that you can have multiple", "tokens": [407, 264, 1558, 365, 264, 376, 12, 46555, 662, 307, 437, 264, 9844, 8657, 293, 1542, 360, 307, 300, 291, 393, 362, 3866], "temperature": 0.0, "avg_logprob": -0.17338312677590242, "compression_ratio": 1.6455026455026456, "no_speech_prob": 8.395923941861838e-06}, {"id": 48, "seek": 19296, "start": 202.52, "end": 203.52, "text": " key phrases.", "tokens": [2141, 20312, 13], "temperature": 0.0, "avg_logprob": -0.17338312677590242, "compression_ratio": 1.6455026455026456, "no_speech_prob": 8.395923941861838e-06}, {"id": 49, "seek": 19296, "start": 203.52, "end": 207.56, "text": " For example, your normal key phrase that you always enter or a recovery key.", "tokens": [1171, 1365, 11, 428, 2710, 2141, 9535, 300, 291, 1009, 3242, 420, 257, 8597, 2141, 13], "temperature": 0.0, "avg_logprob": -0.17338312677590242, "compression_ratio": 1.6455026455026456, "no_speech_prob": 8.395923941861838e-06}, {"id": 50, "seek": 19296, "start": 207.56, "end": 213.16, "text": " And then in turn, you encrypt that volume key with each time with a different key.", "tokens": [400, 550, 294, 1261, 11, 291, 17972, 662, 300, 5523, 2141, 365, 1184, 565, 365, 257, 819, 2141, 13], "temperature": 0.0, "avg_logprob": -0.17338312677590242, "compression_ratio": 1.6455026455026456, "no_speech_prob": 8.395923941861838e-06}, {"id": 51, "seek": 19296, "start": 213.16, "end": 216.44, "text": " And that's stored in these key slots area.", "tokens": [400, 300, 311, 12187, 294, 613, 2141, 24266, 1859, 13], "temperature": 0.0, "avg_logprob": -0.17338312677590242, "compression_ratio": 1.6455026455026456, "no_speech_prob": 8.395923941861838e-06}, {"id": 52, "seek": 21644, "start": 216.44, "end": 224.88, "text": " And that way, you can have multiple passphrases for the same volume.", "tokens": [400, 300, 636, 11, 291, 393, 362, 3866, 1320, 44598, 1957, 337, 264, 912, 5523, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 53, "seek": 21644, "start": 224.88, "end": 227.12, "text": " And yeah, where does that passphrase come from?", "tokens": [400, 1338, 11, 689, 775, 300, 1320, 44598, 651, 808, 490, 30], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 54, "seek": 21644, "start": 227.12, "end": 229.2, "text": " So it's usually entered by the user.", "tokens": [407, 309, 311, 2673, 9065, 538, 264, 4195, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 55, "seek": 21644, "start": 229.2, "end": 233.04, "text": " So in the init.rd, you are asked what's the passphrase that you want.", "tokens": [407, 294, 264, 3157, 13, 7800, 11, 291, 366, 2351, 437, 311, 264, 1320, 44598, 651, 300, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 56, "seek": 21644, "start": 233.04, "end": 234.12, "text": " And then you enter it.", "tokens": [400, 550, 291, 3242, 309, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 57, "seek": 21644, "start": 234.12, "end": 239.56, "text": " You could be a bit more sophisticated and insert a USB stick that has a file.", "tokens": [509, 727, 312, 257, 857, 544, 16950, 293, 8969, 257, 10109, 2897, 300, 575, 257, 3991, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 58, "seek": 21644, "start": 239.56, "end": 241.84, "text": " That's the same code pass, basically.", "tokens": [663, 311, 264, 912, 3089, 1320, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.16601595197405133, "compression_ratio": 1.6306306306306306, "no_speech_prob": 2.3524042262579314e-05}, {"id": 59, "seek": 24184, "start": 241.84, "end": 247.48, "text": " You could insert a Fido security key or a smart card, but what all of these have in common", "tokens": [509, 727, 8969, 257, 479, 2925, 3825, 2141, 420, 257, 4069, 2920, 11, 457, 437, 439, 295, 613, 362, 294, 2689], "temperature": 0.0, "avg_logprob": -0.1440120455862462, "compression_ratio": 1.5700934579439252, "no_speech_prob": 2.2811795133748092e-05}, {"id": 60, "seek": 24184, "start": 247.48, "end": 253.64000000000001, "text": " is that the user is inserting or writing or you need user involvement.", "tokens": [307, 300, 264, 4195, 307, 46567, 420, 3579, 420, 291, 643, 4195, 17447, 13], "temperature": 0.0, "avg_logprob": -0.1440120455862462, "compression_ratio": 1.5700934579439252, "no_speech_prob": 2.2811795133748092e-05}, {"id": 61, "seek": 24184, "start": 253.64000000000001, "end": 257.16, "text": " And in my project, it was an embedded system.", "tokens": [400, 294, 452, 1716, 11, 309, 390, 364, 16741, 1185, 13], "temperature": 0.0, "avg_logprob": -0.1440120455862462, "compression_ratio": 1.5700934579439252, "no_speech_prob": 2.2811795133748092e-05}, {"id": 62, "seek": 24184, "start": 257.16, "end": 261.04, "text": " And we don't have really a user powering up the devices.", "tokens": [400, 321, 500, 380, 362, 534, 257, 4195, 1347, 278, 493, 264, 5759, 13], "temperature": 0.0, "avg_logprob": -0.1440120455862462, "compression_ratio": 1.5700934579439252, "no_speech_prob": 2.2811795133748092e-05}, {"id": 63, "seek": 24184, "start": 261.04, "end": 269.0, "text": " And yeah, we need some sort of automated solution for unattended boots.", "tokens": [400, 1338, 11, 321, 643, 512, 1333, 295, 18473, 3827, 337, 47316, 3502, 15194, 13], "temperature": 0.0, "avg_logprob": -0.1440120455862462, "compression_ratio": 1.5700934579439252, "no_speech_prob": 2.2811795133748092e-05}, {"id": 64, "seek": 26900, "start": 269.0, "end": 271.96, "text": " And here is where trusted storage comes in.", "tokens": [400, 510, 307, 689, 16034, 6725, 1487, 294, 13], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 65, "seek": 26900, "start": 271.96, "end": 278.56, "text": " So in the regular case, the trusted storage is like the memory of the user or his USB", "tokens": [407, 294, 264, 3890, 1389, 11, 264, 16034, 6725, 307, 411, 264, 4675, 295, 264, 4195, 420, 702, 10109], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 66, "seek": 26900, "start": 278.56, "end": 279.56, "text": " stick.", "tokens": [2897, 13], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 67, "seek": 26900, "start": 279.56, "end": 286.52, "text": " But for an unattended boot, you need some on-chip or off-chip device that's appropriately", "tokens": [583, 337, 364, 47316, 3502, 11450, 11, 291, 643, 512, 322, 12, 339, 647, 420, 766, 12, 339, 647, 4302, 300, 311, 23505], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 68, "seek": 26900, "start": 286.52, "end": 289.52, "text": " secure that can hold the key.", "tokens": [7144, 300, 393, 1797, 264, 2141, 13], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 69, "seek": 26900, "start": 289.52, "end": 295.76, "text": " Such device is in many systems, the TPM or the trusted platform with yours.", "tokens": [9653, 4302, 307, 294, 867, 3652, 11, 264, 314, 18819, 420, 264, 16034, 3663, 365, 6342, 13], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 70, "seek": 26900, "start": 295.76, "end": 297.56, "text": " This is an industry-wide standard.", "tokens": [639, 307, 364, 3518, 12, 7990, 3832, 13], "temperature": 0.0, "avg_logprob": -0.17175162664734492, "compression_ratio": 1.581896551724138, "no_speech_prob": 5.2975869039073586e-05}, {"id": 71, "seek": 29756, "start": 297.56, "end": 304.32, "text": " It's also an international standard and it's mandated by Windows 11, which helps its adoption", "tokens": [467, 311, 611, 364, 5058, 3832, 293, 309, 311, 47563, 538, 8591, 2975, 11, 597, 3665, 1080, 19215], "temperature": 0.0, "avg_logprob": -0.18190914476421519, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.0001371588441543281}, {"id": 72, "seek": 29756, "start": 304.32, "end": 310.04, "text": " in a lot of modern systems because you couldn't boot Linux otherwise.", "tokens": [294, 257, 688, 295, 4363, 3652, 570, 291, 2809, 380, 11450, 18734, 5911, 13], "temperature": 0.0, "avg_logprob": -0.18190914476421519, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.0001371588441543281}, {"id": 73, "seek": 29756, "start": 310.04, "end": 316.36, "text": " They are available as discrete devices, as chips, sometimes on like a breakout board", "tokens": [814, 366, 2435, 382, 27706, 5759, 11, 382, 11583, 11, 2171, 322, 411, 257, 30067, 3150], "temperature": 0.0, "avg_logprob": -0.18190914476421519, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.0001371588441543281}, {"id": 74, "seek": 29756, "start": 316.36, "end": 321.0, "text": " for your motherboard, but they can also be implemented in firmware.", "tokens": [337, 428, 32916, 11, 457, 436, 393, 611, 312, 12270, 294, 30289, 13], "temperature": 0.0, "avg_logprob": -0.18190914476421519, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.0001371588441543281}, {"id": 75, "seek": 32100, "start": 321.0, "end": 328.0, "text": " And TPMs have this standardized interface where you can talk to them and they provide", "tokens": [400, 314, 18819, 82, 362, 341, 31677, 9226, 689, 291, 393, 751, 281, 552, 293, 436, 2893], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 76, "seek": 32100, "start": 328.0, "end": 330.12, "text": " you a lot of services.", "tokens": [291, 257, 688, 295, 3328, 13], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 77, "seek": 32100, "start": 330.12, "end": 334.68, "text": " What's interesting for us is that it has a random number generator built-in, so it has", "tokens": [708, 311, 1880, 337, 505, 307, 300, 309, 575, 257, 4974, 1230, 19265, 3094, 12, 259, 11, 370, 309, 575], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 78, "seek": 32100, "start": 334.68, "end": 338.0, "text": " its own entropy source and gives you access to it.", "tokens": [1080, 1065, 30867, 4009, 293, 2709, 291, 2105, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 79, "seek": 32100, "start": 338.0, "end": 341.2, "text": " And it holds a unique never-disclosed key.", "tokens": [400, 309, 9190, 257, 3845, 1128, 12, 13731, 3474, 1744, 2141, 13], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 80, "seek": 32100, "start": 341.2, "end": 345.36, "text": " And with this unique never-disclosed key, you can encrypt arbitrary data.", "tokens": [400, 365, 341, 3845, 1128, 12, 13731, 3474, 1744, 2141, 11, 291, 393, 17972, 662, 23211, 1412, 13], "temperature": 0.0, "avg_logprob": -0.13132814485199598, "compression_ratio": 1.6061946902654867, "no_speech_prob": 1.950783007487189e-05}, {"id": 81, "seek": 34536, "start": 345.36, "end": 353.08000000000004, "text": " So instead of having a passphrase that you need to remember, you could have an encrypted", "tokens": [407, 2602, 295, 1419, 257, 1320, 44598, 651, 300, 291, 643, 281, 1604, 11, 291, 727, 362, 364, 36663], "temperature": 0.0, "avg_logprob": -0.15012013284783615, "compression_ratio": 1.7448979591836735, "no_speech_prob": 2.2458532839664258e-05}, {"id": 82, "seek": 34536, "start": 353.08000000000004, "end": 359.0, "text": " passphrase and then you pass it to the TPM and the TPM will decrypt it with this unique", "tokens": [1320, 44598, 651, 293, 550, 291, 1320, 309, 281, 264, 314, 18819, 293, 264, 314, 18819, 486, 979, 627, 662, 309, 365, 341, 3845], "temperature": 0.0, "avg_logprob": -0.15012013284783615, "compression_ratio": 1.7448979591836735, "no_speech_prob": 2.2458532839664258e-05}, {"id": 83, "seek": 34536, "start": 359.0, "end": 364.92, "text": " never-disclosed key that it has inside and then pass you the data in a decrypted form,", "tokens": [1128, 12, 13731, 3474, 1744, 2141, 300, 309, 575, 1854, 293, 550, 1320, 291, 264, 1412, 294, 257, 979, 627, 25383, 1254, 11], "temperature": 0.0, "avg_logprob": -0.15012013284783615, "compression_ratio": 1.7448979591836735, "no_speech_prob": 2.2458532839664258e-05}, {"id": 84, "seek": 34536, "start": 364.92, "end": 369.16, "text": " which you can then pass into the M-crypt or into the crypto setup or whatever.", "tokens": [597, 291, 393, 550, 1320, 666, 264, 376, 12, 46555, 662, 420, 666, 264, 17240, 8657, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.15012013284783615, "compression_ratio": 1.7448979591836735, "no_speech_prob": 2.2458532839664258e-05}, {"id": 85, "seek": 36916, "start": 369.16, "end": 378.64000000000004, "text": " And you can make this even dependent on having reached a state that's an unintegrity measurement.", "tokens": [400, 291, 393, 652, 341, 754, 12334, 322, 1419, 6488, 257, 1785, 300, 311, 364, 517, 31131, 507, 13160, 13], "temperature": 0.0, "avg_logprob": -0.204440842212086, "compression_ratio": 1.6395348837209303, "no_speech_prob": 2.9725553758908063e-05}, {"id": 86, "seek": 36916, "start": 378.64000000000004, "end": 387.20000000000005, "text": " So each boot state could verify the boot stage after it and then tell the TPM this is a measurement", "tokens": [407, 1184, 11450, 1785, 727, 16888, 264, 11450, 3233, 934, 309, 293, 550, 980, 264, 314, 18819, 341, 307, 257, 13160], "temperature": 0.0, "avg_logprob": -0.204440842212086, "compression_ratio": 1.6395348837209303, "no_speech_prob": 2.9725553758908063e-05}, {"id": 87, "seek": 36916, "start": 387.20000000000005, "end": 388.20000000000005, "text": " value.", "tokens": [2158, 13], "temperature": 0.0, "avg_logprob": -0.204440842212086, "compression_ratio": 1.6395348837209303, "no_speech_prob": 2.9725553758908063e-05}, {"id": 88, "seek": 36916, "start": 388.20000000000005, "end": 393.04, "text": " And these measurement values are concatenated and hashed and kept in the TPM.", "tokens": [400, 613, 13160, 4190, 366, 1588, 7186, 770, 293, 22019, 292, 293, 4305, 294, 264, 314, 18819, 13], "temperature": 0.0, "avg_logprob": -0.204440842212086, "compression_ratio": 1.6395348837209303, "no_speech_prob": 2.9725553758908063e-05}, {"id": 89, "seek": 39304, "start": 393.04, "end": 400.08000000000004, "text": " And you can configure the TPM to only release and only to decrypt data when it reaches that", "tokens": [400, 291, 393, 22162, 264, 314, 18819, 281, 787, 4374, 293, 787, 281, 979, 627, 662, 1412, 562, 309, 14235, 300], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 90, "seek": 39304, "start": 400.08000000000004, "end": 401.32, "text": " state.", "tokens": [1785, 13], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 91, "seek": 39304, "start": 401.32, "end": 410.04, "text": " And then you can be, yeah, and when you configure it correctly, the TPM would only decrypt your", "tokens": [400, 550, 291, 393, 312, 11, 1338, 11, 293, 562, 291, 22162, 309, 8944, 11, 264, 314, 18819, 576, 787, 979, 627, 662, 428], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 92, "seek": 39304, "start": 410.04, "end": 416.20000000000005, "text": " encrypted blob when you are indeed in that secure, in that measured boot state that you", "tokens": [36663, 46115, 562, 291, 366, 6451, 294, 300, 7144, 11, 294, 300, 12690, 11450, 1785, 300, 291], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 93, "seek": 39304, "start": 416.20000000000005, "end": 417.20000000000005, "text": " want to be.", "tokens": [528, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 94, "seek": 39304, "start": 417.20000000000005, "end": 419.04, "text": " You can even bind it to a time.", "tokens": [509, 393, 754, 14786, 309, 281, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.14781610258332975, "compression_ratio": 1.7340425531914894, "no_speech_prob": 3.4208391298307106e-05}, {"id": 95, "seek": 41904, "start": 419.04, "end": 425.44, "text": " So after a given time has elapsed, you can't access it anymore.", "tokens": [407, 934, 257, 2212, 565, 575, 806, 2382, 292, 11, 291, 393, 380, 2105, 309, 3602, 13], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 96, "seek": 41904, "start": 425.44, "end": 429.16, "text": " Yeah, how does it look like in practice?", "tokens": [865, 11, 577, 775, 309, 574, 411, 294, 3124, 30], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 97, "seek": 41904, "start": 429.16, "end": 435.72, "text": " The kernel has drivers for that that abstract away the different modes of communication.", "tokens": [440, 28256, 575, 11590, 337, 300, 300, 12649, 1314, 264, 819, 14068, 295, 6101, 13], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 98, "seek": 41904, "start": 435.72, "end": 438.24, "text": " It can be I squared C, it can be SPI.", "tokens": [467, 393, 312, 286, 8889, 383, 11, 309, 393, 312, 8420, 40, 13], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 99, "seek": 41904, "start": 438.24, "end": 440.56, "text": " You don't need to worry about that in user space.", "tokens": [509, 500, 380, 643, 281, 3292, 466, 300, 294, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 100, "seek": 41904, "start": 440.56, "end": 444.04, "text": " You have these device files that provide your access.", "tokens": [509, 362, 613, 4302, 7098, 300, 2893, 428, 2105, 13], "temperature": 0.0, "avg_logprob": -0.21566824860625214, "compression_ratio": 1.4955357142857142, "no_speech_prob": 2.4654602384543978e-05}, {"id": 101, "seek": 44404, "start": 444.04, "end": 452.32, "text": " There are user space libraries that wrap that and there is even a system D support since", "tokens": [821, 366, 4195, 1901, 15148, 300, 7019, 300, 293, 456, 307, 754, 257, 1185, 413, 1406, 1670], "temperature": 0.0, "avg_logprob": -0.23080251057942708, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.428465399541892e-05}, {"id": 102, "seek": 44404, "start": 452.32, "end": 459.32000000000005, "text": " I think a year and a half or so, where you can enroll looks keys into TPMs.", "tokens": [286, 519, 257, 1064, 293, 257, 1922, 420, 370, 11, 689, 291, 393, 12266, 1542, 9317, 666, 314, 18819, 82, 13], "temperature": 0.0, "avg_logprob": -0.23080251057942708, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.428465399541892e-05}, {"id": 103, "seek": 44404, "start": 459.32000000000005, "end": 462.12, "text": " It's very easy to set up.", "tokens": [467, 311, 588, 1858, 281, 992, 493, 13], "temperature": 0.0, "avg_logprob": -0.23080251057942708, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.428465399541892e-05}, {"id": 104, "seek": 44404, "start": 462.12, "end": 469.68, "text": " But whatever you do, the common way of using this with looks has the common, you could", "tokens": [583, 2035, 291, 360, 11, 264, 2689, 636, 295, 1228, 341, 365, 1542, 575, 264, 2689, 11, 291, 727], "temperature": 0.0, "avg_logprob": -0.23080251057942708, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.428465399541892e-05}, {"id": 105, "seek": 46968, "start": 469.68, "end": 476.92, "text": " call it issue that privileged user space has access to this key material.", "tokens": [818, 309, 2734, 300, 25293, 4195, 1901, 575, 2105, 281, 341, 2141, 2527, 13], "temperature": 0.0, "avg_logprob": -0.22565493376358695, "compression_ratio": 1.748792270531401, "no_speech_prob": 3.371291313669644e-05}, {"id": 106, "seek": 46968, "start": 476.92, "end": 482.88, "text": " So if you, you have seen there is this JSON area where you could store stuff.", "tokens": [407, 498, 291, 11, 291, 362, 1612, 456, 307, 341, 31828, 1859, 689, 291, 727, 3531, 1507, 13], "temperature": 0.0, "avg_logprob": -0.22565493376358695, "compression_ratio": 1.748792270531401, "no_speech_prob": 3.371291313669644e-05}, {"id": 107, "seek": 46968, "start": 482.88, "end": 485.8, "text": " So you could store your encrypted key there.", "tokens": [407, 291, 727, 3531, 428, 36663, 2141, 456, 13], "temperature": 0.0, "avg_logprob": -0.22565493376358695, "compression_ratio": 1.748792270531401, "no_speech_prob": 3.371291313669644e-05}, {"id": 108, "seek": 46968, "start": 485.8, "end": 491.92, "text": " And what would happen on boot is that prep setup or system decrypt setup would go there,", "tokens": [400, 437, 576, 1051, 322, 11450, 307, 300, 2666, 8657, 420, 1185, 979, 627, 662, 8657, 576, 352, 456, 11], "temperature": 0.0, "avg_logprob": -0.22565493376358695, "compression_ratio": 1.748792270531401, "no_speech_prob": 3.371291313669644e-05}, {"id": 109, "seek": 46968, "start": 491.92, "end": 496.08, "text": " it would get this encrypted key, encrypted key, it would send it to the TPM.", "tokens": [309, 576, 483, 341, 36663, 2141, 11, 36663, 2141, 11, 309, 576, 2845, 309, 281, 264, 314, 18819, 13], "temperature": 0.0, "avg_logprob": -0.22565493376358695, "compression_ratio": 1.748792270531401, "no_speech_prob": 3.371291313669644e-05}, {"id": 110, "seek": 49608, "start": 496.08, "end": 499.76, "text": " The TPM would do its checks and see, okay, I'm in the correct state.", "tokens": [440, 314, 18819, 576, 360, 1080, 13834, 293, 536, 11, 1392, 11, 286, 478, 294, 264, 3006, 1785, 13], "temperature": 0.0, "avg_logprob": -0.1485739467299987, "compression_ratio": 1.7142857142857142, "no_speech_prob": 2.354042408114765e-05}, {"id": 111, "seek": 49608, "start": 499.76, "end": 504.76, "text": " It will decrypt this data and then send it back to your user space.", "tokens": [467, 486, 979, 627, 662, 341, 1412, 293, 550, 2845, 309, 646, 281, 428, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.1485739467299987, "compression_ratio": 1.7142857142857142, "no_speech_prob": 2.354042408114765e-05}, {"id": 112, "seek": 49608, "start": 504.76, "end": 510.36, "text": " And then your user space now has this passphrase, which it could use to decrypt the M-crypt", "tokens": [400, 550, 428, 4195, 1901, 586, 575, 341, 1320, 44598, 651, 11, 597, 309, 727, 764, 281, 979, 627, 662, 264, 376, 12, 46555, 662], "temperature": 0.0, "avg_logprob": -0.1485739467299987, "compression_ratio": 1.7142857142857142, "no_speech_prob": 2.354042408114765e-05}, {"id": 113, "seek": 49608, "start": 510.36, "end": 512.96, "text": " key and then it would pass it into the kernel again.", "tokens": [2141, 293, 550, 309, 576, 1320, 309, 666, 264, 28256, 797, 13], "temperature": 0.0, "avg_logprob": -0.1485739467299987, "compression_ratio": 1.7142857142857142, "no_speech_prob": 2.354042408114765e-05}, {"id": 114, "seek": 49608, "start": 512.96, "end": 519.76, "text": " So it's a real roundabout way to get the M-crypt key into the kernel key ring.", "tokens": [407, 309, 311, 257, 957, 3098, 21970, 636, 281, 483, 264, 376, 12, 46555, 662, 2141, 666, 264, 28256, 2141, 4875, 13], "temperature": 0.0, "avg_logprob": -0.1485739467299987, "compression_ratio": 1.7142857142857142, "no_speech_prob": 2.354042408114765e-05}, {"id": 115, "seek": 51976, "start": 519.76, "end": 526.0, "text": " So the idea behind trusted key was why not directly decrypt the TPM secured key into", "tokens": [407, 264, 1558, 2261, 16034, 2141, 390, 983, 406, 3838, 979, 627, 662, 264, 314, 18819, 22905, 2141, 666], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 116, "seek": 51976, "start": 526.0, "end": 533.3199999999999, "text": " the kernel key ring and reference it from there without involving user space at all.", "tokens": [264, 28256, 2141, 4875, 293, 6408, 309, 490, 456, 1553, 17030, 4195, 1901, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 117, "seek": 51976, "start": 533.3199999999999, "end": 535.84, "text": " And yeah, so it has been implemented.", "tokens": [400, 1338, 11, 370, 309, 575, 668, 12270, 13], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 118, "seek": 51976, "start": 535.84, "end": 537.64, "text": " It was first added in 2010.", "tokens": [467, 390, 700, 3869, 294, 9657, 13], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 119, "seek": 51976, "start": 537.64, "end": 540.68, "text": " The first kernel was released in 2011.", "tokens": [440, 700, 28256, 390, 4736, 294, 10154, 13], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 120, "seek": 51976, "start": 540.68, "end": 546.76, "text": " It was originally TPM specific, but the naming was held generic enough, I think, in hopes", "tokens": [467, 390, 7993, 314, 18819, 2685, 11, 457, 264, 25290, 390, 5167, 19577, 1547, 11, 286, 519, 11, 294, 13681], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 121, "seek": 51976, "start": 546.76, "end": 549.12, "text": " that it can be extended in future.", "tokens": [300, 309, 393, 312, 10913, 294, 2027, 13], "temperature": 0.0, "avg_logprob": -0.20218512155477283, "compression_ratio": 1.5896414342629481, "no_speech_prob": 2.210273851233069e-05}, {"id": 122, "seek": 54912, "start": 549.12, "end": 554.88, "text": " So the same patch series that added it added also encrypted keys.", "tokens": [407, 264, 912, 9972, 2638, 300, 3869, 309, 3869, 611, 36663, 9317, 13], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 123, "seek": 54912, "start": 554.88, "end": 563.48, "text": " So encrypted keys are keys that you can only observe from user space in encrypted form.", "tokens": [407, 36663, 9317, 366, 9317, 300, 291, 393, 787, 11441, 490, 4195, 1901, 294, 36663, 1254, 13], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 124, "seek": 54912, "start": 563.48, "end": 566.12, "text": " That's how it should be.", "tokens": [663, 311, 577, 309, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 125, "seek": 54912, "start": 566.12, "end": 569.5600000000001, "text": " So you will tell the kernel, generate a key for me.", "tokens": [407, 291, 486, 980, 264, 28256, 11, 8460, 257, 2141, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 126, "seek": 54912, "start": 569.5600000000001, "end": 573.2, "text": " And then when you try to export the key, you only get it in encrypted form.", "tokens": [400, 550, 562, 291, 853, 281, 10725, 264, 2141, 11, 291, 787, 483, 309, 294, 36663, 1254, 13], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 127, "seek": 54912, "start": 573.2, "end": 577.04, "text": " And then when you want to load it, you give it a kernel in encrypted form and it will", "tokens": [400, 550, 562, 291, 528, 281, 3677, 309, 11, 291, 976, 309, 257, 28256, 294, 36663, 1254, 293, 309, 486], "temperature": 0.0, "avg_logprob": -0.1616061715518727, "compression_ratio": 1.875598086124402, "no_speech_prob": 2.544757262512576e-05}, {"id": 128, "seek": 57704, "start": 577.04, "end": 581.88, "text": " decrypt it, but it will stay in kernel memory in decrypted form.", "tokens": [979, 627, 662, 309, 11, 457, 309, 486, 1754, 294, 28256, 4675, 294, 979, 627, 25383, 1254, 13], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 129, "seek": 57704, "start": 581.88, "end": 584.3199999999999, "text": " And that's encrypted keys.", "tokens": [400, 300, 311, 36663, 9317, 13], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 130, "seek": 57704, "start": 584.3199999999999, "end": 588.7199999999999, "text": " And trusted key additionally have hardware root of trust.", "tokens": [400, 16034, 2141, 43181, 362, 8837, 5593, 295, 3361, 13], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 131, "seek": 57704, "start": 588.7199999999999, "end": 592.0799999999999, "text": " So they use a TPM for doing the encryption and decryption.", "tokens": [407, 436, 764, 257, 314, 18819, 337, 884, 264, 29575, 293, 979, 627, 1695, 13], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 132, "seek": 57704, "start": 592.0799999999999, "end": 598.76, "text": " So in theory, you shouldn't be able to decrypt a trusted key to load it and have it decrypted", "tokens": [407, 294, 5261, 11, 291, 4659, 380, 312, 1075, 281, 979, 627, 662, 257, 16034, 2141, 281, 3677, 309, 293, 362, 309, 979, 627, 25383], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 133, "seek": 57704, "start": 598.76, "end": 602.4, "text": " on another system than the one where you generate it on.", "tokens": [322, 1071, 1185, 813, 264, 472, 689, 291, 8460, 309, 322, 13], "temperature": 0.0, "avg_logprob": -0.12476866722106933, "compression_ratio": 1.7095238095238094, "no_speech_prob": 5.469706957228482e-05}, {"id": 134, "seek": 60240, "start": 602.4, "end": 607.56, "text": " Because on the other system, you would have another trust source with its own unique key", "tokens": [1436, 322, 264, 661, 1185, 11, 291, 576, 362, 1071, 3361, 4009, 365, 1080, 1065, 3845, 2141], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 135, "seek": 60240, "start": 607.56, "end": 611.12, "text": " which is used for the encryption.", "tokens": [597, 307, 1143, 337, 264, 29575, 13], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 136, "seek": 60240, "start": 611.12, "end": 613.04, "text": " How does it look like in code?", "tokens": [1012, 775, 309, 574, 411, 294, 3089, 30], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 137, "seek": 60240, "start": 613.04, "end": 620.04, "text": " So it's basically the same line as we have seen before, but instead of having a 32-byte", "tokens": [407, 309, 311, 1936, 264, 912, 1622, 382, 321, 362, 1612, 949, 11, 457, 2602, 295, 1419, 257, 8858, 12, 2322, 975], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 138, "seek": 60240, "start": 620.04, "end": 625.92, "text": " long login key, we have a 32-byte trusted key here.", "tokens": [938, 24276, 2141, 11, 321, 362, 257, 8858, 12, 2322, 975, 16034, 2141, 510, 13], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 139, "seek": 60240, "start": 625.92, "end": 628.12, "text": " It's called KMK.", "tokens": [467, 311, 1219, 591, 48855, 13], "temperature": 0.0, "avg_logprob": -0.149790078066708, "compression_ratio": 1.4691943127962086, "no_speech_prob": 2.9300137612153776e-05}, {"id": 140, "seek": 62812, "start": 628.12, "end": 634.4, "text": " And to create it, you can use the key CTL command, you add a trusted key.", "tokens": [400, 281, 1884, 309, 11, 291, 393, 764, 264, 2141, 19529, 43, 5622, 11, 291, 909, 257, 16034, 2141, 13], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 141, "seek": 62812, "start": 634.4, "end": 639.24, "text": " You don't specify the key material like we did with the logon key because you can do", "tokens": [509, 500, 380, 16500, 264, 2141, 2527, 411, 321, 630, 365, 264, 3565, 266, 2141, 570, 291, 393, 360], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 142, "seek": 62812, "start": 639.24, "end": 640.24, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 143, "seek": 62812, "start": 640.24, "end": 644.6, "text": " You can just ask the kernel to generate you a 32-byte key.", "tokens": [509, 393, 445, 1029, 264, 28256, 281, 8460, 291, 257, 8858, 12, 2322, 975, 2141, 13], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 144, "seek": 62812, "start": 644.6, "end": 651.12, "text": " And then when you try to pipe it, which is the command to pipe the key contents out,", "tokens": [400, 550, 562, 291, 853, 281, 11240, 309, 11, 597, 307, 264, 5622, 281, 11240, 264, 2141, 15768, 484, 11], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 145, "seek": 62812, "start": 651.12, "end": 657.8, "text": " unlike a user key which would just output the key material in plain text, it would output", "tokens": [8343, 257, 4195, 2141, 597, 576, 445, 5598, 264, 2141, 2527, 294, 11121, 2487, 11, 309, 576, 5598], "temperature": 0.0, "avg_logprob": -0.16200741059189544, "compression_ratio": 1.7533039647577093, "no_speech_prob": 3.070217644562945e-05}, {"id": 146, "seek": 65780, "start": 657.8, "end": 665.16, "text": " the encrypted key and set you can store wherever and use it on subsequent boots.", "tokens": [264, 36663, 2141, 293, 992, 291, 393, 3531, 8660, 293, 764, 309, 322, 19962, 15194, 13], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 147, "seek": 65780, "start": 665.16, "end": 671.88, "text": " So what the rest does is it sets up a loop device and does the encrypt on it and write", "tokens": [407, 437, 264, 1472, 775, 307, 309, 6352, 493, 257, 6367, 4302, 293, 775, 264, 17972, 662, 322, 309, 293, 2464], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 148, "seek": 65780, "start": 671.88, "end": 674.0799999999999, "text": " it works and then it reboots.", "tokens": [309, 1985, 293, 550, 309, 26802, 1971, 13], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 149, "seek": 65780, "start": 674.0799999999999, "end": 679.52, "text": " And then on the second boot, if you were to create a new trusted key, it would be completely", "tokens": [400, 550, 322, 264, 1150, 11450, 11, 498, 291, 645, 281, 1884, 257, 777, 16034, 2141, 11, 309, 576, 312, 2584], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 150, "seek": 65780, "start": 679.52, "end": 680.52, "text": " different.", "tokens": [819, 13], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 151, "seek": 65780, "start": 680.52, "end": 682.8, "text": " It would be generated randomly.", "tokens": [467, 576, 312, 10833, 16979, 13], "temperature": 0.0, "avg_logprob": -0.1482774235985496, "compression_ratio": 1.6733668341708543, "no_speech_prob": 4.4604330469155684e-05}, {"id": 152, "seek": 68280, "start": 682.8, "end": 688.0799999999999, "text": " And you want to use the key that you have stored already, which is what the blue line", "tokens": [400, 291, 528, 281, 764, 264, 2141, 300, 291, 362, 12187, 1217, 11, 597, 307, 437, 264, 3344, 1622], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 153, "seek": 68280, "start": 688.0799999999999, "end": 689.0799999999999, "text": " is doing.", "tokens": [307, 884, 13], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 154, "seek": 68280, "start": 689.0799999999999, "end": 694.8399999999999, "text": " It does add trusted KMK, but instead of creating a new key, it loads the key blobs that we", "tokens": [467, 775, 909, 16034, 591, 48855, 11, 457, 2602, 295, 4084, 257, 777, 2141, 11, 309, 12668, 264, 2141, 1749, 929, 300, 321], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 155, "seek": 68280, "start": 694.8399999999999, "end": 696.4, "text": " have stored.", "tokens": [362, 12187, 13], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 156, "seek": 68280, "start": 696.4, "end": 702.52, "text": " And with that, you should be able to read back what you have written before.", "tokens": [400, 365, 300, 11, 291, 820, 312, 1075, 281, 1401, 646, 437, 291, 362, 3720, 949, 13], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 157, "seek": 68280, "start": 702.52, "end": 707.5999999999999, "text": " Yeah, so that's how it works.", "tokens": [865, 11, 370, 300, 311, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.14943042668429288, "compression_ratio": 1.5692307692307692, "no_speech_prob": 4.6042339818086475e-05}, {"id": 158, "seek": 70760, "start": 707.6, "end": 713.28, "text": " We have a way to do it in user space already, and that's how it's usually done.", "tokens": [492, 362, 257, 636, 281, 360, 309, 294, 4195, 1901, 1217, 11, 293, 300, 311, 577, 309, 311, 2673, 1096, 13], "temperature": 0.0, "avg_logprob": -0.14415666904855282, "compression_ratio": 1.5517241379310345, "no_speech_prob": 5.380729999160394e-05}, {"id": 159, "seek": 70760, "start": 713.28, "end": 719.48, "text": " And not everyone agrees that sets strict advantages by doing it in the kernel.", "tokens": [400, 406, 1518, 26383, 300, 6352, 10910, 14906, 538, 884, 309, 294, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.14415666904855282, "compression_ratio": 1.5517241379310345, "no_speech_prob": 5.380729999160394e-05}, {"id": 160, "seek": 70760, "start": 719.48, "end": 726.48, "text": " But what was interesting to me is that it is a very useful interface to represent much", "tokens": [583, 437, 390, 1880, 281, 385, 307, 300, 309, 307, 257, 588, 4420, 9226, 281, 2906, 709], "temperature": 0.0, "avg_logprob": -0.14415666904855282, "compression_ratio": 1.5517241379310345, "no_speech_prob": 5.380729999160394e-05}, {"id": 161, "seek": 70760, "start": 726.48, "end": 729.0, "text": " more than just TPMs.", "tokens": [544, 813, 445, 314, 18819, 82, 13], "temperature": 0.0, "avg_logprob": -0.14415666904855282, "compression_ratio": 1.5517241379310345, "no_speech_prob": 5.380729999160394e-05}, {"id": 162, "seek": 70760, "start": 729.0, "end": 734.4, "text": " Because on modern system, you can have off-ship secure enclaves, basically a TPM that doesn't", "tokens": [1436, 322, 4363, 1185, 11, 291, 393, 362, 766, 12, 5278, 7144, 20987, 5423, 11, 1936, 257, 314, 18819, 300, 1177, 380], "temperature": 0.0, "avg_logprob": -0.14415666904855282, "compression_ratio": 1.5517241379310345, "no_speech_prob": 5.380729999160394e-05}, {"id": 163, "seek": 73440, "start": 734.4, "end": 740.4, "text": " speak to TPM protocol and doesn't implement everything, but it implements part of it.", "tokens": [1710, 281, 314, 18819, 10336, 293, 1177, 380, 4445, 1203, 11, 457, 309, 704, 17988, 644, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.14446023222687956, "compression_ratio": 1.583756345177665, "no_speech_prob": 4.059524871991016e-05}, {"id": 164, "seek": 73440, "start": 740.4, "end": 743.92, "text": " You can have an on-ship trusted execution environment.", "tokens": [509, 393, 362, 364, 322, 12, 5278, 16034, 15058, 2823, 13], "temperature": 0.0, "avg_logprob": -0.14446023222687956, "compression_ratio": 1.583756345177665, "no_speech_prob": 4.059524871991016e-05}, {"id": 165, "seek": 73440, "start": 743.92, "end": 748.36, "text": " You can have crypto units inside everyday socks.", "tokens": [509, 393, 362, 17240, 6815, 1854, 7429, 17564, 13], "temperature": 0.0, "avg_logprob": -0.14446023222687956, "compression_ratio": 1.583756345177665, "no_speech_prob": 4.059524871991016e-05}, {"id": 166, "seek": 73440, "start": 748.36, "end": 754.4, "text": " Very often you have a crypto accelerator that also has access to a key that it could use", "tokens": [4372, 2049, 291, 362, 257, 17240, 39889, 300, 611, 575, 2105, 281, 257, 2141, 300, 309, 727, 764], "temperature": 0.0, "avg_logprob": -0.14446023222687956, "compression_ratio": 1.583756345177665, "no_speech_prob": 4.059524871991016e-05}, {"id": 167, "seek": 73440, "start": 754.4, "end": 757.68, "text": " for wrapping and unwrapping data.", "tokens": [337, 21993, 293, 14853, 424, 3759, 1412, 13], "temperature": 0.0, "avg_logprob": -0.14446023222687956, "compression_ratio": 1.583756345177665, "no_speech_prob": 4.059524871991016e-05}, {"id": 168, "seek": 75768, "start": 757.68, "end": 765.2399999999999, "text": " And indeed, in 2019, work started from Sumit Garg at Linaro to generalize trusted keys", "tokens": [400, 6451, 11, 294, 6071, 11, 589, 1409, 490, 8626, 270, 7995, 70, 412, 441, 6470, 78, 281, 2674, 1125, 16034, 9317], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 169, "seek": 75768, "start": 765.2399999999999, "end": 768.76, "text": " and add T support in the first instance.", "tokens": [293, 909, 314, 1406, 294, 264, 700, 5197, 13], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 170, "seek": 75768, "start": 768.76, "end": 769.76, "text": " So what is T?", "tokens": [407, 437, 307, 314, 30], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 171, "seek": 75768, "start": 769.76, "end": 774.16, "text": " T is also an API standard.", "tokens": [314, 307, 611, 364, 9362, 3832, 13], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 172, "seek": 75768, "start": 774.16, "end": 781.64, "text": " And what it's about, it's having a hardware isolated environment where you can run trusted", "tokens": [400, 437, 309, 311, 466, 11, 309, 311, 1419, 257, 8837, 14621, 2823, 689, 291, 393, 1190, 16034], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 173, "seek": 75768, "start": 781.64, "end": 785.7199999999999, "text": " applications on the same CPU where you execute your Linux.", "tokens": [5821, 322, 264, 912, 13199, 689, 291, 14483, 428, 18734, 13], "temperature": 0.0, "avg_logprob": -0.185892382333445, "compression_ratio": 1.4454545454545455, "no_speech_prob": 9.36273136176169e-06}, {"id": 174, "seek": 78572, "start": 785.72, "end": 791.72, "text": " But thanks to this hardware isolation, normally armed trust zone, if you do everything right", "tokens": [583, 3231, 281, 341, 8837, 16001, 11, 5646, 16297, 3361, 6668, 11, 498, 291, 360, 1203, 558], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 175, "seek": 78572, "start": 791.72, "end": 797.8000000000001, "text": " and have firewalls in place and all that stuff, you shouldn't be able to read the secure memory", "tokens": [293, 362, 36109, 82, 294, 1081, 293, 439, 300, 1507, 11, 291, 4659, 380, 312, 1075, 281, 1401, 264, 7144, 4675], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 176, "seek": 78572, "start": 797.8000000000001, "end": 802.12, "text": " from your normal world, which is Linux.", "tokens": [490, 428, 2710, 1002, 11, 597, 307, 18734, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 177, "seek": 78572, "start": 802.12, "end": 804.96, "text": " And these trusted applications can do basically everything.", "tokens": [400, 613, 16034, 5821, 393, 360, 1936, 1203, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 178, "seek": 78572, "start": 804.96, "end": 808.28, "text": " You can have a trusted application that offers you a TPM.", "tokens": [509, 393, 362, 257, 16034, 3861, 300, 7736, 291, 257, 314, 18819, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 179, "seek": 78572, "start": 808.28, "end": 811.6800000000001, "text": " And in that case, you could just use trusted keys with TPMs.", "tokens": [400, 294, 300, 1389, 11, 291, 727, 445, 764, 16034, 9317, 365, 314, 18819, 82, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 180, "seek": 78572, "start": 811.6800000000001, "end": 813.52, "text": " But you can do basically anything.", "tokens": [583, 291, 393, 360, 1936, 1340, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 181, "seek": 78572, "start": 813.52, "end": 814.52, "text": " It's software.", "tokens": [467, 311, 4722, 13], "temperature": 0.0, "avg_logprob": -0.1467297202662418, "compression_ratio": 1.705223880597015, "no_speech_prob": 2.390078589087352e-05}, {"id": 182, "seek": 81452, "start": 814.52, "end": 819.48, "text": " You can just do random number generation in T. You can do key sealing and unsealing", "tokens": [509, 393, 445, 360, 4974, 1230, 5125, 294, 314, 13, 509, 393, 360, 2141, 48678, 293, 517, 405, 4270], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 183, "seek": 81452, "start": 819.48, "end": 821.28, "text": " with a hardware unique key.", "tokens": [365, 257, 8837, 3845, 2141, 13], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 184, "seek": 81452, "start": 821.28, "end": 826.4, "text": " So that's available on some processors that when you are in the secure mode, you have", "tokens": [407, 300, 311, 2435, 322, 512, 27751, 300, 562, 291, 366, 294, 264, 7144, 4391, 11, 291, 362], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 185, "seek": 81452, "start": 826.4, "end": 832.48, "text": " access to a key that you can never see from Linux, which is unique and fused in.", "tokens": [2105, 281, 257, 2141, 300, 291, 393, 1128, 536, 490, 18734, 11, 597, 307, 3845, 293, 283, 4717, 294, 13], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 186, "seek": 81452, "start": 832.48, "end": 838.04, "text": " And there are even people doing clock reset power domain support stuff in it because they", "tokens": [400, 456, 366, 754, 561, 884, 7830, 14322, 1347, 9274, 1406, 1507, 294, 309, 570, 436], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 187, "seek": 81452, "start": 838.04, "end": 841.52, "text": " don't want Linux to have access to these things.", "tokens": [500, 380, 528, 18734, 281, 362, 2105, 281, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.10364232613490178, "compression_ratio": 1.641732283464567, "no_speech_prob": 1.1649271073110867e-05}, {"id": 188, "seek": 84152, "start": 841.52, "end": 847.0, "text": " So if you are interested, you can just grab the kernel tree for a T client driver and see", "tokens": [407, 498, 291, 366, 3102, 11, 291, 393, 445, 4444, 264, 28256, 4230, 337, 257, 314, 6423, 6787, 293, 536], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 189, "seek": 84152, "start": 847.0, "end": 850.0799999999999, "text": " all the stuff that's there.", "tokens": [439, 264, 1507, 300, 311, 456, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 190, "seek": 84152, "start": 850.0799999999999, "end": 856.04, "text": " And what was interesting to me was the crypto unit inside the IMX SOCs.", "tokens": [400, 437, 390, 1880, 281, 385, 390, 264, 17240, 4985, 1854, 264, 21463, 55, 10621, 33290, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 191, "seek": 84152, "start": 856.04, "end": 860.16, "text": " It's called CAM by free scale.", "tokens": [467, 311, 1219, 27040, 538, 1737, 4373, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 192, "seek": 84152, "start": 860.16, "end": 862.56, "text": " And we already have a CAM driver in Linux.", "tokens": [400, 321, 1217, 362, 257, 27040, 6787, 294, 18734, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 193, "seek": 84152, "start": 862.56, "end": 864.36, "text": " It does random number generation.", "tokens": [467, 775, 4974, 1230, 5125, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 194, "seek": 84152, "start": 864.36, "end": 866.88, "text": " It does crypto acceleration.", "tokens": [467, 775, 17240, 17162, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 195, "seek": 84152, "start": 866.88, "end": 868.6, "text": " It works a bit like a network card.", "tokens": [467, 1985, 257, 857, 411, 257, 3209, 2920, 13], "temperature": 0.0, "avg_logprob": -0.20785810470581054, "compression_ratio": 1.6017699115044248, "no_speech_prob": 8.662887921673246e-06}, {"id": 196, "seek": 86860, "start": 868.6, "end": 874.32, "text": " So I have these shared TMA rings where you push the jobs you want the CAM to do.", "tokens": [407, 286, 362, 613, 5507, 314, 9998, 11136, 689, 291, 2944, 264, 4782, 291, 528, 264, 27040, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 197, "seek": 86860, "start": 874.32, "end": 876.9200000000001, "text": " And then the CAM replies to you.", "tokens": [400, 550, 264, 27040, 42289, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 198, "seek": 86860, "start": 876.9200000000001, "end": 881.0, "text": " And you can do, as I said, the crypto acceleration RNG.", "tokens": [400, 291, 393, 360, 11, 382, 286, 848, 11, 264, 17240, 17162, 497, 30237, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 199, "seek": 86860, "start": 881.0, "end": 888.08, "text": " And it also has access to a one-time programmable master key that's fused by NXP in the factory.", "tokens": [400, 309, 611, 575, 2105, 281, 257, 472, 12, 3766, 37648, 712, 4505, 2141, 300, 311, 283, 4717, 538, 426, 55, 47, 294, 264, 9265, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 200, "seek": 86860, "start": 888.08, "end": 894.44, "text": " And that's unique between devices.", "tokens": [400, 300, 311, 3845, 1296, 5759, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 201, "seek": 86860, "start": 894.44, "end": 896.32, "text": " That's the selling point.", "tokens": [663, 311, 264, 6511, 935, 13], "temperature": 0.0, "avg_logprob": -0.2008445660273234, "compression_ratio": 1.5, "no_speech_prob": 3.589819971239194e-05}, {"id": 202, "seek": 89632, "start": 896.32, "end": 901.9200000000001, "text": " And the CAM can use it for red blob generation, which means it seals and unseals user supplied", "tokens": [400, 264, 27040, 393, 764, 309, 337, 2182, 46115, 5125, 11, 597, 1355, 309, 32031, 293, 517, 405, 1124, 4195, 27625], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 203, "seek": 89632, "start": 901.9200000000001, "end": 903.5600000000001, "text": " data using it.", "tokens": [1412, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 204, "seek": 89632, "start": 903.5600000000001, "end": 909.12, "text": " Basically the same we have seen with the TPM and with T. And it has black blob generation.", "tokens": [8537, 264, 912, 321, 362, 1612, 365, 264, 314, 18819, 293, 365, 314, 13, 400, 309, 575, 2211, 46115, 5125, 13], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 205, "seek": 89632, "start": 909.12, "end": 911.6800000000001, "text": " So TPMs are very slow.", "tokens": [407, 314, 18819, 82, 366, 588, 2964, 13], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 206, "seek": 89632, "start": 911.6800000000001, "end": 919.4000000000001, "text": " And I don't know if they support crypto offloading, but you probably don't want to do that if", "tokens": [400, 286, 500, 380, 458, 498, 436, 1406, 17240, 766, 2907, 278, 11, 457, 291, 1391, 500, 380, 528, 281, 360, 300, 498], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 207, "seek": 89632, "start": 919.4000000000001, "end": 921.2800000000001, "text": " you want to do something quickly.", "tokens": [291, 528, 281, 360, 746, 2661, 13], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 208, "seek": 89632, "start": 921.2800000000001, "end": 924.6800000000001, "text": " But the CAM can do it much quicker.", "tokens": [583, 264, 27040, 393, 360, 309, 709, 16255, 13], "temperature": 0.0, "avg_logprob": -0.17023978977028384, "compression_ratio": 1.6192468619246863, "no_speech_prob": 4.1270304791396484e-05}, {"id": 209, "seek": 92468, "start": 924.68, "end": 930.4399999999999, "text": " And you can have this key never exit the CAM and use it for crypto inside the CAM.", "tokens": [400, 291, 393, 362, 341, 2141, 1128, 11043, 264, 27040, 293, 764, 309, 337, 17240, 1854, 264, 27040, 13], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 210, "seek": 92468, "start": 930.4399999999999, "end": 932.9599999999999, "text": " You are, of course, limited to the crypto algorithm.", "tokens": [509, 366, 11, 295, 1164, 11, 5567, 281, 264, 17240, 9284, 13], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 211, "seek": 92468, "start": 932.9599999999999, "end": 934.4399999999999, "text": " The CAM supports.", "tokens": [440, 27040, 9346, 13], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 212, "seek": 92468, "start": 934.4399999999999, "end": 940.0799999999999, "text": " But the possibility is there if you don't want your key to even enter the kernel.", "tokens": [583, 264, 7959, 307, 456, 498, 291, 500, 380, 528, 428, 2141, 281, 754, 3242, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 213, "seek": 92468, "start": 940.0799999999999, "end": 947.64, "text": " It should be all the time in the CAM itself.", "tokens": [467, 820, 312, 439, 264, 565, 294, 264, 27040, 2564, 13], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 214, "seek": 92468, "start": 947.64, "end": 951.8399999999999, "text": " And yeah, so why do we need that for?", "tokens": [400, 1338, 11, 370, 983, 360, 321, 643, 300, 337, 30], "temperature": 0.0, "avg_logprob": -0.1957624199685086, "compression_ratio": 1.5, "no_speech_prob": 5.299161057337187e-05}, {"id": 215, "seek": 95184, "start": 951.84, "end": 954.88, "text": " The common use case is certificate storage.", "tokens": [440, 2689, 764, 1389, 307, 15953, 6725, 13], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 216, "seek": 95184, "start": 954.88, "end": 960.12, "text": " So you are a vendor and you need to call into your own cloud.", "tokens": [407, 291, 366, 257, 24321, 293, 291, 643, 281, 818, 666, 428, 1065, 4588, 13], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 217, "seek": 95184, "start": 960.12, "end": 962.8000000000001, "text": " And you have client certificates for that.", "tokens": [400, 291, 362, 6423, 32941, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 218, "seek": 95184, "start": 962.8000000000001, "end": 968.76, "text": " And you don't want someone to be able to desolder this EMMC and read it out and get access to", "tokens": [400, 291, 500, 380, 528, 1580, 281, 312, 1075, 281, 730, 2641, 260, 341, 16237, 39261, 293, 1401, 309, 484, 293, 483, 2105, 281], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 219, "seek": 95184, "start": 968.76, "end": 970.6800000000001, "text": " your certificates.", "tokens": [428, 32941, 13], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 220, "seek": 95184, "start": 970.6800000000001, "end": 976.52, "text": " And thus you decrypt the certificates and at runtime encrypt it into memory, maybe normal", "tokens": [400, 8807, 291, 979, 627, 662, 264, 32941, 293, 412, 34474, 17972, 662, 309, 666, 4675, 11, 1310, 2710], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 221, "seek": 95184, "start": 976.52, "end": 980.8000000000001, "text": " memory, maybe unshipped memory, however, whatever.", "tokens": [4675, 11, 1310, 2693, 71, 5529, 4675, 11, 4461, 11, 2035, 13], "temperature": 0.0, "avg_logprob": -0.1768251509893508, "compression_ratio": 1.7478260869565216, "no_speech_prob": 8.337440522154793e-05}, {"id": 222, "seek": 98080, "start": 980.8, "end": 984.8399999999999, "text": " And yeah, we had many customers that needed something like that.", "tokens": [400, 1338, 11, 321, 632, 867, 4581, 300, 2978, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.19531387752956814, "compression_ratio": 1.4497041420118344, "no_speech_prob": 6.0064776334911585e-05}, {"id": 223, "seek": 98080, "start": 984.8399999999999, "end": 990.16, "text": " And we had been carrying out of three patches for it in 2015.", "tokens": [400, 321, 632, 668, 9792, 484, 295, 1045, 26531, 337, 309, 294, 7546, 13], "temperature": 0.0, "avg_logprob": -0.19531387752956814, "compression_ratio": 1.4497041420118344, "no_speech_prob": 6.0064776334911585e-05}, {"id": 224, "seek": 98080, "start": 990.16, "end": 994.1999999999999, "text": " We send it out the first time to get some feedback.", "tokens": [492, 2845, 309, 484, 264, 700, 565, 281, 483, 512, 5824, 13], "temperature": 0.0, "avg_logprob": -0.19531387752956814, "compression_ratio": 1.4497041420118344, "no_speech_prob": 6.0064776334911585e-05}, {"id": 225, "seek": 98080, "start": 994.1999999999999, "end": 1000.76, "text": " Back then it was using the standard thing, a custom CSS interface.", "tokens": [5833, 550, 309, 390, 1228, 264, 3832, 551, 11, 257, 2375, 24387, 9226, 13], "temperature": 0.0, "avg_logprob": -0.19531387752956814, "compression_ratio": 1.4497041420118344, "no_speech_prob": 6.0064776334911585e-05}, {"id": 226, "seek": 100076, "start": 1000.76, "end": 1011.0, "text": " In the following years, NXP tried to upstream their own new key types to represent, to rep", "tokens": [682, 264, 3480, 924, 11, 426, 55, 47, 3031, 281, 33915, 641, 1065, 777, 2141, 3467, 281, 2906, 11, 281, 1085], "temperature": 0.0, "avg_logprob": -0.25193773557062016, "compression_ratio": 1.4263959390862944, "no_speech_prob": 3.524917701724917e-05}, {"id": 227, "seek": 100076, "start": 1011.0, "end": 1014.48, "text": " this hardware functionality.", "tokens": [341, 8837, 14980, 13], "temperature": 0.0, "avg_logprob": -0.25193773557062016, "compression_ratio": 1.4263959390862944, "no_speech_prob": 3.524917701724917e-05}, {"id": 228, "seek": 100076, "start": 1014.48, "end": 1019.84, "text": " And finally in 2019, work began on generalizing trusted keys.", "tokens": [400, 2721, 294, 6071, 11, 589, 4283, 322, 2674, 3319, 16034, 9317, 13], "temperature": 0.0, "avg_logprob": -0.25193773557062016, "compression_ratio": 1.4263959390862944, "no_speech_prob": 3.524917701724917e-05}, {"id": 229, "seek": 100076, "start": 1019.84, "end": 1022.68, "text": " And yeah, it was finally merged in 2021.", "tokens": [400, 1338, 11, 309, 390, 2721, 36427, 294, 7201, 13], "temperature": 0.0, "avg_logprob": -0.25193773557062016, "compression_ratio": 1.4263959390862944, "no_speech_prob": 3.524917701724917e-05}, {"id": 230, "seek": 100076, "start": 1022.68, "end": 1027.68, "text": " In 2021, I also started then with implementing it for CAM.", "tokens": [682, 7201, 11, 286, 611, 1409, 550, 365, 18114, 309, 337, 27040, 13], "temperature": 0.0, "avg_logprob": -0.25193773557062016, "compression_ratio": 1.4263959390862944, "no_speech_prob": 3.524917701724917e-05}, {"id": 231, "seek": 102768, "start": 1027.68, "end": 1031.24, "text": " And that support is now available since 5.19.", "tokens": [400, 300, 1406, 307, 586, 2435, 1670, 1025, 13, 3405, 13], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 232, "seek": 102768, "start": 1031.24, "end": 1034.52, "text": " And it's usable exactly the same way as with TPMs.", "tokens": [400, 309, 311, 29975, 2293, 264, 912, 636, 382, 365, 314, 18819, 82, 13], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 233, "seek": 102768, "start": 1034.52, "end": 1040.3600000000001, "text": " You can't do this measurement stuff because a CAM doesn't have support for that.", "tokens": [509, 393, 380, 360, 341, 13160, 1507, 570, 257, 27040, 1177, 380, 362, 1406, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 234, "seek": 102768, "start": 1040.3600000000001, "end": 1046.24, "text": " But on NXP SOCs, you would rather use their form of verified boot.", "tokens": [583, 322, 426, 55, 47, 10621, 33290, 11, 291, 576, 2831, 764, 641, 1254, 295, 31197, 11450, 13], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 235, "seek": 102768, "start": 1046.24, "end": 1052.6000000000001, "text": " So this unique key that's inside the CAM, it's only released when the SOC believes it's", "tokens": [407, 341, 3845, 2141, 300, 311, 1854, 264, 27040, 11, 309, 311, 787, 4736, 562, 264, 10621, 34, 12307, 309, 311], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 236, "seek": 102768, "start": 1052.6000000000001, "end": 1054.52, "text": " in a high assurance boot state.", "tokens": [294, 257, 1090, 32189, 11450, 1785, 13], "temperature": 0.0, "avg_logprob": -0.15183473100849226, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0001985173876164481}, {"id": 237, "seek": 105452, "start": 1054.52, "end": 1059.36, "text": " It means that the boot ROM has verified the boot loader.", "tokens": [467, 1355, 300, 264, 11450, 41678, 575, 31197, 264, 11450, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.2651825384660201, "compression_ratio": 1.5888324873096447, "no_speech_prob": 9.988320380216464e-05}, {"id": 238, "seek": 105452, "start": 1059.36, "end": 1064.32, "text": " And then you are supposed to keep that chain of verification going.", "tokens": [400, 550, 291, 366, 3442, 281, 1066, 300, 5021, 295, 30206, 516, 13], "temperature": 0.0, "avg_logprob": -0.2651825384660201, "compression_ratio": 1.5888324873096447, "no_speech_prob": 9.988320380216464e-05}, {"id": 239, "seek": 105452, "start": 1064.32, "end": 1071.0, "text": " And boot loader verifies the kernel, verifies the init.rd and so on.", "tokens": [400, 11450, 3677, 260, 1306, 11221, 264, 28256, 11, 1306, 11221, 264, 3157, 13, 7800, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.2651825384660201, "compression_ratio": 1.5888324873096447, "no_speech_prob": 9.988320380216464e-05}, {"id": 240, "seek": 105452, "start": 1071.0, "end": 1074.52, "text": " Yeah, some interesting tidbits.", "tokens": [865, 11, 512, 1880, 9422, 34010, 13], "temperature": 0.0, "avg_logprob": -0.2651825384660201, "compression_ratio": 1.5888324873096447, "no_speech_prob": 9.988320380216464e-05}, {"id": 241, "seek": 105452, "start": 1074.52, "end": 1081.52, "text": " While I upstreamed the series, T and TPM both don't use a kernel entropy pool for TPMs.", "tokens": [3987, 286, 33915, 292, 264, 2638, 11, 314, 293, 314, 18819, 1293, 500, 380, 764, 257, 28256, 30867, 7005, 337, 314, 18819, 82, 13], "temperature": 0.0, "avg_logprob": -0.2651825384660201, "compression_ratio": 1.5888324873096447, "no_speech_prob": 9.988320380216464e-05}, {"id": 242, "seek": 108152, "start": 1081.52, "end": 1086.6399999999999, "text": " They always have a random number generator for T. It was specified that they need to", "tokens": [814, 1009, 362, 257, 4974, 1230, 19265, 337, 314, 13, 467, 390, 22206, 300, 436, 643, 281], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 243, "seek": 108152, "start": 1086.6399999999999, "end": 1089.24, "text": " provide random number generation.", "tokens": [2893, 4974, 1230, 5125, 13], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 244, "seek": 108152, "start": 1089.24, "end": 1093.68, "text": " That's not something that I wanted to do for CAM because we have a perfectly fine CAM", "tokens": [663, 311, 406, 746, 300, 286, 1415, 281, 360, 337, 27040, 570, 321, 362, 257, 6239, 2489, 27040], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 245, "seek": 108152, "start": 1093.68, "end": 1095.76, "text": " RNG driver.", "tokens": [497, 30237, 6787, 13], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 246, "seek": 108152, "start": 1095.76, "end": 1101.04, "text": " Not everyone was fine with it, but eventually, stubbornness prevailed.", "tokens": [1726, 1518, 390, 2489, 365, 309, 11, 457, 4728, 11, 24137, 1287, 12642, 24731, 13], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 247, "seek": 108152, "start": 1101.04, "end": 1106.72, "text": " And yeah, you can now choose it for existing backends as well.", "tokens": [400, 1338, 11, 291, 393, 586, 2826, 309, 337, 6741, 646, 2581, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.18951426852833142, "compression_ratio": 1.5283842794759825, "no_speech_prob": 4.3248215661151335e-05}, {"id": 248, "seek": 110672, "start": 1106.72, "end": 1111.92, "text": " You can specify trusted RNG equals kernel, and then you can, even for T or TPM, use the", "tokens": [509, 393, 16500, 16034, 497, 30237, 6915, 28256, 11, 293, 550, 291, 393, 11, 754, 337, 314, 420, 314, 18819, 11, 764, 264], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 249, "seek": 110672, "start": 1111.92, "end": 1118.64, "text": " kernel entropy pool if you want to use that.", "tokens": [28256, 30867, 7005, 498, 291, 528, 281, 764, 300, 13], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 250, "seek": 110672, "start": 1118.64, "end": 1124.0, "text": " The default is leaving it to the trust source to decide what it wants to do.", "tokens": [440, 7576, 307, 5012, 309, 281, 264, 3361, 4009, 281, 4536, 437, 309, 2738, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 251, "seek": 110672, "start": 1124.0, "end": 1130.08, "text": " And that's also useful for devices like on the IMX6 ultra-light light, you can guess", "tokens": [400, 300, 311, 611, 4420, 337, 5759, 411, 322, 264, 21463, 55, 21, 14808, 12, 2764, 1442, 11, 291, 393, 2041], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 252, "seek": 110672, "start": 1130.08, "end": 1131.08, "text": " from the name.", "tokens": [490, 264, 1315, 13], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 253, "seek": 110672, "start": 1131.08, "end": 1132.96, "text": " It's supposed to be very lightweight.", "tokens": [467, 311, 3442, 281, 312, 588, 22052, 13], "temperature": 0.0, "avg_logprob": -0.20507838062404357, "compression_ratio": 1.5491071428571428, "no_speech_prob": 3.698251748573966e-05}, {"id": 254, "seek": 113296, "start": 1132.96, "end": 1137.3600000000001, "text": " And their crypto unit doesn't support an RNG as is, and yeah.", "tokens": [400, 641, 17240, 4985, 1177, 380, 1406, 364, 497, 30237, 382, 307, 11, 293, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2676136016845703, "compression_ratio": 1.611353711790393, "no_speech_prob": 5.382616654969752e-05}, {"id": 255, "seek": 113296, "start": 1137.3600000000001, "end": 1142.96, "text": " So you rather want to use the kernel driver that's available, that does this differently", "tokens": [407, 291, 2831, 528, 281, 764, 264, 28256, 6787, 300, 311, 2435, 11, 300, 775, 341, 7614], "temperature": 0.0, "avg_logprob": -0.2676136016845703, "compression_ratio": 1.611353711790393, "no_speech_prob": 5.382616654969752e-05}, {"id": 256, "seek": 113296, "start": 1142.96, "end": 1147.04, "text": " than you have to do it in your own driver.", "tokens": [813, 291, 362, 281, 360, 309, 294, 428, 1065, 6787, 13], "temperature": 0.0, "avg_logprob": -0.2676136016845703, "compression_ratio": 1.611353711790393, "no_speech_prob": 5.382616654969752e-05}, {"id": 257, "seek": 113296, "start": 1147.04, "end": 1150.96, "text": " And what was also interesting, hardware feature bits were broken on some variants, so you", "tokens": [400, 437, 390, 611, 1880, 11, 8837, 4111, 9239, 645, 5463, 322, 512, 21669, 11, 370, 291], "temperature": 0.0, "avg_logprob": -0.2676136016845703, "compression_ratio": 1.611353711790393, "no_speech_prob": 5.382616654969752e-05}, {"id": 258, "seek": 113296, "start": 1150.96, "end": 1156.76, "text": " can ask the CAM what features it supports, and the R-CAMs that support, say they have", "tokens": [393, 1029, 264, 27040, 437, 4122, 309, 9346, 11, 293, 264, 497, 12, 34, 2865, 82, 300, 1406, 11, 584, 436, 362], "temperature": 0.0, "avg_logprob": -0.2676136016845703, "compression_ratio": 1.611353711790393, "no_speech_prob": 5.382616654969752e-05}, {"id": 259, "seek": 115676, "start": 1156.76, "end": 1163.48, "text": " a blob support, but they lack AES support, so they fail with an internal exception when", "tokens": [257, 46115, 1406, 11, 457, 436, 5011, 316, 2358, 1406, 11, 370, 436, 3061, 365, 364, 6920, 11183, 562], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 260, "seek": 115676, "start": 1163.48, "end": 1166.52, "text": " you try to use it, because it's, yeah.", "tokens": [291, 853, 281, 764, 309, 11, 570, 309, 311, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 261, "seek": 115676, "start": 1166.52, "end": 1169.12, "text": " Because the ceiling and unsealing is AES based.", "tokens": [1436, 264, 13655, 293, 517, 405, 4270, 307, 316, 2358, 2361, 13], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 262, "seek": 115676, "start": 1169.12, "end": 1173.16, "text": " But yeah, that's one more thing the kernel needs to take into account to work on these", "tokens": [583, 1338, 11, 300, 311, 472, 544, 551, 264, 28256, 2203, 281, 747, 666, 2696, 281, 589, 322, 613], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 263, "seek": 115676, "start": 1173.16, "end": 1174.16, "text": " systems.", "tokens": [3652, 13], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 264, "seek": 115676, "start": 1174.16, "end": 1181.8, "text": " And yeah, that's also something I only learned about while getting review feedback was not", "tokens": [400, 1338, 11, 300, 311, 611, 746, 286, 787, 3264, 466, 1339, 1242, 3131, 5824, 390, 406], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 265, "seek": 115676, "start": 1181.8, "end": 1184.76, "text": " something I anticipated.", "tokens": [746, 286, 23267, 13], "temperature": 0.0, "avg_logprob": -0.22324841565424852, "compression_ratio": 1.6425531914893616, "no_speech_prob": 4.3881107558263466e-05}, {"id": 266, "seek": 118476, "start": 1184.76, "end": 1193.04, "text": " As you have seen, NXP had different, okay, NXP had different attempts on getting into", "tokens": [1018, 291, 362, 1612, 11, 426, 55, 47, 632, 819, 11, 1392, 11, 426, 55, 47, 632, 819, 15257, 322, 1242, 666], "temperature": 0.0, "avg_logprob": -0.19590417861938478, "compression_ratio": 1.6144067796610169, "no_speech_prob": 6.594836304429919e-05}, {"id": 267, "seek": 118476, "start": 1193.04, "end": 1195.76, "text": " the kernel, and they applied that to their vendor tree.", "tokens": [264, 28256, 11, 293, 436, 6456, 300, 281, 641, 24321, 4230, 13], "temperature": 0.0, "avg_logprob": -0.19590417861938478, "compression_ratio": 1.6144067796610169, "no_speech_prob": 6.594836304429919e-05}, {"id": 268, "seek": 118476, "start": 1195.76, "end": 1200.8, "text": " They called it secure keys, and during the upstreaming feedback I was asked if I wouldn't", "tokens": [814, 1219, 309, 7144, 9317, 11, 293, 1830, 264, 33915, 278, 5824, 286, 390, 2351, 498, 286, 2759, 380], "temperature": 0.0, "avg_logprob": -0.19590417861938478, "compression_ratio": 1.6144067796610169, "no_speech_prob": 6.594836304429919e-05}, {"id": 269, "seek": 118476, "start": 1200.8, "end": 1206.24, "text": " want to change my modifier key to be compatible with the NXP kernel, so people have an easier", "tokens": [528, 281, 1319, 452, 38011, 2141, 281, 312, 18218, 365, 264, 426, 55, 47, 28256, 11, 370, 561, 362, 364, 3571], "temperature": 0.0, "avg_logprob": -0.19590417861938478, "compression_ratio": 1.6144067796610169, "no_speech_prob": 6.594836304429919e-05}, {"id": 270, "seek": 118476, "start": 1206.24, "end": 1210.68, "text": " time migrating to it, because it was no problem for me.", "tokens": [565, 6186, 8754, 281, 309, 11, 570, 309, 390, 572, 1154, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.19590417861938478, "compression_ratio": 1.6144067796610169, "no_speech_prob": 6.594836304429919e-05}, {"id": 271, "seek": 121068, "start": 1210.68, "end": 1215.88, "text": " It broke my SysS interface, but I needed a migration step anyway, and yeah, this makes", "tokens": [467, 6902, 452, 318, 749, 50, 9226, 11, 457, 286, 2978, 257, 17011, 1823, 4033, 11, 293, 1338, 11, 341, 1669], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 272, "seek": 121068, "start": 1215.88, "end": 1223.0800000000002, "text": " stuff easier for most of the users that want to switch, and yeah, so I did that.", "tokens": [1507, 3571, 337, 881, 295, 264, 5022, 300, 528, 281, 3679, 11, 293, 1338, 11, 370, 286, 630, 300, 13], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 273, "seek": 121068, "start": 1223.0800000000002, "end": 1225.28, "text": " Why did I need a migration step?", "tokens": [1545, 630, 286, 643, 257, 17011, 1823, 30], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 274, "seek": 121068, "start": 1225.28, "end": 1232.3200000000002, "text": " Because I was using looks before, but looks doesn't have trusted key support.", "tokens": [1436, 286, 390, 1228, 1542, 949, 11, 457, 1542, 1177, 380, 362, 16034, 2141, 1406, 13], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 275, "seek": 121068, "start": 1232.3200000000002, "end": 1235.4, "text": " So what I did is I used the M-Crip directly.", "tokens": [407, 437, 286, 630, 307, 286, 1143, 264, 376, 12, 34, 8400, 3838, 13], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 276, "seek": 121068, "start": 1235.4, "end": 1239.92, "text": " I basically did the same things that looks would be doing, but only on the M-Crip part,", "tokens": [286, 1936, 630, 264, 912, 721, 300, 1542, 576, 312, 884, 11, 457, 787, 322, 264, 376, 12, 34, 8400, 644, 11], "temperature": 0.0, "avg_logprob": -0.18810383340586787, "compression_ratio": 1.6506024096385543, "no_speech_prob": 1.591155887581408e-05}, {"id": 277, "seek": 123992, "start": 1239.92, "end": 1244.72, "text": " and I would exclude the header you had seen in the first, one of the first slides.", "tokens": [293, 286, 576, 33536, 264, 23117, 291, 632, 1612, 294, 264, 700, 11, 472, 295, 264, 700, 9788, 13], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 278, "seek": 123992, "start": 1244.72, "end": 1248.44, "text": " You can specify the range of blocks that it should work on, and then you can just cut", "tokens": [509, 393, 16500, 264, 3613, 295, 8474, 300, 309, 820, 589, 322, 11, 293, 550, 291, 393, 445, 1723], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 279, "seek": 123992, "start": 1248.44, "end": 1251.76, "text": " out the looks area and do the M-Crip directly.", "tokens": [484, 264, 1542, 1859, 293, 360, 264, 376, 12, 34, 8400, 3838, 13], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 280, "seek": 123992, "start": 1251.76, "end": 1255.8400000000001, "text": " And yeah, and you need a one-time import step, because the first time you don't want to generate", "tokens": [400, 1338, 11, 293, 291, 643, 257, 472, 12, 3766, 974, 1823, 11, 570, 264, 700, 565, 291, 500, 380, 528, 281, 8460], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 281, "seek": 123992, "start": 1255.8400000000001, "end": 1259.64, "text": " the trusted key randomly, but you want to take the ones that you have already been using", "tokens": [264, 16034, 2141, 16979, 11, 457, 291, 528, 281, 747, 264, 2306, 300, 291, 362, 1217, 668, 1228], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 282, "seek": 123992, "start": 1259.64, "end": 1260.8000000000002, "text": " for years.", "tokens": [337, 924, 13], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 283, "seek": 123992, "start": 1260.8000000000002, "end": 1264.88, "text": " Of course, in a new product, you don't want that non-upstream patch I linked there, but", "tokens": [2720, 1164, 11, 294, 257, 777, 1674, 11, 291, 500, 380, 528, 300, 2107, 12, 1010, 9291, 9972, 286, 9408, 456, 11, 457], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 284, "seek": 123992, "start": 1264.88, "end": 1268.68, "text": " in an existing product, yeah, that's how you could do it.", "tokens": [294, 364, 6741, 1674, 11, 1338, 11, 300, 311, 577, 291, 727, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1576778588705505, "compression_ratio": 1.7547169811320755, "no_speech_prob": 3.505455970298499e-05}, {"id": 285, "seek": 126868, "start": 1268.68, "end": 1272.92, "text": " Old key blob, put into CISFS, gets a plain text key out, keysetlmports, and you have", "tokens": [8633, 2141, 46115, 11, 829, 666, 383, 2343, 29318, 11, 2170, 257, 11121, 2487, 2141, 484, 11, 9317, 302, 75, 76, 17845, 11, 293, 291, 362], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 286, "seek": 126868, "start": 1272.92, "end": 1274.0, "text": " the new key blob.", "tokens": [264, 777, 2141, 46115, 13], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 287, "seek": 126868, "start": 1274.0, "end": 1277.96, "text": " We store both alongside, so if the update fails for whatever reason, you can fall back", "tokens": [492, 3531, 1293, 12385, 11, 370, 498, 264, 5623, 18199, 337, 2035, 1778, 11, 291, 393, 2100, 646], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 288, "seek": 126868, "start": 1277.96, "end": 1282.4, "text": " to the old system and use the old key blob and both work.", "tokens": [281, 264, 1331, 1185, 293, 764, 264, 1331, 2141, 46115, 293, 1293, 589, 13], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 289, "seek": 126868, "start": 1282.4, "end": 1285.2, "text": " Yeah, finally, what more is there to do?", "tokens": [865, 11, 2721, 11, 437, 544, 307, 456, 281, 360, 30], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 290, "seek": 126868, "start": 1285.2, "end": 1289.16, "text": " So there's encrypted key support for the M-Crip, eCryptFS, eFAM, and VDM.", "tokens": [407, 456, 311, 36663, 2141, 1406, 337, 264, 376, 12, 34, 8400, 11, 308, 38477, 662, 29318, 11, 308, 37, 2865, 11, 293, 691, 35, 44, 13], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 291, "seek": 126868, "start": 1289.16, "end": 1294.16, "text": " There's direct key support, trusted key support, without involving encrypted key for the M-Crip,", "tokens": [821, 311, 2047, 2141, 1406, 11, 16034, 2141, 1406, 11, 1553, 17030, 36663, 2141, 337, 264, 376, 12, 34, 8400, 11], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 292, "seek": 126868, "start": 1294.16, "end": 1296.6000000000001, "text": " and yeah, you can use encrypted keys.", "tokens": [293, 1338, 11, 291, 393, 764, 36663, 9317, 13], "temperature": 0.0, "avg_logprob": -0.2996844605311451, "compression_ratio": 1.7813620071684588, "no_speech_prob": 8.072615310084075e-05}, {"id": 293, "seek": 129660, "start": 1296.6, "end": 1301.4399999999998, "text": " Future candidates would be FS-Cript, there has been attempts, one for the old key set-up", "tokens": [20805, 11255, 576, 312, 41138, 12, 34, 470, 662, 11, 456, 575, 668, 15257, 11, 472, 337, 264, 1331, 2141, 992, 12, 1010], "temperature": 0.0, "avg_logprob": -0.2925235897886987, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00010020572517532855}, {"id": 294, "seek": 129660, "start": 1301.4399999999998, "end": 1308.48, "text": " scheme, the second by me for the new key set-up scheme, UBFS authentication also currently", "tokens": [12232, 11, 264, 1150, 538, 385, 337, 264, 777, 2141, 992, 12, 1010, 12232, 11, 624, 33, 29318, 26643, 611, 4362], "temperature": 0.0, "avg_logprob": -0.2925235897886987, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00010020572517532855}, {"id": 295, "seek": 129660, "start": 1308.48, "end": 1314.52, "text": " uses a logon key that could be changed to be a trusted or encrypted key, but yeah, these", "tokens": [4960, 257, 3565, 266, 2141, 300, 727, 312, 3105, 281, 312, 257, 16034, 420, 36663, 2141, 11, 457, 1338, 11, 613], "temperature": 0.0, "avg_logprob": -0.2925235897886987, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00010020572517532855}, {"id": 296, "seek": 129660, "start": 1314.52, "end": 1318.1999999999998, "text": " patches have died down.", "tokens": [26531, 362, 4539, 760, 13], "temperature": 0.0, "avg_logprob": -0.2925235897886987, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00010020572517532855}, {"id": 297, "seek": 129660, "start": 1318.1999999999998, "end": 1322.84, "text": " Look support would be awesome, because yeah, with looks it just works out of the box, with", "tokens": [2053, 1406, 576, 312, 3476, 11, 570, 1338, 11, 365, 1542, 309, 445, 1985, 484, 295, 264, 2424, 11, 365], "temperature": 0.0, "avg_logprob": -0.2925235897886987, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00010020572517532855}, {"id": 298, "seek": 132284, "start": 1322.84, "end": 1328.3999999999999, "text": " the M-Crip, we still need to do it manually, but that enables us to do it completely in", "tokens": [264, 376, 12, 34, 8400, 11, 321, 920, 643, 281, 360, 309, 16945, 11, 457, 300, 17077, 505, 281, 360, 309, 2584, 294], "temperature": 0.0, "avg_logprob": -0.15600105360442518, "compression_ratio": 1.6219512195121952, "no_speech_prob": 5.698838867829181e-05}, {"id": 299, "seek": 132284, "start": 1328.3999999999999, "end": 1333.6799999999998, "text": " the kernel without involving user space, and yeah, you don't really want user space missing", "tokens": [264, 28256, 1553, 17030, 4195, 1901, 11, 293, 1338, 11, 291, 500, 380, 534, 528, 4195, 1901, 5361], "temperature": 0.0, "avg_logprob": -0.15600105360442518, "compression_ratio": 1.6219512195121952, "no_speech_prob": 5.698838867829181e-05}, {"id": 300, "seek": 132284, "start": 1333.6799999999998, "end": 1337.6399999999999, "text": " with a DMA-capable device that could just overwrite the kernel if you give it access,", "tokens": [365, 257, 413, 9998, 12, 9485, 712, 4302, 300, 727, 445, 670, 21561, 264, 28256, 498, 291, 976, 309, 2105, 11], "temperature": 0.0, "avg_logprob": -0.15600105360442518, "compression_ratio": 1.6219512195121952, "no_speech_prob": 5.698838867829181e-05}, {"id": 301, "seek": 132284, "start": 1337.6399999999999, "end": 1341.6399999999999, "text": " so trusted keys was the correct solution for us there.", "tokens": [370, 16034, 9317, 390, 264, 3006, 3827, 337, 505, 456, 13], "temperature": 0.0, "avg_logprob": -0.15600105360442518, "compression_ratio": 1.6219512195121952, "no_speech_prob": 5.698838867829181e-05}, {"id": 302, "seek": 132284, "start": 1341.6399999999999, "end": 1352.8, "text": " And that concludes my talk, and I would accept your questions if you have any.", "tokens": [400, 300, 24643, 452, 751, 11, 293, 286, 576, 3241, 428, 1651, 498, 291, 362, 604, 13], "temperature": 0.0, "avg_logprob": -0.15600105360442518, "compression_ratio": 1.6219512195121952, "no_speech_prob": 5.698838867829181e-05}, {"id": 303, "seek": 135280, "start": 1352.8, "end": 1364.96, "text": " Thank you, and we have some time for a few questions.", "tokens": [1044, 291, 11, 293, 321, 362, 512, 565, 337, 257, 1326, 1651, 13], "temperature": 0.0, "avg_logprob": -0.12648365927524255, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.0005415606428869069}, {"id": 304, "seek": 135280, "start": 1364.96, "end": 1374.1599999999999, "text": " I have a question, are you aware of any way to kind of get this step of getting the secret", "tokens": [286, 362, 257, 1168, 11, 366, 291, 3650, 295, 604, 636, 281, 733, 295, 483, 341, 1823, 295, 1242, 264, 4054], "temperature": 0.0, "avg_logprob": -0.12648365927524255, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.0005415606428869069}, {"id": 305, "seek": 135280, "start": 1374.1599999999999, "end": 1379.3999999999999, "text": " from the hardware to automate that into the kernel as well, so you don't need user space", "tokens": [490, 264, 8837, 281, 31605, 300, 666, 264, 28256, 382, 731, 11, 370, 291, 500, 380, 643, 4195, 1901], "temperature": 0.0, "avg_logprob": -0.12648365927524255, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.0005415606428869069}, {"id": 306, "seek": 137940, "start": 1379.4, "end": 1389.2, "text": " interaction, user space utilities, my use case is mainly like the root file system,", "tokens": [9285, 11, 4195, 1901, 30482, 11, 452, 764, 1389, 307, 8704, 411, 264, 5593, 3991, 1185, 11], "temperature": 0.0, "avg_logprob": -0.3182565298947421, "compression_ratio": 1.5, "no_speech_prob": 0.000130515152704902}, {"id": 307, "seek": 137940, "start": 1389.2, "end": 1395.2800000000002, "text": " and to forego using an NDRAMFS that needs to run a lot of commands, so you could, from", "tokens": [293, 281, 2091, 1571, 1228, 364, 426, 9301, 2865, 29318, 300, 2203, 281, 1190, 257, 688, 295, 16901, 11, 370, 291, 727, 11, 490], "temperature": 0.0, "avg_logprob": -0.3182565298947421, "compression_ratio": 1.5, "no_speech_prob": 0.000130515152704902}, {"id": 308, "seek": 137940, "start": 1395.2800000000002, "end": 1400.48, "text": " the kernel command line, similar, like with DMInit, also get the key.", "tokens": [264, 28256, 5622, 1622, 11, 2531, 11, 411, 365, 15322, 4575, 270, 11, 611, 483, 264, 2141, 13], "temperature": 0.0, "avg_logprob": -0.3182565298947421, "compression_ratio": 1.5, "no_speech_prob": 0.000130515152704902}, {"id": 309, "seek": 137940, "start": 1400.48, "end": 1406.96, "text": " Personally, if I had that requirement, I would consider doing it from the boot loader and", "tokens": [21079, 11, 498, 286, 632, 300, 11695, 11, 286, 576, 1949, 884, 309, 490, 264, 11450, 3677, 260, 293], "temperature": 0.0, "avg_logprob": -0.3182565298947421, "compression_ratio": 1.5, "no_speech_prob": 0.000130515152704902}, {"id": 310, "seek": 140696, "start": 1406.96, "end": 1411.0, "text": " then have the kernel read it off the kernel command line, because the encrypted key blobs", "tokens": [550, 362, 264, 28256, 1401, 309, 766, 264, 28256, 5622, 1622, 11, 570, 264, 36663, 2141, 1749, 929], "temperature": 0.0, "avg_logprob": -0.2143577776457134, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.00027571371174417436}, {"id": 311, "seek": 140696, "start": 1411.0, "end": 1415.88, "text": " there is nothing confidential about it, so yeah, in theory the kernel could accept it", "tokens": [456, 307, 1825, 27054, 466, 309, 11, 370, 1338, 11, 294, 5261, 264, 28256, 727, 3241, 309], "temperature": 0.0, "avg_logprob": -0.2143577776457134, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.00027571371174417436}, {"id": 312, "seek": 140696, "start": 1415.88, "end": 1431.64, "text": " over the kernel command line, but there is nothing like that currently.", "tokens": [670, 264, 28256, 5622, 1622, 11, 457, 456, 307, 1825, 411, 300, 4362, 13], "temperature": 0.0, "avg_logprob": -0.2143577776457134, "compression_ratio": 1.75177304964539, "no_speech_prob": 0.00027571371174417436}, {"id": 313, "seek": 143164, "start": 1431.64, "end": 1444.96, "text": " I can repeat the question, if it's to.", "tokens": [286, 393, 7149, 264, 1168, 11, 498, 309, 311, 281, 13], "temperature": 0.0, "avg_logprob": -0.37990839585014013, "compression_ratio": 1.304, "no_speech_prob": 0.0010994408512488008}, {"id": 314, "seek": 143164, "start": 1444.96, "end": 1454.0, "text": " Is there a way to also combine these hardware keys with some pin and looks, so you have", "tokens": [1119, 456, 257, 636, 281, 611, 10432, 613, 8837, 9317, 365, 512, 5447, 293, 1542, 11, 370, 291, 362], "temperature": 0.0, "avg_logprob": -0.37990839585014013, "compression_ratio": 1.304, "no_speech_prob": 0.0010994408512488008}, {"id": 315, "seek": 143164, "start": 1454.0, "end": 1459.0, "text": " to authorize yourself to the device?", "tokens": [281, 3793, 1125, 1803, 281, 264, 4302, 30], "temperature": 0.0, "avg_logprob": -0.37990839585014013, "compression_ratio": 1.304, "no_speech_prob": 0.0010994408512488008}, {"id": 316, "seek": 145900, "start": 1459.0, "end": 1465.88, "text": " That's not really how it's meant to be used, because, well, yeah, the key material shouldn't", "tokens": [663, 311, 406, 534, 577, 309, 311, 4140, 281, 312, 1143, 11, 570, 11, 731, 11, 1338, 11, 264, 2141, 2527, 4659, 380], "temperature": 0.0, "avg_logprob": -0.24303882153003248, "compression_ratio": 1.5674157303370786, "no_speech_prob": 8.32700461614877e-05}, {"id": 317, "seek": 145900, "start": 1465.88, "end": 1471.92, "text": " exit the kernel, and you directly reference the DMCrypt key, insert the key in the kernel", "tokens": [11043, 264, 28256, 11, 293, 291, 3838, 6408, 264, 15322, 38477, 662, 2141, 11, 8969, 264, 2141, 294, 264, 28256], "temperature": 0.0, "avg_logprob": -0.24303882153003248, "compression_ratio": 1.5674157303370786, "no_speech_prob": 8.32700461614877e-05}, {"id": 318, "seek": 145900, "start": 1471.92, "end": 1480.2, "text": " key ring and directly reference it, so I don't know how to do it to easily factor in a user", "tokens": [2141, 4875, 293, 3838, 6408, 309, 11, 370, 286, 500, 380, 458, 577, 281, 360, 309, 281, 3612, 5952, 294, 257, 4195], "temperature": 0.0, "avg_logprob": -0.24303882153003248, "compression_ratio": 1.5674157303370786, "no_speech_prob": 8.32700461614877e-05}, {"id": 319, "seek": 145900, "start": 1480.2, "end": 1481.2, "text": " pin.", "tokens": [5447, 13], "temperature": 0.0, "avg_logprob": -0.24303882153003248, "compression_ratio": 1.5674157303370786, "no_speech_prob": 8.32700461614877e-05}, {"id": 320, "seek": 148120, "start": 1481.2, "end": 1491.68, "text": " There's a passphrase option, apparently there is a passphrase option that I need to look", "tokens": [821, 311, 257, 1320, 44598, 651, 3614, 11, 7970, 456, 307, 257, 1320, 44598, 651, 3614, 300, 286, 643, 281, 574], "temperature": 0.0, "avg_logprob": -0.23303618797889122, "compression_ratio": 1.460431654676259, "no_speech_prob": 0.0004615057841874659}, {"id": 321, "seek": 148120, "start": 1491.68, "end": 1495.6000000000001, "text": " up when using trusted keys.", "tokens": [493, 562, 1228, 16034, 9317, 13], "temperature": 0.0, "avg_logprob": -0.23303618797889122, "compression_ratio": 1.460431654676259, "no_speech_prob": 0.0004615057841874659}, {"id": 322, "seek": 148120, "start": 1495.6000000000001, "end": 1504.68, "text": " So thanks for the talk, would it be possible to add a manual step before communicating", "tokens": [407, 3231, 337, 264, 751, 11, 576, 309, 312, 1944, 281, 909, 257, 9688, 1823, 949, 17559], "temperature": 0.0, "avg_logprob": -0.23303618797889122, "compression_ratio": 1.460431654676259, "no_speech_prob": 0.0004615057841874659}, {"id": 323, "seek": 150468, "start": 1504.68, "end": 1511.68, "text": " with the TPM, for example, a fingerprint scanner or anything like that?", "tokens": [365, 264, 314, 18819, 11, 337, 1365, 11, 257, 30715, 30211, 420, 1340, 411, 300, 30], "temperature": 0.0, "avg_logprob": -0.17110537446063498, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.0003901209856849164}, {"id": 324, "seek": 150468, "start": 1511.68, "end": 1524.0800000000002, "text": " Is there a hardware and software option to combine the two verification steps?", "tokens": [1119, 456, 257, 8837, 293, 4722, 3614, 281, 10432, 264, 732, 30206, 4439, 30], "temperature": 0.0, "avg_logprob": -0.17110537446063498, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.0003901209856849164}, {"id": 325, "seek": 150468, "start": 1524.0800000000002, "end": 1525.5600000000002, "text": " You could.", "tokens": [509, 727, 13], "temperature": 0.0, "avg_logprob": -0.17110537446063498, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.0003901209856849164}, {"id": 326, "seek": 150468, "start": 1525.5600000000002, "end": 1531.2, "text": " So currently you need to have an init RD, so in my case you have an init RD, or I don't", "tokens": [407, 4362, 291, 643, 281, 362, 364, 3157, 49488, 11, 370, 294, 452, 1389, 291, 362, 364, 3157, 49488, 11, 420, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.17110537446063498, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.0003901209856849164}, {"id": 327, "seek": 150468, "start": 1531.2, "end": 1534.16, "text": " even have an init RD, I don't use it for the root file system, but if you were to use", "tokens": [754, 362, 364, 3157, 49488, 11, 286, 500, 380, 764, 309, 337, 264, 5593, 3991, 1185, 11, 457, 498, 291, 645, 281, 764], "temperature": 0.0, "avg_logprob": -0.17110537446063498, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.0003901209856849164}, {"id": 328, "seek": 153416, "start": 1534.16, "end": 1538.48, "text": " it for the root file system, for example, you could in the init RD first check that you", "tokens": [309, 337, 264, 5593, 3991, 1185, 11, 337, 1365, 11, 291, 727, 294, 264, 3157, 49488, 700, 1520, 300, 291], "temperature": 0.0, "avg_logprob": -0.23386539112437854, "compression_ratio": 1.5515151515151515, "no_speech_prob": 0.0002311686403118074}, {"id": 329, "seek": 153416, "start": 1538.48, "end": 1545.92, "text": " have that fingerprint is there, but there is no way to wire it in the kernel, first", "tokens": [362, 300, 30715, 307, 456, 11, 457, 456, 307, 572, 636, 281, 6234, 309, 294, 264, 28256, 11, 700], "temperature": 0.0, "avg_logprob": -0.23386539112437854, "compression_ratio": 1.5515151515151515, "no_speech_prob": 0.0002311686403118074}, {"id": 330, "seek": 154592, "start": 1545.92, "end": 1565.48, "text": " this needs to happen, that's more of a policy thing that you would do in user space.", "tokens": [341, 2203, 281, 1051, 11, 300, 311, 544, 295, 257, 3897, 551, 300, 291, 576, 360, 294, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.44039801756540936, "compression_ratio": 1.0909090909090908, "no_speech_prob": 0.00028764939634129405}], "language": "en"}