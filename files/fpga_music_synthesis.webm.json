{"text": " So, welcome Sebastian Holtzab, the stage is yours. Okay, thank you. Hi everybody, my name is Sebastian, I'm an embedded systems engineer, usually in kind of the automotive, functional safety, autonomous vehicle space, but today I want to talk about one of my side projects that's completely unrelated to what I do at work, and I hope you guys enjoy it, so just kind of, because I'm curious, who actually knows what Eurorack is? Oh, that's amazing, okay, I wasn't really sure what to expect, okay, that makes me really happy. Who actually has a Eurorack system at home, and plays with it? Oh, okay, four or five, okay, actually after this talk, if you have a Eurorack system and you like playing with FPGAs, I have a couple of these boards, so please talk to me, I'm willing to give them away if you have cool ideas, but we can get back to that at the end. So, basically, Eurorack is a modular system for building your own kind of hardware electronic music synthesizers, and it was kind of created in the 90s and standardised by Dopefar, it's a little bit of a rough standard because it's a little bit rough around the edges and imprecise, but basically what the Eurorack standard is, is it's a description for what the dimensions of these modules should look like, and kind of roughly what the signals look like that flow between these modules, and so there are a whole bunch of different manufacturers, thousands of manufacturers, tens of thousands of different modules that you can buy from all sorts of boutiques, small and big manufacturers, and you can kind of buy these things, put them together into a system like this, and then use this to create music, that's kind of what Eurorack system is. And just to give you a small idea of what a typical module looks like, here is kind of the input and output jacks on a mutable instruments module, it's basically an oscillator module, and you can see there is an output jack where basically audio frequency signals come out of the oscillator, and then you can kind of change the properties of these signals by plugging in different kinds of input signals, that for example the V-Oct input jack that actually changes the pitch of the output signal, so you can choose which note the oscillator is playing, if you want to change the volume of the oscillator then you would send signals into the level input for example, but that's kind of what the input and output jacks on one of these individual modules actually looks like. But where did this project actually come from? So I had a crazy idea for a weird high performance granular sampling device that I wanted to make using FPGAs, and I didn't really know where to start in terms of okay, you can buy an FPGA development platform, you can buy development boards for audio codec ICs, you can put it together but then you need to do some conditioning on the signal to make it work with Eurorack, and potentially you also need to calibrate it as well, and I couldn't find examples for this kind of thing, so that's why I started playing in this world, because I couldn't find anything that really combined the hardware synthesizer world of Eurorack, and this PMOD interface, and PMOD is basically, I think it was something that was originally standardized by Digiland, and there's a whole bunch of FPGA development boards that you can buy that have this interface, so basically if you have the Eurorack PMOD hardware that you can see above there, you can plug it into an FPGA development board, you can synthesize one of the example designs, you can use that in your Eurorack system and start making weird music. So this project is a hardware design, so this board designing QICAD that you can find in the GitHub repository, it's a bunch of system very log that implements kind of drivers for the codec and the calibration, online calibration, some example DSP cores, and a bunch of simulation infrastructure, that's not just test benches for the FPGA gateway, but also allows you to simulate an entire modular system on your machine with like this little bit of FPGA code that you wrote for your module, and I'll show you what that looks like in a bit. So just to give you a look at what this looks like, so the Icebreak is a fantastic FPGA development board that I highly recommend, supports all the open source tool chains, you can purchase it from one bit squared, and this is what it looks like plugged into the hardware here, I wouldn't necessarily recommend that you plug it in this way because most Eurorack cases won't actually fit something this deep, so I would actually recommend that you use a ribbon cable to connect the FPGA board to your, to this kind of expansion module here, but it doesn't have to be this development board, it could be a different one. Just to give you an idea, the Icebreaker I think right now is 70 or 80 U.S. dollars, I think, or so, and what I actually wanted to show was a demo video, but I don't have any audio, so if you're curious to see this thing in action, then I encourage you to go to the GitHub repository for these slides, and in the GitHub repository are two movie files, maybe go and look at these after the talk, that includes like a video example of a couple of example calls running and what audio sounds like. So yeah, just leave that there for a second. So why might you want to play with Eurorack P-Mode? Well, maybe you want to start playing with DSP, maybe you want to try doing things that are difficult on an MCU-based platform, and what do I mean by that? So, if you want to do super low latency operations on a microcontroller-based platform, and there are a few microcontroller-based development platforms for Eurorack, very quickly if you want very low latency, you have to start dealing with DMA, you have to start dealing with some pretty sophisticated real-time operating system concepts, for example, and actually there are quite a few things that are easier to do in the FPGA world, especially when it comes to DSP than in the MCU-based world, but even if that wasn't the case, it's still kind of cool in my opinion to, it's a cool learning platform to play with FPGAs. If you have kind of this world where you can just play with sound, plug arbitrary things in, make a module that implements a tiny little piece of functionality and see how it is affected by all different effect modules and different oscillators they have in your system and it makes it very easy to discover things. So in the GitHub repository for this project, you can find a whole bunch of examples for different DSP cores, and you can load these onto your FPGA development platform, you can try them out and see how they sound, and that's just to give you a picture, there's going to be more coming, but just to give you a very simple example of what one of these cores looks like, and to be clear, this is just the DSP core, there's a whole bunch of driver cores that you don't see that you don't have to worry about if you're making a design like this. This is Verilog, and this is implementing something called a voltage control amplifier, what does that mean? We're just multiplying one channel by another channel and sending that to an output channel. That's basically what a voltage control amplifier is, and in Verilog that looks like this. We take basically the output is input 0 multiplied by input 1, we have to shift it otherwise, because basically in this case it's a 16-bit sample, then we have a 32-bit result, this is to convert it back into a 16-bit sample so that we can send it to the output, but why is this cool? This is very simple, but what's cool is with this very, very simple piece of code in Verilog, you achieve something that is ridiculously low latency, so here we're achieving just with that example, like basically 120 microseconds of latency, if you're sampling at 192 kHz that's 24 samples of latency from the input to the output, just with this small bit of code. If you are going to try and do that on a microcontroller, not easy, you can do it, but it's not easy. In this case, I actually think that the latency on an FPGA-based system should have been a bit lower, but what's actually going on here, why are we getting 24 samples of latency from the input to the output with a simple implementation like this? It's because the audio codec on this piece of hardware itself has a bunch of internal filters that kind of pipeline the input, it uses this for like, I think some kind of pre-emphasis function or something that you can partially disable but not entirely disable, but that's kind of where this is coming from. In this plot up here, you can see, kind of in red, a signal coming into both the URAC PMOD and another MCU-based module, the DISTing, and then the yellow trace is what's coming out of the URAC PMOD and then the blue trace is what's coming out of the microcontroller-based module, so you can kind of see the difference in latency there, and both of them are both acting as the same thing in this case. So the hardware, I went through a few different revisions, I made some mistakes in revision one and two, as you can see here by the Bodge wires, but as of right now, if you were to go ahead and download the Kaikai design files for revision 2.2, which is this one on the right here, which I have in front of me here, it works without any modification, so you can just build it. But there is a revision 3 coming and I'll talk about that in a second. So what does this hardware design actually look like? Basically there are eight channels, we have four input channels, four output channels, a bunch of LED indicators so you can see what's going on, but then the heart of this whole system is the audio codec, and what's interesting about this audio codec is it's a chip that's kind of intended for the automotive industry, and some other Eurorack modules for this kind of purpose will not use kind of a normal audio codec, they'll use instrumentation amplifiers or some other type of ADC or DAC, and the reason for that is because in Eurorack we're not just dealing with audio frequency AC coupled signals, in Eurorack we're also dealing with sometimes extremely fast DC signals that need to be accurate, for example if you are controlling an oscillator and you need to control the pitch very precisely, the absolute DC accuracy is important because if you shift by a few millivolts then suddenly your song is not in tune anymore, and that's why DC accuracy is important, and basically audio codec IC is often not designed for DC accuracy, but the benefit of an audio codec IC is that it's cheap, so you might pay three or four euros per unit instead of, I don't know for instrumentation quality converter you're paying tens of euros perhaps, but the cool thing is, the main difference here and at least in the case of this codec that I was playing with in this hardware, there is kind of a fixed DC bias in the codec input and output when you get it from the factory and you can calibrate this out just using a simple, like you can basically calibrate it out using a simple linear regression, kind of feed five volts into the codec, measure what it gives you, send minus five volts in, measure what it gives you, do that for the inputs as well as the outputs, and then on the FPGA itself account for this DC bias that's present in the codec after it's manufactured, and after doing it going through this calibration process, and there are scripts to do this calibration in the GitHub repository, you can actually achieve kind of sub five millivolt level, absolute DC accuracy between minus ten and ten volts using an audio codec chip, which is awesome because it brings manufacturing cost down if you decide to kind of create your own FPGA based instrument and it means that this thing doesn't cost so much, and it also means you can use I2S which is kind of a standard-dish audio interface protocol, embedded audio interface protocol instead of some other interface protocol, so basically the datasheet strongly, it does not suggest that you do this, but if you do it, it works really well, so like explicitly ignoring what it says to do in the recommended external circuits, and I've tested the crap out of this, even over temperature and so on, it seems to work, and I mean fortunately we're not dealing with automotive and functional safety, so no one's going to complain if we don't do things the way the datasheet suggests that we do them. So this is kind of just a simplified overview of what the FPGA gateway looks like for the example project here, and basically the part that you write yourself is this user-defined DSP core, and then between that and the rest of the world is a driver for the codec IC, a driver for the I2C interface that initializes the codec IC, a calibration routine that basically does this online calibration of the codec that I was mentioning before, and yeah, I mean that's what it looks like. So that's kind of the hardware, and I also described a bit about how the gateway works, but if you have no hardware at all, you can still play with this stuff, because I actually wrote a plug-in for a BCV rack, which is an open source simulator for modular synthesis system, basically, Eurorack, and what this plug-in does is it actually simulates with varilator, like here I can show you, oh, got one minute, okay, so here's a varilog implementation of a clock divider, and this is sitting inside a plug-in for BCV rack, and it's compiled with varilator to C++ so that you can run it inside an entire modular synthesis system simulation, and so now we have basically this simulation of the hardware with the varilog that would be running on your FPGA, actually running through varilator in translated C++ linked to the BCV rack binary so that you can actually run your FPGA code inside a modular synthesis system, which is kind of crazy, and it makes me happy that you clapped then, but that was actually the easiest thing to do out of everything that I described before, like literally that was about four hours of work, I was surprised that it was so easy, but I encourage you to play with this stuff if you're interested in it, so, oh, okay, that's time for me, I was almost done, thank you for listening, so two things I would like to note, I am thinking of going through with a manufacturing run for the revision three of these boards, so if you are interested in the hardware here, if this is your niche, start a GitHub repository so I know how many people will be interested, that's my only request, because if I manufacture a hundred of these things and they just hang around in my apartment, then I won't know what to do with them, so thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.44, "text": " So, welcome Sebastian Holtzab, the stage is yours.", "tokens": [407, 11, 2928, 31102, 389, 4837, 89, 455, 11, 264, 3233, 307, 6342, 13], "temperature": 0.0, "avg_logprob": -0.45101708306206595, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.18687321245670319}, {"id": 1, "seek": 0, "start": 12.44, "end": 15.92, "text": " Okay, thank you.", "tokens": [1033, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.45101708306206595, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.18687321245670319}, {"id": 2, "seek": 0, "start": 15.92, "end": 24.740000000000002, "text": " Hi everybody, my name is Sebastian, I'm an embedded systems engineer, usually in kind", "tokens": [2421, 2201, 11, 452, 1315, 307, 31102, 11, 286, 478, 364, 16741, 3652, 11403, 11, 2673, 294, 733], "temperature": 0.0, "avg_logprob": -0.45101708306206595, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.18687321245670319}, {"id": 3, "seek": 2474, "start": 24.74, "end": 30.56, "text": " of the automotive, functional safety, autonomous vehicle space, but today I want to talk about", "tokens": [295, 264, 32866, 11, 11745, 4514, 11, 23797, 5864, 1901, 11, 457, 965, 286, 528, 281, 751, 466], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 4, "seek": 2474, "start": 30.56, "end": 34.839999999999996, "text": " one of my side projects that's completely unrelated to what I do at work, and I hope", "tokens": [472, 295, 452, 1252, 4455, 300, 311, 2584, 38967, 281, 437, 286, 360, 412, 589, 11, 293, 286, 1454], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 5, "seek": 2474, "start": 34.839999999999996, "end": 42.879999999999995, "text": " you guys enjoy it, so just kind of, because I'm curious, who actually knows what Eurorack", "tokens": [291, 1074, 2103, 309, 11, 370, 445, 733, 295, 11, 570, 286, 478, 6369, 11, 567, 767, 3255, 437, 462, 374, 284, 501], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 6, "seek": 2474, "start": 42.879999999999995, "end": 43.879999999999995, "text": " is?", "tokens": [307, 30], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 7, "seek": 2474, "start": 43.879999999999995, "end": 48.64, "text": " Oh, that's amazing, okay, I wasn't really sure what to expect, okay, that makes me really", "tokens": [876, 11, 300, 311, 2243, 11, 1392, 11, 286, 2067, 380, 534, 988, 437, 281, 2066, 11, 1392, 11, 300, 1669, 385, 534], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 8, "seek": 2474, "start": 48.64, "end": 49.64, "text": " happy.", "tokens": [2055, 13], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 9, "seek": 2474, "start": 49.64, "end": 53.28, "text": " Who actually has a Eurorack system at home, and plays with it?", "tokens": [2102, 767, 575, 257, 462, 374, 284, 501, 1185, 412, 1280, 11, 293, 5749, 365, 309, 30], "temperature": 0.0, "avg_logprob": -0.2254124641418457, "compression_ratio": 1.6037037037037036, "no_speech_prob": 0.0001268541964236647}, {"id": 10, "seek": 5328, "start": 53.28, "end": 58.92, "text": " Oh, okay, four or five, okay, actually after this talk, if you have a Eurorack system and", "tokens": [876, 11, 1392, 11, 1451, 420, 1732, 11, 1392, 11, 767, 934, 341, 751, 11, 498, 291, 362, 257, 462, 374, 284, 501, 1185, 293], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 11, "seek": 5328, "start": 58.92, "end": 63.120000000000005, "text": " you like playing with FPGAs, I have a couple of these boards, so please talk to me, I'm", "tokens": [291, 411, 2433, 365, 36655, 38, 10884, 11, 286, 362, 257, 1916, 295, 613, 13293, 11, 370, 1767, 751, 281, 385, 11, 286, 478], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 12, "seek": 5328, "start": 63.120000000000005, "end": 66.92, "text": " willing to give them away if you have cool ideas, but we can get back to that at the", "tokens": [4950, 281, 976, 552, 1314, 498, 291, 362, 1627, 3487, 11, 457, 321, 393, 483, 646, 281, 300, 412, 264], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 13, "seek": 5328, "start": 66.92, "end": 67.92, "text": " end.", "tokens": [917, 13], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 14, "seek": 5328, "start": 67.92, "end": 74.52000000000001, "text": " So, basically, Eurorack is a modular system for building your own kind of hardware electronic", "tokens": [407, 11, 1936, 11, 462, 374, 284, 501, 307, 257, 31111, 1185, 337, 2390, 428, 1065, 733, 295, 8837, 10092], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 15, "seek": 5328, "start": 74.52000000000001, "end": 79.56, "text": " music synthesizers, and it was kind of created in the 90s and standardised by Dopefar, it's", "tokens": [1318, 26617, 22525, 11, 293, 309, 390, 733, 295, 2942, 294, 264, 4289, 82, 293, 3832, 2640, 538, 413, 1114, 21196, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.16935245011203973, "compression_ratio": 1.5950704225352113, "no_speech_prob": 3.4760101698338985e-05}, {"id": 16, "seek": 7956, "start": 79.56, "end": 84.60000000000001, "text": " a little bit of a rough standard because it's a little bit rough around the edges and imprecise,", "tokens": [257, 707, 857, 295, 257, 5903, 3832, 570, 309, 311, 257, 707, 857, 5903, 926, 264, 8819, 293, 704, 13867, 908, 11], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 17, "seek": 7956, "start": 84.60000000000001, "end": 91.56, "text": " but basically what the Eurorack standard is, is it's a description for what the dimensions", "tokens": [457, 1936, 437, 264, 462, 374, 284, 501, 3832, 307, 11, 307, 309, 311, 257, 3855, 337, 437, 264, 12819], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 18, "seek": 7956, "start": 91.56, "end": 95.76, "text": " of these modules should look like, and kind of roughly what the signals look like that", "tokens": [295, 613, 16679, 820, 574, 411, 11, 293, 733, 295, 9810, 437, 264, 12354, 574, 411, 300], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 19, "seek": 7956, "start": 95.76, "end": 100.16, "text": " flow between these modules, and so there are a whole bunch of different manufacturers,", "tokens": [3095, 1296, 613, 16679, 11, 293, 370, 456, 366, 257, 1379, 3840, 295, 819, 18455, 11], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 20, "seek": 7956, "start": 100.16, "end": 104.08, "text": " thousands of manufacturers, tens of thousands of different modules that you can buy from", "tokens": [5383, 295, 18455, 11, 10688, 295, 5383, 295, 819, 16679, 300, 291, 393, 2256, 490], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 21, "seek": 7956, "start": 104.08, "end": 108.4, "text": " all sorts of boutiques, small and big manufacturers, and you can kind of buy these things, put", "tokens": [439, 7527, 295, 15738, 4911, 11, 1359, 293, 955, 18455, 11, 293, 291, 393, 733, 295, 2256, 613, 721, 11, 829], "temperature": 0.0, "avg_logprob": -0.12032154846191406, "compression_ratio": 2.0036764705882355, "no_speech_prob": 2.3887543648015708e-05}, {"id": 22, "seek": 10840, "start": 108.4, "end": 113.56, "text": " them together into a system like this, and then use this to create music, that's kind", "tokens": [552, 1214, 666, 257, 1185, 411, 341, 11, 293, 550, 764, 341, 281, 1884, 1318, 11, 300, 311, 733], "temperature": 0.0, "avg_logprob": -0.11797570167703832, "compression_ratio": 1.7136363636363636, "no_speech_prob": 3.523837949614972e-05}, {"id": 23, "seek": 10840, "start": 113.56, "end": 116.2, "text": " of what Eurorack system is.", "tokens": [295, 437, 462, 374, 284, 501, 1185, 307, 13], "temperature": 0.0, "avg_logprob": -0.11797570167703832, "compression_ratio": 1.7136363636363636, "no_speech_prob": 3.523837949614972e-05}, {"id": 24, "seek": 10840, "start": 116.2, "end": 122.04, "text": " And just to give you a small idea of what a typical module looks like, here is kind", "tokens": [400, 445, 281, 976, 291, 257, 1359, 1558, 295, 437, 257, 7476, 10088, 1542, 411, 11, 510, 307, 733], "temperature": 0.0, "avg_logprob": -0.11797570167703832, "compression_ratio": 1.7136363636363636, "no_speech_prob": 3.523837949614972e-05}, {"id": 25, "seek": 10840, "start": 122.04, "end": 128.72, "text": " of the input and output jacks on a mutable instruments module, it's basically an oscillator", "tokens": [295, 264, 4846, 293, 5598, 7109, 82, 322, 257, 5839, 712, 12190, 10088, 11, 309, 311, 1936, 364, 43859], "temperature": 0.0, "avg_logprob": -0.11797570167703832, "compression_ratio": 1.7136363636363636, "no_speech_prob": 3.523837949614972e-05}, {"id": 26, "seek": 10840, "start": 128.72, "end": 134.32, "text": " module, and you can see there is an output jack where basically audio frequency signals", "tokens": [10088, 11, 293, 291, 393, 536, 456, 307, 364, 5598, 7109, 689, 1936, 6278, 7893, 12354], "temperature": 0.0, "avg_logprob": -0.11797570167703832, "compression_ratio": 1.7136363636363636, "no_speech_prob": 3.523837949614972e-05}, {"id": 27, "seek": 13432, "start": 134.32, "end": 139.44, "text": " come out of the oscillator, and then you can kind of change the properties of these signals", "tokens": [808, 484, 295, 264, 43859, 11, 293, 550, 291, 393, 733, 295, 1319, 264, 7221, 295, 613, 12354], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 28, "seek": 13432, "start": 139.44, "end": 146.51999999999998, "text": " by plugging in different kinds of input signals, that for example the V-Oct input jack that", "tokens": [538, 42975, 294, 819, 3685, 295, 4846, 12354, 11, 300, 337, 1365, 264, 691, 12, 46, 349, 4846, 7109, 300], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 29, "seek": 13432, "start": 146.51999999999998, "end": 149.88, "text": " actually changes the pitch of the output signal, so you can choose which note the oscillator", "tokens": [767, 2962, 264, 7293, 295, 264, 5598, 6358, 11, 370, 291, 393, 2826, 597, 3637, 264, 43859], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 30, "seek": 13432, "start": 149.88, "end": 154.79999999999998, "text": " is playing, if you want to change the volume of the oscillator then you would send signals", "tokens": [307, 2433, 11, 498, 291, 528, 281, 1319, 264, 5523, 295, 264, 43859, 550, 291, 576, 2845, 12354], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 31, "seek": 13432, "start": 154.79999999999998, "end": 160.12, "text": " into the level input for example, but that's kind of what the input and output jacks on", "tokens": [666, 264, 1496, 4846, 337, 1365, 11, 457, 300, 311, 733, 295, 437, 264, 4846, 293, 5598, 7109, 82, 322], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 32, "seek": 13432, "start": 160.12, "end": 163.12, "text": " one of these individual modules actually looks like.", "tokens": [472, 295, 613, 2609, 16679, 767, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.13122964727467504, "compression_ratio": 1.9538461538461538, "no_speech_prob": 1.2798871466657147e-05}, {"id": 33, "seek": 16312, "start": 163.12, "end": 165.20000000000002, "text": " But where did this project actually come from?", "tokens": [583, 689, 630, 341, 1716, 767, 808, 490, 30], "temperature": 0.0, "avg_logprob": -0.12294790479871961, "compression_ratio": 1.606425702811245, "no_speech_prob": 4.603905836120248e-05}, {"id": 34, "seek": 16312, "start": 165.20000000000002, "end": 171.52, "text": " So I had a crazy idea for a weird high performance granular sampling device that I wanted to", "tokens": [407, 286, 632, 257, 3219, 1558, 337, 257, 3657, 1090, 3389, 39962, 21179, 4302, 300, 286, 1415, 281], "temperature": 0.0, "avg_logprob": -0.12294790479871961, "compression_ratio": 1.606425702811245, "no_speech_prob": 4.603905836120248e-05}, {"id": 35, "seek": 16312, "start": 171.52, "end": 179.72, "text": " make using FPGAs, and I didn't really know where to start in terms of okay, you can buy", "tokens": [652, 1228, 36655, 38, 10884, 11, 293, 286, 994, 380, 534, 458, 689, 281, 722, 294, 2115, 295, 1392, 11, 291, 393, 2256], "temperature": 0.0, "avg_logprob": -0.12294790479871961, "compression_ratio": 1.606425702811245, "no_speech_prob": 4.603905836120248e-05}, {"id": 36, "seek": 16312, "start": 179.72, "end": 185.8, "text": " an FPGA development platform, you can buy development boards for audio codec ICs, you", "tokens": [364, 36655, 12570, 3250, 3663, 11, 291, 393, 2256, 3250, 13293, 337, 6278, 3089, 66, 14360, 82, 11, 291], "temperature": 0.0, "avg_logprob": -0.12294790479871961, "compression_ratio": 1.606425702811245, "no_speech_prob": 4.603905836120248e-05}, {"id": 37, "seek": 16312, "start": 185.8, "end": 189.32, "text": " can put it together but then you need to do some conditioning on the signal to make it", "tokens": [393, 829, 309, 1214, 457, 550, 291, 643, 281, 360, 512, 21901, 322, 264, 6358, 281, 652, 309], "temperature": 0.0, "avg_logprob": -0.12294790479871961, "compression_ratio": 1.606425702811245, "no_speech_prob": 4.603905836120248e-05}, {"id": 38, "seek": 18932, "start": 189.32, "end": 194.44, "text": " work with Eurorack, and potentially you also need to calibrate it as well, and I couldn't", "tokens": [589, 365, 462, 374, 284, 501, 11, 293, 7263, 291, 611, 643, 281, 21583, 4404, 309, 382, 731, 11, 293, 286, 2809, 380], "temperature": 0.0, "avg_logprob": -0.13097318294828972, "compression_ratio": 1.6715867158671587, "no_speech_prob": 3.21517072734423e-05}, {"id": 39, "seek": 18932, "start": 194.44, "end": 198.68, "text": " find examples for this kind of thing, so that's why I started playing in this world, because", "tokens": [915, 5110, 337, 341, 733, 295, 551, 11, 370, 300, 311, 983, 286, 1409, 2433, 294, 341, 1002, 11, 570], "temperature": 0.0, "avg_logprob": -0.13097318294828972, "compression_ratio": 1.6715867158671587, "no_speech_prob": 3.21517072734423e-05}, {"id": 40, "seek": 18932, "start": 198.68, "end": 204.92, "text": " I couldn't find anything that really combined the hardware synthesizer world of Eurorack,", "tokens": [286, 2809, 380, 915, 1340, 300, 534, 9354, 264, 8837, 26617, 6545, 1002, 295, 462, 374, 284, 501, 11], "temperature": 0.0, "avg_logprob": -0.13097318294828972, "compression_ratio": 1.6715867158671587, "no_speech_prob": 3.21517072734423e-05}, {"id": 41, "seek": 18932, "start": 204.92, "end": 210.48, "text": " and this PMOD interface, and PMOD is basically, I think it was something that was originally", "tokens": [293, 341, 12499, 14632, 9226, 11, 293, 12499, 14632, 307, 1936, 11, 286, 519, 309, 390, 746, 300, 390, 7993], "temperature": 0.0, "avg_logprob": -0.13097318294828972, "compression_ratio": 1.6715867158671587, "no_speech_prob": 3.21517072734423e-05}, {"id": 42, "seek": 18932, "start": 210.48, "end": 216.2, "text": " standardized by Digiland, and there's a whole bunch of FPGA development boards that you", "tokens": [31677, 538, 10976, 388, 474, 11, 293, 456, 311, 257, 1379, 3840, 295, 36655, 12570, 3250, 13293, 300, 291], "temperature": 0.0, "avg_logprob": -0.13097318294828972, "compression_ratio": 1.6715867158671587, "no_speech_prob": 3.21517072734423e-05}, {"id": 43, "seek": 21620, "start": 216.2, "end": 222.35999999999999, "text": " can buy that have this interface, so basically if you have the Eurorack PMOD hardware that", "tokens": [393, 2256, 300, 362, 341, 9226, 11, 370, 1936, 498, 291, 362, 264, 462, 374, 284, 501, 12499, 14632, 8837, 300], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 44, "seek": 21620, "start": 222.35999999999999, "end": 227.28, "text": " you can see above there, you can plug it into an FPGA development board, you can synthesize", "tokens": [291, 393, 536, 3673, 456, 11, 291, 393, 5452, 309, 666, 364, 36655, 12570, 3250, 3150, 11, 291, 393, 26617, 1125], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 45, "seek": 21620, "start": 227.28, "end": 232.83999999999997, "text": " one of the example designs, you can use that in your Eurorack system and start making weird", "tokens": [472, 295, 264, 1365, 11347, 11, 291, 393, 764, 300, 294, 428, 462, 374, 284, 501, 1185, 293, 722, 1455, 3657], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 46, "seek": 21620, "start": 232.83999999999997, "end": 233.83999999999997, "text": " music.", "tokens": [1318, 13], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 47, "seek": 21620, "start": 233.83999999999997, "end": 240.16, "text": " So this project is a hardware design, so this board designing QICAD that you can find in", "tokens": [407, 341, 1716, 307, 257, 8837, 1715, 11, 370, 341, 3150, 14685, 1249, 2532, 6112, 300, 291, 393, 915, 294], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 48, "seek": 21620, "start": 240.16, "end": 246.12, "text": " the GitHub repository, it's a bunch of system very log that implements kind of drivers for", "tokens": [264, 23331, 25841, 11, 309, 311, 257, 3840, 295, 1185, 588, 3565, 300, 704, 17988, 733, 295, 11590, 337], "temperature": 0.0, "avg_logprob": -0.13909386780302405, "compression_ratio": 1.7137546468401488, "no_speech_prob": 2.1754083718406036e-05}, {"id": 49, "seek": 24612, "start": 246.12, "end": 254.08, "text": " the codec and the calibration, online calibration, some example DSP cores, and a bunch of simulation", "tokens": [264, 3089, 66, 293, 264, 38732, 11, 2950, 38732, 11, 512, 1365, 15816, 47, 24826, 11, 293, 257, 3840, 295, 16575], "temperature": 0.0, "avg_logprob": -0.1352939690862383, "compression_ratio": 1.7099236641221374, "no_speech_prob": 1.4492652553599328e-05}, {"id": 50, "seek": 24612, "start": 254.08, "end": 259.44, "text": " infrastructure, that's not just test benches for the FPGA gateway, but also allows you", "tokens": [6896, 11, 300, 311, 406, 445, 1500, 3271, 3781, 337, 264, 36655, 12570, 28532, 11, 457, 611, 4045, 291], "temperature": 0.0, "avg_logprob": -0.1352939690862383, "compression_ratio": 1.7099236641221374, "no_speech_prob": 1.4492652553599328e-05}, {"id": 51, "seek": 24612, "start": 259.44, "end": 264.04, "text": " to simulate an entire modular system on your machine with like this little bit of FPGA", "tokens": [281, 27817, 364, 2302, 31111, 1185, 322, 428, 3479, 365, 411, 341, 707, 857, 295, 36655, 12570], "temperature": 0.0, "avg_logprob": -0.1352939690862383, "compression_ratio": 1.7099236641221374, "no_speech_prob": 1.4492652553599328e-05}, {"id": 52, "seek": 24612, "start": 264.04, "end": 268.36, "text": " code that you wrote for your module, and I'll show you what that looks like in a bit.", "tokens": [3089, 300, 291, 4114, 337, 428, 10088, 11, 293, 286, 603, 855, 291, 437, 300, 1542, 411, 294, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.1352939690862383, "compression_ratio": 1.7099236641221374, "no_speech_prob": 1.4492652553599328e-05}, {"id": 53, "seek": 24612, "start": 268.36, "end": 274.76, "text": " So just to give you a look at what this looks like, so the Icebreak is a fantastic FPGA", "tokens": [407, 445, 281, 976, 291, 257, 574, 412, 437, 341, 1542, 411, 11, 370, 264, 15332, 13225, 307, 257, 5456, 36655, 12570], "temperature": 0.0, "avg_logprob": -0.1352939690862383, "compression_ratio": 1.7099236641221374, "no_speech_prob": 1.4492652553599328e-05}, {"id": 54, "seek": 27476, "start": 274.76, "end": 278.68, "text": " development board that I highly recommend, supports all the open source tool chains,", "tokens": [3250, 3150, 300, 286, 5405, 2748, 11, 9346, 439, 264, 1269, 4009, 2290, 12626, 11], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 55, "seek": 27476, "start": 278.68, "end": 283.76, "text": " you can purchase it from one bit squared, and this is what it looks like plugged into", "tokens": [291, 393, 8110, 309, 490, 472, 857, 8889, 11, 293, 341, 307, 437, 309, 1542, 411, 25679, 666], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 56, "seek": 27476, "start": 283.76, "end": 287.03999999999996, "text": " the hardware here, I wouldn't necessarily recommend that you plug it in this way because", "tokens": [264, 8837, 510, 11, 286, 2759, 380, 4725, 2748, 300, 291, 5452, 309, 294, 341, 636, 570], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 57, "seek": 27476, "start": 287.03999999999996, "end": 291.4, "text": " most Eurorack cases won't actually fit something this deep, so I would actually recommend that", "tokens": [881, 462, 374, 284, 501, 3331, 1582, 380, 767, 3318, 746, 341, 2452, 11, 370, 286, 576, 767, 2748, 300], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 58, "seek": 27476, "start": 291.4, "end": 296.2, "text": " you use a ribbon cable to connect the FPGA board to your, to this kind of expansion module", "tokens": [291, 764, 257, 20921, 8220, 281, 1745, 264, 36655, 12570, 3150, 281, 428, 11, 281, 341, 733, 295, 11260, 10088], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 59, "seek": 27476, "start": 296.2, "end": 301.28, "text": " here, but it doesn't have to be this development board, it could be a different one.", "tokens": [510, 11, 457, 309, 1177, 380, 362, 281, 312, 341, 3250, 3150, 11, 309, 727, 312, 257, 819, 472, 13], "temperature": 0.0, "avg_logprob": -0.11934108118857106, "compression_ratio": 1.760797342192691, "no_speech_prob": 1.2594660802278668e-05}, {"id": 60, "seek": 30128, "start": 301.28, "end": 306.76, "text": " Just to give you an idea, the Icebreaker I think right now is 70 or 80 U.S. dollars,", "tokens": [1449, 281, 976, 291, 364, 1558, 11, 264, 15332, 43847, 286, 519, 558, 586, 307, 5285, 420, 4688, 624, 13, 50, 13, 3808, 11], "temperature": 0.0, "avg_logprob": -0.1631277664847996, "compression_ratio": 1.630188679245283, "no_speech_prob": 3.4245367714902386e-05}, {"id": 61, "seek": 30128, "start": 306.76, "end": 314.67999999999995, "text": " I think, or so, and what I actually wanted to show was a demo video, but I don't have", "tokens": [286, 519, 11, 420, 370, 11, 293, 437, 286, 767, 1415, 281, 855, 390, 257, 10723, 960, 11, 457, 286, 500, 380, 362], "temperature": 0.0, "avg_logprob": -0.1631277664847996, "compression_ratio": 1.630188679245283, "no_speech_prob": 3.4245367714902386e-05}, {"id": 62, "seek": 30128, "start": 314.67999999999995, "end": 320.59999999999997, "text": " any audio, so if you're curious to see this thing in action, then I encourage you to go", "tokens": [604, 6278, 11, 370, 498, 291, 434, 6369, 281, 536, 341, 551, 294, 3069, 11, 550, 286, 5373, 291, 281, 352], "temperature": 0.0, "avg_logprob": -0.1631277664847996, "compression_ratio": 1.630188679245283, "no_speech_prob": 3.4245367714902386e-05}, {"id": 63, "seek": 30128, "start": 320.59999999999997, "end": 326.2, "text": " to the GitHub repository for these slides, and in the GitHub repository are two movie", "tokens": [281, 264, 23331, 25841, 337, 613, 9788, 11, 293, 294, 264, 23331, 25841, 366, 732, 3169], "temperature": 0.0, "avg_logprob": -0.1631277664847996, "compression_ratio": 1.630188679245283, "no_speech_prob": 3.4245367714902386e-05}, {"id": 64, "seek": 30128, "start": 326.2, "end": 330.79999999999995, "text": " files, maybe go and look at these after the talk, that includes like a video example of", "tokens": [7098, 11, 1310, 352, 293, 574, 412, 613, 934, 264, 751, 11, 300, 5974, 411, 257, 960, 1365, 295], "temperature": 0.0, "avg_logprob": -0.1631277664847996, "compression_ratio": 1.630188679245283, "no_speech_prob": 3.4245367714902386e-05}, {"id": 65, "seek": 33080, "start": 330.8, "end": 335.84000000000003, "text": " a couple of example calls running and what audio sounds like.", "tokens": [257, 1916, 295, 1365, 5498, 2614, 293, 437, 6278, 3263, 411, 13], "temperature": 0.0, "avg_logprob": -0.1607224110806926, "compression_ratio": 1.5242718446601942, "no_speech_prob": 2.8384401957737282e-05}, {"id": 66, "seek": 33080, "start": 335.84000000000003, "end": 339.2, "text": " So yeah, just leave that there for a second.", "tokens": [407, 1338, 11, 445, 1856, 300, 456, 337, 257, 1150, 13], "temperature": 0.0, "avg_logprob": -0.1607224110806926, "compression_ratio": 1.5242718446601942, "no_speech_prob": 2.8384401957737282e-05}, {"id": 67, "seek": 33080, "start": 339.2, "end": 344.08000000000004, "text": " So why might you want to play with Eurorack P-Mode?", "tokens": [407, 983, 1062, 291, 528, 281, 862, 365, 462, 374, 284, 501, 430, 12, 44, 1429, 30], "temperature": 0.0, "avg_logprob": -0.1607224110806926, "compression_ratio": 1.5242718446601942, "no_speech_prob": 2.8384401957737282e-05}, {"id": 68, "seek": 33080, "start": 344.08000000000004, "end": 352.36, "text": " Well, maybe you want to start playing with DSP, maybe you want to try doing things that", "tokens": [1042, 11, 1310, 291, 528, 281, 722, 2433, 365, 15816, 47, 11, 1310, 291, 528, 281, 853, 884, 721, 300], "temperature": 0.0, "avg_logprob": -0.1607224110806926, "compression_ratio": 1.5242718446601942, "no_speech_prob": 2.8384401957737282e-05}, {"id": 69, "seek": 33080, "start": 352.36, "end": 355.72, "text": " are difficult on an MCU-based platform, and what do I mean by that?", "tokens": [366, 2252, 322, 364, 39415, 12, 6032, 3663, 11, 293, 437, 360, 286, 914, 538, 300, 30], "temperature": 0.0, "avg_logprob": -0.1607224110806926, "compression_ratio": 1.5242718446601942, "no_speech_prob": 2.8384401957737282e-05}, {"id": 70, "seek": 35572, "start": 355.72, "end": 361.84000000000003, "text": " So, if you want to do super low latency operations on a microcontroller-based platform, and there", "tokens": [407, 11, 498, 291, 528, 281, 360, 1687, 2295, 27043, 7705, 322, 257, 4532, 9000, 22922, 12, 6032, 3663, 11, 293, 456], "temperature": 0.0, "avg_logprob": -0.1267466326372339, "compression_ratio": 1.790513833992095, "no_speech_prob": 1.8594586435938254e-05}, {"id": 71, "seek": 35572, "start": 361.84000000000003, "end": 367.24, "text": " are a few microcontroller-based development platforms for Eurorack, very quickly if you", "tokens": [366, 257, 1326, 4532, 9000, 22922, 12, 6032, 3250, 9473, 337, 462, 374, 284, 501, 11, 588, 2661, 498, 291], "temperature": 0.0, "avg_logprob": -0.1267466326372339, "compression_ratio": 1.790513833992095, "no_speech_prob": 1.8594586435938254e-05}, {"id": 72, "seek": 35572, "start": 367.24, "end": 371.32000000000005, "text": " want very low latency, you have to start dealing with DMA, you have to start dealing", "tokens": [528, 588, 2295, 27043, 11, 291, 362, 281, 722, 6260, 365, 413, 9998, 11, 291, 362, 281, 722, 6260], "temperature": 0.0, "avg_logprob": -0.1267466326372339, "compression_ratio": 1.790513833992095, "no_speech_prob": 1.8594586435938254e-05}, {"id": 73, "seek": 35572, "start": 371.32000000000005, "end": 379.04, "text": " with some pretty sophisticated real-time operating system concepts, for example, and actually", "tokens": [365, 512, 1238, 16950, 957, 12, 3766, 7447, 1185, 10392, 11, 337, 1365, 11, 293, 767], "temperature": 0.0, "avg_logprob": -0.1267466326372339, "compression_ratio": 1.790513833992095, "no_speech_prob": 1.8594586435938254e-05}, {"id": 74, "seek": 35572, "start": 379.04, "end": 382.16, "text": " there are quite a few things that are easier to do in the FPGA world, especially when it", "tokens": [456, 366, 1596, 257, 1326, 721, 300, 366, 3571, 281, 360, 294, 264, 36655, 12570, 1002, 11, 2318, 562, 309], "temperature": 0.0, "avg_logprob": -0.1267466326372339, "compression_ratio": 1.790513833992095, "no_speech_prob": 1.8594586435938254e-05}, {"id": 75, "seek": 38216, "start": 382.16, "end": 387.52000000000004, "text": " comes to DSP than in the MCU-based world, but even if that wasn't the case, it's still", "tokens": [1487, 281, 15816, 47, 813, 294, 264, 39415, 12, 6032, 1002, 11, 457, 754, 498, 300, 2067, 380, 264, 1389, 11, 309, 311, 920], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 76, "seek": 38216, "start": 387.52000000000004, "end": 392.44, "text": " kind of cool in my opinion to, it's a cool learning platform to play with FPGAs.", "tokens": [733, 295, 1627, 294, 452, 4800, 281, 11, 309, 311, 257, 1627, 2539, 3663, 281, 862, 365, 36655, 38, 10884, 13], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 77, "seek": 38216, "start": 392.44, "end": 398.28000000000003, "text": " If you have kind of this world where you can just play with sound, plug arbitrary things", "tokens": [759, 291, 362, 733, 295, 341, 1002, 689, 291, 393, 445, 862, 365, 1626, 11, 5452, 23211, 721], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 78, "seek": 38216, "start": 398.28000000000003, "end": 402.40000000000003, "text": " in, make a module that implements a tiny little piece of functionality and see how it is affected", "tokens": [294, 11, 652, 257, 10088, 300, 704, 17988, 257, 5870, 707, 2522, 295, 14980, 293, 536, 577, 309, 307, 8028], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 79, "seek": 38216, "start": 402.40000000000003, "end": 406.16, "text": " by all different effect modules and different oscillators they have in your system and it", "tokens": [538, 439, 819, 1802, 16679, 293, 819, 18225, 3391, 436, 362, 294, 428, 1185, 293, 309], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 80, "seek": 38216, "start": 406.16, "end": 409.68, "text": " makes it very easy to discover things.", "tokens": [1669, 309, 588, 1858, 281, 4411, 721, 13], "temperature": 0.0, "avg_logprob": -0.12011658849795002, "compression_ratio": 1.6428571428571428, "no_speech_prob": 3.0077850169618614e-05}, {"id": 81, "seek": 40968, "start": 409.68, "end": 419.0, "text": " So in the GitHub repository for this project, you can find a whole bunch of examples for", "tokens": [407, 294, 264, 23331, 25841, 337, 341, 1716, 11, 291, 393, 915, 257, 1379, 3840, 295, 5110, 337], "temperature": 0.0, "avg_logprob": -0.10168226978235077, "compression_ratio": 1.7689243027888446, "no_speech_prob": 6.948084774194285e-06}, {"id": 82, "seek": 40968, "start": 419.0, "end": 423.96000000000004, "text": " different DSP cores, and you can load these onto your FPGA development platform, you can", "tokens": [819, 15816, 47, 24826, 11, 293, 291, 393, 3677, 613, 3911, 428, 36655, 12570, 3250, 3663, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.10168226978235077, "compression_ratio": 1.7689243027888446, "no_speech_prob": 6.948084774194285e-06}, {"id": 83, "seek": 40968, "start": 423.96000000000004, "end": 428.36, "text": " try them out and see how they sound, and that's just to give you a picture, there's going", "tokens": [853, 552, 484, 293, 536, 577, 436, 1626, 11, 293, 300, 311, 445, 281, 976, 291, 257, 3036, 11, 456, 311, 516], "temperature": 0.0, "avg_logprob": -0.10168226978235077, "compression_ratio": 1.7689243027888446, "no_speech_prob": 6.948084774194285e-06}, {"id": 84, "seek": 40968, "start": 428.36, "end": 434.12, "text": " to be more coming, but just to give you a very simple example of what one of these cores", "tokens": [281, 312, 544, 1348, 11, 457, 445, 281, 976, 291, 257, 588, 2199, 1365, 295, 437, 472, 295, 613, 24826], "temperature": 0.0, "avg_logprob": -0.10168226978235077, "compression_ratio": 1.7689243027888446, "no_speech_prob": 6.948084774194285e-06}, {"id": 85, "seek": 40968, "start": 434.12, "end": 437.8, "text": " looks like, and to be clear, this is just the DSP core, there's a whole bunch of driver", "tokens": [1542, 411, 11, 293, 281, 312, 1850, 11, 341, 307, 445, 264, 15816, 47, 4965, 11, 456, 311, 257, 1379, 3840, 295, 6787], "temperature": 0.0, "avg_logprob": -0.10168226978235077, "compression_ratio": 1.7689243027888446, "no_speech_prob": 6.948084774194285e-06}, {"id": 86, "seek": 43780, "start": 437.8, "end": 442.40000000000003, "text": " cores that you don't see that you don't have to worry about if you're making a design", "tokens": [24826, 300, 291, 500, 380, 536, 300, 291, 500, 380, 362, 281, 3292, 466, 498, 291, 434, 1455, 257, 1715], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 87, "seek": 43780, "start": 442.40000000000003, "end": 444.28000000000003, "text": " like this.", "tokens": [411, 341, 13], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 88, "seek": 43780, "start": 444.28000000000003, "end": 449.12, "text": " This is Verilog, and this is implementing something called a voltage control amplifier,", "tokens": [639, 307, 4281, 388, 664, 11, 293, 341, 307, 18114, 746, 1219, 257, 8352, 1969, 27439, 11], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 89, "seek": 43780, "start": 449.12, "end": 450.12, "text": " what does that mean?", "tokens": [437, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 90, "seek": 43780, "start": 450.12, "end": 455.32, "text": " We're just multiplying one channel by another channel and sending that to an output channel.", "tokens": [492, 434, 445, 30955, 472, 2269, 538, 1071, 2269, 293, 7750, 300, 281, 364, 5598, 2269, 13], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 91, "seek": 43780, "start": 455.32, "end": 460.88, "text": " That's basically what a voltage control amplifier is, and in Verilog that looks like this.", "tokens": [663, 311, 1936, 437, 257, 8352, 1969, 27439, 307, 11, 293, 294, 4281, 388, 664, 300, 1542, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.15701431035995483, "compression_ratio": 1.760180995475113, "no_speech_prob": 2.9293581974343397e-05}, {"id": 92, "seek": 46088, "start": 460.88, "end": 470.15999999999997, "text": " We take basically the output is input 0 multiplied by input 1, we have to shift it otherwise,", "tokens": [492, 747, 1936, 264, 5598, 307, 4846, 1958, 17207, 538, 4846, 502, 11, 321, 362, 281, 5513, 309, 5911, 11], "temperature": 0.0, "avg_logprob": -0.17459768619177476, "compression_ratio": 1.7181818181818183, "no_speech_prob": 1.0276020475430414e-05}, {"id": 93, "seek": 46088, "start": 470.15999999999997, "end": 475.8, "text": " because basically in this case it's a 16-bit sample, then we have a 32-bit result, this", "tokens": [570, 1936, 294, 341, 1389, 309, 311, 257, 3165, 12, 5260, 6889, 11, 550, 321, 362, 257, 8858, 12, 5260, 1874, 11, 341], "temperature": 0.0, "avg_logprob": -0.17459768619177476, "compression_ratio": 1.7181818181818183, "no_speech_prob": 1.0276020475430414e-05}, {"id": 94, "seek": 46088, "start": 475.8, "end": 480.56, "text": " is to convert it back into a 16-bit sample so that we can send it to the output, but", "tokens": [307, 281, 7620, 309, 646, 666, 257, 3165, 12, 5260, 6889, 370, 300, 321, 393, 2845, 309, 281, 264, 5598, 11, 457], "temperature": 0.0, "avg_logprob": -0.17459768619177476, "compression_ratio": 1.7181818181818183, "no_speech_prob": 1.0276020475430414e-05}, {"id": 95, "seek": 46088, "start": 480.56, "end": 481.56, "text": " why is this cool?", "tokens": [983, 307, 341, 1627, 30], "temperature": 0.0, "avg_logprob": -0.17459768619177476, "compression_ratio": 1.7181818181818183, "no_speech_prob": 1.0276020475430414e-05}, {"id": 96, "seek": 46088, "start": 481.56, "end": 487.96, "text": " This is very simple, but what's cool is with this very, very simple piece of code in Verilog,", "tokens": [639, 307, 588, 2199, 11, 457, 437, 311, 1627, 307, 365, 341, 588, 11, 588, 2199, 2522, 295, 3089, 294, 4281, 388, 664, 11], "temperature": 0.0, "avg_logprob": -0.17459768619177476, "compression_ratio": 1.7181818181818183, "no_speech_prob": 1.0276020475430414e-05}, {"id": 97, "seek": 48796, "start": 487.96, "end": 494.64, "text": " you achieve something that is ridiculously low latency, so here we're achieving just", "tokens": [291, 4584, 746, 300, 307, 41358, 2295, 27043, 11, 370, 510, 321, 434, 19626, 445], "temperature": 0.0, "avg_logprob": -0.17478183110555012, "compression_ratio": 1.6594982078853047, "no_speech_prob": 2.1426778403110802e-05}, {"id": 98, "seek": 48796, "start": 494.64, "end": 500.79999999999995, "text": " with that example, like basically 120 microseconds of latency, if you're sampling at 192 kHz that's", "tokens": [365, 300, 1365, 11, 411, 1936, 10411, 3123, 37841, 28750, 295, 27043, 11, 498, 291, 434, 21179, 412, 1294, 17, 350, 21409, 300, 311], "temperature": 0.0, "avg_logprob": -0.17478183110555012, "compression_ratio": 1.6594982078853047, "no_speech_prob": 2.1426778403110802e-05}, {"id": 99, "seek": 48796, "start": 500.79999999999995, "end": 504.71999999999997, "text": " 24 samples of latency from the input to the output, just with this small bit of code.", "tokens": [4022, 10938, 295, 27043, 490, 264, 4846, 281, 264, 5598, 11, 445, 365, 341, 1359, 857, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.17478183110555012, "compression_ratio": 1.6594982078853047, "no_speech_prob": 2.1426778403110802e-05}, {"id": 100, "seek": 48796, "start": 504.71999999999997, "end": 513.88, "text": " If you are going to try and do that on a microcontroller, not easy, you can do it, but it's not easy.", "tokens": [759, 291, 366, 516, 281, 853, 293, 360, 300, 322, 257, 4532, 9000, 22922, 11, 406, 1858, 11, 291, 393, 360, 309, 11, 457, 309, 311, 406, 1858, 13], "temperature": 0.0, "avg_logprob": -0.17478183110555012, "compression_ratio": 1.6594982078853047, "no_speech_prob": 2.1426778403110802e-05}, {"id": 101, "seek": 48796, "start": 513.88, "end": 517.6, "text": " In this case, I actually think that the latency on an FPGA-based system should have been a", "tokens": [682, 341, 1389, 11, 286, 767, 519, 300, 264, 27043, 322, 364, 36655, 12570, 12, 6032, 1185, 820, 362, 668, 257], "temperature": 0.0, "avg_logprob": -0.17478183110555012, "compression_ratio": 1.6594982078853047, "no_speech_prob": 2.1426778403110802e-05}, {"id": 102, "seek": 51760, "start": 517.6, "end": 522.6800000000001, "text": " bit lower, but what's actually going on here, why are we getting 24 samples of latency from", "tokens": [857, 3126, 11, 457, 437, 311, 767, 516, 322, 510, 11, 983, 366, 321, 1242, 4022, 10938, 295, 27043, 490], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 103, "seek": 51760, "start": 522.6800000000001, "end": 526.32, "text": " the input to the output with a simple implementation like this?", "tokens": [264, 4846, 281, 264, 5598, 365, 257, 2199, 11420, 411, 341, 30], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 104, "seek": 51760, "start": 526.32, "end": 532.0, "text": " It's because the audio codec on this piece of hardware itself has a bunch of internal", "tokens": [467, 311, 570, 264, 6278, 3089, 66, 322, 341, 2522, 295, 8837, 2564, 575, 257, 3840, 295, 6920], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 105, "seek": 51760, "start": 532.0, "end": 537.64, "text": " filters that kind of pipeline the input, it uses this for like, I think some kind of pre-emphasis", "tokens": [15995, 300, 733, 295, 15517, 264, 4846, 11, 309, 4960, 341, 337, 411, 11, 286, 519, 512, 733, 295, 659, 12, 443, 7485, 271], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 106, "seek": 51760, "start": 537.64, "end": 542.6, "text": " function or something that you can partially disable but not entirely disable, but that's", "tokens": [2445, 420, 746, 300, 291, 393, 18886, 28362, 457, 406, 7696, 28362, 11, 457, 300, 311], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 107, "seek": 51760, "start": 542.6, "end": 544.1600000000001, "text": " kind of where this is coming from.", "tokens": [733, 295, 689, 341, 307, 1348, 490, 13], "temperature": 0.0, "avg_logprob": -0.13845228297369822, "compression_ratio": 1.7313432835820894, "no_speech_prob": 2.504957592464052e-05}, {"id": 108, "seek": 54416, "start": 544.16, "end": 551.16, "text": " In this plot up here, you can see, kind of in red, a signal coming into both the URAC", "tokens": [682, 341, 7542, 493, 510, 11, 291, 393, 536, 11, 733, 295, 294, 2182, 11, 257, 6358, 1348, 666, 1293, 264, 624, 3750, 34], "temperature": 0.0, "avg_logprob": -0.18311284495665964, "compression_ratio": 1.7937219730941705, "no_speech_prob": 5.8584528233041056e-06}, {"id": 109, "seek": 54416, "start": 551.16, "end": 557.92, "text": " PMOD and another MCU-based module, the DISTing, and then the yellow trace is what's coming", "tokens": [12499, 14632, 293, 1071, 39415, 12, 6032, 10088, 11, 264, 413, 19756, 278, 11, 293, 550, 264, 5566, 13508, 307, 437, 311, 1348], "temperature": 0.0, "avg_logprob": -0.18311284495665964, "compression_ratio": 1.7937219730941705, "no_speech_prob": 5.8584528233041056e-06}, {"id": 110, "seek": 54416, "start": 557.92, "end": 561.1999999999999, "text": " out of the URAC PMOD and then the blue trace is what's coming out of the microcontroller-based", "tokens": [484, 295, 264, 624, 3750, 34, 12499, 14632, 293, 550, 264, 3344, 13508, 307, 437, 311, 1348, 484, 295, 264, 4532, 9000, 22922, 12, 6032], "temperature": 0.0, "avg_logprob": -0.18311284495665964, "compression_ratio": 1.7937219730941705, "no_speech_prob": 5.8584528233041056e-06}, {"id": 111, "seek": 54416, "start": 561.1999999999999, "end": 564.88, "text": " module, so you can kind of see the difference in latency there, and both of them are both", "tokens": [10088, 11, 370, 291, 393, 733, 295, 536, 264, 2649, 294, 27043, 456, 11, 293, 1293, 295, 552, 366, 1293], "temperature": 0.0, "avg_logprob": -0.18311284495665964, "compression_ratio": 1.7937219730941705, "no_speech_prob": 5.8584528233041056e-06}, {"id": 112, "seek": 54416, "start": 564.88, "end": 570.64, "text": " acting as the same thing in this case.", "tokens": [6577, 382, 264, 912, 551, 294, 341, 1389, 13], "temperature": 0.0, "avg_logprob": -0.18311284495665964, "compression_ratio": 1.7937219730941705, "no_speech_prob": 5.8584528233041056e-06}, {"id": 113, "seek": 57064, "start": 570.64, "end": 575.68, "text": " So the hardware, I went through a few different revisions, I made some mistakes in revision", "tokens": [407, 264, 8837, 11, 286, 1437, 807, 257, 1326, 819, 3698, 4252, 11, 286, 1027, 512, 8038, 294, 34218], "temperature": 0.0, "avg_logprob": -0.1641976439837113, "compression_ratio": 1.6206896551724137, "no_speech_prob": 8.007115866348613e-06}, {"id": 114, "seek": 57064, "start": 575.68, "end": 583.08, "text": " one and two, as you can see here by the Bodge wires, but as of right now, if you were to", "tokens": [472, 293, 732, 11, 382, 291, 393, 536, 510, 538, 264, 363, 19315, 15537, 11, 457, 382, 295, 558, 586, 11, 498, 291, 645, 281], "temperature": 0.0, "avg_logprob": -0.1641976439837113, "compression_ratio": 1.6206896551724137, "no_speech_prob": 8.007115866348613e-06}, {"id": 115, "seek": 57064, "start": 583.08, "end": 589.1999999999999, "text": " go ahead and download the Kaikai design files for revision 2.2, which is this one on the", "tokens": [352, 2286, 293, 5484, 264, 10988, 1035, 1301, 1715, 7098, 337, 34218, 568, 13, 17, 11, 597, 307, 341, 472, 322, 264], "temperature": 0.0, "avg_logprob": -0.1641976439837113, "compression_ratio": 1.6206896551724137, "no_speech_prob": 8.007115866348613e-06}, {"id": 116, "seek": 57064, "start": 589.1999999999999, "end": 593.8, "text": " right here, which I have in front of me here, it works without any modification, so you", "tokens": [558, 510, 11, 597, 286, 362, 294, 1868, 295, 385, 510, 11, 309, 1985, 1553, 604, 26747, 11, 370, 291], "temperature": 0.0, "avg_logprob": -0.1641976439837113, "compression_ratio": 1.6206896551724137, "no_speech_prob": 8.007115866348613e-06}, {"id": 117, "seek": 57064, "start": 593.8, "end": 596.68, "text": " can just build it.", "tokens": [393, 445, 1322, 309, 13], "temperature": 0.0, "avg_logprob": -0.1641976439837113, "compression_ratio": 1.6206896551724137, "no_speech_prob": 8.007115866348613e-06}, {"id": 118, "seek": 59668, "start": 596.68, "end": 602.0, "text": " But there is a revision 3 coming and I'll talk about that in a second.", "tokens": [583, 456, 307, 257, 34218, 805, 1348, 293, 286, 603, 751, 466, 300, 294, 257, 1150, 13], "temperature": 0.0, "avg_logprob": -0.1393015505087496, "compression_ratio": 1.640495867768595, "no_speech_prob": 1.3839593520970084e-05}, {"id": 119, "seek": 59668, "start": 602.0, "end": 606.1999999999999, "text": " So what does this hardware design actually look like?", "tokens": [407, 437, 775, 341, 8837, 1715, 767, 574, 411, 30], "temperature": 0.0, "avg_logprob": -0.1393015505087496, "compression_ratio": 1.640495867768595, "no_speech_prob": 1.3839593520970084e-05}, {"id": 120, "seek": 59668, "start": 606.1999999999999, "end": 610.04, "text": " Basically there are eight channels, we have four input channels, four output channels,", "tokens": [8537, 456, 366, 3180, 9235, 11, 321, 362, 1451, 4846, 9235, 11, 1451, 5598, 9235, 11], "temperature": 0.0, "avg_logprob": -0.1393015505087496, "compression_ratio": 1.640495867768595, "no_speech_prob": 1.3839593520970084e-05}, {"id": 121, "seek": 59668, "start": 610.04, "end": 615.0799999999999, "text": " a bunch of LED indicators so you can see what's going on, but then the heart of this whole", "tokens": [257, 3840, 295, 11261, 22176, 370, 291, 393, 536, 437, 311, 516, 322, 11, 457, 550, 264, 1917, 295, 341, 1379], "temperature": 0.0, "avg_logprob": -0.1393015505087496, "compression_ratio": 1.640495867768595, "no_speech_prob": 1.3839593520970084e-05}, {"id": 122, "seek": 59668, "start": 615.0799999999999, "end": 623.4399999999999, "text": " system is the audio codec, and what's interesting about this audio codec is it's a chip that's", "tokens": [1185, 307, 264, 6278, 3089, 66, 11, 293, 437, 311, 1880, 466, 341, 6278, 3089, 66, 307, 309, 311, 257, 11409, 300, 311], "temperature": 0.0, "avg_logprob": -0.1393015505087496, "compression_ratio": 1.640495867768595, "no_speech_prob": 1.3839593520970084e-05}, {"id": 123, "seek": 62344, "start": 623.44, "end": 628.6400000000001, "text": " kind of intended for the automotive industry, and some other Eurorack modules for this kind", "tokens": [733, 295, 10226, 337, 264, 32866, 3518, 11, 293, 512, 661, 462, 374, 284, 501, 16679, 337, 341, 733], "temperature": 0.0, "avg_logprob": -0.10322679499144195, "compression_ratio": 1.697674418604651, "no_speech_prob": 1.9202299881726503e-05}, {"id": 124, "seek": 62344, "start": 628.6400000000001, "end": 634.32, "text": " of purpose will not use kind of a normal audio codec, they'll use instrumentation amplifiers", "tokens": [295, 4334, 486, 406, 764, 733, 295, 257, 2710, 6278, 3089, 66, 11, 436, 603, 764, 7198, 399, 9731, 23463], "temperature": 0.0, "avg_logprob": -0.10322679499144195, "compression_ratio": 1.697674418604651, "no_speech_prob": 1.9202299881726503e-05}, {"id": 125, "seek": 62344, "start": 634.32, "end": 642.48, "text": " or some other type of ADC or DAC, and the reason for that is because in Eurorack we're", "tokens": [420, 512, 661, 2010, 295, 9135, 34, 420, 39038, 11, 293, 264, 1778, 337, 300, 307, 570, 294, 462, 374, 284, 501, 321, 434], "temperature": 0.0, "avg_logprob": -0.10322679499144195, "compression_ratio": 1.697674418604651, "no_speech_prob": 1.9202299881726503e-05}, {"id": 126, "seek": 62344, "start": 642.48, "end": 648.44, "text": " not just dealing with audio frequency AC coupled signals, in Eurorack we're also dealing with", "tokens": [406, 445, 6260, 365, 6278, 7893, 8157, 29482, 12354, 11, 294, 462, 374, 284, 501, 321, 434, 611, 6260, 365], "temperature": 0.0, "avg_logprob": -0.10322679499144195, "compression_ratio": 1.697674418604651, "no_speech_prob": 1.9202299881726503e-05}, {"id": 127, "seek": 64844, "start": 648.44, "end": 655.24, "text": " sometimes extremely fast DC signals that need to be accurate, for example if you are controlling", "tokens": [2171, 4664, 2370, 9114, 12354, 300, 643, 281, 312, 8559, 11, 337, 1365, 498, 291, 366, 14905], "temperature": 0.0, "avg_logprob": -0.12841758913206822, "compression_ratio": 1.7698412698412698, "no_speech_prob": 3.116370862699114e-05}, {"id": 128, "seek": 64844, "start": 655.24, "end": 660.6800000000001, "text": " an oscillator and you need to control the pitch very precisely, the absolute DC accuracy", "tokens": [364, 43859, 293, 291, 643, 281, 1969, 264, 7293, 588, 13402, 11, 264, 8236, 9114, 14170], "temperature": 0.0, "avg_logprob": -0.12841758913206822, "compression_ratio": 1.7698412698412698, "no_speech_prob": 3.116370862699114e-05}, {"id": 129, "seek": 64844, "start": 660.6800000000001, "end": 665.5600000000001, "text": " is important because if you shift by a few millivolts then suddenly your song is not", "tokens": [307, 1021, 570, 498, 291, 5513, 538, 257, 1326, 1728, 21356, 1373, 550, 5800, 428, 2153, 307, 406], "temperature": 0.0, "avg_logprob": -0.12841758913206822, "compression_ratio": 1.7698412698412698, "no_speech_prob": 3.116370862699114e-05}, {"id": 130, "seek": 64844, "start": 665.5600000000001, "end": 670.8800000000001, "text": " in tune anymore, and that's why DC accuracy is important, and basically audio codec IC", "tokens": [294, 10864, 3602, 11, 293, 300, 311, 983, 9114, 14170, 307, 1021, 11, 293, 1936, 6278, 3089, 66, 14360], "temperature": 0.0, "avg_logprob": -0.12841758913206822, "compression_ratio": 1.7698412698412698, "no_speech_prob": 3.116370862699114e-05}, {"id": 131, "seek": 64844, "start": 670.8800000000001, "end": 677.0400000000001, "text": " is often not designed for DC accuracy, but the benefit of an audio codec IC is that it's", "tokens": [307, 2049, 406, 4761, 337, 9114, 14170, 11, 457, 264, 5121, 295, 364, 6278, 3089, 66, 14360, 307, 300, 309, 311], "temperature": 0.0, "avg_logprob": -0.12841758913206822, "compression_ratio": 1.7698412698412698, "no_speech_prob": 3.116370862699114e-05}, {"id": 132, "seek": 67704, "start": 677.04, "end": 682.52, "text": " cheap, so you might pay three or four euros per unit instead of, I don't know for instrumentation", "tokens": [7084, 11, 370, 291, 1062, 1689, 1045, 420, 1451, 14160, 680, 4985, 2602, 295, 11, 286, 500, 380, 458, 337, 7198, 399], "temperature": 0.0, "avg_logprob": -0.13787245750427246, "compression_ratio": 1.6327433628318584, "no_speech_prob": 2.8364602258079685e-05}, {"id": 133, "seek": 67704, "start": 682.52, "end": 692.56, "text": " quality converter you're paying tens of euros perhaps, but the cool thing is, the main difference", "tokens": [3125, 33905, 291, 434, 6229, 10688, 295, 14160, 4317, 11, 457, 264, 1627, 551, 307, 11, 264, 2135, 2649], "temperature": 0.0, "avg_logprob": -0.13787245750427246, "compression_ratio": 1.6327433628318584, "no_speech_prob": 2.8364602258079685e-05}, {"id": 134, "seek": 67704, "start": 692.56, "end": 698.24, "text": " here and at least in the case of this codec that I was playing with in this hardware,", "tokens": [510, 293, 412, 1935, 294, 264, 1389, 295, 341, 3089, 66, 300, 286, 390, 2433, 365, 294, 341, 8837, 11], "temperature": 0.0, "avg_logprob": -0.13787245750427246, "compression_ratio": 1.6327433628318584, "no_speech_prob": 2.8364602258079685e-05}, {"id": 135, "seek": 67704, "start": 698.24, "end": 703.9599999999999, "text": " there is kind of a fixed DC bias in the codec input and output when you get it from the", "tokens": [456, 307, 733, 295, 257, 6806, 9114, 12577, 294, 264, 3089, 66, 4846, 293, 5598, 562, 291, 483, 309, 490, 264], "temperature": 0.0, "avg_logprob": -0.13787245750427246, "compression_ratio": 1.6327433628318584, "no_speech_prob": 2.8364602258079685e-05}, {"id": 136, "seek": 70396, "start": 703.96, "end": 709.6, "text": " factory and you can calibrate this out just using a simple, like you can basically calibrate", "tokens": [9265, 293, 291, 393, 21583, 4404, 341, 484, 445, 1228, 257, 2199, 11, 411, 291, 393, 1936, 21583, 4404], "temperature": 0.0, "avg_logprob": -0.12774533358487217, "compression_ratio": 1.8313253012048192, "no_speech_prob": 7.020069460850209e-05}, {"id": 137, "seek": 70396, "start": 709.6, "end": 715.1600000000001, "text": " it out using a simple linear regression, kind of feed five volts into the codec, measure", "tokens": [309, 484, 1228, 257, 2199, 8213, 24590, 11, 733, 295, 3154, 1732, 22322, 666, 264, 3089, 66, 11, 3481], "temperature": 0.0, "avg_logprob": -0.12774533358487217, "compression_ratio": 1.8313253012048192, "no_speech_prob": 7.020069460850209e-05}, {"id": 138, "seek": 70396, "start": 715.1600000000001, "end": 720.2, "text": " what it gives you, send minus five volts in, measure what it gives you, do that for the", "tokens": [437, 309, 2709, 291, 11, 2845, 3175, 1732, 22322, 294, 11, 3481, 437, 309, 2709, 291, 11, 360, 300, 337, 264], "temperature": 0.0, "avg_logprob": -0.12774533358487217, "compression_ratio": 1.8313253012048192, "no_speech_prob": 7.020069460850209e-05}, {"id": 139, "seek": 70396, "start": 720.2, "end": 726.1600000000001, "text": " inputs as well as the outputs, and then on the FPGA itself account for this DC bias that's", "tokens": [15743, 382, 731, 382, 264, 23930, 11, 293, 550, 322, 264, 36655, 12570, 2564, 2696, 337, 341, 9114, 12577, 300, 311], "temperature": 0.0, "avg_logprob": -0.12774533358487217, "compression_ratio": 1.8313253012048192, "no_speech_prob": 7.020069460850209e-05}, {"id": 140, "seek": 70396, "start": 726.1600000000001, "end": 730.72, "text": " present in the codec after it's manufactured, and after doing it going through this calibration", "tokens": [1974, 294, 264, 3089, 66, 934, 309, 311, 25738, 11, 293, 934, 884, 309, 516, 807, 341, 38732], "temperature": 0.0, "avg_logprob": -0.12774533358487217, "compression_ratio": 1.8313253012048192, "no_speech_prob": 7.020069460850209e-05}, {"id": 141, "seek": 73072, "start": 730.72, "end": 735.12, "text": " process, and there are scripts to do this calibration in the GitHub repository, you", "tokens": [1399, 11, 293, 456, 366, 23294, 281, 360, 341, 38732, 294, 264, 23331, 25841, 11, 291], "temperature": 0.0, "avg_logprob": -0.14879770186340924, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.1079173166071996e-05}, {"id": 142, "seek": 73072, "start": 735.12, "end": 740.6, "text": " can actually achieve kind of sub five millivolt level, absolute DC accuracy between minus", "tokens": [393, 767, 4584, 733, 295, 1422, 1732, 1728, 592, 4837, 1496, 11, 8236, 9114, 14170, 1296, 3175], "temperature": 0.0, "avg_logprob": -0.14879770186340924, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.1079173166071996e-05}, {"id": 143, "seek": 73072, "start": 740.6, "end": 746.76, "text": " ten and ten volts using an audio codec chip, which is awesome because it brings manufacturing", "tokens": [2064, 293, 2064, 22322, 1228, 364, 6278, 3089, 66, 11409, 11, 597, 307, 3476, 570, 309, 5607, 11096], "temperature": 0.0, "avg_logprob": -0.14879770186340924, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.1079173166071996e-05}, {"id": 144, "seek": 73072, "start": 746.76, "end": 751.9200000000001, "text": " cost down if you decide to kind of create your own FPGA based instrument and it means", "tokens": [2063, 760, 498, 291, 4536, 281, 733, 295, 1884, 428, 1065, 36655, 12570, 2361, 7198, 293, 309, 1355], "temperature": 0.0, "avg_logprob": -0.14879770186340924, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.1079173166071996e-05}, {"id": 145, "seek": 73072, "start": 751.9200000000001, "end": 756.52, "text": " that this thing doesn't cost so much, and it also means you can use I2S which is kind", "tokens": [300, 341, 551, 1177, 380, 2063, 370, 709, 11, 293, 309, 611, 1355, 291, 393, 764, 286, 17, 50, 597, 307, 733], "temperature": 0.0, "avg_logprob": -0.14879770186340924, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.1079173166071996e-05}, {"id": 146, "seek": 75652, "start": 756.52, "end": 761.76, "text": " of a standard-dish audio interface protocol, embedded audio interface protocol instead", "tokens": [295, 257, 3832, 12, 40974, 6278, 9226, 10336, 11, 16741, 6278, 9226, 10336, 2602], "temperature": 0.0, "avg_logprob": -0.1862954616546631, "compression_ratio": 1.7087378640776698, "no_speech_prob": 9.813145879888907e-06}, {"id": 147, "seek": 75652, "start": 761.76, "end": 770.12, "text": " of some other interface protocol, so basically the datasheet strongly, it does not suggest", "tokens": [295, 512, 661, 9226, 10336, 11, 370, 1936, 264, 20377, 38164, 10613, 11, 309, 775, 406, 3402], "temperature": 0.0, "avg_logprob": -0.1862954616546631, "compression_ratio": 1.7087378640776698, "no_speech_prob": 9.813145879888907e-06}, {"id": 148, "seek": 75652, "start": 770.12, "end": 779.56, "text": " that you do this, but if you do it, it works really well, so like explicitly ignoring what", "tokens": [300, 291, 360, 341, 11, 457, 498, 291, 360, 309, 11, 309, 1985, 534, 731, 11, 370, 411, 20803, 26258, 437], "temperature": 0.0, "avg_logprob": -0.1862954616546631, "compression_ratio": 1.7087378640776698, "no_speech_prob": 9.813145879888907e-06}, {"id": 149, "seek": 75652, "start": 779.56, "end": 783.04, "text": " it says to do in the recommended external circuits, and I've tested the crap out of", "tokens": [309, 1619, 281, 360, 294, 264, 9628, 8320, 26354, 11, 293, 286, 600, 8246, 264, 12426, 484, 295], "temperature": 0.0, "avg_logprob": -0.1862954616546631, "compression_ratio": 1.7087378640776698, "no_speech_prob": 9.813145879888907e-06}, {"id": 150, "seek": 78304, "start": 783.04, "end": 786.9599999999999, "text": " this, even over temperature and so on, it seems to work, and I mean fortunately we're", "tokens": [341, 11, 754, 670, 4292, 293, 370, 322, 11, 309, 2544, 281, 589, 11, 293, 286, 914, 25511, 321, 434], "temperature": 0.0, "avg_logprob": -0.18115564346313476, "compression_ratio": 1.5877862595419847, "no_speech_prob": 1.860708653111942e-05}, {"id": 151, "seek": 78304, "start": 786.9599999999999, "end": 792.4, "text": " not dealing with automotive and functional safety, so no one's going to complain if we", "tokens": [406, 6260, 365, 32866, 293, 11745, 4514, 11, 370, 572, 472, 311, 516, 281, 11024, 498, 321], "temperature": 0.0, "avg_logprob": -0.18115564346313476, "compression_ratio": 1.5877862595419847, "no_speech_prob": 1.860708653111942e-05}, {"id": 152, "seek": 78304, "start": 792.4, "end": 797.64, "text": " don't do things the way the datasheet suggests that we do them.", "tokens": [500, 380, 360, 721, 264, 636, 264, 20377, 38164, 13409, 300, 321, 360, 552, 13], "temperature": 0.0, "avg_logprob": -0.18115564346313476, "compression_ratio": 1.5877862595419847, "no_speech_prob": 1.860708653111942e-05}, {"id": 153, "seek": 78304, "start": 797.64, "end": 803.1999999999999, "text": " So this is kind of just a simplified overview of what the FPGA gateway looks like for the", "tokens": [407, 341, 307, 733, 295, 445, 257, 26335, 12492, 295, 437, 264, 36655, 12570, 28532, 1542, 411, 337, 264], "temperature": 0.0, "avg_logprob": -0.18115564346313476, "compression_ratio": 1.5877862595419847, "no_speech_prob": 1.860708653111942e-05}, {"id": 154, "seek": 78304, "start": 803.1999999999999, "end": 810.8399999999999, "text": " example project here, and basically the part that you write yourself is this user-defined", "tokens": [1365, 1716, 510, 11, 293, 1936, 264, 644, 300, 291, 2464, 1803, 307, 341, 4195, 12, 37716], "temperature": 0.0, "avg_logprob": -0.18115564346313476, "compression_ratio": 1.5877862595419847, "no_speech_prob": 1.860708653111942e-05}, {"id": 155, "seek": 81084, "start": 810.84, "end": 820.48, "text": " DSP core, and then between that and the rest of the world is a driver for the codec IC,", "tokens": [15816, 47, 4965, 11, 293, 550, 1296, 300, 293, 264, 1472, 295, 264, 1002, 307, 257, 6787, 337, 264, 3089, 66, 14360, 11], "temperature": 0.0, "avg_logprob": -0.16787067114138135, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.4058579836273566e-05}, {"id": 156, "seek": 81084, "start": 820.48, "end": 826.5600000000001, "text": " a driver for the I2C interface that initializes the codec IC, a calibration routine that basically", "tokens": [257, 6787, 337, 264, 286, 17, 34, 9226, 300, 5883, 5660, 264, 3089, 66, 14360, 11, 257, 38732, 9927, 300, 1936], "temperature": 0.0, "avg_logprob": -0.16787067114138135, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.4058579836273566e-05}, {"id": 157, "seek": 81084, "start": 826.5600000000001, "end": 832.6800000000001, "text": " does this online calibration of the codec that I was mentioning before, and yeah, I", "tokens": [775, 341, 2950, 38732, 295, 264, 3089, 66, 300, 286, 390, 18315, 949, 11, 293, 1338, 11, 286], "temperature": 0.0, "avg_logprob": -0.16787067114138135, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.4058579836273566e-05}, {"id": 158, "seek": 81084, "start": 832.6800000000001, "end": 834.64, "text": " mean that's what it looks like.", "tokens": [914, 300, 311, 437, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.16787067114138135, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.4058579836273566e-05}, {"id": 159, "seek": 81084, "start": 834.64, "end": 839.4000000000001, "text": " So that's kind of the hardware, and I also described a bit about how the gateway works,", "tokens": [407, 300, 311, 733, 295, 264, 8837, 11, 293, 286, 611, 7619, 257, 857, 466, 577, 264, 28532, 1985, 11], "temperature": 0.0, "avg_logprob": -0.16787067114138135, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.4058579836273566e-05}, {"id": 160, "seek": 83940, "start": 839.4, "end": 845.04, "text": " but if you have no hardware at all, you can still play with this stuff, because I actually", "tokens": [457, 498, 291, 362, 572, 8837, 412, 439, 11, 291, 393, 920, 862, 365, 341, 1507, 11, 570, 286, 767], "temperature": 0.0, "avg_logprob": -0.2161980445938881, "compression_ratio": 1.5807860262008733, "no_speech_prob": 4.5351804146775976e-05}, {"id": 161, "seek": 83940, "start": 845.04, "end": 851.6, "text": " wrote a plug-in for a BCV rack, which is an open source simulator for modular synthesis", "tokens": [4114, 257, 5452, 12, 259, 337, 257, 14359, 53, 14788, 11, 597, 307, 364, 1269, 4009, 32974, 337, 31111, 30252], "temperature": 0.0, "avg_logprob": -0.2161980445938881, "compression_ratio": 1.5807860262008733, "no_speech_prob": 4.5351804146775976e-05}, {"id": 162, "seek": 83940, "start": 851.6, "end": 860.1999999999999, "text": " system, basically, Eurorack, and what this plug-in does is it actually simulates with", "tokens": [1185, 11, 1936, 11, 462, 374, 284, 501, 11, 293, 437, 341, 5452, 12, 259, 775, 307, 309, 767, 1034, 26192, 365], "temperature": 0.0, "avg_logprob": -0.2161980445938881, "compression_ratio": 1.5807860262008733, "no_speech_prob": 4.5351804146775976e-05}, {"id": 163, "seek": 83940, "start": 860.1999999999999, "end": 867.64, "text": " varilator, like here I can show you, oh, got one minute, okay, so here's a varilog implementation", "tokens": [1374, 388, 1639, 11, 411, 510, 286, 393, 855, 291, 11, 1954, 11, 658, 472, 3456, 11, 1392, 11, 370, 510, 311, 257, 1374, 388, 664, 11420], "temperature": 0.0, "avg_logprob": -0.2161980445938881, "compression_ratio": 1.5807860262008733, "no_speech_prob": 4.5351804146775976e-05}, {"id": 164, "seek": 86764, "start": 867.64, "end": 874.24, "text": " of a clock divider, and this is sitting inside a plug-in for BCV rack, and it's compiled", "tokens": [295, 257, 7830, 3414, 1438, 11, 293, 341, 307, 3798, 1854, 257, 5452, 12, 259, 337, 14359, 53, 14788, 11, 293, 309, 311, 36548], "temperature": 0.0, "avg_logprob": -0.13537200291951498, "compression_ratio": 1.5874439461883407, "no_speech_prob": 3.7845741189812543e-06}, {"id": 165, "seek": 86764, "start": 874.24, "end": 880.28, "text": " with varilator to C++ so that you can run it inside an entire modular synthesis system", "tokens": [365, 1374, 388, 1639, 281, 383, 25472, 370, 300, 291, 393, 1190, 309, 1854, 364, 2302, 31111, 30252, 1185], "temperature": 0.0, "avg_logprob": -0.13537200291951498, "compression_ratio": 1.5874439461883407, "no_speech_prob": 3.7845741189812543e-06}, {"id": 166, "seek": 86764, "start": 880.28, "end": 888.76, "text": " simulation, and so now we have basically this simulation of the hardware with the varilog", "tokens": [16575, 11, 293, 370, 586, 321, 362, 1936, 341, 16575, 295, 264, 8837, 365, 264, 1374, 388, 664], "temperature": 0.0, "avg_logprob": -0.13537200291951498, "compression_ratio": 1.5874439461883407, "no_speech_prob": 3.7845741189812543e-06}, {"id": 167, "seek": 86764, "start": 888.76, "end": 894.08, "text": " that would be running on your FPGA, actually running through varilator in translated C++", "tokens": [300, 576, 312, 2614, 322, 428, 36655, 12570, 11, 767, 2614, 807, 1374, 388, 1639, 294, 16805, 383, 25472], "temperature": 0.0, "avg_logprob": -0.13537200291951498, "compression_ratio": 1.5874439461883407, "no_speech_prob": 3.7845741189812543e-06}, {"id": 168, "seek": 89408, "start": 894.08, "end": 898.88, "text": " linked to the BCV rack binary so that you can actually run your FPGA code inside a modular", "tokens": [9408, 281, 264, 14359, 53, 14788, 17434, 370, 300, 291, 393, 767, 1190, 428, 36655, 12570, 3089, 1854, 257, 31111], "temperature": 0.0, "avg_logprob": -0.1902659438377203, "compression_ratio": 1.6045454545454545, "no_speech_prob": 1.1122314390377142e-05}, {"id": 169, "seek": 89408, "start": 898.88, "end": 910.2800000000001, "text": " synthesis system, which is kind of crazy, and it makes me happy that you clapped then,", "tokens": [30252, 1185, 11, 597, 307, 733, 295, 3219, 11, 293, 309, 1669, 385, 2055, 300, 291, 596, 20780, 550, 11], "temperature": 0.0, "avg_logprob": -0.1902659438377203, "compression_ratio": 1.6045454545454545, "no_speech_prob": 1.1122314390377142e-05}, {"id": 170, "seek": 89408, "start": 910.2800000000001, "end": 914.36, "text": " but that was actually the easiest thing to do out of everything that I described before,", "tokens": [457, 300, 390, 767, 264, 12889, 551, 281, 360, 484, 295, 1203, 300, 286, 7619, 949, 11], "temperature": 0.0, "avg_logprob": -0.1902659438377203, "compression_ratio": 1.6045454545454545, "no_speech_prob": 1.1122314390377142e-05}, {"id": 171, "seek": 89408, "start": 914.36, "end": 918.44, "text": " like literally that was about four hours of work, I was surprised that it was so easy,", "tokens": [411, 3736, 300, 390, 466, 1451, 2496, 295, 589, 11, 286, 390, 6100, 300, 309, 390, 370, 1858, 11], "temperature": 0.0, "avg_logprob": -0.1902659438377203, "compression_ratio": 1.6045454545454545, "no_speech_prob": 1.1122314390377142e-05}, {"id": 172, "seek": 91844, "start": 918.44, "end": 926.32, "text": " but I encourage you to play with this stuff if you're interested in it, so, oh, okay,", "tokens": [457, 286, 5373, 291, 281, 862, 365, 341, 1507, 498, 291, 434, 3102, 294, 309, 11, 370, 11, 1954, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.1718752200786884, "compression_ratio": 1.6956521739130435, "no_speech_prob": 4.255198655300774e-05}, {"id": 173, "seek": 91844, "start": 926.32, "end": 937.24, "text": " that's time for me, I was almost done, thank you for listening, so two things I would like", "tokens": [300, 311, 565, 337, 385, 11, 286, 390, 1920, 1096, 11, 1309, 291, 337, 4764, 11, 370, 732, 721, 286, 576, 411], "temperature": 0.0, "avg_logprob": -0.1718752200786884, "compression_ratio": 1.6956521739130435, "no_speech_prob": 4.255198655300774e-05}, {"id": 174, "seek": 91844, "start": 937.24, "end": 942.6800000000001, "text": " to note, I am thinking of going through with a manufacturing run for the revision three", "tokens": [281, 3637, 11, 286, 669, 1953, 295, 516, 807, 365, 257, 11096, 1190, 337, 264, 34218, 1045], "temperature": 0.0, "avg_logprob": -0.1718752200786884, "compression_ratio": 1.6956521739130435, "no_speech_prob": 4.255198655300774e-05}, {"id": 175, "seek": 91844, "start": 942.6800000000001, "end": 947.2800000000001, "text": " of these boards, so if you are interested in the hardware here, if this is your niche,", "tokens": [295, 613, 13293, 11, 370, 498, 291, 366, 3102, 294, 264, 8837, 510, 11, 498, 341, 307, 428, 19956, 11], "temperature": 0.0, "avg_logprob": -0.1718752200786884, "compression_ratio": 1.6956521739130435, "no_speech_prob": 4.255198655300774e-05}, {"id": 176, "seek": 94728, "start": 947.28, "end": 951.28, "text": " start a GitHub repository so I know how many people will be interested, that's my only", "tokens": [722, 257, 23331, 25841, 370, 286, 458, 577, 867, 561, 486, 312, 3102, 11, 300, 311, 452, 787], "temperature": 0.0, "avg_logprob": -0.21314734504336402, "compression_ratio": 1.4350282485875707, "no_speech_prob": 8.957734098657966e-05}, {"id": 177, "seek": 94728, "start": 951.28, "end": 954.68, "text": " request, because if I manufacture a hundred of these things and they just hang around", "tokens": [5308, 11, 570, 498, 286, 27400, 257, 3262, 295, 613, 721, 293, 436, 445, 3967, 926], "temperature": 0.0, "avg_logprob": -0.21314734504336402, "compression_ratio": 1.4350282485875707, "no_speech_prob": 8.957734098657966e-05}, {"id": 178, "seek": 95468, "start": 954.68, "end": 982.1999999999999, "text": " in my apartment, then I won't know what to do with them, so thank you. Thank you.", "tokens": [50364, 294, 452, 9587, 11, 550, 286, 1582, 380, 458, 437, 281, 360, 365, 552, 11, 370, 1309, 291, 13, 1044, 291, 13, 51740], "temperature": 0.0, "avg_logprob": -0.25423494338989255, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.00017348297114949673}], "language": "en"}