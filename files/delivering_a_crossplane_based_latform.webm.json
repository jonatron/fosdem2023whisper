{"text": " Hi everyone, I'm here today to talk about delivering a cross-plane based platform. A few words about myself. My name is Maximilian Blatt. I'm a Kubernetes and cross-plane developer and consultant at Accenture in Germany. I'm using or working with cross-plane for almost two years or yeah it's two years now and I'm the maintainer of several cross-plane related open source projects including the provider for AWS, the provider Styra, provider AguCD and I've contributed to many more including cross-plane itself. Now since this is the CI CD dev room I don't know if everyone is familiar with cross-plane so I just want to spend a minute or two explaining what it is. So cross-plane essentially is an extension to the Kubernetes API and it allows you to create cloud resources the way you would create resources in Kubernetes. So the thing on the left is something most of you probably have seen once or twice which is a Kubernetes pod and it's a very common resource that you have in Kubernetes and it basically just schedules and container where you can run an application. And on the right you see a bucket as you would create it with cross-plane and it represents an actual bucket on AWS S3. And if you look at both of these objects then you see that they are very very similar because they are both inside the Kubernetes cluster and you have both very common or the same kind of structure. You have your API version and your kind. You have the metadata that comes with every cross-plane with every Kubernetes object. You have a declarative spec so where you describe the state of the resources the resource that you want and then you have the status information about the resource itself. And that is one of the features that cross-plane does for you so it connects external APIs any kind of external APIs with Kubernetes and lets you manage your whole cloud infrastructure through one Kubernetes cluster. And the second very powerful feature of cross-plane is that it allows you to create your custom Kubernetes APIs by using something that is called compositions and then it's the thing that you can see in the middle. It's a very rough and simplified graph to show the way cross-plane works and it essentially is always works that you have the user claim for a resource for your API that you have to find using a so-called XID or a composite resource definition and that is then passed to a composition and then the composition spawns a number of managed resources. Managed resources are something that you have seen in this slide before which is in a bucket or any other kind of external resource on any other kind of external API. Today I want to talk mostly about XIDs and compositions because that is what you do most of the time when you are working with cross-plane. Now developing a platform with cross-plane. If you look at simple CI CD pipeline then you have usually build, test and then deploy and that is that is very easy and for most software projects that is also very easy to understand but because cross-plane is a bit different and you have different things that you do inside these steps. So what you do with cross-plane is you are first building and pushing a package and you are you're not writing code but you are just writing YAML objects which are then applied on the cluster and then they are handled and treated like data by cross-plane and then when you are testing your cross-plane platform then you are applying all your compositions and your XIDs to a test cluster and then you are claiming them and then you see if they work and then if that is okay then you are deploying them and you're just doing the same but on a production cluster. I don't want to talk about the deployment today because that is very simple that is basically just like doing a Kubernetes deployment you are building an OCI image and then pushing that and then you are installing that on a cluster using cross-plane and that's it there's not much to tell about but I want to talk about the building and the testing. Let's start with the building. If you have worked with cross-plane before then that is probably very familiar for you. On the left you see an XID as you would write it and on the right you see a composition. So an XID I said it basically just defines the API that your user has applied to and it's very similar to custom resource definitions that you are writing in plain Kubernetes. So you have your API schema in the spec of your XID and then in the composition what you do is you define the resource that should be created when the user claims this API and that can be an arbitrary number of resources so you don't have to create just one resource but you can create dozens of them so I've written compositions where you are creating 30 or more resources at once but that is essentially how it how it is done you are specifying a base resource and then you can modify this resource by copying information from the user claim into the resource that you want to create. That is what you do the whole time you are working with prospering you are writing an XID and then you are writing a composition or multiple compositions and then the user can claim it and then choose the composition that he he wants. That now looks easy at first but when you are doing this on an enterprise level then you are very easily you end up with compositions that can be thousands of lines of code where you are creating dozens of objects and then because you are just dealing with pure YAML then you really starting to get at the limit because you have a lot of things that are very repetitive inside compositions you have very similar structures let's say if you are spawning a lot of similar objects on your cluster but in different compositions then you sometimes you have the same patches that you are reusing for example if you just want to patch the name of a resource by what the user has given to you then you are repeating this patch over and over for every resource for every file you are writing and sometimes you then have compositions who only vary in details if you have different environments for example you are in different AWS accounts and you only want resources to appear in specific accounts or you have different values like the region or static resources that you are that you want to connect like the account ID and then you have to to write the same composition over and over but just with different values and then you see that you are ending up with something that gets really really complicated because you're just doing a lot of copy and paste and so you need something to generate the YAML dynamically and in these two years I spent a lot of thoughts how to simplify this process and I have experimented with a bunch of stuff and we've tried out Q which is some form of JSON like framework that allows you to build structures and have them validated but it's very complex and not very easy for newcomers so if you have new developers and teams then it's a bit hard to to onboard them on it on it because the error messages are not very helpful in many cases and the tool that we ended up establishing was Helm and not the biggest fan of Helm because it's a bit quirky to use and sometimes if you have error messages or if you have errors then it's sometimes hard to detect where the error actually is because it just tells you all there's something wrong with your YAML but you don't know where exactly happened but the good thing with Helm is that it can do everything that we need you can replace common code blocks such as constants with things that you have written out in your values YAML you can use templates to parameterize patches and to save lines of code and you can even replace the the API schemas of XRDs by something that you can generate and that is a really really cool thing so I just checked the code in our repository and we have about a hundred lines of code for for Helm I'm sorry 10,000 lines of code for Helm and we are generating 200,000 lines of code of compositions that are then applied on our API clusters if you are doing this if you are generating code for for crossplane with Helm or any other kind of code generation tool then I recommend you to check these generated YAML bits into your Git because as it turned out it's very hard to detect unintended changes that you are doing in Helm with your bare eyes if you are changing one value or a template somewhere and then it might have some side effects that you're not seeing so easily and so I really recommend you to check these generated codes YAML code into your Git and do not treat it as artifacts and then if you are in your CI then you should what we are doing and that is really helpful is that you should regenerate all your package and your generated YAML and see if any diff appears and if that is the case then you should just treat this as an error and abort and if there is no diff then it's okay and then you can continue on push your package to the OCI repository. Now so much for the building now let's look at the testing. The first things that you are doing probably when you are starting working with crossplane is that you are writing your composition and then you are applying it on a cluster and then you are claiming it and then you see if it works if all the resources get ready and if you can use them and then it's done and that is all manual and that is very easy to do because it requires no additional setup and you can just use the cluster that you have but when you are really want to do automatic testing or enterprise level testing then that is not enough and because you have manual steps you have an outcome that is not reproducible because you are doing the things all by yourself then also you don't have to find what is actually expected outcome because sometimes even if a resource gets healthy it doesn't mean that the resource is configured the way you want it. So we also tried and tested a few things and we started with go testing but it turned out to be much more complicated because you have to write a lot of Bola plate code stuff and so we ended up using Cuddle. I don't know if some people know it. It's basically a Kubernetes testing toolkit and that allows you to define all your test cases in YAML and then just let Cuddle do all the work all the application of the YAML on the server and then you can define the resources that you expect afterwards and if you're imagining the graph that I showed you before where you have the composition and then you claim it and then you have a number of managed resources that are then spawned and so you can have the claim as an input and then you can just define the resources that you want to have created as an output and then you can handle let Cuddle handle all the rest for you and then it can do things in parallel and such and this is a really really great thing. So I recommend Cuddle just to show you an example how these tests look like so you have your small bucket claim if we are sticking to this simple bucket example then you have your bucket claim on the left which is your test case and then on the right you are defining all the objects that you want. You have the bucket claim itself which has a resource status that should become ready and then you have composite resource which is an internal resource that gets created by crossplane where it stores some reconciling information which should also become ready and then you have your actual bucket managed resource which also has properties that you are expecting it to have and it also has a status and so that is all you need to do testing with Cuddle for crossplane and one thing I want to highlight is because in crossplane the names of the composite resource are always generated by the Qube API server so every time you are claiming an API the name is different it's always different and you cannot influence it so what you can do with Cuddle is you can let Cuddle identify the objects that you are expecting via the labels you don't have to pass the name but instead just tell Yammer that you just want an object with certain properties and label set and then Cuddle will look for one object for any object on the server and if there is one that satisfies this constraint then you are good to go. One other thing that we've experienced is very good is you should run your tests in separate clusters for every pipeline that you are running so we are using virtual clusters or B clusters for that that they run inside a physical cluster of course you can create your your own physical cluster all the time but if you are spinning up physical clusters at least on EKS it can take up to 30 minutes and that is not something that you want for every test and it also costs a lot of money and so you're just spinning up virtual clusters which are Kubernetes control planes that are running as POTS inside a cluster where you can then install cross-plane its providers apply the compositions and then run all the tests with Cuddle and then once you are done with the tests then you can just delete the cluster and everything is fine and also you don't have any intervention between two different pipelines because compositions are cluster scope and they are most likely overriding each other. Now I've been talking a lot about end-to-end tests and they are really good and I recommend you to write end-to-end tests when you are building a cross-plane platform but end-to-end tests also take a lot of time to run if you're considering that you have an API where you are creating real physical cloud resources and then you always have to wait for your resource to actually start and then after some time maybe it says it says that something is misconfigured and then you have to look for an error and if you're really just doing development that it really slows you down because you have always this 10, 15, 20 minutes gaps between something happening and there are a lot of mistakes that you can make when you are writing compositions and so I just want to highlight a few things so you have these composite type rest that reference the composition with the XRD they have to match and they are only validated at runtime then you have the group names which have to match with the XRD name you have an unstructured open API schema because XRD is because Kubernetes does not support recursive API schemers yet maybe it will come in the future but as of now it's not supported the same goes for the resource base which can also have any kind of field and then you have the resource patches by default the behavior in cross-plane is if you have if you want to patch from a field to another field and the path of your source does not exist then cross-plane cross-plane default behavior is that it will just ignore the patch and it will not throw an error or anything and if that is the case and you you might easily swallow any any errors and then it you're wondering why things don't work but but you just have a typo in your patch and it's really hard to find these if you have two thousand signs of YAML code and then you have types that must match so if the user is inputting a string then you have to make sure that the string is actually expected and not an integer on the on the actually bucket API for example and then you have the indentation the big thing that if when you are writing YAML files that is my big problem if I'm writing YAML files I always mess up the indentation and then things get all messy so we need something to detect these errors sooner because the sooner you detect an error the easier it is to fix so what we have done because there is nothing out there at least we couldn't find anything we've developed a linter for cross-plane compositions where we are loading actual XID and CRD schemas and then comparing them with the compositions and then applying a set of rules like ensuring that the composition actually supports a valid XID type that you don't have duplicate objects which can sometimes happen especially if you are generating things with helm and then the most important thing is that it actually validates the patches that you are running against the CRD and the XID schemas and that is really really helpful that the first time when we ran this against our production code it turned out to have I think 800 errors that nobody noticed but somehow our our platform still worked yeah and other cool thing about our linter is that it's pure CLI and you don't need a Kubernetes cluster or a cross-plane installation you can just run this locally without setting anything else up and you can it really takes maybe one minute or two and then you have all your your your compositions linter and that is really really really great you're wondering where to get it and there will be a link on the last slide where you can find the code yeah summing things up and so this is our CD CI CD pipeline that we have developed after a couple of years of testing and failing so we use helm to write and build our compositions to generate the YAML code dynamically we use our self-written linter to lint our compositions and we use Cuddle to run all the end-to-end tests and then we are just pushing things with train or any other kind of OCI tool that that comes handy yeah so so much here's a QR code for the linter we are actually making this open source today so you are the first one to actually see the code except us yeah thank you do we have time for questions okay any questions so my question is more about crossplane then crossplane this looks really good though and how does crossplane compare to things like cluster API and the CRDs that that introduces like where's the distinction between the two of them just you know if you're familiar with cluster API so crossplane makes use of CRDs under the hood so if you are if you are applying your XIDs on the cluster then crossplane will generate CRDs which are then used as the API that can be the user can claim if there are no more questions then thank you we're going to make a five minutes break", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 29.64, "text": " Hi everyone, I'm here today to talk about delivering a cross-plane based platform.", "tokens": [2421, 1518, 11, 286, 478, 510, 965, 281, 751, 466, 14666, 257, 3278, 12, 36390, 2361, 3663, 13], "temperature": 0.0, "avg_logprob": -0.4395909309387207, "compression_ratio": 1.0123456790123457, "no_speech_prob": 0.3905426263809204}, {"id": 1, "seek": 2964, "start": 29.64, "end": 33.92, "text": " A few words about myself. My name is Maximilian Blatt. I'm a Kubernetes and", "tokens": [316, 1326, 2283, 466, 2059, 13, 1222, 1315, 307, 29076, 48666, 2177, 1591, 13, 286, 478, 257, 23145, 293], "temperature": 0.0, "avg_logprob": -0.24841011895073783, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.0004608032468240708}, {"id": 2, "seek": 2964, "start": 33.92, "end": 42.0, "text": " cross-plane developer and consultant at Accenture in Germany. I'm using or working", "tokens": [3278, 12, 36390, 10754, 293, 24676, 412, 5725, 317, 540, 294, 7244, 13, 286, 478, 1228, 420, 1364], "temperature": 0.0, "avg_logprob": -0.24841011895073783, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.0004608032468240708}, {"id": 3, "seek": 2964, "start": 42.0, "end": 48.56, "text": " with cross-plane for almost two years or yeah it's two years now and I'm the", "tokens": [365, 3278, 12, 36390, 337, 1920, 732, 924, 420, 1338, 309, 311, 732, 924, 586, 293, 286, 478, 264], "temperature": 0.0, "avg_logprob": -0.24841011895073783, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.0004608032468240708}, {"id": 4, "seek": 2964, "start": 48.56, "end": 53.040000000000006, "text": " maintainer of several cross-plane related open source projects including the", "tokens": [6909, 260, 295, 2940, 3278, 12, 36390, 4077, 1269, 4009, 4455, 3009, 264], "temperature": 0.0, "avg_logprob": -0.24841011895073783, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.0004608032468240708}, {"id": 5, "seek": 2964, "start": 53.040000000000006, "end": 58.72, "text": " provider for AWS, the provider Styra, provider AguCD and I've contributed to", "tokens": [12398, 337, 17650, 11, 264, 12398, 30415, 424, 11, 12398, 2725, 84, 16508, 293, 286, 600, 18434, 281], "temperature": 0.0, "avg_logprob": -0.24841011895073783, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.0004608032468240708}, {"id": 6, "seek": 5872, "start": 58.72, "end": 66.88, "text": " many more including cross-plane itself. Now since this is the CI CD dev room I", "tokens": [867, 544, 3009, 3278, 12, 36390, 2564, 13, 823, 1670, 341, 307, 264, 37777, 6743, 1905, 1808, 286], "temperature": 0.0, "avg_logprob": -0.14992305210658483, "compression_ratio": 1.5169082125603865, "no_speech_prob": 7.924706733319908e-05}, {"id": 7, "seek": 5872, "start": 66.88, "end": 72.2, "text": " don't know if everyone is familiar with cross-plane so I just want to spend a", "tokens": [500, 380, 458, 498, 1518, 307, 4963, 365, 3278, 12, 36390, 370, 286, 445, 528, 281, 3496, 257], "temperature": 0.0, "avg_logprob": -0.14992305210658483, "compression_ratio": 1.5169082125603865, "no_speech_prob": 7.924706733319908e-05}, {"id": 8, "seek": 5872, "start": 72.2, "end": 78.64, "text": " minute or two explaining what it is. So cross-plane essentially is an extension", "tokens": [3456, 420, 732, 13468, 437, 309, 307, 13, 407, 3278, 12, 36390, 4476, 307, 364, 10320], "temperature": 0.0, "avg_logprob": -0.14992305210658483, "compression_ratio": 1.5169082125603865, "no_speech_prob": 7.924706733319908e-05}, {"id": 9, "seek": 5872, "start": 78.64, "end": 84.32, "text": " to the Kubernetes API and it allows you to create cloud resources the way you", "tokens": [281, 264, 23145, 9362, 293, 309, 4045, 291, 281, 1884, 4588, 3593, 264, 636, 291], "temperature": 0.0, "avg_logprob": -0.14992305210658483, "compression_ratio": 1.5169082125603865, "no_speech_prob": 7.924706733319908e-05}, {"id": 10, "seek": 8432, "start": 84.32, "end": 91.83999999999999, "text": " would create resources in Kubernetes. So the thing on the left is something most", "tokens": [576, 1884, 3593, 294, 23145, 13, 407, 264, 551, 322, 264, 1411, 307, 746, 881], "temperature": 0.0, "avg_logprob": -0.14035887113759216, "compression_ratio": 1.6302083333333333, "no_speech_prob": 4.2576619307510555e-05}, {"id": 11, "seek": 8432, "start": 91.83999999999999, "end": 97.75999999999999, "text": " of you probably have seen once or twice which is a Kubernetes pod and it's a", "tokens": [295, 291, 1391, 362, 1612, 1564, 420, 6091, 597, 307, 257, 23145, 2497, 293, 309, 311, 257], "temperature": 0.0, "avg_logprob": -0.14035887113759216, "compression_ratio": 1.6302083333333333, "no_speech_prob": 4.2576619307510555e-05}, {"id": 12, "seek": 8432, "start": 97.75999999999999, "end": 102.72, "text": " very common resource that you have in Kubernetes and it basically just schedules", "tokens": [588, 2689, 7684, 300, 291, 362, 294, 23145, 293, 309, 1936, 445, 28078], "temperature": 0.0, "avg_logprob": -0.14035887113759216, "compression_ratio": 1.6302083333333333, "no_speech_prob": 4.2576619307510555e-05}, {"id": 13, "seek": 8432, "start": 102.72, "end": 108.35999999999999, "text": " and container where you can run an application. And on the right you see a", "tokens": [293, 10129, 689, 291, 393, 1190, 364, 3861, 13, 400, 322, 264, 558, 291, 536, 257], "temperature": 0.0, "avg_logprob": -0.14035887113759216, "compression_ratio": 1.6302083333333333, "no_speech_prob": 4.2576619307510555e-05}, {"id": 14, "seek": 10836, "start": 108.36, "end": 114.16, "text": " bucket as you would create it with cross-plane and it represents an actual", "tokens": [13058, 382, 291, 576, 1884, 309, 365, 3278, 12, 36390, 293, 309, 8855, 364, 3539], "temperature": 0.0, "avg_logprob": -0.13835536915323007, "compression_ratio": 1.6869565217391305, "no_speech_prob": 6.395014497684315e-05}, {"id": 15, "seek": 10836, "start": 114.16, "end": 121.24, "text": " bucket on AWS S3. And if you look at both of these objects then you see that", "tokens": [13058, 322, 17650, 318, 18, 13, 400, 498, 291, 574, 412, 1293, 295, 613, 6565, 550, 291, 536, 300], "temperature": 0.0, "avg_logprob": -0.13835536915323007, "compression_ratio": 1.6869565217391305, "no_speech_prob": 6.395014497684315e-05}, {"id": 16, "seek": 10836, "start": 121.24, "end": 125.4, "text": " they are very very similar because they are both inside the Kubernetes cluster", "tokens": [436, 366, 588, 588, 2531, 570, 436, 366, 1293, 1854, 264, 23145, 13630], "temperature": 0.0, "avg_logprob": -0.13835536915323007, "compression_ratio": 1.6869565217391305, "no_speech_prob": 6.395014497684315e-05}, {"id": 17, "seek": 10836, "start": 125.4, "end": 131.16, "text": " and you have both very common or the same kind of structure. You have your API", "tokens": [293, 291, 362, 1293, 588, 2689, 420, 264, 912, 733, 295, 3877, 13, 509, 362, 428, 9362], "temperature": 0.0, "avg_logprob": -0.13835536915323007, "compression_ratio": 1.6869565217391305, "no_speech_prob": 6.395014497684315e-05}, {"id": 18, "seek": 10836, "start": 131.16, "end": 136.28, "text": " version and your kind. You have the metadata that comes with every cross-plane", "tokens": [3037, 293, 428, 733, 13, 509, 362, 264, 26603, 300, 1487, 365, 633, 3278, 12, 36390], "temperature": 0.0, "avg_logprob": -0.13835536915323007, "compression_ratio": 1.6869565217391305, "no_speech_prob": 6.395014497684315e-05}, {"id": 19, "seek": 13628, "start": 136.28, "end": 142.44, "text": " with every Kubernetes object. You have a declarative spec so where you", "tokens": [365, 633, 23145, 2657, 13, 509, 362, 257, 16694, 1166, 1608, 370, 689, 291], "temperature": 0.0, "avg_logprob": -0.11810857493702959, "compression_ratio": 1.7255813953488373, "no_speech_prob": 2.044539724010974e-05}, {"id": 20, "seek": 13628, "start": 142.44, "end": 147.2, "text": " describe the state of the resources the resource that you want and then you have", "tokens": [6786, 264, 1785, 295, 264, 3593, 264, 7684, 300, 291, 528, 293, 550, 291, 362], "temperature": 0.0, "avg_logprob": -0.11810857493702959, "compression_ratio": 1.7255813953488373, "no_speech_prob": 2.044539724010974e-05}, {"id": 21, "seek": 13628, "start": 147.2, "end": 154.08, "text": " the status information about the resource itself. And that is one of the", "tokens": [264, 6558, 1589, 466, 264, 7684, 2564, 13, 400, 300, 307, 472, 295, 264], "temperature": 0.0, "avg_logprob": -0.11810857493702959, "compression_ratio": 1.7255813953488373, "no_speech_prob": 2.044539724010974e-05}, {"id": 22, "seek": 13628, "start": 154.08, "end": 159.92000000000002, "text": " features that cross-plane does for you so it connects external APIs any kind of", "tokens": [4122, 300, 3278, 12, 36390, 775, 337, 291, 370, 309, 16967, 8320, 21445, 604, 733, 295], "temperature": 0.0, "avg_logprob": -0.11810857493702959, "compression_ratio": 1.7255813953488373, "no_speech_prob": 2.044539724010974e-05}, {"id": 23, "seek": 13628, "start": 159.92000000000002, "end": 164.52, "text": " external APIs with Kubernetes and lets you manage your whole cloud", "tokens": [8320, 21445, 365, 23145, 293, 6653, 291, 3067, 428, 1379, 4588], "temperature": 0.0, "avg_logprob": -0.11810857493702959, "compression_ratio": 1.7255813953488373, "no_speech_prob": 2.044539724010974e-05}, {"id": 24, "seek": 16452, "start": 164.52, "end": 171.60000000000002, "text": " infrastructure through one Kubernetes cluster. And the second very powerful", "tokens": [6896, 807, 472, 23145, 13630, 13, 400, 264, 1150, 588, 4005], "temperature": 0.0, "avg_logprob": -0.11724974995567686, "compression_ratio": 1.68, "no_speech_prob": 2.2113807062851265e-05}, {"id": 25, "seek": 16452, "start": 171.60000000000002, "end": 175.32000000000002, "text": " feature of cross-plane is that it allows you to create your custom", "tokens": [4111, 295, 3278, 12, 36390, 307, 300, 309, 4045, 291, 281, 1884, 428, 2375], "temperature": 0.0, "avg_logprob": -0.11724974995567686, "compression_ratio": 1.68, "no_speech_prob": 2.2113807062851265e-05}, {"id": 26, "seek": 16452, "start": 175.32000000000002, "end": 180.84, "text": " Kubernetes APIs by using something that is called compositions and then it's the", "tokens": [23145, 21445, 538, 1228, 746, 300, 307, 1219, 43401, 293, 550, 309, 311, 264], "temperature": 0.0, "avg_logprob": -0.11724974995567686, "compression_ratio": 1.68, "no_speech_prob": 2.2113807062851265e-05}, {"id": 27, "seek": 16452, "start": 180.84, "end": 186.0, "text": " thing that you can see in the middle. It's a very rough and simplified graph", "tokens": [551, 300, 291, 393, 536, 294, 264, 2808, 13, 467, 311, 257, 588, 5903, 293, 26335, 4295], "temperature": 0.0, "avg_logprob": -0.11724974995567686, "compression_ratio": 1.68, "no_speech_prob": 2.2113807062851265e-05}, {"id": 28, "seek": 16452, "start": 186.0, "end": 192.08, "text": " to show the way cross-plane works and it essentially is always works that you", "tokens": [281, 855, 264, 636, 3278, 12, 36390, 1985, 293, 309, 4476, 307, 1009, 1985, 300, 291], "temperature": 0.0, "avg_logprob": -0.11724974995567686, "compression_ratio": 1.68, "no_speech_prob": 2.2113807062851265e-05}, {"id": 29, "seek": 19208, "start": 192.08, "end": 197.60000000000002, "text": " have the user claim for a resource for your API that you have to find using a", "tokens": [362, 264, 4195, 3932, 337, 257, 7684, 337, 428, 9362, 300, 291, 362, 281, 915, 1228, 257], "temperature": 0.0, "avg_logprob": -0.14496343591240016, "compression_ratio": 1.8066037735849056, "no_speech_prob": 2.8392832973622717e-05}, {"id": 30, "seek": 19208, "start": 197.60000000000002, "end": 203.72000000000003, "text": " so-called XID or a composite resource definition and that is then passed to a", "tokens": [370, 12, 11880, 1783, 2777, 420, 257, 25557, 7684, 7123, 293, 300, 307, 550, 4678, 281, 257], "temperature": 0.0, "avg_logprob": -0.14496343591240016, "compression_ratio": 1.8066037735849056, "no_speech_prob": 2.8392832973622717e-05}, {"id": 31, "seek": 19208, "start": 203.72000000000003, "end": 208.16000000000003, "text": " composition and then the composition spawns a number of managed resources.", "tokens": [12686, 293, 550, 264, 12686, 17088, 82, 257, 1230, 295, 6453, 3593, 13], "temperature": 0.0, "avg_logprob": -0.14496343591240016, "compression_ratio": 1.8066037735849056, "no_speech_prob": 2.8392832973622717e-05}, {"id": 32, "seek": 19208, "start": 208.16000000000003, "end": 211.76000000000002, "text": " Managed resources are something that you have seen in this slide before which is", "tokens": [2458, 2980, 3593, 366, 746, 300, 291, 362, 1612, 294, 341, 4137, 949, 597, 307], "temperature": 0.0, "avg_logprob": -0.14496343591240016, "compression_ratio": 1.8066037735849056, "no_speech_prob": 2.8392832973622717e-05}, {"id": 33, "seek": 19208, "start": 211.76000000000002, "end": 218.60000000000002, "text": " in a bucket or any other kind of external resource on any other kind of", "tokens": [294, 257, 13058, 420, 604, 661, 733, 295, 8320, 7684, 322, 604, 661, 733, 295], "temperature": 0.0, "avg_logprob": -0.14496343591240016, "compression_ratio": 1.8066037735849056, "no_speech_prob": 2.8392832973622717e-05}, {"id": 34, "seek": 21860, "start": 218.6, "end": 225.84, "text": " external API. Today I want to talk mostly about XIDs and compositions because", "tokens": [8320, 9362, 13, 2692, 286, 528, 281, 751, 5240, 466, 1783, 2777, 82, 293, 43401, 570], "temperature": 0.0, "avg_logprob": -0.19046463464435778, "compression_ratio": 1.5353535353535352, "no_speech_prob": 2.0780624254257418e-05}, {"id": 35, "seek": 21860, "start": 225.84, "end": 231.32, "text": " that is what you do most of the time when you are working with cross-plane.", "tokens": [300, 307, 437, 291, 360, 881, 295, 264, 565, 562, 291, 366, 1364, 365, 3278, 12, 36390, 13], "temperature": 0.0, "avg_logprob": -0.19046463464435778, "compression_ratio": 1.5353535353535352, "no_speech_prob": 2.0780624254257418e-05}, {"id": 36, "seek": 21860, "start": 231.32, "end": 239.07999999999998, "text": " Now developing a platform with cross-plane. If you look at simple CI CD", "tokens": [823, 6416, 257, 3663, 365, 3278, 12, 36390, 13, 759, 291, 574, 412, 2199, 37777, 6743], "temperature": 0.0, "avg_logprob": -0.19046463464435778, "compression_ratio": 1.5353535353535352, "no_speech_prob": 2.0780624254257418e-05}, {"id": 37, "seek": 21860, "start": 239.07999999999998, "end": 244.24, "text": " pipeline then you have usually build, test and then deploy and that is that is", "tokens": [15517, 550, 291, 362, 2673, 1322, 11, 1500, 293, 550, 7274, 293, 300, 307, 300, 307], "temperature": 0.0, "avg_logprob": -0.19046463464435778, "compression_ratio": 1.5353535353535352, "no_speech_prob": 2.0780624254257418e-05}, {"id": 38, "seek": 24424, "start": 244.24, "end": 249.28, "text": " very easy and for most software projects that is also very easy to", "tokens": [588, 1858, 293, 337, 881, 4722, 4455, 300, 307, 611, 588, 1858, 281], "temperature": 0.0, "avg_logprob": -0.14437822614397322, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.263213122612797e-05}, {"id": 39, "seek": 24424, "start": 249.28, "end": 256.84000000000003, "text": " understand but because cross-plane is a bit different and you have different", "tokens": [1223, 457, 570, 3278, 12, 36390, 307, 257, 857, 819, 293, 291, 362, 819], "temperature": 0.0, "avg_logprob": -0.14437822614397322, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.263213122612797e-05}, {"id": 40, "seek": 24424, "start": 256.84000000000003, "end": 264.56, "text": " things that you do inside these steps. So what you do with cross-plane is you", "tokens": [721, 300, 291, 360, 1854, 613, 4439, 13, 407, 437, 291, 360, 365, 3278, 12, 36390, 307, 291], "temperature": 0.0, "avg_logprob": -0.14437822614397322, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.263213122612797e-05}, {"id": 41, "seek": 24424, "start": 264.56, "end": 270.52, "text": " are first building and pushing a package and you are you're not writing code", "tokens": [366, 700, 2390, 293, 7380, 257, 7372, 293, 291, 366, 291, 434, 406, 3579, 3089], "temperature": 0.0, "avg_logprob": -0.14437822614397322, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.263213122612797e-05}, {"id": 42, "seek": 27052, "start": 270.52, "end": 275.68, "text": " but you are just writing YAML objects which are then applied on the cluster", "tokens": [457, 291, 366, 445, 3579, 398, 2865, 43, 6565, 597, 366, 550, 6456, 322, 264, 13630], "temperature": 0.0, "avg_logprob": -0.11985857408125322, "compression_ratio": 1.895, "no_speech_prob": 1.8914815882453695e-05}, {"id": 43, "seek": 27052, "start": 275.68, "end": 282.52, "text": " and then they are handled and treated like data by cross-plane and then when", "tokens": [293, 550, 436, 366, 18033, 293, 8668, 411, 1412, 538, 3278, 12, 36390, 293, 550, 562], "temperature": 0.0, "avg_logprob": -0.11985857408125322, "compression_ratio": 1.895, "no_speech_prob": 1.8914815882453695e-05}, {"id": 44, "seek": 27052, "start": 282.52, "end": 287.88, "text": " you are testing your cross-plane platform then you are applying all your", "tokens": [291, 366, 4997, 428, 3278, 12, 36390, 3663, 550, 291, 366, 9275, 439, 428], "temperature": 0.0, "avg_logprob": -0.11985857408125322, "compression_ratio": 1.895, "no_speech_prob": 1.8914815882453695e-05}, {"id": 45, "seek": 27052, "start": 287.88, "end": 293.44, "text": " compositions and your XIDs to a test cluster and then you are claiming them", "tokens": [43401, 293, 428, 1783, 2777, 82, 281, 257, 1500, 13630, 293, 550, 291, 366, 19232, 552], "temperature": 0.0, "avg_logprob": -0.11985857408125322, "compression_ratio": 1.895, "no_speech_prob": 1.8914815882453695e-05}, {"id": 46, "seek": 27052, "start": 293.44, "end": 298.24, "text": " and then you see if they work and then if that is okay then you are deploying", "tokens": [293, 550, 291, 536, 498, 436, 589, 293, 550, 498, 300, 307, 1392, 550, 291, 366, 34198], "temperature": 0.0, "avg_logprob": -0.11985857408125322, "compression_ratio": 1.895, "no_speech_prob": 1.8914815882453695e-05}, {"id": 47, "seek": 29824, "start": 298.24, "end": 306.40000000000003, "text": " them and you're just doing the same but on a production cluster. I don't want to", "tokens": [552, 293, 291, 434, 445, 884, 264, 912, 457, 322, 257, 4265, 13630, 13, 286, 500, 380, 528, 281], "temperature": 0.0, "avg_logprob": -0.11729691823323568, "compression_ratio": 1.7419354838709677, "no_speech_prob": 2.6662428354029544e-05}, {"id": 48, "seek": 29824, "start": 306.40000000000003, "end": 311.08, "text": " talk about the deployment today because that is very simple that is basically", "tokens": [751, 466, 264, 19317, 965, 570, 300, 307, 588, 2199, 300, 307, 1936], "temperature": 0.0, "avg_logprob": -0.11729691823323568, "compression_ratio": 1.7419354838709677, "no_speech_prob": 2.6662428354029544e-05}, {"id": 49, "seek": 29824, "start": 311.08, "end": 316.36, "text": " just like doing a Kubernetes deployment you are building an OCI image and then", "tokens": [445, 411, 884, 257, 23145, 19317, 291, 366, 2390, 364, 422, 25240, 3256, 293, 550], "temperature": 0.0, "avg_logprob": -0.11729691823323568, "compression_ratio": 1.7419354838709677, "no_speech_prob": 2.6662428354029544e-05}, {"id": 50, "seek": 29824, "start": 316.36, "end": 320.6, "text": " pushing that and then you are installing that on a cluster using", "tokens": [7380, 300, 293, 550, 291, 366, 20762, 300, 322, 257, 13630, 1228], "temperature": 0.0, "avg_logprob": -0.11729691823323568, "compression_ratio": 1.7419354838709677, "no_speech_prob": 2.6662428354029544e-05}, {"id": 51, "seek": 29824, "start": 320.6, "end": 324.92, "text": " cross-plane and that's it there's not much to tell about but I want to talk", "tokens": [3278, 12, 36390, 293, 300, 311, 309, 456, 311, 406, 709, 281, 980, 466, 457, 286, 528, 281, 751], "temperature": 0.0, "avg_logprob": -0.11729691823323568, "compression_ratio": 1.7419354838709677, "no_speech_prob": 2.6662428354029544e-05}, {"id": 52, "seek": 32492, "start": 324.92, "end": 333.08000000000004, "text": " about the building and the testing. Let's start with the building. If you have", "tokens": [466, 264, 2390, 293, 264, 4997, 13, 961, 311, 722, 365, 264, 2390, 13, 759, 291, 362], "temperature": 0.0, "avg_logprob": -0.10597364719097431, "compression_ratio": 1.5353535353535352, "no_speech_prob": 1.833821261243429e-05}, {"id": 53, "seek": 32492, "start": 333.08000000000004, "end": 338.72, "text": " worked with cross-plane before then that is probably very familiar for you. On", "tokens": [2732, 365, 3278, 12, 36390, 949, 550, 300, 307, 1391, 588, 4963, 337, 291, 13, 1282], "temperature": 0.0, "avg_logprob": -0.10597364719097431, "compression_ratio": 1.5353535353535352, "no_speech_prob": 1.833821261243429e-05}, {"id": 54, "seek": 32492, "start": 338.72, "end": 343.0, "text": " the left you see an XID as you would write it and on the right you see a", "tokens": [264, 1411, 291, 536, 364, 1783, 2777, 382, 291, 576, 2464, 309, 293, 322, 264, 558, 291, 536, 257], "temperature": 0.0, "avg_logprob": -0.10597364719097431, "compression_ratio": 1.5353535353535352, "no_speech_prob": 1.833821261243429e-05}, {"id": 55, "seek": 32492, "start": 343.0, "end": 350.44, "text": " composition. So an XID I said it basically just defines the API that your", "tokens": [12686, 13, 407, 364, 1783, 2777, 286, 848, 309, 1936, 445, 23122, 264, 9362, 300, 428], "temperature": 0.0, "avg_logprob": -0.10597364719097431, "compression_ratio": 1.5353535353535352, "no_speech_prob": 1.833821261243429e-05}, {"id": 56, "seek": 35044, "start": 350.44, "end": 355.52, "text": " user has applied to and it's very similar to custom resource definitions that", "tokens": [4195, 575, 6456, 281, 293, 309, 311, 588, 2531, 281, 2375, 7684, 21988, 300], "temperature": 0.0, "avg_logprob": -0.11842242154208096, "compression_ratio": 1.6710526315789473, "no_speech_prob": 1.669362791290041e-05}, {"id": 57, "seek": 35044, "start": 355.52, "end": 363.04, "text": " you are writing in plain Kubernetes. So you have your API schema in the spec of", "tokens": [291, 366, 3579, 294, 11121, 23145, 13, 407, 291, 362, 428, 9362, 34078, 294, 264, 1608, 295], "temperature": 0.0, "avg_logprob": -0.11842242154208096, "compression_ratio": 1.6710526315789473, "no_speech_prob": 1.669362791290041e-05}, {"id": 58, "seek": 35044, "start": 363.04, "end": 368.44, "text": " your XID and then in the composition what you do is you define the resource", "tokens": [428, 1783, 2777, 293, 550, 294, 264, 12686, 437, 291, 360, 307, 291, 6964, 264, 7684], "temperature": 0.0, "avg_logprob": -0.11842242154208096, "compression_ratio": 1.6710526315789473, "no_speech_prob": 1.669362791290041e-05}, {"id": 59, "seek": 35044, "start": 368.44, "end": 374.28, "text": " that should be created when the user claims this API and that can be an", "tokens": [300, 820, 312, 2942, 562, 264, 4195, 9441, 341, 9362, 293, 300, 393, 312, 364], "temperature": 0.0, "avg_logprob": -0.11842242154208096, "compression_ratio": 1.6710526315789473, "no_speech_prob": 1.669362791290041e-05}, {"id": 60, "seek": 35044, "start": 374.28, "end": 377.96, "text": " arbitrary number of resources so you don't have to create just one resource", "tokens": [23211, 1230, 295, 3593, 370, 291, 500, 380, 362, 281, 1884, 445, 472, 7684], "temperature": 0.0, "avg_logprob": -0.11842242154208096, "compression_ratio": 1.6710526315789473, "no_speech_prob": 1.669362791290041e-05}, {"id": 61, "seek": 37796, "start": 377.96, "end": 382.12, "text": " but you can create dozens of them so I've written compositions where you are", "tokens": [457, 291, 393, 1884, 18431, 295, 552, 370, 286, 600, 3720, 43401, 689, 291, 366], "temperature": 0.0, "avg_logprob": -0.13240315193353697, "compression_ratio": 1.7523364485981308, "no_speech_prob": 3.160216874675825e-05}, {"id": 62, "seek": 37796, "start": 382.12, "end": 390.03999999999996, "text": " creating 30 or more resources at once but that is essentially how it how it", "tokens": [4084, 2217, 420, 544, 3593, 412, 1564, 457, 300, 307, 4476, 577, 309, 577, 309], "temperature": 0.0, "avg_logprob": -0.13240315193353697, "compression_ratio": 1.7523364485981308, "no_speech_prob": 3.160216874675825e-05}, {"id": 63, "seek": 37796, "start": 390.03999999999996, "end": 396.28, "text": " is done you are specifying a base resource and then you can modify this", "tokens": [307, 1096, 291, 366, 1608, 5489, 257, 3096, 7684, 293, 550, 291, 393, 16927, 341], "temperature": 0.0, "avg_logprob": -0.13240315193353697, "compression_ratio": 1.7523364485981308, "no_speech_prob": 3.160216874675825e-05}, {"id": 64, "seek": 37796, "start": 396.28, "end": 403.12, "text": " resource by copying information from the user claim into the resource that you", "tokens": [7684, 538, 27976, 1589, 490, 264, 4195, 3932, 666, 264, 7684, 300, 291], "temperature": 0.0, "avg_logprob": -0.13240315193353697, "compression_ratio": 1.7523364485981308, "no_speech_prob": 3.160216874675825e-05}, {"id": 65, "seek": 37796, "start": 403.12, "end": 407.56, "text": " want to create. That is what you do the whole time you are working with", "tokens": [528, 281, 1884, 13, 663, 307, 437, 291, 360, 264, 1379, 565, 291, 366, 1364, 365], "temperature": 0.0, "avg_logprob": -0.13240315193353697, "compression_ratio": 1.7523364485981308, "no_speech_prob": 3.160216874675825e-05}, {"id": 66, "seek": 40756, "start": 407.56, "end": 411.32, "text": " prospering you are writing an XID and then you are writing a composition or", "tokens": [14381, 278, 291, 366, 3579, 364, 1783, 2777, 293, 550, 291, 366, 3579, 257, 12686, 420], "temperature": 0.0, "avg_logprob": -0.1858596913954791, "compression_ratio": 1.87, "no_speech_prob": 2.4291486624861136e-05}, {"id": 67, "seek": 40756, "start": 411.32, "end": 415.0, "text": " multiple compositions and then the user can claim it and then choose the", "tokens": [3866, 43401, 293, 550, 264, 4195, 393, 3932, 309, 293, 550, 2826, 264], "temperature": 0.0, "avg_logprob": -0.1858596913954791, "compression_ratio": 1.87, "no_speech_prob": 2.4291486624861136e-05}, {"id": 68, "seek": 40756, "start": 415.0, "end": 423.64, "text": " composition that he he wants. That now looks easy at first but when you are", "tokens": [12686, 300, 415, 415, 2738, 13, 663, 586, 1542, 1858, 412, 700, 457, 562, 291, 366], "temperature": 0.0, "avg_logprob": -0.1858596913954791, "compression_ratio": 1.87, "no_speech_prob": 2.4291486624861136e-05}, {"id": 69, "seek": 40756, "start": 423.64, "end": 430.64, "text": " doing this on an enterprise level then you are very easily you end up with", "tokens": [884, 341, 322, 364, 14132, 1496, 550, 291, 366, 588, 3612, 291, 917, 493, 365], "temperature": 0.0, "avg_logprob": -0.1858596913954791, "compression_ratio": 1.87, "no_speech_prob": 2.4291486624861136e-05}, {"id": 70, "seek": 40756, "start": 430.64, "end": 435.68, "text": " compositions that can be thousands of lines of code where you are creating", "tokens": [43401, 300, 393, 312, 5383, 295, 3876, 295, 3089, 689, 291, 366, 4084], "temperature": 0.0, "avg_logprob": -0.1858596913954791, "compression_ratio": 1.87, "no_speech_prob": 2.4291486624861136e-05}, {"id": 71, "seek": 43568, "start": 435.68, "end": 442.68, "text": " dozens of objects and then because you are just dealing with pure YAML then", "tokens": [18431, 295, 6565, 293, 550, 570, 291, 366, 445, 6260, 365, 6075, 398, 2865, 43, 550], "temperature": 0.0, "avg_logprob": -0.11692676773990493, "compression_ratio": 1.7616822429906542, "no_speech_prob": 3.264677070546895e-05}, {"id": 72, "seek": 43568, "start": 442.68, "end": 447.48, "text": " you really starting to get at the limit because you have a lot of things that", "tokens": [291, 534, 2891, 281, 483, 412, 264, 4948, 570, 291, 362, 257, 688, 295, 721, 300], "temperature": 0.0, "avg_logprob": -0.11692676773990493, "compression_ratio": 1.7616822429906542, "no_speech_prob": 3.264677070546895e-05}, {"id": 73, "seek": 43568, "start": 447.48, "end": 452.72, "text": " are very repetitive inside compositions you have very similar structures let's", "tokens": [366, 588, 29404, 1854, 43401, 291, 362, 588, 2531, 9227, 718, 311], "temperature": 0.0, "avg_logprob": -0.11692676773990493, "compression_ratio": 1.7616822429906542, "no_speech_prob": 3.264677070546895e-05}, {"id": 74, "seek": 43568, "start": 452.72, "end": 460.0, "text": " say if you are spawning a lot of similar objects on your cluster but in", "tokens": [584, 498, 291, 366, 637, 35880, 257, 688, 295, 2531, 6565, 322, 428, 13630, 457, 294], "temperature": 0.0, "avg_logprob": -0.11692676773990493, "compression_ratio": 1.7616822429906542, "no_speech_prob": 3.264677070546895e-05}, {"id": 75, "seek": 43568, "start": 460.0, "end": 463.76, "text": " different compositions then you sometimes you have the same patches that", "tokens": [819, 43401, 550, 291, 2171, 291, 362, 264, 912, 26531, 300], "temperature": 0.0, "avg_logprob": -0.11692676773990493, "compression_ratio": 1.7616822429906542, "no_speech_prob": 3.264677070546895e-05}, {"id": 76, "seek": 46376, "start": 463.76, "end": 469.76, "text": " you are reusing for example if you just want to patch the name of a resource by", "tokens": [291, 366, 319, 7981, 337, 1365, 498, 291, 445, 528, 281, 9972, 264, 1315, 295, 257, 7684, 538], "temperature": 0.0, "avg_logprob": -0.09626995535457836, "compression_ratio": 1.8468899521531101, "no_speech_prob": 6.29833375569433e-05}, {"id": 77, "seek": 46376, "start": 469.76, "end": 473.12, "text": " what the user has given to you then you are repeating this patch over and over", "tokens": [437, 264, 4195, 575, 2212, 281, 291, 550, 291, 366, 18617, 341, 9972, 670, 293, 670], "temperature": 0.0, "avg_logprob": -0.09626995535457836, "compression_ratio": 1.8468899521531101, "no_speech_prob": 6.29833375569433e-05}, {"id": 78, "seek": 46376, "start": 473.12, "end": 478.71999999999997, "text": " for every resource for every file you are writing and sometimes you then have", "tokens": [337, 633, 7684, 337, 633, 3991, 291, 366, 3579, 293, 2171, 291, 550, 362], "temperature": 0.0, "avg_logprob": -0.09626995535457836, "compression_ratio": 1.8468899521531101, "no_speech_prob": 6.29833375569433e-05}, {"id": 79, "seek": 46376, "start": 478.71999999999997, "end": 483.32, "text": " compositions who only vary in details if you have different environments for", "tokens": [43401, 567, 787, 10559, 294, 4365, 498, 291, 362, 819, 12388, 337], "temperature": 0.0, "avg_logprob": -0.09626995535457836, "compression_ratio": 1.8468899521531101, "no_speech_prob": 6.29833375569433e-05}, {"id": 80, "seek": 46376, "start": 483.32, "end": 489.24, "text": " example you are in different AWS accounts and you only want resources to", "tokens": [1365, 291, 366, 294, 819, 17650, 9402, 293, 291, 787, 528, 3593, 281], "temperature": 0.0, "avg_logprob": -0.09626995535457836, "compression_ratio": 1.8468899521531101, "no_speech_prob": 6.29833375569433e-05}, {"id": 81, "seek": 48924, "start": 489.24, "end": 495.72, "text": " appear in specific accounts or you have different values like the region or", "tokens": [4204, 294, 2685, 9402, 420, 291, 362, 819, 4190, 411, 264, 4458, 420], "temperature": 0.0, "avg_logprob": -0.13741976956287064, "compression_ratio": 1.8405797101449275, "no_speech_prob": 3.641902731033042e-05}, {"id": 82, "seek": 48924, "start": 495.72, "end": 501.08, "text": " static resources that you are that you want to connect like the account ID and", "tokens": [13437, 3593, 300, 291, 366, 300, 291, 528, 281, 1745, 411, 264, 2696, 7348, 293], "temperature": 0.0, "avg_logprob": -0.13741976956287064, "compression_ratio": 1.8405797101449275, "no_speech_prob": 3.641902731033042e-05}, {"id": 83, "seek": 48924, "start": 501.08, "end": 505.84000000000003, "text": " then you have to to write the same composition over and over but just with", "tokens": [550, 291, 362, 281, 281, 2464, 264, 912, 12686, 670, 293, 670, 457, 445, 365], "temperature": 0.0, "avg_logprob": -0.13741976956287064, "compression_ratio": 1.8405797101449275, "no_speech_prob": 3.641902731033042e-05}, {"id": 84, "seek": 48924, "start": 505.84000000000003, "end": 509.92, "text": " different values and then you see that you are ending up with something that", "tokens": [819, 4190, 293, 550, 291, 536, 300, 291, 366, 8121, 493, 365, 746, 300], "temperature": 0.0, "avg_logprob": -0.13741976956287064, "compression_ratio": 1.8405797101449275, "no_speech_prob": 3.641902731033042e-05}, {"id": 85, "seek": 48924, "start": 509.92, "end": 513.64, "text": " gets really really complicated because you're just doing a lot of copy and", "tokens": [2170, 534, 534, 6179, 570, 291, 434, 445, 884, 257, 688, 295, 5055, 293], "temperature": 0.0, "avg_logprob": -0.13741976956287064, "compression_ratio": 1.8405797101449275, "no_speech_prob": 3.641902731033042e-05}, {"id": 86, "seek": 51364, "start": 513.64, "end": 521.1999999999999, "text": " paste and so you need something to generate the YAML dynamically and in", "tokens": [9163, 293, 370, 291, 643, 746, 281, 8460, 264, 398, 2865, 43, 43492, 293, 294], "temperature": 0.0, "avg_logprob": -0.14709260728624132, "compression_ratio": 1.473170731707317, "no_speech_prob": 7.017573079792783e-05}, {"id": 87, "seek": 51364, "start": 521.1999999999999, "end": 526.68, "text": " these two years I spent a lot of thoughts how to simplify this process and", "tokens": [613, 732, 924, 286, 4418, 257, 688, 295, 4598, 577, 281, 20460, 341, 1399, 293], "temperature": 0.0, "avg_logprob": -0.14709260728624132, "compression_ratio": 1.473170731707317, "no_speech_prob": 7.017573079792783e-05}, {"id": 88, "seek": 51364, "start": 526.68, "end": 533.84, "text": " I have experimented with a bunch of stuff and we've tried out Q which is some", "tokens": [286, 362, 5120, 292, 365, 257, 3840, 295, 1507, 293, 321, 600, 3031, 484, 1249, 597, 307, 512], "temperature": 0.0, "avg_logprob": -0.14709260728624132, "compression_ratio": 1.473170731707317, "no_speech_prob": 7.017573079792783e-05}, {"id": 89, "seek": 51364, "start": 533.84, "end": 540.76, "text": " form of JSON like framework that allows you to build structures and have them", "tokens": [1254, 295, 31828, 411, 8388, 300, 4045, 291, 281, 1322, 9227, 293, 362, 552], "temperature": 0.0, "avg_logprob": -0.14709260728624132, "compression_ratio": 1.473170731707317, "no_speech_prob": 7.017573079792783e-05}, {"id": 90, "seek": 54076, "start": 540.76, "end": 546.96, "text": " validated but it's very complex and not very easy for newcomers so if you have", "tokens": [40693, 457, 309, 311, 588, 3997, 293, 406, 588, 1858, 337, 40014, 433, 370, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.1289787537012345, "compression_ratio": 1.6702127659574468, "no_speech_prob": 1.3415016837825533e-05}, {"id": 91, "seek": 54076, "start": 546.96, "end": 551.04, "text": " new developers and teams then it's a bit hard to to onboard them on it on it", "tokens": [777, 8849, 293, 5491, 550, 309, 311, 257, 857, 1152, 281, 281, 24033, 552, 322, 309, 322, 309], "temperature": 0.0, "avg_logprob": -0.1289787537012345, "compression_ratio": 1.6702127659574468, "no_speech_prob": 1.3415016837825533e-05}, {"id": 92, "seek": 54076, "start": 551.04, "end": 559.08, "text": " because the error messages are not very helpful in many cases and the tool that", "tokens": [570, 264, 6713, 7897, 366, 406, 588, 4961, 294, 867, 3331, 293, 264, 2290, 300], "temperature": 0.0, "avg_logprob": -0.1289787537012345, "compression_ratio": 1.6702127659574468, "no_speech_prob": 1.3415016837825533e-05}, {"id": 93, "seek": 54076, "start": 559.08, "end": 568.48, "text": " we ended up establishing was Helm and not the biggest fan of Helm because it's", "tokens": [321, 4590, 493, 22494, 390, 6128, 76, 293, 406, 264, 3880, 3429, 295, 6128, 76, 570, 309, 311], "temperature": 0.0, "avg_logprob": -0.1289787537012345, "compression_ratio": 1.6702127659574468, "no_speech_prob": 1.3415016837825533e-05}, {"id": 94, "seek": 56848, "start": 568.48, "end": 575.44, "text": " a bit quirky to use and sometimes if you have error messages or if you have", "tokens": [257, 857, 49515, 281, 764, 293, 2171, 498, 291, 362, 6713, 7897, 420, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.10182208157657238, "compression_ratio": 1.6814159292035398, "no_speech_prob": 5.131469515617937e-05}, {"id": 95, "seek": 56848, "start": 575.44, "end": 579.6, "text": " errors then it's sometimes hard to detect where the error actually is because it", "tokens": [13603, 550, 309, 311, 2171, 1152, 281, 5531, 689, 264, 6713, 767, 307, 570, 309], "temperature": 0.0, "avg_logprob": -0.10182208157657238, "compression_ratio": 1.6814159292035398, "no_speech_prob": 5.131469515617937e-05}, {"id": 96, "seek": 56848, "start": 579.6, "end": 582.6800000000001, "text": " just tells you all there's something wrong with your YAML but you don't know", "tokens": [445, 5112, 291, 439, 456, 311, 746, 2085, 365, 428, 398, 2865, 43, 457, 291, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.10182208157657238, "compression_ratio": 1.6814159292035398, "no_speech_prob": 5.131469515617937e-05}, {"id": 97, "seek": 56848, "start": 582.6800000000001, "end": 590.72, "text": " where exactly happened but the good thing with Helm is that it can do", "tokens": [689, 2293, 2011, 457, 264, 665, 551, 365, 6128, 76, 307, 300, 309, 393, 360], "temperature": 0.0, "avg_logprob": -0.10182208157657238, "compression_ratio": 1.6814159292035398, "no_speech_prob": 5.131469515617937e-05}, {"id": 98, "seek": 56848, "start": 590.72, "end": 596.88, "text": " everything that we need you can replace common code blocks such as constants", "tokens": [1203, 300, 321, 643, 291, 393, 7406, 2689, 3089, 8474, 1270, 382, 35870], "temperature": 0.0, "avg_logprob": -0.10182208157657238, "compression_ratio": 1.6814159292035398, "no_speech_prob": 5.131469515617937e-05}, {"id": 99, "seek": 59688, "start": 596.88, "end": 603.12, "text": " with things that you have written out in your values YAML you can use templates", "tokens": [365, 721, 300, 291, 362, 3720, 484, 294, 428, 4190, 398, 2865, 43, 291, 393, 764, 21165], "temperature": 0.0, "avg_logprob": -0.10202348859686601, "compression_ratio": 1.5721649484536082, "no_speech_prob": 6.600550113944337e-05}, {"id": 100, "seek": 59688, "start": 603.12, "end": 611.2, "text": " to parameterize patches and to save lines of code and you can even replace the", "tokens": [281, 13075, 1125, 26531, 293, 281, 3155, 3876, 295, 3089, 293, 291, 393, 754, 7406, 264], "temperature": 0.0, "avg_logprob": -0.10202348859686601, "compression_ratio": 1.5721649484536082, "no_speech_prob": 6.600550113944337e-05}, {"id": 101, "seek": 59688, "start": 611.2, "end": 617.96, "text": " the API schemas of XRDs by something that you can generate and that is a", "tokens": [264, 9362, 22627, 296, 295, 1783, 49, 35, 82, 538, 746, 300, 291, 393, 8460, 293, 300, 307, 257], "temperature": 0.0, "avg_logprob": -0.10202348859686601, "compression_ratio": 1.5721649484536082, "no_speech_prob": 6.600550113944337e-05}, {"id": 102, "seek": 59688, "start": 617.96, "end": 621.36, "text": " really really cool thing so I just checked the code in our repository and", "tokens": [534, 534, 1627, 551, 370, 286, 445, 10033, 264, 3089, 294, 527, 25841, 293], "temperature": 0.0, "avg_logprob": -0.10202348859686601, "compression_ratio": 1.5721649484536082, "no_speech_prob": 6.600550113944337e-05}, {"id": 103, "seek": 62136, "start": 621.36, "end": 628.36, "text": " we have about a hundred lines of code for for Helm I'm sorry 10,000 lines of", "tokens": [321, 362, 466, 257, 3262, 3876, 295, 3089, 337, 337, 6128, 76, 286, 478, 2597, 1266, 11, 1360, 3876, 295], "temperature": 0.0, "avg_logprob": -0.15447384970528738, "compression_ratio": 1.7109826589595376, "no_speech_prob": 5.296310700941831e-05}, {"id": 104, "seek": 62136, "start": 628.36, "end": 634.2, "text": " code for Helm and we are generating 200,000 lines of code of compositions", "tokens": [3089, 337, 6128, 76, 293, 321, 366, 17746, 2331, 11, 1360, 3876, 295, 3089, 295, 43401], "temperature": 0.0, "avg_logprob": -0.15447384970528738, "compression_ratio": 1.7109826589595376, "no_speech_prob": 5.296310700941831e-05}, {"id": 105, "seek": 62136, "start": 634.2, "end": 643.48, "text": " that are then applied on our API clusters if you are doing this if you", "tokens": [300, 366, 550, 6456, 322, 527, 9362, 23313, 498, 291, 366, 884, 341, 498, 291], "temperature": 0.0, "avg_logprob": -0.15447384970528738, "compression_ratio": 1.7109826589595376, "no_speech_prob": 5.296310700941831e-05}, {"id": 106, "seek": 62136, "start": 643.48, "end": 649.36, "text": " are generating code for for crossplane with Helm or any other kind of code", "tokens": [366, 17746, 3089, 337, 337, 3278, 36390, 365, 6128, 76, 420, 604, 661, 733, 295, 3089], "temperature": 0.0, "avg_logprob": -0.15447384970528738, "compression_ratio": 1.7109826589595376, "no_speech_prob": 5.296310700941831e-05}, {"id": 107, "seek": 64936, "start": 649.36, "end": 658.16, "text": " generation tool then I recommend you to check these generated YAML bits into", "tokens": [5125, 2290, 550, 286, 2748, 291, 281, 1520, 613, 10833, 398, 2865, 43, 9239, 666], "temperature": 0.0, "avg_logprob": -0.12694703716121308, "compression_ratio": 1.5757575757575757, "no_speech_prob": 7.596390787512064e-05}, {"id": 108, "seek": 64936, "start": 658.16, "end": 665.76, "text": " your Git because as it turned out it's very hard to detect unintended changes", "tokens": [428, 16939, 570, 382, 309, 3574, 484, 309, 311, 588, 1152, 281, 5531, 49902, 2962], "temperature": 0.0, "avg_logprob": -0.12694703716121308, "compression_ratio": 1.5757575757575757, "no_speech_prob": 7.596390787512064e-05}, {"id": 109, "seek": 64936, "start": 665.76, "end": 670.08, "text": " that you are doing in Helm with your bare eyes if you are changing one value or", "tokens": [300, 291, 366, 884, 294, 6128, 76, 365, 428, 6949, 2575, 498, 291, 366, 4473, 472, 2158, 420], "temperature": 0.0, "avg_logprob": -0.12694703716121308, "compression_ratio": 1.5757575757575757, "no_speech_prob": 7.596390787512064e-05}, {"id": 110, "seek": 64936, "start": 670.08, "end": 675.8000000000001, "text": " a template somewhere and then it might have some side effects that you're not", "tokens": [257, 12379, 4079, 293, 550, 309, 1062, 362, 512, 1252, 5065, 300, 291, 434, 406], "temperature": 0.0, "avg_logprob": -0.12694703716121308, "compression_ratio": 1.5757575757575757, "no_speech_prob": 7.596390787512064e-05}, {"id": 111, "seek": 67580, "start": 675.8, "end": 683.0799999999999, "text": " seeing so easily and so I really recommend you to check these generated", "tokens": [2577, 370, 3612, 293, 370, 286, 534, 2748, 291, 281, 1520, 613, 10833], "temperature": 0.0, "avg_logprob": -0.09210896235640331, "compression_ratio": 1.8142857142857143, "no_speech_prob": 3.4254939237143844e-05}, {"id": 112, "seek": 67580, "start": 683.0799999999999, "end": 690.0799999999999, "text": " codes YAML code into your Git and do not treat it as artifacts and then if you", "tokens": [14211, 398, 2865, 43, 3089, 666, 428, 16939, 293, 360, 406, 2387, 309, 382, 24617, 293, 550, 498, 291], "temperature": 0.0, "avg_logprob": -0.09210896235640331, "compression_ratio": 1.8142857142857143, "no_speech_prob": 3.4254939237143844e-05}, {"id": 113, "seek": 67580, "start": 690.0799999999999, "end": 695.04, "text": " are in your CI then you should what we are doing and that is really helpful is", "tokens": [366, 294, 428, 37777, 550, 291, 820, 437, 321, 366, 884, 293, 300, 307, 534, 4961, 307], "temperature": 0.0, "avg_logprob": -0.09210896235640331, "compression_ratio": 1.8142857142857143, "no_speech_prob": 3.4254939237143844e-05}, {"id": 114, "seek": 67580, "start": 695.04, "end": 699.4799999999999, "text": " that you should regenerate all your package and your generated YAML and", "tokens": [300, 291, 820, 26358, 473, 439, 428, 7372, 293, 428, 10833, 398, 2865, 43, 293], "temperature": 0.0, "avg_logprob": -0.09210896235640331, "compression_ratio": 1.8142857142857143, "no_speech_prob": 3.4254939237143844e-05}, {"id": 115, "seek": 67580, "start": 699.4799999999999, "end": 705.0799999999999, "text": " see if any diff appears and if that is the case then you should just treat this", "tokens": [536, 498, 604, 7593, 7038, 293, 498, 300, 307, 264, 1389, 550, 291, 820, 445, 2387, 341], "temperature": 0.0, "avg_logprob": -0.09210896235640331, "compression_ratio": 1.8142857142857143, "no_speech_prob": 3.4254939237143844e-05}, {"id": 116, "seek": 70508, "start": 705.08, "end": 709.9200000000001, "text": " as an error and abort and if there is no diff then it's okay and then you can", "tokens": [382, 364, 6713, 293, 38117, 293, 498, 456, 307, 572, 7593, 550, 309, 311, 1392, 293, 550, 291, 393], "temperature": 0.0, "avg_logprob": -0.17480766451036608, "compression_ratio": 1.5797872340425532, "no_speech_prob": 1.4061689398658928e-05}, {"id": 117, "seek": 70508, "start": 709.9200000000001, "end": 719.5200000000001, "text": " continue on push your package to the OCI repository. Now so much for the", "tokens": [2354, 322, 2944, 428, 7372, 281, 264, 422, 25240, 25841, 13, 823, 370, 709, 337, 264], "temperature": 0.0, "avg_logprob": -0.17480766451036608, "compression_ratio": 1.5797872340425532, "no_speech_prob": 1.4061689398658928e-05}, {"id": 118, "seek": 70508, "start": 719.5200000000001, "end": 727.84, "text": " building now let's look at the testing. The first things that you are doing", "tokens": [2390, 586, 718, 311, 574, 412, 264, 4997, 13, 440, 700, 721, 300, 291, 366, 884], "temperature": 0.0, "avg_logprob": -0.17480766451036608, "compression_ratio": 1.5797872340425532, "no_speech_prob": 1.4061689398658928e-05}, {"id": 119, "seek": 70508, "start": 727.84, "end": 733.0, "text": " probably when you are starting working with crossplane is that you are", "tokens": [1391, 562, 291, 366, 2891, 1364, 365, 3278, 36390, 307, 300, 291, 366], "temperature": 0.0, "avg_logprob": -0.17480766451036608, "compression_ratio": 1.5797872340425532, "no_speech_prob": 1.4061689398658928e-05}, {"id": 120, "seek": 73300, "start": 733.0, "end": 736.24, "text": " writing your composition and then you are applying it on a cluster and then you", "tokens": [3579, 428, 12686, 293, 550, 291, 366, 9275, 309, 322, 257, 13630, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.11588077545166016, "compression_ratio": 1.9322916666666667, "no_speech_prob": 4.068403723067604e-05}, {"id": 121, "seek": 73300, "start": 736.24, "end": 741.68, "text": " are claiming it and then you see if it works if all the resources get", "tokens": [366, 19232, 309, 293, 550, 291, 536, 498, 309, 1985, 498, 439, 264, 3593, 483], "temperature": 0.0, "avg_logprob": -0.11588077545166016, "compression_ratio": 1.9322916666666667, "no_speech_prob": 4.068403723067604e-05}, {"id": 122, "seek": 73300, "start": 741.68, "end": 747.96, "text": " ready and if you can use them and then it's done and that is all manual and", "tokens": [1919, 293, 498, 291, 393, 764, 552, 293, 550, 309, 311, 1096, 293, 300, 307, 439, 9688, 293], "temperature": 0.0, "avg_logprob": -0.11588077545166016, "compression_ratio": 1.9322916666666667, "no_speech_prob": 4.068403723067604e-05}, {"id": 123, "seek": 73300, "start": 747.96, "end": 751.8, "text": " that is very easy to do because it requires no additional setup and you", "tokens": [300, 307, 588, 1858, 281, 360, 570, 309, 7029, 572, 4497, 8657, 293, 291], "temperature": 0.0, "avg_logprob": -0.11588077545166016, "compression_ratio": 1.9322916666666667, "no_speech_prob": 4.068403723067604e-05}, {"id": 124, "seek": 73300, "start": 751.8, "end": 758.52, "text": " can just use the cluster that you have but when you are really want to do", "tokens": [393, 445, 764, 264, 13630, 300, 291, 362, 457, 562, 291, 366, 534, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.11588077545166016, "compression_ratio": 1.9322916666666667, "no_speech_prob": 4.068403723067604e-05}, {"id": 125, "seek": 75852, "start": 758.52, "end": 767.6, "text": " automatic testing or enterprise level testing then that is not enough and", "tokens": [12509, 4997, 420, 14132, 1496, 4997, 550, 300, 307, 406, 1547, 293], "temperature": 0.0, "avg_logprob": -0.15974359214305878, "compression_ratio": 1.75, "no_speech_prob": 2.4289514840347692e-05}, {"id": 126, "seek": 75852, "start": 767.6, "end": 772.72, "text": " because you have manual steps you have an outcome that is not reproducible", "tokens": [570, 291, 362, 9688, 4439, 291, 362, 364, 9700, 300, 307, 406, 11408, 32128], "temperature": 0.0, "avg_logprob": -0.15974359214305878, "compression_ratio": 1.75, "no_speech_prob": 2.4289514840347692e-05}, {"id": 127, "seek": 75852, "start": 772.72, "end": 779.92, "text": " because you are doing the things all by yourself then also you don't have to", "tokens": [570, 291, 366, 884, 264, 721, 439, 538, 1803, 550, 611, 291, 500, 380, 362, 281], "temperature": 0.0, "avg_logprob": -0.15974359214305878, "compression_ratio": 1.75, "no_speech_prob": 2.4289514840347692e-05}, {"id": 128, "seek": 75852, "start": 779.92, "end": 784.88, "text": " find what is actually expected outcome because sometimes even if a resource", "tokens": [915, 437, 307, 767, 5176, 9700, 570, 2171, 754, 498, 257, 7684], "temperature": 0.0, "avg_logprob": -0.15974359214305878, "compression_ratio": 1.75, "no_speech_prob": 2.4289514840347692e-05}, {"id": 129, "seek": 78488, "start": 784.88, "end": 789.92, "text": " gets healthy it doesn't mean that the resource is configured the way you want", "tokens": [2170, 4627, 309, 1177, 380, 914, 300, 264, 7684, 307, 30538, 264, 636, 291, 528], "temperature": 0.0, "avg_logprob": -0.17706829462295923, "compression_ratio": 1.5252525252525253, "no_speech_prob": 4.066115434397943e-05}, {"id": 130, "seek": 78488, "start": 789.92, "end": 800.2, "text": " it. So we also tried and tested a few things and we started with go testing", "tokens": [309, 13, 407, 321, 611, 3031, 293, 8246, 257, 1326, 721, 293, 321, 1409, 365, 352, 4997], "temperature": 0.0, "avg_logprob": -0.17706829462295923, "compression_ratio": 1.5252525252525253, "no_speech_prob": 4.066115434397943e-05}, {"id": 131, "seek": 78488, "start": 800.2, "end": 803.96, "text": " but it turned out to be much more complicated because you have to write", "tokens": [457, 309, 3574, 484, 281, 312, 709, 544, 6179, 570, 291, 362, 281, 2464], "temperature": 0.0, "avg_logprob": -0.17706829462295923, "compression_ratio": 1.5252525252525253, "no_speech_prob": 4.066115434397943e-05}, {"id": 132, "seek": 78488, "start": 803.96, "end": 812.76, "text": " a lot of Bola plate code stuff and so we ended up using Cuddle. I don't know", "tokens": [257, 688, 295, 363, 4711, 5924, 3089, 1507, 293, 370, 321, 4590, 493, 1228, 383, 532, 2285, 13, 286, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.17706829462295923, "compression_ratio": 1.5252525252525253, "no_speech_prob": 4.066115434397943e-05}, {"id": 133, "seek": 81276, "start": 812.76, "end": 819.64, "text": " if some people know it. It's basically a Kubernetes testing toolkit and that", "tokens": [498, 512, 561, 458, 309, 13, 467, 311, 1936, 257, 23145, 4997, 40167, 293, 300], "temperature": 0.0, "avg_logprob": -0.16842755027439282, "compression_ratio": 1.6593886462882097, "no_speech_prob": 4.465589881874621e-05}, {"id": 134, "seek": 81276, "start": 819.64, "end": 826.8, "text": " allows you to define all your test cases in YAML and then just let Cuddle do", "tokens": [4045, 291, 281, 6964, 439, 428, 1500, 3331, 294, 398, 2865, 43, 293, 550, 445, 718, 383, 532, 2285, 360], "temperature": 0.0, "avg_logprob": -0.16842755027439282, "compression_ratio": 1.6593886462882097, "no_speech_prob": 4.465589881874621e-05}, {"id": 135, "seek": 81276, "start": 826.8, "end": 833.4, "text": " all the work all the application of the YAML on the server and then you", "tokens": [439, 264, 589, 439, 264, 3861, 295, 264, 398, 2865, 43, 322, 264, 7154, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.16842755027439282, "compression_ratio": 1.6593886462882097, "no_speech_prob": 4.465589881874621e-05}, {"id": 136, "seek": 81276, "start": 833.4, "end": 839.16, "text": " can define the resources that you expect afterwards and if you're imagining the", "tokens": [393, 6964, 264, 3593, 300, 291, 2066, 10543, 293, 498, 291, 434, 27798, 264], "temperature": 0.0, "avg_logprob": -0.16842755027439282, "compression_ratio": 1.6593886462882097, "no_speech_prob": 4.465589881874621e-05}, {"id": 137, "seek": 81276, "start": 839.16, "end": 842.56, "text": " graph that I showed you before where you have the composition and then you", "tokens": [4295, 300, 286, 4712, 291, 949, 689, 291, 362, 264, 12686, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.16842755027439282, "compression_ratio": 1.6593886462882097, "no_speech_prob": 4.465589881874621e-05}, {"id": 138, "seek": 84256, "start": 842.56, "end": 845.9599999999999, "text": " claim it and then you have a number of managed resources that are then spawned", "tokens": [3932, 309, 293, 550, 291, 362, 257, 1230, 295, 6453, 3593, 300, 366, 550, 17088, 292], "temperature": 0.0, "avg_logprob": -0.1385116784468941, "compression_ratio": 1.8883248730964468, "no_speech_prob": 3.759862738661468e-05}, {"id": 139, "seek": 84256, "start": 845.9599999999999, "end": 850.9599999999999, "text": " and so you can have the claim as an input and then you can just define the", "tokens": [293, 370, 291, 393, 362, 264, 3932, 382, 364, 4846, 293, 550, 291, 393, 445, 6964, 264], "temperature": 0.0, "avg_logprob": -0.1385116784468941, "compression_ratio": 1.8883248730964468, "no_speech_prob": 3.759862738661468e-05}, {"id": 140, "seek": 84256, "start": 850.9599999999999, "end": 854.5999999999999, "text": " resources that you want to have created as an output and then you can handle", "tokens": [3593, 300, 291, 528, 281, 362, 2942, 382, 364, 5598, 293, 550, 291, 393, 4813], "temperature": 0.0, "avg_logprob": -0.1385116784468941, "compression_ratio": 1.8883248730964468, "no_speech_prob": 3.759862738661468e-05}, {"id": 141, "seek": 84256, "start": 854.5999999999999, "end": 862.16, "text": " let Cuddle handle all the rest for you and then it can do things in", "tokens": [718, 383, 532, 2285, 4813, 439, 264, 1472, 337, 291, 293, 550, 309, 393, 360, 721, 294], "temperature": 0.0, "avg_logprob": -0.1385116784468941, "compression_ratio": 1.8883248730964468, "no_speech_prob": 3.759862738661468e-05}, {"id": 142, "seek": 84256, "start": 862.16, "end": 868.04, "text": " parallel and such and this is a really really great thing. So I recommend", "tokens": [8952, 293, 1270, 293, 341, 307, 257, 534, 534, 869, 551, 13, 407, 286, 2748], "temperature": 0.0, "avg_logprob": -0.1385116784468941, "compression_ratio": 1.8883248730964468, "no_speech_prob": 3.759862738661468e-05}, {"id": 143, "seek": 86804, "start": 868.04, "end": 876.1999999999999, "text": " Cuddle just to show you an example how these tests look like so you have your", "tokens": [383, 532, 2285, 445, 281, 855, 291, 364, 1365, 577, 613, 6921, 574, 411, 370, 291, 362, 428], "temperature": 0.0, "avg_logprob": -0.1152463603664089, "compression_ratio": 1.7657142857142858, "no_speech_prob": 3.7039881135569885e-05}, {"id": 144, "seek": 86804, "start": 876.1999999999999, "end": 883.16, "text": " small bucket claim if we are sticking to this simple bucket example then you", "tokens": [1359, 13058, 3932, 498, 321, 366, 13465, 281, 341, 2199, 13058, 1365, 550, 291], "temperature": 0.0, "avg_logprob": -0.1152463603664089, "compression_ratio": 1.7657142857142858, "no_speech_prob": 3.7039881135569885e-05}, {"id": 145, "seek": 86804, "start": 883.16, "end": 888.4399999999999, "text": " have your bucket claim on the left which is your test case and then on the right", "tokens": [362, 428, 13058, 3932, 322, 264, 1411, 597, 307, 428, 1500, 1389, 293, 550, 322, 264, 558], "temperature": 0.0, "avg_logprob": -0.1152463603664089, "compression_ratio": 1.7657142857142858, "no_speech_prob": 3.7039881135569885e-05}, {"id": 146, "seek": 86804, "start": 888.4399999999999, "end": 893.24, "text": " you are defining all the objects that you want. You have the bucket claim", "tokens": [291, 366, 17827, 439, 264, 6565, 300, 291, 528, 13, 509, 362, 264, 13058, 3932], "temperature": 0.0, "avg_logprob": -0.1152463603664089, "compression_ratio": 1.7657142857142858, "no_speech_prob": 3.7039881135569885e-05}, {"id": 147, "seek": 89324, "start": 893.24, "end": 899.0, "text": " itself which has a resource status that should become ready and then you have", "tokens": [2564, 597, 575, 257, 7684, 6558, 300, 820, 1813, 1919, 293, 550, 291, 362], "temperature": 0.0, "avg_logprob": -0.12791334788004557, "compression_ratio": 1.9148936170212767, "no_speech_prob": 4.397847078507766e-05}, {"id": 148, "seek": 89324, "start": 899.0, "end": 902.96, "text": " composite resource which is an internal resource that gets created by", "tokens": [25557, 7684, 597, 307, 364, 6920, 7684, 300, 2170, 2942, 538], "temperature": 0.0, "avg_logprob": -0.12791334788004557, "compression_ratio": 1.9148936170212767, "no_speech_prob": 4.397847078507766e-05}, {"id": 149, "seek": 89324, "start": 902.96, "end": 907.64, "text": " crossplane where it stores some reconciling information which should", "tokens": [3278, 36390, 689, 309, 9512, 512, 9993, 3208, 278, 1589, 597, 820], "temperature": 0.0, "avg_logprob": -0.12791334788004557, "compression_ratio": 1.9148936170212767, "no_speech_prob": 4.397847078507766e-05}, {"id": 150, "seek": 89324, "start": 907.64, "end": 912.28, "text": " also become ready and then you have your actual bucket managed resource which", "tokens": [611, 1813, 1919, 293, 550, 291, 362, 428, 3539, 13058, 6453, 7684, 597], "temperature": 0.0, "avg_logprob": -0.12791334788004557, "compression_ratio": 1.9148936170212767, "no_speech_prob": 4.397847078507766e-05}, {"id": 151, "seek": 89324, "start": 912.28, "end": 917.36, "text": " also has properties that you are expecting it to have and it also", "tokens": [611, 575, 7221, 300, 291, 366, 9650, 309, 281, 362, 293, 309, 611], "temperature": 0.0, "avg_logprob": -0.12791334788004557, "compression_ratio": 1.9148936170212767, "no_speech_prob": 4.397847078507766e-05}, {"id": 152, "seek": 91736, "start": 917.36, "end": 925.04, "text": " has a status and so that is all you need to do testing with Cuddle for", "tokens": [575, 257, 6558, 293, 370, 300, 307, 439, 291, 643, 281, 360, 4997, 365, 383, 532, 2285, 337], "temperature": 0.0, "avg_logprob": -0.13528621196746826, "compression_ratio": 1.5783783783783785, "no_speech_prob": 2.1766949430457316e-05}, {"id": 153, "seek": 91736, "start": 925.04, "end": 932.48, "text": " crossplane and one thing I want to highlight is because in crossplane the", "tokens": [3278, 36390, 293, 472, 551, 286, 528, 281, 5078, 307, 570, 294, 3278, 36390, 264], "temperature": 0.0, "avg_logprob": -0.13528621196746826, "compression_ratio": 1.5783783783783785, "no_speech_prob": 2.1766949430457316e-05}, {"id": 154, "seek": 91736, "start": 932.48, "end": 937.0, "text": " names of the composite resource are always generated by the Qube API", "tokens": [5288, 295, 264, 25557, 7684, 366, 1009, 10833, 538, 264, 1249, 1977, 9362], "temperature": 0.0, "avg_logprob": -0.13528621196746826, "compression_ratio": 1.5783783783783785, "no_speech_prob": 2.1766949430457316e-05}, {"id": 155, "seek": 91736, "start": 937.0, "end": 944.76, "text": " server so every time you are claiming an API the name is different it's always", "tokens": [7154, 370, 633, 565, 291, 366, 19232, 364, 9362, 264, 1315, 307, 819, 309, 311, 1009], "temperature": 0.0, "avg_logprob": -0.13528621196746826, "compression_ratio": 1.5783783783783785, "no_speech_prob": 2.1766949430457316e-05}, {"id": 156, "seek": 94476, "start": 944.76, "end": 951.4399999999999, "text": " different and you cannot influence it so what you can do with Cuddle is", "tokens": [819, 293, 291, 2644, 6503, 309, 370, 437, 291, 393, 360, 365, 383, 532, 2285, 307], "temperature": 0.0, "avg_logprob": -0.13709363730057425, "compression_ratio": 1.8146341463414635, "no_speech_prob": 2.583522473287303e-05}, {"id": 157, "seek": 94476, "start": 951.4399999999999, "end": 957.2, "text": " you can let Cuddle identify the objects that you are expecting via the", "tokens": [291, 393, 718, 383, 532, 2285, 5876, 264, 6565, 300, 291, 366, 9650, 5766, 264], "temperature": 0.0, "avg_logprob": -0.13709363730057425, "compression_ratio": 1.8146341463414635, "no_speech_prob": 2.583522473287303e-05}, {"id": 158, "seek": 94476, "start": 957.2, "end": 960.56, "text": " labels you don't have to pass the name but instead just tell Yammer that you", "tokens": [16949, 291, 500, 380, 362, 281, 1320, 264, 1315, 457, 2602, 445, 980, 18992, 936, 300, 291], "temperature": 0.0, "avg_logprob": -0.13709363730057425, "compression_ratio": 1.8146341463414635, "no_speech_prob": 2.583522473287303e-05}, {"id": 159, "seek": 94476, "start": 960.56, "end": 965.2, "text": " just want an object with certain properties and label set and then Cuddle", "tokens": [445, 528, 364, 2657, 365, 1629, 7221, 293, 7645, 992, 293, 550, 383, 532, 2285], "temperature": 0.0, "avg_logprob": -0.13709363730057425, "compression_ratio": 1.8146341463414635, "no_speech_prob": 2.583522473287303e-05}, {"id": 160, "seek": 94476, "start": 965.2, "end": 969.96, "text": " will look for one object for any object on the server and if there is one that", "tokens": [486, 574, 337, 472, 2657, 337, 604, 2657, 322, 264, 7154, 293, 498, 456, 307, 472, 300], "temperature": 0.0, "avg_logprob": -0.13709363730057425, "compression_ratio": 1.8146341463414635, "no_speech_prob": 2.583522473287303e-05}, {"id": 161, "seek": 96996, "start": 969.96, "end": 976.36, "text": " satisfies this constraint then you are good to go.", "tokens": [44271, 341, 25534, 550, 291, 366, 665, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.18478580231362202, "compression_ratio": 1.4852941176470589, "no_speech_prob": 5.058338865637779e-05}, {"id": 162, "seek": 96996, "start": 980.2800000000001, "end": 988.44, "text": " One other thing that we've experienced is very good is you should run your", "tokens": [1485, 661, 551, 300, 321, 600, 6751, 307, 588, 665, 307, 291, 820, 1190, 428], "temperature": 0.0, "avg_logprob": -0.18478580231362202, "compression_ratio": 1.4852941176470589, "no_speech_prob": 5.058338865637779e-05}, {"id": 163, "seek": 96996, "start": 988.44, "end": 996.72, "text": " tests in separate clusters for every pipeline that you are running so we are", "tokens": [6921, 294, 4994, 23313, 337, 633, 15517, 300, 291, 366, 2614, 370, 321, 366], "temperature": 0.0, "avg_logprob": -0.18478580231362202, "compression_ratio": 1.4852941176470589, "no_speech_prob": 5.058338865637779e-05}, {"id": 164, "seek": 99672, "start": 996.72, "end": 1002.0400000000001, "text": " using virtual clusters or B clusters for that that they run inside a physical", "tokens": [1228, 6374, 23313, 420, 363, 23313, 337, 300, 300, 436, 1190, 1854, 257, 4001], "temperature": 0.0, "avg_logprob": -0.17436134815216064, "compression_ratio": 1.8269230769230769, "no_speech_prob": 7.942934462334961e-05}, {"id": 165, "seek": 99672, "start": 1002.0400000000001, "end": 1006.76, "text": " cluster of course you can create your your own physical cluster all the time", "tokens": [13630, 295, 1164, 291, 393, 1884, 428, 428, 1065, 4001, 13630, 439, 264, 565], "temperature": 0.0, "avg_logprob": -0.17436134815216064, "compression_ratio": 1.8269230769230769, "no_speech_prob": 7.942934462334961e-05}, {"id": 166, "seek": 99672, "start": 1006.76, "end": 1011.32, "text": " but if you are spinning up physical clusters at least on EKS it can take", "tokens": [457, 498, 291, 366, 15640, 493, 4001, 23313, 412, 1935, 322, 462, 31558, 309, 393, 747], "temperature": 0.0, "avg_logprob": -0.17436134815216064, "compression_ratio": 1.8269230769230769, "no_speech_prob": 7.942934462334961e-05}, {"id": 167, "seek": 99672, "start": 1011.32, "end": 1016.64, "text": " up to 30 minutes and that is not something that you want for every test", "tokens": [493, 281, 2217, 2077, 293, 300, 307, 406, 746, 300, 291, 528, 337, 633, 1500], "temperature": 0.0, "avg_logprob": -0.17436134815216064, "compression_ratio": 1.8269230769230769, "no_speech_prob": 7.942934462334961e-05}, {"id": 168, "seek": 99672, "start": 1016.64, "end": 1021.88, "text": " and it also costs a lot of money and so you're just spinning up virtual clusters", "tokens": [293, 309, 611, 5497, 257, 688, 295, 1460, 293, 370, 291, 434, 445, 15640, 493, 6374, 23313], "temperature": 0.0, "avg_logprob": -0.17436134815216064, "compression_ratio": 1.8269230769230769, "no_speech_prob": 7.942934462334961e-05}, {"id": 169, "seek": 102188, "start": 1021.88, "end": 1026.76, "text": " which are Kubernetes control planes that are running as POTS inside a cluster", "tokens": [597, 366, 23145, 1969, 14952, 300, 366, 2614, 382, 430, 5068, 50, 1854, 257, 13630], "temperature": 0.0, "avg_logprob": -0.14235176358904159, "compression_ratio": 1.6943231441048034, "no_speech_prob": 4.166533108218573e-05}, {"id": 170, "seek": 102188, "start": 1026.76, "end": 1032.12, "text": " where you can then install cross-plane its providers apply the compositions and", "tokens": [689, 291, 393, 550, 3625, 3278, 12, 36390, 1080, 11330, 3079, 264, 43401, 293], "temperature": 0.0, "avg_logprob": -0.14235176358904159, "compression_ratio": 1.6943231441048034, "no_speech_prob": 4.166533108218573e-05}, {"id": 171, "seek": 102188, "start": 1032.12, "end": 1036.04, "text": " then run all the tests with Cuddle and then once you are done with the tests", "tokens": [550, 1190, 439, 264, 6921, 365, 383, 532, 2285, 293, 550, 1564, 291, 366, 1096, 365, 264, 6921], "temperature": 0.0, "avg_logprob": -0.14235176358904159, "compression_ratio": 1.6943231441048034, "no_speech_prob": 4.166533108218573e-05}, {"id": 172, "seek": 102188, "start": 1036.04, "end": 1041.6, "text": " then you can just delete the cluster and everything is fine and also you don't", "tokens": [550, 291, 393, 445, 12097, 264, 13630, 293, 1203, 307, 2489, 293, 611, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.14235176358904159, "compression_ratio": 1.6943231441048034, "no_speech_prob": 4.166533108218573e-05}, {"id": 173, "seek": 102188, "start": 1041.6, "end": 1045.64, "text": " have any intervention between two different pipelines because compositions", "tokens": [362, 604, 13176, 1296, 732, 819, 40168, 570, 43401], "temperature": 0.0, "avg_logprob": -0.14235176358904159, "compression_ratio": 1.6943231441048034, "no_speech_prob": 4.166533108218573e-05}, {"id": 174, "seek": 104564, "start": 1045.64, "end": 1054.5200000000002, "text": " are cluster scope and they are most likely overriding each other. Now I've", "tokens": [366, 13630, 11923, 293, 436, 366, 881, 3700, 670, 81, 2819, 1184, 661, 13, 823, 286, 600], "temperature": 0.0, "avg_logprob": -0.14698064941720865, "compression_ratio": 1.6894977168949772, "no_speech_prob": 1.0613639460643753e-05}, {"id": 175, "seek": 104564, "start": 1054.5200000000002, "end": 1058.64, "text": " been talking a lot about end-to-end tests and they are really good and I", "tokens": [668, 1417, 257, 688, 466, 917, 12, 1353, 12, 521, 6921, 293, 436, 366, 534, 665, 293, 286], "temperature": 0.0, "avg_logprob": -0.14698064941720865, "compression_ratio": 1.6894977168949772, "no_speech_prob": 1.0613639460643753e-05}, {"id": 176, "seek": 104564, "start": 1058.64, "end": 1063.16, "text": " recommend you to write end-to-end tests when you are building a cross-plane", "tokens": [2748, 291, 281, 2464, 917, 12, 1353, 12, 521, 6921, 562, 291, 366, 2390, 257, 3278, 12, 36390], "temperature": 0.0, "avg_logprob": -0.14698064941720865, "compression_ratio": 1.6894977168949772, "no_speech_prob": 1.0613639460643753e-05}, {"id": 177, "seek": 104564, "start": 1063.16, "end": 1068.5600000000002, "text": " platform but end-to-end tests also take a lot of time to run if you're", "tokens": [3663, 457, 917, 12, 1353, 12, 521, 6921, 611, 747, 257, 688, 295, 565, 281, 1190, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.14698064941720865, "compression_ratio": 1.6894977168949772, "no_speech_prob": 1.0613639460643753e-05}, {"id": 178, "seek": 104564, "start": 1068.5600000000002, "end": 1072.4, "text": " considering that you have an API where you are creating real physical cloud", "tokens": [8079, 300, 291, 362, 364, 9362, 689, 291, 366, 4084, 957, 4001, 4588], "temperature": 0.0, "avg_logprob": -0.14698064941720865, "compression_ratio": 1.6894977168949772, "no_speech_prob": 1.0613639460643753e-05}, {"id": 179, "seek": 107240, "start": 1072.4, "end": 1077.3200000000002, "text": " resources and then you always have to wait for your resource to actually start", "tokens": [3593, 293, 550, 291, 1009, 362, 281, 1699, 337, 428, 7684, 281, 767, 722], "temperature": 0.0, "avg_logprob": -0.16532494301019712, "compression_ratio": 1.7395348837209301, "no_speech_prob": 9.902059537125751e-05}, {"id": 180, "seek": 107240, "start": 1077.3200000000002, "end": 1083.5600000000002, "text": " and then after some time maybe it says it says that something is misconfigured", "tokens": [293, 550, 934, 512, 565, 1310, 309, 1619, 309, 1619, 300, 746, 307, 27631, 20646, 3831], "temperature": 0.0, "avg_logprob": -0.16532494301019712, "compression_ratio": 1.7395348837209301, "no_speech_prob": 9.902059537125751e-05}, {"id": 181, "seek": 107240, "start": 1083.5600000000002, "end": 1088.48, "text": " and then you have to look for an error and if you're really just doing", "tokens": [293, 550, 291, 362, 281, 574, 337, 364, 6713, 293, 498, 291, 434, 534, 445, 884], "temperature": 0.0, "avg_logprob": -0.16532494301019712, "compression_ratio": 1.7395348837209301, "no_speech_prob": 9.902059537125751e-05}, {"id": 182, "seek": 107240, "start": 1088.48, "end": 1093.6000000000001, "text": " development that it really slows you down because you have always this 10, 15, 20", "tokens": [3250, 300, 309, 534, 35789, 291, 760, 570, 291, 362, 1009, 341, 1266, 11, 2119, 11, 945], "temperature": 0.0, "avg_logprob": -0.16532494301019712, "compression_ratio": 1.7395348837209301, "no_speech_prob": 9.902059537125751e-05}, {"id": 183, "seek": 107240, "start": 1093.6000000000001, "end": 1101.72, "text": " minutes gaps between something happening and there are a lot of", "tokens": [2077, 15031, 1296, 746, 2737, 293, 456, 366, 257, 688, 295], "temperature": 0.0, "avg_logprob": -0.16532494301019712, "compression_ratio": 1.7395348837209301, "no_speech_prob": 9.902059537125751e-05}, {"id": 184, "seek": 110172, "start": 1101.72, "end": 1107.6000000000001, "text": " mistakes that you can make when you are writing compositions and so I just want", "tokens": [8038, 300, 291, 393, 652, 562, 291, 366, 3579, 43401, 293, 370, 286, 445, 528], "temperature": 0.0, "avg_logprob": -0.1524456324202291, "compression_ratio": 1.7867298578199051, "no_speech_prob": 6.49660432827659e-05}, {"id": 185, "seek": 110172, "start": 1107.6000000000001, "end": 1110.6000000000001, "text": " to highlight a few things so you have these composite type rest that", "tokens": [281, 5078, 257, 1326, 721, 370, 291, 362, 613, 25557, 2010, 1472, 300], "temperature": 0.0, "avg_logprob": -0.1524456324202291, "compression_ratio": 1.7867298578199051, "no_speech_prob": 6.49660432827659e-05}, {"id": 186, "seek": 110172, "start": 1110.6000000000001, "end": 1114.32, "text": " reference the composition with the XRD they have to match and they are only", "tokens": [6408, 264, 12686, 365, 264, 1783, 49, 35, 436, 362, 281, 2995, 293, 436, 366, 787], "temperature": 0.0, "avg_logprob": -0.1524456324202291, "compression_ratio": 1.7867298578199051, "no_speech_prob": 6.49660432827659e-05}, {"id": 187, "seek": 110172, "start": 1114.32, "end": 1120.24, "text": " validated at runtime then you have the group names which have to match with the", "tokens": [40693, 412, 34474, 550, 291, 362, 264, 1594, 5288, 597, 362, 281, 2995, 365, 264], "temperature": 0.0, "avg_logprob": -0.1524456324202291, "compression_ratio": 1.7867298578199051, "no_speech_prob": 6.49660432827659e-05}, {"id": 188, "seek": 110172, "start": 1120.24, "end": 1128.96, "text": " XRD name you have an unstructured open API schema because XRD is because", "tokens": [1783, 49, 35, 1315, 291, 362, 364, 18799, 46847, 1269, 9362, 34078, 570, 1783, 49, 35, 307, 570], "temperature": 0.0, "avg_logprob": -0.1524456324202291, "compression_ratio": 1.7867298578199051, "no_speech_prob": 6.49660432827659e-05}, {"id": 189, "seek": 112896, "start": 1128.96, "end": 1136.2, "text": " Kubernetes does not support recursive API schemers yet maybe it will come in the", "tokens": [23145, 775, 406, 1406, 20560, 488, 9362, 22627, 433, 1939, 1310, 309, 486, 808, 294, 264], "temperature": 0.0, "avg_logprob": -0.10844687411659643, "compression_ratio": 1.7767857142857142, "no_speech_prob": 3.366402961546555e-05}, {"id": 190, "seek": 112896, "start": 1136.2, "end": 1140.6000000000001, "text": " future but as of now it's not supported the same goes for the resource base", "tokens": [2027, 457, 382, 295, 586, 309, 311, 406, 8104, 264, 912, 1709, 337, 264, 7684, 3096], "temperature": 0.0, "avg_logprob": -0.10844687411659643, "compression_ratio": 1.7767857142857142, "no_speech_prob": 3.366402961546555e-05}, {"id": 191, "seek": 112896, "start": 1140.6000000000001, "end": 1148.0, "text": " which can also have any kind of field and then you have the resource patches by", "tokens": [597, 393, 611, 362, 604, 733, 295, 2519, 293, 550, 291, 362, 264, 7684, 26531, 538], "temperature": 0.0, "avg_logprob": -0.10844687411659643, "compression_ratio": 1.7767857142857142, "no_speech_prob": 3.366402961546555e-05}, {"id": 192, "seek": 112896, "start": 1148.0, "end": 1152.52, "text": " default the behavior in cross-plane is if you have if you want to patch from a", "tokens": [7576, 264, 5223, 294, 3278, 12, 36390, 307, 498, 291, 362, 498, 291, 528, 281, 9972, 490, 257], "temperature": 0.0, "avg_logprob": -0.10844687411659643, "compression_ratio": 1.7767857142857142, "no_speech_prob": 3.366402961546555e-05}, {"id": 193, "seek": 112896, "start": 1152.52, "end": 1157.68, "text": " field to another field and the path of your source does not exist then cross-plane", "tokens": [2519, 281, 1071, 2519, 293, 264, 3100, 295, 428, 4009, 775, 406, 2514, 550, 3278, 12, 36390], "temperature": 0.0, "avg_logprob": -0.10844687411659643, "compression_ratio": 1.7767857142857142, "no_speech_prob": 3.366402961546555e-05}, {"id": 194, "seek": 115768, "start": 1157.68, "end": 1161.64, "text": " cross-plane default behavior is that it will just ignore the patch and it will", "tokens": [3278, 12, 36390, 7576, 5223, 307, 300, 309, 486, 445, 11200, 264, 9972, 293, 309, 486], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 195, "seek": 115768, "start": 1161.64, "end": 1166.24, "text": " not throw an error or anything and if that is the case and you you might", "tokens": [406, 3507, 364, 6713, 420, 1340, 293, 498, 300, 307, 264, 1389, 293, 291, 291, 1062], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 196, "seek": 115768, "start": 1166.24, "end": 1171.6000000000001, "text": " easily swallow any any errors and then it you're wondering why things don't", "tokens": [3612, 20099, 604, 604, 13603, 293, 550, 309, 291, 434, 6359, 983, 721, 500, 380], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 197, "seek": 115768, "start": 1171.6000000000001, "end": 1176.04, "text": " work but but you just have a typo in your patch and it's really hard to find", "tokens": [589, 457, 457, 291, 445, 362, 257, 2125, 78, 294, 428, 9972, 293, 309, 311, 534, 1152, 281, 915], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 198, "seek": 115768, "start": 1176.04, "end": 1181.44, "text": " these if you have two thousand signs of YAML code and then you have types that", "tokens": [613, 498, 291, 362, 732, 4714, 7880, 295, 398, 2865, 43, 3089, 293, 550, 291, 362, 3467, 300], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 199, "seek": 115768, "start": 1181.44, "end": 1185.96, "text": " must match so if the user is inputting a string then you have to make sure that", "tokens": [1633, 2995, 370, 498, 264, 4195, 307, 4846, 783, 257, 6798, 550, 291, 362, 281, 652, 988, 300], "temperature": 0.0, "avg_logprob": -0.1386219386396737, "compression_ratio": 1.8300395256916997, "no_speech_prob": 2.5449895474594086e-05}, {"id": 200, "seek": 118596, "start": 1185.96, "end": 1192.64, "text": " the string is actually expected and not an integer on the on the actually", "tokens": [264, 6798, 307, 767, 5176, 293, 406, 364, 24922, 322, 264, 322, 264, 767], "temperature": 0.0, "avg_logprob": -0.10786380265888415, "compression_ratio": 1.7257142857142858, "no_speech_prob": 2.4676130124134943e-05}, {"id": 201, "seek": 118596, "start": 1192.64, "end": 1198.76, "text": " bucket API for example and then you have the indentation the big thing that if", "tokens": [13058, 9362, 337, 1365, 293, 550, 291, 362, 264, 44494, 399, 264, 955, 551, 300, 498], "temperature": 0.0, "avg_logprob": -0.10786380265888415, "compression_ratio": 1.7257142857142858, "no_speech_prob": 2.4676130124134943e-05}, {"id": 202, "seek": 118596, "start": 1198.76, "end": 1203.3600000000001, "text": " when you are writing YAML files that is my big problem if I'm writing YAML", "tokens": [562, 291, 366, 3579, 398, 2865, 43, 7098, 300, 307, 452, 955, 1154, 498, 286, 478, 3579, 398, 2865, 43], "temperature": 0.0, "avg_logprob": -0.10786380265888415, "compression_ratio": 1.7257142857142858, "no_speech_prob": 2.4676130124134943e-05}, {"id": 203, "seek": 118596, "start": 1203.3600000000001, "end": 1211.28, "text": " files I always mess up the indentation and then things get all messy so we", "tokens": [7098, 286, 1009, 2082, 493, 264, 44494, 399, 293, 550, 721, 483, 439, 16191, 370, 321], "temperature": 0.0, "avg_logprob": -0.10786380265888415, "compression_ratio": 1.7257142857142858, "no_speech_prob": 2.4676130124134943e-05}, {"id": 204, "seek": 121128, "start": 1211.28, "end": 1216.36, "text": " need something to detect these errors sooner because the sooner you detect an", "tokens": [643, 746, 281, 5531, 613, 13603, 15324, 570, 264, 15324, 291, 5531, 364], "temperature": 0.0, "avg_logprob": -0.13908550474378797, "compression_ratio": 1.6084656084656084, "no_speech_prob": 1.1123333933937829e-05}, {"id": 205, "seek": 121128, "start": 1216.36, "end": 1222.56, "text": " error the easier it is to fix so what we have done because there is nothing out", "tokens": [6713, 264, 3571, 309, 307, 281, 3191, 370, 437, 321, 362, 1096, 570, 456, 307, 1825, 484], "temperature": 0.0, "avg_logprob": -0.13908550474378797, "compression_ratio": 1.6084656084656084, "no_speech_prob": 1.1123333933937829e-05}, {"id": 206, "seek": 121128, "start": 1222.56, "end": 1228.28, "text": " there at least we couldn't find anything we've developed a linter for", "tokens": [456, 412, 1935, 321, 2809, 380, 915, 1340, 321, 600, 4743, 257, 287, 5106, 337], "temperature": 0.0, "avg_logprob": -0.13908550474378797, "compression_ratio": 1.6084656084656084, "no_speech_prob": 1.1123333933937829e-05}, {"id": 207, "seek": 121128, "start": 1228.28, "end": 1235.48, "text": " cross-plane compositions where we are loading actual XID and CRD schemas and", "tokens": [3278, 12, 36390, 43401, 689, 321, 366, 15114, 3539, 1783, 2777, 293, 14123, 35, 22627, 296, 293], "temperature": 0.0, "avg_logprob": -0.13908550474378797, "compression_ratio": 1.6084656084656084, "no_speech_prob": 1.1123333933937829e-05}, {"id": 208, "seek": 123548, "start": 1235.48, "end": 1241.24, "text": " then comparing them with the compositions and then applying a set of", "tokens": [550, 15763, 552, 365, 264, 43401, 293, 550, 9275, 257, 992, 295], "temperature": 0.0, "avg_logprob": -0.1187821388244629, "compression_ratio": 1.7431192660550459, "no_speech_prob": 5.052307460573502e-05}, {"id": 209, "seek": 123548, "start": 1241.24, "end": 1247.84, "text": " rules like ensuring that the composition actually supports a valid XID type", "tokens": [4474, 411, 16882, 300, 264, 12686, 767, 9346, 257, 7363, 1783, 2777, 2010], "temperature": 0.0, "avg_logprob": -0.1187821388244629, "compression_ratio": 1.7431192660550459, "no_speech_prob": 5.052307460573502e-05}, {"id": 210, "seek": 123548, "start": 1247.84, "end": 1252.2, "text": " that you don't have duplicate objects which can sometimes happen especially if", "tokens": [300, 291, 500, 380, 362, 23976, 6565, 597, 393, 2171, 1051, 2318, 498], "temperature": 0.0, "avg_logprob": -0.1187821388244629, "compression_ratio": 1.7431192660550459, "no_speech_prob": 5.052307460573502e-05}, {"id": 211, "seek": 123548, "start": 1252.2, "end": 1257.84, "text": " you are generating things with helm and then the most important thing is that", "tokens": [291, 366, 17746, 721, 365, 29554, 293, 550, 264, 881, 1021, 551, 307, 300], "temperature": 0.0, "avg_logprob": -0.1187821388244629, "compression_ratio": 1.7431192660550459, "no_speech_prob": 5.052307460573502e-05}, {"id": 212, "seek": 123548, "start": 1257.84, "end": 1262.28, "text": " it actually validates the patches that you are running against the CRD and the", "tokens": [309, 767, 7363, 1024, 264, 26531, 300, 291, 366, 2614, 1970, 264, 14123, 35, 293, 264], "temperature": 0.0, "avg_logprob": -0.1187821388244629, "compression_ratio": 1.7431192660550459, "no_speech_prob": 5.052307460573502e-05}, {"id": 213, "seek": 126228, "start": 1262.28, "end": 1267.36, "text": " XID schemas and that is really really helpful that the first time when we ran", "tokens": [1783, 2777, 22627, 296, 293, 300, 307, 534, 534, 4961, 300, 264, 700, 565, 562, 321, 5872], "temperature": 0.0, "avg_logprob": -0.149450615660785, "compression_ratio": 1.517766497461929, "no_speech_prob": 6.903563189553097e-05}, {"id": 214, "seek": 126228, "start": 1267.36, "end": 1273.6399999999999, "text": " this against our production code it turned out to have I think 800 errors", "tokens": [341, 1970, 527, 4265, 3089, 309, 3574, 484, 281, 362, 286, 519, 13083, 13603], "temperature": 0.0, "avg_logprob": -0.149450615660785, "compression_ratio": 1.517766497461929, "no_speech_prob": 6.903563189553097e-05}, {"id": 215, "seek": 126228, "start": 1273.6399999999999, "end": 1284.08, "text": " that nobody noticed but somehow our our platform still worked yeah and other", "tokens": [300, 5079, 5694, 457, 6063, 527, 527, 3663, 920, 2732, 1338, 293, 661], "temperature": 0.0, "avg_logprob": -0.149450615660785, "compression_ratio": 1.517766497461929, "no_speech_prob": 6.903563189553097e-05}, {"id": 216, "seek": 126228, "start": 1284.08, "end": 1289.16, "text": " cool thing about our linter is that it's pure CLI and you don't need a", "tokens": [1627, 551, 466, 527, 287, 5106, 307, 300, 309, 311, 6075, 12855, 40, 293, 291, 500, 380, 643, 257], "temperature": 0.0, "avg_logprob": -0.149450615660785, "compression_ratio": 1.517766497461929, "no_speech_prob": 6.903563189553097e-05}, {"id": 217, "seek": 128916, "start": 1289.16, "end": 1292.8000000000002, "text": " Kubernetes cluster or a cross-plane installation you can just run this", "tokens": [23145, 13630, 420, 257, 3278, 12, 36390, 13260, 291, 393, 445, 1190, 341], "temperature": 0.0, "avg_logprob": -0.17882796851071445, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00012121646432206035}, {"id": 218, "seek": 128916, "start": 1292.8000000000002, "end": 1298.68, "text": " locally without setting anything else up and you can it really takes maybe one", "tokens": [16143, 1553, 3287, 1340, 1646, 493, 293, 291, 393, 309, 534, 2516, 1310, 472], "temperature": 0.0, "avg_logprob": -0.17882796851071445, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00012121646432206035}, {"id": 219, "seek": 128916, "start": 1298.68, "end": 1303.3600000000001, "text": " minute or two and then you have all your your your compositions linter and that", "tokens": [3456, 420, 732, 293, 550, 291, 362, 439, 428, 428, 428, 43401, 287, 5106, 293, 300], "temperature": 0.0, "avg_logprob": -0.17882796851071445, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00012121646432206035}, {"id": 220, "seek": 128916, "start": 1303.3600000000001, "end": 1308.52, "text": " is really really really great you're wondering where to get it and there will", "tokens": [307, 534, 534, 534, 869, 291, 434, 6359, 689, 281, 483, 309, 293, 456, 486], "temperature": 0.0, "avg_logprob": -0.17882796851071445, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00012121646432206035}, {"id": 221, "seek": 128916, "start": 1308.52, "end": 1315.0800000000002, "text": " be a link on the last slide where you can find the code yeah summing things up", "tokens": [312, 257, 2113, 322, 264, 1036, 4137, 689, 291, 393, 915, 264, 3089, 1338, 2408, 2810, 721, 493], "temperature": 0.0, "avg_logprob": -0.17882796851071445, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00012121646432206035}, {"id": 222, "seek": 131508, "start": 1315.08, "end": 1322.8, "text": " and so this is our CD CI CD pipeline that we have developed after a couple of", "tokens": [293, 370, 341, 307, 527, 6743, 37777, 6743, 15517, 300, 321, 362, 4743, 934, 257, 1916, 295], "temperature": 0.0, "avg_logprob": -0.16300560788410465, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.00010882482456509024}, {"id": 223, "seek": 131508, "start": 1322.8, "end": 1329.36, "text": " years of testing and failing so we use helm to write and build our compositions", "tokens": [924, 295, 4997, 293, 18223, 370, 321, 764, 29554, 281, 2464, 293, 1322, 527, 43401], "temperature": 0.0, "avg_logprob": -0.16300560788410465, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.00010882482456509024}, {"id": 224, "seek": 131508, "start": 1329.36, "end": 1337.1599999999999, "text": " to generate the YAML code dynamically we use our self-written linter to lint", "tokens": [281, 8460, 264, 398, 2865, 43, 3089, 43492, 321, 764, 527, 2698, 12, 26859, 287, 5106, 281, 287, 686], "temperature": 0.0, "avg_logprob": -0.16300560788410465, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.00010882482456509024}, {"id": 225, "seek": 131508, "start": 1337.1599999999999, "end": 1343.6799999999998, "text": " our compositions and we use Cuddle to run all the end-to-end tests and then we", "tokens": [527, 43401, 293, 321, 764, 383, 532, 2285, 281, 1190, 439, 264, 917, 12, 1353, 12, 521, 6921, 293, 550, 321], "temperature": 0.0, "avg_logprob": -0.16300560788410465, "compression_ratio": 1.596938775510204, "no_speech_prob": 0.00010882482456509024}, {"id": 226, "seek": 134368, "start": 1343.68, "end": 1351.96, "text": " are just pushing things with train or any other kind of OCI tool that that comes", "tokens": [366, 445, 7380, 721, 365, 3847, 420, 604, 661, 733, 295, 422, 25240, 2290, 300, 300, 1487], "temperature": 0.0, "avg_logprob": -0.15610849446263805, "compression_ratio": 1.4743589743589745, "no_speech_prob": 4.6066208597039804e-05}, {"id": 227, "seek": 134368, "start": 1351.96, "end": 1362.3600000000001, "text": " handy yeah so so much here's a QR code for the linter we are actually making", "tokens": [13239, 1338, 370, 370, 709, 510, 311, 257, 32784, 3089, 337, 264, 287, 5106, 321, 366, 767, 1455], "temperature": 0.0, "avg_logprob": -0.15610849446263805, "compression_ratio": 1.4743589743589745, "no_speech_prob": 4.6066208597039804e-05}, {"id": 228, "seek": 134368, "start": 1362.3600000000001, "end": 1368.04, "text": " this open source today so you are the first one to actually see the code", "tokens": [341, 1269, 4009, 965, 370, 291, 366, 264, 700, 472, 281, 767, 536, 264, 3089], "temperature": 0.0, "avg_logprob": -0.15610849446263805, "compression_ratio": 1.4743589743589745, "no_speech_prob": 4.6066208597039804e-05}, {"id": 229, "seek": 136804, "start": 1368.04, "end": 1387.52, "text": " except us yeah thank you do we have time for questions okay any questions", "tokens": [50364, 3993, 505, 1338, 1309, 291, 360, 321, 362, 565, 337, 1651, 1392, 604, 1651, 51338], "temperature": 0.0, "avg_logprob": -0.29765356288236733, "compression_ratio": 1.140625, "no_speech_prob": 0.00042379056685604155}, {"id": 230, "seek": 139804, "start": 1398.04, "end": 1408.84, "text": " so my question is more about crossplane then crossplane this looks really good", "tokens": [370, 452, 1168, 307, 544, 466, 3278, 36390, 550, 3278, 36390, 341, 1542, 534, 665], "temperature": 0.0, "avg_logprob": -0.24922860635293498, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.007658958900719881}, {"id": 231, "seek": 139804, "start": 1408.84, "end": 1413.8799999999999, "text": " though and how does crossplane compare to things like cluster API and the CRDs", "tokens": [1673, 293, 577, 775, 3278, 36390, 6794, 281, 721, 411, 13630, 9362, 293, 264, 14123, 35, 82], "temperature": 0.0, "avg_logprob": -0.24922860635293498, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.007658958900719881}, {"id": 232, "seek": 139804, "start": 1413.8799999999999, "end": 1418.08, "text": " that that introduces like where's the distinction between the two of them just", "tokens": [300, 300, 31472, 411, 689, 311, 264, 16844, 1296, 264, 732, 295, 552, 445], "temperature": 0.0, "avg_logprob": -0.24922860635293498, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.007658958900719881}, {"id": 233, "seek": 139804, "start": 1418.08, "end": 1424.04, "text": " you know if you're familiar with cluster API so crossplane makes use of CRDs", "tokens": [291, 458, 498, 291, 434, 4963, 365, 13630, 9362, 370, 3278, 36390, 1669, 764, 295, 14123, 35, 82], "temperature": 0.0, "avg_logprob": -0.24922860635293498, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.007658958900719881}, {"id": 234, "seek": 142404, "start": 1424.04, "end": 1428.52, "text": " under the hood so if you are if you are applying your XIDs on the cluster then", "tokens": [833, 264, 13376, 370, 498, 291, 366, 498, 291, 366, 9275, 428, 1783, 2777, 82, 322, 264, 13630, 550], "temperature": 0.0, "avg_logprob": -0.2906554341316223, "compression_ratio": 1.4049586776859504, "no_speech_prob": 0.0004142487596254796}, {"id": 235, "seek": 142404, "start": 1428.52, "end": 1435.84, "text": " crossplane will generate CRDs which are then used as the API that can be", "tokens": [3278, 36390, 486, 8460, 14123, 35, 82, 597, 366, 550, 1143, 382, 264, 9362, 300, 393, 312], "temperature": 0.0, "avg_logprob": -0.2906554341316223, "compression_ratio": 1.4049586776859504, "no_speech_prob": 0.0004142487596254796}, {"id": 236, "seek": 142404, "start": 1435.84, "end": 1438.96, "text": " the user can claim", "tokens": [264, 4195, 393, 3932], "temperature": 0.0, "avg_logprob": -0.2906554341316223, "compression_ratio": 1.4049586776859504, "no_speech_prob": 0.0004142487596254796}, {"id": 237, "seek": 143896, "start": 1438.96, "end": 1454.32, "text": " if there are no more questions then thank you we're going to make a five", "tokens": [498, 456, 366, 572, 544, 1651, 550, 1309, 291, 321, 434, 516, 281, 652, 257, 1732], "temperature": 0.0, "avg_logprob": -0.3875983715057373, "compression_ratio": 1.0588235294117647, "no_speech_prob": 0.0009743545087985694}, {"id": 238, "seek": 145432, "start": 1454.32, "end": 1469.8799999999999, "text": " minutes break", "tokens": [50364, 2077, 1821, 51142], "temperature": 0.0, "avg_logprob": -0.9593360900878907, "compression_ratio": 0.6190476190476191, "no_speech_prob": 0.002548223827034235}], "language": "en"}