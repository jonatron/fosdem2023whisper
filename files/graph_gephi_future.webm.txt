[00:00.000 --> 00:13.840]  We've seen all the developments, we've seen Gaffy light is coming, but also what will
[00:13.840 --> 00:16.440]  happen with the main Gaffy, with the main Gaffy code base.
[00:16.440 --> 00:21.480]  So, thanks a lot for coming and for having us and enjoy the talk.
[00:21.480 --> 00:29.560]  So hello everyone, Gaffy is a network analysis and visualization software that is I think
[00:29.560 --> 00:36.400]  primarily used in teaching, it's Java based and it's very visual.
[00:36.400 --> 00:42.240]  I had assumed wrongly that most of you would have known what it is, but basically you can
[00:42.240 --> 00:47.280]  interact with the network nodes and edges visually and it's really a good entry point
[00:47.280 --> 00:57.160]  into say network science, it's used in teaching and I would say it's quite field diagnostic,
[00:57.160 --> 01:02.720]  it's not dedicated to any industry, it's not for the social science only, it's not for
[01:02.720 --> 01:11.000]  biology, it's not for just visualizing a graph database output, it's just any graph,
[01:11.000 --> 01:13.320]  but it's kind of for beginners.
[01:13.320 --> 01:20.160]  And it's been existing for more than 10 years now, it's pretty popular and Matthew and I
[01:20.160 --> 01:25.520]  are basically the two fathers of that tool, he's really the architect of the code and
[01:25.520 --> 01:31.120]  I'm more the guy who assures the continuity of the project and I had designed some algorithms
[01:31.120 --> 01:35.200]  and the user experience if you will.
[01:35.200 --> 01:39.240]  And this is a community oriented talk, we'll talk about the code base a little bit but
[01:39.240 --> 01:44.760]  it's also about what's around, hence the code base and the rest.
[01:44.760 --> 01:51.800]  So Gaffy has basically been unfinished forever like so many products we know, that's why
[01:51.800 --> 01:59.080]  the version number is below one and it's also because you know there is no big entity
[01:59.080 --> 02:05.920]  funding Gaffy, it's like our free time, so we push it as much as we can when we can,
[02:05.920 --> 02:12.400]  but there is always something missing and basically we have known for a very long time
[02:12.400 --> 02:20.400]  that we want to finish it basically but we're not there yet and we patch it and we keep
[02:20.400 --> 02:23.560]  it working but it doesn't mean we do finish it.
[02:23.560 --> 02:31.600]  So for instance, we do not have all the features we would like to have that would make a coherent
[02:31.600 --> 02:38.000]  or consistent whole like a set of features that go well together and we also want it
[02:38.000 --> 02:44.200]  to be reliable enough and efficient enough that it can live for a longer life, right?
[02:44.200 --> 02:49.280]  So we want to set goals and fulfill these goals.
[02:49.280 --> 02:52.880]  So basically the idea is that when we get there, that's when we are going to call the
[02:52.880 --> 02:55.080]  version 1.0, right?
[02:55.080 --> 03:00.080]  Because of course the project is going to work, live and we're going to work on it after
[03:00.080 --> 03:02.720]  that and we're also going to work on it before that.
[03:02.720 --> 03:08.600]  So the 1.0 is today's Gaffy if you know it but finished in that sense.
[03:08.600 --> 03:13.880]  Now the question is about what does that entail and that's what we want to talk about.
[03:13.880 --> 03:21.720]  And the way I'm going to start is by explaining how we think of the roadmap to version 1.0.
[03:21.720 --> 03:25.680]  And basically, so there is a demand for Gaffy that's established, we're very lucky, that's
[03:25.680 --> 03:29.680]  very nice, so people want it, they use it, good.
[03:29.680 --> 03:35.400]  And our goal is to have a project that is healthy or sustainable if you will and also
[03:35.400 --> 03:40.160]  the code base that is sustainable so that we can fix it when it breaks and so on and
[03:40.160 --> 03:41.160]  so on.
[03:41.160 --> 03:46.440]  So how do we go from this need or this demand that is there to those goals?
[03:46.440 --> 03:50.680]  I separate them because they have different implications but none of them makes sense
[03:50.680 --> 03:52.640]  without the others so that they are kind of connected.
[03:52.640 --> 03:57.200]  So one way to take this problem would be to look at what are the threats to the project
[03:57.200 --> 03:58.760]  or the code base.
[03:58.760 --> 04:04.560]  So the main threat would be first threat if we kind of clash with the community of users,
[04:04.560 --> 04:08.920]  if we don't want the same thing then that's threatening obviously the project.
[04:08.920 --> 04:14.000]  But then there is also two different threats for the code base, one would be what if no
[04:14.000 --> 04:22.360]  one wants to fix the code and what if some people do want but they cannot, for instance
[04:22.360 --> 04:24.680]  because they don't know how to understand the code and so on.
[04:24.680 --> 04:29.440]  So those are the three main threats we identify at the project level and then we can see the
[04:29.440 --> 04:34.280]  roadmap as fixing or preventing these threats.
[04:34.280 --> 04:39.840]  So this would be having a thriving Gefi community and I'm saying community kind of at large,
[04:39.840 --> 04:44.680]  I include here the community of developers and also the community of users who are sometimes
[04:44.680 --> 04:50.560]  the same and sometimes not but all of that is okay it's kind of fuzzy, I'm going to acknowledge
[04:50.560 --> 04:56.360]  that now so I don't know exactly what is the community but there is a community.
[04:56.360 --> 05:01.160]  And then we want to be able to pay developers for maintenance because we think that we could
[05:01.160 --> 05:06.240]  get there, that would prevent the problem of no one wanting to because of course money
[05:06.240 --> 05:11.960]  is an incentive, we can keep you know competencies to do that and we also want to have a clean
[05:11.960 --> 05:18.520]  and robust code base so that when newcomers come and want to participate in the project
[05:18.520 --> 05:24.360]  they can actually get involved relatively comfortably into fixing issues, improving
[05:24.360 --> 05:28.200]  the code and participating to the evolution of the project.
[05:28.240 --> 05:34.400]  But also those kind of steps towards sustainability also depend on previous steps.
[05:34.400 --> 05:40.360]  And one of the very big steps that is an issue for us is the fact that for us to pay someone
[05:40.360 --> 05:46.480]  we have to have a structure like fiscal or legal structure where if you receive funds
[05:46.480 --> 05:52.400]  we can legally hire someone because right now the project can work kind of in a without
[05:52.400 --> 05:59.520]  this administrative shell so far it's worked for us but it cannot go beyond the need of
[05:59.520 --> 06:06.400]  hiring people ultimately so we need to get what's called a fiscal sponsor basically so
[06:06.400 --> 06:09.280]  our legal and fiscal representation.
[06:09.280 --> 06:14.320]  We also need to raise funds, we are thinking of doing that through crowdfunding because
[06:14.320 --> 06:18.480]  we think that enough people are interested to give some money and we don't need that
[06:18.480 --> 06:25.600]  much money either and we also need to attract Java developers and if you pay the attention
[06:25.600 --> 06:31.440]  that we are looking for Java developers to contribute to Gefi maybe that's you.
[06:31.440 --> 06:38.160]  And basically so and we want to have a better community tools meaning also kind of websites
[06:38.160 --> 06:44.520]  tutorials and so on so those things can derive from having a demand on Gefi and of course
[06:44.560 --> 06:49.480]  they prompt an order in which we have to you know pile up the bricks so we have to start
[06:49.480 --> 06:56.200]  by having a fiscal sponsor because then we can raise funds then we can enroll Java developers
[06:56.200 --> 07:00.520]  because when then we can pay them if they want to participate to the project and then
[07:00.520 --> 07:05.840]  we can have organized the maintenance and we can have a better code base and more sustainable
[07:05.840 --> 07:10.440]  over the long term and that will make the Gefi project more sustainable at least on
[07:10.440 --> 07:12.440]  the code base level.
[07:12.520 --> 07:16.560]  I didn't number the track on the top which is the kind of the community track this can
[07:16.560 --> 07:21.000]  have it's kind of another branch of those things it can happen at the same time it's
[07:21.000 --> 07:25.360]  also ongoing right away but I'm going to just acknowledge that I don't want to forget about
[07:25.360 --> 07:30.320]  it but it's kind of independent to some extent.
[07:30.320 --> 07:39.800]  So that is how we think of our roadmap so our priorities are obviously the most important
[07:39.800 --> 07:49.160]  things for us is to make the project sustainable in practice it may mean things such as having
[07:49.160 --> 07:55.240]  the software easy to install for the users so something that might be overlooked but
[07:55.240 --> 08:00.080]  is so important to the public of Gefi which is beginners.
[08:00.080 --> 08:05.520]  We want to have the OpenGL so Gefi is based on an OpenGL visualization of the network
[08:05.520 --> 08:10.360]  so drawing on the GPU is so important to have efficiency when you have to display a
[08:10.360 --> 08:14.520]  large network but it has to work on many different configurations which is not obvious
[08:14.520 --> 08:17.600]  because of drivers and all of that.
[08:17.600 --> 08:24.040]  Gefi's multiplatform I didn't mention it but of course so it means Linus, Mac OS, Windows
[08:24.040 --> 08:25.680]  and so on.
[08:25.680 --> 08:29.440]  We want to be able to test everything if we can we want it to be stable we want to be
[08:29.440 --> 08:33.760]  able to fix the major bugs when they happen and so on.
[08:33.760 --> 08:38.720]  We want to finish the project at some point now it's ripe for that so that's where we
[08:38.720 --> 08:44.280]  are heading for and then there are other things so we would like to have the ability to stabilize
[08:44.280 --> 08:48.200]  core contributors so people who come and we want to keep them because they get involved
[08:48.200 --> 08:52.720]  in the project you know how it works and then there are other things I've listed a few here
[08:52.720 --> 08:56.800]  I'm not going to mention them we will come back to that so there are also a lot of other
[08:56.800 --> 09:00.680]  aspects that are also important even though they are kind of all over the place for the
[09:00.680 --> 09:03.920]  project.
[09:03.920 --> 09:10.480]  So our technical road map for the two was the version 1.0 it had a number of items we
[09:10.480 --> 09:15.680]  had established that a few years ago like two years ago and we've done part of it already.
[09:15.680 --> 09:19.320]  So stuff is done embedding Java so that you don't have to install Java you can know it
[09:19.320 --> 09:23.240]  works like you install the app Java is in and people don't have this issue of having
[09:23.240 --> 09:25.320]  the right version of Java.
[09:25.320 --> 09:29.640]  We've updated to the latest networking platforms we are now GDPR compliant in the bug reports
[09:29.640 --> 09:33.200]  that we receive if people want to send them to us.
[09:33.200 --> 09:38.640]  We are working now actively on the new OpenGL engine we'll explain why.
[09:38.640 --> 09:41.840]  The quick search is there is kind of a prototype already working in the last version of Gefi
[09:41.840 --> 09:46.720]  so you can search your notes right in the interface new icons are coming we are reworking
[09:46.720 --> 09:51.480]  the UI and then we have a lot of other things that we think should be there before we can
[09:51.480 --> 09:58.680]  call Gefi 1.0 namely the highly demanded undo feature and yeah autosave and graphic
[09:59.120 --> 10:03.880]  very managing parallel edges which is the hardest is done but like the last mile is
[10:03.880 --> 10:11.800]  not been done in like the algorithms and so on so it's coming on a bunch of other things.
[10:11.800 --> 10:16.160]  So one of the things we've tried to do to address that issue is to organize what we've
[10:16.160 --> 10:22.680]  called Gefi code sustainability retreats and now they are becoming Gefi week for obvious
[10:22.680 --> 10:28.520]  reasons of a short naming I think but the idea was to make the code sustainable and
[10:28.520 --> 10:33.080]  it's kind of evolved into something is gotten out of hands in some ways that's the kind
[10:33.080 --> 10:38.520]  of thing I want to say so the first one happened in 2021 and it was basically about restarting
[10:38.520 --> 10:43.800]  this effort of maintaining Gefi so we had to show that we are still there we're going
[10:43.800 --> 10:49.760]  to go back to Gefi improve it maintain it and so on and we attracted just a few people
[10:49.760 --> 10:54.880]  so it was kind of a small team we're just six and the version of last year so it was
[10:54.880 --> 11:01.520]  in a very early December last end of August beginning of December 2022 a few months ago
[11:01.520 --> 11:05.920]  and then we had like 22 participants in Paris including a lot of different people and this
[11:05.920 --> 11:13.440]  was kind of more pushing forward to other things and we're going to show you a few pictures
[11:13.440 --> 11:17.200]  and to tell you a little bit the story of what happened in these kind of meetings so
[11:17.200 --> 11:21.520]  we made a call some people answered I do want to participate we were able to fly them we
[11:21.520 --> 11:26.400]  pay for travel accommodation so for instance you have like on the left you have Antonin
[11:26.400 --> 11:30.000]  Delperge who is the maintainer of OpenRefine if you know that tool that is dedicated to
[11:30.000 --> 11:34.320]  cleaning data very much used in the social science and newsrooms and stuff like that
[11:35.040 --> 11:39.760]  and OpenRefine it used to be Google Refine so it's an open source project that had a life in
[11:39.760 --> 11:44.640]  the industry and it's been released it's coded in Java and it's a very well structured project so
[11:44.640 --> 11:50.320]  like Antonin was really good at telling us how he did it for his project or the project
[11:50.320 --> 11:56.720]  OpenRefine to have a fiscal sponsor he helped us design the upcoming undo feature for instance
[11:56.720 --> 12:01.760]  we had Tiago Peixoto that you may know for his work on community detection algorithms so it's kind
[12:01.760 --> 12:06.800]  of more of the hardcore researcher if you want but he's also the developer of graph tools if you
[12:06.800 --> 12:11.760]  know these science tools for networks and you see Mathieu explaining the code base so there was
[12:11.760 --> 12:17.440]  also kind of a school aspect to you know raising the competencies of every participant to understand
[12:17.440 --> 12:24.480]  the code base and basically the one year before it was kind of much more people much more varied
[12:24.480 --> 12:32.400]  people so designers researchers in social science people who are doing open source intelligence
[12:32.400 --> 12:37.840]  or ascent you know so it was kind of broad and of course developers and we worked all together
[12:37.840 --> 12:43.040]  and of course it's kind of a free for all in those situations and some people pushed in kind of
[12:43.040 --> 12:49.440]  unexpected directions it was good so for instance you can see someone working and making the new
[12:49.440 --> 12:56.320]  icons and finding new ways to visualize community detection so kind of half consolidating the code
[12:56.320 --> 13:04.160]  and also exploring new directions and the takeaways are that it works so it's these
[13:04.160 --> 13:09.840]  gaffy weeks are really working for the project they are not that expensive for what they bring us
[13:09.840 --> 13:15.600]  but they also go in many other directions that are super nice but not exactly what we wanted which
[13:15.600 --> 13:21.760]  was making the project more sustainable and they contribute kind of indirectly to that
[13:21.760 --> 13:28.560]  so it was an unexpected result for us because it attracted unexpected people it had unexpected
[13:28.560 --> 13:34.400]  outcomes it's it's becoming kind of a mini festival and we hope to make that every year so we're
[13:34.400 --> 13:38.640]  going to make new calls so we're also going for calling for participants it's really a nice place
[13:38.640 --> 13:43.760]  to be because there are so many interesting people to talk to it's really lively but we try to maintain
[13:43.760 --> 13:49.280]  a balance so that we don't forget about making the code robust which might be the most boring part
[13:49.280 --> 13:54.240]  but also the most necessary part because if gaffy just doesn't work then nothing exists of all of that
[13:55.280 --> 14:00.000]  hence the questions we have which is how to attract the java developers and we've not been so great
[14:00.000 --> 14:05.280]  at doing that in the gaffy weeks it's kind of the the flow of the of these whole operations
[14:05.280 --> 14:13.360]  that we fail to attract java developers so why why is it so the the idea we have is that we could
[14:13.360 --> 14:19.840]  look at how java developers got involved into the project so the first way you can get involved is
[14:19.840 --> 14:28.320]  you made gaffy yourself so that's one way another way is you've developed a plugin you know so the
[14:28.320 --> 14:32.800]  plugin is an entry point because you can develop plugins for gaffy some people do that because
[14:32.800 --> 14:37.600]  they want to implement a niche algorithm they've developed and then from there they can get to
[14:37.600 --> 14:41.760]  know better and better the codebase and we can maybe draw them into so it has happened so for
[14:41.760 --> 14:47.920]  instance from Matthew Tote he's not here he's not here so we can draw them towards the the core of
[14:47.920 --> 14:55.680]  gaffy you could also be a user of gaffy who also happened to be a developer and through that become
[14:55.680 --> 15:01.600]  involved into gaffy so this happened but it's a very slim overlap of people who have the use for
[15:01.600 --> 15:07.440]  gaffy and also also happen to be a developer and usually it's unconnected right so you don't use
[15:07.440 --> 15:13.280]  gaffy because your developers you just happen to be both also good but not so many people so the
[15:13.280 --> 15:18.240]  question we have is also also a question for you because it might be you but it could also you
[15:18.240 --> 15:23.200]  could also have an opinion about that so is there something such as a fourth path that would be
[15:23.840 --> 15:29.200]  i am coding or i am using gaffy in the industry as a java developer and then we would like to connect
[15:29.200 --> 15:34.560]  to you and see how could we draw you into the project how could you help us and stuff like that
[15:35.360 --> 15:40.960]  or is there just no people who work as a java dev with gaffy in the industry i would like to know
[15:40.960 --> 15:46.480]  that and from there i'm going to give the mic to Matthew who is the architect of the code
[15:46.480 --> 15:48.240]  just to give you the his battery
[15:50.800 --> 15:51.440]  we're going to swap
[15:54.480 --> 15:56.000]  oh you want me to install it to you
[16:04.800 --> 16:05.760]  let me put that to your
[16:08.560 --> 16:12.800]  okay so the mic is here okay it's fine it's fine i'll just i'll just keep it um
[16:13.760 --> 16:16.240]  it's out of the little it's fine okay no worries
[16:19.040 --> 16:26.480]  okay well so just just that it looks like so welcome everyone um i'll continue the presentation
[16:26.480 --> 16:32.080]  from now and i'll talk a little bit about this this more the code aspect that what we've done to
[16:32.080 --> 16:39.360]  to actually eventually engage more developers i mean of course uh we are open source you can
[16:39.440 --> 16:43.440]  you can browse all the code the code on on github and so on but that's that's only the starting
[16:43.440 --> 16:48.480]  point right so what what do we really need to do to make the project more inclusive for for new
[16:48.480 --> 16:55.120]  developers so we've done some actions and we plan to do more but it really essentially is about its
[16:55.680 --> 17:01.440]  you know documentation entry points we try to reduce the number of github issues so it's not
[17:01.440 --> 17:06.320]  kind of a complete mess when you try to understand what's going on we started to do a bit of youtube
[17:06.320 --> 17:13.440]  videos to teach the code base and um you know try to make the experience for somebody landing
[17:13.440 --> 17:18.800]  on gaffy and having an issue trying to convince them it's actually not that hard to get started
[17:18.800 --> 17:24.080]  on on the tickets and uh and you know here are a few videos or things you can watch and follow
[17:24.960 --> 17:33.440]  so um there's really other ideas but this is the main idea and we also have some open questions
[17:33.440 --> 17:38.640]  there you know is there actually you know technological problems so that maybe in the
[17:38.640 --> 17:44.880]  number of people knowing how to do java ui is not you know high enough or is not interesting enough
[17:44.880 --> 17:52.640]  that prevents this to happen or there are some other reasons obviously gaffy you the user base
[17:52.640 --> 17:58.080]  of gaffy as you know is mostly non-developers right so we're talking about a fraction of those
[17:58.080 --> 18:03.840]  users that might be put potentially contributors we also have the gaffy toolkit which is the kind
[18:03.840 --> 18:10.320]  of library version of gaffy so only the kind of core that is more used in automation that could be
[18:10.320 --> 18:16.960]  another entry point but we haven't explored that i want to talk now a bit about the the actual
[18:16.960 --> 18:23.280]  software and why you know it is so challenging so first of all gaffy is a full product in my view
[18:23.280 --> 18:30.240]  there is a user interface point part so um there is also some some design elements right so you
[18:30.240 --> 18:36.240]  have to understand you can kind of understand how to get to different functions so there's
[18:36.240 --> 18:42.160]  some performance issues uh and challenges right so it's it's large graphs uh you know memory
[18:42.160 --> 18:47.360]  efficiency so it kind of has it all um that's also what i found personally very interesting
[18:48.080 --> 18:54.320]  then there are some also technological challenges such as java itself uh you know we use java swing
[18:54.320 --> 19:00.320]  for example not so popular anymore um you know is you know how do we overcome that uh in the long
[19:00.320 --> 19:08.080]  run and also uh support for open gl in um in java is not is not amazing uh how do we overcome that
[19:09.040 --> 19:13.440]  then we have a couple of also principles that we have put into the software for a long time that
[19:13.440 --> 19:19.440]  may actually deliver a lot of value but also quite challenging such as uh the it's multi-threading
[19:19.440 --> 19:24.720]  aspect right so um there are lots of issues and bugs that may be related to the fact that
[19:24.720 --> 19:28.800]  everything needs to happen in parallel and that's kind of cool about gaffy but that's also for our
[19:28.800 --> 19:33.840]  developer pretty hard and then we also commit to have a multi-platform software right so
[19:34.560 --> 19:39.280]  i uh there are there are certain processes for example you need to do to certify your
[19:39.280 --> 19:43.680]  application on macOS it's pretty cumbersome completely different process on windows
[19:44.320 --> 19:48.800]  we have not developed some automation for this but it's it's it's a you know you need to spend a
[19:48.800 --> 19:54.720]  lot of time to make sure it works on linux and and so on and so forth um historically we haven't
[19:54.720 --> 20:01.440]  put enough effort into testing so um the the the quality assurance when you when you put a new
[20:01.440 --> 20:06.400]  release out um you know how how do you make sure that it actually works and and it doesn't have
[20:06.480 --> 20:11.360]  you know critical bugs then there's also the plug-in lifecycle if you submit a plug-in
[20:12.160 --> 20:16.960]  you know we need to kind of review that it works and that there are like dozens of plugins so
[20:16.960 --> 20:20.560]  everybody wants to do a new version how do you review that and manage that process
[20:22.480 --> 20:27.600]  and finally also the ecosystem is very wide you have graph databases you have plenty of other
[20:27.600 --> 20:32.960]  tools gaffy is uh you know needs to somewhat be interoperable with these other tools right to make
[20:32.960 --> 20:39.280]  to make the the the user's uh life easy so i'm gonna stop here it looks really doomed right so
[20:39.280 --> 20:46.640]  it's like we're not gonna make it but still we we have some uh some some belief in it still and
[20:46.640 --> 20:50.800]  partly also because the challenge is very high is very big right so that's also what i said
[20:50.800 --> 20:56.320]  personally i like big challenges so this uh this long list of things uh is is kind of fun as a
[20:56.320 --> 21:01.360]  developer but i think we also have some assets that that also makes us believe in the project in
[21:01.360 --> 21:07.360]  a long run uh and first of all it's a desktop tool and uh you know we've seen for example
[21:07.360 --> 21:13.840]  with lately the release of the m1 processor there's still a lot of innovation happening in hardware
[21:13.840 --> 21:19.760]  web is great and it has it can flourish but it's also great stuff on desktop we have a great
[21:19.760 --> 21:27.280]  modern architecture uh we have a great uh graph structure uh called graph store that's very robust
[21:27.280 --> 21:32.880]  very well tested and we have a fully automated uh build cycle so you can release in in one click
[21:32.880 --> 21:37.920]  so to speak so it it doesn't take that much effort to to put a new release out so we've built all
[21:37.920 --> 21:44.480]  of these things over the years and and we think that it can bring us in uh forward recently we've
[21:44.480 --> 21:50.400]  also been successful at rewriting certain modules uh and and seeing that they work well they're more
[21:50.400 --> 21:57.200]  reliable so we can kind of you know rewrite piece by piece not do a big bang uh 1.0 but kind of get
[21:57.280 --> 22:03.680]  along the way there by testing milestone by milestones um we've also uh have some cool
[22:03.680 --> 22:08.160]  work in progress such as the new visualization engine so we know that there's there's potential
[22:08.160 --> 22:15.280]  in in what we have in uh in in the works and finally the foundation of on which
[22:15.280 --> 22:21.200]  Gefi is based on for example Java itself keeps evolving the language is very mature but also
[22:21.200 --> 22:26.240]  there's lots of cool new things coming out uh we could you know probably 10x the performance
[22:26.240 --> 22:29.440]  of Gefi if you were to to leverage all of these recent innovations
[22:31.840 --> 22:39.520]  I will now pass it back to Mathieu for the web version yes so and we have one of the two of
[22:39.520 --> 22:43.920]  the developers here with us today so we're we're browsing out to the web and maybe I should start
[22:43.920 --> 22:51.120]  by saying how many years ago three years ago the last time there was a physical for them
[22:51.120 --> 22:56.800]  so we skipped two years so I think it's about three years ago we were here in this dev room
[22:57.360 --> 23:05.760]  uh presenting the dystopian future of Gefi in javascript a new benchmark that so we've we've
[23:05.760 --> 23:12.320]  actually considered very seriously the question of going full web for Gefi and the answer is
[23:13.280 --> 23:22.800]  there are still limitations to the web technologies that make it so that it will never be a replacement
[23:22.800 --> 23:29.760]  for the moment it cannot be a replacement for Gefi because it cannot go as far as Gefi in terms
[23:29.760 --> 23:35.680]  of scalability of large networks right so we think we what we understand of the the people using
[23:35.680 --> 23:40.480]  Gefi is that what they one of the things they value and that they like with Gefi is that you
[23:40.720 --> 23:45.760]  can start with very small networks and you know do you do your tinkering as a beginner and when
[23:45.760 --> 23:51.360]  you have actual data that comes from the real world and it's really big and which is coming
[23:51.360 --> 23:55.840]  you can scale that up to very large networks and your net your knowledge is going to scale
[23:56.480 --> 24:04.000]  so we are going to have Gefi and along with it a web version but that's going to be more
[24:04.000 --> 24:09.520]  tailored towards the beginners and networks that are not that big now if you have really big needs
[24:09.520 --> 24:14.160]  then you use the Java version but for teaching we think that the web version could work
[24:15.040 --> 24:20.160]  and we that's why we're calling it Gefi light it has it's it has a little bit less
[24:20.160 --> 24:24.480]  features but it also has in some ways more features because the web offers opportunities
[24:24.480 --> 24:28.640]  so for instance you could modify your network through JavaScript because it's the ecosystem
[24:28.640 --> 24:34.240]  where everything exists and I want to say that this is a different team so we know them very much
[24:34.240 --> 24:41.760]  but it's kind of now super it's ripe it's ready to do it you can if you have the slides
[24:41.760 --> 24:48.320]  they are in the first-day website you can have the see the demo I have to I do not have any more
[24:48.320 --> 24:54.160]  time you can see the demo and see the repository so I'm going to skip this slide for the sake of
[24:55.360 --> 25:01.120]  time but basically these are the things you can expect are coming and they will end with
[25:01.120 --> 25:06.640]  Gefi 1.0 only then we will talk about what Gefi could be differently and what do I conclude
[25:06.640 --> 25:13.040]  or do we conclude together what do I do I'm going to do it and then you if what I miss you do it
[25:13.920 --> 25:19.120]  so we're looking for fiscal sponsors if you have feedback about that because you have an open source
[25:19.120 --> 25:26.240]  project we'd like to know and we have a question for you should we release the version 1.0 as a way
[25:26.240 --> 25:30.240]  to get a better crowdfunding or should we do should we do crowdfunding in order to get to
[25:30.240 --> 25:34.720]  the 1.0 quicker which is at the service of the others open question we'd like to know what you
[25:34.720 --> 25:41.360]  think we're looking for Java devs spread the word contact us if you're interested it's it's really
[25:41.360 --> 25:47.760]  interesting it's really exciting community and we want to do a new Gefi week this year so in
[25:47.760 --> 25:53.520]  like 10 months if you can offer some sponsorship we are really interested and we'd like to discuss
[25:53.520 --> 25:59.760]  with you that's why we are here today so thank you very much for your attention
