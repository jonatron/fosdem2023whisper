{"text": " The next talk will be on dimensionalization again, and this time we're looking at layout algorithms. So if you have a large graph, computing and good layout for the graph is actually computational expensive, and also hard, and oftentimes we end up with hairballs, as you've seen in the Sigma, Sigma example, but there are other approaches as well, and so I'm really excited today for an ML-based approach, right? So we've all seen that ML models are taking over more and more of our jobs, so we can all just relax all day and don't do anything anymore, because our ML overlords will take care of everything. So I'm really glad that Simone and Tomaso are here today to talk about a different approach to graph layouts, and so very much welcome and enjoy the talk. Thanks very much. Can you hear me in the back? Okay. Good morning to everyone. Thanks you for being here. Let me present myself briefly. My name is Tomaso. I'm here with Simone. We are to front-end and data visualization. So there's no amplification, so the last group and the last group can hear you. Okay. It's okay. We are to front-end and data visualization developer for Laus company from Venice, Italy, and today we are here to talk about new artificial intelligence-based approach to graph visualization discussed in recent papers. So let's start. Graph drawing is a very wide and vast field of computer engineering, so if we observe its evolution during the last 70 years, we can find many graph visualization algorithms. So we can find hierarchical techniques, radial layouts, orthogonal layouts, geometric methods, and also, of course, we know force-based approaches. And typically, most of these algorithms work by applying some kind of heuristics or models or geometric relationships in order to achieve the final visual results. And for example, we all know that post-direct algorithms work with physical models to unfold the graphs. Yeah, post-directed algorithms are those that probably have become more popular over time. This has happened for many reasons. They are very easy to use, easy to implement, can be used with all types of graphs and can be parallelized and many other reasons. But they present, for me, of course, a limit in terms of design control. If we run our first directed algorithms, it may be easy to introduce a steady conference over the layout. So we can only be sure that the graph will converge in order to find a balance between the forces, of course, but we can control which are the graphic features, the visual features that will be improved of design. And to do this, in recent years, the growing use of artificial intelligence models to solve problems has led to the creation of a new family of graphicization algorithms. These algorithms work by exploiting the concept of cost function. And so cost function is basically a mathematical function that allows us to measure how far a given system deviates from an ideal state. So if we have a graph composed of blue nodes, any cost function related to that graph will take the nodes, axes, coordinates on the screen as input and return a number as a value. That number indicates us how much the graph is respecting the graphic feature encoded in that cost function. And indeed, a cost function can be fully established and formulated by the programmer, the developer. And theoretically, we can encode any graphic feature in a cost function. So the question is, how can we formulate cost functions related to graphs? And to answer these questions, we have to ask ourselves which are the graphic features that we want to improve. One way to do this is to observe a bad layout. So if we look at the image, we can immediately notice that the topological distances, for example, are not respected. So we can find pairs of nodes with two ops that are seven times more distant than pairs of nodes with one hop. This is certainly a negative aspect of this design in terms of using of space. In addition, if we look at the topological node, we can see that the angles are not uniform on the graphs. The structure is not homogeneous. Same as for APD and distances. And finally, there are also conclusions of nodes known to be the element that most compromise the quality of a layout. So all these observations can be encoded in a cost function. So let's see an example now. For time reasons, we will talk only about a single cost function. Specifically, we will talk about the topological distances. So if we look at the tree in the image, it makes sense to think that the Euclidean distances between the pairs of nodes should be somehow proportional to the topological distances, the length of the shortest path. This is valid not only for three graphs, but in general for all types of graphs. So our goal is to formulate a cost function that gives us a measure of how much the current APD and distances between pairs of nodes are similar to the topological distances. And as in any artificial intelligence problem, we have to follow a data-driven approach. So we need a source of data that indicates us which is the ideal state of the system in order to train our model according to it. And in this case, our data source is metrics, is the topological distances metrics. So we can know which is the length of the shortest path between pairs of nodes. And with this data source, we can compute for each pair of nodes INJ the quadratic deviations between the current Euclidean distances and the real topological distances of INJ nodes. And finally, we can sum all the contributions of all of pairs, sorry, and build a single cost function in two variables that give us a measure of how much the graph is respecting the topological distances. So once that the cost function has been formulated, we can optimize it by running an optimization algorithm. So we can run Vanilla-Garand-Dichent, Stochastic-Garand-Dichent, Momentum, Adam, and many other algorithms. We know that the function variables, the cost function variables consist of the node axis coordinates on the screen. So if we optimize that cost function, we are moving the graph in order to find a minimum or a maximum of that cost function. So the graph will move in order to respect topological distances. And so we have linked the papers of these official intelligence methodologies. And today the authors have provided a tool to show these algorithms. So we can change, for example, types of graphs. And we can see, in this case, we have the spreads, loss function, cost functions. And we can combine many cost functions by applying a linear combination of all these cost functions. Well, in these introductions, I have talked about the methodologies. But our goal today here is to present contributions in 10 or 13 months. So I let the world to Simone, who will talk about our contributions in our web application. Hi. When you design a layout, it must be analyzed on the basis of two terms. Effectiveness and efficiency. The effectiveness covered by Tom Maso is the ability of a layout to highlight important structure in the graph and ensuring that they are understanding. Efficiency, which I will talk about, aims to visualize as many elements as possible while granting interactivity. And this is very important nowadays where everything is characterized by good data. Here we can see the results obtained with a glassy solution explained by Tom Maso with just only the stress function, not the wall of the other 10, but just only with the stress one. And as we can see, with just less than 3,000 volts, we can't guarantee the interactivity line. So because the layout can perform at least 15 iterations per second anymore. And I think also that in our web application, this is a task CPU intensive and make it unusable for the entire time. Our target for this project is to allow the visualization of as many nodes and edges as possible through the CPU and the parallel programming, so parallel programming on CPUs. In our web application. Let's see together how the algorithm is composed. So we are using just only the stress function. So the first thing to do is create the topological distance mathematics. Then until we achieve the goal, for every duration, we are calculating the gradient and not positions. Calculating the gradient, we traverse the topological distance mathematics. For every pair of nodes, we calculate the partial derivates over the Euclidean and topological distances. And in the end, we update the positions, the non-spositions, very simple. But as can be seen, this step of every duration is a quality time. So in every duration, you have to perform it. And the idea is to split this calculation of the gradient into two various threads. When you, if you would like to create a solution and multi-times solution, you have to consider at least two aspects. The memory you are sending every time to each thread and the load balancing across thread. For memory, for optimizing memory, we saw that the topological distance mathematics is mirrored. So it's divided by two triangles, the upper and the lower. So we are using just only one triangle. For load balancing, we take the triangle and create an array and split it into threads. Now every thread calculates a partial gradient. And in the end, the final gradient is coming from the sum of all the partials. Now the results over typescript and just only five threads. And the green line is the results over multi-times solution. As can be seen, it's very close to if the layout was linear time. So this line representing that. And let's see together the speed up of the solution. Considering the graph with 5,000 nodes and more or less 10,000 edges. So we are in this situation here. And comparing the solution with just only the main thread in the application versus the five thread, we can see that the speed up is more than eight. But that is possible with five thread. It's possible because as can be seen here, when you have five thread in a web application, they are performing the layout while the main thread is free to doing other things. If you have just only the main thread, he has to handle all everything. So the fact is also explained by this other solution with multiple thread with just only one thread plus the main in which we have five or less. This means that this is a problem that can have very good parallelization with five thread with five. Now I would like to show a simple example with a random generated graph. So we now are just only watching the performances and not the aspects. And this can be seen, I hope you can see, it's very fluid, with 8,000 nodes and more or less 16,000 edges. He is searching for a structure but he is a random generated, so it is an entire structure. So future works. So we saw that the problem is perfect parallelized. So the next step for us is to transform the problem from the parallel OSGPU to parallel OSGPU because we are just only using the GPU for the rendering but not for the computation. And with another solution, we perform the classic force layout, we obtain performance like 900 times more. So achieving more or less one million nodes visualize. So the hope is that about efficiency but also study if this is this kind of layout can guarantee the effectiveness. So making also not just only the stress one but more cost function and understand if he can guarantee a good visualization with 100,000 nodes. That's it for us. What? This version is not available but we will publish it, sorry. He asked if the code is available online. This kind of version is not available online, you can find the version of the spring and better here, you can find the, this is the same code more or less. Does it work for directly the graph, yes, of course, yeah. Yes, of course, there are many quality measures that allow us to show complex graph as a clip. If you go on the table, you can find the quality measure called the net volume, this is the quality measure and combining that measure with the stress with another one you can show also complex graphs. Are you using auto-exift tools to calculate partial derivatives of the cost function? No. It's being done by hand? No, it's interneted by us. We have used a tool for calculating of the derivatives, the partial gradients, etc. Now we have implemented the font-squash but the derivatives are very easy to compute from the most of quality measures. They are not very complex to compute and also to build an efficient multi-training solution because tool chains exist along with the parallelization on GPU, they come with 4-series of tools. Yes, yes. So, the formula was using TensorFlow.js but as easy as it is implemented, it's not that the complexity, it's not giving from there the time-square complexity. Does Julia out-support interactive adding of new nodes like when user wants to expand to see new neighborhoods? Yes. So, the new nodes appeared around the double pick note and the other nodes doesn't get around. Yes, it depends of how you have the... Ribbit, yes, yes. He has... Sorry. If we continue to work, if we, for example, expand a node, we do something on the graph, yes, of course, it depends of how you have built your applications. For example, if you have continuously run over the time, you can expand a node, update the graph topology and the renderer will continue to work. Yes. You can perform it also to the introduced nodes. Sorry. Thank you. How does it compare to first layouts regarding number of iterations, convergence speed? Okay. It is about the same because if you are watching to the classic first layout, so the spring and better of Peter it's time square because for every relation, you take the charge and this is time square. Okay. The time complexity is the same, but the velocity of convergence depends of how you have tuned the hyperparameters of the model and depends from the optimization algorithm that you have used. For example, gradient descent is known to be very slow to converge, but if you use more efficient optimization algorithm, such as Adam's command that accumulates an inertia during the iteration, the speed up is more than gradient descent and depends also on the learning rate curve that you put on the system. For example, you can add an exponential decay of the learning rate in order to have a very speed during the iteration, very large speed in the iteration. And then when the graph starts to converge, you can reduce the learning rate in order to find a better minimum or a better maximum. Thank you. The last one or so? If you have more questions, you can just continue. Thank you so much, everyone. Thank you to Majora. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.52, "text": " The next talk will be on dimensionalization again, and this time we're looking at layout", "tokens": [50364, 440, 958, 751, 486, 312, 322, 18795, 2144, 797, 11, 293, 341, 565, 321, 434, 1237, 412, 13333, 50890], "temperature": 0.0, "avg_logprob": -0.41687808566623263, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.2223588228225708}, {"id": 1, "seek": 0, "start": 10.52, "end": 11.52, "text": " algorithms.", "tokens": [50890, 14642, 13, 50940], "temperature": 0.0, "avg_logprob": -0.41687808566623263, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.2223588228225708}, {"id": 2, "seek": 0, "start": 11.52, "end": 16.68, "text": " So if you have a large graph, computing and good layout for the graph is actually computational", "tokens": [50940, 407, 498, 291, 362, 257, 2416, 4295, 11, 15866, 293, 665, 13333, 337, 264, 4295, 307, 767, 28270, 51198], "temperature": 0.0, "avg_logprob": -0.41687808566623263, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.2223588228225708}, {"id": 3, "seek": 0, "start": 16.68, "end": 21.28, "text": " expensive, and also hard, and oftentimes we end up with hairballs, as you've seen in", "tokens": [51198, 5124, 11, 293, 611, 1152, 11, 293, 18349, 321, 917, 493, 365, 2578, 19194, 11, 382, 291, 600, 1612, 294, 51428], "temperature": 0.0, "avg_logprob": -0.41687808566623263, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.2223588228225708}, {"id": 4, "seek": 0, "start": 21.28, "end": 29.0, "text": " the Sigma, Sigma example, but there are other approaches as well, and so I'm really excited", "tokens": [51428, 264, 36595, 11, 36595, 1365, 11, 457, 456, 366, 661, 11587, 382, 731, 11, 293, 370, 286, 478, 534, 2919, 51814], "temperature": 0.0, "avg_logprob": -0.41687808566623263, "compression_ratio": 1.6077586206896552, "no_speech_prob": 0.2223588228225708}, {"id": 5, "seek": 2900, "start": 29.0, "end": 33.56, "text": " today for an ML-based approach, right?", "tokens": [50364, 965, 337, 364, 21601, 12, 6032, 3109, 11, 558, 30, 50592], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 6, "seek": 2900, "start": 33.56, "end": 37.64, "text": " So we've all seen that ML models are taking over more and more of our jobs, so we can", "tokens": [50592, 407, 321, 600, 439, 1612, 300, 21601, 5245, 366, 1940, 670, 544, 293, 544, 295, 527, 4782, 11, 370, 321, 393, 50796], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 7, "seek": 2900, "start": 37.64, "end": 43.44, "text": " all just relax all day and don't do anything anymore, because our ML overlords will take", "tokens": [50796, 439, 445, 5789, 439, 786, 293, 500, 380, 360, 1340, 3602, 11, 570, 527, 21601, 15986, 5703, 486, 747, 51086], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 8, "seek": 2900, "start": 43.44, "end": 44.92, "text": " care of everything.", "tokens": [51086, 1127, 295, 1203, 13, 51160], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 9, "seek": 2900, "start": 44.92, "end": 50.64, "text": " So I'm really glad that Simone and Tomaso are here today to talk about a different approach", "tokens": [51160, 407, 286, 478, 534, 5404, 300, 41652, 293, 5041, 35281, 366, 510, 965, 281, 751, 466, 257, 819, 3109, 51446], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 10, "seek": 2900, "start": 50.64, "end": 55.24, "text": " to graph layouts, and so very much welcome and enjoy the talk.", "tokens": [51446, 281, 4295, 46100, 11, 293, 370, 588, 709, 2928, 293, 2103, 264, 751, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 11, "seek": 2900, "start": 55.24, "end": 57.56, "text": " Thanks very much.", "tokens": [51676, 2561, 588, 709, 13, 51792], "temperature": 0.0, "avg_logprob": -0.2990482009459879, "compression_ratio": 1.624, "no_speech_prob": 0.06700736284255981}, {"id": 12, "seek": 5756, "start": 57.56, "end": 60.64, "text": " Can you hear me in the back?", "tokens": [50364, 1664, 291, 1568, 385, 294, 264, 646, 30, 50518], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 13, "seek": 5756, "start": 60.64, "end": 62.64, "text": " Okay.", "tokens": [50518, 1033, 13, 50618], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 14, "seek": 5756, "start": 62.64, "end": 64.68, "text": " Good morning to everyone.", "tokens": [50618, 2205, 2446, 281, 1518, 13, 50720], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 15, "seek": 5756, "start": 64.68, "end": 67.68, "text": " Thanks you for being here.", "tokens": [50720, 2561, 291, 337, 885, 510, 13, 50870], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 16, "seek": 5756, "start": 67.68, "end": 70.88, "text": " Let me present myself briefly.", "tokens": [50870, 961, 385, 1974, 2059, 10515, 13, 51030], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 17, "seek": 5756, "start": 70.88, "end": 71.96000000000001, "text": " My name is Tomaso.", "tokens": [51030, 1222, 1315, 307, 5041, 35281, 13, 51084], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 18, "seek": 5756, "start": 71.96000000000001, "end": 74.24000000000001, "text": " I'm here with Simone.", "tokens": [51084, 286, 478, 510, 365, 41652, 13, 51198], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 19, "seek": 5756, "start": 74.24000000000001, "end": 77.76, "text": " We are to front-end and data visualization.", "tokens": [51198, 492, 366, 281, 1868, 12, 521, 293, 1412, 25801, 13, 51374], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 20, "seek": 5756, "start": 77.76, "end": 83.6, "text": " So there's no amplification, so the last group and the last group can hear you.", "tokens": [51374, 407, 456, 311, 572, 9731, 3774, 11, 370, 264, 1036, 1594, 293, 264, 1036, 1594, 393, 1568, 291, 13, 51666], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 21, "seek": 5756, "start": 83.6, "end": 84.6, "text": " Okay.", "tokens": [51666, 1033, 13, 51716], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 22, "seek": 5756, "start": 84.6, "end": 86.4, "text": " It's okay.", "tokens": [51716, 467, 311, 1392, 13, 51806], "temperature": 0.0, "avg_logprob": -0.38138342876823583, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.20347285270690918}, {"id": 23, "seek": 8640, "start": 86.4, "end": 93.48, "text": " We are to front-end and data visualization developer for Laus company from Venice, Italy,", "tokens": [50364, 492, 366, 281, 1868, 12, 521, 293, 1412, 25801, 10754, 337, 2369, 301, 2237, 490, 32707, 11, 10705, 11, 50718], "temperature": 0.0, "avg_logprob": -0.2561676025390625, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.018352830782532692}, {"id": 24, "seek": 8640, "start": 93.48, "end": 102.76, "text": " and today we are here to talk about new artificial intelligence-based approach to graph visualization", "tokens": [50718, 293, 965, 321, 366, 510, 281, 751, 466, 777, 11677, 7599, 12, 6032, 3109, 281, 4295, 25801, 51182], "temperature": 0.0, "avg_logprob": -0.2561676025390625, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.018352830782532692}, {"id": 25, "seek": 8640, "start": 102.76, "end": 105.32000000000001, "text": " discussed in recent papers.", "tokens": [51182, 7152, 294, 5162, 10577, 13, 51310], "temperature": 0.0, "avg_logprob": -0.2561676025390625, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.018352830782532692}, {"id": 26, "seek": 8640, "start": 105.32000000000001, "end": 107.32000000000001, "text": " So let's start.", "tokens": [51310, 407, 718, 311, 722, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2561676025390625, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.018352830782532692}, {"id": 27, "seek": 8640, "start": 107.32000000000001, "end": 115.08000000000001, "text": " Graph drawing is a very wide and vast field of computer engineering, so if we observe", "tokens": [51410, 21884, 6316, 307, 257, 588, 4874, 293, 8369, 2519, 295, 3820, 7043, 11, 370, 498, 321, 11441, 51798], "temperature": 0.0, "avg_logprob": -0.2561676025390625, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.018352830782532692}, {"id": 28, "seek": 11508, "start": 115.08, "end": 123.32, "text": " its evolution during the last 70 years, we can find many graph visualization algorithms.", "tokens": [50364, 1080, 9303, 1830, 264, 1036, 5285, 924, 11, 321, 393, 915, 867, 4295, 25801, 14642, 13, 50776], "temperature": 0.0, "avg_logprob": -0.1912229679248951, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.20146183669567108}, {"id": 29, "seek": 11508, "start": 123.32, "end": 131.04, "text": " So we can find hierarchical techniques, radial layouts, orthogonal layouts, geometric methods,", "tokens": [50776, 407, 321, 393, 915, 35250, 804, 7512, 11, 38783, 46100, 11, 41488, 46100, 11, 33246, 7150, 11, 51162], "temperature": 0.0, "avg_logprob": -0.1912229679248951, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.20146183669567108}, {"id": 30, "seek": 11508, "start": 131.04, "end": 136.07999999999998, "text": " and also, of course, we know force-based approaches.", "tokens": [51162, 293, 611, 11, 295, 1164, 11, 321, 458, 3464, 12, 6032, 11587, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1912229679248951, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.20146183669567108}, {"id": 31, "seek": 13608, "start": 136.08, "end": 147.08, "text": " And typically, most of these algorithms work by applying some kind of heuristics or models", "tokens": [50364, 400, 5850, 11, 881, 295, 613, 14642, 589, 538, 9275, 512, 733, 295, 415, 374, 6006, 420, 5245, 50914], "temperature": 0.0, "avg_logprob": -0.2449979938444544, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.16804563999176025}, {"id": 32, "seek": 13608, "start": 147.08, "end": 153.8, "text": " or geometric relationships in order to achieve the final visual results.", "tokens": [50914, 420, 33246, 6159, 294, 1668, 281, 4584, 264, 2572, 5056, 3542, 13, 51250], "temperature": 0.0, "avg_logprob": -0.2449979938444544, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.16804563999176025}, {"id": 33, "seek": 13608, "start": 153.8, "end": 163.44, "text": " And for example, we all know that post-direct algorithms work with physical models to unfold", "tokens": [51250, 400, 337, 1365, 11, 321, 439, 458, 300, 2183, 12, 44868, 14642, 589, 365, 4001, 5245, 281, 17980, 51732], "temperature": 0.0, "avg_logprob": -0.2449979938444544, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.16804563999176025}, {"id": 34, "seek": 13608, "start": 163.44, "end": 165.56, "text": " the graphs.", "tokens": [51732, 264, 24877, 13, 51838], "temperature": 0.0, "avg_logprob": -0.2449979938444544, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.16804563999176025}, {"id": 35, "seek": 16556, "start": 166.56, "end": 176.48, "text": " Yeah, post-directed algorithms are those that probably have become more popular over time.", "tokens": [50414, 865, 11, 2183, 12, 44868, 292, 14642, 366, 729, 300, 1391, 362, 1813, 544, 3743, 670, 565, 13, 50910], "temperature": 0.0, "avg_logprob": -0.2019181251525879, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.030365318059921265}, {"id": 36, "seek": 16556, "start": 176.48, "end": 179.04, "text": " This has happened for many reasons.", "tokens": [50910, 639, 575, 2011, 337, 867, 4112, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2019181251525879, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.030365318059921265}, {"id": 37, "seek": 16556, "start": 179.04, "end": 186.2, "text": " They are very easy to use, easy to implement, can be used with all types of graphs and can", "tokens": [51038, 814, 366, 588, 1858, 281, 764, 11, 1858, 281, 4445, 11, 393, 312, 1143, 365, 439, 3467, 295, 24877, 293, 393, 51396], "temperature": 0.0, "avg_logprob": -0.2019181251525879, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.030365318059921265}, {"id": 38, "seek": 16556, "start": 186.2, "end": 189.48000000000002, "text": " be parallelized and many other reasons.", "tokens": [51396, 312, 8952, 1602, 293, 867, 661, 4112, 13, 51560], "temperature": 0.0, "avg_logprob": -0.2019181251525879, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.030365318059921265}, {"id": 39, "seek": 18948, "start": 189.48, "end": 196.72, "text": " But they present, for me, of course, a limit in terms of design control.", "tokens": [50364, 583, 436, 1974, 11, 337, 385, 11, 295, 1164, 11, 257, 4948, 294, 2115, 295, 1715, 1969, 13, 50726], "temperature": 0.0, "avg_logprob": -0.18215375871800665, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.04442407190799713}, {"id": 40, "seek": 18948, "start": 196.72, "end": 207.04, "text": " If we run our first directed algorithms, it may be easy to introduce a steady conference", "tokens": [50726, 759, 321, 1190, 527, 700, 12898, 14642, 11, 309, 815, 312, 1858, 281, 5366, 257, 13211, 7586, 51242], "temperature": 0.0, "avg_logprob": -0.18215375871800665, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.04442407190799713}, {"id": 41, "seek": 18948, "start": 207.04, "end": 209.6, "text": " over the layout.", "tokens": [51242, 670, 264, 13333, 13, 51370], "temperature": 0.0, "avg_logprob": -0.18215375871800665, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.04442407190799713}, {"id": 42, "seek": 18948, "start": 209.6, "end": 215.12, "text": " So we can only be sure that the graph will converge in order to find a balance between", "tokens": [51370, 407, 321, 393, 787, 312, 988, 300, 264, 4295, 486, 41881, 294, 1668, 281, 915, 257, 4772, 1296, 51646], "temperature": 0.0, "avg_logprob": -0.18215375871800665, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.04442407190799713}, {"id": 43, "seek": 21512, "start": 215.12, "end": 222.20000000000002, "text": " the forces, of course, but we can control which are the graphic features, the visual", "tokens": [50364, 264, 5874, 11, 295, 1164, 11, 457, 321, 393, 1969, 597, 366, 264, 14089, 4122, 11, 264, 5056, 50718], "temperature": 0.0, "avg_logprob": -0.21846736686817114, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.014212768524885178}, {"id": 44, "seek": 21512, "start": 222.20000000000002, "end": 226.04, "text": " features that will be improved of design.", "tokens": [50718, 4122, 300, 486, 312, 9689, 295, 1715, 13, 50910], "temperature": 0.0, "avg_logprob": -0.21846736686817114, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.014212768524885178}, {"id": 45, "seek": 21512, "start": 226.04, "end": 232.48000000000002, "text": " And to do this, in recent years, the growing use of artificial intelligence models to solve", "tokens": [50910, 400, 281, 360, 341, 11, 294, 5162, 924, 11, 264, 4194, 764, 295, 11677, 7599, 5245, 281, 5039, 51232], "temperature": 0.0, "avg_logprob": -0.21846736686817114, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.014212768524885178}, {"id": 46, "seek": 21512, "start": 232.48000000000002, "end": 241.64000000000001, "text": " problems has led to the creation of a new family of graphicization algorithms.", "tokens": [51232, 2740, 575, 4684, 281, 264, 8016, 295, 257, 777, 1605, 295, 14089, 2144, 14642, 13, 51690], "temperature": 0.0, "avg_logprob": -0.21846736686817114, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.014212768524885178}, {"id": 47, "seek": 24164, "start": 241.95999999999998, "end": 247.6, "text": " These algorithms work by exploiting the concept of cost function.", "tokens": [50380, 1981, 14642, 589, 538, 12382, 1748, 264, 3410, 295, 2063, 2445, 13, 50662], "temperature": 0.0, "avg_logprob": -0.1658368608844814, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.016483670100569725}, {"id": 48, "seek": 24164, "start": 247.6, "end": 256.68, "text": " And so cost function is basically a mathematical function that allows us to measure how far", "tokens": [50662, 400, 370, 2063, 2445, 307, 1936, 257, 18894, 2445, 300, 4045, 505, 281, 3481, 577, 1400, 51116], "temperature": 0.0, "avg_logprob": -0.1658368608844814, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.016483670100569725}, {"id": 49, "seek": 24164, "start": 256.68, "end": 260.84, "text": " a given system deviates from an ideal state.", "tokens": [51116, 257, 2212, 1185, 31219, 1024, 490, 364, 7157, 1785, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1658368608844814, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.016483670100569725}, {"id": 50, "seek": 24164, "start": 260.84, "end": 268.32, "text": " So if we have a graph composed of blue nodes, any cost function related to that graph will", "tokens": [51324, 407, 498, 321, 362, 257, 4295, 18204, 295, 3344, 13891, 11, 604, 2063, 2445, 4077, 281, 300, 4295, 486, 51698], "temperature": 0.0, "avg_logprob": -0.1658368608844814, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.016483670100569725}, {"id": 51, "seek": 26832, "start": 268.32, "end": 276.84, "text": " take the nodes, axes, coordinates on the screen as input and return a number as a value.", "tokens": [50364, 747, 264, 13891, 11, 35387, 11, 21056, 322, 264, 2568, 382, 4846, 293, 2736, 257, 1230, 382, 257, 2158, 13, 50790], "temperature": 0.0, "avg_logprob": -0.21920299530029297, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.06831277161836624}, {"id": 52, "seek": 26832, "start": 276.84, "end": 284.76, "text": " That number indicates us how much the graph is respecting the graphic feature encoded", "tokens": [50790, 663, 1230, 16203, 505, 577, 709, 264, 4295, 307, 41968, 264, 14089, 4111, 2058, 12340, 51186], "temperature": 0.0, "avg_logprob": -0.21920299530029297, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.06831277161836624}, {"id": 53, "seek": 26832, "start": 284.76, "end": 287.64, "text": " in that cost function.", "tokens": [51186, 294, 300, 2063, 2445, 13, 51330], "temperature": 0.0, "avg_logprob": -0.21920299530029297, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.06831277161836624}, {"id": 54, "seek": 26832, "start": 287.64, "end": 297.24, "text": " And indeed, a cost function can be fully established and formulated by the programmer, the developer.", "tokens": [51330, 400, 6451, 11, 257, 2063, 2445, 393, 312, 4498, 7545, 293, 48936, 538, 264, 32116, 11, 264, 10754, 13, 51810], "temperature": 0.0, "avg_logprob": -0.21920299530029297, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.06831277161836624}, {"id": 55, "seek": 29724, "start": 297.24, "end": 307.08, "text": " And theoretically, we can encode any graphic feature in a cost function.", "tokens": [50364, 400, 29400, 11, 321, 393, 2058, 1429, 604, 14089, 4111, 294, 257, 2063, 2445, 13, 50856], "temperature": 0.0, "avg_logprob": -0.21428363553939328, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009500293992459774}, {"id": 56, "seek": 29724, "start": 307.08, "end": 314.96000000000004, "text": " So the question is, how can we formulate cost functions related to graphs?", "tokens": [50856, 407, 264, 1168, 307, 11, 577, 393, 321, 47881, 2063, 6828, 4077, 281, 24877, 30, 51250], "temperature": 0.0, "avg_logprob": -0.21428363553939328, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009500293992459774}, {"id": 57, "seek": 29724, "start": 314.96000000000004, "end": 322.12, "text": " And to answer these questions, we have to ask ourselves which are the graphic features", "tokens": [51250, 400, 281, 1867, 613, 1651, 11, 321, 362, 281, 1029, 4175, 597, 366, 264, 14089, 4122, 51608], "temperature": 0.0, "avg_logprob": -0.21428363553939328, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009500293992459774}, {"id": 58, "seek": 29724, "start": 322.12, "end": 324.32, "text": " that we want to improve.", "tokens": [51608, 300, 321, 528, 281, 3470, 13, 51718], "temperature": 0.0, "avg_logprob": -0.21428363553939328, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009500293992459774}, {"id": 59, "seek": 32432, "start": 324.68, "end": 329.59999999999997, "text": " One way to do this is to observe a bad layout.", "tokens": [50382, 1485, 636, 281, 360, 341, 307, 281, 11441, 257, 1578, 13333, 13, 50628], "temperature": 0.0, "avg_logprob": -0.16608871825753826, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.02227882854640484}, {"id": 60, "seek": 32432, "start": 329.59999999999997, "end": 338.15999999999997, "text": " So if we look at the image, we can immediately notice that the topological distances, for", "tokens": [50628, 407, 498, 321, 574, 412, 264, 3256, 11, 321, 393, 4258, 3449, 300, 264, 1192, 4383, 22182, 11, 337, 51056], "temperature": 0.0, "avg_logprob": -0.16608871825753826, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.02227882854640484}, {"id": 61, "seek": 32432, "start": 338.15999999999997, "end": 340.96, "text": " example, are not respected.", "tokens": [51056, 1365, 11, 366, 406, 20020, 13, 51196], "temperature": 0.0, "avg_logprob": -0.16608871825753826, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.02227882854640484}, {"id": 62, "seek": 32432, "start": 340.96, "end": 348.96, "text": " So we can find pairs of nodes with two ops that are seven times more distant than pairs", "tokens": [51196, 407, 321, 393, 915, 15494, 295, 13891, 365, 732, 44663, 300, 366, 3407, 1413, 544, 17275, 813, 15494, 51596], "temperature": 0.0, "avg_logprob": -0.16608871825753826, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.02227882854640484}, {"id": 63, "seek": 32432, "start": 348.96, "end": 350.92, "text": " of nodes with one hop.", "tokens": [51596, 295, 13891, 365, 472, 3818, 13, 51694], "temperature": 0.0, "avg_logprob": -0.16608871825753826, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.02227882854640484}, {"id": 64, "seek": 35092, "start": 350.92, "end": 358.44, "text": " This is certainly a negative aspect of this design in terms of using of space.", "tokens": [50364, 639, 307, 3297, 257, 3671, 4171, 295, 341, 1715, 294, 2115, 295, 1228, 295, 1901, 13, 50740], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 65, "seek": 35092, "start": 358.44, "end": 365.76, "text": " In addition, if we look at the topological node, we can see that the angles are not uniform", "tokens": [50740, 682, 4500, 11, 498, 321, 574, 412, 264, 1192, 4383, 9984, 11, 321, 393, 536, 300, 264, 14708, 366, 406, 9452, 51106], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 66, "seek": 35092, "start": 365.76, "end": 367.08000000000004, "text": " on the graphs.", "tokens": [51106, 322, 264, 24877, 13, 51172], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 67, "seek": 35092, "start": 367.08000000000004, "end": 369.44, "text": " The structure is not homogeneous.", "tokens": [51172, 440, 3877, 307, 406, 42632, 13, 51290], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 68, "seek": 35092, "start": 369.44, "end": 372.96000000000004, "text": " Same as for APD and distances.", "tokens": [51290, 10635, 382, 337, 5372, 35, 293, 22182, 13, 51466], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 69, "seek": 35092, "start": 372.96000000000004, "end": 379.44, "text": " And finally, there are also conclusions of nodes known to be the element that most compromise", "tokens": [51466, 400, 2721, 11, 456, 366, 611, 22865, 295, 13891, 2570, 281, 312, 264, 4478, 300, 881, 18577, 51790], "temperature": 0.0, "avg_logprob": -0.20455032171205031, "compression_ratio": 1.528888888888889, "no_speech_prob": 0.017839981243014336}, {"id": 70, "seek": 37944, "start": 379.48, "end": 382.32, "text": " the quality of a layout.", "tokens": [50366, 264, 3125, 295, 257, 13333, 13, 50508], "temperature": 0.0, "avg_logprob": -0.19916637241840363, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.006913204211741686}, {"id": 71, "seek": 37944, "start": 382.32, "end": 393.2, "text": " So all these observations can be encoded in a cost function.", "tokens": [50508, 407, 439, 613, 18163, 393, 312, 2058, 12340, 294, 257, 2063, 2445, 13, 51052], "temperature": 0.0, "avg_logprob": -0.19916637241840363, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.006913204211741686}, {"id": 72, "seek": 37944, "start": 393.2, "end": 395.72, "text": " So let's see an example now.", "tokens": [51052, 407, 718, 311, 536, 364, 1365, 586, 13, 51178], "temperature": 0.0, "avg_logprob": -0.19916637241840363, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.006913204211741686}, {"id": 73, "seek": 37944, "start": 395.72, "end": 400.96, "text": " For time reasons, we will talk only about a single cost function.", "tokens": [51178, 1171, 565, 4112, 11, 321, 486, 751, 787, 466, 257, 2167, 2063, 2445, 13, 51440], "temperature": 0.0, "avg_logprob": -0.19916637241840363, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.006913204211741686}, {"id": 74, "seek": 37944, "start": 400.96, "end": 407.28, "text": " Specifically, we will talk about the topological distances.", "tokens": [51440, 26058, 11, 321, 486, 751, 466, 264, 1192, 4383, 22182, 13, 51756], "temperature": 0.0, "avg_logprob": -0.19916637241840363, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.006913204211741686}, {"id": 75, "seek": 40728, "start": 407.28, "end": 416.59999999999997, "text": " So if we look at the tree in the image, it makes sense to think that the Euclidean distances", "tokens": [50364, 407, 498, 321, 574, 412, 264, 4230, 294, 264, 3256, 11, 309, 1669, 2020, 281, 519, 300, 264, 462, 1311, 31264, 282, 22182, 50830], "temperature": 0.0, "avg_logprob": -0.19563246426517017, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.016291823238134384}, {"id": 76, "seek": 40728, "start": 416.59999999999997, "end": 425.44, "text": " between the pairs of nodes should be somehow proportional to the topological distances,", "tokens": [50830, 1296, 264, 15494, 295, 13891, 820, 312, 6063, 24969, 281, 264, 1192, 4383, 22182, 11, 51272], "temperature": 0.0, "avg_logprob": -0.19563246426517017, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.016291823238134384}, {"id": 77, "seek": 40728, "start": 425.44, "end": 427.76, "text": " the length of the shortest path.", "tokens": [51272, 264, 4641, 295, 264, 31875, 3100, 13, 51388], "temperature": 0.0, "avg_logprob": -0.19563246426517017, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.016291823238134384}, {"id": 78, "seek": 40728, "start": 427.76, "end": 434.03999999999996, "text": " This is valid not only for three graphs, but in general for all types of graphs.", "tokens": [51388, 639, 307, 7363, 406, 787, 337, 1045, 24877, 11, 457, 294, 2674, 337, 439, 3467, 295, 24877, 13, 51702], "temperature": 0.0, "avg_logprob": -0.19563246426517017, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.016291823238134384}, {"id": 79, "seek": 43404, "start": 434.04, "end": 445.16, "text": " So our goal is to formulate a cost function that gives us a measure of how much the current", "tokens": [50364, 407, 527, 3387, 307, 281, 47881, 257, 2063, 2445, 300, 2709, 505, 257, 3481, 295, 577, 709, 264, 2190, 50920], "temperature": 0.0, "avg_logprob": -0.12456178665161133, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.008861622773110867}, {"id": 80, "seek": 43404, "start": 445.16, "end": 451.88, "text": " APD and distances between pairs of nodes are similar to the topological distances.", "tokens": [50920, 5372, 35, 293, 22182, 1296, 15494, 295, 13891, 366, 2531, 281, 264, 1192, 4383, 22182, 13, 51256], "temperature": 0.0, "avg_logprob": -0.12456178665161133, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.008861622773110867}, {"id": 81, "seek": 43404, "start": 451.88, "end": 458.56, "text": " And as in any artificial intelligence problem, we have to follow a data-driven approach.", "tokens": [51256, 400, 382, 294, 604, 11677, 7599, 1154, 11, 321, 362, 281, 1524, 257, 1412, 12, 25456, 3109, 13, 51590], "temperature": 0.0, "avg_logprob": -0.12456178665161133, "compression_ratio": 1.4371584699453552, "no_speech_prob": 0.008861622773110867}, {"id": 82, "seek": 45856, "start": 458.56, "end": 465.56, "text": " So we need a source of data that indicates us which is the ideal state of the system", "tokens": [50364, 407, 321, 643, 257, 4009, 295, 1412, 300, 16203, 505, 597, 307, 264, 7157, 1785, 295, 264, 1185, 50714], "temperature": 0.0, "avg_logprob": -0.1704650251832727, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.05276845768094063}, {"id": 83, "seek": 45856, "start": 465.56, "end": 469.24, "text": " in order to train our model according to it.", "tokens": [50714, 294, 1668, 281, 3847, 527, 2316, 4650, 281, 309, 13, 50898], "temperature": 0.0, "avg_logprob": -0.1704650251832727, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.05276845768094063}, {"id": 84, "seek": 45856, "start": 469.24, "end": 477.72, "text": " And in this case, our data source is metrics, is the topological distances metrics.", "tokens": [50898, 400, 294, 341, 1389, 11, 527, 1412, 4009, 307, 16367, 11, 307, 264, 1192, 4383, 22182, 16367, 13, 51322], "temperature": 0.0, "avg_logprob": -0.1704650251832727, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.05276845768094063}, {"id": 85, "seek": 45856, "start": 477.72, "end": 484.32, "text": " So we can know which is the length of the shortest path between pairs of nodes.", "tokens": [51322, 407, 321, 393, 458, 597, 307, 264, 4641, 295, 264, 31875, 3100, 1296, 15494, 295, 13891, 13, 51652], "temperature": 0.0, "avg_logprob": -0.1704650251832727, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.05276845768094063}, {"id": 86, "seek": 48432, "start": 484.32, "end": 493.76, "text": " And with this data source, we can compute for each pair of nodes INJ the quadratic deviations", "tokens": [50364, 400, 365, 341, 1412, 4009, 11, 321, 393, 14722, 337, 1184, 6119, 295, 13891, 6892, 41, 264, 37262, 31219, 763, 50836], "temperature": 0.0, "avg_logprob": -0.1719499274865905, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.014938491396605968}, {"id": 87, "seek": 48432, "start": 493.76, "end": 502.6, "text": " between the current Euclidean distances and the real topological distances of INJ nodes.", "tokens": [50836, 1296, 264, 2190, 462, 1311, 31264, 282, 22182, 293, 264, 957, 1192, 4383, 22182, 295, 6892, 41, 13891, 13, 51278], "temperature": 0.0, "avg_logprob": -0.1719499274865905, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.014938491396605968}, {"id": 88, "seek": 48432, "start": 502.6, "end": 511.03999999999996, "text": " And finally, we can sum all the contributions of all of pairs, sorry, and build a single", "tokens": [51278, 400, 2721, 11, 321, 393, 2408, 439, 264, 15725, 295, 439, 295, 15494, 11, 2597, 11, 293, 1322, 257, 2167, 51700], "temperature": 0.0, "avg_logprob": -0.1719499274865905, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.014938491396605968}, {"id": 89, "seek": 51104, "start": 511.04, "end": 518.9200000000001, "text": " cost function in two variables that give us a measure of how much the graph is respecting", "tokens": [50364, 2063, 2445, 294, 732, 9102, 300, 976, 505, 257, 3481, 295, 577, 709, 264, 4295, 307, 41968, 50758], "temperature": 0.0, "avg_logprob": -0.27044287880698403, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.01935378648340702}, {"id": 90, "seek": 51104, "start": 518.9200000000001, "end": 522.08, "text": " the topological distances.", "tokens": [50758, 264, 1192, 4383, 22182, 13, 50916], "temperature": 0.0, "avg_logprob": -0.27044287880698403, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.01935378648340702}, {"id": 91, "seek": 51104, "start": 522.08, "end": 530.4, "text": " So once that the cost function has been formulated, we can optimize it by running an optimization", "tokens": [50916, 407, 1564, 300, 264, 2063, 2445, 575, 668, 48936, 11, 321, 393, 19719, 309, 538, 2614, 364, 19618, 51332], "temperature": 0.0, "avg_logprob": -0.27044287880698403, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.01935378648340702}, {"id": 92, "seek": 51104, "start": 530.4, "end": 531.84, "text": " algorithm.", "tokens": [51332, 9284, 13, 51404], "temperature": 0.0, "avg_logprob": -0.27044287880698403, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.01935378648340702}, {"id": 93, "seek": 51104, "start": 531.84, "end": 540.9200000000001, "text": " So we can run Vanilla-Garand-Dichent, Stochastic-Garand-Dichent, Momentum, Adam, and many other algorithms.", "tokens": [51404, 407, 321, 393, 1190, 8979, 5291, 12, 38, 289, 474, 12, 35, 480, 317, 11, 745, 8997, 2750, 12, 38, 289, 474, 12, 35, 480, 317, 11, 19093, 449, 11, 7938, 11, 293, 867, 661, 14642, 13, 51858], "temperature": 0.0, "avg_logprob": -0.27044287880698403, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.01935378648340702}, {"id": 94, "seek": 54092, "start": 541.4, "end": 547.4, "text": " We know that the function variables, the cost function variables consist of the node", "tokens": [50388, 492, 458, 300, 264, 2445, 9102, 11, 264, 2063, 2445, 9102, 4603, 295, 264, 9984, 50688], "temperature": 0.0, "avg_logprob": -0.18843432130484744, "compression_ratio": 1.6971830985915493, "no_speech_prob": 0.040925584733486176}, {"id": 95, "seek": 54092, "start": 547.4, "end": 549.8399999999999, "text": " axis coordinates on the screen.", "tokens": [50688, 10298, 21056, 322, 264, 2568, 13, 50810], "temperature": 0.0, "avg_logprob": -0.18843432130484744, "compression_ratio": 1.6971830985915493, "no_speech_prob": 0.040925584733486176}, {"id": 96, "seek": 54092, "start": 549.8399999999999, "end": 559.4799999999999, "text": " So if we optimize that cost function, we are moving the graph in order to find a minimum", "tokens": [50810, 407, 498, 321, 19719, 300, 2063, 2445, 11, 321, 366, 2684, 264, 4295, 294, 1668, 281, 915, 257, 7285, 51292], "temperature": 0.0, "avg_logprob": -0.18843432130484744, "compression_ratio": 1.6971830985915493, "no_speech_prob": 0.040925584733486176}, {"id": 97, "seek": 54092, "start": 559.4799999999999, "end": 562.16, "text": " or a maximum of that cost function.", "tokens": [51292, 420, 257, 6674, 295, 300, 2063, 2445, 13, 51426], "temperature": 0.0, "avg_logprob": -0.18843432130484744, "compression_ratio": 1.6971830985915493, "no_speech_prob": 0.040925584733486176}, {"id": 98, "seek": 56216, "start": 562.16, "end": 568.56, "text": " So the graph will move in order to respect topological distances.", "tokens": [50364, 407, 264, 4295, 486, 1286, 294, 1668, 281, 3104, 1192, 4383, 22182, 13, 50684], "temperature": 0.0, "avg_logprob": -0.26234932740529376, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.0532829649746418}, {"id": 99, "seek": 56216, "start": 568.56, "end": 579.12, "text": " And so we have linked the papers of these official intelligence methodologies.", "tokens": [50684, 400, 370, 321, 362, 9408, 264, 10577, 295, 613, 4783, 7599, 3170, 6204, 13, 51212], "temperature": 0.0, "avg_logprob": -0.26234932740529376, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.0532829649746418}, {"id": 100, "seek": 56216, "start": 579.12, "end": 591.36, "text": " And today the authors have provided a tool to show these algorithms.", "tokens": [51212, 400, 965, 264, 16552, 362, 5649, 257, 2290, 281, 855, 613, 14642, 13, 51824], "temperature": 0.0, "avg_logprob": -0.26234932740529376, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.0532829649746418}, {"id": 101, "seek": 59136, "start": 591.36, "end": 596.76, "text": " So we can change, for example, types of graphs.", "tokens": [50364, 407, 321, 393, 1319, 11, 337, 1365, 11, 3467, 295, 24877, 13, 50634], "temperature": 0.0, "avg_logprob": -0.316555118560791, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.014048821292817593}, {"id": 102, "seek": 59136, "start": 596.76, "end": 604.16, "text": " And we can see, in this case, we have the spreads, loss function, cost functions.", "tokens": [50634, 400, 321, 393, 536, 11, 294, 341, 1389, 11, 321, 362, 264, 25728, 11, 4470, 2445, 11, 2063, 6828, 13, 51004], "temperature": 0.0, "avg_logprob": -0.316555118560791, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.014048821292817593}, {"id": 103, "seek": 59136, "start": 604.16, "end": 612.36, "text": " And we can combine many cost functions by applying a linear combination of all these", "tokens": [51004, 400, 321, 393, 10432, 867, 2063, 6828, 538, 9275, 257, 8213, 6562, 295, 439, 613, 51414], "temperature": 0.0, "avg_logprob": -0.316555118560791, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.014048821292817593}, {"id": 104, "seek": 59136, "start": 612.36, "end": 614.36, "text": " cost functions.", "tokens": [51414, 2063, 6828, 13, 51514], "temperature": 0.0, "avg_logprob": -0.316555118560791, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.014048821292817593}, {"id": 105, "seek": 61436, "start": 615.04, "end": 623.04, "text": " Well, in these introductions, I have talked about the methodologies.", "tokens": [50398, 1042, 11, 294, 613, 48032, 11, 286, 362, 2825, 466, 264, 3170, 6204, 13, 50798], "temperature": 0.0, "avg_logprob": -0.29812434803355825, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.05336973816156387}, {"id": 106, "seek": 61436, "start": 623.04, "end": 632.84, "text": " But our goal today here is to present contributions in 10 or 13 months.", "tokens": [50798, 583, 527, 3387, 965, 510, 307, 281, 1974, 15725, 294, 1266, 420, 3705, 2493, 13, 51288], "temperature": 0.0, "avg_logprob": -0.29812434803355825, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.05336973816156387}, {"id": 107, "seek": 61436, "start": 632.84, "end": 640.32, "text": " So I let the world to Simone, who will talk about our contributions in our web application.", "tokens": [51288, 407, 286, 718, 264, 1002, 281, 41652, 11, 567, 486, 751, 466, 527, 15725, 294, 527, 3670, 3861, 13, 51662], "temperature": 0.0, "avg_logprob": -0.29812434803355825, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.05336973816156387}, {"id": 108, "seek": 64436, "start": 644.36, "end": 657.52, "text": " Hi.", "tokens": [50364, 2421, 13, 51022], "temperature": 0.0, "avg_logprob": -0.2507977104187012, "compression_ratio": 1.3472222222222223, "no_speech_prob": 0.04098349064588547}, {"id": 109, "seek": 64436, "start": 657.52, "end": 665.12, "text": " When you design a layout, it must be analyzed on the basis of two terms.", "tokens": [51022, 1133, 291, 1715, 257, 13333, 11, 309, 1633, 312, 28181, 322, 264, 5143, 295, 732, 2115, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2507977104187012, "compression_ratio": 1.3472222222222223, "no_speech_prob": 0.04098349064588547}, {"id": 110, "seek": 64436, "start": 665.12, "end": 666.44, "text": " Effectiveness and efficiency.", "tokens": [51402, 17764, 8477, 293, 10493, 13, 51468], "temperature": 0.0, "avg_logprob": -0.2507977104187012, "compression_ratio": 1.3472222222222223, "no_speech_prob": 0.04098349064588547}, {"id": 111, "seek": 64436, "start": 666.44, "end": 673.88, "text": " The effectiveness covered by Tom Maso is the ability of a layout to highlight important", "tokens": [51468, 440, 21208, 5343, 538, 5041, 5224, 78, 307, 264, 3485, 295, 257, 13333, 281, 5078, 1021, 51840], "temperature": 0.0, "avg_logprob": -0.2507977104187012, "compression_ratio": 1.3472222222222223, "no_speech_prob": 0.04098349064588547}, {"id": 112, "seek": 67388, "start": 673.88, "end": 677.8, "text": " structure in the graph and ensuring that they are understanding.", "tokens": [50364, 3877, 294, 264, 4295, 293, 16882, 300, 436, 366, 3701, 13, 50560], "temperature": 0.0, "avg_logprob": -0.310629906592431, "compression_ratio": 1.5043103448275863, "no_speech_prob": 0.02107297070324421}, {"id": 113, "seek": 67388, "start": 677.8, "end": 686.64, "text": " Efficiency, which I will talk about, aims to visualize as many elements as possible while", "tokens": [50560, 462, 49086, 11, 597, 286, 486, 751, 466, 11, 24683, 281, 23273, 382, 867, 4959, 382, 1944, 1339, 51002], "temperature": 0.0, "avg_logprob": -0.310629906592431, "compression_ratio": 1.5043103448275863, "no_speech_prob": 0.02107297070324421}, {"id": 114, "seek": 67388, "start": 686.64, "end": 689.32, "text": " granting interactivity.", "tokens": [51002, 50204, 4648, 4253, 13, 51136], "temperature": 0.0, "avg_logprob": -0.310629906592431, "compression_ratio": 1.5043103448275863, "no_speech_prob": 0.02107297070324421}, {"id": 115, "seek": 67388, "start": 689.32, "end": 695.56, "text": " And this is very important nowadays where everything is characterized by good data.", "tokens": [51136, 400, 341, 307, 588, 1021, 13434, 689, 1203, 307, 29361, 538, 665, 1412, 13, 51448], "temperature": 0.0, "avg_logprob": -0.310629906592431, "compression_ratio": 1.5043103448275863, "no_speech_prob": 0.02107297070324421}, {"id": 116, "seek": 67388, "start": 695.56, "end": 703.32, "text": " Here we can see the results obtained with a glassy solution explained by Tom Maso with", "tokens": [51448, 1692, 321, 393, 536, 264, 3542, 14879, 365, 257, 4276, 88, 3827, 8825, 538, 5041, 5224, 78, 365, 51836], "temperature": 0.0, "avg_logprob": -0.310629906592431, "compression_ratio": 1.5043103448275863, "no_speech_prob": 0.02107297070324421}, {"id": 117, "seek": 70332, "start": 703.32, "end": 710.0400000000001, "text": " just only the stress function, not the wall of the other 10, but just only with the stress", "tokens": [50364, 445, 787, 264, 4244, 2445, 11, 406, 264, 2929, 295, 264, 661, 1266, 11, 457, 445, 787, 365, 264, 4244, 50700], "temperature": 0.0, "avg_logprob": -0.20146510336134169, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.02747512422502041}, {"id": 118, "seek": 70332, "start": 710.0400000000001, "end": 711.0400000000001, "text": " one.", "tokens": [50700, 472, 13, 50750], "temperature": 0.0, "avg_logprob": -0.20146510336134169, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.02747512422502041}, {"id": 119, "seek": 70332, "start": 711.0400000000001, "end": 716.6, "text": " And as we can see, with just less than 3,000 volts, we can't guarantee the interactivity", "tokens": [50750, 400, 382, 321, 393, 536, 11, 365, 445, 1570, 813, 805, 11, 1360, 22322, 11, 321, 393, 380, 10815, 264, 4648, 4253, 51028], "temperature": 0.0, "avg_logprob": -0.20146510336134169, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.02747512422502041}, {"id": 120, "seek": 70332, "start": 716.6, "end": 717.6, "text": " line.", "tokens": [51028, 1622, 13, 51078], "temperature": 0.0, "avg_logprob": -0.20146510336134169, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.02747512422502041}, {"id": 121, "seek": 70332, "start": 717.6, "end": 725.88, "text": " So because the layout can perform at least 15 iterations per second anymore.", "tokens": [51078, 407, 570, 264, 13333, 393, 2042, 412, 1935, 2119, 36540, 680, 1150, 3602, 13, 51492], "temperature": 0.0, "avg_logprob": -0.20146510336134169, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.02747512422502041}, {"id": 122, "seek": 72588, "start": 725.88, "end": 734.88, "text": " And I think also that in our web application, this is a task CPU intensive and make it unusable", "tokens": [50364, 400, 286, 519, 611, 300, 294, 527, 3670, 3861, 11, 341, 307, 257, 5633, 13199, 18957, 293, 652, 309, 10054, 712, 50814], "temperature": 0.0, "avg_logprob": -0.30113383306973224, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.392353892326355}, {"id": 123, "seek": 72588, "start": 734.88, "end": 738.32, "text": " for the entire time.", "tokens": [50814, 337, 264, 2302, 565, 13, 50986], "temperature": 0.0, "avg_logprob": -0.30113383306973224, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.392353892326355}, {"id": 124, "seek": 72588, "start": 738.32, "end": 745.32, "text": " Our target for this project is to allow the visualization of as many nodes and edges as", "tokens": [50986, 2621, 3779, 337, 341, 1716, 307, 281, 2089, 264, 25801, 295, 382, 867, 13891, 293, 8819, 382, 51336], "temperature": 0.0, "avg_logprob": -0.30113383306973224, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.392353892326355}, {"id": 125, "seek": 72588, "start": 745.32, "end": 752.92, "text": " possible through the CPU and the parallel programming, so parallel programming on CPUs.", "tokens": [51336, 1944, 807, 264, 13199, 293, 264, 8952, 9410, 11, 370, 8952, 9410, 322, 13199, 82, 13, 51716], "temperature": 0.0, "avg_logprob": -0.30113383306973224, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.392353892326355}, {"id": 126, "seek": 75292, "start": 752.92, "end": 757.1999999999999, "text": " In our web application.", "tokens": [50364, 682, 527, 3670, 3861, 13, 50578], "temperature": 0.0, "avg_logprob": -0.25469247032614317, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.13948377966880798}, {"id": 127, "seek": 75292, "start": 757.1999999999999, "end": 760.4, "text": " Let's see together how the algorithm is composed.", "tokens": [50578, 961, 311, 536, 1214, 577, 264, 9284, 307, 18204, 13, 50738], "temperature": 0.0, "avg_logprob": -0.25469247032614317, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.13948377966880798}, {"id": 128, "seek": 75292, "start": 760.4, "end": 764.0, "text": " So we are using just only the stress function.", "tokens": [50738, 407, 321, 366, 1228, 445, 787, 264, 4244, 2445, 13, 50918], "temperature": 0.0, "avg_logprob": -0.25469247032614317, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.13948377966880798}, {"id": 129, "seek": 75292, "start": 764.0, "end": 769.4, "text": " So the first thing to do is create the topological distance mathematics.", "tokens": [50918, 407, 264, 700, 551, 281, 360, 307, 1884, 264, 1192, 4383, 4560, 18666, 13, 51188], "temperature": 0.0, "avg_logprob": -0.25469247032614317, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.13948377966880798}, {"id": 130, "seek": 75292, "start": 769.4, "end": 776.8, "text": " Then until we achieve the goal, for every duration, we are calculating the gradient and", "tokens": [51188, 1396, 1826, 321, 4584, 264, 3387, 11, 337, 633, 16365, 11, 321, 366, 28258, 264, 16235, 293, 51558], "temperature": 0.0, "avg_logprob": -0.25469247032614317, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.13948377966880798}, {"id": 131, "seek": 77680, "start": 776.8, "end": 780.12, "text": " not positions.", "tokens": [50364, 406, 8432, 13, 50530], "temperature": 0.0, "avg_logprob": -0.34698687659369576, "compression_ratio": 1.6770186335403727, "no_speech_prob": 0.17007429897785187}, {"id": 132, "seek": 77680, "start": 780.12, "end": 784.04, "text": " Calculating the gradient, we traverse the topological distance mathematics.", "tokens": [50530, 3511, 2444, 990, 264, 16235, 11, 321, 45674, 264, 1192, 4383, 4560, 18666, 13, 50726], "temperature": 0.0, "avg_logprob": -0.34698687659369576, "compression_ratio": 1.6770186335403727, "no_speech_prob": 0.17007429897785187}, {"id": 133, "seek": 77680, "start": 784.04, "end": 793.12, "text": " For every pair of nodes, we calculate the partial derivates over the Euclidean and topological", "tokens": [50726, 1171, 633, 6119, 295, 13891, 11, 321, 8873, 264, 14641, 10151, 1024, 670, 264, 462, 1311, 31264, 282, 293, 1192, 4383, 51180], "temperature": 0.0, "avg_logprob": -0.34698687659369576, "compression_ratio": 1.6770186335403727, "no_speech_prob": 0.17007429897785187}, {"id": 134, "seek": 77680, "start": 793.12, "end": 794.12, "text": " distances.", "tokens": [51180, 22182, 13, 51230], "temperature": 0.0, "avg_logprob": -0.34698687659369576, "compression_ratio": 1.6770186335403727, "no_speech_prob": 0.17007429897785187}, {"id": 135, "seek": 77680, "start": 794.12, "end": 800.5999999999999, "text": " And in the end, we update the positions, the non-spositions, very simple.", "tokens": [51230, 400, 294, 264, 917, 11, 321, 5623, 264, 8432, 11, 264, 2107, 12, 4952, 329, 2451, 11, 588, 2199, 13, 51554], "temperature": 0.0, "avg_logprob": -0.34698687659369576, "compression_ratio": 1.6770186335403727, "no_speech_prob": 0.17007429897785187}, {"id": 136, "seek": 80060, "start": 800.6, "end": 807.8000000000001, "text": " But as can be seen, this step of every duration is a quality time.", "tokens": [50364, 583, 382, 393, 312, 1612, 11, 341, 1823, 295, 633, 16365, 307, 257, 3125, 565, 13, 50724], "temperature": 0.0, "avg_logprob": -0.29471468607584633, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.18636275827884674}, {"id": 137, "seek": 80060, "start": 807.8000000000001, "end": 811.9200000000001, "text": " So in every duration, you have to perform it.", "tokens": [50724, 407, 294, 633, 16365, 11, 291, 362, 281, 2042, 309, 13, 50930], "temperature": 0.0, "avg_logprob": -0.29471468607584633, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.18636275827884674}, {"id": 138, "seek": 80060, "start": 811.9200000000001, "end": 821.28, "text": " And the idea is to split this calculation of the gradient into two various threads.", "tokens": [50930, 400, 264, 1558, 307, 281, 7472, 341, 17108, 295, 264, 16235, 666, 732, 3683, 19314, 13, 51398], "temperature": 0.0, "avg_logprob": -0.29471468607584633, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.18636275827884674}, {"id": 139, "seek": 80060, "start": 821.28, "end": 830.0, "text": " When you, if you would like to create a solution and multi-times solution, you have to consider", "tokens": [51398, 1133, 291, 11, 498, 291, 576, 411, 281, 1884, 257, 3827, 293, 4825, 12, 83, 1532, 3827, 11, 291, 362, 281, 1949, 51834], "temperature": 0.0, "avg_logprob": -0.29471468607584633, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.18636275827884674}, {"id": 140, "seek": 83000, "start": 830.0, "end": 831.6, "text": " at least two aspects.", "tokens": [50364, 412, 1935, 732, 7270, 13, 50444], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 141, "seek": 83000, "start": 831.6, "end": 839.52, "text": " The memory you are sending every time to each thread and the load balancing across thread.", "tokens": [50444, 440, 4675, 291, 366, 7750, 633, 565, 281, 1184, 7207, 293, 264, 3677, 22495, 2108, 7207, 13, 50840], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 142, "seek": 83000, "start": 839.52, "end": 844.82, "text": " For memory, for optimizing memory, we saw that the topological distance mathematics is", "tokens": [50840, 1171, 4675, 11, 337, 40425, 4675, 11, 321, 1866, 300, 264, 1192, 4383, 4560, 18666, 307, 51105], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 143, "seek": 83000, "start": 844.82, "end": 845.82, "text": " mirrored.", "tokens": [51105, 3149, 340, 986, 13, 51155], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 144, "seek": 83000, "start": 845.82, "end": 848.76, "text": " So it's divided by two triangles, the upper and the lower.", "tokens": [51155, 407, 309, 311, 6666, 538, 732, 29896, 11, 264, 6597, 293, 264, 3126, 13, 51302], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 145, "seek": 83000, "start": 848.76, "end": 852.56, "text": " So we are using just only one triangle.", "tokens": [51302, 407, 321, 366, 1228, 445, 787, 472, 13369, 13, 51492], "temperature": 0.0, "avg_logprob": -0.2551302125182333, "compression_ratio": 1.5794871794871794, "no_speech_prob": 0.03792303055524826}, {"id": 146, "seek": 85256, "start": 852.56, "end": 863.76, "text": " For load balancing, we take the triangle and create an array and split it into threads.", "tokens": [50364, 1171, 3677, 22495, 11, 321, 747, 264, 13369, 293, 1884, 364, 10225, 293, 7472, 309, 666, 19314, 13, 50924], "temperature": 0.0, "avg_logprob": -0.26416540145874023, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.0214967243373394}, {"id": 147, "seek": 85256, "start": 863.76, "end": 868.76, "text": " Now every thread calculates a partial gradient.", "tokens": [50924, 823, 633, 7207, 4322, 1024, 257, 14641, 16235, 13, 51174], "temperature": 0.0, "avg_logprob": -0.26416540145874023, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.0214967243373394}, {"id": 148, "seek": 85256, "start": 868.76, "end": 877.0799999999999, "text": " And in the end, the final gradient is coming from the sum of all the partials.", "tokens": [51174, 400, 294, 264, 917, 11, 264, 2572, 16235, 307, 1348, 490, 264, 2408, 295, 439, 264, 14641, 82, 13, 51590], "temperature": 0.0, "avg_logprob": -0.26416540145874023, "compression_ratio": 1.4861111111111112, "no_speech_prob": 0.0214967243373394}, {"id": 149, "seek": 87708, "start": 877.08, "end": 884.0600000000001, "text": " Now the results over typescript and just only five threads.", "tokens": [50364, 823, 264, 3542, 670, 3467, 5944, 293, 445, 787, 1732, 19314, 13, 50713], "temperature": 0.0, "avg_logprob": -0.21228158271918862, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.02192024141550064}, {"id": 150, "seek": 87708, "start": 884.0600000000001, "end": 889.76, "text": " And the green line is the results over multi-times solution.", "tokens": [50713, 400, 264, 3092, 1622, 307, 264, 3542, 670, 4825, 12, 83, 1532, 3827, 13, 50998], "temperature": 0.0, "avg_logprob": -0.21228158271918862, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.02192024141550064}, {"id": 151, "seek": 87708, "start": 889.76, "end": 897.96, "text": " As can be seen, it's very close to if the layout was linear time.", "tokens": [50998, 1018, 393, 312, 1612, 11, 309, 311, 588, 1998, 281, 498, 264, 13333, 390, 8213, 565, 13, 51408], "temperature": 0.0, "avg_logprob": -0.21228158271918862, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.02192024141550064}, {"id": 152, "seek": 87708, "start": 897.96, "end": 904.36, "text": " So this line representing that.", "tokens": [51408, 407, 341, 1622, 13460, 300, 13, 51728], "temperature": 0.0, "avg_logprob": -0.21228158271918862, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.02192024141550064}, {"id": 153, "seek": 90436, "start": 904.36, "end": 913.76, "text": " And let's see together the speed up of the solution.", "tokens": [50364, 400, 718, 311, 536, 1214, 264, 3073, 493, 295, 264, 3827, 13, 50834], "temperature": 0.0, "avg_logprob": -0.23098712497287327, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.029749102890491486}, {"id": 154, "seek": 90436, "start": 913.76, "end": 920.96, "text": " Considering the graph with 5,000 nodes and more or less 10,000 edges.", "tokens": [50834, 33854, 264, 4295, 365, 1025, 11, 1360, 13891, 293, 544, 420, 1570, 1266, 11, 1360, 8819, 13, 51194], "temperature": 0.0, "avg_logprob": -0.23098712497287327, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.029749102890491486}, {"id": 155, "seek": 90436, "start": 920.96, "end": 929.8000000000001, "text": " So we are in this situation here.", "tokens": [51194, 407, 321, 366, 294, 341, 2590, 510, 13, 51636], "temperature": 0.0, "avg_logprob": -0.23098712497287327, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.029749102890491486}, {"id": 156, "seek": 92980, "start": 929.8, "end": 935.12, "text": " And comparing the solution with just only the main thread in the application versus", "tokens": [50364, 400, 15763, 264, 3827, 365, 445, 787, 264, 2135, 7207, 294, 264, 3861, 5717, 50630], "temperature": 0.0, "avg_logprob": -0.2369374341742937, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.39022693037986755}, {"id": 157, "seek": 92980, "start": 935.12, "end": 941.1999999999999, "text": " the five thread, we can see that the speed up is more than eight.", "tokens": [50630, 264, 1732, 7207, 11, 321, 393, 536, 300, 264, 3073, 493, 307, 544, 813, 3180, 13, 50934], "temperature": 0.0, "avg_logprob": -0.2369374341742937, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.39022693037986755}, {"id": 158, "seek": 92980, "start": 941.1999999999999, "end": 943.64, "text": " But that is possible with five thread.", "tokens": [50934, 583, 300, 307, 1944, 365, 1732, 7207, 13, 51056], "temperature": 0.0, "avg_logprob": -0.2369374341742937, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.39022693037986755}, {"id": 159, "seek": 92980, "start": 943.64, "end": 949.3599999999999, "text": " It's possible because as can be seen here, when you have five thread in a web application,", "tokens": [51056, 467, 311, 1944, 570, 382, 393, 312, 1612, 510, 11, 562, 291, 362, 1732, 7207, 294, 257, 3670, 3861, 11, 51342], "temperature": 0.0, "avg_logprob": -0.2369374341742937, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.39022693037986755}, {"id": 160, "seek": 92980, "start": 949.3599999999999, "end": 956.0799999999999, "text": " they are performing the layout while the main thread is free to doing other things.", "tokens": [51342, 436, 366, 10205, 264, 13333, 1339, 264, 2135, 7207, 307, 1737, 281, 884, 661, 721, 13, 51678], "temperature": 0.0, "avg_logprob": -0.2369374341742937, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.39022693037986755}, {"id": 161, "seek": 95608, "start": 956.08, "end": 961.2800000000001, "text": " If you have just only the main thread, he has to handle all everything.", "tokens": [50364, 759, 291, 362, 445, 787, 264, 2135, 7207, 11, 415, 575, 281, 4813, 439, 1203, 13, 50624], "temperature": 0.0, "avg_logprob": -0.23589283565305313, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.4308278262615204}, {"id": 162, "seek": 95608, "start": 961.2800000000001, "end": 970.4000000000001, "text": " So the fact is also explained by this other solution with multiple thread with just only", "tokens": [50624, 407, 264, 1186, 307, 611, 8825, 538, 341, 661, 3827, 365, 3866, 7207, 365, 445, 787, 51080], "temperature": 0.0, "avg_logprob": -0.23589283565305313, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.4308278262615204}, {"id": 163, "seek": 95608, "start": 970.4000000000001, "end": 977.08, "text": " one thread plus the main in which we have five or less.", "tokens": [51080, 472, 7207, 1804, 264, 2135, 294, 597, 321, 362, 1732, 420, 1570, 13, 51414], "temperature": 0.0, "avg_logprob": -0.23589283565305313, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.4308278262615204}, {"id": 164, "seek": 97708, "start": 977.08, "end": 988.6, "text": " This means that this is a problem that can have very good parallelization with five thread", "tokens": [50364, 639, 1355, 300, 341, 307, 257, 1154, 300, 393, 362, 588, 665, 8952, 2144, 365, 1732, 7207, 50940], "temperature": 0.0, "avg_logprob": -0.29532578934070675, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.2386218160390854}, {"id": 165, "seek": 97708, "start": 988.6, "end": 990.96, "text": " with five.", "tokens": [50940, 365, 1732, 13, 51058], "temperature": 0.0, "avg_logprob": -0.29532578934070675, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.2386218160390854}, {"id": 166, "seek": 97708, "start": 990.96, "end": 1000.0400000000001, "text": " Now I would like to show a simple example with a random generated graph.", "tokens": [51058, 823, 286, 576, 411, 281, 855, 257, 2199, 1365, 365, 257, 4974, 10833, 4295, 13, 51512], "temperature": 0.0, "avg_logprob": -0.29532578934070675, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.2386218160390854}, {"id": 167, "seek": 100004, "start": 1000.04, "end": 1008.5999999999999, "text": " So we now are just only watching the performances and not the aspects.", "tokens": [50364, 407, 321, 586, 366, 445, 787, 1976, 264, 16087, 293, 406, 264, 7270, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2887679046055056, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.033422186970710754}, {"id": 168, "seek": 100004, "start": 1008.5999999999999, "end": 1019.8, "text": " And this can be seen, I hope you can see, it's very fluid, with 8,000 nodes and more", "tokens": [50792, 400, 341, 393, 312, 1612, 11, 286, 1454, 291, 393, 536, 11, 309, 311, 588, 9113, 11, 365, 1649, 11, 1360, 13891, 293, 544, 51352], "temperature": 0.0, "avg_logprob": -0.2887679046055056, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.033422186970710754}, {"id": 169, "seek": 100004, "start": 1019.8, "end": 1027.36, "text": " or less 16,000 edges.", "tokens": [51352, 420, 1570, 3165, 11, 1360, 8819, 13, 51730], "temperature": 0.0, "avg_logprob": -0.2887679046055056, "compression_ratio": 1.2826086956521738, "no_speech_prob": 0.033422186970710754}, {"id": 170, "seek": 102736, "start": 1027.36, "end": 1038.52, "text": " He is searching for a structure but he is a random generated, so it is an entire structure.", "tokens": [50364, 634, 307, 10808, 337, 257, 3877, 457, 415, 307, 257, 4974, 10833, 11, 370, 309, 307, 364, 2302, 3877, 13, 50922], "temperature": 0.0, "avg_logprob": -0.36183042304460394, "compression_ratio": 1.3445378151260505, "no_speech_prob": 0.03829170763492584}, {"id": 171, "seek": 102736, "start": 1038.52, "end": 1040.1999999999998, "text": " So future works.", "tokens": [50922, 407, 2027, 1985, 13, 51006], "temperature": 0.0, "avg_logprob": -0.36183042304460394, "compression_ratio": 1.3445378151260505, "no_speech_prob": 0.03829170763492584}, {"id": 172, "seek": 102736, "start": 1040.1999999999998, "end": 1047.52, "text": " So we saw that the problem is perfect parallelized.", "tokens": [51006, 407, 321, 1866, 300, 264, 1154, 307, 2176, 8952, 1602, 13, 51372], "temperature": 0.0, "avg_logprob": -0.36183042304460394, "compression_ratio": 1.3445378151260505, "no_speech_prob": 0.03829170763492584}, {"id": 173, "seek": 104752, "start": 1047.52, "end": 1057.4, "text": " So the next step for us is to transform the problem from the parallel OSGPU to parallel", "tokens": [50364, 407, 264, 958, 1823, 337, 505, 307, 281, 4088, 264, 1154, 490, 264, 8952, 12731, 38, 8115, 281, 8952, 50858], "temperature": 0.0, "avg_logprob": -0.24079382804132277, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.06404874473810196}, {"id": 174, "seek": 104752, "start": 1057.4, "end": 1064.0, "text": " OSGPU because we are just only using the GPU for the rendering but not for the computation.", "tokens": [50858, 12731, 38, 8115, 570, 321, 366, 445, 787, 1228, 264, 18407, 337, 264, 22407, 457, 406, 337, 264, 24903, 13, 51188], "temperature": 0.0, "avg_logprob": -0.24079382804132277, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.06404874473810196}, {"id": 175, "seek": 104752, "start": 1064.0, "end": 1073.8, "text": " And with another solution, we perform the classic force layout, we obtain performance", "tokens": [51188, 400, 365, 1071, 3827, 11, 321, 2042, 264, 7230, 3464, 13333, 11, 321, 12701, 3389, 51678], "temperature": 0.0, "avg_logprob": -0.24079382804132277, "compression_ratio": 1.5868263473053892, "no_speech_prob": 0.06404874473810196}, {"id": 176, "seek": 107380, "start": 1073.8, "end": 1078.3999999999999, "text": " like 900 times more.", "tokens": [50364, 411, 22016, 1413, 544, 13, 50594], "temperature": 0.0, "avg_logprob": -0.2799797261014898, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.15479382872581482}, {"id": 177, "seek": 107380, "start": 1078.3999999999999, "end": 1083.6, "text": " So achieving more or less one million nodes visualize.", "tokens": [50594, 407, 19626, 544, 420, 1570, 472, 2459, 13891, 23273, 13, 50854], "temperature": 0.0, "avg_logprob": -0.2799797261014898, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.15479382872581482}, {"id": 178, "seek": 107380, "start": 1083.6, "end": 1094.8799999999999, "text": " So the hope is that about efficiency but also study if this is this kind of layout can guarantee", "tokens": [50854, 407, 264, 1454, 307, 300, 466, 10493, 457, 611, 2979, 498, 341, 307, 341, 733, 295, 13333, 393, 10815, 51418], "temperature": 0.0, "avg_logprob": -0.2799797261014898, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.15479382872581482}, {"id": 179, "seek": 107380, "start": 1094.8799999999999, "end": 1096.96, "text": " the effectiveness.", "tokens": [51418, 264, 21208, 13, 51522], "temperature": 0.0, "avg_logprob": -0.2799797261014898, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.15479382872581482}, {"id": 180, "seek": 109696, "start": 1096.96, "end": 1105.04, "text": " So making also not just only the stress one but more cost function and understand if he", "tokens": [50364, 407, 1455, 611, 406, 445, 787, 264, 4244, 472, 457, 544, 2063, 2445, 293, 1223, 498, 415, 50768], "temperature": 0.0, "avg_logprob": -0.3983713785807292, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16536346077919006}, {"id": 181, "seek": 109696, "start": 1105.04, "end": 1112.88, "text": " can guarantee a good visualization with 100,000 nodes.", "tokens": [50768, 393, 10815, 257, 665, 25801, 365, 2319, 11, 1360, 13891, 13, 51160], "temperature": 0.0, "avg_logprob": -0.3983713785807292, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16536346077919006}, {"id": 182, "seek": 109696, "start": 1112.88, "end": 1117.8, "text": " That's it for us.", "tokens": [51160, 663, 311, 309, 337, 505, 13, 51406], "temperature": 0.0, "avg_logprob": -0.3983713785807292, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16536346077919006}, {"id": 183, "seek": 111780, "start": 1117.8, "end": 1129.56, "text": " What?", "tokens": [50364, 708, 30, 50952], "temperature": 0.0, "avg_logprob": -0.4161551594734192, "compression_ratio": 1.148936170212766, "no_speech_prob": 0.2051691859960556}, {"id": 184, "seek": 111780, "start": 1129.56, "end": 1135.8799999999999, "text": " This version is not available but we will publish it, sorry.", "tokens": [50952, 639, 3037, 307, 406, 2435, 457, 321, 486, 11374, 309, 11, 2597, 13, 51268], "temperature": 0.0, "avg_logprob": -0.4161551594734192, "compression_ratio": 1.148936170212766, "no_speech_prob": 0.2051691859960556}, {"id": 185, "seek": 111780, "start": 1135.8799999999999, "end": 1141.52, "text": " He asked if the code is available online.", "tokens": [51268, 634, 2351, 498, 264, 3089, 307, 2435, 2950, 13, 51550], "temperature": 0.0, "avg_logprob": -0.4161551594734192, "compression_ratio": 1.148936170212766, "no_speech_prob": 0.2051691859960556}, {"id": 186, "seek": 114152, "start": 1141.52, "end": 1158.08, "text": " This kind of version is not available online, you can find the version of the spring and", "tokens": [50364, 639, 733, 295, 3037, 307, 406, 2435, 2950, 11, 291, 393, 915, 264, 3037, 295, 264, 5587, 293, 51192], "temperature": 0.0, "avg_logprob": -0.2704296979037198, "compression_ratio": 1.1282051282051282, "no_speech_prob": 0.7064189314842224}, {"id": 187, "seek": 115808, "start": 1158.08, "end": 1179.04, "text": " better here, you can find the, this is the same code more or less.", "tokens": [50364, 1101, 510, 11, 291, 393, 915, 264, 11, 341, 307, 264, 912, 3089, 544, 420, 1570, 13, 51412], "temperature": 0.0, "avg_logprob": -0.531473023550851, "compression_ratio": 1.0, "no_speech_prob": 0.7031176090240479}, {"id": 188, "seek": 117904, "start": 1179.04, "end": 1203.36, "text": " Does it work for directly the graph, yes, of course, yeah.", "tokens": [50364, 4402, 309, 589, 337, 3838, 264, 4295, 11, 2086, 11, 295, 1164, 11, 1338, 13, 51580], "temperature": 0.0, "avg_logprob": -0.9602508544921875, "compression_ratio": 0.9206349206349206, "no_speech_prob": 0.9444779753684998}, {"id": 189, "seek": 120336, "start": 1203.36, "end": 1223.04, "text": " Yes, of course, there are many quality measures that allow us to show complex graph as a clip.", "tokens": [50364, 1079, 11, 295, 1164, 11, 456, 366, 867, 3125, 8000, 300, 2089, 505, 281, 855, 3997, 4295, 382, 257, 7353, 13, 51348], "temperature": 0.0, "avg_logprob": -0.5926554489135742, "compression_ratio": 1.119047619047619, "no_speech_prob": 0.8410525918006897}, {"id": 190, "seek": 122304, "start": 1223.04, "end": 1243.48, "text": " If you go on the table, you can find the quality measure called the net volume, this is the", "tokens": [50364, 759, 291, 352, 322, 264, 3199, 11, 291, 393, 915, 264, 3125, 3481, 1219, 264, 2533, 5523, 11, 341, 307, 264, 51386], "temperature": 0.0, "avg_logprob": -0.6605628967285156, "compression_ratio": 1.1518987341772151, "no_speech_prob": 0.7556536197662354}, {"id": 191, "seek": 124348, "start": 1243.48, "end": 1262.0, "text": " quality measure and combining that measure with the stress with another one you can show", "tokens": [50364, 3125, 3481, 293, 21928, 300, 3481, 365, 264, 4244, 365, 1071, 472, 291, 393, 855, 51290], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 192, "seek": 124348, "start": 1262.0, "end": 1263.0, "text": " also complex graphs.", "tokens": [51290, 611, 3997, 24877, 13, 51340], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 193, "seek": 124348, "start": 1263.0, "end": 1264.0, "text": " Are you using auto-exift tools to calculate partial derivatives of the cost function?", "tokens": [51340, 2014, 291, 1228, 8399, 12, 3121, 2008, 3873, 281, 8873, 14641, 33733, 295, 264, 2063, 2445, 30, 51390], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 194, "seek": 124348, "start": 1264.0, "end": 1265.0, "text": " No.", "tokens": [51390, 883, 13, 51440], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 195, "seek": 124348, "start": 1265.0, "end": 1266.0, "text": " It's being done by hand?", "tokens": [51440, 467, 311, 885, 1096, 538, 1011, 30, 51490], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 196, "seek": 124348, "start": 1266.0, "end": 1267.0, "text": " No, it's interneted by us.", "tokens": [51490, 883, 11, 309, 311, 4705, 292, 538, 505, 13, 51540], "temperature": 0.0, "avg_logprob": -0.462313876432531, "compression_ratio": 1.4261363636363635, "no_speech_prob": 0.8078741431236267}, {"id": 197, "seek": 126700, "start": 1267.0, "end": 1274.2, "text": " We have used a tool for calculating of the derivatives, the partial gradients, etc.", "tokens": [50364, 492, 362, 1143, 257, 2290, 337, 28258, 295, 264, 33733, 11, 264, 14641, 2771, 2448, 11, 5183, 13, 50724], "temperature": 0.0, "avg_logprob": -0.6093552017211914, "compression_ratio": 1.45, "no_speech_prob": 0.5108792185783386}, {"id": 198, "seek": 126700, "start": 1274.2, "end": 1286.72, "text": " Now we have implemented the font-squash but the derivatives are very easy to compute from", "tokens": [50724, 823, 321, 362, 12270, 264, 10703, 12, 33292, 1299, 457, 264, 33733, 366, 588, 1858, 281, 14722, 490, 51350], "temperature": 0.0, "avg_logprob": -0.6093552017211914, "compression_ratio": 1.45, "no_speech_prob": 0.5108792185783386}, {"id": 199, "seek": 126700, "start": 1286.72, "end": 1289.72, "text": " the most of quality measures.", "tokens": [51350, 264, 881, 295, 3125, 8000, 13, 51500], "temperature": 0.0, "avg_logprob": -0.6093552017211914, "compression_ratio": 1.45, "no_speech_prob": 0.5108792185783386}, {"id": 200, "seek": 128972, "start": 1289.72, "end": 1302.76, "text": " They are not very complex to compute and also to build an efficient multi-training solution", "tokens": [50364, 814, 366, 406, 588, 3997, 281, 14722, 293, 611, 281, 1322, 364, 7148, 4825, 12, 17227, 1760, 3827, 51016], "temperature": 0.0, "avg_logprob": -0.6368459354747426, "compression_ratio": 1.123456790123457, "no_speech_prob": 0.7652426958084106}, {"id": 201, "seek": 130276, "start": 1302.76, "end": 1321.0, "text": " because tool chains exist along with the parallelization on GPU, they come with 4-series of tools.", "tokens": [50364, 570, 2290, 12626, 2514, 2051, 365, 264, 8952, 2144, 322, 18407, 11, 436, 808, 365, 1017, 12, 12484, 530, 295, 3873, 13, 51276], "temperature": 0.0, "avg_logprob": -0.8618127703666687, "compression_ratio": 1.0909090909090908, "no_speech_prob": 0.5259725451469421}, {"id": 202, "seek": 130276, "start": 1321.0, "end": 1322.0, "text": " Yes, yes.", "tokens": [51276, 1079, 11, 2086, 13, 51326], "temperature": 0.0, "avg_logprob": -0.8618127703666687, "compression_ratio": 1.0909090909090908, "no_speech_prob": 0.5259725451469421}, {"id": 203, "seek": 132200, "start": 1322.0, "end": 1337.44, "text": " So, the formula was using TensorFlow.js but as easy as it is implemented, it's not that", "tokens": [50364, 407, 11, 264, 8513, 390, 1228, 37624, 13, 25530, 457, 382, 1858, 382, 309, 307, 12270, 11, 309, 311, 406, 300, 51136], "temperature": 0.0, "avg_logprob": -0.6650107627691224, "compression_ratio": 1.3504273504273505, "no_speech_prob": 0.6345093250274658}, {"id": 204, "seek": 132200, "start": 1337.44, "end": 1343.44, "text": " the complexity, it's not giving from there the time-square complexity.", "tokens": [51136, 264, 14024, 11, 309, 311, 406, 2902, 490, 456, 264, 565, 12, 33292, 543, 14024, 13, 51436], "temperature": 0.0, "avg_logprob": -0.6650107627691224, "compression_ratio": 1.3504273504273505, "no_speech_prob": 0.6345093250274658}, {"id": 205, "seek": 134344, "start": 1343.44, "end": 1352.8, "text": " Does Julia out-support interactive adding of new nodes like when user wants to expand", "tokens": [50364, 4402, 18551, 484, 12, 36622, 477, 15141, 5127, 295, 777, 13891, 411, 562, 4195, 2738, 281, 5268, 50832], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 206, "seek": 134344, "start": 1352.8, "end": 1353.8, "text": " to see new neighborhoods?", "tokens": [50832, 281, 536, 777, 20052, 30, 50882], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 207, "seek": 134344, "start": 1353.8, "end": 1354.8, "text": " Yes.", "tokens": [50882, 1079, 13, 50932], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 208, "seek": 134344, "start": 1354.8, "end": 1361.3200000000002, "text": " So, the new nodes appeared around the double pick note and the other nodes doesn't get around.", "tokens": [50932, 407, 11, 264, 777, 13891, 8516, 926, 264, 3834, 1888, 3637, 293, 264, 661, 13891, 1177, 380, 483, 926, 13, 51258], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 209, "seek": 134344, "start": 1361.3200000000002, "end": 1364.04, "text": " Yes, it depends of how you have the...", "tokens": [51258, 1079, 11, 309, 5946, 295, 577, 291, 362, 264, 485, 51394], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 210, "seek": 134344, "start": 1364.04, "end": 1367.04, "text": " Ribbit, yes, yes.", "tokens": [51394, 38554, 5260, 11, 2086, 11, 2086, 13, 51544], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 211, "seek": 134344, "start": 1367.04, "end": 1368.04, "text": " He has...", "tokens": [51544, 634, 575, 485, 51594], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 212, "seek": 134344, "start": 1368.04, "end": 1369.04, "text": " Sorry.", "tokens": [51594, 4919, 13, 51644], "temperature": 0.2, "avg_logprob": -0.6956562314714704, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.75566565990448}, {"id": 213, "seek": 136904, "start": 1369.04, "end": 1380.84, "text": " If we continue to work, if we, for example, expand a node, we do something on the graph,", "tokens": [50364, 759, 321, 2354, 281, 589, 11, 498, 321, 11, 337, 1365, 11, 5268, 257, 9984, 11, 321, 360, 746, 322, 264, 4295, 11, 50954], "temperature": 0.0, "avg_logprob": -0.43756152644301904, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.3470705449581146}, {"id": 214, "seek": 136904, "start": 1380.84, "end": 1386.48, "text": " yes, of course, it depends of how you have built your applications.", "tokens": [50954, 2086, 11, 295, 1164, 11, 309, 5946, 295, 577, 291, 362, 3094, 428, 5821, 13, 51236], "temperature": 0.0, "avg_logprob": -0.43756152644301904, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.3470705449581146}, {"id": 215, "seek": 136904, "start": 1386.48, "end": 1396.1599999999999, "text": " For example, if you have continuously run over the time, you can expand a node, update the", "tokens": [51236, 1171, 1365, 11, 498, 291, 362, 15684, 1190, 670, 264, 565, 11, 291, 393, 5268, 257, 9984, 11, 5623, 264, 51720], "temperature": 0.0, "avg_logprob": -0.43756152644301904, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.3470705449581146}, {"id": 216, "seek": 139616, "start": 1396.16, "end": 1400.88, "text": " graph topology and the renderer will continue to work.", "tokens": [50364, 4295, 1192, 1793, 293, 264, 15529, 260, 486, 2354, 281, 589, 13, 50600], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 217, "seek": 139616, "start": 1400.88, "end": 1401.88, "text": " Yes.", "tokens": [50600, 1079, 13, 50650], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 218, "seek": 139616, "start": 1401.88, "end": 1404.88, "text": " You can perform it also to the introduced nodes.", "tokens": [50650, 509, 393, 2042, 309, 611, 281, 264, 7268, 13891, 13, 50800], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 219, "seek": 139616, "start": 1404.88, "end": 1405.88, "text": " Sorry.", "tokens": [50800, 4919, 13, 50850], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 220, "seek": 139616, "start": 1405.88, "end": 1406.88, "text": " Thank you.", "tokens": [50850, 1044, 291, 13, 50900], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 221, "seek": 139616, "start": 1406.88, "end": 1413.88, "text": " How does it compare to first layouts regarding number of iterations, convergence speed?", "tokens": [50900, 1012, 775, 309, 6794, 281, 700, 46100, 8595, 1230, 295, 36540, 11, 32181, 3073, 30, 51250], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 222, "seek": 139616, "start": 1413.88, "end": 1414.88, "text": " Okay.", "tokens": [51250, 1033, 13, 51300], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 223, "seek": 139616, "start": 1414.88, "end": 1420.1200000000001, "text": " It is about the same because if you are watching to the classic first layout, so the spring", "tokens": [51300, 467, 307, 466, 264, 912, 570, 498, 291, 366, 1976, 281, 264, 7230, 700, 13333, 11, 370, 264, 5587, 51562], "temperature": 0.0, "avg_logprob": -0.43183329019201805, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.07872903347015381}, {"id": 224, "seek": 142012, "start": 1420.12, "end": 1428.6399999999999, "text": " and better of Peter it's time square because for every relation, you take the charge and", "tokens": [50364, 293, 1101, 295, 6508, 309, 311, 565, 3732, 570, 337, 633, 9721, 11, 291, 747, 264, 4602, 293, 50790], "temperature": 0.0, "avg_logprob": -0.5222013941350973, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.06174096837639809}, {"id": 225, "seek": 142012, "start": 1428.6399999999999, "end": 1431.6399999999999, "text": " this is time square.", "tokens": [50790, 341, 307, 565, 3732, 13, 50940], "temperature": 0.0, "avg_logprob": -0.5222013941350973, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.06174096837639809}, {"id": 226, "seek": 142012, "start": 1431.6399999999999, "end": 1432.6399999999999, "text": " Okay.", "tokens": [50940, 1033, 13, 50990], "temperature": 0.0, "avg_logprob": -0.5222013941350973, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.06174096837639809}, {"id": 227, "seek": 142012, "start": 1432.6399999999999, "end": 1445.9199999999998, "text": " The time complexity is the same, but the velocity of convergence depends of how you have tuned", "tokens": [50990, 440, 565, 14024, 307, 264, 912, 11, 457, 264, 9269, 295, 32181, 5946, 295, 577, 291, 362, 10870, 51654], "temperature": 0.0, "avg_logprob": -0.5222013941350973, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.06174096837639809}, {"id": 228, "seek": 144592, "start": 1445.92, "end": 1452.8000000000002, "text": " the hyperparameters of the model and depends from the optimization algorithm that you have", "tokens": [50364, 264, 9848, 2181, 335, 6202, 295, 264, 2316, 293, 5946, 490, 264, 19618, 9284, 300, 291, 362, 50708], "temperature": 0.0, "avg_logprob": -0.4074679343931137, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.29856038093566895}, {"id": 229, "seek": 144592, "start": 1452.8000000000002, "end": 1453.8000000000002, "text": " used.", "tokens": [50708, 1143, 13, 50758], "temperature": 0.0, "avg_logprob": -0.4074679343931137, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.29856038093566895}, {"id": 230, "seek": 144592, "start": 1453.8000000000002, "end": 1460.44, "text": " For example, gradient descent is known to be very slow to converge, but if you use more", "tokens": [50758, 1171, 1365, 11, 16235, 23475, 307, 2570, 281, 312, 588, 2964, 281, 41881, 11, 457, 498, 291, 764, 544, 51090], "temperature": 0.0, "avg_logprob": -0.4074679343931137, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.29856038093566895}, {"id": 231, "seek": 144592, "start": 1460.44, "end": 1472.24, "text": " efficient optimization algorithm, such as Adam's command that accumulates an inertia", "tokens": [51090, 7148, 19618, 9284, 11, 1270, 382, 7938, 311, 5622, 300, 12989, 26192, 364, 37234, 51680], "temperature": 0.0, "avg_logprob": -0.4074679343931137, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.29856038093566895}, {"id": 232, "seek": 147224, "start": 1472.24, "end": 1480.36, "text": " during the iteration, the speed up is more than gradient descent and depends also on", "tokens": [50364, 1830, 264, 24784, 11, 264, 3073, 493, 307, 544, 813, 16235, 23475, 293, 5946, 611, 322, 50770], "temperature": 0.0, "avg_logprob": -0.3782223252689137, "compression_ratio": 1.7791411042944785, "no_speech_prob": 0.35460785031318665}, {"id": 233, "seek": 147224, "start": 1480.36, "end": 1484.8, "text": " the learning rate curve that you put on the system.", "tokens": [50770, 264, 2539, 3314, 7605, 300, 291, 829, 322, 264, 1185, 13, 50992], "temperature": 0.0, "avg_logprob": -0.3782223252689137, "compression_ratio": 1.7791411042944785, "no_speech_prob": 0.35460785031318665}, {"id": 234, "seek": 147224, "start": 1484.8, "end": 1493.2, "text": " For example, you can add an exponential decay of the learning rate in order to have a very", "tokens": [50992, 1171, 1365, 11, 291, 393, 909, 364, 21510, 21039, 295, 264, 2539, 3314, 294, 1668, 281, 362, 257, 588, 51412], "temperature": 0.0, "avg_logprob": -0.3782223252689137, "compression_ratio": 1.7791411042944785, "no_speech_prob": 0.35460785031318665}, {"id": 235, "seek": 147224, "start": 1493.2, "end": 1497.84, "text": " speed during the iteration, very large speed in the iteration.", "tokens": [51412, 3073, 1830, 264, 24784, 11, 588, 2416, 3073, 294, 264, 24784, 13, 51644], "temperature": 0.0, "avg_logprob": -0.3782223252689137, "compression_ratio": 1.7791411042944785, "no_speech_prob": 0.35460785031318665}, {"id": 236, "seek": 149784, "start": 1497.84, "end": 1505.24, "text": " And then when the graph starts to converge, you can reduce the learning rate in order to", "tokens": [50364, 400, 550, 562, 264, 4295, 3719, 281, 41881, 11, 291, 393, 5407, 264, 2539, 3314, 294, 1668, 281, 50734], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 237, "seek": 149784, "start": 1505.24, "end": 1510.0, "text": " find a better minimum or a better maximum.", "tokens": [50734, 915, 257, 1101, 7285, 420, 257, 1101, 6674, 13, 50972], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 238, "seek": 149784, "start": 1510.0, "end": 1511.36, "text": " Thank you.", "tokens": [50972, 1044, 291, 13, 51040], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 239, "seek": 149784, "start": 1511.36, "end": 1515.28, "text": " The last one or so?", "tokens": [51040, 440, 1036, 472, 420, 370, 30, 51236], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 240, "seek": 149784, "start": 1515.28, "end": 1519.28, "text": " If you have more questions, you can just continue.", "tokens": [51236, 759, 291, 362, 544, 1651, 11, 291, 393, 445, 2354, 13, 51436], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 241, "seek": 149784, "start": 1519.28, "end": 1520.28, "text": " Thank you so much, everyone.", "tokens": [51436, 1044, 291, 370, 709, 11, 1518, 13, 51486], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 242, "seek": 149784, "start": 1520.28, "end": 1521.28, "text": " Thank you to Majora.", "tokens": [51486, 1044, 291, 281, 7048, 3252, 13, 51536], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726}, {"id": 243, "seek": 149784, "start": 1521.28, "end": 1521.28, "text": "", "tokens": [], "temperature": 0.0, "avg_logprob": -0.47847766876220704, "compression_ratio": 1.621301775147929, "no_speech_prob": 0.6876651644706726, "words": []}, {"id": 244, "seek": 152784, "start": 1527.84, "end": 1528.84, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.6909532070159912, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.9980469942092896}, {"id": 245, "seek": 152784, "start": 1528.84, "end": 1528.84, "text": "", "tokens": [], "temperature": 0.0, "avg_logprob": -0.6909532070159912, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.9980469942092896, "words": []}], "language": "en"}