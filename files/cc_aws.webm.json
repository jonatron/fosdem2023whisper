{"text": " Yeah, hello everyone, today me and Nikita and my colleague Ariti senior engineers Fortanix want to talk about the confidential computing project to build at Fortanix using latest technology from Amazon called Nitro Enclaves. Now Nitro Enclaves provides environment run application confidentially meaning that no one should be able to temper with the application while it runs during the execution compared to your regular operating system or in other words, you know, if your program is quite shy and doesn't want to be poked by the outsiders or something, we kind of provide like a safe environment for it to execute or a safe space, if you will. Before I start talking about the project itself, I want to give a little bit of context about what parts Nitro consists of. The Nitro system is Nitro system, Nitro Enclaves built on, it consists of three main parts. We have a Nitro hypervisor, that is a combined piece of software and hardware tech which provides CPU and memory utilization capabilities for the VM. The Nitro chip which is a hardware tech, it provides a root of trust which tells you if you're like running a tainted hypervisor or not and there are Nitro cards which are responsible for memory encryption. Now how it looks like from a VM standpoint, as you can see in the picture we have two parts. We have an untrusted parent VM and a trusted Nitro Enclave VM. They are completely separated and they run their own kernels. And the Nitro Enclave is the VM that you run your application on. Now the enclave and parent VMs they talk through and can only talk through a socket called Vsoc. There is a special socket connection specifically designed to provide a communication between an enclave VM and the hypervisor. Now we believe that any program doesn't matter how shy it is, it still wants to socialize with the outside world because complete hermits are quite rare after all and it also wants to keep some personal diary with all the data and things it's done so it can reread it after the enclave has finished. Now bare Nitro doesn't provide all of those. As you can see it has no network capability out of the box and no durable storage. It gives no networking capabilities inside the enclave meaning that the application inside the enclave can't connect to anything from the outside world and vice versa. And for the persistent storage Nitro doesn't provide any form of that. The kernel inside Nitro VM is running on a RAM disk and it gets cleared after the enclave finishes. So all of it kind of drastically limits the number of useful applications can be run. On a bare Nitro for example if you want to run like a web server or a database you can't do it on a bare Nitro but it won't provide much value to the end user because yeah the big portion of functionality of those programs just is not supported. And the salmic project that we created aims to solve those limitations by providing confidential program execution environment without sacrificing fundamental systems capabilities. On a higher level the project looks like this. Fundamentally it is a yeah it is a it's a Docker image that runs on a VM with a Nitro enclave enabled. The only required argument that needs to be passed is the Nitro socket here on the right. And after that it behaves like any other Docker image would. You can you know you can start, stop it, monitor its status using your standard Docker commands. Functionally the image can be divided into two parts. One is called a parent and one called an enclave. Those are internal names not to be confused with parent VM or Nitro enclave VM. The enclave contains client application as well as a runner program of our creation. Parent contains only a runner program and responsible for setting up networking and the file system as well as network enclave creation, its monitoring and termination. So and the only communication channel between those two is the VSOC connection. This VSOC connection effectively creates like a confidational boundary between those two parts. Yeah and shown the architectural area can go further to discuss how we implement networking. So I'll make abstracts networking communication between client application and this outside world meaning that if someone wants to connect to the application inside the enclave the only thing one need is a networking address so it works the same as you would connect to any other service running on the internet and the other way around the application inside the enclave can connect to anything on the internet it also needs only the internet address and the application inside the enclave doesn't know that it runs inside the enclave. The common example of applications would be your common I don't know nginx web server that runs inside the enclave you can send web requests to it and it will answer to whomever. So in details networking is implemented using a two part program called VSOC proxy as you can see this is also a two part program similar to parent in the enclave on a previous slide one runs inside the enclave one runs inside the parent they are both connected to and only VSOC. So one of the responsibilities of the parent and it is an entry point and the startup is to copy all the necessary network configuration of the network device on the right this is a Docker network device propagate those settings inside the enclave and the enclave part of the VSOC proxy will recreate said network device or devices effectively mirroring it inside the enclave but instead it will use virtual network device which is a functionality provided by Linux kernel it's called tune or tap this is a functionality to read and write networking packets using program and user space. If you are more interested in that you can check kernel.org they have a lot of information about it. So after said devices have been created both parts VSOC proxy will start forwarding packets will forward from you know external network inside the enclave and the virtual device inside the enclave will forward them in the opposite direction. Yeah sure so the only difference between those two becomes yeah effectively the direction they are transmitting networking packets. Set architecture also supports multiple network interfaces as well as a private network between parent and enclave private network makes two independent entities between parent and the enclave and it allows us to enable instant protocol between those two on top of the VSOC. This lays the foundation for a file system solution and this will be presented by my colleague Arithi and I will pass you a mic. Okay hello everyone I will dive deeper into how we support persistent file system with Nitro enclaves in our project from IAC. So I first wanted to go over how you actually create an enclave image using AWS Nitro. AWS does provide us with a command line tool Nitro CLI. It's used for managing the life cycles of Nitro enclaves you can build an enclave you can run it you can check its status whether it's running or not how much CPU it's using or memory it's using and in particular I wanted to discuss the build enclave command which allows you to provide as input a docker image which has your application that you want to run inside an enclave and it gives you an enclave image file and along with an enclave image file it also gives you enclave measurements which are later used by the enclave itself to prove its identity and build trust with an external service that's basically Amazon. So how do we do it different in SOMIAC project? We don't just create an enclave image file we create a Nitro docker image from the input image that we get. So the first step that we do is look at the input docker image and export the image file system into a block file let's call it init image and we store it into a block file with the help of DM verity it's a Linux kernel device mapper tool it uses the kernel scriptor API to protect the integrity of the initial input image so what happens at the time of creating an enclave image is that it creates a hash tree of the storage blocks present in the device and it ends up giving us a root hash and we store this root hash in the enclave image file and we also create another empty block file let's call it run dot image and I'll discuss more about it in the future slides so as you can see here the input docker image is converted into a Nitro docker image which consists of the block files the enclave image file and foot annex software which is Somiak so the next step is what happens at runtime and how do we make these block files which were present in the docker image inside the enclave so we use nbd the network block device protocol to be able to serve these block files which are present in the parent docker container into the enclave and it's over the network so we take we make use of the VSOC proxy that Nikita discussed earlier so each block file is is served through the nbd server program which runs on the parent side and they both use different ports on the server and inside the enclave we have the nbd client program which runs we have two clients which access the server on two separate ports to provide us with two devices let's call it dev read and dev write okay so once we have the once we have the block devices in the inside the enclave how do we actually mount it we use I think I made a mistake here in the previous slide I did mention the read and dev write I want to change that to dev init so we use the emberty again to open the dev init device and when we do use the emberty we provide the root hash from the enclave image file so when the emberty opens up the block device it makes sure that the hash tree it constructed at enclave image creation time matches what it finds at runtime so this way the initial contents of your client image are preserved it provides integrity protection this way and let's say we mounted at a location mount lower and we have a second device which was mounted as dev run so this device is open using dmcrypt it is another device mapper tool provided by the Linux kernel it is used to encrypt a block device and on the first launch of the application what we do is we format this device into loops to device and create an exe force file system on it and right now we're using the default cipher and the encryption key used can either be generated randomly or you can use an external key service to use the encryption key so let's say we mount this dev run device at directory mount upper so we have two sets of file system layers here mount upper and mount lower and we need to combine this and provide it to our client application that we want to run so we use an overlay mount here to merge the two the merge the two and provide it as mount root so this allows the client application to read verified data from the image block file which is presented as mount lower as you can see and any changes in the state of the file system during enclave runtime is saved or the state is saved in mount upper which is basically the run image block file and yeah so once we set up the overlay file system we need to change the root of the file system here so that the client application is unaware of these different layers that we have so we use to root to change the root of the client file system and once we root and we also bind on some of the system directories such as dev proxies yeah I think that should give the client application everything it needs to run its application and yeah save any state changes into the block device and yeah I think that's all I have if you have any questions about any of the networking or the file system persistence you can ask me on the key to about it yeah maybe talk a little bit about performance I mean you're telling everything through the VSOC is there any boundaries you hit or I would see we have okay the question is how does it impact performance of the application we haven't yet measured what is the performance implications of it yet but this was more of being able to support what was initially not supported by AWS Nitro any other questions is this one yes okay the question is is the DEE architecture of Nitro similar to TDX and SCV I suppose it is a closed system by AWS only so how can users verify that Nitro is secure okay I'm afraid I I don't know the comparison with SCV and the other platform mentioned here but you need to be able to trust AWS if you trust AWS you trust the system apart from AWS there's no one else that can access the contents as far as we know the Nitro Sela is open yeah so as far as I know I mean the Nitro Sela is open source right but the hardware that Dunkleys run on it's done by Amazon I don't know probably ordered by them whatever so you have to trust them for the hardware yeah that's it", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.72, "text": " Yeah, hello everyone, today me and Nikita and my colleague Ariti senior engineers Fortanix", "tokens": [50364, 865, 11, 7751, 1518, 11, 965, 385, 293, 13969, 2786, 293, 452, 13532, 1587, 8707, 7965, 11955, 11002, 282, 970, 50950], "temperature": 0.0, "avg_logprob": -0.458210203382704, "compression_ratio": 1.3658536585365855, "no_speech_prob": 0.2314906269311905}, {"id": 1, "seek": 0, "start": 11.72, "end": 18.400000000000002, "text": " want to talk about the confidential computing project to build at Fortanix using latest", "tokens": [50950, 528, 281, 751, 466, 264, 27054, 15866, 1716, 281, 1322, 412, 11002, 282, 970, 1228, 6792, 51284], "temperature": 0.0, "avg_logprob": -0.458210203382704, "compression_ratio": 1.3658536585365855, "no_speech_prob": 0.2314906269311905}, {"id": 2, "seek": 0, "start": 18.400000000000002, "end": 28.84, "text": " technology from Amazon called Nitro Enclaves.", "tokens": [51284, 2899, 490, 6795, 1219, 37942, 340, 2193, 3474, 5423, 13, 51806], "temperature": 0.0, "avg_logprob": -0.458210203382704, "compression_ratio": 1.3658536585365855, "no_speech_prob": 0.2314906269311905}, {"id": 3, "seek": 2884, "start": 28.84, "end": 35.28, "text": " Now Nitro Enclaves provides environment run application confidentially meaning that no", "tokens": [50364, 823, 37942, 340, 2193, 3474, 5423, 6417, 2823, 1190, 3861, 6679, 2270, 3620, 300, 572, 50686], "temperature": 0.0, "avg_logprob": -0.23706085299268181, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.07732328772544861}, {"id": 4, "seek": 2884, "start": 35.28, "end": 40.32, "text": " one should be able to temper with the application while it runs during the execution compared", "tokens": [50686, 472, 820, 312, 1075, 281, 3393, 365, 264, 3861, 1339, 309, 6676, 1830, 264, 15058, 5347, 50938], "temperature": 0.0, "avg_logprob": -0.23706085299268181, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.07732328772544861}, {"id": 5, "seek": 2884, "start": 40.32, "end": 46.0, "text": " to your regular operating system or in other words, you know, if your program is quite", "tokens": [50938, 281, 428, 3890, 7447, 1185, 420, 294, 661, 2283, 11, 291, 458, 11, 498, 428, 1461, 307, 1596, 51222], "temperature": 0.0, "avg_logprob": -0.23706085299268181, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.07732328772544861}, {"id": 6, "seek": 2884, "start": 46.0, "end": 53.94, "text": " shy and doesn't want to be poked by the outsiders or something, we kind of provide like a safe", "tokens": [51222, 12685, 293, 1177, 380, 528, 281, 312, 280, 9511, 538, 264, 49825, 420, 746, 11, 321, 733, 295, 2893, 411, 257, 3273, 51619], "temperature": 0.0, "avg_logprob": -0.23706085299268181, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.07732328772544861}, {"id": 7, "seek": 5394, "start": 53.94, "end": 62.9, "text": " environment for it to execute or a safe space, if you will.", "tokens": [50364, 2823, 337, 309, 281, 14483, 420, 257, 3273, 1901, 11, 498, 291, 486, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2101091178687843, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.03499309718608856}, {"id": 8, "seek": 5394, "start": 62.9, "end": 69.9, "text": " Before I start talking about the project itself, I want to give a little bit of context about", "tokens": [50812, 4546, 286, 722, 1417, 466, 264, 1716, 2564, 11, 286, 528, 281, 976, 257, 707, 857, 295, 4319, 466, 51162], "temperature": 0.0, "avg_logprob": -0.2101091178687843, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.03499309718608856}, {"id": 9, "seek": 5394, "start": 69.9, "end": 74.7, "text": " what parts Nitro consists of.", "tokens": [51162, 437, 3166, 37942, 340, 14689, 295, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2101091178687843, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.03499309718608856}, {"id": 10, "seek": 5394, "start": 74.7, "end": 81.18, "text": " The Nitro system is Nitro system, Nitro Enclaves built on, it consists of three main parts.", "tokens": [51402, 440, 37942, 340, 1185, 307, 37942, 340, 1185, 11, 37942, 340, 2193, 3474, 5423, 3094, 322, 11, 309, 14689, 295, 1045, 2135, 3166, 13, 51726], "temperature": 0.0, "avg_logprob": -0.2101091178687843, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.03499309718608856}, {"id": 11, "seek": 8118, "start": 81.18, "end": 90.86000000000001, "text": " We have a Nitro hypervisor, that is a combined piece of software and hardware tech which", "tokens": [50364, 492, 362, 257, 37942, 340, 9848, 16457, 11, 300, 307, 257, 9354, 2522, 295, 4722, 293, 8837, 7553, 597, 50848], "temperature": 0.0, "avg_logprob": -0.18500506572234324, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03717072308063507}, {"id": 12, "seek": 8118, "start": 90.86000000000001, "end": 95.9, "text": " provides CPU and memory utilization capabilities for the VM.", "tokens": [50848, 6417, 13199, 293, 4675, 37074, 10862, 337, 264, 18038, 13, 51100], "temperature": 0.0, "avg_logprob": -0.18500506572234324, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03717072308063507}, {"id": 13, "seek": 8118, "start": 95.9, "end": 101.9, "text": " The Nitro chip which is a hardware tech, it provides a root of trust which tells you if", "tokens": [51100, 440, 37942, 340, 11409, 597, 307, 257, 8837, 7553, 11, 309, 6417, 257, 5593, 295, 3361, 597, 5112, 291, 498, 51400], "temperature": 0.0, "avg_logprob": -0.18500506572234324, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03717072308063507}, {"id": 14, "seek": 8118, "start": 101.9, "end": 110.86000000000001, "text": " you're like running a tainted hypervisor or not and there are Nitro cards which are", "tokens": [51400, 291, 434, 411, 2614, 257, 256, 26278, 9848, 16457, 420, 406, 293, 456, 366, 37942, 340, 5632, 597, 366, 51848], "temperature": 0.0, "avg_logprob": -0.18500506572234324, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03717072308063507}, {"id": 15, "seek": 11086, "start": 110.86, "end": 116.34, "text": " responsible for memory encryption.", "tokens": [50364, 6250, 337, 4675, 29575, 13, 50638], "temperature": 0.0, "avg_logprob": -0.29018720590843344, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.02630271390080452}, {"id": 16, "seek": 11086, "start": 116.34, "end": 130.14, "text": " Now how it looks like from a VM standpoint, as you can see in the picture we have two parts.", "tokens": [50638, 823, 577, 309, 1542, 411, 490, 257, 18038, 15827, 11, 382, 291, 393, 536, 294, 264, 3036, 321, 362, 732, 3166, 13, 51328], "temperature": 0.0, "avg_logprob": -0.29018720590843344, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.02630271390080452}, {"id": 17, "seek": 11086, "start": 130.14, "end": 136.62, "text": " We have an untrusted parent VM and a trusted Nitro Enclave VM.", "tokens": [51328, 492, 362, 364, 1701, 81, 6589, 2596, 18038, 293, 257, 16034, 37942, 340, 2193, 3474, 946, 18038, 13, 51652], "temperature": 0.0, "avg_logprob": -0.29018720590843344, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.02630271390080452}, {"id": 18, "seek": 13662, "start": 137.62, "end": 148.34, "text": " They are completely separated and they run their own kernels.", "tokens": [50414, 814, 366, 2584, 12005, 293, 436, 1190, 641, 1065, 23434, 1625, 13, 50950], "temperature": 0.0, "avg_logprob": -0.25913562774658205, "compression_ratio": 1.5071428571428571, "no_speech_prob": 0.0693909227848053}, {"id": 19, "seek": 13662, "start": 148.34, "end": 154.98000000000002, "text": " And the Nitro Enclave is the VM that you run your application on.", "tokens": [50950, 400, 264, 37942, 340, 2193, 3474, 946, 307, 264, 18038, 300, 291, 1190, 428, 3861, 322, 13, 51282], "temperature": 0.0, "avg_logprob": -0.25913562774658205, "compression_ratio": 1.5071428571428571, "no_speech_prob": 0.0693909227848053}, {"id": 20, "seek": 13662, "start": 154.98000000000002, "end": 162.66, "text": " Now the enclave and parent VMs they talk through and can only talk through a socket", "tokens": [51282, 823, 264, 2058, 27995, 293, 2596, 18038, 82, 436, 751, 807, 293, 393, 787, 751, 807, 257, 19741, 51666], "temperature": 0.0, "avg_logprob": -0.25913562774658205, "compression_ratio": 1.5071428571428571, "no_speech_prob": 0.0693909227848053}, {"id": 21, "seek": 16266, "start": 162.66, "end": 163.66, "text": " called Vsoc.", "tokens": [50364, 1219, 691, 539, 66, 13, 50414], "temperature": 0.0, "avg_logprob": -0.20700490629518187, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.04955725744366646}, {"id": 22, "seek": 16266, "start": 163.66, "end": 169.22, "text": " There is a special socket connection specifically designed to provide a communication between", "tokens": [50414, 821, 307, 257, 2121, 19741, 4984, 4682, 4761, 281, 2893, 257, 6101, 1296, 50692], "temperature": 0.0, "avg_logprob": -0.20700490629518187, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.04955725744366646}, {"id": 23, "seek": 16266, "start": 169.22, "end": 173.7, "text": " an enclave VM and the hypervisor.", "tokens": [50692, 364, 2058, 27995, 18038, 293, 264, 9848, 16457, 13, 50916], "temperature": 0.0, "avg_logprob": -0.20700490629518187, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.04955725744366646}, {"id": 24, "seek": 16266, "start": 173.7, "end": 180.85999999999999, "text": " Now we believe that any program doesn't matter how shy it is, it still wants to socialize", "tokens": [50916, 823, 321, 1697, 300, 604, 1461, 1177, 380, 1871, 577, 12685, 309, 307, 11, 309, 920, 2738, 281, 2093, 1125, 51274], "temperature": 0.0, "avg_logprob": -0.20700490629518187, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.04955725744366646}, {"id": 25, "seek": 16266, "start": 180.85999999999999, "end": 189.3, "text": " with the outside world because complete hermits are quite rare after all and it also wants", "tokens": [51274, 365, 264, 2380, 1002, 570, 3566, 720, 76, 1208, 366, 1596, 5892, 934, 439, 293, 309, 611, 2738, 51696], "temperature": 0.0, "avg_logprob": -0.20700490629518187, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.04955725744366646}, {"id": 26, "seek": 18930, "start": 189.3, "end": 196.74, "text": " to keep some personal diary with all the data and things it's done so it can reread", "tokens": [50364, 281, 1066, 512, 2973, 26492, 365, 439, 264, 1412, 293, 721, 309, 311, 1096, 370, 309, 393, 46453, 345, 50736], "temperature": 0.0, "avg_logprob": -0.19379278508628286, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.04687921330332756}, {"id": 27, "seek": 18930, "start": 196.74, "end": 199.10000000000002, "text": " it after the enclave has finished.", "tokens": [50736, 309, 934, 264, 2058, 27995, 575, 4335, 13, 50854], "temperature": 0.0, "avg_logprob": -0.19379278508628286, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.04687921330332756}, {"id": 28, "seek": 18930, "start": 199.10000000000002, "end": 201.70000000000002, "text": " Now bare Nitro doesn't provide all of those.", "tokens": [50854, 823, 6949, 37942, 340, 1177, 380, 2893, 439, 295, 729, 13, 50984], "temperature": 0.0, "avg_logprob": -0.19379278508628286, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.04687921330332756}, {"id": 29, "seek": 18930, "start": 201.70000000000002, "end": 210.54000000000002, "text": " As you can see it has no network capability out of the box and no durable storage.", "tokens": [50984, 1018, 291, 393, 536, 309, 575, 572, 3209, 13759, 484, 295, 264, 2424, 293, 572, 22308, 6725, 13, 51426], "temperature": 0.0, "avg_logprob": -0.19379278508628286, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.04687921330332756}, {"id": 30, "seek": 18930, "start": 210.54000000000002, "end": 215.34, "text": " It gives no networking capabilities inside the enclave meaning that the application inside", "tokens": [51426, 467, 2709, 572, 17985, 10862, 1854, 264, 2058, 27995, 3620, 300, 264, 3861, 1854, 51666], "temperature": 0.0, "avg_logprob": -0.19379278508628286, "compression_ratio": 1.6359223300970873, "no_speech_prob": 0.04687921330332756}, {"id": 31, "seek": 21534, "start": 215.34, "end": 221.18, "text": " the enclave can't connect to anything from the outside world and vice versa.", "tokens": [50364, 264, 2058, 27995, 393, 380, 1745, 281, 1340, 490, 264, 2380, 1002, 293, 11964, 25650, 13, 50656], "temperature": 0.0, "avg_logprob": -0.15432577598385694, "compression_ratio": 1.5205479452054795, "no_speech_prob": 0.033389199525117874}, {"id": 32, "seek": 21534, "start": 221.18, "end": 229.5, "text": " And for the persistent storage Nitro doesn't provide any form of that.", "tokens": [50656, 400, 337, 264, 24315, 6725, 37942, 340, 1177, 380, 2893, 604, 1254, 295, 300, 13, 51072], "temperature": 0.0, "avg_logprob": -0.15432577598385694, "compression_ratio": 1.5205479452054795, "no_speech_prob": 0.033389199525117874}, {"id": 33, "seek": 21534, "start": 229.5, "end": 235.38, "text": " The kernel inside Nitro VM is running on a RAM disk and it gets cleared after the enclave", "tokens": [51072, 440, 28256, 1854, 37942, 340, 18038, 307, 2614, 322, 257, 14561, 12355, 293, 309, 2170, 19725, 934, 264, 2058, 27995, 51366], "temperature": 0.0, "avg_logprob": -0.15432577598385694, "compression_ratio": 1.5205479452054795, "no_speech_prob": 0.033389199525117874}, {"id": 34, "seek": 21534, "start": 235.38, "end": 238.54, "text": " finishes.", "tokens": [51366, 23615, 13, 51524], "temperature": 0.0, "avg_logprob": -0.15432577598385694, "compression_ratio": 1.5205479452054795, "no_speech_prob": 0.033389199525117874}, {"id": 35, "seek": 21534, "start": 238.54, "end": 243.94, "text": " So all of it kind of drastically limits the number of useful applications can be run.", "tokens": [51524, 407, 439, 295, 309, 733, 295, 29673, 10406, 264, 1230, 295, 4420, 5821, 393, 312, 1190, 13, 51794], "temperature": 0.0, "avg_logprob": -0.15432577598385694, "compression_ratio": 1.5205479452054795, "no_speech_prob": 0.033389199525117874}, {"id": 36, "seek": 24394, "start": 243.94, "end": 249.74, "text": " On a bare Nitro for example if you want to run like a web server or a database you can't", "tokens": [50364, 1282, 257, 6949, 37942, 340, 337, 1365, 498, 291, 528, 281, 1190, 411, 257, 3670, 7154, 420, 257, 8149, 291, 393, 380, 50654], "temperature": 0.0, "avg_logprob": -0.24246966986008633, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.06359229236841202}, {"id": 37, "seek": 24394, "start": 249.74, "end": 256.74, "text": " do it on a bare Nitro but it won't provide much value to the end user because yeah the", "tokens": [50654, 360, 309, 322, 257, 6949, 37942, 340, 457, 309, 1582, 380, 2893, 709, 2158, 281, 264, 917, 4195, 570, 1338, 264, 51004], "temperature": 0.0, "avg_logprob": -0.24246966986008633, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.06359229236841202}, {"id": 38, "seek": 24394, "start": 256.74, "end": 261.98, "text": " big portion of functionality of those programs just is not supported.", "tokens": [51004, 955, 8044, 295, 14980, 295, 729, 4268, 445, 307, 406, 8104, 13, 51266], "temperature": 0.0, "avg_logprob": -0.24246966986008633, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.06359229236841202}, {"id": 39, "seek": 24394, "start": 261.98, "end": 266.98, "text": " And the salmic project that we created aims to solve those limitations by providing confidential", "tokens": [51266, 400, 264, 1845, 13195, 1716, 300, 321, 2942, 24683, 281, 5039, 729, 15705, 538, 6530, 27054, 51516], "temperature": 0.0, "avg_logprob": -0.24246966986008633, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.06359229236841202}, {"id": 40, "seek": 26698, "start": 266.98, "end": 274.42, "text": " program execution environment without sacrificing fundamental systems capabilities.", "tokens": [50364, 1461, 15058, 2823, 1553, 42294, 8088, 3652, 10862, 13, 50736], "temperature": 0.0, "avg_logprob": -0.2936778486820689, "compression_ratio": 1.412121212121212, "no_speech_prob": 0.10518256574869156}, {"id": 41, "seek": 26698, "start": 274.42, "end": 280.62, "text": " On a higher level the project looks like this.", "tokens": [50736, 1282, 257, 2946, 1496, 264, 1716, 1542, 411, 341, 13, 51046], "temperature": 0.0, "avg_logprob": -0.2936778486820689, "compression_ratio": 1.412121212121212, "no_speech_prob": 0.10518256574869156}, {"id": 42, "seek": 26698, "start": 280.62, "end": 287.34000000000003, "text": " Fundamentally it is a yeah it is a it's a Docker image that runs on a VM with a Nitro", "tokens": [51046, 13493, 2466, 379, 309, 307, 257, 1338, 309, 307, 257, 309, 311, 257, 33772, 3256, 300, 6676, 322, 257, 18038, 365, 257, 37942, 340, 51382], "temperature": 0.0, "avg_logprob": -0.2936778486820689, "compression_ratio": 1.412121212121212, "no_speech_prob": 0.10518256574869156}, {"id": 43, "seek": 26698, "start": 287.34000000000003, "end": 288.82, "text": " enclave enabled.", "tokens": [51382, 2058, 27995, 15172, 13, 51456], "temperature": 0.0, "avg_logprob": -0.2936778486820689, "compression_ratio": 1.412121212121212, "no_speech_prob": 0.10518256574869156}, {"id": 44, "seek": 28882, "start": 289.82, "end": 297.18, "text": " The only required argument that needs to be passed is the Nitro socket here on the right.", "tokens": [50414, 440, 787, 4739, 6770, 300, 2203, 281, 312, 4678, 307, 264, 37942, 340, 19741, 510, 322, 264, 558, 13, 50782], "temperature": 0.0, "avg_logprob": -0.16796514432724208, "compression_ratio": 1.4975124378109452, "no_speech_prob": 0.026980573311448097}, {"id": 45, "seek": 28882, "start": 297.18, "end": 301.34, "text": " And after that it behaves like any other Docker image would.", "tokens": [50782, 400, 934, 300, 309, 36896, 411, 604, 661, 33772, 3256, 576, 13, 50990], "temperature": 0.0, "avg_logprob": -0.16796514432724208, "compression_ratio": 1.4975124378109452, "no_speech_prob": 0.026980573311448097}, {"id": 46, "seek": 28882, "start": 301.34, "end": 310.74, "text": " You can you know you can start, stop it, monitor its status using your standard Docker commands.", "tokens": [50990, 509, 393, 291, 458, 291, 393, 722, 11, 1590, 309, 11, 6002, 1080, 6558, 1228, 428, 3832, 33772, 16901, 13, 51460], "temperature": 0.0, "avg_logprob": -0.16796514432724208, "compression_ratio": 1.4975124378109452, "no_speech_prob": 0.026980573311448097}, {"id": 47, "seek": 28882, "start": 310.74, "end": 314.62, "text": " Functionally the image can be divided into two parts.", "tokens": [51460, 11166, 882, 379, 264, 3256, 393, 312, 6666, 666, 732, 3166, 13, 51654], "temperature": 0.0, "avg_logprob": -0.16796514432724208, "compression_ratio": 1.4975124378109452, "no_speech_prob": 0.026980573311448097}, {"id": 48, "seek": 31462, "start": 314.62, "end": 318.14, "text": " One is called a parent and one called an enclave.", "tokens": [50364, 1485, 307, 1219, 257, 2596, 293, 472, 1219, 364, 2058, 27995, 13, 50540], "temperature": 0.0, "avg_logprob": -0.15486440393659803, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.053448256105184555}, {"id": 49, "seek": 31462, "start": 318.14, "end": 326.1, "text": " Those are internal names not to be confused with parent VM or Nitro enclave VM.", "tokens": [50540, 3950, 366, 6920, 5288, 406, 281, 312, 9019, 365, 2596, 18038, 420, 37942, 340, 2058, 27995, 18038, 13, 50938], "temperature": 0.0, "avg_logprob": -0.15486440393659803, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.053448256105184555}, {"id": 50, "seek": 31462, "start": 326.1, "end": 335.86, "text": " The enclave contains client application as well as a runner program of our creation.", "tokens": [50938, 440, 2058, 27995, 8306, 6423, 3861, 382, 731, 382, 257, 24376, 1461, 295, 527, 8016, 13, 51426], "temperature": 0.0, "avg_logprob": -0.15486440393659803, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.053448256105184555}, {"id": 51, "seek": 31462, "start": 335.86, "end": 342.22, "text": " Parent contains only a runner program and responsible for setting up networking and the file system", "tokens": [51426, 44717, 8306, 787, 257, 24376, 1461, 293, 6250, 337, 3287, 493, 17985, 293, 264, 3991, 1185, 51744], "temperature": 0.0, "avg_logprob": -0.15486440393659803, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.053448256105184555}, {"id": 52, "seek": 34222, "start": 342.22, "end": 348.78000000000003, "text": " as well as network enclave creation, its monitoring and termination.", "tokens": [50364, 382, 731, 382, 3209, 2058, 27995, 8016, 11, 1080, 11028, 293, 1433, 2486, 13, 50692], "temperature": 0.0, "avg_logprob": -0.26312384112127896, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009066309779882431}, {"id": 53, "seek": 34222, "start": 348.78000000000003, "end": 356.14000000000004, "text": " So and the only communication channel between those two is the VSOC connection.", "tokens": [50692, 407, 293, 264, 787, 6101, 2269, 1296, 729, 732, 307, 264, 691, 17188, 34, 4984, 13, 51060], "temperature": 0.0, "avg_logprob": -0.26312384112127896, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009066309779882431}, {"id": 54, "seek": 34222, "start": 356.14000000000004, "end": 362.34000000000003, "text": " This VSOC connection effectively creates like a confidational boundary between those two", "tokens": [51060, 639, 691, 17188, 34, 4984, 8659, 7829, 411, 257, 1497, 327, 1478, 12866, 1296, 729, 732, 51370], "temperature": 0.0, "avg_logprob": -0.26312384112127896, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009066309779882431}, {"id": 55, "seek": 34222, "start": 362.34000000000003, "end": 363.34000000000003, "text": " parts.", "tokens": [51370, 3166, 13, 51420], "temperature": 0.0, "avg_logprob": -0.26312384112127896, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009066309779882431}, {"id": 56, "seek": 36334, "start": 363.34, "end": 379.34, "text": " Yeah and shown the architectural area can go further to discuss how we implement networking.", "tokens": [50364, 865, 293, 4898, 264, 26621, 1859, 393, 352, 3052, 281, 2248, 577, 321, 4445, 17985, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3496191589920609, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.011880413629114628}, {"id": 57, "seek": 36334, "start": 379.34, "end": 385.14, "text": " So I'll make abstracts networking communication between client application and this outside", "tokens": [51164, 407, 286, 603, 652, 12649, 82, 17985, 6101, 1296, 6423, 3861, 293, 341, 2380, 51454], "temperature": 0.0, "avg_logprob": -0.3496191589920609, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.011880413629114628}, {"id": 58, "seek": 36334, "start": 385.14, "end": 390.38, "text": " world meaning that if someone wants to connect to the application inside the enclave the", "tokens": [51454, 1002, 3620, 300, 498, 1580, 2738, 281, 1745, 281, 264, 3861, 1854, 264, 2058, 27995, 264, 51716], "temperature": 0.0, "avg_logprob": -0.3496191589920609, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.011880413629114628}, {"id": 59, "seek": 39038, "start": 390.38, "end": 396.21999999999997, "text": " only thing one need is a networking address so it works the same as you would connect", "tokens": [50364, 787, 551, 472, 643, 307, 257, 17985, 2985, 370, 309, 1985, 264, 912, 382, 291, 576, 1745, 50656], "temperature": 0.0, "avg_logprob": -0.1515512221898788, "compression_ratio": 2.063953488372093, "no_speech_prob": 0.03447290137410164}, {"id": 60, "seek": 39038, "start": 396.21999999999997, "end": 402.1, "text": " to any other service running on the internet and the other way around the application", "tokens": [50656, 281, 604, 661, 2643, 2614, 322, 264, 4705, 293, 264, 661, 636, 926, 264, 3861, 50950], "temperature": 0.0, "avg_logprob": -0.1515512221898788, "compression_ratio": 2.063953488372093, "no_speech_prob": 0.03447290137410164}, {"id": 61, "seek": 39038, "start": 402.1, "end": 408.02, "text": " inside the enclave can connect to anything on the internet it also needs only the internet", "tokens": [50950, 1854, 264, 2058, 27995, 393, 1745, 281, 1340, 322, 264, 4705, 309, 611, 2203, 787, 264, 4705, 51246], "temperature": 0.0, "avg_logprob": -0.1515512221898788, "compression_ratio": 2.063953488372093, "no_speech_prob": 0.03447290137410164}, {"id": 62, "seek": 39038, "start": 408.02, "end": 417.14, "text": " address and the application inside the enclave doesn't know that it runs inside the enclave.", "tokens": [51246, 2985, 293, 264, 3861, 1854, 264, 2058, 27995, 1177, 380, 458, 300, 309, 6676, 1854, 264, 2058, 27995, 13, 51702], "temperature": 0.0, "avg_logprob": -0.1515512221898788, "compression_ratio": 2.063953488372093, "no_speech_prob": 0.03447290137410164}, {"id": 63, "seek": 41714, "start": 417.14, "end": 421.97999999999996, "text": " The common example of applications would be your common I don't know nginx web server", "tokens": [50364, 440, 2689, 1365, 295, 5821, 576, 312, 428, 2689, 286, 500, 380, 458, 297, 1494, 87, 3670, 7154, 50606], "temperature": 0.0, "avg_logprob": -0.22448367783517548, "compression_ratio": 1.4486486486486487, "no_speech_prob": 0.02733195573091507}, {"id": 64, "seek": 41714, "start": 421.97999999999996, "end": 436.34, "text": " that runs inside the enclave you can send web requests to it and it will answer to whomever.", "tokens": [50606, 300, 6676, 1854, 264, 2058, 27995, 291, 393, 2845, 3670, 12475, 281, 309, 293, 309, 486, 1867, 281, 315, 423, 331, 13, 51324], "temperature": 0.0, "avg_logprob": -0.22448367783517548, "compression_ratio": 1.4486486486486487, "no_speech_prob": 0.02733195573091507}, {"id": 65, "seek": 41714, "start": 436.34, "end": 441.78, "text": " So in details networking is implemented using a two part program called VSOC proxy as you", "tokens": [51324, 407, 294, 4365, 17985, 307, 12270, 1228, 257, 732, 644, 1461, 1219, 691, 17188, 34, 29690, 382, 291, 51596], "temperature": 0.0, "avg_logprob": -0.22448367783517548, "compression_ratio": 1.4486486486486487, "no_speech_prob": 0.02733195573091507}, {"id": 66, "seek": 44178, "start": 441.78, "end": 448.26, "text": " can see this is also a two part program similar to parent in the enclave on a previous slide", "tokens": [50364, 393, 536, 341, 307, 611, 257, 732, 644, 1461, 2531, 281, 2596, 294, 264, 2058, 27995, 322, 257, 3894, 4137, 50688], "temperature": 0.0, "avg_logprob": -0.222307436806815, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.2372865527868271}, {"id": 67, "seek": 44178, "start": 448.26, "end": 454.82, "text": " one runs inside the enclave one runs inside the parent they are both connected to and", "tokens": [50688, 472, 6676, 1854, 264, 2058, 27995, 472, 6676, 1854, 264, 2596, 436, 366, 1293, 4582, 281, 293, 51016], "temperature": 0.0, "avg_logprob": -0.222307436806815, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.2372865527868271}, {"id": 68, "seek": 44178, "start": 454.82, "end": 461.02, "text": " only VSOC.", "tokens": [51016, 787, 691, 17188, 34, 13, 51326], "temperature": 0.0, "avg_logprob": -0.222307436806815, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.2372865527868271}, {"id": 69, "seek": 44178, "start": 461.02, "end": 468.7, "text": " So one of the responsibilities of the parent and it is an entry point and the startup is", "tokens": [51326, 407, 472, 295, 264, 16190, 295, 264, 2596, 293, 309, 307, 364, 8729, 935, 293, 264, 18578, 307, 51710], "temperature": 0.0, "avg_logprob": -0.222307436806815, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.2372865527868271}, {"id": 70, "seek": 46870, "start": 468.7, "end": 476.97999999999996, "text": " to copy all the necessary network configuration of the network device on the right this is", "tokens": [50364, 281, 5055, 439, 264, 4818, 3209, 11694, 295, 264, 3209, 4302, 322, 264, 558, 341, 307, 50778], "temperature": 0.0, "avg_logprob": -0.1653287124633789, "compression_ratio": 1.8358974358974358, "no_speech_prob": 0.05277442932128906}, {"id": 71, "seek": 46870, "start": 476.97999999999996, "end": 483.26, "text": " a Docker network device propagate those settings inside the enclave and the enclave part of", "tokens": [50778, 257, 33772, 3209, 4302, 48256, 729, 6257, 1854, 264, 2058, 27995, 293, 264, 2058, 27995, 644, 295, 51092], "temperature": 0.0, "avg_logprob": -0.1653287124633789, "compression_ratio": 1.8358974358974358, "no_speech_prob": 0.05277442932128906}, {"id": 72, "seek": 46870, "start": 483.26, "end": 489.82, "text": " the VSOC proxy will recreate said network device or devices effectively mirroring it", "tokens": [51092, 264, 691, 17188, 34, 29690, 486, 25833, 848, 3209, 4302, 420, 5759, 8659, 8013, 278, 309, 51420], "temperature": 0.0, "avg_logprob": -0.1653287124633789, "compression_ratio": 1.8358974358974358, "no_speech_prob": 0.05277442932128906}, {"id": 73, "seek": 46870, "start": 489.82, "end": 496.26, "text": " inside the enclave but instead it will use virtual network device which is a functionality", "tokens": [51420, 1854, 264, 2058, 27995, 457, 2602, 309, 486, 764, 6374, 3209, 4302, 597, 307, 257, 14980, 51742], "temperature": 0.0, "avg_logprob": -0.1653287124633789, "compression_ratio": 1.8358974358974358, "no_speech_prob": 0.05277442932128906}, {"id": 74, "seek": 49626, "start": 496.26, "end": 503.74, "text": " provided by Linux kernel it's called tune or tap this is a functionality to read and", "tokens": [50364, 5649, 538, 18734, 28256, 309, 311, 1219, 10864, 420, 5119, 341, 307, 257, 14980, 281, 1401, 293, 50738], "temperature": 0.0, "avg_logprob": -0.208194708212828, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.14160463213920593}, {"id": 75, "seek": 49626, "start": 503.74, "end": 508.78, "text": " write networking packets using program and user space.", "tokens": [50738, 2464, 17985, 30364, 1228, 1461, 293, 4195, 1901, 13, 50990], "temperature": 0.0, "avg_logprob": -0.208194708212828, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.14160463213920593}, {"id": 76, "seek": 49626, "start": 508.78, "end": 514.18, "text": " If you are more interested in that you can check kernel.org they have a lot of information", "tokens": [50990, 759, 291, 366, 544, 3102, 294, 300, 291, 393, 1520, 28256, 13, 4646, 436, 362, 257, 688, 295, 1589, 51260], "temperature": 0.0, "avg_logprob": -0.208194708212828, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.14160463213920593}, {"id": 77, "seek": 49626, "start": 514.18, "end": 517.26, "text": " about it.", "tokens": [51260, 466, 309, 13, 51414], "temperature": 0.0, "avg_logprob": -0.208194708212828, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.14160463213920593}, {"id": 78, "seek": 49626, "start": 517.26, "end": 523.8199999999999, "text": " So after said devices have been created both parts VSOC proxy will start forwarding packets", "tokens": [51414, 407, 934, 848, 5759, 362, 668, 2942, 1293, 3166, 691, 17188, 34, 29690, 486, 722, 2128, 278, 30364, 51742], "temperature": 0.0, "avg_logprob": -0.208194708212828, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.14160463213920593}, {"id": 79, "seek": 52382, "start": 523.82, "end": 529.34, "text": " will forward from you know external network inside the enclave and the virtual device", "tokens": [50364, 486, 2128, 490, 291, 458, 8320, 3209, 1854, 264, 2058, 27995, 293, 264, 6374, 4302, 50640], "temperature": 0.0, "avg_logprob": -0.2693908536756361, "compression_ratio": 1.737327188940092, "no_speech_prob": 0.042814597487449646}, {"id": 80, "seek": 52382, "start": 529.34, "end": 536.1800000000001, "text": " inside the enclave will forward them in the opposite direction.", "tokens": [50640, 1854, 264, 2058, 27995, 486, 2128, 552, 294, 264, 6182, 3513, 13, 50982], "temperature": 0.0, "avg_logprob": -0.2693908536756361, "compression_ratio": 1.737327188940092, "no_speech_prob": 0.042814597487449646}, {"id": 81, "seek": 52382, "start": 536.1800000000001, "end": 543.58, "text": " Yeah sure so the only difference between those two becomes yeah effectively the direction", "tokens": [50982, 865, 988, 370, 264, 787, 2649, 1296, 729, 732, 3643, 1338, 8659, 264, 3513, 51352], "temperature": 0.0, "avg_logprob": -0.2693908536756361, "compression_ratio": 1.737327188940092, "no_speech_prob": 0.042814597487449646}, {"id": 82, "seek": 52382, "start": 543.58, "end": 548.58, "text": " they are transmitting networking packets.", "tokens": [51352, 436, 366, 7715, 2414, 17985, 30364, 13, 51602], "temperature": 0.0, "avg_logprob": -0.2693908536756361, "compression_ratio": 1.737327188940092, "no_speech_prob": 0.042814597487449646}, {"id": 83, "seek": 52382, "start": 548.58, "end": 552.3800000000001, "text": " Set architecture also supports multiple network interfaces as well as a private network between", "tokens": [51602, 8928, 9482, 611, 9346, 3866, 3209, 28416, 382, 731, 382, 257, 4551, 3209, 1296, 51792], "temperature": 0.0, "avg_logprob": -0.2693908536756361, "compression_ratio": 1.737327188940092, "no_speech_prob": 0.042814597487449646}, {"id": 84, "seek": 55238, "start": 552.38, "end": 557.38, "text": " parent and enclave private network makes two independent entities between parent and", "tokens": [50364, 2596, 293, 2058, 27995, 4551, 3209, 1669, 732, 6695, 16667, 1296, 2596, 293, 50614], "temperature": 0.0, "avg_logprob": -0.29862066817610233, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.22262975573539734}, {"id": 85, "seek": 55238, "start": 557.38, "end": 567.1, "text": " the enclave and it allows us to enable instant protocol between those two on top of the VSOC.", "tokens": [50614, 264, 2058, 27995, 293, 309, 4045, 505, 281, 9528, 9836, 10336, 1296, 729, 732, 322, 1192, 295, 264, 691, 17188, 34, 13, 51100], "temperature": 0.0, "avg_logprob": -0.29862066817610233, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.22262975573539734}, {"id": 86, "seek": 55238, "start": 567.1, "end": 571.14, "text": " This lays the foundation for a file system solution and this will be presented by my", "tokens": [51100, 639, 32714, 264, 7030, 337, 257, 3991, 1185, 3827, 293, 341, 486, 312, 8212, 538, 452, 51302], "temperature": 0.0, "avg_logprob": -0.29862066817610233, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.22262975573539734}, {"id": 87, "seek": 55238, "start": 571.14, "end": 579.14, "text": " colleague Arithi and I will pass you a mic.", "tokens": [51302, 13532, 1587, 355, 72, 293, 286, 486, 1320, 291, 257, 3123, 13, 51702], "temperature": 0.0, "avg_logprob": -0.29862066817610233, "compression_ratio": 1.566326530612245, "no_speech_prob": 0.22262975573539734}, {"id": 88, "seek": 57914, "start": 579.14, "end": 594.18, "text": " Okay hello everyone I will dive deeper into how we support persistent file system with", "tokens": [50364, 1033, 7751, 1518, 286, 486, 9192, 7731, 666, 577, 321, 1406, 24315, 3991, 1185, 365, 51116], "temperature": 0.0, "avg_logprob": -0.34637271996700403, "compression_ratio": 1.1775700934579438, "no_speech_prob": 0.03599981591105461}, {"id": 89, "seek": 57914, "start": 594.18, "end": 599.6999999999999, "text": " Nitro enclaves in our project from IAC.", "tokens": [51116, 37942, 340, 2058, 75, 5423, 294, 527, 1716, 490, 286, 4378, 13, 51392], "temperature": 0.0, "avg_logprob": -0.34637271996700403, "compression_ratio": 1.1775700934579438, "no_speech_prob": 0.03599981591105461}, {"id": 90, "seek": 59970, "start": 599.7, "end": 608.7, "text": " So I first wanted to go over how you actually create an enclave image using AWS Nitro.", "tokens": [50364, 407, 286, 700, 1415, 281, 352, 670, 577, 291, 767, 1884, 364, 2058, 27995, 3256, 1228, 17650, 37942, 340, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21887664794921874, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.159577414393425}, {"id": 91, "seek": 59970, "start": 608.7, "end": 615.1400000000001, "text": " AWS does provide us with a command line tool Nitro CLI.", "tokens": [50814, 17650, 775, 2893, 505, 365, 257, 5622, 1622, 2290, 37942, 340, 12855, 40, 13, 51136], "temperature": 0.0, "avg_logprob": -0.21887664794921874, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.159577414393425}, {"id": 92, "seek": 59970, "start": 615.1400000000001, "end": 622.3000000000001, "text": " It's used for managing the life cycles of Nitro enclaves you can build an enclave you", "tokens": [51136, 467, 311, 1143, 337, 11642, 264, 993, 17796, 295, 37942, 340, 2058, 75, 5423, 291, 393, 1322, 364, 2058, 27995, 291, 51494], "temperature": 0.0, "avg_logprob": -0.21887664794921874, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.159577414393425}, {"id": 93, "seek": 59970, "start": 622.3000000000001, "end": 629.3000000000001, "text": " can run it you can check its status whether it's running or not how much CPU it's using", "tokens": [51494, 393, 1190, 309, 291, 393, 1520, 1080, 6558, 1968, 309, 311, 2614, 420, 406, 577, 709, 13199, 309, 311, 1228, 51844], "temperature": 0.0, "avg_logprob": -0.21887664794921874, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.159577414393425}, {"id": 94, "seek": 62930, "start": 629.3, "end": 635.8599999999999, "text": " or memory it's using and in particular I wanted to discuss the build enclave command", "tokens": [50364, 420, 4675, 309, 311, 1228, 293, 294, 1729, 286, 1415, 281, 2248, 264, 1322, 2058, 27995, 5622, 50692], "temperature": 0.0, "avg_logprob": -0.16471919705790858, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05817410349845886}, {"id": 95, "seek": 62930, "start": 635.8599999999999, "end": 644.0999999999999, "text": " which allows you to provide as input a docker image which has your application that you", "tokens": [50692, 597, 4045, 291, 281, 2893, 382, 4846, 257, 360, 9178, 3256, 597, 575, 428, 3861, 300, 291, 51104], "temperature": 0.0, "avg_logprob": -0.16471919705790858, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05817410349845886}, {"id": 96, "seek": 62930, "start": 644.0999999999999, "end": 652.9399999999999, "text": " want to run inside an enclave and it gives you an enclave image file and along with an", "tokens": [51104, 528, 281, 1190, 1854, 364, 2058, 27995, 293, 309, 2709, 291, 364, 2058, 27995, 3256, 3991, 293, 2051, 365, 364, 51546], "temperature": 0.0, "avg_logprob": -0.16471919705790858, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05817410349845886}, {"id": 97, "seek": 65294, "start": 652.94, "end": 661.1800000000001, "text": " enclave image file it also gives you enclave measurements which are later used by the", "tokens": [50364, 2058, 27995, 3256, 3991, 309, 611, 2709, 291, 2058, 27995, 15383, 597, 366, 1780, 1143, 538, 264, 50776], "temperature": 0.0, "avg_logprob": -0.24753535588582357, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.11089929938316345}, {"id": 98, "seek": 65294, "start": 661.1800000000001, "end": 668.58, "text": " enclave itself to prove its identity and build trust with an external service that's basically", "tokens": [50776, 2058, 27995, 2564, 281, 7081, 1080, 6575, 293, 1322, 3361, 365, 364, 8320, 2643, 300, 311, 1936, 51146], "temperature": 0.0, "avg_logprob": -0.24753535588582357, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.11089929938316345}, {"id": 99, "seek": 65294, "start": 668.58, "end": 674.6600000000001, "text": " Amazon.", "tokens": [51146, 6795, 13, 51450], "temperature": 0.0, "avg_logprob": -0.24753535588582357, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.11089929938316345}, {"id": 100, "seek": 65294, "start": 674.6600000000001, "end": 680.5400000000001, "text": " So how do we do it different in SOMIAC project?", "tokens": [51450, 407, 577, 360, 321, 360, 309, 819, 294, 318, 5251, 40, 4378, 1716, 30, 51744], "temperature": 0.0, "avg_logprob": -0.24753535588582357, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.11089929938316345}, {"id": 101, "seek": 68054, "start": 680.54, "end": 689.3399999999999, "text": " We don't just create an enclave image file we create a Nitro docker image from the input", "tokens": [50364, 492, 500, 380, 445, 1884, 364, 2058, 27995, 3256, 3991, 321, 1884, 257, 37942, 340, 360, 9178, 3256, 490, 264, 4846, 50804], "temperature": 0.0, "avg_logprob": -0.15667496787177193, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.051747459918260574}, {"id": 102, "seek": 68054, "start": 689.3399999999999, "end": 694.86, "text": " image that we get.", "tokens": [50804, 3256, 300, 321, 483, 13, 51080], "temperature": 0.0, "avg_logprob": -0.15667496787177193, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.051747459918260574}, {"id": 103, "seek": 68054, "start": 694.86, "end": 703.86, "text": " So the first step that we do is look at the input docker image and export the image file", "tokens": [51080, 407, 264, 700, 1823, 300, 321, 360, 307, 574, 412, 264, 4846, 360, 9178, 3256, 293, 10725, 264, 3256, 3991, 51530], "temperature": 0.0, "avg_logprob": -0.15667496787177193, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.051747459918260574}, {"id": 104, "seek": 70386, "start": 703.86, "end": 713.3000000000001, "text": " system into a block file let's call it init image and we store it into a block file with", "tokens": [50364, 1185, 666, 257, 3461, 3991, 718, 311, 818, 309, 3157, 3256, 293, 321, 3531, 309, 666, 257, 3461, 3991, 365, 50836], "temperature": 0.0, "avg_logprob": -0.32619141517801487, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.11410992592573166}, {"id": 105, "seek": 70386, "start": 713.3000000000001, "end": 722.74, "text": " the help of DM verity it's a Linux kernel device mapper tool it uses the kernel scriptor", "tokens": [50836, 264, 854, 295, 15322, 1306, 507, 309, 311, 257, 18734, 28256, 4302, 463, 3717, 2290, 309, 4960, 264, 28256, 5755, 284, 51308], "temperature": 0.0, "avg_logprob": -0.32619141517801487, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.11410992592573166}, {"id": 106, "seek": 72274, "start": 722.74, "end": 734.22, "text": " API to protect the integrity of the initial input image so what happens at the time of", "tokens": [50364, 9362, 281, 2371, 264, 16000, 295, 264, 5883, 4846, 3256, 370, 437, 2314, 412, 264, 565, 295, 50938], "temperature": 0.0, "avg_logprob": -0.10437262058258057, "compression_ratio": 1.66875, "no_speech_prob": 0.23869588971138}, {"id": 107, "seek": 72274, "start": 734.22, "end": 742.1800000000001, "text": " creating an enclave image is that it creates a hash tree of the storage blocks present", "tokens": [50938, 4084, 364, 2058, 27995, 3256, 307, 300, 309, 7829, 257, 22019, 4230, 295, 264, 6725, 8474, 1974, 51336], "temperature": 0.0, "avg_logprob": -0.10437262058258057, "compression_ratio": 1.66875, "no_speech_prob": 0.23869588971138}, {"id": 108, "seek": 72274, "start": 742.1800000000001, "end": 749.22, "text": " in the device and it ends up giving us a root hash and we store this root hash in the enclave", "tokens": [51336, 294, 264, 4302, 293, 309, 5314, 493, 2902, 505, 257, 5593, 22019, 293, 321, 3531, 341, 5593, 22019, 294, 264, 2058, 27995, 51688], "temperature": 0.0, "avg_logprob": -0.10437262058258057, "compression_ratio": 1.66875, "no_speech_prob": 0.23869588971138}, {"id": 109, "seek": 74922, "start": 749.22, "end": 760.26, "text": " image file and we also create another empty block file let's call it run dot image and", "tokens": [50364, 3256, 3991, 293, 321, 611, 1884, 1071, 6707, 3461, 3991, 718, 311, 818, 309, 1190, 5893, 3256, 293, 50916], "temperature": 0.0, "avg_logprob": -0.13868372368090082, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.032466355711221695}, {"id": 110, "seek": 74922, "start": 760.26, "end": 766.6600000000001, "text": " I'll discuss more about it in the future slides so as you can see here the input docker image", "tokens": [50916, 286, 603, 2248, 544, 466, 309, 294, 264, 2027, 9788, 370, 382, 291, 393, 536, 510, 264, 4846, 360, 9178, 3256, 51236], "temperature": 0.0, "avg_logprob": -0.13868372368090082, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.032466355711221695}, {"id": 111, "seek": 74922, "start": 766.6600000000001, "end": 774.4200000000001, "text": " is converted into a Nitro docker image which consists of the block files the enclave image", "tokens": [51236, 307, 16424, 666, 257, 37942, 340, 360, 9178, 3256, 597, 14689, 295, 264, 3461, 7098, 264, 2058, 27995, 3256, 51624], "temperature": 0.0, "avg_logprob": -0.13868372368090082, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.032466355711221695}, {"id": 112, "seek": 77442, "start": 774.42, "end": 785.06, "text": " file and foot annex software which is Somiak so the next step is what happens at runtime", "tokens": [50364, 3991, 293, 2671, 41012, 4722, 597, 307, 318, 9220, 514, 370, 264, 958, 1823, 307, 437, 2314, 412, 34474, 50896], "temperature": 0.0, "avg_logprob": -0.21693144422588925, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.030613761395215988}, {"id": 113, "seek": 77442, "start": 785.06, "end": 791.5, "text": " and how do we make these block files which were present in the docker image inside the", "tokens": [50896, 293, 577, 360, 321, 652, 613, 3461, 7098, 597, 645, 1974, 294, 264, 360, 9178, 3256, 1854, 264, 51218], "temperature": 0.0, "avg_logprob": -0.21693144422588925, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.030613761395215988}, {"id": 114, "seek": 77442, "start": 791.5, "end": 802.3399999999999, "text": " enclave so we use nbd the network block device protocol to be able to serve these block files", "tokens": [51218, 2058, 27995, 370, 321, 764, 297, 65, 67, 264, 3209, 3461, 4302, 10336, 281, 312, 1075, 281, 4596, 613, 3461, 7098, 51760], "temperature": 0.0, "avg_logprob": -0.21693144422588925, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.030613761395215988}, {"id": 115, "seek": 80234, "start": 802.34, "end": 813.26, "text": " which are present in the parent docker container into the enclave and it's over the network", "tokens": [50364, 597, 366, 1974, 294, 264, 2596, 360, 9178, 10129, 666, 264, 2058, 27995, 293, 309, 311, 670, 264, 3209, 50910], "temperature": 0.0, "avg_logprob": -0.1779292977374533, "compression_ratio": 1.371212121212121, "no_speech_prob": 0.0171442162245512}, {"id": 116, "seek": 80234, "start": 813.26, "end": 821.82, "text": " so we take we make use of the VSOC proxy that Nikita discussed earlier so each block file", "tokens": [50910, 370, 321, 747, 321, 652, 764, 295, 264, 691, 17188, 34, 29690, 300, 13969, 2786, 7152, 3071, 370, 1184, 3461, 3991, 51338], "temperature": 0.0, "avg_logprob": -0.1779292977374533, "compression_ratio": 1.371212121212121, "no_speech_prob": 0.0171442162245512}, {"id": 117, "seek": 82182, "start": 821.82, "end": 834.46, "text": " is is served through the nbd server program which runs on the parent side and they both", "tokens": [50364, 307, 307, 7584, 807, 264, 297, 65, 67, 7154, 1461, 597, 6676, 322, 264, 2596, 1252, 293, 436, 1293, 50996], "temperature": 0.0, "avg_logprob": -0.13759423840430476, "compression_ratio": 1.8652482269503545, "no_speech_prob": 0.10652186721563339}, {"id": 118, "seek": 82182, "start": 834.46, "end": 840.34, "text": " use different ports on the server and inside the enclave we have the nbd client program", "tokens": [50996, 764, 819, 18160, 322, 264, 7154, 293, 1854, 264, 2058, 27995, 321, 362, 264, 297, 65, 67, 6423, 1461, 51290], "temperature": 0.0, "avg_logprob": -0.13759423840430476, "compression_ratio": 1.8652482269503545, "no_speech_prob": 0.10652186721563339}, {"id": 119, "seek": 82182, "start": 840.34, "end": 847.5, "text": " which runs we have two clients which access the server on two separate ports to provide", "tokens": [51290, 597, 6676, 321, 362, 732, 6982, 597, 2105, 264, 7154, 322, 732, 4994, 18160, 281, 2893, 51648], "temperature": 0.0, "avg_logprob": -0.13759423840430476, "compression_ratio": 1.8652482269503545, "no_speech_prob": 0.10652186721563339}, {"id": 120, "seek": 84750, "start": 847.5, "end": 864.18, "text": " us with two devices let's call it dev read and dev write okay so once we have the once", "tokens": [50364, 505, 365, 732, 5759, 718, 311, 818, 309, 1905, 1401, 293, 1905, 2464, 1392, 370, 1564, 321, 362, 264, 1564, 51198], "temperature": 0.0, "avg_logprob": -0.1673274252149794, "compression_ratio": 1.5446428571428572, "no_speech_prob": 0.18446482717990875}, {"id": 121, "seek": 84750, "start": 864.18, "end": 876.34, "text": " we have the block devices in the inside the enclave how do we actually mount it we use", "tokens": [51198, 321, 362, 264, 3461, 5759, 294, 264, 1854, 264, 2058, 27995, 577, 360, 321, 767, 3746, 309, 321, 764, 51806], "temperature": 0.0, "avg_logprob": -0.1673274252149794, "compression_ratio": 1.5446428571428572, "no_speech_prob": 0.18446482717990875}, {"id": 122, "seek": 87634, "start": 877.1800000000001, "end": 883.5400000000001, "text": " I think I made a mistake here in the previous slide I did mention the read and dev write", "tokens": [50406, 286, 519, 286, 1027, 257, 6146, 510, 294, 264, 3894, 4137, 286, 630, 2152, 264, 1401, 293, 1905, 2464, 50724], "temperature": 0.0, "avg_logprob": -0.2987330063529637, "compression_ratio": 1.6582278481012658, "no_speech_prob": 0.07568511366844177}, {"id": 123, "seek": 87634, "start": 883.5400000000001, "end": 893.74, "text": " I want to change that to dev init so we use the emberty again to open the dev init device", "tokens": [50724, 286, 528, 281, 1319, 300, 281, 1905, 3157, 370, 321, 764, 264, 846, 607, 874, 797, 281, 1269, 264, 1905, 3157, 4302, 51234], "temperature": 0.0, "avg_logprob": -0.2987330063529637, "compression_ratio": 1.6582278481012658, "no_speech_prob": 0.07568511366844177}, {"id": 124, "seek": 87634, "start": 893.74, "end": 900.6600000000001, "text": " and when we do use the emberty we provide the root hash from the enclave image file", "tokens": [51234, 293, 562, 321, 360, 764, 264, 846, 607, 874, 321, 2893, 264, 5593, 22019, 490, 264, 2058, 27995, 3256, 3991, 51580], "temperature": 0.0, "avg_logprob": -0.2987330063529637, "compression_ratio": 1.6582278481012658, "no_speech_prob": 0.07568511366844177}, {"id": 125, "seek": 90066, "start": 900.66, "end": 908.5799999999999, "text": " so when the emberty opens up the block device it makes sure that the hash tree it constructed", "tokens": [50364, 370, 562, 264, 846, 607, 874, 9870, 493, 264, 3461, 4302, 309, 1669, 988, 300, 264, 22019, 4230, 309, 17083, 50760], "temperature": 0.0, "avg_logprob": -0.1920040722551017, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0058155786246061325}, {"id": 126, "seek": 90066, "start": 908.5799999999999, "end": 918.02, "text": " at enclave image creation time matches what it finds at runtime so this way the initial", "tokens": [50760, 412, 2058, 27995, 3256, 8016, 565, 10676, 437, 309, 10704, 412, 34474, 370, 341, 636, 264, 5883, 51232], "temperature": 0.0, "avg_logprob": -0.1920040722551017, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0058155786246061325}, {"id": 127, "seek": 90066, "start": 918.02, "end": 925.78, "text": " contents of your client image are preserved it provides integrity protection this way", "tokens": [51232, 15768, 295, 428, 6423, 3256, 366, 22242, 309, 6417, 16000, 6334, 341, 636, 51620], "temperature": 0.0, "avg_logprob": -0.1920040722551017, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0058155786246061325}, {"id": 128, "seek": 92578, "start": 925.78, "end": 940.9, "text": " and let's say we mounted at a location mount lower and we have a second device which was", "tokens": [50364, 293, 718, 311, 584, 321, 19138, 412, 257, 4914, 3746, 3126, 293, 321, 362, 257, 1150, 4302, 597, 390, 51120], "temperature": 0.0, "avg_logprob": -0.1808118184407552, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.016104651615023613}, {"id": 129, "seek": 92578, "start": 940.9, "end": 951.26, "text": " mounted as dev run so this device is open using dmcrypt it is another device mapper", "tokens": [51120, 19138, 382, 1905, 1190, 370, 341, 4302, 307, 1269, 1228, 274, 76, 46555, 662, 309, 307, 1071, 4302, 463, 3717, 51638], "temperature": 0.0, "avg_logprob": -0.1808118184407552, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.016104651615023613}, {"id": 130, "seek": 95126, "start": 951.26, "end": 962.02, "text": " tool provided by the Linux kernel it is used to encrypt a block device and on the first", "tokens": [50364, 2290, 5649, 538, 264, 18734, 28256, 309, 307, 1143, 281, 17972, 662, 257, 3461, 4302, 293, 322, 264, 700, 50902], "temperature": 0.0, "avg_logprob": -0.1858353465795517, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.06261379271745682}, {"id": 131, "seek": 95126, "start": 962.02, "end": 971.02, "text": " launch of the application what we do is we format this device into loops to device and", "tokens": [50902, 4025, 295, 264, 3861, 437, 321, 360, 307, 321, 7877, 341, 4302, 666, 16121, 281, 4302, 293, 51352], "temperature": 0.0, "avg_logprob": -0.1858353465795517, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.06261379271745682}, {"id": 132, "seek": 95126, "start": 971.02, "end": 979.14, "text": " create an exe force file system on it and right now we're using the default cipher and", "tokens": [51352, 1884, 364, 454, 68, 3464, 3991, 1185, 322, 309, 293, 558, 586, 321, 434, 1228, 264, 7576, 269, 21240, 293, 51758], "temperature": 0.0, "avg_logprob": -0.1858353465795517, "compression_ratio": 1.544378698224852, "no_speech_prob": 0.06261379271745682}, {"id": 133, "seek": 97914, "start": 979.14, "end": 989.22, "text": " the encryption key used can either be generated randomly or you can use an external key service", "tokens": [50364, 264, 29575, 2141, 1143, 393, 2139, 312, 10833, 16979, 420, 291, 393, 764, 364, 8320, 2141, 2643, 50868], "temperature": 0.0, "avg_logprob": -0.17315906431616807, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04142926633358002}, {"id": 134, "seek": 97914, "start": 989.22, "end": 998.78, "text": " to use the encryption key so let's say we mount this dev run device at directory mount", "tokens": [50868, 281, 764, 264, 29575, 2141, 370, 718, 311, 584, 321, 3746, 341, 1905, 1190, 4302, 412, 21120, 3746, 51346], "temperature": 0.0, "avg_logprob": -0.17315906431616807, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04142926633358002}, {"id": 135, "seek": 99878, "start": 998.78, "end": 1011.5, "text": " upper so we have two sets of file system layers here mount upper and mount lower and", "tokens": [50364, 6597, 370, 321, 362, 732, 6352, 295, 3991, 1185, 7914, 510, 3746, 6597, 293, 3746, 3126, 293, 51000], "temperature": 0.0, "avg_logprob": -0.14978810548782348, "compression_ratio": 1.4824561403508771, "no_speech_prob": 0.022267969325184822}, {"id": 136, "seek": 99878, "start": 1011.5, "end": 1018.06, "text": " we need to combine this and provide it to our client application that we want to run", "tokens": [51000, 321, 643, 281, 10432, 341, 293, 2893, 309, 281, 527, 6423, 3861, 300, 321, 528, 281, 1190, 51328], "temperature": 0.0, "avg_logprob": -0.14978810548782348, "compression_ratio": 1.4824561403508771, "no_speech_prob": 0.022267969325184822}, {"id": 137, "seek": 101806, "start": 1018.06, "end": 1029.02, "text": " so we use an overlay mount here to merge the two the merge the two and provide it as mount root", "tokens": [50364, 370, 321, 764, 364, 31741, 3746, 510, 281, 22183, 264, 732, 264, 22183, 264, 732, 293, 2893, 309, 382, 3746, 5593, 50912], "temperature": 0.0, "avg_logprob": -0.21810391891834346, "compression_ratio": 1.5080645161290323, "no_speech_prob": 0.007444662973284721}, {"id": 138, "seek": 101806, "start": 1029.8999999999999, "end": 1039.34, "text": " so this allows the client application to read verified data from the image block file which", "tokens": [50956, 370, 341, 4045, 264, 6423, 3861, 281, 1401, 31197, 1412, 490, 264, 3256, 3461, 3991, 597, 51428], "temperature": 0.0, "avg_logprob": -0.21810391891834346, "compression_ratio": 1.5080645161290323, "no_speech_prob": 0.007444662973284721}, {"id": 139, "seek": 103934, "start": 1039.34, "end": 1049.1399999999999, "text": " is presented as mount lower as you can see and any changes in the state of the file system", "tokens": [50364, 307, 8212, 382, 3746, 3126, 382, 291, 393, 536, 293, 604, 2962, 294, 264, 1785, 295, 264, 3991, 1185, 50854], "temperature": 0.0, "avg_logprob": -0.1959927732294256, "compression_ratio": 1.5121951219512195, "no_speech_prob": 0.15123271942138672}, {"id": 140, "seek": 103934, "start": 1049.1399999999999, "end": 1059.5, "text": " during enclave runtime is saved or the state is saved in mount upper which is basically the run", "tokens": [50854, 1830, 2058, 27995, 34474, 307, 6624, 420, 264, 1785, 307, 6624, 294, 3746, 6597, 597, 307, 1936, 264, 1190, 51372], "temperature": 0.0, "avg_logprob": -0.1959927732294256, "compression_ratio": 1.5121951219512195, "no_speech_prob": 0.15123271942138672}, {"id": 141, "seek": 105950, "start": 1060.26, "end": 1079.22, "text": " image block file and yeah so once we set up the overlay file system we need to change the root of", "tokens": [50402, 3256, 3461, 3991, 293, 1338, 370, 1564, 321, 992, 493, 264, 31741, 3991, 1185, 321, 643, 281, 1319, 264, 5593, 295, 51350], "temperature": 0.0, "avg_logprob": -0.3303978729248047, "compression_ratio": 1.2278481012658229, "no_speech_prob": 0.01904403045773506}, {"id": 142, "seek": 107922, "start": 1079.54, "end": 1087.7, "text": " the file system here so that the client application is unaware of these different", "tokens": [50380, 264, 3991, 1185, 510, 370, 300, 264, 6423, 3861, 307, 32065, 295, 613, 819, 50788], "temperature": 0.0, "avg_logprob": -0.1992120277590868, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.007680507376790047}, {"id": 143, "seek": 107922, "start": 1087.7, "end": 1099.1000000000001, "text": " layers that we have so we use to root to change the root of the client file system and once we", "tokens": [50788, 7914, 300, 321, 362, 370, 321, 764, 281, 5593, 281, 1319, 264, 5593, 295, 264, 6423, 3991, 1185, 293, 1564, 321, 51358], "temperature": 0.0, "avg_logprob": -0.1992120277590868, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.007680507376790047}, {"id": 144, "seek": 109910, "start": 1099.86, "end": 1107.6999999999998, "text": " root and we also bind on some of the system directories such as dev proxies", "tokens": [50402, 5593, 293, 321, 611, 14786, 322, 512, 295, 264, 1185, 5391, 530, 1270, 382, 1905, 447, 87, 530, 50794], "temperature": 0.0, "avg_logprob": -0.32758424220941007, "compression_ratio": 1.347457627118644, "no_speech_prob": 0.018219567835330963}, {"id": 145, "seek": 109910, "start": 1107.6999999999998, "end": 1120.58, "text": " yeah I think that should give the client application everything it needs to run its", "tokens": [50794, 1338, 286, 519, 300, 820, 976, 264, 6423, 3861, 1203, 309, 2203, 281, 1190, 1080, 51438], "temperature": 0.0, "avg_logprob": -0.32758424220941007, "compression_ratio": 1.347457627118644, "no_speech_prob": 0.018219567835330963}, {"id": 146, "seek": 112058, "start": 1120.6599999999999, "end": 1138.54, "text": " application and yeah save any state changes into the block device and yeah I think that's all I", "tokens": [50368, 3861, 293, 1338, 3155, 604, 1785, 2962, 666, 264, 3461, 4302, 293, 1338, 286, 519, 300, 311, 439, 286, 51262], "temperature": 0.0, "avg_logprob": -0.19651394355587842, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.04940274357795715}, {"id": 147, "seek": 112058, "start": 1138.54, "end": 1146.5, "text": " have if you have any questions about any of the networking or the file system persistence", "tokens": [51262, 362, 498, 291, 362, 604, 1651, 466, 604, 295, 264, 17985, 420, 264, 3991, 1185, 37617, 51660], "temperature": 0.0, "avg_logprob": -0.19651394355587842, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.04940274357795715}, {"id": 148, "seek": 114650, "start": 1147.1, "end": 1148.94, "text": " you can ask me on the key to about it", "tokens": [50394, 291, 393, 1029, 385, 322, 264, 2141, 281, 466, 309, 50486], "temperature": 0.0, "avg_logprob": -0.4686533394506422, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.02840599976480007}, {"id": 149, "seek": 114650, "start": 1157.38, "end": 1158.38, "text": " yeah", "tokens": [50908, 1338, 50958], "temperature": 0.0, "avg_logprob": -0.4686533394506422, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.02840599976480007}, {"id": 150, "seek": 114650, "start": 1158.38, "end": 1162.78, "text": " maybe talk a little bit about performance I mean you're telling everything through the VSOC", "tokens": [50958, 1310, 751, 257, 707, 857, 466, 3389, 286, 914, 291, 434, 3585, 1203, 807, 264, 691, 17188, 34, 51178], "temperature": 0.0, "avg_logprob": -0.4686533394506422, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.02840599976480007}, {"id": 151, "seek": 114650, "start": 1162.78, "end": 1176.18, "text": " is there any boundaries you hit or I would see we have okay the question is how does it impact", "tokens": [51178, 307, 456, 604, 13180, 291, 2045, 420, 286, 576, 536, 321, 362, 1392, 264, 1168, 307, 577, 775, 309, 2712, 51848], "temperature": 0.0, "avg_logprob": -0.4686533394506422, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.02840599976480007}, {"id": 152, "seek": 117618, "start": 1176.22, "end": 1184.3400000000001, "text": " performance of the application we haven't yet measured what is the performance implications", "tokens": [50366, 3389, 295, 264, 3861, 321, 2378, 380, 1939, 12690, 437, 307, 264, 3389, 16602, 50772], "temperature": 0.0, "avg_logprob": -0.15160429783356497, "compression_ratio": 1.472, "no_speech_prob": 0.02082889713346958}, {"id": 153, "seek": 117618, "start": 1184.3400000000001, "end": 1192.66, "text": " of it yet but this was more of being able to support what was initially not supported by AWS", "tokens": [50772, 295, 309, 1939, 457, 341, 390, 544, 295, 885, 1075, 281, 1406, 437, 390, 9105, 406, 8104, 538, 17650, 51188], "temperature": 0.0, "avg_logprob": -0.15160429783356497, "compression_ratio": 1.472, "no_speech_prob": 0.02082889713346958}, {"id": 154, "seek": 119266, "start": 1192.66, "end": 1197.3400000000001, "text": " Nitro any other questions", "tokens": [50364, 37942, 340, 604, 661, 1651, 50598], "temperature": 0.0, "avg_logprob": -0.5138520905465791, "compression_ratio": 1.2127659574468086, "no_speech_prob": 0.03330904245376587}, {"id": 155, "seek": 119266, "start": 1210.3400000000001, "end": 1218.6200000000001, "text": " is this one yes okay the question is is the DEE architecture of Nitro similar to TDX and", "tokens": [51248, 307, 341, 472, 2086, 1392, 264, 1168, 307, 307, 264, 10113, 36, 9482, 295, 37942, 340, 2531, 281, 314, 35, 55, 293, 51662], "temperature": 0.0, "avg_logprob": -0.5138520905465791, "compression_ratio": 1.2127659574468086, "no_speech_prob": 0.03330904245376587}, {"id": 156, "seek": 121862, "start": 1218.62, "end": 1226.5, "text": " SCV I suppose it is a closed system by AWS only so how can users verify that Nitro is secure", "tokens": [50364, 9028, 53, 286, 7297, 309, 307, 257, 5395, 1185, 538, 17650, 787, 370, 577, 393, 5022, 16888, 300, 37942, 340, 307, 7144, 50758], "temperature": 0.0, "avg_logprob": -0.25357842445373535, "compression_ratio": 1.2847222222222223, "no_speech_prob": 0.03048083744943142}, {"id": 157, "seek": 121862, "start": 1226.5, "end": 1243.06, "text": " okay I'm afraid I I don't know the comparison with SCV and the other platform mentioned here", "tokens": [50758, 1392, 286, 478, 4638, 286, 286, 500, 380, 458, 264, 9660, 365, 9028, 53, 293, 264, 661, 3663, 2835, 510, 51586], "temperature": 0.0, "avg_logprob": -0.25357842445373535, "compression_ratio": 1.2847222222222223, "no_speech_prob": 0.03048083744943142}, {"id": 158, "seek": 124306, "start": 1243.06, "end": 1251.3, "text": " but you need to be able to trust AWS if you trust AWS you trust the system apart from AWS", "tokens": [50364, 457, 291, 643, 281, 312, 1075, 281, 3361, 17650, 498, 291, 3361, 17650, 291, 3361, 264, 1185, 4936, 490, 17650, 50776], "temperature": 0.0, "avg_logprob": -0.2668018605973985, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03782430663704872}, {"id": 159, "seek": 124306, "start": 1251.3, "end": 1258.78, "text": " there's no one else that can access the contents as far as we know the Nitro Sela is open", "tokens": [50776, 456, 311, 572, 472, 1646, 300, 393, 2105, 264, 15768, 382, 1400, 382, 321, 458, 264, 37942, 340, 318, 4053, 307, 1269, 51150], "temperature": 0.0, "avg_logprob": -0.2668018605973985, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03782430663704872}, {"id": 160, "seek": 124306, "start": 1266.78, "end": 1270.8999999999999, "text": " yeah so as far as I know I mean the Nitro Sela is open source right but the hardware that", "tokens": [51550, 1338, 370, 382, 1400, 382, 286, 458, 286, 914, 264, 37942, 340, 318, 4053, 307, 1269, 4009, 558, 457, 264, 8837, 300, 51756], "temperature": 0.0, "avg_logprob": -0.2668018605973985, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03782430663704872}, {"id": 161, "seek": 127090, "start": 1270.9, "end": 1277.26, "text": " Dunkleys run on it's done by Amazon I don't know probably ordered by them whatever so you have", "tokens": [50364, 47183, 306, 749, 1190, 322, 309, 311, 1096, 538, 6795, 286, 500, 380, 458, 1391, 8866, 538, 552, 2035, 370, 291, 362, 50682], "temperature": 0.0, "avg_logprob": -0.272528803026354, "compression_ratio": 1.2612612612612613, "no_speech_prob": 0.0733124241232872}, {"id": 162, "seek": 127090, "start": 1277.26, "end": 1282.5, "text": " to trust them for the hardware yeah that's it", "tokens": [50682, 281, 3361, 552, 337, 264, 8837, 1338, 300, 311, 309, 50944], "temperature": 0.0, "avg_logprob": -0.272528803026354, "compression_ratio": 1.2612612612612613, "no_speech_prob": 0.0733124241232872}], "language": "en"}