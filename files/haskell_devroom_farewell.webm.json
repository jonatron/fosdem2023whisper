{"text": " So, thank you everyone who has come today, those who are here and those who are not in the room and were earlier. I would like to thank our speakers, Julia, Methodis and Renaldo, Hecate, Ivan and David. Thank you very much for presenting at the first and hopefully not the last Haskell bedroom at Fozdem and let's give them all another round of applause. Thank you to David Antwells who have helped a lot with the organising of this event, selecting the program and for the swag which was donated by the Haskell Foundation. We have stickers here at the front, there's stickers on the table at the back as well. Feel free to grab a bunch as you leave and for the books, for the prize draw, Programming in Haskell by Graham Hutton, second edition, three copies donated by the Haskell Foundation to give away in the prize draw today. So, thank you very much David for organising that. Thank you to the Fozdem organisers and volunteers to make this possible and especially for all of the AV side of things which is a massive undertaking. So credit to them and if you see some volunteers please remember to thank them. Okay and now the prize draw. So I think the highest number ticket was 39, if you have a ticket with a higher number than that, jump up and yell so that I put the correct range in the random number generator. So let's import system.random, let's make a generator, a new stdgen, actually I'll do it in a, I'll use a monad, monad for this new stdgen bind and what do we need to do here? Random R, so random in a range from 1 to 39, it's inclusive, okay take my word for it, it'll be fast enough. Okay and we need to, we'll need to do a random RIO, is that a function, we'll use new stdgen. We have to use a monad and a bind here just because this is the Haskell dev room and we need to play up to those sayings that people have that we're all obsessed with monads in the Haskell community and that's all we ever talk about. Okay and we'll need to, let's see, pull out the first value, there we go, okay 35, who's got number 35? Not here, I'm just going to keep going then. Number 9, yes we have a winner, okay, I'll pass that back, thank you, okay I might actually hand these down and get someone else to do the running around, okay, number 26, okay number 29, yep here we go, 33, there we go, everyone's right at the front, okay and the grand prize, Australia's finest export, number 3, well done, okay, I'll bring up to you in a minute, okay so thank you everyone, that's a wrap, cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.72, "text": " So, thank you everyone who has come today, those who are here and those who are not in", "tokens": [407, 11, 1309, 291, 1518, 567, 575, 808, 965, 11, 729, 567, 366, 510, 293, 729, 567, 366, 406, 294], "temperature": 0.0, "avg_logprob": -0.22625077398199783, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.2128223180770874}, {"id": 1, "seek": 0, "start": 10.72, "end": 14.8, "text": " the room and were earlier.", "tokens": [264, 1808, 293, 645, 3071, 13], "temperature": 0.0, "avg_logprob": -0.22625077398199783, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.2128223180770874}, {"id": 2, "seek": 0, "start": 14.8, "end": 23.68, "text": " I would like to thank our speakers, Julia, Methodis and Renaldo, Hecate, Ivan and David.", "tokens": [286, 576, 411, 281, 1309, 527, 9518, 11, 18551, 11, 25285, 271, 293, 12883, 37623, 11, 634, 66, 473, 11, 28893, 293, 4389, 13], "temperature": 0.0, "avg_logprob": -0.22625077398199783, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.2128223180770874}, {"id": 3, "seek": 0, "start": 23.68, "end": 28.48, "text": " Thank you very much for presenting at the first and hopefully not the last Haskell", "tokens": [1044, 291, 588, 709, 337, 15578, 412, 264, 700, 293, 4696, 406, 264, 1036, 8646, 43723], "temperature": 0.0, "avg_logprob": -0.22625077398199783, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.2128223180770874}, {"id": 4, "seek": 2848, "start": 28.48, "end": 39.52, "text": " bedroom at Fozdem and let's give them all another round of applause.", "tokens": [11211, 412, 8564, 89, 10730, 293, 718, 311, 976, 552, 439, 1071, 3098, 295, 9969, 13], "temperature": 0.0, "avg_logprob": -0.16704868688815977, "compression_ratio": 1.5355450236966826, "no_speech_prob": 8.953172073233873e-05}, {"id": 5, "seek": 2848, "start": 39.52, "end": 44.760000000000005, "text": " Thank you to David Antwells who have helped a lot with the organising of this event, selecting", "tokens": [1044, 291, 281, 4389, 5130, 6326, 82, 567, 362, 4254, 257, 688, 365, 264, 1798, 3436, 295, 341, 2280, 11, 18182], "temperature": 0.0, "avg_logprob": -0.16704868688815977, "compression_ratio": 1.5355450236966826, "no_speech_prob": 8.953172073233873e-05}, {"id": 6, "seek": 2848, "start": 44.760000000000005, "end": 51.72, "text": " the program and for the swag which was donated by the Haskell Foundation.", "tokens": [264, 1461, 293, 337, 264, 42064, 597, 390, 23723, 538, 264, 8646, 43723, 10335, 13], "temperature": 0.0, "avg_logprob": -0.16704868688815977, "compression_ratio": 1.5355450236966826, "no_speech_prob": 8.953172073233873e-05}, {"id": 7, "seek": 2848, "start": 51.72, "end": 56.36, "text": " We have stickers here at the front, there's stickers on the table at the back as well.", "tokens": [492, 362, 21019, 510, 412, 264, 1868, 11, 456, 311, 21019, 322, 264, 3199, 412, 264, 646, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.16704868688815977, "compression_ratio": 1.5355450236966826, "no_speech_prob": 8.953172073233873e-05}, {"id": 8, "seek": 5636, "start": 56.36, "end": 67.16, "text": " Feel free to grab a bunch as you leave and for the books, for the prize draw, Programming", "tokens": [14113, 1737, 281, 4444, 257, 3840, 382, 291, 1856, 293, 337, 264, 3642, 11, 337, 264, 12818, 2642, 11, 8338, 2810], "temperature": 0.0, "avg_logprob": -0.1595083559063119, "compression_ratio": 1.4917127071823204, "no_speech_prob": 4.947541674482636e-05}, {"id": 9, "seek": 5636, "start": 67.16, "end": 74.36, "text": " in Haskell by Graham Hutton, second edition, three copies donated by the Haskell Foundation", "tokens": [294, 8646, 43723, 538, 22691, 39012, 1756, 11, 1150, 11377, 11, 1045, 14341, 23723, 538, 264, 8646, 43723, 10335], "temperature": 0.0, "avg_logprob": -0.1595083559063119, "compression_ratio": 1.4917127071823204, "no_speech_prob": 4.947541674482636e-05}, {"id": 10, "seek": 5636, "start": 74.36, "end": 76.92, "text": " to give away in the prize draw today.", "tokens": [281, 976, 1314, 294, 264, 12818, 2642, 965, 13], "temperature": 0.0, "avg_logprob": -0.1595083559063119, "compression_ratio": 1.4917127071823204, "no_speech_prob": 4.947541674482636e-05}, {"id": 11, "seek": 5636, "start": 76.92, "end": 82.44, "text": " So, thank you very much David for organising that.", "tokens": [407, 11, 1309, 291, 588, 709, 4389, 337, 1798, 3436, 300, 13], "temperature": 0.0, "avg_logprob": -0.1595083559063119, "compression_ratio": 1.4917127071823204, "no_speech_prob": 4.947541674482636e-05}, {"id": 12, "seek": 8244, "start": 82.44, "end": 88.75999999999999, "text": " Thank you to the Fozdem organisers and volunteers to make this possible and especially for all", "tokens": [1044, 291, 281, 264, 8564, 89, 10730, 15223, 433, 293, 14352, 281, 652, 341, 1944, 293, 2318, 337, 439], "temperature": 0.0, "avg_logprob": -0.22005082666873932, "compression_ratio": 1.4942528735632183, "no_speech_prob": 2.8549844500957988e-05}, {"id": 13, "seek": 8244, "start": 88.75999999999999, "end": 94.16, "text": " of the AV side of things which is a massive undertaking.", "tokens": [295, 264, 30198, 1252, 295, 721, 597, 307, 257, 5994, 39250, 13], "temperature": 0.0, "avg_logprob": -0.22005082666873932, "compression_ratio": 1.4942528735632183, "no_speech_prob": 2.8549844500957988e-05}, {"id": 14, "seek": 8244, "start": 94.16, "end": 102.75999999999999, "text": " So credit to them and if you see some volunteers please remember to thank them.", "tokens": [407, 5397, 281, 552, 293, 498, 291, 536, 512, 14352, 1767, 1604, 281, 1309, 552, 13], "temperature": 0.0, "avg_logprob": -0.22005082666873932, "compression_ratio": 1.4942528735632183, "no_speech_prob": 2.8549844500957988e-05}, {"id": 15, "seek": 8244, "start": 102.75999999999999, "end": 108.16, "text": " Okay and now the prize draw.", "tokens": [1033, 293, 586, 264, 12818, 2642, 13], "temperature": 0.0, "avg_logprob": -0.22005082666873932, "compression_ratio": 1.4942528735632183, "no_speech_prob": 2.8549844500957988e-05}, {"id": 16, "seek": 10816, "start": 108.16, "end": 112.47999999999999, "text": " So I think the highest number ticket was 39, if you have a ticket with a higher number", "tokens": [407, 286, 519, 264, 6343, 1230, 10550, 390, 15238, 11, 498, 291, 362, 257, 10550, 365, 257, 2946, 1230], "temperature": 0.0, "avg_logprob": -0.15020129415724012, "compression_ratio": 1.5529411764705883, "no_speech_prob": 3.478942016954534e-05}, {"id": 17, "seek": 10816, "start": 112.47999999999999, "end": 122.84, "text": " than that, jump up and yell so that I put the correct range in the random number generator.", "tokens": [813, 300, 11, 3012, 493, 293, 20525, 370, 300, 286, 829, 264, 3006, 3613, 294, 264, 4974, 1230, 19265, 13], "temperature": 0.0, "avg_logprob": -0.15020129415724012, "compression_ratio": 1.5529411764705883, "no_speech_prob": 3.478942016954534e-05}, {"id": 18, "seek": 10816, "start": 122.84, "end": 135.8, "text": " So let's import system.random, let's make a generator, a new stdgen, actually I'll do", "tokens": [407, 718, 311, 974, 1185, 13, 3699, 298, 11, 718, 311, 652, 257, 19265, 11, 257, 777, 342, 67, 1766, 11, 767, 286, 603, 360], "temperature": 0.0, "avg_logprob": -0.15020129415724012, "compression_ratio": 1.5529411764705883, "no_speech_prob": 3.478942016954534e-05}, {"id": 19, "seek": 13580, "start": 135.8, "end": 146.08, "text": " it in a, I'll use a monad, monad for this new stdgen bind and what do we need to do", "tokens": [309, 294, 257, 11, 286, 603, 764, 257, 1108, 345, 11, 1108, 345, 337, 341, 777, 342, 67, 1766, 14786, 293, 437, 360, 321, 643, 281, 360], "temperature": 0.0, "avg_logprob": -0.2610729328100232, "compression_ratio": 1.356164383561644, "no_speech_prob": 7.482001092284918e-05}, {"id": 20, "seek": 13580, "start": 146.08, "end": 147.08, "text": " here?", "tokens": [510, 30], "temperature": 0.0, "avg_logprob": -0.2610729328100232, "compression_ratio": 1.356164383561644, "no_speech_prob": 7.482001092284918e-05}, {"id": 21, "seek": 13580, "start": 147.08, "end": 161.12, "text": " Random R, so random in a range from 1 to 39, it's inclusive, okay take my word for it,", "tokens": [37603, 497, 11, 370, 4974, 294, 257, 3613, 490, 502, 281, 15238, 11, 309, 311, 13429, 11, 1392, 747, 452, 1349, 337, 309, 11], "temperature": 0.0, "avg_logprob": -0.2610729328100232, "compression_ratio": 1.356164383561644, "no_speech_prob": 7.482001092284918e-05}, {"id": 22, "seek": 13580, "start": 161.12, "end": 163.12, "text": " it'll be fast enough.", "tokens": [309, 603, 312, 2370, 1547, 13], "temperature": 0.0, "avg_logprob": -0.2610729328100232, "compression_ratio": 1.356164383561644, "no_speech_prob": 7.482001092284918e-05}, {"id": 23, "seek": 16312, "start": 163.12, "end": 176.12, "text": " Okay and we need to, we'll need to do a random RIO, is that a function, we'll use new stdgen.", "tokens": [1033, 293, 321, 643, 281, 11, 321, 603, 643, 281, 360, 257, 4974, 497, 15167, 11, 307, 300, 257, 2445, 11, 321, 603, 764, 777, 342, 67, 1766, 13], "temperature": 0.0, "avg_logprob": -0.16222414603600135, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00019971406436525285}, {"id": 24, "seek": 16312, "start": 176.12, "end": 181.56, "text": " We have to use a monad and a bind here just because this is the Haskell dev room and we", "tokens": [492, 362, 281, 764, 257, 1108, 345, 293, 257, 14786, 510, 445, 570, 341, 307, 264, 8646, 43723, 1905, 1808, 293, 321], "temperature": 0.0, "avg_logprob": -0.16222414603600135, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00019971406436525285}, {"id": 25, "seek": 16312, "start": 181.56, "end": 188.76, "text": " need to play up to those sayings that people have that we're all obsessed with monads", "tokens": [643, 281, 862, 493, 281, 729, 584, 1109, 300, 561, 362, 300, 321, 434, 439, 16923, 365, 1108, 5834], "temperature": 0.0, "avg_logprob": -0.16222414603600135, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.00019971406436525285}, {"id": 26, "seek": 18876, "start": 188.76, "end": 193.95999999999998, "text": " in the Haskell community and that's all we ever talk about.", "tokens": [294, 264, 8646, 43723, 1768, 293, 300, 311, 439, 321, 1562, 751, 466, 13], "temperature": 0.0, "avg_logprob": -0.1782954822887074, "compression_ratio": 1.368421052631579, "no_speech_prob": 4.975303090759553e-05}, {"id": 27, "seek": 18876, "start": 193.95999999999998, "end": 204.2, "text": " Okay and we'll need to, let's see, pull out the first value, there we go, okay 35, who's", "tokens": [1033, 293, 321, 603, 643, 281, 11, 718, 311, 536, 11, 2235, 484, 264, 700, 2158, 11, 456, 321, 352, 11, 1392, 6976, 11, 567, 311], "temperature": 0.0, "avg_logprob": -0.1782954822887074, "compression_ratio": 1.368421052631579, "no_speech_prob": 4.975303090759553e-05}, {"id": 28, "seek": 18876, "start": 204.2, "end": 207.35999999999999, "text": " got number 35?", "tokens": [658, 1230, 6976, 30], "temperature": 0.0, "avg_logprob": -0.1782954822887074, "compression_ratio": 1.368421052631579, "no_speech_prob": 4.975303090759553e-05}, {"id": 29, "seek": 18876, "start": 207.35999999999999, "end": 212.12, "text": " Not here, I'm just going to keep going then.", "tokens": [1726, 510, 11, 286, 478, 445, 516, 281, 1066, 516, 550, 13], "temperature": 0.0, "avg_logprob": -0.1782954822887074, "compression_ratio": 1.368421052631579, "no_speech_prob": 4.975303090759553e-05}, {"id": 30, "seek": 21212, "start": 212.12, "end": 223.24, "text": " Number 9, yes we have a winner, okay, I'll pass that back, thank you, okay I might actually", "tokens": [5118, 1722, 11, 2086, 321, 362, 257, 8507, 11, 1392, 11, 286, 603, 1320, 300, 646, 11, 1309, 291, 11, 1392, 286, 1062, 767], "temperature": 0.0, "avg_logprob": -0.2798498698643276, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.533887138473801e-05}, {"id": 31, "seek": 21212, "start": 223.24, "end": 239.96, "text": " hand these down and get someone else to do the running around, okay, number 26, okay", "tokens": [1011, 613, 760, 293, 483, 1580, 1646, 281, 360, 264, 2614, 926, 11, 1392, 11, 1230, 7551, 11, 1392], "temperature": 0.0, "avg_logprob": -0.2798498698643276, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.533887138473801e-05}, {"id": 32, "seek": 23996, "start": 239.96, "end": 255.4, "text": " number 29, yep here we go, 33, there we go, everyone's right at the front, okay and the", "tokens": [1230, 9413, 11, 18633, 510, 321, 352, 11, 11816, 11, 456, 321, 352, 11, 1518, 311, 558, 412, 264, 1868, 11, 1392, 293, 264], "temperature": 0.0, "avg_logprob": -0.16564063306124704, "compression_ratio": 1.3484848484848484, "no_speech_prob": 3.842998467007419e-06}, {"id": 33, "seek": 23996, "start": 255.4, "end": 268.84000000000003, "text": " grand prize, Australia's finest export, number 3, well done, okay, I'll bring up to you in", "tokens": [2697, 12818, 11, 7060, 311, 28141, 10725, 11, 1230, 805, 11, 731, 1096, 11, 1392, 11, 286, 603, 1565, 493, 281, 291, 294], "temperature": 0.0, "avg_logprob": -0.16564063306124704, "compression_ratio": 1.3484848484848484, "no_speech_prob": 3.842998467007419e-06}, {"id": 34, "seek": 26884, "start": 268.84, "end": 273.96, "text": " a minute, okay so thank you everyone, that's a wrap, cheers.", "tokens": [50364, 257, 3456, 11, 1392, 370, 1309, 291, 1518, 11, 300, 311, 257, 7019, 11, 15301, 13, 50620], "temperature": 0.0, "avg_logprob": -0.2070605754852295, "compression_ratio": 0.9375, "no_speech_prob": 0.00018387215095572174}], "language": "en"}