{"text": " All right, so yeah, our last speaker for the day, for this year actually, is Tirmang Gomez. And this is his first time doing a talk in general, so he's very nervous. Okay, so this is the title of my talk. It's a bit long, but the short version is at the bottom, I'm just gonna talk to you. I spent some time, a couple of years ago, making a Gimbo emulator, and I'm gonna talk to you about it. So wanting some introductions, that's my name, and if you want to reach out to me after the conference, those are some of the ways. I work as a software engineer. I don't work on emulators, I use them sometimes, but it's not part of my work. This is mostly just a hobby, so I've done all of this on my own time. And I can emulate the Gimbo camera as well. So this is what I'm gonna talk about today, points 1, 2, 3, I'm going to talk to you about my particular emulator, how you can run it if you want to do so. And afterwards, I'm gonna talk more generally about Gimbo emulation and how you can build your own emulator. I'll give some tips that I found that are useful for debugging. And at the end, some lessons learned, and hopefully, if there is time, some demo. So this is what my target audience here is mostly, for this talk, is mostly going to be emulator beginners, emulator development beginners. I find the Gimbo to be quite beginner-friendly. One other reason is because it's very heavily documented, and there are other reasons as well that I'll get to later. If you're interested in Rust and WebAssembly, you're going to see a use case. And if you're just generally a fan of this device, then you might enjoy that also. So why make this in the first place? The main reason I'm sure many people here will relate, or people making emulators is the nostalgia. I used to own one of these, so I want to know how it works. Another reason, more generally speaking, this system is very attractive to emulate because of the, there's a huge amount of software out there, so you can spend many hours just trying games and seeing if they work. And if they don't work, then you can spend many more hours trying to fix them. And it's just something I do for fun. I did it mostly, I don't work on it much these days, but every time I do, it's a lot of fun. So it's made in Rust. The selling points for Rust are performance and memory save. My main selling point is that it has a very useful package manager and build tool. It's very quick to prototype things, and I was able to put this together very quickly actually. And one of the other main reasons I want to use it is because of WebAssembly. The support in Rust is great, so you almost get WebAssembly for free if you use Rust. The tools are very nice. And it runs on the website because it's WebAssembly can run on the browser, so it's very portable. That's my phone, that's my PC. It also runs natively. It's not just WebAssembly. So if you want to run it, these are the commands you need to run. There's a native build, single command. You give it the ROM and it will emulate it. The web build, this is the few more commands because you have to deploy a web application. So it's just, but it's very straightforward. It just works. And that's the link if you want to try it. So I'm going to talk about the architecture and emulation. So these are the two devices that I emulate. The original Gameboy came out in 1989. It was extremely popular. It was designed to be as cheap as possible, so lots of games were made for it. And it lasted close to 10 years. There were a few revisions in between, but it was mostly the same system. And then almost 10 years later, the Nintendo released the color version, which has still a very similar shape. And also internally, the system is also very similar. So the Gameboy color is like a super set of the original Gameboy. So these are the two devices that I target. And I have to mention the Gameboy Advance. It's a completely different system. It's arm-based. It was still backwards compatible, but it's very different under the hood. So I don't support it for the time being. So I'm going to talk about the architecture. I'm going to, so if you open the original Gameboy, you'll see a bunch of stuff. But for emulation purposes, we only care about those three chips. One of them has the CPU and the pixel processing unit, which and the other chips are memory. So I'm going to narrow, I'm going to limit this section to just talking about the CPU, the pixel processing unit, which does graphics and at the end to wrap it all up, I'll talk about the memory map that you, which is what allows the CPU and the pixel processing unit to talk to each other basically. So some basic stats about the CPU. It has 8-bit registers and 16-bit registers. It can do 500 things, has 500 instructions, a 16-bit address bus and an 8-bit data bus, and it can run at two different speeds. The original Gameboy could only run at four megahertz, but the Gameboy color could choose between either of those two speeds. So about the registers and some general information, it has general purpose registers. These are here for intermediate calculations. There's also a flag register, which has information about the last arithmetic instruction that run. So if you add two numbers together or subtract numbers together and the result is zero, this register will tell you and other things. The 16-bit registers are basically just the 8-bit ones, but used in combinations of two, mostly just for 0.3. The general purpose ones, it has the normal program counter with the address of in-memory of the next instruction, a stack pointer for implemented subroutines, and there's a global switch for interrupts, it's Boolean, so when you set it to zero, the CPU will stop listening to interrupts, such as bottom presses, until you set it back to one. So how can you model this in Rust? It's very simple. This is exactly what it looks like on mine. The state is very simple, it's just a few fields for the registers. So I'm going to talk about instructions. This CPU has 500 instructions. It has your typical instructions that you would expect, so memory reads and writes, arithmetic and branch instructions, so jumps and calling to subroutines. Some of the instructions can be conditional using the F register, and on this website you can see them in color coded in a very nice table. So this is at the core of the CPU, this is how you implement the instructions. So you have to do the three things, first you have to fetch the instruction from memory using the PC register, afterwards you have to decode the instruction, so that means figuring out what instruction to run based on that byte that you just read, and you can do this with a, in C++ you would use a switch statement, in Rust you can use a match statement. And after you decode the instructions you have to run it, so those are the three things you do, you fetch, you decode and you run, and you run it in a loop, in a loop and that's what the CPU does. So this is one example of an instruction, the code is very simple, this is a memory instruction, I'm only going to comment on the return statement, this particular instruction on the real CPU would take eight cycles of the clock, and we need to keep track of this because afterwards we need to see this information to synchronize all of the emulator, otherwise it would lead to bugs, so that's why I returned the number. Another example of instruction, an arithmetic instruction and exit operation, this one takes for cycles and it's arithmetic so it modifies the contents of the F register. And you can look up how to implement every instruction on this PDF. So you do this for 500 times, you might make mistakes but there are ways to fix those, I'll get to those later. So you do it 500 times and you will end up with a massive match statement or a switch statement, but the code inside of each of the branches is very simple, but it's still error prone. This is an optional thing you can do, because this is going to run very frequently, it doesn't hurt to turn that into a sort of binary search, so you can optimize the code a bit using, in Rust this is very straightforward using the match statements. So that's pretty much the CPU. I'm going to switch to the pixel processing unit, this is the chip responsible for graphics. So the Game Boy had an LCD panel, this size is 160 pixels by 144, total of 4 colors, more on Game Boy color of course, and it runs at roughly 60 hertz. And the way graphics works on this particular system is by a composition of three layers, you have the window layer, the spread layer and the background layer, and then there are, the CPU has registers, this device also has registers to program how you composite these layers together. So I'm going to go layer by layer. So the first layer is the window layer. This is usually reserved for things like game stats, it's fixed on the LCD, you can move it around, but the graphics within the layer are not movable, they are constrained to a grid. Can anybody guess this game? Yes, Link's Awakening, yeah. So that's Link, Link is a sprite on the sprite layer. So sprites are basically freely movable objects on the LCD, you can have 14 in total and they come in two different sizes, programmable by registers again, along with other things like color and position and orientation and things like that. And finally the background layer, what I think is the most interesting one, it's basically a grid of 32 by 32 tiles, each tile is 8 by 8, so the total size is 256 by 256, so it doesn't fit on the LCD screen, but you can scroll it using registers. So that's, and also furthermore, the scrolling wraps around so you can be clever and implement infinite scrolling that way. So it cannot, so there are more registers, I don't have time to talk about all of them, but there's a link. So by today's standards, this graphic-wise, this system cannot do much, but there are games that are quite clever using these limitations. So this is one example, it's not really a game, it's more of a technical demo, but still. So this particular example is used in the background layer only, and it's modifying this scrolling register, so it's actually moving it around the screen, however, it's changing the value of the register on every single line, and what this accomplishes is like a vertical stretching effect, and at the same time they are stretching the Nintendo logo horizontally in memory, you can see right there, and in combination these two things looks like they are zooming in the Nintendo logo, which is something that the gameboy cannot do in hardware, but they work around this by combining hardware and software, so I think it's quite interesting. And there are many more examples of games being clever, this is one. So implementation-wise, this pixel processing unit is a bit more tricky to implement, like on the CPU, and because of that it is a source of most of my bugs, and this game is easy to recognize, it's Tony Hawk. So the reason it's tricky to implement correctly is because we need to keep the CPU and the pixel processing unit in constant sync, that's the reason I was returning the number of cycles on each instruction before, and if you don't do it accurately enough it would lead to stuff like this happening, however I found that most games don't really care, most games are quite forgiving of inaccuracies, every now and then you will encounter a situation like this, in this particular example the rest of the game looks fine, it's only the interesting that is glitchy, and I think this is one of the reasons why the gameboy is a good emulation emulator, beginning-friendly emulation project because you don't need to be super accurate to emulate most games. So yeah, this is how you would implement the synchronization, this is how I do it, so first you on each iteration step you implement, you run the CPU for an instruction, it will give you the number of cycles that it will take, and then you use that to synchronize the rest of the components, so you feed it to the rest of the components so that they catch up to the CPU, so you do this forever, basically this loop right here is the core of this emulator, this is what the emulator looks like, there are a few things like getting the image from the screen and so on, but conceptually this is an emulator, it's very simple. So I've talked about the CPU and the pixel processing unit, both have registers, but they are separate things on the circuit board, so the CPU needs to be able to modify the registers of the pixel processing unit, and the way this is done is through memory, because these registers, every register that is not a CPU register is exposed in memory, so by reading and writing particular values to a particular address in memory, you can modify the registers of these devices, and you can map the memory map a bit like this, you have the characters right there, the video RAM and work RAM are the same size, because they are those two chips on the circuit board, those two other chips, they are the exact same chip, and there are other things, the buttons themselves are inside of these registers I.O., so yeah, there are some regions that are a bit special, you are not allowed to write to this region for some reason, and there are other details, this link has a technical documentation of the rest of the map in detail. So implementing the memory is quite easy, you just list every single component and every single register, a bit like this, so you get the cartridge, the video RAM, pixel processing unit registers, the buttons, sound registers, interrupt, controller, and then you need to be able to read from them, so based on the address range you can you route it to the appropriate device, and you need a similar method for writing values, some of the values will be read only, so keep that in mind, so at this point maybe you will have a sort of working emulator, but if it is your first emulator, as was my case, then you will run into bugs, and there are a few things, and they can be a bit tricky compared to other types of software I found, so there are a few strategies that I, sorry, so there are a few strategies you can follow in order to track down bugs, the first one I could give is just, because there is so much documentation about the Game Boy you can turn it into unit tests, to unit test particular sections of the hardware, the other reason why the Game Boy is so beginner friendly is you can actually run the diagnostics, there are available ROMs you can run and it will tell you where you are, where you have issues, so if you make a mistake on the CPU, which is likely, then this particular ROM will tell you what the mistake was, and you can also integrate this into your testing framework to run in CIO for extra credit, so the next one, the next tip is debugging, I am going to show debugging using an example, so after you have an emulator, the logical step is to build a debugger for it, because it will allow you to see how, it will teach you things about the games running, but it will also teach you where you might be making mistakes, so in this particular example, when I run this game, at the moment it doesn't work, so basically this is what it looks like, it just gives you a black screen, so there is nothing going on, but if you spend time making a debugger, then you can start finding clues, in this case, I spend sometimes just getting the instructions, the registers, the disassembly, very useful, and in this particular example, I know what the issue with this game is, so it is writing a value from this address and expecting a value that is never there, so this address corresponds to something called a DMA transfer, and what this tells me is that I have made a mistake in this emulation, so I can go to that particular section of my project and fix it, but I haven't fixed it yet, because I found it quite recently, and also I found that it is a lot more fun to add debugging features than it is fixing the issues themselves, and I've been a bit busy recently, so that's the end of my technical talk, and I'm going to finish with some conclusions, this is my favorite glitch by the way, it only happens when you set the name to a particular name, it is very weird, so writing an emulator, at least on a Gameboy emulator, is the easy part of emulating a Gameboy, like I said, there's tons of documentation, and the hard part of the work has been done by other people who have been kindly enough to write down their findings, so I just have to read the information, interpret it, and turn it into a program, so I keep that in mind when I move to the next system to emulate, because it might not be as easy, so most games as I said are forgiving of inaccuracies, except this is more of an issue with my emulator, but most games are forgiving of inaccuracies in the graphics, so this is yet one other reason why it's friendly for beginners, and finally, WebAssembly and Rust are great, if you just Rust, it's using WebAssembly, it's very natural, if the support is great, and I have a small demo, it runs on the browser, so that's the LCD, I'm also drawing the video memory and the color palettes, and one of the things you can emulate on the Gameboy is, it came with a camera, so if you load the camera on this application, it will request permission for the camera, but I've shown the picture at the beginning, so if you cancel the permission, it will still boot, so it has a fallback, so it cannot get the webcam, because I haven't given it permissions, but it can still put the file in there. I think you can play games with it, but I don't know how it works, but that's the demo, so that's it from me. Can I just break in? I'm leaving immediately, but if you go out, please continue your questions and your discussion, please look around you and take any garbage that you see from the room here and put it in the back, if a lot of people help, it's not much work, otherwise we will be here forever. Thank you. I have a question. Can I modify it in such a way that I can mess with the logic of the game? The question was, can I identify particular things happening on the different games? Do you know about these trainers? No, I don't. Can I implement something like a game shark to cheat on games? Yes, I could. The emulator is built as a library, so you can use it as a library and read and write arbitrary bytes to arbitrary addresses, so you could potentially build something like that, yes. Thank you. You also had a corporate check. You have a single loop, where every part we're I'm like, see, what? You still in your program? Oh, she's like, okay. Yeah, I know. Well, my question was that you have a single room that has processes on the CPU. Yes, it's, yeah. What if you wanted, what if you were emulating with Rust a system where you want to have different threads for different peripherals. But they are all accessing the memory. Wouldn't the Rust have the same interview with that? Um, so can I use Rust to, can I run things in different threads with the first problems? And probably yes, but that was a kind of worms that I didn't want to open. And also, if the system was simple enough like this one, you don't really need to optimize like that. It can all run in a single thread. But for a more complex device, sure, I would have to investigate more on that. But I didn't have to do that on this one. Yeah. Why did you pick Rust? Was there any reason that you did not select C++? Yeah. Why did I pick Rust over something like C++? It's what I use Rust for my personal projects. It's what I like using it. It's what I like using. And you know Rust better than C++? Yeah. And the processor is a 6502 or is it? So the processor, the question was what the processor is. Yeah, it's not a 6502. I think it's a mix of a Psylog Z80 and an Intel 8080. So it's like a combination of the two. I think it is I'm not really sure. You split your match up into the binary sets. Did you actually benchmark that? Because I thought the compiler would have just translated into a jump tape. On mic, you know. And we're going to get kicked out. I'll be honest, I didn't benchmark that everybody was in change.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.4, "text": " All right, so yeah, our last speaker for the day, for this year actually, is Tirmang", "tokens": [1057, 558, 11, 370, 1338, 11, 527, 1036, 8145, 337, 264, 786, 11, 337, 341, 1064, 767, 11, 307, 314, 3692, 656], "temperature": 0.0, "avg_logprob": -0.46462417602539063, "compression_ratio": 1.2890625, "no_speech_prob": 0.6693028211593628}, {"id": 1, "seek": 0, "start": 11.4, "end": 12.4, "text": " Gomez.", "tokens": [43537, 13], "temperature": 0.0, "avg_logprob": -0.46462417602539063, "compression_ratio": 1.2890625, "no_speech_prob": 0.6693028211593628}, {"id": 2, "seek": 0, "start": 12.4, "end": 16.4, "text": " And this is his first time doing a talk in general, so he's very nervous.", "tokens": [400, 341, 307, 702, 700, 565, 884, 257, 751, 294, 2674, 11, 370, 415, 311, 588, 6296, 13], "temperature": 0.0, "avg_logprob": -0.46462417602539063, "compression_ratio": 1.2890625, "no_speech_prob": 0.6693028211593628}, {"id": 3, "seek": 1640, "start": 16.4, "end": 39.519999999999996, "text": " Okay, so this is the title of my talk.", "tokens": [1033, 11, 370, 341, 307, 264, 4876, 295, 452, 751, 13], "temperature": 0.0, "avg_logprob": -0.297572922706604, "compression_ratio": 1.2178217821782178, "no_speech_prob": 0.0062650409527122974}, {"id": 4, "seek": 1640, "start": 39.519999999999996, "end": 42.519999999999996, "text": " It's a bit long, but the short version is at the bottom, I'm just gonna talk to you.", "tokens": [467, 311, 257, 857, 938, 11, 457, 264, 2099, 3037, 307, 412, 264, 2767, 11, 286, 478, 445, 799, 751, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.297572922706604, "compression_ratio": 1.2178217821782178, "no_speech_prob": 0.0062650409527122974}, {"id": 5, "seek": 4252, "start": 42.52, "end": 48.24, "text": " I spent some time, a couple of years ago, making a Gimbo emulator, and I'm gonna talk", "tokens": [286, 4418, 512, 565, 11, 257, 1916, 295, 924, 2057, 11, 1455, 257, 460, 332, 1763, 846, 16381, 11, 293, 286, 478, 799, 751], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 6, "seek": 4252, "start": 48.24, "end": 51.28, "text": " to you about it.", "tokens": [281, 291, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 7, "seek": 4252, "start": 51.28, "end": 55.080000000000005, "text": " So wanting some introductions, that's my name, and if you want to reach out to me after", "tokens": [407, 7935, 512, 48032, 11, 300, 311, 452, 1315, 11, 293, 498, 291, 528, 281, 2524, 484, 281, 385, 934], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 8, "seek": 4252, "start": 55.080000000000005, "end": 57.480000000000004, "text": " the conference, those are some of the ways.", "tokens": [264, 7586, 11, 729, 366, 512, 295, 264, 2098, 13], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 9, "seek": 4252, "start": 57.480000000000004, "end": 59.36, "text": " I work as a software engineer.", "tokens": [286, 589, 382, 257, 4722, 11403, 13], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 10, "seek": 4252, "start": 59.36, "end": 63.68000000000001, "text": " I don't work on emulators, I use them sometimes, but it's not part of my work.", "tokens": [286, 500, 380, 589, 322, 846, 39265, 11, 286, 764, 552, 2171, 11, 457, 309, 311, 406, 644, 295, 452, 589, 13], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 11, "seek": 4252, "start": 63.68000000000001, "end": 68.52000000000001, "text": " This is mostly just a hobby, so I've done all of this on my own time.", "tokens": [639, 307, 5240, 445, 257, 18240, 11, 370, 286, 600, 1096, 439, 295, 341, 322, 452, 1065, 565, 13], "temperature": 0.0, "avg_logprob": -0.1687221682168604, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0002234426065115258}, {"id": 12, "seek": 6852, "start": 68.52, "end": 73.39999999999999, "text": " And I can emulate the Gimbo camera as well.", "tokens": [400, 286, 393, 45497, 264, 460, 332, 1763, 2799, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 13, "seek": 6852, "start": 73.39999999999999, "end": 79.92, "text": " So this is what I'm gonna talk about today, points 1, 2, 3, I'm going to talk to you about", "tokens": [407, 341, 307, 437, 286, 478, 799, 751, 466, 965, 11, 2793, 502, 11, 568, 11, 805, 11, 286, 478, 516, 281, 751, 281, 291, 466], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 14, "seek": 6852, "start": 79.92, "end": 84.88, "text": " my particular emulator, how you can run it if you want to do so.", "tokens": [452, 1729, 846, 16381, 11, 577, 291, 393, 1190, 309, 498, 291, 528, 281, 360, 370, 13], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 15, "seek": 6852, "start": 84.88, "end": 89.12, "text": " And afterwards, I'm gonna talk more generally about Gimbo emulation and how you can build", "tokens": [400, 10543, 11, 286, 478, 799, 751, 544, 5101, 466, 460, 332, 1763, 846, 2776, 293, 577, 291, 393, 1322], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 16, "seek": 6852, "start": 89.12, "end": 91.47999999999999, "text": " your own emulator.", "tokens": [428, 1065, 846, 16381, 13], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 17, "seek": 6852, "start": 91.47999999999999, "end": 96.28, "text": " I'll give some tips that I found that are useful for debugging.", "tokens": [286, 603, 976, 512, 6082, 300, 286, 1352, 300, 366, 4420, 337, 45592, 13], "temperature": 0.0, "avg_logprob": -0.18806369216353805, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00017748522805050015}, {"id": 18, "seek": 9628, "start": 96.28, "end": 105.44, "text": " And at the end, some lessons learned, and hopefully, if there is time, some demo.", "tokens": [400, 412, 264, 917, 11, 512, 8820, 3264, 11, 293, 4696, 11, 498, 456, 307, 565, 11, 512, 10723, 13], "temperature": 0.0, "avg_logprob": -0.12431546095963363, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.00014166174514684826}, {"id": 19, "seek": 9628, "start": 105.44, "end": 111.56, "text": " So this is what my target audience here is mostly, for this talk, is mostly going to", "tokens": [407, 341, 307, 437, 452, 3779, 4034, 510, 307, 5240, 11, 337, 341, 751, 11, 307, 5240, 516, 281], "temperature": 0.0, "avg_logprob": -0.12431546095963363, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.00014166174514684826}, {"id": 20, "seek": 9628, "start": 111.56, "end": 115.52000000000001, "text": " be emulator beginners, emulator development beginners.", "tokens": [312, 846, 16381, 26992, 11, 846, 16381, 3250, 26992, 13], "temperature": 0.0, "avg_logprob": -0.12431546095963363, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.00014166174514684826}, {"id": 21, "seek": 9628, "start": 115.52000000000001, "end": 119.28, "text": " I find the Gimbo to be quite beginner-friendly.", "tokens": [286, 915, 264, 460, 332, 1763, 281, 312, 1596, 22080, 12, 22864, 13], "temperature": 0.0, "avg_logprob": -0.12431546095963363, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.00014166174514684826}, {"id": 22, "seek": 9628, "start": 119.28, "end": 123.04, "text": " One other reason is because it's very heavily documented, and there are other reasons as", "tokens": [1485, 661, 1778, 307, 570, 309, 311, 588, 10950, 23007, 11, 293, 456, 366, 661, 4112, 382], "temperature": 0.0, "avg_logprob": -0.12431546095963363, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.00014166174514684826}, {"id": 23, "seek": 12304, "start": 123.04, "end": 126.44000000000001, "text": " well that I'll get to later.", "tokens": [731, 300, 286, 603, 483, 281, 1780, 13], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 24, "seek": 12304, "start": 126.44000000000001, "end": 131.16, "text": " If you're interested in Rust and WebAssembly, you're going to see a use case.", "tokens": [759, 291, 434, 3102, 294, 34952, 293, 9573, 10884, 19160, 11, 291, 434, 516, 281, 536, 257, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 25, "seek": 12304, "start": 131.16, "end": 139.28, "text": " And if you're just generally a fan of this device, then you might enjoy that also.", "tokens": [400, 498, 291, 434, 445, 5101, 257, 3429, 295, 341, 4302, 11, 550, 291, 1062, 2103, 300, 611, 13], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 26, "seek": 12304, "start": 139.28, "end": 143.28, "text": " So why make this in the first place?", "tokens": [407, 983, 652, 341, 294, 264, 700, 1081, 30], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 27, "seek": 12304, "start": 143.28, "end": 147.4, "text": " The main reason I'm sure many people here will relate, or people making emulators is", "tokens": [440, 2135, 1778, 286, 478, 988, 867, 561, 510, 486, 10961, 11, 420, 561, 1455, 846, 39265, 307], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 28, "seek": 12304, "start": 147.4, "end": 148.4, "text": " the nostalgia.", "tokens": [264, 34618, 13], "temperature": 0.0, "avg_logprob": -0.14874248714237423, "compression_ratio": 1.5233644859813085, "no_speech_prob": 7.708316115895286e-05}, {"id": 29, "seek": 14840, "start": 148.4, "end": 154.64000000000001, "text": " I used to own one of these, so I want to know how it works.", "tokens": [286, 1143, 281, 1065, 472, 295, 613, 11, 370, 286, 528, 281, 458, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 30, "seek": 14840, "start": 154.64000000000001, "end": 159.84, "text": " Another reason, more generally speaking, this system is very attractive to emulate because", "tokens": [3996, 1778, 11, 544, 5101, 4124, 11, 341, 1185, 307, 588, 12609, 281, 45497, 570], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 31, "seek": 14840, "start": 159.84, "end": 165.68, "text": " of the, there's a huge amount of software out there, so you can spend many hours just", "tokens": [295, 264, 11, 456, 311, 257, 2603, 2372, 295, 4722, 484, 456, 11, 370, 291, 393, 3496, 867, 2496, 445], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 32, "seek": 14840, "start": 165.68, "end": 168.0, "text": " trying games and seeing if they work.", "tokens": [1382, 2813, 293, 2577, 498, 436, 589, 13], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 33, "seek": 14840, "start": 168.0, "end": 172.64000000000001, "text": " And if they don't work, then you can spend many more hours trying to fix them.", "tokens": [400, 498, 436, 500, 380, 589, 11, 550, 291, 393, 3496, 867, 544, 2496, 1382, 281, 3191, 552, 13], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 34, "seek": 14840, "start": 172.64000000000001, "end": 175.64000000000001, "text": " And it's just something I do for fun.", "tokens": [400, 309, 311, 445, 746, 286, 360, 337, 1019, 13], "temperature": 0.0, "avg_logprob": -0.12152306084493988, "compression_ratio": 1.7, "no_speech_prob": 0.00014396410551853478}, {"id": 35, "seek": 17564, "start": 175.64, "end": 184.27999999999997, "text": " I did it mostly, I don't work on it much these days, but every time I do, it's a lot of fun.", "tokens": [286, 630, 309, 5240, 11, 286, 500, 380, 589, 322, 309, 709, 613, 1708, 11, 457, 633, 565, 286, 360, 11, 309, 311, 257, 688, 295, 1019, 13], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 36, "seek": 17564, "start": 184.27999999999997, "end": 186.04, "text": " So it's made in Rust.", "tokens": [407, 309, 311, 1027, 294, 34952, 13], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 37, "seek": 17564, "start": 186.04, "end": 189.27999999999997, "text": " The selling points for Rust are performance and memory save.", "tokens": [440, 6511, 2793, 337, 34952, 366, 3389, 293, 4675, 3155, 13], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 38, "seek": 17564, "start": 189.27999999999997, "end": 195.67999999999998, "text": " My main selling point is that it has a very useful package manager and build tool.", "tokens": [1222, 2135, 6511, 935, 307, 300, 309, 575, 257, 588, 4420, 7372, 6598, 293, 1322, 2290, 13], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 39, "seek": 17564, "start": 195.67999999999998, "end": 200.0, "text": " It's very quick to prototype things, and I was able to put this together very quickly", "tokens": [467, 311, 588, 1702, 281, 19475, 721, 11, 293, 286, 390, 1075, 281, 829, 341, 1214, 588, 2661], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 40, "seek": 17564, "start": 200.0, "end": 202.64, "text": " actually.", "tokens": [767, 13], "temperature": 0.0, "avg_logprob": -0.1620254811552382, "compression_ratio": 1.5733333333333333, "no_speech_prob": 7.810982060618699e-05}, {"id": 41, "seek": 20264, "start": 202.64, "end": 207.64, "text": " And one of the other main reasons I want to use it is because of WebAssembly.", "tokens": [400, 472, 295, 264, 661, 2135, 4112, 286, 528, 281, 764, 309, 307, 570, 295, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 42, "seek": 20264, "start": 207.64, "end": 215.23999999999998, "text": " The support in Rust is great, so you almost get WebAssembly for free if you use Rust.", "tokens": [440, 1406, 294, 34952, 307, 869, 11, 370, 291, 1920, 483, 9573, 10884, 19160, 337, 1737, 498, 291, 764, 34952, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 43, "seek": 20264, "start": 215.23999999999998, "end": 217.67999999999998, "text": " The tools are very nice.", "tokens": [440, 3873, 366, 588, 1481, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 44, "seek": 20264, "start": 217.67999999999998, "end": 222.48, "text": " And it runs on the website because it's WebAssembly can run on the browser, so it's very portable.", "tokens": [400, 309, 6676, 322, 264, 3144, 570, 309, 311, 9573, 10884, 19160, 393, 1190, 322, 264, 11185, 11, 370, 309, 311, 588, 21800, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 45, "seek": 20264, "start": 222.48, "end": 226.27999999999997, "text": " That's my phone, that's my PC.", "tokens": [663, 311, 452, 2593, 11, 300, 311, 452, 6465, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 46, "seek": 20264, "start": 226.27999999999997, "end": 227.27999999999997, "text": " It also runs natively.", "tokens": [467, 611, 6676, 8470, 356, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 47, "seek": 20264, "start": 227.27999999999997, "end": 229.76, "text": " It's not just WebAssembly.", "tokens": [467, 311, 406, 445, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.16580260883678088, "compression_ratio": 1.688073394495413, "no_speech_prob": 4.7486617404501885e-05}, {"id": 48, "seek": 22976, "start": 229.76, "end": 233.76, "text": " So if you want to run it, these are the commands you need to run.", "tokens": [407, 498, 291, 528, 281, 1190, 309, 11, 613, 366, 264, 16901, 291, 643, 281, 1190, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 49, "seek": 22976, "start": 233.76, "end": 236.67999999999998, "text": " There's a native build, single command.", "tokens": [821, 311, 257, 8470, 1322, 11, 2167, 5622, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 50, "seek": 22976, "start": 236.67999999999998, "end": 240.28, "text": " You give it the ROM and it will emulate it.", "tokens": [509, 976, 309, 264, 41678, 293, 309, 486, 45497, 309, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 51, "seek": 22976, "start": 240.28, "end": 244.0, "text": " The web build, this is the few more commands because you have to deploy a web application.", "tokens": [440, 3670, 1322, 11, 341, 307, 264, 1326, 544, 16901, 570, 291, 362, 281, 7274, 257, 3670, 3861, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 52, "seek": 22976, "start": 244.0, "end": 247.48, "text": " So it's just, but it's very straightforward.", "tokens": [407, 309, 311, 445, 11, 457, 309, 311, 588, 15325, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 53, "seek": 22976, "start": 247.48, "end": 249.88, "text": " It just works.", "tokens": [467, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 54, "seek": 22976, "start": 249.88, "end": 254.56, "text": " And that's the link if you want to try it.", "tokens": [400, 300, 311, 264, 2113, 498, 291, 528, 281, 853, 309, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 55, "seek": 22976, "start": 254.56, "end": 257.48, "text": " So I'm going to talk about the architecture and emulation.", "tokens": [407, 286, 478, 516, 281, 751, 466, 264, 9482, 293, 846, 2776, 13], "temperature": 0.0, "avg_logprob": -0.194434734812954, "compression_ratio": 1.6275303643724697, "no_speech_prob": 1.6428672097390518e-05}, {"id": 56, "seek": 25748, "start": 257.48, "end": 260.12, "text": " So these are the two devices that I emulate.", "tokens": [407, 613, 366, 264, 732, 5759, 300, 286, 45497, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 57, "seek": 25748, "start": 260.12, "end": 263.44, "text": " The original Gameboy came out in 1989.", "tokens": [440, 3380, 7522, 12795, 1361, 484, 294, 22427, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 58, "seek": 25748, "start": 263.44, "end": 264.56, "text": " It was extremely popular.", "tokens": [467, 390, 4664, 3743, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 59, "seek": 25748, "start": 264.56, "end": 269.24, "text": " It was designed to be as cheap as possible, so lots of games were made for it.", "tokens": [467, 390, 4761, 281, 312, 382, 7084, 382, 1944, 11, 370, 3195, 295, 2813, 645, 1027, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 60, "seek": 25748, "start": 269.24, "end": 270.72, "text": " And it lasted close to 10 years.", "tokens": [400, 309, 21116, 1998, 281, 1266, 924, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 61, "seek": 25748, "start": 270.72, "end": 275.36, "text": " There were a few revisions in between, but it was mostly the same system.", "tokens": [821, 645, 257, 1326, 3698, 4252, 294, 1296, 11, 457, 309, 390, 5240, 264, 912, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 62, "seek": 25748, "start": 275.36, "end": 281.0, "text": " And then almost 10 years later, the Nintendo released the color version, which has still", "tokens": [400, 550, 1920, 1266, 924, 1780, 11, 264, 11578, 4736, 264, 2017, 3037, 11, 597, 575, 920], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 63, "seek": 25748, "start": 281.0, "end": 283.16, "text": " a very similar shape.", "tokens": [257, 588, 2531, 3909, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 64, "seek": 25748, "start": 283.16, "end": 286.36, "text": " And also internally, the system is also very similar.", "tokens": [400, 611, 19501, 11, 264, 1185, 307, 611, 588, 2531, 13], "temperature": 0.0, "avg_logprob": -0.11585495688698509, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.00013915440649725497}, {"id": 65, "seek": 28636, "start": 286.36, "end": 291.92, "text": " So the Gameboy color is like a super set of the original Gameboy.", "tokens": [407, 264, 7522, 12795, 2017, 307, 411, 257, 1687, 992, 295, 264, 3380, 7522, 12795, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 66, "seek": 28636, "start": 291.92, "end": 295.48, "text": " So these are the two devices that I target.", "tokens": [407, 613, 366, 264, 732, 5759, 300, 286, 3779, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 67, "seek": 28636, "start": 295.48, "end": 297.8, "text": " And I have to mention the Gameboy Advance.", "tokens": [400, 286, 362, 281, 2152, 264, 7522, 12795, 44425, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 68, "seek": 28636, "start": 297.8, "end": 299.36, "text": " It's a completely different system.", "tokens": [467, 311, 257, 2584, 819, 1185, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 69, "seek": 28636, "start": 299.36, "end": 300.68, "text": " It's arm-based.", "tokens": [467, 311, 3726, 12, 6032, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 70, "seek": 28636, "start": 300.68, "end": 304.96000000000004, "text": " It was still backwards compatible, but it's very different under the hood.", "tokens": [467, 390, 920, 12204, 18218, 11, 457, 309, 311, 588, 819, 833, 264, 13376, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 71, "seek": 28636, "start": 304.96000000000004, "end": 310.84000000000003, "text": " So I don't support it for the time being.", "tokens": [407, 286, 500, 380, 1406, 309, 337, 264, 565, 885, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 72, "seek": 28636, "start": 310.84000000000003, "end": 312.92, "text": " So I'm going to talk about the architecture.", "tokens": [407, 286, 478, 516, 281, 751, 466, 264, 9482, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 73, "seek": 28636, "start": 312.92, "end": 316.32, "text": " I'm going to, so if you open the original Gameboy, you'll see a bunch of stuff.", "tokens": [286, 478, 516, 281, 11, 370, 498, 291, 1269, 264, 3380, 7522, 12795, 11, 291, 603, 536, 257, 3840, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.14002525149367925, "compression_ratio": 1.7153846153846153, "no_speech_prob": 0.00016646385483909398}, {"id": 74, "seek": 31632, "start": 316.32, "end": 320.76, "text": " But for emulation purposes, we only care about those three chips.", "tokens": [583, 337, 846, 2776, 9932, 11, 321, 787, 1127, 466, 729, 1045, 11583, 13], "temperature": 0.0, "avg_logprob": -0.16700620471306568, "compression_ratio": 1.9363636363636363, "no_speech_prob": 0.00019302629516460001}, {"id": 75, "seek": 31632, "start": 320.76, "end": 326.84, "text": " One of them has the CPU and the pixel processing unit, which and the other chips are memory.", "tokens": [1485, 295, 552, 575, 264, 13199, 293, 264, 19261, 9007, 4985, 11, 597, 293, 264, 661, 11583, 366, 4675, 13], "temperature": 0.0, "avg_logprob": -0.16700620471306568, "compression_ratio": 1.9363636363636363, "no_speech_prob": 0.00019302629516460001}, {"id": 76, "seek": 31632, "start": 326.84, "end": 331.24, "text": " So I'm going to narrow, I'm going to limit this section to just talking about the CPU,", "tokens": [407, 286, 478, 516, 281, 9432, 11, 286, 478, 516, 281, 4948, 341, 3541, 281, 445, 1417, 466, 264, 13199, 11], "temperature": 0.0, "avg_logprob": -0.16700620471306568, "compression_ratio": 1.9363636363636363, "no_speech_prob": 0.00019302629516460001}, {"id": 77, "seek": 31632, "start": 331.24, "end": 338.2, "text": " the pixel processing unit, which does graphics and at the end to wrap it all up, I'll talk", "tokens": [264, 19261, 9007, 4985, 11, 597, 775, 11837, 293, 412, 264, 917, 281, 7019, 309, 439, 493, 11, 286, 603, 751], "temperature": 0.0, "avg_logprob": -0.16700620471306568, "compression_ratio": 1.9363636363636363, "no_speech_prob": 0.00019302629516460001}, {"id": 78, "seek": 31632, "start": 338.2, "end": 344.28, "text": " about the memory map that you, which is what allows the CPU and the pixel processing unit", "tokens": [466, 264, 4675, 4471, 300, 291, 11, 597, 307, 437, 4045, 264, 13199, 293, 264, 19261, 9007, 4985], "temperature": 0.0, "avg_logprob": -0.16700620471306568, "compression_ratio": 1.9363636363636363, "no_speech_prob": 0.00019302629516460001}, {"id": 79, "seek": 34428, "start": 344.28, "end": 347.35999999999996, "text": " to talk to each other basically.", "tokens": [281, 751, 281, 1184, 661, 1936, 13], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 80, "seek": 34428, "start": 347.35999999999996, "end": 350.35999999999996, "text": " So some basic stats about the CPU.", "tokens": [407, 512, 3875, 18152, 466, 264, 13199, 13], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 81, "seek": 34428, "start": 350.35999999999996, "end": 353.55999999999995, "text": " It has 8-bit registers and 16-bit registers.", "tokens": [467, 575, 1649, 12, 5260, 38351, 293, 3165, 12, 5260, 38351, 13], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 82, "seek": 34428, "start": 353.55999999999995, "end": 362.0, "text": " It can do 500 things, has 500 instructions, a 16-bit address bus and an 8-bit data bus,", "tokens": [467, 393, 360, 5923, 721, 11, 575, 5923, 9415, 11, 257, 3165, 12, 5260, 2985, 1255, 293, 364, 1649, 12, 5260, 1412, 1255, 11], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 83, "seek": 34428, "start": 362.0, "end": 364.91999999999996, "text": " and it can run at two different speeds.", "tokens": [293, 309, 393, 1190, 412, 732, 819, 16411, 13], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 84, "seek": 34428, "start": 364.91999999999996, "end": 368.52, "text": " The original Gameboy could only run at four megahertz, but the Gameboy color could choose", "tokens": [440, 3380, 7522, 12795, 727, 787, 1190, 412, 1451, 17986, 35655, 11, 457, 264, 7522, 12795, 2017, 727, 2826], "temperature": 0.0, "avg_logprob": -0.20923112028388566, "compression_ratio": 1.5789473684210527, "no_speech_prob": 7.675080269109458e-05}, {"id": 85, "seek": 36852, "start": 368.52, "end": 374.35999999999996, "text": " between either of those two speeds.", "tokens": [1296, 2139, 295, 729, 732, 16411, 13], "temperature": 0.0, "avg_logprob": -0.213960793058751, "compression_ratio": 1.6441717791411044, "no_speech_prob": 2.0077293811482377e-05}, {"id": 86, "seek": 36852, "start": 374.35999999999996, "end": 380.64, "text": " So about the registers and some general information, it has general purpose registers.", "tokens": [407, 466, 264, 38351, 293, 512, 2674, 1589, 11, 309, 575, 2674, 4334, 38351, 13], "temperature": 0.0, "avg_logprob": -0.213960793058751, "compression_ratio": 1.6441717791411044, "no_speech_prob": 2.0077293811482377e-05}, {"id": 87, "seek": 36852, "start": 380.64, "end": 386.03999999999996, "text": " These are here for intermediate calculations.", "tokens": [1981, 366, 510, 337, 19376, 20448, 13], "temperature": 0.0, "avg_logprob": -0.213960793058751, "compression_ratio": 1.6441717791411044, "no_speech_prob": 2.0077293811482377e-05}, {"id": 88, "seek": 36852, "start": 386.03999999999996, "end": 393.0, "text": " There's also a flag register, which has information about the last arithmetic instruction that", "tokens": [821, 311, 611, 257, 7166, 7280, 11, 597, 575, 1589, 466, 264, 1036, 42973, 10951, 300], "temperature": 0.0, "avg_logprob": -0.213960793058751, "compression_ratio": 1.6441717791411044, "no_speech_prob": 2.0077293811482377e-05}, {"id": 89, "seek": 36852, "start": 393.0, "end": 394.0, "text": " run.", "tokens": [1190, 13], "temperature": 0.0, "avg_logprob": -0.213960793058751, "compression_ratio": 1.6441717791411044, "no_speech_prob": 2.0077293811482377e-05}, {"id": 90, "seek": 39400, "start": 394.0, "end": 398.8, "text": " So if you add two numbers together or subtract numbers together and the result is zero, this", "tokens": [407, 498, 291, 909, 732, 3547, 1214, 420, 16390, 3547, 1214, 293, 264, 1874, 307, 4018, 11, 341], "temperature": 0.0, "avg_logprob": -0.25432530571432677, "compression_ratio": 1.6009615384615385, "no_speech_prob": 7.342201570281759e-05}, {"id": 91, "seek": 39400, "start": 398.8, "end": 405.2, "text": " register will tell you and other things.", "tokens": [7280, 486, 980, 291, 293, 661, 721, 13], "temperature": 0.0, "avg_logprob": -0.25432530571432677, "compression_ratio": 1.6009615384615385, "no_speech_prob": 7.342201570281759e-05}, {"id": 92, "seek": 39400, "start": 405.2, "end": 413.84, "text": " The 16-bit registers are basically just the 8-bit ones, but used in combinations of two,", "tokens": [440, 3165, 12, 5260, 38351, 366, 1936, 445, 264, 1649, 12, 5260, 2306, 11, 457, 1143, 294, 21267, 295, 732, 11], "temperature": 0.0, "avg_logprob": -0.25432530571432677, "compression_ratio": 1.6009615384615385, "no_speech_prob": 7.342201570281759e-05}, {"id": 93, "seek": 39400, "start": 413.84, "end": 416.36, "text": " mostly just for 0.3.", "tokens": [5240, 445, 337, 1958, 13, 18, 13], "temperature": 0.0, "avg_logprob": -0.25432530571432677, "compression_ratio": 1.6009615384615385, "no_speech_prob": 7.342201570281759e-05}, {"id": 94, "seek": 39400, "start": 416.36, "end": 421.68, "text": " The general purpose ones, it has the normal program counter with the address of in-memory", "tokens": [440, 2674, 4334, 2306, 11, 309, 575, 264, 2710, 1461, 5682, 365, 264, 2985, 295, 294, 12, 17886, 827], "temperature": 0.0, "avg_logprob": -0.25432530571432677, "compression_ratio": 1.6009615384615385, "no_speech_prob": 7.342201570281759e-05}, {"id": 95, "seek": 42168, "start": 421.68, "end": 427.8, "text": " of the next instruction, a stack pointer for implemented subroutines, and there's a global", "tokens": [295, 264, 958, 10951, 11, 257, 8630, 23918, 337, 12270, 1422, 81, 346, 1652, 11, 293, 456, 311, 257, 4338], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 96, "seek": 42168, "start": 427.8, "end": 433.92, "text": " switch for interrupts, it's Boolean, so when you set it to zero, the CPU will stop listening", "tokens": [3679, 337, 12729, 82, 11, 309, 311, 23351, 28499, 11, 370, 562, 291, 992, 309, 281, 4018, 11, 264, 13199, 486, 1590, 4764], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 97, "seek": 42168, "start": 433.92, "end": 441.92, "text": " to interrupts, such as bottom presses, until you set it back to one.", "tokens": [281, 12729, 82, 11, 1270, 382, 2767, 40892, 11, 1826, 291, 992, 309, 646, 281, 472, 13], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 98, "seek": 42168, "start": 441.92, "end": 444.52, "text": " So how can you model this in Rust?", "tokens": [407, 577, 393, 291, 2316, 341, 294, 34952, 30], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 99, "seek": 42168, "start": 444.52, "end": 445.52, "text": " It's very simple.", "tokens": [467, 311, 588, 2199, 13], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 100, "seek": 42168, "start": 445.52, "end": 449.0, "text": " This is exactly what it looks like on mine.", "tokens": [639, 307, 2293, 437, 309, 1542, 411, 322, 3892, 13], "temperature": 0.0, "avg_logprob": -0.1605078833443778, "compression_ratio": 1.5374449339207048, "no_speech_prob": 0.00028274377109482884}, {"id": 101, "seek": 44900, "start": 449.0, "end": 454.88, "text": " The state is very simple, it's just a few fields for the registers.", "tokens": [440, 1785, 307, 588, 2199, 11, 309, 311, 445, 257, 1326, 7909, 337, 264, 38351, 13], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 102, "seek": 44900, "start": 454.88, "end": 458.88, "text": " So I'm going to talk about instructions.", "tokens": [407, 286, 478, 516, 281, 751, 466, 9415, 13], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 103, "seek": 44900, "start": 458.88, "end": 462.24, "text": " This CPU has 500 instructions.", "tokens": [639, 13199, 575, 5923, 9415, 13], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 104, "seek": 44900, "start": 462.24, "end": 468.08, "text": " It has your typical instructions that you would expect, so memory reads and writes, arithmetic", "tokens": [467, 575, 428, 7476, 9415, 300, 291, 576, 2066, 11, 370, 4675, 15700, 293, 13657, 11, 42973], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 105, "seek": 44900, "start": 468.08, "end": 471.92, "text": " and branch instructions, so jumps and calling to subroutines.", "tokens": [293, 9819, 9415, 11, 370, 16704, 293, 5141, 281, 1422, 81, 346, 1652, 13], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 106, "seek": 44900, "start": 471.92, "end": 477.92, "text": " Some of the instructions can be conditional using the F register, and on this website", "tokens": [2188, 295, 264, 9415, 393, 312, 27708, 1228, 264, 479, 7280, 11, 293, 322, 341, 3144], "temperature": 0.0, "avg_logprob": -0.21260844106259552, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.00011020486999768764}, {"id": 107, "seek": 47792, "start": 477.92, "end": 483.2, "text": " you can see them in color coded in a very nice table.", "tokens": [291, 393, 536, 552, 294, 2017, 34874, 294, 257, 588, 1481, 3199, 13], "temperature": 0.0, "avg_logprob": -0.16601979002660636, "compression_ratio": 1.8018018018018018, "no_speech_prob": 6.168393883854151e-05}, {"id": 108, "seek": 47792, "start": 483.2, "end": 488.32, "text": " So this is at the core of the CPU, this is how you implement the instructions.", "tokens": [407, 341, 307, 412, 264, 4965, 295, 264, 13199, 11, 341, 307, 577, 291, 4445, 264, 9415, 13], "temperature": 0.0, "avg_logprob": -0.16601979002660636, "compression_ratio": 1.8018018018018018, "no_speech_prob": 6.168393883854151e-05}, {"id": 109, "seek": 47792, "start": 488.32, "end": 492.56, "text": " So you have to do the three things, first you have to fetch the instruction from memory", "tokens": [407, 291, 362, 281, 360, 264, 1045, 721, 11, 700, 291, 362, 281, 23673, 264, 10951, 490, 4675], "temperature": 0.0, "avg_logprob": -0.16601979002660636, "compression_ratio": 1.8018018018018018, "no_speech_prob": 6.168393883854151e-05}, {"id": 110, "seek": 47792, "start": 492.56, "end": 498.52000000000004, "text": " using the PC register, afterwards you have to decode the instruction, so that means figuring", "tokens": [1228, 264, 6465, 7280, 11, 10543, 291, 362, 281, 979, 1429, 264, 10951, 11, 370, 300, 1355, 15213], "temperature": 0.0, "avg_logprob": -0.16601979002660636, "compression_ratio": 1.8018018018018018, "no_speech_prob": 6.168393883854151e-05}, {"id": 111, "seek": 47792, "start": 498.52000000000004, "end": 504.24, "text": " out what instruction to run based on that byte that you just read, and you can do this", "tokens": [484, 437, 10951, 281, 1190, 2361, 322, 300, 40846, 300, 291, 445, 1401, 11, 293, 291, 393, 360, 341], "temperature": 0.0, "avg_logprob": -0.16601979002660636, "compression_ratio": 1.8018018018018018, "no_speech_prob": 6.168393883854151e-05}, {"id": 112, "seek": 50424, "start": 504.24, "end": 510.96000000000004, "text": " with a, in C++ you would use a switch statement, in Rust you can use a match statement.", "tokens": [365, 257, 11, 294, 383, 25472, 291, 576, 764, 257, 3679, 5629, 11, 294, 34952, 291, 393, 764, 257, 2995, 5629, 13], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 113, "seek": 50424, "start": 510.96000000000004, "end": 513.96, "text": " And after you decode the instructions you have to run it, so those are the three things", "tokens": [400, 934, 291, 979, 1429, 264, 9415, 291, 362, 281, 1190, 309, 11, 370, 729, 366, 264, 1045, 721], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 114, "seek": 50424, "start": 513.96, "end": 519.08, "text": " you do, you fetch, you decode and you run, and you run it in a loop, in a loop and that's", "tokens": [291, 360, 11, 291, 23673, 11, 291, 979, 1429, 293, 291, 1190, 11, 293, 291, 1190, 309, 294, 257, 6367, 11, 294, 257, 6367, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 115, "seek": 50424, "start": 519.08, "end": 521.48, "text": " what the CPU does.", "tokens": [437, 264, 13199, 775, 13], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 116, "seek": 50424, "start": 521.48, "end": 527.16, "text": " So this is one example of an instruction, the code is very simple, this is a memory", "tokens": [407, 341, 307, 472, 1365, 295, 364, 10951, 11, 264, 3089, 307, 588, 2199, 11, 341, 307, 257, 4675], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 117, "seek": 50424, "start": 527.16, "end": 533.36, "text": " instruction, I'm only going to comment on the return statement, this particular instruction", "tokens": [10951, 11, 286, 478, 787, 516, 281, 2871, 322, 264, 2736, 5629, 11, 341, 1729, 10951], "temperature": 0.0, "avg_logprob": -0.21000902769995516, "compression_ratio": 1.8623481781376519, "no_speech_prob": 2.6218416678602807e-05}, {"id": 118, "seek": 53336, "start": 533.36, "end": 537.84, "text": " on the real CPU would take eight cycles of the clock, and we need to keep track of this", "tokens": [322, 264, 957, 13199, 576, 747, 3180, 17796, 295, 264, 7830, 11, 293, 321, 643, 281, 1066, 2837, 295, 341], "temperature": 0.0, "avg_logprob": -0.19003185783464885, "compression_ratio": 1.7148760330578512, "no_speech_prob": 3.419312633923255e-05}, {"id": 119, "seek": 53336, "start": 537.84, "end": 544.44, "text": " because afterwards we need to see this information to synchronize all of the emulator, otherwise", "tokens": [570, 10543, 321, 643, 281, 536, 341, 1589, 281, 19331, 1125, 439, 295, 264, 846, 16381, 11, 5911], "temperature": 0.0, "avg_logprob": -0.19003185783464885, "compression_ratio": 1.7148760330578512, "no_speech_prob": 3.419312633923255e-05}, {"id": 120, "seek": 53336, "start": 544.44, "end": 549.64, "text": " it would lead to bugs, so that's why I returned the number.", "tokens": [309, 576, 1477, 281, 15120, 11, 370, 300, 311, 983, 286, 8752, 264, 1230, 13], "temperature": 0.0, "avg_logprob": -0.19003185783464885, "compression_ratio": 1.7148760330578512, "no_speech_prob": 3.419312633923255e-05}, {"id": 121, "seek": 53336, "start": 549.64, "end": 555.24, "text": " Another example of instruction, an arithmetic instruction and exit operation, this one takes", "tokens": [3996, 1365, 295, 10951, 11, 364, 42973, 10951, 293, 11043, 6916, 11, 341, 472, 2516], "temperature": 0.0, "avg_logprob": -0.19003185783464885, "compression_ratio": 1.7148760330578512, "no_speech_prob": 3.419312633923255e-05}, {"id": 122, "seek": 53336, "start": 555.24, "end": 562.9200000000001, "text": " for cycles and it's arithmetic so it modifies the contents of the F register.", "tokens": [337, 17796, 293, 309, 311, 42973, 370, 309, 1072, 11221, 264, 15768, 295, 264, 479, 7280, 13], "temperature": 0.0, "avg_logprob": -0.19003185783464885, "compression_ratio": 1.7148760330578512, "no_speech_prob": 3.419312633923255e-05}, {"id": 123, "seek": 56292, "start": 562.92, "end": 569.8399999999999, "text": " And you can look up how to implement every instruction on this PDF.", "tokens": [400, 291, 393, 574, 493, 577, 281, 4445, 633, 10951, 322, 341, 17752, 13], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 124, "seek": 56292, "start": 569.8399999999999, "end": 577.16, "text": " So you do this for 500 times, you might make mistakes but there are ways to fix those,", "tokens": [407, 291, 360, 341, 337, 5923, 1413, 11, 291, 1062, 652, 8038, 457, 456, 366, 2098, 281, 3191, 729, 11], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 125, "seek": 56292, "start": 577.16, "end": 580.36, "text": " I'll get to those later.", "tokens": [286, 603, 483, 281, 729, 1780, 13], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 126, "seek": 56292, "start": 580.36, "end": 584.4, "text": " So you do it 500 times and you will end up with a massive match statement or a switch", "tokens": [407, 291, 360, 309, 5923, 1413, 293, 291, 486, 917, 493, 365, 257, 5994, 2995, 5629, 420, 257, 3679], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 127, "seek": 56292, "start": 584.4, "end": 589.92, "text": " statement, but the code inside of each of the branches is very simple, but it's still", "tokens": [5629, 11, 457, 264, 3089, 1854, 295, 1184, 295, 264, 14770, 307, 588, 2199, 11, 457, 309, 311, 920], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 128, "seek": 56292, "start": 589.92, "end": 590.92, "text": " error prone.", "tokens": [6713, 25806, 13], "temperature": 0.0, "avg_logprob": -0.20777191718419394, "compression_ratio": 1.6177777777777778, "no_speech_prob": 2.747828148130793e-05}, {"id": 129, "seek": 59092, "start": 590.92, "end": 597.24, "text": " This is an optional thing you can do, because this is going to run very frequently, it doesn't", "tokens": [639, 307, 364, 17312, 551, 291, 393, 360, 11, 570, 341, 307, 516, 281, 1190, 588, 10374, 11, 309, 1177, 380], "temperature": 0.0, "avg_logprob": -0.23626883133597995, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.0001117146312026307}, {"id": 130, "seek": 59092, "start": 597.24, "end": 603.36, "text": " hurt to turn that into a sort of binary search, so you can optimize the code a bit using,", "tokens": [4607, 281, 1261, 300, 666, 257, 1333, 295, 17434, 3164, 11, 370, 291, 393, 19719, 264, 3089, 257, 857, 1228, 11], "temperature": 0.0, "avg_logprob": -0.23626883133597995, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.0001117146312026307}, {"id": 131, "seek": 59092, "start": 603.36, "end": 610.9599999999999, "text": " in Rust this is very straightforward using the match statements.", "tokens": [294, 34952, 341, 307, 588, 15325, 1228, 264, 2995, 12363, 13], "temperature": 0.0, "avg_logprob": -0.23626883133597995, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.0001117146312026307}, {"id": 132, "seek": 59092, "start": 610.9599999999999, "end": 614.5999999999999, "text": " So that's pretty much the CPU.", "tokens": [407, 300, 311, 1238, 709, 264, 13199, 13], "temperature": 0.0, "avg_logprob": -0.23626883133597995, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.0001117146312026307}, {"id": 133, "seek": 59092, "start": 614.5999999999999, "end": 620.16, "text": " I'm going to switch to the pixel processing unit, this is the chip responsible for graphics.", "tokens": [286, 478, 516, 281, 3679, 281, 264, 19261, 9007, 4985, 11, 341, 307, 264, 11409, 6250, 337, 11837, 13], "temperature": 0.0, "avg_logprob": -0.23626883133597995, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.0001117146312026307}, {"id": 134, "seek": 62016, "start": 620.16, "end": 632.1999999999999, "text": " So the Game Boy had an LCD panel, this size is 160 pixels by 144, total of 4 colors, more", "tokens": [407, 264, 7522, 9486, 632, 364, 33158, 4831, 11, 341, 2744, 307, 21243, 18668, 538, 45218, 11, 3217, 295, 1017, 4577, 11, 544], "temperature": 0.0, "avg_logprob": -0.22266812551589238, "compression_ratio": 1.5114155251141552, "no_speech_prob": 0.00019808750948868692}, {"id": 135, "seek": 62016, "start": 632.1999999999999, "end": 638.24, "text": " on Game Boy color of course, and it runs at roughly 60 hertz.", "tokens": [322, 7522, 9486, 2017, 295, 1164, 11, 293, 309, 6676, 412, 9810, 4060, 45830, 13], "temperature": 0.0, "avg_logprob": -0.22266812551589238, "compression_ratio": 1.5114155251141552, "no_speech_prob": 0.00019808750948868692}, {"id": 136, "seek": 62016, "start": 638.24, "end": 643.0799999999999, "text": " And the way graphics works on this particular system is by a composition of three layers,", "tokens": [400, 264, 636, 11837, 1985, 322, 341, 1729, 1185, 307, 538, 257, 12686, 295, 1045, 7914, 11], "temperature": 0.0, "avg_logprob": -0.22266812551589238, "compression_ratio": 1.5114155251141552, "no_speech_prob": 0.00019808750948868692}, {"id": 137, "seek": 62016, "start": 643.0799999999999, "end": 649.0799999999999, "text": " you have the window layer, the spread layer and the background layer, and then there are,", "tokens": [291, 362, 264, 4910, 4583, 11, 264, 3974, 4583, 293, 264, 3678, 4583, 11, 293, 550, 456, 366, 11], "temperature": 0.0, "avg_logprob": -0.22266812551589238, "compression_ratio": 1.5114155251141552, "no_speech_prob": 0.00019808750948868692}, {"id": 138, "seek": 64908, "start": 649.08, "end": 655.6800000000001, "text": " the CPU has registers, this device also has registers to program how you composite these", "tokens": [264, 13199, 575, 38351, 11, 341, 4302, 611, 575, 38351, 281, 1461, 577, 291, 25557, 613], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 139, "seek": 64908, "start": 655.6800000000001, "end": 658.1600000000001, "text": " layers together.", "tokens": [7914, 1214, 13], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 140, "seek": 64908, "start": 658.1600000000001, "end": 660.9200000000001, "text": " So I'm going to go layer by layer.", "tokens": [407, 286, 478, 516, 281, 352, 4583, 538, 4583, 13], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 141, "seek": 64908, "start": 660.9200000000001, "end": 666.6, "text": " So the first layer is the window layer.", "tokens": [407, 264, 700, 4583, 307, 264, 4910, 4583, 13], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 142, "seek": 64908, "start": 666.6, "end": 672.48, "text": " This is usually reserved for things like game stats, it's fixed on the LCD, you can move", "tokens": [639, 307, 2673, 24819, 337, 721, 411, 1216, 18152, 11, 309, 311, 6806, 322, 264, 33158, 11, 291, 393, 1286], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 143, "seek": 64908, "start": 672.48, "end": 677.9200000000001, "text": " it around, but the graphics within the layer are not movable, they are constrained to a", "tokens": [309, 926, 11, 457, 264, 11837, 1951, 264, 4583, 366, 406, 2402, 712, 11, 436, 366, 38901, 281, 257], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 144, "seek": 64908, "start": 677.9200000000001, "end": 678.9200000000001, "text": " grid.", "tokens": [10748, 13], "temperature": 0.0, "avg_logprob": -0.17307707134046052, "compression_ratio": 1.5851528384279476, "no_speech_prob": 4.4128450099378824e-05}, {"id": 145, "seek": 67892, "start": 678.92, "end": 681.16, "text": " Can anybody guess this game?", "tokens": [1664, 4472, 2041, 341, 1216, 30], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 146, "seek": 67892, "start": 681.16, "end": 686.12, "text": " Yes, Link's Awakening, yeah.", "tokens": [1079, 11, 8466, 311, 25274, 4559, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 147, "seek": 67892, "start": 686.12, "end": 691.12, "text": " So that's Link, Link is a sprite on the sprite layer.", "tokens": [407, 300, 311, 8466, 11, 8466, 307, 257, 43848, 322, 264, 43848, 4583, 13], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 148, "seek": 67892, "start": 691.12, "end": 697.92, "text": " So sprites are basically freely movable objects on the LCD, you can have 14 in total and they", "tokens": [407, 637, 30931, 366, 1936, 16433, 2402, 712, 6565, 322, 264, 33158, 11, 291, 393, 362, 3499, 294, 3217, 293, 436], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 149, "seek": 67892, "start": 697.92, "end": 704.0799999999999, "text": " come in two different sizes, programmable by registers again, along with other things", "tokens": [808, 294, 732, 819, 11602, 11, 37648, 712, 538, 38351, 797, 11, 2051, 365, 661, 721], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 150, "seek": 67892, "start": 704.0799999999999, "end": 708.16, "text": " like color and position and orientation and things like that.", "tokens": [411, 2017, 293, 2535, 293, 14764, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2322282267140818, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.00018742060638032854}, {"id": 151, "seek": 70816, "start": 708.16, "end": 713.56, "text": " And finally the background layer, what I think is the most interesting one, it's basically", "tokens": [400, 2721, 264, 3678, 4583, 11, 437, 286, 519, 307, 264, 881, 1880, 472, 11, 309, 311, 1936], "temperature": 0.0, "avg_logprob": -0.20702200820765546, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.00012824007717426866}, {"id": 152, "seek": 70816, "start": 713.56, "end": 722.24, "text": " a grid of 32 by 32 tiles, each tile is 8 by 8, so the total size is 256 by 256, so it", "tokens": [257, 10748, 295, 8858, 538, 8858, 21982, 11, 1184, 20590, 307, 1649, 538, 1649, 11, 370, 264, 3217, 2744, 307, 38882, 538, 38882, 11, 370, 309], "temperature": 0.0, "avg_logprob": -0.20702200820765546, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.00012824007717426866}, {"id": 153, "seek": 70816, "start": 722.24, "end": 727.76, "text": " doesn't fit on the LCD screen, but you can scroll it using registers.", "tokens": [1177, 380, 3318, 322, 264, 33158, 2568, 11, 457, 291, 393, 11369, 309, 1228, 38351, 13], "temperature": 0.0, "avg_logprob": -0.20702200820765546, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.00012824007717426866}, {"id": 154, "seek": 70816, "start": 727.76, "end": 734.0, "text": " So that's, and also furthermore, the scrolling wraps around so you can be clever and implement", "tokens": [407, 300, 311, 11, 293, 611, 3052, 3138, 11, 264, 29053, 25831, 926, 370, 291, 393, 312, 13494, 293, 4445], "temperature": 0.0, "avg_logprob": -0.20702200820765546, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.00012824007717426866}, {"id": 155, "seek": 70816, "start": 734.0, "end": 737.52, "text": " infinite scrolling that way.", "tokens": [13785, 29053, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.20702200820765546, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.00012824007717426866}, {"id": 156, "seek": 73752, "start": 737.52, "end": 744.4, "text": " So it cannot, so there are more registers, I don't have time to talk about all of them,", "tokens": [407, 309, 2644, 11, 370, 456, 366, 544, 38351, 11, 286, 500, 380, 362, 565, 281, 751, 466, 439, 295, 552, 11], "temperature": 0.0, "avg_logprob": -0.1431248982747396, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00014284244389273226}, {"id": 157, "seek": 73752, "start": 744.4, "end": 749.16, "text": " but there's a link.", "tokens": [457, 456, 311, 257, 2113, 13], "temperature": 0.0, "avg_logprob": -0.1431248982747396, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00014284244389273226}, {"id": 158, "seek": 73752, "start": 749.16, "end": 756.0799999999999, "text": " So by today's standards, this graphic-wise, this system cannot do much, but there are", "tokens": [407, 538, 965, 311, 7787, 11, 341, 14089, 12, 3711, 11, 341, 1185, 2644, 360, 709, 11, 457, 456, 366], "temperature": 0.0, "avg_logprob": -0.1431248982747396, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00014284244389273226}, {"id": 159, "seek": 73752, "start": 756.0799999999999, "end": 758.52, "text": " games that are quite clever using these limitations.", "tokens": [2813, 300, 366, 1596, 13494, 1228, 613, 15705, 13], "temperature": 0.0, "avg_logprob": -0.1431248982747396, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00014284244389273226}, {"id": 160, "seek": 73752, "start": 758.52, "end": 764.1999999999999, "text": " So this is one example, it's not really a game, it's more of a technical demo, but still.", "tokens": [407, 341, 307, 472, 1365, 11, 309, 311, 406, 534, 257, 1216, 11, 309, 311, 544, 295, 257, 6191, 10723, 11, 457, 920, 13], "temperature": 0.0, "avg_logprob": -0.1431248982747396, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00014284244389273226}, {"id": 161, "seek": 76420, "start": 764.2, "end": 769.96, "text": " So this particular example is used in the background layer only, and it's modifying this scrolling", "tokens": [407, 341, 1729, 1365, 307, 1143, 294, 264, 3678, 4583, 787, 11, 293, 309, 311, 42626, 341, 29053], "temperature": 0.0, "avg_logprob": -0.2075615699845131, "compression_ratio": 1.717557251908397, "no_speech_prob": 3.204437598469667e-05}, {"id": 162, "seek": 76420, "start": 769.96, "end": 774.6400000000001, "text": " register, so it's actually moving it around the screen, however, it's changing the value", "tokens": [7280, 11, 370, 309, 311, 767, 2684, 309, 926, 264, 2568, 11, 4461, 11, 309, 311, 4473, 264, 2158], "temperature": 0.0, "avg_logprob": -0.2075615699845131, "compression_ratio": 1.717557251908397, "no_speech_prob": 3.204437598469667e-05}, {"id": 163, "seek": 76420, "start": 774.6400000000001, "end": 779.48, "text": " of the register on every single line, and what this accomplishes is like a vertical", "tokens": [295, 264, 7280, 322, 633, 2167, 1622, 11, 293, 437, 341, 9021, 279, 307, 411, 257, 9429], "temperature": 0.0, "avg_logprob": -0.2075615699845131, "compression_ratio": 1.717557251908397, "no_speech_prob": 3.204437598469667e-05}, {"id": 164, "seek": 76420, "start": 779.48, "end": 785.0400000000001, "text": " stretching effect, and at the same time they are stretching the Nintendo logo horizontally", "tokens": [19632, 1802, 11, 293, 412, 264, 912, 565, 436, 366, 19632, 264, 11578, 9699, 33796], "temperature": 0.0, "avg_logprob": -0.2075615699845131, "compression_ratio": 1.717557251908397, "no_speech_prob": 3.204437598469667e-05}, {"id": 165, "seek": 76420, "start": 785.0400000000001, "end": 790.6800000000001, "text": " in memory, you can see right there, and in combination these two things looks like they", "tokens": [294, 4675, 11, 291, 393, 536, 558, 456, 11, 293, 294, 6562, 613, 732, 721, 1542, 411, 436], "temperature": 0.0, "avg_logprob": -0.2075615699845131, "compression_ratio": 1.717557251908397, "no_speech_prob": 3.204437598469667e-05}, {"id": 166, "seek": 79068, "start": 790.68, "end": 795.76, "text": " are zooming in the Nintendo logo, which is something that the gameboy cannot do in hardware,", "tokens": [366, 48226, 294, 264, 11578, 9699, 11, 597, 307, 746, 300, 264, 1216, 12795, 2644, 360, 294, 8837, 11], "temperature": 0.0, "avg_logprob": -0.1713872014740367, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0001275763352168724}, {"id": 167, "seek": 79068, "start": 795.76, "end": 802.2399999999999, "text": " but they work around this by combining hardware and software, so I think it's quite interesting.", "tokens": [457, 436, 589, 926, 341, 538, 21928, 8837, 293, 4722, 11, 370, 286, 519, 309, 311, 1596, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1713872014740367, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0001275763352168724}, {"id": 168, "seek": 79068, "start": 802.2399999999999, "end": 808.92, "text": " And there are many more examples of games being clever, this is one.", "tokens": [400, 456, 366, 867, 544, 5110, 295, 2813, 885, 13494, 11, 341, 307, 472, 13], "temperature": 0.0, "avg_logprob": -0.1713872014740367, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0001275763352168724}, {"id": 169, "seek": 79068, "start": 808.92, "end": 816.28, "text": " So implementation-wise, this pixel processing unit is a bit more tricky to implement, like", "tokens": [407, 11420, 12, 3711, 11, 341, 19261, 9007, 4985, 307, 257, 857, 544, 12414, 281, 4445, 11, 411], "temperature": 0.0, "avg_logprob": -0.1713872014740367, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0001275763352168724}, {"id": 170, "seek": 81628, "start": 816.28, "end": 822.88, "text": " on the CPU, and because of that it is a source of most of my bugs, and this game is easy", "tokens": [322, 264, 13199, 11, 293, 570, 295, 300, 309, 307, 257, 4009, 295, 881, 295, 452, 15120, 11, 293, 341, 1216, 307, 1858], "temperature": 0.0, "avg_logprob": -0.17326457091052122, "compression_ratio": 1.6072874493927125, "no_speech_prob": 0.0002546864270698279}, {"id": 171, "seek": 81628, "start": 822.88, "end": 828.6, "text": " to recognize, it's Tony Hawk.", "tokens": [281, 5521, 11, 309, 311, 10902, 42219, 13], "temperature": 0.0, "avg_logprob": -0.17326457091052122, "compression_ratio": 1.6072874493927125, "no_speech_prob": 0.0002546864270698279}, {"id": 172, "seek": 81628, "start": 828.6, "end": 833.68, "text": " So the reason it's tricky to implement correctly is because we need to keep the CPU and the", "tokens": [407, 264, 1778, 309, 311, 12414, 281, 4445, 8944, 307, 570, 321, 643, 281, 1066, 264, 13199, 293, 264], "temperature": 0.0, "avg_logprob": -0.17326457091052122, "compression_ratio": 1.6072874493927125, "no_speech_prob": 0.0002546864270698279}, {"id": 173, "seek": 81628, "start": 833.68, "end": 838.48, "text": " pixel processing unit in constant sync, that's the reason I was returning the number of cycles", "tokens": [19261, 9007, 4985, 294, 5754, 20271, 11, 300, 311, 264, 1778, 286, 390, 12678, 264, 1230, 295, 17796], "temperature": 0.0, "avg_logprob": -0.17326457091052122, "compression_ratio": 1.6072874493927125, "no_speech_prob": 0.0002546864270698279}, {"id": 174, "seek": 81628, "start": 838.48, "end": 844.4, "text": " on each instruction before, and if you don't do it accurately enough it would lead to stuff", "tokens": [322, 1184, 10951, 949, 11, 293, 498, 291, 500, 380, 360, 309, 20095, 1547, 309, 576, 1477, 281, 1507], "temperature": 0.0, "avg_logprob": -0.17326457091052122, "compression_ratio": 1.6072874493927125, "no_speech_prob": 0.0002546864270698279}, {"id": 175, "seek": 84440, "start": 844.4, "end": 851.76, "text": " like this happening, however I found that most games don't really care, most games are", "tokens": [411, 341, 2737, 11, 4461, 286, 1352, 300, 881, 2813, 500, 380, 534, 1127, 11, 881, 2813, 366], "temperature": 0.0, "avg_logprob": -0.18975634958552218, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00021495058899745345}, {"id": 176, "seek": 84440, "start": 851.76, "end": 856.3199999999999, "text": " quite forgiving of inaccuracies, every now and then you will encounter a situation like", "tokens": [1596, 37701, 295, 37957, 374, 20330, 11, 633, 586, 293, 550, 291, 486, 8593, 257, 2590, 411], "temperature": 0.0, "avg_logprob": -0.18975634958552218, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00021495058899745345}, {"id": 177, "seek": 84440, "start": 856.3199999999999, "end": 861.0, "text": " this, in this particular example the rest of the game looks fine, it's only the interesting", "tokens": [341, 11, 294, 341, 1729, 1365, 264, 1472, 295, 264, 1216, 1542, 2489, 11, 309, 311, 787, 264, 1880], "temperature": 0.0, "avg_logprob": -0.18975634958552218, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00021495058899745345}, {"id": 178, "seek": 84440, "start": 861.0, "end": 869.68, "text": " that is glitchy, and I think this is one of the reasons why the gameboy is a good emulation", "tokens": [300, 307, 23552, 88, 11, 293, 286, 519, 341, 307, 472, 295, 264, 4112, 983, 264, 1216, 12795, 307, 257, 665, 846, 2776], "temperature": 0.0, "avg_logprob": -0.18975634958552218, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00021495058899745345}, {"id": 179, "seek": 86968, "start": 869.68, "end": 875.4, "text": " emulator, beginning-friendly emulation project because you don't need to be super accurate", "tokens": [846, 16381, 11, 2863, 12, 22864, 846, 2776, 1716, 570, 291, 500, 380, 643, 281, 312, 1687, 8559], "temperature": 0.0, "avg_logprob": -0.17978394285161445, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0001893438457045704}, {"id": 180, "seek": 86968, "start": 875.4, "end": 879.12, "text": " to emulate most games.", "tokens": [281, 45497, 881, 2813, 13], "temperature": 0.0, "avg_logprob": -0.17978394285161445, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0001893438457045704}, {"id": 181, "seek": 86968, "start": 879.12, "end": 886.88, "text": " So yeah, this is how you would implement the synchronization, this is how I do it, so first", "tokens": [407, 1338, 11, 341, 307, 577, 291, 576, 4445, 264, 19331, 2144, 11, 341, 307, 577, 286, 360, 309, 11, 370, 700], "temperature": 0.0, "avg_logprob": -0.17978394285161445, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0001893438457045704}, {"id": 182, "seek": 86968, "start": 886.88, "end": 893.64, "text": " you on each iteration step you implement, you run the CPU for an instruction, it will", "tokens": [291, 322, 1184, 24784, 1823, 291, 4445, 11, 291, 1190, 264, 13199, 337, 364, 10951, 11, 309, 486], "temperature": 0.0, "avg_logprob": -0.17978394285161445, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0001893438457045704}, {"id": 183, "seek": 86968, "start": 893.64, "end": 897.8, "text": " give you the number of cycles that it will take, and then you use that to synchronize", "tokens": [976, 291, 264, 1230, 295, 17796, 300, 309, 486, 747, 11, 293, 550, 291, 764, 300, 281, 19331, 1125], "temperature": 0.0, "avg_logprob": -0.17978394285161445, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0001893438457045704}, {"id": 184, "seek": 89780, "start": 897.8, "end": 901.1999999999999, "text": " the rest of the components, so you feed it to the rest of the components so that they", "tokens": [264, 1472, 295, 264, 6677, 11, 370, 291, 3154, 309, 281, 264, 1472, 295, 264, 6677, 370, 300, 436], "temperature": 0.0, "avg_logprob": -0.15662633219072897, "compression_ratio": 1.7810945273631842, "no_speech_prob": 0.00016179008525796235}, {"id": 185, "seek": 89780, "start": 901.1999999999999, "end": 907.4799999999999, "text": " catch up to the CPU, so you do this forever, basically this loop right here is the core", "tokens": [3745, 493, 281, 264, 13199, 11, 370, 291, 360, 341, 5680, 11, 1936, 341, 6367, 558, 510, 307, 264, 4965], "temperature": 0.0, "avg_logprob": -0.15662633219072897, "compression_ratio": 1.7810945273631842, "no_speech_prob": 0.00016179008525796235}, {"id": 186, "seek": 89780, "start": 907.4799999999999, "end": 912.7199999999999, "text": " of this emulator, this is what the emulator looks like, there are a few things like getting", "tokens": [295, 341, 846, 16381, 11, 341, 307, 437, 264, 846, 16381, 1542, 411, 11, 456, 366, 257, 1326, 721, 411, 1242], "temperature": 0.0, "avg_logprob": -0.15662633219072897, "compression_ratio": 1.7810945273631842, "no_speech_prob": 0.00016179008525796235}, {"id": 187, "seek": 89780, "start": 912.7199999999999, "end": 924.52, "text": " the image from the screen and so on, but conceptually this is an emulator, it's very simple.", "tokens": [264, 3256, 490, 264, 2568, 293, 370, 322, 11, 457, 3410, 671, 341, 307, 364, 846, 16381, 11, 309, 311, 588, 2199, 13], "temperature": 0.0, "avg_logprob": -0.15662633219072897, "compression_ratio": 1.7810945273631842, "no_speech_prob": 0.00016179008525796235}, {"id": 188, "seek": 92452, "start": 924.52, "end": 930.96, "text": " So I've talked about the CPU and the pixel processing unit, both have registers, but", "tokens": [407, 286, 600, 2825, 466, 264, 13199, 293, 264, 19261, 9007, 4985, 11, 1293, 362, 38351, 11, 457], "temperature": 0.0, "avg_logprob": -0.15426982879638673, "compression_ratio": 1.8565400843881856, "no_speech_prob": 0.0001992895849980414}, {"id": 189, "seek": 92452, "start": 930.96, "end": 936.8, "text": " they are separate things on the circuit board, so the CPU needs to be able to modify the", "tokens": [436, 366, 4994, 721, 322, 264, 9048, 3150, 11, 370, 264, 13199, 2203, 281, 312, 1075, 281, 16927, 264], "temperature": 0.0, "avg_logprob": -0.15426982879638673, "compression_ratio": 1.8565400843881856, "no_speech_prob": 0.0001992895849980414}, {"id": 190, "seek": 92452, "start": 936.8, "end": 943.36, "text": " registers of the pixel processing unit, and the way this is done is through memory, because", "tokens": [38351, 295, 264, 19261, 9007, 4985, 11, 293, 264, 636, 341, 307, 1096, 307, 807, 4675, 11, 570], "temperature": 0.0, "avg_logprob": -0.15426982879638673, "compression_ratio": 1.8565400843881856, "no_speech_prob": 0.0001992895849980414}, {"id": 191, "seek": 92452, "start": 943.36, "end": 948.92, "text": " these registers, every register that is not a CPU register is exposed in memory, so by", "tokens": [613, 38351, 11, 633, 7280, 300, 307, 406, 257, 13199, 7280, 307, 9495, 294, 4675, 11, 370, 538], "temperature": 0.0, "avg_logprob": -0.15426982879638673, "compression_ratio": 1.8565400843881856, "no_speech_prob": 0.0001992895849980414}, {"id": 192, "seek": 92452, "start": 948.92, "end": 952.84, "text": " reading and writing particular values to a particular address in memory, you can modify", "tokens": [3760, 293, 3579, 1729, 4190, 281, 257, 1729, 2985, 294, 4675, 11, 291, 393, 16927], "temperature": 0.0, "avg_logprob": -0.15426982879638673, "compression_ratio": 1.8565400843881856, "no_speech_prob": 0.0001992895849980414}, {"id": 193, "seek": 95284, "start": 952.84, "end": 961.2800000000001, "text": " the registers of these devices, and you can map the memory map a bit like this, you have", "tokens": [264, 38351, 295, 613, 5759, 11, 293, 291, 393, 4471, 264, 4675, 4471, 257, 857, 411, 341, 11, 291, 362], "temperature": 0.0, "avg_logprob": -0.1744561023022755, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.8150359109276906e-05}, {"id": 194, "seek": 95284, "start": 961.2800000000001, "end": 966.32, "text": " the characters right there, the video RAM and work RAM are the same size, because they", "tokens": [264, 4342, 558, 456, 11, 264, 960, 14561, 293, 589, 14561, 366, 264, 912, 2744, 11, 570, 436], "temperature": 0.0, "avg_logprob": -0.1744561023022755, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.8150359109276906e-05}, {"id": 195, "seek": 95284, "start": 966.32, "end": 970.2800000000001, "text": " are those two chips on the circuit board, those two other chips, they are the exact", "tokens": [366, 729, 732, 11583, 322, 264, 9048, 3150, 11, 729, 732, 661, 11583, 11, 436, 366, 264, 1900], "temperature": 0.0, "avg_logprob": -0.1744561023022755, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.8150359109276906e-05}, {"id": 196, "seek": 95284, "start": 970.2800000000001, "end": 977.5600000000001, "text": " same chip, and there are other things, the buttons themselves are inside of these registers", "tokens": [912, 11409, 11, 293, 456, 366, 661, 721, 11, 264, 9905, 2969, 366, 1854, 295, 613, 38351], "temperature": 0.0, "avg_logprob": -0.1744561023022755, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.8150359109276906e-05}, {"id": 197, "seek": 97756, "start": 977.56, "end": 984.28, "text": " I.O., so yeah, there are some regions that are a bit special, you are not allowed to write", "tokens": [286, 13, 46, 7933, 370, 1338, 11, 456, 366, 512, 10682, 300, 366, 257, 857, 2121, 11, 291, 366, 406, 4350, 281, 2464], "temperature": 0.0, "avg_logprob": -0.1571745810570655, "compression_ratio": 1.6185567010309279, "no_speech_prob": 8.701332262717187e-05}, {"id": 198, "seek": 97756, "start": 984.28, "end": 991.4, "text": " to this region for some reason, and there are other details, this link has a technical", "tokens": [281, 341, 4458, 337, 512, 1778, 11, 293, 456, 366, 661, 4365, 11, 341, 2113, 575, 257, 6191], "temperature": 0.0, "avg_logprob": -0.1571745810570655, "compression_ratio": 1.6185567010309279, "no_speech_prob": 8.701332262717187e-05}, {"id": 199, "seek": 97756, "start": 991.4, "end": 997.8399999999999, "text": " documentation of the rest of the map in detail.", "tokens": [14333, 295, 264, 1472, 295, 264, 4471, 294, 2607, 13], "temperature": 0.0, "avg_logprob": -0.1571745810570655, "compression_ratio": 1.6185567010309279, "no_speech_prob": 8.701332262717187e-05}, {"id": 200, "seek": 97756, "start": 997.8399999999999, "end": 1003.5999999999999, "text": " So implementing the memory is quite easy, you just list every single component and every", "tokens": [407, 18114, 264, 4675, 307, 1596, 1858, 11, 291, 445, 1329, 633, 2167, 6542, 293, 633], "temperature": 0.0, "avg_logprob": -0.1571745810570655, "compression_ratio": 1.6185567010309279, "no_speech_prob": 8.701332262717187e-05}, {"id": 201, "seek": 100360, "start": 1003.6, "end": 1011.32, "text": " single register, a bit like this, so you get the cartridge, the video RAM, pixel processing", "tokens": [2167, 7280, 11, 257, 857, 411, 341, 11, 370, 291, 483, 264, 27753, 11, 264, 960, 14561, 11, 19261, 9007], "temperature": 0.0, "avg_logprob": -0.1665320452521829, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000105417420854792}, {"id": 202, "seek": 100360, "start": 1011.32, "end": 1018.76, "text": " unit registers, the buttons, sound registers, interrupt, controller, and then you need to", "tokens": [4985, 38351, 11, 264, 9905, 11, 1626, 38351, 11, 12729, 11, 10561, 11, 293, 550, 291, 643, 281], "temperature": 0.0, "avg_logprob": -0.1665320452521829, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000105417420854792}, {"id": 203, "seek": 100360, "start": 1018.76, "end": 1025.24, "text": " be able to read from them, so based on the address range you can you route it to the", "tokens": [312, 1075, 281, 1401, 490, 552, 11, 370, 2361, 322, 264, 2985, 3613, 291, 393, 291, 7955, 309, 281, 264], "temperature": 0.0, "avg_logprob": -0.1665320452521829, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000105417420854792}, {"id": 204, "seek": 100360, "start": 1025.24, "end": 1032.08, "text": " appropriate device, and you need a similar method for writing values, some of the values", "tokens": [6854, 4302, 11, 293, 291, 643, 257, 2531, 3170, 337, 3579, 4190, 11, 512, 295, 264, 4190], "temperature": 0.0, "avg_logprob": -0.1665320452521829, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000105417420854792}, {"id": 205, "seek": 103208, "start": 1032.08, "end": 1043.32, "text": " will be read only, so keep that in mind, so at this point maybe you will have a sort of", "tokens": [486, 312, 1401, 787, 11, 370, 1066, 300, 294, 1575, 11, 370, 412, 341, 935, 1310, 291, 486, 362, 257, 1333, 295], "temperature": 0.0, "avg_logprob": -0.22797147432963052, "compression_ratio": 1.61875, "no_speech_prob": 0.0002139238640666008}, {"id": 206, "seek": 103208, "start": 1043.32, "end": 1048.1999999999998, "text": " working emulator, but if it is your first emulator, as was my case, then you will run", "tokens": [1364, 846, 16381, 11, 457, 498, 309, 307, 428, 700, 846, 16381, 11, 382, 390, 452, 1389, 11, 550, 291, 486, 1190], "temperature": 0.0, "avg_logprob": -0.22797147432963052, "compression_ratio": 1.61875, "no_speech_prob": 0.0002139238640666008}, {"id": 207, "seek": 103208, "start": 1048.1999999999998, "end": 1054.52, "text": " into bugs, and there are a few things, and they can be a bit tricky compared to other", "tokens": [666, 15120, 11, 293, 456, 366, 257, 1326, 721, 11, 293, 436, 393, 312, 257, 857, 12414, 5347, 281, 661], "temperature": 0.0, "avg_logprob": -0.22797147432963052, "compression_ratio": 1.61875, "no_speech_prob": 0.0002139238640666008}, {"id": 208, "seek": 105452, "start": 1054.52, "end": 1062.92, "text": " types of software I found, so there are a few strategies that I, sorry, so there are", "tokens": [3467, 295, 4722, 286, 1352, 11, 370, 456, 366, 257, 1326, 9029, 300, 286, 11, 2597, 11, 370, 456, 366], "temperature": 0.0, "avg_logprob": -0.19271076426786535, "compression_ratio": 1.7254901960784315, "no_speech_prob": 9.254889300791547e-05}, {"id": 209, "seek": 105452, "start": 1062.92, "end": 1066.24, "text": " a few strategies you can follow in order to track down bugs, the first one I could give", "tokens": [257, 1326, 9029, 291, 393, 1524, 294, 1668, 281, 2837, 760, 15120, 11, 264, 700, 472, 286, 727, 976], "temperature": 0.0, "avg_logprob": -0.19271076426786535, "compression_ratio": 1.7254901960784315, "no_speech_prob": 9.254889300791547e-05}, {"id": 210, "seek": 105452, "start": 1066.24, "end": 1072.08, "text": " is just, because there is so much documentation about the Game Boy you can turn it into unit", "tokens": [307, 445, 11, 570, 456, 307, 370, 709, 14333, 466, 264, 7522, 9486, 291, 393, 1261, 309, 666, 4985], "temperature": 0.0, "avg_logprob": -0.19271076426786535, "compression_ratio": 1.7254901960784315, "no_speech_prob": 9.254889300791547e-05}, {"id": 211, "seek": 105452, "start": 1072.08, "end": 1082.28, "text": " tests, to unit test particular sections of the hardware, the other reason why the Game", "tokens": [6921, 11, 281, 4985, 1500, 1729, 10863, 295, 264, 8837, 11, 264, 661, 1778, 983, 264, 7522], "temperature": 0.0, "avg_logprob": -0.19271076426786535, "compression_ratio": 1.7254901960784315, "no_speech_prob": 9.254889300791547e-05}, {"id": 212, "seek": 108228, "start": 1082.28, "end": 1088.48, "text": " Boy is so beginner friendly is you can actually run the diagnostics, there are available ROMs", "tokens": [9486, 307, 370, 22080, 9208, 307, 291, 393, 767, 1190, 264, 43215, 1167, 11, 456, 366, 2435, 41678, 82], "temperature": 0.0, "avg_logprob": -0.13767149256563735, "compression_ratio": 1.680952380952381, "no_speech_prob": 6.482262688223273e-05}, {"id": 213, "seek": 108228, "start": 1088.48, "end": 1093.12, "text": " you can run and it will tell you where you are, where you have issues, so if you make", "tokens": [291, 393, 1190, 293, 309, 486, 980, 291, 689, 291, 366, 11, 689, 291, 362, 2663, 11, 370, 498, 291, 652], "temperature": 0.0, "avg_logprob": -0.13767149256563735, "compression_ratio": 1.680952380952381, "no_speech_prob": 6.482262688223273e-05}, {"id": 214, "seek": 108228, "start": 1093.12, "end": 1099.12, "text": " a mistake on the CPU, which is likely, then this particular ROM will tell you what the", "tokens": [257, 6146, 322, 264, 13199, 11, 597, 307, 3700, 11, 550, 341, 1729, 41678, 486, 980, 291, 437, 264], "temperature": 0.0, "avg_logprob": -0.13767149256563735, "compression_ratio": 1.680952380952381, "no_speech_prob": 6.482262688223273e-05}, {"id": 215, "seek": 108228, "start": 1099.12, "end": 1105.76, "text": " mistake was, and you can also integrate this into your testing framework to run in CIO", "tokens": [6146, 390, 11, 293, 291, 393, 611, 13365, 341, 666, 428, 4997, 8388, 281, 1190, 294, 383, 15167], "temperature": 0.0, "avg_logprob": -0.13767149256563735, "compression_ratio": 1.680952380952381, "no_speech_prob": 6.482262688223273e-05}, {"id": 216, "seek": 110576, "start": 1105.76, "end": 1114.08, "text": " for extra credit, so the next one, the next tip is debugging, I am going to show debugging", "tokens": [337, 2857, 5397, 11, 370, 264, 958, 472, 11, 264, 958, 4125, 307, 45592, 11, 286, 669, 516, 281, 855, 45592], "temperature": 0.0, "avg_logprob": -0.1659322256570334, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.00010435326112201437}, {"id": 217, "seek": 110576, "start": 1114.08, "end": 1121.24, "text": " using an example, so after you have an emulator, the logical step is to build a debugger for", "tokens": [1228, 364, 1365, 11, 370, 934, 291, 362, 364, 846, 16381, 11, 264, 14978, 1823, 307, 281, 1322, 257, 24083, 1321, 337], "temperature": 0.0, "avg_logprob": -0.1659322256570334, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.00010435326112201437}, {"id": 218, "seek": 110576, "start": 1121.24, "end": 1126.48, "text": " it, because it will allow you to see how, it will teach you things about the games running,", "tokens": [309, 11, 570, 309, 486, 2089, 291, 281, 536, 577, 11, 309, 486, 2924, 291, 721, 466, 264, 2813, 2614, 11], "temperature": 0.0, "avg_logprob": -0.1659322256570334, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.00010435326112201437}, {"id": 219, "seek": 110576, "start": 1126.48, "end": 1131.56, "text": " but it will also teach you where you might be making mistakes, so in this particular", "tokens": [457, 309, 486, 611, 2924, 291, 689, 291, 1062, 312, 1455, 8038, 11, 370, 294, 341, 1729], "temperature": 0.0, "avg_logprob": -0.1659322256570334, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.00010435326112201437}, {"id": 220, "seek": 113156, "start": 1131.56, "end": 1137.1599999999999, "text": " example, when I run this game, at the moment it doesn't work, so basically this is what", "tokens": [1365, 11, 562, 286, 1190, 341, 1216, 11, 412, 264, 1623, 309, 1177, 380, 589, 11, 370, 1936, 341, 307, 437], "temperature": 0.0, "avg_logprob": -0.1663862556539556, "compression_ratio": 1.6334841628959276, "no_speech_prob": 9.710043377708644e-05}, {"id": 221, "seek": 113156, "start": 1137.1599999999999, "end": 1144.44, "text": " it looks like, it just gives you a black screen, so there is nothing going on, but if you spend", "tokens": [309, 1542, 411, 11, 309, 445, 2709, 291, 257, 2211, 2568, 11, 370, 456, 307, 1825, 516, 322, 11, 457, 498, 291, 3496], "temperature": 0.0, "avg_logprob": -0.1663862556539556, "compression_ratio": 1.6334841628959276, "no_speech_prob": 9.710043377708644e-05}, {"id": 222, "seek": 113156, "start": 1144.44, "end": 1153.0, "text": " time making a debugger, then you can start finding clues, in this case, I spend sometimes", "tokens": [565, 1455, 257, 24083, 1321, 11, 550, 291, 393, 722, 5006, 20936, 11, 294, 341, 1389, 11, 286, 3496, 2171], "temperature": 0.0, "avg_logprob": -0.1663862556539556, "compression_ratio": 1.6334841628959276, "no_speech_prob": 9.710043377708644e-05}, {"id": 223, "seek": 113156, "start": 1153.0, "end": 1158.9199999999998, "text": " just getting the instructions, the registers, the disassembly, very useful, and in this", "tokens": [445, 1242, 264, 9415, 11, 264, 38351, 11, 264, 717, 29386, 356, 11, 588, 4420, 11, 293, 294, 341], "temperature": 0.0, "avg_logprob": -0.1663862556539556, "compression_ratio": 1.6334841628959276, "no_speech_prob": 9.710043377708644e-05}, {"id": 224, "seek": 115892, "start": 1158.92, "end": 1167.8000000000002, "text": " particular example, I know what the issue with this game is, so it is writing a value", "tokens": [1729, 1365, 11, 286, 458, 437, 264, 2734, 365, 341, 1216, 307, 11, 370, 309, 307, 3579, 257, 2158], "temperature": 0.0, "avg_logprob": -0.13650235032613298, "compression_ratio": 1.7423076923076923, "no_speech_prob": 7.67159290262498e-05}, {"id": 225, "seek": 115892, "start": 1167.8000000000002, "end": 1172.64, "text": " from this address and expecting a value that is never there, so this address corresponds", "tokens": [490, 341, 2985, 293, 9650, 257, 2158, 300, 307, 1128, 456, 11, 370, 341, 2985, 23249], "temperature": 0.0, "avg_logprob": -0.13650235032613298, "compression_ratio": 1.7423076923076923, "no_speech_prob": 7.67159290262498e-05}, {"id": 226, "seek": 115892, "start": 1172.64, "end": 1177.76, "text": " to something called a DMA transfer, and what this tells me is that I have made a mistake", "tokens": [281, 746, 1219, 257, 413, 9998, 5003, 11, 293, 437, 341, 5112, 385, 307, 300, 286, 362, 1027, 257, 6146], "temperature": 0.0, "avg_logprob": -0.13650235032613298, "compression_ratio": 1.7423076923076923, "no_speech_prob": 7.67159290262498e-05}, {"id": 227, "seek": 115892, "start": 1177.76, "end": 1182.88, "text": " in this emulation, so I can go to that particular section of my project and fix it, but I haven't", "tokens": [294, 341, 846, 2776, 11, 370, 286, 393, 352, 281, 300, 1729, 3541, 295, 452, 1716, 293, 3191, 309, 11, 457, 286, 2378, 380], "temperature": 0.0, "avg_logprob": -0.13650235032613298, "compression_ratio": 1.7423076923076923, "no_speech_prob": 7.67159290262498e-05}, {"id": 228, "seek": 115892, "start": 1182.88, "end": 1188.2, "text": " fixed it yet, because I found it quite recently, and also I found that it is a lot more fun", "tokens": [6806, 309, 1939, 11, 570, 286, 1352, 309, 1596, 3938, 11, 293, 611, 286, 1352, 300, 309, 307, 257, 688, 544, 1019], "temperature": 0.0, "avg_logprob": -0.13650235032613298, "compression_ratio": 1.7423076923076923, "no_speech_prob": 7.67159290262498e-05}, {"id": 229, "seek": 118820, "start": 1188.2, "end": 1196.24, "text": " to add debugging features than it is fixing the issues themselves, and I've been a bit", "tokens": [281, 909, 45592, 4122, 813, 309, 307, 19442, 264, 2663, 2969, 11, 293, 286, 600, 668, 257, 857], "temperature": 0.0, "avg_logprob": -0.19364140431086221, "compression_ratio": 1.6147186147186148, "no_speech_prob": 4.3159525375813246e-05}, {"id": 230, "seek": 118820, "start": 1196.24, "end": 1203.88, "text": " busy recently, so that's the end of my technical talk, and I'm going to finish with some conclusions,", "tokens": [5856, 3938, 11, 370, 300, 311, 264, 917, 295, 452, 6191, 751, 11, 293, 286, 478, 516, 281, 2413, 365, 512, 22865, 11], "temperature": 0.0, "avg_logprob": -0.19364140431086221, "compression_ratio": 1.6147186147186148, "no_speech_prob": 4.3159525375813246e-05}, {"id": 231, "seek": 118820, "start": 1203.88, "end": 1209.28, "text": " this is my favorite glitch by the way, it only happens when you set the name to a particular", "tokens": [341, 307, 452, 2954, 23552, 538, 264, 636, 11, 309, 787, 2314, 562, 291, 992, 264, 1315, 281, 257, 1729], "temperature": 0.0, "avg_logprob": -0.19364140431086221, "compression_ratio": 1.6147186147186148, "no_speech_prob": 4.3159525375813246e-05}, {"id": 232, "seek": 118820, "start": 1209.28, "end": 1216.68, "text": " name, it is very weird, so writing an emulator, at least on a Gameboy emulator, is the easy", "tokens": [1315, 11, 309, 307, 588, 3657, 11, 370, 3579, 364, 846, 16381, 11, 412, 1935, 322, 257, 7522, 12795, 846, 16381, 11, 307, 264, 1858], "temperature": 0.0, "avg_logprob": -0.19364140431086221, "compression_ratio": 1.6147186147186148, "no_speech_prob": 4.3159525375813246e-05}, {"id": 233, "seek": 121668, "start": 1216.68, "end": 1221.64, "text": " part of emulating a Gameboy, like I said, there's tons of documentation, and the hard", "tokens": [644, 295, 846, 12162, 257, 7522, 12795, 11, 411, 286, 848, 11, 456, 311, 9131, 295, 14333, 11, 293, 264, 1152], "temperature": 0.0, "avg_logprob": -0.1734200053744846, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.00013181667600292712}, {"id": 234, "seek": 121668, "start": 1221.64, "end": 1225.6000000000001, "text": " part of the work has been done by other people who have been kindly enough to write down", "tokens": [644, 295, 264, 589, 575, 668, 1096, 538, 661, 561, 567, 362, 668, 29736, 1547, 281, 2464, 760], "temperature": 0.0, "avg_logprob": -0.1734200053744846, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.00013181667600292712}, {"id": 235, "seek": 121668, "start": 1225.6000000000001, "end": 1230.5600000000002, "text": " their findings, so I just have to read the information, interpret it, and turn it into", "tokens": [641, 16483, 11, 370, 286, 445, 362, 281, 1401, 264, 1589, 11, 7302, 309, 11, 293, 1261, 309, 666], "temperature": 0.0, "avg_logprob": -0.1734200053744846, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.00013181667600292712}, {"id": 236, "seek": 121668, "start": 1230.5600000000002, "end": 1239.64, "text": " a program, so I keep that in mind when I move to the next system to emulate, because it might", "tokens": [257, 1461, 11, 370, 286, 1066, 300, 294, 1575, 562, 286, 1286, 281, 264, 958, 1185, 281, 45497, 11, 570, 309, 1062], "temperature": 0.0, "avg_logprob": -0.1734200053744846, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.00013181667600292712}, {"id": 237, "seek": 123964, "start": 1239.64, "end": 1248.0, "text": " not be as easy, so most games as I said are forgiving of inaccuracies, except this is more", "tokens": [406, 312, 382, 1858, 11, 370, 881, 2813, 382, 286, 848, 366, 37701, 295, 37957, 374, 20330, 11, 3993, 341, 307, 544], "temperature": 0.0, "avg_logprob": -0.1983601900995994, "compression_ratio": 1.7037037037037037, "no_speech_prob": 3.6974121030652896e-05}, {"id": 238, "seek": 123964, "start": 1248.0, "end": 1253.3200000000002, "text": " of an issue with my emulator, but most games are forgiving of inaccuracies in the graphics,", "tokens": [295, 364, 2734, 365, 452, 846, 16381, 11, 457, 881, 2813, 366, 37701, 295, 37957, 374, 20330, 294, 264, 11837, 11], "temperature": 0.0, "avg_logprob": -0.1983601900995994, "compression_ratio": 1.7037037037037037, "no_speech_prob": 3.6974121030652896e-05}, {"id": 239, "seek": 123964, "start": 1253.3200000000002, "end": 1260.76, "text": " so this is yet one other reason why it's friendly for beginners, and finally, WebAssembly and", "tokens": [370, 341, 307, 1939, 472, 661, 1778, 983, 309, 311, 9208, 337, 26992, 11, 293, 2721, 11, 9573, 10884, 19160, 293], "temperature": 0.0, "avg_logprob": -0.1983601900995994, "compression_ratio": 1.7037037037037037, "no_speech_prob": 3.6974121030652896e-05}, {"id": 240, "seek": 123964, "start": 1260.76, "end": 1267.2800000000002, "text": " Rust are great, if you just Rust, it's using WebAssembly, it's very natural, if the support", "tokens": [34952, 366, 869, 11, 498, 291, 445, 34952, 11, 309, 311, 1228, 9573, 10884, 19160, 11, 309, 311, 588, 3303, 11, 498, 264, 1406], "temperature": 0.0, "avg_logprob": -0.1983601900995994, "compression_ratio": 1.7037037037037037, "no_speech_prob": 3.6974121030652896e-05}, {"id": 241, "seek": 126728, "start": 1267.28, "end": 1290.6399999999999, "text": " is great, and I have a small demo, it runs on the browser, so that's the LCD, I'm also", "tokens": [307, 869, 11, 293, 286, 362, 257, 1359, 10723, 11, 309, 6676, 322, 264, 11185, 11, 370, 300, 311, 264, 33158, 11, 286, 478, 611], "temperature": 0.0, "avg_logprob": -0.18728063846456594, "compression_ratio": 1.0617283950617284, "no_speech_prob": 0.00019879941828548908}, {"id": 242, "seek": 129064, "start": 1290.64, "end": 1297.8000000000002, "text": " drawing the video memory and the color palettes, and one of the things you can emulate on the", "tokens": [6316, 264, 960, 4675, 293, 264, 2017, 3984, 16049, 11, 293, 472, 295, 264, 721, 291, 393, 45497, 322, 264], "temperature": 0.0, "avg_logprob": -0.19658665096058564, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.0003146280359942466}, {"id": 243, "seek": 129064, "start": 1297.8000000000002, "end": 1306.4, "text": " Gameboy is, it came with a camera, so if you load the camera on this application, it will", "tokens": [7522, 12795, 307, 11, 309, 1361, 365, 257, 2799, 11, 370, 498, 291, 3677, 264, 2799, 322, 341, 3861, 11, 309, 486], "temperature": 0.0, "avg_logprob": -0.19658665096058564, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.0003146280359942466}, {"id": 244, "seek": 129064, "start": 1306.4, "end": 1312.3200000000002, "text": " request permission for the camera, but I've shown the picture at the beginning, so if", "tokens": [5308, 11226, 337, 264, 2799, 11, 457, 286, 600, 4898, 264, 3036, 412, 264, 2863, 11, 370, 498], "temperature": 0.0, "avg_logprob": -0.19658665096058564, "compression_ratio": 1.6011904761904763, "no_speech_prob": 0.0003146280359942466}, {"id": 245, "seek": 131232, "start": 1312.32, "end": 1328.72, "text": " you cancel the permission, it will still boot, so it has a fallback, so it cannot get the", "tokens": [291, 10373, 264, 11226, 11, 309, 486, 920, 11450, 11, 370, 309, 575, 257, 2100, 3207, 11, 370, 309, 2644, 483, 264], "temperature": 0.0, "avg_logprob": -0.1883533734541673, "compression_ratio": 1.155844155844156, "no_speech_prob": 0.0001049820493790321}, {"id": 246, "seek": 132872, "start": 1328.72, "end": 1355.3600000000001, "text": " webcam, because I haven't given it permissions, but it can still put the file in there. I think", "tokens": [39490, 11, 570, 286, 2378, 380, 2212, 309, 32723, 11, 457, 309, 393, 920, 829, 264, 3991, 294, 456, 13, 286, 519], "temperature": 0.0, "avg_logprob": -0.4296223567082332, "compression_ratio": 1.1176470588235294, "no_speech_prob": 0.0013175948988646269}, {"id": 247, "seek": 135536, "start": 1355.36, "end": 1360.0, "text": " you can play games with it, but I don't know how it works, but that's the demo, so that's", "tokens": [291, 393, 862, 2813, 365, 309, 11, 457, 286, 500, 380, 458, 577, 309, 1985, 11, 457, 300, 311, 264, 10723, 11, 370, 300, 311], "temperature": 0.0, "avg_logprob": -0.28111975281326856, "compression_ratio": 1.3284671532846715, "no_speech_prob": 0.002401168690994382}, {"id": 248, "seek": 135536, "start": 1360.0, "end": 1382.7199999999998, "text": " it from me. Can I just break in? I'm leaving immediately, but if you go out, please continue", "tokens": [309, 490, 385, 13, 1664, 286, 445, 1821, 294, 30, 286, 478, 5012, 4258, 11, 457, 498, 291, 352, 484, 11, 1767, 2354], "temperature": 0.0, "avg_logprob": -0.28111975281326856, "compression_ratio": 1.3284671532846715, "no_speech_prob": 0.002401168690994382}, {"id": 249, "seek": 138272, "start": 1382.72, "end": 1386.92, "text": " your questions and your discussion, please look around you and take any garbage that", "tokens": [428, 1651, 293, 428, 5017, 11, 1767, 574, 926, 291, 293, 747, 604, 14150, 300], "temperature": 0.0, "avg_logprob": -0.309814000533799, "compression_ratio": 1.477124183006536, "no_speech_prob": 0.018064377829432487}, {"id": 250, "seek": 138272, "start": 1386.92, "end": 1391.2, "text": " you see from the room here and put it in the back, if a lot of people help, it's not much", "tokens": [291, 536, 490, 264, 1808, 510, 293, 829, 309, 294, 264, 646, 11, 498, 257, 688, 295, 561, 854, 11, 309, 311, 406, 709], "temperature": 0.0, "avg_logprob": -0.309814000533799, "compression_ratio": 1.477124183006536, "no_speech_prob": 0.018064377829432487}, {"id": 251, "seek": 138272, "start": 1391.2, "end": 1394.92, "text": " work, otherwise we will be here forever. Thank you.", "tokens": [589, 11, 5911, 321, 486, 312, 510, 5680, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.309814000533799, "compression_ratio": 1.477124183006536, "no_speech_prob": 0.018064377829432487}, {"id": 252, "seek": 139492, "start": 1394.92, "end": 1423.52, "text": " I have a question. Can I modify it in such a way that I can mess with the logic of the", "tokens": [286, 362, 257, 1168, 13, 1664, 286, 16927, 309, 294, 1270, 257, 636, 300, 286, 393, 2082, 365, 264, 9952, 295, 264], "temperature": 0.0, "avg_logprob": -0.2611237305861253, "compression_ratio": 1.0886075949367089, "no_speech_prob": 0.014525341801345348}, {"id": 253, "seek": 142352, "start": 1423.52, "end": 1451.6, "text": " game? The question was, can I identify particular things happening on the different games?", "tokens": [1216, 30, 440, 1168, 390, 11, 393, 286, 5876, 1729, 721, 2737, 322, 264, 819, 2813, 30], "temperature": 0.0, "avg_logprob": -0.37610984983898343, "compression_ratio": 1.0588235294117647, "no_speech_prob": 0.00549848610535264}, {"id": 254, "seek": 145160, "start": 1451.6, "end": 1463.36, "text": " Do you know about these trainers? No, I don't.", "tokens": [1144, 291, 458, 466, 613, 35393, 30, 883, 11, 286, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.7063506631290212, "compression_ratio": 0.8518518518518519, "no_speech_prob": 0.03218027576804161}, {"id": 255, "seek": 146336, "start": 1463.36, "end": 1493.08, "text": " Can I implement something like a game shark to cheat on games? Yes, I could. The emulator", "tokens": [1664, 286, 4445, 746, 411, 257, 1216, 13327, 281, 17470, 322, 2813, 30, 1079, 11, 286, 727, 13, 440, 846, 16381], "temperature": 0.0, "avg_logprob": -0.2845358657836914, "compression_ratio": 1.0470588235294118, "no_speech_prob": 0.016429340466856956}, {"id": 256, "seek": 149308, "start": 1493.08, "end": 1498.48, "text": " is built as a library, so you can use it as a library and read and write arbitrary bytes", "tokens": [307, 3094, 382, 257, 6405, 11, 370, 291, 393, 764, 309, 382, 257, 6405, 293, 1401, 293, 2464, 23211, 36088], "temperature": 0.0, "avg_logprob": -0.29616758300036916, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.02005327306687832}, {"id": 257, "seek": 149308, "start": 1498.48, "end": 1502.36, "text": " to arbitrary addresses, so you could potentially build something like that, yes.", "tokens": [281, 23211, 16862, 11, 370, 291, 727, 7263, 1322, 746, 411, 300, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.29616758300036916, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.02005327306687832}, {"id": 258, "seek": 150236, "start": 1502.36, "end": 1523.9199999999998, "text": " Thank you. You also had a corporate check. You have a single loop, where every part we're", "tokens": [1044, 291, 13, 509, 611, 632, 257, 10896, 1520, 13, 509, 362, 257, 2167, 6367, 11, 689, 633, 644, 321, 434], "temperature": 0.6000000000000001, "avg_logprob": -0.8882756042480469, "compression_ratio": 1.0853658536585367, "no_speech_prob": 0.022713853046298027}, {"id": 259, "seek": 152392, "start": 1523.92, "end": 1525.92, "text": " I'm like, see, what?", "tokens": [286, 478, 411, 11, 536, 11, 437, 30], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 260, "seek": 152392, "start": 1525.92, "end": 1527.92, "text": " You still in your program?", "tokens": [509, 920, 294, 428, 1461, 30], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 261, "seek": 152392, "start": 1527.92, "end": 1529.92, "text": " Oh, she's like, okay.", "tokens": [876, 11, 750, 311, 411, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 262, "seek": 152392, "start": 1529.92, "end": 1531.92, "text": " Yeah, I know.", "tokens": [865, 11, 286, 458, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 263, "seek": 152392, "start": 1531.92, "end": 1533.92, "text": " Well, my question was that", "tokens": [1042, 11, 452, 1168, 390, 300], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 264, "seek": 152392, "start": 1533.92, "end": 1535.92, "text": " you have a single room", "tokens": [291, 362, 257, 2167, 1808], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 265, "seek": 152392, "start": 1535.92, "end": 1537.92, "text": " that has processes on the CPU.", "tokens": [300, 575, 7555, 322, 264, 13199, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 266, "seek": 152392, "start": 1537.92, "end": 1539.92, "text": " Yes, it's, yeah.", "tokens": [1079, 11, 309, 311, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 267, "seek": 152392, "start": 1539.92, "end": 1541.92, "text": " What if you wanted,", "tokens": [708, 498, 291, 1415, 11], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 268, "seek": 152392, "start": 1541.92, "end": 1543.92, "text": " what if you were emulating with Rust", "tokens": [437, 498, 291, 645, 846, 12162, 365, 34952], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 269, "seek": 152392, "start": 1543.92, "end": 1545.92, "text": " a system where you want", "tokens": [257, 1185, 689, 291, 528], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 270, "seek": 152392, "start": 1545.92, "end": 1547.92, "text": " to have different threads for different peripherals.", "tokens": [281, 362, 819, 19314, 337, 819, 26807, 1124, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 271, "seek": 152392, "start": 1547.92, "end": 1549.92, "text": " But they are all accessing the memory.", "tokens": [583, 436, 366, 439, 26440, 264, 4675, 13], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 272, "seek": 152392, "start": 1549.92, "end": 1551.92, "text": " Wouldn't the Rust", "tokens": [26291, 380, 264, 34952], "temperature": 0.0, "avg_logprob": -0.3752513286495997, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.8056742548942566}, {"id": 273, "seek": 155192, "start": 1551.92, "end": 1553.92, "text": " have the same interview with that?", "tokens": [362, 264, 912, 4049, 365, 300, 30], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 274, "seek": 155192, "start": 1553.92, "end": 1555.92, "text": " Um, so", "tokens": [3301, 11, 370], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 275, "seek": 155192, "start": 1555.92, "end": 1557.92, "text": " can I use Rust to,", "tokens": [393, 286, 764, 34952, 281, 11], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 276, "seek": 155192, "start": 1557.92, "end": 1559.92, "text": " can I run things in different threads", "tokens": [393, 286, 1190, 721, 294, 819, 19314], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 277, "seek": 155192, "start": 1559.92, "end": 1561.92, "text": " with the first problems?", "tokens": [365, 264, 700, 2740, 30], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 278, "seek": 155192, "start": 1561.92, "end": 1563.92, "text": " And probably yes,", "tokens": [400, 1391, 2086, 11], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 279, "seek": 155192, "start": 1563.92, "end": 1565.92, "text": " but that was a kind of worms that I didn't want to open.", "tokens": [457, 300, 390, 257, 733, 295, 28271, 300, 286, 994, 380, 528, 281, 1269, 13], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 280, "seek": 155192, "start": 1567.92, "end": 1569.92, "text": " And also, if the system", "tokens": [400, 611, 11, 498, 264, 1185], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 281, "seek": 155192, "start": 1569.92, "end": 1571.92, "text": " was simple enough like this one, you don't really need to", "tokens": [390, 2199, 1547, 411, 341, 472, 11, 291, 500, 380, 534, 643, 281], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 282, "seek": 155192, "start": 1571.92, "end": 1573.92, "text": " optimize like that.", "tokens": [19719, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 283, "seek": 155192, "start": 1573.92, "end": 1575.92, "text": " It can all run in a single thread.", "tokens": [467, 393, 439, 1190, 294, 257, 2167, 7207, 13], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 284, "seek": 155192, "start": 1575.92, "end": 1577.92, "text": " But for a more complex device,", "tokens": [583, 337, 257, 544, 3997, 4302, 11], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 285, "seek": 155192, "start": 1577.92, "end": 1579.92, "text": " sure, I would have to", "tokens": [988, 11, 286, 576, 362, 281], "temperature": 0.0, "avg_logprob": -0.1604662259419759, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.00042680889600887895}, {"id": 286, "seek": 157992, "start": 1579.92, "end": 1581.92, "text": " investigate more on that.", "tokens": [15013, 544, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 287, "seek": 157992, "start": 1581.92, "end": 1583.92, "text": " But I didn't have to do that on this one.", "tokens": [583, 286, 994, 380, 362, 281, 360, 300, 322, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 288, "seek": 157992, "start": 1583.92, "end": 1585.92, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 289, "seek": 157992, "start": 1585.92, "end": 1587.92, "text": " Why did you pick Rust?", "tokens": [1545, 630, 291, 1888, 34952, 30], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 290, "seek": 157992, "start": 1587.92, "end": 1589.92, "text": " Was there any reason that you did not", "tokens": [3027, 456, 604, 1778, 300, 291, 630, 406], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 291, "seek": 157992, "start": 1589.92, "end": 1591.92, "text": " select C++?", "tokens": [3048, 383, 25472, 30], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 292, "seek": 157992, "start": 1591.92, "end": 1593.92, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 293, "seek": 157992, "start": 1593.92, "end": 1595.92, "text": " Why did I pick Rust over", "tokens": [1545, 630, 286, 1888, 34952, 670], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 294, "seek": 157992, "start": 1595.92, "end": 1597.92, "text": " something like C++?", "tokens": [746, 411, 383, 25472, 30], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 295, "seek": 157992, "start": 1597.92, "end": 1599.92, "text": " It's what I use Rust", "tokens": [467, 311, 437, 286, 764, 34952], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 296, "seek": 157992, "start": 1599.92, "end": 1601.92, "text": " for my personal projects.", "tokens": [337, 452, 2973, 4455, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 297, "seek": 157992, "start": 1601.92, "end": 1603.92, "text": " It's what I like using it.", "tokens": [467, 311, 437, 286, 411, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 298, "seek": 157992, "start": 1603.92, "end": 1605.92, "text": " It's what I like using.", "tokens": [467, 311, 437, 286, 411, 1228, 13], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 299, "seek": 157992, "start": 1605.92, "end": 1607.92, "text": " And you know Rust better than C++?", "tokens": [400, 291, 458, 34952, 1101, 813, 383, 25472, 30], "temperature": 0.0, "avg_logprob": -0.09113246254298998, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.0006963555351831019}, {"id": 300, "seek": 160792, "start": 1607.92, "end": 1609.92, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 301, "seek": 160792, "start": 1609.92, "end": 1611.92, "text": " And the processor is a 6502 or is it?", "tokens": [400, 264, 15321, 307, 257, 38566, 17, 420, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 302, "seek": 160792, "start": 1611.92, "end": 1613.92, "text": " So the processor,", "tokens": [407, 264, 15321, 11], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 303, "seek": 160792, "start": 1613.92, "end": 1615.92, "text": " the question was what the processor", "tokens": [264, 1168, 390, 437, 264, 15321], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 304, "seek": 160792, "start": 1615.92, "end": 1617.92, "text": " is.", "tokens": [307, 13], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 305, "seek": 160792, "start": 1617.92, "end": 1619.92, "text": " Yeah, it's not a 6502.", "tokens": [865, 11, 309, 311, 406, 257, 38566, 17, 13], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 306, "seek": 160792, "start": 1619.92, "end": 1621.92, "text": " I think it's a mix of", "tokens": [286, 519, 309, 311, 257, 2890, 295], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 307, "seek": 160792, "start": 1621.92, "end": 1623.92, "text": " a Psylog Z80", "tokens": [257, 430, 3187, 4987, 1176, 4702], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 308, "seek": 160792, "start": 1623.92, "end": 1625.92, "text": " and an Intel 8080.", "tokens": [293, 364, 19762, 4688, 4702, 13], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 309, "seek": 160792, "start": 1625.92, "end": 1627.92, "text": " So it's like a combination of the two.", "tokens": [407, 309, 311, 411, 257, 6562, 295, 264, 732, 13], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 310, "seek": 160792, "start": 1627.92, "end": 1629.92, "text": " I think it is", "tokens": [286, 519, 309, 307], "temperature": 0.0, "avg_logprob": -0.22469287872314453, "compression_ratio": 1.5144508670520231, "no_speech_prob": 0.002358522266149521}, {"id": 311, "seek": 162992, "start": 1629.92, "end": 1637.92, "text": " I'm not really sure.", "tokens": [286, 478, 406, 534, 988, 13], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 312, "seek": 162992, "start": 1637.92, "end": 1639.92, "text": " You split your match up into", "tokens": [509, 7472, 428, 2995, 493, 666], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 313, "seek": 162992, "start": 1639.92, "end": 1641.92, "text": " the binary sets. Did you actually benchmark that?", "tokens": [264, 17434, 6352, 13, 2589, 291, 767, 18927, 300, 30], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 314, "seek": 162992, "start": 1641.92, "end": 1643.92, "text": " Because I thought the compiler would have", "tokens": [1436, 286, 1194, 264, 31958, 576, 362], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 315, "seek": 162992, "start": 1643.92, "end": 1645.92, "text": " just translated into a jump tape.", "tokens": [445, 16805, 666, 257, 3012, 7314, 13], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 316, "seek": 162992, "start": 1645.92, "end": 1647.92, "text": " On mic, you know.", "tokens": [1282, 3123, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 317, "seek": 162992, "start": 1647.92, "end": 1649.92, "text": " And we're going to get kicked out.", "tokens": [400, 321, 434, 516, 281, 483, 14609, 484, 13], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 318, "seek": 162992, "start": 1649.92, "end": 1651.92, "text": " I'll be honest, I didn't benchmark that", "tokens": [286, 603, 312, 3245, 11, 286, 994, 380, 18927, 300], "temperature": 0.0, "avg_logprob": -0.2702718431299383, "compression_ratio": 1.4663461538461537, "no_speech_prob": 0.0017329533584415913}, {"id": 319, "seek": 165192, "start": 1651.92, "end": 1661.92, "text": " everybody was in change.", "tokens": [50364, 2201, 390, 294, 1319, 13, 50864], "temperature": 0.0, "avg_logprob": -0.5273705720901489, "compression_ratio": 0.75, "no_speech_prob": 0.0007668649777770042}], "language": "en"}