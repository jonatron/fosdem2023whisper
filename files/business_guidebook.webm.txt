[00:00.000 --> 00:11.840]  Hello, everyone. Hello, hello, hello. It looks like it is time for me to begin. So if you
[00:11.840 --> 00:17.760]  are here for this topic, you know, you're in the right place. That's awesome. Who am
[00:17.760 --> 00:24.480]  I? I am Matt Yakovic. I am the head of open source strategy at Scarf or the Haas for short.
[00:24.480 --> 00:29.920]  You may have heard me or seen talks from me before. Multiple ways to connect with me.
[00:29.920 --> 00:34.800]  Podcasts, different things that I do. If you don't know what Scarf does, what we do is we help
[00:34.800 --> 00:41.840]  projects and maintainers grow their open source adoption, help track it, help analyze it, help
[00:41.840 --> 00:46.880]  you understand who's downloading and using your open source software. We also do a hacking open
[00:46.880 --> 00:55.120]  source business podcast. And so that is up to 14 episodes, I think are recorded now. So if you're
[00:55.120 --> 01:00.320]  interested in understanding from others on what is working in the open source business space,
[01:01.200 --> 01:06.320]  okay, it seems like I need to hold it a little closer, then that would be a good place to check
[01:06.320 --> 01:12.480]  out. We're also launching a new website that has all of the information from these slides,
[01:12.480 --> 01:16.800]  as well as a whole bunch of other details on how to measure your open source businesses.
[01:17.600 --> 01:22.880]  And we have it under opensourcemetrics.org. If you're interested, there's links to the podcast
[01:22.880 --> 01:29.920]  and various things on running an open source business and measuring it. So how many people
[01:29.920 --> 01:35.680]  here know open source is different, right? Unlike other businesses, obviously you are competing
[01:35.680 --> 01:41.360]  with free, which changes the mindset quite a bit. Let me give you an example. It's a very easy
[01:41.360 --> 01:46.400]  example and people will pick it apart, but let me just get through it real quick. If you're selling
[01:46.400 --> 01:52.080]  a car nowadays, if you're a car manufacturer, you have the ability to set your price for the car,
[01:52.080 --> 01:57.440]  people can walk away from the car. If they don't buy a car or a vehicle, then they would have to
[01:57.440 --> 02:04.320]  choose some other alternative modes of transportation. If you use a car that's in the open source space,
[02:05.120 --> 02:09.280]  you can still set the price for the car, but you don't actually have to pay for it. So someone can
[02:09.280 --> 02:14.000]  come get the car for free, drive it around, and do whatever they want with it. So consumers can
[02:14.000 --> 02:19.600]  choose to buy your car or someone else. And that boggles the mind of many traditional business
[02:19.600 --> 02:27.200]  folks because it's giving something away for free. And one of the key things that people misunderstand
[02:27.200 --> 02:33.840]  about open source is it's great if it's free and people can use it, but in order for people not
[02:33.840 --> 02:38.480]  to choose the free version and pay for something that's in the commercial space, it has to give
[02:38.480 --> 02:43.200]  you more value than what you're going to get in that free space. You have to figure out some way
[02:43.200 --> 02:50.240]  to connect with those folks, and you have to make sure that they are finding value in what you have.
[02:50.240 --> 02:53.920]  Now, some of you, and I'm interested to know, how many people are more on the tech space in here?
[02:53.920 --> 02:58.480]  Can you raise your right hands? Okay, how many people on the business space? Raise your left foot.
[03:00.000 --> 03:04.720]  Okay, so a few. Well, so many on the tech space consider this type of a talk when we talk about
[03:04.720 --> 03:09.760]  revenue and money, evil. So I'm going to go ahead and put on my other hat, which is my super evil
[03:09.760 --> 03:15.360]  villain hat, you know, for this talk. And that doesn't necessarily mean that this is wrong,
[03:15.360 --> 03:20.800]  or that it is super evil or villainous, but it's hard for tech folks, especially founders,
[03:20.800 --> 03:25.600]  to talk about revenue and money. This is outside of the wheelhouse, right? From a technical standpoint,
[03:25.600 --> 03:31.280]  when we talk about growing, you know, your business, that's not something that is naturally inherent.
[03:31.280 --> 03:35.440]  So people seek out different advisors, they look for who's done it before, what sort of things
[03:35.440 --> 03:40.800]  have worked, and then they try to repeat that process. So I want to start by giving some
[03:40.800 --> 03:46.400]  baselines. There's a lot of common open source business models out there. There's there's several,
[03:46.400 --> 03:51.120]  but I'm going to talk about the three primary ones. And that's open core, a SAS model, or is,
[03:51.120 --> 03:54.320]  and as a service model, it could be infrastructure, platform as a service,
[03:54.320 --> 04:01.760]  just consider all those the same, or services themselves. Now, from an open core perspective,
[04:01.760 --> 04:06.160]  okay, and excuse all the graphics in this, I'm not a graphics designer, so, you know,
[04:06.160 --> 04:11.920]  they're they're they're a little hokey, but open core, how many people have heard of open core
[04:11.920 --> 04:18.320]  before? Oh, the vast majority, but not everyone. Okay, so open core is when you have an open source
[04:18.320 --> 04:22.080]  version of your project that's freely available for everyone. But then you have an enterprise
[04:22.080 --> 04:27.440]  version, the enterprise version reserves some set of features. And then if someone wants those
[04:27.440 --> 04:32.320]  features, typically more enterprise features like maybe higher security integration with partner
[04:32.320 --> 04:37.280]  products, things like that, then people will then have the ability to purchase that from you,
[04:37.280 --> 04:42.880]  and then they'll pay a regular ongoing fee. A lot of companies have dual licenses in this case.
[04:42.880 --> 04:48.400]  So their open source is, you know, let's say GPL, and then there's some enterprise license for their,
[04:49.680 --> 04:55.200]  you know, enterprise version. Okay, now this is dwindling a little bit in popularity,
[04:55.200 --> 05:02.480]  as the cloud has taken over much of the tech industry. And that's where a lot of new businesses,
[05:02.480 --> 05:07.120]  especially in the open source space, are looking. And that's in this SAS or this cloud model. Okay,
[05:07.840 --> 05:12.480]  you can download the software, but if you really want to run it, then, you know, you should use
[05:12.480 --> 05:19.680]  our SAS thing will make it easier. This provides a higher level of quote unquote stickiness. Now,
[05:19.680 --> 05:26.720]  if you are a manager, director, executive at a company that has, you know, venture funding or
[05:26.720 --> 05:31.120]  that you're, you know, has executives who are, you know, kind of in been in the industry for a while,
[05:31.680 --> 05:36.400]  I guarantee that they have had at least 10 conversations about stickiness in open source
[05:37.440 --> 05:42.400]  in a calendar year. And what stickiness is, is the ability for someone to start to use your open
[05:42.400 --> 05:47.440]  source software, and then continue to use it. So how do we make it sticky? How do we retain them?
[05:47.440 --> 05:53.840]  In many companies, this is a model that provides a higher level of stickiness. Because once you
[05:53.840 --> 05:58.480]  get into a cloud service, it's often really, really difficult to migrate away. Because you're
[05:58.480 --> 06:04.240]  relying on that cloud service to be your sys admins, your DBAs, your, you know, DevOps folks,
[06:04.240 --> 06:08.320]  they're handling all those functions. And so to replace that, you either have to go to another
[06:08.320 --> 06:13.520]  cloud service, or you need to find someone who can do those functions for you. And that's often
[06:13.520 --> 06:20.080]  a really difficult prospect to do. But there are some issues with this model. This model is
[06:20.080 --> 06:26.720]  disruptible, because other people can run that exact same as a service. What we've been seeing
[06:26.720 --> 06:32.240]  in the space of the SAS lately, is a lot of open source companies have changed their licenses to
[06:32.240 --> 06:38.000]  prevent that. And they've gone from open to not open. So you might have heard of SSPL, you might
[06:38.000 --> 06:45.600]  have heard of the BSL, other things. These licenses are kind of sort of open. But that means that,
[06:46.880 --> 06:51.040]  you know, as you get into the cloud space, you're restricted from competing with them. So it's more
[06:51.040 --> 06:56.480]  of a preservation of their revenue stream, if you will. And then there's the services model,
[06:56.480 --> 07:03.920]  which is really the original kind of OG, the old, you know, model for open source software.
[07:03.920 --> 07:10.560]  And that model is definitely something that we have seen be very popular and very successful in
[07:10.560 --> 07:16.880]  a lot of different companies. This is a viable pathway for a lot of companies to start. It's an
[07:16.880 --> 07:23.520]  easier pathway to revenue. But it is hard to grow beyond a certain limit. So, you know, you might
[07:23.520 --> 07:28.560]  be able to get a handful of customers working with you from a support perspective, from a
[07:28.560 --> 07:34.480]  consulting perspective. But you're really bound on the number of people. Because you have to have
[07:34.480 --> 07:37.760]  people to deliver those services. And if you don't have people to deliver those services, that
[07:37.760 --> 07:44.000]  becomes quite an issue. And if you compare the three models, I'll, you know, you can compare them.
[07:44.000 --> 07:47.920]  You know, you've got that open core, which is a proven model, but it is getting disrupted
[07:47.920 --> 07:54.000]  and eroded by the cloud a little bit. And, you know, there's still some success in that space,
[07:54.000 --> 07:58.480]  because a lot of companies, especially when you listen to, like, some of the sovereign cloud, the
[07:58.480 --> 08:03.200]  cloud native, they're looking at enterprise versions or open core versions. They want to run
[08:03.200 --> 08:07.040]  their operators. They want to build their own private clouds. So, there is still some play in
[08:07.040 --> 08:14.400]  that space. X is a service or software is a service. You know, that is still a very popular model.
[08:14.400 --> 08:20.800]  But the question is, if you are releasing features that are only available in a SaaS version, and
[08:20.800 --> 08:28.160]  only a minimal open source version, is SaaS, the SaaS model, is it still open source? Or is it not?
[08:28.160 --> 08:32.160]  And that's a question that we really haven't answered yet, especially as companies start to
[08:32.160 --> 08:38.400]  reserve features and software specifically just for their SaaS customers. And then there's the
[08:38.400 --> 08:42.800]  service model, which is definitely the easiest to get started if you're a small company. It, you
[08:42.800 --> 08:48.080]  know, has the most likelihood that you'll get some revenue in the door really quickly without
[08:48.080 --> 08:56.800]  a huge buy-in cost. Now, part of this model, okay, if you, whether you choose whichever model you
[08:56.800 --> 09:04.880]  choose, is how do you get people to move from being open source users to actually paying customers?
[09:05.840 --> 09:15.680]  Okay. And, you know, this is probably the most stressful thing in open source maintainer, founder,
[09:15.680 --> 09:22.960]  someone in the open source space has. Because ultimately, you're looking at this open source
[09:22.960 --> 09:27.920]  adoption, and let's say you're tracking 100 million downloads, but nobody wants to pay for
[09:27.920 --> 09:33.600]  anything. That's actually a use case that happens quite a bit. How do you, how do you, how do you
[09:33.600 --> 09:38.000]  figure that out? How do you, how do you turn that 100 million downloads? How do you turn that, you
[09:38.000 --> 09:46.160]  know, 5,000 people who are tweeting about you into something that is actually commercially viable?
[09:46.880 --> 09:52.320]  And when we go look at the classic sort of marketing funnel, and anybody here in marketing,
[09:52.320 --> 09:57.840]  I'm just curious, no one will, one person, two people want to admit it. Hey, three people. Okay.
[09:57.840 --> 10:03.120]  Oh, look at that. All right. So you might be familiar with this if you are in marketing, right?
[10:03.120 --> 10:07.760]  So this is just this very simple marketing funnel where you've got, you know, people who are hitting
[10:07.760 --> 10:15.040]  your website, and they turn into a contact or a lead, if you will, where they become a known user,
[10:15.040 --> 10:18.720]  and then they turn into a marketing qualified lead after they do a certain number of things.
[10:18.720 --> 10:22.400]  So let's say you're there on your website, they sign up for a webinar, maybe they downloaded
[10:22.400 --> 10:25.680]  your software, maybe they did a few other things, they get a certain number of points,
[10:25.680 --> 10:28.880]  and when they reach the point value, then all of a sudden it's like, whoo-hoo,
[10:28.880 --> 10:34.800]  you are now qualified, so then sales can talk to you. And then you have a, you know, sales
[10:34.800 --> 10:39.200]  accepted lead. So sales goes, ooh, that looks pretty good. And then you have a sales qualified
[10:39.200 --> 10:44.560]  lead when they start to say, hmm, I think I could sell something. All right. This is the classic
[10:44.560 --> 10:51.760]  marketing funnel, but it doesn't work in an open source space. There is a similar way to think
[10:51.760 --> 10:58.800]  about this. Okay. Because the open source model kind of flips this on its head. There is this model
[10:58.800 --> 11:04.160]  where we've got the interest phase, which is the people who are discovering what your product
[11:04.160 --> 11:11.440]  can do, how it can behave, what it can do differently. And you want them to actually try your software,
[11:11.440 --> 11:18.240]  okay? You want them to install your software or use your containers or use your library in,
[11:18.240 --> 11:23.920]  you know, their product. And only a subset of those who are actually interested, a subset of
[11:23.920 --> 11:27.920]  those who will visit your project's web page, visit your web pages, visit your assets,
[11:27.920 --> 11:36.640]  there, only that small subset is going to actually try. And of those who try, only a subset will
[11:36.640 --> 11:44.480]  continue to use it in production. And then only a subset will become a customer. So that model
[11:46.000 --> 11:52.080]  is very important because as we look at this phase, you've got to realize that if you have a million
[11:52.080 --> 11:57.120]  people on your website and you have 100,000 downloads, that's great. But there might only
[11:57.120 --> 12:02.000]  be 10,000 who use it in production and that might only have like 1,000 people who would be willing
[12:02.000 --> 12:07.120]  to pay for it. Now some of you who are familiar with the product space might say, well, we don't
[12:07.120 --> 12:12.080]  follow the funnel, we follow the, you know, product flywheel, the product growth flywheel.
[12:12.080 --> 12:19.200]  So anybody familiar with the product growth flywheel? All right, one, okay. So the idea is,
[12:20.160 --> 12:23.200]  it's funny because they actually stole a lot of this from the open source movement.
[12:23.200 --> 12:27.600]  When you look at the product flywheel, and this is all the hotness in all the product
[12:27.600 --> 12:32.000]  companies, right? So when we're talking about a product led company, a product, you know,
[12:32.000 --> 12:37.440]  product led growth, what they're talking about is people start off in this center, this core,
[12:37.440 --> 12:41.760]  and it's like, oh, how do we track and engage with people? How do we delight them? How do we make
[12:41.760 --> 12:48.080]  them really excited about things? Okay. And then we can take those strangers, turn them into prospects,
[12:48.080 --> 12:53.120]  which then turns them into customers, which then turns them into fans, and then they will start
[12:53.120 --> 12:58.880]  to become the people who will preach to the other people, to tell other people how awesome
[12:58.880 --> 13:04.400]  our software is and get them into the community. There's an open source version of this, and again,
[13:04.400 --> 13:10.160]  excuse my crappy little, you know, diagrams here, if someone wants to contribute these,
[13:10.960 --> 13:17.440]  better versions, that's awesome. But the idea here is, it's very similar, similar phases,
[13:17.440 --> 13:22.560]  but if you look at the differences, the differences are we have a download and try,
[13:22.560 --> 13:26.960]  we have that build and deploy into production, and then we have, oh, they're running it into
[13:26.960 --> 13:31.920]  prod, and then it kind of goes into, hey, do I need something more? That's when I'd be willing to pay.
[13:33.120 --> 13:38.640]  And then you'll evaluate a paid option and become that paying customer. It's a very similar cycle,
[13:38.640 --> 13:42.640]  both are the same, but there's a few differences. I like to clarify this a little bit more in the
[13:42.640 --> 13:47.440]  open source space because it makes sense, because really what you're talking about here is someone
[13:47.440 --> 13:50.640]  who's trying your open source software, they're getting used to it, they're like, wow, that's
[13:50.640 --> 13:55.200]  pretty cool. But if it only did this next thing, and then you're like, oh, well, I have that,
[13:55.200 --> 14:01.360]  it's in the enterprise version, right? If it only did, you know, you know, integration with this
[14:01.360 --> 14:06.560]  other product, and so that's where, oh, I need something more, and then you get them to evaluate
[14:06.560 --> 14:15.760]  it. And that becomes a way to build external evangelists. So there's also this idea of
[14:15.760 --> 14:22.800]  evangelism or evangelists, a way to foster people who are in your community, who become fans of your
[14:22.800 --> 14:28.800]  product, who then actually go out and contribute to that flywheel, right? So the goal here is
[14:28.800 --> 14:34.800]  you want someone who can start off telling people, wow, I was really successful with this application,
[14:35.680 --> 14:40.000]  and then they'll tell their followers and people who like them and people who are like-minded,
[14:40.000 --> 14:47.120]  and then those people will watch that content, and then those people will go ahead and try it. And
[14:47.120 --> 14:52.080]  it's similar when you add DevRel, evangelism, this is all part of that product flywheel,
[14:52.080 --> 14:56.720]  where you want more people to understand it and then eventually try it, and then eventually you
[14:56.720 --> 15:02.160]  want those people to create or help foster new people into the community where there are new
[15:02.160 --> 15:08.880]  evangelists who can go out there and talk about your product. So let's talk specifically about
[15:08.880 --> 15:14.880]  driving open source adoption, okay? And there's only three things you need to do. Yeah, I'm going
[15:14.880 --> 15:19.120]  to sound like one of those shill salesmen on the late night, you know, TV commercials where it's
[15:19.120 --> 15:23.600]  like, you know, these three things, if you buy into my system, you'll be awesome. You know,
[15:23.600 --> 15:29.200]  this will be the best thing ever for you. And so there's actually three requirements that we'll dig
[15:29.200 --> 15:35.920]  into a little bit, and as much as we can in the time remaining, for driving open source adoption
[15:35.920 --> 15:42.400]  and growing your open source adoption. And those secrets to the success are a kiss ass product.
[15:42.400 --> 15:47.120]  Okay, it all starts with the product. If you don't have a product that people want, it doesn't
[15:47.120 --> 15:51.840]  matter what else you do, they're not going to, you know, listen to you, they're not going to try
[15:51.840 --> 16:00.160]  it out. It needs to be rock solid. We need people to know who you are. Okay, a lot of open source
[16:00.160 --> 16:05.920]  projects that are out there have awesome technology behind them, but nobody knows who they are. Has
[16:05.920 --> 16:10.240]  anybody run into a product like and said like, how did I not know about that like three years ago?
[16:10.800 --> 16:17.600]  Right, that happens. And why is that? Because however, you know, whoever's running these projects,
[16:17.600 --> 16:23.360]  they're not really sure how to bring awareness to everyone else. And then you need to make it
[16:23.360 --> 16:30.320]  easier than all the alternatives out there in the space. Okay, obvious, right? All these are obvious,
[16:30.320 --> 16:37.680]  that it's not like it's like anything that's just crazy. All these should be obvious and easy as well.
[16:40.000 --> 16:44.800]  Now, I can't go into a deep dive for all of these, but briefly, I want to touch on each one,
[16:44.800 --> 16:51.520]  and we'll go through each one separately. So how do you build a kick ass open source project?
[16:51.520 --> 16:56.480]  Now, I can tell you, like, you know, all the technical jargon, but I'm going to stick with
[16:56.480 --> 17:00.720]  from a business perspective, what this looks like. First, I want to talk about the biggest
[17:00.720 --> 17:06.800]  mistake we all make when we're building a project. At a certain point, we have to realize that, you
[17:06.800 --> 17:11.440]  know, when we want when we are building a project, we're often starting it, building it for what we
[17:11.440 --> 17:17.120]  want. And that works for maybe like a little bit of time, and you might even make a successful
[17:17.120 --> 17:21.120]  company, but you're going to limit your growth if you are building for people who you think
[17:21.120 --> 17:28.400]  are the exact same people as you, right? It's that, oh, I assume everyone is like me. I know
[17:28.400 --> 17:32.320]  people who follow this, and they're like, well, I assume that everyone's going to install on the
[17:32.320 --> 17:37.520]  command line. I assume everyone will install from source. And so that's just the way that they think.
[17:38.640 --> 17:43.200]  That's not necessarily how everyone else in the community thinks. So make sure that you avoid that.
[17:43.200 --> 17:51.040]  And that's why the first key, in my opinion, is understanding, right? Understand the product
[17:51.040 --> 17:57.120]  and its value, right? What can your product do better than anyone else? Okay, are people willing
[17:57.120 --> 18:00.080]  to even pay for that? You should ask yourself that question. Can you answer that question?
[18:00.880 --> 18:06.480]  What do you do over the alternative? Right? So is there an alternative to this? Is there some other
[18:06.480 --> 18:11.200]  piece of software, something else that other people are doing? What do you consider success? Now,
[18:11.200 --> 18:15.920]  this one is really interesting. I've talked to a lot of founders. I've talked to a lot of CEOs,
[18:15.920 --> 18:20.320]  executives. And, you know, they'll talk to me about, oh, we want to accelerate our growth, our
[18:20.320 --> 18:25.120]  adoption. And I'll say, well, what's your goal? And they'll be like, well, we want to, you know,
[18:25.120 --> 18:29.600]  sell the company, or we want 10x evaluation, or we want, like, you know, fill in the blank. It's
[18:29.600 --> 18:34.560]  like, no, no, no, what do you really want? What do you want in the next year? What do you really,
[18:34.560 --> 18:39.600]  really want? And a lot of times it's like, oh, well, really what we want is people to sign up for
[18:39.600 --> 18:43.440]  our new beta. I've actually had that conversation where it's like, we just want like 1,000 people
[18:43.440 --> 18:49.280]  to try it and then give us feedback. Oh, it's a very different sort of product that you're building
[18:49.280 --> 18:53.920]  and sort, and also marketing activities or community activities that you're doing. And so
[18:53.920 --> 18:59.280]  that's something to consider. Who's going to use it? Are you building this for, you know,
[19:00.160 --> 19:04.720]  devs? Are you building this for business folks? Who's the end user? Who's going to benefit from
[19:04.720 --> 19:13.120]  this the most? And who would pay for that product if they're in that space? And where are those
[19:13.120 --> 19:18.720]  users most likely to be? You know, are these users going to be at Faustin? Are they going to be at,
[19:18.720 --> 19:24.320]  like, you know, Open Source Summit? Are they going to be at KubeCon? I mean, like, where will you see
[19:24.320 --> 19:29.680]  these people pop up? And how do you ensure that you know where they are and what sort of things
[19:29.680 --> 19:35.040]  that they like and what sort of things that they need? And so you want to understand that really
[19:35.040 --> 19:41.520]  early on, even if you're not trying to monetize or commercialize the Open Source yet, you know,
[19:41.520 --> 19:45.840]  you want to keep that in the back of your mind and start to funnel things in that right direction.
[19:46.960 --> 19:52.240]  Now, the next key is to listen and ask questions. Now, remember, I said a big mistake people make
[19:52.240 --> 19:57.120]  is the founder builds the software specifically for themselves, and they don't necessarily take
[19:57.120 --> 20:04.000]  into account other people in the ecosystem. And this is where product success is really determined
[20:04.000 --> 20:10.320]  based on your users and your potential users and listening to their needs. If you're not listening
[20:10.320 --> 20:16.160]  to their needs, you're going to be missing out on a lot of opportunity for growth. And that's where
[20:16.160 --> 20:22.640]  that mistake comes in. So avoid that if you can. The other one is you have to set a goal and focus
[20:22.640 --> 20:28.480]  on it. Be really good at a few things, not really okay at a lot of things, because there's a lot
[20:28.480 --> 20:32.640]  of other software you might be competing with. There's a lot of other people who are potentially
[20:32.640 --> 20:39.200]  solving the same issues. And it's really easy to get distracted by shiny object syndrome. Anybody
[20:39.200 --> 20:43.680]  get distracted by shiny object syndrome? I'm like that all the time. Yeah, I see hands waving all
[20:43.680 --> 20:49.680]  the time, right? And that is so easy to do. In fact, I was just talking with Avi, our CEO over here,
[20:49.680 --> 20:53.360]  and we're like talking about, you know, tracking web page stuff. And I'm like, oh, we could do that
[20:53.360 --> 20:57.280]  in our product. Oh, but we're like, wait a minute, we that's not our core product. Why would we go
[20:57.280 --> 21:03.520]  down that hole, right? But people do that a lot. And when you do that, it might be cool. And you
[21:03.520 --> 21:08.080]  might learn that there's a new subset and there might be a time for expanding your product.
[21:08.080 --> 21:13.120]  But until your core product has that established base, you don't want to do that.
[21:13.120 --> 21:22.880]  So don't deviate too often. Okay, stick to that original purpose. And if you do that, you will
[21:22.880 --> 21:27.680]  eventually find that you become better known on the market. People are willing to talk about you,
[21:27.680 --> 21:32.080]  use you, and then share additional contributions to maybe make your project a little better.
[21:33.920 --> 21:40.880]  Okay, this one's a big one. All right, has to meet or exceed expectations. Now, this totally
[21:40.880 --> 21:46.240]  seems obvious, right? But let's assume that I build a cell phone. And my cell phone has the
[21:46.240 --> 21:51.200]  awesomest speakers, the awesomest music system, and it is the best gaming platform ever, but it
[21:51.200 --> 21:58.720]  can't take calls. Is it still a cell phone? If I market it as a cell phone, if I sell it as a
[21:58.720 --> 22:05.360]  cell phone, if I say, oh, this is my cell phone, it doesn't matter. It's not. So if I'm trying to
[22:05.360 --> 22:10.560]  build a cell phone, but it is great at just music and gaming, but it can't take a call, I have not
[22:10.560 --> 22:17.040]  met the expectations of that. And that's where you need to figure out what are the table stakes for
[22:17.040 --> 22:24.400]  your project? What are the key ingredients? Whatever those are, that's where you have to focus.
[22:25.360 --> 22:31.440]  And that means do the job that it was originally intended to do, and meet some minimum standards.
[22:31.440 --> 22:36.240]  And there are minimum standards that we all have from an open source perspective. Okay,
[22:36.240 --> 22:41.280]  what are some of those minimum standards? Hey, you know what? It has to be secure, right? Like,
[22:41.280 --> 22:46.080]  who wants an insecure piece of software nowadays? Well, we have too many of them. Let's not add
[22:46.080 --> 22:52.560]  anymore. But it has to protect from data loss. I don't want leaky data. You know how many times
[22:52.560 --> 22:57.520]  my personal data has been leaked? My daughter's going to inherit free credit monitoring for the
[22:57.520 --> 23:03.360]  rest of her life, because I've had so many data leaks. I mean, I think there's several Matt Yankov
[23:03.360 --> 23:08.960]  it's running around right now, maybe even at this conference. So, you know, you know, it also has to
[23:08.960 --> 23:14.960]  be as bug free as possible. Now, while we strive, I'll strive for bug free software, we know it's
[23:14.960 --> 23:20.480]  not a viable thing. But shipping with known critical bugs is bad. And I know some companies who do it
[23:20.480 --> 23:29.600]  just to meet deadlines. It's not good. Next up is UI UX. Who's anybody any UI UX guys,
[23:29.600 --> 23:38.000]  any people on here? Okay, awesome. Yes, many, many. All right. Well, so it's like this. If your
[23:38.000 --> 23:46.240]  product is designed like this elevator, that's really confusing. Isn't it? I mean, UI UX is
[23:46.240 --> 23:52.160]  probably one of the most important things to get right. The user experience can ruin an awesome
[23:52.160 --> 24:00.480]  technical project. You can have the best technology out there. And if the user interface sucks, people
[24:00.480 --> 24:09.360]  won't use it. Or they'll use it once, which is even worse. So a bad user experience can ruin any
[24:09.360 --> 24:15.280]  benefits that you provide. GitHub is littered with projects like this, by the way. So of the
[24:16.480 --> 24:21.680]  millions and millions of projects that are out there, many of them fall victim to this,
[24:21.680 --> 24:29.200]  even if they are really solid. And if you want to grow your community and grow adoption, easy.
[24:29.200 --> 24:35.840]  Remember, easy was my point number three. You know, you need users who can be advanced if they
[24:35.840 --> 24:41.440]  want to and get into the weeds. But most of the users won't. And again, that gets back to that
[24:41.440 --> 24:46.880]  assumption that we build things for ourselves. A lot of CTOs, a lot of co founders, a lot of people
[24:46.880 --> 24:51.760]  in this space, what they think is, I'm super technical. And they are, they're building a company.
[24:51.760 --> 24:56.000]  Those out there in the space who are founders, you know, at that executive level, maybe they're,
[24:56.000 --> 25:01.680]  you know, maintainers of projects, you, you are all brilliant. And that means that your
[25:01.680 --> 25:07.680]  brilliance probably exceeds your average user's brilliance. That's okay. But keep that in mind.
[25:07.680 --> 25:15.040]  So make it easy for folks. And my product key number six is community. Okay. Open source
[25:15.040 --> 25:20.320]  projects need community. And we need to bake that in to the beginning. Okay. And that means
[25:20.320 --> 25:27.280]  including plans for fostering that strong community up front. Now I brought this up. I was previewing
[25:27.280 --> 25:33.280]  my slides and someone, you know, said, well, wait a minute, what about curl? Does curl really have
[25:33.280 --> 25:39.600]  a strong community of contributors? Right. And this is what I say is we have to look beyond code.
[25:39.600 --> 25:44.480]  This isn't just about code. You want people who will use your product. And if you search for curl,
[25:44.480 --> 25:50.880]  for instance, um, you know, your favorite search engine, you're going to find thousands of examples
[25:51.520 --> 25:56.720]  of how to use curl, right? You will. You can do it right now if you want tutorials, examples,
[25:56.720 --> 26:02.080]  cool things, hacks, whatever, that's community, even if it's not code contributions. And that's
[26:02.080 --> 26:09.200]  what you need to continue that product growth. All right. Moving on. Now we're talking about
[26:09.200 --> 26:16.560]  how do we super charge the awareness? Alrighty. So let's talk specifically about community. How
[26:16.560 --> 26:23.040]  anybody here in the community space? Oh, a few people. Oh, yeah. Okay. Great. So, um, this is the
[26:23.040 --> 26:29.840]  great hope for adoption in open source companies. In fact, a lot of people will prioritize a dev
[26:29.840 --> 26:36.400]  rel hire over any of the business hires because they want to start to connect directly with that
[26:36.400 --> 26:43.760]  community. Okay. And it's, it's, this is a balance, but the community can really help accelerate
[26:43.760 --> 26:50.480]  and drive that awareness if done right. But here's the thing. Okay. Community is starting to turn
[26:50.480 --> 26:56.640]  into the new marketing. For the last five years, the last 10 years, um, marketing has often been
[26:56.640 --> 27:00.800]  in control of community. Community has been a subset of marketing, sometimes a subset of product.
[27:00.800 --> 27:08.320]  But ultimately, this shift in mindset where the community is so important and it's driving so
[27:08.320 --> 27:15.280]  many conversations, it's supplanting marketing. And there are reasons that you still need marketing,
[27:15.280 --> 27:20.720]  but in the future, I think that what we'll see is the community team has marketing as a function,
[27:20.720 --> 27:25.120]  not community as a function of marketing, which is a different way to think of it.
[27:25.120 --> 27:30.960]  And that's a real mind shift for a lot of people in the business space. But if we do approach this
[27:30.960 --> 27:36.480]  from a community first approach, we can accelerate and grow the open source space even faster.
[27:38.160 --> 27:43.280]  And that gets back to this expectation, right? So when we talk about that expectation, I mentioned
[27:43.280 --> 27:48.880]  earlier that funnel, the flywheel, you know, when we're talking about, Hey, can we have people in
[27:48.880 --> 27:54.560]  the community who talk about us and then turn into followers of us who then continue to watch
[27:54.560 --> 27:59.520]  our things and then who continue to try and use our software in different ways, that's the ultimate
[27:59.520 --> 28:06.480]  outcome that we want. And when we talk about this community team, there's multiple functions in it.
[28:06.480 --> 28:10.240]  This is a chart that I've used several times before, but, you know, we're talking about
[28:10.240 --> 28:14.160]  DevRel or evangelism, we're talking about community management, we're talking about these
[28:14.160 --> 28:19.840]  OSPO roles with contributors, all of these things are part of a strong community team.
[28:19.840 --> 28:25.280]  All of them need to be satisfied. Now, a lot of us will focus only on evangelism,
[28:25.280 --> 28:29.520]  and then they won't do the other functions, or they'll focus only on the contributors and not
[28:29.520 --> 28:35.200]  do the other functions. And so all three of these are needed for a healthy, healthy ecosystem.
[28:37.600 --> 28:43.760]  Now, what are some popular ways to grow open source adoption? Okay, these are probably obvious
[28:43.760 --> 28:50.400]  for anybody who's been in the open source space for a while or been in the community, but they're
[28:50.400 --> 28:56.720]  classic, right? Content, number one, right? Content, everybody loves content. The more relevant
[28:56.720 --> 29:01.840]  content that you have, the more code examples that you can share, the more conference talks that
[29:01.840 --> 29:07.920]  are relevant to people, the more blogs you write, you know, those will make a difference,
[29:07.920 --> 29:12.400]  tutorials, sample applications and whatnot. All of these things are things that are important to
[29:12.400 --> 29:17.920]  those in the community. There's other activities you can do, especially when your product solves
[29:17.920 --> 29:24.080]  something that's newsworthy. Has anybody heard of the term news jacking? No? Okay, a couple of
[29:24.080 --> 29:28.400]  people. It's the idea that, you know, if there's something in the news cycle like, you know,
[29:28.400 --> 29:33.920]  oh, the latest hack, and, you know, or whatever, if there's an opportunity for you to maybe talk
[29:33.920 --> 29:39.840]  to people about how to build better products, if your product or your company does something
[29:39.840 --> 29:46.240]  differently that solves these other issues, this is a way for you to use the stories that are already
[29:46.240 --> 29:52.080]  out there to reach additional people. You know, if somebody's hacked or some cloud provider goes
[29:52.080 --> 29:55.760]  down, well, this is how we would prevent that, you know, or here's how our software did this
[29:55.760 --> 30:02.400]  differently. Those types of things actually can have a really far wide reach because those are
[30:02.400 --> 30:09.680]  things that are on top of people's minds. Now, you also need to generate friends telling friends,
[30:09.680 --> 30:15.040]  right? So that peer-to-peer connection, if you will, of people who are willing to share their
[30:15.040 --> 30:22.560]  experiences and share the different, you know, goodness of your software. And that goes hand
[30:22.560 --> 30:29.120]  in hand with some other things like good messaging and products and making it easier to start.
[30:29.120 --> 30:41.120]  Now, how do we make this easier? That's key. The first one is it requires a lot of collaboration.
[30:41.120 --> 30:48.960]  It's a choreographed dance, okay? So making this easier is you have to have not only easier products
[30:48.960 --> 30:56.000]  to use, you not only need a great user experience, you also need to make sure that you have enough
[30:56.000 --> 31:02.080]  information, enough tutorials, enough example code, enough out there in the community activity
[31:02.080 --> 31:07.840]  to merge those together because you have to have good product as well as strong community,
[31:07.840 --> 31:15.760]  as long as strong content, good documentation to make this work. And so that easy is important,
[31:15.760 --> 31:20.880]  but it goes beyond just one team's function, you know, and some of those key things or some of those
[31:20.880 --> 31:27.680]  things that I see people sometimes stumble with or sometimes fall down on are things like installation,
[31:27.680 --> 31:33.520]  you know, so how easy it is to install and get started. Same defaults. How many people have
[31:33.520 --> 31:39.920]  installed software and it's like, how did you not set that up? Like, why isn't that defaulted to on,
[31:39.920 --> 31:45.200]  you know, like encryption? Oh, encryption is just left off by default. Or my favorite is,
[31:45.200 --> 31:49.120]  and I don't even know, maybe there's somebody here who's run Mongo recently, but they used to not set
[31:49.120 --> 31:53.280]  a default password because they're like, oh, we don't want to limit people from getting started.
[31:53.280 --> 31:59.520]  Well, how can you not set a default password? By the way, that's the number one reason MongoDB
[31:59.520 --> 32:04.080]  has like data leaks, you know, you read these articles and it's like, oh, because these old,
[32:04.080 --> 32:09.200]  you know, these old installations didn't set a password. I don't consider that a security issue,
[32:09.200 --> 32:14.000]  that's more of a user issue, but that's a whole other story. How much automation do you put in
[32:14.000 --> 32:22.240]  place to help users? That's another critical one. Again, UI UX and how easy it is to debug
[32:22.240 --> 32:27.040]  problems. You know, if your problems, if the software crashes or has an issue or doesn't work
[32:27.040 --> 32:31.680]  as expected, do you have the right debugging in place for people to actually find what's wrong
[32:31.680 --> 32:37.040]  and fix it? Because if not, that's going to cause a really, really, really hard time in
[32:37.040 --> 32:46.480]  getting people to operationalize it. So we talked about, you know, kick-ass product,
[32:46.480 --> 32:53.040]  we talked about, you know, the awareness, we talked about, you know, how to make it easy.
[32:53.040 --> 32:59.360]  Now I got to put on my other hat. I do have another hat. It's my metrics hat. I got to wear my
[32:59.360 --> 33:04.400]  metrics hat for my metrics section of this. So we're going to talk about how do we track
[33:04.400 --> 33:12.640]  open-source usage and adoption now. Okay. And there's really kind of four or five major functions
[33:12.640 --> 33:19.840]  that I want to talk through. Awareness, usage, conversion, customers, and retention. Okay. And
[33:19.840 --> 33:25.200]  this kind of follows that funnel and that flywheel that we talked about originally. This is one of
[33:25.200 --> 33:29.680]  those things that, you know, each one of these requires a certain set of things to potentially
[33:29.680 --> 33:34.080]  look at. You don't have to look at all of these, but these are metrics that you should all consider
[33:34.080 --> 33:39.200]  and then pick and choose which ones make the most sense for your business. But when we talk about
[33:39.200 --> 33:44.240]  awareness, okay, a lot of people start with the first one on this list. So how many people
[33:44.240 --> 33:51.280]  track GitHub stars? Okay. Hey. You know, GitHub stars are a popularity contest, by the way. Did
[33:51.280 --> 33:56.960]  you know that? Like, it really is. Because it actually doesn't really show much other than
[33:56.960 --> 34:01.280]  people like your project or maybe they like people on your project. And did you know that for
[34:01.280 --> 34:08.560]  only $5.99, I can get you 1,000 stars on GitHub? There are services that do that. And so I don't
[34:08.560 --> 34:15.920]  know how many of the stars are actually real or not on some cases. It's hard to tell. But you
[34:15.920 --> 34:20.480]  should be looking at that because if it is going up into the right and you're not gaming the system,
[34:20.480 --> 34:25.680]  that is a good indication that people are finding your project. But keep in mind, from a project
[34:25.680 --> 34:31.840]  perspective, there are more users than there are users who will go to your GitHub page and get
[34:31.840 --> 34:36.960]  into your repository. And that's something to consider. Unless you're forcing people to go and
[34:36.960 --> 34:43.760]  install, you know, via source or your documentation on GitHub, you might have more people who are
[34:43.760 --> 34:47.920]  downloading some other mechanism. Maybe they're getting from a third party repo. Maybe they're
[34:47.920 --> 34:52.560]  just going to your website and getting it. So they might never go star or even see your GitHub
[34:52.560 --> 34:58.720]  pages. But looking at not only GitHub pages, but your traffic to your docs, your website, your
[34:58.720 --> 35:04.000]  different pieces of content and understanding who's interacting with it, that's another critical
[35:04.000 --> 35:09.360]  piece to this. And that's a classic marketing thing. A lot of people look at, you know, the website
[35:09.360 --> 35:14.400]  traffic. But you also want to look at those unique views to each individual page. All of those
[35:14.400 --> 35:24.800]  are critical to look at. Now, what's interesting when we talk about page views is we've had
[35:24.800 --> 35:29.520]  conversations with folks who talk about page views and they're like, there are certain pages that
[35:29.520 --> 35:35.520]  don't matter and then there's certain pages that do. And so understanding and being able to segment
[35:35.520 --> 35:40.640]  your traffic and look at who's looking at what is a very important thing to understanding that
[35:40.640 --> 35:45.920]  growth and adoption. So for instance, if someone looks at your pricing page, that's probably a
[35:45.920 --> 35:50.160]  good indicator that they might be interested in something commercial. If someone's looking at
[35:50.160 --> 35:55.120]  your documentation, that's a pretty good indicator that they're trying to install or debug an issue.
[35:55.120 --> 35:59.120]  If they're looking at tutorials on how to get started, that's a very good indication that,
[35:59.120 --> 36:05.120]  again, they're trying to use your software. And so you can track adoption through looking at those
[36:05.120 --> 36:10.960]  types of things. Now, when we talk about external evangelists and trying to get additional people
[36:10.960 --> 36:17.520]  into the ecosystem to talk about you or to figure out what you're doing or maybe get excited about
[36:17.520 --> 36:22.160]  your product, looking at the referrals to the website is another really good example. So I can
[36:22.160 --> 36:29.120]  see your blog or your blog pointed back to my website or your social tweet mentioned me. These
[36:29.120 --> 36:37.840]  referrals are often more critical than the website traffic on itself. Now, there's also two concepts
[36:37.840 --> 36:41.360]  that are really squishy. I won't get into a terrible amount of details if you're really
[36:41.360 --> 36:46.960]  interested, check out opensourcemetrics.com or.org. But share a voice. Have you ever heard
[36:46.960 --> 36:54.240]  of share a voice before? No? Okay. Think of share a voice is how often does the project or the thing
[36:54.240 --> 37:00.080]  come into people's minds or how often does it show up in search? How much of the market do you have?
[37:00.080 --> 37:07.680]  So, for instance, if I was to say to you, like, you know, when I say Linux, what pops into your
[37:07.680 --> 37:13.200]  mind? Like, what distribution pops in your mind? I'm going to guess most of you are probably going
[37:13.200 --> 37:19.840]  to say one of, like, three or four. But there's lots of other ones. And so those three or four
[37:19.840 --> 37:25.840]  have a higher share of voice than everyone else. And so if you can measure how much of your share
[37:25.840 --> 37:30.560]  of voice is, then you know how much of the market you potentially, you know, can reach out. And then
[37:30.560 --> 37:34.480]  when you have something to say, people are going to potentially listen. And then there's this idea
[37:34.480 --> 37:39.520]  of social reach. Now, probably everyone here has different social accounts on different platforms.
[37:40.560 --> 37:45.200]  And that's awesome. And the question is how much of a reach do you have? And this is, you know,
[37:45.200 --> 37:50.240]  measured by the number of followers, the amount of engagement. And the reason you want a larger
[37:50.240 --> 37:54.160]  social reach from an awareness standpoint is when you do have an announcement, when you launch a
[37:54.160 --> 37:59.040]  new product, when you talk about a new release, when you do have something important to say,
[37:59.040 --> 38:08.400]  this helps amplify that voice. Now, from a usage perspective, usage is where the adoption really
[38:08.400 --> 38:16.240]  comes into play here. Okay. Usage is how many people are actually using your software? All right.
[38:16.240 --> 38:23.680]  Now, I know a lot of companies have struggled with usage on the open source side. There's a
[38:23.680 --> 38:28.080]  lot of times people come back and they ask the question, well, who's using our open source
[38:28.080 --> 38:34.000]  software? And the answer a lot of times is, I don't know, you know, certain number of people,
[38:34.000 --> 38:38.640]  this number of people hit the download web page. But there's so many different places to get,
[38:38.640 --> 38:43.440]  you know, that information. I can't really get it. But some people can get raw download numbers.
[38:43.440 --> 38:50.400]  Anybody look at download numbers for their software? A few? Okay. It's hard to get. It really
[38:50.400 --> 38:54.880]  is, especially when you're looking at, you know, I deploy via Docker, some people are doing source,
[38:54.880 --> 39:02.720]  some people have packages. So that is a challenge. But it's important to understand if there are
[39:02.720 --> 39:08.640]  more people downloading, that's good. But you have to be careful. Because a lot, oh, I'm going to
[39:08.640 --> 39:12.560]  tell you a secret. There are a lot of bots on the internet. I don't know if you knew that. Don't
[39:12.560 --> 39:20.080]  tell anybody. And those bots download stuff. In fact, what we've found is a lot of times we might
[39:20.080 --> 39:26.640]  have a project. And so one of the things that I mentioned that SCARF does is it tracks, you know,
[39:26.640 --> 39:32.160]  things like downloads and download metrics. But what we found was stuff like, oh, this project
[39:32.160 --> 39:38.560]  has, you know, 50,000 downloads a month from two people. It's like, well, wait a minute. There's
[39:38.560 --> 39:43.360]  only two people actually downloading. So when you see 50,000 downloads, but you see only like
[39:43.360 --> 39:47.120]  two unique people, you're like, well, what is that? And then you dig into it and it's some bot
[39:47.120 --> 39:51.920]  that's downloading it and distributing it some other way. So that's important to realize that
[39:51.920 --> 39:56.640]  that is something that can happen. You want to look at that. But you want to look at that scrubbed
[39:56.640 --> 40:02.320]  unique download. So how many people are actually downloading versus how many people are, you know,
[40:02.320 --> 40:06.640]  just downloading and it could be bots or duplications. A lot of companies download the same
[40:06.640 --> 40:11.520]  software over and over again. A lot of people in their pipelines will download the latest
[40:11.520 --> 40:17.920]  version of software, et cetera. New users, new companies coming into the ecosystem. That's really
[40:17.920 --> 40:23.440]  important for usage. Sign up. So if you are a SAS provider, you're offering a free trial. Maybe you
[40:23.440 --> 40:28.240]  have a webinar. Maybe you have a mailing list. Maybe you have Slack. Sign ups are another thing
[40:28.240 --> 40:32.560]  that you want to track for usage. But that's not necessarily going to correlate to actual usage
[40:32.560 --> 40:36.800]  of the open source. But again, that's more of a directionally correct up into the right.
[40:38.240 --> 40:46.800]  You know, so the one that is really on the bottom here, the last four, this one's sticky.
[40:46.800 --> 40:53.280]  Okay. This one, this one's tough for me. Call home metrics. So most of the people in the open
[40:53.280 --> 40:59.840]  source space hate the concept of anything that's going to call home. Right? It's not necessarily
[40:59.840 --> 41:06.640]  always welcome. But there's a certain amount that might be needed for projects. And the question is
[41:06.640 --> 41:11.840]  where is that line? Right? And when I talk about call home metrics, is something running, is it
[41:11.840 --> 41:17.360]  installed? You know, is it available? How many things are running at any one time? These are
[41:17.360 --> 41:21.920]  critical questions that a lot of projects struggle with. Because just because even if you have a
[41:21.920 --> 41:27.280]  download doesn't necessarily mean that download actually translated into an actual user. And so
[41:27.280 --> 41:31.360]  you want to make sure that you can go back and forth between, you know, yeah, they downloaded,
[41:31.360 --> 41:35.680]  but they stopped using. Because if they downloaded and stopped using or never actually, you know,
[41:35.680 --> 41:40.160]  use it on a regular basis, that's a very different thing than someone who's just downloaded and you
[41:40.160 --> 41:47.680]  assume that they're using it. Now, when we, before we get into conversions, I want to say that just
[41:47.680 --> 41:53.840]  because you have adoption of your open source software doesn't necessarily mean that that's
[41:53.840 --> 41:59.200]  going to lead to commercial success. Okay? How many people, I mean, there might be some people in
[41:59.200 --> 42:03.200]  here and maybe you're willing to raise your hand. But I know that several people that I've talked to
[42:03.200 --> 42:09.040]  struggle with this where they're like, I have a million downloads a month, but I can't get anybody
[42:09.040 --> 42:17.760]  to buy anything from me. You know, oh, yeah, there we go. We have one brave soul. That happens quite
[42:17.760 --> 42:22.320]  a bit. And, you know, it gets back to some of those product things. And there's a lot of reasons
[42:22.320 --> 42:28.640]  or things that you can do to try and change that. But, you know, it gets back to this expectations
[42:28.640 --> 42:34.640]  on the awareness versus, you know, you know, what the business expects. And from a metric standpoint,
[42:34.640 --> 42:38.960]  you've got the two sides, right? So when you talk about the community side, the adoption of open
[42:38.960 --> 42:45.920]  source side, you know, a lot of times our efforts are around fostering that really strong community.
[42:45.920 --> 42:49.200]  And then there's this big question mark in the middle. And then on the business side, then
[42:49.200 --> 42:53.920]  there's, oh, now we want, you know, ARR, now we want, you know, to look at expansion numbers and
[42:53.920 --> 42:58.640]  churn and all this other stuff. So how do you bridge the gap between these two? And this is
[42:58.640 --> 43:04.480]  where conversion comes into play. And conversion is a bad word for people, right? You know,
[43:04.480 --> 43:10.000]  yeah, you will be assimilated. You know, we want that from the open source side, right?
[43:11.040 --> 43:15.920]  Might be a negative connotation, but I think it's funny. But I do have a super evil villain hat.
[43:17.760 --> 43:23.040]  But you do want those conversion metrics. You want people to say, okay, what does it take to go from
[43:23.040 --> 43:30.720]  free to paid? And to measure that, okay, there's, you know, different things to look at, right?
[43:30.720 --> 43:34.160]  That conversion is impacted by a lot of different things. And each one of these are things you
[43:34.160 --> 43:39.280]  can measure from a product. You know, you want better features, better security, you know, you
[43:39.280 --> 43:45.680]  want support, things like that. From a policy perspective, you know, companies often will
[43:45.680 --> 43:50.080]  require support or they might have compliance requirements. How do you meet them? And then
[43:50.080 --> 43:54.880]  people, right? So all of these things affect your conversion ratios. But looking at conversion
[43:54.880 --> 43:59.600]  ratios, you can actually control. You want to look at things like page docs or source to download
[43:59.600 --> 44:05.200]  conversion ratios, doc views to those who have downloaded to those who eventually signed up,
[44:05.200 --> 44:11.520]  if you can track that, that's great. I know that in the past, I've had to go through and do stuff
[44:11.520 --> 44:17.360]  like that where I've seen, I mean, actual example where it's like company A, there's really large
[44:17.360 --> 44:24.400]  company four years ago started looking at our blogs. And then they attended conferences, they
[44:24.400 --> 44:29.120]  did all this other stuff. And then two years, they called us up and had a conversation. And then
[44:29.120 --> 44:34.480]  a year later, they did something else. So there are breadcrumbs when you look that you can actually
[44:34.480 --> 44:38.800]  see what people are doing and what sort of activities help lead them to be a customer.
[44:40.640 --> 44:45.360]  Now, customers, when we talk about customer metrics, we're talking about standard business
[44:45.360 --> 44:49.600]  metrics. So these are the ones that most people who are running an open source company are familiar
[44:49.600 --> 44:57.600]  with the critical ones, things like the number of new customers or new logos, ARR, MRR, you know,
[44:57.600 --> 45:02.960]  stuff like that. So I'm not going to go terribly deep into this because there are MBA courses that
[45:02.960 --> 45:08.560]  cover a lot of these and I don't want to necessarily go in depth. But the ones that I look at typically
[45:08.560 --> 45:17.360]  the big three, number of customers, number of new logos, and yeah, the ARR, MRR. And then also,
[45:17.360 --> 45:24.160]  I look at the user to customer ratio. So if you know you have a million users and you have only
[45:24.160 --> 45:29.440]  five paying customers, how do you adjust that? How do you tweak it? How do you make that work better?
[45:31.200 --> 45:37.360]  And then I also look at the number of customers who are also advocating for us. From a retention
[45:37.360 --> 45:42.640]  and churn perspective, churn is the idea that people start using and then go away. So you want
[45:42.640 --> 45:47.120]  to look at those. You want to look at the number of instances that have gone away. You also want
[45:47.120 --> 45:52.320]  to do some competitive analysis, right? So if you have users and customers who are starting to use
[45:52.320 --> 45:56.560]  other open source projects or take a look at other things, you might want to be aware of that.
[45:57.840 --> 46:04.640]  So recapping, not all businesses, open source businesses are the same. Realistically,
[46:04.640 --> 46:10.160]  build an awesome project, focus on the funnel, and of course, measure it. All of these things will
[46:10.160 --> 46:15.920]  help lead you to open source success. Again, if you are interested in getting more details about
[46:15.920 --> 46:19.760]  any of the metrics or learning a little bit about what's been successful for other folks,
[46:19.760 --> 46:25.280]  check out opensourcemetrics.org. You can contribute to it if you think that there is something that
[46:25.280 --> 46:30.640]  is missing, something that you think we should work better, definitions, et cetera. We would love
[46:30.640 --> 46:37.120]  to have your feedback and help there. Details, if you want to reach out to me, be happy to have
[46:37.120 --> 46:53.040]  conversations with anybody offline. And that is it for me. Questions? Oh, we got one question.
[46:53.040 --> 47:13.920]  We're running mics to people in the crowd, it looks like. Oh, it's not working. Okay. Well,
[47:13.920 --> 47:23.040]  maybe you should shout. Maybe now. You mentioned collecting metrics from users, but because of
[47:23.040 --> 47:29.360]  the GDPR, you need informed consent that you're allowed to collect metrics. In your experience,
[47:29.360 --> 47:34.160]  what's the percentage of users that actually allow to do that? Is it like 1% or 10%?
[47:34.960 --> 47:38.960]  It's generally more than you would think. I mean, it's at least a third, maybe more.
[47:38.960 --> 47:50.080]  And beyond that, there are metrics that aren't tied to PII that can show those indicators going
[47:50.080 --> 47:56.160]  up and to the right. So just because you know that you have web page traffic or downloads,
[47:56.160 --> 48:00.240]  even if you don't know specifically who they are, you can still see those up and to the right,
[48:00.240 --> 48:04.160]  and those are just as important in a lot of cases. And that's why you have to pick and choose,
[48:04.160 --> 48:09.280]  which ones make the most sense. And in a lot of cases, what it is is it's about building that
[48:09.280 --> 48:14.640]  community and that relationship, so they're willing to share details. And how you do that and how
[48:14.640 --> 48:20.320]  you make sure is you don't do kind of like old kind of slimy sales tactics. Like you don't want
[48:20.320 --> 48:24.560]  to spam people, you don't want to call them. Look, let people raise their hand when they're ready.
[48:25.200 --> 48:29.920]  And that helps people a lot. And when people go to bat for you and tell you, you know, other people,
[48:29.920 --> 48:33.120]  hey, you should sign up for the newsletter, you should sign up for this. And then they give you
[48:33.120 --> 48:40.960]  that consent. That helps a lot. Thanks. Yeah. Oh, other other way, other way. Yeah. We had a couple
[48:40.960 --> 48:49.600]  more questions. We've got one in the middle, one in the end, one down here.
[48:49.600 --> 49:02.960]  Oh, hello. Yes. Okay. So I was one of the folks that raised their hands when you asked what,
[49:02.960 --> 49:08.080]  what do we know, open core. So I don't, but then you started explaining and I say, okay,
[49:08.080 --> 49:13.200]  that's like freemium. So I just was asking, could you explain the difference between open core and
[49:13.200 --> 49:19.920]  freemium? Ah, so, yeah. So freemium is where, you know, your first taste is free. And then,
[49:19.920 --> 49:26.560]  you know, you can, you can get more later on. Open core has been around a lot longer than,
[49:26.560 --> 49:33.440]  quote unquote, freemium. Okay. And typically from a freemium strategy, you're going to pay more as
[49:33.440 --> 49:39.360]  you go. And so having like a cloud service where the first, let's say, 100 gigs of data or something
[49:39.360 --> 49:44.160]  that you store is free. And then it goes on. That's more of that freemium strategy. But from an
[49:44.160 --> 49:48.800]  open source perspective, how I view open core is you've got a complete product that's running.
[49:48.800 --> 49:53.040]  You don't have to pay for anything. And if you wanted to augment it or change it on your own,
[49:53.040 --> 49:58.880]  you can. I think freemium typically comes in my mind and more into play on the cloud side,
[49:58.880 --> 50:02.720]  where you've got more of that, you know, kind of like ongoing service where you're paying for
[50:02.720 --> 50:07.840]  something where you can't necessarily replace it or pull it out. But it's a fine line. And it's
[50:07.840 --> 50:13.280]  really difficult to draw that line. And a lot of people might go back and forth. Oh, it looks like
[50:13.280 --> 50:17.200]  our time is up. I'm happy to answer your question if you want to come down and we can, we can chat
[50:17.200 --> 50:38.720]  afterwards. That's cool. I appreciate your time. I do. Thank you very much.
