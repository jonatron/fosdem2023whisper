{"text": " All right, so let's continue with one of our favorite topic, which is dependency injection. We talked about it this morning. As you can see, we have a lot of topics. We have even more topics until, what time do we finish? 6.30 p.m., right? So, 6 p.m., 6.30. So, we still have a lot of stuff coming in. But for now, please welcome Arnaud, who is going to talk about COIN. Thank you very much. Let's talk about new COIN developer experience in COIN. Just about me, I'm Arnaud Juliani, the lean maintainer of COIN project and also COIN GD. COIN is a dependency injection framework, and the idea is to help you structure your application with ease and efficiency. And this is the challenge of providing a DSL developer experience for you to make your app very, very easy to build. I tried to explain COIN in just two minutes to explain how finally we improved behind that. As we have a dependency injection framework, we want a bunch of classes here, one A and B with the dependency. And we have a DSL keyword here that make the configuration space for us. Then this is the module keyword that introduce the way that we have definitions for the application, single keyword with a lambda function to create what we want to, the class that we have here, and the second one to declare the second component, and then we are done. We have declared our components inside the COIN container. The thing here is that it's working directly with your Kotlin code. That means that here, if you follow closely, we are using constructor directly. And then it's not compiling. Then that means that this class B is needed a dependency to class A. And then this is where we need the last keyword that is get. And then the challenge was that in three keywords, I can manage to write an application configuration to manage my dependency. The thing is that then COIN can create everything by constructor for you and also run any kind of Kotlin code directly behind the functions. The other side of COIN is that you can inject any field easily just by unlocking an extension with the COIN component interface. That means that you can access to the by-inject function that helps you retrieve a dependency out of COIN container. Then you have both components, those one that are created directly by COIN. And when you can't have things created directly by COIN, then you need to inject in fields. This will perhaps remind you some of the Android activity things like you can't create activity by yourself. You can't create Android component by yourself. You are called by a lifecycle. Then you need to retrieve things from the outside of the container. And then that's it. You mostly have all the tools to have your dependency injection. You need just to run and start your container. But finally, the experience is interesting and the community raises many things like problem of verbosity. Because sometimes in application you tend to have like dozens of dependency. I would say perhaps look at your code, perhaps you have kind of potato effect where you can have everything inside one component that try to gather everything. But yeah, not that great for us. This is where the story starts for us and how we can improve this for the Kotlin developers. And then from this really simplistic example here, what we have here is we would like to avoid our developer to write manually the GET things. From the idea and the need of GET is that COIN is made to be super efficient. We don't use reflection. We don't use any kind of meta information over your code. We just run the thing. And then the configuration seems to be a bit manual over there, but then you are manually writing the things for COIN. The new magic way finally to write this with COIN is having a new keyword, single and single off. That is the same semantic keyword, but it's a new function. And then instead of asking you a lambda, we want to ask you a function directly. This is why you have the double semicolon character. And then for us, you don't have to write things with GET. It's still readable, still very easy to use with the COIN semantic, the sense, the meaning of the DSL. And then also, it's consistent with changes in the meaning of, for example, if you change the constructor of a class, your DSL can break because you didn't update it. Then for us, it's a very great improvement to go over a DSL that is using lots of functions, but finally not a voodoo to write those functions directly as a lambda, but directly with parentheses and this pointer kind of pointer function stuff. The other side of COIN, of course, is having dynamic behavior that are interesting is that you can pass that directly to a definition. That means that in this class, we just want an ID. And what we want to do is pass this ID dynamically to this component. COIN offers you the way to do that directly when you inject a field by using the function parameters of. And then magically, your data is going into the graph and then is injected in your definition directly by this function. This is very visual, interesting, but then this compact way of having the DSL also is capable of dealing with your lambda expression. Then you don't need lambda anymore. It's quite interesting because finally, this was this feeling of having COIN as a really compact DSL and compact way to describe everything without to invade your implication is that now it avoid an annoying side effect of the DSL and then now you can just write directly your class constructor like that. There's, of course, some warnings. If you have qualifiers, name parameters, like if you have two components that have the same type but have not the same implementation, then you want to have the different name for them. Then here we can guess which one you want to use directly. Function and classes that have default values, we don't know. We don't know if we, if you want to use the default values, if you want COIN to use this, then up to you to use again the lambda expression thing and also any kind of complex Kotlin expression like builders. Yeah, it's still Kotlin then for you. You can just still use the lambda when those expressions are needed else go with this double semicolon character expression and then just use the class and then you're done. Mostly keep the things up going in the easiest way to write for you. It's opening a door for us like we are a framework maker, then we try to understand what kind of DSL and options we want to offer you. For example, when you define something in your DI, you can give it a name, a qualifier. We can say that it's created on start. For example, the container is starting, then you can create it on start and also you can say that it's binding another type. All of this is interesting but it's not really easy to extend in terms of keywords and binding. For example, you don't know if there is other keyword after the bind because we are already using some lambda, then a function to express something. Then do we open a new lambda block after the lambda block? It's a bit weird things. Then with this new DSL, we can open a new way to write this function. That means that we can directly open a lambda theory for this option. Like we have a name, we have created a start and we have bind. This is the same word but not implemented in the same DSL style. Here this is functions directly out of the definition thing. Clearly, you see it's a bit more readable for us also. It's clearly more maintainable and allowing us to add more features at time. Then it's really interesting to provide a new way to write things and also feedback of the community is super interesting for us. One of the things also is that coin is really simple and keep the things really simple in terms of DSL. That means that you declare anything in terms of module. You can scale in the way you want by features, by layers, by everything. Then up to you to organize yourself. Really, the idea is that the tool shouldn't impact your mind, shouldn't impact your way to build your application. You should even forget that you are using coin. This is really important for us to continue in this way. In coin, the framework never had the need of gathering modules, other by list or by, let's say, something more convenient by a plus operator, but it was really simplistic. The problem is that with scaling application development, scaling around all the development, we need really strong links between definition, between reusability of this component, this layer and this stuff. We finally introduce something that can be seen as really simple to add as a module is that we add the includes function that help us really understand what kind of module we want to reuse and then flatten everything and optimize your loading at start for you. It may be visually, it may be really easy to use, but when finally at the beginning for coin, you only have a list of modules to play with, it's kind of really hard to reuse and really hard to figure out where finally you can build your configuration. Then we are unlocking a really big door that means that you can begin to reuse parent modules with child modules and then you can begin to dive into really, really complex, big and complex configuration things. Then for you, we are flattening all the graph, we are loading and optimizing all the stuff for you. Then all those Kotlin multi-platform, all of these features are Kotlin multi-platform ready and to get those superpowers, sure, you can grab this directly in your Gradle file. It's not 3.2 versions, time is flying by 3.3 and if you are making a Kotlin multi-platform application, use the coin core module, Gradle module and if you are using Android, then use the coin Android module version. Coin has been made to make your development super easy and super simple and this is why your coin configuration should stay really simple for you. I let you meditate on this quote from Chet Hazer and the transition for us is we are trying to use another kind of expression in terms of framework is that until now we were really people that pushing a lot for Kotlin DSL, stuff, et cetera. The idea of perhaps introducing annotation is also to not reproduce what you can find in other frameworks like Dagger and other, but really point something, we want to bring value and the problem of also the DSL is that we clearly have some limits over that. We can't understand really what you are writing, we can't trigger any static analyse of your code directly. That came to magic to the Kotlin compiler plugin. I won't dive into details for that because I believe some people already talk about KSP and everything about that, but let's say that Kotlin compiler is everything we could do for you before we are compiling your code in Kotlin. Then we could rewrite things, we could make code generation of course, analysis, et cetera, et cetera. What we will do with Google KSP is provide you a way to avoid the DSL and go really straight forward with annotation and keep all the coin semantics, all the coin API for you. We don't want to reinvent the wheel. What we want to do here is that we want to generate what the DSL you would have to write and then it's really, really, really a small piece of code that you would have to write. Then if we can still avoid you to write things in your code, this is still a good experience for us to let you understand how far we can go. In terms of definitions, what it means is that if you have a class, then you can just add directly an annotation. You see that this is the same keyword we have the add single on it. Then you see that we are extending an interface. The idea is that with just one annotation, we will understand that this class is having a constructor and then we will also bind directly the type migrate history. The idea is that we allow you to have, not to type anything in this. We detect things for you. We detect the code and then we can say, okay, coin, just write this definition for my repository type with the implementation of my repository. We have another component. We target add factory. Factory is another keyword of coin. It's the opposite of a single ton. Factory is something you want to create. Each time you want to ask a definition for that. Then if you want an instance of my presenter directly, you just tag it add factory and then coin will generate the DSL and then coin will manage to go and get the definition for you. You see finally you don't really care about the DSL and the complexity behind that. Finally, we can detect many, many things for you. Finally, for those who are making Android development, we have an annotation dedicated for coin that lets you understand that. Let coin understand that. We will create an instance of view model. Then we are reaching all the dependencies. We understand that this is a view model and then we will bind everything for you. You see that here we don't speak about DSL. It's just that we tag something here. The idea is that we can have automatic injection and binding. We can detect everything, all you need here by default. We can deal with new label type. That means that if you use the question mark in parameter construction, then we will understand that this is something that can be new label and then for you, it's completely transparent and then it will be taken into account. Also, as you have seen, we can tag a parameter in a function or in a constructor as injected param. That means it will be something that come from the application that is sending a data, a dynamic data directly to the definition. Then the natural way to do that will be to tag a parameter as injected param. You see that finally, the experience for us is to try really to let you write the minimum and the minimum things for you. Like for example, with dagger hit, we still have lots of things to specify. For example, in the spring framework, this is the kind of opposite because a spring is scanning everything for you and making all the class pass analysis for you. Then we are in between where finally we allow you to just tag your code with just a bunch of annotations and then you are ready to go and you can manage any kind of tip-off injection with your constructor things. The idea behind of the magic is that just you use annotations and you are ready to use the standard coin API is that you can use bi-inject or bi-view model field injection style here. Then we don't break the experience of people that are already using a coin and then we continue, then we allow people that are using annotations directly to use those extensions as regular extensions. For the modules, then for definition, we just tag annotations. We annotate classes, but for modules, we can't directly tag something in the DSL. How works KSP is that we are scanning for many classes or functions, then it will be kind of hard to tag around the DSL. The proposal for now is to work directly with class module to let you have an organization module for that. Then how you do that, you declare a module and that's it. You have a module, you have a hard module and the idea is that you put add component scan and then we will scan any kind of component that has been tagged in your application by package. Then it's really specific in terms of scan then that means that you can really filter by package, filter by layout, filter by features, how you want to organize yourself and then you just have this annotation here. Also, if you want, you can declare things directly inside a function. We will understand that if you tag something inside your module class, it will be a definition that we can bind for you directly. You see it's still very, very natural to use and really super compact. Then the idea is for us to let you go super fast for your dependency injection and keep everything aside for you. Of course, between two modules, you can have the includes of other modules that will generate the right things for you. That means that it will use the includes function that has been introduced just above in the new coin DSL site. Then we just need to start coin. That means that you have your module, you have a function where you want to start to start coin and then the idea is we just run the module with the new instance of my module here. The only thing we want to generate for you is that it's just a simple extension that will generate the DSL and this is where we just want to make boundaries for us. We don't want to reinvent the wheel. We don't want to reinvent things to generate code over code over code. We want to keep coin as it is, something that is super efficient to make dependency injection but allow you to use the annotations. This is why with such approach, you can mix both. You don't have to write a new project with annotations. You can already use coin annotations inside your project and test with it. The only thing you have to care is be sure to have the right import. That means that we are generating all your coin contents inside our coin.ksp.generated. Then you can use both DSL module, class modules annotated and everything, everything. Then up to you to express yourself and use the right tools that is great for you. What is interesting for us is that we don't want to reproduce what we have seen and why we have made coin is that we don't want to expose you to tools that can take dozens of minutes to recompile your project. The idea is that it should run for thousands of components really quick. The other good thing of that is that it's cutlin behind the scene, it's cutlin generated and this is something you can clearly debug step by step if you want. Up to you, that means that we don't want to replace DSL by annotations. It's another way to express yourself. Ksp is a good technology for us to help you write less, less quotes, less bugs. Then up to you to choose the right tools and the right solution to make your app structure. To finish then about coin and some improvement of this year, what's next? If you want to throw now about coin, we have many tutorials on many kind of cutlin application from a cutlin, cutlin multiplatform and Android application, also Cator if you want. This is the roadmap for 2023 where we have end of track coin 3.2, 3.3 is the active track, this is the current application that is still maintained before the next release where we are in 3.4, where we want to focus on compose for the jet brains multiplatform side, be sure that we want to bring better experience for cutlin native and we have also the verify API that is a new verification API that lets you make a compile time verification. Of course, we are really keen of Cator and we want to push new things about Cator. Especially today at FirstDem, and this is my first session at FirstDem, I'm really happy to show all the people that are really sharing and contributing to coin and I clearly want to thank them. Thank you all the community to work on coin. I believe some of people can find themselves on this board. If you want to chat with the coin community, then you can either find us on Twitter, on Slack, the cutlin on Slack and also you can go on the website that is inside coin.io to find all the related sources that you want. And also Open Source is great, but you need a strong company behind that to help you and have support on your project that is helping with coin technology and cutlin technology. This is why I founded Cozilla last year to work with people that are using such technologies. Then you can find all the resources on Cozilla.io and write on time. Thank you. Then we have time for questions. No question there. No, sorry. We don't have time for questions. We are so strict on timing. The next talk will start in four minutes, actually.", "segments": [{"id": 0, "seek": 3000, "start": 30.0, "end": 59.56, "text": " All right, so let's continue with one of our favorite topic, which is dependency injection.", "tokens": [1057, 558, 11, 370, 718, 311, 2354, 365, 472, 295, 527, 2954, 4829, 11, 597, 307, 33621, 22873, 13], "temperature": 0.0, "avg_logprob": -0.3214752777763035, "compression_ratio": 1.1097560975609757, "no_speech_prob": 0.36654868721961975}, {"id": 1, "seek": 5956, "start": 59.56, "end": 62.92, "text": " We talked about it this morning. As you can see, we have a lot of topics. We have even", "tokens": [492, 2825, 466, 309, 341, 2446, 13, 1018, 291, 393, 536, 11, 321, 362, 257, 688, 295, 8378, 13, 492, 362, 754], "temperature": 0.0, "avg_logprob": -0.29365627244971265, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.004144932609051466}, {"id": 2, "seek": 5956, "start": 62.92, "end": 71.24000000000001, "text": " more topics until, what time do we finish? 6.30 p.m., right? So, 6 p.m., 6.30. So, we still", "tokens": [544, 8378, 1826, 11, 437, 565, 360, 321, 2413, 30, 1386, 13, 3446, 280, 13, 76, 7933, 558, 30, 407, 11, 1386, 280, 13, 76, 7933, 1386, 13, 3446, 13, 407, 11, 321, 920], "temperature": 0.0, "avg_logprob": -0.29365627244971265, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.004144932609051466}, {"id": 3, "seek": 5956, "start": 71.24000000000001, "end": 76.68, "text": " have a lot of stuff coming in. But for now, please welcome Arnaud, who is going to talk", "tokens": [362, 257, 688, 295, 1507, 1348, 294, 13, 583, 337, 586, 11, 1767, 2928, 1587, 629, 532, 11, 567, 307, 516, 281, 751], "temperature": 0.0, "avg_logprob": -0.29365627244971265, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.004144932609051466}, {"id": 4, "seek": 7668, "start": 76.68, "end": 90.36000000000001, "text": " about COIN. Thank you very much. Let's talk about new COIN developer experience in COIN.", "tokens": [466, 3002, 1464, 13, 1044, 291, 588, 709, 13, 961, 311, 751, 466, 777, 3002, 1464, 10754, 1752, 294, 3002, 1464, 13], "temperature": 0.0, "avg_logprob": -0.32900477091471353, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.010516807436943054}, {"id": 5, "seek": 7668, "start": 90.36000000000001, "end": 99.12, "text": " Just about me, I'm Arnaud Juliani, the lean maintainer of COIN project and also COIN GD.", "tokens": [1449, 466, 385, 11, 286, 478, 1587, 629, 532, 7174, 21309, 11, 264, 11659, 6909, 260, 295, 3002, 1464, 1716, 293, 611, 3002, 1464, 460, 35, 13], "temperature": 0.0, "avg_logprob": -0.32900477091471353, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.010516807436943054}, {"id": 6, "seek": 7668, "start": 99.12, "end": 104.92000000000002, "text": " COIN is a dependency injection framework, and the idea is to help you structure your application", "tokens": [3002, 1464, 307, 257, 33621, 22873, 8388, 11, 293, 264, 1558, 307, 281, 854, 291, 3877, 428, 3861], "temperature": 0.0, "avg_logprob": -0.32900477091471353, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.010516807436943054}, {"id": 7, "seek": 10492, "start": 104.92, "end": 112.0, "text": " with ease and efficiency. And this is the challenge of providing a DSL developer experience", "tokens": [365, 12708, 293, 10493, 13, 400, 341, 307, 264, 3430, 295, 6530, 257, 15816, 43, 10754, 1752], "temperature": 0.0, "avg_logprob": -0.13913630330285362, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.00031408327049575746}, {"id": 8, "seek": 10492, "start": 112.0, "end": 118.48, "text": " for you to make your app very, very easy to build. I tried to explain COIN in just two", "tokens": [337, 291, 281, 652, 428, 724, 588, 11, 588, 1858, 281, 1322, 13, 286, 3031, 281, 2903, 3002, 1464, 294, 445, 732], "temperature": 0.0, "avg_logprob": -0.13913630330285362, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.00031408327049575746}, {"id": 9, "seek": 10492, "start": 118.48, "end": 124.52000000000001, "text": " minutes to explain how finally we improved behind that. As we have a dependency injection", "tokens": [2077, 281, 2903, 577, 2721, 321, 9689, 2261, 300, 13, 1018, 321, 362, 257, 33621, 22873], "temperature": 0.0, "avg_logprob": -0.13913630330285362, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.00031408327049575746}, {"id": 10, "seek": 10492, "start": 124.52000000000001, "end": 131.84, "text": " framework, we want a bunch of classes here, one A and B with the dependency. And we have", "tokens": [8388, 11, 321, 528, 257, 3840, 295, 5359, 510, 11, 472, 316, 293, 363, 365, 264, 33621, 13, 400, 321, 362], "temperature": 0.0, "avg_logprob": -0.13913630330285362, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.00031408327049575746}, {"id": 11, "seek": 13184, "start": 131.84, "end": 138.52, "text": " a DSL keyword here that make the configuration space for us. Then this is the module keyword", "tokens": [257, 15816, 43, 20428, 510, 300, 652, 264, 11694, 1901, 337, 505, 13, 1396, 341, 307, 264, 10088, 20428], "temperature": 0.0, "avg_logprob": -0.17335213684454198, "compression_ratio": 1.7783251231527093, "no_speech_prob": 0.00020060405950061977}, {"id": 12, "seek": 13184, "start": 138.52, "end": 145.28, "text": " that introduce the way that we have definitions for the application, single keyword with a", "tokens": [300, 5366, 264, 636, 300, 321, 362, 21988, 337, 264, 3861, 11, 2167, 20428, 365, 257], "temperature": 0.0, "avg_logprob": -0.17335213684454198, "compression_ratio": 1.7783251231527093, "no_speech_prob": 0.00020060405950061977}, {"id": 13, "seek": 13184, "start": 145.28, "end": 151.96, "text": " lambda function to create what we want to, the class that we have here, and the second", "tokens": [13607, 2445, 281, 1884, 437, 321, 528, 281, 11, 264, 1508, 300, 321, 362, 510, 11, 293, 264, 1150], "temperature": 0.0, "avg_logprob": -0.17335213684454198, "compression_ratio": 1.7783251231527093, "no_speech_prob": 0.00020060405950061977}, {"id": 14, "seek": 13184, "start": 151.96, "end": 159.24, "text": " one to declare the second component, and then we are done. We have declared our components", "tokens": [472, 281, 19710, 264, 1150, 6542, 11, 293, 550, 321, 366, 1096, 13, 492, 362, 15489, 527, 6677], "temperature": 0.0, "avg_logprob": -0.17335213684454198, "compression_ratio": 1.7783251231527093, "no_speech_prob": 0.00020060405950061977}, {"id": 15, "seek": 15924, "start": 159.24, "end": 166.12, "text": " inside the COIN container. The thing here is that it's working directly with your", "tokens": [1854, 264, 3002, 1464, 10129, 13, 440, 551, 510, 307, 300, 309, 311, 1364, 3838, 365, 428], "temperature": 0.0, "avg_logprob": -0.15509282458912244, "compression_ratio": 1.6481481481481481, "no_speech_prob": 9.270659938920289e-05}, {"id": 16, "seek": 15924, "start": 166.12, "end": 172.64000000000001, "text": " Kotlin code. That means that here, if you follow closely, we are using constructor directly.", "tokens": [30123, 5045, 3089, 13, 663, 1355, 300, 510, 11, 498, 291, 1524, 8185, 11, 321, 366, 1228, 47479, 3838, 13], "temperature": 0.0, "avg_logprob": -0.15509282458912244, "compression_ratio": 1.6481481481481481, "no_speech_prob": 9.270659938920289e-05}, {"id": 17, "seek": 15924, "start": 172.64000000000001, "end": 178.92000000000002, "text": " And then it's not compiling. Then that means that this class B is needed a dependency to", "tokens": [400, 550, 309, 311, 406, 715, 4883, 13, 1396, 300, 1355, 300, 341, 1508, 363, 307, 2978, 257, 33621, 281], "temperature": 0.0, "avg_logprob": -0.15509282458912244, "compression_ratio": 1.6481481481481481, "no_speech_prob": 9.270659938920289e-05}, {"id": 18, "seek": 15924, "start": 178.92000000000002, "end": 185.16000000000003, "text": " class A. And then this is where we need the last keyword that is get. And then the challenge", "tokens": [1508, 316, 13, 400, 550, 341, 307, 689, 321, 643, 264, 1036, 20428, 300, 307, 483, 13, 400, 550, 264, 3430], "temperature": 0.0, "avg_logprob": -0.15509282458912244, "compression_ratio": 1.6481481481481481, "no_speech_prob": 9.270659938920289e-05}, {"id": 19, "seek": 18516, "start": 185.16, "end": 192.28, "text": " was that in three keywords, I can manage to write an application configuration to manage", "tokens": [390, 300, 294, 1045, 21009, 11, 286, 393, 3067, 281, 2464, 364, 3861, 11694, 281, 3067], "temperature": 0.0, "avg_logprob": -0.10561018814275294, "compression_ratio": 1.5807860262008733, "no_speech_prob": 5.090202103019692e-05}, {"id": 20, "seek": 18516, "start": 192.28, "end": 199.84, "text": " my dependency. The thing is that then COIN can create everything by constructor for you", "tokens": [452, 33621, 13, 440, 551, 307, 300, 550, 3002, 1464, 393, 1884, 1203, 538, 47479, 337, 291], "temperature": 0.0, "avg_logprob": -0.10561018814275294, "compression_ratio": 1.5807860262008733, "no_speech_prob": 5.090202103019692e-05}, {"id": 21, "seek": 18516, "start": 199.84, "end": 207.6, "text": " and also run any kind of Kotlin code directly behind the functions. The other side of COIN", "tokens": [293, 611, 1190, 604, 733, 295, 30123, 5045, 3089, 3838, 2261, 264, 6828, 13, 440, 661, 1252, 295, 3002, 1464], "temperature": 0.0, "avg_logprob": -0.10561018814275294, "compression_ratio": 1.5807860262008733, "no_speech_prob": 5.090202103019692e-05}, {"id": 22, "seek": 18516, "start": 207.6, "end": 215.07999999999998, "text": " is that you can inject any field easily just by unlocking an extension with the COIN component", "tokens": [307, 300, 291, 393, 10711, 604, 2519, 3612, 445, 538, 49620, 364, 10320, 365, 264, 3002, 1464, 6542], "temperature": 0.0, "avg_logprob": -0.10561018814275294, "compression_ratio": 1.5807860262008733, "no_speech_prob": 5.090202103019692e-05}, {"id": 23, "seek": 21508, "start": 215.08, "end": 222.64000000000001, "text": " interface. That means that you can access to the by-inject function that helps you retrieve", "tokens": [9226, 13, 663, 1355, 300, 291, 393, 2105, 281, 264, 538, 12, 259, 1020, 2445, 300, 3665, 291, 30254], "temperature": 0.0, "avg_logprob": -0.12298991259406594, "compression_ratio": 1.651376146788991, "no_speech_prob": 0.00010821006435435265}, {"id": 24, "seek": 21508, "start": 222.64000000000001, "end": 228.84, "text": " a dependency out of COIN container. Then you have both components, those one that are created", "tokens": [257, 33621, 484, 295, 3002, 1464, 10129, 13, 1396, 291, 362, 1293, 6677, 11, 729, 472, 300, 366, 2942], "temperature": 0.0, "avg_logprob": -0.12298991259406594, "compression_ratio": 1.651376146788991, "no_speech_prob": 0.00010821006435435265}, {"id": 25, "seek": 21508, "start": 228.84, "end": 235.12, "text": " directly by COIN. And when you can't have things created directly by COIN, then you", "tokens": [3838, 538, 3002, 1464, 13, 400, 562, 291, 393, 380, 362, 721, 2942, 3838, 538, 3002, 1464, 11, 550, 291], "temperature": 0.0, "avg_logprob": -0.12298991259406594, "compression_ratio": 1.651376146788991, "no_speech_prob": 0.00010821006435435265}, {"id": 26, "seek": 21508, "start": 235.12, "end": 244.96, "text": " need to inject in fields. This will perhaps remind you some of the Android activity things", "tokens": [643, 281, 10711, 294, 7909, 13, 639, 486, 4317, 4160, 291, 512, 295, 264, 8853, 5191, 721], "temperature": 0.0, "avg_logprob": -0.12298991259406594, "compression_ratio": 1.651376146788991, "no_speech_prob": 0.00010821006435435265}, {"id": 27, "seek": 24496, "start": 244.96, "end": 249.52, "text": " like you can't create activity by yourself. You can't create Android component by yourself.", "tokens": [411, 291, 393, 380, 1884, 5191, 538, 1803, 13, 509, 393, 380, 1884, 8853, 6542, 538, 1803, 13], "temperature": 0.0, "avg_logprob": -0.15700355576880184, "compression_ratio": 1.6908212560386473, "no_speech_prob": 9.06787536223419e-05}, {"id": 28, "seek": 24496, "start": 249.52, "end": 256.16, "text": " You are called by a lifecycle. Then you need to retrieve things from the outside of the", "tokens": [509, 366, 1219, 538, 257, 45722, 13, 1396, 291, 643, 281, 30254, 721, 490, 264, 2380, 295, 264], "temperature": 0.0, "avg_logprob": -0.15700355576880184, "compression_ratio": 1.6908212560386473, "no_speech_prob": 9.06787536223419e-05}, {"id": 29, "seek": 24496, "start": 256.16, "end": 261.96000000000004, "text": " container. And then that's it. You mostly have all the tools to have your dependency", "tokens": [10129, 13, 400, 550, 300, 311, 309, 13, 509, 5240, 362, 439, 264, 3873, 281, 362, 428, 33621], "temperature": 0.0, "avg_logprob": -0.15700355576880184, "compression_ratio": 1.6908212560386473, "no_speech_prob": 9.06787536223419e-05}, {"id": 30, "seek": 24496, "start": 261.96000000000004, "end": 270.12, "text": " injection. You need just to run and start your container. But finally, the experience", "tokens": [22873, 13, 509, 643, 445, 281, 1190, 293, 722, 428, 10129, 13, 583, 2721, 11, 264, 1752], "temperature": 0.0, "avg_logprob": -0.15700355576880184, "compression_ratio": 1.6908212560386473, "no_speech_prob": 9.06787536223419e-05}, {"id": 31, "seek": 27012, "start": 270.12, "end": 277.76, "text": " is interesting and the community raises many things like problem of verbosity. Because", "tokens": [307, 1880, 293, 264, 1768, 19658, 867, 721, 411, 1154, 295, 9595, 20373, 13, 1436], "temperature": 0.0, "avg_logprob": -0.19845996325529075, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.00024055699759628624}, {"id": 32, "seek": 27012, "start": 277.76, "end": 284.56, "text": " sometimes in application you tend to have like dozens of dependency. I would say perhaps", "tokens": [2171, 294, 3861, 291, 3928, 281, 362, 411, 18431, 295, 33621, 13, 286, 576, 584, 4317], "temperature": 0.0, "avg_logprob": -0.19845996325529075, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.00024055699759628624}, {"id": 33, "seek": 27012, "start": 284.56, "end": 289.44, "text": " look at your code, perhaps you have kind of potato effect where you can have everything", "tokens": [574, 412, 428, 3089, 11, 4317, 291, 362, 733, 295, 7445, 1802, 689, 291, 393, 362, 1203], "temperature": 0.0, "avg_logprob": -0.19845996325529075, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.00024055699759628624}, {"id": 34, "seek": 27012, "start": 289.44, "end": 298.04, "text": " inside one component that try to gather everything. But yeah, not that great for us. This is where", "tokens": [1854, 472, 6542, 300, 853, 281, 5448, 1203, 13, 583, 1338, 11, 406, 300, 869, 337, 505, 13, 639, 307, 689], "temperature": 0.0, "avg_logprob": -0.19845996325529075, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.00024055699759628624}, {"id": 35, "seek": 29804, "start": 298.04, "end": 304.68, "text": " the story starts for us and how we can improve this for the Kotlin developers. And then from", "tokens": [264, 1657, 3719, 337, 505, 293, 577, 321, 393, 3470, 341, 337, 264, 30123, 5045, 8849, 13, 400, 550, 490], "temperature": 0.0, "avg_logprob": -0.18132852424274792, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.000341281876899302}, {"id": 36, "seek": 29804, "start": 304.68, "end": 311.20000000000005, "text": " this really simplistic example here, what we have here is we would like to avoid our", "tokens": [341, 534, 44199, 1365, 510, 11, 437, 321, 362, 510, 307, 321, 576, 411, 281, 5042, 527], "temperature": 0.0, "avg_logprob": -0.18132852424274792, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.000341281876899302}, {"id": 37, "seek": 29804, "start": 311.20000000000005, "end": 318.6, "text": " developer to write manually the GET things. From the idea and the need of GET is that", "tokens": [10754, 281, 2464, 16945, 264, 28091, 721, 13, 3358, 264, 1558, 293, 264, 643, 295, 28091, 307, 300], "temperature": 0.0, "avg_logprob": -0.18132852424274792, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.000341281876899302}, {"id": 38, "seek": 29804, "start": 318.6, "end": 326.40000000000003, "text": " COIN is made to be super efficient. We don't use reflection. We don't use any kind of meta", "tokens": [3002, 1464, 307, 1027, 281, 312, 1687, 7148, 13, 492, 500, 380, 764, 12914, 13, 492, 500, 380, 764, 604, 733, 295, 19616], "temperature": 0.0, "avg_logprob": -0.18132852424274792, "compression_ratio": 1.5733333333333333, "no_speech_prob": 0.000341281876899302}, {"id": 39, "seek": 32640, "start": 326.4, "end": 331.71999999999997, "text": " information over your code. We just run the thing. And then the configuration seems to", "tokens": [1589, 670, 428, 3089, 13, 492, 445, 1190, 264, 551, 13, 400, 550, 264, 11694, 2544, 281], "temperature": 0.0, "avg_logprob": -0.17012362644590182, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.0003143712237942964}, {"id": 40, "seek": 32640, "start": 331.71999999999997, "end": 338.71999999999997, "text": " be a bit manual over there, but then you are manually writing the things for COIN. The", "tokens": [312, 257, 857, 9688, 670, 456, 11, 457, 550, 291, 366, 16945, 3579, 264, 721, 337, 3002, 1464, 13, 440], "temperature": 0.0, "avg_logprob": -0.17012362644590182, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.0003143712237942964}, {"id": 41, "seek": 32640, "start": 338.71999999999997, "end": 346.91999999999996, "text": " new magic way finally to write this with COIN is having a new keyword, single and single", "tokens": [777, 5585, 636, 2721, 281, 2464, 341, 365, 3002, 1464, 307, 1419, 257, 777, 20428, 11, 2167, 293, 2167], "temperature": 0.0, "avg_logprob": -0.17012362644590182, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.0003143712237942964}, {"id": 42, "seek": 32640, "start": 346.91999999999996, "end": 354.23999999999995, "text": " off. That is the same semantic keyword, but it's a new function. And then instead of asking", "tokens": [766, 13, 663, 307, 264, 912, 47982, 20428, 11, 457, 309, 311, 257, 777, 2445, 13, 400, 550, 2602, 295, 3365], "temperature": 0.0, "avg_logprob": -0.17012362644590182, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.0003143712237942964}, {"id": 43, "seek": 35424, "start": 354.24, "end": 360.2, "text": " you a lambda, we want to ask you a function directly. This is why you have the double", "tokens": [291, 257, 13607, 11, 321, 528, 281, 1029, 291, 257, 2445, 3838, 13, 639, 307, 983, 291, 362, 264, 3834], "temperature": 0.0, "avg_logprob": -0.1255757290384044, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.00012485637853387743}, {"id": 44, "seek": 35424, "start": 360.2, "end": 367.08, "text": " semicolon character. And then for us, you don't have to write things with GET. It's", "tokens": [27515, 38780, 2517, 13, 400, 550, 337, 505, 11, 291, 500, 380, 362, 281, 2464, 721, 365, 28091, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.1255757290384044, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.00012485637853387743}, {"id": 45, "seek": 35424, "start": 367.08, "end": 374.36, "text": " still readable, still very easy to use with the COIN semantic, the sense, the meaning", "tokens": [920, 49857, 11, 920, 588, 1858, 281, 764, 365, 264, 3002, 1464, 47982, 11, 264, 2020, 11, 264, 3620], "temperature": 0.0, "avg_logprob": -0.1255757290384044, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.00012485637853387743}, {"id": 46, "seek": 35424, "start": 374.36, "end": 381.2, "text": " of the DSL. And then also, it's consistent with changes in the meaning of, for example,", "tokens": [295, 264, 15816, 43, 13, 400, 550, 611, 11, 309, 311, 8398, 365, 2962, 294, 264, 3620, 295, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.1255757290384044, "compression_ratio": 1.5520361990950227, "no_speech_prob": 0.00012485637853387743}, {"id": 47, "seek": 38120, "start": 381.2, "end": 387.03999999999996, "text": " if you change the constructor of a class, your DSL can break because you didn't update", "tokens": [498, 291, 1319, 264, 47479, 295, 257, 1508, 11, 428, 15816, 43, 393, 1821, 570, 291, 994, 380, 5623], "temperature": 0.0, "avg_logprob": -0.16333108478122288, "compression_ratio": 1.5, "no_speech_prob": 0.00015976835857145488}, {"id": 48, "seek": 38120, "start": 387.03999999999996, "end": 395.92, "text": " it. Then for us, it's a very great improvement to go over a DSL that is using lots of functions,", "tokens": [309, 13, 1396, 337, 505, 11, 309, 311, 257, 588, 869, 10444, 281, 352, 670, 257, 15816, 43, 300, 307, 1228, 3195, 295, 6828, 11], "temperature": 0.0, "avg_logprob": -0.16333108478122288, "compression_ratio": 1.5, "no_speech_prob": 0.00015976835857145488}, {"id": 49, "seek": 38120, "start": 395.92, "end": 403.52, "text": " but finally not a voodoo to write those functions directly as a lambda, but directly with parentheses", "tokens": [457, 2721, 406, 257, 1650, 378, 1986, 281, 2464, 729, 6828, 3838, 382, 257, 13607, 11, 457, 3838, 365, 34153], "temperature": 0.0, "avg_logprob": -0.16333108478122288, "compression_ratio": 1.5, "no_speech_prob": 0.00015976835857145488}, {"id": 50, "seek": 40352, "start": 403.52, "end": 412.32, "text": " and this pointer kind of pointer function stuff. The other side of COIN, of course,", "tokens": [293, 341, 23918, 733, 295, 23918, 2445, 1507, 13, 440, 661, 1252, 295, 3002, 1464, 11, 295, 1164, 11], "temperature": 0.0, "avg_logprob": -0.151957782832059, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00015141342009883374}, {"id": 51, "seek": 40352, "start": 412.32, "end": 418.88, "text": " is having dynamic behavior that are interesting is that you can pass that directly to a definition.", "tokens": [307, 1419, 8546, 5223, 300, 366, 1880, 307, 300, 291, 393, 1320, 300, 3838, 281, 257, 7123, 13], "temperature": 0.0, "avg_logprob": -0.151957782832059, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00015141342009883374}, {"id": 52, "seek": 40352, "start": 418.88, "end": 425.35999999999996, "text": " That means that in this class, we just want an ID. And what we want to do is pass this", "tokens": [663, 1355, 300, 294, 341, 1508, 11, 321, 445, 528, 364, 7348, 13, 400, 437, 321, 528, 281, 360, 307, 1320, 341], "temperature": 0.0, "avg_logprob": -0.151957782832059, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00015141342009883374}, {"id": 53, "seek": 40352, "start": 425.35999999999996, "end": 432.71999999999997, "text": " ID dynamically to this component. COIN offers you the way to do that directly when you inject", "tokens": [7348, 43492, 281, 341, 6542, 13, 3002, 1464, 7736, 291, 264, 636, 281, 360, 300, 3838, 562, 291, 10711], "temperature": 0.0, "avg_logprob": -0.151957782832059, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00015141342009883374}, {"id": 54, "seek": 43272, "start": 432.72, "end": 440.16, "text": " a field by using the function parameters of. And then magically, your data is going into", "tokens": [257, 2519, 538, 1228, 264, 2445, 9834, 295, 13, 400, 550, 39763, 11, 428, 1412, 307, 516, 666], "temperature": 0.0, "avg_logprob": -0.18774503469467163, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00036487317993305624}, {"id": 55, "seek": 43272, "start": 440.16, "end": 447.12, "text": " the graph and then is injected in your definition directly by this function. This is very visual,", "tokens": [264, 4295, 293, 550, 307, 36967, 294, 428, 7123, 3838, 538, 341, 2445, 13, 639, 307, 588, 5056, 11], "temperature": 0.0, "avg_logprob": -0.18774503469467163, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00036487317993305624}, {"id": 56, "seek": 43272, "start": 447.12, "end": 457.96000000000004, "text": " interesting, but then this compact way of having the DSL also is capable of dealing with your", "tokens": [1880, 11, 457, 550, 341, 14679, 636, 295, 1419, 264, 15816, 43, 611, 307, 8189, 295, 6260, 365, 428], "temperature": 0.0, "avg_logprob": -0.18774503469467163, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00036487317993305624}, {"id": 57, "seek": 45796, "start": 457.96, "end": 465.96, "text": " lambda expression. Then you don't need lambda anymore. It's quite interesting because finally,", "tokens": [13607, 6114, 13, 1396, 291, 500, 380, 643, 13607, 3602, 13, 467, 311, 1596, 1880, 570, 2721, 11], "temperature": 0.0, "avg_logprob": -0.1811884503031886, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0003490429080557078}, {"id": 58, "seek": 45796, "start": 465.96, "end": 472.76, "text": " this was this feeling of having COIN as a really compact DSL and compact way to describe everything", "tokens": [341, 390, 341, 2633, 295, 1419, 3002, 1464, 382, 257, 534, 14679, 15816, 43, 293, 14679, 636, 281, 6786, 1203], "temperature": 0.0, "avg_logprob": -0.1811884503031886, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0003490429080557078}, {"id": 59, "seek": 45796, "start": 472.76, "end": 480.2, "text": " without to invade your implication is that now it avoid an annoying side effect of the DSL", "tokens": [1553, 281, 39171, 428, 37814, 307, 300, 586, 309, 5042, 364, 11304, 1252, 1802, 295, 264, 15816, 43], "temperature": 0.0, "avg_logprob": -0.1811884503031886, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0003490429080557078}, {"id": 60, "seek": 45796, "start": 480.2, "end": 486.91999999999996, "text": " and then now you can just write directly your class constructor like that. There's, of course,", "tokens": [293, 550, 586, 291, 393, 445, 2464, 3838, 428, 1508, 47479, 411, 300, 13, 821, 311, 11, 295, 1164, 11], "temperature": 0.0, "avg_logprob": -0.1811884503031886, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0003490429080557078}, {"id": 61, "seek": 48692, "start": 486.92, "end": 495.52000000000004, "text": " some warnings. If you have qualifiers, name parameters, like if you have two components", "tokens": [512, 30009, 13, 759, 291, 362, 4101, 23463, 11, 1315, 9834, 11, 411, 498, 291, 362, 732, 6677], "temperature": 0.0, "avg_logprob": -0.14882278442382812, "compression_ratio": 1.7246376811594204, "no_speech_prob": 0.0001956698833964765}, {"id": 62, "seek": 48692, "start": 495.52000000000004, "end": 500.12, "text": " that have the same type but have not the same implementation, then you want to have the", "tokens": [300, 362, 264, 912, 2010, 457, 362, 406, 264, 912, 11420, 11, 550, 291, 528, 281, 362, 264], "temperature": 0.0, "avg_logprob": -0.14882278442382812, "compression_ratio": 1.7246376811594204, "no_speech_prob": 0.0001956698833964765}, {"id": 63, "seek": 48692, "start": 500.12, "end": 508.44, "text": " different name for them. Then here we can guess which one you want to use directly. Function", "tokens": [819, 1315, 337, 552, 13, 1396, 510, 321, 393, 2041, 597, 472, 291, 528, 281, 764, 3838, 13, 11166, 882], "temperature": 0.0, "avg_logprob": -0.14882278442382812, "compression_ratio": 1.7246376811594204, "no_speech_prob": 0.0001956698833964765}, {"id": 64, "seek": 48692, "start": 508.44, "end": 513.08, "text": " and classes that have default values, we don't know. We don't know if we, if you want to", "tokens": [293, 5359, 300, 362, 7576, 4190, 11, 321, 500, 380, 458, 13, 492, 500, 380, 458, 498, 321, 11, 498, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.14882278442382812, "compression_ratio": 1.7246376811594204, "no_speech_prob": 0.0001956698833964765}, {"id": 65, "seek": 51308, "start": 513.08, "end": 519.64, "text": " use the default values, if you want COIN to use this, then up to you to use again the lambda", "tokens": [764, 264, 7576, 4190, 11, 498, 291, 528, 3002, 1464, 281, 764, 341, 11, 550, 493, 281, 291, 281, 764, 797, 264, 13607], "temperature": 0.0, "avg_logprob": -0.1844604355948312, "compression_ratio": 1.6745283018867925, "no_speech_prob": 0.00027357606450095773}, {"id": 66, "seek": 51308, "start": 519.64, "end": 527.64, "text": " expression thing and also any kind of complex Kotlin expression like builders. Yeah, it's", "tokens": [6114, 551, 293, 611, 604, 733, 295, 3997, 30123, 5045, 6114, 411, 36281, 13, 865, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.1844604355948312, "compression_ratio": 1.6745283018867925, "no_speech_prob": 0.00027357606450095773}, {"id": 67, "seek": 51308, "start": 527.64, "end": 534.2800000000001, "text": " still Kotlin then for you. You can just still use the lambda when those expressions are", "tokens": [920, 30123, 5045, 550, 337, 291, 13, 509, 393, 445, 920, 764, 264, 13607, 562, 729, 15277, 366], "temperature": 0.0, "avg_logprob": -0.1844604355948312, "compression_ratio": 1.6745283018867925, "no_speech_prob": 0.00027357606450095773}, {"id": 68, "seek": 51308, "start": 534.2800000000001, "end": 539.6400000000001, "text": " needed else go with this double semicolon character expression and then just use the", "tokens": [2978, 1646, 352, 365, 341, 3834, 27515, 38780, 2517, 6114, 293, 550, 445, 764, 264], "temperature": 0.0, "avg_logprob": -0.1844604355948312, "compression_ratio": 1.6745283018867925, "no_speech_prob": 0.00027357606450095773}, {"id": 69, "seek": 53964, "start": 539.64, "end": 547.1999999999999, "text": " class and then you're done. Mostly keep the things up going in the easiest way to write", "tokens": [1508, 293, 550, 291, 434, 1096, 13, 29035, 1066, 264, 721, 493, 516, 294, 264, 12889, 636, 281, 2464], "temperature": 0.0, "avg_logprob": -0.17318867946016617, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0001999445230467245}, {"id": 70, "seek": 53964, "start": 547.1999999999999, "end": 555.64, "text": " for you. It's opening a door for us like we are a framework maker, then we try to understand", "tokens": [337, 291, 13, 467, 311, 5193, 257, 2853, 337, 505, 411, 321, 366, 257, 8388, 17127, 11, 550, 321, 853, 281, 1223], "temperature": 0.0, "avg_logprob": -0.17318867946016617, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0001999445230467245}, {"id": 71, "seek": 53964, "start": 555.64, "end": 562.16, "text": " what kind of DSL and options we want to offer you. For example, when you define something", "tokens": [437, 733, 295, 15816, 43, 293, 3956, 321, 528, 281, 2626, 291, 13, 1171, 1365, 11, 562, 291, 6964, 746], "temperature": 0.0, "avg_logprob": -0.17318867946016617, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0001999445230467245}, {"id": 72, "seek": 56216, "start": 562.16, "end": 570.68, "text": " in your DI, you can give it a name, a qualifier. We can say that it's created on start. For", "tokens": [294, 428, 11953, 11, 291, 393, 976, 309, 257, 1315, 11, 257, 4101, 9902, 13, 492, 393, 584, 300, 309, 311, 2942, 322, 722, 13, 1171], "temperature": 0.0, "avg_logprob": -0.13754132998886928, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.00013513477460946888}, {"id": 73, "seek": 56216, "start": 570.68, "end": 574.88, "text": " example, the container is starting, then you can create it on start and also you can say", "tokens": [1365, 11, 264, 10129, 307, 2891, 11, 550, 291, 393, 1884, 309, 322, 722, 293, 611, 291, 393, 584], "temperature": 0.0, "avg_logprob": -0.13754132998886928, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.00013513477460946888}, {"id": 74, "seek": 56216, "start": 574.88, "end": 584.8, "text": " that it's binding another type. All of this is interesting but it's not really easy to", "tokens": [300, 309, 311, 17359, 1071, 2010, 13, 1057, 295, 341, 307, 1880, 457, 309, 311, 406, 534, 1858, 281], "temperature": 0.0, "avg_logprob": -0.13754132998886928, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.00013513477460946888}, {"id": 75, "seek": 56216, "start": 584.8, "end": 590.8399999999999, "text": " extend in terms of keywords and binding. For example, you don't know if there is other", "tokens": [10101, 294, 2115, 295, 21009, 293, 17359, 13, 1171, 1365, 11, 291, 500, 380, 458, 498, 456, 307, 661], "temperature": 0.0, "avg_logprob": -0.13754132998886928, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.00013513477460946888}, {"id": 76, "seek": 59084, "start": 590.84, "end": 596.64, "text": " keyword after the bind because we are already using some lambda, then a function to express", "tokens": [20428, 934, 264, 14786, 570, 321, 366, 1217, 1228, 512, 13607, 11, 550, 257, 2445, 281, 5109], "temperature": 0.0, "avg_logprob": -0.18464253743489584, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.00014116302190814167}, {"id": 77, "seek": 59084, "start": 596.64, "end": 604.2800000000001, "text": " something. Then do we open a new lambda block after the lambda block? It's a bit weird things.", "tokens": [746, 13, 1396, 360, 321, 1269, 257, 777, 13607, 3461, 934, 264, 13607, 3461, 30, 467, 311, 257, 857, 3657, 721, 13], "temperature": 0.0, "avg_logprob": -0.18464253743489584, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.00014116302190814167}, {"id": 78, "seek": 59084, "start": 604.2800000000001, "end": 613.6, "text": " Then with this new DSL, we can open a new way to write this function. That means that", "tokens": [1396, 365, 341, 777, 15816, 43, 11, 321, 393, 1269, 257, 777, 636, 281, 2464, 341, 2445, 13, 663, 1355, 300], "temperature": 0.0, "avg_logprob": -0.18464253743489584, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.00014116302190814167}, {"id": 79, "seek": 59084, "start": 613.6, "end": 620.1600000000001, "text": " we can directly open a lambda theory for this option. Like we have a name, we have created", "tokens": [321, 393, 3838, 1269, 257, 13607, 5261, 337, 341, 3614, 13, 1743, 321, 362, 257, 1315, 11, 321, 362, 2942], "temperature": 0.0, "avg_logprob": -0.18464253743489584, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.00014116302190814167}, {"id": 80, "seek": 62016, "start": 620.16, "end": 628.8399999999999, "text": " a start and we have bind. This is the same word but not implemented in the same DSL style.", "tokens": [257, 722, 293, 321, 362, 14786, 13, 639, 307, 264, 912, 1349, 457, 406, 12270, 294, 264, 912, 15816, 43, 3758, 13], "temperature": 0.0, "avg_logprob": -0.15796831521120938, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00022062625794205815}, {"id": 81, "seek": 62016, "start": 628.8399999999999, "end": 635.36, "text": " Here this is functions directly out of the definition thing. Clearly, you see it's a", "tokens": [1692, 341, 307, 6828, 3838, 484, 295, 264, 7123, 551, 13, 24120, 11, 291, 536, 309, 311, 257], "temperature": 0.0, "avg_logprob": -0.15796831521120938, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00022062625794205815}, {"id": 82, "seek": 62016, "start": 635.36, "end": 641.1999999999999, "text": " bit more readable for us also. It's clearly more maintainable and allowing us to add more", "tokens": [857, 544, 49857, 337, 505, 611, 13, 467, 311, 4448, 544, 6909, 712, 293, 8293, 505, 281, 909, 544], "temperature": 0.0, "avg_logprob": -0.15796831521120938, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00022062625794205815}, {"id": 83, "seek": 62016, "start": 641.1999999999999, "end": 649.68, "text": " features at time. Then it's really interesting to provide a new way to write things and also", "tokens": [4122, 412, 565, 13, 1396, 309, 311, 534, 1880, 281, 2893, 257, 777, 636, 281, 2464, 721, 293, 611], "temperature": 0.0, "avg_logprob": -0.15796831521120938, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00022062625794205815}, {"id": 84, "seek": 64968, "start": 649.68, "end": 655.5999999999999, "text": " feedback of the community is super interesting for us.", "tokens": [5824, 295, 264, 1768, 307, 1687, 1880, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.15169589550464185, "compression_ratio": 1.640625, "no_speech_prob": 0.00030278635676950216}, {"id": 85, "seek": 64968, "start": 655.5999999999999, "end": 662.12, "text": " One of the things also is that coin is really simple and keep the things really simple in", "tokens": [1485, 295, 264, 721, 611, 307, 300, 11464, 307, 534, 2199, 293, 1066, 264, 721, 534, 2199, 294], "temperature": 0.0, "avg_logprob": -0.15169589550464185, "compression_ratio": 1.640625, "no_speech_prob": 0.00030278635676950216}, {"id": 86, "seek": 64968, "start": 662.12, "end": 667.9599999999999, "text": " terms of DSL. That means that you declare anything in terms of module. You can scale", "tokens": [2115, 295, 15816, 43, 13, 663, 1355, 300, 291, 19710, 1340, 294, 2115, 295, 10088, 13, 509, 393, 4373], "temperature": 0.0, "avg_logprob": -0.15169589550464185, "compression_ratio": 1.640625, "no_speech_prob": 0.00030278635676950216}, {"id": 87, "seek": 64968, "start": 667.9599999999999, "end": 672.64, "text": " in the way you want by features, by layers, by everything. Then up to you to organize", "tokens": [294, 264, 636, 291, 528, 538, 4122, 11, 538, 7914, 11, 538, 1203, 13, 1396, 493, 281, 291, 281, 13859], "temperature": 0.0, "avg_logprob": -0.15169589550464185, "compression_ratio": 1.640625, "no_speech_prob": 0.00030278635676950216}, {"id": 88, "seek": 67264, "start": 672.64, "end": 680.4, "text": " yourself. Really, the idea is that the tool shouldn't impact your mind, shouldn't impact", "tokens": [1803, 13, 4083, 11, 264, 1558, 307, 300, 264, 2290, 4659, 380, 2712, 428, 1575, 11, 4659, 380, 2712], "temperature": 0.0, "avg_logprob": -0.17602557640571098, "compression_ratio": 1.6102564102564103, "no_speech_prob": 0.00026120900292880833}, {"id": 89, "seek": 67264, "start": 680.4, "end": 686.68, "text": " your way to build your application. You should even forget that you are using coin. This", "tokens": [428, 636, 281, 1322, 428, 3861, 13, 509, 820, 754, 2870, 300, 291, 366, 1228, 11464, 13, 639], "temperature": 0.0, "avg_logprob": -0.17602557640571098, "compression_ratio": 1.6102564102564103, "no_speech_prob": 0.00026120900292880833}, {"id": 90, "seek": 67264, "start": 686.68, "end": 692.72, "text": " is really important for us to continue in this way.", "tokens": [307, 534, 1021, 337, 505, 281, 2354, 294, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.17602557640571098, "compression_ratio": 1.6102564102564103, "no_speech_prob": 0.00026120900292880833}, {"id": 91, "seek": 67264, "start": 692.72, "end": 701.88, "text": " In coin, the framework never had the need of gathering modules, other by list or by,", "tokens": [682, 11464, 11, 264, 8388, 1128, 632, 264, 643, 295, 13519, 16679, 11, 661, 538, 1329, 420, 538, 11], "temperature": 0.0, "avg_logprob": -0.17602557640571098, "compression_ratio": 1.6102564102564103, "no_speech_prob": 0.00026120900292880833}, {"id": 92, "seek": 70188, "start": 701.88, "end": 709.28, "text": " let's say, something more convenient by a plus operator, but it was really simplistic.", "tokens": [718, 311, 584, 11, 746, 544, 10851, 538, 257, 1804, 12973, 11, 457, 309, 390, 534, 44199, 13], "temperature": 0.0, "avg_logprob": -0.20408302440977932, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.00012638467887882143}, {"id": 93, "seek": 70188, "start": 709.28, "end": 716.4399999999999, "text": " The problem is that with scaling application development, scaling around all the development,", "tokens": [440, 1154, 307, 300, 365, 21589, 3861, 3250, 11, 21589, 926, 439, 264, 3250, 11], "temperature": 0.0, "avg_logprob": -0.20408302440977932, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.00012638467887882143}, {"id": 94, "seek": 70188, "start": 716.4399999999999, "end": 721.6, "text": " we need really strong links between definition, between reusability of this component, this", "tokens": [321, 643, 534, 2068, 6123, 1296, 7123, 11, 1296, 38860, 2310, 295, 341, 6542, 11, 341], "temperature": 0.0, "avg_logprob": -0.20408302440977932, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.00012638467887882143}, {"id": 95, "seek": 72160, "start": 721.6, "end": 732.6, "text": " layer and this stuff. We finally introduce something that can be seen as really simple", "tokens": [4583, 293, 341, 1507, 13, 492, 2721, 5366, 746, 300, 393, 312, 1612, 382, 534, 2199], "temperature": 0.0, "avg_logprob": -0.1548164496987553, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.0002139105781679973}, {"id": 96, "seek": 72160, "start": 732.6, "end": 738.48, "text": " to add as a module is that we add the includes function that help us really understand what", "tokens": [281, 909, 382, 257, 10088, 307, 300, 321, 909, 264, 5974, 2445, 300, 854, 505, 534, 1223, 437], "temperature": 0.0, "avg_logprob": -0.1548164496987553, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.0002139105781679973}, {"id": 97, "seek": 72160, "start": 738.48, "end": 743.64, "text": " kind of module we want to reuse and then flatten everything and optimize your loading at start", "tokens": [733, 295, 10088, 321, 528, 281, 26225, 293, 550, 24183, 1203, 293, 19719, 428, 15114, 412, 722], "temperature": 0.0, "avg_logprob": -0.1548164496987553, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.0002139105781679973}, {"id": 98, "seek": 74364, "start": 743.64, "end": 758.12, "text": " for you. It may be visually, it may be really easy to use, but when finally at the beginning", "tokens": [337, 291, 13, 467, 815, 312, 19622, 11, 309, 815, 312, 534, 1858, 281, 764, 11, 457, 562, 2721, 412, 264, 2863], "temperature": 0.0, "avg_logprob": -0.1215748691558838, "compression_ratio": 1.4108527131782946, "no_speech_prob": 0.00018606522644404322}, {"id": 99, "seek": 74364, "start": 758.12, "end": 765.28, "text": " for coin, you only have a list of modules to play with, it's kind of really hard to reuse", "tokens": [337, 11464, 11, 291, 787, 362, 257, 1329, 295, 16679, 281, 862, 365, 11, 309, 311, 733, 295, 534, 1152, 281, 26225], "temperature": 0.0, "avg_logprob": -0.1215748691558838, "compression_ratio": 1.4108527131782946, "no_speech_prob": 0.00018606522644404322}, {"id": 100, "seek": 76528, "start": 765.28, "end": 774.04, "text": " and really hard to figure out where finally you can build your configuration. Then we", "tokens": [293, 534, 1152, 281, 2573, 484, 689, 2721, 291, 393, 1322, 428, 11694, 13, 1396, 321], "temperature": 0.0, "avg_logprob": -0.19539140145989914, "compression_ratio": 1.8041237113402062, "no_speech_prob": 8.21629146230407e-05}, {"id": 101, "seek": 76528, "start": 774.04, "end": 779.0, "text": " are unlocking a really big door that means that you can begin to reuse parent modules", "tokens": [366, 49620, 257, 534, 955, 2853, 300, 1355, 300, 291, 393, 1841, 281, 26225, 2596, 16679], "temperature": 0.0, "avg_logprob": -0.19539140145989914, "compression_ratio": 1.8041237113402062, "no_speech_prob": 8.21629146230407e-05}, {"id": 102, "seek": 76528, "start": 779.0, "end": 785.72, "text": " with child modules and then you can begin to dive into really, really complex, big and", "tokens": [365, 1440, 16679, 293, 550, 291, 393, 1841, 281, 9192, 666, 534, 11, 534, 3997, 11, 955, 293], "temperature": 0.0, "avg_logprob": -0.19539140145989914, "compression_ratio": 1.8041237113402062, "no_speech_prob": 8.21629146230407e-05}, {"id": 103, "seek": 76528, "start": 785.72, "end": 792.4399999999999, "text": " complex configuration things. Then for you, we are flattening all the graph, we are loading", "tokens": [3997, 11694, 721, 13, 1396, 337, 291, 11, 321, 366, 24183, 278, 439, 264, 4295, 11, 321, 366, 15114], "temperature": 0.0, "avg_logprob": -0.19539140145989914, "compression_ratio": 1.8041237113402062, "no_speech_prob": 8.21629146230407e-05}, {"id": 104, "seek": 79244, "start": 792.44, "end": 802.24, "text": " and optimizing all the stuff for you. Then all those Kotlin multi-platform, all of these", "tokens": [293, 40425, 439, 264, 1507, 337, 291, 13, 1396, 439, 729, 30123, 5045, 4825, 12, 39975, 837, 11, 439, 295, 613], "temperature": 0.0, "avg_logprob": -0.2288469696044922, "compression_ratio": 1.497175141242938, "no_speech_prob": 0.00028087093960493803}, {"id": 105, "seek": 79244, "start": 802.24, "end": 807.5200000000001, "text": " features are Kotlin multi-platform ready and to get those superpowers, sure, you can grab", "tokens": [4122, 366, 30123, 5045, 4825, 12, 39975, 837, 1919, 293, 281, 483, 729, 1687, 47953, 11, 988, 11, 291, 393, 4444], "temperature": 0.0, "avg_logprob": -0.2288469696044922, "compression_ratio": 1.497175141242938, "no_speech_prob": 0.00028087093960493803}, {"id": 106, "seek": 79244, "start": 807.5200000000001, "end": 816.72, "text": " this directly in your Gradle file. It's not 3.2 versions, time is flying by 3.3 and if", "tokens": [341, 3838, 294, 428, 16710, 306, 3991, 13, 467, 311, 406, 805, 13, 17, 9606, 11, 565, 307, 7137, 538, 805, 13, 18, 293, 498], "temperature": 0.0, "avg_logprob": -0.2288469696044922, "compression_ratio": 1.497175141242938, "no_speech_prob": 0.00028087093960493803}, {"id": 107, "seek": 81672, "start": 816.72, "end": 823.76, "text": " you are making a Kotlin multi-platform application, use the coin core module, Gradle module and", "tokens": [291, 366, 1455, 257, 30123, 5045, 4825, 12, 39975, 837, 3861, 11, 764, 264, 11464, 4965, 10088, 11, 16710, 306, 10088, 293], "temperature": 0.0, "avg_logprob": -0.14053082466125488, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.00019502938084769994}, {"id": 108, "seek": 81672, "start": 823.76, "end": 833.32, "text": " if you are using Android, then use the coin Android module version. Coin has been made", "tokens": [498, 291, 366, 1228, 8853, 11, 550, 764, 264, 11464, 8853, 10088, 3037, 13, 39054, 575, 668, 1027], "temperature": 0.0, "avg_logprob": -0.14053082466125488, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.00019502938084769994}, {"id": 109, "seek": 81672, "start": 833.32, "end": 839.32, "text": " to make your development super easy and super simple and this is why your coin configuration", "tokens": [281, 652, 428, 3250, 1687, 1858, 293, 1687, 2199, 293, 341, 307, 983, 428, 11464, 11694], "temperature": 0.0, "avg_logprob": -0.14053082466125488, "compression_ratio": 1.5988372093023255, "no_speech_prob": 0.00019502938084769994}, {"id": 110, "seek": 83932, "start": 839.32, "end": 850.44, "text": " should stay really simple for you. I let you meditate on this quote from Chet Hazer and", "tokens": [820, 1754, 534, 2199, 337, 291, 13, 286, 718, 291, 29989, 322, 341, 6513, 490, 761, 302, 15852, 260, 293], "temperature": 0.0, "avg_logprob": -0.22012859582901, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0002511953643988818}, {"id": 111, "seek": 83932, "start": 850.44, "end": 856.72, "text": " the transition for us is we are trying to use another kind of expression in terms of", "tokens": [264, 6034, 337, 505, 307, 321, 366, 1382, 281, 764, 1071, 733, 295, 6114, 294, 2115, 295], "temperature": 0.0, "avg_logprob": -0.22012859582901, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0002511953643988818}, {"id": 112, "seek": 83932, "start": 856.72, "end": 862.24, "text": " framework is that until now we were really people that pushing a lot for Kotlin DSL,", "tokens": [8388, 307, 300, 1826, 586, 321, 645, 534, 561, 300, 7380, 257, 688, 337, 30123, 5045, 15816, 43, 11], "temperature": 0.0, "avg_logprob": -0.22012859582901, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0002511953643988818}, {"id": 113, "seek": 86224, "start": 862.24, "end": 871.52, "text": " stuff, et cetera. The idea of perhaps introducing annotation is also to not reproduce what you", "tokens": [1507, 11, 1030, 11458, 13, 440, 1558, 295, 4317, 15424, 48654, 307, 611, 281, 406, 29501, 437, 291], "temperature": 0.0, "avg_logprob": -0.19956920260474795, "compression_ratio": 1.5, "no_speech_prob": 0.00023821443028282374}, {"id": 114, "seek": 86224, "start": 871.52, "end": 881.28, "text": " can find in other frameworks like Dagger and other, but really point something, we want", "tokens": [393, 915, 294, 661, 29834, 411, 413, 11062, 293, 661, 11, 457, 534, 935, 746, 11, 321, 528], "temperature": 0.0, "avg_logprob": -0.19956920260474795, "compression_ratio": 1.5, "no_speech_prob": 0.00023821443028282374}, {"id": 115, "seek": 86224, "start": 881.28, "end": 888.92, "text": " to bring value and the problem of also the DSL is that we clearly have some limits over", "tokens": [281, 1565, 2158, 293, 264, 1154, 295, 611, 264, 15816, 43, 307, 300, 321, 4448, 362, 512, 10406, 670], "temperature": 0.0, "avg_logprob": -0.19956920260474795, "compression_ratio": 1.5, "no_speech_prob": 0.00023821443028282374}, {"id": 116, "seek": 88892, "start": 888.92, "end": 894.92, "text": " that. We can't understand really what you are writing, we can't trigger any static", "tokens": [300, 13, 492, 393, 380, 1223, 534, 437, 291, 366, 3579, 11, 321, 393, 380, 7875, 604, 13437], "temperature": 0.0, "avg_logprob": -0.1428384067856263, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.00016584880359005183}, {"id": 117, "seek": 88892, "start": 894.92, "end": 900.8, "text": " analyse of your code directly. That came to magic to the Kotlin compiler plugin. I won't", "tokens": [37840, 295, 428, 3089, 3838, 13, 663, 1361, 281, 5585, 281, 264, 30123, 5045, 31958, 23407, 13, 286, 1582, 380], "temperature": 0.0, "avg_logprob": -0.1428384067856263, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.00016584880359005183}, {"id": 118, "seek": 88892, "start": 900.8, "end": 907.0, "text": " dive into details for that because I believe some people already talk about KSP and everything", "tokens": [9192, 666, 4365, 337, 300, 570, 286, 1697, 512, 561, 1217, 751, 466, 591, 27921, 293, 1203], "temperature": 0.0, "avg_logprob": -0.1428384067856263, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.00016584880359005183}, {"id": 119, "seek": 88892, "start": 907.0, "end": 913.1999999999999, "text": " about that, but let's say that Kotlin compiler is everything we could do for you before we", "tokens": [466, 300, 11, 457, 718, 311, 584, 300, 30123, 5045, 31958, 307, 1203, 321, 727, 360, 337, 291, 949, 321], "temperature": 0.0, "avg_logprob": -0.1428384067856263, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.00016584880359005183}, {"id": 120, "seek": 88892, "start": 913.1999999999999, "end": 918.7199999999999, "text": " are compiling your code in Kotlin. Then we could rewrite things, we could make code generation", "tokens": [366, 715, 4883, 428, 3089, 294, 30123, 5045, 13, 1396, 321, 727, 28132, 721, 11, 321, 727, 652, 3089, 5125], "temperature": 0.0, "avg_logprob": -0.1428384067856263, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.00016584880359005183}, {"id": 121, "seek": 91872, "start": 918.72, "end": 927.12, "text": " of course, analysis, et cetera, et cetera. What we will do with Google KSP is provide", "tokens": [295, 1164, 11, 5215, 11, 1030, 11458, 11, 1030, 11458, 13, 708, 321, 486, 360, 365, 3329, 591, 27921, 307, 2893], "temperature": 0.0, "avg_logprob": -0.1465376615524292, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.0004574677732307464}, {"id": 122, "seek": 91872, "start": 927.12, "end": 934.52, "text": " you a way to avoid the DSL and go really straight forward with annotation and keep all the coin", "tokens": [291, 257, 636, 281, 5042, 264, 15816, 43, 293, 352, 534, 2997, 2128, 365, 48654, 293, 1066, 439, 264, 11464], "temperature": 0.0, "avg_logprob": -0.1465376615524292, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.0004574677732307464}, {"id": 123, "seek": 91872, "start": 934.52, "end": 942.88, "text": " semantics, all the coin API for you. We don't want to reinvent the wheel. What we want to", "tokens": [4361, 45298, 11, 439, 264, 11464, 9362, 337, 291, 13, 492, 500, 380, 528, 281, 33477, 264, 5589, 13, 708, 321, 528, 281], "temperature": 0.0, "avg_logprob": -0.1465376615524292, "compression_ratio": 1.4972375690607735, "no_speech_prob": 0.0004574677732307464}, {"id": 124, "seek": 94288, "start": 942.88, "end": 949.72, "text": " do here is that we want to generate what the DSL you would have to write and then it's", "tokens": [360, 510, 307, 300, 321, 528, 281, 8460, 437, 264, 15816, 43, 291, 576, 362, 281, 2464, 293, 550, 309, 311], "temperature": 0.0, "avg_logprob": -0.13443444086157758, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.00030365074053406715}, {"id": 125, "seek": 94288, "start": 949.72, "end": 955.0, "text": " really, really, really a small piece of code that you would have to write. Then if we can", "tokens": [534, 11, 534, 11, 534, 257, 1359, 2522, 295, 3089, 300, 291, 576, 362, 281, 2464, 13, 1396, 498, 321, 393], "temperature": 0.0, "avg_logprob": -0.13443444086157758, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.00030365074053406715}, {"id": 126, "seek": 94288, "start": 955.0, "end": 960.96, "text": " still avoid you to write things in your code, this is still a good experience for us to", "tokens": [920, 5042, 291, 281, 2464, 721, 294, 428, 3089, 11, 341, 307, 920, 257, 665, 1752, 337, 505, 281], "temperature": 0.0, "avg_logprob": -0.13443444086157758, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.00030365074053406715}, {"id": 127, "seek": 94288, "start": 960.96, "end": 970.32, "text": " let you understand how far we can go. In terms of definitions, what it means is that if you", "tokens": [718, 291, 1223, 577, 1400, 321, 393, 352, 13, 682, 2115, 295, 21988, 11, 437, 309, 1355, 307, 300, 498, 291], "temperature": 0.0, "avg_logprob": -0.13443444086157758, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.00030365074053406715}, {"id": 128, "seek": 97032, "start": 970.32, "end": 976.6400000000001, "text": " have a class, then you can just add directly an annotation. You see that this is the same", "tokens": [362, 257, 1508, 11, 550, 291, 393, 445, 909, 3838, 364, 48654, 13, 509, 536, 300, 341, 307, 264, 912], "temperature": 0.0, "avg_logprob": -0.18265095211210705, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.00013138043868821114}, {"id": 129, "seek": 97032, "start": 976.6400000000001, "end": 985.6400000000001, "text": " keyword we have the add single on it. Then you see that we are extending an interface.", "tokens": [20428, 321, 362, 264, 909, 2167, 322, 309, 13, 1396, 291, 536, 300, 321, 366, 24360, 364, 9226, 13], "temperature": 0.0, "avg_logprob": -0.18265095211210705, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.00013138043868821114}, {"id": 130, "seek": 97032, "start": 985.6400000000001, "end": 991.6, "text": " The idea is that with just one annotation, we will understand that this class is having", "tokens": [440, 1558, 307, 300, 365, 445, 472, 48654, 11, 321, 486, 1223, 300, 341, 1508, 307, 1419], "temperature": 0.0, "avg_logprob": -0.18265095211210705, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.00013138043868821114}, {"id": 131, "seek": 97032, "start": 991.6, "end": 998.5600000000001, "text": " a constructor and then we will also bind directly the type migrate history. The idea is that", "tokens": [257, 47479, 293, 550, 321, 486, 611, 14786, 3838, 264, 2010, 31821, 2503, 13, 440, 1558, 307, 300], "temperature": 0.0, "avg_logprob": -0.18265095211210705, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.00013138043868821114}, {"id": 132, "seek": 99856, "start": 998.56, "end": 1004.0, "text": " we allow you to have, not to type anything in this. We detect things for you. We detect", "tokens": [321, 2089, 291, 281, 362, 11, 406, 281, 2010, 1340, 294, 341, 13, 492, 5531, 721, 337, 291, 13, 492, 5531], "temperature": 0.0, "avg_logprob": -0.18608137108813758, "compression_ratio": 1.7621359223300972, "no_speech_prob": 0.00020548084285110235}, {"id": 133, "seek": 99856, "start": 1004.0, "end": 1010.0799999999999, "text": " the code and then we can say, okay, coin, just write this definition for my repository", "tokens": [264, 3089, 293, 550, 321, 393, 584, 11, 1392, 11, 11464, 11, 445, 2464, 341, 7123, 337, 452, 25841], "temperature": 0.0, "avg_logprob": -0.18608137108813758, "compression_ratio": 1.7621359223300972, "no_speech_prob": 0.00020548084285110235}, {"id": 134, "seek": 99856, "start": 1010.0799999999999, "end": 1019.8, "text": " type with the implementation of my repository. We have another component. We target add factory.", "tokens": [2010, 365, 264, 11420, 295, 452, 25841, 13, 492, 362, 1071, 6542, 13, 492, 3779, 909, 9265, 13], "temperature": 0.0, "avg_logprob": -0.18608137108813758, "compression_ratio": 1.7621359223300972, "no_speech_prob": 0.00020548084285110235}, {"id": 135, "seek": 99856, "start": 1019.8, "end": 1025.96, "text": " Factory is another keyword of coin. It's the opposite of a single ton. Factory is something", "tokens": [36868, 307, 1071, 20428, 295, 11464, 13, 467, 311, 264, 6182, 295, 257, 2167, 2952, 13, 36868, 307, 746], "temperature": 0.0, "avg_logprob": -0.18608137108813758, "compression_ratio": 1.7621359223300972, "no_speech_prob": 0.00020548084285110235}, {"id": 136, "seek": 102596, "start": 1025.96, "end": 1031.92, "text": " you want to create. Each time you want to ask a definition for that. Then if you want", "tokens": [291, 528, 281, 1884, 13, 6947, 565, 291, 528, 281, 1029, 257, 7123, 337, 300, 13, 1396, 498, 291, 528], "temperature": 0.0, "avg_logprob": -0.14046875448787913, "compression_ratio": 1.6945812807881773, "no_speech_prob": 0.00021480121358763427}, {"id": 137, "seek": 102596, "start": 1031.92, "end": 1037.8400000000001, "text": " an instance of my presenter directly, you just tag it add factory and then coin will", "tokens": [364, 5197, 295, 452, 35594, 3838, 11, 291, 445, 6162, 309, 909, 9265, 293, 550, 11464, 486], "temperature": 0.0, "avg_logprob": -0.14046875448787913, "compression_ratio": 1.6945812807881773, "no_speech_prob": 0.00021480121358763427}, {"id": 138, "seek": 102596, "start": 1037.8400000000001, "end": 1044.8400000000001, "text": " generate the DSL and then coin will manage to go and get the definition for you. You", "tokens": [8460, 264, 15816, 43, 293, 550, 11464, 486, 3067, 281, 352, 293, 483, 264, 7123, 337, 291, 13, 509], "temperature": 0.0, "avg_logprob": -0.14046875448787913, "compression_ratio": 1.6945812807881773, "no_speech_prob": 0.00021480121358763427}, {"id": 139, "seek": 102596, "start": 1044.8400000000001, "end": 1050.96, "text": " see finally you don't really care about the DSL and the complexity behind that. Finally,", "tokens": [536, 2721, 291, 500, 380, 534, 1127, 466, 264, 15816, 43, 293, 264, 14024, 2261, 300, 13, 6288, 11], "temperature": 0.0, "avg_logprob": -0.14046875448787913, "compression_ratio": 1.6945812807881773, "no_speech_prob": 0.00021480121358763427}, {"id": 140, "seek": 105096, "start": 1050.96, "end": 1058.76, "text": " we can detect many, many things for you. Finally, for those who are making Android development,", "tokens": [321, 393, 5531, 867, 11, 867, 721, 337, 291, 13, 6288, 11, 337, 729, 567, 366, 1455, 8853, 3250, 11], "temperature": 0.0, "avg_logprob": -0.14026454557855444, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.00010566974378889427}, {"id": 141, "seek": 105096, "start": 1058.76, "end": 1066.1200000000001, "text": " we have an annotation dedicated for coin that lets you understand that. Let coin understand", "tokens": [321, 362, 364, 48654, 8374, 337, 11464, 300, 6653, 291, 1223, 300, 13, 961, 11464, 1223], "temperature": 0.0, "avg_logprob": -0.14026454557855444, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.00010566974378889427}, {"id": 142, "seek": 105096, "start": 1066.1200000000001, "end": 1073.1200000000001, "text": " that. We will create an instance of view model. Then we are reaching all the dependencies.", "tokens": [300, 13, 492, 486, 1884, 364, 5197, 295, 1910, 2316, 13, 1396, 321, 366, 9906, 439, 264, 36606, 13], "temperature": 0.0, "avg_logprob": -0.14026454557855444, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.00010566974378889427}, {"id": 143, "seek": 105096, "start": 1073.1200000000001, "end": 1077.44, "text": " We understand that this is a view model and then we will bind everything for you. You", "tokens": [492, 1223, 300, 341, 307, 257, 1910, 2316, 293, 550, 321, 486, 14786, 1203, 337, 291, 13, 509], "temperature": 0.0, "avg_logprob": -0.14026454557855444, "compression_ratio": 1.7089201877934272, "no_speech_prob": 0.00010566974378889427}, {"id": 144, "seek": 107744, "start": 1077.44, "end": 1084.56, "text": " see that here we don't speak about DSL. It's just that we tag something here. The idea", "tokens": [536, 300, 510, 321, 500, 380, 1710, 466, 15816, 43, 13, 467, 311, 445, 300, 321, 6162, 746, 510, 13, 440, 1558], "temperature": 0.0, "avg_logprob": -0.14366682676168588, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.0004794851702172309}, {"id": 145, "seek": 107744, "start": 1084.56, "end": 1090.16, "text": " is that we can have automatic injection and binding. We can detect everything, all you", "tokens": [307, 300, 321, 393, 362, 12509, 22873, 293, 17359, 13, 492, 393, 5531, 1203, 11, 439, 291], "temperature": 0.0, "avg_logprob": -0.14366682676168588, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.0004794851702172309}, {"id": 146, "seek": 107744, "start": 1090.16, "end": 1095.88, "text": " need here by default. We can deal with new label type. That means that if you use the", "tokens": [643, 510, 538, 7576, 13, 492, 393, 2028, 365, 777, 7645, 2010, 13, 663, 1355, 300, 498, 291, 764, 264], "temperature": 0.0, "avg_logprob": -0.14366682676168588, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.0004794851702172309}, {"id": 147, "seek": 107744, "start": 1095.88, "end": 1100.48, "text": " question mark in parameter construction, then we will understand that this is something", "tokens": [1168, 1491, 294, 13075, 6435, 11, 550, 321, 486, 1223, 300, 341, 307, 746], "temperature": 0.0, "avg_logprob": -0.14366682676168588, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.0004794851702172309}, {"id": 148, "seek": 107744, "start": 1100.48, "end": 1105.8400000000001, "text": " that can be new label and then for you, it's completely transparent and then it will be", "tokens": [300, 393, 312, 777, 7645, 293, 550, 337, 291, 11, 309, 311, 2584, 12737, 293, 550, 309, 486, 312], "temperature": 0.0, "avg_logprob": -0.14366682676168588, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.0004794851702172309}, {"id": 149, "seek": 110584, "start": 1105.84, "end": 1117.32, "text": " taken into account. Also, as you have seen, we can tag a parameter in a function or in", "tokens": [2726, 666, 2696, 13, 2743, 11, 382, 291, 362, 1612, 11, 321, 393, 6162, 257, 13075, 294, 257, 2445, 420, 294], "temperature": 0.0, "avg_logprob": -0.18085655799278846, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0003087662626057863}, {"id": 150, "seek": 110584, "start": 1117.32, "end": 1123.6, "text": " a constructor as injected param. That means it will be something that come from the application", "tokens": [257, 47479, 382, 36967, 6220, 13, 663, 1355, 309, 486, 312, 746, 300, 808, 490, 264, 3861], "temperature": 0.0, "avg_logprob": -0.18085655799278846, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0003087662626057863}, {"id": 151, "seek": 110584, "start": 1123.6, "end": 1130.76, "text": " that is sending a data, a dynamic data directly to the definition. Then the natural way to", "tokens": [300, 307, 7750, 257, 1412, 11, 257, 8546, 1412, 3838, 281, 264, 7123, 13, 1396, 264, 3303, 636, 281], "temperature": 0.0, "avg_logprob": -0.18085655799278846, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0003087662626057863}, {"id": 152, "seek": 113076, "start": 1130.76, "end": 1138.32, "text": " do that will be to tag a parameter as injected param. You see that finally, the experience", "tokens": [360, 300, 486, 312, 281, 6162, 257, 13075, 382, 36967, 6220, 13, 509, 536, 300, 2721, 11, 264, 1752], "temperature": 0.0, "avg_logprob": -0.17193294973934398, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.0001161522523034364}, {"id": 153, "seek": 113076, "start": 1138.32, "end": 1145.44, "text": " for us is to try really to let you write the minimum and the minimum things for you. Like", "tokens": [337, 505, 307, 281, 853, 534, 281, 718, 291, 2464, 264, 7285, 293, 264, 7285, 721, 337, 291, 13, 1743], "temperature": 0.0, "avg_logprob": -0.17193294973934398, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.0001161522523034364}, {"id": 154, "seek": 113076, "start": 1145.44, "end": 1153.64, "text": " for example, with dagger hit, we still have lots of things to specify. For example, in", "tokens": [337, 1365, 11, 365, 36972, 2045, 11, 321, 920, 362, 3195, 295, 721, 281, 16500, 13, 1171, 1365, 11, 294], "temperature": 0.0, "avg_logprob": -0.17193294973934398, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.0001161522523034364}, {"id": 155, "seek": 113076, "start": 1153.64, "end": 1158.56, "text": " the spring framework, this is the kind of opposite because a spring is scanning everything", "tokens": [264, 5587, 8388, 11, 341, 307, 264, 733, 295, 6182, 570, 257, 5587, 307, 27019, 1203], "temperature": 0.0, "avg_logprob": -0.17193294973934398, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.0001161522523034364}, {"id": 156, "seek": 115856, "start": 1158.56, "end": 1164.84, "text": " for you and making all the class pass analysis for you. Then we are in between where finally", "tokens": [337, 291, 293, 1455, 439, 264, 1508, 1320, 5215, 337, 291, 13, 1396, 321, 366, 294, 1296, 689, 2721], "temperature": 0.0, "avg_logprob": -0.18158480178478154, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.00021797970111947507}, {"id": 157, "seek": 115856, "start": 1164.84, "end": 1174.96, "text": " we allow you to just tag your code with just a bunch of annotations and then you are ready", "tokens": [321, 2089, 291, 281, 445, 6162, 428, 3089, 365, 445, 257, 3840, 295, 25339, 763, 293, 550, 291, 366, 1919], "temperature": 0.0, "avg_logprob": -0.18158480178478154, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.00021797970111947507}, {"id": 158, "seek": 115856, "start": 1174.96, "end": 1182.8799999999999, "text": " to go and you can manage any kind of tip-off injection with your constructor things.", "tokens": [281, 352, 293, 291, 393, 3067, 604, 733, 295, 4125, 12, 4506, 22873, 365, 428, 47479, 721, 13], "temperature": 0.0, "avg_logprob": -0.18158480178478154, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.00021797970111947507}, {"id": 159, "seek": 115856, "start": 1182.8799999999999, "end": 1187.08, "text": " The idea behind of the magic is that just you use annotations and you are ready to use", "tokens": [440, 1558, 2261, 295, 264, 5585, 307, 300, 445, 291, 764, 25339, 763, 293, 291, 366, 1919, 281, 764], "temperature": 0.0, "avg_logprob": -0.18158480178478154, "compression_ratio": 1.7661691542288558, "no_speech_prob": 0.00021797970111947507}, {"id": 160, "seek": 118708, "start": 1187.08, "end": 1194.36, "text": " the standard coin API is that you can use bi-inject or bi-view model field injection", "tokens": [264, 3832, 11464, 9362, 307, 300, 291, 393, 764, 3228, 12, 259, 1020, 420, 3228, 12, 1759, 2316, 2519, 22873], "temperature": 0.0, "avg_logprob": -0.23911626636981964, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.000463891658000648}, {"id": 161, "seek": 118708, "start": 1194.36, "end": 1202.3999999999999, "text": " style here. Then we don't break the experience of people that are already using a coin and", "tokens": [3758, 510, 13, 1396, 321, 500, 380, 1821, 264, 1752, 295, 561, 300, 366, 1217, 1228, 257, 11464, 293], "temperature": 0.0, "avg_logprob": -0.23911626636981964, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.000463891658000648}, {"id": 162, "seek": 118708, "start": 1202.3999999999999, "end": 1208.24, "text": " then we continue, then we allow people that are using annotations directly to use those", "tokens": [550, 321, 2354, 11, 550, 321, 2089, 561, 300, 366, 1228, 25339, 763, 3838, 281, 764, 729], "temperature": 0.0, "avg_logprob": -0.23911626636981964, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.000463891658000648}, {"id": 163, "seek": 120824, "start": 1208.24, "end": 1217.52, "text": " extensions as regular extensions. For the modules, then for definition, we just", "tokens": [25129, 382, 3890, 25129, 13, 1171, 264, 16679, 11, 550, 337, 7123, 11, 321, 445], "temperature": 0.0, "avg_logprob": -0.22174409719613883, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.0002686598163563758}, {"id": 164, "seek": 120824, "start": 1217.52, "end": 1224.24, "text": " tag annotations. We annotate classes, but for modules, we can't directly tag something", "tokens": [6162, 25339, 763, 13, 492, 25339, 473, 5359, 11, 457, 337, 16679, 11, 321, 393, 380, 3838, 6162, 746], "temperature": 0.0, "avg_logprob": -0.22174409719613883, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.0002686598163563758}, {"id": 165, "seek": 120824, "start": 1224.24, "end": 1232.16, "text": " in the DSL. How works KSP is that we are scanning for many classes or functions, then it will", "tokens": [294, 264, 15816, 43, 13, 1012, 1985, 591, 27921, 307, 300, 321, 366, 27019, 337, 867, 5359, 420, 6828, 11, 550, 309, 486], "temperature": 0.0, "avg_logprob": -0.22174409719613883, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.0002686598163563758}, {"id": 166, "seek": 123216, "start": 1232.16, "end": 1238.3200000000002, "text": " be kind of hard to tag around the DSL. The proposal for now is to work directly with", "tokens": [312, 733, 295, 1152, 281, 6162, 926, 264, 15816, 43, 13, 440, 11494, 337, 586, 307, 281, 589, 3838, 365], "temperature": 0.0, "avg_logprob": -0.20699923688715155, "compression_ratio": 1.7614213197969544, "no_speech_prob": 7.9683268268127e-05}, {"id": 167, "seek": 123216, "start": 1238.3200000000002, "end": 1245.44, "text": " class module to let you have an organization module for that. Then how you do that, you", "tokens": [1508, 10088, 281, 718, 291, 362, 364, 4475, 10088, 337, 300, 13, 1396, 577, 291, 360, 300, 11, 291], "temperature": 0.0, "avg_logprob": -0.20699923688715155, "compression_ratio": 1.7614213197969544, "no_speech_prob": 7.9683268268127e-05}, {"id": 168, "seek": 123216, "start": 1245.44, "end": 1250.2, "text": " declare a module and that's it. You have a module, you have a hard module and the idea", "tokens": [19710, 257, 10088, 293, 300, 311, 309, 13, 509, 362, 257, 10088, 11, 291, 362, 257, 1152, 10088, 293, 264, 1558], "temperature": 0.0, "avg_logprob": -0.20699923688715155, "compression_ratio": 1.7614213197969544, "no_speech_prob": 7.9683268268127e-05}, {"id": 169, "seek": 123216, "start": 1250.2, "end": 1255.3200000000002, "text": " is that you put add component scan and then we will scan any kind of component that has", "tokens": [307, 300, 291, 829, 909, 6542, 11049, 293, 550, 321, 486, 11049, 604, 733, 295, 6542, 300, 575], "temperature": 0.0, "avg_logprob": -0.20699923688715155, "compression_ratio": 1.7614213197969544, "no_speech_prob": 7.9683268268127e-05}, {"id": 170, "seek": 125532, "start": 1255.32, "end": 1265.2, "text": " been tagged in your application by package. Then it's really specific in terms of scan", "tokens": [668, 40239, 294, 428, 3861, 538, 7372, 13, 1396, 309, 311, 534, 2685, 294, 2115, 295, 11049], "temperature": 0.0, "avg_logprob": -0.19388294219970703, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0001962206733878702}, {"id": 171, "seek": 125532, "start": 1265.2, "end": 1270.72, "text": " then that means that you can really filter by package, filter by layout, filter by features,", "tokens": [550, 300, 1355, 300, 291, 393, 534, 6608, 538, 7372, 11, 6608, 538, 13333, 11, 6608, 538, 4122, 11], "temperature": 0.0, "avg_logprob": -0.19388294219970703, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0001962206733878702}, {"id": 172, "seek": 125532, "start": 1270.72, "end": 1277.48, "text": " how you want to organize yourself and then you just have this annotation here. Also,", "tokens": [577, 291, 528, 281, 13859, 1803, 293, 550, 291, 445, 362, 341, 48654, 510, 13, 2743, 11], "temperature": 0.0, "avg_logprob": -0.19388294219970703, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0001962206733878702}, {"id": 173, "seek": 125532, "start": 1277.48, "end": 1283.8799999999999, "text": " if you want, you can declare things directly inside a function. We will understand that", "tokens": [498, 291, 528, 11, 291, 393, 19710, 721, 3838, 1854, 257, 2445, 13, 492, 486, 1223, 300], "temperature": 0.0, "avg_logprob": -0.19388294219970703, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.0001962206733878702}, {"id": 174, "seek": 128388, "start": 1283.88, "end": 1290.1200000000001, "text": " if you tag something inside your module class, it will be a definition that we can bind for", "tokens": [498, 291, 6162, 746, 1854, 428, 10088, 1508, 11, 309, 486, 312, 257, 7123, 300, 321, 393, 14786, 337], "temperature": 0.0, "avg_logprob": -0.1393657244168795, "compression_ratio": 1.510989010989011, "no_speech_prob": 0.00012948582298122346}, {"id": 175, "seek": 128388, "start": 1290.1200000000001, "end": 1298.0800000000002, "text": " you directly. You see it's still very, very natural to use and really super compact. Then", "tokens": [291, 3838, 13, 509, 536, 309, 311, 920, 588, 11, 588, 3303, 281, 764, 293, 534, 1687, 14679, 13, 1396], "temperature": 0.0, "avg_logprob": -0.1393657244168795, "compression_ratio": 1.510989010989011, "no_speech_prob": 0.00012948582298122346}, {"id": 176, "seek": 128388, "start": 1298.0800000000002, "end": 1304.7600000000002, "text": " the idea is for us to let you go super fast for your dependency injection and keep everything", "tokens": [264, 1558, 307, 337, 505, 281, 718, 291, 352, 1687, 2370, 337, 428, 33621, 22873, 293, 1066, 1203], "temperature": 0.0, "avg_logprob": -0.1393657244168795, "compression_ratio": 1.510989010989011, "no_speech_prob": 0.00012948582298122346}, {"id": 177, "seek": 130476, "start": 1304.76, "end": 1314.44, "text": " aside for you. Of course, between two modules, you can have the includes of other modules", "tokens": [7359, 337, 291, 13, 2720, 1164, 11, 1296, 732, 16679, 11, 291, 393, 362, 264, 5974, 295, 661, 16679], "temperature": 0.0, "avg_logprob": -0.14939460754394532, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.00025858101435005665}, {"id": 178, "seek": 130476, "start": 1314.44, "end": 1320.64, "text": " that will generate the right things for you. That means that it will use the includes function", "tokens": [300, 486, 8460, 264, 558, 721, 337, 291, 13, 663, 1355, 300, 309, 486, 764, 264, 5974, 2445], "temperature": 0.0, "avg_logprob": -0.14939460754394532, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.00025858101435005665}, {"id": 179, "seek": 130476, "start": 1320.64, "end": 1329.6, "text": " that has been introduced just above in the new coin DSL site. Then we just need to start", "tokens": [300, 575, 668, 7268, 445, 3673, 294, 264, 777, 11464, 15816, 43, 3621, 13, 1396, 321, 445, 643, 281, 722], "temperature": 0.0, "avg_logprob": -0.14939460754394532, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.00025858101435005665}, {"id": 180, "seek": 132960, "start": 1329.6, "end": 1336.8, "text": " coin. That means that you have your module, you have a function where you want to start", "tokens": [11464, 13, 663, 1355, 300, 291, 362, 428, 10088, 11, 291, 362, 257, 2445, 689, 291, 528, 281, 722], "temperature": 0.0, "avg_logprob": -0.1564575433731079, "compression_ratio": 1.7438423645320198, "no_speech_prob": 0.0002674898714758456}, {"id": 181, "seek": 132960, "start": 1336.8, "end": 1342.3999999999999, "text": " to start coin and then the idea is we just run the module with the new instance of my", "tokens": [281, 722, 11464, 293, 550, 264, 1558, 307, 321, 445, 1190, 264, 10088, 365, 264, 777, 5197, 295, 452], "temperature": 0.0, "avg_logprob": -0.1564575433731079, "compression_ratio": 1.7438423645320198, "no_speech_prob": 0.0002674898714758456}, {"id": 182, "seek": 132960, "start": 1342.3999999999999, "end": 1350.8799999999999, "text": " module here. The only thing we want to generate for you is that it's just a simple extension", "tokens": [10088, 510, 13, 440, 787, 551, 321, 528, 281, 8460, 337, 291, 307, 300, 309, 311, 445, 257, 2199, 10320], "temperature": 0.0, "avg_logprob": -0.1564575433731079, "compression_ratio": 1.7438423645320198, "no_speech_prob": 0.0002674898714758456}, {"id": 183, "seek": 132960, "start": 1350.8799999999999, "end": 1357.8, "text": " that will generate the DSL and this is where we just want to make boundaries for us. We", "tokens": [300, 486, 8460, 264, 15816, 43, 293, 341, 307, 689, 321, 445, 528, 281, 652, 13180, 337, 505, 13, 492], "temperature": 0.0, "avg_logprob": -0.1564575433731079, "compression_ratio": 1.7438423645320198, "no_speech_prob": 0.0002674898714758456}, {"id": 184, "seek": 135780, "start": 1357.8, "end": 1362.08, "text": " don't want to reinvent the wheel. We don't want to reinvent things to generate code over", "tokens": [500, 380, 528, 281, 33477, 264, 5589, 13, 492, 500, 380, 528, 281, 33477, 721, 281, 8460, 3089, 670], "temperature": 0.0, "avg_logprob": -0.12644303286517108, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.00024113075050991029}, {"id": 185, "seek": 135780, "start": 1362.08, "end": 1368.56, "text": " code over code. We want to keep coin as it is, something that is super efficient to make", "tokens": [3089, 670, 3089, 13, 492, 528, 281, 1066, 11464, 382, 309, 307, 11, 746, 300, 307, 1687, 7148, 281, 652], "temperature": 0.0, "avg_logprob": -0.12644303286517108, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.00024113075050991029}, {"id": 186, "seek": 135780, "start": 1368.56, "end": 1375.3999999999999, "text": " dependency injection but allow you to use the annotations. This is why with such approach,", "tokens": [33621, 22873, 457, 2089, 291, 281, 764, 264, 25339, 763, 13, 639, 307, 983, 365, 1270, 3109, 11], "temperature": 0.0, "avg_logprob": -0.12644303286517108, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.00024113075050991029}, {"id": 187, "seek": 135780, "start": 1375.3999999999999, "end": 1380.36, "text": " you can mix both. You don't have to write a new project with annotations. You can already", "tokens": [291, 393, 2890, 1293, 13, 509, 500, 380, 362, 281, 2464, 257, 777, 1716, 365, 25339, 763, 13, 509, 393, 1217], "temperature": 0.0, "avg_logprob": -0.12644303286517108, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.00024113075050991029}, {"id": 188, "seek": 135780, "start": 1380.36, "end": 1386.36, "text": " use coin annotations inside your project and test with it. The only thing you have to", "tokens": [764, 11464, 25339, 763, 1854, 428, 1716, 293, 1500, 365, 309, 13, 440, 787, 551, 291, 362, 281], "temperature": 0.0, "avg_logprob": -0.12644303286517108, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.00024113075050991029}, {"id": 189, "seek": 138636, "start": 1386.36, "end": 1392.8, "text": " care is be sure to have the right import. That means that we are generating all your", "tokens": [1127, 307, 312, 988, 281, 362, 264, 558, 974, 13, 663, 1355, 300, 321, 366, 17746, 439, 428], "temperature": 0.0, "avg_logprob": -0.19585726477883078, "compression_ratio": 1.6859903381642511, "no_speech_prob": 0.00015041751612443477}, {"id": 190, "seek": 138636, "start": 1392.8, "end": 1402.6, "text": " coin contents inside our coin.ksp.generated. Then you can use both DSL module, class modules", "tokens": [11464, 15768, 1854, 527, 11464, 13, 74, 4952, 13, 21848, 770, 13, 1396, 291, 393, 764, 1293, 15816, 43, 10088, 11, 1508, 16679], "temperature": 0.0, "avg_logprob": -0.19585726477883078, "compression_ratio": 1.6859903381642511, "no_speech_prob": 0.00015041751612443477}, {"id": 191, "seek": 138636, "start": 1402.6, "end": 1407.8799999999999, "text": " annotated and everything, everything. Then up to you to express yourself and use the", "tokens": [25339, 770, 293, 1203, 11, 1203, 13, 1396, 493, 281, 291, 281, 5109, 1803, 293, 764, 264], "temperature": 0.0, "avg_logprob": -0.19585726477883078, "compression_ratio": 1.6859903381642511, "no_speech_prob": 0.00015041751612443477}, {"id": 192, "seek": 138636, "start": 1407.8799999999999, "end": 1415.0, "text": " right tools that is great for you. What is interesting for us is that we don't want to", "tokens": [558, 3873, 300, 307, 869, 337, 291, 13, 708, 307, 1880, 337, 505, 307, 300, 321, 500, 380, 528, 281], "temperature": 0.0, "avg_logprob": -0.19585726477883078, "compression_ratio": 1.6859903381642511, "no_speech_prob": 0.00015041751612443477}, {"id": 193, "seek": 141500, "start": 1415.0, "end": 1420.96, "text": " reproduce what we have seen and why we have made coin is that we don't want to expose", "tokens": [29501, 437, 321, 362, 1612, 293, 983, 321, 362, 1027, 11464, 307, 300, 321, 500, 380, 528, 281, 19219], "temperature": 0.0, "avg_logprob": -0.15613155137924922, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00025939143961295485}, {"id": 194, "seek": 141500, "start": 1420.96, "end": 1426.72, "text": " you to tools that can take dozens of minutes to recompile your project. The idea is that", "tokens": [291, 281, 3873, 300, 393, 747, 18431, 295, 2077, 281, 48000, 794, 428, 1716, 13, 440, 1558, 307, 300], "temperature": 0.0, "avg_logprob": -0.15613155137924922, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00025939143961295485}, {"id": 195, "seek": 141500, "start": 1426.72, "end": 1433.68, "text": " it should run for thousands of components really quick. The other good thing of that", "tokens": [309, 820, 1190, 337, 5383, 295, 6677, 534, 1702, 13, 440, 661, 665, 551, 295, 300], "temperature": 0.0, "avg_logprob": -0.15613155137924922, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00025939143961295485}, {"id": 196, "seek": 141500, "start": 1433.68, "end": 1438.8, "text": " is that it's cutlin behind the scene, it's cutlin generated and this is something you", "tokens": [307, 300, 309, 311, 1723, 5045, 2261, 264, 4145, 11, 309, 311, 1723, 5045, 10833, 293, 341, 307, 746, 291], "temperature": 0.0, "avg_logprob": -0.15613155137924922, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00025939143961295485}, {"id": 197, "seek": 143880, "start": 1438.8, "end": 1447.6, "text": " can clearly debug step by step if you want. Up to you, that means that we don't want", "tokens": [393, 4448, 24083, 1823, 538, 1823, 498, 291, 528, 13, 5858, 281, 291, 11, 300, 1355, 300, 321, 500, 380, 528], "temperature": 0.0, "avg_logprob": -0.17736329117866412, "compression_ratio": 1.488888888888889, "no_speech_prob": 0.0005718643078580499}, {"id": 198, "seek": 143880, "start": 1447.6, "end": 1453.96, "text": " to replace DSL by annotations. It's another way to express yourself. Ksp is a good technology", "tokens": [281, 7406, 15816, 43, 538, 25339, 763, 13, 467, 311, 1071, 636, 281, 5109, 1803, 13, 591, 4952, 307, 257, 665, 2899], "temperature": 0.0, "avg_logprob": -0.17736329117866412, "compression_ratio": 1.488888888888889, "no_speech_prob": 0.0005718643078580499}, {"id": 199, "seek": 143880, "start": 1453.96, "end": 1460.96, "text": " for us to help you write less, less quotes, less bugs. Then up to you to choose the right", "tokens": [337, 505, 281, 854, 291, 2464, 1570, 11, 1570, 19963, 11, 1570, 15120, 13, 1396, 493, 281, 291, 281, 2826, 264, 558], "temperature": 0.0, "avg_logprob": -0.17736329117866412, "compression_ratio": 1.488888888888889, "no_speech_prob": 0.0005718643078580499}, {"id": 200, "seek": 146096, "start": 1460.96, "end": 1469.0, "text": " tools and the right solution to make your app structure. To finish then about coin and", "tokens": [3873, 293, 264, 558, 3827, 281, 652, 428, 724, 3877, 13, 1407, 2413, 550, 466, 11464, 293], "temperature": 0.0, "avg_logprob": -0.3158022467769794, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.0002745692909229547}, {"id": 201, "seek": 146096, "start": 1469.0, "end": 1476.28, "text": " some improvement of this year, what's next? If you want to throw now about coin, we have", "tokens": [512, 10444, 295, 341, 1064, 11, 437, 311, 958, 30, 759, 291, 528, 281, 3507, 586, 466, 11464, 11, 321, 362], "temperature": 0.0, "avg_logprob": -0.3158022467769794, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.0002745692909229547}, {"id": 202, "seek": 146096, "start": 1476.28, "end": 1482.96, "text": " many tutorials on many kind of cutlin application from a cutlin, cutlin multiplatform and Android", "tokens": [867, 17616, 322, 867, 733, 295, 1723, 5045, 3861, 490, 257, 1723, 5045, 11, 1723, 5045, 12788, 267, 837, 293, 8853], "temperature": 0.0, "avg_logprob": -0.3158022467769794, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.0002745692909229547}, {"id": 203, "seek": 148296, "start": 1482.96, "end": 1492.48, "text": " application, also Cator if you want. This is the roadmap for 2023 where we have end", "tokens": [3861, 11, 611, 383, 1639, 498, 291, 528, 13, 639, 307, 264, 35738, 337, 44377, 689, 321, 362, 917], "temperature": 0.0, "avg_logprob": -0.17844110216413225, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.00010153865878237411}, {"id": 204, "seek": 148296, "start": 1492.48, "end": 1498.28, "text": " of track coin 3.2, 3.3 is the active track, this is the current application that is still", "tokens": [295, 2837, 11464, 805, 13, 17, 11, 805, 13, 18, 307, 264, 4967, 2837, 11, 341, 307, 264, 2190, 3861, 300, 307, 920], "temperature": 0.0, "avg_logprob": -0.17844110216413225, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.00010153865878237411}, {"id": 205, "seek": 148296, "start": 1498.28, "end": 1507.88, "text": " maintained before the next release where we are in 3.4, where we want to focus on compose", "tokens": [17578, 949, 264, 958, 4374, 689, 321, 366, 294, 805, 13, 19, 11, 689, 321, 528, 281, 1879, 322, 35925], "temperature": 0.0, "avg_logprob": -0.17844110216413225, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.00010153865878237411}, {"id": 206, "seek": 150788, "start": 1507.88, "end": 1514.0800000000002, "text": " for the jet brains multiplatform side, be sure that we want to bring better experience", "tokens": [337, 264, 14452, 15442, 12788, 267, 837, 1252, 11, 312, 988, 300, 321, 528, 281, 1565, 1101, 1752], "temperature": 0.0, "avg_logprob": -0.2605858499353582, "compression_ratio": 1.6081081081081081, "no_speech_prob": 0.00039213913260027766}, {"id": 207, "seek": 150788, "start": 1514.0800000000002, "end": 1519.8400000000001, "text": " for cutlin native and we have also the verify API that is a new verification API that lets", "tokens": [337, 1723, 5045, 8470, 293, 321, 362, 611, 264, 16888, 9362, 300, 307, 257, 777, 30206, 9362, 300, 6653], "temperature": 0.0, "avg_logprob": -0.2605858499353582, "compression_ratio": 1.6081081081081081, "no_speech_prob": 0.00039213913260027766}, {"id": 208, "seek": 150788, "start": 1519.8400000000001, "end": 1525.5200000000002, "text": " you make a compile time verification. Of course, we are really keen of Cator and we", "tokens": [291, 652, 257, 31413, 565, 30206, 13, 2720, 1164, 11, 321, 366, 534, 20297, 295, 383, 1639, 293, 321], "temperature": 0.0, "avg_logprob": -0.2605858499353582, "compression_ratio": 1.6081081081081081, "no_speech_prob": 0.00039213913260027766}, {"id": 209, "seek": 150788, "start": 1525.5200000000002, "end": 1533.0400000000002, "text": " want to push new things about Cator. Especially today at FirstDem, and this is my first session", "tokens": [528, 281, 2944, 777, 721, 466, 383, 1639, 13, 8545, 965, 412, 2386, 35, 443, 11, 293, 341, 307, 452, 700, 5481], "temperature": 0.0, "avg_logprob": -0.2605858499353582, "compression_ratio": 1.6081081081081081, "no_speech_prob": 0.00039213913260027766}, {"id": 210, "seek": 153304, "start": 1533.04, "end": 1540.12, "text": " at FirstDem, I'm really happy to show all the people that are really sharing and contributing", "tokens": [412, 2386, 35, 443, 11, 286, 478, 534, 2055, 281, 855, 439, 264, 561, 300, 366, 534, 5414, 293, 19270], "temperature": 0.0, "avg_logprob": -0.1953854292966007, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.002550410805270076}, {"id": 211, "seek": 153304, "start": 1540.12, "end": 1546.6, "text": " to coin and I clearly want to thank them. Thank you all the community to work on coin.", "tokens": [281, 11464, 293, 286, 4448, 528, 281, 1309, 552, 13, 1044, 291, 439, 264, 1768, 281, 589, 322, 11464, 13], "temperature": 0.0, "avg_logprob": -0.1953854292966007, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.002550410805270076}, {"id": 212, "seek": 153304, "start": 1546.6, "end": 1553.36, "text": " I believe some of people can find themselves on this board. If you want to chat with the", "tokens": [286, 1697, 512, 295, 561, 393, 915, 2969, 322, 341, 3150, 13, 759, 291, 528, 281, 5081, 365, 264], "temperature": 0.0, "avg_logprob": -0.1953854292966007, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.002550410805270076}, {"id": 213, "seek": 153304, "start": 1553.36, "end": 1559.96, "text": " coin community, then you can either find us on Twitter, on Slack, the cutlin on Slack", "tokens": [11464, 1768, 11, 550, 291, 393, 2139, 915, 505, 322, 5794, 11, 322, 37211, 11, 264, 1723, 5045, 322, 37211], "temperature": 0.0, "avg_logprob": -0.1953854292966007, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.002550410805270076}, {"id": 214, "seek": 155996, "start": 1559.96, "end": 1566.4, "text": " and also you can go on the website that is inside coin.io to find all the related sources", "tokens": [293, 611, 291, 393, 352, 322, 264, 3144, 300, 307, 1854, 11464, 13, 1004, 281, 915, 439, 264, 4077, 7139], "temperature": 0.0, "avg_logprob": -0.19225145227768842, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00044339653686620295}, {"id": 215, "seek": 155996, "start": 1566.4, "end": 1573.92, "text": " that you want. And also Open Source is great, but you need a strong company behind that to", "tokens": [300, 291, 528, 13, 400, 611, 7238, 29629, 307, 869, 11, 457, 291, 643, 257, 2068, 2237, 2261, 300, 281], "temperature": 0.0, "avg_logprob": -0.19225145227768842, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00044339653686620295}, {"id": 216, "seek": 155996, "start": 1573.92, "end": 1579.28, "text": " help you and have support on your project that is helping with coin technology and cutlin", "tokens": [854, 291, 293, 362, 1406, 322, 428, 1716, 300, 307, 4315, 365, 11464, 2899, 293, 1723, 5045], "temperature": 0.0, "avg_logprob": -0.19225145227768842, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00044339653686620295}, {"id": 217, "seek": 155996, "start": 1579.28, "end": 1584.96, "text": " technology. This is why I founded Cozilla last year to work with people that are using", "tokens": [2899, 13, 639, 307, 983, 286, 13234, 3066, 26403, 1036, 1064, 281, 589, 365, 561, 300, 366, 1228], "temperature": 0.0, "avg_logprob": -0.19225145227768842, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.00044339653686620295}, {"id": 218, "seek": 158496, "start": 1584.96, "end": 1593.56, "text": " such technologies. Then you can find all the resources on Cozilla.io and write on time.", "tokens": [1270, 7943, 13, 1396, 291, 393, 915, 439, 264, 3593, 322, 3066, 26403, 13, 1004, 293, 2464, 322, 565, 13], "temperature": 0.0, "avg_logprob": -0.3020634006809544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0009633408044464886}, {"id": 219, "seek": 158496, "start": 1593.56, "end": 1594.56, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.3020634006809544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0009633408044464886}, {"id": 220, "seek": 158496, "start": 1594.56, "end": 1601.56, "text": " Then we have time for questions. No question there.", "tokens": [1396, 321, 362, 565, 337, 1651, 13, 883, 1168, 456, 13], "temperature": 0.0, "avg_logprob": -0.3020634006809544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0009633408044464886}, {"id": 221, "seek": 158496, "start": 1601.56, "end": 1607.8400000000001, "text": " No, sorry. We don't have time for questions. We are so strict on timing. The next talk", "tokens": [883, 11, 2597, 13, 492, 500, 380, 362, 565, 337, 1651, 13, 492, 366, 370, 10910, 322, 10822, 13, 440, 958, 751], "temperature": 0.0, "avg_logprob": -0.3020634006809544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0009633408044464886}, {"id": 222, "seek": 160784, "start": 1607.84, "end": 1614.84, "text": " will start in four minutes, actually.", "tokens": [50364, 486, 722, 294, 1451, 2077, 11, 767, 13, 50714], "temperature": 0.0, "avg_logprob": -0.4739659916270863, "compression_ratio": 0.8222222222222222, "no_speech_prob": 0.002038277219980955}], "language": "en"}