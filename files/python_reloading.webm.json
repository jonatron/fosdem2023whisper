{"text": " you Hello FOSDEM 2021 and welcome to this talk on code reloading techniques in Python. In this talk we'll be reviewing a few techniques that allow you to reload code and apply the new changes you made to your program. We'll look at a few different techniques to do so and we'll have an in-depth look at the inner way of how they work precisely. Few words about myself, so my name is Hugo Herter, I'm a software engineer consultant. I discovered Python and Linux in 2003 and have been using them a lot since then. My first FOSDEM was in 2004 and I think I attended almost every edition since. When I'm passionate about free software, I'm really happy this year to be able to attend all the dev rooms without missing any. When I was starting to learn Python, I was quite amazed by how easy it is to play with all the internals of the language and the constructs. One thing that I found pretty interesting is this exact function that allows you to execute any Python code found in a string that might come from anywhere. As you can see in the example on the right, that just executes Python code from the network and gives you a remote Python shell on any machine that runs this script. It's basically the same idea you have in Jupyter notebook with more security and more advanced features. When I was learning Python, I started also to write my own web framework. This was back in the times when Flask and Django even didn't exist. We only had Zope and a few frameworks that do not exist anymore and on that web framework I used a function called exec file which is the same as exec but for a file, it would execute all the Python code in a file and I used this to be able to make my changes up here immediately when I was changing some files in some web pages. Which brought me to this idea of code reloading. It's something that I have been playing with for a long time and I wanted to share this with you because there are many interesting techniques here and you might not know about all of them. What I called code reloading here is the process of replacing part of a program with a new version, part of all of it. I'm focused here on the source code because it's the term that's used mostly for interpreted languages. When you are using compiled languages, there are other terms that might mean similar things but they are slightly different. I talk about cold reloading and what I mean by cold is that you take the process and you stop it and then you restart it. And hot code reloading means that you keep the process running and you patch it with a new code without stopping it. So as an illustration on the left, we have some kind of cold code reloading on a racetrack. You stop the car, you have access to all the internals, you can change everything you want but the car is out of the circuit, it's not running anymore. The driver is out of the car as well. On the right side you have hot code reloading where the driver is still in the car. You may not want to change everything, you don't have access to the chassis, changing the engine might be a complicated task here but you have access to quite a few pieces of the car already and if you just want to change the color or type the wheels, it's pretty easy to do. You don't need to stop the car and it goes much faster. It's going to be the same ID we have in programming with cold code reloading and hot code reloading. So cold code reloading, you stop the process and then you restart it again. It's easy, it's reliable, you've all done it if you did some Python code or any kind of programming, it's the default way of doing it. The issues you have with it is that you lose the states so getting that state back might take time. If you are programming a video game for example and you are a Vatorite in a special place and it took you some time to get there with certain enemies and you want to trick the behavior of the enemies, in that case restarting the entry game every time might be pretty annoying and you would be interested in something that keeps the state of the whole program. The easiest way on Linux to do cold code reloading is control C up arrow enter to just run the same command again and it's a super easy way to do it because we all know this first shortcut by reflex as we use it all the time in programming. Let's have a look at how some web frameworks do this cold, some web frameworks do code reloading and they used this cold approach of restarting everything but they do it in an automated way. Let's have a look at how they do it precisely. The entry point is this function here run with reloader and you pass it a function. It will run this main function and enable the reloader on the side and stop that function if the code has changed to restart it. The first thing we see is that it's calling here single.signal six-term lambda rx sys.exit which means if the process receives the single six-term to terminate from the system then it will exit to make sure that it doesn't hang if it receives this single. This is a way to behave properly even in multi-threaded environments. Sometimes when you have multiple threads the signals are not received by all threads and you have to press control C a few times to stop it for example using some frameworks. Then we see that it's initializing a reloader here using this function getReloader which is defined a bit higher. There are two reloader classes in Django. One is the watchman which will watch for files on the file system and the other one is the stat reloader which will just watch every second if the properties of the files have changed and in that case say well the properties have changed so we should trigger a reload. The watchman is faster and more powerful but the stat reloader works as a fullback to this. And then it will pass this reloader as well as the main function here to this startDjango function which is right here. So that function basically starts our main function here in a thread so it creates a thread to run this main function it sets it as a daemon it starts the thread so no our main function is running but in a thread not in the main thread but in a side thread which is controlled by this function. Then it starts the reloader and it passes the thread to that reloader class which will be in charge of stopping it and restarting it if something has changed and it will run this in the loop as long as the reloader should not stop. So this is the Django approach start the main function in a thread and then look for changes on the file stem when they happen have this reloader class to just stop the thread and restart it. When looking at how Flask handles this reloading it's a bit more complicated because it's not within Flask it's within WorkZook which is a web framework library used by Flask. But we can find something similar we have this run with reloader function that takes a main function as an argument it does a register to the same signal as Django and then it starts a thread here with the main function and it launches the thread here and if we look at the reloader this it comes from this reloader loops and when looking at it we can see that it's also using something similar a stat reloader and a watchdog reloader and these are very similar to those used in Django so we can assume that the behavior is identical even if the codebase is different here. So both Django and Flask use these watchman or watchdog reloaders under the hood but how do these work? Well there is something called iNotify on Linux and there are similar APIs on other other platforms that allow you or your process is to watch for file system events and receive a notification without having to constantly look if something has changed. On Linux it's iNotify which you can use directly from the library piNotify if you're using Python or there is this library called watchdog that you can use on all main platforms. The way the interface to use watchdog looks like this so you can create an observer that is in charge of receiving these signals and will run in a thread in the background and you can then schedule some handlers on it and say well I want to register for example recursively if you're looking for on a folder or not and then just start it and it will work using a callback based approach. Because it runs in the background I added this input at the end just to make the program block and to be able to see something before Python exits. Let's now look at hot code reloading so in this case we want to keep the process running we want to replace the code in memory. We hope it won't crash the program this might happen if we have inconsistencies and the new code is not compatible with the existing one or the existing state and we want to take advantage of the fact that it keeps the state and it's really fast to do this. There are two challenges in this case one is we need to find and load the new code because if you're just reloading everything you might as well restart the entire program and we need to replace the references so in Python you can pass a lot of objects as variables and you can have references to these objects in many places and we need to find all these places to be able to make them use the new code instead of the old one. There are other languages that also allow this kind of hot code reloading. In Java for example you have this functionality called hot swap which basically allows you via the debugger to specify a class and ask the virtual machine to replace the class with the new compiled code from a class file. In C and C++ you have DLL code reloading that allows you to reload a dynamic linked library or shared library. In this case as well they need to share the same interface, they need to expose the same functions and classes and methods that the previous version did. There are some changes that you're not allowed to because then it would break the compatibility. In Python there are three ways of loading codes. One is eval that allows you to evaluate a function and that one is not very useful in our use case. However the other two methods do work and they both have their advantages and disadvantages. The first one is the import module that you are using when you are importing a library and in a way similar to the DLL libraries you can reload a module that has already been loaded and have the new version replace the old one and exec allows you to execute just any Python code from string which can also be used in some cases. What you see here is on the left a text editor with some Python code and on the right a Python console. So the standard way to load Python code is using import. I will import my module and then I can call module.sayhello and it will just run it. If I change the source code say hello will still be at the old version as expected. There is however a library we can use with in Python to reload this module from import lib and we can reload here module. And now if we call our function again we can see that we have the new version. However if we have a reference to this function then it's a bit trickier because that reference will not be updated say we have say equals module.sayhello when we call say we will still be calling this function. Now let's update the source code and reload the code module.sayhello has the new version however say is still using the old version. So now we have one version that doesn't exist on the file system anymore the previous version but it's still in memory it's still loaded and this is something we have to take care about to be careful about when we're doing hot code reloading. In practice however sometimes we are facing code that's not optimal for the reloading that we were just seeing. For example here we have a connection to a database that's initialized as a singleton and this is a pattern we see in a lot of code where that connection is created just within the module and so it's executed every time we import it. So the first time we import our module it will take some time to initialize it. We can now call our function say hello let's say we want to update the code of our function we need to reload it so we can use importlib.reload module 2 and again we have to pay the cost of the time to establish this connection and now we have the new value working. So in this case this use of importlib.reload can be quite painful here we are just facing a delay but sometimes there are also thresholds, limits, there are ports that are still appearing as busy, there are other issues that we can face that make this approach more difficult. If you can use it it's really nice because it's really simple it's all built-in in Python and it's just one line so go for it but it's not always optimal in some kind of complex software. There is however another approach we can use to reload this function say hello without going through the reloading of the database and this is the idea here is to go get the new value of the source code and then to execute that using the function exec. So for the first step we need to get access to the source code of a function and there is a tool for that in Python in the library inspect so I will just import inspect and then I can use inspect.getSource of module 2.sayHello. I have the source code of the function and the really cool thing here is that if I do add some code for example I add pass here and then I do a return here and let's do some more changes, let's do it, call it again and we can see here that this function gets source gets the new value of the code and not the old one so it's quite smart there which is really handy in our use case. So we now have the source code in a string and we could just try to execute it however if we want to replace it within the module so that other functions that depend on it would be able to access it we need to also give it access to things inside this module for example db if we execute this module here it will not have access to the db variable from that module. So what we need to do is use inspect to get access to the module of that function. So let's say module equals inspect.getModule of module 2.sayHello. In this case we know which module it is, it's module 2 so it will just get the same thing but sometimes we just have the function around and we don't know directly from which module it is so we can use this and then what we can do is create, we want to be able to extract the new value of the function so we'll create a local directory, I'll call it locals underscore equals dictionary sorry not directory and then I can just execute the source code so just copy this or copy the code here within the module that underscore and underscore addict which is a dictionary representing the namespace of what's within that module and my local dict here that I created just above. And now let's look at locals, we have say hello and if we compare it to module 2.sayHello you can see that they have the same identifier here and if I call one and call the other so this is the old one and this is the new one and the identifiers look similar but if we look here we can see they're not exactly the same so let's not be mistaken by the fact that they look really close now we can just finally update this function if you want so we can do module 2.sayHello equals locals.sayHello and finally module 2.sayHello call it and there we have this we just reloaded the function without reloading the connection to the database here. If you want to use hotcode reloading in your projects and you don't want to write yourself the methods to do it using the tools we have seen previously you can also use this library called reloader from reload their import auto reload and here in this case you just decorate your functions with this auto reload decorator and it will automatically replace them using the proxy method we've seen above and the instance reference to the class method with the new code when the code changes by watching the file system so this is a wrap up of all the methods we've seen previously. You can also manually specify when the code should be reloaded by changing the decorator in this case you can manually reload the class or you can start a timer that will just reload it every second or again look at the file system and as the file system changes trigger the reloading of this class. This on pypy so you can just install it using pip install reloader and try start using it. The source code is pretty simple it just fits in one file and then you have a directory with a few examples. Thanks for watching and join me in the question and answer matrix room for if you want to discuss any things you can find all the examples we've seen on this GitHub repository thank you. Thanks Hugo for your talk so I think we can now start with the questions. First question is how does reloading using execs behave in terms of compiling to intermediate forms like PyC and so on? So it's using, Python internally is using bytecode so exec is a two steps process the first step is it will compile it to bytecode it will just not store that bytecode on disk and then it will execute that bytecode as like the rest of the bytecode. And are there examples of applications that use hotcode reloading? Usually it's a process that at least I use for development so it's not used that much in production because then it can cause a lot of issues but it's the hotcode reloading in general is used a lot by game developers because they're tweaking the dynamics of the game while playing it and restarting the entire game every time you make a change to some logic doesn't make sense in that case. And how do you deal with side effects like things like shared resources and so on? So the idea with hotcode reloading the way I presented it you keep these resources on so you keep the state you keep these resources. Of course if something changes outside of the scope of your changes then you may have compatibility issues and then you just have to accept it and restart the whole process. Okay any further questions from the chat? What are the dangers that remain? Could you fix them? Well I think Python itself is not designed for hotcode reloading and other languages have allowed this in a safer way so in order to make hotcode reloading easier in Python I think there will be some big changes within Python would be required. If you take the example of Erlang that's a language that's designed to allow hotcode reloading and it's used a lot in network equipment and it's a feature built in the language in the tooling. If you take the example of Java there is a rule you can reload a class as long as its interface does not change and your ID, your tooling will check that. In Python there are no such checks so at the moment there are no guarantees that the new version of the code would work with a high chance. Okay thank you. So, do you add decorators for reloading in your code base? Is there a best practice to ignore them at the moment running your code in production? I think it aligns with the other point that's adding decorators just for the sake of reloading for half an hour doesn't make sense. It's a trade-off. I use decorators because that allows me to know exactly what is being hot reloaded and what is not. And also as a way to work with the references. Another strategy I thought about was to try to replace in memory all the references to the function with the new one within Python. And that requires much lower access to the internals of Python.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.06, "text": " you", "tokens": [50364, 291, 50467], "temperature": 0.0, "avg_logprob": -0.5919898152351379, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9431774616241455}, {"id": 1, "seek": 3000, "start": 30.0, "end": 46.4, "text": " Hello FOSDEM 2021 and welcome to this talk on code reloading techniques in Python.", "tokens": [2425, 479, 4367, 35, 6683, 7201, 293, 2928, 281, 341, 751, 322, 3089, 25628, 278, 7512, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.30467619719328703, "compression_ratio": 1.4105960264900663, "no_speech_prob": 0.012863805517554283}, {"id": 2, "seek": 3000, "start": 46.4, "end": 52.400000000000006, "text": " In this talk we'll be reviewing a few techniques that allow you to reload code and apply the", "tokens": [682, 341, 751, 321, 603, 312, 19576, 257, 1326, 7512, 300, 2089, 291, 281, 25628, 3089, 293, 3079, 264], "temperature": 0.0, "avg_logprob": -0.30467619719328703, "compression_ratio": 1.4105960264900663, "no_speech_prob": 0.012863805517554283}, {"id": 3, "seek": 3000, "start": 52.400000000000006, "end": 54.68, "text": " new changes you made to your program.", "tokens": [777, 2962, 291, 1027, 281, 428, 1461, 13], "temperature": 0.0, "avg_logprob": -0.30467619719328703, "compression_ratio": 1.4105960264900663, "no_speech_prob": 0.012863805517554283}, {"id": 4, "seek": 5468, "start": 54.68, "end": 59.84, "text": " We'll look at a few different techniques to do so and we'll have an in-depth look at", "tokens": [492, 603, 574, 412, 257, 1326, 819, 7512, 281, 360, 370, 293, 321, 603, 362, 364, 294, 12, 25478, 574, 412], "temperature": 0.0, "avg_logprob": -0.18397475262077487, "compression_ratio": 1.468503937007874, "no_speech_prob": 9.816159581532702e-05}, {"id": 5, "seek": 5468, "start": 59.84, "end": 64.2, "text": " the inner way of how they work precisely.", "tokens": [264, 7284, 636, 295, 577, 436, 589, 13402, 13], "temperature": 0.0, "avg_logprob": -0.18397475262077487, "compression_ratio": 1.468503937007874, "no_speech_prob": 9.816159581532702e-05}, {"id": 6, "seek": 5468, "start": 64.2, "end": 69.24, "text": " Few words about myself, so my name is Hugo Herter, I'm a software engineer consultant.", "tokens": [33468, 2283, 466, 2059, 11, 370, 452, 1315, 307, 32504, 3204, 391, 11, 286, 478, 257, 4722, 11403, 24676, 13], "temperature": 0.0, "avg_logprob": -0.18397475262077487, "compression_ratio": 1.468503937007874, "no_speech_prob": 9.816159581532702e-05}, {"id": 7, "seek": 5468, "start": 69.24, "end": 74.88, "text": " I discovered Python and Linux in 2003 and have been using them a lot since then.", "tokens": [286, 6941, 15329, 293, 18734, 294, 16416, 293, 362, 668, 1228, 552, 257, 688, 1670, 550, 13], "temperature": 0.0, "avg_logprob": -0.18397475262077487, "compression_ratio": 1.468503937007874, "no_speech_prob": 9.816159581532702e-05}, {"id": 8, "seek": 5468, "start": 74.88, "end": 81.44, "text": " My first FOSDEM was in 2004 and I think I attended almost every edition since.", "tokens": [1222, 700, 479, 4367, 35, 6683, 390, 294, 15817, 293, 286, 519, 286, 15990, 1920, 633, 11377, 1670, 13], "temperature": 0.0, "avg_logprob": -0.18397475262077487, "compression_ratio": 1.468503937007874, "no_speech_prob": 9.816159581532702e-05}, {"id": 9, "seek": 8144, "start": 81.44, "end": 86.08, "text": " When I'm passionate about free software, I'm really happy this year to be able to attend", "tokens": [1133, 286, 478, 11410, 466, 1737, 4722, 11, 286, 478, 534, 2055, 341, 1064, 281, 312, 1075, 281, 6888], "temperature": 0.0, "avg_logprob": -0.12904044403426948, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.00015805855218786746}, {"id": 10, "seek": 8144, "start": 86.08, "end": 92.03999999999999, "text": " all the dev rooms without missing any.", "tokens": [439, 264, 1905, 9396, 1553, 5361, 604, 13], "temperature": 0.0, "avg_logprob": -0.12904044403426948, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.00015805855218786746}, {"id": 11, "seek": 8144, "start": 92.03999999999999, "end": 97.4, "text": " When I was starting to learn Python, I was quite amazed by how easy it is to play with", "tokens": [1133, 286, 390, 2891, 281, 1466, 15329, 11, 286, 390, 1596, 20507, 538, 577, 1858, 309, 307, 281, 862, 365], "temperature": 0.0, "avg_logprob": -0.12904044403426948, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.00015805855218786746}, {"id": 12, "seek": 8144, "start": 97.4, "end": 100.92, "text": " all the internals of the language and the constructs.", "tokens": [439, 264, 2154, 1124, 295, 264, 2856, 293, 264, 7690, 82, 13], "temperature": 0.0, "avg_logprob": -0.12904044403426948, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.00015805855218786746}, {"id": 13, "seek": 8144, "start": 100.92, "end": 106.0, "text": " One thing that I found pretty interesting is this exact function that allows you to execute", "tokens": [1485, 551, 300, 286, 1352, 1238, 1880, 307, 341, 1900, 2445, 300, 4045, 291, 281, 14483], "temperature": 0.0, "avg_logprob": -0.12904044403426948, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.00015805855218786746}, {"id": 14, "seek": 10600, "start": 106.0, "end": 111.76, "text": " any Python code found in a string that might come from anywhere.", "tokens": [604, 15329, 3089, 1352, 294, 257, 6798, 300, 1062, 808, 490, 4992, 13], "temperature": 0.0, "avg_logprob": -0.1717860021708924, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.00015786950825713575}, {"id": 15, "seek": 10600, "start": 111.76, "end": 118.08, "text": " As you can see in the example on the right, that just executes Python code from the network", "tokens": [1018, 291, 393, 536, 294, 264, 1365, 322, 264, 558, 11, 300, 445, 4454, 1819, 15329, 3089, 490, 264, 3209], "temperature": 0.0, "avg_logprob": -0.1717860021708924, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.00015786950825713575}, {"id": 16, "seek": 10600, "start": 118.08, "end": 122.84, "text": " and gives you a remote Python shell on any machine that runs this script.", "tokens": [293, 2709, 291, 257, 8607, 15329, 8720, 322, 604, 3479, 300, 6676, 341, 5755, 13], "temperature": 0.0, "avg_logprob": -0.1717860021708924, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.00015786950825713575}, {"id": 17, "seek": 10600, "start": 122.84, "end": 127.64, "text": " It's basically the same idea you have in Jupyter notebook with more security and more advanced", "tokens": [467, 311, 1936, 264, 912, 1558, 291, 362, 294, 22125, 88, 391, 21060, 365, 544, 3825, 293, 544, 7339], "temperature": 0.0, "avg_logprob": -0.1717860021708924, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.00015786950825713575}, {"id": 18, "seek": 10600, "start": 127.64, "end": 131.2, "text": " features.", "tokens": [4122, 13], "temperature": 0.0, "avg_logprob": -0.1717860021708924, "compression_ratio": 1.580188679245283, "no_speech_prob": 0.00015786950825713575}, {"id": 19, "seek": 13120, "start": 131.2, "end": 136.35999999999999, "text": " When I was learning Python, I started also to write my own web framework.", "tokens": [1133, 286, 390, 2539, 15329, 11, 286, 1409, 611, 281, 2464, 452, 1065, 3670, 8388, 13], "temperature": 0.0, "avg_logprob": -0.2080656440512648, "compression_ratio": 1.6434426229508197, "no_speech_prob": 3.534981078701094e-05}, {"id": 20, "seek": 13120, "start": 136.35999999999999, "end": 140.67999999999998, "text": " This was back in the times when Flask and Django even didn't exist.", "tokens": [639, 390, 646, 294, 264, 1413, 562, 3235, 3863, 293, 33464, 17150, 754, 994, 380, 2514, 13], "temperature": 0.0, "avg_logprob": -0.2080656440512648, "compression_ratio": 1.6434426229508197, "no_speech_prob": 3.534981078701094e-05}, {"id": 21, "seek": 13120, "start": 140.67999999999998, "end": 147.83999999999997, "text": " We only had Zope and a few frameworks that do not exist anymore and on that web framework", "tokens": [492, 787, 632, 1176, 1114, 293, 257, 1326, 29834, 300, 360, 406, 2514, 3602, 293, 322, 300, 3670, 8388], "temperature": 0.0, "avg_logprob": -0.2080656440512648, "compression_ratio": 1.6434426229508197, "no_speech_prob": 3.534981078701094e-05}, {"id": 22, "seek": 13120, "start": 147.83999999999997, "end": 152.88, "text": " I used a function called exec file which is the same as exec but for a file, it would", "tokens": [286, 1143, 257, 2445, 1219, 4454, 3991, 597, 307, 264, 912, 382, 4454, 457, 337, 257, 3991, 11, 309, 576], "temperature": 0.0, "avg_logprob": -0.2080656440512648, "compression_ratio": 1.6434426229508197, "no_speech_prob": 3.534981078701094e-05}, {"id": 23, "seek": 13120, "start": 152.88, "end": 160.51999999999998, "text": " execute all the Python code in a file and I used this to be able to make my changes", "tokens": [14483, 439, 264, 15329, 3089, 294, 257, 3991, 293, 286, 1143, 341, 281, 312, 1075, 281, 652, 452, 2962], "temperature": 0.0, "avg_logprob": -0.2080656440512648, "compression_ratio": 1.6434426229508197, "no_speech_prob": 3.534981078701094e-05}, {"id": 24, "seek": 16052, "start": 160.52, "end": 166.68, "text": " up here immediately when I was changing some files in some web pages.", "tokens": [493, 510, 4258, 562, 286, 390, 4473, 512, 7098, 294, 512, 3670, 7183, 13], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 25, "seek": 16052, "start": 166.68, "end": 169.48000000000002, "text": " Which brought me to this idea of code reloading.", "tokens": [3013, 3038, 385, 281, 341, 1558, 295, 3089, 25628, 278, 13], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 26, "seek": 16052, "start": 169.48000000000002, "end": 174.72, "text": " It's something that I have been playing with for a long time and I wanted to share this", "tokens": [467, 311, 746, 300, 286, 362, 668, 2433, 365, 337, 257, 938, 565, 293, 286, 1415, 281, 2073, 341], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 27, "seek": 16052, "start": 174.72, "end": 180.92000000000002, "text": " with you because there are many interesting techniques here and you might not know about", "tokens": [365, 291, 570, 456, 366, 867, 1880, 7512, 510, 293, 291, 1062, 406, 458, 466], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 28, "seek": 16052, "start": 180.92000000000002, "end": 183.64000000000001, "text": " all of them.", "tokens": [439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 29, "seek": 16052, "start": 183.64000000000001, "end": 189.28, "text": " What I called code reloading here is the process of replacing part of a program with", "tokens": [708, 286, 1219, 3089, 25628, 278, 510, 307, 264, 1399, 295, 19139, 644, 295, 257, 1461, 365], "temperature": 0.0, "avg_logprob": -0.16278951726061233, "compression_ratio": 1.6794871794871795, "no_speech_prob": 6.597866740776226e-05}, {"id": 30, "seek": 18928, "start": 189.28, "end": 193.12, "text": " a new version, part of all of it.", "tokens": [257, 777, 3037, 11, 644, 295, 439, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 31, "seek": 18928, "start": 193.12, "end": 199.36, "text": " I'm focused here on the source code because it's the term that's used mostly for interpreted", "tokens": [286, 478, 5178, 510, 322, 264, 4009, 3089, 570, 309, 311, 264, 1433, 300, 311, 1143, 5240, 337, 26749], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 32, "seek": 18928, "start": 199.36, "end": 200.72, "text": " languages.", "tokens": [8650, 13], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 33, "seek": 18928, "start": 200.72, "end": 205.48, "text": " When you are using compiled languages, there are other terms that might mean similar things", "tokens": [1133, 291, 366, 1228, 36548, 8650, 11, 456, 366, 661, 2115, 300, 1062, 914, 2531, 721], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 34, "seek": 18928, "start": 205.48, "end": 208.16, "text": " but they are slightly different.", "tokens": [457, 436, 366, 4748, 819, 13], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 35, "seek": 18928, "start": 208.16, "end": 216.04, "text": " I talk about cold reloading and what I mean by cold is that you take the process and you", "tokens": [286, 751, 466, 3554, 25628, 278, 293, 437, 286, 914, 538, 3554, 307, 300, 291, 747, 264, 1399, 293, 291], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 36, "seek": 18928, "start": 216.04, "end": 219.16, "text": " stop it and then you restart it.", "tokens": [1590, 309, 293, 550, 291, 21022, 309, 13], "temperature": 0.0, "avg_logprob": -0.20090053990944146, "compression_ratio": 1.6768558951965065, "no_speech_prob": 4.4671040086541325e-05}, {"id": 37, "seek": 21916, "start": 219.16, "end": 223.92, "text": " And hot code reloading means that you keep the process running and you patch it with", "tokens": [400, 2368, 3089, 25628, 278, 1355, 300, 291, 1066, 264, 1399, 2614, 293, 291, 9972, 309, 365], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 38, "seek": 21916, "start": 223.92, "end": 228.12, "text": " a new code without stopping it.", "tokens": [257, 777, 3089, 1553, 12767, 309, 13], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 39, "seek": 21916, "start": 228.12, "end": 234.04, "text": " So as an illustration on the left, we have some kind of cold code reloading on a racetrack.", "tokens": [407, 382, 364, 22645, 322, 264, 1411, 11, 321, 362, 512, 733, 295, 3554, 3089, 25628, 278, 322, 257, 4129, 27965, 501, 13], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 40, "seek": 21916, "start": 234.04, "end": 238.64, "text": " You stop the car, you have access to all the internals, you can change everything you want", "tokens": [509, 1590, 264, 1032, 11, 291, 362, 2105, 281, 439, 264, 2154, 1124, 11, 291, 393, 1319, 1203, 291, 528], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 41, "seek": 21916, "start": 238.64, "end": 243.72, "text": " but the car is out of the circuit, it's not running anymore.", "tokens": [457, 264, 1032, 307, 484, 295, 264, 9048, 11, 309, 311, 406, 2614, 3602, 13], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 42, "seek": 21916, "start": 243.72, "end": 246.32, "text": " The driver is out of the car as well.", "tokens": [440, 6787, 307, 484, 295, 264, 1032, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.17737386811454342, "compression_ratio": 1.6864406779661016, "no_speech_prob": 4.468538463697769e-05}, {"id": 43, "seek": 24632, "start": 246.32, "end": 252.2, "text": " On the right side you have hot code reloading where the driver is still in the car.", "tokens": [1282, 264, 558, 1252, 291, 362, 2368, 3089, 25628, 278, 689, 264, 6787, 307, 920, 294, 264, 1032, 13], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 44, "seek": 24632, "start": 252.2, "end": 257.76, "text": " You may not want to change everything, you don't have access to the chassis, changing", "tokens": [509, 815, 406, 528, 281, 1319, 1203, 11, 291, 500, 380, 362, 2105, 281, 264, 28262, 11, 4473], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 45, "seek": 24632, "start": 257.76, "end": 264.32, "text": " the engine might be a complicated task here but you have access to quite a few pieces of", "tokens": [264, 2848, 1062, 312, 257, 6179, 5633, 510, 457, 291, 362, 2105, 281, 1596, 257, 1326, 3755, 295], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 46, "seek": 24632, "start": 264.32, "end": 269.88, "text": " the car already and if you just want to change the color or type the wheels, it's pretty", "tokens": [264, 1032, 1217, 293, 498, 291, 445, 528, 281, 1319, 264, 2017, 420, 2010, 264, 10046, 11, 309, 311, 1238], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 47, "seek": 24632, "start": 269.88, "end": 270.88, "text": " easy to do.", "tokens": [1858, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 48, "seek": 24632, "start": 270.88, "end": 274.28, "text": " You don't need to stop the car and it goes much faster.", "tokens": [509, 500, 380, 643, 281, 1590, 264, 1032, 293, 309, 1709, 709, 4663, 13], "temperature": 0.0, "avg_logprob": -0.12923120338226032, "compression_ratio": 1.751054852320675, "no_speech_prob": 6.594044680241495e-05}, {"id": 49, "seek": 27428, "start": 274.28, "end": 282.2, "text": " It's going to be the same ID we have in programming with cold code reloading and hot code reloading.", "tokens": [467, 311, 516, 281, 312, 264, 912, 7348, 321, 362, 294, 9410, 365, 3554, 3089, 25628, 278, 293, 2368, 3089, 25628, 278, 13], "temperature": 0.0, "avg_logprob": -0.14413901737758092, "compression_ratio": 1.6282722513089005, "no_speech_prob": 6.692614988423884e-05}, {"id": 50, "seek": 27428, "start": 282.2, "end": 286.64, "text": " So cold code reloading, you stop the process and then you restart it again.", "tokens": [407, 3554, 3089, 25628, 278, 11, 291, 1590, 264, 1399, 293, 550, 291, 21022, 309, 797, 13], "temperature": 0.0, "avg_logprob": -0.14413901737758092, "compression_ratio": 1.6282722513089005, "no_speech_prob": 6.692614988423884e-05}, {"id": 51, "seek": 27428, "start": 286.64, "end": 292.52, "text": " It's easy, it's reliable, you've all done it if you did some Python code or any kind", "tokens": [467, 311, 1858, 11, 309, 311, 12924, 11, 291, 600, 439, 1096, 309, 498, 291, 630, 512, 15329, 3089, 420, 604, 733], "temperature": 0.0, "avg_logprob": -0.14413901737758092, "compression_ratio": 1.6282722513089005, "no_speech_prob": 6.692614988423884e-05}, {"id": 52, "seek": 27428, "start": 292.52, "end": 296.96, "text": " of programming, it's the default way of doing it.", "tokens": [295, 9410, 11, 309, 311, 264, 7576, 636, 295, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.14413901737758092, "compression_ratio": 1.6282722513089005, "no_speech_prob": 6.692614988423884e-05}, {"id": 53, "seek": 29696, "start": 296.96, "end": 304.59999999999997, "text": " The issues you have with it is that you lose the states so getting that state back might", "tokens": [440, 2663, 291, 362, 365, 309, 307, 300, 291, 3624, 264, 4368, 370, 1242, 300, 1785, 646, 1062], "temperature": 0.0, "avg_logprob": -0.21293882305702466, "compression_ratio": 1.7102803738317758, "no_speech_prob": 2.6520952815189958e-05}, {"id": 54, "seek": 29696, "start": 304.59999999999997, "end": 306.0, "text": " take time.", "tokens": [747, 565, 13], "temperature": 0.0, "avg_logprob": -0.21293882305702466, "compression_ratio": 1.7102803738317758, "no_speech_prob": 2.6520952815189958e-05}, {"id": 55, "seek": 29696, "start": 306.0, "end": 313.47999999999996, "text": " If you are programming a video game for example and you are a Vatorite in a special place", "tokens": [759, 291, 366, 9410, 257, 960, 1216, 337, 1365, 293, 291, 366, 257, 691, 1639, 642, 294, 257, 2121, 1081], "temperature": 0.0, "avg_logprob": -0.21293882305702466, "compression_ratio": 1.7102803738317758, "no_speech_prob": 2.6520952815189958e-05}, {"id": 56, "seek": 29696, "start": 313.47999999999996, "end": 317.2, "text": " and it took you some time to get there with certain enemies and you want to trick the", "tokens": [293, 309, 1890, 291, 512, 565, 281, 483, 456, 365, 1629, 7805, 293, 291, 528, 281, 4282, 264], "temperature": 0.0, "avg_logprob": -0.21293882305702466, "compression_ratio": 1.7102803738317758, "no_speech_prob": 2.6520952815189958e-05}, {"id": 57, "seek": 29696, "start": 317.2, "end": 324.15999999999997, "text": " behavior of the enemies, in that case restarting the entry game every time might be pretty", "tokens": [5223, 295, 264, 7805, 11, 294, 300, 1389, 21022, 278, 264, 8729, 1216, 633, 565, 1062, 312, 1238], "temperature": 0.0, "avg_logprob": -0.21293882305702466, "compression_ratio": 1.7102803738317758, "no_speech_prob": 2.6520952815189958e-05}, {"id": 58, "seek": 32416, "start": 324.16, "end": 332.48, "text": " annoying and you would be interested in something that keeps the state of the whole program.", "tokens": [11304, 293, 291, 576, 312, 3102, 294, 746, 300, 5965, 264, 1785, 295, 264, 1379, 1461, 13], "temperature": 0.0, "avg_logprob": -0.13633316213434393, "compression_ratio": 1.5026737967914439, "no_speech_prob": 9.319520177086815e-05}, {"id": 59, "seek": 32416, "start": 332.48, "end": 341.24, "text": " The easiest way on Linux to do cold code reloading is control C up arrow enter to just run the", "tokens": [440, 12889, 636, 322, 18734, 281, 360, 3554, 3089, 25628, 278, 307, 1969, 383, 493, 11610, 3242, 281, 445, 1190, 264], "temperature": 0.0, "avg_logprob": -0.13633316213434393, "compression_ratio": 1.5026737967914439, "no_speech_prob": 9.319520177086815e-05}, {"id": 60, "seek": 32416, "start": 341.24, "end": 349.52000000000004, "text": " same command again and it's a super easy way to do it because we all know this first shortcut", "tokens": [912, 5622, 797, 293, 309, 311, 257, 1687, 1858, 636, 281, 360, 309, 570, 321, 439, 458, 341, 700, 24822], "temperature": 0.0, "avg_logprob": -0.13633316213434393, "compression_ratio": 1.5026737967914439, "no_speech_prob": 9.319520177086815e-05}, {"id": 61, "seek": 34952, "start": 349.52, "end": 356.84, "text": " by reflex as we use it all the time in programming.", "tokens": [538, 23802, 382, 321, 764, 309, 439, 264, 565, 294, 9410, 13], "temperature": 0.0, "avg_logprob": -0.17445836569133558, "compression_ratio": 1.7202380952380953, "no_speech_prob": 5.671454346156679e-05}, {"id": 62, "seek": 34952, "start": 356.84, "end": 367.59999999999997, "text": " Let's have a look at how some web frameworks do this cold, some web frameworks do code reloading", "tokens": [961, 311, 362, 257, 574, 412, 577, 512, 3670, 29834, 360, 341, 3554, 11, 512, 3670, 29834, 360, 3089, 25628, 278], "temperature": 0.0, "avg_logprob": -0.17445836569133558, "compression_ratio": 1.7202380952380953, "no_speech_prob": 5.671454346156679e-05}, {"id": 63, "seek": 34952, "start": 367.59999999999997, "end": 373.88, "text": " and they used this cold approach of restarting everything but they do it in an automated", "tokens": [293, 436, 1143, 341, 3554, 3109, 295, 21022, 278, 1203, 457, 436, 360, 309, 294, 364, 18473], "temperature": 0.0, "avg_logprob": -0.17445836569133558, "compression_ratio": 1.7202380952380953, "no_speech_prob": 5.671454346156679e-05}, {"id": 64, "seek": 34952, "start": 373.88, "end": 374.88, "text": " way.", "tokens": [636, 13], "temperature": 0.0, "avg_logprob": -0.17445836569133558, "compression_ratio": 1.7202380952380953, "no_speech_prob": 5.671454346156679e-05}, {"id": 65, "seek": 34952, "start": 374.88, "end": 378.2, "text": " Let's have a look at how they do it precisely.", "tokens": [961, 311, 362, 257, 574, 412, 577, 436, 360, 309, 13402, 13], "temperature": 0.0, "avg_logprob": -0.17445836569133558, "compression_ratio": 1.7202380952380953, "no_speech_prob": 5.671454346156679e-05}, {"id": 66, "seek": 37820, "start": 378.2, "end": 382.56, "text": " The entry point is this function here run with reloader and you pass it a function.", "tokens": [440, 8729, 935, 307, 341, 2445, 510, 1190, 365, 25628, 260, 293, 291, 1320, 309, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.21050569122912838, "compression_ratio": 1.7466666666666666, "no_speech_prob": 7.348918006755412e-05}, {"id": 67, "seek": 37820, "start": 382.56, "end": 389.44, "text": " It will run this main function and enable the reloader on the side and stop that function", "tokens": [467, 486, 1190, 341, 2135, 2445, 293, 9528, 264, 25628, 260, 322, 264, 1252, 293, 1590, 300, 2445], "temperature": 0.0, "avg_logprob": -0.21050569122912838, "compression_ratio": 1.7466666666666666, "no_speech_prob": 7.348918006755412e-05}, {"id": 68, "seek": 37820, "start": 389.44, "end": 392.28, "text": " if the code has changed to restart it.", "tokens": [498, 264, 3089, 575, 3105, 281, 21022, 309, 13], "temperature": 0.0, "avg_logprob": -0.21050569122912838, "compression_ratio": 1.7466666666666666, "no_speech_prob": 7.348918006755412e-05}, {"id": 69, "seek": 37820, "start": 392.28, "end": 399.88, "text": " The first thing we see is that it's calling here single.signal six-term lambda rx sys.exit", "tokens": [440, 700, 551, 321, 536, 307, 300, 309, 311, 5141, 510, 2167, 13, 82, 788, 304, 2309, 12, 7039, 13607, 367, 87, 262, 749, 13, 3121, 270], "temperature": 0.0, "avg_logprob": -0.21050569122912838, "compression_ratio": 1.7466666666666666, "no_speech_prob": 7.348918006755412e-05}, {"id": 70, "seek": 37820, "start": 399.88, "end": 405.88, "text": " which means if the process receives the single six-term to terminate from the system then", "tokens": [597, 1355, 498, 264, 1399, 20717, 264, 2167, 2309, 12, 7039, 281, 10761, 473, 490, 264, 1185, 550], "temperature": 0.0, "avg_logprob": -0.21050569122912838, "compression_ratio": 1.7466666666666666, "no_speech_prob": 7.348918006755412e-05}, {"id": 71, "seek": 40588, "start": 405.88, "end": 411.44, "text": " it will exit to make sure that it doesn't hang if it receives this single.", "tokens": [309, 486, 11043, 281, 652, 988, 300, 309, 1177, 380, 3967, 498, 309, 20717, 341, 2167, 13], "temperature": 0.0, "avg_logprob": -0.1712449326807139, "compression_ratio": 1.6385542168674698, "no_speech_prob": 4.5367301936494187e-05}, {"id": 72, "seek": 40588, "start": 411.44, "end": 415.92, "text": " This is a way to behave properly even in multi-threaded environments.", "tokens": [639, 307, 257, 636, 281, 15158, 6108, 754, 294, 4825, 12, 392, 2538, 292, 12388, 13], "temperature": 0.0, "avg_logprob": -0.1712449326807139, "compression_ratio": 1.6385542168674698, "no_speech_prob": 4.5367301936494187e-05}, {"id": 73, "seek": 40588, "start": 415.92, "end": 421.6, "text": " Sometimes when you have multiple threads the signals are not received by all threads and", "tokens": [4803, 562, 291, 362, 3866, 19314, 264, 12354, 366, 406, 4613, 538, 439, 19314, 293], "temperature": 0.0, "avg_logprob": -0.1712449326807139, "compression_ratio": 1.6385542168674698, "no_speech_prob": 4.5367301936494187e-05}, {"id": 74, "seek": 40588, "start": 421.6, "end": 427.48, "text": " you have to press control C a few times to stop it for example using some frameworks.", "tokens": [291, 362, 281, 1886, 1969, 383, 257, 1326, 1413, 281, 1590, 309, 337, 1365, 1228, 512, 29834, 13], "temperature": 0.0, "avg_logprob": -0.1712449326807139, "compression_ratio": 1.6385542168674698, "no_speech_prob": 4.5367301936494187e-05}, {"id": 75, "seek": 40588, "start": 427.48, "end": 435.52, "text": " Then we see that it's initializing a reloader here using this function getReloader which", "tokens": [1396, 321, 536, 300, 309, 311, 5883, 3319, 257, 25628, 260, 510, 1228, 341, 2445, 483, 49, 10590, 8312, 597], "temperature": 0.0, "avg_logprob": -0.1712449326807139, "compression_ratio": 1.6385542168674698, "no_speech_prob": 4.5367301936494187e-05}, {"id": 76, "seek": 43552, "start": 435.52, "end": 437.88, "text": " is defined a bit higher.", "tokens": [307, 7642, 257, 857, 2946, 13], "temperature": 0.0, "avg_logprob": -0.14464709816909418, "compression_ratio": 1.7357512953367875, "no_speech_prob": 3.821990321739577e-05}, {"id": 77, "seek": 43552, "start": 437.88, "end": 441.12, "text": " There are two reloader classes in Django.", "tokens": [821, 366, 732, 25628, 260, 5359, 294, 33464, 17150, 13], "temperature": 0.0, "avg_logprob": -0.14464709816909418, "compression_ratio": 1.7357512953367875, "no_speech_prob": 3.821990321739577e-05}, {"id": 78, "seek": 43552, "start": 441.12, "end": 446.44, "text": " One is the watchman which will watch for files on the file system and the other one is the", "tokens": [1485, 307, 264, 1159, 1601, 597, 486, 1159, 337, 7098, 322, 264, 3991, 1185, 293, 264, 661, 472, 307, 264], "temperature": 0.0, "avg_logprob": -0.14464709816909418, "compression_ratio": 1.7357512953367875, "no_speech_prob": 3.821990321739577e-05}, {"id": 79, "seek": 43552, "start": 446.44, "end": 452.71999999999997, "text": " stat reloader which will just watch every second if the properties of the files have", "tokens": [2219, 25628, 260, 597, 486, 445, 1159, 633, 1150, 498, 264, 7221, 295, 264, 7098, 362], "temperature": 0.0, "avg_logprob": -0.14464709816909418, "compression_ratio": 1.7357512953367875, "no_speech_prob": 3.821990321739577e-05}, {"id": 80, "seek": 43552, "start": 452.71999999999997, "end": 458.28, "text": " changed and in that case say well the properties have changed so we should trigger a reload.", "tokens": [3105, 293, 294, 300, 1389, 584, 731, 264, 7221, 362, 3105, 370, 321, 820, 7875, 257, 25628, 13], "temperature": 0.0, "avg_logprob": -0.14464709816909418, "compression_ratio": 1.7357512953367875, "no_speech_prob": 3.821990321739577e-05}, {"id": 81, "seek": 45828, "start": 458.28, "end": 467.88, "text": " The watchman is faster and more powerful but the stat reloader works as a fullback to this.", "tokens": [440, 1159, 1601, 307, 4663, 293, 544, 4005, 457, 264, 2219, 25628, 260, 1985, 382, 257, 1577, 3207, 281, 341, 13], "temperature": 0.0, "avg_logprob": -0.1909561414976378, "compression_ratio": 1.6444444444444444, "no_speech_prob": 1.4059258319321088e-05}, {"id": 82, "seek": 45828, "start": 467.88, "end": 473.64, "text": " And then it will pass this reloader as well as the main function here to this startDjango", "tokens": [400, 550, 309, 486, 1320, 341, 25628, 260, 382, 731, 382, 264, 2135, 2445, 510, 281, 341, 722, 35, 73, 17150], "temperature": 0.0, "avg_logprob": -0.1909561414976378, "compression_ratio": 1.6444444444444444, "no_speech_prob": 1.4059258319321088e-05}, {"id": 83, "seek": 45828, "start": 473.64, "end": 476.4, "text": " function which is right here.", "tokens": [2445, 597, 307, 558, 510, 13], "temperature": 0.0, "avg_logprob": -0.1909561414976378, "compression_ratio": 1.6444444444444444, "no_speech_prob": 1.4059258319321088e-05}, {"id": 84, "seek": 45828, "start": 476.4, "end": 483.59999999999997, "text": " So that function basically starts our main function here in a thread so it creates a", "tokens": [407, 300, 2445, 1936, 3719, 527, 2135, 2445, 510, 294, 257, 7207, 370, 309, 7829, 257], "temperature": 0.0, "avg_logprob": -0.1909561414976378, "compression_ratio": 1.6444444444444444, "no_speech_prob": 1.4059258319321088e-05}, {"id": 85, "seek": 48360, "start": 483.6, "end": 489.12, "text": " thread to run this main function it sets it as a daemon it starts the thread so no", "tokens": [7207, 281, 1190, 341, 2135, 2445, 309, 6352, 309, 382, 257, 1120, 36228, 309, 3719, 264, 7207, 370, 572], "temperature": 0.0, "avg_logprob": -0.16050884821643568, "compression_ratio": 1.922077922077922, "no_speech_prob": 6.198883784236386e-05}, {"id": 86, "seek": 48360, "start": 489.12, "end": 495.24, "text": " our main function is running but in a thread not in the main thread but in a side thread", "tokens": [527, 2135, 2445, 307, 2614, 457, 294, 257, 7207, 406, 294, 264, 2135, 7207, 457, 294, 257, 1252, 7207], "temperature": 0.0, "avg_logprob": -0.16050884821643568, "compression_ratio": 1.922077922077922, "no_speech_prob": 6.198883784236386e-05}, {"id": 87, "seek": 48360, "start": 495.24, "end": 498.36, "text": " which is controlled by this function.", "tokens": [597, 307, 10164, 538, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16050884821643568, "compression_ratio": 1.922077922077922, "no_speech_prob": 6.198883784236386e-05}, {"id": 88, "seek": 48360, "start": 498.36, "end": 505.12, "text": " Then it starts the reloader and it passes the thread to that reloader class which will", "tokens": [1396, 309, 3719, 264, 25628, 260, 293, 309, 11335, 264, 7207, 281, 300, 25628, 260, 1508, 597, 486], "temperature": 0.0, "avg_logprob": -0.16050884821643568, "compression_ratio": 1.922077922077922, "no_speech_prob": 6.198883784236386e-05}, {"id": 89, "seek": 50512, "start": 505.12, "end": 514.52, "text": " be in charge of stopping it and restarting it if something has changed and it will run", "tokens": [312, 294, 4602, 295, 12767, 309, 293, 21022, 278, 309, 498, 746, 575, 3105, 293, 309, 486, 1190], "temperature": 0.0, "avg_logprob": -0.12056920498232299, "compression_ratio": 1.7234042553191489, "no_speech_prob": 4.7523681132588536e-05}, {"id": 90, "seek": 50512, "start": 514.52, "end": 519.52, "text": " this in the loop as long as the reloader should not stop.", "tokens": [341, 294, 264, 6367, 382, 938, 382, 264, 25628, 260, 820, 406, 1590, 13], "temperature": 0.0, "avg_logprob": -0.12056920498232299, "compression_ratio": 1.7234042553191489, "no_speech_prob": 4.7523681132588536e-05}, {"id": 91, "seek": 50512, "start": 519.52, "end": 526.88, "text": " So this is the Django approach start the main function in a thread and then look for changes", "tokens": [407, 341, 307, 264, 33464, 17150, 3109, 722, 264, 2135, 2445, 294, 257, 7207, 293, 550, 574, 337, 2962], "temperature": 0.0, "avg_logprob": -0.12056920498232299, "compression_ratio": 1.7234042553191489, "no_speech_prob": 4.7523681132588536e-05}, {"id": 92, "seek": 50512, "start": 526.88, "end": 532.4, "text": " on the file stem when they happen have this reloader class to just stop the thread and", "tokens": [322, 264, 3991, 12312, 562, 436, 1051, 362, 341, 25628, 260, 1508, 281, 445, 1590, 264, 7207, 293], "temperature": 0.0, "avg_logprob": -0.12056920498232299, "compression_ratio": 1.7234042553191489, "no_speech_prob": 4.7523681132588536e-05}, {"id": 93, "seek": 53240, "start": 532.4, "end": 542.0, "text": " restart it.", "tokens": [21022, 309, 13], "temperature": 0.0, "avg_logprob": -0.19964770994324615, "compression_ratio": 1.5195530726256983, "no_speech_prob": 7.305443432414904e-05}, {"id": 94, "seek": 53240, "start": 542.0, "end": 547.56, "text": " When looking at how Flask handles this reloading it's a bit more complicated because it's", "tokens": [1133, 1237, 412, 577, 3235, 3863, 18722, 341, 25628, 278, 309, 311, 257, 857, 544, 6179, 570, 309, 311], "temperature": 0.0, "avg_logprob": -0.19964770994324615, "compression_ratio": 1.5195530726256983, "no_speech_prob": 7.305443432414904e-05}, {"id": 95, "seek": 53240, "start": 547.56, "end": 554.64, "text": " not within Flask it's within WorkZook which is a web framework library used by Flask.", "tokens": [406, 1951, 3235, 3863, 309, 311, 1951, 6603, 57, 1212, 597, 307, 257, 3670, 8388, 6405, 1143, 538, 3235, 3863, 13], "temperature": 0.0, "avg_logprob": -0.19964770994324615, "compression_ratio": 1.5195530726256983, "no_speech_prob": 7.305443432414904e-05}, {"id": 96, "seek": 53240, "start": 554.64, "end": 560.16, "text": " But we can find something similar we have this run with reloader function that takes", "tokens": [583, 321, 393, 915, 746, 2531, 321, 362, 341, 1190, 365, 25628, 260, 2445, 300, 2516], "temperature": 0.0, "avg_logprob": -0.19964770994324615, "compression_ratio": 1.5195530726256983, "no_speech_prob": 7.305443432414904e-05}, {"id": 97, "seek": 56016, "start": 560.16, "end": 568.88, "text": " a main function as an argument it does a register to the same signal as Django and then it starts", "tokens": [257, 2135, 2445, 382, 364, 6770, 309, 775, 257, 7280, 281, 264, 912, 6358, 382, 33464, 17150, 293, 550, 309, 3719], "temperature": 0.0, "avg_logprob": -0.1407130595003621, "compression_ratio": 1.84, "no_speech_prob": 8.886296564014629e-05}, {"id": 98, "seek": 56016, "start": 568.88, "end": 576.68, "text": " a thread here with the main function and it launches the thread here and if we look at", "tokens": [257, 7207, 510, 365, 264, 2135, 2445, 293, 309, 31841, 264, 7207, 510, 293, 498, 321, 574, 412], "temperature": 0.0, "avg_logprob": -0.1407130595003621, "compression_ratio": 1.84, "no_speech_prob": 8.886296564014629e-05}, {"id": 99, "seek": 56016, "start": 576.68, "end": 582.36, "text": " the reloader this it comes from this reloader loops and when looking at it we can see that", "tokens": [264, 25628, 260, 341, 309, 1487, 490, 341, 25628, 260, 16121, 293, 562, 1237, 412, 309, 321, 393, 536, 300], "temperature": 0.0, "avg_logprob": -0.1407130595003621, "compression_ratio": 1.84, "no_speech_prob": 8.886296564014629e-05}, {"id": 100, "seek": 56016, "start": 582.36, "end": 587.9599999999999, "text": " it's also using something similar a stat reloader and a watchdog reloader and these are very", "tokens": [309, 311, 611, 1228, 746, 2531, 257, 2219, 25628, 260, 293, 257, 1159, 14833, 25628, 260, 293, 613, 366, 588], "temperature": 0.0, "avg_logprob": -0.1407130595003621, "compression_ratio": 1.84, "no_speech_prob": 8.886296564014629e-05}, {"id": 101, "seek": 58796, "start": 587.96, "end": 594.12, "text": " similar to those used in Django so we can assume that the behavior is identical even", "tokens": [2531, 281, 729, 1143, 294, 33464, 17150, 370, 321, 393, 6552, 300, 264, 5223, 307, 14800, 754], "temperature": 0.0, "avg_logprob": -0.17607857909383653, "compression_ratio": 1.5123152709359606, "no_speech_prob": 6.1009643104625866e-05}, {"id": 102, "seek": 58796, "start": 594.12, "end": 599.08, "text": " if the codebase is different here.", "tokens": [498, 264, 3089, 17429, 307, 819, 510, 13], "temperature": 0.0, "avg_logprob": -0.17607857909383653, "compression_ratio": 1.5123152709359606, "no_speech_prob": 6.1009643104625866e-05}, {"id": 103, "seek": 58796, "start": 599.08, "end": 607.88, "text": " So both Django and Flask use these watchman or watchdog reloaders under the hood but how", "tokens": [407, 1293, 33464, 17150, 293, 3235, 3863, 764, 613, 1159, 1601, 420, 1159, 14833, 25628, 433, 833, 264, 13376, 457, 577], "temperature": 0.0, "avg_logprob": -0.17607857909383653, "compression_ratio": 1.5123152709359606, "no_speech_prob": 6.1009643104625866e-05}, {"id": 104, "seek": 58796, "start": 607.88, "end": 609.6, "text": " do these work?", "tokens": [360, 613, 589, 30], "temperature": 0.0, "avg_logprob": -0.17607857909383653, "compression_ratio": 1.5123152709359606, "no_speech_prob": 6.1009643104625866e-05}, {"id": 105, "seek": 58796, "start": 609.6, "end": 614.1600000000001, "text": " Well there is something called iNotify on Linux and there are similar APIs on other", "tokens": [1042, 456, 307, 746, 1219, 741, 15208, 2505, 322, 18734, 293, 456, 366, 2531, 21445, 322, 661], "temperature": 0.0, "avg_logprob": -0.17607857909383653, "compression_ratio": 1.5123152709359606, "no_speech_prob": 6.1009643104625866e-05}, {"id": 106, "seek": 61416, "start": 614.16, "end": 621.04, "text": " other platforms that allow you or your process is to watch for file system events and receive", "tokens": [661, 9473, 300, 2089, 291, 420, 428, 1399, 307, 281, 1159, 337, 3991, 1185, 3931, 293, 4774], "temperature": 0.0, "avg_logprob": -0.16214574741411814, "compression_ratio": 1.6291079812206573, "no_speech_prob": 8.201901073334739e-05}, {"id": 107, "seek": 61416, "start": 621.04, "end": 626.0799999999999, "text": " a notification without having to constantly look if something has changed.", "tokens": [257, 11554, 1553, 1419, 281, 6460, 574, 498, 746, 575, 3105, 13], "temperature": 0.0, "avg_logprob": -0.16214574741411814, "compression_ratio": 1.6291079812206573, "no_speech_prob": 8.201901073334739e-05}, {"id": 108, "seek": 61416, "start": 626.0799999999999, "end": 630.64, "text": " On Linux it's iNotify which you can use directly from the library piNotify if you're using", "tokens": [1282, 18734, 309, 311, 741, 15208, 2505, 597, 291, 393, 764, 3838, 490, 264, 6405, 3895, 15208, 2505, 498, 291, 434, 1228], "temperature": 0.0, "avg_logprob": -0.16214574741411814, "compression_ratio": 1.6291079812206573, "no_speech_prob": 8.201901073334739e-05}, {"id": 109, "seek": 61416, "start": 630.64, "end": 636.9599999999999, "text": " Python or there is this library called watchdog that you can use on all main platforms.", "tokens": [15329, 420, 456, 307, 341, 6405, 1219, 1159, 14833, 300, 291, 393, 764, 322, 439, 2135, 9473, 13], "temperature": 0.0, "avg_logprob": -0.16214574741411814, "compression_ratio": 1.6291079812206573, "no_speech_prob": 8.201901073334739e-05}, {"id": 110, "seek": 63696, "start": 636.96, "end": 645.6800000000001, "text": " The way the interface to use watchdog looks like this so you can create an observer that", "tokens": [440, 636, 264, 9226, 281, 764, 1159, 14833, 1542, 411, 341, 370, 291, 393, 1884, 364, 27878, 300], "temperature": 0.0, "avg_logprob": -0.12146451613482306, "compression_ratio": 1.643835616438356, "no_speech_prob": 3.876108894473873e-05}, {"id": 111, "seek": 63696, "start": 645.6800000000001, "end": 652.32, "text": " is in charge of receiving these signals and will run in a thread in the background and", "tokens": [307, 294, 4602, 295, 10040, 613, 12354, 293, 486, 1190, 294, 257, 7207, 294, 264, 3678, 293], "temperature": 0.0, "avg_logprob": -0.12146451613482306, "compression_ratio": 1.643835616438356, "no_speech_prob": 3.876108894473873e-05}, {"id": 112, "seek": 63696, "start": 652.32, "end": 659.76, "text": " you can then schedule some handlers on it and say well I want to register for example recursively", "tokens": [291, 393, 550, 7567, 512, 1011, 11977, 322, 309, 293, 584, 731, 286, 528, 281, 7280, 337, 1365, 20560, 3413], "temperature": 0.0, "avg_logprob": -0.12146451613482306, "compression_ratio": 1.643835616438356, "no_speech_prob": 3.876108894473873e-05}, {"id": 113, "seek": 63696, "start": 659.76, "end": 666.6, "text": " if you're looking for on a folder or not and then just start it and it will work using", "tokens": [498, 291, 434, 1237, 337, 322, 257, 10820, 420, 406, 293, 550, 445, 722, 309, 293, 309, 486, 589, 1228], "temperature": 0.0, "avg_logprob": -0.12146451613482306, "compression_ratio": 1.643835616438356, "no_speech_prob": 3.876108894473873e-05}, {"id": 114, "seek": 66660, "start": 666.6, "end": 672.24, "text": " a callback based approach.", "tokens": [257, 818, 3207, 2361, 3109, 13], "temperature": 0.0, "avg_logprob": -0.15661436551577085, "compression_ratio": 1.5408163265306123, "no_speech_prob": 4.9701255193213e-05}, {"id": 115, "seek": 66660, "start": 672.24, "end": 676.5600000000001, "text": " Because it runs in the background I added this input at the end just to make the program", "tokens": [1436, 309, 6676, 294, 264, 3678, 286, 3869, 341, 4846, 412, 264, 917, 445, 281, 652, 264, 1461], "temperature": 0.0, "avg_logprob": -0.15661436551577085, "compression_ratio": 1.5408163265306123, "no_speech_prob": 4.9701255193213e-05}, {"id": 116, "seek": 66660, "start": 676.5600000000001, "end": 683.64, "text": " block and to be able to see something before Python exits.", "tokens": [3461, 293, 281, 312, 1075, 281, 536, 746, 949, 15329, 44183, 13], "temperature": 0.0, "avg_logprob": -0.15661436551577085, "compression_ratio": 1.5408163265306123, "no_speech_prob": 4.9701255193213e-05}, {"id": 117, "seek": 66660, "start": 683.64, "end": 689.24, "text": " Let's now look at hot code reloading so in this case we want to keep the process running", "tokens": [961, 311, 586, 574, 412, 2368, 3089, 25628, 278, 370, 294, 341, 1389, 321, 528, 281, 1066, 264, 1399, 2614], "temperature": 0.0, "avg_logprob": -0.15661436551577085, "compression_ratio": 1.5408163265306123, "no_speech_prob": 4.9701255193213e-05}, {"id": 118, "seek": 66660, "start": 689.24, "end": 692.52, "text": " we want to replace the code in memory.", "tokens": [321, 528, 281, 7406, 264, 3089, 294, 4675, 13], "temperature": 0.0, "avg_logprob": -0.15661436551577085, "compression_ratio": 1.5408163265306123, "no_speech_prob": 4.9701255193213e-05}, {"id": 119, "seek": 69252, "start": 692.52, "end": 698.24, "text": " We hope it won't crash the program this might happen if we have inconsistencies and the new", "tokens": [492, 1454, 309, 1582, 380, 8252, 264, 1461, 341, 1062, 1051, 498, 321, 362, 22039, 4821, 4629, 293, 264, 777], "temperature": 0.0, "avg_logprob": -0.11000121207464308, "compression_ratio": 1.6893203883495145, "no_speech_prob": 1.69495015143184e-05}, {"id": 120, "seek": 69252, "start": 698.24, "end": 704.3199999999999, "text": " code is not compatible with the existing one or the existing state and we want to take", "tokens": [3089, 307, 406, 18218, 365, 264, 6741, 472, 420, 264, 6741, 1785, 293, 321, 528, 281, 747], "temperature": 0.0, "avg_logprob": -0.11000121207464308, "compression_ratio": 1.6893203883495145, "no_speech_prob": 1.69495015143184e-05}, {"id": 121, "seek": 69252, "start": 704.3199999999999, "end": 711.92, "text": " advantage of the fact that it keeps the state and it's really fast to do this.", "tokens": [5002, 295, 264, 1186, 300, 309, 5965, 264, 1785, 293, 309, 311, 534, 2370, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.11000121207464308, "compression_ratio": 1.6893203883495145, "no_speech_prob": 1.69495015143184e-05}, {"id": 122, "seek": 69252, "start": 711.92, "end": 717.56, "text": " There are two challenges in this case one is we need to find and load the new code because", "tokens": [821, 366, 732, 4759, 294, 341, 1389, 472, 307, 321, 643, 281, 915, 293, 3677, 264, 777, 3089, 570], "temperature": 0.0, "avg_logprob": -0.11000121207464308, "compression_ratio": 1.6893203883495145, "no_speech_prob": 1.69495015143184e-05}, {"id": 123, "seek": 71756, "start": 717.56, "end": 723.16, "text": " if you're just reloading everything you might as well restart the entire program and we", "tokens": [498, 291, 434, 445, 25628, 278, 1203, 291, 1062, 382, 731, 21022, 264, 2302, 1461, 293, 321], "temperature": 0.0, "avg_logprob": -0.10424379759196993, "compression_ratio": 1.7230769230769232, "no_speech_prob": 7.004218059591949e-05}, {"id": 124, "seek": 71756, "start": 723.16, "end": 731.7199999999999, "text": " need to replace the references so in Python you can pass a lot of objects as variables", "tokens": [643, 281, 7406, 264, 15400, 370, 294, 15329, 291, 393, 1320, 257, 688, 295, 6565, 382, 9102], "temperature": 0.0, "avg_logprob": -0.10424379759196993, "compression_ratio": 1.7230769230769232, "no_speech_prob": 7.004218059591949e-05}, {"id": 125, "seek": 71756, "start": 731.7199999999999, "end": 737.8, "text": " and you can have references to these objects in many places and we need to find all these", "tokens": [293, 291, 393, 362, 15400, 281, 613, 6565, 294, 867, 3190, 293, 321, 643, 281, 915, 439, 613], "temperature": 0.0, "avg_logprob": -0.10424379759196993, "compression_ratio": 1.7230769230769232, "no_speech_prob": 7.004218059591949e-05}, {"id": 126, "seek": 71756, "start": 737.8, "end": 745.7199999999999, "text": " places to be able to make them use the new code instead of the old one.", "tokens": [3190, 281, 312, 1075, 281, 652, 552, 764, 264, 777, 3089, 2602, 295, 264, 1331, 472, 13], "temperature": 0.0, "avg_logprob": -0.10424379759196993, "compression_ratio": 1.7230769230769232, "no_speech_prob": 7.004218059591949e-05}, {"id": 127, "seek": 74572, "start": 745.72, "end": 750.12, "text": " There are other languages that also allow this kind of hot code reloading.", "tokens": [821, 366, 661, 8650, 300, 611, 2089, 341, 733, 295, 2368, 3089, 25628, 278, 13], "temperature": 0.0, "avg_logprob": -0.15758036495594496, "compression_ratio": 1.6593886462882097, "no_speech_prob": 5.517423414858058e-05}, {"id": 128, "seek": 74572, "start": 750.12, "end": 756.6, "text": " In Java for example you have this functionality called hot swap which basically allows you", "tokens": [682, 10745, 337, 1365, 291, 362, 341, 14980, 1219, 2368, 18135, 597, 1936, 4045, 291], "temperature": 0.0, "avg_logprob": -0.15758036495594496, "compression_ratio": 1.6593886462882097, "no_speech_prob": 5.517423414858058e-05}, {"id": 129, "seek": 74572, "start": 756.6, "end": 763.44, "text": " via the debugger to specify a class and ask the virtual machine to replace the class with", "tokens": [5766, 264, 24083, 1321, 281, 16500, 257, 1508, 293, 1029, 264, 6374, 3479, 281, 7406, 264, 1508, 365], "temperature": 0.0, "avg_logprob": -0.15758036495594496, "compression_ratio": 1.6593886462882097, "no_speech_prob": 5.517423414858058e-05}, {"id": 130, "seek": 74572, "start": 763.44, "end": 768.24, "text": " the new compiled code from a class file.", "tokens": [264, 777, 36548, 3089, 490, 257, 1508, 3991, 13], "temperature": 0.0, "avg_logprob": -0.15758036495594496, "compression_ratio": 1.6593886462882097, "no_speech_prob": 5.517423414858058e-05}, {"id": 131, "seek": 74572, "start": 768.24, "end": 774.9200000000001, "text": " In C and C++ you have DLL code reloading that allows you to reload a dynamic linked", "tokens": [682, 383, 293, 383, 25472, 291, 362, 413, 24010, 3089, 25628, 278, 300, 4045, 291, 281, 25628, 257, 8546, 9408], "temperature": 0.0, "avg_logprob": -0.15758036495594496, "compression_ratio": 1.6593886462882097, "no_speech_prob": 5.517423414858058e-05}, {"id": 132, "seek": 77492, "start": 774.92, "end": 777.28, "text": " library or shared library.", "tokens": [6405, 420, 5507, 6405, 13], "temperature": 0.0, "avg_logprob": -0.16703996022542317, "compression_ratio": 1.613861386138614, "no_speech_prob": 4.0645216358825564e-05}, {"id": 133, "seek": 77492, "start": 777.28, "end": 782.0799999999999, "text": " In this case as well they need to share the same interface, they need to expose the same", "tokens": [682, 341, 1389, 382, 731, 436, 643, 281, 2073, 264, 912, 9226, 11, 436, 643, 281, 19219, 264, 912], "temperature": 0.0, "avg_logprob": -0.16703996022542317, "compression_ratio": 1.613861386138614, "no_speech_prob": 4.0645216358825564e-05}, {"id": 134, "seek": 77492, "start": 782.0799999999999, "end": 788.24, "text": " functions and classes and methods that the previous version did.", "tokens": [6828, 293, 5359, 293, 7150, 300, 264, 3894, 3037, 630, 13], "temperature": 0.0, "avg_logprob": -0.16703996022542317, "compression_ratio": 1.613861386138614, "no_speech_prob": 4.0645216358825564e-05}, {"id": 135, "seek": 77492, "start": 788.24, "end": 797.36, "text": " There are some changes that you're not allowed to because then it would break the compatibility.", "tokens": [821, 366, 512, 2962, 300, 291, 434, 406, 4350, 281, 570, 550, 309, 576, 1821, 264, 34237, 13], "temperature": 0.0, "avg_logprob": -0.16703996022542317, "compression_ratio": 1.613861386138614, "no_speech_prob": 4.0645216358825564e-05}, {"id": 136, "seek": 77492, "start": 797.36, "end": 802.8, "text": " In Python there are three ways of loading codes.", "tokens": [682, 15329, 456, 366, 1045, 2098, 295, 15114, 14211, 13], "temperature": 0.0, "avg_logprob": -0.16703996022542317, "compression_ratio": 1.613861386138614, "no_speech_prob": 4.0645216358825564e-05}, {"id": 137, "seek": 80280, "start": 802.8, "end": 807.9599999999999, "text": " One is eval that allows you to evaluate a function and that one is not very useful in", "tokens": [1485, 307, 1073, 304, 300, 4045, 291, 281, 13059, 257, 2445, 293, 300, 472, 307, 406, 588, 4420, 294], "temperature": 0.0, "avg_logprob": -0.10268675047775795, "compression_ratio": 1.6912442396313363, "no_speech_prob": 6.281551031861454e-05}, {"id": 138, "seek": 80280, "start": 807.9599999999999, "end": 808.9599999999999, "text": " our use case.", "tokens": [527, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.10268675047775795, "compression_ratio": 1.6912442396313363, "no_speech_prob": 6.281551031861454e-05}, {"id": 139, "seek": 80280, "start": 808.9599999999999, "end": 816.56, "text": " However the other two methods do work and they both have their advantages and disadvantages.", "tokens": [2908, 264, 661, 732, 7150, 360, 589, 293, 436, 1293, 362, 641, 14906, 293, 37431, 13], "temperature": 0.0, "avg_logprob": -0.10268675047775795, "compression_ratio": 1.6912442396313363, "no_speech_prob": 6.281551031861454e-05}, {"id": 140, "seek": 80280, "start": 816.56, "end": 822.16, "text": " The first one is the import module that you are using when you are importing a library", "tokens": [440, 700, 472, 307, 264, 974, 10088, 300, 291, 366, 1228, 562, 291, 366, 43866, 257, 6405], "temperature": 0.0, "avg_logprob": -0.10268675047775795, "compression_ratio": 1.6912442396313363, "no_speech_prob": 6.281551031861454e-05}, {"id": 141, "seek": 80280, "start": 822.16, "end": 829.76, "text": " and in a way similar to the DLL libraries you can reload a module that has already been", "tokens": [293, 294, 257, 636, 2531, 281, 264, 413, 24010, 15148, 291, 393, 25628, 257, 10088, 300, 575, 1217, 668], "temperature": 0.0, "avg_logprob": -0.10268675047775795, "compression_ratio": 1.6912442396313363, "no_speech_prob": 6.281551031861454e-05}, {"id": 142, "seek": 82976, "start": 829.76, "end": 837.72, "text": " loaded and have the new version replace the old one and exec allows you to execute just", "tokens": [13210, 293, 362, 264, 777, 3037, 7406, 264, 1331, 472, 293, 4454, 4045, 291, 281, 14483, 445], "temperature": 0.0, "avg_logprob": -0.16036174236199793, "compression_ratio": 1.6613756613756614, "no_speech_prob": 3.849497079499997e-05}, {"id": 143, "seek": 82976, "start": 837.72, "end": 843.64, "text": " any Python code from string which can also be used in some cases.", "tokens": [604, 15329, 3089, 490, 6798, 597, 393, 611, 312, 1143, 294, 512, 3331, 13], "temperature": 0.0, "avg_logprob": -0.16036174236199793, "compression_ratio": 1.6613756613756614, "no_speech_prob": 3.849497079499997e-05}, {"id": 144, "seek": 82976, "start": 843.64, "end": 848.96, "text": " What you see here is on the left a text editor with some Python code and on the right a Python", "tokens": [708, 291, 536, 510, 307, 322, 264, 1411, 257, 2487, 9839, 365, 512, 15329, 3089, 293, 322, 264, 558, 257, 15329], "temperature": 0.0, "avg_logprob": -0.16036174236199793, "compression_ratio": 1.6613756613756614, "no_speech_prob": 3.849497079499997e-05}, {"id": 145, "seek": 82976, "start": 848.96, "end": 849.96, "text": " console.", "tokens": [11076, 13], "temperature": 0.0, "avg_logprob": -0.16036174236199793, "compression_ratio": 1.6613756613756614, "no_speech_prob": 3.849497079499997e-05}, {"id": 146, "seek": 82976, "start": 849.96, "end": 854.88, "text": " So the standard way to load Python code is using import.", "tokens": [407, 264, 3832, 636, 281, 3677, 15329, 3089, 307, 1228, 974, 13], "temperature": 0.0, "avg_logprob": -0.16036174236199793, "compression_ratio": 1.6613756613756614, "no_speech_prob": 3.849497079499997e-05}, {"id": 147, "seek": 85488, "start": 854.88, "end": 861.56, "text": " I will import my module and then I can call module.sayhello and it will just run it.", "tokens": [286, 486, 974, 452, 10088, 293, 550, 286, 393, 818, 10088, 13, 21664, 675, 1913, 293, 309, 486, 445, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.21026278275709887, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.0001369787350995466}, {"id": 148, "seek": 85488, "start": 861.56, "end": 869.24, "text": " If I change the source code say hello will still be at the old version as expected.", "tokens": [759, 286, 1319, 264, 4009, 3089, 584, 7751, 486, 920, 312, 412, 264, 1331, 3037, 382, 5176, 13], "temperature": 0.0, "avg_logprob": -0.21026278275709887, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.0001369787350995466}, {"id": 149, "seek": 85488, "start": 869.24, "end": 875.84, "text": " There is however a library we can use with in Python to reload this module from import", "tokens": [821, 307, 4461, 257, 6405, 321, 393, 764, 365, 294, 15329, 281, 25628, 341, 10088, 490, 974], "temperature": 0.0, "avg_logprob": -0.21026278275709887, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.0001369787350995466}, {"id": 150, "seek": 87584, "start": 875.84, "end": 886.52, "text": " lib and we can reload here module.", "tokens": [22854, 293, 321, 393, 25628, 510, 10088, 13], "temperature": 0.0, "avg_logprob": -0.19163349439513008, "compression_ratio": 1.5597014925373134, "no_speech_prob": 0.00012091355893062428}, {"id": 151, "seek": 87584, "start": 886.52, "end": 892.2, "text": " And now if we call our function again we can see that we have the new version.", "tokens": [400, 586, 498, 321, 818, 527, 2445, 797, 321, 393, 536, 300, 321, 362, 264, 777, 3037, 13], "temperature": 0.0, "avg_logprob": -0.19163349439513008, "compression_ratio": 1.5597014925373134, "no_speech_prob": 0.00012091355893062428}, {"id": 152, "seek": 87584, "start": 892.2, "end": 898.24, "text": " However if we have a reference to this function then it's a bit trickier because that reference", "tokens": [2908, 498, 321, 362, 257, 6408, 281, 341, 2445, 550, 309, 311, 257, 857, 4282, 811, 570, 300, 6408], "temperature": 0.0, "avg_logprob": -0.19163349439513008, "compression_ratio": 1.5597014925373134, "no_speech_prob": 0.00012091355893062428}, {"id": 153, "seek": 89824, "start": 898.24, "end": 913.64, "text": " will not be updated say we have say equals module.sayhello when we call say we will still", "tokens": [486, 406, 312, 10588, 584, 321, 362, 584, 6915, 10088, 13, 21664, 675, 1913, 562, 321, 818, 584, 321, 486, 920], "temperature": 0.0, "avg_logprob": -0.2144252359867096, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.00012910531950183213}, {"id": 154, "seek": 89824, "start": 913.64, "end": 916.16, "text": " be calling this function.", "tokens": [312, 5141, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2144252359867096, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.00012910531950183213}, {"id": 155, "seek": 91616, "start": 916.16, "end": 928.8, "text": " Now let's update the source code and reload the code module.sayhello has the new version", "tokens": [823, 718, 311, 5623, 264, 4009, 3089, 293, 25628, 264, 3089, 10088, 13, 21664, 675, 1913, 575, 264, 777, 3037], "temperature": 0.0, "avg_logprob": -0.16903626291375412, "compression_ratio": 1.6684491978609626, "no_speech_prob": 4.683669612859376e-05}, {"id": 156, "seek": 91616, "start": 928.8, "end": 932.1999999999999, "text": " however say is still using the old version.", "tokens": [4461, 584, 307, 920, 1228, 264, 1331, 3037, 13], "temperature": 0.0, "avg_logprob": -0.16903626291375412, "compression_ratio": 1.6684491978609626, "no_speech_prob": 4.683669612859376e-05}, {"id": 157, "seek": 91616, "start": 932.1999999999999, "end": 937.48, "text": " So now we have one version that doesn't exist on the file system anymore the previous version", "tokens": [407, 586, 321, 362, 472, 3037, 300, 1177, 380, 2514, 322, 264, 3991, 1185, 3602, 264, 3894, 3037], "temperature": 0.0, "avg_logprob": -0.16903626291375412, "compression_ratio": 1.6684491978609626, "no_speech_prob": 4.683669612859376e-05}, {"id": 158, "seek": 91616, "start": 937.48, "end": 942.0, "text": " but it's still in memory it's still loaded and this is something we have to take care", "tokens": [457, 309, 311, 920, 294, 4675, 309, 311, 920, 13210, 293, 341, 307, 746, 321, 362, 281, 747, 1127], "temperature": 0.0, "avg_logprob": -0.16903626291375412, "compression_ratio": 1.6684491978609626, "no_speech_prob": 4.683669612859376e-05}, {"id": 159, "seek": 94200, "start": 942.0, "end": 949.6, "text": " about to be careful about when we're doing hot code reloading.", "tokens": [466, 281, 312, 5026, 466, 562, 321, 434, 884, 2368, 3089, 25628, 278, 13], "temperature": 0.0, "avg_logprob": -0.17246890348546645, "compression_ratio": 1.6956521739130435, "no_speech_prob": 1.4966652088332921e-05}, {"id": 160, "seek": 94200, "start": 949.6, "end": 956.92, "text": " In practice however sometimes we are facing code that's not optimal for the reloading", "tokens": [682, 3124, 4461, 2171, 321, 366, 7170, 3089, 300, 311, 406, 16252, 337, 264, 25628, 278], "temperature": 0.0, "avg_logprob": -0.17246890348546645, "compression_ratio": 1.6956521739130435, "no_speech_prob": 1.4966652088332921e-05}, {"id": 161, "seek": 94200, "start": 956.92, "end": 958.76, "text": " that we were just seeing.", "tokens": [300, 321, 645, 445, 2577, 13], "temperature": 0.0, "avg_logprob": -0.17246890348546645, "compression_ratio": 1.6956521739130435, "no_speech_prob": 1.4966652088332921e-05}, {"id": 162, "seek": 94200, "start": 958.76, "end": 963.88, "text": " For example here we have a connection to a database that's initialized as a singleton", "tokens": [1171, 1365, 510, 321, 362, 257, 4984, 281, 257, 8149, 300, 311, 5883, 1602, 382, 257, 1522, 14806], "temperature": 0.0, "avg_logprob": -0.17246890348546645, "compression_ratio": 1.6956521739130435, "no_speech_prob": 1.4966652088332921e-05}, {"id": 163, "seek": 94200, "start": 963.88, "end": 970.88, "text": " and this is a pattern we see in a lot of code where that connection is created just within", "tokens": [293, 341, 307, 257, 5102, 321, 536, 294, 257, 688, 295, 3089, 689, 300, 4984, 307, 2942, 445, 1951], "temperature": 0.0, "avg_logprob": -0.17246890348546645, "compression_ratio": 1.6956521739130435, "no_speech_prob": 1.4966652088332921e-05}, {"id": 164, "seek": 97088, "start": 970.88, "end": 974.48, "text": " the module and so it's executed every time we import it.", "tokens": [264, 10088, 293, 370, 309, 311, 17577, 633, 565, 321, 974, 309, 13], "temperature": 0.0, "avg_logprob": -0.1124620841721357, "compression_ratio": 1.5616438356164384, "no_speech_prob": 8.704551146365702e-05}, {"id": 165, "seek": 97088, "start": 974.48, "end": 982.4, "text": " So the first time we import our module it will take some time to initialize it.", "tokens": [407, 264, 700, 565, 321, 974, 527, 10088, 309, 486, 747, 512, 565, 281, 5883, 1125, 309, 13], "temperature": 0.0, "avg_logprob": -0.1124620841721357, "compression_ratio": 1.5616438356164384, "no_speech_prob": 8.704551146365702e-05}, {"id": 166, "seek": 97088, "start": 982.4, "end": 995.28, "text": " We can now call our function say hello let's say we want to update the code of our function", "tokens": [492, 393, 586, 818, 527, 2445, 584, 7751, 718, 311, 584, 321, 528, 281, 5623, 264, 3089, 295, 527, 2445], "temperature": 0.0, "avg_logprob": -0.1124620841721357, "compression_ratio": 1.5616438356164384, "no_speech_prob": 8.704551146365702e-05}, {"id": 167, "seek": 99528, "start": 995.28, "end": 1005.36, "text": " we need to reload it so we can use importlib.reload module 2 and again we have to pay the cost", "tokens": [321, 643, 281, 25628, 309, 370, 321, 393, 764, 974, 38270, 13, 265, 2907, 10088, 568, 293, 797, 321, 362, 281, 1689, 264, 2063], "temperature": 0.0, "avg_logprob": -0.1193019203517748, "compression_ratio": 1.5903614457831325, "no_speech_prob": 5.218185833655298e-05}, {"id": 168, "seek": 99528, "start": 1005.36, "end": 1011.24, "text": " of the time to establish this connection and now we have the new value working.", "tokens": [295, 264, 565, 281, 8327, 341, 4984, 293, 586, 321, 362, 264, 777, 2158, 1364, 13], "temperature": 0.0, "avg_logprob": -0.1193019203517748, "compression_ratio": 1.5903614457831325, "no_speech_prob": 5.218185833655298e-05}, {"id": 169, "seek": 99528, "start": 1011.24, "end": 1020.1999999999999, "text": " So in this case this use of importlib.reload can be quite painful here we are just facing", "tokens": [407, 294, 341, 1389, 341, 764, 295, 974, 38270, 13, 265, 2907, 393, 312, 1596, 11697, 510, 321, 366, 445, 7170], "temperature": 0.0, "avg_logprob": -0.1193019203517748, "compression_ratio": 1.5903614457831325, "no_speech_prob": 5.218185833655298e-05}, {"id": 170, "seek": 102020, "start": 1020.2, "end": 1025.64, "text": " a delay but sometimes there are also thresholds, limits, there are ports that are still appearing", "tokens": [257, 8577, 457, 2171, 456, 366, 611, 14678, 82, 11, 10406, 11, 456, 366, 18160, 300, 366, 920, 19870], "temperature": 0.0, "avg_logprob": -0.15170658395645467, "compression_ratio": 1.6846846846846846, "no_speech_prob": 9.296606731368229e-05}, {"id": 171, "seek": 102020, "start": 1025.64, "end": 1032.92, "text": " as busy, there are other issues that we can face that make this approach more difficult.", "tokens": [382, 5856, 11, 456, 366, 661, 2663, 300, 321, 393, 1851, 300, 652, 341, 3109, 544, 2252, 13], "temperature": 0.0, "avg_logprob": -0.15170658395645467, "compression_ratio": 1.6846846846846846, "no_speech_prob": 9.296606731368229e-05}, {"id": 172, "seek": 102020, "start": 1032.92, "end": 1038.28, "text": " If you can use it it's really nice because it's really simple it's all built-in in Python", "tokens": [759, 291, 393, 764, 309, 309, 311, 534, 1481, 570, 309, 311, 534, 2199, 309, 311, 439, 3094, 12, 259, 294, 15329], "temperature": 0.0, "avg_logprob": -0.15170658395645467, "compression_ratio": 1.6846846846846846, "no_speech_prob": 9.296606731368229e-05}, {"id": 173, "seek": 102020, "start": 1038.28, "end": 1045.52, "text": " and it's just one line so go for it but it's not always optimal in some kind of complex", "tokens": [293, 309, 311, 445, 472, 1622, 370, 352, 337, 309, 457, 309, 311, 406, 1009, 16252, 294, 512, 733, 295, 3997], "temperature": 0.0, "avg_logprob": -0.15170658395645467, "compression_ratio": 1.6846846846846846, "no_speech_prob": 9.296606731368229e-05}, {"id": 174, "seek": 102020, "start": 1045.52, "end": 1049.44, "text": " software.", "tokens": [4722, 13], "temperature": 0.0, "avg_logprob": -0.15170658395645467, "compression_ratio": 1.6846846846846846, "no_speech_prob": 9.296606731368229e-05}, {"id": 175, "seek": 104944, "start": 1049.44, "end": 1055.96, "text": " There is however another approach we can use to reload this function say hello without", "tokens": [821, 307, 4461, 1071, 3109, 321, 393, 764, 281, 25628, 341, 2445, 584, 7751, 1553], "temperature": 0.0, "avg_logprob": -0.10760699646382392, "compression_ratio": 1.803191489361702, "no_speech_prob": 2.3910704840091057e-05}, {"id": 176, "seek": 104944, "start": 1055.96, "end": 1064.4, "text": " going through the reloading of the database and this is the idea here is to go get the", "tokens": [516, 807, 264, 25628, 278, 295, 264, 8149, 293, 341, 307, 264, 1558, 510, 307, 281, 352, 483, 264], "temperature": 0.0, "avg_logprob": -0.10760699646382392, "compression_ratio": 1.803191489361702, "no_speech_prob": 2.3910704840091057e-05}, {"id": 177, "seek": 104944, "start": 1064.4, "end": 1070.88, "text": " new value of the source code and then to execute that using the function exec.", "tokens": [777, 2158, 295, 264, 4009, 3089, 293, 550, 281, 14483, 300, 1228, 264, 2445, 4454, 13], "temperature": 0.0, "avg_logprob": -0.10760699646382392, "compression_ratio": 1.803191489361702, "no_speech_prob": 2.3910704840091057e-05}, {"id": 178, "seek": 104944, "start": 1070.88, "end": 1075.52, "text": " So for the first step we need to get access to the source code of a function and there", "tokens": [407, 337, 264, 700, 1823, 321, 643, 281, 483, 2105, 281, 264, 4009, 3089, 295, 257, 2445, 293, 456], "temperature": 0.0, "avg_logprob": -0.10760699646382392, "compression_ratio": 1.803191489361702, "no_speech_prob": 2.3910704840091057e-05}, {"id": 179, "seek": 107552, "start": 1075.52, "end": 1083.68, "text": " is a tool for that in Python in the library inspect so I will just import inspect and", "tokens": [307, 257, 2290, 337, 300, 294, 15329, 294, 264, 6405, 15018, 370, 286, 486, 445, 974, 15018, 293], "temperature": 0.0, "avg_logprob": -0.18253317035612512, "compression_ratio": 1.4675324675324675, "no_speech_prob": 0.00012326274008955806}, {"id": 180, "seek": 107552, "start": 1083.68, "end": 1092.8, "text": " then I can use inspect.getSource of module 2.sayHello.", "tokens": [550, 286, 393, 764, 15018, 13, 847, 50, 2948, 295, 10088, 568, 13, 21664, 15947, 13], "temperature": 0.0, "avg_logprob": -0.18253317035612512, "compression_ratio": 1.4675324675324675, "no_speech_prob": 0.00012326274008955806}, {"id": 181, "seek": 107552, "start": 1092.8, "end": 1097.48, "text": " I have the source code of the function and the really cool thing here is that if I do", "tokens": [286, 362, 264, 4009, 3089, 295, 264, 2445, 293, 264, 534, 1627, 551, 510, 307, 300, 498, 286, 360], "temperature": 0.0, "avg_logprob": -0.18253317035612512, "compression_ratio": 1.4675324675324675, "no_speech_prob": 0.00012326274008955806}, {"id": 182, "seek": 109748, "start": 1097.48, "end": 1106.96, "text": " add some code for example I add pass here and then I do a return here and let's do some", "tokens": [909, 512, 3089, 337, 1365, 286, 909, 1320, 510, 293, 550, 286, 360, 257, 2736, 510, 293, 718, 311, 360, 512], "temperature": 0.0, "avg_logprob": -0.16387369662900514, "compression_ratio": 1.6120218579234973, "no_speech_prob": 6.106748332967982e-05}, {"id": 183, "seek": 109748, "start": 1106.96, "end": 1114.68, "text": " more changes, let's do it, call it again and we can see here that this function gets source", "tokens": [544, 2962, 11, 718, 311, 360, 309, 11, 818, 309, 797, 293, 321, 393, 536, 510, 300, 341, 2445, 2170, 4009], "temperature": 0.0, "avg_logprob": -0.16387369662900514, "compression_ratio": 1.6120218579234973, "no_speech_prob": 6.106748332967982e-05}, {"id": 184, "seek": 109748, "start": 1114.68, "end": 1120.72, "text": " gets the new value of the code and not the old one so it's quite smart there which is", "tokens": [2170, 264, 777, 2158, 295, 264, 3089, 293, 406, 264, 1331, 472, 370, 309, 311, 1596, 4069, 456, 597, 307], "temperature": 0.0, "avg_logprob": -0.16387369662900514, "compression_ratio": 1.6120218579234973, "no_speech_prob": 6.106748332967982e-05}, {"id": 185, "seek": 109748, "start": 1120.72, "end": 1123.1200000000001, "text": " really handy in our use case.", "tokens": [534, 13239, 294, 527, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.16387369662900514, "compression_ratio": 1.6120218579234973, "no_speech_prob": 6.106748332967982e-05}, {"id": 186, "seek": 112312, "start": 1123.12, "end": 1129.36, "text": " So we now have the source code in a string and we could just try to execute it however", "tokens": [407, 321, 586, 362, 264, 4009, 3089, 294, 257, 6798, 293, 321, 727, 445, 853, 281, 14483, 309, 4461], "temperature": 0.0, "avg_logprob": -0.1282403310139974, "compression_ratio": 1.7892156862745099, "no_speech_prob": 2.5826959245023318e-05}, {"id": 187, "seek": 112312, "start": 1129.36, "end": 1135.32, "text": " if we want to replace it within the module so that other functions that depend on it", "tokens": [498, 321, 528, 281, 7406, 309, 1951, 264, 10088, 370, 300, 661, 6828, 300, 5672, 322, 309], "temperature": 0.0, "avg_logprob": -0.1282403310139974, "compression_ratio": 1.7892156862745099, "no_speech_prob": 2.5826959245023318e-05}, {"id": 188, "seek": 112312, "start": 1135.32, "end": 1143.0, "text": " would be able to access it we need to also give it access to things inside this module", "tokens": [576, 312, 1075, 281, 2105, 309, 321, 643, 281, 611, 976, 309, 2105, 281, 721, 1854, 341, 10088], "temperature": 0.0, "avg_logprob": -0.1282403310139974, "compression_ratio": 1.7892156862745099, "no_speech_prob": 2.5826959245023318e-05}, {"id": 189, "seek": 112312, "start": 1143.0, "end": 1149.3999999999999, "text": " for example db if we execute this module here it will not have access to the db variable", "tokens": [337, 1365, 274, 65, 498, 321, 14483, 341, 10088, 510, 309, 486, 406, 362, 2105, 281, 264, 274, 65, 7006], "temperature": 0.0, "avg_logprob": -0.1282403310139974, "compression_ratio": 1.7892156862745099, "no_speech_prob": 2.5826959245023318e-05}, {"id": 190, "seek": 112312, "start": 1149.3999999999999, "end": 1151.7199999999998, "text": " from that module.", "tokens": [490, 300, 10088, 13], "temperature": 0.0, "avg_logprob": -0.1282403310139974, "compression_ratio": 1.7892156862745099, "no_speech_prob": 2.5826959245023318e-05}, {"id": 191, "seek": 115172, "start": 1151.72, "end": 1159.28, "text": " So what we need to do is use inspect to get access to the module of that function.", "tokens": [407, 437, 321, 643, 281, 360, 307, 764, 15018, 281, 483, 2105, 281, 264, 10088, 295, 300, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12888367970784506, "compression_ratio": 1.655, "no_speech_prob": 0.00010044273949461058}, {"id": 192, "seek": 115172, "start": 1159.28, "end": 1169.32, "text": " So let's say module equals inspect.getModule of module 2.sayHello.", "tokens": [407, 718, 311, 584, 10088, 6915, 15018, 13, 847, 44, 378, 2271, 295, 10088, 568, 13, 21664, 15947, 13], "temperature": 0.0, "avg_logprob": -0.12888367970784506, "compression_ratio": 1.655, "no_speech_prob": 0.00010044273949461058}, {"id": 193, "seek": 115172, "start": 1169.32, "end": 1173.76, "text": " In this case we know which module it is, it's module 2 so it will just get the same thing", "tokens": [682, 341, 1389, 321, 458, 597, 10088, 309, 307, 11, 309, 311, 10088, 568, 370, 309, 486, 445, 483, 264, 912, 551], "temperature": 0.0, "avg_logprob": -0.12888367970784506, "compression_ratio": 1.655, "no_speech_prob": 0.00010044273949461058}, {"id": 194, "seek": 115172, "start": 1173.76, "end": 1181.08, "text": " but sometimes we just have the function around and we don't know directly from which module", "tokens": [457, 2171, 321, 445, 362, 264, 2445, 926, 293, 321, 500, 380, 458, 3838, 490, 597, 10088], "temperature": 0.0, "avg_logprob": -0.12888367970784506, "compression_ratio": 1.655, "no_speech_prob": 0.00010044273949461058}, {"id": 195, "seek": 118108, "start": 1181.08, "end": 1189.6799999999998, "text": " it is so we can use this and then what we can do is create, we want to be able to extract", "tokens": [309, 307, 370, 321, 393, 764, 341, 293, 550, 437, 321, 393, 360, 307, 1884, 11, 321, 528, 281, 312, 1075, 281, 8947], "temperature": 0.0, "avg_logprob": -0.20416109489672113, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.195811561658047e-05}, {"id": 196, "seek": 118108, "start": 1189.6799999999998, "end": 1197.4399999999998, "text": " the new value of the function so we'll create a local directory, I'll call it locals underscore", "tokens": [264, 777, 2158, 295, 264, 2445, 370, 321, 603, 1884, 257, 2654, 21120, 11, 286, 603, 818, 309, 23335, 37556], "temperature": 0.0, "avg_logprob": -0.20416109489672113, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.195811561658047e-05}, {"id": 197, "seek": 118108, "start": 1197.4399999999998, "end": 1205.72, "text": " equals dictionary sorry not directory and then I can just execute the source code so", "tokens": [6915, 25890, 2597, 406, 21120, 293, 550, 286, 393, 445, 14483, 264, 4009, 3089, 370], "temperature": 0.0, "avg_logprob": -0.20416109489672113, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.195811561658047e-05}, {"id": 198, "seek": 120572, "start": 1205.72, "end": 1223.08, "text": " just copy this or copy the code here within the module that underscore and underscore addict", "tokens": [445, 5055, 341, 420, 5055, 264, 3089, 510, 1951, 264, 10088, 300, 37556, 293, 37556, 909, 985], "temperature": 0.0, "avg_logprob": -0.24773457050323486, "compression_ratio": 1.5378151260504203, "no_speech_prob": 0.00027769900043495}, {"id": 199, "seek": 120572, "start": 1223.08, "end": 1231.44, "text": " which is a dictionary representing the namespace of what's within that module and my local", "tokens": [597, 307, 257, 25890, 13460, 264, 5288, 17940, 295, 437, 311, 1951, 300, 10088, 293, 452, 2654], "temperature": 0.0, "avg_logprob": -0.24773457050323486, "compression_ratio": 1.5378151260504203, "no_speech_prob": 0.00027769900043495}, {"id": 200, "seek": 123144, "start": 1231.44, "end": 1238.92, "text": " dict here that I created just above.", "tokens": [12569, 510, 300, 286, 2942, 445, 3673, 13], "temperature": 0.0, "avg_logprob": -0.23761970932419235, "compression_ratio": 1.1775700934579438, "no_speech_prob": 0.0002899594546761364}, {"id": 201, "seek": 123144, "start": 1238.92, "end": 1251.68, "text": " And now let's look at locals, we have say hello and if we compare it to module 2.sayHello", "tokens": [400, 586, 718, 311, 574, 412, 23335, 11, 321, 362, 584, 7751, 293, 498, 321, 6794, 309, 281, 10088, 568, 13, 21664, 15947], "temperature": 0.0, "avg_logprob": -0.23761970932419235, "compression_ratio": 1.1775700934579438, "no_speech_prob": 0.0002899594546761364}, {"id": 202, "seek": 125168, "start": 1251.68, "end": 1262.2, "text": " you can see that they have the same identifier here and if I call one and call the other", "tokens": [291, 393, 536, 300, 436, 362, 264, 912, 45690, 510, 293, 498, 286, 818, 472, 293, 818, 264, 661], "temperature": 0.0, "avg_logprob": -0.11824106133502463, "compression_ratio": 1.1891891891891893, "no_speech_prob": 0.00010532138549024239}, {"id": 203, "seek": 126220, "start": 1262.2, "end": 1284.4, "text": " so this is the old one and this is the new one and the identifiers look similar but if", "tokens": [370, 341, 307, 264, 1331, 472, 293, 341, 307, 264, 777, 472, 293, 264, 2473, 23463, 574, 2531, 457, 498], "temperature": 0.0, "avg_logprob": -0.16424961712049402, "compression_ratio": 1.5267857142857142, "no_speech_prob": 8.213958790292963e-05}, {"id": 204, "seek": 126220, "start": 1284.4, "end": 1291.48, "text": " we look here we can see they're not exactly the same so let's not be mistaken by the", "tokens": [321, 574, 510, 321, 393, 536, 436, 434, 406, 2293, 264, 912, 370, 718, 311, 406, 312, 21333, 538, 264], "temperature": 0.0, "avg_logprob": -0.16424961712049402, "compression_ratio": 1.5267857142857142, "no_speech_prob": 8.213958790292963e-05}, {"id": 205, "seek": 129148, "start": 1291.48, "end": 1301.72, "text": " fact that they look really close now we can just finally update this function if you want", "tokens": [1186, 300, 436, 574, 534, 1998, 586, 321, 393, 445, 2721, 5623, 341, 2445, 498, 291, 528], "temperature": 0.0, "avg_logprob": -0.20792715600196351, "compression_ratio": 1.5289256198347108, "no_speech_prob": 0.0003167168179061264}, {"id": 206, "seek": 129148, "start": 1301.72, "end": 1319.64, "text": " so we can do module 2.sayHello equals locals.sayHello and finally module 2.sayHello call it and", "tokens": [370, 321, 393, 360, 10088, 568, 13, 21664, 15947, 6915, 23335, 13, 21664, 15947, 293, 2721, 10088, 568, 13, 21664, 15947, 818, 309, 293], "temperature": 0.0, "avg_logprob": -0.20792715600196351, "compression_ratio": 1.5289256198347108, "no_speech_prob": 0.0003167168179061264}, {"id": 207, "seek": 131964, "start": 1319.64, "end": 1327.8000000000002, "text": " there we have this we just reloaded the function without reloading the connection to the database", "tokens": [456, 321, 362, 341, 321, 445, 25628, 292, 264, 2445, 1553, 25628, 278, 264, 4984, 281, 264, 8149], "temperature": 0.0, "avg_logprob": -0.1391767333535587, "compression_ratio": 1.6863905325443787, "no_speech_prob": 0.00015079420700203627}, {"id": 208, "seek": 131964, "start": 1327.8000000000002, "end": 1333.96, "text": " here.", "tokens": [510, 13], "temperature": 0.0, "avg_logprob": -0.1391767333535587, "compression_ratio": 1.6863905325443787, "no_speech_prob": 0.00015079420700203627}, {"id": 209, "seek": 131964, "start": 1333.96, "end": 1340.1200000000001, "text": " If you want to use hotcode reloading in your projects and you don't want to write yourself", "tokens": [759, 291, 528, 281, 764, 2368, 22332, 25628, 278, 294, 428, 4455, 293, 291, 500, 380, 528, 281, 2464, 1803], "temperature": 0.0, "avg_logprob": -0.1391767333535587, "compression_ratio": 1.6863905325443787, "no_speech_prob": 0.00015079420700203627}, {"id": 210, "seek": 131964, "start": 1340.1200000000001, "end": 1346.48, "text": " the methods to do it using the tools we have seen previously you can also use this library", "tokens": [264, 7150, 281, 360, 309, 1228, 264, 3873, 321, 362, 1612, 8046, 291, 393, 611, 764, 341, 6405], "temperature": 0.0, "avg_logprob": -0.1391767333535587, "compression_ratio": 1.6863905325443787, "no_speech_prob": 0.00015079420700203627}, {"id": 211, "seek": 134648, "start": 1346.48, "end": 1353.52, "text": " called reloader from reload their import auto reload and here in this case you just decorate", "tokens": [1219, 25628, 260, 490, 25628, 641, 974, 8399, 25628, 293, 510, 294, 341, 1389, 291, 445, 24229], "temperature": 0.0, "avg_logprob": -0.1445608796744511, "compression_ratio": 1.8, "no_speech_prob": 9.577768651070073e-05}, {"id": 212, "seek": 134648, "start": 1353.52, "end": 1360.24, "text": " your functions with this auto reload decorator and it will automatically replace them using", "tokens": [428, 6828, 365, 341, 8399, 25628, 7919, 1639, 293, 309, 486, 6772, 7406, 552, 1228], "temperature": 0.0, "avg_logprob": -0.1445608796744511, "compression_ratio": 1.8, "no_speech_prob": 9.577768651070073e-05}, {"id": 213, "seek": 134648, "start": 1360.24, "end": 1366.48, "text": " the proxy method we've seen above and the instance reference to the class method with", "tokens": [264, 29690, 3170, 321, 600, 1612, 3673, 293, 264, 5197, 6408, 281, 264, 1508, 3170, 365], "temperature": 0.0, "avg_logprob": -0.1445608796744511, "compression_ratio": 1.8, "no_speech_prob": 9.577768651070073e-05}, {"id": 214, "seek": 134648, "start": 1366.48, "end": 1372.44, "text": " the new code when the code changes by watching the file system so this is a wrap up of all", "tokens": [264, 777, 3089, 562, 264, 3089, 2962, 538, 1976, 264, 3991, 1185, 370, 341, 307, 257, 7019, 493, 295, 439], "temperature": 0.0, "avg_logprob": -0.1445608796744511, "compression_ratio": 1.8, "no_speech_prob": 9.577768651070073e-05}, {"id": 215, "seek": 134648, "start": 1372.44, "end": 1375.32, "text": " the methods we've seen previously.", "tokens": [264, 7150, 321, 600, 1612, 8046, 13], "temperature": 0.0, "avg_logprob": -0.1445608796744511, "compression_ratio": 1.8, "no_speech_prob": 9.577768651070073e-05}, {"id": 216, "seek": 137532, "start": 1375.32, "end": 1380.3999999999999, "text": " You can also manually specify when the code should be reloaded by changing the decorator", "tokens": [509, 393, 611, 16945, 16500, 562, 264, 3089, 820, 312, 25628, 292, 538, 4473, 264, 7919, 1639], "temperature": 0.0, "avg_logprob": -0.11971168518066407, "compression_ratio": 1.7283236994219653, "no_speech_prob": 4.8980695282807574e-05}, {"id": 217, "seek": 137532, "start": 1380.3999999999999, "end": 1388.56, "text": " in this case you can manually reload the class or you can start a timer that will just reload", "tokens": [294, 341, 1389, 291, 393, 16945, 25628, 264, 1508, 420, 291, 393, 722, 257, 19247, 300, 486, 445, 25628], "temperature": 0.0, "avg_logprob": -0.11971168518066407, "compression_ratio": 1.7283236994219653, "no_speech_prob": 4.8980695282807574e-05}, {"id": 218, "seek": 137532, "start": 1388.56, "end": 1398.56, "text": " it every second or again look at the file system and as the file system changes trigger", "tokens": [309, 633, 1150, 420, 797, 574, 412, 264, 3991, 1185, 293, 382, 264, 3991, 1185, 2962, 7875], "temperature": 0.0, "avg_logprob": -0.11971168518066407, "compression_ratio": 1.7283236994219653, "no_speech_prob": 4.8980695282807574e-05}, {"id": 219, "seek": 137532, "start": 1398.56, "end": 1402.8, "text": " the reloading of this class.", "tokens": [264, 25628, 278, 295, 341, 1508, 13], "temperature": 0.0, "avg_logprob": -0.11971168518066407, "compression_ratio": 1.7283236994219653, "no_speech_prob": 4.8980695282807574e-05}, {"id": 220, "seek": 140280, "start": 1402.8, "end": 1409.68, "text": " This on pypy so you can just install it using pip install reloader and try start using it.", "tokens": [639, 322, 10664, 8200, 370, 291, 393, 445, 3625, 309, 1228, 8489, 3625, 25628, 260, 293, 853, 722, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.2169513911991329, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.00011178170825587586}, {"id": 221, "seek": 140280, "start": 1409.68, "end": 1414.2, "text": " The source code is pretty simple it just fits in one file and then you have a directory with", "tokens": [440, 4009, 3089, 307, 1238, 2199, 309, 445, 9001, 294, 472, 3991, 293, 550, 291, 362, 257, 21120, 365], "temperature": 0.0, "avg_logprob": -0.2169513911991329, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.00011178170825587586}, {"id": 222, "seek": 140280, "start": 1414.2, "end": 1418.32, "text": " a few examples.", "tokens": [257, 1326, 5110, 13], "temperature": 0.0, "avg_logprob": -0.2169513911991329, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.00011178170825587586}, {"id": 223, "seek": 140280, "start": 1418.32, "end": 1424.52, "text": " Thanks for watching and join me in the question and answer matrix room for if you want to", "tokens": [2561, 337, 1976, 293, 3917, 385, 294, 264, 1168, 293, 1867, 8141, 1808, 337, 498, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.2169513911991329, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.00011178170825587586}, {"id": 224, "seek": 140280, "start": 1424.52, "end": 1430.6399999999999, "text": " discuss any things you can find all the examples we've seen on this GitHub repository thank", "tokens": [2248, 604, 721, 291, 393, 915, 439, 264, 5110, 321, 600, 1612, 322, 341, 23331, 25841, 1309], "temperature": 0.0, "avg_logprob": -0.2169513911991329, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.00011178170825587586}, {"id": 225, "seek": 143064, "start": 1430.64, "end": 1449.88, "text": " you.", "tokens": [291, 13], "temperature": 0.0, "avg_logprob": -0.251814862092336, "compression_ratio": 1.0263157894736843, "no_speech_prob": 0.0007064869278110564}, {"id": 226, "seek": 143064, "start": 1449.88, "end": 1456.4, "text": " Thanks Hugo for your talk so I think we can now start with the questions.", "tokens": [2561, 32504, 337, 428, 751, 370, 286, 519, 321, 393, 586, 722, 365, 264, 1651, 13], "temperature": 0.0, "avg_logprob": -0.251814862092336, "compression_ratio": 1.0263157894736843, "no_speech_prob": 0.0007064869278110564}, {"id": 227, "seek": 145640, "start": 1456.4, "end": 1461.2, "text": " First question is how does reloading using execs behave in terms of compiling to intermediate", "tokens": [2386, 1168, 307, 577, 775, 25628, 278, 1228, 4454, 82, 15158, 294, 2115, 295, 715, 4883, 281, 19376], "temperature": 0.0, "avg_logprob": -0.22419662475585939, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.0001851150009315461}, {"id": 228, "seek": 145640, "start": 1461.2, "end": 1465.6000000000001, "text": " forms like PyC and so on?", "tokens": [6422, 411, 9953, 34, 293, 370, 322, 30], "temperature": 0.0, "avg_logprob": -0.22419662475585939, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.0001851150009315461}, {"id": 229, "seek": 145640, "start": 1465.6000000000001, "end": 1472.68, "text": " So it's using, Python internally is using bytecode so exec is a two steps process the", "tokens": [407, 309, 311, 1228, 11, 15329, 19501, 307, 1228, 40846, 22332, 370, 4454, 307, 257, 732, 4439, 1399, 264], "temperature": 0.0, "avg_logprob": -0.22419662475585939, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.0001851150009315461}, {"id": 230, "seek": 145640, "start": 1472.68, "end": 1478.1200000000001, "text": " first step is it will compile it to bytecode it will just not store that bytecode on disk", "tokens": [700, 1823, 307, 309, 486, 31413, 309, 281, 40846, 22332, 309, 486, 445, 406, 3531, 300, 40846, 22332, 322, 12355], "temperature": 0.0, "avg_logprob": -0.22419662475585939, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.0001851150009315461}, {"id": 231, "seek": 147812, "start": 1478.12, "end": 1490.12, "text": " and then it will execute that bytecode as like the rest of the bytecode.", "tokens": [293, 550, 309, 486, 14483, 300, 40846, 22332, 382, 411, 264, 1472, 295, 264, 40846, 22332, 13], "temperature": 0.0, "avg_logprob": -0.19071696097390695, "compression_ratio": 1.480263157894737, "no_speech_prob": 5.3020688937976956e-05}, {"id": 232, "seek": 147812, "start": 1490.12, "end": 1495.3999999999999, "text": " And are there examples of applications that use hotcode reloading?", "tokens": [400, 366, 456, 5110, 295, 5821, 300, 764, 2368, 22332, 25628, 278, 30], "temperature": 0.0, "avg_logprob": -0.19071696097390695, "compression_ratio": 1.480263157894737, "no_speech_prob": 5.3020688937976956e-05}, {"id": 233, "seek": 147812, "start": 1495.3999999999999, "end": 1506.36, "text": " Usually it's a process that at least I use for development so it's not used that much", "tokens": [11419, 309, 311, 257, 1399, 300, 412, 1935, 286, 764, 337, 3250, 370, 309, 311, 406, 1143, 300, 709], "temperature": 0.0, "avg_logprob": -0.19071696097390695, "compression_ratio": 1.480263157894737, "no_speech_prob": 5.3020688937976956e-05}, {"id": 234, "seek": 150636, "start": 1506.36, "end": 1511.12, "text": " in production because then it can cause a lot of issues but it's the hotcode reloading", "tokens": [294, 4265, 570, 550, 309, 393, 3082, 257, 688, 295, 2663, 457, 309, 311, 264, 2368, 22332, 25628, 278], "temperature": 0.0, "avg_logprob": -0.18708133697509766, "compression_ratio": 1.625668449197861, "no_speech_prob": 0.00025286784511990845}, {"id": 235, "seek": 150636, "start": 1511.12, "end": 1516.0, "text": " in general is used a lot by game developers because they're tweaking the dynamics of the", "tokens": [294, 2674, 307, 1143, 257, 688, 538, 1216, 8849, 570, 436, 434, 6986, 2456, 264, 15679, 295, 264], "temperature": 0.0, "avg_logprob": -0.18708133697509766, "compression_ratio": 1.625668449197861, "no_speech_prob": 0.00025286784511990845}, {"id": 236, "seek": 150636, "start": 1516.0, "end": 1521.4799999999998, "text": " game while playing it and restarting the entire game every time you make a change to some", "tokens": [1216, 1339, 2433, 309, 293, 21022, 278, 264, 2302, 1216, 633, 565, 291, 652, 257, 1319, 281, 512], "temperature": 0.0, "avg_logprob": -0.18708133697509766, "compression_ratio": 1.625668449197861, "no_speech_prob": 0.00025286784511990845}, {"id": 237, "seek": 150636, "start": 1521.4799999999998, "end": 1526.6, "text": " logic doesn't make sense in that case.", "tokens": [9952, 1177, 380, 652, 2020, 294, 300, 1389, 13], "temperature": 0.0, "avg_logprob": -0.18708133697509766, "compression_ratio": 1.625668449197861, "no_speech_prob": 0.00025286784511990845}, {"id": 238, "seek": 152660, "start": 1526.6, "end": 1541.52, "text": " And how do you deal with side effects like things like shared resources and so on?", "tokens": [400, 577, 360, 291, 2028, 365, 1252, 5065, 411, 721, 411, 5507, 3593, 293, 370, 322, 30], "temperature": 0.0, "avg_logprob": -0.1726660278608214, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.0002691224799491465}, {"id": 239, "seek": 152660, "start": 1541.52, "end": 1551.3999999999999, "text": " So the idea with hotcode reloading the way I presented it you keep these resources on", "tokens": [407, 264, 1558, 365, 2368, 22332, 25628, 278, 264, 636, 286, 8212, 309, 291, 1066, 613, 3593, 322], "temperature": 0.0, "avg_logprob": -0.1726660278608214, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.0002691224799491465}, {"id": 240, "seek": 152660, "start": 1551.3999999999999, "end": 1553.9199999999998, "text": " so you keep the state you keep these resources.", "tokens": [370, 291, 1066, 264, 1785, 291, 1066, 613, 3593, 13], "temperature": 0.0, "avg_logprob": -0.1726660278608214, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.0002691224799491465}, {"id": 241, "seek": 155392, "start": 1553.92, "end": 1559.3600000000001, "text": " Of course if something changes outside of the scope of your changes then you may have", "tokens": [2720, 1164, 498, 746, 2962, 2380, 295, 264, 11923, 295, 428, 2962, 550, 291, 815, 362], "temperature": 0.0, "avg_logprob": -0.25141931834973785, "compression_ratio": 1.4416666666666667, "no_speech_prob": 8.077118400251493e-05}, {"id": 242, "seek": 155392, "start": 1559.3600000000001, "end": 1572.8000000000002, "text": " compatibility issues and then you just have to accept it and restart the whole process.", "tokens": [34237, 2663, 293, 550, 291, 445, 362, 281, 3241, 309, 293, 21022, 264, 1379, 1399, 13], "temperature": 0.0, "avg_logprob": -0.25141931834973785, "compression_ratio": 1.4416666666666667, "no_speech_prob": 8.077118400251493e-05}, {"id": 243, "seek": 157280, "start": 1572.8, "end": 1594.28, "text": " Okay any further questions from the chat?", "tokens": [1033, 604, 3052, 1651, 490, 264, 5081, 30], "temperature": 0.0, "avg_logprob": -0.30629011562892366, "compression_ratio": 1.0919540229885059, "no_speech_prob": 0.0011421055532991886}, {"id": 244, "seek": 157280, "start": 1594.28, "end": 1595.8, "text": " What are the dangers that remain?", "tokens": [708, 366, 264, 27701, 300, 6222, 30], "temperature": 0.0, "avg_logprob": -0.30629011562892366, "compression_ratio": 1.0919540229885059, "no_speech_prob": 0.0011421055532991886}, {"id": 245, "seek": 157280, "start": 1595.8, "end": 1600.48, "text": " Could you fix them?", "tokens": [7497, 291, 3191, 552, 30], "temperature": 0.0, "avg_logprob": -0.30629011562892366, "compression_ratio": 1.0919540229885059, "no_speech_prob": 0.0011421055532991886}, {"id": 246, "seek": 160048, "start": 1600.48, "end": 1609.84, "text": " Well I think Python itself is not designed for hotcode reloading and other languages", "tokens": [1042, 286, 519, 15329, 2564, 307, 406, 4761, 337, 2368, 22332, 25628, 278, 293, 661, 8650], "temperature": 0.0, "avg_logprob": -0.16297591359991775, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00046407582703977823}, {"id": 247, "seek": 160048, "start": 1609.84, "end": 1618.32, "text": " have allowed this in a safer way so in order to make hotcode reloading easier in Python", "tokens": [362, 4350, 341, 294, 257, 15856, 636, 370, 294, 1668, 281, 652, 2368, 22332, 25628, 278, 3571, 294, 15329], "temperature": 0.0, "avg_logprob": -0.16297591359991775, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00046407582703977823}, {"id": 248, "seek": 160048, "start": 1618.32, "end": 1624.2, "text": " I think there will be some big changes within Python would be required.", "tokens": [286, 519, 456, 486, 312, 512, 955, 2962, 1951, 15329, 576, 312, 4739, 13], "temperature": 0.0, "avg_logprob": -0.16297591359991775, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00046407582703977823}, {"id": 249, "seek": 162420, "start": 1624.2, "end": 1631.0, "text": " If you take the example of Erlang that's a language that's designed to allow hotcode reloading", "tokens": [759, 291, 747, 264, 1365, 295, 3300, 25241, 300, 311, 257, 2856, 300, 311, 4761, 281, 2089, 2368, 22332, 25628, 278], "temperature": 0.0, "avg_logprob": -0.2173261106683967, "compression_ratio": 1.70935960591133, "no_speech_prob": 7.70358819863759e-05}, {"id": 250, "seek": 162420, "start": 1631.0, "end": 1636.0, "text": " and it's used a lot in network equipment and it's a feature built in the language in the", "tokens": [293, 309, 311, 1143, 257, 688, 294, 3209, 5927, 293, 309, 311, 257, 4111, 3094, 294, 264, 2856, 294, 264], "temperature": 0.0, "avg_logprob": -0.2173261106683967, "compression_ratio": 1.70935960591133, "no_speech_prob": 7.70358819863759e-05}, {"id": 251, "seek": 162420, "start": 1636.0, "end": 1637.0, "text": " tooling.", "tokens": [46593, 13], "temperature": 0.0, "avg_logprob": -0.2173261106683967, "compression_ratio": 1.70935960591133, "no_speech_prob": 7.70358819863759e-05}, {"id": 252, "seek": 162420, "start": 1637.0, "end": 1644.28, "text": " If you take the example of Java there is a rule you can reload a class as long as its", "tokens": [759, 291, 747, 264, 1365, 295, 10745, 456, 307, 257, 4978, 291, 393, 25628, 257, 1508, 382, 938, 382, 1080], "temperature": 0.0, "avg_logprob": -0.2173261106683967, "compression_ratio": 1.70935960591133, "no_speech_prob": 7.70358819863759e-05}, {"id": 253, "seek": 162420, "start": 1644.28, "end": 1648.96, "text": " interface does not change and your ID, your tooling will check that.", "tokens": [9226, 775, 406, 1319, 293, 428, 7348, 11, 428, 46593, 486, 1520, 300, 13], "temperature": 0.0, "avg_logprob": -0.2173261106683967, "compression_ratio": 1.70935960591133, "no_speech_prob": 7.70358819863759e-05}, {"id": 254, "seek": 164896, "start": 1648.96, "end": 1655.24, "text": " In Python there are no such checks so at the moment there are no guarantees that the new", "tokens": [682, 15329, 456, 366, 572, 1270, 13834, 370, 412, 264, 1623, 456, 366, 572, 32567, 300, 264, 777], "temperature": 0.0, "avg_logprob": -0.16451362046328458, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.00012508875806815922}, {"id": 255, "seek": 165524, "start": 1655.24, "end": 1682.8, "text": " version of the code would work with a high chance.", "tokens": [3037, 295, 264, 3089, 576, 589, 365, 257, 1090, 2931, 13], "temperature": 0.0, "avg_logprob": -0.333778444925944, "compression_ratio": 0.9090909090909091, "no_speech_prob": 0.00019066293316427618}, {"id": 256, "seek": 168280, "start": 1682.8, "end": 1701.8, "text": " Okay thank you.", "tokens": [1033, 1309, 291, 13], "temperature": 1.0, "avg_logprob": -1.4510633945465088, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.0034385784529149532}, {"id": 257, "seek": 170180, "start": 1701.8, "end": 1721.56, "text": " So, do you add decorators for reloading in your code base?", "tokens": [407, 11, 360, 291, 909, 7919, 3391, 337, 25628, 278, 294, 428, 3089, 3096, 30], "temperature": 0.0, "avg_logprob": -0.2047388201854268, "compression_ratio": 1.5584415584415585, "no_speech_prob": 0.20587533712387085}, {"id": 258, "seek": 170180, "start": 1721.56, "end": 1726.48, "text": " Is there a best practice to ignore them at the moment running your code in production?", "tokens": [1119, 456, 257, 1151, 3124, 281, 11200, 552, 412, 264, 1623, 2614, 428, 3089, 294, 4265, 30], "temperature": 0.0, "avg_logprob": -0.2047388201854268, "compression_ratio": 1.5584415584415585, "no_speech_prob": 0.20587533712387085}, {"id": 259, "seek": 170180, "start": 1726.48, "end": 1731.1599999999999, "text": " I think it aligns with the other point that's adding decorators just for the sake of reloading", "tokens": [286, 519, 309, 7975, 82, 365, 264, 661, 935, 300, 311, 5127, 7919, 3391, 445, 337, 264, 9717, 295, 25628, 278], "temperature": 0.0, "avg_logprob": -0.2047388201854268, "compression_ratio": 1.5584415584415585, "no_speech_prob": 0.20587533712387085}, {"id": 260, "seek": 173116, "start": 1731.16, "end": 1735.76, "text": " for half an hour doesn't make sense.", "tokens": [337, 1922, 364, 1773, 1177, 380, 652, 2020, 13], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 261, "seek": 173116, "start": 1735.76, "end": 1740.64, "text": " It's a trade-off.", "tokens": [467, 311, 257, 4923, 12, 4506, 13], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 262, "seek": 173116, "start": 1740.64, "end": 1746.8400000000001, "text": " I use decorators because that allows me to know exactly what is being hot reloaded and", "tokens": [286, 764, 7919, 3391, 570, 300, 4045, 385, 281, 458, 2293, 437, 307, 885, 2368, 25628, 292, 293], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 263, "seek": 173116, "start": 1746.8400000000001, "end": 1749.0400000000002, "text": " what is not.", "tokens": [437, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 264, "seek": 173116, "start": 1749.0400000000002, "end": 1753.2, "text": " And also as a way to work with the references.", "tokens": [400, 611, 382, 257, 636, 281, 589, 365, 264, 15400, 13], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 265, "seek": 173116, "start": 1753.2, "end": 1758.8000000000002, "text": " Another strategy I thought about was to try to replace in memory all the references to", "tokens": [3996, 5206, 286, 1194, 466, 390, 281, 853, 281, 7406, 294, 4675, 439, 264, 15400, 281], "temperature": 0.0, "avg_logprob": -0.17452889454515674, "compression_ratio": 1.565217391304348, "no_speech_prob": 9.153159044217318e-05}, {"id": 266, "seek": 175880, "start": 1758.8, "end": 1762.24, "text": " the function with the new one within Python.", "tokens": [264, 2445, 365, 264, 777, 472, 1951, 15329, 13], "temperature": 0.0, "avg_logprob": -0.2567037476433648, "compression_ratio": 1.2272727272727273, "no_speech_prob": 0.00022279653057921678}, {"id": 267, "seek": 176224, "start": 1762.24, "end": 1787.2, "text": " And that requires much lower access to the internals of Python.", "tokens": [400, 300, 7029, 709, 3126, 2105, 281, 264, 2154, 1124, 295, 15329, 13], "temperature": 0.0, "avg_logprob": -0.20831772860358744, "compression_ratio": 0.9264705882352942, "no_speech_prob": 0.0006135127623565495}], "language": "en"}