{"text": " Yes, so I'm Mathias Valdman. I'm the author of this FQ tool. Now I'm going to do, I'm not going to be able to show all slides, I think. I want to do a lot of demo, because I think it's a good tool to demo. Sorry, can you talk a bit louder? I can try. What is FQ? It's a tool and the language and the group of set of decoders to work with data. More or less it used to be binary data, but now it's also text data, but I guess it's binary also. In a sense, so it's heavily inspired by JQ, both as it is JQ, the language, but it's also the CLI tool. It's inspired by how the arguments work and everything. And it's a tool for querying and displaying data, exactly like JQ. But it also has an interactive weapon, so you can work with it in a more interactive way, and it has auto completion and a lot of other bells and whistles to make it very nice to work with. And it's available for a lot of operator systems. So I like to call it like, it's like a debugger for files. That's how I use it. So why JQ? It's a very CLI friendly language. You don't need any new lines. It's like you, it's like the syntax is very, very tears. You can do a lot with a little syntax. And it's very composable. You have this like pipe, more or less like shell pipes. But it has these generators. You can even do loops and iterate and recurs with even this, using these pipes. You see these square brackets like that to iterate and dot, dot is to recursive, recursively through a tree of values, you can say. And it's also kind of like DSL for like selecting and transforming JSON. It is, you can call it JSON. It's not, it just happens to have JSON as an input output kind of. Internally, you can call it like JQ values. So it has arrays and objects and numbers and strings and boots. So it's kind of like a super set of JSON. And I have an example here that you, you build a new object that has a key A, that is an array, that is one, plus two, plus three and empty, and you see that it becomes the object with just A and array one, five. And empty was just a function that does nothing. It outputs no, no value at all. And you can also select values from the input. So here we have the object with A and B and then you create a new object that has this, the sum key. And then that's the sum of A plus B. So then it's three. And it's a purely function language based on generators and backtracking. But it has conditioners, it has function, it has bindings, it has all, all things you need. And it's, the default is that you run, you have one JQ filter or program that you run individually on each input file. But then it has, it has functions to tell it to not behave like that. So you can run one filter on a group of files, for example. And FQ has support currently for 113 formats. And it has most of them, I guess, half of them are media related because I work with media. So just like MP3, MP4, or Flack. And they also have support for like demuxing some of these forms like you, some of these containers they have support for segmenting and things. So you can kind of recombine it and then decode the, the demuxed sample and things. But they have been, other people have added other things. So executable formats, archiving, networking. So you can do PP cap nowadays, you can do TCP reassembly even, and even decode the TCP stream. So it's a support for RTMP, for example. And it's also a support for some serialization for like message pack and the ASM1 beer and the seat, seabor and those. And it's also a support for some text format. Some of them you can even decode and encode. So you can decode it into a JQ or JSON value, transform it with JQ and then encode it back to some other text format. You can't do it with the binary formats. I will see if I get to that to explain why that is, that is not easy to do. So what does it mean when you decode? What does it mean that you FQ support the format? It means that it can, there's, there is some code is written in Go. So there's like a kind of a DSL for writing decoders. And that produces a structure that is like JSON compatible. But each value in this structure also have no which bit range they come from. And they also have optionally can have like symbolic mappings. Like you can map the number to a string or string to a string or boolean to a, so you can in binary format you usually encode some number that means something. Like this is the upliver if you get that. And for media this usually means that it's, you decode everything except the pixels or the audio because it's like, yeah, then you buy, then you can use ffmpeg or whatever you want. There are some format that actually decodes to the samples. Flack for example we have support for actually coding. So there is a full flack decoder in Flackube but you can't, you can't listen to the sound. And some format can use other formats. That's how they are. They're like hierarchy over that they use. So you can even type in pfmpeg users, the internet decoder using IPV. And then you can even end up with the loops here that they're like zip files in the zip file. And yeah. And there's also support for formats to pass. You can even return value. You can return like values from a decoder into another decoder. You don't see this from the outside. But then for example mp4 has some boxes that have like information about how the samples should be decoded. Like how long are some fields or things. So then before and before the decoder can pass that information down to another sample decoder. So how do I use? I use it because of this. Because I work with media so all more or less the whole mp4 file is metadata about how to play this. How to seek, how to how to sync, how to yeah everything. And I guess Derek had a good talk about why this multimedia is basically endless pain. And I guess FQ can't really fix the pain but it can locate the pain I guess. So this is what I use it for. I debug the query assist when I work with media files. And it's used for someone usually at work there's a media file that has broken that someone it doesn't transcode or it's not in sync or and they say what what is wrong with this file. And we have to figure out like what is it? Is it the decoder problem? The maxi problem? Is it the encoder? Is it is it corrupt? Is it whatever? So FQ is very useful to quickly triage a lot of broken media files. And I can just short what is the time? Short like what can it not do? Or what is not good? It's not good for encoding like to change things. You can change things but it's more about slicing binaries into and then concatenate them together and then write them out to a new file kind of. So there's no like you can't just change the value in some JSON structure and just realize it back because it's like for example I gave an example here with the mp4 maxi. What would it mean to add or remove a sample in mp4 file? Then you would have to change all the boxes that describe how big the samples are and it's just cascades away into yeah and you can see that mp4 ffmpegs mp4 implementation is 17,000 lines of c-code very dense c-code so it's use ffmpeg if you want to do those kind of things. And I think you see and Peter will talk about more about encoding I guess and why why this is complicated. And you can repair media files with fq but you you probably have to be more or less an expert in the format that you're fixing. I usually do like I have you you can fix things by kind of testing the code the configurations or you use some kind of you encode something and borrow from another media file and yeah somewhere stitch together to see what it is or so there is I have some fq code to build like ADTS headers and whatever if you want if you find an AC frame somewhere you don't even know what because an AC frame has to have metadata about like what how many channels it has and what profile it is and things. And it doesn't do any decoders in runtime at the moment you can't write the decoder you have to write in go now and then compile it so we'll see maybe in the future it's going to have cacti support. I have to have a prototype for cacti but it is complicated also it has an expression language I have to write the parser for that. Maybe I will talk to you about this and see. There is more slides here but I will you can read them. I want to do a demo instead. Is it big enough? So fq is just a CLI tool. Work like this and you can do if you want to list all the formats that it supports. So if you run fq and let's see it has pcap if you do so the first argument is the filter that you want to run and dot in jq is just an identity function that is just it gives you what you put into get the root kind of so here we see that it's a pcap it has a head there it has packets and some TCP or TCP connections and things. So you can do dash I actually I want to do I want to do a crash course in the jq. I don't know how many people know how jq works so I can do a short version how just to show the particularities of jq. So now I started jq with dash I which gives you just a null input if you get one input that is just null so it's just a way of you can at least just execute jq values because it needs to have an input somehow always. So now you can just write strings or whatever you want to do and if you do dot there you just yes null and I guess the most special thing about jq is the comma operator and that outputs a value so you can do 1 comma 1 2 3 it gives you 1 2 3 but then in jq you can there are some special forms like this collect which sounds this looks very familiar to us as an array that then collects those values into something but then in jq you could you could just write the expressions here or whatever you want so let's say we can define a function for example so and then you can just collect that function or you can call it two times or you can map those values yeah so you see how it was too fast to but you see how you can define function you can have binding so it's a full functional language that's it's very I like it a lot how it works so let's back to that pcap file so let's see you can do for example if you want to see look at the first packet you can do this you can pipe it to D which is shows more recursively all the if you if you just give it when you do this you actually run D also but it also show it only showed one level so if you do D it it will show all of it so here you can see like you can write on jq expression here it is like show me the first and the last packet and it will do this and then you can say both of them yeah so you can do things like that so let's see we can go into the TCP connection and we take the first one we can do D and we see that this is seems to be HDP request someone has downloaded the file so let's see we can go to the server stream let's see and there is a there's one thing about jq is that the jq don't have doesn't have binary support it only has string so you so fq has to to support binary you can there is some special functions in fq to tell it that this this string is actually binary or I want it as binary if it's possible so then you can say like this stream for example if you if I would just do type it just a string but if I do two bytes you will actually get the raw bytes and then I can say like I wanted to maybe 400 first and DD is something that shows the whole it doesn't truncate the output so here we see that this is some kind of HDP request so let's say we want to get the bytes for this okay plus so here I think I have the body of the HDP request so in jq you can more than do for example this that all all the all the coders in fq are jq functions so you can do this now and it will just decode it as an mp4 file so now you can start as a sub-repell for example now you're inside the mp4 inside the the pcap and now you can do and here you have the whole box 3 for the mp4 file and and you can for example go into the samples I think this is some kind of subtitles for mp4 file that I found somewhere and here you have the tracks it has samples so this is like the raw the raw bytes for that sample and you see it's some it's some kind of weird XML subtitle and fq has support for XML so you can do this and then you get a JSON version of the XML see we can see almost there is some let's see I can write something that takes out all the this is probably not how you write TTML subtitle parser but we can we can do a quick quick version of one and there is some functions like grep by that recursive look for some condition so here for example you can look for did not work why aha so so now we it recursive defined all those text the objects that had the text field and then just take took that text field so now you can for example take this expression go out to the you have the wrap up here and you can go out to the prompt again and then remove the interactive and then do this instead or we can do this if you only want text and we can even say we want all all samples so here is all that that's the thing you can do with with all these decoders that the codes and blah blah and then you can iteratively do all this it's like yeah it's nice so let's see and I also want to show that you can you can actually you don't have to write this all this when after a while you maybe with your expression starts to get very long so you want to have more structures I can show you I have some helpers for mp4 files for example maybe you know so I spend a lot of times in mp4 files because that's like what is used everywhere nowadays so here is some helpers for example that can be written in a more structured way that with the indentation and things so you mean you don't go crazy and I can show here for example this is a bit long but for example here is an expression that loads this mp4.jq and it finds the video track and then it uses some jq code to produce a GNU plot output and it uses a GNU plot and then I have my weird tool I have for producing images in the terminal so so here's the bit rate for the video bit rate per bits per second in this video and you see that there's probably this top sear up over the iframe in the mp4 file maybe we can take questions then yes yeah you can use that's a hex editor also maybe it's not very convenient as a hex editor but you can for example you can do dash d bytes or bits then you get like it's just a dummy decoder kind of so you can do bits a lot be kept so so now you'll just get it so now you can do so and then you can concatenate this into you can the kind that you can build this like a binary arrays like one they are like iolists in Erdogan if you have used that that you can like you it's just an array with with things that can become binary and then it can and you can kind of pipe this to two bytes and then you get back so you can kind of do this yeah so you see that if you can you can build this that's how you can how you can repair things with fq that you take the samples and then add on some head there and then you concatenate the bytes and you can even decode it with the jq again so you can i mean you could you could try decode this as an mp3 file for example but it yeah it won't work yes i would like to have some more round timey version i can't show how there is one of the slideshow show actually how the dsl how the how the go along dsl looks like yeah here here is how kind of how the go dsl works that you there's like a d function of this kind of like that the the context for that keeps tracks of where you are and then you create like new structs and fields and and you have these mappers that say like this is a binary for made up binary format for live by for open source licenses that I was going to be a moment there so that's how how most of the code looks like so if you can do you can write any go code i mean i prefer to write them to make them look very declarative like so don't use too many yeah too much weird code in keep them simple is the and other questions yes it's i would say that it's probably hard to of course to write the code to the i think it's it creates a lot of options how what what does the user mean when they change something like do they want yeah it's also like do you want the checksums to be recalculated or not do you want what happens if you change something in a if you have the max something and then you change the size so now the segmenting becomes different so then it cascades to change the whole file so it's like do you want that to happen it's also like there are encodings that are there are like many ways to encode the same integer for example var ints can be encoding many many ways so you would encode and normalize all that or should it behave should remember try to remember how how the original thing was decoded yeah so it's it's complicated any other questions", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 16.12, "text": " Yes, so I'm Mathias Valdman. I'm the author of this FQ tool. Now I'm going to do, I'm", "tokens": [1079, 11, 370, 286, 478, 15776, 4609, 691, 3976, 1601, 13, 286, 478, 264, 3793, 295, 341, 479, 48, 2290, 13, 823, 286, 478, 516, 281, 360, 11, 286, 478], "temperature": 0.0, "avg_logprob": -0.3375340643383208, "compression_ratio": 1.4534883720930232, "no_speech_prob": 0.14581067860126495}, {"id": 1, "seek": 0, "start": 16.12, "end": 20.32, "text": " not going to be able to show all slides, I think. I want to do a lot of demo, because", "tokens": [406, 516, 281, 312, 1075, 281, 855, 439, 9788, 11, 286, 519, 13, 286, 528, 281, 360, 257, 688, 295, 10723, 11, 570], "temperature": 0.0, "avg_logprob": -0.3375340643383208, "compression_ratio": 1.4534883720930232, "no_speech_prob": 0.14581067860126495}, {"id": 2, "seek": 0, "start": 20.32, "end": 28.36, "text": " I think it's a good tool to demo. Sorry, can you talk a bit louder? I can try.", "tokens": [286, 519, 309, 311, 257, 665, 2290, 281, 10723, 13, 4919, 11, 393, 291, 751, 257, 857, 22717, 30, 286, 393, 853, 13], "temperature": 0.0, "avg_logprob": -0.3375340643383208, "compression_ratio": 1.4534883720930232, "no_speech_prob": 0.14581067860126495}, {"id": 3, "seek": 2836, "start": 28.36, "end": 34.8, "text": " What is FQ? It's a tool and the language and the group of set of decoders to work", "tokens": [708, 307, 479, 48, 30, 467, 311, 257, 2290, 293, 264, 2856, 293, 264, 1594, 295, 992, 295, 979, 378, 433, 281, 589], "temperature": 0.0, "avg_logprob": -0.25970994583284013, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.0001253959198947996}, {"id": 4, "seek": 2836, "start": 34.8, "end": 38.68, "text": " with data. More or less it used to be binary data, but now it's also text data,", "tokens": [365, 1412, 13, 5048, 420, 1570, 309, 1143, 281, 312, 17434, 1412, 11, 457, 586, 309, 311, 611, 2487, 1412, 11], "temperature": 0.0, "avg_logprob": -0.25970994583284013, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.0001253959198947996}, {"id": 5, "seek": 2836, "start": 38.68, "end": 45.68, "text": " but I guess it's binary also. In a sense, so it's heavily inspired by JQ, both as", "tokens": [457, 286, 2041, 309, 311, 17434, 611, 13, 682, 257, 2020, 11, 370, 309, 311, 10950, 7547, 538, 508, 48, 11, 1293, 382], "temperature": 0.0, "avg_logprob": -0.25970994583284013, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.0001253959198947996}, {"id": 6, "seek": 2836, "start": 45.68, "end": 53.16, "text": " it is JQ, the language, but it's also the CLI tool. It's inspired by how", "tokens": [309, 307, 508, 48, 11, 264, 2856, 11, 457, 309, 311, 611, 264, 12855, 40, 2290, 13, 467, 311, 7547, 538, 577], "temperature": 0.0, "avg_logprob": -0.25970994583284013, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.0001253959198947996}, {"id": 7, "seek": 5316, "start": 53.16, "end": 58.519999999999996, "text": " the arguments work and everything. And it's a tool for querying and displaying", "tokens": [264, 12869, 589, 293, 1203, 13, 400, 309, 311, 257, 2290, 337, 7083, 1840, 293, 36834], "temperature": 0.0, "avg_logprob": -0.19227474757603236, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.3931330360937864e-05}, {"id": 8, "seek": 5316, "start": 58.519999999999996, "end": 65.47999999999999, "text": " data, exactly like JQ. But it also has an interactive weapon, so you can work", "tokens": [1412, 11, 2293, 411, 508, 48, 13, 583, 309, 611, 575, 364, 15141, 7463, 11, 370, 291, 393, 589], "temperature": 0.0, "avg_logprob": -0.19227474757603236, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.3931330360937864e-05}, {"id": 9, "seek": 5316, "start": 65.47999999999999, "end": 69.32, "text": " with it in a more interactive way, and it has auto completion and a lot of other", "tokens": [365, 309, 294, 257, 544, 15141, 636, 11, 293, 309, 575, 8399, 19372, 293, 257, 688, 295, 661], "temperature": 0.0, "avg_logprob": -0.19227474757603236, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.3931330360937864e-05}, {"id": 10, "seek": 5316, "start": 69.32, "end": 74.84, "text": " bells and whistles to make it very nice to work with. And it's available for a", "tokens": [25474, 293, 49282, 281, 652, 309, 588, 1481, 281, 589, 365, 13, 400, 309, 311, 2435, 337, 257], "temperature": 0.0, "avg_logprob": -0.19227474757603236, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.3931330360937864e-05}, {"id": 11, "seek": 5316, "start": 74.84, "end": 79.72, "text": " lot of operator systems. So I like to call it like, it's like a debugger for files.", "tokens": [688, 295, 12973, 3652, 13, 407, 286, 411, 281, 818, 309, 411, 11, 309, 311, 411, 257, 24083, 1321, 337, 7098, 13], "temperature": 0.0, "avg_logprob": -0.19227474757603236, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.3931330360937864e-05}, {"id": 12, "seek": 7972, "start": 79.72, "end": 89.72, "text": " That's how I use it. So why JQ? It's a very CLI friendly language. You don't", "tokens": [663, 311, 577, 286, 764, 309, 13, 407, 983, 508, 48, 30, 467, 311, 257, 588, 12855, 40, 9208, 2856, 13, 509, 500, 380], "temperature": 0.0, "avg_logprob": -0.21057085837087325, "compression_ratio": 1.5396039603960396, "no_speech_prob": 0.000694911228492856}, {"id": 13, "seek": 7972, "start": 89.72, "end": 95.6, "text": " need any new lines. It's like you, it's like the syntax is very, very tears. You", "tokens": [643, 604, 777, 3876, 13, 467, 311, 411, 291, 11, 309, 311, 411, 264, 28431, 307, 588, 11, 588, 10462, 13, 509], "temperature": 0.0, "avg_logprob": -0.21057085837087325, "compression_ratio": 1.5396039603960396, "no_speech_prob": 0.000694911228492856}, {"id": 14, "seek": 7972, "start": 95.6, "end": 100.24, "text": " can do a lot with a little syntax. And it's very composable. You have this", "tokens": [393, 360, 257, 688, 365, 257, 707, 28431, 13, 400, 309, 311, 588, 10199, 712, 13, 509, 362, 341], "temperature": 0.0, "avg_logprob": -0.21057085837087325, "compression_ratio": 1.5396039603960396, "no_speech_prob": 0.000694911228492856}, {"id": 15, "seek": 7972, "start": 100.24, "end": 106.68, "text": " like pipe, more or less like shell pipes. But it has these generators. You can", "tokens": [411, 11240, 11, 544, 420, 1570, 411, 8720, 21882, 13, 583, 309, 575, 613, 38662, 13, 509, 393], "temperature": 0.0, "avg_logprob": -0.21057085837087325, "compression_ratio": 1.5396039603960396, "no_speech_prob": 0.000694911228492856}, {"id": 16, "seek": 10668, "start": 106.68, "end": 111.2, "text": " even do loops and iterate and recurs with even this, using these pipes. You see", "tokens": [754, 360, 16121, 293, 44497, 293, 20560, 365, 754, 341, 11, 1228, 613, 21882, 13, 509, 536], "temperature": 0.0, "avg_logprob": -0.2716048864217905, "compression_ratio": 1.6680851063829787, "no_speech_prob": 5.380934089771472e-05}, {"id": 17, "seek": 10668, "start": 111.2, "end": 116.24000000000001, "text": " these square brackets like that to iterate and dot, dot is to recursive,", "tokens": [613, 3732, 26179, 411, 300, 281, 44497, 293, 5893, 11, 5893, 307, 281, 20560, 488, 11], "temperature": 0.0, "avg_logprob": -0.2716048864217905, "compression_ratio": 1.6680851063829787, "no_speech_prob": 5.380934089771472e-05}, {"id": 18, "seek": 10668, "start": 116.24000000000001, "end": 123.04, "text": " recursively through a tree of values, you can say. And it's also kind of like DSL", "tokens": [20560, 3413, 807, 257, 4230, 295, 4190, 11, 291, 393, 584, 13, 400, 309, 311, 611, 733, 295, 411, 15816, 43], "temperature": 0.0, "avg_logprob": -0.2716048864217905, "compression_ratio": 1.6680851063829787, "no_speech_prob": 5.380934089771472e-05}, {"id": 19, "seek": 10668, "start": 123.04, "end": 130.24, "text": " for like selecting and transforming JSON. It is, you can call it JSON. It's", "tokens": [337, 411, 18182, 293, 27210, 31828, 13, 467, 307, 11, 291, 393, 818, 309, 31828, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.2716048864217905, "compression_ratio": 1.6680851063829787, "no_speech_prob": 5.380934089771472e-05}, {"id": 20, "seek": 10668, "start": 130.24, "end": 134.64000000000001, "text": " not, it just happens to have JSON as an input output kind of. Internally, you can", "tokens": [406, 11, 309, 445, 2314, 281, 362, 31828, 382, 364, 4846, 5598, 733, 295, 13, 4844, 379, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.2716048864217905, "compression_ratio": 1.6680851063829787, "no_speech_prob": 5.380934089771472e-05}, {"id": 21, "seek": 13464, "start": 134.64, "end": 140.27999999999997, "text": " call it like JQ values. So it has arrays and objects and numbers and strings", "tokens": [818, 309, 411, 508, 48, 4190, 13, 407, 309, 575, 41011, 293, 6565, 293, 3547, 293, 13985], "temperature": 0.0, "avg_logprob": -0.2763034820556641, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0002907387097366154}, {"id": 22, "seek": 13464, "start": 140.27999999999997, "end": 148.32, "text": " and boots. So it's kind of like a super set of JSON. And I have an example here", "tokens": [293, 15194, 13, 407, 309, 311, 733, 295, 411, 257, 1687, 992, 295, 31828, 13, 400, 286, 362, 364, 1365, 510], "temperature": 0.0, "avg_logprob": -0.2763034820556641, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0002907387097366154}, {"id": 23, "seek": 13464, "start": 148.32, "end": 152.88, "text": " that you, you build a new object that has a key A, that is an array, that is one,", "tokens": [300, 291, 11, 291, 1322, 257, 777, 2657, 300, 575, 257, 2141, 316, 11, 300, 307, 364, 10225, 11, 300, 307, 472, 11], "temperature": 0.0, "avg_logprob": -0.2763034820556641, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0002907387097366154}, {"id": 24, "seek": 13464, "start": 152.88, "end": 157.83999999999997, "text": " plus two, plus three and empty, and you see that it becomes the object with just", "tokens": [1804, 732, 11, 1804, 1045, 293, 6707, 11, 293, 291, 536, 300, 309, 3643, 264, 2657, 365, 445], "temperature": 0.0, "avg_logprob": -0.2763034820556641, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0002907387097366154}, {"id": 25, "seek": 13464, "start": 157.83999999999997, "end": 164.27999999999997, "text": " A and array one, five. And empty was just a function that does nothing. It outputs", "tokens": [316, 293, 10225, 472, 11, 1732, 13, 400, 6707, 390, 445, 257, 2445, 300, 775, 1825, 13, 467, 23930], "temperature": 0.0, "avg_logprob": -0.2763034820556641, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0002907387097366154}, {"id": 26, "seek": 16428, "start": 164.28, "end": 172.36, "text": " no, no value at all. And you can also select values from the input. So here we", "tokens": [572, 11, 572, 2158, 412, 439, 13, 400, 291, 393, 611, 3048, 4190, 490, 264, 4846, 13, 407, 510, 321], "temperature": 0.0, "avg_logprob": -0.18157148909294743, "compression_ratio": 1.6145833333333333, "no_speech_prob": 7.242954598041251e-05}, {"id": 27, "seek": 16428, "start": 172.36, "end": 176.64, "text": " have the object with A and B and then you create a new object that has this, the", "tokens": [362, 264, 2657, 365, 316, 293, 363, 293, 550, 291, 1884, 257, 777, 2657, 300, 575, 341, 11, 264], "temperature": 0.0, "avg_logprob": -0.18157148909294743, "compression_ratio": 1.6145833333333333, "no_speech_prob": 7.242954598041251e-05}, {"id": 28, "seek": 16428, "start": 176.64, "end": 182.48, "text": " sum key. And then that's the sum of A plus B. So then it's three. And it's a", "tokens": [2408, 2141, 13, 400, 550, 300, 311, 264, 2408, 295, 316, 1804, 363, 13, 407, 550, 309, 311, 1045, 13, 400, 309, 311, 257], "temperature": 0.0, "avg_logprob": -0.18157148909294743, "compression_ratio": 1.6145833333333333, "no_speech_prob": 7.242954598041251e-05}, {"id": 29, "seek": 16428, "start": 182.48, "end": 186.88, "text": " purely function language based on generators and backtracking. But it has", "tokens": [17491, 2445, 2856, 2361, 322, 38662, 293, 646, 6903, 14134, 13, 583, 309, 575], "temperature": 0.0, "avg_logprob": -0.18157148909294743, "compression_ratio": 1.6145833333333333, "no_speech_prob": 7.242954598041251e-05}, {"id": 30, "seek": 18688, "start": 186.88, "end": 194.79999999999998, "text": " conditioners, it has function, it has bindings, it has all, all things you need.", "tokens": [4188, 433, 11, 309, 575, 2445, 11, 309, 575, 14786, 1109, 11, 309, 575, 439, 11, 439, 721, 291, 643, 13], "temperature": 0.0, "avg_logprob": -0.16649237643466908, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014145320164971054}, {"id": 31, "seek": 18688, "start": 194.79999999999998, "end": 200.35999999999999, "text": " And it's, the default is that you run, you have one JQ filter or program that you", "tokens": [400, 309, 311, 11, 264, 7576, 307, 300, 291, 1190, 11, 291, 362, 472, 508, 48, 6608, 420, 1461, 300, 291], "temperature": 0.0, "avg_logprob": -0.16649237643466908, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014145320164971054}, {"id": 32, "seek": 18688, "start": 200.35999999999999, "end": 205.96, "text": " run individually on each input file. But then it has, it has functions to tell", "tokens": [1190, 16652, 322, 1184, 4846, 3991, 13, 583, 550, 309, 575, 11, 309, 575, 6828, 281, 980], "temperature": 0.0, "avg_logprob": -0.16649237643466908, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014145320164971054}, {"id": 33, "seek": 18688, "start": 205.96, "end": 210.28, "text": " it to not behave like that. So you can run one filter on a group of files, for", "tokens": [309, 281, 406, 15158, 411, 300, 13, 407, 291, 393, 1190, 472, 6608, 322, 257, 1594, 295, 7098, 11, 337], "temperature": 0.0, "avg_logprob": -0.16649237643466908, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014145320164971054}, {"id": 34, "seek": 21028, "start": 210.28, "end": 219.64, "text": " example. And FQ has support currently for 113 formats. And it has most of them, I", "tokens": [1365, 13, 400, 479, 48, 575, 1406, 4362, 337, 2975, 18, 25879, 13, 400, 309, 575, 881, 295, 552, 11, 286], "temperature": 0.0, "avg_logprob": -0.22690962011163884, "compression_ratio": 1.6569037656903767, "no_speech_prob": 0.0003099932218901813}, {"id": 35, "seek": 21028, "start": 219.64, "end": 224.24, "text": " guess, half of them are media related because I work with media. So just like", "tokens": [2041, 11, 1922, 295, 552, 366, 3021, 4077, 570, 286, 589, 365, 3021, 13, 407, 445, 411], "temperature": 0.0, "avg_logprob": -0.22690962011163884, "compression_ratio": 1.6569037656903767, "no_speech_prob": 0.0003099932218901813}, {"id": 36, "seek": 21028, "start": 224.24, "end": 230.88, "text": " MP3, MP4, or Flack. And they also have support for like demuxing some of these", "tokens": [14146, 18, 11, 14146, 19, 11, 420, 3235, 501, 13, 400, 436, 611, 362, 1406, 337, 411, 1371, 2449, 278, 512, 295, 613], "temperature": 0.0, "avg_logprob": -0.22690962011163884, "compression_ratio": 1.6569037656903767, "no_speech_prob": 0.0003099932218901813}, {"id": 37, "seek": 21028, "start": 230.88, "end": 235.2, "text": " forms like you, some of these containers they have support for segmenting and", "tokens": [6422, 411, 291, 11, 512, 295, 613, 17089, 436, 362, 1406, 337, 9469, 278, 293], "temperature": 0.0, "avg_logprob": -0.22690962011163884, "compression_ratio": 1.6569037656903767, "no_speech_prob": 0.0003099932218901813}, {"id": 38, "seek": 21028, "start": 235.2, "end": 240.08, "text": " things. So you can kind of recombine it and then decode the, the demuxed sample", "tokens": [721, 13, 407, 291, 393, 733, 295, 850, 3548, 533, 309, 293, 550, 979, 1429, 264, 11, 264, 1371, 2449, 292, 6889], "temperature": 0.0, "avg_logprob": -0.22690962011163884, "compression_ratio": 1.6569037656903767, "no_speech_prob": 0.0003099932218901813}, {"id": 39, "seek": 24008, "start": 240.08, "end": 245.76000000000002, "text": " and things. But they have been, other people have added other things. So", "tokens": [293, 721, 13, 583, 436, 362, 668, 11, 661, 561, 362, 3869, 661, 721, 13, 407], "temperature": 0.0, "avg_logprob": -0.2607583318437849, "compression_ratio": 1.5583756345177664, "no_speech_prob": 0.0007607276202179492}, {"id": 40, "seek": 24008, "start": 245.76000000000002, "end": 251.48000000000002, "text": " executable formats, archiving, networking. So you can do PP cap nowadays, you can do", "tokens": [7568, 712, 25879, 11, 3912, 2123, 11, 17985, 13, 407, 291, 393, 360, 37369, 1410, 13434, 11, 291, 393, 360], "temperature": 0.0, "avg_logprob": -0.2607583318437849, "compression_ratio": 1.5583756345177664, "no_speech_prob": 0.0007607276202179492}, {"id": 41, "seek": 24008, "start": 251.48000000000002, "end": 258.08000000000004, "text": " TCP reassembly even, and even decode the TCP stream. So it's a support for", "tokens": [48965, 319, 29386, 356, 754, 11, 293, 754, 979, 1429, 264, 48965, 4309, 13, 407, 309, 311, 257, 1406, 337], "temperature": 0.0, "avg_logprob": -0.2607583318437849, "compression_ratio": 1.5583756345177664, "no_speech_prob": 0.0007607276202179492}, {"id": 42, "seek": 24008, "start": 258.08000000000004, "end": 264.64, "text": " RTMP, for example. And it's also a support for some serialization for like", "tokens": [21797, 12224, 11, 337, 1365, 13, 400, 309, 311, 611, 257, 1406, 337, 512, 17436, 2144, 337, 411], "temperature": 0.0, "avg_logprob": -0.2607583318437849, "compression_ratio": 1.5583756345177664, "no_speech_prob": 0.0007607276202179492}, {"id": 43, "seek": 26464, "start": 264.64, "end": 270.52, "text": " message pack and the ASM1 beer and the seat, seabor and those. And it's also a", "tokens": [3636, 2844, 293, 264, 7469, 44, 16, 8795, 293, 264, 6121, 11, 369, 3816, 293, 729, 13, 400, 309, 311, 611, 257], "temperature": 0.0, "avg_logprob": -0.20653058801378524, "compression_ratio": 1.7142857142857142, "no_speech_prob": 8.974543743534014e-05}, {"id": 44, "seek": 26464, "start": 270.52, "end": 275.47999999999996, "text": " support for some text format. Some of them you can even decode and encode. So", "tokens": [1406, 337, 512, 2487, 7877, 13, 2188, 295, 552, 291, 393, 754, 979, 1429, 293, 2058, 1429, 13, 407], "temperature": 0.0, "avg_logprob": -0.20653058801378524, "compression_ratio": 1.7142857142857142, "no_speech_prob": 8.974543743534014e-05}, {"id": 45, "seek": 26464, "start": 275.47999999999996, "end": 282.0, "text": " you can decode it into a JQ or JSON value, transform it with JQ and then", "tokens": [291, 393, 979, 1429, 309, 666, 257, 508, 48, 420, 31828, 2158, 11, 4088, 309, 365, 508, 48, 293, 550], "temperature": 0.0, "avg_logprob": -0.20653058801378524, "compression_ratio": 1.7142857142857142, "no_speech_prob": 8.974543743534014e-05}, {"id": 46, "seek": 26464, "start": 282.0, "end": 286.0, "text": " encode it back to some other text format. You can't do it with the binary", "tokens": [2058, 1429, 309, 646, 281, 512, 661, 2487, 7877, 13, 509, 393, 380, 360, 309, 365, 264, 17434], "temperature": 0.0, "avg_logprob": -0.20653058801378524, "compression_ratio": 1.7142857142857142, "no_speech_prob": 8.974543743534014e-05}, {"id": 47, "seek": 26464, "start": 286.0, "end": 290.8, "text": " formats. I will see if I get to that to explain why that is, that is not easy to", "tokens": [25879, 13, 286, 486, 536, 498, 286, 483, 281, 300, 281, 2903, 983, 300, 307, 11, 300, 307, 406, 1858, 281], "temperature": 0.0, "avg_logprob": -0.20653058801378524, "compression_ratio": 1.7142857142857142, "no_speech_prob": 8.974543743534014e-05}, {"id": 48, "seek": 29080, "start": 290.8, "end": 297.36, "text": " do. So what does it mean when you decode? What does it mean that you FQ", "tokens": [360, 13, 407, 437, 775, 309, 914, 562, 291, 979, 1429, 30, 708, 775, 309, 914, 300, 291, 479, 48], "temperature": 0.0, "avg_logprob": -0.21375658345776935, "compression_ratio": 1.5786802030456852, "no_speech_prob": 6.125147774582729e-05}, {"id": 49, "seek": 29080, "start": 297.36, "end": 302.8, "text": " support the format? It means that it can, there's, there is some code is written", "tokens": [1406, 264, 7877, 30, 467, 1355, 300, 309, 393, 11, 456, 311, 11, 456, 307, 512, 3089, 307, 3720], "temperature": 0.0, "avg_logprob": -0.21375658345776935, "compression_ratio": 1.5786802030456852, "no_speech_prob": 6.125147774582729e-05}, {"id": 50, "seek": 29080, "start": 302.8, "end": 309.88, "text": " in Go. So there's like a kind of a DSL for writing decoders. And that produces a", "tokens": [294, 1037, 13, 407, 456, 311, 411, 257, 733, 295, 257, 15816, 43, 337, 3579, 979, 378, 433, 13, 400, 300, 14725, 257], "temperature": 0.0, "avg_logprob": -0.21375658345776935, "compression_ratio": 1.5786802030456852, "no_speech_prob": 6.125147774582729e-05}, {"id": 51, "seek": 29080, "start": 309.88, "end": 314.92, "text": " structure that is like JSON compatible. But each value in this structure also", "tokens": [3877, 300, 307, 411, 31828, 18218, 13, 583, 1184, 2158, 294, 341, 3877, 611], "temperature": 0.0, "avg_logprob": -0.21375658345776935, "compression_ratio": 1.5786802030456852, "no_speech_prob": 6.125147774582729e-05}, {"id": 52, "seek": 31492, "start": 314.92, "end": 322.36, "text": " have no which bit range they come from. And they also have optionally can have", "tokens": [362, 572, 597, 857, 3613, 436, 808, 490, 13, 400, 436, 611, 362, 3614, 379, 393, 362], "temperature": 0.0, "avg_logprob": -0.2346570609819771, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.00016195992066059262}, {"id": 53, "seek": 31492, "start": 322.36, "end": 326.40000000000003, "text": " like symbolic mappings. Like you can map the number to a string or string to a", "tokens": [411, 25755, 463, 28968, 13, 1743, 291, 393, 4471, 264, 1230, 281, 257, 6798, 420, 6798, 281, 257], "temperature": 0.0, "avg_logprob": -0.2346570609819771, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.00016195992066059262}, {"id": 54, "seek": 31492, "start": 326.40000000000003, "end": 332.0, "text": " string or boolean to a, so you can in binary format you usually encode some", "tokens": [6798, 420, 748, 4812, 282, 281, 257, 11, 370, 291, 393, 294, 17434, 7877, 291, 2673, 2058, 1429, 512], "temperature": 0.0, "avg_logprob": -0.2346570609819771, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.00016195992066059262}, {"id": 55, "seek": 31492, "start": 332.0, "end": 339.12, "text": " number that means something. Like this is the upliver if you get that. And for", "tokens": [1230, 300, 1355, 746, 13, 1743, 341, 307, 264, 493, 75, 1837, 498, 291, 483, 300, 13, 400, 337], "temperature": 0.0, "avg_logprob": -0.2346570609819771, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.00016195992066059262}, {"id": 56, "seek": 31492, "start": 339.12, "end": 344.72, "text": " media this usually means that it's, you decode everything except the pixels or", "tokens": [3021, 341, 2673, 1355, 300, 309, 311, 11, 291, 979, 1429, 1203, 3993, 264, 18668, 420], "temperature": 0.0, "avg_logprob": -0.2346570609819771, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.00016195992066059262}, {"id": 57, "seek": 34472, "start": 344.72, "end": 349.12, "text": " the audio because it's like, yeah, then you buy, then you can use ffmpeg or whatever", "tokens": [264, 6278, 570, 309, 311, 411, 11, 1338, 11, 550, 291, 2256, 11, 550, 291, 393, 764, 283, 69, 76, 494, 70, 420, 2035], "temperature": 0.0, "avg_logprob": -0.25478177366003524, "compression_ratio": 1.729957805907173, "no_speech_prob": 0.0002132376394001767}, {"id": 58, "seek": 34472, "start": 349.12, "end": 353.04, "text": " you want. There are some format that actually decodes to the samples. Flack for", "tokens": [291, 528, 13, 821, 366, 512, 7877, 300, 767, 979, 4789, 281, 264, 10938, 13, 3235, 501, 337], "temperature": 0.0, "avg_logprob": -0.25478177366003524, "compression_ratio": 1.729957805907173, "no_speech_prob": 0.0002132376394001767}, {"id": 59, "seek": 34472, "start": 353.04, "end": 357.56, "text": " example we have support for actually coding. So there is a full flack decoder in", "tokens": [1365, 321, 362, 1406, 337, 767, 17720, 13, 407, 456, 307, 257, 1577, 932, 501, 979, 19866, 294], "temperature": 0.0, "avg_logprob": -0.25478177366003524, "compression_ratio": 1.729957805907173, "no_speech_prob": 0.0002132376394001767}, {"id": 60, "seek": 34472, "start": 357.56, "end": 364.6, "text": " Flackube but you can't, you can't listen to the sound. And some format can use", "tokens": [3235, 501, 1977, 457, 291, 393, 380, 11, 291, 393, 380, 2140, 281, 264, 1626, 13, 400, 512, 7877, 393, 764], "temperature": 0.0, "avg_logprob": -0.25478177366003524, "compression_ratio": 1.729957805907173, "no_speech_prob": 0.0002132376394001767}, {"id": 61, "seek": 34472, "start": 364.6, "end": 370.0, "text": " other formats. That's how they are. They're like hierarchy over that they use. So you", "tokens": [661, 25879, 13, 663, 311, 577, 436, 366, 13, 814, 434, 411, 22333, 670, 300, 436, 764, 13, 407, 291], "temperature": 0.0, "avg_logprob": -0.25478177366003524, "compression_ratio": 1.729957805907173, "no_speech_prob": 0.0002132376394001767}, {"id": 62, "seek": 37000, "start": 370.0, "end": 374.76, "text": " can even type in pfmpeg users, the internet decoder using IPV. And then you", "tokens": [393, 754, 2010, 294, 280, 69, 76, 494, 70, 5022, 11, 264, 4705, 979, 19866, 1228, 8671, 53, 13, 400, 550, 291], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 63, "seek": 37000, "start": 374.76, "end": 378.08, "text": " can even end up with the loops here that they're like zip files in the zip file.", "tokens": [393, 754, 917, 493, 365, 264, 16121, 510, 300, 436, 434, 411, 20730, 7098, 294, 264, 20730, 3991, 13], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 64, "seek": 37000, "start": 378.08, "end": 385.84, "text": " And yeah. And there's also support for formats to pass. You can even return", "tokens": [400, 1338, 13, 400, 456, 311, 611, 1406, 337, 25879, 281, 1320, 13, 509, 393, 754, 2736], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 65, "seek": 37000, "start": 385.84, "end": 389.84, "text": " value. You can return like values from a decoder into another decoder. You don't", "tokens": [2158, 13, 509, 393, 2736, 411, 4190, 490, 257, 979, 19866, 666, 1071, 979, 19866, 13, 509, 500, 380], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 66, "seek": 37000, "start": 389.84, "end": 395.52, "text": " see this from the outside. But then for example mp4 has some boxes that have", "tokens": [536, 341, 490, 264, 2380, 13, 583, 550, 337, 1365, 275, 79, 19, 575, 512, 9002, 300, 362], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 67, "seek": 37000, "start": 395.52, "end": 399.64, "text": " like information about how the samples should be decoded. Like how long are", "tokens": [411, 1589, 466, 577, 264, 10938, 820, 312, 979, 12340, 13, 1743, 577, 938, 366], "temperature": 0.0, "avg_logprob": -0.2733264738513577, "compression_ratio": 1.7518796992481203, "no_speech_prob": 4.7574681957485154e-05}, {"id": 68, "seek": 39964, "start": 399.64, "end": 405.76, "text": " some fields or things. So then before and before the decoder can pass that", "tokens": [512, 7909, 420, 721, 13, 407, 550, 949, 293, 949, 264, 979, 19866, 393, 1320, 300], "temperature": 0.0, "avg_logprob": -0.2045935449146089, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00015909112698864192}, {"id": 69, "seek": 39964, "start": 405.76, "end": 413.88, "text": " information down to another sample decoder. So how do I use? I use it because", "tokens": [1589, 760, 281, 1071, 6889, 979, 19866, 13, 407, 577, 360, 286, 764, 30, 286, 764, 309, 570], "temperature": 0.0, "avg_logprob": -0.2045935449146089, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00015909112698864192}, {"id": 70, "seek": 39964, "start": 413.88, "end": 419.12, "text": " of this. Because I work with media so all more or less the whole mp4 file is", "tokens": [295, 341, 13, 1436, 286, 589, 365, 3021, 370, 439, 544, 420, 1570, 264, 1379, 275, 79, 19, 3991, 307], "temperature": 0.0, "avg_logprob": -0.2045935449146089, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00015909112698864192}, {"id": 71, "seek": 39964, "start": 419.12, "end": 425.88, "text": " metadata about how to play this. How to seek, how to how to sync, how to yeah", "tokens": [26603, 466, 577, 281, 862, 341, 13, 1012, 281, 8075, 11, 577, 281, 577, 281, 20271, 11, 577, 281, 1338], "temperature": 0.0, "avg_logprob": -0.2045935449146089, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00015909112698864192}, {"id": 72, "seek": 42588, "start": 425.88, "end": 433.28, "text": " everything. And I guess Derek had a good talk about why this multimedia is", "tokens": [1203, 13, 400, 286, 2041, 22887, 632, 257, 665, 751, 466, 983, 341, 49202, 307], "temperature": 0.0, "avg_logprob": -0.16488032870822483, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.00026007098495028913}, {"id": 73, "seek": 42588, "start": 433.28, "end": 440.04, "text": " basically endless pain. And I guess FQ can't really fix the pain but it can", "tokens": [1936, 16144, 1822, 13, 400, 286, 2041, 479, 48, 393, 380, 534, 3191, 264, 1822, 457, 309, 393], "temperature": 0.0, "avg_logprob": -0.16488032870822483, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.00026007098495028913}, {"id": 74, "seek": 42588, "start": 440.04, "end": 447.24, "text": " locate the pain I guess. So this is what I use it for. I debug the query assist", "tokens": [22370, 264, 1822, 286, 2041, 13, 407, 341, 307, 437, 286, 764, 309, 337, 13, 286, 24083, 264, 14581, 4255], "temperature": 0.0, "avg_logprob": -0.16488032870822483, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.00026007098495028913}, {"id": 75, "seek": 42588, "start": 447.24, "end": 452.84, "text": " when I work with media files. And it's used for someone usually at work there's", "tokens": [562, 286, 589, 365, 3021, 7098, 13, 400, 309, 311, 1143, 337, 1580, 2673, 412, 589, 456, 311], "temperature": 0.0, "avg_logprob": -0.16488032870822483, "compression_ratio": 1.5736040609137056, "no_speech_prob": 0.00026007098495028913}, {"id": 76, "seek": 45284, "start": 452.84, "end": 456.4, "text": " a media file that has broken that someone it doesn't transcode or it's not in sync", "tokens": [257, 3021, 3991, 300, 575, 5463, 300, 1580, 309, 1177, 380, 1145, 22332, 420, 309, 311, 406, 294, 20271], "temperature": 0.0, "avg_logprob": -0.25092631892154094, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.00024784079869277775}, {"id": 77, "seek": 45284, "start": 456.4, "end": 460.59999999999997, "text": " or and they say what what is wrong with this file. And we have to figure out", "tokens": [420, 293, 436, 584, 437, 437, 307, 2085, 365, 341, 3991, 13, 400, 321, 362, 281, 2573, 484], "temperature": 0.0, "avg_logprob": -0.25092631892154094, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.00024784079869277775}, {"id": 78, "seek": 45284, "start": 460.59999999999997, "end": 465.2, "text": " like what is it? Is it the decoder problem? The maxi problem? Is it the encoder? Is it", "tokens": [411, 437, 307, 309, 30, 1119, 309, 264, 979, 19866, 1154, 30, 440, 11469, 72, 1154, 30, 1119, 309, 264, 2058, 19866, 30, 1119, 309], "temperature": 0.0, "avg_logprob": -0.25092631892154094, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.00024784079869277775}, {"id": 79, "seek": 45284, "start": 465.2, "end": 473.4, "text": " is it corrupt? Is it whatever? So FQ is very useful to quickly triage a lot of", "tokens": [307, 309, 17366, 30, 1119, 309, 2035, 30, 407, 479, 48, 307, 588, 4420, 281, 2661, 1376, 609, 257, 688, 295], "temperature": 0.0, "avg_logprob": -0.25092631892154094, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.00024784079869277775}, {"id": 80, "seek": 45284, "start": 473.4, "end": 482.32, "text": " broken media files. And I can just short what is the time? Short like what can it", "tokens": [5463, 3021, 7098, 13, 400, 286, 393, 445, 2099, 437, 307, 264, 565, 30, 16881, 411, 437, 393, 309], "temperature": 0.0, "avg_logprob": -0.25092631892154094, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.00024784079869277775}, {"id": 81, "seek": 48232, "start": 482.32, "end": 487.52, "text": " not do? Or what is not good? It's not good for encoding like to change things.", "tokens": [406, 360, 30, 1610, 437, 307, 406, 665, 30, 467, 311, 406, 665, 337, 43430, 411, 281, 1319, 721, 13], "temperature": 0.0, "avg_logprob": -0.19644115938998685, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0002128458727383986}, {"id": 82, "seek": 48232, "start": 487.52, "end": 493.8, "text": " You can change things but it's more about slicing binaries into and then", "tokens": [509, 393, 1319, 721, 457, 309, 311, 544, 466, 46586, 5171, 4889, 666, 293, 550], "temperature": 0.0, "avg_logprob": -0.19644115938998685, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0002128458727383986}, {"id": 83, "seek": 48232, "start": 493.8, "end": 497.96, "text": " concatenate them together and then write them out to a new file kind of. So there's", "tokens": [1588, 7186, 473, 552, 1214, 293, 550, 2464, 552, 484, 281, 257, 777, 3991, 733, 295, 13, 407, 456, 311], "temperature": 0.0, "avg_logprob": -0.19644115938998685, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0002128458727383986}, {"id": 84, "seek": 48232, "start": 497.96, "end": 501.28, "text": " no like you can't just change the value in some JSON structure and just realize", "tokens": [572, 411, 291, 393, 380, 445, 1319, 264, 2158, 294, 512, 31828, 3877, 293, 445, 4325], "temperature": 0.0, "avg_logprob": -0.19644115938998685, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0002128458727383986}, {"id": 85, "seek": 48232, "start": 501.28, "end": 508.15999999999997, "text": " it back because it's like for example I gave an example here with the mp4", "tokens": [309, 646, 570, 309, 311, 411, 337, 1365, 286, 2729, 364, 1365, 510, 365, 264, 275, 79, 19], "temperature": 0.0, "avg_logprob": -0.19644115938998685, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0002128458727383986}, {"id": 86, "seek": 50816, "start": 508.16, "end": 514.28, "text": " maxi. What would it mean to add or remove a sample in mp4 file? Then you", "tokens": [11469, 72, 13, 708, 576, 309, 914, 281, 909, 420, 4159, 257, 6889, 294, 275, 79, 19, 3991, 30, 1396, 291], "temperature": 0.0, "avg_logprob": -0.25845075908460113, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00023730054090265185}, {"id": 87, "seek": 50816, "start": 514.28, "end": 519.4, "text": " would have to change all the boxes that describe how big the samples are and it's", "tokens": [576, 362, 281, 1319, 439, 264, 9002, 300, 6786, 577, 955, 264, 10938, 366, 293, 309, 311], "temperature": 0.0, "avg_logprob": -0.25845075908460113, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00023730054090265185}, {"id": 88, "seek": 50816, "start": 519.4, "end": 527.96, "text": " just cascades away into yeah and you can see that mp4 ffmpegs mp4", "tokens": [445, 3058, 66, 2977, 1314, 666, 1338, 293, 291, 393, 536, 300, 275, 79, 19, 283, 69, 76, 494, 21559, 275, 79, 19], "temperature": 0.0, "avg_logprob": -0.25845075908460113, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00023730054090265185}, {"id": 89, "seek": 50816, "start": 527.96, "end": 534.6800000000001, "text": " implementation is 17,000 lines of c-code very dense c-code so it's use ffmpeg", "tokens": [11420, 307, 3282, 11, 1360, 3876, 295, 269, 12, 22332, 588, 18011, 269, 12, 22332, 370, 309, 311, 764, 283, 69, 76, 494, 70], "temperature": 0.0, "avg_logprob": -0.25845075908460113, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00023730054090265185}, {"id": 90, "seek": 53468, "start": 534.68, "end": 541.4, "text": " if you want to do those kind of things. And I think you see and Peter will talk", "tokens": [498, 291, 528, 281, 360, 729, 733, 295, 721, 13, 400, 286, 519, 291, 536, 293, 6508, 486, 751], "temperature": 0.0, "avg_logprob": -0.17410757541656494, "compression_ratio": 1.5628140703517588, "no_speech_prob": 8.919873653212562e-05}, {"id": 91, "seek": 53468, "start": 541.4, "end": 551.5999999999999, "text": " about more about encoding I guess and why why this is complicated. And you can", "tokens": [466, 544, 466, 43430, 286, 2041, 293, 983, 983, 341, 307, 6179, 13, 400, 291, 393], "temperature": 0.0, "avg_logprob": -0.17410757541656494, "compression_ratio": 1.5628140703517588, "no_speech_prob": 8.919873653212562e-05}, {"id": 92, "seek": 53468, "start": 551.5999999999999, "end": 556.2399999999999, "text": " repair media files with fq but you you probably have to be more or less an", "tokens": [10535, 3021, 7098, 365, 283, 80, 457, 291, 291, 1391, 362, 281, 312, 544, 420, 1570, 364], "temperature": 0.0, "avg_logprob": -0.17410757541656494, "compression_ratio": 1.5628140703517588, "no_speech_prob": 8.919873653212562e-05}, {"id": 93, "seek": 53468, "start": 556.2399999999999, "end": 563.76, "text": " expert in the format that you're fixing. I usually do like I have you you can", "tokens": [5844, 294, 264, 7877, 300, 291, 434, 19442, 13, 286, 2673, 360, 411, 286, 362, 291, 291, 393], "temperature": 0.0, "avg_logprob": -0.17410757541656494, "compression_ratio": 1.5628140703517588, "no_speech_prob": 8.919873653212562e-05}, {"id": 94, "seek": 56376, "start": 563.76, "end": 567.6, "text": " fix things by kind of testing the code the configurations or you use some kind", "tokens": [3191, 721, 538, 733, 295, 4997, 264, 3089, 264, 31493, 420, 291, 764, 512, 733], "temperature": 0.0, "avg_logprob": -0.23691480424669054, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.00013072846923023462}, {"id": 95, "seek": 56376, "start": 567.6, "end": 572.3199999999999, "text": " of you encode something and borrow from another media file and yeah", "tokens": [295, 291, 2058, 1429, 746, 293, 11172, 490, 1071, 3021, 3991, 293, 1338], "temperature": 0.0, "avg_logprob": -0.23691480424669054, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.00013072846923023462}, {"id": 96, "seek": 56376, "start": 572.3199999999999, "end": 577.96, "text": " somewhere stitch together to see what it is or so there is I have some fq code", "tokens": [4079, 5635, 1214, 281, 536, 437, 309, 307, 420, 370, 456, 307, 286, 362, 512, 283, 80, 3089], "temperature": 0.0, "avg_logprob": -0.23691480424669054, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.00013072846923023462}, {"id": 97, "seek": 56376, "start": 577.96, "end": 584.24, "text": " to build like ADTS headers and whatever if you want if you find an AC frame", "tokens": [281, 1322, 411, 9135, 7327, 45101, 293, 2035, 498, 291, 528, 498, 291, 915, 364, 8157, 3920], "temperature": 0.0, "avg_logprob": -0.23691480424669054, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.00013072846923023462}, {"id": 98, "seek": 56376, "start": 584.24, "end": 588.28, "text": " somewhere you don't even know what because an AC frame has to have metadata", "tokens": [4079, 291, 500, 380, 754, 458, 437, 570, 364, 8157, 3920, 575, 281, 362, 26603], "temperature": 0.0, "avg_logprob": -0.23691480424669054, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.00013072846923023462}, {"id": 99, "seek": 58828, "start": 588.28, "end": 595.36, "text": " about like what how many channels it has and what profile it is and things. And it", "tokens": [466, 411, 437, 577, 867, 9235, 309, 575, 293, 437, 7964, 309, 307, 293, 721, 13, 400, 309], "temperature": 0.0, "avg_logprob": -0.24153786079556333, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.0005143025191500783}, {"id": 100, "seek": 58828, "start": 595.36, "end": 599.68, "text": " doesn't do any decoders in runtime at the moment you can't write the decoder", "tokens": [1177, 380, 360, 604, 979, 378, 433, 294, 34474, 412, 264, 1623, 291, 393, 380, 2464, 264, 979, 19866], "temperature": 0.0, "avg_logprob": -0.24153786079556333, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.0005143025191500783}, {"id": 101, "seek": 58828, "start": 599.68, "end": 603.6, "text": " you have to write in go now and then compile it so we'll see maybe in the", "tokens": [291, 362, 281, 2464, 294, 352, 586, 293, 550, 31413, 309, 370, 321, 603, 536, 1310, 294, 264], "temperature": 0.0, "avg_logprob": -0.24153786079556333, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.0005143025191500783}, {"id": 102, "seek": 58828, "start": 603.6, "end": 607.0799999999999, "text": " future it's going to have cacti support. I have to have a prototype for cacti but", "tokens": [2027, 309, 311, 516, 281, 362, 269, 578, 72, 1406, 13, 286, 362, 281, 362, 257, 19475, 337, 269, 578, 72, 457], "temperature": 0.0, "avg_logprob": -0.24153786079556333, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.0005143025191500783}, {"id": 103, "seek": 58828, "start": 607.0799999999999, "end": 611.56, "text": " it is complicated also it has an expression language I have to write", "tokens": [309, 307, 6179, 611, 309, 575, 364, 6114, 2856, 286, 362, 281, 2464], "temperature": 0.0, "avg_logprob": -0.24153786079556333, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.0005143025191500783}, {"id": 104, "seek": 61156, "start": 611.56, "end": 618.5799999999999, "text": " the parser for that. Maybe I will talk to you about this and see. There is more", "tokens": [264, 21156, 260, 337, 300, 13, 2704, 286, 486, 751, 281, 291, 466, 341, 293, 536, 13, 821, 307, 544], "temperature": 0.0, "avg_logprob": -0.23982630835639107, "compression_ratio": 1.4573170731707317, "no_speech_prob": 0.00037084028008393943}, {"id": 105, "seek": 61156, "start": 618.5799999999999, "end": 629.1199999999999, "text": " slides here but I will you can read them. I want to do a demo instead. Is it big", "tokens": [9788, 510, 457, 286, 486, 291, 393, 1401, 552, 13, 286, 528, 281, 360, 257, 10723, 2602, 13, 1119, 309, 955], "temperature": 0.0, "avg_logprob": -0.23982630835639107, "compression_ratio": 1.4573170731707317, "no_speech_prob": 0.00037084028008393943}, {"id": 106, "seek": 61156, "start": 629.1199999999999, "end": 638.0799999999999, "text": " enough? So fq is just a CLI tool. Work like this and you can do if you want to", "tokens": [1547, 30, 407, 283, 80, 307, 445, 257, 12855, 40, 2290, 13, 6603, 411, 341, 293, 291, 393, 360, 498, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.23982630835639107, "compression_ratio": 1.4573170731707317, "no_speech_prob": 0.00037084028008393943}, {"id": 107, "seek": 63808, "start": 638.08, "end": 648.1600000000001, "text": " list all the formats that it supports. So if you run fq and let's see it has pcap", "tokens": [1329, 439, 264, 25879, 300, 309, 9346, 13, 407, 498, 291, 1190, 283, 80, 293, 718, 311, 536, 309, 575, 280, 9485], "temperature": 0.0, "avg_logprob": -0.18204324700859156, "compression_ratio": 1.7403314917127073, "no_speech_prob": 0.00013216331717558205}, {"id": 108, "seek": 63808, "start": 648.1600000000001, "end": 654.0, "text": " if you do so the first argument is the filter that you want to run and dot in", "tokens": [498, 291, 360, 370, 264, 700, 6770, 307, 264, 6608, 300, 291, 528, 281, 1190, 293, 5893, 294], "temperature": 0.0, "avg_logprob": -0.18204324700859156, "compression_ratio": 1.7403314917127073, "no_speech_prob": 0.00013216331717558205}, {"id": 109, "seek": 63808, "start": 654.0, "end": 659.12, "text": " jq is just an identity function that is just it gives you what you put into get", "tokens": [361, 80, 307, 445, 364, 6575, 2445, 300, 307, 445, 309, 2709, 291, 437, 291, 829, 666, 483], "temperature": 0.0, "avg_logprob": -0.18204324700859156, "compression_ratio": 1.7403314917127073, "no_speech_prob": 0.00013216331717558205}, {"id": 110, "seek": 63808, "start": 659.12, "end": 663.12, "text": " the root kind of so here we see that it's a pcap it has a head there it has", "tokens": [264, 5593, 733, 295, 370, 510, 321, 536, 300, 309, 311, 257, 280, 9485, 309, 575, 257, 1378, 456, 309, 575], "temperature": 0.0, "avg_logprob": -0.18204324700859156, "compression_ratio": 1.7403314917127073, "no_speech_prob": 0.00013216331717558205}, {"id": 111, "seek": 66312, "start": 663.12, "end": 672.36, "text": " packets and some TCP or TCP connections and things. So you can do dash I actually", "tokens": [30364, 293, 512, 48965, 420, 48965, 9271, 293, 721, 13, 407, 291, 393, 360, 8240, 286, 767], "temperature": 0.0, "avg_logprob": -0.24929378733915442, "compression_ratio": 1.5625, "no_speech_prob": 0.00025691374321468174}, {"id": 112, "seek": 66312, "start": 672.36, "end": 677.04, "text": " I want to do I want to do a crash course in the jq. I don't know how many people", "tokens": [286, 528, 281, 360, 286, 528, 281, 360, 257, 8252, 1164, 294, 264, 361, 80, 13, 286, 500, 380, 458, 577, 867, 561], "temperature": 0.0, "avg_logprob": -0.24929378733915442, "compression_ratio": 1.5625, "no_speech_prob": 0.00025691374321468174}, {"id": 113, "seek": 66312, "start": 677.04, "end": 685.08, "text": " know how jq works so I can do a short version how just to show the", "tokens": [458, 577, 361, 80, 1985, 370, 286, 393, 360, 257, 2099, 3037, 577, 445, 281, 855, 264], "temperature": 0.0, "avg_logprob": -0.24929378733915442, "compression_ratio": 1.5625, "no_speech_prob": 0.00025691374321468174}, {"id": 114, "seek": 66312, "start": 685.08, "end": 691.08, "text": " particularities of jq. So now I started jq with dash I which gives you", "tokens": [1729, 1088, 295, 361, 80, 13, 407, 586, 286, 1409, 361, 80, 365, 8240, 286, 597, 2709, 291], "temperature": 0.0, "avg_logprob": -0.24929378733915442, "compression_ratio": 1.5625, "no_speech_prob": 0.00025691374321468174}, {"id": 115, "seek": 69108, "start": 691.08, "end": 696.0, "text": " just a null input if you get one input that is just null so it's just a way", "tokens": [445, 257, 18184, 4846, 498, 291, 483, 472, 4846, 300, 307, 445, 18184, 370, 309, 311, 445, 257, 636], "temperature": 0.0, "avg_logprob": -0.296910346308841, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.00015507628268096596}, {"id": 116, "seek": 69108, "start": 696.0, "end": 701.6, "text": " of you can at least just execute jq values because it needs to have an input", "tokens": [295, 291, 393, 412, 1935, 445, 14483, 361, 80, 4190, 570, 309, 2203, 281, 362, 364, 4846], "temperature": 0.0, "avg_logprob": -0.296910346308841, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.00015507628268096596}, {"id": 117, "seek": 69108, "start": 701.6, "end": 708.6, "text": " somehow always. So now you can just write strings or whatever you want to do", "tokens": [6063, 1009, 13, 407, 586, 291, 393, 445, 2464, 13985, 420, 2035, 291, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.296910346308841, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.00015507628268096596}, {"id": 118, "seek": 69108, "start": 708.6, "end": 717.08, "text": " and if you do dot there you just yes null and I guess the most special thing", "tokens": [293, 498, 291, 360, 5893, 456, 291, 445, 2086, 18184, 293, 286, 2041, 264, 881, 2121, 551], "temperature": 0.0, "avg_logprob": -0.296910346308841, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.00015507628268096596}, {"id": 119, "seek": 71708, "start": 717.08, "end": 723.2800000000001, "text": " about jq is the comma operator and that outputs a value so you can do 1 comma", "tokens": [466, 361, 80, 307, 264, 22117, 12973, 293, 300, 23930, 257, 2158, 370, 291, 393, 360, 502, 22117], "temperature": 0.0, "avg_logprob": -0.1532270847222744, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.00026734123821370304}, {"id": 120, "seek": 71708, "start": 723.2800000000001, "end": 730.2800000000001, "text": " 1 2 3 it gives you 1 2 3 but then in jq you can there are some special forms", "tokens": [502, 568, 805, 309, 2709, 291, 502, 568, 805, 457, 550, 294, 361, 80, 291, 393, 456, 366, 512, 2121, 6422], "temperature": 0.0, "avg_logprob": -0.1532270847222744, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.00026734123821370304}, {"id": 121, "seek": 71708, "start": 730.2800000000001, "end": 735.8000000000001, "text": " like this collect which sounds this looks very familiar to us as an array", "tokens": [411, 341, 2500, 597, 3263, 341, 1542, 588, 4963, 281, 505, 382, 364, 10225], "temperature": 0.0, "avg_logprob": -0.1532270847222744, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.00026734123821370304}, {"id": 122, "seek": 71708, "start": 735.8000000000001, "end": 742.32, "text": " that then collects those values into something but then in jq you could you", "tokens": [300, 550, 39897, 729, 4190, 666, 746, 457, 550, 294, 361, 80, 291, 727, 291], "temperature": 0.0, "avg_logprob": -0.1532270847222744, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.00026734123821370304}, {"id": 123, "seek": 74232, "start": 742.32, "end": 749.48, "text": " could just write the expressions here or whatever you want so let's say we can", "tokens": [727, 445, 2464, 264, 15277, 510, 420, 2035, 291, 528, 370, 718, 311, 584, 321, 393], "temperature": 0.0, "avg_logprob": -0.18738127390543619, "compression_ratio": 1.782857142857143, "no_speech_prob": 1.689990676823072e-05}, {"id": 124, "seek": 74232, "start": 749.48, "end": 757.6800000000001, "text": " define a function for example so and then you can just collect that function or", "tokens": [6964, 257, 2445, 337, 1365, 370, 293, 550, 291, 393, 445, 2500, 300, 2445, 420], "temperature": 0.0, "avg_logprob": -0.18738127390543619, "compression_ratio": 1.782857142857143, "no_speech_prob": 1.689990676823072e-05}, {"id": 125, "seek": 74232, "start": 757.6800000000001, "end": 765.12, "text": " you can call it two times or you can map those values yeah so you see how it", "tokens": [291, 393, 818, 309, 732, 1413, 420, 291, 393, 4471, 729, 4190, 1338, 370, 291, 536, 577, 309], "temperature": 0.0, "avg_logprob": -0.18738127390543619, "compression_ratio": 1.782857142857143, "no_speech_prob": 1.689990676823072e-05}, {"id": 126, "seek": 74232, "start": 765.12, "end": 770.5200000000001, "text": " was too fast to but you see how you can define function you can have binding", "tokens": [390, 886, 2370, 281, 457, 291, 536, 577, 291, 393, 6964, 2445, 291, 393, 362, 17359], "temperature": 0.0, "avg_logprob": -0.18738127390543619, "compression_ratio": 1.782857142857143, "no_speech_prob": 1.689990676823072e-05}, {"id": 127, "seek": 77052, "start": 770.52, "end": 774.96, "text": " so it's a full functional language that's it's very I like it a lot how it", "tokens": [370, 309, 311, 257, 1577, 11745, 2856, 300, 311, 309, 311, 588, 286, 411, 309, 257, 688, 577, 309], "temperature": 0.0, "avg_logprob": -0.22516982695635626, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.000583290122449398}, {"id": 128, "seek": 77052, "start": 774.96, "end": 788.96, "text": " works so let's back to that pcap file so let's see you can do for example if you", "tokens": [1985, 370, 718, 311, 646, 281, 300, 280, 9485, 3991, 370, 718, 311, 536, 291, 393, 360, 337, 1365, 498, 291], "temperature": 0.0, "avg_logprob": -0.22516982695635626, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.000583290122449398}, {"id": 129, "seek": 77052, "start": 788.96, "end": 794.64, "text": " want to see look at the first packet you can do this you can pipe it to D which is", "tokens": [528, 281, 536, 574, 412, 264, 700, 20300, 291, 393, 360, 341, 291, 393, 11240, 309, 281, 413, 597, 307], "temperature": 0.0, "avg_logprob": -0.22516982695635626, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.000583290122449398}, {"id": 130, "seek": 79464, "start": 794.64, "end": 801.28, "text": " shows more recursively all the if you if you just give it when you do this you", "tokens": [3110, 544, 20560, 3413, 439, 264, 498, 291, 498, 291, 445, 976, 309, 562, 291, 360, 341, 291], "temperature": 0.0, "avg_logprob": -0.1783584332933613, "compression_ratio": 1.900990099009901, "no_speech_prob": 0.0003109329263679683}, {"id": 131, "seek": 79464, "start": 801.28, "end": 807.04, "text": " actually run D also but it also show it only showed one level so if you do D it", "tokens": [767, 1190, 413, 611, 457, 309, 611, 855, 309, 787, 4712, 472, 1496, 370, 498, 291, 360, 413, 309], "temperature": 0.0, "avg_logprob": -0.1783584332933613, "compression_ratio": 1.900990099009901, "no_speech_prob": 0.0003109329263679683}, {"id": 132, "seek": 79464, "start": 807.04, "end": 811.48, "text": " it will show all of it so here you can see like you can write on jq", "tokens": [309, 486, 855, 439, 295, 309, 370, 510, 291, 393, 536, 411, 291, 393, 2464, 322, 361, 80], "temperature": 0.0, "avg_logprob": -0.1783584332933613, "compression_ratio": 1.900990099009901, "no_speech_prob": 0.0003109329263679683}, {"id": 133, "seek": 79464, "start": 811.48, "end": 815.0, "text": " expression here it is like show me the first and the last packet and it will do", "tokens": [6114, 510, 309, 307, 411, 855, 385, 264, 700, 293, 264, 1036, 20300, 293, 309, 486, 360], "temperature": 0.0, "avg_logprob": -0.1783584332933613, "compression_ratio": 1.900990099009901, "no_speech_prob": 0.0003109329263679683}, {"id": 134, "seek": 79464, "start": 815.0, "end": 823.08, "text": " this and then you can say both of them yeah so you can do things like that so", "tokens": [341, 293, 550, 291, 393, 584, 1293, 295, 552, 1338, 370, 291, 393, 360, 721, 411, 300, 370], "temperature": 0.0, "avg_logprob": -0.1783584332933613, "compression_ratio": 1.900990099009901, "no_speech_prob": 0.0003109329263679683}, {"id": 135, "seek": 82308, "start": 823.08, "end": 829.76, "text": " let's see we can go into the TCP connection and we take the first one we", "tokens": [718, 311, 536, 321, 393, 352, 666, 264, 48965, 4984, 293, 321, 747, 264, 700, 472, 321], "temperature": 0.0, "avg_logprob": -0.24842150618390338, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00041712119127623737}, {"id": 136, "seek": 82308, "start": 829.76, "end": 839.08, "text": " can do D and we see that this is seems to be HDP request someone has downloaded", "tokens": [393, 360, 413, 293, 321, 536, 300, 341, 307, 2544, 281, 312, 389, 11373, 5308, 1580, 575, 21748], "temperature": 0.0, "avg_logprob": -0.24842150618390338, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00041712119127623737}, {"id": 137, "seek": 83908, "start": 839.08, "end": 853.76, "text": " the file so let's see we can go to the server stream let's see and there is a", "tokens": [264, 3991, 370, 718, 311, 536, 321, 393, 352, 281, 264, 7154, 4309, 718, 311, 536, 293, 456, 307, 257], "temperature": 0.0, "avg_logprob": -0.20203214616917853, "compression_ratio": 1.6808510638297873, "no_speech_prob": 9.319460514234379e-05}, {"id": 138, "seek": 83908, "start": 853.76, "end": 857.12, "text": " there's one thing about jq is that the jq don't have doesn't have binary support", "tokens": [456, 311, 472, 551, 466, 361, 80, 307, 300, 264, 361, 80, 500, 380, 362, 1177, 380, 362, 17434, 1406], "temperature": 0.0, "avg_logprob": -0.20203214616917853, "compression_ratio": 1.6808510638297873, "no_speech_prob": 9.319460514234379e-05}, {"id": 139, "seek": 83908, "start": 857.12, "end": 864.76, "text": " it only has string so you so fq has to to support binary you can there is some", "tokens": [309, 787, 575, 6798, 370, 291, 370, 283, 80, 575, 281, 281, 1406, 17434, 291, 393, 456, 307, 512], "temperature": 0.0, "avg_logprob": -0.20203214616917853, "compression_ratio": 1.6808510638297873, "no_speech_prob": 9.319460514234379e-05}, {"id": 140, "seek": 86476, "start": 864.76, "end": 871.3199999999999, "text": " special functions in fq to tell it that this this string is actually binary or", "tokens": [2121, 6828, 294, 283, 80, 281, 980, 309, 300, 341, 341, 6798, 307, 767, 17434, 420], "temperature": 0.0, "avg_logprob": -0.18568121356728637, "compression_ratio": 1.6808510638297873, "no_speech_prob": 4.013250509160571e-05}, {"id": 141, "seek": 86476, "start": 871.3199999999999, "end": 875.72, "text": " I want it as binary if it's possible so then you can say like this stream for", "tokens": [286, 528, 309, 382, 17434, 498, 309, 311, 1944, 370, 550, 291, 393, 584, 411, 341, 4309, 337], "temperature": 0.0, "avg_logprob": -0.18568121356728637, "compression_ratio": 1.6808510638297873, "no_speech_prob": 4.013250509160571e-05}, {"id": 142, "seek": 86476, "start": 875.72, "end": 882.04, "text": " example if you if I would just do type it just a string but if I do two bytes you", "tokens": [1365, 498, 291, 498, 286, 576, 445, 360, 2010, 309, 445, 257, 6798, 457, 498, 286, 360, 732, 36088, 291], "temperature": 0.0, "avg_logprob": -0.18568121356728637, "compression_ratio": 1.6808510638297873, "no_speech_prob": 4.013250509160571e-05}, {"id": 143, "seek": 86476, "start": 882.04, "end": 888.4399999999999, "text": " will actually get the raw bytes and then I can say like I wanted to maybe 400", "tokens": [486, 767, 483, 264, 8936, 36088, 293, 550, 286, 393, 584, 411, 286, 1415, 281, 1310, 8423], "temperature": 0.0, "avg_logprob": -0.18568121356728637, "compression_ratio": 1.6808510638297873, "no_speech_prob": 4.013250509160571e-05}, {"id": 144, "seek": 88844, "start": 888.44, "end": 895.08, "text": " first and DD is something that shows the whole it doesn't truncate the output so", "tokens": [700, 293, 30778, 307, 746, 300, 3110, 264, 1379, 309, 1177, 380, 504, 409, 66, 473, 264, 5598, 370], "temperature": 0.0, "avg_logprob": -0.39356064152073217, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.0010749738430604339}, {"id": 145, "seek": 88844, "start": 895.08, "end": 900.5600000000001, "text": " here we see that this is some kind of HDP request", "tokens": [510, 321, 536, 300, 341, 307, 512, 733, 295, 389, 11373, 5308], "temperature": 0.0, "avg_logprob": -0.39356064152073217, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.0010749738430604339}, {"id": 146, "seek": 90056, "start": 900.56, "end": 921.3199999999999, "text": " so let's say we want to get the bytes for this okay plus so here I think I have", "tokens": [370, 718, 311, 584, 321, 528, 281, 483, 264, 36088, 337, 341, 1392, 1804, 370, 510, 286, 519, 286, 362], "temperature": 0.0, "avg_logprob": -0.2495892566183339, "compression_ratio": 1.347457627118644, "no_speech_prob": 0.00012356504157651216}, {"id": 147, "seek": 90056, "start": 921.3199999999999, "end": 927.5999999999999, "text": " the body of the HDP request so in jq you can more than do for example this that", "tokens": [264, 1772, 295, 264, 389, 11373, 5308, 370, 294, 361, 80, 291, 393, 544, 813, 360, 337, 1365, 341, 300], "temperature": 0.0, "avg_logprob": -0.2495892566183339, "compression_ratio": 1.347457627118644, "no_speech_prob": 0.00012356504157651216}, {"id": 148, "seek": 92760, "start": 927.6, "end": 932.9200000000001, "text": " all all the all the coders in fq are jq functions so you can do this now and it", "tokens": [439, 439, 264, 439, 264, 17656, 433, 294, 283, 80, 366, 361, 80, 6828, 370, 291, 393, 360, 341, 586, 293, 309], "temperature": 0.0, "avg_logprob": -0.21136623880137567, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.00037479339516721666}, {"id": 149, "seek": 92760, "start": 932.9200000000001, "end": 938.0, "text": " will just decode it as an mp4 file so now you can start as a sub-repell for", "tokens": [486, 445, 979, 1429, 309, 382, 364, 275, 79, 19, 3991, 370, 586, 291, 393, 722, 382, 257, 1422, 12, 265, 49241, 337], "temperature": 0.0, "avg_logprob": -0.21136623880137567, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.00037479339516721666}, {"id": 150, "seek": 92760, "start": 938.0, "end": 945.84, "text": " example now you're inside the mp4 inside the the pcap and now you can do and", "tokens": [1365, 586, 291, 434, 1854, 264, 275, 79, 19, 1854, 264, 264, 280, 9485, 293, 586, 291, 393, 360, 293], "temperature": 0.0, "avg_logprob": -0.21136623880137567, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.00037479339516721666}, {"id": 151, "seek": 92760, "start": 945.84, "end": 951.96, "text": " here you have the whole box 3 for the mp4 file and and you can for example go", "tokens": [510, 291, 362, 264, 1379, 2424, 805, 337, 264, 275, 79, 19, 3991, 293, 293, 291, 393, 337, 1365, 352], "temperature": 0.0, "avg_logprob": -0.21136623880137567, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.00037479339516721666}, {"id": 152, "seek": 92760, "start": 951.96, "end": 956.96, "text": " into the samples I think this is some kind of subtitles for mp4 file that I", "tokens": [666, 264, 10938, 286, 519, 341, 307, 512, 733, 295, 42045, 337, 275, 79, 19, 3991, 300, 286], "temperature": 0.0, "avg_logprob": -0.21136623880137567, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.00037479339516721666}, {"id": 153, "seek": 95696, "start": 956.96, "end": 967.12, "text": " found somewhere and here you have the tracks it has samples so this is like", "tokens": [1352, 4079, 293, 510, 291, 362, 264, 10218, 309, 575, 10938, 370, 341, 307, 411], "temperature": 0.0, "avg_logprob": -0.16303506444712154, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.00017855937767308205}, {"id": 154, "seek": 95696, "start": 967.12, "end": 972.0400000000001, "text": " the raw the raw bytes for that sample and you see it's some it's some kind of", "tokens": [264, 8936, 264, 8936, 36088, 337, 300, 6889, 293, 291, 536, 309, 311, 512, 309, 311, 512, 733, 295], "temperature": 0.0, "avg_logprob": -0.16303506444712154, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.00017855937767308205}, {"id": 155, "seek": 95696, "start": 972.0400000000001, "end": 981.4000000000001, "text": " weird XML subtitle and fq has support for XML so you can do this and then you", "tokens": [3657, 43484, 30706, 306, 293, 283, 80, 575, 1406, 337, 43484, 370, 291, 393, 360, 341, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.16303506444712154, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.00017855937767308205}, {"id": 156, "seek": 98140, "start": 981.4, "end": 990.52, "text": " get a JSON version of the XML see we can see almost there is some let's see I", "tokens": [483, 257, 31828, 3037, 295, 264, 43484, 536, 321, 393, 536, 1920, 456, 307, 512, 718, 311, 536, 286], "temperature": 0.0, "avg_logprob": -0.22863280773162842, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.0003767582820728421}, {"id": 157, "seek": 98140, "start": 990.52, "end": 995.56, "text": " can write something that takes out all the this is probably not how you write", "tokens": [393, 2464, 746, 300, 2516, 484, 439, 264, 341, 307, 1391, 406, 577, 291, 2464], "temperature": 0.0, "avg_logprob": -0.22863280773162842, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.0003767582820728421}, {"id": 158, "seek": 98140, "start": 995.56, "end": 1004.1999999999999, "text": " TTML subtitle parser but we can we can do a quick quick version of one and there", "tokens": [32576, 12683, 30706, 306, 21156, 260, 457, 321, 393, 321, 393, 360, 257, 1702, 1702, 3037, 295, 472, 293, 456], "temperature": 0.0, "avg_logprob": -0.22863280773162842, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.0003767582820728421}, {"id": 159, "seek": 98140, "start": 1004.1999999999999, "end": 1009.64, "text": " is some functions like grep by that recursive look for some condition so here", "tokens": [307, 512, 6828, 411, 6066, 79, 538, 300, 20560, 488, 574, 337, 512, 4188, 370, 510], "temperature": 0.0, "avg_logprob": -0.22863280773162842, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.0003767582820728421}, {"id": 160, "seek": 100964, "start": 1009.64, "end": 1012.64, "text": " for example you can look for", "tokens": [337, 1365, 291, 393, 574, 337], "temperature": 0.0, "avg_logprob": -0.7203546047210694, "compression_ratio": 1.3195876288659794, "no_speech_prob": 0.00010131095768883824}, {"id": 161, "seek": 100964, "start": 1014.64, "end": 1017.64, "text": " did not work", "tokens": [630, 406, 589], "temperature": 0.0, "avg_logprob": -0.7203546047210694, "compression_ratio": 1.3195876288659794, "no_speech_prob": 0.00010131095768883824}, {"id": 162, "seek": 100964, "start": 1018.84, "end": 1021.84, "text": " why", "tokens": [983], "temperature": 0.0, "avg_logprob": -0.7203546047210694, "compression_ratio": 1.3195876288659794, "no_speech_prob": 0.00010131095768883824}, {"id": 163, "seek": 100964, "start": 1022.84, "end": 1025.84, "text": " aha", "tokens": [47340], "temperature": 0.0, "avg_logprob": -0.7203546047210694, "compression_ratio": 1.3195876288659794, "no_speech_prob": 0.00010131095768883824}, {"id": 164, "seek": 100964, "start": 1030.84, "end": 1037.28, "text": " so so now we it recursive defined all those text the objects that had the text", "tokens": [370, 370, 586, 321, 309, 20560, 488, 7642, 439, 729, 2487, 264, 6565, 300, 632, 264, 2487], "temperature": 0.0, "avg_logprob": -0.7203546047210694, "compression_ratio": 1.3195876288659794, "no_speech_prob": 0.00010131095768883824}, {"id": 165, "seek": 103728, "start": 1037.28, "end": 1043.24, "text": " field and then just take took that text field so now you can for example take", "tokens": [2519, 293, 550, 445, 747, 1890, 300, 2487, 2519, 370, 586, 291, 393, 337, 1365, 747], "temperature": 0.0, "avg_logprob": -0.3802575698265663, "compression_ratio": 1.6771653543307086, "no_speech_prob": 4.985559644410387e-05}, {"id": 166, "seek": 103728, "start": 1043.24, "end": 1052.52, "text": " this expression go out to the you have the wrap up here", "tokens": [341, 6114, 352, 484, 281, 264, 291, 362, 264, 7019, 493, 510], "temperature": 0.0, "avg_logprob": -0.3802575698265663, "compression_ratio": 1.6771653543307086, "no_speech_prob": 4.985559644410387e-05}, {"id": 167, "seek": 103728, "start": 1056.52, "end": 1062.44, "text": " and you can go out to the prompt again and then remove the interactive and then", "tokens": [293, 291, 393, 352, 484, 281, 264, 12391, 797, 293, 550, 4159, 264, 15141, 293, 550], "temperature": 0.0, "avg_logprob": -0.3802575698265663, "compression_ratio": 1.6771653543307086, "no_speech_prob": 4.985559644410387e-05}, {"id": 168, "seek": 106244, "start": 1062.44, "end": 1071.96, "text": " do this instead or we can do this if you only want text and we can even say", "tokens": [360, 341, 2602, 420, 321, 393, 360, 341, 498, 291, 787, 528, 2487, 293, 321, 393, 754, 584], "temperature": 0.0, "avg_logprob": -0.24901343554985234, "compression_ratio": 1.7964071856287425, "no_speech_prob": 0.00010624195419950411}, {"id": 169, "seek": 106244, "start": 1071.96, "end": 1077.68, "text": " we want all all samples so here is all that that's the thing you can do with", "tokens": [321, 528, 439, 439, 10938, 370, 510, 307, 439, 300, 300, 311, 264, 551, 291, 393, 360, 365], "temperature": 0.0, "avg_logprob": -0.24901343554985234, "compression_ratio": 1.7964071856287425, "no_speech_prob": 0.00010624195419950411}, {"id": 170, "seek": 106244, "start": 1077.68, "end": 1080.92, "text": " with all these decoders that the codes and blah blah and then you can", "tokens": [365, 439, 613, 979, 378, 433, 300, 264, 14211, 293, 12288, 12288, 293, 550, 291, 393], "temperature": 0.0, "avg_logprob": -0.24901343554985234, "compression_ratio": 1.7964071856287425, "no_speech_prob": 0.00010624195419950411}, {"id": 171, "seek": 106244, "start": 1080.92, "end": 1091.2, "text": " iteratively do all this it's like yeah it's nice so let's see and I also want", "tokens": [17138, 19020, 360, 439, 341, 309, 311, 411, 1338, 309, 311, 1481, 370, 718, 311, 536, 293, 286, 611, 528], "temperature": 0.0, "avg_logprob": -0.24901343554985234, "compression_ratio": 1.7964071856287425, "no_speech_prob": 0.00010624195419950411}, {"id": 172, "seek": 109120, "start": 1091.2, "end": 1096.24, "text": " to show that you can you can actually you don't have to write this all this", "tokens": [281, 855, 300, 291, 393, 291, 393, 767, 291, 500, 380, 362, 281, 2464, 341, 439, 341], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 173, "seek": 109120, "start": 1096.24, "end": 1100.92, "text": " when after a while you maybe with your expression starts to get very long so you", "tokens": [562, 934, 257, 1339, 291, 1310, 365, 428, 6114, 3719, 281, 483, 588, 938, 370, 291], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 174, "seek": 109120, "start": 1100.92, "end": 1105.72, "text": " want to have more structures I can show you I have some helpers for mp4 files", "tokens": [528, 281, 362, 544, 9227, 286, 393, 855, 291, 286, 362, 512, 854, 433, 337, 275, 79, 19, 7098], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 175, "seek": 109120, "start": 1105.72, "end": 1111.04, "text": " for example maybe you know so I spend a lot of times in mp4 files because that's", "tokens": [337, 1365, 1310, 291, 458, 370, 286, 3496, 257, 688, 295, 1413, 294, 275, 79, 19, 7098, 570, 300, 311], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 176, "seek": 109120, "start": 1111.04, "end": 1116.28, "text": " like what is used everywhere nowadays so here is some helpers for example that", "tokens": [411, 437, 307, 1143, 5315, 13434, 370, 510, 307, 512, 854, 433, 337, 1365, 300], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 177, "seek": 109120, "start": 1116.28, "end": 1119.8400000000001, "text": " can be written in a more structured way that with the indentation and things so", "tokens": [393, 312, 3720, 294, 257, 544, 18519, 636, 300, 365, 264, 44494, 399, 293, 721, 370], "temperature": 0.0, "avg_logprob": -0.16758401984842414, "compression_ratio": 1.8160919540229885, "no_speech_prob": 0.0004377430013846606}, {"id": 178, "seek": 111984, "start": 1119.84, "end": 1130.8799999999999, "text": " you mean you don't go crazy and I can show here for example this is a bit", "tokens": [291, 914, 291, 500, 380, 352, 3219, 293, 286, 393, 855, 510, 337, 1365, 341, 307, 257, 857], "temperature": 0.0, "avg_logprob": -0.23916308085123697, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.0003849905333481729}, {"id": 179, "seek": 111984, "start": 1130.8799999999999, "end": 1138.9199999999998, "text": " long but for example here is an expression that loads this mp4.jq and", "tokens": [938, 457, 337, 1365, 510, 307, 364, 6114, 300, 12668, 341, 275, 79, 19, 13, 73, 80, 293], "temperature": 0.0, "avg_logprob": -0.23916308085123697, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.0003849905333481729}, {"id": 180, "seek": 111984, "start": 1138.9199999999998, "end": 1143.6799999999998, "text": " it finds the video track and then it uses some jq code to produce a", "tokens": [309, 10704, 264, 960, 2837, 293, 550, 309, 4960, 512, 361, 80, 3089, 281, 5258, 257], "temperature": 0.0, "avg_logprob": -0.23916308085123697, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.0003849905333481729}, {"id": 181, "seek": 114368, "start": 1143.68, "end": 1150.0, "text": " GNU plot output and it uses a GNU plot and then I have my weird tool I have for", "tokens": [46411, 52, 7542, 5598, 293, 309, 4960, 257, 46411, 52, 7542, 293, 550, 286, 362, 452, 3657, 2290, 286, 362, 337], "temperature": 0.0, "avg_logprob": -0.2042518678258677, "compression_ratio": 1.56, "no_speech_prob": 0.00029981383704580367}, {"id": 182, "seek": 114368, "start": 1150.0, "end": 1154.96, "text": " producing images in the terminal so so here's the bit rate for the video bit", "tokens": [10501, 5267, 294, 264, 14709, 370, 370, 510, 311, 264, 857, 3314, 337, 264, 960, 857], "temperature": 0.0, "avg_logprob": -0.2042518678258677, "compression_ratio": 1.56, "no_speech_prob": 0.00029981383704580367}, {"id": 183, "seek": 114368, "start": 1154.96, "end": 1160.24, "text": " rate per bits per second in this video and you see that there's probably this", "tokens": [3314, 680, 9239, 680, 1150, 294, 341, 960, 293, 291, 536, 300, 456, 311, 1391, 341], "temperature": 0.0, "avg_logprob": -0.2042518678258677, "compression_ratio": 1.56, "no_speech_prob": 0.00029981383704580367}, {"id": 184, "seek": 116024, "start": 1160.24, "end": 1180.04, "text": " top sear up over the iframe in the mp4 file maybe we can take questions then yes", "tokens": [1192, 369, 289, 493, 670, 264, 498, 81, 529, 294, 264, 275, 79, 19, 3991, 1310, 321, 393, 747, 1651, 550, 2086], "temperature": 0.0, "avg_logprob": -0.4132917652959409, "compression_ratio": 1.3620689655172413, "no_speech_prob": 8.895728387869895e-05}, {"id": 185, "seek": 116024, "start": 1180.04, "end": 1184.16, "text": " yeah you can use that's a hex editor also maybe it's not very convenient as a", "tokens": [1338, 291, 393, 764, 300, 311, 257, 23291, 9839, 611, 1310, 309, 311, 406, 588, 10851, 382, 257], "temperature": 0.0, "avg_logprob": -0.4132917652959409, "compression_ratio": 1.3620689655172413, "no_speech_prob": 8.895728387869895e-05}, {"id": 186, "seek": 118416, "start": 1184.16, "end": 1190.1200000000001, "text": " hex editor but you can for example you can do dash d bytes or bits then you get", "tokens": [23291, 9839, 457, 291, 393, 337, 1365, 291, 393, 360, 8240, 274, 36088, 420, 9239, 550, 291, 483], "temperature": 0.0, "avg_logprob": -0.2370359933198388, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.00013348621723707765}, {"id": 187, "seek": 118416, "start": 1190.1200000000001, "end": 1203.3600000000001, "text": " like it's just a dummy decoder kind of so you can do bits a lot be kept so so", "tokens": [411, 309, 311, 445, 257, 35064, 979, 19866, 733, 295, 370, 291, 393, 360, 9239, 257, 688, 312, 4305, 370, 370], "temperature": 0.0, "avg_logprob": -0.2370359933198388, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.00013348621723707765}, {"id": 188, "seek": 118416, "start": 1203.3600000000001, "end": 1210.8000000000002, "text": " now you'll just get it so now you can do so and then you can concatenate this", "tokens": [586, 291, 603, 445, 483, 309, 370, 586, 291, 393, 360, 370, 293, 550, 291, 393, 1588, 7186, 473, 341], "temperature": 0.0, "avg_logprob": -0.2370359933198388, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.00013348621723707765}, {"id": 189, "seek": 121080, "start": 1210.8, "end": 1215.56, "text": " into you can the kind that you can build this like a binary arrays like one they", "tokens": [666, 291, 393, 264, 733, 300, 291, 393, 1322, 341, 411, 257, 17434, 41011, 411, 472, 436], "temperature": 0.0, "avg_logprob": -0.2442539261608589, "compression_ratio": 1.8848484848484848, "no_speech_prob": 0.000436920061474666}, {"id": 190, "seek": 121080, "start": 1215.56, "end": 1220.24, "text": " are like iolists in Erdogan if you have used that that you can like you it's", "tokens": [366, 411, 741, 401, 1751, 294, 3300, 14833, 282, 498, 291, 362, 1143, 300, 300, 291, 393, 411, 291, 309, 311], "temperature": 0.0, "avg_logprob": -0.2442539261608589, "compression_ratio": 1.8848484848484848, "no_speech_prob": 0.000436920061474666}, {"id": 191, "seek": 121080, "start": 1220.24, "end": 1225.04, "text": " just an array with with things that can become binary and then it can and you", "tokens": [445, 364, 10225, 365, 365, 721, 300, 393, 1813, 17434, 293, 550, 309, 393, 293, 291], "temperature": 0.0, "avg_logprob": -0.2442539261608589, "compression_ratio": 1.8848484848484848, "no_speech_prob": 0.000436920061474666}, {"id": 192, "seek": 121080, "start": 1225.04, "end": 1231.08, "text": " can kind of pipe this to two bytes and then you get back so you can kind of", "tokens": [393, 733, 295, 11240, 341, 281, 732, 36088, 293, 550, 291, 483, 646, 370, 291, 393, 733, 295], "temperature": 0.0, "avg_logprob": -0.2442539261608589, "compression_ratio": 1.8848484848484848, "no_speech_prob": 0.000436920061474666}, {"id": 193, "seek": 123108, "start": 1231.08, "end": 1240.8799999999999, "text": " do this yeah so you see that if you can you can build this that's how you can how", "tokens": [360, 341, 1338, 370, 291, 536, 300, 498, 291, 393, 291, 393, 1322, 341, 300, 311, 577, 291, 393, 577], "temperature": 0.0, "avg_logprob": -0.20115580503967986, "compression_ratio": 1.8855421686746987, "no_speech_prob": 0.00024257361656054854}, {"id": 194, "seek": 123108, "start": 1240.8799999999999, "end": 1245.4399999999998, "text": " you can repair things with fq that you take the samples and then add on some", "tokens": [291, 393, 10535, 721, 365, 283, 80, 300, 291, 747, 264, 10938, 293, 550, 909, 322, 512], "temperature": 0.0, "avg_logprob": -0.20115580503967986, "compression_ratio": 1.8855421686746987, "no_speech_prob": 0.00024257361656054854}, {"id": 195, "seek": 123108, "start": 1245.4399999999998, "end": 1249.24, "text": " head there and then you concatenate the bytes and you can even decode it with", "tokens": [1378, 456, 293, 550, 291, 1588, 7186, 473, 264, 36088, 293, 291, 393, 754, 979, 1429, 309, 365], "temperature": 0.0, "avg_logprob": -0.20115580503967986, "compression_ratio": 1.8855421686746987, "no_speech_prob": 0.00024257361656054854}, {"id": 196, "seek": 123108, "start": 1249.24, "end": 1254.36, "text": " the jq again so you can i mean you could you could try decode this as an mp3", "tokens": [264, 361, 80, 797, 370, 291, 393, 741, 914, 291, 727, 291, 727, 853, 979, 1429, 341, 382, 364, 275, 79, 18], "temperature": 0.0, "avg_logprob": -0.20115580503967986, "compression_ratio": 1.8855421686746987, "no_speech_prob": 0.00024257361656054854}, {"id": 197, "seek": 125436, "start": 1254.36, "end": 1271.32, "text": " file for example but it yeah it won't work yes i would like to have some more", "tokens": [3991, 337, 1365, 457, 309, 1338, 309, 1582, 380, 589, 2086, 741, 576, 411, 281, 362, 512, 544], "temperature": 0.0, "avg_logprob": -0.3143388379004694, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0017920680111274123}, {"id": 198, "seek": 125436, "start": 1271.32, "end": 1275.6399999999999, "text": " round timey version i can't show how there is one of the slideshow show", "tokens": [3098, 565, 88, 3037, 741, 393, 380, 855, 577, 456, 307, 472, 295, 264, 9788, 4286, 855], "temperature": 0.0, "avg_logprob": -0.3143388379004694, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0017920680111274123}, {"id": 199, "seek": 125436, "start": 1275.6399999999999, "end": 1283.8, "text": " actually how the dsl how the how the go along dsl looks like yeah here here is", "tokens": [767, 577, 264, 274, 10418, 577, 264, 577, 264, 352, 2051, 274, 10418, 1542, 411, 1338, 510, 510, 307], "temperature": 0.0, "avg_logprob": -0.3143388379004694, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0017920680111274123}, {"id": 200, "seek": 128380, "start": 1283.8, "end": 1292.8799999999999, "text": " how kind of how the go dsl works that you there's like a d function of this", "tokens": [577, 733, 295, 577, 264, 352, 274, 10418, 1985, 300, 291, 456, 311, 411, 257, 274, 2445, 295, 341], "temperature": 0.0, "avg_logprob": -0.2324098470259686, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.0001145180212915875}, {"id": 201, "seek": 128380, "start": 1292.8799999999999, "end": 1296.8799999999999, "text": " kind of like that the the context for that keeps tracks of where you are and", "tokens": [733, 295, 411, 300, 264, 264, 4319, 337, 300, 5965, 10218, 295, 689, 291, 366, 293], "temperature": 0.0, "avg_logprob": -0.2324098470259686, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.0001145180212915875}, {"id": 202, "seek": 128380, "start": 1296.8799999999999, "end": 1300.6399999999999, "text": " then you create like new structs and fields and and you have these mappers", "tokens": [550, 291, 1884, 411, 777, 6594, 82, 293, 7909, 293, 293, 291, 362, 613, 463, 15226], "temperature": 0.0, "avg_logprob": -0.2324098470259686, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.0001145180212915875}, {"id": 203, "seek": 128380, "start": 1300.6399999999999, "end": 1306.8799999999999, "text": " that say like this is a binary for made up binary format for live by for open", "tokens": [300, 584, 411, 341, 307, 257, 17434, 337, 1027, 493, 17434, 7877, 337, 1621, 538, 337, 1269], "temperature": 0.0, "avg_logprob": -0.2324098470259686, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.0001145180212915875}, {"id": 204, "seek": 128380, "start": 1306.8799999999999, "end": 1312.8, "text": " source licenses that I was going to be a moment there so that's how how most of", "tokens": [4009, 32821, 300, 286, 390, 516, 281, 312, 257, 1623, 456, 370, 300, 311, 577, 577, 881, 295], "temperature": 0.0, "avg_logprob": -0.2324098470259686, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.0001145180212915875}, {"id": 205, "seek": 131280, "start": 1312.8, "end": 1318.2, "text": " the code looks like so if you can do you can write any go code i mean i prefer to", "tokens": [264, 3089, 1542, 411, 370, 498, 291, 393, 360, 291, 393, 2464, 604, 352, 3089, 741, 914, 741, 4382, 281], "temperature": 0.0, "avg_logprob": -0.3372741634562864, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.00011577844270505011}, {"id": 206, "seek": 131280, "start": 1318.2, "end": 1322.32, "text": " write them to make them look very declarative like so don't use too many", "tokens": [2464, 552, 281, 652, 552, 574, 588, 16694, 1166, 411, 370, 500, 380, 764, 886, 867], "temperature": 0.0, "avg_logprob": -0.3372741634562864, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.00011577844270505011}, {"id": 207, "seek": 131280, "start": 1322.32, "end": 1337.56, "text": " yeah too much weird code in keep them simple is the and other questions yes", "tokens": [1338, 886, 709, 3657, 3089, 294, 1066, 552, 2199, 307, 264, 293, 661, 1651, 2086], "temperature": 0.0, "avg_logprob": -0.3372741634562864, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.00011577844270505011}, {"id": 208, "seek": 133756, "start": 1337.56, "end": 1349.52, "text": " it's i would say that it's probably hard to of course to write the code to the i", "tokens": [309, 311, 741, 576, 584, 300, 309, 311, 1391, 1152, 281, 295, 1164, 281, 2464, 264, 3089, 281, 264, 741], "temperature": 0.0, "avg_logprob": -0.21661435821909963, "compression_ratio": 1.7206703910614525, "no_speech_prob": 0.0003218425263185054}, {"id": 209, "seek": 133756, "start": 1349.52, "end": 1354.96, "text": " think it's it creates a lot of options how what what does the user mean when", "tokens": [519, 309, 311, 309, 7829, 257, 688, 295, 3956, 577, 437, 437, 775, 264, 4195, 914, 562], "temperature": 0.0, "avg_logprob": -0.21661435821909963, "compression_ratio": 1.7206703910614525, "no_speech_prob": 0.0003218425263185054}, {"id": 210, "seek": 133756, "start": 1354.96, "end": 1362.0, "text": " they change something like do they want yeah it's also like do you want the", "tokens": [436, 1319, 746, 411, 360, 436, 528, 1338, 309, 311, 611, 411, 360, 291, 528, 264], "temperature": 0.0, "avg_logprob": -0.21661435821909963, "compression_ratio": 1.7206703910614525, "no_speech_prob": 0.0003218425263185054}, {"id": 211, "seek": 133756, "start": 1362.0, "end": 1367.12, "text": " checksums to be recalculated or not do you want what happens if you change", "tokens": [13834, 8099, 281, 312, 850, 304, 2444, 770, 420, 406, 360, 291, 528, 437, 2314, 498, 291, 1319], "temperature": 0.0, "avg_logprob": -0.21661435821909963, "compression_ratio": 1.7206703910614525, "no_speech_prob": 0.0003218425263185054}, {"id": 212, "seek": 136712, "start": 1367.12, "end": 1371.04, "text": " something in a if you have the max something and then you change the size", "tokens": [746, 294, 257, 498, 291, 362, 264, 11469, 746, 293, 550, 291, 1319, 264, 2744], "temperature": 0.0, "avg_logprob": -0.16565083442850315, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0001530488661956042}, {"id": 213, "seek": 136712, "start": 1371.04, "end": 1376.0, "text": " so now the segmenting becomes different so then it cascades to change the whole", "tokens": [370, 586, 264, 9469, 278, 3643, 819, 370, 550, 309, 3058, 66, 2977, 281, 1319, 264, 1379], "temperature": 0.0, "avg_logprob": -0.16565083442850315, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0001530488661956042}, {"id": 214, "seek": 136712, "start": 1376.0, "end": 1382.4799999999998, "text": " file so it's like do you want that to happen it's also like there are", "tokens": [3991, 370, 309, 311, 411, 360, 291, 528, 300, 281, 1051, 309, 311, 611, 411, 456, 366], "temperature": 0.0, "avg_logprob": -0.16565083442850315, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0001530488661956042}, {"id": 215, "seek": 136712, "start": 1382.4799999999998, "end": 1387.6399999999999, "text": " encodings that are there are like many ways to encode the same integer for", "tokens": [2058, 378, 1109, 300, 366, 456, 366, 411, 867, 2098, 281, 2058, 1429, 264, 912, 24922, 337], "temperature": 0.0, "avg_logprob": -0.16565083442850315, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0001530488661956042}, {"id": 216, "seek": 136712, "start": 1387.6399999999999, "end": 1393.28, "text": " example var ints can be encoding many many ways so you would encode and", "tokens": [1365, 1374, 560, 82, 393, 312, 43430, 867, 867, 2098, 370, 291, 576, 2058, 1429, 293], "temperature": 0.0, "avg_logprob": -0.16565083442850315, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0001530488661956042}, {"id": 217, "seek": 139328, "start": 1393.28, "end": 1400.28, "text": " normalize all that or should it behave should remember try to remember how how", "tokens": [2710, 1125, 439, 300, 420, 820, 309, 15158, 820, 1604, 853, 281, 1604, 577, 577], "temperature": 0.0, "avg_logprob": -0.2246905697716607, "compression_ratio": 1.394736842105263, "no_speech_prob": 0.00013482372742146254}, {"id": 218, "seek": 140028, "start": 1400.28, "end": 1425.52, "text": " the original thing was decoded yeah so it's it's complicated any other questions", "tokens": [50364, 264, 3380, 551, 390, 979, 12340, 1338, 370, 309, 311, 309, 311, 6179, 604, 661, 1651, 51626], "temperature": 0.0, "avg_logprob": -0.2987659353958933, "compression_ratio": 1.095890410958904, "no_speech_prob": 0.0009129979298450053}], "language": "en"}