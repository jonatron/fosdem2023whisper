{"text": " Okay. Thank you. Thank you, Rassan. Actually, after hearing your talk, I'm kind of considering I should join the Unicraft community. Sounds to be fun there. It's a threshold there, Kim. Yeah, I see. Well, you don't have to test it. Okay. So, my name is Simon Kunzer. As you now heard, I'm the lead maintainer, also the original person that started that Unicraft project while being still a researcher at NEC Labs Europe. In the meantime, we spinned off. We have now a startup also called Unicraft. It's the Unicraft GmbH, and I'm their CTO and co-founder. And, yeah, we're building a community and a startup at the same time. So first question into the room. Who has used Unicraft before? I would like to know. Okay. Who has maybe more theoretical background, what our key concepts in Unicraft are? Okay. So then, yeah, also, I have some background slides to bring everybody on the same stage. And then we jump directly into the binary compatibility topic, but I won't spend too much time here. Okay. So with this picture, I usually start that. You see on the left side the traditional setup when you have virtual machines and your applications running on them, so stuff that you know since 20 years now. Then you have a setup which is more recent and more popular is using containers where you basically run a host address on your hardware and then you use isolation primitives on your host kernel to separate your containers from each other. And then there's Unicurnals. I don't know. Is this interrupted somewhere? Okay. So we think this could be a different execution environment, especially for the container setup bringing kind of marriage what you had before with virtual machines with strong isolation and really more minimal hypervisors underneath that are much more secure as well. And don't need to do a shared host base which can become an attack surface. And then you want the flexibility of containers and this is where we think a Unicurnal can come in, so where you build a kernel per application. So the thing is, since you know the application that you run on, you can also give up a lot of principles you had in standard operating systems and do simplifications which is totally okay because it's not hitting your attack vector actually. So if you say one application you can go for a flat and single address space because that kernel that you have underneath is just for your application for nothing else. We in Unicraft build a single monolithic binary usually, so it's your application plus the kernel layers and everything ends up in function calls into drivers. And you get then further benefits, first by this simple setup, but also since you know your environment, you know where you run on, you know what you run, so you can specialize the kernel layers that you need underneath. So you put only drivers that you need to run on your target hypervisor. You build a separate image if you run that application on a different hypervisor. So floppy drivers, forget it, you don't need it. VertiU only for KVM guests, Zen NetFront for instance, only for Zen guests. And you know the application, you have knowledge which features of the OS is needed and that way you can also from the top down specialize the operating system to just provide that what you need. So this makes us also slightly different from the other Unicraft projects maybe that you had heard of, so we are for sure not the first ones. But we claim we are the ones that follow at least this principle as the most strongest because we build it from the beginning with that in mind, which is specialization. So everything that we implement should never dictate any design principles. The concept is you know what you need for your application, you know what you need to run your Unicron, so I want to give you a highly customizable base where you pick and choose and configure of components and specialize the kernel layers for you. So that led us to this principle, everything is a micro library, which means for us even OS primitives are micro libraries, meaning a scheduler is a micro library, a specific scheduler implementation is a micro library, so like a cooperative scheduler or some schedulers do preemptive scheduling, different libraries, memory allocators, also things like VFS, network stacks, the architectures, the platform supports and the drivers are all libraries and because we are also going up the stack the application interfaces, so everything that has to do with POSIX even that is split it into multiple subsystems, POSIX subsystem libraries. The Linux system called ABI, which you will see in this talk now, and even language runtimes, if you let's say run a JavaScript Unicron, you can build it with a JS engine. And the project consists basically of a Kconfig based configuration system and a build system, also make based to not come up with yet another build system, to make actually entrance easy when people are familiar with Linux before, and our library pool actually. And to give you a rough idea how this library pool is organized, I find this diagram nice, so let's see if this works at this point. Yeah, so we divide roughly, so you don't find it that way in the repos, but we divide roughly the libraries into these different categories, so you have like here on the bottom, the platform layer, which basically includes drivers and platform support where you run on. Then we have this OS preemptive layer, these are then libraries that implement like a TCP IP stack, or file systems, or something regarding scheduling, memory allocation, et cetera, et cetera. And then always in mind there's like, first the opportunity for you to replace components in here, and also that we provide also alternatives, so you don't need to stick with IP if you don't like it, so you can provide your own network stack here as well, and reuse the rest of the stack too. Then we have this POSIX compatibility layer, this is basically, you know, things here, FD tab, this is for instance file descriptor handling, as you know it. POSIX process has then aspects about process IDs, process handling, et cetera, pthread API, of course. And then we have a libc layer, where we also have at the moment actually three libcs, muscle, which is becoming our main thing now, a new lib that we had in the past, to actually provide all the libc functionally to the application, but also actually for the other layers too, right, it provides also things like memcopy, which is like all over the place used, right. Okay. Then Linux application compatibility, that was now a big topic for this release. Why do we do application compatibility? It's actually for us, for adoption, to drive the adoption, because most cloud software is developed for Linux. People are used to their software, so we don't feel confident to ask them to use something new or rewrite stuff from scratch. And if you provide something like Linux compatibility, you remove also obstacles that people start using Unicraft, because they can run their application with Unicraft. And our vision behind the project is to give seamless application support. So the users that say, they tell you, I use that in that web server, and it should be like with a push of a button, so including with some tooling that we provide, that we can run that on Unicraft as they run it before on Linux, and they benefit from all these nice unicolonial properties, which are lower boot times, less memory consumption, and also improved performance. Okay. So now, speaking about which possibilities you have for supporting Linux compatibility, we divide actually compatibility into two main tracks. One track is so-called native, which means that we have the application sources, and we compile that together and link that together with the Unicraft build system. And then we have on the other side, the binary compatibility mode, where the story is that the application is built externally, and we just get binary artifacts, or the final image event. And then actually you can subdivide these two tracks on the native side. We have, which we did actually quite a lot until recently, this Unicraft-driven compilation, which basically meant that when you have your application, you have to port or mimic the application's original build system with the Unicraft build system, and then you compile all the sources with Unicraft. It has the benefit that you're then staying in one universe and don't have potential conflicts with compiler flags or things that, I mean, influence your calling conventions between objects. And then there is this way that you probably have also seen, for instance, with RUM kernels. They did it a lot using an instrumented way, where you actually utilize the build system of an application with the cross-compile feature, and then, you know, you hook in, and that's your entry point into replacing the compile calls and make it fit for your Unicom. And then on the binary compatibility side, we have, so let's start here, because that's easier. So, of course, so externally built, and this means basically you have ELF files, so like a shared library or an ELF application. What you need here is basically just to support loading that and get that into your address space, and then run it. And then there's also this flavor of, let's say, build time linking, which means that you take some build artifacts from the original application build system, like the intermediate object files, before it does a final link to the application image, and you link those together with the Unicraft system. And they call it here binary compatible, because, you know, you interface it on an API, right, and not on the API level, like in the native cases. So, and here, this is just a little mark that in the Unicraft project, you will mostly find these three modes in the project that people are working on. So, here we, that we never tried with Unicraft, in fact. But I mean, there's some tooling and this should work, too, actually. So, as you may have noticed, native is about API compatibility, so really on the programming interface, and binary compatibility is about the application binary interface. So, really, the compiled, sorry, the compiled artifacts and how you have calling conventions here, et cetera, where your arguments in which register or how's your stack layout, et cetera, right? And this is, this is here on a programming language level, right? So, the requirements for providing you, let's say, a native experience is POSIX, POSIX and POSIX, right? Most applications are written for POSIX, so we have to do POSIX, no excuse, right? So, libcs will mostly cover that. But, yeah, it's all about POSIX. And the second point is that you also need to port the libraries that your application additionally uses. Let's say, yeah, let's take engine access and web. So, right, you have then tons of library dependencies, for instance, for cryptographic things, like setting up HTTPS tunnels or doing some other things. So, those libraries, you need also, you know, port here and add them so that you have the, you know, the application sources available during the build, right? On the binary compatibility side, the requirements are, you need to understand the L format, share libraries or binaries, depending on which level you're driving it. And then, since this stuff got built for Linux, you must be aware that it can happen that that binary will do directly system calls. So, it's instrumented because it got built together with a libc or something like that to do an syscall assembly instruction, which means on our side, we need to be able to handle those system calls as well. And if we, you know, speak about shared library support, we need to support all this library function or library symbol linking, actually, right? And additionally, of course, each data that is exchanged, right, needs to be in the same representation. This means, because this is ABI, right? Now imagine you have a C struct. And here, it's fine to move some fields around, because if you use the same definition for your compilation, it's all fine. You can sort the fields in the struct, it will all work. Here, you can't because your application that got built externally, that layout of that struct, that binary layout, that must fit. Otherwise, you will read different fields, right, obviously. And then for both modes, which is important for us as an operating system, we have, of course, also some things that we need to provide to the application, which are things that the application just requires, because it is that way on Linux, meaning providing a procfs or sysfs entries or files in slash etc. or something like that, because, you know, they do sometimes silly things just to figure out in which time soon they are, so they go to slash etc. and figure out what is configured and also the locales and etc. So, I'm closing that, let's say, this high level view up, so that we have the full understanding. Let's speak a bit about the pros and cons between these two modes. The native side, what is really nice here, which is a really interesting pro, so if you got everything put together, you have quite of a natural way to change code in the application, to change code in the kernel, to make maybe shortcuts between the application kernel interaction and can use that for driving your specialization even further and performance tune your unique kernel for the application. The disadvantages, you always need the source codes, because we are compiling everything here together, and which is also, let's say, for newcomers a bit difficult, is if you require them that the application they have, and they say, okay, I have the source codes, and I just run make and then it compiles, but I have the source code, you need to instrument either the build system of the application, as we just saw with the instrumented build that also ramped it, or you actually, we must say, okay, sorry, you can't use that build system, now you need to mimic and write and Unicraft make file equivalent to build your application. So, this is why binary compatibility is actually interesting, really interesting for, let's say, newcomers, because you don't need the source code, they can compile the application that they're interested in, so if they need to compile it, let's say, right, the way as they usually do, they don't need to care about Unicraft at all, and normally, also no modifications to the application is needed. Obviously, you can still do things here, but it's not a requirement. The risk that we saw by doing the work is, at least for the, let's say, on the unicolonial side, is that you get into a risk that you need to implement things the way how Linux does it, and one really stupid example, I get a bit nuts on that, is providing an implementation for netlink sockets, because if you have, like, a web application, or, you know, any application that does some networking, and that application wants to figure out which network interfaces are configured, and what are the IP addresses there, so it will likely lose the libc function get if address, and that is implemented with a netlink socket, so this goes back here, right, here I can just provide a get if address, which is highly optimized in that sense, right, which just returns in that struct all the interfaces, but if I go binary compatible, and if I do it really on an extreme, means, because that libc, which is part of your binary here, maybe, opens a socket, which is address family netlink, and starts communicating about a socket with the kernel to figure out the interface addresses, which can be really silly, right, for a unicolon, right, to do. And then also, it's, maybe it's less opportunities, but also a bit harder to specialize and tune the kernel application interaction, right, because assuming you don't have access to the source code of the application, there's nothing you can do on the application side. So to give you a rough idea, what that means in performance, because at Unicraft, let's say, the second important thing for us is always performance, performance, performance. Here we just show you engine x here compiled as a native version, so meaning it uses the Unicraft build system to build the engine x sources versus we run engine x on, we call it elf loader, so this is actually our Unicraft application to load elf binaries. And then a comparison here with a standard Linux, and here this is the same binary. What that means in performance, so this quick test, we have just the index page, the standard default of any engine x installation served, and these are like the performance numbers. The takeaway here is, if you just, you know, don't go into any special performance tuning yet, and start just, you know, getting the thing compiled and run, you will end up in a similar performance as if you just take the, you know, the elf loader to run that application in binary compatibility mode. That is interesting because you don't need to see necessarily huge performance drops. The only thing that you lose is the potential to further optimize in this mode if you go for this one. But the nice thing is you can still see benefits, right, running your application on Unicraft. And to just give you an impression, so this is here a Go HTTP application, where we go a bit crazy about optimizing and specializing the interaction between the Go application and Unicraft, yeah, we can get more out of this. We can really performance tune and squeeze stuff out of it. Okay, so now in the next slides, I go over how we implement these modes with Unicraft, because as I said, we don't want to target just one mode, we want to target multiple modes. And it has also some implementation challenges, because as an engineer, you also want to reuse code as much as possible. So we'll talk about the structure here. Okay, so to give you an overview, so this doesn't mean now that these applications run at the same time, it could also be possible, but it's just to show you how the components get involved in our ecosystem. So if you take just the left part, the native port of application, we settle now on muscle to provide all the libc functionality that the application needs. And we have a library called syscall shim, which is actually the heart of our application compatibility. And this is actually, you can imagine, this is a bit of a registry where it knows where in which sub-library a system called handler is implemented. And it can forward then the muscle calls to those places. On the binary compatibility side, you have a library called this elf loader, which is the library that loads an elf binary into memory. And then here's the syscall shim, taking care of handling binary system calls. Now I will go into the individual items to show you a bit more zoomed in view what's happening there. And we, of course, will start with the heart, with the core, the syscall shim. So here we have macros, so when you develop VFS queries, our VFS library actually ported from OSV, or POSIX process, where you do some process functionality, like get PID or something like that. We have some macros that help you to define a system call handler. And it's really a system call handler, it's just a function that is defined at that point. And you will register this to the syscall shim. Then the shim provides you two options, how that system call handler can be reached. One is at compile time. This is like macros, macros, and preprocessor, which allows you, when you have a native application that does, or actually it's on the muscle side, to call a system call, it will replace those calls or will return at compile time the function of that library that implements that system call. Then it also has a runtime handler, which is provided here, which does the typical syscall chop and running that function behind the scenes. Our aim, as I mentioned, we want to reuse code as much as possible. The idea is that we implement that function for that system call just once, and the syscall shim is helping us, depending on the mode, doing a link, or providing it as binary compileable. So let's go back to the overview, and then you will see it a bit more concrete with muscle, but probably I said everything already. So we have muscle natively compiled with a Unicraft build system. Now imagine you have the application, you have a write, goes to muscle, and muscle does then a UK syscall R write, which is then actually the symbol that is provided by the actual library that's implementing it. And the rewriting happens, as I said, with the macros at compile time in lib muscle. So what we did for that is to replace that syscall muscle internal function with our syscall macro, which then kicks in the whole machinery to map a system call request to the direct function call. The thing is that in muscle, not all, but most of the system call requests have a static argument with the system call number first. So this, let's say, write is a libc wrapper, and internally there, they're setting, preparing the arguments, maybe some checks before they go to the kernel, and then they have this syscall function with the number of the system call, and then the arguments hand it over. And as soon that number is a const static, just written down in your code literally, we can do a direct mapping so that that write will directly do a function call with UK syscall R write. If it's not static, which is really happening only on two, three places, if I remember correctly, then of course we can provide an intermediate function that then does a switch case and jumps then to the actual system call handler. And the thing is, since everything is configurable, means I can have a build where VVScore is not part of the build or POSIX process is not part of the build. Then the syscall scene will automatically, also with all this macro magic that we do, replace calls to non-existing system call handers with an inosys stop, so that for the applications look like a function not implemented. And exactly, so at runtime the syscall shim is for that port out of the game, so everything happens at compile time. So for the binary compatibility side, that's unfortunately a runtime thing, and we have actually two components here. As I was mentioning, the ELF loader itself, which loads the ELF application. What we support today is static pies, so if you have a static position independent executable compiled, you can run that. And what also works is using your, let's say, with your libc together provided dynamic linker, meaning if you use glibc with the application, you can use that dynamic linker, so ld.so, and also run dynamically linked applications with that. What it needs is POSIX M-app as a library, which implements all these M-app, M-unm-app, M-protect functions on the system call there. Then system calls are trapped here in the syscall shim, and yeah, I think as I said that, when the library is not selected, it's replaced with enosys, so the syscall shim knows which system calls are available, which are not. Then there's a bit of a specialty for handling a system call, so the system call trap handler. So we provide it with a system call shim, and we don't need to do a domain switch, so we have still a single address space, a single, what's called, I forgot the word, so it's all kernel privilege, yeah, so we have, it's the same privilege domain, exactly, so we don't have a privilege domain switch as well, right, now we have it, good, good, good, if you learn it. But we are slightly in a different environment, I will show you later in the slide exactly what this means. We have some different assumptions that you have on the Linux system call API, which requires us to do some extra steps, unfortunately. So the first thing is Linux does not use extended register, or if they use it, they guard it, meaning extended registers are floating point units, vector units, MMX, SSE, you know. We do, unfortunately, so we need to save that state, because that's unexpected for an application that was compiled for Linux before, that these units could screw up when coming back from a system call. And the second thing is we don't have a TLS, you know, in the Linux kernel, but unfortunately on Unicraft we have, so we use the same, even unfortunately the same TLS register, so we also need to save and restore that so that the application keeps its TLS, and all the Unicraft functions operate on the Unicraft TLS, good. So I'll continue and give you some, let's say, lessons learned while implementing all these things. I would like to give you a short demo. And then we speak a bit about what was tricky during the implementation and what are our special considerations that we had to do. So then let's hope that this works. So this is a super fresh demo, don't touch it, you will burn your fingers. My colleagues, so thank you, Mark, for getting that work, just, you know, half an hour before the talk. Well, it's the person that no one sees, but that's all the work. Yeah, he's amazing, yeah. Okay, so in this demo I have actually NGINX, it's a web server with a standard file system, I'll show you a bit of the files around. I have it once compiled natively, and once compiled as a Linux application, we'll run it with the Elf loader, and you will see that the result is the same. So let's start with the native one. So I'm actually already, so probably I need to increase a bit the size, right, that you can read it in the background. Is that good? Yeah. Yeah. Let's do it here too. So I hope you can, also in the last row you can read, perfect. So yeah, you have here the NGINX app checked out. So we have menu config, so you can, oh, this window is somehow wider, no, just one second. No, it's better, okay. So you see, the application is here as a library here, lib NGINX, and then you have here the configuration of all these HTTP modules that NGINX provides, and you can select and choose, like this is really the Unicraft way to do things. Because it builds a while, and for that my left side is not the fastest, I built it already. So you see here the result of the build directory, you see each individual library that, because of dependencies, where we're coming in and we're compiled, so like for instance POSIX few tags, POSIX socket, RAMFS, which is an in-memory file system, and the, where is it now, the application, here, that's the application image uncompressed, so what I can do. So let's see how big it is. So it's here 1.1 megabyte, so this is like a full image of NGINX, including muscle, including all the kernel code and driver to run on a KEMU KVM X-rated machine. Yeah, then let's run it, to see what happens, so exactly it's already up and running, to show you, these were roughly the arguments, so we have them in the meantime, because I found KEMU systems sometimes a bit brutal with command line arguments, a wrapper script that shortens a few things, but in the end, I mean, this is running a KEMU system, and then, you know, it's attaching to this virtual bridge, take that kernel image, load that in ID file system, because we reserve a file from that RAMFS, and here's also some parameters to set the IP address and that mask for that guest, and here and down there, so we can check actually, you see here set IPv4, that's the address where the unicorn is up, and yeah, you see here, with this W get line that, yeah, I get the page surfed, and to prove that this is real, let us kill this, now the guest is gone, and this is dead, so no response anymore, good, so now, let's go to the ELF loader, which is also treated as an application that can run other applications, also here in the build directly, let's do the same thing, so it has also like similar dependencies, of course, it's prepared to run NGINX, so POSIX socket is there, et cetera, et cetera, where's the, here, so here's the image, it's a bit smaller, it's now 526 kilobytes, which provides your environment to run, and Linux ELF, of course the NGINX image is not included here anymore, right, so that is part of the root file system, and if I run this now, so on purpose I enable now some debug output so that you see the proof that it does system calls, but if you scroll up, so the initialization phase looks a bit different, also sets the IP address, here it's extracting the INIDAR-D, and here it's starting to load the NGINX binary, the Linux binary from the INIDAR-D, and then from that point on, the ELF loader was jumping into the application, and you see every system call that the application was doing, and you can even see that, you know, some stuff, probably this is a first GWC initialization, here for instance an ETC local time, it's trying to open and find some configuration, of course we don't have it, we could provide one, but it's still fine, it's continuous booting, affinity, we don't have, but whatever, it continues booting. It's quite optimistic actually, but it works, a lot of files, if you look into proxies, get PWName, all those items, it works, it works. Yeah, yeah, exactly, and there's tons of Mabs, and you know, EDC password, etc, so those files we had provide, so you get a file script returned back, otherwise it would have stopped, etc, and then, you know, configuration, and so forth, and now you should see that some system call happened when I accessed the page, and you saw it happened, index was opened, file script is 7, and here is, there should be a write to the socket, you know, over here this is probably the socket number 4, yeah, I mean, you get the impression what's going, what's going on, right, so it's working the same way, okay, how much time do I have left? Five minutes? Five minutes, okay, then? Actually three minutes, just to leave some room for questions. Yeah, yeah, exactly, okay, so let's get quickly back. So we had some learned lessons, learned lessons, for the native mode, I mean, the thing is we have also this model, like you heard on OSV, we want to use just one libc in our build, right, so meaning all the kernel implementation, and everything that the application needs is one libc, we provide multiple implementations of libcs, because muscle might be for some use cases too thick, still, or too big, so we have an alternative like no libc, and originally we had new lib, and we need, so what we want as well in our project is to keep the libc as vanilla as possible, like upstream as possible, because we want to keep the maintenance effort for updating the libc versions low. But these courses then, I mean, just list them, I speak just about one of these items, some things that you stumble on, and one was quite interesting, was this get dense 64 issue that cost us some headache, it was mainly a rust wound fixing it, which caused, or required actually a patch. I'm only fixing it. Yeah, yeah, required a patch to muscle. The thing what happened here is that in this drn.h, muscle is providing an alias, right, to use the non-64 version for get dense, and if it finds code with using get dense 64 because of this large file system support thing that was happening, it maps it to get dense, right. On the other side, on the VFS core side, so this is the VFS implementation where we provide the system call, we need to provide both, obviously, we need to provide the non-64 version and the 64 version, and guess what, we include drn because we need a struct definition here. And then you can imagine, so if you're familiar with CMP processor, there's a little hint with this thunder, of course, I mean, this gets replaced, and then you have two times the same symbol, and you're like, what the hell is going on here, all right. So let's skip this because of time. Upcoming features, Ruslan was telling a bit already, especially for this topic for application compatibility, we will further improve it, so this will be now our first release to officially release alpha loader and an updated muscle version. We want to make that more seamless, which requires a bit more under the hood libraries for that support. You should also watch out for features that are coming up for a seamless integration of Unicraft into your Kubernetes deployment. No question, Alex. Brandy Unicraft on your infrastructure provider, for instance, AWS, Google Cloud, et cetera, and automatically packaging of your applications, right, and it would love, or actually all of us, everyone within Unicraft will love to hear also your feedback and what you think about, you know, turning the cloud with Unicrons to the next level. Yeah, any feedback to me, please send to Simon. Right, and these are, again, the project resources, if you're interested, you can just scan the QR code. I think that's it. Okay. Thank you, Simon. Right. So we can take a couple of questions, you can also address me to address them to me. I mean, that's a joint talk, so any, yeah, please, first here and then on the back. Yeah, thanks a lot, both of you, for your talks. I have a question regarding dynamically linked applications in Linux. As far as I can see, you only use muscle, and how does this work out if my application is linked against GDFC, and I want to run it with my loader, what do I have to do? Because in Linux world, when I link against GDFC and I only have muscle, nothing works. Right. So I'm assuming you're speaking about the binary compilability mode. In the end, what you just need to do is providing the muscle loader, if you have compiled with your application with muscle, or the GDFC loader, and then both works. The things in that setup in memory, there is actually two libcs, there's the libc on the Unicraft side, and there's the libc with your application. So that's why it works seamless, actually. Okay, thank you. Just to add to that, when you build your Unicernal for binary compatibility, you don't use muscle. You can if you want. But the app loader doesn't use muscle because the entire libc is provided by the application, either by the application of static binary, or the application plus its libc inside the root file system, and it's loaded from there, there's no need to have anything like that. Yeah, please. Yeah. So the question is about the API. You spoke about the POSIX API. You also add a diagram showing a direct link to Unicernal. So the question is, is there some variable next diagram, perhaps? One of the next diagram. Okay. Is it a variable use case? Yes. There is a link directly from the native application to the Unicernal. Yeah. Yeah. This is what it shows you is how the calls are going. It can happen because some system calls don't have a provided libc wrapper. Yeah. It's like for that completeness, this error is here. For instance, the futex call, if you use futex directly from your application, there is no wrapper function in libc. You need to do a system call directly, and you can do that by also using the syscall, macro then, or actually, I mean, the syscall shim will replace that with a direct function call then to actually POSIX futex. So is it valuable to have a kind of application that you develop specially for Unicernal and the native API? Yes. Yes. That for sure. In this talk, it's just about how we get application compatibility, even in case you have your application already. But if you write it anyway from scratch, I recommend forget everything about POSIX and speak the native APIs. You get much more performance and more directly connected to your driver layers and APIs that, you know, POSIX has some implications, right? There's a lot of things like read, write, imply there's a mem copy happening. And with these lower level APIs, you can do way quicker transfers, just because you can do a zero copy. For instance. Maybe even POSIX can be improved using POSIX. Yeah, sure. Of course. Of course. Yeah. Have you looked into patching the binary to remove the syscall overhead? Patching the binary to remove? For example, now with the syscalls, do you have to emulate the syscalls? Have you looked into patching the binary itself? Yeah. Instead of doing it at runtime, handling the syscalls at runtime? Yeah. Let's say at least we thought about that, but we didn't do it. I mean, the hardware talks, that is the other, exactly. He's sitting in front of it. They were doing some experiments with that, that works too, so you can patch it. But yeah, I mean, just we didn't do it. Okay. In regards to memory usage, obviously Unicernel lowers it, but what if I ran multiple Unicernels and multiple VMs, how do you support membalooning or something like that, or is it like just over provision? Yeah. I mean, the idea is to have membalooning, but it's not upstream yet. Of course. There's also a really interesting research project, maybe I should mention, that works on memory duplication. So if you run the same Unicernel, the same like 100 times, you can share VM memory pages on the hypervisor side, but you need hypervisor support for that. Okay. Thank you so much, Simon. Let's end it here. Yeah. We're going to ask. Yeah. Yeah. And get some speakers. Anastasis and Babis for the next talk on VXL, so please. So please get some stickers. Yeah. Stickers. They are free. Don't have to pay for it. For now. VXL 100 Euro each.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.8, "text": " Okay. Thank you. Thank you, Rassan. Actually, after hearing your talk, I'm kind of considering", "tokens": [1033, 13, 1044, 291, 13, 1044, 291, 11, 497, 640, 282, 13, 5135, 11, 934, 4763, 428, 751, 11, 286, 478, 733, 295, 8079], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 1, "seek": 0, "start": 10.8, "end": 13.96, "text": " I should join the Unicraft community. Sounds to be fun there.", "tokens": [286, 820, 3917, 264, 1156, 299, 4469, 1768, 13, 14576, 281, 312, 1019, 456, 13], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 2, "seek": 0, "start": 13.96, "end": 16.6, "text": " It's a threshold there, Kim.", "tokens": [467, 311, 257, 14678, 456, 11, 5652, 13], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 3, "seek": 0, "start": 16.6, "end": 17.6, "text": " Yeah, I see.", "tokens": [865, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 4, "seek": 0, "start": 17.6, "end": 19.6, "text": " Well, you don't have to test it.", "tokens": [1042, 11, 291, 500, 380, 362, 281, 1500, 309, 13], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 5, "seek": 0, "start": 19.6, "end": 25.96, "text": " Okay. So, my name is Simon Kunzer. As you now heard, I'm the lead maintainer, also the", "tokens": [1033, 13, 407, 11, 452, 1315, 307, 13193, 19089, 4527, 13, 1018, 291, 586, 2198, 11, 286, 478, 264, 1477, 6909, 260, 11, 611, 264], "temperature": 0.0, "avg_logprob": -0.4601188886283648, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.23871344327926636}, {"id": 6, "seek": 2596, "start": 25.96, "end": 31.76, "text": " original person that started that Unicraft project while being still a researcher at", "tokens": [3380, 954, 300, 1409, 300, 1156, 299, 4469, 1716, 1339, 885, 920, 257, 21751, 412], "temperature": 0.0, "avg_logprob": -0.26801636002280493, "compression_ratio": 1.4641148325358853, "no_speech_prob": 9.109231905313209e-05}, {"id": 7, "seek": 2596, "start": 31.76, "end": 38.8, "text": " NEC Labs Europe. In the meantime, we spinned off. We have now a startup also called Unicraft.", "tokens": [426, 8140, 40047, 3315, 13, 682, 264, 14991, 11, 321, 637, 45508, 766, 13, 492, 362, 586, 257, 18578, 611, 1219, 1156, 299, 4469, 13], "temperature": 0.0, "avg_logprob": -0.26801636002280493, "compression_ratio": 1.4641148325358853, "no_speech_prob": 9.109231905313209e-05}, {"id": 8, "seek": 2596, "start": 38.8, "end": 45.040000000000006, "text": " It's the Unicraft GmbH, and I'm their CTO and co-founder. And, yeah, we're building", "tokens": [467, 311, 264, 1156, 299, 4469, 460, 2504, 39, 11, 293, 286, 478, 641, 383, 15427, 293, 598, 12, 33348, 13, 400, 11, 1338, 11, 321, 434, 2390], "temperature": 0.0, "avg_logprob": -0.26801636002280493, "compression_ratio": 1.4641148325358853, "no_speech_prob": 9.109231905313209e-05}, {"id": 9, "seek": 2596, "start": 45.040000000000006, "end": 49.16, "text": " a community and a startup at the same time.", "tokens": [257, 1768, 293, 257, 18578, 412, 264, 912, 565, 13], "temperature": 0.0, "avg_logprob": -0.26801636002280493, "compression_ratio": 1.4641148325358853, "no_speech_prob": 9.109231905313209e-05}, {"id": 10, "seek": 4916, "start": 49.16, "end": 58.04, "text": " So first question into the room. Who has used Unicraft before? I would like to know. Okay.", "tokens": [407, 700, 1168, 666, 264, 1808, 13, 2102, 575, 1143, 1156, 299, 4469, 949, 30, 286, 576, 411, 281, 458, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.22563871656145368, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.884990524558816e-05}, {"id": 11, "seek": 4916, "start": 58.04, "end": 67.4, "text": " Who has maybe more theoretical background, what our key concepts in Unicraft are? Okay.", "tokens": [2102, 575, 1310, 544, 20864, 3678, 11, 437, 527, 2141, 10392, 294, 1156, 299, 4469, 366, 30, 1033, 13], "temperature": 0.0, "avg_logprob": -0.22563871656145368, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.884990524558816e-05}, {"id": 12, "seek": 4916, "start": 67.4, "end": 75.03999999999999, "text": " So then, yeah, also, I have some background slides to bring everybody on the same stage.", "tokens": [407, 550, 11, 1338, 11, 611, 11, 286, 362, 512, 3678, 9788, 281, 1565, 2201, 322, 264, 912, 3233, 13], "temperature": 0.0, "avg_logprob": -0.22563871656145368, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.884990524558816e-05}, {"id": 13, "seek": 7504, "start": 75.04, "end": 80.4, "text": " And then we jump directly into the binary compatibility topic, but I won't spend too", "tokens": [400, 550, 321, 3012, 3838, 666, 264, 17434, 34237, 4829, 11, 457, 286, 1582, 380, 3496, 886], "temperature": 0.0, "avg_logprob": -0.1754399572099958, "compression_ratio": 1.4653465346534653, "no_speech_prob": 3.9828675653552637e-05}, {"id": 14, "seek": 7504, "start": 80.4, "end": 84.28, "text": " much time here. Okay.", "tokens": [709, 565, 510, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.1754399572099958, "compression_ratio": 1.4653465346534653, "no_speech_prob": 3.9828675653552637e-05}, {"id": 15, "seek": 7504, "start": 84.28, "end": 93.32000000000001, "text": " So with this picture, I usually start that. You see on the left side the traditional setup", "tokens": [407, 365, 341, 3036, 11, 286, 2673, 722, 300, 13, 509, 536, 322, 264, 1411, 1252, 264, 5164, 8657], "temperature": 0.0, "avg_logprob": -0.1754399572099958, "compression_ratio": 1.4653465346534653, "no_speech_prob": 3.9828675653552637e-05}, {"id": 16, "seek": 7504, "start": 93.32000000000001, "end": 100.72, "text": " when you have virtual machines and your applications running on them, so stuff that you know since", "tokens": [562, 291, 362, 6374, 8379, 293, 428, 5821, 2614, 322, 552, 11, 370, 1507, 300, 291, 458, 1670], "temperature": 0.0, "avg_logprob": -0.1754399572099958, "compression_ratio": 1.4653465346534653, "no_speech_prob": 3.9828675653552637e-05}, {"id": 17, "seek": 10072, "start": 100.72, "end": 108.76, "text": " 20 years now. Then you have a setup which is more recent and more popular is using containers", "tokens": [945, 924, 586, 13, 1396, 291, 362, 257, 8657, 597, 307, 544, 5162, 293, 544, 3743, 307, 1228, 17089], "temperature": 0.0, "avg_logprob": -0.23799771528977615, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.00013525434769690037}, {"id": 18, "seek": 10072, "start": 108.76, "end": 116.03999999999999, "text": " where you basically run a host address on your hardware and then you use isolation primitives", "tokens": [689, 291, 1936, 1190, 257, 3975, 2985, 322, 428, 8837, 293, 550, 291, 764, 16001, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.23799771528977615, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.00013525434769690037}, {"id": 19, "seek": 10072, "start": 116.03999999999999, "end": 124.2, "text": " on your host kernel to separate your containers from each other. And then there's Unicurnals.", "tokens": [322, 428, 3975, 28256, 281, 4994, 428, 17089, 490, 1184, 661, 13, 400, 550, 456, 311, 1156, 299, 925, 1124, 13], "temperature": 0.0, "avg_logprob": -0.23799771528977615, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.00013525434769690037}, {"id": 20, "seek": 12420, "start": 124.2, "end": 131.16, "text": " I don't know. Is this interrupted somewhere? Okay.", "tokens": [286, 500, 380, 458, 13, 1119, 341, 30329, 4079, 30, 1033, 13], "temperature": 0.0, "avg_logprob": -0.23168064171159772, "compression_ratio": 1.4977168949771689, "no_speech_prob": 7.938169437693432e-05}, {"id": 21, "seek": 12420, "start": 131.16, "end": 135.52, "text": " So we think this could be a different execution environment, especially for the container", "tokens": [407, 321, 519, 341, 727, 312, 257, 819, 15058, 2823, 11, 2318, 337, 264, 10129], "temperature": 0.0, "avg_logprob": -0.23168064171159772, "compression_ratio": 1.4977168949771689, "no_speech_prob": 7.938169437693432e-05}, {"id": 22, "seek": 12420, "start": 135.52, "end": 142.72, "text": " setup bringing kind of marriage what you had before with virtual machines with strong isolation", "tokens": [8657, 5062, 733, 295, 7194, 437, 291, 632, 949, 365, 6374, 8379, 365, 2068, 16001], "temperature": 0.0, "avg_logprob": -0.23168064171159772, "compression_ratio": 1.4977168949771689, "no_speech_prob": 7.938169437693432e-05}, {"id": 23, "seek": 12420, "start": 142.72, "end": 150.12, "text": " and really more minimal hypervisors underneath that are much more secure as well. And don't", "tokens": [293, 534, 544, 13206, 9848, 4938, 830, 7223, 300, 366, 709, 544, 7144, 382, 731, 13, 400, 500, 380], "temperature": 0.0, "avg_logprob": -0.23168064171159772, "compression_ratio": 1.4977168949771689, "no_speech_prob": 7.938169437693432e-05}, {"id": 24, "seek": 15012, "start": 150.12, "end": 157.48000000000002, "text": " need to do a shared host base which can become an attack surface. And then you want the flexibility", "tokens": [643, 281, 360, 257, 5507, 3975, 3096, 597, 393, 1813, 364, 2690, 3753, 13, 400, 550, 291, 528, 264, 12635], "temperature": 0.0, "avg_logprob": -0.11775971681643756, "compression_ratio": 1.5647668393782384, "no_speech_prob": 1.4713843484059907e-05}, {"id": 25, "seek": 15012, "start": 157.48000000000002, "end": 163.32, "text": " of containers and this is where we think a Unicurnal can come in, so where you build", "tokens": [295, 17089, 293, 341, 307, 689, 321, 519, 257, 1156, 299, 925, 304, 393, 808, 294, 11, 370, 689, 291, 1322], "temperature": 0.0, "avg_logprob": -0.11775971681643756, "compression_ratio": 1.5647668393782384, "no_speech_prob": 1.4713843484059907e-05}, {"id": 26, "seek": 15012, "start": 163.32, "end": 167.56, "text": " a kernel per application.", "tokens": [257, 28256, 680, 3861, 13], "temperature": 0.0, "avg_logprob": -0.11775971681643756, "compression_ratio": 1.5647668393782384, "no_speech_prob": 1.4713843484059907e-05}, {"id": 27, "seek": 15012, "start": 167.56, "end": 174.8, "text": " So the thing is, since you know the application that you run on, you can also give up a lot", "tokens": [407, 264, 551, 307, 11, 1670, 291, 458, 264, 3861, 300, 291, 1190, 322, 11, 291, 393, 611, 976, 493, 257, 688], "temperature": 0.0, "avg_logprob": -0.11775971681643756, "compression_ratio": 1.5647668393782384, "no_speech_prob": 1.4713843484059907e-05}, {"id": 28, "seek": 17480, "start": 174.8, "end": 181.4, "text": " of principles you had in standard operating systems and do simplifications which is totally", "tokens": [295, 9156, 291, 632, 294, 3832, 7447, 3652, 293, 360, 6883, 7833, 597, 307, 3879], "temperature": 0.0, "avg_logprob": -0.13731842041015624, "compression_ratio": 1.7083333333333333, "no_speech_prob": 1.0126688721356913e-05}, {"id": 29, "seek": 17480, "start": 181.4, "end": 188.52, "text": " okay because it's not hitting your attack vector actually. So if you say one application", "tokens": [1392, 570, 309, 311, 406, 8850, 428, 2690, 8062, 767, 13, 407, 498, 291, 584, 472, 3861], "temperature": 0.0, "avg_logprob": -0.13731842041015624, "compression_ratio": 1.7083333333333333, "no_speech_prob": 1.0126688721356913e-05}, {"id": 30, "seek": 17480, "start": 188.52, "end": 192.08, "text": " you can go for a flat and single address space because that kernel that you have underneath", "tokens": [291, 393, 352, 337, 257, 4962, 293, 2167, 2985, 1901, 570, 300, 28256, 300, 291, 362, 7223], "temperature": 0.0, "avg_logprob": -0.13731842041015624, "compression_ratio": 1.7083333333333333, "no_speech_prob": 1.0126688721356913e-05}, {"id": 31, "seek": 17480, "start": 192.08, "end": 197.44, "text": " is just for your application for nothing else.", "tokens": [307, 445, 337, 428, 3861, 337, 1825, 1646, 13], "temperature": 0.0, "avg_logprob": -0.13731842041015624, "compression_ratio": 1.7083333333333333, "no_speech_prob": 1.0126688721356913e-05}, {"id": 32, "seek": 17480, "start": 197.44, "end": 203.52, "text": " We in Unicraft build a single monolithic binary usually, so it's your application plus the", "tokens": [492, 294, 1156, 299, 4469, 1322, 257, 2167, 1108, 42878, 17434, 2673, 11, 370, 309, 311, 428, 3861, 1804, 264], "temperature": 0.0, "avg_logprob": -0.13731842041015624, "compression_ratio": 1.7083333333333333, "no_speech_prob": 1.0126688721356913e-05}, {"id": 33, "seek": 20352, "start": 203.52, "end": 214.60000000000002, "text": " kernel layers and everything ends up in function calls into drivers. And you get then further", "tokens": [28256, 7914, 293, 1203, 5314, 493, 294, 2445, 5498, 666, 11590, 13, 400, 291, 483, 550, 3052], "temperature": 0.0, "avg_logprob": -0.16034141040983654, "compression_ratio": 1.7439613526570048, "no_speech_prob": 3.524846397340298e-05}, {"id": 34, "seek": 20352, "start": 214.60000000000002, "end": 221.20000000000002, "text": " benefits, first by this simple setup, but also since you know your environment, you", "tokens": [5311, 11, 700, 538, 341, 2199, 8657, 11, 457, 611, 1670, 291, 458, 428, 2823, 11, 291], "temperature": 0.0, "avg_logprob": -0.16034141040983654, "compression_ratio": 1.7439613526570048, "no_speech_prob": 3.524846397340298e-05}, {"id": 35, "seek": 20352, "start": 221.20000000000002, "end": 226.96, "text": " know where you run on, you know what you run, so you can specialize the kernel layers that", "tokens": [458, 689, 291, 1190, 322, 11, 291, 458, 437, 291, 1190, 11, 370, 291, 393, 37938, 264, 28256, 7914, 300], "temperature": 0.0, "avg_logprob": -0.16034141040983654, "compression_ratio": 1.7439613526570048, "no_speech_prob": 3.524846397340298e-05}, {"id": 36, "seek": 20352, "start": 226.96, "end": 232.96, "text": " you need underneath. So you put only drivers that you need to run on your target hypervisor.", "tokens": [291, 643, 7223, 13, 407, 291, 829, 787, 11590, 300, 291, 643, 281, 1190, 322, 428, 3779, 9848, 16457, 13], "temperature": 0.0, "avg_logprob": -0.16034141040983654, "compression_ratio": 1.7439613526570048, "no_speech_prob": 3.524846397340298e-05}, {"id": 37, "seek": 23296, "start": 232.96, "end": 237.36, "text": " You build a separate image if you run that application on a different hypervisor. So", "tokens": [509, 1322, 257, 4994, 3256, 498, 291, 1190, 300, 3861, 322, 257, 819, 9848, 16457, 13, 407], "temperature": 0.0, "avg_logprob": -0.2282033555963066, "compression_ratio": 1.5198237885462555, "no_speech_prob": 1.200921178678982e-05}, {"id": 38, "seek": 23296, "start": 237.36, "end": 242.96, "text": " floppy drivers, forget it, you don't need it. VertiU only for KVM guests, Zen NetFront", "tokens": [25343, 8200, 11590, 11, 2870, 309, 11, 291, 500, 380, 643, 309, 13, 21044, 72, 52, 787, 337, 591, 53, 44, 9804, 11, 22387, 6188, 37, 10001], "temperature": 0.0, "avg_logprob": -0.2282033555963066, "compression_ratio": 1.5198237885462555, "no_speech_prob": 1.200921178678982e-05}, {"id": 39, "seek": 23296, "start": 242.96, "end": 249.48000000000002, "text": " for instance, only for Zen guests. And you know the application, you have knowledge", "tokens": [337, 5197, 11, 787, 337, 22387, 9804, 13, 400, 291, 458, 264, 3861, 11, 291, 362, 3601], "temperature": 0.0, "avg_logprob": -0.2282033555963066, "compression_ratio": 1.5198237885462555, "no_speech_prob": 1.200921178678982e-05}, {"id": 40, "seek": 23296, "start": 249.48000000000002, "end": 256.48, "text": " which features of the OS is needed and that way you can also from the top down specialize", "tokens": [597, 4122, 295, 264, 12731, 307, 2978, 293, 300, 636, 291, 393, 611, 490, 264, 1192, 760, 37938], "temperature": 0.0, "avg_logprob": -0.2282033555963066, "compression_ratio": 1.5198237885462555, "no_speech_prob": 1.200921178678982e-05}, {"id": 41, "seek": 25648, "start": 256.48, "end": 265.6, "text": " the operating system to just provide that what you need. So this makes us also slightly", "tokens": [264, 7447, 1185, 281, 445, 2893, 300, 437, 291, 643, 13, 407, 341, 1669, 505, 611, 4748], "temperature": 0.0, "avg_logprob": -0.19527337609267817, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.5805658879107796e-05}, {"id": 42, "seek": 25648, "start": 265.6, "end": 270.28000000000003, "text": " different from the other Unicraft projects maybe that you had heard of, so we are for", "tokens": [819, 490, 264, 661, 1156, 299, 4469, 4455, 1310, 300, 291, 632, 2198, 295, 11, 370, 321, 366, 337], "temperature": 0.0, "avg_logprob": -0.19527337609267817, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.5805658879107796e-05}, {"id": 43, "seek": 25648, "start": 270.28000000000003, "end": 279.12, "text": " sure not the first ones. But we claim we are the ones that follow at least this principle", "tokens": [988, 406, 264, 700, 2306, 13, 583, 321, 3932, 321, 366, 264, 2306, 300, 1524, 412, 1935, 341, 8665], "temperature": 0.0, "avg_logprob": -0.19527337609267817, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.5805658879107796e-05}, {"id": 44, "seek": 25648, "start": 279.12, "end": 283.52000000000004, "text": " as the most strongest because we build it from the beginning with that in mind, which", "tokens": [382, 264, 881, 16595, 570, 321, 1322, 309, 490, 264, 2863, 365, 300, 294, 1575, 11, 597], "temperature": 0.0, "avg_logprob": -0.19527337609267817, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.5805658879107796e-05}, {"id": 45, "seek": 28352, "start": 283.52, "end": 294.2, "text": " is specialization. So everything that we implement should never dictate any design principles.", "tokens": [307, 2121, 2144, 13, 407, 1203, 300, 321, 4445, 820, 1128, 36071, 604, 1715, 9156, 13], "temperature": 0.0, "avg_logprob": -0.1488976170939784, "compression_ratio": 1.5465116279069768, "no_speech_prob": 5.296020754030906e-05}, {"id": 46, "seek": 28352, "start": 294.2, "end": 300.2, "text": " The concept is you know what you need for your application, you know what you need to", "tokens": [440, 3410, 307, 291, 458, 437, 291, 643, 337, 428, 3861, 11, 291, 458, 437, 291, 643, 281], "temperature": 0.0, "avg_logprob": -0.1488976170939784, "compression_ratio": 1.5465116279069768, "no_speech_prob": 5.296020754030906e-05}, {"id": 47, "seek": 28352, "start": 300.2, "end": 307.47999999999996, "text": " run your Unicron, so I want to give you a highly customizable base where you pick and", "tokens": [1190, 428, 1156, 299, 2044, 11, 370, 286, 528, 281, 976, 291, 257, 5405, 47922, 3096, 689, 291, 1888, 293], "temperature": 0.0, "avg_logprob": -0.1488976170939784, "compression_ratio": 1.5465116279069768, "no_speech_prob": 5.296020754030906e-05}, {"id": 48, "seek": 30748, "start": 307.48, "end": 319.48, "text": " choose and configure of components and specialize the kernel layers for you. So that led us", "tokens": [2826, 293, 22162, 295, 6677, 293, 37938, 264, 28256, 7914, 337, 291, 13, 407, 300, 4684, 505], "temperature": 0.0, "avg_logprob": -0.15663401806940797, "compression_ratio": 1.6140350877192982, "no_speech_prob": 7.40375071472954e-06}, {"id": 49, "seek": 30748, "start": 319.48, "end": 325.40000000000003, "text": " to this principle, everything is a micro library, which means for us even OS primitives are", "tokens": [281, 341, 8665, 11, 1203, 307, 257, 4532, 6405, 11, 597, 1355, 337, 505, 754, 12731, 2886, 38970, 366], "temperature": 0.0, "avg_logprob": -0.15663401806940797, "compression_ratio": 1.6140350877192982, "no_speech_prob": 7.40375071472954e-06}, {"id": 50, "seek": 30748, "start": 325.40000000000003, "end": 331.04, "text": " micro libraries, meaning a scheduler is a micro library, a specific scheduler implementation", "tokens": [4532, 15148, 11, 3620, 257, 12000, 260, 307, 257, 4532, 6405, 11, 257, 2685, 12000, 260, 11420], "temperature": 0.0, "avg_logprob": -0.15663401806940797, "compression_ratio": 1.6140350877192982, "no_speech_prob": 7.40375071472954e-06}, {"id": 51, "seek": 33104, "start": 331.04, "end": 337.64000000000004, "text": " is a micro library, so like a cooperative scheduler or some schedulers do preemptive scheduling,", "tokens": [307, 257, 4532, 6405, 11, 370, 411, 257, 31772, 12000, 260, 420, 512, 12000, 433, 360, 659, 4543, 488, 29055, 11], "temperature": 0.0, "avg_logprob": -0.2257001984794185, "compression_ratio": 1.7251908396946565, "no_speech_prob": 1.5189903024293017e-05}, {"id": 52, "seek": 33104, "start": 337.64000000000004, "end": 344.56, "text": " different libraries, memory allocators, also things like VFS, network stacks, the architectures,", "tokens": [819, 15148, 11, 4675, 12660, 3391, 11, 611, 721, 411, 691, 29318, 11, 3209, 30792, 11, 264, 6331, 1303, 11], "temperature": 0.0, "avg_logprob": -0.2257001984794185, "compression_ratio": 1.7251908396946565, "no_speech_prob": 1.5189903024293017e-05}, {"id": 53, "seek": 33104, "start": 344.56, "end": 349.68, "text": " the platform supports and the drivers are all libraries and because we are also going", "tokens": [264, 3663, 9346, 293, 264, 11590, 366, 439, 15148, 293, 570, 321, 366, 611, 516], "temperature": 0.0, "avg_logprob": -0.2257001984794185, "compression_ratio": 1.7251908396946565, "no_speech_prob": 1.5189903024293017e-05}, {"id": 54, "seek": 33104, "start": 349.68, "end": 354.32000000000005, "text": " up the stack the application interfaces, so everything that has to do with POSIX even", "tokens": [493, 264, 8630, 264, 3861, 28416, 11, 370, 1203, 300, 575, 281, 360, 365, 430, 4367, 21124, 754], "temperature": 0.0, "avg_logprob": -0.2257001984794185, "compression_ratio": 1.7251908396946565, "no_speech_prob": 1.5189903024293017e-05}, {"id": 55, "seek": 33104, "start": 354.32000000000005, "end": 360.84000000000003, "text": " that is split it into multiple subsystems, POSIX subsystem libraries. The Linux system", "tokens": [300, 307, 7472, 309, 666, 3866, 2090, 9321, 82, 11, 430, 4367, 21124, 2090, 9321, 15148, 13, 440, 18734, 1185], "temperature": 0.0, "avg_logprob": -0.2257001984794185, "compression_ratio": 1.7251908396946565, "no_speech_prob": 1.5189903024293017e-05}, {"id": 56, "seek": 36084, "start": 360.84, "end": 367.28, "text": " called ABI, which you will see in this talk now, and even language runtimes, if you let's", "tokens": [1219, 316, 11291, 11, 597, 291, 486, 536, 294, 341, 751, 586, 11, 293, 754, 2856, 49435, 1532, 11, 498, 291, 718, 311], "temperature": 0.0, "avg_logprob": -0.2334722712420035, "compression_ratio": 1.4480874316939891, "no_speech_prob": 4.327644273871556e-05}, {"id": 57, "seek": 36084, "start": 367.28, "end": 379.03999999999996, "text": " say run a JavaScript Unicron, you can build it with a JS engine. And the project consists", "tokens": [584, 1190, 257, 15778, 1156, 299, 2044, 11, 291, 393, 1322, 309, 365, 257, 33063, 2848, 13, 400, 264, 1716, 14689], "temperature": 0.0, "avg_logprob": -0.2334722712420035, "compression_ratio": 1.4480874316939891, "no_speech_prob": 4.327644273871556e-05}, {"id": 58, "seek": 36084, "start": 379.03999999999996, "end": 386.71999999999997, "text": " basically of a Kconfig based configuration system and a build system, also make based", "tokens": [1936, 295, 257, 591, 1671, 20646, 2361, 11694, 1185, 293, 257, 1322, 1185, 11, 611, 652, 2361], "temperature": 0.0, "avg_logprob": -0.2334722712420035, "compression_ratio": 1.4480874316939891, "no_speech_prob": 4.327644273871556e-05}, {"id": 59, "seek": 38672, "start": 386.72, "end": 393.28000000000003, "text": " to not come up with yet another build system, to make actually entrance easy when people", "tokens": [281, 406, 808, 493, 365, 1939, 1071, 1322, 1185, 11, 281, 652, 767, 12014, 1858, 562, 561], "temperature": 0.0, "avg_logprob": -0.18836426734924316, "compression_ratio": 1.4861878453038675, "no_speech_prob": 1.7486610886408016e-05}, {"id": 60, "seek": 38672, "start": 393.28000000000003, "end": 401.72, "text": " are familiar with Linux before, and our library pool actually. And to give you a rough idea", "tokens": [366, 4963, 365, 18734, 949, 11, 293, 527, 6405, 7005, 767, 13, 400, 281, 976, 291, 257, 5903, 1558], "temperature": 0.0, "avg_logprob": -0.18836426734924316, "compression_ratio": 1.4861878453038675, "no_speech_prob": 1.7486610886408016e-05}, {"id": 61, "seek": 38672, "start": 401.72, "end": 409.12, "text": " how this library pool is organized, I find this diagram nice, so let's see if this works", "tokens": [577, 341, 6405, 7005, 307, 9983, 11, 286, 915, 341, 10686, 1481, 11, 370, 718, 311, 536, 498, 341, 1985], "temperature": 0.0, "avg_logprob": -0.18836426734924316, "compression_ratio": 1.4861878453038675, "no_speech_prob": 1.7486610886408016e-05}, {"id": 62, "seek": 40912, "start": 409.12, "end": 418.2, "text": " at this point. Yeah, so we divide roughly, so you don't find it that way in the repos,", "tokens": [412, 341, 935, 13, 865, 11, 370, 321, 9845, 9810, 11, 370, 291, 500, 380, 915, 309, 300, 636, 294, 264, 1085, 329, 11], "temperature": 0.0, "avg_logprob": -0.22184476187062818, "compression_ratio": 1.672811059907834, "no_speech_prob": 2.702407437027432e-05}, {"id": 63, "seek": 40912, "start": 418.2, "end": 424.12, "text": " but we divide roughly the libraries into these different categories, so you have like here", "tokens": [457, 321, 9845, 9810, 264, 15148, 666, 613, 819, 10479, 11, 370, 291, 362, 411, 510], "temperature": 0.0, "avg_logprob": -0.22184476187062818, "compression_ratio": 1.672811059907834, "no_speech_prob": 2.702407437027432e-05}, {"id": 64, "seek": 40912, "start": 424.12, "end": 429.84000000000003, "text": " on the bottom, the platform layer, which basically includes drivers and platform support", "tokens": [322, 264, 2767, 11, 264, 3663, 4583, 11, 597, 1936, 5974, 11590, 293, 3663, 1406], "temperature": 0.0, "avg_logprob": -0.22184476187062818, "compression_ratio": 1.672811059907834, "no_speech_prob": 2.702407437027432e-05}, {"id": 65, "seek": 40912, "start": 429.84000000000003, "end": 435.88, "text": " where you run on. Then we have this OS preemptive layer, these are then libraries that implement", "tokens": [689, 291, 1190, 322, 13, 1396, 321, 362, 341, 12731, 659, 4543, 488, 4583, 11, 613, 366, 550, 15148, 300, 4445], "temperature": 0.0, "avg_logprob": -0.22184476187062818, "compression_ratio": 1.672811059907834, "no_speech_prob": 2.702407437027432e-05}, {"id": 66, "seek": 43588, "start": 435.88, "end": 441.96, "text": " like a TCP IP stack, or file systems, or something regarding scheduling, memory allocation,", "tokens": [411, 257, 48965, 8671, 8630, 11, 420, 3991, 3652, 11, 420, 746, 8595, 29055, 11, 4675, 27599, 11], "temperature": 0.0, "avg_logprob": -0.1864617148111033, "compression_ratio": 1.6063348416289593, "no_speech_prob": 2.1421255951281637e-05}, {"id": 67, "seek": 43588, "start": 441.96, "end": 448.2, "text": " et cetera, et cetera. And then always in mind there's like, first the opportunity for you", "tokens": [1030, 11458, 11, 1030, 11458, 13, 400, 550, 1009, 294, 1575, 456, 311, 411, 11, 700, 264, 2650, 337, 291], "temperature": 0.0, "avg_logprob": -0.1864617148111033, "compression_ratio": 1.6063348416289593, "no_speech_prob": 2.1421255951281637e-05}, {"id": 68, "seek": 43588, "start": 448.2, "end": 454.92, "text": " to replace components in here, and also that we provide also alternatives, so you don't", "tokens": [281, 7406, 6677, 294, 510, 11, 293, 611, 300, 321, 2893, 611, 20478, 11, 370, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.1864617148111033, "compression_ratio": 1.6063348416289593, "no_speech_prob": 2.1421255951281637e-05}, {"id": 69, "seek": 43588, "start": 454.92, "end": 459.12, "text": " need to stick with IP if you don't like it, so you can provide your own network stack", "tokens": [643, 281, 2897, 365, 8671, 498, 291, 500, 380, 411, 309, 11, 370, 291, 393, 2893, 428, 1065, 3209, 8630], "temperature": 0.0, "avg_logprob": -0.1864617148111033, "compression_ratio": 1.6063348416289593, "no_speech_prob": 2.1421255951281637e-05}, {"id": 70, "seek": 45912, "start": 459.12, "end": 466.52, "text": " here as well, and reuse the rest of the stack too. Then we have this POSIX compatibility", "tokens": [510, 382, 731, 11, 293, 26225, 264, 1472, 295, 264, 8630, 886, 13, 1396, 321, 362, 341, 430, 4367, 21124, 34237], "temperature": 0.0, "avg_logprob": -0.22461925506591796, "compression_ratio": 1.6322869955156951, "no_speech_prob": 1.6941959984251298e-05}, {"id": 71, "seek": 45912, "start": 466.52, "end": 471.4, "text": " layer, this is basically, you know, things here, FD tab, this is for instance file descriptor", "tokens": [4583, 11, 341, 307, 1936, 11, 291, 458, 11, 721, 510, 11, 479, 35, 4421, 11, 341, 307, 337, 5197, 3991, 31280, 284], "temperature": 0.0, "avg_logprob": -0.22461925506591796, "compression_ratio": 1.6322869955156951, "no_speech_prob": 1.6941959984251298e-05}, {"id": 72, "seek": 45912, "start": 471.4, "end": 477.88, "text": " handling, as you know it. POSIX process has then aspects about process IDs, process handling,", "tokens": [13175, 11, 382, 291, 458, 309, 13, 430, 4367, 21124, 1399, 575, 550, 7270, 466, 1399, 48212, 11, 1399, 13175, 11], "temperature": 0.0, "avg_logprob": -0.22461925506591796, "compression_ratio": 1.6322869955156951, "no_speech_prob": 1.6941959984251298e-05}, {"id": 73, "seek": 45912, "start": 477.88, "end": 485.6, "text": " et cetera, pthread API, of course. And then we have a libc layer, where we also have at", "tokens": [1030, 11458, 11, 280, 392, 2538, 9362, 11, 295, 1164, 13, 400, 550, 321, 362, 257, 22854, 66, 4583, 11, 689, 321, 611, 362, 412], "temperature": 0.0, "avg_logprob": -0.22461925506591796, "compression_ratio": 1.6322869955156951, "no_speech_prob": 1.6941959984251298e-05}, {"id": 74, "seek": 48560, "start": 485.6, "end": 492.44, "text": " the moment actually three libcs, muscle, which is becoming our main thing now, a new lib", "tokens": [264, 1623, 767, 1045, 22854, 14368, 11, 8679, 11, 597, 307, 5617, 527, 2135, 551, 586, 11, 257, 777, 22854], "temperature": 0.0, "avg_logprob": -0.17930364608764648, "compression_ratio": 1.6966824644549763, "no_speech_prob": 6.43498424324207e-06}, {"id": 75, "seek": 48560, "start": 492.44, "end": 497.48, "text": " that we had in the past, to actually provide all the libc functionally to the application,", "tokens": [300, 321, 632, 294, 264, 1791, 11, 281, 767, 2893, 439, 264, 22854, 66, 2445, 379, 281, 264, 3861, 11], "temperature": 0.0, "avg_logprob": -0.17930364608764648, "compression_ratio": 1.6966824644549763, "no_speech_prob": 6.43498424324207e-06}, {"id": 76, "seek": 48560, "start": 497.48, "end": 502.76000000000005, "text": " but also actually for the other layers too, right, it provides also things like memcopy,", "tokens": [457, 611, 767, 337, 264, 661, 7914, 886, 11, 558, 11, 309, 6417, 611, 721, 411, 1334, 13084, 88, 11], "temperature": 0.0, "avg_logprob": -0.17930364608764648, "compression_ratio": 1.6966824644549763, "no_speech_prob": 6.43498424324207e-06}, {"id": 77, "seek": 48560, "start": 502.76000000000005, "end": 511.8, "text": " which is like all over the place used, right. Okay. Then Linux application compatibility,", "tokens": [597, 307, 411, 439, 670, 264, 1081, 1143, 11, 558, 13, 1033, 13, 1396, 18734, 3861, 34237, 11], "temperature": 0.0, "avg_logprob": -0.17930364608764648, "compression_ratio": 1.6966824644549763, "no_speech_prob": 6.43498424324207e-06}, {"id": 78, "seek": 51180, "start": 511.8, "end": 519.32, "text": " that was now a big topic for this release. Why do we do application compatibility? It's", "tokens": [300, 390, 586, 257, 955, 4829, 337, 341, 4374, 13, 1545, 360, 321, 360, 3861, 34237, 30, 467, 311], "temperature": 0.0, "avg_logprob": -0.1409705442540786, "compression_ratio": 1.5914893617021277, "no_speech_prob": 1.1288478162896354e-05}, {"id": 79, "seek": 51180, "start": 519.32, "end": 527.84, "text": " actually for us, for adoption, to drive the adoption, because most cloud software is developed", "tokens": [767, 337, 505, 11, 337, 19215, 11, 281, 3332, 264, 19215, 11, 570, 881, 4588, 4722, 307, 4743], "temperature": 0.0, "avg_logprob": -0.1409705442540786, "compression_ratio": 1.5914893617021277, "no_speech_prob": 1.1288478162896354e-05}, {"id": 80, "seek": 51180, "start": 527.84, "end": 534.36, "text": " for Linux. People are used to their software, so we don't feel confident to ask them to", "tokens": [337, 18734, 13, 3432, 366, 1143, 281, 641, 4722, 11, 370, 321, 500, 380, 841, 6679, 281, 1029, 552, 281], "temperature": 0.0, "avg_logprob": -0.1409705442540786, "compression_ratio": 1.5914893617021277, "no_speech_prob": 1.1288478162896354e-05}, {"id": 81, "seek": 51180, "start": 534.36, "end": 541.76, "text": " use something new or rewrite stuff from scratch. And if you provide something like Linux compatibility,", "tokens": [764, 746, 777, 420, 28132, 1507, 490, 8459, 13, 400, 498, 291, 2893, 746, 411, 18734, 34237, 11], "temperature": 0.0, "avg_logprob": -0.1409705442540786, "compression_ratio": 1.5914893617021277, "no_speech_prob": 1.1288478162896354e-05}, {"id": 82, "seek": 54176, "start": 541.76, "end": 546.6, "text": " you remove also obstacles that people start using Unicraft, because they can run their", "tokens": [291, 4159, 611, 17735, 300, 561, 722, 1228, 1156, 299, 4469, 11, 570, 436, 393, 1190, 641], "temperature": 0.0, "avg_logprob": -0.1403306063483743, "compression_ratio": 1.6, "no_speech_prob": 1.9195220374967903e-05}, {"id": 83, "seek": 54176, "start": 546.6, "end": 555.56, "text": " application with Unicraft. And our vision behind the project is to give seamless application", "tokens": [3861, 365, 1156, 299, 4469, 13, 400, 527, 5201, 2261, 264, 1716, 307, 281, 976, 28677, 3861], "temperature": 0.0, "avg_logprob": -0.1403306063483743, "compression_ratio": 1.6, "no_speech_prob": 1.9195220374967903e-05}, {"id": 84, "seek": 54176, "start": 555.56, "end": 565.2, "text": " support. So the users that say, they tell you, I use that in that web server, and it", "tokens": [1406, 13, 407, 264, 5022, 300, 584, 11, 436, 980, 291, 11, 286, 764, 300, 294, 300, 3670, 7154, 11, 293, 309], "temperature": 0.0, "avg_logprob": -0.1403306063483743, "compression_ratio": 1.6, "no_speech_prob": 1.9195220374967903e-05}, {"id": 85, "seek": 54176, "start": 565.2, "end": 571.56, "text": " should be like with a push of a button, so including with some tooling that we provide,", "tokens": [820, 312, 411, 365, 257, 2944, 295, 257, 2960, 11, 370, 3009, 365, 512, 46593, 300, 321, 2893, 11], "temperature": 0.0, "avg_logprob": -0.1403306063483743, "compression_ratio": 1.6, "no_speech_prob": 1.9195220374967903e-05}, {"id": 86, "seek": 57156, "start": 571.56, "end": 576.52, "text": " that we can run that on Unicraft as they run it before on Linux, and they benefit from", "tokens": [300, 321, 393, 1190, 300, 322, 1156, 299, 4469, 382, 436, 1190, 309, 949, 322, 18734, 11, 293, 436, 5121, 490], "temperature": 0.0, "avg_logprob": -0.20652496814727783, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.4471964277618099e-05}, {"id": 87, "seek": 57156, "start": 576.52, "end": 582.0, "text": " all these nice unicolonial properties, which are lower boot times, less memory consumption,", "tokens": [439, 613, 1481, 517, 299, 38780, 831, 7221, 11, 597, 366, 3126, 11450, 1413, 11, 1570, 4675, 12126, 11], "temperature": 0.0, "avg_logprob": -0.20652496814727783, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.4471964277618099e-05}, {"id": 88, "seek": 57156, "start": 582.0, "end": 595.4, "text": " and also improved performance. Okay. So now, speaking about which possibilities you have", "tokens": [293, 611, 9689, 3389, 13, 1033, 13, 407, 586, 11, 4124, 466, 597, 12178, 291, 362], "temperature": 0.0, "avg_logprob": -0.20652496814727783, "compression_ratio": 1.459016393442623, "no_speech_prob": 1.4471964277618099e-05}, {"id": 89, "seek": 59540, "start": 595.4, "end": 606.52, "text": " for supporting Linux compatibility, we divide actually compatibility into two main tracks.", "tokens": [337, 7231, 18734, 34237, 11, 321, 9845, 767, 34237, 666, 732, 2135, 10218, 13], "temperature": 0.0, "avg_logprob": -0.12126314187351661, "compression_ratio": 1.748792270531401, "no_speech_prob": 9.217990736942738e-06}, {"id": 90, "seek": 59540, "start": 606.52, "end": 613.04, "text": " One track is so-called native, which means that we have the application sources, and", "tokens": [1485, 2837, 307, 370, 12, 11880, 8470, 11, 597, 1355, 300, 321, 362, 264, 3861, 7139, 11, 293], "temperature": 0.0, "avg_logprob": -0.12126314187351661, "compression_ratio": 1.748792270531401, "no_speech_prob": 9.217990736942738e-06}, {"id": 91, "seek": 59540, "start": 613.04, "end": 618.16, "text": " we compile that together and link that together with the Unicraft build system. And then we", "tokens": [321, 31413, 300, 1214, 293, 2113, 300, 1214, 365, 264, 1156, 299, 4469, 1322, 1185, 13, 400, 550, 321], "temperature": 0.0, "avg_logprob": -0.12126314187351661, "compression_ratio": 1.748792270531401, "no_speech_prob": 9.217990736942738e-06}, {"id": 92, "seek": 59540, "start": 618.16, "end": 625.04, "text": " have on the other side, the binary compatibility mode, where the story is that the application", "tokens": [362, 322, 264, 661, 1252, 11, 264, 17434, 34237, 4391, 11, 689, 264, 1657, 307, 300, 264, 3861], "temperature": 0.0, "avg_logprob": -0.12126314187351661, "compression_ratio": 1.748792270531401, "no_speech_prob": 9.217990736942738e-06}, {"id": 93, "seek": 62504, "start": 625.04, "end": 633.8, "text": " is built externally, and we just get binary artifacts, or the final image event. And then", "tokens": [307, 3094, 40899, 11, 293, 321, 445, 483, 17434, 24617, 11, 420, 264, 2572, 3256, 2280, 13, 400, 550], "temperature": 0.0, "avg_logprob": -0.15461681002662295, "compression_ratio": 1.4636871508379887, "no_speech_prob": 9.970083738153335e-06}, {"id": 94, "seek": 62504, "start": 633.8, "end": 641.92, "text": " actually you can subdivide these two tracks on the native side. We have, which we did", "tokens": [767, 291, 393, 45331, 482, 613, 732, 10218, 322, 264, 8470, 1252, 13, 492, 362, 11, 597, 321, 630], "temperature": 0.0, "avg_logprob": -0.15461681002662295, "compression_ratio": 1.4636871508379887, "no_speech_prob": 9.970083738153335e-06}, {"id": 95, "seek": 62504, "start": 641.92, "end": 647.68, "text": " actually quite a lot until recently, this Unicraft-driven compilation, which basically", "tokens": [767, 1596, 257, 688, 1826, 3938, 11, 341, 1156, 299, 4469, 12, 25456, 40261, 11, 597, 1936], "temperature": 0.0, "avg_logprob": -0.15461681002662295, "compression_ratio": 1.4636871508379887, "no_speech_prob": 9.970083738153335e-06}, {"id": 96, "seek": 64768, "start": 647.68, "end": 656.3199999999999, "text": " meant that when you have your application, you have to port or mimic the application's", "tokens": [4140, 300, 562, 291, 362, 428, 3861, 11, 291, 362, 281, 2436, 420, 31075, 264, 3861, 311], "temperature": 0.0, "avg_logprob": -0.14067567425009644, "compression_ratio": 1.710144927536232, "no_speech_prob": 9.36252672545379e-06}, {"id": 97, "seek": 64768, "start": 656.3199999999999, "end": 660.2399999999999, "text": " original build system with the Unicraft build system, and then you compile all the sources", "tokens": [3380, 1322, 1185, 365, 264, 1156, 299, 4469, 1322, 1185, 11, 293, 550, 291, 31413, 439, 264, 7139], "temperature": 0.0, "avg_logprob": -0.14067567425009644, "compression_ratio": 1.710144927536232, "no_speech_prob": 9.36252672545379e-06}, {"id": 98, "seek": 64768, "start": 660.2399999999999, "end": 666.56, "text": " with Unicraft. It has the benefit that you're then staying in one universe and don't have", "tokens": [365, 1156, 299, 4469, 13, 467, 575, 264, 5121, 300, 291, 434, 550, 7939, 294, 472, 6445, 293, 500, 380, 362], "temperature": 0.0, "avg_logprob": -0.14067567425009644, "compression_ratio": 1.710144927536232, "no_speech_prob": 9.36252672545379e-06}, {"id": 99, "seek": 64768, "start": 666.56, "end": 674.92, "text": " potential conflicts with compiler flags or things that, I mean, influence your calling", "tokens": [3995, 19807, 365, 31958, 23265, 420, 721, 300, 11, 286, 914, 11, 6503, 428, 5141], "temperature": 0.0, "avg_logprob": -0.14067567425009644, "compression_ratio": 1.710144927536232, "no_speech_prob": 9.36252672545379e-06}, {"id": 100, "seek": 67492, "start": 674.92, "end": 680.68, "text": " conventions between objects. And then there is this way that you probably have also seen,", "tokens": [33520, 1296, 6565, 13, 400, 550, 456, 307, 341, 636, 300, 291, 1391, 362, 611, 1612, 11], "temperature": 0.0, "avg_logprob": -0.1615748350647674, "compression_ratio": 1.5633187772925765, "no_speech_prob": 2.3168453481048346e-05}, {"id": 101, "seek": 67492, "start": 680.68, "end": 686.04, "text": " for instance, with RUM kernels. They did it a lot using an instrumented way, where you", "tokens": [337, 5197, 11, 365, 497, 14340, 23434, 1625, 13, 814, 630, 309, 257, 688, 1228, 364, 7198, 292, 636, 11, 689, 291], "temperature": 0.0, "avg_logprob": -0.1615748350647674, "compression_ratio": 1.5633187772925765, "no_speech_prob": 2.3168453481048346e-05}, {"id": 102, "seek": 67492, "start": 686.04, "end": 694.24, "text": " actually utilize the build system of an application with the cross-compile feature, and then,", "tokens": [767, 16117, 264, 1322, 1185, 295, 364, 3861, 365, 264, 3278, 12, 21541, 794, 4111, 11, 293, 550, 11], "temperature": 0.0, "avg_logprob": -0.1615748350647674, "compression_ratio": 1.5633187772925765, "no_speech_prob": 2.3168453481048346e-05}, {"id": 103, "seek": 67492, "start": 694.24, "end": 700.4, "text": " you know, you hook in, and that's your entry point into replacing the compile calls and", "tokens": [291, 458, 11, 291, 6328, 294, 11, 293, 300, 311, 428, 8729, 935, 666, 19139, 264, 31413, 5498, 293], "temperature": 0.0, "avg_logprob": -0.1615748350647674, "compression_ratio": 1.5633187772925765, "no_speech_prob": 2.3168453481048346e-05}, {"id": 104, "seek": 70040, "start": 700.4, "end": 709.48, "text": " make it fit for your Unicom. And then on the binary compatibility side, we have, so let's", "tokens": [652, 309, 3318, 337, 428, 1156, 299, 298, 13, 400, 550, 322, 264, 17434, 34237, 1252, 11, 321, 362, 11, 370, 718, 311], "temperature": 0.0, "avg_logprob": -0.18328381909264457, "compression_ratio": 1.4432432432432432, "no_speech_prob": 6.142821803223342e-06}, {"id": 105, "seek": 70040, "start": 709.48, "end": 717.88, "text": " start here, because that's easier. So, of course, so externally built, and this means", "tokens": [722, 510, 11, 570, 300, 311, 3571, 13, 407, 11, 295, 1164, 11, 370, 40899, 3094, 11, 293, 341, 1355], "temperature": 0.0, "avg_logprob": -0.18328381909264457, "compression_ratio": 1.4432432432432432, "no_speech_prob": 6.142821803223342e-06}, {"id": 106, "seek": 70040, "start": 717.88, "end": 724.72, "text": " basically you have ELF files, so like a shared library or an ELF application. What you need", "tokens": [1936, 291, 362, 14426, 37, 7098, 11, 370, 411, 257, 5507, 6405, 420, 364, 14426, 37, 3861, 13, 708, 291, 643], "temperature": 0.0, "avg_logprob": -0.18328381909264457, "compression_ratio": 1.4432432432432432, "no_speech_prob": 6.142821803223342e-06}, {"id": 107, "seek": 72472, "start": 724.72, "end": 730.28, "text": " here is basically just to support loading that and get that into your address space,", "tokens": [510, 307, 1936, 445, 281, 1406, 15114, 300, 293, 483, 300, 666, 428, 2985, 1901, 11], "temperature": 0.0, "avg_logprob": -0.11406160593032837, "compression_ratio": 1.6027397260273972, "no_speech_prob": 1.5671026631025597e-05}, {"id": 108, "seek": 72472, "start": 730.28, "end": 736.84, "text": " and then run it. And then there's also this flavor of, let's say, build time linking,", "tokens": [293, 550, 1190, 309, 13, 400, 550, 456, 311, 611, 341, 6813, 295, 11, 718, 311, 584, 11, 1322, 565, 25775, 11], "temperature": 0.0, "avg_logprob": -0.11406160593032837, "compression_ratio": 1.6027397260273972, "no_speech_prob": 1.5671026631025597e-05}, {"id": 109, "seek": 72472, "start": 736.84, "end": 744.72, "text": " which means that you take some build artifacts from the original application build system,", "tokens": [597, 1355, 300, 291, 747, 512, 1322, 24617, 490, 264, 3380, 3861, 1322, 1185, 11], "temperature": 0.0, "avg_logprob": -0.11406160593032837, "compression_ratio": 1.6027397260273972, "no_speech_prob": 1.5671026631025597e-05}, {"id": 110, "seek": 72472, "start": 744.72, "end": 750.76, "text": " like the intermediate object files, before it does a final link to the application image,", "tokens": [411, 264, 19376, 2657, 7098, 11, 949, 309, 775, 257, 2572, 2113, 281, 264, 3861, 3256, 11], "temperature": 0.0, "avg_logprob": -0.11406160593032837, "compression_ratio": 1.6027397260273972, "no_speech_prob": 1.5671026631025597e-05}, {"id": 111, "seek": 75076, "start": 750.76, "end": 759.08, "text": " and you link those together with the Unicraft system. And they call it here binary compatible,", "tokens": [293, 291, 2113, 729, 1214, 365, 264, 1156, 299, 4469, 1185, 13, 400, 436, 818, 309, 510, 17434, 18218, 11], "temperature": 0.0, "avg_logprob": -0.19030346741547455, "compression_ratio": 1.4972375690607735, "no_speech_prob": 1.6886144294403493e-05}, {"id": 112, "seek": 75076, "start": 759.08, "end": 766.3199999999999, "text": " because, you know, you interface it on an API, right, and not on the API level, like", "tokens": [570, 11, 291, 458, 11, 291, 9226, 309, 322, 364, 9362, 11, 558, 11, 293, 406, 322, 264, 9362, 1496, 11, 411], "temperature": 0.0, "avg_logprob": -0.19030346741547455, "compression_ratio": 1.4972375690607735, "no_speech_prob": 1.6886144294403493e-05}, {"id": 113, "seek": 75076, "start": 766.3199999999999, "end": 777.68, "text": " in the native cases. So, and here, this is just a little mark that in the Unicraft project,", "tokens": [294, 264, 8470, 3331, 13, 407, 11, 293, 510, 11, 341, 307, 445, 257, 707, 1491, 300, 294, 264, 1156, 299, 4469, 1716, 11], "temperature": 0.0, "avg_logprob": -0.19030346741547455, "compression_ratio": 1.4972375690607735, "no_speech_prob": 1.6886144294403493e-05}, {"id": 114, "seek": 77768, "start": 777.68, "end": 784.3599999999999, "text": " you will mostly find these three modes in the project that people are working on. So,", "tokens": [291, 486, 5240, 915, 613, 1045, 14068, 294, 264, 1716, 300, 561, 366, 1364, 322, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.1953595848970635, "compression_ratio": 1.5585585585585586, "no_speech_prob": 7.292496320587816e-06}, {"id": 115, "seek": 77768, "start": 784.3599999999999, "end": 789.3199999999999, "text": " here we, that we never tried with Unicraft, in fact. But I mean, there's some tooling", "tokens": [510, 321, 11, 300, 321, 1128, 3031, 365, 1156, 299, 4469, 11, 294, 1186, 13, 583, 286, 914, 11, 456, 311, 512, 46593], "temperature": 0.0, "avg_logprob": -0.1953595848970635, "compression_ratio": 1.5585585585585586, "no_speech_prob": 7.292496320587816e-06}, {"id": 116, "seek": 77768, "start": 789.3199999999999, "end": 798.1999999999999, "text": " and this should work, too, actually. So, as you may have noticed, native is about", "tokens": [293, 341, 820, 589, 11, 886, 11, 767, 13, 407, 11, 382, 291, 815, 362, 5694, 11, 8470, 307, 466], "temperature": 0.0, "avg_logprob": -0.1953595848970635, "compression_ratio": 1.5585585585585586, "no_speech_prob": 7.292496320587816e-06}, {"id": 117, "seek": 77768, "start": 798.1999999999999, "end": 804.92, "text": " API compatibility, so really on the programming interface, and binary compatibility is about", "tokens": [9362, 34237, 11, 370, 534, 322, 264, 9410, 9226, 11, 293, 17434, 34237, 307, 466], "temperature": 0.0, "avg_logprob": -0.1953595848970635, "compression_ratio": 1.5585585585585586, "no_speech_prob": 7.292496320587816e-06}, {"id": 118, "seek": 80492, "start": 804.92, "end": 811.0799999999999, "text": " the application binary interface. So, really, the compiled, sorry, the compiled artifacts", "tokens": [264, 3861, 17434, 9226, 13, 407, 11, 534, 11, 264, 36548, 11, 2597, 11, 264, 36548, 24617], "temperature": 0.0, "avg_logprob": -0.17878777481788813, "compression_ratio": 1.6367713004484306, "no_speech_prob": 1.6167390640475787e-05}, {"id": 119, "seek": 80492, "start": 811.0799999999999, "end": 817.0799999999999, "text": " and how you have calling conventions here, et cetera, where your arguments in which register", "tokens": [293, 577, 291, 362, 5141, 33520, 510, 11, 1030, 11458, 11, 689, 428, 12869, 294, 597, 7280], "temperature": 0.0, "avg_logprob": -0.17878777481788813, "compression_ratio": 1.6367713004484306, "no_speech_prob": 1.6167390640475787e-05}, {"id": 120, "seek": 80492, "start": 817.0799999999999, "end": 823.28, "text": " or how's your stack layout, et cetera, right? And this is, this is here on a programming", "tokens": [420, 577, 311, 428, 8630, 13333, 11, 1030, 11458, 11, 558, 30, 400, 341, 307, 11, 341, 307, 510, 322, 257, 9410], "temperature": 0.0, "avg_logprob": -0.17878777481788813, "compression_ratio": 1.6367713004484306, "no_speech_prob": 1.6167390640475787e-05}, {"id": 121, "seek": 80492, "start": 823.28, "end": 832.7199999999999, "text": " language level, right? So, the requirements for providing you, let's say, a native experience", "tokens": [2856, 1496, 11, 558, 30, 407, 11, 264, 7728, 337, 6530, 291, 11, 718, 311, 584, 11, 257, 8470, 1752], "temperature": 0.0, "avg_logprob": -0.17878777481788813, "compression_ratio": 1.6367713004484306, "no_speech_prob": 1.6167390640475787e-05}, {"id": 122, "seek": 83272, "start": 832.72, "end": 841.96, "text": " is POSIX, POSIX and POSIX, right? Most applications are written for POSIX, so we have to do POSIX,", "tokens": [307, 430, 4367, 21124, 11, 430, 4367, 21124, 293, 430, 4367, 21124, 11, 558, 30, 4534, 5821, 366, 3720, 337, 430, 4367, 21124, 11, 370, 321, 362, 281, 360, 430, 4367, 21124, 11], "temperature": 0.0, "avg_logprob": -0.15706976254781088, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.5437813746975735e-05}, {"id": 123, "seek": 83272, "start": 841.96, "end": 854.2, "text": " no excuse, right? So, libcs will mostly cover that. But, yeah, it's all about POSIX. And", "tokens": [572, 8960, 11, 558, 30, 407, 11, 22854, 14368, 486, 5240, 2060, 300, 13, 583, 11, 1338, 11, 309, 311, 439, 466, 430, 4367, 21124, 13, 400], "temperature": 0.0, "avg_logprob": -0.15706976254781088, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.5437813746975735e-05}, {"id": 124, "seek": 83272, "start": 854.2, "end": 861.96, "text": " the second point is that you also need to port the libraries that your application additionally", "tokens": [264, 1150, 935, 307, 300, 291, 611, 643, 281, 2436, 264, 15148, 300, 428, 3861, 43181], "temperature": 0.0, "avg_logprob": -0.15706976254781088, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.5437813746975735e-05}, {"id": 125, "seek": 86196, "start": 861.96, "end": 869.24, "text": " uses. Let's say, yeah, let's take engine access and web. So, right, you have then tons of", "tokens": [4960, 13, 961, 311, 584, 11, 1338, 11, 718, 311, 747, 2848, 2105, 293, 3670, 13, 407, 11, 558, 11, 291, 362, 550, 9131, 295], "temperature": 0.0, "avg_logprob": -0.1637661984092311, "compression_ratio": 1.6043478260869566, "no_speech_prob": 2.5056271624634974e-05}, {"id": 126, "seek": 86196, "start": 869.24, "end": 875.5600000000001, "text": " library dependencies, for instance, for cryptographic things, like setting up HTTPS tunnels or doing", "tokens": [6405, 36606, 11, 337, 5197, 11, 337, 9844, 12295, 721, 11, 411, 3287, 493, 11751, 51, 6273, 30804, 420, 884], "temperature": 0.0, "avg_logprob": -0.1637661984092311, "compression_ratio": 1.6043478260869566, "no_speech_prob": 2.5056271624634974e-05}, {"id": 127, "seek": 86196, "start": 875.5600000000001, "end": 881.5600000000001, "text": " some other things. So, those libraries, you need also, you know, port here and add them", "tokens": [512, 661, 721, 13, 407, 11, 729, 15148, 11, 291, 643, 611, 11, 291, 458, 11, 2436, 510, 293, 909, 552], "temperature": 0.0, "avg_logprob": -0.1637661984092311, "compression_ratio": 1.6043478260869566, "no_speech_prob": 2.5056271624634974e-05}, {"id": 128, "seek": 86196, "start": 881.5600000000001, "end": 890.8000000000001, "text": " so that you have the, you know, the application sources available during the build, right?", "tokens": [370, 300, 291, 362, 264, 11, 291, 458, 11, 264, 3861, 7139, 2435, 1830, 264, 1322, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1637661984092311, "compression_ratio": 1.6043478260869566, "no_speech_prob": 2.5056271624634974e-05}, {"id": 129, "seek": 89080, "start": 890.8, "end": 897.3199999999999, "text": " On the binary compatibility side, the requirements are, you need to understand the L format, share", "tokens": [1282, 264, 17434, 34237, 1252, 11, 264, 7728, 366, 11, 291, 643, 281, 1223, 264, 441, 7877, 11, 2073], "temperature": 0.0, "avg_logprob": -0.1753586170285247, "compression_ratio": 1.553648068669528, "no_speech_prob": 1.1828894457721617e-05}, {"id": 130, "seek": 89080, "start": 897.3199999999999, "end": 904.68, "text": " libraries or binaries, depending on which level you're driving it. And then, since this", "tokens": [15148, 420, 5171, 4889, 11, 5413, 322, 597, 1496, 291, 434, 4840, 309, 13, 400, 550, 11, 1670, 341], "temperature": 0.0, "avg_logprob": -0.1753586170285247, "compression_ratio": 1.553648068669528, "no_speech_prob": 1.1828894457721617e-05}, {"id": 131, "seek": 89080, "start": 904.68, "end": 913.16, "text": " stuff got built for Linux, you must be aware that it can happen that that binary will do", "tokens": [1507, 658, 3094, 337, 18734, 11, 291, 1633, 312, 3650, 300, 309, 393, 1051, 300, 300, 17434, 486, 360], "temperature": 0.0, "avg_logprob": -0.1753586170285247, "compression_ratio": 1.553648068669528, "no_speech_prob": 1.1828894457721617e-05}, {"id": 132, "seek": 89080, "start": 913.16, "end": 917.7199999999999, "text": " directly system calls. So, it's instrumented because it got built together with a libc", "tokens": [3838, 1185, 5498, 13, 407, 11, 309, 311, 7198, 292, 570, 309, 658, 3094, 1214, 365, 257, 22854, 66], "temperature": 0.0, "avg_logprob": -0.1753586170285247, "compression_ratio": 1.553648068669528, "no_speech_prob": 1.1828894457721617e-05}, {"id": 133, "seek": 91772, "start": 917.72, "end": 924.96, "text": " or something like that to do an syscall assembly instruction, which means on our side, we need", "tokens": [420, 746, 411, 300, 281, 360, 364, 262, 749, 45459, 12103, 10951, 11, 597, 1355, 322, 527, 1252, 11, 321, 643], "temperature": 0.0, "avg_logprob": -0.1568902114341999, "compression_ratio": 1.651376146788991, "no_speech_prob": 1.1295906006125733e-05}, {"id": 134, "seek": 91772, "start": 924.96, "end": 930.84, "text": " to be able to handle those system calls as well. And if we, you know, speak about shared", "tokens": [281, 312, 1075, 281, 4813, 729, 1185, 5498, 382, 731, 13, 400, 498, 321, 11, 291, 458, 11, 1710, 466, 5507], "temperature": 0.0, "avg_logprob": -0.1568902114341999, "compression_ratio": 1.651376146788991, "no_speech_prob": 1.1295906006125733e-05}, {"id": 135, "seek": 91772, "start": 930.84, "end": 937.4, "text": " library support, we need to support all this library function or library symbol linking,", "tokens": [6405, 1406, 11, 321, 643, 281, 1406, 439, 341, 6405, 2445, 420, 6405, 5986, 25775, 11], "temperature": 0.0, "avg_logprob": -0.1568902114341999, "compression_ratio": 1.651376146788991, "no_speech_prob": 1.1295906006125733e-05}, {"id": 136, "seek": 91772, "start": 937.4, "end": 943.6800000000001, "text": " actually, right? And additionally, of course, each data that is exchanged, right, needs", "tokens": [767, 11, 558, 30, 400, 43181, 11, 295, 1164, 11, 1184, 1412, 300, 307, 38378, 11, 558, 11, 2203], "temperature": 0.0, "avg_logprob": -0.1568902114341999, "compression_ratio": 1.651376146788991, "no_speech_prob": 1.1295906006125733e-05}, {"id": 137, "seek": 94368, "start": 943.68, "end": 949.56, "text": " to be in the same representation. This means, because this is ABI, right? Now imagine you", "tokens": [281, 312, 294, 264, 912, 10290, 13, 639, 1355, 11, 570, 341, 307, 316, 11291, 11, 558, 30, 823, 3811, 291], "temperature": 0.0, "avg_logprob": -0.1605064594640141, "compression_ratio": 1.7224334600760456, "no_speech_prob": 1.2595967746165115e-05}, {"id": 138, "seek": 94368, "start": 949.56, "end": 955.5999999999999, "text": " have a C struct. And here, it's fine to move some fields around, because if you use the", "tokens": [362, 257, 383, 6594, 13, 400, 510, 11, 309, 311, 2489, 281, 1286, 512, 7909, 926, 11, 570, 498, 291, 764, 264], "temperature": 0.0, "avg_logprob": -0.1605064594640141, "compression_ratio": 1.7224334600760456, "no_speech_prob": 1.2595967746165115e-05}, {"id": 139, "seek": 94368, "start": 955.5999999999999, "end": 959.9599999999999, "text": " same definition for your compilation, it's all fine. You can sort the fields in the struct,", "tokens": [912, 7123, 337, 428, 40261, 11, 309, 311, 439, 2489, 13, 509, 393, 1333, 264, 7909, 294, 264, 6594, 11], "temperature": 0.0, "avg_logprob": -0.1605064594640141, "compression_ratio": 1.7224334600760456, "no_speech_prob": 1.2595967746165115e-05}, {"id": 140, "seek": 94368, "start": 959.9599999999999, "end": 967.0799999999999, "text": " it will all work. Here, you can't because your application that got built externally,", "tokens": [309, 486, 439, 589, 13, 1692, 11, 291, 393, 380, 570, 428, 3861, 300, 658, 3094, 40899, 11], "temperature": 0.0, "avg_logprob": -0.1605064594640141, "compression_ratio": 1.7224334600760456, "no_speech_prob": 1.2595967746165115e-05}, {"id": 141, "seek": 94368, "start": 967.0799999999999, "end": 972.68, "text": " that layout of that struct, that binary layout, that must fit. Otherwise, you will read different", "tokens": [300, 13333, 295, 300, 6594, 11, 300, 17434, 13333, 11, 300, 1633, 3318, 13, 10328, 11, 291, 486, 1401, 819], "temperature": 0.0, "avg_logprob": -0.1605064594640141, "compression_ratio": 1.7224334600760456, "no_speech_prob": 1.2595967746165115e-05}, {"id": 142, "seek": 97268, "start": 972.68, "end": 979.52, "text": " fields, right, obviously. And then for both modes, which is important for us as an operating", "tokens": [7909, 11, 558, 11, 2745, 13, 400, 550, 337, 1293, 14068, 11, 597, 307, 1021, 337, 505, 382, 364, 7447], "temperature": 0.0, "avg_logprob": -0.21028254248879172, "compression_ratio": 1.6574074074074074, "no_speech_prob": 1.4055318388273008e-05}, {"id": 143, "seek": 97268, "start": 979.52, "end": 983.52, "text": " system, we have, of course, also some things that we need to provide to the application,", "tokens": [1185, 11, 321, 362, 11, 295, 1164, 11, 611, 512, 721, 300, 321, 643, 281, 2893, 281, 264, 3861, 11], "temperature": 0.0, "avg_logprob": -0.21028254248879172, "compression_ratio": 1.6574074074074074, "no_speech_prob": 1.4055318388273008e-05}, {"id": 144, "seek": 97268, "start": 983.52, "end": 989.5999999999999, "text": " which are things that the application just requires, because it is that way on Linux,", "tokens": [597, 366, 721, 300, 264, 3861, 445, 7029, 11, 570, 309, 307, 300, 636, 322, 18734, 11], "temperature": 0.0, "avg_logprob": -0.21028254248879172, "compression_ratio": 1.6574074074074074, "no_speech_prob": 1.4055318388273008e-05}, {"id": 145, "seek": 97268, "start": 989.5999999999999, "end": 997.16, "text": " meaning providing a procfs or sysfs entries or files in slash etc. or something like that,", "tokens": [3620, 6530, 257, 9510, 16883, 420, 262, 749, 16883, 23041, 420, 7098, 294, 17330, 5183, 13, 420, 746, 411, 300, 11], "temperature": 0.0, "avg_logprob": -0.21028254248879172, "compression_ratio": 1.6574074074074074, "no_speech_prob": 1.4055318388273008e-05}, {"id": 146, "seek": 99716, "start": 997.16, "end": 1002.9599999999999, "text": " because, you know, they do sometimes silly things just to figure out in which time soon", "tokens": [570, 11, 291, 458, 11, 436, 360, 2171, 11774, 721, 445, 281, 2573, 484, 294, 597, 565, 2321], "temperature": 0.0, "avg_logprob": -0.21128306181534476, "compression_ratio": 1.6175115207373272, "no_speech_prob": 1.805079955374822e-05}, {"id": 147, "seek": 99716, "start": 1002.9599999999999, "end": 1008.76, "text": " they are, so they go to slash etc. and figure out what is configured and also the locales", "tokens": [436, 366, 11, 370, 436, 352, 281, 17330, 5183, 13, 293, 2573, 484, 437, 307, 30538, 293, 611, 264, 2654, 279], "temperature": 0.0, "avg_logprob": -0.21128306181534476, "compression_ratio": 1.6175115207373272, "no_speech_prob": 1.805079955374822e-05}, {"id": 148, "seek": 99716, "start": 1008.76, "end": 1016.88, "text": " and etc. So, I'm closing that, let's say, this high level view up, so that we have the", "tokens": [293, 5183, 13, 407, 11, 286, 478, 10377, 300, 11, 718, 311, 584, 11, 341, 1090, 1496, 1910, 493, 11, 370, 300, 321, 362, 264], "temperature": 0.0, "avg_logprob": -0.21128306181534476, "compression_ratio": 1.6175115207373272, "no_speech_prob": 1.805079955374822e-05}, {"id": 149, "seek": 99716, "start": 1016.88, "end": 1023.92, "text": " full understanding. Let's speak a bit about the pros and cons between these two modes.", "tokens": [1577, 3701, 13, 961, 311, 1710, 257, 857, 466, 264, 6267, 293, 1014, 1296, 613, 732, 14068, 13], "temperature": 0.0, "avg_logprob": -0.21128306181534476, "compression_ratio": 1.6175115207373272, "no_speech_prob": 1.805079955374822e-05}, {"id": 150, "seek": 102392, "start": 1023.92, "end": 1030.36, "text": " The native side, what is really nice here, which is a really interesting pro, so if you", "tokens": [440, 8470, 1252, 11, 437, 307, 534, 1481, 510, 11, 597, 307, 257, 534, 1880, 447, 11, 370, 498, 291], "temperature": 0.0, "avg_logprob": -0.13624525827074807, "compression_ratio": 1.6867469879518073, "no_speech_prob": 7.765108421153855e-06}, {"id": 151, "seek": 102392, "start": 1030.36, "end": 1039.3999999999999, "text": " got everything put together, you have quite of a natural way to change code in the application,", "tokens": [658, 1203, 829, 1214, 11, 291, 362, 1596, 295, 257, 3303, 636, 281, 1319, 3089, 294, 264, 3861, 11], "temperature": 0.0, "avg_logprob": -0.13624525827074807, "compression_ratio": 1.6867469879518073, "no_speech_prob": 7.765108421153855e-06}, {"id": 152, "seek": 102392, "start": 1039.3999999999999, "end": 1047.96, "text": " to change code in the kernel, to make maybe shortcuts between the application kernel interaction", "tokens": [281, 1319, 3089, 294, 264, 28256, 11, 281, 652, 1310, 34620, 1296, 264, 3861, 28256, 9285], "temperature": 0.0, "avg_logprob": -0.13624525827074807, "compression_ratio": 1.6867469879518073, "no_speech_prob": 7.765108421153855e-06}, {"id": 153, "seek": 104796, "start": 1047.96, "end": 1055.24, "text": " and can use that for driving your specialization even further and performance tune your unique", "tokens": [293, 393, 764, 300, 337, 4840, 428, 2121, 2144, 754, 3052, 293, 3389, 10864, 428, 3845], "temperature": 0.0, "avg_logprob": -0.20850622797586832, "compression_ratio": 1.6454545454545455, "no_speech_prob": 1.720575164654292e-05}, {"id": 154, "seek": 104796, "start": 1055.24, "end": 1062.4, "text": " kernel for the application. The disadvantages, you always need the source codes, because", "tokens": [28256, 337, 264, 3861, 13, 440, 37431, 11, 291, 1009, 643, 264, 4009, 14211, 11, 570], "temperature": 0.0, "avg_logprob": -0.20850622797586832, "compression_ratio": 1.6454545454545455, "no_speech_prob": 1.720575164654292e-05}, {"id": 155, "seek": 104796, "start": 1062.4, "end": 1068.56, "text": " we are compiling everything here together, and which is also, let's say, for newcomers", "tokens": [321, 366, 715, 4883, 1203, 510, 1214, 11, 293, 597, 307, 611, 11, 718, 311, 584, 11, 337, 40014, 433], "temperature": 0.0, "avg_logprob": -0.20850622797586832, "compression_ratio": 1.6454545454545455, "no_speech_prob": 1.720575164654292e-05}, {"id": 156, "seek": 104796, "start": 1068.56, "end": 1077.64, "text": " a bit difficult, is if you require them that the application they have, and they say, okay,", "tokens": [257, 857, 2252, 11, 307, 498, 291, 3651, 552, 300, 264, 3861, 436, 362, 11, 293, 436, 584, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.20850622797586832, "compression_ratio": 1.6454545454545455, "no_speech_prob": 1.720575164654292e-05}, {"id": 157, "seek": 107764, "start": 1077.64, "end": 1081.5600000000002, "text": " I have the source codes, and I just run make and then it compiles, but I have the source", "tokens": [286, 362, 264, 4009, 14211, 11, 293, 286, 445, 1190, 652, 293, 550, 309, 715, 4680, 11, 457, 286, 362, 264, 4009], "temperature": 0.0, "avg_logprob": -0.2381153309598882, "compression_ratio": 1.7536945812807883, "no_speech_prob": 3.69467816199176e-05}, {"id": 158, "seek": 107764, "start": 1081.5600000000002, "end": 1086.2, "text": " code, you need to instrument either the build system of the application, as we just saw", "tokens": [3089, 11, 291, 643, 281, 7198, 2139, 264, 1322, 1185, 295, 264, 3861, 11, 382, 321, 445, 1866], "temperature": 0.0, "avg_logprob": -0.2381153309598882, "compression_ratio": 1.7536945812807883, "no_speech_prob": 3.69467816199176e-05}, {"id": 159, "seek": 107764, "start": 1086.2, "end": 1094.68, "text": " with the instrumented build that also ramped it, or you actually, we must say, okay, sorry,", "tokens": [365, 264, 7198, 292, 1322, 300, 611, 12428, 292, 309, 11, 420, 291, 767, 11, 321, 1633, 584, 11, 1392, 11, 2597, 11], "temperature": 0.0, "avg_logprob": -0.2381153309598882, "compression_ratio": 1.7536945812807883, "no_speech_prob": 3.69467816199176e-05}, {"id": 160, "seek": 107764, "start": 1094.68, "end": 1101.16, "text": " you can't use that build system, now you need to mimic and write and Unicraft make file", "tokens": [291, 393, 380, 764, 300, 1322, 1185, 11, 586, 291, 643, 281, 31075, 293, 2464, 293, 1156, 299, 4469, 652, 3991], "temperature": 0.0, "avg_logprob": -0.2381153309598882, "compression_ratio": 1.7536945812807883, "no_speech_prob": 3.69467816199176e-05}, {"id": 161, "seek": 110116, "start": 1101.16, "end": 1110.8400000000001, "text": " equivalent to build your application. So, this is why binary compatibility is actually", "tokens": [10344, 281, 1322, 428, 3861, 13, 407, 11, 341, 307, 983, 17434, 34237, 307, 767], "temperature": 0.0, "avg_logprob": -0.18053142414536588, "compression_ratio": 1.7738693467336684, "no_speech_prob": 1.028497990773758e-05}, {"id": 162, "seek": 110116, "start": 1110.8400000000001, "end": 1115.44, "text": " interesting, really interesting for, let's say, newcomers, because you don't need the", "tokens": [1880, 11, 534, 1880, 337, 11, 718, 311, 584, 11, 40014, 433, 11, 570, 291, 500, 380, 643, 264], "temperature": 0.0, "avg_logprob": -0.18053142414536588, "compression_ratio": 1.7738693467336684, "no_speech_prob": 1.028497990773758e-05}, {"id": 163, "seek": 110116, "start": 1115.44, "end": 1120.52, "text": " source code, they can compile the application that they're interested in, so if they need", "tokens": [4009, 3089, 11, 436, 393, 31413, 264, 3861, 300, 436, 434, 3102, 294, 11, 370, 498, 436, 643], "temperature": 0.0, "avg_logprob": -0.18053142414536588, "compression_ratio": 1.7738693467336684, "no_speech_prob": 1.028497990773758e-05}, {"id": 164, "seek": 110116, "start": 1120.52, "end": 1126.0, "text": " to compile it, let's say, right, the way as they usually do, they don't need to care about", "tokens": [281, 31413, 309, 11, 718, 311, 584, 11, 558, 11, 264, 636, 382, 436, 2673, 360, 11, 436, 500, 380, 643, 281, 1127, 466], "temperature": 0.0, "avg_logprob": -0.18053142414536588, "compression_ratio": 1.7738693467336684, "no_speech_prob": 1.028497990773758e-05}, {"id": 165, "seek": 112600, "start": 1126.0, "end": 1132.04, "text": " Unicraft at all, and normally, also no modifications to the application is needed. Obviously, you", "tokens": [1156, 299, 4469, 412, 439, 11, 293, 5646, 11, 611, 572, 26881, 281, 264, 3861, 307, 2978, 13, 7580, 11, 291], "temperature": 0.0, "avg_logprob": -0.16791769092002612, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.6655945475795306e-05}, {"id": 166, "seek": 112600, "start": 1132.04, "end": 1138.72, "text": " can still do things here, but it's not a requirement.", "tokens": [393, 920, 360, 721, 510, 11, 457, 309, 311, 406, 257, 11695, 13], "temperature": 0.0, "avg_logprob": -0.16791769092002612, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.6655945475795306e-05}, {"id": 167, "seek": 112600, "start": 1138.72, "end": 1144.2, "text": " The risk that we saw by doing the work is, at least for the, let's say, on the unicolonial", "tokens": [440, 3148, 300, 321, 1866, 538, 884, 264, 589, 307, 11, 412, 1935, 337, 264, 11, 718, 311, 584, 11, 322, 264, 517, 299, 38780, 831], "temperature": 0.0, "avg_logprob": -0.16791769092002612, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.6655945475795306e-05}, {"id": 168, "seek": 112600, "start": 1144.2, "end": 1151.04, "text": " side, is that you get into a risk that you need to implement things the way how Linux", "tokens": [1252, 11, 307, 300, 291, 483, 666, 257, 3148, 300, 291, 643, 281, 4445, 721, 264, 636, 577, 18734], "temperature": 0.0, "avg_logprob": -0.16791769092002612, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.6655945475795306e-05}, {"id": 169, "seek": 115104, "start": 1151.04, "end": 1158.48, "text": " does it, and one really stupid example, I get a bit nuts on that, is providing an implementation", "tokens": [775, 309, 11, 293, 472, 534, 6631, 1365, 11, 286, 483, 257, 857, 10483, 322, 300, 11, 307, 6530, 364, 11420], "temperature": 0.0, "avg_logprob": -0.17289027045754826, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.9415681385435164e-05}, {"id": 170, "seek": 115104, "start": 1158.48, "end": 1165.32, "text": " for netlink sockets, because if you have, like, a web application, or, you know, any", "tokens": [337, 2533, 22473, 370, 11984, 11, 570, 498, 291, 362, 11, 411, 11, 257, 3670, 3861, 11, 420, 11, 291, 458, 11, 604], "temperature": 0.0, "avg_logprob": -0.17289027045754826, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.9415681385435164e-05}, {"id": 171, "seek": 115104, "start": 1165.32, "end": 1170.52, "text": " application that does some networking, and that application wants to figure out which", "tokens": [3861, 300, 775, 512, 17985, 11, 293, 300, 3861, 2738, 281, 2573, 484, 597], "temperature": 0.0, "avg_logprob": -0.17289027045754826, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.9415681385435164e-05}, {"id": 172, "seek": 115104, "start": 1170.52, "end": 1174.3999999999999, "text": " network interfaces are configured, and what are the IP addresses there, so it will likely", "tokens": [3209, 28416, 366, 30538, 11, 293, 437, 366, 264, 8671, 16862, 456, 11, 370, 309, 486, 3700], "temperature": 0.0, "avg_logprob": -0.17289027045754826, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.9415681385435164e-05}, {"id": 173, "seek": 117440, "start": 1174.4, "end": 1180.92, "text": " lose the libc function get if address, and that is implemented with a netlink socket,", "tokens": [3624, 264, 22854, 66, 2445, 483, 498, 2985, 11, 293, 300, 307, 12270, 365, 257, 2533, 22473, 19741, 11], "temperature": 0.0, "avg_logprob": -0.14369829134507614, "compression_ratio": 1.6571428571428573, "no_speech_prob": 2.1104273400851525e-05}, {"id": 174, "seek": 117440, "start": 1180.92, "end": 1186.52, "text": " so this goes back here, right, here I can just provide a get if address, which is highly", "tokens": [370, 341, 1709, 646, 510, 11, 558, 11, 510, 286, 393, 445, 2893, 257, 483, 498, 2985, 11, 597, 307, 5405], "temperature": 0.0, "avg_logprob": -0.14369829134507614, "compression_ratio": 1.6571428571428573, "no_speech_prob": 2.1104273400851525e-05}, {"id": 175, "seek": 117440, "start": 1186.52, "end": 1191.72, "text": " optimized in that sense, right, which just returns in that struct all the interfaces,", "tokens": [26941, 294, 300, 2020, 11, 558, 11, 597, 445, 11247, 294, 300, 6594, 439, 264, 28416, 11], "temperature": 0.0, "avg_logprob": -0.14369829134507614, "compression_ratio": 1.6571428571428573, "no_speech_prob": 2.1104273400851525e-05}, {"id": 176, "seek": 117440, "start": 1191.72, "end": 1198.44, "text": " but if I go binary compatible, and if I do it really on an extreme, means, because that", "tokens": [457, 498, 286, 352, 17434, 18218, 11, 293, 498, 286, 360, 309, 534, 322, 364, 8084, 11, 1355, 11, 570, 300], "temperature": 0.0, "avg_logprob": -0.14369829134507614, "compression_ratio": 1.6571428571428573, "no_speech_prob": 2.1104273400851525e-05}, {"id": 177, "seek": 119844, "start": 1198.44, "end": 1205.52, "text": " libc, which is part of your binary here, maybe, opens a socket, which is address family netlink,", "tokens": [22854, 66, 11, 597, 307, 644, 295, 428, 17434, 510, 11, 1310, 11, 9870, 257, 19741, 11, 597, 307, 2985, 1605, 2533, 22473, 11], "temperature": 0.0, "avg_logprob": -0.18227391772800022, "compression_ratio": 1.720472440944882, "no_speech_prob": 1.0609660421323497e-05}, {"id": 178, "seek": 119844, "start": 1205.52, "end": 1211.8, "text": " and starts communicating about a socket with the kernel to figure out the interface addresses,", "tokens": [293, 3719, 17559, 466, 257, 19741, 365, 264, 28256, 281, 2573, 484, 264, 9226, 16862, 11], "temperature": 0.0, "avg_logprob": -0.18227391772800022, "compression_ratio": 1.720472440944882, "no_speech_prob": 1.0609660421323497e-05}, {"id": 179, "seek": 119844, "start": 1211.8, "end": 1216.16, "text": " which can be really silly, right, for a unicolon, right, to do.", "tokens": [597, 393, 312, 534, 11774, 11, 558, 11, 337, 257, 517, 299, 38780, 11, 558, 11, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.18227391772800022, "compression_ratio": 1.720472440944882, "no_speech_prob": 1.0609660421323497e-05}, {"id": 180, "seek": 119844, "start": 1216.16, "end": 1221.48, "text": " And then also, it's, maybe it's less opportunities, but also a bit harder to specialize and tune", "tokens": [400, 550, 611, 11, 309, 311, 11, 1310, 309, 311, 1570, 4786, 11, 457, 611, 257, 857, 6081, 281, 37938, 293, 10864], "temperature": 0.0, "avg_logprob": -0.18227391772800022, "compression_ratio": 1.720472440944882, "no_speech_prob": 1.0609660421323497e-05}, {"id": 181, "seek": 119844, "start": 1221.48, "end": 1226.96, "text": " the kernel application interaction, right, because assuming you don't have access to", "tokens": [264, 28256, 3861, 9285, 11, 558, 11, 570, 11926, 291, 500, 380, 362, 2105, 281], "temperature": 0.0, "avg_logprob": -0.18227391772800022, "compression_ratio": 1.720472440944882, "no_speech_prob": 1.0609660421323497e-05}, {"id": 182, "seek": 122696, "start": 1226.96, "end": 1233.76, "text": " the source code of the application, there's nothing you can do on the application side.", "tokens": [264, 4009, 3089, 295, 264, 3861, 11, 456, 311, 1825, 291, 393, 360, 322, 264, 3861, 1252, 13], "temperature": 0.0, "avg_logprob": -0.21662282943725586, "compression_ratio": 1.64375, "no_speech_prob": 1.0123317224497441e-05}, {"id": 183, "seek": 122696, "start": 1233.76, "end": 1240.4, "text": " So to give you a rough idea, what that means in performance, because at Unicraft, let's", "tokens": [407, 281, 976, 291, 257, 5903, 1558, 11, 437, 300, 1355, 294, 3389, 11, 570, 412, 1156, 299, 4469, 11, 718, 311], "temperature": 0.0, "avg_logprob": -0.21662282943725586, "compression_ratio": 1.64375, "no_speech_prob": 1.0123317224497441e-05}, {"id": 184, "seek": 122696, "start": 1240.4, "end": 1249.04, "text": " say, the second important thing for us is always performance, performance, performance.", "tokens": [584, 11, 264, 1150, 1021, 551, 337, 505, 307, 1009, 3389, 11, 3389, 11, 3389, 13], "temperature": 0.0, "avg_logprob": -0.21662282943725586, "compression_ratio": 1.64375, "no_speech_prob": 1.0123317224497441e-05}, {"id": 185, "seek": 124904, "start": 1249.04, "end": 1257.36, "text": " Here we just show you engine x here compiled as a native version, so meaning it uses the", "tokens": [1692, 321, 445, 855, 291, 2848, 2031, 510, 36548, 382, 257, 8470, 3037, 11, 370, 3620, 309, 4960, 264], "temperature": 0.0, "avg_logprob": -0.1910303269309559, "compression_ratio": 1.6394230769230769, "no_speech_prob": 6.338115781545639e-06}, {"id": 186, "seek": 124904, "start": 1257.36, "end": 1264.24, "text": " Unicraft build system to build the engine x sources versus we run engine x on, we call", "tokens": [1156, 299, 4469, 1322, 1185, 281, 1322, 264, 2848, 2031, 7139, 5717, 321, 1190, 2848, 2031, 322, 11, 321, 818], "temperature": 0.0, "avg_logprob": -0.1910303269309559, "compression_ratio": 1.6394230769230769, "no_speech_prob": 6.338115781545639e-06}, {"id": 187, "seek": 124904, "start": 1264.24, "end": 1272.28, "text": " it elf loader, so this is actually our Unicraft application to load elf binaries.", "tokens": [309, 35565, 3677, 260, 11, 370, 341, 307, 767, 527, 1156, 299, 4469, 3861, 281, 3677, 35565, 5171, 4889, 13], "temperature": 0.0, "avg_logprob": -0.1910303269309559, "compression_ratio": 1.6394230769230769, "no_speech_prob": 6.338115781545639e-06}, {"id": 188, "seek": 124904, "start": 1272.28, "end": 1278.24, "text": " And then a comparison here with a standard Linux, and here this is the same binary.", "tokens": [400, 550, 257, 9660, 510, 365, 257, 3832, 18734, 11, 293, 510, 341, 307, 264, 912, 17434, 13], "temperature": 0.0, "avg_logprob": -0.1910303269309559, "compression_ratio": 1.6394230769230769, "no_speech_prob": 6.338115781545639e-06}, {"id": 189, "seek": 127824, "start": 1278.24, "end": 1285.08, "text": " What that means in performance, so this quick test, we have just the index page, the standard", "tokens": [708, 300, 1355, 294, 3389, 11, 370, 341, 1702, 1500, 11, 321, 362, 445, 264, 8186, 3028, 11, 264, 3832], "temperature": 0.0, "avg_logprob": -0.16275887105656767, "compression_ratio": 1.6497695852534562, "no_speech_prob": 1.8606715457281098e-05}, {"id": 190, "seek": 127824, "start": 1285.08, "end": 1292.24, "text": " default of any engine x installation served, and these are like the performance numbers.", "tokens": [7576, 295, 604, 2848, 2031, 13260, 7584, 11, 293, 613, 366, 411, 264, 3389, 3547, 13], "temperature": 0.0, "avg_logprob": -0.16275887105656767, "compression_ratio": 1.6497695852534562, "no_speech_prob": 1.8606715457281098e-05}, {"id": 191, "seek": 127824, "start": 1292.24, "end": 1299.8, "text": " The takeaway here is, if you just, you know, don't go into any special performance tuning", "tokens": [440, 30681, 510, 307, 11, 498, 291, 445, 11, 291, 458, 11, 500, 380, 352, 666, 604, 2121, 3389, 15164], "temperature": 0.0, "avg_logprob": -0.16275887105656767, "compression_ratio": 1.6497695852534562, "no_speech_prob": 1.8606715457281098e-05}, {"id": 192, "seek": 127824, "start": 1299.8, "end": 1304.84, "text": " yet, and start just, you know, getting the thing compiled and run, you will end up in", "tokens": [1939, 11, 293, 722, 445, 11, 291, 458, 11, 1242, 264, 551, 36548, 293, 1190, 11, 291, 486, 917, 493, 294], "temperature": 0.0, "avg_logprob": -0.16275887105656767, "compression_ratio": 1.6497695852534562, "no_speech_prob": 1.8606715457281098e-05}, {"id": 193, "seek": 130484, "start": 1304.84, "end": 1313.9599999999998, "text": " a similar performance as if you just take the, you know, the elf loader to run that", "tokens": [257, 2531, 3389, 382, 498, 291, 445, 747, 264, 11, 291, 458, 11, 264, 35565, 3677, 260, 281, 1190, 300], "temperature": 0.0, "avg_logprob": -0.13057891845703126, "compression_ratio": 1.5778894472361809, "no_speech_prob": 1.492583305662265e-05}, {"id": 194, "seek": 130484, "start": 1313.9599999999998, "end": 1316.6, "text": " application in binary compatibility mode.", "tokens": [3861, 294, 17434, 34237, 4391, 13], "temperature": 0.0, "avg_logprob": -0.13057891845703126, "compression_ratio": 1.5778894472361809, "no_speech_prob": 1.492583305662265e-05}, {"id": 195, "seek": 130484, "start": 1316.6, "end": 1323.36, "text": " That is interesting because you don't need to see necessarily huge performance drops.", "tokens": [663, 307, 1880, 570, 291, 500, 380, 643, 281, 536, 4725, 2603, 3389, 11438, 13], "temperature": 0.0, "avg_logprob": -0.13057891845703126, "compression_ratio": 1.5778894472361809, "no_speech_prob": 1.492583305662265e-05}, {"id": 196, "seek": 130484, "start": 1323.36, "end": 1328.8, "text": " The only thing that you lose is the potential to further optimize in this mode if you go", "tokens": [440, 787, 551, 300, 291, 3624, 307, 264, 3995, 281, 3052, 19719, 294, 341, 4391, 498, 291, 352], "temperature": 0.0, "avg_logprob": -0.13057891845703126, "compression_ratio": 1.5778894472361809, "no_speech_prob": 1.492583305662265e-05}, {"id": 197, "seek": 130484, "start": 1328.8, "end": 1330.3999999999999, "text": " for this one.", "tokens": [337, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.13057891845703126, "compression_ratio": 1.5778894472361809, "no_speech_prob": 1.492583305662265e-05}, {"id": 198, "seek": 133040, "start": 1330.4, "end": 1340.0, "text": " But the nice thing is you can still see benefits, right, running your application on Unicraft.", "tokens": [583, 264, 1481, 551, 307, 291, 393, 920, 536, 5311, 11, 558, 11, 2614, 428, 3861, 322, 1156, 299, 4469, 13], "temperature": 0.0, "avg_logprob": -0.18992278575897217, "compression_ratio": 1.5637254901960784, "no_speech_prob": 1.1297989658487495e-05}, {"id": 199, "seek": 133040, "start": 1340.0, "end": 1346.72, "text": " And to just give you an impression, so this is here a Go HTTP application, where we go", "tokens": [400, 281, 445, 976, 291, 364, 9995, 11, 370, 341, 307, 510, 257, 1037, 33283, 3861, 11, 689, 321, 352], "temperature": 0.0, "avg_logprob": -0.18992278575897217, "compression_ratio": 1.5637254901960784, "no_speech_prob": 1.1297989658487495e-05}, {"id": 200, "seek": 133040, "start": 1346.72, "end": 1352.3600000000001, "text": " a bit crazy about optimizing and specializing the interaction between the Go application", "tokens": [257, 857, 3219, 466, 40425, 293, 2121, 3319, 264, 9285, 1296, 264, 1037, 3861], "temperature": 0.0, "avg_logprob": -0.18992278575897217, "compression_ratio": 1.5637254901960784, "no_speech_prob": 1.1297989658487495e-05}, {"id": 201, "seek": 133040, "start": 1352.3600000000001, "end": 1356.6000000000001, "text": " and Unicraft, yeah, we can get more out of this.", "tokens": [293, 1156, 299, 4469, 11, 1338, 11, 321, 393, 483, 544, 484, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.18992278575897217, "compression_ratio": 1.5637254901960784, "no_speech_prob": 1.1297989658487495e-05}, {"id": 202, "seek": 135660, "start": 1356.6, "end": 1362.32, "text": " We can really performance tune and squeeze stuff out of it.", "tokens": [492, 393, 534, 3389, 10864, 293, 13578, 1507, 484, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.2165869768928079, "compression_ratio": 1.587378640776699, "no_speech_prob": 1.5678662748541683e-05}, {"id": 203, "seek": 135660, "start": 1362.32, "end": 1372.7199999999998, "text": " Okay, so now in the next slides, I go over how we implement these modes with Unicraft,", "tokens": [1033, 11, 370, 586, 294, 264, 958, 9788, 11, 286, 352, 670, 577, 321, 4445, 613, 14068, 365, 1156, 299, 4469, 11], "temperature": 0.0, "avg_logprob": -0.2165869768928079, "compression_ratio": 1.587378640776699, "no_speech_prob": 1.5678662748541683e-05}, {"id": 204, "seek": 135660, "start": 1372.7199999999998, "end": 1377.48, "text": " because as I said, we don't want to target just one mode, we want to target multiple", "tokens": [570, 382, 286, 848, 11, 321, 500, 380, 528, 281, 3779, 445, 472, 4391, 11, 321, 528, 281, 3779, 3866], "temperature": 0.0, "avg_logprob": -0.2165869768928079, "compression_ratio": 1.587378640776699, "no_speech_prob": 1.5678662748541683e-05}, {"id": 205, "seek": 135660, "start": 1377.48, "end": 1379.48, "text": " modes.", "tokens": [14068, 13], "temperature": 0.0, "avg_logprob": -0.2165869768928079, "compression_ratio": 1.587378640776699, "no_speech_prob": 1.5678662748541683e-05}, {"id": 206, "seek": 135660, "start": 1379.48, "end": 1386.3999999999999, "text": " And it has also some implementation challenges, because as an engineer, you also want to", "tokens": [400, 309, 575, 611, 512, 11420, 4759, 11, 570, 382, 364, 11403, 11, 291, 611, 528, 281], "temperature": 0.0, "avg_logprob": -0.2165869768928079, "compression_ratio": 1.587378640776699, "no_speech_prob": 1.5678662748541683e-05}, {"id": 207, "seek": 138640, "start": 1386.4, "end": 1390.0, "text": " reuse code as much as possible.", "tokens": [26225, 3089, 382, 709, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.17819703591836467, "compression_ratio": 1.4840425531914894, "no_speech_prob": 2.076785676763393e-05}, {"id": 208, "seek": 138640, "start": 1390.0, "end": 1394.76, "text": " So we'll talk about the structure here.", "tokens": [407, 321, 603, 751, 466, 264, 3877, 510, 13], "temperature": 0.0, "avg_logprob": -0.17819703591836467, "compression_ratio": 1.4840425531914894, "no_speech_prob": 2.076785676763393e-05}, {"id": 209, "seek": 138640, "start": 1394.76, "end": 1402.8400000000001, "text": " Okay, so to give you an overview, so this doesn't mean now that these applications run at the", "tokens": [1033, 11, 370, 281, 976, 291, 364, 12492, 11, 370, 341, 1177, 380, 914, 586, 300, 613, 5821, 1190, 412, 264], "temperature": 0.0, "avg_logprob": -0.17819703591836467, "compression_ratio": 1.4840425531914894, "no_speech_prob": 2.076785676763393e-05}, {"id": 210, "seek": 138640, "start": 1402.8400000000001, "end": 1408.52, "text": " same time, it could also be possible, but it's just to show you how the components get involved", "tokens": [912, 565, 11, 309, 727, 611, 312, 1944, 11, 457, 309, 311, 445, 281, 855, 291, 577, 264, 6677, 483, 3288], "temperature": 0.0, "avg_logprob": -0.17819703591836467, "compression_ratio": 1.4840425531914894, "no_speech_prob": 2.076785676763393e-05}, {"id": 211, "seek": 138640, "start": 1408.52, "end": 1410.96, "text": " in our ecosystem.", "tokens": [294, 527, 11311, 13], "temperature": 0.0, "avg_logprob": -0.17819703591836467, "compression_ratio": 1.4840425531914894, "no_speech_prob": 2.076785676763393e-05}, {"id": 212, "seek": 141096, "start": 1410.96, "end": 1421.48, "text": " So if you take just the left part, the native port of application, we settle now on muscle", "tokens": [407, 498, 291, 747, 445, 264, 1411, 644, 11, 264, 8470, 2436, 295, 3861, 11, 321, 11852, 586, 322, 8679], "temperature": 0.0, "avg_logprob": -0.19505995512008667, "compression_ratio": 1.562874251497006, "no_speech_prob": 7.885144441388547e-06}, {"id": 213, "seek": 141096, "start": 1421.48, "end": 1425.8, "text": " to provide all the libc functionality that the application needs.", "tokens": [281, 2893, 439, 264, 22854, 66, 14980, 300, 264, 3861, 2203, 13], "temperature": 0.0, "avg_logprob": -0.19505995512008667, "compression_ratio": 1.562874251497006, "no_speech_prob": 7.885144441388547e-06}, {"id": 214, "seek": 141096, "start": 1425.8, "end": 1432.96, "text": " And we have a library called syscall shim, which is actually the heart of our application", "tokens": [400, 321, 362, 257, 6405, 1219, 262, 749, 45459, 402, 332, 11, 597, 307, 767, 264, 1917, 295, 527, 3861], "temperature": 0.0, "avg_logprob": -0.19505995512008667, "compression_ratio": 1.562874251497006, "no_speech_prob": 7.885144441388547e-06}, {"id": 215, "seek": 141096, "start": 1432.96, "end": 1435.32, "text": " compatibility.", "tokens": [34237, 13], "temperature": 0.0, "avg_logprob": -0.19505995512008667, "compression_ratio": 1.562874251497006, "no_speech_prob": 7.885144441388547e-06}, {"id": 216, "seek": 143532, "start": 1435.32, "end": 1443.28, "text": " And this is actually, you can imagine, this is a bit of a registry where it knows where", "tokens": [400, 341, 307, 767, 11, 291, 393, 3811, 11, 341, 307, 257, 857, 295, 257, 36468, 689, 309, 3255, 689], "temperature": 0.0, "avg_logprob": -0.1881345039190248, "compression_ratio": 1.6442307692307692, "no_speech_prob": 1.044012424245011e-05}, {"id": 217, "seek": 143532, "start": 1443.28, "end": 1447.6799999999998, "text": " in which sub-library a system called handler is implemented.", "tokens": [294, 597, 1422, 12, 75, 6414, 822, 257, 1185, 1219, 41967, 307, 12270, 13], "temperature": 0.0, "avg_logprob": -0.1881345039190248, "compression_ratio": 1.6442307692307692, "no_speech_prob": 1.044012424245011e-05}, {"id": 218, "seek": 143532, "start": 1447.6799999999998, "end": 1451.3999999999999, "text": " And it can forward then the muscle calls to those places.", "tokens": [400, 309, 393, 2128, 550, 264, 8679, 5498, 281, 729, 3190, 13], "temperature": 0.0, "avg_logprob": -0.1881345039190248, "compression_ratio": 1.6442307692307692, "no_speech_prob": 1.044012424245011e-05}, {"id": 219, "seek": 143532, "start": 1451.3999999999999, "end": 1455.6799999999998, "text": " On the binary compatibility side, you have a library called this elf loader, which is", "tokens": [1282, 264, 17434, 34237, 1252, 11, 291, 362, 257, 6405, 1219, 341, 35565, 3677, 260, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.1881345039190248, "compression_ratio": 1.6442307692307692, "no_speech_prob": 1.044012424245011e-05}, {"id": 220, "seek": 143532, "start": 1455.6799999999998, "end": 1460.0, "text": " the library that loads an elf binary into memory.", "tokens": [264, 6405, 300, 12668, 364, 35565, 17434, 666, 4675, 13], "temperature": 0.0, "avg_logprob": -0.1881345039190248, "compression_ratio": 1.6442307692307692, "no_speech_prob": 1.044012424245011e-05}, {"id": 221, "seek": 146000, "start": 1460.0, "end": 1468.0, "text": " And then here's the syscall shim, taking care of handling binary system calls.", "tokens": [400, 550, 510, 311, 264, 262, 749, 45459, 402, 332, 11, 1940, 1127, 295, 13175, 17434, 1185, 5498, 13], "temperature": 0.0, "avg_logprob": -0.1873415501912435, "compression_ratio": 1.5146198830409356, "no_speech_prob": 1.1121218449261505e-05}, {"id": 222, "seek": 146000, "start": 1468.0, "end": 1473.6, "text": " Now I will go into the individual items to show you a bit more zoomed in view what's", "tokens": [823, 286, 486, 352, 666, 264, 2609, 4754, 281, 855, 291, 257, 857, 544, 8863, 292, 294, 1910, 437, 311], "temperature": 0.0, "avg_logprob": -0.1873415501912435, "compression_ratio": 1.5146198830409356, "no_speech_prob": 1.1121218449261505e-05}, {"id": 223, "seek": 146000, "start": 1473.6, "end": 1474.6, "text": " happening there.", "tokens": [2737, 456, 13], "temperature": 0.0, "avg_logprob": -0.1873415501912435, "compression_ratio": 1.5146198830409356, "no_speech_prob": 1.1121218449261505e-05}, {"id": 224, "seek": 146000, "start": 1474.6, "end": 1481.84, "text": " And we, of course, will start with the heart, with the core, the syscall shim.", "tokens": [400, 321, 11, 295, 1164, 11, 486, 722, 365, 264, 1917, 11, 365, 264, 4965, 11, 264, 262, 749, 45459, 402, 332, 13], "temperature": 0.0, "avg_logprob": -0.1873415501912435, "compression_ratio": 1.5146198830409356, "no_speech_prob": 1.1121218449261505e-05}, {"id": 225, "seek": 148184, "start": 1481.84, "end": 1491.1999999999998, "text": " So here we have macros, so when you develop VFS queries, our VFS library actually ported", "tokens": [407, 510, 321, 362, 7912, 2635, 11, 370, 562, 291, 1499, 691, 29318, 24109, 11, 527, 691, 29318, 6405, 767, 2436, 292], "temperature": 0.0, "avg_logprob": -0.23990879456202188, "compression_ratio": 1.614678899082569, "no_speech_prob": 4.708239885076182e-06}, {"id": 226, "seek": 148184, "start": 1491.1999999999998, "end": 1498.6399999999999, "text": " from OSV, or POSIX process, where you do some process functionality, like get PID or", "tokens": [490, 12731, 53, 11, 420, 430, 4367, 21124, 1399, 11, 689, 291, 360, 512, 1399, 14980, 11, 411, 483, 430, 2777, 420], "temperature": 0.0, "avg_logprob": -0.23990879456202188, "compression_ratio": 1.614678899082569, "no_speech_prob": 4.708239885076182e-06}, {"id": 227, "seek": 148184, "start": 1498.6399999999999, "end": 1499.76, "text": " something like that.", "tokens": [746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.23990879456202188, "compression_ratio": 1.614678899082569, "no_speech_prob": 4.708239885076182e-06}, {"id": 228, "seek": 148184, "start": 1499.76, "end": 1505.9199999999998, "text": " We have some macros that help you to define a system call handler.", "tokens": [492, 362, 512, 7912, 2635, 300, 854, 291, 281, 6964, 257, 1185, 818, 41967, 13], "temperature": 0.0, "avg_logprob": -0.23990879456202188, "compression_ratio": 1.614678899082569, "no_speech_prob": 4.708239885076182e-06}, {"id": 229, "seek": 148184, "start": 1505.9199999999998, "end": 1509.72, "text": " And it's really a system call handler, it's just a function that is defined at that point.", "tokens": [400, 309, 311, 534, 257, 1185, 818, 41967, 11, 309, 311, 445, 257, 2445, 300, 307, 7642, 412, 300, 935, 13], "temperature": 0.0, "avg_logprob": -0.23990879456202188, "compression_ratio": 1.614678899082569, "no_speech_prob": 4.708239885076182e-06}, {"id": 230, "seek": 150972, "start": 1509.72, "end": 1515.92, "text": " And you will register this to the syscall shim.", "tokens": [400, 291, 486, 7280, 341, 281, 264, 262, 749, 45459, 402, 332, 13], "temperature": 0.0, "avg_logprob": -0.13323660299811566, "compression_ratio": 1.4883720930232558, "no_speech_prob": 9.812702046474442e-06}, {"id": 231, "seek": 150972, "start": 1515.92, "end": 1523.52, "text": " Then the shim provides you two options, how that system call handler can be reached.", "tokens": [1396, 264, 402, 332, 6417, 291, 732, 3956, 11, 577, 300, 1185, 818, 41967, 393, 312, 6488, 13], "temperature": 0.0, "avg_logprob": -0.13323660299811566, "compression_ratio": 1.4883720930232558, "no_speech_prob": 9.812702046474442e-06}, {"id": 232, "seek": 150972, "start": 1523.52, "end": 1525.08, "text": " One is at compile time.", "tokens": [1485, 307, 412, 31413, 565, 13], "temperature": 0.0, "avg_logprob": -0.13323660299811566, "compression_ratio": 1.4883720930232558, "no_speech_prob": 9.812702046474442e-06}, {"id": 233, "seek": 150972, "start": 1525.08, "end": 1533.64, "text": " This is like macros, macros, and preprocessor, which allows you, when you have a native application", "tokens": [639, 307, 411, 7912, 2635, 11, 7912, 2635, 11, 293, 2666, 340, 25432, 11, 597, 4045, 291, 11, 562, 291, 362, 257, 8470, 3861], "temperature": 0.0, "avg_logprob": -0.13323660299811566, "compression_ratio": 1.4883720930232558, "no_speech_prob": 9.812702046474442e-06}, {"id": 234, "seek": 153364, "start": 1533.64, "end": 1540.1200000000001, "text": " that does, or actually it's on the muscle side, to call a system call, it will replace", "tokens": [300, 775, 11, 420, 767, 309, 311, 322, 264, 8679, 1252, 11, 281, 818, 257, 1185, 818, 11, 309, 486, 7406], "temperature": 0.0, "avg_logprob": -0.15971829857624753, "compression_ratio": 1.5988700564971752, "no_speech_prob": 1.5430201528943144e-05}, {"id": 235, "seek": 153364, "start": 1540.1200000000001, "end": 1546.76, "text": " those calls or will return at compile time the function of that library that implements", "tokens": [729, 5498, 420, 486, 2736, 412, 31413, 565, 264, 2445, 295, 300, 6405, 300, 704, 17988], "temperature": 0.0, "avg_logprob": -0.15971829857624753, "compression_ratio": 1.5988700564971752, "no_speech_prob": 1.5430201528943144e-05}, {"id": 236, "seek": 153364, "start": 1546.76, "end": 1549.6000000000001, "text": " that system call.", "tokens": [300, 1185, 818, 13], "temperature": 0.0, "avg_logprob": -0.15971829857624753, "compression_ratio": 1.5988700564971752, "no_speech_prob": 1.5430201528943144e-05}, {"id": 237, "seek": 153364, "start": 1549.6000000000001, "end": 1558.2800000000002, "text": " Then it also has a runtime handler, which is provided here, which does the typical syscall", "tokens": [1396, 309, 611, 575, 257, 34474, 41967, 11, 597, 307, 5649, 510, 11, 597, 775, 264, 7476, 262, 749, 45459], "temperature": 0.0, "avg_logprob": -0.15971829857624753, "compression_ratio": 1.5988700564971752, "no_speech_prob": 1.5430201528943144e-05}, {"id": 238, "seek": 155828, "start": 1558.28, "end": 1566.76, "text": " chop and running that function behind the scenes.", "tokens": [7931, 293, 2614, 300, 2445, 2261, 264, 8026, 13], "temperature": 0.0, "avg_logprob": -0.2248731202717069, "compression_ratio": 1.5721649484536082, "no_speech_prob": 2.1764461052953266e-05}, {"id": 239, "seek": 155828, "start": 1566.76, "end": 1572.0, "text": " Our aim, as I mentioned, we want to reuse code as much as possible.", "tokens": [2621, 5939, 11, 382, 286, 2835, 11, 321, 528, 281, 26225, 3089, 382, 709, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.2248731202717069, "compression_ratio": 1.5721649484536082, "no_speech_prob": 2.1764461052953266e-05}, {"id": 240, "seek": 155828, "start": 1572.0, "end": 1578.08, "text": " The idea is that we implement that function for that system call just once, and the syscall", "tokens": [440, 1558, 307, 300, 321, 4445, 300, 2445, 337, 300, 1185, 818, 445, 1564, 11, 293, 264, 262, 749, 45459], "temperature": 0.0, "avg_logprob": -0.2248731202717069, "compression_ratio": 1.5721649484536082, "no_speech_prob": 2.1764461052953266e-05}, {"id": 241, "seek": 155828, "start": 1578.08, "end": 1585.8, "text": " shim is helping us, depending on the mode, doing a link, or providing it as binary compileable.", "tokens": [402, 332, 307, 4315, 505, 11, 5413, 322, 264, 4391, 11, 884, 257, 2113, 11, 420, 6530, 309, 382, 17434, 31413, 712, 13], "temperature": 0.0, "avg_logprob": -0.2248731202717069, "compression_ratio": 1.5721649484536082, "no_speech_prob": 2.1764461052953266e-05}, {"id": 242, "seek": 158580, "start": 1585.8, "end": 1591.9199999999998, "text": " So let's go back to the overview, and then you will see it a bit more concrete with muscle,", "tokens": [407, 718, 311, 352, 646, 281, 264, 12492, 11, 293, 550, 291, 486, 536, 309, 257, 857, 544, 9859, 365, 8679, 11], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 243, "seek": 158580, "start": 1591.9199999999998, "end": 1596.48, "text": " but probably I said everything already.", "tokens": [457, 1391, 286, 848, 1203, 1217, 13], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 244, "seek": 158580, "start": 1596.48, "end": 1601.3999999999999, "text": " So we have muscle natively compiled with a Unicraft build system.", "tokens": [407, 321, 362, 8679, 8470, 356, 36548, 365, 257, 1156, 299, 4469, 1322, 1185, 13], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 245, "seek": 158580, "start": 1601.3999999999999, "end": 1605.24, "text": " Now imagine you have the application, you have a write, goes to muscle, and muscle does", "tokens": [823, 3811, 291, 362, 264, 3861, 11, 291, 362, 257, 2464, 11, 1709, 281, 8679, 11, 293, 8679, 775], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 246, "seek": 158580, "start": 1605.24, "end": 1609.6399999999999, "text": " then a UK syscall R write, which is then actually the symbol that is provided by the", "tokens": [550, 257, 7051, 262, 749, 45459, 497, 2464, 11, 597, 307, 550, 767, 264, 5986, 300, 307, 5649, 538, 264], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 247, "seek": 158580, "start": 1609.6399999999999, "end": 1614.12, "text": " actual library that's implementing it.", "tokens": [3539, 6405, 300, 311, 18114, 309, 13], "temperature": 0.0, "avg_logprob": -0.1924110375917875, "compression_ratio": 1.636, "no_speech_prob": 2.073528776236344e-05}, {"id": 248, "seek": 161412, "start": 1614.12, "end": 1621.6799999999998, "text": " And the rewriting happens, as I said, with the macros at compile time in lib muscle.", "tokens": [400, 264, 319, 19868, 2314, 11, 382, 286, 848, 11, 365, 264, 7912, 2635, 412, 31413, 565, 294, 22854, 8679, 13], "temperature": 0.0, "avg_logprob": -0.12247416091291871, "compression_ratio": 1.5754189944134078, "no_speech_prob": 5.335652076610131e-06}, {"id": 249, "seek": 161412, "start": 1621.6799999999998, "end": 1628.28, "text": " So what we did for that is to replace that syscall muscle internal function with our", "tokens": [407, 437, 321, 630, 337, 300, 307, 281, 7406, 300, 262, 749, 45459, 8679, 6920, 2445, 365, 527], "temperature": 0.0, "avg_logprob": -0.12247416091291871, "compression_ratio": 1.5754189944134078, "no_speech_prob": 5.335652076610131e-06}, {"id": 250, "seek": 161412, "start": 1628.28, "end": 1637.7199999999998, "text": " syscall macro, which then kicks in the whole machinery to map a system call request to", "tokens": [262, 749, 45459, 18887, 11, 597, 550, 21293, 294, 264, 1379, 27302, 281, 4471, 257, 1185, 818, 5308, 281], "temperature": 0.0, "avg_logprob": -0.12247416091291871, "compression_ratio": 1.5754189944134078, "no_speech_prob": 5.335652076610131e-06}, {"id": 251, "seek": 161412, "start": 1637.7199999999998, "end": 1639.36, "text": " the direct function call.", "tokens": [264, 2047, 2445, 818, 13], "temperature": 0.0, "avg_logprob": -0.12247416091291871, "compression_ratio": 1.5754189944134078, "no_speech_prob": 5.335652076610131e-06}, {"id": 252, "seek": 163936, "start": 1639.36, "end": 1646.1599999999999, "text": " The thing is that in muscle, not all, but most of the system call requests have a static", "tokens": [440, 551, 307, 300, 294, 8679, 11, 406, 439, 11, 457, 881, 295, 264, 1185, 818, 12475, 362, 257, 13437], "temperature": 0.0, "avg_logprob": -0.22783547580832303, "compression_ratio": 1.775330396475771, "no_speech_prob": 6.337281320156762e-06}, {"id": 253, "seek": 163936, "start": 1646.1599999999999, "end": 1649.36, "text": " argument with the system call number first.", "tokens": [6770, 365, 264, 1185, 818, 1230, 700, 13], "temperature": 0.0, "avg_logprob": -0.22783547580832303, "compression_ratio": 1.775330396475771, "no_speech_prob": 6.337281320156762e-06}, {"id": 254, "seek": 163936, "start": 1649.36, "end": 1655.32, "text": " So this, let's say, write is a libc wrapper, and internally there, they're setting, preparing", "tokens": [407, 341, 11, 718, 311, 584, 11, 2464, 307, 257, 22854, 66, 46906, 11, 293, 19501, 456, 11, 436, 434, 3287, 11, 10075], "temperature": 0.0, "avg_logprob": -0.22783547580832303, "compression_ratio": 1.775330396475771, "no_speech_prob": 6.337281320156762e-06}, {"id": 255, "seek": 163936, "start": 1655.32, "end": 1660.1999999999998, "text": " the arguments, maybe some checks before they go to the kernel, and then they have this", "tokens": [264, 12869, 11, 1310, 512, 13834, 949, 436, 352, 281, 264, 28256, 11, 293, 550, 436, 362, 341], "temperature": 0.0, "avg_logprob": -0.22783547580832303, "compression_ratio": 1.775330396475771, "no_speech_prob": 6.337281320156762e-06}, {"id": 256, "seek": 163936, "start": 1660.1999999999998, "end": 1666.4799999999998, "text": " syscall function with the number of the system call, and then the arguments hand it over.", "tokens": [262, 749, 45459, 2445, 365, 264, 1230, 295, 264, 1185, 818, 11, 293, 550, 264, 12869, 1011, 309, 670, 13], "temperature": 0.0, "avg_logprob": -0.22783547580832303, "compression_ratio": 1.775330396475771, "no_speech_prob": 6.337281320156762e-06}, {"id": 257, "seek": 166648, "start": 1666.48, "end": 1673.52, "text": " And as soon that number is a const static, just written down in your code literally,", "tokens": [400, 382, 2321, 300, 1230, 307, 257, 1817, 13437, 11, 445, 3720, 760, 294, 428, 3089, 3736, 11], "temperature": 0.0, "avg_logprob": -0.14372370554053265, "compression_ratio": 1.6331877729257642, "no_speech_prob": 6.336033038678579e-06}, {"id": 258, "seek": 166648, "start": 1673.52, "end": 1679.04, "text": " we can do a direct mapping so that that write will directly do a function call with UK syscall", "tokens": [321, 393, 360, 257, 2047, 18350, 370, 300, 300, 2464, 486, 3838, 360, 257, 2445, 818, 365, 7051, 262, 749, 45459], "temperature": 0.0, "avg_logprob": -0.14372370554053265, "compression_ratio": 1.6331877729257642, "no_speech_prob": 6.336033038678579e-06}, {"id": 259, "seek": 166648, "start": 1679.04, "end": 1681.56, "text": " R write.", "tokens": [497, 2464, 13], "temperature": 0.0, "avg_logprob": -0.14372370554053265, "compression_ratio": 1.6331877729257642, "no_speech_prob": 6.336033038678579e-06}, {"id": 260, "seek": 166648, "start": 1681.56, "end": 1687.8, "text": " If it's not static, which is really happening only on two, three places, if I remember correctly,", "tokens": [759, 309, 311, 406, 13437, 11, 597, 307, 534, 2737, 787, 322, 732, 11, 1045, 3190, 11, 498, 286, 1604, 8944, 11], "temperature": 0.0, "avg_logprob": -0.14372370554053265, "compression_ratio": 1.6331877729257642, "no_speech_prob": 6.336033038678579e-06}, {"id": 261, "seek": 166648, "start": 1687.8, "end": 1692.64, "text": " then of course we can provide an intermediate function that then does a switch case and", "tokens": [550, 295, 1164, 321, 393, 2893, 364, 19376, 2445, 300, 550, 775, 257, 3679, 1389, 293], "temperature": 0.0, "avg_logprob": -0.14372370554053265, "compression_ratio": 1.6331877729257642, "no_speech_prob": 6.336033038678579e-06}, {"id": 262, "seek": 169264, "start": 1692.64, "end": 1696.96, "text": " jumps then to the actual system call handler.", "tokens": [16704, 550, 281, 264, 3539, 1185, 818, 41967, 13], "temperature": 0.0, "avg_logprob": -0.25742725334545175, "compression_ratio": 1.6462882096069869, "no_speech_prob": 6.637242677243194e-06}, {"id": 263, "seek": 169264, "start": 1696.96, "end": 1703.3600000000001, "text": " And the thing is, since everything is configurable, means I can have a build where VVScore is", "tokens": [400, 264, 551, 307, 11, 1670, 1203, 307, 22192, 712, 11, 1355, 286, 393, 362, 257, 1322, 689, 691, 53, 50, 12352, 307], "temperature": 0.0, "avg_logprob": -0.25742725334545175, "compression_ratio": 1.6462882096069869, "no_speech_prob": 6.637242677243194e-06}, {"id": 264, "seek": 169264, "start": 1703.3600000000001, "end": 1707.24, "text": " not part of the build or POSIX process is not part of the build.", "tokens": [406, 644, 295, 264, 1322, 420, 430, 4367, 21124, 1399, 307, 406, 644, 295, 264, 1322, 13], "temperature": 0.0, "avg_logprob": -0.25742725334545175, "compression_ratio": 1.6462882096069869, "no_speech_prob": 6.637242677243194e-06}, {"id": 265, "seek": 169264, "start": 1707.24, "end": 1713.0800000000002, "text": " Then the syscall scene will automatically, also with all this macro magic that we do,", "tokens": [1396, 264, 262, 749, 45459, 4145, 486, 6772, 11, 611, 365, 439, 341, 18887, 5585, 300, 321, 360, 11], "temperature": 0.0, "avg_logprob": -0.25742725334545175, "compression_ratio": 1.6462882096069869, "no_speech_prob": 6.637242677243194e-06}, {"id": 266, "seek": 169264, "start": 1713.0800000000002, "end": 1719.44, "text": " replace calls to non-existing system call handers with an inosys stop, so that for the", "tokens": [7406, 5498, 281, 2107, 12, 36447, 1185, 818, 1011, 433, 365, 364, 294, 329, 749, 1590, 11, 370, 300, 337, 264], "temperature": 0.0, "avg_logprob": -0.25742725334545175, "compression_ratio": 1.6462882096069869, "no_speech_prob": 6.637242677243194e-06}, {"id": 267, "seek": 171944, "start": 1719.44, "end": 1726.64, "text": " applications look like a function not implemented.", "tokens": [5821, 574, 411, 257, 2445, 406, 12270, 13], "temperature": 0.0, "avg_logprob": -0.239438601902553, "compression_ratio": 1.484375, "no_speech_prob": 1.2594201507454272e-05}, {"id": 268, "seek": 171944, "start": 1726.64, "end": 1731.3200000000002, "text": " And exactly, so at runtime the syscall shim is for that port out of the game, so everything", "tokens": [400, 2293, 11, 370, 412, 34474, 264, 262, 749, 45459, 402, 332, 307, 337, 300, 2436, 484, 295, 264, 1216, 11, 370, 1203], "temperature": 0.0, "avg_logprob": -0.239438601902553, "compression_ratio": 1.484375, "no_speech_prob": 1.2594201507454272e-05}, {"id": 269, "seek": 171944, "start": 1731.3200000000002, "end": 1737.0, "text": " happens at compile time.", "tokens": [2314, 412, 31413, 565, 13], "temperature": 0.0, "avg_logprob": -0.239438601902553, "compression_ratio": 1.484375, "no_speech_prob": 1.2594201507454272e-05}, {"id": 270, "seek": 171944, "start": 1737.0, "end": 1742.04, "text": " So for the binary compatibility side, that's unfortunately a runtime thing, and we have", "tokens": [407, 337, 264, 17434, 34237, 1252, 11, 300, 311, 7015, 257, 34474, 551, 11, 293, 321, 362], "temperature": 0.0, "avg_logprob": -0.239438601902553, "compression_ratio": 1.484375, "no_speech_prob": 1.2594201507454272e-05}, {"id": 271, "seek": 171944, "start": 1742.04, "end": 1744.64, "text": " actually two components here.", "tokens": [767, 732, 6677, 510, 13], "temperature": 0.0, "avg_logprob": -0.239438601902553, "compression_ratio": 1.484375, "no_speech_prob": 1.2594201507454272e-05}, {"id": 272, "seek": 174464, "start": 1744.64, "end": 1750.8400000000001, "text": " As I was mentioning, the ELF loader itself, which loads the ELF application.", "tokens": [1018, 286, 390, 18315, 11, 264, 14426, 37, 3677, 260, 2564, 11, 597, 12668, 264, 14426, 37, 3861, 13], "temperature": 0.0, "avg_logprob": -0.21835886804681076, "compression_ratio": 1.4577114427860696, "no_speech_prob": 1.5677062037866563e-05}, {"id": 273, "seek": 174464, "start": 1750.8400000000001, "end": 1757.1200000000001, "text": " What we support today is static pies, so if you have a static position independent executable", "tokens": [708, 321, 1406, 965, 307, 13437, 29640, 11, 370, 498, 291, 362, 257, 13437, 2535, 6695, 7568, 712], "temperature": 0.0, "avg_logprob": -0.21835886804681076, "compression_ratio": 1.4577114427860696, "no_speech_prob": 1.5677062037866563e-05}, {"id": 274, "seek": 174464, "start": 1757.1200000000001, "end": 1760.0, "text": " compiled, you can run that.", "tokens": [36548, 11, 291, 393, 1190, 300, 13], "temperature": 0.0, "avg_logprob": -0.21835886804681076, "compression_ratio": 1.4577114427860696, "no_speech_prob": 1.5677062037866563e-05}, {"id": 275, "seek": 174464, "start": 1760.0, "end": 1768.3600000000001, "text": " And what also works is using your, let's say, with your libc together provided dynamic linker,", "tokens": [400, 437, 611, 1985, 307, 1228, 428, 11, 718, 311, 584, 11, 365, 428, 22854, 66, 1214, 5649, 8546, 2113, 260, 11], "temperature": 0.0, "avg_logprob": -0.21835886804681076, "compression_ratio": 1.4577114427860696, "no_speech_prob": 1.5677062037866563e-05}, {"id": 276, "seek": 176836, "start": 1768.36, "end": 1774.7199999999998, "text": " meaning if you use glibc with the application, you can use that dynamic linker, so ld.so,", "tokens": [3620, 498, 291, 764, 290, 38270, 66, 365, 264, 3861, 11, 291, 393, 764, 300, 8546, 2113, 260, 11, 370, 287, 67, 13, 539, 11], "temperature": 0.0, "avg_logprob": -0.25448067609001607, "compression_ratio": 1.532967032967033, "no_speech_prob": 1.5174368854786735e-05}, {"id": 277, "seek": 176836, "start": 1774.7199999999998, "end": 1780.36, "text": " and also run dynamically linked applications with that.", "tokens": [293, 611, 1190, 43492, 9408, 5821, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.25448067609001607, "compression_ratio": 1.532967032967033, "no_speech_prob": 1.5174368854786735e-05}, {"id": 278, "seek": 176836, "start": 1780.36, "end": 1785.7199999999998, "text": " What it needs is POSIX M-app as a library, which implements all these M-app, M-unm-app,", "tokens": [708, 309, 2203, 307, 430, 4367, 21124, 376, 12, 1746, 382, 257, 6405, 11, 597, 704, 17988, 439, 613, 376, 12, 1746, 11, 376, 12, 409, 76, 12, 1746, 11], "temperature": 0.0, "avg_logprob": -0.25448067609001607, "compression_ratio": 1.532967032967033, "no_speech_prob": 1.5174368854786735e-05}, {"id": 279, "seek": 176836, "start": 1785.7199999999998, "end": 1791.84, "text": " M-protect functions on the system call there.", "tokens": [376, 12, 33629, 557, 6828, 322, 264, 1185, 818, 456, 13], "temperature": 0.0, "avg_logprob": -0.25448067609001607, "compression_ratio": 1.532967032967033, "no_speech_prob": 1.5174368854786735e-05}, {"id": 280, "seek": 179184, "start": 1791.84, "end": 1800.24, "text": " Then system calls are trapped here in the syscall shim, and yeah, I think as I said that, when", "tokens": [1396, 1185, 5498, 366, 14994, 510, 294, 264, 262, 749, 45459, 402, 332, 11, 293, 1338, 11, 286, 519, 382, 286, 848, 300, 11, 562], "temperature": 0.0, "avg_logprob": -0.1896937977183949, "compression_ratio": 1.7391304347826086, "no_speech_prob": 2.0089049939997494e-05}, {"id": 281, "seek": 179184, "start": 1800.24, "end": 1805.28, "text": " the library is not selected, it's replaced with enosys, so the syscall shim knows which", "tokens": [264, 6405, 307, 406, 8209, 11, 309, 311, 10772, 365, 465, 329, 749, 11, 370, 264, 262, 749, 45459, 402, 332, 3255, 597], "temperature": 0.0, "avg_logprob": -0.1896937977183949, "compression_ratio": 1.7391304347826086, "no_speech_prob": 2.0089049939997494e-05}, {"id": 282, "seek": 179184, "start": 1805.28, "end": 1809.08, "text": " system calls are available, which are not.", "tokens": [1185, 5498, 366, 2435, 11, 597, 366, 406, 13], "temperature": 0.0, "avg_logprob": -0.1896937977183949, "compression_ratio": 1.7391304347826086, "no_speech_prob": 2.0089049939997494e-05}, {"id": 283, "seek": 179184, "start": 1809.08, "end": 1818.12, "text": " Then there's a bit of a specialty for handling a system call, so the system call trap handler.", "tokens": [1396, 456, 311, 257, 857, 295, 257, 22000, 337, 13175, 257, 1185, 818, 11, 370, 264, 1185, 818, 11487, 41967, 13], "temperature": 0.0, "avg_logprob": -0.1896937977183949, "compression_ratio": 1.7391304347826086, "no_speech_prob": 2.0089049939997494e-05}, {"id": 284, "seek": 181812, "start": 1818.12, "end": 1825.84, "text": " So we provide it with a system call shim, and we don't need to do a domain switch, so", "tokens": [407, 321, 2893, 309, 365, 257, 1185, 818, 402, 332, 11, 293, 321, 500, 380, 643, 281, 360, 257, 9274, 3679, 11, 370], "temperature": 0.0, "avg_logprob": -0.27733693539517595, "compression_ratio": 1.800995024875622, "no_speech_prob": 4.995982817490585e-05}, {"id": 285, "seek": 181812, "start": 1825.84, "end": 1835.3999999999999, "text": " we have still a single address space, a single, what's called, I forgot the word, so it's", "tokens": [321, 362, 920, 257, 2167, 2985, 1901, 11, 257, 2167, 11, 437, 311, 1219, 11, 286, 5298, 264, 1349, 11, 370, 309, 311], "temperature": 0.0, "avg_logprob": -0.27733693539517595, "compression_ratio": 1.800995024875622, "no_speech_prob": 4.995982817490585e-05}, {"id": 286, "seek": 181812, "start": 1835.3999999999999, "end": 1841.56, "text": " all kernel privilege, yeah, so we have, it's the same privilege domain, exactly, so we don't", "tokens": [439, 28256, 12122, 11, 1338, 11, 370, 321, 362, 11, 309, 311, 264, 912, 12122, 9274, 11, 2293, 11, 370, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.27733693539517595, "compression_ratio": 1.800995024875622, "no_speech_prob": 4.995982817490585e-05}, {"id": 287, "seek": 181812, "start": 1841.56, "end": 1847.6399999999999, "text": " have a privilege domain switch as well, right, now we have it, good, good, good, if you learn", "tokens": [362, 257, 12122, 9274, 3679, 382, 731, 11, 558, 11, 586, 321, 362, 309, 11, 665, 11, 665, 11, 665, 11, 498, 291, 1466], "temperature": 0.0, "avg_logprob": -0.27733693539517595, "compression_ratio": 1.800995024875622, "no_speech_prob": 4.995982817490585e-05}, {"id": 288, "seek": 184764, "start": 1847.64, "end": 1850.8400000000001, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 289, "seek": 184764, "start": 1850.8400000000001, "end": 1856.4, "text": " But we are slightly in a different environment, I will show you later in the slide exactly", "tokens": [583, 321, 366, 4748, 294, 257, 819, 2823, 11, 286, 486, 855, 291, 1780, 294, 264, 4137, 2293], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 290, "seek": 184764, "start": 1856.4, "end": 1858.48, "text": " what this means.", "tokens": [437, 341, 1355, 13], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 291, "seek": 184764, "start": 1858.48, "end": 1865.5600000000002, "text": " We have some different assumptions that you have on the Linux system call API, which requires", "tokens": [492, 362, 512, 819, 17695, 300, 291, 362, 322, 264, 18734, 1185, 818, 9362, 11, 597, 7029], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 292, "seek": 184764, "start": 1865.5600000000002, "end": 1869.3600000000001, "text": " us to do some extra steps, unfortunately.", "tokens": [505, 281, 360, 512, 2857, 4439, 11, 7015, 13], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 293, "seek": 184764, "start": 1869.3600000000001, "end": 1875.0400000000002, "text": " So the first thing is Linux does not use extended register, or if they use it, they", "tokens": [407, 264, 700, 551, 307, 18734, 775, 406, 764, 10913, 7280, 11, 420, 498, 436, 764, 309, 11, 436], "temperature": 0.0, "avg_logprob": -0.21293329905314617, "compression_ratio": 1.5395348837209302, "no_speech_prob": 1.8335033018956892e-05}, {"id": 294, "seek": 187504, "start": 1875.04, "end": 1883.8, "text": " guard it, meaning extended registers are floating point units, vector units, MMX, SSE, you know.", "tokens": [6290, 309, 11, 3620, 10913, 38351, 366, 12607, 935, 6815, 11, 8062, 6815, 11, 34191, 55, 11, 318, 5879, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.14755325059632998, "compression_ratio": 1.4656862745098038, "no_speech_prob": 1.3408885934040882e-05}, {"id": 295, "seek": 187504, "start": 1883.8, "end": 1888.56, "text": " We do, unfortunately, so we need to save that state, because that's unexpected for an application", "tokens": [492, 360, 11, 7015, 11, 370, 321, 643, 281, 3155, 300, 1785, 11, 570, 300, 311, 13106, 337, 364, 3861], "temperature": 0.0, "avg_logprob": -0.14755325059632998, "compression_ratio": 1.4656862745098038, "no_speech_prob": 1.3408885934040882e-05}, {"id": 296, "seek": 187504, "start": 1888.56, "end": 1894.6399999999999, "text": " that was compiled for Linux before, that these units could screw up when coming back from", "tokens": [300, 390, 36548, 337, 18734, 949, 11, 300, 613, 6815, 727, 5630, 493, 562, 1348, 646, 490], "temperature": 0.0, "avg_logprob": -0.14755325059632998, "compression_ratio": 1.4656862745098038, "no_speech_prob": 1.3408885934040882e-05}, {"id": 297, "seek": 187504, "start": 1894.6399999999999, "end": 1897.56, "text": " a system call.", "tokens": [257, 1185, 818, 13], "temperature": 0.0, "avg_logprob": -0.14755325059632998, "compression_ratio": 1.4656862745098038, "no_speech_prob": 1.3408885934040882e-05}, {"id": 298, "seek": 189756, "start": 1897.56, "end": 1905.04, "text": " And the second thing is we don't have a TLS, you know, in the Linux kernel, but unfortunately", "tokens": [400, 264, 1150, 551, 307, 321, 500, 380, 362, 257, 314, 19198, 11, 291, 458, 11, 294, 264, 18734, 28256, 11, 457, 7015], "temperature": 0.0, "avg_logprob": -0.14295746485392252, "compression_ratio": 1.6683937823834196, "no_speech_prob": 6.233794920262881e-06}, {"id": 299, "seek": 189756, "start": 1905.04, "end": 1911.76, "text": " on Unicraft we have, so we use the same, even unfortunately the same TLS register, so we", "tokens": [322, 1156, 299, 4469, 321, 362, 11, 370, 321, 764, 264, 912, 11, 754, 7015, 264, 912, 314, 19198, 7280, 11, 370, 321], "temperature": 0.0, "avg_logprob": -0.14295746485392252, "compression_ratio": 1.6683937823834196, "no_speech_prob": 6.233794920262881e-06}, {"id": 300, "seek": 189756, "start": 1911.76, "end": 1917.08, "text": " also need to save and restore that so that the application keeps its TLS, and all the", "tokens": [611, 643, 281, 3155, 293, 15227, 300, 370, 300, 264, 3861, 5965, 1080, 314, 19198, 11, 293, 439, 264], "temperature": 0.0, "avg_logprob": -0.14295746485392252, "compression_ratio": 1.6683937823834196, "no_speech_prob": 6.233794920262881e-06}, {"id": 301, "seek": 189756, "start": 1917.08, "end": 1924.56, "text": " Unicraft functions operate on the Unicraft TLS, good.", "tokens": [1156, 299, 4469, 6828, 9651, 322, 264, 1156, 299, 4469, 314, 19198, 11, 665, 13], "temperature": 0.0, "avg_logprob": -0.14295746485392252, "compression_ratio": 1.6683937823834196, "no_speech_prob": 6.233794920262881e-06}, {"id": 302, "seek": 192456, "start": 1924.56, "end": 1930.8799999999999, "text": " So I'll continue and give you some, let's say, lessons learned while implementing all", "tokens": [407, 286, 603, 2354, 293, 976, 291, 512, 11, 718, 311, 584, 11, 8820, 3264, 1339, 18114, 439], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 303, "seek": 192456, "start": 1930.8799999999999, "end": 1931.8799999999999, "text": " these things.", "tokens": [613, 721, 13], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 304, "seek": 192456, "start": 1931.8799999999999, "end": 1933.96, "text": " I would like to give you a short demo.", "tokens": [286, 576, 411, 281, 976, 291, 257, 2099, 10723, 13], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 305, "seek": 192456, "start": 1933.96, "end": 1942.1599999999999, "text": " And then we speak a bit about what was tricky during the implementation and what are our", "tokens": [400, 550, 321, 1710, 257, 857, 466, 437, 390, 12414, 1830, 264, 11420, 293, 437, 366, 527], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 306, "seek": 192456, "start": 1942.1599999999999, "end": 1947.12, "text": " special considerations that we had to do.", "tokens": [2121, 24070, 300, 321, 632, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 307, "seek": 192456, "start": 1947.12, "end": 1951.2, "text": " So then let's hope that this works.", "tokens": [407, 550, 718, 311, 1454, 300, 341, 1985, 13], "temperature": 0.0, "avg_logprob": -0.16535605659967736, "compression_ratio": 1.5803108808290156, "no_speech_prob": 5.6386303185718134e-05}, {"id": 308, "seek": 195120, "start": 1951.2, "end": 1957.8400000000001, "text": " So this is a super fresh demo, don't touch it, you will burn your fingers.", "tokens": [407, 341, 307, 257, 1687, 4451, 10723, 11, 500, 380, 2557, 309, 11, 291, 486, 5064, 428, 7350, 13], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 309, "seek": 195120, "start": 1957.8400000000001, "end": 1962.8, "text": " My colleagues, so thank you, Mark, for getting that work, just, you know, half an hour before", "tokens": [1222, 7734, 11, 370, 1309, 291, 11, 3934, 11, 337, 1242, 300, 589, 11, 445, 11, 291, 458, 11, 1922, 364, 1773, 949], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 310, "seek": 195120, "start": 1962.8, "end": 1963.8, "text": " the talk.", "tokens": [264, 751, 13], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 311, "seek": 195120, "start": 1963.8, "end": 1967.24, "text": " Well, it's the person that no one sees, but that's all the work.", "tokens": [1042, 11, 309, 311, 264, 954, 300, 572, 472, 8194, 11, 457, 300, 311, 439, 264, 589, 13], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 312, "seek": 195120, "start": 1967.24, "end": 1969.04, "text": " Yeah, he's amazing, yeah.", "tokens": [865, 11, 415, 311, 2243, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 313, "seek": 195120, "start": 1969.04, "end": 1975.44, "text": " Okay, so in this demo I have actually NGINX, it's a web server with a standard file system,", "tokens": [1033, 11, 370, 294, 341, 10723, 286, 362, 767, 426, 38, 1464, 55, 11, 309, 311, 257, 3670, 7154, 365, 257, 3832, 3991, 1185, 11], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 314, "seek": 195120, "start": 1975.44, "end": 1977.92, "text": " I'll show you a bit of the files around.", "tokens": [286, 603, 855, 291, 257, 857, 295, 264, 7098, 926, 13], "temperature": 0.0, "avg_logprob": -0.2748063250285823, "compression_ratio": 1.5461538461538462, "no_speech_prob": 4.391541733639315e-05}, {"id": 315, "seek": 197792, "start": 1977.92, "end": 1982.8400000000001, "text": " I have it once compiled natively, and once compiled as a Linux application, we'll run", "tokens": [286, 362, 309, 1564, 36548, 8470, 356, 11, 293, 1564, 36548, 382, 257, 18734, 3861, 11, 321, 603, 1190], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 316, "seek": 197792, "start": 1982.8400000000001, "end": 1987.8400000000001, "text": " it with the Elf loader, and you will see that the result is the same.", "tokens": [309, 365, 264, 2699, 69, 3677, 260, 11, 293, 291, 486, 536, 300, 264, 1874, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 317, "seek": 197792, "start": 1987.8400000000001, "end": 1992.72, "text": " So let's start with the native one.", "tokens": [407, 718, 311, 722, 365, 264, 8470, 472, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 318, "seek": 197792, "start": 1992.72, "end": 1996.64, "text": " So I'm actually already, so probably I need to increase a bit the size, right, that you", "tokens": [407, 286, 478, 767, 1217, 11, 370, 1391, 286, 643, 281, 3488, 257, 857, 264, 2744, 11, 558, 11, 300, 291], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 319, "seek": 197792, "start": 1996.64, "end": 1998.8000000000002, "text": " can read it in the background.", "tokens": [393, 1401, 309, 294, 264, 3678, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 320, "seek": 197792, "start": 1998.8000000000002, "end": 1999.8000000000002, "text": " Is that good?", "tokens": [1119, 300, 665, 30], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 321, "seek": 197792, "start": 1999.8000000000002, "end": 2000.8000000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 322, "seek": 197792, "start": 2000.8000000000002, "end": 2001.8000000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 323, "seek": 197792, "start": 2001.8000000000002, "end": 2005.8400000000001, "text": " Let's do it here too.", "tokens": [961, 311, 360, 309, 510, 886, 13], "temperature": 0.0, "avg_logprob": -0.2453472310846502, "compression_ratio": 1.5911111111111111, "no_speech_prob": 2.1087515051476657e-05}, {"id": 324, "seek": 200584, "start": 2005.84, "end": 2010.84, "text": " So I hope you can, also in the last row you can read, perfect.", "tokens": [407, 286, 1454, 291, 393, 11, 611, 294, 264, 1036, 5386, 291, 393, 1401, 11, 2176, 13], "temperature": 0.0, "avg_logprob": -0.28660712371001373, "compression_ratio": 1.4394904458598725, "no_speech_prob": 7.023620855761692e-05}, {"id": 325, "seek": 200584, "start": 2010.84, "end": 2020.0, "text": " So yeah, you have here the NGINX app checked out.", "tokens": [407, 1338, 11, 291, 362, 510, 264, 426, 38, 1464, 55, 724, 10033, 484, 13], "temperature": 0.0, "avg_logprob": -0.28660712371001373, "compression_ratio": 1.4394904458598725, "no_speech_prob": 7.023620855761692e-05}, {"id": 326, "seek": 200584, "start": 2020.0, "end": 2028.48, "text": " So we have menu config, so you can, oh, this window is somehow wider, no, just one second.", "tokens": [407, 321, 362, 6510, 6662, 11, 370, 291, 393, 11, 1954, 11, 341, 4910, 307, 6063, 11842, 11, 572, 11, 445, 472, 1150, 13], "temperature": 0.0, "avg_logprob": -0.28660712371001373, "compression_ratio": 1.4394904458598725, "no_speech_prob": 7.023620855761692e-05}, {"id": 327, "seek": 200584, "start": 2028.48, "end": 2034.04, "text": " No, it's better, okay.", "tokens": [883, 11, 309, 311, 1101, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.28660712371001373, "compression_ratio": 1.4394904458598725, "no_speech_prob": 7.023620855761692e-05}, {"id": 328, "seek": 203404, "start": 2034.04, "end": 2043.92, "text": " So you see, the application is here as a library here, lib NGINX, and then you have here the", "tokens": [407, 291, 536, 11, 264, 3861, 307, 510, 382, 257, 6405, 510, 11, 22854, 426, 38, 1464, 55, 11, 293, 550, 291, 362, 510, 264], "temperature": 0.0, "avg_logprob": -0.21089461355498343, "compression_ratio": 1.4596273291925466, "no_speech_prob": 2.661276448634453e-05}, {"id": 329, "seek": 203404, "start": 2043.92, "end": 2053.2799999999997, "text": " configuration of all these HTTP modules that NGINX provides, and you can select and choose,", "tokens": [11694, 295, 439, 613, 33283, 16679, 300, 426, 38, 1464, 55, 6417, 11, 293, 291, 393, 3048, 293, 2826, 11], "temperature": 0.0, "avg_logprob": -0.21089461355498343, "compression_ratio": 1.4596273291925466, "no_speech_prob": 2.661276448634453e-05}, {"id": 330, "seek": 203404, "start": 2053.2799999999997, "end": 2058.72, "text": " like this is really the Unicraft way to do things.", "tokens": [411, 341, 307, 534, 264, 1156, 299, 4469, 636, 281, 360, 721, 13], "temperature": 0.0, "avg_logprob": -0.21089461355498343, "compression_ratio": 1.4596273291925466, "no_speech_prob": 2.661276448634453e-05}, {"id": 331, "seek": 205872, "start": 2058.72, "end": 2068.6, "text": " Because it builds a while, and for that my left side is not the fastest, I built it already.", "tokens": [1436, 309, 15182, 257, 1339, 11, 293, 337, 300, 452, 1411, 1252, 307, 406, 264, 14573, 11, 286, 3094, 309, 1217, 13], "temperature": 0.0, "avg_logprob": -0.26047173099241394, "compression_ratio": 1.5027322404371584, "no_speech_prob": 4.5210617827251554e-05}, {"id": 332, "seek": 205872, "start": 2068.6, "end": 2076.8799999999997, "text": " So you see here the result of the build directory, you see each individual library that, because", "tokens": [407, 291, 536, 510, 264, 1874, 295, 264, 1322, 21120, 11, 291, 536, 1184, 2609, 6405, 300, 11, 570], "temperature": 0.0, "avg_logprob": -0.26047173099241394, "compression_ratio": 1.5027322404371584, "no_speech_prob": 4.5210617827251554e-05}, {"id": 333, "seek": 205872, "start": 2076.8799999999997, "end": 2080.7599999999998, "text": " of dependencies, where we're coming in and we're compiled, so like for instance POSIX", "tokens": [295, 36606, 11, 689, 321, 434, 1348, 294, 293, 321, 434, 36548, 11, 370, 411, 337, 5197, 430, 4367, 21124], "temperature": 0.0, "avg_logprob": -0.26047173099241394, "compression_ratio": 1.5027322404371584, "no_speech_prob": 4.5210617827251554e-05}, {"id": 334, "seek": 208076, "start": 2080.76, "end": 2091.5200000000004, "text": " few tags, POSIX socket, RAMFS, which is an in-memory file system, and the, where is it", "tokens": [1326, 18632, 11, 430, 4367, 21124, 19741, 11, 14561, 29318, 11, 597, 307, 364, 294, 12, 17886, 827, 3991, 1185, 11, 293, 264, 11, 689, 307, 309], "temperature": 0.0, "avg_logprob": -0.3734375, "compression_ratio": 1.2962962962962963, "no_speech_prob": 2.4284685423481278e-05}, {"id": 335, "seek": 208076, "start": 2091.5200000000004, "end": 2107.0, "text": " now, the application, here, that's the application image uncompressed, so what I can do.", "tokens": [586, 11, 264, 3861, 11, 510, 11, 300, 311, 264, 3861, 3256, 8585, 79, 3805, 11, 370, 437, 286, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.3734375, "compression_ratio": 1.2962962962962963, "no_speech_prob": 2.4284685423481278e-05}, {"id": 336, "seek": 210700, "start": 2107.0, "end": 2114.68, "text": " So let's see how big it is.", "tokens": [407, 718, 311, 536, 577, 955, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.27534041771521933, "compression_ratio": 1.2751677852348993, "no_speech_prob": 2.2119751520222053e-05}, {"id": 337, "seek": 210700, "start": 2114.68, "end": 2122.24, "text": " So it's here 1.1 megabyte, so this is like a full image of NGINX, including muscle, including", "tokens": [407, 309, 311, 510, 502, 13, 16, 10816, 34529, 11, 370, 341, 307, 411, 257, 1577, 3256, 295, 426, 38, 1464, 55, 11, 3009, 8679, 11, 3009], "temperature": 0.0, "avg_logprob": -0.27534041771521933, "compression_ratio": 1.2751677852348993, "no_speech_prob": 2.2119751520222053e-05}, {"id": 338, "seek": 210700, "start": 2122.24, "end": 2128.96, "text": " all the kernel code and driver to run on a KEMU KVM X-rated machine.", "tokens": [439, 264, 28256, 3089, 293, 6787, 281, 1190, 322, 257, 591, 6683, 52, 591, 53, 44, 1783, 12, 5468, 3479, 13], "temperature": 0.0, "avg_logprob": -0.27534041771521933, "compression_ratio": 1.2751677852348993, "no_speech_prob": 2.2119751520222053e-05}, {"id": 339, "seek": 212896, "start": 2128.96, "end": 2141.84, "text": " Yeah, then let's run it, to see what happens, so exactly it's already up and running, to", "tokens": [865, 11, 550, 718, 311, 1190, 309, 11, 281, 536, 437, 2314, 11, 370, 2293, 309, 311, 1217, 493, 293, 2614, 11, 281], "temperature": 0.0, "avg_logprob": -0.3011959702221315, "compression_ratio": 1.4692737430167597, "no_speech_prob": 4.128730506636202e-05}, {"id": 340, "seek": 212896, "start": 2141.84, "end": 2148.64, "text": " show you, these were roughly the arguments, so we have them in the meantime, because I", "tokens": [855, 291, 11, 613, 645, 9810, 264, 12869, 11, 370, 321, 362, 552, 294, 264, 14991, 11, 570, 286], "temperature": 0.0, "avg_logprob": -0.3011959702221315, "compression_ratio": 1.4692737430167597, "no_speech_prob": 4.128730506636202e-05}, {"id": 341, "seek": 212896, "start": 2148.64, "end": 2155.4, "text": " found KEMU systems sometimes a bit brutal with command line arguments, a wrapper script", "tokens": [1352, 591, 6683, 52, 3652, 2171, 257, 857, 17878, 365, 5622, 1622, 12869, 11, 257, 46906, 5755], "temperature": 0.0, "avg_logprob": -0.3011959702221315, "compression_ratio": 1.4692737430167597, "no_speech_prob": 4.128730506636202e-05}, {"id": 342, "seek": 215540, "start": 2155.4, "end": 2162.48, "text": " that shortens a few things, but in the end, I mean, this is running a KEMU system, and", "tokens": [300, 2099, 694, 257, 1326, 721, 11, 457, 294, 264, 917, 11, 286, 914, 11, 341, 307, 2614, 257, 591, 6683, 52, 1185, 11, 293], "temperature": 0.0, "avg_logprob": -0.22135247410954656, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.7474787455284968e-05}, {"id": 343, "seek": 215540, "start": 2162.48, "end": 2169.64, "text": " then, you know, it's attaching to this virtual bridge, take that kernel image, load that", "tokens": [550, 11, 291, 458, 11, 309, 311, 39074, 281, 341, 6374, 7283, 11, 747, 300, 28256, 3256, 11, 3677, 300], "temperature": 0.0, "avg_logprob": -0.22135247410954656, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.7474787455284968e-05}, {"id": 344, "seek": 215540, "start": 2169.64, "end": 2177.56, "text": " in ID file system, because we reserve a file from that RAMFS, and here's also some parameters", "tokens": [294, 7348, 3991, 1185, 11, 570, 321, 17824, 257, 3991, 490, 300, 14561, 29318, 11, 293, 510, 311, 611, 512, 9834], "temperature": 0.0, "avg_logprob": -0.22135247410954656, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.7474787455284968e-05}, {"id": 345, "seek": 217756, "start": 2177.56, "end": 2186.52, "text": " to set the IP address and that mask for that guest, and here and down there, so we can", "tokens": [281, 992, 264, 8671, 2985, 293, 300, 6094, 337, 300, 8341, 11, 293, 510, 293, 760, 456, 11, 370, 321, 393], "temperature": 0.0, "avg_logprob": -0.21694151560465494, "compression_ratio": 1.6484848484848484, "no_speech_prob": 1.9826775314868428e-05}, {"id": 346, "seek": 217756, "start": 2186.52, "end": 2195.72, "text": " check actually, you see here set IPv4, that's the address where the unicorn is up, and yeah,", "tokens": [1520, 767, 11, 291, 536, 510, 992, 8671, 85, 19, 11, 300, 311, 264, 2985, 689, 264, 28122, 307, 493, 11, 293, 1338, 11], "temperature": 0.0, "avg_logprob": -0.21694151560465494, "compression_ratio": 1.6484848484848484, "no_speech_prob": 1.9826775314868428e-05}, {"id": 347, "seek": 217756, "start": 2195.72, "end": 2204.12, "text": " you see here, with this W get line that, yeah, I get the page surfed, and to prove that this", "tokens": [291, 536, 510, 11, 365, 341, 343, 483, 1622, 300, 11, 1338, 11, 286, 483, 264, 3028, 9684, 292, 11, 293, 281, 7081, 300, 341], "temperature": 0.0, "avg_logprob": -0.21694151560465494, "compression_ratio": 1.6484848484848484, "no_speech_prob": 1.9826775314868428e-05}, {"id": 348, "seek": 220412, "start": 2204.12, "end": 2215.3199999999997, "text": " is real, let us kill this, now the guest is gone, and this is dead, so no response anymore,", "tokens": [307, 957, 11, 718, 505, 1961, 341, 11, 586, 264, 8341, 307, 2780, 11, 293, 341, 307, 3116, 11, 370, 572, 4134, 3602, 11], "temperature": 0.0, "avg_logprob": -0.19525706093266326, "compression_ratio": 1.390625, "no_speech_prob": 3.702521280501969e-05}, {"id": 349, "seek": 220412, "start": 2215.3199999999997, "end": 2223.24, "text": " good, so now, let's go to the ELF loader, which is also treated as an application that", "tokens": [665, 11, 370, 586, 11, 718, 311, 352, 281, 264, 14426, 37, 3677, 260, 11, 597, 307, 611, 8668, 382, 364, 3861, 300], "temperature": 0.0, "avg_logprob": -0.19525706093266326, "compression_ratio": 1.390625, "no_speech_prob": 3.702521280501969e-05}, {"id": 350, "seek": 222324, "start": 2223.24, "end": 2235.64, "text": " can run other applications, also here in the build directly, let's do the same thing, so", "tokens": [393, 1190, 661, 5821, 11, 611, 510, 294, 264, 1322, 3838, 11, 718, 311, 360, 264, 912, 551, 11, 370], "temperature": 0.0, "avg_logprob": -0.2396402848072541, "compression_ratio": 1.5497076023391814, "no_speech_prob": 1.8628037651069462e-05}, {"id": 351, "seek": 222324, "start": 2235.64, "end": 2240.6, "text": " it has also like similar dependencies, of course, it's prepared to run NGINX, so POSIX", "tokens": [309, 575, 611, 411, 2531, 36606, 11, 295, 1164, 11, 309, 311, 4927, 281, 1190, 426, 38, 1464, 55, 11, 370, 430, 4367, 21124], "temperature": 0.0, "avg_logprob": -0.2396402848072541, "compression_ratio": 1.5497076023391814, "no_speech_prob": 1.8628037651069462e-05}, {"id": 352, "seek": 222324, "start": 2240.6, "end": 2249.24, "text": " socket is there, et cetera, et cetera, where's the, here, so here's the image, it's a bit", "tokens": [19741, 307, 456, 11, 1030, 11458, 11, 1030, 11458, 11, 689, 311, 264, 11, 510, 11, 370, 510, 311, 264, 3256, 11, 309, 311, 257, 857], "temperature": 0.0, "avg_logprob": -0.2396402848072541, "compression_ratio": 1.5497076023391814, "no_speech_prob": 1.8628037651069462e-05}, {"id": 353, "seek": 224924, "start": 2249.24, "end": 2255.08, "text": " smaller, it's now 526 kilobytes, which provides your environment to run, and Linux ELF, of", "tokens": [4356, 11, 309, 311, 586, 1025, 10880, 5128, 996, 43673, 11, 597, 6417, 428, 2823, 281, 1190, 11, 293, 18734, 14426, 37, 11, 295], "temperature": 0.0, "avg_logprob": -0.17728262531514072, "compression_ratio": 1.5274261603375527, "no_speech_prob": 1.0610741810523905e-05}, {"id": 354, "seek": 224924, "start": 2255.08, "end": 2260.7599999999998, "text": " course the NGINX image is not included here anymore, right, so that is part of the root", "tokens": [1164, 264, 426, 38, 1464, 55, 3256, 307, 406, 5556, 510, 3602, 11, 558, 11, 370, 300, 307, 644, 295, 264, 5593], "temperature": 0.0, "avg_logprob": -0.17728262531514072, "compression_ratio": 1.5274261603375527, "no_speech_prob": 1.0610741810523905e-05}, {"id": 355, "seek": 224924, "start": 2260.7599999999998, "end": 2270.04, "text": " file system, and if I run this now, so on purpose I enable now some debug output so that you", "tokens": [3991, 1185, 11, 293, 498, 286, 1190, 341, 586, 11, 370, 322, 4334, 286, 9528, 586, 512, 24083, 5598, 370, 300, 291], "temperature": 0.0, "avg_logprob": -0.17728262531514072, "compression_ratio": 1.5274261603375527, "no_speech_prob": 1.0610741810523905e-05}, {"id": 356, "seek": 224924, "start": 2270.04, "end": 2275.08, "text": " see the proof that it does system calls, but if you scroll up, so the initialization phase", "tokens": [536, 264, 8177, 300, 309, 775, 1185, 5498, 11, 457, 498, 291, 11369, 493, 11, 370, 264, 5883, 2144, 5574], "temperature": 0.0, "avg_logprob": -0.17728262531514072, "compression_ratio": 1.5274261603375527, "no_speech_prob": 1.0610741810523905e-05}, {"id": 357, "seek": 227508, "start": 2275.08, "end": 2283.24, "text": " looks a bit different, also sets the IP address, here it's extracting the INIDAR-D, and here", "tokens": [1542, 257, 857, 819, 11, 611, 6352, 264, 8671, 2985, 11, 510, 309, 311, 49844, 264, 6892, 2777, 1899, 12, 35, 11, 293, 510], "temperature": 0.0, "avg_logprob": -0.15901729388114733, "compression_ratio": 1.5397727272727273, "no_speech_prob": 8.933463504945394e-06}, {"id": 358, "seek": 227508, "start": 2283.24, "end": 2291.2799999999997, "text": " it's starting to load the NGINX binary, the Linux binary from the INIDAR-D, and then from", "tokens": [309, 311, 2891, 281, 3677, 264, 426, 38, 1464, 55, 17434, 11, 264, 18734, 17434, 490, 264, 6892, 2777, 1899, 12, 35, 11, 293, 550, 490], "temperature": 0.0, "avg_logprob": -0.15901729388114733, "compression_ratio": 1.5397727272727273, "no_speech_prob": 8.933463504945394e-06}, {"id": 359, "seek": 227508, "start": 2291.2799999999997, "end": 2297.0, "text": " that point on, the ELF loader was jumping into the application, and you see every system", "tokens": [300, 935, 322, 11, 264, 14426, 37, 3677, 260, 390, 11233, 666, 264, 3861, 11, 293, 291, 536, 633, 1185], "temperature": 0.0, "avg_logprob": -0.15901729388114733, "compression_ratio": 1.5397727272727273, "no_speech_prob": 8.933463504945394e-06}, {"id": 360, "seek": 229700, "start": 2297.0, "end": 2305.24, "text": " call that the application was doing, and you can even see that, you know, some stuff, probably", "tokens": [818, 300, 264, 3861, 390, 884, 11, 293, 291, 393, 754, 536, 300, 11, 291, 458, 11, 512, 1507, 11, 1391], "temperature": 0.0, "avg_logprob": -0.19524391024720436, "compression_ratio": 1.6147186147186148, "no_speech_prob": 1.8530661691329442e-05}, {"id": 361, "seek": 229700, "start": 2305.24, "end": 2312.04, "text": " this is a first GWC initialization, here for instance an ETC local time, it's trying to", "tokens": [341, 307, 257, 700, 460, 54, 34, 5883, 2144, 11, 510, 337, 5197, 364, 462, 18238, 2654, 565, 11, 309, 311, 1382, 281], "temperature": 0.0, "avg_logprob": -0.19524391024720436, "compression_ratio": 1.6147186147186148, "no_speech_prob": 1.8530661691329442e-05}, {"id": 362, "seek": 229700, "start": 2312.04, "end": 2317.12, "text": " open and find some configuration, of course we don't have it, we could provide one, but", "tokens": [1269, 293, 915, 512, 11694, 11, 295, 1164, 321, 500, 380, 362, 309, 11, 321, 727, 2893, 472, 11, 457], "temperature": 0.0, "avg_logprob": -0.19524391024720436, "compression_ratio": 1.6147186147186148, "no_speech_prob": 1.8530661691329442e-05}, {"id": 363, "seek": 229700, "start": 2317.12, "end": 2322.72, "text": " it's still fine, it's continuous booting, affinity, we don't have, but whatever, it", "tokens": [309, 311, 920, 2489, 11, 309, 311, 10957, 11450, 278, 11, 39703, 11, 321, 500, 380, 362, 11, 457, 2035, 11, 309], "temperature": 0.0, "avg_logprob": -0.19524391024720436, "compression_ratio": 1.6147186147186148, "no_speech_prob": 1.8530661691329442e-05}, {"id": 364, "seek": 229700, "start": 2322.72, "end": 2323.72, "text": " continues booting.", "tokens": [6515, 11450, 278, 13], "temperature": 0.0, "avg_logprob": -0.19524391024720436, "compression_ratio": 1.6147186147186148, "no_speech_prob": 1.8530661691329442e-05}, {"id": 365, "seek": 232372, "start": 2323.72, "end": 2328.48, "text": " It's quite optimistic actually, but it works, a lot of files, if you look into proxies,", "tokens": [467, 311, 1596, 19397, 767, 11, 457, 309, 1985, 11, 257, 688, 295, 7098, 11, 498, 291, 574, 666, 447, 87, 530, 11], "temperature": 0.0, "avg_logprob": -0.2775147918962006, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.0002519849222153425}, {"id": 366, "seek": 232372, "start": 2328.48, "end": 2331.7999999999997, "text": " get PWName, all those items, it works, it works.", "tokens": [483, 46375, 45, 529, 11, 439, 729, 4754, 11, 309, 1985, 11, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.2775147918962006, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.0002519849222153425}, {"id": 367, "seek": 232372, "start": 2331.7999999999997, "end": 2338.3199999999997, "text": " Yeah, yeah, exactly, and there's tons of Mabs, and you know, EDC password, etc, so those", "tokens": [865, 11, 1338, 11, 2293, 11, 293, 456, 311, 9131, 295, 376, 17243, 11, 293, 291, 458, 11, 18050, 34, 11524, 11, 5183, 11, 370, 729], "temperature": 0.0, "avg_logprob": -0.2775147918962006, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.0002519849222153425}, {"id": 368, "seek": 232372, "start": 2338.3199999999997, "end": 2344.68, "text": " files we had provide, so you get a file script returned back, otherwise it would have stopped,", "tokens": [7098, 321, 632, 2893, 11, 370, 291, 483, 257, 3991, 5755, 8752, 646, 11, 5911, 309, 576, 362, 5936, 11], "temperature": 0.0, "avg_logprob": -0.2775147918962006, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.0002519849222153425}, {"id": 369, "seek": 232372, "start": 2344.68, "end": 2350.68, "text": " etc, and then, you know, configuration, and so forth, and now you should see that some", "tokens": [5183, 11, 293, 550, 11, 291, 458, 11, 11694, 11, 293, 370, 5220, 11, 293, 586, 291, 820, 536, 300, 512], "temperature": 0.0, "avg_logprob": -0.2775147918962006, "compression_ratio": 1.6477732793522266, "no_speech_prob": 0.0002519849222153425}, {"id": 370, "seek": 235068, "start": 2350.68, "end": 2358.9199999999996, "text": " system call happened when I accessed the page, and you saw it happened, index was opened,", "tokens": [1185, 818, 2011, 562, 286, 34211, 264, 3028, 11, 293, 291, 1866, 309, 2011, 11, 8186, 390, 5625, 11], "temperature": 0.0, "avg_logprob": -0.2669240017326511, "compression_ratio": 1.6199095022624435, "no_speech_prob": 7.58663663873449e-05}, {"id": 371, "seek": 235068, "start": 2358.9199999999996, "end": 2365.12, "text": " file script is 7, and here is, there should be a write to the socket, you know, over here", "tokens": [3991, 5755, 307, 1614, 11, 293, 510, 307, 11, 456, 820, 312, 257, 2464, 281, 264, 19741, 11, 291, 458, 11, 670, 510], "temperature": 0.0, "avg_logprob": -0.2669240017326511, "compression_ratio": 1.6199095022624435, "no_speech_prob": 7.58663663873449e-05}, {"id": 372, "seek": 235068, "start": 2365.12, "end": 2371.68, "text": " this is probably the socket number 4, yeah, I mean, you get the impression what's going,", "tokens": [341, 307, 1391, 264, 19741, 1230, 1017, 11, 1338, 11, 286, 914, 11, 291, 483, 264, 9995, 437, 311, 516, 11], "temperature": 0.0, "avg_logprob": -0.2669240017326511, "compression_ratio": 1.6199095022624435, "no_speech_prob": 7.58663663873449e-05}, {"id": 373, "seek": 235068, "start": 2371.68, "end": 2379.08, "text": " what's going on, right, so it's working the same way, okay, how much time do I have left?", "tokens": [437, 311, 516, 322, 11, 558, 11, 370, 309, 311, 1364, 264, 912, 636, 11, 1392, 11, 577, 709, 565, 360, 286, 362, 1411, 30], "temperature": 0.0, "avg_logprob": -0.2669240017326511, "compression_ratio": 1.6199095022624435, "no_speech_prob": 7.58663663873449e-05}, {"id": 374, "seek": 237908, "start": 2379.08, "end": 2381.08, "text": " Five minutes?", "tokens": [9436, 2077, 30], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 375, "seek": 237908, "start": 2381.08, "end": 2382.7599999999998, "text": " Five minutes, okay, then?", "tokens": [9436, 2077, 11, 1392, 11, 550, 30], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 376, "seek": 237908, "start": 2382.7599999999998, "end": 2385.08, "text": " Actually three minutes, just to leave some room for questions.", "tokens": [5135, 1045, 2077, 11, 445, 281, 1856, 512, 1808, 337, 1651, 13], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 377, "seek": 237908, "start": 2385.08, "end": 2393.2, "text": " Yeah, yeah, exactly, okay, so let's get quickly back.", "tokens": [865, 11, 1338, 11, 2293, 11, 1392, 11, 370, 718, 311, 483, 2661, 646, 13], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 378, "seek": 237908, "start": 2393.2, "end": 2402.2, "text": " So we had some learned lessons, learned lessons, for the native mode, I mean, the thing is", "tokens": [407, 321, 632, 512, 3264, 8820, 11, 3264, 8820, 11, 337, 264, 8470, 4391, 11, 286, 914, 11, 264, 551, 307], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 379, "seek": 237908, "start": 2402.2, "end": 2408.2, "text": " we have also this model, like you heard on OSV, we want to use just one libc in our build,", "tokens": [321, 362, 611, 341, 2316, 11, 411, 291, 2198, 322, 12731, 53, 11, 321, 528, 281, 764, 445, 472, 22854, 66, 294, 527, 1322, 11], "temperature": 0.0, "avg_logprob": -0.2548029398180775, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.00019302545115351677}, {"id": 380, "seek": 240820, "start": 2408.2, "end": 2413.16, "text": " right, so meaning all the kernel implementation, and everything that the application needs", "tokens": [558, 11, 370, 3620, 439, 264, 28256, 11420, 11, 293, 1203, 300, 264, 3861, 2203], "temperature": 0.0, "avg_logprob": -0.20137032517441758, "compression_ratio": 1.8313253012048192, "no_speech_prob": 2.7871843485627323e-05}, {"id": 381, "seek": 240820, "start": 2413.16, "end": 2419.8399999999997, "text": " is one libc, we provide multiple implementations of libcs, because muscle might be for some", "tokens": [307, 472, 22854, 66, 11, 321, 2893, 3866, 4445, 763, 295, 22854, 14368, 11, 570, 8679, 1062, 312, 337, 512], "temperature": 0.0, "avg_logprob": -0.20137032517441758, "compression_ratio": 1.8313253012048192, "no_speech_prob": 2.7871843485627323e-05}, {"id": 382, "seek": 240820, "start": 2419.8399999999997, "end": 2425.4399999999996, "text": " use cases too thick, still, or too big, so we have an alternative like no libc, and originally", "tokens": [764, 3331, 886, 5060, 11, 920, 11, 420, 886, 955, 11, 370, 321, 362, 364, 8535, 411, 572, 22854, 66, 11, 293, 7993], "temperature": 0.0, "avg_logprob": -0.20137032517441758, "compression_ratio": 1.8313253012048192, "no_speech_prob": 2.7871843485627323e-05}, {"id": 383, "seek": 240820, "start": 2425.4399999999996, "end": 2432.64, "text": " we had new lib, and we need, so what we want as well in our project is to keep the libc", "tokens": [321, 632, 777, 22854, 11, 293, 321, 643, 11, 370, 437, 321, 528, 382, 731, 294, 527, 1716, 307, 281, 1066, 264, 22854, 66], "temperature": 0.0, "avg_logprob": -0.20137032517441758, "compression_ratio": 1.8313253012048192, "no_speech_prob": 2.7871843485627323e-05}, {"id": 384, "seek": 240820, "start": 2432.64, "end": 2436.96, "text": " as vanilla as possible, like upstream as possible, because we want to keep the maintenance", "tokens": [382, 17528, 382, 1944, 11, 411, 33915, 382, 1944, 11, 570, 321, 528, 281, 1066, 264, 11258], "temperature": 0.0, "avg_logprob": -0.20137032517441758, "compression_ratio": 1.8313253012048192, "no_speech_prob": 2.7871843485627323e-05}, {"id": 385, "seek": 243696, "start": 2436.96, "end": 2441.0, "text": " effort for updating the libc versions low.", "tokens": [4630, 337, 25113, 264, 22854, 66, 9606, 2295, 13], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 386, "seek": 243696, "start": 2441.0, "end": 2447.96, "text": " But these courses then, I mean, just list them, I speak just about one of these items,", "tokens": [583, 613, 7712, 550, 11, 286, 914, 11, 445, 1329, 552, 11, 286, 1710, 445, 466, 472, 295, 613, 4754, 11], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 387, "seek": 243696, "start": 2447.96, "end": 2455.44, "text": " some things that you stumble on, and one was quite interesting, was this get dense 64 issue", "tokens": [512, 721, 300, 291, 41302, 322, 11, 293, 472, 390, 1596, 1880, 11, 390, 341, 483, 18011, 12145, 2734], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 388, "seek": 243696, "start": 2455.44, "end": 2461.16, "text": " that cost us some headache, it was mainly a rust wound fixing it, which caused, or required", "tokens": [300, 2063, 505, 512, 23520, 11, 309, 390, 8704, 257, 15259, 10999, 19442, 309, 11, 597, 7008, 11, 420, 4739], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 389, "seek": 243696, "start": 2461.16, "end": 2462.16, "text": " actually a patch.", "tokens": [767, 257, 9972, 13], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 390, "seek": 243696, "start": 2462.16, "end": 2463.16, "text": " I'm only fixing it.", "tokens": [286, 478, 787, 19442, 309, 13], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 391, "seek": 243696, "start": 2463.16, "end": 2465.68, "text": " Yeah, yeah, required a patch to muscle.", "tokens": [865, 11, 1338, 11, 4739, 257, 9972, 281, 8679, 13], "temperature": 0.0, "avg_logprob": -0.3098621186755952, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.00016809807857498527}, {"id": 392, "seek": 246568, "start": 2465.68, "end": 2472.96, "text": " The thing what happened here is that in this drn.h, muscle is providing an alias, right,", "tokens": [440, 551, 437, 2011, 510, 307, 300, 294, 341, 1224, 77, 13, 71, 11, 8679, 307, 6530, 364, 419, 4609, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.17849556441159592, "compression_ratio": 1.641255605381166, "no_speech_prob": 9.966067409550305e-06}, {"id": 393, "seek": 246568, "start": 2472.96, "end": 2481.0, "text": " to use the non-64 version for get dense, and if it finds code with using get dense 64 because", "tokens": [281, 764, 264, 2107, 12, 19395, 3037, 337, 483, 18011, 11, 293, 498, 309, 10704, 3089, 365, 1228, 483, 18011, 12145, 570], "temperature": 0.0, "avg_logprob": -0.17849556441159592, "compression_ratio": 1.641255605381166, "no_speech_prob": 9.966067409550305e-06}, {"id": 394, "seek": 246568, "start": 2481.0, "end": 2487.3999999999996, "text": " of this large file system support thing that was happening, it maps it to get dense, right.", "tokens": [295, 341, 2416, 3991, 1185, 1406, 551, 300, 390, 2737, 11, 309, 11317, 309, 281, 483, 18011, 11, 558, 13], "temperature": 0.0, "avg_logprob": -0.17849556441159592, "compression_ratio": 1.641255605381166, "no_speech_prob": 9.966067409550305e-06}, {"id": 395, "seek": 246568, "start": 2487.3999999999996, "end": 2492.68, "text": " On the other side, on the VFS core side, so this is the VFS implementation where we provide", "tokens": [1282, 264, 661, 1252, 11, 322, 264, 691, 29318, 4965, 1252, 11, 370, 341, 307, 264, 691, 29318, 11420, 689, 321, 2893], "temperature": 0.0, "avg_logprob": -0.17849556441159592, "compression_ratio": 1.641255605381166, "no_speech_prob": 9.966067409550305e-06}, {"id": 396, "seek": 249268, "start": 2492.68, "end": 2499.64, "text": " the system call, we need to provide both, obviously, we need to provide the non-64 version", "tokens": [264, 1185, 818, 11, 321, 643, 281, 2893, 1293, 11, 2745, 11, 321, 643, 281, 2893, 264, 2107, 12, 19395, 3037], "temperature": 0.0, "avg_logprob": -0.14774764481411184, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.8603206626721658e-05}, {"id": 397, "seek": 249268, "start": 2499.64, "end": 2507.3199999999997, "text": " and the 64 version, and guess what, we include drn because we need a struct definition here.", "tokens": [293, 264, 12145, 3037, 11, 293, 2041, 437, 11, 321, 4090, 1224, 77, 570, 321, 643, 257, 6594, 7123, 510, 13], "temperature": 0.0, "avg_logprob": -0.14774764481411184, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.8603206626721658e-05}, {"id": 398, "seek": 249268, "start": 2507.3199999999997, "end": 2512.8799999999997, "text": " And then you can imagine, so if you're familiar with CMP processor, there's a little hint", "tokens": [400, 550, 291, 393, 3811, 11, 370, 498, 291, 434, 4963, 365, 383, 12224, 15321, 11, 456, 311, 257, 707, 12075], "temperature": 0.0, "avg_logprob": -0.14774764481411184, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.8603206626721658e-05}, {"id": 399, "seek": 249268, "start": 2512.8799999999997, "end": 2518.7599999999998, "text": " with this thunder, of course, I mean, this gets replaced, and then you have two times", "tokens": [365, 341, 19898, 11, 295, 1164, 11, 286, 914, 11, 341, 2170, 10772, 11, 293, 550, 291, 362, 732, 1413], "temperature": 0.0, "avg_logprob": -0.14774764481411184, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.8603206626721658e-05}, {"id": 400, "seek": 251876, "start": 2518.76, "end": 2526.48, "text": " the same symbol, and you're like, what the hell is going on here, all right.", "tokens": [264, 912, 5986, 11, 293, 291, 434, 411, 11, 437, 264, 4921, 307, 516, 322, 510, 11, 439, 558, 13], "temperature": 0.0, "avg_logprob": -0.2457032267252604, "compression_ratio": 1.5024875621890548, "no_speech_prob": 3.265790655859746e-05}, {"id": 401, "seek": 251876, "start": 2526.48, "end": 2532.92, "text": " So let's skip this because of time.", "tokens": [407, 718, 311, 10023, 341, 570, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.2457032267252604, "compression_ratio": 1.5024875621890548, "no_speech_prob": 3.265790655859746e-05}, {"id": 402, "seek": 251876, "start": 2532.92, "end": 2537.84, "text": " Upcoming features, Ruslan was telling a bit already, especially for this topic for application", "tokens": [5858, 6590, 4122, 11, 13155, 8658, 390, 3585, 257, 857, 1217, 11, 2318, 337, 341, 4829, 337, 3861], "temperature": 0.0, "avg_logprob": -0.2457032267252604, "compression_ratio": 1.5024875621890548, "no_speech_prob": 3.265790655859746e-05}, {"id": 403, "seek": 251876, "start": 2537.84, "end": 2542.88, "text": " compatibility, we will further improve it, so this will be now our first release to officially", "tokens": [34237, 11, 321, 486, 3052, 3470, 309, 11, 370, 341, 486, 312, 586, 527, 700, 4374, 281, 12053], "temperature": 0.0, "avg_logprob": -0.2457032267252604, "compression_ratio": 1.5024875621890548, "no_speech_prob": 3.265790655859746e-05}, {"id": 404, "seek": 254288, "start": 2542.88, "end": 2549.36, "text": " release alpha loader and an updated muscle version.", "tokens": [4374, 8961, 3677, 260, 293, 364, 10588, 8679, 3037, 13], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 405, "seek": 254288, "start": 2549.36, "end": 2553.56, "text": " We want to make that more seamless, which requires a bit more under the hood libraries", "tokens": [492, 528, 281, 652, 300, 544, 28677, 11, 597, 7029, 257, 857, 544, 833, 264, 13376, 15148], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 406, "seek": 254288, "start": 2553.56, "end": 2555.6800000000003, "text": " for that support.", "tokens": [337, 300, 1406, 13], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 407, "seek": 254288, "start": 2555.6800000000003, "end": 2561.36, "text": " You should also watch out for features that are coming up for a seamless integration of", "tokens": [509, 820, 611, 1159, 484, 337, 4122, 300, 366, 1348, 493, 337, 257, 28677, 10980, 295], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 408, "seek": 254288, "start": 2561.36, "end": 2564.2400000000002, "text": " Unicraft into your Kubernetes deployment.", "tokens": [1156, 299, 4469, 666, 428, 23145, 19317, 13], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 409, "seek": 254288, "start": 2564.2400000000002, "end": 2565.76, "text": " No question, Alex.", "tokens": [883, 1168, 11, 5202, 13], "temperature": 0.0, "avg_logprob": -0.2070842304745236, "compression_ratio": 1.4878048780487805, "no_speech_prob": 9.538562153466046e-05}, {"id": 410, "seek": 256576, "start": 2565.76, "end": 2574.76, "text": " Brandy Unicraft on your infrastructure provider, for instance, AWS, Google Cloud, et cetera,", "tokens": [11119, 88, 1156, 299, 4469, 322, 428, 6896, 12398, 11, 337, 5197, 11, 17650, 11, 3329, 8061, 11, 1030, 11458, 11], "temperature": 0.0, "avg_logprob": -0.2863487905385543, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0001296654372708872}, {"id": 411, "seek": 256576, "start": 2574.76, "end": 2580.1600000000003, "text": " and automatically packaging of your applications, right, and it would love, or actually all", "tokens": [293, 6772, 16836, 295, 428, 5821, 11, 558, 11, 293, 309, 576, 959, 11, 420, 767, 439], "temperature": 0.0, "avg_logprob": -0.2863487905385543, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0001296654372708872}, {"id": 412, "seek": 256576, "start": 2580.1600000000003, "end": 2585.0400000000004, "text": " of us, everyone within Unicraft will love to hear also your feedback and what you think", "tokens": [295, 505, 11, 1518, 1951, 1156, 299, 4469, 486, 959, 281, 1568, 611, 428, 5824, 293, 437, 291, 519], "temperature": 0.0, "avg_logprob": -0.2863487905385543, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0001296654372708872}, {"id": 413, "seek": 256576, "start": 2585.0400000000004, "end": 2591.1200000000003, "text": " about, you know, turning the cloud with Unicrons to the next level.", "tokens": [466, 11, 291, 458, 11, 6246, 264, 4588, 365, 1156, 299, 13270, 281, 264, 958, 1496, 13], "temperature": 0.0, "avg_logprob": -0.2863487905385543, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0001296654372708872}, {"id": 414, "seek": 256576, "start": 2591.1200000000003, "end": 2594.48, "text": " Yeah, any feedback to me, please send to Simon.", "tokens": [865, 11, 604, 5824, 281, 385, 11, 1767, 2845, 281, 13193, 13], "temperature": 0.0, "avg_logprob": -0.2863487905385543, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0001296654372708872}, {"id": 415, "seek": 259448, "start": 2594.48, "end": 2600.2400000000002, "text": " Right, and these are, again, the project resources, if you're interested, you can just scan the", "tokens": [1779, 11, 293, 613, 366, 11, 797, 11, 264, 1716, 3593, 11, 498, 291, 434, 3102, 11, 291, 393, 445, 11049, 264], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 416, "seek": 259448, "start": 2600.2400000000002, "end": 2601.2400000000002, "text": " QR code.", "tokens": [32784, 3089, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 417, "seek": 259448, "start": 2601.2400000000002, "end": 2602.2400000000002, "text": " I think that's it.", "tokens": [286, 519, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 418, "seek": 259448, "start": 2602.2400000000002, "end": 2603.2400000000002, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 419, "seek": 259448, "start": 2603.2400000000002, "end": 2604.2400000000002, "text": " Thank you, Simon.", "tokens": [1044, 291, 11, 13193, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 420, "seek": 259448, "start": 2604.2400000000002, "end": 2605.2400000000002, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 421, "seek": 259448, "start": 2605.2400000000002, "end": 2613.72, "text": " So we can take a couple of questions, you can also address me to address them to me.", "tokens": [407, 321, 393, 747, 257, 1916, 295, 1651, 11, 291, 393, 611, 2985, 385, 281, 2985, 552, 281, 385, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 422, "seek": 259448, "start": 2613.72, "end": 2620.4, "text": " I mean, that's a joint talk, so any, yeah, please, first here and then on the back.", "tokens": [286, 914, 11, 300, 311, 257, 7225, 751, 11, 370, 604, 11, 1338, 11, 1767, 11, 700, 510, 293, 550, 322, 264, 646, 13], "temperature": 0.0, "avg_logprob": -0.3495192808263442, "compression_ratio": 1.5528846153846154, "no_speech_prob": 0.0017313454300165176}, {"id": 423, "seek": 262040, "start": 2620.4, "end": 2625.32, "text": " Yeah, thanks a lot, both of you, for your talks.", "tokens": [865, 11, 3231, 257, 688, 11, 1293, 295, 291, 11, 337, 428, 6686, 13], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 424, "seek": 262040, "start": 2625.32, "end": 2631.6, "text": " I have a question regarding dynamically linked applications in Linux.", "tokens": [286, 362, 257, 1168, 8595, 43492, 9408, 5821, 294, 18734, 13], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 425, "seek": 262040, "start": 2631.6, "end": 2635.92, "text": " As far as I can see, you only use muscle, and how does this work out if my application", "tokens": [1018, 1400, 382, 286, 393, 536, 11, 291, 787, 764, 8679, 11, 293, 577, 775, 341, 589, 484, 498, 452, 3861], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 426, "seek": 262040, "start": 2635.92, "end": 2641.84, "text": " is linked against GDFC, and I want to run it with my loader, what do I have to do?", "tokens": [307, 9408, 1970, 460, 35, 18671, 11, 293, 286, 528, 281, 1190, 309, 365, 452, 3677, 260, 11, 437, 360, 286, 362, 281, 360, 30], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 427, "seek": 262040, "start": 2641.84, "end": 2647.28, "text": " Because in Linux world, when I link against GDFC and I only have muscle, nothing works.", "tokens": [1436, 294, 18734, 1002, 11, 562, 286, 2113, 1970, 460, 35, 18671, 293, 286, 787, 362, 8679, 11, 1825, 1985, 13], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 428, "seek": 262040, "start": 2647.28, "end": 2648.28, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.2510141796535916, "compression_ratio": 1.6092436974789917, "no_speech_prob": 0.0013636156218126416}, {"id": 429, "seek": 264828, "start": 2648.28, "end": 2653.1600000000003, "text": " So I'm assuming you're speaking about the binary compilability mode.", "tokens": [407, 286, 478, 11926, 291, 434, 4124, 466, 264, 17434, 715, 388, 2310, 4391, 13], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 430, "seek": 264828, "start": 2653.1600000000003, "end": 2657.8, "text": " In the end, what you just need to do is providing the muscle loader, if you have compiled with", "tokens": [682, 264, 917, 11, 437, 291, 445, 643, 281, 360, 307, 6530, 264, 8679, 3677, 260, 11, 498, 291, 362, 36548, 365], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 431, "seek": 264828, "start": 2657.8, "end": 2664.6800000000003, "text": " your application with muscle, or the GDFC loader, and then both works.", "tokens": [428, 3861, 365, 8679, 11, 420, 264, 460, 35, 18671, 3677, 260, 11, 293, 550, 1293, 1985, 13], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 432, "seek": 264828, "start": 2664.6800000000003, "end": 2669.2000000000003, "text": " The things in that setup in memory, there is actually two libcs, there's the libc on", "tokens": [440, 721, 294, 300, 8657, 294, 4675, 11, 456, 307, 767, 732, 22854, 14368, 11, 456, 311, 264, 22854, 66, 322], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 433, "seek": 264828, "start": 2669.2000000000003, "end": 2672.52, "text": " the Unicraft side, and there's the libc with your application.", "tokens": [264, 1156, 299, 4469, 1252, 11, 293, 456, 311, 264, 22854, 66, 365, 428, 3861, 13], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 434, "seek": 264828, "start": 2672.52, "end": 2675.6000000000004, "text": " So that's why it works seamless, actually.", "tokens": [407, 300, 311, 983, 309, 1985, 28677, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 435, "seek": 264828, "start": 2675.6000000000004, "end": 2676.6000000000004, "text": " Okay, thank you.", "tokens": [1033, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.2518291628457666, "compression_ratio": 1.7131782945736433, "no_speech_prob": 2.2429481759900227e-05}, {"id": 436, "seek": 267660, "start": 2676.6, "end": 2685.72, "text": " Just to add to that, when you build your Unicernal for binary compatibility, you don't use muscle.", "tokens": [1449, 281, 909, 281, 300, 11, 562, 291, 1322, 428, 1156, 299, 1248, 304, 337, 17434, 34237, 11, 291, 500, 380, 764, 8679, 13], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 437, "seek": 267660, "start": 2685.72, "end": 2686.72, "text": " You can if you want.", "tokens": [509, 393, 498, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 438, "seek": 267660, "start": 2686.72, "end": 2691.92, "text": " But the app loader doesn't use muscle because the entire libc is provided by the application,", "tokens": [583, 264, 724, 3677, 260, 1177, 380, 764, 8679, 570, 264, 2302, 22854, 66, 307, 5649, 538, 264, 3861, 11], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 439, "seek": 267660, "start": 2691.92, "end": 2696.7599999999998, "text": " either by the application of static binary, or the application plus its libc inside the", "tokens": [2139, 538, 264, 3861, 295, 13437, 17434, 11, 420, 264, 3861, 1804, 1080, 22854, 66, 1854, 264], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 440, "seek": 267660, "start": 2696.7599999999998, "end": 2703.16, "text": " root file system, and it's loaded from there, there's no need to have anything like that.", "tokens": [5593, 3991, 1185, 11, 293, 309, 311, 13210, 490, 456, 11, 456, 311, 572, 643, 281, 362, 1340, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 441, "seek": 267660, "start": 2703.16, "end": 2704.16, "text": " Yeah, please.", "tokens": [865, 11, 1767, 13], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 442, "seek": 267660, "start": 2704.16, "end": 2705.16, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3372176777232777, "compression_ratio": 1.726890756302521, "no_speech_prob": 0.0005828069988638163}, {"id": 443, "seek": 270516, "start": 2705.16, "end": 2707.7599999999998, "text": " So the question is about the API.", "tokens": [407, 264, 1168, 307, 466, 264, 9362, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 444, "seek": 270516, "start": 2707.7599999999998, "end": 2712.12, "text": " You spoke about the POSIX API.", "tokens": [509, 7179, 466, 264, 430, 4367, 21124, 9362, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 445, "seek": 270516, "start": 2712.12, "end": 2720.04, "text": " You also add a diagram showing a direct link to Unicernal.", "tokens": [509, 611, 909, 257, 10686, 4099, 257, 2047, 2113, 281, 1156, 299, 1248, 304, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 446, "seek": 270516, "start": 2720.04, "end": 2726.92, "text": " So the question is, is there some variable next diagram, perhaps?", "tokens": [407, 264, 1168, 307, 11, 307, 456, 512, 7006, 958, 10686, 11, 4317, 30], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 447, "seek": 270516, "start": 2726.92, "end": 2728.96, "text": " One of the next diagram.", "tokens": [1485, 295, 264, 958, 10686, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 448, "seek": 270516, "start": 2728.96, "end": 2729.96, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 449, "seek": 270516, "start": 2729.96, "end": 2733.12, "text": " Is it a variable use case?", "tokens": [1119, 309, 257, 7006, 764, 1389, 30], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 450, "seek": 270516, "start": 2733.12, "end": 2734.12, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.2335797533576871, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.00372591451741755}, {"id": 451, "seek": 273412, "start": 2734.12, "end": 2739.4, "text": " There is a link directly from the native application to the Unicernal.", "tokens": [821, 307, 257, 2113, 3838, 490, 264, 8470, 3861, 281, 264, 1156, 299, 1248, 304, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 452, "seek": 273412, "start": 2739.4, "end": 2740.4, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 453, "seek": 273412, "start": 2740.4, "end": 2741.4, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 454, "seek": 273412, "start": 2741.4, "end": 2743.88, "text": " This is what it shows you is how the calls are going.", "tokens": [639, 307, 437, 309, 3110, 291, 307, 577, 264, 5498, 366, 516, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 455, "seek": 273412, "start": 2743.88, "end": 2749.3599999999997, "text": " It can happen because some system calls don't have a provided libc wrapper.", "tokens": [467, 393, 1051, 570, 512, 1185, 5498, 500, 380, 362, 257, 5649, 22854, 66, 46906, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 456, "seek": 273412, "start": 2749.3599999999997, "end": 2750.3599999999997, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 457, "seek": 273412, "start": 2750.3599999999997, "end": 2752.64, "text": " It's like for that completeness, this error is here.", "tokens": [467, 311, 411, 337, 300, 1557, 15264, 11, 341, 6713, 307, 510, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 458, "seek": 273412, "start": 2752.64, "end": 2757.48, "text": " For instance, the futex call, if you use futex directly from your application, there", "tokens": [1171, 5197, 11, 264, 283, 1169, 87, 818, 11, 498, 291, 764, 283, 1169, 87, 3838, 490, 428, 3861, 11, 456], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 459, "seek": 273412, "start": 2757.48, "end": 2760.12, "text": " is no wrapper function in libc.", "tokens": [307, 572, 46906, 2445, 294, 22854, 66, 13], "temperature": 0.0, "avg_logprob": -0.2382094290404193, "compression_ratio": 1.6652360515021458, "no_speech_prob": 0.0003180451167281717}, {"id": 460, "seek": 276012, "start": 2760.12, "end": 2766.68, "text": " You need to do a system call directly, and you can do that by also using the syscall,", "tokens": [509, 643, 281, 360, 257, 1185, 818, 3838, 11, 293, 291, 393, 360, 300, 538, 611, 1228, 264, 262, 749, 45459, 11], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 461, "seek": 276012, "start": 2766.68, "end": 2772.7599999999998, "text": " macro then, or actually, I mean, the syscall shim will replace that with a direct function", "tokens": [18887, 550, 11, 420, 767, 11, 286, 914, 11, 264, 262, 749, 45459, 402, 332, 486, 7406, 300, 365, 257, 2047, 2445], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 462, "seek": 276012, "start": 2772.7599999999998, "end": 2774.72, "text": " call then to actually POSIX futex.", "tokens": [818, 550, 281, 767, 430, 4367, 21124, 283, 1169, 87, 13], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 463, "seek": 276012, "start": 2774.72, "end": 2784.4, "text": " So is it valuable to have a kind of application that you develop specially for Unicernal and", "tokens": [407, 307, 309, 8263, 281, 362, 257, 733, 295, 3861, 300, 291, 1499, 22549, 337, 1156, 299, 1248, 304, 293], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 464, "seek": 276012, "start": 2784.4, "end": 2786.2799999999997, "text": " the native API?", "tokens": [264, 8470, 9362, 30], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 465, "seek": 276012, "start": 2786.2799999999997, "end": 2787.2799999999997, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 466, "seek": 276012, "start": 2787.2799999999997, "end": 2788.2799999999997, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 467, "seek": 276012, "start": 2788.2799999999997, "end": 2789.2799999999997, "text": " That for sure.", "tokens": [663, 337, 988, 13], "temperature": 0.0, "avg_logprob": -0.28483734130859373, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.862471440806985e-05}, {"id": 468, "seek": 278928, "start": 2789.28, "end": 2794.2400000000002, "text": " In this talk, it's just about how we get application compatibility, even in case you", "tokens": [682, 341, 751, 11, 309, 311, 445, 466, 577, 321, 483, 3861, 34237, 11, 754, 294, 1389, 291], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 469, "seek": 278928, "start": 2794.2400000000002, "end": 2796.2400000000002, "text": " have your application already.", "tokens": [362, 428, 3861, 1217, 13], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 470, "seek": 278928, "start": 2796.2400000000002, "end": 2801.0400000000004, "text": " But if you write it anyway from scratch, I recommend forget everything about POSIX and", "tokens": [583, 498, 291, 2464, 309, 4033, 490, 8459, 11, 286, 2748, 2870, 1203, 466, 430, 4367, 21124, 293], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 471, "seek": 278928, "start": 2801.0400000000004, "end": 2802.36, "text": " speak the native APIs.", "tokens": [1710, 264, 8470, 21445, 13], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 472, "seek": 278928, "start": 2802.36, "end": 2808.96, "text": " You get much more performance and more directly connected to your driver layers and APIs that,", "tokens": [509, 483, 709, 544, 3389, 293, 544, 3838, 4582, 281, 428, 6787, 7914, 293, 21445, 300, 11], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 473, "seek": 278928, "start": 2808.96, "end": 2810.92, "text": " you know, POSIX has some implications, right?", "tokens": [291, 458, 11, 430, 4367, 21124, 575, 512, 16602, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 474, "seek": 278928, "start": 2810.92, "end": 2816.32, "text": " There's a lot of things like read, write, imply there's a mem copy happening.", "tokens": [821, 311, 257, 688, 295, 721, 411, 1401, 11, 2464, 11, 33616, 456, 311, 257, 1334, 5055, 2737, 13], "temperature": 0.0, "avg_logprob": -0.20972543196244672, "compression_ratio": 1.608695652173913, "no_speech_prob": 3.9361166273010895e-05}, {"id": 475, "seek": 281632, "start": 2816.32, "end": 2822.48, "text": " And with these lower level APIs, you can do way quicker transfers, just because you can", "tokens": [400, 365, 613, 3126, 1496, 21445, 11, 291, 393, 360, 636, 16255, 29137, 11, 445, 570, 291, 393], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 476, "seek": 281632, "start": 2822.48, "end": 2823.48, "text": " do a zero copy.", "tokens": [360, 257, 4018, 5055, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 477, "seek": 281632, "start": 2823.48, "end": 2824.48, "text": " For instance.", "tokens": [1171, 5197, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 478, "seek": 281632, "start": 2824.48, "end": 2829.2000000000003, "text": " Maybe even POSIX can be improved using POSIX.", "tokens": [2704, 754, 430, 4367, 21124, 393, 312, 9689, 1228, 430, 4367, 21124, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 479, "seek": 281632, "start": 2829.2000000000003, "end": 2830.2000000000003, "text": " Yeah, sure.", "tokens": [865, 11, 988, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 480, "seek": 281632, "start": 2830.2000000000003, "end": 2831.2000000000003, "text": " Of course.", "tokens": [2720, 1164, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 481, "seek": 281632, "start": 2831.2000000000003, "end": 2832.2000000000003, "text": " Of course.", "tokens": [2720, 1164, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 482, "seek": 281632, "start": 2832.2000000000003, "end": 2833.2000000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 483, "seek": 281632, "start": 2833.2000000000003, "end": 2838.8, "text": " Have you looked into patching the binary to remove the syscall overhead?", "tokens": [3560, 291, 2956, 666, 9972, 278, 264, 17434, 281, 4159, 264, 262, 749, 45459, 19922, 30], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 484, "seek": 281632, "start": 2838.8, "end": 2840.96, "text": " Patching the binary to remove?", "tokens": [430, 29569, 264, 17434, 281, 4159, 30], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 485, "seek": 281632, "start": 2840.96, "end": 2843.6400000000003, "text": " For example, now with the syscalls, do you have to emulate the syscalls?", "tokens": [1171, 1365, 11, 586, 365, 264, 262, 749, 66, 39655, 11, 360, 291, 362, 281, 45497, 264, 262, 749, 66, 39655, 30], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 486, "seek": 281632, "start": 2843.6400000000003, "end": 2845.8, "text": " Have you looked into patching the binary itself?", "tokens": [3560, 291, 2956, 666, 9972, 278, 264, 17434, 2564, 30], "temperature": 0.0, "avg_logprob": -0.25909045248320606, "compression_ratio": 1.8101265822784811, "no_speech_prob": 9.505850175628439e-05}, {"id": 487, "seek": 284580, "start": 2845.8, "end": 2846.8, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 488, "seek": 284580, "start": 2846.8, "end": 2850.6800000000003, "text": " Instead of doing it at runtime, handling the syscalls at runtime?", "tokens": [7156, 295, 884, 309, 412, 34474, 11, 13175, 264, 262, 749, 66, 39655, 412, 34474, 30], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 489, "seek": 284580, "start": 2850.6800000000003, "end": 2851.6800000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 490, "seek": 284580, "start": 2851.6800000000003, "end": 2855.48, "text": " Let's say at least we thought about that, but we didn't do it.", "tokens": [961, 311, 584, 412, 1935, 321, 1194, 466, 300, 11, 457, 321, 994, 380, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 491, "seek": 284580, "start": 2855.48, "end": 2859.5600000000004, "text": " I mean, the hardware talks, that is the other, exactly.", "tokens": [286, 914, 11, 264, 8837, 6686, 11, 300, 307, 264, 661, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 492, "seek": 284580, "start": 2859.5600000000004, "end": 2860.5600000000004, "text": " He's sitting in front of it.", "tokens": [634, 311, 3798, 294, 1868, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 493, "seek": 284580, "start": 2860.5600000000004, "end": 2865.2400000000002, "text": " They were doing some experiments with that, that works too, so you can patch it.", "tokens": [814, 645, 884, 512, 12050, 365, 300, 11, 300, 1985, 886, 11, 370, 291, 393, 9972, 309, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 494, "seek": 284580, "start": 2865.2400000000002, "end": 2870.48, "text": " But yeah, I mean, just we didn't do it.", "tokens": [583, 1338, 11, 286, 914, 11, 445, 321, 994, 380, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 495, "seek": 284580, "start": 2870.48, "end": 2871.8, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.34635584694998606, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0009194992017000914}, {"id": 496, "seek": 287180, "start": 2871.8, "end": 2883.76, "text": " In regards to memory usage, obviously Unicernel lowers it, but what if I ran multiple Unicernels", "tokens": [682, 14258, 281, 4675, 14924, 11, 2745, 1156, 299, 1248, 338, 44936, 309, 11, 457, 437, 498, 286, 5872, 3866, 1156, 299, 1248, 1625], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 497, "seek": 287180, "start": 2883.76, "end": 2891.1600000000003, "text": " and multiple VMs, how do you support membalooning or something like that, or is it like just", "tokens": [293, 3866, 18038, 82, 11, 577, 360, 291, 1406, 1334, 2645, 4106, 278, 420, 746, 411, 300, 11, 420, 307, 309, 411, 445], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 498, "seek": 287180, "start": 2891.1600000000003, "end": 2892.1600000000003, "text": " over provision?", "tokens": [670, 17225, 30], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 499, "seek": 287180, "start": 2892.1600000000003, "end": 2893.1600000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 500, "seek": 287180, "start": 2893.1600000000003, "end": 2898.0800000000004, "text": " I mean, the idea is to have membalooning, but it's not upstream yet.", "tokens": [286, 914, 11, 264, 1558, 307, 281, 362, 1334, 2645, 4106, 278, 11, 457, 309, 311, 406, 33915, 1939, 13], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 501, "seek": 287180, "start": 2898.0800000000004, "end": 2899.0800000000004, "text": " Of course.", "tokens": [2720, 1164, 13], "temperature": 0.0, "avg_logprob": -0.2359591709094101, "compression_ratio": 1.5, "no_speech_prob": 0.00019014885765500367}, {"id": 502, "seek": 289908, "start": 2899.08, "end": 2902.44, "text": " There's also a really interesting research project, maybe I should mention, that works", "tokens": [821, 311, 611, 257, 534, 1880, 2132, 1716, 11, 1310, 286, 820, 2152, 11, 300, 1985], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 503, "seek": 289908, "start": 2902.44, "end": 2906.36, "text": " on memory duplication.", "tokens": [322, 4675, 17154, 399, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 504, "seek": 289908, "start": 2906.36, "end": 2912.08, "text": " So if you run the same Unicernel, the same like 100 times, you can share VM memory pages", "tokens": [407, 498, 291, 1190, 264, 912, 1156, 299, 1248, 338, 11, 264, 912, 411, 2319, 1413, 11, 291, 393, 2073, 18038, 4675, 7183], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 505, "seek": 289908, "start": 2912.08, "end": 2915.68, "text": " on the hypervisor side, but you need hypervisor support for that.", "tokens": [322, 264, 9848, 16457, 1252, 11, 457, 291, 643, 9848, 16457, 1406, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 506, "seek": 289908, "start": 2915.68, "end": 2916.68, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 507, "seek": 289908, "start": 2916.68, "end": 2917.68, "text": " Thank you so much, Simon.", "tokens": [1044, 291, 370, 709, 11, 13193, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 508, "seek": 289908, "start": 2917.68, "end": 2918.68, "text": " Let's end it here.", "tokens": [961, 311, 917, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 509, "seek": 289908, "start": 2918.68, "end": 2919.68, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 510, "seek": 289908, "start": 2919.68, "end": 2920.68, "text": " We're going to ask.", "tokens": [492, 434, 516, 281, 1029, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 511, "seek": 289908, "start": 2920.68, "end": 2921.68, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 512, "seek": 289908, "start": 2921.68, "end": 2922.68, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 513, "seek": 289908, "start": 2922.68, "end": 2923.68, "text": " And get some speakers.", "tokens": [400, 483, 512, 9518, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 514, "seek": 289908, "start": 2923.68, "end": 2928.48, "text": " Anastasis and Babis for the next talk on VXL, so please.", "tokens": [1107, 525, 26632, 293, 15820, 271, 337, 264, 958, 751, 322, 691, 55, 43, 11, 370, 1767, 13], "temperature": 0.0, "avg_logprob": -0.2870324684755646, "compression_ratio": 1.5575539568345325, "no_speech_prob": 0.0002552832302171737}, {"id": 515, "seek": 292848, "start": 2928.48, "end": 2929.48, "text": " So please get some stickers.", "tokens": [407, 1767, 483, 512, 21019, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 516, "seek": 292848, "start": 2929.48, "end": 2930.48, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 517, "seek": 292848, "start": 2930.48, "end": 2931.48, "text": " Stickers.", "tokens": [22744, 433, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 518, "seek": 292848, "start": 2931.48, "end": 2932.48, "text": " They are free.", "tokens": [814, 366, 1737, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 519, "seek": 292848, "start": 2932.48, "end": 2934.48, "text": " Don't have to pay for it.", "tokens": [1468, 380, 362, 281, 1689, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 520, "seek": 292848, "start": 2934.48, "end": 2935.48, "text": " For now.", "tokens": [1171, 586, 13], "temperature": 0.0, "avg_logprob": -0.24808311462402344, "compression_ratio": 1.1320754716981132, "no_speech_prob": 0.0264144204556942}, {"id": 521, "seek": 293548, "start": 2935.48, "end": 2959.48, "text": " VXL 100 Euro each.", "tokens": [691, 55, 43, 2319, 3010, 1184, 13], "temperature": 0.0, "avg_logprob": -0.884804985739968, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.026781072840094566}], "language": "en"}