{"text": " Thank you, so hi, my name is Drew and I'd like to talk to you today about a new microkernel I've been working on called Helios. For context, I work at a place called Source Set and I'm the project lead for a new programming language called Hair and I've done many other projects but that's what's relevant for today. This is a new microkernel. It's inspired a lot by SEL4 but it differs in many ways. It's written in this hair programming language that I mentioned and one of the main motivations for it is to find out if we can use the hair programming language to write microkernels in or any kind of kernel really. Presently it runs on X8664 and ARM64 and we're thinking about risk 5 in the foreseeable future. In terms of the footprint of this kernel, it's pretty small. The portable code is about 8,500 lines of code. Each architecture adds about another 3,000 lines of code, all hair code and then add on top of that the boot loaders which are also written in hair and it's a pretty small footprint. We've been working on it for about nine months now and we use the GPL3 license. So again, about nine months of progress so far. Where do we stand in terms of functionality is about here. We have capability-based security and the capabilities do work similar to what SEL4 does and also similar to SEL4 we have inter-process communication working using endpoints and notifications, very similar to SEL4 with some notable differences. We have scheduler work, we're in user space and we have multi-processing but we don't have symmetric multi-processing, we have only one core at the moment but we'll do SMP fairly soon. We also have all of the necessary rigging in place for drivers in user space so we have access to ports on X86 and we have memory and map.io support as well as IRQs are rigged up. And for booting up the kernel, we currently support EFI on ARM and multi-boot on X86. We'll be doing EFI on X86 as well in the future and our plan is to also do EFI on risk 5. So we'll use EFI as the default approach for booting Helios in the future. But why should we be thinking about writing a new macro kernel or a new kernel of any sort? I imagine that for this particular dev room I don't need to give too many reasons but for the sake of anybody who's maybe watching online, the first point is pretty obvious. It's really fun to write kernels and that's kind of reason enough so I'm having a great time working on it and that's enough for me. But also, importantly, we've been working on this programming language here for about three years now and it's a systems programming language and one of our goals is to be able to write things like kernels and so in order to prove that we have achieved this goal, we have to write a kernel with it and so Helios is that kernel. I also am a big fan of SCL4's design but I also have some criticisms of it and I'm curious if we do a kernel which is inspired by SCL4, can we make some improvements on its design? And if we were to be particularly ambitious, could we perhaps do better than Linux? We'll see. I should also point out that this slide deck is going to cover a lot of details which maybe will seem redundant to people who are already familiar with the design of SCL4 and that could be a problem with this audience but please bear with me while I explain things that you already understand at some point in the future. So the hair programming language, this is the pitch from the website. I won't read it out to you but essentially it's a very simple language which is very close to C in terms of design but with a lot of benefit of 50 years of hindsight of what could be made better about C but compared to other C alternatives that are floating around today like Rust and Zig and Nim and so on, I would say hair is much, much closer to C's original ideas than any of these other attempts but it improves in many respects like dealing with modules and error handling and bound checked things and some safety features. So it improves in a number of respects. It's also very, very simple. So here we have some more line counts for people who like the line counts. The hair compiler is 18,000 lines of code in C11. The back end that we use, it's not L of the M, we use cube as our back end, is another 12,000 lines of C99 and then we use binutils for the linker and assembler and that's it. We support three targets, XA664, AR64 and RISC-564 which it's no coincidence that those are the targets I'm working on for the macro kernel. We intend to add more but this is where the language is at. I started, again, I started here specifically to work on this kind of project and this project exists to validate the language design for this use case and also because it's fun and maybe it could be useful. For those of us who have never seen any hair code before, I just have a little snippet here so you can get a vague idea of what it looks like. Again, not going to explain this in too much detail but if you're familiar with C, a lot of things will seem familiar to you and you can probably guess the double colon does namespaces. You can guess what the no return tag does. It's fairly straightforward programming language and this is what it looks like. The code sample we're looking at here is the portable kernel entry point so it starts with the boot letter entry point and then the arch specific entry point. This is the first line of portable code that runs when you boot the kernel. With the context out of the way, let's talk about Helios itself. We're going to go over a number of things here with respect to the design of Helios and the implementation of Helios. I'm going to talk about our approach to capabilities and on memory management and some other things specific with how various capabilities actually work like processes and threads and talk about inter-process communication and then also talk a little bit about the implementation as well, not just the design. Here's the big picture in terms of the implementation. Again, those who are familiar with SEL4 will find no surprises on this slide but essentially access to all system resources including kernel objects is semantically governed by user space and we use the MMU to isolate user space processes from each other and to enforce this capability model. On system boot up, the kernel enumerates all of the resources on the system, all of the memory and all of the IO ports and all of the IRQs and it prepares capabilities that entitle the bearer to access these resources and then it hands all of these off to the first process, the init process which can then subject to its own user space policy decisions, choose how to allocate those resources to various processes in such a way that it can provide a secure system. Here's a look at our capabilities. There's an example here on the left of a fake physical address space and on the right shows the kind of state that we'd be storing in this. Here we have a number of physical pages, one for a capability space, one for a virtual address space for a task, a bunch of memory pages, some free memory and so on. In this physical memory, we store the state you see on the right, so the C space here stores a list of capability slots, very similar to SEL4, and in those capability slots is a very small amount of state. Each of them leave 64 bytes so there's not a whole lot to store there. In this case, a task, which is like a thread or a process, stores a pointer to another physical memory page where the bulk of its state really lives. In this case, we have an example of some registers for XDD664. And the access to this state is gated behind the MMU, so only the kernel itself can directly read from this kind of physical memory. But then, user space, who, you know, maybe this process that we're looking at has semantic ownership over the C space and this V space. They can invoke the kernel to do operations against those things, but they can't actually directly access the memory. Instead, the virtual memory can only contain certain kinds of capabilities or certain kinds of physical memory pages, so that could be, you know, arbitrary general purpose memory or it could be a memory map diode, it could end up in their address space. But while they have semantic ownership over these other capabilities, the actual state behind them is not accessible to user space. So in order to work with these capabilities that the user space has semantic ownership over, it uses, of course, the syscall API. And Helios has a very, very small syscall API, it is a microkernel after all. We have 14 syscalls, which I have enumerated here, 12 of these are for working with capabilities. And again, if you're familiar with SEL4 here, there's probably no surprises here, except maybe for syspol, which I'll talk about later. So here is a little example of how you might invoke a capability on x86 to make use of the microkernels API. Again, you're going to be making a syscall here at the end, and here we're going to be filling up registers and memory buffers with the information we want to use. So this code is going to invoke the vspace map operation, which accepts a page capability, a virtual address, and a list of mapping flags, like writer or execute. And its goal is to map a page of physical memory into a slot in a virtual address space. And in order to invoke this operation, the caller needs to have access to a vspace capability, which they're going to modify, and a page capability, which they're going to map. And these capabilities are provided here in two different ways. The object being invoked is the vspace, and it gets its own register, RDI, which is the first API register. The page which is being used, again similarly to SEL4, is going to be placed into that process's IPC buffer, which is done here with a fake capability address for the page. And then we have additional arguments like the message tag, which contains the operation name, the number of capabilities, and a number of parameters. And then any additional arguments to the function. You run syscall, and the operation happens. I also want to talk a little bit about the specifics of interprocess communication. So we have two approaches, and I'll first look at endpoints, which they are kind of a generalized form of IPC. And the way you use them is very similar to how you use chronologics. In fact, the interface is uniform, but it can send a set of registers or a set of capabilities between tasks. So one task can transfer a capability to another task. There is synchronous, so calling send on an endpoint or calling receive on an endpoint will block until the two tasks run debut. And if there are many senders or many receivers, then the one who has been blocked the longest will wake up, so you can have many processes, maybe doing some kind of load balancing operation against IPC operations. And also, SEL4 style call and reply is supported, so if one task does a call rather than a send, then it immediately blocks waiting for the reply, which is guaranteed to go back to the same thread. I have here a more detailed example of exactly how that kind of IPC interaction looks on Helios. So I have here on the left one task, and on the right two tasks that want to communicate with each other, and the text which is in black is taking place in user space, and the text in red is taking place in kernel space. So let's say task two is a daemon or a service of some kind which wants to provide a service, and so it's going to essentially have its main IO loop call sys receive and then block until somebody has work for it to do. And task one wants to be a consumer of that interface, so it will invoke sys call, and the kernel will notice that task two is blocked waiting for somebody to call it. And so the kernel will perform the copy of registers, move any capabilities as necessary, unblock task two, and then block task one while they wait for task two to process the message and prepare a reply, which is what happens next over here. The sys call returns from task two, they process the IPC request according to however they implement their services, and they call the reply sys call, which copies the reply registers back to task one, very similar to this fourth step, and then unblocks task one, and then both of them can proceed onwards with whatever CPU time they're given. Another interesting feature we have in terms of endpoints, which is one of the things that distinguishes Helios from SEL4, is support for a pull-like interface. Similar to Unix's pull on file descriptors, Helios lets you pull on capabilities. So this is an example from the serial driver that I implemented for the standard X86 comports service. It has two capabilities it mainly cares about. It has an endpoint capability that it uses to implement its API for consumers of the serial port. So if you want to request a read or a write from serial, you'll send a message to this endpoint, and then it has an IRQ handler for when the serial port says it's ready to receive or transmit more data. And you can prepare a list of capabilities you're interested in, and a list of events you're interested in, and block on pull, and then when one of those is ready to be done, you can call it, and it's guaranteed not to block, very similar to the Unix pull syscall. And again, I think this is, for me, one of the more notable improvements and derivations from the SEL4 model. And I mentioned this earlier, but this interface for doing endpoints and for invoking kernel objects like virtual outer spaces is uniform between user space endpoints and kernel objects. So it is, for example, possible for a user space process to create a set of endpoints and then use them to implement an API which is identical to the kernel API. And if that process is the parent of some other process which thinks it's talking directly to kernel, it can be sandboxed according to whatever kind of policy you want. So the kernel is using this API which is uniform with the way that user space communicates with itself, and thus user space can fill the role of the kernel in sometimes. This can, for example, allow you to very easily run several different Helio systems on the same computer at once without going to virtualization, which is kind of interesting. So here I have a little bit more detail on capabilities in particular, and then the implementation that some of our capability objects use. Here we have a capability space on the left, which is, again, a little bit distinct from SEL4. We don't use guarded page tables. It's more like a file descriptor table. It's just zero to however many slots are allocated in that capability space, and the process invokes a capability by its number, not by its address. Here we have an example of slots where we have a number of things which are preallocated, but then notably we also have some empty capability slots. And another derivation from the SEL4 model is that we support capability allocation in the kernel. We do this by maintaining inside of empty capabilities a free list. And so when you invoke an endpoint or you want to allocate a capability, you can set the capability address to the maximum possible address, and the kernel will allocate one for you using the free list. You don't have to worry about that state in user space, which is, I think, a very nice convenience to have and very easy to implement as well. This is a list of the capabilities that we have implemented. On the left here is a list of all the capabilities which are available on every architecture. We have things like memory, device memory, IPC capabilities, threads, and so on. And then on the right, we have a number of additional capabilities which are specific to each port. In this case, I've listed the capabilities which are used on x8664. I'm going to look at just a few of these. First I want to talk about memory management, again, very similar to how we use capability allocation with the C space in the kernel using a free list. We also derivate from SCL4 in that general purpose memory uses a free list as well so you can allocate pages without trying to keep track of a watermark, without trying to reset your watermark, or divide it into smaller objects. We have a free list of pages, so you can just allocate pages, which is quite nice. But the only reason the slide is here is to tell you how it differs from SCL4. We also have address space capabilities, vspaces, which is, again, similar to SCL4. In fact, it's so similar that we've cargo-cultured this constraint that you can't share page tables. I don't really know why SCL4 does that, but once we understand, then we will probably either commit to this or change our mind. But we have virtual address space capabilities which can be used to manage processes. And then we have tasks, which can be either a thread or a process or something else if you come up with something creative. But essentially, a task just has a capability space, which is optional, so that I can do IO and invoke capabilities as an address space, and it receives some CPU time when it is configured appropriately. And again, we don't have SMP support yet. We would like to do that soon. And for now, the scheduler is very simple. We just have a round-robin scheduler, but we would like to expand that in the future. It should be at least easy enough to add priorities or niceness, and we can probably look into some more sophisticated exclusions a little bit later. Oh, and I missed one on my notes here. A quick note to add on the topic of address spaces is that I think it's implemented a little bit more elegantly than SCL4, but I did not write down why in my notes, so you'll have to take my word for it. OK, so that's enough about the design. I'd like to talk a little bit about the implementation. The goal is to keep the kernel very straightforward when it comes to booting. I don't really care for the never-ending nightmare, which is different ways of booting up computers. And so the kernel is an Elf executable, and the bootloader's job is to do whatever crazy bullshit is required on whatever platform it's running on to just load a goddamn Elf executable into memory. So that's what we've done. And these bootloaders are also implemented in here, by the way. We support, again, multi-boot in X86, and EFI and AR64, and we'll do EFI everywhere soon. But the bootloader comes up, and it's responsible for a few things. It has to, of course, read the memory map. It also has to load from the file system any boot modules, like similar to an initRAMFS on Linux, where it's going to pull out the init binary or the init executable for the first user space process to run, as well as maybe a tarball that init binary wants to use to read some early drivers from. It's also going to provide to the kernel that memory map, those boot modules, and details about the loader kernel, like where it was placed in physical memory and so on. If we're booting with EFI, we're going to pass along some stuff about the EFI runtime services. And if we have a frame buffer at this stage, thanks to GOP or multi-boot, we'll pass that along as well, and that will eventually make its way to user space. During boot, we have system initialization. You saw a little bit of this in the earlier slide, which showed the code sample of the kernel's portable entry point. That's where the system initialization begins. So of the three phases of the kernel runtime, we have the boot phase, the system initialization phase, and the runtime phase. So during sysinit, the purpose is to do something I hinted at earlier, which is to enumerate all of the system resources, create capabilities for them, and then assign them to the inner process, which is, just again, an alpha executable. So we pull that alpha executable in from the boot modules. The kernel has a simple loader, which pulls it into memory. Enumerate system resources creates enough capabilities to host a task and a v-space and so on for that initial executable and hand it off. The basic problem at this stage is not messing up memory. Everybody who has written a kernel from scratch, maybe as opposed to approaching a project later, knows that the hardest thing about memory management is you need memory to manage memory. So there's a lot of stuff in this stage to deal with that. We also tried to enumerate resources on the system at this stage, but this is actually going to change soon. The kernel, at the time of speaking, has a PCI driver for x86 or a device tree scanner for ARM, and we kind of tried to enumerate the physical address of everything, but this is not a good idea, so we're just going to take all physical memory and give it to user space and let it use policy decisions to figure out who gets what, rather than trying to enumerate everything in the kernel, just to keep the kernel smaller. And we definitely don't want to do ACPI, so please, please. If anybody here is on the risk-fire board or something, I'm begging you. No ACPI, device trees. And then finally, we jump to user space, and that concludes the sysinit. Speaking of user space, I want to talk a little bit about our future plans. So here we have kind of the onion of Aries, is what it's called. The Helios is the kernel at the core of this dream of a larger operating system called the Aries operating system. And we want to wrap the kernel with various layers to add more functionality. So we have Helios as the kernel. We've also started working on Mercury, which is a framework for writing drivers. It's basically a user space interface to the kernel API, which you can use for drivers plus some useful functionality like utilities to make it easier to map memory and so on. And then this Mercury system is applied by Venus, which is a collection of drivers, real-world drivers for actual hardware. At the time of this talk, Helios exists, Mercury mostly exists, and Venus was just started last week. Gaia is going to be the next thing that we're going to do on top of this. So through Mercury and Venus, we'll get this kind of abstract view of the devices on the system as presented through IPC, our capabilities. And then this will be consumed by Gaia and formed into a cohesive user space, which is going to essentially be Unix, but everything is not a file. Everything is a capability. So you open slash def slash fb and you get a frame buffer capability rather than an IO object that you might see on Unix. And furthermore, the design of Gaia is going to be mostly a combination of inspirations from Unix and Plan 9. And on top of this, we'll add a POSIX compatibility layer because Gaia is a chance to leave behind the legacy of POSIX, but the legacy of POSIX is strong, so we'll have to accommodate it somehow. And we'll tie all of this up into an operating system called Aries. So we're going to use your space and we're going to build this stuff there. One other thing I want to show off is something which is part of the Mercury system, which is our DSL for defining IPC interfaces. We were thinking about not doing a DSL, but DSLs are kind of good for this use case, so we made one. This is an example of a serial device. It has support for configuring the BOD rate and stop bits and parity and so on. And it implements the IO device because it supports read and write as well. We have a tool called IPCGen, which reads this DSL and generates hair code for it. And this is now mostly working, but we're going to start actually writing more real drivers with it soon, so it'll be, remains to be seen if we'll like it after we use it for a while. So does Helios work? And the answer is self-evidently yes, because this slide deck is being presented from this Raspberry Pi, which is running Helios right now. Thank you. So I have no C code written on this device beyond the point of EDK2. It has EDK2 to run UA5, but once EDK2 hands over to our EFI boot loader. From that point forward, 100% hair and assembly, just a little bit of assembly. This port to ARM64 was accomplished over the past eight weeks. Actually it took exactly 42 days to port the kernel from X86 to AR64. This system has a simple driver for the Raspberry Pi GPU running in user space to drive the projector. And it has a serial port driver, which I'm connected to on my laptop here, to switch between slides because I could not write a USB driver in eight weeks. The slide deck itself is encoded as quite okay images, which are packed into a tarball and dropped in like an NFS would be. And there really are very few hacks. I would say that this is a pretty complete port of the kernel with very little shortcuts or problems. The reason why I chose to port the kernel to ARM in 42 days is because I was originally going to give this talk from a laptop running Helios for X8664, where I was going to drive the projector through Intel HD graphics, and then I read the Intel HD graphics manuals and it decided it would be much easier to port the entire kernel to ARM and write an ARM GPU driver. So that's what I did. After about two days of reading the HD graphics manuals, I was like, I've had enough. And then I pulled down the ARM manual and tried to find a PDF reader which could handle it. In terms of those hacks and shortcuts, there's no SOC specific builds, so the same kernel that I wrote will boot from any ARM device with the standard EFI configuration and a device tree. It's not Raspberry Pi specific. The user space is Raspberry Pi specific. It's actually Raspberry Pi 4 specific, because that's the one I have, just because I didn't feel like doing device tree parsing in user space for the sake of a silly demo. But all of the silly demo code aside, the stuff that's necessary to make this talk work is maybe a little bit hacky and Raspberry Pi specific, but the kernel port is a genuine port which has basically feature complete. I think the only hack that's in place is that I said earlier that the kernel tries to enumerate the device tree to find physical memory for devices to provide to user space through device memory capabilities, and that was a bad idea. I was right that it was a bad idea, but there is a little bit of a hack in the kernel in that I just gave all physical memory to the Raspberry Pi to user space without really much critical thought. That's really the only hack. The full complete, it's done port will correct that oversight by using the EFI memory map to find memory, which is less stupid to just blithely give to user space. Additionally, I will confess that I don't have support for IRQs in user space, so if I put my finger on the heat sink here, it kind of hurts, because it's just busy looping in user space while I wait for the next slide. I did get that working before FOSSTEM. I just didn't incorporate it into the loadout for running the slide deck, so yeah. It's a good thing that it's not that hot in here or this would crash. In total, Helios has been developed in nine months. The ARM port was done in eight weeks, and it's sophisticated enough to run this slide deck, which is pretty cool, but what's left to do? The kernel is mostly done, and by done, I mean feature complete, but not necessarily where we want it to be. So, by feature complete, I mean the kernel API is complete, and you can write programs against it, which do everything we want them to do, and then other improvements won't maybe not necessarily affect that API. Still needs to be polished in a number of places, like that device tree issue that I mentioned is one case. If you get grep through the code base, you'll find about a hundred do comments which we need to address. One of the more challenging things that we're going to have to do is SMP support, but again, the kernel is a total of like 15,000 lines of code, so despite the boogeyman the SMP often appears to be to most kernel hackers, I imagine that it won't be that difficult for us to do, which could be famous last words, but we'll see. I also want to put it to risk five. I have gotten some hair code running on risk five at the supervisor level, thanks to the efforts of one of the hair contributors. We did do some basic OSDA research, but we haven't actually ported Helios itself to risk five. We'll do that soon. I also mentioned that we're going to work on more options for the boot loaders, so we're going to try to get EFI going everywhere. The main blocker for EFI on x8664, for example, is that our programming language, which again is hair, which is developed almost alongside this project. X86 doesn't have for PIC, and so it would kind of be a little bit of a nightmare to like do runtime relocations of the boot loader and assembly or something of that nature, so we're going to do PIC first before we try to do any EFI boot loader for x86, but we do have PIC for ARM, so that's already working. Then I also want to improve the docs. I spent the past few weeks in between hacking on the ARM kernel, improving the documentation on the website aries-os.org, which there will be a link to in a later slide, which is probably now about 60% complete, so if you're curious about the project and maybe you want to try your hand at a little driver in user space, feel free to check that out, and wherever you find a page, which is a stub, and you need to know what it should say, you can come to IRC and ask about it, and we'll fill it in. After the kernel is polished, actually alongside the kernel polish, is going to user space where I explained a lot of the things that we were looking at. Mercury again mostly exists, and Venus is just getting started. Prior to the introduction of Venus, we did have a number of drivers that were built. For the purpose of testing the kernel and testing Mercury and so on, we obviously have a serial driver for X86, we have a PL011 serial driver for ARM, but we've also done things like E1000 networking, we did send pings with that, we did the Rodeo block devices and a couple of other simple drivers, just as we were working to prove the design of the support code for drivers. But the support code is mostly done, so now we're going to start writing drivers for real. I need to provide some acknowledgments here to people who helped make Helios work. Finally I mentioned earlier that there's a RISC-5 kernel by Alexi Yuren, Ember Sovati also did some work on X86 for early kernel attempts. This was really useful stuff, none of this code, very little of this code that came from these efforts, they did it to Helios, and these projects never really developed into full systems, I don't think either of them made it to user space. But they were still very useful for proving out some ideas about how to actually do basic kernel hacking in here, how do we boot up the system, how do we work from ring zero, how do we configure the MMU, how do we do yada-yada-yada, deal with interrupts and so on, how do we link it properly, all questions that had not been answered previously within the context of the hair programming language, and so this work was definitely instrumental in setting the field upon which Helios could be built, so big thanks to these guys. Also thanks to the hair community, there's almost 80 people now, actually I think it's more than 80 now, but there's around 80 people who have been working on the programming language itself, again we've been working on it for about three years now, and the project Helios of course would not be possible without the programming language that's written in, so a huge shout out to the hair community for everything they've done, very proud of that community. I also want to thank the OSDev community on the Baruchat, hands up if any of you are in this channel, yeah, so OSDev on the Baruchat is the single best place to learn about kernel hacking on the entire internet, those guys are so smart and helpful and they're very knowledgeable, they know everything about kernel hacking and drivers and anything you want to know, if you want to mess with kernels, go talk to these people. And also of course to SCL4, as I'm sure you noticed we took a whole bunch of ideas from SCL4, I think SCL4 has got a really cool kernel design and I was really happy to learn about it and apply a lot of its ideas to my own kernel. So kernel hacking is fun, hair is fun, that's all I have fun, that's it. Thank you so much Drew. Any questions from the audience? Martin. I'm going to give you guys my soap, best thanks to Martin first and then we're going to give you. Hi, thanks for the talk, very interesting work. I was unable to map the standard SCL4 capability derivation tree, like starting with anti-memory and then converting that to your slides, so do you have it as well or are you? Yeah, we do track capability derivations in a manner very similar to SCL4 and it really would have been smart for me to put in a slide about that. So thanks for the clarification and the second, well I have a hard time formulating it as a question, so maybe just take it as an unsolicited advice. Many of the design decisions of SCL4 were strictly motivated by the formal verification target. So maybe when you have spoken for example about not sharing the pages, etc., just give it a thought that the reason for that might be that they did not want to make their life harder regarding the formal verification and that might be the only reason. Yeah, I think I've noticed that for a few other implementation details from SCL4 when we were studying the kernel to learn what we could do for ours and with examples like sharing page tables, I had bigger fish to fry so I left a comment which says SCL4 doesn't support copying these and I would rather not run into a Heisenberg because we did it without thinking about it, you know, and then we can really address it at some point in the future. Thanks. Hi, yeah, thanks for the talk, very interesting, quite impressive. Yesterday we were talking about hair and thinking about it in retrospective, it seemed to me, my personal opinion, that the great mechanisms of language design are mostly discovered like we have garbage collection and tech unions and that, assuming you agree with that statement now that you've written that operating system kernel, would you also say that the great mechanisms how to write a kernel are established and well-known, things like paging, was there still areas to experiment in new ways to do memory management, things like that? Interesting question, I would say that there's a lot of concepts and ideas which can be applied in the field of OS development which are understood and you can see examples of kernels and systems which apply these ideas and various different designs that you can learn from and study and maybe apply to your own kernel if they're the right choice and you can make a complete kernel which is interesting basically only using proven ideas which is for the most part describes Helios but at the same time there's certainly all kinds of research which is being done into more novel approaches, there's been talks in this room throughout the day which address some of those novel approaches and ideas so I would say that there is certainly room to build a kernel out of understood ideas and still make it interesting but there's also definitely an active frontier of research ongoing as well. Thank you. Thank you so much. Any other questions? Yeah, please. Yeah, thank you for the talk. You mentioned that you need position independent code, right? Yeah. But I don't understand if you use every driver and it's just like a user space process so can't you just remap that in MMU so that all the processes like a normal Linux process just have the same memory map? Yeah, actually the kernel and user space processes both use a fixed memory map. The thing where we would maybe want to look at position independent code is specifically for the case of loading our EFI bootloader as a P32 plus executable. After that stage it's all fixed memory addresses. Yeah, then I understand. Cool. Hello, thank you for the talk. Can I ask a non-technical element? You've GPL-3'd it. How are you making decisions around the kernel? Like is it inevitable? Tata, are you making decisions or are you having massive conversations about things? How's that looking at the moment? The vast majority of the work is just done by me personally at the moment. The project is still pretty early on but we do have a number of other contributors. I would say that the group of people who ought to be consulted on changes is probably in the ballpark of five people in total. So we just have a fairly informal community based on trust. We try to be transparent, like I am transparent in all of my free software, so we have a public IRC channel where we have these discussions and anybody can jump in at any time and there's a patch review process which just goes through me at the moment. In the hair community, for example, which is a lot bigger at this stage, we have something more of a governance model where there's less of a BDFL and more of multiple maintainers who all can do code reviews and improve patches and things like this. As the Helios project grows, I imagine it will adopt a model similar to hair and perhaps as hair grows, we'll have to improve upon the model even further. But we'll see. Thank you. Nice shirt, by the way. Thank you. Can you pass it on? Yeah. Thanks. You mentioned that you don't want to deal with ACPI but at the same time you want to make UFI standard, so what's the plan there? Is there any way to sort of port ACPI in your system because I imagine that it will become mandatory, right? Yeah. I'm going to wail and gnash my teeth and hope it doesn't happen in practice because at the moment, you know, something like EDK2, to be clear, by the way, I don't give a fuck about non-free firmwares, so I'm thinking about EDK2 and things like that or Uboot and so on where there's already an EFI standard UUID for passing a device tree along and they can be configured to do that instead of ACPI, which is what I'm doing on this Raspberry Pi, for example, and what I hope to continue to do on risk five and so on. Our proof of concept on risk five took the same approach. But there's very little in the kernel that actually needs to be concerned with ACPI versus device trees that, again, it is a microkernel, so in the long term, we might just pass along the... at least a little bit in X86, you know, because there's no device trees. But you know, I'm fingers in my ears not thinking about the fact that ACPI is upon us, but we'll probably have to deal with it at some point. Thank you for the presentation. Which software is running the presentation itself and how is it compiled? This is just a custom piece of software I wrote myself. It's a single binary which is loaded by the bootloader as the inner process and then the kernel loads it into an address space and boots it up as PID1. And there's additionally a tarball as a second boot module which is, again, loaded into memory and then passed along to PID1 which is a tarball full of slides. And then there's just one statically linked executable which contains a serial driver and a GPU driver and the code to glue everything together. The code, by the way, is available on source set if you're curious. As you mentioned, Elios is heavily inspired by SCL4, so is there any plan on format verification for Elios or that's not something you're interested in? No, I'm not particularly interested in that. In the back, there's someone. Thanks for the presentation. I have a question, is it on the road map that something like Weston or a other GUI server or other service like that could potentially be reported to Elios? I'm actually also the original author of WROTS and have a lot of experience in Wayland and so there is a 100% chance that Wayland will be running on Elios at some point. Any other questions? As you said, for Gaia, you are inspired by Plan 9 and Unix. What do you plan for Gaia? What's the best of those both worlds? It's a little bit hard to say. At this point, there's less plans and more vision in that respect because we have at least probably a year of work before we can really start serious work on Gaia. But I will say that there is a lot of stuff I admire about Plan 9. There's per process namespaces is one great idea. I'm also going to go further with the idea of there not being any kind of global file system at all. We're also going to take a look at things like using text-based protocols where possible and we're going to use different from Plan 9. We're going to use this IPC generation thing for places where text protocols maybe don't make sense. I also have a lot of admiration for things like MBD on Plan 9 and so I would like to organize networks perhaps in a similar fashion. Also, I would say that the bigger vision for the whole area system is you can almost say it's correcting a mistake that Plan 9 made, which is that Plan 9 was correct, that distributed computing is the future, but it was incorrect that they would be distributed across a main frame and a bunch of thin clients in office building, which is how Plan 9 was designed. In fact, the group of devices which should be running a uniform operating system is all of your personal devices, my laptop, my workstation at home, my phones, they should all present as a single system. It's very vague and lofty and long-term vision, but I would like to try and achieve that with the design of Gaia and Aries. Thank you. Any other questions? Okay, then thank you so much, Drew. Thanks a lot. So, 10 minutes break until the next talk.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.4, "text": " Thank you, so hi, my name is Drew and I'd like to talk to you today about a new microkernel", "tokens": [1044, 291, 11, 370, 4879, 11, 452, 1315, 307, 25550, 293, 286, 1116, 411, 281, 751, 281, 291, 965, 466, 257, 777, 4532, 74, 1248, 338], "temperature": 0.0, "avg_logprob": -0.23990696177763096, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.1365678608417511}, {"id": 1, "seek": 0, "start": 11.4, "end": 14.0, "text": " I've been working on called Helios.", "tokens": [286, 600, 668, 1364, 322, 1219, 6128, 2717, 13], "temperature": 0.0, "avg_logprob": -0.23990696177763096, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.1365678608417511}, {"id": 2, "seek": 0, "start": 14.0, "end": 19.16, "text": " For context, I work at a place called Source Set and I'm the project lead for a new programming", "tokens": [1171, 4319, 11, 286, 589, 412, 257, 1081, 1219, 29629, 8928, 293, 286, 478, 264, 1716, 1477, 337, 257, 777, 9410], "temperature": 0.0, "avg_logprob": -0.23990696177763096, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.1365678608417511}, {"id": 3, "seek": 0, "start": 19.16, "end": 28.36, "text": " language called Hair and I've done many other projects but that's what's relevant for today.", "tokens": [2856, 1219, 27957, 293, 286, 600, 1096, 867, 661, 4455, 457, 300, 311, 437, 311, 7340, 337, 965, 13], "temperature": 0.0, "avg_logprob": -0.23990696177763096, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.1365678608417511}, {"id": 4, "seek": 2836, "start": 28.36, "end": 31.28, "text": " This is a new microkernel.", "tokens": [639, 307, 257, 777, 4532, 74, 1248, 338, 13], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 5, "seek": 2836, "start": 31.28, "end": 35.12, "text": " It's inspired a lot by SEL4 but it differs in many ways.", "tokens": [467, 311, 7547, 257, 688, 538, 318, 3158, 19, 457, 309, 37761, 294, 867, 2098, 13], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 6, "seek": 2836, "start": 35.12, "end": 39.96, "text": " It's written in this hair programming language that I mentioned and one of the main motivations", "tokens": [467, 311, 3720, 294, 341, 2578, 9410, 2856, 300, 286, 2835, 293, 472, 295, 264, 2135, 39034], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 7, "seek": 2836, "start": 39.96, "end": 43.6, "text": " for it is to find out if we can use the hair programming language to write microkernels", "tokens": [337, 309, 307, 281, 915, 484, 498, 321, 393, 764, 264, 2578, 9410, 2856, 281, 2464, 4532, 74, 1248, 1625], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 8, "seek": 2836, "start": 43.6, "end": 46.239999999999995, "text": " in or any kind of kernel really.", "tokens": [294, 420, 604, 733, 295, 28256, 534, 13], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 9, "seek": 2836, "start": 46.239999999999995, "end": 53.8, "text": " Presently it runs on X8664 and ARM64 and we're thinking about risk 5 in the foreseeable future.", "tokens": [2718, 2276, 309, 6676, 322, 1783, 22193, 19395, 293, 45209, 19395, 293, 321, 434, 1953, 466, 3148, 1025, 294, 264, 38736, 712, 2027, 13], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 10, "seek": 2836, "start": 53.8, "end": 56.4, "text": " In terms of the footprint of this kernel, it's pretty small.", "tokens": [682, 2115, 295, 264, 24222, 295, 341, 28256, 11, 309, 311, 1238, 1359, 13], "temperature": 0.0, "avg_logprob": -0.16244502221384355, "compression_ratio": 1.673992673992674, "no_speech_prob": 5.8145629736827686e-05}, {"id": 11, "seek": 5640, "start": 56.4, "end": 60.16, "text": " The portable code is about 8,500 lines of code.", "tokens": [440, 21800, 3089, 307, 466, 1649, 11, 7526, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 12, "seek": 5640, "start": 60.16, "end": 65.08, "text": " Each architecture adds about another 3,000 lines of code, all hair code and then add", "tokens": [6947, 9482, 10860, 466, 1071, 805, 11, 1360, 3876, 295, 3089, 11, 439, 2578, 3089, 293, 550, 909], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 13, "seek": 5640, "start": 65.08, "end": 69.24, "text": " on top of that the boot loaders which are also written in hair and it's a pretty small", "tokens": [322, 1192, 295, 300, 264, 11450, 3677, 433, 597, 366, 611, 3720, 294, 2578, 293, 309, 311, 257, 1238, 1359], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 14, "seek": 5640, "start": 69.24, "end": 70.24, "text": " footprint.", "tokens": [24222, 13], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 15, "seek": 5640, "start": 70.24, "end": 77.88, "text": " We've been working on it for about nine months now and we use the GPL3 license.", "tokens": [492, 600, 668, 1364, 322, 309, 337, 466, 4949, 2493, 586, 293, 321, 764, 264, 460, 21593, 18, 10476, 13], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 16, "seek": 5640, "start": 77.88, "end": 81.32, "text": " So again, about nine months of progress so far.", "tokens": [407, 797, 11, 466, 4949, 2493, 295, 4205, 370, 1400, 13], "temperature": 0.0, "avg_logprob": -0.14932459408474952, "compression_ratio": 1.584070796460177, "no_speech_prob": 2.2435817299992777e-05}, {"id": 17, "seek": 8132, "start": 81.32, "end": 86.91999999999999, "text": " Where do we stand in terms of functionality is about here.", "tokens": [2305, 360, 321, 1463, 294, 2115, 295, 14980, 307, 466, 510, 13], "temperature": 0.0, "avg_logprob": -0.1703676324141653, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.300536940922029e-05}, {"id": 18, "seek": 8132, "start": 86.91999999999999, "end": 91.8, "text": " We have capability-based security and the capabilities do work similar to what SEL4", "tokens": [492, 362, 13759, 12, 6032, 3825, 293, 264, 10862, 360, 589, 2531, 281, 437, 318, 3158, 19], "temperature": 0.0, "avg_logprob": -0.1703676324141653, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.300536940922029e-05}, {"id": 19, "seek": 8132, "start": 91.8, "end": 97.63999999999999, "text": " does and also similar to SEL4 we have inter-process communication working using endpoints and", "tokens": [775, 293, 611, 2531, 281, 318, 3158, 19, 321, 362, 728, 12, 41075, 6101, 1364, 1228, 917, 20552, 293], "temperature": 0.0, "avg_logprob": -0.1703676324141653, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.300536940922029e-05}, {"id": 20, "seek": 8132, "start": 97.63999999999999, "end": 102.28, "text": " notifications, very similar to SEL4 with some notable differences.", "tokens": [13426, 11, 588, 2531, 281, 318, 3158, 19, 365, 512, 22556, 7300, 13], "temperature": 0.0, "avg_logprob": -0.1703676324141653, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.300536940922029e-05}, {"id": 21, "seek": 8132, "start": 102.28, "end": 108.83999999999999, "text": " We have scheduler work, we're in user space and we have multi-processing but we don't", "tokens": [492, 362, 12000, 260, 589, 11, 321, 434, 294, 4195, 1901, 293, 321, 362, 4825, 12, 41075, 278, 457, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.1703676324141653, "compression_ratio": 1.706140350877193, "no_speech_prob": 5.300536940922029e-05}, {"id": 22, "seek": 10884, "start": 108.84, "end": 112.96000000000001, "text": " have symmetric multi-processing, we have only one core at the moment but we'll do SMP fairly", "tokens": [362, 32330, 4825, 12, 41075, 278, 11, 321, 362, 787, 472, 4965, 412, 264, 1623, 457, 321, 603, 360, 318, 12224, 6457], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 23, "seek": 10884, "start": 112.96000000000001, "end": 114.36, "text": " soon.", "tokens": [2321, 13], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 24, "seek": 10884, "start": 114.36, "end": 120.80000000000001, "text": " We also have all of the necessary rigging in place for drivers in user space so we have", "tokens": [492, 611, 362, 439, 295, 264, 4818, 8329, 3249, 294, 1081, 337, 11590, 294, 4195, 1901, 370, 321, 362], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 25, "seek": 10884, "start": 120.80000000000001, "end": 126.28, "text": " access to ports on X86 and we have memory and map.io support as well as IRQs are rigged", "tokens": [2105, 281, 18160, 322, 1783, 22193, 293, 321, 362, 4675, 293, 4471, 13, 1004, 1406, 382, 731, 382, 16486, 48, 82, 366, 8329, 3004], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 26, "seek": 10884, "start": 126.28, "end": 127.48, "text": " up.", "tokens": [493, 13], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 27, "seek": 10884, "start": 127.48, "end": 133.4, "text": " And for booting up the kernel, we currently support EFI on ARM and multi-boot on X86.", "tokens": [400, 337, 11450, 278, 493, 264, 28256, 11, 321, 4362, 1406, 462, 38568, 322, 45209, 293, 4825, 12, 1763, 310, 322, 1783, 22193, 13], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 28, "seek": 10884, "start": 133.4, "end": 138.72, "text": " We'll be doing EFI on X86 as well in the future and our plan is to also do EFI on risk 5.", "tokens": [492, 603, 312, 884, 462, 38568, 322, 1783, 22193, 382, 731, 294, 264, 2027, 293, 527, 1393, 307, 281, 611, 360, 462, 38568, 322, 3148, 1025, 13], "temperature": 0.0, "avg_logprob": -0.18203195403603947, "compression_ratio": 1.6389891696750902, "no_speech_prob": 5.06092983414419e-05}, {"id": 29, "seek": 13872, "start": 138.72, "end": 144.8, "text": " So we'll use EFI as the default approach for booting Helios in the future.", "tokens": [407, 321, 603, 764, 462, 38568, 382, 264, 7576, 3109, 337, 11450, 278, 6128, 2717, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 30, "seek": 13872, "start": 144.8, "end": 149.28, "text": " But why should we be thinking about writing a new macro kernel or a new kernel of any", "tokens": [583, 983, 820, 321, 312, 1953, 466, 3579, 257, 777, 18887, 28256, 420, 257, 777, 28256, 295, 604], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 31, "seek": 13872, "start": 149.28, "end": 150.28, "text": " sort?", "tokens": [1333, 30], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 32, "seek": 13872, "start": 150.28, "end": 154.96, "text": " I imagine that for this particular dev room I don't need to give too many reasons but", "tokens": [286, 3811, 300, 337, 341, 1729, 1905, 1808, 286, 500, 380, 643, 281, 976, 886, 867, 4112, 457], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 33, "seek": 13872, "start": 154.96, "end": 159.4, "text": " for the sake of anybody who's maybe watching online, the first point is pretty obvious.", "tokens": [337, 264, 9717, 295, 4472, 567, 311, 1310, 1976, 2950, 11, 264, 700, 935, 307, 1238, 6322, 13], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 34, "seek": 13872, "start": 159.4, "end": 163.44, "text": " It's really fun to write kernels and that's kind of reason enough so I'm having a great", "tokens": [467, 311, 534, 1019, 281, 2464, 23434, 1625, 293, 300, 311, 733, 295, 1778, 1547, 370, 286, 478, 1419, 257, 869], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 35, "seek": 13872, "start": 163.44, "end": 166.52, "text": " time working on it and that's enough for me.", "tokens": [565, 1364, 322, 309, 293, 300, 311, 1547, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.1287934140461247, "compression_ratio": 1.6654929577464788, "no_speech_prob": 1.8026557881967165e-05}, {"id": 36, "seek": 16652, "start": 166.52, "end": 171.04000000000002, "text": " But also, importantly, we've been working on this programming language here for about", "tokens": [583, 611, 11, 8906, 11, 321, 600, 668, 1364, 322, 341, 9410, 2856, 510, 337, 466], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 37, "seek": 16652, "start": 171.04000000000002, "end": 175.36, "text": " three years now and it's a systems programming language and one of our goals is to be able", "tokens": [1045, 924, 586, 293, 309, 311, 257, 3652, 9410, 2856, 293, 472, 295, 527, 5493, 307, 281, 312, 1075], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 38, "seek": 16652, "start": 175.36, "end": 178.84, "text": " to write things like kernels and so in order to prove that we have achieved this goal,", "tokens": [281, 2464, 721, 411, 23434, 1625, 293, 370, 294, 1668, 281, 7081, 300, 321, 362, 11042, 341, 3387, 11], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 39, "seek": 16652, "start": 178.84, "end": 183.0, "text": " we have to write a kernel with it and so Helios is that kernel.", "tokens": [321, 362, 281, 2464, 257, 28256, 365, 309, 293, 370, 6128, 2717, 307, 300, 28256, 13], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 40, "seek": 16652, "start": 183.0, "end": 188.92000000000002, "text": " I also am a big fan of SCL4's design but I also have some criticisms of it and I'm curious", "tokens": [286, 611, 669, 257, 955, 3429, 295, 9028, 43, 19, 311, 1715, 457, 286, 611, 362, 512, 48519, 295, 309, 293, 286, 478, 6369], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 41, "seek": 16652, "start": 188.92000000000002, "end": 194.4, "text": " if we do a kernel which is inspired by SCL4, can we make some improvements on its design?", "tokens": [498, 321, 360, 257, 28256, 597, 307, 7547, 538, 9028, 43, 19, 11, 393, 321, 652, 512, 13797, 322, 1080, 1715, 30], "temperature": 0.0, "avg_logprob": -0.11958187543428861, "compression_ratio": 1.7397260273972603, "no_speech_prob": 5.502882686414523e-06}, {"id": 42, "seek": 19440, "start": 194.4, "end": 199.88, "text": " And if we were to be particularly ambitious, could we perhaps do better than Linux?", "tokens": [400, 498, 321, 645, 281, 312, 4098, 20239, 11, 727, 321, 4317, 360, 1101, 813, 18734, 30], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 43, "seek": 19440, "start": 199.88, "end": 203.88, "text": " We'll see.", "tokens": [492, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 44, "seek": 19440, "start": 203.88, "end": 211.04000000000002, "text": " I should also point out that this slide deck is going to cover a lot of details which maybe", "tokens": [286, 820, 611, 935, 484, 300, 341, 4137, 9341, 307, 516, 281, 2060, 257, 688, 295, 4365, 597, 1310], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 45, "seek": 19440, "start": 211.04000000000002, "end": 215.20000000000002, "text": " will seem redundant to people who are already familiar with the design of SCL4 and that", "tokens": [486, 1643, 40997, 281, 561, 567, 366, 1217, 4963, 365, 264, 1715, 295, 9028, 43, 19, 293, 300], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 46, "seek": 19440, "start": 215.20000000000002, "end": 220.04000000000002, "text": " could be a problem with this audience but please bear with me while I explain things", "tokens": [727, 312, 257, 1154, 365, 341, 4034, 457, 1767, 6155, 365, 385, 1339, 286, 2903, 721], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 47, "seek": 19440, "start": 220.04000000000002, "end": 223.56, "text": " that you already understand at some point in the future.", "tokens": [300, 291, 1217, 1223, 412, 512, 935, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.1176212773178563, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.973010305140633e-05}, {"id": 48, "seek": 22356, "start": 223.56, "end": 227.56, "text": " So the hair programming language, this is the pitch from the website.", "tokens": [407, 264, 2578, 9410, 2856, 11, 341, 307, 264, 7293, 490, 264, 3144, 13], "temperature": 0.0, "avg_logprob": -0.13820266723632812, "compression_ratio": 1.6045627376425855, "no_speech_prob": 3.421811561565846e-05}, {"id": 49, "seek": 22356, "start": 227.56, "end": 231.92000000000002, "text": " I won't read it out to you but essentially it's a very simple language which is very", "tokens": [286, 1582, 380, 1401, 309, 484, 281, 291, 457, 4476, 309, 311, 257, 588, 2199, 2856, 597, 307, 588], "temperature": 0.0, "avg_logprob": -0.13820266723632812, "compression_ratio": 1.6045627376425855, "no_speech_prob": 3.421811561565846e-05}, {"id": 50, "seek": 22356, "start": 231.92000000000002, "end": 238.0, "text": " close to C in terms of design but with a lot of benefit of 50 years of hindsight of what", "tokens": [1998, 281, 383, 294, 2115, 295, 1715, 457, 365, 257, 688, 295, 5121, 295, 2625, 924, 295, 44357, 295, 437], "temperature": 0.0, "avg_logprob": -0.13820266723632812, "compression_ratio": 1.6045627376425855, "no_speech_prob": 3.421811561565846e-05}, {"id": 51, "seek": 22356, "start": 238.0, "end": 244.52, "text": " could be made better about C but compared to other C alternatives that are floating around", "tokens": [727, 312, 1027, 1101, 466, 383, 457, 5347, 281, 661, 383, 20478, 300, 366, 12607, 926], "temperature": 0.0, "avg_logprob": -0.13820266723632812, "compression_ratio": 1.6045627376425855, "no_speech_prob": 3.421811561565846e-05}, {"id": 52, "seek": 22356, "start": 244.52, "end": 249.08, "text": " today like Rust and Zig and Nim and so on, I would say hair is much, much closer to C's", "tokens": [965, 411, 34952, 293, 50004, 293, 45251, 293, 370, 322, 11, 286, 576, 584, 2578, 307, 709, 11, 709, 4966, 281, 383, 311], "temperature": 0.0, "avg_logprob": -0.13820266723632812, "compression_ratio": 1.6045627376425855, "no_speech_prob": 3.421811561565846e-05}, {"id": 53, "seek": 24908, "start": 249.08, "end": 255.0, "text": " original ideas than any of these other attempts but it improves in many respects like dealing", "tokens": [3380, 3487, 813, 604, 295, 613, 661, 15257, 457, 309, 24771, 294, 867, 24126, 411, 6260], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 54, "seek": 24908, "start": 255.0, "end": 262.56, "text": " with modules and error handling and bound checked things and some safety features.", "tokens": [365, 16679, 293, 6713, 13175, 293, 5472, 10033, 721, 293, 512, 4514, 4122, 13], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 55, "seek": 24908, "start": 262.56, "end": 264.40000000000003, "text": " So it improves in a number of respects.", "tokens": [407, 309, 24771, 294, 257, 1230, 295, 24126, 13], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 56, "seek": 24908, "start": 264.40000000000003, "end": 267.36, "text": " It's also very, very simple.", "tokens": [467, 311, 611, 588, 11, 588, 2199, 13], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 57, "seek": 24908, "start": 267.36, "end": 272.48, "text": " So here we have some more line counts for people who like the line counts.", "tokens": [407, 510, 321, 362, 512, 544, 1622, 14893, 337, 561, 567, 411, 264, 1622, 14893, 13], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 58, "seek": 24908, "start": 272.48, "end": 276.64, "text": " The hair compiler is 18,000 lines of code in C11.", "tokens": [440, 2578, 31958, 307, 2443, 11, 1360, 3876, 295, 3089, 294, 383, 5348, 13], "temperature": 0.0, "avg_logprob": -0.13039286058027666, "compression_ratio": 1.6017316017316017, "no_speech_prob": 2.317467260581907e-05}, {"id": 59, "seek": 27664, "start": 276.64, "end": 280.91999999999996, "text": " The back end that we use, it's not L of the M, we use cube as our back end, is another", "tokens": [440, 646, 917, 300, 321, 764, 11, 309, 311, 406, 441, 295, 264, 376, 11, 321, 764, 13728, 382, 527, 646, 917, 11, 307, 1071], "temperature": 0.0, "avg_logprob": -0.197844994586447, "compression_ratio": 1.540983606557377, "no_speech_prob": 1.496419463364873e-05}, {"id": 60, "seek": 27664, "start": 280.91999999999996, "end": 286.76, "text": " 12,000 lines of C99 and then we use binutils for the linker and assembler and that's it.", "tokens": [2272, 11, 1360, 3876, 295, 383, 8494, 293, 550, 321, 764, 5171, 325, 4174, 337, 264, 2113, 260, 293, 8438, 1918, 293, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.197844994586447, "compression_ratio": 1.540983606557377, "no_speech_prob": 1.496419463364873e-05}, {"id": 61, "seek": 27664, "start": 286.76, "end": 292.32, "text": " We support three targets, XA664, AR64 and RISC-564 which it's no coincidence that those", "tokens": [492, 1406, 1045, 12911, 11, 1783, 32, 21, 19395, 11, 8943, 19395, 293, 497, 2343, 34, 12, 18317, 19, 597, 309, 311, 572, 22137, 300, 729], "temperature": 0.0, "avg_logprob": -0.197844994586447, "compression_ratio": 1.540983606557377, "no_speech_prob": 1.496419463364873e-05}, {"id": 62, "seek": 27664, "start": 292.32, "end": 295.88, "text": " are the targets I'm working on for the macro kernel.", "tokens": [366, 264, 12911, 286, 478, 1364, 322, 337, 264, 18887, 28256, 13], "temperature": 0.0, "avg_logprob": -0.197844994586447, "compression_ratio": 1.540983606557377, "no_speech_prob": 1.496419463364873e-05}, {"id": 63, "seek": 27664, "start": 295.88, "end": 302.59999999999997, "text": " We intend to add more but this is where the language is at.", "tokens": [492, 19759, 281, 909, 544, 457, 341, 307, 689, 264, 2856, 307, 412, 13], "temperature": 0.0, "avg_logprob": -0.197844994586447, "compression_ratio": 1.540983606557377, "no_speech_prob": 1.496419463364873e-05}, {"id": 64, "seek": 30260, "start": 302.6, "end": 309.20000000000005, "text": " I started, again, I started here specifically to work on this kind of project and this project", "tokens": [286, 1409, 11, 797, 11, 286, 1409, 510, 4682, 281, 589, 322, 341, 733, 295, 1716, 293, 341, 1716], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 65, "seek": 30260, "start": 309.20000000000005, "end": 313.52000000000004, "text": " exists to validate the language design for this use case and also because it's fun and", "tokens": [8198, 281, 29562, 264, 2856, 1715, 337, 341, 764, 1389, 293, 611, 570, 309, 311, 1019, 293], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 66, "seek": 30260, "start": 313.52000000000004, "end": 316.16, "text": " maybe it could be useful.", "tokens": [1310, 309, 727, 312, 4420, 13], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 67, "seek": 30260, "start": 316.16, "end": 320.16, "text": " For those of us who have never seen any hair code before, I just have a little snippet", "tokens": [1171, 729, 295, 505, 567, 362, 1128, 1612, 604, 2578, 3089, 949, 11, 286, 445, 362, 257, 707, 35623, 302], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 68, "seek": 30260, "start": 320.16, "end": 322.84000000000003, "text": " here so you can get a vague idea of what it looks like.", "tokens": [510, 370, 291, 393, 483, 257, 24247, 1558, 295, 437, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 69, "seek": 30260, "start": 322.84000000000003, "end": 326.20000000000005, "text": " Again, not going to explain this in too much detail but if you're familiar with C, a lot", "tokens": [3764, 11, 406, 516, 281, 2903, 341, 294, 886, 709, 2607, 457, 498, 291, 434, 4963, 365, 383, 11, 257, 688], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 70, "seek": 30260, "start": 326.20000000000005, "end": 331.12, "text": " of things will seem familiar to you and you can probably guess the double colon does namespaces.", "tokens": [295, 721, 486, 1643, 4963, 281, 291, 293, 291, 393, 1391, 2041, 264, 3834, 8255, 775, 5288, 79, 2116, 13], "temperature": 0.0, "avg_logprob": -0.12963548818028958, "compression_ratio": 1.6855345911949686, "no_speech_prob": 1.5917752534733154e-05}, {"id": 71, "seek": 33112, "start": 331.12, "end": 333.48, "text": " You can guess what the no return tag does.", "tokens": [509, 393, 2041, 437, 264, 572, 2736, 6162, 775, 13], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 72, "seek": 33112, "start": 333.48, "end": 336.8, "text": " It's fairly straightforward programming language and this is what it looks like.", "tokens": [467, 311, 6457, 15325, 9410, 2856, 293, 341, 307, 437, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 73, "seek": 33112, "start": 336.8, "end": 340.84000000000003, "text": " The code sample we're looking at here is the portable kernel entry point so it starts with", "tokens": [440, 3089, 6889, 321, 434, 1237, 412, 510, 307, 264, 21800, 28256, 8729, 935, 370, 309, 3719, 365], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 74, "seek": 33112, "start": 340.84000000000003, "end": 344.16, "text": " the boot letter entry point and then the arch specific entry point.", "tokens": [264, 11450, 5063, 8729, 935, 293, 550, 264, 3912, 2685, 8729, 935, 13], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 75, "seek": 33112, "start": 344.16, "end": 350.88, "text": " This is the first line of portable code that runs when you boot the kernel.", "tokens": [639, 307, 264, 700, 1622, 295, 21800, 3089, 300, 6676, 562, 291, 11450, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 76, "seek": 33112, "start": 350.88, "end": 354.6, "text": " With the context out of the way, let's talk about Helios itself.", "tokens": [2022, 264, 4319, 484, 295, 264, 636, 11, 718, 311, 751, 466, 6128, 2717, 2564, 13], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 77, "seek": 33112, "start": 354.6, "end": 359.6, "text": " We're going to go over a number of things here with respect to the design of Helios", "tokens": [492, 434, 516, 281, 352, 670, 257, 1230, 295, 721, 510, 365, 3104, 281, 264, 1715, 295, 6128, 2717], "temperature": 0.0, "avg_logprob": -0.11718509236320121, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.12965044536395e-05}, {"id": 78, "seek": 35960, "start": 359.6, "end": 361.08000000000004, "text": " and the implementation of Helios.", "tokens": [293, 264, 11420, 295, 6128, 2717, 13], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 79, "seek": 35960, "start": 361.08000000000004, "end": 365.52000000000004, "text": " I'm going to talk about our approach to capabilities and on memory management and some other things", "tokens": [286, 478, 516, 281, 751, 466, 527, 3109, 281, 10862, 293, 322, 4675, 4592, 293, 512, 661, 721], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 80, "seek": 35960, "start": 365.52000000000004, "end": 370.44, "text": " specific with how various capabilities actually work like processes and threads and talk about", "tokens": [2685, 365, 577, 3683, 10862, 767, 589, 411, 7555, 293, 19314, 293, 751, 466], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 81, "seek": 35960, "start": 370.44, "end": 374.72, "text": " inter-process communication and then also talk a little bit about the implementation", "tokens": [728, 12, 41075, 6101, 293, 550, 611, 751, 257, 707, 857, 466, 264, 11420], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 82, "seek": 35960, "start": 374.72, "end": 379.0, "text": " as well, not just the design.", "tokens": [382, 731, 11, 406, 445, 264, 1715, 13], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 83, "seek": 35960, "start": 379.0, "end": 382.24, "text": " Here's the big picture in terms of the implementation.", "tokens": [1692, 311, 264, 955, 3036, 294, 2115, 295, 264, 11420, 13], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 84, "seek": 35960, "start": 382.24, "end": 387.88, "text": " Again, those who are familiar with SEL4 will find no surprises on this slide but essentially", "tokens": [3764, 11, 729, 567, 366, 4963, 365, 318, 3158, 19, 486, 915, 572, 22655, 322, 341, 4137, 457, 4476], "temperature": 0.0, "avg_logprob": -0.167610934961622, "compression_ratio": 1.7473309608540926, "no_speech_prob": 1.3625214705825783e-05}, {"id": 85, "seek": 38788, "start": 387.88, "end": 393.4, "text": " access to all system resources including kernel objects is semantically governed by user space", "tokens": [2105, 281, 439, 1185, 3593, 3009, 28256, 6565, 307, 4361, 49505, 35529, 538, 4195, 1901], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 86, "seek": 38788, "start": 393.4, "end": 399.08, "text": " and we use the MMU to isolate user space processes from each other and to enforce this capability", "tokens": [293, 321, 764, 264, 34191, 52, 281, 25660, 4195, 1901, 7555, 490, 1184, 661, 293, 281, 24825, 341, 13759], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 87, "seek": 38788, "start": 399.08, "end": 400.4, "text": " model.", "tokens": [2316, 13], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 88, "seek": 38788, "start": 400.4, "end": 405.08, "text": " On system boot up, the kernel enumerates all of the resources on the system, all of the", "tokens": [1282, 1185, 11450, 493, 11, 264, 28256, 465, 15583, 1024, 439, 295, 264, 3593, 322, 264, 1185, 11, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 89, "seek": 38788, "start": 405.08, "end": 409.36, "text": " memory and all of the IO ports and all of the IRQs and it prepares capabilities that", "tokens": [4675, 293, 439, 295, 264, 39839, 18160, 293, 439, 295, 264, 16486, 48, 82, 293, 309, 39418, 10862, 300], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 90, "seek": 38788, "start": 409.36, "end": 414.28, "text": " entitle the bearer to access these resources and then it hands all of these off to the", "tokens": [14789, 306, 264, 6155, 260, 281, 2105, 613, 3593, 293, 550, 309, 2377, 439, 295, 613, 766, 281, 264], "temperature": 0.0, "avg_logprob": -0.1269395810748459, "compression_ratio": 1.8658536585365855, "no_speech_prob": 5.6454588047927245e-05}, {"id": 91, "seek": 41428, "start": 414.28, "end": 419.55999999999995, "text": " first process, the init process which can then subject to its own user space policy", "tokens": [700, 1399, 11, 264, 3157, 1399, 597, 393, 550, 3983, 281, 1080, 1065, 4195, 1901, 3897], "temperature": 0.0, "avg_logprob": -0.14939494010729668, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.8325570636079647e-05}, {"id": 92, "seek": 41428, "start": 419.55999999999995, "end": 425.91999999999996, "text": " decisions, choose how to allocate those resources to various processes in such a way that it", "tokens": [5327, 11, 2826, 577, 281, 35713, 729, 3593, 281, 3683, 7555, 294, 1270, 257, 636, 300, 309], "temperature": 0.0, "avg_logprob": -0.14939494010729668, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.8325570636079647e-05}, {"id": 93, "seek": 41428, "start": 425.91999999999996, "end": 433.32, "text": " can provide a secure system.", "tokens": [393, 2893, 257, 7144, 1185, 13], "temperature": 0.0, "avg_logprob": -0.14939494010729668, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.8325570636079647e-05}, {"id": 94, "seek": 41428, "start": 433.32, "end": 435.67999999999995, "text": " Here's a look at our capabilities.", "tokens": [1692, 311, 257, 574, 412, 527, 10862, 13], "temperature": 0.0, "avg_logprob": -0.14939494010729668, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.8325570636079647e-05}, {"id": 95, "seek": 41428, "start": 435.67999999999995, "end": 442.79999999999995, "text": " There's an example here on the left of a fake physical address space and on the right shows", "tokens": [821, 311, 364, 1365, 510, 322, 264, 1411, 295, 257, 7592, 4001, 2985, 1901, 293, 322, 264, 558, 3110], "temperature": 0.0, "avg_logprob": -0.14939494010729668, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.8325570636079647e-05}, {"id": 96, "seek": 44280, "start": 442.8, "end": 445.44, "text": " the kind of state that we'd be storing in this.", "tokens": [264, 733, 295, 1785, 300, 321, 1116, 312, 26085, 294, 341, 13], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 97, "seek": 44280, "start": 445.44, "end": 449.44, "text": " Here we have a number of physical pages, one for a capability space, one for a virtual", "tokens": [1692, 321, 362, 257, 1230, 295, 4001, 7183, 11, 472, 337, 257, 13759, 1901, 11, 472, 337, 257, 6374], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 98, "seek": 44280, "start": 449.44, "end": 455.04, "text": " address space for a task, a bunch of memory pages, some free memory and so on.", "tokens": [2985, 1901, 337, 257, 5633, 11, 257, 3840, 295, 4675, 7183, 11, 512, 1737, 4675, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 99, "seek": 44280, "start": 455.04, "end": 459.64, "text": " In this physical memory, we store the state you see on the right, so the C space here", "tokens": [682, 341, 4001, 4675, 11, 321, 3531, 264, 1785, 291, 536, 322, 264, 558, 11, 370, 264, 383, 1901, 510], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 100, "seek": 44280, "start": 459.64, "end": 465.28000000000003, "text": " stores a list of capability slots, very similar to SEL4, and in those capability slots is", "tokens": [9512, 257, 1329, 295, 13759, 24266, 11, 588, 2531, 281, 318, 3158, 19, 11, 293, 294, 729, 13759, 24266, 307], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 101, "seek": 44280, "start": 465.28000000000003, "end": 467.08000000000004, "text": " a very small amount of state.", "tokens": [257, 588, 1359, 2372, 295, 1785, 13], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 102, "seek": 44280, "start": 467.08000000000004, "end": 470.6, "text": " Each of them leave 64 bytes so there's not a whole lot to store there.", "tokens": [6947, 295, 552, 1856, 12145, 36088, 370, 456, 311, 406, 257, 1379, 688, 281, 3531, 456, 13], "temperature": 0.0, "avg_logprob": -0.1771733944232647, "compression_ratio": 1.7883211678832116, "no_speech_prob": 2.7962565582129173e-05}, {"id": 103, "seek": 47060, "start": 470.6, "end": 475.32000000000005, "text": " In this case, a task, which is like a thread or a process, stores a pointer to another", "tokens": [682, 341, 1389, 11, 257, 5633, 11, 597, 307, 411, 257, 7207, 420, 257, 1399, 11, 9512, 257, 23918, 281, 1071], "temperature": 0.0, "avg_logprob": -0.15065450982733086, "compression_ratio": 1.5610859728506787, "no_speech_prob": 7.1809809014666826e-06}, {"id": 104, "seek": 47060, "start": 475.32000000000005, "end": 479.44, "text": " physical memory page where the bulk of its state really lives.", "tokens": [4001, 4675, 3028, 689, 264, 16139, 295, 1080, 1785, 534, 2909, 13], "temperature": 0.0, "avg_logprob": -0.15065450982733086, "compression_ratio": 1.5610859728506787, "no_speech_prob": 7.1809809014666826e-06}, {"id": 105, "seek": 47060, "start": 479.44, "end": 486.52000000000004, "text": " In this case, we have an example of some registers for XDD664.", "tokens": [682, 341, 1389, 11, 321, 362, 364, 1365, 295, 512, 38351, 337, 1783, 20818, 15237, 19, 13], "temperature": 0.0, "avg_logprob": -0.15065450982733086, "compression_ratio": 1.5610859728506787, "no_speech_prob": 7.1809809014666826e-06}, {"id": 106, "seek": 47060, "start": 486.52000000000004, "end": 492.92, "text": " And the access to this state is gated behind the MMU, so only the kernel itself can directly", "tokens": [400, 264, 2105, 281, 341, 1785, 307, 290, 770, 2261, 264, 34191, 52, 11, 370, 787, 264, 28256, 2564, 393, 3838], "temperature": 0.0, "avg_logprob": -0.15065450982733086, "compression_ratio": 1.5610859728506787, "no_speech_prob": 7.1809809014666826e-06}, {"id": 107, "seek": 47060, "start": 492.92, "end": 495.12, "text": " read from this kind of physical memory.", "tokens": [1401, 490, 341, 733, 295, 4001, 4675, 13], "temperature": 0.0, "avg_logprob": -0.15065450982733086, "compression_ratio": 1.5610859728506787, "no_speech_prob": 7.1809809014666826e-06}, {"id": 108, "seek": 49512, "start": 495.12, "end": 500.56, "text": " But then, user space, who, you know, maybe this process that we're looking at has semantic", "tokens": [583, 550, 11, 4195, 1901, 11, 567, 11, 291, 458, 11, 1310, 341, 1399, 300, 321, 434, 1237, 412, 575, 47982], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 109, "seek": 49512, "start": 500.56, "end": 503.28000000000003, "text": " ownership over the C space and this V space.", "tokens": [15279, 670, 264, 383, 1901, 293, 341, 691, 1901, 13], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 110, "seek": 49512, "start": 503.28000000000003, "end": 506.56, "text": " They can invoke the kernel to do operations against those things, but they can't actually", "tokens": [814, 393, 41117, 264, 28256, 281, 360, 7705, 1970, 729, 721, 11, 457, 436, 393, 380, 767], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 111, "seek": 49512, "start": 506.56, "end": 508.0, "text": " directly access the memory.", "tokens": [3838, 2105, 264, 4675, 13], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 112, "seek": 49512, "start": 508.0, "end": 511.96, "text": " Instead, the virtual memory can only contain certain kinds of capabilities or certain kinds", "tokens": [7156, 11, 264, 6374, 4675, 393, 787, 5304, 1629, 3685, 295, 10862, 420, 1629, 3685], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 113, "seek": 49512, "start": 511.96, "end": 516.52, "text": " of physical memory pages, so that could be, you know, arbitrary general purpose memory", "tokens": [295, 4001, 4675, 7183, 11, 370, 300, 727, 312, 11, 291, 458, 11, 23211, 2674, 4334, 4675], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 114, "seek": 49512, "start": 516.52, "end": 520.12, "text": " or it could be a memory map diode, it could end up in their address space.", "tokens": [420, 309, 727, 312, 257, 4675, 4471, 40787, 11, 309, 727, 917, 493, 294, 641, 2985, 1901, 13], "temperature": 0.0, "avg_logprob": -0.16578352150796843, "compression_ratio": 1.7852112676056338, "no_speech_prob": 1.2603747563844081e-05}, {"id": 115, "seek": 52012, "start": 520.12, "end": 525.4, "text": " But while they have semantic ownership over these other capabilities, the actual state", "tokens": [583, 1339, 436, 362, 47982, 15279, 670, 613, 661, 10862, 11, 264, 3539, 1785], "temperature": 0.0, "avg_logprob": -0.13865651867606424, "compression_ratio": 1.695, "no_speech_prob": 6.8535264290403575e-06}, {"id": 116, "seek": 52012, "start": 525.4, "end": 533.2, "text": " behind them is not accessible to user space.", "tokens": [2261, 552, 307, 406, 9515, 281, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.13865651867606424, "compression_ratio": 1.695, "no_speech_prob": 6.8535264290403575e-06}, {"id": 117, "seek": 52012, "start": 533.2, "end": 538.4, "text": " So in order to work with these capabilities that the user space has semantic ownership", "tokens": [407, 294, 1668, 281, 589, 365, 613, 10862, 300, 264, 4195, 1901, 575, 47982, 15279], "temperature": 0.0, "avg_logprob": -0.13865651867606424, "compression_ratio": 1.695, "no_speech_prob": 6.8535264290403575e-06}, {"id": 118, "seek": 52012, "start": 538.4, "end": 541.76, "text": " over, it uses, of course, the syscall API.", "tokens": [670, 11, 309, 4960, 11, 295, 1164, 11, 264, 262, 749, 45459, 9362, 13], "temperature": 0.0, "avg_logprob": -0.13865651867606424, "compression_ratio": 1.695, "no_speech_prob": 6.8535264290403575e-06}, {"id": 119, "seek": 52012, "start": 541.76, "end": 546.8, "text": " And Helios has a very, very small syscall API, it is a microkernel after all.", "tokens": [400, 6128, 2717, 575, 257, 588, 11, 588, 1359, 262, 749, 45459, 9362, 11, 309, 307, 257, 4532, 74, 1248, 338, 934, 439, 13], "temperature": 0.0, "avg_logprob": -0.13865651867606424, "compression_ratio": 1.695, "no_speech_prob": 6.8535264290403575e-06}, {"id": 120, "seek": 54680, "start": 546.8, "end": 552.8, "text": " We have 14 syscalls, which I have enumerated here, 12 of these are for working with capabilities.", "tokens": [492, 362, 3499, 262, 749, 66, 39655, 11, 597, 286, 362, 465, 15583, 770, 510, 11, 2272, 295, 613, 366, 337, 1364, 365, 10862, 13], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 121, "seek": 54680, "start": 552.8, "end": 556.56, "text": " And again, if you're familiar with SEL4 here, there's probably no surprises here, except", "tokens": [400, 797, 11, 498, 291, 434, 4963, 365, 318, 3158, 19, 510, 11, 456, 311, 1391, 572, 22655, 510, 11, 3993], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 122, "seek": 54680, "start": 556.56, "end": 563.28, "text": " maybe for syspol, which I'll talk about later.", "tokens": [1310, 337, 262, 749, 12892, 11, 597, 286, 603, 751, 466, 1780, 13], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 123, "seek": 54680, "start": 563.28, "end": 568.88, "text": " So here is a little example of how you might invoke a capability on x86 to make use of the", "tokens": [407, 510, 307, 257, 707, 1365, 295, 577, 291, 1062, 41117, 257, 13759, 322, 2031, 22193, 281, 652, 764, 295, 264], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 124, "seek": 54680, "start": 568.88, "end": 570.7199999999999, "text": " microkernels API.", "tokens": [4532, 74, 1248, 1625, 9362, 13], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 125, "seek": 54680, "start": 570.7199999999999, "end": 575.4, "text": " Again, you're going to be making a syscall here at the end, and here we're going to", "tokens": [3764, 11, 291, 434, 516, 281, 312, 1455, 257, 262, 749, 45459, 510, 412, 264, 917, 11, 293, 510, 321, 434, 516, 281], "temperature": 0.0, "avg_logprob": -0.15825894983803354, "compression_ratio": 1.6075471698113208, "no_speech_prob": 5.254391453490825e-06}, {"id": 126, "seek": 57540, "start": 575.4, "end": 579.4, "text": " be filling up registers and memory buffers with the information we want to use.", "tokens": [312, 10623, 493, 38351, 293, 4675, 9204, 433, 365, 264, 1589, 321, 528, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 127, "seek": 57540, "start": 579.4, "end": 584.72, "text": " So this code is going to invoke the vspace map operation, which accepts a page capability,", "tokens": [407, 341, 3089, 307, 516, 281, 41117, 264, 371, 24824, 4471, 6916, 11, 597, 33538, 257, 3028, 13759, 11], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 128, "seek": 57540, "start": 584.72, "end": 589.68, "text": " a virtual address, and a list of mapping flags, like writer or execute.", "tokens": [257, 6374, 2985, 11, 293, 257, 1329, 295, 18350, 23265, 11, 411, 9936, 420, 14483, 13], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 129, "seek": 57540, "start": 589.68, "end": 595.6, "text": " And its goal is to map a page of physical memory into a slot in a virtual address space.", "tokens": [400, 1080, 3387, 307, 281, 4471, 257, 3028, 295, 4001, 4675, 666, 257, 14747, 294, 257, 6374, 2985, 1901, 13], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 130, "seek": 57540, "start": 595.6, "end": 600.76, "text": " And in order to invoke this operation, the caller needs to have access to a vspace capability,", "tokens": [400, 294, 1668, 281, 41117, 341, 6916, 11, 264, 48324, 2203, 281, 362, 2105, 281, 257, 371, 24824, 13759, 11], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 131, "seek": 57540, "start": 600.76, "end": 604.56, "text": " which they're going to modify, and a page capability, which they're going to map.", "tokens": [597, 436, 434, 516, 281, 16927, 11, 293, 257, 3028, 13759, 11, 597, 436, 434, 516, 281, 4471, 13], "temperature": 0.0, "avg_logprob": -0.09215940967682869, "compression_ratio": 1.902621722846442, "no_speech_prob": 4.4672451622318476e-05}, {"id": 132, "seek": 60456, "start": 604.56, "end": 607.4, "text": " And these capabilities are provided here in two different ways.", "tokens": [400, 613, 10862, 366, 5649, 510, 294, 732, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 133, "seek": 60456, "start": 607.4, "end": 611.68, "text": " The object being invoked is the vspace, and it gets its own register, RDI, which is the", "tokens": [440, 2657, 885, 1048, 9511, 307, 264, 371, 24824, 11, 293, 309, 2170, 1080, 1065, 7280, 11, 497, 3085, 11, 597, 307, 264], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 134, "seek": 60456, "start": 611.68, "end": 614.1999999999999, "text": " first API register.", "tokens": [700, 9362, 7280, 13], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 135, "seek": 60456, "start": 614.1999999999999, "end": 621.76, "text": " The page which is being used, again similarly to SEL4, is going to be placed into that process's", "tokens": [440, 3028, 597, 307, 885, 1143, 11, 797, 14138, 281, 318, 3158, 19, 11, 307, 516, 281, 312, 7074, 666, 300, 1399, 311], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 136, "seek": 60456, "start": 621.76, "end": 627.64, "text": " IPC buffer, which is done here with a fake capability address for the page.", "tokens": [8671, 34, 21762, 11, 597, 307, 1096, 510, 365, 257, 7592, 13759, 2985, 337, 264, 3028, 13], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 137, "seek": 60456, "start": 627.64, "end": 633.1199999999999, "text": " And then we have additional arguments like the message tag, which contains the operation", "tokens": [400, 550, 321, 362, 4497, 12869, 411, 264, 3636, 6162, 11, 597, 8306, 264, 6916], "temperature": 0.0, "avg_logprob": -0.10411723306245893, "compression_ratio": 1.6401515151515151, "no_speech_prob": 2.667576336534694e-05}, {"id": 138, "seek": 63312, "start": 633.12, "end": 636.24, "text": " name, the number of capabilities, and a number of parameters.", "tokens": [1315, 11, 264, 1230, 295, 10862, 11, 293, 257, 1230, 295, 9834, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 139, "seek": 63312, "start": 636.24, "end": 638.72, "text": " And then any additional arguments to the function.", "tokens": [400, 550, 604, 4497, 12869, 281, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 140, "seek": 63312, "start": 638.72, "end": 644.28, "text": " You run syscall, and the operation happens.", "tokens": [509, 1190, 262, 749, 45459, 11, 293, 264, 6916, 2314, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 141, "seek": 63312, "start": 644.28, "end": 648.84, "text": " I also want to talk a little bit about the specifics of interprocess communication.", "tokens": [286, 611, 528, 281, 751, 257, 707, 857, 466, 264, 28454, 295, 728, 41075, 6101, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 142, "seek": 63312, "start": 648.84, "end": 655.44, "text": " So we have two approaches, and I'll first look at endpoints, which they are kind of", "tokens": [407, 321, 362, 732, 11587, 11, 293, 286, 603, 700, 574, 412, 917, 20552, 11, 597, 436, 366, 733, 295], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 143, "seek": 63312, "start": 655.44, "end": 657.44, "text": " a generalized form of IPC.", "tokens": [257, 44498, 1254, 295, 8671, 34, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 144, "seek": 63312, "start": 657.44, "end": 660.48, "text": " And the way you use them is very similar to how you use chronologics.", "tokens": [400, 264, 636, 291, 764, 552, 307, 588, 2531, 281, 577, 291, 764, 19393, 1132, 1167, 13], "temperature": 0.0, "avg_logprob": -0.17168989968956064, "compression_ratio": 1.6130268199233717, "no_speech_prob": 7.294435363291996e-06}, {"id": 145, "seek": 66048, "start": 660.48, "end": 667.08, "text": " In fact, the interface is uniform, but it can send a set of registers or a set of capabilities", "tokens": [682, 1186, 11, 264, 9226, 307, 9452, 11, 457, 309, 393, 2845, 257, 992, 295, 38351, 420, 257, 992, 295, 10862], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 146, "seek": 66048, "start": 667.08, "end": 668.28, "text": " between tasks.", "tokens": [1296, 9608, 13], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 147, "seek": 66048, "start": 668.28, "end": 671.76, "text": " So one task can transfer a capability to another task.", "tokens": [407, 472, 5633, 393, 5003, 257, 13759, 281, 1071, 5633, 13], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 148, "seek": 66048, "start": 671.76, "end": 675.84, "text": " There is synchronous, so calling send on an endpoint or calling receive on an endpoint", "tokens": [821, 307, 44743, 11, 370, 5141, 2845, 322, 364, 35795, 420, 5141, 4774, 322, 364, 35795], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 149, "seek": 66048, "start": 675.84, "end": 679.28, "text": " will block until the two tasks run debut.", "tokens": [486, 3461, 1826, 264, 732, 9608, 1190, 13828, 13], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 150, "seek": 66048, "start": 679.28, "end": 684.0, "text": " And if there are many senders or many receivers, then the one who has been blocked the longest", "tokens": [400, 498, 456, 366, 867, 2845, 433, 420, 867, 49196, 11, 550, 264, 472, 567, 575, 668, 15470, 264, 15438], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 151, "seek": 66048, "start": 684.0, "end": 688.8000000000001, "text": " will wake up, so you can have many processes, maybe doing some kind of load balancing operation", "tokens": [486, 6634, 493, 11, 370, 291, 393, 362, 867, 7555, 11, 1310, 884, 512, 733, 295, 3677, 22495, 6916], "temperature": 0.0, "avg_logprob": -0.11317874245021654, "compression_ratio": 1.7859778597785978, "no_speech_prob": 6.602334906347096e-05}, {"id": 152, "seek": 68880, "start": 688.8, "end": 691.12, "text": " against IPC operations.", "tokens": [1970, 8671, 34, 7705, 13], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 153, "seek": 68880, "start": 691.12, "end": 696.64, "text": " And also, SEL4 style call and reply is supported, so if one task does a call rather than a send,", "tokens": [400, 611, 11, 318, 3158, 19, 3758, 818, 293, 16972, 307, 8104, 11, 370, 498, 472, 5633, 775, 257, 818, 2831, 813, 257, 2845, 11], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 154, "seek": 68880, "start": 696.64, "end": 700.0, "text": " then it immediately blocks waiting for the reply, which is guaranteed to go back to the", "tokens": [550, 309, 4258, 8474, 3806, 337, 264, 16972, 11, 597, 307, 18031, 281, 352, 646, 281, 264], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 155, "seek": 68880, "start": 700.0, "end": 703.56, "text": " same thread.", "tokens": [912, 7207, 13], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 156, "seek": 68880, "start": 703.56, "end": 709.0, "text": " I have here a more detailed example of exactly how that kind of IPC interaction looks on", "tokens": [286, 362, 510, 257, 544, 9942, 1365, 295, 2293, 577, 300, 733, 295, 8671, 34, 9285, 1542, 322], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 157, "seek": 68880, "start": 709.0, "end": 710.5999999999999, "text": " Helios.", "tokens": [6128, 2717, 13], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 158, "seek": 68880, "start": 710.5999999999999, "end": 715.0799999999999, "text": " So I have here on the left one task, and on the right two tasks that want to communicate", "tokens": [407, 286, 362, 510, 322, 264, 1411, 472, 5633, 11, 293, 322, 264, 558, 732, 9608, 300, 528, 281, 7890], "temperature": 0.0, "avg_logprob": -0.14256878433940567, "compression_ratio": 1.5775193798449612, "no_speech_prob": 2.839892295014579e-05}, {"id": 159, "seek": 71508, "start": 715.08, "end": 719.2800000000001, "text": " with each other, and the text which is in black is taking place in user space, and the", "tokens": [365, 1184, 661, 11, 293, 264, 2487, 597, 307, 294, 2211, 307, 1940, 1081, 294, 4195, 1901, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 160, "seek": 71508, "start": 719.2800000000001, "end": 722.5600000000001, "text": " text in red is taking place in kernel space.", "tokens": [2487, 294, 2182, 307, 1940, 1081, 294, 28256, 1901, 13], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 161, "seek": 71508, "start": 722.5600000000001, "end": 728.6800000000001, "text": " So let's say task two is a daemon or a service of some kind which wants to provide a service,", "tokens": [407, 718, 311, 584, 5633, 732, 307, 257, 1120, 36228, 420, 257, 2643, 295, 512, 733, 597, 2738, 281, 2893, 257, 2643, 11], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 162, "seek": 71508, "start": 728.6800000000001, "end": 733.5200000000001, "text": " and so it's going to essentially have its main IO loop call sys receive and then block", "tokens": [293, 370, 309, 311, 516, 281, 4476, 362, 1080, 2135, 39839, 6367, 818, 262, 749, 4774, 293, 550, 3461], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 163, "seek": 71508, "start": 733.5200000000001, "end": 735.6800000000001, "text": " until somebody has work for it to do.", "tokens": [1826, 2618, 575, 589, 337, 309, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 164, "seek": 71508, "start": 735.6800000000001, "end": 740.44, "text": " And task one wants to be a consumer of that interface, so it will invoke sys call, and", "tokens": [400, 5633, 472, 2738, 281, 312, 257, 9711, 295, 300, 9226, 11, 370, 309, 486, 41117, 262, 749, 818, 11, 293], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 165, "seek": 71508, "start": 740.44, "end": 744.96, "text": " the kernel will notice that task two is blocked waiting for somebody to call it.", "tokens": [264, 28256, 486, 3449, 300, 5633, 732, 307, 15470, 3806, 337, 2618, 281, 818, 309, 13], "temperature": 0.0, "avg_logprob": -0.14015038333722016, "compression_ratio": 1.8566308243727598, "no_speech_prob": 4.1316674469271675e-05}, {"id": 166, "seek": 74496, "start": 744.96, "end": 749.8000000000001, "text": " And so the kernel will perform the copy of registers, move any capabilities as necessary,", "tokens": [400, 370, 264, 28256, 486, 2042, 264, 5055, 295, 38351, 11, 1286, 604, 10862, 382, 4818, 11], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 167, "seek": 74496, "start": 749.8000000000001, "end": 753.88, "text": " unblock task two, and then block task one while they wait for task two to process the", "tokens": [517, 28830, 5633, 732, 11, 293, 550, 3461, 5633, 472, 1339, 436, 1699, 337, 5633, 732, 281, 1399, 264], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 168, "seek": 74496, "start": 753.88, "end": 757.24, "text": " message and prepare a reply, which is what happens next over here.", "tokens": [3636, 293, 5940, 257, 16972, 11, 597, 307, 437, 2314, 958, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 169, "seek": 74496, "start": 757.24, "end": 762.0400000000001, "text": " The sys call returns from task two, they process the IPC request according to however", "tokens": [440, 262, 749, 818, 11247, 490, 5633, 732, 11, 436, 1399, 264, 8671, 34, 5308, 4650, 281, 4461], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 170, "seek": 74496, "start": 762.0400000000001, "end": 766.12, "text": " they implement their services, and they call the reply sys call, which copies the reply", "tokens": [436, 4445, 641, 3328, 11, 293, 436, 818, 264, 16972, 262, 749, 818, 11, 597, 14341, 264, 16972], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 171, "seek": 74496, "start": 766.12, "end": 771.6, "text": " registers back to task one, very similar to this fourth step, and then unblocks task", "tokens": [38351, 646, 281, 5633, 472, 11, 588, 2531, 281, 341, 6409, 1823, 11, 293, 550, 517, 15962, 2761, 5633], "temperature": 0.0, "avg_logprob": -0.11568803546809349, "compression_ratio": 1.8218181818181818, "no_speech_prob": 2.3905384296085685e-05}, {"id": 172, "seek": 77160, "start": 771.6, "end": 781.16, "text": " one, and then both of them can proceed onwards with whatever CPU time they're given.", "tokens": [472, 11, 293, 550, 1293, 295, 552, 393, 8991, 34230, 365, 2035, 13199, 565, 436, 434, 2212, 13], "temperature": 0.0, "avg_logprob": -0.1556706428527832, "compression_ratio": 1.5253623188405796, "no_speech_prob": 1.078169862012146e-05}, {"id": 173, "seek": 77160, "start": 781.16, "end": 784.36, "text": " Another interesting feature we have in terms of endpoints, which is one of the things that", "tokens": [3996, 1880, 4111, 321, 362, 294, 2115, 295, 917, 20552, 11, 597, 307, 472, 295, 264, 721, 300], "temperature": 0.0, "avg_logprob": -0.1556706428527832, "compression_ratio": 1.5253623188405796, "no_speech_prob": 1.078169862012146e-05}, {"id": 174, "seek": 77160, "start": 784.36, "end": 789.96, "text": " distinguishes Helios from SEL4, is support for a pull-like interface.", "tokens": [11365, 16423, 6128, 2717, 490, 318, 3158, 19, 11, 307, 1406, 337, 257, 2235, 12, 4092, 9226, 13], "temperature": 0.0, "avg_logprob": -0.1556706428527832, "compression_ratio": 1.5253623188405796, "no_speech_prob": 1.078169862012146e-05}, {"id": 175, "seek": 77160, "start": 789.96, "end": 795.08, "text": " Similar to Unix's pull on file descriptors, Helios lets you pull on capabilities.", "tokens": [10905, 281, 1156, 970, 311, 2235, 322, 3991, 31280, 830, 11, 6128, 2717, 6653, 291, 2235, 322, 10862, 13], "temperature": 0.0, "avg_logprob": -0.1556706428527832, "compression_ratio": 1.5253623188405796, "no_speech_prob": 1.078169862012146e-05}, {"id": 176, "seek": 77160, "start": 795.08, "end": 801.4, "text": " So this is an example from the serial driver that I implemented for the standard X86 comports", "tokens": [407, 341, 307, 364, 1365, 490, 264, 17436, 6787, 300, 286, 12270, 337, 264, 3832, 1783, 22193, 715, 3299], "temperature": 0.0, "avg_logprob": -0.1556706428527832, "compression_ratio": 1.5253623188405796, "no_speech_prob": 1.078169862012146e-05}, {"id": 177, "seek": 80140, "start": 801.4, "end": 802.4, "text": " service.", "tokens": [2643, 13], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 178, "seek": 80140, "start": 802.4, "end": 805.12, "text": " It has two capabilities it mainly cares about.", "tokens": [467, 575, 732, 10862, 309, 8704, 12310, 466, 13], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 179, "seek": 80140, "start": 805.12, "end": 810.24, "text": " It has an endpoint capability that it uses to implement its API for consumers of the", "tokens": [467, 575, 364, 35795, 13759, 300, 309, 4960, 281, 4445, 1080, 9362, 337, 11883, 295, 264], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 180, "seek": 80140, "start": 810.24, "end": 811.24, "text": " serial port.", "tokens": [17436, 2436, 13], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 181, "seek": 80140, "start": 811.24, "end": 814.92, "text": " So if you want to request a read or a write from serial, you'll send a message to this", "tokens": [407, 498, 291, 528, 281, 5308, 257, 1401, 420, 257, 2464, 490, 17436, 11, 291, 603, 2845, 257, 3636, 281, 341], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 182, "seek": 80140, "start": 814.92, "end": 819.68, "text": " endpoint, and then it has an IRQ handler for when the serial port says it's ready to receive", "tokens": [35795, 11, 293, 550, 309, 575, 364, 16486, 48, 41967, 337, 562, 264, 17436, 2436, 1619, 309, 311, 1919, 281, 4774], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 183, "seek": 80140, "start": 819.68, "end": 821.76, "text": " or transmit more data.", "tokens": [420, 17831, 544, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 184, "seek": 80140, "start": 821.76, "end": 825.28, "text": " And you can prepare a list of capabilities you're interested in, and a list of events", "tokens": [400, 291, 393, 5940, 257, 1329, 295, 10862, 291, 434, 3102, 294, 11, 293, 257, 1329, 295, 3931], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 185, "seek": 80140, "start": 825.28, "end": 830.48, "text": " you're interested in, and block on pull, and then when one of those is ready to be done,", "tokens": [291, 434, 3102, 294, 11, 293, 3461, 322, 2235, 11, 293, 550, 562, 472, 295, 729, 307, 1919, 281, 312, 1096, 11], "temperature": 0.0, "avg_logprob": -0.15106545051519019, "compression_ratio": 1.869718309859155, "no_speech_prob": 7.247782195918262e-05}, {"id": 186, "seek": 83048, "start": 830.48, "end": 836.64, "text": " you can call it, and it's guaranteed not to block, very similar to the Unix pull syscall.", "tokens": [291, 393, 818, 309, 11, 293, 309, 311, 18031, 406, 281, 3461, 11, 588, 2531, 281, 264, 1156, 970, 2235, 262, 749, 45459, 13], "temperature": 0.0, "avg_logprob": -0.12237656976758819, "compression_ratio": 1.6218487394957983, "no_speech_prob": 9.513934855931439e-06}, {"id": 187, "seek": 83048, "start": 836.64, "end": 842.64, "text": " And again, I think this is, for me, one of the more notable improvements and derivations", "tokens": [400, 797, 11, 286, 519, 341, 307, 11, 337, 385, 11, 472, 295, 264, 544, 22556, 13797, 293, 10151, 763], "temperature": 0.0, "avg_logprob": -0.12237656976758819, "compression_ratio": 1.6218487394957983, "no_speech_prob": 9.513934855931439e-06}, {"id": 188, "seek": 83048, "start": 842.64, "end": 846.4, "text": " from the SEL4 model.", "tokens": [490, 264, 318, 3158, 19, 2316, 13], "temperature": 0.0, "avg_logprob": -0.12237656976758819, "compression_ratio": 1.6218487394957983, "no_speech_prob": 9.513934855931439e-06}, {"id": 189, "seek": 83048, "start": 846.4, "end": 851.6, "text": " And I mentioned this earlier, but this interface for doing endpoints and for invoking kernel", "tokens": [400, 286, 2835, 341, 3071, 11, 457, 341, 9226, 337, 884, 917, 20552, 293, 337, 1048, 5953, 28256], "temperature": 0.0, "avg_logprob": -0.12237656976758819, "compression_ratio": 1.6218487394957983, "no_speech_prob": 9.513934855931439e-06}, {"id": 190, "seek": 83048, "start": 851.6, "end": 857.9200000000001, "text": " objects like virtual outer spaces is uniform between user space endpoints and kernel objects.", "tokens": [6565, 411, 6374, 10847, 7673, 307, 9452, 1296, 4195, 1901, 917, 20552, 293, 28256, 6565, 13], "temperature": 0.0, "avg_logprob": -0.12237656976758819, "compression_ratio": 1.6218487394957983, "no_speech_prob": 9.513934855931439e-06}, {"id": 191, "seek": 85792, "start": 857.92, "end": 863.24, "text": " So it is, for example, possible for a user space process to create a set of endpoints", "tokens": [407, 309, 307, 11, 337, 1365, 11, 1944, 337, 257, 4195, 1901, 1399, 281, 1884, 257, 992, 295, 917, 20552], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 192, "seek": 85792, "start": 863.24, "end": 868.0, "text": " and then use them to implement an API which is identical to the kernel API.", "tokens": [293, 550, 764, 552, 281, 4445, 364, 9362, 597, 307, 14800, 281, 264, 28256, 9362, 13], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 193, "seek": 85792, "start": 868.0, "end": 872.0799999999999, "text": " And if that process is the parent of some other process which thinks it's talking directly", "tokens": [400, 498, 300, 1399, 307, 264, 2596, 295, 512, 661, 1399, 597, 7309, 309, 311, 1417, 3838], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 194, "seek": 85792, "start": 872.0799999999999, "end": 875.64, "text": " to kernel, it can be sandboxed according to whatever kind of policy you want.", "tokens": [281, 28256, 11, 309, 393, 312, 42115, 292, 4650, 281, 2035, 733, 295, 3897, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 195, "seek": 85792, "start": 875.64, "end": 881.28, "text": " So the kernel is using this API which is uniform with the way that user space communicates", "tokens": [407, 264, 28256, 307, 1228, 341, 9362, 597, 307, 9452, 365, 264, 636, 300, 4195, 1901, 3363, 1024], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 196, "seek": 85792, "start": 881.28, "end": 886.16, "text": " with itself, and thus user space can fill the role of the kernel in sometimes.", "tokens": [365, 2564, 11, 293, 8807, 4195, 1901, 393, 2836, 264, 3090, 295, 264, 28256, 294, 2171, 13], "temperature": 0.0, "avg_logprob": -0.08188335034025818, "compression_ratio": 1.7985611510791366, "no_speech_prob": 6.337186277960427e-06}, {"id": 197, "seek": 88616, "start": 886.16, "end": 890.8399999999999, "text": " This can, for example, allow you to very easily run several different Helio systems on the", "tokens": [639, 393, 11, 337, 1365, 11, 2089, 291, 281, 588, 3612, 1190, 2940, 819, 6128, 1004, 3652, 322, 264], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 198, "seek": 88616, "start": 890.8399999999999, "end": 898.76, "text": " same computer at once without going to virtualization, which is kind of interesting.", "tokens": [912, 3820, 412, 1564, 1553, 516, 281, 6374, 2144, 11, 597, 307, 733, 295, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 199, "seek": 88616, "start": 898.76, "end": 904.52, "text": " So here I have a little bit more detail on capabilities in particular, and then the implementation", "tokens": [407, 510, 286, 362, 257, 707, 857, 544, 2607, 322, 10862, 294, 1729, 11, 293, 550, 264, 11420], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 200, "seek": 88616, "start": 904.52, "end": 907.92, "text": " that some of our capability objects use.", "tokens": [300, 512, 295, 527, 13759, 6565, 764, 13], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 201, "seek": 88616, "start": 907.92, "end": 912.48, "text": " Here we have a capability space on the left, which is, again, a little bit distinct from", "tokens": [1692, 321, 362, 257, 13759, 1901, 322, 264, 1411, 11, 597, 307, 11, 797, 11, 257, 707, 857, 10644, 490], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 202, "seek": 88616, "start": 912.48, "end": 913.48, "text": " SEL4.", "tokens": [318, 3158, 19, 13], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 203, "seek": 88616, "start": 913.48, "end": 915.16, "text": " We don't use guarded page tables.", "tokens": [492, 500, 380, 764, 44157, 3028, 8020, 13], "temperature": 0.0, "avg_logprob": -0.1147489197757266, "compression_ratio": 1.6263736263736264, "no_speech_prob": 5.954351308901096e-06}, {"id": 204, "seek": 91516, "start": 915.16, "end": 917.04, "text": " It's more like a file descriptor table.", "tokens": [467, 311, 544, 411, 257, 3991, 31280, 284, 3199, 13], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 205, "seek": 91516, "start": 917.04, "end": 923.4399999999999, "text": " It's just zero to however many slots are allocated in that capability space, and the process", "tokens": [467, 311, 445, 4018, 281, 4461, 867, 24266, 366, 29772, 294, 300, 13759, 1901, 11, 293, 264, 1399], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 206, "seek": 91516, "start": 923.4399999999999, "end": 928.28, "text": " invokes a capability by its number, not by its address.", "tokens": [1048, 8606, 257, 13759, 538, 1080, 1230, 11, 406, 538, 1080, 2985, 13], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 207, "seek": 91516, "start": 928.28, "end": 933.6, "text": " Here we have an example of slots where we have a number of things which are preallocated,", "tokens": [1692, 321, 362, 364, 1365, 295, 24266, 689, 321, 362, 257, 1230, 295, 721, 597, 366, 659, 336, 905, 770, 11], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 208, "seek": 91516, "start": 933.6, "end": 936.7199999999999, "text": " but then notably we also have some empty capability slots.", "tokens": [457, 550, 31357, 321, 611, 362, 512, 6707, 13759, 24266, 13], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 209, "seek": 91516, "start": 936.7199999999999, "end": 941.28, "text": " And another derivation from the SEL4 model is that we support capability allocation in", "tokens": [400, 1071, 10151, 399, 490, 264, 318, 3158, 19, 2316, 307, 300, 321, 1406, 13759, 27599, 294], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 210, "seek": 91516, "start": 941.28, "end": 942.28, "text": " the kernel.", "tokens": [264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.08962593603571621, "compression_ratio": 1.689922480620155, "no_speech_prob": 2.3175691239885055e-05}, {"id": 211, "seek": 94228, "start": 942.28, "end": 946.36, "text": " We do this by maintaining inside of empty capabilities a free list.", "tokens": [492, 360, 341, 538, 14916, 1854, 295, 6707, 10862, 257, 1737, 1329, 13], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 212, "seek": 94228, "start": 946.36, "end": 952.04, "text": " And so when you invoke an endpoint or you want to allocate a capability, you can set", "tokens": [400, 370, 562, 291, 41117, 364, 35795, 420, 291, 528, 281, 35713, 257, 13759, 11, 291, 393, 992], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 213, "seek": 94228, "start": 952.04, "end": 957.56, "text": " the capability address to the maximum possible address, and the kernel will allocate one", "tokens": [264, 13759, 2985, 281, 264, 6674, 1944, 2985, 11, 293, 264, 28256, 486, 35713, 472], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 214, "seek": 94228, "start": 957.56, "end": 958.88, "text": " for you using the free list.", "tokens": [337, 291, 1228, 264, 1737, 1329, 13], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 215, "seek": 94228, "start": 958.88, "end": 962.76, "text": " You don't have to worry about that state in user space, which is, I think, a very nice", "tokens": [509, 500, 380, 362, 281, 3292, 466, 300, 1785, 294, 4195, 1901, 11, 597, 307, 11, 286, 519, 11, 257, 588, 1481], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 216, "seek": 94228, "start": 962.76, "end": 968.8, "text": " convenience to have and very easy to implement as well.", "tokens": [19283, 281, 362, 293, 588, 1858, 281, 4445, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.10841404914855957, "compression_ratio": 1.6926229508196722, "no_speech_prob": 9.967732694349252e-06}, {"id": 217, "seek": 96880, "start": 968.8, "end": 972.56, "text": " This is a list of the capabilities that we have implemented.", "tokens": [639, 307, 257, 1329, 295, 264, 10862, 300, 321, 362, 12270, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 218, "seek": 96880, "start": 972.56, "end": 976.28, "text": " On the left here is a list of all the capabilities which are available on every architecture.", "tokens": [1282, 264, 1411, 510, 307, 257, 1329, 295, 439, 264, 10862, 597, 366, 2435, 322, 633, 9482, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 219, "seek": 96880, "start": 976.28, "end": 981.4799999999999, "text": " We have things like memory, device memory, IPC capabilities, threads, and so on.", "tokens": [492, 362, 721, 411, 4675, 11, 4302, 4675, 11, 8671, 34, 10862, 11, 19314, 11, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 220, "seek": 96880, "start": 981.4799999999999, "end": 984.76, "text": " And then on the right, we have a number of additional capabilities which are specific", "tokens": [400, 550, 322, 264, 558, 11, 321, 362, 257, 1230, 295, 4497, 10862, 597, 366, 2685], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 221, "seek": 96880, "start": 984.76, "end": 985.76, "text": " to each port.", "tokens": [281, 1184, 2436, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 222, "seek": 96880, "start": 985.76, "end": 993.4399999999999, "text": " In this case, I've listed the capabilities which are used on x8664.", "tokens": [682, 341, 1389, 11, 286, 600, 10052, 264, 10862, 597, 366, 1143, 322, 2031, 22193, 19395, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 223, "seek": 96880, "start": 993.4399999999999, "end": 997.28, "text": " I'm going to look at just a few of these.", "tokens": [286, 478, 516, 281, 574, 412, 445, 257, 1326, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.11588955762093528, "compression_ratio": 1.7658730158730158, "no_speech_prob": 2.6421225811645854e-06}, {"id": 224, "seek": 99728, "start": 997.28, "end": 1002.9599999999999, "text": " First I want to talk about memory management, again, very similar to how we use capability", "tokens": [2386, 286, 528, 281, 751, 466, 4675, 4592, 11, 797, 11, 588, 2531, 281, 577, 321, 764, 13759], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 225, "seek": 99728, "start": 1002.9599999999999, "end": 1006.92, "text": " allocation with the C space in the kernel using a free list.", "tokens": [27599, 365, 264, 383, 1901, 294, 264, 28256, 1228, 257, 1737, 1329, 13], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 226, "seek": 99728, "start": 1006.92, "end": 1012.3199999999999, "text": " We also derivate from SCL4 in that general purpose memory uses a free list as well so", "tokens": [492, 611, 10151, 473, 490, 9028, 43, 19, 294, 300, 2674, 4334, 4675, 4960, 257, 1737, 1329, 382, 731, 370], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 227, "seek": 99728, "start": 1012.3199999999999, "end": 1016.68, "text": " you can allocate pages without trying to keep track of a watermark, without trying to reset", "tokens": [291, 393, 35713, 7183, 1553, 1382, 281, 1066, 2837, 295, 257, 1281, 5638, 11, 1553, 1382, 281, 14322], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 228, "seek": 99728, "start": 1016.68, "end": 1019.3199999999999, "text": " your watermark, or divide it into smaller objects.", "tokens": [428, 1281, 5638, 11, 420, 9845, 309, 666, 4356, 6565, 13], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 229, "seek": 99728, "start": 1019.3199999999999, "end": 1023.28, "text": " We have a free list of pages, so you can just allocate pages, which is quite nice.", "tokens": [492, 362, 257, 1737, 1329, 295, 7183, 11, 370, 291, 393, 445, 35713, 7183, 11, 597, 307, 1596, 1481, 13], "temperature": 0.0, "avg_logprob": -0.14188674458286218, "compression_ratio": 1.7471698113207548, "no_speech_prob": 2.9761480618617497e-05}, {"id": 230, "seek": 102328, "start": 1023.28, "end": 1029.52, "text": " But the only reason the slide is here is to tell you how it differs from SCL4.", "tokens": [583, 264, 787, 1778, 264, 4137, 307, 510, 307, 281, 980, 291, 577, 309, 37761, 490, 9028, 43, 19, 13], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 231, "seek": 102328, "start": 1029.52, "end": 1034.96, "text": " We also have address space capabilities, vspaces, which is, again, similar to SCL4.", "tokens": [492, 611, 362, 2985, 1901, 10862, 11, 371, 4952, 2116, 11, 597, 307, 11, 797, 11, 2531, 281, 9028, 43, 19, 13], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 232, "seek": 102328, "start": 1034.96, "end": 1039.6399999999999, "text": " In fact, it's so similar that we've cargo-cultured this constraint that you can't share page", "tokens": [682, 1186, 11, 309, 311, 370, 2531, 300, 321, 600, 19449, 12, 66, 723, 3831, 341, 25534, 300, 291, 393, 380, 2073, 3028], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 233, "seek": 102328, "start": 1039.6399999999999, "end": 1040.6399999999999, "text": " tables.", "tokens": [8020, 13], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 234, "seek": 102328, "start": 1040.6399999999999, "end": 1045.68, "text": " I don't really know why SCL4 does that, but once we understand, then we will probably", "tokens": [286, 500, 380, 534, 458, 983, 9028, 43, 19, 775, 300, 11, 457, 1564, 321, 1223, 11, 550, 321, 486, 1391], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 235, "seek": 102328, "start": 1045.68, "end": 1048.6399999999999, "text": " either commit to this or change our mind.", "tokens": [2139, 5599, 281, 341, 420, 1319, 527, 1575, 13], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 236, "seek": 102328, "start": 1048.6399999999999, "end": 1052.76, "text": " But we have virtual address space capabilities which can be used to manage processes.", "tokens": [583, 321, 362, 6374, 2985, 1901, 10862, 597, 393, 312, 1143, 281, 3067, 7555, 13], "temperature": 0.0, "avg_logprob": -0.13079820573329926, "compression_ratio": 1.65625, "no_speech_prob": 1.0284874406352174e-05}, {"id": 237, "seek": 105276, "start": 1052.76, "end": 1058.0, "text": " And then we have tasks, which can be either a thread or a process or something else if", "tokens": [400, 550, 321, 362, 9608, 11, 597, 393, 312, 2139, 257, 7207, 420, 257, 1399, 420, 746, 1646, 498], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 238, "seek": 105276, "start": 1058.0, "end": 1059.56, "text": " you come up with something creative.", "tokens": [291, 808, 493, 365, 746, 5880, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 239, "seek": 105276, "start": 1059.56, "end": 1063.52, "text": " But essentially, a task just has a capability space, which is optional, so that I can do", "tokens": [583, 4476, 11, 257, 5633, 445, 575, 257, 13759, 1901, 11, 597, 307, 17312, 11, 370, 300, 286, 393, 360], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 240, "seek": 105276, "start": 1063.52, "end": 1068.84, "text": " IO and invoke capabilities as an address space, and it receives some CPU time when it is configured", "tokens": [39839, 293, 41117, 10862, 382, 364, 2985, 1901, 11, 293, 309, 20717, 512, 13199, 565, 562, 309, 307, 30538], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 241, "seek": 105276, "start": 1068.84, "end": 1069.84, "text": " appropriately.", "tokens": [23505, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 242, "seek": 105276, "start": 1069.84, "end": 1071.8, "text": " And again, we don't have SMP support yet.", "tokens": [400, 797, 11, 321, 500, 380, 362, 318, 12224, 1406, 1939, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 243, "seek": 105276, "start": 1071.8, "end": 1073.72, "text": " We would like to do that soon.", "tokens": [492, 576, 411, 281, 360, 300, 2321, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 244, "seek": 105276, "start": 1073.72, "end": 1075.76, "text": " And for now, the scheduler is very simple.", "tokens": [400, 337, 586, 11, 264, 12000, 260, 307, 588, 2199, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 245, "seek": 105276, "start": 1075.76, "end": 1081.08, "text": " We just have a round-robin scheduler, but we would like to expand that in the future.", "tokens": [492, 445, 362, 257, 3098, 12, 340, 13496, 12000, 260, 11, 457, 321, 576, 411, 281, 5268, 300, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.15062811715262278, "compression_ratio": 1.6635220125786163, "no_speech_prob": 2.4286993721034378e-05}, {"id": 246, "seek": 108108, "start": 1081.08, "end": 1086.28, "text": " It should be at least easy enough to add priorities or niceness, and we can probably look into", "tokens": [467, 820, 312, 412, 1935, 1858, 1547, 281, 909, 15503, 420, 6201, 15264, 11, 293, 321, 393, 1391, 574, 666], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 247, "seek": 108108, "start": 1086.28, "end": 1089.76, "text": " some more sophisticated exclusions a little bit later.", "tokens": [512, 544, 16950, 15085, 626, 257, 707, 857, 1780, 13], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 248, "seek": 108108, "start": 1089.76, "end": 1092.4399999999998, "text": " Oh, and I missed one on my notes here.", "tokens": [876, 11, 293, 286, 6721, 472, 322, 452, 5570, 510, 13], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 249, "seek": 108108, "start": 1092.4399999999998, "end": 1096.8799999999999, "text": " A quick note to add on the topic of address spaces is that I think it's implemented a", "tokens": [316, 1702, 3637, 281, 909, 322, 264, 4829, 295, 2985, 7673, 307, 300, 286, 519, 309, 311, 12270, 257], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 250, "seek": 108108, "start": 1096.8799999999999, "end": 1101.48, "text": " little bit more elegantly than SCL4, but I did not write down why in my notes, so you'll", "tokens": [707, 857, 544, 14459, 3627, 813, 9028, 43, 19, 11, 457, 286, 630, 406, 2464, 760, 983, 294, 452, 5570, 11, 370, 291, 603], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 251, "seek": 108108, "start": 1101.48, "end": 1103.9199999999998, "text": " have to take my word for it.", "tokens": [362, 281, 747, 452, 1349, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 252, "seek": 108108, "start": 1103.9199999999998, "end": 1109.56, "text": " OK, so that's enough about the design.", "tokens": [2264, 11, 370, 300, 311, 1547, 466, 264, 1715, 13], "temperature": 0.0, "avg_logprob": -0.16889400805457164, "compression_ratio": 1.5787545787545787, "no_speech_prob": 1.4060155990591738e-05}, {"id": 253, "seek": 110956, "start": 1109.56, "end": 1113.2, "text": " I'd like to talk a little bit about the implementation.", "tokens": [286, 1116, 411, 281, 751, 257, 707, 857, 466, 264, 11420, 13], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 254, "seek": 110956, "start": 1113.2, "end": 1117.8, "text": " The goal is to keep the kernel very straightforward when it comes to booting.", "tokens": [440, 3387, 307, 281, 1066, 264, 28256, 588, 15325, 562, 309, 1487, 281, 11450, 278, 13], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 255, "seek": 110956, "start": 1117.8, "end": 1122.28, "text": " I don't really care for the never-ending nightmare, which is different ways of booting", "tokens": [286, 500, 380, 534, 1127, 337, 264, 1128, 12, 2029, 18724, 11, 597, 307, 819, 2098, 295, 11450, 278], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 256, "seek": 110956, "start": 1122.28, "end": 1123.6399999999999, "text": " up computers.", "tokens": [493, 10807, 13], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 257, "seek": 110956, "start": 1123.6399999999999, "end": 1129.8799999999999, "text": " And so the kernel is an Elf executable, and the bootloader's job is to do whatever", "tokens": [400, 370, 264, 28256, 307, 364, 2699, 69, 7568, 712, 11, 293, 264, 11450, 2907, 260, 311, 1691, 307, 281, 360, 2035], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 258, "seek": 110956, "start": 1129.8799999999999, "end": 1134.44, "text": " crazy bullshit is required on whatever platform it's running on to just load a goddamn Elf", "tokens": [3219, 22676, 307, 4739, 322, 2035, 3663, 309, 311, 2614, 322, 281, 445, 3677, 257, 32951, 2699, 69], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 259, "seek": 110956, "start": 1134.44, "end": 1135.72, "text": " executable into memory.", "tokens": [7568, 712, 666, 4675, 13], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 260, "seek": 110956, "start": 1135.72, "end": 1138.12, "text": " So that's what we've done.", "tokens": [407, 300, 311, 437, 321, 600, 1096, 13], "temperature": 0.0, "avg_logprob": -0.11403656005859375, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.5062327040359378e-05}, {"id": 261, "seek": 113812, "start": 1138.12, "end": 1142.7199999999998, "text": " And these bootloaders are also implemented in here, by the way.", "tokens": [400, 613, 11450, 2907, 433, 366, 611, 12270, 294, 510, 11, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 262, "seek": 113812, "start": 1142.7199999999998, "end": 1146.8, "text": " We support, again, multi-boot in X86, and EFI and AR64, and we'll do EFI everywhere", "tokens": [492, 1406, 11, 797, 11, 4825, 12, 1763, 310, 294, 1783, 22193, 11, 293, 462, 38568, 293, 8943, 19395, 11, 293, 321, 603, 360, 462, 38568, 5315], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 263, "seek": 113812, "start": 1146.8, "end": 1147.8, "text": " soon.", "tokens": [2321, 13], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 264, "seek": 113812, "start": 1147.8, "end": 1151.36, "text": " But the bootloader comes up, and it's responsible for a few things.", "tokens": [583, 264, 11450, 2907, 260, 1487, 493, 11, 293, 309, 311, 6250, 337, 257, 1326, 721, 13], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 265, "seek": 113812, "start": 1151.36, "end": 1153.7199999999998, "text": " It has to, of course, read the memory map.", "tokens": [467, 575, 281, 11, 295, 1164, 11, 1401, 264, 4675, 4471, 13], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 266, "seek": 113812, "start": 1153.7199999999998, "end": 1158.4799999999998, "text": " It also has to load from the file system any boot modules, like similar to an initRAMFS", "tokens": [467, 611, 575, 281, 3677, 490, 264, 3991, 1185, 604, 11450, 16679, 11, 411, 2531, 281, 364, 3157, 49, 2865, 29318], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 267, "seek": 113812, "start": 1158.4799999999998, "end": 1163.0, "text": " on Linux, where it's going to pull out the init binary or the init executable for the", "tokens": [322, 18734, 11, 689, 309, 311, 516, 281, 2235, 484, 264, 3157, 17434, 420, 264, 3157, 7568, 712, 337, 264], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 268, "seek": 113812, "start": 1163.0, "end": 1167.36, "text": " first user space process to run, as well as maybe a tarball that init binary wants to", "tokens": [700, 4195, 1901, 1399, 281, 1190, 11, 382, 731, 382, 1310, 257, 3112, 3129, 300, 3157, 17434, 2738, 281], "temperature": 0.0, "avg_logprob": -0.18593223521251553, "compression_ratio": 1.6375, "no_speech_prob": 1.8047037883661687e-05}, {"id": 269, "seek": 116736, "start": 1167.36, "end": 1170.56, "text": " use to read some early drivers from.", "tokens": [764, 281, 1401, 512, 2440, 11590, 490, 13], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 270, "seek": 116736, "start": 1170.56, "end": 1175.28, "text": " It's also going to provide to the kernel that memory map, those boot modules, and details", "tokens": [467, 311, 611, 516, 281, 2893, 281, 264, 28256, 300, 4675, 4471, 11, 729, 11450, 16679, 11, 293, 4365], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 271, "seek": 116736, "start": 1175.28, "end": 1179.28, "text": " about the loader kernel, like where it was placed in physical memory and so on.", "tokens": [466, 264, 3677, 260, 28256, 11, 411, 689, 309, 390, 7074, 294, 4001, 4675, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 272, "seek": 116736, "start": 1179.28, "end": 1183.04, "text": " If we're booting with EFI, we're going to pass along some stuff about the EFI runtime", "tokens": [759, 321, 434, 11450, 278, 365, 462, 38568, 11, 321, 434, 516, 281, 1320, 2051, 512, 1507, 466, 264, 462, 38568, 34474], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 273, "seek": 116736, "start": 1183.04, "end": 1184.52, "text": " services.", "tokens": [3328, 13], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 274, "seek": 116736, "start": 1184.52, "end": 1190.08, "text": " And if we have a frame buffer at this stage, thanks to GOP or multi-boot, we'll pass that", "tokens": [400, 498, 321, 362, 257, 3920, 21762, 412, 341, 3233, 11, 3231, 281, 10365, 47, 420, 4825, 12, 1763, 310, 11, 321, 603, 1320, 300], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 275, "seek": 116736, "start": 1190.08, "end": 1196.08, "text": " along as well, and that will eventually make its way to user space.", "tokens": [2051, 382, 731, 11, 293, 300, 486, 4728, 652, 1080, 636, 281, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.09756619262695312, "compression_ratio": 1.660649819494585, "no_speech_prob": 1.8917118723038584e-05}, {"id": 276, "seek": 119608, "start": 1196.08, "end": 1199.0, "text": " During boot, we have system initialization.", "tokens": [6842, 11450, 11, 321, 362, 1185, 5883, 2144, 13], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 277, "seek": 119608, "start": 1199.0, "end": 1206.9199999999998, "text": " You saw a little bit of this in the earlier slide, which showed the code sample of the", "tokens": [509, 1866, 257, 707, 857, 295, 341, 294, 264, 3071, 4137, 11, 597, 4712, 264, 3089, 6889, 295, 264], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 278, "seek": 119608, "start": 1206.9199999999998, "end": 1208.84, "text": " kernel's portable entry point.", "tokens": [28256, 311, 21800, 8729, 935, 13], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 279, "seek": 119608, "start": 1208.84, "end": 1210.9199999999998, "text": " That's where the system initialization begins.", "tokens": [663, 311, 689, 264, 1185, 5883, 2144, 7338, 13], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 280, "seek": 119608, "start": 1210.9199999999998, "end": 1216.12, "text": " So of the three phases of the kernel runtime, we have the boot phase, the system initialization", "tokens": [407, 295, 264, 1045, 18764, 295, 264, 28256, 34474, 11, 321, 362, 264, 11450, 5574, 11, 264, 1185, 5883, 2144], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 281, "seek": 119608, "start": 1216.12, "end": 1217.9199999999998, "text": " phase, and the runtime phase.", "tokens": [5574, 11, 293, 264, 34474, 5574, 13], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 282, "seek": 119608, "start": 1217.9199999999998, "end": 1223.32, "text": " So during sysinit, the purpose is to do something I hinted at earlier, which is to enumerate", "tokens": [407, 1830, 262, 749, 259, 270, 11, 264, 4334, 307, 281, 360, 746, 286, 12075, 292, 412, 3071, 11, 597, 307, 281, 465, 15583, 473], "temperature": 0.0, "avg_logprob": -0.1319781982146942, "compression_ratio": 1.8646288209606987, "no_speech_prob": 3.5898945498047397e-05}, {"id": 283, "seek": 122332, "start": 1223.32, "end": 1227.6, "text": " all of the system resources, create capabilities for them, and then assign them to the inner", "tokens": [439, 295, 264, 1185, 3593, 11, 1884, 10862, 337, 552, 11, 293, 550, 6269, 552, 281, 264, 7284], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 284, "seek": 122332, "start": 1227.6, "end": 1233.04, "text": " process, which is, just again, an alpha executable.", "tokens": [1399, 11, 597, 307, 11, 445, 797, 11, 364, 8961, 7568, 712, 13], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 285, "seek": 122332, "start": 1233.04, "end": 1235.6799999999998, "text": " So we pull that alpha executable in from the boot modules.", "tokens": [407, 321, 2235, 300, 8961, 7568, 712, 294, 490, 264, 11450, 16679, 13], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 286, "seek": 122332, "start": 1235.6799999999998, "end": 1238.84, "text": " The kernel has a simple loader, which pulls it into memory.", "tokens": [440, 28256, 575, 257, 2199, 3677, 260, 11, 597, 16982, 309, 666, 4675, 13], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 287, "seek": 122332, "start": 1238.84, "end": 1242.48, "text": " Enumerate system resources creates enough capabilities to host a task and a v-space", "tokens": [2193, 15583, 473, 1185, 3593, 7829, 1547, 10862, 281, 3975, 257, 5633, 293, 257, 371, 12, 24824], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 288, "seek": 122332, "start": 1242.48, "end": 1246.9199999999998, "text": " and so on for that initial executable and hand it off.", "tokens": [293, 370, 322, 337, 300, 5883, 7568, 712, 293, 1011, 309, 766, 13], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 289, "seek": 122332, "start": 1246.9199999999998, "end": 1251.6799999999998, "text": " The basic problem at this stage is not messing up memory.", "tokens": [440, 3875, 1154, 412, 341, 3233, 307, 406, 23258, 493, 4675, 13], "temperature": 0.0, "avg_logprob": -0.14432395737746667, "compression_ratio": 1.776061776061776, "no_speech_prob": 1.4731292139913421e-05}, {"id": 290, "seek": 125168, "start": 1251.68, "end": 1255.0800000000002, "text": " Everybody who has written a kernel from scratch, maybe as opposed to approaching a project", "tokens": [7646, 567, 575, 3720, 257, 28256, 490, 8459, 11, 1310, 382, 8851, 281, 14908, 257, 1716], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 291, "seek": 125168, "start": 1255.0800000000002, "end": 1258.3600000000001, "text": " later, knows that the hardest thing about memory management is you need memory to manage", "tokens": [1780, 11, 3255, 300, 264, 13158, 551, 466, 4675, 4592, 307, 291, 643, 4675, 281, 3067], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 292, "seek": 125168, "start": 1258.3600000000001, "end": 1260.4, "text": " memory.", "tokens": [4675, 13], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 293, "seek": 125168, "start": 1260.4, "end": 1263.6000000000001, "text": " So there's a lot of stuff in this stage to deal with that.", "tokens": [407, 456, 311, 257, 688, 295, 1507, 294, 341, 3233, 281, 2028, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 294, "seek": 125168, "start": 1263.6000000000001, "end": 1267.8400000000001, "text": " We also tried to enumerate resources on the system at this stage, but this is actually", "tokens": [492, 611, 3031, 281, 465, 15583, 473, 3593, 322, 264, 1185, 412, 341, 3233, 11, 457, 341, 307, 767], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 295, "seek": 125168, "start": 1267.8400000000001, "end": 1269.3600000000001, "text": " going to change soon.", "tokens": [516, 281, 1319, 2321, 13], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 296, "seek": 125168, "start": 1269.3600000000001, "end": 1275.04, "text": " The kernel, at the time of speaking, has a PCI driver for x86 or a device tree scanner", "tokens": [440, 28256, 11, 412, 264, 565, 295, 4124, 11, 575, 257, 6465, 40, 6787, 337, 2031, 22193, 420, 257, 4302, 4230, 30211], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 297, "seek": 125168, "start": 1275.04, "end": 1279.28, "text": " for ARM, and we kind of tried to enumerate the physical address of everything, but this", "tokens": [337, 45209, 11, 293, 321, 733, 295, 3031, 281, 465, 15583, 473, 264, 4001, 2985, 295, 1203, 11, 457, 341], "temperature": 0.0, "avg_logprob": -0.11995076774654531, "compression_ratio": 1.6772151898734178, "no_speech_prob": 2.626238710945472e-05}, {"id": 298, "seek": 127928, "start": 1279.28, "end": 1283.16, "text": " is not a good idea, so we're just going to take all physical memory and give it to user", "tokens": [307, 406, 257, 665, 1558, 11, 370, 321, 434, 445, 516, 281, 747, 439, 4001, 4675, 293, 976, 309, 281, 4195], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 299, "seek": 127928, "start": 1283.16, "end": 1288.96, "text": " space and let it use policy decisions to figure out who gets what, rather than trying to enumerate", "tokens": [1901, 293, 718, 309, 764, 3897, 5327, 281, 2573, 484, 567, 2170, 437, 11, 2831, 813, 1382, 281, 465, 15583, 473], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 300, "seek": 127928, "start": 1288.96, "end": 1291.68, "text": " everything in the kernel, just to keep the kernel smaller.", "tokens": [1203, 294, 264, 28256, 11, 445, 281, 1066, 264, 28256, 4356, 13], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 301, "seek": 127928, "start": 1291.68, "end": 1294.24, "text": " And we definitely don't want to do ACPI, so please, please.", "tokens": [400, 321, 2138, 500, 380, 528, 281, 360, 8157, 31701, 11, 370, 1767, 11, 1767, 13], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 302, "seek": 127928, "start": 1294.24, "end": 1298.84, "text": " If anybody here is on the risk-fire board or something, I'm begging you.", "tokens": [759, 4472, 510, 307, 322, 264, 3148, 12, 12037, 3150, 420, 746, 11, 286, 478, 26600, 291, 13], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 303, "seek": 127928, "start": 1298.84, "end": 1301.72, "text": " No ACPI, device trees.", "tokens": [883, 8157, 31701, 11, 4302, 5852, 13], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 304, "seek": 127928, "start": 1301.72, "end": 1308.2, "text": " And then finally, we jump to user space, and that concludes the sysinit.", "tokens": [400, 550, 2721, 11, 321, 3012, 281, 4195, 1901, 11, 293, 300, 24643, 264, 262, 749, 259, 270, 13], "temperature": 0.0, "avg_logprob": -0.1684647486760066, "compression_ratio": 1.6344827586206896, "no_speech_prob": 1.9218188754166476e-05}, {"id": 305, "seek": 130820, "start": 1308.2, "end": 1312.24, "text": " Speaking of user space, I want to talk a little bit about our future plans.", "tokens": [13069, 295, 4195, 1901, 11, 286, 528, 281, 751, 257, 707, 857, 466, 527, 2027, 5482, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 306, "seek": 130820, "start": 1312.24, "end": 1317.28, "text": " So here we have kind of the onion of Aries, is what it's called.", "tokens": [407, 510, 321, 362, 733, 295, 264, 10916, 295, 316, 2244, 11, 307, 437, 309, 311, 1219, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 307, "seek": 130820, "start": 1317.28, "end": 1321.8400000000001, "text": " The Helios is the kernel at the core of this dream of a larger operating system called", "tokens": [440, 6128, 2717, 307, 264, 28256, 412, 264, 4965, 295, 341, 3055, 295, 257, 4833, 7447, 1185, 1219], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 308, "seek": 130820, "start": 1321.8400000000001, "end": 1323.92, "text": " the Aries operating system.", "tokens": [264, 316, 2244, 7447, 1185, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 309, "seek": 130820, "start": 1323.92, "end": 1329.44, "text": " And we want to wrap the kernel with various layers to add more functionality.", "tokens": [400, 321, 528, 281, 7019, 264, 28256, 365, 3683, 7914, 281, 909, 544, 14980, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 310, "seek": 130820, "start": 1329.44, "end": 1331.3600000000001, "text": " So we have Helios as the kernel.", "tokens": [407, 321, 362, 6128, 2717, 382, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 311, "seek": 130820, "start": 1331.3600000000001, "end": 1334.64, "text": " We've also started working on Mercury, which is a framework for writing drivers.", "tokens": [492, 600, 611, 1409, 1364, 322, 31780, 11, 597, 307, 257, 8388, 337, 3579, 11590, 13], "temperature": 0.0, "avg_logprob": -0.1407781518023947, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5458068193984218e-05}, {"id": 312, "seek": 133464, "start": 1334.64, "end": 1339.2, "text": " It's basically a user space interface to the kernel API, which you can use for drivers", "tokens": [467, 311, 1936, 257, 4195, 1901, 9226, 281, 264, 28256, 9362, 11, 597, 291, 393, 764, 337, 11590], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 313, "seek": 133464, "start": 1339.2, "end": 1344.76, "text": " plus some useful functionality like utilities to make it easier to map memory and so on.", "tokens": [1804, 512, 4420, 14980, 411, 30482, 281, 652, 309, 3571, 281, 4471, 4675, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 314, "seek": 133464, "start": 1344.76, "end": 1351.0400000000002, "text": " And then this Mercury system is applied by Venus, which is a collection of drivers, real-world", "tokens": [400, 550, 341, 31780, 1185, 307, 6456, 538, 23994, 11, 597, 307, 257, 5765, 295, 11590, 11, 957, 12, 13217], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 315, "seek": 133464, "start": 1351.0400000000002, "end": 1353.48, "text": " drivers for actual hardware.", "tokens": [11590, 337, 3539, 8837, 13], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 316, "seek": 133464, "start": 1353.48, "end": 1358.24, "text": " At the time of this talk, Helios exists, Mercury mostly exists, and Venus was just started", "tokens": [1711, 264, 565, 295, 341, 751, 11, 6128, 2717, 8198, 11, 31780, 5240, 8198, 11, 293, 23994, 390, 445, 1409], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 317, "seek": 133464, "start": 1358.24, "end": 1360.24, "text": " last week.", "tokens": [1036, 1243, 13], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 318, "seek": 133464, "start": 1360.24, "end": 1363.6000000000001, "text": " Gaia is going to be the next thing that we're going to do on top of this.", "tokens": [10384, 654, 307, 516, 281, 312, 264, 958, 551, 300, 321, 434, 516, 281, 360, 322, 1192, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.10637422770011325, "compression_ratio": 1.6725352112676057, "no_speech_prob": 1.24062044051243e-05}, {"id": 319, "seek": 136360, "start": 1363.6, "end": 1369.28, "text": " So through Mercury and Venus, we'll get this kind of abstract view of the devices on the", "tokens": [407, 807, 31780, 293, 23994, 11, 321, 603, 483, 341, 733, 295, 12649, 1910, 295, 264, 5759, 322, 264], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 320, "seek": 136360, "start": 1369.28, "end": 1374.32, "text": " system as presented through IPC, our capabilities.", "tokens": [1185, 382, 8212, 807, 8671, 34, 11, 527, 10862, 13], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 321, "seek": 136360, "start": 1374.32, "end": 1379.7199999999998, "text": " And then this will be consumed by Gaia and formed into a cohesive user space, which is", "tokens": [400, 550, 341, 486, 312, 21226, 538, 10384, 654, 293, 8693, 666, 257, 43025, 4195, 1901, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 322, "seek": 136360, "start": 1379.7199999999998, "end": 1383.6799999999998, "text": " going to essentially be Unix, but everything is not a file.", "tokens": [516, 281, 4476, 312, 1156, 970, 11, 457, 1203, 307, 406, 257, 3991, 13], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 323, "seek": 136360, "start": 1383.6799999999998, "end": 1384.6799999999998, "text": " Everything is a capability.", "tokens": [5471, 307, 257, 13759, 13], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 324, "seek": 136360, "start": 1384.6799999999998, "end": 1390.24, "text": " So you open slash def slash fb and you get a frame buffer capability rather than an IO", "tokens": [407, 291, 1269, 17330, 1060, 17330, 283, 65, 293, 291, 483, 257, 3920, 21762, 13759, 2831, 813, 364, 39839], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 325, "seek": 136360, "start": 1390.24, "end": 1393.48, "text": " object that you might see on Unix.", "tokens": [2657, 300, 291, 1062, 536, 322, 1156, 970, 13], "temperature": 0.0, "avg_logprob": -0.16451876872294657, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.8618595277075656e-05}, {"id": 326, "seek": 139348, "start": 1393.48, "end": 1397.56, "text": " And furthermore, the design of Gaia is going to be mostly a combination of inspirations", "tokens": [400, 3052, 3138, 11, 264, 1715, 295, 10384, 654, 307, 516, 281, 312, 5240, 257, 6562, 295, 17432, 763], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 327, "seek": 139348, "start": 1397.56, "end": 1400.48, "text": " from Unix and Plan 9.", "tokens": [490, 1156, 970, 293, 8112, 1722, 13], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 328, "seek": 139348, "start": 1400.48, "end": 1405.68, "text": " And on top of this, we'll add a POSIX compatibility layer because Gaia is a chance to leave behind", "tokens": [400, 322, 1192, 295, 341, 11, 321, 603, 909, 257, 430, 4367, 21124, 34237, 4583, 570, 10384, 654, 307, 257, 2931, 281, 1856, 2261], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 329, "seek": 139348, "start": 1405.68, "end": 1410.0, "text": " the legacy of POSIX, but the legacy of POSIX is strong, so we'll have to accommodate it", "tokens": [264, 11711, 295, 430, 4367, 21124, 11, 457, 264, 11711, 295, 430, 4367, 21124, 307, 2068, 11, 370, 321, 603, 362, 281, 21410, 309], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 330, "seek": 139348, "start": 1410.0, "end": 1411.0, "text": " somehow.", "tokens": [6063, 13], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 331, "seek": 139348, "start": 1411.0, "end": 1414.0, "text": " And we'll tie all of this up into an operating system called Aries.", "tokens": [400, 321, 603, 7582, 439, 295, 341, 493, 666, 364, 7447, 1185, 1219, 316, 2244, 13], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 332, "seek": 139348, "start": 1414.0, "end": 1419.4, "text": " So we're going to use your space and we're going to build this stuff there.", "tokens": [407, 321, 434, 516, 281, 764, 428, 1901, 293, 321, 434, 516, 281, 1322, 341, 1507, 456, 13], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 333, "seek": 139348, "start": 1419.4, "end": 1422.48, "text": " One other thing I want to show off is something which is part of the Mercury system, which", "tokens": [1485, 661, 551, 286, 528, 281, 855, 766, 307, 746, 597, 307, 644, 295, 264, 31780, 1185, 11, 597], "temperature": 0.0, "avg_logprob": -0.1331587032395966, "compression_ratio": 1.7419354838709677, "no_speech_prob": 9.366305675939657e-06}, {"id": 334, "seek": 142248, "start": 1422.48, "end": 1425.96, "text": " is our DSL for defining IPC interfaces.", "tokens": [307, 527, 15816, 43, 337, 17827, 8671, 34, 28416, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 335, "seek": 142248, "start": 1425.96, "end": 1430.32, "text": " We were thinking about not doing a DSL, but DSLs are kind of good for this use case,", "tokens": [492, 645, 1953, 466, 406, 884, 257, 15816, 43, 11, 457, 15816, 43, 82, 366, 733, 295, 665, 337, 341, 764, 1389, 11], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 336, "seek": 142248, "start": 1430.32, "end": 1431.6, "text": " so we made one.", "tokens": [370, 321, 1027, 472, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 337, "seek": 142248, "start": 1431.6, "end": 1434.72, "text": " This is an example of a serial device.", "tokens": [639, 307, 364, 1365, 295, 257, 17436, 4302, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 338, "seek": 142248, "start": 1434.72, "end": 1439.2, "text": " It has support for configuring the BOD rate and stop bits and parity and so on.", "tokens": [467, 575, 1406, 337, 6662, 1345, 264, 363, 14632, 3314, 293, 1590, 9239, 293, 44747, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 339, "seek": 142248, "start": 1439.2, "end": 1444.72, "text": " And it implements the IO device because it supports read and write as well.", "tokens": [400, 309, 704, 17988, 264, 39839, 4302, 570, 309, 9346, 1401, 293, 2464, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 340, "seek": 142248, "start": 1444.72, "end": 1451.56, "text": " We have a tool called IPCGen, which reads this DSL and generates hair code for it.", "tokens": [492, 362, 257, 2290, 1219, 8671, 34, 26647, 11, 597, 15700, 341, 15816, 43, 293, 23815, 2578, 3089, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.14848633774188386, "compression_ratio": 1.5773584905660378, "no_speech_prob": 4.830037505598739e-05}, {"id": 341, "seek": 145156, "start": 1451.56, "end": 1457.3999999999999, "text": " And this is now mostly working, but we're going to start actually writing more real", "tokens": [400, 341, 307, 586, 5240, 1364, 11, 457, 321, 434, 516, 281, 722, 767, 3579, 544, 957], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 342, "seek": 145156, "start": 1457.3999999999999, "end": 1461.6399999999999, "text": " drivers with it soon, so it'll be, remains to be seen if we'll like it after we use", "tokens": [11590, 365, 309, 2321, 11, 370, 309, 603, 312, 11, 7023, 281, 312, 1612, 498, 321, 603, 411, 309, 934, 321, 764], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 343, "seek": 145156, "start": 1461.6399999999999, "end": 1464.12, "text": " it for a while.", "tokens": [309, 337, 257, 1339, 13], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 344, "seek": 145156, "start": 1464.12, "end": 1466.0, "text": " So does Helios work?", "tokens": [407, 775, 6128, 2717, 589, 30], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 345, "seek": 145156, "start": 1466.0, "end": 1470.6399999999999, "text": " And the answer is self-evidently yes, because this slide deck is being presented from this", "tokens": [400, 264, 1867, 307, 2698, 12, 13379, 1078, 356, 2086, 11, 570, 341, 4137, 9341, 307, 885, 8212, 490, 341], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 346, "seek": 145156, "start": 1470.6399999999999, "end": 1476.72, "text": " Raspberry Pi, which is running Helios right now.", "tokens": [41154, 17741, 11, 597, 307, 2614, 6128, 2717, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 347, "seek": 145156, "start": 1476.72, "end": 1481.44, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1695282745361328, "compression_ratio": 1.517094017094017, "no_speech_prob": 2.0774779841303825e-05}, {"id": 348, "seek": 148144, "start": 1481.44, "end": 1487.04, "text": " So I have no C code written on this device beyond the point of EDK2.", "tokens": [407, 286, 362, 572, 383, 3089, 3720, 322, 341, 4302, 4399, 264, 935, 295, 18050, 42, 17, 13], "temperature": 0.0, "avg_logprob": -0.13636214061848168, "compression_ratio": 1.4390243902439024, "no_speech_prob": 2.467119338689372e-05}, {"id": 349, "seek": 148144, "start": 1487.04, "end": 1492.16, "text": " It has EDK2 to run UA5, but once EDK2 hands over to our EFI boot loader.", "tokens": [467, 575, 18050, 42, 17, 281, 1190, 32765, 20, 11, 457, 1564, 18050, 42, 17, 2377, 670, 281, 527, 462, 38568, 11450, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.13636214061848168, "compression_ratio": 1.4390243902439024, "no_speech_prob": 2.467119338689372e-05}, {"id": 350, "seek": 148144, "start": 1492.16, "end": 1496.96, "text": " From that point forward, 100% hair and assembly, just a little bit of assembly.", "tokens": [3358, 300, 935, 2128, 11, 2319, 4, 2578, 293, 12103, 11, 445, 257, 707, 857, 295, 12103, 13], "temperature": 0.0, "avg_logprob": -0.13636214061848168, "compression_ratio": 1.4390243902439024, "no_speech_prob": 2.467119338689372e-05}, {"id": 351, "seek": 148144, "start": 1496.96, "end": 1500.68, "text": " This port to ARM64 was accomplished over the past eight weeks.", "tokens": [639, 2436, 281, 45209, 19395, 390, 15419, 670, 264, 1791, 3180, 3259, 13], "temperature": 0.0, "avg_logprob": -0.13636214061848168, "compression_ratio": 1.4390243902439024, "no_speech_prob": 2.467119338689372e-05}, {"id": 352, "seek": 148144, "start": 1500.68, "end": 1507.0, "text": " Actually it took exactly 42 days to port the kernel from X86 to AR64.", "tokens": [5135, 309, 1890, 2293, 14034, 1708, 281, 2436, 264, 28256, 490, 1783, 22193, 281, 8943, 19395, 13], "temperature": 0.0, "avg_logprob": -0.13636214061848168, "compression_ratio": 1.4390243902439024, "no_speech_prob": 2.467119338689372e-05}, {"id": 353, "seek": 150700, "start": 1507.0, "end": 1512.64, "text": " This system has a simple driver for the Raspberry Pi GPU running in user space to drive the", "tokens": [639, 1185, 575, 257, 2199, 6787, 337, 264, 41154, 17741, 18407, 2614, 294, 4195, 1901, 281, 3332, 264], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 354, "seek": 150700, "start": 1512.64, "end": 1513.72, "text": " projector.", "tokens": [39792, 13], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 355, "seek": 150700, "start": 1513.72, "end": 1518.44, "text": " And it has a serial port driver, which I'm connected to on my laptop here, to switch", "tokens": [400, 309, 575, 257, 17436, 2436, 6787, 11, 597, 286, 478, 4582, 281, 322, 452, 10732, 510, 11, 281, 3679], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 356, "seek": 150700, "start": 1518.44, "end": 1523.92, "text": " between slides because I could not write a USB driver in eight weeks.", "tokens": [1296, 9788, 570, 286, 727, 406, 2464, 257, 10109, 6787, 294, 3180, 3259, 13], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 357, "seek": 150700, "start": 1523.92, "end": 1529.32, "text": " The slide deck itself is encoded as quite okay images, which are packed into a tarball", "tokens": [440, 4137, 9341, 2564, 307, 2058, 12340, 382, 1596, 1392, 5267, 11, 597, 366, 13265, 666, 257, 3112, 3129], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 358, "seek": 150700, "start": 1529.32, "end": 1532.72, "text": " and dropped in like an NFS would be.", "tokens": [293, 8119, 294, 411, 364, 13576, 50, 576, 312, 13], "temperature": 0.0, "avg_logprob": -0.16984162871370612, "compression_ratio": 1.5179282868525896, "no_speech_prob": 4.49455274065258e-06}, {"id": 359, "seek": 153272, "start": 1532.72, "end": 1536.92, "text": " And there really are very few hacks.", "tokens": [400, 456, 534, 366, 588, 1326, 33617, 13], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 360, "seek": 153272, "start": 1536.92, "end": 1544.32, "text": " I would say that this is a pretty complete port of the kernel with very little shortcuts", "tokens": [286, 576, 584, 300, 341, 307, 257, 1238, 3566, 2436, 295, 264, 28256, 365, 588, 707, 34620], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 361, "seek": 153272, "start": 1544.32, "end": 1546.52, "text": " or problems.", "tokens": [420, 2740, 13], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 362, "seek": 153272, "start": 1546.52, "end": 1551.88, "text": " The reason why I chose to port the kernel to ARM in 42 days is because I was originally", "tokens": [440, 1778, 983, 286, 5111, 281, 2436, 264, 28256, 281, 45209, 294, 14034, 1708, 307, 570, 286, 390, 7993], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 363, "seek": 153272, "start": 1551.88, "end": 1557.84, "text": " going to give this talk from a laptop running Helios for X8664, where I was going to drive", "tokens": [516, 281, 976, 341, 751, 490, 257, 10732, 2614, 6128, 2717, 337, 1783, 22193, 19395, 11, 689, 286, 390, 516, 281, 3332], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 364, "seek": 153272, "start": 1557.84, "end": 1561.68, "text": " the projector through Intel HD graphics, and then I read the Intel HD graphics manuals", "tokens": [264, 39792, 807, 19762, 12149, 11837, 11, 293, 550, 286, 1401, 264, 19762, 12149, 11837, 9688, 82], "temperature": 0.0, "avg_logprob": -0.11204951286315917, "compression_ratio": 1.584313725490196, "no_speech_prob": 3.2688549254089594e-05}, {"id": 365, "seek": 156168, "start": 1561.68, "end": 1566.24, "text": " and it decided it would be much easier to port the entire kernel to ARM and write an", "tokens": [293, 309, 3047, 309, 576, 312, 709, 3571, 281, 2436, 264, 2302, 28256, 281, 45209, 293, 2464, 364], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 366, "seek": 156168, "start": 1566.24, "end": 1567.28, "text": " ARM GPU driver.", "tokens": [45209, 18407, 6787, 13], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 367, "seek": 156168, "start": 1567.28, "end": 1570.6000000000001, "text": " So that's what I did.", "tokens": [407, 300, 311, 437, 286, 630, 13], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 368, "seek": 156168, "start": 1570.6000000000001, "end": 1575.96, "text": " After about two days of reading the HD graphics manuals, I was like, I've had enough.", "tokens": [2381, 466, 732, 1708, 295, 3760, 264, 12149, 11837, 9688, 82, 11, 286, 390, 411, 11, 286, 600, 632, 1547, 13], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 369, "seek": 156168, "start": 1575.96, "end": 1579.44, "text": " And then I pulled down the ARM manual and tried to find a PDF reader which could handle", "tokens": [400, 550, 286, 7373, 760, 264, 45209, 9688, 293, 3031, 281, 915, 257, 17752, 15149, 597, 727, 4813], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 370, "seek": 156168, "start": 1579.44, "end": 1582.0, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 371, "seek": 156168, "start": 1582.0, "end": 1588.8, "text": " In terms of those hacks and shortcuts, there's no SOC specific builds, so the same kernel", "tokens": [682, 2115, 295, 729, 33617, 293, 34620, 11, 456, 311, 572, 10621, 34, 2685, 15182, 11, 370, 264, 912, 28256], "temperature": 0.0, "avg_logprob": -0.14717269393632998, "compression_ratio": 1.517509727626459, "no_speech_prob": 1.2026353033434134e-05}, {"id": 372, "seek": 158880, "start": 1588.8, "end": 1592.52, "text": " that I wrote will boot from any ARM device with the standard EFI configuration and a", "tokens": [300, 286, 4114, 486, 11450, 490, 604, 45209, 4302, 365, 264, 3832, 462, 38568, 11694, 293, 257], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 373, "seek": 158880, "start": 1592.52, "end": 1593.52, "text": " device tree.", "tokens": [4302, 4230, 13], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 374, "seek": 158880, "start": 1593.52, "end": 1595.56, "text": " It's not Raspberry Pi specific.", "tokens": [467, 311, 406, 41154, 17741, 2685, 13], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 375, "seek": 158880, "start": 1595.56, "end": 1598.24, "text": " The user space is Raspberry Pi specific.", "tokens": [440, 4195, 1901, 307, 41154, 17741, 2685, 13], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 376, "seek": 158880, "start": 1598.24, "end": 1602.12, "text": " It's actually Raspberry Pi 4 specific, because that's the one I have, just because I didn't", "tokens": [467, 311, 767, 41154, 17741, 1017, 2685, 11, 570, 300, 311, 264, 472, 286, 362, 11, 445, 570, 286, 994, 380], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 377, "seek": 158880, "start": 1602.12, "end": 1607.3999999999999, "text": " feel like doing device tree parsing in user space for the sake of a silly demo.", "tokens": [841, 411, 884, 4302, 4230, 21156, 278, 294, 4195, 1901, 337, 264, 9717, 295, 257, 11774, 10723, 13], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 378, "seek": 158880, "start": 1607.3999999999999, "end": 1611.2, "text": " But all of the silly demo code aside, the stuff that's necessary to make this talk", "tokens": [583, 439, 295, 264, 11774, 10723, 3089, 7359, 11, 264, 1507, 300, 311, 4818, 281, 652, 341, 751], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 379, "seek": 158880, "start": 1611.2, "end": 1616.32, "text": " work is maybe a little bit hacky and Raspberry Pi specific, but the kernel port is a genuine", "tokens": [589, 307, 1310, 257, 707, 857, 10339, 88, 293, 41154, 17741, 2685, 11, 457, 264, 28256, 2436, 307, 257, 16699], "temperature": 0.0, "avg_logprob": -0.12065368799062876, "compression_ratio": 1.792387543252595, "no_speech_prob": 1.7499667592346668e-05}, {"id": 380, "seek": 161632, "start": 1616.32, "end": 1619.4399999999998, "text": " port which has basically feature complete.", "tokens": [2436, 597, 575, 1936, 4111, 3566, 13], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 381, "seek": 161632, "start": 1619.4399999999998, "end": 1624.32, "text": " I think the only hack that's in place is that I said earlier that the kernel tries to enumerate", "tokens": [286, 519, 264, 787, 10339, 300, 311, 294, 1081, 307, 300, 286, 848, 3071, 300, 264, 28256, 9898, 281, 465, 15583, 473], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 382, "seek": 161632, "start": 1624.32, "end": 1628.56, "text": " the device tree to find physical memory for devices to provide to user space through device", "tokens": [264, 4302, 4230, 281, 915, 4001, 4675, 337, 5759, 281, 2893, 281, 4195, 1901, 807, 4302], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 383, "seek": 161632, "start": 1628.56, "end": 1631.24, "text": " memory capabilities, and that was a bad idea.", "tokens": [4675, 10862, 11, 293, 300, 390, 257, 1578, 1558, 13], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 384, "seek": 161632, "start": 1631.24, "end": 1634.9199999999998, "text": " I was right that it was a bad idea, but there is a little bit of a hack in the kernel in", "tokens": [286, 390, 558, 300, 309, 390, 257, 1578, 1558, 11, 457, 456, 307, 257, 707, 857, 295, 257, 10339, 294, 264, 28256, 294], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 385, "seek": 161632, "start": 1634.9199999999998, "end": 1642.2, "text": " that I just gave all physical memory to the Raspberry Pi to user space without really", "tokens": [300, 286, 445, 2729, 439, 4001, 4675, 281, 264, 41154, 17741, 281, 4195, 1901, 1553, 534], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 386, "seek": 161632, "start": 1642.2, "end": 1643.48, "text": " much critical thought.", "tokens": [709, 4924, 1194, 13], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 387, "seek": 161632, "start": 1643.48, "end": 1645.48, "text": " That's really the only hack.", "tokens": [663, 311, 534, 264, 787, 10339, 13], "temperature": 0.0, "avg_logprob": -0.1221969961150875, "compression_ratio": 1.8560885608856088, "no_speech_prob": 6.299535016296431e-05}, {"id": 388, "seek": 164548, "start": 1645.48, "end": 1651.84, "text": " The full complete, it's done port will correct that oversight by using the EFI memory map", "tokens": [440, 1577, 3566, 11, 309, 311, 1096, 2436, 486, 3006, 300, 29146, 538, 1228, 264, 462, 38568, 4675, 4471], "temperature": 0.0, "avg_logprob": -0.15299967423226069, "compression_ratio": 1.5958333333333334, "no_speech_prob": 1.8625898519530892e-05}, {"id": 389, "seek": 164548, "start": 1651.84, "end": 1656.48, "text": " to find memory, which is less stupid to just blithely give to user space.", "tokens": [281, 915, 4675, 11, 597, 307, 1570, 6631, 281, 445, 888, 355, 736, 976, 281, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.15299967423226069, "compression_ratio": 1.5958333333333334, "no_speech_prob": 1.8625898519530892e-05}, {"id": 390, "seek": 164548, "start": 1656.48, "end": 1663.28, "text": " Additionally, I will confess that I don't have support for IRQs in user space, so if", "tokens": [19927, 11, 286, 486, 19367, 300, 286, 500, 380, 362, 1406, 337, 16486, 48, 82, 294, 4195, 1901, 11, 370, 498], "temperature": 0.0, "avg_logprob": -0.15299967423226069, "compression_ratio": 1.5958333333333334, "no_speech_prob": 1.8625898519530892e-05}, {"id": 391, "seek": 164548, "start": 1663.28, "end": 1669.28, "text": " I put my finger on the heat sink here, it kind of hurts, because it's just busy looping", "tokens": [286, 829, 452, 5984, 322, 264, 3738, 9500, 510, 11, 309, 733, 295, 11051, 11, 570, 309, 311, 445, 5856, 6367, 278], "temperature": 0.0, "avg_logprob": -0.15299967423226069, "compression_ratio": 1.5958333333333334, "no_speech_prob": 1.8625898519530892e-05}, {"id": 392, "seek": 164548, "start": 1669.28, "end": 1673.32, "text": " in user space while I wait for the next slide.", "tokens": [294, 4195, 1901, 1339, 286, 1699, 337, 264, 958, 4137, 13], "temperature": 0.0, "avg_logprob": -0.15299967423226069, "compression_ratio": 1.5958333333333334, "no_speech_prob": 1.8625898519530892e-05}, {"id": 393, "seek": 167332, "start": 1673.32, "end": 1676.6, "text": " I did get that working before FOSSTEM.", "tokens": [286, 630, 483, 300, 1364, 949, 479, 4367, 6840, 6683, 13], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 394, "seek": 167332, "start": 1676.6, "end": 1683.28, "text": " I just didn't incorporate it into the loadout for running the slide deck, so yeah.", "tokens": [286, 445, 994, 380, 16091, 309, 666, 264, 3677, 346, 337, 2614, 264, 4137, 9341, 11, 370, 1338, 13], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 395, "seek": 167332, "start": 1683.28, "end": 1687.6799999999998, "text": " It's a good thing that it's not that hot in here or this would crash.", "tokens": [467, 311, 257, 665, 551, 300, 309, 311, 406, 300, 2368, 294, 510, 420, 341, 576, 8252, 13], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 396, "seek": 167332, "start": 1687.6799999999998, "end": 1691.56, "text": " In total, Helios has been developed in nine months.", "tokens": [682, 3217, 11, 6128, 2717, 575, 668, 4743, 294, 4949, 2493, 13], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 397, "seek": 167332, "start": 1691.56, "end": 1696.84, "text": " The ARM port was done in eight weeks, and it's sophisticated enough to run this slide", "tokens": [440, 45209, 2436, 390, 1096, 294, 3180, 3259, 11, 293, 309, 311, 16950, 1547, 281, 1190, 341, 4137], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 398, "seek": 167332, "start": 1696.84, "end": 1702.32, "text": " deck, which is pretty cool, but what's left to do?", "tokens": [9341, 11, 597, 307, 1238, 1627, 11, 457, 437, 311, 1411, 281, 360, 30], "temperature": 0.0, "avg_logprob": -0.17006724735475937, "compression_ratio": 1.5384615384615385, "no_speech_prob": 3.1871059036348015e-06}, {"id": 399, "seek": 170232, "start": 1702.32, "end": 1708.76, "text": " The kernel is mostly done, and by done, I mean feature complete, but not necessarily", "tokens": [440, 28256, 307, 5240, 1096, 11, 293, 538, 1096, 11, 286, 914, 4111, 3566, 11, 457, 406, 4725], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 400, "seek": 170232, "start": 1708.76, "end": 1709.76, "text": " where we want it to be.", "tokens": [689, 321, 528, 309, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 401, "seek": 170232, "start": 1709.76, "end": 1713.84, "text": " So, by feature complete, I mean the kernel API is complete, and you can write programs", "tokens": [407, 11, 538, 4111, 3566, 11, 286, 914, 264, 28256, 9362, 307, 3566, 11, 293, 291, 393, 2464, 4268], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 402, "seek": 170232, "start": 1713.84, "end": 1718.4399999999998, "text": " against it, which do everything we want them to do, and then other improvements won't maybe", "tokens": [1970, 309, 11, 597, 360, 1203, 321, 528, 552, 281, 360, 11, 293, 550, 661, 13797, 1582, 380, 1310], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 403, "seek": 170232, "start": 1718.4399999999998, "end": 1721.36, "text": " not necessarily affect that API.", "tokens": [406, 4725, 3345, 300, 9362, 13], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 404, "seek": 170232, "start": 1721.36, "end": 1725.2, "text": " Still needs to be polished in a number of places, like that device tree issue that I mentioned", "tokens": [8291, 2203, 281, 312, 29079, 294, 257, 1230, 295, 3190, 11, 411, 300, 4302, 4230, 2734, 300, 286, 2835], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 405, "seek": 170232, "start": 1725.2, "end": 1726.2, "text": " is one case.", "tokens": [307, 472, 1389, 13], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 406, "seek": 170232, "start": 1726.2, "end": 1729.36, "text": " If you get grep through the code base, you'll find about a hundred do comments which we need", "tokens": [759, 291, 483, 6066, 79, 807, 264, 3089, 3096, 11, 291, 603, 915, 466, 257, 3262, 360, 3053, 597, 321, 643], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 407, "seek": 170232, "start": 1729.36, "end": 1730.6799999999998, "text": " to address.", "tokens": [281, 2985, 13], "temperature": 0.0, "avg_logprob": -0.13505716884837432, "compression_ratio": 1.7532894736842106, "no_speech_prob": 1.6437072190456092e-05}, {"id": 408, "seek": 173068, "start": 1730.68, "end": 1735.1200000000001, "text": " One of the more challenging things that we're going to have to do is SMP support, but again,", "tokens": [1485, 295, 264, 544, 7595, 721, 300, 321, 434, 516, 281, 362, 281, 360, 307, 318, 12224, 1406, 11, 457, 797, 11], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 409, "seek": 173068, "start": 1735.1200000000001, "end": 1740.64, "text": " the kernel is a total of like 15,000 lines of code, so despite the boogeyman the SMP often", "tokens": [264, 28256, 307, 257, 3217, 295, 411, 2119, 11, 1360, 3876, 295, 3089, 11, 370, 7228, 264, 23113, 432, 88, 1601, 264, 318, 12224, 2049], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 410, "seek": 173068, "start": 1740.64, "end": 1745.68, "text": " appears to be to most kernel hackers, I imagine that it won't be that difficult for us to", "tokens": [7038, 281, 312, 281, 881, 28256, 39766, 11, 286, 3811, 300, 309, 1582, 380, 312, 300, 2252, 337, 505, 281], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 411, "seek": 173068, "start": 1745.68, "end": 1749.8400000000001, "text": " do, which could be famous last words, but we'll see.", "tokens": [360, 11, 597, 727, 312, 4618, 1036, 2283, 11, 457, 321, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 412, "seek": 173068, "start": 1749.8400000000001, "end": 1751.6000000000001, "text": " I also want to put it to risk five.", "tokens": [286, 611, 528, 281, 829, 309, 281, 3148, 1732, 13], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 413, "seek": 173068, "start": 1751.6000000000001, "end": 1759.28, "text": " I have gotten some hair code running on risk five at the supervisor level, thanks to the", "tokens": [286, 362, 5768, 512, 2578, 3089, 2614, 322, 3148, 1732, 412, 264, 24610, 1496, 11, 3231, 281, 264], "temperature": 0.0, "avg_logprob": -0.15535571710850166, "compression_ratio": 1.645985401459854, "no_speech_prob": 4.127931606490165e-05}, {"id": 414, "seek": 175928, "start": 1759.28, "end": 1762.16, "text": " efforts of one of the hair contributors.", "tokens": [6484, 295, 472, 295, 264, 2578, 45627, 13], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 415, "seek": 175928, "start": 1762.16, "end": 1766.3999999999999, "text": " We did do some basic OSDA research, but we haven't actually ported Helios itself to risk", "tokens": [492, 630, 360, 512, 3875, 12731, 7509, 2132, 11, 457, 321, 2378, 380, 767, 2436, 292, 6128, 2717, 2564, 281, 3148], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 416, "seek": 175928, "start": 1766.3999999999999, "end": 1767.3999999999999, "text": " five.", "tokens": [1732, 13], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 417, "seek": 175928, "start": 1767.3999999999999, "end": 1768.3999999999999, "text": " We'll do that soon.", "tokens": [492, 603, 360, 300, 2321, 13], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 418, "seek": 175928, "start": 1768.3999999999999, "end": 1771.0, "text": " I also mentioned that we're going to work on more options for the boot loaders, so we're", "tokens": [286, 611, 2835, 300, 321, 434, 516, 281, 589, 322, 544, 3956, 337, 264, 11450, 3677, 433, 11, 370, 321, 434], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 419, "seek": 175928, "start": 1771.0, "end": 1773.44, "text": " going to try to get EFI going everywhere.", "tokens": [516, 281, 853, 281, 483, 462, 38568, 516, 5315, 13], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 420, "seek": 175928, "start": 1773.44, "end": 1780.72, "text": " The main blocker for EFI on x8664, for example, is that our programming language, which again", "tokens": [440, 2135, 3461, 260, 337, 462, 38568, 322, 2031, 22193, 19395, 11, 337, 1365, 11, 307, 300, 527, 9410, 2856, 11, 597, 797], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 421, "seek": 175928, "start": 1780.72, "end": 1786.52, "text": " is hair, which is developed almost alongside this project.", "tokens": [307, 2578, 11, 597, 307, 4743, 1920, 12385, 341, 1716, 13], "temperature": 0.0, "avg_logprob": -0.13305477301279703, "compression_ratio": 1.5512367491166077, "no_speech_prob": 8.611012162873521e-05}, {"id": 422, "seek": 178652, "start": 1786.52, "end": 1793.12, "text": " X86 doesn't have for PIC, and so it would kind of be a little bit of a nightmare to", "tokens": [1783, 22193, 1177, 380, 362, 337, 430, 2532, 11, 293, 370, 309, 576, 733, 295, 312, 257, 707, 857, 295, 257, 18724, 281], "temperature": 0.0, "avg_logprob": -0.17104479345944848, "compression_ratio": 1.5, "no_speech_prob": 2.6269088266417384e-05}, {"id": 423, "seek": 178652, "start": 1793.12, "end": 1799.6399999999999, "text": " like do runtime relocations of the boot loader and assembly or something of that nature,", "tokens": [411, 360, 34474, 26981, 763, 295, 264, 11450, 3677, 260, 293, 12103, 420, 746, 295, 300, 3687, 11], "temperature": 0.0, "avg_logprob": -0.17104479345944848, "compression_ratio": 1.5, "no_speech_prob": 2.6269088266417384e-05}, {"id": 424, "seek": 178652, "start": 1799.6399999999999, "end": 1805.2, "text": " so we're going to do PIC first before we try to do any EFI boot loader for x86, but we", "tokens": [370, 321, 434, 516, 281, 360, 430, 2532, 700, 949, 321, 853, 281, 360, 604, 462, 38568, 11450, 3677, 260, 337, 2031, 22193, 11, 457, 321], "temperature": 0.0, "avg_logprob": -0.17104479345944848, "compression_ratio": 1.5, "no_speech_prob": 2.6269088266417384e-05}, {"id": 425, "seek": 178652, "start": 1805.2, "end": 1811.32, "text": " do have PIC for ARM, so that's already working.", "tokens": [360, 362, 430, 2532, 337, 45209, 11, 370, 300, 311, 1217, 1364, 13], "temperature": 0.0, "avg_logprob": -0.17104479345944848, "compression_ratio": 1.5, "no_speech_prob": 2.6269088266417384e-05}, {"id": 426, "seek": 178652, "start": 1811.32, "end": 1813.04, "text": " Then I also want to improve the docs.", "tokens": [1396, 286, 611, 528, 281, 3470, 264, 45623, 13], "temperature": 0.0, "avg_logprob": -0.17104479345944848, "compression_ratio": 1.5, "no_speech_prob": 2.6269088266417384e-05}, {"id": 427, "seek": 181304, "start": 1813.04, "end": 1820.08, "text": " I spent the past few weeks in between hacking on the ARM kernel, improving the documentation", "tokens": [286, 4418, 264, 1791, 1326, 3259, 294, 1296, 31422, 322, 264, 45209, 28256, 11, 11470, 264, 14333], "temperature": 0.0, "avg_logprob": -0.10462921241234088, "compression_ratio": 1.6423357664233578, "no_speech_prob": 3.478975122561678e-05}, {"id": 428, "seek": 181304, "start": 1820.08, "end": 1825.68, "text": " on the website aries-os.org, which there will be a link to in a later slide, which is probably", "tokens": [322, 264, 3144, 257, 2244, 12, 329, 13, 4646, 11, 597, 456, 486, 312, 257, 2113, 281, 294, 257, 1780, 4137, 11, 597, 307, 1391], "temperature": 0.0, "avg_logprob": -0.10462921241234088, "compression_ratio": 1.6423357664233578, "no_speech_prob": 3.478975122561678e-05}, {"id": 429, "seek": 181304, "start": 1825.68, "end": 1829.72, "text": " now about 60% complete, so if you're curious about the project and maybe you want to try", "tokens": [586, 466, 4060, 4, 3566, 11, 370, 498, 291, 434, 6369, 466, 264, 1716, 293, 1310, 291, 528, 281, 853], "temperature": 0.0, "avg_logprob": -0.10462921241234088, "compression_ratio": 1.6423357664233578, "no_speech_prob": 3.478975122561678e-05}, {"id": 430, "seek": 181304, "start": 1829.72, "end": 1834.2, "text": " your hand at a little driver in user space, feel free to check that out, and wherever", "tokens": [428, 1011, 412, 257, 707, 6787, 294, 4195, 1901, 11, 841, 1737, 281, 1520, 300, 484, 11, 293, 8660], "temperature": 0.0, "avg_logprob": -0.10462921241234088, "compression_ratio": 1.6423357664233578, "no_speech_prob": 3.478975122561678e-05}, {"id": 431, "seek": 181304, "start": 1834.2, "end": 1839.3999999999999, "text": " you find a page, which is a stub, and you need to know what it should say, you can come", "tokens": [291, 915, 257, 3028, 11, 597, 307, 257, 20266, 11, 293, 291, 643, 281, 458, 437, 309, 820, 584, 11, 291, 393, 808], "temperature": 0.0, "avg_logprob": -0.10462921241234088, "compression_ratio": 1.6423357664233578, "no_speech_prob": 3.478975122561678e-05}, {"id": 432, "seek": 183940, "start": 1839.4, "end": 1843.8400000000001, "text": " to IRC and ask about it, and we'll fill it in.", "tokens": [281, 16486, 34, 293, 1029, 466, 309, 11, 293, 321, 603, 2836, 309, 294, 13], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 433, "seek": 183940, "start": 1843.8400000000001, "end": 1849.2, "text": " After the kernel is polished, actually alongside the kernel polish, is going to user space", "tokens": [2381, 264, 28256, 307, 29079, 11, 767, 12385, 264, 28256, 20452, 11, 307, 516, 281, 4195, 1901], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 434, "seek": 183940, "start": 1849.2, "end": 1853.52, "text": " where I explained a lot of the things that we were looking at.", "tokens": [689, 286, 8825, 257, 688, 295, 264, 721, 300, 321, 645, 1237, 412, 13], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 435, "seek": 183940, "start": 1853.52, "end": 1857.8000000000002, "text": " Mercury again mostly exists, and Venus is just getting started.", "tokens": [31780, 797, 5240, 8198, 11, 293, 23994, 307, 445, 1242, 1409, 13], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 436, "seek": 183940, "start": 1857.8000000000002, "end": 1862.64, "text": " Prior to the introduction of Venus, we did have a number of drivers that were built.", "tokens": [24032, 281, 264, 9339, 295, 23994, 11, 321, 630, 362, 257, 1230, 295, 11590, 300, 645, 3094, 13], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 437, "seek": 183940, "start": 1862.64, "end": 1866.0800000000002, "text": " For the purpose of testing the kernel and testing Mercury and so on, we obviously have", "tokens": [1171, 264, 4334, 295, 4997, 264, 28256, 293, 4997, 31780, 293, 370, 322, 11, 321, 2745, 362], "temperature": 0.0, "avg_logprob": -0.13537391769551785, "compression_ratio": 1.6515151515151516, "no_speech_prob": 2.9300248570507392e-05}, {"id": 438, "seek": 186608, "start": 1866.08, "end": 1871.8, "text": " a serial driver for X86, we have a PL011 serial driver for ARM, but we've also done things", "tokens": [257, 17436, 6787, 337, 1783, 22193, 11, 321, 362, 257, 6999, 15, 5348, 17436, 6787, 337, 45209, 11, 457, 321, 600, 611, 1096, 721], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 439, "seek": 186608, "start": 1871.8, "end": 1877.9199999999998, "text": " like E1000 networking, we did send pings with that, we did the Rodeo block devices and a", "tokens": [411, 462, 21199, 17985, 11, 321, 630, 2845, 280, 1109, 365, 300, 11, 321, 630, 264, 497, 1429, 78, 3461, 5759, 293, 257], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 440, "seek": 186608, "start": 1877.9199999999998, "end": 1882.4399999999998, "text": " couple of other simple drivers, just as we were working to prove the design of the support", "tokens": [1916, 295, 661, 2199, 11590, 11, 445, 382, 321, 645, 1364, 281, 7081, 264, 1715, 295, 264, 1406], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 441, "seek": 186608, "start": 1882.4399999999998, "end": 1883.6799999999998, "text": " code for drivers.", "tokens": [3089, 337, 11590, 13], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 442, "seek": 186608, "start": 1883.6799999999998, "end": 1890.28, "text": " But the support code is mostly done, so now we're going to start writing drivers for real.", "tokens": [583, 264, 1406, 3089, 307, 5240, 1096, 11, 370, 586, 321, 434, 516, 281, 722, 3579, 11590, 337, 957, 13], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 443, "seek": 186608, "start": 1890.28, "end": 1895.84, "text": " I need to provide some acknowledgments here to people who helped make Helios work.", "tokens": [286, 643, 281, 2893, 512, 15195, 37148, 510, 281, 561, 567, 4254, 652, 6128, 2717, 589, 13], "temperature": 0.0, "avg_logprob": -0.18678622245788573, "compression_ratio": 1.667870036101083, "no_speech_prob": 4.0675950003787875e-05}, {"id": 444, "seek": 189584, "start": 1895.84, "end": 1900.24, "text": " Finally I mentioned earlier that there's a RISC-5 kernel by Alexi Yuren, Ember Sovati", "tokens": [6288, 286, 2835, 3071, 300, 456, 311, 257, 497, 2343, 34, 12, 20, 28256, 538, 5202, 72, 398, 9873, 11, 3968, 607, 407, 85, 6908], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 445, "seek": 189584, "start": 1900.24, "end": 1904.8799999999999, "text": " also did some work on X86 for early kernel attempts.", "tokens": [611, 630, 512, 589, 322, 1783, 22193, 337, 2440, 28256, 15257, 13], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 446, "seek": 189584, "start": 1904.8799999999999, "end": 1909.36, "text": " This was really useful stuff, none of this code, very little of this code that came from", "tokens": [639, 390, 534, 4420, 1507, 11, 6022, 295, 341, 3089, 11, 588, 707, 295, 341, 3089, 300, 1361, 490], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 447, "seek": 189584, "start": 1909.36, "end": 1913.72, "text": " these efforts, they did it to Helios, and these projects never really developed into", "tokens": [613, 6484, 11, 436, 630, 309, 281, 6128, 2717, 11, 293, 613, 4455, 1128, 534, 4743, 666], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 448, "seek": 189584, "start": 1913.72, "end": 1918.48, "text": " full systems, I don't think either of them made it to user space.", "tokens": [1577, 3652, 11, 286, 500, 380, 519, 2139, 295, 552, 1027, 309, 281, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 449, "seek": 189584, "start": 1918.48, "end": 1923.04, "text": " But they were still very useful for proving out some ideas about how to actually do basic", "tokens": [583, 436, 645, 920, 588, 4420, 337, 27221, 484, 512, 3487, 466, 577, 281, 767, 360, 3875], "temperature": 0.0, "avg_logprob": -0.22972540855407714, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.00011046841245843098}, {"id": 450, "seek": 192304, "start": 1923.04, "end": 1926.96, "text": " kernel hacking in here, how do we boot up the system, how do we work from ring zero,", "tokens": [28256, 31422, 294, 510, 11, 577, 360, 321, 11450, 493, 264, 1185, 11, 577, 360, 321, 589, 490, 4875, 4018, 11], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 451, "seek": 192304, "start": 1926.96, "end": 1930.48, "text": " how do we configure the MMU, how do we do yada-yada-yada, deal with interrupts and so", "tokens": [577, 360, 321, 22162, 264, 34191, 52, 11, 577, 360, 321, 360, 288, 1538, 12, 88, 1538, 12, 88, 1538, 11, 2028, 365, 12729, 82, 293, 370], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 452, "seek": 192304, "start": 1930.48, "end": 1935.0, "text": " on, how do we link it properly, all questions that had not been answered previously within", "tokens": [322, 11, 577, 360, 321, 2113, 309, 6108, 11, 439, 1651, 300, 632, 406, 668, 10103, 8046, 1951], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 453, "seek": 192304, "start": 1935.0, "end": 1939.0, "text": " the context of the hair programming language, and so this work was definitely instrumental", "tokens": [264, 4319, 295, 264, 2578, 9410, 2856, 11, 293, 370, 341, 589, 390, 2138, 17388], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 454, "seek": 192304, "start": 1939.0, "end": 1944.92, "text": " in setting the field upon which Helios could be built, so big thanks to these guys.", "tokens": [294, 3287, 264, 2519, 3564, 597, 6128, 2717, 727, 312, 3094, 11, 370, 955, 3231, 281, 613, 1074, 13], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 455, "seek": 192304, "start": 1944.92, "end": 1948.6, "text": " Also thanks to the hair community, there's almost 80 people now, actually I think it's", "tokens": [2743, 3231, 281, 264, 2578, 1768, 11, 456, 311, 1920, 4688, 561, 586, 11, 767, 286, 519, 309, 311], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 456, "seek": 192304, "start": 1948.6, "end": 1952.12, "text": " more than 80 now, but there's around 80 people who have been working on the programming", "tokens": [544, 813, 4688, 586, 11, 457, 456, 311, 926, 4688, 561, 567, 362, 668, 1364, 322, 264, 9410], "temperature": 0.0, "avg_logprob": -0.1428681915881587, "compression_ratio": 1.7917888563049853, "no_speech_prob": 6.006897456245497e-05}, {"id": 457, "seek": 195212, "start": 1952.12, "end": 1959.1999999999998, "text": " language itself, again we've been working on it for about three years now, and the project", "tokens": [2856, 2564, 11, 797, 321, 600, 668, 1364, 322, 309, 337, 466, 1045, 924, 586, 11, 293, 264, 1716], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 458, "seek": 195212, "start": 1959.1999999999998, "end": 1963.0, "text": " Helios of course would not be possible without the programming language that's written in,", "tokens": [6128, 2717, 295, 1164, 576, 406, 312, 1944, 1553, 264, 9410, 2856, 300, 311, 3720, 294, 11], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 459, "seek": 195212, "start": 1963.0, "end": 1966.56, "text": " so a huge shout out to the hair community for everything they've done, very proud of", "tokens": [370, 257, 2603, 8043, 484, 281, 264, 2578, 1768, 337, 1203, 436, 600, 1096, 11, 588, 4570, 295], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 460, "seek": 195212, "start": 1966.56, "end": 1967.56, "text": " that community.", "tokens": [300, 1768, 13], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 461, "seek": 195212, "start": 1967.56, "end": 1972.1599999999999, "text": " I also want to thank the OSDev community on the Baruchat, hands up if any of you are", "tokens": [286, 611, 528, 281, 1309, 264, 12731, 11089, 85, 1768, 322, 264, 4156, 625, 267, 11, 2377, 493, 498, 604, 295, 291, 366], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 462, "seek": 195212, "start": 1972.1599999999999, "end": 1979.08, "text": " in this channel, yeah, so OSDev on the Baruchat is the single best place to learn about kernel", "tokens": [294, 341, 2269, 11, 1338, 11, 370, 12731, 11089, 85, 322, 264, 4156, 625, 267, 307, 264, 2167, 1151, 1081, 281, 1466, 466, 28256], "temperature": 0.0, "avg_logprob": -0.1527616048263291, "compression_ratio": 1.686131386861314, "no_speech_prob": 7.023664511507377e-05}, {"id": 463, "seek": 197908, "start": 1979.08, "end": 1983.56, "text": " hacking on the entire internet, those guys are so smart and helpful and they're very", "tokens": [31422, 322, 264, 2302, 4705, 11, 729, 1074, 366, 370, 4069, 293, 4961, 293, 436, 434, 588], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 464, "seek": 197908, "start": 1983.56, "end": 1986.56, "text": " knowledgeable, they know everything about kernel hacking and drivers and anything you", "tokens": [33800, 11, 436, 458, 1203, 466, 28256, 31422, 293, 11590, 293, 1340, 291], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 465, "seek": 197908, "start": 1986.56, "end": 1991.4399999999998, "text": " want to know, if you want to mess with kernels, go talk to these people.", "tokens": [528, 281, 458, 11, 498, 291, 528, 281, 2082, 365, 23434, 1625, 11, 352, 751, 281, 613, 561, 13], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 466, "seek": 197908, "start": 1991.4399999999998, "end": 1995.1999999999998, "text": " And also of course to SCL4, as I'm sure you noticed we took a whole bunch of ideas from", "tokens": [400, 611, 295, 1164, 281, 9028, 43, 19, 11, 382, 286, 478, 988, 291, 5694, 321, 1890, 257, 1379, 3840, 295, 3487, 490], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 467, "seek": 197908, "start": 1995.1999999999998, "end": 2000.3999999999999, "text": " SCL4, I think SCL4 has got a really cool kernel design and I was really happy to learn about", "tokens": [9028, 43, 19, 11, 286, 519, 9028, 43, 19, 575, 658, 257, 534, 1627, 28256, 1715, 293, 286, 390, 534, 2055, 281, 1466, 466], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 468, "seek": 197908, "start": 2000.3999999999999, "end": 2004.6, "text": " it and apply a lot of its ideas to my own kernel.", "tokens": [309, 293, 3079, 257, 688, 295, 1080, 3487, 281, 452, 1065, 28256, 13], "temperature": 0.0, "avg_logprob": -0.13361309020499873, "compression_ratio": 1.7173913043478262, "no_speech_prob": 0.0001534071925561875}, {"id": 469, "seek": 200460, "start": 2004.6, "end": 2016.52, "text": " So kernel hacking is fun, hair is fun, that's all I have fun, that's it.", "tokens": [407, 28256, 31422, 307, 1019, 11, 2578, 307, 1019, 11, 300, 311, 439, 286, 362, 1019, 11, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 470, "seek": 200460, "start": 2016.52, "end": 2018.12, "text": " Thank you so much Drew.", "tokens": [1044, 291, 370, 709, 25550, 13], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 471, "seek": 200460, "start": 2018.12, "end": 2019.3999999999999, "text": " Any questions from the audience?", "tokens": [2639, 1651, 490, 264, 4034, 30], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 472, "seek": 200460, "start": 2019.3999999999999, "end": 2020.3999999999999, "text": " Martin.", "tokens": [9184, 13], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 473, "seek": 200460, "start": 2020.3999999999999, "end": 2026.3999999999999, "text": " I'm going to give you guys my soap, best thanks to Martin first and then we're going to give", "tokens": [286, 478, 516, 281, 976, 291, 1074, 452, 14587, 11, 1151, 3231, 281, 9184, 700, 293, 550, 321, 434, 516, 281, 976], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 474, "seek": 200460, "start": 2026.3999999999999, "end": 2027.3999999999999, "text": " you.", "tokens": [291, 13], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 475, "seek": 200460, "start": 2027.3999999999999, "end": 2032.8799999999999, "text": " Hi, thanks for the talk, very interesting work.", "tokens": [2421, 11, 3231, 337, 264, 751, 11, 588, 1880, 589, 13], "temperature": 0.0, "avg_logprob": -0.3442956126013467, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.001011954271234572}, {"id": 476, "seek": 203288, "start": 2032.88, "end": 2041.92, "text": " I was unable to map the standard SCL4 capability derivation tree, like starting with anti-memory", "tokens": [286, 390, 11299, 281, 4471, 264, 3832, 9028, 43, 19, 13759, 10151, 399, 4230, 11, 411, 2891, 365, 6061, 12, 17886, 827], "temperature": 0.0, "avg_logprob": -0.2632753444167803, "compression_ratio": 1.6680161943319838, "no_speech_prob": 0.00016744124877732247}, {"id": 477, "seek": 203288, "start": 2041.92, "end": 2047.7600000000002, "text": " and then converting that to your slides, so do you have it as well or are you?", "tokens": [293, 550, 29942, 300, 281, 428, 9788, 11, 370, 360, 291, 362, 309, 382, 731, 420, 366, 291, 30], "temperature": 0.0, "avg_logprob": -0.2632753444167803, "compression_ratio": 1.6680161943319838, "no_speech_prob": 0.00016744124877732247}, {"id": 478, "seek": 203288, "start": 2047.7600000000002, "end": 2052.6800000000003, "text": " Yeah, we do track capability derivations in a manner very similar to SCL4 and it really", "tokens": [865, 11, 321, 360, 2837, 13759, 10151, 763, 294, 257, 9060, 588, 2531, 281, 9028, 43, 19, 293, 309, 534], "temperature": 0.0, "avg_logprob": -0.2632753444167803, "compression_ratio": 1.6680161943319838, "no_speech_prob": 0.00016744124877732247}, {"id": 479, "seek": 203288, "start": 2052.6800000000003, "end": 2056.7200000000003, "text": " would have been smart for me to put in a slide about that.", "tokens": [576, 362, 668, 4069, 337, 385, 281, 829, 294, 257, 4137, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.2632753444167803, "compression_ratio": 1.6680161943319838, "no_speech_prob": 0.00016744124877732247}, {"id": 480, "seek": 203288, "start": 2056.7200000000003, "end": 2062.28, "text": " So thanks for the clarification and the second, well I have a hard time formulating it as", "tokens": [407, 3231, 337, 264, 34449, 293, 264, 1150, 11, 731, 286, 362, 257, 1152, 565, 1254, 12162, 309, 382], "temperature": 0.0, "avg_logprob": -0.2632753444167803, "compression_ratio": 1.6680161943319838, "no_speech_prob": 0.00016744124877732247}, {"id": 481, "seek": 206228, "start": 2062.28, "end": 2067.5600000000004, "text": " a question, so maybe just take it as an unsolicited advice.", "tokens": [257, 1168, 11, 370, 1310, 445, 747, 309, 382, 364, 2693, 7940, 1226, 5192, 13], "temperature": 0.0, "avg_logprob": -0.1773050703653475, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0010524800745770335}, {"id": 482, "seek": 206228, "start": 2067.5600000000004, "end": 2072.5600000000004, "text": " Many of the design decisions of SCL4 were strictly motivated by the formal verification", "tokens": [5126, 295, 264, 1715, 5327, 295, 9028, 43, 19, 645, 20792, 14515, 538, 264, 9860, 30206], "temperature": 0.0, "avg_logprob": -0.1773050703653475, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0010524800745770335}, {"id": 483, "seek": 206228, "start": 2072.5600000000004, "end": 2074.36, "text": " target.", "tokens": [3779, 13], "temperature": 0.0, "avg_logprob": -0.1773050703653475, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0010524800745770335}, {"id": 484, "seek": 206228, "start": 2074.36, "end": 2080.36, "text": " So maybe when you have spoken for example about not sharing the pages, etc., just give", "tokens": [407, 1310, 562, 291, 362, 10759, 337, 1365, 466, 406, 5414, 264, 7183, 11, 5183, 7933, 445, 976], "temperature": 0.0, "avg_logprob": -0.1773050703653475, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0010524800745770335}, {"id": 485, "seek": 206228, "start": 2080.36, "end": 2088.7200000000003, "text": " it a thought that the reason for that might be that they did not want to make their life", "tokens": [309, 257, 1194, 300, 264, 1778, 337, 300, 1062, 312, 300, 436, 630, 406, 528, 281, 652, 641, 993], "temperature": 0.0, "avg_logprob": -0.1773050703653475, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.0010524800745770335}, {"id": 486, "seek": 208872, "start": 2088.72, "end": 2092.4399999999996, "text": " harder regarding the formal verification and that might be the only reason.", "tokens": [6081, 8595, 264, 9860, 30206, 293, 300, 1062, 312, 264, 787, 1778, 13], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 487, "seek": 208872, "start": 2092.4399999999996, "end": 2096.52, "text": " Yeah, I think I've noticed that for a few other implementation details from SCL4 when", "tokens": [865, 11, 286, 519, 286, 600, 5694, 300, 337, 257, 1326, 661, 11420, 4365, 490, 9028, 43, 19, 562], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 488, "seek": 208872, "start": 2096.52, "end": 2101.7999999999997, "text": " we were studying the kernel to learn what we could do for ours and with examples like", "tokens": [321, 645, 7601, 264, 28256, 281, 1466, 437, 321, 727, 360, 337, 11896, 293, 365, 5110, 411], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 489, "seek": 208872, "start": 2101.7999999999997, "end": 2108.04, "text": " sharing page tables, I had bigger fish to fry so I left a comment which says SCL4 doesn't", "tokens": [5414, 3028, 8020, 11, 286, 632, 3801, 3506, 281, 13776, 370, 286, 1411, 257, 2871, 597, 1619, 9028, 43, 19, 1177, 380], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 490, "seek": 208872, "start": 2108.04, "end": 2111.9599999999996, "text": " support copying these and I would rather not run into a Heisenberg because we did it without", "tokens": [1406, 27976, 613, 293, 286, 576, 2831, 406, 1190, 666, 257, 634, 11106, 6873, 570, 321, 630, 309, 1553], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 491, "seek": 208872, "start": 2111.9599999999996, "end": 2117.3199999999997, "text": " thinking about it, you know, and then we can really address it at some point in the future.", "tokens": [1953, 466, 309, 11, 291, 458, 11, 293, 550, 321, 393, 534, 2985, 309, 412, 512, 935, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.17575424194335937, "compression_ratio": 1.63125, "no_speech_prob": 0.00020542665151879191}, {"id": 492, "seek": 211732, "start": 2117.32, "end": 2118.88, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.3034532764289953, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.0010595389176160097}, {"id": 493, "seek": 211732, "start": 2118.88, "end": 2125.8, "text": " Hi, yeah, thanks for the talk, very interesting, quite impressive.", "tokens": [2421, 11, 1338, 11, 3231, 337, 264, 751, 11, 588, 1880, 11, 1596, 8992, 13], "temperature": 0.0, "avg_logprob": -0.3034532764289953, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.0010595389176160097}, {"id": 494, "seek": 211732, "start": 2125.8, "end": 2132.6400000000003, "text": " Yesterday we were talking about hair and thinking about it in retrospective, it seemed to me,", "tokens": [19765, 321, 645, 1417, 466, 2578, 293, 1953, 466, 309, 294, 34997, 488, 11, 309, 6576, 281, 385, 11], "temperature": 0.0, "avg_logprob": -0.3034532764289953, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.0010595389176160097}, {"id": 495, "seek": 211732, "start": 2132.6400000000003, "end": 2138.0800000000004, "text": " my personal opinion, that the great mechanisms of language design are mostly discovered like", "tokens": [452, 2973, 4800, 11, 300, 264, 869, 15902, 295, 2856, 1715, 366, 5240, 6941, 411], "temperature": 0.0, "avg_logprob": -0.3034532764289953, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.0010595389176160097}, {"id": 496, "seek": 211732, "start": 2138.0800000000004, "end": 2143.04, "text": " we have garbage collection and tech unions and that, assuming you agree with that statement", "tokens": [321, 362, 14150, 5765, 293, 7553, 24914, 293, 300, 11, 11926, 291, 3986, 365, 300, 5629], "temperature": 0.0, "avg_logprob": -0.3034532764289953, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.0010595389176160097}, {"id": 497, "seek": 214304, "start": 2143.04, "end": 2147.32, "text": " now that you've written that operating system kernel, would you also say that the great", "tokens": [586, 300, 291, 600, 3720, 300, 7447, 1185, 28256, 11, 576, 291, 611, 584, 300, 264, 869], "temperature": 0.0, "avg_logprob": -0.15805542584761834, "compression_ratio": 1.7255639097744362, "no_speech_prob": 0.00019849718955811113}, {"id": 498, "seek": 214304, "start": 2147.32, "end": 2152.12, "text": " mechanisms how to write a kernel are established and well-known, things like paging, was there", "tokens": [15902, 577, 281, 2464, 257, 28256, 366, 7545, 293, 731, 12, 6861, 11, 721, 411, 280, 3568, 11, 390, 456], "temperature": 0.0, "avg_logprob": -0.15805542584761834, "compression_ratio": 1.7255639097744362, "no_speech_prob": 0.00019849718955811113}, {"id": 499, "seek": 214304, "start": 2152.12, "end": 2160.52, "text": " still areas to experiment in new ways to do memory management, things like that?", "tokens": [920, 3179, 281, 5120, 294, 777, 2098, 281, 360, 4675, 4592, 11, 721, 411, 300, 30], "temperature": 0.0, "avg_logprob": -0.15805542584761834, "compression_ratio": 1.7255639097744362, "no_speech_prob": 0.00019849718955811113}, {"id": 500, "seek": 214304, "start": 2160.52, "end": 2165.88, "text": " Interesting question, I would say that there's a lot of concepts and ideas which can be applied", "tokens": [14711, 1168, 11, 286, 576, 584, 300, 456, 311, 257, 688, 295, 10392, 293, 3487, 597, 393, 312, 6456], "temperature": 0.0, "avg_logprob": -0.15805542584761834, "compression_ratio": 1.7255639097744362, "no_speech_prob": 0.00019849718955811113}, {"id": 501, "seek": 214304, "start": 2165.88, "end": 2172.84, "text": " in the field of OS development which are understood and you can see examples of kernels and systems", "tokens": [294, 264, 2519, 295, 12731, 3250, 597, 366, 7320, 293, 291, 393, 536, 5110, 295, 23434, 1625, 293, 3652], "temperature": 0.0, "avg_logprob": -0.15805542584761834, "compression_ratio": 1.7255639097744362, "no_speech_prob": 0.00019849718955811113}, {"id": 502, "seek": 217284, "start": 2172.84, "end": 2177.56, "text": " which apply these ideas and various different designs that you can learn from and study", "tokens": [597, 3079, 613, 3487, 293, 3683, 819, 11347, 300, 291, 393, 1466, 490, 293, 2979], "temperature": 0.0, "avg_logprob": -0.13712047537167868, "compression_ratio": 1.7374517374517375, "no_speech_prob": 3.701219611684792e-05}, {"id": 503, "seek": 217284, "start": 2177.56, "end": 2182.1200000000003, "text": " and maybe apply to your own kernel if they're the right choice and you can make a complete", "tokens": [293, 1310, 3079, 281, 428, 1065, 28256, 498, 436, 434, 264, 558, 3922, 293, 291, 393, 652, 257, 3566], "temperature": 0.0, "avg_logprob": -0.13712047537167868, "compression_ratio": 1.7374517374517375, "no_speech_prob": 3.701219611684792e-05}, {"id": 504, "seek": 217284, "start": 2182.1200000000003, "end": 2186.96, "text": " kernel which is interesting basically only using proven ideas which is for the most part", "tokens": [28256, 597, 307, 1880, 1936, 787, 1228, 12785, 3487, 597, 307, 337, 264, 881, 644], "temperature": 0.0, "avg_logprob": -0.13712047537167868, "compression_ratio": 1.7374517374517375, "no_speech_prob": 3.701219611684792e-05}, {"id": 505, "seek": 217284, "start": 2186.96, "end": 2192.6800000000003, "text": " describes Helios but at the same time there's certainly all kinds of research which is being", "tokens": [15626, 6128, 2717, 457, 412, 264, 912, 565, 456, 311, 3297, 439, 3685, 295, 2132, 597, 307, 885], "temperature": 0.0, "avg_logprob": -0.13712047537167868, "compression_ratio": 1.7374517374517375, "no_speech_prob": 3.701219611684792e-05}, {"id": 506, "seek": 217284, "start": 2192.6800000000003, "end": 2197.6800000000003, "text": " done into more novel approaches, there's been talks in this room throughout the day which", "tokens": [1096, 666, 544, 7613, 11587, 11, 456, 311, 668, 6686, 294, 341, 1808, 3710, 264, 786, 597], "temperature": 0.0, "avg_logprob": -0.13712047537167868, "compression_ratio": 1.7374517374517375, "no_speech_prob": 3.701219611684792e-05}, {"id": 507, "seek": 219768, "start": 2197.68, "end": 2203.6, "text": " address some of those novel approaches and ideas so I would say that there is certainly", "tokens": [2985, 512, 295, 729, 7613, 11587, 293, 3487, 370, 286, 576, 584, 300, 456, 307, 3297], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 508, "seek": 219768, "start": 2203.6, "end": 2207.68, "text": " room to build a kernel out of understood ideas and still make it interesting but there's", "tokens": [1808, 281, 1322, 257, 28256, 484, 295, 7320, 3487, 293, 920, 652, 309, 1880, 457, 456, 311], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 509, "seek": 219768, "start": 2207.68, "end": 2213.3199999999997, "text": " also definitely an active frontier of research ongoing as well.", "tokens": [611, 2138, 364, 4967, 35853, 295, 2132, 10452, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 510, "seek": 219768, "start": 2213.3199999999997, "end": 2214.3199999999997, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 511, "seek": 219768, "start": 2214.3199999999997, "end": 2216.3199999999997, "text": " Thank you so much.", "tokens": [1044, 291, 370, 709, 13], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 512, "seek": 219768, "start": 2216.3199999999997, "end": 2220.3199999999997, "text": " Any other questions?", "tokens": [2639, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 513, "seek": 219768, "start": 2220.3199999999997, "end": 2223.68, "text": " Yeah, please.", "tokens": [865, 11, 1767, 13], "temperature": 0.0, "avg_logprob": -0.2955990841514186, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00023899663938209414}, {"id": 514, "seek": 222368, "start": 2223.68, "end": 2234.56, "text": " Yeah, thank you for the talk.", "tokens": [865, 11, 1309, 291, 337, 264, 751, 13], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 515, "seek": 222368, "start": 2234.56, "end": 2237.3999999999996, "text": " You mentioned that you need position independent code, right?", "tokens": [509, 2835, 300, 291, 643, 2535, 6695, 3089, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 516, "seek": 222368, "start": 2237.3999999999996, "end": 2238.3999999999996, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 517, "seek": 222368, "start": 2238.3999999999996, "end": 2244.48, "text": " But I don't understand if you use every driver and it's just like a user space process so", "tokens": [583, 286, 500, 380, 1223, 498, 291, 764, 633, 6787, 293, 309, 311, 445, 411, 257, 4195, 1901, 1399, 370], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 518, "seek": 222368, "start": 2244.48, "end": 2250.24, "text": " can't you just remap that in MMU so that all the processes like a normal Linux process", "tokens": [393, 380, 291, 445, 890, 569, 300, 294, 34191, 52, 370, 300, 439, 264, 7555, 411, 257, 2710, 18734, 1399], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 519, "seek": 222368, "start": 2250.24, "end": 2251.8799999999997, "text": " just have the same memory map?", "tokens": [445, 362, 264, 912, 4675, 4471, 30], "temperature": 0.0, "avg_logprob": -0.20947616856272627, "compression_ratio": 1.5404040404040404, "no_speech_prob": 0.0014163561863824725}, {"id": 520, "seek": 225188, "start": 2251.88, "end": 2255.7200000000003, "text": " Yeah, actually the kernel and user space processes both use a fixed memory map.", "tokens": [865, 11, 767, 264, 28256, 293, 4195, 1901, 7555, 1293, 764, 257, 6806, 4675, 4471, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 521, "seek": 225188, "start": 2255.7200000000003, "end": 2259.44, "text": " The thing where we would maybe want to look at position independent code is specifically", "tokens": [440, 551, 689, 321, 576, 1310, 528, 281, 574, 412, 2535, 6695, 3089, 307, 4682], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 522, "seek": 225188, "start": 2259.44, "end": 2264.12, "text": " for the case of loading our EFI bootloader as a P32 plus executable.", "tokens": [337, 264, 1389, 295, 15114, 527, 462, 38568, 11450, 2907, 260, 382, 257, 430, 11440, 1804, 7568, 712, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 523, "seek": 225188, "start": 2264.12, "end": 2266.56, "text": " After that stage it's all fixed memory addresses.", "tokens": [2381, 300, 3233, 309, 311, 439, 6806, 4675, 16862, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 524, "seek": 225188, "start": 2266.56, "end": 2269.56, "text": " Yeah, then I understand.", "tokens": [865, 11, 550, 286, 1223, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 525, "seek": 225188, "start": 2269.56, "end": 2271.56, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 526, "seek": 225188, "start": 2271.56, "end": 2277.6, "text": " Hello, thank you for the talk.", "tokens": [2425, 11, 1309, 291, 337, 264, 751, 13], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 527, "seek": 225188, "start": 2277.6, "end": 2279.8, "text": " Can I ask a non-technical element?", "tokens": [1664, 286, 1029, 257, 2107, 12, 29113, 804, 4478, 30], "temperature": 0.0, "avg_logprob": -0.2480624822469858, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.0002944252628367394}, {"id": 528, "seek": 227980, "start": 2279.8, "end": 2282.1600000000003, "text": " You've GPL-3'd it.", "tokens": [509, 600, 460, 21593, 12, 18, 1116, 309, 13], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 529, "seek": 227980, "start": 2282.1600000000003, "end": 2283.84, "text": " How are you making decisions around the kernel?", "tokens": [1012, 366, 291, 1455, 5327, 926, 264, 28256, 30], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 530, "seek": 227980, "start": 2283.84, "end": 2284.84, "text": " Like is it inevitable?", "tokens": [1743, 307, 309, 21451, 30], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 531, "seek": 227980, "start": 2284.84, "end": 2288.6400000000003, "text": " Tata, are you making decisions or are you having massive conversations about things?", "tokens": [314, 3274, 11, 366, 291, 1455, 5327, 420, 366, 291, 1419, 5994, 7315, 466, 721, 30], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 532, "seek": 227980, "start": 2288.6400000000003, "end": 2292.04, "text": " How's that looking at the moment?", "tokens": [1012, 311, 300, 1237, 412, 264, 1623, 30], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 533, "seek": 227980, "start": 2292.04, "end": 2295.36, "text": " The vast majority of the work is just done by me personally at the moment.", "tokens": [440, 8369, 6286, 295, 264, 589, 307, 445, 1096, 538, 385, 5665, 412, 264, 1623, 13], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 534, "seek": 227980, "start": 2295.36, "end": 2299.5600000000004, "text": " The project is still pretty early on but we do have a number of other contributors.", "tokens": [440, 1716, 307, 920, 1238, 2440, 322, 457, 321, 360, 362, 257, 1230, 295, 661, 45627, 13], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 535, "seek": 227980, "start": 2299.5600000000004, "end": 2306.1600000000003, "text": " I would say that the group of people who ought to be consulted on changes is probably in the", "tokens": [286, 576, 584, 300, 264, 1594, 295, 561, 567, 13416, 281, 312, 47941, 322, 2962, 307, 1391, 294, 264], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 536, "seek": 227980, "start": 2306.1600000000003, "end": 2308.1600000000003, "text": " ballpark of five people in total.", "tokens": [2594, 31239, 295, 1732, 561, 294, 3217, 13], "temperature": 0.0, "avg_logprob": -0.1933975520096426, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.0006048779468983412}, {"id": 537, "seek": 230816, "start": 2308.16, "end": 2312.64, "text": " So we just have a fairly informal community based on trust.", "tokens": [407, 321, 445, 362, 257, 6457, 24342, 1768, 2361, 322, 3361, 13], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 538, "seek": 230816, "start": 2312.64, "end": 2316.56, "text": " We try to be transparent, like I am transparent in all of my free software, so we have a public", "tokens": [492, 853, 281, 312, 12737, 11, 411, 286, 669, 12737, 294, 439, 295, 452, 1737, 4722, 11, 370, 321, 362, 257, 1908], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 539, "seek": 230816, "start": 2316.56, "end": 2320.52, "text": " IRC channel where we have these discussions and anybody can jump in at any time and there's", "tokens": [16486, 34, 2269, 689, 321, 362, 613, 11088, 293, 4472, 393, 3012, 294, 412, 604, 565, 293, 456, 311], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 540, "seek": 230816, "start": 2320.52, "end": 2323.72, "text": " a patch review process which just goes through me at the moment.", "tokens": [257, 9972, 3131, 1399, 597, 445, 1709, 807, 385, 412, 264, 1623, 13], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 541, "seek": 230816, "start": 2323.72, "end": 2328.6, "text": " In the hair community, for example, which is a lot bigger at this stage, we have something", "tokens": [682, 264, 2578, 1768, 11, 337, 1365, 11, 597, 307, 257, 688, 3801, 412, 341, 3233, 11, 321, 362, 746], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 542, "seek": 230816, "start": 2328.6, "end": 2333.3599999999997, "text": " more of a governance model where there's less of a BDFL and more of multiple maintainers", "tokens": [544, 295, 257, 17449, 2316, 689, 456, 311, 1570, 295, 257, 363, 35, 31455, 293, 544, 295, 3866, 6909, 433], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 543, "seek": 230816, "start": 2333.3599999999997, "end": 2337.48, "text": " who all can do code reviews and improve patches and things like this.", "tokens": [567, 439, 393, 360, 3089, 10229, 293, 3470, 26531, 293, 721, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.13527105836307302, "compression_ratio": 1.7345679012345678, "no_speech_prob": 5.4731710406485945e-05}, {"id": 544, "seek": 233748, "start": 2337.48, "end": 2342.16, "text": " As the Helios project grows, I imagine it will adopt a model similar to hair and perhaps", "tokens": [1018, 264, 6128, 2717, 1716, 13156, 11, 286, 3811, 309, 486, 6878, 257, 2316, 2531, 281, 2578, 293, 4317], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 545, "seek": 233748, "start": 2342.16, "end": 2345.56, "text": " as hair grows, we'll have to improve upon the model even further.", "tokens": [382, 2578, 13156, 11, 321, 603, 362, 281, 3470, 3564, 264, 2316, 754, 3052, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 546, "seek": 233748, "start": 2345.56, "end": 2346.56, "text": " But we'll see.", "tokens": [583, 321, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 547, "seek": 233748, "start": 2346.56, "end": 2347.56, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 548, "seek": 233748, "start": 2347.56, "end": 2348.56, "text": " Nice shirt, by the way.", "tokens": [5490, 8336, 11, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 549, "seek": 233748, "start": 2348.56, "end": 2349.56, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 550, "seek": 233748, "start": 2349.56, "end": 2350.56, "text": " Can you pass it on?", "tokens": [1664, 291, 1320, 309, 322, 30], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 551, "seek": 233748, "start": 2350.56, "end": 2351.56, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 552, "seek": 233748, "start": 2351.56, "end": 2352.56, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 553, "seek": 233748, "start": 2352.56, "end": 2359.96, "text": " You mentioned that you don't want to deal with ACPI but at the same time you want to", "tokens": [509, 2835, 300, 291, 500, 380, 528, 281, 2028, 365, 8157, 31701, 457, 412, 264, 912, 565, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 554, "seek": 233748, "start": 2359.96, "end": 2362.6, "text": " make UFI standard, so what's the plan there?", "tokens": [652, 624, 38568, 3832, 11, 370, 437, 311, 264, 1393, 456, 30], "temperature": 0.0, "avg_logprob": -0.2539571180181988, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.0007603546837344766}, {"id": 555, "seek": 236260, "start": 2362.6, "end": 2368.2, "text": " Is there any way to sort of port ACPI in your system because I imagine that it will become", "tokens": [1119, 456, 604, 636, 281, 1333, 295, 2436, 8157, 31701, 294, 428, 1185, 570, 286, 3811, 300, 309, 486, 1813], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 556, "seek": 236260, "start": 2368.2, "end": 2370.2, "text": " mandatory, right?", "tokens": [22173, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 557, "seek": 236260, "start": 2370.2, "end": 2371.2, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 558, "seek": 236260, "start": 2371.2, "end": 2376.7999999999997, "text": " I'm going to wail and gnash my teeth and hope it doesn't happen in practice because", "tokens": [286, 478, 516, 281, 261, 864, 293, 49819, 1299, 452, 7798, 293, 1454, 309, 1177, 380, 1051, 294, 3124, 570], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 559, "seek": 236260, "start": 2376.7999999999997, "end": 2381.48, "text": " at the moment, you know, something like EDK2, to be clear, by the way, I don't give a fuck", "tokens": [412, 264, 1623, 11, 291, 458, 11, 746, 411, 18050, 42, 17, 11, 281, 312, 1850, 11, 538, 264, 636, 11, 286, 500, 380, 976, 257, 3275], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 560, "seek": 236260, "start": 2381.48, "end": 2386.4, "text": " about non-free firmwares, so I'm thinking about EDK2 and things like that or Uboot and", "tokens": [466, 2107, 12, 10792, 6174, 4151, 495, 11, 370, 286, 478, 1953, 466, 18050, 42, 17, 293, 721, 411, 300, 420, 624, 1763, 310, 293], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 561, "seek": 236260, "start": 2386.4, "end": 2392.44, "text": " so on where there's already an EFI standard UUID for passing a device tree along and", "tokens": [370, 322, 689, 456, 311, 1217, 364, 462, 38568, 3832, 624, 52, 2777, 337, 8437, 257, 4302, 4230, 2051, 293], "temperature": 0.0, "avg_logprob": -0.19242474570203183, "compression_ratio": 1.5680272108843538, "no_speech_prob": 0.00014611042570322752}, {"id": 562, "seek": 239244, "start": 2392.44, "end": 2396.2400000000002, "text": " they can be configured to do that instead of ACPI, which is what I'm doing on this Raspberry", "tokens": [436, 393, 312, 30538, 281, 360, 300, 2602, 295, 8157, 31701, 11, 597, 307, 437, 286, 478, 884, 322, 341, 41154], "temperature": 0.0, "avg_logprob": -0.16789907879299587, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.8392647436703555e-05}, {"id": 563, "seek": 239244, "start": 2396.2400000000002, "end": 2400.48, "text": " Pi, for example, and what I hope to continue to do on risk five and so on.", "tokens": [17741, 11, 337, 1365, 11, 293, 437, 286, 1454, 281, 2354, 281, 360, 322, 3148, 1732, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.16789907879299587, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.8392647436703555e-05}, {"id": 564, "seek": 239244, "start": 2400.48, "end": 2404.28, "text": " Our proof of concept on risk five took the same approach.", "tokens": [2621, 8177, 295, 3410, 322, 3148, 1732, 1890, 264, 912, 3109, 13], "temperature": 0.0, "avg_logprob": -0.16789907879299587, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.8392647436703555e-05}, {"id": 565, "seek": 239244, "start": 2404.28, "end": 2409.32, "text": " But there's very little in the kernel that actually needs to be concerned with ACPI", "tokens": [583, 456, 311, 588, 707, 294, 264, 28256, 300, 767, 2203, 281, 312, 5922, 365, 8157, 31701], "temperature": 0.0, "avg_logprob": -0.16789907879299587, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.8392647436703555e-05}, {"id": 566, "seek": 239244, "start": 2409.32, "end": 2415.28, "text": " versus device trees that, again, it is a microkernel, so in the long term, we might just pass along", "tokens": [5717, 4302, 5852, 300, 11, 797, 11, 309, 307, 257, 4532, 74, 1248, 338, 11, 370, 294, 264, 938, 1433, 11, 321, 1062, 445, 1320, 2051], "temperature": 0.0, "avg_logprob": -0.16789907879299587, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.8392647436703555e-05}, {"id": 567, "seek": 241528, "start": 2415.28, "end": 2432.0, "text": " the... at least a little bit in X86, you know, because there's no device trees.", "tokens": [264, 485, 412, 1935, 257, 707, 857, 294, 1783, 22193, 11, 291, 458, 11, 570, 456, 311, 572, 4302, 5852, 13], "temperature": 0.0, "avg_logprob": -0.3116482198238373, "compression_ratio": 1.3558282208588956, "no_speech_prob": 3.9998125430429354e-05}, {"id": 568, "seek": 241528, "start": 2432.0, "end": 2437.96, "text": " But you know, I'm fingers in my ears not thinking about the fact that ACPI is upon us, but we'll", "tokens": [583, 291, 458, 11, 286, 478, 7350, 294, 452, 8798, 406, 1953, 466, 264, 1186, 300, 8157, 31701, 307, 3564, 505, 11, 457, 321, 603], "temperature": 0.0, "avg_logprob": -0.3116482198238373, "compression_ratio": 1.3558282208588956, "no_speech_prob": 3.9998125430429354e-05}, {"id": 569, "seek": 241528, "start": 2437.96, "end": 2443.0800000000004, "text": " probably have to deal with it at some point.", "tokens": [1391, 362, 281, 2028, 365, 309, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.3116482198238373, "compression_ratio": 1.3558282208588956, "no_speech_prob": 3.9998125430429354e-05}, {"id": 570, "seek": 244308, "start": 2443.08, "end": 2449.36, "text": " Thank you for the presentation.", "tokens": [1044, 291, 337, 264, 5860, 13], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 571, "seek": 244308, "start": 2449.36, "end": 2453.84, "text": " Which software is running the presentation itself and how is it compiled?", "tokens": [3013, 4722, 307, 2614, 264, 5860, 2564, 293, 577, 307, 309, 36548, 30], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 572, "seek": 244308, "start": 2453.84, "end": 2457.2799999999997, "text": " This is just a custom piece of software I wrote myself.", "tokens": [639, 307, 445, 257, 2375, 2522, 295, 4722, 286, 4114, 2059, 13], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 573, "seek": 244308, "start": 2457.2799999999997, "end": 2462.44, "text": " It's a single binary which is loaded by the bootloader as the inner process and then", "tokens": [467, 311, 257, 2167, 17434, 597, 307, 13210, 538, 264, 11450, 2907, 260, 382, 264, 7284, 1399, 293, 550], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 574, "seek": 244308, "start": 2462.44, "end": 2467.12, "text": " the kernel loads it into an address space and boots it up as PID1.", "tokens": [264, 28256, 12668, 309, 666, 364, 2985, 1901, 293, 15194, 309, 493, 382, 430, 2777, 16, 13], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 575, "seek": 244308, "start": 2467.12, "end": 2472.92, "text": " And there's additionally a tarball as a second boot module which is, again, loaded into memory", "tokens": [400, 456, 311, 43181, 257, 3112, 3129, 382, 257, 1150, 11450, 10088, 597, 307, 11, 797, 11, 13210, 666, 4675], "temperature": 0.0, "avg_logprob": -0.18825255290116413, "compression_ratio": 1.6451612903225807, "no_speech_prob": 0.0005568243213929236}, {"id": 576, "seek": 247292, "start": 2472.92, "end": 2477.64, "text": " and then passed along to PID1 which is a tarball full of slides.", "tokens": [293, 550, 4678, 2051, 281, 430, 2777, 16, 597, 307, 257, 3112, 3129, 1577, 295, 9788, 13], "temperature": 0.0, "avg_logprob": -0.16472054852379692, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0002657114528119564}, {"id": 577, "seek": 247292, "start": 2477.64, "end": 2480.8, "text": " And then there's just one statically linked executable which contains a serial driver", "tokens": [400, 550, 456, 311, 445, 472, 2219, 984, 9408, 7568, 712, 597, 8306, 257, 17436, 6787], "temperature": 0.0, "avg_logprob": -0.16472054852379692, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0002657114528119564}, {"id": 578, "seek": 247292, "start": 2480.8, "end": 2486.08, "text": " and a GPU driver and the code to glue everything together.", "tokens": [293, 257, 18407, 6787, 293, 264, 3089, 281, 8998, 1203, 1214, 13], "temperature": 0.0, "avg_logprob": -0.16472054852379692, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0002657114528119564}, {"id": 579, "seek": 247292, "start": 2486.08, "end": 2497.44, "text": " The code, by the way, is available on source set if you're curious.", "tokens": [440, 3089, 11, 538, 264, 636, 11, 307, 2435, 322, 4009, 992, 498, 291, 434, 6369, 13], "temperature": 0.0, "avg_logprob": -0.16472054852379692, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0002657114528119564}, {"id": 580, "seek": 249744, "start": 2497.44, "end": 2505.12, "text": " As you mentioned, Elios is heavily inspired by SCL4, so is there any plan on format verification", "tokens": [1018, 291, 2835, 11, 2699, 2717, 307, 10950, 7547, 538, 9028, 43, 19, 11, 370, 307, 456, 604, 1393, 322, 7877, 30206], "temperature": 0.0, "avg_logprob": -0.3766510282244001, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.0006273605395108461}, {"id": 581, "seek": 249744, "start": 2505.12, "end": 2508.04, "text": " for Elios or that's not something you're interested in?", "tokens": [337, 2699, 2717, 420, 300, 311, 406, 746, 291, 434, 3102, 294, 30], "temperature": 0.0, "avg_logprob": -0.3766510282244001, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.0006273605395108461}, {"id": 582, "seek": 249744, "start": 2508.04, "end": 2511.7200000000003, "text": " No, I'm not particularly interested in that.", "tokens": [883, 11, 286, 478, 406, 4098, 3102, 294, 300, 13], "temperature": 0.0, "avg_logprob": -0.3766510282244001, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.0006273605395108461}, {"id": 583, "seek": 249744, "start": 2511.7200000000003, "end": 2520.36, "text": " In the back, there's someone.", "tokens": [682, 264, 646, 11, 456, 311, 1580, 13], "temperature": 0.0, "avg_logprob": -0.3766510282244001, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.0006273605395108461}, {"id": 584, "seek": 249744, "start": 2520.36, "end": 2521.36, "text": " Thanks for the presentation.", "tokens": [2561, 337, 264, 5860, 13], "temperature": 0.0, "avg_logprob": -0.3766510282244001, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.0006273605395108461}, {"id": 585, "seek": 252136, "start": 2521.36, "end": 2528.36, "text": " I have a question, is it on the road map that something like Weston or a other GUI server", "tokens": [286, 362, 257, 1168, 11, 307, 309, 322, 264, 3060, 4471, 300, 746, 411, 4055, 266, 420, 257, 661, 17917, 40, 7154], "temperature": 0.0, "avg_logprob": -0.2608918729035751, "compression_ratio": 1.5560538116591929, "no_speech_prob": 0.0004647269379347563}, {"id": 586, "seek": 252136, "start": 2528.36, "end": 2531.96, "text": " or other service like that could potentially be reported to Elios?", "tokens": [420, 661, 2643, 411, 300, 727, 7263, 312, 7055, 281, 2699, 2717, 30], "temperature": 0.0, "avg_logprob": -0.2608918729035751, "compression_ratio": 1.5560538116591929, "no_speech_prob": 0.0004647269379347563}, {"id": 587, "seek": 252136, "start": 2531.96, "end": 2536.6400000000003, "text": " I'm actually also the original author of WROTS and have a lot of experience in Wayland", "tokens": [286, 478, 767, 611, 264, 3380, 3793, 295, 343, 7142, 7327, 293, 362, 257, 688, 295, 1752, 294, 9558, 1661], "temperature": 0.0, "avg_logprob": -0.2608918729035751, "compression_ratio": 1.5560538116591929, "no_speech_prob": 0.0004647269379347563}, {"id": 588, "seek": 252136, "start": 2536.6400000000003, "end": 2544.56, "text": " and so there is a 100% chance that Wayland will be running on Elios at some point.", "tokens": [293, 370, 456, 307, 257, 2319, 4, 2931, 300, 9558, 1661, 486, 312, 2614, 322, 2699, 2717, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.2608918729035751, "compression_ratio": 1.5560538116591929, "no_speech_prob": 0.0004647269379347563}, {"id": 589, "seek": 252136, "start": 2544.56, "end": 2547.4, "text": " Any other questions?", "tokens": [2639, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.2608918729035751, "compression_ratio": 1.5560538116591929, "no_speech_prob": 0.0004647269379347563}, {"id": 590, "seek": 254740, "start": 2547.4, "end": 2559.8, "text": " As you said, for Gaia, you are inspired by Plan 9 and Unix.", "tokens": [1018, 291, 848, 11, 337, 10384, 654, 11, 291, 366, 7547, 538, 8112, 1722, 293, 1156, 970, 13], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 591, "seek": 254740, "start": 2559.8, "end": 2560.88, "text": " What do you plan for Gaia?", "tokens": [708, 360, 291, 1393, 337, 10384, 654, 30], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 592, "seek": 254740, "start": 2560.88, "end": 2565.92, "text": " What's the best of those both worlds?", "tokens": [708, 311, 264, 1151, 295, 729, 1293, 13401, 30], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 593, "seek": 254740, "start": 2565.92, "end": 2567.76, "text": " It's a little bit hard to say.", "tokens": [467, 311, 257, 707, 857, 1152, 281, 584, 13], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 594, "seek": 254740, "start": 2567.76, "end": 2573.08, "text": " At this point, there's less plans and more vision in that respect because we have at", "tokens": [1711, 341, 935, 11, 456, 311, 1570, 5482, 293, 544, 5201, 294, 300, 3104, 570, 321, 362, 412], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 595, "seek": 254740, "start": 2573.08, "end": 2577.2000000000003, "text": " least probably a year of work before we can really start serious work on Gaia.", "tokens": [1935, 1391, 257, 1064, 295, 589, 949, 321, 393, 534, 722, 3156, 589, 322, 10384, 654, 13], "temperature": 0.0, "avg_logprob": -0.19014645648258988, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.0010960304643958807}, {"id": 596, "seek": 257720, "start": 2577.2, "end": 2581.52, "text": " But I will say that there is a lot of stuff I admire about Plan 9.", "tokens": [583, 286, 486, 584, 300, 456, 307, 257, 688, 295, 1507, 286, 21951, 466, 8112, 1722, 13], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 597, "seek": 257720, "start": 2581.52, "end": 2584.68, "text": " There's per process namespaces is one great idea.", "tokens": [821, 311, 680, 1399, 5288, 79, 2116, 307, 472, 869, 1558, 13], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 598, "seek": 257720, "start": 2584.68, "end": 2590.3199999999997, "text": " I'm also going to go further with the idea of there not being any kind of global file", "tokens": [286, 478, 611, 516, 281, 352, 3052, 365, 264, 1558, 295, 456, 406, 885, 604, 733, 295, 4338, 3991], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 599, "seek": 257720, "start": 2590.3199999999997, "end": 2591.8399999999997, "text": " system at all.", "tokens": [1185, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 600, "seek": 257720, "start": 2591.8399999999997, "end": 2597.48, "text": " We're also going to take a look at things like using text-based protocols where possible", "tokens": [492, 434, 611, 516, 281, 747, 257, 574, 412, 721, 411, 1228, 2487, 12, 6032, 20618, 689, 1944], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 601, "seek": 257720, "start": 2597.48, "end": 2600.3599999999997, "text": " and we're going to use different from Plan 9.", "tokens": [293, 321, 434, 516, 281, 764, 819, 490, 8112, 1722, 13], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 602, "seek": 257720, "start": 2600.3599999999997, "end": 2605.52, "text": " We're going to use this IPC generation thing for places where text protocols maybe don't", "tokens": [492, 434, 516, 281, 764, 341, 8671, 34, 5125, 551, 337, 3190, 689, 2487, 20618, 1310, 500, 380], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 603, "seek": 257720, "start": 2605.52, "end": 2606.52, "text": " make sense.", "tokens": [652, 2020, 13], "temperature": 0.0, "avg_logprob": -0.13633119265238444, "compression_ratio": 1.7224334600760456, "no_speech_prob": 9.596448217052966e-05}, {"id": 604, "seek": 260652, "start": 2606.52, "end": 2611.16, "text": " I also have a lot of admiration for things like MBD on Plan 9 and so I would like to", "tokens": [286, 611, 362, 257, 688, 295, 44597, 337, 721, 411, 28866, 35, 322, 8112, 1722, 293, 370, 286, 576, 411, 281], "temperature": 0.0, "avg_logprob": -0.14653101655625805, "compression_ratio": 1.6958333333333333, "no_speech_prob": 4.190374966128729e-05}, {"id": 605, "seek": 260652, "start": 2611.16, "end": 2615.68, "text": " organize networks perhaps in a similar fashion.", "tokens": [13859, 9590, 4317, 294, 257, 2531, 6700, 13], "temperature": 0.0, "avg_logprob": -0.14653101655625805, "compression_ratio": 1.6958333333333333, "no_speech_prob": 4.190374966128729e-05}, {"id": 606, "seek": 260652, "start": 2615.68, "end": 2622.36, "text": " Also, I would say that the bigger vision for the whole area system is you can almost say", "tokens": [2743, 11, 286, 576, 584, 300, 264, 3801, 5201, 337, 264, 1379, 1859, 1185, 307, 291, 393, 1920, 584], "temperature": 0.0, "avg_logprob": -0.14653101655625805, "compression_ratio": 1.6958333333333333, "no_speech_prob": 4.190374966128729e-05}, {"id": 607, "seek": 260652, "start": 2622.36, "end": 2627.88, "text": " it's correcting a mistake that Plan 9 made, which is that Plan 9 was correct, that distributed", "tokens": [309, 311, 47032, 257, 6146, 300, 8112, 1722, 1027, 11, 597, 307, 300, 8112, 1722, 390, 3006, 11, 300, 12631], "temperature": 0.0, "avg_logprob": -0.14653101655625805, "compression_ratio": 1.6958333333333333, "no_speech_prob": 4.190374966128729e-05}, {"id": 608, "seek": 260652, "start": 2627.88, "end": 2633.72, "text": " computing is the future, but it was incorrect that they would be distributed across a main", "tokens": [15866, 307, 264, 2027, 11, 457, 309, 390, 18424, 300, 436, 576, 312, 12631, 2108, 257, 2135], "temperature": 0.0, "avg_logprob": -0.14653101655625805, "compression_ratio": 1.6958333333333333, "no_speech_prob": 4.190374966128729e-05}, {"id": 609, "seek": 263372, "start": 2633.72, "end": 2637.52, "text": " frame and a bunch of thin clients in office building, which is how Plan 9 was designed.", "tokens": [3920, 293, 257, 3840, 295, 5862, 6982, 294, 3398, 2390, 11, 597, 307, 577, 8112, 1722, 390, 4761, 13], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 610, "seek": 263372, "start": 2637.52, "end": 2642.2, "text": " In fact, the group of devices which should be running a uniform operating system is all", "tokens": [682, 1186, 11, 264, 1594, 295, 5759, 597, 820, 312, 2614, 257, 9452, 7447, 1185, 307, 439], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 611, "seek": 263372, "start": 2642.2, "end": 2646.64, "text": " of your personal devices, my laptop, my workstation at home, my phones, they should all present", "tokens": [295, 428, 2973, 5759, 11, 452, 10732, 11, 452, 589, 19159, 412, 1280, 11, 452, 10216, 11, 436, 820, 439, 1974], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 612, "seek": 263372, "start": 2646.64, "end": 2649.52, "text": " as a single system.", "tokens": [382, 257, 2167, 1185, 13], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 613, "seek": 263372, "start": 2649.52, "end": 2653.68, "text": " It's very vague and lofty and long-term vision, but I would like to try and achieve that with", "tokens": [467, 311, 588, 24247, 293, 34419, 88, 293, 938, 12, 7039, 5201, 11, 457, 286, 576, 411, 281, 853, 293, 4584, 300, 365], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 614, "seek": 263372, "start": 2653.68, "end": 2658.48, "text": " the design of Gaia and Aries.", "tokens": [264, 1715, 295, 10384, 654, 293, 316, 2244, 13], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 615, "seek": 263372, "start": 2658.48, "end": 2659.48, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 616, "seek": 263372, "start": 2659.48, "end": 2660.48, "text": " Any other questions?", "tokens": [2639, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.1865694382611443, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.00021143660706002265}, {"id": 617, "seek": 266048, "start": 2660.48, "end": 2664.36, "text": " Okay, then thank you so much, Drew.", "tokens": [1033, 11, 550, 1309, 291, 370, 709, 11, 25550, 13], "temperature": 0.0, "avg_logprob": -0.43230499759797125, "compression_ratio": 1.0224719101123596, "no_speech_prob": 0.013628339394927025}, {"id": 618, "seek": 266048, "start": 2664.36, "end": 2667.6, "text": " Thanks a lot.", "tokens": [2561, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.43230499759797125, "compression_ratio": 1.0224719101123596, "no_speech_prob": 0.013628339394927025}, {"id": 619, "seek": 266760, "start": 2667.6, "end": 2694.36, "text": " So, 10 minutes break until the next talk.", "tokens": [407, 11, 1266, 2077, 1821, 1826, 264, 958, 751, 13], "temperature": 0.0, "avg_logprob": -0.45368473870413645, "compression_ratio": 0.8367346938775511, "no_speech_prob": 0.011936334893107414}], "language": "en"}