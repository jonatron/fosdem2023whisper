{"text": " Next up, we have Peter Smith, who will talk about using all the empty-created LLVM tool chains. Hello, my name's Peter, and thank you all very much for staying up so late. It's almost bedtime. So I'll be here to talk about embedded tool chains using LLVM. So the first thing I want to clarify is what do I actually mean by an embedded tool chain? Now, some of the people here earlier on were talking about, as I say, sanitizers, and we mentioned Yachto and embedded Linux. That's way too high-level. This is basically for bare-metal embedded systems. So, yeah, so typical, for those of you who already know this, I'm sorry, but for those of you who aren't necessarily familiar about what some of the differences are. So typically when you're developing on, say, Linux or Mac or Windows, whatever, you're developing with the knowledge of an operating system. So when you implement your C-Library, you already know you can use system calls. You know, if you want to get some more memory, you ask the operating system, that type of thing. So by contrast on the embedded system, you don't have an operating system you can ask for memory. So you basically have to roll part of that into the C-Library, that type of thing. So also, when you're actually programming, you're programming on the device, you're actually running the program on, embedded systems, you're cross-compiling. That is one thing that is likely shared with Yachto and embedded Linux because quite often you're cross-compiled for speed on that one there. Typically, you're be static linking only because either your RTOS probably doesn't have a dynamic link at that particular point and your RTOS might actually just be a library that you link into your program, that type of thing. So yeah, so platform, if you're on Linux, you might be using G-Lib C, that type of thing and that will be platform and then you just use, when you have a tool chain, you might just need to provide a compiler and everything's there for you. Embedded systems, everything's just, you have to do everything all yourself. I will mention one word there, freestanding. So there is a definition in the C-plus standard of what freestanding means. It's a little loose. It kind of says this is basically what the minimum you have to supply, but that's practically useless unless you want to write a full C-plus plus standard implementation yourself. So in effect, what happens is that most embedded C-Libraries tend to roll half of an operating system into themselves, at least basically, yeah, basically minimum from there. So that's what we're sort of talking about by an embedded tool chain. Okay. So this is the thing we already have embedded tool chains. Why do we need LLVM essentially at this particular point? So this is some of the reasons why you might actually want to use LLVM over say something like GCC. So first of all, clang is kind of a natural cross compiler. So you don't actually have to say, gather GCC for ARM, GCC for S5, GCC for AL64, you just have one clang. Now that is quite useful if you're a team where you don't want to use different compilers, different installations, I guess more administrative more than anything, but it can be a benefit on some places. So code generation can also be more mature and I will say be safe of fairness, sometimes less mature than GCC, for example. So my, obviously for somebody who works for ARM, all my examples are for ARM just because that's what I know, but I'm sure there are similar sort of things on their architectures as well. So an example here, V8.1M, which is one of ARM's most recent sort of CPUs for embedded systems, it's got a vector extension and basically clang has got better support for auto vectorization for this than GCC, just simply because the work was done earlier, that type of thing. But that's just one of the examples why if you've got that particular target, you might want to use that, whereas if you've got a different target, GCC might be better at the moment. Other thing is taking advantage of some of the tooling that clang provides. So I'm going to go into in the next few slides how you might be able to use some of the sanitizers. I know we kind of said in the earlier bit this morning that we were talking particularly about MSAN and ASAN, that type of thing, and those typically have quite a high runtime component, but there are sanitizers that you can use without that, and I'll just go through a few of those here. And finally, you've got diversity of implementation running more compilers, it's almost always good. Compilers find different sets of bugs, and sometimes programs find different sets of compilers. Sorry? I was working recently on a safety critical application for train, and you actually have to implement several processes doing different things, so having two different compilers is a good thing in that application. Yes, definitely, yes, and certainly different programs find different compiler bugs as well, that sort of thing. So yeah, okay. So do you think sort of sanitize the embedded system? So we kind of run through some of this earlier on today. So the main restriction for sanitizers is that it's not actually the code generation, it's actually the run times. So if you look at the run time for ASAN, it's basically using a dynamic shared object to intercept the C library. It's got all sorts of bits that sort of kind of are operating system dependent, but of course in embedded you don't have an operating system, so it's very hard as a toolchain vendor to provide a kind of bare metal thing that doesn't depend on one very specific example. But some of the sanitizers have a very minimal run time, and some of these things you can use here. So I'm just going to go through some of these right now. So the first one to use is the undefined behavior sanitizer. So by default that does have a run time, but all that run time effectively doing is pretty printing a nice error. But if you don't care about pretty printing a nice error, you might not even have a printer. So at this particular case, then you can just say, okay, well, if there's undefined behavior in my program and someone's trying to attack me, maybe that's a bad thing. So maybe I just want to abort, say for example, if I've got an out of range run time. This particular example is just using a very standard integer overflow detection. And basically look on there, all it's really doing is just saying, check for overflow. If I overflow branch to an undefined instruction that just happens to cause an abort on the processor, that type of thing. So yes, crush your program. There's also a minimal run time. So there is a default implementation of the minimal run time in compiler RT. You can't use that directly on an embedded system, but you can basically write your own. So instead of actually calling, well, going branching to an undefined instruction, it just calls a user defined function. And you can basically make that do whatever you want. There are ones for log and continue, and there's ones for log and terminate, that type of thing. But basically the choice is yours. But those functions have got extremely trivial implementations that you can make work from an embedded system. Okay. Next one here is the kernel control flow integrity. And it's called KFCI. And I keep calling it KFC. I've even got this to write right around it. Actually, I think I've even got it wrong on the slide, which is embarrassing. I should actually be KCFI at that particular point. So there is a control flow sanitizer that can work with embedded systems right now. That's the sort of the full fat, I call it sanitizer. But that requires link time optimization. So the advantage of the kernel control flow integrity sanitizers is it doesn't need LTO, which makes, if anyone to try to use LTO on embedded systems, it works until you've got a linker script. Certainly what a linker script that depends on placing things in different places. So yeah, so here's just a very trivial example of something that's just calling a floating point. And this just shows some of the code that's generated. So what we essentially have is this function pointer has a type. And you can basically make that into a signature. So what happens is we prefix the top of the function with the signature. And then we basically load when we're sort of saying, oh, let's load from this arbitrary function pointer. Well, let's check its signature. And then we'll check to see if it matches what we want. And if it doesn't, boom. So this doesn't, as far as I know, work on C++ V tables at the moment. As obviously this is implemented for the Linux kernel. So they don't care about C++. So, but if you're using C with function pointers, this is a way, a relatively low cost way to get control flow integrity checking. Okay. So this is just some of the things that the components of an embedded tool chain. I'm kind of jumping around here at the moment. So these are sort of the things you would expect in a GCC embedded tool chain. And as you can see, Clang's actually, well, LLVM project, we've got pretty much all that we need in one place. We're only really missing a C library at the moment. So yes, we can go through some of the, I won't go through each individual thing in those titles, but you've got, you know, Clang, the compiler, you've got LLV, the linker, you've got implementations of obstump, read-elf, you've got implementations of the C++ runtime library. Yes, say, what we're missing is a C library. So technically, GCC doesn't have a C library either, but there are hooks in the build system to basically build new lib in sort of multi-lib configurations at that point. LLVM is developing a C library. I would say at the moment that currently it's sort of focused on what you would probably call desktop use cases, but they are planning to have sort of scalable implementations. So I think the end goal is that it will be able to cope with embedded systems, but I expect that to be some, some years down the line at the moment. Okay. So how would you actually assemble one of these building? Well, basically assemble an LLVM toolchain from the LLVM project. And the honest answer is it's not as easy as it could be. Certainly when you're building a sort of a hosted toolchain, it's just, you know, it's fairly easy. You just go to LLVM, Cmate, Ninja, done. So actually building the tools is not difficult because they're all cross-compilers. They're just all part of the default build. So if you want to get all the tools, very, very simple. Building the run times is a bit more difficult because you've got to cross-compile the run times. And you've got to do them in a particular order, not all of them build in all of the things. So one of the big problems, if you say try and buy compiler, sorry, if you try and compile compiler RT, it'll fail because you've not got all of the, you know, it's kind of, if you try, it'll end up building the sanitizers. And the sanitizers obviously have got dependencies on POSIX operating systems, which of course won't work. But you can say, for example, build the built-ins, which are kind of like the LibGCC equivalent. So what we've done at ARM is to put together an embedded toolchain for Cortex-M, which is the sort of ARM's microcontroller range. And this is essentially a set of build scripts. It's all open source. And we're using the Pico Lib-C at the moment as our C library. And we did start with New Lib, but we sort of moved on to Pico Lib at that point. But you can make it work with New Lib if you want to. So yeah, so we've got, it's primarily just build scripts. It's not like got an LLVN project embedded on that. It will just go fetch LLVN from the actual source code. And yes, it's got a few samples for, you know, for building some programs, that type of thing. So as I say, it's by ARM, for ARM. But I'm sure if anybody wanted to apply it to a different microprocessor, they pretty much could because it's essentially just a bit of C make and that you can adapt. So what's the usability of an LLVN toolchain like next to say the GNU embedded toolchain, that type of thing. So one of the main things we're missing at the moment is multi-lib support. Now there are some multi-lib support for certain targets. So for example, I think there are some RISC-5 multi-libs that are already in the bare metal driver. But that's not the case for ARM at the moment. I'll go on to what we're doing about that in a few slides time. Clang also doesn't have a direct equivalent of GCC specs files. So specs files are basically just fragments of command line, but they're not just raw command lines. They have got some intelligence and they can talk to each other and override sort of defaults. So as an example here, that nano.specs and RDImon.specs, that says give me newlib nano, which is the really small version of newlib. And RDImon is the semi-hosted version, which is easier to run on emulators, that type of thing. So for the LLVN embedded toolchain, we basically, because we don't have the information for the specs file to say, ah, someone else has someone added this other specs file, so I'm going to modify my behaviors, we have to basically have multiple config files that just blow up for all of the possible combinations. So as you see there, we've got an ARMv6m, which ideally would be handled by multi-lib in the DMD semi-host version. And yeah, there's just more configuration files than you really ought to have. And I would say there's probably a small, well, there's a long tail of small incompatibilities. You might find that LLD doesn't do orphan placement exactly the same way as GNU-LD does that type of thing. But normally these sort of small incompatibilities, you can kind of code around it. There's normally a way you can make it work. So that's what we've found so far anyway. Okay. So this is just, again, another jumping around, just showing you how Clang might do some of this sort of stuff. So if any of you have played around with Clang drivers, whenever you give them the target triple. So normally if you're using Clang on your Linux, your target triple is, you know, native, I guess at this particular point. Or you're using the default triple that's there. But if you're doing cross compilation, you have to give it a sort of architecture environment. So you've got the Linux-GNU there. So this is actually one, if you were targeting something like the Octo, that type of thing. And that will Clang driver will then tell you where all of your header files are, what your target features are. So it's like a much low level using sort of private command line options at that particular one. So for what we find for embedded systems is that Clang has added something, well, probably a few years ago, but it's sort of only recently sort of getting a bit more development onto it. In particular, the multi-lib support for RISC-5 came in fairly recently. And that's when you have a target that the bare metal handles. So far, that's only ARMA ART64 and RISC-5 at the moment. In theory, it could be added for any other target, that type of thing. If you happen to be doing bare metal development on an X86 and you don't match, say, a Linux operating system or BSD or whatever, you end up getting forwarded to the generic GCC driver, which basically throws everything which generally knows what to do about things. So as long as you've got a GCC tool chain, if you give an object file to GCC, GCC will say, oh, I'll just fire that at the linker, that type of thing. So it will work itself out. Okay. So I've just basically repeated what I've just said there. It will default to the LLVM tools at that particular point. So as the last part of the talk, I just want to go to some of the ongoing work that's happening in Clang and some of the community involvement that's going on here. So one of the first and probably the major bit of work that we're doing at the moment is what I'm going to call data-driven multi-lib at the moment. So currently, multi-lib support in Clang is hard-coded. It's basically a C++ class where you basically describe what the multi-lib will do for that. Now, that works pretty well if you're doing things like 32 or 64-bit x86 in, say, Debian or Red Hat because the structures are well known at that particular point and they are stable. Whereas there's no way every possible embedded tool chain with every possible library variant that you might want to do could get that hard-coded in upstream Clang. So typically, what you find is that every tool chain based on LLVM has its own downstream patch if it wants to support multi-lib. So GCC allows you to set this up at configure time and the GCC way basically maps command line options onto directories. So for Clang, we can do a bit better because the Clang driver has a bit more scope to say, do things like target parser and find out more about what the CPU can do. So at the moment, we're kind of proposing that you kind of have a stacked tower of multi-libs where you can kind of almost like a Docker container file where you get each sort of can override the next so that you can basically describe what your multi-lib configuration is and then Clang will be able to take this configuration file. So it will basically allow people to have multi-lib tool chains without having to hard code them in downstream patches, that type of thing. So this is still in active development. There's an RFC that went up probably a few weeks ago. Recently, there's some links to the patches and that sort of thing. So please do, if you're interested in data-driven multi-lib and how it develops, please do comment on those patches and the RFC. So future work. So we'd ideally like to get some upstream build bots for some of the compiler RT runtimes. So whilst there are build bots for ART64 and ARM Linux, we haven't got build bots for, say, the built-ins for, say, the V6M, V7M, the sort of the very low-level embedded sort of targets. And we think that would be good to, you know, well, obviously more build bots the better, I think, at that particular point. There is some work going on at TI. So that link to YouTube is to a presentation at the last LLVM developer meeting, basically adding attributes from the linker script so that you can basically say things like, this section must go in this place, this output section, this one must go in this other one. Please do not cross-module inline across these boundaries because these things might not be in memory at the same time, that type of thing. And also, I need this section to have this particular name, so please don't give it a different name or merge it, that type of thing. So that should be able to make LTO much more usable with linker scripts. And what we tend to find with Clang is that if you get it right, LTO is very aggressive at removing code that's not needed. So that's actually very good for code size if you can make it work. Certainly we've seen, you know, for benchmarks, LTO is great, but then we say to customers, hey, use LTO and it goes, ah, but we can't because of the linker script, that type of thing. Next one is not strictly embedded, but it is very important for the safety critical industry, which often is, you know, by definition embedded because you're controlling some kind of hardware. And this is something called MCDC code coverage. And that is kind of a special form of code coverage where you're kind of, if you can imagine something like if, and then A, B, C, D, E, and E, it's a way of sort of deriving test cases so that, so it's not quite exhaustive, but it covers more than just did this branch go this way or this way. It's like, did it go this way because this condition held that type of thing. Hopefully that's not going to show up too much there. And yeah, so there's some, there's a patch in for generating that in the code coverage thing. And it obviously, a lot of VM libc developing. And we would like that to support embedded systems. Okay, I'll skip through this very quickly. There's some patches up for Big Endian support. If anyone actually uses Big Endian, I don't know. I'll be rude there. There's an armed person. We're almost our arms a little Indian. And then there's the Cortex-M security extensions, which are, you know, that's very useful if you're trying to sort of have secure state, non-secure state. So that supports in LLD. Again, if anyone wants to comment on those patches, please do. Okay. Okay, so fine. Finally, if you do want to contribute to this, and this is not just as a developer, we're perfectly happy to have contributions from users as well or just in some ways just telling us what's important. So Clang has pretty much come out of what I call the hosted community. You know, it's generally, at least as now I would say there's a lot fewer people in the embedded system, embedded systems area than there is on GCC. So if you, you know, there are certain features that are useful in embedded tool chains, but not necessarily in say, hosted tool chains. So just telling the community that you need these features is often helpful because quite often it will say, why do we need all this complexity for this thing? No one's going to use it. And it's like, well, and you can only get people only get used to features if they're there, but then you can't get them in, you know, chicken and egg situation there. So yeah, so there is a four weekly call that goes on, unfortunately, at a time slot that's not great for Europeans, but this is the only sort of time slot you can kind of get across US and Europe together at that particular point. So that's probably about, I'd say about 20 people turn up. And that's really just about the various people who are working on embedded systems and if they want to sort of highlight patches that want to be reviewed, discuss new features. Last time we were talking about how we might improve LLDs, observability of diagnostics, that type of thing. Obviously bug reports, welcome at those links. And obviously if you attend the developer meetings, there's often a round table on embedded systems at that point. And with that, that's my last slide. So hopefully we've got a few minutes for questions. I'm trying to understand something. I know of some people who say that they're using LLVM for embedded already. Does this mean that they're using the other definition of embedded? So there's two, well, you can do it. There'll be three ways they can do it. One of them is they're kind of using an LLVM based tool chain from a vendor. So that vendor will have done all of that packaging up. Or it will be like, for example, ARM will sell you a commercial tool chain that is a derivative of Clang, that type of thing. That's one way of doing it, that sort of thing. Or they might be using embedded Linux, that type of thing. The question was, sorry, I've been holding up a picture all day saying, please repeat the question. I didn't. And the question was, some people say they're already using LLVM. Does that mean they were using a hosted system or not? Okay. Just the first, sorry, go out the back there. Yes. So one of the things I noticed is LLVM ships its own assembler. We've noticed for some LLVM projects that they have trouble with some of the new assembler macros. So we have to go back to the truth and just put some of the targets. Is there some plans for work on this? So with the latest LLVM, I know, sorry, sorry, repeat the question. So the question was, the LLVM has an integrated assembler. GNU has GNU AS. And there are some directives or macro support that might be in the GNU assembler, but not LLVM. So I think it's generally done on demand. So there was a big effort to get the Linux kernel compiled with Clang. And that added quite a lot of features that were basically needed for the Linux kernel. So the best thing to do is have a really important project that's a big company wants to get compiled with the integrated assembler. Yes. Yes. Yes. Yes. That is a very good way of doing it. As macros were in the Linux kernel and they asked us to support them and say, no, screw this, the kernel changed away from macros. And they changed away from macros. Yeah. But there certainly was support. There was, I think there is a directive where you can switch the GNU assembler into advanced macro mode or something like that. Or I can't remember. No, that's not that. That's the inline assembly thing. There is an F. Yes, there is a high GNU extensions option. But no, there was a patch that probably landed a few years ago. So depending on how long ago you tried, then there was some support done for more macros. But whether it's got all of it or not, I don't know. Well, I actually don't. I've got a lot of problems. It was a while ago. Right. Yes. You may find that someone has already fixed that already. Yes. Thank you. Yeah. So my question is about, like, we, for example, tried to deploy machine learning models on tiny bare metal devices. Yeah. And there we are also looking into, for example, TVM as a tool chain, but also MLIR now, or like the EV project from Google. Yeah. And they're basically what they do is they use this entire tool chain, and then they use the MITC dialect, for example, in EV to MITC code again. Okay. To then put it into an embedded tool chain to actually do the final compilation stuff. Do you think that there is, or what is basically needed to omit this last going back to C, or is this a good idea or not? Or... Oh, well, I mean, I suppose... I'm just trying to think how, not very familiar. So the question was about people deploying machine learning models on small devices, and they're currently outputting to a C back end, and then recompiling that C back end. And do I think this is a good idea or not? I mean, I guess the C back ends are often the, how do I get this up and running as quickly as possible? I do know that there are, I guess, machine learning compilers that have got, I guess, code generation out. I mean, I guess if you're using LLVM itself, it's probably not too difficult to just lower to LLVM and get most, and you then get the code generation for free. I guess the bit that you might not get is, have you got all of the run time and intrinsics that you might have that the C compiler might insert, but I don't, you might find someone else knows why. So maybe just in addition, it does not compile the whole machine learning models to C, so they are still a static library linked in which it's generated via LLVM. It's just some parts around, so it's not that they are as pure C in the end. That's not done in the approach. Okay. Yes, sir, yes. I was one of those unfortunate uses of big ambient arm. We were running several compilers in this safety-critical application. Everyone had a problem with one thing, and that's the linker. We're trying to generate a header. And the linker, you can't insert a text string in the linker. It's very difficult to insert static data. We want to insert information about how large is the section. That was basically possible to do with the linker. How does LLVM handle all these other things? With great difficulty, I think, I think there isn't really a, there isn't, I think the, yeah, I think Christoph is nailed it in that, what I would probably do myself is reserve some space in the binary, name a section out of it, and then use Obstump to poke it in at that particular point. Can you see my problem? No, yes. I mean, there are some... Putting a string in the link command file. Well, it's a bit more difficult. It's the, I think the linker needs to know the length. I mean, I suppose you could do it with horrifying things. You could use data statements in the linker script, but that sounds a bit, it's really what you would want. I want it. Yes, really, I think, yeah, because you get a number, but really, yeah, I suppose, yeah, find the extension request of a linker script. I mean, specify the size of the section to start with, then I know the size. Yeah, I think we do have the problem, we do have a problem with things like build ID, I think at that particular point where you're generating the build ID string, which needs to know everything all at once, but yeah, I get, yeah. Unfortunately, there's nothing in the LLD linker that's different. If someone should try to generate the header for a binary, contain the interest in information, then you quickly realize all the problems. Oh, yep, sure. The new assembler has the ink bin, doesn't it? Yes, the assembler does have ink bin, but I think the idea is, for the header, you want the linker to generate something based on the properties of something, but... You want to generate the information about the link time, not when you assembled it two weeks ago. You can assemble, just before the link is done, assemble something that's generated. Even.ovmile, and then link that in using the link script. I know there are workarounds, but a good workaround would have to have a good link. Yeah, I mean, I think, I mean, a lot of the times with linkers, it's the, because one of the, one of the perennial things you could ask is, how do I embed some kind of custom checksum that I've written at link time, you know, that type of thing? And it's just which one, and do you then have a linker Python script extension or plug-in? It just tends to build. Yeah. Check some afterwards, and that's also something that should be supported in linker. Yeah. And it would be done, just say, run this application afterwards on this section, something like that. Yeah. So it's... Do you do a partial link, and then analyze the object file, then do a final link? Yeah. I mean, I guess... More workarounds. Yeah. I mean, to paraphrase, I guess, is the tools are supposed to make users' life easier, I suppose, at that particular point. So if it's a common enough thing to do, then it should be, they should be able to find a way of doing it. And if this is security, then you don't want to generate the checksum in one process, and then use it in the other process. You want to use all in one, because I know who generated this, and it didn't come from outside. We actually have to have two different programs, and is that the case? Yeah. So, I wait, so I better go for... Yeah, so I just have a follow-up to that discussion, so I'm not an LFM developer, but I deal with a lot of built-ins. Does anyone working on stuff to make things a bit better, this sort of thing? Because essentially, like, you're talking about communicating between the file stage and the link stage, and introducing dependencies to what you have, and that you have to link with after that. Right. And now, like, it seems like you need, like, a schema, a data format, and a dependency specification for that, so the built systems could actually use it, and spare the users who have to deal with that. Nice. I mean, I think that the big... I say it's mostly a, what I would call, almost a coordination problem between getting the right people on board at that particular point, and it's... So it's quite... Can you repeat the question? Sorry. Yes. Okay. So the question was about, is anybody working on build systems and things that they will be able to communicate the... Of the linker to be able to communicate to the build system and automate things like the checksome sort of handling and that type of thing. I mean, I think the major difficulty is just an LVM is an open source project, and there's often, as soon as you open something like that up, it ends up in lots and lots of discussions about what the right way, and you can easily find a way that works for one, a small number of people, but completely doesn't work for someone else, so it's one of those... It first of all needs someone brave enough to actually try it rather than just implementing it downstream. So I think it's... What it really needs in this case is, because this is sort of things that... This is not... It really needs people to go on the LVM mailing list and say, yes, we really need this, because typically this sort of thing is to silent people who say, oh, this stuff's all rubbish, but we don't... As developers, we don't get to hear about it, or at least we don't get to hear it loud enough for the people who pay our wages to say go and work on it. Yeah. Right, yeah. Okay, I probably ought to hold it there to let everyone go, I think, at that point. Thank you very much for staying and I'll see you all next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.24, "text": " Next up, we have Peter Smith, who will talk about using all the empty-created LLVM tool", "tokens": [3087, 493, 11, 321, 362, 6508, 8538, 11, 567, 486, 751, 466, 1228, 439, 264, 6707, 12, 66, 26559, 441, 43, 53, 44, 2290], "temperature": 0.0, "avg_logprob": -0.28496808272141677, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.4815928637981415}, {"id": 1, "seek": 0, "start": 10.24, "end": 11.24, "text": " chains.", "tokens": [12626, 13], "temperature": 0.0, "avg_logprob": -0.28496808272141677, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.4815928637981415}, {"id": 2, "seek": 0, "start": 11.24, "end": 16.12, "text": " Hello, my name's Peter, and thank you all very much for staying up so late. It's almost", "tokens": [2425, 11, 452, 1315, 311, 6508, 11, 293, 1309, 291, 439, 588, 709, 337, 7939, 493, 370, 3469, 13, 467, 311, 1920], "temperature": 0.0, "avg_logprob": -0.28496808272141677, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.4815928637981415}, {"id": 3, "seek": 0, "start": 16.12, "end": 23.080000000000002, "text": " bedtime. So I'll be here to talk about embedded tool chains using LLVM. So the first thing", "tokens": [45850, 13, 407, 286, 603, 312, 510, 281, 751, 466, 16741, 2290, 12626, 1228, 441, 43, 53, 44, 13, 407, 264, 700, 551], "temperature": 0.0, "avg_logprob": -0.28496808272141677, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.4815928637981415}, {"id": 4, "seek": 0, "start": 23.080000000000002, "end": 27.400000000000002, "text": " I want to clarify is what do I actually mean by an embedded tool chain? Now, some of the", "tokens": [286, 528, 281, 17594, 307, 437, 360, 286, 767, 914, 538, 364, 16741, 2290, 5021, 30, 823, 11, 512, 295, 264], "temperature": 0.0, "avg_logprob": -0.28496808272141677, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.4815928637981415}, {"id": 5, "seek": 2740, "start": 27.4, "end": 33.239999999999995, "text": " people here earlier on were talking about, as I say, sanitizers, and we mentioned Yachto", "tokens": [561, 510, 3071, 322, 645, 1417, 466, 11, 382, 286, 584, 11, 24533, 22525, 11, 293, 321, 2835, 398, 3589, 78], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 6, "seek": 2740, "start": 33.239999999999995, "end": 39.519999999999996, "text": " and embedded Linux. That's way too high-level. This is basically for bare-metal embedded", "tokens": [293, 16741, 18734, 13, 663, 311, 636, 886, 1090, 12, 12418, 13, 639, 307, 1936, 337, 6949, 12, 39857, 16741], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 7, "seek": 2740, "start": 39.519999999999996, "end": 44.72, "text": " systems. So, yeah, so typical, for those of you who already know this, I'm sorry, but", "tokens": [3652, 13, 407, 11, 1338, 11, 370, 7476, 11, 337, 729, 295, 291, 567, 1217, 458, 341, 11, 286, 478, 2597, 11, 457], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 8, "seek": 2740, "start": 44.72, "end": 48.44, "text": " for those of you who aren't necessarily familiar about what some of the differences are. So", "tokens": [337, 729, 295, 291, 567, 3212, 380, 4725, 4963, 466, 437, 512, 295, 264, 7300, 366, 13, 407], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 9, "seek": 2740, "start": 48.44, "end": 53.28, "text": " typically when you're developing on, say, Linux or Mac or Windows, whatever, you're", "tokens": [5850, 562, 291, 434, 6416, 322, 11, 584, 11, 18734, 420, 5707, 420, 8591, 11, 2035, 11, 291, 434], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 10, "seek": 2740, "start": 53.28, "end": 57.36, "text": " developing with the knowledge of an operating system. So when you implement your C-Library,", "tokens": [6416, 365, 264, 3601, 295, 364, 7447, 1185, 13, 407, 562, 291, 4445, 428, 383, 12, 43, 6414, 822, 11], "temperature": 0.0, "avg_logprob": -0.23275906598126447, "compression_ratio": 1.7129032258064516, "no_speech_prob": 0.00018383722635917366}, {"id": 11, "seek": 5736, "start": 57.36, "end": 61.16, "text": " you already know you can use system calls. You know, if you want to get some more memory,", "tokens": [291, 1217, 458, 291, 393, 764, 1185, 5498, 13, 509, 458, 11, 498, 291, 528, 281, 483, 512, 544, 4675, 11], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 12, "seek": 5736, "start": 61.16, "end": 65.28, "text": " you ask the operating system, that type of thing. So by contrast on the embedded system,", "tokens": [291, 1029, 264, 7447, 1185, 11, 300, 2010, 295, 551, 13, 407, 538, 8712, 322, 264, 16741, 1185, 11], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 13, "seek": 5736, "start": 65.28, "end": 69.12, "text": " you don't have an operating system you can ask for memory. So you basically have to roll", "tokens": [291, 500, 380, 362, 364, 7447, 1185, 291, 393, 1029, 337, 4675, 13, 407, 291, 1936, 362, 281, 3373], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 14, "seek": 5736, "start": 69.12, "end": 74.24, "text": " part of that into the C-Library, that type of thing. So also, when you're actually programming,", "tokens": [644, 295, 300, 666, 264, 383, 12, 43, 6414, 822, 11, 300, 2010, 295, 551, 13, 407, 611, 11, 562, 291, 434, 767, 9410, 11], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 15, "seek": 5736, "start": 74.24, "end": 78.2, "text": " you're programming on the device, you're actually running the program on, embedded systems,", "tokens": [291, 434, 9410, 322, 264, 4302, 11, 291, 434, 767, 2614, 264, 1461, 322, 11, 16741, 3652, 11], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 16, "seek": 5736, "start": 78.2, "end": 82.6, "text": " you're cross-compiling. That is one thing that is likely shared with Yachto and embedded", "tokens": [291, 434, 3278, 12, 21541, 4883, 13, 663, 307, 472, 551, 300, 307, 3700, 5507, 365, 398, 3589, 78, 293, 16741], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 17, "seek": 5736, "start": 82.6, "end": 87.34, "text": " Linux because quite often you're cross-compiled for speed on that one there. Typically, you're", "tokens": [18734, 570, 1596, 2049, 291, 434, 3278, 12, 21541, 7292, 337, 3073, 322, 300, 472, 456, 13, 23129, 11, 291, 434], "temperature": 0.0, "avg_logprob": -0.1278747797012329, "compression_ratio": 2.0157728706624605, "no_speech_prob": 8.122533472487703e-06}, {"id": 18, "seek": 8734, "start": 87.34, "end": 92.64, "text": " be static linking only because either your RTOS probably doesn't have a dynamic link", "tokens": [312, 13437, 25775, 787, 570, 2139, 428, 21797, 4367, 1391, 1177, 380, 362, 257, 8546, 2113], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 19, "seek": 8734, "start": 92.64, "end": 96.28, "text": " at that particular point and your RTOS might actually just be a library that you link into", "tokens": [412, 300, 1729, 935, 293, 428, 21797, 4367, 1062, 767, 445, 312, 257, 6405, 300, 291, 2113, 666], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 20, "seek": 8734, "start": 96.28, "end": 102.2, "text": " your program, that type of thing. So yeah, so platform, if you're on Linux, you might", "tokens": [428, 1461, 11, 300, 2010, 295, 551, 13, 407, 1338, 11, 370, 3663, 11, 498, 291, 434, 322, 18734, 11, 291, 1062], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 21, "seek": 8734, "start": 102.2, "end": 107.56, "text": " be using G-Lib C, that type of thing and that will be platform and then you just use, when", "tokens": [312, 1228, 460, 12, 43, 897, 383, 11, 300, 2010, 295, 551, 293, 300, 486, 312, 3663, 293, 550, 291, 445, 764, 11, 562], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 22, "seek": 8734, "start": 107.56, "end": 111.2, "text": " you have a tool chain, you might just need to provide a compiler and everything's there", "tokens": [291, 362, 257, 2290, 5021, 11, 291, 1062, 445, 643, 281, 2893, 257, 31958, 293, 1203, 311, 456], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 23, "seek": 8734, "start": 111.2, "end": 116.32000000000001, "text": " for you. Embedded systems, everything's just, you have to do everything all yourself. I", "tokens": [337, 291, 13, 24234, 292, 9207, 3652, 11, 1203, 311, 445, 11, 291, 362, 281, 360, 1203, 439, 1803, 13, 286], "temperature": 0.0, "avg_logprob": -0.18566335233530604, "compression_ratio": 1.8082191780821917, "no_speech_prob": 3.9076734537957236e-05}, {"id": 24, "seek": 11632, "start": 116.32, "end": 120.36, "text": " will mention one word there, freestanding. So there is a definition in the C-plus standard", "tokens": [486, 2152, 472, 1349, 456, 11, 2130, 377, 42389, 13, 407, 456, 307, 257, 7123, 294, 264, 383, 12, 18954, 3832], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 25, "seek": 11632, "start": 120.36, "end": 124.52, "text": " of what freestanding means. It's a little loose. It kind of says this is basically what the", "tokens": [295, 437, 2130, 377, 42389, 1355, 13, 467, 311, 257, 707, 9612, 13, 467, 733, 295, 1619, 341, 307, 1936, 437, 264], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 26, "seek": 11632, "start": 124.52, "end": 130.0, "text": " minimum you have to supply, but that's practically useless unless you want to write a full C-plus", "tokens": [7285, 291, 362, 281, 5847, 11, 457, 300, 311, 15667, 14115, 5969, 291, 528, 281, 2464, 257, 1577, 383, 12, 18954], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 27, "seek": 11632, "start": 130.0, "end": 135.6, "text": " plus standard implementation yourself. So in effect, what happens is that most embedded", "tokens": [1804, 3832, 11420, 1803, 13, 407, 294, 1802, 11, 437, 2314, 307, 300, 881, 16741], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 28, "seek": 11632, "start": 135.6, "end": 140.24, "text": " C-Libraries tend to roll half of an operating system into themselves, at least basically,", "tokens": [383, 12, 43, 6414, 4889, 3928, 281, 3373, 1922, 295, 364, 7447, 1185, 666, 2969, 11, 412, 1935, 1936, 11], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 29, "seek": 11632, "start": 140.24, "end": 143.24, "text": " yeah, basically minimum from there. So that's what we're sort of talking about by an embedded", "tokens": [1338, 11, 1936, 7285, 490, 456, 13, 407, 300, 311, 437, 321, 434, 1333, 295, 1417, 466, 538, 364, 16741], "temperature": 0.0, "avg_logprob": -0.16668484623270824, "compression_ratio": 1.77491961414791, "no_speech_prob": 6.283584298216738e-06}, {"id": 30, "seek": 14324, "start": 143.24, "end": 149.52, "text": " tool chain. Okay. So this is the thing we already have embedded tool chains. Why do we", "tokens": [2290, 5021, 13, 1033, 13, 407, 341, 307, 264, 551, 321, 1217, 362, 16741, 2290, 12626, 13, 1545, 360, 321], "temperature": 0.0, "avg_logprob": -0.17405514419078827, "compression_ratio": 1.6115107913669064, "no_speech_prob": 1.2385908121359535e-05}, {"id": 31, "seek": 14324, "start": 149.52, "end": 153.72, "text": " need LLVM essentially at this particular point? So this is some of the reasons why you might", "tokens": [643, 441, 43, 53, 44, 4476, 412, 341, 1729, 935, 30, 407, 341, 307, 512, 295, 264, 4112, 983, 291, 1062], "temperature": 0.0, "avg_logprob": -0.17405514419078827, "compression_ratio": 1.6115107913669064, "no_speech_prob": 1.2385908121359535e-05}, {"id": 32, "seek": 14324, "start": 153.72, "end": 159.52, "text": " actually want to use LLVM over say something like GCC. So first of all, clang is kind of", "tokens": [767, 528, 281, 764, 441, 43, 53, 44, 670, 584, 746, 411, 460, 11717, 13, 407, 700, 295, 439, 11, 596, 656, 307, 733, 295], "temperature": 0.0, "avg_logprob": -0.17405514419078827, "compression_ratio": 1.6115107913669064, "no_speech_prob": 1.2385908121359535e-05}, {"id": 33, "seek": 14324, "start": 159.52, "end": 165.60000000000002, "text": " a natural cross compiler. So you don't actually have to say, gather GCC for ARM, GCC for S5,", "tokens": [257, 3303, 3278, 31958, 13, 407, 291, 500, 380, 767, 362, 281, 584, 11, 5448, 460, 11717, 337, 45209, 11, 460, 11717, 337, 318, 20, 11], "temperature": 0.0, "avg_logprob": -0.17405514419078827, "compression_ratio": 1.6115107913669064, "no_speech_prob": 1.2385908121359535e-05}, {"id": 34, "seek": 14324, "start": 165.60000000000002, "end": 171.72, "text": " GCC for AL64, you just have one clang. Now that is quite useful if you're a team where", "tokens": [460, 11717, 337, 7056, 19395, 11, 291, 445, 362, 472, 596, 656, 13, 823, 300, 307, 1596, 4420, 498, 291, 434, 257, 1469, 689], "temperature": 0.0, "avg_logprob": -0.17405514419078827, "compression_ratio": 1.6115107913669064, "no_speech_prob": 1.2385908121359535e-05}, {"id": 35, "seek": 17172, "start": 171.72, "end": 176.8, "text": " you don't want to use different compilers, different installations, I guess more administrative", "tokens": [291, 500, 380, 528, 281, 764, 819, 715, 388, 433, 11, 819, 41932, 11, 286, 2041, 544, 17900], "temperature": 0.0, "avg_logprob": -0.18208030353892934, "compression_ratio": 1.6474820143884892, "no_speech_prob": 4.717608589999145e-06}, {"id": 36, "seek": 17172, "start": 176.8, "end": 181.56, "text": " more than anything, but it can be a benefit on some places. So code generation can also", "tokens": [544, 813, 1340, 11, 457, 309, 393, 312, 257, 5121, 322, 512, 3190, 13, 407, 3089, 5125, 393, 611], "temperature": 0.0, "avg_logprob": -0.18208030353892934, "compression_ratio": 1.6474820143884892, "no_speech_prob": 4.717608589999145e-06}, {"id": 37, "seek": 17172, "start": 181.56, "end": 188.04, "text": " be more mature and I will say be safe of fairness, sometimes less mature than GCC, for example.", "tokens": [312, 544, 14442, 293, 286, 486, 584, 312, 3273, 295, 29765, 11, 2171, 1570, 14442, 813, 460, 11717, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.18208030353892934, "compression_ratio": 1.6474820143884892, "no_speech_prob": 4.717608589999145e-06}, {"id": 38, "seek": 17172, "start": 188.04, "end": 193.0, "text": " So my, obviously for somebody who works for ARM, all my examples are for ARM just because", "tokens": [407, 452, 11, 2745, 337, 2618, 567, 1985, 337, 45209, 11, 439, 452, 5110, 366, 337, 45209, 445, 570], "temperature": 0.0, "avg_logprob": -0.18208030353892934, "compression_ratio": 1.6474820143884892, "no_speech_prob": 4.717608589999145e-06}, {"id": 39, "seek": 17172, "start": 193.0, "end": 196.56, "text": " that's what I know, but I'm sure there are similar sort of things on their architectures", "tokens": [300, 311, 437, 286, 458, 11, 457, 286, 478, 988, 456, 366, 2531, 1333, 295, 721, 322, 641, 6331, 1303], "temperature": 0.0, "avg_logprob": -0.18208030353892934, "compression_ratio": 1.6474820143884892, "no_speech_prob": 4.717608589999145e-06}, {"id": 40, "seek": 19656, "start": 196.56, "end": 206.68, "text": " as well. So an example here, V8.1M, which is one of ARM's most recent sort of CPUs for", "tokens": [382, 731, 13, 407, 364, 1365, 510, 11, 691, 23, 13, 16, 44, 11, 597, 307, 472, 295, 45209, 311, 881, 5162, 1333, 295, 13199, 82, 337], "temperature": 0.0, "avg_logprob": -0.13890494971439757, "compression_ratio": 1.595667870036101, "no_speech_prob": 6.427053904189961e-06}, {"id": 41, "seek": 19656, "start": 206.68, "end": 212.36, "text": " embedded systems, it's got a vector extension and basically clang has got better support", "tokens": [16741, 3652, 11, 309, 311, 658, 257, 8062, 10320, 293, 1936, 596, 656, 575, 658, 1101, 1406], "temperature": 0.0, "avg_logprob": -0.13890494971439757, "compression_ratio": 1.595667870036101, "no_speech_prob": 6.427053904189961e-06}, {"id": 42, "seek": 19656, "start": 212.36, "end": 216.96, "text": " for auto vectorization for this than GCC, just simply because the work was done earlier,", "tokens": [337, 8399, 8062, 2144, 337, 341, 813, 460, 11717, 11, 445, 2935, 570, 264, 589, 390, 1096, 3071, 11], "temperature": 0.0, "avg_logprob": -0.13890494971439757, "compression_ratio": 1.595667870036101, "no_speech_prob": 6.427053904189961e-06}, {"id": 43, "seek": 19656, "start": 216.96, "end": 220.24, "text": " that type of thing. But that's just one of the examples why if you've got that particular", "tokens": [300, 2010, 295, 551, 13, 583, 300, 311, 445, 472, 295, 264, 5110, 983, 498, 291, 600, 658, 300, 1729], "temperature": 0.0, "avg_logprob": -0.13890494971439757, "compression_ratio": 1.595667870036101, "no_speech_prob": 6.427053904189961e-06}, {"id": 44, "seek": 19656, "start": 220.24, "end": 223.64000000000001, "text": " target, you might want to use that, whereas if you've got a different target, GCC might", "tokens": [3779, 11, 291, 1062, 528, 281, 764, 300, 11, 9735, 498, 291, 600, 658, 257, 819, 3779, 11, 460, 11717, 1062], "temperature": 0.0, "avg_logprob": -0.13890494971439757, "compression_ratio": 1.595667870036101, "no_speech_prob": 6.427053904189961e-06}, {"id": 45, "seek": 22364, "start": 223.64, "end": 228.92, "text": " be better at the moment. Other thing is taking advantage of some of the tooling that clang", "tokens": [312, 1101, 412, 264, 1623, 13, 5358, 551, 307, 1940, 5002, 295, 512, 295, 264, 46593, 300, 596, 656], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 46, "seek": 22364, "start": 228.92, "end": 233.32, "text": " provides. So I'm going to go into in the next few slides how you might be able to use some", "tokens": [6417, 13, 407, 286, 478, 516, 281, 352, 666, 294, 264, 958, 1326, 9788, 577, 291, 1062, 312, 1075, 281, 764, 512], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 47, "seek": 22364, "start": 233.32, "end": 238.48, "text": " of the sanitizers. I know we kind of said in the earlier bit this morning that we were", "tokens": [295, 264, 24533, 22525, 13, 286, 458, 321, 733, 295, 848, 294, 264, 3071, 857, 341, 2446, 300, 321, 645], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 48, "seek": 22364, "start": 238.48, "end": 242.2, "text": " talking particularly about MSAN and ASAN, that type of thing, and those typically have", "tokens": [1417, 4098, 466, 7395, 1770, 293, 7469, 1770, 11, 300, 2010, 295, 551, 11, 293, 729, 5850, 362], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 49, "seek": 22364, "start": 242.2, "end": 248.67999999999998, "text": " quite a high runtime component, but there are sanitizers that you can use without that,", "tokens": [1596, 257, 1090, 34474, 6542, 11, 457, 456, 366, 24533, 22525, 300, 291, 393, 764, 1553, 300, 11], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 50, "seek": 22364, "start": 248.67999999999998, "end": 253.07999999999998, "text": " and I'll just go through a few of those here. And finally, you've got diversity of implementation", "tokens": [293, 286, 603, 445, 352, 807, 257, 1326, 295, 729, 510, 13, 400, 2721, 11, 291, 600, 658, 8811, 295, 11420], "temperature": 0.0, "avg_logprob": -0.13996182066021542, "compression_ratio": 1.7120253164556962, "no_speech_prob": 4.8742263061285485e-06}, {"id": 51, "seek": 25308, "start": 253.08, "end": 257.44, "text": " running more compilers, it's almost always good. Compilers find different sets of bugs,", "tokens": [2614, 544, 715, 388, 433, 11, 309, 311, 1920, 1009, 665, 13, 6620, 388, 433, 915, 819, 6352, 295, 15120, 11], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 52, "seek": 25308, "start": 257.44, "end": 260.04, "text": " and sometimes programs find different sets of compilers. Sorry?", "tokens": [293, 2171, 4268, 915, 819, 6352, 295, 715, 388, 433, 13, 4919, 30], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 53, "seek": 25308, "start": 260.04, "end": 265.28000000000003, "text": " I was working recently on a safety critical application for train, and you actually have", "tokens": [286, 390, 1364, 3938, 322, 257, 4514, 4924, 3861, 337, 3847, 11, 293, 291, 767, 362], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 54, "seek": 25308, "start": 265.28000000000003, "end": 270.92, "text": " to implement several processes doing different things, so having two different compilers", "tokens": [281, 4445, 2940, 7555, 884, 819, 721, 11, 370, 1419, 732, 819, 715, 388, 433], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 55, "seek": 25308, "start": 270.92, "end": 274.76, "text": " is a good thing in that application. Yes, definitely, yes, and certainly different", "tokens": [307, 257, 665, 551, 294, 300, 3861, 13, 1079, 11, 2138, 11, 2086, 11, 293, 3297, 819], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 56, "seek": 25308, "start": 274.76, "end": 280.8, "text": " programs find different compiler bugs as well, that sort of thing. So yeah, okay. So do you", "tokens": [4268, 915, 819, 31958, 15120, 382, 731, 11, 300, 1333, 295, 551, 13, 407, 1338, 11, 1392, 13, 407, 360, 291], "temperature": 0.0, "avg_logprob": -0.29488770574586004, "compression_ratio": 1.894736842105263, "no_speech_prob": 0.00010450380796100944}, {"id": 57, "seek": 28080, "start": 280.8, "end": 284.44, "text": " think sort of sanitize the embedded system? So we kind of run through some of this earlier", "tokens": [519, 1333, 295, 24533, 1125, 264, 16741, 1185, 30, 407, 321, 733, 295, 1190, 807, 512, 295, 341, 3071], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 58, "seek": 28080, "start": 284.44, "end": 289.68, "text": " on today. So the main restriction for sanitizers is that it's not actually the code generation,", "tokens": [322, 965, 13, 407, 264, 2135, 29529, 337, 24533, 22525, 307, 300, 309, 311, 406, 767, 264, 3089, 5125, 11], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 59, "seek": 28080, "start": 289.68, "end": 295.40000000000003, "text": " it's actually the run times. So if you look at the run time for ASAN, it's basically using", "tokens": [309, 311, 767, 264, 1190, 1413, 13, 407, 498, 291, 574, 412, 264, 1190, 565, 337, 7469, 1770, 11, 309, 311, 1936, 1228], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 60, "seek": 28080, "start": 295.40000000000003, "end": 302.0, "text": " a dynamic shared object to intercept the C library. It's got all sorts of bits that", "tokens": [257, 8546, 5507, 2657, 281, 24700, 264, 383, 6405, 13, 467, 311, 658, 439, 7527, 295, 9239, 300], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 61, "seek": 28080, "start": 302.0, "end": 305.84000000000003, "text": " sort of kind of are operating system dependent, but of course in embedded you don't have an", "tokens": [1333, 295, 733, 295, 366, 7447, 1185, 12334, 11, 457, 295, 1164, 294, 16741, 291, 500, 380, 362, 364], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 62, "seek": 28080, "start": 305.84000000000003, "end": 310.48, "text": " operating system, so it's very hard as a toolchain vendor to provide a kind of bare metal", "tokens": [7447, 1185, 11, 370, 309, 311, 588, 1152, 382, 257, 2290, 11509, 24321, 281, 2893, 257, 733, 295, 6949, 5760], "temperature": 0.0, "avg_logprob": -0.1412133525188704, "compression_ratio": 1.780327868852459, "no_speech_prob": 1.474760438213707e-06}, {"id": 63, "seek": 31048, "start": 310.48, "end": 315.40000000000003, "text": " thing that doesn't depend on one very specific example. But some of the sanitizers have a", "tokens": [551, 300, 1177, 380, 5672, 322, 472, 588, 2685, 1365, 13, 583, 512, 295, 264, 24533, 22525, 362, 257], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 64, "seek": 31048, "start": 315.40000000000003, "end": 319.04, "text": " very minimal run time, and some of these things you can use here. So I'm just going to go", "tokens": [588, 13206, 1190, 565, 11, 293, 512, 295, 613, 721, 291, 393, 764, 510, 13, 407, 286, 478, 445, 516, 281, 352], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 65, "seek": 31048, "start": 319.04, "end": 325.16, "text": " through some of these right now. So the first one to use is the undefined behavior sanitizer.", "tokens": [807, 512, 295, 613, 558, 586, 13, 407, 264, 700, 472, 281, 764, 307, 264, 674, 5666, 2001, 5223, 47080, 13], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 66, "seek": 31048, "start": 325.16, "end": 329.68, "text": " So by default that does have a run time, but all that run time effectively doing is pretty", "tokens": [407, 538, 7576, 300, 775, 362, 257, 1190, 565, 11, 457, 439, 300, 1190, 565, 8659, 884, 307, 1238], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 67, "seek": 31048, "start": 329.68, "end": 334.56, "text": " printing a nice error. But if you don't care about pretty printing a nice error, you might", "tokens": [14699, 257, 1481, 6713, 13, 583, 498, 291, 500, 380, 1127, 466, 1238, 14699, 257, 1481, 6713, 11, 291, 1062], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 68, "seek": 31048, "start": 334.56, "end": 340.08000000000004, "text": " not even have a printer. So at this particular case, then you can just say, okay, well, if", "tokens": [406, 754, 362, 257, 16671, 13, 407, 412, 341, 1729, 1389, 11, 550, 291, 393, 445, 584, 11, 1392, 11, 731, 11, 498], "temperature": 0.0, "avg_logprob": -0.1172086743340976, "compression_ratio": 1.8827586206896552, "no_speech_prob": 3.294853058832814e-06}, {"id": 69, "seek": 34008, "start": 340.08, "end": 345.0, "text": " there's undefined behavior in my program and someone's trying to attack me, maybe that's", "tokens": [456, 311, 674, 5666, 2001, 5223, 294, 452, 1461, 293, 1580, 311, 1382, 281, 2690, 385, 11, 1310, 300, 311], "temperature": 0.0, "avg_logprob": -0.13656756661155006, "compression_ratio": 1.6779026217228465, "no_speech_prob": 2.8079944058845285e-06}, {"id": 70, "seek": 34008, "start": 345.0, "end": 349.64, "text": " a bad thing. So maybe I just want to abort, say for example, if I've got an out of range", "tokens": [257, 1578, 551, 13, 407, 1310, 286, 445, 528, 281, 38117, 11, 584, 337, 1365, 11, 498, 286, 600, 658, 364, 484, 295, 3613], "temperature": 0.0, "avg_logprob": -0.13656756661155006, "compression_ratio": 1.6779026217228465, "no_speech_prob": 2.8079944058845285e-06}, {"id": 71, "seek": 34008, "start": 349.64, "end": 355.71999999999997, "text": " run time. This particular example is just using a very standard integer overflow detection.", "tokens": [1190, 565, 13, 639, 1729, 1365, 307, 445, 1228, 257, 588, 3832, 24922, 37772, 17784, 13], "temperature": 0.0, "avg_logprob": -0.13656756661155006, "compression_ratio": 1.6779026217228465, "no_speech_prob": 2.8079944058845285e-06}, {"id": 72, "seek": 34008, "start": 355.71999999999997, "end": 361.52, "text": " And basically look on there, all it's really doing is just saying, check for overflow. If", "tokens": [400, 1936, 574, 322, 456, 11, 439, 309, 311, 534, 884, 307, 445, 1566, 11, 1520, 337, 37772, 13, 759], "temperature": 0.0, "avg_logprob": -0.13656756661155006, "compression_ratio": 1.6779026217228465, "no_speech_prob": 2.8079944058845285e-06}, {"id": 73, "seek": 34008, "start": 361.52, "end": 365.56, "text": " I overflow branch to an undefined instruction that just happens to cause an abort on the", "tokens": [286, 37772, 9819, 281, 364, 674, 5666, 2001, 10951, 300, 445, 2314, 281, 3082, 364, 38117, 322, 264], "temperature": 0.0, "avg_logprob": -0.13656756661155006, "compression_ratio": 1.6779026217228465, "no_speech_prob": 2.8079944058845285e-06}, {"id": 74, "seek": 36556, "start": 365.56, "end": 371.4, "text": " processor, that type of thing. So yes, crush your program. There's also a minimal run time.", "tokens": [15321, 11, 300, 2010, 295, 551, 13, 407, 2086, 11, 10321, 428, 1461, 13, 821, 311, 611, 257, 13206, 1190, 565, 13], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 75, "seek": 36556, "start": 371.4, "end": 374.92, "text": " So there is a default implementation of the minimal run time in compiler RT. You can't", "tokens": [407, 456, 307, 257, 7576, 11420, 295, 264, 13206, 1190, 565, 294, 31958, 21797, 13, 509, 393, 380], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 76, "seek": 36556, "start": 374.92, "end": 380.7, "text": " use that directly on an embedded system, but you can basically write your own. So instead", "tokens": [764, 300, 3838, 322, 364, 16741, 1185, 11, 457, 291, 393, 1936, 2464, 428, 1065, 13, 407, 2602], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 77, "seek": 36556, "start": 380.7, "end": 384.72, "text": " of actually calling, well, going branching to an undefined instruction, it just calls", "tokens": [295, 767, 5141, 11, 731, 11, 516, 9819, 278, 281, 364, 674, 5666, 2001, 10951, 11, 309, 445, 5498], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 78, "seek": 36556, "start": 384.72, "end": 389.08, "text": " a user defined function. And you can basically make that do whatever you want. There are", "tokens": [257, 4195, 7642, 2445, 13, 400, 291, 393, 1936, 652, 300, 360, 2035, 291, 528, 13, 821, 366], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 79, "seek": 36556, "start": 389.08, "end": 394.84000000000003, "text": " ones for log and continue, and there's ones for log and terminate, that type of thing.", "tokens": [2306, 337, 3565, 293, 2354, 11, 293, 456, 311, 2306, 337, 3565, 293, 10761, 473, 11, 300, 2010, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.14288759965163012, "compression_ratio": 1.8275862068965518, "no_speech_prob": 2.7940057407249697e-05}, {"id": 80, "seek": 39484, "start": 394.84, "end": 400.03999999999996, "text": " But basically the choice is yours. But those functions have got extremely trivial implementations", "tokens": [583, 1936, 264, 3922, 307, 6342, 13, 583, 729, 6828, 362, 658, 4664, 26703, 4445, 763], "temperature": 0.0, "avg_logprob": -0.19971653393336705, "compression_ratio": 1.597864768683274, "no_speech_prob": 6.631878932239488e-06}, {"id": 81, "seek": 39484, "start": 400.03999999999996, "end": 405.91999999999996, "text": " that you can make work from an embedded system. Okay. Next one here is the kernel control", "tokens": [300, 291, 393, 652, 589, 490, 364, 16741, 1185, 13, 1033, 13, 3087, 472, 510, 307, 264, 28256, 1969], "temperature": 0.0, "avg_logprob": -0.19971653393336705, "compression_ratio": 1.597864768683274, "no_speech_prob": 6.631878932239488e-06}, {"id": 82, "seek": 39484, "start": 405.91999999999996, "end": 411.64, "text": " flow integrity. And it's called KFCI. And I keep calling it KFC. I've even got this", "tokens": [3095, 16000, 13, 400, 309, 311, 1219, 591, 18671, 40, 13, 400, 286, 1066, 5141, 309, 591, 18671, 13, 286, 600, 754, 658, 341], "temperature": 0.0, "avg_logprob": -0.19971653393336705, "compression_ratio": 1.597864768683274, "no_speech_prob": 6.631878932239488e-06}, {"id": 83, "seek": 39484, "start": 411.64, "end": 415.08, "text": " to write right around it. Actually, I think I've even got it wrong on the slide, which", "tokens": [281, 2464, 558, 926, 309, 13, 5135, 11, 286, 519, 286, 600, 754, 658, 309, 2085, 322, 264, 4137, 11, 597], "temperature": 0.0, "avg_logprob": -0.19971653393336705, "compression_ratio": 1.597864768683274, "no_speech_prob": 6.631878932239488e-06}, {"id": 84, "seek": 39484, "start": 415.08, "end": 421.67999999999995, "text": " is embarrassing. I should actually be KCFI at that particular point. So there is a control", "tokens": [307, 17299, 13, 286, 820, 767, 312, 591, 34, 38568, 412, 300, 1729, 935, 13, 407, 456, 307, 257, 1969], "temperature": 0.0, "avg_logprob": -0.19971653393336705, "compression_ratio": 1.597864768683274, "no_speech_prob": 6.631878932239488e-06}, {"id": 85, "seek": 42168, "start": 421.68, "end": 426.68, "text": " flow sanitizer that can work with embedded systems right now. That's the sort of the", "tokens": [3095, 47080, 300, 393, 589, 365, 16741, 3652, 558, 586, 13, 663, 311, 264, 1333, 295, 264], "temperature": 0.0, "avg_logprob": -0.1867503426291726, "compression_ratio": 1.6593406593406594, "no_speech_prob": 1.0873617611650843e-05}, {"id": 86, "seek": 42168, "start": 426.68, "end": 435.36, "text": " full fat, I call it sanitizer. But that requires link time optimization. So the advantage of", "tokens": [1577, 4046, 11, 286, 818, 309, 47080, 13, 583, 300, 7029, 2113, 565, 19618, 13, 407, 264, 5002, 295], "temperature": 0.0, "avg_logprob": -0.1867503426291726, "compression_ratio": 1.6593406593406594, "no_speech_prob": 1.0873617611650843e-05}, {"id": 87, "seek": 42168, "start": 435.36, "end": 441.2, "text": " the kernel control flow integrity sanitizers is it doesn't need LTO, which makes, if anyone", "tokens": [264, 28256, 1969, 3095, 16000, 24533, 22525, 307, 309, 1177, 380, 643, 441, 15427, 11, 597, 1669, 11, 498, 2878], "temperature": 0.0, "avg_logprob": -0.1867503426291726, "compression_ratio": 1.6593406593406594, "no_speech_prob": 1.0873617611650843e-05}, {"id": 88, "seek": 42168, "start": 441.2, "end": 445.72, "text": " to try to use LTO on embedded systems, it works until you've got a linker script. Certainly", "tokens": [281, 853, 281, 764, 441, 15427, 322, 16741, 3652, 11, 309, 1985, 1826, 291, 600, 658, 257, 2113, 260, 5755, 13, 16628], "temperature": 0.0, "avg_logprob": -0.1867503426291726, "compression_ratio": 1.6593406593406594, "no_speech_prob": 1.0873617611650843e-05}, {"id": 89, "seek": 42168, "start": 445.72, "end": 451.0, "text": " what a linker script that depends on placing things in different places. So yeah, so here's", "tokens": [437, 257, 2113, 260, 5755, 300, 5946, 322, 17221, 721, 294, 819, 3190, 13, 407, 1338, 11, 370, 510, 311], "temperature": 0.0, "avg_logprob": -0.1867503426291726, "compression_ratio": 1.6593406593406594, "no_speech_prob": 1.0873617611650843e-05}, {"id": 90, "seek": 45100, "start": 451.0, "end": 454.52, "text": " just a very trivial example of something that's just calling a floating point. And this just", "tokens": [445, 257, 588, 26703, 1365, 295, 746, 300, 311, 445, 5141, 257, 12607, 935, 13, 400, 341, 445], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 91, "seek": 45100, "start": 454.52, "end": 459.12, "text": " shows some of the code that's generated. So what we essentially have is this function", "tokens": [3110, 512, 295, 264, 3089, 300, 311, 10833, 13, 407, 437, 321, 4476, 362, 307, 341, 2445], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 92, "seek": 45100, "start": 459.12, "end": 465.08, "text": " pointer has a type. And you can basically make that into a signature. So what happens", "tokens": [23918, 575, 257, 2010, 13, 400, 291, 393, 1936, 652, 300, 666, 257, 13397, 13, 407, 437, 2314], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 93, "seek": 45100, "start": 465.08, "end": 470.32, "text": " is we prefix the top of the function with the signature. And then we basically load", "tokens": [307, 321, 46969, 264, 1192, 295, 264, 2445, 365, 264, 13397, 13, 400, 550, 321, 1936, 3677], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 94, "seek": 45100, "start": 470.32, "end": 473.76, "text": " when we're sort of saying, oh, let's load from this arbitrary function pointer. Well,", "tokens": [562, 321, 434, 1333, 295, 1566, 11, 1954, 11, 718, 311, 3677, 490, 341, 23211, 2445, 23918, 13, 1042, 11], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 95, "seek": 45100, "start": 473.76, "end": 478.88, "text": " let's check its signature. And then we'll check to see if it matches what we want. And", "tokens": [718, 311, 1520, 1080, 13397, 13, 400, 550, 321, 603, 1520, 281, 536, 498, 309, 10676, 437, 321, 528, 13, 400], "temperature": 0.0, "avg_logprob": -0.12618608093261718, "compression_ratio": 1.8945454545454545, "no_speech_prob": 5.69413396078744e-06}, {"id": 96, "seek": 47888, "start": 478.88, "end": 484.64, "text": " if it doesn't, boom. So this doesn't, as far as I know, work on C++ V tables at the moment.", "tokens": [498, 309, 1177, 380, 11, 9351, 13, 407, 341, 1177, 380, 11, 382, 1400, 382, 286, 458, 11, 589, 322, 383, 25472, 691, 8020, 412, 264, 1623, 13], "temperature": 0.0, "avg_logprob": -0.18621814857094976, "compression_ratio": 1.6072727272727272, "no_speech_prob": 5.663888714479981e-06}, {"id": 97, "seek": 47888, "start": 484.64, "end": 489.52, "text": " As obviously this is implemented for the Linux kernel. So they don't care about C++. So,", "tokens": [1018, 2745, 341, 307, 12270, 337, 264, 18734, 28256, 13, 407, 436, 500, 380, 1127, 466, 383, 25472, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.18621814857094976, "compression_ratio": 1.6072727272727272, "no_speech_prob": 5.663888714479981e-06}, {"id": 98, "seek": 47888, "start": 489.52, "end": 493.44, "text": " but if you're using C with function pointers, this is a way, a relatively low cost way to", "tokens": [457, 498, 291, 434, 1228, 383, 365, 2445, 44548, 11, 341, 307, 257, 636, 11, 257, 7226, 2295, 2063, 636, 281], "temperature": 0.0, "avg_logprob": -0.18621814857094976, "compression_ratio": 1.6072727272727272, "no_speech_prob": 5.663888714479981e-06}, {"id": 99, "seek": 47888, "start": 493.44, "end": 499.0, "text": " get control flow integrity checking. Okay. So this is just some of the things that the", "tokens": [483, 1969, 3095, 16000, 8568, 13, 1033, 13, 407, 341, 307, 445, 512, 295, 264, 721, 300, 264], "temperature": 0.0, "avg_logprob": -0.18621814857094976, "compression_ratio": 1.6072727272727272, "no_speech_prob": 5.663888714479981e-06}, {"id": 100, "seek": 47888, "start": 499.0, "end": 503.8, "text": " components of an embedded tool chain. I'm kind of jumping around here at the moment.", "tokens": [6677, 295, 364, 16741, 2290, 5021, 13, 286, 478, 733, 295, 11233, 926, 510, 412, 264, 1623, 13], "temperature": 0.0, "avg_logprob": -0.18621814857094976, "compression_ratio": 1.6072727272727272, "no_speech_prob": 5.663888714479981e-06}, {"id": 101, "seek": 50380, "start": 503.8, "end": 509.12, "text": " So these are sort of the things you would expect in a GCC embedded tool chain. And as", "tokens": [407, 613, 366, 1333, 295, 264, 721, 291, 576, 2066, 294, 257, 460, 11717, 16741, 2290, 5021, 13, 400, 382], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 102, "seek": 50380, "start": 509.12, "end": 513.36, "text": " you can see, Clang's actually, well, LLVM project, we've got pretty much all that we", "tokens": [291, 393, 536, 11, 2033, 656, 311, 767, 11, 731, 11, 441, 43, 53, 44, 1716, 11, 321, 600, 658, 1238, 709, 439, 300, 321], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 103, "seek": 50380, "start": 513.36, "end": 519.0, "text": " need in one place. We're only really missing a C library at the moment. So yes, we can", "tokens": [643, 294, 472, 1081, 13, 492, 434, 787, 534, 5361, 257, 383, 6405, 412, 264, 1623, 13, 407, 2086, 11, 321, 393], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 104, "seek": 50380, "start": 519.0, "end": 522.4, "text": " go through some of the, I won't go through each individual thing in those titles, but", "tokens": [352, 807, 512, 295, 264, 11, 286, 1582, 380, 352, 807, 1184, 2609, 551, 294, 729, 12992, 11, 457], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 105, "seek": 50380, "start": 522.4, "end": 527.28, "text": " you've got, you know, Clang, the compiler, you've got LLV, the linker, you've got implementations", "tokens": [291, 600, 658, 11, 291, 458, 11, 2033, 656, 11, 264, 31958, 11, 291, 600, 658, 441, 43, 53, 11, 264, 2113, 260, 11, 291, 600, 658, 4445, 763], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 106, "seek": 50380, "start": 527.28, "end": 533.6800000000001, "text": " of obstump, read-elf, you've got implementations of the C++ runtime library. Yes, say, what", "tokens": [295, 9579, 1420, 11, 1401, 12, 1967, 11, 291, 600, 658, 4445, 763, 295, 264, 383, 25472, 34474, 6405, 13, 1079, 11, 584, 11, 437], "temperature": 0.0, "avg_logprob": -0.21129709714418882, "compression_ratio": 1.7193548387096773, "no_speech_prob": 9.360973308503162e-06}, {"id": 107, "seek": 53368, "start": 533.68, "end": 540.8399999999999, "text": " we're missing is a C library. So technically, GCC doesn't have a C library either, but there", "tokens": [321, 434, 5361, 307, 257, 383, 6405, 13, 407, 12120, 11, 460, 11717, 1177, 380, 362, 257, 383, 6405, 2139, 11, 457, 456], "temperature": 0.0, "avg_logprob": -0.12147765033012997, "compression_ratio": 1.699248120300752, "no_speech_prob": 4.813616214960348e-06}, {"id": 108, "seek": 53368, "start": 540.8399999999999, "end": 546.3199999999999, "text": " are hooks in the build system to basically build new lib in sort of multi-lib configurations", "tokens": [366, 26485, 294, 264, 1322, 1185, 281, 1936, 1322, 777, 22854, 294, 1333, 295, 4825, 12, 38270, 31493], "temperature": 0.0, "avg_logprob": -0.12147765033012997, "compression_ratio": 1.699248120300752, "no_speech_prob": 4.813616214960348e-06}, {"id": 109, "seek": 53368, "start": 546.3199999999999, "end": 552.52, "text": " at that point. LLVM is developing a C library. I would say at the moment that currently it's", "tokens": [412, 300, 935, 13, 441, 43, 53, 44, 307, 6416, 257, 383, 6405, 13, 286, 576, 584, 412, 264, 1623, 300, 4362, 309, 311], "temperature": 0.0, "avg_logprob": -0.12147765033012997, "compression_ratio": 1.699248120300752, "no_speech_prob": 4.813616214960348e-06}, {"id": 110, "seek": 53368, "start": 552.52, "end": 557.0, "text": " sort of focused on what you would probably call desktop use cases, but they are planning", "tokens": [1333, 295, 5178, 322, 437, 291, 576, 1391, 818, 14502, 764, 3331, 11, 457, 436, 366, 5038], "temperature": 0.0, "avg_logprob": -0.12147765033012997, "compression_ratio": 1.699248120300752, "no_speech_prob": 4.813616214960348e-06}, {"id": 111, "seek": 53368, "start": 557.0, "end": 560.88, "text": " to have sort of scalable implementations. So I think the end goal is that it will be", "tokens": [281, 362, 1333, 295, 38481, 4445, 763, 13, 407, 286, 519, 264, 917, 3387, 307, 300, 309, 486, 312], "temperature": 0.0, "avg_logprob": -0.12147765033012997, "compression_ratio": 1.699248120300752, "no_speech_prob": 4.813616214960348e-06}, {"id": 112, "seek": 56088, "start": 560.88, "end": 564.48, "text": " able to cope with embedded systems, but I expect that to be some, some years down the", "tokens": [1075, 281, 22598, 365, 16741, 3652, 11, 457, 286, 2066, 300, 281, 312, 512, 11, 512, 924, 760, 264], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 113, "seek": 56088, "start": 564.48, "end": 571.32, "text": " line at the moment. Okay. So how would you actually assemble one of these building? Well,", "tokens": [1622, 412, 264, 1623, 13, 1033, 13, 407, 577, 576, 291, 767, 22364, 472, 295, 613, 2390, 30, 1042, 11], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 114, "seek": 56088, "start": 571.32, "end": 574.96, "text": " basically assemble an LLVM toolchain from the LLVM project. And the honest answer is", "tokens": [1936, 22364, 364, 441, 43, 53, 44, 2290, 11509, 490, 264, 441, 43, 53, 44, 1716, 13, 400, 264, 3245, 1867, 307], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 115, "seek": 56088, "start": 574.96, "end": 579.04, "text": " it's not as easy as it could be. Certainly when you're building a sort of a hosted toolchain,", "tokens": [309, 311, 406, 382, 1858, 382, 309, 727, 312, 13, 16628, 562, 291, 434, 2390, 257, 1333, 295, 257, 19204, 2290, 11509, 11], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 116, "seek": 56088, "start": 579.04, "end": 585.68, "text": " it's just, you know, it's fairly easy. You just go to LLVM, Cmate, Ninja, done. So actually", "tokens": [309, 311, 445, 11, 291, 458, 11, 309, 311, 6457, 1858, 13, 509, 445, 352, 281, 441, 43, 53, 44, 11, 383, 13963, 11, 25566, 11, 1096, 13, 407, 767], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 117, "seek": 56088, "start": 585.68, "end": 589.12, "text": " building the tools is not difficult because they're all cross-compilers. They're just", "tokens": [2390, 264, 3873, 307, 406, 2252, 570, 436, 434, 439, 3278, 12, 21541, 388, 433, 13, 814, 434, 445], "temperature": 0.0, "avg_logprob": -0.15305825317798016, "compression_ratio": 1.6677115987460815, "no_speech_prob": 4.47939919467899e-06}, {"id": 118, "seek": 58912, "start": 589.12, "end": 594.6, "text": " all part of the default build. So if you want to get all the tools, very, very simple. Building", "tokens": [439, 644, 295, 264, 7576, 1322, 13, 407, 498, 291, 528, 281, 483, 439, 264, 3873, 11, 588, 11, 588, 2199, 13, 18974], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 119, "seek": 58912, "start": 594.6, "end": 598.84, "text": " the run times is a bit more difficult because you've got to cross-compile the run times.", "tokens": [264, 1190, 1413, 307, 257, 857, 544, 2252, 570, 291, 600, 658, 281, 3278, 12, 21541, 794, 264, 1190, 1413, 13], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 120, "seek": 58912, "start": 598.84, "end": 601.96, "text": " And you've got to do them in a particular order, not all of them build in all of the", "tokens": [400, 291, 600, 658, 281, 360, 552, 294, 257, 1729, 1668, 11, 406, 439, 295, 552, 1322, 294, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 121, "seek": 58912, "start": 601.96, "end": 606.04, "text": " things. So one of the big problems, if you say try and buy compiler, sorry, if you try", "tokens": [721, 13, 407, 472, 295, 264, 955, 2740, 11, 498, 291, 584, 853, 293, 2256, 31958, 11, 2597, 11, 498, 291, 853], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 122, "seek": 58912, "start": 606.04, "end": 611.16, "text": " and compile compiler RT, it'll fail because you've not got all of the, you know, it's", "tokens": [293, 31413, 31958, 21797, 11, 309, 603, 3061, 570, 291, 600, 406, 658, 439, 295, 264, 11, 291, 458, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 123, "seek": 58912, "start": 611.16, "end": 615.4, "text": " kind of, if you try, it'll end up building the sanitizers. And the sanitizers obviously", "tokens": [733, 295, 11, 498, 291, 853, 11, 309, 603, 917, 493, 2390, 264, 24533, 22525, 13, 400, 264, 24533, 22525, 2745], "temperature": 0.0, "avg_logprob": -0.1398836241828071, "compression_ratio": 1.9776119402985075, "no_speech_prob": 2.224297531938646e-06}, {"id": 124, "seek": 61540, "start": 615.4, "end": 620.0, "text": " have got dependencies on POSIX operating systems, which of course won't work. But you", "tokens": [362, 658, 36606, 322, 430, 4367, 21124, 7447, 3652, 11, 597, 295, 1164, 1582, 380, 589, 13, 583, 291], "temperature": 0.0, "avg_logprob": -0.15804311263659768, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.3190141291706823e-06}, {"id": 125, "seek": 61540, "start": 620.0, "end": 625.16, "text": " can say, for example, build the built-ins, which are kind of like the LibGCC equivalent.", "tokens": [393, 584, 11, 337, 1365, 11, 1322, 264, 3094, 12, 1292, 11, 597, 366, 733, 295, 411, 264, 15834, 38, 11717, 10344, 13], "temperature": 0.0, "avg_logprob": -0.15804311263659768, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.3190141291706823e-06}, {"id": 126, "seek": 61540, "start": 625.16, "end": 630.72, "text": " So what we've done at ARM is to put together an embedded toolchain for Cortex-M, which is", "tokens": [407, 437, 321, 600, 1096, 412, 45209, 307, 281, 829, 1214, 364, 16741, 2290, 11509, 337, 28522, 3121, 12, 44, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.15804311263659768, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.3190141291706823e-06}, {"id": 127, "seek": 61540, "start": 630.72, "end": 634.9599999999999, "text": " the sort of ARM's microcontroller range. And this is essentially a set of build scripts.", "tokens": [264, 1333, 295, 45209, 311, 4532, 9000, 22922, 3613, 13, 400, 341, 307, 4476, 257, 992, 295, 1322, 23294, 13], "temperature": 0.0, "avg_logprob": -0.15804311263659768, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.3190141291706823e-06}, {"id": 128, "seek": 61540, "start": 634.9599999999999, "end": 642.0, "text": " It's all open source. And we're using the Pico Lib-C at the moment as our C library.", "tokens": [467, 311, 439, 1269, 4009, 13, 400, 321, 434, 1228, 264, 430, 2789, 15834, 12, 34, 412, 264, 1623, 382, 527, 383, 6405, 13], "temperature": 0.0, "avg_logprob": -0.15804311263659768, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.3190141291706823e-06}, {"id": 129, "seek": 64200, "start": 642.0, "end": 646.4, "text": " And we did start with New Lib, but we sort of moved on to Pico Lib at that point. But", "tokens": [400, 321, 630, 722, 365, 1873, 15834, 11, 457, 321, 1333, 295, 4259, 322, 281, 430, 2789, 15834, 412, 300, 935, 13, 583], "temperature": 0.0, "avg_logprob": -0.14391907713467017, "compression_ratio": 1.602189781021898, "no_speech_prob": 4.665110736823408e-06}, {"id": 130, "seek": 64200, "start": 646.4, "end": 652.0, "text": " you can make it work with New Lib if you want to. So yeah, so we've got, it's primarily", "tokens": [291, 393, 652, 309, 589, 365, 1873, 15834, 498, 291, 528, 281, 13, 407, 1338, 11, 370, 321, 600, 658, 11, 309, 311, 10029], "temperature": 0.0, "avg_logprob": -0.14391907713467017, "compression_ratio": 1.602189781021898, "no_speech_prob": 4.665110736823408e-06}, {"id": 131, "seek": 64200, "start": 652.0, "end": 657.08, "text": " just build scripts. It's not like got an LLVN project embedded on that. It will just go fetch", "tokens": [445, 1322, 23294, 13, 467, 311, 406, 411, 658, 364, 441, 43, 53, 45, 1716, 16741, 322, 300, 13, 467, 486, 445, 352, 23673], "temperature": 0.0, "avg_logprob": -0.14391907713467017, "compression_ratio": 1.602189781021898, "no_speech_prob": 4.665110736823408e-06}, {"id": 132, "seek": 64200, "start": 657.08, "end": 664.68, "text": " LLVN from the actual source code. And yes, it's got a few samples for, you know, for", "tokens": [441, 43, 53, 45, 490, 264, 3539, 4009, 3089, 13, 400, 2086, 11, 309, 311, 658, 257, 1326, 10938, 337, 11, 291, 458, 11, 337], "temperature": 0.0, "avg_logprob": -0.14391907713467017, "compression_ratio": 1.602189781021898, "no_speech_prob": 4.665110736823408e-06}, {"id": 133, "seek": 64200, "start": 664.68, "end": 670.44, "text": " building some programs, that type of thing. So as I say, it's by ARM, for ARM. But I'm", "tokens": [2390, 512, 4268, 11, 300, 2010, 295, 551, 13, 407, 382, 286, 584, 11, 309, 311, 538, 45209, 11, 337, 45209, 13, 583, 286, 478], "temperature": 0.0, "avg_logprob": -0.14391907713467017, "compression_ratio": 1.602189781021898, "no_speech_prob": 4.665110736823408e-06}, {"id": 134, "seek": 67044, "start": 670.44, "end": 674.6800000000001, "text": " sure if anybody wanted to apply it to a different microprocessor, they pretty much could because", "tokens": [988, 498, 4472, 1415, 281, 3079, 309, 281, 257, 819, 3123, 1513, 340, 25432, 11, 436, 1238, 709, 727, 570], "temperature": 0.0, "avg_logprob": -0.1463171975654468, "compression_ratio": 1.620817843866171, "no_speech_prob": 2.712122977754916e-06}, {"id": 135, "seek": 67044, "start": 674.6800000000001, "end": 680.72, "text": " it's essentially just a bit of C make and that you can adapt.", "tokens": [309, 311, 4476, 445, 257, 857, 295, 383, 652, 293, 300, 291, 393, 6231, 13], "temperature": 0.0, "avg_logprob": -0.1463171975654468, "compression_ratio": 1.620817843866171, "no_speech_prob": 2.712122977754916e-06}, {"id": 136, "seek": 67044, "start": 680.72, "end": 686.36, "text": " So what's the usability of an LLVN toolchain like next to say the GNU embedded toolchain,", "tokens": [407, 437, 311, 264, 46878, 295, 364, 441, 43, 53, 45, 2290, 11509, 411, 958, 281, 584, 264, 46411, 52, 16741, 2290, 11509, 11], "temperature": 0.0, "avg_logprob": -0.1463171975654468, "compression_ratio": 1.620817843866171, "no_speech_prob": 2.712122977754916e-06}, {"id": 137, "seek": 67044, "start": 686.36, "end": 691.0400000000001, "text": " that type of thing. So one of the main things we're missing at the moment is multi-lib support.", "tokens": [300, 2010, 295, 551, 13, 407, 472, 295, 264, 2135, 721, 321, 434, 5361, 412, 264, 1623, 307, 4825, 12, 38270, 1406, 13], "temperature": 0.0, "avg_logprob": -0.1463171975654468, "compression_ratio": 1.620817843866171, "no_speech_prob": 2.712122977754916e-06}, {"id": 138, "seek": 67044, "start": 691.0400000000001, "end": 695.5600000000001, "text": " Now there are some multi-lib support for certain targets. So for example, I think there are", "tokens": [823, 456, 366, 512, 4825, 12, 38270, 1406, 337, 1629, 12911, 13, 407, 337, 1365, 11, 286, 519, 456, 366], "temperature": 0.0, "avg_logprob": -0.1463171975654468, "compression_ratio": 1.620817843866171, "no_speech_prob": 2.712122977754916e-06}, {"id": 139, "seek": 69556, "start": 695.56, "end": 700.8399999999999, "text": " some RISC-5 multi-libs that are already in the bare metal driver. But that's not the", "tokens": [512, 497, 2343, 34, 12, 20, 4825, 12, 38270, 82, 300, 366, 1217, 294, 264, 6949, 5760, 6787, 13, 583, 300, 311, 406, 264], "temperature": 0.0, "avg_logprob": -0.13977808787904936, "compression_ratio": 1.6131386861313868, "no_speech_prob": 1.3912873328081332e-05}, {"id": 140, "seek": 69556, "start": 700.8399999999999, "end": 705.0799999999999, "text": " case for ARM at the moment. I'll go on to what we're doing about that in a few slides", "tokens": [1389, 337, 45209, 412, 264, 1623, 13, 286, 603, 352, 322, 281, 437, 321, 434, 884, 466, 300, 294, 257, 1326, 9788], "temperature": 0.0, "avg_logprob": -0.13977808787904936, "compression_ratio": 1.6131386861313868, "no_speech_prob": 1.3912873328081332e-05}, {"id": 141, "seek": 69556, "start": 705.0799999999999, "end": 713.3199999999999, "text": " time. Clang also doesn't have a direct equivalent of GCC specs files. So specs files are basically", "tokens": [565, 13, 2033, 656, 611, 1177, 380, 362, 257, 2047, 10344, 295, 460, 11717, 27911, 7098, 13, 407, 27911, 7098, 366, 1936], "temperature": 0.0, "avg_logprob": -0.13977808787904936, "compression_ratio": 1.6131386861313868, "no_speech_prob": 1.3912873328081332e-05}, {"id": 142, "seek": 69556, "start": 713.3199999999999, "end": 717.52, "text": " just fragments of command line, but they're not just raw command lines. They have got", "tokens": [445, 29197, 295, 5622, 1622, 11, 457, 436, 434, 406, 445, 8936, 5622, 3876, 13, 814, 362, 658], "temperature": 0.0, "avg_logprob": -0.13977808787904936, "compression_ratio": 1.6131386861313868, "no_speech_prob": 1.3912873328081332e-05}, {"id": 143, "seek": 69556, "start": 717.52, "end": 722.04, "text": " some intelligence and they can talk to each other and override sort of defaults. So as", "tokens": [512, 7599, 293, 436, 393, 751, 281, 1184, 661, 293, 42321, 1333, 295, 7576, 82, 13, 407, 382], "temperature": 0.0, "avg_logprob": -0.13977808787904936, "compression_ratio": 1.6131386861313868, "no_speech_prob": 1.3912873328081332e-05}, {"id": 144, "seek": 72204, "start": 722.04, "end": 728.16, "text": " an example here, that nano.specs and RDImon.specs, that says give me newlib nano, which is the", "tokens": [364, 1365, 510, 11, 300, 30129, 13, 7053, 14368, 293, 497, 3085, 3317, 13, 7053, 14368, 11, 300, 1619, 976, 385, 777, 38270, 30129, 11, 597, 307, 264], "temperature": 0.0, "avg_logprob": -0.15417500147743832, "compression_ratio": 1.735632183908046, "no_speech_prob": 2.7949183731834637e-06}, {"id": 145, "seek": 72204, "start": 728.16, "end": 732.4399999999999, "text": " really small version of newlib. And RDImon is the semi-hosted version, which is easier", "tokens": [534, 1359, 3037, 295, 777, 38270, 13, 400, 497, 3085, 3317, 307, 264, 12909, 12, 6037, 292, 3037, 11, 597, 307, 3571], "temperature": 0.0, "avg_logprob": -0.15417500147743832, "compression_ratio": 1.735632183908046, "no_speech_prob": 2.7949183731834637e-06}, {"id": 146, "seek": 72204, "start": 732.4399999999999, "end": 737.4399999999999, "text": " to run on emulators, that type of thing. So for the LLVN embedded toolchain, we basically,", "tokens": [281, 1190, 322, 846, 39265, 11, 300, 2010, 295, 551, 13, 407, 337, 264, 441, 43, 53, 45, 16741, 2290, 11509, 11, 321, 1936, 11], "temperature": 0.0, "avg_logprob": -0.15417500147743832, "compression_ratio": 1.735632183908046, "no_speech_prob": 2.7949183731834637e-06}, {"id": 147, "seek": 72204, "start": 737.4399999999999, "end": 745.04, "text": " because we don't have the information for the specs file to say, ah, someone else has", "tokens": [570, 321, 500, 380, 362, 264, 1589, 337, 264, 27911, 3991, 281, 584, 11, 3716, 11, 1580, 1646, 575], "temperature": 0.0, "avg_logprob": -0.15417500147743832, "compression_ratio": 1.735632183908046, "no_speech_prob": 2.7949183731834637e-06}, {"id": 148, "seek": 72204, "start": 745.04, "end": 749.7199999999999, "text": " someone added this other specs file, so I'm going to modify my behaviors, we have to basically", "tokens": [1580, 3869, 341, 661, 27911, 3991, 11, 370, 286, 478, 516, 281, 16927, 452, 15501, 11, 321, 362, 281, 1936], "temperature": 0.0, "avg_logprob": -0.15417500147743832, "compression_ratio": 1.735632183908046, "no_speech_prob": 2.7949183731834637e-06}, {"id": 149, "seek": 74972, "start": 749.72, "end": 754.84, "text": " have multiple config files that just blow up for all of the possible combinations. So", "tokens": [362, 3866, 6662, 7098, 300, 445, 6327, 493, 337, 439, 295, 264, 1944, 21267, 13, 407], "temperature": 0.0, "avg_logprob": -0.2135978293629874, "compression_ratio": 1.6131386861313868, "no_speech_prob": 4.853205155086471e-06}, {"id": 150, "seek": 74972, "start": 754.84, "end": 760.84, "text": " as you see there, we've got an ARMv6m, which ideally would be handled by multi-lib in the", "tokens": [382, 291, 536, 456, 11, 321, 600, 658, 364, 45209, 85, 21, 76, 11, 597, 22915, 576, 312, 18033, 538, 4825, 12, 38270, 294, 264], "temperature": 0.0, "avg_logprob": -0.2135978293629874, "compression_ratio": 1.6131386861313868, "no_speech_prob": 4.853205155086471e-06}, {"id": 151, "seek": 74972, "start": 760.84, "end": 766.9200000000001, "text": " DMD semi-host version. And yeah, there's just more configuration files than you really", "tokens": [15322, 35, 12909, 12, 6037, 3037, 13, 400, 1338, 11, 456, 311, 445, 544, 11694, 7098, 813, 291, 534], "temperature": 0.0, "avg_logprob": -0.2135978293629874, "compression_ratio": 1.6131386861313868, "no_speech_prob": 4.853205155086471e-06}, {"id": 152, "seek": 74972, "start": 766.9200000000001, "end": 771.52, "text": " ought to have. And I would say there's probably a small, well, there's a long tail of small", "tokens": [13416, 281, 362, 13, 400, 286, 576, 584, 456, 311, 1391, 257, 1359, 11, 731, 11, 456, 311, 257, 938, 6838, 295, 1359], "temperature": 0.0, "avg_logprob": -0.2135978293629874, "compression_ratio": 1.6131386861313868, "no_speech_prob": 4.853205155086471e-06}, {"id": 153, "seek": 74972, "start": 771.52, "end": 778.44, "text": " incompatibilities. You might find that LLD doesn't do orphan placement exactly the same", "tokens": [40393, 267, 8261, 13, 509, 1062, 915, 300, 441, 23704, 1177, 380, 360, 28711, 17257, 2293, 264, 912], "temperature": 0.0, "avg_logprob": -0.2135978293629874, "compression_ratio": 1.6131386861313868, "no_speech_prob": 4.853205155086471e-06}, {"id": 154, "seek": 77844, "start": 778.44, "end": 783.6, "text": " way as GNU-LD does that type of thing. But normally these sort of small incompatibilities,", "tokens": [636, 382, 46411, 52, 12, 23704, 775, 300, 2010, 295, 551, 13, 583, 5646, 613, 1333, 295, 1359, 40393, 267, 8261, 11], "temperature": 0.0, "avg_logprob": -0.16684512768761586, "compression_ratio": 1.6679104477611941, "no_speech_prob": 1.0442503480589949e-05}, {"id": 155, "seek": 77844, "start": 783.6, "end": 789.36, "text": " you can kind of code around it. There's normally a way you can make it work. So that's what", "tokens": [291, 393, 733, 295, 3089, 926, 309, 13, 821, 311, 5646, 257, 636, 291, 393, 652, 309, 589, 13, 407, 300, 311, 437], "temperature": 0.0, "avg_logprob": -0.16684512768761586, "compression_ratio": 1.6679104477611941, "no_speech_prob": 1.0442503480589949e-05}, {"id": 156, "seek": 77844, "start": 789.36, "end": 794.9200000000001, "text": " we've found so far anyway. Okay. So this is just, again, another jumping around, just", "tokens": [321, 600, 1352, 370, 1400, 4033, 13, 1033, 13, 407, 341, 307, 445, 11, 797, 11, 1071, 11233, 926, 11, 445], "temperature": 0.0, "avg_logprob": -0.16684512768761586, "compression_ratio": 1.6679104477611941, "no_speech_prob": 1.0442503480589949e-05}, {"id": 157, "seek": 77844, "start": 794.9200000000001, "end": 799.5600000000001, "text": " showing you how Clang might do some of this sort of stuff. So if any of you have played", "tokens": [4099, 291, 577, 2033, 656, 1062, 360, 512, 295, 341, 1333, 295, 1507, 13, 407, 498, 604, 295, 291, 362, 3737], "temperature": 0.0, "avg_logprob": -0.16684512768761586, "compression_ratio": 1.6679104477611941, "no_speech_prob": 1.0442503480589949e-05}, {"id": 158, "seek": 77844, "start": 799.5600000000001, "end": 803.44, "text": " around with Clang drivers, whenever you give them the target triple. So normally if you're", "tokens": [926, 365, 2033, 656, 11590, 11, 5699, 291, 976, 552, 264, 3779, 15508, 13, 407, 5646, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.16684512768761586, "compression_ratio": 1.6679104477611941, "no_speech_prob": 1.0442503480589949e-05}, {"id": 159, "seek": 80344, "start": 803.44, "end": 809.0, "text": " using Clang on your Linux, your target triple is, you know, native, I guess at this particular", "tokens": [1228, 2033, 656, 322, 428, 18734, 11, 428, 3779, 15508, 307, 11, 291, 458, 11, 8470, 11, 286, 2041, 412, 341, 1729], "temperature": 0.0, "avg_logprob": -0.161563469191729, "compression_ratio": 1.6570397111913358, "no_speech_prob": 1.6545399148526485e-06}, {"id": 160, "seek": 80344, "start": 809.0, "end": 814.9200000000001, "text": " point. Or you're using the default triple that's there. But if you're doing cross compilation,", "tokens": [935, 13, 1610, 291, 434, 1228, 264, 7576, 15508, 300, 311, 456, 13, 583, 498, 291, 434, 884, 3278, 40261, 11], "temperature": 0.0, "avg_logprob": -0.161563469191729, "compression_ratio": 1.6570397111913358, "no_speech_prob": 1.6545399148526485e-06}, {"id": 161, "seek": 80344, "start": 814.9200000000001, "end": 822.2800000000001, "text": " you have to give it a sort of architecture environment. So you've got the Linux-GNU there.", "tokens": [291, 362, 281, 976, 309, 257, 1333, 295, 9482, 2823, 13, 407, 291, 600, 658, 264, 18734, 12, 38, 45, 52, 456, 13], "temperature": 0.0, "avg_logprob": -0.161563469191729, "compression_ratio": 1.6570397111913358, "no_speech_prob": 1.6545399148526485e-06}, {"id": 162, "seek": 80344, "start": 822.2800000000001, "end": 826.6800000000001, "text": " So this is actually one, if you were targeting something like the Octo, that type of thing.", "tokens": [407, 341, 307, 767, 472, 11, 498, 291, 645, 17918, 746, 411, 264, 6788, 78, 11, 300, 2010, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.161563469191729, "compression_ratio": 1.6570397111913358, "no_speech_prob": 1.6545399148526485e-06}, {"id": 163, "seek": 80344, "start": 826.6800000000001, "end": 830.8000000000001, "text": " And that will Clang driver will then tell you where all of your header files are, what", "tokens": [400, 300, 486, 2033, 656, 6787, 486, 550, 980, 291, 689, 439, 295, 428, 23117, 7098, 366, 11, 437], "temperature": 0.0, "avg_logprob": -0.161563469191729, "compression_ratio": 1.6570397111913358, "no_speech_prob": 1.6545399148526485e-06}, {"id": 164, "seek": 83080, "start": 830.8, "end": 836.3599999999999, "text": " your target features are. So it's like a much low level using sort of private command line", "tokens": [428, 3779, 4122, 366, 13, 407, 309, 311, 411, 257, 709, 2295, 1496, 1228, 1333, 295, 4551, 5622, 1622], "temperature": 0.0, "avg_logprob": -0.15872374141917509, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.6543519905098947e-06}, {"id": 165, "seek": 83080, "start": 836.3599999999999, "end": 843.88, "text": " options at that particular one. So for what we find for embedded systems is that Clang", "tokens": [3956, 412, 300, 1729, 472, 13, 407, 337, 437, 321, 915, 337, 16741, 3652, 307, 300, 2033, 656], "temperature": 0.0, "avg_logprob": -0.15872374141917509, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.6543519905098947e-06}, {"id": 166, "seek": 83080, "start": 843.88, "end": 848.0, "text": " has added something, well, probably a few years ago, but it's sort of only recently", "tokens": [575, 3869, 746, 11, 731, 11, 1391, 257, 1326, 924, 2057, 11, 457, 309, 311, 1333, 295, 787, 3938], "temperature": 0.0, "avg_logprob": -0.15872374141917509, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.6543519905098947e-06}, {"id": 167, "seek": 83080, "start": 848.0, "end": 852.68, "text": " sort of getting a bit more development onto it. In particular, the multi-lib support for", "tokens": [1333, 295, 1242, 257, 857, 544, 3250, 3911, 309, 13, 682, 1729, 11, 264, 4825, 12, 38270, 1406, 337], "temperature": 0.0, "avg_logprob": -0.15872374141917509, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.6543519905098947e-06}, {"id": 168, "seek": 85268, "start": 852.68, "end": 861.0, "text": " RISC-5 came in fairly recently. And that's when you have a target that the bare metal", "tokens": [497, 2343, 34, 12, 20, 1361, 294, 6457, 3938, 13, 400, 300, 311, 562, 291, 362, 257, 3779, 300, 264, 6949, 5760], "temperature": 0.0, "avg_logprob": -0.1630656973829547, "compression_ratio": 1.5172413793103448, "no_speech_prob": 6.783854473724205e-07}, {"id": 169, "seek": 85268, "start": 861.0, "end": 867.92, "text": " handles. So far, that's only ARMA ART64 and RISC-5 at the moment. In theory, it could", "tokens": [18722, 13, 407, 1400, 11, 300, 311, 787, 8943, 9998, 8943, 51, 19395, 293, 497, 2343, 34, 12, 20, 412, 264, 1623, 13, 682, 5261, 11, 309, 727], "temperature": 0.0, "avg_logprob": -0.1630656973829547, "compression_ratio": 1.5172413793103448, "no_speech_prob": 6.783854473724205e-07}, {"id": 170, "seek": 85268, "start": 867.92, "end": 872.76, "text": " be added for any other target, that type of thing. If you happen to be doing bare metal", "tokens": [312, 3869, 337, 604, 661, 3779, 11, 300, 2010, 295, 551, 13, 759, 291, 1051, 281, 312, 884, 6949, 5760], "temperature": 0.0, "avg_logprob": -0.1630656973829547, "compression_ratio": 1.5172413793103448, "no_speech_prob": 6.783854473724205e-07}, {"id": 171, "seek": 85268, "start": 872.76, "end": 878.3599999999999, "text": " development on an X86 and you don't match, say, a Linux operating system or BSD or whatever,", "tokens": [3250, 322, 364, 1783, 22193, 293, 291, 500, 380, 2995, 11, 584, 11, 257, 18734, 7447, 1185, 420, 363, 23969, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.1630656973829547, "compression_ratio": 1.5172413793103448, "no_speech_prob": 6.783854473724205e-07}, {"id": 172, "seek": 87836, "start": 878.36, "end": 883.2, "text": " you end up getting forwarded to the generic GCC driver, which basically throws everything", "tokens": [291, 917, 493, 1242, 2128, 292, 281, 264, 19577, 460, 11717, 6787, 11, 597, 1936, 19251, 1203], "temperature": 0.0, "avg_logprob": -0.1337851842244466, "compression_ratio": 1.647940074906367, "no_speech_prob": 5.534006390917057e-07}, {"id": 173, "seek": 87836, "start": 883.2, "end": 888.28, "text": " which generally knows what to do about things. So as long as you've got a GCC tool chain,", "tokens": [597, 5101, 3255, 437, 281, 360, 466, 721, 13, 407, 382, 938, 382, 291, 600, 658, 257, 460, 11717, 2290, 5021, 11], "temperature": 0.0, "avg_logprob": -0.1337851842244466, "compression_ratio": 1.647940074906367, "no_speech_prob": 5.534006390917057e-07}, {"id": 174, "seek": 87836, "start": 888.28, "end": 893.4, "text": " if you give an object file to GCC, GCC will say, oh, I'll just fire that at the linker,", "tokens": [498, 291, 976, 364, 2657, 3991, 281, 460, 11717, 11, 460, 11717, 486, 584, 11, 1954, 11, 286, 603, 445, 2610, 300, 412, 264, 2113, 260, 11], "temperature": 0.0, "avg_logprob": -0.1337851842244466, "compression_ratio": 1.647940074906367, "no_speech_prob": 5.534006390917057e-07}, {"id": 175, "seek": 87836, "start": 893.4, "end": 899.72, "text": " that type of thing. So it will work itself out. Okay. So I've just basically repeated", "tokens": [300, 2010, 295, 551, 13, 407, 309, 486, 589, 2564, 484, 13, 1033, 13, 407, 286, 600, 445, 1936, 10477], "temperature": 0.0, "avg_logprob": -0.1337851842244466, "compression_ratio": 1.647940074906367, "no_speech_prob": 5.534006390917057e-07}, {"id": 176, "seek": 87836, "start": 899.72, "end": 906.24, "text": " what I've just said there. It will default to the LLVM tools at that particular point.", "tokens": [437, 286, 600, 445, 848, 456, 13, 467, 486, 7576, 281, 264, 441, 43, 53, 44, 3873, 412, 300, 1729, 935, 13], "temperature": 0.0, "avg_logprob": -0.1337851842244466, "compression_ratio": 1.647940074906367, "no_speech_prob": 5.534006390917057e-07}, {"id": 177, "seek": 90624, "start": 906.24, "end": 910.6800000000001, "text": " So as the last part of the talk, I just want to go to some of the ongoing work that's happening", "tokens": [407, 382, 264, 1036, 644, 295, 264, 751, 11, 286, 445, 528, 281, 352, 281, 512, 295, 264, 10452, 589, 300, 311, 2737], "temperature": 0.0, "avg_logprob": -0.11114474816050957, "compression_ratio": 1.8046875, "no_speech_prob": 1.7355158661302994e-06}, {"id": 178, "seek": 90624, "start": 910.6800000000001, "end": 915.4, "text": " in Clang and some of the community involvement that's going on here. So one of the first", "tokens": [294, 2033, 656, 293, 512, 295, 264, 1768, 17447, 300, 311, 516, 322, 510, 13, 407, 472, 295, 264, 700], "temperature": 0.0, "avg_logprob": -0.11114474816050957, "compression_ratio": 1.8046875, "no_speech_prob": 1.7355158661302994e-06}, {"id": 179, "seek": 90624, "start": 915.4, "end": 919.5600000000001, "text": " and probably the major bit of work that we're doing at the moment is what I'm going to call", "tokens": [293, 1391, 264, 2563, 857, 295, 589, 300, 321, 434, 884, 412, 264, 1623, 307, 437, 286, 478, 516, 281, 818], "temperature": 0.0, "avg_logprob": -0.11114474816050957, "compression_ratio": 1.8046875, "no_speech_prob": 1.7355158661302994e-06}, {"id": 180, "seek": 90624, "start": 919.5600000000001, "end": 924.52, "text": " data-driven multi-lib at the moment. So currently, multi-lib support in Clang is hard-coded.", "tokens": [1412, 12, 25456, 4825, 12, 38270, 412, 264, 1623, 13, 407, 4362, 11, 4825, 12, 38270, 1406, 294, 2033, 656, 307, 1152, 12, 66, 12340, 13], "temperature": 0.0, "avg_logprob": -0.11114474816050957, "compression_ratio": 1.8046875, "no_speech_prob": 1.7355158661302994e-06}, {"id": 181, "seek": 90624, "start": 924.52, "end": 929.6800000000001, "text": " It's basically a C++ class where you basically describe what the multi-lib will do for that.", "tokens": [467, 311, 1936, 257, 383, 25472, 1508, 689, 291, 1936, 6786, 437, 264, 4825, 12, 38270, 486, 360, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.11114474816050957, "compression_ratio": 1.8046875, "no_speech_prob": 1.7355158661302994e-06}, {"id": 182, "seek": 92968, "start": 929.68, "end": 938.68, "text": " Now, that works pretty well if you're doing things like 32 or 64-bit x86 in, say, Debian", "tokens": [823, 11, 300, 1985, 1238, 731, 498, 291, 434, 884, 721, 411, 8858, 420, 12145, 12, 5260, 2031, 22193, 294, 11, 584, 11, 1346, 20196], "temperature": 0.0, "avg_logprob": -0.14830952547909168, "compression_ratio": 1.5020746887966805, "no_speech_prob": 1.542251993669197e-06}, {"id": 183, "seek": 92968, "start": 938.68, "end": 943.56, "text": " or Red Hat because the structures are well known at that particular point and they are", "tokens": [420, 4477, 15867, 570, 264, 9227, 366, 731, 2570, 412, 300, 1729, 935, 293, 436, 366], "temperature": 0.0, "avg_logprob": -0.14830952547909168, "compression_ratio": 1.5020746887966805, "no_speech_prob": 1.542251993669197e-06}, {"id": 184, "seek": 92968, "start": 943.56, "end": 949.04, "text": " stable. Whereas there's no way every possible embedded tool chain with every possible library", "tokens": [8351, 13, 13813, 456, 311, 572, 636, 633, 1944, 16741, 2290, 5021, 365, 633, 1944, 6405], "temperature": 0.0, "avg_logprob": -0.14830952547909168, "compression_ratio": 1.5020746887966805, "no_speech_prob": 1.542251993669197e-06}, {"id": 185, "seek": 92968, "start": 949.04, "end": 954.4, "text": " variant that you might want to do could get that hard-coded in upstream Clang. So typically,", "tokens": [17501, 300, 291, 1062, 528, 281, 360, 727, 483, 300, 1152, 12, 66, 12340, 294, 33915, 2033, 656, 13, 407, 5850, 11], "temperature": 0.0, "avg_logprob": -0.14830952547909168, "compression_ratio": 1.5020746887966805, "no_speech_prob": 1.542251993669197e-06}, {"id": 186, "seek": 95440, "start": 954.4, "end": 959.88, "text": " what you find is that every tool chain based on LLVM has its own downstream patch if it", "tokens": [437, 291, 915, 307, 300, 633, 2290, 5021, 2361, 322, 441, 43, 53, 44, 575, 1080, 1065, 30621, 9972, 498, 309], "temperature": 0.0, "avg_logprob": -0.11629856151083241, "compression_ratio": 1.530701754385965, "no_speech_prob": 1.7975607988773845e-06}, {"id": 187, "seek": 95440, "start": 959.88, "end": 968.8, "text": " wants to support multi-lib. So GCC allows you to set this up at configure time and the", "tokens": [2738, 281, 1406, 4825, 12, 38270, 13, 407, 460, 11717, 4045, 291, 281, 992, 341, 493, 412, 22162, 565, 293, 264], "temperature": 0.0, "avg_logprob": -0.11629856151083241, "compression_ratio": 1.530701754385965, "no_speech_prob": 1.7975607988773845e-06}, {"id": 188, "seek": 95440, "start": 968.8, "end": 974.3199999999999, "text": " GCC way basically maps command line options onto directories. So for Clang, we can do", "tokens": [460, 11717, 636, 1936, 11317, 5622, 1622, 3956, 3911, 5391, 530, 13, 407, 337, 2033, 656, 11, 321, 393, 360], "temperature": 0.0, "avg_logprob": -0.11629856151083241, "compression_ratio": 1.530701754385965, "no_speech_prob": 1.7975607988773845e-06}, {"id": 189, "seek": 95440, "start": 974.3199999999999, "end": 979.28, "text": " a bit better because the Clang driver has a bit more scope to say, do things like target", "tokens": [257, 857, 1101, 570, 264, 2033, 656, 6787, 575, 257, 857, 544, 11923, 281, 584, 11, 360, 721, 411, 3779], "temperature": 0.0, "avg_logprob": -0.11629856151083241, "compression_ratio": 1.530701754385965, "no_speech_prob": 1.7975607988773845e-06}, {"id": 190, "seek": 97928, "start": 979.28, "end": 985.88, "text": " parser and find out more about what the CPU can do. So at the moment, we're kind of proposing", "tokens": [21156, 260, 293, 915, 484, 544, 466, 437, 264, 13199, 393, 360, 13, 407, 412, 264, 1623, 11, 321, 434, 733, 295, 29939], "temperature": 0.0, "avg_logprob": -0.14344443407925692, "compression_ratio": 1.7713178294573644, "no_speech_prob": 2.73755381385854e-06}, {"id": 191, "seek": 97928, "start": 985.88, "end": 991.68, "text": " that you kind of have a stacked tower of multi-libs where you can kind of almost like a Docker", "tokens": [300, 291, 733, 295, 362, 257, 28867, 10567, 295, 4825, 12, 75, 897, 82, 689, 291, 393, 733, 295, 1920, 411, 257, 33772], "temperature": 0.0, "avg_logprob": -0.14344443407925692, "compression_ratio": 1.7713178294573644, "no_speech_prob": 2.73755381385854e-06}, {"id": 192, "seek": 97928, "start": 991.68, "end": 997.16, "text": " container file where you get each sort of can override the next so that you can basically", "tokens": [10129, 3991, 689, 291, 483, 1184, 1333, 295, 393, 42321, 264, 958, 370, 300, 291, 393, 1936], "temperature": 0.0, "avg_logprob": -0.14344443407925692, "compression_ratio": 1.7713178294573644, "no_speech_prob": 2.73755381385854e-06}, {"id": 193, "seek": 97928, "start": 997.16, "end": 1001.1999999999999, "text": " describe what your multi-lib configuration is and then Clang will be able to take this", "tokens": [6786, 437, 428, 4825, 12, 38270, 11694, 307, 293, 550, 2033, 656, 486, 312, 1075, 281, 747, 341], "temperature": 0.0, "avg_logprob": -0.14344443407925692, "compression_ratio": 1.7713178294573644, "no_speech_prob": 2.73755381385854e-06}, {"id": 194, "seek": 97928, "start": 1001.1999999999999, "end": 1008.9599999999999, "text": " configuration file. So it will basically allow people to have multi-lib tool chains without", "tokens": [11694, 3991, 13, 407, 309, 486, 1936, 2089, 561, 281, 362, 4825, 12, 38270, 2290, 12626, 1553], "temperature": 0.0, "avg_logprob": -0.14344443407925692, "compression_ratio": 1.7713178294573644, "no_speech_prob": 2.73755381385854e-06}, {"id": 195, "seek": 100896, "start": 1008.96, "end": 1013.24, "text": " having to hard code them in downstream patches, that type of thing. So this is still in active", "tokens": [1419, 281, 1152, 3089, 552, 294, 30621, 26531, 11, 300, 2010, 295, 551, 13, 407, 341, 307, 920, 294, 4967], "temperature": 0.0, "avg_logprob": -0.13209550422534608, "compression_ratio": 1.692883895131086, "no_speech_prob": 5.685056748916395e-06}, {"id": 196, "seek": 100896, "start": 1013.24, "end": 1018.96, "text": " development. There's an RFC that went up probably a few weeks ago. Recently, there's some links", "tokens": [3250, 13, 821, 311, 364, 497, 18671, 300, 1437, 493, 1391, 257, 1326, 3259, 2057, 13, 20072, 11, 456, 311, 512, 6123], "temperature": 0.0, "avg_logprob": -0.13209550422534608, "compression_ratio": 1.692883895131086, "no_speech_prob": 5.685056748916395e-06}, {"id": 197, "seek": 100896, "start": 1018.96, "end": 1023.36, "text": " to the patches and that sort of thing. So please do, if you're interested in data-driven multi-lib", "tokens": [281, 264, 26531, 293, 300, 1333, 295, 551, 13, 407, 1767, 360, 11, 498, 291, 434, 3102, 294, 1412, 12, 25456, 4825, 12, 38270], "temperature": 0.0, "avg_logprob": -0.13209550422534608, "compression_ratio": 1.692883895131086, "no_speech_prob": 5.685056748916395e-06}, {"id": 198, "seek": 100896, "start": 1023.36, "end": 1029.88, "text": " and how it develops, please do comment on those patches and the RFC.", "tokens": [293, 577, 309, 25453, 11, 1767, 360, 2871, 322, 729, 26531, 293, 264, 497, 18671, 13], "temperature": 0.0, "avg_logprob": -0.13209550422534608, "compression_ratio": 1.692883895131086, "no_speech_prob": 5.685056748916395e-06}, {"id": 199, "seek": 100896, "start": 1029.88, "end": 1036.24, "text": " So future work. So we'd ideally like to get some upstream build bots for some of the compiler", "tokens": [407, 2027, 589, 13, 407, 321, 1116, 22915, 411, 281, 483, 512, 33915, 1322, 35410, 337, 512, 295, 264, 31958], "temperature": 0.0, "avg_logprob": -0.13209550422534608, "compression_ratio": 1.692883895131086, "no_speech_prob": 5.685056748916395e-06}, {"id": 200, "seek": 103624, "start": 1036.24, "end": 1044.64, "text": " RT runtimes. So whilst there are build bots for ART64 and ARM Linux, we haven't got build", "tokens": [21797, 49435, 1532, 13, 407, 18534, 456, 366, 1322, 35410, 337, 8943, 51, 19395, 293, 45209, 18734, 11, 321, 2378, 380, 658, 1322], "temperature": 0.0, "avg_logprob": -0.20285208720081258, "compression_ratio": 1.5745614035087718, "no_speech_prob": 1.1128622645628639e-05}, {"id": 201, "seek": 103624, "start": 1044.64, "end": 1051.4, "text": " bots for, say, the built-ins for, say, the V6M, V7M, the sort of the very low-level embedded", "tokens": [35410, 337, 11, 584, 11, 264, 3094, 12, 1292, 337, 11, 584, 11, 264, 691, 21, 44, 11, 691, 22, 44, 11, 264, 1333, 295, 264, 588, 2295, 12, 12418, 16741], "temperature": 0.0, "avg_logprob": -0.20285208720081258, "compression_ratio": 1.5745614035087718, "no_speech_prob": 1.1128622645628639e-05}, {"id": 202, "seek": 103624, "start": 1051.4, "end": 1055.1, "text": " sort of targets. And we think that would be good to, you know, well, obviously more build", "tokens": [1333, 295, 12911, 13, 400, 321, 519, 300, 576, 312, 665, 281, 11, 291, 458, 11, 731, 11, 2745, 544, 1322], "temperature": 0.0, "avg_logprob": -0.20285208720081258, "compression_ratio": 1.5745614035087718, "no_speech_prob": 1.1128622645628639e-05}, {"id": 203, "seek": 103624, "start": 1055.1, "end": 1060.56, "text": " bots the better, I think, at that particular point. There is some work going on at TI.", "tokens": [35410, 264, 1101, 11, 286, 519, 11, 412, 300, 1729, 935, 13, 821, 307, 512, 589, 516, 322, 412, 28819, 13], "temperature": 0.0, "avg_logprob": -0.20285208720081258, "compression_ratio": 1.5745614035087718, "no_speech_prob": 1.1128622645628639e-05}, {"id": 204, "seek": 106056, "start": 1060.56, "end": 1069.72, "text": " So that link to YouTube is to a presentation at the last LLVM developer meeting, basically", "tokens": [407, 300, 2113, 281, 3088, 307, 281, 257, 5860, 412, 264, 1036, 441, 43, 53, 44, 10754, 3440, 11, 1936], "temperature": 0.0, "avg_logprob": -0.1680045241401309, "compression_ratio": 1.6713615023474178, "no_speech_prob": 8.829038961266633e-06}, {"id": 205, "seek": 106056, "start": 1069.72, "end": 1076.6, "text": " adding attributes from the linker script so that you can basically say things like, this", "tokens": [5127, 17212, 490, 264, 2113, 260, 5755, 370, 300, 291, 393, 1936, 584, 721, 411, 11, 341], "temperature": 0.0, "avg_logprob": -0.1680045241401309, "compression_ratio": 1.6713615023474178, "no_speech_prob": 8.829038961266633e-06}, {"id": 206, "seek": 106056, "start": 1076.6, "end": 1083.0, "text": " section must go in this place, this output section, this one must go in this other one.", "tokens": [3541, 1633, 352, 294, 341, 1081, 11, 341, 5598, 3541, 11, 341, 472, 1633, 352, 294, 341, 661, 472, 13], "temperature": 0.0, "avg_logprob": -0.1680045241401309, "compression_ratio": 1.6713615023474178, "no_speech_prob": 8.829038961266633e-06}, {"id": 207, "seek": 106056, "start": 1083.0, "end": 1086.48, "text": " Please do not cross-module inline across these boundaries because these things might not", "tokens": [2555, 360, 406, 3278, 12, 8014, 2271, 294, 1889, 2108, 613, 13180, 570, 613, 721, 1062, 406], "temperature": 0.0, "avg_logprob": -0.1680045241401309, "compression_ratio": 1.6713615023474178, "no_speech_prob": 8.829038961266633e-06}, {"id": 208, "seek": 108648, "start": 1086.48, "end": 1091.44, "text": " be in memory at the same time, that type of thing. And also, I need this section to have", "tokens": [312, 294, 4675, 412, 264, 912, 565, 11, 300, 2010, 295, 551, 13, 400, 611, 11, 286, 643, 341, 3541, 281, 362], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 209, "seek": 108648, "start": 1091.44, "end": 1095.52, "text": " this particular name, so please don't give it a different name or merge it, that type", "tokens": [341, 1729, 1315, 11, 370, 1767, 500, 380, 976, 309, 257, 819, 1315, 420, 22183, 309, 11, 300, 2010], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 210, "seek": 108648, "start": 1095.52, "end": 1100.2, "text": " of thing. So that should be able to make LTO much more usable with linker scripts. And", "tokens": [295, 551, 13, 407, 300, 820, 312, 1075, 281, 652, 441, 15427, 709, 544, 29975, 365, 2113, 260, 23294, 13, 400], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 211, "seek": 108648, "start": 1100.2, "end": 1106.3600000000001, "text": " what we tend to find with Clang is that if you get it right, LTO is very aggressive at", "tokens": [437, 321, 3928, 281, 915, 365, 2033, 656, 307, 300, 498, 291, 483, 309, 558, 11, 441, 15427, 307, 588, 10762, 412], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 212, "seek": 108648, "start": 1106.3600000000001, "end": 1110.56, "text": " removing code that's not needed. So that's actually very good for code size if you can", "tokens": [12720, 3089, 300, 311, 406, 2978, 13, 407, 300, 311, 767, 588, 665, 337, 3089, 2744, 498, 291, 393], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 213, "seek": 108648, "start": 1110.56, "end": 1114.96, "text": " make it work. Certainly we've seen, you know, for benchmarks, LTO is great, but then we", "tokens": [652, 309, 589, 13, 16628, 321, 600, 1612, 11, 291, 458, 11, 337, 43751, 11, 441, 15427, 307, 869, 11, 457, 550, 321], "temperature": 0.0, "avg_logprob": -0.1305107525416783, "compression_ratio": 1.7147540983606557, "no_speech_prob": 7.360262316069566e-06}, {"id": 214, "seek": 111496, "start": 1114.96, "end": 1119.64, "text": " say to customers, hey, use LTO and it goes, ah, but we can't because of the linker script,", "tokens": [584, 281, 4581, 11, 4177, 11, 764, 441, 15427, 293, 309, 1709, 11, 3716, 11, 457, 321, 393, 380, 570, 295, 264, 2113, 260, 5755, 11], "temperature": 0.0, "avg_logprob": -0.1560302632195609, "compression_ratio": 1.7041198501872659, "no_speech_prob": 6.47179649604368e-06}, {"id": 215, "seek": 111496, "start": 1119.64, "end": 1125.08, "text": " that type of thing. Next one is not strictly embedded, but it is very important for the", "tokens": [300, 2010, 295, 551, 13, 3087, 472, 307, 406, 20792, 16741, 11, 457, 309, 307, 588, 1021, 337, 264], "temperature": 0.0, "avg_logprob": -0.1560302632195609, "compression_ratio": 1.7041198501872659, "no_speech_prob": 6.47179649604368e-06}, {"id": 216, "seek": 111496, "start": 1125.08, "end": 1130.08, "text": " safety critical industry, which often is, you know, by definition embedded because you're", "tokens": [4514, 4924, 3518, 11, 597, 2049, 307, 11, 291, 458, 11, 538, 7123, 16741, 570, 291, 434], "temperature": 0.0, "avg_logprob": -0.1560302632195609, "compression_ratio": 1.7041198501872659, "no_speech_prob": 6.47179649604368e-06}, {"id": 217, "seek": 111496, "start": 1130.08, "end": 1137.2, "text": " controlling some kind of hardware. And this is something called MCDC code coverage. And", "tokens": [14905, 512, 733, 295, 8837, 13, 400, 341, 307, 746, 1219, 8797, 25619, 3089, 9645, 13, 400], "temperature": 0.0, "avg_logprob": -0.1560302632195609, "compression_ratio": 1.7041198501872659, "no_speech_prob": 6.47179649604368e-06}, {"id": 218, "seek": 111496, "start": 1137.2, "end": 1143.16, "text": " that is kind of a special form of code coverage where you're kind of, if you can imagine something", "tokens": [300, 307, 733, 295, 257, 2121, 1254, 295, 3089, 9645, 689, 291, 434, 733, 295, 11, 498, 291, 393, 3811, 746], "temperature": 0.0, "avg_logprob": -0.1560302632195609, "compression_ratio": 1.7041198501872659, "no_speech_prob": 6.47179649604368e-06}, {"id": 219, "seek": 114316, "start": 1143.16, "end": 1150.0, "text": " like if, and then A, B, C, D, E, and E, it's a way of sort of deriving test cases so that,", "tokens": [411, 498, 11, 293, 550, 316, 11, 363, 11, 383, 11, 413, 11, 462, 11, 293, 462, 11, 309, 311, 257, 636, 295, 1333, 295, 1163, 2123, 1500, 3331, 370, 300, 11], "temperature": 0.0, "avg_logprob": -0.20912813201664002, "compression_ratio": 1.6844106463878328, "no_speech_prob": 1.8842624740500469e-06}, {"id": 220, "seek": 114316, "start": 1150.0, "end": 1154.68, "text": " so it's not quite exhaustive, but it covers more than just did this branch go this way", "tokens": [370, 309, 311, 406, 1596, 14687, 488, 11, 457, 309, 10538, 544, 813, 445, 630, 341, 9819, 352, 341, 636], "temperature": 0.0, "avg_logprob": -0.20912813201664002, "compression_ratio": 1.6844106463878328, "no_speech_prob": 1.8842624740500469e-06}, {"id": 221, "seek": 114316, "start": 1154.68, "end": 1161.16, "text": " or this way. It's like, did it go this way because this condition held that type of thing.", "tokens": [420, 341, 636, 13, 467, 311, 411, 11, 630, 309, 352, 341, 636, 570, 341, 4188, 5167, 300, 2010, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.20912813201664002, "compression_ratio": 1.6844106463878328, "no_speech_prob": 1.8842624740500469e-06}, {"id": 222, "seek": 114316, "start": 1161.16, "end": 1165.0, "text": " Hopefully that's not going to show up too much there. And yeah, so there's some, there's", "tokens": [10429, 300, 311, 406, 516, 281, 855, 493, 886, 709, 456, 13, 400, 1338, 11, 370, 456, 311, 512, 11, 456, 311], "temperature": 0.0, "avg_logprob": -0.20912813201664002, "compression_ratio": 1.6844106463878328, "no_speech_prob": 1.8842624740500469e-06}, {"id": 223, "seek": 114316, "start": 1165.0, "end": 1169.64, "text": " a patch in for generating that in the code coverage thing. And it obviously, a lot of", "tokens": [257, 9972, 294, 337, 17746, 300, 294, 264, 3089, 9645, 551, 13, 400, 309, 2745, 11, 257, 688, 295], "temperature": 0.0, "avg_logprob": -0.20912813201664002, "compression_ratio": 1.6844106463878328, "no_speech_prob": 1.8842624740500469e-06}, {"id": 224, "seek": 116964, "start": 1169.64, "end": 1176.2, "text": " VM libc developing. And we would like that to support embedded systems. Okay, I'll skip", "tokens": [18038, 22854, 66, 6416, 13, 400, 321, 576, 411, 300, 281, 1406, 16741, 3652, 13, 1033, 11, 286, 603, 10023], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 225, "seek": 116964, "start": 1176.2, "end": 1179.68, "text": " through this very quickly. There's some patches up for Big Endian support. If anyone actually", "tokens": [807, 341, 588, 2661, 13, 821, 311, 512, 26531, 493, 337, 5429, 6967, 952, 1406, 13, 759, 2878, 767], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 226, "seek": 116964, "start": 1179.68, "end": 1183.5200000000002, "text": " uses Big Endian, I don't know. I'll be rude there. There's an armed person. We're almost", "tokens": [4960, 5429, 6967, 952, 11, 286, 500, 380, 458, 13, 286, 603, 312, 18895, 456, 13, 821, 311, 364, 16297, 954, 13, 492, 434, 1920], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 227, "seek": 116964, "start": 1183.5200000000002, "end": 1189.44, "text": " our arms a little Indian. And then there's the Cortex-M security extensions, which are,", "tokens": [527, 5812, 257, 707, 6427, 13, 400, 550, 456, 311, 264, 28522, 3121, 12, 44, 3825, 25129, 11, 597, 366, 11], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 228, "seek": 116964, "start": 1189.44, "end": 1194.44, "text": " you know, that's very useful if you're trying to sort of have secure state, non-secure state.", "tokens": [291, 458, 11, 300, 311, 588, 4420, 498, 291, 434, 1382, 281, 1333, 295, 362, 7144, 1785, 11, 2107, 12, 8159, 540, 1785, 13], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 229, "seek": 116964, "start": 1194.44, "end": 1198.1200000000001, "text": " So that supports in LLD. Again, if anyone wants to comment on those patches, please", "tokens": [407, 300, 9346, 294, 441, 23704, 13, 3764, 11, 498, 2878, 2738, 281, 2871, 322, 729, 26531, 11, 1767], "temperature": 0.0, "avg_logprob": -0.24633738020776022, "compression_ratio": 1.6391437308868502, "no_speech_prob": 6.186282917042263e-06}, {"id": 230, "seek": 119812, "start": 1198.12, "end": 1204.08, "text": " do. Okay. Okay, so fine. Finally, if you do want to contribute to this, and this is not", "tokens": [360, 13, 1033, 13, 1033, 11, 370, 2489, 13, 6288, 11, 498, 291, 360, 528, 281, 10586, 281, 341, 11, 293, 341, 307, 406], "temperature": 0.0, "avg_logprob": -0.15217752871306045, "compression_ratio": 1.6101083032490975, "no_speech_prob": 1.576600334374234e-05}, {"id": 231, "seek": 119812, "start": 1204.08, "end": 1208.2399999999998, "text": " just as a developer, we're perfectly happy to have contributions from users as well or", "tokens": [445, 382, 257, 10754, 11, 321, 434, 6239, 2055, 281, 362, 15725, 490, 5022, 382, 731, 420], "temperature": 0.0, "avg_logprob": -0.15217752871306045, "compression_ratio": 1.6101083032490975, "no_speech_prob": 1.576600334374234e-05}, {"id": 232, "seek": 119812, "start": 1208.2399999999998, "end": 1213.6399999999999, "text": " just in some ways just telling us what's important. So Clang has pretty much come out of what", "tokens": [445, 294, 512, 2098, 445, 3585, 505, 437, 311, 1021, 13, 407, 2033, 656, 575, 1238, 709, 808, 484, 295, 437], "temperature": 0.0, "avg_logprob": -0.15217752871306045, "compression_ratio": 1.6101083032490975, "no_speech_prob": 1.576600334374234e-05}, {"id": 233, "seek": 119812, "start": 1213.6399999999999, "end": 1221.3999999999999, "text": " I call the hosted community. You know, it's generally, at least as now I would say there's", "tokens": [286, 818, 264, 19204, 1768, 13, 509, 458, 11, 309, 311, 5101, 11, 412, 1935, 382, 586, 286, 576, 584, 456, 311], "temperature": 0.0, "avg_logprob": -0.15217752871306045, "compression_ratio": 1.6101083032490975, "no_speech_prob": 1.576600334374234e-05}, {"id": 234, "seek": 119812, "start": 1221.3999999999999, "end": 1226.1599999999999, "text": " a lot fewer people in the embedded system, embedded systems area than there is on GCC.", "tokens": [257, 688, 13366, 561, 294, 264, 16741, 1185, 11, 16741, 3652, 1859, 813, 456, 307, 322, 460, 11717, 13], "temperature": 0.0, "avg_logprob": -0.15217752871306045, "compression_ratio": 1.6101083032490975, "no_speech_prob": 1.576600334374234e-05}, {"id": 235, "seek": 122616, "start": 1226.16, "end": 1230.28, "text": " So if you, you know, there are certain features that are useful in embedded tool chains, but", "tokens": [407, 498, 291, 11, 291, 458, 11, 456, 366, 1629, 4122, 300, 366, 4420, 294, 16741, 2290, 12626, 11, 457], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 236, "seek": 122616, "start": 1230.28, "end": 1236.28, "text": " not necessarily in say, hosted tool chains. So just telling the community that you need", "tokens": [406, 4725, 294, 584, 11, 19204, 2290, 12626, 13, 407, 445, 3585, 264, 1768, 300, 291, 643], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 237, "seek": 122616, "start": 1236.28, "end": 1239.8000000000002, "text": " these features is often helpful because quite often it will say, why do we need all this", "tokens": [613, 4122, 307, 2049, 4961, 570, 1596, 2049, 309, 486, 584, 11, 983, 360, 321, 643, 439, 341], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 238, "seek": 122616, "start": 1239.8000000000002, "end": 1243.96, "text": " complexity for this thing? No one's going to use it. And it's like, well, and you can", "tokens": [14024, 337, 341, 551, 30, 883, 472, 311, 516, 281, 764, 309, 13, 400, 309, 311, 411, 11, 731, 11, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 239, "seek": 122616, "start": 1243.96, "end": 1247.5600000000002, "text": " only get people only get used to features if they're there, but then you can't get them", "tokens": [787, 483, 561, 787, 483, 1143, 281, 4122, 498, 436, 434, 456, 11, 457, 550, 291, 393, 380, 483, 552], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 240, "seek": 122616, "start": 1247.5600000000002, "end": 1254.44, "text": " in, you know, chicken and egg situation there. So yeah, so there is a four weekly call that", "tokens": [294, 11, 291, 458, 11, 4662, 293, 3777, 2590, 456, 13, 407, 1338, 11, 370, 456, 307, 257, 1451, 12460, 818, 300], "temperature": 0.0, "avg_logprob": -0.14284318952418085, "compression_ratio": 1.7774086378737541, "no_speech_prob": 6.439289791160263e-06}, {"id": 241, "seek": 125444, "start": 1254.44, "end": 1259.64, "text": " goes on, unfortunately, at a time slot that's not great for Europeans, but this is the only", "tokens": [1709, 322, 11, 7015, 11, 412, 257, 565, 14747, 300, 311, 406, 869, 337, 29746, 11, 457, 341, 307, 264, 787], "temperature": 0.0, "avg_logprob": -0.1439733865126124, "compression_ratio": 1.6231884057971016, "no_speech_prob": 1.7885988199850544e-05}, {"id": 242, "seek": 125444, "start": 1259.64, "end": 1264.3200000000002, "text": " sort of time slot you can kind of get across US and Europe together at that particular", "tokens": [1333, 295, 565, 14747, 291, 393, 733, 295, 483, 2108, 2546, 293, 3315, 1214, 412, 300, 1729], "temperature": 0.0, "avg_logprob": -0.1439733865126124, "compression_ratio": 1.6231884057971016, "no_speech_prob": 1.7885988199850544e-05}, {"id": 243, "seek": 125444, "start": 1264.3200000000002, "end": 1270.74, "text": " point. So that's probably about, I'd say about 20 people turn up. And that's really just", "tokens": [935, 13, 407, 300, 311, 1391, 466, 11, 286, 1116, 584, 466, 945, 561, 1261, 493, 13, 400, 300, 311, 534, 445], "temperature": 0.0, "avg_logprob": -0.1439733865126124, "compression_ratio": 1.6231884057971016, "no_speech_prob": 1.7885988199850544e-05}, {"id": 244, "seek": 125444, "start": 1270.74, "end": 1273.8400000000001, "text": " about the various people who are working on embedded systems and if they want to sort", "tokens": [466, 264, 3683, 561, 567, 366, 1364, 322, 16741, 3652, 293, 498, 436, 528, 281, 1333], "temperature": 0.0, "avg_logprob": -0.1439733865126124, "compression_ratio": 1.6231884057971016, "no_speech_prob": 1.7885988199850544e-05}, {"id": 245, "seek": 125444, "start": 1273.8400000000001, "end": 1279.24, "text": " of highlight patches that want to be reviewed, discuss new features. Last time we were talking", "tokens": [295, 5078, 26531, 300, 528, 281, 312, 18429, 11, 2248, 777, 4122, 13, 5264, 565, 321, 645, 1417], "temperature": 0.0, "avg_logprob": -0.1439733865126124, "compression_ratio": 1.6231884057971016, "no_speech_prob": 1.7885988199850544e-05}, {"id": 246, "seek": 127924, "start": 1279.24, "end": 1286.84, "text": " about how we might improve LLDs, observability of diagnostics, that type of thing. Obviously", "tokens": [466, 577, 321, 1062, 3470, 441, 23704, 82, 11, 9951, 2310, 295, 43215, 1167, 11, 300, 2010, 295, 551, 13, 7580], "temperature": 0.0, "avg_logprob": -0.24194873251566074, "compression_ratio": 1.48, "no_speech_prob": 6.725383173034061e-06}, {"id": 247, "seek": 127924, "start": 1286.84, "end": 1293.32, "text": " bug reports, welcome at those links. And obviously if you attend the developer meetings, there's", "tokens": [7426, 7122, 11, 2928, 412, 729, 6123, 13, 400, 2745, 498, 291, 6888, 264, 10754, 8410, 11, 456, 311], "temperature": 0.0, "avg_logprob": -0.24194873251566074, "compression_ratio": 1.48, "no_speech_prob": 6.725383173034061e-06}, {"id": 248, "seek": 127924, "start": 1293.32, "end": 1297.48, "text": " often a round table on embedded systems at that point. And with that, that's my last", "tokens": [2049, 257, 3098, 3199, 322, 16741, 3652, 412, 300, 935, 13, 400, 365, 300, 11, 300, 311, 452, 1036], "temperature": 0.0, "avg_logprob": -0.24194873251566074, "compression_ratio": 1.48, "no_speech_prob": 6.725383173034061e-06}, {"id": 249, "seek": 127924, "start": 1297.48, "end": 1303.48, "text": " slide. So hopefully we've got a few minutes for questions.", "tokens": [4137, 13, 407, 4696, 321, 600, 658, 257, 1326, 2077, 337, 1651, 13], "temperature": 0.0, "avg_logprob": -0.24194873251566074, "compression_ratio": 1.48, "no_speech_prob": 6.725383173034061e-06}, {"id": 250, "seek": 130348, "start": 1303.48, "end": 1313.56, "text": " I'm trying to understand something. I know of some people who say that they're using", "tokens": [286, 478, 1382, 281, 1223, 746, 13, 286, 458, 295, 512, 561, 567, 584, 300, 436, 434, 1228], "temperature": 0.0, "avg_logprob": -0.19731185913085938, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.0010752230882644653}, {"id": 251, "seek": 130348, "start": 1313.56, "end": 1317.76, "text": " LLVM for embedded already. Does this mean that they're using the other definition of", "tokens": [441, 43, 53, 44, 337, 16741, 1217, 13, 4402, 341, 914, 300, 436, 434, 1228, 264, 661, 7123, 295], "temperature": 0.0, "avg_logprob": -0.19731185913085938, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.0010752230882644653}, {"id": 252, "seek": 130348, "start": 1317.76, "end": 1318.76, "text": " embedded?", "tokens": [16741, 30], "temperature": 0.0, "avg_logprob": -0.19731185913085938, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.0010752230882644653}, {"id": 253, "seek": 130348, "start": 1318.76, "end": 1324.92, "text": " So there's two, well, you can do it. There'll be three ways they can do it. One of them is", "tokens": [407, 456, 311, 732, 11, 731, 11, 291, 393, 360, 309, 13, 821, 603, 312, 1045, 2098, 436, 393, 360, 309, 13, 1485, 295, 552, 307], "temperature": 0.0, "avg_logprob": -0.19731185913085938, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.0010752230882644653}, {"id": 254, "seek": 130348, "start": 1324.92, "end": 1330.04, "text": " they're kind of using an LLVM based tool chain from a vendor. So that vendor will have done", "tokens": [436, 434, 733, 295, 1228, 364, 441, 43, 53, 44, 2361, 2290, 5021, 490, 257, 24321, 13, 407, 300, 24321, 486, 362, 1096], "temperature": 0.0, "avg_logprob": -0.19731185913085938, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.0010752230882644653}, {"id": 255, "seek": 133004, "start": 1330.04, "end": 1335.84, "text": " all of that packaging up. Or it will be like, for example, ARM will sell you a commercial", "tokens": [439, 295, 300, 16836, 493, 13, 1610, 309, 486, 312, 411, 11, 337, 1365, 11, 45209, 486, 3607, 291, 257, 6841], "temperature": 0.0, "avg_logprob": -0.2109449851412733, "compression_ratio": 1.6818181818181819, "no_speech_prob": 2.2626443751505576e-05}, {"id": 256, "seek": 133004, "start": 1335.84, "end": 1342.2, "text": " tool chain that is a derivative of Clang, that type of thing. That's one way of doing", "tokens": [2290, 5021, 300, 307, 257, 13760, 295, 2033, 656, 11, 300, 2010, 295, 551, 13, 663, 311, 472, 636, 295, 884], "temperature": 0.0, "avg_logprob": -0.2109449851412733, "compression_ratio": 1.6818181818181819, "no_speech_prob": 2.2626443751505576e-05}, {"id": 257, "seek": 133004, "start": 1342.2, "end": 1346.48, "text": " it, that sort of thing. Or they might be using embedded Linux, that type of thing. The question", "tokens": [309, 11, 300, 1333, 295, 551, 13, 1610, 436, 1062, 312, 1228, 16741, 18734, 11, 300, 2010, 295, 551, 13, 440, 1168], "temperature": 0.0, "avg_logprob": -0.2109449851412733, "compression_ratio": 1.6818181818181819, "no_speech_prob": 2.2626443751505576e-05}, {"id": 258, "seek": 133004, "start": 1346.48, "end": 1349.76, "text": " was, sorry, I've been holding up a picture all day saying, please repeat the question.", "tokens": [390, 11, 2597, 11, 286, 600, 668, 5061, 493, 257, 3036, 439, 786, 1566, 11, 1767, 7149, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2109449851412733, "compression_ratio": 1.6818181818181819, "no_speech_prob": 2.2626443751505576e-05}, {"id": 259, "seek": 133004, "start": 1349.76, "end": 1355.68, "text": " I didn't. And the question was, some people say they're already using LLVM. Does that", "tokens": [286, 994, 380, 13, 400, 264, 1168, 390, 11, 512, 561, 584, 436, 434, 1217, 1228, 441, 43, 53, 44, 13, 4402, 300], "temperature": 0.0, "avg_logprob": -0.2109449851412733, "compression_ratio": 1.6818181818181819, "no_speech_prob": 2.2626443751505576e-05}, {"id": 260, "seek": 135568, "start": 1355.68, "end": 1361.3600000000001, "text": " mean they were using a hosted system or not? Okay. Just the first, sorry, go out the back", "tokens": [914, 436, 645, 1228, 257, 19204, 1185, 420, 406, 30, 1033, 13, 1449, 264, 700, 11, 2597, 11, 352, 484, 264, 646], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 261, "seek": 135568, "start": 1361.3600000000001, "end": 1362.3600000000001, "text": " there.", "tokens": [456, 13], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 262, "seek": 135568, "start": 1362.3600000000001, "end": 1367.52, "text": " Yes. So one of the things I noticed is LLVM ships its own assembler. We've noticed for", "tokens": [1079, 13, 407, 472, 295, 264, 721, 286, 5694, 307, 441, 43, 53, 44, 11434, 1080, 1065, 8438, 1918, 13, 492, 600, 5694, 337], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 263, "seek": 135568, "start": 1367.52, "end": 1372.5600000000002, "text": " some LLVM projects that they have trouble with some of the new assembler macros. So we have", "tokens": [512, 441, 43, 53, 44, 4455, 300, 436, 362, 5253, 365, 512, 295, 264, 777, 8438, 1918, 7912, 2635, 13, 407, 321, 362], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 264, "seek": 135568, "start": 1372.5600000000002, "end": 1377.8, "text": " to go back to the truth and just put some of the targets. Is there some plans for work", "tokens": [281, 352, 646, 281, 264, 3494, 293, 445, 829, 512, 295, 264, 12911, 13, 1119, 456, 512, 5482, 337, 589], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 265, "seek": 135568, "start": 1377.8, "end": 1381.44, "text": " on this?", "tokens": [322, 341, 30], "temperature": 0.0, "avg_logprob": -0.4225988034848814, "compression_ratio": 1.6343612334801763, "no_speech_prob": 0.0001872161083156243}, {"id": 266, "seek": 138144, "start": 1381.44, "end": 1389.3600000000001, "text": " So with the latest LLVM, I know, sorry, sorry, repeat the question. So the question was,", "tokens": [407, 365, 264, 6792, 441, 43, 53, 44, 11, 286, 458, 11, 2597, 11, 2597, 11, 7149, 264, 1168, 13, 407, 264, 1168, 390, 11], "temperature": 0.0, "avg_logprob": -0.17633511195673007, "compression_ratio": 1.5695652173913044, "no_speech_prob": 3.0583032639697194e-05}, {"id": 267, "seek": 138144, "start": 1389.3600000000001, "end": 1396.56, "text": " the LLVM has an integrated assembler. GNU has GNU AS. And there are some directives or macro", "tokens": [264, 441, 43, 53, 44, 575, 364, 10919, 8438, 1918, 13, 46411, 52, 575, 46411, 52, 7469, 13, 400, 456, 366, 512, 2047, 1539, 420, 18887], "temperature": 0.0, "avg_logprob": -0.17633511195673007, "compression_ratio": 1.5695652173913044, "no_speech_prob": 3.0583032639697194e-05}, {"id": 268, "seek": 138144, "start": 1396.56, "end": 1404.56, "text": " support that might be in the GNU assembler, but not LLVM. So I think it's generally done", "tokens": [1406, 300, 1062, 312, 294, 264, 46411, 52, 8438, 1918, 11, 457, 406, 441, 43, 53, 44, 13, 407, 286, 519, 309, 311, 5101, 1096], "temperature": 0.0, "avg_logprob": -0.17633511195673007, "compression_ratio": 1.5695652173913044, "no_speech_prob": 3.0583032639697194e-05}, {"id": 269, "seek": 138144, "start": 1404.56, "end": 1410.92, "text": " on demand. So there was a big effort to get the Linux kernel compiled with Clang. And that", "tokens": [322, 4733, 13, 407, 456, 390, 257, 955, 4630, 281, 483, 264, 18734, 28256, 36548, 365, 2033, 656, 13, 400, 300], "temperature": 0.0, "avg_logprob": -0.17633511195673007, "compression_ratio": 1.5695652173913044, "no_speech_prob": 3.0583032639697194e-05}, {"id": 270, "seek": 141092, "start": 1410.92, "end": 1414.92, "text": " added quite a lot of features that were basically needed for the Linux kernel. So the best thing", "tokens": [3869, 1596, 257, 688, 295, 4122, 300, 645, 1936, 2978, 337, 264, 18734, 28256, 13, 407, 264, 1151, 551], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 271, "seek": 141092, "start": 1414.92, "end": 1419.7, "text": " to do is have a really important project that's a big company wants to get compiled with the", "tokens": [281, 360, 307, 362, 257, 534, 1021, 1716, 300, 311, 257, 955, 2237, 2738, 281, 483, 36548, 365, 264], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 272, "seek": 141092, "start": 1419.7, "end": 1426.24, "text": " integrated assembler. Yes. Yes. Yes. Yes. That is a very good way of doing it.", "tokens": [10919, 8438, 1918, 13, 1079, 13, 1079, 13, 1079, 13, 1079, 13, 663, 307, 257, 588, 665, 636, 295, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 273, "seek": 141092, "start": 1426.24, "end": 1431.24, "text": " As macros were in the Linux kernel and they asked us to support them and say, no, screw", "tokens": [1018, 7912, 2635, 645, 294, 264, 18734, 28256, 293, 436, 2351, 505, 281, 1406, 552, 293, 584, 11, 572, 11, 5630], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 274, "seek": 141092, "start": 1431.24, "end": 1436.2, "text": " this, the kernel changed away from macros. And they changed away from macros.", "tokens": [341, 11, 264, 28256, 3105, 1314, 490, 7912, 2635, 13, 400, 436, 3105, 1314, 490, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 275, "seek": 141092, "start": 1436.2, "end": 1439.76, "text": " Yeah. But there certainly was support. There was, I think there is a directive where you", "tokens": [865, 13, 583, 456, 3297, 390, 1406, 13, 821, 390, 11, 286, 519, 456, 307, 257, 45444, 689, 291], "temperature": 0.0, "avg_logprob": -0.25862589749422943, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00022114913736004382}, {"id": 276, "seek": 143976, "start": 1439.76, "end": 1445.08, "text": " can switch the GNU assembler into advanced macro mode or something like that. Or I can't", "tokens": [393, 3679, 264, 46411, 52, 8438, 1918, 666, 7339, 18887, 4391, 420, 746, 411, 300, 13, 1610, 286, 393, 380], "temperature": 0.0, "avg_logprob": -0.22819096109141473, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0001422557106707245}, {"id": 277, "seek": 143976, "start": 1445.08, "end": 1450.12, "text": " remember. No, that's not that. That's the inline assembly thing. There is an F. Yes,", "tokens": [1604, 13, 883, 11, 300, 311, 406, 300, 13, 663, 311, 264, 294, 1889, 12103, 551, 13, 821, 307, 364, 479, 13, 1079, 11], "temperature": 0.0, "avg_logprob": -0.22819096109141473, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0001422557106707245}, {"id": 278, "seek": 143976, "start": 1450.12, "end": 1459.16, "text": " there is a high GNU extensions option. But no, there was a patch that probably landed", "tokens": [456, 307, 257, 1090, 46411, 52, 25129, 3614, 13, 583, 572, 11, 456, 390, 257, 9972, 300, 1391, 15336], "temperature": 0.0, "avg_logprob": -0.22819096109141473, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0001422557106707245}, {"id": 279, "seek": 143976, "start": 1459.16, "end": 1465.84, "text": " a few years ago. So depending on how long ago you tried, then there was some support", "tokens": [257, 1326, 924, 2057, 13, 407, 5413, 322, 577, 938, 2057, 291, 3031, 11, 550, 456, 390, 512, 1406], "temperature": 0.0, "avg_logprob": -0.22819096109141473, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.0001422557106707245}, {"id": 280, "seek": 146584, "start": 1465.84, "end": 1470.12, "text": " done for more macros. But whether it's got all of it or not, I don't know.", "tokens": [1096, 337, 544, 7912, 2635, 13, 583, 1968, 309, 311, 658, 439, 295, 309, 420, 406, 11, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 281, "seek": 146584, "start": 1470.12, "end": 1472.4399999999998, "text": " Well, I actually don't. I've got a lot of problems. It was a while ago.", "tokens": [1042, 11, 286, 767, 500, 380, 13, 286, 600, 658, 257, 688, 295, 2740, 13, 467, 390, 257, 1339, 2057, 13], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 282, "seek": 146584, "start": 1472.4399999999998, "end": 1478.6, "text": " Right. Yes. You may find that someone has already fixed that already. Yes. Thank you.", "tokens": [1779, 13, 1079, 13, 509, 815, 915, 300, 1580, 575, 1217, 6806, 300, 1217, 13, 1079, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 283, "seek": 146584, "start": 1478.6, "end": 1483.1999999999998, "text": " Yeah. So my question is about, like, we, for example, tried to deploy machine learning", "tokens": [865, 13, 407, 452, 1168, 307, 466, 11, 411, 11, 321, 11, 337, 1365, 11, 3031, 281, 7274, 3479, 2539], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 284, "seek": 146584, "start": 1483.1999999999998, "end": 1489.08, "text": " models on tiny bare metal devices. Yeah. And there we are also looking into, for example,", "tokens": [5245, 322, 5870, 6949, 5760, 5759, 13, 865, 13, 400, 456, 321, 366, 611, 1237, 666, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 285, "seek": 146584, "start": 1489.08, "end": 1494.24, "text": " TVM as a tool chain, but also MLIR now, or like the EV project from Google.", "tokens": [3558, 44, 382, 257, 2290, 5021, 11, 457, 611, 21601, 7740, 586, 11, 420, 411, 264, 15733, 1716, 490, 3329, 13], "temperature": 0.0, "avg_logprob": -0.31500816345214844, "compression_ratio": 1.5849673202614378, "no_speech_prob": 0.00021407428721431643}, {"id": 286, "seek": 149424, "start": 1494.24, "end": 1497.84, "text": " Yeah. And they're basically what they do is they use this entire tool chain, and then", "tokens": [865, 13, 400, 436, 434, 1936, 437, 436, 360, 307, 436, 764, 341, 2302, 2290, 5021, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.355421114368599, "compression_ratio": 1.6278195488721805, "no_speech_prob": 0.0006090507376939058}, {"id": 287, "seek": 149424, "start": 1497.84, "end": 1503.76, "text": " they use the MITC dialect, for example, in EV to MITC code again. Okay. To then put it", "tokens": [436, 764, 264, 13100, 34, 24652, 11, 337, 1365, 11, 294, 15733, 281, 13100, 34, 3089, 797, 13, 1033, 13, 1407, 550, 829, 309], "temperature": 0.0, "avg_logprob": -0.355421114368599, "compression_ratio": 1.6278195488721805, "no_speech_prob": 0.0006090507376939058}, {"id": 288, "seek": 149424, "start": 1503.76, "end": 1508.36, "text": " into an embedded tool chain to actually do the final compilation stuff. Do you think", "tokens": [666, 364, 16741, 2290, 5021, 281, 767, 360, 264, 2572, 40261, 1507, 13, 1144, 291, 519], "temperature": 0.0, "avg_logprob": -0.355421114368599, "compression_ratio": 1.6278195488721805, "no_speech_prob": 0.0006090507376939058}, {"id": 289, "seek": 149424, "start": 1508.36, "end": 1514.68, "text": " that there is, or what is basically needed to omit this last going back to C, or is this", "tokens": [300, 456, 307, 11, 420, 437, 307, 1936, 2978, 281, 3406, 270, 341, 1036, 516, 646, 281, 383, 11, 420, 307, 341], "temperature": 0.0, "avg_logprob": -0.355421114368599, "compression_ratio": 1.6278195488721805, "no_speech_prob": 0.0006090507376939058}, {"id": 290, "seek": 149424, "start": 1514.68, "end": 1523.2, "text": " a good idea or not? Or... Oh, well, I mean, I suppose... I'm just trying to think how,", "tokens": [257, 665, 1558, 420, 406, 30, 1610, 485, 876, 11, 731, 11, 286, 914, 11, 286, 7297, 485, 286, 478, 445, 1382, 281, 519, 577, 11], "temperature": 0.0, "avg_logprob": -0.355421114368599, "compression_ratio": 1.6278195488721805, "no_speech_prob": 0.0006090507376939058}, {"id": 291, "seek": 152320, "start": 1523.2, "end": 1528.76, "text": " not very familiar. So the question was about people deploying machine learning models on", "tokens": [406, 588, 4963, 13, 407, 264, 1168, 390, 466, 561, 34198, 3479, 2539, 5245, 322], "temperature": 0.0, "avg_logprob": -0.16382195638573688, "compression_ratio": 1.5814977973568283, "no_speech_prob": 1.5886487744865008e-05}, {"id": 292, "seek": 152320, "start": 1528.76, "end": 1536.28, "text": " small devices, and they're currently outputting to a C back end, and then recompiling that", "tokens": [1359, 5759, 11, 293, 436, 434, 4362, 5598, 783, 281, 257, 383, 646, 917, 11, 293, 550, 48000, 4883, 300], "temperature": 0.0, "avg_logprob": -0.16382195638573688, "compression_ratio": 1.5814977973568283, "no_speech_prob": 1.5886487744865008e-05}, {"id": 293, "seek": 152320, "start": 1536.28, "end": 1542.92, "text": " C back end. And do I think this is a good idea or not? I mean, I guess the C back ends", "tokens": [383, 646, 917, 13, 400, 360, 286, 519, 341, 307, 257, 665, 1558, 420, 406, 30, 286, 914, 11, 286, 2041, 264, 383, 646, 5314], "temperature": 0.0, "avg_logprob": -0.16382195638573688, "compression_ratio": 1.5814977973568283, "no_speech_prob": 1.5886487744865008e-05}, {"id": 294, "seek": 152320, "start": 1542.92, "end": 1548.28, "text": " are often the, how do I get this up and running as quickly as possible? I do know that there", "tokens": [366, 2049, 264, 11, 577, 360, 286, 483, 341, 493, 293, 2614, 382, 2661, 382, 1944, 30, 286, 360, 458, 300, 456], "temperature": 0.0, "avg_logprob": -0.16382195638573688, "compression_ratio": 1.5814977973568283, "no_speech_prob": 1.5886487744865008e-05}, {"id": 295, "seek": 154828, "start": 1548.28, "end": 1554.48, "text": " are, I guess, machine learning compilers that have got, I guess, code generation out. I", "tokens": [366, 11, 286, 2041, 11, 3479, 2539, 715, 388, 433, 300, 362, 658, 11, 286, 2041, 11, 3089, 5125, 484, 13, 286], "temperature": 0.0, "avg_logprob": -0.17061859766642254, "compression_ratio": 1.790983606557377, "no_speech_prob": 4.0360522689297795e-05}, {"id": 296, "seek": 154828, "start": 1554.48, "end": 1560.48, "text": " mean, I guess if you're using LLVM itself, it's probably not too difficult to just lower", "tokens": [914, 11, 286, 2041, 498, 291, 434, 1228, 441, 43, 53, 44, 2564, 11, 309, 311, 1391, 406, 886, 2252, 281, 445, 3126], "temperature": 0.0, "avg_logprob": -0.17061859766642254, "compression_ratio": 1.790983606557377, "no_speech_prob": 4.0360522689297795e-05}, {"id": 297, "seek": 154828, "start": 1560.48, "end": 1565.92, "text": " to LLVM and get most, and you then get the code generation for free. I guess the bit", "tokens": [281, 441, 43, 53, 44, 293, 483, 881, 11, 293, 291, 550, 483, 264, 3089, 5125, 337, 1737, 13, 286, 2041, 264, 857], "temperature": 0.0, "avg_logprob": -0.17061859766642254, "compression_ratio": 1.790983606557377, "no_speech_prob": 4.0360522689297795e-05}, {"id": 298, "seek": 154828, "start": 1565.92, "end": 1572.3999999999999, "text": " that you might not get is, have you got all of the run time and intrinsics that you might", "tokens": [300, 291, 1062, 406, 483, 307, 11, 362, 291, 658, 439, 295, 264, 1190, 565, 293, 28621, 1167, 300, 291, 1062], "temperature": 0.0, "avg_logprob": -0.17061859766642254, "compression_ratio": 1.790983606557377, "no_speech_prob": 4.0360522689297795e-05}, {"id": 299, "seek": 154828, "start": 1572.3999999999999, "end": 1576.12, "text": " have that the C compiler might insert, but I don't, you might find someone else knows", "tokens": [362, 300, 264, 383, 31958, 1062, 8969, 11, 457, 286, 500, 380, 11, 291, 1062, 915, 1580, 1646, 3255], "temperature": 0.0, "avg_logprob": -0.17061859766642254, "compression_ratio": 1.790983606557377, "no_speech_prob": 4.0360522689297795e-05}, {"id": 300, "seek": 157612, "start": 1576.12, "end": 1580.8, "text": " why. So maybe just in addition, it does not compile the whole machine learning models", "tokens": [983, 13, 407, 1310, 445, 294, 4500, 11, 309, 775, 406, 31413, 264, 1379, 3479, 2539, 5245], "temperature": 0.0, "avg_logprob": -0.3366105556488037, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.00021953567920718342}, {"id": 301, "seek": 157612, "start": 1580.8, "end": 1586.56, "text": " to C, so they are still a static library linked in which it's generated via LLVM. It's just", "tokens": [281, 383, 11, 370, 436, 366, 920, 257, 13437, 6405, 9408, 294, 597, 309, 311, 10833, 5766, 441, 43, 53, 44, 13, 467, 311, 445], "temperature": 0.0, "avg_logprob": -0.3366105556488037, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.00021953567920718342}, {"id": 302, "seek": 157612, "start": 1586.56, "end": 1593.36, "text": " some parts around, so it's not that they are as pure C in the end. That's not done in", "tokens": [512, 3166, 926, 11, 370, 309, 311, 406, 300, 436, 366, 382, 6075, 383, 294, 264, 917, 13, 663, 311, 406, 1096, 294], "temperature": 0.0, "avg_logprob": -0.3366105556488037, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.00021953567920718342}, {"id": 303, "seek": 157612, "start": 1593.36, "end": 1600.3, "text": " the approach. Okay. Yes, sir, yes. I was one of those unfortunate uses of big ambient", "tokens": [264, 3109, 13, 1033, 13, 1079, 11, 4735, 11, 2086, 13, 286, 390, 472, 295, 729, 17843, 4960, 295, 955, 22997], "temperature": 0.0, "avg_logprob": -0.3366105556488037, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.00021953567920718342}, {"id": 304, "seek": 160030, "start": 1600.3, "end": 1607.36, "text": " arm. We were running several compilers in this safety-critical application. Everyone", "tokens": [3726, 13, 492, 645, 2614, 2940, 715, 388, 433, 294, 341, 4514, 12, 32255, 804, 3861, 13, 5198], "temperature": 0.0, "avg_logprob": -0.27773729261461194, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0014178199926391244}, {"id": 305, "seek": 160030, "start": 1607.36, "end": 1613.12, "text": " had a problem with one thing, and that's the linker. We're trying to generate a header.", "tokens": [632, 257, 1154, 365, 472, 551, 11, 293, 300, 311, 264, 2113, 260, 13, 492, 434, 1382, 281, 8460, 257, 23117, 13], "temperature": 0.0, "avg_logprob": -0.27773729261461194, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0014178199926391244}, {"id": 306, "seek": 160030, "start": 1613.12, "end": 1618.24, "text": " And the linker, you can't insert a text string in the linker. It's very difficult to insert", "tokens": [400, 264, 2113, 260, 11, 291, 393, 380, 8969, 257, 2487, 6798, 294, 264, 2113, 260, 13, 467, 311, 588, 2252, 281, 8969], "temperature": 0.0, "avg_logprob": -0.27773729261461194, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0014178199926391244}, {"id": 307, "seek": 160030, "start": 1618.24, "end": 1624.96, "text": " static data. We want to insert information about how large is the section. That was basically", "tokens": [13437, 1412, 13, 492, 528, 281, 8969, 1589, 466, 577, 2416, 307, 264, 3541, 13, 663, 390, 1936], "temperature": 0.0, "avg_logprob": -0.27773729261461194, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0014178199926391244}, {"id": 308, "seek": 162496, "start": 1624.96, "end": 1631.44, "text": " possible to do with the linker. How does LLVM handle all these other things?", "tokens": [1944, 281, 360, 365, 264, 2113, 260, 13, 1012, 775, 441, 43, 53, 44, 4813, 439, 613, 661, 721, 30], "temperature": 0.0, "avg_logprob": -0.2869978944460551, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.00019608029106166214}, {"id": 309, "seek": 162496, "start": 1631.44, "end": 1638.32, "text": " With great difficulty, I think, I think there isn't really a, there isn't, I think the,", "tokens": [2022, 869, 10360, 11, 286, 519, 11, 286, 519, 456, 1943, 380, 534, 257, 11, 456, 1943, 380, 11, 286, 519, 264, 11], "temperature": 0.0, "avg_logprob": -0.2869978944460551, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.00019608029106166214}, {"id": 310, "seek": 162496, "start": 1638.32, "end": 1645.4, "text": " yeah, I think Christoph is nailed it in that, what I would probably do myself is reserve", "tokens": [1338, 11, 286, 519, 2040, 5317, 307, 30790, 309, 294, 300, 11, 437, 286, 576, 1391, 360, 2059, 307, 17824], "temperature": 0.0, "avg_logprob": -0.2869978944460551, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.00019608029106166214}, {"id": 311, "seek": 162496, "start": 1645.4, "end": 1652.72, "text": " some space in the binary, name a section out of it, and then use Obstump to poke it in", "tokens": [512, 1901, 294, 264, 17434, 11, 1315, 257, 3541, 484, 295, 309, 11, 293, 550, 764, 4075, 372, 1420, 281, 19712, 309, 294], "temperature": 0.0, "avg_logprob": -0.2869978944460551, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.00019608029106166214}, {"id": 312, "seek": 165272, "start": 1652.72, "end": 1656.24, "text": " at that particular point. Can you see my problem?", "tokens": [412, 300, 1729, 935, 13, 1664, 291, 536, 452, 1154, 30], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 313, "seek": 165272, "start": 1656.24, "end": 1658.28, "text": " No, yes. I mean, there are some...", "tokens": [883, 11, 2086, 13, 286, 914, 11, 456, 366, 512, 485], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 314, "seek": 165272, "start": 1658.28, "end": 1660.72, "text": " Putting a string in the link command file.", "tokens": [31367, 257, 6798, 294, 264, 2113, 5622, 3991, 13], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 315, "seek": 165272, "start": 1660.72, "end": 1667.68, "text": " Well, it's a bit more difficult. It's the, I think the linker needs to know the length.", "tokens": [1042, 11, 309, 311, 257, 857, 544, 2252, 13, 467, 311, 264, 11, 286, 519, 264, 2113, 260, 2203, 281, 458, 264, 4641, 13], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 316, "seek": 165272, "start": 1667.68, "end": 1672.6000000000001, "text": " I mean, I suppose you could do it with horrifying things. You could use data statements in the", "tokens": [286, 914, 11, 286, 7297, 291, 727, 360, 309, 365, 40227, 721, 13, 509, 727, 764, 1412, 12363, 294, 264], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 317, "seek": 165272, "start": 1672.6000000000001, "end": 1676.3600000000001, "text": " linker script, but that sounds a bit, it's really what you would want.", "tokens": [2113, 260, 5755, 11, 457, 300, 3263, 257, 857, 11, 309, 311, 534, 437, 291, 576, 528, 13], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 318, "seek": 165272, "start": 1676.3600000000001, "end": 1677.3600000000001, "text": " I want it.", "tokens": [286, 528, 309, 13], "temperature": 0.0, "avg_logprob": -0.3236573480926784, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00030613227863796055}, {"id": 319, "seek": 167736, "start": 1677.36, "end": 1682.9599999999998, "text": " Yes, really, I think, yeah, because you get a number, but really, yeah, I suppose, yeah,", "tokens": [1079, 11, 534, 11, 286, 519, 11, 1338, 11, 570, 291, 483, 257, 1230, 11, 457, 534, 11, 1338, 11, 286, 7297, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 320, "seek": 167736, "start": 1682.9599999999998, "end": 1685.1599999999999, "text": " find the extension request of a linker script.", "tokens": [915, 264, 10320, 5308, 295, 257, 2113, 260, 5755, 13], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 321, "seek": 167736, "start": 1685.1599999999999, "end": 1690.04, "text": " I mean, specify the size of the section to start with, then I know the size.", "tokens": [286, 914, 11, 16500, 264, 2744, 295, 264, 3541, 281, 722, 365, 11, 550, 286, 458, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 322, "seek": 167736, "start": 1690.04, "end": 1693.4799999999998, "text": " Yeah, I think we do have the problem, we do have a problem with things like build ID,", "tokens": [865, 11, 286, 519, 321, 360, 362, 264, 1154, 11, 321, 360, 362, 257, 1154, 365, 721, 411, 1322, 7348, 11], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 323, "seek": 167736, "start": 1693.4799999999998, "end": 1697.9599999999998, "text": " I think at that particular point where you're generating the build ID string, which needs", "tokens": [286, 519, 412, 300, 1729, 935, 689, 291, 434, 17746, 264, 1322, 7348, 6798, 11, 597, 2203], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 324, "seek": 167736, "start": 1697.9599999999998, "end": 1701.52, "text": " to know everything all at once, but yeah, I get, yeah. Unfortunately, there's nothing", "tokens": [281, 458, 1203, 439, 412, 1564, 11, 457, 1338, 11, 286, 483, 11, 1338, 13, 8590, 11, 456, 311, 1825], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 325, "seek": 167736, "start": 1701.52, "end": 1703.52, "text": " in the LLD linker that's different.", "tokens": [294, 264, 441, 23704, 2113, 260, 300, 311, 819, 13], "temperature": 0.0, "avg_logprob": -0.2934943765833758, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.00010642969573382288}, {"id": 326, "seek": 170352, "start": 1703.52, "end": 1708.72, "text": " If someone should try to generate the header for a binary, contain the interest in information,", "tokens": [759, 1580, 820, 853, 281, 8460, 264, 23117, 337, 257, 17434, 11, 5304, 264, 1179, 294, 1589, 11], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 327, "seek": 170352, "start": 1708.72, "end": 1710.72, "text": " then you quickly realize all the problems.", "tokens": [550, 291, 2661, 4325, 439, 264, 2740, 13], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 328, "seek": 170352, "start": 1710.72, "end": 1711.72, "text": " Oh, yep, sure.", "tokens": [876, 11, 18633, 11, 988, 13], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 329, "seek": 170352, "start": 1711.72, "end": 1715.32, "text": " The new assembler has the ink bin, doesn't it?", "tokens": [440, 777, 8438, 1918, 575, 264, 11276, 5171, 11, 1177, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 330, "seek": 170352, "start": 1715.32, "end": 1719.96, "text": " Yes, the assembler does have ink bin, but I think the idea is, for the header, you want", "tokens": [1079, 11, 264, 8438, 1918, 775, 362, 11276, 5171, 11, 457, 286, 519, 264, 1558, 307, 11, 337, 264, 23117, 11, 291, 528], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 331, "seek": 170352, "start": 1719.96, "end": 1724.24, "text": " the linker to generate something based on the properties of something, but...", "tokens": [264, 2113, 260, 281, 8460, 746, 2361, 322, 264, 7221, 295, 746, 11, 457, 485], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 332, "seek": 170352, "start": 1724.24, "end": 1728.48, "text": " You want to generate the information about the link time, not when you assembled it two", "tokens": [509, 528, 281, 8460, 264, 1589, 466, 264, 2113, 565, 11, 406, 562, 291, 24204, 309, 732], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 333, "seek": 170352, "start": 1728.48, "end": 1729.48, "text": " weeks ago.", "tokens": [3259, 2057, 13], "temperature": 0.0, "avg_logprob": -0.2955083610597721, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.0005698116146959364}, {"id": 334, "seek": 172948, "start": 1729.48, "end": 1736.96, "text": " You can assemble, just before the link is done, assemble something that's generated.", "tokens": [509, 393, 22364, 11, 445, 949, 264, 2113, 307, 1096, 11, 22364, 746, 300, 311, 10833, 13], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 335, "seek": 172948, "start": 1736.96, "end": 1742.08, "text": " Even.ovmile, and then link that in using the link script.", "tokens": [2754, 2411, 5179, 76, 794, 11, 293, 550, 2113, 300, 294, 1228, 264, 2113, 5755, 13], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 336, "seek": 172948, "start": 1742.08, "end": 1746.72, "text": " I know there are workarounds, but a good workaround would have to have a good link.", "tokens": [286, 458, 456, 366, 589, 289, 4432, 11, 457, 257, 665, 589, 25762, 576, 362, 281, 362, 257, 665, 2113, 13], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 337, "seek": 172948, "start": 1746.72, "end": 1751.1200000000001, "text": " Yeah, I mean, I think, I mean, a lot of the times with linkers, it's the, because one", "tokens": [865, 11, 286, 914, 11, 286, 519, 11, 286, 914, 11, 257, 688, 295, 264, 1413, 365, 2113, 433, 11, 309, 311, 264, 11, 570, 472], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 338, "seek": 172948, "start": 1751.1200000000001, "end": 1754.92, "text": " of the, one of the perennial things you could ask is, how do I embed some kind of custom", "tokens": [295, 264, 11, 472, 295, 264, 680, 29705, 721, 291, 727, 1029, 307, 11, 577, 360, 286, 12240, 512, 733, 295, 2375], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 339, "seek": 172948, "start": 1754.92, "end": 1758.2, "text": " checksum that I've written at link time, you know, that type of thing?", "tokens": [13834, 449, 300, 286, 600, 3720, 412, 2113, 565, 11, 291, 458, 11, 300, 2010, 295, 551, 30], "temperature": 0.0, "avg_logprob": -0.26405371480913303, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.0002926250745076686}, {"id": 340, "seek": 175820, "start": 1758.2, "end": 1764.24, "text": " And it's just which one, and do you then have a linker Python script extension or plug-in?", "tokens": [400, 309, 311, 445, 597, 472, 11, 293, 360, 291, 550, 362, 257, 2113, 260, 15329, 5755, 10320, 420, 5452, 12, 259, 30], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 341, "seek": 175820, "start": 1764.24, "end": 1765.24, "text": " It just tends to build.", "tokens": [467, 445, 12258, 281, 1322, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 342, "seek": 175820, "start": 1765.24, "end": 1766.24, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 343, "seek": 175820, "start": 1766.24, "end": 1771.24, "text": " Check some afterwards, and that's also something that should be supported in linker.", "tokens": [6881, 512, 10543, 11, 293, 300, 311, 611, 746, 300, 820, 312, 8104, 294, 2113, 260, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 344, "seek": 175820, "start": 1771.24, "end": 1772.24, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 345, "seek": 175820, "start": 1772.24, "end": 1777.04, "text": " And it would be done, just say, run this application afterwards on this section, something like", "tokens": [400, 309, 576, 312, 1096, 11, 445, 584, 11, 1190, 341, 3861, 10543, 322, 341, 3541, 11, 746, 411], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 346, "seek": 175820, "start": 1777.04, "end": 1778.04, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 347, "seek": 175820, "start": 1778.04, "end": 1779.04, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 348, "seek": 175820, "start": 1779.04, "end": 1780.04, "text": " So it's...", "tokens": [407, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 349, "seek": 175820, "start": 1780.04, "end": 1784.04, "text": " Do you do a partial link, and then analyze the object file, then do a final link?", "tokens": [1144, 291, 360, 257, 14641, 2113, 11, 293, 550, 12477, 264, 2657, 3991, 11, 550, 360, 257, 2572, 2113, 30], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 350, "seek": 175820, "start": 1784.04, "end": 1785.04, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 351, "seek": 175820, "start": 1785.04, "end": 1786.04, "text": " I mean, I guess...", "tokens": [286, 914, 11, 286, 2041, 485], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 352, "seek": 175820, "start": 1786.04, "end": 1787.04, "text": " More workarounds.", "tokens": [5048, 589, 289, 4432, 13], "temperature": 0.0, "avg_logprob": -0.3170056550399117, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.0005405988777056336}, {"id": 353, "seek": 178704, "start": 1787.04, "end": 1788.04, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 354, "seek": 178704, "start": 1788.04, "end": 1791.56, "text": " I mean, to paraphrase, I guess, is the tools are supposed to make users' life easier, I", "tokens": [286, 914, 11, 281, 36992, 1703, 651, 11, 286, 2041, 11, 307, 264, 3873, 366, 3442, 281, 652, 5022, 6, 993, 3571, 11, 286], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 355, "seek": 178704, "start": 1791.56, "end": 1792.8, "text": " suppose, at that particular point.", "tokens": [7297, 11, 412, 300, 1729, 935, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 356, "seek": 178704, "start": 1792.8, "end": 1796.56, "text": " So if it's a common enough thing to do, then it should be, they should be able to find", "tokens": [407, 498, 309, 311, 257, 2689, 1547, 551, 281, 360, 11, 550, 309, 820, 312, 11, 436, 820, 312, 1075, 281, 915], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 357, "seek": 178704, "start": 1796.56, "end": 1797.56, "text": " a way of doing it.", "tokens": [257, 636, 295, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 358, "seek": 178704, "start": 1797.56, "end": 1802.0, "text": " And if this is security, then you don't want to generate the checksum in one process, and", "tokens": [400, 498, 341, 307, 3825, 11, 550, 291, 500, 380, 528, 281, 8460, 264, 13834, 449, 294, 472, 1399, 11, 293], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 359, "seek": 178704, "start": 1802.0, "end": 1803.3999999999999, "text": " then use it in the other process.", "tokens": [550, 764, 309, 294, 264, 661, 1399, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 360, "seek": 178704, "start": 1803.3999999999999, "end": 1807.72, "text": " You want to use all in one, because I know who generated this, and it didn't come from", "tokens": [509, 528, 281, 764, 439, 294, 472, 11, 570, 286, 458, 567, 10833, 341, 11, 293, 309, 994, 380, 808, 490], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 361, "seek": 178704, "start": 1807.72, "end": 1808.72, "text": " outside.", "tokens": [2380, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 362, "seek": 178704, "start": 1808.72, "end": 1811.72, "text": " We actually have to have two different programs, and is that the case?", "tokens": [492, 767, 362, 281, 362, 732, 819, 4268, 11, 293, 307, 300, 264, 1389, 30], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 363, "seek": 178704, "start": 1811.72, "end": 1812.72, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 364, "seek": 178704, "start": 1812.72, "end": 1813.72, "text": " So, I wait, so I better go for...", "tokens": [407, 11, 286, 1699, 11, 370, 286, 1101, 352, 337, 485], "temperature": 0.0, "avg_logprob": -0.26883224670044675, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.0002105365856550634}, {"id": 365, "seek": 181372, "start": 1813.72, "end": 1820.72, "text": " Yeah, so I just have a follow-up to that discussion, so I'm not an LFM developer, but I deal with", "tokens": [865, 11, 370, 286, 445, 362, 257, 1524, 12, 1010, 281, 300, 5017, 11, 370, 286, 478, 406, 364, 441, 37, 44, 10754, 11, 457, 286, 2028, 365], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 366, "seek": 181372, "start": 1820.72, "end": 1821.72, "text": " a lot of built-ins.", "tokens": [257, 688, 295, 3094, 12, 1292, 13], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 367, "seek": 181372, "start": 1821.72, "end": 1824.72, "text": " Does anyone working on stuff to make things a bit better, this sort of thing?", "tokens": [4402, 2878, 1364, 322, 1507, 281, 652, 721, 257, 857, 1101, 11, 341, 1333, 295, 551, 30], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 368, "seek": 181372, "start": 1824.72, "end": 1827.72, "text": " Because essentially, like, you're talking about communicating between the file stage", "tokens": [1436, 4476, 11, 411, 11, 291, 434, 1417, 466, 17559, 1296, 264, 3991, 3233], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 369, "seek": 181372, "start": 1827.72, "end": 1832.72, "text": " and the link stage, and introducing dependencies to what you have, and that you have to link", "tokens": [293, 264, 2113, 3233, 11, 293, 15424, 36606, 281, 437, 291, 362, 11, 293, 300, 291, 362, 281, 2113], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 370, "seek": 181372, "start": 1832.72, "end": 1833.72, "text": " with after that.", "tokens": [365, 934, 300, 13], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 371, "seek": 181372, "start": 1833.72, "end": 1834.72, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 372, "seek": 181372, "start": 1834.72, "end": 1838.72, "text": " And now, like, it seems like you need, like, a schema, a data format, and a dependency specification", "tokens": [400, 586, 11, 411, 11, 309, 2544, 411, 291, 643, 11, 411, 11, 257, 34078, 11, 257, 1412, 7877, 11, 293, 257, 33621, 31256], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 373, "seek": 181372, "start": 1838.72, "end": 1842.72, "text": " for that, so the built systems could actually use it, and spare the users who have to deal", "tokens": [337, 300, 11, 370, 264, 3094, 3652, 727, 767, 764, 309, 11, 293, 13798, 264, 5022, 567, 362, 281, 2028], "temperature": 0.0, "avg_logprob": -0.4116444003197455, "compression_ratio": 1.7323529411764707, "no_speech_prob": 0.0019081274513155222}, {"id": 374, "seek": 184272, "start": 1842.72, "end": 1843.72, "text": " with that.", "tokens": [365, 300, 13], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 375, "seek": 184272, "start": 1843.72, "end": 1844.72, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 376, "seek": 184272, "start": 1844.72, "end": 1852.72, "text": " I mean, I think that the big...", "tokens": [286, 914, 11, 286, 519, 300, 264, 955, 485], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 377, "seek": 184272, "start": 1852.72, "end": 1857.4, "text": " I say it's mostly a, what I would call, almost a coordination problem between getting the", "tokens": [286, 584, 309, 311, 5240, 257, 11, 437, 286, 576, 818, 11, 1920, 257, 21252, 1154, 1296, 1242, 264], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 378, "seek": 184272, "start": 1857.4, "end": 1860.72, "text": " right people on board at that particular point, and it's...", "tokens": [558, 561, 322, 3150, 412, 300, 1729, 935, 11, 293, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 379, "seek": 184272, "start": 1860.72, "end": 1861.72, "text": " So it's quite...", "tokens": [407, 309, 311, 1596, 485], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 380, "seek": 184272, "start": 1861.72, "end": 1862.72, "text": " Can you repeat the question?", "tokens": [1664, 291, 7149, 264, 1168, 30], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 381, "seek": 184272, "start": 1862.72, "end": 1863.72, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 382, "seek": 184272, "start": 1863.72, "end": 1864.72, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 383, "seek": 184272, "start": 1864.72, "end": 1865.72, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 384, "seek": 184272, "start": 1865.72, "end": 1871.72, "text": " So the question was about, is anybody working on build systems and things that they will", "tokens": [407, 264, 1168, 390, 466, 11, 307, 4472, 1364, 322, 1322, 3652, 293, 721, 300, 436, 486], "temperature": 0.0, "avg_logprob": -0.28293536259577823, "compression_ratio": 1.5530973451327434, "no_speech_prob": 0.0001568376610521227}, {"id": 385, "seek": 187172, "start": 1871.72, "end": 1873.72, "text": " be able to communicate the...", "tokens": [312, 1075, 281, 7890, 264, 485], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 386, "seek": 187172, "start": 1873.72, "end": 1876.96, "text": " Of the linker to be able to communicate to the build system and automate things like the", "tokens": [2720, 264, 2113, 260, 281, 312, 1075, 281, 7890, 281, 264, 1322, 1185, 293, 31605, 721, 411, 264], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 387, "seek": 187172, "start": 1876.96, "end": 1879.72, "text": " checksome sort of handling and that type of thing.", "tokens": [13834, 423, 1333, 295, 13175, 293, 300, 2010, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 388, "seek": 187172, "start": 1879.72, "end": 1886.16, "text": " I mean, I think the major difficulty is just an LVM is an open source project, and there's", "tokens": [286, 914, 11, 286, 519, 264, 2563, 10360, 307, 445, 364, 441, 53, 44, 307, 364, 1269, 4009, 1716, 11, 293, 456, 311], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 389, "seek": 187172, "start": 1886.16, "end": 1890.76, "text": " often, as soon as you open something like that up, it ends up in lots and lots of discussions", "tokens": [2049, 11, 382, 2321, 382, 291, 1269, 746, 411, 300, 493, 11, 309, 5314, 493, 294, 3195, 293, 3195, 295, 11088], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 390, "seek": 187172, "start": 1890.76, "end": 1894.92, "text": " about what the right way, and you can easily find a way that works for one, a small number", "tokens": [466, 437, 264, 558, 636, 11, 293, 291, 393, 3612, 915, 257, 636, 300, 1985, 337, 472, 11, 257, 1359, 1230], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 391, "seek": 187172, "start": 1894.92, "end": 1899.84, "text": " of people, but completely doesn't work for someone else, so it's one of those...", "tokens": [295, 561, 11, 457, 2584, 1177, 380, 589, 337, 1580, 1646, 11, 370, 309, 311, 472, 295, 729, 485], "temperature": 0.0, "avg_logprob": -0.1758730994330512, "compression_ratio": 1.7651006711409396, "no_speech_prob": 1.183223594125593e-05}, {"id": 392, "seek": 189984, "start": 1899.84, "end": 1903.3999999999999, "text": " It first of all needs someone brave enough to actually try it rather than just implementing", "tokens": [467, 700, 295, 439, 2203, 1580, 12653, 1547, 281, 767, 853, 309, 2831, 813, 445, 18114], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 393, "seek": 189984, "start": 1903.3999999999999, "end": 1904.56, "text": " it downstream.", "tokens": [309, 30621, 13], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 394, "seek": 189984, "start": 1904.56, "end": 1905.56, "text": " So I think it's...", "tokens": [407, 286, 519, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 395, "seek": 189984, "start": 1905.56, "end": 1910.9599999999998, "text": " What it really needs in this case is, because this is sort of things that...", "tokens": [708, 309, 534, 2203, 294, 341, 1389, 307, 11, 570, 341, 307, 1333, 295, 721, 300, 485], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 396, "seek": 189984, "start": 1910.9599999999998, "end": 1912.6399999999999, "text": " This is not...", "tokens": [639, 307, 406, 485], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 397, "seek": 189984, "start": 1912.6399999999999, "end": 1916.56, "text": " It really needs people to go on the LVM mailing list and say, yes, we really need this, because", "tokens": [467, 534, 2203, 561, 281, 352, 322, 264, 441, 53, 44, 41612, 1329, 293, 584, 11, 2086, 11, 321, 534, 643, 341, 11, 570], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 398, "seek": 189984, "start": 1916.56, "end": 1920.6399999999999, "text": " typically this sort of thing is to silent people who say, oh, this stuff's all rubbish,", "tokens": [5850, 341, 1333, 295, 551, 307, 281, 12784, 561, 567, 584, 11, 1954, 11, 341, 1507, 311, 439, 29978, 11], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 399, "seek": 189984, "start": 1920.6399999999999, "end": 1921.6399999999999, "text": " but we don't...", "tokens": [457, 321, 500, 380, 485], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 400, "seek": 189984, "start": 1921.6399999999999, "end": 1925.4399999999998, "text": " As developers, we don't get to hear about it, or at least we don't get to hear it loud", "tokens": [1018, 8849, 11, 321, 500, 380, 483, 281, 1568, 466, 309, 11, 420, 412, 1935, 321, 500, 380, 483, 281, 1568, 309, 6588], "temperature": 0.0, "avg_logprob": -0.1487754047780797, "compression_ratio": 1.8194945848375452, "no_speech_prob": 1.6518368283868767e-05}, {"id": 401, "seek": 192544, "start": 1925.44, "end": 1930.44, "text": " enough for the people who pay our wages to say go and work on it.", "tokens": [1547, 337, 264, 561, 567, 1689, 527, 20097, 281, 584, 352, 293, 589, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.36072086838056455, "compression_ratio": 1.3125, "no_speech_prob": 0.00012053897808073089}, {"id": 402, "seek": 192544, "start": 1930.44, "end": 1931.44, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.36072086838056455, "compression_ratio": 1.3125, "no_speech_prob": 0.00012053897808073089}, {"id": 403, "seek": 192544, "start": 1931.44, "end": 1933.44, "text": " Right, yeah.", "tokens": [1779, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.36072086838056455, "compression_ratio": 1.3125, "no_speech_prob": 0.00012053897808073089}, {"id": 404, "seek": 192544, "start": 1933.44, "end": 1943.4, "text": " Okay, I probably ought to hold it there to let everyone go, I think, at that point.", "tokens": [1033, 11, 286, 1391, 13416, 281, 1797, 309, 456, 281, 718, 1518, 352, 11, 286, 519, 11, 412, 300, 935, 13], "temperature": 0.0, "avg_logprob": -0.36072086838056455, "compression_ratio": 1.3125, "no_speech_prob": 0.00012053897808073089}, {"id": 405, "seek": 194340, "start": 1943.4, "end": 1956.72, "text": " Thank you very much for staying and I'll see you all next time.", "tokens": [50364, 1044, 291, 588, 709, 337, 7939, 293, 286, 603, 536, 291, 439, 958, 565, 13, 51030], "temperature": 0.0, "avg_logprob": -0.6696835623847114, "compression_ratio": 0.9545454545454546, "no_speech_prob": 4.668099063565023e-05}], "language": "en"}