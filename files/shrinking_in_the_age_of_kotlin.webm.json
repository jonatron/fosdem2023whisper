{"text": " So, let's get started with the next session, and it seems like we're going to talk about making smaller apps with James Hamilton and talk shrinking in the age of Kotlin. Please welcome. Thank you. Okay, so we're going to talk today not just about Kotlin, but about shrinkers as well. So first off, who am I? My name's James. I'm a software engineer at Guard Square. You might know products such as ProGuard and DexGuard, so we built these products. So mostly I work on things like mobile security, Java bytecode, dialogue bytecode, code analysis, obfuscation, and these kind of things, mostly on ProGuard and DexGuard. Previously, I worked for a few years on something completely different on control systems at CERN, and before that I did a PhD in code analysis and metrics. So first, let's talk about what is shrinking. So if you're Android developer, you might produce APKs. If you're non-mobile developer, you might have, you might produce jars, and you would probably want to keep these as small as possible, especially in mobile because of the limitations on resources, the small amount of storage on the devices, or maybe the users are paying per megabytes, something like that, so you want to keep these things as small as possible. And so to do that, we want something that can shrink these. So if you are already an Android developer, you might know then ProGuard, for example, R8, Redex, or YGuard is another one. So these are all Java bytecode and Dalvik bytecode shrinkers. Just a small disclaimer that this is not a shrinker tutorial, I'm not going to teach you how to configure ProGuard, I'm not going to fix your keep rules today. And it's also not a sales pitch for shrinker, I'm not going to sell you ProGuard, I'm not going to tell you that you should use ProGuard over R8 or something like that. So if it's not a sales pitch and it's not a tutorial, what am I going to talk about today? So I want to basically answer a few questions. How does a shrinker process to Kotlin generate a code? And to help answer that one, we need to know something about the differences between the Java classes and the Kotlin classes. And then I want to show you a bit about how you can build tools to analyze and modify Kotlin classes. So first off, let's just talk a little bit about a very high level about how does a shrinker work. So there are normally three broad categories of shrinking. First one is tree shaking, code optimization, and name obfuscation. So tree shaking, if you think of your app as a tree of all the reachable codes, so you start at the roots of the app, for example, in Java or Kotlin, you start at the main method and you follow all the references that you can find, you build a graph from that and then you shake this tree and all of the non-use stuff falls away. So just like if you shake an apple tree, the apples are going to fall out, all of your unused code is going to fall away. So this is especially useful, for example, with libraries. So as an app developer, you might use a bunch of different libraries. Those libraries might use libraries, and those libraries might use libraries, but you might just want a few features, but all of that code gets pulled into your app. So you can use a shrinker to remove, to do tree shaking on that and remove unused classes, methods, fields, for example. And then another shrinking technique, code optimization, so tree shaking was all about removing the bigger entities, the classes, methods, and code optimization is really about the byte code. So for example, if an optimizer can tell that some path is always going to be taken, then we can remove some of the code. And the last one I want to talk about is name obfuscation. So this is about making the strings smaller. So if you're an enterprise Java developer, you might have some class names like this. More characters means more bytes. So if we just rename this to a single character, it's going to take up less space. Just a small side note here, which could make up a whole presentation on its own. Name obfuscation on its own is not security, but I won't talk about that more today if you want to discuss that more later. I'd be happy to, but today I want to focus on shrinking. So why am I talking about shrinkers in the Kotlin Dev Room? Why is the presentation called in the age of Kotlin? So the Kotlin compiler generates Java classes just like the Java compiler. So isn't it all just Java byte code? Why is there a difference? So let's take a look at a very simple example. So let's look at the Hello World in Java, Hello World in Kotlin. We will use the Java P-Tool to print out the disassembly of the class file. And let's see what the difference is. So it doesn't matter the exact content here, but right away you can see that on the right side, the Kotlin side is longer. So what do we have here? We have some header, which is basically the same. So that's not very interesting. We have a constant pull. We already see here that there are more constants used in the Kotlin class. On the Java side, we have an extra constructor which doesn't appear in the Kotlin side. And that's because actually, in this example, there is no class here. So this main is in the top level of the file. There's no class here. So from the Kotlin point of view, you cannot instantiate this generated Java class file. And then we have a main method. And actually, on the Kotlin side, we have two methods because I declared the methods without the args parameters. So actually, the Kotlin compiler generates two, and one will call the other one. And then at the bottom here, which is going to be most of the focus of this talk, is the Kotlin metadata. And why do we need this extra metadata that we saw in the class file here? So let's look at a very simple example. If you have a data class in Kotlin, data classes don't exist in Java. So when you compile this to a Java class file, you get a Java class. There's no indication here that it was a data class. Another example with context receivers. So if you have context receivers in Kotlin, when you compile this to Java bytecode, you will have a Java function which looks something like this, or your context receivers will end up as the first parameters of your method. So if you're just looking at this from a Java class file point of view, how do you know that the first parameters are context receivers and not just any other context receivers and not any other parameters? And then there are many other things encoded in the metadata, for example nullability, type aliases, and a lot more. And so this is a big problem for code that inspects the Kotlin code. So for example, using reflection, for example the compiler, for example IDE, all of these tools need to know that a class is a data class, for example. And how is this metadata encoded? Let's have a look again at the Java P output and zoom in on the metadata. So if we zoom in a bit, we see that it's actually just a Java annotation. So I say just in quotes because inside that annotation is a bit more complicated, it has to be decoded, but it is a Java annotation. So since it's just an annotation, we can actually see the source code. So you can find the source code on GitHub. There are a bunch of different fields in the annotation. One of them, the first one is the kind. So we saw already that the main function, the small example that I gave with the main function at the beginning, there was no class. So actually this is a file kind, not a class kind. There was also a version here. And there are some two fields where the actual metadata is stored in a binary format and strings that are referenced by the metadata stored. And then there are some other fields here with some strings and some bit flags. Okay, so that's what metadata is, why we need metadata. But why am I talking about shrinking? What then is the problem with shrinking coddling code? So one of the most basic problems here is that there is an annotation. So if your shrinker or the user who is configuring the shrinker does not tell the shrinker that it needs this annotation, typically this annotation is not used directly by the program. So when you do your tree shaking, you won't see that it's used. And then it can just be removed. But then it's just going to be a normal Java class again. So either your shrinker needs to know about coddling or you need to configure it to keep the annotation. Another simple example is if you start renaming stuff in the Java classes. So if you rename the class, if you rename the methods, then you see in this example here that's actually in the metadata still refers to all of the old names. And then if you are removing methods because they're unused, well, there's also information about these functions from the coddling point of view in the metadata. So if you remove it from the Java part, it's still going to be in the coddling metadata unless your shrinker knows about coddling metadata. So as I mentioned, I work on ProGuard, I work on DexGuard. And both of these process coddling metadata in the same way. So let's have a look at how that actually works. So it's a very high level. We have a textual representation of the metadata here. So for example, there's a Java class. It has some metadata attached. There is a function there. And you'll see in the metadata part, there is a link. So for the class, there's attached metadata. And then you'll see also that the function in the coddling metadata points to an actual Java bytecode, a Java method. And then the metadata doesn't contain any of the actual bytecode. The bytecode is in the Java method. So there are two basic rules here that if the Java part is renamed, rename the coddling parts. And if the Java part is unused, remove the coddling part. So for example, if you rename the method sum here, you should also rename the function in the metadata. If you remove the method, you should also remove the function in the metadata. And at a high level, that's two of the basic rules that ProGuard follows when processing the metadata. There are a lot of details around that, but at a high level, that's what's happening. So how is this implemented? So we have an open source project, which is separate from ProGuard called ProGuard Core. But it was born out of the ProGuard project. So basically, it's extracted from the ProGuard project. A lot of the bytecode manipulation and analysis. So for example, you can read and write Java class files and coddling files. And you can modify, generate and analyze code. And importantly for this talk, you can inspect and modify coddling metadata. And this actually is powered by the Kotlin X metadata library, which is developed by JetBrains. So we don't actually need to dive deep into the actual parsing of what's in this annotation. So JetBrains does that for us. We take advantage of the library to be able to load the data from the annotation, manipulate it and then write it back again. And there's also the big advantage in that, for example, with versioning from the ProGuard Core point of view, we don't really care about the version of the metadata that we need to parse different versions in different waves. That is delegated to the JetBrains library. So how can we use ProGuard Core to read and modify coddling metadata? So let's have a look at an example. So I was thinking about doing a live demo here, but I practiced yesterday and there was IntelliJ problems and stuff, so I decided to make some slides instead. So basically what you can do is you can create, for example, a new Gradle project, add dependency on ProGuard Core, and then you'll be able to use the features to modify the metadata. So let's have a look at an example of what kind of code you can write. So let's say we've created a new project in IntelliJ, we added a dependency on ProGuard Core, and we have just a main function. We have a file called main, we have the main function, and we want to read some coddling, so we want to read some Java class file that was generated by the coddling compiler and look at the metadata. So let's try reading the metadata from this class that we're writing. So once it's compiled, it's going to end up somewhere here in the build folder. Let's read it back in and then see what metadata is there. So we can use a small utility function to be able to read in class files. It will read in the class file and it will initialize the coddling metadata. It will put that class file into a container called a program class pool. Once we've done that, we should initialize all the cross references, and this is quite an important concept in ProGuard Core, like for example, the references to the super classes, so you have the whole hierarchy references between classes with the method calls. So that's the important step after you've loaded in the class initializer references. And once you've done that, you now have access to the coddling metadata. So what we can do is we can visit all of the classes that are loaded into the class pool, we can visit all of their metadata, and within that metadata we can visit all of the functions, and then we can, for example, print out the function name. And know that this is not printing out the method name of the Java method, this is printing out the function name that is in the metadata. So if we run this, we will see some output here. So we've run the input to this program is this program itself, so there is one function, and so it prints out the main. If we add another function, we run it again, it will print through and main. But we can't just, we can't only just read metadata, we can also modify metadata and we can also modify the Java parts of the class file. So let's say that our shrinker wants to rename a method to some other name. So let's visit all of the methods in the class, let's rename it. If it's called foo already, let's rename it to new foo, otherwise we just keep the original name. And know that now that we've renamed the Java component, and now the metadata is out of sync. So how do we fix that? Well, what we can do is we can visit the metadata, we can then look at the reference where the metadata points to the Java method, and then we can set the name. But actually there is a utility in Progo Core which can do that for you, the class reference fixer that will fix up all the names after you've renamed stuff. Once we've done that, we need to write the metadata back into the annotation. So we use a Kotlin metadata writer for that. And once we've done that, we can write out the class to overwrite the original file. So if we open the file now in the IntelliJ decompiler, we see that the function is now called new foo. So what's important here is that we've renamed the Java component, the method where the bytecode actually lives, and also the Kotlin metadata. If you want to learn more about Progo Core, if you want to start modifying Kotlin metadata yourself, or if you want to build tools that modify Kotlin metadata, good place to start is the manual. If you just want to look at metadata, you can check out our Kotlin metadata printer projects. It will take in APK, or JAR file, or class file as input, and show you all the metadata. This is actually built into the Progo Playground web service as well, so you can upload a JAR for there, and it will just show you the Kotlin metadata. And as I mentioned before, the Progo Core metadata support is built on top of the Kotlin metadata library from JetBrains, so you don't need to use Progo Core to use that library, so you can also check that out as well. If you have any questions, I'll be happy to answer. You can also contact me via Twitter, or Twitter, I'm also on LinkedIn as well, if you have any questions later. Thank you. Awesome. We do have five minutes for questions from the audience. So, yeah, please just shout it. Most, yeah, so if you're just... Okay, so the question is, can you throw away metadata if you're developing an app? So not a library. In a lot of cases, yes, unless you're using reflection. And reflection is quite popular. So if you don't use reflection, you're not making a library, you can probably get rid of a lot of metadata. But then reflection is a big problem now. Do you have an idea of the size of the metadata in a typical Kotlin JAR? How much bigger is it compared to the same results? I don't have any numbers here, but basically all of the header information for all of the functions except the actual bytecode is encoded in the metadata. It's huge. So it can be quite big. There is some sharing, because there is a user in the metadata annotation, there's a strings array. So actually, those strings are shared with other strings because they're part of the constant pool. So that saves space, but it can be a lot. And if you're developing an app which doesn't use reflection, then maybe you can just remove all of it. Yes. Can you also remove the methods, not only the classes, just from the libraries, but initially part of the classes? Yeah, yeah. So the question was, with tree shaking, can you remove methods, not just classes? So the tree shaking normally will remove entities in the app, for example, classes, but also methods can be removed, fields can be removed. In mining as well? Yes. So this is more, at least in ProGuard, the inlining is more of the optimizer's job. So some things can be inlined, and then the methods, the original method can then be removed. Also, for Java class files, attributes can be removed if they're not used. And for ProGuard, the dead code is part of the optimizer's job. And then once you remove that code, you can also run the tree shaking step again and then start removing unused methods, fields, and classes that just became unused because you optimized. How does this affect the debugging? So the question is, how does it affect the debugging? But what exactly? So we modified the byte code and the source code to make the previous version, so it doesn't really match the original version. So we manipulated the byte code and renamed the original functions to others and our source code remains the original. Okay, so when you rename everything, then how does this affect debugging? How do you get a stack trace from some crash or something? So ProGuard will generate a mapping file which maps from the original names to the new names. And this mapping file is also used by R8 as well. It's the same mapping file, and this is also supported by services like Crashlytics. So the mapping file will be uploaded to Crashlytics, for example, and if you see crashes from customers, it will be automated.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.24, "text": " So, let's get started with the next session, and it seems like we're going to talk about", "tokens": [50364, 407, 11, 718, 311, 483, 1409, 365, 264, 958, 5481, 11, 293, 309, 2544, 411, 321, 434, 516, 281, 751, 466, 50926], "temperature": 0.0, "avg_logprob": -0.30334537434128095, "compression_ratio": 1.3706293706293706, "no_speech_prob": 0.3747706413269043}, {"id": 1, "seek": 0, "start": 11.24, "end": 18.72, "text": " making smaller apps with James Hamilton and talk shrinking in the age of Kotlin.", "tokens": [50926, 1455, 4356, 7733, 365, 5678, 18484, 293, 751, 41684, 294, 264, 3205, 295, 30123, 5045, 13, 51300], "temperature": 0.0, "avg_logprob": -0.30334537434128095, "compression_ratio": 1.3706293706293706, "no_speech_prob": 0.3747706413269043}, {"id": 2, "seek": 0, "start": 18.72, "end": 19.72, "text": " Please welcome.", "tokens": [51300, 2555, 2928, 13, 51350], "temperature": 0.0, "avg_logprob": -0.30334537434128095, "compression_ratio": 1.3706293706293706, "no_speech_prob": 0.3747706413269043}, {"id": 3, "seek": 0, "start": 19.72, "end": 20.72, "text": " Thank you.", "tokens": [51350, 1044, 291, 13, 51400], "temperature": 0.0, "avg_logprob": -0.30334537434128095, "compression_ratio": 1.3706293706293706, "no_speech_prob": 0.3747706413269043}, {"id": 4, "seek": 2072, "start": 20.72, "end": 31.36, "text": " Okay, so we're going to talk today not just about Kotlin, but about shrinkers as well.", "tokens": [50364, 1033, 11, 370, 321, 434, 516, 281, 751, 965, 406, 445, 466, 30123, 5045, 11, 457, 466, 23060, 433, 382, 731, 13, 50896], "temperature": 0.0, "avg_logprob": -0.25433835116299713, "compression_ratio": 1.3715846994535519, "no_speech_prob": 0.028435716405510902}, {"id": 5, "seek": 2072, "start": 31.36, "end": 34.28, "text": " So first off, who am I?", "tokens": [50896, 407, 700, 766, 11, 567, 669, 286, 30, 51042], "temperature": 0.0, "avg_logprob": -0.25433835116299713, "compression_ratio": 1.3715846994535519, "no_speech_prob": 0.028435716405510902}, {"id": 6, "seek": 2072, "start": 34.28, "end": 35.78, "text": " My name's James.", "tokens": [51042, 1222, 1315, 311, 5678, 13, 51117], "temperature": 0.0, "avg_logprob": -0.25433835116299713, "compression_ratio": 1.3715846994535519, "no_speech_prob": 0.028435716405510902}, {"id": 7, "seek": 2072, "start": 35.78, "end": 38.28, "text": " I'm a software engineer at Guard Square.", "tokens": [51117, 286, 478, 257, 4722, 11403, 412, 11549, 16463, 13, 51242], "temperature": 0.0, "avg_logprob": -0.25433835116299713, "compression_ratio": 1.3715846994535519, "no_speech_prob": 0.028435716405510902}, {"id": 8, "seek": 2072, "start": 38.28, "end": 44.04, "text": " You might know products such as ProGuard and DexGuard, so we built these products.", "tokens": [51242, 509, 1062, 458, 3383, 1270, 382, 1705, 38, 16981, 293, 1346, 87, 38, 16981, 11, 370, 321, 3094, 613, 3383, 13, 51530], "temperature": 0.0, "avg_logprob": -0.25433835116299713, "compression_ratio": 1.3715846994535519, "no_speech_prob": 0.028435716405510902}, {"id": 9, "seek": 4404, "start": 44.04, "end": 51.48, "text": " So mostly I work on things like mobile security, Java bytecode, dialogue bytecode, code analysis,", "tokens": [50364, 407, 5240, 286, 589, 322, 721, 411, 6013, 3825, 11, 10745, 40846, 22332, 11, 10221, 40846, 22332, 11, 3089, 5215, 11, 50736], "temperature": 0.0, "avg_logprob": -0.2609077941539676, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.016037503257393837}, {"id": 10, "seek": 4404, "start": 51.48, "end": 58.6, "text": " obfuscation, and these kind of things, mostly on ProGuard and DexGuard.", "tokens": [50736, 1111, 69, 32601, 399, 11, 293, 613, 733, 295, 721, 11, 5240, 322, 1705, 38, 16981, 293, 1346, 87, 38, 16981, 13, 51092], "temperature": 0.0, "avg_logprob": -0.2609077941539676, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.016037503257393837}, {"id": 11, "seek": 4404, "start": 58.6, "end": 64.03999999999999, "text": " Previously, I worked for a few years on something completely different on control systems at", "tokens": [51092, 33606, 11, 286, 2732, 337, 257, 1326, 924, 322, 746, 2584, 819, 322, 1969, 3652, 412, 51364], "temperature": 0.0, "avg_logprob": -0.2609077941539676, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.016037503257393837}, {"id": 12, "seek": 4404, "start": 64.03999999999999, "end": 71.8, "text": " CERN, and before that I did a PhD in code analysis and metrics.", "tokens": [51364, 383, 1598, 45, 11, 293, 949, 300, 286, 630, 257, 14476, 294, 3089, 5215, 293, 16367, 13, 51752], "temperature": 0.0, "avg_logprob": -0.2609077941539676, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.016037503257393837}, {"id": 13, "seek": 7180, "start": 71.8, "end": 77.36, "text": " So first, let's talk about what is shrinking.", "tokens": [50364, 407, 700, 11, 718, 311, 751, 466, 437, 307, 41684, 13, 50642], "temperature": 0.0, "avg_logprob": -0.20983710354321625, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.010393807664513588}, {"id": 14, "seek": 7180, "start": 77.36, "end": 83.56, "text": " So if you're Android developer, you might produce APKs.", "tokens": [50642, 407, 498, 291, 434, 8853, 10754, 11, 291, 1062, 5258, 5372, 42, 82, 13, 50952], "temperature": 0.0, "avg_logprob": -0.20983710354321625, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.010393807664513588}, {"id": 15, "seek": 7180, "start": 83.56, "end": 90.75999999999999, "text": " If you're non-mobile developer, you might have, you might produce jars, and you would", "tokens": [50952, 759, 291, 434, 2107, 12, 76, 13632, 10754, 11, 291, 1062, 362, 11, 291, 1062, 5258, 38239, 11, 293, 291, 576, 51312], "temperature": 0.0, "avg_logprob": -0.20983710354321625, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.010393807664513588}, {"id": 16, "seek": 7180, "start": 90.75999999999999, "end": 95.88, "text": " probably want to keep these as small as possible, especially in mobile because of the limitations", "tokens": [51312, 1391, 528, 281, 1066, 613, 382, 1359, 382, 1944, 11, 2318, 294, 6013, 570, 295, 264, 15705, 51568], "temperature": 0.0, "avg_logprob": -0.20983710354321625, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.010393807664513588}, {"id": 17, "seek": 9588, "start": 95.88, "end": 103.11999999999999, "text": " on resources, the small amount of storage on the devices, or maybe the users are paying", "tokens": [50364, 322, 3593, 11, 264, 1359, 2372, 295, 6725, 322, 264, 5759, 11, 420, 1310, 264, 5022, 366, 6229, 50726], "temperature": 0.0, "avg_logprob": -0.1903551062759088, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.04299253970384598}, {"id": 18, "seek": 9588, "start": 103.11999999999999, "end": 109.39999999999999, "text": " per megabytes, something like that, so you want to keep these things as small as possible.", "tokens": [50726, 680, 10816, 24538, 11, 746, 411, 300, 11, 370, 291, 528, 281, 1066, 613, 721, 382, 1359, 382, 1944, 13, 51040], "temperature": 0.0, "avg_logprob": -0.1903551062759088, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.04299253970384598}, {"id": 19, "seek": 9588, "start": 109.39999999999999, "end": 112.03999999999999, "text": " And so to do that, we want something that can shrink these.", "tokens": [51040, 400, 370, 281, 360, 300, 11, 321, 528, 746, 300, 393, 23060, 613, 13, 51172], "temperature": 0.0, "avg_logprob": -0.1903551062759088, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.04299253970384598}, {"id": 20, "seek": 9588, "start": 112.03999999999999, "end": 118.36, "text": " So if you are already an Android developer, you might know then ProGuard, for example,", "tokens": [51172, 407, 498, 291, 366, 1217, 364, 8853, 10754, 11, 291, 1062, 458, 550, 1705, 38, 16981, 11, 337, 1365, 11, 51488], "temperature": 0.0, "avg_logprob": -0.1903551062759088, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.04299253970384598}, {"id": 21, "seek": 9588, "start": 118.36, "end": 123.24, "text": " R8, Redex, or YGuard is another one.", "tokens": [51488, 497, 23, 11, 4477, 3121, 11, 420, 398, 38, 16981, 307, 1071, 472, 13, 51732], "temperature": 0.0, "avg_logprob": -0.1903551062759088, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.04299253970384598}, {"id": 22, "seek": 12324, "start": 123.24, "end": 129.96, "text": " So these are all Java bytecode and Dalvik bytecode shrinkers.", "tokens": [50364, 407, 613, 366, 439, 10745, 40846, 22332, 293, 17357, 42252, 40846, 22332, 23060, 433, 13, 50700], "temperature": 0.0, "avg_logprob": -0.13039913177490234, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.05107058212161064}, {"id": 23, "seek": 12324, "start": 129.96, "end": 134.6, "text": " Just a small disclaimer that this is not a shrinker tutorial, I'm not going to teach", "tokens": [50700, 1449, 257, 1359, 40896, 300, 341, 307, 406, 257, 23060, 260, 7073, 11, 286, 478, 406, 516, 281, 2924, 50932], "temperature": 0.0, "avg_logprob": -0.13039913177490234, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.05107058212161064}, {"id": 24, "seek": 12324, "start": 134.6, "end": 140.92, "text": " you how to configure ProGuard, I'm not going to fix your keep rules today.", "tokens": [50932, 291, 577, 281, 22162, 1705, 38, 16981, 11, 286, 478, 406, 516, 281, 3191, 428, 1066, 4474, 965, 13, 51248], "temperature": 0.0, "avg_logprob": -0.13039913177490234, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.05107058212161064}, {"id": 25, "seek": 12324, "start": 140.92, "end": 146.68, "text": " And it's also not a sales pitch for shrinker, I'm not going to sell you ProGuard, I'm not", "tokens": [51248, 400, 309, 311, 611, 406, 257, 5763, 7293, 337, 23060, 260, 11, 286, 478, 406, 516, 281, 3607, 291, 1705, 38, 16981, 11, 286, 478, 406, 51536], "temperature": 0.0, "avg_logprob": -0.13039913177490234, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.05107058212161064}, {"id": 26, "seek": 12324, "start": 146.68, "end": 151.51999999999998, "text": " going to tell you that you should use ProGuard over R8 or something like that.", "tokens": [51536, 516, 281, 980, 291, 300, 291, 820, 764, 1705, 38, 16981, 670, 497, 23, 420, 746, 411, 300, 13, 51778], "temperature": 0.0, "avg_logprob": -0.13039913177490234, "compression_ratio": 1.7808219178082192, "no_speech_prob": 0.05107058212161064}, {"id": 27, "seek": 15152, "start": 151.60000000000002, "end": 159.8, "text": " So if it's not a sales pitch and it's not a tutorial, what am I going to talk about today?", "tokens": [50368, 407, 498, 309, 311, 406, 257, 5763, 7293, 293, 309, 311, 406, 257, 7073, 11, 437, 669, 286, 516, 281, 751, 466, 965, 30, 50778], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 28, "seek": 15152, "start": 159.8, "end": 163.72, "text": " So I want to basically answer a few questions.", "tokens": [50778, 407, 286, 528, 281, 1936, 1867, 257, 1326, 1651, 13, 50974], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 29, "seek": 15152, "start": 163.72, "end": 167.32000000000002, "text": " How does a shrinker process to Kotlin generate a code?", "tokens": [50974, 1012, 775, 257, 23060, 260, 1399, 281, 30123, 5045, 8460, 257, 3089, 30, 51154], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 30, "seek": 15152, "start": 167.32000000000002, "end": 170.76000000000002, "text": " And to help answer that one, we need to know something about the differences between the", "tokens": [51154, 400, 281, 854, 1867, 300, 472, 11, 321, 643, 281, 458, 746, 466, 264, 7300, 1296, 264, 51326], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 31, "seek": 15152, "start": 170.76000000000002, "end": 174.84, "text": " Java classes and the Kotlin classes.", "tokens": [51326, 10745, 5359, 293, 264, 30123, 5045, 5359, 13, 51530], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 32, "seek": 15152, "start": 174.84, "end": 178.56, "text": " And then I want to show you a bit about how you can build tools to analyze and modify", "tokens": [51530, 400, 550, 286, 528, 281, 855, 291, 257, 857, 466, 577, 291, 393, 1322, 3873, 281, 12477, 293, 16927, 51716], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 33, "seek": 15152, "start": 178.56, "end": 180.96, "text": " Kotlin classes.", "tokens": [51716, 30123, 5045, 5359, 13, 51836], "temperature": 0.0, "avg_logprob": -0.14710481317193658, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.03817398101091385}, {"id": 34, "seek": 18096, "start": 181.0, "end": 184.72, "text": " So first off, let's just talk a little bit about a very high level about how does a shrinker", "tokens": [50366, 407, 700, 766, 11, 718, 311, 445, 751, 257, 707, 857, 466, 257, 588, 1090, 1496, 466, 577, 775, 257, 23060, 260, 50552], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 35, "seek": 18096, "start": 184.72, "end": 186.92000000000002, "text": " work.", "tokens": [50552, 589, 13, 50662], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 36, "seek": 18096, "start": 186.92000000000002, "end": 192.12, "text": " So there are normally three broad categories of shrinking.", "tokens": [50662, 407, 456, 366, 5646, 1045, 4152, 10479, 295, 41684, 13, 50922], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 37, "seek": 18096, "start": 192.12, "end": 198.16, "text": " First one is tree shaking, code optimization, and name obfuscation.", "tokens": [50922, 2386, 472, 307, 4230, 15415, 11, 3089, 19618, 11, 293, 1315, 1111, 69, 32601, 399, 13, 51224], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 38, "seek": 18096, "start": 198.16, "end": 204.48000000000002, "text": " So tree shaking, if you think of your app as a tree of all the reachable codes, so you", "tokens": [51224, 407, 4230, 15415, 11, 498, 291, 519, 295, 428, 724, 382, 257, 4230, 295, 439, 264, 2524, 712, 14211, 11, 370, 291, 51540], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 39, "seek": 18096, "start": 204.48000000000002, "end": 209.48000000000002, "text": " start at the roots of the app, for example, in Java or Kotlin, you start at the main method", "tokens": [51540, 722, 412, 264, 10669, 295, 264, 724, 11, 337, 1365, 11, 294, 10745, 420, 30123, 5045, 11, 291, 722, 412, 264, 2135, 3170, 51790], "temperature": 0.0, "avg_logprob": -0.19834724916230648, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0015473883831873536}, {"id": 40, "seek": 20948, "start": 209.48, "end": 214.51999999999998, "text": " and you follow all the references that you can find, you build a graph from that and then", "tokens": [50364, 293, 291, 1524, 439, 264, 15400, 300, 291, 393, 915, 11, 291, 1322, 257, 4295, 490, 300, 293, 550, 50616], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 41, "seek": 20948, "start": 214.51999999999998, "end": 219.0, "text": " you shake this tree and all of the non-use stuff falls away.", "tokens": [50616, 291, 10283, 341, 4230, 293, 439, 295, 264, 2107, 12, 438, 1507, 8804, 1314, 13, 50840], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 42, "seek": 20948, "start": 219.0, "end": 222.92, "text": " So just like if you shake an apple tree, the apples are going to fall out, all of your", "tokens": [50840, 407, 445, 411, 498, 291, 10283, 364, 10606, 4230, 11, 264, 16814, 366, 516, 281, 2100, 484, 11, 439, 295, 428, 51036], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 43, "seek": 20948, "start": 222.92, "end": 227.35999999999999, "text": " unused code is going to fall away.", "tokens": [51036, 44383, 3089, 307, 516, 281, 2100, 1314, 13, 51258], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 44, "seek": 20948, "start": 227.35999999999999, "end": 231.64, "text": " So this is especially useful, for example, with libraries.", "tokens": [51258, 407, 341, 307, 2318, 4420, 11, 337, 1365, 11, 365, 15148, 13, 51472], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 45, "seek": 20948, "start": 231.64, "end": 235.64, "text": " So as an app developer, you might use a bunch of different libraries.", "tokens": [51472, 407, 382, 364, 724, 10754, 11, 291, 1062, 764, 257, 3840, 295, 819, 15148, 13, 51672], "temperature": 0.0, "avg_logprob": -0.13432169877565825, "compression_ratio": 1.7665198237885462, "no_speech_prob": 0.0009488583891652524}, {"id": 46, "seek": 23564, "start": 235.67999999999998, "end": 241.07999999999998, "text": " Those libraries might use libraries, and those libraries might use libraries, but you might", "tokens": [50366, 3950, 15148, 1062, 764, 15148, 11, 293, 729, 15148, 1062, 764, 15148, 11, 457, 291, 1062, 50636], "temperature": 0.0, "avg_logprob": -0.17141256549141623, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.004356269259005785}, {"id": 47, "seek": 23564, "start": 241.07999999999998, "end": 247.11999999999998, "text": " just want a few features, but all of that code gets pulled into your app.", "tokens": [50636, 445, 528, 257, 1326, 4122, 11, 457, 439, 295, 300, 3089, 2170, 7373, 666, 428, 724, 13, 50938], "temperature": 0.0, "avg_logprob": -0.17141256549141623, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.004356269259005785}, {"id": 48, "seek": 23564, "start": 247.11999999999998, "end": 254.51999999999998, "text": " So you can use a shrinker to remove, to do tree shaking on that and remove unused classes,", "tokens": [50938, 407, 291, 393, 764, 257, 23060, 260, 281, 4159, 11, 281, 360, 4230, 15415, 322, 300, 293, 4159, 44383, 5359, 11, 51308], "temperature": 0.0, "avg_logprob": -0.17141256549141623, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.004356269259005785}, {"id": 49, "seek": 23564, "start": 254.51999999999998, "end": 258.64, "text": " methods, fields, for example.", "tokens": [51308, 7150, 11, 7909, 11, 337, 1365, 13, 51514], "temperature": 0.0, "avg_logprob": -0.17141256549141623, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.004356269259005785}, {"id": 50, "seek": 23564, "start": 258.64, "end": 262.8, "text": " And then another shrinking technique, code optimization, so tree shaking was all about", "tokens": [51514, 400, 550, 1071, 41684, 6532, 11, 3089, 19618, 11, 370, 4230, 15415, 390, 439, 466, 51722], "temperature": 0.0, "avg_logprob": -0.17141256549141623, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.004356269259005785}, {"id": 51, "seek": 26280, "start": 262.84000000000003, "end": 269.48, "text": " removing the bigger entities, the classes, methods, and code optimization is really about", "tokens": [50366, 12720, 264, 3801, 16667, 11, 264, 5359, 11, 7150, 11, 293, 3089, 19618, 307, 534, 466, 50698], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 52, "seek": 26280, "start": 269.48, "end": 271.84000000000003, "text": " the byte code.", "tokens": [50698, 264, 40846, 3089, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 53, "seek": 26280, "start": 271.84000000000003, "end": 278.56, "text": " So for example, if an optimizer can tell that some path is always going to be taken, then", "tokens": [50816, 407, 337, 1365, 11, 498, 364, 5028, 6545, 393, 980, 300, 512, 3100, 307, 1009, 516, 281, 312, 2726, 11, 550, 51152], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 54, "seek": 26280, "start": 278.56, "end": 283.6, "text": " we can remove some of the code.", "tokens": [51152, 321, 393, 4159, 512, 295, 264, 3089, 13, 51404], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 55, "seek": 26280, "start": 283.6, "end": 287.64, "text": " And the last one I want to talk about is name obfuscation.", "tokens": [51404, 400, 264, 1036, 472, 286, 528, 281, 751, 466, 307, 1315, 1111, 69, 32601, 399, 13, 51606], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 56, "seek": 26280, "start": 287.64, "end": 292.0, "text": " So this is about making the strings smaller.", "tokens": [51606, 407, 341, 307, 466, 1455, 264, 13985, 4356, 13, 51824], "temperature": 0.0, "avg_logprob": -0.15028916705738415, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.003057201160117984}, {"id": 57, "seek": 29200, "start": 292.08, "end": 299.24, "text": " So if you're an enterprise Java developer, you might have some class names like this.", "tokens": [50368, 407, 498, 291, 434, 364, 14132, 10745, 10754, 11, 291, 1062, 362, 512, 1508, 5288, 411, 341, 13, 50726], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 58, "seek": 29200, "start": 299.24, "end": 302.48, "text": " More characters means more bytes.", "tokens": [50726, 5048, 4342, 1355, 544, 36088, 13, 50888], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 59, "seek": 29200, "start": 302.48, "end": 308.4, "text": " So if we just rename this to a single character, it's going to take up less space.", "tokens": [50888, 407, 498, 321, 445, 36741, 341, 281, 257, 2167, 2517, 11, 309, 311, 516, 281, 747, 493, 1570, 1901, 13, 51184], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 60, "seek": 29200, "start": 308.4, "end": 313.28, "text": " Just a small side note here, which could make up a whole presentation on its own.", "tokens": [51184, 1449, 257, 1359, 1252, 3637, 510, 11, 597, 727, 652, 493, 257, 1379, 5860, 322, 1080, 1065, 13, 51428], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 61, "seek": 29200, "start": 313.28, "end": 318.28, "text": " Name obfuscation on its own is not security, but I won't talk about that more today if", "tokens": [51428, 13866, 1111, 69, 32601, 399, 322, 1080, 1065, 307, 406, 3825, 11, 457, 286, 1582, 380, 751, 466, 300, 544, 965, 498, 51678], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 62, "seek": 29200, "start": 318.28, "end": 320.4, "text": " you want to discuss that more later.", "tokens": [51678, 291, 528, 281, 2248, 300, 544, 1780, 13, 51784], "temperature": 0.0, "avg_logprob": -0.16550033497360517, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.003972888924181461}, {"id": 63, "seek": 32040, "start": 320.67999999999995, "end": 324.91999999999996, "text": " I'd be happy to, but today I want to focus on shrinking.", "tokens": [50378, 286, 1116, 312, 2055, 281, 11, 457, 965, 286, 528, 281, 1879, 322, 41684, 13, 50590], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 64, "seek": 32040, "start": 327.32, "end": 331.79999999999995, "text": " So why am I talking about shrinkers in the Kotlin Dev Room?", "tokens": [50710, 407, 983, 669, 286, 1417, 466, 23060, 433, 294, 264, 30123, 5045, 9096, 19190, 30, 50934], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 65, "seek": 32040, "start": 333.32, "end": 335.71999999999997, "text": " Why is the presentation called in the age of Kotlin?", "tokens": [51010, 1545, 307, 264, 5860, 1219, 294, 264, 3205, 295, 30123, 5045, 30, 51130], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 66, "seek": 32040, "start": 337.52, "end": 341.96, "text": " So the Kotlin compiler generates Java classes just like the Java compiler.", "tokens": [51220, 407, 264, 30123, 5045, 31958, 23815, 10745, 5359, 445, 411, 264, 10745, 31958, 13, 51442], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 67, "seek": 32040, "start": 341.96, "end": 343.91999999999996, "text": " So isn't it all just Java byte code?", "tokens": [51442, 407, 1943, 380, 309, 439, 445, 10745, 40846, 3089, 30, 51540], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 68, "seek": 32040, "start": 343.91999999999996, "end": 345.79999999999995, "text": " Why is there a difference?", "tokens": [51540, 1545, 307, 456, 257, 2649, 30, 51634], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 69, "seek": 32040, "start": 347.12, "end": 349.88, "text": " So let's take a look at a very simple example.", "tokens": [51700, 407, 718, 311, 747, 257, 574, 412, 257, 588, 2199, 1365, 13, 51838], "temperature": 0.0, "avg_logprob": -0.20257556915283204, "compression_ratio": 1.6210045662100456, "no_speech_prob": 0.0015581478364765644}, {"id": 70, "seek": 34988, "start": 349.88, "end": 355.24, "text": " So let's look at the Hello World in Java, Hello World in Kotlin.", "tokens": [50364, 407, 718, 311, 574, 412, 264, 2425, 3937, 294, 10745, 11, 2425, 3937, 294, 30123, 5045, 13, 50632], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 71, "seek": 34988, "start": 355.24, "end": 361.84, "text": " We will use the Java P-Tool to print out the disassembly of the class file.", "tokens": [50632, 492, 486, 764, 264, 10745, 430, 12, 51, 1092, 281, 4482, 484, 264, 717, 29386, 356, 295, 264, 1508, 3991, 13, 50962], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 72, "seek": 34988, "start": 361.84, "end": 363.84, "text": " And let's see what the difference is.", "tokens": [50962, 400, 718, 311, 536, 437, 264, 2649, 307, 13, 51062], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 73, "seek": 34988, "start": 365.4, "end": 369.96, "text": " So it doesn't matter the exact content here, but right away you can see that on", "tokens": [51140, 407, 309, 1177, 380, 1871, 264, 1900, 2701, 510, 11, 457, 558, 1314, 291, 393, 536, 300, 322, 51368], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 74, "seek": 34988, "start": 369.96, "end": 373.2, "text": " the right side, the Kotlin side is longer.", "tokens": [51368, 264, 558, 1252, 11, 264, 30123, 5045, 1252, 307, 2854, 13, 51530], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 75, "seek": 34988, "start": 374.84, "end": 375.71999999999997, "text": " So what do we have here?", "tokens": [51612, 407, 437, 360, 321, 362, 510, 30, 51656], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 76, "seek": 34988, "start": 375.71999999999997, "end": 378.56, "text": " We have some header, which is basically the same.", "tokens": [51656, 492, 362, 512, 23117, 11, 597, 307, 1936, 264, 912, 13, 51798], "temperature": 0.0, "avg_logprob": -0.203833701393821, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.0015824564034119248}, {"id": 77, "seek": 37856, "start": 378.56, "end": 380.4, "text": " So that's not very interesting.", "tokens": [50364, 407, 300, 311, 406, 588, 1880, 13, 50456], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 78, "seek": 37856, "start": 380.4, "end": 381.84, "text": " We have a constant pull.", "tokens": [50456, 492, 362, 257, 5754, 2235, 13, 50528], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 79, "seek": 37856, "start": 381.84, "end": 385.6, "text": " We already see here that there are more constants used in the Kotlin class.", "tokens": [50528, 492, 1217, 536, 510, 300, 456, 366, 544, 35870, 1143, 294, 264, 30123, 5045, 1508, 13, 50716], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 80, "seek": 37856, "start": 387.6, "end": 391.12, "text": " On the Java side, we have an extra constructor which doesn't appear in the Kotlin side.", "tokens": [50816, 1282, 264, 10745, 1252, 11, 321, 362, 364, 2857, 47479, 597, 1177, 380, 4204, 294, 264, 30123, 5045, 1252, 13, 50992], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 81, "seek": 37856, "start": 392.68, "end": 396.24, "text": " And that's because actually, in this example, there is no class here.", "tokens": [51070, 400, 300, 311, 570, 767, 11, 294, 341, 1365, 11, 456, 307, 572, 1508, 510, 13, 51248], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 82, "seek": 37856, "start": 396.24, "end": 398.8, "text": " So this main is in the top level of the file.", "tokens": [51248, 407, 341, 2135, 307, 294, 264, 1192, 1496, 295, 264, 3991, 13, 51376], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 83, "seek": 37856, "start": 398.8, "end": 400.0, "text": " There's no class here.", "tokens": [51376, 821, 311, 572, 1508, 510, 13, 51436], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 84, "seek": 37856, "start": 400.0, "end": 405.68, "text": " So from the Kotlin point of view, you cannot instantiate this generated Java class file.", "tokens": [51436, 407, 490, 264, 30123, 5045, 935, 295, 1910, 11, 291, 2644, 9836, 13024, 341, 10833, 10745, 1508, 3991, 13, 51720], "temperature": 0.0, "avg_logprob": -0.18942953745524088, "compression_ratio": 1.7991967871485943, "no_speech_prob": 0.0003429663775023073}, {"id": 85, "seek": 40568, "start": 406.68, "end": 408.68, "text": " And then we have a main method.", "tokens": [50414, 400, 550, 321, 362, 257, 2135, 3170, 13, 50514], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 86, "seek": 40568, "start": 408.68, "end": 413.68, "text": " And actually, on the Kotlin side, we have two methods because I declared the", "tokens": [50514, 400, 767, 11, 322, 264, 30123, 5045, 1252, 11, 321, 362, 732, 7150, 570, 286, 15489, 264, 50764], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 87, "seek": 40568, "start": 413.68, "end": 416.68, "text": " methods without the args parameters.", "tokens": [50764, 7150, 1553, 264, 3882, 82, 9834, 13, 50914], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 88, "seek": 40568, "start": 416.68, "end": 420.68, "text": " So actually, the Kotlin compiler generates two, and one will call the other one.", "tokens": [50914, 407, 767, 11, 264, 30123, 5045, 31958, 23815, 732, 11, 293, 472, 486, 818, 264, 661, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 89, "seek": 40568, "start": 421.68, "end": 425.68, "text": " And then at the bottom here, which is going to be most of the focus of this talk,", "tokens": [51164, 400, 550, 412, 264, 2767, 510, 11, 597, 307, 516, 281, 312, 881, 295, 264, 1879, 295, 341, 751, 11, 51364], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 90, "seek": 40568, "start": 425.68, "end": 427.68, "text": " is the Kotlin metadata.", "tokens": [51364, 307, 264, 30123, 5045, 26603, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 91, "seek": 40568, "start": 429.68, "end": 434.68, "text": " And why do we need this extra metadata that we saw in the class file here?", "tokens": [51564, 400, 983, 360, 321, 643, 341, 2857, 26603, 300, 321, 1866, 294, 264, 1508, 3991, 510, 30, 51814], "temperature": 0.0, "avg_logprob": -0.20145884266606084, "compression_ratio": 1.7695652173913043, "no_speech_prob": 0.0010884576477110386}, {"id": 92, "seek": 43568, "start": 436.68, "end": 438.68, "text": " So let's look at a very simple example.", "tokens": [50414, 407, 718, 311, 574, 412, 257, 588, 2199, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0610621452331543, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00028275264776311815}, {"id": 93, "seek": 43568, "start": 438.68, "end": 444.68, "text": " If you have a data class in Kotlin, data classes don't exist in Java.", "tokens": [50514, 759, 291, 362, 257, 1412, 1508, 294, 30123, 5045, 11, 1412, 5359, 500, 380, 2514, 294, 10745, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0610621452331543, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00028275264776311815}, {"id": 94, "seek": 43568, "start": 444.68, "end": 448.68, "text": " So when you compile this to a Java class file, you get a Java class.", "tokens": [50814, 407, 562, 291, 31413, 341, 281, 257, 10745, 1508, 3991, 11, 291, 483, 257, 10745, 1508, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0610621452331543, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00028275264776311815}, {"id": 95, "seek": 43568, "start": 448.68, "end": 452.68, "text": " There's no indication here that it was a data class.", "tokens": [51014, 821, 311, 572, 18877, 510, 300, 309, 390, 257, 1412, 1508, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0610621452331543, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00028275264776311815}, {"id": 96, "seek": 43568, "start": 454.68, "end": 458.68, "text": " Another example with context receivers.", "tokens": [51314, 3996, 1365, 365, 4319, 49196, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0610621452331543, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00028275264776311815}, {"id": 97, "seek": 45868, "start": 459.68, "end": 466.68, "text": " So if you have context receivers in Kotlin, when you compile this to Java bytecode,", "tokens": [50414, 407, 498, 291, 362, 4319, 49196, 294, 30123, 5045, 11, 562, 291, 31413, 341, 281, 10745, 40846, 22332, 11, 50764], "temperature": 0.0, "avg_logprob": -0.09936177453329396, "compression_ratio": 1.791044776119403, "no_speech_prob": 0.004216276109218597}, {"id": 98, "seek": 45868, "start": 466.68, "end": 469.68, "text": " you will have a Java function which looks something like this,", "tokens": [50764, 291, 486, 362, 257, 10745, 2445, 597, 1542, 746, 411, 341, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09936177453329396, "compression_ratio": 1.791044776119403, "no_speech_prob": 0.004216276109218597}, {"id": 99, "seek": 45868, "start": 469.68, "end": 475.68, "text": " or your context receivers will end up as the first parameters of your method.", "tokens": [50914, 420, 428, 4319, 49196, 486, 917, 493, 382, 264, 700, 9834, 295, 428, 3170, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09936177453329396, "compression_ratio": 1.791044776119403, "no_speech_prob": 0.004216276109218597}, {"id": 100, "seek": 45868, "start": 477.68, "end": 481.68, "text": " So if you're just looking at this from a Java class file point of view,", "tokens": [51314, 407, 498, 291, 434, 445, 1237, 412, 341, 490, 257, 10745, 1508, 3991, 935, 295, 1910, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09936177453329396, "compression_ratio": 1.791044776119403, "no_speech_prob": 0.004216276109218597}, {"id": 101, "seek": 45868, "start": 481.68, "end": 486.68, "text": " how do you know that the first parameters are context receivers", "tokens": [51514, 577, 360, 291, 458, 300, 264, 700, 9834, 366, 4319, 49196, 51764], "temperature": 0.0, "avg_logprob": -0.09936177453329396, "compression_ratio": 1.791044776119403, "no_speech_prob": 0.004216276109218597}, {"id": 102, "seek": 48668, "start": 486.68, "end": 491.68, "text": " and not just any other context receivers and not any other parameters?", "tokens": [50364, 293, 406, 445, 604, 661, 4319, 49196, 293, 406, 604, 661, 9834, 30, 50614], "temperature": 0.0, "avg_logprob": -0.10668155445772058, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.002900647232308984}, {"id": 103, "seek": 48668, "start": 494.68, "end": 497.68, "text": " And then there are many other things encoded in the metadata,", "tokens": [50764, 400, 550, 456, 366, 867, 661, 721, 2058, 12340, 294, 264, 26603, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10668155445772058, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.002900647232308984}, {"id": 104, "seek": 48668, "start": 497.68, "end": 501.68, "text": " for example nullability, type aliases, and a lot more.", "tokens": [50914, 337, 1365, 18184, 2310, 11, 2010, 10198, 1957, 11, 293, 257, 688, 544, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10668155445772058, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.002900647232308984}, {"id": 105, "seek": 48668, "start": 502.68, "end": 506.68, "text": " And so this is a big problem for code that inspects the Kotlin code.", "tokens": [51164, 400, 370, 341, 307, 257, 955, 1154, 337, 3089, 300, 15018, 82, 264, 30123, 5045, 3089, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10668155445772058, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.002900647232308984}, {"id": 106, "seek": 48668, "start": 506.68, "end": 512.6800000000001, "text": " So for example, using reflection, for example the compiler, for example IDE,", "tokens": [51364, 407, 337, 1365, 11, 1228, 12914, 11, 337, 1365, 264, 31958, 11, 337, 1365, 40930, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10668155445772058, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.002900647232308984}, {"id": 107, "seek": 51268, "start": 512.68, "end": 518.68, "text": " all of these tools need to know that a class is a data class, for example.", "tokens": [50364, 439, 295, 613, 3873, 643, 281, 458, 300, 257, 1508, 307, 257, 1412, 1508, 11, 337, 1365, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10325827663891936, "compression_ratio": 1.4797687861271676, "no_speech_prob": 0.0019351160153746605}, {"id": 108, "seek": 51268, "start": 521.68, "end": 523.68, "text": " And how is this metadata encoded?", "tokens": [50814, 400, 577, 307, 341, 26603, 2058, 12340, 30, 50914], "temperature": 0.0, "avg_logprob": -0.10325827663891936, "compression_ratio": 1.4797687861271676, "no_speech_prob": 0.0019351160153746605}, {"id": 109, "seek": 51268, "start": 523.68, "end": 529.68, "text": " Let's have a look again at the Java P output and zoom in on the metadata.", "tokens": [50914, 961, 311, 362, 257, 574, 797, 412, 264, 10745, 430, 5598, 293, 8863, 294, 322, 264, 26603, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10325827663891936, "compression_ratio": 1.4797687861271676, "no_speech_prob": 0.0019351160153746605}, {"id": 110, "seek": 51268, "start": 531.68, "end": 538.68, "text": " So if we zoom in a bit, we see that it's actually just a Java annotation.", "tokens": [51314, 407, 498, 321, 8863, 294, 257, 857, 11, 321, 536, 300, 309, 311, 767, 445, 257, 10745, 48654, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10325827663891936, "compression_ratio": 1.4797687861271676, "no_speech_prob": 0.0019351160153746605}, {"id": 111, "seek": 53868, "start": 538.68, "end": 543.68, "text": " So I say just in quotes because inside that annotation is a bit more complicated,", "tokens": [50364, 407, 286, 584, 445, 294, 19963, 570, 1854, 300, 48654, 307, 257, 857, 544, 6179, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 112, "seek": 53868, "start": 543.68, "end": 547.68, "text": " it has to be decoded, but it is a Java annotation.", "tokens": [50614, 309, 575, 281, 312, 979, 12340, 11, 457, 309, 307, 257, 10745, 48654, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 113, "seek": 53868, "start": 550.68, "end": 554.68, "text": " So since it's just an annotation, we can actually see the source code.", "tokens": [50964, 407, 1670, 309, 311, 445, 364, 48654, 11, 321, 393, 767, 536, 264, 4009, 3089, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 114, "seek": 53868, "start": 554.68, "end": 557.68, "text": " So you can find the source code on GitHub.", "tokens": [51164, 407, 291, 393, 915, 264, 4009, 3089, 322, 23331, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 115, "seek": 53868, "start": 558.68, "end": 561.68, "text": " There are a bunch of different fields in the annotation.", "tokens": [51364, 821, 366, 257, 3840, 295, 819, 7909, 294, 264, 48654, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 116, "seek": 53868, "start": 562.68, "end": 564.68, "text": " One of them, the first one is the kind.", "tokens": [51564, 1485, 295, 552, 11, 264, 700, 472, 307, 264, 733, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10815714753192404, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.001923363539390266}, {"id": 117, "seek": 56468, "start": 564.68, "end": 569.68, "text": " So we saw already that the main function, the small example that I gave", "tokens": [50364, 407, 321, 1866, 1217, 300, 264, 2135, 2445, 11, 264, 1359, 1365, 300, 286, 2729, 50614], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 118, "seek": 56468, "start": 569.68, "end": 572.68, "text": " with the main function at the beginning, there was no class.", "tokens": [50614, 365, 264, 2135, 2445, 412, 264, 2863, 11, 456, 390, 572, 1508, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 119, "seek": 56468, "start": 572.68, "end": 575.68, "text": " So actually this is a file kind, not a class kind.", "tokens": [50764, 407, 767, 341, 307, 257, 3991, 733, 11, 406, 257, 1508, 733, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 120, "seek": 56468, "start": 576.68, "end": 578.68, "text": " There was also a version here.", "tokens": [50964, 821, 390, 611, 257, 3037, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 121, "seek": 56468, "start": 579.68, "end": 584.68, "text": " And there are some two fields where the actual metadata is stored in a binary format", "tokens": [51114, 400, 456, 366, 512, 732, 7909, 689, 264, 3539, 26603, 307, 12187, 294, 257, 17434, 7877, 51364], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 122, "seek": 56468, "start": 584.68, "end": 588.68, "text": " and strings that are referenced by the metadata stored.", "tokens": [51364, 293, 13985, 300, 366, 32734, 538, 264, 26603, 12187, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 123, "seek": 56468, "start": 588.68, "end": 593.68, "text": " And then there are some other fields here with some strings and some bit flags.", "tokens": [51564, 400, 550, 456, 366, 512, 661, 7909, 510, 365, 512, 13985, 293, 512, 857, 23265, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10784698667980376, "compression_ratio": 1.8432203389830508, "no_speech_prob": 0.0028324720915406942}, {"id": 124, "seek": 59468, "start": 595.68, "end": 600.68, "text": " Okay, so that's what metadata is, why we need metadata.", "tokens": [50414, 1033, 11, 370, 300, 311, 437, 26603, 307, 11, 983, 321, 643, 26603, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12694866180419923, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0008266504155471921}, {"id": 125, "seek": 59468, "start": 601.68, "end": 604.68, "text": " But why am I talking about shrinking?", "tokens": [50714, 583, 983, 669, 286, 1417, 466, 41684, 30, 50864], "temperature": 0.0, "avg_logprob": -0.12694866180419923, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0008266504155471921}, {"id": 126, "seek": 59468, "start": 604.68, "end": 608.68, "text": " What then is the problem with shrinking coddling code?", "tokens": [50864, 708, 550, 307, 264, 1154, 365, 41684, 17656, 35543, 3089, 30, 51064], "temperature": 0.0, "avg_logprob": -0.12694866180419923, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0008266504155471921}, {"id": 127, "seek": 59468, "start": 609.68, "end": 614.68, "text": " So one of the most basic problems here is that there is an annotation.", "tokens": [51114, 407, 472, 295, 264, 881, 3875, 2740, 510, 307, 300, 456, 307, 364, 48654, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12694866180419923, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0008266504155471921}, {"id": 128, "seek": 59468, "start": 615.68, "end": 621.68, "text": " So if your shrinker or the user who is configuring the shrinker", "tokens": [51414, 407, 498, 428, 23060, 260, 420, 264, 4195, 567, 307, 6662, 1345, 264, 23060, 260, 51714], "temperature": 0.0, "avg_logprob": -0.12694866180419923, "compression_ratio": 1.6079545454545454, "no_speech_prob": 0.0008266504155471921}, {"id": 129, "seek": 62168, "start": 621.68, "end": 625.68, "text": " does not tell the shrinker that it needs this annotation,", "tokens": [50364, 775, 406, 980, 264, 23060, 260, 300, 309, 2203, 341, 48654, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 130, "seek": 62168, "start": 625.68, "end": 629.68, "text": " typically this annotation is not used directly by the program.", "tokens": [50564, 5850, 341, 48654, 307, 406, 1143, 3838, 538, 264, 1461, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 131, "seek": 62168, "start": 629.68, "end": 633.68, "text": " So when you do your tree shaking, you won't see that it's used.", "tokens": [50764, 407, 562, 291, 360, 428, 4230, 15415, 11, 291, 1582, 380, 536, 300, 309, 311, 1143, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 132, "seek": 62168, "start": 635.68, "end": 637.68, "text": " And then it can just be removed.", "tokens": [51064, 400, 550, 309, 393, 445, 312, 7261, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 133, "seek": 62168, "start": 638.68, "end": 642.68, "text": " But then it's just going to be a normal Java class again.", "tokens": [51214, 583, 550, 309, 311, 445, 516, 281, 312, 257, 2710, 10745, 1508, 797, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 134, "seek": 62168, "start": 643.68, "end": 646.68, "text": " So either your shrinker needs to know about coddling", "tokens": [51464, 407, 2139, 428, 23060, 260, 2203, 281, 458, 466, 17656, 35543, 51614], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 135, "seek": 62168, "start": 646.68, "end": 649.68, "text": " or you need to configure it to keep the annotation.", "tokens": [51614, 420, 291, 643, 281, 22162, 309, 281, 1066, 264, 48654, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09024192347671046, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038683684542775154}, {"id": 136, "seek": 65168, "start": 651.68, "end": 657.68, "text": " Another simple example is if you start renaming stuff in the Java classes.", "tokens": [50364, 3996, 2199, 1365, 307, 498, 291, 722, 8124, 5184, 1507, 294, 264, 10745, 5359, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11497248543633355, "compression_ratio": 1.699421965317919, "no_speech_prob": 0.0010838325833901763}, {"id": 137, "seek": 65168, "start": 657.68, "end": 661.68, "text": " So if you rename the class, if you rename the methods,", "tokens": [50664, 407, 498, 291, 36741, 264, 1508, 11, 498, 291, 36741, 264, 7150, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11497248543633355, "compression_ratio": 1.699421965317919, "no_speech_prob": 0.0010838325833901763}, {"id": 138, "seek": 65168, "start": 661.68, "end": 668.68, "text": " then you see in this example here that's actually in the metadata still refers to all of the old names.", "tokens": [50864, 550, 291, 536, 294, 341, 1365, 510, 300, 311, 767, 294, 264, 26603, 920, 14942, 281, 439, 295, 264, 1331, 5288, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11497248543633355, "compression_ratio": 1.699421965317919, "no_speech_prob": 0.0010838325833901763}, {"id": 139, "seek": 65168, "start": 670.68, "end": 675.68, "text": " And then if you are removing methods because they're unused,", "tokens": [51314, 400, 550, 498, 291, 366, 12720, 7150, 570, 436, 434, 44383, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11497248543633355, "compression_ratio": 1.699421965317919, "no_speech_prob": 0.0010838325833901763}, {"id": 140, "seek": 67568, "start": 676.68, "end": 679.68, "text": " well, there's also information about these functions", "tokens": [50414, 731, 11, 456, 311, 611, 1589, 466, 613, 6828, 50564], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 141, "seek": 67568, "start": 679.68, "end": 681.68, "text": " from the coddling point of view in the metadata.", "tokens": [50564, 490, 264, 17656, 35543, 935, 295, 1910, 294, 264, 26603, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 142, "seek": 67568, "start": 682.68, "end": 685.68, "text": " So if you remove it from the Java part,", "tokens": [50714, 407, 498, 291, 4159, 309, 490, 264, 10745, 644, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 143, "seek": 67568, "start": 685.68, "end": 688.68, "text": " it's still going to be in the coddling metadata", "tokens": [50864, 309, 311, 920, 516, 281, 312, 294, 264, 17656, 35543, 26603, 51014], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 144, "seek": 67568, "start": 688.68, "end": 691.68, "text": " unless your shrinker knows about coddling metadata.", "tokens": [51014, 5969, 428, 23060, 260, 3255, 466, 17656, 35543, 26603, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 145, "seek": 67568, "start": 694.68, "end": 700.68, "text": " So as I mentioned, I work on ProGuard, I work on DexGuard.", "tokens": [51314, 407, 382, 286, 2835, 11, 286, 589, 322, 1705, 38, 16981, 11, 286, 589, 322, 1346, 87, 38, 16981, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 146, "seek": 67568, "start": 701.68, "end": 704.68, "text": " And both of these process coddling metadata in the same way.", "tokens": [51664, 400, 1293, 295, 613, 1399, 17656, 35543, 26603, 294, 264, 912, 636, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1166789989278774, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005406175274401903}, {"id": 147, "seek": 70568, "start": 706.68, "end": 709.68, "text": " So let's have a look at how that actually works.", "tokens": [50414, 407, 718, 311, 362, 257, 574, 412, 577, 300, 767, 1985, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 148, "seek": 70568, "start": 710.68, "end": 712.68, "text": " So it's a very high level.", "tokens": [50614, 407, 309, 311, 257, 588, 1090, 1496, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 149, "seek": 70568, "start": 712.68, "end": 715.68, "text": " We have a textual representation of the metadata here.", "tokens": [50714, 492, 362, 257, 2487, 901, 10290, 295, 264, 26603, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 150, "seek": 70568, "start": 717.68, "end": 722.68, "text": " So for example, there's a Java class.", "tokens": [50964, 407, 337, 1365, 11, 456, 311, 257, 10745, 1508, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 151, "seek": 70568, "start": 723.68, "end": 725.68, "text": " It has some metadata attached.", "tokens": [51264, 467, 575, 512, 26603, 8570, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 152, "seek": 70568, "start": 725.68, "end": 727.68, "text": " There is a function there.", "tokens": [51364, 821, 307, 257, 2445, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 153, "seek": 70568, "start": 727.68, "end": 731.68, "text": " And you'll see in the metadata part, there is a link.", "tokens": [51464, 400, 291, 603, 536, 294, 264, 26603, 644, 11, 456, 307, 257, 2113, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14180292566138578, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.001630477956496179}, {"id": 154, "seek": 73168, "start": 732.68, "end": 737.68, "text": " So for the class, there's attached metadata.", "tokens": [50414, 407, 337, 264, 1508, 11, 456, 311, 8570, 26603, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12570626970747828, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.0007217008387669921}, {"id": 155, "seek": 73168, "start": 738.68, "end": 743.68, "text": " And then you'll see also that the function in the coddling metadata", "tokens": [50714, 400, 550, 291, 603, 536, 611, 300, 264, 2445, 294, 264, 17656, 35543, 26603, 50964], "temperature": 0.0, "avg_logprob": -0.12570626970747828, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.0007217008387669921}, {"id": 156, "seek": 73168, "start": 743.68, "end": 750.68, "text": " points to an actual Java bytecode, a Java method.", "tokens": [50964, 2793, 281, 364, 3539, 10745, 40846, 22332, 11, 257, 10745, 3170, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12570626970747828, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.0007217008387669921}, {"id": 157, "seek": 73168, "start": 751.68, "end": 754.68, "text": " And then the metadata doesn't contain any of the actual bytecode.", "tokens": [51364, 400, 550, 264, 26603, 1177, 380, 5304, 604, 295, 264, 3539, 40846, 22332, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12570626970747828, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.0007217008387669921}, {"id": 158, "seek": 73168, "start": 754.68, "end": 756.68, "text": " The bytecode is in the Java method.", "tokens": [51514, 440, 40846, 22332, 307, 294, 264, 10745, 3170, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12570626970747828, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.0007217008387669921}, {"id": 159, "seek": 75668, "start": 756.68, "end": 774.68, "text": " So there are two basic rules here that if the Java part is renamed,", "tokens": [50364, 407, 456, 366, 732, 3875, 4474, 510, 300, 498, 264, 10745, 644, 307, 40949, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1695659369753118, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014264133758842945}, {"id": 160, "seek": 75668, "start": 774.68, "end": 776.68, "text": " rename the coddling parts.", "tokens": [51264, 36741, 264, 17656, 35543, 3166, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1695659369753118, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014264133758842945}, {"id": 161, "seek": 75668, "start": 777.68, "end": 781.68, "text": " And if the Java part is unused, remove the coddling part.", "tokens": [51414, 400, 498, 264, 10745, 644, 307, 44383, 11, 4159, 264, 17656, 35543, 644, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1695659369753118, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014264133758842945}, {"id": 162, "seek": 75668, "start": 781.68, "end": 785.68, "text": " So for example, if you rename the method sum here,", "tokens": [51614, 407, 337, 1365, 11, 498, 291, 36741, 264, 3170, 2408, 510, 11, 51814], "temperature": 0.0, "avg_logprob": -0.1695659369753118, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.014264133758842945}, {"id": 163, "seek": 78568, "start": 785.68, "end": 788.68, "text": " you should also rename the function in the metadata.", "tokens": [50364, 291, 820, 611, 36741, 264, 2445, 294, 264, 26603, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 164, "seek": 78568, "start": 788.68, "end": 790.68, "text": " If you remove the method,", "tokens": [50514, 759, 291, 4159, 264, 3170, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 165, "seek": 78568, "start": 790.68, "end": 792.68, "text": " you should also remove the function in the metadata.", "tokens": [50614, 291, 820, 611, 4159, 264, 2445, 294, 264, 26603, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 166, "seek": 78568, "start": 792.68, "end": 795.68, "text": " And at a high level, that's two of the basic rules", "tokens": [50714, 400, 412, 257, 1090, 1496, 11, 300, 311, 732, 295, 264, 3875, 4474, 50864], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 167, "seek": 78568, "start": 795.68, "end": 798.68, "text": " that ProGuard follows when processing the metadata.", "tokens": [50864, 300, 1705, 38, 16981, 10002, 562, 9007, 264, 26603, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 168, "seek": 78568, "start": 799.68, "end": 801.68, "text": " There are a lot of details around that,", "tokens": [51064, 821, 366, 257, 688, 295, 4365, 926, 300, 11, 51164], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 169, "seek": 78568, "start": 801.68, "end": 804.68, "text": " but at a high level, that's what's happening.", "tokens": [51164, 457, 412, 257, 1090, 1496, 11, 300, 311, 437, 311, 2737, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 170, "seek": 78568, "start": 806.68, "end": 808.68, "text": " So how is this implemented?", "tokens": [51414, 407, 577, 307, 341, 12270, 30, 51514], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 171, "seek": 78568, "start": 809.68, "end": 811.68, "text": " So we have an open source project,", "tokens": [51564, 407, 321, 362, 364, 1269, 4009, 1716, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 172, "seek": 78568, "start": 811.68, "end": 814.68, "text": " which is separate from ProGuard called ProGuard Core.", "tokens": [51664, 597, 307, 4994, 490, 1705, 38, 16981, 1219, 1705, 38, 16981, 14798, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10445719250177933, "compression_ratio": 1.8284518828451883, "no_speech_prob": 0.002401215024292469}, {"id": 173, "seek": 81568, "start": 815.68, "end": 817.68, "text": " But it was born out of the ProGuard project.", "tokens": [50364, 583, 309, 390, 4232, 484, 295, 264, 1705, 38, 16981, 1716, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 174, "seek": 81568, "start": 818.68, "end": 822.68, "text": " So basically, it's extracted from the ProGuard project.", "tokens": [50514, 407, 1936, 11, 309, 311, 34086, 490, 264, 1705, 38, 16981, 1716, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 175, "seek": 81568, "start": 822.68, "end": 827.68, "text": " A lot of the bytecode manipulation and analysis.", "tokens": [50714, 316, 688, 295, 264, 40846, 22332, 26475, 293, 5215, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 176, "seek": 81568, "start": 827.68, "end": 831.68, "text": " So for example, you can read and write Java class files and coddling files.", "tokens": [50964, 407, 337, 1365, 11, 291, 393, 1401, 293, 2464, 10745, 1508, 7098, 293, 17656, 35543, 7098, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 177, "seek": 81568, "start": 834.68, "end": 838.68, "text": " And you can modify, generate and analyze code.", "tokens": [51314, 400, 291, 393, 16927, 11, 8460, 293, 12477, 3089, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 178, "seek": 81568, "start": 839.68, "end": 841.68, "text": " And importantly for this talk,", "tokens": [51564, 400, 8906, 337, 341, 751, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 179, "seek": 81568, "start": 841.68, "end": 844.68, "text": " you can inspect and modify coddling metadata.", "tokens": [51664, 291, 393, 15018, 293, 16927, 17656, 35543, 26603, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10092662483133295, "compression_ratio": 1.6540284360189574, "no_speech_prob": 0.0015886231558397412}, {"id": 180, "seek": 84468, "start": 844.68, "end": 848.68, "text": " And this actually is powered by the Kotlin X metadata library,", "tokens": [50364, 400, 341, 767, 307, 17786, 538, 264, 30123, 5045, 1783, 26603, 6405, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 181, "seek": 84468, "start": 848.68, "end": 851.68, "text": " which is developed by JetBrains.", "tokens": [50564, 597, 307, 4743, 538, 28730, 45606, 1292, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 182, "seek": 84468, "start": 852.68, "end": 859.68, "text": " So we don't actually need to dive deep into the actual parsing", "tokens": [50764, 407, 321, 500, 380, 767, 643, 281, 9192, 2452, 666, 264, 3539, 21156, 278, 51114], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 183, "seek": 84468, "start": 859.68, "end": 861.68, "text": " of what's in this annotation.", "tokens": [51114, 295, 437, 311, 294, 341, 48654, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 184, "seek": 84468, "start": 862.68, "end": 864.68, "text": " So JetBrains does that for us.", "tokens": [51264, 407, 28730, 45606, 1292, 775, 300, 337, 505, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 185, "seek": 84468, "start": 864.68, "end": 868.68, "text": " We take advantage of the library to be able to load the data from the annotation,", "tokens": [51364, 492, 747, 5002, 295, 264, 6405, 281, 312, 1075, 281, 3677, 264, 1412, 490, 264, 48654, 11, 51564], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 186, "seek": 84468, "start": 868.68, "end": 871.68, "text": " manipulate it and then write it back again.", "tokens": [51564, 20459, 309, 293, 550, 2464, 309, 646, 797, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09929621091452978, "compression_ratio": 1.6121495327102804, "no_speech_prob": 0.000654642004519701}, {"id": 187, "seek": 87168, "start": 871.68, "end": 875.68, "text": " And there's also the big advantage in that, for example,", "tokens": [50364, 400, 456, 311, 611, 264, 955, 5002, 294, 300, 11, 337, 1365, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 188, "seek": 87168, "start": 875.68, "end": 879.68, "text": " with versioning from the ProGuard Core point of view,", "tokens": [50564, 365, 3037, 278, 490, 264, 1705, 38, 16981, 14798, 935, 295, 1910, 11, 50764], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 189, "seek": 87168, "start": 879.68, "end": 882.68, "text": " we don't really care about the version of the metadata", "tokens": [50764, 321, 500, 380, 534, 1127, 466, 264, 3037, 295, 264, 26603, 50914], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 190, "seek": 87168, "start": 882.68, "end": 885.68, "text": " that we need to parse different versions in different waves.", "tokens": [50914, 300, 321, 643, 281, 48377, 819, 9606, 294, 819, 9417, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 191, "seek": 87168, "start": 886.68, "end": 889.68, "text": " That is delegated to the JetBrains library.", "tokens": [51114, 663, 307, 15824, 770, 281, 264, 28730, 45606, 1292, 6405, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 192, "seek": 87168, "start": 892.68, "end": 897.68, "text": " So how can we use ProGuard Core to read and modify coddling metadata?", "tokens": [51414, 407, 577, 393, 321, 764, 1705, 38, 16981, 14798, 281, 1401, 293, 16927, 17656, 35543, 26603, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1125141355726454, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.0008850784506648779}, {"id": 193, "seek": 89768, "start": 898.68, "end": 900.68, "text": " So let's have a look at an example.", "tokens": [50414, 407, 718, 311, 362, 257, 574, 412, 364, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 194, "seek": 89768, "start": 903.68, "end": 907.68, "text": " So I was thinking about doing a live demo here,", "tokens": [50664, 407, 286, 390, 1953, 466, 884, 257, 1621, 10723, 510, 11, 50864], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 195, "seek": 89768, "start": 907.68, "end": 911.68, "text": " but I practiced yesterday and there was IntelliJ problems and stuff,", "tokens": [50864, 457, 286, 19268, 5186, 293, 456, 390, 18762, 72, 41, 2740, 293, 1507, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 196, "seek": 89768, "start": 911.68, "end": 914.68, "text": " so I decided to make some slides instead.", "tokens": [51064, 370, 286, 3047, 281, 652, 512, 9788, 2602, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 197, "seek": 89768, "start": 914.68, "end": 919.68, "text": " So basically what you can do is you can create, for example,", "tokens": [51214, 407, 1936, 437, 291, 393, 360, 307, 291, 393, 1884, 11, 337, 1365, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 198, "seek": 89768, "start": 919.68, "end": 922.68, "text": " a new Gradle project, add dependency on ProGuard Core,", "tokens": [51464, 257, 777, 16710, 306, 1716, 11, 909, 33621, 322, 1705, 38, 16981, 14798, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10174770133439885, "compression_ratio": 1.4691943127962086, "no_speech_prob": 0.0013154665939509869}, {"id": 199, "seek": 92268, "start": 922.68, "end": 927.68, "text": " and then you'll be able to use the features to modify the metadata.", "tokens": [50364, 293, 550, 291, 603, 312, 1075, 281, 764, 264, 4122, 281, 16927, 264, 26603, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 200, "seek": 92268, "start": 927.68, "end": 931.68, "text": " So let's have a look at an example of what kind of code you can write.", "tokens": [50614, 407, 718, 311, 362, 257, 574, 412, 364, 1365, 295, 437, 733, 295, 3089, 291, 393, 2464, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 201, "seek": 92268, "start": 931.68, "end": 935.68, "text": " So let's say we've created a new project in IntelliJ,", "tokens": [50814, 407, 718, 311, 584, 321, 600, 2942, 257, 777, 1716, 294, 18762, 72, 41, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 202, "seek": 92268, "start": 935.68, "end": 938.68, "text": " we added a dependency on ProGuard Core,", "tokens": [51014, 321, 3869, 257, 33621, 322, 1705, 38, 16981, 14798, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 203, "seek": 92268, "start": 938.68, "end": 941.68, "text": " and we have just a main function.", "tokens": [51164, 293, 321, 362, 445, 257, 2135, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 204, "seek": 92268, "start": 941.68, "end": 944.68, "text": " We have a file called main, we have the main function,", "tokens": [51314, 492, 362, 257, 3991, 1219, 2135, 11, 321, 362, 264, 2135, 2445, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 205, "seek": 92268, "start": 946.68, "end": 948.68, "text": " and we want to read some coddling,", "tokens": [51564, 293, 321, 528, 281, 1401, 512, 17656, 35543, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09236929966853215, "compression_ratio": 1.5822222222222222, "no_speech_prob": 0.007831861265003681}, {"id": 206, "seek": 94868, "start": 948.68, "end": 953.68, "text": " so we want to read some Java class file that was generated by the coddling compiler", "tokens": [50364, 370, 321, 528, 281, 1401, 512, 10745, 1508, 3991, 300, 390, 10833, 538, 264, 17656, 35543, 31958, 50614], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 207, "seek": 94868, "start": 953.68, "end": 955.68, "text": " and look at the metadata.", "tokens": [50614, 293, 574, 412, 264, 26603, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 208, "seek": 94868, "start": 956.68, "end": 961.68, "text": " So let's try reading the metadata from this class that we're writing.", "tokens": [50764, 407, 718, 311, 853, 3760, 264, 26603, 490, 341, 1508, 300, 321, 434, 3579, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 209, "seek": 94868, "start": 961.68, "end": 965.68, "text": " So once it's compiled, it's going to end up somewhere here in the build folder.", "tokens": [51014, 407, 1564, 309, 311, 36548, 11, 309, 311, 516, 281, 917, 493, 4079, 510, 294, 264, 1322, 10820, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 210, "seek": 94868, "start": 965.68, "end": 970.68, "text": " Let's read it back in and then see what metadata is there.", "tokens": [51214, 961, 311, 1401, 309, 646, 294, 293, 550, 536, 437, 26603, 307, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 211, "seek": 94868, "start": 971.68, "end": 976.68, "text": " So we can use a small utility function to be able to read in class files.", "tokens": [51514, 407, 321, 393, 764, 257, 1359, 14877, 2445, 281, 312, 1075, 281, 1401, 294, 1508, 7098, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07724393115324132, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.0014144581509754062}, {"id": 212, "seek": 97668, "start": 977.68, "end": 982.68, "text": " It will read in the class file and it will initialize the coddling metadata.", "tokens": [50414, 467, 486, 1401, 294, 264, 1508, 3991, 293, 309, 486, 5883, 1125, 264, 17656, 35543, 26603, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 213, "seek": 97668, "start": 982.68, "end": 986.68, "text": " It will put that class file into a container called a program class pool.", "tokens": [50664, 467, 486, 829, 300, 1508, 3991, 666, 257, 10129, 1219, 257, 1461, 1508, 7005, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 214, "seek": 97668, "start": 989.68, "end": 992.68, "text": " Once we've done that, we should initialize all the cross references,", "tokens": [51014, 3443, 321, 600, 1096, 300, 11, 321, 820, 5883, 1125, 439, 264, 3278, 15400, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 215, "seek": 97668, "start": 992.68, "end": 995.68, "text": " and this is quite an important concept in ProGuard Core,", "tokens": [51164, 293, 341, 307, 1596, 364, 1021, 3410, 294, 1705, 38, 16981, 14798, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 216, "seek": 97668, "start": 995.68, "end": 998.68, "text": " like for example, the references to the super classes,", "tokens": [51314, 411, 337, 1365, 11, 264, 15400, 281, 264, 1687, 5359, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 217, "seek": 97668, "start": 998.68, "end": 1003.68, "text": " so you have the whole hierarchy references between classes with the method calls.", "tokens": [51464, 370, 291, 362, 264, 1379, 22333, 15400, 1296, 5359, 365, 264, 3170, 5498, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1155554357201162, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.0011112396605312824}, {"id": 218, "seek": 100368, "start": 1004.68, "end": 1010.68, "text": " So that's the important step after you've loaded in the class initializer references.", "tokens": [50414, 407, 300, 311, 264, 1021, 1823, 934, 291, 600, 13210, 294, 264, 1508, 5883, 6545, 15400, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09505565687157642, "compression_ratio": 1.8797814207650274, "no_speech_prob": 0.0006622446235269308}, {"id": 219, "seek": 100368, "start": 1011.68, "end": 1015.68, "text": " And once you've done that, you now have access to the coddling metadata.", "tokens": [50764, 400, 1564, 291, 600, 1096, 300, 11, 291, 586, 362, 2105, 281, 264, 17656, 35543, 26603, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09505565687157642, "compression_ratio": 1.8797814207650274, "no_speech_prob": 0.0006622446235269308}, {"id": 220, "seek": 100368, "start": 1016.68, "end": 1022.68, "text": " So what we can do is we can visit all of the classes that are loaded into the class pool,", "tokens": [51014, 407, 437, 321, 393, 360, 307, 321, 393, 3441, 439, 295, 264, 5359, 300, 366, 13210, 666, 264, 1508, 7005, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09505565687157642, "compression_ratio": 1.8797814207650274, "no_speech_prob": 0.0006622446235269308}, {"id": 221, "seek": 100368, "start": 1023.68, "end": 1026.6799999999998, "text": " we can visit all of their metadata,", "tokens": [51364, 321, 393, 3441, 439, 295, 641, 26603, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09505565687157642, "compression_ratio": 1.8797814207650274, "no_speech_prob": 0.0006622446235269308}, {"id": 222, "seek": 100368, "start": 1026.6799999999998, "end": 1029.6799999999998, "text": " and within that metadata we can visit all of the functions,", "tokens": [51514, 293, 1951, 300, 26603, 321, 393, 3441, 439, 295, 264, 6828, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09505565687157642, "compression_ratio": 1.8797814207650274, "no_speech_prob": 0.0006622446235269308}, {"id": 223, "seek": 102968, "start": 1029.68, "end": 1033.68, "text": " and then we can, for example, print out the function name.", "tokens": [50364, 293, 550, 321, 393, 11, 337, 1365, 11, 4482, 484, 264, 2445, 1315, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12285476777611709, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.005191747099161148}, {"id": 224, "seek": 102968, "start": 1034.68, "end": 1040.68, "text": " And know that this is not printing out the method name of the Java method,", "tokens": [50614, 400, 458, 300, 341, 307, 406, 14699, 484, 264, 3170, 1315, 295, 264, 10745, 3170, 11, 50914], "temperature": 0.0, "avg_logprob": -0.12285476777611709, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.005191747099161148}, {"id": 225, "seek": 102968, "start": 1040.68, "end": 1044.68, "text": " this is printing out the function name that is in the metadata.", "tokens": [50914, 341, 307, 14699, 484, 264, 2445, 1315, 300, 307, 294, 264, 26603, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12285476777611709, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.005191747099161148}, {"id": 226, "seek": 102968, "start": 1046.68, "end": 1049.68, "text": " So if we run this, we will see some output here.", "tokens": [51214, 407, 498, 321, 1190, 341, 11, 321, 486, 536, 512, 5598, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12285476777611709, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.005191747099161148}, {"id": 227, "seek": 102968, "start": 1049.68, "end": 1054.68, "text": " So we've run the input to this program is this program itself,", "tokens": [51364, 407, 321, 600, 1190, 264, 4846, 281, 341, 1461, 307, 341, 1461, 2564, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12285476777611709, "compression_ratio": 1.8070175438596492, "no_speech_prob": 0.005191747099161148}, {"id": 228, "seek": 105468, "start": 1054.68, "end": 1059.68, "text": " so there is one function, and so it prints out the main.", "tokens": [50364, 370, 456, 307, 472, 2445, 11, 293, 370, 309, 22305, 484, 264, 2135, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1538005934821235, "compression_ratio": 1.4645669291338583, "no_speech_prob": 0.005061809904873371}, {"id": 229, "seek": 105468, "start": 1061.68, "end": 1066.68, "text": " If we add another function, we run it again, it will print through and main.", "tokens": [50714, 759, 321, 909, 1071, 2445, 11, 321, 1190, 309, 797, 11, 309, 486, 4482, 807, 293, 2135, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1538005934821235, "compression_ratio": 1.4645669291338583, "no_speech_prob": 0.005061809904873371}, {"id": 230, "seek": 105468, "start": 1071.68, "end": 1078.68, "text": " But we can't just, we can't only just read metadata,", "tokens": [51214, 583, 321, 393, 380, 445, 11, 321, 393, 380, 787, 445, 1401, 26603, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1538005934821235, "compression_ratio": 1.4645669291338583, "no_speech_prob": 0.005061809904873371}, {"id": 231, "seek": 107868, "start": 1078.68, "end": 1086.68, "text": " we can also modify metadata and we can also modify the Java parts of the class file.", "tokens": [50364, 321, 393, 611, 16927, 26603, 293, 321, 393, 611, 16927, 264, 10745, 3166, 295, 264, 1508, 3991, 13, 50764], "temperature": 0.0, "avg_logprob": -0.101857871152042, "compression_ratio": 1.7554347826086956, "no_speech_prob": 0.017952945083379745}, {"id": 232, "seek": 107868, "start": 1087.68, "end": 1093.68, "text": " So let's say that our shrinker wants to rename a method to some other name.", "tokens": [50814, 407, 718, 311, 584, 300, 527, 23060, 260, 2738, 281, 36741, 257, 3170, 281, 512, 661, 1315, 13, 51114], "temperature": 0.0, "avg_logprob": -0.101857871152042, "compression_ratio": 1.7554347826086956, "no_speech_prob": 0.017952945083379745}, {"id": 233, "seek": 107868, "start": 1094.68, "end": 1100.68, "text": " So let's visit all of the methods in the class, let's rename it.", "tokens": [51164, 407, 718, 311, 3441, 439, 295, 264, 7150, 294, 264, 1508, 11, 718, 311, 36741, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.101857871152042, "compression_ratio": 1.7554347826086956, "no_speech_prob": 0.017952945083379745}, {"id": 234, "seek": 107868, "start": 1100.68, "end": 1104.68, "text": " If it's called foo already, let's rename it to new foo,", "tokens": [51464, 759, 309, 311, 1219, 726, 78, 1217, 11, 718, 311, 36741, 309, 281, 777, 726, 78, 11, 51664], "temperature": 0.0, "avg_logprob": -0.101857871152042, "compression_ratio": 1.7554347826086956, "no_speech_prob": 0.017952945083379745}, {"id": 235, "seek": 107868, "start": 1104.68, "end": 1107.68, "text": " otherwise we just keep the original name.", "tokens": [51664, 5911, 321, 445, 1066, 264, 3380, 1315, 13, 51814], "temperature": 0.0, "avg_logprob": -0.101857871152042, "compression_ratio": 1.7554347826086956, "no_speech_prob": 0.017952945083379745}, {"id": 236, "seek": 110868, "start": 1109.68, "end": 1115.68, "text": " And know that now that we've renamed the Java component,", "tokens": [50414, 400, 458, 300, 586, 300, 321, 600, 40949, 264, 10745, 6542, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 237, "seek": 110868, "start": 1115.68, "end": 1117.68, "text": " and now the metadata is out of sync.", "tokens": [50714, 293, 586, 264, 26603, 307, 484, 295, 20271, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 238, "seek": 110868, "start": 1119.68, "end": 1121.68, "text": " So how do we fix that?", "tokens": [50914, 407, 577, 360, 321, 3191, 300, 30, 51014], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 239, "seek": 110868, "start": 1121.68, "end": 1124.68, "text": " Well, what we can do is we can visit the metadata,", "tokens": [51014, 1042, 11, 437, 321, 393, 360, 307, 321, 393, 3441, 264, 26603, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 240, "seek": 110868, "start": 1124.68, "end": 1132.68, "text": " we can then look at the reference where the metadata points to the Java method,", "tokens": [51164, 321, 393, 550, 574, 412, 264, 6408, 689, 264, 26603, 2793, 281, 264, 10745, 3170, 11, 51564], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 241, "seek": 110868, "start": 1132.68, "end": 1134.68, "text": " and then we can set the name.", "tokens": [51564, 293, 550, 321, 393, 992, 264, 1315, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09470227398449861, "compression_ratio": 1.7098765432098766, "no_speech_prob": 0.000726433820091188}, {"id": 242, "seek": 113468, "start": 1135.68, "end": 1138.68, "text": " But actually there is a utility in Progo Core which can do that for you,", "tokens": [50414, 583, 767, 456, 307, 257, 14877, 294, 1705, 1571, 14798, 597, 393, 360, 300, 337, 291, 11, 50564], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 243, "seek": 113468, "start": 1138.68, "end": 1142.68, "text": " the class reference fixer that will fix up all the names after you've renamed stuff.", "tokens": [50564, 264, 1508, 6408, 3191, 260, 300, 486, 3191, 493, 439, 264, 5288, 934, 291, 600, 40949, 1507, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 244, "seek": 113468, "start": 1144.68, "end": 1149.68, "text": " Once we've done that, we need to write the metadata back into the annotation.", "tokens": [50864, 3443, 321, 600, 1096, 300, 11, 321, 643, 281, 2464, 264, 26603, 646, 666, 264, 48654, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 245, "seek": 113468, "start": 1149.68, "end": 1152.68, "text": " So we use a Kotlin metadata writer for that.", "tokens": [51114, 407, 321, 764, 257, 30123, 5045, 26603, 9936, 337, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 246, "seek": 113468, "start": 1152.68, "end": 1158.68, "text": " And once we've done that, we can write out the class to overwrite the original file.", "tokens": [51264, 400, 1564, 321, 600, 1096, 300, 11, 321, 393, 2464, 484, 264, 1508, 281, 670, 21561, 264, 3380, 3991, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 247, "seek": 113468, "start": 1158.68, "end": 1163.68, "text": " So if we open the file now in the IntelliJ decompiler,", "tokens": [51564, 407, 498, 321, 1269, 264, 3991, 586, 294, 264, 18762, 72, 41, 22867, 5441, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10210051706859044, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.001684900838881731}, {"id": 248, "seek": 116368, "start": 1163.68, "end": 1166.68, "text": " we see that the function is now called new foo.", "tokens": [50364, 321, 536, 300, 264, 2445, 307, 586, 1219, 777, 726, 78, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 249, "seek": 116368, "start": 1168.68, "end": 1172.68, "text": " So what's important here is that we've renamed the Java component,", "tokens": [50614, 407, 437, 311, 1021, 510, 307, 300, 321, 600, 40949, 264, 10745, 6542, 11, 50814], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 250, "seek": 116368, "start": 1172.68, "end": 1177.68, "text": " the method where the bytecode actually lives, and also the Kotlin metadata.", "tokens": [50814, 264, 3170, 689, 264, 40846, 22332, 767, 2909, 11, 293, 611, 264, 30123, 5045, 26603, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 251, "seek": 116368, "start": 1179.68, "end": 1182.68, "text": " If you want to learn more about Progo Core,", "tokens": [51164, 759, 291, 528, 281, 1466, 544, 466, 1705, 1571, 14798, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 252, "seek": 116368, "start": 1182.68, "end": 1186.68, "text": " if you want to start modifying Kotlin metadata yourself,", "tokens": [51314, 498, 291, 528, 281, 722, 42626, 30123, 5045, 26603, 1803, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 253, "seek": 116368, "start": 1186.68, "end": 1189.68, "text": " or if you want to build tools that modify Kotlin metadata,", "tokens": [51514, 420, 498, 291, 528, 281, 1322, 3873, 300, 16927, 30123, 5045, 26603, 11, 51664], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 254, "seek": 116368, "start": 1189.68, "end": 1191.68, "text": " good place to start is the manual.", "tokens": [51664, 665, 1081, 281, 722, 307, 264, 9688, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07346452108704217, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.0024161902256309986}, {"id": 255, "seek": 119168, "start": 1191.68, "end": 1194.68, "text": " If you just want to look at metadata,", "tokens": [50364, 759, 291, 445, 528, 281, 574, 412, 26603, 11, 50514], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 256, "seek": 119168, "start": 1194.68, "end": 1197.68, "text": " you can check out our Kotlin metadata printer projects.", "tokens": [50514, 291, 393, 1520, 484, 527, 30123, 5045, 26603, 16671, 4455, 13, 50664], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 257, "seek": 119168, "start": 1197.68, "end": 1202.68, "text": " It will take in APK, or JAR file, or class file as input,", "tokens": [50664, 467, 486, 747, 294, 5372, 42, 11, 420, 508, 1899, 3991, 11, 420, 1508, 3991, 382, 4846, 11, 50914], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 258, "seek": 119168, "start": 1202.68, "end": 1204.68, "text": " and show you all the metadata.", "tokens": [50914, 293, 855, 291, 439, 264, 26603, 13, 51014], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 259, "seek": 119168, "start": 1204.68, "end": 1209.68, "text": " This is actually built into the Progo Playground web service as well,", "tokens": [51014, 639, 307, 767, 3094, 666, 264, 1705, 1571, 5506, 2921, 3670, 2643, 382, 731, 11, 51264], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 260, "seek": 119168, "start": 1209.68, "end": 1211.68, "text": " so you can upload a JAR for there,", "tokens": [51264, 370, 291, 393, 6580, 257, 508, 1899, 337, 456, 11, 51364], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 261, "seek": 119168, "start": 1211.68, "end": 1213.68, "text": " and it will just show you the Kotlin metadata.", "tokens": [51364, 293, 309, 486, 445, 855, 291, 264, 30123, 5045, 26603, 13, 51464], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 262, "seek": 119168, "start": 1214.68, "end": 1220.68, "text": " And as I mentioned before, the Progo Core metadata support is built on top of the Kotlin metadata library", "tokens": [51514, 400, 382, 286, 2835, 949, 11, 264, 1705, 1571, 14798, 26603, 1406, 307, 3094, 322, 1192, 295, 264, 30123, 5045, 26603, 6405, 51814], "temperature": 0.0, "avg_logprob": -0.140239006231639, "compression_ratio": 1.76, "no_speech_prob": 0.003113596001639962}, {"id": 263, "seek": 122068, "start": 1220.68, "end": 1224.68, "text": " from JetBrains, so you don't need to use Progo Core to use that library,", "tokens": [50364, 490, 28730, 45606, 1292, 11, 370, 291, 500, 380, 643, 281, 764, 1705, 1571, 14798, 281, 764, 300, 6405, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 264, "seek": 122068, "start": 1224.68, "end": 1227.68, "text": " so you can also check that out as well.", "tokens": [50564, 370, 291, 393, 611, 1520, 300, 484, 382, 731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 265, "seek": 122068, "start": 1228.68, "end": 1231.68, "text": " If you have any questions, I'll be happy to answer.", "tokens": [50764, 759, 291, 362, 604, 1651, 11, 286, 603, 312, 2055, 281, 1867, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 266, "seek": 122068, "start": 1231.68, "end": 1235.68, "text": " You can also contact me via Twitter,", "tokens": [50914, 509, 393, 611, 3385, 385, 5766, 5794, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 267, "seek": 122068, "start": 1235.68, "end": 1237.68, "text": " or Twitter, I'm also on LinkedIn as well,", "tokens": [51114, 420, 5794, 11, 286, 478, 611, 322, 20657, 382, 731, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 268, "seek": 122068, "start": 1237.68, "end": 1239.68, "text": " if you have any questions later.", "tokens": [51214, 498, 291, 362, 604, 1651, 1780, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 269, "seek": 122068, "start": 1240.68, "end": 1241.68, "text": " Thank you.", "tokens": [51364, 1044, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 270, "seek": 122068, "start": 1245.68, "end": 1246.68, "text": " Awesome.", "tokens": [51614, 10391, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 271, "seek": 122068, "start": 1246.68, "end": 1249.68, "text": " We do have five minutes for questions from the audience.", "tokens": [51664, 492, 360, 362, 1732, 2077, 337, 1651, 490, 264, 4034, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09014585585821243, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004858178086578846}, {"id": 272, "seek": 124968, "start": 1249.68, "end": 1253.68, "text": " So, yeah, please just shout it.", "tokens": [50364, 407, 11, 1338, 11, 1767, 445, 8043, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 273, "seek": 124968, "start": 1261.68, "end": 1263.68, "text": " Most, yeah, so if you're just...", "tokens": [50964, 4534, 11, 1338, 11, 370, 498, 291, 434, 445, 485, 51064], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 274, "seek": 124968, "start": 1263.68, "end": 1265.68, "text": " Okay, so the question is,", "tokens": [51064, 1033, 11, 370, 264, 1168, 307, 11, 51164], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 275, "seek": 124968, "start": 1265.68, "end": 1270.68, "text": " can you throw away metadata if you're developing an app?", "tokens": [51164, 393, 291, 3507, 1314, 26603, 498, 291, 434, 6416, 364, 724, 30, 51414], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 276, "seek": 124968, "start": 1270.68, "end": 1272.68, "text": " So not a library.", "tokens": [51414, 407, 406, 257, 6405, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 277, "seek": 124968, "start": 1272.68, "end": 1277.68, "text": " In a lot of cases, yes, unless you're using reflection.", "tokens": [51514, 682, 257, 688, 295, 3331, 11, 2086, 11, 5969, 291, 434, 1228, 12914, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2294641951440086, "compression_ratio": 1.4258064516129032, "no_speech_prob": 0.006392541341483593}, {"id": 278, "seek": 127768, "start": 1277.68, "end": 1280.68, "text": " And reflection is quite popular.", "tokens": [50364, 400, 12914, 307, 1596, 3743, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14528432157304552, "compression_ratio": 1.5, "no_speech_prob": 0.003261025296524167}, {"id": 279, "seek": 127768, "start": 1280.68, "end": 1285.68, "text": " So if you don't use reflection, you're not making a library,", "tokens": [50514, 407, 498, 291, 500, 380, 764, 12914, 11, 291, 434, 406, 1455, 257, 6405, 11, 50764], "temperature": 0.0, "avg_logprob": -0.14528432157304552, "compression_ratio": 1.5, "no_speech_prob": 0.003261025296524167}, {"id": 280, "seek": 127768, "start": 1285.68, "end": 1289.68, "text": " you can probably get rid of a lot of metadata.", "tokens": [50764, 291, 393, 1391, 483, 3973, 295, 257, 688, 295, 26603, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14528432157304552, "compression_ratio": 1.5, "no_speech_prob": 0.003261025296524167}, {"id": 281, "seek": 127768, "start": 1289.68, "end": 1293.68, "text": " But then reflection is a big problem now.", "tokens": [50964, 583, 550, 12914, 307, 257, 955, 1154, 586, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14528432157304552, "compression_ratio": 1.5, "no_speech_prob": 0.003261025296524167}, {"id": 282, "seek": 127768, "start": 1296.68, "end": 1301.68, "text": " Do you have an idea of the size of the metadata in a typical Kotlin JAR?", "tokens": [51314, 1144, 291, 362, 364, 1558, 295, 264, 2744, 295, 264, 26603, 294, 257, 7476, 30123, 5045, 508, 1899, 30, 51564], "temperature": 0.0, "avg_logprob": -0.14528432157304552, "compression_ratio": 1.5, "no_speech_prob": 0.003261025296524167}, {"id": 283, "seek": 130168, "start": 1301.68, "end": 1306.68, "text": " How much bigger is it compared to the same results?", "tokens": [50364, 1012, 709, 3801, 307, 309, 5347, 281, 264, 912, 3542, 30, 50614], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 284, "seek": 130168, "start": 1306.68, "end": 1310.68, "text": " I don't have any numbers here,", "tokens": [50614, 286, 500, 380, 362, 604, 3547, 510, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 285, "seek": 130168, "start": 1310.68, "end": 1315.68, "text": " but basically all of the header information", "tokens": [50814, 457, 1936, 439, 295, 264, 23117, 1589, 51064], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 286, "seek": 130168, "start": 1315.68, "end": 1321.68, "text": " for all of the functions except the actual bytecode", "tokens": [51064, 337, 439, 295, 264, 6828, 3993, 264, 3539, 40846, 22332, 51364], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 287, "seek": 130168, "start": 1321.68, "end": 1323.68, "text": " is encoded in the metadata.", "tokens": [51364, 307, 2058, 12340, 294, 264, 26603, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 288, "seek": 130168, "start": 1323.68, "end": 1324.68, "text": " It's huge.", "tokens": [51464, 467, 311, 2603, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 289, "seek": 130168, "start": 1324.68, "end": 1326.68, "text": " So it can be quite big.", "tokens": [51514, 407, 309, 393, 312, 1596, 955, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 290, "seek": 130168, "start": 1326.68, "end": 1327.68, "text": " There is some sharing,", "tokens": [51614, 821, 307, 512, 5414, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1665211095438375, "compression_ratio": 1.4505494505494505, "no_speech_prob": 0.01033371314406395}, {"id": 291, "seek": 132768, "start": 1327.68, "end": 1331.68, "text": " because there is a user in the metadata annotation,", "tokens": [50364, 570, 456, 307, 257, 4195, 294, 264, 26603, 48654, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 292, "seek": 132768, "start": 1331.68, "end": 1332.68, "text": " there's a strings array.", "tokens": [50564, 456, 311, 257, 13985, 10225, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 293, "seek": 132768, "start": 1332.68, "end": 1336.68, "text": " So actually, those strings are shared with other strings", "tokens": [50614, 407, 767, 11, 729, 13985, 366, 5507, 365, 661, 13985, 50814], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 294, "seek": 132768, "start": 1336.68, "end": 1338.68, "text": " because they're part of the constant pool.", "tokens": [50814, 570, 436, 434, 644, 295, 264, 5754, 7005, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 295, "seek": 132768, "start": 1338.68, "end": 1341.68, "text": " So that saves space, but it can be a lot.", "tokens": [50914, 407, 300, 19155, 1901, 11, 457, 309, 393, 312, 257, 688, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 296, "seek": 132768, "start": 1341.68, "end": 1345.68, "text": " And if you're developing an app which doesn't use reflection,", "tokens": [51064, 400, 498, 291, 434, 6416, 364, 724, 597, 1177, 380, 764, 12914, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 297, "seek": 132768, "start": 1345.68, "end": 1348.68, "text": " then maybe you can just remove all of it.", "tokens": [51264, 550, 1310, 291, 393, 445, 4159, 439, 295, 309, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 298, "seek": 132768, "start": 1351.68, "end": 1352.68, "text": " Yes.", "tokens": [51564, 1079, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1554827160305447, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.010733402334153652}, {"id": 299, "seek": 135268, "start": 1352.68, "end": 1355.68, "text": " Can you also remove the methods, not only the classes,", "tokens": [50364, 1664, 291, 611, 4159, 264, 7150, 11, 406, 787, 264, 5359, 11, 50514], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 300, "seek": 135268, "start": 1355.68, "end": 1358.68, "text": " just from the libraries, but initially part of the classes?", "tokens": [50514, 445, 490, 264, 15148, 11, 457, 9105, 644, 295, 264, 5359, 30, 50664], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 301, "seek": 135268, "start": 1358.68, "end": 1359.68, "text": " Yeah, yeah.", "tokens": [50664, 865, 11, 1338, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 302, "seek": 135268, "start": 1359.68, "end": 1363.68, "text": " So the question was, with tree shaking,", "tokens": [50714, 407, 264, 1168, 390, 11, 365, 4230, 15415, 11, 50914], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 303, "seek": 135268, "start": 1363.68, "end": 1367.68, "text": " can you remove methods, not just classes?", "tokens": [50914, 393, 291, 4159, 7150, 11, 406, 445, 5359, 30, 51114], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 304, "seek": 135268, "start": 1367.68, "end": 1373.68, "text": " So the tree shaking normally will remove entities in the app,", "tokens": [51114, 407, 264, 4230, 15415, 5646, 486, 4159, 16667, 294, 264, 724, 11, 51414], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 305, "seek": 135268, "start": 1373.68, "end": 1376.68, "text": " for example, classes, but also methods can be removed,", "tokens": [51414, 337, 1365, 11, 5359, 11, 457, 611, 7150, 393, 312, 7261, 11, 51564], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 306, "seek": 135268, "start": 1376.68, "end": 1378.68, "text": " fields can be removed.", "tokens": [51564, 7909, 393, 312, 7261, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 307, "seek": 135268, "start": 1378.68, "end": 1381.68, "text": " In mining as well?", "tokens": [51664, 682, 15512, 382, 731, 30, 51814], "temperature": 0.0, "avg_logprob": -0.2185974884033203, "compression_ratio": 1.7990196078431373, "no_speech_prob": 0.026416677981615067}, {"id": 308, "seek": 138168, "start": 1381.68, "end": 1382.68, "text": " Yes.", "tokens": [50364, 1079, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 309, "seek": 138168, "start": 1382.68, "end": 1386.68, "text": " So this is more, at least in ProGuard,", "tokens": [50414, 407, 341, 307, 544, 11, 412, 1935, 294, 1705, 38, 16981, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 310, "seek": 138168, "start": 1386.68, "end": 1389.68, "text": " the inlining is more of the optimizer's job.", "tokens": [50614, 264, 294, 31079, 307, 544, 295, 264, 5028, 6545, 311, 1691, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 311, "seek": 138168, "start": 1389.68, "end": 1393.68, "text": " So some things can be inlined, and then the methods,", "tokens": [50764, 407, 512, 721, 393, 312, 294, 13564, 11, 293, 550, 264, 7150, 11, 50964], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 312, "seek": 138168, "start": 1393.68, "end": 1395.68, "text": " the original method can then be removed.", "tokens": [50964, 264, 3380, 3170, 393, 550, 312, 7261, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 313, "seek": 138168, "start": 1395.68, "end": 1399.68, "text": " Also, for Java class files, attributes can be removed", "tokens": [51064, 2743, 11, 337, 10745, 1508, 7098, 11, 17212, 393, 312, 7261, 51264], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 314, "seek": 138168, "start": 1399.68, "end": 1402.68, "text": " if they're not used.", "tokens": [51264, 498, 436, 434, 406, 1143, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 315, "seek": 138168, "start": 1402.68, "end": 1408.68, "text": " And for ProGuard, the dead code is part of the optimizer's job.", "tokens": [51414, 400, 337, 1705, 38, 16981, 11, 264, 3116, 3089, 307, 644, 295, 264, 5028, 6545, 311, 1691, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1779632568359375, "compression_ratio": 1.6894736842105262, "no_speech_prob": 0.001076564658433199}, {"id": 316, "seek": 140868, "start": 1408.68, "end": 1410.68, "text": " And then once you remove that code,", "tokens": [50364, 400, 550, 1564, 291, 4159, 300, 3089, 11, 50464], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 317, "seek": 140868, "start": 1410.68, "end": 1413.68, "text": " you can also run the tree shaking step again", "tokens": [50464, 291, 393, 611, 1190, 264, 4230, 15415, 1823, 797, 50614], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 318, "seek": 140868, "start": 1413.68, "end": 1417.68, "text": " and then start removing unused methods,", "tokens": [50614, 293, 550, 722, 12720, 44383, 7150, 11, 50814], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 319, "seek": 140868, "start": 1417.68, "end": 1420.68, "text": " fields, and classes that just became unused", "tokens": [50814, 7909, 11, 293, 5359, 300, 445, 3062, 44383, 50964], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 320, "seek": 140868, "start": 1420.68, "end": 1422.68, "text": " because you optimized.", "tokens": [50964, 570, 291, 26941, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 321, "seek": 140868, "start": 1426.68, "end": 1429.68, "text": " How does this affect the debugging?", "tokens": [51264, 1012, 775, 341, 3345, 264, 45592, 30, 51414], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 322, "seek": 140868, "start": 1429.68, "end": 1432.68, "text": " So the question is, how does it affect the debugging?", "tokens": [51414, 407, 264, 1168, 307, 11, 577, 775, 309, 3345, 264, 45592, 30, 51564], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 323, "seek": 140868, "start": 1432.68, "end": 1434.68, "text": " But what exactly?", "tokens": [51564, 583, 437, 2293, 30, 51664], "temperature": 0.0, "avg_logprob": -0.15878378880488409, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0026782660279423}, {"id": 324, "seek": 143468, "start": 1434.68, "end": 1437.68, "text": " So we modified the byte code and the source code", "tokens": [50364, 407, 321, 15873, 264, 40846, 3089, 293, 264, 4009, 3089, 50514], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 325, "seek": 143468, "start": 1437.68, "end": 1439.68, "text": " to make the previous version,", "tokens": [50514, 281, 652, 264, 3894, 3037, 11, 50614], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 326, "seek": 143468, "start": 1439.68, "end": 1442.68, "text": " so it doesn't really match the original version.", "tokens": [50614, 370, 309, 1177, 380, 534, 2995, 264, 3380, 3037, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 327, "seek": 143468, "start": 1447.68, "end": 1450.68, "text": " So we manipulated the byte code", "tokens": [51014, 407, 321, 37161, 264, 40846, 3089, 51164], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 328, "seek": 143468, "start": 1450.68, "end": 1453.68, "text": " and renamed the original functions to others", "tokens": [51164, 293, 40949, 264, 3380, 6828, 281, 2357, 51314], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 329, "seek": 143468, "start": 1453.68, "end": 1457.68, "text": " and our source code remains the original.", "tokens": [51314, 293, 527, 4009, 3089, 7023, 264, 3380, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 330, "seek": 143468, "start": 1457.68, "end": 1460.68, "text": " Okay, so when you rename everything,", "tokens": [51514, 1033, 11, 370, 562, 291, 36741, 1203, 11, 51664], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 331, "seek": 143468, "start": 1460.68, "end": 1462.68, "text": " then how does this affect debugging?", "tokens": [51664, 550, 577, 775, 341, 3345, 45592, 30, 51764], "temperature": 0.0, "avg_logprob": -0.3715978145599365, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.05306852608919144}, {"id": 332, "seek": 146268, "start": 1462.68, "end": 1466.68, "text": " How do you get a stack trace from some crash or something?", "tokens": [50364, 1012, 360, 291, 483, 257, 8630, 13508, 490, 512, 8252, 420, 746, 30, 50564], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 333, "seek": 146268, "start": 1466.68, "end": 1469.68, "text": " So ProGuard will generate a mapping file", "tokens": [50564, 407, 1705, 38, 16981, 486, 8460, 257, 18350, 3991, 50714], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 334, "seek": 146268, "start": 1469.68, "end": 1474.68, "text": " which maps from the original names to the new names.", "tokens": [50714, 597, 11317, 490, 264, 3380, 5288, 281, 264, 777, 5288, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 335, "seek": 146268, "start": 1474.68, "end": 1478.68, "text": " And this mapping file is also used by R8 as well.", "tokens": [50964, 400, 341, 18350, 3991, 307, 611, 1143, 538, 497, 23, 382, 731, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 336, "seek": 146268, "start": 1478.68, "end": 1480.68, "text": " It's the same mapping file,", "tokens": [51164, 467, 311, 264, 912, 18350, 3991, 11, 51264], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 337, "seek": 146268, "start": 1480.68, "end": 1484.68, "text": " and this is also supported by services like Crashlytics.", "tokens": [51264, 293, 341, 307, 611, 8104, 538, 3328, 411, 31787, 356, 83, 1167, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 338, "seek": 146268, "start": 1484.68, "end": 1487.68, "text": " So the mapping file will be uploaded to Crashlytics,", "tokens": [51464, 407, 264, 18350, 3991, 486, 312, 17135, 281, 31787, 356, 83, 1167, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 339, "seek": 146268, "start": 1487.68, "end": 1490.68, "text": " for example, and if you see crashes from customers,", "tokens": [51614, 337, 1365, 11, 293, 498, 291, 536, 28642, 490, 4581, 11, 51764], "temperature": 0.0, "avg_logprob": -0.09141629713552969, "compression_ratio": 1.7043478260869565, "no_speech_prob": 0.012335660867393017}, {"id": 340, "seek": 149068, "start": 1490.68, "end": 1492.68, "text": " it will be automated.", "tokens": [50364, 309, 486, 312, 18473, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15762721002101898, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.3603380024433136}], "language": "en"}