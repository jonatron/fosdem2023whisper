{"text": " Good afternoon, everybody. Thanks for coming to our session. Yeah, I don't know. It's on. All right. Okay, so mine, I try to speak loud so that the people even in the rows in the back can understand me. My name is Henrik. That's my colleague Joseph. Both of us are publishing and working on open source dependency management security topics for a couple of years already. And so, yeah, recently we started looking into S-bombs more maybe compliance and topics that we are not so familiar with. So we are looking forward to your questions. All right, so the agenda of our session will be like follows. I think the first session agenda item can be very quick, seeing that you already spent like four hours on that topic. We will then present a small case study where we basically tried to, where we ran different S-bomb generators at different points in time on an open source solution in order to see whether those tools agree on the S-bombs generated, whether the results produced are comparable, whether the results change over time, and to also pinpoint a couple of what we believe are deficiencies. And then Joseph will explain why it is beneficial and helpful to go from the granularity of entire components to the code level to look at functions and methods and call graphs. All right, so that is a software bill of material in the Cyclone DX format, which is one of the, let's say, prominent standards in this space. Cyclone DX has a little bit of a security background. That's why we kind of choose this. It seemed more natural to our previous works. At the very top is kind of the S-bomb format and version. Here in the middle you have the software product for which the S-bomb is generated. Here you have the S-bomb generator tool. We anonymized those solutions. We didn't think it is necessary to point out problems in individual open source solutions, but we wanted to more raise awareness for the general problem of comparability and so forth. And then at the bottom here you have an array of components that the S-bomb generator found in the software analyzed. And of course there will be many, and I highlighted a couple of fields that we will be looking at in much more detail. So there is the name, there is a CPE, there is a Perl, a package URL, or a group and a version. So these are all different fields belonging to naming schemes in order to describe or identify the component that was found. And then they have properties that can be all kind of proprietary properties the S-bomb generator decided to include. Why do we need S-bombs? I think in the interest of time I just skip this altogether and go to the case study right away. The idea of this, the motivation for this came basically by reading through a couple of documents. The first, and I have cited them here at the bottom, is a research paper that was done recently. There is I think a couple of interviews and surveys. And there were some statements from the survey participants who said that an S-bomb is not something that is static, that you create at a given point in time, and then you assume it to be stable, but that is something that is evolving throughout the software development lifecycle. And then a corresponding information is also provided in this guidance from the NTIA, the minimum elements for a software bill of materials on pages 6 to 7 they say, you can generate an S-bomb at different points on the sources, after the build, maybe at the docker image, and the S-bomb should actually contain this information when it has been created. That would be important for the consumer. So we looked at different S-bomb generators and then of course, but in order to do a proper comparison, we need to kind of a software to be analyzed. And so as sample software, we have chosen Eclipse Steady, which is a security solution that I've been contributing to over many years, so one that I know very well because I thought that would be helpful to understand the quality of what is generated. In particular, we looked at one of the modules of that solution. It's a spring boot REST service that is developed with Java and Maven. It will be deployed using a docker image that is downloadable from Docker Hub. And the ground truth, which is the information that we will take later on to say whether the S-bomb generators perform good or bad, is what you see here. So there are 114 compile time dependencies. So they are required for compiling the Java sources to runtime dependencies. They should be present where the production software runs. There are 41 test dependencies, JUnit and other stuff. Good. Before showing the results or walking through the results, a little bit of background because that is very important. How do we name those components, right? And it is important to understand there are context-specific component identifiers. So, for example, Maven. So Maven coordinates. This is what is used by the Java developers. It is consisting of a group identifier, artifact identifier and a version. This is typically the graph of the coordinates of a Maven artifact. You would download from Maven Central. There are some optional identifier elements. An example here is org DOM4J, DOM4J version 213. Another context-specific component identifier is the common platform enumeration, which is comprised of a part, a vendor, a product, a version and a couple of other fields. And they are used by the NVD in order to say what are the components affected by a given vulnerability. So, for example, CVE 2020 something is affecting a component CPE 2.3, which is the version of the CPE naming scheme. The vendor is DOM4J project. It's not exactly the same than before, a pity. DOM4J is the product name. And then, besides, there are universal component identifiers. One that got a lot of traction in recent years is the Perl package URL. It has seven elements that I put here. And, you know, using S-bombs in order to use it for understanding whether there are known vulnerabilities, what is the quality of the projects used and so forth, requires to map all those names. Names that are given by people somehow. And that this can go wrong becomes evident by picking one example that I generated later on. So, this is a copy paste from one of the S-bombs, the Cyclone DX S-bombs. And you see here that the Perl here, this universal component identifier that was put in by the S-bomb generator says it's DOM4J. Too bad it doesn't map to org DOM4J, which is the identifier on Maven Central. So, if you want to look up a new version of that component, well, bad luck you don't have the right identifier. If you want to compare this CPE to search for known vulnerabilities, well, it's not the same identifier. They found DOM4J, but it's DOM4J project. Too bad. So, the approach we have taken is we selected three open source S-bomb generators. A and B are generic solutions. You can basically throw anything at them. A directory, an image, a tarball, a single, whatever. And then C is a Maven plug-in that hooks into Maven's build process. And we ran those three tools at three different points in time. After cloning the open source project, after getting cloned, after creating the Maven package, or after running Maven package to create the self-contained spring boot application that you can run, and after finally on the Docker image. On the Docker image, we could just run A and B because C is dedicated to be integrated into the Maven build tool. And so we collected basically eight different S-bombs from those eight runs. And the color coding will stay the same for the Venn diagrams I will be showing on the next slides. And then we did three things. We computed precision and recall of those tools. So, which means we compared what they found with the ground truth. And so precision says basically how many false positives are there in. False positives is the thing tells me there is a component which I know is not there. Not so useful. Recall is for measuring false negatives, which is the tool didn't generate a component even though it is there. Also not so helpful, especially for vulnerable dependencies. And then with those S-bombs, so this is kind of the quality, the accuracy of the tools judged independently against the ground truth. And then we created a couple of Venn diagrams to see how much do they actually agree. So how much, what is the overlap of S-bomb A and B and C in those different times? And then we looked at some additional properties. All right, so this is the first, let's say, result running the three tools right after having cloned the open source project. And let me start from the bottom of the slide with the tool C, which is easy, because that is actually perfect. That integrated in the Maven dependency life cycle in this built tool. Perfect precision, perfect recall, no false positives, no false negatives, right? Very good. And it has a couple of additional properties such as SHA-1, SHA-250-6, digest, license, information, descriptions, a lot of useful stuff. Now then let's look at tool A. You see the blue bubble is much smaller, because it basically failed identifying many, many, many components. And the reason, I think, I mean, I need to speculate a little bit how the internals work. But the reason, I guess, is that it looked at the POM.xml, which is where the developers declare dependencies, but it didn't resolve any dependencies. So meaning it doesn't build a complete dependency tree. So it lacked a lot of transitive dependencies on top of that. For the direct ones that are in the POM, it didn't have any version information, because that was specified elsewhere. So we have components like with this Perl, org spring framework boot, spring boot starter, without a version. They included test dependencies, which is also interesting. The other tools didn't include test dependencies. But the funny thing is, they included it, but if you looked at the S-Bomb, you wouldn't know that it's a test dependency. You can't tell, is this really something only used for developing, or is it really in my production system? Also not so helpful. And they had a couple of CPE combinations supposedly for mapping known vulnerabilities. I think I need to speed up a little bit, right? Okay, now we, this is, this Venn diagram I was mentioning. So here, so the Venn diagram I didn't explain. So here, in fact, this is the overlap of those Perls. So we looked at those Perls and tried, do they match to each other? And you see that, to see, even though they had all perfectly identified, Tool B had a good number, but they still don't overlap. And this is because those Perls contain additional elements, qualifiers, like the type, it's a Java archive, or for open source, for operating system components, could be the platform, the target platform, which makes they don't overlap. Now, if we only look at one of the naming elements, then the overlap is much bigger, because the fact that A is lacking versions, B has wrong version identifiers, and the fact that C adds additional details, it all vanishes and looks like it's all converging. But it is, again, important to understand the name alone is not so useful for looking at vulnerabilities or new versions. Good, so let me hurry up a little bit. This is the same thing, run after Maven package. Tool A improved. They were finding more, but still the precision and recall are not as good as for the other solutions. The other tools didn't change at all, so for them it didn't make a difference that Maven package ran or not. Here, again, is the difference in terms of Perls, which is resulting in the lack of overlap. Here, this is the same component. Tool A has it as DOM4J, DOM4J, Tool B has it at ORC DOM4J, DOM4J, and Type equal to JAR, so they added this additional information, which made that they don't overlap. Good, and then last, after running, now we ran it also on the Docker image. The first two tools, and maybe one finding here is what we observed in terms of lack of overlap on Maven components also happened for operating system components. So here we have Dibyan Udbuntu, the package dash, but again they, one tool added a little bit of more information, the target architecture. For the consumer of the bomb, who knows whether this is important information in terms of security? I don't know. And then again, if you only look at the name, the overlap is much bigger, but even though it looks like they only disagree on very few components, too bad for Tool B, I think, had a big miss, it was lacking the complete Java runtime, and those people being in security, they know how many security issues there are in the Java runtime. Good, lessons learned. The reason for getting different S-bombs is a big one, tools integrated into the dependency manager seem to work much better, at least on the result of that small case study, because generic tools that are supposed to judge the bill of material from the outside, they will need to apply some heuristics, and they don't have the same level of detailed knowledge about the dependency graph. Production versus test components are sometimes included, sometimes not, there are different defaults, and in the S-bomb generated you don't see the difference any longer. And of course, there is also this difference depending on when you run it, there will be different components included. There is a standard format, but the tools include different fields, some include license and digest, others not. And even if they all include a Perl, Perl itself is a complex naming scheme with seven elements, and the tools decide differently on what to include in a Perl. And other reasons that we didn't discuss here, it also depends on the time of the dependency resolution, in case your version ranges, and some tools also generate platform-specific S-bombs, so if you create an S-bomb on a Mac and on a Windows machine, maybe with different hardware architectures beneath, you would have different S-bombs. Right, and I think I don't have so much time to look into this. What I wanted to say, identifying vulnerabilities only on names is rather flawed, because names keep on changing, projects are renamed, there are rebundles, there are forks, and so which is why we advocate for enriching such information with call graph information and code-level information. And with that, I hand over to Joseph. Yeah, thank you, Henrik. So this will be a bit shorter version. We're running out of time here. I guess that's all it. All right, so why do we want to go for more like a call graph view? So with the current S-bomb format, so in general with dependency trees, if you view from that perspective, we typically have the application and the list of dependencies of how it is dependent, right? And if you instead try to think from a call graph perspective of looking into the source code, you could have something like this instead. If we see, for example, like those small sort of like, almost like Lego pieces, if each of them are function calls from like the application to the API, we can see, for example, at lib4, and if lib4 would have a vulnerability or some other type of problem, we see that there are actually no function calls to it from the application down to lib4 via lib2. So I mean, the interesting part here is that if you start looking from like a code perspective, we can quickly see whether we can pinpoint or like see how we're utilizing source code. And another interesting part is that when, so I looked for example like into the Rust ecosystem. So if we have a couple of dependencies, so for example, maplit here, if you run like a grep over here, you can see that only like this one is let's say like, I mean important, but we don't see any usage of it in the package. So this is like a case where there's no code reuse. And I was generally like interested to know like in the Rust ecosystem to see like how we are like doing, like how many dependency we're actually calling or not calling in general. And when I did the study and looked into like how many dependencies are declared and resolved versus how many are actually being reused in the code, I found that for using only package information, it would for example report around 17 dependencies. Whereas in the case when you looked into the like full graph information, we found that only six dependencies are used. And that was quite interesting why there was such a big difference. And the reason why there is such a big difference is that if you look into this example over here, we see that main calls full and then from app to lib1, full calls bar. And then further down we see that from bar it goes calls to intern in lib2. But then we see that there are actually no calls from lib2 to lib3. And this shows that why it is quite important to think about context in general because depending on how app is using its direct dependency, it also directly impacts what transit dependencies are also being called. And the assumption that we usually have when we are building an SPOM or we are looking into a dependency tree is that we are assuming that all direct, I mean all APIs of direct dependencies are being utilized. And then we are also assuming that all APIs of transit dependencies are being used as well. So we need to also start thinking a bit about what kind of context is being used in general. And so a little bit what would be the lessons here with trying to integrate something like call graphs or other levels apart from just using package information is that if you start having information around source code, we can directly try to pinpoint and understand, for example, if there is a vulnerability in one function, we can see that AOK is being either quite utilized in my source code or not utilized at all. And another thing, so this is a problem that we also see as well that we might declare dependencies on 20 components where you get an SPOM from like a vendor or someone else. They have five different components, but which one is the most critically used one in that project? That's also not very clear. And if you know, for example, usage of APIs, you can kind of get an idea around that. And this was also a little bit the second point that I was like highlighting on that. We need a few more layers of information that serve different uses of SPOM. For developers, if I have access to SPOM, I would rather not look into metadata information. I want to go look into call phrases and call information in general. Whereas for security management people or other layers, they probably don't want to look into the source code. They rather want to look to get like an overview of seeing which packages that are being used rather than the source code. And so this sort of wraps up or talks. We have like a couple of takeaways here. And we see that going towards having some type of standard around SPOM formats is, I mean, it's being necessary, but not fully sufficient. Based on the previous slides, like we need a bit more context so that we can have better actionable insights. One way of doing that could be, for example, including call graph information. As a consumer of SPOM, it is very difficult to verify the correctness of them because as Henrik was showing earlier, if you are using different tools and we are getting different results, which one is the correct one and how can we even validate that they are correct in what they are doing. And the last point, and this is something that both me and Henrik think is extremely important, is that we need to create some form of independent SPOM benchmark where different SPOM generators or others could evaluate on how accurate the generated SPOM are against a set of manually validated projects in general. This concludes our talk. We are happy to take questions. Thank you. It shows Java and that's got an ecosystem. So I presume you've probably found something similar with Python or Rust. What about language applications that don't have an ecosystem? I'm thinking about C++. What would you say about that? Basically there are standard languages there and I like the core graph there. How would you tackle that? You can probably take it. The question is how would we do this core graph analysis for C languages and that of course is a very different game and I don't think there is an easy... It will just not be possible to be honest. Because with all the core graph generator, you don't agree? We need to do this for safety. Building a core graph for C code is more difficult than it is for languages like Java and Python. So maybe the amount of information that is contained in such core graphs is less helpful for taking any actions or it's less actionable. We were using this originally for those core graphs where it's for reachability of vulnerable methods. The idea was there is method ABC affected by log4j is this really callable from my application context. But this required kind of... You could map the source code where the vulnerable function is identified to what is in the bytecode where this identifier is basically the same. So the core graph generated from bytecode could be used for this purpose. And I don't think this is possible in at least this application in C. Is this possible at some point?", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.0, "text": " Good afternoon, everybody. Thanks for coming to our session.", "tokens": [2205, 6499, 11, 2201, 13, 2561, 337, 1348, 281, 527, 5481, 13], "temperature": 0.0, "avg_logprob": -0.3418185023938195, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.2539821267127991}, {"id": 1, "seek": 0, "start": 11.0, "end": 18.0, "text": " Yeah, I don't know. It's on.", "tokens": [865, 11, 286, 500, 380, 458, 13, 467, 311, 322, 13], "temperature": 0.0, "avg_logprob": -0.3418185023938195, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.2539821267127991}, {"id": 2, "seek": 0, "start": 18.0, "end": 25.0, "text": " All right. Okay, so mine, I try to speak loud so that the people even in the rows in the back can understand me.", "tokens": [1057, 558, 13, 1033, 11, 370, 3892, 11, 286, 853, 281, 1710, 6588, 370, 300, 264, 561, 754, 294, 264, 13241, 294, 264, 646, 393, 1223, 385, 13], "temperature": 0.0, "avg_logprob": -0.3418185023938195, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.2539821267127991}, {"id": 3, "seek": 2500, "start": 25.0, "end": 36.0, "text": " My name is Henrik. That's my colleague Joseph. Both of us are publishing and working on open source dependency management security topics for a couple of years already.", "tokens": [1222, 1315, 307, 8651, 14456, 13, 663, 311, 452, 13532, 11170, 13, 6767, 295, 505, 366, 17832, 293, 1364, 322, 1269, 4009, 33621, 4592, 3825, 8378, 337, 257, 1916, 295, 924, 1217, 13], "temperature": 0.0, "avg_logprob": -0.13647998980621792, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.00014623945753555745}, {"id": 4, "seek": 2500, "start": 36.0, "end": 47.0, "text": " And so, yeah, recently we started looking into S-bombs more maybe compliance and topics that we are not so familiar with.", "tokens": [400, 370, 11, 1338, 11, 3938, 321, 1409, 1237, 666, 318, 12, 65, 298, 929, 544, 1310, 15882, 293, 8378, 300, 321, 366, 406, 370, 4963, 365, 13], "temperature": 0.0, "avg_logprob": -0.13647998980621792, "compression_ratio": 1.4215686274509804, "no_speech_prob": 0.00014623945753555745}, {"id": 5, "seek": 4700, "start": 47.0, "end": 56.0, "text": " So we are looking forward to your questions. All right, so the agenda of our session will be like follows.", "tokens": [407, 321, 366, 1237, 2128, 281, 428, 1651, 13, 1057, 558, 11, 370, 264, 9829, 295, 527, 5481, 486, 312, 411, 10002, 13], "temperature": 0.0, "avg_logprob": -0.09787553211428085, "compression_ratio": 1.4736842105263157, "no_speech_prob": 7.135568739613518e-05}, {"id": 6, "seek": 4700, "start": 56.0, "end": 64.0, "text": " I think the first session agenda item can be very quick, seeing that you already spent like four hours on that topic.", "tokens": [286, 519, 264, 700, 5481, 9829, 3174, 393, 312, 588, 1702, 11, 2577, 300, 291, 1217, 4418, 411, 1451, 2496, 322, 300, 4829, 13], "temperature": 0.0, "avg_logprob": -0.09787553211428085, "compression_ratio": 1.4736842105263157, "no_speech_prob": 7.135568739613518e-05}, {"id": 7, "seek": 6400, "start": 64.0, "end": 81.0, "text": " We will then present a small case study where we basically tried to, where we ran different S-bomb generators at different points in time on an open source solution in order to see whether those tools agree on the S-bombs generated,", "tokens": [492, 486, 550, 1974, 257, 1359, 1389, 2979, 689, 321, 1936, 3031, 281, 11, 689, 321, 5872, 819, 318, 12, 65, 3548, 38662, 412, 819, 2793, 294, 565, 322, 364, 1269, 4009, 3827, 294, 1668, 281, 536, 1968, 729, 3873, 3986, 322, 264, 318, 12, 65, 298, 929, 10833, 11], "temperature": 0.0, "avg_logprob": -0.07748236542656309, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.0002377303462708369}, {"id": 8, "seek": 6400, "start": 81.0, "end": 90.0, "text": " whether the results produced are comparable, whether the results change over time, and to also pinpoint a couple of what we believe are deficiencies.", "tokens": [1968, 264, 3542, 7126, 366, 25323, 11, 1968, 264, 3542, 1319, 670, 565, 11, 293, 281, 611, 40837, 257, 1916, 295, 437, 321, 1697, 366, 19248, 31294, 13], "temperature": 0.0, "avg_logprob": -0.07748236542656309, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.0002377303462708369}, {"id": 9, "seek": 9000, "start": 90.0, "end": 105.0, "text": " And then Joseph will explain why it is beneficial and helpful to go from the granularity of entire components to the code level to look at functions and methods and call graphs.", "tokens": [400, 550, 11170, 486, 2903, 983, 309, 307, 14072, 293, 4961, 281, 352, 490, 264, 39962, 507, 295, 2302, 6677, 281, 264, 3089, 1496, 281, 574, 412, 6828, 293, 7150, 293, 818, 24877, 13], "temperature": 0.0, "avg_logprob": -0.0803654451627989, "compression_ratio": 1.509433962264151, "no_speech_prob": 2.1781517716590315e-05}, {"id": 10, "seek": 9000, "start": 105.0, "end": 115.0, "text": " All right, so that is a software bill of material in the Cyclone DX format, which is one of the, let's say, prominent standards in this space.", "tokens": [1057, 558, 11, 370, 300, 307, 257, 4722, 2961, 295, 2527, 294, 264, 49173, 546, 48817, 7877, 11, 597, 307, 472, 295, 264, 11, 718, 311, 584, 11, 17034, 7787, 294, 341, 1901, 13], "temperature": 0.0, "avg_logprob": -0.0803654451627989, "compression_ratio": 1.509433962264151, "no_speech_prob": 2.1781517716590315e-05}, {"id": 11, "seek": 11500, "start": 115.0, "end": 120.0, "text": " Cyclone DX has a little bit of a security background. That's why we kind of choose this.", "tokens": [49173, 546, 48817, 575, 257, 707, 857, 295, 257, 3825, 3678, 13, 663, 311, 983, 321, 733, 295, 2826, 341, 13], "temperature": 0.0, "avg_logprob": -0.07389230619777333, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.218655911041424e-05}, {"id": 12, "seek": 11500, "start": 120.0, "end": 124.0, "text": " It seemed more natural to our previous works.", "tokens": [467, 6576, 544, 3303, 281, 527, 3894, 1985, 13], "temperature": 0.0, "avg_logprob": -0.07389230619777333, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.218655911041424e-05}, {"id": 13, "seek": 11500, "start": 124.0, "end": 128.0, "text": " At the very top is kind of the S-bomb format and version.", "tokens": [1711, 264, 588, 1192, 307, 733, 295, 264, 318, 12, 65, 3548, 7877, 293, 3037, 13], "temperature": 0.0, "avg_logprob": -0.07389230619777333, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.218655911041424e-05}, {"id": 14, "seek": 11500, "start": 128.0, "end": 134.0, "text": " Here in the middle you have the software product for which the S-bomb is generated.", "tokens": [1692, 294, 264, 2808, 291, 362, 264, 4722, 1674, 337, 597, 264, 318, 12, 65, 3548, 307, 10833, 13], "temperature": 0.0, "avg_logprob": -0.07389230619777333, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.218655911041424e-05}, {"id": 15, "seek": 11500, "start": 134.0, "end": 137.0, "text": " Here you have the S-bomb generator tool.", "tokens": [1692, 291, 362, 264, 318, 12, 65, 3548, 19265, 2290, 13], "temperature": 0.0, "avg_logprob": -0.07389230619777333, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.218655911041424e-05}, {"id": 16, "seek": 13700, "start": 137.0, "end": 146.0, "text": " We anonymized those solutions. We didn't think it is necessary to point out problems in individual open source solutions,", "tokens": [492, 37293, 1602, 729, 6547, 13, 492, 994, 380, 519, 309, 307, 4818, 281, 935, 484, 2740, 294, 2609, 1269, 4009, 6547, 11], "temperature": 0.0, "avg_logprob": -0.06849512399411668, "compression_ratio": 1.6642066420664208, "no_speech_prob": 2.668346496648155e-05}, {"id": 17, "seek": 13700, "start": 146.0, "end": 150.0, "text": " but we wanted to more raise awareness for the general problem of comparability and so forth.", "tokens": [457, 321, 1415, 281, 544, 5300, 8888, 337, 264, 2674, 1154, 295, 6311, 2310, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.06849512399411668, "compression_ratio": 1.6642066420664208, "no_speech_prob": 2.668346496648155e-05}, {"id": 18, "seek": 13700, "start": 150.0, "end": 158.0, "text": " And then at the bottom here you have an array of components that the S-bomb generator found in the software analyzed.", "tokens": [400, 550, 412, 264, 2767, 510, 291, 362, 364, 10225, 295, 6677, 300, 264, 318, 12, 65, 3548, 19265, 1352, 294, 264, 4722, 28181, 13], "temperature": 0.0, "avg_logprob": -0.06849512399411668, "compression_ratio": 1.6642066420664208, "no_speech_prob": 2.668346496648155e-05}, {"id": 19, "seek": 13700, "start": 158.0, "end": 166.0, "text": " And of course there will be many, and I highlighted a couple of fields that we will be looking at in much more detail.", "tokens": [400, 295, 1164, 456, 486, 312, 867, 11, 293, 286, 17173, 257, 1916, 295, 7909, 300, 321, 486, 312, 1237, 412, 294, 709, 544, 2607, 13], "temperature": 0.0, "avg_logprob": -0.06849512399411668, "compression_ratio": 1.6642066420664208, "no_speech_prob": 2.668346496648155e-05}, {"id": 20, "seek": 16600, "start": 166.0, "end": 173.0, "text": " So there is the name, there is a CPE, there is a Perl, a package URL, or a group and a version.", "tokens": [407, 456, 307, 264, 1315, 11, 456, 307, 257, 383, 5208, 11, 456, 307, 257, 3026, 75, 11, 257, 7372, 12905, 11, 420, 257, 1594, 293, 257, 3037, 13], "temperature": 0.0, "avg_logprob": -0.0855910524408868, "compression_ratio": 1.567099567099567, "no_speech_prob": 1.1477838597784285e-05}, {"id": 21, "seek": 16600, "start": 173.0, "end": 182.0, "text": " So these are all different fields belonging to naming schemes in order to describe or identify the component that was found.", "tokens": [407, 613, 366, 439, 819, 7909, 22957, 281, 25290, 26954, 294, 1668, 281, 6786, 420, 5876, 264, 6542, 300, 390, 1352, 13], "temperature": 0.0, "avg_logprob": -0.0855910524408868, "compression_ratio": 1.567099567099567, "no_speech_prob": 1.1477838597784285e-05}, {"id": 22, "seek": 16600, "start": 182.0, "end": 190.0, "text": " And then they have properties that can be all kind of proprietary properties the S-bomb generator decided to include.", "tokens": [400, 550, 436, 362, 7221, 300, 393, 312, 439, 733, 295, 38992, 7221, 264, 318, 12, 65, 3548, 19265, 3047, 281, 4090, 13], "temperature": 0.0, "avg_logprob": -0.0855910524408868, "compression_ratio": 1.567099567099567, "no_speech_prob": 1.1477838597784285e-05}, {"id": 23, "seek": 16600, "start": 190.0, "end": 193.0, "text": " Why do we need S-bombs?", "tokens": [1545, 360, 321, 643, 318, 12, 65, 298, 929, 30], "temperature": 0.0, "avg_logprob": -0.0855910524408868, "compression_ratio": 1.567099567099567, "no_speech_prob": 1.1477838597784285e-05}, {"id": 24, "seek": 19300, "start": 193.0, "end": 199.0, "text": " I think in the interest of time I just skip this altogether and go to the case study right away.", "tokens": [286, 519, 294, 264, 1179, 295, 565, 286, 445, 10023, 341, 19051, 293, 352, 281, 264, 1389, 2979, 558, 1314, 13], "temperature": 0.0, "avg_logprob": -0.10816268461296358, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.316681457159575e-05}, {"id": 25, "seek": 19300, "start": 199.0, "end": 207.0, "text": " The idea of this, the motivation for this came basically by reading through a couple of documents.", "tokens": [440, 1558, 295, 341, 11, 264, 12335, 337, 341, 1361, 1936, 538, 3760, 807, 257, 1916, 295, 8512, 13], "temperature": 0.0, "avg_logprob": -0.10816268461296358, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.316681457159575e-05}, {"id": 26, "seek": 19300, "start": 207.0, "end": 213.0, "text": " The first, and I have cited them here at the bottom, is a research paper that was done recently.", "tokens": [440, 700, 11, 293, 286, 362, 30134, 552, 510, 412, 264, 2767, 11, 307, 257, 2132, 3035, 300, 390, 1096, 3938, 13], "temperature": 0.0, "avg_logprob": -0.10816268461296358, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.316681457159575e-05}, {"id": 27, "seek": 19300, "start": 213.0, "end": 216.0, "text": " There is I think a couple of interviews and surveys.", "tokens": [821, 307, 286, 519, 257, 1916, 295, 12318, 293, 22711, 13], "temperature": 0.0, "avg_logprob": -0.10816268461296358, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.316681457159575e-05}, {"id": 28, "seek": 21600, "start": 216.0, "end": 224.0, "text": " And there were some statements from the survey participants who said that an S-bomb is not something that is static, that you create at a given point in time,", "tokens": [400, 456, 645, 512, 12363, 490, 264, 8984, 10503, 567, 848, 300, 364, 318, 12, 65, 3548, 307, 406, 746, 300, 307, 13437, 11, 300, 291, 1884, 412, 257, 2212, 935, 294, 565, 11], "temperature": 0.0, "avg_logprob": -0.125061559677124, "compression_ratio": 1.6996197718631179, "no_speech_prob": 6.1435994211933576e-06}, {"id": 29, "seek": 21600, "start": 224.0, "end": 231.0, "text": " and then you assume it to be stable, but that is something that is evolving throughout the software development lifecycle.", "tokens": [293, 550, 291, 6552, 309, 281, 312, 8351, 11, 457, 300, 307, 746, 300, 307, 21085, 3710, 264, 4722, 3250, 45722, 13], "temperature": 0.0, "avg_logprob": -0.125061559677124, "compression_ratio": 1.6996197718631179, "no_speech_prob": 6.1435994211933576e-06}, {"id": 30, "seek": 21600, "start": 231.0, "end": 238.0, "text": " And then a corresponding information is also provided in this guidance from the NTIA,", "tokens": [400, 550, 257, 11760, 1589, 307, 611, 5649, 294, 341, 10056, 490, 264, 426, 5422, 32, 11], "temperature": 0.0, "avg_logprob": -0.125061559677124, "compression_ratio": 1.6996197718631179, "no_speech_prob": 6.1435994211933576e-06}, {"id": 31, "seek": 21600, "start": 238.0, "end": 243.0, "text": " the minimum elements for a software bill of materials on pages 6 to 7 they say,", "tokens": [264, 7285, 4959, 337, 257, 4722, 2961, 295, 5319, 322, 7183, 1386, 281, 1614, 436, 584, 11], "temperature": 0.0, "avg_logprob": -0.125061559677124, "compression_ratio": 1.6996197718631179, "no_speech_prob": 6.1435994211933576e-06}, {"id": 32, "seek": 24300, "start": 243.0, "end": 249.0, "text": " you can generate an S-bomb at different points on the sources, after the build, maybe at the docker image,", "tokens": [291, 393, 8460, 364, 318, 12, 65, 3548, 412, 819, 2793, 322, 264, 7139, 11, 934, 264, 1322, 11, 1310, 412, 264, 360, 9178, 3256, 11], "temperature": 0.0, "avg_logprob": -0.09381587164742607, "compression_ratio": 1.6309012875536482, "no_speech_prob": 9.816570127441082e-06}, {"id": 33, "seek": 24300, "start": 249.0, "end": 254.0, "text": " and the S-bomb should actually contain this information when it has been created.", "tokens": [293, 264, 318, 12, 65, 3548, 820, 767, 5304, 341, 1589, 562, 309, 575, 668, 2942, 13], "temperature": 0.0, "avg_logprob": -0.09381587164742607, "compression_ratio": 1.6309012875536482, "no_speech_prob": 9.816570127441082e-06}, {"id": 34, "seek": 24300, "start": 254.0, "end": 257.0, "text": " That would be important for the consumer.", "tokens": [663, 576, 312, 1021, 337, 264, 9711, 13], "temperature": 0.0, "avg_logprob": -0.09381587164742607, "compression_ratio": 1.6309012875536482, "no_speech_prob": 9.816570127441082e-06}, {"id": 35, "seek": 24300, "start": 257.0, "end": 265.0, "text": " So we looked at different S-bomb generators and then of course, but in order to do a proper comparison,", "tokens": [407, 321, 2956, 412, 819, 318, 12, 65, 3548, 38662, 293, 550, 295, 1164, 11, 457, 294, 1668, 281, 360, 257, 2296, 9660, 11], "temperature": 0.0, "avg_logprob": -0.09381587164742607, "compression_ratio": 1.6309012875536482, "no_speech_prob": 9.816570127441082e-06}, {"id": 36, "seek": 24300, "start": 265.0, "end": 268.0, "text": " we need to kind of a software to be analyzed.", "tokens": [321, 643, 281, 733, 295, 257, 4722, 281, 312, 28181, 13], "temperature": 0.0, "avg_logprob": -0.09381587164742607, "compression_ratio": 1.6309012875536482, "no_speech_prob": 9.816570127441082e-06}, {"id": 37, "seek": 26800, "start": 268.0, "end": 279.0, "text": " And so as sample software, we have chosen Eclipse Steady, which is a security solution that I've been contributing to over many years,", "tokens": [400, 370, 382, 6889, 4722, 11, 321, 362, 8614, 462, 27197, 3592, 880, 11, 597, 307, 257, 3825, 3827, 300, 286, 600, 668, 19270, 281, 670, 867, 924, 11], "temperature": 0.0, "avg_logprob": -0.11676088968912761, "compression_ratio": 1.5236220472440944, "no_speech_prob": 1.044860346155474e-05}, {"id": 38, "seek": 26800, "start": 279.0, "end": 285.0, "text": " so one that I know very well because I thought that would be helpful to understand the quality of what is generated.", "tokens": [370, 472, 300, 286, 458, 588, 731, 570, 286, 1194, 300, 576, 312, 4961, 281, 1223, 264, 3125, 295, 437, 307, 10833, 13], "temperature": 0.0, "avg_logprob": -0.11676088968912761, "compression_ratio": 1.5236220472440944, "no_speech_prob": 1.044860346155474e-05}, {"id": 39, "seek": 26800, "start": 285.0, "end": 290.0, "text": " In particular, we looked at one of the modules of that solution.", "tokens": [682, 1729, 11, 321, 2956, 412, 472, 295, 264, 16679, 295, 300, 3827, 13], "temperature": 0.0, "avg_logprob": -0.11676088968912761, "compression_ratio": 1.5236220472440944, "no_speech_prob": 1.044860346155474e-05}, {"id": 40, "seek": 26800, "start": 290.0, "end": 295.0, "text": " It's a spring boot REST service that is developed with Java and Maven.", "tokens": [467, 311, 257, 5587, 11450, 497, 14497, 2643, 300, 307, 4743, 365, 10745, 293, 4042, 553, 13], "temperature": 0.0, "avg_logprob": -0.11676088968912761, "compression_ratio": 1.5236220472440944, "no_speech_prob": 1.044860346155474e-05}, {"id": 41, "seek": 29500, "start": 295.0, "end": 301.0, "text": " It will be deployed using a docker image that is downloadable from Docker Hub.", "tokens": [467, 486, 312, 17826, 1228, 257, 360, 9178, 3256, 300, 307, 5484, 712, 490, 33772, 18986, 13], "temperature": 0.0, "avg_logprob": -0.08043454707353964, "compression_ratio": 1.5619469026548674, "no_speech_prob": 9.817121281230357e-06}, {"id": 42, "seek": 29500, "start": 301.0, "end": 311.0, "text": " And the ground truth, which is the information that we will take later on to say whether the S-bomb generators perform good or bad,", "tokens": [400, 264, 2727, 3494, 11, 597, 307, 264, 1589, 300, 321, 486, 747, 1780, 322, 281, 584, 1968, 264, 318, 12, 65, 3548, 38662, 2042, 665, 420, 1578, 11], "temperature": 0.0, "avg_logprob": -0.08043454707353964, "compression_ratio": 1.5619469026548674, "no_speech_prob": 9.817121281230357e-06}, {"id": 43, "seek": 29500, "start": 311.0, "end": 313.0, "text": " is what you see here.", "tokens": [307, 437, 291, 536, 510, 13], "temperature": 0.0, "avg_logprob": -0.08043454707353964, "compression_ratio": 1.5619469026548674, "no_speech_prob": 9.817121281230357e-06}, {"id": 44, "seek": 29500, "start": 313.0, "end": 317.0, "text": " So there are 114 compile time dependencies.", "tokens": [407, 456, 366, 2975, 19, 31413, 565, 36606, 13], "temperature": 0.0, "avg_logprob": -0.08043454707353964, "compression_ratio": 1.5619469026548674, "no_speech_prob": 9.817121281230357e-06}, {"id": 45, "seek": 29500, "start": 317.0, "end": 321.0, "text": " So they are required for compiling the Java sources to runtime dependencies.", "tokens": [407, 436, 366, 4739, 337, 715, 4883, 264, 10745, 7139, 281, 34474, 36606, 13], "temperature": 0.0, "avg_logprob": -0.08043454707353964, "compression_ratio": 1.5619469026548674, "no_speech_prob": 9.817121281230357e-06}, {"id": 46, "seek": 32100, "start": 321.0, "end": 325.0, "text": " They should be present where the production software runs.", "tokens": [814, 820, 312, 1974, 689, 264, 4265, 4722, 6676, 13], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 47, "seek": 32100, "start": 325.0, "end": 330.0, "text": " There are 41 test dependencies, JUnit and other stuff.", "tokens": [821, 366, 18173, 1500, 36606, 11, 508, 12405, 270, 293, 661, 1507, 13], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 48, "seek": 32100, "start": 330.0, "end": 332.0, "text": " Good.", "tokens": [2205, 13], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 49, "seek": 32100, "start": 332.0, "end": 339.0, "text": " Before showing the results or walking through the results, a little bit of background because that is very important.", "tokens": [4546, 4099, 264, 3542, 420, 4494, 807, 264, 3542, 11, 257, 707, 857, 295, 3678, 570, 300, 307, 588, 1021, 13], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 50, "seek": 32100, "start": 339.0, "end": 342.0, "text": " How do we name those components, right?", "tokens": [1012, 360, 321, 1315, 729, 6677, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 51, "seek": 32100, "start": 342.0, "end": 348.0, "text": " And it is important to understand there are context-specific component identifiers.", "tokens": [400, 309, 307, 1021, 281, 1223, 456, 366, 4319, 12, 29258, 6542, 2473, 23463, 13], "temperature": 0.0, "avg_logprob": -0.09774985767546154, "compression_ratio": 1.5627705627705628, "no_speech_prob": 1.5934685507090762e-05}, {"id": 52, "seek": 34800, "start": 348.0, "end": 351.0, "text": " So, for example, Maven.", "tokens": [407, 11, 337, 1365, 11, 4042, 553, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 53, "seek": 34800, "start": 351.0, "end": 353.0, "text": " So Maven coordinates.", "tokens": [407, 4042, 553, 21056, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 54, "seek": 34800, "start": 353.0, "end": 355.0, "text": " This is what is used by the Java developers.", "tokens": [639, 307, 437, 307, 1143, 538, 264, 10745, 8849, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 55, "seek": 34800, "start": 355.0, "end": 361.0, "text": " It is consisting of a group identifier, artifact identifier and a version.", "tokens": [467, 307, 33921, 295, 257, 1594, 45690, 11, 34806, 45690, 293, 257, 3037, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 56, "seek": 34800, "start": 361.0, "end": 365.0, "text": " This is typically the graph of the coordinates of a Maven artifact.", "tokens": [639, 307, 5850, 264, 4295, 295, 264, 21056, 295, 257, 4042, 553, 34806, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 57, "seek": 34800, "start": 365.0, "end": 367.0, "text": " You would download from Maven Central.", "tokens": [509, 576, 5484, 490, 4042, 553, 9701, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 58, "seek": 34800, "start": 367.0, "end": 371.0, "text": " There are some optional identifier elements.", "tokens": [821, 366, 512, 17312, 45690, 4959, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 59, "seek": 34800, "start": 371.0, "end": 375.0, "text": " An example here is org DOM4J, DOM4J version 213.", "tokens": [1107, 1365, 510, 307, 14045, 35727, 19, 41, 11, 35727, 19, 41, 3037, 5080, 18, 13], "temperature": 0.0, "avg_logprob": -0.15025300025939942, "compression_ratio": 1.6339285714285714, "no_speech_prob": 1.0449736691953149e-05}, {"id": 60, "seek": 37500, "start": 375.0, "end": 380.0, "text": " Another context-specific component identifier is the common platform enumeration,", "tokens": [3996, 4319, 12, 29258, 6542, 45690, 307, 264, 2689, 3663, 465, 449, 5053, 11], "temperature": 0.0, "avg_logprob": -0.08608765602111816, "compression_ratio": 1.5975609756097562, "no_speech_prob": 1.3005040273128543e-05}, {"id": 61, "seek": 37500, "start": 380.0, "end": 385.0, "text": " which is comprised of a part, a vendor, a product, a version and a couple of other fields.", "tokens": [597, 307, 38062, 295, 257, 644, 11, 257, 24321, 11, 257, 1674, 11, 257, 3037, 293, 257, 1916, 295, 661, 7909, 13], "temperature": 0.0, "avg_logprob": -0.08608765602111816, "compression_ratio": 1.5975609756097562, "no_speech_prob": 1.3005040273128543e-05}, {"id": 62, "seek": 37500, "start": 385.0, "end": 391.0, "text": " And they are used by the NVD in order to say what are the components affected by a given vulnerability.", "tokens": [400, 436, 366, 1143, 538, 264, 46512, 35, 294, 1668, 281, 584, 437, 366, 264, 6677, 8028, 538, 257, 2212, 24210, 13], "temperature": 0.0, "avg_logprob": -0.08608765602111816, "compression_ratio": 1.5975609756097562, "no_speech_prob": 1.3005040273128543e-05}, {"id": 63, "seek": 37500, "start": 391.0, "end": 398.0, "text": " So, for example, CVE 2020 something is affecting a component CPE 2.3,", "tokens": [407, 11, 337, 1365, 11, 383, 7540, 4808, 746, 307, 17476, 257, 6542, 383, 5208, 568, 13, 18, 11], "temperature": 0.0, "avg_logprob": -0.08608765602111816, "compression_ratio": 1.5975609756097562, "no_speech_prob": 1.3005040273128543e-05}, {"id": 64, "seek": 37500, "start": 398.0, "end": 402.0, "text": " which is the version of the CPE naming scheme.", "tokens": [597, 307, 264, 3037, 295, 264, 383, 5208, 25290, 12232, 13], "temperature": 0.0, "avg_logprob": -0.08608765602111816, "compression_ratio": 1.5975609756097562, "no_speech_prob": 1.3005040273128543e-05}, {"id": 65, "seek": 40200, "start": 402.0, "end": 405.0, "text": " The vendor is DOM4J project.", "tokens": [440, 24321, 307, 35727, 19, 41, 1716, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 66, "seek": 40200, "start": 405.0, "end": 408.0, "text": " It's not exactly the same than before, a pity.", "tokens": [467, 311, 406, 2293, 264, 912, 813, 949, 11, 257, 21103, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 67, "seek": 40200, "start": 408.0, "end": 410.0, "text": " DOM4J is the product name.", "tokens": [35727, 19, 41, 307, 264, 1674, 1315, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 68, "seek": 40200, "start": 410.0, "end": 414.0, "text": " And then, besides, there are universal component identifiers.", "tokens": [400, 550, 11, 11868, 11, 456, 366, 11455, 6542, 2473, 23463, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 69, "seek": 40200, "start": 414.0, "end": 419.0, "text": " One that got a lot of traction in recent years is the Perl package URL.", "tokens": [1485, 300, 658, 257, 688, 295, 23558, 294, 5162, 924, 307, 264, 3026, 75, 7372, 12905, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 70, "seek": 40200, "start": 419.0, "end": 424.0, "text": " It has seven elements that I put here.", "tokens": [467, 575, 3407, 4959, 300, 286, 829, 510, 13], "temperature": 0.0, "avg_logprob": -0.12548831701278687, "compression_ratio": 1.4102564102564104, "no_speech_prob": 4.8300167691195384e-05}, {"id": 71, "seek": 42400, "start": 424.0, "end": 432.0, "text": " And, you know, using S-bombs in order to use it for understanding whether there are known vulnerabilities,", "tokens": [400, 11, 291, 458, 11, 1228, 318, 12, 65, 298, 929, 294, 1668, 281, 764, 309, 337, 3701, 1968, 456, 366, 2570, 37633, 11], "temperature": 0.0, "avg_logprob": -0.08488337005056985, "compression_ratio": 1.5209302325581395, "no_speech_prob": 3.1679071980761364e-05}, {"id": 72, "seek": 42400, "start": 432.0, "end": 436.0, "text": " what is the quality of the projects used and so forth,", "tokens": [437, 307, 264, 3125, 295, 264, 4455, 1143, 293, 370, 5220, 11], "temperature": 0.0, "avg_logprob": -0.08488337005056985, "compression_ratio": 1.5209302325581395, "no_speech_prob": 3.1679071980761364e-05}, {"id": 73, "seek": 42400, "start": 436.0, "end": 439.0, "text": " requires to map all those names.", "tokens": [7029, 281, 4471, 439, 729, 5288, 13], "temperature": 0.0, "avg_logprob": -0.08488337005056985, "compression_ratio": 1.5209302325581395, "no_speech_prob": 3.1679071980761364e-05}, {"id": 74, "seek": 42400, "start": 439.0, "end": 443.0, "text": " Names that are given by people somehow.", "tokens": [426, 1632, 300, 366, 2212, 538, 561, 6063, 13], "temperature": 0.0, "avg_logprob": -0.08488337005056985, "compression_ratio": 1.5209302325581395, "no_speech_prob": 3.1679071980761364e-05}, {"id": 75, "seek": 42400, "start": 443.0, "end": 451.0, "text": " And that this can go wrong becomes evident by picking one example that I generated later on.", "tokens": [400, 300, 341, 393, 352, 2085, 3643, 16371, 538, 8867, 472, 1365, 300, 286, 10833, 1780, 322, 13], "temperature": 0.0, "avg_logprob": -0.08488337005056985, "compression_ratio": 1.5209302325581395, "no_speech_prob": 3.1679071980761364e-05}, {"id": 76, "seek": 45100, "start": 451.0, "end": 457.0, "text": " So, this is a copy paste from one of the S-bombs, the Cyclone DX S-bombs.", "tokens": [407, 11, 341, 307, 257, 5055, 9163, 490, 472, 295, 264, 318, 12, 65, 298, 929, 11, 264, 49173, 546, 48817, 318, 12, 65, 298, 929, 13], "temperature": 0.0, "avg_logprob": -0.12265484068128797, "compression_ratio": 1.461139896373057, "no_speech_prob": 1.6961730580078438e-05}, {"id": 77, "seek": 45100, "start": 457.0, "end": 464.0, "text": " And you see here that the Perl here, this universal component identifier", "tokens": [400, 291, 536, 510, 300, 264, 3026, 75, 510, 11, 341, 11455, 6542, 45690], "temperature": 0.0, "avg_logprob": -0.12265484068128797, "compression_ratio": 1.461139896373057, "no_speech_prob": 1.6961730580078438e-05}, {"id": 78, "seek": 45100, "start": 464.0, "end": 469.0, "text": " that was put in by the S-bomb generator says it's DOM4J.", "tokens": [300, 390, 829, 294, 538, 264, 318, 12, 65, 3548, 19265, 1619, 309, 311, 35727, 19, 41, 13], "temperature": 0.0, "avg_logprob": -0.12265484068128797, "compression_ratio": 1.461139896373057, "no_speech_prob": 1.6961730580078438e-05}, {"id": 79, "seek": 45100, "start": 469.0, "end": 475.0, "text": " Too bad it doesn't map to org DOM4J, which is the identifier on Maven Central.", "tokens": [11395, 1578, 309, 1177, 380, 4471, 281, 14045, 35727, 19, 41, 11, 597, 307, 264, 45690, 322, 4042, 553, 9701, 13], "temperature": 0.0, "avg_logprob": -0.12265484068128797, "compression_ratio": 1.461139896373057, "no_speech_prob": 1.6961730580078438e-05}, {"id": 80, "seek": 47500, "start": 475.0, "end": 481.0, "text": " So, if you want to look up a new version of that component, well, bad luck you don't have the right identifier.", "tokens": [407, 11, 498, 291, 528, 281, 574, 493, 257, 777, 3037, 295, 300, 6542, 11, 731, 11, 1578, 3668, 291, 500, 380, 362, 264, 558, 45690, 13], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 81, "seek": 47500, "start": 481.0, "end": 486.0, "text": " If you want to compare this CPE to search for known vulnerabilities,", "tokens": [759, 291, 528, 281, 6794, 341, 383, 5208, 281, 3164, 337, 2570, 37633, 11], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 82, "seek": 47500, "start": 486.0, "end": 488.0, "text": " well, it's not the same identifier.", "tokens": [731, 11, 309, 311, 406, 264, 912, 45690, 13], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 83, "seek": 47500, "start": 488.0, "end": 492.0, "text": " They found DOM4J, but it's DOM4J project.", "tokens": [814, 1352, 35727, 19, 41, 11, 457, 309, 311, 35727, 19, 41, 1716, 13], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 84, "seek": 47500, "start": 492.0, "end": 495.0, "text": " Too bad.", "tokens": [11395, 1578, 13], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 85, "seek": 47500, "start": 495.0, "end": 500.0, "text": " So, the approach we have taken is we selected three open source S-bomb generators.", "tokens": [407, 11, 264, 3109, 321, 362, 2726, 307, 321, 8209, 1045, 1269, 4009, 318, 12, 65, 3548, 38662, 13], "temperature": 0.0, "avg_logprob": -0.06863969326019287, "compression_ratio": 1.5283842794759825, "no_speech_prob": 1.0782004210341256e-05}, {"id": 86, "seek": 50000, "start": 500.0, "end": 506.0, "text": " A and B are generic solutions. You can basically throw anything at them.", "tokens": [316, 293, 363, 366, 19577, 6547, 13, 509, 393, 1936, 3507, 1340, 412, 552, 13], "temperature": 0.0, "avg_logprob": -0.1304950275640378, "compression_ratio": 1.5165876777251184, "no_speech_prob": 2.885373578465078e-05}, {"id": 87, "seek": 50000, "start": 506.0, "end": 510.0, "text": " A directory, an image, a tarball, a single, whatever.", "tokens": [316, 21120, 11, 364, 3256, 11, 257, 3112, 3129, 11, 257, 2167, 11, 2035, 13], "temperature": 0.0, "avg_logprob": -0.1304950275640378, "compression_ratio": 1.5165876777251184, "no_speech_prob": 2.885373578465078e-05}, {"id": 88, "seek": 50000, "start": 510.0, "end": 515.0, "text": " And then C is a Maven plug-in that hooks into Maven's build process.", "tokens": [400, 550, 383, 307, 257, 4042, 553, 5452, 12, 259, 300, 26485, 666, 4042, 553, 311, 1322, 1399, 13], "temperature": 0.0, "avg_logprob": -0.1304950275640378, "compression_ratio": 1.5165876777251184, "no_speech_prob": 2.885373578465078e-05}, {"id": 89, "seek": 50000, "start": 515.0, "end": 519.0, "text": " And we ran those three tools at three different points in time.", "tokens": [400, 321, 5872, 729, 1045, 3873, 412, 1045, 819, 2793, 294, 565, 13], "temperature": 0.0, "avg_logprob": -0.1304950275640378, "compression_ratio": 1.5165876777251184, "no_speech_prob": 2.885373578465078e-05}, {"id": 90, "seek": 50000, "start": 519.0, "end": 523.0, "text": " After cloning the open source project, after getting cloned,", "tokens": [2381, 596, 16638, 264, 1269, 4009, 1716, 11, 934, 1242, 596, 19009, 11], "temperature": 0.0, "avg_logprob": -0.1304950275640378, "compression_ratio": 1.5165876777251184, "no_speech_prob": 2.885373578465078e-05}, {"id": 91, "seek": 52300, "start": 523.0, "end": 534.0, "text": " after creating the Maven package, or after running Maven package to create the self-contained spring boot application that you can run,", "tokens": [934, 4084, 264, 4042, 553, 7372, 11, 420, 934, 2614, 4042, 553, 7372, 281, 1884, 264, 2698, 12, 9000, 3563, 5587, 11450, 3861, 300, 291, 393, 1190, 11], "temperature": 0.0, "avg_logprob": -0.12401623044695173, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.0287782970408443e-05}, {"id": 92, "seek": 52300, "start": 534.0, "end": 537.0, "text": " and after finally on the Docker image.", "tokens": [293, 934, 2721, 322, 264, 33772, 3256, 13], "temperature": 0.0, "avg_logprob": -0.12401623044695173, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.0287782970408443e-05}, {"id": 93, "seek": 52300, "start": 537.0, "end": 546.0, "text": " On the Docker image, we could just run A and B because C is dedicated to be integrated into the Maven build tool.", "tokens": [1282, 264, 33772, 3256, 11, 321, 727, 445, 1190, 316, 293, 363, 570, 383, 307, 8374, 281, 312, 10919, 666, 264, 4042, 553, 1322, 2290, 13], "temperature": 0.0, "avg_logprob": -0.12401623044695173, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.0287782970408443e-05}, {"id": 94, "seek": 54600, "start": 546.0, "end": 553.0, "text": " And so we collected basically eight different S-bombs from those eight runs.", "tokens": [400, 370, 321, 11087, 1936, 3180, 819, 318, 12, 65, 298, 929, 490, 729, 3180, 6676, 13], "temperature": 0.0, "avg_logprob": -0.06867168567798755, "compression_ratio": 1.5707317073170732, "no_speech_prob": 1.4278220078267623e-05}, {"id": 95, "seek": 54600, "start": 553.0, "end": 559.0, "text": " And the color coding will stay the same for the Venn diagrams I will be showing on the next slides.", "tokens": [400, 264, 2017, 17720, 486, 1754, 264, 912, 337, 264, 691, 1857, 36709, 286, 486, 312, 4099, 322, 264, 958, 9788, 13], "temperature": 0.0, "avg_logprob": -0.06867168567798755, "compression_ratio": 1.5707317073170732, "no_speech_prob": 1.4278220078267623e-05}, {"id": 96, "seek": 54600, "start": 559.0, "end": 561.0, "text": " And then we did three things.", "tokens": [400, 550, 321, 630, 1045, 721, 13], "temperature": 0.0, "avg_logprob": -0.06867168567798755, "compression_ratio": 1.5707317073170732, "no_speech_prob": 1.4278220078267623e-05}, {"id": 97, "seek": 54600, "start": 561.0, "end": 565.0, "text": " We computed precision and recall of those tools.", "tokens": [492, 40610, 18356, 293, 9901, 295, 729, 3873, 13], "temperature": 0.0, "avg_logprob": -0.06867168567798755, "compression_ratio": 1.5707317073170732, "no_speech_prob": 1.4278220078267623e-05}, {"id": 98, "seek": 54600, "start": 565.0, "end": 571.0, "text": " So, which means we compared what they found with the ground truth.", "tokens": [407, 11, 597, 1355, 321, 5347, 437, 436, 1352, 365, 264, 2727, 3494, 13], "temperature": 0.0, "avg_logprob": -0.06867168567798755, "compression_ratio": 1.5707317073170732, "no_speech_prob": 1.4278220078267623e-05}, {"id": 99, "seek": 57100, "start": 571.0, "end": 576.0, "text": " And so precision says basically how many false positives are there in.", "tokens": [400, 370, 18356, 1619, 1936, 577, 867, 7908, 35127, 366, 456, 294, 13], "temperature": 0.0, "avg_logprob": -0.08621278405189514, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.427999359293608e-05}, {"id": 100, "seek": 57100, "start": 576.0, "end": 581.0, "text": " False positives is the thing tells me there is a component which I know is not there.", "tokens": [50040, 35127, 307, 264, 551, 5112, 385, 456, 307, 257, 6542, 597, 286, 458, 307, 406, 456, 13], "temperature": 0.0, "avg_logprob": -0.08621278405189514, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.427999359293608e-05}, {"id": 101, "seek": 57100, "start": 581.0, "end": 583.0, "text": " Not so useful.", "tokens": [1726, 370, 4420, 13], "temperature": 0.0, "avg_logprob": -0.08621278405189514, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.427999359293608e-05}, {"id": 102, "seek": 57100, "start": 583.0, "end": 591.0, "text": " Recall is for measuring false negatives, which is the tool didn't generate a component even though it is there.", "tokens": [9647, 336, 307, 337, 13389, 7908, 40019, 11, 597, 307, 264, 2290, 994, 380, 8460, 257, 6542, 754, 1673, 309, 307, 456, 13], "temperature": 0.0, "avg_logprob": -0.08621278405189514, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.427999359293608e-05}, {"id": 103, "seek": 57100, "start": 591.0, "end": 595.0, "text": " Also not so helpful, especially for vulnerable dependencies.", "tokens": [2743, 406, 370, 4961, 11, 2318, 337, 10955, 36606, 13], "temperature": 0.0, "avg_logprob": -0.08621278405189514, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.427999359293608e-05}, {"id": 104, "seek": 59500, "start": 595.0, "end": 608.0, "text": " And then with those S-bombs, so this is kind of the quality, the accuracy of the tools judged independently against the ground truth.", "tokens": [400, 550, 365, 729, 318, 12, 65, 298, 929, 11, 370, 341, 307, 733, 295, 264, 3125, 11, 264, 14170, 295, 264, 3873, 27485, 21761, 1970, 264, 2727, 3494, 13], "temperature": 0.0, "avg_logprob": -0.08735040517953727, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1838572390843183e-05}, {"id": 105, "seek": 59500, "start": 608.0, "end": 612.0, "text": " And then we created a couple of Venn diagrams to see how much do they actually agree.", "tokens": [400, 550, 321, 2942, 257, 1916, 295, 691, 1857, 36709, 281, 536, 577, 709, 360, 436, 767, 3986, 13], "temperature": 0.0, "avg_logprob": -0.08735040517953727, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1838572390843183e-05}, {"id": 106, "seek": 59500, "start": 612.0, "end": 619.0, "text": " So how much, what is the overlap of S-bomb A and B and C in those different times?", "tokens": [407, 577, 709, 11, 437, 307, 264, 19959, 295, 318, 12, 65, 3548, 316, 293, 363, 293, 383, 294, 729, 819, 1413, 30], "temperature": 0.0, "avg_logprob": -0.08735040517953727, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1838572390843183e-05}, {"id": 107, "seek": 59500, "start": 619.0, "end": 624.0, "text": " And then we looked at some additional properties.", "tokens": [400, 550, 321, 2956, 412, 512, 4497, 7221, 13], "temperature": 0.0, "avg_logprob": -0.08735040517953727, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1838572390843183e-05}, {"id": 108, "seek": 62400, "start": 624.0, "end": 636.0, "text": " All right, so this is the first, let's say, result running the three tools right after having cloned the open source project.", "tokens": [1057, 558, 11, 370, 341, 307, 264, 700, 11, 718, 311, 584, 11, 1874, 2614, 264, 1045, 3873, 558, 934, 1419, 596, 19009, 264, 1269, 4009, 1716, 13], "temperature": 0.0, "avg_logprob": -0.1252183715502421, "compression_ratio": 1.597609561752988, "no_speech_prob": 2.2120082576293498e-05}, {"id": 109, "seek": 62400, "start": 636.0, "end": 642.0, "text": " And let me start from the bottom of the slide with the tool C, which is easy, because that is actually perfect.", "tokens": [400, 718, 385, 722, 490, 264, 2767, 295, 264, 4137, 365, 264, 2290, 383, 11, 597, 307, 1858, 11, 570, 300, 307, 767, 2176, 13], "temperature": 0.0, "avg_logprob": -0.1252183715502421, "compression_ratio": 1.597609561752988, "no_speech_prob": 2.2120082576293498e-05}, {"id": 110, "seek": 62400, "start": 642.0, "end": 647.0, "text": " That integrated in the Maven dependency life cycle in this built tool.", "tokens": [663, 10919, 294, 264, 4042, 553, 33621, 993, 6586, 294, 341, 3094, 2290, 13], "temperature": 0.0, "avg_logprob": -0.1252183715502421, "compression_ratio": 1.597609561752988, "no_speech_prob": 2.2120082576293498e-05}, {"id": 111, "seek": 62400, "start": 647.0, "end": 653.0, "text": " Perfect precision, perfect recall, no false positives, no false negatives, right? Very good.", "tokens": [10246, 18356, 11, 2176, 9901, 11, 572, 7908, 35127, 11, 572, 7908, 40019, 11, 558, 30, 4372, 665, 13], "temperature": 0.0, "avg_logprob": -0.1252183715502421, "compression_ratio": 1.597609561752988, "no_speech_prob": 2.2120082576293498e-05}, {"id": 112, "seek": 65300, "start": 653.0, "end": 663.0, "text": " And it has a couple of additional properties such as SHA-1, SHA-250-6, digest, license, information, descriptions, a lot of useful stuff.", "tokens": [400, 309, 575, 257, 1916, 295, 4497, 7221, 1270, 382, 38820, 12, 16, 11, 38820, 12, 23538, 12, 21, 11, 13884, 11, 10476, 11, 1589, 11, 24406, 11, 257, 688, 295, 4420, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13902334915964226, "compression_ratio": 1.4898785425101215, "no_speech_prob": 1.8917966372100636e-05}, {"id": 113, "seek": 65300, "start": 663.0, "end": 673.0, "text": " Now then let's look at tool A. You see the blue bubble is much smaller, because it basically failed identifying many, many, many components.", "tokens": [823, 550, 718, 311, 574, 412, 2290, 316, 13, 509, 536, 264, 3344, 12212, 307, 709, 4356, 11, 570, 309, 1936, 7612, 16696, 867, 11, 867, 11, 867, 6677, 13], "temperature": 0.0, "avg_logprob": -0.13902334915964226, "compression_ratio": 1.4898785425101215, "no_speech_prob": 1.8917966372100636e-05}, {"id": 114, "seek": 65300, "start": 673.0, "end": 678.0, "text": " And the reason, I think, I mean, I need to speculate a little bit how the internals work.", "tokens": [400, 264, 1778, 11, 286, 519, 11, 286, 914, 11, 286, 643, 281, 40775, 257, 707, 857, 577, 264, 2154, 1124, 589, 13], "temperature": 0.0, "avg_logprob": -0.13902334915964226, "compression_ratio": 1.4898785425101215, "no_speech_prob": 1.8917966372100636e-05}, {"id": 115, "seek": 67800, "start": 678.0, "end": 687.0, "text": " But the reason, I guess, is that it looked at the POM.xml, which is where the developers declare dependencies, but it didn't resolve any dependencies.", "tokens": [583, 264, 1778, 11, 286, 2041, 11, 307, 300, 309, 2956, 412, 264, 430, 5251, 13, 87, 15480, 11, 597, 307, 689, 264, 8849, 19710, 36606, 11, 457, 309, 994, 380, 14151, 604, 36606, 13], "temperature": 0.0, "avg_logprob": -0.0780094397695441, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.5899836802855134e-05}, {"id": 116, "seek": 67800, "start": 687.0, "end": 690.0, "text": " So meaning it doesn't build a complete dependency tree.", "tokens": [407, 3620, 309, 1177, 380, 1322, 257, 3566, 33621, 4230, 13], "temperature": 0.0, "avg_logprob": -0.0780094397695441, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.5899836802855134e-05}, {"id": 117, "seek": 67800, "start": 690.0, "end": 694.0, "text": " So it lacked a lot of transitive dependencies on top of that.", "tokens": [407, 309, 41481, 257, 688, 295, 1145, 2187, 36606, 322, 1192, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.0780094397695441, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.5899836802855134e-05}, {"id": 118, "seek": 67800, "start": 694.0, "end": 700.0, "text": " For the direct ones that are in the POM, it didn't have any version information, because that was specified elsewhere.", "tokens": [1171, 264, 2047, 2306, 300, 366, 294, 264, 430, 5251, 11, 309, 994, 380, 362, 604, 3037, 1589, 11, 570, 300, 390, 22206, 14517, 13], "temperature": 0.0, "avg_logprob": -0.0780094397695441, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.5899836802855134e-05}, {"id": 119, "seek": 70000, "start": 700.0, "end": 710.0, "text": " So we have components like with this Perl, org spring framework boot, spring boot starter, without a version.", "tokens": [407, 321, 362, 6677, 411, 365, 341, 3026, 75, 11, 14045, 5587, 8388, 11450, 11, 5587, 11450, 22465, 11, 1553, 257, 3037, 13], "temperature": 0.0, "avg_logprob": -0.1306370667048863, "compression_ratio": 1.6473429951690821, "no_speech_prob": 3.070198363275267e-05}, {"id": 120, "seek": 70000, "start": 710.0, "end": 715.0, "text": " They included test dependencies, which is also interesting.", "tokens": [814, 5556, 1500, 36606, 11, 597, 307, 611, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1306370667048863, "compression_ratio": 1.6473429951690821, "no_speech_prob": 3.070198363275267e-05}, {"id": 121, "seek": 70000, "start": 715.0, "end": 718.0, "text": " The other tools didn't include test dependencies.", "tokens": [440, 661, 3873, 994, 380, 4090, 1500, 36606, 13], "temperature": 0.0, "avg_logprob": -0.1306370667048863, "compression_ratio": 1.6473429951690821, "no_speech_prob": 3.070198363275267e-05}, {"id": 122, "seek": 70000, "start": 718.0, "end": 724.0, "text": " But the funny thing is, they included it, but if you looked at the S-Bomb, you wouldn't know that it's a test dependency.", "tokens": [583, 264, 4074, 551, 307, 11, 436, 5556, 309, 11, 457, 498, 291, 2956, 412, 264, 318, 12, 33, 3548, 11, 291, 2759, 380, 458, 300, 309, 311, 257, 1500, 33621, 13], "temperature": 0.0, "avg_logprob": -0.1306370667048863, "compression_ratio": 1.6473429951690821, "no_speech_prob": 3.070198363275267e-05}, {"id": 123, "seek": 72400, "start": 724.0, "end": 730.0, "text": " You can't tell, is this really something only used for developing, or is it really in my production system?", "tokens": [509, 393, 380, 980, 11, 307, 341, 534, 746, 787, 1143, 337, 6416, 11, 420, 307, 309, 534, 294, 452, 4265, 1185, 30], "temperature": 0.0, "avg_logprob": -0.133961212067377, "compression_ratio": 1.4484304932735426, "no_speech_prob": 1.473615975555731e-05}, {"id": 124, "seek": 72400, "start": 730.0, "end": 734.0, "text": " Also not so helpful.", "tokens": [2743, 406, 370, 4961, 13], "temperature": 0.0, "avg_logprob": -0.133961212067377, "compression_ratio": 1.4484304932735426, "no_speech_prob": 1.473615975555731e-05}, {"id": 125, "seek": 72400, "start": 734.0, "end": 740.0, "text": " And they had a couple of CPE combinations supposedly for mapping known vulnerabilities.", "tokens": [400, 436, 632, 257, 1916, 295, 383, 5208, 21267, 20581, 337, 18350, 2570, 37633, 13], "temperature": 0.0, "avg_logprob": -0.133961212067377, "compression_ratio": 1.4484304932735426, "no_speech_prob": 1.473615975555731e-05}, {"id": 126, "seek": 72400, "start": 740.0, "end": 742.0, "text": " I think I need to speed up a little bit, right?", "tokens": [286, 519, 286, 643, 281, 3073, 493, 257, 707, 857, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.133961212067377, "compression_ratio": 1.4484304932735426, "no_speech_prob": 1.473615975555731e-05}, {"id": 127, "seek": 72400, "start": 742.0, "end": 749.0, "text": " Okay, now we, this is, this Venn diagram I was mentioning.", "tokens": [1033, 11, 586, 321, 11, 341, 307, 11, 341, 691, 1857, 10686, 286, 390, 18315, 13], "temperature": 0.0, "avg_logprob": -0.133961212067377, "compression_ratio": 1.4484304932735426, "no_speech_prob": 1.473615975555731e-05}, {"id": 128, "seek": 74900, "start": 749.0, "end": 755.0, "text": " So here, so the Venn diagram I didn't explain. So here, in fact, this is the overlap of those Perls.", "tokens": [407, 510, 11, 370, 264, 691, 1857, 10686, 286, 994, 380, 2903, 13, 407, 510, 11, 294, 1186, 11, 341, 307, 264, 19959, 295, 729, 3026, 11784, 13], "temperature": 0.0, "avg_logprob": -0.1342258365876084, "compression_ratio": 1.6175298804780875, "no_speech_prob": 1.4506937077385373e-05}, {"id": 129, "seek": 74900, "start": 755.0, "end": 759.0, "text": " So we looked at those Perls and tried, do they match to each other?", "tokens": [407, 321, 2956, 412, 729, 3026, 11784, 293, 3031, 11, 360, 436, 2995, 281, 1184, 661, 30], "temperature": 0.0, "avg_logprob": -0.1342258365876084, "compression_ratio": 1.6175298804780875, "no_speech_prob": 1.4506937077385373e-05}, {"id": 130, "seek": 74900, "start": 759.0, "end": 768.0, "text": " And you see that, to see, even though they had all perfectly identified, Tool B had a good number, but they still don't overlap.", "tokens": [400, 291, 536, 300, 11, 281, 536, 11, 754, 1673, 436, 632, 439, 6239, 9234, 11, 15934, 363, 632, 257, 665, 1230, 11, 457, 436, 920, 500, 380, 19959, 13], "temperature": 0.0, "avg_logprob": -0.1342258365876084, "compression_ratio": 1.6175298804780875, "no_speech_prob": 1.4506937077385373e-05}, {"id": 131, "seek": 74900, "start": 768.0, "end": 777.0, "text": " And this is because those Perls contain additional elements, qualifiers, like the type, it's a Java archive,", "tokens": [400, 341, 307, 570, 729, 3026, 11784, 5304, 4497, 4959, 11, 4101, 23463, 11, 411, 264, 2010, 11, 309, 311, 257, 10745, 23507, 11], "temperature": 0.0, "avg_logprob": -0.1342258365876084, "compression_ratio": 1.6175298804780875, "no_speech_prob": 1.4506937077385373e-05}, {"id": 132, "seek": 77700, "start": 777.0, "end": 784.0, "text": " or for open source, for operating system components, could be the platform, the target platform, which makes they don't overlap.", "tokens": [420, 337, 1269, 4009, 11, 337, 7447, 1185, 6677, 11, 727, 312, 264, 3663, 11, 264, 3779, 3663, 11, 597, 1669, 436, 500, 380, 19959, 13], "temperature": 0.0, "avg_logprob": -0.10095804670582646, "compression_ratio": 1.6652360515021458, "no_speech_prob": 5.2219740609871224e-05}, {"id": 133, "seek": 77700, "start": 784.0, "end": 792.0, "text": " Now, if we only look at one of the naming elements, then the overlap is much bigger, because the fact that A is lacking versions,", "tokens": [823, 11, 498, 321, 787, 574, 412, 472, 295, 264, 25290, 4959, 11, 550, 264, 19959, 307, 709, 3801, 11, 570, 264, 1186, 300, 316, 307, 20889, 9606, 11], "temperature": 0.0, "avg_logprob": -0.10095804670582646, "compression_ratio": 1.6652360515021458, "no_speech_prob": 5.2219740609871224e-05}, {"id": 134, "seek": 77700, "start": 792.0, "end": 799.0, "text": " B has wrong version identifiers, and the fact that C adds additional details, it all vanishes and looks like it's all converging.", "tokens": [363, 575, 2085, 3037, 2473, 23463, 11, 293, 264, 1186, 300, 383, 10860, 4497, 4365, 11, 309, 439, 3161, 16423, 293, 1542, 411, 309, 311, 439, 9652, 3249, 13], "temperature": 0.0, "avg_logprob": -0.10095804670582646, "compression_ratio": 1.6652360515021458, "no_speech_prob": 5.2219740609871224e-05}, {"id": 135, "seek": 79900, "start": 799.0, "end": 808.0, "text": " But it is, again, important to understand the name alone is not so useful for looking at vulnerabilities or new versions.", "tokens": [583, 309, 307, 11, 797, 11, 1021, 281, 1223, 264, 1315, 3312, 307, 406, 370, 4420, 337, 1237, 412, 37633, 420, 777, 9606, 13], "temperature": 0.0, "avg_logprob": -0.10019440767241687, "compression_ratio": 1.5446009389671362, "no_speech_prob": 3.16820660373196e-05}, {"id": 136, "seek": 79900, "start": 808.0, "end": 812.0, "text": " Good, so let me hurry up a little bit.", "tokens": [2205, 11, 370, 718, 385, 11025, 493, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.10019440767241687, "compression_ratio": 1.5446009389671362, "no_speech_prob": 3.16820660373196e-05}, {"id": 137, "seek": 79900, "start": 812.0, "end": 818.0, "text": " This is the same thing, run after Maven package. Tool A improved.", "tokens": [639, 307, 264, 912, 551, 11, 1190, 934, 4042, 553, 7372, 13, 15934, 316, 9689, 13], "temperature": 0.0, "avg_logprob": -0.10019440767241687, "compression_ratio": 1.5446009389671362, "no_speech_prob": 3.16820660373196e-05}, {"id": 138, "seek": 79900, "start": 818.0, "end": 824.0, "text": " They were finding more, but still the precision and recall are not as good as for the other solutions.", "tokens": [814, 645, 5006, 544, 11, 457, 920, 264, 18356, 293, 9901, 366, 406, 382, 665, 382, 337, 264, 661, 6547, 13], "temperature": 0.0, "avg_logprob": -0.10019440767241687, "compression_ratio": 1.5446009389671362, "no_speech_prob": 3.16820660373196e-05}, {"id": 139, "seek": 82400, "start": 824.0, "end": 831.0, "text": " The other tools didn't change at all, so for them it didn't make a difference that Maven package ran or not.", "tokens": [440, 661, 3873, 994, 380, 1319, 412, 439, 11, 370, 337, 552, 309, 994, 380, 652, 257, 2649, 300, 4042, 553, 7372, 5872, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.12704696862593942, "compression_ratio": 1.5759162303664922, "no_speech_prob": 3.372334685991518e-05}, {"id": 140, "seek": 82400, "start": 831.0, "end": 838.0, "text": " Here, again, is the difference in terms of Perls, which is resulting in the lack of overlap.", "tokens": [1692, 11, 797, 11, 307, 264, 2649, 294, 2115, 295, 3026, 11784, 11, 597, 307, 16505, 294, 264, 5011, 295, 19959, 13], "temperature": 0.0, "avg_logprob": -0.12704696862593942, "compression_ratio": 1.5759162303664922, "no_speech_prob": 3.372334685991518e-05}, {"id": 141, "seek": 82400, "start": 838.0, "end": 846.0, "text": " Here, this is the same component. Tool A has it as DOM4J, DOM4J, Tool B has it at ORC DOM4J, DOM4J,", "tokens": [1692, 11, 341, 307, 264, 912, 6542, 13, 15934, 316, 575, 309, 382, 35727, 19, 41, 11, 35727, 19, 41, 11, 15934, 363, 575, 309, 412, 19654, 34, 35727, 19, 41, 11, 35727, 19, 41, 11], "temperature": 0.0, "avg_logprob": -0.12704696862593942, "compression_ratio": 1.5759162303664922, "no_speech_prob": 3.372334685991518e-05}, {"id": 142, "seek": 84600, "start": 846.0, "end": 858.0, "text": " and Type equal to JAR, so they added this additional information, which made that they don't overlap.", "tokens": [293, 15576, 2681, 281, 508, 1899, 11, 370, 436, 3869, 341, 4497, 1589, 11, 597, 1027, 300, 436, 500, 380, 19959, 13], "temperature": 0.0, "avg_logprob": -0.18691454542444108, "compression_ratio": 1.2826086956521738, "no_speech_prob": 3.1667750590713695e-05}, {"id": 143, "seek": 84600, "start": 858.0, "end": 866.0, "text": " Good, and then last, after running, now we ran it also on the Docker image.", "tokens": [2205, 11, 293, 550, 1036, 11, 934, 2614, 11, 586, 321, 5872, 309, 611, 322, 264, 33772, 3256, 13], "temperature": 0.0, "avg_logprob": -0.18691454542444108, "compression_ratio": 1.2826086956521738, "no_speech_prob": 3.1667750590713695e-05}, {"id": 144, "seek": 86600, "start": 866.0, "end": 880.0, "text": " The first two tools, and maybe one finding here is what we observed in terms of lack of overlap on Maven components also happened for operating system components.", "tokens": [440, 700, 732, 3873, 11, 293, 1310, 472, 5006, 510, 307, 437, 321, 13095, 294, 2115, 295, 5011, 295, 19959, 322, 4042, 553, 6677, 611, 2011, 337, 7447, 1185, 6677, 13], "temperature": 0.0, "avg_logprob": -0.18110702407192175, "compression_ratio": 1.495049504950495, "no_speech_prob": 4.75583401566837e-05}, {"id": 145, "seek": 86600, "start": 880.0, "end": 890.0, "text": " So here we have Dibyan Udbuntu, the package dash, but again they, one tool added a little bit of more information, the target architecture.", "tokens": [407, 510, 321, 362, 413, 897, 6277, 624, 67, 65, 45605, 11, 264, 7372, 8240, 11, 457, 797, 436, 11, 472, 2290, 3869, 257, 707, 857, 295, 544, 1589, 11, 264, 3779, 9482, 13], "temperature": 0.0, "avg_logprob": -0.18110702407192175, "compression_ratio": 1.495049504950495, "no_speech_prob": 4.75583401566837e-05}, {"id": 146, "seek": 89000, "start": 890.0, "end": 899.0, "text": " For the consumer of the bomb, who knows whether this is important information in terms of security? I don't know.", "tokens": [1171, 264, 9711, 295, 264, 7851, 11, 567, 3255, 1968, 341, 307, 1021, 1589, 294, 2115, 295, 3825, 30, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.1003670000260876, "compression_ratio": 1.4444444444444444, "no_speech_prob": 2.7089286959380843e-05}, {"id": 147, "seek": 89000, "start": 899.0, "end": 911.0, "text": " And then again, if you only look at the name, the overlap is much bigger, but even though it looks like they only disagree on very few components,", "tokens": [400, 550, 797, 11, 498, 291, 787, 574, 412, 264, 1315, 11, 264, 19959, 307, 709, 3801, 11, 457, 754, 1673, 309, 1542, 411, 436, 787, 14091, 322, 588, 1326, 6677, 11], "temperature": 0.0, "avg_logprob": -0.1003670000260876, "compression_ratio": 1.4444444444444444, "no_speech_prob": 2.7089286959380843e-05}, {"id": 148, "seek": 91100, "start": 911.0, "end": 925.0, "text": " too bad for Tool B, I think, had a big miss, it was lacking the complete Java runtime, and those people being in security, they know how many security issues there are in the Java runtime.", "tokens": [886, 1578, 337, 15934, 363, 11, 286, 519, 11, 632, 257, 955, 1713, 11, 309, 390, 20889, 264, 3566, 10745, 34474, 11, 293, 729, 561, 885, 294, 3825, 11, 436, 458, 577, 867, 3825, 2663, 456, 366, 294, 264, 10745, 34474, 13], "temperature": 0.0, "avg_logprob": -0.14552444997041122, "compression_ratio": 1.4029850746268657, "no_speech_prob": 4.0041519241640344e-05}, {"id": 149, "seek": 92500, "start": 925.0, "end": 940.0, "text": " Good, lessons learned. The reason for getting different S-bombs is a big one, tools integrated into the dependency manager seem to work much better, at least on the result of that small case study,", "tokens": [2205, 11, 8820, 3264, 13, 440, 1778, 337, 1242, 819, 318, 12, 65, 298, 929, 307, 257, 955, 472, 11, 3873, 10919, 666, 264, 33621, 6598, 1643, 281, 589, 709, 1101, 11, 412, 1935, 322, 264, 1874, 295, 300, 1359, 1389, 2979, 11], "temperature": 0.0, "avg_logprob": -0.15556660104305187, "compression_ratio": 1.3680555555555556, "no_speech_prob": 4.8297162720700726e-05}, {"id": 150, "seek": 94000, "start": 940.0, "end": 955.0, "text": " because generic tools that are supposed to judge the bill of material from the outside, they will need to apply some heuristics, and they don't have the same level of detailed knowledge about the dependency graph.", "tokens": [570, 19577, 3873, 300, 366, 3442, 281, 6995, 264, 2961, 295, 2527, 490, 264, 2380, 11, 436, 486, 643, 281, 3079, 512, 415, 374, 6006, 11, 293, 436, 500, 380, 362, 264, 912, 1496, 295, 9942, 3601, 466, 264, 33621, 4295, 13], "temperature": 0.0, "avg_logprob": -0.09542659433876596, "compression_ratio": 1.6452991452991452, "no_speech_prob": 2.9766753868898377e-05}, {"id": 151, "seek": 94000, "start": 955.0, "end": 965.0, "text": " Production versus test components are sometimes included, sometimes not, there are different defaults, and in the S-bomb generated you don't see the difference any longer.", "tokens": [30088, 5717, 1500, 6677, 366, 2171, 5556, 11, 2171, 406, 11, 456, 366, 819, 7576, 82, 11, 293, 294, 264, 318, 12, 65, 3548, 10833, 291, 500, 380, 536, 264, 2649, 604, 2854, 13], "temperature": 0.0, "avg_logprob": -0.09542659433876596, "compression_ratio": 1.6452991452991452, "no_speech_prob": 2.9766753868898377e-05}, {"id": 152, "seek": 96500, "start": 965.0, "end": 972.0, "text": " And of course, there is also this difference depending on when you run it, there will be different components included.", "tokens": [400, 295, 1164, 11, 456, 307, 611, 341, 2649, 5413, 322, 562, 291, 1190, 309, 11, 456, 486, 312, 819, 6677, 5556, 13], "temperature": 0.0, "avg_logprob": -0.08206128002552504, "compression_ratio": 1.798165137614679, "no_speech_prob": 1.8628767065820284e-05}, {"id": 153, "seek": 96500, "start": 972.0, "end": 980.0, "text": " There is a standard format, but the tools include different fields, some include license and digest, others not.", "tokens": [821, 307, 257, 3832, 7877, 11, 457, 264, 3873, 4090, 819, 7909, 11, 512, 4090, 10476, 293, 13884, 11, 2357, 406, 13], "temperature": 0.0, "avg_logprob": -0.08206128002552504, "compression_ratio": 1.798165137614679, "no_speech_prob": 1.8628767065820284e-05}, {"id": 154, "seek": 96500, "start": 980.0, "end": 992.0, "text": " And even if they all include a Perl, Perl itself is a complex naming scheme with seven elements, and the tools decide differently on what to include in a Perl.", "tokens": [400, 754, 498, 436, 439, 4090, 257, 3026, 75, 11, 3026, 75, 2564, 307, 257, 3997, 25290, 12232, 365, 3407, 4959, 11, 293, 264, 3873, 4536, 7614, 322, 437, 281, 4090, 294, 257, 3026, 75, 13], "temperature": 0.0, "avg_logprob": -0.08206128002552504, "compression_ratio": 1.798165137614679, "no_speech_prob": 1.8628767065820284e-05}, {"id": 155, "seek": 99200, "start": 992.0, "end": 1000.0, "text": " And other reasons that we didn't discuss here, it also depends on the time of the dependency resolution, in case your version ranges,", "tokens": [400, 661, 4112, 300, 321, 994, 380, 2248, 510, 11, 309, 611, 5946, 322, 264, 565, 295, 264, 33621, 8669, 11, 294, 1389, 428, 3037, 22526, 11], "temperature": 0.0, "avg_logprob": -0.12430041669362998, "compression_ratio": 1.5504587155963303, "no_speech_prob": 2.9297962100827135e-05}, {"id": 156, "seek": 99200, "start": 1000.0, "end": 1016.0, "text": " and some tools also generate platform-specific S-bombs, so if you create an S-bomb on a Mac and on a Windows machine, maybe with different hardware architectures beneath, you would have different S-bombs.", "tokens": [293, 512, 3873, 611, 8460, 3663, 12, 29258, 318, 12, 65, 298, 929, 11, 370, 498, 291, 1884, 364, 318, 12, 65, 3548, 322, 257, 5707, 293, 322, 257, 8591, 3479, 11, 1310, 365, 819, 8837, 6331, 1303, 17149, 11, 291, 576, 362, 819, 318, 12, 65, 298, 929, 13], "temperature": 0.0, "avg_logprob": -0.12430041669362998, "compression_ratio": 1.5504587155963303, "no_speech_prob": 2.9297962100827135e-05}, {"id": 157, "seek": 101600, "start": 1016.0, "end": 1023.0, "text": " Right, and I think I don't have so much time to look into this.", "tokens": [1779, 11, 293, 286, 519, 286, 500, 380, 362, 370, 709, 565, 281, 574, 666, 341, 13], "temperature": 0.0, "avg_logprob": -0.12560341721874171, "compression_ratio": 1.4451219512195121, "no_speech_prob": 4.983363032806665e-05}, {"id": 158, "seek": 101600, "start": 1023.0, "end": 1036.0, "text": " What I wanted to say, identifying vulnerabilities only on names is rather flawed, because names keep on changing, projects are renamed, there are rebundles, there are forks,", "tokens": [708, 286, 1415, 281, 584, 11, 16696, 37633, 787, 322, 5288, 307, 2831, 38823, 11, 570, 5288, 1066, 322, 4473, 11, 4455, 366, 40949, 11, 456, 366, 12970, 997, 904, 11, 456, 366, 337, 1694, 11], "temperature": 0.0, "avg_logprob": -0.12560341721874171, "compression_ratio": 1.4451219512195121, "no_speech_prob": 4.983363032806665e-05}, {"id": 159, "seek": 103600, "start": 1036.0, "end": 1046.0, "text": " and so which is why we advocate for enriching such information with call graph information and code-level information.", "tokens": [293, 370, 597, 307, 983, 321, 14608, 337, 18849, 278, 1270, 1589, 365, 818, 4295, 1589, 293, 3089, 12, 12418, 1589, 13], "temperature": 0.0, "avg_logprob": -0.2269055215935958, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.00038610168849118054}, {"id": 160, "seek": 103600, "start": 1046.0, "end": 1048.0, "text": " And with that, I hand over to Joseph.", "tokens": [400, 365, 300, 11, 286, 1011, 670, 281, 11170, 13], "temperature": 0.0, "avg_logprob": -0.2269055215935958, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.00038610168849118054}, {"id": 161, "seek": 103600, "start": 1048.0, "end": 1050.0, "text": " Yeah, thank you, Henrik.", "tokens": [865, 11, 1309, 291, 11, 8651, 14456, 13], "temperature": 0.0, "avg_logprob": -0.2269055215935958, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.00038610168849118054}, {"id": 162, "seek": 103600, "start": 1050.0, "end": 1055.0, "text": " So this will be a bit shorter version. We're running out of time here.", "tokens": [407, 341, 486, 312, 257, 857, 11639, 3037, 13, 492, 434, 2614, 484, 295, 565, 510, 13], "temperature": 0.0, "avg_logprob": -0.2269055215935958, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.00038610168849118054}, {"id": 163, "seek": 103600, "start": 1055.0, "end": 1057.0, "text": " I guess that's all it.", "tokens": [286, 2041, 300, 311, 439, 309, 13], "temperature": 0.0, "avg_logprob": -0.2269055215935958, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.00038610168849118054}, {"id": 164, "seek": 105700, "start": 1057.0, "end": 1066.0, "text": " All right, so why do we want to go for more like a call graph view? So with the current S-bomb format, so in general with dependency trees,", "tokens": [1057, 558, 11, 370, 983, 360, 321, 528, 281, 352, 337, 544, 411, 257, 818, 4295, 1910, 30, 407, 365, 264, 2190, 318, 12, 65, 3548, 7877, 11, 370, 294, 2674, 365, 33621, 5852, 11], "temperature": 0.0, "avg_logprob": -0.1251707679346988, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.0013359833974391222}, {"id": 165, "seek": 105700, "start": 1066.0, "end": 1075.0, "text": " if you view from that perspective, we typically have the application and the list of dependencies of how it is dependent, right?", "tokens": [498, 291, 1910, 490, 300, 4585, 11, 321, 5850, 362, 264, 3861, 293, 264, 1329, 295, 36606, 295, 577, 309, 307, 12334, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1251707679346988, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.0013359833974391222}, {"id": 166, "seek": 105700, "start": 1075.0, "end": 1085.0, "text": " And if you instead try to think from a call graph perspective of looking into the source code, you could have something like this instead.", "tokens": [400, 498, 291, 2602, 853, 281, 519, 490, 257, 818, 4295, 4585, 295, 1237, 666, 264, 4009, 3089, 11, 291, 727, 362, 746, 411, 341, 2602, 13], "temperature": 0.0, "avg_logprob": -0.1251707679346988, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.0013359833974391222}, {"id": 167, "seek": 108500, "start": 1085.0, "end": 1096.0, "text": " If we see, for example, like those small sort of like, almost like Lego pieces, if each of them are function calls from like the application to the API,", "tokens": [759, 321, 536, 11, 337, 1365, 11, 411, 729, 1359, 1333, 295, 411, 11, 1920, 411, 28761, 3755, 11, 498, 1184, 295, 552, 366, 2445, 5498, 490, 411, 264, 3861, 281, 264, 9362, 11], "temperature": 0.0, "avg_logprob": -0.11244404051038955, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.0010848789243027568}, {"id": 168, "seek": 108500, "start": 1096.0, "end": 1102.0, "text": " we can see, for example, at lib4, and if lib4 would have a vulnerability or some other type of problem,", "tokens": [321, 393, 536, 11, 337, 1365, 11, 412, 22854, 19, 11, 293, 498, 22854, 19, 576, 362, 257, 24210, 420, 512, 661, 2010, 295, 1154, 11], "temperature": 0.0, "avg_logprob": -0.11244404051038955, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.0010848789243027568}, {"id": 169, "seek": 108500, "start": 1102.0, "end": 1110.0, "text": " we see that there are actually no function calls to it from the application down to lib4 via lib2.", "tokens": [321, 536, 300, 456, 366, 767, 572, 2445, 5498, 281, 309, 490, 264, 3861, 760, 281, 22854, 19, 5766, 22854, 17, 13], "temperature": 0.0, "avg_logprob": -0.11244404051038955, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.0010848789243027568}, {"id": 170, "seek": 111000, "start": 1110.0, "end": 1117.0, "text": " So I mean, the interesting part here is that if you start looking from like a code perspective,", "tokens": [407, 286, 914, 11, 264, 1880, 644, 510, 307, 300, 498, 291, 722, 1237, 490, 411, 257, 3089, 4585, 11], "temperature": 0.0, "avg_logprob": -0.17597357432047525, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0005024319398216903}, {"id": 171, "seek": 111000, "start": 1117.0, "end": 1125.0, "text": " we can quickly see whether we can pinpoint or like see how we're utilizing source code.", "tokens": [321, 393, 2661, 536, 1968, 321, 393, 40837, 420, 411, 536, 577, 321, 434, 26775, 4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.17597357432047525, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0005024319398216903}, {"id": 172, "seek": 111000, "start": 1125.0, "end": 1133.0, "text": " And another interesting part is that when, so I looked for example like into the Rust ecosystem.", "tokens": [400, 1071, 1880, 644, 307, 300, 562, 11, 370, 286, 2956, 337, 1365, 411, 666, 264, 34952, 11311, 13], "temperature": 0.0, "avg_logprob": -0.17597357432047525, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0005024319398216903}, {"id": 173, "seek": 111000, "start": 1133.0, "end": 1138.0, "text": " So if we have a couple of dependencies, so for example, maplit here,", "tokens": [407, 498, 321, 362, 257, 1916, 295, 36606, 11, 370, 337, 1365, 11, 4471, 23062, 510, 11], "temperature": 0.0, "avg_logprob": -0.17597357432047525, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0005024319398216903}, {"id": 174, "seek": 113800, "start": 1138.0, "end": 1146.0, "text": " if you run like a grep over here, you can see that only like this one is let's say like, I mean important,", "tokens": [498, 291, 1190, 411, 257, 6066, 79, 670, 510, 11, 291, 393, 536, 300, 787, 411, 341, 472, 307, 718, 311, 584, 411, 11, 286, 914, 1021, 11], "temperature": 0.0, "avg_logprob": -0.114882325017175, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.0008788580307736993}, {"id": 175, "seek": 113800, "start": 1146.0, "end": 1150.0, "text": " but we don't see any usage of it in the package.", "tokens": [457, 321, 500, 380, 536, 604, 14924, 295, 309, 294, 264, 7372, 13], "temperature": 0.0, "avg_logprob": -0.114882325017175, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.0008788580307736993}, {"id": 176, "seek": 113800, "start": 1150.0, "end": 1154.0, "text": " So this is like a case where there's no code reuse.", "tokens": [407, 341, 307, 411, 257, 1389, 689, 456, 311, 572, 3089, 26225, 13], "temperature": 0.0, "avg_logprob": -0.114882325017175, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.0008788580307736993}, {"id": 177, "seek": 113800, "start": 1154.0, "end": 1162.0, "text": " And I was generally like interested to know like in the Rust ecosystem to see like how we are like doing,", "tokens": [400, 286, 390, 5101, 411, 3102, 281, 458, 411, 294, 264, 34952, 11311, 281, 536, 411, 577, 321, 366, 411, 884, 11], "temperature": 0.0, "avg_logprob": -0.114882325017175, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.0008788580307736993}, {"id": 178, "seek": 116200, "start": 1162.0, "end": 1168.0, "text": " like how many dependency we're actually calling or not calling in general.", "tokens": [411, 577, 867, 33621, 321, 434, 767, 5141, 420, 406, 5141, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.11304978921379842, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.000318270263960585}, {"id": 179, "seek": 116200, "start": 1168.0, "end": 1174.0, "text": " And when I did the study and looked into like how many dependencies are declared and resolved", "tokens": [400, 562, 286, 630, 264, 2979, 293, 2956, 666, 411, 577, 867, 36606, 366, 15489, 293, 20772], "temperature": 0.0, "avg_logprob": -0.11304978921379842, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.000318270263960585}, {"id": 180, "seek": 116200, "start": 1174.0, "end": 1179.0, "text": " versus how many are actually being reused in the code,", "tokens": [5717, 577, 867, 366, 767, 885, 319, 4717, 294, 264, 3089, 11], "temperature": 0.0, "avg_logprob": -0.11304978921379842, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.000318270263960585}, {"id": 181, "seek": 116200, "start": 1179.0, "end": 1188.0, "text": " I found that for using only package information, it would for example report around 17 dependencies.", "tokens": [286, 1352, 300, 337, 1228, 787, 7372, 1589, 11, 309, 576, 337, 1365, 2275, 926, 3282, 36606, 13], "temperature": 0.0, "avg_logprob": -0.11304978921379842, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.000318270263960585}, {"id": 182, "seek": 118800, "start": 1188.0, "end": 1192.0, "text": " Whereas in the case when you looked into the like full graph information,", "tokens": [13813, 294, 264, 1389, 562, 291, 2956, 666, 264, 411, 1577, 4295, 1589, 11], "temperature": 0.0, "avg_logprob": -0.14789902478799052, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.0018150921678170562}, {"id": 183, "seek": 118800, "start": 1192.0, "end": 1195.0, "text": " we found that only six dependencies are used.", "tokens": [321, 1352, 300, 787, 2309, 36606, 366, 1143, 13], "temperature": 0.0, "avg_logprob": -0.14789902478799052, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.0018150921678170562}, {"id": 184, "seek": 118800, "start": 1195.0, "end": 1201.0, "text": " And that was quite interesting why there was such a big difference.", "tokens": [400, 300, 390, 1596, 1880, 983, 456, 390, 1270, 257, 955, 2649, 13], "temperature": 0.0, "avg_logprob": -0.14789902478799052, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.0018150921678170562}, {"id": 185, "seek": 118800, "start": 1201.0, "end": 1208.0, "text": " And the reason why there is such a big difference is that if you look into this example over here,", "tokens": [400, 264, 1778, 983, 456, 307, 1270, 257, 955, 2649, 307, 300, 498, 291, 574, 666, 341, 1365, 670, 510, 11], "temperature": 0.0, "avg_logprob": -0.14789902478799052, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.0018150921678170562}, {"id": 186, "seek": 118800, "start": 1208.0, "end": 1214.0, "text": " we see that main calls full and then from app to lib1, full calls bar.", "tokens": [321, 536, 300, 2135, 5498, 1577, 293, 550, 490, 724, 281, 22854, 16, 11, 1577, 5498, 2159, 13], "temperature": 0.0, "avg_logprob": -0.14789902478799052, "compression_ratio": 1.733009708737864, "no_speech_prob": 0.0018150921678170562}, {"id": 187, "seek": 121400, "start": 1214.0, "end": 1221.0, "text": " And then further down we see that from bar it goes calls to intern in lib2.", "tokens": [400, 550, 3052, 760, 321, 536, 300, 490, 2159, 309, 1709, 5498, 281, 2154, 294, 22854, 17, 13], "temperature": 0.0, "avg_logprob": -0.10412515752455767, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0020296317525207996}, {"id": 188, "seek": 121400, "start": 1221.0, "end": 1225.0, "text": " But then we see that there are actually no calls from lib2 to lib3.", "tokens": [583, 550, 321, 536, 300, 456, 366, 767, 572, 5498, 490, 22854, 17, 281, 22854, 18, 13], "temperature": 0.0, "avg_logprob": -0.10412515752455767, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0020296317525207996}, {"id": 189, "seek": 121400, "start": 1225.0, "end": 1232.0, "text": " And this shows that why it is quite important to think about context in general", "tokens": [400, 341, 3110, 300, 983, 309, 307, 1596, 1021, 281, 519, 466, 4319, 294, 2674], "temperature": 0.0, "avg_logprob": -0.10412515752455767, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0020296317525207996}, {"id": 190, "seek": 121400, "start": 1232.0, "end": 1237.0, "text": " because depending on how app is using its direct dependency,", "tokens": [570, 5413, 322, 577, 724, 307, 1228, 1080, 2047, 33621, 11], "temperature": 0.0, "avg_logprob": -0.10412515752455767, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0020296317525207996}, {"id": 191, "seek": 121400, "start": 1237.0, "end": 1243.0, "text": " it also directly impacts what transit dependencies are also being called.", "tokens": [309, 611, 3838, 11606, 437, 17976, 36606, 366, 611, 885, 1219, 13], "temperature": 0.0, "avg_logprob": -0.10412515752455767, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0020296317525207996}, {"id": 192, "seek": 124300, "start": 1243.0, "end": 1247.0, "text": " And the assumption that we usually have when we are building an SPOM", "tokens": [400, 264, 15302, 300, 321, 2673, 362, 562, 321, 366, 2390, 364, 8420, 5251], "temperature": 0.0, "avg_logprob": -0.11932653966157333, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.001237432355992496}, {"id": 193, "seek": 124300, "start": 1247.0, "end": 1252.0, "text": " or we are looking into a dependency tree is that we are assuming that all direct,", "tokens": [420, 321, 366, 1237, 666, 257, 33621, 4230, 307, 300, 321, 366, 11926, 300, 439, 2047, 11], "temperature": 0.0, "avg_logprob": -0.11932653966157333, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.001237432355992496}, {"id": 194, "seek": 124300, "start": 1252.0, "end": 1256.0, "text": " I mean all APIs of direct dependencies are being utilized.", "tokens": [286, 914, 439, 21445, 295, 2047, 36606, 366, 885, 28158, 13], "temperature": 0.0, "avg_logprob": -0.11932653966157333, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.001237432355992496}, {"id": 195, "seek": 124300, "start": 1256.0, "end": 1261.0, "text": " And then we are also assuming that all APIs of transit dependencies are being used as well.", "tokens": [400, 550, 321, 366, 611, 11926, 300, 439, 21445, 295, 17976, 36606, 366, 885, 1143, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.11932653966157333, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.001237432355992496}, {"id": 196, "seek": 124300, "start": 1261.0, "end": 1270.0, "text": " So we need to also start thinking a bit about what kind of context is being used in general.", "tokens": [407, 321, 643, 281, 611, 722, 1953, 257, 857, 466, 437, 733, 295, 4319, 307, 885, 1143, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.11932653966157333, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.001237432355992496}, {"id": 197, "seek": 127000, "start": 1270.0, "end": 1276.0, "text": " And so a little bit what would be the lessons here with trying to integrate something", "tokens": [400, 370, 257, 707, 857, 437, 576, 312, 264, 8820, 510, 365, 1382, 281, 13365, 746], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 198, "seek": 127000, "start": 1276.0, "end": 1281.0, "text": " like call graphs or other levels apart from just using package information", "tokens": [411, 818, 24877, 420, 661, 4358, 4936, 490, 445, 1228, 7372, 1589], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 199, "seek": 127000, "start": 1281.0, "end": 1285.0, "text": " is that if you start having information around source code,", "tokens": [307, 300, 498, 291, 722, 1419, 1589, 926, 4009, 3089, 11], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 200, "seek": 127000, "start": 1285.0, "end": 1288.0, "text": " we can directly try to pinpoint and understand, for example,", "tokens": [321, 393, 3838, 853, 281, 40837, 293, 1223, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 201, "seek": 127000, "start": 1288.0, "end": 1291.0, "text": " if there is a vulnerability in one function,", "tokens": [498, 456, 307, 257, 24210, 294, 472, 2445, 11], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 202, "seek": 127000, "start": 1291.0, "end": 1296.0, "text": " we can see that AOK is being either quite utilized in my source code", "tokens": [321, 393, 536, 300, 316, 9443, 307, 885, 2139, 1596, 28158, 294, 452, 4009, 3089], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 203, "seek": 127000, "start": 1296.0, "end": 1299.0, "text": " or not utilized at all.", "tokens": [420, 406, 28158, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.12952654140511738, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0020099410321563482}, {"id": 204, "seek": 129900, "start": 1299.0, "end": 1304.0, "text": " And another thing, so this is a problem that we also see as well", "tokens": [400, 1071, 551, 11, 370, 341, 307, 257, 1154, 300, 321, 611, 536, 382, 731], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 205, "seek": 129900, "start": 1304.0, "end": 1308.0, "text": " that we might declare dependencies on 20 components", "tokens": [300, 321, 1062, 19710, 36606, 322, 945, 6677], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 206, "seek": 129900, "start": 1308.0, "end": 1312.0, "text": " where you get an SPOM from like a vendor or someone else.", "tokens": [689, 291, 483, 364, 8420, 5251, 490, 411, 257, 24321, 420, 1580, 1646, 13], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 207, "seek": 129900, "start": 1312.0, "end": 1318.0, "text": " They have five different components, but which one is the most critically used one in that project?", "tokens": [814, 362, 1732, 819, 6677, 11, 457, 597, 472, 307, 264, 881, 22797, 1143, 472, 294, 300, 1716, 30], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 208, "seek": 129900, "start": 1318.0, "end": 1319.0, "text": " That's also not very clear.", "tokens": [663, 311, 611, 406, 588, 1850, 13], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 209, "seek": 129900, "start": 1319.0, "end": 1326.0, "text": " And if you know, for example, usage of APIs, you can kind of get an idea around that.", "tokens": [400, 498, 291, 458, 11, 337, 1365, 11, 14924, 295, 21445, 11, 291, 393, 733, 295, 483, 364, 1558, 926, 300, 13], "temperature": 0.0, "avg_logprob": -0.10992365172415068, "compression_ratio": 1.533596837944664, "no_speech_prob": 0.0013243491994217038}, {"id": 210, "seek": 132600, "start": 1326.0, "end": 1333.0, "text": " And this was also a little bit the second point that I was like highlighting on that.", "tokens": [400, 341, 390, 611, 257, 707, 857, 264, 1150, 935, 300, 286, 390, 411, 26551, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.11170010084516546, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0010694811353459954}, {"id": 211, "seek": 132600, "start": 1333.0, "end": 1339.0, "text": " We need a few more layers of information that serve different uses of SPOM.", "tokens": [492, 643, 257, 1326, 544, 7914, 295, 1589, 300, 4596, 819, 4960, 295, 8420, 5251, 13], "temperature": 0.0, "avg_logprob": -0.11170010084516546, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0010694811353459954}, {"id": 212, "seek": 132600, "start": 1339.0, "end": 1345.0, "text": " For developers, if I have access to SPOM, I would rather not look into metadata information.", "tokens": [1171, 8849, 11, 498, 286, 362, 2105, 281, 8420, 5251, 11, 286, 576, 2831, 406, 574, 666, 26603, 1589, 13], "temperature": 0.0, "avg_logprob": -0.11170010084516546, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0010694811353459954}, {"id": 213, "seek": 132600, "start": 1345.0, "end": 1350.0, "text": " I want to go look into call phrases and call information in general.", "tokens": [286, 528, 281, 352, 574, 666, 818, 20312, 293, 818, 1589, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.11170010084516546, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0010694811353459954}, {"id": 214, "seek": 132600, "start": 1350.0, "end": 1354.0, "text": " Whereas for security management people or other layers,", "tokens": [13813, 337, 3825, 4592, 561, 420, 661, 7914, 11], "temperature": 0.0, "avg_logprob": -0.11170010084516546, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.0010694811353459954}, {"id": 215, "seek": 135400, "start": 1354.0, "end": 1357.0, "text": " they probably don't want to look into the source code.", "tokens": [436, 1391, 500, 380, 528, 281, 574, 666, 264, 4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 216, "seek": 135400, "start": 1357.0, "end": 1362.0, "text": " They rather want to look to get like an overview of seeing which packages", "tokens": [814, 2831, 528, 281, 574, 281, 483, 411, 364, 12492, 295, 2577, 597, 17401], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 217, "seek": 135400, "start": 1362.0, "end": 1368.0, "text": " that are being used rather than the source code.", "tokens": [300, 366, 885, 1143, 2831, 813, 264, 4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 218, "seek": 135400, "start": 1368.0, "end": 1372.0, "text": " And so this sort of wraps up or talks.", "tokens": [400, 370, 341, 1333, 295, 25831, 493, 420, 6686, 13], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 219, "seek": 135400, "start": 1372.0, "end": 1376.0, "text": " We have like a couple of takeaways here.", "tokens": [492, 362, 411, 257, 1916, 295, 45584, 510, 13], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 220, "seek": 135400, "start": 1376.0, "end": 1383.0, "text": " And we see that going towards having some type of standard around SPOM formats", "tokens": [400, 321, 536, 300, 516, 3030, 1419, 512, 2010, 295, 3832, 926, 8420, 5251, 25879], "temperature": 0.0, "avg_logprob": -0.13359609104338147, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0015404769219458103}, {"id": 221, "seek": 138300, "start": 1383.0, "end": 1388.0, "text": " is, I mean, it's being necessary, but not fully sufficient.", "tokens": [307, 11, 286, 914, 11, 309, 311, 885, 4818, 11, 457, 406, 4498, 11563, 13], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 222, "seek": 138300, "start": 1388.0, "end": 1392.0, "text": " Based on the previous slides, like we need a bit more context", "tokens": [18785, 322, 264, 3894, 9788, 11, 411, 321, 643, 257, 857, 544, 4319], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 223, "seek": 138300, "start": 1392.0, "end": 1395.0, "text": " so that we can have better actionable insights.", "tokens": [370, 300, 321, 393, 362, 1101, 45098, 14310, 13], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 224, "seek": 138300, "start": 1395.0, "end": 1400.0, "text": " One way of doing that could be, for example, including call graph information.", "tokens": [1485, 636, 295, 884, 300, 727, 312, 11, 337, 1365, 11, 3009, 818, 4295, 1589, 13], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 225, "seek": 138300, "start": 1400.0, "end": 1406.0, "text": " As a consumer of SPOM, it is very difficult to verify the correctness of them", "tokens": [1018, 257, 9711, 295, 8420, 5251, 11, 309, 307, 588, 2252, 281, 16888, 264, 3006, 1287, 295, 552], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 226, "seek": 138300, "start": 1406.0, "end": 1410.0, "text": " because as Henrik was showing earlier, if you are using different tools", "tokens": [570, 382, 8651, 14456, 390, 4099, 3071, 11, 498, 291, 366, 1228, 819, 3873], "temperature": 0.0, "avg_logprob": -0.07986330745196102, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.001236191252246499}, {"id": 227, "seek": 141000, "start": 1410.0, "end": 1414.0, "text": " and we are getting different results, which one is the correct one", "tokens": [293, 321, 366, 1242, 819, 3542, 11, 597, 472, 307, 264, 3006, 472], "temperature": 0.0, "avg_logprob": -0.10560651620229085, "compression_ratio": 1.5303030303030303, "no_speech_prob": 0.0019699514377862215}, {"id": 228, "seek": 141000, "start": 1414.0, "end": 1421.0, "text": " and how can we even validate that they are correct in what they are doing.", "tokens": [293, 577, 393, 321, 754, 29562, 300, 436, 366, 3006, 294, 437, 436, 366, 884, 13], "temperature": 0.0, "avg_logprob": -0.10560651620229085, "compression_ratio": 1.5303030303030303, "no_speech_prob": 0.0019699514377862215}, {"id": 229, "seek": 141000, "start": 1421.0, "end": 1428.0, "text": " And the last point, and this is something that both me and Henrik think is extremely important,", "tokens": [400, 264, 1036, 935, 11, 293, 341, 307, 746, 300, 1293, 385, 293, 8651, 14456, 519, 307, 4664, 1021, 11], "temperature": 0.0, "avg_logprob": -0.10560651620229085, "compression_ratio": 1.5303030303030303, "no_speech_prob": 0.0019699514377862215}, {"id": 230, "seek": 141000, "start": 1428.0, "end": 1434.0, "text": " is that we need to create some form of independent SPOM benchmark", "tokens": [307, 300, 321, 643, 281, 1884, 512, 1254, 295, 6695, 8420, 5251, 18927], "temperature": 0.0, "avg_logprob": -0.10560651620229085, "compression_ratio": 1.5303030303030303, "no_speech_prob": 0.0019699514377862215}, {"id": 231, "seek": 143400, "start": 1434.0, "end": 1442.0, "text": " where different SPOM generators or others could evaluate on how accurate", "tokens": [689, 819, 8420, 5251, 38662, 420, 2357, 727, 13059, 322, 577, 8559], "temperature": 0.0, "avg_logprob": -0.13898486507182217, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.0017707874067127705}, {"id": 232, "seek": 143400, "start": 1442.0, "end": 1452.0, "text": " the generated SPOM are against a set of manually validated projects in general.", "tokens": [264, 10833, 8420, 5251, 366, 1970, 257, 992, 295, 16945, 40693, 4455, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.13898486507182217, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.0017707874067127705}, {"id": 233, "seek": 143400, "start": 1452.0, "end": 1455.0, "text": " This concludes our talk.", "tokens": [639, 24643, 527, 751, 13], "temperature": 0.0, "avg_logprob": -0.13898486507182217, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.0017707874067127705}, {"id": 234, "seek": 143400, "start": 1455.0, "end": 1459.0, "text": " We are happy to take questions.", "tokens": [492, 366, 2055, 281, 747, 1651, 13], "temperature": 0.0, "avg_logprob": -0.13898486507182217, "compression_ratio": 1.4026845637583893, "no_speech_prob": 0.0017707874067127705}, {"id": 235, "seek": 145900, "start": 1459.0, "end": 1466.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 236, "seek": 145900, "start": 1466.0, "end": 1472.0, "text": " It shows Java and that's got an ecosystem.", "tokens": [467, 3110, 10745, 293, 300, 311, 658, 364, 11311, 13], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 237, "seek": 145900, "start": 1472.0, "end": 1476.0, "text": " So I presume you've probably found something similar with Python or Rust.", "tokens": [407, 286, 43283, 291, 600, 1391, 1352, 746, 2531, 365, 15329, 420, 34952, 13], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 238, "seek": 145900, "start": 1476.0, "end": 1480.0, "text": " What about language applications that don't have an ecosystem?", "tokens": [708, 466, 2856, 5821, 300, 500, 380, 362, 364, 11311, 30], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 239, "seek": 145900, "start": 1480.0, "end": 1483.0, "text": " I'm thinking about C++.", "tokens": [286, 478, 1953, 466, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 240, "seek": 145900, "start": 1483.0, "end": 1485.0, "text": " What would you say about that?", "tokens": [708, 576, 291, 584, 466, 300, 30], "temperature": 0.0, "avg_logprob": -0.24433063738273852, "compression_ratio": 1.416184971098266, "no_speech_prob": 0.0035744032356888056}, {"id": 241, "seek": 148500, "start": 1485.0, "end": 1489.0, "text": " Basically there are standard languages there and I like the core graph there.", "tokens": [8537, 456, 366, 3832, 8650, 456, 293, 286, 411, 264, 4965, 4295, 456, 13], "temperature": 0.0, "avg_logprob": -0.31296284098020744, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0019975616596639156}, {"id": 242, "seek": 148500, "start": 1489.0, "end": 1493.0, "text": " How would you tackle that?", "tokens": [1012, 576, 291, 14896, 300, 30], "temperature": 0.0, "avg_logprob": -0.31296284098020744, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0019975616596639156}, {"id": 243, "seek": 148500, "start": 1493.0, "end": 1497.0, "text": " You can probably take it.", "tokens": [509, 393, 1391, 747, 309, 13], "temperature": 0.0, "avg_logprob": -0.31296284098020744, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0019975616596639156}, {"id": 244, "seek": 148500, "start": 1497.0, "end": 1506.0, "text": " The question is how would we do this core graph analysis for C languages", "tokens": [440, 1168, 307, 577, 576, 321, 360, 341, 4965, 4295, 5215, 337, 383, 8650], "temperature": 0.0, "avg_logprob": -0.31296284098020744, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0019975616596639156}, {"id": 245, "seek": 148500, "start": 1506.0, "end": 1512.0, "text": " and that of course is a very different game and I don't think there is an easy...", "tokens": [293, 300, 295, 1164, 307, 257, 588, 819, 1216, 293, 286, 500, 380, 519, 456, 307, 364, 1858, 485], "temperature": 0.0, "avg_logprob": -0.31296284098020744, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0019975616596639156}, {"id": 246, "seek": 151200, "start": 1512.0, "end": 1515.0, "text": " It will just not be possible to be honest.", "tokens": [467, 486, 445, 406, 312, 1944, 281, 312, 3245, 13], "temperature": 0.0, "avg_logprob": -0.21310032391157308, "compression_ratio": 1.391566265060241, "no_speech_prob": 0.0001917173940455541}, {"id": 247, "seek": 151200, "start": 1515.0, "end": 1521.0, "text": " Because with all the core graph generator, you don't agree?", "tokens": [1436, 365, 439, 264, 4965, 4295, 19265, 11, 291, 500, 380, 3986, 30], "temperature": 0.0, "avg_logprob": -0.21310032391157308, "compression_ratio": 1.391566265060241, "no_speech_prob": 0.0001917173940455541}, {"id": 248, "seek": 151200, "start": 1521.0, "end": 1527.0, "text": " We need to do this for safety.", "tokens": [492, 643, 281, 360, 341, 337, 4514, 13], "temperature": 0.0, "avg_logprob": -0.21310032391157308, "compression_ratio": 1.391566265060241, "no_speech_prob": 0.0001917173940455541}, {"id": 249, "seek": 151200, "start": 1527.0, "end": 1536.0, "text": " Building a core graph for C code is more difficult than it is for languages like Java and Python.", "tokens": [18974, 257, 4965, 4295, 337, 383, 3089, 307, 544, 2252, 813, 309, 307, 337, 8650, 411, 10745, 293, 15329, 13], "temperature": 0.0, "avg_logprob": -0.21310032391157308, "compression_ratio": 1.391566265060241, "no_speech_prob": 0.0001917173940455541}, {"id": 250, "seek": 153600, "start": 1536.0, "end": 1545.0, "text": " So maybe the amount of information that is contained in such core graphs is less helpful", "tokens": [407, 1310, 264, 2372, 295, 1589, 300, 307, 16212, 294, 1270, 4965, 24877, 307, 1570, 4961], "temperature": 0.0, "avg_logprob": -0.2210617560844917, "compression_ratio": 1.587962962962963, "no_speech_prob": 8.58229905134067e-05}, {"id": 251, "seek": 153600, "start": 1545.0, "end": 1551.0, "text": " for taking any actions or it's less actionable.", "tokens": [337, 1940, 604, 5909, 420, 309, 311, 1570, 45098, 13], "temperature": 0.0, "avg_logprob": -0.2210617560844917, "compression_ratio": 1.587962962962963, "no_speech_prob": 8.58229905134067e-05}, {"id": 252, "seek": 153600, "start": 1551.0, "end": 1557.0, "text": " We were using this originally for those core graphs where it's for reachability of vulnerable methods.", "tokens": [492, 645, 1228, 341, 7993, 337, 729, 4965, 24877, 689, 309, 311, 337, 2524, 2310, 295, 10955, 7150, 13], "temperature": 0.0, "avg_logprob": -0.2210617560844917, "compression_ratio": 1.587962962962963, "no_speech_prob": 8.58229905134067e-05}, {"id": 253, "seek": 153600, "start": 1557.0, "end": 1564.0, "text": " The idea was there is method ABC affected by log4j is this really callable from my application context.", "tokens": [440, 1558, 390, 456, 307, 3170, 22342, 8028, 538, 3565, 19, 73, 307, 341, 534, 818, 712, 490, 452, 3861, 4319, 13], "temperature": 0.0, "avg_logprob": -0.2210617560844917, "compression_ratio": 1.587962962962963, "no_speech_prob": 8.58229905134067e-05}, {"id": 254, "seek": 156400, "start": 1564.0, "end": 1566.0, "text": " But this required kind of...", "tokens": [583, 341, 4739, 733, 295, 485], "temperature": 0.0, "avg_logprob": -0.14247903070951762, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.00015828672621864825}, {"id": 255, "seek": 156400, "start": 1566.0, "end": 1573.0, "text": " You could map the source code where the vulnerable function is identified to what is in the bytecode", "tokens": [509, 727, 4471, 264, 4009, 3089, 689, 264, 10955, 2445, 307, 9234, 281, 437, 307, 294, 264, 40846, 22332], "temperature": 0.0, "avg_logprob": -0.14247903070951762, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.00015828672621864825}, {"id": 256, "seek": 156400, "start": 1573.0, "end": 1575.0, "text": " where this identifier is basically the same.", "tokens": [689, 341, 45690, 307, 1936, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.14247903070951762, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.00015828672621864825}, {"id": 257, "seek": 156400, "start": 1575.0, "end": 1580.0, "text": " So the core graph generated from bytecode could be used for this purpose.", "tokens": [407, 264, 4965, 4295, 10833, 490, 40846, 22332, 727, 312, 1143, 337, 341, 4334, 13], "temperature": 0.0, "avg_logprob": -0.14247903070951762, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.00015828672621864825}, {"id": 258, "seek": 156400, "start": 1580.0, "end": 1588.0, "text": " And I don't think this is possible in at least this application in C.", "tokens": [400, 286, 500, 380, 519, 341, 307, 1944, 294, 412, 1935, 341, 3861, 294, 383, 13], "temperature": 0.0, "avg_logprob": -0.14247903070951762, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.00015828672621864825}, {"id": 259, "seek": 158800, "start": 1588.0, "end": 1594.0, "text": " Is this possible at some point?", "tokens": [50364, 1119, 341, 1944, 412, 512, 935, 30, 50664], "temperature": 0.0, "avg_logprob": -0.8636977195739746, "compression_ratio": 0.8157894736842105, "no_speech_prob": 0.0018107937648892403}], "language": "en"}