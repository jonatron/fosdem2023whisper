{"text": " Hello everyone, this is Peter Menzik and he will tell you why resolving two names in the GUI program is hard. If you've ever tried, you know. If you've never tried, listen. Okay. Good afternoon. My name is Peter Menzik. I work for Red Hat, so I took my hat with myself and this is a presentation about why the resolution of two names in a single program is not simple. So, how do you resolve names? The system offers get other info call and it is protocol and family independent, requires just host name and service name and returns and this is somehow ordered and works on major OS operating systems. It is fine, but it blocks. And we don't want that. We can work on that by using asynchronous libraries, which are usually DNS only. That might be good enough, but not always and typical applications should not be limited by that. So, good for servers, not for workstations. Because name resolution can be provided also by different providers than DNS only and some are obsolete, some are not. So, I think application should try to use common provider for any aim. We have, for example, system here is of D, which provides different protocols, but does not work in a way which breaks, for example, DNS only application. So, it's not a good solution, I think. So, how do I make multiple solutions from single program? I can use second interface. It works for DCP, UDP, present on any system, but I can handle thousands of connections from single program without problem. I just use poll or select and select only socket, which has something ready for me. So, why is blocking problem? Because graphic applications use not a blocking loop, but just event-based loops. And they are non-responsive if any call they use blocks. We want to avoid that. So, modern applications are implemented by just callbacks to events they want to handle and nothing else. And then spend most of time waiting for something and conserve CPU. So, why not just working threads? Because creating a new thread is simple, but receiving result from finish to work in thread into the main thread is not so simple. And it increases complexity a lot of any application almost. So, why that thread is needed anyway? Name resolution on Linux machine can come from multiple modules. Some are local only on the machine. Some need to ask local or remote service. And fetch, send some request and wait for some response. It may tie or not and extract fetched addresses and return them to start connecting. And the most important waiting for timeout or activity or socket activity is implemented by any framework doing non-trivial applications anyway, because they need it. So, how can it be made non-blocking? I think we should make a common code to implement protocol specific plugins and DNS should be only one of them. And for example, multicast DNS or so and provide integration with custom loops in different applications because major graphical applications use Qt or G-Lip, but they may use some custom loops and it should require relatively small time, small code part to integrate with them quite nice. So, we should rewrite existing modules to use callbacks like modern applications and not just blocking because current modules are easy to write and maintain but difficult to use from normal applications. I think resolution should be simple even in non-trivial applications. So, what do we need? Just ability to add and modify socket into watched list of events and denotified after time is up and if no activity occurred and provide some code to handle those events. And we don't care too much about time precision because we measure time out in seconds in DNS anyway. So, who cares? So, why non-blocking? Because it creates no race conditions. It's almost unlimited. It's limited by number of socket handled that usually quite high, so we don't care. And it can allow many queries per thread without any problem. And resolution would become more easy handled in a single thread only, not scattered over multiple threads during runtime. So, we should not care and of course, separate threads would still make sense if this intensive applications are run but for small fetches of data from network it's not necessary. I think server software should take advantage too. So, unfortunately, there is no implementation yet. I think Pavel Shimada wrote quite good start called NetResolve and it provides separate load-double modules with different providers which can be used as building start. But its documentation is quite poor and non-blocking API. I try to start what is needed is missing and waiting for me, I think, to write. But I think we need protocol independent API for normal applications. And if we add just some metadata to stroke the other's info provided by Get Other Info today, I think we could handle also HTTPS resource records in library and not require common applications to handle that and implement it in each application. I guess there are many applications starting HTTPS connection and it should be not re-implemented in every application doing that. Of course, some parts are similar and for example, multicast DNS can use the similar parts and could use the same calls with just asynchronous way. And that is almost all I had to say. So, are there questions? No questions? So, you want a solution for this? Is there a way for Red Hat to lead this in the free desktop space, maybe? Well, maybe, yes. Who should lead the initiative? I am not sure. It's not official Red Hat initiative yet. It's just my own opinion. So, it's not like Red Hat already has project and involved people and such. So, it's still what I think should be done, but not yet decided who should lead it or who should cover that. I definitely want to talk about it in Red Hat, but it's in fact not clear to me which mailing list or organization should start and should organize this because it's maybe should be handled by G-Lipsy people or I don't know. I would like to talk and hear what other thing about it because I'm not sure myself. It occurs to me that this problem statement is a lot like the get DNS problem statement plus things that aren't DNS. So, I guess my recommendation would be why not look and see if you can enhance that API to include these non-DNS naming systems? Which API? Well, the question was why not enhance existing solutions like get DNS for example? I'm not sure how can you do that because I think that the problem I have with system D trying to do that is far away. This is a good example of how to do that wrong because I think when application wants to talk DNS only and nothing else, it should be able to. So, if I use the get DNS library and I think it should do only DNS, it should be able to choose. So, how do I choose whether it's different protocols and how do I forward from get DNS library? What do we all do from there? Because I think get DNS expects DNS record types or such things and those are DNS specific. Those don't work in other protocols. Does that answer the question? Well, not so much question as well as how to get DNS address this. Get DNS for all its faults is extremely flexible. So, you can enable and disable extensions. You can say by default it does DNS only if you say I want to have an DNS that starts doing it. So, there is a way to extend it and the same thing applies to record types. If you say I have funky record type, it fits within the framework to have it. So, I think it's a lot of technical problems. Yes, but look, it wasn't even a question. Please repeat the comment. I think statement get DNS is quite flexible and can adjust to those. Yes, why not? I don't say we have to implement it from start, but it should be generic enough so it would be future proof. And I admit I don't know details of DNS, get DNS library, so I can't comment details. I just ensure it can do, but why not if it's another library, but I think it eventually should land in Lipsy or something like that after it proves it works. So, maybe. So, you had a slide. Does anybody else have a question? No? You had a slide about callbacks near the beginning. Callbacks. But it doesn't matter. Do you expect every plug-in to handle things like TLS or would TLS be something? I would like to TLS be. TLS is kind of special machine, but it should be somewhere inside. And what the user should receive should be ready to use socket to work on. So, he just puts inside the name and service name and it does the heavy machine inside. Well, TLS socket is something over it. It's above normal connection, so I think it should be extended. I'm not sure what should be. It's above that. I'm, yes, I am out of time. Yes, yes. That's perfect. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.0, "text": " Hello everyone, this is Peter Menzik and he will tell you why resolving two names in", "tokens": [2425, 1518, 11, 341, 307, 6508, 6685, 89, 1035, 293, 415, 486, 980, 291, 983, 49940, 732, 5288, 294], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 1, "seek": 0, "start": 10.0, "end": 11.0, "text": " the GUI program is hard.", "tokens": [264, 17917, 40, 1461, 307, 1152, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 2, "seek": 0, "start": 11.0, "end": 13.0, "text": " If you've ever tried, you know.", "tokens": [759, 291, 600, 1562, 3031, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 3, "seek": 0, "start": 13.0, "end": 16.0, "text": " If you've never tried, listen.", "tokens": [759, 291, 600, 1128, 3031, 11, 2140, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 4, "seek": 0, "start": 16.0, "end": 17.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 5, "seek": 0, "start": 17.0, "end": 18.0, "text": " Good afternoon.", "tokens": [2205, 6499, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 6, "seek": 0, "start": 18.0, "end": 19.0, "text": " My name is Peter Menzik.", "tokens": [1222, 1315, 307, 6508, 6685, 89, 1035, 13], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 7, "seek": 0, "start": 19.0, "end": 28.0, "text": " I work for Red Hat, so I took my hat with myself and this is a presentation about why", "tokens": [286, 589, 337, 4477, 15867, 11, 370, 286, 1890, 452, 2385, 365, 2059, 293, 341, 307, 257, 5860, 466, 983], "temperature": 0.0, "avg_logprob": -0.32484981861520323, "compression_ratio": 1.5482233502538072, "no_speech_prob": 0.6820507049560547}, {"id": 8, "seek": 2800, "start": 28.0, "end": 32.0, "text": " the resolution of two names in a single program is not simple.", "tokens": [264, 8669, 295, 732, 5288, 294, 257, 2167, 1461, 307, 406, 2199, 13], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 9, "seek": 2800, "start": 32.0, "end": 36.0, "text": " So, how do you resolve names?", "tokens": [407, 11, 577, 360, 291, 14151, 5288, 30], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 10, "seek": 2800, "start": 36.0, "end": 43.0, "text": " The system offers get other info call and it is protocol and family independent, requires", "tokens": [440, 1185, 7736, 483, 661, 13614, 818, 293, 309, 307, 10336, 293, 1605, 6695, 11, 7029], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 11, "seek": 2800, "start": 43.0, "end": 50.0, "text": " just host name and service name and returns and this is somehow ordered and works on major", "tokens": [445, 3975, 1315, 293, 2643, 1315, 293, 11247, 293, 341, 307, 6063, 8866, 293, 1985, 322, 2563], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 12, "seek": 2800, "start": 50.0, "end": 52.0, "text": " OS operating systems.", "tokens": [12731, 7447, 3652, 13], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 13, "seek": 2800, "start": 52.0, "end": 55.0, "text": " It is fine, but it blocks.", "tokens": [467, 307, 2489, 11, 457, 309, 8474, 13], "temperature": 0.0, "avg_logprob": -0.20625340938568115, "compression_ratio": 1.5260663507109005, "no_speech_prob": 0.018854819238185883}, {"id": 14, "seek": 5500, "start": 55.0, "end": 58.0, "text": " And we don't want that.", "tokens": [400, 321, 500, 380, 528, 300, 13], "temperature": 0.0, "avg_logprob": -0.12670437494913736, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.0017875261837616563}, {"id": 15, "seek": 5500, "start": 58.0, "end": 65.0, "text": " We can work on that by using asynchronous libraries, which are usually DNS only.", "tokens": [492, 393, 589, 322, 300, 538, 1228, 49174, 15148, 11, 597, 366, 2673, 35153, 787, 13], "temperature": 0.0, "avg_logprob": -0.12670437494913736, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.0017875261837616563}, {"id": 16, "seek": 5500, "start": 65.0, "end": 77.0, "text": " That might be good enough, but not always and typical applications should not be limited", "tokens": [663, 1062, 312, 665, 1547, 11, 457, 406, 1009, 293, 7476, 5821, 820, 406, 312, 5567], "temperature": 0.0, "avg_logprob": -0.12670437494913736, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.0017875261837616563}, {"id": 17, "seek": 5500, "start": 77.0, "end": 78.0, "text": " by that.", "tokens": [538, 300, 13], "temperature": 0.0, "avg_logprob": -0.12670437494913736, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.0017875261837616563}, {"id": 18, "seek": 5500, "start": 78.0, "end": 82.0, "text": " So, good for servers, not for workstations.", "tokens": [407, 11, 665, 337, 15909, 11, 406, 337, 589, 372, 763, 13], "temperature": 0.0, "avg_logprob": -0.12670437494913736, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.0017875261837616563}, {"id": 19, "seek": 8200, "start": 82.0, "end": 90.0, "text": " Because name resolution can be provided also by different providers than DNS only and some", "tokens": [1436, 1315, 8669, 393, 312, 5649, 611, 538, 819, 11330, 813, 35153, 787, 293, 512], "temperature": 0.0, "avg_logprob": -0.25665257193825464, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.0019267615862190723}, {"id": 20, "seek": 8200, "start": 90.0, "end": 93.0, "text": " are obsolete, some are not.", "tokens": [366, 46333, 11, 512, 366, 406, 13], "temperature": 0.0, "avg_logprob": -0.25665257193825464, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.0019267615862190723}, {"id": 21, "seek": 8200, "start": 93.0, "end": 101.0, "text": " So, I think application should try to use common provider for any aim.", "tokens": [407, 11, 286, 519, 3861, 820, 853, 281, 764, 2689, 12398, 337, 604, 5939, 13], "temperature": 0.0, "avg_logprob": -0.25665257193825464, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.0019267615862190723}, {"id": 22, "seek": 8200, "start": 101.0, "end": 109.0, "text": " We have, for example, system here is of D, which provides different protocols, but does", "tokens": [492, 362, 11, 337, 1365, 11, 1185, 510, 307, 295, 413, 11, 597, 6417, 819, 20618, 11, 457, 775], "temperature": 0.0, "avg_logprob": -0.25665257193825464, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.0019267615862190723}, {"id": 23, "seek": 10900, "start": 109.0, "end": 113.0, "text": " not work in a way which breaks, for example, DNS only application.", "tokens": [406, 589, 294, 257, 636, 597, 9857, 11, 337, 1365, 11, 35153, 787, 3861, 13], "temperature": 0.0, "avg_logprob": -0.1676035416431916, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.005722668021917343}, {"id": 24, "seek": 10900, "start": 113.0, "end": 117.0, "text": " So, it's not a good solution, I think.", "tokens": [407, 11, 309, 311, 406, 257, 665, 3827, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.1676035416431916, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.005722668021917343}, {"id": 25, "seek": 10900, "start": 117.0, "end": 123.0, "text": " So, how do I make multiple solutions from single program?", "tokens": [407, 11, 577, 360, 286, 652, 3866, 6547, 490, 2167, 1461, 30], "temperature": 0.0, "avg_logprob": -0.1676035416431916, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.005722668021917343}, {"id": 26, "seek": 10900, "start": 123.0, "end": 125.0, "text": " I can use second interface.", "tokens": [286, 393, 764, 1150, 9226, 13], "temperature": 0.0, "avg_logprob": -0.1676035416431916, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.005722668021917343}, {"id": 27, "seek": 10900, "start": 125.0, "end": 137.0, "text": " It works for DCP, UDP, present on any system, but I can handle thousands of connections", "tokens": [467, 1985, 337, 9114, 47, 11, 624, 11373, 11, 1974, 322, 604, 1185, 11, 457, 286, 393, 4813, 5383, 295, 9271], "temperature": 0.0, "avg_logprob": -0.1676035416431916, "compression_ratio": 1.416243654822335, "no_speech_prob": 0.005722668021917343}, {"id": 28, "seek": 13700, "start": 137.0, "end": 140.0, "text": " from single program without problem.", "tokens": [490, 2167, 1461, 1553, 1154, 13], "temperature": 0.0, "avg_logprob": -0.2142998042859529, "compression_ratio": 1.44375, "no_speech_prob": 0.003011188702657819}, {"id": 29, "seek": 13700, "start": 140.0, "end": 148.0, "text": " I just use poll or select and select only socket, which has something ready for me.", "tokens": [286, 445, 764, 6418, 420, 3048, 293, 3048, 787, 19741, 11, 597, 575, 746, 1919, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.2142998042859529, "compression_ratio": 1.44375, "no_speech_prob": 0.003011188702657819}, {"id": 30, "seek": 13700, "start": 148.0, "end": 150.0, "text": " So, why is blocking problem?", "tokens": [407, 11, 983, 307, 17776, 1154, 30], "temperature": 0.0, "avg_logprob": -0.2142998042859529, "compression_ratio": 1.44375, "no_speech_prob": 0.003011188702657819}, {"id": 31, "seek": 13700, "start": 150.0, "end": 163.0, "text": " Because graphic applications use not a blocking loop, but just event-based loops.", "tokens": [1436, 14089, 5821, 764, 406, 257, 17776, 6367, 11, 457, 445, 2280, 12, 6032, 16121, 13], "temperature": 0.0, "avg_logprob": -0.2142998042859529, "compression_ratio": 1.44375, "no_speech_prob": 0.003011188702657819}, {"id": 32, "seek": 16300, "start": 163.0, "end": 168.0, "text": " And they are non-responsive if any call they use blocks.", "tokens": [400, 436, 366, 2107, 12, 28930, 488, 498, 604, 818, 436, 764, 8474, 13], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 33, "seek": 16300, "start": 168.0, "end": 173.0, "text": " We want to avoid that.", "tokens": [492, 528, 281, 5042, 300, 13], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 34, "seek": 16300, "start": 173.0, "end": 179.0, "text": " So, modern applications are implemented by just callbacks to events they want to handle", "tokens": [407, 11, 4363, 5821, 366, 12270, 538, 445, 818, 17758, 281, 3931, 436, 528, 281, 4813], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 35, "seek": 16300, "start": 179.0, "end": 180.0, "text": " and nothing else.", "tokens": [293, 1825, 1646, 13], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 36, "seek": 16300, "start": 180.0, "end": 186.0, "text": " And then spend most of time waiting for something and conserve CPU.", "tokens": [400, 550, 3496, 881, 295, 565, 3806, 337, 746, 293, 45240, 13199, 13], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 37, "seek": 16300, "start": 186.0, "end": 189.0, "text": " So, why not just working threads?", "tokens": [407, 11, 983, 406, 445, 1364, 19314, 30], "temperature": 0.0, "avg_logprob": -0.16242654164632161, "compression_ratio": 1.5026178010471205, "no_speech_prob": 0.0026972584892064333}, {"id": 38, "seek": 18900, "start": 189.0, "end": 197.0, "text": " Because creating a new thread is simple, but receiving result from finish to work in thread", "tokens": [1436, 4084, 257, 777, 7207, 307, 2199, 11, 457, 10040, 1874, 490, 2413, 281, 589, 294, 7207], "temperature": 0.0, "avg_logprob": -0.22476242269788468, "compression_ratio": 1.4967320261437909, "no_speech_prob": 0.004135884810239077}, {"id": 39, "seek": 18900, "start": 197.0, "end": 200.0, "text": " into the main thread is not so simple.", "tokens": [666, 264, 2135, 7207, 307, 406, 370, 2199, 13], "temperature": 0.0, "avg_logprob": -0.22476242269788468, "compression_ratio": 1.4967320261437909, "no_speech_prob": 0.004135884810239077}, {"id": 40, "seek": 18900, "start": 200.0, "end": 208.0, "text": " And it increases complexity a lot of any application almost.", "tokens": [400, 309, 8637, 14024, 257, 688, 295, 604, 3861, 1920, 13], "temperature": 0.0, "avg_logprob": -0.22476242269788468, "compression_ratio": 1.4967320261437909, "no_speech_prob": 0.004135884810239077}, {"id": 41, "seek": 18900, "start": 208.0, "end": 212.0, "text": " So, why that thread is needed anyway?", "tokens": [407, 11, 983, 300, 7207, 307, 2978, 4033, 30], "temperature": 0.0, "avg_logprob": -0.22476242269788468, "compression_ratio": 1.4967320261437909, "no_speech_prob": 0.004135884810239077}, {"id": 42, "seek": 21200, "start": 212.0, "end": 225.0, "text": " Name resolution on Linux machine can come from multiple modules.", "tokens": [13866, 8669, 322, 18734, 3479, 393, 808, 490, 3866, 16679, 13], "temperature": 0.0, "avg_logprob": -0.12538429260253905, "compression_ratio": 1.4113475177304964, "no_speech_prob": 0.005778611171990633}, {"id": 43, "seek": 21200, "start": 225.0, "end": 228.0, "text": " Some are local only on the machine.", "tokens": [2188, 366, 2654, 787, 322, 264, 3479, 13], "temperature": 0.0, "avg_logprob": -0.12538429260253905, "compression_ratio": 1.4113475177304964, "no_speech_prob": 0.005778611171990633}, {"id": 44, "seek": 21200, "start": 228.0, "end": 233.0, "text": " Some need to ask local or remote service.", "tokens": [2188, 643, 281, 1029, 2654, 420, 8607, 2643, 13], "temperature": 0.0, "avg_logprob": -0.12538429260253905, "compression_ratio": 1.4113475177304964, "no_speech_prob": 0.005778611171990633}, {"id": 45, "seek": 21200, "start": 233.0, "end": 238.0, "text": " And fetch, send some request and wait for some response.", "tokens": [400, 23673, 11, 2845, 512, 5308, 293, 1699, 337, 512, 4134, 13], "temperature": 0.0, "avg_logprob": -0.12538429260253905, "compression_ratio": 1.4113475177304964, "no_speech_prob": 0.005778611171990633}, {"id": 46, "seek": 23800, "start": 238.0, "end": 247.0, "text": " It may tie or not and extract fetched addresses and return them to start connecting.", "tokens": [467, 815, 7582, 420, 406, 293, 8947, 23673, 292, 16862, 293, 2736, 552, 281, 722, 11015, 13], "temperature": 0.0, "avg_logprob": -0.1382123114357532, "compression_ratio": 1.4845360824742269, "no_speech_prob": 0.0021797490771859884}, {"id": 47, "seek": 23800, "start": 247.0, "end": 255.0, "text": " And the most important waiting for timeout or activity or socket activity is implemented", "tokens": [400, 264, 881, 1021, 3806, 337, 565, 346, 420, 5191, 420, 19741, 5191, 307, 12270], "temperature": 0.0, "avg_logprob": -0.1382123114357532, "compression_ratio": 1.4845360824742269, "no_speech_prob": 0.0021797490771859884}, {"id": 48, "seek": 23800, "start": 255.0, "end": 263.0, "text": " by any framework doing non-trivial applications anyway, because they need it.", "tokens": [538, 604, 8388, 884, 2107, 12, 83, 470, 22640, 5821, 4033, 11, 570, 436, 643, 309, 13], "temperature": 0.0, "avg_logprob": -0.1382123114357532, "compression_ratio": 1.4845360824742269, "no_speech_prob": 0.0021797490771859884}, {"id": 49, "seek": 23800, "start": 263.0, "end": 266.0, "text": " So, how can it be made non-blocking?", "tokens": [407, 11, 577, 393, 309, 312, 1027, 2107, 12, 28830, 278, 30], "temperature": 0.0, "avg_logprob": -0.1382123114357532, "compression_ratio": 1.4845360824742269, "no_speech_prob": 0.0021797490771859884}, {"id": 50, "seek": 26600, "start": 266.0, "end": 279.0, "text": " I think we should make a common code to implement protocol specific plugins and DNS should be", "tokens": [286, 519, 321, 820, 652, 257, 2689, 3089, 281, 4445, 10336, 2685, 33759, 293, 35153, 820, 312], "temperature": 0.0, "avg_logprob": -0.18266440452413357, "compression_ratio": 1.3355263157894737, "no_speech_prob": 0.0022455104626715183}, {"id": 51, "seek": 26600, "start": 279.0, "end": 281.0, "text": " only one of them.", "tokens": [787, 472, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.18266440452413357, "compression_ratio": 1.3355263157894737, "no_speech_prob": 0.0022455104626715183}, {"id": 52, "seek": 26600, "start": 281.0, "end": 290.0, "text": " And for example, multicast DNS or so and provide integration with custom loops in different", "tokens": [400, 337, 1365, 11, 30608, 525, 35153, 420, 370, 293, 2893, 10980, 365, 2375, 16121, 294, 819], "temperature": 0.0, "avg_logprob": -0.18266440452413357, "compression_ratio": 1.3355263157894737, "no_speech_prob": 0.0022455104626715183}, {"id": 53, "seek": 29000, "start": 290.0, "end": 300.0, "text": " applications because major graphical applications use Qt or G-Lip, but they may use some custom", "tokens": [5821, 570, 2563, 35942, 5821, 764, 1249, 83, 420, 460, 12, 43, 647, 11, 457, 436, 815, 764, 512, 2375], "temperature": 0.0, "avg_logprob": -0.2404887941148546, "compression_ratio": 1.3971631205673758, "no_speech_prob": 0.000771250226534903}, {"id": 54, "seek": 29000, "start": 300.0, "end": 313.0, "text": " loops and it should require relatively small time, small code part to integrate with them quite nice.", "tokens": [16121, 293, 309, 820, 3651, 7226, 1359, 565, 11, 1359, 3089, 644, 281, 13365, 365, 552, 1596, 1481, 13], "temperature": 0.0, "avg_logprob": -0.2404887941148546, "compression_ratio": 1.3971631205673758, "no_speech_prob": 0.000771250226534903}, {"id": 55, "seek": 31300, "start": 313.0, "end": 321.0, "text": " So, we should rewrite existing modules to use callbacks like modern applications and not", "tokens": [407, 11, 321, 820, 28132, 6741, 16679, 281, 764, 818, 17758, 411, 4363, 5821, 293, 406], "temperature": 0.0, "avg_logprob": -0.10988160769144693, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0035866843536496162}, {"id": 56, "seek": 31300, "start": 321.0, "end": 330.0, "text": " just blocking because current modules are easy to write and maintain but difficult to use", "tokens": [445, 17776, 570, 2190, 16679, 366, 1858, 281, 2464, 293, 6909, 457, 2252, 281, 764], "temperature": 0.0, "avg_logprob": -0.10988160769144693, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0035866843536496162}, {"id": 57, "seek": 31300, "start": 330.0, "end": 333.0, "text": " from normal applications.", "tokens": [490, 2710, 5821, 13], "temperature": 0.0, "avg_logprob": -0.10988160769144693, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0035866843536496162}, {"id": 58, "seek": 31300, "start": 333.0, "end": 339.0, "text": " I think resolution should be simple even in non-trivial applications.", "tokens": [286, 519, 8669, 820, 312, 2199, 754, 294, 2107, 12, 83, 470, 22640, 5821, 13], "temperature": 0.0, "avg_logprob": -0.10988160769144693, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0035866843536496162}, {"id": 59, "seek": 33900, "start": 339.0, "end": 343.0, "text": " So, what do we need?", "tokens": [407, 11, 437, 360, 321, 643, 30], "temperature": 0.0, "avg_logprob": -0.21328538777876874, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.004916249308735132}, {"id": 60, "seek": 33900, "start": 343.0, "end": 353.0, "text": " Just ability to add and modify socket into watched list of events and denotified after time is up", "tokens": [1449, 3485, 281, 909, 293, 16927, 19741, 666, 6337, 1329, 295, 3931, 293, 1441, 310, 2587, 934, 565, 307, 493], "temperature": 0.0, "avg_logprob": -0.21328538777876874, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.004916249308735132}, {"id": 61, "seek": 33900, "start": 353.0, "end": 360.0, "text": " and if no activity occurred and provide some code to handle those events.", "tokens": [293, 498, 572, 5191, 11068, 293, 2893, 512, 3089, 281, 4813, 729, 3931, 13], "temperature": 0.0, "avg_logprob": -0.21328538777876874, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.004916249308735132}, {"id": 62, "seek": 36000, "start": 360.0, "end": 370.0, "text": " And we don't care too much about time precision because we measure time out in seconds in DNS anyway.", "tokens": [400, 321, 500, 380, 1127, 886, 709, 466, 565, 18356, 570, 321, 3481, 565, 484, 294, 3949, 294, 35153, 4033, 13], "temperature": 0.0, "avg_logprob": -0.15603634406780376, "compression_ratio": 1.342281879194631, "no_speech_prob": 0.004722346551716328}, {"id": 63, "seek": 36000, "start": 370.0, "end": 375.0, "text": " So, who cares?", "tokens": [407, 11, 567, 12310, 30], "temperature": 0.0, "avg_logprob": -0.15603634406780376, "compression_ratio": 1.342281879194631, "no_speech_prob": 0.004722346551716328}, {"id": 64, "seek": 36000, "start": 375.0, "end": 377.0, "text": " So, why non-blocking?", "tokens": [407, 11, 983, 2107, 12, 28830, 278, 30], "temperature": 0.0, "avg_logprob": -0.15603634406780376, "compression_ratio": 1.342281879194631, "no_speech_prob": 0.004722346551716328}, {"id": 65, "seek": 36000, "start": 377.0, "end": 381.0, "text": " Because it creates no race conditions.", "tokens": [1436, 309, 7829, 572, 4569, 4487, 13], "temperature": 0.0, "avg_logprob": -0.15603634406780376, "compression_ratio": 1.342281879194631, "no_speech_prob": 0.004722346551716328}, {"id": 66, "seek": 36000, "start": 381.0, "end": 384.0, "text": " It's almost unlimited.", "tokens": [467, 311, 1920, 21950, 13], "temperature": 0.0, "avg_logprob": -0.15603634406780376, "compression_ratio": 1.342281879194631, "no_speech_prob": 0.004722346551716328}, {"id": 67, "seek": 38400, "start": 384.0, "end": 392.0, "text": " It's limited by number of socket handled that usually quite high, so we don't care.", "tokens": [467, 311, 5567, 538, 1230, 295, 19741, 18033, 300, 2673, 1596, 1090, 11, 370, 321, 500, 380, 1127, 13], "temperature": 0.0, "avg_logprob": -0.24676048972389913, "compression_ratio": 1.4417177914110428, "no_speech_prob": 0.00714067742228508}, {"id": 68, "seek": 38400, "start": 392.0, "end": 404.0, "text": " And it can allow many queries per thread without any problem.", "tokens": [400, 309, 393, 2089, 867, 24109, 680, 7207, 1553, 604, 1154, 13], "temperature": 0.0, "avg_logprob": -0.24676048972389913, "compression_ratio": 1.4417177914110428, "no_speech_prob": 0.00714067742228508}, {"id": 69, "seek": 38400, "start": 404.0, "end": 412.0, "text": " And resolution would become more easy handled in a single thread only, not scattered over", "tokens": [400, 8669, 576, 1813, 544, 1858, 18033, 294, 257, 2167, 7207, 787, 11, 406, 21986, 670], "temperature": 0.0, "avg_logprob": -0.24676048972389913, "compression_ratio": 1.4417177914110428, "no_speech_prob": 0.00714067742228508}, {"id": 70, "seek": 41200, "start": 412.0, "end": 415.0, "text": " multiple threads during runtime.", "tokens": [3866, 19314, 1830, 34474, 13], "temperature": 0.0, "avg_logprob": -0.15523606936136883, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0010857739252969623}, {"id": 71, "seek": 41200, "start": 415.0, "end": 425.0, "text": " So, we should not care and of course, separate threads would still make sense if this intensive", "tokens": [407, 11, 321, 820, 406, 1127, 293, 295, 1164, 11, 4994, 19314, 576, 920, 652, 2020, 498, 341, 18957], "temperature": 0.0, "avg_logprob": -0.15523606936136883, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0010857739252969623}, {"id": 72, "seek": 41200, "start": 425.0, "end": 433.0, "text": " applications are run but for small fetches of data from network it's not necessary.", "tokens": [5821, 366, 1190, 457, 337, 1359, 15136, 3781, 295, 1412, 490, 3209, 309, 311, 406, 4818, 13], "temperature": 0.0, "avg_logprob": -0.15523606936136883, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0010857739252969623}, {"id": 73, "seek": 41200, "start": 433.0, "end": 440.0, "text": " I think server software should take advantage too.", "tokens": [286, 519, 7154, 4722, 820, 747, 5002, 886, 13], "temperature": 0.0, "avg_logprob": -0.15523606936136883, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0010857739252969623}, {"id": 74, "seek": 44000, "start": 440.0, "end": 447.0, "text": " So, unfortunately, there is no implementation yet.", "tokens": [407, 11, 7015, 11, 456, 307, 572, 11420, 1939, 13], "temperature": 0.0, "avg_logprob": -0.2252354255089393, "compression_ratio": 1.375, "no_speech_prob": 0.003388479817658663}, {"id": 75, "seek": 44000, "start": 447.0, "end": 459.0, "text": " I think Pavel Shimada wrote quite good start called NetResolve and it provides separate", "tokens": [286, 519, 3426, 779, 32683, 1538, 4114, 1596, 665, 722, 1219, 6188, 33274, 37361, 293, 309, 6417, 4994], "temperature": 0.0, "avg_logprob": -0.2252354255089393, "compression_ratio": 1.375, "no_speech_prob": 0.003388479817658663}, {"id": 76, "seek": 44000, "start": 459.0, "end": 466.0, "text": " load-double modules with different providers which can be used as building start.", "tokens": [3677, 12, 67, 33147, 16679, 365, 819, 11330, 597, 393, 312, 1143, 382, 2390, 722, 13], "temperature": 0.0, "avg_logprob": -0.2252354255089393, "compression_ratio": 1.375, "no_speech_prob": 0.003388479817658663}, {"id": 77, "seek": 46600, "start": 466.0, "end": 473.0, "text": " But its documentation is quite poor and non-blocking API.", "tokens": [583, 1080, 14333, 307, 1596, 4716, 293, 2107, 12, 28830, 278, 9362, 13], "temperature": 0.0, "avg_logprob": -0.19296561547045438, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.003904632292687893}, {"id": 78, "seek": 46600, "start": 473.0, "end": 484.0, "text": " I try to start what is needed is missing and waiting for me, I think, to write.", "tokens": [286, 853, 281, 722, 437, 307, 2978, 307, 5361, 293, 3806, 337, 385, 11, 286, 519, 11, 281, 2464, 13], "temperature": 0.0, "avg_logprob": -0.19296561547045438, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.003904632292687893}, {"id": 79, "seek": 46600, "start": 484.0, "end": 492.0, "text": " But I think we need protocol independent API for normal applications.", "tokens": [583, 286, 519, 321, 643, 10336, 6695, 9362, 337, 2710, 5821, 13], "temperature": 0.0, "avg_logprob": -0.19296561547045438, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.003904632292687893}, {"id": 80, "seek": 49200, "start": 492.0, "end": 503.0, "text": " And if we add just some metadata to stroke the other's info provided by Get Other Info today,", "tokens": [400, 498, 321, 909, 445, 512, 26603, 281, 12403, 264, 661, 311, 13614, 5649, 538, 3240, 5358, 11537, 78, 965, 11], "temperature": 0.0, "avg_logprob": -0.2280107922024197, "compression_ratio": 1.3061224489795917, "no_speech_prob": 0.0037518045864999294}, {"id": 81, "seek": 49200, "start": 503.0, "end": 515.0, "text": " I think we could handle also HTTPS resource records in library and not require common applications", "tokens": [286, 519, 321, 727, 4813, 611, 11751, 51, 6273, 7684, 7724, 294, 6405, 293, 406, 3651, 2689, 5821], "temperature": 0.0, "avg_logprob": -0.2280107922024197, "compression_ratio": 1.3061224489795917, "no_speech_prob": 0.0037518045864999294}, {"id": 82, "seek": 51500, "start": 515.0, "end": 522.0, "text": " to handle that and implement it in each application.", "tokens": [281, 4813, 300, 293, 4445, 309, 294, 1184, 3861, 13], "temperature": 0.0, "avg_logprob": -0.14914766947428384, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0025442419573664665}, {"id": 83, "seek": 51500, "start": 522.0, "end": 528.0, "text": " I guess there are many applications starting HTTPS connection and it should be not", "tokens": [286, 2041, 456, 366, 867, 5821, 2891, 11751, 51, 6273, 4984, 293, 309, 820, 312, 406], "temperature": 0.0, "avg_logprob": -0.14914766947428384, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0025442419573664665}, {"id": 84, "seek": 51500, "start": 528.0, "end": 532.0, "text": " re-implemented in every application doing that.", "tokens": [319, 12, 332, 781, 14684, 294, 633, 3861, 884, 300, 13], "temperature": 0.0, "avg_logprob": -0.14914766947428384, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0025442419573664665}, {"id": 85, "seek": 51500, "start": 532.0, "end": 544.0, "text": " Of course, some parts are similar and for example, multicast DNS can use the similar parts", "tokens": [2720, 1164, 11, 512, 3166, 366, 2531, 293, 337, 1365, 11, 30608, 525, 35153, 393, 764, 264, 2531, 3166], "temperature": 0.0, "avg_logprob": -0.14914766947428384, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0025442419573664665}, {"id": 86, "seek": 54400, "start": 544.0, "end": 552.0, "text": " and could use the same calls with just asynchronous way.", "tokens": [293, 727, 764, 264, 912, 5498, 365, 445, 49174, 636, 13], "temperature": 0.0, "avg_logprob": -0.13719768524169923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.004192618653178215}, {"id": 87, "seek": 54400, "start": 552.0, "end": 556.0, "text": " And that is almost all I had to say.", "tokens": [400, 300, 307, 1920, 439, 286, 632, 281, 584, 13], "temperature": 0.0, "avg_logprob": -0.13719768524169923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.004192618653178215}, {"id": 88, "seek": 54400, "start": 556.0, "end": 562.0, "text": " So, are there questions?", "tokens": [407, 11, 366, 456, 1651, 30], "temperature": 0.0, "avg_logprob": -0.13719768524169923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.004192618653178215}, {"id": 89, "seek": 54400, "start": 562.0, "end": 565.0, "text": " No questions?", "tokens": [883, 1651, 30], "temperature": 0.0, "avg_logprob": -0.13719768524169923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.004192618653178215}, {"id": 90, "seek": 56500, "start": 565.0, "end": 577.0, "text": " So, you want a solution for this? Is there a way for Red Hat to lead this in the free desktop space, maybe?", "tokens": [407, 11, 291, 528, 257, 3827, 337, 341, 30, 1119, 456, 257, 636, 337, 4477, 15867, 281, 1477, 341, 294, 264, 1737, 14502, 1901, 11, 1310, 30], "temperature": 0.0, "avg_logprob": -0.2314140757576364, "compression_ratio": 1.436241610738255, "no_speech_prob": 0.014271275140345097}, {"id": 91, "seek": 56500, "start": 577.0, "end": 583.0, "text": " Well, maybe, yes. Who should lead the initiative?", "tokens": [1042, 11, 1310, 11, 2086, 13, 2102, 820, 1477, 264, 11552, 30], "temperature": 0.0, "avg_logprob": -0.2314140757576364, "compression_ratio": 1.436241610738255, "no_speech_prob": 0.014271275140345097}, {"id": 92, "seek": 56500, "start": 583.0, "end": 587.0, "text": " I am not sure. It's not official Red Hat initiative yet.", "tokens": [286, 669, 406, 988, 13, 467, 311, 406, 4783, 4477, 15867, 11552, 1939, 13], "temperature": 0.0, "avg_logprob": -0.2314140757576364, "compression_ratio": 1.436241610738255, "no_speech_prob": 0.014271275140345097}, {"id": 93, "seek": 58700, "start": 587.0, "end": 596.0, "text": " It's just my own opinion. So, it's not like Red Hat already has project and involved people and such.", "tokens": [467, 311, 445, 452, 1065, 4800, 13, 407, 11, 309, 311, 406, 411, 4477, 15867, 1217, 575, 1716, 293, 3288, 561, 293, 1270, 13], "temperature": 0.0, "avg_logprob": -0.1430675555498172, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.002443617209792137}, {"id": 94, "seek": 58700, "start": 596.0, "end": 605.0, "text": " So, it's still what I think should be done, but not yet decided who should lead it or who should cover that.", "tokens": [407, 11, 309, 311, 920, 437, 286, 519, 820, 312, 1096, 11, 457, 406, 1939, 3047, 567, 820, 1477, 309, 420, 567, 820, 2060, 300, 13], "temperature": 0.0, "avg_logprob": -0.1430675555498172, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.002443617209792137}, {"id": 95, "seek": 58700, "start": 605.0, "end": 612.0, "text": " I definitely want to talk about it in Red Hat, but it's in fact not clear to me", "tokens": [286, 2138, 528, 281, 751, 466, 309, 294, 4477, 15867, 11, 457, 309, 311, 294, 1186, 406, 1850, 281, 385], "temperature": 0.0, "avg_logprob": -0.1430675555498172, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.002443617209792137}, {"id": 96, "seek": 61200, "start": 612.0, "end": 619.0, "text": " which mailing list or organization should start and should organize this because", "tokens": [597, 41612, 1329, 420, 4475, 820, 722, 293, 820, 13859, 341, 570], "temperature": 0.0, "avg_logprob": -0.18470992713138976, "compression_ratio": 1.4585987261146496, "no_speech_prob": 0.0033965916372835636}, {"id": 97, "seek": 61200, "start": 619.0, "end": 626.0, "text": " it's maybe should be handled by G-Lipsy people or I don't know.", "tokens": [309, 311, 1310, 820, 312, 18033, 538, 460, 12, 43, 2600, 88, 561, 420, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.18470992713138976, "compression_ratio": 1.4585987261146496, "no_speech_prob": 0.0033965916372835636}, {"id": 98, "seek": 61200, "start": 626.0, "end": 634.0, "text": " I would like to talk and hear what other thing about it because I'm not sure myself.", "tokens": [286, 576, 411, 281, 751, 293, 1568, 437, 661, 551, 466, 309, 570, 286, 478, 406, 988, 2059, 13], "temperature": 0.0, "avg_logprob": -0.18470992713138976, "compression_ratio": 1.4585987261146496, "no_speech_prob": 0.0033965916372835636}, {"id": 99, "seek": 63400, "start": 634.0, "end": 645.0, "text": " It occurs to me that this problem statement is a lot like the get DNS problem statement plus things that aren't DNS.", "tokens": [467, 11843, 281, 385, 300, 341, 1154, 5629, 307, 257, 688, 411, 264, 483, 35153, 1154, 5629, 1804, 721, 300, 3212, 380, 35153, 13], "temperature": 0.0, "avg_logprob": -0.13921349735583288, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.00018260610522702336}, {"id": 100, "seek": 63400, "start": 645.0, "end": 657.0, "text": " So, I guess my recommendation would be why not look and see if you can enhance that API to include these non-DNS naming systems?", "tokens": [407, 11, 286, 2041, 452, 11879, 576, 312, 983, 406, 574, 293, 536, 498, 291, 393, 11985, 300, 9362, 281, 4090, 613, 2107, 12, 35, 42003, 25290, 3652, 30], "temperature": 0.0, "avg_logprob": -0.13921349735583288, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.00018260610522702336}, {"id": 101, "seek": 65700, "start": 657.0, "end": 664.0, "text": " Which API?", "tokens": [3013, 9362, 30], "temperature": 0.0, "avg_logprob": -0.13308162315219058, "compression_ratio": 1.3266666666666667, "no_speech_prob": 0.0013302149018272758}, {"id": 102, "seek": 65700, "start": 664.0, "end": 673.0, "text": " Well, the question was why not enhance existing solutions like get DNS for example?", "tokens": [1042, 11, 264, 1168, 390, 983, 406, 11985, 6741, 6547, 411, 483, 35153, 337, 1365, 30], "temperature": 0.0, "avg_logprob": -0.13308162315219058, "compression_ratio": 1.3266666666666667, "no_speech_prob": 0.0013302149018272758}, {"id": 103, "seek": 65700, "start": 673.0, "end": 684.0, "text": " I'm not sure how can you do that because I think that the problem I have with system D trying to do that", "tokens": [286, 478, 406, 988, 577, 393, 291, 360, 300, 570, 286, 519, 300, 264, 1154, 286, 362, 365, 1185, 413, 1382, 281, 360, 300], "temperature": 0.0, "avg_logprob": -0.13308162315219058, "compression_ratio": 1.3266666666666667, "no_speech_prob": 0.0013302149018272758}, {"id": 104, "seek": 68400, "start": 684.0, "end": 688.0, "text": " is far away.", "tokens": [307, 1400, 1314, 13], "temperature": 0.0, "avg_logprob": -0.1362893785749163, "compression_ratio": 1.5460122699386503, "no_speech_prob": 0.0019729144405573606}, {"id": 105, "seek": 68400, "start": 688.0, "end": 696.0, "text": " This is a good example of how to do that wrong because I think when application wants to talk DNS only and nothing else,", "tokens": [639, 307, 257, 665, 1365, 295, 577, 281, 360, 300, 2085, 570, 286, 519, 562, 3861, 2738, 281, 751, 35153, 787, 293, 1825, 1646, 11], "temperature": 0.0, "avg_logprob": -0.1362893785749163, "compression_ratio": 1.5460122699386503, "no_speech_prob": 0.0019729144405573606}, {"id": 106, "seek": 68400, "start": 696.0, "end": 698.0, "text": " it should be able to.", "tokens": [309, 820, 312, 1075, 281, 13], "temperature": 0.0, "avg_logprob": -0.1362893785749163, "compression_ratio": 1.5460122699386503, "no_speech_prob": 0.0019729144405573606}, {"id": 107, "seek": 68400, "start": 698.0, "end": 708.0, "text": " So, if I use the get DNS library and I think it should do only DNS, it should be able to choose.", "tokens": [407, 11, 498, 286, 764, 264, 483, 35153, 6405, 293, 286, 519, 309, 820, 360, 787, 35153, 11, 309, 820, 312, 1075, 281, 2826, 13], "temperature": 0.0, "avg_logprob": -0.1362893785749163, "compression_ratio": 1.5460122699386503, "no_speech_prob": 0.0019729144405573606}, {"id": 108, "seek": 70800, "start": 708.0, "end": 719.0, "text": " So, how do I choose whether it's different protocols and how do I forward from get DNS library?", "tokens": [407, 11, 577, 360, 286, 2826, 1968, 309, 311, 819, 20618, 293, 577, 360, 286, 2128, 490, 483, 35153, 6405, 30], "temperature": 0.0, "avg_logprob": -0.17429117722944779, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.004547168966382742}, {"id": 109, "seek": 70800, "start": 719.0, "end": 723.0, "text": " What do we all do from there?", "tokens": [708, 360, 321, 439, 360, 490, 456, 30], "temperature": 0.0, "avg_logprob": -0.17429117722944779, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.004547168966382742}, {"id": 110, "seek": 70800, "start": 723.0, "end": 734.0, "text": " Because I think get DNS expects DNS record types or such things and those are DNS specific.", "tokens": [1436, 286, 519, 483, 35153, 33280, 35153, 2136, 3467, 420, 1270, 721, 293, 729, 366, 35153, 2685, 13], "temperature": 0.0, "avg_logprob": -0.17429117722944779, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.004547168966382742}, {"id": 111, "seek": 73400, "start": 734.0, "end": 739.0, "text": " Those don't work in other protocols.", "tokens": [3950, 500, 380, 589, 294, 661, 20618, 13], "temperature": 0.0, "avg_logprob": -0.2501729277313733, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.002042055130004883}, {"id": 112, "seek": 73400, "start": 739.0, "end": 742.0, "text": " Does that answer the question?", "tokens": [4402, 300, 1867, 264, 1168, 30], "temperature": 0.0, "avg_logprob": -0.2501729277313733, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.002042055130004883}, {"id": 113, "seek": 73400, "start": 742.0, "end": 749.0, "text": " Well, not so much question as well as how to get DNS address this.", "tokens": [1042, 11, 406, 370, 709, 1168, 382, 731, 382, 577, 281, 483, 35153, 2985, 341, 13], "temperature": 0.0, "avg_logprob": -0.2501729277313733, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.002042055130004883}, {"id": 114, "seek": 73400, "start": 749.0, "end": 754.0, "text": " Get DNS for all its faults is extremely flexible.", "tokens": [3240, 35153, 337, 439, 1080, 36090, 307, 4664, 11358, 13], "temperature": 0.0, "avg_logprob": -0.2501729277313733, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.002042055130004883}, {"id": 115, "seek": 73400, "start": 754.0, "end": 758.0, "text": " So, you can enable and disable extensions.", "tokens": [407, 11, 291, 393, 9528, 293, 28362, 25129, 13], "temperature": 0.0, "avg_logprob": -0.2501729277313733, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.002042055130004883}, {"id": 116, "seek": 75800, "start": 758.0, "end": 764.0, "text": " You can say by default it does DNS only if you say I want to have an DNS that starts doing it.", "tokens": [509, 393, 584, 538, 7576, 309, 775, 35153, 787, 498, 291, 584, 286, 528, 281, 362, 364, 35153, 300, 3719, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.24901349920975535, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.010087856091558933}, {"id": 117, "seek": 75800, "start": 764.0, "end": 768.0, "text": " So, there is a way to extend it and the same thing applies to record types.", "tokens": [407, 11, 456, 307, 257, 636, 281, 10101, 309, 293, 264, 912, 551, 13165, 281, 2136, 3467, 13], "temperature": 0.0, "avg_logprob": -0.24901349920975535, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.010087856091558933}, {"id": 118, "seek": 75800, "start": 768.0, "end": 773.0, "text": " If you say I have funky record type, it fits within the framework to have it.", "tokens": [759, 291, 584, 286, 362, 33499, 2136, 2010, 11, 309, 9001, 1951, 264, 8388, 281, 362, 309, 13], "temperature": 0.0, "avg_logprob": -0.24901349920975535, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.010087856091558933}, {"id": 119, "seek": 75800, "start": 773.0, "end": 776.0, "text": " So, I think it's a lot of technical problems.", "tokens": [407, 11, 286, 519, 309, 311, 257, 688, 295, 6191, 2740, 13], "temperature": 0.0, "avg_logprob": -0.24901349920975535, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.010087856091558933}, {"id": 120, "seek": 75800, "start": 776.0, "end": 782.0, "text": " Yes, but look, it wasn't even a question.", "tokens": [1079, 11, 457, 574, 11, 309, 2067, 380, 754, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.24901349920975535, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.010087856091558933}, {"id": 121, "seek": 78200, "start": 782.0, "end": 789.0, "text": " Please repeat the comment.", "tokens": [2555, 7149, 264, 2871, 13], "temperature": 0.0, "avg_logprob": -0.2085627378043482, "compression_ratio": 1.371069182389937, "no_speech_prob": 0.005737240891903639}, {"id": 122, "seek": 78200, "start": 789.0, "end": 797.0, "text": " I think statement get DNS is quite flexible and can adjust to those.", "tokens": [286, 519, 5629, 483, 35153, 307, 1596, 11358, 293, 393, 4369, 281, 729, 13], "temperature": 0.0, "avg_logprob": -0.2085627378043482, "compression_ratio": 1.371069182389937, "no_speech_prob": 0.005737240891903639}, {"id": 123, "seek": 78200, "start": 797.0, "end": 799.0, "text": " Yes, why not?", "tokens": [1079, 11, 983, 406, 30], "temperature": 0.0, "avg_logprob": -0.2085627378043482, "compression_ratio": 1.371069182389937, "no_speech_prob": 0.005737240891903639}, {"id": 124, "seek": 78200, "start": 799.0, "end": 808.0, "text": " I don't say we have to implement it from start, but it should be generic enough so it would be future proof.", "tokens": [286, 500, 380, 584, 321, 362, 281, 4445, 309, 490, 722, 11, 457, 309, 820, 312, 19577, 1547, 370, 309, 576, 312, 2027, 8177, 13], "temperature": 0.0, "avg_logprob": -0.2085627378043482, "compression_ratio": 1.371069182389937, "no_speech_prob": 0.005737240891903639}, {"id": 125, "seek": 80800, "start": 808.0, "end": 819.0, "text": " And I admit I don't know details of DNS, get DNS library, so I can't comment details.", "tokens": [400, 286, 9796, 286, 500, 380, 458, 4365, 295, 35153, 11, 483, 35153, 6405, 11, 370, 286, 393, 380, 2871, 4365, 13], "temperature": 0.0, "avg_logprob": -0.2109084627521572, "compression_ratio": 1.4127906976744187, "no_speech_prob": 0.002747821155935526}, {"id": 126, "seek": 80800, "start": 819.0, "end": 826.0, "text": " I just ensure it can do, but why not if it's another library,", "tokens": [286, 445, 5586, 309, 393, 360, 11, 457, 983, 406, 498, 309, 311, 1071, 6405, 11], "temperature": 0.0, "avg_logprob": -0.2109084627521572, "compression_ratio": 1.4127906976744187, "no_speech_prob": 0.002747821155935526}, {"id": 127, "seek": 80800, "start": 826.0, "end": 835.0, "text": " but I think it eventually should land in Lipsy or something like that after it proves it works.", "tokens": [457, 286, 519, 309, 4728, 820, 2117, 294, 441, 2600, 88, 420, 746, 411, 300, 934, 309, 25019, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.2109084627521572, "compression_ratio": 1.4127906976744187, "no_speech_prob": 0.002747821155935526}, {"id": 128, "seek": 83500, "start": 835.0, "end": 838.0, "text": " So, maybe.", "tokens": [407, 11, 1310, 13], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 129, "seek": 83500, "start": 838.0, "end": 840.0, "text": " So, you had a slide.", "tokens": [407, 11, 291, 632, 257, 4137, 13], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 130, "seek": 83500, "start": 840.0, "end": 842.0, "text": " Does anybody else have a question?", "tokens": [4402, 4472, 1646, 362, 257, 1168, 30], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 131, "seek": 83500, "start": 842.0, "end": 843.0, "text": " No?", "tokens": [883, 30], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 132, "seek": 83500, "start": 843.0, "end": 847.0, "text": " You had a slide about callbacks near the beginning.", "tokens": [509, 632, 257, 4137, 466, 818, 17758, 2651, 264, 2863, 13], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 133, "seek": 83500, "start": 847.0, "end": 853.0, "text": " Callbacks.", "tokens": [7807, 17758, 13], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 134, "seek": 83500, "start": 853.0, "end": 855.0, "text": " But it doesn't matter.", "tokens": [583, 309, 1177, 380, 1871, 13], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 135, "seek": 83500, "start": 855.0, "end": 861.0, "text": " Do you expect every plug-in to handle things like TLS or would TLS be something?", "tokens": [1144, 291, 2066, 633, 5452, 12, 259, 281, 4813, 721, 411, 314, 19198, 420, 576, 314, 19198, 312, 746, 30], "temperature": 0.0, "avg_logprob": -0.210237429692195, "compression_ratio": 1.377906976744186, "no_speech_prob": 0.0010906107490882277}, {"id": 136, "seek": 86100, "start": 861.0, "end": 869.0, "text": " I would like to TLS be. TLS is kind of special machine, but it should be somewhere inside.", "tokens": [286, 576, 411, 281, 314, 19198, 312, 13, 314, 19198, 307, 733, 295, 2121, 3479, 11, 457, 309, 820, 312, 4079, 1854, 13], "temperature": 0.0, "avg_logprob": -0.17400933756972803, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.016051052138209343}, {"id": 137, "seek": 86100, "start": 869.0, "end": 878.0, "text": " And what the user should receive should be ready to use socket to work on.", "tokens": [400, 437, 264, 4195, 820, 4774, 820, 312, 1919, 281, 764, 19741, 281, 589, 322, 13], "temperature": 0.0, "avg_logprob": -0.17400933756972803, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.016051052138209343}, {"id": 138, "seek": 86100, "start": 878.0, "end": 888.0, "text": " So, he just puts inside the name and service name and it does the heavy machine inside.", "tokens": [407, 11, 415, 445, 8137, 1854, 264, 1315, 293, 2643, 1315, 293, 309, 775, 264, 4676, 3479, 1854, 13], "temperature": 0.0, "avg_logprob": -0.17400933756972803, "compression_ratio": 1.5617283950617284, "no_speech_prob": 0.016051052138209343}, {"id": 139, "seek": 88800, "start": 888.0, "end": 892.0, "text": " Well, TLS socket is something over it.", "tokens": [1042, 11, 314, 19198, 19741, 307, 746, 670, 309, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 140, "seek": 88800, "start": 892.0, "end": 896.0, "text": " It's above normal connection, so I think it should be extended.", "tokens": [467, 311, 3673, 2710, 4984, 11, 370, 286, 519, 309, 820, 312, 10913, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 141, "seek": 88800, "start": 896.0, "end": 899.0, "text": " I'm not sure what should be.", "tokens": [286, 478, 406, 988, 437, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 142, "seek": 88800, "start": 899.0, "end": 903.0, "text": " It's above that.", "tokens": [467, 311, 3673, 300, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 143, "seek": 88800, "start": 903.0, "end": 906.0, "text": " I'm, yes, I am out of time.", "tokens": [286, 478, 11, 2086, 11, 286, 669, 484, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 144, "seek": 88800, "start": 906.0, "end": 908.0, "text": " Yes, yes.", "tokens": [1079, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 145, "seek": 88800, "start": 908.0, "end": 909.0, "text": " That's perfect.", "tokens": [663, 311, 2176, 13], "temperature": 0.0, "avg_logprob": -0.22452841306987562, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.005143932066857815}, {"id": 146, "seek": 90900, "start": 909.0, "end": 919.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24465815226236978, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.000571445852983743}], "language": "en"}