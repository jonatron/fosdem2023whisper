{"text": " is going to talk about the most painful thing I ever did in Go, which is debugging concurrent programs. I'll give it a pause for Andriy. Hi. Can you hear me well? Nice. I'm very pleased all of you here. In person, finally, since all this COVID. And today I will talk about debugging concurrent programs in Go, and a little bit about myself. My name is Andriy. I'm a software engineer originally from Ukraine, currently, unfortunately, living in Austria. I'm a big fan of sports, gymnastics, crossfit, and different debuggers, etc. The interest in parallel programming has grown dramatically recent years. And the added complexity of expressing concurrency has made debugging parallel programs even harder than debugging sequential programs. And usually, sorry, every day at work, I feel like I have these eight stages of debugging myself. So that can't happen. That does not happen on my machine. That should not happen. Why does it happen? Oh, I see now. I feel I know what's the problem. Then how did that ever work? So last couple of days, I saw PR, like, oh, it's not working since two years, some code. And I was like, who wrote this? And like, oh, wait, it was me. So the classical approach for debugging sequential programs involves very easy, like, straightforward way. So we rapidly stop and set breakpoints. We just go step by step. And like, sometimes we print something, sometimes we continue, rerun, etc. So and this style we just usually we call is cyclic debugging. But the problem, unfortunately, parallel or concurrent programs do not always have reproducible behavior, even when they run with the same inputs on the same machine with the same results. So an output results usually can be radically different, and it's hard to predict. This difference, a cure, for example, when you run some program, and as you can see, it's very dummy one, but output is different each time when I run it on my machine. Sometimes it's the same, but sometimes not. Yeah, I spend lots of time to read some books and articles and videos on YouTube. I just always trying to find, like, a question, like an answer to my question, okay, there is any, like, okay, we have books how to write code, we have books how to write tests, okay, how to debug code, there is no books. Even there is no books to how debug concurrent programs, and so to start explaining my journey, how I usually do it, let's a little bit remind who, what is gorotin? So gorotin is just like an abstraction, yeah, it's, by the way, struct which handle gorotin under the hood inside Go. And usually gorotins are multiplexed on different or multiply OS threads. So if one should block, and like we're waiting for some IO call, others can continue to run. And there are also lots of design which hides many complexities of thread creation and management. So go and do it on our own, so it's nice. And to create a gorotin, it's very easy, just prefix your function with go keyword, and that's new gorotin, nothing completed. By the way, who knows why they name it gorotins? Maybe somebody have ideas, yeah, go ahead. Why not just call it gorotin? So in each language, we can just replace first letter and like gorotin, yeah, it's, yeah, yes and no. So like they call it, at least from what I read, they call it because like threads, gorotins, processes and so on. It's not an accurate explanation what guarantees does. So gorotin has its own like simple model and how it's executed, et cetera, et cetera. And that's why like they know it, cool. So next question, before I will share my experience, how do you think, how can I debug my concurrent program? So nice, nice. Can you repeat what the answer was for the stream? Thank you. Can you repeat the question, you mean? If you have an answer from the room, can you quickly repeat it so it's recorded on the stream? Yeah, we'll do. So let's repeat, how can, how can I debug my concurrent program? So the gentleman suggested using prints, nice, yes, nice. This author of delt by the way, okay, any other ideas? Okay, yes, yeah, it's a good idea, nice. So just to repeat for people who are watching, their ideas was using debugger delt, using trace or trace, using tests, et cetera. So my first assumption was, okay, playground, let's play a little bit. And like a few years ago, when I started writing this talk to be honest, there was like a limit, so playground worked only with Go Max Prods 1, so it always reproduced my program. But right now, it's more or less simulate local development. Okay, I have more like bright ideas. So maybe we can just color logs, I don't know, visualize goroutines, why not? So here's a funny package, which just what it does, it's just like print different goroutines with different colors like this. So yeah, I mean, if you do something very quick, you can just figure out which goroutine, which color, et cetera. Yeah, return to seriously, there is interesting article, it's quite old, but one of my friends from Ukraine, he wrote this article also a few years ago, he decided to visualize how all this scheduling, goroutines works with these fancy pictures, also very good article to highly recommend. Another idea is try to print how Go schedule events. So there is the environment variable, which can print you some extra information and yeah. And of course, using debuggers, today I will focus a little bit on Delph and a little bit on GDB. So next question. Can I set breakpoint inside goroutine? Any ideas? Yes? No? Yes? So the answer is yes, yeah, typically you can set breakpoint inside goroutine, you can jump into this goroutine, see what's inside and yeah, it's very handy, especially if you develop like server and other stuff, okay. What about channels? So if I decide like send a message to the buffer channel of size four, yeah, it's very nice that you can set breakpoint, you can print channel and Delph has very fancy like meta data, which shows you even like current channel state. So you see I send like one, it's a first item and some data information also useful. Then if I add another one, so like next, you see now I have two elements in channel and the small problem, usually like if I want to send message to channel from Delph CLI, unfortunately it's not supported, here's the issue I created, yeah, and there's a comment that yeah, we can fix it, but yeah, I hope we will fix it some time, yeah, so you can't set, so technically it's possible, but it's not, I mean, so it can be same semantic, you can set and Delph will handle it. Okay, now let's focus a little bit on how we can debug goroutines, so yeah, if you're inside a goroutine and you will print a state of goroutine, there's a keyword, goroutine, it prints current goroutine where you put your breakpoint, but if you have lots of goroutines, there's like interesting feature, I really use a lot, so, but let's step back a little bit, there's another idea and like implementation, you can use this profile labels, so it's inside pprof model, so you can run pprof do and inside through context run your code and it will like mark your goroutine with label and usually you use this labels for profiling, so you can open pprof profiles and see like some different metrics, but you can do it also with Delph, which is super cool, so you can, if you label your goroutines with labels like this or if you use like middleware, you can also do it, I mean, if you use web server, you can use this middleware, I post link on next slide and it will automatically like add labels to all your handlers, which is nice, so you can see like which handler you are currently because if you print goroutines, you will see like even in Delph, you will see lots of unreadable information, but if you just need to focus on login goroutines or like goroutines which doing something with your database, you can label it in the same manner as you do with pprof and then, yeah, also you can do it directly, by the way, this library which I mentioned, it's very small one, it's also support like set labels, just a wrapper, so very handy one and then, if you run goroutines keyword inside Delph debugger, minus L, it will print goroutines, it's just very simple hello world, which has like this main goroutine and few other goroutines without any labels, et cetera, but then, I created another like project inspired by one article and yeah, so here you can print all goroutines which related to your like label page and yeah, also you can go to docs and find different like group by, I don't know, filters, so it's very handy and how you can find your goroutine, then you can switch to this goroutine, if you don't know, also you can print or list source code, you can set new breakpoint, it's very nice and yeah, also you can use this demo project, it's not my, but it's more written for goland, but if to run it, you just need to this small tweak, you need pass some build flags and tags debugger, otherwise this library will not work and then you can repeat everything I did, I highly recommend to play with it and when you need it, you will be already like with everything you need. Regarding gdb, yeah, I play a little bit with them, it's quite not supported what I need for goland and yeah, it has this like info goroutines keyword, as far as I remember, you can't like filter goroutines and it's not readable, so like yeah, especially this part, yeah and I decided to not waste my time, to be honest, because it's yeah, you can just use delf and for such problem rather than playing with gdb. Cool, so next, not only with debugger, you can find your problems, one important problem in goland world is deadlocks and with deadlocks, usually program gets stuck on the channel send operation, which waiting forever, for example, to read the value and nice that goland support detection of these situations compared to other languages, for example, Python does not support this deadlock detection, which is hard to debug such problems and yeah, if you need like real world examples, you can see this very interesting library go deadlock, which using this library also found lots of deadlocks on cockroach db and there are lots of interesting examples how mutex is can be handled properly, how to write it properly and etc, etc, it's like this library is an entire separate like discussion. Returning to our case, yeah, I wrote like, I put to slide this very simple example, so yeah, sometimes you have this conflict in access and you have this data races and I saw it few times in some open source projects, but usually people do not do it, so I highly recommend run your CI pipeline with this dash race, especially tests, it helps you like always run with this flag and it will print you if there is data races or not, this dash race not always can find all data races, some common yes, but sometimes no, but highly recommend to add it to your project, so never skip, so now I have like seven, I have a seven rules for you, so how to unblock yourself when you get stuck on something and you don't know how to debug it, so first never assume a particular order of execution, so when you write in concurrent programs try to always think about not running it in particular order, especially it works with some benchmarks and tests, so try to not put this like, I also saw it lots of times when people, when run tests, when you run go test by default, if you know they run it in parallel, but usually people say like, no run it like sequentially and that's not a good idea, another advice, it's more about designing than writing code, try to implement your any concurrency logic at highest level as possible, try to not pass lots of channels, lots of like go routines etc, try to like keep logic separately and this concurrency separately, yeah, don't forget as I said, go race not always helps because it's not detects when program like whole freeze, it's only when a subset of go routines get stuck, as gentlemen suggested, you can use as trace and different tools for tracing which can help you to see like, are we waiting for some resource like reading file, access net, it's more low level but it's very useful, yeah, I show it on another talk but you probably know about it, you can use conditional breakpoints which helps you to cover cases especially when it's concurrent program so you can catch only your case, not like click next on every go team, as I said, you can use shadow in tracer, you can use go deadlock and yeah, last but not least use debugger, don't forget about it, it's also very handy and like every release, every version I see how debuggers are adding new stuff which is nice, cool, so I have like few references because to cover everything is hard in 25 minutes, I will post slides so you can accurately read everything, maybe to like picture it and thank you, thank you, are there any questions? Yeah, before you're thinking, if you want to donate to Ukraine, just let me know, few my friends right now are fighting so we can help directly, if you're afraid. Thank you. Oh, I have a question. Have you tried using tools such as RR or Hermit which try to execute the program in a deterministic fashion? You mean backwards? Yes, they can do a recording for their execution and then replace but the point is that the recording is deterministic. Yeah, I use it for sequential debugging, never for concurrent debugging, I mean, maybe it's possible but in my case it's, I covered what I just showed, of course there are other cases, I will try. If you are leaving the room trying to stay quiet for a second, do not talk, chairs are okay, so we can still hear any questions. Well, no more questions, that means your talk was very clear. Thank you and a lot of applause.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.44, "text": " is going to talk about the most painful thing I ever did in Go, which is debugging concurrent", "tokens": [50364, 307, 516, 281, 751, 466, 264, 881, 11697, 551, 286, 1562, 630, 294, 1037, 11, 597, 307, 45592, 37702, 50836], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 1, "seek": 0, "start": 9.44, "end": 10.44, "text": " programs.", "tokens": [50836, 4268, 13, 50886], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 2, "seek": 0, "start": 10.44, "end": 12.88, "text": " I'll give it a pause for Andriy.", "tokens": [50886, 286, 603, 976, 309, 257, 10465, 337, 400, 470, 88, 13, 51008], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 3, "seek": 0, "start": 12.88, "end": 13.88, "text": " Hi.", "tokens": [51008, 2421, 13, 51058], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 4, "seek": 0, "start": 13.88, "end": 16.4, "text": " Can you hear me well?", "tokens": [51058, 1664, 291, 1568, 385, 731, 30, 51184], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 5, "seek": 0, "start": 16.4, "end": 17.400000000000002, "text": " Nice.", "tokens": [51184, 5490, 13, 51234], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 6, "seek": 0, "start": 17.400000000000002, "end": 26.96, "text": " I'm very pleased all of you here.", "tokens": [51234, 286, 478, 588, 10587, 439, 295, 291, 510, 13, 51712], "temperature": 0.0, "avg_logprob": -0.46219105507010844, "compression_ratio": 1.3202614379084967, "no_speech_prob": 0.5404839515686035}, {"id": 7, "seek": 2696, "start": 27.96, "end": 32.56, "text": " In person, finally, since all this COVID.", "tokens": [50414, 682, 954, 11, 2721, 11, 1670, 439, 341, 4566, 13, 50644], "temperature": 0.0, "avg_logprob": -0.22994562636974247, "compression_ratio": 1.4863636363636363, "no_speech_prob": 0.7284588813781738}, {"id": 8, "seek": 2696, "start": 32.56, "end": 40.88, "text": " And today I will talk about debugging concurrent programs in Go, and a little bit about myself.", "tokens": [50644, 400, 965, 286, 486, 751, 466, 45592, 37702, 4268, 294, 1037, 11, 293, 257, 707, 857, 466, 2059, 13, 51060], "temperature": 0.0, "avg_logprob": -0.22994562636974247, "compression_ratio": 1.4863636363636363, "no_speech_prob": 0.7284588813781738}, {"id": 9, "seek": 2696, "start": 40.88, "end": 42.08, "text": " My name is Andriy.", "tokens": [51060, 1222, 1315, 307, 400, 470, 88, 13, 51120], "temperature": 0.0, "avg_logprob": -0.22994562636974247, "compression_ratio": 1.4863636363636363, "no_speech_prob": 0.7284588813781738}, {"id": 10, "seek": 2696, "start": 42.08, "end": 47.68, "text": " I'm a software engineer originally from Ukraine, currently, unfortunately, living in Austria.", "tokens": [51120, 286, 478, 257, 4722, 11403, 7993, 490, 14081, 11, 4362, 11, 7015, 11, 2647, 294, 26501, 13, 51400], "temperature": 0.0, "avg_logprob": -0.22994562636974247, "compression_ratio": 1.4863636363636363, "no_speech_prob": 0.7284588813781738}, {"id": 11, "seek": 2696, "start": 47.68, "end": 55.6, "text": " I'm a big fan of sports, gymnastics, crossfit, and different debuggers, etc.", "tokens": [51400, 286, 478, 257, 955, 3429, 295, 6573, 11, 48461, 11, 3278, 6845, 11, 293, 819, 3001, 3562, 433, 11, 5183, 13, 51796], "temperature": 0.0, "avg_logprob": -0.22994562636974247, "compression_ratio": 1.4863636363636363, "no_speech_prob": 0.7284588813781738}, {"id": 12, "seek": 5560, "start": 55.6, "end": 63.2, "text": " The interest in parallel programming has grown dramatically recent years.", "tokens": [50364, 440, 1179, 294, 8952, 9410, 575, 7709, 17548, 5162, 924, 13, 50744], "temperature": 0.0, "avg_logprob": -0.18341284892598136, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.009056796319782734}, {"id": 13, "seek": 5560, "start": 63.2, "end": 69.04, "text": " And the added complexity of expressing concurrency has made debugging parallel programs even", "tokens": [50744, 400, 264, 3869, 14024, 295, 22171, 23702, 10457, 575, 1027, 45592, 8952, 4268, 754, 51036], "temperature": 0.0, "avg_logprob": -0.18341284892598136, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.009056796319782734}, {"id": 14, "seek": 5560, "start": 69.04, "end": 73.4, "text": " harder than debugging sequential programs.", "tokens": [51036, 6081, 813, 45592, 42881, 4268, 13, 51254], "temperature": 0.0, "avg_logprob": -0.18341284892598136, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.009056796319782734}, {"id": 15, "seek": 5560, "start": 73.4, "end": 84.88, "text": " And usually, sorry, every day at work, I feel like I have these eight stages of debugging", "tokens": [51254, 400, 2673, 11, 2597, 11, 633, 786, 412, 589, 11, 286, 841, 411, 286, 362, 613, 3180, 10232, 295, 45592, 51828], "temperature": 0.0, "avg_logprob": -0.18341284892598136, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.009056796319782734}, {"id": 16, "seek": 8488, "start": 85.28, "end": 86.64, "text": " myself.", "tokens": [50384, 2059, 13, 50452], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 17, "seek": 8488, "start": 86.64, "end": 91.11999999999999, "text": " So that can't happen.", "tokens": [50452, 407, 300, 393, 380, 1051, 13, 50676], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 18, "seek": 8488, "start": 91.11999999999999, "end": 94.36, "text": " That does not happen on my machine.", "tokens": [50676, 663, 775, 406, 1051, 322, 452, 3479, 13, 50838], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 19, "seek": 8488, "start": 94.36, "end": 96.88, "text": " That should not happen.", "tokens": [50838, 663, 820, 406, 1051, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 20, "seek": 8488, "start": 96.88, "end": 97.88, "text": " Why does it happen?", "tokens": [50964, 1545, 775, 309, 1051, 30, 51014], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 21, "seek": 8488, "start": 97.88, "end": 98.88, "text": " Oh, I see now.", "tokens": [51014, 876, 11, 286, 536, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 22, "seek": 8488, "start": 98.88, "end": 104.03999999999999, "text": " I feel I know what's the problem.", "tokens": [51064, 286, 841, 286, 458, 437, 311, 264, 1154, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 23, "seek": 8488, "start": 104.03999999999999, "end": 106.75999999999999, "text": " Then how did that ever work?", "tokens": [51322, 1396, 577, 630, 300, 1562, 589, 30, 51458], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 24, "seek": 8488, "start": 106.75999999999999, "end": 114.24, "text": " So last couple of days, I saw PR, like, oh, it's not working since two years, some code.", "tokens": [51458, 407, 1036, 1916, 295, 1708, 11, 286, 1866, 11568, 11, 411, 11, 1954, 11, 309, 311, 406, 1364, 1670, 732, 924, 11, 512, 3089, 13, 51832], "temperature": 0.0, "avg_logprob": -0.2887135372366956, "compression_ratio": 1.491891891891892, "no_speech_prob": 0.20998699963092804}, {"id": 25, "seek": 11424, "start": 114.24, "end": 117.36, "text": " And I was like, who wrote this?", "tokens": [50364, 400, 286, 390, 411, 11, 567, 4114, 341, 30, 50520], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 26, "seek": 11424, "start": 117.36, "end": 122.19999999999999, "text": " And like, oh, wait, it was me.", "tokens": [50520, 400, 411, 11, 1954, 11, 1699, 11, 309, 390, 385, 13, 50762], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 27, "seek": 11424, "start": 122.19999999999999, "end": 130.76, "text": " So the classical approach for debugging sequential programs involves very easy, like, straightforward", "tokens": [50762, 407, 264, 13735, 3109, 337, 45592, 42881, 4268, 11626, 588, 1858, 11, 411, 11, 15325, 51190], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 28, "seek": 11424, "start": 130.76, "end": 131.76, "text": " way.", "tokens": [51190, 636, 13, 51240], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 29, "seek": 11424, "start": 131.76, "end": 136.16, "text": " So we rapidly stop and set breakpoints.", "tokens": [51240, 407, 321, 12910, 1590, 293, 992, 1821, 20552, 13, 51460], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 30, "seek": 11424, "start": 136.16, "end": 138.8, "text": " We just go step by step.", "tokens": [51460, 492, 445, 352, 1823, 538, 1823, 13, 51592], "temperature": 0.0, "avg_logprob": -0.3156311832257171, "compression_ratio": 1.401197604790419, "no_speech_prob": 0.009093916043639183}, {"id": 31, "seek": 13880, "start": 138.8, "end": 147.04000000000002, "text": " And like, sometimes we print something, sometimes we continue, rerun, etc.", "tokens": [50364, 400, 411, 11, 2171, 321, 4482, 746, 11, 2171, 321, 2354, 11, 43819, 409, 11, 5183, 13, 50776], "temperature": 0.0, "avg_logprob": -0.20233468005531713, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006198053248226643}, {"id": 32, "seek": 13880, "start": 147.04000000000002, "end": 155.08, "text": " So and this style we just usually we call is cyclic debugging.", "tokens": [50776, 407, 293, 341, 3758, 321, 445, 2673, 321, 818, 307, 38154, 1050, 45592, 13, 51178], "temperature": 0.0, "avg_logprob": -0.20233468005531713, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006198053248226643}, {"id": 33, "seek": 13880, "start": 155.08, "end": 161.72000000000003, "text": " But the problem, unfortunately, parallel or concurrent programs do not always have reproducible", "tokens": [51178, 583, 264, 1154, 11, 7015, 11, 8952, 420, 37702, 4268, 360, 406, 1009, 362, 11408, 32128, 51510], "temperature": 0.0, "avg_logprob": -0.20233468005531713, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006198053248226643}, {"id": 34, "seek": 13880, "start": 161.72000000000003, "end": 168.76000000000002, "text": " behavior, even when they run with the same inputs on the same machine with the same results.", "tokens": [51510, 5223, 11, 754, 562, 436, 1190, 365, 264, 912, 15743, 322, 264, 912, 3479, 365, 264, 912, 3542, 13, 51862], "temperature": 0.0, "avg_logprob": -0.20233468005531713, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.006198053248226643}, {"id": 35, "seek": 16876, "start": 168.76, "end": 179.23999999999998, "text": " So an output results usually can be radically different, and it's hard to predict.", "tokens": [50364, 407, 364, 5598, 3542, 2673, 393, 312, 35508, 819, 11, 293, 309, 311, 1152, 281, 6069, 13, 50888], "temperature": 0.0, "avg_logprob": -0.16044758305405127, "compression_ratio": 1.5304878048780488, "no_speech_prob": 0.01732487976551056}, {"id": 36, "seek": 16876, "start": 179.23999999999998, "end": 188.16, "text": " This difference, a cure, for example, when you run some program, and as you can see,", "tokens": [50888, 639, 2649, 11, 257, 13698, 11, 337, 1365, 11, 562, 291, 1190, 512, 1461, 11, 293, 382, 291, 393, 536, 11, 51334], "temperature": 0.0, "avg_logprob": -0.16044758305405127, "compression_ratio": 1.5304878048780488, "no_speech_prob": 0.01732487976551056}, {"id": 37, "seek": 16876, "start": 188.16, "end": 193.92, "text": " it's very dummy one, but output is different each time when I run it on my machine.", "tokens": [51334, 309, 311, 588, 35064, 472, 11, 457, 5598, 307, 819, 1184, 565, 562, 286, 1190, 309, 322, 452, 3479, 13, 51622], "temperature": 0.0, "avg_logprob": -0.16044758305405127, "compression_ratio": 1.5304878048780488, "no_speech_prob": 0.01732487976551056}, {"id": 38, "seek": 19392, "start": 193.92, "end": 199.04, "text": " Sometimes it's the same, but sometimes not.", "tokens": [50364, 4803, 309, 311, 264, 912, 11, 457, 2171, 406, 13, 50620], "temperature": 0.0, "avg_logprob": -0.23033096864051425, "compression_ratio": 1.7704081632653061, "no_speech_prob": 0.2577074468135834}, {"id": 39, "seek": 19392, "start": 199.04, "end": 205.11999999999998, "text": " Yeah, I spend lots of time to read some books and articles and videos on YouTube.", "tokens": [50620, 865, 11, 286, 3496, 3195, 295, 565, 281, 1401, 512, 3642, 293, 11290, 293, 2145, 322, 3088, 13, 50924], "temperature": 0.0, "avg_logprob": -0.23033096864051425, "compression_ratio": 1.7704081632653061, "no_speech_prob": 0.2577074468135834}, {"id": 40, "seek": 19392, "start": 205.11999999999998, "end": 211.88, "text": " I just always trying to find, like, a question, like an answer to my question, okay, there", "tokens": [50924, 286, 445, 1009, 1382, 281, 915, 11, 411, 11, 257, 1168, 11, 411, 364, 1867, 281, 452, 1168, 11, 1392, 11, 456, 51262], "temperature": 0.0, "avg_logprob": -0.23033096864051425, "compression_ratio": 1.7704081632653061, "no_speech_prob": 0.2577074468135834}, {"id": 41, "seek": 19392, "start": 211.88, "end": 218.51999999999998, "text": " is any, like, okay, we have books how to write code, we have books how to write tests, okay,", "tokens": [51262, 307, 604, 11, 411, 11, 1392, 11, 321, 362, 3642, 577, 281, 2464, 3089, 11, 321, 362, 3642, 577, 281, 2464, 6921, 11, 1392, 11, 51594], "temperature": 0.0, "avg_logprob": -0.23033096864051425, "compression_ratio": 1.7704081632653061, "no_speech_prob": 0.2577074468135834}, {"id": 42, "seek": 19392, "start": 218.51999999999998, "end": 221.16, "text": " how to debug code, there is no books.", "tokens": [51594, 577, 281, 24083, 3089, 11, 456, 307, 572, 3642, 13, 51726], "temperature": 0.0, "avg_logprob": -0.23033096864051425, "compression_ratio": 1.7704081632653061, "no_speech_prob": 0.2577074468135834}, {"id": 43, "seek": 22116, "start": 221.16, "end": 230.04, "text": " Even there is no books to how debug concurrent programs, and so to start explaining my journey,", "tokens": [50364, 2754, 456, 307, 572, 3642, 281, 577, 24083, 37702, 4268, 11, 293, 370, 281, 722, 13468, 452, 4671, 11, 50808], "temperature": 0.0, "avg_logprob": -0.32902414798736573, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.018272090703248978}, {"id": 44, "seek": 22116, "start": 230.04, "end": 237.32, "text": " how I usually do it, let's a little bit remind who, what is gorotin?", "tokens": [50808, 577, 286, 2673, 360, 309, 11, 718, 311, 257, 707, 857, 4160, 567, 11, 437, 307, 24012, 310, 259, 30, 51172], "temperature": 0.0, "avg_logprob": -0.32902414798736573, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.018272090703248978}, {"id": 45, "seek": 22116, "start": 237.32, "end": 246.44, "text": " So gorotin is just like an abstraction, yeah, it's, by the way, struct which handle gorotin", "tokens": [51172, 407, 24012, 310, 259, 307, 445, 411, 364, 37765, 11, 1338, 11, 309, 311, 11, 538, 264, 636, 11, 6594, 597, 4813, 24012, 310, 259, 51628], "temperature": 0.0, "avg_logprob": -0.32902414798736573, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.018272090703248978}, {"id": 46, "seek": 22116, "start": 246.44, "end": 249.56, "text": " under the hood inside Go.", "tokens": [51628, 833, 264, 13376, 1854, 1037, 13, 51784], "temperature": 0.0, "avg_logprob": -0.32902414798736573, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.018272090703248978}, {"id": 47, "seek": 24956, "start": 249.56, "end": 256.52, "text": " And usually gorotins are multiplexed on different or multiply OS threads.", "tokens": [50364, 400, 2673, 24012, 310, 1292, 366, 3311, 2021, 292, 322, 819, 420, 12972, 12731, 19314, 13, 50712], "temperature": 0.0, "avg_logprob": -0.19284806932721818, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.009414640255272388}, {"id": 48, "seek": 24956, "start": 256.52, "end": 267.28, "text": " So if one should block, and like we're waiting for some IO call, others can continue to run.", "tokens": [50712, 407, 498, 472, 820, 3461, 11, 293, 411, 321, 434, 3806, 337, 512, 39839, 818, 11, 2357, 393, 2354, 281, 1190, 13, 51250], "temperature": 0.0, "avg_logprob": -0.19284806932721818, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.009414640255272388}, {"id": 49, "seek": 24956, "start": 267.28, "end": 276.04, "text": " And there are also lots of design which hides many complexities of thread creation and management.", "tokens": [51250, 400, 456, 366, 611, 3195, 295, 1715, 597, 35953, 867, 48705, 295, 7207, 8016, 293, 4592, 13, 51688], "temperature": 0.0, "avg_logprob": -0.19284806932721818, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.009414640255272388}, {"id": 50, "seek": 27604, "start": 276.04, "end": 281.40000000000003, "text": " So go and do it on our own, so it's nice.", "tokens": [50364, 407, 352, 293, 360, 309, 322, 527, 1065, 11, 370, 309, 311, 1481, 13, 50632], "temperature": 0.0, "avg_logprob": -0.21252031326293946, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.02922590635716915}, {"id": 51, "seek": 27604, "start": 281.40000000000003, "end": 288.48, "text": " And to create a gorotin, it's very easy, just prefix your function with go keyword, and", "tokens": [50632, 400, 281, 1884, 257, 24012, 310, 259, 11, 309, 311, 588, 1858, 11, 445, 46969, 428, 2445, 365, 352, 20428, 11, 293, 50986], "temperature": 0.0, "avg_logprob": -0.21252031326293946, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.02922590635716915}, {"id": 52, "seek": 27604, "start": 288.48, "end": 293.92, "text": " that's new gorotin, nothing completed.", "tokens": [50986, 300, 311, 777, 24012, 310, 259, 11, 1825, 7365, 13, 51258], "temperature": 0.0, "avg_logprob": -0.21252031326293946, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.02922590635716915}, {"id": 53, "seek": 27604, "start": 293.92, "end": 299.8, "text": " By the way, who knows why they name it gorotins?", "tokens": [51258, 3146, 264, 636, 11, 567, 3255, 983, 436, 1315, 309, 24012, 310, 1292, 30, 51552], "temperature": 0.0, "avg_logprob": -0.21252031326293946, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.02922590635716915}, {"id": 54, "seek": 29980, "start": 299.8, "end": 308.84000000000003, "text": " Maybe somebody have ideas, yeah, go ahead.", "tokens": [50364, 2704, 2618, 362, 3487, 11, 1338, 11, 352, 2286, 13, 50816], "temperature": 0.0, "avg_logprob": -0.3620856770297937, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.20132774114608765}, {"id": 55, "seek": 29980, "start": 308.84000000000003, "end": 313.64, "text": " Why not just call it gorotin?", "tokens": [50816, 1545, 406, 445, 818, 309, 24012, 310, 259, 30, 51056], "temperature": 0.0, "avg_logprob": -0.3620856770297937, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.20132774114608765}, {"id": 56, "seek": 29980, "start": 313.64, "end": 324.84000000000003, "text": " So in each language, we can just replace first letter and like gorotin, yeah, it's, yeah,", "tokens": [51056, 407, 294, 1184, 2856, 11, 321, 393, 445, 7406, 700, 5063, 293, 411, 24012, 310, 259, 11, 1338, 11, 309, 311, 11, 1338, 11, 51616], "temperature": 0.0, "avg_logprob": -0.3620856770297937, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.20132774114608765}, {"id": 57, "seek": 29980, "start": 324.84000000000003, "end": 325.84000000000003, "text": " yes and no.", "tokens": [51616, 2086, 293, 572, 13, 51666], "temperature": 0.0, "avg_logprob": -0.3620856770297937, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.20132774114608765}, {"id": 58, "seek": 32584, "start": 325.84, "end": 331.32, "text": " So like they call it, at least from what I read, they call it because like threads,", "tokens": [50364, 407, 411, 436, 818, 309, 11, 412, 1935, 490, 437, 286, 1401, 11, 436, 818, 309, 570, 411, 19314, 11, 50638], "temperature": 0.0, "avg_logprob": -0.24626205081031435, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.034324079751968384}, {"id": 59, "seek": 32584, "start": 331.32, "end": 333.76, "text": " gorotins, processes and so on.", "tokens": [50638, 24012, 310, 1292, 11, 7555, 293, 370, 322, 13, 50760], "temperature": 0.0, "avg_logprob": -0.24626205081031435, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.034324079751968384}, {"id": 60, "seek": 32584, "start": 333.76, "end": 337.71999999999997, "text": " It's not an accurate explanation what guarantees does.", "tokens": [50760, 467, 311, 406, 364, 8559, 10835, 437, 32567, 775, 13, 50958], "temperature": 0.0, "avg_logprob": -0.24626205081031435, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.034324079751968384}, {"id": 61, "seek": 32584, "start": 337.71999999999997, "end": 345.44, "text": " So gorotin has its own like simple model and how it's executed, et cetera, et cetera.", "tokens": [50958, 407, 24012, 310, 259, 575, 1080, 1065, 411, 2199, 2316, 293, 577, 309, 311, 17577, 11, 1030, 11458, 11, 1030, 11458, 13, 51344], "temperature": 0.0, "avg_logprob": -0.24626205081031435, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.034324079751968384}, {"id": 62, "seek": 32584, "start": 345.44, "end": 352.17999999999995, "text": " And that's why like they know it, cool.", "tokens": [51344, 400, 300, 311, 983, 411, 436, 458, 309, 11, 1627, 13, 51681], "temperature": 0.0, "avg_logprob": -0.24626205081031435, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.034324079751968384}, {"id": 63, "seek": 35218, "start": 352.18, "end": 359.1, "text": " So next question, before I will share my experience, how do you think, how can I debug", "tokens": [50364, 407, 958, 1168, 11, 949, 286, 486, 2073, 452, 1752, 11, 577, 360, 291, 519, 11, 577, 393, 286, 24083, 50710], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 64, "seek": 35218, "start": 359.1, "end": 361.82, "text": " my concurrent program?", "tokens": [50710, 452, 37702, 1461, 30, 50846], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 65, "seek": 35218, "start": 361.82, "end": 366.18, "text": " So nice, nice.", "tokens": [50846, 407, 1481, 11, 1481, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 66, "seek": 35218, "start": 366.18, "end": 368.54, "text": " Can you repeat what the answer was for the stream?", "tokens": [51064, 1664, 291, 7149, 437, 264, 1867, 390, 337, 264, 4309, 30, 51182], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 67, "seek": 35218, "start": 368.54, "end": 370.82, "text": " Thank you.", "tokens": [51182, 1044, 291, 13, 51296], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 68, "seek": 35218, "start": 370.82, "end": 374.02, "text": " Can you repeat the question, you mean?", "tokens": [51296, 1664, 291, 7149, 264, 1168, 11, 291, 914, 30, 51456], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 69, "seek": 35218, "start": 374.02, "end": 377.26, "text": " If you have an answer from the room, can you quickly repeat it so it's recorded on the", "tokens": [51456, 759, 291, 362, 364, 1867, 490, 264, 1808, 11, 393, 291, 2661, 7149, 309, 370, 309, 311, 8287, 322, 264, 51618], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 70, "seek": 35218, "start": 377.26, "end": 378.26, "text": " stream?", "tokens": [51618, 4309, 30, 51668], "temperature": 0.0, "avg_logprob": -0.21553777611773947, "compression_ratio": 1.6243654822335025, "no_speech_prob": 0.0699753612279892}, {"id": 71, "seek": 37826, "start": 378.26, "end": 382.86, "text": " Yeah, we'll do.", "tokens": [50364, 865, 11, 321, 603, 360, 13, 50594], "temperature": 0.0, "avg_logprob": -0.39317064507063043, "compression_ratio": 1.2321428571428572, "no_speech_prob": 0.012666745111346245}, {"id": 72, "seek": 37826, "start": 382.86, "end": 387.74, "text": " So let's repeat, how can, how can I debug my concurrent program?", "tokens": [50594, 407, 718, 311, 7149, 11, 577, 393, 11, 577, 393, 286, 24083, 452, 37702, 1461, 30, 50838], "temperature": 0.0, "avg_logprob": -0.39317064507063043, "compression_ratio": 1.2321428571428572, "no_speech_prob": 0.012666745111346245}, {"id": 73, "seek": 37826, "start": 387.74, "end": 395.82, "text": " So the gentleman suggested using prints, nice, yes, nice.", "tokens": [50838, 407, 264, 15761, 10945, 1228, 22305, 11, 1481, 11, 2086, 11, 1481, 13, 51242], "temperature": 0.0, "avg_logprob": -0.39317064507063043, "compression_ratio": 1.2321428571428572, "no_speech_prob": 0.012666745111346245}, {"id": 74, "seek": 39582, "start": 395.82, "end": 405.82, "text": " This author of delt by the way, okay, any other ideas?", "tokens": [50364, 639, 3793, 295, 1103, 83, 538, 264, 636, 11, 1392, 11, 604, 661, 3487, 30, 50864], "temperature": 0.0, "avg_logprob": -0.3276382391003595, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.14747968316078186}, {"id": 75, "seek": 39582, "start": 405.82, "end": 410.74, "text": " Okay, yes, yeah, it's a good idea, nice.", "tokens": [50864, 1033, 11, 2086, 11, 1338, 11, 309, 311, 257, 665, 1558, 11, 1481, 13, 51110], "temperature": 0.0, "avg_logprob": -0.3276382391003595, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.14747968316078186}, {"id": 76, "seek": 39582, "start": 410.74, "end": 420.14, "text": " So just to repeat for people who are watching, their ideas was using debugger delt, using", "tokens": [51110, 407, 445, 281, 7149, 337, 561, 567, 366, 1976, 11, 641, 3487, 390, 1228, 24083, 1321, 1103, 83, 11, 1228, 51580], "temperature": 0.0, "avg_logprob": -0.3276382391003595, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.14747968316078186}, {"id": 77, "seek": 39582, "start": 420.14, "end": 425.42, "text": " trace or trace, using tests, et cetera.", "tokens": [51580, 13508, 420, 13508, 11, 1228, 6921, 11, 1030, 11458, 13, 51844], "temperature": 0.0, "avg_logprob": -0.3276382391003595, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.14747968316078186}, {"id": 78, "seek": 42542, "start": 425.42, "end": 430.74, "text": " So my first assumption was, okay, playground, let's play a little bit.", "tokens": [50364, 407, 452, 700, 15302, 390, 11, 1392, 11, 24646, 11, 718, 311, 862, 257, 707, 857, 13, 50630], "temperature": 0.0, "avg_logprob": -0.3206050686719941, "compression_ratio": 1.4465116279069767, "no_speech_prob": 0.012194748036563396}, {"id": 79, "seek": 42542, "start": 430.74, "end": 440.86, "text": " And like a few years ago, when I started writing this talk to be honest, there was like a limit,", "tokens": [50630, 400, 411, 257, 1326, 924, 2057, 11, 562, 286, 1409, 3579, 341, 751, 281, 312, 3245, 11, 456, 390, 411, 257, 4948, 11, 51136], "temperature": 0.0, "avg_logprob": -0.3206050686719941, "compression_ratio": 1.4465116279069767, "no_speech_prob": 0.012194748036563396}, {"id": 80, "seek": 42542, "start": 440.86, "end": 447.58000000000004, "text": " so playground worked only with Go Max Prods 1, so it always reproduced my program.", "tokens": [51136, 370, 24646, 2732, 787, 365, 1037, 7402, 1705, 16063, 502, 11, 370, 309, 1009, 11408, 1232, 452, 1461, 13, 51472], "temperature": 0.0, "avg_logprob": -0.3206050686719941, "compression_ratio": 1.4465116279069767, "no_speech_prob": 0.012194748036563396}, {"id": 81, "seek": 42542, "start": 447.58000000000004, "end": 453.22, "text": " But right now, it's more or less simulate local development.", "tokens": [51472, 583, 558, 586, 11, 309, 311, 544, 420, 1570, 27817, 2654, 3250, 13, 51754], "temperature": 0.0, "avg_logprob": -0.3206050686719941, "compression_ratio": 1.4465116279069767, "no_speech_prob": 0.012194748036563396}, {"id": 82, "seek": 45322, "start": 453.22, "end": 456.18, "text": " Okay, I have more like bright ideas.", "tokens": [50364, 1033, 11, 286, 362, 544, 411, 4730, 3487, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1890116018407485, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.1496557742357254}, {"id": 83, "seek": 45322, "start": 456.18, "end": 463.98, "text": " So maybe we can just color logs, I don't know, visualize goroutines, why not?", "tokens": [50512, 407, 1310, 321, 393, 445, 2017, 20820, 11, 286, 500, 380, 458, 11, 23273, 24012, 346, 1652, 11, 983, 406, 30, 50902], "temperature": 0.0, "avg_logprob": -0.1890116018407485, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.1496557742357254}, {"id": 84, "seek": 45322, "start": 463.98, "end": 470.94000000000005, "text": " So here's a funny package, which just what it does, it's just like print different goroutines", "tokens": [50902, 407, 510, 311, 257, 4074, 7372, 11, 597, 445, 437, 309, 775, 11, 309, 311, 445, 411, 4482, 819, 24012, 346, 1652, 51250], "temperature": 0.0, "avg_logprob": -0.1890116018407485, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.1496557742357254}, {"id": 85, "seek": 45322, "start": 470.94000000000005, "end": 474.1, "text": " with different colors like this.", "tokens": [51250, 365, 819, 4577, 411, 341, 13, 51408], "temperature": 0.0, "avg_logprob": -0.1890116018407485, "compression_ratio": 1.4518072289156627, "no_speech_prob": 0.1496557742357254}, {"id": 86, "seek": 47410, "start": 474.1, "end": 483.74, "text": " So yeah, I mean, if you do something very quick, you can just figure out which goroutine,", "tokens": [50364, 407, 1338, 11, 286, 914, 11, 498, 291, 360, 746, 588, 1702, 11, 291, 393, 445, 2573, 484, 597, 24012, 45075, 11, 50846], "temperature": 0.0, "avg_logprob": -0.22139465599729305, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.01590164564549923}, {"id": 87, "seek": 47410, "start": 483.74, "end": 487.54, "text": " which color, et cetera.", "tokens": [50846, 597, 2017, 11, 1030, 11458, 13, 51036], "temperature": 0.0, "avg_logprob": -0.22139465599729305, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.01590164564549923}, {"id": 88, "seek": 47410, "start": 487.54, "end": 496.34000000000003, "text": " Yeah, return to seriously, there is interesting article, it's quite old, but one of my friends", "tokens": [51036, 865, 11, 2736, 281, 6638, 11, 456, 307, 1880, 7222, 11, 309, 311, 1596, 1331, 11, 457, 472, 295, 452, 1855, 51476], "temperature": 0.0, "avg_logprob": -0.22139465599729305, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.01590164564549923}, {"id": 89, "seek": 49634, "start": 496.34, "end": 504.26, "text": " from Ukraine, he wrote this article also a few years ago, he decided to visualize how", "tokens": [50364, 490, 14081, 11, 415, 4114, 341, 7222, 611, 257, 1326, 924, 2057, 11, 415, 3047, 281, 23273, 577, 50760], "temperature": 0.0, "avg_logprob": -0.23512333234151203, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.11547403782606125}, {"id": 90, "seek": 49634, "start": 504.26, "end": 509.9, "text": " all this scheduling, goroutines works with these fancy pictures, also very good article", "tokens": [50760, 439, 341, 29055, 11, 24012, 346, 1652, 1985, 365, 613, 10247, 5242, 11, 611, 588, 665, 7222, 51042], "temperature": 0.0, "avg_logprob": -0.23512333234151203, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.11547403782606125}, {"id": 91, "seek": 49634, "start": 509.9, "end": 513.8199999999999, "text": " to highly recommend.", "tokens": [51042, 281, 5405, 2748, 13, 51238], "temperature": 0.0, "avg_logprob": -0.23512333234151203, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.11547403782606125}, {"id": 92, "seek": 49634, "start": 513.8199999999999, "end": 522.6999999999999, "text": " Another idea is try to print how Go schedule events.", "tokens": [51238, 3996, 1558, 307, 853, 281, 4482, 577, 1037, 7567, 3931, 13, 51682], "temperature": 0.0, "avg_logprob": -0.23512333234151203, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.11547403782606125}, {"id": 93, "seek": 52270, "start": 522.7, "end": 534.5400000000001, "text": " So there is the environment variable, which can print you some extra information and yeah.", "tokens": [50364, 407, 456, 307, 264, 2823, 7006, 11, 597, 393, 4482, 291, 512, 2857, 1589, 293, 1338, 13, 50956], "temperature": 0.0, "avg_logprob": -0.22132009726304275, "compression_ratio": 1.3525179856115108, "no_speech_prob": 0.04472285881638527}, {"id": 94, "seek": 52270, "start": 534.5400000000001, "end": 542.9000000000001, "text": " And of course, using debuggers, today I will focus a little bit on Delph and a little bit", "tokens": [50956, 400, 295, 1164, 11, 1228, 3001, 3562, 433, 11, 965, 286, 486, 1879, 257, 707, 857, 322, 5831, 950, 293, 257, 707, 857, 51374], "temperature": 0.0, "avg_logprob": -0.22132009726304275, "compression_ratio": 1.3525179856115108, "no_speech_prob": 0.04472285881638527}, {"id": 95, "seek": 52270, "start": 542.9000000000001, "end": 545.1, "text": " on GDB.", "tokens": [51374, 322, 460, 27735, 13, 51484], "temperature": 0.0, "avg_logprob": -0.22132009726304275, "compression_ratio": 1.3525179856115108, "no_speech_prob": 0.04472285881638527}, {"id": 96, "seek": 54510, "start": 545.1, "end": 549.02, "text": " So next question.", "tokens": [50364, 407, 958, 1168, 13, 50560], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 97, "seek": 54510, "start": 549.02, "end": 553.1, "text": " Can I set breakpoint inside goroutine?", "tokens": [50560, 1664, 286, 992, 1821, 6053, 1854, 24012, 45075, 30, 50764], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 98, "seek": 54510, "start": 553.1, "end": 554.1, "text": " Any ideas?", "tokens": [50764, 2639, 3487, 30, 50814], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 99, "seek": 54510, "start": 554.1, "end": 555.1, "text": " Yes?", "tokens": [50814, 1079, 30, 50864], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 100, "seek": 54510, "start": 555.1, "end": 556.1, "text": " No?", "tokens": [50864, 883, 30, 50914], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 101, "seek": 54510, "start": 556.1, "end": 557.1, "text": " Yes?", "tokens": [50914, 1079, 30, 50964], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 102, "seek": 54510, "start": 557.1, "end": 563.38, "text": " So the answer is yes, yeah, typically you can set breakpoint inside goroutine, you can", "tokens": [50964, 407, 264, 1867, 307, 2086, 11, 1338, 11, 5850, 291, 393, 992, 1821, 6053, 1854, 24012, 45075, 11, 291, 393, 51278], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 103, "seek": 54510, "start": 563.38, "end": 570.98, "text": " jump into this goroutine, see what's inside and yeah, it's very handy, especially if you", "tokens": [51278, 3012, 666, 341, 24012, 45075, 11, 536, 437, 311, 1854, 293, 1338, 11, 309, 311, 588, 13239, 11, 2318, 498, 291, 51658], "temperature": 0.0, "avg_logprob": -0.23275057474772134, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.0307554230093956}, {"id": 104, "seek": 57098, "start": 570.98, "end": 579.7, "text": " develop like server and other stuff, okay.", "tokens": [50364, 1499, 411, 7154, 293, 661, 1507, 11, 1392, 13, 50800], "temperature": 0.0, "avg_logprob": -0.2345301310221354, "compression_ratio": 1.4658385093167703, "no_speech_prob": 0.039972856640815735}, {"id": 105, "seek": 57098, "start": 579.7, "end": 581.5, "text": " What about channels?", "tokens": [50800, 708, 466, 9235, 30, 50890], "temperature": 0.0, "avg_logprob": -0.2345301310221354, "compression_ratio": 1.4658385093167703, "no_speech_prob": 0.039972856640815735}, {"id": 106, "seek": 57098, "start": 581.5, "end": 594.02, "text": " So if I decide like send a message to the buffer channel of size four, yeah, it's very", "tokens": [50890, 407, 498, 286, 4536, 411, 2845, 257, 3636, 281, 264, 21762, 2269, 295, 2744, 1451, 11, 1338, 11, 309, 311, 588, 51516], "temperature": 0.0, "avg_logprob": -0.2345301310221354, "compression_ratio": 1.4658385093167703, "no_speech_prob": 0.039972856640815735}, {"id": 107, "seek": 57098, "start": 594.02, "end": 600.86, "text": " nice that you can set breakpoint, you can print channel and Delph has very fancy like", "tokens": [51516, 1481, 300, 291, 393, 992, 1821, 6053, 11, 291, 393, 4482, 2269, 293, 5831, 950, 575, 588, 10247, 411, 51858], "temperature": 0.0, "avg_logprob": -0.2345301310221354, "compression_ratio": 1.4658385093167703, "no_speech_prob": 0.039972856640815735}, {"id": 108, "seek": 60086, "start": 601.26, "end": 607.78, "text": " meta data, which shows you even like current channel state.", "tokens": [50384, 19616, 1412, 11, 597, 3110, 291, 754, 411, 2190, 2269, 1785, 13, 50710], "temperature": 0.0, "avg_logprob": -0.20635525124971985, "compression_ratio": 1.4967741935483871, "no_speech_prob": 0.06375941634178162}, {"id": 109, "seek": 60086, "start": 607.78, "end": 615.78, "text": " So you see I send like one, it's a first item and some data information also useful.", "tokens": [50710, 407, 291, 536, 286, 2845, 411, 472, 11, 309, 311, 257, 700, 3174, 293, 512, 1412, 1589, 611, 4420, 13, 51110], "temperature": 0.0, "avg_logprob": -0.20635525124971985, "compression_ratio": 1.4967741935483871, "no_speech_prob": 0.06375941634178162}, {"id": 110, "seek": 60086, "start": 615.78, "end": 624.86, "text": " Then if I add another one, so like next, you see now I have two elements in channel and", "tokens": [51110, 1396, 498, 286, 909, 1071, 472, 11, 370, 411, 958, 11, 291, 536, 586, 286, 362, 732, 4959, 294, 2269, 293, 51564], "temperature": 0.0, "avg_logprob": -0.20635525124971985, "compression_ratio": 1.4967741935483871, "no_speech_prob": 0.06375941634178162}, {"id": 111, "seek": 62486, "start": 624.86, "end": 633.58, "text": " the small problem, usually like if I want to send message to channel from Delph CLI,", "tokens": [50364, 264, 1359, 1154, 11, 2673, 411, 498, 286, 528, 281, 2845, 3636, 281, 2269, 490, 5831, 950, 12855, 40, 11, 50800], "temperature": 0.0, "avg_logprob": -0.24288850217252164, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.011773776262998581}, {"id": 112, "seek": 62486, "start": 633.58, "end": 640.3000000000001, "text": " unfortunately it's not supported, here's the issue I created, yeah, and there's a comment", "tokens": [50800, 7015, 309, 311, 406, 8104, 11, 510, 311, 264, 2734, 286, 2942, 11, 1338, 11, 293, 456, 311, 257, 2871, 51136], "temperature": 0.0, "avg_logprob": -0.24288850217252164, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.011773776262998581}, {"id": 113, "seek": 62486, "start": 640.3000000000001, "end": 651.62, "text": " that yeah, we can fix it, but yeah, I hope we will fix it some time, yeah, so you can't", "tokens": [51136, 300, 1338, 11, 321, 393, 3191, 309, 11, 457, 1338, 11, 286, 1454, 321, 486, 3191, 309, 512, 565, 11, 1338, 11, 370, 291, 393, 380, 51702], "temperature": 0.0, "avg_logprob": -0.24288850217252164, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.011773776262998581}, {"id": 114, "seek": 65162, "start": 651.62, "end": 661.38, "text": " set, so technically it's possible, but it's not, I mean, so it can be same semantic, you", "tokens": [50364, 992, 11, 370, 12120, 309, 311, 1944, 11, 457, 309, 311, 406, 11, 286, 914, 11, 370, 309, 393, 312, 912, 47982, 11, 291, 50852], "temperature": 0.0, "avg_logprob": -0.22683269794170674, "compression_ratio": 1.3774834437086092, "no_speech_prob": 0.009409491904079914}, {"id": 115, "seek": 65162, "start": 661.38, "end": 668.1, "text": " can set and Delph will handle it.", "tokens": [50852, 393, 992, 293, 5831, 950, 486, 4813, 309, 13, 51188], "temperature": 0.0, "avg_logprob": -0.22683269794170674, "compression_ratio": 1.3774834437086092, "no_speech_prob": 0.009409491904079914}, {"id": 116, "seek": 65162, "start": 668.1, "end": 679.38, "text": " Okay, now let's focus a little bit on how we can debug goroutines, so yeah, if you're", "tokens": [51188, 1033, 11, 586, 718, 311, 1879, 257, 707, 857, 322, 577, 321, 393, 24083, 24012, 346, 1652, 11, 370, 1338, 11, 498, 291, 434, 51752], "temperature": 0.0, "avg_logprob": -0.22683269794170674, "compression_ratio": 1.3774834437086092, "no_speech_prob": 0.009409491904079914}, {"id": 117, "seek": 67938, "start": 679.38, "end": 684.54, "text": " inside a goroutine and you will print a state of goroutine, there's a keyword, goroutine,", "tokens": [50364, 1854, 257, 24012, 45075, 293, 291, 486, 4482, 257, 1785, 295, 24012, 45075, 11, 456, 311, 257, 20428, 11, 24012, 45075, 11, 50622], "temperature": 0.0, "avg_logprob": -0.20330412093907185, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.0045331921428442}, {"id": 118, "seek": 67938, "start": 684.54, "end": 693.98, "text": " it prints current goroutine where you put your breakpoint, but if you have lots of goroutines,", "tokens": [50622, 309, 22305, 2190, 24012, 45075, 689, 291, 829, 428, 1821, 6053, 11, 457, 498, 291, 362, 3195, 295, 24012, 346, 1652, 11, 51094], "temperature": 0.0, "avg_logprob": -0.20330412093907185, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.0045331921428442}, {"id": 119, "seek": 67938, "start": 693.98, "end": 701.66, "text": " there's like interesting feature, I really use a lot, so, but let's step back a little", "tokens": [51094, 456, 311, 411, 1880, 4111, 11, 286, 534, 764, 257, 688, 11, 370, 11, 457, 718, 311, 1823, 646, 257, 707, 51478], "temperature": 0.0, "avg_logprob": -0.20330412093907185, "compression_ratio": 1.7044025157232705, "no_speech_prob": 0.0045331921428442}, {"id": 120, "seek": 70166, "start": 701.66, "end": 710.02, "text": " bit, there's another idea and like implementation, you can use this profile labels, so it's", "tokens": [50364, 857, 11, 456, 311, 1071, 1558, 293, 411, 11420, 11, 291, 393, 764, 341, 7964, 16949, 11, 370, 309, 311, 50782], "temperature": 0.0, "avg_logprob": -0.20560560653458781, "compression_ratio": 1.69375, "no_speech_prob": 0.25070831179618835}, {"id": 121, "seek": 70166, "start": 710.02, "end": 718.3399999999999, "text": " inside pprof model, so you can run pprof do and inside through context run your code and", "tokens": [50782, 1854, 280, 29175, 2316, 11, 370, 291, 393, 1190, 280, 29175, 360, 293, 1854, 807, 4319, 1190, 428, 3089, 293, 51198], "temperature": 0.0, "avg_logprob": -0.20560560653458781, "compression_ratio": 1.69375, "no_speech_prob": 0.25070831179618835}, {"id": 122, "seek": 70166, "start": 718.3399999999999, "end": 725.8199999999999, "text": " it will like mark your goroutine with label and usually you use this labels for profiling,", "tokens": [51198, 309, 486, 411, 1491, 428, 24012, 45075, 365, 7645, 293, 2673, 291, 764, 341, 16949, 337, 1740, 4883, 11, 51572], "temperature": 0.0, "avg_logprob": -0.20560560653458781, "compression_ratio": 1.69375, "no_speech_prob": 0.25070831179618835}, {"id": 123, "seek": 72582, "start": 725.82, "end": 737.62, "text": " so you can open pprof profiles and see like some different metrics, but you can do it", "tokens": [50364, 370, 291, 393, 1269, 280, 29175, 23693, 293, 536, 411, 512, 819, 16367, 11, 457, 291, 393, 360, 309, 50954], "temperature": 0.0, "avg_logprob": -0.12623374660809836, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.025991864502429962}, {"id": 124, "seek": 72582, "start": 737.62, "end": 748.7800000000001, "text": " also with Delph, which is super cool, so you can, if you label your goroutines with labels", "tokens": [50954, 611, 365, 5831, 950, 11, 597, 307, 1687, 1627, 11, 370, 291, 393, 11, 498, 291, 7645, 428, 24012, 346, 1652, 365, 16949, 51512], "temperature": 0.0, "avg_logprob": -0.12623374660809836, "compression_ratio": 1.4193548387096775, "no_speech_prob": 0.025991864502429962}, {"id": 125, "seek": 74878, "start": 748.78, "end": 759.38, "text": " like this or if you use like middleware, you can also do it, I mean, if you use web server,", "tokens": [50364, 411, 341, 420, 498, 291, 764, 411, 2808, 3039, 11, 291, 393, 611, 360, 309, 11, 286, 914, 11, 498, 291, 764, 3670, 7154, 11, 50894], "temperature": 0.0, "avg_logprob": -0.20094978646056294, "compression_ratio": 1.6890243902439024, "no_speech_prob": 0.035965483635663986}, {"id": 126, "seek": 74878, "start": 759.38, "end": 767.62, "text": " you can use this middleware, I post link on next slide and it will automatically like add", "tokens": [50894, 291, 393, 764, 341, 2808, 3039, 11, 286, 2183, 2113, 322, 958, 4137, 293, 309, 486, 6772, 411, 909, 51306], "temperature": 0.0, "avg_logprob": -0.20094978646056294, "compression_ratio": 1.6890243902439024, "no_speech_prob": 0.035965483635663986}, {"id": 127, "seek": 74878, "start": 767.62, "end": 776.42, "text": " labels to all your handlers, which is nice, so you can see like which handler you are currently", "tokens": [51306, 16949, 281, 439, 428, 1011, 11977, 11, 597, 307, 1481, 11, 370, 291, 393, 536, 411, 597, 41967, 291, 366, 4362, 51746], "temperature": 0.0, "avg_logprob": -0.20094978646056294, "compression_ratio": 1.6890243902439024, "no_speech_prob": 0.035965483635663986}, {"id": 128, "seek": 77642, "start": 776.42, "end": 782.42, "text": " because if you print goroutines, you will see like even in Delph, you will see lots of", "tokens": [50364, 570, 498, 291, 4482, 24012, 346, 1652, 11, 291, 486, 536, 411, 754, 294, 5831, 950, 11, 291, 486, 536, 3195, 295, 50664], "temperature": 0.0, "avg_logprob": -0.17984960434284616, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.01188648771494627}, {"id": 129, "seek": 77642, "start": 782.42, "end": 790.78, "text": " unreadable information, but if you just need to focus on login goroutines or like goroutines", "tokens": [50664, 517, 2538, 712, 1589, 11, 457, 498, 291, 445, 643, 281, 1879, 322, 24276, 24012, 346, 1652, 420, 411, 24012, 346, 1652, 51082], "temperature": 0.0, "avg_logprob": -0.17984960434284616, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.01188648771494627}, {"id": 130, "seek": 77642, "start": 790.78, "end": 795.38, "text": " which doing something with your database, you can label it in the same manner as you", "tokens": [51082, 597, 884, 746, 365, 428, 8149, 11, 291, 393, 7645, 309, 294, 264, 912, 9060, 382, 291, 51312], "temperature": 0.0, "avg_logprob": -0.17984960434284616, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.01188648771494627}, {"id": 131, "seek": 77642, "start": 795.38, "end": 801.8199999999999, "text": " do with pprof and then, yeah, also you can do it directly, by the way, this library which", "tokens": [51312, 360, 365, 280, 29175, 293, 550, 11, 1338, 11, 611, 291, 393, 360, 309, 3838, 11, 538, 264, 636, 11, 341, 6405, 597, 51634], "temperature": 0.0, "avg_logprob": -0.17984960434284616, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.01188648771494627}, {"id": 132, "seek": 80182, "start": 801.86, "end": 809.3000000000001, "text": " I mentioned, it's very small one, it's also support like set labels, just a wrapper, so", "tokens": [50366, 286, 2835, 11, 309, 311, 588, 1359, 472, 11, 309, 311, 611, 1406, 411, 992, 16949, 11, 445, 257, 46906, 11, 370, 50738], "temperature": 0.0, "avg_logprob": -0.22200808653960358, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.040741216391325}, {"id": 133, "seek": 80182, "start": 809.3000000000001, "end": 817.94, "text": " very handy one and then, if you run goroutines keyword inside Delph debugger, minus L, it", "tokens": [50738, 588, 13239, 472, 293, 550, 11, 498, 291, 1190, 24012, 346, 1652, 20428, 1854, 5831, 950, 24083, 1321, 11, 3175, 441, 11, 309, 51170], "temperature": 0.0, "avg_logprob": -0.22200808653960358, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.040741216391325}, {"id": 134, "seek": 80182, "start": 817.94, "end": 824.86, "text": " will print goroutines, it's just very simple hello world, which has like this main goroutine", "tokens": [51170, 486, 4482, 24012, 346, 1652, 11, 309, 311, 445, 588, 2199, 7751, 1002, 11, 597, 575, 411, 341, 2135, 24012, 45075, 51516], "temperature": 0.0, "avg_logprob": -0.22200808653960358, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.040741216391325}, {"id": 135, "seek": 82486, "start": 824.86, "end": 838.3000000000001, "text": " and few other goroutines without any labels, et cetera, but then, I created another like", "tokens": [50364, 293, 1326, 661, 24012, 346, 1652, 1553, 604, 16949, 11, 1030, 11458, 11, 457, 550, 11, 286, 2942, 1071, 411, 51036], "temperature": 0.0, "avg_logprob": -0.2364302765239369, "compression_ratio": 1.3951612903225807, "no_speech_prob": 0.02250823937356472}, {"id": 136, "seek": 82486, "start": 838.3000000000001, "end": 850.98, "text": " project inspired by one article and yeah, so here you can print all goroutines which", "tokens": [51036, 1716, 7547, 538, 472, 7222, 293, 1338, 11, 370, 510, 291, 393, 4482, 439, 24012, 346, 1652, 597, 51670], "temperature": 0.0, "avg_logprob": -0.2364302765239369, "compression_ratio": 1.3951612903225807, "no_speech_prob": 0.02250823937356472}, {"id": 137, "seek": 85098, "start": 851.02, "end": 860.1800000000001, "text": " related to your like label page and yeah, also you can go to docs and find different like group", "tokens": [50366, 4077, 281, 428, 411, 7645, 3028, 293, 1338, 11, 611, 291, 393, 352, 281, 45623, 293, 915, 819, 411, 1594, 50824], "temperature": 0.0, "avg_logprob": -0.17158564034994547, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0215947013348341}, {"id": 138, "seek": 85098, "start": 860.1800000000001, "end": 868.74, "text": " by, I don't know, filters, so it's very handy and how you can find your goroutine, then you", "tokens": [50824, 538, 11, 286, 500, 380, 458, 11, 15995, 11, 370, 309, 311, 588, 13239, 293, 577, 291, 393, 915, 428, 24012, 45075, 11, 550, 291, 51252], "temperature": 0.0, "avg_logprob": -0.17158564034994547, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0215947013348341}, {"id": 139, "seek": 85098, "start": 868.74, "end": 875.38, "text": " can switch to this goroutine, if you don't know, also you can print or list source code, you can", "tokens": [51252, 393, 3679, 281, 341, 24012, 45075, 11, 498, 291, 500, 380, 458, 11, 611, 291, 393, 4482, 420, 1329, 4009, 3089, 11, 291, 393, 51584], "temperature": 0.0, "avg_logprob": -0.17158564034994547, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0215947013348341}, {"id": 140, "seek": 87538, "start": 875.38, "end": 886.78, "text": " set new breakpoint, it's very nice and yeah, also you can use this demo project, it's not my,", "tokens": [50364, 992, 777, 1821, 6053, 11, 309, 311, 588, 1481, 293, 1338, 11, 611, 291, 393, 764, 341, 10723, 1716, 11, 309, 311, 406, 452, 11, 50934], "temperature": 0.0, "avg_logprob": -0.2244878915640024, "compression_ratio": 1.6256983240223464, "no_speech_prob": 0.014986456371843815}, {"id": 141, "seek": 87538, "start": 886.78, "end": 896.86, "text": " but it's more written for goland, but if to run it, you just need to this small tweak, you need", "tokens": [50934, 457, 309, 311, 544, 3720, 337, 9988, 474, 11, 457, 498, 281, 1190, 309, 11, 291, 445, 643, 281, 341, 1359, 29879, 11, 291, 643, 51438], "temperature": 0.0, "avg_logprob": -0.2244878915640024, "compression_ratio": 1.6256983240223464, "no_speech_prob": 0.014986456371843815}, {"id": 142, "seek": 87538, "start": 896.86, "end": 903.98, "text": " pass some build flags and tags debugger, otherwise this library will not work and then you can repeat", "tokens": [51438, 1320, 512, 1322, 23265, 293, 18632, 24083, 1321, 11, 5911, 341, 6405, 486, 406, 589, 293, 550, 291, 393, 7149, 51794], "temperature": 0.0, "avg_logprob": -0.2244878915640024, "compression_ratio": 1.6256983240223464, "no_speech_prob": 0.014986456371843815}, {"id": 143, "seek": 90398, "start": 903.98, "end": 911.78, "text": " everything I did, I highly recommend to play with it and when you need it, you will be already like", "tokens": [50364, 1203, 286, 630, 11, 286, 5405, 2748, 281, 862, 365, 309, 293, 562, 291, 643, 309, 11, 291, 486, 312, 1217, 411, 50754], "temperature": 0.0, "avg_logprob": -0.20381670731764573, "compression_ratio": 1.4222222222222223, "no_speech_prob": 0.03961878642439842}, {"id": 144, "seek": 90398, "start": 911.78, "end": 922.86, "text": " with everything you need. Regarding gdb, yeah, I play a little bit with them, it's quite not", "tokens": [50754, 365, 1203, 291, 643, 13, 35523, 290, 67, 65, 11, 1338, 11, 286, 862, 257, 707, 857, 365, 552, 11, 309, 311, 1596, 406, 51308], "temperature": 0.0, "avg_logprob": -0.20381670731764573, "compression_ratio": 1.4222222222222223, "no_speech_prob": 0.03961878642439842}, {"id": 145, "seek": 92286, "start": 922.9, "end": 932.0600000000001, "text": " supported what I need for goland and yeah, it has this like info goroutines keyword,", "tokens": [50366, 8104, 437, 286, 643, 337, 9988, 474, 293, 1338, 11, 309, 575, 341, 411, 13614, 24012, 346, 1652, 20428, 11, 50824], "temperature": 0.0, "avg_logprob": -0.19577934265136718, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.2033580243587494}, {"id": 146, "seek": 92286, "start": 932.0600000000001, "end": 942.62, "text": " as far as I remember, you can't like filter goroutines and it's not readable, so like yeah,", "tokens": [50824, 382, 1400, 382, 286, 1604, 11, 291, 393, 380, 411, 6608, 24012, 346, 1652, 293, 309, 311, 406, 49857, 11, 370, 411, 1338, 11, 51352], "temperature": 0.0, "avg_logprob": -0.19577934265136718, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.2033580243587494}, {"id": 147, "seek": 92286, "start": 942.62, "end": 951.34, "text": " especially this part, yeah and I decided to not waste my time, to be honest, because it's yeah,", "tokens": [51352, 2318, 341, 644, 11, 1338, 293, 286, 3047, 281, 406, 5964, 452, 565, 11, 281, 312, 3245, 11, 570, 309, 311, 1338, 11, 51788], "temperature": 0.0, "avg_logprob": -0.19577934265136718, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.2033580243587494}, {"id": 148, "seek": 95134, "start": 951.34, "end": 964.7800000000001, "text": " you can just use delf and for such problem rather than playing with gdb. Cool, so next,", "tokens": [50364, 291, 393, 445, 764, 1103, 69, 293, 337, 1270, 1154, 2831, 813, 2433, 365, 290, 67, 65, 13, 8561, 11, 370, 958, 11, 51036], "temperature": 0.0, "avg_logprob": -0.24431681165508196, "compression_ratio": 1.4074074074074074, "no_speech_prob": 0.01701798290014267}, {"id": 149, "seek": 95134, "start": 964.7800000000001, "end": 974.94, "text": " not only with debugger, you can find your problems, one important problem in goland world is deadlocks", "tokens": [51036, 406, 787, 365, 24083, 1321, 11, 291, 393, 915, 428, 2740, 11, 472, 1021, 1154, 294, 9988, 474, 1002, 307, 3116, 34896, 51544], "temperature": 0.0, "avg_logprob": -0.24431681165508196, "compression_ratio": 1.4074074074074074, "no_speech_prob": 0.01701798290014267}, {"id": 150, "seek": 97494, "start": 975.9000000000001, "end": 986.1400000000001, "text": " and with deadlocks, usually program gets stuck on the channel send operation, which waiting", "tokens": [50412, 293, 365, 3116, 34896, 11, 2673, 1461, 2170, 5541, 322, 264, 2269, 2845, 6916, 11, 597, 3806, 50924], "temperature": 0.0, "avg_logprob": -0.23182503651764433, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.02563454583287239}, {"id": 151, "seek": 97494, "start": 986.1400000000001, "end": 994.5400000000001, "text": " forever, for example, to read the value and nice that goland support detection of these", "tokens": [50924, 5680, 11, 337, 1365, 11, 281, 1401, 264, 2158, 293, 1481, 300, 9988, 474, 1406, 17784, 295, 613, 51344], "temperature": 0.0, "avg_logprob": -0.23182503651764433, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.02563454583287239}, {"id": 152, "seek": 97494, "start": 994.5400000000001, "end": 1001.46, "text": " situations compared to other languages, for example, Python does not support this deadlock", "tokens": [51344, 6851, 5347, 281, 661, 8650, 11, 337, 1365, 11, 15329, 775, 406, 1406, 341, 3116, 4102, 51690], "temperature": 0.0, "avg_logprob": -0.23182503651764433, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.02563454583287239}, {"id": 153, "seek": 100146, "start": 1001.82, "end": 1015.1800000000001, "text": " detection, which is hard to debug such problems and yeah, if you need like real world examples,", "tokens": [50382, 17784, 11, 597, 307, 1152, 281, 24083, 1270, 2740, 293, 1338, 11, 498, 291, 643, 411, 957, 1002, 5110, 11, 51050], "temperature": 0.0, "avg_logprob": -0.21487333608228107, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.0036572397220879793}, {"id": 154, "seek": 100146, "start": 1015.1800000000001, "end": 1024.8600000000001, "text": " you can see this very interesting library go deadlock, which using this library also found", "tokens": [51050, 291, 393, 536, 341, 588, 1880, 6405, 352, 3116, 4102, 11, 597, 1228, 341, 6405, 611, 1352, 51534], "temperature": 0.0, "avg_logprob": -0.21487333608228107, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.0036572397220879793}, {"id": 155, "seek": 102486, "start": 1024.9399999999998, "end": 1032.34, "text": " lots of deadlocks on cockroach db and there are lots of interesting examples how mutex is", "tokens": [50368, 3195, 295, 3116, 34896, 322, 45927, 608, 274, 65, 293, 456, 366, 3195, 295, 1880, 5110, 577, 24523, 87, 307, 50738], "temperature": 0.0, "avg_logprob": -0.3006232778231303, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.00960530899465084}, {"id": 156, "seek": 102486, "start": 1032.34, "end": 1043.3799999999999, "text": " can be handled properly, how to write it properly and etc, etc, it's like this library is an", "tokens": [50738, 393, 312, 18033, 6108, 11, 577, 281, 2464, 309, 6108, 293, 5183, 11, 5183, 11, 309, 311, 411, 341, 6405, 307, 364, 51290], "temperature": 0.0, "avg_logprob": -0.3006232778231303, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.00960530899465084}, {"id": 157, "seek": 104338, "start": 1043.38, "end": 1056.38, "text": " entire separate like discussion. Returning to our case, yeah, I wrote like, I put to", "tokens": [50364, 2302, 4994, 411, 5017, 13, 11495, 10656, 281, 527, 1389, 11, 1338, 11, 286, 4114, 411, 11, 286, 829, 281, 51014], "temperature": 0.0, "avg_logprob": -0.2487016889784071, "compression_ratio": 1.4365079365079365, "no_speech_prob": 0.01440509408712387}, {"id": 158, "seek": 104338, "start": 1056.38, "end": 1064.14, "text": " slide this very simple example, so yeah, sometimes you have this conflict in access and you have", "tokens": [51014, 4137, 341, 588, 2199, 1365, 11, 370, 1338, 11, 2171, 291, 362, 341, 6596, 294, 2105, 293, 291, 362, 51402], "temperature": 0.0, "avg_logprob": -0.2487016889784071, "compression_ratio": 1.4365079365079365, "no_speech_prob": 0.01440509408712387}, {"id": 159, "seek": 106414, "start": 1064.14, "end": 1074.66, "text": " this data races and I saw it few times in some open source projects, but usually people do not", "tokens": [50364, 341, 1412, 15484, 293, 286, 1866, 309, 1326, 1413, 294, 512, 1269, 4009, 4455, 11, 457, 2673, 561, 360, 406, 50890], "temperature": 0.0, "avg_logprob": -0.2259818746688518, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.05555690824985504}, {"id": 160, "seek": 106414, "start": 1074.66, "end": 1083.3000000000002, "text": " do it, so I highly recommend run your CI pipeline with this dash race, especially tests, it helps", "tokens": [50890, 360, 309, 11, 370, 286, 5405, 2748, 1190, 428, 37777, 15517, 365, 341, 8240, 4569, 11, 2318, 6921, 11, 309, 3665, 51322], "temperature": 0.0, "avg_logprob": -0.2259818746688518, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.05555690824985504}, {"id": 161, "seek": 108330, "start": 1083.3, "end": 1094.06, "text": " you like always run with this flag and it will print you if there is data races or not, this", "tokens": [50364, 291, 411, 1009, 1190, 365, 341, 7166, 293, 309, 486, 4482, 291, 498, 456, 307, 1412, 15484, 420, 406, 11, 341, 50902], "temperature": 0.0, "avg_logprob": -0.21796620145757148, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.02032102458178997}, {"id": 162, "seek": 108330, "start": 1094.06, "end": 1104.78, "text": " dash race not always can find all data races, some common yes, but sometimes no, but highly", "tokens": [50902, 8240, 4569, 406, 1009, 393, 915, 439, 1412, 15484, 11, 512, 2689, 2086, 11, 457, 2171, 572, 11, 457, 5405, 51438], "temperature": 0.0, "avg_logprob": -0.21796620145757148, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.02032102458178997}, {"id": 163, "seek": 110478, "start": 1104.78, "end": 1119.34, "text": " recommend to add it to your project, so never skip, so now I have like seven, I have a seven rules", "tokens": [50364, 2748, 281, 909, 309, 281, 428, 1716, 11, 370, 1128, 10023, 11, 370, 586, 286, 362, 411, 3407, 11, 286, 362, 257, 3407, 4474, 51092], "temperature": 0.0, "avg_logprob": -0.2204442574427678, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.11760874837636948}, {"id": 164, "seek": 110478, "start": 1119.34, "end": 1128.5, "text": " for you, so how to unblock yourself when you get stuck on something and you don't know how to", "tokens": [51092, 337, 291, 11, 370, 577, 281, 517, 28830, 1803, 562, 291, 483, 5541, 322, 746, 293, 291, 500, 380, 458, 577, 281, 51550], "temperature": 0.0, "avg_logprob": -0.2204442574427678, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.11760874837636948}, {"id": 165, "seek": 112850, "start": 1128.5, "end": 1136.94, "text": " debug it, so first never assume a particular order of execution, so when you write in concurrent", "tokens": [50364, 24083, 309, 11, 370, 700, 1128, 6552, 257, 1729, 1668, 295, 15058, 11, 370, 562, 291, 2464, 294, 37702, 50786], "temperature": 0.0, "avg_logprob": -0.19039568446931385, "compression_ratio": 1.465648854961832, "no_speech_prob": 0.026565024629235268}, {"id": 166, "seek": 112850, "start": 1136.94, "end": 1148.74, "text": " programs try to always think about not running it in particular order, especially it works with", "tokens": [50786, 4268, 853, 281, 1009, 519, 466, 406, 2614, 309, 294, 1729, 1668, 11, 2318, 309, 1985, 365, 51376], "temperature": 0.0, "avg_logprob": -0.19039568446931385, "compression_ratio": 1.465648854961832, "no_speech_prob": 0.026565024629235268}, {"id": 167, "seek": 114874, "start": 1148.74, "end": 1160.74, "text": " some benchmarks and tests, so try to not put this like, I also saw it lots of times when people,", "tokens": [50364, 512, 43751, 293, 6921, 11, 370, 853, 281, 406, 829, 341, 411, 11, 286, 611, 1866, 309, 3195, 295, 1413, 562, 561, 11, 50964], "temperature": 0.0, "avg_logprob": -0.24118762749892014, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.04150024801492691}, {"id": 168, "seek": 114874, "start": 1160.74, "end": 1168.78, "text": " when run tests, when you run go test by default, if you know they run it in parallel, but usually", "tokens": [50964, 562, 1190, 6921, 11, 562, 291, 1190, 352, 1500, 538, 7576, 11, 498, 291, 458, 436, 1190, 309, 294, 8952, 11, 457, 2673, 51366], "temperature": 0.0, "avg_logprob": -0.24118762749892014, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.04150024801492691}, {"id": 169, "seek": 116878, "start": 1168.82, "end": 1182.26, "text": " people say like, no run it like sequentially and that's not a good idea, another advice, it's more", "tokens": [50366, 561, 584, 411, 11, 572, 1190, 309, 411, 5123, 3137, 293, 300, 311, 406, 257, 665, 1558, 11, 1071, 5192, 11, 309, 311, 544, 51038], "temperature": 0.0, "avg_logprob": -0.21808535522884792, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.02906152419745922}, {"id": 170, "seek": 116878, "start": 1182.26, "end": 1188.74, "text": " about designing than writing code, try to implement your any concurrency logic at highest level as", "tokens": [51038, 466, 14685, 813, 3579, 3089, 11, 853, 281, 4445, 428, 604, 23702, 10457, 9952, 412, 6343, 1496, 382, 51362], "temperature": 0.0, "avg_logprob": -0.21808535522884792, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.02906152419745922}, {"id": 171, "seek": 116878, "start": 1188.74, "end": 1198.58, "text": " possible, try to not pass lots of channels, lots of like go routines etc, try to like keep logic", "tokens": [51362, 1944, 11, 853, 281, 406, 1320, 3195, 295, 9235, 11, 3195, 295, 411, 352, 33827, 5183, 11, 853, 281, 411, 1066, 9952, 51854], "temperature": 0.0, "avg_logprob": -0.21808535522884792, "compression_ratio": 1.6065573770491803, "no_speech_prob": 0.02906152419745922}, {"id": 172, "seek": 119858, "start": 1198.58, "end": 1211.1799999999998, "text": " separately and this concurrency separately, yeah, don't forget as I said, go race not always helps", "tokens": [50364, 14759, 293, 341, 23702, 10457, 14759, 11, 1338, 11, 500, 380, 2870, 382, 286, 848, 11, 352, 4569, 406, 1009, 3665, 50994], "temperature": 0.0, "avg_logprob": -0.26377447446187335, "compression_ratio": 1.416058394160584, "no_speech_prob": 0.002406934043392539}, {"id": 173, "seek": 119858, "start": 1211.1799999999998, "end": 1220.78, "text": " because it's not detects when program like whole freeze, it's only when a subset of go routines", "tokens": [50994, 570, 309, 311, 406, 5531, 82, 562, 1461, 411, 1379, 15959, 11, 309, 311, 787, 562, 257, 25993, 295, 352, 33827, 51474], "temperature": 0.0, "avg_logprob": -0.26377447446187335, "compression_ratio": 1.416058394160584, "no_speech_prob": 0.002406934043392539}, {"id": 174, "seek": 122078, "start": 1220.78, "end": 1229.74, "text": " get stuck, as gentlemen suggested, you can use as trace and different tools for tracing which can", "tokens": [50364, 483, 5541, 11, 382, 11669, 10945, 11, 291, 393, 764, 382, 13508, 293, 819, 3873, 337, 25262, 597, 393, 50812], "temperature": 0.0, "avg_logprob": -0.22264562712775338, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.018602868542075157}, {"id": 175, "seek": 122078, "start": 1229.74, "end": 1237.98, "text": " help you to see like, are we waiting for some resource like reading file, access net, it's more", "tokens": [50812, 854, 291, 281, 536, 411, 11, 366, 321, 3806, 337, 512, 7684, 411, 3760, 3991, 11, 2105, 2533, 11, 309, 311, 544, 51224], "temperature": 0.0, "avg_logprob": -0.22264562712775338, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.018602868542075157}, {"id": 176, "seek": 122078, "start": 1237.98, "end": 1246.7, "text": " low level but it's very useful, yeah, I show it on another talk but you probably know about it,", "tokens": [51224, 2295, 1496, 457, 309, 311, 588, 4420, 11, 1338, 11, 286, 855, 309, 322, 1071, 751, 457, 291, 1391, 458, 466, 309, 11, 51660], "temperature": 0.0, "avg_logprob": -0.22264562712775338, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.018602868542075157}, {"id": 177, "seek": 124670, "start": 1246.7, "end": 1255.3, "text": " you can use conditional breakpoints which helps you to cover cases especially when it's concurrent", "tokens": [50364, 291, 393, 764, 27708, 1821, 20552, 597, 3665, 291, 281, 2060, 3331, 2318, 562, 309, 311, 37702, 50794], "temperature": 0.0, "avg_logprob": -0.280345360438029, "compression_ratio": 1.574585635359116, "no_speech_prob": 0.012023698538541794}, {"id": 178, "seek": 124670, "start": 1255.3, "end": 1265.66, "text": " program so you can catch only your case, not like click next on every go team, as I said,", "tokens": [50794, 1461, 370, 291, 393, 3745, 787, 428, 1389, 11, 406, 411, 2052, 958, 322, 633, 352, 1469, 11, 382, 286, 848, 11, 51312], "temperature": 0.0, "avg_logprob": -0.280345360438029, "compression_ratio": 1.574585635359116, "no_speech_prob": 0.012023698538541794}, {"id": 179, "seek": 124670, "start": 1265.66, "end": 1274.06, "text": " you can use shadow in tracer, you can use go deadlock and yeah, last but not least use debugger,", "tokens": [51312, 291, 393, 764, 8576, 294, 504, 12858, 11, 291, 393, 764, 352, 3116, 4102, 293, 1338, 11, 1036, 457, 406, 1935, 764, 24083, 1321, 11, 51732], "temperature": 0.0, "avg_logprob": -0.280345360438029, "compression_ratio": 1.574585635359116, "no_speech_prob": 0.012023698538541794}, {"id": 180, "seek": 127406, "start": 1274.06, "end": 1281.02, "text": " don't forget about it, it's also very handy and like every release, every version I see how", "tokens": [50364, 500, 380, 2870, 466, 309, 11, 309, 311, 611, 588, 13239, 293, 411, 633, 4374, 11, 633, 3037, 286, 536, 577, 50712], "temperature": 0.0, "avg_logprob": -0.19482134390568387, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.027954215183854103}, {"id": 181, "seek": 127406, "start": 1281.02, "end": 1295.3799999999999, "text": " debuggers are adding new stuff which is nice, cool, so I have like few references because to", "tokens": [50712, 3001, 3562, 433, 366, 5127, 777, 1507, 597, 307, 1481, 11, 1627, 11, 370, 286, 362, 411, 1326, 15400, 570, 281, 51430], "temperature": 0.0, "avg_logprob": -0.19482134390568387, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.027954215183854103}, {"id": 182, "seek": 127406, "start": 1295.3799999999999, "end": 1302.86, "text": " cover everything is hard in 25 minutes, I will post slides so you can accurately read everything,", "tokens": [51430, 2060, 1203, 307, 1152, 294, 3552, 2077, 11, 286, 486, 2183, 9788, 370, 291, 393, 20095, 1401, 1203, 11, 51804], "temperature": 0.0, "avg_logprob": -0.19482134390568387, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.027954215183854103}, {"id": 183, "seek": 130286, "start": 1303.6599999999999, "end": 1323.58, "text": " maybe to like picture it and thank you, thank you, are there any questions? Yeah,", "tokens": [50404, 1310, 281, 411, 3036, 309, 293, 1309, 291, 11, 1309, 291, 11, 366, 456, 604, 1651, 30, 865, 11, 51400], "temperature": 0.0, "avg_logprob": -0.33158555943915186, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.04008551687002182}, {"id": 184, "seek": 130286, "start": 1323.58, "end": 1329.6599999999999, "text": " before you're thinking, if you want to donate to Ukraine, just let me know, few my friends right", "tokens": [51400, 949, 291, 434, 1953, 11, 498, 291, 528, 281, 17751, 281, 14081, 11, 445, 718, 385, 458, 11, 1326, 452, 1855, 558, 51704], "temperature": 0.0, "avg_logprob": -0.33158555943915186, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.04008551687002182}, {"id": 185, "seek": 132966, "start": 1329.66, "end": 1351.26, "text": " now are fighting so we can help directly, if you're afraid. Thank you. Oh, I have a question. Have", "tokens": [50364, 586, 366, 5237, 370, 321, 393, 854, 3838, 11, 498, 291, 434, 4638, 13, 1044, 291, 13, 876, 11, 286, 362, 257, 1168, 13, 3560, 51444], "temperature": 0.0, "avg_logprob": -0.29390923793499285, "compression_ratio": 1.3310344827586207, "no_speech_prob": 0.024407509714365005}, {"id": 186, "seek": 132966, "start": 1351.26, "end": 1357.5400000000002, "text": " you tried using tools such as RR or Hermit which try to execute the program in a deterministic", "tokens": [51444, 291, 3031, 1228, 3873, 1270, 382, 497, 49, 420, 21842, 270, 597, 853, 281, 14483, 264, 1461, 294, 257, 15957, 3142, 51758], "temperature": 0.0, "avg_logprob": -0.29390923793499285, "compression_ratio": 1.3310344827586207, "no_speech_prob": 0.024407509714365005}, {"id": 187, "seek": 135754, "start": 1357.58, "end": 1362.5, "text": " fashion? You mean backwards? Yes, they can do a recording for their execution and then", "tokens": [50366, 6700, 30, 509, 914, 12204, 30, 1079, 11, 436, 393, 360, 257, 6613, 337, 641, 15058, 293, 550, 50612], "temperature": 0.0, "avg_logprob": -0.24426023887865472, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.18915148079395294}, {"id": 188, "seek": 135754, "start": 1362.5, "end": 1368.62, "text": " replace but the point is that the recording is deterministic. Yeah, I use it for sequential", "tokens": [50612, 7406, 457, 264, 935, 307, 300, 264, 6613, 307, 15957, 3142, 13, 865, 11, 286, 764, 309, 337, 42881, 50918], "temperature": 0.0, "avg_logprob": -0.24426023887865472, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.18915148079395294}, {"id": 189, "seek": 135754, "start": 1368.62, "end": 1375.62, "text": " debugging, never for concurrent debugging, I mean, maybe it's possible but in my case it's,", "tokens": [50918, 45592, 11, 1128, 337, 37702, 45592, 11, 286, 914, 11, 1310, 309, 311, 1944, 457, 294, 452, 1389, 309, 311, 11, 51268], "temperature": 0.0, "avg_logprob": -0.24426023887865472, "compression_ratio": 1.5340909090909092, "no_speech_prob": 0.18915148079395294}, {"id": 190, "seek": 137562, "start": 1376.4199999999998, "end": 1381.7399999999998, "text": " I covered what I just showed, of course there are other cases, I will try.", "tokens": [50404, 286, 5343, 437, 286, 445, 4712, 11, 295, 1164, 456, 366, 661, 3331, 11, 286, 486, 853, 13, 50670], "temperature": 0.0, "avg_logprob": -0.2808077412266885, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.18284045159816742}, {"id": 191, "seek": 137562, "start": 1381.7399999999998, "end": 1391.6999999999998, "text": " If you are leaving the room trying to stay quiet for a second, do not talk,", "tokens": [50670, 759, 291, 366, 5012, 264, 1808, 1382, 281, 1754, 5677, 337, 257, 1150, 11, 360, 406, 751, 11, 51168], "temperature": 0.0, "avg_logprob": -0.2808077412266885, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.18284045159816742}, {"id": 192, "seek": 137562, "start": 1391.6999999999998, "end": 1403.02, "text": " chairs are okay, so we can still hear any questions. Well, no more questions,", "tokens": [51168, 18299, 366, 1392, 11, 370, 321, 393, 920, 1568, 604, 1651, 13, 1042, 11, 572, 544, 1651, 11, 51734], "temperature": 0.0, "avg_logprob": -0.2808077412266885, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.18284045159816742}, {"id": 193, "seek": 140302, "start": 1403.02, "end": 1406.02, "text": " that means your talk was very clear. Thank you and a lot of applause.", "tokens": [50368, 300, 1355, 428, 751, 390, 588, 1850, 13, 1044, 291, 293, 257, 688, 295, 9969, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2385944316261693, "compression_ratio": 1.0, "no_speech_prob": 0.2590928375720978}], "language": "en"}