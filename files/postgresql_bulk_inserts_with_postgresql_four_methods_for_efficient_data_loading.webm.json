{"text": " Next speaker is Ryan. He's going to talk about bulk loading data to Postgres. Hello. All right. Can you hear me? There we go. All right. Thank you so much for coming. It is a pleasure to see you all. This is my first time in Belgium and in Brussels. It's been a great couple of days. Specifically FOSM, it was really interesting coming into the event. My very first tech event many, many years ago, I hope I look younger than I am, was at a small university very much set up like this. And it just brought back a lot of memories of having packed rooms and the stadium seating and the wooden table. So it's been really fun to be here and appreciate the opportunity. This is a little bit briefly about me. I currently work at a company called Redgate. I've been there a few months. You might know them by a tool they have acquired over the last few years called Flyway. It is a database migration tool. And they've been very well known within the SQL server space in Microsoft.net for many, many years. And they're bringing some of that technology into the open space, open source database platforms as well for migrations and a way to generate scripts and things of that nature. There's some of my details, blog and so forth. Very quickly about me, I thought this was relevant. So my wife and I have six children. So I know a little bit about bulk loading things like vans and cars. And so I felt that was somewhat relevant. If you ever run into me again or you want to talk to me yet today and get me talking about something other than Postgres and databases, family for sure because I have a lot of it. Music, I am an amateur beekeeper. I've been doing that for about five or six years now and I love it. I actually do live streams sometimes on YouTube when I'm checking out the hives. And I roast male and coffee. I didn't drink coffee until about seven years ago and now I can't go without it and I love it. So if you want to talk about any of those, I'll chew your ear off for a couple of hours. You can get this presentation. I actually uploaded it before this talk. It might be a first for me in a long time. So the newest version is up there of these slides and the scripts that you're going to see in a minute. And I'll put this up at the end again in case you miss it. Four sections. Number one, death by a thousand inserts. Then we're going to actually talk about four plus methods of bulk loading. I say plus because there's definitely more than four and lots of little nuances. And as I've given this talk, some people have asked questions and so I've tweaked some things and so I just didn't feel like continuing to change that number. I'm going to give you a couple quick demos and then we'll talk, that is not the fourth point. Well, I did everything else but change at one point. I went over this many times. Just a couple parting thoughts. Death by a thousand inserts. What do I mean? So what I used to find, so I worked at timescale. I didn't put my history up here, but I worked at timescale for a couple of years. Partially open source extension into Postgres for time series data. And we would see a lot of folks complaining, frustrated about the rate of insert of their data. And so we would try to help them and recognize that this is something we're all doing all the time, all day long. And yet we often are underperforming, not getting the results that we'd want. It could be any kind of data. It might be binary data in some way. It might be large objects. It might be JSON that you're parsing and you're doing something with. It could just be a simple CSV file with some of your data science work that you're doing. But you need to get a lot of it and you need to get a lot of it into Postgres. And what we would find is we would see work like this often because it just makes sense. We're so used to typing, insert into a table and some columns and insert some data. And we would see stuff like this and I have to admit that I've certainly done this many times myself, particularly when you're rushing to figure out how to get something done, get something in, how to parse that data packet you just got. And you don't realize what you just did. It created a loop of thousands and millions of individual insert statements. And that's really, really slow, right? And it's slow for a couple of reasons. These are just a few to kind of put out there. But the reality is it's so easy to forget when we're using our tooling that every one of those insert statements has some kind of overhead, some of which is listed. Now, there's certainly other factors here. But this is the one part that most developers, particularly newer developers, forget about. That insert statement doesn't just start here. It has to go across the wire. The data reserver has to do something. Depending on your commit settings, you might have to get a response back. Then your program has to do something else. There's a latency. There's indexes and constraints. And we forget about all those pieces. And now you say, I want to insert a million rows a second, and you wonder why it's not working when you're doing it with individual statements. The analogy to me is I almost put my children's faces on here. To say, like, if I wanted to shutter my children somewhere, for those of you coming in don't know, I have a lot of kids. If I shuttered them one at a time with a bicycle, it would just take a long time, right? If we do that data packet one at a time, insert after insert after insert, it just ends up being slow. Now, if we could take more of those things, maybe we take something like, you know, the analogy, get this pickup truck. And we can at least get a few more packets in there. We have to take fewer trips, and we get the same amount of data. The ultimate goal is we want to try and figure out that ability. What's the largest payload? What's the largest amount of data we can pull across the wire at one time so that the database server just has to do its work one time per bulk set of statements? All right? And so the goal, and a lot of things we're going to talk about today, are how can we take the data, the massive amounts of data, these files, the streams we're taking, and get them into Postgres as quickly as possible? All right? We're going to tend towards larger payloads, things on your right, and not the things on your left. All right? Now, we aren't going to be able to talk about today, but then there are also things like, because I actually was trying to get a demo as I was sitting in the hotel the other night. It's like, maybe I can do this. It was a little bit too complicated and based on where we're going to be, I won't be able to do it today. But I will tell you about at least one or two tools. If you could take multiple connections and somehow split your data up, you'll find that you also get even more. So larger payloads, again, depending on your server, your configuration, your abilities, there's going to be a sweet spot. But if you're willing to do the work, you can find it, whether it's two, whether it's four. There are ways that we used to do testing at least with timescale. We've done it with Postgres native partition as well, and many threads taking large payloads up to a certain size, depending on your configuration, can really improve your ingest performance. So things to consider. So let's look at these four methods, and then I'll do my best to demo each of them. The first, and believe it or not, sometimes often forgot about, is a simple multi-valued insert. So what does a multi-valued insert look like? This is what it looks like in something like just plain SQL. And again, for folks that are coming from, we heard talk earlier about Go and using ORMs, don't know SQL well, it's easy to forget that you can do this. You simply say insert into table, you have your parentheses with your values of data, you can just say comma and add another set of parentheses, and you can do that for a long time, and you will get a better performance. I'll show you some of that. Now on code, the reason I bring this one up is for a lot of people, and I'm using Python, it doesn't really matter what the language is, a lot of people do that individual insert statement, and honestly, if you don't have time right now, you want to improve your performance, but you don't have a lot of time, you can simply just put a little loop in there that says, hey, just append to this string for so many iterations, and then send the query. And you'll be surprised how quickly that improves your performance. So a really small change can make a big difference. Multi-valued inserts requires a little bit of extra programming work depending on what you're doing. And we'll talk briefly about ORMs at the end, how many of them, or at least some of them, can help you do some things like this. Multi-valued inserts is part of SQL standard. It's supported regardless. If you can create a string, and you can append these things together, you can send it to the server, and the server will handle it correctly. It's usually at least moderately faster. I'll show you an example in a minute. And it just really requires that you have some kind of batching in your application. So you go back to this Python example. I just had to put something that says, hey, once you reach some limit, go ahead and send the statement, and then let's start over again. So it's not that hard to do. It's pretty quick to iterate in your application now to get a lot better performance. The second one is a little bit interesting, and it's really unique to Postgres. And I bring this up for one specific reason. It's called using arrays to do your inserts. Now, if you are new to Postgres, and you're not really, you don't know this, Postgres is maybe the only, it's one of the few, at least that I know of, that supports an actual array as a data type. And so you can actually put together a bundle of values as an array, or multiple values as an array. Sorry, I had a box to highlight it. And that then is treated as one value element, which can then be what we call a nest, split back apart and put into the database. Now, the reason I bring this up is, at timescale, we had an application that, using an older version of Go, was doing a lot of inserts. And we ran into the problem of, and I'll talk about this in just a second, in Postgres currently, when a SQL statement is parameterized, so we'll say something like insert into table, and then it puts an internal parameter, which is a question mark. And you can only do 65,000 of those question marks. And so if you're trying to insert lots of data, you have to make sure that you don't have more than 65,000 some odd parameters. And so when we wanted to, tracking that can be difficult, and we realized that we could bundle up all of these values into just arrays, and we're technically only sending, in this case, I'm only sending three values, even if there are 10,000 elements in each array. And so that was a way to overcome that, and that's one of the reasons I bring this forward. Now, in some cases, it can actually be faster than something like a multi-valued insert. Now, again, it depends on the tooling. It turns out that even in Python, just got a new version of PsychoPG, and this one is not as fast as it was before, and I'm not sure why I haven't had a chance to look at it. This is what it might look like in Python. Again, we'll show you that in just a minute. Probably the biggest reason to consider using something like this, depending on your ORM. Now, again, we specifically ran into this because of an older version of a Go library that we were using, and we were hitting that connection limit, and then we found that this actually, in some cases, performed better. And so you basically take your elements, you put it into a list, again, in Python, depending what your language is, your support might be slightly different, and then you can put that into your statement, and you're essentially sending the string again, depending on what the ORM does, or the driver, how it sends it is independent. But once it gets to the server, PostgreSQL simply unests that and goes to Tenom. It can be faster in some instances. I'll show you in a second. It avoids the parameter limit, as I said. The one interesting thing here is that it doesn't, in this case, doesn't specifically handle custom types. So if you have a custom type, that might not work for you. The third is something that hopefully everyone here knows about. It's called copy. Now, copy is one of the oldest kind of long-standing commands out of Postgres. It actually existed prior to Postgres in its prior form before what we know is Postgres today. It is the preferred and optimized tool, and it's used in any... It can often use a lot of forks of Postgres. I know, for instance, I used to use Redshift, and so Redshift, that's one of the primary methods for getting data into Redshift, is to use copy. It can read from files or to the standard input. And then the one thing you recognize here is if you are used to Postgres, and you use PCQL, which you'll see me use in just a little bit, this is not the same thing as the slash copy command. So essentially, what PCQL slash copy is doing is taking a file that's... And this is the difference. When you say SQL copy, and I think I said it here, it's not part of the SQL standard, so it is only Postgres. When you say copy, it's looking on the local server wherever that is. So if you're using Docker, the file has to be on your Docker image. If you're using... And so that means you can't use your local one. That's what the PCQL copy command is for. It will allow you to use your local file, and it does a stream into the standard in on the server, and then uses copy there. So they are hand-in-hand, but they're not exactly the same thing. It does have a couple limitations, however. So it's designed to be very fast, and it's been doing this for a long time, and it basically, the way it opens up a stream and to record the records, very, very efficient. It is, however, only single-threaded in a single transaction. You can't say start multiple transactions for it, multiple threads, and do inserts in parallel. It doesn't work that way. Until Postgres 14, there is no way to see the progress. So if you had a 10-billion-line file that you were doing copy on, it's had to wait and see if it's going to finish. And how do I know? Because you can't see it, right? Because it's not committed yet. So how do you know the progress? And so in Postgres 14 and above, we do now have a view. Again, I'll show you that as part of the demo. Very helpful. We do have large files to know about that. Minimal format configuration? No, there's some. I mean, again, copy is a great tool, but it was designed a long time ago and has a very specific set of use cases. There are some new tooling that are kind of using copy above putting a superset of tooling above it so that copy can be more efficient. And there is no failure tolerance. This is one thing that I actually didn't know until recently. When you insert data with copy, if it fails, so let's say you have a format error. If you've used copy, you've surely run into this where you forget that you have a header line or you forget there's something part way down the file and the format's just wrong, and it has actually copied maybe, you know, millions of lines and then errors. Transaction's done, it stops, but under the covers, those records, they're bypassing a little bit of the typical work of Postgres. They actually are taking space in your table until the next vacuum. They're a part of the transaction that is essentially partially complete. It actually states it's in the documentation. I think a lot of folks don't actually see that. And so if you're doing a lot of really large file processing, this is important to know about. If it fails, you really need to run a vacuum after the fact to make sure that those things are happening more regularly in those instances. Again, the point is, it is intended to do one job, two jobs, really, really well. Import data quickly and export data easily. So you can use copy as well to get data out into like a CSV format or something of that nature, and it does it really well. There are two tools that you can use to thine know of, and I'm sure there are more, but I've used both of these tools. So one is PGloader.io. If you have never used it or don't know about it and you're doing lots of work, it uses copy under the covers. And it's been written and written by Dmitri Fontaine, well-known in the Postgres community. It's a CLI application, and basically he designed it in a way that it will take your format and then people have contributed to this so it can actually even just do conversions. So you might have a file, you might have a CSV file, or you might have a database that is a different database, like SQL Server or Redshift or MySQL. People have contributed converters so that you can basically say, there's my database, it will pipe through the database, get the schema, create the schema, and then use copy as the background tooling to make the work much more efficient. So it's a really interesting and neat tool, and then it does other stuff which is really great. It does error checking. You can actually put rule sets in for error checking. It can cast data for you. This kind of value in MySQL does not exist in this way over here in Postgres. Here's how we like it to be cast. So it's a really neat tool. If you've never heard of it, please go check it out, and there's a lot more that it can do, continuous migrations, things like that. The other one is Timescale Parallel Copy. Now, again, I mentioned this because I used to work at timescales and time series database. We're used to people having millions and millions and hundreds and millions and billions of rows in a file that they're trying to insert and ingest. And time series data is really interesting because it's typically in rough time order. And so when you're doing things like partitioning, you could have multiple threads essentially inserting into multiple tables under the covers behind the scenes. Again, copy itself is not multi-threaded, but this is another tool. It's a Go program that can take time series data, splits it up into batches for you, and then will start up multiple threads to do those copies in parallel. This can just be really useful on a high latency system. So, again, when I actually first started at Timescale, I was running, at first day, I was running their demo, and it had 10 million rows. I live in the country. I don't have the best internet connection in the world. And after 20 minutes, I said, are we sure this thing is working correctly? It just turns out using just a plain copy over a very latent connection to a data center on the other side of the country was not terribly efficient. Using parallel copy, it was done in a minute, right? So, a lot of ways to go about it. And then the last thing to consider if you're doing a lot of data insert is unlogged tables. Now, again, in Postgres, a lot of people that I've run into, myself included, forget about this often. But if you need to insert a lot of data and you can deal with some of the ramifications, it's a great option for just giving you that one other little edge. Unlogged tables simply mean that your work is not logged to what we call the right-ahead log. Now, that means it's not fail-safe, right? So, if there's a crash, that data is gone. You can't recover it. But this is really good for things like ETL jobs, right? So, if you're getting lots and lots of data that you have to process maybe every night or every hour or whatever, you might find that you can get 20%, 30% improvement in your ingest speed by using an unlogged table, maybe even more, depending on what it is. And if it fails, it's fine. You still have to file. Try again, right? So, that's a really useful tool to know about. You can take any table, turn it to unlogged. Obviously, you want to put it back to log when you're done, unless it's just a throwaway table of some sort. So, I use it again. It's really great for ETL processes. It's really good for intermittent but repeatable work, right? So, again, any kind of those bash jobs you're handling, maybe you're rerunning a data processing simulation over and over again. It's a great way to do it because who cares if it's not in the log. And it also means your wall is not increasing for this stuff that you're just iterating over and over again, which that can be helpful. I did forget to specifically say back here, obviously, this is not accessible. This data will not be accessible on any replication servers. It's not in the log. It's the way that Postgres does replications with the wall. And so, if it isn't in there, it won't replicate. Again, that might actually be really beneficial for that kind of transactional data that you're doing. All right. I'll pause there to quickly first see if you have any questions and then I'm going to flip over to demos. Any questions? Yes, one in the back. And I can shout it out. Can you turn on the log with just one question? That's a great question that I'm going to say probably yes because it's just a table technically under the covers. And I'm getting a nod from down here, too. So good. Good question. Oh, yes. I apologize. I meant to repeat the question. I didn't. The question was, can you set a partition to unlock one table in the partition? And so the answer there would be yes, because again, the way that we do partitioning is there. Technically, there are no tables. We're going to talk about that in a minute. One thing I want to say, that slowness in PsychoPG3 was fixed in December. So now, possibly, it should be as fast as PsychoPG2. And I want to ask you if you also have tested the new copy support in PsychoPG3, where there is direct copy from Python objects to the copy protocol. So it's a great question. I'm going to show you a little bit of Python. And so at the end, I actually was going to talk about that. I've been starting to play with PsychoPG3. The demo, I actually converted to three. And there's one or two things that it can't do, that two could. I wanted to demo that. But yeah, I will talk briefly about a couple of those situations. Okay. I peed to have a chat about that because I wrote it. You look familiar, so I was assuming that was the case. Thank you. All right, so let me just show you what we're going to do. I have a couple of different tables, two different demos. So I'm going to first show you all of this in SQL. This is not necessarily how you would do it day to day. You're probably not in most of your SQL jobs concatenating strings and then using that to insert into another table. This is all being contained within one database. It's truly just for demo purposes to try and show you one or two examples of how some of this can help and work. I'm not going to show you the row by row insert because honestly it takes about two minutes, and this is not worth it for me to be really frank. I didn't feel like sitting here. Here's what the sample data looks like. I have a script. It is in the demo repo that creates some tables, a table with a bunch of data columns, different data types. I just have a couple of functions I wrote to create random data, both numbers and text, so that I just get different sizes, and then I just inserted just over a million rows. I could have done 10 million, but I didn't want to make everyone sit here. Are these exponential? Yes and no. It depends on data types and a bunch of other factors, which we're going to see in just a minute. I created that data. It is sitting in one table, and I'm simply going to do a couple of these things by taking it and copying it into another table beside it. Every time I'll truncate it, and then we'll see what happens from there. Like I said, I think there are just over a million rows of data here. The first one, as I said, is basically taking, and I'm going to pull this down here. Is that readable by everyone? Make it a little bit bigger? Do that. Same process. Start with an insert statement. I'm simply concatenating that string to some point. In this case, I believe it is 500, and I was playing this last night, so now I actually don't know if it really is 500 or not. Basically, every 500 or every thousand, I'm simply going to then execute that statement, so we have a string with lots of data. This takes a few seconds. It is running. Then you'll see I have two things here. I basically timed the creation of the string, and I timed the actual execution. The string itself took about three seconds. This is the one thing I could not get the beaver today to make that bigger, so I apologize. I will read it for you. The string generation took about three seconds, and the actual execution into the database was just shy of eight seconds. That was a million rows, one database table, to another database table using multi-valued insert statements. Now I'm going to take the same, and we're going to do that array trick. I'm basically taking data from table one. I'm aggregating each of those columns into just aggregating the whole table with an offset. I'm basically doing 10,000 at a time. You can play with different numbers. You can take results. I'm basically taking 10,000 numbers of column one, 10,000 numbers of column two, and so forth, into an aggregated value. Now, because it's being done in Postgres, you'll see that this is actually kind of interesting in how this works. You don't necessarily get the exact same thing. It is running. Again, I tend to use dbeaver in demos because it's just easier for me to color code some things and walk through comments and so forth. That's just why I do it this way. This takes just shy of 30 seconds, maybe actually a little bit less than that, depending on how the image wants to perform today. The really interesting thing you'll see here is that the, and again, I'll read the values out for you, but the string took about 24 and a half seconds to generate, so it went a million rows, 10,000 in time, I don't know, maybe 400 iterations it went through. I'm not sure my math is close to 500, but anyway. And so the string generation took almost 25 seconds, but the actual execution of all of those individual statements took 1.5 seconds. Now again, it's inside of Postgres. It has access to where each of those things are. It is a lot more performant in Postgres, but it's interesting because there might be some things you're doing even internally in some of your processes, functions, store procedures. Might be worth something to try. Now it's complex. This is not the most really exciting way to write a procedure and create all of these values and make sure they get populated and so forth, but it's interesting nonetheless. We thought it helped us mostly because of the parameter limit thing we were finding with the Go package. Again, that is older, but we also found some neat things like this that in some cases it could actually work more effectively. So then I took that same data. Now again, I'm currently using a Docker image. It's just a generic Postgres Docker image. Just kind of spun it up. There's nothing special configuration. I didn't try to give it more RAM. I could have made this a lot more performant, but I chose not to. I simply then copied it out so that this file is on the Docker image server because remember copy is local to the Postgres server. So I took those 10 million rows and it's a lot more, a lot easier to do this, right? We have the copy command. It generated the CSV file. You could provide the other parameters here if you needed to, but you'll see that it ends up being overall significantly faster. So by far the fastest in total time here just to generate and work, right? So we took a million line file, imported it in under two seconds with copy. So it's a great option if you don't know about it. Now, the other thing that shows unlogged. So the question was, I'm going to use copy just because it's quick and we have a time limit in the demo. And so I'm going to set this table bulk test to unlogged, all right? And I'm going to go ahead and do that copy again. So it was 1.7 seconds or so to ingest that. Again, I truncate it at the beginning. And you'll see that it ends up taking 1.3. So, you know, it can be depending, right? That was, someone do the math for me really quickly. What is about 10 or 15 percent? Sometimes it can be larger depending on the kind of table it is, the data you're ingesting, and then some other things we'll talk about in just a minute, all right? So it's easiest to show that in SQL because it's quick and easy to iterate on. Again, the scripts themselves are in the repo, which I'll show at the end. What about in Python? And so, yes, there's a new version of Psycho PG. So this demo was originally created about two years ago. I've iterated on it over time. And so what I did, I actually have, and I think I actually have it up here. So I did actually convert many of these, or all of this, to Psycho PG 3. It doesn't matter what the language is, right? A lot of these principles are going to pertain, regardless what the language is. I happen to be using Python and Psycho PG. Earlier, Pavle was talking about ORMs. Now, again, at the very end, I'm going to mention one or two things to look at for ORMs. Psycho PG is not an ORM. It's just, it's a driver, right, to help us do this work. But there are components of what your driver or your ORM might do for you, which is also valuable to think about. That's the reason I'm using Psycho PG 2, honestly. It turns out that, yes, Psycho PG 3 got much faster, even with the individual inserts. Just by the way it's doing, it's specifically because of a new feature in Postgres 14 and above in Lib PG. So it allows us to do... The word is all of a sudden escaping me. I think I have a pipeline. Thank you. The pipeline feature in Postgres 14 and above. And so with that, particularly, we do get better performance in some of these things. I think the question becomes, again, if you have control, if you can get a better payload, a bigger payload over to Postgres and let it do its work, depending on the architecture of your system, you still benefit from some of these principles. So I did the single insert before we started. So I simply took, again, this is using Psycho PG 2, and I can't speak for the language because I haven't specifically done it, and this is not even about Psycho PG. This is just about simply getting something into the server. If I iterate that file, this is... I meant to show you that too. This is a slightly different file, and the reason is I didn't feel like doing 10 or 12 columns. I just wanted to demo the options. It's a much simpler file, a little bit less than a million rows. And so I did the single insert previously, and you'll see that it took 180 seconds to do 750,000 lines, and it's only three columns, and there's no indexes. So there's a lot of work, right? Just going and iterating back and forth and back and forth. We see that often. So if you were doing that kind of work in your application, seriously considered doing something different, like... So the way this file is set up at the very bottom, I have each of these functions, and so I'm simply going to comment out the single insert. Now I'm simply going to do the multi-valued. I did exactly as shown in the slide. I took that single insert, simply wrapped it in a batch. After so many iterations of pending that string, send that. And when you do that, you'll see that it ends up being significantly faster, and it's really simply to show the value of doing a very minimal amount of work, all right? In six seconds, right? So one line at a time, many lines at a time. I think there's maybe 5,000 parentheses after that, right? So it really can make a big, big difference. I did then want to try the... So this is what I wanted to show, and we can talk about later because I don't know the reasoning, and it's fine. I just... I did not realize that in previous versions of this specific tool, and again, I know other tools have something similar. There are some functions called exact values, is the one I'm using here. What that essentially did for you is did the batching for you. And so I just had to do a little bit less work, and that's the only reason I had... I stuck with this to show you that your tool may have something similar if it can't take advantage of some of the other features that Postgres and others are now providing to do some of the pipelining and things like that. So just to recognize it, this simply does the same thing. It's a multi-valued insert. It's simply helping you do that batch rather than you having to write it. So it's a really convenient method for doing so. Now the arrays turn out to be pretty easy in something like Python. And again, most other languages now, I have that batch. I have a file, I'm reading it in, I'm creating a list out of it, and then I'm sending slices of that list over and over again. And when I do that, you'll see that it has really similar performance. And this is where, specifically because of improvements in PsychoPG, in this case, this actually ends up not being any faster in PsychoPG 3 and above. So I wouldn't necessarily benefit from this application, especially if I didn't need to worry about the number of parameters, right? So again, one of the reasons for this could be a parameter issue if you wanted to have many, many things you're sending in. And the last but not least, and that's why I bring it, is to talk about copy. So if you're a tool, so I appreciate it Pablo. You shared earlier that in Go, right? The ability to use copy, it is a framework that, you know, any language could take on binary copy if they support it. One of the things you really want to look for, because you'll see that it is tremendously valuable if you can use it, right? Less than a second, about half a second, to take the exact same file and simply use copy, right? And again, PsychoPG 3 does a little bit better on some of this because they're taking the ability now, one of the things you could not do, I believe is true, and maybe I'm wrong in this, you couldn't do stream into copy with PsychoPG 2, but you can do that now with PsychoPG 3. That's really nice if you're forming your own string and you want to use copy, right? That's a really valuable tool. So make sure that your application, your tooling has something like that. So there are two examples of how to do this kind of work in either of them. A couple of parting thoughts to take with you. Number one, indexes and constraints. We never talked about this. Now, in case those among you who have been thinking what's going on here, I have no indexes or constraints on any of these tables yet. So someone asked earlier, like, what does that do? I was like, that's a really good question. Let's quickly check that out. And so it's just something to think about. Now, in a very large active system, it is really hard to just get rid of your indexes and constraints because you want to make your data go faster coming in. But currently, Postgres does not have a way to disable indexes and constraints at this time. So you'd have to drop them and then recreate them. But it can have a significant impact. How, again, dropping before insert can significantly improve performance, but use at your own risk. How big of a difference can it make? Well, let's see really quickly. So I'm going to take that same table and I'm going to create a couple indexes. I don't think I have any on there now. I have no indexes. So I'm going to create three just on various columns, B trees, all of them. And I'm going to run, let me set that back to logged. There we go. I'm going to run that copy again. So remember the copy was a little bit over a second. Unlogged, it was just over a second. So just adding three indexes to this table, doing the exact same thing, makes that go at least twice as slow. It is now eight seconds. So that is multiple percentages, multiple times slower. What about the type of index? It's a great question. I want to see like, does it matter? So what if I create a trigram? Now again, this is random text. I would never do this normally. But what if I create a trigram on this text? The text itself is no more than 50 characters long. I should have truncated the table before I did that. It would take just a minute. You will see that I get to show you the other trick now that I did that. Within a few seconds, you start to realize that just changing that index type has a major impact on how this is working. But now I get to show you the view. So now I can actually see how quickly it's going through, even though I have that index on there. It's just a recognition that knowing your data will really impact what you're able to do and what is safe in your specific environment. All right, last but not least. Oh, that was the bonus demo. Partitioning. Consider it. I'm surprised how few people consider partitioning for their data. It can really improve the ability, particularly when you have disparate data, like time series data that might come in late. It means that you have smaller chunks of your table. And because Postgres works in memory, if you're only pulling in smaller portions of that table, you can often get better throughput. Consider it. Give it a look. And the really cool thing here is indexes are kept on each individual table. So even that trigram index lets extrapolate to a billion rows. If that's over many, many tables, the indexes themselves are smaller, you'll probably get better ingest performance. And that just means you are able to take a whole bunch of data and put it into each of these individual tables. If you had multiple threads going and the data was hitting different partitions, you really can see a speed up. Last but not least, last slide. What to look for in your SDKs? So things like, does it support copy? Does it support binary copy? What about multi-valued or batching kind of functions? Do you have to do that work or will your tooling do the work for you or help you do that work? How is AutoCommit handled? Parameter tries. Does it allow you to do anything with those parameter tries queries? How does it handle it? Does it warn you if you're going to exceed a limit? And the one thing I meant to put in here and I didn't and I apologize is, very much like PsychoPG3, has now taken advantage of a feature in Postgres 14 called Pipelining, which essentially says, for every query I send, I don't have to wait for the response, I can just start sending the next query right away. That's really beneficial in inserts. And so it's a really easy and effective way to get more performance out of what you're doing. Turns out, so I have five minutes until questions. Yes. All right. Let me show you really quickly, because I think I can. Oh, there it's done. So then when it stops, you'll get no values back. But it did finally finish. How long did that take? Let's see. Doing that with that trigram index took 65 seconds, right? So your indexes matter, the kinds of indexes and what you're doing. Trigram index is an inefficient index, but it's a very powerful one too. If you're going to use it, you understand that and that's okay. So I have, I think, so remember I told you earlier when I did the single insert, and I'm going to give this a go, and it might not be set up, and this is no comment whatsoever on PsychoPG3, because I was like, oh, that's actually a lot faster than I thought now. No, I think, yeah, I think this is it. So let's just see. This may or may not work. Basically because of the pipelining, this, even though it does 750,000 insert statements, because it's doing one at a time, the time came down very near to what the multi-valued was in this case because of the pipelining effect. So if it works, great. If it's not, it just means that I changed something from the last time I did this. There's no comment whatsoever. Let's see what happens. And I might not have turned on pipelining. Now I do know, oh, you know what? This is not execute many, my apologies. Yeah, I don't have it set up. I thought I did. So there's a function called execute many, and what that does is it automatically sets up pipelining for you. You don't have to enable it in the code itself. Otherwise, at least as far as documentation shows, you have to at least initialize the pipelining to get that impact with it. So it was a great surprise. Thanks for doing all that work. I know there's been a lot there. So that is what I have to offer for today. It's been really a joy to speak with you, and I'd love to take any questions you have in a few minutes that we do have. I'm going to start by talking about bees and coffee. Hi, I've got a few questions, but I'll restrict myself to a couple. The first one is if you take that example where you've got a bunch of indexes and pay maybe even some constraints or even a trigger or two, all of which are contributing to making it slow, how do you tell what's making it slow, either through tooling logs, et cetera, without having to basically play, turn it on and turn it back off again on every one? Really good question. A lot of it would be and probably something I actually was going to try and talk about, but I just didn't have time, which is using the views in Postgres to figure out, number one, first off, what statements are actually happening. You can tell which indexes are being touched, what the kind of transaction are happening, the updates themselves within the index, and that might help you get a sense for at least which ones you have to worry about to start to think through. That'd be my first go, and I will maybe try and update some of those examples with a couple of those views so that you can start to do that. Thank you. Yeah. Question over here. Behind you. Hello. Yeah. So what if you want to normalize your data into multiple tables? Why did I not normalize the data into? Into several tables. Okay. Partitioning? No. No. Like tables with unique constraints and foreign key relations. Oh, why didn't I? That's a great question. Demo and time. What is the strategy to insert data if you want to normalize it into several tables with unique constraints and foreign key relations? Then you cannot copy, and you cannot just do a multivariate insert. You have to process the data while you insert it. Absolutely right. And so that's where I think Postgres doesn't get enough attention on this specific thing. So the question is, when you have a very normalized database, this data actually gets split up into three or four tables because it's not just one file. How do you do that most effectively? Now, a lot of people would have some kind of ETL tool external. I think that Postgres does a really good job internally. I would specifically, what I tend to do is I create an unlogged temp table of sorts. I get the data in as quickly as I can with the copy. I use the power of Postgres to move that data around. Things, tricks like the array trick, honestly, in some instances, ends up being really fast then in processing. That's the best I can offer you when it comes to copy because you're right. That's the limitation of copy. It doesn't follow the parameters down. So hi, thank you. So I would have expected you to also touch on prepared statements, which many drivers have. So did you purposely not do that? Yes, I purposely didn't most, again, partially because of time. So prepared statements, one of the big issues prepared statements that a lot of people run into at least, we were just talking about this on the walk the other night, is prepared statements if you don't need to be released effectively. And so I just didn't have a good demo to be honest with you. And so I apologize when it comes to insert. Now some of that, again, PsychoPG3 does now help with prepared statements. I tested it briefly to see if it would have any impact. On these simple insert statements, that was part of my problem to demo that. It's just a little bit more difficult. So definitely something worth checking. So basically, do the work ahead of time so that statement self doesn't have to be prepared every single time. And I think PsychoPG says there's a threshold. Once the statement has been run so many times, then it will basically turn into prepared statement to save that effort on each insert. Okay, and I just want to remark that it's actually possible, I believe, to disable constraints while importing. So, okay, yeah, good comment. So while importing, absolutely. If you can tolerate it, if your application can tolerate it, you can drop them ahead of time. Yeah, I do. Don't mean drop. You can disable triggers temporarily. An important turn them on again. I'm sorry. So I've read. So apparently constraints are implemented by triggers in Postgres, and if you temporarily disable triggers, then you also disable checking the constraints. Yeah, that's another option. You can defer it to at the end of the import process, which might help for performance if you haven't checked, which you can also disable them, but then you actually disable them so they're not checked. So that's something to be wary about. Having thought about the trigger option, I haven't tested it. So, yeah, good feedback. Disable, please. Yeah, exactly. There's so many ramifications of it. The reality is simply saying there's a lot that you have to think about. If you want to do it, it is an option, and you'll see that guidance out there in a lot of places, right? Then you have to worry about what happens when you re-enable all this stuff. Like, there's a whole different discussion just simply putting it out there. One more, maybe? Have you considered using foreign data wrappers to load data, and do you know about the performance there? Yeah, so the question is about foreign data wrappers. Postgres has a really great ecosystem of foreign data wrappers that allows you to basically say, that thing over there, I'm going to treat it like a table. It can be a file. It can be another system. It can be another database system, Mongo, Redshift, whatever. It really all depends on... A lot of these principles are going to follow. Number one, try to get pushed down. Like, what can be actually pushed down to the queries for the data you're bringing back? The data itself is almost never going to be as quick, just because of the overhead. Even local files, it's not going to be the same thing. But it's a really useful tool. As a source, it could be a great way to take that and get it into something, and then move on from there. One last question. This is a follow-up comment on the question that this gentleman had about constraints. If you use the multi-value insert, sorry, the array insert trick, you can actually just drag the arrays into a CTE and then run an update. So you can still do it in one statement. You don't need to necessarily put it in a temporary table. Absolutely, yeah, again, just example-wise. One question. Hello. Binary copy versus text copy. What is faster, and how much is the difference? Binary or text? Binary is generally faster. It's a great question, and I mostly just mentioned it to mention it. In every experience I've had with tooling that supports it, it ends up being a lot faster. I don't have numbers for you at the moment, and it is part of the demo I want to get in there so that we can show that. If anyone else has a specific input, welcome to shout it out, but it's faster. Look for tooling that supports it. Again, Psycho-P3 and others support it now by default. You'll see some great boosts. Thank you so much. It's been a pleasure.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.0, "text": " Next speaker is Ryan. He's going to talk about bulk loading data to Postgres.", "tokens": [50364, 3087, 8145, 307, 9116, 13, 634, 311, 516, 281, 751, 466, 16139, 15114, 1412, 281, 10223, 45189, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21887018710752076, "compression_ratio": 1.4512820512820512, "no_speech_prob": 0.4895781874656677}, {"id": 1, "seek": 0, "start": 11.0, "end": 22.0, "text": " Hello. All right. Can you hear me? There we go. All right. Thank you so much for coming.", "tokens": [50914, 2425, 13, 1057, 558, 13, 1664, 291, 1568, 385, 30, 821, 321, 352, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 1348, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21887018710752076, "compression_ratio": 1.4512820512820512, "no_speech_prob": 0.4895781874656677}, {"id": 2, "seek": 0, "start": 22.0, "end": 28.0, "text": " It is a pleasure to see you all. This is my first time in Belgium and in Brussels. It's been a great couple of days.", "tokens": [51464, 467, 307, 257, 6834, 281, 536, 291, 439, 13, 639, 307, 452, 700, 565, 294, 28094, 293, 294, 38717, 13, 467, 311, 668, 257, 869, 1916, 295, 1708, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21887018710752076, "compression_ratio": 1.4512820512820512, "no_speech_prob": 0.4895781874656677}, {"id": 3, "seek": 2800, "start": 28.0, "end": 33.0, "text": " Specifically FOSM, it was really interesting coming into the event.", "tokens": [50364, 26058, 479, 4367, 44, 11, 309, 390, 534, 1880, 1348, 666, 264, 2280, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10887524313177945, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.16561159491539001}, {"id": 4, "seek": 2800, "start": 33.0, "end": 42.0, "text": " My very first tech event many, many years ago, I hope I look younger than I am, was at a small university very much set up like this.", "tokens": [50614, 1222, 588, 700, 7553, 2280, 867, 11, 867, 924, 2057, 11, 286, 1454, 286, 574, 7037, 813, 286, 669, 11, 390, 412, 257, 1359, 5454, 588, 709, 992, 493, 411, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10887524313177945, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.16561159491539001}, {"id": 5, "seek": 2800, "start": 42.0, "end": 48.0, "text": " And it just brought back a lot of memories of having packed rooms and the stadium seating and the wooden table.", "tokens": [51064, 400, 309, 445, 3038, 646, 257, 688, 295, 8495, 295, 1419, 13265, 9396, 293, 264, 18585, 32430, 293, 264, 14744, 3199, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10887524313177945, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.16561159491539001}, {"id": 6, "seek": 2800, "start": 48.0, "end": 51.0, "text": " So it's been really fun to be here and appreciate the opportunity.", "tokens": [51364, 407, 309, 311, 668, 534, 1019, 281, 312, 510, 293, 4449, 264, 2650, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10887524313177945, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.16561159491539001}, {"id": 7, "seek": 2800, "start": 51.0, "end": 57.0, "text": " This is a little bit briefly about me. I currently work at a company called Redgate. I've been there a few months.", "tokens": [51514, 639, 307, 257, 707, 857, 10515, 466, 385, 13, 286, 4362, 589, 412, 257, 2237, 1219, 4477, 22514, 13, 286, 600, 668, 456, 257, 1326, 2493, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10887524313177945, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.16561159491539001}, {"id": 8, "seek": 5700, "start": 57.0, "end": 61.0, "text": " You might know them by a tool they have acquired over the last few years called Flyway.", "tokens": [50364, 509, 1062, 458, 552, 538, 257, 2290, 436, 362, 17554, 670, 264, 1036, 1326, 924, 1219, 25294, 676, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12322504255506728, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.04235231876373291}, {"id": 9, "seek": 5700, "start": 61.0, "end": 70.0, "text": " It is a database migration tool. And they've been very well known within the SQL server space in Microsoft.net for many, many years.", "tokens": [50564, 467, 307, 257, 8149, 17011, 2290, 13, 400, 436, 600, 668, 588, 731, 2570, 1951, 264, 19200, 7154, 1901, 294, 8116, 13, 7129, 337, 867, 11, 867, 924, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12322504255506728, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.04235231876373291}, {"id": 10, "seek": 5700, "start": 70.0, "end": 81.0, "text": " And they're bringing some of that technology into the open space, open source database platforms as well for migrations and a way to generate scripts and things of that nature.", "tokens": [51014, 400, 436, 434, 5062, 512, 295, 300, 2899, 666, 264, 1269, 1901, 11, 1269, 4009, 8149, 9473, 382, 731, 337, 6186, 12154, 293, 257, 636, 281, 8460, 23294, 293, 721, 295, 300, 3687, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12322504255506728, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.04235231876373291}, {"id": 11, "seek": 8100, "start": 81.0, "end": 84.0, "text": " There's some of my details, blog and so forth.", "tokens": [50364, 821, 311, 512, 295, 452, 4365, 11, 6968, 293, 370, 5220, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11970760666321371, "compression_ratio": 1.628352490421456, "no_speech_prob": 0.6059860587120056}, {"id": 12, "seek": 8100, "start": 84.0, "end": 89.0, "text": " Very quickly about me, I thought this was relevant. So my wife and I have six children.", "tokens": [50514, 4372, 2661, 466, 385, 11, 286, 1194, 341, 390, 7340, 13, 407, 452, 3836, 293, 286, 362, 2309, 2227, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11970760666321371, "compression_ratio": 1.628352490421456, "no_speech_prob": 0.6059860587120056}, {"id": 13, "seek": 8100, "start": 89.0, "end": 93.0, "text": " So I know a little bit about bulk loading things like vans and cars.", "tokens": [50764, 407, 286, 458, 257, 707, 857, 466, 16139, 15114, 721, 411, 371, 599, 293, 5163, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11970760666321371, "compression_ratio": 1.628352490421456, "no_speech_prob": 0.6059860587120056}, {"id": 14, "seek": 8100, "start": 93.0, "end": 106.0, "text": " And so I felt that was somewhat relevant. If you ever run into me again or you want to talk to me yet today and get me talking about something other than Postgres and databases, family for sure because I have a lot of it.", "tokens": [50964, 400, 370, 286, 2762, 300, 390, 8344, 7340, 13, 759, 291, 1562, 1190, 666, 385, 797, 420, 291, 528, 281, 751, 281, 385, 1939, 965, 293, 483, 385, 1417, 466, 746, 661, 813, 10223, 45189, 293, 22380, 11, 1605, 337, 988, 570, 286, 362, 257, 688, 295, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11970760666321371, "compression_ratio": 1.628352490421456, "no_speech_prob": 0.6059860587120056}, {"id": 15, "seek": 10600, "start": 106.0, "end": 111.0, "text": " Music, I am an amateur beekeeper. I've been doing that for about five or six years now and I love it.", "tokens": [50364, 7609, 11, 286, 669, 364, 29339, 17479, 23083, 13, 286, 600, 668, 884, 300, 337, 466, 1732, 420, 2309, 924, 586, 293, 286, 959, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08379139665697442, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.7558354735374451}, {"id": 16, "seek": 10600, "start": 111.0, "end": 116.0, "text": " I actually do live streams sometimes on YouTube when I'm checking out the hives.", "tokens": [50614, 286, 767, 360, 1621, 15842, 2171, 322, 3088, 562, 286, 478, 8568, 484, 264, 276, 1539, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08379139665697442, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.7558354735374451}, {"id": 17, "seek": 10600, "start": 116.0, "end": 122.0, "text": " And I roast male and coffee. I didn't drink coffee until about seven years ago and now I can't go without it and I love it.", "tokens": [50864, 400, 286, 12904, 7133, 293, 4982, 13, 286, 994, 380, 2822, 4982, 1826, 466, 3407, 924, 2057, 293, 586, 286, 393, 380, 352, 1553, 309, 293, 286, 959, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08379139665697442, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.7558354735374451}, {"id": 18, "seek": 10600, "start": 122.0, "end": 126.0, "text": " So if you want to talk about any of those, I'll chew your ear off for a couple of hours.", "tokens": [51164, 407, 498, 291, 528, 281, 751, 466, 604, 295, 729, 11, 286, 603, 21200, 428, 1273, 766, 337, 257, 1916, 295, 2496, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08379139665697442, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.7558354735374451}, {"id": 19, "seek": 10600, "start": 126.0, "end": 130.0, "text": " You can get this presentation. I actually uploaded it before this talk.", "tokens": [51364, 509, 393, 483, 341, 5860, 13, 286, 767, 17135, 309, 949, 341, 751, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08379139665697442, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.7558354735374451}, {"id": 20, "seek": 13000, "start": 130.0, "end": 137.0, "text": " It might be a first for me in a long time. So the newest version is up there of these slides and the scripts that you're going to see in a minute.", "tokens": [50364, 467, 1062, 312, 257, 700, 337, 385, 294, 257, 938, 565, 13, 407, 264, 17569, 3037, 307, 493, 456, 295, 613, 9788, 293, 264, 23294, 300, 291, 434, 516, 281, 536, 294, 257, 3456, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09004701758330723, "compression_ratio": 1.5916030534351144, "no_speech_prob": 0.5179474353790283}, {"id": 21, "seek": 13000, "start": 137.0, "end": 141.0, "text": " And I'll put this up at the end again in case you miss it.", "tokens": [50714, 400, 286, 603, 829, 341, 493, 412, 264, 917, 797, 294, 1389, 291, 1713, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09004701758330723, "compression_ratio": 1.5916030534351144, "no_speech_prob": 0.5179474353790283}, {"id": 22, "seek": 13000, "start": 141.0, "end": 145.0, "text": " Four sections. Number one, death by a thousand inserts.", "tokens": [50914, 7451, 10863, 13, 5118, 472, 11, 2966, 538, 257, 4714, 49163, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09004701758330723, "compression_ratio": 1.5916030534351144, "no_speech_prob": 0.5179474353790283}, {"id": 23, "seek": 13000, "start": 145.0, "end": 148.0, "text": " Then we're going to actually talk about four plus methods of bulk loading.", "tokens": [51114, 1396, 321, 434, 516, 281, 767, 751, 466, 1451, 1804, 7150, 295, 16139, 15114, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09004701758330723, "compression_ratio": 1.5916030534351144, "no_speech_prob": 0.5179474353790283}, {"id": 24, "seek": 13000, "start": 148.0, "end": 153.0, "text": " I say plus because there's definitely more than four and lots of little nuances.", "tokens": [51264, 286, 584, 1804, 570, 456, 311, 2138, 544, 813, 1451, 293, 3195, 295, 707, 38775, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09004701758330723, "compression_ratio": 1.5916030534351144, "no_speech_prob": 0.5179474353790283}, {"id": 25, "seek": 15300, "start": 153.0, "end": 160.0, "text": " And as I've given this talk, some people have asked questions and so I've tweaked some things and so I just didn't feel like continuing to change that number.", "tokens": [50364, 400, 382, 286, 600, 2212, 341, 751, 11, 512, 561, 362, 2351, 1651, 293, 370, 286, 600, 6986, 7301, 512, 721, 293, 370, 286, 445, 994, 380, 841, 411, 9289, 281, 1319, 300, 1230, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11621572616252493, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.3272055387496948}, {"id": 26, "seek": 15300, "start": 160.0, "end": 165.0, "text": " I'm going to give you a couple quick demos and then we'll talk, that is not the fourth point.", "tokens": [50714, 286, 478, 516, 281, 976, 291, 257, 1916, 1702, 33788, 293, 550, 321, 603, 751, 11, 300, 307, 406, 264, 6409, 935, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11621572616252493, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.3272055387496948}, {"id": 27, "seek": 15300, "start": 165.0, "end": 171.0, "text": " Well, I did everything else but change at one point. I went over this many times. Just a couple parting thoughts.", "tokens": [50964, 1042, 11, 286, 630, 1203, 1646, 457, 1319, 412, 472, 935, 13, 286, 1437, 670, 341, 867, 1413, 13, 1449, 257, 1916, 46607, 4598, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11621572616252493, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.3272055387496948}, {"id": 28, "seek": 15300, "start": 171.0, "end": 173.0, "text": " Death by a thousand inserts. What do I mean?", "tokens": [51264, 13703, 538, 257, 4714, 49163, 13, 708, 360, 286, 914, 30, 51364], "temperature": 0.0, "avg_logprob": -0.11621572616252493, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.3272055387496948}, {"id": 29, "seek": 15300, "start": 173.0, "end": 179.0, "text": " So what I used to find, so I worked at timescale. I didn't put my history up here, but I worked at timescale for a couple of years.", "tokens": [51364, 407, 437, 286, 1143, 281, 915, 11, 370, 286, 2732, 412, 1413, 37088, 13, 286, 994, 380, 829, 452, 2503, 493, 510, 11, 457, 286, 2732, 412, 1413, 37088, 337, 257, 1916, 295, 924, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11621572616252493, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.3272055387496948}, {"id": 30, "seek": 17900, "start": 179.0, "end": 185.0, "text": " Partially open source extension into Postgres for time series data.", "tokens": [50364, 4100, 2270, 1269, 4009, 10320, 666, 10223, 45189, 337, 565, 2638, 1412, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14492574231377964, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.11899199336767197}, {"id": 31, "seek": 17900, "start": 185.0, "end": 192.0, "text": " And we would see a lot of folks complaining, frustrated about the rate of insert of their data.", "tokens": [50664, 400, 321, 576, 536, 257, 688, 295, 4024, 20740, 11, 15751, 466, 264, 3314, 295, 8969, 295, 641, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14492574231377964, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.11899199336767197}, {"id": 32, "seek": 17900, "start": 192.0, "end": 200.0, "text": " And so we would try to help them and recognize that this is something we're all doing all the time, all day long.", "tokens": [51014, 400, 370, 321, 576, 853, 281, 854, 552, 293, 5521, 300, 341, 307, 746, 321, 434, 439, 884, 439, 264, 565, 11, 439, 786, 938, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14492574231377964, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.11899199336767197}, {"id": 33, "seek": 17900, "start": 200.0, "end": 205.0, "text": " And yet we often are underperforming, not getting the results that we'd want.", "tokens": [51414, 400, 1939, 321, 2049, 366, 833, 26765, 278, 11, 406, 1242, 264, 3542, 300, 321, 1116, 528, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14492574231377964, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.11899199336767197}, {"id": 34, "seek": 20500, "start": 205.0, "end": 209.0, "text": " It could be any kind of data. It might be binary data in some way. It might be large objects.", "tokens": [50364, 467, 727, 312, 604, 733, 295, 1412, 13, 467, 1062, 312, 17434, 1412, 294, 512, 636, 13, 467, 1062, 312, 2416, 6565, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 35, "seek": 20500, "start": 209.0, "end": 212.0, "text": " It might be JSON that you're parsing and you're doing something with.", "tokens": [50564, 467, 1062, 312, 31828, 300, 291, 434, 21156, 278, 293, 291, 434, 884, 746, 365, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 36, "seek": 20500, "start": 212.0, "end": 217.0, "text": " It could just be a simple CSV file with some of your data science work that you're doing.", "tokens": [50714, 467, 727, 445, 312, 257, 2199, 48814, 3991, 365, 512, 295, 428, 1412, 3497, 589, 300, 291, 434, 884, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 37, "seek": 20500, "start": 217.0, "end": 222.0, "text": " But you need to get a lot of it and you need to get a lot of it into Postgres.", "tokens": [50964, 583, 291, 643, 281, 483, 257, 688, 295, 309, 293, 291, 643, 281, 483, 257, 688, 295, 309, 666, 10223, 45189, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 38, "seek": 20500, "start": 222.0, "end": 227.0, "text": " And what we would find is we would see work like this often because it just makes sense.", "tokens": [51214, 400, 437, 321, 576, 915, 307, 321, 576, 536, 589, 411, 341, 2049, 570, 309, 445, 1669, 2020, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 39, "seek": 20500, "start": 227.0, "end": 232.0, "text": " We're so used to typing, insert into a table and some columns and insert some data.", "tokens": [51464, 492, 434, 370, 1143, 281, 18444, 11, 8969, 666, 257, 3199, 293, 512, 13766, 293, 8969, 512, 1412, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05649850243016293, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.015896176919341087}, {"id": 40, "seek": 23200, "start": 232.0, "end": 238.0, "text": " And we would see stuff like this and I have to admit that I've certainly done this many times myself,", "tokens": [50364, 400, 321, 576, 536, 1507, 411, 341, 293, 286, 362, 281, 9796, 300, 286, 600, 3297, 1096, 341, 867, 1413, 2059, 11, 50664], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 41, "seek": 23200, "start": 238.0, "end": 243.0, "text": " particularly when you're rushing to figure out how to get something done, get something in,", "tokens": [50664, 4098, 562, 291, 434, 25876, 281, 2573, 484, 577, 281, 483, 746, 1096, 11, 483, 746, 294, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 42, "seek": 23200, "start": 243.0, "end": 245.0, "text": " how to parse that data packet you just got.", "tokens": [50914, 577, 281, 48377, 300, 1412, 20300, 291, 445, 658, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 43, "seek": 23200, "start": 245.0, "end": 247.0, "text": " And you don't realize what you just did.", "tokens": [51014, 400, 291, 500, 380, 4325, 437, 291, 445, 630, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 44, "seek": 23200, "start": 247.0, "end": 251.0, "text": " It created a loop of thousands and millions of individual insert statements.", "tokens": [51114, 467, 2942, 257, 6367, 295, 5383, 293, 6803, 295, 2609, 8969, 12363, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 45, "seek": 23200, "start": 251.0, "end": 256.0, "text": " And that's really, really slow, right?", "tokens": [51314, 400, 300, 311, 534, 11, 534, 2964, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 46, "seek": 23200, "start": 256.0, "end": 259.0, "text": " And it's slow for a couple of reasons.", "tokens": [51564, 400, 309, 311, 2964, 337, 257, 1916, 295, 4112, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09525038342957103, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.017427224665880203}, {"id": 47, "seek": 25900, "start": 259.0, "end": 261.0, "text": " These are just a few to kind of put out there.", "tokens": [50364, 1981, 366, 445, 257, 1326, 281, 733, 295, 829, 484, 456, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 48, "seek": 25900, "start": 261.0, "end": 266.0, "text": " But the reality is it's so easy to forget when we're using our tooling", "tokens": [50464, 583, 264, 4103, 307, 309, 311, 370, 1858, 281, 2870, 562, 321, 434, 1228, 527, 46593, 50714], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 49, "seek": 25900, "start": 266.0, "end": 271.0, "text": " that every one of those insert statements has some kind of overhead, some of which is listed.", "tokens": [50714, 300, 633, 472, 295, 729, 8969, 12363, 575, 512, 733, 295, 19922, 11, 512, 295, 597, 307, 10052, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 50, "seek": 25900, "start": 271.0, "end": 273.0, "text": " Now, there's certainly other factors here.", "tokens": [50964, 823, 11, 456, 311, 3297, 661, 6771, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 51, "seek": 25900, "start": 273.0, "end": 278.0, "text": " But this is the one part that most developers, particularly newer developers, forget about.", "tokens": [51064, 583, 341, 307, 264, 472, 644, 300, 881, 8849, 11, 4098, 17628, 8849, 11, 2870, 466, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 52, "seek": 25900, "start": 278.0, "end": 281.0, "text": " That insert statement doesn't just start here.", "tokens": [51314, 663, 8969, 5629, 1177, 380, 445, 722, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 53, "seek": 25900, "start": 281.0, "end": 282.0, "text": " It has to go across the wire.", "tokens": [51464, 467, 575, 281, 352, 2108, 264, 6234, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 54, "seek": 25900, "start": 282.0, "end": 284.0, "text": " The data reserver has to do something.", "tokens": [51514, 440, 1412, 725, 38241, 575, 281, 360, 746, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 55, "seek": 25900, "start": 284.0, "end": 288.0, "text": " Depending on your commit settings, you might have to get a response back.", "tokens": [51614, 22539, 322, 428, 5599, 6257, 11, 291, 1062, 362, 281, 483, 257, 4134, 646, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08453851671361212, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.019102558493614197}, {"id": 56, "seek": 28800, "start": 288.0, "end": 290.0, "text": " Then your program has to do something else.", "tokens": [50364, 1396, 428, 1461, 575, 281, 360, 746, 1646, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 57, "seek": 28800, "start": 290.0, "end": 291.0, "text": " There's a latency.", "tokens": [50464, 821, 311, 257, 27043, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 58, "seek": 28800, "start": 291.0, "end": 293.0, "text": " There's indexes and constraints.", "tokens": [50514, 821, 311, 8186, 279, 293, 18491, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 59, "seek": 28800, "start": 293.0, "end": 294.0, "text": " And we forget about all those pieces.", "tokens": [50614, 400, 321, 2870, 466, 439, 729, 3755, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 60, "seek": 28800, "start": 294.0, "end": 298.0, "text": " And now you say, I want to insert a million rows a second,", "tokens": [50664, 400, 586, 291, 584, 11, 286, 528, 281, 8969, 257, 2459, 13241, 257, 1150, 11, 50864], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 61, "seek": 28800, "start": 298.0, "end": 303.0, "text": " and you wonder why it's not working when you're doing it with individual statements.", "tokens": [50864, 293, 291, 2441, 983, 309, 311, 406, 1364, 562, 291, 434, 884, 309, 365, 2609, 12363, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 62, "seek": 28800, "start": 303.0, "end": 307.0, "text": " The analogy to me is I almost put my children's faces on here.", "tokens": [51114, 440, 21663, 281, 385, 307, 286, 1920, 829, 452, 2227, 311, 8475, 322, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 63, "seek": 28800, "start": 307.0, "end": 310.0, "text": " To say, like, if I wanted to shutter my children somewhere,", "tokens": [51314, 1407, 584, 11, 411, 11, 498, 286, 1415, 281, 25517, 452, 2227, 4079, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 64, "seek": 28800, "start": 310.0, "end": 313.0, "text": " for those of you coming in don't know, I have a lot of kids.", "tokens": [51464, 337, 729, 295, 291, 1348, 294, 500, 380, 458, 11, 286, 362, 257, 688, 295, 2301, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 65, "seek": 28800, "start": 313.0, "end": 317.0, "text": " If I shuttered them one at a time with a bicycle, it would just take a long time, right?", "tokens": [51614, 759, 286, 25517, 292, 552, 472, 412, 257, 565, 365, 257, 20888, 11, 309, 576, 445, 747, 257, 938, 565, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.10284325323606792, "compression_ratio": 1.7027863777089782, "no_speech_prob": 0.002547992393374443}, {"id": 66, "seek": 31700, "start": 317.0, "end": 322.0, "text": " If we do that data packet one at a time, insert after insert after insert,", "tokens": [50364, 759, 321, 360, 300, 1412, 20300, 472, 412, 257, 565, 11, 8969, 934, 8969, 934, 8969, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 67, "seek": 31700, "start": 322.0, "end": 323.0, "text": " it just ends up being slow.", "tokens": [50614, 309, 445, 5314, 493, 885, 2964, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 68, "seek": 31700, "start": 323.0, "end": 328.0, "text": " Now, if we could take more of those things, maybe we take something like, you know,", "tokens": [50664, 823, 11, 498, 321, 727, 747, 544, 295, 729, 721, 11, 1310, 321, 747, 746, 411, 11, 291, 458, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 69, "seek": 31700, "start": 328.0, "end": 330.0, "text": " the analogy, get this pickup truck.", "tokens": [50914, 264, 21663, 11, 483, 341, 25328, 5898, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 70, "seek": 31700, "start": 330.0, "end": 333.0, "text": " And we can at least get a few more packets in there.", "tokens": [51014, 400, 321, 393, 412, 1935, 483, 257, 1326, 544, 30364, 294, 456, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 71, "seek": 31700, "start": 333.0, "end": 337.0, "text": " We have to take fewer trips, and we get the same amount of data.", "tokens": [51164, 492, 362, 281, 747, 13366, 16051, 11, 293, 321, 483, 264, 912, 2372, 295, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 72, "seek": 31700, "start": 337.0, "end": 342.0, "text": " The ultimate goal is we want to try and figure out that ability.", "tokens": [51364, 440, 9705, 3387, 307, 321, 528, 281, 853, 293, 2573, 484, 300, 3485, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08704174316681183, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.0058152019046247005}, {"id": 73, "seek": 34200, "start": 342.0, "end": 344.0, "text": " What's the largest payload?", "tokens": [50364, 708, 311, 264, 6443, 30918, 30, 50464], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 74, "seek": 34200, "start": 344.0, "end": 348.0, "text": " What's the largest amount of data we can pull across the wire at one time", "tokens": [50464, 708, 311, 264, 6443, 2372, 295, 1412, 321, 393, 2235, 2108, 264, 6234, 412, 472, 565, 50664], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 75, "seek": 34200, "start": 348.0, "end": 354.0, "text": " so that the database server just has to do its work one time per bulk set of statements?", "tokens": [50664, 370, 300, 264, 8149, 7154, 445, 575, 281, 360, 1080, 589, 472, 565, 680, 16139, 992, 295, 12363, 30, 50964], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 76, "seek": 34200, "start": 354.0, "end": 355.0, "text": " All right?", "tokens": [50964, 1057, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 77, "seek": 34200, "start": 355.0, "end": 358.0, "text": " And so the goal, and a lot of things we're going to talk about today,", "tokens": [51014, 400, 370, 264, 3387, 11, 293, 257, 688, 295, 721, 321, 434, 516, 281, 751, 466, 965, 11, 51164], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 78, "seek": 34200, "start": 358.0, "end": 363.0, "text": " are how can we take the data, the massive amounts of data, these files, the streams we're taking,", "tokens": [51164, 366, 577, 393, 321, 747, 264, 1412, 11, 264, 5994, 11663, 295, 1412, 11, 613, 7098, 11, 264, 15842, 321, 434, 1940, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 79, "seek": 34200, "start": 363.0, "end": 366.0, "text": " and get them into Postgres as quickly as possible?", "tokens": [51414, 293, 483, 552, 666, 10223, 45189, 382, 2661, 382, 1944, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 80, "seek": 34200, "start": 366.0, "end": 367.0, "text": " All right?", "tokens": [51564, 1057, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.10993944477831197, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.244745671749115}, {"id": 81, "seek": 36700, "start": 367.0, "end": 372.0, "text": " We're going to tend towards larger payloads, things on your right,", "tokens": [50364, 492, 434, 516, 281, 3928, 3030, 4833, 30918, 82, 11, 721, 322, 428, 558, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 82, "seek": 36700, "start": 372.0, "end": 374.0, "text": " and not the things on your left.", "tokens": [50614, 293, 406, 264, 721, 322, 428, 1411, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 83, "seek": 36700, "start": 374.0, "end": 376.0, "text": " All right?", "tokens": [50714, 1057, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 84, "seek": 36700, "start": 376.0, "end": 378.0, "text": " Now, we aren't going to be able to talk about today,", "tokens": [50814, 823, 11, 321, 3212, 380, 516, 281, 312, 1075, 281, 751, 466, 965, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 85, "seek": 36700, "start": 378.0, "end": 382.0, "text": " but then there are also things like, because I actually was trying to get a demo", "tokens": [50914, 457, 550, 456, 366, 611, 721, 411, 11, 570, 286, 767, 390, 1382, 281, 483, 257, 10723, 51114], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 86, "seek": 36700, "start": 382.0, "end": 384.0, "text": " as I was sitting in the hotel the other night.", "tokens": [51114, 382, 286, 390, 3798, 294, 264, 7622, 264, 661, 1818, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 87, "seek": 36700, "start": 384.0, "end": 385.0, "text": " It's like, maybe I can do this.", "tokens": [51214, 467, 311, 411, 11, 1310, 286, 393, 360, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 88, "seek": 36700, "start": 385.0, "end": 388.0, "text": " It was a little bit too complicated and based on where we're going to be,", "tokens": [51264, 467, 390, 257, 707, 857, 886, 6179, 293, 2361, 322, 689, 321, 434, 516, 281, 312, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 89, "seek": 36700, "start": 388.0, "end": 389.0, "text": " I won't be able to do it today.", "tokens": [51414, 286, 1582, 380, 312, 1075, 281, 360, 309, 965, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 90, "seek": 36700, "start": 389.0, "end": 392.0, "text": " But I will tell you about at least one or two tools.", "tokens": [51464, 583, 286, 486, 980, 291, 466, 412, 1935, 472, 420, 732, 3873, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10310433932713099, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.10080049932003021}, {"id": 91, "seek": 39200, "start": 392.0, "end": 397.0, "text": " If you could take multiple connections and somehow split your data up,", "tokens": [50364, 759, 291, 727, 747, 3866, 9271, 293, 6063, 7472, 428, 1412, 493, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 92, "seek": 39200, "start": 397.0, "end": 399.0, "text": " you'll find that you also get even more.", "tokens": [50614, 291, 603, 915, 300, 291, 611, 483, 754, 544, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 93, "seek": 39200, "start": 399.0, "end": 404.0, "text": " So larger payloads, again, depending on your server, your configuration, your abilities,", "tokens": [50714, 407, 4833, 30918, 82, 11, 797, 11, 5413, 322, 428, 7154, 11, 428, 11694, 11, 428, 11582, 11, 50964], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 94, "seek": 39200, "start": 404.0, "end": 406.0, "text": " there's going to be a sweet spot.", "tokens": [50964, 456, 311, 516, 281, 312, 257, 3844, 4008, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 95, "seek": 39200, "start": 406.0, "end": 409.0, "text": " But if you're willing to do the work, you can find it,", "tokens": [51064, 583, 498, 291, 434, 4950, 281, 360, 264, 589, 11, 291, 393, 915, 309, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 96, "seek": 39200, "start": 409.0, "end": 411.0, "text": " whether it's two, whether it's four.", "tokens": [51214, 1968, 309, 311, 732, 11, 1968, 309, 311, 1451, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 97, "seek": 39200, "start": 411.0, "end": 414.0, "text": " There are ways that we used to do testing at least with timescale.", "tokens": [51314, 821, 366, 2098, 300, 321, 1143, 281, 360, 4997, 412, 1935, 365, 1413, 37088, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 98, "seek": 39200, "start": 414.0, "end": 417.0, "text": " We've done it with Postgres native partition as well,", "tokens": [51464, 492, 600, 1096, 309, 365, 10223, 45189, 8470, 24808, 382, 731, 11, 51614], "temperature": 0.0, "avg_logprob": -0.0945369799931844, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.14975516498088837}, {"id": 99, "seek": 41700, "start": 417.0, "end": 421.0, "text": " and many threads taking large payloads up to a certain size,", "tokens": [50364, 293, 867, 19314, 1940, 2416, 30918, 82, 493, 281, 257, 1629, 2744, 11, 50564], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 100, "seek": 41700, "start": 421.0, "end": 424.0, "text": " depending on your configuration, can really improve your ingest performance.", "tokens": [50564, 5413, 322, 428, 11694, 11, 393, 534, 3470, 428, 3957, 377, 3389, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 101, "seek": 41700, "start": 424.0, "end": 426.0, "text": " So things to consider.", "tokens": [50714, 407, 721, 281, 1949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 102, "seek": 41700, "start": 426.0, "end": 431.0, "text": " So let's look at these four methods, and then I'll do my best to demo each of them.", "tokens": [50814, 407, 718, 311, 574, 412, 613, 1451, 7150, 11, 293, 550, 286, 603, 360, 452, 1151, 281, 10723, 1184, 295, 552, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 103, "seek": 41700, "start": 431.0, "end": 436.0, "text": " The first, and believe it or not, sometimes often forgot about,", "tokens": [51064, 440, 700, 11, 293, 1697, 309, 420, 406, 11, 2171, 2049, 5298, 466, 11, 51314], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 104, "seek": 41700, "start": 436.0, "end": 439.0, "text": " is a simple multi-valued insert.", "tokens": [51314, 307, 257, 2199, 4825, 12, 3337, 5827, 8969, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 105, "seek": 41700, "start": 439.0, "end": 441.0, "text": " So what does a multi-valued insert look like?", "tokens": [51464, 407, 437, 775, 257, 4825, 12, 3337, 5827, 8969, 574, 411, 30, 51564], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 106, "seek": 41700, "start": 441.0, "end": 444.0, "text": " This is what it looks like in something like just plain SQL.", "tokens": [51564, 639, 307, 437, 309, 1542, 411, 294, 746, 411, 445, 11121, 19200, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06610932069666245, "compression_ratio": 1.635036496350365, "no_speech_prob": 0.024397505447268486}, {"id": 107, "seek": 44400, "start": 444.0, "end": 450.0, "text": " And again, for folks that are coming from, we heard talk earlier about Go and using ORMs,", "tokens": [50364, 400, 797, 11, 337, 4024, 300, 366, 1348, 490, 11, 321, 2198, 751, 3071, 466, 1037, 293, 1228, 19654, 26386, 11, 50664], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 108, "seek": 44400, "start": 450.0, "end": 456.0, "text": " don't know SQL well, it's easy to forget that you can do this.", "tokens": [50664, 500, 380, 458, 19200, 731, 11, 309, 311, 1858, 281, 2870, 300, 291, 393, 360, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 109, "seek": 44400, "start": 456.0, "end": 461.0, "text": " You simply say insert into table, you have your parentheses with your values of data,", "tokens": [50964, 509, 2935, 584, 8969, 666, 3199, 11, 291, 362, 428, 34153, 365, 428, 4190, 295, 1412, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 110, "seek": 44400, "start": 461.0, "end": 464.0, "text": " you can just say comma and add another set of parentheses,", "tokens": [51214, 291, 393, 445, 584, 22117, 293, 909, 1071, 992, 295, 34153, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 111, "seek": 44400, "start": 464.0, "end": 469.0, "text": " and you can do that for a long time, and you will get a better performance.", "tokens": [51364, 293, 291, 393, 360, 300, 337, 257, 938, 565, 11, 293, 291, 486, 483, 257, 1101, 3389, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 112, "seek": 44400, "start": 469.0, "end": 470.0, "text": " I'll show you some of that.", "tokens": [51614, 286, 603, 855, 291, 512, 295, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 113, "seek": 44400, "start": 470.0, "end": 473.0, "text": " Now on code, the reason I bring this one up is for a lot of people,", "tokens": [51664, 823, 322, 3089, 11, 264, 1778, 286, 1565, 341, 472, 493, 307, 337, 257, 688, 295, 561, 11, 51814], "temperature": 0.0, "avg_logprob": -0.09658784190500815, "compression_ratio": 1.657243816254417, "no_speech_prob": 0.014483965002000332}, {"id": 114, "seek": 47300, "start": 473.0, "end": 477.0, "text": " and I'm using Python, it doesn't really matter what the language is,", "tokens": [50364, 293, 286, 478, 1228, 15329, 11, 309, 1177, 380, 534, 1871, 437, 264, 2856, 307, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 115, "seek": 47300, "start": 477.0, "end": 480.0, "text": " a lot of people do that individual insert statement,", "tokens": [50564, 257, 688, 295, 561, 360, 300, 2609, 8969, 5629, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 116, "seek": 47300, "start": 480.0, "end": 484.0, "text": " and honestly, if you don't have time right now, you want to improve your performance,", "tokens": [50714, 293, 6095, 11, 498, 291, 500, 380, 362, 565, 558, 586, 11, 291, 528, 281, 3470, 428, 3389, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 117, "seek": 47300, "start": 484.0, "end": 490.0, "text": " but you don't have a lot of time, you can simply just put a little loop in there that says,", "tokens": [50914, 457, 291, 500, 380, 362, 257, 688, 295, 565, 11, 291, 393, 2935, 445, 829, 257, 707, 6367, 294, 456, 300, 1619, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 118, "seek": 47300, "start": 490.0, "end": 496.0, "text": " hey, just append to this string for so many iterations, and then send the query.", "tokens": [51214, 4177, 11, 445, 34116, 281, 341, 6798, 337, 370, 867, 36540, 11, 293, 550, 2845, 264, 14581, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 119, "seek": 47300, "start": 496.0, "end": 499.0, "text": " And you'll be surprised how quickly that improves your performance.", "tokens": [51514, 400, 291, 603, 312, 6100, 577, 2661, 300, 24771, 428, 3389, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09902461937495641, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.03200091794133186}, {"id": 120, "seek": 49900, "start": 499.0, "end": 503.0, "text": " So a really small change can make a big difference.", "tokens": [50364, 407, 257, 534, 1359, 1319, 393, 652, 257, 955, 2649, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 121, "seek": 49900, "start": 503.0, "end": 508.0, "text": " Multi-valued inserts requires a little bit of extra programming work depending on what you're doing.", "tokens": [50564, 29238, 12, 3337, 5827, 49163, 7029, 257, 707, 857, 295, 2857, 9410, 589, 5413, 322, 437, 291, 434, 884, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 122, "seek": 49900, "start": 508.0, "end": 512.0, "text": " And we'll talk briefly about ORMs at the end, how many of them,", "tokens": [50814, 400, 321, 603, 751, 10515, 466, 19654, 26386, 412, 264, 917, 11, 577, 867, 295, 552, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 123, "seek": 49900, "start": 512.0, "end": 515.0, "text": " or at least some of them, can help you do some things like this.", "tokens": [51014, 420, 412, 1935, 512, 295, 552, 11, 393, 854, 291, 360, 512, 721, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 124, "seek": 49900, "start": 515.0, "end": 518.0, "text": " Multi-valued inserts is part of SQL standard.", "tokens": [51164, 29238, 12, 3337, 5827, 49163, 307, 644, 295, 19200, 3832, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 125, "seek": 49900, "start": 518.0, "end": 520.0, "text": " It's supported regardless.", "tokens": [51314, 467, 311, 8104, 10060, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 126, "seek": 49900, "start": 520.0, "end": 523.0, "text": " If you can create a string, and you can append these things together,", "tokens": [51414, 759, 291, 393, 1884, 257, 6798, 11, 293, 291, 393, 34116, 613, 721, 1214, 11, 51564], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 127, "seek": 49900, "start": 523.0, "end": 527.0, "text": " you can send it to the server, and the server will handle it correctly.", "tokens": [51564, 291, 393, 2845, 309, 281, 264, 7154, 11, 293, 264, 7154, 486, 4813, 309, 8944, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08963706881500953, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.02672341652214527}, {"id": 128, "seek": 52700, "start": 527.0, "end": 529.0, "text": " It's usually at least moderately faster.", "tokens": [50364, 467, 311, 2673, 412, 1935, 10494, 1592, 4663, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 129, "seek": 52700, "start": 529.0, "end": 531.0, "text": " I'll show you an example in a minute.", "tokens": [50464, 286, 603, 855, 291, 364, 1365, 294, 257, 3456, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 130, "seek": 52700, "start": 531.0, "end": 535.0, "text": " And it just really requires that you have some kind of batching in your application.", "tokens": [50564, 400, 309, 445, 534, 7029, 300, 291, 362, 512, 733, 295, 15245, 278, 294, 428, 3861, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 131, "seek": 52700, "start": 535.0, "end": 537.0, "text": " So you go back to this Python example.", "tokens": [50764, 407, 291, 352, 646, 281, 341, 15329, 1365, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 132, "seek": 52700, "start": 537.0, "end": 541.0, "text": " I just had to put something that says, hey, once you reach some limit,", "tokens": [50864, 286, 445, 632, 281, 829, 746, 300, 1619, 11, 4177, 11, 1564, 291, 2524, 512, 4948, 11, 51064], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 133, "seek": 52700, "start": 541.0, "end": 544.0, "text": " go ahead and send the statement, and then let's start over again.", "tokens": [51064, 352, 2286, 293, 2845, 264, 5629, 11, 293, 550, 718, 311, 722, 670, 797, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 134, "seek": 52700, "start": 544.0, "end": 546.0, "text": " So it's not that hard to do.", "tokens": [51214, 407, 309, 311, 406, 300, 1152, 281, 360, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 135, "seek": 52700, "start": 546.0, "end": 551.0, "text": " It's pretty quick to iterate in your application now to get a lot better performance.", "tokens": [51314, 467, 311, 1238, 1702, 281, 44497, 294, 428, 3861, 586, 281, 483, 257, 688, 1101, 3389, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 136, "seek": 52700, "start": 551.0, "end": 555.0, "text": " The second one is a little bit interesting, and it's really unique to Postgres.", "tokens": [51564, 440, 1150, 472, 307, 257, 707, 857, 1880, 11, 293, 309, 311, 534, 3845, 281, 10223, 45189, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06796712401910876, "compression_ratio": 1.7170418006430868, "no_speech_prob": 0.00609356677159667}, {"id": 137, "seek": 55500, "start": 555.0, "end": 557.0, "text": " And I bring this up for one specific reason.", "tokens": [50364, 400, 286, 1565, 341, 493, 337, 472, 2685, 1778, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 138, "seek": 55500, "start": 557.0, "end": 560.0, "text": " It's called using arrays to do your inserts.", "tokens": [50464, 467, 311, 1219, 1228, 41011, 281, 360, 428, 49163, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 139, "seek": 55500, "start": 560.0, "end": 564.0, "text": " Now, if you are new to Postgres, and you're not really, you don't know this,", "tokens": [50614, 823, 11, 498, 291, 366, 777, 281, 10223, 45189, 11, 293, 291, 434, 406, 534, 11, 291, 500, 380, 458, 341, 11, 50814], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 140, "seek": 55500, "start": 564.0, "end": 568.0, "text": " Postgres is maybe the only, it's one of the few, at least that I know of,", "tokens": [50814, 10223, 45189, 307, 1310, 264, 787, 11, 309, 311, 472, 295, 264, 1326, 11, 412, 1935, 300, 286, 458, 295, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 141, "seek": 55500, "start": 568.0, "end": 571.0, "text": " that supports an actual array as a data type.", "tokens": [51014, 300, 9346, 364, 3539, 10225, 382, 257, 1412, 2010, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 142, "seek": 55500, "start": 571.0, "end": 577.0, "text": " And so you can actually put together a bundle of values as an array,", "tokens": [51164, 400, 370, 291, 393, 767, 829, 1214, 257, 24438, 295, 4190, 382, 364, 10225, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 143, "seek": 55500, "start": 577.0, "end": 580.0, "text": " or multiple values as an array.", "tokens": [51464, 420, 3866, 4190, 382, 364, 10225, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 144, "seek": 55500, "start": 580.0, "end": 582.0, "text": " Sorry, I had a box to highlight it.", "tokens": [51614, 4919, 11, 286, 632, 257, 2424, 281, 5078, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06464669374915642, "compression_ratio": 1.65234375, "no_speech_prob": 0.005299301818013191}, {"id": 145, "seek": 58200, "start": 582.0, "end": 586.0, "text": " And that then is treated as one value element,", "tokens": [50364, 400, 300, 550, 307, 8668, 382, 472, 2158, 4478, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 146, "seek": 58200, "start": 586.0, "end": 591.0, "text": " which can then be what we call a nest, split back apart and put into the database.", "tokens": [50564, 597, 393, 550, 312, 437, 321, 818, 257, 15646, 11, 7472, 646, 4936, 293, 829, 666, 264, 8149, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 147, "seek": 58200, "start": 591.0, "end": 594.0, "text": " Now, the reason I bring this up is, at timescale,", "tokens": [50814, 823, 11, 264, 1778, 286, 1565, 341, 493, 307, 11, 412, 1413, 37088, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 148, "seek": 58200, "start": 594.0, "end": 601.0, "text": " we had an application that, using an older version of Go, was doing a lot of inserts.", "tokens": [50964, 321, 632, 364, 3861, 300, 11, 1228, 364, 4906, 3037, 295, 1037, 11, 390, 884, 257, 688, 295, 49163, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 149, "seek": 58200, "start": 601.0, "end": 605.0, "text": " And we ran into the problem of, and I'll talk about this in just a second,", "tokens": [51314, 400, 321, 5872, 666, 264, 1154, 295, 11, 293, 286, 603, 751, 466, 341, 294, 445, 257, 1150, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 150, "seek": 58200, "start": 605.0, "end": 610.0, "text": " in Postgres currently, when a SQL statement is parameterized,", "tokens": [51514, 294, 10223, 45189, 4362, 11, 562, 257, 19200, 5629, 307, 13075, 1602, 11, 51764], "temperature": 0.0, "avg_logprob": -0.09833942203346742, "compression_ratio": 1.5642023346303502, "no_speech_prob": 0.0004876408202107996}, {"id": 151, "seek": 61000, "start": 610.0, "end": 612.0, "text": " so we'll say something like insert into table,", "tokens": [50364, 370, 321, 603, 584, 746, 411, 8969, 666, 3199, 11, 50464], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 152, "seek": 61000, "start": 612.0, "end": 616.0, "text": " and then it puts an internal parameter, which is a question mark.", "tokens": [50464, 293, 550, 309, 8137, 364, 6920, 13075, 11, 597, 307, 257, 1168, 1491, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 153, "seek": 61000, "start": 616.0, "end": 620.0, "text": " And you can only do 65,000 of those question marks.", "tokens": [50664, 400, 291, 393, 787, 360, 11624, 11, 1360, 295, 729, 1168, 10640, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 154, "seek": 61000, "start": 620.0, "end": 622.0, "text": " And so if you're trying to insert lots of data,", "tokens": [50864, 400, 370, 498, 291, 434, 1382, 281, 8969, 3195, 295, 1412, 11, 50964], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 155, "seek": 61000, "start": 622.0, "end": 627.0, "text": " you have to make sure that you don't have more than 65,000 some odd parameters.", "tokens": [50964, 291, 362, 281, 652, 988, 300, 291, 500, 380, 362, 544, 813, 11624, 11, 1360, 512, 7401, 9834, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 156, "seek": 61000, "start": 627.0, "end": 630.0, "text": " And so when we wanted to, tracking that can be difficult,", "tokens": [51214, 400, 370, 562, 321, 1415, 281, 11, 11603, 300, 393, 312, 2252, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 157, "seek": 61000, "start": 630.0, "end": 635.0, "text": " and we realized that we could bundle up all of these values into just arrays,", "tokens": [51364, 293, 321, 5334, 300, 321, 727, 24438, 493, 439, 295, 613, 4190, 666, 445, 41011, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 158, "seek": 61000, "start": 635.0, "end": 639.0, "text": " and we're technically only sending, in this case, I'm only sending three values,", "tokens": [51614, 293, 321, 434, 12120, 787, 7750, 11, 294, 341, 1389, 11, 286, 478, 787, 7750, 1045, 4190, 11, 51814], "temperature": 0.0, "avg_logprob": -0.06185967581612723, "compression_ratio": 1.7612456747404843, "no_speech_prob": 0.004464007448405027}, {"id": 159, "seek": 63900, "start": 639.0, "end": 642.0, "text": " even if there are 10,000 elements in each array.", "tokens": [50364, 754, 498, 456, 366, 1266, 11, 1360, 4959, 294, 1184, 10225, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 160, "seek": 63900, "start": 642.0, "end": 644.0, "text": " And so that was a way to overcome that,", "tokens": [50514, 400, 370, 300, 390, 257, 636, 281, 10473, 300, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 161, "seek": 63900, "start": 644.0, "end": 646.0, "text": " and that's one of the reasons I bring this forward.", "tokens": [50614, 293, 300, 311, 472, 295, 264, 4112, 286, 1565, 341, 2128, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 162, "seek": 63900, "start": 646.0, "end": 651.0, "text": " Now, in some cases, it can actually be faster than something like a multi-valued insert.", "tokens": [50714, 823, 11, 294, 512, 3331, 11, 309, 393, 767, 312, 4663, 813, 746, 411, 257, 4825, 12, 3337, 5827, 8969, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 163, "seek": 63900, "start": 651.0, "end": 654.0, "text": " Now, again, it depends on the tooling.", "tokens": [50964, 823, 11, 797, 11, 309, 5946, 322, 264, 46593, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 164, "seek": 63900, "start": 654.0, "end": 658.0, "text": " It turns out that even in Python, just got a new version of PsychoPG,", "tokens": [51114, 467, 4523, 484, 300, 754, 294, 15329, 11, 445, 658, 257, 777, 3037, 295, 17303, 78, 47, 38, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 165, "seek": 63900, "start": 658.0, "end": 661.0, "text": " and this one is not as fast as it was before,", "tokens": [51314, 293, 341, 472, 307, 406, 382, 2370, 382, 309, 390, 949, 11, 51464], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 166, "seek": 63900, "start": 661.0, "end": 663.0, "text": " and I'm not sure why I haven't had a chance to look at it.", "tokens": [51464, 293, 286, 478, 406, 988, 983, 286, 2378, 380, 632, 257, 2931, 281, 574, 412, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 167, "seek": 63900, "start": 663.0, "end": 665.0, "text": " This is what it might look like in Python.", "tokens": [51564, 639, 307, 437, 309, 1062, 574, 411, 294, 15329, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 168, "seek": 63900, "start": 665.0, "end": 667.0, "text": " Again, we'll show you that in just a minute.", "tokens": [51664, 3764, 11, 321, 603, 855, 291, 300, 294, 445, 257, 3456, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0728334196054252, "compression_ratio": 1.6803797468354431, "no_speech_prob": 0.0163849089294672}, {"id": 169, "seek": 66700, "start": 667.0, "end": 671.0, "text": " Probably the biggest reason to consider using something like this, depending on your ORM.", "tokens": [50364, 9210, 264, 3880, 1778, 281, 1949, 1228, 746, 411, 341, 11, 5413, 322, 428, 19654, 44, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 170, "seek": 66700, "start": 671.0, "end": 676.0, "text": " Now, again, we specifically ran into this because of an older version of a Go library", "tokens": [50564, 823, 11, 797, 11, 321, 4682, 5872, 666, 341, 570, 295, 364, 4906, 3037, 295, 257, 1037, 6405, 50814], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 171, "seek": 66700, "start": 676.0, "end": 679.0, "text": " that we were using, and we were hitting that connection limit,", "tokens": [50814, 300, 321, 645, 1228, 11, 293, 321, 645, 8850, 300, 4984, 4948, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 172, "seek": 66700, "start": 679.0, "end": 684.0, "text": " and then we found that this actually, in some cases, performed better.", "tokens": [50964, 293, 550, 321, 1352, 300, 341, 767, 11, 294, 512, 3331, 11, 10332, 1101, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 173, "seek": 66700, "start": 684.0, "end": 689.0, "text": " And so you basically take your elements, you put it into a list, again, in Python,", "tokens": [51214, 400, 370, 291, 1936, 747, 428, 4959, 11, 291, 829, 309, 666, 257, 1329, 11, 797, 11, 294, 15329, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 174, "seek": 66700, "start": 689.0, "end": 692.0, "text": " depending what your language is, your support might be slightly different,", "tokens": [51464, 5413, 437, 428, 2856, 307, 11, 428, 1406, 1062, 312, 4748, 819, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09807147979736328, "compression_ratio": 1.6859205776173285, "no_speech_prob": 0.004326158203184605}, {"id": 175, "seek": 69200, "start": 692.0, "end": 695.0, "text": " and then you can put that into your statement,", "tokens": [50364, 293, 550, 291, 393, 829, 300, 666, 428, 5629, 11, 50514], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 176, "seek": 69200, "start": 695.0, "end": 700.0, "text": " and you're essentially sending the string again, depending on what the ORM does,", "tokens": [50514, 293, 291, 434, 4476, 7750, 264, 6798, 797, 11, 5413, 322, 437, 264, 19654, 44, 775, 11, 50764], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 177, "seek": 69200, "start": 700.0, "end": 703.0, "text": " or the driver, how it sends it is independent.", "tokens": [50764, 420, 264, 6787, 11, 577, 309, 14790, 309, 307, 6695, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 178, "seek": 69200, "start": 703.0, "end": 708.0, "text": " But once it gets to the server, PostgreSQL simply unests that and goes to Tenom.", "tokens": [50914, 583, 1564, 309, 2170, 281, 264, 7154, 11, 10223, 33248, 39934, 2935, 517, 4409, 300, 293, 1709, 281, 9380, 298, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 179, "seek": 69200, "start": 708.0, "end": 711.0, "text": " It can be faster in some instances.", "tokens": [51164, 467, 393, 312, 4663, 294, 512, 14519, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 180, "seek": 69200, "start": 711.0, "end": 712.0, "text": " I'll show you in a second.", "tokens": [51314, 286, 603, 855, 291, 294, 257, 1150, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 181, "seek": 69200, "start": 712.0, "end": 714.0, "text": " It avoids the parameter limit, as I said.", "tokens": [51364, 467, 3641, 3742, 264, 13075, 4948, 11, 382, 286, 848, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 182, "seek": 69200, "start": 714.0, "end": 719.0, "text": " The one interesting thing here is that it doesn't, in this case,", "tokens": [51464, 440, 472, 1880, 551, 510, 307, 300, 309, 1177, 380, 11, 294, 341, 1389, 11, 51714], "temperature": 0.0, "avg_logprob": -0.12502582133317194, "compression_ratio": 1.66015625, "no_speech_prob": 0.04459870606660843}, {"id": 183, "seek": 71900, "start": 719.0, "end": 721.0, "text": " doesn't specifically handle custom types.", "tokens": [50364, 1177, 380, 4682, 4813, 2375, 3467, 13, 50464], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 184, "seek": 71900, "start": 721.0, "end": 726.0, "text": " So if you have a custom type, that might not work for you.", "tokens": [50464, 407, 498, 291, 362, 257, 2375, 2010, 11, 300, 1062, 406, 589, 337, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 185, "seek": 71900, "start": 726.0, "end": 729.0, "text": " The third is something that hopefully everyone here knows about.", "tokens": [50714, 440, 2636, 307, 746, 300, 4696, 1518, 510, 3255, 466, 13, 50864], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 186, "seek": 71900, "start": 729.0, "end": 730.0, "text": " It's called copy.", "tokens": [50864, 467, 311, 1219, 5055, 13, 50914], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 187, "seek": 71900, "start": 730.0, "end": 736.0, "text": " Now, copy is one of the oldest kind of long-standing commands out of Postgres.", "tokens": [50914, 823, 11, 5055, 307, 472, 295, 264, 14026, 733, 295, 938, 12, 8618, 16901, 484, 295, 10223, 45189, 13, 51214], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 188, "seek": 71900, "start": 736.0, "end": 745.0, "text": " It actually existed prior to Postgres in its prior form before what we know is Postgres today.", "tokens": [51214, 467, 767, 13135, 4059, 281, 10223, 45189, 294, 1080, 4059, 1254, 949, 437, 321, 458, 307, 10223, 45189, 965, 13, 51664], "temperature": 0.0, "avg_logprob": -0.113573242019821, "compression_ratio": 1.59375, "no_speech_prob": 0.00045804231194779277}, {"id": 189, "seek": 74500, "start": 745.0, "end": 749.0, "text": " It is the preferred and optimized tool, and it's used in any...", "tokens": [50364, 467, 307, 264, 16494, 293, 26941, 2290, 11, 293, 309, 311, 1143, 294, 604, 485, 50564], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 190, "seek": 74500, "start": 749.0, "end": 751.0, "text": " It can often use a lot of forks of Postgres.", "tokens": [50564, 467, 393, 2049, 764, 257, 688, 295, 337, 1694, 295, 10223, 45189, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 191, "seek": 74500, "start": 751.0, "end": 753.0, "text": " I know, for instance, I used to use Redshift,", "tokens": [50664, 286, 458, 11, 337, 5197, 11, 286, 1143, 281, 764, 4477, 47445, 11, 50764], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 192, "seek": 74500, "start": 753.0, "end": 757.0, "text": " and so Redshift, that's one of the primary methods for getting data into Redshift,", "tokens": [50764, 293, 370, 4477, 47445, 11, 300, 311, 472, 295, 264, 6194, 7150, 337, 1242, 1412, 666, 4477, 47445, 11, 50964], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 193, "seek": 74500, "start": 757.0, "end": 759.0, "text": " is to use copy.", "tokens": [50964, 307, 281, 764, 5055, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 194, "seek": 74500, "start": 759.0, "end": 763.0, "text": " It can read from files or to the standard input.", "tokens": [51064, 467, 393, 1401, 490, 7098, 420, 281, 264, 3832, 4846, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 195, "seek": 74500, "start": 763.0, "end": 767.0, "text": " And then the one thing you recognize here is if you are used to Postgres,", "tokens": [51264, 400, 550, 264, 472, 551, 291, 5521, 510, 307, 498, 291, 366, 1143, 281, 10223, 45189, 11, 51464], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 196, "seek": 74500, "start": 767.0, "end": 770.0, "text": " and you use PCQL, which you'll see me use in just a little bit,", "tokens": [51464, 293, 291, 764, 6465, 13695, 11, 597, 291, 603, 536, 385, 764, 294, 445, 257, 707, 857, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 197, "seek": 74500, "start": 770.0, "end": 773.0, "text": " this is not the same thing as the slash copy command.", "tokens": [51614, 341, 307, 406, 264, 912, 551, 382, 264, 17330, 5055, 5622, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12102245784306026, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.16621965169906616}, {"id": 198, "seek": 77300, "start": 773.0, "end": 778.0, "text": " So essentially, what PCQL slash copy is doing is taking a file that's...", "tokens": [50364, 407, 4476, 11, 437, 6465, 13695, 17330, 5055, 307, 884, 307, 1940, 257, 3991, 300, 311, 485, 50614], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 199, "seek": 77300, "start": 778.0, "end": 779.0, "text": " And this is the difference.", "tokens": [50614, 400, 341, 307, 264, 2649, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 200, "seek": 77300, "start": 779.0, "end": 783.0, "text": " When you say SQL copy, and I think I said it here, it's not part of the SQL standard,", "tokens": [50664, 1133, 291, 584, 19200, 5055, 11, 293, 286, 519, 286, 848, 309, 510, 11, 309, 311, 406, 644, 295, 264, 19200, 3832, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 201, "seek": 77300, "start": 783.0, "end": 785.0, "text": " so it is only Postgres.", "tokens": [50864, 370, 309, 307, 787, 10223, 45189, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 202, "seek": 77300, "start": 785.0, "end": 790.0, "text": " When you say copy, it's looking on the local server wherever that is.", "tokens": [50964, 1133, 291, 584, 5055, 11, 309, 311, 1237, 322, 264, 2654, 7154, 8660, 300, 307, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 203, "seek": 77300, "start": 790.0, "end": 794.0, "text": " So if you're using Docker, the file has to be on your Docker image.", "tokens": [51214, 407, 498, 291, 434, 1228, 33772, 11, 264, 3991, 575, 281, 312, 322, 428, 33772, 3256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 204, "seek": 77300, "start": 794.0, "end": 795.0, "text": " If you're using...", "tokens": [51414, 759, 291, 434, 1228, 485, 51464], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 205, "seek": 77300, "start": 795.0, "end": 797.0, "text": " And so that means you can't use your local one.", "tokens": [51464, 400, 370, 300, 1355, 291, 393, 380, 764, 428, 2654, 472, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 206, "seek": 77300, "start": 797.0, "end": 800.0, "text": " That's what the PCQL copy command is for.", "tokens": [51564, 663, 311, 437, 264, 6465, 13695, 5055, 5622, 307, 337, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08781009645604376, "compression_ratio": 1.705223880597015, "no_speech_prob": 0.0010481341741979122}, {"id": 207, "seek": 80000, "start": 800.0, "end": 802.0, "text": " It will allow you to use your local file,", "tokens": [50364, 467, 486, 2089, 291, 281, 764, 428, 2654, 3991, 11, 50464], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 208, "seek": 80000, "start": 802.0, "end": 806.0, "text": " and it does a stream into the standard in on the server,", "tokens": [50464, 293, 309, 775, 257, 4309, 666, 264, 3832, 294, 322, 264, 7154, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 209, "seek": 80000, "start": 806.0, "end": 808.0, "text": " and then uses copy there.", "tokens": [50664, 293, 550, 4960, 5055, 456, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 210, "seek": 80000, "start": 808.0, "end": 812.0, "text": " So they are hand-in-hand, but they're not exactly the same thing.", "tokens": [50764, 407, 436, 366, 1011, 12, 259, 12, 5543, 11, 457, 436, 434, 406, 2293, 264, 912, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 211, "seek": 80000, "start": 812.0, "end": 814.0, "text": " It does have a couple limitations, however.", "tokens": [50964, 467, 775, 362, 257, 1916, 15705, 11, 4461, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 212, "seek": 80000, "start": 814.0, "end": 816.0, "text": " So it's designed to be very fast,", "tokens": [51064, 407, 309, 311, 4761, 281, 312, 588, 2370, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 213, "seek": 80000, "start": 816.0, "end": 818.0, "text": " and it's been doing this for a long time,", "tokens": [51164, 293, 309, 311, 668, 884, 341, 337, 257, 938, 565, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 214, "seek": 80000, "start": 818.0, "end": 822.0, "text": " and it basically, the way it opens up a stream and to record the records,", "tokens": [51264, 293, 309, 1936, 11, 264, 636, 309, 9870, 493, 257, 4309, 293, 281, 2136, 264, 7724, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 215, "seek": 80000, "start": 822.0, "end": 824.0, "text": " very, very efficient.", "tokens": [51464, 588, 11, 588, 7148, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 216, "seek": 80000, "start": 824.0, "end": 828.0, "text": " It is, however, only single-threaded in a single transaction.", "tokens": [51564, 467, 307, 11, 4461, 11, 787, 2167, 12, 392, 2538, 292, 294, 257, 2167, 14425, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1036235865424661, "compression_ratio": 1.7593984962406015, "no_speech_prob": 0.0251544788479805}, {"id": 217, "seek": 82800, "start": 828.0, "end": 832.0, "text": " You can't say start multiple transactions for it, multiple threads,", "tokens": [50364, 509, 393, 380, 584, 722, 3866, 16856, 337, 309, 11, 3866, 19314, 11, 50564], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 218, "seek": 82800, "start": 832.0, "end": 834.0, "text": " and do inserts in parallel.", "tokens": [50564, 293, 360, 49163, 294, 8952, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 219, "seek": 82800, "start": 834.0, "end": 836.0, "text": " It doesn't work that way.", "tokens": [50664, 467, 1177, 380, 589, 300, 636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 220, "seek": 82800, "start": 836.0, "end": 839.0, "text": " Until Postgres 14, there is no way to see the progress.", "tokens": [50764, 9088, 10223, 45189, 3499, 11, 456, 307, 572, 636, 281, 536, 264, 4205, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 221, "seek": 82800, "start": 839.0, "end": 844.0, "text": " So if you had a 10-billion-line file that you were doing copy on,", "tokens": [50914, 407, 498, 291, 632, 257, 1266, 12, 65, 11836, 12, 1889, 3991, 300, 291, 645, 884, 5055, 322, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 222, "seek": 82800, "start": 844.0, "end": 848.0, "text": " it's had to wait and see if it's going to finish.", "tokens": [51164, 309, 311, 632, 281, 1699, 293, 536, 498, 309, 311, 516, 281, 2413, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 223, "seek": 82800, "start": 848.0, "end": 849.0, "text": " And how do I know?", "tokens": [51364, 400, 577, 360, 286, 458, 30, 51414], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 224, "seek": 82800, "start": 849.0, "end": 851.0, "text": " Because you can't see it, right?", "tokens": [51414, 1436, 291, 393, 380, 536, 309, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 225, "seek": 82800, "start": 851.0, "end": 853.0, "text": " Because it's not committed yet.", "tokens": [51514, 1436, 309, 311, 406, 7784, 1939, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 226, "seek": 82800, "start": 853.0, "end": 854.0, "text": " So how do you know the progress?", "tokens": [51614, 407, 577, 360, 291, 458, 264, 4205, 30, 51664], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 227, "seek": 82800, "start": 854.0, "end": 856.0, "text": " And so in Postgres 14 and above,", "tokens": [51664, 400, 370, 294, 10223, 45189, 3499, 293, 3673, 11, 51764], "temperature": 0.0, "avg_logprob": -0.11380439646103803, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.005724846385419369}, {"id": 228, "seek": 85600, "start": 856.0, "end": 858.0, "text": " we do now have a view.", "tokens": [50364, 321, 360, 586, 362, 257, 1910, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 229, "seek": 85600, "start": 858.0, "end": 860.0, "text": " Again, I'll show you that as part of the demo.", "tokens": [50464, 3764, 11, 286, 603, 855, 291, 300, 382, 644, 295, 264, 10723, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 230, "seek": 85600, "start": 860.0, "end": 862.0, "text": " Very helpful.", "tokens": [50564, 4372, 4961, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 231, "seek": 85600, "start": 862.0, "end": 864.0, "text": " We do have large files to know about that.", "tokens": [50664, 492, 360, 362, 2416, 7098, 281, 458, 466, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 232, "seek": 85600, "start": 864.0, "end": 866.0, "text": " Minimal format configuration?", "tokens": [50764, 2829, 10650, 7877, 11694, 30, 50864], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 233, "seek": 85600, "start": 866.0, "end": 867.0, "text": " No, there's some.", "tokens": [50864, 883, 11, 456, 311, 512, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 234, "seek": 85600, "start": 867.0, "end": 869.0, "text": " I mean, again, copy is a great tool,", "tokens": [50914, 286, 914, 11, 797, 11, 5055, 307, 257, 869, 2290, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 235, "seek": 85600, "start": 869.0, "end": 871.0, "text": " but it was designed a long time ago", "tokens": [51014, 457, 309, 390, 4761, 257, 938, 565, 2057, 51114], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 236, "seek": 85600, "start": 871.0, "end": 873.0, "text": " and has a very specific set of use cases.", "tokens": [51114, 293, 575, 257, 588, 2685, 992, 295, 764, 3331, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 237, "seek": 85600, "start": 873.0, "end": 877.0, "text": " There are some new tooling that are kind of using copy", "tokens": [51214, 821, 366, 512, 777, 46593, 300, 366, 733, 295, 1228, 5055, 51414], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 238, "seek": 85600, "start": 877.0, "end": 880.0, "text": " above putting a superset of tooling above it", "tokens": [51414, 3673, 3372, 257, 37906, 302, 295, 46593, 3673, 309, 51564], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 239, "seek": 85600, "start": 880.0, "end": 882.0, "text": " so that copy can be more efficient.", "tokens": [51564, 370, 300, 5055, 393, 312, 544, 7148, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 240, "seek": 85600, "start": 882.0, "end": 884.0, "text": " And there is no failure tolerance.", "tokens": [51664, 400, 456, 307, 572, 7763, 23368, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09481595544254079, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.010800715535879135}, {"id": 241, "seek": 88400, "start": 884.0, "end": 887.0, "text": " This is one thing that I actually didn't know until recently.", "tokens": [50364, 639, 307, 472, 551, 300, 286, 767, 994, 380, 458, 1826, 3938, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 242, "seek": 88400, "start": 887.0, "end": 891.0, "text": " When you insert data with copy, if it fails,", "tokens": [50514, 1133, 291, 8969, 1412, 365, 5055, 11, 498, 309, 18199, 11, 50714], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 243, "seek": 88400, "start": 891.0, "end": 893.0, "text": " so let's say you have a format error.", "tokens": [50714, 370, 718, 311, 584, 291, 362, 257, 7877, 6713, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 244, "seek": 88400, "start": 893.0, "end": 895.0, "text": " If you've used copy, you've surely run into this", "tokens": [50814, 759, 291, 600, 1143, 5055, 11, 291, 600, 11468, 1190, 666, 341, 50914], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 245, "seek": 88400, "start": 895.0, "end": 897.0, "text": " where you forget that you have a header line", "tokens": [50914, 689, 291, 2870, 300, 291, 362, 257, 23117, 1622, 51014], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 246, "seek": 88400, "start": 897.0, "end": 900.0, "text": " or you forget there's something part way down the file", "tokens": [51014, 420, 291, 2870, 456, 311, 746, 644, 636, 760, 264, 3991, 51164], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 247, "seek": 88400, "start": 900.0, "end": 902.0, "text": " and the format's just wrong,", "tokens": [51164, 293, 264, 7877, 311, 445, 2085, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 248, "seek": 88400, "start": 902.0, "end": 905.0, "text": " and it has actually copied maybe, you know,", "tokens": [51264, 293, 309, 575, 767, 25365, 1310, 11, 291, 458, 11, 51414], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 249, "seek": 88400, "start": 905.0, "end": 907.0, "text": " millions of lines and then errors.", "tokens": [51414, 6803, 295, 3876, 293, 550, 13603, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 250, "seek": 88400, "start": 907.0, "end": 909.0, "text": " Transaction's done, it stops,", "tokens": [51514, 6531, 2894, 311, 1096, 11, 309, 10094, 11, 51614], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 251, "seek": 88400, "start": 909.0, "end": 912.0, "text": " but under the covers, those records,", "tokens": [51614, 457, 833, 264, 10538, 11, 729, 7724, 11, 51764], "temperature": 0.0, "avg_logprob": -0.11213896824763371, "compression_ratio": 1.701818181818182, "no_speech_prob": 0.02365715429186821}, {"id": 252, "seek": 91200, "start": 912.0, "end": 915.0, "text": " they're bypassing a little bit of the typical work of Postgres.", "tokens": [50364, 436, 434, 24996, 278, 257, 707, 857, 295, 264, 7476, 589, 295, 10223, 45189, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 253, "seek": 91200, "start": 915.0, "end": 917.0, "text": " They actually are taking space in your table", "tokens": [50514, 814, 767, 366, 1940, 1901, 294, 428, 3199, 50614], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 254, "seek": 91200, "start": 917.0, "end": 918.0, "text": " until the next vacuum.", "tokens": [50614, 1826, 264, 958, 14224, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 255, "seek": 91200, "start": 918.0, "end": 920.0, "text": " They're a part of the transaction", "tokens": [50664, 814, 434, 257, 644, 295, 264, 14425, 50764], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 256, "seek": 91200, "start": 920.0, "end": 922.0, "text": " that is essentially partially complete.", "tokens": [50764, 300, 307, 4476, 18886, 3566, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 257, "seek": 91200, "start": 922.0, "end": 924.0, "text": " It actually states it's in the documentation.", "tokens": [50864, 467, 767, 4368, 309, 311, 294, 264, 14333, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 258, "seek": 91200, "start": 924.0, "end": 926.0, "text": " I think a lot of folks don't actually see that.", "tokens": [50964, 286, 519, 257, 688, 295, 4024, 500, 380, 767, 536, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 259, "seek": 91200, "start": 926.0, "end": 930.0, "text": " And so if you're doing a lot of really large file processing,", "tokens": [51064, 400, 370, 498, 291, 434, 884, 257, 688, 295, 534, 2416, 3991, 9007, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 260, "seek": 91200, "start": 930.0, "end": 932.0, "text": " this is important to know about.", "tokens": [51264, 341, 307, 1021, 281, 458, 466, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 261, "seek": 91200, "start": 932.0, "end": 936.0, "text": " If it fails, you really need to run a vacuum after the fact", "tokens": [51364, 759, 309, 18199, 11, 291, 534, 643, 281, 1190, 257, 14224, 934, 264, 1186, 51564], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 262, "seek": 91200, "start": 936.0, "end": 939.0, "text": " to make sure that those things are happening", "tokens": [51564, 281, 652, 988, 300, 729, 721, 366, 2737, 51714], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 263, "seek": 91200, "start": 939.0, "end": 941.0, "text": " more regularly in those instances.", "tokens": [51714, 544, 11672, 294, 729, 14519, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07984375779646156, "compression_ratio": 1.7508196721311475, "no_speech_prob": 0.003942956682294607}, {"id": 264, "seek": 94100, "start": 941.0, "end": 944.0, "text": " Again, the point is, it is intended to do one job,", "tokens": [50364, 3764, 11, 264, 935, 307, 11, 309, 307, 10226, 281, 360, 472, 1691, 11, 50514], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 265, "seek": 94100, "start": 944.0, "end": 947.0, "text": " two jobs, really, really well.", "tokens": [50514, 732, 4782, 11, 534, 11, 534, 731, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 266, "seek": 94100, "start": 947.0, "end": 950.0, "text": " Import data quickly and export data easily.", "tokens": [50664, 26391, 1412, 2661, 293, 10725, 1412, 3612, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 267, "seek": 94100, "start": 950.0, "end": 952.0, "text": " So you can use copy as well to get data out", "tokens": [50814, 407, 291, 393, 764, 5055, 382, 731, 281, 483, 1412, 484, 50914], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 268, "seek": 94100, "start": 952.0, "end": 955.0, "text": " into like a CSV format or something of that nature,", "tokens": [50914, 666, 411, 257, 48814, 7877, 420, 746, 295, 300, 3687, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 269, "seek": 94100, "start": 955.0, "end": 957.0, "text": " and it does it really well.", "tokens": [51064, 293, 309, 775, 309, 534, 731, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 270, "seek": 94100, "start": 957.0, "end": 961.0, "text": " There are two tools that you can use to thine know of,", "tokens": [51164, 821, 366, 732, 3873, 300, 291, 393, 764, 281, 258, 533, 458, 295, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 271, "seek": 94100, "start": 961.0, "end": 964.0, "text": " and I'm sure there are more, but I've used both of these tools.", "tokens": [51364, 293, 286, 478, 988, 456, 366, 544, 11, 457, 286, 600, 1143, 1293, 295, 613, 3873, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 272, "seek": 94100, "start": 964.0, "end": 966.0, "text": " So one is PGloader.io.", "tokens": [51514, 407, 472, 307, 40975, 2907, 260, 13, 1004, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 273, "seek": 94100, "start": 966.0, "end": 968.0, "text": " If you have never used it or don't know about it", "tokens": [51614, 759, 291, 362, 1128, 1143, 309, 420, 500, 380, 458, 466, 309, 51714], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 274, "seek": 94100, "start": 968.0, "end": 970.0, "text": " and you're doing lots of work,", "tokens": [51714, 293, 291, 434, 884, 3195, 295, 589, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10458848859880354, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.0011330675333738327}, {"id": 275, "seek": 97000, "start": 970.0, "end": 973.0, "text": " it uses copy under the covers.", "tokens": [50364, 309, 4960, 5055, 833, 264, 10538, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 276, "seek": 97000, "start": 973.0, "end": 976.0, "text": " And it's been written and written by Dmitri Fontaine,", "tokens": [50514, 400, 309, 311, 668, 3720, 293, 3720, 538, 413, 3508, 470, 43901, 7119, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 277, "seek": 97000, "start": 976.0, "end": 979.0, "text": " well-known in the Postgres community.", "tokens": [50664, 731, 12, 6861, 294, 264, 10223, 45189, 1768, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 278, "seek": 97000, "start": 979.0, "end": 983.0, "text": " It's a CLI application, and basically he designed it", "tokens": [50814, 467, 311, 257, 12855, 40, 3861, 11, 293, 1936, 415, 4761, 309, 51014], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 279, "seek": 97000, "start": 983.0, "end": 985.0, "text": " in a way that it will take your format", "tokens": [51014, 294, 257, 636, 300, 309, 486, 747, 428, 7877, 51114], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 280, "seek": 97000, "start": 985.0, "end": 987.0, "text": " and then people have contributed to this", "tokens": [51114, 293, 550, 561, 362, 18434, 281, 341, 51214], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 281, "seek": 97000, "start": 987.0, "end": 989.0, "text": " so it can actually even just do conversions.", "tokens": [51214, 370, 309, 393, 767, 754, 445, 360, 42256, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 282, "seek": 97000, "start": 989.0, "end": 992.0, "text": " So you might have a file, you might have a CSV file,", "tokens": [51314, 407, 291, 1062, 362, 257, 3991, 11, 291, 1062, 362, 257, 48814, 3991, 11, 51464], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 283, "seek": 97000, "start": 992.0, "end": 995.0, "text": " or you might have a database that is a different database,", "tokens": [51464, 420, 291, 1062, 362, 257, 8149, 300, 307, 257, 819, 8149, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 284, "seek": 97000, "start": 995.0, "end": 998.0, "text": " like SQL Server or Redshift or MySQL.", "tokens": [51614, 411, 19200, 25684, 420, 4477, 47445, 420, 1222, 39934, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12294528198242187, "compression_ratio": 1.6483516483516483, "no_speech_prob": 0.005134310107678175}, {"id": 285, "seek": 99800, "start": 998.0, "end": 1001.0, "text": " People have contributed converters", "tokens": [50364, 3432, 362, 18434, 9652, 1559, 50514], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 286, "seek": 99800, "start": 1001.0, "end": 1004.0, "text": " so that you can basically say, there's my database,", "tokens": [50514, 370, 300, 291, 393, 1936, 584, 11, 456, 311, 452, 8149, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 287, "seek": 99800, "start": 1004.0, "end": 1007.0, "text": " it will pipe through the database,", "tokens": [50664, 309, 486, 11240, 807, 264, 8149, 11, 50814], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 288, "seek": 99800, "start": 1007.0, "end": 1009.0, "text": " get the schema, create the schema,", "tokens": [50814, 483, 264, 34078, 11, 1884, 264, 34078, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 289, "seek": 99800, "start": 1009.0, "end": 1012.0, "text": " and then use copy as the background tooling", "tokens": [50914, 293, 550, 764, 5055, 382, 264, 3678, 46593, 51064], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 290, "seek": 99800, "start": 1012.0, "end": 1015.0, "text": " to make the work much more efficient.", "tokens": [51064, 281, 652, 264, 589, 709, 544, 7148, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 291, "seek": 99800, "start": 1015.0, "end": 1017.0, "text": " So it's a really interesting and neat tool,", "tokens": [51214, 407, 309, 311, 257, 534, 1880, 293, 10654, 2290, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 292, "seek": 99800, "start": 1017.0, "end": 1019.0, "text": " and then it does other stuff which is really great.", "tokens": [51314, 293, 550, 309, 775, 661, 1507, 597, 307, 534, 869, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 293, "seek": 99800, "start": 1019.0, "end": 1021.0, "text": " It does error checking.", "tokens": [51414, 467, 775, 6713, 8568, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 294, "seek": 99800, "start": 1021.0, "end": 1023.0, "text": " You can actually put rule sets in for error checking.", "tokens": [51514, 509, 393, 767, 829, 4978, 6352, 294, 337, 6713, 8568, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 295, "seek": 99800, "start": 1023.0, "end": 1026.0, "text": " It can cast data for you.", "tokens": [51614, 467, 393, 4193, 1412, 337, 291, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08927800737578294, "compression_ratio": 1.7244094488188977, "no_speech_prob": 0.0007790032541379333}, {"id": 296, "seek": 102600, "start": 1026.0, "end": 1029.0, "text": " This kind of value in MySQL", "tokens": [50364, 639, 733, 295, 2158, 294, 1222, 39934, 50514], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 297, "seek": 102600, "start": 1029.0, "end": 1031.0, "text": " does not exist in this way over here in Postgres.", "tokens": [50514, 775, 406, 2514, 294, 341, 636, 670, 510, 294, 10223, 45189, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 298, "seek": 102600, "start": 1031.0, "end": 1033.0, "text": " Here's how we like it to be cast.", "tokens": [50614, 1692, 311, 577, 321, 411, 309, 281, 312, 4193, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 299, "seek": 102600, "start": 1033.0, "end": 1035.0, "text": " So it's a really neat tool.", "tokens": [50714, 407, 309, 311, 257, 534, 10654, 2290, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 300, "seek": 102600, "start": 1035.0, "end": 1037.0, "text": " If you've never heard of it, please go check it out,", "tokens": [50814, 759, 291, 600, 1128, 2198, 295, 309, 11, 1767, 352, 1520, 309, 484, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 301, "seek": 102600, "start": 1037.0, "end": 1039.0, "text": " and there's a lot more that it can do,", "tokens": [50914, 293, 456, 311, 257, 688, 544, 300, 309, 393, 360, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 302, "seek": 102600, "start": 1039.0, "end": 1041.0, "text": " continuous migrations, things like that.", "tokens": [51014, 10957, 6186, 12154, 11, 721, 411, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 303, "seek": 102600, "start": 1041.0, "end": 1043.0, "text": " The other one is Timescale Parallel Copy.", "tokens": [51114, 440, 661, 472, 307, 11366, 37088, 3457, 336, 338, 25653, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 304, "seek": 102600, "start": 1043.0, "end": 1045.0, "text": " Now, again, I mentioned this because I used to work", "tokens": [51214, 823, 11, 797, 11, 286, 2835, 341, 570, 286, 1143, 281, 589, 51314], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 305, "seek": 102600, "start": 1045.0, "end": 1047.0, "text": " at timescales and time series database.", "tokens": [51314, 412, 1413, 66, 4229, 293, 565, 2638, 8149, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 306, "seek": 102600, "start": 1047.0, "end": 1050.0, "text": " We're used to people having millions and millions", "tokens": [51414, 492, 434, 1143, 281, 561, 1419, 6803, 293, 6803, 51564], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 307, "seek": 102600, "start": 1050.0, "end": 1053.0, "text": " and hundreds and millions and billions of rows in a file", "tokens": [51564, 293, 6779, 293, 6803, 293, 17375, 295, 13241, 294, 257, 3991, 51714], "temperature": 0.0, "avg_logprob": -0.09491741335069812, "compression_ratio": 1.6710097719869708, "no_speech_prob": 0.0015236912295222282}, {"id": 308, "seek": 105300, "start": 1053.0, "end": 1056.0, "text": " that they're trying to insert and ingest.", "tokens": [50364, 300, 436, 434, 1382, 281, 8969, 293, 3957, 377, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 309, "seek": 105300, "start": 1056.0, "end": 1058.0, "text": " And time series data is really interesting", "tokens": [50514, 400, 565, 2638, 1412, 307, 534, 1880, 50614], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 310, "seek": 105300, "start": 1058.0, "end": 1061.0, "text": " because it's typically in rough time order.", "tokens": [50614, 570, 309, 311, 5850, 294, 5903, 565, 1668, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 311, "seek": 105300, "start": 1061.0, "end": 1064.0, "text": " And so when you're doing things like partitioning,", "tokens": [50764, 400, 370, 562, 291, 434, 884, 721, 411, 24808, 278, 11, 50914], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 312, "seek": 105300, "start": 1064.0, "end": 1067.0, "text": " you could have multiple threads", "tokens": [50914, 291, 727, 362, 3866, 19314, 51064], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 313, "seek": 105300, "start": 1067.0, "end": 1070.0, "text": " essentially inserting into multiple tables", "tokens": [51064, 4476, 46567, 666, 3866, 8020, 51214], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 314, "seek": 105300, "start": 1070.0, "end": 1072.0, "text": " under the covers behind the scenes.", "tokens": [51214, 833, 264, 10538, 2261, 264, 8026, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 315, "seek": 105300, "start": 1072.0, "end": 1075.0, "text": " Again, copy itself is not multi-threaded,", "tokens": [51314, 3764, 11, 5055, 2564, 307, 406, 4825, 12, 392, 2538, 292, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 316, "seek": 105300, "start": 1075.0, "end": 1077.0, "text": " but this is another tool.", "tokens": [51464, 457, 341, 307, 1071, 2290, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 317, "seek": 105300, "start": 1077.0, "end": 1079.0, "text": " It's a Go program that can take time series data,", "tokens": [51564, 467, 311, 257, 1037, 1461, 300, 393, 747, 565, 2638, 1412, 11, 51664], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 318, "seek": 105300, "start": 1079.0, "end": 1082.0, "text": " splits it up into batches for you,", "tokens": [51664, 37741, 309, 493, 666, 15245, 279, 337, 291, 11, 51814], "temperature": 0.0, "avg_logprob": -0.06141753482003497, "compression_ratio": 1.6844106463878328, "no_speech_prob": 0.00883052684366703}, {"id": 319, "seek": 108200, "start": 1082.0, "end": 1084.0, "text": " and then will start up multiple threads", "tokens": [50364, 293, 550, 486, 722, 493, 3866, 19314, 50464], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 320, "seek": 108200, "start": 1084.0, "end": 1087.0, "text": " to do those copies in parallel.", "tokens": [50464, 281, 360, 729, 14341, 294, 8952, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 321, "seek": 108200, "start": 1087.0, "end": 1090.0, "text": " This can just be really useful on a high latency system.", "tokens": [50614, 639, 393, 445, 312, 534, 4420, 322, 257, 1090, 27043, 1185, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 322, "seek": 108200, "start": 1090.0, "end": 1093.0, "text": " So, again, when I actually first started at Timescale,", "tokens": [50764, 407, 11, 797, 11, 562, 286, 767, 700, 1409, 412, 11366, 37088, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 323, "seek": 108200, "start": 1093.0, "end": 1096.0, "text": " I was running, at first day, I was running their demo,", "tokens": [50914, 286, 390, 2614, 11, 412, 700, 786, 11, 286, 390, 2614, 641, 10723, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 324, "seek": 108200, "start": 1096.0, "end": 1098.0, "text": " and it had 10 million rows.", "tokens": [51064, 293, 309, 632, 1266, 2459, 13241, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 325, "seek": 108200, "start": 1098.0, "end": 1100.0, "text": " I live in the country.", "tokens": [51164, 286, 1621, 294, 264, 1941, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 326, "seek": 108200, "start": 1100.0, "end": 1102.0, "text": " I don't have the best internet connection in the world.", "tokens": [51264, 286, 500, 380, 362, 264, 1151, 4705, 4984, 294, 264, 1002, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 327, "seek": 108200, "start": 1102.0, "end": 1104.0, "text": " And after 20 minutes, I said,", "tokens": [51364, 400, 934, 945, 2077, 11, 286, 848, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 328, "seek": 108200, "start": 1104.0, "end": 1106.0, "text": " are we sure this thing is working correctly?", "tokens": [51464, 366, 321, 988, 341, 551, 307, 1364, 8944, 30, 51564], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 329, "seek": 108200, "start": 1106.0, "end": 1108.0, "text": " It just turns out using just a plain copy", "tokens": [51564, 467, 445, 4523, 484, 1228, 445, 257, 11121, 5055, 51664], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 330, "seek": 108200, "start": 1108.0, "end": 1111.0, "text": " over a very latent connection to a data center", "tokens": [51664, 670, 257, 588, 48994, 4984, 281, 257, 1412, 3056, 51814], "temperature": 0.0, "avg_logprob": -0.09126158926984389, "compression_ratio": 1.6633986928104576, "no_speech_prob": 0.0011684712953865528}, {"id": 331, "seek": 111100, "start": 1111.0, "end": 1113.0, "text": " on the other side of the country", "tokens": [50364, 322, 264, 661, 1252, 295, 264, 1941, 50464], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 332, "seek": 111100, "start": 1113.0, "end": 1115.0, "text": " was not terribly efficient.", "tokens": [50464, 390, 406, 22903, 7148, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 333, "seek": 111100, "start": 1115.0, "end": 1117.0, "text": " Using parallel copy, it was done in a minute, right?", "tokens": [50564, 11142, 8952, 5055, 11, 309, 390, 1096, 294, 257, 3456, 11, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 334, "seek": 111100, "start": 1117.0, "end": 1120.0, "text": " So, a lot of ways to go about it.", "tokens": [50664, 407, 11, 257, 688, 295, 2098, 281, 352, 466, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 335, "seek": 111100, "start": 1120.0, "end": 1122.0, "text": " And then the last thing to consider", "tokens": [50814, 400, 550, 264, 1036, 551, 281, 1949, 50914], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 336, "seek": 111100, "start": 1122.0, "end": 1125.0, "text": " if you're doing a lot of data insert is unlogged tables.", "tokens": [50914, 498, 291, 434, 884, 257, 688, 295, 1412, 8969, 307, 517, 4987, 3004, 8020, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 337, "seek": 111100, "start": 1125.0, "end": 1128.0, "text": " Now, again, in Postgres, a lot of people that I've run into,", "tokens": [51064, 823, 11, 797, 11, 294, 10223, 45189, 11, 257, 688, 295, 561, 300, 286, 600, 1190, 666, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 338, "seek": 111100, "start": 1128.0, "end": 1131.0, "text": " myself included, forget about this often.", "tokens": [51214, 2059, 5556, 11, 2870, 466, 341, 2049, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 339, "seek": 111100, "start": 1131.0, "end": 1133.0, "text": " But if you need to insert a lot of data", "tokens": [51364, 583, 498, 291, 643, 281, 8969, 257, 688, 295, 1412, 51464], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 340, "seek": 111100, "start": 1133.0, "end": 1136.0, "text": " and you can deal with some of the ramifications,", "tokens": [51464, 293, 291, 393, 2028, 365, 512, 295, 264, 10211, 7833, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 341, "seek": 111100, "start": 1136.0, "end": 1138.0, "text": " it's a great option for just giving you", "tokens": [51614, 309, 311, 257, 869, 3614, 337, 445, 2902, 291, 51714], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 342, "seek": 111100, "start": 1138.0, "end": 1140.0, "text": " that one other little edge.", "tokens": [51714, 300, 472, 661, 707, 4691, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07309839170273036, "compression_ratio": 1.6611295681063123, "no_speech_prob": 0.004606612958014011}, {"id": 343, "seek": 114000, "start": 1140.0, "end": 1143.0, "text": " Unlogged tables simply mean that your work", "tokens": [50364, 1156, 4987, 3004, 8020, 2935, 914, 300, 428, 589, 50514], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 344, "seek": 114000, "start": 1143.0, "end": 1146.0, "text": " is not logged to what we call the right-ahead log.", "tokens": [50514, 307, 406, 27231, 281, 437, 321, 818, 264, 558, 12, 545, 2056, 3565, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 345, "seek": 114000, "start": 1146.0, "end": 1149.0, "text": " Now, that means it's not fail-safe, right?", "tokens": [50664, 823, 11, 300, 1355, 309, 311, 406, 3061, 12, 5790, 2106, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 346, "seek": 114000, "start": 1149.0, "end": 1152.0, "text": " So, if there's a crash, that data is gone.", "tokens": [50814, 407, 11, 498, 456, 311, 257, 8252, 11, 300, 1412, 307, 2780, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 347, "seek": 114000, "start": 1152.0, "end": 1154.0, "text": " You can't recover it.", "tokens": [50964, 509, 393, 380, 8114, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 348, "seek": 114000, "start": 1154.0, "end": 1157.0, "text": " But this is really good for things like ETL jobs, right?", "tokens": [51064, 583, 341, 307, 534, 665, 337, 721, 411, 36953, 43, 4782, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 349, "seek": 114000, "start": 1157.0, "end": 1160.0, "text": " So, if you're getting lots and lots of data", "tokens": [51214, 407, 11, 498, 291, 434, 1242, 3195, 293, 3195, 295, 1412, 51364], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 350, "seek": 114000, "start": 1160.0, "end": 1162.0, "text": " that you have to process maybe every night", "tokens": [51364, 300, 291, 362, 281, 1399, 1310, 633, 1818, 51464], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 351, "seek": 114000, "start": 1162.0, "end": 1164.0, "text": " or every hour or whatever,", "tokens": [51464, 420, 633, 1773, 420, 2035, 11, 51564], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 352, "seek": 114000, "start": 1164.0, "end": 1167.0, "text": " you might find that you can get 20%, 30% improvement", "tokens": [51564, 291, 1062, 915, 300, 291, 393, 483, 945, 8923, 2217, 4, 10444, 51714], "temperature": 0.0, "avg_logprob": -0.07696842962457229, "compression_ratio": 1.5977443609022557, "no_speech_prob": 0.002395019633695483}, {"id": 353, "seek": 116700, "start": 1167.0, "end": 1170.0, "text": " in your ingest speed by using an unlogged table,", "tokens": [50364, 294, 428, 3957, 377, 3073, 538, 1228, 364, 517, 4987, 3004, 3199, 11, 50514], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 354, "seek": 116700, "start": 1170.0, "end": 1173.0, "text": " maybe even more, depending on what it is.", "tokens": [50514, 1310, 754, 544, 11, 5413, 322, 437, 309, 307, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 355, "seek": 116700, "start": 1173.0, "end": 1176.0, "text": " And if it fails, it's fine. You still have to file.", "tokens": [50664, 400, 498, 309, 18199, 11, 309, 311, 2489, 13, 509, 920, 362, 281, 3991, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 356, "seek": 116700, "start": 1176.0, "end": 1178.0, "text": " Try again, right?", "tokens": [50814, 6526, 797, 11, 558, 30, 50914], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 357, "seek": 116700, "start": 1178.0, "end": 1180.0, "text": " So, that's a really useful tool to know about.", "tokens": [50914, 407, 11, 300, 311, 257, 534, 4420, 2290, 281, 458, 466, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 358, "seek": 116700, "start": 1180.0, "end": 1183.0, "text": " You can take any table, turn it to unlogged.", "tokens": [51014, 509, 393, 747, 604, 3199, 11, 1261, 309, 281, 517, 4987, 3004, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 359, "seek": 116700, "start": 1183.0, "end": 1185.0, "text": " Obviously, you want to put it back to log when you're done,", "tokens": [51164, 7580, 11, 291, 528, 281, 829, 309, 646, 281, 3565, 562, 291, 434, 1096, 11, 51264], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 360, "seek": 116700, "start": 1185.0, "end": 1188.0, "text": " unless it's just a throwaway table of some sort.", "tokens": [51264, 5969, 309, 311, 445, 257, 3507, 10318, 3199, 295, 512, 1333, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 361, "seek": 116700, "start": 1188.0, "end": 1190.0, "text": " So, I use it again.", "tokens": [51414, 407, 11, 286, 764, 309, 797, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 362, "seek": 116700, "start": 1190.0, "end": 1192.0, "text": " It's really great for ETL processes.", "tokens": [51514, 467, 311, 534, 869, 337, 36953, 43, 7555, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 363, "seek": 116700, "start": 1192.0, "end": 1195.0, "text": " It's really good for intermittent but repeatable work, right?", "tokens": [51614, 467, 311, 534, 665, 337, 44084, 457, 7149, 712, 589, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.06861095170716981, "compression_ratio": 1.6382252559726962, "no_speech_prob": 0.0032716444693505764}, {"id": 364, "seek": 119500, "start": 1195.0, "end": 1198.0, "text": " So, again, any kind of those bash jobs you're handling,", "tokens": [50364, 407, 11, 797, 11, 604, 733, 295, 729, 46183, 4782, 291, 434, 13175, 11, 50514], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 365, "seek": 119500, "start": 1198.0, "end": 1201.0, "text": " maybe you're rerunning a data processing simulation", "tokens": [50514, 1310, 291, 434, 43819, 25589, 257, 1412, 9007, 16575, 50664], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 366, "seek": 119500, "start": 1201.0, "end": 1203.0, "text": " over and over again.", "tokens": [50664, 670, 293, 670, 797, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 367, "seek": 119500, "start": 1203.0, "end": 1206.0, "text": " It's a great way to do it because who cares if it's not in the log.", "tokens": [50764, 467, 311, 257, 869, 636, 281, 360, 309, 570, 567, 12310, 498, 309, 311, 406, 294, 264, 3565, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 368, "seek": 119500, "start": 1206.0, "end": 1208.0, "text": " And it also means your wall is not increasing", "tokens": [50914, 400, 309, 611, 1355, 428, 2929, 307, 406, 5662, 51014], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 369, "seek": 119500, "start": 1208.0, "end": 1211.0, "text": " for this stuff that you're just iterating over and over again,", "tokens": [51014, 337, 341, 1507, 300, 291, 434, 445, 17138, 990, 670, 293, 670, 797, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 370, "seek": 119500, "start": 1211.0, "end": 1213.0, "text": " which that can be helpful.", "tokens": [51164, 597, 300, 393, 312, 4961, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 371, "seek": 119500, "start": 1213.0, "end": 1215.0, "text": " I did forget to specifically say back here,", "tokens": [51264, 286, 630, 2870, 281, 4682, 584, 646, 510, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 372, "seek": 119500, "start": 1215.0, "end": 1217.0, "text": " obviously, this is not accessible.", "tokens": [51364, 2745, 11, 341, 307, 406, 9515, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 373, "seek": 119500, "start": 1217.0, "end": 1220.0, "text": " This data will not be accessible on any replication servers.", "tokens": [51464, 639, 1412, 486, 406, 312, 9515, 322, 604, 39911, 15909, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 374, "seek": 119500, "start": 1220.0, "end": 1222.0, "text": " It's not in the log.", "tokens": [51614, 467, 311, 406, 294, 264, 3565, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07726815209459903, "compression_ratio": 1.7359154929577465, "no_speech_prob": 0.0018090493977069855}, {"id": 375, "seek": 122200, "start": 1222.0, "end": 1225.0, "text": " It's the way that Postgres does replications with the wall.", "tokens": [50364, 467, 311, 264, 636, 300, 10223, 45189, 775, 3248, 24847, 365, 264, 2929, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 376, "seek": 122200, "start": 1225.0, "end": 1227.0, "text": " And so, if it isn't in there, it won't replicate.", "tokens": [50514, 400, 370, 11, 498, 309, 1943, 380, 294, 456, 11, 309, 1582, 380, 25356, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 377, "seek": 122200, "start": 1227.0, "end": 1230.0, "text": " Again, that might actually be really beneficial", "tokens": [50614, 3764, 11, 300, 1062, 767, 312, 534, 14072, 50764], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 378, "seek": 122200, "start": 1230.0, "end": 1234.0, "text": " for that kind of transactional data that you're doing.", "tokens": [50764, 337, 300, 733, 295, 46688, 1966, 1412, 300, 291, 434, 884, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 379, "seek": 122200, "start": 1234.0, "end": 1236.0, "text": " All right.", "tokens": [50964, 1057, 558, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 380, "seek": 122200, "start": 1236.0, "end": 1239.0, "text": " I'll pause there to quickly first see if you have any questions", "tokens": [51064, 286, 603, 10465, 456, 281, 2661, 700, 536, 498, 291, 362, 604, 1651, 51214], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 381, "seek": 122200, "start": 1239.0, "end": 1241.0, "text": " and then I'm going to flip over to demos.", "tokens": [51214, 293, 550, 286, 478, 516, 281, 7929, 670, 281, 33788, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 382, "seek": 122200, "start": 1241.0, "end": 1243.0, "text": " Any questions? Yes, one in the back.", "tokens": [51314, 2639, 1651, 30, 1079, 11, 472, 294, 264, 646, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 383, "seek": 122200, "start": 1243.0, "end": 1246.0, "text": " And I can shout it out.", "tokens": [51414, 400, 286, 393, 8043, 309, 484, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 384, "seek": 122200, "start": 1246.0, "end": 1250.0, "text": " Can you turn on the log with just one question?", "tokens": [51564, 1664, 291, 1261, 322, 264, 3565, 365, 445, 472, 1168, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1841534659976051, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.0029792317654937506}, {"id": 385, "seek": 125000, "start": 1250.0, "end": 1254.0, "text": " That's a great question that I'm going to say probably yes", "tokens": [50364, 663, 311, 257, 869, 1168, 300, 286, 478, 516, 281, 584, 1391, 2086, 50564], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 386, "seek": 125000, "start": 1254.0, "end": 1257.0, "text": " because it's just a table technically under the covers.", "tokens": [50564, 570, 309, 311, 445, 257, 3199, 12120, 833, 264, 10538, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 387, "seek": 125000, "start": 1257.0, "end": 1260.0, "text": " And I'm getting a nod from down here, too.", "tokens": [50714, 400, 286, 478, 1242, 257, 15224, 490, 760, 510, 11, 886, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 388, "seek": 125000, "start": 1260.0, "end": 1262.0, "text": " So good. Good question.", "tokens": [50864, 407, 665, 13, 2205, 1168, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 389, "seek": 125000, "start": 1262.0, "end": 1264.0, "text": " Oh, yes. I apologize. I meant to repeat the question.", "tokens": [50964, 876, 11, 2086, 13, 286, 12328, 13, 286, 4140, 281, 7149, 264, 1168, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 390, "seek": 125000, "start": 1264.0, "end": 1267.0, "text": " I didn't. The question was, can you set a partition", "tokens": [51064, 286, 994, 380, 13, 440, 1168, 390, 11, 393, 291, 992, 257, 24808, 51214], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 391, "seek": 125000, "start": 1267.0, "end": 1270.0, "text": " to unlock one table in the partition?", "tokens": [51214, 281, 11634, 472, 3199, 294, 264, 24808, 30, 51364], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 392, "seek": 125000, "start": 1270.0, "end": 1272.0, "text": " And so the answer there would be yes,", "tokens": [51364, 400, 370, 264, 1867, 456, 576, 312, 2086, 11, 51464], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 393, "seek": 125000, "start": 1272.0, "end": 1274.0, "text": " because again, the way that we do partitioning is there.", "tokens": [51464, 570, 797, 11, 264, 636, 300, 321, 360, 24808, 278, 307, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 394, "seek": 125000, "start": 1274.0, "end": 1276.0, "text": " Technically, there are no tables.", "tokens": [51564, 42494, 11, 456, 366, 572, 8020, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 395, "seek": 125000, "start": 1276.0, "end": 1278.0, "text": " We're going to talk about that in a minute.", "tokens": [51664, 492, 434, 516, 281, 751, 466, 300, 294, 257, 3456, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12134032553814827, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.0027474386151880026}, {"id": 396, "seek": 127800, "start": 1278.0, "end": 1282.0, "text": " One thing I want to say, that slowness in PsychoPG3", "tokens": [50364, 1485, 551, 286, 528, 281, 584, 11, 300, 1061, 648, 442, 294, 17303, 78, 47, 38, 18, 50564], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 397, "seek": 127800, "start": 1282.0, "end": 1284.0, "text": " was fixed in December.", "tokens": [50564, 390, 6806, 294, 7687, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 398, "seek": 127800, "start": 1284.0, "end": 1288.0, "text": " So now, possibly, it should be as fast as PsychoPG2.", "tokens": [50664, 407, 586, 11, 6264, 11, 309, 820, 312, 382, 2370, 382, 17303, 78, 47, 38, 17, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 399, "seek": 127800, "start": 1288.0, "end": 1292.0, "text": " And I want to ask you if you also have tested", "tokens": [50864, 400, 286, 528, 281, 1029, 291, 498, 291, 611, 362, 8246, 51064], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 400, "seek": 127800, "start": 1292.0, "end": 1294.0, "text": " the new copy support in PsychoPG3,", "tokens": [51064, 264, 777, 5055, 1406, 294, 17303, 78, 47, 38, 18, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 401, "seek": 127800, "start": 1294.0, "end": 1297.0, "text": " where there is direct copy from Python objects", "tokens": [51164, 689, 456, 307, 2047, 5055, 490, 15329, 6565, 51314], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 402, "seek": 127800, "start": 1297.0, "end": 1299.0, "text": " to the copy protocol.", "tokens": [51314, 281, 264, 5055, 10336, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 403, "seek": 127800, "start": 1299.0, "end": 1302.0, "text": " So it's a great question. I'm going to show you a little bit of Python.", "tokens": [51414, 407, 309, 311, 257, 869, 1168, 13, 286, 478, 516, 281, 855, 291, 257, 707, 857, 295, 15329, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 404, "seek": 127800, "start": 1302.0, "end": 1304.0, "text": " And so at the end, I actually was going to talk about that.", "tokens": [51564, 400, 370, 412, 264, 917, 11, 286, 767, 390, 516, 281, 751, 466, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 405, "seek": 127800, "start": 1304.0, "end": 1306.0, "text": " I've been starting to play with PsychoPG3.", "tokens": [51664, 286, 600, 668, 2891, 281, 862, 365, 17303, 78, 47, 38, 18, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1231122450395064, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.019978174939751625}, {"id": 406, "seek": 130600, "start": 1306.0, "end": 1309.0, "text": " The demo, I actually converted to three.", "tokens": [50364, 440, 10723, 11, 286, 767, 16424, 281, 1045, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 407, "seek": 130600, "start": 1309.0, "end": 1312.0, "text": " And there's one or two things that it can't do, that two could.", "tokens": [50514, 400, 456, 311, 472, 420, 732, 721, 300, 309, 393, 380, 360, 11, 300, 732, 727, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 408, "seek": 130600, "start": 1312.0, "end": 1314.0, "text": " I wanted to demo that.", "tokens": [50664, 286, 1415, 281, 10723, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 409, "seek": 130600, "start": 1314.0, "end": 1318.0, "text": " But yeah, I will talk briefly about a couple of those situations.", "tokens": [50764, 583, 1338, 11, 286, 486, 751, 10515, 466, 257, 1916, 295, 729, 6851, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 410, "seek": 130600, "start": 1318.0, "end": 1321.0, "text": " Okay. I peed to have a chat about that because I wrote it.", "tokens": [50964, 1033, 13, 286, 520, 292, 281, 362, 257, 5081, 466, 300, 570, 286, 4114, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 411, "seek": 130600, "start": 1321.0, "end": 1324.0, "text": " You look familiar, so I was assuming that was the case.", "tokens": [51114, 509, 574, 4963, 11, 370, 286, 390, 11926, 300, 390, 264, 1389, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 412, "seek": 130600, "start": 1324.0, "end": 1326.0, "text": " Thank you.", "tokens": [51264, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 413, "seek": 130600, "start": 1326.0, "end": 1328.0, "text": " All right, so let me just show you what we're going to do.", "tokens": [51364, 1057, 558, 11, 370, 718, 385, 445, 855, 291, 437, 321, 434, 516, 281, 360, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 414, "seek": 130600, "start": 1328.0, "end": 1331.0, "text": " I have a couple of different tables, two different demos.", "tokens": [51464, 286, 362, 257, 1916, 295, 819, 8020, 11, 732, 819, 33788, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 415, "seek": 130600, "start": 1331.0, "end": 1335.0, "text": " So I'm going to first show you all of this in SQL.", "tokens": [51614, 407, 286, 478, 516, 281, 700, 855, 291, 439, 295, 341, 294, 19200, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12870780514999175, "compression_ratio": 1.6909722222222223, "no_speech_prob": 0.009093375876545906}, {"id": 416, "seek": 133500, "start": 1335.0, "end": 1338.0, "text": " This is not necessarily how you would do it day to day.", "tokens": [50364, 639, 307, 406, 4725, 577, 291, 576, 360, 309, 786, 281, 786, 13, 50514], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 417, "seek": 133500, "start": 1338.0, "end": 1342.0, "text": " You're probably not in most of your SQL jobs concatenating strings", "tokens": [50514, 509, 434, 1391, 406, 294, 881, 295, 428, 19200, 4782, 1588, 7186, 990, 13985, 50714], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 418, "seek": 133500, "start": 1342.0, "end": 1345.0, "text": " and then using that to insert into another table.", "tokens": [50714, 293, 550, 1228, 300, 281, 8969, 666, 1071, 3199, 13, 50864], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 419, "seek": 133500, "start": 1345.0, "end": 1347.0, "text": " This is all being contained within one database.", "tokens": [50864, 639, 307, 439, 885, 16212, 1951, 472, 8149, 13, 50964], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 420, "seek": 133500, "start": 1347.0, "end": 1351.0, "text": " It's truly just for demo purposes to try and show you one or two examples", "tokens": [50964, 467, 311, 4908, 445, 337, 10723, 9932, 281, 853, 293, 855, 291, 472, 420, 732, 5110, 51164], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 421, "seek": 133500, "start": 1351.0, "end": 1353.0, "text": " of how some of this can help and work.", "tokens": [51164, 295, 577, 512, 295, 341, 393, 854, 293, 589, 13, 51264], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 422, "seek": 133500, "start": 1353.0, "end": 1356.0, "text": " I'm not going to show you the row by row insert", "tokens": [51264, 286, 478, 406, 516, 281, 855, 291, 264, 5386, 538, 5386, 8969, 51414], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 423, "seek": 133500, "start": 1356.0, "end": 1358.0, "text": " because honestly it takes about two minutes,", "tokens": [51414, 570, 6095, 309, 2516, 466, 732, 2077, 11, 51514], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 424, "seek": 133500, "start": 1358.0, "end": 1360.0, "text": " and this is not worth it for me to be really frank.", "tokens": [51514, 293, 341, 307, 406, 3163, 309, 337, 385, 281, 312, 534, 10455, 13, 51614], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 425, "seek": 133500, "start": 1360.0, "end": 1362.0, "text": " I didn't feel like sitting here.", "tokens": [51614, 286, 994, 380, 841, 411, 3798, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 426, "seek": 133500, "start": 1362.0, "end": 1364.0, "text": " Here's what the sample data looks like.", "tokens": [51714, 1692, 311, 437, 264, 6889, 1412, 1542, 411, 13, 51814], "temperature": 0.0, "avg_logprob": -0.059613025351746445, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004003626760095358}, {"id": 427, "seek": 136400, "start": 1364.0, "end": 1365.0, "text": " I have a script.", "tokens": [50364, 286, 362, 257, 5755, 13, 50414], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 428, "seek": 136400, "start": 1365.0, "end": 1368.0, "text": " It is in the demo repo that creates some tables,", "tokens": [50414, 467, 307, 294, 264, 10723, 49040, 300, 7829, 512, 8020, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 429, "seek": 136400, "start": 1368.0, "end": 1372.0, "text": " a table with a bunch of data columns, different data types.", "tokens": [50564, 257, 3199, 365, 257, 3840, 295, 1412, 13766, 11, 819, 1412, 3467, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 430, "seek": 136400, "start": 1372.0, "end": 1375.0, "text": " I just have a couple of functions I wrote to create random data,", "tokens": [50764, 286, 445, 362, 257, 1916, 295, 6828, 286, 4114, 281, 1884, 4974, 1412, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 431, "seek": 136400, "start": 1375.0, "end": 1379.0, "text": " both numbers and text, so that I just get different sizes,", "tokens": [50914, 1293, 3547, 293, 2487, 11, 370, 300, 286, 445, 483, 819, 11602, 11, 51114], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 432, "seek": 136400, "start": 1379.0, "end": 1382.0, "text": " and then I just inserted just over a million rows.", "tokens": [51114, 293, 550, 286, 445, 27992, 445, 670, 257, 2459, 13241, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 433, "seek": 136400, "start": 1382.0, "end": 1385.0, "text": " I could have done 10 million, but I didn't want to make everyone sit here.", "tokens": [51264, 286, 727, 362, 1096, 1266, 2459, 11, 457, 286, 994, 380, 528, 281, 652, 1518, 1394, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 434, "seek": 136400, "start": 1385.0, "end": 1388.0, "text": " Are these exponential?", "tokens": [51414, 2014, 613, 21510, 30, 51564], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 435, "seek": 136400, "start": 1388.0, "end": 1389.0, "text": " Yes and no.", "tokens": [51564, 1079, 293, 572, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 436, "seek": 136400, "start": 1389.0, "end": 1391.0, "text": " It depends on data types and a bunch of other factors,", "tokens": [51614, 467, 5946, 322, 1412, 3467, 293, 257, 3840, 295, 661, 6771, 11, 51714], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 437, "seek": 136400, "start": 1391.0, "end": 1393.0, "text": " which we're going to see in just a minute.", "tokens": [51714, 597, 321, 434, 516, 281, 536, 294, 445, 257, 3456, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08892229625156947, "compression_ratio": 1.7220338983050847, "no_speech_prob": 0.0031702870037406683}, {"id": 438, "seek": 139300, "start": 1393.0, "end": 1394.0, "text": " I created that data.", "tokens": [50364, 286, 2942, 300, 1412, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 439, "seek": 139300, "start": 1394.0, "end": 1396.0, "text": " It is sitting in one table,", "tokens": [50414, 467, 307, 3798, 294, 472, 3199, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 440, "seek": 139300, "start": 1396.0, "end": 1398.0, "text": " and I'm simply going to do a couple of these things", "tokens": [50514, 293, 286, 478, 2935, 516, 281, 360, 257, 1916, 295, 613, 721, 50614], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 441, "seek": 139300, "start": 1398.0, "end": 1401.0, "text": " by taking it and copying it into another table beside it.", "tokens": [50614, 538, 1940, 309, 293, 27976, 309, 666, 1071, 3199, 15726, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 442, "seek": 139300, "start": 1401.0, "end": 1403.0, "text": " Every time I'll truncate it,", "tokens": [50764, 2048, 565, 286, 603, 504, 409, 66, 473, 309, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 443, "seek": 139300, "start": 1403.0, "end": 1406.0, "text": " and then we'll see what happens from there.", "tokens": [50864, 293, 550, 321, 603, 536, 437, 2314, 490, 456, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 444, "seek": 139300, "start": 1406.0, "end": 1413.0, "text": " Like I said, I think there are just over a million rows of data here.", "tokens": [51014, 1743, 286, 848, 11, 286, 519, 456, 366, 445, 670, 257, 2459, 13241, 295, 1412, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 445, "seek": 139300, "start": 1413.0, "end": 1416.0, "text": " The first one, as I said, is basically taking,", "tokens": [51364, 440, 700, 472, 11, 382, 286, 848, 11, 307, 1936, 1940, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 446, "seek": 139300, "start": 1416.0, "end": 1420.0, "text": " and I'm going to pull this down here.", "tokens": [51514, 293, 286, 478, 516, 281, 2235, 341, 760, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09115963811459749, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0011688978411257267}, {"id": 447, "seek": 142000, "start": 1420.0, "end": 1422.0, "text": " Is that readable by everyone?", "tokens": [50364, 1119, 300, 49857, 538, 1518, 30, 50464], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 448, "seek": 142000, "start": 1422.0, "end": 1424.0, "text": " Make it a little bit bigger?", "tokens": [50464, 4387, 309, 257, 707, 857, 3801, 30, 50564], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 449, "seek": 142000, "start": 1424.0, "end": 1425.0, "text": " Do that.", "tokens": [50564, 1144, 300, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 450, "seek": 142000, "start": 1425.0, "end": 1426.0, "text": " Same process.", "tokens": [50614, 10635, 1399, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 451, "seek": 142000, "start": 1426.0, "end": 1428.0, "text": " Start with an insert statement.", "tokens": [50664, 6481, 365, 364, 8969, 5629, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 452, "seek": 142000, "start": 1428.0, "end": 1431.0, "text": " I'm simply concatenating that string to some point.", "tokens": [50764, 286, 478, 2935, 1588, 7186, 990, 300, 6798, 281, 512, 935, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 453, "seek": 142000, "start": 1431.0, "end": 1437.0, "text": " In this case, I believe it is 500,", "tokens": [50914, 682, 341, 1389, 11, 286, 1697, 309, 307, 5923, 11, 51214], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 454, "seek": 142000, "start": 1437.0, "end": 1439.0, "text": " and I was playing this last night,", "tokens": [51214, 293, 286, 390, 2433, 341, 1036, 1818, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 455, "seek": 142000, "start": 1439.0, "end": 1442.0, "text": " so now I actually don't know if it really is 500 or not.", "tokens": [51314, 370, 586, 286, 767, 500, 380, 458, 498, 309, 534, 307, 5923, 420, 406, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 456, "seek": 142000, "start": 1442.0, "end": 1445.0, "text": " Basically, every 500 or every thousand,", "tokens": [51464, 8537, 11, 633, 5923, 420, 633, 4714, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 457, "seek": 142000, "start": 1445.0, "end": 1447.0, "text": " I'm simply going to then execute that statement,", "tokens": [51614, 286, 478, 2935, 516, 281, 550, 14483, 300, 5629, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10420645986284528, "compression_ratio": 1.6144067796610169, "no_speech_prob": 0.0010638629319146276}, {"id": 458, "seek": 144700, "start": 1447.0, "end": 1451.0, "text": " so we have a string with lots of data.", "tokens": [50364, 370, 321, 362, 257, 6798, 365, 3195, 295, 1412, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 459, "seek": 144700, "start": 1451.0, "end": 1457.0, "text": " This takes a few seconds.", "tokens": [50564, 639, 2516, 257, 1326, 3949, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 460, "seek": 144700, "start": 1457.0, "end": 1459.0, "text": " It is running.", "tokens": [50864, 467, 307, 2614, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 461, "seek": 144700, "start": 1459.0, "end": 1461.0, "text": " Then you'll see I have two things here.", "tokens": [50964, 1396, 291, 603, 536, 286, 362, 732, 721, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 462, "seek": 144700, "start": 1461.0, "end": 1463.0, "text": " I basically timed the creation of the string,", "tokens": [51064, 286, 1936, 44696, 264, 8016, 295, 264, 6798, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 463, "seek": 144700, "start": 1463.0, "end": 1468.0, "text": " and I timed the actual execution.", "tokens": [51164, 293, 286, 44696, 264, 3539, 15058, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 464, "seek": 144700, "start": 1468.0, "end": 1471.0, "text": " The string itself took about three seconds.", "tokens": [51414, 440, 6798, 2564, 1890, 466, 1045, 3949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 465, "seek": 144700, "start": 1471.0, "end": 1474.0, "text": " This is the one thing I could not get the beaver today to make that bigger,", "tokens": [51564, 639, 307, 264, 472, 551, 286, 727, 406, 483, 264, 312, 20655, 965, 281, 652, 300, 3801, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11544451183742947, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.0007908863481134176}, {"id": 466, "seek": 147400, "start": 1474.0, "end": 1475.0, "text": " so I apologize.", "tokens": [50364, 370, 286, 12328, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 467, "seek": 147400, "start": 1475.0, "end": 1476.0, "text": " I will read it for you.", "tokens": [50414, 286, 486, 1401, 309, 337, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 468, "seek": 147400, "start": 1476.0, "end": 1479.0, "text": " The string generation took about three seconds,", "tokens": [50464, 440, 6798, 5125, 1890, 466, 1045, 3949, 11, 50614], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 469, "seek": 147400, "start": 1479.0, "end": 1481.0, "text": " and the actual execution into the database", "tokens": [50614, 293, 264, 3539, 15058, 666, 264, 8149, 50714], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 470, "seek": 147400, "start": 1481.0, "end": 1483.0, "text": " was just shy of eight seconds.", "tokens": [50714, 390, 445, 12685, 295, 3180, 3949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 471, "seek": 147400, "start": 1483.0, "end": 1486.0, "text": " That was a million rows, one database table,", "tokens": [50814, 663, 390, 257, 2459, 13241, 11, 472, 8149, 3199, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 472, "seek": 147400, "start": 1486.0, "end": 1491.0, "text": " to another database table using multi-valued insert statements.", "tokens": [50964, 281, 1071, 8149, 3199, 1228, 4825, 12, 3337, 5827, 8969, 12363, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 473, "seek": 147400, "start": 1491.0, "end": 1494.0, "text": " Now I'm going to take the same,", "tokens": [51214, 823, 286, 478, 516, 281, 747, 264, 912, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 474, "seek": 147400, "start": 1494.0, "end": 1497.0, "text": " and we're going to do that array trick.", "tokens": [51364, 293, 321, 434, 516, 281, 360, 300, 10225, 4282, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 475, "seek": 147400, "start": 1497.0, "end": 1499.0, "text": " I'm basically taking data from table one.", "tokens": [51514, 286, 478, 1936, 1940, 1412, 490, 3199, 472, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 476, "seek": 147400, "start": 1499.0, "end": 1502.0, "text": " I'm aggregating each of those columns", "tokens": [51614, 286, 478, 16743, 990, 1184, 295, 729, 13766, 51764], "temperature": 0.0, "avg_logprob": -0.09611444058625594, "compression_ratio": 1.66798418972332, "no_speech_prob": 0.0016478445613756776}, {"id": 477, "seek": 150200, "start": 1503.0, "end": 1506.0, "text": " into just aggregating the whole table", "tokens": [50414, 666, 445, 16743, 990, 264, 1379, 3199, 50564], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 478, "seek": 150200, "start": 1506.0, "end": 1509.0, "text": " with an offset.", "tokens": [50564, 365, 364, 18687, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 479, "seek": 150200, "start": 1509.0, "end": 1511.0, "text": " I'm basically doing 10,000 at a time.", "tokens": [50714, 286, 478, 1936, 884, 1266, 11, 1360, 412, 257, 565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 480, "seek": 150200, "start": 1511.0, "end": 1513.0, "text": " You can play with different numbers.", "tokens": [50814, 509, 393, 862, 365, 819, 3547, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 481, "seek": 150200, "start": 1513.0, "end": 1514.0, "text": " You can take results.", "tokens": [50914, 509, 393, 747, 3542, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 482, "seek": 150200, "start": 1514.0, "end": 1516.0, "text": " I'm basically taking 10,000 numbers of column one,", "tokens": [50964, 286, 478, 1936, 1940, 1266, 11, 1360, 3547, 295, 7738, 472, 11, 51064], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 483, "seek": 150200, "start": 1516.0, "end": 1518.0, "text": " 10,000 numbers of column two, and so forth,", "tokens": [51064, 1266, 11, 1360, 3547, 295, 7738, 732, 11, 293, 370, 5220, 11, 51164], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 484, "seek": 150200, "start": 1518.0, "end": 1520.0, "text": " into an aggregated value.", "tokens": [51164, 666, 364, 16743, 770, 2158, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 485, "seek": 150200, "start": 1520.0, "end": 1522.0, "text": " Now, because it's being done in Postgres,", "tokens": [51264, 823, 11, 570, 309, 311, 885, 1096, 294, 10223, 45189, 11, 51364], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 486, "seek": 150200, "start": 1522.0, "end": 1524.0, "text": " you'll see that this is actually kind of interesting", "tokens": [51364, 291, 603, 536, 300, 341, 307, 767, 733, 295, 1880, 51464], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 487, "seek": 150200, "start": 1524.0, "end": 1526.0, "text": " in how this works.", "tokens": [51464, 294, 577, 341, 1985, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 488, "seek": 150200, "start": 1526.0, "end": 1530.0, "text": " You don't necessarily get the exact same thing.", "tokens": [51564, 509, 500, 380, 4725, 483, 264, 1900, 912, 551, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 489, "seek": 150200, "start": 1530.0, "end": 1531.0, "text": " It is running.", "tokens": [51764, 467, 307, 2614, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12546100038470645, "compression_ratio": 1.7164750957854407, "no_speech_prob": 0.002549271797761321}, {"id": 490, "seek": 153100, "start": 1531.0, "end": 1534.0, "text": " Again, I tend to use dbeaver in demos", "tokens": [50364, 3764, 11, 286, 3928, 281, 764, 274, 650, 20655, 294, 33788, 50514], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 491, "seek": 153100, "start": 1534.0, "end": 1537.0, "text": " because it's just easier for me to color code some things", "tokens": [50514, 570, 309, 311, 445, 3571, 337, 385, 281, 2017, 3089, 512, 721, 50664], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 492, "seek": 153100, "start": 1537.0, "end": 1539.0, "text": " and walk through comments and so forth.", "tokens": [50664, 293, 1792, 807, 3053, 293, 370, 5220, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 493, "seek": 153100, "start": 1539.0, "end": 1541.0, "text": " That's just why I do it this way.", "tokens": [50764, 663, 311, 445, 983, 286, 360, 309, 341, 636, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 494, "seek": 153100, "start": 1541.0, "end": 1544.0, "text": " This takes just shy of 30 seconds,", "tokens": [50864, 639, 2516, 445, 12685, 295, 2217, 3949, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 495, "seek": 153100, "start": 1544.0, "end": 1545.0, "text": " maybe actually a little bit less than that,", "tokens": [51014, 1310, 767, 257, 707, 857, 1570, 813, 300, 11, 51064], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 496, "seek": 153100, "start": 1545.0, "end": 1548.0, "text": " depending on how the image wants to perform today.", "tokens": [51064, 5413, 322, 577, 264, 3256, 2738, 281, 2042, 965, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 497, "seek": 153100, "start": 1548.0, "end": 1550.0, "text": " The really interesting thing you'll see here", "tokens": [51214, 440, 534, 1880, 551, 291, 603, 536, 510, 51314], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 498, "seek": 153100, "start": 1550.0, "end": 1555.0, "text": " is that the, and again, I'll read the values out for you,", "tokens": [51314, 307, 300, 264, 11, 293, 797, 11, 286, 603, 1401, 264, 4190, 484, 337, 291, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 499, "seek": 153100, "start": 1555.0, "end": 1559.0, "text": " but the string took about 24 and a half seconds to generate,", "tokens": [51564, 457, 264, 6798, 1890, 466, 4022, 293, 257, 1922, 3949, 281, 8460, 11, 51764], "temperature": 0.0, "avg_logprob": -0.11695946670892671, "compression_ratio": 1.6654676258992807, "no_speech_prob": 0.00040422414895147085}, {"id": 500, "seek": 155900, "start": 1559.0, "end": 1562.0, "text": " so it went a million rows, 10,000 in time,", "tokens": [50364, 370, 309, 1437, 257, 2459, 13241, 11, 1266, 11, 1360, 294, 565, 11, 50514], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 501, "seek": 155900, "start": 1562.0, "end": 1567.0, "text": " I don't know, maybe 400 iterations it went through.", "tokens": [50514, 286, 500, 380, 458, 11, 1310, 8423, 36540, 309, 1437, 807, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 502, "seek": 155900, "start": 1567.0, "end": 1570.0, "text": " I'm not sure my math is close to 500, but anyway.", "tokens": [50764, 286, 478, 406, 988, 452, 5221, 307, 1998, 281, 5923, 11, 457, 4033, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 503, "seek": 155900, "start": 1570.0, "end": 1576.0, "text": " And so the string generation took almost 25 seconds,", "tokens": [50914, 400, 370, 264, 6798, 5125, 1890, 1920, 3552, 3949, 11, 51214], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 504, "seek": 155900, "start": 1576.0, "end": 1579.0, "text": " but the actual execution of all of those individual statements", "tokens": [51214, 457, 264, 3539, 15058, 295, 439, 295, 729, 2609, 12363, 51364], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 505, "seek": 155900, "start": 1579.0, "end": 1581.0, "text": " took 1.5 seconds.", "tokens": [51364, 1890, 502, 13, 20, 3949, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 506, "seek": 155900, "start": 1581.0, "end": 1584.0, "text": " Now again, it's inside of Postgres.", "tokens": [51464, 823, 797, 11, 309, 311, 1854, 295, 10223, 45189, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 507, "seek": 155900, "start": 1584.0, "end": 1587.0, "text": " It has access to where each of those things are.", "tokens": [51614, 467, 575, 2105, 281, 689, 1184, 295, 729, 721, 366, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10512008116795467, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.0007666221354156733}, {"id": 508, "seek": 158700, "start": 1587.0, "end": 1590.0, "text": " It is a lot more performant in Postgres,", "tokens": [50364, 467, 307, 257, 688, 544, 2042, 394, 294, 10223, 45189, 11, 50514], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 509, "seek": 158700, "start": 1590.0, "end": 1594.0, "text": " but it's interesting because there might be some things", "tokens": [50514, 457, 309, 311, 1880, 570, 456, 1062, 312, 512, 721, 50714], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 510, "seek": 158700, "start": 1594.0, "end": 1597.0, "text": " you're doing even internally in some of your processes,", "tokens": [50714, 291, 434, 884, 754, 19501, 294, 512, 295, 428, 7555, 11, 50864], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 511, "seek": 158700, "start": 1597.0, "end": 1599.0, "text": " functions, store procedures.", "tokens": [50864, 6828, 11, 3531, 13846, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 512, "seek": 158700, "start": 1599.0, "end": 1601.0, "text": " Might be worth something to try.", "tokens": [50964, 23964, 312, 3163, 746, 281, 853, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 513, "seek": 158700, "start": 1601.0, "end": 1602.0, "text": " Now it's complex.", "tokens": [51064, 823, 309, 311, 3997, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 514, "seek": 158700, "start": 1602.0, "end": 1607.0, "text": " This is not the most really exciting way to write a procedure", "tokens": [51114, 639, 307, 406, 264, 881, 534, 4670, 636, 281, 2464, 257, 10747, 51364], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 515, "seek": 158700, "start": 1607.0, "end": 1609.0, "text": " and create all of these values", "tokens": [51364, 293, 1884, 439, 295, 613, 4190, 51464], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 516, "seek": 158700, "start": 1609.0, "end": 1611.0, "text": " and make sure they get populated and so forth,", "tokens": [51464, 293, 652, 988, 436, 483, 32998, 293, 370, 5220, 11, 51564], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 517, "seek": 158700, "start": 1611.0, "end": 1613.0, "text": " but it's interesting nonetheless.", "tokens": [51564, 457, 309, 311, 1880, 26756, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10454964410691034, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0031209932640194893}, {"id": 518, "seek": 161300, "start": 1613.0, "end": 1618.0, "text": " We thought it helped us mostly because of the parameter limit", "tokens": [50364, 492, 1194, 309, 4254, 505, 5240, 570, 295, 264, 13075, 4948, 50614], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 519, "seek": 161300, "start": 1618.0, "end": 1620.0, "text": " thing we were finding with the Go package.", "tokens": [50614, 551, 321, 645, 5006, 365, 264, 1037, 7372, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 520, "seek": 161300, "start": 1620.0, "end": 1625.0, "text": " Again, that is older, but we also found some neat things like this", "tokens": [50714, 3764, 11, 300, 307, 4906, 11, 457, 321, 611, 1352, 512, 10654, 721, 411, 341, 50964], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 521, "seek": 161300, "start": 1625.0, "end": 1628.0, "text": " that in some cases it could actually work more effectively.", "tokens": [50964, 300, 294, 512, 3331, 309, 727, 767, 589, 544, 8659, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 522, "seek": 161300, "start": 1628.0, "end": 1630.0, "text": " So then I took that same data.", "tokens": [51114, 407, 550, 286, 1890, 300, 912, 1412, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 523, "seek": 161300, "start": 1630.0, "end": 1632.0, "text": " Now again, I'm currently using a Docker image.", "tokens": [51214, 823, 797, 11, 286, 478, 4362, 1228, 257, 33772, 3256, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 524, "seek": 161300, "start": 1632.0, "end": 1634.0, "text": " It's just a generic Postgres Docker image.", "tokens": [51314, 467, 311, 445, 257, 19577, 10223, 45189, 33772, 3256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 525, "seek": 161300, "start": 1634.0, "end": 1636.0, "text": " Just kind of spun it up.", "tokens": [51414, 1449, 733, 295, 37038, 309, 493, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 526, "seek": 161300, "start": 1636.0, "end": 1637.0, "text": " There's nothing special configuration.", "tokens": [51514, 821, 311, 1825, 2121, 11694, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 527, "seek": 161300, "start": 1637.0, "end": 1639.0, "text": " I didn't try to give it more RAM.", "tokens": [51564, 286, 994, 380, 853, 281, 976, 309, 544, 14561, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 528, "seek": 161300, "start": 1639.0, "end": 1641.0, "text": " I could have made this a lot more performant, but I chose not to.", "tokens": [51664, 286, 727, 362, 1027, 341, 257, 688, 544, 2042, 394, 11, 457, 286, 5111, 406, 281, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09749709616462104, "compression_ratio": 1.6175548589341693, "no_speech_prob": 0.005551431328058243}, {"id": 529, "seek": 164100, "start": 1641.0, "end": 1646.0, "text": " I simply then copied it out so that this file is on the Docker image", "tokens": [50364, 286, 2935, 550, 25365, 309, 484, 370, 300, 341, 3991, 307, 322, 264, 33772, 3256, 50614], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 530, "seek": 164100, "start": 1646.0, "end": 1650.0, "text": " server because remember copy is local to the Postgres server.", "tokens": [50614, 7154, 570, 1604, 5055, 307, 2654, 281, 264, 10223, 45189, 7154, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 531, "seek": 164100, "start": 1650.0, "end": 1654.0, "text": " So I took those 10 million rows and it's a lot more,", "tokens": [50814, 407, 286, 1890, 729, 1266, 2459, 13241, 293, 309, 311, 257, 688, 544, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 532, "seek": 164100, "start": 1654.0, "end": 1656.0, "text": " a lot easier to do this, right?", "tokens": [51014, 257, 688, 3571, 281, 360, 341, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 533, "seek": 164100, "start": 1656.0, "end": 1657.0, "text": " We have the copy command.", "tokens": [51114, 492, 362, 264, 5055, 5622, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 534, "seek": 164100, "start": 1657.0, "end": 1659.0, "text": " It generated the CSV file.", "tokens": [51164, 467, 10833, 264, 48814, 3991, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 535, "seek": 164100, "start": 1659.0, "end": 1663.0, "text": " You could provide the other parameters here if you needed to,", "tokens": [51264, 509, 727, 2893, 264, 661, 9834, 510, 498, 291, 2978, 281, 11, 51464], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 536, "seek": 164100, "start": 1663.0, "end": 1670.0, "text": " but you'll see that it ends up being overall significantly", "tokens": [51464, 457, 291, 603, 536, 300, 309, 5314, 493, 885, 4787, 10591, 51814], "temperature": 0.0, "avg_logprob": -0.11876097003233085, "compression_ratio": 1.5254901960784313, "no_speech_prob": 0.004067697562277317}, {"id": 537, "seek": 167000, "start": 1670.0, "end": 1671.0, "text": " faster.", "tokens": [50364, 4663, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 538, "seek": 167000, "start": 1671.0, "end": 1675.0, "text": " So by far the fastest in total time here just to generate and work,", "tokens": [50414, 407, 538, 1400, 264, 14573, 294, 3217, 565, 510, 445, 281, 8460, 293, 589, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 539, "seek": 167000, "start": 1675.0, "end": 1676.0, "text": " right?", "tokens": [50614, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 540, "seek": 167000, "start": 1676.0, "end": 1680.0, "text": " So we took a million line file, imported it in under two seconds", "tokens": [50664, 407, 321, 1890, 257, 2459, 1622, 3991, 11, 25524, 309, 294, 833, 732, 3949, 50864], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 541, "seek": 167000, "start": 1680.0, "end": 1681.0, "text": " with copy.", "tokens": [50864, 365, 5055, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 542, "seek": 167000, "start": 1681.0, "end": 1684.0, "text": " So it's a great option if you don't know about it.", "tokens": [50914, 407, 309, 311, 257, 869, 3614, 498, 291, 500, 380, 458, 466, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 543, "seek": 167000, "start": 1684.0, "end": 1686.0, "text": " Now, the other thing that shows unlogged.", "tokens": [51064, 823, 11, 264, 661, 551, 300, 3110, 517, 4987, 3004, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 544, "seek": 167000, "start": 1686.0, "end": 1689.0, "text": " So the question was, I'm going to use copy just because it's quick", "tokens": [51164, 407, 264, 1168, 390, 11, 286, 478, 516, 281, 764, 5055, 445, 570, 309, 311, 1702, 51314], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 545, "seek": 167000, "start": 1689.0, "end": 1691.0, "text": " and we have a time limit in the demo.", "tokens": [51314, 293, 321, 362, 257, 565, 4948, 294, 264, 10723, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 546, "seek": 167000, "start": 1691.0, "end": 1695.0, "text": " And so I'm going to set this table bulk test to unlogged,", "tokens": [51414, 400, 370, 286, 478, 516, 281, 992, 341, 3199, 16139, 1500, 281, 517, 4987, 3004, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 547, "seek": 167000, "start": 1695.0, "end": 1696.0, "text": " all right?", "tokens": [51614, 439, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 548, "seek": 167000, "start": 1696.0, "end": 1698.0, "text": " And I'm going to go ahead and do that copy again.", "tokens": [51664, 400, 286, 478, 516, 281, 352, 2286, 293, 360, 300, 5055, 797, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1126117574757543, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.010317030362784863}, {"id": 549, "seek": 169800, "start": 1698.0, "end": 1702.0, "text": " So it was 1.7 seconds or so to ingest that.", "tokens": [50364, 407, 309, 390, 502, 13, 22, 3949, 420, 370, 281, 3957, 377, 300, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 550, "seek": 169800, "start": 1702.0, "end": 1706.0, "text": " Again, I truncate it at the beginning.", "tokens": [50564, 3764, 11, 286, 504, 409, 66, 473, 309, 412, 264, 2863, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 551, "seek": 169800, "start": 1706.0, "end": 1713.0, "text": " And you'll see that it ends up taking 1.3.", "tokens": [50764, 400, 291, 603, 536, 300, 309, 5314, 493, 1940, 502, 13, 18, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 552, "seek": 169800, "start": 1713.0, "end": 1716.0, "text": " So, you know, it can be depending, right?", "tokens": [51114, 407, 11, 291, 458, 11, 309, 393, 312, 5413, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 553, "seek": 169800, "start": 1716.0, "end": 1718.0, "text": " That was, someone do the math for me really quickly.", "tokens": [51264, 663, 390, 11, 1580, 360, 264, 5221, 337, 385, 534, 2661, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 554, "seek": 169800, "start": 1718.0, "end": 1720.0, "text": " What is about 10 or 15 percent?", "tokens": [51364, 708, 307, 466, 1266, 420, 2119, 3043, 30, 51464], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 555, "seek": 169800, "start": 1720.0, "end": 1724.0, "text": " Sometimes it can be larger depending on the kind of table it is,", "tokens": [51464, 4803, 309, 393, 312, 4833, 5413, 322, 264, 733, 295, 3199, 309, 307, 11, 51664], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 556, "seek": 169800, "start": 1724.0, "end": 1727.0, "text": " the data you're ingesting, and then some other things we'll talk", "tokens": [51664, 264, 1412, 291, 434, 3957, 8714, 11, 293, 550, 512, 661, 721, 321, 603, 751, 51814], "temperature": 0.0, "avg_logprob": -0.11700224472304523, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.0018090426456183195}, {"id": 557, "seek": 172700, "start": 1727.0, "end": 1729.0, "text": " about in just a minute, all right?", "tokens": [50364, 466, 294, 445, 257, 3456, 11, 439, 558, 30, 50464], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 558, "seek": 172700, "start": 1729.0, "end": 1733.0, "text": " So it's easiest to show that in SQL because it's quick", "tokens": [50464, 407, 309, 311, 12889, 281, 855, 300, 294, 19200, 570, 309, 311, 1702, 50664], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 559, "seek": 172700, "start": 1733.0, "end": 1735.0, "text": " and easy to iterate on.", "tokens": [50664, 293, 1858, 281, 44497, 322, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 560, "seek": 172700, "start": 1735.0, "end": 1737.0, "text": " Again, the scripts themselves are in the repo,", "tokens": [50764, 3764, 11, 264, 23294, 2969, 366, 294, 264, 49040, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 561, "seek": 172700, "start": 1737.0, "end": 1738.0, "text": " which I'll show at the end.", "tokens": [50864, 597, 286, 603, 855, 412, 264, 917, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 562, "seek": 172700, "start": 1738.0, "end": 1740.0, "text": " What about in Python?", "tokens": [50914, 708, 466, 294, 15329, 30, 51014], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 563, "seek": 172700, "start": 1740.0, "end": 1744.0, "text": " And so, yes, there's a new version of Psycho PG.", "tokens": [51014, 400, 370, 11, 2086, 11, 456, 311, 257, 777, 3037, 295, 17303, 78, 40975, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 564, "seek": 172700, "start": 1744.0, "end": 1747.0, "text": " So this demo was originally created about two years ago.", "tokens": [51214, 407, 341, 10723, 390, 7993, 2942, 466, 732, 924, 2057, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 565, "seek": 172700, "start": 1747.0, "end": 1749.0, "text": " I've iterated on it over time.", "tokens": [51364, 286, 600, 17138, 770, 322, 309, 670, 565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 566, "seek": 172700, "start": 1749.0, "end": 1752.0, "text": " And so what I did, I actually have,", "tokens": [51464, 400, 370, 437, 286, 630, 11, 286, 767, 362, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 567, "seek": 172700, "start": 1752.0, "end": 1754.0, "text": " and I think I actually have it up here.", "tokens": [51614, 293, 286, 519, 286, 767, 362, 309, 493, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08446178436279297, "compression_ratio": 1.6145038167938932, "no_speech_prob": 0.005055357702076435}, {"id": 568, "seek": 175400, "start": 1754.0, "end": 1756.0, "text": " So I did actually convert many of these,", "tokens": [50364, 407, 286, 630, 767, 7620, 867, 295, 613, 11, 50464], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 569, "seek": 175400, "start": 1756.0, "end": 1760.0, "text": " or all of this, to Psycho PG 3.", "tokens": [50464, 420, 439, 295, 341, 11, 281, 17303, 78, 40975, 805, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 570, "seek": 175400, "start": 1760.0, "end": 1762.0, "text": " It doesn't matter what the language is, right?", "tokens": [50664, 467, 1177, 380, 1871, 437, 264, 2856, 307, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 571, "seek": 175400, "start": 1762.0, "end": 1765.0, "text": " A lot of these principles are going to pertain,", "tokens": [50764, 316, 688, 295, 613, 9156, 366, 516, 281, 13269, 491, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 572, "seek": 175400, "start": 1765.0, "end": 1766.0, "text": " regardless what the language is.", "tokens": [50914, 10060, 437, 264, 2856, 307, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 573, "seek": 175400, "start": 1766.0, "end": 1770.0, "text": " I happen to be using Python and Psycho PG.", "tokens": [50964, 286, 1051, 281, 312, 1228, 15329, 293, 17303, 78, 40975, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 574, "seek": 175400, "start": 1770.0, "end": 1772.0, "text": " Earlier, Pavle was talking about ORMs.", "tokens": [51164, 24552, 11, 39062, 306, 390, 1417, 466, 19654, 26386, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 575, "seek": 175400, "start": 1772.0, "end": 1774.0, "text": " Now, again, at the very end,", "tokens": [51264, 823, 11, 797, 11, 412, 264, 588, 917, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 576, "seek": 175400, "start": 1774.0, "end": 1777.0, "text": " I'm going to mention one or two things to look at for ORMs.", "tokens": [51364, 286, 478, 516, 281, 2152, 472, 420, 732, 721, 281, 574, 412, 337, 19654, 26386, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 577, "seek": 175400, "start": 1777.0, "end": 1778.0, "text": " Psycho PG is not an ORM.", "tokens": [51514, 17303, 78, 40975, 307, 406, 364, 19654, 44, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 578, "seek": 175400, "start": 1778.0, "end": 1781.0, "text": " It's just, it's a driver, right, to help us do this work.", "tokens": [51564, 467, 311, 445, 11, 309, 311, 257, 6787, 11, 558, 11, 281, 854, 505, 360, 341, 589, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09482621160046807, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.000816246320027858}, {"id": 579, "seek": 178100, "start": 1781.0, "end": 1783.0, "text": " But there are components of what your driver", "tokens": [50364, 583, 456, 366, 6677, 295, 437, 428, 6787, 50464], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 580, "seek": 178100, "start": 1783.0, "end": 1785.0, "text": " or your ORM might do for you,", "tokens": [50464, 420, 428, 19654, 44, 1062, 360, 337, 291, 11, 50564], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 581, "seek": 178100, "start": 1785.0, "end": 1787.0, "text": " which is also valuable to think about.", "tokens": [50564, 597, 307, 611, 8263, 281, 519, 466, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 582, "seek": 178100, "start": 1787.0, "end": 1790.0, "text": " That's the reason I'm using Psycho PG 2, honestly.", "tokens": [50664, 663, 311, 264, 1778, 286, 478, 1228, 17303, 78, 40975, 568, 11, 6095, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 583, "seek": 178100, "start": 1790.0, "end": 1793.0, "text": " It turns out that, yes, Psycho PG 3 got much faster,", "tokens": [50814, 467, 4523, 484, 300, 11, 2086, 11, 17303, 78, 40975, 805, 658, 709, 4663, 11, 50964], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 584, "seek": 178100, "start": 1793.0, "end": 1796.0, "text": " even with the individual inserts.", "tokens": [50964, 754, 365, 264, 2609, 49163, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 585, "seek": 178100, "start": 1796.0, "end": 1798.0, "text": " Just by the way it's doing,", "tokens": [51114, 1449, 538, 264, 636, 309, 311, 884, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 586, "seek": 178100, "start": 1798.0, "end": 1800.0, "text": " it's specifically because of a new feature", "tokens": [51214, 309, 311, 4682, 570, 295, 257, 777, 4111, 51314], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 587, "seek": 178100, "start": 1800.0, "end": 1805.0, "text": " in Postgres 14 and above in Lib PG.", "tokens": [51314, 294, 10223, 45189, 3499, 293, 3673, 294, 15834, 40975, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0931180828022507, "compression_ratio": 1.4672131147540983, "no_speech_prob": 0.0028400695882737637}, {"id": 588, "seek": 180500, "start": 1805.0, "end": 1810.0, "text": " So it allows us to do...", "tokens": [50364, 407, 309, 4045, 505, 281, 360, 485, 50614], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 589, "seek": 180500, "start": 1810.0, "end": 1814.0, "text": " The word is all of a sudden escaping me.", "tokens": [50614, 440, 1349, 307, 439, 295, 257, 3990, 32554, 385, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 590, "seek": 180500, "start": 1814.0, "end": 1816.0, "text": " I think I have a pipeline. Thank you.", "tokens": [50814, 286, 519, 286, 362, 257, 15517, 13, 1044, 291, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 591, "seek": 180500, "start": 1816.0, "end": 1818.0, "text": " The pipeline feature in Postgres 14 and above.", "tokens": [50914, 440, 15517, 4111, 294, 10223, 45189, 3499, 293, 3673, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 592, "seek": 180500, "start": 1818.0, "end": 1820.0, "text": " And so with that, particularly,", "tokens": [51014, 400, 370, 365, 300, 11, 4098, 11, 51114], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 593, "seek": 180500, "start": 1820.0, "end": 1823.0, "text": " we do get better performance in some of these things.", "tokens": [51114, 321, 360, 483, 1101, 3389, 294, 512, 295, 613, 721, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 594, "seek": 180500, "start": 1823.0, "end": 1825.0, "text": " I think the question becomes, again,", "tokens": [51264, 286, 519, 264, 1168, 3643, 11, 797, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 595, "seek": 180500, "start": 1825.0, "end": 1829.0, "text": " if you have control, if you can get a better payload,", "tokens": [51364, 498, 291, 362, 1969, 11, 498, 291, 393, 483, 257, 1101, 30918, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 596, "seek": 180500, "start": 1829.0, "end": 1832.0, "text": " a bigger payload over to Postgres and let it do its work,", "tokens": [51564, 257, 3801, 30918, 670, 281, 10223, 45189, 293, 718, 309, 360, 1080, 589, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 597, "seek": 180500, "start": 1832.0, "end": 1834.0, "text": " depending on the architecture of your system,", "tokens": [51714, 5413, 322, 264, 9482, 295, 428, 1185, 11, 51814], "temperature": 0.0, "avg_logprob": -0.11178984642028808, "compression_ratio": 1.664092664092664, "no_speech_prob": 0.037799935787916183}, {"id": 598, "seek": 183400, "start": 1834.0, "end": 1836.0, "text": " you still benefit from some of these principles.", "tokens": [50364, 291, 920, 5121, 490, 512, 295, 613, 9156, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 599, "seek": 183400, "start": 1836.0, "end": 1839.0, "text": " So I did the single insert before we started.", "tokens": [50464, 407, 286, 630, 264, 2167, 8969, 949, 321, 1409, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 600, "seek": 183400, "start": 1839.0, "end": 1842.0, "text": " So I simply took, again, this is using Psycho PG 2,", "tokens": [50614, 407, 286, 2935, 1890, 11, 797, 11, 341, 307, 1228, 17303, 78, 40975, 568, 11, 50764], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 601, "seek": 183400, "start": 1842.0, "end": 1844.0, "text": " and I can't speak for the language", "tokens": [50764, 293, 286, 393, 380, 1710, 337, 264, 2856, 50864], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 602, "seek": 183400, "start": 1844.0, "end": 1846.0, "text": " because I haven't specifically done it,", "tokens": [50864, 570, 286, 2378, 380, 4682, 1096, 309, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 603, "seek": 183400, "start": 1846.0, "end": 1848.0, "text": " and this is not even about Psycho PG.", "tokens": [50964, 293, 341, 307, 406, 754, 466, 17303, 78, 40975, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 604, "seek": 183400, "start": 1848.0, "end": 1851.0, "text": " This is just about simply getting something into the server.", "tokens": [51064, 639, 307, 445, 466, 2935, 1242, 746, 666, 264, 7154, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 605, "seek": 183400, "start": 1851.0, "end": 1853.0, "text": " If I iterate that file,", "tokens": [51214, 759, 286, 44497, 300, 3991, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 606, "seek": 183400, "start": 1853.0, "end": 1855.0, "text": " this is... I meant to show you that too.", "tokens": [51314, 341, 307, 485, 286, 4140, 281, 855, 291, 300, 886, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 607, "seek": 183400, "start": 1855.0, "end": 1857.0, "text": " This is a slightly different file,", "tokens": [51414, 639, 307, 257, 4748, 819, 3991, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 608, "seek": 183400, "start": 1857.0, "end": 1861.0, "text": " and the reason is I didn't feel like doing 10 or 12 columns.", "tokens": [51514, 293, 264, 1778, 307, 286, 994, 380, 841, 411, 884, 1266, 420, 2272, 13766, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 609, "seek": 183400, "start": 1861.0, "end": 1863.0, "text": " I just wanted to demo the options.", "tokens": [51714, 286, 445, 1415, 281, 10723, 264, 3956, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07962689797083537, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.019655879586935043}, {"id": 610, "seek": 186300, "start": 1863.0, "end": 1865.0, "text": " It's a much simpler file,", "tokens": [50364, 467, 311, 257, 709, 18587, 3991, 11, 50464], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 611, "seek": 186300, "start": 1865.0, "end": 1867.0, "text": " a little bit less than a million rows.", "tokens": [50464, 257, 707, 857, 1570, 813, 257, 2459, 13241, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 612, "seek": 186300, "start": 1867.0, "end": 1869.0, "text": " And so I did the single insert previously,", "tokens": [50564, 400, 370, 286, 630, 264, 2167, 8969, 8046, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 613, "seek": 186300, "start": 1869.0, "end": 1876.0, "text": " and you'll see that it took 180 seconds to do 750,000 lines,", "tokens": [50664, 293, 291, 603, 536, 300, 309, 1890, 11971, 3949, 281, 360, 31682, 11, 1360, 3876, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 614, "seek": 186300, "start": 1876.0, "end": 1879.0, "text": " and it's only three columns, and there's no indexes.", "tokens": [51014, 293, 309, 311, 787, 1045, 13766, 11, 293, 456, 311, 572, 8186, 279, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 615, "seek": 186300, "start": 1879.0, "end": 1880.0, "text": " So there's a lot of work, right?", "tokens": [51164, 407, 456, 311, 257, 688, 295, 589, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 616, "seek": 186300, "start": 1880.0, "end": 1882.0, "text": " Just going and iterating back and forth and back and forth.", "tokens": [51214, 1449, 516, 293, 17138, 990, 646, 293, 5220, 293, 646, 293, 5220, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 617, "seek": 186300, "start": 1882.0, "end": 1884.0, "text": " We see that often.", "tokens": [51314, 492, 536, 300, 2049, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 618, "seek": 186300, "start": 1884.0, "end": 1887.0, "text": " So if you were doing that kind of work in your application,", "tokens": [51414, 407, 498, 291, 645, 884, 300, 733, 295, 589, 294, 428, 3861, 11, 51564], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 619, "seek": 186300, "start": 1887.0, "end": 1890.0, "text": " seriously considered doing something different, like...", "tokens": [51564, 6638, 4888, 884, 746, 819, 11, 411, 485, 51714], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 620, "seek": 186300, "start": 1890.0, "end": 1892.0, "text": " So the way this file is set up at the very bottom,", "tokens": [51714, 407, 264, 636, 341, 3991, 307, 992, 493, 412, 264, 588, 2767, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10213529302718792, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0008036443032324314}, {"id": 621, "seek": 189200, "start": 1892.0, "end": 1894.0, "text": " I have each of these functions,", "tokens": [50364, 286, 362, 1184, 295, 613, 6828, 11, 50464], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 622, "seek": 189200, "start": 1894.0, "end": 1897.0, "text": " and so I'm simply going to comment out the single insert.", "tokens": [50464, 293, 370, 286, 478, 2935, 516, 281, 2871, 484, 264, 2167, 8969, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 623, "seek": 189200, "start": 1897.0, "end": 1899.0, "text": " Now I'm simply going to do the multi-valued.", "tokens": [50614, 823, 286, 478, 2935, 516, 281, 360, 264, 4825, 12, 3337, 5827, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 624, "seek": 189200, "start": 1899.0, "end": 1901.0, "text": " I did exactly as shown in the slide.", "tokens": [50714, 286, 630, 2293, 382, 4898, 294, 264, 4137, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 625, "seek": 189200, "start": 1901.0, "end": 1904.0, "text": " I took that single insert, simply wrapped it in a batch.", "tokens": [50814, 286, 1890, 300, 2167, 8969, 11, 2935, 14226, 309, 294, 257, 15245, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 626, "seek": 189200, "start": 1904.0, "end": 1909.0, "text": " After so many iterations of pending that string, send that.", "tokens": [50964, 2381, 370, 867, 36540, 295, 32110, 300, 6798, 11, 2845, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 627, "seek": 189200, "start": 1909.0, "end": 1912.0, "text": " And when you do that,", "tokens": [51214, 400, 562, 291, 360, 300, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 628, "seek": 189200, "start": 1912.0, "end": 1915.0, "text": " you'll see that it ends up being significantly faster,", "tokens": [51364, 291, 603, 536, 300, 309, 5314, 493, 885, 10591, 4663, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 629, "seek": 189200, "start": 1915.0, "end": 1918.0, "text": " and it's really simply to show the value", "tokens": [51514, 293, 309, 311, 534, 2935, 281, 855, 264, 2158, 51664], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 630, "seek": 189200, "start": 1918.0, "end": 1921.0, "text": " of doing a very minimal amount of work, all right?", "tokens": [51664, 295, 884, 257, 588, 13206, 2372, 295, 589, 11, 439, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.09424763026199942, "compression_ratio": 1.718045112781955, "no_speech_prob": 0.004196547903120518}, {"id": 631, "seek": 192100, "start": 1921.0, "end": 1924.0, "text": " In six seconds, right?", "tokens": [50364, 682, 2309, 3949, 11, 558, 30, 50514], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 632, "seek": 192100, "start": 1924.0, "end": 1929.0, "text": " So one line at a time, many lines at a time.", "tokens": [50514, 407, 472, 1622, 412, 257, 565, 11, 867, 3876, 412, 257, 565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 633, "seek": 192100, "start": 1929.0, "end": 1933.0, "text": " I think there's maybe 5,000 parentheses after that, right?", "tokens": [50764, 286, 519, 456, 311, 1310, 1025, 11, 1360, 34153, 934, 300, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 634, "seek": 192100, "start": 1933.0, "end": 1938.0, "text": " So it really can make a big, big difference.", "tokens": [50964, 407, 309, 534, 393, 652, 257, 955, 11, 955, 2649, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 635, "seek": 192100, "start": 1938.0, "end": 1940.0, "text": " I did then want to try the...", "tokens": [51214, 286, 630, 550, 528, 281, 853, 264, 485, 51314], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 636, "seek": 192100, "start": 1940.0, "end": 1943.0, "text": " So this is what I wanted to show,", "tokens": [51314, 407, 341, 307, 437, 286, 1415, 281, 855, 11, 51464], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 637, "seek": 192100, "start": 1943.0, "end": 1946.0, "text": " and we can talk about later because I don't know the reasoning,", "tokens": [51464, 293, 321, 393, 751, 466, 1780, 570, 286, 500, 380, 458, 264, 21577, 11, 51614], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 638, "seek": 192100, "start": 1946.0, "end": 1947.0, "text": " and it's fine.", "tokens": [51614, 293, 309, 311, 2489, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 639, "seek": 192100, "start": 1947.0, "end": 1949.0, "text": " I just... I did not realize that in previous versions", "tokens": [51664, 286, 445, 485, 286, 630, 406, 4325, 300, 294, 3894, 9606, 51764], "temperature": 0.0, "avg_logprob": -0.11335821409483214, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.001646866905502975}, {"id": 640, "seek": 194900, "start": 1949.0, "end": 1951.0, "text": " of this specific tool, and again,", "tokens": [50364, 295, 341, 2685, 2290, 11, 293, 797, 11, 50464], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 641, "seek": 194900, "start": 1951.0, "end": 1953.0, "text": " I know other tools have something similar.", "tokens": [50464, 286, 458, 661, 3873, 362, 746, 2531, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 642, "seek": 194900, "start": 1953.0, "end": 1955.0, "text": " There are some functions called exact values,", "tokens": [50564, 821, 366, 512, 6828, 1219, 1900, 4190, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 643, "seek": 194900, "start": 1955.0, "end": 1957.0, "text": " is the one I'm using here.", "tokens": [50664, 307, 264, 472, 286, 478, 1228, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 644, "seek": 194900, "start": 1957.0, "end": 1959.0, "text": " What that essentially did for you is did the batching for you.", "tokens": [50764, 708, 300, 4476, 630, 337, 291, 307, 630, 264, 15245, 278, 337, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 645, "seek": 194900, "start": 1959.0, "end": 1961.0, "text": " And so I just had to do a little bit less work,", "tokens": [50864, 400, 370, 286, 445, 632, 281, 360, 257, 707, 857, 1570, 589, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 646, "seek": 194900, "start": 1961.0, "end": 1963.0, "text": " and that's the only reason I had...", "tokens": [50964, 293, 300, 311, 264, 787, 1778, 286, 632, 485, 51064], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 647, "seek": 194900, "start": 1963.0, "end": 1966.0, "text": " I stuck with this to show you that your tool may have something similar", "tokens": [51064, 286, 5541, 365, 341, 281, 855, 291, 300, 428, 2290, 815, 362, 746, 2531, 51214], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 648, "seek": 194900, "start": 1966.0, "end": 1969.0, "text": " if it can't take advantage of some of the other features", "tokens": [51214, 498, 309, 393, 380, 747, 5002, 295, 512, 295, 264, 661, 4122, 51364], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 649, "seek": 194900, "start": 1969.0, "end": 1971.0, "text": " that Postgres and others are now providing", "tokens": [51364, 300, 10223, 45189, 293, 2357, 366, 586, 6530, 51464], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 650, "seek": 194900, "start": 1971.0, "end": 1974.0, "text": " to do some of the pipelining and things like that.", "tokens": [51464, 281, 360, 512, 295, 264, 8489, 338, 1760, 293, 721, 411, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 651, "seek": 194900, "start": 1974.0, "end": 1977.0, "text": " So just to recognize it, this simply does the same thing.", "tokens": [51614, 407, 445, 281, 5521, 309, 11, 341, 2935, 775, 264, 912, 551, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08839628913185814, "compression_ratio": 1.7753846153846153, "no_speech_prob": 0.00940435566008091}, {"id": 652, "seek": 197700, "start": 1977.0, "end": 1979.0, "text": " It's a multi-valued insert.", "tokens": [50364, 467, 311, 257, 4825, 12, 3337, 5827, 8969, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 653, "seek": 197700, "start": 1979.0, "end": 1982.0, "text": " It's simply helping you do that batch rather than you having to write it.", "tokens": [50464, 467, 311, 2935, 4315, 291, 360, 300, 15245, 2831, 813, 291, 1419, 281, 2464, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 654, "seek": 197700, "start": 1982.0, "end": 1985.0, "text": " So it's a really convenient method for doing so.", "tokens": [50614, 407, 309, 311, 257, 534, 10851, 3170, 337, 884, 370, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 655, "seek": 197700, "start": 1985.0, "end": 1989.0, "text": " Now the arrays turn out to be pretty easy in something like Python.", "tokens": [50764, 823, 264, 41011, 1261, 484, 281, 312, 1238, 1858, 294, 746, 411, 15329, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 656, "seek": 197700, "start": 1989.0, "end": 1992.0, "text": " And again, most other languages now, I have that batch.", "tokens": [50964, 400, 797, 11, 881, 661, 8650, 586, 11, 286, 362, 300, 15245, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 657, "seek": 197700, "start": 1992.0, "end": 1995.0, "text": " I have a file, I'm reading it in, I'm creating a list out of it,", "tokens": [51114, 286, 362, 257, 3991, 11, 286, 478, 3760, 309, 294, 11, 286, 478, 4084, 257, 1329, 484, 295, 309, 11, 51264], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 658, "seek": 197700, "start": 1995.0, "end": 1999.0, "text": " and then I'm sending slices of that list over and over again.", "tokens": [51264, 293, 550, 286, 478, 7750, 19793, 295, 300, 1329, 670, 293, 670, 797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 659, "seek": 197700, "start": 1999.0, "end": 2002.0, "text": " And when I do that, you'll see that it has really similar performance.", "tokens": [51464, 400, 562, 286, 360, 300, 11, 291, 603, 536, 300, 309, 575, 534, 2531, 3389, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08847208241469988, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.005637953523546457}, {"id": 660, "seek": 200200, "start": 2002.0, "end": 2009.0, "text": " And this is where, specifically because of improvements in PsychoPG,", "tokens": [50364, 400, 341, 307, 689, 11, 4682, 570, 295, 13797, 294, 17303, 78, 47, 38, 11, 50714], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 661, "seek": 200200, "start": 2009.0, "end": 2016.0, "text": " in this case, this actually ends up not being any faster in PsychoPG 3 and above.", "tokens": [50714, 294, 341, 1389, 11, 341, 767, 5314, 493, 406, 885, 604, 4663, 294, 17303, 78, 47, 38, 805, 293, 3673, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 662, "seek": 200200, "start": 2016.0, "end": 2019.0, "text": " So I wouldn't necessarily benefit from this application,", "tokens": [51064, 407, 286, 2759, 380, 4725, 5121, 490, 341, 3861, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 663, "seek": 200200, "start": 2019.0, "end": 2024.0, "text": " especially if I didn't need to worry about the number of parameters, right?", "tokens": [51214, 2318, 498, 286, 994, 380, 643, 281, 3292, 466, 264, 1230, 295, 9834, 11, 558, 30, 51464], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 664, "seek": 200200, "start": 2024.0, "end": 2027.0, "text": " So again, one of the reasons for this could be a parameter issue", "tokens": [51464, 407, 797, 11, 472, 295, 264, 4112, 337, 341, 727, 312, 257, 13075, 2734, 51614], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 665, "seek": 200200, "start": 2027.0, "end": 2030.0, "text": " if you wanted to have many, many things you're sending in.", "tokens": [51614, 498, 291, 1415, 281, 362, 867, 11, 867, 721, 291, 434, 7750, 294, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0901792783003587, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.035611748695373535}, {"id": 666, "seek": 203000, "start": 2030.0, "end": 2034.0, "text": " And the last but not least, and that's why I bring it, is to talk about copy.", "tokens": [50364, 400, 264, 1036, 457, 406, 1935, 11, 293, 300, 311, 983, 286, 1565, 309, 11, 307, 281, 751, 466, 5055, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 667, "seek": 203000, "start": 2034.0, "end": 2036.0, "text": " So if you're a tool, so I appreciate it Pablo.", "tokens": [50564, 407, 498, 291, 434, 257, 2290, 11, 370, 286, 4449, 309, 31554, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 668, "seek": 203000, "start": 2036.0, "end": 2038.0, "text": " You shared earlier that in Go, right?", "tokens": [50664, 509, 5507, 3071, 300, 294, 1037, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 669, "seek": 203000, "start": 2038.0, "end": 2043.0, "text": " The ability to use copy, it is a framework that, you know,", "tokens": [50764, 440, 3485, 281, 764, 5055, 11, 309, 307, 257, 8388, 300, 11, 291, 458, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 670, "seek": 203000, "start": 2043.0, "end": 2046.0, "text": " any language could take on binary copy if they support it.", "tokens": [51014, 604, 2856, 727, 747, 322, 17434, 5055, 498, 436, 1406, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 671, "seek": 203000, "start": 2046.0, "end": 2048.0, "text": " One of the things you really want to look for,", "tokens": [51164, 1485, 295, 264, 721, 291, 534, 528, 281, 574, 337, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 672, "seek": 203000, "start": 2048.0, "end": 2054.0, "text": " because you'll see that it is tremendously valuable if you can use it, right?", "tokens": [51264, 570, 291, 603, 536, 300, 309, 307, 27985, 8263, 498, 291, 393, 764, 309, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 673, "seek": 203000, "start": 2054.0, "end": 2056.0, "text": " Less than a second, about half a second,", "tokens": [51564, 18649, 813, 257, 1150, 11, 466, 1922, 257, 1150, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1212925078376891, "compression_ratio": 1.6101083032490975, "no_speech_prob": 0.0013663944555446506}, {"id": 674, "seek": 205600, "start": 2056.0, "end": 2060.0, "text": " to take the exact same file and simply use copy, right?", "tokens": [50364, 281, 747, 264, 1900, 912, 3991, 293, 2935, 764, 5055, 11, 558, 30, 50564], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 675, "seek": 205600, "start": 2060.0, "end": 2063.0, "text": " And again, PsychoPG 3 does a little bit better on some of this", "tokens": [50564, 400, 797, 11, 17303, 78, 47, 38, 805, 775, 257, 707, 857, 1101, 322, 512, 295, 341, 50714], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 676, "seek": 205600, "start": 2063.0, "end": 2066.0, "text": " because they're taking the ability now,", "tokens": [50714, 570, 436, 434, 1940, 264, 3485, 586, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 677, "seek": 205600, "start": 2066.0, "end": 2068.0, "text": " one of the things you could not do, I believe is true,", "tokens": [50864, 472, 295, 264, 721, 291, 727, 406, 360, 11, 286, 1697, 307, 2074, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 678, "seek": 205600, "start": 2068.0, "end": 2072.0, "text": " and maybe I'm wrong in this, you couldn't do stream into copy with PsychoPG 2,", "tokens": [50964, 293, 1310, 286, 478, 2085, 294, 341, 11, 291, 2809, 380, 360, 4309, 666, 5055, 365, 17303, 78, 47, 38, 568, 11, 51164], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 679, "seek": 205600, "start": 2072.0, "end": 2074.0, "text": " but you can do that now with PsychoPG 3.", "tokens": [51164, 457, 291, 393, 360, 300, 586, 365, 17303, 78, 47, 38, 805, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 680, "seek": 205600, "start": 2074.0, "end": 2079.0, "text": " That's really nice if you're forming your own string and you want to use copy, right?", "tokens": [51264, 663, 311, 534, 1481, 498, 291, 434, 15745, 428, 1065, 6798, 293, 291, 528, 281, 764, 5055, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 681, "seek": 205600, "start": 2079.0, "end": 2081.0, "text": " That's a really valuable tool.", "tokens": [51514, 663, 311, 257, 534, 8263, 2290, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 682, "seek": 205600, "start": 2081.0, "end": 2085.0, "text": " So make sure that your application, your tooling has something like that.", "tokens": [51614, 407, 652, 988, 300, 428, 3861, 11, 428, 46593, 575, 746, 411, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08841483013049976, "compression_ratio": 1.7408637873754154, "no_speech_prob": 0.00999701302498579}, {"id": 683, "seek": 208500, "start": 2085.0, "end": 2090.0, "text": " So there are two examples of how to do this kind of work in either of them.", "tokens": [50364, 407, 456, 366, 732, 5110, 295, 577, 281, 360, 341, 733, 295, 589, 294, 2139, 295, 552, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 684, "seek": 208500, "start": 2090.0, "end": 2093.0, "text": " A couple of parting thoughts to take with you.", "tokens": [50614, 316, 1916, 295, 46607, 4598, 281, 747, 365, 291, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 685, "seek": 208500, "start": 2093.0, "end": 2095.0, "text": " Number one, indexes and constraints.", "tokens": [50764, 5118, 472, 11, 8186, 279, 293, 18491, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 686, "seek": 208500, "start": 2095.0, "end": 2097.0, "text": " We never talked about this.", "tokens": [50864, 492, 1128, 2825, 466, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 687, "seek": 208500, "start": 2097.0, "end": 2100.0, "text": " Now, in case those among you who have been thinking what's going on here,", "tokens": [50964, 823, 11, 294, 1389, 729, 3654, 291, 567, 362, 668, 1953, 437, 311, 516, 322, 510, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 688, "seek": 208500, "start": 2100.0, "end": 2104.0, "text": " I have no indexes or constraints on any of these tables yet.", "tokens": [51114, 286, 362, 572, 8186, 279, 420, 18491, 322, 604, 295, 613, 8020, 1939, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 689, "seek": 208500, "start": 2104.0, "end": 2107.0, "text": " So someone asked earlier, like, what does that do?", "tokens": [51314, 407, 1580, 2351, 3071, 11, 411, 11, 437, 775, 300, 360, 30, 51464], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 690, "seek": 208500, "start": 2107.0, "end": 2108.0, "text": " I was like, that's a really good question.", "tokens": [51464, 286, 390, 411, 11, 300, 311, 257, 534, 665, 1168, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 691, "seek": 208500, "start": 2108.0, "end": 2109.0, "text": " Let's quickly check that out.", "tokens": [51514, 961, 311, 2661, 1520, 300, 484, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 692, "seek": 208500, "start": 2109.0, "end": 2112.0, "text": " And so it's just something to think about.", "tokens": [51564, 400, 370, 309, 311, 445, 746, 281, 519, 466, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09750320293285229, "compression_ratio": 1.6804123711340206, "no_speech_prob": 0.0041944547556340694}, {"id": 693, "seek": 211200, "start": 2112.0, "end": 2117.0, "text": " Now, in a very large active system, it is really hard to just get rid of your indexes and constraints", "tokens": [50364, 823, 11, 294, 257, 588, 2416, 4967, 1185, 11, 309, 307, 534, 1152, 281, 445, 483, 3973, 295, 428, 8186, 279, 293, 18491, 50614], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 694, "seek": 211200, "start": 2117.0, "end": 2120.0, "text": " because you want to make your data go faster coming in.", "tokens": [50614, 570, 291, 528, 281, 652, 428, 1412, 352, 4663, 1348, 294, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 695, "seek": 211200, "start": 2120.0, "end": 2127.0, "text": " But currently, Postgres does not have a way to disable indexes and constraints at this time.", "tokens": [50764, 583, 4362, 11, 10223, 45189, 775, 406, 362, 257, 636, 281, 28362, 8186, 279, 293, 18491, 412, 341, 565, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 696, "seek": 211200, "start": 2127.0, "end": 2129.0, "text": " So you'd have to drop them and then recreate them.", "tokens": [51114, 407, 291, 1116, 362, 281, 3270, 552, 293, 550, 25833, 552, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 697, "seek": 211200, "start": 2129.0, "end": 2132.0, "text": " But it can have a significant impact.", "tokens": [51214, 583, 309, 393, 362, 257, 4776, 2712, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 698, "seek": 211200, "start": 2132.0, "end": 2137.0, "text": " How, again, dropping before insert can significantly improve performance,", "tokens": [51364, 1012, 11, 797, 11, 13601, 949, 8969, 393, 10591, 3470, 3389, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 699, "seek": 211200, "start": 2137.0, "end": 2139.0, "text": " but use at your own risk.", "tokens": [51614, 457, 764, 412, 428, 1065, 3148, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 700, "seek": 211200, "start": 2139.0, "end": 2141.0, "text": " How big of a difference can it make?", "tokens": [51714, 1012, 955, 295, 257, 2649, 393, 309, 652, 30, 51814], "temperature": 0.0, "avg_logprob": -0.07730164803749273, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.0075723035261034966}, {"id": 701, "seek": 214100, "start": 2141.0, "end": 2143.0, "text": " Well, let's see really quickly.", "tokens": [50364, 1042, 11, 718, 311, 536, 534, 2661, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 702, "seek": 214100, "start": 2143.0, "end": 2148.0, "text": " So I'm going to take that same table and I'm going to create a couple indexes.", "tokens": [50464, 407, 286, 478, 516, 281, 747, 300, 912, 3199, 293, 286, 478, 516, 281, 1884, 257, 1916, 8186, 279, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 703, "seek": 214100, "start": 2148.0, "end": 2150.0, "text": " I don't think I have any on there now.", "tokens": [50714, 286, 500, 380, 519, 286, 362, 604, 322, 456, 586, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 704, "seek": 214100, "start": 2150.0, "end": 2152.0, "text": " I have no indexes.", "tokens": [50814, 286, 362, 572, 8186, 279, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 705, "seek": 214100, "start": 2152.0, "end": 2159.0, "text": " So I'm going to create three just on various columns, B trees, all of them.", "tokens": [50914, 407, 286, 478, 516, 281, 1884, 1045, 445, 322, 3683, 13766, 11, 363, 5852, 11, 439, 295, 552, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 706, "seek": 214100, "start": 2159.0, "end": 2167.0, "text": " And I'm going to run, let me set that back to logged.", "tokens": [51264, 400, 286, 478, 516, 281, 1190, 11, 718, 385, 992, 300, 646, 281, 27231, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 707, "seek": 214100, "start": 2167.0, "end": 2168.0, "text": " There we go.", "tokens": [51664, 821, 321, 352, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 708, "seek": 214100, "start": 2168.0, "end": 2169.0, "text": " I'm going to run that copy again.", "tokens": [51714, 286, 478, 516, 281, 1190, 300, 5055, 797, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08628833077170632, "compression_ratio": 1.7079207920792079, "no_speech_prob": 0.030169690027832985}, {"id": 709, "seek": 216900, "start": 2169.0, "end": 2172.0, "text": " So remember the copy was a little bit over a second.", "tokens": [50364, 407, 1604, 264, 5055, 390, 257, 707, 857, 670, 257, 1150, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 710, "seek": 216900, "start": 2172.0, "end": 2174.0, "text": " Unlogged, it was just over a second.", "tokens": [50514, 1156, 4987, 3004, 11, 309, 390, 445, 670, 257, 1150, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 711, "seek": 216900, "start": 2174.0, "end": 2180.0, "text": " So just adding three indexes to this table, doing the exact same thing,", "tokens": [50614, 407, 445, 5127, 1045, 8186, 279, 281, 341, 3199, 11, 884, 264, 1900, 912, 551, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 712, "seek": 216900, "start": 2180.0, "end": 2183.0, "text": " makes that go at least twice as slow.", "tokens": [50914, 1669, 300, 352, 412, 1935, 6091, 382, 2964, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 713, "seek": 216900, "start": 2183.0, "end": 2185.0, "text": " It is now eight seconds.", "tokens": [51064, 467, 307, 586, 3180, 3949, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 714, "seek": 216900, "start": 2185.0, "end": 2191.0, "text": " So that is multiple percentages, multiple times slower.", "tokens": [51164, 407, 300, 307, 3866, 42270, 11, 3866, 1413, 14009, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 715, "seek": 216900, "start": 2191.0, "end": 2194.0, "text": " What about the type of index?", "tokens": [51464, 708, 466, 264, 2010, 295, 8186, 30, 51614], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 716, "seek": 216900, "start": 2194.0, "end": 2196.0, "text": " It's a great question.", "tokens": [51614, 467, 311, 257, 869, 1168, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10481086530183491, "compression_ratio": 1.6009615384615385, "no_speech_prob": 0.006284576375037432}, {"id": 717, "seek": 219600, "start": 2196.0, "end": 2199.0, "text": " I want to see like, does it matter?", "tokens": [50364, 286, 528, 281, 536, 411, 11, 775, 309, 1871, 30, 50514], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 718, "seek": 219600, "start": 2199.0, "end": 2201.0, "text": " So what if I create a trigram?", "tokens": [50514, 407, 437, 498, 286, 1884, 257, 504, 33737, 30, 50614], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 719, "seek": 219600, "start": 2201.0, "end": 2202.0, "text": " Now again, this is random text.", "tokens": [50614, 823, 797, 11, 341, 307, 4974, 2487, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 720, "seek": 219600, "start": 2202.0, "end": 2204.0, "text": " I would never do this normally.", "tokens": [50664, 286, 576, 1128, 360, 341, 5646, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 721, "seek": 219600, "start": 2204.0, "end": 2206.0, "text": " But what if I create a trigram on this text?", "tokens": [50764, 583, 437, 498, 286, 1884, 257, 504, 33737, 322, 341, 2487, 30, 50864], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 722, "seek": 219600, "start": 2206.0, "end": 2210.0, "text": " The text itself is no more than 50 characters long.", "tokens": [50864, 440, 2487, 2564, 307, 572, 544, 813, 2625, 4342, 938, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 723, "seek": 219600, "start": 2210.0, "end": 2214.0, "text": " I should have truncated the table before I did that.", "tokens": [51064, 286, 820, 362, 504, 409, 66, 770, 264, 3199, 949, 286, 630, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 724, "seek": 219600, "start": 2214.0, "end": 2218.0, "text": " It would take just a minute.", "tokens": [51264, 467, 576, 747, 445, 257, 3456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 725, "seek": 219600, "start": 2218.0, "end": 2225.0, "text": " You will see that I get to show you the other trick now that I did that.", "tokens": [51464, 509, 486, 536, 300, 286, 483, 281, 855, 291, 264, 661, 4282, 586, 300, 286, 630, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09382325205309637, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0010984060354530811}, {"id": 726, "seek": 222500, "start": 2225.0, "end": 2228.0, "text": " Within a few seconds, you start to realize that just changing that index type", "tokens": [50364, 15996, 257, 1326, 3949, 11, 291, 722, 281, 4325, 300, 445, 4473, 300, 8186, 2010, 50514], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 727, "seek": 222500, "start": 2228.0, "end": 2232.0, "text": " has a major impact on how this is working.", "tokens": [50514, 575, 257, 2563, 2712, 322, 577, 341, 307, 1364, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 728, "seek": 222500, "start": 2232.0, "end": 2235.0, "text": " But now I get to show you the view.", "tokens": [50714, 583, 586, 286, 483, 281, 855, 291, 264, 1910, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 729, "seek": 222500, "start": 2235.0, "end": 2238.0, "text": " So now I can actually see how quickly it's going through,", "tokens": [50864, 407, 586, 286, 393, 767, 536, 577, 2661, 309, 311, 516, 807, 11, 51014], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 730, "seek": 222500, "start": 2238.0, "end": 2240.0, "text": " even though I have that index on there.", "tokens": [51014, 754, 1673, 286, 362, 300, 8186, 322, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 731, "seek": 222500, "start": 2240.0, "end": 2244.0, "text": " It's just a recognition that knowing your data will really impact", "tokens": [51114, 467, 311, 445, 257, 11150, 300, 5276, 428, 1412, 486, 534, 2712, 51314], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 732, "seek": 222500, "start": 2244.0, "end": 2249.0, "text": " what you're able to do and what is safe in your specific environment.", "tokens": [51314, 437, 291, 434, 1075, 281, 360, 293, 437, 307, 3273, 294, 428, 2685, 2823, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 733, "seek": 222500, "start": 2249.0, "end": 2251.0, "text": " All right, last but not least.", "tokens": [51564, 1057, 558, 11, 1036, 457, 406, 1935, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 734, "seek": 222500, "start": 2251.0, "end": 2254.0, "text": " Oh, that was the bonus demo.", "tokens": [51664, 876, 11, 300, 390, 264, 10882, 10723, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07365047931671143, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.0015478646382689476}, {"id": 735, "seek": 225400, "start": 2254.0, "end": 2256.0, "text": " Partitioning.", "tokens": [50364, 4100, 849, 278, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 736, "seek": 225400, "start": 2256.0, "end": 2257.0, "text": " Consider it.", "tokens": [50464, 17416, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 737, "seek": 225400, "start": 2257.0, "end": 2261.0, "text": " I'm surprised how few people consider partitioning for their data.", "tokens": [50514, 286, 478, 6100, 577, 1326, 561, 1949, 24808, 278, 337, 641, 1412, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 738, "seek": 225400, "start": 2261.0, "end": 2266.0, "text": " It can really improve the ability, particularly when you have disparate data,", "tokens": [50714, 467, 393, 534, 3470, 264, 3485, 11, 4098, 562, 291, 362, 14548, 473, 1412, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 739, "seek": 225400, "start": 2266.0, "end": 2268.0, "text": " like time series data that might come in late.", "tokens": [50964, 411, 565, 2638, 1412, 300, 1062, 808, 294, 3469, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 740, "seek": 225400, "start": 2268.0, "end": 2272.0, "text": " It means that you have smaller chunks of your table.", "tokens": [51064, 467, 1355, 300, 291, 362, 4356, 24004, 295, 428, 3199, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 741, "seek": 225400, "start": 2272.0, "end": 2274.0, "text": " And because Postgres works in memory,", "tokens": [51264, 400, 570, 10223, 45189, 1985, 294, 4675, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 742, "seek": 225400, "start": 2274.0, "end": 2277.0, "text": " if you're only pulling in smaller portions of that table,", "tokens": [51364, 498, 291, 434, 787, 8407, 294, 4356, 25070, 295, 300, 3199, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 743, "seek": 225400, "start": 2277.0, "end": 2279.0, "text": " you can often get better throughput.", "tokens": [51514, 291, 393, 2049, 483, 1101, 44629, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 744, "seek": 225400, "start": 2279.0, "end": 2280.0, "text": " Consider it.", "tokens": [51614, 17416, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 745, "seek": 225400, "start": 2280.0, "end": 2281.0, "text": " Give it a look.", "tokens": [51664, 5303, 309, 257, 574, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07943959443465523, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.006282165180891752}, {"id": 746, "seek": 228100, "start": 2281.0, "end": 2285.0, "text": " And the really cool thing here is indexes are kept on each individual table.", "tokens": [50364, 400, 264, 534, 1627, 551, 510, 307, 8186, 279, 366, 4305, 322, 1184, 2609, 3199, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 747, "seek": 228100, "start": 2285.0, "end": 2289.0, "text": " So even that trigram index lets extrapolate to a billion rows.", "tokens": [50564, 407, 754, 300, 504, 33737, 8186, 6653, 48224, 473, 281, 257, 5218, 13241, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 748, "seek": 228100, "start": 2289.0, "end": 2293.0, "text": " If that's over many, many tables, the indexes themselves are smaller,", "tokens": [50764, 759, 300, 311, 670, 867, 11, 867, 8020, 11, 264, 8186, 279, 2969, 366, 4356, 11, 50964], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 749, "seek": 228100, "start": 2293.0, "end": 2296.0, "text": " you'll probably get better ingest performance.", "tokens": [50964, 291, 603, 1391, 483, 1101, 3957, 377, 3389, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 750, "seek": 228100, "start": 2296.0, "end": 2299.0, "text": " And that just means you are able to take a whole bunch of data", "tokens": [51114, 400, 300, 445, 1355, 291, 366, 1075, 281, 747, 257, 1379, 3840, 295, 1412, 51264], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 751, "seek": 228100, "start": 2299.0, "end": 2302.0, "text": " and put it into each of these individual tables.", "tokens": [51264, 293, 829, 309, 666, 1184, 295, 613, 2609, 8020, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 752, "seek": 228100, "start": 2302.0, "end": 2305.0, "text": " If you had multiple threads going and the data was hitting different partitions,", "tokens": [51414, 759, 291, 632, 3866, 19314, 516, 293, 264, 1412, 390, 8850, 819, 644, 2451, 11, 51564], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 753, "seek": 228100, "start": 2305.0, "end": 2307.0, "text": " you really can see a speed up.", "tokens": [51564, 291, 534, 393, 536, 257, 3073, 493, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 754, "seek": 228100, "start": 2307.0, "end": 2309.0, "text": " Last but not least, last slide.", "tokens": [51664, 5264, 457, 406, 1935, 11, 1036, 4137, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0871645267193134, "compression_ratio": 1.695364238410596, "no_speech_prob": 0.001986650750041008}, {"id": 755, "seek": 230900, "start": 2309.0, "end": 2313.0, "text": " What to look for in your SDKs?", "tokens": [50364, 708, 281, 574, 337, 294, 428, 37135, 82, 30, 50564], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 756, "seek": 230900, "start": 2313.0, "end": 2316.0, "text": " So things like, does it support copy?", "tokens": [50564, 407, 721, 411, 11, 775, 309, 1406, 5055, 30, 50714], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 757, "seek": 230900, "start": 2316.0, "end": 2318.0, "text": " Does it support binary copy?", "tokens": [50714, 4402, 309, 1406, 17434, 5055, 30, 50814], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 758, "seek": 230900, "start": 2318.0, "end": 2321.0, "text": " What about multi-valued or batching kind of functions?", "tokens": [50814, 708, 466, 4825, 12, 3337, 5827, 420, 15245, 278, 733, 295, 6828, 30, 50964], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 759, "seek": 230900, "start": 2321.0, "end": 2326.0, "text": " Do you have to do that work or will your tooling do the work for you", "tokens": [50964, 1144, 291, 362, 281, 360, 300, 589, 420, 486, 428, 46593, 360, 264, 589, 337, 291, 51214], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 760, "seek": 230900, "start": 2326.0, "end": 2328.0, "text": " or help you do that work?", "tokens": [51214, 420, 854, 291, 360, 300, 589, 30, 51314], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 761, "seek": 230900, "start": 2328.0, "end": 2330.0, "text": " How is AutoCommit handled?", "tokens": [51314, 1012, 307, 13738, 39206, 270, 18033, 30, 51414], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 762, "seek": 230900, "start": 2330.0, "end": 2331.0, "text": " Parameter tries.", "tokens": [51414, 34882, 2398, 9898, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 763, "seek": 230900, "start": 2331.0, "end": 2334.0, "text": " Does it allow you to do anything with those parameter tries queries?", "tokens": [51464, 4402, 309, 2089, 291, 281, 360, 1340, 365, 729, 13075, 9898, 24109, 30, 51614], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 764, "seek": 230900, "start": 2334.0, "end": 2335.0, "text": " How does it handle it?", "tokens": [51614, 1012, 775, 309, 4813, 309, 30, 51664], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 765, "seek": 230900, "start": 2335.0, "end": 2338.0, "text": " Does it warn you if you're going to exceed a limit?", "tokens": [51664, 4402, 309, 12286, 291, 498, 291, 434, 516, 281, 14048, 257, 4948, 30, 51814], "temperature": 0.0, "avg_logprob": -0.0866315946804257, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.005381441209465265}, {"id": 766, "seek": 233800, "start": 2338.0, "end": 2341.0, "text": " And the one thing I meant to put in here and I didn't and I apologize is,", "tokens": [50364, 400, 264, 472, 551, 286, 4140, 281, 829, 294, 510, 293, 286, 994, 380, 293, 286, 12328, 307, 11, 50514], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 767, "seek": 233800, "start": 2341.0, "end": 2343.0, "text": " very much like PsychoPG3,", "tokens": [50514, 588, 709, 411, 17303, 78, 47, 38, 18, 11, 50614], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 768, "seek": 233800, "start": 2343.0, "end": 2348.0, "text": " has now taken advantage of a feature in Postgres 14 called Pipelining,", "tokens": [50614, 575, 586, 2726, 5002, 295, 257, 4111, 294, 10223, 45189, 3499, 1219, 35396, 338, 1760, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 769, "seek": 233800, "start": 2348.0, "end": 2351.0, "text": " which essentially says, for every query I send,", "tokens": [50864, 597, 4476, 1619, 11, 337, 633, 14581, 286, 2845, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 770, "seek": 233800, "start": 2351.0, "end": 2353.0, "text": " I don't have to wait for the response,", "tokens": [51014, 286, 500, 380, 362, 281, 1699, 337, 264, 4134, 11, 51114], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 771, "seek": 233800, "start": 2353.0, "end": 2355.0, "text": " I can just start sending the next query right away.", "tokens": [51114, 286, 393, 445, 722, 7750, 264, 958, 14581, 558, 1314, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 772, "seek": 233800, "start": 2355.0, "end": 2358.0, "text": " That's really beneficial in inserts.", "tokens": [51214, 663, 311, 534, 14072, 294, 49163, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 773, "seek": 233800, "start": 2358.0, "end": 2363.0, "text": " And so it's a really easy and effective way to get more performance out of what you're doing.", "tokens": [51364, 400, 370, 309, 311, 257, 534, 1858, 293, 4942, 636, 281, 483, 544, 3389, 484, 295, 437, 291, 434, 884, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 774, "seek": 233800, "start": 2363.0, "end": 2367.0, "text": " Turns out, so I have five minutes until questions.", "tokens": [51614, 29524, 484, 11, 370, 286, 362, 1732, 2077, 1826, 1651, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11463314027928595, "compression_ratio": 1.5737179487179487, "no_speech_prob": 0.015623081475496292}, {"id": 775, "seek": 236700, "start": 2368.0, "end": 2369.0, "text": " Yes.", "tokens": [50414, 1079, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 776, "seek": 236700, "start": 2369.0, "end": 2370.0, "text": " All right.", "tokens": [50464, 1057, 558, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 777, "seek": 236700, "start": 2370.0, "end": 2373.0, "text": " Let me show you really quickly, because I think I can.", "tokens": [50514, 961, 385, 855, 291, 534, 2661, 11, 570, 286, 519, 286, 393, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 778, "seek": 236700, "start": 2373.0, "end": 2374.0, "text": " Oh, there it's done.", "tokens": [50664, 876, 11, 456, 309, 311, 1096, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 779, "seek": 236700, "start": 2374.0, "end": 2376.0, "text": " So then when it stops, you'll get no values back.", "tokens": [50714, 407, 550, 562, 309, 10094, 11, 291, 603, 483, 572, 4190, 646, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 780, "seek": 236700, "start": 2376.0, "end": 2377.0, "text": " But it did finally finish.", "tokens": [50814, 583, 309, 630, 2721, 2413, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 781, "seek": 236700, "start": 2377.0, "end": 2379.0, "text": " How long did that take?", "tokens": [50864, 1012, 938, 630, 300, 747, 30, 50964], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 782, "seek": 236700, "start": 2379.0, "end": 2380.0, "text": " Let's see.", "tokens": [50964, 961, 311, 536, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 783, "seek": 236700, "start": 2380.0, "end": 2385.0, "text": " Doing that with that trigram index took 65 seconds, right?", "tokens": [51014, 18496, 300, 365, 300, 504, 33737, 8186, 1890, 11624, 3949, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 784, "seek": 236700, "start": 2385.0, "end": 2389.0, "text": " So your indexes matter, the kinds of indexes and what you're doing.", "tokens": [51264, 407, 428, 8186, 279, 1871, 11, 264, 3685, 295, 8186, 279, 293, 437, 291, 434, 884, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 785, "seek": 236700, "start": 2389.0, "end": 2393.0, "text": " Trigram index is an inefficient index, but it's a very powerful one too.", "tokens": [51464, 1765, 33737, 8186, 307, 364, 43495, 8186, 11, 457, 309, 311, 257, 588, 4005, 472, 886, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 786, "seek": 236700, "start": 2393.0, "end": 2396.0, "text": " If you're going to use it, you understand that and that's okay.", "tokens": [51664, 759, 291, 434, 516, 281, 764, 309, 11, 291, 1223, 300, 293, 300, 311, 1392, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13050844952776716, "compression_ratio": 1.632867132867133, "no_speech_prob": 0.002046948065981269}, {"id": 787, "seek": 239600, "start": 2396.0, "end": 2404.0, "text": " So I have, I think, so remember I told you earlier when I did the single insert,", "tokens": [50364, 407, 286, 362, 11, 286, 519, 11, 370, 1604, 286, 1907, 291, 3071, 562, 286, 630, 264, 2167, 8969, 11, 50764], "temperature": 0.0, "avg_logprob": -0.16012872623491892, "compression_ratio": 1.423913043478261, "no_speech_prob": 0.0003298913361504674}, {"id": 788, "seek": 239600, "start": 2404.0, "end": 2411.0, "text": " and I'm going to give this a go, and it might not be set up,", "tokens": [50764, 293, 286, 478, 516, 281, 976, 341, 257, 352, 11, 293, 309, 1062, 406, 312, 992, 493, 11, 51114], "temperature": 0.0, "avg_logprob": -0.16012872623491892, "compression_ratio": 1.423913043478261, "no_speech_prob": 0.0003298913361504674}, {"id": 789, "seek": 239600, "start": 2411.0, "end": 2414.0, "text": " and this is no comment whatsoever on PsychoPG3,", "tokens": [51114, 293, 341, 307, 572, 2871, 17076, 322, 17303, 78, 47, 38, 18, 11, 51264], "temperature": 0.0, "avg_logprob": -0.16012872623491892, "compression_ratio": 1.423913043478261, "no_speech_prob": 0.0003298913361504674}, {"id": 790, "seek": 239600, "start": 2414.0, "end": 2418.0, "text": " because I was like, oh, that's actually a lot faster than I thought now.", "tokens": [51264, 570, 286, 390, 411, 11, 1954, 11, 300, 311, 767, 257, 688, 4663, 813, 286, 1194, 586, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16012872623491892, "compression_ratio": 1.423913043478261, "no_speech_prob": 0.0003298913361504674}, {"id": 791, "seek": 241800, "start": 2418.0, "end": 2426.0, "text": " No, I think, yeah, I think this is it.", "tokens": [50364, 883, 11, 286, 519, 11, 1338, 11, 286, 519, 341, 307, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 792, "seek": 241800, "start": 2426.0, "end": 2428.0, "text": " So let's just see.", "tokens": [50764, 407, 718, 311, 445, 536, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 793, "seek": 241800, "start": 2428.0, "end": 2429.0, "text": " This may or may not work.", "tokens": [50864, 639, 815, 420, 815, 406, 589, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 794, "seek": 241800, "start": 2429.0, "end": 2434.0, "text": " Basically because of the pipelining, this, even though it does 750,000 insert statements,", "tokens": [50914, 8537, 570, 295, 264, 8489, 338, 1760, 11, 341, 11, 754, 1673, 309, 775, 31682, 11, 1360, 8969, 12363, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 795, "seek": 241800, "start": 2434.0, "end": 2439.0, "text": " because it's doing one at a time, the time came down very near to what the multi-valued", "tokens": [51164, 570, 309, 311, 884, 472, 412, 257, 565, 11, 264, 565, 1361, 760, 588, 2651, 281, 437, 264, 4825, 12, 3337, 5827, 51414], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 796, "seek": 241800, "start": 2439.0, "end": 2442.0, "text": " was in this case because of the pipelining effect.", "tokens": [51414, 390, 294, 341, 1389, 570, 295, 264, 8489, 338, 1760, 1802, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 797, "seek": 241800, "start": 2442.0, "end": 2443.0, "text": " So if it works, great.", "tokens": [51564, 407, 498, 309, 1985, 11, 869, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 798, "seek": 241800, "start": 2443.0, "end": 2447.0, "text": " If it's not, it just means that I changed something from the last time I did this.", "tokens": [51614, 759, 309, 311, 406, 11, 309, 445, 1355, 300, 286, 3105, 746, 490, 264, 1036, 565, 286, 630, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11754582214355469, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.0015973671106621623}, {"id": 799, "seek": 244700, "start": 2447.0, "end": 2451.0, "text": " There's no comment whatsoever.", "tokens": [50364, 821, 311, 572, 2871, 17076, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 800, "seek": 244700, "start": 2451.0, "end": 2456.0, "text": " Let's see what happens.", "tokens": [50564, 961, 311, 536, 437, 2314, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 801, "seek": 244700, "start": 2456.0, "end": 2458.0, "text": " And I might not have turned on pipelining.", "tokens": [50814, 400, 286, 1062, 406, 362, 3574, 322, 8489, 338, 1760, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 802, "seek": 244700, "start": 2458.0, "end": 2460.0, "text": " Now I do know, oh, you know what?", "tokens": [50914, 823, 286, 360, 458, 11, 1954, 11, 291, 458, 437, 30, 51014], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 803, "seek": 244700, "start": 2460.0, "end": 2464.0, "text": " This is not execute many, my apologies.", "tokens": [51014, 639, 307, 406, 14483, 867, 11, 452, 34929, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 804, "seek": 244700, "start": 2464.0, "end": 2465.0, "text": " Yeah, I don't have it set up.", "tokens": [51214, 865, 11, 286, 500, 380, 362, 309, 992, 493, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 805, "seek": 244700, "start": 2465.0, "end": 2466.0, "text": " I thought I did.", "tokens": [51264, 286, 1194, 286, 630, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 806, "seek": 244700, "start": 2466.0, "end": 2468.0, "text": " So there's a function called execute many,", "tokens": [51314, 407, 456, 311, 257, 2445, 1219, 14483, 867, 11, 51414], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 807, "seek": 244700, "start": 2468.0, "end": 2472.0, "text": " and what that does is it automatically sets up pipelining for you.", "tokens": [51414, 293, 437, 300, 775, 307, 309, 6772, 6352, 493, 8489, 338, 1760, 337, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 808, "seek": 244700, "start": 2472.0, "end": 2476.0, "text": " You don't have to enable it in the code itself.", "tokens": [51614, 509, 500, 380, 362, 281, 9528, 309, 294, 264, 3089, 2564, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11046574855672903, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.00382130965590477}, {"id": 809, "seek": 247600, "start": 2476.0, "end": 2479.0, "text": " Otherwise, at least as far as documentation shows,", "tokens": [50364, 10328, 11, 412, 1935, 382, 1400, 382, 14333, 3110, 11, 50514], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 810, "seek": 247600, "start": 2479.0, "end": 2483.0, "text": " you have to at least initialize the pipelining to get that impact with it.", "tokens": [50514, 291, 362, 281, 412, 1935, 5883, 1125, 264, 8489, 338, 1760, 281, 483, 300, 2712, 365, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 811, "seek": 247600, "start": 2483.0, "end": 2485.0, "text": " So it was a great surprise.", "tokens": [50714, 407, 309, 390, 257, 869, 6365, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 812, "seek": 247600, "start": 2485.0, "end": 2486.0, "text": " Thanks for doing all that work.", "tokens": [50814, 2561, 337, 884, 439, 300, 589, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 813, "seek": 247600, "start": 2486.0, "end": 2487.0, "text": " I know there's been a lot there.", "tokens": [50864, 286, 458, 456, 311, 668, 257, 688, 456, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 814, "seek": 247600, "start": 2487.0, "end": 2491.0, "text": " So that is what I have to offer for today.", "tokens": [50914, 407, 300, 307, 437, 286, 362, 281, 2626, 337, 965, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 815, "seek": 247600, "start": 2491.0, "end": 2493.0, "text": " It's been really a joy to speak with you,", "tokens": [51114, 467, 311, 668, 534, 257, 6258, 281, 1710, 365, 291, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 816, "seek": 247600, "start": 2493.0, "end": 2497.0, "text": " and I'd love to take any questions you have in a few minutes that we do have.", "tokens": [51214, 293, 286, 1116, 959, 281, 747, 604, 1651, 291, 362, 294, 257, 1326, 2077, 300, 321, 360, 362, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06558651490644975, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.021217983216047287}, {"id": 817, "seek": 249700, "start": 2497.0, "end": 2499.0, "text": " I'm going to start by talking about bees and coffee.", "tokens": [50364, 286, 478, 516, 281, 722, 538, 1417, 466, 17511, 293, 4982, 13, 50464], "temperature": 0.0, "avg_logprob": -0.35648780120046514, "compression_ratio": 1.1538461538461537, "no_speech_prob": 0.1627950519323349}, {"id": 818, "seek": 249700, "start": 2516.0, "end": 2518.0, "text": " Hi, I've got a few questions,", "tokens": [51314, 2421, 11, 286, 600, 658, 257, 1326, 1651, 11, 51414], "temperature": 0.0, "avg_logprob": -0.35648780120046514, "compression_ratio": 1.1538461538461537, "no_speech_prob": 0.1627950519323349}, {"id": 819, "seek": 249700, "start": 2518.0, "end": 2521.0, "text": " but I'll restrict myself to a couple.", "tokens": [51414, 457, 286, 603, 7694, 2059, 281, 257, 1916, 13, 51564], "temperature": 0.0, "avg_logprob": -0.35648780120046514, "compression_ratio": 1.1538461538461537, "no_speech_prob": 0.1627950519323349}, {"id": 820, "seek": 252100, "start": 2521.0, "end": 2528.0, "text": " The first one is if you take that example where you've got a bunch of indexes", "tokens": [50364, 440, 700, 472, 307, 498, 291, 747, 300, 1365, 689, 291, 600, 658, 257, 3840, 295, 8186, 279, 50714], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 821, "seek": 252100, "start": 2528.0, "end": 2532.0, "text": " and pay maybe even some constraints or even a trigger or two,", "tokens": [50714, 293, 1689, 1310, 754, 512, 18491, 420, 754, 257, 7875, 420, 732, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 822, "seek": 252100, "start": 2532.0, "end": 2535.0, "text": " all of which are contributing to making it slow,", "tokens": [50914, 439, 295, 597, 366, 19270, 281, 1455, 309, 2964, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 823, "seek": 252100, "start": 2535.0, "end": 2540.0, "text": " how do you tell what's making it slow,", "tokens": [51064, 577, 360, 291, 980, 437, 311, 1455, 309, 2964, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 824, "seek": 252100, "start": 2540.0, "end": 2543.0, "text": " either through tooling logs, et cetera,", "tokens": [51314, 2139, 807, 46593, 20820, 11, 1030, 11458, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 825, "seek": 252100, "start": 2543.0, "end": 2545.0, "text": " without having to basically play,", "tokens": [51464, 1553, 1419, 281, 1936, 862, 11, 51564], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 826, "seek": 252100, "start": 2545.0, "end": 2549.0, "text": " turn it on and turn it back off again on every one?", "tokens": [51564, 1261, 309, 322, 293, 1261, 309, 646, 766, 797, 322, 633, 472, 30, 51764], "temperature": 0.0, "avg_logprob": -0.09650808699587558, "compression_ratio": 1.6118721461187215, "no_speech_prob": 0.09661368280649185}, {"id": 827, "seek": 254900, "start": 2549.0, "end": 2551.0, "text": " Really good question.", "tokens": [50364, 4083, 665, 1168, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 828, "seek": 254900, "start": 2551.0, "end": 2555.0, "text": " A lot of it would be and probably something I actually was going to try and talk about,", "tokens": [50464, 316, 688, 295, 309, 576, 312, 293, 1391, 746, 286, 767, 390, 516, 281, 853, 293, 751, 466, 11, 50664], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 829, "seek": 254900, "start": 2555.0, "end": 2556.0, "text": " but I just didn't have time,", "tokens": [50664, 457, 286, 445, 994, 380, 362, 565, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 830, "seek": 254900, "start": 2556.0, "end": 2559.0, "text": " which is using the views in Postgres to figure out,", "tokens": [50714, 597, 307, 1228, 264, 6809, 294, 10223, 45189, 281, 2573, 484, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 831, "seek": 254900, "start": 2559.0, "end": 2563.0, "text": " number one, first off, what statements are actually happening.", "tokens": [50864, 1230, 472, 11, 700, 766, 11, 437, 12363, 366, 767, 2737, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 832, "seek": 254900, "start": 2563.0, "end": 2566.0, "text": " You can tell which indexes are being touched,", "tokens": [51064, 509, 393, 980, 597, 8186, 279, 366, 885, 9828, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 833, "seek": 254900, "start": 2566.0, "end": 2569.0, "text": " what the kind of transaction are happening,", "tokens": [51214, 437, 264, 733, 295, 14425, 366, 2737, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 834, "seek": 254900, "start": 2569.0, "end": 2571.0, "text": " the updates themselves within the index,", "tokens": [51364, 264, 9205, 2969, 1951, 264, 8186, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 835, "seek": 254900, "start": 2571.0, "end": 2574.0, "text": " and that might help you get a sense for at least", "tokens": [51464, 293, 300, 1062, 854, 291, 483, 257, 2020, 337, 412, 1935, 51614], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 836, "seek": 254900, "start": 2574.0, "end": 2578.0, "text": " which ones you have to worry about to start to think through.", "tokens": [51614, 597, 2306, 291, 362, 281, 3292, 466, 281, 722, 281, 519, 807, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09838848265390547, "compression_ratio": 1.689419795221843, "no_speech_prob": 0.006480640731751919}, {"id": 837, "seek": 257800, "start": 2578.0, "end": 2582.0, "text": " That'd be my first go,", "tokens": [50364, 663, 1116, 312, 452, 700, 352, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 838, "seek": 257800, "start": 2582.0, "end": 2586.0, "text": " and I will maybe try and update some of those examples with a couple of those views", "tokens": [50564, 293, 286, 486, 1310, 853, 293, 5623, 512, 295, 729, 5110, 365, 257, 1916, 295, 729, 6809, 50764], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 839, "seek": 257800, "start": 2586.0, "end": 2588.0, "text": " so that you can start to do that.", "tokens": [50764, 370, 300, 291, 393, 722, 281, 360, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 840, "seek": 257800, "start": 2588.0, "end": 2589.0, "text": " Thank you.", "tokens": [50864, 1044, 291, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 841, "seek": 257800, "start": 2589.0, "end": 2590.0, "text": " Yeah.", "tokens": [50914, 865, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 842, "seek": 257800, "start": 2590.0, "end": 2592.0, "text": " Question over here.", "tokens": [50964, 14464, 670, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 843, "seek": 257800, "start": 2592.0, "end": 2594.0, "text": " Behind you.", "tokens": [51064, 20475, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 844, "seek": 257800, "start": 2594.0, "end": 2596.0, "text": " Hello.", "tokens": [51164, 2425, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 845, "seek": 257800, "start": 2596.0, "end": 2598.0, "text": " Yeah.", "tokens": [51264, 865, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 846, "seek": 257800, "start": 2598.0, "end": 2604.0, "text": " So what if you want to normalize your data into multiple tables?", "tokens": [51364, 407, 437, 498, 291, 528, 281, 2710, 1125, 428, 1412, 666, 3866, 8020, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 847, "seek": 257800, "start": 2604.0, "end": 2607.0, "text": " Why did I not normalize the data into?", "tokens": [51664, 1545, 630, 286, 406, 2710, 1125, 264, 1412, 666, 30, 51814], "temperature": 0.0, "avg_logprob": -0.1588669118193007, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.0017531724879518151}, {"id": 848, "seek": 260700, "start": 2607.0, "end": 2609.0, "text": " Into several tables.", "tokens": [50364, 23373, 2940, 8020, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 849, "seek": 260700, "start": 2609.0, "end": 2611.0, "text": " Okay. Partitioning?", "tokens": [50464, 1033, 13, 4100, 849, 278, 30, 50564], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 850, "seek": 260700, "start": 2611.0, "end": 2612.0, "text": " No.", "tokens": [50564, 883, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 851, "seek": 260700, "start": 2612.0, "end": 2613.0, "text": " No.", "tokens": [50614, 883, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 852, "seek": 260700, "start": 2613.0, "end": 2617.0, "text": " Like tables with unique constraints and foreign key relations.", "tokens": [50664, 1743, 8020, 365, 3845, 18491, 293, 5329, 2141, 2299, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 853, "seek": 260700, "start": 2617.0, "end": 2618.0, "text": " Oh, why didn't I?", "tokens": [50864, 876, 11, 983, 994, 380, 286, 30, 50914], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 854, "seek": 260700, "start": 2618.0, "end": 2619.0, "text": " That's a great question.", "tokens": [50914, 663, 311, 257, 869, 1168, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 855, "seek": 260700, "start": 2619.0, "end": 2620.0, "text": " Demo and time.", "tokens": [50964, 4686, 78, 293, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 856, "seek": 260700, "start": 2620.0, "end": 2623.0, "text": " What is the strategy to insert data", "tokens": [51014, 708, 307, 264, 5206, 281, 8969, 1412, 51164], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 857, "seek": 260700, "start": 2623.0, "end": 2626.0, "text": " if you want to normalize it into several tables", "tokens": [51164, 498, 291, 528, 281, 2710, 1125, 309, 666, 2940, 8020, 51314], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 858, "seek": 260700, "start": 2626.0, "end": 2629.0, "text": " with unique constraints and foreign key relations?", "tokens": [51314, 365, 3845, 18491, 293, 5329, 2141, 2299, 30, 51464], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 859, "seek": 260700, "start": 2629.0, "end": 2631.0, "text": " Then you cannot copy,", "tokens": [51464, 1396, 291, 2644, 5055, 11, 51564], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 860, "seek": 260700, "start": 2631.0, "end": 2634.0, "text": " and you cannot just do a multivariate insert.", "tokens": [51564, 293, 291, 2644, 445, 360, 257, 2120, 592, 3504, 473, 8969, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12610286474227905, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.014756966382265091}, {"id": 861, "seek": 263400, "start": 2634.0, "end": 2637.0, "text": " You have to process the data while you insert it.", "tokens": [50364, 509, 362, 281, 1399, 264, 1412, 1339, 291, 8969, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 862, "seek": 263400, "start": 2637.0, "end": 2638.0, "text": " Absolutely right.", "tokens": [50514, 7021, 558, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 863, "seek": 263400, "start": 2638.0, "end": 2642.0, "text": " And so that's where I think Postgres doesn't get enough attention on this specific thing.", "tokens": [50564, 400, 370, 300, 311, 689, 286, 519, 10223, 45189, 1177, 380, 483, 1547, 3202, 322, 341, 2685, 551, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 864, "seek": 263400, "start": 2642.0, "end": 2643.0, "text": " So the question is,", "tokens": [50764, 407, 264, 1168, 307, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 865, "seek": 263400, "start": 2643.0, "end": 2645.0, "text": " when you have a very normalized database,", "tokens": [50814, 562, 291, 362, 257, 588, 48704, 8149, 11, 50914], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 866, "seek": 263400, "start": 2645.0, "end": 2649.0, "text": " this data actually gets split up into three or four tables", "tokens": [50914, 341, 1412, 767, 2170, 7472, 493, 666, 1045, 420, 1451, 8020, 51114], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 867, "seek": 263400, "start": 2649.0, "end": 2651.0, "text": " because it's not just one file.", "tokens": [51114, 570, 309, 311, 406, 445, 472, 3991, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 868, "seek": 263400, "start": 2651.0, "end": 2653.0, "text": " How do you do that most effectively?", "tokens": [51214, 1012, 360, 291, 360, 300, 881, 8659, 30, 51314], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 869, "seek": 263400, "start": 2653.0, "end": 2656.0, "text": " Now, a lot of people would have some kind of ETL tool external.", "tokens": [51314, 823, 11, 257, 688, 295, 561, 576, 362, 512, 733, 295, 36953, 43, 2290, 8320, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 870, "seek": 263400, "start": 2656.0, "end": 2659.0, "text": " I think that Postgres does a really good job internally.", "tokens": [51464, 286, 519, 300, 10223, 45189, 775, 257, 534, 665, 1691, 19501, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 871, "seek": 263400, "start": 2659.0, "end": 2661.0, "text": " I would specifically, what I tend to do", "tokens": [51614, 286, 576, 4682, 11, 437, 286, 3928, 281, 360, 51714], "temperature": 0.0, "avg_logprob": -0.05526718096946603, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0031201629899442196}, {"id": 872, "seek": 266100, "start": 2661.0, "end": 2664.0, "text": " is I create an unlogged temp table of sorts.", "tokens": [50364, 307, 286, 1884, 364, 517, 4987, 3004, 18274, 3199, 295, 7527, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 873, "seek": 266100, "start": 2664.0, "end": 2666.0, "text": " I get the data in as quickly as I can with the copy.", "tokens": [50514, 286, 483, 264, 1412, 294, 382, 2661, 382, 286, 393, 365, 264, 5055, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 874, "seek": 266100, "start": 2666.0, "end": 2670.0, "text": " I use the power of Postgres to move that data around.", "tokens": [50614, 286, 764, 264, 1347, 295, 10223, 45189, 281, 1286, 300, 1412, 926, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 875, "seek": 266100, "start": 2670.0, "end": 2675.0, "text": " Things, tricks like the array trick, honestly, in some instances,", "tokens": [50814, 9514, 11, 11733, 411, 264, 10225, 4282, 11, 6095, 11, 294, 512, 14519, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 876, "seek": 266100, "start": 2675.0, "end": 2677.0, "text": " ends up being really fast then in processing.", "tokens": [51064, 5314, 493, 885, 534, 2370, 550, 294, 9007, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 877, "seek": 266100, "start": 2677.0, "end": 2679.0, "text": " That's the best I can offer you when it comes to copy", "tokens": [51164, 663, 311, 264, 1151, 286, 393, 2626, 291, 562, 309, 1487, 281, 5055, 51264], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 878, "seek": 266100, "start": 2679.0, "end": 2680.0, "text": " because you're right.", "tokens": [51264, 570, 291, 434, 558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 879, "seek": 266100, "start": 2680.0, "end": 2681.0, "text": " That's the limitation of copy.", "tokens": [51314, 663, 311, 264, 27432, 295, 5055, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 880, "seek": 266100, "start": 2681.0, "end": 2684.0, "text": " It doesn't follow the parameters down.", "tokens": [51364, 467, 1177, 380, 1524, 264, 9834, 760, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 881, "seek": 266100, "start": 2684.0, "end": 2686.0, "text": " So hi, thank you.", "tokens": [51514, 407, 4879, 11, 1309, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 882, "seek": 266100, "start": 2686.0, "end": 2690.0, "text": " So I would have expected you to also touch on prepared statements,", "tokens": [51614, 407, 286, 576, 362, 5176, 291, 281, 611, 2557, 322, 4927, 12363, 11, 51814], "temperature": 0.0, "avg_logprob": -0.09872797261113705, "compression_ratio": 1.6689189189189189, "no_speech_prob": 0.012940468266606331}, {"id": 883, "seek": 269000, "start": 2690.0, "end": 2692.0, "text": " which many drivers have.", "tokens": [50364, 597, 867, 11590, 362, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 884, "seek": 269000, "start": 2692.0, "end": 2696.0, "text": " So did you purposely not do that?", "tokens": [50464, 407, 630, 291, 41840, 406, 360, 300, 30, 50664], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 885, "seek": 269000, "start": 2696.0, "end": 2699.0, "text": " Yes, I purposely didn't most, again,", "tokens": [50664, 1079, 11, 286, 41840, 994, 380, 881, 11, 797, 11, 50814], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 886, "seek": 269000, "start": 2699.0, "end": 2700.0, "text": " partially because of time.", "tokens": [50814, 18886, 570, 295, 565, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 887, "seek": 269000, "start": 2700.0, "end": 2703.0, "text": " So prepared statements, one of the big issues", "tokens": [50864, 407, 4927, 12363, 11, 472, 295, 264, 955, 2663, 51014], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 888, "seek": 269000, "start": 2703.0, "end": 2705.0, "text": " prepared statements that a lot of people run into at least,", "tokens": [51014, 4927, 12363, 300, 257, 688, 295, 561, 1190, 666, 412, 1935, 11, 51114], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 889, "seek": 269000, "start": 2705.0, "end": 2707.0, "text": " we were just talking about this on the walk the other night,", "tokens": [51114, 321, 645, 445, 1417, 466, 341, 322, 264, 1792, 264, 661, 1818, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 890, "seek": 269000, "start": 2707.0, "end": 2712.0, "text": " is prepared statements if you don't need to be released effectively.", "tokens": [51214, 307, 4927, 12363, 498, 291, 500, 380, 643, 281, 312, 4736, 8659, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 891, "seek": 269000, "start": 2712.0, "end": 2717.0, "text": " And so I just didn't have a good demo to be honest with you.", "tokens": [51464, 400, 370, 286, 445, 994, 380, 362, 257, 665, 10723, 281, 312, 3245, 365, 291, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 892, "seek": 269000, "start": 2717.0, "end": 2719.0, "text": " And so I apologize when it comes to insert.", "tokens": [51714, 400, 370, 286, 12328, 562, 309, 1487, 281, 8969, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12052284798971037, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.014907488599419594}, {"id": 893, "seek": 271900, "start": 2719.0, "end": 2724.0, "text": " Now some of that, again, PsychoPG3 does now help with prepared statements.", "tokens": [50364, 823, 512, 295, 300, 11, 797, 11, 17303, 78, 47, 38, 18, 775, 586, 854, 365, 4927, 12363, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 894, "seek": 271900, "start": 2724.0, "end": 2728.0, "text": " I tested it briefly to see if it would have any impact.", "tokens": [50614, 286, 8246, 309, 10515, 281, 536, 498, 309, 576, 362, 604, 2712, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 895, "seek": 271900, "start": 2728.0, "end": 2730.0, "text": " On these simple insert statements,", "tokens": [50814, 1282, 613, 2199, 8969, 12363, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 896, "seek": 271900, "start": 2730.0, "end": 2732.0, "text": " that was part of my problem to demo that.", "tokens": [50914, 300, 390, 644, 295, 452, 1154, 281, 10723, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 897, "seek": 271900, "start": 2732.0, "end": 2733.0, "text": " It's just a little bit more difficult.", "tokens": [51014, 467, 311, 445, 257, 707, 857, 544, 2252, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 898, "seek": 271900, "start": 2733.0, "end": 2735.0, "text": " So definitely something worth checking.", "tokens": [51064, 407, 2138, 746, 3163, 8568, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 899, "seek": 271900, "start": 2735.0, "end": 2737.0, "text": " So basically, do the work ahead of time", "tokens": [51164, 407, 1936, 11, 360, 264, 589, 2286, 295, 565, 51264], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 900, "seek": 271900, "start": 2737.0, "end": 2741.0, "text": " so that statement self doesn't have to be prepared every single time.", "tokens": [51264, 370, 300, 5629, 2698, 1177, 380, 362, 281, 312, 4927, 633, 2167, 565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 901, "seek": 271900, "start": 2741.0, "end": 2744.0, "text": " And I think PsychoPG says there's a threshold.", "tokens": [51464, 400, 286, 519, 17303, 78, 47, 38, 1619, 456, 311, 257, 14678, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 902, "seek": 271900, "start": 2744.0, "end": 2746.0, "text": " Once the statement has been run so many times,", "tokens": [51614, 3443, 264, 5629, 575, 668, 1190, 370, 867, 1413, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10270516927005681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.012804297730326653}, {"id": 903, "seek": 274600, "start": 2746.0, "end": 2749.0, "text": " then it will basically turn into prepared statement", "tokens": [50364, 550, 309, 486, 1936, 1261, 666, 4927, 5629, 50514], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 904, "seek": 274600, "start": 2749.0, "end": 2752.0, "text": " to save that effort on each insert.", "tokens": [50514, 281, 3155, 300, 4630, 322, 1184, 8969, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 905, "seek": 274600, "start": 2752.0, "end": 2755.0, "text": " Okay, and I just want to remark that it's actually possible,", "tokens": [50664, 1033, 11, 293, 286, 445, 528, 281, 7942, 300, 309, 311, 767, 1944, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 906, "seek": 274600, "start": 2755.0, "end": 2759.0, "text": " I believe, to disable constraints while importing.", "tokens": [50814, 286, 1697, 11, 281, 28362, 18491, 1339, 43866, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 907, "seek": 274600, "start": 2759.0, "end": 2762.0, "text": " So, okay, yeah, good comment.", "tokens": [51014, 407, 11, 1392, 11, 1338, 11, 665, 2871, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 908, "seek": 274600, "start": 2762.0, "end": 2764.0, "text": " So while importing, absolutely.", "tokens": [51164, 407, 1339, 43866, 11, 3122, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 909, "seek": 274600, "start": 2764.0, "end": 2769.0, "text": " If you can tolerate it, if your application can tolerate it,", "tokens": [51264, 759, 291, 393, 25773, 309, 11, 498, 428, 3861, 393, 25773, 309, 11, 51514], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 910, "seek": 274600, "start": 2769.0, "end": 2771.0, "text": " you can drop them ahead of time.", "tokens": [51514, 291, 393, 3270, 552, 2286, 295, 565, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 911, "seek": 274600, "start": 2771.0, "end": 2772.0, "text": " Yeah, I do.", "tokens": [51614, 865, 11, 286, 360, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 912, "seek": 274600, "start": 2772.0, "end": 2773.0, "text": " Don't mean drop.", "tokens": [51664, 1468, 380, 914, 3270, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 913, "seek": 274600, "start": 2773.0, "end": 2775.0, "text": " You can disable triggers temporarily.", "tokens": [51714, 509, 393, 28362, 22827, 23750, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1393458490786345, "compression_ratio": 1.6746031746031746, "no_speech_prob": 0.031329549849033356}, {"id": 914, "seek": 277500, "start": 2775.0, "end": 2778.0, "text": " An important turn them on again.", "tokens": [50364, 1107, 1021, 1261, 552, 322, 797, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 915, "seek": 277500, "start": 2778.0, "end": 2779.0, "text": " I'm sorry.", "tokens": [50514, 286, 478, 2597, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 916, "seek": 277500, "start": 2779.0, "end": 2781.0, "text": " So I've read.", "tokens": [50564, 407, 286, 600, 1401, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 917, "seek": 277500, "start": 2781.0, "end": 2784.0, "text": " So apparently constraints are implemented by triggers in Postgres,", "tokens": [50664, 407, 7970, 18491, 366, 12270, 538, 22827, 294, 10223, 45189, 11, 50814], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 918, "seek": 277500, "start": 2784.0, "end": 2786.0, "text": " and if you temporarily disable triggers,", "tokens": [50814, 293, 498, 291, 23750, 28362, 22827, 11, 50914], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 919, "seek": 277500, "start": 2786.0, "end": 2790.0, "text": " then you also disable checking the constraints.", "tokens": [50914, 550, 291, 611, 28362, 8568, 264, 18491, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 920, "seek": 277500, "start": 2790.0, "end": 2792.0, "text": " Yeah, that's another option.", "tokens": [51114, 865, 11, 300, 311, 1071, 3614, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 921, "seek": 277500, "start": 2792.0, "end": 2795.0, "text": " You can defer it to at the end of the import process,", "tokens": [51214, 509, 393, 25704, 309, 281, 412, 264, 917, 295, 264, 974, 1399, 11, 51364], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 922, "seek": 277500, "start": 2795.0, "end": 2797.0, "text": " which might help for performance if you haven't checked,", "tokens": [51364, 597, 1062, 854, 337, 3389, 498, 291, 2378, 380, 10033, 11, 51464], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 923, "seek": 277500, "start": 2797.0, "end": 2799.0, "text": " which you can also disable them,", "tokens": [51464, 597, 291, 393, 611, 28362, 552, 11, 51564], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 924, "seek": 277500, "start": 2799.0, "end": 2802.0, "text": " but then you actually disable them so they're not checked.", "tokens": [51564, 457, 550, 291, 767, 28362, 552, 370, 436, 434, 406, 10033, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14347101080006566, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.029832351952791214}, {"id": 925, "seek": 280200, "start": 2802.0, "end": 2804.0, "text": " So that's something to be wary about.", "tokens": [50364, 407, 300, 311, 746, 281, 312, 46585, 466, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 926, "seek": 280200, "start": 2804.0, "end": 2806.0, "text": " Having thought about the trigger option, I haven't tested it.", "tokens": [50464, 10222, 1194, 466, 264, 7875, 3614, 11, 286, 2378, 380, 8246, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 927, "seek": 280200, "start": 2806.0, "end": 2808.0, "text": " So, yeah, good feedback.", "tokens": [50564, 407, 11, 1338, 11, 665, 5824, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 928, "seek": 280200, "start": 2808.0, "end": 2810.0, "text": " Disable, please.", "tokens": [50664, 4208, 712, 11, 1767, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 929, "seek": 280200, "start": 2810.0, "end": 2811.0, "text": " Yeah, exactly.", "tokens": [50764, 865, 11, 2293, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 930, "seek": 280200, "start": 2811.0, "end": 2813.0, "text": " There's so many ramifications of it.", "tokens": [50814, 821, 311, 370, 867, 10211, 7833, 295, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 931, "seek": 280200, "start": 2813.0, "end": 2816.0, "text": " The reality is simply saying there's a lot that you have to think about.", "tokens": [50914, 440, 4103, 307, 2935, 1566, 456, 311, 257, 688, 300, 291, 362, 281, 519, 466, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 932, "seek": 280200, "start": 2816.0, "end": 2818.0, "text": " If you want to do it, it is an option,", "tokens": [51064, 759, 291, 528, 281, 360, 309, 11, 309, 307, 364, 3614, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 933, "seek": 280200, "start": 2818.0, "end": 2823.0, "text": " and you'll see that guidance out there in a lot of places, right?", "tokens": [51164, 293, 291, 603, 536, 300, 10056, 484, 456, 294, 257, 688, 295, 3190, 11, 558, 30, 51414], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 934, "seek": 280200, "start": 2823.0, "end": 2826.0, "text": " Then you have to worry about what happens when you re-enable all this stuff.", "tokens": [51414, 1396, 291, 362, 281, 3292, 466, 437, 2314, 562, 291, 319, 12, 268, 712, 439, 341, 1507, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 935, "seek": 280200, "start": 2826.0, "end": 2827.0, "text": " Like, there's a whole different discussion", "tokens": [51564, 1743, 11, 456, 311, 257, 1379, 819, 5017, 51614], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 936, "seek": 280200, "start": 2827.0, "end": 2828.0, "text": " just simply putting it out there.", "tokens": [51614, 445, 2935, 3372, 309, 484, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 937, "seek": 280200, "start": 2828.0, "end": 2830.0, "text": " One more, maybe?", "tokens": [51664, 1485, 544, 11, 1310, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1655281091191966, "compression_ratio": 1.69375, "no_speech_prob": 0.009628398343920708}, {"id": 938, "seek": 283000, "start": 2830.0, "end": 2835.0, "text": " Have you considered using foreign data wrappers to load data,", "tokens": [50364, 3560, 291, 4888, 1228, 5329, 1412, 7843, 15226, 281, 3677, 1412, 11, 50614], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 939, "seek": 283000, "start": 2835.0, "end": 2837.0, "text": " and do you know about the performance there?", "tokens": [50614, 293, 360, 291, 458, 466, 264, 3389, 456, 30, 50714], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 940, "seek": 283000, "start": 2837.0, "end": 2840.0, "text": " Yeah, so the question is about foreign data wrappers.", "tokens": [50714, 865, 11, 370, 264, 1168, 307, 466, 5329, 1412, 7843, 15226, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 941, "seek": 283000, "start": 2840.0, "end": 2843.0, "text": " Postgres has a really great ecosystem of foreign data wrappers", "tokens": [50864, 10223, 45189, 575, 257, 534, 869, 11311, 295, 5329, 1412, 7843, 15226, 51014], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 942, "seek": 283000, "start": 2843.0, "end": 2845.0, "text": " that allows you to basically say,", "tokens": [51014, 300, 4045, 291, 281, 1936, 584, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 943, "seek": 283000, "start": 2845.0, "end": 2847.0, "text": " that thing over there, I'm going to treat it like a table.", "tokens": [51114, 300, 551, 670, 456, 11, 286, 478, 516, 281, 2387, 309, 411, 257, 3199, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 944, "seek": 283000, "start": 2847.0, "end": 2848.0, "text": " It can be a file.", "tokens": [51214, 467, 393, 312, 257, 3991, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 945, "seek": 283000, "start": 2848.0, "end": 2849.0, "text": " It can be another system.", "tokens": [51264, 467, 393, 312, 1071, 1185, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 946, "seek": 283000, "start": 2849.0, "end": 2851.0, "text": " It can be another database system,", "tokens": [51314, 467, 393, 312, 1071, 8149, 1185, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 947, "seek": 283000, "start": 2851.0, "end": 2853.0, "text": " Mongo, Redshift, whatever.", "tokens": [51414, 48380, 11, 4477, 47445, 11, 2035, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 948, "seek": 283000, "start": 2853.0, "end": 2855.0, "text": " It really all depends on...", "tokens": [51514, 467, 534, 439, 5946, 322, 485, 51614], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 949, "seek": 283000, "start": 2855.0, "end": 2857.0, "text": " A lot of these principles are going to follow.", "tokens": [51614, 316, 688, 295, 613, 9156, 366, 516, 281, 1524, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09165562523735894, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008558127097785473}, {"id": 950, "seek": 285700, "start": 2857.0, "end": 2859.0, "text": " Number one, try to get pushed down.", "tokens": [50364, 5118, 472, 11, 853, 281, 483, 9152, 760, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 951, "seek": 285700, "start": 2859.0, "end": 2861.0, "text": " Like, what can be actually pushed down to the queries", "tokens": [50464, 1743, 11, 437, 393, 312, 767, 9152, 760, 281, 264, 24109, 50564], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 952, "seek": 285700, "start": 2861.0, "end": 2863.0, "text": " for the data you're bringing back?", "tokens": [50564, 337, 264, 1412, 291, 434, 5062, 646, 30, 50664], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 953, "seek": 285700, "start": 2863.0, "end": 2866.0, "text": " The data itself is almost never going to be as quick,", "tokens": [50664, 440, 1412, 2564, 307, 1920, 1128, 516, 281, 312, 382, 1702, 11, 50814], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 954, "seek": 285700, "start": 2866.0, "end": 2868.0, "text": " just because of the overhead.", "tokens": [50814, 445, 570, 295, 264, 19922, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 955, "seek": 285700, "start": 2868.0, "end": 2872.0, "text": " Even local files, it's not going to be the same thing.", "tokens": [50914, 2754, 2654, 7098, 11, 309, 311, 406, 516, 281, 312, 264, 912, 551, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 956, "seek": 285700, "start": 2872.0, "end": 2873.0, "text": " But it's a really useful tool.", "tokens": [51114, 583, 309, 311, 257, 534, 4420, 2290, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 957, "seek": 285700, "start": 2873.0, "end": 2875.0, "text": " As a source, it could be a great way to take that", "tokens": [51164, 1018, 257, 4009, 11, 309, 727, 312, 257, 869, 636, 281, 747, 300, 51264], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 958, "seek": 285700, "start": 2875.0, "end": 2879.0, "text": " and get it into something, and then move on from there.", "tokens": [51264, 293, 483, 309, 666, 746, 11, 293, 550, 1286, 322, 490, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 959, "seek": 285700, "start": 2879.0, "end": 2881.0, "text": " One last question.", "tokens": [51464, 1485, 1036, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 960, "seek": 285700, "start": 2881.0, "end": 2884.0, "text": " This is a follow-up comment on the question", "tokens": [51564, 639, 307, 257, 1524, 12, 1010, 2871, 322, 264, 1168, 51714], "temperature": 0.0, "avg_logprob": -0.08018550728306625, "compression_ratio": 1.6360424028268552, "no_speech_prob": 0.00999744888395071}, {"id": 961, "seek": 288400, "start": 2884.0, "end": 2888.0, "text": " that this gentleman had about constraints.", "tokens": [50364, 300, 341, 15761, 632, 466, 18491, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 962, "seek": 288400, "start": 2888.0, "end": 2891.0, "text": " If you use the multi-value insert,", "tokens": [50564, 759, 291, 764, 264, 4825, 12, 29155, 8969, 11, 50714], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 963, "seek": 288400, "start": 2891.0, "end": 2893.0, "text": " sorry, the array insert trick,", "tokens": [50714, 2597, 11, 264, 10225, 8969, 4282, 11, 50814], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 964, "seek": 288400, "start": 2893.0, "end": 2896.0, "text": " you can actually just drag the arrays into a CTE", "tokens": [50814, 291, 393, 767, 445, 5286, 264, 41011, 666, 257, 383, 13639, 50964], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 965, "seek": 288400, "start": 2896.0, "end": 2898.0, "text": " and then run an update.", "tokens": [50964, 293, 550, 1190, 364, 5623, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 966, "seek": 288400, "start": 2898.0, "end": 2900.0, "text": " So you can still do it in one statement.", "tokens": [51064, 407, 291, 393, 920, 360, 309, 294, 472, 5629, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 967, "seek": 288400, "start": 2900.0, "end": 2903.0, "text": " You don't need to necessarily put it in a temporary table.", "tokens": [51164, 509, 500, 380, 643, 281, 4725, 829, 309, 294, 257, 13413, 3199, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 968, "seek": 288400, "start": 2903.0, "end": 2906.0, "text": " Absolutely, yeah, again, just example-wise.", "tokens": [51314, 7021, 11, 1338, 11, 797, 11, 445, 1365, 12, 3711, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 969, "seek": 288400, "start": 2906.0, "end": 2908.0, "text": " One question.", "tokens": [51464, 1485, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10316043098767598, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.007591888774186373}, {"id": 970, "seek": 291400, "start": 2915.0, "end": 2916.0, "text": " Hello.", "tokens": [50414, 2425, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 971, "seek": 291400, "start": 2916.0, "end": 2918.0, "text": " Binary copy versus text copy.", "tokens": [50464, 363, 4066, 5055, 5717, 2487, 5055, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 972, "seek": 291400, "start": 2918.0, "end": 2920.0, "text": " What is faster, and how much is the difference?", "tokens": [50564, 708, 307, 4663, 11, 293, 577, 709, 307, 264, 2649, 30, 50664], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 973, "seek": 291400, "start": 2920.0, "end": 2922.0, "text": " Binary or text?", "tokens": [50664, 363, 4066, 420, 2487, 30, 50764], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 974, "seek": 291400, "start": 2922.0, "end": 2924.0, "text": " Binary is generally faster.", "tokens": [50764, 363, 4066, 307, 5101, 4663, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 975, "seek": 291400, "start": 2924.0, "end": 2927.0, "text": " It's a great question, and I mostly just mentioned it", "tokens": [50864, 467, 311, 257, 869, 1168, 11, 293, 286, 5240, 445, 2835, 309, 51014], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 976, "seek": 291400, "start": 2927.0, "end": 2929.0, "text": " to mention it.", "tokens": [51014, 281, 2152, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 977, "seek": 291400, "start": 2929.0, "end": 2931.0, "text": " In every experience I've had with tooling that supports it,", "tokens": [51114, 682, 633, 1752, 286, 600, 632, 365, 46593, 300, 9346, 309, 11, 51214], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 978, "seek": 291400, "start": 2931.0, "end": 2933.0, "text": " it ends up being a lot faster.", "tokens": [51214, 309, 5314, 493, 885, 257, 688, 4663, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 979, "seek": 291400, "start": 2933.0, "end": 2935.0, "text": " I don't have numbers for you at the moment,", "tokens": [51314, 286, 500, 380, 362, 3547, 337, 291, 412, 264, 1623, 11, 51414], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 980, "seek": 291400, "start": 2935.0, "end": 2937.0, "text": " and it is part of the demo I want to get in there", "tokens": [51414, 293, 309, 307, 644, 295, 264, 10723, 286, 528, 281, 483, 294, 456, 51514], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 981, "seek": 291400, "start": 2937.0, "end": 2939.0, "text": " so that we can show that.", "tokens": [51514, 370, 300, 321, 393, 855, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 982, "seek": 291400, "start": 2939.0, "end": 2941.0, "text": " If anyone else has a specific input,", "tokens": [51614, 759, 2878, 1646, 575, 257, 2685, 4846, 11, 51714], "temperature": 0.0, "avg_logprob": -0.08060910096809046, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.01654778979718685}, {"id": 983, "seek": 294100, "start": 2941.0, "end": 2944.0, "text": " welcome to shout it out, but it's faster.", "tokens": [50364, 2928, 281, 8043, 309, 484, 11, 457, 309, 311, 4663, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}, {"id": 984, "seek": 294100, "start": 2944.0, "end": 2946.0, "text": " Look for tooling that supports it.", "tokens": [50514, 2053, 337, 46593, 300, 9346, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}, {"id": 985, "seek": 294100, "start": 2946.0, "end": 2948.0, "text": " Again, Psycho-P3 and others", "tokens": [50614, 3764, 11, 17303, 78, 12, 47, 18, 293, 2357, 50714], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}, {"id": 986, "seek": 294100, "start": 2948.0, "end": 2950.0, "text": " support it now by default.", "tokens": [50714, 1406, 309, 586, 538, 7576, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}, {"id": 987, "seek": 294100, "start": 2950.0, "end": 2952.0, "text": " You'll see some great boosts.", "tokens": [50814, 509, 603, 536, 512, 869, 9194, 82, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}, {"id": 988, "seek": 294100, "start": 2952.0, "end": 2954.0, "text": " Thank you so much. It's been a pleasure.", "tokens": [50914, 1044, 291, 370, 709, 13, 467, 311, 668, 257, 6834, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12897288982684796, "compression_ratio": 1.294871794871795, "no_speech_prob": 0.002796339336782694}], "language": "en"}