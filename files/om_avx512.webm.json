{"text": " We'll talk about AVX-312 in FFNPEG. He's also the co-organiser of this dev room. Please welcome Kirano. So yes, I'm going to be talking about AVX-512 in FFNPEG. What is AVX-512? AVX stands for Advanced Vector Extensions. There will be a lot of acronyms and jargon, unfortunately, in this one, but I will try and explain all of them. So AVX-512 is a relatively new single instruction multiple data instruction set for Intel CPUs from about 2017 and more recently in the last six months or so with AMD CPUs. In particular, it has a larger 512-bit register size. Many new instructions, which we'll talk about in a minute. Comparisons, which are quite new, and also lots of other things that are not so interesting in multimedia. Cryptography, neural networks, and I'm sure there are other people at Fastem who could talk a lot more about these kind of things. As I mentioned, lots of fancy words, but the thing to bear in mind is in FFNPEG, high schoolers have gone and written assembly. This is heavily jargon-centric. It sounds complicated, but actually quite a big reasonable chunk of assembly in FFNPEG has been written by people who are in high school. Why is this relevant now? I've mentioned AVX-512 has been around since 2017, so why is it 2023? Well, Skylake was the first CPU generation from Intel to have AVX-512 support, but it had very large performance throttling when you used them, so your effective CPU capability speed went down quite dramatically. And so this was fine if you were doing high-performance computing in academia, for example, like fluid dynamics, where you were using these instructions 100% of the time, that was fine. But in multimedia is a mixture of assembly and C code, where you're not necessarily always using these instructions. So this relative main is sort of unused for the last couple of years. You could still use these new instructions, though, with the smaller register sizes, and I'll show an example of this later. But the first Intel CPUs not to have throttling were the Islake 10th and 11th gen Intel CPUs. They were the first to have no throttling, and this meant these ZMM-based instructions could be first-class citizens. How to get started, one of the tricky things as well in the last few years has been actually getting access to devices that have this, and unfortunately Intel have not made it easy. From their 12th generation, CPUs have actually removed support in consumer equipment. It's still available on AMD as in four CPUs, though. And if using the cloud is your kind of thing, available also from many cloud providers in the server CPU range, such as AWS or others. Personally, I think the easiest way is to buy an 11th generation Intel NUC. That's what I did for FMpeg. I bought two of them for the projects and host them. The easiest way, it's only a few hundred euros. It's quiet, it fits under your desk. And that's the easiest way to get started, you get a full AVX512 stack. So let's look at some of the existing work in multimedia that's using AVX512. And probably most importantly, we had the sort of introduction from JB earlier today, the David project, which is an AV1 decoder. This added AVX512 support, I think a year or two ago. It's particularly beneficial in AV1 because AV1 has large block sizes, sort of in comparison to more traditional standards, traditional codecs like H264 and others, which are smaller. So AVX512 in David gave, I think, 10 to 20% overall. So not just the functions themselves, the overall decode performance was improved. And it's actually been a running topic, which is quite interesting over today, in FMPEG that we use, and David, and also we use this classic FMPEG H264 approach to assembly, which is no intrinsics, no inline assembly, no special SIMD sort of libraries to make life easier. It's raw assembly language, and I'll show some examples of that. And also we don't also compile them in and force you to have a particular CPU generation. And I know this is quite controversial. I think it's MongoDB, for example. They forced one-year a particular CPU generation, and this was super controversial because not everybody had that. So what we do in FMPEG is we detect CPU capabilities, and I'll show you the function in a minute. And then we use function pointers, so we set them once at the beginning, and therefore the overhead of doing that measurement is checked once, and then there's function pointers that are executed after that. And unfortunately, on Intel, there's a very messy Venn diagram of capabilities. But in practice, we really, so far, and they may change their mind, but care about these kind of two things. So these are the CPU flags you get in FMPEG. There are others, but the AVX-512-related ones are broadly speaking legacy Skylake, and the newer ICL are put in bold for Ice Lake. But you can see there are actually a lot of different subcategories in there. But in practice, it's at the moment one or the other, but as I mentioned, Intel are very keen on adding and removing features and possibly even charging your subscription for certain features is one of their new ideas. So it could be that newer additions to this are subscription-based, or you buy and pay for it later, or something much more complicated. So who knows? So I guess, unfortunately, there's some sort of dependency in explaining a few of the topics and some of the benefits without explaining some of the backstory. So historically, in old AVX, you had all the 256-bit registers, and these were split in practice into lanes. So in practice, you've got 228-bit lanes, and instructions, broadly speaking, operated in these lanes. So if you ran a instruction, it worked on data, and it was actually quite difficult. It was possible, but difficult to move data between these lanes. And it's one of the historical limitations on existing AVX and AVX2 code that we have in FMNPEG is lane crossing and all sorts of trickery that essentially cost CPU cycles to take up this time, that takes time to compensate for the lanes. I have to talk a bit about KMAS registers as well. So AVX512 has these new set of registers called KMASks, K0 to K7, and this allows a destination register to remain unchanged. So, for example, underneath, you could have an addition, but actually it's a simple case, and obviously you could just add zero, and it's unchanged, but you could actually use the KMAS to say, actually, I don't want addition to be applied to these elements. I want this to be a pure pass-through, or you could even force some of the elements to zero if you wanted to. There's a specific, I think it's a flag that lets you do that. And there's a whole set of new instructions to go and manipulate these KMAS registers, and certainly David, in particular, uses, makes good use of KMASks. So now that I've sort of explained some of the back story, I think it's fair to say one of the most important instructions, if not the most important instruction, is our shuffles in multimedia. Also known as permutes, and there might be a technical difference between a shuffle and a permute. Someone might be able to correct me. There might be some mathematical difference, but these are the most important, or one of the most important, instructions in multimedia. And as you can see on the right, basically it lets you, shuffles let you have various bits of data and rearrange them in any way that you want. Duplicate them, as you can see, or even set individual elements to zero. And this is, for example, famously one use case of this is in the zigzag scan of FFMPEG, which groups larger coefficients in a block together. But the way that that's done is via a zigzag scan. The thing about vpermb, which is the new AVX-512 instruction, is it lets you cross a lane. This wasn't something that was possible in before. And as I'll show you later, this makes things substantially faster in many cases. pshuffb, probably one of the most commonly used instructions in all of open source multimedia. You do get grep, pshuffb, there'll be a huge, you know, that your screen will be full of pshuffb. They're used everywhere in open source multimedia. pshuffb had a kind of useful benefit that if you set the index to minus one, you had to automatically do the zeroing out. With vpermb, this isn't the case. You have to actually use kmasks to do that. So that just makes things slightly more complicated. There's all sorts of other interesting permutes that AVX-512 offers. I think David also, again, makes good use of this vperm2b, so you can actually not just have one set of data, you can actually permute from two different registers. So you could have ijk, et cetera, et cetera in a different register, and your output could be a mixture of both of those. So that's kind of interesting. Variable shifts. You have now variable right shifts. So I've given the example of a vpsrlvw logical right shift and vpslvw variable left shift logical. Big letter soup, quite confusing. In fact, when writing this slide, I misspelt the word shift. You can have a think about how that may have been spelt. Thankfully, that's the good, thankfully, the rehearsals, and we'll pick this up. But this word soup is exceptionally confusing, both when writing slides and writing code, it seems. So historically, to do variable shifts, so if you want to take, obviously, just to step back, take an element and shift each element by a different amount, this was quite complicated. There's various bits of trickery, various idioms that people use to try and emulate that, but they had limitations. I think, for example, you were not shifting by zero, possibly wasn't allowed in one of the various bits of trickery. And so if you needed a zero shift, you had to do it a different way, et cetera, et cetera. But now you have this variable shift, and it's all usable. Equally on the left shift, the naive way of doing an emulated left shift is just to multiply, but these instructions are actually faster than the multiply, so there's still some benefit. VP Turnlog D, this is, I think, no presentation about AVX 512 could not fail to mention VP Turnlog D. This instruction is literally a kitchen sink. It's quite remarkable in what it can actually do. You can literally program a truth table within an individual instruction itself, and, in theory, could replace up to eight different instructions. So you could do a whole presentation on VP Turnlog D. So I thought it would be best to try and pick one of the simplest ones, which is a ternary operation. So this is a bitwise equivalent to the C ternary operation. So in each register, each bit is iterated through. And you can see, for example, one, the ternary operation. So if that bit set choose this or versus this, and you can see the output of that is that. And so, essentially, it's a bitwise operation of ZMM is equal to ZMM0, a question mark, ZMM1, ZMM2, but on a bitwise level. And there's all sorts of other interesting things you can do, and this article is very good. It shows all sorts of interesting things you can do, bit selects, all sorts of various different operations that you can do on multiple XORs, for example. So, yeah, also very interesting. So let's look at a real-world example. I don't know how well you can see that. I was hoping the dark mode would actually make life easier, but maybe it's made things worse. But I'll talk about some of the mouse. Is it the mouse? Because the mouse on the Mac is dark. But anyway, this is v2.10enc. It's probably one of the most simplest assembly functions in fmpeg, but what it does is it takes three 8-bit samples from different memory locations. It sort of, as part of its work, extends to 10 bits and then packs those three 10-bit words into 32 bits. So what's interesting in this function is we're already starting to do lane crossing that wasn't possible before. So we load the y-samples, so the luma samples, into the lower 256 bits. We do the u-section of the chroma into the third, or the second, if zero-indexed, portion of the register, and then equally the same for v. And then we do one, excuse me, and then one single v per mb can rearrange all of that in one go. This was a lot more complicated back in the olden days. P mad sub sw is some trickery that unfortunately there's not going to be enough time to explain, but eventually is a multiply and add, and we use that to emulate a shift. And then for the second element, in the three elements, we need to do a d-word shift because it actually spans the middle. So therefore then we have sort of conflicting bits in each register. So how do we do a bit selection? And this was quite a, I think it's a two or three, even up around two through three different instructions in the previous code. And this can now be done in a single vpternlogd, so essentially c ternary b or a. So if bit c is set, choose the bit from b or choose it from a otherwise. And you'll see in a second that actually provides quite a big, well certainly a measurable speed improvement. So these are the benchmarks. So this is, so I wanted to show a bit about how you can get benefits from AVX 512 even on the older hardware with the shorter existing registers. These are not scientifically benchmarked, I just ran them yesterday. When you do benchmarking you should run them 10 or 100 of times, average them, do standard deviations, et cetera. But just for the simple case, you can see that the c code versus the AVX 2 code is around 10 times faster. And you can see just by replacing, I think it's a set of two or three different pans or various boolean functions, you can get a measurable increase just with one instruction replacing three, even on the older YMM registers. But where the big gains come are on Ice Lake, you can see the c code versus the AVX 512 ICL, there's a huge difference. So by using vperm b and the ZMM, you can already make the legacy AVX 512 twice as fast. And if something was 10 times faster, that now becomes 20 times faster. And I often have to say that's not a multiply, that's a times. So it's massive improvement. This was code that could, if you have a large resolution file, take up an entire CPU core, and now it takes essentially 5% of a core. It's really tiny. What AVX 512 code is next? Anything really that's line-based or frame-based, such as filtering or scaling, I think the next thing we're working on is deinterlacing. Anything involving comparisons, I haven't really talked about comparisons, but there are bits of code that often need to do comparisons. That's going to be an obvious place for AVX 512. Lots of places that do triple booleans, multiple XORs or multiple XORs on ands, and I think it's almost always possible to replace that with a VP10 log D. Likewise in the code base, there's various different idioms and trickery to try and emulate a variable left shift and right shift, or multiplies for the left shifts and trickery for the right shifts. This could be used with the letter soup instructions to try and produce that. Intel provides an official manual to all of this. It's very verbose, which is great in many cases because it provides really precise detail of how the instructions work, but unfortunately is not at all approachable. There's a few websites that try and simplify things. I think this website on officedaytime.com is some kind of Japanese website, English that explains, tries to group all the instructions in some kind of logical ordering, and that makes it a lot simpler to understand. Any questions? Hopefully I'll be able to answer them, but thankfully at FosterM there's always somebody with more knowledge than you in the room. I can't see where they are, but I did see them at one point. Thanks. Thank you. Any questions in the room? Regarding the direct assembly writing of AVX-5.0, there's about 7,000 instructions of AVX-5.0. Why? If you choose the direct assembly, then you essentially might miss out on potential instruction scheduling between different architectures. Compilers might schedule better if you want to get a performance benefit in the future. But then you have to ship a binary for each version. Sorry, repeat the question. You have to write in 3.6, that's what I'm saying. In order to compile... The question is the classic question, can the compiler do a better job than a human question? In David, certainly the register allocation has not been very good in compilers historically. David has shown this quite dramatically because it has its own custom ABI internally, and you wouldn't be able to do that with the compiler like come up with your own internal ABI between functions. So there's certainly 10% plus on the individual function, speed gains versus doing it in intrinsics. Some bits of some instructions are not available in intrinsics like always. It's a compromise. Overall, it's been the way in FM Big X264 for the last 10 years, and I think all intrinsics and in line assemblies banned, and there's only one or two bits left, and there's a very good reason why it needs to be there. I have mixed experience about this. I agree on the... Ideally, assembly is better, but we had some code in 3.6, we compiled it with the latest Clang, 15, and we saw a 15 to 20% speed increase. But did you try writing it to begin with in... Yes, it was in 3.6. Write it in... Write it originally in assembly and compare, but it's... So for example, some of this... Sorry, you've gone to... Some of the bit-twizzling in there, for example, a compiler would never really have the understanding to do... In fact, I did try chatGPT, and chatGPT at least sort of understood a few of the concepts. It's interesting because not quite out of a day job, but I did ask chatGPT to write this function, actually, just sort of to see what... And it did have some vague idea what was going on. It didn't need to sort of be helped, which is quite interesting. Yep. Is there any collaboration between the multimedia, the people who write the codex, and the guys writing the compiler who tell them, look, perhaps you could target certain patterns? Martin is a collaboration between people writing the compilers and multimedia community. Yes, in ARM in particular, I think, is Martin here? No, Martin is not here, but Martin spends a lot of time talking to the compiler community and the linker community on mostly miscompilations is more his thing. And I think, yeah, and I think there is also some sharing of mostly around the C code, if the C code is badly miscompiled or thought of the wrong approach, because you can see, actually, and in some versions of the compiler will really do a bad job on the C and the assembly can be 40 times faster, and that's... Don't know if that's something you can really trust if one day you change compiler version and a function that you thought was immeasurable is now 40 times slower than it is. And then the question from the internet is, did you have the occasion to look at RVA-SVE vector instructions for FAMPEG? Wow, that's a surprise for this person, because the next speaker is going to be talking about this entire topic. Where is the next speaker? He's over there, and the next speaker here, Remy, will be talking about this entire topic. Another question? Yeah, I was wondering. So, obviously, the runtime CPU capability detection and dispatching of the right functions is desirable, but I don't think it's necessarily contradictory to having some amount of abstraction. Like, have you, for instance, looked into the highway library that is being used in some places that is trying to provide some kind of abstraction while still allowing to do runtime dispatch? So, the question was, have you looked into some of the abstraction libraries like highway that's trying to do a sort of compromise between runtime dispatch and abstraction? I think this question was already answered, I think, two presentations ago. Not with highway, but I think with a different SIMD library, but there have been various approaches, LibOil, is it SIMD easy? Various different approaches. And again, the result from certain FAMPEG-264, it has been righted by hand. It's written once, and you know almost certainly that it's going to be usable for a long time. I didn't really talk about it, but the abstraction, there is a lightweight abstraction layer in X-264 and FAMPEG to try and basically to handle 32-bit, 64-bit, and to handle other things like the different ABI cores. The abstraction layer kind of handles some of the future-proofing in that respect, but there's a blog post online from Ronald, if he's here, but he's not here. He explains some of this. It's another presentation in itself, unfortunately. For your benchmark, do you know which optimization the C-code was compiled with? The question was, for the benchmark, what optimizations were the C-code compiled with? The GCC-03, varying versions of GCC. In FAMPEG test suite, there's all sorts. I think from GCC, there's a whole range, depending on the build OS, but from 4 to 12, I think, and maybe some people test nightly. I think Martin certainly tests nightly for ARM. I don't know if anyone tests nightly on X-86. Some are LVM as well. But again, I would be very surprised if a compiler would be able to come up with something, because what a human wrote, because this is involving bit properties of the actual packing, and actually the trick with PMAD SW is a kind of trick to try and do a multiply and a zeroing at the same time, and it probably doesn't have the level of thinking to understand the bit patterns internally. Something like chatGPT might one day, which would be quite interesting, but I don't think the compiler does. The last question. I'm just going to follow up on what you said. If you have a small algorithm, a small function like 10, 100 clients, maybe, writing in the assembly might be easy, but if you have a huge function, like a filter, a variance filter, or something, a VCT, writing it directly in the assembly might take a long time. That's why originally we write it in C, and then we try to write it in intrinsics. So the question is, a longer function might take a longer time to write in assembly compared to C or intrinsics. Yes, but there are DCTs and FMPEG, but they're macroed, right? Steps have macros to try and help that. Again, the abstraction layer also adds, I think, macros on top of what the normal assembler does in terms of macros, so the blog post explains, but swap is kind of interesting. It lets you swap registers, but then continue with them, and the layer just handles all of that internally. There's also just macros for, like, clipping. I think it was on the example, but clip is an example. So clipUB is a macro, and on the right target set, it will go and use the right clipping functions if they're available, for example, and there's a bunch of these, I think, that's how to fly. There's a few others like that. Thank you, Kieran.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.8, "text": " We'll talk about AVX-312 in FFNPEG.", "tokens": [492, 603, 751, 466, 30198, 55, 12, 18, 4762, 294, 479, 37, 45, 5208, 38, 13], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 1, "seek": 0, "start": 8.8, "end": 12.72, "text": " He's also the co-organiser of this dev room.", "tokens": [634, 311, 611, 264, 598, 12, 12372, 6694, 295, 341, 1905, 1808, 13], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 2, "seek": 0, "start": 12.72, "end": 14.6, "text": " Please welcome Kirano.", "tokens": [2555, 2928, 11305, 3730, 13], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 3, "seek": 0, "start": 14.6, "end": 23.64, "text": " So yes, I'm going to be talking about AVX-512 in FFNPEG.", "tokens": [407, 2086, 11, 286, 478, 516, 281, 312, 1417, 466, 30198, 55, 12, 20, 4762, 294, 479, 37, 45, 5208, 38, 13], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 4, "seek": 0, "start": 23.64, "end": 25.6, "text": " What is AVX-512?", "tokens": [708, 307, 30198, 55, 12, 20, 4762, 30], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 5, "seek": 0, "start": 25.6, "end": 28.48, "text": " AVX stands for Advanced Vector Extensions.", "tokens": [30198, 55, 7382, 337, 26951, 691, 20814, 9881, 8302, 13], "temperature": 0.0, "avg_logprob": -0.4260544776916504, "compression_ratio": 1.3414634146341464, "no_speech_prob": 0.18721146881580353}, {"id": 6, "seek": 2848, "start": 28.48, "end": 31.2, "text": " There will be a lot of acronyms and jargon, unfortunately,", "tokens": [821, 486, 312, 257, 688, 295, 31713, 88, 2592, 293, 15181, 10660, 11, 7015, 11], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 7, "seek": 2848, "start": 31.2, "end": 35.32, "text": " in this one, but I will try and explain all of them.", "tokens": [294, 341, 472, 11, 457, 286, 486, 853, 293, 2903, 439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 8, "seek": 2848, "start": 35.32, "end": 38.32, "text": " So AVX-512 is a relatively new single instruction", "tokens": [407, 30198, 55, 12, 20, 4762, 307, 257, 7226, 777, 2167, 10951], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 9, "seek": 2848, "start": 38.32, "end": 43.96, "text": " multiple data instruction set for Intel CPUs from about 2017", "tokens": [3866, 1412, 10951, 992, 337, 19762, 13199, 82, 490, 466, 6591], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 10, "seek": 2848, "start": 43.96, "end": 48.28, "text": " and more recently in the last six months or so with AMD CPUs.", "tokens": [293, 544, 3938, 294, 264, 1036, 2309, 2493, 420, 370, 365, 34808, 13199, 82, 13], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 11, "seek": 2848, "start": 48.28, "end": 53.24, "text": " In particular, it has a larger 512-bit register size.", "tokens": [682, 1729, 11, 309, 575, 257, 4833, 1025, 4762, 12, 5260, 7280, 2744, 13], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 12, "seek": 2848, "start": 53.24, "end": 56.36, "text": " Many new instructions, which we'll talk about in a minute.", "tokens": [5126, 777, 9415, 11, 597, 321, 603, 751, 466, 294, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.16349282698197798, "compression_ratio": 1.4981132075471697, "no_speech_prob": 0.00013986935664433986}, {"id": 13, "seek": 5636, "start": 56.36, "end": 60.36, "text": " Comparisons, which are quite new, and also lots of other things", "tokens": [2432, 2181, 23886, 11, 597, 366, 1596, 777, 11, 293, 611, 3195, 295, 661, 721], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 14, "seek": 5636, "start": 60.36, "end": 62.36, "text": " that are not so interesting in multimedia.", "tokens": [300, 366, 406, 370, 1880, 294, 49202, 13], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 15, "seek": 5636, "start": 62.36, "end": 66.36, "text": " Cryptography, neural networks, and I'm sure there are other people", "tokens": [34809, 5820, 11, 18161, 9590, 11, 293, 286, 478, 988, 456, 366, 661, 561], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 16, "seek": 5636, "start": 66.36, "end": 70.36, "text": " at Fastem who could talk a lot more about these kind of things.", "tokens": [412, 15968, 443, 567, 727, 751, 257, 688, 544, 466, 613, 733, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 17, "seek": 5636, "start": 70.36, "end": 73.36, "text": " As I mentioned, lots of fancy words, but the thing to bear in mind", "tokens": [1018, 286, 2835, 11, 3195, 295, 10247, 2283, 11, 457, 264, 551, 281, 6155, 294, 1575], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 18, "seek": 5636, "start": 73.36, "end": 76.36, "text": " is in FFNPEG, high schoolers have gone and written assembly.", "tokens": [307, 294, 479, 37, 45, 5208, 38, 11, 1090, 1395, 433, 362, 2780, 293, 3720, 12103, 13], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 19, "seek": 5636, "start": 76.36, "end": 79.36, "text": " This is heavily jargon-centric.", "tokens": [639, 307, 10950, 15181, 10660, 12, 45300, 13], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 20, "seek": 5636, "start": 79.36, "end": 82.36, "text": " It sounds complicated, but actually quite a big reasonable chunk", "tokens": [467, 3263, 6179, 11, 457, 767, 1596, 257, 955, 10585, 16635], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 21, "seek": 5636, "start": 82.36, "end": 85.36, "text": " of assembly in FFNPEG has been written by people who are in high school.", "tokens": [295, 12103, 294, 479, 37, 45, 5208, 38, 575, 668, 3720, 538, 561, 567, 366, 294, 1090, 1395, 13], "temperature": 0.0, "avg_logprob": -0.18296844642479104, "compression_ratio": 1.6512345679012346, "no_speech_prob": 0.00011333099246257916}, {"id": 22, "seek": 8536, "start": 85.36, "end": 88.36, "text": " Why is this relevant now?", "tokens": [1545, 307, 341, 7340, 586, 30], "temperature": 0.0, "avg_logprob": -0.11505584489731562, "compression_ratio": 1.3688888888888888, "no_speech_prob": 0.00013665357255376875}, {"id": 23, "seek": 8536, "start": 88.36, "end": 95.36, "text": " I've mentioned AVX-512 has been around since 2017, so why is it 2023?", "tokens": [286, 600, 2835, 30198, 55, 12, 20, 4762, 575, 668, 926, 1670, 6591, 11, 370, 983, 307, 309, 44377, 30], "temperature": 0.0, "avg_logprob": -0.11505584489731562, "compression_ratio": 1.3688888888888888, "no_speech_prob": 0.00013665357255376875}, {"id": 24, "seek": 8536, "start": 95.36, "end": 100.36, "text": " Well, Skylake was the first CPU generation from Intel to have AVX-512 support,", "tokens": [1042, 11, 9879, 75, 619, 390, 264, 700, 13199, 5125, 490, 19762, 281, 362, 30198, 55, 12, 20, 4762, 1406, 11], "temperature": 0.0, "avg_logprob": -0.11505584489731562, "compression_ratio": 1.3688888888888888, "no_speech_prob": 0.00013665357255376875}, {"id": 25, "seek": 8536, "start": 100.36, "end": 104.36, "text": " but it had very large performance throttling when you used them,", "tokens": [457, 309, 632, 588, 2416, 3389, 739, 1521, 1688, 562, 291, 1143, 552, 11], "temperature": 0.0, "avg_logprob": -0.11505584489731562, "compression_ratio": 1.3688888888888888, "no_speech_prob": 0.00013665357255376875}, {"id": 26, "seek": 8536, "start": 104.36, "end": 110.36, "text": " so your effective CPU capability speed went down quite dramatically.", "tokens": [370, 428, 4942, 13199, 13759, 3073, 1437, 760, 1596, 17548, 13], "temperature": 0.0, "avg_logprob": -0.11505584489731562, "compression_ratio": 1.3688888888888888, "no_speech_prob": 0.00013665357255376875}, {"id": 27, "seek": 11036, "start": 110.36, "end": 115.36, "text": " And so this was fine if you were doing high-performance computing in academia,", "tokens": [400, 370, 341, 390, 2489, 498, 291, 645, 884, 1090, 12, 50242, 15866, 294, 28937, 11], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 28, "seek": 11036, "start": 115.36, "end": 118.36, "text": " for example, like fluid dynamics, where you were using these instructions", "tokens": [337, 1365, 11, 411, 9113, 15679, 11, 689, 291, 645, 1228, 613, 9415], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 29, "seek": 11036, "start": 118.36, "end": 121.36, "text": " 100% of the time, that was fine.", "tokens": [2319, 4, 295, 264, 565, 11, 300, 390, 2489, 13], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 30, "seek": 11036, "start": 121.36, "end": 124.36, "text": " But in multimedia is a mixture of assembly and C code,", "tokens": [583, 294, 49202, 307, 257, 9925, 295, 12103, 293, 383, 3089, 11], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 31, "seek": 11036, "start": 124.36, "end": 127.36, "text": " where you're not necessarily always using these instructions.", "tokens": [689, 291, 434, 406, 4725, 1009, 1228, 613, 9415, 13], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 32, "seek": 11036, "start": 127.36, "end": 132.36, "text": " So this relative main is sort of unused for the last couple of years.", "tokens": [407, 341, 4972, 2135, 307, 1333, 295, 44383, 337, 264, 1036, 1916, 295, 924, 13], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 33, "seek": 11036, "start": 132.36, "end": 136.36, "text": " You could still use these new instructions, though, with the smaller register sizes,", "tokens": [509, 727, 920, 764, 613, 777, 9415, 11, 1673, 11, 365, 264, 4356, 7280, 11602, 11], "temperature": 0.0, "avg_logprob": -0.14816824595133463, "compression_ratio": 1.6801470588235294, "no_speech_prob": 6.250244041439146e-05}, {"id": 34, "seek": 13636, "start": 136.36, "end": 140.36, "text": " and I'll show an example of this later.", "tokens": [293, 286, 603, 855, 364, 1365, 295, 341, 1780, 13], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 35, "seek": 13636, "start": 140.36, "end": 147.36, "text": " But the first Intel CPUs not to have throttling were the Islake 10th and 11th gen Intel CPUs.", "tokens": [583, 264, 700, 19762, 13199, 82, 406, 281, 362, 739, 1521, 1688, 645, 264, 1119, 75, 619, 1266, 392, 293, 2975, 392, 1049, 19762, 13199, 82, 13], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 36, "seek": 13636, "start": 147.36, "end": 152.36, "text": " They were the first to have no throttling, and this meant these ZMM-based instructions", "tokens": [814, 645, 264, 700, 281, 362, 572, 739, 1521, 1688, 11, 293, 341, 4140, 613, 1176, 17365, 12, 6032, 9415], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 37, "seek": 13636, "start": 152.36, "end": 156.36, "text": " could be first-class citizens.", "tokens": [727, 312, 700, 12, 11665, 7180, 13], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 38, "seek": 13636, "start": 156.36, "end": 160.36, "text": " How to get started, one of the tricky things as well in the last few years", "tokens": [1012, 281, 483, 1409, 11, 472, 295, 264, 12414, 721, 382, 731, 294, 264, 1036, 1326, 924], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 39, "seek": 13636, "start": 160.36, "end": 164.36, "text": " has been actually getting access to devices that have this,", "tokens": [575, 668, 767, 1242, 2105, 281, 5759, 300, 362, 341, 11], "temperature": 0.0, "avg_logprob": -0.10733488370787422, "compression_ratio": 1.5819672131147542, "no_speech_prob": 8.493111818097532e-05}, {"id": 40, "seek": 16436, "start": 164.36, "end": 167.36, "text": " and unfortunately Intel have not made it easy.", "tokens": [293, 7015, 19762, 362, 406, 1027, 309, 1858, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 41, "seek": 16436, "start": 167.36, "end": 172.36, "text": " From their 12th generation, CPUs have actually removed support in consumer equipment.", "tokens": [3358, 641, 2272, 392, 5125, 11, 13199, 82, 362, 767, 7261, 1406, 294, 9711, 5927, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 42, "seek": 16436, "start": 172.36, "end": 176.36, "text": " It's still available on AMD as in four CPUs, though.", "tokens": [467, 311, 920, 2435, 322, 34808, 382, 294, 1451, 13199, 82, 11, 1673, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 43, "seek": 16436, "start": 176.36, "end": 179.36, "text": " And if using the cloud is your kind of thing,", "tokens": [400, 498, 1228, 264, 4588, 307, 428, 733, 295, 551, 11], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 44, "seek": 16436, "start": 179.36, "end": 182.36, "text": " available also from many cloud providers in the server CPU range,", "tokens": [2435, 611, 490, 867, 4588, 11330, 294, 264, 7154, 13199, 3613, 11], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 45, "seek": 16436, "start": 182.36, "end": 185.36, "text": " such as AWS or others.", "tokens": [1270, 382, 17650, 420, 2357, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 46, "seek": 16436, "start": 185.36, "end": 188.36, "text": " Personally, I think the easiest way is to buy an 11th generation Intel NUC.", "tokens": [21079, 11, 286, 519, 264, 12889, 636, 307, 281, 2256, 364, 2975, 392, 5125, 19762, 426, 23967, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 47, "seek": 16436, "start": 188.36, "end": 190.36, "text": " That's what I did for FMpeg.", "tokens": [663, 311, 437, 286, 630, 337, 29614, 494, 70, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 48, "seek": 16436, "start": 190.36, "end": 193.36, "text": " I bought two of them for the projects and host them.", "tokens": [286, 4243, 732, 295, 552, 337, 264, 4455, 293, 3975, 552, 13], "temperature": 0.0, "avg_logprob": -0.13250942528247833, "compression_ratio": 1.5775577557755776, "no_speech_prob": 7.218317477963865e-05}, {"id": 49, "seek": 19336, "start": 193.36, "end": 196.36, "text": " The easiest way, it's only a few hundred euros.", "tokens": [440, 12889, 636, 11, 309, 311, 787, 257, 1326, 3262, 14160, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 50, "seek": 19336, "start": 196.36, "end": 198.36, "text": " It's quiet, it fits under your desk.", "tokens": [467, 311, 5677, 11, 309, 9001, 833, 428, 10026, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 51, "seek": 19336, "start": 198.36, "end": 204.36, "text": " And that's the easiest way to get started, you get a full AVX512 stack.", "tokens": [400, 300, 311, 264, 12889, 636, 281, 483, 1409, 11, 291, 483, 257, 1577, 30198, 55, 20, 4762, 8630, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 52, "seek": 19336, "start": 204.36, "end": 210.36, "text": " So let's look at some of the existing work in multimedia that's using AVX512.", "tokens": [407, 718, 311, 574, 412, 512, 295, 264, 6741, 589, 294, 49202, 300, 311, 1228, 30198, 55, 20, 4762, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 53, "seek": 19336, "start": 210.36, "end": 214.36, "text": " And probably most importantly, we had the sort of introduction from JB earlier today,", "tokens": [400, 1391, 881, 8906, 11, 321, 632, 264, 1333, 295, 9339, 490, 43019, 3071, 965, 11], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 54, "seek": 19336, "start": 214.36, "end": 216.36, "text": " the David project, which is an AV1 decoder.", "tokens": [264, 4389, 1716, 11, 597, 307, 364, 30198, 16, 979, 19866, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 55, "seek": 19336, "start": 216.36, "end": 222.36, "text": " This added AVX512 support, I think a year or two ago.", "tokens": [639, 3869, 30198, 55, 20, 4762, 1406, 11, 286, 519, 257, 1064, 420, 732, 2057, 13], "temperature": 0.0, "avg_logprob": -0.14670967664874968, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.0001327717036474496}, {"id": 56, "seek": 22236, "start": 222.36, "end": 227.36, "text": " It's particularly beneficial in AV1 because AV1 has large block sizes,", "tokens": [467, 311, 4098, 14072, 294, 30198, 16, 570, 30198, 16, 575, 2416, 3461, 11602, 11], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 57, "seek": 22236, "start": 227.36, "end": 230.36, "text": " sort of in comparison to more traditional standards,", "tokens": [1333, 295, 294, 9660, 281, 544, 5164, 7787, 11], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 58, "seek": 22236, "start": 230.36, "end": 233.36, "text": " traditional codecs like H264 and others, which are smaller.", "tokens": [5164, 3089, 14368, 411, 389, 10880, 19, 293, 2357, 11, 597, 366, 4356, 13], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 59, "seek": 22236, "start": 233.36, "end": 237.36, "text": " So AVX512 in David gave, I think, 10 to 20% overall.", "tokens": [407, 30198, 55, 20, 4762, 294, 4389, 2729, 11, 286, 519, 11, 1266, 281, 945, 4, 4787, 13], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 60, "seek": 22236, "start": 237.36, "end": 239.36, "text": " So not just the functions themselves,", "tokens": [407, 406, 445, 264, 6828, 2969, 11], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 61, "seek": 22236, "start": 239.36, "end": 243.36, "text": " the overall decode performance was improved.", "tokens": [264, 4787, 979, 1429, 3389, 390, 9689, 13], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 62, "seek": 22236, "start": 243.36, "end": 247.36, "text": " And it's actually been a running topic, which is quite interesting over today,", "tokens": [400, 309, 311, 767, 668, 257, 2614, 4829, 11, 597, 307, 1596, 1880, 670, 965, 11], "temperature": 0.0, "avg_logprob": -0.15742109354259898, "compression_ratio": 1.4962406015037595, "no_speech_prob": 8.281212649308145e-05}, {"id": 63, "seek": 24736, "start": 247.36, "end": 253.36, "text": " in FMPEG that we use, and David, and also we use this classic FMPEG H264 approach to assembly,", "tokens": [294, 29614, 5208, 38, 300, 321, 764, 11, 293, 4389, 11, 293, 611, 321, 764, 341, 7230, 29614, 5208, 38, 389, 10880, 19, 3109, 281, 12103, 11], "temperature": 0.0, "avg_logprob": -0.1427772603136428, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.00011639008152997121}, {"id": 64, "seek": 24736, "start": 253.36, "end": 262.36, "text": " which is no intrinsics, no inline assembly, no special SIMD sort of libraries to make life easier.", "tokens": [597, 307, 572, 28621, 1167, 11, 572, 294, 1889, 12103, 11, 572, 2121, 24738, 35, 1333, 295, 15148, 281, 652, 993, 3571, 13], "temperature": 0.0, "avg_logprob": -0.1427772603136428, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.00011639008152997121}, {"id": 65, "seek": 24736, "start": 262.36, "end": 268.36, "text": " It's raw assembly language, and I'll show some examples of that.", "tokens": [467, 311, 8936, 12103, 2856, 11, 293, 286, 603, 855, 512, 5110, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.1427772603136428, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.00011639008152997121}, {"id": 66, "seek": 24736, "start": 268.36, "end": 273.36, "text": " And also we don't also compile them in and force you to have a particular CPU generation.", "tokens": [400, 611, 321, 500, 380, 611, 31413, 552, 294, 293, 3464, 291, 281, 362, 257, 1729, 13199, 5125, 13], "temperature": 0.0, "avg_logprob": -0.1427772603136428, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.00011639008152997121}, {"id": 67, "seek": 27336, "start": 273.36, "end": 277.36, "text": " And I know this is quite controversial. I think it's MongoDB, for example.", "tokens": [400, 286, 458, 341, 307, 1596, 17323, 13, 286, 519, 309, 311, 48380, 27735, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 68, "seek": 27336, "start": 277.36, "end": 284.36, "text": " They forced one-year a particular CPU generation, and this was super controversial because not everybody had that.", "tokens": [814, 7579, 472, 12, 5294, 257, 1729, 13199, 5125, 11, 293, 341, 390, 1687, 17323, 570, 406, 2201, 632, 300, 13], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 69, "seek": 27336, "start": 284.36, "end": 289.36, "text": " So what we do in FMPEG is we detect CPU capabilities, and I'll show you the function in a minute.", "tokens": [407, 437, 321, 360, 294, 29614, 5208, 38, 307, 321, 5531, 13199, 10862, 11, 293, 286, 603, 855, 291, 264, 2445, 294, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 70, "seek": 27336, "start": 289.36, "end": 292.36, "text": " And then we use function pointers, so we set them once at the beginning,", "tokens": [400, 550, 321, 764, 2445, 44548, 11, 370, 321, 992, 552, 1564, 412, 264, 2863, 11], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 71, "seek": 27336, "start": 292.36, "end": 297.36, "text": " and therefore the overhead of doing that measurement is checked once,", "tokens": [293, 4412, 264, 19922, 295, 884, 300, 13160, 307, 10033, 1564, 11], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 72, "seek": 27336, "start": 297.36, "end": 301.36, "text": " and then there's function pointers that are executed after that.", "tokens": [293, 550, 456, 311, 2445, 44548, 300, 366, 17577, 934, 300, 13], "temperature": 0.0, "avg_logprob": -0.129726240190409, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.3817264415556565e-05}, {"id": 73, "seek": 30136, "start": 301.36, "end": 307.36, "text": " And unfortunately, on Intel, there's a very messy Venn diagram of capabilities.", "tokens": [400, 7015, 11, 322, 19762, 11, 456, 311, 257, 588, 16191, 691, 1857, 10686, 295, 10862, 13], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 74, "seek": 30136, "start": 307.36, "end": 311.36, "text": " But in practice, we really, so far, and they may change their mind,", "tokens": [583, 294, 3124, 11, 321, 534, 11, 370, 1400, 11, 293, 436, 815, 1319, 641, 1575, 11], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 75, "seek": 30136, "start": 311.36, "end": 313.36, "text": " but care about these kind of two things.", "tokens": [457, 1127, 466, 613, 733, 295, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 76, "seek": 30136, "start": 313.36, "end": 317.36, "text": " So these are the CPU flags you get in FMPEG.", "tokens": [407, 613, 366, 264, 13199, 23265, 291, 483, 294, 29614, 5208, 38, 13], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 77, "seek": 30136, "start": 317.36, "end": 323.36, "text": " There are others, but the AVX-512-related ones are broadly speaking legacy Skylake,", "tokens": [821, 366, 2357, 11, 457, 264, 30198, 55, 12, 20, 4762, 12, 12004, 2306, 366, 19511, 4124, 11711, 9879, 75, 619, 11], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 78, "seek": 30136, "start": 323.36, "end": 326.36, "text": " and the newer ICL are put in bold for Ice Lake.", "tokens": [293, 264, 17628, 14360, 43, 366, 829, 294, 11928, 337, 15332, 10582, 13], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 79, "seek": 30136, "start": 326.36, "end": 330.36, "text": " But you can see there are actually a lot of different subcategories in there.", "tokens": [583, 291, 393, 536, 456, 366, 767, 257, 688, 295, 819, 1422, 66, 2968, 2083, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.1133326416015625, "compression_ratio": 1.5275862068965518, "no_speech_prob": 4.9799833504948765e-05}, {"id": 80, "seek": 33036, "start": 330.36, "end": 333.36, "text": " But in practice, it's at the moment one or the other,", "tokens": [583, 294, 3124, 11, 309, 311, 412, 264, 1623, 472, 420, 264, 661, 11], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 81, "seek": 33036, "start": 333.36, "end": 338.36, "text": " but as I mentioned, Intel are very keen on adding and removing features", "tokens": [457, 382, 286, 2835, 11, 19762, 366, 588, 20297, 322, 5127, 293, 12720, 4122], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 82, "seek": 33036, "start": 338.36, "end": 343.36, "text": " and possibly even charging your subscription for certain features is one of their new ideas.", "tokens": [293, 6264, 754, 11379, 428, 17231, 337, 1629, 4122, 307, 472, 295, 641, 777, 3487, 13], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 83, "seek": 33036, "start": 343.36, "end": 348.36, "text": " So it could be that newer additions to this are subscription-based,", "tokens": [407, 309, 727, 312, 300, 17628, 35113, 281, 341, 366, 17231, 12, 6032, 11], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 84, "seek": 33036, "start": 348.36, "end": 352.36, "text": " or you buy and pay for it later, or something much more complicated.", "tokens": [420, 291, 2256, 293, 1689, 337, 309, 1780, 11, 420, 746, 709, 544, 6179, 13], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 85, "seek": 33036, "start": 352.36, "end": 354.36, "text": " So who knows?", "tokens": [407, 567, 3255, 30], "temperature": 0.0, "avg_logprob": -0.09944032312749507, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00012191839778097346}, {"id": 86, "seek": 35436, "start": 354.36, "end": 360.36, "text": " So I guess, unfortunately, there's some sort of dependency", "tokens": [407, 286, 2041, 11, 7015, 11, 456, 311, 512, 1333, 295, 33621], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 87, "seek": 35436, "start": 360.36, "end": 363.36, "text": " in explaining a few of the topics and some of the benefits", "tokens": [294, 13468, 257, 1326, 295, 264, 8378, 293, 512, 295, 264, 5311], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 88, "seek": 35436, "start": 363.36, "end": 365.36, "text": " without explaining some of the backstory.", "tokens": [1553, 13468, 512, 295, 264, 36899, 13], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 89, "seek": 35436, "start": 365.36, "end": 372.36, "text": " So historically, in old AVX, you had all the 256-bit registers,", "tokens": [407, 16180, 11, 294, 1331, 30198, 55, 11, 291, 632, 439, 264, 38882, 12, 5260, 38351, 11], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 90, "seek": 35436, "start": 372.36, "end": 375.36, "text": " and these were split in practice into lanes.", "tokens": [293, 613, 645, 7472, 294, 3124, 666, 25397, 13], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 91, "seek": 35436, "start": 375.36, "end": 380.36, "text": " So in practice, you've got 228-bit lanes,", "tokens": [407, 294, 3124, 11, 291, 600, 658, 5853, 23, 12, 5260, 25397, 11], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 92, "seek": 35436, "start": 380.36, "end": 383.36, "text": " and instructions, broadly speaking, operated in these lanes.", "tokens": [293, 9415, 11, 19511, 4124, 11, 20826, 294, 613, 25397, 13], "temperature": 0.0, "avg_logprob": -0.08761290914004612, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0001552072208141908}, {"id": 93, "seek": 38336, "start": 383.36, "end": 387.36, "text": " So if you ran a instruction, it worked on data,", "tokens": [407, 498, 291, 5872, 257, 10951, 11, 309, 2732, 322, 1412, 11], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 94, "seek": 38336, "start": 387.36, "end": 389.36, "text": " and it was actually quite difficult.", "tokens": [293, 309, 390, 767, 1596, 2252, 13], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 95, "seek": 38336, "start": 389.36, "end": 393.36, "text": " It was possible, but difficult to move data between these lanes.", "tokens": [467, 390, 1944, 11, 457, 2252, 281, 1286, 1412, 1296, 613, 25397, 13], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 96, "seek": 38336, "start": 393.36, "end": 400.36, "text": " And it's one of the historical limitations on existing AVX and AVX2 code that we have", "tokens": [400, 309, 311, 472, 295, 264, 8584, 15705, 322, 6741, 30198, 55, 293, 30198, 55, 17, 3089, 300, 321, 362], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 97, "seek": 38336, "start": 400.36, "end": 404.36, "text": " in FMNPEG is lane crossing and all sorts of trickery", "tokens": [294, 29614, 45, 5208, 38, 307, 12705, 14712, 293, 439, 7527, 295, 4282, 2109], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 98, "seek": 38336, "start": 404.36, "end": 409.36, "text": " that essentially cost CPU cycles to take up this time,", "tokens": [300, 4476, 2063, 13199, 17796, 281, 747, 493, 341, 565, 11], "temperature": 0.0, "avg_logprob": -0.11954551738697095, "compression_ratio": 1.491304347826087, "no_speech_prob": 5.606889317277819e-05}, {"id": 99, "seek": 40936, "start": 409.36, "end": 413.36, "text": " that takes time to compensate for the lanes.", "tokens": [300, 2516, 565, 281, 29458, 337, 264, 25397, 13], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 100, "seek": 40936, "start": 415.36, "end": 417.36, "text": " I have to talk a bit about KMAS registers as well.", "tokens": [286, 362, 281, 751, 257, 857, 466, 591, 44, 3160, 38351, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 101, "seek": 40936, "start": 417.36, "end": 420.36, "text": " So AVX512 has these new set of registers called KMASks,", "tokens": [407, 30198, 55, 20, 4762, 575, 613, 777, 992, 295, 38351, 1219, 591, 44, 3160, 1694, 11], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 102, "seek": 40936, "start": 420.36, "end": 427.36, "text": " K0 to K7, and this allows a destination register to remain unchanged.", "tokens": [591, 15, 281, 591, 22, 11, 293, 341, 4045, 257, 12236, 7280, 281, 6222, 44553, 13], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 103, "seek": 40936, "start": 427.36, "end": 430.36, "text": " So, for example, underneath, you could have an addition,", "tokens": [407, 11, 337, 1365, 11, 7223, 11, 291, 727, 362, 364, 4500, 11], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 104, "seek": 40936, "start": 430.36, "end": 432.36, "text": " but actually it's a simple case,", "tokens": [457, 767, 309, 311, 257, 2199, 1389, 11], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 105, "seek": 40936, "start": 432.36, "end": 435.36, "text": " and obviously you could just add zero, and it's unchanged,", "tokens": [293, 2745, 291, 727, 445, 909, 4018, 11, 293, 309, 311, 44553, 11], "temperature": 0.0, "avg_logprob": -0.1586673844535396, "compression_ratio": 1.5546218487394958, "no_speech_prob": 3.651213410194032e-05}, {"id": 106, "seek": 43536, "start": 435.36, "end": 439.36, "text": " but you could actually use the KMAS to say,", "tokens": [457, 291, 727, 767, 764, 264, 591, 44, 3160, 281, 584, 11], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 107, "seek": 43536, "start": 439.36, "end": 442.36, "text": " actually, I don't want addition to be applied to these elements.", "tokens": [767, 11, 286, 500, 380, 528, 4500, 281, 312, 6456, 281, 613, 4959, 13], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 108, "seek": 43536, "start": 442.36, "end": 444.36, "text": " I want this to be a pure pass-through,", "tokens": [286, 528, 341, 281, 312, 257, 6075, 1320, 12, 11529, 11], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 109, "seek": 43536, "start": 444.36, "end": 448.36, "text": " or you could even force some of the elements to zero if you wanted to.", "tokens": [420, 291, 727, 754, 3464, 512, 295, 264, 4959, 281, 4018, 498, 291, 1415, 281, 13], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 110, "seek": 43536, "start": 448.36, "end": 452.36, "text": " There's a specific, I think it's a flag that lets you do that.", "tokens": [821, 311, 257, 2685, 11, 286, 519, 309, 311, 257, 7166, 300, 6653, 291, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 111, "seek": 43536, "start": 452.36, "end": 455.36, "text": " And there's a whole set of new instructions to go and manipulate these KMAS registers,", "tokens": [400, 456, 311, 257, 1379, 992, 295, 777, 9415, 281, 352, 293, 20459, 613, 591, 44, 3160, 38351, 11], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 112, "seek": 43536, "start": 455.36, "end": 459.36, "text": " and certainly David, in particular, uses, makes good use of KMASks.", "tokens": [293, 3297, 4389, 11, 294, 1729, 11, 4960, 11, 1669, 665, 764, 295, 591, 44, 3160, 1694, 13], "temperature": 0.0, "avg_logprob": -0.10595543403935627, "compression_ratio": 1.6329588014981273, "no_speech_prob": 4.406392326927744e-05}, {"id": 113, "seek": 45936, "start": 459.36, "end": 464.36, "text": " So now that I've sort of explained some of the back story,", "tokens": [407, 586, 300, 286, 600, 1333, 295, 8825, 512, 295, 264, 646, 1657, 11], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 114, "seek": 45936, "start": 464.36, "end": 468.36, "text": " I think it's fair to say one of the most important instructions,", "tokens": [286, 519, 309, 311, 3143, 281, 584, 472, 295, 264, 881, 1021, 9415, 11], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 115, "seek": 45936, "start": 468.36, "end": 473.36, "text": " if not the most important instruction, is our shuffles in multimedia.", "tokens": [498, 406, 264, 881, 1021, 10951, 11, 307, 527, 402, 1245, 904, 294, 49202, 13], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 116, "seek": 45936, "start": 473.36, "end": 477.36, "text": " Also known as permutes, and there might be a technical difference", "tokens": [2743, 2570, 382, 4784, 1819, 11, 293, 456, 1062, 312, 257, 6191, 2649], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 117, "seek": 45936, "start": 477.36, "end": 478.36, "text": " between a shuffle and a permute.", "tokens": [1296, 257, 39426, 293, 257, 4784, 1169, 13], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 118, "seek": 45936, "start": 478.36, "end": 479.36, "text": " Someone might be able to correct me.", "tokens": [8734, 1062, 312, 1075, 281, 3006, 385, 13], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 119, "seek": 45936, "start": 479.36, "end": 481.36, "text": " There might be some mathematical difference,", "tokens": [821, 1062, 312, 512, 18894, 2649, 11], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 120, "seek": 45936, "start": 481.36, "end": 483.36, "text": " but these are the most important,", "tokens": [457, 613, 366, 264, 881, 1021, 11], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 121, "seek": 45936, "start": 483.36, "end": 486.36, "text": " or one of the most important, instructions in multimedia.", "tokens": [420, 472, 295, 264, 881, 1021, 11, 9415, 294, 49202, 13], "temperature": 0.0, "avg_logprob": -0.11765852545061682, "compression_ratio": 1.9745762711864407, "no_speech_prob": 3.2539264793740585e-05}, {"id": 122, "seek": 48636, "start": 486.36, "end": 489.36, "text": " And as you can see on the right, basically it lets you,", "tokens": [400, 382, 291, 393, 536, 322, 264, 558, 11, 1936, 309, 6653, 291, 11], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 123, "seek": 48636, "start": 489.36, "end": 493.36, "text": " shuffles let you have various bits of data", "tokens": [402, 1245, 904, 718, 291, 362, 3683, 9239, 295, 1412], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 124, "seek": 48636, "start": 493.36, "end": 495.36, "text": " and rearrange them in any way that you want.", "tokens": [293, 39568, 552, 294, 604, 636, 300, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 125, "seek": 48636, "start": 495.36, "end": 501.36, "text": " Duplicate them, as you can see, or even set individual elements to zero.", "tokens": [5153, 4770, 473, 552, 11, 382, 291, 393, 536, 11, 420, 754, 992, 2609, 4959, 281, 4018, 13], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 126, "seek": 48636, "start": 501.36, "end": 506.36, "text": " And this is, for example, famously one use case of this", "tokens": [400, 341, 307, 11, 337, 1365, 11, 34360, 472, 764, 1389, 295, 341], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 127, "seek": 48636, "start": 506.36, "end": 508.36, "text": " is in the zigzag scan of FFMPEG,", "tokens": [307, 294, 264, 38290, 43886, 11049, 295, 479, 37, 44, 5208, 38, 11], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 128, "seek": 48636, "start": 508.36, "end": 512.36, "text": " which groups larger coefficients in a block together.", "tokens": [597, 3935, 4833, 31994, 294, 257, 3461, 1214, 13], "temperature": 0.0, "avg_logprob": -0.09807666297097808, "compression_ratio": 1.5341880341880343, "no_speech_prob": 5.496279482031241e-05}, {"id": 129, "seek": 51236, "start": 512.36, "end": 516.36, "text": " But the way that that's done is via a zigzag scan.", "tokens": [583, 264, 636, 300, 300, 311, 1096, 307, 5766, 257, 38290, 43886, 11049, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 130, "seek": 51236, "start": 516.36, "end": 519.36, "text": " The thing about vpermb, which is the new AVX-512 instruction,", "tokens": [440, 551, 466, 371, 610, 76, 65, 11, 597, 307, 264, 777, 30198, 55, 12, 20, 4762, 10951, 11], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 131, "seek": 51236, "start": 519.36, "end": 521.36, "text": " is it lets you cross a lane.", "tokens": [307, 309, 6653, 291, 3278, 257, 12705, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 132, "seek": 51236, "start": 521.36, "end": 523.36, "text": " This wasn't something that was possible in before.", "tokens": [639, 2067, 380, 746, 300, 390, 1944, 294, 949, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 133, "seek": 51236, "start": 523.36, "end": 529.36, "text": " And as I'll show you later, this makes things substantially faster in many cases.", "tokens": [400, 382, 286, 603, 855, 291, 1780, 11, 341, 1669, 721, 30797, 4663, 294, 867, 3331, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 134, "seek": 51236, "start": 529.36, "end": 532.36, "text": " pshuffb, probably one of the most commonly used instructions", "tokens": [280, 2716, 1245, 65, 11, 1391, 472, 295, 264, 881, 12719, 1143, 9415], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 135, "seek": 51236, "start": 532.36, "end": 534.36, "text": " in all of open source multimedia.", "tokens": [294, 439, 295, 1269, 4009, 49202, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 136, "seek": 51236, "start": 534.36, "end": 538.36, "text": " You do get grep, pshuffb, there'll be a huge, you know,", "tokens": [509, 360, 483, 6066, 79, 11, 280, 2716, 1245, 65, 11, 456, 603, 312, 257, 2603, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 137, "seek": 51236, "start": 538.36, "end": 541.36, "text": " that your screen will be full of pshuffb.", "tokens": [300, 428, 2568, 486, 312, 1577, 295, 280, 2716, 1245, 65, 13], "temperature": 0.0, "avg_logprob": -0.145976870400565, "compression_ratio": 1.583050847457627, "no_speech_prob": 1.5598356185364537e-05}, {"id": 138, "seek": 54136, "start": 541.36, "end": 546.36, "text": " They're used everywhere in open source multimedia.", "tokens": [814, 434, 1143, 5315, 294, 1269, 4009, 49202, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 139, "seek": 54136, "start": 546.36, "end": 548.36, "text": " pshuffb had a kind of useful benefit", "tokens": [280, 2716, 1245, 65, 632, 257, 733, 295, 4420, 5121], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 140, "seek": 54136, "start": 548.36, "end": 550.36, "text": " that if you set the index to minus one,", "tokens": [300, 498, 291, 992, 264, 8186, 281, 3175, 472, 11], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 141, "seek": 54136, "start": 550.36, "end": 552.36, "text": " you had to automatically do the zeroing out.", "tokens": [291, 632, 281, 6772, 360, 264, 4018, 278, 484, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 142, "seek": 54136, "start": 552.36, "end": 554.36, "text": " With vpermb, this isn't the case.", "tokens": [2022, 371, 610, 76, 65, 11, 341, 1943, 380, 264, 1389, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 143, "seek": 54136, "start": 554.36, "end": 557.36, "text": " You have to actually use kmasks to do that.", "tokens": [509, 362, 281, 767, 764, 350, 3799, 1694, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 144, "seek": 54136, "start": 557.36, "end": 561.36, "text": " So that just makes things slightly more complicated.", "tokens": [407, 300, 445, 1669, 721, 4748, 544, 6179, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 145, "seek": 54136, "start": 561.36, "end": 565.36, "text": " There's all sorts of other interesting permutes that AVX-512 offers.", "tokens": [821, 311, 439, 7527, 295, 661, 1880, 4784, 1819, 300, 30198, 55, 12, 20, 4762, 7736, 13], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 146, "seek": 54136, "start": 565.36, "end": 568.36, "text": " I think David also, again, makes good use of this vperm2b,", "tokens": [286, 519, 4389, 611, 11, 797, 11, 1669, 665, 764, 295, 341, 371, 610, 76, 17, 65, 11], "temperature": 0.0, "avg_logprob": -0.12071333156795952, "compression_ratio": 1.5448028673835126, "no_speech_prob": 2.7648104151012376e-05}, {"id": 147, "seek": 56836, "start": 568.36, "end": 571.36, "text": " so you can actually not just have one set of data,", "tokens": [370, 291, 393, 767, 406, 445, 362, 472, 992, 295, 1412, 11], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 148, "seek": 56836, "start": 571.36, "end": 573.36, "text": " you can actually permute from two different registers.", "tokens": [291, 393, 767, 4784, 1169, 490, 732, 819, 38351, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 149, "seek": 56836, "start": 573.36, "end": 576.36, "text": " So you could have ijk, et cetera, et cetera in a different register,", "tokens": [407, 291, 727, 362, 741, 73, 74, 11, 1030, 11458, 11, 1030, 11458, 294, 257, 819, 7280, 11], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 150, "seek": 56836, "start": 576.36, "end": 579.36, "text": " and your output could be a mixture of both of those.", "tokens": [293, 428, 5598, 727, 312, 257, 9925, 295, 1293, 295, 729, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 151, "seek": 56836, "start": 579.36, "end": 583.36, "text": " So that's kind of interesting.", "tokens": [407, 300, 311, 733, 295, 1880, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 152, "seek": 56836, "start": 583.36, "end": 585.36, "text": " Variable shifts.", "tokens": [32511, 712, 19201, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 153, "seek": 56836, "start": 585.36, "end": 588.36, "text": " You have now variable right shifts.", "tokens": [509, 362, 586, 7006, 558, 19201, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 154, "seek": 56836, "start": 588.36, "end": 592.36, "text": " So I've given the example of a vpsrlvw logical right shift", "tokens": [407, 286, 600, 2212, 264, 1365, 295, 257, 371, 1878, 81, 75, 85, 86, 14978, 558, 5513], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 155, "seek": 56836, "start": 592.36, "end": 596.36, "text": " and vpslvw variable left shift logical.", "tokens": [293, 371, 1878, 75, 85, 86, 7006, 1411, 5513, 14978, 13], "temperature": 0.0, "avg_logprob": -0.10402823302705409, "compression_ratio": 1.7903930131004366, "no_speech_prob": 0.0001141546672442928}, {"id": 156, "seek": 59636, "start": 596.36, "end": 600.36, "text": " Big letter soup, quite confusing.", "tokens": [5429, 5063, 7884, 11, 1596, 13181, 13], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 157, "seek": 59636, "start": 600.36, "end": 604.36, "text": " In fact, when writing this slide, I misspelt the word shift.", "tokens": [682, 1186, 11, 562, 3579, 341, 4137, 11, 286, 1713, 79, 2018, 264, 1349, 5513, 13], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 158, "seek": 59636, "start": 604.36, "end": 607.36, "text": " You can have a think about how that may have been spelt.", "tokens": [509, 393, 362, 257, 519, 466, 577, 300, 815, 362, 668, 637, 2018, 13], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 159, "seek": 59636, "start": 607.36, "end": 610.36, "text": " Thankfully, that's the good, thankfully, the rehearsals,", "tokens": [28344, 11, 300, 311, 264, 665, 11, 27352, 11, 264, 17052, 1124, 11], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 160, "seek": 59636, "start": 610.36, "end": 611.36, "text": " and we'll pick this up.", "tokens": [293, 321, 603, 1888, 341, 493, 13], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 161, "seek": 59636, "start": 611.36, "end": 613.36, "text": " But this word soup is exceptionally confusing,", "tokens": [583, 341, 1349, 7884, 307, 37807, 13181, 11], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 162, "seek": 59636, "start": 613.36, "end": 616.36, "text": " both when writing slides and writing code, it seems.", "tokens": [1293, 562, 3579, 9788, 293, 3579, 3089, 11, 309, 2544, 13], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 163, "seek": 59636, "start": 616.36, "end": 621.36, "text": " So historically, to do variable shifts,", "tokens": [407, 16180, 11, 281, 360, 7006, 19201, 11], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 164, "seek": 59636, "start": 621.36, "end": 623.36, "text": " so if you want to take, obviously, just to step back,", "tokens": [370, 498, 291, 528, 281, 747, 11, 2745, 11, 445, 281, 1823, 646, 11], "temperature": 0.0, "avg_logprob": -0.1454829361479161, "compression_ratio": 1.6771653543307086, "no_speech_prob": 5.559457713388838e-05}, {"id": 165, "seek": 62336, "start": 623.36, "end": 626.36, "text": " take an element and shift each element by a different amount,", "tokens": [747, 364, 4478, 293, 5513, 1184, 4478, 538, 257, 819, 2372, 11], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 166, "seek": 62336, "start": 626.36, "end": 628.36, "text": " this was quite complicated.", "tokens": [341, 390, 1596, 6179, 13], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 167, "seek": 62336, "start": 628.36, "end": 632.36, "text": " There's various bits of trickery, various idioms that people use", "tokens": [821, 311, 3683, 9239, 295, 4282, 2109, 11, 3683, 18014, 4785, 300, 561, 764], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 168, "seek": 62336, "start": 632.36, "end": 634.36, "text": " to try and emulate that, but they had limitations.", "tokens": [281, 853, 293, 45497, 300, 11, 457, 436, 632, 15705, 13], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 169, "seek": 62336, "start": 634.36, "end": 638.36, "text": " I think, for example, you were not shifting by zero,", "tokens": [286, 519, 11, 337, 1365, 11, 291, 645, 406, 17573, 538, 4018, 11], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 170, "seek": 62336, "start": 638.36, "end": 642.36, "text": " possibly wasn't allowed in one of the various bits of trickery.", "tokens": [6264, 2067, 380, 4350, 294, 472, 295, 264, 3683, 9239, 295, 4282, 2109, 13], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 171, "seek": 62336, "start": 642.36, "end": 644.36, "text": " And so if you needed a zero shift,", "tokens": [400, 370, 498, 291, 2978, 257, 4018, 5513, 11], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 172, "seek": 62336, "start": 644.36, "end": 646.36, "text": " you had to do it a different way, et cetera, et cetera.", "tokens": [291, 632, 281, 360, 309, 257, 819, 636, 11, 1030, 11458, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 173, "seek": 62336, "start": 646.36, "end": 650.36, "text": " But now you have this variable shift, and it's all usable.", "tokens": [583, 586, 291, 362, 341, 7006, 5513, 11, 293, 309, 311, 439, 29975, 13], "temperature": 0.0, "avg_logprob": -0.06939757339597687, "compression_ratio": 1.754646840148699, "no_speech_prob": 5.5677490308880806e-05}, {"id": 174, "seek": 65036, "start": 650.36, "end": 653.36, "text": " Equally on the left shift, the naive way of doing an emulated", "tokens": [15624, 379, 322, 264, 1411, 5513, 11, 264, 29052, 636, 295, 884, 364, 846, 6987], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 175, "seek": 65036, "start": 653.36, "end": 656.36, "text": " left shift is just to multiply, but these instructions", "tokens": [1411, 5513, 307, 445, 281, 12972, 11, 457, 613, 9415], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 176, "seek": 65036, "start": 656.36, "end": 658.36, "text": " are actually faster than the multiply,", "tokens": [366, 767, 4663, 813, 264, 12972, 11], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 177, "seek": 65036, "start": 658.36, "end": 660.36, "text": " so there's still some benefit.", "tokens": [370, 456, 311, 920, 512, 5121, 13], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 178, "seek": 65036, "start": 662.36, "end": 665.36, "text": " VP Turnlog D, this is, I think, no presentation", "tokens": [35812, 7956, 4987, 413, 11, 341, 307, 11, 286, 519, 11, 572, 5860], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 179, "seek": 65036, "start": 665.36, "end": 670.36, "text": " about AVX 512 could not fail to mention VP Turnlog D.", "tokens": [466, 30198, 55, 1025, 4762, 727, 406, 3061, 281, 2152, 35812, 7956, 4987, 413, 13], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 180, "seek": 65036, "start": 670.36, "end": 673.36, "text": " This instruction is literally a kitchen sink.", "tokens": [639, 10951, 307, 3736, 257, 6525, 9500, 13], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 181, "seek": 65036, "start": 673.36, "end": 676.36, "text": " It's quite remarkable in what it can actually do.", "tokens": [467, 311, 1596, 12802, 294, 437, 309, 393, 767, 360, 13], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 182, "seek": 65036, "start": 676.36, "end": 678.36, "text": " You can literally program a truth table", "tokens": [509, 393, 3736, 1461, 257, 3494, 3199], "temperature": 0.0, "avg_logprob": -0.12704937858919127, "compression_ratio": 1.6370656370656371, "no_speech_prob": 4.3090312829008326e-05}, {"id": 183, "seek": 67836, "start": 678.36, "end": 680.36, "text": " within an individual instruction itself,", "tokens": [1951, 364, 2609, 10951, 2564, 11], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 184, "seek": 67836, "start": 680.36, "end": 684.36, "text": " and, in theory, could replace up to eight different instructions.", "tokens": [293, 11, 294, 5261, 11, 727, 7406, 493, 281, 3180, 819, 9415, 13], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 185, "seek": 67836, "start": 684.36, "end": 689.36, "text": " So you could do a whole presentation on VP Turnlog D.", "tokens": [407, 291, 727, 360, 257, 1379, 5860, 322, 35812, 7956, 4987, 413, 13], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 186, "seek": 67836, "start": 689.36, "end": 693.36, "text": " So I thought it would be best to try and pick one of the simplest ones,", "tokens": [407, 286, 1194, 309, 576, 312, 1151, 281, 853, 293, 1888, 472, 295, 264, 22811, 2306, 11], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 187, "seek": 67836, "start": 693.36, "end": 695.36, "text": " which is a ternary operation.", "tokens": [597, 307, 257, 256, 1248, 822, 6916, 13], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 188, "seek": 67836, "start": 695.36, "end": 701.36, "text": " So this is a bitwise equivalent to the C ternary operation.", "tokens": [407, 341, 307, 257, 857, 3711, 10344, 281, 264, 383, 256, 1248, 822, 6916, 13], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 189, "seek": 67836, "start": 701.36, "end": 704.36, "text": " So in each register, each bit is iterated through.", "tokens": [407, 294, 1184, 7280, 11, 1184, 857, 307, 17138, 770, 807, 13], "temperature": 0.0, "avg_logprob": -0.10424278259277343, "compression_ratio": 1.6431718061674008, "no_speech_prob": 5.173618774279021e-05}, {"id": 190, "seek": 70436, "start": 704.36, "end": 709.36, "text": " And you can see, for example, one, the ternary operation.", "tokens": [400, 291, 393, 536, 11, 337, 1365, 11, 472, 11, 264, 256, 1248, 822, 6916, 13], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 191, "seek": 70436, "start": 709.36, "end": 711.36, "text": " So if that bit set choose this or versus this,", "tokens": [407, 498, 300, 857, 992, 2826, 341, 420, 5717, 341, 11], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 192, "seek": 70436, "start": 711.36, "end": 713.36, "text": " and you can see the output of that is that.", "tokens": [293, 291, 393, 536, 264, 5598, 295, 300, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 193, "seek": 70436, "start": 713.36, "end": 717.36, "text": " And so, essentially, it's a bitwise operation of ZMM", "tokens": [400, 370, 11, 4476, 11, 309, 311, 257, 857, 3711, 6916, 295, 1176, 17365], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 194, "seek": 70436, "start": 717.36, "end": 720.36, "text": " is equal to ZMM0, a question mark, ZMM1, ZMM2,", "tokens": [307, 2681, 281, 1176, 17365, 15, 11, 257, 1168, 1491, 11, 1176, 17365, 16, 11, 1176, 17365, 17, 11], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 195, "seek": 70436, "start": 720.36, "end": 722.36, "text": " but on a bitwise level.", "tokens": [457, 322, 257, 857, 3711, 1496, 13], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 196, "seek": 70436, "start": 722.36, "end": 725.36, "text": " And there's all sorts of other interesting things you can do,", "tokens": [400, 456, 311, 439, 7527, 295, 661, 1880, 721, 291, 393, 360, 11], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 197, "seek": 70436, "start": 725.36, "end": 727.36, "text": " and this article is very good.", "tokens": [293, 341, 7222, 307, 588, 665, 13], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 198, "seek": 70436, "start": 727.36, "end": 731.36, "text": " It shows all sorts of interesting things you can do,", "tokens": [467, 3110, 439, 7527, 295, 1880, 721, 291, 393, 360, 11], "temperature": 0.0, "avg_logprob": -0.13641072058862494, "compression_ratio": 1.7863247863247864, "no_speech_prob": 6.0475973441498354e-05}, {"id": 199, "seek": 73136, "start": 731.36, "end": 734.36, "text": " bit selects, all sorts of various different operations", "tokens": [857, 3048, 82, 11, 439, 7527, 295, 3683, 819, 7705], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 200, "seek": 73136, "start": 734.36, "end": 738.36, "text": " that you can do on multiple XORs, for example.", "tokens": [300, 291, 393, 360, 322, 3866, 1783, 2483, 82, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 201, "seek": 73136, "start": 738.36, "end": 742.36, "text": " So, yeah, also very interesting.", "tokens": [407, 11, 1338, 11, 611, 588, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 202, "seek": 73136, "start": 742.36, "end": 744.36, "text": " So let's look at a real-world example.", "tokens": [407, 718, 311, 574, 412, 257, 957, 12, 13217, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 203, "seek": 73136, "start": 744.36, "end": 746.36, "text": " I don't know how well you can see that.", "tokens": [286, 500, 380, 458, 577, 731, 291, 393, 536, 300, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 204, "seek": 73136, "start": 746.36, "end": 748.36, "text": " I was hoping the dark mode would actually make life easier,", "tokens": [286, 390, 7159, 264, 2877, 4391, 576, 767, 652, 993, 3571, 11], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 205, "seek": 73136, "start": 748.36, "end": 750.36, "text": " but maybe it's made things worse.", "tokens": [457, 1310, 309, 311, 1027, 721, 5324, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 206, "seek": 73136, "start": 750.36, "end": 753.36, "text": " But I'll talk about some of the mouse.", "tokens": [583, 286, 603, 751, 466, 512, 295, 264, 9719, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 207, "seek": 73136, "start": 753.36, "end": 755.36, "text": " Is it the mouse?", "tokens": [1119, 309, 264, 9719, 30], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 208, "seek": 73136, "start": 755.36, "end": 757.36, "text": " Because the mouse on the Mac is dark.", "tokens": [1436, 264, 9719, 322, 264, 5707, 307, 2877, 13], "temperature": 0.0, "avg_logprob": -0.1323402068194221, "compression_ratio": 1.578740157480315, "no_speech_prob": 4.9358452088199556e-05}, {"id": 209, "seek": 75736, "start": 757.36, "end": 761.36, "text": " But anyway, this is v2.10enc.", "tokens": [583, 4033, 11, 341, 307, 371, 17, 13, 3279, 268, 66, 13], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 210, "seek": 75736, "start": 761.36, "end": 763.36, "text": " It's probably one of the most simplest assembly functions", "tokens": [467, 311, 1391, 472, 295, 264, 881, 22811, 12103, 6828], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 211, "seek": 75736, "start": 763.36, "end": 766.36, "text": " in fmpeg, but what it does is it takes", "tokens": [294, 283, 76, 494, 70, 11, 457, 437, 309, 775, 307, 309, 2516], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 212, "seek": 75736, "start": 766.36, "end": 769.36, "text": " three 8-bit samples from different memory locations.", "tokens": [1045, 1649, 12, 5260, 10938, 490, 819, 4675, 9253, 13], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 213, "seek": 75736, "start": 769.36, "end": 772.36, "text": " It sort of, as part of its work, extends to 10 bits", "tokens": [467, 1333, 295, 11, 382, 644, 295, 1080, 589, 11, 26448, 281, 1266, 9239], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 214, "seek": 75736, "start": 772.36, "end": 777.36, "text": " and then packs those three 10-bit words into 32 bits.", "tokens": [293, 550, 19403, 729, 1045, 1266, 12, 5260, 2283, 666, 8858, 9239, 13], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 215, "seek": 75736, "start": 777.36, "end": 780.36, "text": " So what's interesting in this function is", "tokens": [407, 437, 311, 1880, 294, 341, 2445, 307], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 216, "seek": 75736, "start": 780.36, "end": 782.36, "text": " we're already starting to do lane crossing", "tokens": [321, 434, 1217, 2891, 281, 360, 12705, 14712], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 217, "seek": 75736, "start": 782.36, "end": 784.36, "text": " that wasn't possible before.", "tokens": [300, 2067, 380, 1944, 949, 13], "temperature": 0.0, "avg_logprob": -0.13269673732289097, "compression_ratio": 1.5708661417322836, "no_speech_prob": 0.00011172153608640656}, {"id": 218, "seek": 78436, "start": 784.36, "end": 788.36, "text": " So we load the y-samples, so the luma samples,", "tokens": [407, 321, 3677, 264, 288, 12, 19988, 2622, 11, 370, 264, 287, 5544, 10938, 11], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 219, "seek": 78436, "start": 788.36, "end": 791.36, "text": " into the lower 256 bits.", "tokens": [666, 264, 3126, 38882, 9239, 13], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 220, "seek": 78436, "start": 791.36, "end": 794.36, "text": " We do the u-section of the chroma into the third,", "tokens": [492, 360, 264, 344, 12, 11963, 295, 264, 16209, 64, 666, 264, 2636, 11], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 221, "seek": 78436, "start": 794.36, "end": 798.36, "text": " or the second, if zero-indexed, portion of the register,", "tokens": [420, 264, 1150, 11, 498, 4018, 12, 471, 3121, 292, 11, 8044, 295, 264, 7280, 11], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 222, "seek": 78436, "start": 798.36, "end": 803.36, "text": " and then equally the same for v.", "tokens": [293, 550, 12309, 264, 912, 337, 371, 13], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 223, "seek": 78436, "start": 803.36, "end": 807.36, "text": " And then we do one, excuse me,", "tokens": [400, 550, 321, 360, 472, 11, 8960, 385, 11], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 224, "seek": 78436, "start": 807.36, "end": 813.36, "text": " and then one single v per mb", "tokens": [293, 550, 472, 2167, 371, 680, 275, 65], "temperature": 0.0, "avg_logprob": -0.21608149487039316, "compression_ratio": 1.5941176470588236, "no_speech_prob": 0.00010659887630026788}, {"id": 225, "seek": 81336, "start": 813.36, "end": 815.36, "text": " can rearrange all of that in one go.", "tokens": [393, 39568, 439, 295, 300, 294, 472, 352, 13], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 226, "seek": 81336, "start": 815.36, "end": 820.36, "text": " This was a lot more complicated back in the olden days.", "tokens": [639, 390, 257, 688, 544, 6179, 646, 294, 264, 1331, 268, 1708, 13], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 227, "seek": 81336, "start": 820.36, "end": 823.36, "text": " P mad sub sw is some trickery", "tokens": [430, 5244, 1422, 1693, 307, 512, 4282, 2109], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 228, "seek": 81336, "start": 823.36, "end": 825.36, "text": " that unfortunately there's not going to be enough time", "tokens": [300, 7015, 456, 311, 406, 516, 281, 312, 1547, 565], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 229, "seek": 81336, "start": 825.36, "end": 828.36, "text": " to explain, but eventually is a multiply and add,", "tokens": [281, 2903, 11, 457, 4728, 307, 257, 12972, 293, 909, 11], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 230, "seek": 81336, "start": 828.36, "end": 830.36, "text": " and we use that to emulate a shift.", "tokens": [293, 321, 764, 300, 281, 45497, 257, 5513, 13], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 231, "seek": 81336, "start": 830.36, "end": 834.36, "text": " And then for the second element,", "tokens": [400, 550, 337, 264, 1150, 4478, 11], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 232, "seek": 81336, "start": 834.36, "end": 838.36, "text": " in the three elements, we need to do a d-word shift", "tokens": [294, 264, 1045, 4959, 11, 321, 643, 281, 360, 257, 274, 12, 7462, 5513], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 233, "seek": 81336, "start": 838.36, "end": 841.36, "text": " because it actually spans the middle.", "tokens": [570, 309, 767, 44086, 264, 2808, 13], "temperature": 0.0, "avg_logprob": -0.13125372816015174, "compression_ratio": 1.6016597510373445, "no_speech_prob": 9.757459338288754e-05}, {"id": 234, "seek": 84136, "start": 841.36, "end": 845.36, "text": " So therefore then we have sort of conflicting bits", "tokens": [407, 4412, 550, 321, 362, 1333, 295, 43784, 9239], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 235, "seek": 84136, "start": 845.36, "end": 846.36, "text": " in each register.", "tokens": [294, 1184, 7280, 13], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 236, "seek": 84136, "start": 846.36, "end": 847.36, "text": " So how do we do a bit selection?", "tokens": [407, 577, 360, 321, 360, 257, 857, 9450, 30], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 237, "seek": 84136, "start": 847.36, "end": 849.36, "text": " And this was quite a, I think it's a two or three,", "tokens": [400, 341, 390, 1596, 257, 11, 286, 519, 309, 311, 257, 732, 420, 1045, 11], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 238, "seek": 84136, "start": 849.36, "end": 854.36, "text": " even up around two through three different instructions", "tokens": [754, 493, 926, 732, 807, 1045, 819, 9415], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 239, "seek": 84136, "start": 854.36, "end": 855.36, "text": " in the previous code.", "tokens": [294, 264, 3894, 3089, 13], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 240, "seek": 84136, "start": 855.36, "end": 859.36, "text": " And this can now be done in a single vpternlogd,", "tokens": [400, 341, 393, 586, 312, 1096, 294, 257, 2167, 371, 79, 2231, 4987, 67, 11], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 241, "seek": 84136, "start": 859.36, "end": 863.36, "text": " so essentially c ternary b or a.", "tokens": [370, 4476, 269, 256, 1248, 822, 272, 420, 257, 13], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 242, "seek": 84136, "start": 863.36, "end": 866.36, "text": " So if bit c is set, choose the bit from b", "tokens": [407, 498, 857, 269, 307, 992, 11, 2826, 264, 857, 490, 272], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 243, "seek": 84136, "start": 866.36, "end": 868.36, "text": " or choose it from a otherwise.", "tokens": [420, 2826, 309, 490, 257, 5911, 13], "temperature": 0.0, "avg_logprob": -0.18156147003173828, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.38883066130802e-05}, {"id": 244, "seek": 86836, "start": 868.36, "end": 872.36, "text": " And you'll see in a second that actually provides quite a big,", "tokens": [400, 291, 603, 536, 294, 257, 1150, 300, 767, 6417, 1596, 257, 955, 11], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 245, "seek": 86836, "start": 872.36, "end": 876.36, "text": " well certainly a measurable speed improvement.", "tokens": [731, 3297, 257, 43615, 3073, 10444, 13], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 246, "seek": 86836, "start": 876.36, "end": 877.36, "text": " So these are the benchmarks.", "tokens": [407, 613, 366, 264, 43751, 13], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 247, "seek": 86836, "start": 877.36, "end": 881.36, "text": " So this is, so I wanted to show a bit about how you can", "tokens": [407, 341, 307, 11, 370, 286, 1415, 281, 855, 257, 857, 466, 577, 291, 393], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 248, "seek": 86836, "start": 881.36, "end": 884.36, "text": " get benefits from AVX 512 even on the older hardware", "tokens": [483, 5311, 490, 30198, 55, 1025, 4762, 754, 322, 264, 4906, 8837], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 249, "seek": 86836, "start": 884.36, "end": 886.36, "text": " with the shorter existing registers.", "tokens": [365, 264, 11639, 6741, 38351, 13], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 250, "seek": 86836, "start": 886.36, "end": 888.36, "text": " These are not scientifically benchmarked,", "tokens": [1981, 366, 406, 39719, 18927, 292, 11], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 251, "seek": 86836, "start": 888.36, "end": 890.36, "text": " I just ran them yesterday.", "tokens": [286, 445, 5872, 552, 5186, 13], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 252, "seek": 86836, "start": 890.36, "end": 892.36, "text": " When you do benchmarking you should run them", "tokens": [1133, 291, 360, 18927, 278, 291, 820, 1190, 552], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 253, "seek": 86836, "start": 892.36, "end": 894.36, "text": " 10 or 100 of times, average them,", "tokens": [1266, 420, 2319, 295, 1413, 11, 4274, 552, 11], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 254, "seek": 86836, "start": 894.36, "end": 896.36, "text": " do standard deviations, et cetera.", "tokens": [360, 3832, 31219, 763, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.13864143495637227, "compression_ratio": 1.610344827586207, "no_speech_prob": 2.392256101302337e-05}, {"id": 255, "seek": 89636, "start": 896.36, "end": 900.36, "text": " But just for the simple case,", "tokens": [583, 445, 337, 264, 2199, 1389, 11], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 256, "seek": 89636, "start": 900.36, "end": 905.36, "text": " you can see that the c code versus the AVX 2 code", "tokens": [291, 393, 536, 300, 264, 269, 3089, 5717, 264, 30198, 55, 568, 3089], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 257, "seek": 89636, "start": 905.36, "end": 906.36, "text": " is around 10 times faster.", "tokens": [307, 926, 1266, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 258, "seek": 89636, "start": 906.36, "end": 908.36, "text": " And you can see just by replacing,", "tokens": [400, 291, 393, 536, 445, 538, 19139, 11], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 259, "seek": 89636, "start": 908.36, "end": 910.36, "text": " I think it's a set of two or three different pans", "tokens": [286, 519, 309, 311, 257, 992, 295, 732, 420, 1045, 819, 280, 599], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 260, "seek": 89636, "start": 910.36, "end": 913.36, "text": " or various boolean functions,", "tokens": [420, 3683, 748, 4812, 282, 6828, 11], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 261, "seek": 89636, "start": 913.36, "end": 918.36, "text": " you can get a measurable increase just with one instruction", "tokens": [291, 393, 483, 257, 43615, 3488, 445, 365, 472, 10951], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 262, "seek": 89636, "start": 918.36, "end": 923.36, "text": " replacing three, even on the older YMM registers.", "tokens": [19139, 1045, 11, 754, 322, 264, 4906, 398, 17365, 38351, 13], "temperature": 0.0, "avg_logprob": -0.12343149287726289, "compression_ratio": 1.5613207547169812, "no_speech_prob": 3.004625796165783e-05}, {"id": 263, "seek": 92336, "start": 923.36, "end": 926.36, "text": " But where the big gains come are on Ice Lake,", "tokens": [583, 689, 264, 955, 16823, 808, 366, 322, 15332, 10582, 11], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 264, "seek": 92336, "start": 926.36, "end": 934.36, "text": " you can see the c code versus the AVX 512 ICL,", "tokens": [291, 393, 536, 264, 269, 3089, 5717, 264, 30198, 55, 1025, 4762, 14360, 43, 11], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 265, "seek": 92336, "start": 934.36, "end": 935.36, "text": " there's a huge difference.", "tokens": [456, 311, 257, 2603, 2649, 13], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 266, "seek": 92336, "start": 935.36, "end": 939.36, "text": " So by using vperm b and the ZMM,", "tokens": [407, 538, 1228, 371, 610, 76, 272, 293, 264, 1176, 17365, 11], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 267, "seek": 92336, "start": 939.36, "end": 943.36, "text": " you can already make the legacy AVX 512 twice as fast.", "tokens": [291, 393, 1217, 652, 264, 11711, 30198, 55, 1025, 4762, 6091, 382, 2370, 13], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 268, "seek": 92336, "start": 943.36, "end": 945.36, "text": " And if something was 10 times faster,", "tokens": [400, 498, 746, 390, 1266, 1413, 4663, 11], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 269, "seek": 92336, "start": 945.36, "end": 947.36, "text": " that now becomes 20 times faster.", "tokens": [300, 586, 3643, 945, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 270, "seek": 92336, "start": 947.36, "end": 950.36, "text": " And I often have to say that's not a multiply,", "tokens": [400, 286, 2049, 362, 281, 584, 300, 311, 406, 257, 12972, 11], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 271, "seek": 92336, "start": 950.36, "end": 951.36, "text": " that's a times.", "tokens": [300, 311, 257, 1413, 13], "temperature": 0.0, "avg_logprob": -0.1558471159501509, "compression_ratio": 1.5336322869955157, "no_speech_prob": 3.974845094489865e-05}, {"id": 272, "seek": 95136, "start": 951.36, "end": 953.36, "text": " So it's massive improvement.", "tokens": [407, 309, 311, 5994, 10444, 13], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 273, "seek": 95136, "start": 953.36, "end": 956.36, "text": " This was code that could, if you have a large resolution file,", "tokens": [639, 390, 3089, 300, 727, 11, 498, 291, 362, 257, 2416, 8669, 3991, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 274, "seek": 95136, "start": 956.36, "end": 958.36, "text": " take up an entire CPU core,", "tokens": [747, 493, 364, 2302, 13199, 4965, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 275, "seek": 95136, "start": 958.36, "end": 961.36, "text": " and now it takes essentially 5% of a core.", "tokens": [293, 586, 309, 2516, 4476, 1025, 4, 295, 257, 4965, 13], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 276, "seek": 95136, "start": 961.36, "end": 965.36, "text": " It's really tiny.", "tokens": [467, 311, 534, 5870, 13], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 277, "seek": 95136, "start": 965.36, "end": 968.36, "text": " What AVX 512 code is next?", "tokens": [708, 30198, 55, 1025, 4762, 3089, 307, 958, 30], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 278, "seek": 95136, "start": 968.36, "end": 971.36, "text": " Anything really that's line-based or frame-based,", "tokens": [11998, 534, 300, 311, 1622, 12, 6032, 420, 3920, 12, 6032, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 279, "seek": 95136, "start": 971.36, "end": 973.36, "text": " such as filtering or scaling,", "tokens": [1270, 382, 30822, 420, 21589, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 280, "seek": 95136, "start": 973.36, "end": 977.36, "text": " I think the next thing we're working on is deinterlacing.", "tokens": [286, 519, 264, 958, 551, 321, 434, 1364, 322, 307, 368, 5106, 75, 5615, 13], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 281, "seek": 95136, "start": 977.36, "end": 978.36, "text": " Anything involving comparisons,", "tokens": [11998, 17030, 33157, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 282, "seek": 95136, "start": 978.36, "end": 980.36, "text": " I haven't really talked about comparisons,", "tokens": [286, 2378, 380, 534, 2825, 466, 33157, 11], "temperature": 0.0, "avg_logprob": -0.10766889241116107, "compression_ratio": 1.5730337078651686, "no_speech_prob": 8.201231685234234e-05}, {"id": 283, "seek": 98036, "start": 980.36, "end": 984.36, "text": " but there are bits of code that often need to do comparisons.", "tokens": [457, 456, 366, 9239, 295, 3089, 300, 2049, 643, 281, 360, 33157, 13], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 284, "seek": 98036, "start": 984.36, "end": 987.36, "text": " That's going to be an obvious place for AVX 512.", "tokens": [663, 311, 516, 281, 312, 364, 6322, 1081, 337, 30198, 55, 1025, 4762, 13], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 285, "seek": 98036, "start": 987.36, "end": 990.36, "text": " Lots of places that do triple booleans,", "tokens": [15908, 295, 3190, 300, 360, 15508, 748, 4812, 599, 11], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 286, "seek": 98036, "start": 990.36, "end": 994.36, "text": " multiple XORs or multiple XORs on ands,", "tokens": [3866, 1783, 2483, 82, 420, 3866, 1783, 2483, 82, 322, 293, 82, 11], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 287, "seek": 98036, "start": 994.36, "end": 997.36, "text": " and I think it's almost always possible", "tokens": [293, 286, 519, 309, 311, 1920, 1009, 1944], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 288, "seek": 98036, "start": 997.36, "end": 1000.36, "text": " to replace that with a VP10 log D.", "tokens": [281, 7406, 300, 365, 257, 35812, 3279, 3565, 413, 13], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 289, "seek": 98036, "start": 1000.36, "end": 1002.36, "text": " Likewise in the code base,", "tokens": [30269, 294, 264, 3089, 3096, 11], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 290, "seek": 98036, "start": 1002.36, "end": 1004.36, "text": " there's various different idioms and trickery", "tokens": [456, 311, 3683, 819, 18014, 4785, 293, 4282, 2109], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 291, "seek": 98036, "start": 1004.36, "end": 1007.36, "text": " to try and emulate a variable left shift and right shift,", "tokens": [281, 853, 293, 45497, 257, 7006, 1411, 5513, 293, 558, 5513, 11], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 292, "seek": 98036, "start": 1007.36, "end": 1009.36, "text": " or multiplies for the left shifts", "tokens": [420, 12788, 530, 337, 264, 1411, 19201], "temperature": 0.0, "avg_logprob": -0.13125139667141822, "compression_ratio": 1.628787878787879, "no_speech_prob": 8.584162424085662e-05}, {"id": 293, "seek": 100936, "start": 1009.36, "end": 1011.36, "text": " and trickery for the right shifts.", "tokens": [293, 4282, 2109, 337, 264, 558, 19201, 13], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 294, "seek": 100936, "start": 1011.36, "end": 1016.36, "text": " This could be used with the letter soup instructions", "tokens": [639, 727, 312, 1143, 365, 264, 5063, 7884, 9415], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 295, "seek": 100936, "start": 1016.36, "end": 1019.36, "text": " to try and produce that.", "tokens": [281, 853, 293, 5258, 300, 13], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 296, "seek": 100936, "start": 1019.36, "end": 1021.36, "text": " Intel provides an official manual to all of this.", "tokens": [19762, 6417, 364, 4783, 9688, 281, 439, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 297, "seek": 100936, "start": 1021.36, "end": 1024.3600000000001, "text": " It's very verbose, which is great in many cases", "tokens": [467, 311, 588, 9595, 541, 11, 597, 307, 869, 294, 867, 3331], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 298, "seek": 100936, "start": 1024.3600000000001, "end": 1026.3600000000001, "text": " because it provides really precise detail", "tokens": [570, 309, 6417, 534, 13600, 2607], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 299, "seek": 100936, "start": 1026.3600000000001, "end": 1028.3600000000001, "text": " of how the instructions work,", "tokens": [295, 577, 264, 9415, 589, 11], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 300, "seek": 100936, "start": 1028.3600000000001, "end": 1030.3600000000001, "text": " but unfortunately is not at all approachable.", "tokens": [457, 7015, 307, 406, 412, 439, 3109, 712, 13], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 301, "seek": 100936, "start": 1030.3600000000001, "end": 1033.3600000000001, "text": " There's a few websites that try and simplify things.", "tokens": [821, 311, 257, 1326, 12891, 300, 853, 293, 20460, 721, 13], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 302, "seek": 100936, "start": 1033.3600000000001, "end": 1035.3600000000001, "text": " I think this website on officedaytime.com", "tokens": [286, 519, 341, 3144, 322, 3398, 810, 3766, 13, 1112], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 303, "seek": 100936, "start": 1035.3600000000001, "end": 1037.3600000000001, "text": " is some kind of Japanese website,", "tokens": [307, 512, 733, 295, 5433, 3144, 11], "temperature": 0.0, "avg_logprob": -0.0988781815868313, "compression_ratio": 1.6801470588235294, "no_speech_prob": 0.00016550732834730297}, {"id": 304, "seek": 103736, "start": 1037.36, "end": 1039.36, "text": " English that explains,", "tokens": [3669, 300, 13948, 11], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 305, "seek": 103736, "start": 1039.36, "end": 1042.36, "text": " tries to group all the instructions", "tokens": [9898, 281, 1594, 439, 264, 9415], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 306, "seek": 103736, "start": 1042.36, "end": 1045.36, "text": " in some kind of logical ordering,", "tokens": [294, 512, 733, 295, 14978, 21739, 11], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 307, "seek": 103736, "start": 1045.36, "end": 1048.36, "text": " and that makes it a lot simpler to understand.", "tokens": [293, 300, 1669, 309, 257, 688, 18587, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 308, "seek": 103736, "start": 1048.36, "end": 1050.36, "text": " Any questions?", "tokens": [2639, 1651, 30], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 309, "seek": 103736, "start": 1050.36, "end": 1052.36, "text": " Hopefully I'll be able to answer them,", "tokens": [10429, 286, 603, 312, 1075, 281, 1867, 552, 11], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 310, "seek": 103736, "start": 1052.36, "end": 1054.36, "text": " but thankfully at FosterM there's always somebody", "tokens": [457, 27352, 412, 38756, 44, 456, 311, 1009, 2618], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 311, "seek": 103736, "start": 1054.36, "end": 1056.36, "text": " with more knowledge than you in the room.", "tokens": [365, 544, 3601, 813, 291, 294, 264, 1808, 13], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 312, "seek": 103736, "start": 1056.36, "end": 1060.36, "text": " I can't see where they are, but I did see them at one point.", "tokens": [286, 393, 380, 536, 689, 436, 366, 11, 457, 286, 630, 536, 552, 412, 472, 935, 13], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 313, "seek": 103736, "start": 1060.36, "end": 1062.36, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.167800066422443, "compression_ratio": 1.51931330472103, "no_speech_prob": 0.0001559584925416857}, {"id": 314, "seek": 106236, "start": 1062.36, "end": 1068.36, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 315, "seek": 106236, "start": 1068.36, "end": 1071.36, "text": " Any questions in the room?", "tokens": [2639, 1651, 294, 264, 1808, 30], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 316, "seek": 106236, "start": 1071.36, "end": 1075.36, "text": " Regarding the direct assembly writing of AVX-5.0,", "tokens": [35523, 264, 2047, 12103, 3579, 295, 30198, 55, 12, 20, 13, 15, 11], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 317, "seek": 106236, "start": 1075.36, "end": 1079.36, "text": " there's about 7,000 instructions of AVX-5.0.", "tokens": [456, 311, 466, 1614, 11, 1360, 9415, 295, 30198, 55, 12, 20, 13, 15, 13], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 318, "seek": 106236, "start": 1079.36, "end": 1081.36, "text": " Why?", "tokens": [1545, 30], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 319, "seek": 106236, "start": 1081.36, "end": 1083.36, "text": " If you choose the direct assembly,", "tokens": [759, 291, 2826, 264, 2047, 12103, 11], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 320, "seek": 106236, "start": 1083.36, "end": 1085.36, "text": " then you essentially might miss out", "tokens": [550, 291, 4476, 1062, 1713, 484], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 321, "seek": 106236, "start": 1085.36, "end": 1087.36, "text": " on potential instruction scheduling", "tokens": [322, 3995, 10951, 29055], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 322, "seek": 106236, "start": 1087.36, "end": 1090.36, "text": " between different architectures.", "tokens": [1296, 819, 6331, 1303, 13], "temperature": 0.0, "avg_logprob": -0.20714420742458767, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.01501112338155508}, {"id": 323, "seek": 109036, "start": 1090.36, "end": 1092.36, "text": " Compilers might schedule better", "tokens": [6620, 388, 433, 1062, 7567, 1101], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 324, "seek": 109036, "start": 1092.36, "end": 1095.36, "text": " if you want to get a performance benefit in the future.", "tokens": [498, 291, 528, 281, 483, 257, 3389, 5121, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 325, "seek": 109036, "start": 1095.36, "end": 1101.36, "text": " But then you have to ship a binary for each version.", "tokens": [583, 550, 291, 362, 281, 5374, 257, 17434, 337, 1184, 3037, 13], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 326, "seek": 109036, "start": 1101.36, "end": 1103.36, "text": " Sorry, repeat the question.", "tokens": [4919, 11, 7149, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 327, "seek": 109036, "start": 1103.36, "end": 1106.36, "text": " You have to write in 3.6, that's what I'm saying.", "tokens": [509, 362, 281, 2464, 294, 805, 13, 21, 11, 300, 311, 437, 286, 478, 1566, 13], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 328, "seek": 109036, "start": 1106.36, "end": 1108.36, "text": " In order to compile...", "tokens": [682, 1668, 281, 31413, 485], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 329, "seek": 109036, "start": 1108.36, "end": 1111.36, "text": " The question is the classic question,", "tokens": [440, 1168, 307, 264, 7230, 1168, 11], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 330, "seek": 109036, "start": 1111.36, "end": 1114.36, "text": " can the compiler do a better job than a human question?", "tokens": [393, 264, 31958, 360, 257, 1101, 1691, 813, 257, 1952, 1168, 30], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 331, "seek": 109036, "start": 1114.36, "end": 1118.36, "text": " In David, certainly the register allocation", "tokens": [682, 4389, 11, 3297, 264, 7280, 27599], "temperature": 0.0, "avg_logprob": -0.2476344247466152, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0006051002419553697}, {"id": 332, "seek": 111836, "start": 1118.36, "end": 1120.36, "text": " has not been very good in compilers historically.", "tokens": [575, 406, 668, 588, 665, 294, 715, 388, 433, 16180, 13], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 333, "seek": 111836, "start": 1120.36, "end": 1124.36, "text": " David has shown this quite dramatically", "tokens": [4389, 575, 4898, 341, 1596, 17548], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 334, "seek": 111836, "start": 1124.36, "end": 1127.36, "text": " because it has its own custom ABI internally,", "tokens": [570, 309, 575, 1080, 1065, 2375, 316, 11291, 19501, 11], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 335, "seek": 111836, "start": 1127.36, "end": 1129.36, "text": " and you wouldn't be able to do that with the compiler", "tokens": [293, 291, 2759, 380, 312, 1075, 281, 360, 300, 365, 264, 31958], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 336, "seek": 111836, "start": 1129.36, "end": 1132.36, "text": " like come up with your own internal ABI between functions.", "tokens": [411, 808, 493, 365, 428, 1065, 6920, 316, 11291, 1296, 6828, 13], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 337, "seek": 111836, "start": 1132.36, "end": 1136.36, "text": " So there's certainly 10% plus on the individual function,", "tokens": [407, 456, 311, 3297, 1266, 4, 1804, 322, 264, 2609, 2445, 11], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 338, "seek": 111836, "start": 1136.36, "end": 1139.36, "text": " speed gains versus doing it in intrinsics.", "tokens": [3073, 16823, 5717, 884, 309, 294, 28621, 1167, 13], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 339, "seek": 111836, "start": 1139.36, "end": 1142.36, "text": " Some bits of some instructions are not available in intrinsics", "tokens": [2188, 9239, 295, 512, 9415, 366, 406, 2435, 294, 28621, 1167], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 340, "seek": 111836, "start": 1142.36, "end": 1144.36, "text": " like always.", "tokens": [411, 1009, 13], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 341, "seek": 111836, "start": 1144.36, "end": 1147.36, "text": " It's a compromise.", "tokens": [467, 311, 257, 18577, 13], "temperature": 0.0, "avg_logprob": -0.11099546145548862, "compression_ratio": 1.688212927756654, "no_speech_prob": 0.0001720389409456402}, {"id": 342, "seek": 114736, "start": 1147.36, "end": 1150.36, "text": " Overall, it's been the way in FM Big X264", "tokens": [18420, 11, 309, 311, 668, 264, 636, 294, 29614, 5429, 1783, 10880, 19], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 343, "seek": 114736, "start": 1150.36, "end": 1153.36, "text": " for the last 10 years, and I think all intrinsics", "tokens": [337, 264, 1036, 1266, 924, 11, 293, 286, 519, 439, 28621, 1167], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 344, "seek": 114736, "start": 1153.36, "end": 1155.36, "text": " and in line assemblies banned,", "tokens": [293, 294, 1622, 8438, 24119, 19564, 11], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 345, "seek": 114736, "start": 1155.36, "end": 1157.36, "text": " and there's only one or two bits left,", "tokens": [293, 456, 311, 787, 472, 420, 732, 9239, 1411, 11], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 346, "seek": 114736, "start": 1157.36, "end": 1161.36, "text": " and there's a very good reason why it needs to be there.", "tokens": [293, 456, 311, 257, 588, 665, 1778, 983, 309, 2203, 281, 312, 456, 13], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 347, "seek": 114736, "start": 1161.36, "end": 1164.36, "text": " I have mixed experience about this.", "tokens": [286, 362, 7467, 1752, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 348, "seek": 114736, "start": 1164.36, "end": 1166.36, "text": " I agree on the...", "tokens": [286, 3986, 322, 264, 485], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 349, "seek": 114736, "start": 1166.36, "end": 1168.36, "text": " Ideally, assembly is better,", "tokens": [40817, 11, 12103, 307, 1101, 11], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 350, "seek": 114736, "start": 1168.36, "end": 1170.36, "text": " but we had some code in 3.6,", "tokens": [457, 321, 632, 512, 3089, 294, 805, 13, 21, 11], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 351, "seek": 114736, "start": 1170.36, "end": 1173.36, "text": " we compiled it with the latest Clang, 15,", "tokens": [321, 36548, 309, 365, 264, 6792, 2033, 656, 11, 2119, 11], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 352, "seek": 114736, "start": 1173.36, "end": 1176.36, "text": " and we saw a 15 to 20% speed increase.", "tokens": [293, 321, 1866, 257, 2119, 281, 945, 4, 3073, 3488, 13], "temperature": 0.0, "avg_logprob": -0.21753930311936598, "compression_ratio": 1.5509433962264152, "no_speech_prob": 0.0002781165821943432}, {"id": 353, "seek": 117636, "start": 1176.36, "end": 1180.36, "text": " But did you try writing it to begin with in...", "tokens": [583, 630, 291, 853, 3579, 309, 281, 1841, 365, 294, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 354, "seek": 117636, "start": 1180.36, "end": 1182.36, "text": " Yes, it was in 3.6.", "tokens": [1079, 11, 309, 390, 294, 805, 13, 21, 13], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 355, "seek": 117636, "start": 1182.36, "end": 1184.36, "text": " Write it in...", "tokens": [23499, 309, 294, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 356, "seek": 117636, "start": 1184.36, "end": 1187.36, "text": " Write it originally in assembly and compare,", "tokens": [23499, 309, 7993, 294, 12103, 293, 6794, 11], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 357, "seek": 117636, "start": 1187.36, "end": 1189.36, "text": " but it's...", "tokens": [457, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 358, "seek": 117636, "start": 1189.36, "end": 1191.36, "text": " So for example, some of this...", "tokens": [407, 337, 1365, 11, 512, 295, 341, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 359, "seek": 117636, "start": 1191.36, "end": 1193.36, "text": " Sorry, you've gone to...", "tokens": [4919, 11, 291, 600, 2780, 281, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 360, "seek": 117636, "start": 1193.36, "end": 1196.36, "text": " Some of the bit-twizzling in there,", "tokens": [2188, 295, 264, 857, 12, 20270, 8072, 1688, 294, 456, 11], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 361, "seek": 117636, "start": 1196.36, "end": 1200.36, "text": " for example, a compiler would never really have the understanding to do...", "tokens": [337, 1365, 11, 257, 31958, 576, 1128, 534, 362, 264, 3701, 281, 360, 485], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 362, "seek": 117636, "start": 1200.36, "end": 1202.36, "text": " In fact, I did try chatGPT,", "tokens": [682, 1186, 11, 286, 630, 853, 5081, 38, 47, 51, 11], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 363, "seek": 117636, "start": 1202.36, "end": 1205.36, "text": " and chatGPT at least sort of understood a few of the concepts.", "tokens": [293, 5081, 38, 47, 51, 412, 1935, 1333, 295, 7320, 257, 1326, 295, 264, 10392, 13], "temperature": 0.0, "avg_logprob": -0.18758422370970718, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0001903246738947928}, {"id": 364, "seek": 120536, "start": 1205.36, "end": 1208.36, "text": " It's interesting because not quite out of a day job,", "tokens": [467, 311, 1880, 570, 406, 1596, 484, 295, 257, 786, 1691, 11], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 365, "seek": 120536, "start": 1208.36, "end": 1211.36, "text": " but I did ask chatGPT to write this function, actually,", "tokens": [457, 286, 630, 1029, 5081, 38, 47, 51, 281, 2464, 341, 2445, 11, 767, 11], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 366, "seek": 120536, "start": 1211.36, "end": 1213.36, "text": " just sort of to see what...", "tokens": [445, 1333, 295, 281, 536, 437, 485], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 367, "seek": 120536, "start": 1213.36, "end": 1215.36, "text": " And it did have some vague idea what was going on.", "tokens": [400, 309, 630, 362, 512, 24247, 1558, 437, 390, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 368, "seek": 120536, "start": 1215.36, "end": 1218.36, "text": " It didn't need to sort of be helped, which is quite interesting.", "tokens": [467, 994, 380, 643, 281, 1333, 295, 312, 4254, 11, 597, 307, 1596, 1880, 13], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 369, "seek": 120536, "start": 1218.36, "end": 1220.36, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 370, "seek": 120536, "start": 1220.36, "end": 1223.36, "text": " Is there any collaboration between the multimedia,", "tokens": [1119, 456, 604, 9363, 1296, 264, 49202, 11], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 371, "seek": 120536, "start": 1223.36, "end": 1226.36, "text": " the people who write the codex,", "tokens": [264, 561, 567, 2464, 264, 3089, 87, 11], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 372, "seek": 120536, "start": 1226.36, "end": 1229.36, "text": " and the guys writing the compiler who tell them,", "tokens": [293, 264, 1074, 3579, 264, 31958, 567, 980, 552, 11], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 373, "seek": 120536, "start": 1229.36, "end": 1233.36, "text": " look, perhaps you could target certain patterns?", "tokens": [574, 11, 4317, 291, 727, 3779, 1629, 8294, 30], "temperature": 0.0, "avg_logprob": -0.16157854398091634, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.00015034910757094622}, {"id": 374, "seek": 123336, "start": 1233.36, "end": 1236.36, "text": " Martin is a collaboration between people writing the compilers", "tokens": [9184, 307, 257, 9363, 1296, 561, 3579, 264, 715, 388, 433], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 375, "seek": 123336, "start": 1236.36, "end": 1238.36, "text": " and multimedia community.", "tokens": [293, 49202, 1768, 13], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 376, "seek": 123336, "start": 1238.36, "end": 1241.36, "text": " Yes, in ARM in particular, I think,", "tokens": [1079, 11, 294, 45209, 294, 1729, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 377, "seek": 123336, "start": 1241.36, "end": 1243.36, "text": " is Martin here?", "tokens": [307, 9184, 510, 30], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 378, "seek": 123336, "start": 1243.36, "end": 1246.36, "text": " No, Martin is not here, but Martin spends a lot of time", "tokens": [883, 11, 9184, 307, 406, 510, 11, 457, 9184, 25620, 257, 688, 295, 565], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 379, "seek": 123336, "start": 1246.36, "end": 1249.36, "text": " talking to the compiler community and the linker community", "tokens": [1417, 281, 264, 31958, 1768, 293, 264, 2113, 260, 1768], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 380, "seek": 123336, "start": 1249.36, "end": 1254.36, "text": " on mostly miscompilations is more his thing.", "tokens": [322, 5240, 3346, 21541, 388, 763, 307, 544, 702, 551, 13], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 381, "seek": 123336, "start": 1254.36, "end": 1256.36, "text": " And I think, yeah,", "tokens": [400, 286, 519, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 382, "seek": 123336, "start": 1256.36, "end": 1259.36, "text": " and I think there is also some sharing of mostly around the C code,", "tokens": [293, 286, 519, 456, 307, 611, 512, 5414, 295, 5240, 926, 264, 383, 3089, 11], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 383, "seek": 123336, "start": 1259.36, "end": 1262.36, "text": " if the C code is badly miscompiled", "tokens": [498, 264, 383, 3089, 307, 13425, 3346, 21541, 7292], "temperature": 0.0, "avg_logprob": -0.13649547511133656, "compression_ratio": 1.7881355932203389, "no_speech_prob": 0.00016939689521677792}, {"id": 384, "seek": 126236, "start": 1262.36, "end": 1267.36, "text": " or thought of the wrong approach,", "tokens": [420, 1194, 295, 264, 2085, 3109, 11], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 385, "seek": 126236, "start": 1267.36, "end": 1269.36, "text": " because you can see, actually,", "tokens": [570, 291, 393, 536, 11, 767, 11], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 386, "seek": 126236, "start": 1269.36, "end": 1272.36, "text": " and in some versions of the compiler will really do a bad job", "tokens": [293, 294, 512, 9606, 295, 264, 31958, 486, 534, 360, 257, 1578, 1691], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 387, "seek": 126236, "start": 1272.36, "end": 1275.36, "text": " on the C and the assembly can be 40 times faster,", "tokens": [322, 264, 383, 293, 264, 12103, 393, 312, 3356, 1413, 4663, 11], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 388, "seek": 126236, "start": 1275.36, "end": 1277.36, "text": " and that's...", "tokens": [293, 300, 311, 485], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 389, "seek": 126236, "start": 1277.36, "end": 1279.36, "text": " Don't know if that's something you can really trust", "tokens": [1468, 380, 458, 498, 300, 311, 746, 291, 393, 534, 3361], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 390, "seek": 126236, "start": 1279.36, "end": 1281.36, "text": " if one day you change compiler version", "tokens": [498, 472, 786, 291, 1319, 31958, 3037], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 391, "seek": 126236, "start": 1281.36, "end": 1286.36, "text": " and a function that you thought was immeasurable", "tokens": [293, 257, 2445, 300, 291, 1194, 390, 566, 1398, 296, 25863], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 392, "seek": 126236, "start": 1286.36, "end": 1290.36, "text": " is now 40 times slower than it is.", "tokens": [307, 586, 3356, 1413, 14009, 813, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.12837424136624478, "compression_ratio": 1.6820276497695852, "no_speech_prob": 9.799360850593075e-05}, {"id": 393, "seek": 129036, "start": 1290.36, "end": 1292.36, "text": " And then the question from the internet is,", "tokens": [400, 550, 264, 1168, 490, 264, 4705, 307, 11], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 394, "seek": 129036, "start": 1292.36, "end": 1294.36, "text": " did you have the occasion to look at", "tokens": [630, 291, 362, 264, 9674, 281, 574, 412], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 395, "seek": 129036, "start": 1294.36, "end": 1296.36, "text": " RVA-SVE vector instructions for FAMPEG?", "tokens": [497, 20914, 12, 50, 7540, 8062, 9415, 337, 479, 2865, 5208, 38, 30], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 396, "seek": 129036, "start": 1296.36, "end": 1298.36, "text": " Wow, that's a surprise for this person,", "tokens": [3153, 11, 300, 311, 257, 6365, 337, 341, 954, 11], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 397, "seek": 129036, "start": 1298.36, "end": 1302.36, "text": " because the next speaker is going to be talking about this entire topic.", "tokens": [570, 264, 958, 8145, 307, 516, 281, 312, 1417, 466, 341, 2302, 4829, 13], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 398, "seek": 129036, "start": 1302.36, "end": 1304.36, "text": " Where is the next speaker?", "tokens": [2305, 307, 264, 958, 8145, 30], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 399, "seek": 129036, "start": 1304.36, "end": 1306.36, "text": " He's over there, and the next speaker here, Remy,", "tokens": [634, 311, 670, 456, 11, 293, 264, 958, 8145, 510, 11, 497, 3633, 11], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 400, "seek": 129036, "start": 1306.36, "end": 1309.36, "text": " will be talking about this entire topic.", "tokens": [486, 312, 1417, 466, 341, 2302, 4829, 13], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 401, "seek": 129036, "start": 1309.36, "end": 1311.36, "text": " Another question?", "tokens": [3996, 1168, 30], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 402, "seek": 129036, "start": 1311.36, "end": 1313.36, "text": " Yeah, I was wondering.", "tokens": [865, 11, 286, 390, 6359, 13], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 403, "seek": 129036, "start": 1313.36, "end": 1318.36, "text": " So, obviously, the runtime CPU capability detection", "tokens": [407, 11, 2745, 11, 264, 34474, 13199, 13759, 17784], "temperature": 0.0, "avg_logprob": -0.22378915356051537, "compression_ratio": 1.669172932330827, "no_speech_prob": 0.00032973618363030255}, {"id": 404, "seek": 131836, "start": 1318.36, "end": 1321.36, "text": " and dispatching of the right functions is desirable,", "tokens": [293, 4920, 29569, 295, 264, 558, 6828, 307, 30533, 11], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 405, "seek": 131836, "start": 1321.36, "end": 1324.36, "text": " but I don't think it's necessarily contradictory", "tokens": [457, 286, 500, 380, 519, 309, 311, 4725, 49555], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 406, "seek": 131836, "start": 1324.36, "end": 1327.36, "text": " to having some amount of abstraction.", "tokens": [281, 1419, 512, 2372, 295, 37765, 13], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 407, "seek": 131836, "start": 1327.36, "end": 1333.36, "text": " Like, have you, for instance, looked into the highway library", "tokens": [1743, 11, 362, 291, 11, 337, 5197, 11, 2956, 666, 264, 17205, 6405], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 408, "seek": 131836, "start": 1333.36, "end": 1336.36, "text": " that is being used in some places", "tokens": [300, 307, 885, 1143, 294, 512, 3190], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 409, "seek": 131836, "start": 1336.36, "end": 1339.36, "text": " that is trying to provide some kind of abstraction", "tokens": [300, 307, 1382, 281, 2893, 512, 733, 295, 37765], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 410, "seek": 131836, "start": 1339.36, "end": 1345.36, "text": " while still allowing to do runtime dispatch?", "tokens": [1339, 920, 8293, 281, 360, 34474, 36729, 30], "temperature": 0.0, "avg_logprob": -0.09749611118171789, "compression_ratio": 1.5837320574162679, "no_speech_prob": 0.0003615699533838779}, {"id": 411, "seek": 134536, "start": 1345.36, "end": 1349.36, "text": " So, the question was, have you looked into some of the abstraction libraries", "tokens": [407, 11, 264, 1168, 390, 11, 362, 291, 2956, 666, 512, 295, 264, 37765, 15148], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 412, "seek": 134536, "start": 1349.36, "end": 1353.36, "text": " like highway that's trying to do a sort of compromise", "tokens": [411, 17205, 300, 311, 1382, 281, 360, 257, 1333, 295, 18577], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 413, "seek": 134536, "start": 1353.36, "end": 1356.36, "text": " between runtime dispatch and abstraction?", "tokens": [1296, 34474, 36729, 293, 37765, 30], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 414, "seek": 134536, "start": 1356.36, "end": 1358.36, "text": " I think this question was already answered,", "tokens": [286, 519, 341, 1168, 390, 1217, 10103, 11], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 415, "seek": 134536, "start": 1358.36, "end": 1360.36, "text": " I think, two presentations ago.", "tokens": [286, 519, 11, 732, 18964, 2057, 13], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 416, "seek": 134536, "start": 1360.36, "end": 1363.36, "text": " Not with highway, but I think with a different SIMD library,", "tokens": [1726, 365, 17205, 11, 457, 286, 519, 365, 257, 819, 24738, 35, 6405, 11], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 417, "seek": 134536, "start": 1363.36, "end": 1365.36, "text": " but there have been various approaches,", "tokens": [457, 456, 362, 668, 3683, 11587, 11], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 418, "seek": 134536, "start": 1365.36, "end": 1367.36, "text": " LibOil, is it SIMD easy?", "tokens": [15834, 46, 388, 11, 307, 309, 24738, 35, 1858, 30], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 419, "seek": 134536, "start": 1367.36, "end": 1369.36, "text": " Various different approaches.", "tokens": [14662, 851, 819, 11587, 13], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 420, "seek": 134536, "start": 1369.36, "end": 1373.36, "text": " And again, the result from certain FAMPEG-264,", "tokens": [400, 797, 11, 264, 1874, 490, 1629, 479, 2865, 5208, 38, 12, 10880, 19, 11], "temperature": 0.0, "avg_logprob": -0.14592096010843914, "compression_ratio": 1.6340579710144927, "no_speech_prob": 5.477597005665302e-05}, {"id": 421, "seek": 137336, "start": 1373.36, "end": 1376.36, "text": " it has been righted by hand.", "tokens": [309, 575, 668, 558, 292, 538, 1011, 13], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 422, "seek": 137336, "start": 1376.36, "end": 1379.36, "text": " It's written once, and you know almost certainly", "tokens": [467, 311, 3720, 1564, 11, 293, 291, 458, 1920, 3297], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 423, "seek": 137336, "start": 1379.36, "end": 1382.36, "text": " that it's going to be usable for a long time.", "tokens": [300, 309, 311, 516, 281, 312, 29975, 337, 257, 938, 565, 13], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 424, "seek": 137336, "start": 1382.36, "end": 1384.36, "text": " I didn't really talk about it, but the abstraction,", "tokens": [286, 994, 380, 534, 751, 466, 309, 11, 457, 264, 37765, 11], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 425, "seek": 137336, "start": 1384.36, "end": 1388.36, "text": " there is a lightweight abstraction layer in X-264 and FAMPEG", "tokens": [456, 307, 257, 22052, 37765, 4583, 294, 1783, 12, 10880, 19, 293, 479, 2865, 5208, 38], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 426, "seek": 137336, "start": 1388.36, "end": 1391.36, "text": " to try and basically to handle 32-bit, 64-bit,", "tokens": [281, 853, 293, 1936, 281, 4813, 8858, 12, 5260, 11, 12145, 12, 5260, 11], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 427, "seek": 137336, "start": 1391.36, "end": 1395.36, "text": " and to handle other things like the different ABI cores.", "tokens": [293, 281, 4813, 661, 721, 411, 264, 819, 316, 11291, 24826, 13], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 428, "seek": 137336, "start": 1395.36, "end": 1399.36, "text": " The abstraction layer kind of handles", "tokens": [440, 37765, 4583, 733, 295, 18722], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 429, "seek": 137336, "start": 1399.36, "end": 1402.36, "text": " some of the future-proofing in that respect,", "tokens": [512, 295, 264, 2027, 12, 15690, 278, 294, 300, 3104, 11], "temperature": 0.0, "avg_logprob": -0.1455319775037529, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.00011418143549235538}, {"id": 430, "seek": 140236, "start": 1402.36, "end": 1405.36, "text": " but there's a blog post online from Ronald,", "tokens": [457, 456, 311, 257, 6968, 2183, 2950, 490, 27397, 11], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 431, "seek": 140236, "start": 1405.36, "end": 1407.36, "text": " if he's here, but he's not here.", "tokens": [498, 415, 311, 510, 11, 457, 415, 311, 406, 510, 13], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 432, "seek": 140236, "start": 1407.36, "end": 1409.36, "text": " He explains some of this.", "tokens": [634, 13948, 512, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 433, "seek": 140236, "start": 1409.36, "end": 1412.36, "text": " It's another presentation in itself, unfortunately.", "tokens": [467, 311, 1071, 5860, 294, 2564, 11, 7015, 13], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 434, "seek": 140236, "start": 1412.36, "end": 1418.36, "text": " For your benchmark, do you know which optimization", "tokens": [1171, 428, 18927, 11, 360, 291, 458, 597, 19618], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 435, "seek": 140236, "start": 1418.36, "end": 1421.36, "text": " the C-code was compiled with?", "tokens": [264, 383, 12, 22332, 390, 36548, 365, 30], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 436, "seek": 140236, "start": 1421.36, "end": 1423.36, "text": " The question was, for the benchmark,", "tokens": [440, 1168, 390, 11, 337, 264, 18927, 11], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 437, "seek": 140236, "start": 1423.36, "end": 1427.36, "text": " what optimizations were the C-code compiled with?", "tokens": [437, 5028, 14455, 645, 264, 383, 12, 22332, 36548, 365, 30], "temperature": 0.0, "avg_logprob": -0.17865272098117405, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.00013559169019572437}, {"id": 438, "seek": 142736, "start": 1427.36, "end": 1434.36, "text": " The GCC-03, varying versions of GCC.", "tokens": [440, 460, 11717, 12, 11592, 11, 22984, 9606, 295, 460, 11717, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 439, "seek": 142736, "start": 1434.36, "end": 1436.36, "text": " In FAMPEG test suite, there's all sorts.", "tokens": [682, 479, 2865, 5208, 38, 1500, 14205, 11, 456, 311, 439, 7527, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 440, "seek": 142736, "start": 1436.36, "end": 1440.36, "text": " I think from GCC, there's a whole range,", "tokens": [286, 519, 490, 460, 11717, 11, 456, 311, 257, 1379, 3613, 11], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 441, "seek": 142736, "start": 1440.36, "end": 1445.36, "text": " depending on the build OS, but from 4 to 12, I think,", "tokens": [5413, 322, 264, 1322, 12731, 11, 457, 490, 1017, 281, 2272, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 442, "seek": 142736, "start": 1445.36, "end": 1447.36, "text": " and maybe some people test nightly.", "tokens": [293, 1310, 512, 561, 1500, 1818, 356, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 443, "seek": 142736, "start": 1447.36, "end": 1449.36, "text": " I think Martin certainly tests nightly for ARM.", "tokens": [286, 519, 9184, 3297, 6921, 1818, 356, 337, 45209, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 444, "seek": 142736, "start": 1449.36, "end": 1451.36, "text": " I don't know if anyone tests nightly on X-86.", "tokens": [286, 500, 380, 458, 498, 2878, 6921, 1818, 356, 322, 1783, 12, 22193, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 445, "seek": 142736, "start": 1451.36, "end": 1453.36, "text": " Some are LVM as well.", "tokens": [2188, 366, 441, 53, 44, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 446, "seek": 142736, "start": 1453.36, "end": 1456.36, "text": " But again, I would be very surprised", "tokens": [583, 797, 11, 286, 576, 312, 588, 6100], "temperature": 0.0, "avg_logprob": -0.1501516342163086, "compression_ratio": 1.4795081967213115, "no_speech_prob": 9.199394116876647e-05}, {"id": 447, "seek": 145636, "start": 1456.36, "end": 1459.36, "text": " if a compiler would be able to come up with something,", "tokens": [498, 257, 31958, 576, 312, 1075, 281, 808, 493, 365, 746, 11], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 448, "seek": 145636, "start": 1459.36, "end": 1461.36, "text": " because what a human wrote,", "tokens": [570, 437, 257, 1952, 4114, 11], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 449, "seek": 145636, "start": 1461.36, "end": 1466.36, "text": " because this is involving bit properties of the actual packing,", "tokens": [570, 341, 307, 17030, 857, 7221, 295, 264, 3539, 20815, 11], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 450, "seek": 145636, "start": 1466.36, "end": 1471.36, "text": " and actually the trick with PMAD SW is a kind of trick", "tokens": [293, 767, 264, 4282, 365, 12499, 6112, 20346, 307, 257, 733, 295, 4282], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 451, "seek": 145636, "start": 1471.36, "end": 1475.36, "text": " to try and do a multiply and a zeroing at the same time,", "tokens": [281, 853, 293, 360, 257, 12972, 293, 257, 4018, 278, 412, 264, 912, 565, 11], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 452, "seek": 145636, "start": 1475.36, "end": 1478.36, "text": " and it probably doesn't have the level of thinking", "tokens": [293, 309, 1391, 1177, 380, 362, 264, 1496, 295, 1953], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 453, "seek": 145636, "start": 1478.36, "end": 1481.36, "text": " to understand the bit patterns internally.", "tokens": [281, 1223, 264, 857, 8294, 19501, 13], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 454, "seek": 145636, "start": 1481.36, "end": 1483.36, "text": " Something like chatGPT might one day,", "tokens": [6595, 411, 5081, 38, 47, 51, 1062, 472, 786, 11], "temperature": 0.0, "avg_logprob": -0.13024430181465896, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.00011380937212379649}, {"id": 455, "seek": 148336, "start": 1483.36, "end": 1486.36, "text": " which would be quite interesting, but I don't think the compiler does.", "tokens": [597, 576, 312, 1596, 1880, 11, 457, 286, 500, 380, 519, 264, 31958, 775, 13], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 456, "seek": 148336, "start": 1486.36, "end": 1488.36, "text": " The last question.", "tokens": [440, 1036, 1168, 13], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 457, "seek": 148336, "start": 1488.36, "end": 1491.36, "text": " I'm just going to follow up on what you said.", "tokens": [286, 478, 445, 516, 281, 1524, 493, 322, 437, 291, 848, 13], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 458, "seek": 148336, "start": 1491.36, "end": 1494.36, "text": " If you have a small algorithm, a small function like 10,", "tokens": [759, 291, 362, 257, 1359, 9284, 11, 257, 1359, 2445, 411, 1266, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 459, "seek": 148336, "start": 1494.36, "end": 1496.36, "text": " 100 clients, maybe,", "tokens": [2319, 6982, 11, 1310, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 460, "seek": 148336, "start": 1496.36, "end": 1498.36, "text": " writing in the assembly might be easy,", "tokens": [3579, 294, 264, 12103, 1062, 312, 1858, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 461, "seek": 148336, "start": 1498.36, "end": 1500.36, "text": " but if you have a huge function,", "tokens": [457, 498, 291, 362, 257, 2603, 2445, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 462, "seek": 148336, "start": 1500.36, "end": 1504.36, "text": " like a filter, a variance filter, or something, a VCT,", "tokens": [411, 257, 6608, 11, 257, 21977, 6608, 11, 420, 746, 11, 257, 691, 10259, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 463, "seek": 148336, "start": 1504.36, "end": 1507.36, "text": " writing it directly in the assembly might take a long time.", "tokens": [3579, 309, 3838, 294, 264, 12103, 1062, 747, 257, 938, 565, 13], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 464, "seek": 148336, "start": 1507.36, "end": 1509.36, "text": " That's why originally we write it in C,", "tokens": [663, 311, 983, 7993, 321, 2464, 309, 294, 383, 11], "temperature": 0.0, "avg_logprob": -0.17043046028383316, "compression_ratio": 1.681992337164751, "no_speech_prob": 0.00029664591420441866}, {"id": 465, "seek": 150936, "start": 1509.36, "end": 1513.36, "text": " and then we try to write it in intrinsics.", "tokens": [293, 550, 321, 853, 281, 2464, 309, 294, 28621, 1167, 13], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 466, "seek": 150936, "start": 1513.36, "end": 1515.36, "text": " So the question is,", "tokens": [407, 264, 1168, 307, 11], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 467, "seek": 150936, "start": 1515.36, "end": 1521.36, "text": " a longer function might take a longer time to write in assembly", "tokens": [257, 2854, 2445, 1062, 747, 257, 2854, 565, 281, 2464, 294, 12103], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 468, "seek": 150936, "start": 1521.36, "end": 1524.36, "text": " compared to C or intrinsics.", "tokens": [5347, 281, 383, 420, 28621, 1167, 13], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 469, "seek": 150936, "start": 1524.36, "end": 1528.36, "text": " Yes, but there are DCTs and FMPEG,", "tokens": [1079, 11, 457, 456, 366, 9114, 33424, 293, 29614, 5208, 38, 11], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 470, "seek": 150936, "start": 1528.36, "end": 1530.36, "text": " but they're macroed, right?", "tokens": [457, 436, 434, 18887, 292, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 471, "seek": 150936, "start": 1530.36, "end": 1533.36, "text": " Steps have macros to try and help that.", "tokens": [5470, 82, 362, 7912, 2635, 281, 853, 293, 854, 300, 13], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 472, "seek": 150936, "start": 1533.36, "end": 1535.36, "text": " Again, the abstraction layer also adds, I think, macros", "tokens": [3764, 11, 264, 37765, 4583, 611, 10860, 11, 286, 519, 11, 7912, 2635], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 473, "seek": 150936, "start": 1535.36, "end": 1538.36, "text": " on top of what the normal assembler does in terms of macros,", "tokens": [322, 1192, 295, 437, 264, 2710, 8438, 1918, 775, 294, 2115, 295, 7912, 2635, 11], "temperature": 0.0, "avg_logprob": -0.1436933718229595, "compression_ratio": 1.6304347826086956, "no_speech_prob": 7.577610085718334e-05}, {"id": 474, "seek": 153836, "start": 1538.36, "end": 1540.36, "text": " so the blog post explains,", "tokens": [370, 264, 6968, 2183, 13948, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 475, "seek": 153836, "start": 1540.36, "end": 1542.36, "text": " but swap is kind of interesting.", "tokens": [457, 18135, 307, 733, 295, 1880, 13], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 476, "seek": 153836, "start": 1542.36, "end": 1544.36, "text": " It lets you swap registers,", "tokens": [467, 6653, 291, 18135, 38351, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 477, "seek": 153836, "start": 1544.36, "end": 1546.36, "text": " but then continue with them,", "tokens": [457, 550, 2354, 365, 552, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 478, "seek": 153836, "start": 1546.36, "end": 1548.36, "text": " and the layer just handles all of that internally.", "tokens": [293, 264, 4583, 445, 18722, 439, 295, 300, 19501, 13], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 479, "seek": 153836, "start": 1548.36, "end": 1551.36, "text": " There's also just macros for, like, clipping.", "tokens": [821, 311, 611, 445, 7912, 2635, 337, 11, 411, 11, 49320, 13], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 480, "seek": 153836, "start": 1551.36, "end": 1553.36, "text": " I think it was on the example,", "tokens": [286, 519, 309, 390, 322, 264, 1365, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 481, "seek": 153836, "start": 1553.36, "end": 1556.36, "text": " but clip is an example.", "tokens": [457, 7353, 307, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 482, "seek": 153836, "start": 1556.36, "end": 1558.36, "text": " So clipUB is a macro,", "tokens": [407, 7353, 23553, 307, 257, 18887, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 483, "seek": 153836, "start": 1558.36, "end": 1560.36, "text": " and on the right target set,", "tokens": [293, 322, 264, 558, 3779, 992, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 484, "seek": 153836, "start": 1560.36, "end": 1562.36, "text": " it will go and use the right clipping functions", "tokens": [309, 486, 352, 293, 764, 264, 558, 49320, 6828], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 485, "seek": 153836, "start": 1562.36, "end": 1564.36, "text": " if they're available, for example,", "tokens": [498, 436, 434, 2435, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 486, "seek": 153836, "start": 1564.36, "end": 1566.36, "text": " and there's a bunch of these, I think,", "tokens": [293, 456, 311, 257, 3840, 295, 613, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.11614485005386004, "compression_ratio": 1.7569721115537849, "no_speech_prob": 6.55820476822555e-05}, {"id": 487, "seek": 156636, "start": 1566.36, "end": 1569.36, "text": " that's how to fly. There's a few others like that.", "tokens": [300, 311, 577, 281, 3603, 13, 821, 311, 257, 1326, 2357, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.38472976684570315, "compression_ratio": 0.971830985915493, "no_speech_prob": 0.00038817155291326344}, {"id": 488, "seek": 156936, "start": 1569.36, "end": 1598.36, "text": " Thank you, Kieran.", "tokens": [50364, 1044, 291, 11, 591, 38516, 13, 51814], "temperature": 0.0, "avg_logprob": -0.24937057495117188, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.0013624635757878423}], "language": "en"}