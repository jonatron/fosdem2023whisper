{"text": " So actually, I'm going to talk about three subjects, connect my name, proxy control option and also a little bit of rust throwing at the end as a bonus. So my name is Philip Holmberg and since a bit more than a year, I now work for NLNetLabs. So the question that has probably been posed by many people is can you have just a function that in comes a house name and a surface and you get a socket back. And sort of the starting point for this project, because we've got some funding, so we officially defined that as Mikael Aberson in the ITF one suggested that something like that should be done. And of course, we want to have options so we can have a slightly more modern version where you have a context as the first thing and it returns an error code in place of overloading that with the socket, but general idea. Of course, this is completely bad because this is blocking. This is what we now want. Unfortunately, because we only at NLNetLabs basically do DNS when it comes to name resolution, this talk ignores every other possible thing. We don't even do MDNS, but we definitely don't do anything fancy, but it should not be precluded. I mean, if people want to add it, why not? So to make it non-blocking, the obvious way to extend it is to take an event framework like LibEvent and then in LibEvent speak it is, well, you create an event base, you do a bit of initialization where you pass the event base to the asynchronous library function, you start it, it returns to say, well, okay, I'm busy. Then at some point it does a couple of callbacks, like this callback function that you pass, but the main loop is called event-based dispatch and as long as your entire application is written around it, then the application just calls this one and then you can call this connect by name as many times as you like. So if you want to make this practical more complex and do a release engineering, for example, getDNS has support for, I think, three event frameworks and you can define your own event framework and stuff like that. I'll ignore this, the only thing you're going to get here is LibEvent. But there's a couple of practical things that we would like to add, so now we get another full slide and so far I said you get a socket back, implicitly a socket back means TCP because while UDP is way too complex, but then in practice, who does TCP anymore? I mean, the thing is if you have a TCP socket, then you immediately call your SSL library and you want a TLS connection, I mean, at least I hope that people are not writing new codes that ships unencrypted data over the internet. Now within LibEvent, you're lucky because they have a concept called buffer event, that's why the callback there gets a buffer event, and LibEvent can transparently do SSL, so you just return right to the buffer event and then LibEvent, well, if it knows that it is a TLS, then it sends it to open SSL and if it's just a normal TCP connection, then it sends it to the socket. So that solves that problem and that allows the library to also do a couple of other interesting things as we will see on the other slide, but because we are an organization that is focused on DNS, we focused on all of the complexity of stuff that you can do with DNS. So for example, one thing that the library does, I forgot to mention, is that if you get multiple addresses back, then the traditional way is you write a for loop, you do connect to the first address and then to the second address and there's, I don't know, many minutes timeout on the TCP connection, so if the first address doesn't work, then it takes forever. So your library needs to do happy eyeballs such that you start to connect, wait not that long and then start the next connect, which also means that any timer system is not in the order of seconds, it should be definitely in order of milliseconds because it should be within human response levels and not like, okay, the network is down, we wait seconds. So that is stuff that this library can hide and that the prototype also does, but to get to the DNS part, if you have a modern web browser, then the web browser has an option to configure DNS and that's highly controversial because it goes over HTTP, but it's something where applications have now said, okay, we are done with, et cetera, resolve.golf, we from an application point of view want to be able to do, decide which is our upstream resolver, so we added configuration options that you can say, well, I want to have an upstream resolver that has authenticated encryption. I don't really like quick and I have no clue, so I say the only allowed transport protocols is plain old DNS over 53, which will always fail because it cannot do any encryption, but we do allow DNS over TCP, we do allow DNS over HTTP too, but none of the fancy quick things, we have a name for authentication and of course we can go completely overboard and also do SVC parameters. So that extends the call a bit because now the context has a way that you can say, well, this is my DNS policy and then it goes out and do it. I mean, basic interface is still more or less the same. So we worked on connect by name, we built a prototype and a grant from an LNET foundation, we support asynchronous resolution, well, of course, asynchronous also mean that your A or what A query should go in parallel, happy eyeballs, then of course the DNS community invented Dane, so if you do GLS then you also have to do the Dane query immediately and I forgot to list here, we also do SVCB and if you have the patience to configure experimental open SSL libraries, you can also do the encrypted client hello from SVCB into open SSL and stuff like that and the nice thing is you can all hide it in a single library. So what I would like from the community is sort of one is sort of what doesn't work, what extra stuff that we need, but we also have a problem with how do we go further with this. I mean, we built a prototype, but we cannot really ourselves make it into a product for various reasons, so take a look at it if you are interested and let us know if you want to do something. Current problem for me is it's on top of KTNS, KTNS is extremely nice library, but it tries to do everything, so it's also a very heavy weight library, so there it is like, it's a library that you want to link with potentially all applications should that be that heavy weight. So that's how we got to the next subject. This is sort of now what the ITF has created as what ASTAPS resolvers should do and I left out a case and other things because ADD is busy and I don't know, there's probably quite a few other working groups. So the stop resolver, which was a very simple thing with a recent that sends a query over port 53, has to do more and more and more stuff. So many applications, ASTAPS resolvers, how many libraries will implement all of those transports, especially if it's also implemented in different languages. It used to be that a stop resolver had basically no state, but if you do DOT, DOH, UQ, then you have connection setup, you generate load in a recursive resolver because if you're constantly setting up, say, DOT, DOH connections, then it has a way higher load than if it's just a simple UDP query and it's definitely bad for short-lived applications like Ping that have a way higher overhead setting up a connection to the local recursive resolver than the actual work that the application is doing. So the simple way to solve that, we thought, you introduce a local proxy. That's not really something new because lots of people are unbound as a local DNS proxy. Well, we also, as part of the GetDNS project created, Stubby, that focuses more on doing DNS all the time, there is things like DNS dist, DNS mask, system D, resolve D, so it looks like, okay, we don't have to worry about that, we can just talk to a local proxy. But then, if we go back to the example config I had for connect by name for the Firefox that wants to talk, DOH, how do you tell your local proxy that you actually want to have an authenticated connection? What if your proxy is just sending it, I don't know, to one of the public resolvers over port 53, maybe that's not what your application wants. And then, this whole local proxy falls down and you get, say, a browser again implementing its own step resolver because it doesn't have any control. So we thought about it for a while and created a draft in the ITF with a new ETNS zero option. And basically, when you send the request to your step resolver, then you can encode all of the stuff that you want to have as a policy in such an option. So you can be very basic and set a flag like, well, only give me an authenticated connection. If you can't do it and just report like it doesn't work or you could say, well, this is the recursive resolver that I want you to use, please use that. And then applications can trust the local proxy because they can control it. And it provides a nice way to basically reduce the step resolver footprint a bit by moving all of the difficult transports to the proxy. We have a proof of concept for that, though I have to warn you that we revised the layout of the option in the draft that is listed here and what the proof concept does is an older draft. But if you want to play with it with the general concept, then that is there. So we decided that, well, we can continue writing code in C and, of course, for our existing products like unbound NSD, we will just maintain them in C because they are written in C. But we would like to try to move to Rust for new code. And I just copied a little bit of stuff from a prototype. First thing uses Rust in creative ways and that is something where it's now a prototype and we definitely need feedback from users of the library like, okay, it's very great that you can have a message builder that takes a static or press or type and it has a stream target but probably you don't want to write code like that. So it's built at the moment to be flexible and use the language but it should be somewhere modified to be more usable. Then here in the middle, you basically get the main thing because the whole thing is generic if you want to send a query, then you have to go to the question section and then you say, well, I want to push a question there and then there is again a bit of a usability problem where you say, okay, I need this back to a builder and I need a clone of it. So this is the part that I experimented with. If you want to have a TCP upstream, then you say create the TCP connection and the nice thing with Rust is that it can do all of the asynchronous stuff with a nice syntax. So basically you say, do this connect here and wait until the connect is done but because this function is implicitly asynchronous, as a programmer you can just write this as if it's sequential code but the caller can just call this as an asynchronous function and you don't have to do anything extra. Here I have to do a bit more work to really figure out how it fits in the Rust ecosystem because the thing with if you have a TCP connection upstream to a DNS resolver and I wanted to have this as just the basics for maybe DOH or whatever is that you want to set up the connection once but then you want to potentially send many queries over it. So I need to have a separate thing that actually talks TCP as a worker threat but then because it's all asynchronous this is basically getting an asynchronous worker and then I also say well give me an asynchronous query and then in Rust you can say okay you have two asynchronous things that you want to do at the same time well just do them both at the same time and then normally we expect to be here that we got a reply and then we print a reply and we are done. So this is sort of the direction we want to go to which is also why we have a bit of a problem developing the connect by name prototype that we now have because it is like okay we don't really want to have a new prototype in C what do we want to do with it. So that's what I wanted to tell today there is I think plenty of space for questions. I love the idea of having a function which can deal with not just name a resolution but DNS name a resolution and also the cryptography but as a distribution maintainer I have to say that having something a library function which makes applications behave differently from all other applications is really a non-starter so I think that you need to consider in some way to support NSS and the NSS plugins through the libc or however it's better. You mentioned that probably a demon is needed to get good performance so maybe the DNS part is the less important one that you can delegate to some other component. I'll try to summarize you say there's something with distributing this and there is something with if you run a local proxy then you don't have to focus as much on DNS if I got that correct. There are already some projects in this space that you mentioned and they are expected to work with the normal libc NSS plugins and I think that your library to be universally used that I think that's the task to be your goal you need to support the normal name resolution which is expected by any current applications so it has to support the libc plugins. You say the library will only be adopted if it supports the libc plugins. Yes I agree I mean that's why we made the prototype because we were looking into what should the interface to the library be how should the library behave stuff like that sort of the high-level stuff and fully expecting that any production quality implementation of the library has to take a lot of this stuff into account and certainly dealing with nestwitch.conf is I guess mandatory for any production quality library. For the proxy control option because there are lots of demons in that space of course it's best if those adopt the option once it is actually standardized by the ITF. I mean it's not that we want to write another proxy it's just like we have a very specific problem that we want to solve if we want to make stuff resolve a small and still give them access to all of the encrypted transports but yeah if for example system dresolve they would also do the proxy control option then it would be perfectly fine I mean there's no new reason to write a new one for the proxy control option. Is it only the step resolver that will tell the proxy server that it wants those policies applied or does the proxy also communicate back to the step resolver that is actually implying those policies because in the initial situation where nothing supports it, which you always have. So the question is what happens if you send a proxy control option to an older step resolver that may not be aware. So I didn't want to go over the entire draft, so we thought about that. But basically there are some priming queries. I forgot the exact name. Is it resolver.ARPA that is proposed? Something like that. So try to look up resolver.ARPA, see if you get the right response. If you don't, then the only thing you leaked is that you were trying to look up resolver.ARPA. We assume that that is safe and then if you do get it, then you know that the proxy understands it. Yeah. Any more questions? Okay, yeah. There's actually a comment on both this presentation and the previous one. You're tackling three moving targets at the same time. You're trying to figure out how to integrate with the event loop. You're trying to figure out what your API to the application looks like and you need to figure out what your integration with NSS or system. The complexity is multiplicative, so you're curbing this. This is a horrible idea. You can at least remove the event loop integration as a moving target. There is an existing project called libverto which tried to just solve that one problem by providing four libraries and API to integrate with an arbitrary event loop provided by the application. I think you need to remove the number of moving targets like reduce it and maybe the event loop is the one to kick out first and try to put in a separate consideration how to solve that and then continue from there. So the question was basically it tries to deal with too much stuff at the same time. Event loops, figuring out an API and then also figuring out how to deal with an S-switch. There's an existing library called virto. That makes it easier to be flexible with respect to event loops. That's definitely a good point. I'll try to look at it, but I specifically decided to only focus on libEvent to just get virto. To get something, a prototype up and running and not try to support arbitrary things like that. More questions, some more time. Okay, it seems that we have run out of questions.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.84, "text": " So actually, I'm going to talk about three subjects, connect my name, proxy control", "tokens": [50364, 407, 767, 11, 286, 478, 516, 281, 751, 466, 1045, 13066, 11, 1745, 452, 1315, 11, 29690, 1969, 50906], "temperature": 0.0, "avg_logprob": -0.2689211472221043, "compression_ratio": 1.3908045977011494, "no_speech_prob": 0.3363139033317566}, {"id": 1, "seek": 0, "start": 10.84, "end": 16.32, "text": " option and also a little bit of rust throwing at the end as a bonus.", "tokens": [50906, 3614, 293, 611, 257, 707, 857, 295, 15259, 10238, 412, 264, 917, 382, 257, 10882, 13, 51180], "temperature": 0.0, "avg_logprob": -0.2689211472221043, "compression_ratio": 1.3908045977011494, "no_speech_prob": 0.3363139033317566}, {"id": 2, "seek": 0, "start": 16.32, "end": 24.64, "text": " So my name is Philip Holmberg and since a bit more than a year, I now work for NLNetLabs.", "tokens": [51180, 407, 452, 1315, 307, 21144, 11086, 4508, 70, 293, 1670, 257, 857, 544, 813, 257, 1064, 11, 286, 586, 589, 337, 426, 43, 31890, 43, 17243, 13, 51596], "temperature": 0.0, "avg_logprob": -0.2689211472221043, "compression_ratio": 1.3908045977011494, "no_speech_prob": 0.3363139033317566}, {"id": 3, "seek": 2464, "start": 24.64, "end": 31.64, "text": " So the question that has probably been posed by many people is can you have just a function", "tokens": [50364, 407, 264, 1168, 300, 575, 1391, 668, 31399, 538, 867, 561, 307, 393, 291, 362, 445, 257, 2445, 50714], "temperature": 0.0, "avg_logprob": -0.27027910405939276, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.13214759528636932}, {"id": 4, "seek": 2464, "start": 31.64, "end": 37.16, "text": " that in comes a house name and a surface and you get a socket back.", "tokens": [50714, 300, 294, 1487, 257, 1782, 1315, 293, 257, 3753, 293, 291, 483, 257, 19741, 646, 13, 50990], "temperature": 0.0, "avg_logprob": -0.27027910405939276, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.13214759528636932}, {"id": 5, "seek": 2464, "start": 37.16, "end": 42.0, "text": " And sort of the starting point for this project, because we've got some funding, so we officially", "tokens": [50990, 400, 1333, 295, 264, 2891, 935, 337, 341, 1716, 11, 570, 321, 600, 658, 512, 6137, 11, 370, 321, 12053, 51232], "temperature": 0.0, "avg_logprob": -0.27027910405939276, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.13214759528636932}, {"id": 6, "seek": 2464, "start": 42.0, "end": 48.84, "text": " defined that as Mikael Aberson in the ITF one suggested that something like that should", "tokens": [51232, 7642, 300, 382, 16380, 4300, 316, 1616, 266, 294, 264, 6783, 37, 472, 10945, 300, 746, 411, 300, 820, 51574], "temperature": 0.0, "avg_logprob": -0.27027910405939276, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.13214759528636932}, {"id": 7, "seek": 2464, "start": 48.84, "end": 50.56, "text": " be done.", "tokens": [51574, 312, 1096, 13, 51660], "temperature": 0.0, "avg_logprob": -0.27027910405939276, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.13214759528636932}, {"id": 8, "seek": 5056, "start": 50.56, "end": 55.96, "text": " And of course, we want to have options so we can have a slightly more modern version", "tokens": [50364, 400, 295, 1164, 11, 321, 528, 281, 362, 3956, 370, 321, 393, 362, 257, 4748, 544, 4363, 3037, 50634], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 9, "seek": 5056, "start": 55.96, "end": 60.800000000000004, "text": " where you have a context as the first thing and it returns an error code in place of", "tokens": [50634, 689, 291, 362, 257, 4319, 382, 264, 700, 551, 293, 309, 11247, 364, 6713, 3089, 294, 1081, 295, 50876], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 10, "seek": 5056, "start": 60.800000000000004, "end": 64.60000000000001, "text": " overloading that with the socket, but general idea.", "tokens": [50876, 28777, 278, 300, 365, 264, 19741, 11, 457, 2674, 1558, 13, 51066], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 11, "seek": 5056, "start": 64.60000000000001, "end": 68.6, "text": " Of course, this is completely bad because this is blocking.", "tokens": [51066, 2720, 1164, 11, 341, 307, 2584, 1578, 570, 341, 307, 17776, 13, 51266], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 12, "seek": 5056, "start": 68.6, "end": 71.0, "text": " This is what we now want.", "tokens": [51266, 639, 307, 437, 321, 586, 528, 13, 51386], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 13, "seek": 5056, "start": 71.0, "end": 77.72, "text": " Unfortunately, because we only at NLNetLabs basically do DNS when it comes to name resolution,", "tokens": [51386, 8590, 11, 570, 321, 787, 412, 426, 43, 31890, 43, 17243, 1936, 360, 35153, 562, 309, 1487, 281, 1315, 8669, 11, 51722], "temperature": 0.0, "avg_logprob": -0.2163769561465424, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.029037054628133774}, {"id": 14, "seek": 7772, "start": 77.72, "end": 80.67999999999999, "text": " this talk ignores every other possible thing.", "tokens": [50364, 341, 751, 5335, 2706, 633, 661, 1944, 551, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1827713131904602, "compression_ratio": 1.421875, "no_speech_prob": 0.14595060050487518}, {"id": 15, "seek": 7772, "start": 80.67999999999999, "end": 87.28, "text": " We don't even do MDNS, but we definitely don't do anything fancy, but it should not", "tokens": [50512, 492, 500, 380, 754, 360, 22521, 42003, 11, 457, 321, 2138, 500, 380, 360, 1340, 10247, 11, 457, 309, 820, 406, 50842], "temperature": 0.0, "avg_logprob": -0.1827713131904602, "compression_ratio": 1.421875, "no_speech_prob": 0.14595060050487518}, {"id": 16, "seek": 7772, "start": 87.28, "end": 88.28, "text": " be precluded.", "tokens": [50842, 312, 4346, 44412, 13, 50892], "temperature": 0.0, "avg_logprob": -0.1827713131904602, "compression_ratio": 1.421875, "no_speech_prob": 0.14595060050487518}, {"id": 17, "seek": 7772, "start": 88.28, "end": 94.0, "text": " I mean, if people want to add it, why not?", "tokens": [50892, 286, 914, 11, 498, 561, 528, 281, 909, 309, 11, 983, 406, 30, 51178], "temperature": 0.0, "avg_logprob": -0.1827713131904602, "compression_ratio": 1.421875, "no_speech_prob": 0.14595060050487518}, {"id": 18, "seek": 7772, "start": 94.0, "end": 103.32, "text": " So to make it non-blocking, the obvious way to extend it is to take an event framework", "tokens": [51178, 407, 281, 652, 309, 2107, 12, 28830, 278, 11, 264, 6322, 636, 281, 10101, 309, 307, 281, 747, 364, 2280, 8388, 51644], "temperature": 0.0, "avg_logprob": -0.1827713131904602, "compression_ratio": 1.421875, "no_speech_prob": 0.14595060050487518}, {"id": 19, "seek": 10332, "start": 103.32, "end": 110.11999999999999, "text": " like LibEvent and then in LibEvent speak it is, well, you create an event base, you do", "tokens": [50364, 411, 15834, 36, 2475, 293, 550, 294, 15834, 36, 2475, 1710, 309, 307, 11, 731, 11, 291, 1884, 364, 2280, 3096, 11, 291, 360, 50704], "temperature": 0.0, "avg_logprob": -0.20375446004605074, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.4055801331996918}, {"id": 20, "seek": 10332, "start": 110.11999999999999, "end": 116.16, "text": " a bit of initialization where you pass the event base to the asynchronous library function,", "tokens": [50704, 257, 857, 295, 5883, 2144, 689, 291, 1320, 264, 2280, 3096, 281, 264, 49174, 6405, 2445, 11, 51006], "temperature": 0.0, "avg_logprob": -0.20375446004605074, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.4055801331996918}, {"id": 21, "seek": 10332, "start": 116.16, "end": 120.67999999999999, "text": " you start it, it returns to say, well, okay, I'm busy.", "tokens": [51006, 291, 722, 309, 11, 309, 11247, 281, 584, 11, 731, 11, 1392, 11, 286, 478, 5856, 13, 51232], "temperature": 0.0, "avg_logprob": -0.20375446004605074, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.4055801331996918}, {"id": 22, "seek": 10332, "start": 120.67999999999999, "end": 126.08, "text": " Then at some point it does a couple of callbacks, like this callback function that you pass,", "tokens": [51232, 1396, 412, 512, 935, 309, 775, 257, 1916, 295, 818, 17758, 11, 411, 341, 818, 3207, 2445, 300, 291, 1320, 11, 51502], "temperature": 0.0, "avg_logprob": -0.20375446004605074, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.4055801331996918}, {"id": 23, "seek": 10332, "start": 126.08, "end": 132.48, "text": " but the main loop is called event-based dispatch and as long as your entire application is", "tokens": [51502, 457, 264, 2135, 6367, 307, 1219, 2280, 12, 6032, 36729, 293, 382, 938, 382, 428, 2302, 3861, 307, 51822], "temperature": 0.0, "avg_logprob": -0.20375446004605074, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.4055801331996918}, {"id": 24, "seek": 13248, "start": 132.48, "end": 137.6, "text": " written around it, then the application just calls this one and then you can call this", "tokens": [50364, 3720, 926, 309, 11, 550, 264, 3861, 445, 5498, 341, 472, 293, 550, 291, 393, 818, 341, 50620], "temperature": 0.0, "avg_logprob": -0.19470403307960146, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.03752020001411438}, {"id": 25, "seek": 13248, "start": 137.6, "end": 142.0, "text": " connect by name as many times as you like.", "tokens": [50620, 1745, 538, 1315, 382, 867, 1413, 382, 291, 411, 13, 50840], "temperature": 0.0, "avg_logprob": -0.19470403307960146, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.03752020001411438}, {"id": 26, "seek": 13248, "start": 142.0, "end": 148.92, "text": " So if you want to make this practical more complex and do a release engineering, for", "tokens": [50840, 407, 498, 291, 528, 281, 652, 341, 8496, 544, 3997, 293, 360, 257, 4374, 7043, 11, 337, 51186], "temperature": 0.0, "avg_logprob": -0.19470403307960146, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.03752020001411438}, {"id": 27, "seek": 13248, "start": 148.92, "end": 154.76, "text": " example, getDNS has support for, I think, three event frameworks and you can define", "tokens": [51186, 1365, 11, 483, 35, 42003, 575, 1406, 337, 11, 286, 519, 11, 1045, 2280, 29834, 293, 291, 393, 6964, 51478], "temperature": 0.0, "avg_logprob": -0.19470403307960146, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.03752020001411438}, {"id": 28, "seek": 13248, "start": 154.76, "end": 156.76, "text": " your own event framework and stuff like that.", "tokens": [51478, 428, 1065, 2280, 8388, 293, 1507, 411, 300, 13, 51578], "temperature": 0.0, "avg_logprob": -0.19470403307960146, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.03752020001411438}, {"id": 29, "seek": 15676, "start": 156.76, "end": 163.72, "text": " I'll ignore this, the only thing you're going to get here is LibEvent.", "tokens": [50364, 286, 603, 11200, 341, 11, 264, 787, 551, 291, 434, 516, 281, 483, 510, 307, 15834, 36, 2475, 13, 50712], "temperature": 0.0, "avg_logprob": -0.2217701565135609, "compression_ratio": 1.5022831050228311, "no_speech_prob": 0.08155171573162079}, {"id": 30, "seek": 15676, "start": 163.72, "end": 170.04, "text": " But there's a couple of practical things that we would like to add, so now we get another", "tokens": [50712, 583, 456, 311, 257, 1916, 295, 8496, 721, 300, 321, 576, 411, 281, 909, 11, 370, 586, 321, 483, 1071, 51028], "temperature": 0.0, "avg_logprob": -0.2217701565135609, "compression_ratio": 1.5022831050228311, "no_speech_prob": 0.08155171573162079}, {"id": 31, "seek": 15676, "start": 170.04, "end": 177.92, "text": " full slide and so far I said you get a socket back, implicitly a socket back means TCP because", "tokens": [51028, 1577, 4137, 293, 370, 1400, 286, 848, 291, 483, 257, 19741, 646, 11, 26947, 356, 257, 19741, 646, 1355, 48965, 570, 51422], "temperature": 0.0, "avg_logprob": -0.2217701565135609, "compression_ratio": 1.5022831050228311, "no_speech_prob": 0.08155171573162079}, {"id": 32, "seek": 15676, "start": 177.92, "end": 184.07999999999998, "text": " while UDP is way too complex, but then in practice, who does TCP anymore?", "tokens": [51422, 1339, 624, 11373, 307, 636, 886, 3997, 11, 457, 550, 294, 3124, 11, 567, 775, 48965, 3602, 30, 51730], "temperature": 0.0, "avg_logprob": -0.2217701565135609, "compression_ratio": 1.5022831050228311, "no_speech_prob": 0.08155171573162079}, {"id": 33, "seek": 18408, "start": 184.08, "end": 188.4, "text": " I mean, the thing is if you have a TCP socket, then you immediately call your SSL library", "tokens": [50364, 286, 914, 11, 264, 551, 307, 498, 291, 362, 257, 48965, 19741, 11, 550, 291, 4258, 818, 428, 12238, 43, 6405, 50580], "temperature": 0.0, "avg_logprob": -0.22385938079268844, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.011456449516117573}, {"id": 34, "seek": 18408, "start": 188.4, "end": 192.44, "text": " and you want a TLS connection, I mean, at least I hope that people are not writing new", "tokens": [50580, 293, 291, 528, 257, 314, 19198, 4984, 11, 286, 914, 11, 412, 1935, 286, 1454, 300, 561, 366, 406, 3579, 777, 50782], "temperature": 0.0, "avg_logprob": -0.22385938079268844, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.011456449516117573}, {"id": 35, "seek": 18408, "start": 192.44, "end": 198.08, "text": " codes that ships unencrypted data over the internet.", "tokens": [50782, 14211, 300, 11434, 517, 22660, 627, 25383, 1412, 670, 264, 4705, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22385938079268844, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.011456449516117573}, {"id": 36, "seek": 18408, "start": 198.08, "end": 204.4, "text": " Now within LibEvent, you're lucky because they have a concept called buffer event, that's", "tokens": [51064, 823, 1951, 15834, 36, 2475, 11, 291, 434, 6356, 570, 436, 362, 257, 3410, 1219, 21762, 2280, 11, 300, 311, 51380], "temperature": 0.0, "avg_logprob": -0.22385938079268844, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.011456449516117573}, {"id": 37, "seek": 18408, "start": 204.4, "end": 212.24, "text": " why the callback there gets a buffer event, and LibEvent can transparently do SSL, so", "tokens": [51380, 983, 264, 818, 3207, 456, 2170, 257, 21762, 2280, 11, 293, 15834, 36, 2475, 393, 7132, 6420, 360, 12238, 43, 11, 370, 51772], "temperature": 0.0, "avg_logprob": -0.22385938079268844, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.011456449516117573}, {"id": 38, "seek": 21224, "start": 212.24, "end": 216.64000000000001, "text": " you just return right to the buffer event and then LibEvent, well, if it knows that", "tokens": [50364, 291, 445, 2736, 558, 281, 264, 21762, 2280, 293, 550, 15834, 36, 2475, 11, 731, 11, 498, 309, 3255, 300, 50584], "temperature": 0.0, "avg_logprob": -0.1804802703857422, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.009724695235490799}, {"id": 39, "seek": 21224, "start": 216.64000000000001, "end": 224.28, "text": " it is a TLS, then it sends it to open SSL and if it's just a normal TCP connection, then", "tokens": [50584, 309, 307, 257, 314, 19198, 11, 550, 309, 14790, 309, 281, 1269, 12238, 43, 293, 498, 309, 311, 445, 257, 2710, 48965, 4984, 11, 550, 50966], "temperature": 0.0, "avg_logprob": -0.1804802703857422, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.009724695235490799}, {"id": 40, "seek": 21224, "start": 224.28, "end": 226.76000000000002, "text": " it sends it to the socket.", "tokens": [50966, 309, 14790, 309, 281, 264, 19741, 13, 51090], "temperature": 0.0, "avg_logprob": -0.1804802703857422, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.009724695235490799}, {"id": 41, "seek": 21224, "start": 226.76000000000002, "end": 233.68, "text": " So that solves that problem and that allows the library to also do a couple of other interesting", "tokens": [51090, 407, 300, 39890, 300, 1154, 293, 300, 4045, 264, 6405, 281, 611, 360, 257, 1916, 295, 661, 1880, 51436], "temperature": 0.0, "avg_logprob": -0.1804802703857422, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.009724695235490799}, {"id": 42, "seek": 21224, "start": 233.68, "end": 240.8, "text": " things as we will see on the other slide, but because we are an organization that is", "tokens": [51436, 721, 382, 321, 486, 536, 322, 264, 661, 4137, 11, 457, 570, 321, 366, 364, 4475, 300, 307, 51792], "temperature": 0.0, "avg_logprob": -0.1804802703857422, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.009724695235490799}, {"id": 43, "seek": 24080, "start": 240.8, "end": 247.48000000000002, "text": " focused on DNS, we focused on all of the complexity of stuff that you can do with DNS.", "tokens": [50364, 5178, 322, 35153, 11, 321, 5178, 322, 439, 295, 264, 14024, 295, 1507, 300, 291, 393, 360, 365, 35153, 13, 50698], "temperature": 0.0, "avg_logprob": -0.12250488416283531, "compression_ratio": 1.7607843137254902, "no_speech_prob": 0.02585439570248127}, {"id": 44, "seek": 24080, "start": 247.48000000000002, "end": 253.20000000000002, "text": " So for example, one thing that the library does, I forgot to mention, is that if you", "tokens": [50698, 407, 337, 1365, 11, 472, 551, 300, 264, 6405, 775, 11, 286, 5298, 281, 2152, 11, 307, 300, 498, 291, 50984], "temperature": 0.0, "avg_logprob": -0.12250488416283531, "compression_ratio": 1.7607843137254902, "no_speech_prob": 0.02585439570248127}, {"id": 45, "seek": 24080, "start": 253.20000000000002, "end": 258.16, "text": " get multiple addresses back, then the traditional way is you write a for loop, you do connect", "tokens": [50984, 483, 3866, 16862, 646, 11, 550, 264, 5164, 636, 307, 291, 2464, 257, 337, 6367, 11, 291, 360, 1745, 51232], "temperature": 0.0, "avg_logprob": -0.12250488416283531, "compression_ratio": 1.7607843137254902, "no_speech_prob": 0.02585439570248127}, {"id": 46, "seek": 24080, "start": 258.16, "end": 262.36, "text": " to the first address and then to the second address and there's, I don't know, many minutes", "tokens": [51232, 281, 264, 700, 2985, 293, 550, 281, 264, 1150, 2985, 293, 456, 311, 11, 286, 500, 380, 458, 11, 867, 2077, 51442], "temperature": 0.0, "avg_logprob": -0.12250488416283531, "compression_ratio": 1.7607843137254902, "no_speech_prob": 0.02585439570248127}, {"id": 47, "seek": 24080, "start": 262.36, "end": 267.44, "text": " timeout on the TCP connection, so if the first address doesn't work, then it takes forever.", "tokens": [51442, 565, 346, 322, 264, 48965, 4984, 11, 370, 498, 264, 700, 2985, 1177, 380, 589, 11, 550, 309, 2516, 5680, 13, 51696], "temperature": 0.0, "avg_logprob": -0.12250488416283531, "compression_ratio": 1.7607843137254902, "no_speech_prob": 0.02585439570248127}, {"id": 48, "seek": 26744, "start": 267.44, "end": 272.76, "text": " So your library needs to do happy eyeballs such that you start to connect, wait not that", "tokens": [50364, 407, 428, 6405, 2203, 281, 360, 2055, 43758, 1270, 300, 291, 722, 281, 1745, 11, 1699, 406, 300, 50630], "temperature": 0.0, "avg_logprob": -0.1417334952005526, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.030168408527970314}, {"id": 49, "seek": 26744, "start": 272.76, "end": 279.08, "text": " long and then start the next connect, which also means that any timer system is not in", "tokens": [50630, 938, 293, 550, 722, 264, 958, 1745, 11, 597, 611, 1355, 300, 604, 19247, 1185, 307, 406, 294, 50946], "temperature": 0.0, "avg_logprob": -0.1417334952005526, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.030168408527970314}, {"id": 50, "seek": 26744, "start": 279.08, "end": 283.32, "text": " the order of seconds, it should be definitely in order of milliseconds because it should", "tokens": [50946, 264, 1668, 295, 3949, 11, 309, 820, 312, 2138, 294, 1668, 295, 34184, 570, 309, 820, 51158], "temperature": 0.0, "avg_logprob": -0.1417334952005526, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.030168408527970314}, {"id": 51, "seek": 26744, "start": 283.32, "end": 291.32, "text": " be within human response levels and not like, okay, the network is down, we wait seconds.", "tokens": [51158, 312, 1951, 1952, 4134, 4358, 293, 406, 411, 11, 1392, 11, 264, 3209, 307, 760, 11, 321, 1699, 3949, 13, 51558], "temperature": 0.0, "avg_logprob": -0.1417334952005526, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.030168408527970314}, {"id": 52, "seek": 29132, "start": 291.32, "end": 299.08, "text": " So that is stuff that this library can hide and that the prototype also does, but to get", "tokens": [50364, 407, 300, 307, 1507, 300, 341, 6405, 393, 6479, 293, 300, 264, 19475, 611, 775, 11, 457, 281, 483, 50752], "temperature": 0.0, "avg_logprob": -0.17466852638158906, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.05004454031586647}, {"id": 53, "seek": 29132, "start": 299.08, "end": 305.28, "text": " to the DNS part, if you have a modern web browser, then the web browser has an option", "tokens": [50752, 281, 264, 35153, 644, 11, 498, 291, 362, 257, 4363, 3670, 11185, 11, 550, 264, 3670, 11185, 575, 364, 3614, 51062], "temperature": 0.0, "avg_logprob": -0.17466852638158906, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.05004454031586647}, {"id": 54, "seek": 29132, "start": 305.28, "end": 312.8, "text": " to configure DNS and that's highly controversial because it goes over HTTP, but it's something", "tokens": [51062, 281, 22162, 35153, 293, 300, 311, 5405, 17323, 570, 309, 1709, 670, 33283, 11, 457, 309, 311, 746, 51438], "temperature": 0.0, "avg_logprob": -0.17466852638158906, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.05004454031586647}, {"id": 55, "seek": 29132, "start": 312.8, "end": 318.15999999999997, "text": " where applications have now said, okay, we are done with, et cetera, resolve.golf, we", "tokens": [51438, 689, 5821, 362, 586, 848, 11, 1392, 11, 321, 366, 1096, 365, 11, 1030, 11458, 11, 14151, 13, 70, 7491, 11, 321, 51706], "temperature": 0.0, "avg_logprob": -0.17466852638158906, "compression_ratio": 1.5638766519823788, "no_speech_prob": 0.05004454031586647}, {"id": 56, "seek": 31816, "start": 318.16, "end": 323.52000000000004, "text": " from an application point of view want to be able to do, decide which is our upstream", "tokens": [50364, 490, 364, 3861, 935, 295, 1910, 528, 281, 312, 1075, 281, 360, 11, 4536, 597, 307, 527, 33915, 50632], "temperature": 0.0, "avg_logprob": -0.19355000813802084, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.26737165451049805}, {"id": 57, "seek": 31816, "start": 323.52000000000004, "end": 331.0, "text": " resolver, so we added configuration options that you can say, well, I want to have an", "tokens": [50632, 34480, 11, 370, 321, 3869, 11694, 3956, 300, 291, 393, 584, 11, 731, 11, 286, 528, 281, 362, 364, 51006], "temperature": 0.0, "avg_logprob": -0.19355000813802084, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.26737165451049805}, {"id": 58, "seek": 31816, "start": 331.0, "end": 336.12, "text": " upstream resolver that has authenticated encryption.", "tokens": [51006, 33915, 34480, 300, 575, 9214, 3587, 29575, 13, 51262], "temperature": 0.0, "avg_logprob": -0.19355000813802084, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.26737165451049805}, {"id": 59, "seek": 31816, "start": 336.12, "end": 343.40000000000003, "text": " I don't really like quick and I have no clue, so I say the only allowed transport protocols", "tokens": [51262, 286, 500, 380, 534, 411, 1702, 293, 286, 362, 572, 13602, 11, 370, 286, 584, 264, 787, 4350, 5495, 20618, 51626], "temperature": 0.0, "avg_logprob": -0.19355000813802084, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.26737165451049805}, {"id": 60, "seek": 34340, "start": 343.4, "end": 349.08, "text": " is plain old DNS over 53, which will always fail because it cannot do any encryption,", "tokens": [50364, 307, 11121, 1331, 35153, 670, 21860, 11, 597, 486, 1009, 3061, 570, 309, 2644, 360, 604, 29575, 11, 50648], "temperature": 0.0, "avg_logprob": -0.19645330350692958, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.15151943266391754}, {"id": 61, "seek": 34340, "start": 349.08, "end": 357.4, "text": " but we do allow DNS over TCP, we do allow DNS over HTTP too, but none of the fancy quick", "tokens": [50648, 457, 321, 360, 2089, 35153, 670, 48965, 11, 321, 360, 2089, 35153, 670, 33283, 886, 11, 457, 6022, 295, 264, 10247, 1702, 51064], "temperature": 0.0, "avg_logprob": -0.19645330350692958, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.15151943266391754}, {"id": 62, "seek": 34340, "start": 357.4, "end": 364.64, "text": " things, we have a name for authentication and of course we can go completely overboard", "tokens": [51064, 721, 11, 321, 362, 257, 1315, 337, 26643, 293, 295, 1164, 321, 393, 352, 2584, 49480, 51426], "temperature": 0.0, "avg_logprob": -0.19645330350692958, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.15151943266391754}, {"id": 63, "seek": 34340, "start": 364.64, "end": 369.08, "text": " and also do SVC parameters.", "tokens": [51426, 293, 611, 360, 31910, 34, 9834, 13, 51648], "temperature": 0.0, "avg_logprob": -0.19645330350692958, "compression_ratio": 1.4896907216494846, "no_speech_prob": 0.15151943266391754}, {"id": 64, "seek": 36908, "start": 369.08, "end": 377.08, "text": " So that extends the call a bit because now the context has a way that you can say, well,", "tokens": [50364, 407, 300, 26448, 264, 818, 257, 857, 570, 586, 264, 4319, 575, 257, 636, 300, 291, 393, 584, 11, 731, 11, 50764], "temperature": 0.0, "avg_logprob": -0.178869366645813, "compression_ratio": 1.375, "no_speech_prob": 0.001952627906575799}, {"id": 65, "seek": 36908, "start": 377.08, "end": 381.76, "text": " this is my DNS policy and then it goes out and do it.", "tokens": [50764, 341, 307, 452, 35153, 3897, 293, 550, 309, 1709, 484, 293, 360, 309, 13, 50998], "temperature": 0.0, "avg_logprob": -0.178869366645813, "compression_ratio": 1.375, "no_speech_prob": 0.001952627906575799}, {"id": 66, "seek": 36908, "start": 381.76, "end": 389.71999999999997, "text": " I mean, basic interface is still more or less the same.", "tokens": [50998, 286, 914, 11, 3875, 9226, 307, 920, 544, 420, 1570, 264, 912, 13, 51396], "temperature": 0.0, "avg_logprob": -0.178869366645813, "compression_ratio": 1.375, "no_speech_prob": 0.001952627906575799}, {"id": 67, "seek": 38972, "start": 389.72, "end": 399.28000000000003, "text": " So we worked on connect by name, we built a prototype and a grant from an LNET foundation,", "tokens": [50364, 407, 321, 2732, 322, 1745, 538, 1315, 11, 321, 3094, 257, 19475, 293, 257, 6386, 490, 364, 441, 35554, 7030, 11, 50842], "temperature": 0.0, "avg_logprob": -0.30505890681825837, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.3980563282966614}, {"id": 68, "seek": 38972, "start": 399.28000000000003, "end": 405.84000000000003, "text": " we support asynchronous resolution, well, of course, asynchronous also mean that your", "tokens": [50842, 321, 1406, 49174, 8669, 11, 731, 11, 295, 1164, 11, 49174, 611, 914, 300, 428, 51170], "temperature": 0.0, "avg_logprob": -0.30505890681825837, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.3980563282966614}, {"id": 69, "seek": 38972, "start": 405.84000000000003, "end": 412.48, "text": " A or what A query should go in parallel, happy eyeballs, then of course the DNS community", "tokens": [51170, 316, 420, 437, 316, 14581, 820, 352, 294, 8952, 11, 2055, 43758, 11, 550, 295, 1164, 264, 35153, 1768, 51502], "temperature": 0.0, "avg_logprob": -0.30505890681825837, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.3980563282966614}, {"id": 70, "seek": 38972, "start": 412.48, "end": 419.36, "text": " invented Dane, so if you do GLS then you also have to do the Dane query immediately and", "tokens": [51502, 14479, 413, 1929, 11, 370, 498, 291, 360, 16225, 50, 550, 291, 611, 362, 281, 360, 264, 413, 1929, 14581, 4258, 293, 51846], "temperature": 0.0, "avg_logprob": -0.30505890681825837, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.3980563282966614}, {"id": 71, "seek": 41936, "start": 419.36, "end": 428.2, "text": " I forgot to list here, we also do SVCB and if you have the patience to configure experimental", "tokens": [50364, 286, 5298, 281, 1329, 510, 11, 321, 611, 360, 31910, 34, 33, 293, 498, 291, 362, 264, 14826, 281, 22162, 17069, 50806], "temperature": 0.0, "avg_logprob": -0.12500288866568302, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.08134634047746658}, {"id": 72, "seek": 41936, "start": 428.2, "end": 436.56, "text": " open SSL libraries, you can also do the encrypted client hello from SVCB into open SSL and stuff", "tokens": [50806, 1269, 12238, 43, 15148, 11, 291, 393, 611, 360, 264, 36663, 6423, 7751, 490, 31910, 34, 33, 666, 1269, 12238, 43, 293, 1507, 51224], "temperature": 0.0, "avg_logprob": -0.12500288866568302, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.08134634047746658}, {"id": 73, "seek": 41936, "start": 436.56, "end": 441.84000000000003, "text": " like that and the nice thing is you can all hide it in a single library.", "tokens": [51224, 411, 300, 293, 264, 1481, 551, 307, 291, 393, 439, 6479, 309, 294, 257, 2167, 6405, 13, 51488], "temperature": 0.0, "avg_logprob": -0.12500288866568302, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.08134634047746658}, {"id": 74, "seek": 44184, "start": 441.84, "end": 448.76, "text": " So what I would like from the community is sort of one is sort of what doesn't work,", "tokens": [50364, 407, 437, 286, 576, 411, 490, 264, 1768, 307, 1333, 295, 472, 307, 1333, 295, 437, 1177, 380, 589, 11, 50710], "temperature": 0.0, "avg_logprob": -0.2040639897828461, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.14306765794754028}, {"id": 75, "seek": 44184, "start": 448.76, "end": 454.67999999999995, "text": " what extra stuff that we need, but we also have a problem with how do we go further with", "tokens": [50710, 437, 2857, 1507, 300, 321, 643, 11, 457, 321, 611, 362, 257, 1154, 365, 577, 360, 321, 352, 3052, 365, 51006], "temperature": 0.0, "avg_logprob": -0.2040639897828461, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.14306765794754028}, {"id": 76, "seek": 44184, "start": 454.67999999999995, "end": 455.67999999999995, "text": " this.", "tokens": [51006, 341, 13, 51056], "temperature": 0.0, "avg_logprob": -0.2040639897828461, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.14306765794754028}, {"id": 77, "seek": 44184, "start": 455.67999999999995, "end": 461.55999999999995, "text": " I mean, we built a prototype, but we cannot really ourselves make it into a product for", "tokens": [51056, 286, 914, 11, 321, 3094, 257, 19475, 11, 457, 321, 2644, 534, 4175, 652, 309, 666, 257, 1674, 337, 51350], "temperature": 0.0, "avg_logprob": -0.2040639897828461, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.14306765794754028}, {"id": 78, "seek": 44184, "start": 461.55999999999995, "end": 469.08, "text": " various reasons, so take a look at it if you are interested and let us know if you want", "tokens": [51350, 3683, 4112, 11, 370, 747, 257, 574, 412, 309, 498, 291, 366, 3102, 293, 718, 505, 458, 498, 291, 528, 51726], "temperature": 0.0, "avg_logprob": -0.2040639897828461, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.14306765794754028}, {"id": 79, "seek": 46908, "start": 469.08, "end": 471.2, "text": " to do something.", "tokens": [50364, 281, 360, 746, 13, 50470], "temperature": 0.0, "avg_logprob": -0.23092533629617573, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.02518271654844284}, {"id": 80, "seek": 46908, "start": 471.2, "end": 478.59999999999997, "text": " Current problem for me is it's on top of KTNS, KTNS is extremely nice library, but it tries", "tokens": [50470, 15629, 1154, 337, 385, 307, 309, 311, 322, 1192, 295, 591, 51, 42003, 11, 591, 51, 42003, 307, 4664, 1481, 6405, 11, 457, 309, 9898, 50840], "temperature": 0.0, "avg_logprob": -0.23092533629617573, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.02518271654844284}, {"id": 81, "seek": 46908, "start": 478.59999999999997, "end": 484.03999999999996, "text": " to do everything, so it's also a very heavy weight library, so there it is like, it's", "tokens": [50840, 281, 360, 1203, 11, 370, 309, 311, 611, 257, 588, 4676, 3364, 6405, 11, 370, 456, 309, 307, 411, 11, 309, 311, 51112], "temperature": 0.0, "avg_logprob": -0.23092533629617573, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.02518271654844284}, {"id": 82, "seek": 46908, "start": 484.03999999999996, "end": 489.52, "text": " a library that you want to link with potentially all applications should that be that heavy", "tokens": [51112, 257, 6405, 300, 291, 528, 281, 2113, 365, 7263, 439, 5821, 820, 300, 312, 300, 4676, 51386], "temperature": 0.0, "avg_logprob": -0.23092533629617573, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.02518271654844284}, {"id": 83, "seek": 46908, "start": 489.52, "end": 491.64, "text": " weight.", "tokens": [51386, 3364, 13, 51492], "temperature": 0.0, "avg_logprob": -0.23092533629617573, "compression_ratio": 1.5473684210526315, "no_speech_prob": 0.02518271654844284}, {"id": 84, "seek": 49164, "start": 491.64, "end": 498.4, "text": " So that's how we got to the next subject.", "tokens": [50364, 407, 300, 311, 577, 321, 658, 281, 264, 958, 3983, 13, 50702], "temperature": 0.0, "avg_logprob": -0.25142185662382394, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.05780725181102753}, {"id": 85, "seek": 49164, "start": 498.4, "end": 505.96, "text": " This is sort of now what the ITF has created as what ASTAPS resolvers should do and I left", "tokens": [50702, 639, 307, 1333, 295, 586, 437, 264, 6783, 37, 575, 2942, 382, 437, 316, 6840, 4715, 50, 7923, 840, 820, 360, 293, 286, 1411, 51080], "temperature": 0.0, "avg_logprob": -0.25142185662382394, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.05780725181102753}, {"id": 86, "seek": 49164, "start": 505.96, "end": 512.48, "text": " out a case and other things because ADD is busy and I don't know, there's probably quite", "tokens": [51080, 484, 257, 1389, 293, 661, 721, 570, 9135, 35, 307, 5856, 293, 286, 500, 380, 458, 11, 456, 311, 1391, 1596, 51406], "temperature": 0.0, "avg_logprob": -0.25142185662382394, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.05780725181102753}, {"id": 87, "seek": 49164, "start": 512.48, "end": 514.4, "text": " a few other working groups.", "tokens": [51406, 257, 1326, 661, 1364, 3935, 13, 51502], "temperature": 0.0, "avg_logprob": -0.25142185662382394, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.05780725181102753}, {"id": 88, "seek": 49164, "start": 514.4, "end": 520.4399999999999, "text": " So the stop resolver, which was a very simple thing with a recent that sends a query over", "tokens": [51502, 407, 264, 1590, 34480, 11, 597, 390, 257, 588, 2199, 551, 365, 257, 5162, 300, 14790, 257, 14581, 670, 51804], "temperature": 0.0, "avg_logprob": -0.25142185662382394, "compression_ratio": 1.5066666666666666, "no_speech_prob": 0.05780725181102753}, {"id": 89, "seek": 52044, "start": 520.9200000000001, "end": 527.84, "text": " port 53, has to do more and more and more stuff.", "tokens": [50388, 2436, 21860, 11, 575, 281, 360, 544, 293, 544, 293, 544, 1507, 13, 50734], "temperature": 0.0, "avg_logprob": -0.26604252097047404, "compression_ratio": 1.4514563106796117, "no_speech_prob": 0.014116557314991951}, {"id": 90, "seek": 52044, "start": 527.84, "end": 536.84, "text": " So many applications, ASTAPS resolvers, how many libraries will implement all of those", "tokens": [50734, 407, 867, 5821, 11, 316, 6840, 4715, 50, 7923, 840, 11, 577, 867, 15148, 486, 4445, 439, 295, 729, 51184], "temperature": 0.0, "avg_logprob": -0.26604252097047404, "compression_ratio": 1.4514563106796117, "no_speech_prob": 0.014116557314991951}, {"id": 91, "seek": 52044, "start": 536.84, "end": 542.08, "text": " transports, especially if it's also implemented in different languages.", "tokens": [51184, 5495, 82, 11, 2318, 498, 309, 311, 611, 12270, 294, 819, 8650, 13, 51446], "temperature": 0.0, "avg_logprob": -0.26604252097047404, "compression_ratio": 1.4514563106796117, "no_speech_prob": 0.014116557314991951}, {"id": 92, "seek": 52044, "start": 542.08, "end": 549.44, "text": " It used to be that a stop resolver had basically no state, but if you do DOT, DOH, UQ, then", "tokens": [51446, 467, 1143, 281, 312, 300, 257, 1590, 34480, 632, 1936, 572, 1785, 11, 457, 498, 291, 360, 50142, 11, 10699, 39, 11, 624, 48, 11, 550, 51814], "temperature": 0.0, "avg_logprob": -0.26604252097047404, "compression_ratio": 1.4514563106796117, "no_speech_prob": 0.014116557314991951}, {"id": 93, "seek": 54944, "start": 549.44, "end": 556.0, "text": " you have connection setup, you generate load in a recursive resolver because if you're", "tokens": [50364, 291, 362, 4984, 8657, 11, 291, 8460, 3677, 294, 257, 20560, 488, 34480, 570, 498, 291, 434, 50692], "temperature": 0.0, "avg_logprob": -0.20631937753586543, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.013332594186067581}, {"id": 94, "seek": 54944, "start": 556.0, "end": 563.08, "text": " constantly setting up, say, DOT, DOH connections, then it has a way higher load than if it's", "tokens": [50692, 6460, 3287, 493, 11, 584, 11, 50142, 11, 10699, 39, 9271, 11, 550, 309, 575, 257, 636, 2946, 3677, 813, 498, 309, 311, 51046], "temperature": 0.0, "avg_logprob": -0.20631937753586543, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.013332594186067581}, {"id": 95, "seek": 54944, "start": 563.08, "end": 571.08, "text": " just a simple UDP query and it's definitely bad for short-lived applications like Ping", "tokens": [51046, 445, 257, 2199, 624, 11373, 14581, 293, 309, 311, 2138, 1578, 337, 2099, 12, 46554, 5821, 411, 33645, 51446], "temperature": 0.0, "avg_logprob": -0.20631937753586543, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.013332594186067581}, {"id": 96, "seek": 54944, "start": 571.08, "end": 577.84, "text": " that have a way higher overhead setting up a connection to the local recursive resolver", "tokens": [51446, 300, 362, 257, 636, 2946, 19922, 3287, 493, 257, 4984, 281, 264, 2654, 20560, 488, 34480, 51784], "temperature": 0.0, "avg_logprob": -0.20631937753586543, "compression_ratio": 1.6542056074766356, "no_speech_prob": 0.013332594186067581}, {"id": 97, "seek": 57784, "start": 577.84, "end": 583.52, "text": " than the actual work that the application is doing.", "tokens": [50364, 813, 264, 3539, 589, 300, 264, 3861, 307, 884, 13, 50648], "temperature": 0.0, "avg_logprob": -0.23084367679644235, "compression_ratio": 1.5, "no_speech_prob": 0.009476128965616226}, {"id": 98, "seek": 57784, "start": 583.52, "end": 590.96, "text": " So the simple way to solve that, we thought, you introduce a local proxy.", "tokens": [50648, 407, 264, 2199, 636, 281, 5039, 300, 11, 321, 1194, 11, 291, 5366, 257, 2654, 29690, 13, 51020], "temperature": 0.0, "avg_logprob": -0.23084367679644235, "compression_ratio": 1.5, "no_speech_prob": 0.009476128965616226}, {"id": 99, "seek": 57784, "start": 590.96, "end": 598.48, "text": " That's not really something new because lots of people are unbound as a local DNS proxy.", "tokens": [51020, 663, 311, 406, 534, 746, 777, 570, 3195, 295, 561, 366, 517, 18767, 382, 257, 2654, 35153, 29690, 13, 51396], "temperature": 0.0, "avg_logprob": -0.23084367679644235, "compression_ratio": 1.5, "no_speech_prob": 0.009476128965616226}, {"id": 100, "seek": 57784, "start": 598.48, "end": 605.48, "text": " Well, we also, as part of the GetDNS project created, Stubby, that focuses more on doing", "tokens": [51396, 1042, 11, 321, 611, 11, 382, 644, 295, 264, 3240, 35, 42003, 1716, 2942, 11, 745, 35654, 11, 300, 16109, 544, 322, 884, 51746], "temperature": 0.0, "avg_logprob": -0.23084367679644235, "compression_ratio": 1.5, "no_speech_prob": 0.009476128965616226}, {"id": 101, "seek": 60548, "start": 605.48, "end": 615.32, "text": " DNS all the time, there is things like DNS dist, DNS mask, system D, resolve D, so it", "tokens": [50364, 35153, 439, 264, 565, 11, 456, 307, 721, 411, 35153, 1483, 11, 35153, 6094, 11, 1185, 413, 11, 14151, 413, 11, 370, 309, 50856], "temperature": 0.0, "avg_logprob": -0.24302271792763158, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.007320583797991276}, {"id": 102, "seek": 60548, "start": 615.32, "end": 623.08, "text": " looks like, okay, we don't have to worry about that, we can just talk to a local proxy.", "tokens": [50856, 1542, 411, 11, 1392, 11, 321, 500, 380, 362, 281, 3292, 466, 300, 11, 321, 393, 445, 751, 281, 257, 2654, 29690, 13, 51244], "temperature": 0.0, "avg_logprob": -0.24302271792763158, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.007320583797991276}, {"id": 103, "seek": 60548, "start": 623.08, "end": 629.6800000000001, "text": " But then, if we go back to the example config I had for connect by name for the Firefox", "tokens": [51244, 583, 550, 11, 498, 321, 352, 646, 281, 264, 1365, 6662, 286, 632, 337, 1745, 538, 1315, 337, 264, 46613, 51574], "temperature": 0.0, "avg_logprob": -0.24302271792763158, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.007320583797991276}, {"id": 104, "seek": 60548, "start": 629.6800000000001, "end": 635.44, "text": " that wants to talk, DOH, how do you tell your local proxy that you actually want", "tokens": [51574, 300, 2738, 281, 751, 11, 10699, 39, 11, 577, 360, 291, 980, 428, 2654, 29690, 300, 291, 767, 528, 51862], "temperature": 0.0, "avg_logprob": -0.24302271792763158, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.007320583797991276}, {"id": 105, "seek": 63544, "start": 635.44, "end": 638.96, "text": " to have an authenticated connection?", "tokens": [50364, 281, 362, 364, 9214, 3587, 4984, 30, 50540], "temperature": 0.0, "avg_logprob": -0.2083474567958287, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.016892028972506523}, {"id": 106, "seek": 63544, "start": 638.96, "end": 644.5200000000001, "text": " What if your proxy is just sending it, I don't know, to one of the public resolvers", "tokens": [50540, 708, 498, 428, 29690, 307, 445, 7750, 309, 11, 286, 500, 380, 458, 11, 281, 472, 295, 264, 1908, 7923, 840, 50818], "temperature": 0.0, "avg_logprob": -0.2083474567958287, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.016892028972506523}, {"id": 107, "seek": 63544, "start": 644.5200000000001, "end": 650.44, "text": " over port 53, maybe that's not what your application wants.", "tokens": [50818, 670, 2436, 21860, 11, 1310, 300, 311, 406, 437, 428, 3861, 2738, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2083474567958287, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.016892028972506523}, {"id": 108, "seek": 63544, "start": 650.44, "end": 659.6, "text": " And then, this whole local proxy falls down and you get, say, a browser again implementing", "tokens": [51114, 400, 550, 11, 341, 1379, 2654, 29690, 8804, 760, 293, 291, 483, 11, 584, 11, 257, 11185, 797, 18114, 51572], "temperature": 0.0, "avg_logprob": -0.2083474567958287, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.016892028972506523}, {"id": 109, "seek": 65960, "start": 659.6, "end": 666.08, "text": " its own step resolver because it doesn't have any control.", "tokens": [50364, 1080, 1065, 1823, 34480, 570, 309, 1177, 380, 362, 604, 1969, 13, 50688], "temperature": 0.0, "avg_logprob": -0.2362147437201606, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.011531651951372623}, {"id": 110, "seek": 65960, "start": 666.08, "end": 677.0400000000001, "text": " So we thought about it for a while and created a draft in the ITF with a new ETNS zero option.", "tokens": [50688, 407, 321, 1194, 466, 309, 337, 257, 1339, 293, 2942, 257, 11206, 294, 264, 6783, 37, 365, 257, 777, 36953, 42003, 4018, 3614, 13, 51236], "temperature": 0.0, "avg_logprob": -0.2362147437201606, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.011531651951372623}, {"id": 111, "seek": 65960, "start": 677.0400000000001, "end": 683.76, "text": " And basically, when you send the request to your step resolver, then you can encode all", "tokens": [51236, 400, 1936, 11, 562, 291, 2845, 264, 5308, 281, 428, 1823, 34480, 11, 550, 291, 393, 2058, 1429, 439, 51572], "temperature": 0.0, "avg_logprob": -0.2362147437201606, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.011531651951372623}, {"id": 112, "seek": 68376, "start": 683.76, "end": 690.68, "text": " of the stuff that you want to have as a policy in such an option.", "tokens": [50364, 295, 264, 1507, 300, 291, 528, 281, 362, 382, 257, 3897, 294, 1270, 364, 3614, 13, 50710], "temperature": 0.0, "avg_logprob": -0.16275307189586552, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.1463739573955536}, {"id": 113, "seek": 68376, "start": 690.68, "end": 696.92, "text": " So you can be very basic and set a flag like, well, only give me an authenticated connection.", "tokens": [50710, 407, 291, 393, 312, 588, 3875, 293, 992, 257, 7166, 411, 11, 731, 11, 787, 976, 385, 364, 9214, 3587, 4984, 13, 51022], "temperature": 0.0, "avg_logprob": -0.16275307189586552, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.1463739573955536}, {"id": 114, "seek": 68376, "start": 696.92, "end": 701.52, "text": " If you can't do it and just report like it doesn't work or you could say, well, this", "tokens": [51022, 759, 291, 393, 380, 360, 309, 293, 445, 2275, 411, 309, 1177, 380, 589, 420, 291, 727, 584, 11, 731, 11, 341, 51252], "temperature": 0.0, "avg_logprob": -0.16275307189586552, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.1463739573955536}, {"id": 115, "seek": 68376, "start": 701.52, "end": 708.12, "text": " is the recursive resolver that I want you to use, please use that.", "tokens": [51252, 307, 264, 20560, 488, 34480, 300, 286, 528, 291, 281, 764, 11, 1767, 764, 300, 13, 51582], "temperature": 0.0, "avg_logprob": -0.16275307189586552, "compression_ratio": 1.586734693877551, "no_speech_prob": 0.1463739573955536}, {"id": 116, "seek": 70812, "start": 708.12, "end": 717.8, "text": " And then applications can trust the local proxy because they can control it.", "tokens": [50364, 400, 550, 5821, 393, 3361, 264, 2654, 29690, 570, 436, 393, 1969, 309, 13, 50848], "temperature": 0.0, "avg_logprob": -0.20360779275699536, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.2444155067205429}, {"id": 117, "seek": 70812, "start": 717.8, "end": 727.16, "text": " And it provides a nice way to basically reduce the step resolver footprint a bit by moving", "tokens": [50848, 400, 309, 6417, 257, 1481, 636, 281, 1936, 5407, 264, 1823, 34480, 24222, 257, 857, 538, 2684, 51316], "temperature": 0.0, "avg_logprob": -0.20360779275699536, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.2444155067205429}, {"id": 118, "seek": 70812, "start": 727.16, "end": 733.0, "text": " all of the difficult transports to the proxy.", "tokens": [51316, 439, 295, 264, 2252, 5495, 82, 281, 264, 29690, 13, 51608], "temperature": 0.0, "avg_logprob": -0.20360779275699536, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.2444155067205429}, {"id": 119, "seek": 73300, "start": 733.0, "end": 741.28, "text": " We have a proof of concept for that, though I have to warn you that we revised the layout", "tokens": [50364, 492, 362, 257, 8177, 295, 3410, 337, 300, 11, 1673, 286, 362, 281, 12286, 291, 300, 321, 35228, 264, 13333, 50778], "temperature": 0.0, "avg_logprob": -0.21663878620534704, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.11356143653392792}, {"id": 120, "seek": 73300, "start": 741.28, "end": 745.88, "text": " of the option in the draft that is listed here and what the proof concept does is an", "tokens": [50778, 295, 264, 3614, 294, 264, 11206, 300, 307, 10052, 510, 293, 437, 264, 8177, 3410, 775, 307, 364, 51008], "temperature": 0.0, "avg_logprob": -0.21663878620534704, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.11356143653392792}, {"id": 121, "seek": 73300, "start": 745.88, "end": 746.88, "text": " older draft.", "tokens": [51008, 4906, 11206, 13, 51058], "temperature": 0.0, "avg_logprob": -0.21663878620534704, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.11356143653392792}, {"id": 122, "seek": 73300, "start": 746.88, "end": 754.96, "text": " But if you want to play with it with the general concept, then that is there.", "tokens": [51058, 583, 498, 291, 528, 281, 862, 365, 309, 365, 264, 2674, 3410, 11, 550, 300, 307, 456, 13, 51462], "temperature": 0.0, "avg_logprob": -0.21663878620534704, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.11356143653392792}, {"id": 123, "seek": 75496, "start": 754.96, "end": 764.2, "text": " So we decided that, well, we can continue writing code in C and, of course, for our", "tokens": [50364, 407, 321, 3047, 300, 11, 731, 11, 321, 393, 2354, 3579, 3089, 294, 383, 293, 11, 295, 1164, 11, 337, 527, 50826], "temperature": 0.0, "avg_logprob": -0.24064834301288313, "compression_ratio": 1.48125, "no_speech_prob": 0.5670516490936279}, {"id": 124, "seek": 75496, "start": 764.2, "end": 770.1600000000001, "text": " existing products like unbound NSD, we will just maintain them in C because they are written", "tokens": [50826, 6741, 3383, 411, 517, 18767, 15943, 35, 11, 321, 486, 445, 6909, 552, 294, 383, 570, 436, 366, 3720, 51124], "temperature": 0.0, "avg_logprob": -0.24064834301288313, "compression_ratio": 1.48125, "no_speech_prob": 0.5670516490936279}, {"id": 125, "seek": 75496, "start": 770.1600000000001, "end": 778.6800000000001, "text": " in C. But we would like to try to move to Rust for new code.", "tokens": [51124, 294, 383, 13, 583, 321, 576, 411, 281, 853, 281, 1286, 281, 34952, 337, 777, 3089, 13, 51550], "temperature": 0.0, "avg_logprob": -0.24064834301288313, "compression_ratio": 1.48125, "no_speech_prob": 0.5670516490936279}, {"id": 126, "seek": 77868, "start": 778.68, "end": 788.12, "text": " And I just copied a little bit of stuff from a prototype.", "tokens": [50364, 400, 286, 445, 25365, 257, 707, 857, 295, 1507, 490, 257, 19475, 13, 50836], "temperature": 0.0, "avg_logprob": -0.1720290184020996, "compression_ratio": 1.4259259259259258, "no_speech_prob": 0.15727266669273376}, {"id": 127, "seek": 77868, "start": 788.12, "end": 800.4399999999999, "text": " First thing uses Rust in creative ways and that is something where it's now a prototype", "tokens": [50836, 2386, 551, 4960, 34952, 294, 5880, 2098, 293, 300, 307, 746, 689, 309, 311, 586, 257, 19475, 51452], "temperature": 0.0, "avg_logprob": -0.1720290184020996, "compression_ratio": 1.4259259259259258, "no_speech_prob": 0.15727266669273376}, {"id": 128, "seek": 77868, "start": 800.4399999999999, "end": 805.92, "text": " and we definitely need feedback from users of the library like, okay, it's very great", "tokens": [51452, 293, 321, 2138, 643, 5824, 490, 5022, 295, 264, 6405, 411, 11, 1392, 11, 309, 311, 588, 869, 51726], "temperature": 0.0, "avg_logprob": -0.1720290184020996, "compression_ratio": 1.4259259259259258, "no_speech_prob": 0.15727266669273376}, {"id": 129, "seek": 80592, "start": 805.92, "end": 810.3199999999999, "text": " that you can have a message builder that takes a static or press or type and it has", "tokens": [50364, 300, 291, 393, 362, 257, 3636, 27377, 300, 2516, 257, 13437, 420, 1886, 420, 2010, 293, 309, 575, 50584], "temperature": 0.0, "avg_logprob": -0.1854267120361328, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.41581064462661743}, {"id": 130, "seek": 80592, "start": 810.3199999999999, "end": 814.7199999999999, "text": " a stream target but probably you don't want to write code like that.", "tokens": [50584, 257, 4309, 3779, 457, 1391, 291, 500, 380, 528, 281, 2464, 3089, 411, 300, 13, 50804], "temperature": 0.0, "avg_logprob": -0.1854267120361328, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.41581064462661743}, {"id": 131, "seek": 80592, "start": 814.7199999999999, "end": 822.0799999999999, "text": " So it's built at the moment to be flexible and use the language but it should be somewhere", "tokens": [50804, 407, 309, 311, 3094, 412, 264, 1623, 281, 312, 11358, 293, 764, 264, 2856, 457, 309, 820, 312, 4079, 51172], "temperature": 0.0, "avg_logprob": -0.1854267120361328, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.41581064462661743}, {"id": 132, "seek": 80592, "start": 822.0799999999999, "end": 825.7199999999999, "text": " modified to be more usable.", "tokens": [51172, 15873, 281, 312, 544, 29975, 13, 51354], "temperature": 0.0, "avg_logprob": -0.1854267120361328, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.41581064462661743}, {"id": 133, "seek": 80592, "start": 825.7199999999999, "end": 833.0799999999999, "text": " Then here in the middle, you basically get the main thing because the whole thing is", "tokens": [51354, 1396, 510, 294, 264, 2808, 11, 291, 1936, 483, 264, 2135, 551, 570, 264, 1379, 551, 307, 51722], "temperature": 0.0, "avg_logprob": -0.1854267120361328, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.41581064462661743}, {"id": 134, "seek": 83308, "start": 833.08, "end": 838.0, "text": " generic if you want to send a query, then you have to go to the question section and", "tokens": [50364, 19577, 498, 291, 528, 281, 2845, 257, 14581, 11, 550, 291, 362, 281, 352, 281, 264, 1168, 3541, 293, 50610], "temperature": 0.0, "avg_logprob": -0.1615381353041705, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.10784997045993805}, {"id": 135, "seek": 83308, "start": 838.0, "end": 845.2800000000001, "text": " then you say, well, I want to push a question there and then there is again a bit of a usability", "tokens": [50610, 550, 291, 584, 11, 731, 11, 286, 528, 281, 2944, 257, 1168, 456, 293, 550, 456, 307, 797, 257, 857, 295, 257, 46878, 50974], "temperature": 0.0, "avg_logprob": -0.1615381353041705, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.10784997045993805}, {"id": 136, "seek": 83308, "start": 845.2800000000001, "end": 852.84, "text": " problem where you say, okay, I need this back to a builder and I need a clone of it.", "tokens": [50974, 1154, 689, 291, 584, 11, 1392, 11, 286, 643, 341, 646, 281, 257, 27377, 293, 286, 643, 257, 26506, 295, 309, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1615381353041705, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.10784997045993805}, {"id": 137, "seek": 83308, "start": 852.84, "end": 858.4000000000001, "text": " So this is the part that I experimented with.", "tokens": [51352, 407, 341, 307, 264, 644, 300, 286, 5120, 292, 365, 13, 51630], "temperature": 0.0, "avg_logprob": -0.1615381353041705, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.10784997045993805}, {"id": 138, "seek": 85840, "start": 858.4399999999999, "end": 866.52, "text": " If you want to have a TCP upstream, then you say create the TCP connection and the nice", "tokens": [50366, 759, 291, 528, 281, 362, 257, 48965, 33915, 11, 550, 291, 584, 1884, 264, 48965, 4984, 293, 264, 1481, 50770], "temperature": 0.0, "avg_logprob": -0.15350618816557385, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.11930491775274277}, {"id": 139, "seek": 85840, "start": 866.52, "end": 875.16, "text": " thing with Rust is that it can do all of the asynchronous stuff with a nice syntax.", "tokens": [50770, 551, 365, 34952, 307, 300, 309, 393, 360, 439, 295, 264, 49174, 1507, 365, 257, 1481, 28431, 13, 51202], "temperature": 0.0, "avg_logprob": -0.15350618816557385, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.11930491775274277}, {"id": 140, "seek": 85840, "start": 875.16, "end": 882.1999999999999, "text": " So basically you say, do this connect here and wait until the connect is done but because", "tokens": [51202, 407, 1936, 291, 584, 11, 360, 341, 1745, 510, 293, 1699, 1826, 264, 1745, 307, 1096, 457, 570, 51554], "temperature": 0.0, "avg_logprob": -0.15350618816557385, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.11930491775274277}, {"id": 141, "seek": 88220, "start": 882.2, "end": 889.84, "text": " this function is implicitly asynchronous, as a programmer you can just write this as", "tokens": [50364, 341, 2445, 307, 26947, 356, 49174, 11, 382, 257, 32116, 291, 393, 445, 2464, 341, 382, 50746], "temperature": 0.0, "avg_logprob": -0.16255350907643637, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.008674947544932365}, {"id": 142, "seek": 88220, "start": 889.84, "end": 894.88, "text": " if it's sequential code but the caller can just call this as an asynchronous function", "tokens": [50746, 498, 309, 311, 42881, 3089, 457, 264, 48324, 393, 445, 818, 341, 382, 364, 49174, 2445, 50998], "temperature": 0.0, "avg_logprob": -0.16255350907643637, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.008674947544932365}, {"id": 143, "seek": 88220, "start": 894.88, "end": 900.0400000000001, "text": " and you don't have to do anything extra.", "tokens": [50998, 293, 291, 500, 380, 362, 281, 360, 1340, 2857, 13, 51256], "temperature": 0.0, "avg_logprob": -0.16255350907643637, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.008674947544932365}, {"id": 144, "seek": 88220, "start": 900.0400000000001, "end": 908.2, "text": " Here I have to do a bit more work to really figure out how it fits in the Rust ecosystem", "tokens": [51256, 1692, 286, 362, 281, 360, 257, 857, 544, 589, 281, 534, 2573, 484, 577, 309, 9001, 294, 264, 34952, 11311, 51664], "temperature": 0.0, "avg_logprob": -0.16255350907643637, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.008674947544932365}, {"id": 145, "seek": 90820, "start": 908.88, "end": 917.12, "text": " because the thing with if you have a TCP connection upstream to a DNS resolver and I wanted to", "tokens": [50398, 570, 264, 551, 365, 498, 291, 362, 257, 48965, 4984, 33915, 281, 257, 35153, 34480, 293, 286, 1415, 281, 50810], "temperature": 0.0, "avg_logprob": -0.15467860059040348, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.010592094622552395}, {"id": 146, "seek": 90820, "start": 917.12, "end": 924.4000000000001, "text": " have this as just the basics for maybe DOH or whatever is that you want to set up the", "tokens": [50810, 362, 341, 382, 445, 264, 14688, 337, 1310, 10699, 39, 420, 2035, 307, 300, 291, 528, 281, 992, 493, 264, 51174], "temperature": 0.0, "avg_logprob": -0.15467860059040348, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.010592094622552395}, {"id": 147, "seek": 90820, "start": 924.4000000000001, "end": 929.72, "text": " connection once but then you want to potentially send many queries over it.", "tokens": [51174, 4984, 1564, 457, 550, 291, 528, 281, 7263, 2845, 867, 24109, 670, 309, 13, 51440], "temperature": 0.0, "avg_logprob": -0.15467860059040348, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.010592094622552395}, {"id": 148, "seek": 90820, "start": 929.72, "end": 937.9200000000001, "text": " So I need to have a separate thing that actually talks TCP as a worker threat but then because", "tokens": [51440, 407, 286, 643, 281, 362, 257, 4994, 551, 300, 767, 6686, 48965, 382, 257, 11346, 4734, 457, 550, 570, 51850], "temperature": 0.0, "avg_logprob": -0.15467860059040348, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.010592094622552395}, {"id": 149, "seek": 93792, "start": 937.9599999999999, "end": 945.64, "text": " it's all asynchronous this is basically getting an asynchronous worker and then I also say", "tokens": [50366, 309, 311, 439, 49174, 341, 307, 1936, 1242, 364, 49174, 11346, 293, 550, 286, 611, 584, 50750], "temperature": 0.0, "avg_logprob": -0.17028388757815308, "compression_ratio": 1.9322916666666667, "no_speech_prob": 0.007652302272617817}, {"id": 150, "seek": 93792, "start": 945.64, "end": 952.56, "text": " well give me an asynchronous query and then in Rust you can say okay you have two asynchronous", "tokens": [50750, 731, 976, 385, 364, 49174, 14581, 293, 550, 294, 34952, 291, 393, 584, 1392, 291, 362, 732, 49174, 51096], "temperature": 0.0, "avg_logprob": -0.17028388757815308, "compression_ratio": 1.9322916666666667, "no_speech_prob": 0.007652302272617817}, {"id": 151, "seek": 93792, "start": 952.56, "end": 959.0799999999999, "text": " things that you want to do at the same time well just do them both at the same time and then", "tokens": [51096, 721, 300, 291, 528, 281, 360, 412, 264, 912, 565, 731, 445, 360, 552, 1293, 412, 264, 912, 565, 293, 550, 51422], "temperature": 0.0, "avg_logprob": -0.17028388757815308, "compression_ratio": 1.9322916666666667, "no_speech_prob": 0.007652302272617817}, {"id": 152, "seek": 93792, "start": 959.0799999999999, "end": 965.16, "text": " normally we expect to be here that we got a reply and then we print a reply and we are done.", "tokens": [51422, 5646, 321, 2066, 281, 312, 510, 300, 321, 658, 257, 16972, 293, 550, 321, 4482, 257, 16972, 293, 321, 366, 1096, 13, 51726], "temperature": 0.0, "avg_logprob": -0.17028388757815308, "compression_ratio": 1.9322916666666667, "no_speech_prob": 0.007652302272617817}, {"id": 153, "seek": 96516, "start": 966.0799999999999, "end": 975.68, "text": " So this is sort of the direction we want to go to which is also why we have a bit of a problem", "tokens": [50410, 407, 341, 307, 1333, 295, 264, 3513, 321, 528, 281, 352, 281, 597, 307, 611, 983, 321, 362, 257, 857, 295, 257, 1154, 50890], "temperature": 0.0, "avg_logprob": -0.19783483852039685, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.001087003038264811}, {"id": 154, "seek": 96516, "start": 975.68, "end": 980.88, "text": " developing the connect by name prototype that we now have because it is like okay we don't really", "tokens": [50890, 6416, 264, 1745, 538, 1315, 19475, 300, 321, 586, 362, 570, 309, 307, 411, 1392, 321, 500, 380, 534, 51150], "temperature": 0.0, "avg_logprob": -0.19783483852039685, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.001087003038264811}, {"id": 155, "seek": 96516, "start": 980.88, "end": 985.04, "text": " want to have a new prototype in C what do we want to do with it.", "tokens": [51150, 528, 281, 362, 257, 777, 19475, 294, 383, 437, 360, 321, 528, 281, 360, 365, 309, 13, 51358], "temperature": 0.0, "avg_logprob": -0.19783483852039685, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.001087003038264811}, {"id": 156, "seek": 96516, "start": 985.04, "end": 993.04, "text": " So that's what I wanted to tell today there is I think plenty of space for questions.", "tokens": [51358, 407, 300, 311, 437, 286, 1415, 281, 980, 965, 456, 307, 286, 519, 7140, 295, 1901, 337, 1651, 13, 51758], "temperature": 0.0, "avg_logprob": -0.19783483852039685, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.001087003038264811}, {"id": 157, "seek": 99304, "start": 993.04, "end": 1010.04, "text": " I love the idea of having a function which can deal with not just name a resolution but DNS name a", "tokens": [50364, 286, 959, 264, 1558, 295, 1419, 257, 2445, 597, 393, 2028, 365, 406, 445, 1315, 257, 8669, 457, 35153, 1315, 257, 51214], "temperature": 0.0, "avg_logprob": -0.2617749734358354, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.008555341511964798}, {"id": 158, "seek": 99304, "start": 1010.04, "end": 1016.0, "text": " resolution and also the cryptography but as a distribution maintainer I have to say that", "tokens": [51214, 8669, 293, 611, 264, 9844, 5820, 457, 382, 257, 7316, 6909, 260, 286, 362, 281, 584, 300, 51512], "temperature": 0.0, "avg_logprob": -0.2617749734358354, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.008555341511964798}, {"id": 159, "seek": 101600, "start": 1016.56, "end": 1023.2, "text": " having something a library function which makes applications behave differently from all other", "tokens": [50392, 1419, 746, 257, 6405, 2445, 597, 1669, 5821, 15158, 7614, 490, 439, 661, 50724], "temperature": 0.0, "avg_logprob": -0.2426728279359879, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.018028853461146355}, {"id": 160, "seek": 101600, "start": 1023.2, "end": 1029.8, "text": " applications is really a non-starter so I think that you need to consider in some way to support", "tokens": [50724, 5821, 307, 534, 257, 2107, 12, 33969, 370, 286, 519, 300, 291, 643, 281, 1949, 294, 512, 636, 281, 1406, 51054], "temperature": 0.0, "avg_logprob": -0.2426728279359879, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.018028853461146355}, {"id": 161, "seek": 101600, "start": 1029.8, "end": 1039.28, "text": " NSS and the NSS plugins through the libc or however it's better. You mentioned that probably", "tokens": [51054, 15943, 50, 293, 264, 15943, 50, 33759, 807, 264, 22854, 66, 420, 4461, 309, 311, 1101, 13, 509, 2835, 300, 1391, 51528], "temperature": 0.0, "avg_logprob": -0.2426728279359879, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.018028853461146355}, {"id": 162, "seek": 103928, "start": 1040.24, "end": 1049.16, "text": " a demon is needed to get good performance so maybe the DNS part is the less important one", "tokens": [50412, 257, 14283, 307, 2978, 281, 483, 665, 3389, 370, 1310, 264, 35153, 644, 307, 264, 1570, 1021, 472, 50858], "temperature": 0.0, "avg_logprob": -0.23801719310671784, "compression_ratio": 1.373134328358209, "no_speech_prob": 0.07330505549907684}, {"id": 163, "seek": 103928, "start": 1049.16, "end": 1059.8799999999999, "text": " that you can delegate to some other component. I'll try to summarize you say there's something", "tokens": [50858, 300, 291, 393, 40999, 281, 512, 661, 6542, 13, 286, 603, 853, 281, 20858, 291, 584, 456, 311, 746, 51394], "temperature": 0.0, "avg_logprob": -0.23801719310671784, "compression_ratio": 1.373134328358209, "no_speech_prob": 0.07330505549907684}, {"id": 164, "seek": 105988, "start": 1059.96, "end": 1069.6000000000001, "text": " with distributing this and there is something with if you run a local proxy then you don't have to", "tokens": [50368, 365, 41406, 341, 293, 456, 307, 746, 365, 498, 291, 1190, 257, 2654, 29690, 550, 291, 500, 380, 362, 281, 50850], "temperature": 0.0, "avg_logprob": -0.21636191410804861, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.1789931058883667}, {"id": 165, "seek": 105988, "start": 1069.6000000000001, "end": 1078.8400000000001, "text": " focus as much on DNS if I got that correct. There are already some projects in this space", "tokens": [50850, 1879, 382, 709, 322, 35153, 498, 286, 658, 300, 3006, 13, 821, 366, 1217, 512, 4455, 294, 341, 1901, 51312], "temperature": 0.0, "avg_logprob": -0.21636191410804861, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.1789931058883667}, {"id": 166, "seek": 105988, "start": 1078.8400000000001, "end": 1089.5200000000002, "text": " that you mentioned and they are expected to work with the normal libc NSS plugins and I think", "tokens": [51312, 300, 291, 2835, 293, 436, 366, 5176, 281, 589, 365, 264, 2710, 22854, 66, 15943, 50, 33759, 293, 286, 519, 51846], "temperature": 0.0, "avg_logprob": -0.21636191410804861, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.1789931058883667}, {"id": 167, "seek": 108952, "start": 1089.52, "end": 1098.52, "text": " that your library to be universally used that I think that's the task to be your goal you need", "tokens": [50364, 300, 428, 6405, 281, 312, 43995, 1143, 300, 286, 519, 300, 311, 264, 5633, 281, 312, 428, 3387, 291, 643, 50814], "temperature": 0.0, "avg_logprob": -0.26310668358435996, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.01809118315577507}, {"id": 168, "seek": 108952, "start": 1098.52, "end": 1105.12, "text": " to support the normal name resolution which is expected by any current applications so it has", "tokens": [50814, 281, 1406, 264, 2710, 1315, 8669, 597, 307, 5176, 538, 604, 2190, 5821, 370, 309, 575, 51144], "temperature": 0.0, "avg_logprob": -0.26310668358435996, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.01809118315577507}, {"id": 169, "seek": 108952, "start": 1105.12, "end": 1115.8799999999999, "text": " to support the libc plugins. You say the library will only be adopted if it supports the libc", "tokens": [51144, 281, 1406, 264, 22854, 66, 33759, 13, 509, 584, 264, 6405, 486, 787, 312, 12175, 498, 309, 9346, 264, 22854, 66, 51682], "temperature": 0.0, "avg_logprob": -0.26310668358435996, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.01809118315577507}, {"id": 170, "seek": 111588, "start": 1116.3600000000001, "end": 1124.8400000000001, "text": " plugins. Yes I agree I mean that's why we made the prototype because we were looking into what", "tokens": [50388, 33759, 13, 1079, 286, 3986, 286, 914, 300, 311, 983, 321, 1027, 264, 19475, 570, 321, 645, 1237, 666, 437, 50812], "temperature": 0.0, "avg_logprob": -0.2054188681430504, "compression_ratio": 1.5888888888888888, "no_speech_prob": 0.023045092821121216}, {"id": 171, "seek": 111588, "start": 1124.8400000000001, "end": 1131.48, "text": " should the interface to the library be how should the library behave stuff like that sort of the", "tokens": [50812, 820, 264, 9226, 281, 264, 6405, 312, 577, 820, 264, 6405, 15158, 1507, 411, 300, 1333, 295, 264, 51144], "temperature": 0.0, "avg_logprob": -0.2054188681430504, "compression_ratio": 1.5888888888888888, "no_speech_prob": 0.023045092821121216}, {"id": 172, "seek": 111588, "start": 1131.48, "end": 1139.3600000000001, "text": " high-level stuff and fully expecting that any production quality implementation of the library", "tokens": [51144, 1090, 12, 12418, 1507, 293, 4498, 9650, 300, 604, 4265, 3125, 11420, 295, 264, 6405, 51538], "temperature": 0.0, "avg_logprob": -0.2054188681430504, "compression_ratio": 1.5888888888888888, "no_speech_prob": 0.023045092821121216}, {"id": 173, "seek": 113936, "start": 1139.36, "end": 1147.1599999999999, "text": " has to take a lot of this stuff into account and certainly dealing with nestwitch.conf is I guess", "tokens": [50364, 575, 281, 747, 257, 688, 295, 341, 1507, 666, 2696, 293, 3297, 6260, 365, 15646, 86, 1549, 13, 24697, 307, 286, 2041, 50754], "temperature": 0.0, "avg_logprob": -0.19406110590154474, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.09936843067407608}, {"id": 174, "seek": 113936, "start": 1147.1599999999999, "end": 1158.04, "text": " mandatory for any production quality library. For the proxy control option because there are lots", "tokens": [50754, 22173, 337, 604, 4265, 3125, 6405, 13, 1171, 264, 29690, 1969, 3614, 570, 456, 366, 3195, 51298], "temperature": 0.0, "avg_logprob": -0.19406110590154474, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.09936843067407608}, {"id": 175, "seek": 113936, "start": 1158.04, "end": 1165.24, "text": " of demons in that space of course it's best if those adopt the option once it is actually standardized", "tokens": [51298, 295, 19733, 294, 300, 1901, 295, 1164, 309, 311, 1151, 498, 729, 6878, 264, 3614, 1564, 309, 307, 767, 31677, 51658], "temperature": 0.0, "avg_logprob": -0.19406110590154474, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.09936843067407608}, {"id": 176, "seek": 116524, "start": 1165.24, "end": 1171.96, "text": " by the ITF. I mean it's not that we want to write another proxy it's just like we have a very", "tokens": [50364, 538, 264, 6783, 37, 13, 286, 914, 309, 311, 406, 300, 321, 528, 281, 2464, 1071, 29690, 309, 311, 445, 411, 321, 362, 257, 588, 50700], "temperature": 0.0, "avg_logprob": -0.20965412965754873, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.05650198832154274}, {"id": 177, "seek": 116524, "start": 1171.96, "end": 1178.96, "text": " specific problem that we want to solve if we want to make stuff resolve a small and still give them", "tokens": [50700, 2685, 1154, 300, 321, 528, 281, 5039, 498, 321, 528, 281, 652, 1507, 14151, 257, 1359, 293, 920, 976, 552, 51050], "temperature": 0.0, "avg_logprob": -0.20965412965754873, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.05650198832154274}, {"id": 178, "seek": 116524, "start": 1178.96, "end": 1188.56, "text": " access to all of the encrypted transports but yeah if for example system dresolve they would also do", "tokens": [51050, 2105, 281, 439, 295, 264, 36663, 5495, 82, 457, 1338, 498, 337, 1365, 1185, 274, 495, 37361, 436, 576, 611, 360, 51530], "temperature": 0.0, "avg_logprob": -0.20965412965754873, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.05650198832154274}, {"id": 179, "seek": 116524, "start": 1188.56, "end": 1194.1200000000001, "text": " the proxy control option then it would be perfectly fine I mean there's no new reason to write a new", "tokens": [51530, 264, 29690, 1969, 3614, 550, 309, 576, 312, 6239, 2489, 286, 914, 456, 311, 572, 777, 1778, 281, 2464, 257, 777, 51808], "temperature": 0.0, "avg_logprob": -0.20965412965754873, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.05650198832154274}, {"id": 180, "seek": 119412, "start": 1194.7199999999998, "end": 1212.4399999999998, "text": " one for the proxy control option. Is it only the step resolver that will tell the proxy server that", "tokens": [50394, 472, 337, 264, 29690, 1969, 3614, 13, 1119, 309, 787, 264, 1823, 34480, 300, 486, 980, 264, 29690, 7154, 300, 51280], "temperature": 0.8, "avg_logprob": -0.44990526243697765, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.1596524566411972}, {"id": 181, "seek": 119412, "start": 1212.4399999999998, "end": 1218.0, "text": " it wants those policies applied or does the proxy also communicate back to the step resolver that", "tokens": [51280, 309, 2738, 729, 7657, 6456, 420, 775, 264, 29690, 611, 7890, 646, 281, 264, 1823, 34480, 300, 51558], "temperature": 0.8, "avg_logprob": -0.44990526243697765, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.1596524566411972}, {"id": 182, "seek": 121800, "start": 1218.0, "end": 1223.56, "text": " is actually implying those policies because in the initial situation where nothing supports it,", "tokens": [50364, 307, 767, 704, 7310, 729, 7657, 570, 294, 264, 5883, 2590, 689, 1825, 9346, 309, 11, 50642], "temperature": 0.0, "avg_logprob": -0.2872026883638822, "compression_ratio": 1.5135135135135136, "no_speech_prob": 0.05801377817988396}, {"id": 183, "seek": 121800, "start": 1223.56, "end": 1230.6, "text": " which you always have. So the question is what happens if you send a proxy control option", "tokens": [50642, 597, 291, 1009, 362, 13, 407, 264, 1168, 307, 437, 2314, 498, 291, 2845, 257, 29690, 1969, 3614, 50994], "temperature": 0.0, "avg_logprob": -0.2872026883638822, "compression_ratio": 1.5135135135135136, "no_speech_prob": 0.05801377817988396}, {"id": 184, "seek": 121800, "start": 1230.6, "end": 1238.8, "text": " to an older step resolver that may not be aware. So I didn't want to go over the entire draft,", "tokens": [50994, 281, 364, 4906, 1823, 34480, 300, 815, 406, 312, 3650, 13, 407, 286, 994, 380, 528, 281, 352, 670, 264, 2302, 11206, 11, 51404], "temperature": 0.0, "avg_logprob": -0.2872026883638822, "compression_ratio": 1.5135135135135136, "no_speech_prob": 0.05801377817988396}, {"id": 185, "seek": 123880, "start": 1239.72, "end": 1250.96, "text": " so we thought about that. But basically there are some priming queries. I forgot the exact name.", "tokens": [50410, 370, 321, 1194, 466, 300, 13, 583, 1936, 456, 366, 512, 2886, 278, 24109, 13, 286, 5298, 264, 1900, 1315, 13, 50972], "temperature": 0.0, "avg_logprob": -0.2474299481040553, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.077603779733181}, {"id": 186, "seek": 123880, "start": 1250.96, "end": 1260.08, "text": " Is it resolver.ARPA that is proposed? Something like that. So try to look up resolver.ARPA,", "tokens": [50972, 1119, 309, 34480, 13, 1899, 10297, 300, 307, 10348, 30, 6595, 411, 300, 13, 407, 853, 281, 574, 493, 34480, 13, 1899, 10297, 11, 51428], "temperature": 0.0, "avg_logprob": -0.2474299481040553, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.077603779733181}, {"id": 187, "seek": 123880, "start": 1260.08, "end": 1267.08, "text": " see if you get the right response. If you don't, then the only thing you leaked is that you were", "tokens": [51428, 536, 498, 291, 483, 264, 558, 4134, 13, 759, 291, 500, 380, 11, 550, 264, 787, 551, 291, 31779, 307, 300, 291, 645, 51778], "temperature": 0.0, "avg_logprob": -0.2474299481040553, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.077603779733181}, {"id": 188, "seek": 126708, "start": 1267.08, "end": 1273.08, "text": " trying to look up resolver.ARPA. We assume that that is safe and then if you do get it,", "tokens": [50364, 1382, 281, 574, 493, 34480, 13, 1899, 10297, 13, 492, 6552, 300, 300, 307, 3273, 293, 550, 498, 291, 360, 483, 309, 11, 50664], "temperature": 0.0, "avg_logprob": -0.3174378077189128, "compression_ratio": 1.297709923664122, "no_speech_prob": 0.008833212777972221}, {"id": 189, "seek": 126708, "start": 1273.08, "end": 1279.28, "text": " then you know that the proxy understands it. Yeah. Any more questions? Okay, yeah.", "tokens": [50664, 550, 291, 458, 300, 264, 29690, 15146, 309, 13, 865, 13, 2639, 544, 1651, 30, 1033, 11, 1338, 13, 50974], "temperature": 0.0, "avg_logprob": -0.3174378077189128, "compression_ratio": 1.297709923664122, "no_speech_prob": 0.008833212777972221}, {"id": 190, "seek": 127928, "start": 1279.28, "end": 1284.32, "text": " There's actually a comment on both this presentation and the previous one. You're", "tokens": [50364, 821, 311, 767, 257, 2871, 322, 1293, 341, 5860, 293, 264, 3894, 472, 13, 509, 434, 50616], "temperature": 0.0, "avg_logprob": -0.1809410915196499, "compression_ratio": 1.8031496062992125, "no_speech_prob": 0.40742793679237366}, {"id": 191, "seek": 127928, "start": 1284.32, "end": 1289.04, "text": " tackling three moving targets at the same time. You're trying to figure out how to integrate", "tokens": [50616, 34415, 1045, 2684, 12911, 412, 264, 912, 565, 13, 509, 434, 1382, 281, 2573, 484, 577, 281, 13365, 50852], "temperature": 0.0, "avg_logprob": -0.1809410915196499, "compression_ratio": 1.8031496062992125, "no_speech_prob": 0.40742793679237366}, {"id": 192, "seek": 127928, "start": 1289.04, "end": 1293.2, "text": " with the event loop. You're trying to figure out what your API to the application looks like", "tokens": [50852, 365, 264, 2280, 6367, 13, 509, 434, 1382, 281, 2573, 484, 437, 428, 9362, 281, 264, 3861, 1542, 411, 51060], "temperature": 0.0, "avg_logprob": -0.1809410915196499, "compression_ratio": 1.8031496062992125, "no_speech_prob": 0.40742793679237366}, {"id": 193, "seek": 127928, "start": 1293.2, "end": 1300.68, "text": " and you need to figure out what your integration with NSS or system. The complexity is multiplicative,", "tokens": [51060, 293, 291, 643, 281, 2573, 484, 437, 428, 10980, 365, 15943, 50, 420, 1185, 13, 440, 14024, 307, 17596, 1166, 11, 51434], "temperature": 0.0, "avg_logprob": -0.1809410915196499, "compression_ratio": 1.8031496062992125, "no_speech_prob": 0.40742793679237366}, {"id": 194, "seek": 127928, "start": 1300.68, "end": 1307.16, "text": " so you're curbing this. This is a horrible idea. You can at least remove the event loop", "tokens": [51434, 370, 291, 434, 1262, 4324, 341, 13, 639, 307, 257, 9263, 1558, 13, 509, 393, 412, 1935, 4159, 264, 2280, 6367, 51758], "temperature": 0.0, "avg_logprob": -0.1809410915196499, "compression_ratio": 1.8031496062992125, "no_speech_prob": 0.40742793679237366}, {"id": 195, "seek": 130716, "start": 1307.16, "end": 1313.6000000000001, "text": " integration as a moving target. There is an existing project called libverto which tried", "tokens": [50364, 10980, 382, 257, 2684, 3779, 13, 821, 307, 364, 6741, 1716, 1219, 22854, 331, 1353, 597, 3031, 50686], "temperature": 0.0, "avg_logprob": -0.22819319003965796, "compression_ratio": 1.64, "no_speech_prob": 0.011995772831141949}, {"id": 196, "seek": 130716, "start": 1313.6000000000001, "end": 1319.0, "text": " to just solve that one problem by providing four libraries and API to integrate with an", "tokens": [50686, 281, 445, 5039, 300, 472, 1154, 538, 6530, 1451, 15148, 293, 9362, 281, 13365, 365, 364, 50956], "temperature": 0.0, "avg_logprob": -0.22819319003965796, "compression_ratio": 1.64, "no_speech_prob": 0.011995772831141949}, {"id": 197, "seek": 130716, "start": 1319.0, "end": 1327.16, "text": " arbitrary event loop provided by the application. I think you need to remove the number of moving", "tokens": [50956, 23211, 2280, 6367, 5649, 538, 264, 3861, 13, 286, 519, 291, 643, 281, 4159, 264, 1230, 295, 2684, 51364], "temperature": 0.0, "avg_logprob": -0.22819319003965796, "compression_ratio": 1.64, "no_speech_prob": 0.011995772831141949}, {"id": 198, "seek": 130716, "start": 1327.16, "end": 1334.1200000000001, "text": " targets like reduce it and maybe the event loop is the one to kick out first and try to put in", "tokens": [51364, 12911, 411, 5407, 309, 293, 1310, 264, 2280, 6367, 307, 264, 472, 281, 4437, 484, 700, 293, 853, 281, 829, 294, 51712], "temperature": 0.0, "avg_logprob": -0.22819319003965796, "compression_ratio": 1.64, "no_speech_prob": 0.011995772831141949}, {"id": 199, "seek": 133412, "start": 1334.12, "end": 1344.04, "text": " a separate consideration how to solve that and then continue from there. So the question was", "tokens": [50364, 257, 4994, 12381, 577, 281, 5039, 300, 293, 550, 2354, 490, 456, 13, 407, 264, 1168, 390, 50860], "temperature": 0.0, "avg_logprob": -0.2544621424888497, "compression_ratio": 1.5243243243243243, "no_speech_prob": 0.010767577216029167}, {"id": 200, "seek": 133412, "start": 1344.04, "end": 1353.28, "text": " basically it tries to deal with too much stuff at the same time. Event loops, figuring out an", "tokens": [50860, 1936, 309, 9898, 281, 2028, 365, 886, 709, 1507, 412, 264, 912, 565, 13, 13222, 16121, 11, 15213, 484, 364, 51322], "temperature": 0.0, "avg_logprob": -0.2544621424888497, "compression_ratio": 1.5243243243243243, "no_speech_prob": 0.010767577216029167}, {"id": 201, "seek": 133412, "start": 1353.28, "end": 1360.6399999999999, "text": " API and then also figuring out how to deal with an S-switch. There's an existing library called", "tokens": [51322, 9362, 293, 550, 611, 15213, 484, 577, 281, 2028, 365, 364, 318, 12, 25884, 1549, 13, 821, 311, 364, 6741, 6405, 1219, 51690], "temperature": 0.0, "avg_logprob": -0.2544621424888497, "compression_ratio": 1.5243243243243243, "no_speech_prob": 0.010767577216029167}, {"id": 202, "seek": 136064, "start": 1361.3600000000001, "end": 1370.72, "text": " virto. That makes it easier to be flexible with respect to event loops. That's definitely a", "tokens": [50400, 4480, 78, 13, 663, 1669, 309, 3571, 281, 312, 11358, 365, 3104, 281, 2280, 16121, 13, 663, 311, 2138, 257, 50868], "temperature": 0.0, "avg_logprob": -0.2879768425310162, "compression_ratio": 1.489247311827957, "no_speech_prob": 0.011122547090053558}, {"id": 203, "seek": 136064, "start": 1370.72, "end": 1376.88, "text": " good point. I'll try to look at it, but I specifically decided to only focus on libEvent", "tokens": [50868, 665, 935, 13, 286, 603, 853, 281, 574, 412, 309, 11, 457, 286, 4682, 3047, 281, 787, 1879, 322, 22854, 36, 2475, 51176], "temperature": 0.0, "avg_logprob": -0.2879768425310162, "compression_ratio": 1.489247311827957, "no_speech_prob": 0.011122547090053558}, {"id": 204, "seek": 136064, "start": 1376.88, "end": 1386.5600000000002, "text": " to just get virto. To get something, a prototype up and running and not try to support arbitrary", "tokens": [51176, 281, 445, 483, 4480, 78, 13, 1407, 483, 746, 11, 257, 19475, 493, 293, 2614, 293, 406, 853, 281, 1406, 23211, 51660], "temperature": 0.0, "avg_logprob": -0.2879768425310162, "compression_ratio": 1.489247311827957, "no_speech_prob": 0.011122547090053558}, {"id": 205, "seek": 138656, "start": 1386.56, "end": 1398.28, "text": " things like that. More questions, some more time. Okay, it seems that we have run out of questions.", "tokens": [50366, 721, 411, 300, 13, 5048, 1651, 11, 512, 544, 565, 13, 1033, 11, 309, 2544, 300, 321, 362, 1190, 484, 295, 1651, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2894542950850267, "compression_ratio": 1.1647058823529413, "no_speech_prob": 0.033163223415613174}], "language": "en"}