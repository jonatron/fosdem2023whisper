{"text": " We are starting in a couple of seconds, so welcome, Norbert. Thank you. I hope you can hear me, right? So yeah, my name is Norbert Po\u010d. I work at Red Hat, and today I will talk about hybrid public encryption, and later we will source it with, like, some post-quantum. Okay, so is here anybody who already knows about HPK? Please raise your hand. Oh, nice. There's quite a few people. Okay. Okay, so who doesn't know? HPK stands for hybrid public key encryption. It's a symmetric and f-symmetric, like, it's combining both into a scheme. It uses a key encapsulation mechanism. It's used for key exchange. It's, like, key exchanges, like, you have, like, Diffie-Hellman. This is a bit different approach. You can find the RFC in the 9180. So, yeah, we have the fundamental parts of the HPK scheme. You have, like, key encapsulation method, the key derivation, or key schedule, and the AEAD, which provides the encryption of the messages itself. Below, you can see listed the algorithms, which are supported. For the key encapsulation method, we have prime, curves, and Edward curves. For the key derivation, we use SHA versions, and AEAD supports AES and Chachapoly. So, yeah, some familiar, like, words. You will find later, for the CAM operations, we have K generations, and encapsulation and the encapsulation. For the KDF, we have extract and expand. The extract generates a key from some input data, and the expand expands this extracted K to some length, we wish. For the AEAD, we have seal and open, which are encrypt and decrypt. It's just an LES to it. Okay, so let's talk about how does it work. At the one side, you can see the CAM and the case schedule, encryption context, and AEAD. Encryption context divides asymmetric on the left and symmetric on the right. This is really important, because, like, we'll see later, that this diversion enables us to change parts in it and leave the scheme still intact. So, let's say we want to use, like, different algorithms for the KDF method, and, like, we just change it and all, like, can proceed with the scheme itself. So, we use K derivation to the KNGAP solution, create an encryption context, which means which will consist of data we will need to do encryption or some data or messages in the AEAD. Yeah, and the last part, like, the symmetric part is the AEAD, where we, like, grab some messages, encrypt it, and, like, send it over. So, this is the communication part. Now, I want some feedback from the last row. Is it readable? Okay, thank you. So, this is a formal diagram. How does it work? I will go it through. So, we have Bob on the right and Alice on the left. We will assume that Bob has some private key which already shared with Alice. We don't care in the HPK how. So, let's pretend that Alice knows the public key of Bob. Then we will start with the encapsulation. So, Alice generates a temporary key pair called fmrl. Okay, it's visible. So, here, it's the PKE and SKE. And we will use Bob's private key and Alice's private, sorry, public key and private key to make, like, Diffie-Hellman, which will give us a shared secret. Then we use the shared secret in the KD version function to create a common key. Then we send over our public fmrl key to Bob so he can do the same to get the shared secret. Here, like, so we encapsulate it, send it over, and now we are at Bob. Bob does the encapsulation. He has his private key and Alice's public key. Does the Diffie-Hellman get the same shared secret? The shared secret is, again, used at the KDF, and we have a common key. So, the common key is the same at Alice and Bob. This is the end of the K encapsulation part. Now we move to K schedule. So, we get this common key, use the extract to generate some salt, let's say, then expand it to get a key, and expand it one more time, but with different information, as you can see here, to get an answer. And then the third one is secret for exportation. So, now we have set up the communication, and we can do actually encrypted message conversations, which is the seal and the open. As you can see, we use the key, the nonce, some additional information and the key, the private text, plain text. Thank you. So, here, you can see XOR. The messages are counted. So, every message has a counter and we explore it with the nonce. Therefore, every message will be different, even if the message is like the same. So, if the plain text is the same, we will get a different cipher text. That's the reason. Okay, so, we have this nice scheme. What can we use it for? Possible messages are the MLS or messaging layer security. It's quite new stuff. I think, maybe one year old. The MLS uses... So, MLS solves a problem where we want to communicate. We have communicating parties more than two. So, let's say, I want to communicate with you, but I want to communicate with you and you and you. So, it's harder to exchange keys this way because when we have, like, a two-way communication, it's easier, right? So, this is the problem that MLS solves. Then we have the TLS client hello and Oblivios DNS over HTTPS. The last one is, I think, Nu1.2. That solves the encryption of the IP address of the requester. Okay, so, HPK comes with three modes. The first one is the basic, and then there are two more, providing authentication. We have authentication mode with private key or a pre-shared key in a PSK mode, or we can combine the both and have the old PSK mode. What about the security? The base mode is programmed to be secure against indistinguishability ciphertext, and the authenticated modes are outside there and inside the CCS secure. Yeah, so, later on, you can find a report at the references. So, let's move to the post-quantum stuff. As I said before, the key encapsulation and the AEAD are separated. So, to make it post-quantum, we can just put post-quantum algorithms to the key encapsulation method, and we will get post-quantum HPK. The proposal was for kyber and psych, but as most of you know, psych is already out of the game. Kyber is one of the NIST finalists for key exchange methods. It uses chem the same way instead of DH-style key exchange. It is a lattice-based game standing upon learning with errors and running problem, and kyber is proven to be IND CCS secure too. Yeah, so we have this nice diagram again. There we can see hybrid version. We have post-quantum only version of HPK and hybrid. Hybrid uses post-quantum and the old algorithms too for the key encapsulation method. Like if one breaks, you can still have some security. So, you can see gray boxes here. These boxes are the old algorithms, which means if we eliminate them, the post-quantum version will be visible. That means the same way, so first I will go through the post-quantum. The same way Bob generates the key pair prior HPK, and let's say that Alice already knows that key. The difference here is that we don't do classical Diffie-Hellman, but we encrypt some random data and we will get a shared secret here. And the ciphertext of that shared secret. Then we do the key derivation to get the common key, send over the ciphertext of the shared secret to Bob, who can decrypt it and do the same here. And as you can see, everything else is the same as the basic HPK. For the hybrid mode, the only difference is here. So, for the KDF, the post-quantum and the basic shared secret is concatenated, and everything else should be the same. Okay, so what is the security of the post-quantum? In the base mode, it's still INCCI2 secure because the KM algorithm is proven to be INCCI2 secure. For the hybrid mode, it needs more proof because the concatenation there, and the authentication for both hybrid and PQ only would need more work. So, let's see some benchmarks. I got this benchmark from the paper, which you can see below. They were done on Intel Core E7 with 4 cores, 8 megabytes of cache and 8 megabytes of RAM, using AWC LST, cryptographic library. And the environment, each algorithm was run 10,000 times, and the first and fourth quartile was eliminated of the measures to make it more accurate. The measures are in CPU clock cycles, and I think it was medium or something like that. Okay, so here you can see Psyche, which is now eliminated, but I think it's a nice reference that it was a lot slower. So, this blue one is the basic Edward curve, like the basic HPK, then the green one is a hybrid one, and yeah, here the yellow is kyber only. And as you can see, it is faster than the Edward curve, which is interesting. Then there is one more graph. Here you can see the green lines, which tells us that the ky encapsulation method is constant time, so it doesn't constant in a way that it doesn't affect the encryption itself, because the tests were done for data encryption for 1 kilobyte of data, 10 kilobyte, 100 kilobyte, and 1 megabyte of data. So, as you can see, the cost is more on the encryption of the data itself. So, there is a red line. You can see that's for reference. This is a version of LSA encrypting 240 bytes of data. Yeah, so here you can see references if you want to read more about it, and thank you for attention. So, any questions? We had some questions on metrics, so I will try to read it. The question was, how do we make quantum resistant crypto work on constrained devices? What? How do we make quantum resistant crypto work on constrained devices? Well, that's a good question. I don't know the answer before, so sorry for that. Okay, so any other question in here? Thank you. The last slide, I think page 15, you showed some benchmarks, but these are on the whole encryption, right? Like, not only the exchange of the keys and the setup of the symmetry key, but the whole exchange, right? They are both. So, as you can see, the green line is like the key exchange itself, and then you have like the seal and the open operation here. So, it's, if you take, for example, one message and one key exchange, that's what the benchmark says, like it's together. Yeah, okay, all right. Which was expected, because anyway, the quantum, the post quantum part is only in the beginning of the exchange. And then when the symmetry key is established, you continue with using your EEAD. Yes, that's correct. All right, thanks. So, the post quantum part is only at the K exchange, and later on it is the same. Okay, any other question? Yeah, I just wanted to say that the post quantum is more about like asymmetric keys. It doesn't really affect the symmetric part, so it's okay. Any other question around here? If not, we can probably, thank you for the talk, thank you for the questions. Thank you for coming.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.8, "text": " We are starting in a couple of seconds, so welcome, Norbert.", "tokens": [492, 366, 2891, 294, 257, 1916, 295, 3949, 11, 370, 2928, 11, 6966, 4290, 13], "temperature": 0.0, "avg_logprob": -0.32519850049700055, "compression_ratio": 1.3431952662721893, "no_speech_prob": 0.28349411487579346}, {"id": 1, "seek": 0, "start": 15.8, "end": 16.8, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.32519850049700055, "compression_ratio": 1.3431952662721893, "no_speech_prob": 0.28349411487579346}, {"id": 2, "seek": 0, "start": 16.8, "end": 18.56, "text": " I hope you can hear me, right?", "tokens": [286, 1454, 291, 393, 1568, 385, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.32519850049700055, "compression_ratio": 1.3431952662721893, "no_speech_prob": 0.28349411487579346}, {"id": 3, "seek": 0, "start": 18.56, "end": 20.6, "text": " So yeah, my name is Norbert Po\u010d.", "tokens": [407, 1338, 11, 452, 1315, 307, 6966, 4290, 6165, 10236, 13], "temperature": 0.0, "avg_logprob": -0.32519850049700055, "compression_ratio": 1.3431952662721893, "no_speech_prob": 0.28349411487579346}, {"id": 4, "seek": 0, "start": 20.6, "end": 29.0, "text": " I work at Red Hat, and today I will talk about hybrid public encryption, and later we will", "tokens": [286, 589, 412, 4477, 15867, 11, 293, 965, 286, 486, 751, 466, 13051, 1908, 29575, 11, 293, 1780, 321, 486], "temperature": 0.0, "avg_logprob": -0.32519850049700055, "compression_ratio": 1.3431952662721893, "no_speech_prob": 0.28349411487579346}, {"id": 5, "seek": 2900, "start": 29.0, "end": 32.0, "text": " source it with, like, some post-quantum.", "tokens": [4009, 309, 365, 11, 411, 11, 512, 2183, 12, 358, 394, 449, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 6, "seek": 2900, "start": 32.0, "end": 37.0, "text": " Okay, so is here anybody who already knows about HPK?", "tokens": [1033, 11, 370, 307, 510, 4472, 567, 1217, 3255, 466, 12557, 42, 30], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 7, "seek": 2900, "start": 37.0, "end": 39.0, "text": " Please raise your hand.", "tokens": [2555, 5300, 428, 1011, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 8, "seek": 2900, "start": 39.0, "end": 40.0, "text": " Oh, nice.", "tokens": [876, 11, 1481, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 9, "seek": 2900, "start": 40.0, "end": 42.0, "text": " There's quite a few people.", "tokens": [821, 311, 1596, 257, 1326, 561, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 10, "seek": 2900, "start": 42.0, "end": 43.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 11, "seek": 2900, "start": 43.0, "end": 47.0, "text": " Okay, so who doesn't know?", "tokens": [1033, 11, 370, 567, 1177, 380, 458, 30], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 12, "seek": 2900, "start": 47.0, "end": 50.0, "text": " HPK stands for hybrid public key encryption.", "tokens": [12557, 42, 7382, 337, 13051, 1908, 2141, 29575, 13], "temperature": 0.0, "avg_logprob": -0.24620539025415347, "compression_ratio": 1.3764705882352941, "no_speech_prob": 0.00047590365284122527}, {"id": 13, "seek": 5000, "start": 50.0, "end": 59.0, "text": " It's a symmetric and f-symmetric, like, it's combining both into a scheme.", "tokens": [467, 311, 257, 32330, 293, 283, 12, 3187, 2174, 17475, 11, 411, 11, 309, 311, 21928, 1293, 666, 257, 12232, 13], "temperature": 0.0, "avg_logprob": -0.15381837502504006, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.0018861913122236729}, {"id": 14, "seek": 5000, "start": 59.0, "end": 63.0, "text": " It uses a key encapsulation mechanism.", "tokens": [467, 4960, 257, 2141, 38745, 2776, 7513, 13], "temperature": 0.0, "avg_logprob": -0.15381837502504006, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.0018861913122236729}, {"id": 15, "seek": 5000, "start": 63.0, "end": 65.0, "text": " It's used for key exchange.", "tokens": [467, 311, 1143, 337, 2141, 7742, 13], "temperature": 0.0, "avg_logprob": -0.15381837502504006, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.0018861913122236729}, {"id": 16, "seek": 5000, "start": 65.0, "end": 70.0, "text": " It's, like, key exchanges, like, you have, like, Diffie-Hellman.", "tokens": [467, 311, 11, 411, 11, 2141, 27374, 11, 411, 11, 291, 362, 11, 411, 11, 413, 3661, 414, 12, 39, 898, 1601, 13], "temperature": 0.0, "avg_logprob": -0.15381837502504006, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.0018861913122236729}, {"id": 17, "seek": 5000, "start": 70.0, "end": 74.0, "text": " This is a bit different approach.", "tokens": [639, 307, 257, 857, 819, 3109, 13], "temperature": 0.0, "avg_logprob": -0.15381837502504006, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.0018861913122236729}, {"id": 18, "seek": 7400, "start": 74.0, "end": 80.0, "text": " You can find the RFC in the 9180.", "tokens": [509, 393, 915, 264, 497, 18671, 294, 264, 31064, 4702, 13], "temperature": 0.0, "avg_logprob": -0.14982405952785327, "compression_ratio": 1.3895348837209303, "no_speech_prob": 0.0006550605176016688}, {"id": 19, "seek": 7400, "start": 80.0, "end": 86.0, "text": " So, yeah, we have the fundamental parts of the HPK scheme.", "tokens": [407, 11, 1338, 11, 321, 362, 264, 8088, 3166, 295, 264, 12557, 42, 12232, 13], "temperature": 0.0, "avg_logprob": -0.14982405952785327, "compression_ratio": 1.3895348837209303, "no_speech_prob": 0.0006550605176016688}, {"id": 20, "seek": 7400, "start": 86.0, "end": 92.0, "text": " You have, like, key encapsulation method, the key derivation, or key schedule, and the", "tokens": [509, 362, 11, 411, 11, 2141, 38745, 2776, 3170, 11, 264, 2141, 10151, 399, 11, 420, 2141, 7567, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.14982405952785327, "compression_ratio": 1.3895348837209303, "no_speech_prob": 0.0006550605176016688}, {"id": 21, "seek": 7400, "start": 92.0, "end": 98.0, "text": " AEAD, which provides the encryption of the messages itself.", "tokens": [32207, 6112, 11, 597, 6417, 264, 29575, 295, 264, 7897, 2564, 13], "temperature": 0.0, "avg_logprob": -0.14982405952785327, "compression_ratio": 1.3895348837209303, "no_speech_prob": 0.0006550605176016688}, {"id": 22, "seek": 9800, "start": 98.0, "end": 104.0, "text": " Below, you can see listed the algorithms, which are supported.", "tokens": [36261, 11, 291, 393, 536, 10052, 264, 14642, 11, 597, 366, 8104, 13], "temperature": 0.0, "avg_logprob": -0.21579974406474345, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.0004208854224998504}, {"id": 23, "seek": 9800, "start": 104.0, "end": 109.0, "text": " For the key encapsulation method, we have prime, curves, and Edward curves.", "tokens": [1171, 264, 2141, 38745, 2776, 3170, 11, 321, 362, 5835, 11, 19490, 11, 293, 18456, 19490, 13], "temperature": 0.0, "avg_logprob": -0.21579974406474345, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.0004208854224998504}, {"id": 24, "seek": 9800, "start": 109.0, "end": 120.0, "text": " For the key derivation, we use SHA versions, and AEAD supports AES and Chachapoly.", "tokens": [1171, 264, 2141, 10151, 399, 11, 321, 764, 38820, 9606, 11, 293, 32207, 6112, 9346, 316, 2358, 293, 761, 608, 569, 16453, 13], "temperature": 0.0, "avg_logprob": -0.21579974406474345, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.0004208854224998504}, {"id": 25, "seek": 9800, "start": 120.0, "end": 124.0, "text": " So, yeah, some familiar, like, words.", "tokens": [407, 11, 1338, 11, 512, 4963, 11, 411, 11, 2283, 13], "temperature": 0.0, "avg_logprob": -0.21579974406474345, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.0004208854224998504}, {"id": 26, "seek": 12400, "start": 124.0, "end": 130.0, "text": " You will find later, for the CAM operations, we have K generations,", "tokens": [509, 486, 915, 1780, 11, 337, 264, 27040, 7705, 11, 321, 362, 591, 10593, 11], "temperature": 0.0, "avg_logprob": -0.21097881693235584, "compression_ratio": 1.6815286624203822, "no_speech_prob": 0.00020193911041133106}, {"id": 27, "seek": 12400, "start": 130.0, "end": 133.0, "text": " and encapsulation and the encapsulation.", "tokens": [293, 38745, 2776, 293, 264, 38745, 2776, 13], "temperature": 0.0, "avg_logprob": -0.21097881693235584, "compression_ratio": 1.6815286624203822, "no_speech_prob": 0.00020193911041133106}, {"id": 28, "seek": 12400, "start": 133.0, "end": 137.0, "text": " For the KDF, we have extract and expand.", "tokens": [1171, 264, 591, 35, 37, 11, 321, 362, 8947, 293, 5268, 13], "temperature": 0.0, "avg_logprob": -0.21097881693235584, "compression_ratio": 1.6815286624203822, "no_speech_prob": 0.00020193911041133106}, {"id": 29, "seek": 12400, "start": 137.0, "end": 143.0, "text": " The extract generates a key from some input data, and the expand", "tokens": [440, 8947, 23815, 257, 2141, 490, 512, 4846, 1412, 11, 293, 264, 5268], "temperature": 0.0, "avg_logprob": -0.21097881693235584, "compression_ratio": 1.6815286624203822, "no_speech_prob": 0.00020193911041133106}, {"id": 30, "seek": 12400, "start": 143.0, "end": 153.0, "text": " expands this extracted K to some length, we wish.", "tokens": [33706, 341, 34086, 591, 281, 512, 4641, 11, 321, 3172, 13], "temperature": 0.0, "avg_logprob": -0.21097881693235584, "compression_ratio": 1.6815286624203822, "no_speech_prob": 0.00020193911041133106}, {"id": 31, "seek": 15300, "start": 153.0, "end": 159.0, "text": " For the AEAD, we have seal and open, which are encrypt and decrypt.", "tokens": [1171, 264, 32207, 6112, 11, 321, 362, 12185, 293, 1269, 11, 597, 366, 17972, 662, 293, 979, 627, 662, 13], "temperature": 0.0, "avg_logprob": -0.1327902301327213, "compression_ratio": 1.5618556701030928, "no_speech_prob": 5.832524402649142e-05}, {"id": 32, "seek": 15300, "start": 159.0, "end": 163.0, "text": " It's just an LES to it.", "tokens": [467, 311, 445, 364, 441, 2358, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.1327902301327213, "compression_ratio": 1.5618556701030928, "no_speech_prob": 5.832524402649142e-05}, {"id": 33, "seek": 15300, "start": 163.0, "end": 168.0, "text": " Okay, so let's talk about how does it work.", "tokens": [1033, 11, 370, 718, 311, 751, 466, 577, 775, 309, 589, 13], "temperature": 0.0, "avg_logprob": -0.1327902301327213, "compression_ratio": 1.5618556701030928, "no_speech_prob": 5.832524402649142e-05}, {"id": 34, "seek": 15300, "start": 168.0, "end": 176.0, "text": " At the one side, you can see the CAM and the case schedule, encryption context, and AEAD.", "tokens": [1711, 264, 472, 1252, 11, 291, 393, 536, 264, 27040, 293, 264, 1389, 7567, 11, 29575, 4319, 11, 293, 32207, 6112, 13], "temperature": 0.0, "avg_logprob": -0.1327902301327213, "compression_ratio": 1.5618556701030928, "no_speech_prob": 5.832524402649142e-05}, {"id": 35, "seek": 15300, "start": 176.0, "end": 182.0, "text": " Encryption context divides asymmetric on the left and symmetric on the right.", "tokens": [29584, 627, 1695, 4319, 41347, 37277, 17475, 322, 264, 1411, 293, 32330, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.1327902301327213, "compression_ratio": 1.5618556701030928, "no_speech_prob": 5.832524402649142e-05}, {"id": 36, "seek": 18200, "start": 182.0, "end": 191.0, "text": " This is really important, because, like, we'll see later, that this diversion", "tokens": [639, 307, 534, 1021, 11, 570, 11, 411, 11, 321, 603, 536, 1780, 11, 300, 341, 49422], "temperature": 0.0, "avg_logprob": -0.2117018699645996, "compression_ratio": 1.3875, "no_speech_prob": 0.00038826491800136864}, {"id": 37, "seek": 18200, "start": 191.0, "end": 200.0, "text": " enables us to change parts in it and leave the scheme still intact.", "tokens": [17077, 505, 281, 1319, 3166, 294, 309, 293, 1856, 264, 12232, 920, 23493, 13], "temperature": 0.0, "avg_logprob": -0.2117018699645996, "compression_ratio": 1.3875, "no_speech_prob": 0.00038826491800136864}, {"id": 38, "seek": 18200, "start": 200.0, "end": 206.0, "text": " So, let's say we want to use, like, different algorithms for the KDF method,", "tokens": [407, 11, 718, 311, 584, 321, 528, 281, 764, 11, 411, 11, 819, 14642, 337, 264, 591, 35, 37, 3170, 11], "temperature": 0.0, "avg_logprob": -0.2117018699645996, "compression_ratio": 1.3875, "no_speech_prob": 0.00038826491800136864}, {"id": 39, "seek": 20600, "start": 206.0, "end": 214.0, "text": " and, like, we just change it and all, like, can proceed with the scheme itself.", "tokens": [293, 11, 411, 11, 321, 445, 1319, 309, 293, 439, 11, 411, 11, 393, 8991, 365, 264, 12232, 2564, 13], "temperature": 0.0, "avg_logprob": -0.22365849917052222, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.00021135427232366055}, {"id": 40, "seek": 20600, "start": 214.0, "end": 224.0, "text": " So, we use K derivation to the KNGAP solution, create an encryption context,", "tokens": [407, 11, 321, 764, 591, 10151, 399, 281, 264, 591, 45, 38, 4715, 3827, 11, 1884, 364, 29575, 4319, 11], "temperature": 0.0, "avg_logprob": -0.22365849917052222, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.00021135427232366055}, {"id": 41, "seek": 20600, "start": 224.0, "end": 232.0, "text": " which means which will consist of data we will need to do encryption", "tokens": [597, 1355, 597, 486, 4603, 295, 1412, 321, 486, 643, 281, 360, 29575], "temperature": 0.0, "avg_logprob": -0.22365849917052222, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.00021135427232366055}, {"id": 42, "seek": 23200, "start": 232.0, "end": 237.0, "text": " or some data or messages in the AEAD.", "tokens": [420, 512, 1412, 420, 7897, 294, 264, 32207, 6112, 13], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 43, "seek": 23200, "start": 237.0, "end": 242.0, "text": " Yeah, and the last part, like, the symmetric part is the AEAD,", "tokens": [865, 11, 293, 264, 1036, 644, 11, 411, 11, 264, 32330, 644, 307, 264, 32207, 6112, 11], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 44, "seek": 23200, "start": 242.0, "end": 248.0, "text": " where we, like, grab some messages, encrypt it, and, like, send it over.", "tokens": [689, 321, 11, 411, 11, 4444, 512, 7897, 11, 17972, 662, 309, 11, 293, 11, 411, 11, 2845, 309, 670, 13], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 45, "seek": 23200, "start": 248.0, "end": 251.0, "text": " So, this is the communication part.", "tokens": [407, 11, 341, 307, 264, 6101, 644, 13], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 46, "seek": 23200, "start": 251.0, "end": 254.0, "text": " Now, I want some feedback from the last row.", "tokens": [823, 11, 286, 528, 512, 5824, 490, 264, 1036, 5386, 13], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 47, "seek": 23200, "start": 254.0, "end": 257.0, "text": " Is it readable?", "tokens": [1119, 309, 49857, 30], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 48, "seek": 23200, "start": 257.0, "end": 259.0, "text": " Okay, thank you.", "tokens": [1033, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.10331896077031674, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.00010099729843204841}, {"id": 49, "seek": 25900, "start": 259.0, "end": 262.0, "text": " So, this is a formal diagram. How does it work?", "tokens": [407, 11, 341, 307, 257, 9860, 10686, 13, 1012, 775, 309, 589, 30], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 50, "seek": 25900, "start": 262.0, "end": 264.0, "text": " I will go it through.", "tokens": [286, 486, 352, 309, 807, 13], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 51, "seek": 25900, "start": 264.0, "end": 270.0, "text": " So, we have Bob on the right and Alice on the left.", "tokens": [407, 11, 321, 362, 6085, 322, 264, 558, 293, 16004, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 52, "seek": 25900, "start": 270.0, "end": 278.0, "text": " We will assume that Bob has some private key which already shared with Alice.", "tokens": [492, 486, 6552, 300, 6085, 575, 512, 4551, 2141, 597, 1217, 5507, 365, 16004, 13], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 53, "seek": 25900, "start": 278.0, "end": 281.0, "text": " We don't care in the HPK how.", "tokens": [492, 500, 380, 1127, 294, 264, 12557, 42, 577, 13], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 54, "seek": 25900, "start": 281.0, "end": 286.0, "text": " So, let's pretend that Alice knows the public key of Bob.", "tokens": [407, 11, 718, 311, 11865, 300, 16004, 3255, 264, 1908, 2141, 295, 6085, 13], "temperature": 0.0, "avg_logprob": -0.1164388989293298, "compression_ratio": 1.4870466321243523, "no_speech_prob": 0.0008407593122683465}, {"id": 55, "seek": 28600, "start": 286.0, "end": 289.0, "text": " Then we will start with the encapsulation.", "tokens": [1396, 321, 486, 722, 365, 264, 38745, 2776, 13], "temperature": 0.0, "avg_logprob": -0.1563743261190561, "compression_ratio": 1.2032520325203253, "no_speech_prob": 0.00019157004135195166}, {"id": 56, "seek": 28600, "start": 289.0, "end": 298.0, "text": " So, Alice generates a temporary key pair called fmrl.", "tokens": [407, 11, 16004, 23815, 257, 13413, 2141, 6119, 1219, 283, 76, 81, 75, 13], "temperature": 0.0, "avg_logprob": -0.1563743261190561, "compression_ratio": 1.2032520325203253, "no_speech_prob": 0.00019157004135195166}, {"id": 57, "seek": 28600, "start": 298.0, "end": 300.0, "text": " Okay, it's visible.", "tokens": [1033, 11, 309, 311, 8974, 13], "temperature": 0.0, "avg_logprob": -0.1563743261190561, "compression_ratio": 1.2032520325203253, "no_speech_prob": 0.00019157004135195166}, {"id": 58, "seek": 28600, "start": 300.0, "end": 305.0, "text": " So, here, it's the PKE and SKE.", "tokens": [407, 11, 510, 11, 309, 311, 264, 430, 8522, 293, 318, 8522, 13], "temperature": 0.0, "avg_logprob": -0.1563743261190561, "compression_ratio": 1.2032520325203253, "no_speech_prob": 0.00019157004135195166}, {"id": 59, "seek": 30500, "start": 305.0, "end": 316.0, "text": " And we will use Bob's private key and Alice's private, sorry, public key and private key to make,", "tokens": [400, 321, 486, 764, 6085, 311, 4551, 2141, 293, 16004, 311, 4551, 11, 2597, 11, 1908, 2141, 293, 4551, 2141, 281, 652, 11], "temperature": 0.0, "avg_logprob": -0.18688990464851038, "compression_ratio": 1.4936708860759493, "no_speech_prob": 0.0006079605664126575}, {"id": 60, "seek": 30500, "start": 316.0, "end": 322.0, "text": " like, Diffie-Hellman, which will give us a shared secret.", "tokens": [411, 11, 413, 3661, 414, 12, 39, 898, 1601, 11, 597, 486, 976, 505, 257, 5507, 4054, 13], "temperature": 0.0, "avg_logprob": -0.18688990464851038, "compression_ratio": 1.4936708860759493, "no_speech_prob": 0.0006079605664126575}, {"id": 61, "seek": 30500, "start": 322.0, "end": 328.0, "text": " Then we use the shared secret in the KD version function to create a common key.", "tokens": [1396, 321, 764, 264, 5507, 4054, 294, 264, 591, 35, 3037, 2445, 281, 1884, 257, 2689, 2141, 13], "temperature": 0.0, "avg_logprob": -0.18688990464851038, "compression_ratio": 1.4936708860759493, "no_speech_prob": 0.0006079605664126575}, {"id": 62, "seek": 32800, "start": 328.0, "end": 339.0, "text": " Then we send over our public fmrl key to Bob so he can do the same to get the shared secret.", "tokens": [1396, 321, 2845, 670, 527, 1908, 283, 76, 81, 75, 2141, 281, 6085, 370, 415, 393, 360, 264, 912, 281, 483, 264, 5507, 4054, 13], "temperature": 0.0, "avg_logprob": -0.07408693631490072, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.0011255723657086492}, {"id": 63, "seek": 32800, "start": 339.0, "end": 347.0, "text": " Here, like, so we encapsulate it, send it over, and now we are at Bob.", "tokens": [1692, 11, 411, 11, 370, 321, 38745, 5256, 309, 11, 2845, 309, 670, 11, 293, 586, 321, 366, 412, 6085, 13], "temperature": 0.0, "avg_logprob": -0.07408693631490072, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.0011255723657086492}, {"id": 64, "seek": 32800, "start": 347.0, "end": 350.0, "text": " Bob does the encapsulation.", "tokens": [6085, 775, 264, 38745, 2776, 13], "temperature": 0.0, "avg_logprob": -0.07408693631490072, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.0011255723657086492}, {"id": 65, "seek": 32800, "start": 350.0, "end": 354.0, "text": " He has his private key and Alice's public key.", "tokens": [634, 575, 702, 4551, 2141, 293, 16004, 311, 1908, 2141, 13], "temperature": 0.0, "avg_logprob": -0.07408693631490072, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.0011255723657086492}, {"id": 66, "seek": 32800, "start": 354.0, "end": 357.0, "text": " Does the Diffie-Hellman get the same shared secret?", "tokens": [4402, 264, 413, 3661, 414, 12, 39, 898, 1601, 483, 264, 912, 5507, 4054, 30], "temperature": 0.0, "avg_logprob": -0.07408693631490072, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.0011255723657086492}, {"id": 67, "seek": 35700, "start": 357.0, "end": 361.0, "text": " The shared secret is, again, used at the KDF, and we have a common key.", "tokens": [440, 5507, 4054, 307, 11, 797, 11, 1143, 412, 264, 591, 35, 37, 11, 293, 321, 362, 257, 2689, 2141, 13], "temperature": 0.0, "avg_logprob": -0.1283045836857387, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0001503659732406959}, {"id": 68, "seek": 35700, "start": 361.0, "end": 366.0, "text": " So, the common key is the same at Alice and Bob.", "tokens": [407, 11, 264, 2689, 2141, 307, 264, 912, 412, 16004, 293, 6085, 13], "temperature": 0.0, "avg_logprob": -0.1283045836857387, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0001503659732406959}, {"id": 69, "seek": 35700, "start": 366.0, "end": 371.0, "text": " This is the end of the K encapsulation part.", "tokens": [639, 307, 264, 917, 295, 264, 591, 38745, 2776, 644, 13], "temperature": 0.0, "avg_logprob": -0.1283045836857387, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0001503659732406959}, {"id": 70, "seek": 35700, "start": 371.0, "end": 374.0, "text": " Now we move to K schedule.", "tokens": [823, 321, 1286, 281, 591, 7567, 13], "temperature": 0.0, "avg_logprob": -0.1283045836857387, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0001503659732406959}, {"id": 71, "seek": 35700, "start": 374.0, "end": 384.0, "text": " So, we get this common key, use the extract to generate some salt, let's say,", "tokens": [407, 11, 321, 483, 341, 2689, 2141, 11, 764, 264, 8947, 281, 8460, 512, 5139, 11, 718, 311, 584, 11], "temperature": 0.0, "avg_logprob": -0.1283045836857387, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0001503659732406959}, {"id": 72, "seek": 38400, "start": 384.0, "end": 390.0, "text": " then expand it to get a key, and expand it one more time,", "tokens": [550, 5268, 309, 281, 483, 257, 2141, 11, 293, 5268, 309, 472, 544, 565, 11], "temperature": 0.0, "avg_logprob": -0.15827308288992267, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.0005061296396888793}, {"id": 73, "seek": 38400, "start": 390.0, "end": 396.0, "text": " but with different information, as you can see here, to get an answer.", "tokens": [457, 365, 819, 1589, 11, 382, 291, 393, 536, 510, 11, 281, 483, 364, 1867, 13], "temperature": 0.0, "avg_logprob": -0.15827308288992267, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.0005061296396888793}, {"id": 74, "seek": 38400, "start": 396.0, "end": 404.0, "text": " And then the third one is secret for exportation.", "tokens": [400, 550, 264, 2636, 472, 307, 4054, 337, 10725, 399, 13], "temperature": 0.0, "avg_logprob": -0.15827308288992267, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.0005061296396888793}, {"id": 75, "seek": 38400, "start": 404.0, "end": 408.0, "text": " So, now we have set up the communication,", "tokens": [407, 11, 586, 321, 362, 992, 493, 264, 6101, 11], "temperature": 0.0, "avg_logprob": -0.15827308288992267, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.0005061296396888793}, {"id": 76, "seek": 38400, "start": 408.0, "end": 413.0, "text": " and we can do actually encrypted message conversations,", "tokens": [293, 321, 393, 360, 767, 36663, 3636, 7315, 11], "temperature": 0.0, "avg_logprob": -0.15827308288992267, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.0005061296396888793}, {"id": 77, "seek": 41300, "start": 413.0, "end": 416.0, "text": " which is the seal and the open.", "tokens": [597, 307, 264, 12185, 293, 264, 1269, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 78, "seek": 41300, "start": 416.0, "end": 421.0, "text": " As you can see, we use the key, the nonce,", "tokens": [1018, 291, 393, 536, 11, 321, 764, 264, 2141, 11, 264, 2107, 384, 11], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 79, "seek": 41300, "start": 421.0, "end": 428.0, "text": " some additional information and the key, the private text, plain text.", "tokens": [512, 4497, 1589, 293, 264, 2141, 11, 264, 4551, 2487, 11, 11121, 2487, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 80, "seek": 41300, "start": 428.0, "end": 430.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 81, "seek": 41300, "start": 430.0, "end": 434.0, "text": " So, here, you can see XOR.", "tokens": [407, 11, 510, 11, 291, 393, 536, 1783, 2483, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 82, "seek": 41300, "start": 434.0, "end": 437.0, "text": " The messages are counted.", "tokens": [440, 7897, 366, 20150, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 83, "seek": 41300, "start": 437.0, "end": 442.0, "text": " So, every message has a counter and we explore it with the nonce.", "tokens": [407, 11, 633, 3636, 575, 257, 5682, 293, 321, 6839, 309, 365, 264, 2107, 384, 13], "temperature": 0.0, "avg_logprob": -0.1969101484431777, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.00025029314565472305}, {"id": 84, "seek": 44200, "start": 442.0, "end": 446.0, "text": " Therefore, every message will be different,", "tokens": [7504, 11, 633, 3636, 486, 312, 819, 11], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 85, "seek": 44200, "start": 446.0, "end": 451.0, "text": " even if the message is like the same.", "tokens": [754, 498, 264, 3636, 307, 411, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 86, "seek": 44200, "start": 451.0, "end": 456.0, "text": " So, if the plain text is the same, we will get a different cipher text.", "tokens": [407, 11, 498, 264, 11121, 2487, 307, 264, 912, 11, 321, 486, 483, 257, 819, 269, 21240, 2487, 13], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 87, "seek": 44200, "start": 456.0, "end": 458.0, "text": " That's the reason.", "tokens": [663, 311, 264, 1778, 13], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 88, "seek": 44200, "start": 458.0, "end": 461.0, "text": " Okay, so, we have this nice scheme.", "tokens": [1033, 11, 370, 11, 321, 362, 341, 1481, 12232, 13], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 89, "seek": 44200, "start": 461.0, "end": 463.0, "text": " What can we use it for?", "tokens": [708, 393, 321, 764, 309, 337, 30], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 90, "seek": 44200, "start": 463.0, "end": 469.0, "text": " Possible messages are the MLS or messaging layer security.", "tokens": [430, 5785, 7897, 366, 264, 376, 19198, 420, 21812, 4583, 3825, 13], "temperature": 0.0, "avg_logprob": -0.16035292869390444, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00012104567576898262}, {"id": 91, "seek": 46900, "start": 469.0, "end": 472.0, "text": " It's quite new stuff.", "tokens": [467, 311, 1596, 777, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 92, "seek": 46900, "start": 472.0, "end": 477.0, "text": " I think, maybe one year old.", "tokens": [286, 519, 11, 1310, 472, 1064, 1331, 13], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 93, "seek": 46900, "start": 477.0, "end": 482.0, "text": " The MLS uses...", "tokens": [440, 376, 19198, 4960, 485], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 94, "seek": 46900, "start": 482.0, "end": 487.0, "text": " So, MLS solves a problem where we want to communicate.", "tokens": [407, 11, 376, 19198, 39890, 257, 1154, 689, 321, 528, 281, 7890, 13], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 95, "seek": 46900, "start": 487.0, "end": 491.0, "text": " We have communicating parties more than two.", "tokens": [492, 362, 17559, 8265, 544, 813, 732, 13], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 96, "seek": 46900, "start": 491.0, "end": 493.0, "text": " So, let's say, I want to communicate with you,", "tokens": [407, 11, 718, 311, 584, 11, 286, 528, 281, 7890, 365, 291, 11], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 97, "seek": 46900, "start": 493.0, "end": 496.0, "text": " but I want to communicate with you and you and you.", "tokens": [457, 286, 528, 281, 7890, 365, 291, 293, 291, 293, 291, 13], "temperature": 0.0, "avg_logprob": -0.13023425914623118, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0006574687431566417}, {"id": 98, "seek": 49600, "start": 496.0, "end": 500.0, "text": " So, it's harder to exchange keys this way", "tokens": [407, 11, 309, 311, 6081, 281, 7742, 9317, 341, 636], "temperature": 0.0, "avg_logprob": -0.18253835425319442, "compression_ratio": 1.3351063829787233, "no_speech_prob": 0.000933897914364934}, {"id": 99, "seek": 49600, "start": 500.0, "end": 505.0, "text": " because when we have, like, a two-way communication, it's easier, right?", "tokens": [570, 562, 321, 362, 11, 411, 11, 257, 732, 12, 676, 6101, 11, 309, 311, 3571, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18253835425319442, "compression_ratio": 1.3351063829787233, "no_speech_prob": 0.000933897914364934}, {"id": 100, "seek": 49600, "start": 505.0, "end": 508.0, "text": " So, this is the problem that MLS solves.", "tokens": [407, 11, 341, 307, 264, 1154, 300, 376, 19198, 39890, 13], "temperature": 0.0, "avg_logprob": -0.18253835425319442, "compression_ratio": 1.3351063829787233, "no_speech_prob": 0.000933897914364934}, {"id": 101, "seek": 49600, "start": 508.0, "end": 517.0, "text": " Then we have the TLS client hello and Oblivios DNS over HTTPS.", "tokens": [1396, 321, 362, 264, 314, 19198, 6423, 7751, 293, 4075, 45997, 2717, 35153, 670, 11751, 51, 6273, 13], "temperature": 0.0, "avg_logprob": -0.18253835425319442, "compression_ratio": 1.3351063829787233, "no_speech_prob": 0.000933897914364934}, {"id": 102, "seek": 49600, "start": 517.0, "end": 521.0, "text": " The last one is, I think, Nu1.2.", "tokens": [440, 1036, 472, 307, 11, 286, 519, 11, 13612, 16, 13, 17, 13], "temperature": 0.0, "avg_logprob": -0.18253835425319442, "compression_ratio": 1.3351063829787233, "no_speech_prob": 0.000933897914364934}, {"id": 103, "seek": 52100, "start": 521.0, "end": 529.0, "text": " That solves the encryption of the IP address of the requester.", "tokens": [663, 39890, 264, 29575, 295, 264, 8671, 2985, 295, 264, 1724, 3011, 13], "temperature": 0.0, "avg_logprob": -0.13366244633992513, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.00023340480402112007}, {"id": 104, "seek": 52100, "start": 529.0, "end": 533.0, "text": " Okay, so, HPK comes with three modes.", "tokens": [1033, 11, 370, 11, 12557, 42, 1487, 365, 1045, 14068, 13], "temperature": 0.0, "avg_logprob": -0.13366244633992513, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.00023340480402112007}, {"id": 105, "seek": 52100, "start": 533.0, "end": 535.0, "text": " The first one is the basic,", "tokens": [440, 700, 472, 307, 264, 3875, 11], "temperature": 0.0, "avg_logprob": -0.13366244633992513, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.00023340480402112007}, {"id": 106, "seek": 52100, "start": 535.0, "end": 541.0, "text": " and then there are two more, providing authentication.", "tokens": [293, 550, 456, 366, 732, 544, 11, 6530, 26643, 13], "temperature": 0.0, "avg_logprob": -0.13366244633992513, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.00023340480402112007}, {"id": 107, "seek": 52100, "start": 541.0, "end": 545.0, "text": " We have authentication mode with private key", "tokens": [492, 362, 26643, 4391, 365, 4551, 2141], "temperature": 0.0, "avg_logprob": -0.13366244633992513, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.00023340480402112007}, {"id": 108, "seek": 54500, "start": 545.0, "end": 551.0, "text": " or a pre-shared key in a PSK mode, or we can combine the both", "tokens": [420, 257, 659, 12, 2716, 1642, 2141, 294, 257, 8168, 42, 4391, 11, 420, 321, 393, 10432, 264, 1293], "temperature": 0.0, "avg_logprob": -0.18454636296918314, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.0005023136036470532}, {"id": 109, "seek": 54500, "start": 551.0, "end": 556.0, "text": " and have the old PSK mode.", "tokens": [293, 362, 264, 1331, 8168, 42, 4391, 13], "temperature": 0.0, "avg_logprob": -0.18454636296918314, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.0005023136036470532}, {"id": 110, "seek": 54500, "start": 556.0, "end": 558.0, "text": " What about the security?", "tokens": [708, 466, 264, 3825, 30], "temperature": 0.0, "avg_logprob": -0.18454636296918314, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.0005023136036470532}, {"id": 111, "seek": 54500, "start": 558.0, "end": 565.0, "text": " The base mode is programmed to be secure", "tokens": [440, 3096, 4391, 307, 31092, 281, 312, 7144], "temperature": 0.0, "avg_logprob": -0.18454636296918314, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.0005023136036470532}, {"id": 112, "seek": 54500, "start": 565.0, "end": 571.0, "text": " against indistinguishability ciphertext,", "tokens": [1970, 1016, 468, 7050, 742, 2310, 269, 21240, 25111, 11], "temperature": 0.0, "avg_logprob": -0.18454636296918314, "compression_ratio": 1.3541666666666667, "no_speech_prob": 0.0005023136036470532}, {"id": 113, "seek": 57100, "start": 571.0, "end": 577.0, "text": " and the authenticated modes are outside there and inside the CCS secure.", "tokens": [293, 264, 9214, 3587, 14068, 366, 2380, 456, 293, 1854, 264, 12630, 50, 7144, 13], "temperature": 0.0, "avg_logprob": -0.16767055887571522, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.00014593264495488256}, {"id": 114, "seek": 57100, "start": 577.0, "end": 584.0, "text": " Yeah, so, later on, you can find a report at the references.", "tokens": [865, 11, 370, 11, 1780, 322, 11, 291, 393, 915, 257, 2275, 412, 264, 15400, 13], "temperature": 0.0, "avg_logprob": -0.16767055887571522, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.00014593264495488256}, {"id": 115, "seek": 57100, "start": 584.0, "end": 590.0, "text": " So, let's move to the post-quantum stuff.", "tokens": [407, 11, 718, 311, 1286, 281, 264, 2183, 12, 358, 394, 449, 1507, 13], "temperature": 0.0, "avg_logprob": -0.16767055887571522, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.00014593264495488256}, {"id": 116, "seek": 57100, "start": 590.0, "end": 596.0, "text": " As I said before, the key encapsulation and the AEAD are separated.", "tokens": [1018, 286, 848, 949, 11, 264, 2141, 38745, 2776, 293, 264, 32207, 6112, 366, 12005, 13], "temperature": 0.0, "avg_logprob": -0.16767055887571522, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.00014593264495488256}, {"id": 117, "seek": 59600, "start": 596.0, "end": 602.0, "text": " So, to make it post-quantum, we can just put post-quantum algorithms", "tokens": [407, 11, 281, 652, 309, 2183, 12, 358, 394, 449, 11, 321, 393, 445, 829, 2183, 12, 358, 394, 449, 14642], "temperature": 0.0, "avg_logprob": -0.12380370464953748, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.000150936160935089}, {"id": 118, "seek": 59600, "start": 602.0, "end": 610.0, "text": " to the key encapsulation method, and we will get post-quantum HPK.", "tokens": [281, 264, 2141, 38745, 2776, 3170, 11, 293, 321, 486, 483, 2183, 12, 358, 394, 449, 12557, 42, 13], "temperature": 0.0, "avg_logprob": -0.12380370464953748, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.000150936160935089}, {"id": 119, "seek": 59600, "start": 610.0, "end": 613.0, "text": " The proposal was for kyber and psych,", "tokens": [440, 11494, 390, 337, 28740, 607, 293, 4681, 11], "temperature": 0.0, "avg_logprob": -0.12380370464953748, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.000150936160935089}, {"id": 120, "seek": 59600, "start": 613.0, "end": 617.0, "text": " but as most of you know, psych is already out of the game.", "tokens": [457, 382, 881, 295, 291, 458, 11, 4681, 307, 1217, 484, 295, 264, 1216, 13], "temperature": 0.0, "avg_logprob": -0.12380370464953748, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.000150936160935089}, {"id": 121, "seek": 59600, "start": 617.0, "end": 623.0, "text": " Kyber is one of the NIST finalists for key exchange methods.", "tokens": [12237, 607, 307, 472, 295, 264, 426, 19756, 2572, 1751, 337, 2141, 7742, 7150, 13], "temperature": 0.0, "avg_logprob": -0.12380370464953748, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.000150936160935089}, {"id": 122, "seek": 62300, "start": 623.0, "end": 630.0, "text": " It uses chem the same way instead of DH-style key exchange.", "tokens": [467, 4960, 4771, 264, 912, 636, 2602, 295, 28606, 12, 15014, 2141, 7742, 13], "temperature": 0.0, "avg_logprob": -0.2103375643491745, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.00022960282512940466}, {"id": 123, "seek": 62300, "start": 630.0, "end": 635.0, "text": " It is a lattice-based game standing upon learning with errors", "tokens": [467, 307, 257, 34011, 12, 6032, 1216, 4877, 3564, 2539, 365, 13603], "temperature": 0.0, "avg_logprob": -0.2103375643491745, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.00022960282512940466}, {"id": 124, "seek": 62300, "start": 635.0, "end": 645.0, "text": " and running problem, and kyber is proven to be IND CCS secure too.", "tokens": [293, 2614, 1154, 11, 293, 28740, 607, 307, 12785, 281, 312, 6892, 35, 12630, 50, 7144, 886, 13], "temperature": 0.0, "avg_logprob": -0.2103375643491745, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.00022960282512940466}, {"id": 125, "seek": 62300, "start": 645.0, "end": 650.0, "text": " Yeah, so we have this nice diagram again.", "tokens": [865, 11, 370, 321, 362, 341, 1481, 10686, 797, 13], "temperature": 0.0, "avg_logprob": -0.2103375643491745, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.00022960282512940466}, {"id": 126, "seek": 65000, "start": 650.0, "end": 653.0, "text": " There we can see hybrid version.", "tokens": [821, 321, 393, 536, 13051, 3037, 13], "temperature": 0.0, "avg_logprob": -0.09471196097296637, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.0013140395749360323}, {"id": 127, "seek": 65000, "start": 653.0, "end": 658.0, "text": " We have post-quantum only version of HPK and hybrid.", "tokens": [492, 362, 2183, 12, 358, 394, 449, 787, 3037, 295, 12557, 42, 293, 13051, 13], "temperature": 0.0, "avg_logprob": -0.09471196097296637, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.0013140395749360323}, {"id": 128, "seek": 65000, "start": 658.0, "end": 666.0, "text": " Hybrid uses post-quantum and the old algorithms too for the key encapsulation method.", "tokens": [47088, 4960, 2183, 12, 358, 394, 449, 293, 264, 1331, 14642, 886, 337, 264, 2141, 38745, 2776, 3170, 13], "temperature": 0.0, "avg_logprob": -0.09471196097296637, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.0013140395749360323}, {"id": 129, "seek": 65000, "start": 666.0, "end": 671.0, "text": " Like if one breaks, you can still have some security.", "tokens": [1743, 498, 472, 9857, 11, 291, 393, 920, 362, 512, 3825, 13], "temperature": 0.0, "avg_logprob": -0.09471196097296637, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.0013140395749360323}, {"id": 130, "seek": 65000, "start": 671.0, "end": 676.0, "text": " So, you can see gray boxes here.", "tokens": [407, 11, 291, 393, 536, 10855, 9002, 510, 13], "temperature": 0.0, "avg_logprob": -0.09471196097296637, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.0013140395749360323}, {"id": 131, "seek": 67600, "start": 676.0, "end": 683.0, "text": " These boxes are the old algorithms,", "tokens": [1981, 9002, 366, 264, 1331, 14642, 11], "temperature": 0.0, "avg_logprob": -0.14138544058497948, "compression_ratio": 1.5026737967914439, "no_speech_prob": 0.0001251604116987437}, {"id": 132, "seek": 67600, "start": 683.0, "end": 688.0, "text": " which means if we eliminate them, the post-quantum version will be visible.", "tokens": [597, 1355, 498, 321, 13819, 552, 11, 264, 2183, 12, 358, 394, 449, 3037, 486, 312, 8974, 13], "temperature": 0.0, "avg_logprob": -0.14138544058497948, "compression_ratio": 1.5026737967914439, "no_speech_prob": 0.0001251604116987437}, {"id": 133, "seek": 67600, "start": 688.0, "end": 694.0, "text": " That means the same way, so first I will go through the post-quantum.", "tokens": [663, 1355, 264, 912, 636, 11, 370, 700, 286, 486, 352, 807, 264, 2183, 12, 358, 394, 449, 13], "temperature": 0.0, "avg_logprob": -0.14138544058497948, "compression_ratio": 1.5026737967914439, "no_speech_prob": 0.0001251604116987437}, {"id": 134, "seek": 67600, "start": 694.0, "end": 701.0, "text": " The same way Bob generates the key pair prior HPK,", "tokens": [440, 912, 636, 6085, 23815, 264, 2141, 6119, 4059, 12557, 42, 11], "temperature": 0.0, "avg_logprob": -0.14138544058497948, "compression_ratio": 1.5026737967914439, "no_speech_prob": 0.0001251604116987437}, {"id": 135, "seek": 67600, "start": 701.0, "end": 705.0, "text": " and let's say that Alice already knows that key.", "tokens": [293, 718, 311, 584, 300, 16004, 1217, 3255, 300, 2141, 13], "temperature": 0.0, "avg_logprob": -0.14138544058497948, "compression_ratio": 1.5026737967914439, "no_speech_prob": 0.0001251604116987437}, {"id": 136, "seek": 70500, "start": 705.0, "end": 713.0, "text": " The difference here is that we don't do classical Diffie-Hellman,", "tokens": [440, 2649, 510, 307, 300, 321, 500, 380, 360, 13735, 413, 3661, 414, 12, 39, 898, 1601, 11], "temperature": 0.0, "avg_logprob": -0.16809995357806867, "compression_ratio": 1.3511450381679388, "no_speech_prob": 0.00023854947357904166}, {"id": 137, "seek": 70500, "start": 713.0, "end": 722.0, "text": " but we encrypt some random data and we will get a shared secret here.", "tokens": [457, 321, 17972, 662, 512, 4974, 1412, 293, 321, 486, 483, 257, 5507, 4054, 510, 13], "temperature": 0.0, "avg_logprob": -0.16809995357806867, "compression_ratio": 1.3511450381679388, "no_speech_prob": 0.00023854947357904166}, {"id": 138, "seek": 70500, "start": 722.0, "end": 732.0, "text": " And the ciphertext of that shared secret.", "tokens": [400, 264, 269, 21240, 25111, 295, 300, 5507, 4054, 13], "temperature": 0.0, "avg_logprob": -0.16809995357806867, "compression_ratio": 1.3511450381679388, "no_speech_prob": 0.00023854947357904166}, {"id": 139, "seek": 73200, "start": 732.0, "end": 737.0, "text": " Then we do the key derivation to get the common key,", "tokens": [1396, 321, 360, 264, 2141, 10151, 399, 281, 483, 264, 2689, 2141, 11], "temperature": 0.0, "avg_logprob": -0.09893590486966647, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.00039705762173980474}, {"id": 140, "seek": 73200, "start": 737.0, "end": 743.0, "text": " send over the ciphertext of the shared secret to Bob,", "tokens": [2845, 670, 264, 269, 21240, 25111, 295, 264, 5507, 4054, 281, 6085, 11], "temperature": 0.0, "avg_logprob": -0.09893590486966647, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.00039705762173980474}, {"id": 141, "seek": 73200, "start": 743.0, "end": 748.0, "text": " who can decrypt it and do the same here.", "tokens": [567, 393, 979, 627, 662, 309, 293, 360, 264, 912, 510, 13], "temperature": 0.0, "avg_logprob": -0.09893590486966647, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.00039705762173980474}, {"id": 142, "seek": 73200, "start": 748.0, "end": 755.0, "text": " And as you can see, everything else is the same as the basic HPK.", "tokens": [400, 382, 291, 393, 536, 11, 1203, 1646, 307, 264, 912, 382, 264, 3875, 12557, 42, 13], "temperature": 0.0, "avg_logprob": -0.09893590486966647, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.00039705762173980474}, {"id": 143, "seek": 75500, "start": 755.0, "end": 767.0, "text": " For the hybrid mode, the only difference is here.", "tokens": [1171, 264, 13051, 4391, 11, 264, 787, 2649, 307, 510, 13], "temperature": 0.0, "avg_logprob": -0.13901540344836666, "compression_ratio": 1.3125, "no_speech_prob": 0.00021917870617471635}, {"id": 144, "seek": 75500, "start": 767.0, "end": 776.0, "text": " So, for the KDF, the post-quantum and the basic shared secret is concatenated,", "tokens": [407, 11, 337, 264, 591, 35, 37, 11, 264, 2183, 12, 358, 394, 449, 293, 264, 3875, 5507, 4054, 307, 1588, 7186, 770, 11], "temperature": 0.0, "avg_logprob": -0.13901540344836666, "compression_ratio": 1.3125, "no_speech_prob": 0.00021917870617471635}, {"id": 145, "seek": 75500, "start": 776.0, "end": 781.0, "text": " and everything else should be the same.", "tokens": [293, 1203, 1646, 820, 312, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.13901540344836666, "compression_ratio": 1.3125, "no_speech_prob": 0.00021917870617471635}, {"id": 146, "seek": 78100, "start": 781.0, "end": 785.0, "text": " Okay, so what is the security of the post-quantum?", "tokens": [1033, 11, 370, 437, 307, 264, 3825, 295, 264, 2183, 12, 358, 394, 449, 30], "temperature": 0.0, "avg_logprob": -0.17377590787583502, "compression_ratio": 1.4387096774193548, "no_speech_prob": 0.0006902366876602173}, {"id": 147, "seek": 78100, "start": 785.0, "end": 790.0, "text": " In the base mode, it's still INCCI2 secure", "tokens": [682, 264, 3096, 4391, 11, 309, 311, 920, 6892, 11717, 40, 17, 7144], "temperature": 0.0, "avg_logprob": -0.17377590787583502, "compression_ratio": 1.4387096774193548, "no_speech_prob": 0.0006902366876602173}, {"id": 148, "seek": 78100, "start": 790.0, "end": 797.0, "text": " because the KM algorithm is proven to be INCCI2 secure.", "tokens": [570, 264, 591, 44, 9284, 307, 12785, 281, 312, 6892, 11717, 40, 17, 7144, 13], "temperature": 0.0, "avg_logprob": -0.17377590787583502, "compression_ratio": 1.4387096774193548, "no_speech_prob": 0.0006902366876602173}, {"id": 149, "seek": 78100, "start": 797.0, "end": 803.0, "text": " For the hybrid mode, it needs more proof because the concatenation there,", "tokens": [1171, 264, 13051, 4391, 11, 309, 2203, 544, 8177, 570, 264, 1588, 7186, 399, 456, 11], "temperature": 0.0, "avg_logprob": -0.17377590787583502, "compression_ratio": 1.4387096774193548, "no_speech_prob": 0.0006902366876602173}, {"id": 150, "seek": 80300, "start": 803.0, "end": 814.0, "text": " and the authentication for both hybrid and PQ only would need more work.", "tokens": [293, 264, 26643, 337, 1293, 13051, 293, 430, 48, 787, 576, 643, 544, 589, 13], "temperature": 0.0, "avg_logprob": -0.158893616994222, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.0007074612658470869}, {"id": 151, "seek": 80300, "start": 814.0, "end": 817.0, "text": " So, let's see some benchmarks.", "tokens": [407, 11, 718, 311, 536, 512, 43751, 13], "temperature": 0.0, "avg_logprob": -0.158893616994222, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.0007074612658470869}, {"id": 152, "seek": 80300, "start": 817.0, "end": 824.0, "text": " I got this benchmark from the paper, which you can see below.", "tokens": [286, 658, 341, 18927, 490, 264, 3035, 11, 597, 291, 393, 536, 2507, 13], "temperature": 0.0, "avg_logprob": -0.158893616994222, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.0007074612658470869}, {"id": 153, "seek": 82400, "start": 824.0, "end": 833.0, "text": " They were done on Intel Core E7 with 4 cores, 8 megabytes of cache and 8 megabytes of RAM,", "tokens": [814, 645, 1096, 322, 19762, 14798, 462, 22, 365, 1017, 24826, 11, 1649, 10816, 24538, 295, 19459, 293, 1649, 10816, 24538, 295, 14561, 11], "temperature": 0.0, "avg_logprob": -0.2425700621171431, "compression_ratio": 1.2483221476510067, "no_speech_prob": 0.0009798983810469508}, {"id": 154, "seek": 82400, "start": 833.0, "end": 841.0, "text": " using AWC LST, cryptographic library.", "tokens": [1228, 25815, 34, 441, 6840, 11, 9844, 12295, 6405, 13], "temperature": 0.0, "avg_logprob": -0.2425700621171431, "compression_ratio": 1.2483221476510067, "no_speech_prob": 0.0009798983810469508}, {"id": 155, "seek": 82400, "start": 841.0, "end": 849.0, "text": " And the environment, each algorithm was run 10,000 times,", "tokens": [400, 264, 2823, 11, 1184, 9284, 390, 1190, 1266, 11, 1360, 1413, 11], "temperature": 0.0, "avg_logprob": -0.2425700621171431, "compression_ratio": 1.2483221476510067, "no_speech_prob": 0.0009798983810469508}, {"id": 156, "seek": 84900, "start": 849.0, "end": 857.0, "text": " and the first and fourth quartile was eliminated of the measures to make it more accurate.", "tokens": [293, 264, 700, 293, 6409, 20837, 794, 390, 20308, 295, 264, 8000, 281, 652, 309, 544, 8559, 13], "temperature": 0.0, "avg_logprob": -0.10576100227160332, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.0002562134468462318}, {"id": 157, "seek": 84900, "start": 857.0, "end": 865.0, "text": " The measures are in CPU clock cycles, and I think it was medium or something like that.", "tokens": [440, 8000, 366, 294, 13199, 7830, 17796, 11, 293, 286, 519, 309, 390, 6399, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.10576100227160332, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.0002562134468462318}, {"id": 158, "seek": 84900, "start": 865.0, "end": 871.0, "text": " Okay, so here you can see Psyche, which is now eliminated,", "tokens": [1033, 11, 370, 510, 291, 393, 536, 430, 3187, 1876, 11, 597, 307, 586, 20308, 11], "temperature": 0.0, "avg_logprob": -0.10576100227160332, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.0002562134468462318}, {"id": 159, "seek": 84900, "start": 871.0, "end": 878.0, "text": " but I think it's a nice reference that it was a lot slower.", "tokens": [457, 286, 519, 309, 311, 257, 1481, 6408, 300, 309, 390, 257, 688, 14009, 13], "temperature": 0.0, "avg_logprob": -0.10576100227160332, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.0002562134468462318}, {"id": 160, "seek": 87800, "start": 878.0, "end": 887.0, "text": " So, this blue one is the basic Edward curve, like the basic HPK,", "tokens": [407, 11, 341, 3344, 472, 307, 264, 3875, 18456, 7605, 11, 411, 264, 3875, 12557, 42, 11], "temperature": 0.0, "avg_logprob": -0.2042728000217014, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.00042312301229685545}, {"id": 161, "seek": 87800, "start": 887.0, "end": 898.0, "text": " then the green one is a hybrid one, and yeah, here the yellow is kyber only.", "tokens": [550, 264, 3092, 472, 307, 257, 13051, 472, 11, 293, 1338, 11, 510, 264, 5566, 307, 28740, 607, 787, 13], "temperature": 0.0, "avg_logprob": -0.2042728000217014, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.00042312301229685545}, {"id": 162, "seek": 87800, "start": 898.0, "end": 906.0, "text": " And as you can see, it is faster than the Edward curve, which is interesting.", "tokens": [400, 382, 291, 393, 536, 11, 309, 307, 4663, 813, 264, 18456, 7605, 11, 597, 307, 1880, 13], "temperature": 0.0, "avg_logprob": -0.2042728000217014, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.00042312301229685545}, {"id": 163, "seek": 90600, "start": 906.0, "end": 909.0, "text": " Then there is one more graph.", "tokens": [1396, 456, 307, 472, 544, 4295, 13], "temperature": 0.0, "avg_logprob": -0.14868446566023916, "compression_ratio": 1.4785714285714286, "no_speech_prob": 0.00013731997751165181}, {"id": 164, "seek": 90600, "start": 909.0, "end": 921.0, "text": " Here you can see the green lines, which tells us that the ky encapsulation method is constant time,", "tokens": [1692, 291, 393, 536, 264, 3092, 3876, 11, 597, 5112, 505, 300, 264, 28740, 38745, 2776, 3170, 307, 5754, 565, 11], "temperature": 0.0, "avg_logprob": -0.14868446566023916, "compression_ratio": 1.4785714285714286, "no_speech_prob": 0.00013731997751165181}, {"id": 165, "seek": 90600, "start": 921.0, "end": 927.0, "text": " so it doesn't constant in a way that it doesn't affect the encryption itself,", "tokens": [370, 309, 1177, 380, 5754, 294, 257, 636, 300, 309, 1177, 380, 3345, 264, 29575, 2564, 11], "temperature": 0.0, "avg_logprob": -0.14868446566023916, "compression_ratio": 1.4785714285714286, "no_speech_prob": 0.00013731997751165181}, {"id": 166, "seek": 92700, "start": 927.0, "end": 938.0, "text": " because the tests were done for data encryption for 1 kilobyte of data, 10 kilobyte, 100 kilobyte, and 1 megabyte of data.", "tokens": [570, 264, 6921, 645, 1096, 337, 1412, 29575, 337, 502, 5128, 13944, 975, 295, 1412, 11, 1266, 5128, 13944, 975, 11, 2319, 5128, 13944, 975, 11, 293, 502, 10816, 34529, 295, 1412, 13], "temperature": 0.0, "avg_logprob": -0.11025831979863784, "compression_ratio": 1.608695652173913, "no_speech_prob": 1.8560895114205778e-05}, {"id": 167, "seek": 92700, "start": 938.0, "end": 945.0, "text": " So, as you can see, the cost is more on the encryption of the data itself.", "tokens": [407, 11, 382, 291, 393, 536, 11, 264, 2063, 307, 544, 322, 264, 29575, 295, 264, 1412, 2564, 13], "temperature": 0.0, "avg_logprob": -0.11025831979863784, "compression_ratio": 1.608695652173913, "no_speech_prob": 1.8560895114205778e-05}, {"id": 168, "seek": 92700, "start": 945.0, "end": 948.0, "text": " So, there is a red line.", "tokens": [407, 11, 456, 307, 257, 2182, 1622, 13], "temperature": 0.0, "avg_logprob": -0.11025831979863784, "compression_ratio": 1.608695652173913, "no_speech_prob": 1.8560895114205778e-05}, {"id": 169, "seek": 94800, "start": 948.0, "end": 962.0, "text": " You can see that's for reference. This is a version of LSA encrypting 240 bytes of data.", "tokens": [509, 393, 536, 300, 311, 337, 6408, 13, 639, 307, 257, 3037, 295, 441, 8886, 17972, 662, 278, 26837, 36088, 295, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15426437943070023, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00017508925520814955}, {"id": 170, "seek": 94800, "start": 962.0, "end": 966.0, "text": " Yeah, so here you can see references if you want to read more about it,", "tokens": [865, 11, 370, 510, 291, 393, 536, 15400, 498, 291, 528, 281, 1401, 544, 466, 309, 11], "temperature": 0.0, "avg_logprob": -0.15426437943070023, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00017508925520814955}, {"id": 171, "seek": 94800, "start": 966.0, "end": 968.0, "text": " and thank you for attention.", "tokens": [293, 1309, 291, 337, 3202, 13], "temperature": 0.0, "avg_logprob": -0.15426437943070023, "compression_ratio": 1.3597122302158273, "no_speech_prob": 0.00017508925520814955}, {"id": 172, "seek": 96800, "start": 968.0, "end": 980.0, "text": " So, any questions?", "tokens": [407, 11, 604, 1651, 30], "temperature": 0.0, "avg_logprob": -0.12068602442741394, "compression_ratio": 1.3464566929133859, "no_speech_prob": 0.000705551472492516}, {"id": 173, "seek": 96800, "start": 980.0, "end": 986.0, "text": " We had some questions on metrics, so I will try to read it.", "tokens": [492, 632, 512, 1651, 322, 16367, 11, 370, 286, 486, 853, 281, 1401, 309, 13], "temperature": 0.0, "avg_logprob": -0.12068602442741394, "compression_ratio": 1.3464566929133859, "no_speech_prob": 0.000705551472492516}, {"id": 174, "seek": 96800, "start": 986.0, "end": 992.0, "text": " The question was, how do we make quantum resistant crypto work on constrained devices?", "tokens": [440, 1168, 390, 11, 577, 360, 321, 652, 13018, 20383, 17240, 589, 322, 38901, 5759, 30], "temperature": 0.0, "avg_logprob": -0.12068602442741394, "compression_ratio": 1.3464566929133859, "no_speech_prob": 0.000705551472492516}, {"id": 175, "seek": 96800, "start": 992.0, "end": 993.0, "text": " What?", "tokens": [708, 30], "temperature": 0.0, "avg_logprob": -0.12068602442741394, "compression_ratio": 1.3464566929133859, "no_speech_prob": 0.000705551472492516}, {"id": 176, "seek": 99300, "start": 993.0, "end": 1011.0, "text": " How do we make quantum resistant crypto work on constrained devices?", "tokens": [1012, 360, 321, 652, 13018, 20383, 17240, 589, 322, 38901, 5759, 30], "temperature": 0.0, "avg_logprob": -0.24494185814490685, "compression_ratio": 1.221311475409836, "no_speech_prob": 0.00025384800392203033}, {"id": 177, "seek": 99300, "start": 1011.0, "end": 1016.0, "text": " Well, that's a good question. I don't know the answer before, so sorry for that.", "tokens": [1042, 11, 300, 311, 257, 665, 1168, 13, 286, 500, 380, 458, 264, 1867, 949, 11, 370, 2597, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.24494185814490685, "compression_ratio": 1.221311475409836, "no_speech_prob": 0.00025384800392203033}, {"id": 178, "seek": 101600, "start": 1016.0, "end": 1027.0, "text": " Okay, so any other question in here?", "tokens": [1033, 11, 370, 604, 661, 1168, 294, 510, 30], "temperature": 0.0, "avg_logprob": -0.12961547034127371, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.0003844579914584756}, {"id": 179, "seek": 101600, "start": 1027.0, "end": 1032.0, "text": " Thank you. The last slide, I think page 15, you showed some benchmarks,", "tokens": [1044, 291, 13, 440, 1036, 4137, 11, 286, 519, 3028, 2119, 11, 291, 4712, 512, 43751, 11], "temperature": 0.0, "avg_logprob": -0.12961547034127371, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.0003844579914584756}, {"id": 180, "seek": 101600, "start": 1032.0, "end": 1035.0, "text": " but these are on the whole encryption, right?", "tokens": [457, 613, 366, 322, 264, 1379, 29575, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12961547034127371, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.0003844579914584756}, {"id": 181, "seek": 101600, "start": 1035.0, "end": 1041.0, "text": " Like, not only the exchange of the keys and the setup of the symmetry key, but the whole exchange, right?", "tokens": [1743, 11, 406, 787, 264, 7742, 295, 264, 9317, 293, 264, 8657, 295, 264, 25440, 2141, 11, 457, 264, 1379, 7742, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12961547034127371, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.0003844579914584756}, {"id": 182, "seek": 104100, "start": 1041.0, "end": 1047.0, "text": " They are both. So, as you can see, the green line is like the key exchange itself,", "tokens": [814, 366, 1293, 13, 407, 11, 382, 291, 393, 536, 11, 264, 3092, 1622, 307, 411, 264, 2141, 7742, 2564, 11], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 183, "seek": 104100, "start": 1047.0, "end": 1051.0, "text": " and then you have like the seal and the open operation here.", "tokens": [293, 550, 291, 362, 411, 264, 12185, 293, 264, 1269, 6916, 510, 13], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 184, "seek": 104100, "start": 1051.0, "end": 1057.0, "text": " So, it's, if you take, for example, one message and one key exchange,", "tokens": [407, 11, 309, 311, 11, 498, 291, 747, 11, 337, 1365, 11, 472, 3636, 293, 472, 2141, 7742, 11], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 185, "seek": 104100, "start": 1057.0, "end": 1060.0, "text": " that's what the benchmark says, like it's together.", "tokens": [300, 311, 437, 264, 18927, 1619, 11, 411, 309, 311, 1214, 13], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 186, "seek": 104100, "start": 1060.0, "end": 1066.0, "text": " Yeah, okay, all right. Which was expected, because anyway, the quantum,", "tokens": [865, 11, 1392, 11, 439, 558, 13, 3013, 390, 5176, 11, 570, 4033, 11, 264, 13018, 11], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 187, "seek": 104100, "start": 1066.0, "end": 1070.0, "text": " the post quantum part is only in the beginning of the exchange.", "tokens": [264, 2183, 13018, 644, 307, 787, 294, 264, 2863, 295, 264, 7742, 13], "temperature": 0.0, "avg_logprob": -0.1553444293660855, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.0020247132051736116}, {"id": 188, "seek": 107000, "start": 1070.0, "end": 1078.0, "text": " And then when the symmetry key is established, you continue with using your EEAD.", "tokens": [400, 550, 562, 264, 25440, 2141, 307, 7545, 11, 291, 2354, 365, 1228, 428, 33685, 6112, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 189, "seek": 107000, "start": 1078.0, "end": 1079.0, "text": " Yes, that's correct.", "tokens": [1079, 11, 300, 311, 3006, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 190, "seek": 107000, "start": 1079.0, "end": 1080.0, "text": " All right, thanks.", "tokens": [1057, 558, 11, 3231, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 191, "seek": 107000, "start": 1080.0, "end": 1086.0, "text": " So, the post quantum part is only at the K exchange, and later on it is the same.", "tokens": [407, 11, 264, 2183, 13018, 644, 307, 787, 412, 264, 591, 7742, 11, 293, 1780, 322, 309, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 192, "seek": 107000, "start": 1086.0, "end": 1088.0, "text": " Okay, any other question?", "tokens": [1033, 11, 604, 661, 1168, 30], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 193, "seek": 107000, "start": 1088.0, "end": 1094.0, "text": " Yeah, I just wanted to say that the post quantum is more about like asymmetric keys.", "tokens": [865, 11, 286, 445, 1415, 281, 584, 300, 264, 2183, 13018, 307, 544, 466, 411, 37277, 17475, 9317, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 194, "seek": 107000, "start": 1094.0, "end": 1099.0, "text": " It doesn't really affect the symmetric part, so it's okay.", "tokens": [467, 1177, 380, 534, 3345, 264, 32330, 644, 11, 370, 309, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.12094891988314115, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.000332469935528934}, {"id": 195, "seek": 109900, "start": 1099.0, "end": 1103.0, "text": " Any other question around here?", "tokens": [2639, 661, 1168, 926, 510, 30], "temperature": 0.0, "avg_logprob": -0.2359112770326676, "compression_ratio": 1.2528735632183907, "no_speech_prob": 0.00010845462384168059}, {"id": 196, "seek": 109900, "start": 1103.0, "end": 1107.0, "text": " If not, we can probably, thank you for the talk, thank you for the questions.", "tokens": [759, 406, 11, 321, 393, 1391, 11, 1309, 291, 337, 264, 751, 11, 1309, 291, 337, 264, 1651, 13], "temperature": 0.0, "avg_logprob": -0.2359112770326676, "compression_ratio": 1.2528735632183907, "no_speech_prob": 0.00010845462384168059}, {"id": 197, "seek": 110700, "start": 1107.0, "end": 1133.0, "text": " Thank you for coming.", "tokens": [50364, 1044, 291, 337, 1348, 13, 51664], "temperature": 0.0, "avg_logprob": -0.40151965618133545, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.0015529149677604437}], "language": "en"}