{"text": " Okay. Hello, everybody. So, my name is Doji. I work in the tools group at Red Hat. And so we're here today to, okay, first of all, thank you for staying. So, yeah, I wanted to talk about application binary interface analysis today. And, okay, first of all, who doesn't know about Lubabigel and ABI stuff? So, okay, so I think we'll have something for you guys. So, what are we going to talk about? So, first of all, I'll introduce what ABIgel is, and we'll look at how it works, what the project brought recently, and what we're looking for as far as the future goes. So, ABIgel is about doing analysis of application binary interfaces. So, it's a set of tools that can do things like compare the ABI of two binaries, or store the ABI of a binary onto a, you know, disk format. It can do comparison of binaries, you know, that are in packages, like Debian packages, RPMs, star files, etc. And it is also a shared library that you can use to write more tools if you want. So, that's all well and nice as far as marketing goes, but then let's look at, you know, what we mean by ABI. So, suppose you have a simple program, well, a simple binary which has, okay, simple, no, very complicated, let's say, which has, you know, three functions that are here. The types of the functions are defined here in a simple hierarchy. Here you have the first type that inherits, you know, S0 which inherits base type, and let's say another type here that inherits S0. Okay. So, that's the first version of it. Let's see if, I don't know if it compiles. Yes, it does. Then I have a second version of it which looks quite the same, but, okay, what does it do? Okay, what's the difference between the two? Very simple. I just inserted a, you know, data memba in the base class, and we want to know what the impact of this is on the ABI, you know, as far as the binary goes. So, where am I here? I'm in the source code of the project, and so I've built a version of it. And so, here we have one of the tools which name is ABI diff, which does what you think it does. And so, if I run it, what does it say? Basically, there are two changes as far as ABI goes in that battery due to the change of sin. So, the first change is about, you know, the first function which is here. And so, it is telling us basically that that function has a parameter type that changed. And the change is about this, you know, structure, remember? Something is interesting. The size hasn't changed, even though I've added, you know, a data member in there. So, yeah, you know the drill, right? If you don't, I can, you know, explain it more. But size hasn't changed. The base class has changed, and the change here is a data member insertion at a certain offset, blah, blah, blah. So, this is the impact of the change of the first type on the first interface, right? And so, there is another interface that got impacted, right? And the parameter of that function, which was struct s1, changed as well. The base class changed. The base class was struct s0, right? And the details of s0 change were reported earlier. So, we don't have to, you know, repeat it again, right? So, here you see that we compute the changes, right? And we also analyze those changes so that we can detect if things have been, you know, reported earlier or not. And also, we mess up with more stuff, because here we say, for instance, that there were two changes, for instance. But one got filtered out. What does that mean? So, let's see, for instance, if I recall the... Okay, I'll add a special... So, I've asked ABIDF to show me what, you know, to show me redundant changes, because by default it removes redundant changes. And we see that we have the third function that was impacted as well by, you know, the change we created. And so, well, all the changes that, you know, impact function three were already reported. So, this is why it was suppressed. That change was suppressed by default, because it was redundant. So, it's not just... We're not just diffing things. We're analyzing the diffs, and we're trying to, you know, massage those diffs so that they can be consumed by human beings. So, this is what we mean by analyzing ABI's, basically. So, how it works. The library used to implement the tools has a front-end, which is kind of backward. The front-end reads the binary. Usually, it is back-ends that writes binaries, but, okay, here, backward. So, we read the binary, which has to be in the ELF format right now, and we build an internal representation of it. We look at the publicly defined and exported symbols of, you know, declarations, basically functions and variables. We build a representation of them and their types. And then, we construct the graph of the types like that and their subtypes, and we pull all that together, and we call that an ABI corpus. A corpus is an artifact for us that represents the ABI of the binary we were looking at. And so, there is a middle-end that acts on that internal representation. Said otherwise, it acts on ABI corpora. Corpora being the plural of corpus in Latin, right? Let's be pedantic. So, we can, as you've seen, compare two instances of ABI corpus. Then, we build an internal representation of the result of the comparison. We call that an diff IR. So, it's a different IR. And then, we perform transformations on that diff IR, like categorization. So, we would walk the graph and say, okay, this diff node, we've seen it before. So, we'll mark it as being redundant to this other one. And then, they can be, you know, transformations that are suppression as well. Well, suppression. We will mark the nodes as being suppressed. For instance, because the user wrote something that we call a suppression specification file requiring that some types changes might not be reported. So, once we have that well-massaged diff IR, we have backends that walk that diff IR, obviously, or the initial IR and do useful stuff, like writing, you know, emitting reports, for instance, or emitting, you know, the representation of the ABI corpus in a disk-saved format that we called ABI XML. So, what we've done recently, so I'm going, you know, a bit fast because, you know, to let time for questions and stuff, and we can go on and, let's say, not very structured discussion afterwards, if you like. So, yeah, in the recent times, what we've done is, well, you know Dwarf, you know that it changes all the time with new versions of Dwarf producers. So, with GCC-11 and LLVN-14, the default Dwarf version was bumped to the version 5, which is quite ancient, actually. I think it was released in 2017 or something. So, yeah, we support most of that right now. And another major thing that happened recently was that thanks to folks in this room that I won't, don't worry, I won't give your name. New debug info format were added because, yeah, we started with Dwarf only. And so, the CTF debug info format was, support was added to the Babigel. So, basically now, if you have a binary having CTF and or Dwarf, you can choose whatever you want to use as a source of type information. So, things being how they are, the code got changed a bit to, you know, to be turned into a multi front-end architecture. We also have a multi backend architecture, basically, because we have different types of reports. The one I've shown you is the default one, which is quite verbose. So, some people like it more terse. So, yeah. And who knows whatever weird request users might come with in the future. So, yeah. Different report backends. And, well, it's not, doesn't stop there. We are still working on, you know, on new stuff while coming from user request. So, yeah, the, apparently the new kids on the block, well, new kids in town now, cool stuff is BPF, right? And with BPF comes BTF, which is the type description format of BPF. And so, there were some requests to support that. So, it is now in mainline, even though it's not in Babigel mainline, but it's not released yet. It should be released in the next version. So, what do we do with that? What's that thing? Basically, because BTF describes the C types, basically, we are using that to compare the interface exposed by the kernel to its modules. So, we're doing that with CTF already, with BTF now, and also with DWARF. With DWARF, it is much less fast, shall we say, than with the CTF support and BTF. So, people can, people are using that feature to, you know, analyze the KABI, basically, kernel ABI, that thing that doesn't exist. And then we've had, you know, weird project specific request over the year. And the last one that, you know, came in last month, I say, or yeah, yeah, last month, yeah, in January, was to have a, I call that the library set ABI analysis. So, basically, it's a project that has a huge library, a huge library, and they're planning to split it in different libraries, right? But then they keep ABI compatibility, they're supposed to. And so, they would like to ensure that the set of, you know, broken down libraries has an ABI that is equivalent or compatible with the first initial one. This is what I, you know, call the library set ABI analysis. So, we're going to add support for that in, I don't know if it's going to be in the next version or not. So, yeah, these are the kinds of things we are, we're working on. So, yeah. And now, I'll let you ask questions if you, if you have any, yeah. Does the library have any support for language specific ABI? So, languages are good on top of C, for example, but they have language schemes? Yeah, exactly. So, yes. So, there, of course, DWARF is multi-language. So, if the compiler of that language emits DWARF, then we're good to go. There is a small layer of language specific stuff we add, you know, for reporting so that we can talk, report stuff in the native language of the programmer, you know, who wrote the thing. So, to give you a concrete example, right now, we support C++, C, Fortran. Someone asked me for Rust support. So, we had that, basically. We have some crashes on OCaml. So, I thought we were supporting it, too, but I need to do some stuff. So, yeah. Basically, yeah. It needs work, but... The new language, I just have to define a small layer for the mangling logic. For the mangling logic. So, okay. I can show you, let me show you an example. So, yeah. I was writing. So, yeah. Let's see. So, you see, for instance, in C++, we'll compare, so here, you see this function, the function 3. I'll change it in the second version here, function 3, and add, and I'll add an integer here, right? Yes. Let's, whoops. We compile that, whoops. And, whoops. Weird stuff happened. So, look at what it is saying here. So, you see here, because we're in C++, I changed function 3 in the source code. Yeah. Let me just, yeah. See? I changed function 3 here, and I added a parameter, you know? That's what the programmer would say. But then, from the binary standpoint, what we're seeing is that the first function was removed, and then another one got added. This is because in C++, the name of the symbols of the two functions, the two versions of the functions, are different. They have a different mangling, okay? So, we go to, we go from the name of the symbol to the name of the declaration, right? So, but if I do the same in C, then, like, yeah, I knew you would ask that question. I don't know you, but, so, and I have second version here. Boom, boom, boom. And, so, here, some, oh, sorry. I changed the name of, sorry, I changed the parameter of the function there, but this is in C, okay? And so, if I go in the, ah, sorry, if I go in the shell and I look at, boom, at the two, so, this is, the first one was hello, and this one is bye, of course, because I think this is going to be the last C here, because in C, the name of the two symbols are the same. Now, we say that the function has changed. So, these are the kind of things that we'll have to adapt, basically, but there is not much to do. In some cases, you have mangling, and in the others, other cases, you don't. So, you don't have anything to do with the, for the mangling, the, you know, does that answer your question? Roughly. Roughly, yeah. You have this code, part of the code, which decodes the mangled name to an unreadable name. No, no, because the, the, the, the matching is done by dwarf. So, we know that this symbol is for this declaration. So, we don't have to do the mangling, the mangling or demangling. We, you know, we'll look at the addresses and we know that this symbol is for that one. So, yeah, we don't really care about, yeah. Another, yeah, please go ahead. Oh, there is none. No, no, no, no, no, no, no, no, it's, so, yeah, I, just to, to refresh the question, to repeat the question for the, yeah. What are the performance issues, you know, when we analyze, like, big libraries, like, you know, he said, I love VM, but, you know, there is WebKit, Gecko, etc., etc. So, we have a, when we're looking at, when we're looking at dwarf, we have a fundamental problem, which is the duplication of types. Here we are in the business of comparing things, right? And so, when we compare types, basically, we are in a, the, the land of quadratic algorithms, right? So, things are inherently slow if we do them naively, right? And so, the thing is, in dwarf, every single type unit is represented. But then, when you have a, the final binary, the final shell library, for instance, and you have, I don't know, you know, 1,000 translation units, and in every single translation unit, you had the string type, for instance, that was used. Then, you will have the string, the string type represented 1,000 times, at least, you know, in the, in the, in the dwarf. And so, we must be sure that those 100 occurrences of string are the one and the same. We can't just look at the name and say they're the same, because they could be otherwise, right? And so, we have to compare them and make sure they're the same, and then we'll say, okay, I'll just keep one and throw away the others. This is the duplication of type, it is called. And so, this process takes a huge amount of time, which is, well, for, for huge libraries, it can take, you know, it can take forever. So, we have heuristics to make this thing, you know, be faster, but then, you know, it takes time. So, we have some of the heuristics that we're using now are, is in the land of partitioning, like we will do things, you know, like piecewise, and, and try it so that we can do things in parallel, right? It is not mainline yet, but this is the, you know, the, the future we're, we're thinking about. Another approach is to have the types be de-duplicated before we intervene. This is what, for instance, the CTF guys do with C. So, they will do the de-duplication at debug info production time, and then in that, in that case, we're golden. There is another, another case where we're doing that is when we're building distribution packages, like, for instance, I don't know, RPM or Debian package or whatever, there is a tool which is called DWZ, which does the de-duplication to one extent. Well, when it works, it works. It does the de-duplication, but the problem is DWZ has the same issue as us, and sometimes when the binary is too big, DWZ will just give up, and in that case, well, we have to use our little hands and do the de-duplication in line, and then, well, we'll spend time. But this because someone should get DWZ, turn it into a library and put it in the linker? Yes, and, yes. Do it in link time? Yeah, we can, yeah, that's, that's something that, that's one of the things that we need to do to improve the entire ecosystem of these things, and, yeah, that's definitely, yeah. So, yeah. So, as, do we have other questions? Yes, are there any other formats that are on your road map? Right now, no, but, you know, like, three months ago, BTF was not on my road map, so, you know, the future is not what it used to be, so, I don't know, yeah. Anyway, so, yeah, we are on, hosted on Sourceware, we still use mailing lists, you send us patches, and yeah, you can find us on IRC, on the, on the, of this network, and, well, thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.0, "text": " Okay. Hello, everybody. So, my name is Doji. I work in the tools group at Red Hat. And", "tokens": [1033, 13, 2425, 11, 2201, 13, 407, 11, 452, 1315, 307, 1144, 4013, 13, 286, 589, 294, 264, 3873, 1594, 412, 4477, 15867, 13, 400], "temperature": 0.0, "avg_logprob": -0.25926962765780365, "compression_ratio": 1.2374100719424461, "no_speech_prob": 0.2021426558494568}, {"id": 1, "seek": 0, "start": 17.0, "end": 24.8, "text": " so we're here today to, okay, first of all, thank you for staying. So, yeah, I wanted", "tokens": [370, 321, 434, 510, 965, 281, 11, 1392, 11, 700, 295, 439, 11, 1309, 291, 337, 7939, 13, 407, 11, 1338, 11, 286, 1415], "temperature": 0.0, "avg_logprob": -0.25926962765780365, "compression_ratio": 1.2374100719424461, "no_speech_prob": 0.2021426558494568}, {"id": 2, "seek": 2480, "start": 24.8, "end": 34.72, "text": " to talk about application binary interface analysis today. And, okay, first of all, who", "tokens": [281, 751, 466, 3861, 17434, 9226, 5215, 965, 13, 400, 11, 1392, 11, 700, 295, 439, 11, 567], "temperature": 0.0, "avg_logprob": -0.19777287663640203, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.00017688381194602698}, {"id": 3, "seek": 2480, "start": 34.72, "end": 44.92, "text": " doesn't know about Lubabigel and ABI stuff? So, okay, so I think we'll have something", "tokens": [1177, 380, 458, 466, 43781, 455, 328, 338, 293, 316, 11291, 1507, 30, 407, 11, 1392, 11, 370, 286, 519, 321, 603, 362, 746], "temperature": 0.0, "avg_logprob": -0.19777287663640203, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.00017688381194602698}, {"id": 4, "seek": 2480, "start": 44.92, "end": 52.480000000000004, "text": " for you guys. So, what are we going to talk about? So, first of all, I'll introduce what", "tokens": [337, 291, 1074, 13, 407, 11, 437, 366, 321, 516, 281, 751, 466, 30, 407, 11, 700, 295, 439, 11, 286, 603, 5366, 437], "temperature": 0.0, "avg_logprob": -0.19777287663640203, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.00017688381194602698}, {"id": 5, "seek": 5248, "start": 52.48, "end": 62.48, "text": " ABIgel is, and we'll look at how it works, what the project brought recently, and what", "tokens": [316, 11291, 10345, 307, 11, 293, 321, 603, 574, 412, 577, 309, 1985, 11, 437, 264, 1716, 3038, 3938, 11, 293, 437], "temperature": 0.0, "avg_logprob": -0.12157370946178697, "compression_ratio": 1.4916201117318435, "no_speech_prob": 4.922590233036317e-05}, {"id": 6, "seek": 5248, "start": 62.48, "end": 72.75999999999999, "text": " we're looking for as far as the future goes. So, ABIgel is about doing analysis of application", "tokens": [321, 434, 1237, 337, 382, 1400, 382, 264, 2027, 1709, 13, 407, 11, 316, 11291, 10345, 307, 466, 884, 5215, 295, 3861], "temperature": 0.0, "avg_logprob": -0.12157370946178697, "compression_ratio": 1.4916201117318435, "no_speech_prob": 4.922590233036317e-05}, {"id": 7, "seek": 5248, "start": 72.75999999999999, "end": 81.47999999999999, "text": " binary interfaces. So, it's a set of tools that can do things like compare the ABI of", "tokens": [17434, 28416, 13, 407, 11, 309, 311, 257, 992, 295, 3873, 300, 393, 360, 721, 411, 6794, 264, 316, 11291, 295], "temperature": 0.0, "avg_logprob": -0.12157370946178697, "compression_ratio": 1.4916201117318435, "no_speech_prob": 4.922590233036317e-05}, {"id": 8, "seek": 8148, "start": 81.48, "end": 94.16, "text": " two binaries, or store the ABI of a binary onto a, you know, disk format. It can do comparison", "tokens": [732, 5171, 4889, 11, 420, 3531, 264, 316, 11291, 295, 257, 17434, 3911, 257, 11, 291, 458, 11, 12355, 7877, 13, 467, 393, 360, 9660], "temperature": 0.0, "avg_logprob": -0.2593855176653181, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.00012663687812164426}, {"id": 9, "seek": 8148, "start": 94.16, "end": 103.4, "text": " of binaries, you know, that are in packages, like Debian packages, RPMs, star files, etc.", "tokens": [295, 5171, 4889, 11, 291, 458, 11, 300, 366, 294, 17401, 11, 411, 1346, 20196, 17401, 11, 14105, 26386, 11, 3543, 7098, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.2593855176653181, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.00012663687812164426}, {"id": 10, "seek": 10340, "start": 103.4, "end": 113.60000000000001, "text": " And it is also a shared library that you can use to write more tools if you want. So, that's", "tokens": [400, 309, 307, 611, 257, 5507, 6405, 300, 291, 393, 764, 281, 2464, 544, 3873, 498, 291, 528, 13, 407, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.1434361139933268, "compression_ratio": 1.4775280898876404, "no_speech_prob": 4.930118302581832e-05}, {"id": 11, "seek": 10340, "start": 113.60000000000001, "end": 119.52000000000001, "text": " all well and nice as far as marketing goes, but then let's look at, you know, what we", "tokens": [439, 731, 293, 1481, 382, 1400, 382, 6370, 1709, 11, 457, 550, 718, 311, 574, 412, 11, 291, 458, 11, 437, 321], "temperature": 0.0, "avg_logprob": -0.1434361139933268, "compression_ratio": 1.4775280898876404, "no_speech_prob": 4.930118302581832e-05}, {"id": 12, "seek": 10340, "start": 119.52000000000001, "end": 126.24000000000001, "text": " mean by ABI. So, suppose you have a simple program, well, a simple binary which has,", "tokens": [914, 538, 316, 11291, 13, 407, 11, 7297, 291, 362, 257, 2199, 1461, 11, 731, 11, 257, 2199, 17434, 597, 575, 11], "temperature": 0.0, "avg_logprob": -0.1434361139933268, "compression_ratio": 1.4775280898876404, "no_speech_prob": 4.930118302581832e-05}, {"id": 13, "seek": 12624, "start": 126.24, "end": 133.96, "text": " okay, simple, no, very complicated, let's say, which has, you know, three functions", "tokens": [1392, 11, 2199, 11, 572, 11, 588, 6179, 11, 718, 311, 584, 11, 597, 575, 11, 291, 458, 11, 1045, 6828], "temperature": 0.0, "avg_logprob": -0.16508876255580357, "compression_ratio": 1.6024844720496894, "no_speech_prob": 0.00019575141777750105}, {"id": 14, "seek": 12624, "start": 133.96, "end": 141.28, "text": " that are here. The types of the functions are defined here in a simple hierarchy. Here", "tokens": [300, 366, 510, 13, 440, 3467, 295, 264, 6828, 366, 7642, 510, 294, 257, 2199, 22333, 13, 1692], "temperature": 0.0, "avg_logprob": -0.16508876255580357, "compression_ratio": 1.6024844720496894, "no_speech_prob": 0.00019575141777750105}, {"id": 15, "seek": 12624, "start": 141.28, "end": 147.76, "text": " you have the first type that inherits, you know, S0 which inherits base type, and let's", "tokens": [291, 362, 264, 700, 2010, 300, 9484, 1208, 11, 291, 458, 11, 318, 15, 597, 9484, 1208, 3096, 2010, 11, 293, 718, 311], "temperature": 0.0, "avg_logprob": -0.16508876255580357, "compression_ratio": 1.6024844720496894, "no_speech_prob": 0.00019575141777750105}, {"id": 16, "seek": 14776, "start": 147.76, "end": 159.84, "text": " say another type here that inherits S0. Okay. So, that's the first version of it. Let's", "tokens": [584, 1071, 2010, 510, 300, 9484, 1208, 318, 15, 13, 1033, 13, 407, 11, 300, 311, 264, 700, 3037, 295, 309, 13, 961, 311], "temperature": 0.0, "avg_logprob": -0.10964204088042054, "compression_ratio": 1.4640883977900552, "no_speech_prob": 3.688811193569563e-05}, {"id": 17, "seek": 14776, "start": 159.84, "end": 168.0, "text": " see if, I don't know if it compiles. Yes, it does. Then I have a second version of it", "tokens": [536, 498, 11, 286, 500, 380, 458, 498, 309, 715, 4680, 13, 1079, 11, 309, 775, 13, 1396, 286, 362, 257, 1150, 3037, 295, 309], "temperature": 0.0, "avg_logprob": -0.10964204088042054, "compression_ratio": 1.4640883977900552, "no_speech_prob": 3.688811193569563e-05}, {"id": 18, "seek": 14776, "start": 168.0, "end": 174.39999999999998, "text": " which looks quite the same, but, okay, what does it do? Okay, what's the difference between", "tokens": [597, 1542, 1596, 264, 912, 11, 457, 11, 1392, 11, 437, 775, 309, 360, 30, 1033, 11, 437, 311, 264, 2649, 1296], "temperature": 0.0, "avg_logprob": -0.10964204088042054, "compression_ratio": 1.4640883977900552, "no_speech_prob": 3.688811193569563e-05}, {"id": 19, "seek": 17440, "start": 174.4, "end": 181.76000000000002, "text": " the two? Very simple. I just inserted a, you know, data memba in the base class, and we", "tokens": [264, 732, 30, 4372, 2199, 13, 286, 445, 27992, 257, 11, 291, 458, 11, 1412, 1334, 4231, 294, 264, 3096, 1508, 11, 293, 321], "temperature": 0.0, "avg_logprob": -0.1503744845120412, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.00010188283340539783}, {"id": 20, "seek": 17440, "start": 181.76000000000002, "end": 188.0, "text": " want to know what the impact of this is on the ABI, you know, as far as the binary goes.", "tokens": [528, 281, 458, 437, 264, 2712, 295, 341, 307, 322, 264, 316, 11291, 11, 291, 458, 11, 382, 1400, 382, 264, 17434, 1709, 13], "temperature": 0.0, "avg_logprob": -0.1503744845120412, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.00010188283340539783}, {"id": 21, "seek": 17440, "start": 188.0, "end": 195.4, "text": " So, where am I here? I'm in the source code of the project, and so I've built a version", "tokens": [407, 11, 689, 669, 286, 510, 30, 286, 478, 294, 264, 4009, 3089, 295, 264, 1716, 11, 293, 370, 286, 600, 3094, 257, 3037], "temperature": 0.0, "avg_logprob": -0.1503744845120412, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.00010188283340539783}, {"id": 22, "seek": 17440, "start": 195.4, "end": 202.56, "text": " of it. And so, here we have one of the tools which name is ABI diff, which does what you", "tokens": [295, 309, 13, 400, 370, 11, 510, 321, 362, 472, 295, 264, 3873, 597, 1315, 307, 316, 11291, 7593, 11, 597, 775, 437, 291], "temperature": 0.0, "avg_logprob": -0.1503744845120412, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.00010188283340539783}, {"id": 23, "seek": 20256, "start": 202.56, "end": 213.68, "text": " think it does. And so, if I run it, what does it say? Basically, there are two changes", "tokens": [519, 309, 775, 13, 400, 370, 11, 498, 286, 1190, 309, 11, 437, 775, 309, 584, 30, 8537, 11, 456, 366, 732, 2962], "temperature": 0.0, "avg_logprob": -0.11972382950456176, "compression_ratio": 1.5670731707317074, "no_speech_prob": 1.592717853782233e-05}, {"id": 24, "seek": 20256, "start": 213.68, "end": 219.8, "text": " as far as ABI goes in that battery due to the change of sin. So, the first change is", "tokens": [382, 1400, 382, 316, 11291, 1709, 294, 300, 5809, 3462, 281, 264, 1319, 295, 3343, 13, 407, 11, 264, 700, 1319, 307], "temperature": 0.0, "avg_logprob": -0.11972382950456176, "compression_ratio": 1.5670731707317074, "no_speech_prob": 1.592717853782233e-05}, {"id": 25, "seek": 20256, "start": 219.8, "end": 226.28, "text": " about, you know, the first function which is here. And so, it is telling us basically", "tokens": [466, 11, 291, 458, 11, 264, 700, 2445, 597, 307, 510, 13, 400, 370, 11, 309, 307, 3585, 505, 1936], "temperature": 0.0, "avg_logprob": -0.11972382950456176, "compression_ratio": 1.5670731707317074, "no_speech_prob": 1.592717853782233e-05}, {"id": 26, "seek": 22628, "start": 226.28, "end": 234.16, "text": " that that function has a parameter type that changed. And the change is about this, you", "tokens": [300, 300, 2445, 575, 257, 13075, 2010, 300, 3105, 13, 400, 264, 1319, 307, 466, 341, 11, 291], "temperature": 0.0, "avg_logprob": -0.1524470811037673, "compression_ratio": 1.663594470046083, "no_speech_prob": 5.3741561714559793e-05}, {"id": 27, "seek": 22628, "start": 234.16, "end": 242.2, "text": " know, structure, remember? Something is interesting. The size hasn't changed, even though I've", "tokens": [458, 11, 3877, 11, 1604, 30, 6595, 307, 1880, 13, 440, 2744, 6132, 380, 3105, 11, 754, 1673, 286, 600], "temperature": 0.0, "avg_logprob": -0.1524470811037673, "compression_ratio": 1.663594470046083, "no_speech_prob": 5.3741561714559793e-05}, {"id": 28, "seek": 22628, "start": 242.2, "end": 248.76, "text": " added, you know, a data member in there. So, yeah, you know the drill, right? If you don't,", "tokens": [3869, 11, 291, 458, 11, 257, 1412, 4006, 294, 456, 13, 407, 11, 1338, 11, 291, 458, 264, 11392, 11, 558, 30, 759, 291, 500, 380, 11], "temperature": 0.0, "avg_logprob": -0.1524470811037673, "compression_ratio": 1.663594470046083, "no_speech_prob": 5.3741561714559793e-05}, {"id": 29, "seek": 22628, "start": 248.76, "end": 255.6, "text": " I can, you know, explain it more. But size hasn't changed. The base class has changed,", "tokens": [286, 393, 11, 291, 458, 11, 2903, 309, 544, 13, 583, 2744, 6132, 380, 3105, 13, 440, 3096, 1508, 575, 3105, 11], "temperature": 0.0, "avg_logprob": -0.1524470811037673, "compression_ratio": 1.663594470046083, "no_speech_prob": 5.3741561714559793e-05}, {"id": 30, "seek": 25560, "start": 255.6, "end": 263.12, "text": " and the change here is a data member insertion at a certain offset, blah, blah, blah. So,", "tokens": [293, 264, 1319, 510, 307, 257, 1412, 4006, 8969, 313, 412, 257, 1629, 18687, 11, 12288, 11, 12288, 11, 12288, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.10225671270619267, "compression_ratio": 1.7179487179487178, "no_speech_prob": 2.9239659852464683e-05}, {"id": 31, "seek": 25560, "start": 263.12, "end": 272.24, "text": " this is the impact of the change of the first type on the first interface, right? And so,", "tokens": [341, 307, 264, 2712, 295, 264, 1319, 295, 264, 700, 2010, 322, 264, 700, 9226, 11, 558, 30, 400, 370, 11], "temperature": 0.0, "avg_logprob": -0.10225671270619267, "compression_ratio": 1.7179487179487178, "no_speech_prob": 2.9239659852464683e-05}, {"id": 32, "seek": 25560, "start": 272.24, "end": 282.8, "text": " there is another interface that got impacted, right? And the parameter of that function,", "tokens": [456, 307, 1071, 9226, 300, 658, 15653, 11, 558, 30, 400, 264, 13075, 295, 300, 2445, 11], "temperature": 0.0, "avg_logprob": -0.10225671270619267, "compression_ratio": 1.7179487179487178, "no_speech_prob": 2.9239659852464683e-05}, {"id": 33, "seek": 28280, "start": 282.8, "end": 290.0, "text": " which was struct s1, changed as well. The base class changed. The base class was struct", "tokens": [597, 390, 6594, 262, 16, 11, 3105, 382, 731, 13, 440, 3096, 1508, 3105, 13, 440, 3096, 1508, 390, 6594], "temperature": 0.0, "avg_logprob": -0.14695115884145102, "compression_ratio": 1.792929292929293, "no_speech_prob": 8.070416515693069e-05}, {"id": 34, "seek": 28280, "start": 290.0, "end": 297.88, "text": " s0, right? And the details of s0 change were reported earlier. So, we don't have to, you", "tokens": [262, 15, 11, 558, 30, 400, 264, 4365, 295, 262, 15, 1319, 645, 7055, 3071, 13, 407, 11, 321, 500, 380, 362, 281, 11, 291], "temperature": 0.0, "avg_logprob": -0.14695115884145102, "compression_ratio": 1.792929292929293, "no_speech_prob": 8.070416515693069e-05}, {"id": 35, "seek": 28280, "start": 297.88, "end": 306.6, "text": " know, repeat it again, right? So, here you see that we compute the changes, right? And", "tokens": [458, 11, 7149, 309, 797, 11, 558, 30, 407, 11, 510, 291, 536, 300, 321, 14722, 264, 2962, 11, 558, 30, 400], "temperature": 0.0, "avg_logprob": -0.14695115884145102, "compression_ratio": 1.792929292929293, "no_speech_prob": 8.070416515693069e-05}, {"id": 36, "seek": 28280, "start": 306.6, "end": 312.76, "text": " we also analyze those changes so that we can detect if things have been, you know, reported", "tokens": [321, 611, 12477, 729, 2962, 370, 300, 321, 393, 5531, 498, 721, 362, 668, 11, 291, 458, 11, 7055], "temperature": 0.0, "avg_logprob": -0.14695115884145102, "compression_ratio": 1.792929292929293, "no_speech_prob": 8.070416515693069e-05}, {"id": 37, "seek": 31276, "start": 312.76, "end": 322.64, "text": " earlier or not. And also, we mess up with more stuff, because here we say, for instance,", "tokens": [3071, 420, 406, 13, 400, 611, 11, 321, 2082, 493, 365, 544, 1507, 11, 570, 510, 321, 584, 11, 337, 5197, 11], "temperature": 0.0, "avg_logprob": -0.14398338397343954, "compression_ratio": 1.37984496124031, "no_speech_prob": 0.00010707367619033903}, {"id": 38, "seek": 31276, "start": 322.64, "end": 329.96, "text": " that there were two changes, for instance. But one got filtered out. What does that mean?", "tokens": [300, 456, 645, 732, 2962, 11, 337, 5197, 13, 583, 472, 658, 37111, 484, 13, 708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.14398338397343954, "compression_ratio": 1.37984496124031, "no_speech_prob": 0.00010707367619033903}, {"id": 39, "seek": 32996, "start": 329.96, "end": 349.96, "text": " So, let's see, for instance, if I recall the... Okay, I'll add a special... So, I've asked", "tokens": [407, 11, 718, 311, 536, 11, 337, 5197, 11, 498, 286, 9901, 264, 485, 1033, 11, 286, 603, 909, 257, 2121, 485, 407, 11, 286, 600, 2351], "temperature": 0.0, "avg_logprob": -0.22025279998779296, "compression_ratio": 1.2797202797202798, "no_speech_prob": 7.70672777434811e-05}, {"id": 40, "seek": 32996, "start": 349.96, "end": 355.56, "text": " ABIDF to show me what, you know, to show me redundant changes, because by default it removes", "tokens": [13838, 2777, 37, 281, 855, 385, 437, 11, 291, 458, 11, 281, 855, 385, 40997, 2962, 11, 570, 538, 7576, 309, 30445], "temperature": 0.0, "avg_logprob": -0.22025279998779296, "compression_ratio": 1.2797202797202798, "no_speech_prob": 7.70672777434811e-05}, {"id": 41, "seek": 35556, "start": 355.56, "end": 360.6, "text": " redundant changes. And we see that we have the third function that was impacted as well", "tokens": [40997, 2962, 13, 400, 321, 536, 300, 321, 362, 264, 2636, 2445, 300, 390, 15653, 382, 731], "temperature": 0.0, "avg_logprob": -0.11338852228743307, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.6425553339067847e-05}, {"id": 42, "seek": 35556, "start": 360.6, "end": 369.6, "text": " by, you know, the change we created. And so, well, all the changes that, you know, impact", "tokens": [538, 11, 291, 458, 11, 264, 1319, 321, 2942, 13, 400, 370, 11, 731, 11, 439, 264, 2962, 300, 11, 291, 458, 11, 2712], "temperature": 0.0, "avg_logprob": -0.11338852228743307, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.6425553339067847e-05}, {"id": 43, "seek": 35556, "start": 369.6, "end": 378.04, "text": " function three were already reported. So, this is why it was suppressed. That change", "tokens": [2445, 1045, 645, 1217, 7055, 13, 407, 11, 341, 307, 983, 309, 390, 42645, 13, 663, 1319], "temperature": 0.0, "avg_logprob": -0.11338852228743307, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.6425553339067847e-05}, {"id": 44, "seek": 35556, "start": 378.04, "end": 383.2, "text": " was suppressed by default, because it was redundant. So, it's not just... We're not just", "tokens": [390, 42645, 538, 7576, 11, 570, 309, 390, 40997, 13, 407, 11, 309, 311, 406, 445, 485, 492, 434, 406, 445], "temperature": 0.0, "avg_logprob": -0.11338852228743307, "compression_ratio": 1.7908163265306123, "no_speech_prob": 5.6425553339067847e-05}, {"id": 45, "seek": 38320, "start": 383.2, "end": 389.59999999999997, "text": " diffing things. We're analyzing the diffs, and we're trying to, you know, massage those", "tokens": [7593, 278, 721, 13, 492, 434, 23663, 264, 7593, 82, 11, 293, 321, 434, 1382, 281, 11, 291, 458, 11, 16145, 729], "temperature": 0.0, "avg_logprob": -0.18629436743886849, "compression_ratio": 1.4917127071823204, "no_speech_prob": 0.00012513651745393872}, {"id": 46, "seek": 38320, "start": 389.59999999999997, "end": 400.32, "text": " diffs so that they can be consumed by human beings. So, this is what we mean by analyzing", "tokens": [7593, 82, 370, 300, 436, 393, 312, 21226, 538, 1952, 8958, 13, 407, 11, 341, 307, 437, 321, 914, 538, 23663], "temperature": 0.0, "avg_logprob": -0.18629436743886849, "compression_ratio": 1.4917127071823204, "no_speech_prob": 0.00012513651745393872}, {"id": 47, "seek": 38320, "start": 400.32, "end": 411.32, "text": " ABI's, basically. So, how it works. The library used to implement the tools has a front-end,", "tokens": [316, 11291, 311, 11, 1936, 13, 407, 11, 577, 309, 1985, 13, 440, 6405, 1143, 281, 4445, 264, 3873, 575, 257, 1868, 12, 521, 11], "temperature": 0.0, "avg_logprob": -0.18629436743886849, "compression_ratio": 1.4917127071823204, "no_speech_prob": 0.00012513651745393872}, {"id": 48, "seek": 41132, "start": 411.32, "end": 418.0, "text": " which is kind of backward. The front-end reads the binary. Usually, it is back-ends that", "tokens": [597, 307, 733, 295, 23897, 13, 440, 1868, 12, 521, 15700, 264, 17434, 13, 11419, 11, 309, 307, 646, 12, 2581, 300], "temperature": 0.0, "avg_logprob": -0.14355813539945161, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3165643142419867e-05}, {"id": 49, "seek": 41132, "start": 418.0, "end": 424.32, "text": " writes binaries, but, okay, here, backward. So, we read the binary, which has to be in", "tokens": [13657, 5171, 4889, 11, 457, 11, 1392, 11, 510, 11, 23897, 13, 407, 11, 321, 1401, 264, 17434, 11, 597, 575, 281, 312, 294], "temperature": 0.0, "avg_logprob": -0.14355813539945161, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3165643142419867e-05}, {"id": 50, "seek": 41132, "start": 424.32, "end": 430.28, "text": " the ELF format right now, and we build an internal representation of it. We look at", "tokens": [264, 14426, 37, 7877, 558, 586, 11, 293, 321, 1322, 364, 6920, 10290, 295, 309, 13, 492, 574, 412], "temperature": 0.0, "avg_logprob": -0.14355813539945161, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3165643142419867e-05}, {"id": 51, "seek": 41132, "start": 430.28, "end": 438.84, "text": " the publicly defined and exported symbols of, you know, declarations, basically functions", "tokens": [264, 14843, 7642, 293, 42055, 16944, 295, 11, 291, 458, 11, 16694, 763, 11, 1936, 6828], "temperature": 0.0, "avg_logprob": -0.14355813539945161, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3165643142419867e-05}, {"id": 52, "seek": 43884, "start": 438.84, "end": 444.96, "text": " and variables. We build a representation of them and their types. And then, we construct", "tokens": [293, 9102, 13, 492, 1322, 257, 10290, 295, 552, 293, 641, 3467, 13, 400, 550, 11, 321, 7690], "temperature": 0.0, "avg_logprob": -0.1651030714793872, "compression_ratio": 1.7241379310344827, "no_speech_prob": 5.912944470765069e-05}, {"id": 53, "seek": 43884, "start": 444.96, "end": 451.64, "text": " the graph of the types like that and their subtypes, and we pull all that together, and", "tokens": [264, 4295, 295, 264, 3467, 411, 300, 293, 641, 1422, 874, 5190, 11, 293, 321, 2235, 439, 300, 1214, 11, 293], "temperature": 0.0, "avg_logprob": -0.1651030714793872, "compression_ratio": 1.7241379310344827, "no_speech_prob": 5.912944470765069e-05}, {"id": 54, "seek": 43884, "start": 451.64, "end": 458.76, "text": " we call that an ABI corpus. A corpus is an artifact for us that represents the ABI of", "tokens": [321, 818, 300, 364, 316, 11291, 1181, 31624, 13, 316, 1181, 31624, 307, 364, 34806, 337, 505, 300, 8855, 264, 316, 11291, 295], "temperature": 0.0, "avg_logprob": -0.1651030714793872, "compression_ratio": 1.7241379310344827, "no_speech_prob": 5.912944470765069e-05}, {"id": 55, "seek": 43884, "start": 458.76, "end": 466.35999999999996, "text": " the binary we were looking at. And so, there is a middle-end that acts on that internal", "tokens": [264, 17434, 321, 645, 1237, 412, 13, 400, 370, 11, 456, 307, 257, 2808, 12, 521, 300, 10672, 322, 300, 6920], "temperature": 0.0, "avg_logprob": -0.1651030714793872, "compression_ratio": 1.7241379310344827, "no_speech_prob": 5.912944470765069e-05}, {"id": 56, "seek": 46636, "start": 466.36, "end": 473.12, "text": " representation. Said otherwise, it acts on ABI corpora. Corpora being the plural of corpus", "tokens": [10290, 13, 26490, 5911, 11, 309, 10672, 322, 316, 11291, 6804, 64, 13, 19665, 64, 885, 264, 25377, 295, 1181, 31624], "temperature": 0.0, "avg_logprob": -0.16873939723184664, "compression_ratio": 1.4777777777777779, "no_speech_prob": 5.984018571325578e-05}, {"id": 57, "seek": 46636, "start": 473.12, "end": 481.12, "text": " in Latin, right? Let's be pedantic. So, we can, as you've seen, compare two instances", "tokens": [294, 10803, 11, 558, 30, 961, 311, 312, 5670, 7128, 13, 407, 11, 321, 393, 11, 382, 291, 600, 1612, 11, 6794, 732, 14519], "temperature": 0.0, "avg_logprob": -0.16873939723184664, "compression_ratio": 1.4777777777777779, "no_speech_prob": 5.984018571325578e-05}, {"id": 58, "seek": 46636, "start": 481.12, "end": 489.28000000000003, "text": " of ABI corpus. Then, we build an internal representation of the result of the comparison.", "tokens": [295, 316, 11291, 1181, 31624, 13, 1396, 11, 321, 1322, 364, 6920, 10290, 295, 264, 1874, 295, 264, 9660, 13], "temperature": 0.0, "avg_logprob": -0.16873939723184664, "compression_ratio": 1.4777777777777779, "no_speech_prob": 5.984018571325578e-05}, {"id": 59, "seek": 48928, "start": 489.28, "end": 497.2, "text": " We call that an diff IR. So, it's a different IR. And then, we perform transformations on", "tokens": [492, 818, 300, 364, 7593, 16486, 13, 407, 11, 309, 311, 257, 819, 16486, 13, 400, 550, 11, 321, 2042, 34852, 322], "temperature": 0.0, "avg_logprob": -0.16395922788639658, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.8354597816360183e-05}, {"id": 60, "seek": 48928, "start": 497.2, "end": 504.28, "text": " that diff IR, like categorization. So, we would walk the graph and say, okay, this", "tokens": [300, 7593, 16486, 11, 411, 19250, 2144, 13, 407, 11, 321, 576, 1792, 264, 4295, 293, 584, 11, 1392, 11, 341], "temperature": 0.0, "avg_logprob": -0.16395922788639658, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.8354597816360183e-05}, {"id": 61, "seek": 48928, "start": 504.28, "end": 512.4, "text": " diff node, we've seen it before. So, we'll mark it as being redundant to this other one.", "tokens": [7593, 9984, 11, 321, 600, 1612, 309, 949, 13, 407, 11, 321, 603, 1491, 309, 382, 885, 40997, 281, 341, 661, 472, 13], "temperature": 0.0, "avg_logprob": -0.16395922788639658, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.8354597816360183e-05}, {"id": 62, "seek": 48928, "start": 512.4, "end": 519.0799999999999, "text": " And then, they can be, you know, transformations that are suppression as well. Well, suppression.", "tokens": [400, 550, 11, 436, 393, 312, 11, 291, 458, 11, 34852, 300, 366, 36807, 382, 731, 13, 1042, 11, 36807, 13], "temperature": 0.0, "avg_logprob": -0.16395922788639658, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.8354597816360183e-05}, {"id": 63, "seek": 51908, "start": 519.08, "end": 526.84, "text": " We will mark the nodes as being suppressed. For instance, because the user wrote something", "tokens": [492, 486, 1491, 264, 13891, 382, 885, 42645, 13, 1171, 5197, 11, 570, 264, 4195, 4114, 746], "temperature": 0.0, "avg_logprob": -0.1428103976779514, "compression_ratio": 1.5277777777777777, "no_speech_prob": 6.19523343630135e-05}, {"id": 64, "seek": 51908, "start": 526.84, "end": 534.76, "text": " that we call a suppression specification file requiring that some types changes might not", "tokens": [300, 321, 818, 257, 36807, 31256, 3991, 24165, 300, 512, 3467, 2962, 1062, 406], "temperature": 0.0, "avg_logprob": -0.1428103976779514, "compression_ratio": 1.5277777777777777, "no_speech_prob": 6.19523343630135e-05}, {"id": 65, "seek": 51908, "start": 534.76, "end": 546.76, "text": " be reported. So, once we have that well-massaged diff IR, we have backends that walk that diff", "tokens": [312, 7055, 13, 407, 11, 1564, 321, 362, 300, 731, 12, 47386, 2980, 7593, 16486, 11, 321, 362, 646, 2581, 300, 1792, 300, 7593], "temperature": 0.0, "avg_logprob": -0.1428103976779514, "compression_ratio": 1.5277777777777777, "no_speech_prob": 6.19523343630135e-05}, {"id": 66, "seek": 54676, "start": 546.76, "end": 555.92, "text": " IR, obviously, or the initial IR and do useful stuff, like writing, you know, emitting reports,", "tokens": [16486, 11, 2745, 11, 420, 264, 5883, 16486, 293, 360, 4420, 1507, 11, 411, 3579, 11, 291, 458, 11, 846, 2414, 7122, 11], "temperature": 0.0, "avg_logprob": -0.19030986513410295, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.00016544920799788088}, {"id": 67, "seek": 54676, "start": 555.92, "end": 565.88, "text": " for instance, or emitting, you know, the representation of the ABI corpus in a disk-saved format that", "tokens": [337, 5197, 11, 420, 846, 2414, 11, 291, 458, 11, 264, 10290, 295, 264, 316, 11291, 1181, 31624, 294, 257, 12355, 12, 82, 12865, 7877, 300], "temperature": 0.0, "avg_logprob": -0.19030986513410295, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.00016544920799788088}, {"id": 68, "seek": 54676, "start": 565.88, "end": 576.4399999999999, "text": " we called ABI XML. So, what we've done recently, so I'm going, you know, a bit fast because,", "tokens": [321, 1219, 316, 11291, 43484, 13, 407, 11, 437, 321, 600, 1096, 3938, 11, 370, 286, 478, 516, 11, 291, 458, 11, 257, 857, 2370, 570, 11], "temperature": 0.0, "avg_logprob": -0.19030986513410295, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.00016544920799788088}, {"id": 69, "seek": 57644, "start": 576.44, "end": 582.6800000000001, "text": " you know, to let time for questions and stuff, and we can go on and, let's say, not very", "tokens": [291, 458, 11, 281, 718, 565, 337, 1651, 293, 1507, 11, 293, 321, 393, 352, 322, 293, 11, 718, 311, 584, 11, 406, 588], "temperature": 0.0, "avg_logprob": -0.18048415312895905, "compression_ratio": 1.5348837209302326, "no_speech_prob": 8.58585917740129e-05}, {"id": 70, "seek": 57644, "start": 582.6800000000001, "end": 588.6, "text": " structured discussion afterwards, if you like. So, yeah, in the recent times, what we've", "tokens": [18519, 5017, 10543, 11, 498, 291, 411, 13, 407, 11, 1338, 11, 294, 264, 5162, 1413, 11, 437, 321, 600], "temperature": 0.0, "avg_logprob": -0.18048415312895905, "compression_ratio": 1.5348837209302326, "no_speech_prob": 8.58585917740129e-05}, {"id": 71, "seek": 57644, "start": 588.6, "end": 597.32, "text": " done is, well, you know Dwarf, you know that it changes all the time with new versions", "tokens": [1096, 307, 11, 731, 11, 291, 458, 413, 6925, 69, 11, 291, 458, 300, 309, 2962, 439, 264, 565, 365, 777, 9606], "temperature": 0.0, "avg_logprob": -0.18048415312895905, "compression_ratio": 1.5348837209302326, "no_speech_prob": 8.58585917740129e-05}, {"id": 72, "seek": 59732, "start": 597.32, "end": 608.6800000000001, "text": " of Dwarf producers. So, with GCC-11 and LLVN-14, the default Dwarf version was bumped to the", "tokens": [295, 413, 6925, 69, 16080, 13, 407, 11, 365, 460, 11717, 12, 5348, 293, 441, 43, 53, 45, 12, 7271, 11, 264, 7576, 413, 6925, 69, 3037, 390, 42696, 281, 264], "temperature": 0.0, "avg_logprob": -0.1827526948390863, "compression_ratio": 1.375, "no_speech_prob": 6.484842742793262e-05}, {"id": 73, "seek": 59732, "start": 608.6800000000001, "end": 614.9200000000001, "text": " version 5, which is quite ancient, actually. I think it was released in 2017 or something.", "tokens": [3037, 1025, 11, 597, 307, 1596, 7832, 11, 767, 13, 286, 519, 309, 390, 4736, 294, 6591, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.1827526948390863, "compression_ratio": 1.375, "no_speech_prob": 6.484842742793262e-05}, {"id": 74, "seek": 59732, "start": 614.9200000000001, "end": 623.6400000000001, "text": " So, yeah, we support most of that right now. And another major thing that happened recently", "tokens": [407, 11, 1338, 11, 321, 1406, 881, 295, 300, 558, 586, 13, 400, 1071, 2563, 551, 300, 2011, 3938], "temperature": 0.0, "avg_logprob": -0.1827526948390863, "compression_ratio": 1.375, "no_speech_prob": 6.484842742793262e-05}, {"id": 75, "seek": 62364, "start": 623.64, "end": 634.1999999999999, "text": " was that thanks to folks in this room that I won't, don't worry, I won't give your name.", "tokens": [390, 300, 3231, 281, 4024, 294, 341, 1808, 300, 286, 1582, 380, 11, 500, 380, 3292, 11, 286, 1582, 380, 976, 428, 1315, 13], "temperature": 0.0, "avg_logprob": -0.21750967843191965, "compression_ratio": 1.461111111111111, "no_speech_prob": 6.882406887598336e-05}, {"id": 76, "seek": 62364, "start": 634.1999999999999, "end": 640.4399999999999, "text": " New debug info format were added because, yeah, we started with Dwarf only. And so, the", "tokens": [1873, 24083, 13614, 7877, 645, 3869, 570, 11, 1338, 11, 321, 1409, 365, 413, 6925, 69, 787, 13, 400, 370, 11, 264], "temperature": 0.0, "avg_logprob": -0.21750967843191965, "compression_ratio": 1.461111111111111, "no_speech_prob": 6.882406887598336e-05}, {"id": 77, "seek": 62364, "start": 640.4399999999999, "end": 646.12, "text": " CTF debug info format was, support was added to the Babigel. So, basically now, if you", "tokens": [19529, 37, 24083, 13614, 7877, 390, 11, 1406, 390, 3869, 281, 264, 15820, 328, 338, 13, 407, 11, 1936, 586, 11, 498, 291], "temperature": 0.0, "avg_logprob": -0.21750967843191965, "compression_ratio": 1.461111111111111, "no_speech_prob": 6.882406887598336e-05}, {"id": 78, "seek": 64612, "start": 646.12, "end": 656.04, "text": " have a binary having CTF and or Dwarf, you can choose whatever you want to use as a source", "tokens": [362, 257, 17434, 1419, 19529, 37, 293, 420, 413, 6925, 69, 11, 291, 393, 2826, 2035, 291, 528, 281, 764, 382, 257, 4009], "temperature": 0.0, "avg_logprob": -0.13065773010253906, "compression_ratio": 1.3409090909090908, "no_speech_prob": 4.0001825254876167e-05}, {"id": 79, "seek": 64612, "start": 656.04, "end": 667.84, "text": " of type information. So, things being how they are, the code got changed a bit to, you", "tokens": [295, 2010, 1589, 13, 407, 11, 721, 885, 577, 436, 366, 11, 264, 3089, 658, 3105, 257, 857, 281, 11, 291], "temperature": 0.0, "avg_logprob": -0.13065773010253906, "compression_ratio": 1.3409090909090908, "no_speech_prob": 4.0001825254876167e-05}, {"id": 80, "seek": 66784, "start": 667.84, "end": 677.9200000000001, "text": " know, to be turned into a multi front-end architecture. We also have a multi backend", "tokens": [458, 11, 281, 312, 3574, 666, 257, 4825, 1868, 12, 521, 9482, 13, 492, 611, 362, 257, 4825, 38087], "temperature": 0.0, "avg_logprob": -0.1498448780604771, "compression_ratio": 1.4860335195530727, "no_speech_prob": 2.1764655684819445e-05}, {"id": 81, "seek": 66784, "start": 677.9200000000001, "end": 684.52, "text": " architecture, basically, because we have different types of reports. The one I've shown you", "tokens": [9482, 11, 1936, 11, 570, 321, 362, 819, 3467, 295, 7122, 13, 440, 472, 286, 600, 4898, 291], "temperature": 0.0, "avg_logprob": -0.1498448780604771, "compression_ratio": 1.4860335195530727, "no_speech_prob": 2.1764655684819445e-05}, {"id": 82, "seek": 66784, "start": 684.52, "end": 691.12, "text": " is the default one, which is quite verbose. So, some people like it more terse. So, yeah.", "tokens": [307, 264, 7576, 472, 11, 597, 307, 1596, 9595, 541, 13, 407, 11, 512, 561, 411, 309, 544, 1796, 405, 13, 407, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.1498448780604771, "compression_ratio": 1.4860335195530727, "no_speech_prob": 2.1764655684819445e-05}, {"id": 83, "seek": 69112, "start": 691.12, "end": 699.44, "text": " And who knows whatever weird request users might come with in the future. So, yeah. Different", "tokens": [400, 567, 3255, 2035, 3657, 5308, 5022, 1062, 808, 365, 294, 264, 2027, 13, 407, 11, 1338, 13, 20825], "temperature": 0.0, "avg_logprob": -0.1837857390103275, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.00010372667020419613}, {"id": 84, "seek": 69112, "start": 699.44, "end": 708.84, "text": " report backends. And, well, it's not, doesn't stop there. We are still working on, you know,", "tokens": [2275, 646, 2581, 13, 400, 11, 731, 11, 309, 311, 406, 11, 1177, 380, 1590, 456, 13, 492, 366, 920, 1364, 322, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.1837857390103275, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.00010372667020419613}, {"id": 85, "seek": 69112, "start": 708.84, "end": 716.44, "text": " on new stuff while coming from user request. So, yeah, the, apparently the new kids on", "tokens": [322, 777, 1507, 1339, 1348, 490, 4195, 5308, 13, 407, 11, 1338, 11, 264, 11, 7970, 264, 777, 2301, 322], "temperature": 0.0, "avg_logprob": -0.1837857390103275, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.00010372667020419613}, {"id": 86, "seek": 71644, "start": 716.44, "end": 726.0, "text": " the block, well, new kids in town now, cool stuff is BPF, right? And with BPF comes BTF,", "tokens": [264, 3461, 11, 731, 11, 777, 2301, 294, 3954, 586, 11, 1627, 1507, 307, 40533, 37, 11, 558, 30, 400, 365, 40533, 37, 1487, 363, 20527, 11], "temperature": 0.0, "avg_logprob": -0.17272384078414352, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.00018156386795453727}, {"id": 87, "seek": 71644, "start": 726.0, "end": 737.24, "text": " which is the type description format of BPF. And so, there were some requests to support", "tokens": [597, 307, 264, 2010, 3855, 7877, 295, 40533, 37, 13, 400, 370, 11, 456, 645, 512, 12475, 281, 1406], "temperature": 0.0, "avg_logprob": -0.17272384078414352, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.00018156386795453727}, {"id": 88, "seek": 71644, "start": 737.24, "end": 745.8000000000001, "text": " that. So, it is now in mainline, even though it's not in Babigel mainline, but it's not", "tokens": [300, 13, 407, 11, 309, 307, 586, 294, 2135, 1889, 11, 754, 1673, 309, 311, 406, 294, 15820, 328, 338, 2135, 1889, 11, 457, 309, 311, 406], "temperature": 0.0, "avg_logprob": -0.17272384078414352, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.00018156386795453727}, {"id": 89, "seek": 74580, "start": 745.8, "end": 751.4799999999999, "text": " released yet. It should be released in the next version. So, what do we do with that?", "tokens": [4736, 1939, 13, 467, 820, 312, 4736, 294, 264, 958, 3037, 13, 407, 11, 437, 360, 321, 360, 365, 300, 30], "temperature": 0.0, "avg_logprob": -0.1200571200426887, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.00013078050687909126}, {"id": 90, "seek": 74580, "start": 751.4799999999999, "end": 761.7199999999999, "text": " What's that thing? Basically, because BTF describes the C types, basically, we are using", "tokens": [708, 311, 300, 551, 30, 8537, 11, 570, 363, 20527, 15626, 264, 383, 3467, 11, 1936, 11, 321, 366, 1228], "temperature": 0.0, "avg_logprob": -0.1200571200426887, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.00013078050687909126}, {"id": 91, "seek": 74580, "start": 761.7199999999999, "end": 769.5999999999999, "text": " that to compare the interface exposed by the kernel to its modules. So, we're doing that", "tokens": [300, 281, 6794, 264, 9226, 9495, 538, 264, 28256, 281, 1080, 16679, 13, 407, 11, 321, 434, 884, 300], "temperature": 0.0, "avg_logprob": -0.1200571200426887, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.00013078050687909126}, {"id": 92, "seek": 76960, "start": 769.6, "end": 780.52, "text": " with CTF already, with BTF now, and also with DWARF. With DWARF, it is much less fast,", "tokens": [365, 19529, 37, 1217, 11, 365, 363, 20527, 586, 11, 293, 611, 365, 45318, 1899, 37, 13, 2022, 45318, 1899, 37, 11, 309, 307, 709, 1570, 2370, 11], "temperature": 0.0, "avg_logprob": -0.17300567292330557, "compression_ratio": 1.3622047244094488, "no_speech_prob": 0.00011186525807715952}, {"id": 93, "seek": 76960, "start": 780.52, "end": 793.2, "text": " shall we say, than with the CTF support and BTF. So, people can, people are using that", "tokens": [4393, 321, 584, 11, 813, 365, 264, 19529, 37, 1406, 293, 363, 20527, 13, 407, 11, 561, 393, 11, 561, 366, 1228, 300], "temperature": 0.0, "avg_logprob": -0.17300567292330557, "compression_ratio": 1.3622047244094488, "no_speech_prob": 0.00011186525807715952}, {"id": 94, "seek": 79320, "start": 793.2, "end": 803.6800000000001, "text": " feature to, you know, analyze the KABI, basically, kernel ABI, that thing that doesn't exist.", "tokens": [4111, 281, 11, 291, 458, 11, 12477, 264, 591, 13868, 40, 11, 1936, 11, 28256, 316, 11291, 11, 300, 551, 300, 1177, 380, 2514, 13], "temperature": 0.0, "avg_logprob": -0.25597695743336396, "compression_ratio": 1.348148148148148, "no_speech_prob": 3.934926280635409e-05}, {"id": 95, "seek": 79320, "start": 803.6800000000001, "end": 811.6800000000001, "text": " And then we've had, you know, weird project specific request over the year. And the last", "tokens": [400, 550, 321, 600, 632, 11, 291, 458, 11, 3657, 1716, 2685, 5308, 670, 264, 1064, 13, 400, 264, 1036], "temperature": 0.0, "avg_logprob": -0.25597695743336396, "compression_ratio": 1.348148148148148, "no_speech_prob": 3.934926280635409e-05}, {"id": 96, "seek": 81168, "start": 811.68, "end": 823.3599999999999, "text": " one that, you know, came in last month, I say, or yeah, yeah, last month, yeah, in January,", "tokens": [472, 300, 11, 291, 458, 11, 1361, 294, 1036, 1618, 11, 286, 584, 11, 420, 1338, 11, 1338, 11, 1036, 1618, 11, 1338, 11, 294, 7061, 11], "temperature": 0.0, "avg_logprob": -0.21174695894315645, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.3183293049223721e-05}, {"id": 97, "seek": 81168, "start": 823.3599999999999, "end": 827.92, "text": " was to have a, I call that the library set ABI analysis. So, basically, it's a project", "tokens": [390, 281, 362, 257, 11, 286, 818, 300, 264, 6405, 992, 316, 11291, 5215, 13, 407, 11, 1936, 11, 309, 311, 257, 1716], "temperature": 0.0, "avg_logprob": -0.21174695894315645, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.3183293049223721e-05}, {"id": 98, "seek": 81168, "start": 827.92, "end": 835.5999999999999, "text": " that has a huge library, a huge library, and they're planning to split it in different", "tokens": [300, 575, 257, 2603, 6405, 11, 257, 2603, 6405, 11, 293, 436, 434, 5038, 281, 7472, 309, 294, 819], "temperature": 0.0, "avg_logprob": -0.21174695894315645, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.3183293049223721e-05}, {"id": 99, "seek": 83560, "start": 835.6, "end": 845.16, "text": " libraries, right? But then they keep ABI compatibility, they're supposed to. And so, they would like", "tokens": [15148, 11, 558, 30, 583, 550, 436, 1066, 316, 11291, 34237, 11, 436, 434, 3442, 281, 13, 400, 370, 11, 436, 576, 411], "temperature": 0.0, "avg_logprob": -0.14000423976353238, "compression_ratio": 1.5138121546961325, "no_speech_prob": 1.873728797363583e-05}, {"id": 100, "seek": 83560, "start": 845.16, "end": 853.64, "text": " to ensure that the set of, you know, broken down libraries has an ABI that is equivalent", "tokens": [281, 5586, 300, 264, 992, 295, 11, 291, 458, 11, 5463, 760, 15148, 575, 364, 316, 11291, 300, 307, 10344], "temperature": 0.0, "avg_logprob": -0.14000423976353238, "compression_ratio": 1.5138121546961325, "no_speech_prob": 1.873728797363583e-05}, {"id": 101, "seek": 83560, "start": 853.64, "end": 858.2, "text": " or compatible with the first initial one. This is what I, you know, call the library", "tokens": [420, 18218, 365, 264, 700, 5883, 472, 13, 639, 307, 437, 286, 11, 291, 458, 11, 818, 264, 6405], "temperature": 0.0, "avg_logprob": -0.14000423976353238, "compression_ratio": 1.5138121546961325, "no_speech_prob": 1.873728797363583e-05}, {"id": 102, "seek": 85820, "start": 858.2, "end": 867.0, "text": " set ABI analysis. So, we're going to add support for that in, I don't know if it's going to", "tokens": [992, 316, 11291, 5215, 13, 407, 11, 321, 434, 516, 281, 909, 1406, 337, 300, 294, 11, 286, 500, 380, 458, 498, 309, 311, 516, 281], "temperature": 0.0, "avg_logprob": -0.18163090441600385, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.00016781498561613262}, {"id": 103, "seek": 85820, "start": 867.0, "end": 873.08, "text": " be in the next version or not. So, yeah, these are the kinds of things we are, we're working", "tokens": [312, 294, 264, 958, 3037, 420, 406, 13, 407, 11, 1338, 11, 613, 366, 264, 3685, 295, 721, 321, 366, 11, 321, 434, 1364], "temperature": 0.0, "avg_logprob": -0.18163090441600385, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.00016781498561613262}, {"id": 104, "seek": 85820, "start": 873.08, "end": 883.0, "text": " on. So, yeah. And now, I'll let you ask questions if you, if you have any, yeah.", "tokens": [322, 13, 407, 11, 1338, 13, 400, 586, 11, 286, 603, 718, 291, 1029, 1651, 498, 291, 11, 498, 291, 362, 604, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.18163090441600385, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.00016781498561613262}, {"id": 105, "seek": 88300, "start": 883.0, "end": 889.52, "text": " Does the library have any support for language specific ABI? So, languages are good on top", "tokens": [4402, 264, 6405, 362, 604, 1406, 337, 2856, 2685, 316, 11291, 30, 407, 11, 8650, 366, 665, 322, 1192], "temperature": 0.0, "avg_logprob": -0.2250089132657615, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.0008206812781281769}, {"id": 106, "seek": 88300, "start": 889.52, "end": 892.92, "text": " of C, for example, but they have language schemes?", "tokens": [295, 383, 11, 337, 1365, 11, 457, 436, 362, 2856, 26954, 30], "temperature": 0.0, "avg_logprob": -0.2250089132657615, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.0008206812781281769}, {"id": 107, "seek": 88300, "start": 892.92, "end": 906.04, "text": " Yeah, exactly. So, yes. So, there, of course, DWARF is multi-language. So, if the compiler", "tokens": [865, 11, 2293, 13, 407, 11, 2086, 13, 407, 11, 456, 11, 295, 1164, 11, 45318, 1899, 37, 307, 4825, 12, 25241, 20473, 13, 407, 11, 498, 264, 31958], "temperature": 0.0, "avg_logprob": -0.2250089132657615, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.0008206812781281769}, {"id": 108, "seek": 88300, "start": 906.04, "end": 912.32, "text": " of that language emits DWARF, then we're good to go. There is a small layer of language", "tokens": [295, 300, 2856, 846, 1208, 45318, 1899, 37, 11, 550, 321, 434, 665, 281, 352, 13, 821, 307, 257, 1359, 4583, 295, 2856], "temperature": 0.0, "avg_logprob": -0.2250089132657615, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.0008206812781281769}, {"id": 109, "seek": 91232, "start": 912.32, "end": 918.96, "text": " specific stuff we add, you know, for reporting so that we can talk, report stuff in the native", "tokens": [2685, 1507, 321, 909, 11, 291, 458, 11, 337, 10031, 370, 300, 321, 393, 751, 11, 2275, 1507, 294, 264, 8470], "temperature": 0.0, "avg_logprob": -0.14334227375148498, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.00022139775683172047}, {"id": 110, "seek": 91232, "start": 918.96, "end": 924.5600000000001, "text": " language of the programmer, you know, who wrote the thing. So, to give you a concrete", "tokens": [2856, 295, 264, 32116, 11, 291, 458, 11, 567, 4114, 264, 551, 13, 407, 11, 281, 976, 291, 257, 9859], "temperature": 0.0, "avg_logprob": -0.14334227375148498, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.00022139775683172047}, {"id": 111, "seek": 91232, "start": 924.5600000000001, "end": 933.24, "text": " example, right now, we support C++, C, Fortran. Someone asked me for Rust support. So, we", "tokens": [1365, 11, 558, 586, 11, 321, 1406, 383, 25472, 11, 383, 11, 11002, 4257, 13, 8734, 2351, 385, 337, 34952, 1406, 13, 407, 11, 321], "temperature": 0.0, "avg_logprob": -0.14334227375148498, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.00022139775683172047}, {"id": 112, "seek": 91232, "start": 933.24, "end": 938.24, "text": " had that, basically. We have some crashes on OCaml. So, I thought we were supporting", "tokens": [632, 300, 11, 1936, 13, 492, 362, 512, 28642, 322, 422, 31030, 75, 13, 407, 11, 286, 1194, 321, 645, 7231], "temperature": 0.0, "avg_logprob": -0.14334227375148498, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.00022139775683172047}, {"id": 113, "seek": 93824, "start": 938.24, "end": 942.96, "text": " it, too, but I need to do some stuff. So, yeah. Basically, yeah. It needs work, but...", "tokens": [309, 11, 886, 11, 457, 286, 643, 281, 360, 512, 1507, 13, 407, 11, 1338, 13, 8537, 11, 1338, 13, 467, 2203, 589, 11, 457, 485], "temperature": 0.0, "avg_logprob": -0.2483128794917354, "compression_ratio": 1.625, "no_speech_prob": 0.0005752596771344543}, {"id": 114, "seek": 93824, "start": 942.96, "end": 947.6800000000001, "text": " The new language, I just have to define a small layer for the mangling logic.", "tokens": [440, 777, 2856, 11, 286, 445, 362, 281, 6964, 257, 1359, 4583, 337, 264, 32432, 1688, 9952, 13], "temperature": 0.0, "avg_logprob": -0.2483128794917354, "compression_ratio": 1.625, "no_speech_prob": 0.0005752596771344543}, {"id": 115, "seek": 93824, "start": 947.6800000000001, "end": 959.24, "text": " For the mangling logic. So, okay. I can show you, let me show you an example. So, yeah.", "tokens": [1171, 264, 32432, 1688, 9952, 13, 407, 11, 1392, 13, 286, 393, 855, 291, 11, 718, 385, 855, 291, 364, 1365, 13, 407, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2483128794917354, "compression_ratio": 1.625, "no_speech_prob": 0.0005752596771344543}, {"id": 116, "seek": 93824, "start": 959.24, "end": 967.28, "text": " I was writing. So, yeah. Let's see. So, you see, for instance, in C++, we'll compare,", "tokens": [286, 390, 3579, 13, 407, 11, 1338, 13, 961, 311, 536, 13, 407, 11, 291, 536, 11, 337, 5197, 11, 294, 383, 25472, 11, 321, 603, 6794, 11], "temperature": 0.0, "avg_logprob": -0.2483128794917354, "compression_ratio": 1.625, "no_speech_prob": 0.0005752596771344543}, {"id": 117, "seek": 96728, "start": 967.28, "end": 977.24, "text": " so here, you see this function, the function 3. I'll change it in the second version here,", "tokens": [370, 510, 11, 291, 536, 341, 2445, 11, 264, 2445, 805, 13, 286, 603, 1319, 309, 294, 264, 1150, 3037, 510, 11], "temperature": 0.0, "avg_logprob": -0.2921131098711932, "compression_ratio": 1.4094488188976377, "no_speech_prob": 2.0459192455746233e-05}, {"id": 118, "seek": 96728, "start": 977.24, "end": 986.3199999999999, "text": " function 3, and add, and I'll add an integer here, right? Yes. Let's, whoops. We compile", "tokens": [2445, 805, 11, 293, 909, 11, 293, 286, 603, 909, 364, 24922, 510, 11, 558, 30, 1079, 13, 961, 311, 11, 567, 3370, 13, 492, 31413], "temperature": 0.0, "avg_logprob": -0.2921131098711932, "compression_ratio": 1.4094488188976377, "no_speech_prob": 2.0459192455746233e-05}, {"id": 119, "seek": 98632, "start": 986.32, "end": 1008.6, "text": " that, whoops. And, whoops. Weird stuff happened. So, look at what it is saying here. So, you", "tokens": [300, 11, 567, 3370, 13, 400, 11, 567, 3370, 13, 32033, 1507, 2011, 13, 407, 11, 574, 412, 437, 309, 307, 1566, 510, 13, 407, 11, 291], "temperature": 0.0, "avg_logprob": -0.1826493740081787, "compression_ratio": 1.2714285714285714, "no_speech_prob": 2.5845052732620388e-05}, {"id": 120, "seek": 98632, "start": 1008.6, "end": 1016.2800000000001, "text": " see here, because we're in C++, I changed function 3 in the source code. Yeah. Let me", "tokens": [536, 510, 11, 570, 321, 434, 294, 383, 25472, 11, 286, 3105, 2445, 805, 294, 264, 4009, 3089, 13, 865, 13, 961, 385], "temperature": 0.0, "avg_logprob": -0.1826493740081787, "compression_ratio": 1.2714285714285714, "no_speech_prob": 2.5845052732620388e-05}, {"id": 121, "seek": 101628, "start": 1016.28, "end": 1022.88, "text": " just, yeah. See? I changed function 3 here, and I added a parameter, you know? That's", "tokens": [445, 11, 1338, 13, 3008, 30, 286, 3105, 2445, 805, 510, 11, 293, 286, 3869, 257, 13075, 11, 291, 458, 30, 663, 311], "temperature": 0.0, "avg_logprob": -0.14864544338650174, "compression_ratio": 1.6009174311926606, "no_speech_prob": 9.726695861900225e-05}, {"id": 122, "seek": 101628, "start": 1022.88, "end": 1030.24, "text": " what the programmer would say. But then, from the binary standpoint, what we're seeing", "tokens": [437, 264, 32116, 576, 584, 13, 583, 550, 11, 490, 264, 17434, 15827, 11, 437, 321, 434, 2577], "temperature": 0.0, "avg_logprob": -0.14864544338650174, "compression_ratio": 1.6009174311926606, "no_speech_prob": 9.726695861900225e-05}, {"id": 123, "seek": 101628, "start": 1030.24, "end": 1036.0, "text": " is that the first function was removed, and then another one got added. This is because", "tokens": [307, 300, 264, 700, 2445, 390, 7261, 11, 293, 550, 1071, 472, 658, 3869, 13, 639, 307, 570], "temperature": 0.0, "avg_logprob": -0.14864544338650174, "compression_ratio": 1.6009174311926606, "no_speech_prob": 9.726695861900225e-05}, {"id": 124, "seek": 101628, "start": 1036.0, "end": 1044.48, "text": " in C++, the name of the symbols of the two functions, the two versions of the functions,", "tokens": [294, 383, 25472, 11, 264, 1315, 295, 264, 16944, 295, 264, 732, 6828, 11, 264, 732, 9606, 295, 264, 6828, 11], "temperature": 0.0, "avg_logprob": -0.14864544338650174, "compression_ratio": 1.6009174311926606, "no_speech_prob": 9.726695861900225e-05}, {"id": 125, "seek": 104448, "start": 1044.48, "end": 1052.4, "text": " are different. They have a different mangling, okay? So, we go to, we go from the name of", "tokens": [366, 819, 13, 814, 362, 257, 819, 32432, 1688, 11, 1392, 30, 407, 11, 321, 352, 281, 11, 321, 352, 490, 264, 1315, 295], "temperature": 0.0, "avg_logprob": -0.1571539902105564, "compression_ratio": 1.5549132947976878, "no_speech_prob": 8.313680882565677e-05}, {"id": 126, "seek": 104448, "start": 1052.4, "end": 1061.28, "text": " the symbol to the name of the declaration, right? So, but if I do the same in C, then,", "tokens": [264, 5986, 281, 264, 1315, 295, 264, 27606, 11, 558, 30, 407, 11, 457, 498, 286, 360, 264, 912, 294, 383, 11, 550, 11], "temperature": 0.0, "avg_logprob": -0.1571539902105564, "compression_ratio": 1.5549132947976878, "no_speech_prob": 8.313680882565677e-05}, {"id": 127, "seek": 104448, "start": 1061.28, "end": 1070.0, "text": " like, yeah, I knew you would ask that question. I don't know you, but, so, and I have second", "tokens": [411, 11, 1338, 11, 286, 2586, 291, 576, 1029, 300, 1168, 13, 286, 500, 380, 458, 291, 11, 457, 11, 370, 11, 293, 286, 362, 1150], "temperature": 0.0, "avg_logprob": -0.1571539902105564, "compression_ratio": 1.5549132947976878, "no_speech_prob": 8.313680882565677e-05}, {"id": 128, "seek": 107000, "start": 1070.0, "end": 1087.16, "text": " version here. Boom, boom, boom. And, so, here, some, oh, sorry. I changed the name of, sorry,", "tokens": [3037, 510, 13, 15523, 11, 9351, 11, 9351, 13, 400, 11, 370, 11, 510, 11, 512, 11, 1954, 11, 2597, 13, 286, 3105, 264, 1315, 295, 11, 2597, 11], "temperature": 0.0, "avg_logprob": -0.20862323954953985, "compression_ratio": 1.4758064516129032, "no_speech_prob": 0.00012735223572235554}, {"id": 129, "seek": 107000, "start": 1087.16, "end": 1093.48, "text": " I changed the parameter of the function there, but this is in C, okay? And so, if I go in", "tokens": [286, 3105, 264, 13075, 295, 264, 2445, 456, 11, 457, 341, 307, 294, 383, 11, 1392, 30, 400, 370, 11, 498, 286, 352, 294], "temperature": 0.0, "avg_logprob": -0.20862323954953985, "compression_ratio": 1.4758064516129032, "no_speech_prob": 0.00012735223572235554}, {"id": 130, "seek": 109348, "start": 1093.48, "end": 1105.84, "text": " the, ah, sorry, if I go in the shell and I look at, boom, at the two, so, this is, the", "tokens": [264, 11, 3716, 11, 2597, 11, 498, 286, 352, 294, 264, 8720, 293, 286, 574, 412, 11, 9351, 11, 412, 264, 732, 11, 370, 11, 341, 307, 11, 264], "temperature": 0.0, "avg_logprob": -0.15724141423295185, "compression_ratio": 1.5853658536585367, "no_speech_prob": 7.408741657854989e-05}, {"id": 131, "seek": 109348, "start": 1105.84, "end": 1111.8, "text": " first one was hello, and this one is bye, of course, because I think this is going to", "tokens": [700, 472, 390, 7751, 11, 293, 341, 472, 307, 6543, 11, 295, 1164, 11, 570, 286, 519, 341, 307, 516, 281], "temperature": 0.0, "avg_logprob": -0.15724141423295185, "compression_ratio": 1.5853658536585367, "no_speech_prob": 7.408741657854989e-05}, {"id": 132, "seek": 109348, "start": 1111.8, "end": 1122.96, "text": " be the last C here, because in C, the name of the two symbols are the same. Now, we say", "tokens": [312, 264, 1036, 383, 510, 11, 570, 294, 383, 11, 264, 1315, 295, 264, 732, 16944, 366, 264, 912, 13, 823, 11, 321, 584], "temperature": 0.0, "avg_logprob": -0.15724141423295185, "compression_ratio": 1.5853658536585367, "no_speech_prob": 7.408741657854989e-05}, {"id": 133, "seek": 112296, "start": 1122.96, "end": 1128.08, "text": " that the function has changed. So, these are the kind of things that we'll have to adapt,", "tokens": [300, 264, 2445, 575, 3105, 13, 407, 11, 613, 366, 264, 733, 295, 721, 300, 321, 603, 362, 281, 6231, 11], "temperature": 0.0, "avg_logprob": -0.24479942913203276, "compression_ratio": 1.7598425196850394, "no_speech_prob": 0.0002187611535191536}, {"id": 134, "seek": 112296, "start": 1128.08, "end": 1134.1200000000001, "text": " basically, but there is not much to do. In some cases, you have mangling, and in the", "tokens": [1936, 11, 457, 456, 307, 406, 709, 281, 360, 13, 682, 512, 3331, 11, 291, 362, 32432, 1688, 11, 293, 294, 264], "temperature": 0.0, "avg_logprob": -0.24479942913203276, "compression_ratio": 1.7598425196850394, "no_speech_prob": 0.0002187611535191536}, {"id": 135, "seek": 112296, "start": 1134.1200000000001, "end": 1139.28, "text": " others, other cases, you don't. So, you don't have anything to do with the, for the mangling,", "tokens": [2357, 11, 661, 3331, 11, 291, 500, 380, 13, 407, 11, 291, 500, 380, 362, 1340, 281, 360, 365, 264, 11, 337, 264, 32432, 1688, 11], "temperature": 0.0, "avg_logprob": -0.24479942913203276, "compression_ratio": 1.7598425196850394, "no_speech_prob": 0.0002187611535191536}, {"id": 136, "seek": 112296, "start": 1139.28, "end": 1145.64, "text": " the, you know, does that answer your question? Roughly. Roughly, yeah. You have this code,", "tokens": [264, 11, 291, 458, 11, 775, 300, 1867, 428, 1168, 30, 42791, 356, 13, 42791, 356, 11, 1338, 13, 509, 362, 341, 3089, 11], "temperature": 0.0, "avg_logprob": -0.24479942913203276, "compression_ratio": 1.7598425196850394, "no_speech_prob": 0.0002187611535191536}, {"id": 137, "seek": 112296, "start": 1145.64, "end": 1150.72, "text": " part of the code, which decodes the mangled name to an unreadable name. No, no, because", "tokens": [644, 295, 264, 3089, 11, 597, 979, 4789, 264, 32432, 1493, 1315, 281, 364, 517, 2538, 712, 1315, 13, 883, 11, 572, 11, 570], "temperature": 0.0, "avg_logprob": -0.24479942913203276, "compression_ratio": 1.7598425196850394, "no_speech_prob": 0.0002187611535191536}, {"id": 138, "seek": 115072, "start": 1150.72, "end": 1158.2, "text": " the, the, the, the matching is done by dwarf. So, we know that this symbol is for this declaration.", "tokens": [264, 11, 264, 11, 264, 11, 264, 14324, 307, 1096, 538, 35527, 13, 407, 11, 321, 458, 300, 341, 5986, 307, 337, 341, 27606, 13], "temperature": 0.0, "avg_logprob": -0.1922609757403938, "compression_ratio": 1.8379888268156424, "no_speech_prob": 0.00012398077524267137}, {"id": 139, "seek": 115072, "start": 1158.2, "end": 1161.8, "text": " So, we don't have to do the mangling, the mangling or demangling. We, you know, we'll", "tokens": [407, 11, 321, 500, 380, 362, 281, 360, 264, 32432, 1688, 11, 264, 32432, 1688, 420, 1371, 656, 1688, 13, 492, 11, 291, 458, 11, 321, 603], "temperature": 0.0, "avg_logprob": -0.1922609757403938, "compression_ratio": 1.8379888268156424, "no_speech_prob": 0.00012398077524267137}, {"id": 140, "seek": 115072, "start": 1161.8, "end": 1165.92, "text": " look at the addresses and we know that this symbol is for that one. So, yeah, we don't", "tokens": [574, 412, 264, 16862, 293, 321, 458, 300, 341, 5986, 307, 337, 300, 472, 13, 407, 11, 1338, 11, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.1922609757403938, "compression_ratio": 1.8379888268156424, "no_speech_prob": 0.00012398077524267137}, {"id": 141, "seek": 115072, "start": 1165.92, "end": 1170.0, "text": " really care about, yeah. Another, yeah, please go ahead.", "tokens": [534, 1127, 466, 11, 1338, 13, 3996, 11, 1338, 11, 1767, 352, 2286, 13], "temperature": 0.0, "avg_logprob": -0.1922609757403938, "compression_ratio": 1.8379888268156424, "no_speech_prob": 0.00012398077524267137}, {"id": 142, "seek": 117000, "start": 1170.0, "end": 1186.0, "text": " Oh, there is none. No, no, no, no, no, no, no, no, it's, so, yeah, I, just to, to refresh", "tokens": [876, 11, 456, 307, 6022, 13, 883, 11, 572, 11, 572, 11, 572, 11, 572, 11, 572, 11, 572, 11, 572, 11, 309, 311, 11, 370, 11, 1338, 11, 286, 11, 445, 281, 11, 281, 15134], "temperature": 0.0, "avg_logprob": -0.2547996178101958, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.00033105796319432557}, {"id": 143, "seek": 117000, "start": 1186.0, "end": 1193.16, "text": " the question, to repeat the question for the, yeah. What are the performance issues, you", "tokens": [264, 1168, 11, 281, 7149, 264, 1168, 337, 264, 11, 1338, 13, 708, 366, 264, 3389, 2663, 11, 291], "temperature": 0.0, "avg_logprob": -0.2547996178101958, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.00033105796319432557}, {"id": 144, "seek": 117000, "start": 1193.16, "end": 1198.12, "text": " know, when we analyze, like, big libraries, like, you know, he said, I love VM, but, you", "tokens": [458, 11, 562, 321, 12477, 11, 411, 11, 955, 15148, 11, 411, 11, 291, 458, 11, 415, 848, 11, 286, 959, 18038, 11, 457, 11, 291], "temperature": 0.0, "avg_logprob": -0.2547996178101958, "compression_ratio": 1.638036809815951, "no_speech_prob": 0.00033105796319432557}, {"id": 145, "seek": 119812, "start": 1198.12, "end": 1208.1999999999998, "text": " know, there is WebKit, Gecko, etc., etc. So, we have a, when we're looking at, when we're", "tokens": [458, 11, 456, 307, 9573, 45626, 11, 2876, 41416, 11, 5183, 7933, 5183, 13, 407, 11, 321, 362, 257, 11, 562, 321, 434, 1237, 412, 11, 562, 321, 434], "temperature": 0.0, "avg_logprob": -0.1461297320081042, "compression_ratio": 1.5485714285714285, "no_speech_prob": 7.103774987626821e-05}, {"id": 146, "seek": 119812, "start": 1208.1999999999998, "end": 1215.36, "text": " looking at dwarf, we have a fundamental problem, which is the duplication of types. Here we", "tokens": [1237, 412, 35527, 11, 321, 362, 257, 8088, 1154, 11, 597, 307, 264, 17154, 399, 295, 3467, 13, 1692, 321], "temperature": 0.0, "avg_logprob": -0.1461297320081042, "compression_ratio": 1.5485714285714285, "no_speech_prob": 7.103774987626821e-05}, {"id": 147, "seek": 119812, "start": 1215.36, "end": 1223.36, "text": " are in the business of comparing things, right? And so, when we compare types, basically,", "tokens": [366, 294, 264, 1606, 295, 15763, 721, 11, 558, 30, 400, 370, 11, 562, 321, 6794, 3467, 11, 1936, 11], "temperature": 0.0, "avg_logprob": -0.1461297320081042, "compression_ratio": 1.5485714285714285, "no_speech_prob": 7.103774987626821e-05}, {"id": 148, "seek": 122336, "start": 1223.36, "end": 1230.12, "text": " we are in a, the, the land of quadratic algorithms, right? So, things are inherently slow if we", "tokens": [321, 366, 294, 257, 11, 264, 11, 264, 2117, 295, 37262, 14642, 11, 558, 30, 407, 11, 721, 366, 27993, 2964, 498, 321], "temperature": 0.0, "avg_logprob": -0.13619676290773877, "compression_ratio": 1.6816143497757847, "no_speech_prob": 3.118048334727064e-05}, {"id": 149, "seek": 122336, "start": 1230.12, "end": 1240.1599999999999, "text": " do them naively, right? And so, the thing is, in dwarf, every single type unit is represented.", "tokens": [360, 552, 1667, 3413, 11, 558, 30, 400, 370, 11, 264, 551, 307, 11, 294, 35527, 11, 633, 2167, 2010, 4985, 307, 10379, 13], "temperature": 0.0, "avg_logprob": -0.13619676290773877, "compression_ratio": 1.6816143497757847, "no_speech_prob": 3.118048334727064e-05}, {"id": 150, "seek": 122336, "start": 1240.1599999999999, "end": 1245.9199999999998, "text": " But then, when you have a, the final binary, the final shell library, for instance, and", "tokens": [583, 550, 11, 562, 291, 362, 257, 11, 264, 2572, 17434, 11, 264, 2572, 8720, 6405, 11, 337, 5197, 11, 293], "temperature": 0.0, "avg_logprob": -0.13619676290773877, "compression_ratio": 1.6816143497757847, "no_speech_prob": 3.118048334727064e-05}, {"id": 151, "seek": 122336, "start": 1245.9199999999998, "end": 1251.24, "text": " you have, I don't know, you know, 1,000 translation units, and in every single translation unit,", "tokens": [291, 362, 11, 286, 500, 380, 458, 11, 291, 458, 11, 502, 11, 1360, 12853, 6815, 11, 293, 294, 633, 2167, 12853, 4985, 11], "temperature": 0.0, "avg_logprob": -0.13619676290773877, "compression_ratio": 1.6816143497757847, "no_speech_prob": 3.118048334727064e-05}, {"id": 152, "seek": 125124, "start": 1251.24, "end": 1256.1200000000001, "text": " you had the string type, for instance, that was used. Then, you will have the string,", "tokens": [291, 632, 264, 6798, 2010, 11, 337, 5197, 11, 300, 390, 1143, 13, 1396, 11, 291, 486, 362, 264, 6798, 11], "temperature": 0.0, "avg_logprob": -0.11997000694274902, "compression_ratio": 1.651376146788991, "no_speech_prob": 5.556225369218737e-05}, {"id": 153, "seek": 125124, "start": 1256.1200000000001, "end": 1262.88, "text": " the string type represented 1,000 times, at least, you know, in the, in the, in the dwarf.", "tokens": [264, 6798, 2010, 10379, 502, 11, 1360, 1413, 11, 412, 1935, 11, 291, 458, 11, 294, 264, 11, 294, 264, 11, 294, 264, 35527, 13], "temperature": 0.0, "avg_logprob": -0.11997000694274902, "compression_ratio": 1.651376146788991, "no_speech_prob": 5.556225369218737e-05}, {"id": 154, "seek": 125124, "start": 1262.88, "end": 1271.68, "text": " And so, we must be sure that those 100 occurrences of string are the one and the same. We can't", "tokens": [400, 370, 11, 321, 1633, 312, 988, 300, 729, 2319, 5160, 38983, 295, 6798, 366, 264, 472, 293, 264, 912, 13, 492, 393, 380], "temperature": 0.0, "avg_logprob": -0.11997000694274902, "compression_ratio": 1.651376146788991, "no_speech_prob": 5.556225369218737e-05}, {"id": 155, "seek": 125124, "start": 1271.68, "end": 1276.92, "text": " just look at the name and say they're the same, because they could be otherwise, right?", "tokens": [445, 574, 412, 264, 1315, 293, 584, 436, 434, 264, 912, 11, 570, 436, 727, 312, 5911, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11997000694274902, "compression_ratio": 1.651376146788991, "no_speech_prob": 5.556225369218737e-05}, {"id": 156, "seek": 127692, "start": 1276.92, "end": 1281.76, "text": " And so, we have to compare them and make sure they're the same, and then we'll say, okay,", "tokens": [400, 370, 11, 321, 362, 281, 6794, 552, 293, 652, 988, 436, 434, 264, 912, 11, 293, 550, 321, 603, 584, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.14473402500152588, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.976786658517085e-05}, {"id": 157, "seek": 127692, "start": 1281.76, "end": 1288.16, "text": " I'll just keep one and throw away the others. This is the duplication of type, it is called.", "tokens": [286, 603, 445, 1066, 472, 293, 3507, 1314, 264, 2357, 13, 639, 307, 264, 17154, 399, 295, 2010, 11, 309, 307, 1219, 13], "temperature": 0.0, "avg_logprob": -0.14473402500152588, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.976786658517085e-05}, {"id": 158, "seek": 127692, "start": 1288.16, "end": 1297.0, "text": " And so, this process takes a huge amount of time, which is, well, for, for huge libraries,", "tokens": [400, 370, 11, 341, 1399, 2516, 257, 2603, 2372, 295, 565, 11, 597, 307, 11, 731, 11, 337, 11, 337, 2603, 15148, 11], "temperature": 0.0, "avg_logprob": -0.14473402500152588, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.976786658517085e-05}, {"id": 159, "seek": 127692, "start": 1297.0, "end": 1303.92, "text": " it can take, you know, it can take forever. So, we have heuristics to make this thing,", "tokens": [309, 393, 747, 11, 291, 458, 11, 309, 393, 747, 5680, 13, 407, 11, 321, 362, 415, 374, 6006, 281, 652, 341, 551, 11], "temperature": 0.0, "avg_logprob": -0.14473402500152588, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.976786658517085e-05}, {"id": 160, "seek": 130392, "start": 1303.92, "end": 1312.6000000000001, "text": " you know, be faster, but then, you know, it takes time. So, we have some of the heuristics", "tokens": [291, 458, 11, 312, 4663, 11, 457, 550, 11, 291, 458, 11, 309, 2516, 565, 13, 407, 11, 321, 362, 512, 295, 264, 415, 374, 6006], "temperature": 0.0, "avg_logprob": -0.14600491523742676, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.00011314930452499539}, {"id": 161, "seek": 130392, "start": 1312.6000000000001, "end": 1321.28, "text": " that we're using now are, is in the land of partitioning, like we will do things, you", "tokens": [300, 321, 434, 1228, 586, 366, 11, 307, 294, 264, 2117, 295, 24808, 278, 11, 411, 321, 486, 360, 721, 11, 291], "temperature": 0.0, "avg_logprob": -0.14600491523742676, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.00011314930452499539}, {"id": 162, "seek": 130392, "start": 1321.28, "end": 1331.0, "text": " know, like piecewise, and, and try it so that we can do things in parallel, right? It is", "tokens": [458, 11, 411, 2522, 3711, 11, 293, 11, 293, 853, 309, 370, 300, 321, 393, 360, 721, 294, 8952, 11, 558, 30, 467, 307], "temperature": 0.0, "avg_logprob": -0.14600491523742676, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.00011314930452499539}, {"id": 163, "seek": 133100, "start": 1331.0, "end": 1336.56, "text": " not mainline yet, but this is the, you know, the, the future we're, we're thinking about.", "tokens": [406, 2135, 1889, 1939, 11, 457, 341, 307, 264, 11, 291, 458, 11, 264, 11, 264, 2027, 321, 434, 11, 321, 434, 1953, 466, 13], "temperature": 0.0, "avg_logprob": -0.12020764260921839, "compression_ratio": 1.6577777777777778, "no_speech_prob": 6.794155342504382e-05}, {"id": 164, "seek": 133100, "start": 1336.56, "end": 1343.68, "text": " Another approach is to have the types be de-duplicated before we intervene. This is what, for instance,", "tokens": [3996, 3109, 307, 281, 362, 264, 3467, 312, 368, 12, 769, 564, 3587, 949, 321, 30407, 13, 639, 307, 437, 11, 337, 5197, 11], "temperature": 0.0, "avg_logprob": -0.12020764260921839, "compression_ratio": 1.6577777777777778, "no_speech_prob": 6.794155342504382e-05}, {"id": 165, "seek": 133100, "start": 1343.68, "end": 1351.6, "text": " the CTF guys do with C. So, they will do the de-duplication at debug info production time,", "tokens": [264, 19529, 37, 1074, 360, 365, 383, 13, 407, 11, 436, 486, 360, 264, 368, 12, 769, 4770, 399, 412, 24083, 13614, 4265, 565, 11], "temperature": 0.0, "avg_logprob": -0.12020764260921839, "compression_ratio": 1.6577777777777778, "no_speech_prob": 6.794155342504382e-05}, {"id": 166, "seek": 133100, "start": 1351.6, "end": 1357.96, "text": " and then in that, in that case, we're golden. There is another, another case where we're", "tokens": [293, 550, 294, 300, 11, 294, 300, 1389, 11, 321, 434, 9729, 13, 821, 307, 1071, 11, 1071, 1389, 689, 321, 434], "temperature": 0.0, "avg_logprob": -0.12020764260921839, "compression_ratio": 1.6577777777777778, "no_speech_prob": 6.794155342504382e-05}, {"id": 167, "seek": 135796, "start": 1357.96, "end": 1363.4, "text": " doing that is when we're building distribution packages, like, for instance, I don't know,", "tokens": [884, 300, 307, 562, 321, 434, 2390, 7316, 17401, 11, 411, 11, 337, 5197, 11, 286, 500, 380, 458, 11], "temperature": 0.0, "avg_logprob": -0.17714722302495217, "compression_ratio": 1.6, "no_speech_prob": 0.00017338644829578698}, {"id": 168, "seek": 135796, "start": 1363.4, "end": 1370.8, "text": " RPM or Debian package or whatever, there is a tool which is called DWZ, which does the", "tokens": [37389, 420, 1346, 20196, 7372, 420, 2035, 11, 456, 307, 257, 2290, 597, 307, 1219, 45318, 57, 11, 597, 775, 264], "temperature": 0.0, "avg_logprob": -0.17714722302495217, "compression_ratio": 1.6, "no_speech_prob": 0.00017338644829578698}, {"id": 169, "seek": 135796, "start": 1370.8, "end": 1377.88, "text": " de-duplication to one extent. Well, when it works, it works. It does the de-duplication,", "tokens": [368, 12, 769, 4770, 399, 281, 472, 8396, 13, 1042, 11, 562, 309, 1985, 11, 309, 1985, 13, 467, 775, 264, 368, 12, 769, 4770, 399, 11], "temperature": 0.0, "avg_logprob": -0.17714722302495217, "compression_ratio": 1.6, "no_speech_prob": 0.00017338644829578698}, {"id": 170, "seek": 135796, "start": 1377.88, "end": 1384.28, "text": " but the problem is DWZ has the same issue as us, and sometimes when the binary is too", "tokens": [457, 264, 1154, 307, 45318, 57, 575, 264, 912, 2734, 382, 505, 11, 293, 2171, 562, 264, 17434, 307, 886], "temperature": 0.0, "avg_logprob": -0.17714722302495217, "compression_ratio": 1.6, "no_speech_prob": 0.00017338644829578698}, {"id": 171, "seek": 138428, "start": 1384.28, "end": 1391.56, "text": " big, DWZ will just give up, and in that case, well, we have to use our little hands and", "tokens": [955, 11, 45318, 57, 486, 445, 976, 493, 11, 293, 294, 300, 1389, 11, 731, 11, 321, 362, 281, 764, 527, 707, 2377, 293], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 172, "seek": 138428, "start": 1391.56, "end": 1395.24, "text": " do the de-duplication in line, and then, well, we'll spend time.", "tokens": [360, 264, 368, 12, 769, 4770, 399, 294, 1622, 11, 293, 550, 11, 731, 11, 321, 603, 3496, 565, 13], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 173, "seek": 138428, "start": 1395.24, "end": 1400.8, "text": " But this because someone should get DWZ, turn it into a library and put it in the linker?", "tokens": [583, 341, 570, 1580, 820, 483, 45318, 57, 11, 1261, 309, 666, 257, 6405, 293, 829, 309, 294, 264, 2113, 260, 30], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 174, "seek": 138428, "start": 1400.8, "end": 1401.8, "text": " Yes, and, yes.", "tokens": [1079, 11, 293, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 175, "seek": 138428, "start": 1401.8, "end": 1403.2, "text": " Do it in link time?", "tokens": [1144, 309, 294, 2113, 565, 30], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 176, "seek": 138428, "start": 1403.2, "end": 1409.6399999999999, "text": " Yeah, we can, yeah, that's, that's something that, that's one of the things that we need", "tokens": [865, 11, 321, 393, 11, 1338, 11, 300, 311, 11, 300, 311, 746, 300, 11, 300, 311, 472, 295, 264, 721, 300, 321, 643], "temperature": 0.0, "avg_logprob": -0.2639820986780627, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.00042531348299235106}, {"id": 177, "seek": 140964, "start": 1409.64, "end": 1418.24, "text": " to do to improve the entire ecosystem of these things, and, yeah, that's definitely, yeah.", "tokens": [281, 360, 281, 3470, 264, 2302, 11311, 295, 613, 721, 11, 293, 11, 1338, 11, 300, 311, 2138, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.42525328251353484, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0006723687401972711}, {"id": 178, "seek": 140964, "start": 1418.24, "end": 1426.2800000000002, "text": " So, yeah. So, as, do we have other questions?", "tokens": [407, 11, 1338, 13, 407, 11, 382, 11, 360, 321, 362, 661, 1651, 30], "temperature": 0.0, "avg_logprob": -0.42525328251353484, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0006723687401972711}, {"id": 179, "seek": 140964, "start": 1426.2800000000002, "end": 1432.48, "text": " Yes, are there any other formats that are on your road map?", "tokens": [1079, 11, 366, 456, 604, 661, 25879, 300, 366, 322, 428, 3060, 4471, 30], "temperature": 0.0, "avg_logprob": -0.42525328251353484, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0006723687401972711}, {"id": 180, "seek": 143248, "start": 1432.48, "end": 1439.8, "text": " Right now, no, but, you know, like, three months ago, BTF was not on my road map, so, you know,", "tokens": [1779, 586, 11, 572, 11, 457, 11, 291, 458, 11, 411, 11, 1045, 2493, 2057, 11, 31144, 37, 390, 406, 322, 452, 3060, 4471, 11, 370, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.2300145252641425, "compression_ratio": 1.4770114942528736, "no_speech_prob": 0.00019549093849491328}, {"id": 181, "seek": 143248, "start": 1439.8, "end": 1443.96, "text": " the future is not what it used to be, so, I don't know, yeah.", "tokens": [264, 2027, 307, 406, 437, 309, 1143, 281, 312, 11, 370, 11, 286, 500, 380, 458, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2300145252641425, "compression_ratio": 1.4770114942528736, "no_speech_prob": 0.00019549093849491328}, {"id": 182, "seek": 143248, "start": 1443.96, "end": 1453.6, "text": " Anyway, so, yeah, we are on, hosted on Sourceware, we still use mailing lists, you send us patches,", "tokens": [5684, 11, 370, 11, 1338, 11, 321, 366, 322, 11, 19204, 322, 29629, 3039, 11, 321, 920, 764, 41612, 14511, 11, 291, 2845, 505, 26531, 11], "temperature": 0.0, "avg_logprob": -0.2300145252641425, "compression_ratio": 1.4770114942528736, "no_speech_prob": 0.00019549093849491328}, {"id": 183, "seek": 145360, "start": 1453.6, "end": 1462.6, "text": " and yeah, you can find us on IRC, on the, on the, of this network, and, well, thank you very much.", "tokens": [50364, 293, 1338, 11, 291, 393, 915, 505, 322, 16486, 34, 11, 322, 264, 11, 322, 264, 11, 295, 341, 3209, 11, 293, 11, 731, 11, 1309, 291, 588, 709, 13, 50814], "temperature": 0.0, "avg_logprob": -0.32118479410807294, "compression_ratio": 1.1264367816091954, "no_speech_prob": 0.00016793646500445902}], "language": "en"}