{"text": " Hi, my name is Roman, I'm Principal Software Engineer and Network Service Technique at Profine. Today I'll tell you how to build a platform agnostic and hardware agnostic secure network of trusted applications on untrusted hosts. We all love the cloud. It's convenient. It enables companies to save money, grow faster and illuminates the need for a ton of work for managing and maintaining our own infrastructure. It simply makes our lives easier. Well, for the most part. Unfortunately, security breaches do happen and they're costly. According to IBM Cost of a Data Breach 2022 report, $9.44 million is the average cost of a data breach in the US, $4.35 million is the average total cost of a data breach globally and $10.10 million is the average total cost of a breach in the healthcare industry. Unfortunately, or rather quite fortunately given the risks, businesses from various highly regulated sectors like financial or medical simply cannot benefit from cloud offerings due to different laws around things like privacy and data protection. But it doesn't necessarily have to be this way. If it is for computing, by allowing protection of data in use creates opportunities to do things which simply weren't possible before. One way to benefit from the collection of computing would be to just simply use the TEs directly. For example, we could use the SDK provided by the hardware manufacturer and equipped with a fixed stack of documentation all we go. It works, but there are quite a few drawbacks. First and foremost, security is hard. Writing software directly communicating with a secure CPU is not exactly everyone's cup of tea. If all you need is a simple microservice application with a small REST API, diving deep into internals of a particular hardware technology just should not be necessary. It takes away the precious time that could be otherwise spent on developing revenue-producing business logic. But let's say we went ahead and developed a secure layer interfacing with a particular CPU technology. Well, now we have to maintain it. Now apart from that, we also have to fix any bugs while having it reduced and hoped that none of them are exploitable. People make mistakes, and the more code there is, the more opportunity there is to make one. After putting all of this work in, now imagine that you want to switch to a different service provider, which does not offer the same hardware technology you've used originally. Or much more concerning, what if vulnerability is discovered in a particular hardware technology you developed against? The different trust execution environments just are not exactly compatible. So your level of just two choices really is either wait until the vulnerability is fixed and hope your application is not exploited in the meantime, or you go ahead and redo all of the work you've already done for the original technology for the new one. Last but not least, chances are that someone had already done this before, and fundamentally the concepts that make systems secure do not change. So most likely you're going to just repeat the same work someone else had already done. At Rofin, we are custodians of the NRX open source project, which among other things is designed to address exactly the issues I've just outlined. It's a thin, secure layer of abstraction in between the host and the TE. It's essentially a secure runtime, which lets you execute your WebAssembly workloads inside arbitrary trust execution environments. NRX has supported various backends, today that's Intel GX and AMD Cells and P, but as more and more TEs are made available, support will be added for them as well. NRX project was started in 2019, and in 2021, Rofin was founded, which was committed to being 100% open source and providing services and support for NRX. In 2022, we also launched our enterprise products. So now why WebAssembly? It's polyglot. It's supported by languages like Rust, C, C++, Go, Java, Python, C Sharp, Java, Ruby, and the list goes on and on. So it's designed to be portable and embeddable. It has functional equivalents to a usual native binary, so for the most part, development process is exactly the same as for developing any other application. There are emerging system API standards, called WASI, to which, by the way, we also contribute. You can run NRX outside of TE for development purposes. It runs on Linux, Windows, and Mac, both XA664 and ARM64 are supported. Trusted execution is currently only available on XA664 Linux. For SGX, you'll need a recent kernel, and a few Intel provider services running, like ASMD and PCCS, and for AMD Cells and P, all you really need is, unfortunately, a recent kernel with a patch set provided by AMD. So the patches are not mainline yet, but we also maintain our own kernel tree with everything you could possibly need for this. Now let's see how is NRX actually deployed. On the left here, we have a tenant. Let's call her Jane. On the right, we have a CSP server with a supported CPU, on which Jane wants to deploy her workload. How does Jane ensure integrity of the workload being executed by CSP and confidentiality of his data in use? Do that, Jane will ask to execute her workload in NRX. The first thing that the KEEP does is it asks a secure CPU to measure the encrypted memory pages containing the KEEP itself. This is the execution layer and the sheen. The CPU then returns a cryptographically signed attestation report containing the measurement or along with information about the CPU, for example, the firmware version used. The execution layer then sends the report to an attestation service for validation. In NRX, this attestation service is called Steward. The Steward will make sure that the KEEP is indeed trusted. It will check the signature of the report to ensure it's being run in a hardware-based trusted institution environment and will also make sure, for example, that the CPU firmware version used is not vulnerable and will verify that NRX execution layer was not tampered with. On successful attestation, Steward then issues a certificate for the KEEP, which is used to fetch the workload from a registry. We call it drawbridge in NRX. And the certificate is also used for performing cryptographic operations, for example, for providing transparent TLS to the workload. Now let's see how this works in practice. To begin with, let's see how do we actually run something within an NRX KEEP. The fundamental unit of work executed by NRX today consists of just a WebAssembly executable and NRX KEEP configuration. For example, here it looks for my chat server that is going to secure later. This is the KEEP configuration. So here is my Steward configured, my personal Steward that I've deployed on VPS, and my Stern IO configuration. And in this case, I want to inherit everything from the host, so that means I want to print everything from the host and I also get a sign in from the host. This file will also contain things like network policy or trust anchors and other things like that. I've already uploaded this to my personal drawbridge and I tagged it with a tag of 010. So let's see what that looks like. For that, I'll do a request to my drawbridge and what I get back here for this request is a tag, right? Or we also call it an entry. And so an entry is nothing else than a node inside a merkle tree. And it's a merkle tree because it contains the digest of the contents of itself. Now what does it mean is that if I would, for example, go one layer deeper and inspect the actual tree associated with this tag, I'll see that it contains the NRS.toml and made it wasn't we've seen earlier. Now if I were to, for example, compute the digest of my NRS.toml, you'll see that this is exactly the same digest we see here and here. Now I can go, of course, one step up and instead of computing the digest of the NRS.toml, I can compute the digest of the, well, the actual entry, the actual tag, right? For that, I will just do a request again to the same URL and again compute the digest of it. Now, if you remember, you'll notice that this is again exactly the same digest that we see in our tag, right? And so this digest is, in fact, a digest of the minified JSON of this object that we've seen over here, right? So this is nicely formed for us by JQ, but we need to request directly, just get a minified JSON, which we then hash. So let's, so here I'm logged in to AMD's 7SMP capable machine. I could, for example, read the CPU info and I will grab for model name and only want one entry and see that this is indeed an AMD Apex 513 processor. So I'm going to use NRX deploy and I'll also specify the backend explicitly to, yeah, well, deploy the work code we just looked at. So I'm going to use again my local, well, not my local, sorry, my custom drawbridge. I'll deploy the chat server version 101, exactly the same one that we have seen before. And then I'm going to switch to yet another server again remote. This one has support for the sgx and again I'll do, here we see this is Intel Xeon 6338. And here I'll also do NRX deploy and in this case I will execute the chat client. Now once it starts, it will ask me for a URL, I'll put here the address and the port. So you can see here I've connected, here you can see the server also acknowledged the connection. And if you just look here, you'll see the exact same digest we've just seen in our entry. It was over here. So we also see the slug of the server, we just rented that other server, the version. So all this information came from the certificate, it's cryptographically signed data contained within the certificate, which we are, well, NRX actually parts for us and exposed to the work load. Similarly, the server also have received the slug that the client was deployed from and it also received the digest of the work load. So by looking at the certificate, we now can know exactly what workload is that other party running. We could also try to inspect this, we can use OpenSSL to connect and sure enough we see our certificate, you can see here that it's currently called, it's a common name, it should be a san of course, but it's just a proof of concept. So you can see here the certificate chain that we have, well, we have a certificate with a common name associated with the slug and the digest. And it was issued to us by the steward, by the steward that I have deployed in my infrastructure. And there's also my own CA in the root chain, which actually signed as a steward cert before. And if we look at the server logs, we'll notice the OpenSSL connection, which actually was not left in by the server. And it says here that the client did not present a valid certificate. So this was not a keep with the valid certificate issued by the steward, therefore the server didn't trust it and didn't let it in the secure chat room. Similarly, if I were to use NRX with a different backend than SGX, for example, I would use a KVM, which is not a real TE, right, it's just a KVM backend, it will not even attest to the steward. So the steward wouldn't issue a cert for us, right, and then we cannot actually execute the workload in NRX. Now let's look at how we actually achieved this. And to begin with, let's look at the client. And you'll notice it's quite a small executable actually. And notice also, so this workload doesn't actually need to do any TLS itself or anything like that. NRX Runtime handles all the TLS connections for it, so, and by default all connections are TLS anyway. So we're going to use a virtual file system to connect to an address at runtime. Unfortunately, it's required right now due to the limitation of the YG spec, but I get there's more going on on providing this APIs, but currently it's not possible to just call or connect Cisco like you would normally do, but that's why NRX provides a virtual file system to actually connect to a particular address. Now similarly, there's another virtual file system to extract the peer data from the connection we have established, and in this case we can simply match on that peer information. So here for example, if we are presented with an anonymous peer, so this which did not have a TLS certificate, we just simply abort. And this would also be triggered if the certificate would be not signed by a trusted party, like a stewardly trust. If it was a local workload, and it was executed in a real TEE, right, we could still trust it because we know the expected digest of the packages we have uploaded to the drawbridge. This by the way, the exact same digest we have seen before, maybe you see, it is over here. So this is the exact same digest we've looked at before. Now in a high B flow, of course, we're presented with the actual NRX key, which is then associated with a slug and the digest. And what we can do here is we can actually match on the actual workload slug. So where did this workload actually came from, it's version, right, and in this case we don't even need to check the digest because we trust the drawbridge slug. So in this case, we have verified these three versions, and we do not want to allow any other versions, right. Of course, this would eventually become a key configuration, probably, it could be specified as a tunnel, but for now, just for simplicity, I've included everything in the source code. Now similarly, we have the server part. And it has a very similar peer check over here, where it again checks for anonymous local key. And it actually doesn't want any local workload in, and it only allows essentially official releases that they're verified and were issued perhaps by this entity over here. So let's get back to the slides. If you're interested in this project, you can get involved using one of the links provided over here. And yeah, now a moment of a set announcement. Just a few hours before recording this video, I found out that Profian is closing, and therefore the NRS project is looking for maintainers, and I'm looking for a job. So if you know anyone who would be interested in the NRS project or me, please let me know. You can contact me or email or LinkedIn, and here's my Github handle. And yeah, now it's time for questions. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.92, "text": " Hi, my name is Roman, I'm Principal Software Engineer and Network Service Technique at", "tokens": [50364, 2421, 11, 452, 1315, 307, 8566, 11, 286, 478, 38575, 27428, 15808, 293, 12640, 9561, 8337, 1925, 412, 50910], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 1, "seek": 0, "start": 10.92, "end": 11.92, "text": " Profine.", "tokens": [50910, 6039, 533, 13, 50960], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 2, "seek": 0, "start": 11.92, "end": 16.96, "text": " Today I'll tell you how to build a platform agnostic and hardware agnostic secure network", "tokens": [50960, 2692, 286, 603, 980, 291, 577, 281, 1322, 257, 3663, 623, 77, 19634, 293, 8837, 623, 77, 19634, 7144, 3209, 51212], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 3, "seek": 0, "start": 16.96, "end": 20.64, "text": " of trusted applications on untrusted hosts.", "tokens": [51212, 295, 16034, 5821, 322, 1701, 81, 6589, 21573, 13, 51396], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 4, "seek": 0, "start": 20.64, "end": 22.240000000000002, "text": " We all love the cloud.", "tokens": [51396, 492, 439, 959, 264, 4588, 13, 51476], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 5, "seek": 0, "start": 22.240000000000002, "end": 23.240000000000002, "text": " It's convenient.", "tokens": [51476, 467, 311, 10851, 13, 51526], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 6, "seek": 0, "start": 23.240000000000002, "end": 28.32, "text": " It enables companies to save money, grow faster and illuminates the need for a ton of work", "tokens": [51526, 467, 17077, 3431, 281, 3155, 1460, 11, 1852, 4663, 293, 28593, 1024, 264, 643, 337, 257, 2952, 295, 589, 51780], "temperature": 0.0, "avg_logprob": -0.23572449935109993, "compression_ratio": 1.5, "no_speech_prob": 0.05545482039451599}, {"id": 7, "seek": 2832, "start": 28.32, "end": 30.84, "text": " for managing and maintaining our own infrastructure.", "tokens": [50364, 337, 11642, 293, 14916, 527, 1065, 6896, 13, 50490], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 8, "seek": 2832, "start": 30.84, "end": 32.84, "text": " It simply makes our lives easier.", "tokens": [50490, 467, 2935, 1669, 527, 2909, 3571, 13, 50590], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 9, "seek": 2832, "start": 32.84, "end": 35.68, "text": " Well, for the most part.", "tokens": [50590, 1042, 11, 337, 264, 881, 644, 13, 50732], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 10, "seek": 2832, "start": 35.68, "end": 40.480000000000004, "text": " Unfortunately, security breaches do happen and they're costly.", "tokens": [50732, 8590, 11, 3825, 1403, 13272, 360, 1051, 293, 436, 434, 28328, 13, 50972], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 11, "seek": 2832, "start": 40.480000000000004, "end": 47.2, "text": " According to IBM Cost of a Data Breach 2022 report, $9.44 million is the average cost of", "tokens": [50972, 7328, 281, 23487, 20863, 295, 257, 11888, 7090, 608, 20229, 2275, 11, 1848, 24, 13, 13912, 2459, 307, 264, 4274, 2063, 295, 51308], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 12, "seek": 2832, "start": 47.2, "end": 52.88, "text": " a data breach in the US, $4.35 million is the average total cost of a data breach globally", "tokens": [51308, 257, 1412, 31086, 294, 264, 2546, 11, 1848, 19, 13, 8794, 2459, 307, 264, 4274, 3217, 2063, 295, 257, 1412, 31086, 18958, 51592], "temperature": 0.0, "avg_logprob": -0.23686396557351816, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.06249744072556496}, {"id": 13, "seek": 5288, "start": 52.88, "end": 58.88, "text": " and $10.10 million is the average total cost of a breach in the healthcare industry.", "tokens": [50364, 293, 1848, 3279, 13, 3279, 2459, 307, 264, 4274, 3217, 2063, 295, 257, 31086, 294, 264, 8884, 3518, 13, 50664], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 14, "seek": 5288, "start": 58.88, "end": 63.440000000000005, "text": " Unfortunately, or rather quite fortunately given the risks, businesses from various highly", "tokens": [50664, 8590, 11, 420, 2831, 1596, 25511, 2212, 264, 10888, 11, 6011, 490, 3683, 5405, 50892], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 15, "seek": 5288, "start": 63.440000000000005, "end": 67.96000000000001, "text": " regulated sectors like financial or medical simply cannot benefit from cloud offerings", "tokens": [50892, 26243, 18373, 411, 4669, 420, 4625, 2935, 2644, 5121, 490, 4588, 25898, 51118], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 16, "seek": 5288, "start": 67.96000000000001, "end": 70.96000000000001, "text": " due to different laws around things like privacy and data protection.", "tokens": [51118, 3462, 281, 819, 6064, 926, 721, 411, 11427, 293, 1412, 6334, 13, 51268], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 17, "seek": 5288, "start": 70.96000000000001, "end": 73.96000000000001, "text": " But it doesn't necessarily have to be this way.", "tokens": [51268, 583, 309, 1177, 380, 4725, 362, 281, 312, 341, 636, 13, 51418], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 18, "seek": 5288, "start": 73.96000000000001, "end": 79.36, "text": " If it is for computing, by allowing protection of data in use creates opportunities to do", "tokens": [51418, 759, 309, 307, 337, 15866, 11, 538, 8293, 6334, 295, 1412, 294, 764, 7829, 4786, 281, 360, 51688], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 19, "seek": 5288, "start": 79.36, "end": 82.32000000000001, "text": " things which simply weren't possible before.", "tokens": [51688, 721, 597, 2935, 4999, 380, 1944, 949, 13, 51836], "temperature": 0.0, "avg_logprob": -0.254316347454666, "compression_ratio": 1.6246056782334384, "no_speech_prob": 0.010984349064528942}, {"id": 20, "seek": 8232, "start": 82.32, "end": 86.67999999999999, "text": " One way to benefit from the collection of computing would be to just simply use the", "tokens": [50364, 1485, 636, 281, 5121, 490, 264, 5765, 295, 15866, 576, 312, 281, 445, 2935, 764, 264, 50582], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 21, "seek": 8232, "start": 86.67999999999999, "end": 87.67999999999999, "text": " TEs directly.", "tokens": [50582, 19744, 82, 3838, 13, 50632], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 22, "seek": 8232, "start": 87.67999999999999, "end": 93.11999999999999, "text": " For example, we could use the SDK provided by the hardware manufacturer and equipped", "tokens": [50632, 1171, 1365, 11, 321, 727, 764, 264, 37135, 5649, 538, 264, 8837, 18022, 293, 15218, 50904], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 23, "seek": 8232, "start": 93.11999999999999, "end": 96.28, "text": " with a fixed stack of documentation all we go.", "tokens": [50904, 365, 257, 6806, 8630, 295, 14333, 439, 321, 352, 13, 51062], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 24, "seek": 8232, "start": 96.28, "end": 99.35999999999999, "text": " It works, but there are quite a few drawbacks.", "tokens": [51062, 467, 1985, 11, 457, 456, 366, 1596, 257, 1326, 2642, 17758, 13, 51216], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 25, "seek": 8232, "start": 99.35999999999999, "end": 102.72, "text": " First and foremost, security is hard.", "tokens": [51216, 2386, 293, 18864, 11, 3825, 307, 1152, 13, 51384], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 26, "seek": 8232, "start": 102.72, "end": 107.35999999999999, "text": " Writing software directly communicating with a secure CPU is not exactly everyone's cup", "tokens": [51384, 32774, 4722, 3838, 17559, 365, 257, 7144, 13199, 307, 406, 2293, 1518, 311, 4414, 51616], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 27, "seek": 8232, "start": 107.35999999999999, "end": 108.52, "text": " of tea.", "tokens": [51616, 295, 5817, 13, 51674], "temperature": 0.0, "avg_logprob": -0.20873952865600587, "compression_ratio": 1.553030303030303, "no_speech_prob": 0.189438596367836}, {"id": 28, "seek": 10852, "start": 108.52, "end": 114.96, "text": " If all you need is a simple microservice application with a small REST API, diving deep into internals", "tokens": [50364, 759, 439, 291, 643, 307, 257, 2199, 15547, 25006, 3861, 365, 257, 1359, 497, 14497, 9362, 11, 20241, 2452, 666, 2154, 1124, 50686], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 29, "seek": 10852, "start": 114.96, "end": 118.36, "text": " of a particular hardware technology just should not be necessary.", "tokens": [50686, 295, 257, 1729, 8837, 2899, 445, 820, 406, 312, 4818, 13, 50856], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 30, "seek": 10852, "start": 118.36, "end": 122.8, "text": " It takes away the precious time that could be otherwise spent on developing revenue-producing", "tokens": [50856, 467, 2516, 1314, 264, 12406, 565, 300, 727, 312, 5911, 4418, 322, 6416, 9324, 12, 14314, 2175, 51078], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 31, "seek": 10852, "start": 122.8, "end": 123.8, "text": " business logic.", "tokens": [51078, 1606, 9952, 13, 51128], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 32, "seek": 10852, "start": 123.8, "end": 129.12, "text": " But let's say we went ahead and developed a secure layer interfacing with a particular", "tokens": [51128, 583, 718, 311, 584, 321, 1437, 2286, 293, 4743, 257, 7144, 4583, 14510, 5615, 365, 257, 1729, 51394], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 33, "seek": 10852, "start": 129.12, "end": 130.12, "text": " CPU technology.", "tokens": [51394, 13199, 2899, 13, 51444], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 34, "seek": 10852, "start": 130.12, "end": 132.48, "text": " Well, now we have to maintain it.", "tokens": [51444, 1042, 11, 586, 321, 362, 281, 6909, 309, 13, 51562], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 35, "seek": 10852, "start": 132.48, "end": 137.96, "text": " Now apart from that, we also have to fix any bugs while having it reduced and hoped that", "tokens": [51562, 823, 4936, 490, 300, 11, 321, 611, 362, 281, 3191, 604, 15120, 1339, 1419, 309, 9212, 293, 19737, 300, 51836], "temperature": 0.0, "avg_logprob": -0.17665931958110392, "compression_ratio": 1.610223642172524, "no_speech_prob": 0.015420566312968731}, {"id": 36, "seek": 13796, "start": 137.96, "end": 140.92000000000002, "text": " none of them are exploitable.", "tokens": [50364, 6022, 295, 552, 366, 12382, 16772, 13, 50512], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 37, "seek": 13796, "start": 140.92000000000002, "end": 144.76000000000002, "text": " People make mistakes, and the more code there is, the more opportunity there is to make", "tokens": [50512, 3432, 652, 8038, 11, 293, 264, 544, 3089, 456, 307, 11, 264, 544, 2650, 456, 307, 281, 652, 50704], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 38, "seek": 13796, "start": 144.76000000000002, "end": 146.76000000000002, "text": " one.", "tokens": [50704, 472, 13, 50804], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 39, "seek": 13796, "start": 146.76000000000002, "end": 150.60000000000002, "text": " After putting all of this work in, now imagine that you want to switch to a different service", "tokens": [50804, 2381, 3372, 439, 295, 341, 589, 294, 11, 586, 3811, 300, 291, 528, 281, 3679, 281, 257, 819, 2643, 50996], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 40, "seek": 13796, "start": 150.60000000000002, "end": 155.72, "text": " provider, which does not offer the same hardware technology you've used originally.", "tokens": [50996, 12398, 11, 597, 775, 406, 2626, 264, 912, 8837, 2899, 291, 600, 1143, 7993, 13, 51252], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 41, "seek": 13796, "start": 155.72, "end": 160.16, "text": " Or much more concerning, what if vulnerability is discovered in a particular hardware technology", "tokens": [51252, 1610, 709, 544, 18087, 11, 437, 498, 24210, 307, 6941, 294, 257, 1729, 8837, 2899, 51474], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 42, "seek": 13796, "start": 160.16, "end": 161.88, "text": " you developed against?", "tokens": [51474, 291, 4743, 1970, 30, 51560], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 43, "seek": 13796, "start": 161.88, "end": 166.36, "text": " The different trust execution environments just are not exactly compatible.", "tokens": [51560, 440, 819, 3361, 15058, 12388, 445, 366, 406, 2293, 18218, 13, 51784], "temperature": 0.0, "avg_logprob": -0.18723552598865753, "compression_ratio": 1.6928327645051195, "no_speech_prob": 0.008444751612842083}, {"id": 44, "seek": 16636, "start": 166.36, "end": 170.8, "text": " So your level of just two choices really is either wait until the vulnerability is fixed", "tokens": [50364, 407, 428, 1496, 295, 445, 732, 7994, 534, 307, 2139, 1699, 1826, 264, 24210, 307, 6806, 50586], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 45, "seek": 16636, "start": 170.8, "end": 174.64000000000001, "text": " and hope your application is not exploited in the meantime, or you go ahead and redo", "tokens": [50586, 293, 1454, 428, 3861, 307, 406, 40918, 294, 264, 14991, 11, 420, 291, 352, 2286, 293, 29956, 50778], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 46, "seek": 16636, "start": 174.64000000000001, "end": 179.60000000000002, "text": " all of the work you've already done for the original technology for the new one.", "tokens": [50778, 439, 295, 264, 589, 291, 600, 1217, 1096, 337, 264, 3380, 2899, 337, 264, 777, 472, 13, 51026], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 47, "seek": 16636, "start": 179.60000000000002, "end": 185.28000000000003, "text": " Last but not least, chances are that someone had already done this before, and fundamentally", "tokens": [51026, 5264, 457, 406, 1935, 11, 10486, 366, 300, 1580, 632, 1217, 1096, 341, 949, 11, 293, 17879, 51310], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 48, "seek": 16636, "start": 185.28000000000003, "end": 188.16000000000003, "text": " the concepts that make systems secure do not change.", "tokens": [51310, 264, 10392, 300, 652, 3652, 7144, 360, 406, 1319, 13, 51454], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 49, "seek": 16636, "start": 188.16000000000003, "end": 193.52, "text": " So most likely you're going to just repeat the same work someone else had already done.", "tokens": [51454, 407, 881, 3700, 291, 434, 516, 281, 445, 7149, 264, 912, 589, 1580, 1646, 632, 1217, 1096, 13, 51722], "temperature": 0.0, "avg_logprob": -0.19530894778190402, "compression_ratio": 1.7366548042704626, "no_speech_prob": 0.09265385568141937}, {"id": 50, "seek": 19352, "start": 193.52, "end": 199.76000000000002, "text": " At Rofin, we are custodians of the NRX open source project, which among other things is", "tokens": [50364, 1711, 497, 2670, 259, 11, 321, 366, 14884, 378, 2567, 295, 264, 38399, 55, 1269, 4009, 1716, 11, 597, 3654, 661, 721, 307, 50676], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 51, "seek": 19352, "start": 199.76000000000002, "end": 203.08, "text": " designed to address exactly the issues I've just outlined.", "tokens": [50676, 4761, 281, 2985, 2293, 264, 2663, 286, 600, 445, 27412, 13, 50842], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 52, "seek": 19352, "start": 203.08, "end": 208.60000000000002, "text": " It's a thin, secure layer of abstraction in between the host and the TE.", "tokens": [50842, 467, 311, 257, 5862, 11, 7144, 4583, 295, 37765, 294, 1296, 264, 3975, 293, 264, 19744, 13, 51118], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 53, "seek": 19352, "start": 208.60000000000002, "end": 213.60000000000002, "text": " It's essentially a secure runtime, which lets you execute your WebAssembly workloads inside", "tokens": [51118, 467, 311, 4476, 257, 7144, 34474, 11, 597, 6653, 291, 14483, 428, 9573, 10884, 19160, 32452, 1854, 51368], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 54, "seek": 19352, "start": 213.60000000000002, "end": 215.88, "text": " arbitrary trust execution environments.", "tokens": [51368, 23211, 3361, 15058, 12388, 13, 51482], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 55, "seek": 19352, "start": 215.88, "end": 222.24, "text": " NRX has supported various backends, today that's Intel GX and AMD Cells and P, but as", "tokens": [51482, 38399, 55, 575, 8104, 3683, 646, 2581, 11, 965, 300, 311, 19762, 460, 55, 293, 34808, 383, 13677, 293, 430, 11, 457, 382, 51800], "temperature": 0.0, "avg_logprob": -0.29083229411732064, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.03357650712132454}, {"id": 56, "seek": 22224, "start": 222.24, "end": 227.28, "text": " more and more TEs are made available, support will be added for them as well.", "tokens": [50364, 544, 293, 544, 19744, 82, 366, 1027, 2435, 11, 1406, 486, 312, 3869, 337, 552, 382, 731, 13, 50616], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 57, "seek": 22224, "start": 227.28, "end": 232.32000000000002, "text": " NRX project was started in 2019, and in 2021, Rofin was founded, which was committed to", "tokens": [50616, 38399, 55, 1716, 390, 1409, 294, 6071, 11, 293, 294, 7201, 11, 497, 2670, 259, 390, 13234, 11, 597, 390, 7784, 281, 50868], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 58, "seek": 22224, "start": 232.32000000000002, "end": 237.48000000000002, "text": " being 100% open source and providing services and support for NRX.", "tokens": [50868, 885, 2319, 4, 1269, 4009, 293, 6530, 3328, 293, 1406, 337, 38399, 55, 13, 51126], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 59, "seek": 22224, "start": 237.48000000000002, "end": 241.08, "text": " In 2022, we also launched our enterprise products.", "tokens": [51126, 682, 20229, 11, 321, 611, 8730, 527, 14132, 3383, 13, 51306], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 60, "seek": 22224, "start": 241.08, "end": 244.8, "text": " So now why WebAssembly?", "tokens": [51306, 407, 586, 983, 9573, 10884, 19160, 30, 51492], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 61, "seek": 22224, "start": 244.8, "end": 245.8, "text": " It's polyglot.", "tokens": [51492, 467, 311, 6754, 7191, 310, 13, 51542], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 62, "seek": 22224, "start": 245.8, "end": 251.72, "text": " It's supported by languages like Rust, C, C++, Go, Java, Python, C Sharp, Java, Ruby,", "tokens": [51542, 467, 311, 8104, 538, 8650, 411, 34952, 11, 383, 11, 383, 25472, 11, 1037, 11, 10745, 11, 15329, 11, 383, 31654, 11, 10745, 11, 19907, 11, 51838], "temperature": 0.0, "avg_logprob": -0.1988796747031332, "compression_ratio": 1.4676258992805755, "no_speech_prob": 0.0013457488967105746}, {"id": 63, "seek": 25172, "start": 252.2, "end": 254.08, "text": " and the list goes on and on.", "tokens": [50388, 293, 264, 1329, 1709, 322, 293, 322, 13, 50482], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 64, "seek": 25172, "start": 254.08, "end": 257.44, "text": " So it's designed to be portable and embeddable.", "tokens": [50482, 407, 309, 311, 4761, 281, 312, 21800, 293, 12240, 67, 712, 13, 50650], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 65, "seek": 25172, "start": 257.44, "end": 262.28, "text": " It has functional equivalents to a usual native binary, so for the most part, development", "tokens": [50650, 467, 575, 11745, 9052, 791, 281, 257, 7713, 8470, 17434, 11, 370, 337, 264, 881, 644, 11, 3250, 50892], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 66, "seek": 25172, "start": 262.28, "end": 266.92, "text": " process is exactly the same as for developing any other application.", "tokens": [50892, 1399, 307, 2293, 264, 912, 382, 337, 6416, 604, 661, 3861, 13, 51124], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 67, "seek": 25172, "start": 266.92, "end": 273.0, "text": " There are emerging system API standards, called WASI, to which, by the way, we also contribute.", "tokens": [51124, 821, 366, 14989, 1185, 9362, 7787, 11, 1219, 28984, 40, 11, 281, 597, 11, 538, 264, 636, 11, 321, 611, 10586, 13, 51428], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 68, "seek": 25172, "start": 273.0, "end": 277.96, "text": " You can run NRX outside of TE for development purposes.", "tokens": [51428, 509, 393, 1190, 38399, 55, 2380, 295, 19744, 337, 3250, 9932, 13, 51676], "temperature": 0.0, "avg_logprob": -0.20076724461146764, "compression_ratio": 1.51171875, "no_speech_prob": 0.22797945141792297}, {"id": 69, "seek": 27796, "start": 277.96, "end": 284.52, "text": " It runs on Linux, Windows, and Mac, both XA664 and ARM64 are supported.", "tokens": [50364, 467, 6676, 322, 18734, 11, 8591, 11, 293, 5707, 11, 1293, 1783, 32, 15237, 19, 293, 45209, 19395, 366, 8104, 13, 50692], "temperature": 0.0, "avg_logprob": -0.25571186707751586, "compression_ratio": 1.4808510638297872, "no_speech_prob": 0.13835588097572327}, {"id": 70, "seek": 27796, "start": 284.52, "end": 289.76, "text": " Trusted execution is currently only available on XA664 Linux.", "tokens": [50692, 1765, 6589, 15058, 307, 4362, 787, 2435, 322, 1783, 32, 15237, 19, 18734, 13, 50954], "temperature": 0.0, "avg_logprob": -0.25571186707751586, "compression_ratio": 1.4808510638297872, "no_speech_prob": 0.13835588097572327}, {"id": 71, "seek": 27796, "start": 289.76, "end": 294.88, "text": " For SGX, you'll need a recent kernel, and a few Intel provider services running, like", "tokens": [50954, 1171, 34520, 55, 11, 291, 603, 643, 257, 5162, 28256, 11, 293, 257, 1326, 19762, 12398, 3328, 2614, 11, 411, 51210], "temperature": 0.0, "avg_logprob": -0.25571186707751586, "compression_ratio": 1.4808510638297872, "no_speech_prob": 0.13835588097572327}, {"id": 72, "seek": 27796, "start": 294.88, "end": 302.28, "text": " ASMD and PCCS, and for AMD Cells and P, all you really need is, unfortunately, a recent", "tokens": [51210, 7469, 44, 35, 293, 6465, 26283, 11, 293, 337, 34808, 383, 13677, 293, 430, 11, 439, 291, 534, 643, 307, 11, 7015, 11, 257, 5162, 51580], "temperature": 0.0, "avg_logprob": -0.25571186707751586, "compression_ratio": 1.4808510638297872, "no_speech_prob": 0.13835588097572327}, {"id": 73, "seek": 27796, "start": 302.28, "end": 304.56, "text": " kernel with a patch set provided by AMD.", "tokens": [51580, 28256, 365, 257, 9972, 992, 5649, 538, 34808, 13, 51694], "temperature": 0.0, "avg_logprob": -0.25571186707751586, "compression_ratio": 1.4808510638297872, "no_speech_prob": 0.13835588097572327}, {"id": 74, "seek": 30456, "start": 304.56, "end": 309.44, "text": " So the patches are not mainline yet, but we also maintain our own kernel tree with everything", "tokens": [50364, 407, 264, 26531, 366, 406, 2135, 1889, 1939, 11, 457, 321, 611, 6909, 527, 1065, 28256, 4230, 365, 1203, 50608], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 75, "seek": 30456, "start": 309.44, "end": 312.4, "text": " you could possibly need for this.", "tokens": [50608, 291, 727, 6264, 643, 337, 341, 13, 50756], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 76, "seek": 30456, "start": 312.4, "end": 316.76, "text": " Now let's see how is NRX actually deployed.", "tokens": [50756, 823, 718, 311, 536, 577, 307, 38399, 55, 767, 17826, 13, 50974], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 77, "seek": 30456, "start": 316.76, "end": 318.96, "text": " On the left here, we have a tenant.", "tokens": [50974, 1282, 264, 1411, 510, 11, 321, 362, 257, 31000, 13, 51084], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 78, "seek": 30456, "start": 318.96, "end": 320.4, "text": " Let's call her Jane.", "tokens": [51084, 961, 311, 818, 720, 13048, 13, 51156], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 79, "seek": 30456, "start": 320.4, "end": 328.04, "text": " On the right, we have a CSP server with a supported CPU, on which Jane wants to deploy her workload.", "tokens": [51156, 1282, 264, 558, 11, 321, 362, 257, 9460, 47, 7154, 365, 257, 8104, 13199, 11, 322, 597, 13048, 2738, 281, 7274, 720, 20139, 13, 51538], "temperature": 0.0, "avg_logprob": -0.19940602648389208, "compression_ratio": 1.5091743119266054, "no_speech_prob": 0.018259283155202866}, {"id": 80, "seek": 32804, "start": 328.04, "end": 334.6, "text": " How does Jane ensure integrity of the workload being executed by CSP and confidentiality", "tokens": [50364, 1012, 775, 13048, 5586, 16000, 295, 264, 20139, 885, 17577, 538, 9460, 47, 293, 27054, 507, 50692], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 81, "seek": 32804, "start": 334.6, "end": 337.04, "text": " of his data in use?", "tokens": [50692, 295, 702, 1412, 294, 764, 30, 50814], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 82, "seek": 32804, "start": 337.04, "end": 344.52000000000004, "text": " Do that, Jane will ask to execute her workload in NRX.", "tokens": [50814, 1144, 300, 11, 13048, 486, 1029, 281, 14483, 720, 20139, 294, 38399, 55, 13, 51188], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 83, "seek": 32804, "start": 344.52000000000004, "end": 350.0, "text": " The first thing that the KEEP does is it asks a secure CPU to measure the encrypted memory", "tokens": [51188, 440, 700, 551, 300, 264, 591, 32810, 775, 307, 309, 8962, 257, 7144, 13199, 281, 3481, 264, 36663, 4675, 51462], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 84, "seek": 32804, "start": 350.0, "end": 353.16, "text": " pages containing the KEEP itself.", "tokens": [51462, 7183, 19273, 264, 591, 32810, 2564, 13, 51620], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 85, "seek": 32804, "start": 353.16, "end": 356.84000000000003, "text": " This is the execution layer and the sheen.", "tokens": [51620, 639, 307, 264, 15058, 4583, 293, 264, 750, 268, 13, 51804], "temperature": 0.0, "avg_logprob": -0.1909516356712164, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.16877606511116028}, {"id": 86, "seek": 35684, "start": 356.84, "end": 362.11999999999995, "text": " The CPU then returns a cryptographically signed attestation report containing the measurement", "tokens": [50364, 440, 13199, 550, 11247, 257, 9844, 3108, 984, 8175, 951, 377, 399, 2275, 19273, 264, 13160, 50628], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 87, "seek": 35684, "start": 362.11999999999995, "end": 367.47999999999996, "text": " or along with information about the CPU, for example, the firmware version used.", "tokens": [50628, 420, 2051, 365, 1589, 466, 264, 13199, 11, 337, 1365, 11, 264, 30289, 3037, 1143, 13, 50896], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 88, "seek": 35684, "start": 367.47999999999996, "end": 371.91999999999996, "text": " The execution layer then sends the report to an attestation service for validation.", "tokens": [50896, 440, 15058, 4583, 550, 14790, 264, 2275, 281, 364, 951, 377, 399, 2643, 337, 24071, 13, 51118], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 89, "seek": 35684, "start": 371.91999999999996, "end": 376.35999999999996, "text": " In NRX, this attestation service is called Steward.", "tokens": [51118, 682, 38399, 55, 11, 341, 951, 377, 399, 2643, 307, 1219, 3592, 1007, 13, 51340], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 90, "seek": 35684, "start": 376.35999999999996, "end": 380.32, "text": " The Steward will make sure that the KEEP is indeed trusted.", "tokens": [51340, 440, 3592, 1007, 486, 652, 988, 300, 264, 591, 32810, 307, 6451, 16034, 13, 51538], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 91, "seek": 35684, "start": 380.32, "end": 384.35999999999996, "text": " It will check the signature of the report to ensure it's being run in a hardware-based", "tokens": [51538, 467, 486, 1520, 264, 13397, 295, 264, 2275, 281, 5586, 309, 311, 885, 1190, 294, 257, 8837, 12, 6032, 51740], "temperature": 0.0, "avg_logprob": -0.15598741583867903, "compression_ratio": 1.7245283018867925, "no_speech_prob": 0.0044676559045910835}, {"id": 92, "seek": 38436, "start": 384.36, "end": 389.16, "text": " trusted institution environment and will also make sure, for example, that the CPU firmware", "tokens": [50364, 16034, 7818, 2823, 293, 486, 611, 652, 988, 11, 337, 1365, 11, 300, 264, 13199, 30289, 50604], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 93, "seek": 38436, "start": 389.16, "end": 394.0, "text": " version used is not vulnerable and will verify that NRX execution layer was not tampered", "tokens": [50604, 3037, 1143, 307, 406, 10955, 293, 486, 16888, 300, 38399, 55, 15058, 4583, 390, 406, 7677, 40004, 50846], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 94, "seek": 38436, "start": 394.0, "end": 395.8, "text": " with.", "tokens": [50846, 365, 13, 50936], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 95, "seek": 38436, "start": 395.8, "end": 400.88, "text": " On successful attestation, Steward then issues a certificate for the KEEP, which is used", "tokens": [50936, 1282, 4406, 951, 377, 399, 11, 3592, 1007, 550, 2663, 257, 15953, 337, 264, 591, 32810, 11, 597, 307, 1143, 51190], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 96, "seek": 38436, "start": 400.88, "end": 403.72, "text": " to fetch the workload from a registry.", "tokens": [51190, 281, 23673, 264, 20139, 490, 257, 36468, 13, 51332], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 97, "seek": 38436, "start": 403.72, "end": 406.6, "text": " We call it drawbridge in NRX.", "tokens": [51332, 492, 818, 309, 2642, 18249, 294, 38399, 55, 13, 51476], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 98, "seek": 38436, "start": 406.6, "end": 411.88, "text": " And the certificate is also used for performing cryptographic operations, for example, for", "tokens": [51476, 400, 264, 15953, 307, 611, 1143, 337, 10205, 9844, 12295, 7705, 11, 337, 1365, 11, 337, 51740], "temperature": 0.0, "avg_logprob": -0.206526701266949, "compression_ratio": 1.6171003717472119, "no_speech_prob": 0.005300473887473345}, {"id": 99, "seek": 41188, "start": 411.88, "end": 415.32, "text": " providing transparent TLS to the workload.", "tokens": [50364, 6530, 12737, 314, 19198, 281, 264, 20139, 13, 50536], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 100, "seek": 41188, "start": 415.32, "end": 421.0, "text": " Now let's see how this works in practice.", "tokens": [50536, 823, 718, 311, 536, 577, 341, 1985, 294, 3124, 13, 50820], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 101, "seek": 41188, "start": 421.0, "end": 426.71999999999997, "text": " To begin with, let's see how do we actually run something within an NRX KEEP.", "tokens": [50820, 1407, 1841, 365, 11, 718, 311, 536, 577, 360, 321, 767, 1190, 746, 1951, 364, 38399, 55, 591, 32810, 13, 51106], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 102, "seek": 41188, "start": 426.71999999999997, "end": 432.4, "text": " The fundamental unit of work executed by NRX today consists of just a WebAssembly executable", "tokens": [51106, 440, 8088, 4985, 295, 589, 17577, 538, 38399, 55, 965, 14689, 295, 445, 257, 9573, 10884, 19160, 7568, 712, 51390], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 103, "seek": 41188, "start": 432.4, "end": 434.84, "text": " and NRX KEEP configuration.", "tokens": [51390, 293, 38399, 55, 591, 32810, 11694, 13, 51512], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 104, "seek": 41188, "start": 434.84, "end": 440.15999999999997, "text": " For example, here it looks for my chat server that is going to secure later.", "tokens": [51512, 1171, 1365, 11, 510, 309, 1542, 337, 452, 5081, 7154, 300, 307, 516, 281, 7144, 1780, 13, 51778], "temperature": 0.0, "avg_logprob": -0.22641155845240543, "compression_ratio": 1.487603305785124, "no_speech_prob": 0.01717476360499859}, {"id": 105, "seek": 44016, "start": 440.16, "end": 442.32000000000005, "text": " This is the KEEP configuration.", "tokens": [50364, 639, 307, 264, 591, 32810, 11694, 13, 50472], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 106, "seek": 44016, "start": 442.32000000000005, "end": 448.32000000000005, "text": " So here is my Steward configured, my personal Steward that I've deployed on VPS, and my", "tokens": [50472, 407, 510, 307, 452, 3592, 1007, 30538, 11, 452, 2973, 3592, 1007, 300, 286, 600, 17826, 322, 691, 6273, 11, 293, 452, 50772], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 107, "seek": 44016, "start": 448.32000000000005, "end": 450.08000000000004, "text": " Stern IO configuration.", "tokens": [50772, 39538, 39839, 11694, 13, 50860], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 108, "seek": 44016, "start": 450.08000000000004, "end": 453.8, "text": " And in this case, I want to inherit everything from the host, so that means I want to print", "tokens": [50860, 400, 294, 341, 1389, 11, 286, 528, 281, 21389, 1203, 490, 264, 3975, 11, 370, 300, 1355, 286, 528, 281, 4482, 51046], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 109, "seek": 44016, "start": 453.8, "end": 458.04, "text": " everything from the host and I also get a sign in from the host.", "tokens": [51046, 1203, 490, 264, 3975, 293, 286, 611, 483, 257, 1465, 294, 490, 264, 3975, 13, 51258], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 110, "seek": 44016, "start": 458.04, "end": 466.40000000000003, "text": " This file will also contain things like network policy or trust anchors and other things like", "tokens": [51258, 639, 3991, 486, 611, 5304, 721, 411, 3209, 3897, 420, 3361, 12723, 830, 293, 661, 721, 411, 51676], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 111, "seek": 44016, "start": 466.40000000000003, "end": 467.40000000000003, "text": " that.", "tokens": [51676, 300, 13, 51726], "temperature": 0.0, "avg_logprob": -0.3099505351139949, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.14995260536670685}, {"id": 112, "seek": 46740, "start": 467.4, "end": 473.28, "text": " I've already uploaded this to my personal drawbridge and I tagged it with a tag of 010.", "tokens": [50364, 286, 600, 1217, 17135, 341, 281, 452, 2973, 2642, 18249, 293, 286, 40239, 309, 365, 257, 6162, 295, 1958, 3279, 13, 50658], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 113, "seek": 46740, "start": 473.28, "end": 476.15999999999997, "text": " So let's see what that looks like.", "tokens": [50658, 407, 718, 311, 536, 437, 300, 1542, 411, 13, 50802], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 114, "seek": 46740, "start": 476.15999999999997, "end": 481.47999999999996, "text": " For that, I'll do a request to my drawbridge and what I get back here for this request", "tokens": [50802, 1171, 300, 11, 286, 603, 360, 257, 5308, 281, 452, 2642, 18249, 293, 437, 286, 483, 646, 510, 337, 341, 5308, 51068], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 115, "seek": 46740, "start": 481.47999999999996, "end": 483.15999999999997, "text": " is a tag, right?", "tokens": [51068, 307, 257, 6162, 11, 558, 30, 51152], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 116, "seek": 46740, "start": 483.15999999999997, "end": 486.4, "text": " Or we also call it an entry.", "tokens": [51152, 1610, 321, 611, 818, 309, 364, 8729, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 117, "seek": 46740, "start": 486.4, "end": 491.4, "text": " And so an entry is nothing else than a node inside a merkle tree.", "tokens": [51314, 400, 370, 364, 8729, 307, 1825, 1646, 813, 257, 9984, 1854, 257, 3551, 14677, 4230, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 118, "seek": 46740, "start": 491.4, "end": 496.35999999999996, "text": " And it's a merkle tree because it contains the digest of the contents of itself.", "tokens": [51564, 400, 309, 311, 257, 3551, 14677, 4230, 570, 309, 8306, 264, 13884, 295, 264, 15768, 295, 2564, 13, 51812], "temperature": 0.0, "avg_logprob": -0.18854623877483864, "compression_ratio": 1.6275303643724697, "no_speech_prob": 0.060957685112953186}, {"id": 119, "seek": 49636, "start": 496.36, "end": 502.28000000000003, "text": " Now what does it mean is that if I would, for example, go one layer deeper and inspect", "tokens": [50364, 823, 437, 775, 309, 914, 307, 300, 498, 286, 576, 11, 337, 1365, 11, 352, 472, 4583, 7731, 293, 15018, 50660], "temperature": 0.0, "avg_logprob": -0.18568788528442381, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.018542811274528503}, {"id": 120, "seek": 49636, "start": 502.28000000000003, "end": 508.0, "text": " the actual tree associated with this tag, I'll see that it contains the NRS.toml and", "tokens": [50660, 264, 3539, 4230, 6615, 365, 341, 6162, 11, 286, 603, 536, 300, 309, 8306, 264, 38399, 50, 13, 83, 298, 75, 293, 50946], "temperature": 0.0, "avg_logprob": -0.18568788528442381, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.018542811274528503}, {"id": 121, "seek": 49636, "start": 508.0, "end": 510.48, "text": " made it wasn't we've seen earlier.", "tokens": [50946, 1027, 309, 2067, 380, 321, 600, 1612, 3071, 13, 51070], "temperature": 0.0, "avg_logprob": -0.18568788528442381, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.018542811274528503}, {"id": 122, "seek": 49636, "start": 510.48, "end": 516.96, "text": " Now if I were to, for example, compute the digest of my NRS.toml, you'll see that this", "tokens": [51070, 823, 498, 286, 645, 281, 11, 337, 1365, 11, 14722, 264, 13884, 295, 452, 38399, 50, 13, 83, 298, 75, 11, 291, 603, 536, 300, 341, 51394], "temperature": 0.0, "avg_logprob": -0.18568788528442381, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.018542811274528503}, {"id": 123, "seek": 49636, "start": 516.96, "end": 522.12, "text": " is exactly the same digest we see here and here.", "tokens": [51394, 307, 2293, 264, 912, 13884, 321, 536, 510, 293, 510, 13, 51652], "temperature": 0.0, "avg_logprob": -0.18568788528442381, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.018542811274528503}, {"id": 124, "seek": 52212, "start": 522.12, "end": 529.64, "text": " Now I can go, of course, one step up and instead of computing the digest of the NRS.toml,", "tokens": [50364, 823, 286, 393, 352, 11, 295, 1164, 11, 472, 1823, 493, 293, 2602, 295, 15866, 264, 13884, 295, 264, 38399, 50, 13, 83, 298, 75, 11, 50740], "temperature": 0.0, "avg_logprob": -0.17158630916050502, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.03621252253651619}, {"id": 125, "seek": 52212, "start": 529.64, "end": 537.12, "text": " I can compute the digest of the, well, the actual entry, the actual tag, right?", "tokens": [50740, 286, 393, 14722, 264, 13884, 295, 264, 11, 731, 11, 264, 3539, 8729, 11, 264, 3539, 6162, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.17158630916050502, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.03621252253651619}, {"id": 126, "seek": 52212, "start": 537.12, "end": 542.72, "text": " For that, I will just do a request again to the same URL and again compute the digest", "tokens": [51114, 1171, 300, 11, 286, 486, 445, 360, 257, 5308, 797, 281, 264, 912, 12905, 293, 797, 14722, 264, 13884, 51394], "temperature": 0.0, "avg_logprob": -0.17158630916050502, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.03621252253651619}, {"id": 127, "seek": 52212, "start": 542.72, "end": 543.72, "text": " of it.", "tokens": [51394, 295, 309, 13, 51444], "temperature": 0.0, "avg_logprob": -0.17158630916050502, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.03621252253651619}, {"id": 128, "seek": 52212, "start": 543.72, "end": 550.28, "text": " Now, if you remember, you'll notice that this is again exactly the same digest that", "tokens": [51444, 823, 11, 498, 291, 1604, 11, 291, 603, 3449, 300, 341, 307, 797, 2293, 264, 912, 13884, 300, 51772], "temperature": 0.0, "avg_logprob": -0.17158630916050502, "compression_ratio": 1.7128712871287128, "no_speech_prob": 0.03621252253651619}, {"id": 129, "seek": 55028, "start": 550.28, "end": 552.72, "text": " we see in our tag, right?", "tokens": [50364, 321, 536, 294, 527, 6162, 11, 558, 30, 50486], "temperature": 0.0, "avg_logprob": -0.271209961328751, "compression_ratio": 1.4767441860465116, "no_speech_prob": 0.15600840747356415}, {"id": 130, "seek": 55028, "start": 552.72, "end": 559.8399999999999, "text": " And so this digest is, in fact, a digest of the minified JSON of this object that we've", "tokens": [50486, 400, 370, 341, 13884, 307, 11, 294, 1186, 11, 257, 13884, 295, 264, 923, 2587, 31828, 295, 341, 2657, 300, 321, 600, 50842], "temperature": 0.0, "avg_logprob": -0.271209961328751, "compression_ratio": 1.4767441860465116, "no_speech_prob": 0.15600840747356415}, {"id": 131, "seek": 55028, "start": 559.8399999999999, "end": 561.12, "text": " seen over here, right?", "tokens": [50842, 1612, 670, 510, 11, 558, 30, 50906], "temperature": 0.0, "avg_logprob": -0.271209961328751, "compression_ratio": 1.4767441860465116, "no_speech_prob": 0.15600840747356415}, {"id": 132, "seek": 55028, "start": 561.12, "end": 567.04, "text": " So this is nicely formed for us by JQ, but we need to request directly, just get a minified", "tokens": [50906, 407, 341, 307, 9594, 8693, 337, 505, 538, 508, 48, 11, 457, 321, 643, 281, 5308, 3838, 11, 445, 483, 257, 923, 2587, 51202], "temperature": 0.0, "avg_logprob": -0.271209961328751, "compression_ratio": 1.4767441860465116, "no_speech_prob": 0.15600840747356415}, {"id": 133, "seek": 55028, "start": 567.04, "end": 571.6, "text": " JSON, which we then hash.", "tokens": [51202, 31828, 11, 597, 321, 550, 22019, 13, 51430], "temperature": 0.0, "avg_logprob": -0.271209961328751, "compression_ratio": 1.4767441860465116, "no_speech_prob": 0.15600840747356415}, {"id": 134, "seek": 57160, "start": 571.6, "end": 580.52, "text": " So let's, so here I'm logged in to AMD's 7SMP capable machine.", "tokens": [50364, 407, 718, 311, 11, 370, 510, 286, 478, 27231, 294, 281, 34808, 311, 1614, 50, 12224, 8189, 3479, 13, 50810], "temperature": 0.0, "avg_logprob": -0.31609002370682976, "compression_ratio": 1.3006134969325154, "no_speech_prob": 0.13656090199947357}, {"id": 135, "seek": 57160, "start": 580.52, "end": 590.12, "text": " I could, for example, read the CPU info and I will grab for model name and only want one", "tokens": [50810, 286, 727, 11, 337, 1365, 11, 1401, 264, 13199, 13614, 293, 286, 486, 4444, 337, 2316, 1315, 293, 787, 528, 472, 51290], "temperature": 0.0, "avg_logprob": -0.31609002370682976, "compression_ratio": 1.3006134969325154, "no_speech_prob": 0.13656090199947357}, {"id": 136, "seek": 57160, "start": 590.12, "end": 596.48, "text": " entry and see that this is indeed an AMD Apex 513 processor.", "tokens": [51290, 8729, 293, 536, 300, 341, 307, 6451, 364, 34808, 316, 29420, 1025, 7668, 15321, 13, 51608], "temperature": 0.0, "avg_logprob": -0.31609002370682976, "compression_ratio": 1.3006134969325154, "no_speech_prob": 0.13656090199947357}, {"id": 137, "seek": 59648, "start": 596.48, "end": 605.9200000000001, "text": " So I'm going to use NRX deploy and I'll also specify the backend explicitly to, yeah,", "tokens": [50364, 407, 286, 478, 516, 281, 764, 38399, 55, 7274, 293, 286, 603, 611, 16500, 264, 38087, 20803, 281, 11, 1338, 11, 50836], "temperature": 0.0, "avg_logprob": -0.25345938546316965, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.16021087765693665}, {"id": 138, "seek": 59648, "start": 605.9200000000001, "end": 610.48, "text": " well, deploy the work code we just looked at.", "tokens": [50836, 731, 11, 7274, 264, 589, 3089, 321, 445, 2956, 412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.25345938546316965, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.16021087765693665}, {"id": 139, "seek": 59648, "start": 610.48, "end": 616.96, "text": " So I'm going to use again my local, well, not my local, sorry, my custom drawbridge.", "tokens": [51064, 407, 286, 478, 516, 281, 764, 797, 452, 2654, 11, 731, 11, 406, 452, 2654, 11, 2597, 11, 452, 2375, 2642, 18249, 13, 51388], "temperature": 0.0, "avg_logprob": -0.25345938546316965, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.16021087765693665}, {"id": 140, "seek": 59648, "start": 616.96, "end": 625.08, "text": " I'll deploy the chat server version 101, exactly the same one that we have seen before.", "tokens": [51388, 286, 603, 7274, 264, 5081, 7154, 3037, 21055, 11, 2293, 264, 912, 472, 300, 321, 362, 1612, 949, 13, 51794], "temperature": 0.0, "avg_logprob": -0.25345938546316965, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.16021087765693665}, {"id": 141, "seek": 62508, "start": 625.08, "end": 632.0400000000001, "text": " And then I'm going to switch to yet another server again remote.", "tokens": [50364, 400, 550, 286, 478, 516, 281, 3679, 281, 1939, 1071, 7154, 797, 8607, 13, 50712], "temperature": 0.0, "avg_logprob": -0.35271141376901183, "compression_ratio": 1.2142857142857142, "no_speech_prob": 0.12932126224040985}, {"id": 142, "seek": 62508, "start": 632.0400000000001, "end": 650.96, "text": " This one has support for the sgx and again I'll do, here we see this is Intel Xeon 6338.", "tokens": [50712, 639, 472, 575, 1406, 337, 264, 262, 70, 87, 293, 797, 286, 603, 360, 11, 510, 321, 536, 341, 307, 19762, 1783, 27015, 1386, 10191, 23, 13, 51658], "temperature": 0.0, "avg_logprob": -0.35271141376901183, "compression_ratio": 1.2142857142857142, "no_speech_prob": 0.12932126224040985}, {"id": 143, "seek": 65096, "start": 650.96, "end": 661.48, "text": " And here I'll also do NRX deploy and in this case I will execute the chat client.", "tokens": [50364, 400, 510, 286, 603, 611, 360, 38399, 55, 7274, 293, 294, 341, 1389, 286, 486, 14483, 264, 5081, 6423, 13, 50890], "temperature": 0.0, "avg_logprob": -0.18268038302051778, "compression_ratio": 1.2748091603053435, "no_speech_prob": 0.24205036461353302}, {"id": 144, "seek": 65096, "start": 661.48, "end": 674.36, "text": " Now once it starts, it will ask me for a URL, I'll put here the address and the port.", "tokens": [50890, 823, 1564, 309, 3719, 11, 309, 486, 1029, 385, 337, 257, 12905, 11, 286, 603, 829, 510, 264, 2985, 293, 264, 2436, 13, 51534], "temperature": 0.0, "avg_logprob": -0.18268038302051778, "compression_ratio": 1.2748091603053435, "no_speech_prob": 0.24205036461353302}, {"id": 145, "seek": 67436, "start": 674.36, "end": 681.76, "text": " So you can see here I've connected, here you can see the server also acknowledged the connection.", "tokens": [50364, 407, 291, 393, 536, 510, 286, 600, 4582, 11, 510, 291, 393, 536, 264, 7154, 611, 27262, 264, 4984, 13, 50734], "temperature": 0.0, "avg_logprob": -0.24444247514773637, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.49173372983932495}, {"id": 146, "seek": 67436, "start": 681.76, "end": 688.92, "text": " And if you just look here, you'll see the exact same digest we've just seen in our entry.", "tokens": [50734, 400, 498, 291, 445, 574, 510, 11, 291, 603, 536, 264, 1900, 912, 13884, 321, 600, 445, 1612, 294, 527, 8729, 13, 51092], "temperature": 0.0, "avg_logprob": -0.24444247514773637, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.49173372983932495}, {"id": 147, "seek": 67436, "start": 688.92, "end": 690.76, "text": " It was over here.", "tokens": [51092, 467, 390, 670, 510, 13, 51184], "temperature": 0.0, "avg_logprob": -0.24444247514773637, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.49173372983932495}, {"id": 148, "seek": 67436, "start": 690.76, "end": 698.08, "text": " So we also see the slug of the server, we just rented that other server, the version.", "tokens": [51184, 407, 321, 611, 536, 264, 1061, 697, 295, 264, 7154, 11, 321, 445, 32381, 300, 661, 7154, 11, 264, 3037, 13, 51550], "temperature": 0.0, "avg_logprob": -0.24444247514773637, "compression_ratio": 1.7017543859649122, "no_speech_prob": 0.49173372983932495}, {"id": 149, "seek": 69808, "start": 698.08, "end": 705.32, "text": " So all this information came from the certificate, it's cryptographically signed data contained", "tokens": [50364, 407, 439, 341, 1589, 1361, 490, 264, 15953, 11, 309, 311, 9844, 3108, 984, 8175, 1412, 16212, 50726], "temperature": 0.0, "avg_logprob": -0.2788034270081339, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.044672891497612}, {"id": 150, "seek": 69808, "start": 705.32, "end": 710.72, "text": " within the certificate, which we are, well, NRX actually parts for us and exposed to the", "tokens": [50726, 1951, 264, 15953, 11, 597, 321, 366, 11, 731, 11, 38399, 55, 767, 3166, 337, 505, 293, 9495, 281, 264, 50996], "temperature": 0.0, "avg_logprob": -0.2788034270081339, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.044672891497612}, {"id": 151, "seek": 69808, "start": 710.72, "end": 711.72, "text": " work load.", "tokens": [50996, 589, 3677, 13, 51046], "temperature": 0.0, "avg_logprob": -0.2788034270081339, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.044672891497612}, {"id": 152, "seek": 69808, "start": 711.72, "end": 719.96, "text": " Similarly, the server also have received the slug that the client was deployed from and", "tokens": [51046, 13157, 11, 264, 7154, 611, 362, 4613, 264, 1061, 697, 300, 264, 6423, 390, 17826, 490, 293, 51458], "temperature": 0.0, "avg_logprob": -0.2788034270081339, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.044672891497612}, {"id": 153, "seek": 69808, "start": 719.96, "end": 723.0, "text": " it also received the digest of the work load.", "tokens": [51458, 309, 611, 4613, 264, 13884, 295, 264, 589, 3677, 13, 51610], "temperature": 0.0, "avg_logprob": -0.2788034270081339, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.044672891497612}, {"id": 154, "seek": 72300, "start": 723.0, "end": 729.32, "text": " So by looking at the certificate, we now can know exactly what workload is that other", "tokens": [50364, 407, 538, 1237, 412, 264, 15953, 11, 321, 586, 393, 458, 2293, 437, 20139, 307, 300, 661, 50680], "temperature": 0.0, "avg_logprob": -0.2882521340016569, "compression_ratio": 1.5829383886255923, "no_speech_prob": 0.016398154199123383}, {"id": 155, "seek": 72300, "start": 729.32, "end": 731.72, "text": " party running.", "tokens": [50680, 3595, 2614, 13, 50800], "temperature": 0.0, "avg_logprob": -0.2882521340016569, "compression_ratio": 1.5829383886255923, "no_speech_prob": 0.016398154199123383}, {"id": 156, "seek": 72300, "start": 731.72, "end": 740.92, "text": " We could also try to inspect this, we can use OpenSSL to connect and sure enough we", "tokens": [50800, 492, 727, 611, 853, 281, 15018, 341, 11, 321, 393, 764, 7238, 21929, 43, 281, 1745, 293, 988, 1547, 321, 51260], "temperature": 0.0, "avg_logprob": -0.2882521340016569, "compression_ratio": 1.5829383886255923, "no_speech_prob": 0.016398154199123383}, {"id": 157, "seek": 72300, "start": 740.92, "end": 747.64, "text": " see our certificate, you can see here that it's currently called, it's a common name,", "tokens": [51260, 536, 527, 15953, 11, 291, 393, 536, 510, 300, 309, 311, 4362, 1219, 11, 309, 311, 257, 2689, 1315, 11, 51596], "temperature": 0.0, "avg_logprob": -0.2882521340016569, "compression_ratio": 1.5829383886255923, "no_speech_prob": 0.016398154199123383}, {"id": 158, "seek": 72300, "start": 747.64, "end": 752.08, "text": " it should be a san of course, but it's just a proof of concept.", "tokens": [51596, 309, 820, 312, 257, 6645, 295, 1164, 11, 457, 309, 311, 445, 257, 8177, 295, 3410, 13, 51818], "temperature": 0.0, "avg_logprob": -0.2882521340016569, "compression_ratio": 1.5829383886255923, "no_speech_prob": 0.016398154199123383}, {"id": 159, "seek": 75208, "start": 752.08, "end": 757.88, "text": " So you can see here the certificate chain that we have, well, we have a certificate", "tokens": [50364, 407, 291, 393, 536, 510, 264, 15953, 5021, 300, 321, 362, 11, 731, 11, 321, 362, 257, 15953, 50654], "temperature": 0.0, "avg_logprob": -0.24397224603697312, "compression_ratio": 1.675, "no_speech_prob": 0.004754544701427221}, {"id": 160, "seek": 75208, "start": 757.88, "end": 762.8000000000001, "text": " with a common name associated with the slug and the digest.", "tokens": [50654, 365, 257, 2689, 1315, 6615, 365, 264, 1061, 697, 293, 264, 13884, 13, 50900], "temperature": 0.0, "avg_logprob": -0.24397224603697312, "compression_ratio": 1.675, "no_speech_prob": 0.004754544701427221}, {"id": 161, "seek": 75208, "start": 762.8000000000001, "end": 772.08, "text": " And it was issued to us by the steward, by the steward that I have deployed in my infrastructure.", "tokens": [50900, 400, 309, 390, 14379, 281, 505, 538, 264, 2126, 1007, 11, 538, 264, 2126, 1007, 300, 286, 362, 17826, 294, 452, 6896, 13, 51364], "temperature": 0.0, "avg_logprob": -0.24397224603697312, "compression_ratio": 1.675, "no_speech_prob": 0.004754544701427221}, {"id": 162, "seek": 75208, "start": 772.08, "end": 781.6800000000001, "text": " And there's also my own CA in the root chain, which actually signed as a steward cert before.", "tokens": [51364, 400, 456, 311, 611, 452, 1065, 22852, 294, 264, 5593, 5021, 11, 597, 767, 8175, 382, 257, 2126, 1007, 5351, 949, 13, 51844], "temperature": 0.0, "avg_logprob": -0.24397224603697312, "compression_ratio": 1.675, "no_speech_prob": 0.004754544701427221}, {"id": 163, "seek": 78168, "start": 781.68, "end": 786.8, "text": " And if we look at the server logs, we'll notice the OpenSSL connection, which actually", "tokens": [50364, 400, 498, 321, 574, 412, 264, 7154, 20820, 11, 321, 603, 3449, 264, 7238, 21929, 43, 4984, 11, 597, 767, 50620], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 164, "seek": 78168, "start": 786.8, "end": 790.64, "text": " was not left in by the server.", "tokens": [50620, 390, 406, 1411, 294, 538, 264, 7154, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 165, "seek": 78168, "start": 790.64, "end": 794.1999999999999, "text": " And it says here that the client did not present a valid certificate.", "tokens": [50812, 400, 309, 1619, 510, 300, 264, 6423, 630, 406, 1974, 257, 7363, 15953, 13, 50990], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 166, "seek": 78168, "start": 794.1999999999999, "end": 798.4799999999999, "text": " So this was not a keep with the valid certificate issued by the steward, therefore the server", "tokens": [50990, 407, 341, 390, 406, 257, 1066, 365, 264, 7363, 15953, 14379, 538, 264, 2126, 1007, 11, 4412, 264, 7154, 51204], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 167, "seek": 78168, "start": 798.4799999999999, "end": 802.5999999999999, "text": " didn't trust it and didn't let it in the secure chat room.", "tokens": [51204, 994, 380, 3361, 309, 293, 994, 380, 718, 309, 294, 264, 7144, 5081, 1808, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 168, "seek": 78168, "start": 802.5999999999999, "end": 810.8, "text": " Similarly, if I were to use NRX with a different backend than SGX, for example, I would use", "tokens": [51410, 13157, 11, 498, 286, 645, 281, 764, 38399, 55, 365, 257, 819, 38087, 813, 34520, 55, 11, 337, 1365, 11, 286, 576, 764, 51820], "temperature": 0.0, "avg_logprob": -0.2591509692436826, "compression_ratio": 1.667953667953668, "no_speech_prob": 0.23635922372341156}, {"id": 169, "seek": 81080, "start": 810.8, "end": 816.0, "text": " a KVM, which is not a real TE, right, it's just a KVM backend, it will not even attest", "tokens": [50364, 257, 591, 53, 44, 11, 597, 307, 406, 257, 957, 19744, 11, 558, 11, 309, 311, 445, 257, 591, 53, 44, 38087, 11, 309, 486, 406, 754, 951, 377, 50624], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 170, "seek": 81080, "start": 816.0, "end": 817.0, "text": " to the steward.", "tokens": [50624, 281, 264, 2126, 1007, 13, 50674], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 171, "seek": 81080, "start": 817.0, "end": 824.52, "text": " So the steward wouldn't issue a cert for us, right, and then we cannot actually execute", "tokens": [50674, 407, 264, 2126, 1007, 2759, 380, 2734, 257, 5351, 337, 505, 11, 558, 11, 293, 550, 321, 2644, 767, 14483, 51050], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 172, "seek": 81080, "start": 824.52, "end": 827.7199999999999, "text": " the workload in NRX.", "tokens": [51050, 264, 20139, 294, 38399, 55, 13, 51210], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 173, "seek": 81080, "start": 827.7199999999999, "end": 831.8, "text": " Now let's look at how we actually achieved this.", "tokens": [51210, 823, 718, 311, 574, 412, 577, 321, 767, 11042, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 174, "seek": 81080, "start": 831.8, "end": 834.4799999999999, "text": " And to begin with, let's look at the client.", "tokens": [51414, 400, 281, 1841, 365, 11, 718, 311, 574, 412, 264, 6423, 13, 51548], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 175, "seek": 81080, "start": 834.4799999999999, "end": 837.9599999999999, "text": " And you'll notice it's quite a small executable actually.", "tokens": [51548, 400, 291, 603, 3449, 309, 311, 1596, 257, 1359, 7568, 712, 767, 13, 51722], "temperature": 0.0, "avg_logprob": -0.22818284375326975, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.01854078285396099}, {"id": 176, "seek": 83796, "start": 837.96, "end": 844.2, "text": " And notice also, so this workload doesn't actually need to do any TLS itself or anything", "tokens": [50364, 400, 3449, 611, 11, 370, 341, 20139, 1177, 380, 767, 643, 281, 360, 604, 314, 19198, 2564, 420, 1340, 50676], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 177, "seek": 83796, "start": 844.2, "end": 845.2, "text": " like that.", "tokens": [50676, 411, 300, 13, 50726], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 178, "seek": 83796, "start": 845.2, "end": 850.12, "text": " NRX Runtime handles all the TLS connections for it, so, and by default all connections", "tokens": [50726, 38399, 55, 497, 2760, 1312, 18722, 439, 264, 314, 19198, 9271, 337, 309, 11, 370, 11, 293, 538, 7576, 439, 9271, 50972], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 179, "seek": 83796, "start": 850.12, "end": 852.52, "text": " are TLS anyway.", "tokens": [50972, 366, 314, 19198, 4033, 13, 51092], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 180, "seek": 83796, "start": 852.52, "end": 859.32, "text": " So we're going to use a virtual file system to connect to an address at runtime.", "tokens": [51092, 407, 321, 434, 516, 281, 764, 257, 6374, 3991, 1185, 281, 1745, 281, 364, 2985, 412, 34474, 13, 51432], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 181, "seek": 83796, "start": 859.32, "end": 865.0400000000001, "text": " Unfortunately, it's required right now due to the limitation of the YG spec, but I get", "tokens": [51432, 8590, 11, 309, 311, 4739, 558, 586, 3462, 281, 264, 27432, 295, 264, 398, 38, 1608, 11, 457, 286, 483, 51718], "temperature": 0.0, "avg_logprob": -0.289590950012207, "compression_ratio": 1.5163934426229508, "no_speech_prob": 0.02594904415309429}, {"id": 182, "seek": 86504, "start": 865.16, "end": 871.56, "text": " there's more going on on providing this APIs, but currently it's not possible to just call", "tokens": [50370, 456, 311, 544, 516, 322, 322, 6530, 341, 21445, 11, 457, 4362, 309, 311, 406, 1944, 281, 445, 818, 50690], "temperature": 0.0, "avg_logprob": -0.2172038785872921, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.04601911082863808}, {"id": 183, "seek": 86504, "start": 871.56, "end": 876.8399999999999, "text": " or connect Cisco like you would normally do, but that's why NRX provides a virtual file", "tokens": [50690, 420, 1745, 38528, 411, 291, 576, 5646, 360, 11, 457, 300, 311, 983, 38399, 55, 6417, 257, 6374, 3991, 50954], "temperature": 0.0, "avg_logprob": -0.2172038785872921, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.04601911082863808}, {"id": 184, "seek": 86504, "start": 876.8399999999999, "end": 880.7199999999999, "text": " system to actually connect to a particular address.", "tokens": [50954, 1185, 281, 767, 1745, 281, 257, 1729, 2985, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2172038785872921, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.04601911082863808}, {"id": 185, "seek": 86504, "start": 880.7199999999999, "end": 886.16, "text": " Now similarly, there's another virtual file system to extract the peer data from the connection", "tokens": [51148, 823, 14138, 11, 456, 311, 1071, 6374, 3991, 1185, 281, 8947, 264, 15108, 1412, 490, 264, 4984, 51420], "temperature": 0.0, "avg_logprob": -0.2172038785872921, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.04601911082863808}, {"id": 186, "seek": 86504, "start": 886.16, "end": 892.7199999999999, "text": " we have established, and in this case we can simply match on that peer information.", "tokens": [51420, 321, 362, 7545, 11, 293, 294, 341, 1389, 321, 393, 2935, 2995, 322, 300, 15108, 1589, 13, 51748], "temperature": 0.0, "avg_logprob": -0.2172038785872921, "compression_ratio": 1.6334661354581674, "no_speech_prob": 0.04601911082863808}, {"id": 187, "seek": 89272, "start": 892.76, "end": 898.44, "text": " So here for example, if we are presented with an anonymous peer, so this which did not have", "tokens": [50366, 407, 510, 337, 1365, 11, 498, 321, 366, 8212, 365, 364, 24932, 15108, 11, 370, 341, 597, 630, 406, 362, 50650], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 188, "seek": 89272, "start": 898.44, "end": 901.6, "text": " a TLS certificate, we just simply abort.", "tokens": [50650, 257, 314, 19198, 15953, 11, 321, 445, 2935, 38117, 13, 50808], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 189, "seek": 89272, "start": 901.6, "end": 906.6800000000001, "text": " And this would also be triggered if the certificate would be not signed by a trusted party, like", "tokens": [50808, 400, 341, 576, 611, 312, 21710, 498, 264, 15953, 576, 312, 406, 8175, 538, 257, 16034, 3595, 11, 411, 51062], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 190, "seek": 89272, "start": 906.6800000000001, "end": 909.52, "text": " a stewardly trust.", "tokens": [51062, 257, 2126, 1007, 356, 3361, 13, 51204], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 191, "seek": 89272, "start": 909.52, "end": 915.72, "text": " If it was a local workload, and it was executed in a real TEE, right, we could still trust", "tokens": [51204, 759, 309, 390, 257, 2654, 20139, 11, 293, 309, 390, 17577, 294, 257, 957, 19744, 36, 11, 558, 11, 321, 727, 920, 3361, 51514], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 192, "seek": 89272, "start": 915.72, "end": 921.72, "text": " it because we know the expected digest of the packages we have uploaded to the drawbridge.", "tokens": [51514, 309, 570, 321, 458, 264, 5176, 13884, 295, 264, 17401, 321, 362, 17135, 281, 264, 2642, 18249, 13, 51814], "temperature": 0.0, "avg_logprob": -0.25003665577281603, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.00239653536118567}, {"id": 193, "seek": 92172, "start": 921.72, "end": 928.72, "text": " This by the way, the exact same digest we have seen before, maybe you see, it is over", "tokens": [50364, 639, 538, 264, 636, 11, 264, 1900, 912, 13884, 321, 362, 1612, 949, 11, 1310, 291, 536, 11, 309, 307, 670, 50714], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 194, "seek": 92172, "start": 928.72, "end": 929.72, "text": " here.", "tokens": [50714, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 195, "seek": 92172, "start": 929.72, "end": 934.64, "text": " So this is the exact same digest we've looked at before.", "tokens": [50764, 407, 341, 307, 264, 1900, 912, 13884, 321, 600, 2956, 412, 949, 13, 51010], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 196, "seek": 92172, "start": 934.64, "end": 940.24, "text": " Now in a high B flow, of course, we're presented with the actual NRX key, which is then associated", "tokens": [51010, 823, 294, 257, 1090, 363, 3095, 11, 295, 1164, 11, 321, 434, 8212, 365, 264, 3539, 38399, 55, 2141, 11, 597, 307, 550, 6615, 51290], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 197, "seek": 92172, "start": 940.24, "end": 944.0400000000001, "text": " with a slug and the digest.", "tokens": [51290, 365, 257, 1061, 697, 293, 264, 13884, 13, 51480], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 198, "seek": 92172, "start": 944.0400000000001, "end": 950.0, "text": " And what we can do here is we can actually match on the actual workload slug.", "tokens": [51480, 400, 437, 321, 393, 360, 510, 307, 321, 393, 767, 2995, 322, 264, 3539, 20139, 1061, 697, 13, 51778], "temperature": 0.0, "avg_logprob": -0.28184431076049804, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.004754805006086826}, {"id": 199, "seek": 95000, "start": 950.0, "end": 955.48, "text": " So where did this workload actually came from, it's version, right, and in this case", "tokens": [50364, 407, 689, 630, 341, 20139, 767, 1361, 490, 11, 309, 311, 3037, 11, 558, 11, 293, 294, 341, 1389, 50638], "temperature": 0.0, "avg_logprob": -0.2503425053187779, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0011877455981448293}, {"id": 200, "seek": 95000, "start": 955.48, "end": 962.32, "text": " we don't even need to check the digest because we trust the drawbridge slug.", "tokens": [50638, 321, 500, 380, 754, 643, 281, 1520, 264, 13884, 570, 321, 3361, 264, 2642, 18249, 1061, 697, 13, 50980], "temperature": 0.0, "avg_logprob": -0.2503425053187779, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0011877455981448293}, {"id": 201, "seek": 95000, "start": 962.32, "end": 968.8, "text": " So in this case, we have verified these three versions, and we do not want to allow any", "tokens": [50980, 407, 294, 341, 1389, 11, 321, 362, 31197, 613, 1045, 9606, 11, 293, 321, 360, 406, 528, 281, 2089, 604, 51304], "temperature": 0.0, "avg_logprob": -0.2503425053187779, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0011877455981448293}, {"id": 202, "seek": 95000, "start": 968.8, "end": 970.48, "text": " other versions, right.", "tokens": [51304, 661, 9606, 11, 558, 13, 51388], "temperature": 0.0, "avg_logprob": -0.2503425053187779, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0011877455981448293}, {"id": 203, "seek": 95000, "start": 970.48, "end": 976.28, "text": " Of course, this would eventually become a key configuration, probably, it could be specified", "tokens": [51388, 2720, 1164, 11, 341, 576, 4728, 1813, 257, 2141, 11694, 11, 1391, 11, 309, 727, 312, 22206, 51678], "temperature": 0.0, "avg_logprob": -0.2503425053187779, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0011877455981448293}, {"id": 204, "seek": 97628, "start": 976.28, "end": 981.92, "text": " as a tunnel, but for now, just for simplicity, I've included everything in the source code.", "tokens": [50364, 382, 257, 13186, 11, 457, 337, 586, 11, 445, 337, 25632, 11, 286, 600, 5556, 1203, 294, 264, 4009, 3089, 13, 50646], "temperature": 0.0, "avg_logprob": -0.28471828412406053, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.08626171201467514}, {"id": 205, "seek": 97628, "start": 981.92, "end": 988.12, "text": " Now similarly, we have the server part.", "tokens": [50646, 823, 14138, 11, 321, 362, 264, 7154, 644, 13, 50956], "temperature": 0.0, "avg_logprob": -0.28471828412406053, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.08626171201467514}, {"id": 206, "seek": 97628, "start": 988.12, "end": 993.12, "text": " And it has a very similar peer check over here, where it again checks for anonymous local", "tokens": [50956, 400, 309, 575, 257, 588, 2531, 15108, 1520, 670, 510, 11, 689, 309, 797, 13834, 337, 24932, 2654, 51206], "temperature": 0.0, "avg_logprob": -0.28471828412406053, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.08626171201467514}, {"id": 207, "seek": 97628, "start": 993.12, "end": 994.12, "text": " key.", "tokens": [51206, 2141, 13, 51256], "temperature": 0.0, "avg_logprob": -0.28471828412406053, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.08626171201467514}, {"id": 208, "seek": 97628, "start": 994.12, "end": 1000.3199999999999, "text": " And it actually doesn't want any local workload in, and it only allows essentially official", "tokens": [51256, 400, 309, 767, 1177, 380, 528, 604, 2654, 20139, 294, 11, 293, 309, 787, 4045, 4476, 4783, 51566], "temperature": 0.0, "avg_logprob": -0.28471828412406053, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.08626171201467514}, {"id": 209, "seek": 100032, "start": 1000.32, "end": 1009.6400000000001, "text": " releases that they're verified and were issued perhaps by this entity over here.", "tokens": [50364, 16952, 300, 436, 434, 31197, 293, 645, 14379, 4317, 538, 341, 13977, 670, 510, 13, 50830], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 210, "seek": 100032, "start": 1009.6400000000001, "end": 1012.36, "text": " So let's get back to the slides.", "tokens": [50830, 407, 718, 311, 483, 646, 281, 264, 9788, 13, 50966], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 211, "seek": 100032, "start": 1012.36, "end": 1017.44, "text": " If you're interested in this project, you can get involved using one of the links provided", "tokens": [50966, 759, 291, 434, 3102, 294, 341, 1716, 11, 291, 393, 483, 3288, 1228, 472, 295, 264, 6123, 5649, 51220], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 212, "seek": 100032, "start": 1017.44, "end": 1019.7600000000001, "text": " over here.", "tokens": [51220, 670, 510, 13, 51336], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 213, "seek": 100032, "start": 1019.7600000000001, "end": 1023.72, "text": " And yeah, now a moment of a set announcement.", "tokens": [51336, 400, 1338, 11, 586, 257, 1623, 295, 257, 992, 12847, 13, 51534], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 214, "seek": 100032, "start": 1023.72, "end": 1030.24, "text": " Just a few hours before recording this video, I found out that Profian is closing, and therefore", "tokens": [51534, 1449, 257, 1326, 2496, 949, 6613, 341, 960, 11, 286, 1352, 484, 300, 6039, 952, 307, 10377, 11, 293, 4412, 51860], "temperature": 0.0, "avg_logprob": -0.20453798505995008, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.2596742510795593}, {"id": 215, "seek": 103024, "start": 1030.24, "end": 1034.56, "text": " the NRS project is looking for maintainers, and I'm looking for a job.", "tokens": [50364, 264, 38399, 50, 1716, 307, 1237, 337, 6909, 433, 11, 293, 286, 478, 1237, 337, 257, 1691, 13, 50580], "temperature": 0.0, "avg_logprob": -0.25050888991937403, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.06001151725649834}, {"id": 216, "seek": 103024, "start": 1034.56, "end": 1040.84, "text": " So if you know anyone who would be interested in the NRS project or me, please let me know.", "tokens": [50580, 407, 498, 291, 458, 2878, 567, 576, 312, 3102, 294, 264, 38399, 50, 1716, 420, 385, 11, 1767, 718, 385, 458, 13, 50894], "temperature": 0.0, "avg_logprob": -0.25050888991937403, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.06001151725649834}, {"id": 217, "seek": 103024, "start": 1040.84, "end": 1046.1200000000001, "text": " You can contact me or email or LinkedIn, and here's my Github handle.", "tokens": [50894, 509, 393, 3385, 385, 420, 3796, 420, 20657, 11, 293, 510, 311, 452, 460, 355, 836, 4813, 13, 51158], "temperature": 0.0, "avg_logprob": -0.25050888991937403, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.06001151725649834}, {"id": 218, "seek": 103024, "start": 1046.1200000000001, "end": 1048.96, "text": " And yeah, now it's time for questions.", "tokens": [51158, 400, 1338, 11, 586, 309, 311, 565, 337, 1651, 13, 51300], "temperature": 0.0, "avg_logprob": -0.25050888991937403, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.06001151725649834}, {"id": 219, "seek": 103024, "start": 1048.96, "end": 1050.4, "text": " Thank you.", "tokens": [51300, 1044, 291, 13, 51372], "temperature": 0.0, "avg_logprob": -0.25050888991937403, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.06001151725649834}], "language": "en"}