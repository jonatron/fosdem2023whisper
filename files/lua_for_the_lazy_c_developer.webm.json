{"text": " Hi, everyone. So, this is Frank van Bever with Lua for the lazy C developer. Hi, I'm Frank van Bever, and I'm here to talk to you today about the Lua programming language and specifically for lazy C developers. So, first of all, who am I? Frank, I work for a company called Mind, free and open source. Well, there's consultancy, specialized in free and open source software for embedded systems. If you're the kind of person who enjoys the referencing pointers and you're looking for a job, check out our website or come to talk to me in the hallway after the presentation. So, with that out of the way, why am I here? I am here to talk to you about being a virtuous software developer. So, the man on the photo is Larry Wall. He's mostly known for being the creator of the Pearl programming language, but he also coined these three virtues of a great software developer. These virtues are laziness, impatience and hubris. I want to focus on the laziness virtue specifically today. And so, he defines laziness as the quality that makes you go to great efforts to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so that you don't have to answer so many questions about it. Now, in my day job, I'm mostly a C developer and, well, if you have any experience with that, you know that there can be quite some energy expenditure involved in doing that. So, introducing the Lua programming language, quick introduction. It's a programming language. It's multi-paradigm. You can program in both an object-oriented style. It uses prototype inheritance. So, for people used to Java or C++ might seem a bit strange. It has the same inheritance model as JavaScript. It actually has quite a bit of resemblance to JavaScript in some ways. They were both created around the same time. Big change from C is that Lua is dynamically typed compared to C's static week typing. So, you can just declare a variable. You don't have to specify the type. You don't need to care about it. Lua is small. That can be interpreted in many ways. Lua installation that I have on my machine is about 250 kilobytes. So, it's really perfect for embedded systems where often you're constrained. But it's also small in the sense that it has, like, language itself. It's like a small set of meta features that you can use to then build whatever it is that you need. And one example of that, for example, is that there's only one data structure, a table, which is like a map or a Python dictionary. And by basically constraining the behavior of this table, you can get all kinds, well, you can basically build all kinds of other data structures. So, yeah, basically it being a small language, C developers should feel right at home. Another big difference is Lua is garbage collected compared to having to do manual management in C. Lua will basically take care of that for you. And most importantly, for a C developer, Lua is actually also a C library. What does that mean? Well, on the left, you have Hello World in Lua syntax. And this program can just as well be expressed using Lua C API, which you can see, well, yeah, my left, left, right. So, for you, also on the left side, the Lua C API, these two are equivalent. So, how does this, well, so how does this work? Well, Lua has as a stated design goal that it should be both an extension language, meaning that you can call Lua from C, so extend your C application by using Lua, as well as an extensible language, meaning that you can call into your C code from your Lua application. And the way it does this is by using a stack. So, this stack nearly, so the C API, everything it does is manipulate this specific stack. And this fixes two important impedance mismatches. So, like I mentioned before, first thing that it fixes for you is the static typing versus the dynamic typing. If we had to map the internal state of these Lua, of all the internal Lua types to C types, well, a knee jerk reaction would be union types structs. But that's a row that quickly leads to insanity. By using this stack as like a clear boundary line between the two, it's easy to translate your Lua variables into, well, Lua variables into C variables and vice versa. Second thing that it fixes for you, the second impedance mismatch is this manual memory management that you need to do in C while Lua is garbage collected. By popping, well, by pushing and popping from the stack, it is clear when the handover happens of memory from one, from one side to the, well, from the C side to Lua and vice versa. So, where might it make sense to use Lua? So, well, as you can imagine, using dynamically typed scripting language that is garbage collection comes with a performance hit. So, you need to keep that in mind. But so, for some cases where it might be useful is taking care of tedious stuff that runs sporadically. So, especially, yeah, there's no better way to get me to run to the coffee machine in a grumpy mood than having to do a lot of string manipulations in C, like an edible. And so, stuff like that, especially config files, for example, it makes, it can make sense to say, okay, you know what, we're going to call out to Lua, we get our config, we put it in a C struct, and then from there, we can go on with our application. Prototyping is another place where I found that Lua really shines. So, sometimes you need to, you have some software that you need to build, and you only get some vague requirements communicated to you. It actually helps to have the agility of this dynamic typed garbage collected language, but still have the flexibility of calling maybe into C dependencies that you will need later on. And then just, as you go, switch out C from Lua and Lua from C. And the third thing, and really, this is, in my opinion, is where Lua shines the most is, so, plugins and extensibility. If you want to make your application extensible, your C application extensible, so, if you just do it with C, you would say, okay, you need to build a shared object using this specific API, and then we'll do a DL open. Pretty annoying. Sometimes, if you have to explain to some people what a compiler is, then it already goes beep in their head. So, Lua, you just define a simple API and makes your application almost immediately extensible so that a third party can inject their logic into your application. It means that you don't have to implement all the features that people need. They can do it for themselves very easily. So, how hard is it to do this? Well, so, a bit of a risky move to have only code on the slide, but let's do this. Imagine you have a Lua file that contains a trivial function that returns the sum of two integers, A and B. You want to call this from your C code, you initialize your Lua state, you load this file, file gets executed, well, you need this file gets put on the stack, you need to execute this through, well, a Lua call. This will register everything that is in the file into the global scope, and at this point, this add function becomes available to your Lua. You can get it, you retrieve it from the global scope, it gets put back on the stack, you push both arguments onto the stack, you do another call, this time specifying that there are two arguments, one return value, and the final argument is basically that, well, it's for error handling that's beyond the scope of this presentation. Your Lua function will be executed, and then it puts the return value onto the stack, and then using this Lua to integer call, you can retrieve it from the stack, you're back in C land, your Lua has finished running, and so eight function calls, and you unlock a whole new world of possibilities in your C application. Of course, this is, well, check your return values, that's omitted for the slide, of course, make sure that, yeah, check for errors, that's important. So the other way around, you can have a, so we just covered the calling Lua from C, another, the other option is, of course, that you call your C code from Lua, the way to do that is by creating these Lua C functions, they always have the same signature, they take single argument, this Lua context, Lua state, and they return an integer, which is the number of variables that they put on the stack as return values. Functions will always look the same, pop the arguments from the stack, do some useful work, push the results back onto, push the results back onto the stack, you create an array of this Lua registry functions where you have a name plus a pointer to the function, a sentinel value to mark the end of the array, and then you have a Lua open underscore and then the name of your, the name of your, the name of your module, which returns a new lip, so this will put your module that you just created onto the stack and return one for a single return value, and by doing this you can then load the module in your Lua code and then call into the C code without any, well, call into the C code and get the result back. Of course, having to do, well, having to build a shared object might be a bit annoying, you have to convince your, you have to convince your build system to create a shared object for you, there's no, and there's no way to share then between a C application and your Lua code, so there's a, there's a fix for that actually, you can publish internal functions in your Lua application, so functions that exist within your C application and make them available to a Lua context that is created in that application, by combining basically the previous two approaches, so same thing here, subtract function defined as a Lua C function, returns the result of A-B, you register it and then in your code you can just say, you can just push this Lua new lip, so the module that will be created, it's actually, it's actually a table with function pointers because everything is a table in Lua, and then instead of, well, instead of it being a shared object and being registered, you can just say, okay, the thing that I just put on top of the stack, make it global and have it be, and make it global under the following name, so in this case, C arithmetic, and in that case, any other Lua script that you use doesn't even have to load the module, it will automatically be loaded, it's already in the context, and so wherever you're doing this, you can just say, you can just call this C arithmetic module and then the functions that exist within there, so in short, Lua can, well, you could say Lua can help you get more done quicker, but keeping this, being a virtuous programmer in mind, I think that Lua can definitely help you embody this virtue of laziness, and so there's some time left even. I, all the code that was in the presentation, I basically have some executable examples for that open GitLab, if you want to check it out, and that's it, so thank you for your attention. If you have any questions, or you want to tell me I'm wrong, or you want to talk to me about something I'll be in the hallway after your presentation, so thank you. Thank you. We have 20 seconds, if we have one question maybe, very quick one.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 29.6, "text": " Hi, everyone. So, this is Frank van Bever with Lua for the lazy C developer.", "tokens": [2421, 11, 1518, 13, 407, 11, 341, 307, 6823, 3161, 879, 331, 365, 441, 4398, 337, 264, 14847, 383, 10754, 13], "temperature": 0.0, "avg_logprob": -0.6284807586669922, "compression_ratio": 0.9743589743589743, "no_speech_prob": 0.3473047912120819}, {"id": 1, "seek": 2960, "start": 29.6, "end": 42.120000000000005, "text": " Hi, I'm Frank van Bever, and I'm here to talk to you today about the Lua programming language", "tokens": [2421, 11, 286, 478, 6823, 3161, 879, 331, 11, 293, 286, 478, 510, 281, 751, 281, 291, 965, 466, 264, 441, 4398, 9410, 2856], "temperature": 0.0, "avg_logprob": -0.29517626444498696, "compression_ratio": 1.4102564102564104, "no_speech_prob": 0.0023091721814125776}, {"id": 2, "seek": 2960, "start": 42.120000000000005, "end": 48.2, "text": " and specifically for lazy C developers. So, first of all, who am I? Frank, I work for a", "tokens": [293, 4682, 337, 14847, 383, 8849, 13, 407, 11, 700, 295, 439, 11, 567, 669, 286, 30, 6823, 11, 286, 589, 337, 257], "temperature": 0.0, "avg_logprob": -0.29517626444498696, "compression_ratio": 1.4102564102564104, "no_speech_prob": 0.0023091721814125776}, {"id": 3, "seek": 2960, "start": 48.2, "end": 55.120000000000005, "text": " company called Mind, free and open source. Well, there's consultancy, specialized in free and", "tokens": [2237, 1219, 13719, 11, 1737, 293, 1269, 4009, 13, 1042, 11, 456, 311, 7189, 6717, 11, 19813, 294, 1737, 293], "temperature": 0.0, "avg_logprob": -0.29517626444498696, "compression_ratio": 1.4102564102564104, "no_speech_prob": 0.0023091721814125776}, {"id": 4, "seek": 5512, "start": 55.12, "end": 60.48, "text": " open source software for embedded systems. If you're the kind of person who enjoys the", "tokens": [1269, 4009, 4722, 337, 16741, 3652, 13, 759, 291, 434, 264, 733, 295, 954, 567, 29750, 264], "temperature": 0.0, "avg_logprob": -0.09834010626680108, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.00026872605667449534}, {"id": 5, "seek": 5512, "start": 60.48, "end": 64.67999999999999, "text": " referencing pointers and you're looking for a job, check out our website or come to talk to me", "tokens": [40582, 44548, 293, 291, 434, 1237, 337, 257, 1691, 11, 1520, 484, 527, 3144, 420, 808, 281, 751, 281, 385], "temperature": 0.0, "avg_logprob": -0.09834010626680108, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.00026872605667449534}, {"id": 6, "seek": 5512, "start": 64.67999999999999, "end": 72.64, "text": " in the hallway after the presentation. So, with that out of the way, why am I here? I am here", "tokens": [294, 264, 23903, 934, 264, 5860, 13, 407, 11, 365, 300, 484, 295, 264, 636, 11, 983, 669, 286, 510, 30, 286, 669, 510], "temperature": 0.0, "avg_logprob": -0.09834010626680108, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.00026872605667449534}, {"id": 7, "seek": 5512, "start": 72.64, "end": 79.72, "text": " to talk to you about being a virtuous software developer. So, the man on the photo is Larry Wall.", "tokens": [281, 751, 281, 291, 466, 885, 257, 48918, 4722, 10754, 13, 407, 11, 264, 587, 322, 264, 5052, 307, 18145, 9551, 13], "temperature": 0.0, "avg_logprob": -0.09834010626680108, "compression_ratio": 1.6008583690987124, "no_speech_prob": 0.00026872605667449534}, {"id": 8, "seek": 7972, "start": 79.72, "end": 87.88, "text": " He's mostly known for being the creator of the Pearl programming language, but he also coined", "tokens": [634, 311, 5240, 2570, 337, 885, 264, 14181, 295, 264, 24639, 9410, 2856, 11, 457, 415, 611, 45222], "temperature": 0.0, "avg_logprob": -0.14473446932705966, "compression_ratio": 1.5942622950819672, "no_speech_prob": 0.00036559836007654667}, {"id": 9, "seek": 7972, "start": 87.88, "end": 94.84, "text": " these three virtues of a great software developer. These virtues are laziness, impatience and hubris.", "tokens": [613, 1045, 41106, 295, 257, 869, 4722, 10754, 13, 1981, 41106, 366, 19320, 1324, 11, 31156, 1182, 293, 11838, 5714, 13], "temperature": 0.0, "avg_logprob": -0.14473446932705966, "compression_ratio": 1.5942622950819672, "no_speech_prob": 0.00036559836007654667}, {"id": 10, "seek": 7972, "start": 94.84, "end": 103.8, "text": " I want to focus on the laziness virtue specifically today. And so, he defines laziness as the quality", "tokens": [286, 528, 281, 1879, 322, 264, 19320, 1324, 20816, 4682, 965, 13, 400, 370, 11, 415, 23122, 19320, 1324, 382, 264, 3125], "temperature": 0.0, "avg_logprob": -0.14473446932705966, "compression_ratio": 1.5942622950819672, "no_speech_prob": 0.00036559836007654667}, {"id": 11, "seek": 7972, "start": 103.8, "end": 109.52, "text": " that makes you go to great efforts to reduce overall energy expenditure. It makes you write", "tokens": [300, 1669, 291, 352, 281, 869, 6484, 281, 5407, 4787, 2281, 40377, 13, 467, 1669, 291, 2464], "temperature": 0.0, "avg_logprob": -0.14473446932705966, "compression_ratio": 1.5942622950819672, "no_speech_prob": 0.00036559836007654667}, {"id": 12, "seek": 10952, "start": 109.52, "end": 114.47999999999999, "text": " labor-saving programs that other people will find useful and document what you wrote so", "tokens": [5938, 12, 82, 6152, 4268, 300, 661, 561, 486, 915, 4420, 293, 4166, 437, 291, 4114, 370], "temperature": 0.0, "avg_logprob": -0.11229901903131034, "compression_ratio": 1.5574468085106383, "no_speech_prob": 0.00014265309437178075}, {"id": 13, "seek": 10952, "start": 114.47999999999999, "end": 122.67999999999999, "text": " that you don't have to answer so many questions about it. Now, in my day job, I'm mostly a C", "tokens": [300, 291, 500, 380, 362, 281, 1867, 370, 867, 1651, 466, 309, 13, 823, 11, 294, 452, 786, 1691, 11, 286, 478, 5240, 257, 383], "temperature": 0.0, "avg_logprob": -0.11229901903131034, "compression_ratio": 1.5574468085106383, "no_speech_prob": 0.00014265309437178075}, {"id": 14, "seek": 10952, "start": 122.67999999999999, "end": 126.88, "text": " developer and, well, if you have any experience with that, you know that there can be quite", "tokens": [10754, 293, 11, 731, 11, 498, 291, 362, 604, 1752, 365, 300, 11, 291, 458, 300, 456, 393, 312, 1596], "temperature": 0.0, "avg_logprob": -0.11229901903131034, "compression_ratio": 1.5574468085106383, "no_speech_prob": 0.00014265309437178075}, {"id": 15, "seek": 10952, "start": 126.88, "end": 134.35999999999999, "text": " some energy expenditure involved in doing that. So, introducing the Lua programming language,", "tokens": [512, 2281, 40377, 3288, 294, 884, 300, 13, 407, 11, 15424, 264, 441, 4398, 9410, 2856, 11], "temperature": 0.0, "avg_logprob": -0.11229901903131034, "compression_ratio": 1.5574468085106383, "no_speech_prob": 0.00014265309437178075}, {"id": 16, "seek": 13436, "start": 134.36, "end": 142.4, "text": " quick introduction. It's a programming language. It's multi-paradigm. You can program in both an", "tokens": [1702, 9339, 13, 467, 311, 257, 9410, 2856, 13, 467, 311, 4825, 12, 2181, 345, 20181, 13, 509, 393, 1461, 294, 1293, 364], "temperature": 0.0, "avg_logprob": -0.11114651669738113, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.00028502478380687535}, {"id": 17, "seek": 13436, "start": 142.4, "end": 149.64000000000001, "text": " object-oriented style. It uses prototype inheritance. So, for people used to Java or C++ might seem", "tokens": [2657, 12, 27414, 3758, 13, 467, 4960, 19475, 32122, 13, 407, 11, 337, 561, 1143, 281, 10745, 420, 383, 25472, 1062, 1643], "temperature": 0.0, "avg_logprob": -0.11114651669738113, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.00028502478380687535}, {"id": 18, "seek": 13436, "start": 149.64000000000001, "end": 156.8, "text": " a bit strange. It has the same inheritance model as JavaScript. It actually has quite a bit of", "tokens": [257, 857, 5861, 13, 467, 575, 264, 912, 32122, 2316, 382, 15778, 13, 467, 767, 575, 1596, 257, 857, 295], "temperature": 0.0, "avg_logprob": -0.11114651669738113, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.00028502478380687535}, {"id": 19, "seek": 13436, "start": 156.8, "end": 163.60000000000002, "text": " resemblance to JavaScript in some ways. They were both created around the same time. Big", "tokens": [20695, 37271, 281, 15778, 294, 512, 2098, 13, 814, 645, 1293, 2942, 926, 264, 912, 565, 13, 5429], "temperature": 0.0, "avg_logprob": -0.11114651669738113, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.00028502478380687535}, {"id": 20, "seek": 16360, "start": 163.6, "end": 174.32, "text": " change from C is that Lua is dynamically typed compared to C's static week typing. So, you can", "tokens": [1319, 490, 383, 307, 300, 441, 4398, 307, 43492, 33941, 5347, 281, 383, 311, 13437, 1243, 18444, 13, 407, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.12774337421764026, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.0002969778433907777}, {"id": 21, "seek": 16360, "start": 174.32, "end": 180.79999999999998, "text": " just declare a variable. You don't have to specify the type. You don't need to care about it. Lua is", "tokens": [445, 19710, 257, 7006, 13, 509, 500, 380, 362, 281, 16500, 264, 2010, 13, 509, 500, 380, 643, 281, 1127, 466, 309, 13, 441, 4398, 307], "temperature": 0.0, "avg_logprob": -0.12774337421764026, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.0002969778433907777}, {"id": 22, "seek": 16360, "start": 180.79999999999998, "end": 187.2, "text": " small. That can be interpreted in many ways. Lua installation that I have on my machine is about", "tokens": [1359, 13, 663, 393, 312, 26749, 294, 867, 2098, 13, 441, 4398, 13260, 300, 286, 362, 322, 452, 3479, 307, 466], "temperature": 0.0, "avg_logprob": -0.12774337421764026, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.0002969778433907777}, {"id": 23, "seek": 18720, "start": 187.2, "end": 195.48, "text": " 250 kilobytes. So, it's really perfect for embedded systems where often you're constrained. But it's", "tokens": [11650, 5128, 996, 43673, 13, 407, 11, 309, 311, 534, 2176, 337, 16741, 3652, 689, 2049, 291, 434, 38901, 13, 583, 309, 311], "temperature": 0.0, "avg_logprob": -0.13393445890776964, "compression_ratio": 1.5872340425531914, "no_speech_prob": 6.980951729929075e-05}, {"id": 24, "seek": 18720, "start": 195.48, "end": 201.28, "text": " also small in the sense that it has, like, language itself. It's like a small set of meta", "tokens": [611, 1359, 294, 264, 2020, 300, 309, 575, 11, 411, 11, 2856, 2564, 13, 467, 311, 411, 257, 1359, 992, 295, 19616], "temperature": 0.0, "avg_logprob": -0.13393445890776964, "compression_ratio": 1.5872340425531914, "no_speech_prob": 6.980951729929075e-05}, {"id": 25, "seek": 18720, "start": 201.28, "end": 207.64, "text": " features that you can use to then build whatever it is that you need. And one example of that,", "tokens": [4122, 300, 291, 393, 764, 281, 550, 1322, 2035, 309, 307, 300, 291, 643, 13, 400, 472, 1365, 295, 300, 11], "temperature": 0.0, "avg_logprob": -0.13393445890776964, "compression_ratio": 1.5872340425531914, "no_speech_prob": 6.980951729929075e-05}, {"id": 26, "seek": 18720, "start": 207.64, "end": 213.64, "text": " for example, is that there's only one data structure, a table, which is like a map or a", "tokens": [337, 1365, 11, 307, 300, 456, 311, 787, 472, 1412, 3877, 11, 257, 3199, 11, 597, 307, 411, 257, 4471, 420, 257], "temperature": 0.0, "avg_logprob": -0.13393445890776964, "compression_ratio": 1.5872340425531914, "no_speech_prob": 6.980951729929075e-05}, {"id": 27, "seek": 21364, "start": 213.64, "end": 220.04, "text": " Python dictionary. And by basically constraining the behavior of this table, you can get all", "tokens": [15329, 25890, 13, 400, 538, 1936, 11525, 1760, 264, 5223, 295, 341, 3199, 11, 291, 393, 483, 439], "temperature": 0.0, "avg_logprob": -0.16654598179148206, "compression_ratio": 1.532258064516129, "no_speech_prob": 8.749699190957472e-05}, {"id": 28, "seek": 21364, "start": 220.04, "end": 228.2, "text": " kinds, well, you can basically build all kinds of other data structures. So, yeah, basically it", "tokens": [3685, 11, 731, 11, 291, 393, 1936, 1322, 439, 3685, 295, 661, 1412, 9227, 13, 407, 11, 1338, 11, 1936, 309], "temperature": 0.0, "avg_logprob": -0.16654598179148206, "compression_ratio": 1.532258064516129, "no_speech_prob": 8.749699190957472e-05}, {"id": 29, "seek": 21364, "start": 228.2, "end": 234.27999999999997, "text": " being a small language, C developers should feel right at home. Another big difference is Lua is", "tokens": [885, 257, 1359, 2856, 11, 383, 8849, 820, 841, 558, 412, 1280, 13, 3996, 955, 2649, 307, 441, 4398, 307], "temperature": 0.0, "avg_logprob": -0.16654598179148206, "compression_ratio": 1.532258064516129, "no_speech_prob": 8.749699190957472e-05}, {"id": 30, "seek": 23428, "start": 234.28, "end": 245.6, "text": " garbage collected compared to having to do manual management in C. Lua will basically take care of", "tokens": [14150, 11087, 5347, 281, 1419, 281, 360, 9688, 4592, 294, 383, 13, 441, 4398, 486, 1936, 747, 1127, 295], "temperature": 0.0, "avg_logprob": -0.1285120474325644, "compression_ratio": 1.467005076142132, "no_speech_prob": 9.52225091168657e-05}, {"id": 31, "seek": 23428, "start": 245.6, "end": 254.24, "text": " that for you. And most importantly, for a C developer, Lua is actually also a C library. What", "tokens": [300, 337, 291, 13, 400, 881, 8906, 11, 337, 257, 383, 10754, 11, 441, 4398, 307, 767, 611, 257, 383, 6405, 13, 708], "temperature": 0.0, "avg_logprob": -0.1285120474325644, "compression_ratio": 1.467005076142132, "no_speech_prob": 9.52225091168657e-05}, {"id": 32, "seek": 23428, "start": 254.24, "end": 261.96, "text": " does that mean? Well, on the left, you have Hello World in Lua syntax. And this program can just", "tokens": [775, 300, 914, 30, 1042, 11, 322, 264, 1411, 11, 291, 362, 2425, 3937, 294, 441, 4398, 28431, 13, 400, 341, 1461, 393, 445], "temperature": 0.0, "avg_logprob": -0.1285120474325644, "compression_ratio": 1.467005076142132, "no_speech_prob": 9.52225091168657e-05}, {"id": 33, "seek": 26196, "start": 261.96, "end": 270.76, "text": " as well be expressed using Lua C API, which you can see, well, yeah, my left, left, right. So,", "tokens": [382, 731, 312, 12675, 1228, 441, 4398, 383, 9362, 11, 597, 291, 393, 536, 11, 731, 11, 1338, 11, 452, 1411, 11, 1411, 11, 558, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.17148902804352517, "compression_ratio": 1.516304347826087, "no_speech_prob": 9.870234498521313e-05}, {"id": 34, "seek": 26196, "start": 270.76, "end": 279.71999999999997, "text": " for you, also on the left side, the Lua C API, these two are equivalent. So, how does this,", "tokens": [337, 291, 11, 611, 322, 264, 1411, 1252, 11, 264, 441, 4398, 383, 9362, 11, 613, 732, 366, 10344, 13, 407, 11, 577, 775, 341, 11], "temperature": 0.0, "avg_logprob": -0.17148902804352517, "compression_ratio": 1.516304347826087, "no_speech_prob": 9.870234498521313e-05}, {"id": 35, "seek": 26196, "start": 279.71999999999997, "end": 286.67999999999995, "text": " well, so how does this work? Well, Lua has as a stated design goal that it should be both an", "tokens": [731, 11, 370, 577, 775, 341, 589, 30, 1042, 11, 441, 4398, 575, 382, 257, 11323, 1715, 3387, 300, 309, 820, 312, 1293, 364], "temperature": 0.0, "avg_logprob": -0.17148902804352517, "compression_ratio": 1.516304347826087, "no_speech_prob": 9.870234498521313e-05}, {"id": 36, "seek": 28668, "start": 286.68, "end": 293.84000000000003, "text": " extension language, meaning that you can call Lua from C, so extend your C application by using", "tokens": [10320, 2856, 11, 3620, 300, 291, 393, 818, 441, 4398, 490, 383, 11, 370, 10101, 428, 383, 3861, 538, 1228], "temperature": 0.0, "avg_logprob": -0.12269100585541168, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.51898925146088e-05}, {"id": 37, "seek": 28668, "start": 293.84000000000003, "end": 301.76, "text": " Lua, as well as an extensible language, meaning that you can call into your C code from your Lua", "tokens": [441, 4398, 11, 382, 731, 382, 364, 1279, 30633, 2856, 11, 3620, 300, 291, 393, 818, 666, 428, 383, 3089, 490, 428, 441, 4398], "temperature": 0.0, "avg_logprob": -0.12269100585541168, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.51898925146088e-05}, {"id": 38, "seek": 28668, "start": 301.76, "end": 312.64, "text": " application. And the way it does this is by using a stack. So, this stack nearly, so the C API,", "tokens": [3861, 13, 400, 264, 636, 309, 775, 341, 307, 538, 1228, 257, 8630, 13, 407, 11, 341, 8630, 6217, 11, 370, 264, 383, 9362, 11], "temperature": 0.0, "avg_logprob": -0.12269100585541168, "compression_ratio": 1.7142857142857142, "no_speech_prob": 3.51898925146088e-05}, {"id": 39, "seek": 31264, "start": 312.64, "end": 319.0, "text": " everything it does is manipulate this specific stack. And this fixes two important impedance", "tokens": [1203, 309, 775, 307, 20459, 341, 2685, 8630, 13, 400, 341, 32539, 732, 1021, 36264], "temperature": 0.0, "avg_logprob": -0.12269383288444356, "compression_ratio": 1.6351931330472103, "no_speech_prob": 8.802901720628142e-05}, {"id": 40, "seek": 31264, "start": 319.0, "end": 324.47999999999996, "text": " mismatches. So, like I mentioned before, first thing that it fixes for you is the static typing", "tokens": [23220, 852, 279, 13, 407, 11, 411, 286, 2835, 949, 11, 700, 551, 300, 309, 32539, 337, 291, 307, 264, 13437, 18444], "temperature": 0.0, "avg_logprob": -0.12269383288444356, "compression_ratio": 1.6351931330472103, "no_speech_prob": 8.802901720628142e-05}, {"id": 41, "seek": 31264, "start": 324.47999999999996, "end": 330.88, "text": " versus the dynamic typing. If we had to map the internal state of these Lua, of all the internal", "tokens": [5717, 264, 8546, 18444, 13, 759, 321, 632, 281, 4471, 264, 6920, 1785, 295, 613, 441, 4398, 11, 295, 439, 264, 6920], "temperature": 0.0, "avg_logprob": -0.12269383288444356, "compression_ratio": 1.6351931330472103, "no_speech_prob": 8.802901720628142e-05}, {"id": 42, "seek": 31264, "start": 330.88, "end": 339.68, "text": " Lua types to C types, well, a knee jerk reaction would be union types structs. But that's a row", "tokens": [441, 4398, 3467, 281, 383, 3467, 11, 731, 11, 257, 9434, 25197, 5480, 576, 312, 11671, 3467, 6594, 82, 13, 583, 300, 311, 257, 5386], "temperature": 0.0, "avg_logprob": -0.12269383288444356, "compression_ratio": 1.6351931330472103, "no_speech_prob": 8.802901720628142e-05}, {"id": 43, "seek": 33968, "start": 339.68, "end": 345.12, "text": " that quickly leads to insanity. By using this stack as like a clear boundary line between the two,", "tokens": [300, 2661, 6689, 281, 47505, 13, 3146, 1228, 341, 8630, 382, 411, 257, 1850, 12866, 1622, 1296, 264, 732, 11], "temperature": 0.0, "avg_logprob": -0.1201026025025741, "compression_ratio": 1.6134453781512605, "no_speech_prob": 4.5213844714453444e-05}, {"id": 44, "seek": 33968, "start": 345.12, "end": 352.72, "text": " it's easy to translate your Lua variables into, well, Lua variables into C variables and vice", "tokens": [309, 311, 1858, 281, 13799, 428, 441, 4398, 9102, 666, 11, 731, 11, 441, 4398, 9102, 666, 383, 9102, 293, 11964], "temperature": 0.0, "avg_logprob": -0.1201026025025741, "compression_ratio": 1.6134453781512605, "no_speech_prob": 4.5213844714453444e-05}, {"id": 45, "seek": 33968, "start": 352.72, "end": 359.72, "text": " versa. Second thing that it fixes for you, the second impedance mismatch is this manual memory", "tokens": [25650, 13, 5736, 551, 300, 309, 32539, 337, 291, 11, 264, 1150, 36264, 23220, 852, 307, 341, 9688, 4675], "temperature": 0.0, "avg_logprob": -0.1201026025025741, "compression_ratio": 1.6134453781512605, "no_speech_prob": 4.5213844714453444e-05}, {"id": 46, "seek": 33968, "start": 359.72, "end": 366.48, "text": " management that you need to do in C while Lua is garbage collected. By popping, well, by pushing", "tokens": [4592, 300, 291, 643, 281, 360, 294, 383, 1339, 441, 4398, 307, 14150, 11087, 13, 3146, 18374, 11, 731, 11, 538, 7380], "temperature": 0.0, "avg_logprob": -0.1201026025025741, "compression_ratio": 1.6134453781512605, "no_speech_prob": 4.5213844714453444e-05}, {"id": 47, "seek": 36648, "start": 366.48, "end": 374.04, "text": " and popping from the stack, it is clear when the handover happens of memory from one, from one", "tokens": [293, 18374, 490, 264, 8630, 11, 309, 307, 1850, 562, 264, 1011, 3570, 2314, 295, 4675, 490, 472, 11, 490, 472], "temperature": 0.0, "avg_logprob": -0.13987958586061155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 6.135056901257485e-05}, {"id": 48, "seek": 36648, "start": 374.04, "end": 387.0, "text": " side to the, well, from the C side to Lua and vice versa. So, where might it make sense to use Lua?", "tokens": [1252, 281, 264, 11, 731, 11, 490, 264, 383, 1252, 281, 441, 4398, 293, 11964, 25650, 13, 407, 11, 689, 1062, 309, 652, 2020, 281, 764, 441, 4398, 30], "temperature": 0.0, "avg_logprob": -0.13987958586061155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 6.135056901257485e-05}, {"id": 49, "seek": 36648, "start": 387.0, "end": 394.52000000000004, "text": " So, well, as you can imagine, using dynamically typed scripting language that is garbage collection", "tokens": [407, 11, 731, 11, 382, 291, 393, 3811, 11, 1228, 43492, 33941, 5755, 278, 2856, 300, 307, 14150, 5765], "temperature": 0.0, "avg_logprob": -0.13987958586061155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 6.135056901257485e-05}, {"id": 50, "seek": 39452, "start": 394.52, "end": 401.96, "text": " comes with a performance hit. So, you need to keep that in mind. But so, for some cases where it", "tokens": [1487, 365, 257, 3389, 2045, 13, 407, 11, 291, 643, 281, 1066, 300, 294, 1575, 13, 583, 370, 11, 337, 512, 3331, 689, 309], "temperature": 0.0, "avg_logprob": -0.11665569305419922, "compression_ratio": 1.4973544973544974, "no_speech_prob": 7.158920197980478e-05}, {"id": 51, "seek": 39452, "start": 401.96, "end": 410.96, "text": " might be useful is taking care of tedious stuff that runs sporadically. So, especially, yeah,", "tokens": [1062, 312, 4420, 307, 1940, 1127, 295, 38284, 1507, 300, 6676, 43729, 345, 984, 13, 407, 11, 2318, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.11665569305419922, "compression_ratio": 1.4973544973544974, "no_speech_prob": 7.158920197980478e-05}, {"id": 52, "seek": 39452, "start": 410.96, "end": 417.71999999999997, "text": " there's no better way to get me to run to the coffee machine in a grumpy mood than having to", "tokens": [456, 311, 572, 1101, 636, 281, 483, 385, 281, 1190, 281, 264, 4982, 3479, 294, 257, 677, 36142, 9268, 813, 1419, 281], "temperature": 0.0, "avg_logprob": -0.11665569305419922, "compression_ratio": 1.4973544973544974, "no_speech_prob": 7.158920197980478e-05}, {"id": 53, "seek": 41772, "start": 417.72, "end": 425.20000000000005, "text": " do a lot of string manipulations in C, like an edible. And so, stuff like that, especially config", "tokens": [360, 257, 688, 295, 6798, 9258, 4136, 294, 383, 11, 411, 364, 30666, 13, 400, 370, 11, 1507, 411, 300, 11, 2318, 6662], "temperature": 0.0, "avg_logprob": -0.13870624227261324, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.259090175968595e-05}, {"id": 54, "seek": 41772, "start": 425.20000000000005, "end": 431.40000000000003, "text": " files, for example, it makes, it can make sense to say, okay, you know what, we're going to call out", "tokens": [7098, 11, 337, 1365, 11, 309, 1669, 11, 309, 393, 652, 2020, 281, 584, 11, 1392, 11, 291, 458, 437, 11, 321, 434, 516, 281, 818, 484], "temperature": 0.0, "avg_logprob": -0.13870624227261324, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.259090175968595e-05}, {"id": 55, "seek": 41772, "start": 431.40000000000003, "end": 437.48, "text": " to Lua, we get our config, we put it in a C struct, and then from there, we can go on with our", "tokens": [281, 441, 4398, 11, 321, 483, 527, 6662, 11, 321, 829, 309, 294, 257, 383, 6594, 11, 293, 550, 490, 456, 11, 321, 393, 352, 322, 365, 527], "temperature": 0.0, "avg_logprob": -0.13870624227261324, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.259090175968595e-05}, {"id": 56, "seek": 41772, "start": 437.48, "end": 446.28000000000003, "text": " application. Prototyping is another place where I found that Lua really shines. So, sometimes you", "tokens": [3861, 13, 10019, 6737, 3381, 307, 1071, 1081, 689, 286, 1352, 300, 441, 4398, 534, 28056, 13, 407, 11, 2171, 291], "temperature": 0.0, "avg_logprob": -0.13870624227261324, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.259090175968595e-05}, {"id": 57, "seek": 44628, "start": 446.28, "end": 451.64, "text": " need to, you have some software that you need to build, and you only get some vague requirements", "tokens": [643, 281, 11, 291, 362, 512, 4722, 300, 291, 643, 281, 1322, 11, 293, 291, 787, 483, 512, 24247, 7728], "temperature": 0.0, "avg_logprob": -0.1365643726306015, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.00015405351587105542}, {"id": 58, "seek": 44628, "start": 451.64, "end": 460.03999999999996, "text": " communicated to you. It actually helps to have the agility of this dynamic typed garbage", "tokens": [34989, 281, 291, 13, 467, 767, 3665, 281, 362, 264, 39794, 295, 341, 8546, 33941, 14150], "temperature": 0.0, "avg_logprob": -0.1365643726306015, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.00015405351587105542}, {"id": 59, "seek": 44628, "start": 460.03999999999996, "end": 465.91999999999996, "text": " collected language, but still have the flexibility of calling maybe into C dependencies that you", "tokens": [11087, 2856, 11, 457, 920, 362, 264, 12635, 295, 5141, 1310, 666, 383, 36606, 300, 291], "temperature": 0.0, "avg_logprob": -0.1365643726306015, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.00015405351587105542}, {"id": 60, "seek": 44628, "start": 465.91999999999996, "end": 472.79999999999995, "text": " will need later on. And then just, as you go, switch out C from Lua and Lua from C. And the", "tokens": [486, 643, 1780, 322, 13, 400, 550, 445, 11, 382, 291, 352, 11, 3679, 484, 383, 490, 441, 4398, 293, 441, 4398, 490, 383, 13, 400, 264], "temperature": 0.0, "avg_logprob": -0.1365643726306015, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.00015405351587105542}, {"id": 61, "seek": 47280, "start": 472.8, "end": 478.56, "text": " third thing, and really, this is, in my opinion, is where Lua shines the most is, so, plugins and", "tokens": [2636, 551, 11, 293, 534, 11, 341, 307, 11, 294, 452, 4800, 11, 307, 689, 441, 4398, 28056, 264, 881, 307, 11, 370, 11, 33759, 293], "temperature": 0.0, "avg_logprob": -0.14322300865536644, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.258251232793555e-05}, {"id": 62, "seek": 47280, "start": 478.56, "end": 486.04, "text": " extensibility. If you want to make your application extensible, your C application extensible, so,", "tokens": [1279, 694, 2841, 13, 759, 291, 528, 281, 652, 428, 3861, 1279, 30633, 11, 428, 383, 3861, 1279, 30633, 11, 370, 11], "temperature": 0.0, "avg_logprob": -0.14322300865536644, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.258251232793555e-05}, {"id": 63, "seek": 47280, "start": 486.04, "end": 490.2, "text": " if you just do it with C, you would say, okay, you need to build a shared object using this", "tokens": [498, 291, 445, 360, 309, 365, 383, 11, 291, 576, 584, 11, 1392, 11, 291, 643, 281, 1322, 257, 5507, 2657, 1228, 341], "temperature": 0.0, "avg_logprob": -0.14322300865536644, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.258251232793555e-05}, {"id": 64, "seek": 47280, "start": 490.2, "end": 497.44, "text": " specific API, and then we'll do a DL open. Pretty annoying. Sometimes, if you have to explain to", "tokens": [2685, 9362, 11, 293, 550, 321, 603, 360, 257, 413, 43, 1269, 13, 10693, 11304, 13, 4803, 11, 498, 291, 362, 281, 2903, 281], "temperature": 0.0, "avg_logprob": -0.14322300865536644, "compression_ratio": 1.6176470588235294, "no_speech_prob": 6.258251232793555e-05}, {"id": 65, "seek": 49744, "start": 497.44, "end": 505.28, "text": " some people what a compiler is, then it already goes beep in their head. So, Lua, you just define a", "tokens": [512, 561, 437, 257, 31958, 307, 11, 550, 309, 1217, 1709, 28678, 294, 641, 1378, 13, 407, 11, 441, 4398, 11, 291, 445, 6964, 257], "temperature": 0.0, "avg_logprob": -0.12464520468640683, "compression_ratio": 1.5, "no_speech_prob": 4.116707350476645e-05}, {"id": 66, "seek": 49744, "start": 505.28, "end": 513.16, "text": " simple API and makes your application almost immediately extensible so that a third party can", "tokens": [2199, 9362, 293, 1669, 428, 3861, 1920, 4258, 1279, 30633, 370, 300, 257, 2636, 3595, 393], "temperature": 0.0, "avg_logprob": -0.12464520468640683, "compression_ratio": 1.5, "no_speech_prob": 4.116707350476645e-05}, {"id": 67, "seek": 49744, "start": 513.16, "end": 520.32, "text": " inject their logic into your application. It means that you don't have to implement all the", "tokens": [10711, 641, 9952, 666, 428, 3861, 13, 467, 1355, 300, 291, 500, 380, 362, 281, 4445, 439, 264], "temperature": 0.0, "avg_logprob": -0.12464520468640683, "compression_ratio": 1.5, "no_speech_prob": 4.116707350476645e-05}, {"id": 68, "seek": 52032, "start": 520.32, "end": 528.2, "text": " features that people need. They can do it for themselves very easily. So, how hard is it to do", "tokens": [4122, 300, 561, 643, 13, 814, 393, 360, 309, 337, 2969, 588, 3612, 13, 407, 11, 577, 1152, 307, 309, 281, 360], "temperature": 0.0, "avg_logprob": -0.1325028058394645, "compression_ratio": 1.5601659751037344, "no_speech_prob": 3.067950456170365e-05}, {"id": 69, "seek": 52032, "start": 528.2, "end": 536.72, "text": " this? Well, so, a bit of a risky move to have only code on the slide, but let's do this. Imagine", "tokens": [341, 30, 1042, 11, 370, 11, 257, 857, 295, 257, 21137, 1286, 281, 362, 787, 3089, 322, 264, 4137, 11, 457, 718, 311, 360, 341, 13, 11739], "temperature": 0.0, "avg_logprob": -0.1325028058394645, "compression_ratio": 1.5601659751037344, "no_speech_prob": 3.067950456170365e-05}, {"id": 70, "seek": 52032, "start": 536.72, "end": 543.6, "text": " you have a Lua file that contains a trivial function that returns the sum of two integers,", "tokens": [291, 362, 257, 441, 4398, 3991, 300, 8306, 257, 26703, 2445, 300, 11247, 264, 2408, 295, 732, 41674, 11], "temperature": 0.0, "avg_logprob": -0.1325028058394645, "compression_ratio": 1.5601659751037344, "no_speech_prob": 3.067950456170365e-05}, {"id": 71, "seek": 52032, "start": 543.6, "end": 549.84, "text": " A and B. You want to call this from your C code, you initialize your Lua state, you load this", "tokens": [316, 293, 363, 13, 509, 528, 281, 818, 341, 490, 428, 383, 3089, 11, 291, 5883, 1125, 428, 441, 4398, 1785, 11, 291, 3677, 341], "temperature": 0.0, "avg_logprob": -0.1325028058394645, "compression_ratio": 1.5601659751037344, "no_speech_prob": 3.067950456170365e-05}, {"id": 72, "seek": 54984, "start": 549.84, "end": 557.24, "text": " file, file gets executed, well, you need this file gets put on the stack, you need to execute this", "tokens": [3991, 11, 3991, 2170, 17577, 11, 731, 11, 291, 643, 341, 3991, 2170, 829, 322, 264, 8630, 11, 291, 643, 281, 14483, 341], "temperature": 0.0, "avg_logprob": -0.1267327746829471, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00010902811482083052}, {"id": 73, "seek": 54984, "start": 557.24, "end": 566.5600000000001, "text": " through, well, a Lua call. This will register everything that is in the file into the global", "tokens": [807, 11, 731, 11, 257, 441, 4398, 818, 13, 639, 486, 7280, 1203, 300, 307, 294, 264, 3991, 666, 264, 4338], "temperature": 0.0, "avg_logprob": -0.1267327746829471, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00010902811482083052}, {"id": 74, "seek": 54984, "start": 566.5600000000001, "end": 573.9200000000001, "text": " scope, and at this point, this add function becomes available to your Lua. You can get it,", "tokens": [11923, 11, 293, 412, 341, 935, 11, 341, 909, 2445, 3643, 2435, 281, 428, 441, 4398, 13, 509, 393, 483, 309, 11], "temperature": 0.0, "avg_logprob": -0.1267327746829471, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00010902811482083052}, {"id": 75, "seek": 57392, "start": 573.92, "end": 580.8399999999999, "text": " you retrieve it from the global scope, it gets put back on the stack, you push both arguments", "tokens": [291, 30254, 309, 490, 264, 4338, 11923, 11, 309, 2170, 829, 646, 322, 264, 8630, 11, 291, 2944, 1293, 12869], "temperature": 0.0, "avg_logprob": -0.14823138058840574, "compression_ratio": 1.6858407079646018, "no_speech_prob": 8.165134931914508e-05}, {"id": 76, "seek": 57392, "start": 580.8399999999999, "end": 586.52, "text": " onto the stack, you do another call, this time specifying that there are two arguments, one", "tokens": [3911, 264, 8630, 11, 291, 360, 1071, 818, 11, 341, 565, 1608, 5489, 300, 456, 366, 732, 12869, 11, 472], "temperature": 0.0, "avg_logprob": -0.14823138058840574, "compression_ratio": 1.6858407079646018, "no_speech_prob": 8.165134931914508e-05}, {"id": 77, "seek": 57392, "start": 586.52, "end": 593.24, "text": " return value, and the final argument is basically that, well, it's for error handling that's beyond", "tokens": [2736, 2158, 11, 293, 264, 2572, 6770, 307, 1936, 300, 11, 731, 11, 309, 311, 337, 6713, 13175, 300, 311, 4399], "temperature": 0.0, "avg_logprob": -0.14823138058840574, "compression_ratio": 1.6858407079646018, "no_speech_prob": 8.165134931914508e-05}, {"id": 78, "seek": 57392, "start": 593.24, "end": 599.7199999999999, "text": " the scope of this presentation. Your Lua function will be executed, and then it puts the return", "tokens": [264, 11923, 295, 341, 5860, 13, 2260, 441, 4398, 2445, 486, 312, 17577, 11, 293, 550, 309, 8137, 264, 2736], "temperature": 0.0, "avg_logprob": -0.14823138058840574, "compression_ratio": 1.6858407079646018, "no_speech_prob": 8.165134931914508e-05}, {"id": 79, "seek": 59972, "start": 599.72, "end": 604.88, "text": " value onto the stack, and then using this Lua to integer call, you can retrieve it from the stack,", "tokens": [2158, 3911, 264, 8630, 11, 293, 550, 1228, 341, 441, 4398, 281, 24922, 818, 11, 291, 393, 30254, 309, 490, 264, 8630, 11], "temperature": 0.0, "avg_logprob": -0.14765058804864753, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.0001082187591237016}, {"id": 80, "seek": 59972, "start": 604.88, "end": 612.52, "text": " you're back in C land, your Lua has finished running, and so eight function calls, and you", "tokens": [291, 434, 646, 294, 383, 2117, 11, 428, 441, 4398, 575, 4335, 2614, 11, 293, 370, 3180, 2445, 5498, 11, 293, 291], "temperature": 0.0, "avg_logprob": -0.14765058804864753, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.0001082187591237016}, {"id": 81, "seek": 59972, "start": 612.52, "end": 621.6800000000001, "text": " unlock a whole new world of possibilities in your C application. Of course, this is, well,", "tokens": [11634, 257, 1379, 777, 1002, 295, 12178, 294, 428, 383, 3861, 13, 2720, 1164, 11, 341, 307, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.14765058804864753, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.0001082187591237016}, {"id": 82, "seek": 62168, "start": 621.68, "end": 629.88, "text": " check your return values, that's omitted for the slide, of course, make sure that, yeah, check for", "tokens": [1520, 428, 2736, 4190, 11, 300, 311, 3406, 3944, 337, 264, 4137, 11, 295, 1164, 11, 652, 988, 300, 11, 1338, 11, 1520, 337], "temperature": 0.0, "avg_logprob": -0.1709740400314331, "compression_ratio": 1.5921787709497206, "no_speech_prob": 4.29833417001646e-05}, {"id": 83, "seek": 62168, "start": 629.88, "end": 641.88, "text": " errors, that's important. So the other way around, you can have a, so we just covered the calling", "tokens": [13603, 11, 300, 311, 1021, 13, 407, 264, 661, 636, 926, 11, 291, 393, 362, 257, 11, 370, 321, 445, 5343, 264, 5141], "temperature": 0.0, "avg_logprob": -0.1709740400314331, "compression_ratio": 1.5921787709497206, "no_speech_prob": 4.29833417001646e-05}, {"id": 84, "seek": 62168, "start": 641.88, "end": 647.5999999999999, "text": " Lua from C, another, the other option is, of course, that you call your C code from Lua,", "tokens": [441, 4398, 490, 383, 11, 1071, 11, 264, 661, 3614, 307, 11, 295, 1164, 11, 300, 291, 818, 428, 383, 3089, 490, 441, 4398, 11], "temperature": 0.0, "avg_logprob": -0.1709740400314331, "compression_ratio": 1.5921787709497206, "no_speech_prob": 4.29833417001646e-05}, {"id": 85, "seek": 64760, "start": 647.6, "end": 654.36, "text": " the way to do that is by creating these Lua C functions, they always have the same signature,", "tokens": [264, 636, 281, 360, 300, 307, 538, 4084, 613, 441, 4398, 383, 6828, 11, 436, 1009, 362, 264, 912, 13397, 11], "temperature": 0.0, "avg_logprob": -0.11307758980609, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.00011543802975211293}, {"id": 86, "seek": 64760, "start": 654.36, "end": 661.72, "text": " they take single argument, this Lua context, Lua state, and they return an integer, which is the", "tokens": [436, 747, 2167, 6770, 11, 341, 441, 4398, 4319, 11, 441, 4398, 1785, 11, 293, 436, 2736, 364, 24922, 11, 597, 307, 264], "temperature": 0.0, "avg_logprob": -0.11307758980609, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.00011543802975211293}, {"id": 87, "seek": 64760, "start": 661.72, "end": 669.08, "text": " number of variables that they put on the stack as return values. Functions will always look the", "tokens": [1230, 295, 9102, 300, 436, 829, 322, 264, 8630, 382, 2736, 4190, 13, 11166, 3916, 486, 1009, 574, 264], "temperature": 0.0, "avg_logprob": -0.11307758980609, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.00011543802975211293}, {"id": 88, "seek": 64760, "start": 669.08, "end": 676.88, "text": " same, pop the arguments from the stack, do some useful work, push the results back onto, push", "tokens": [912, 11, 1665, 264, 12869, 490, 264, 8630, 11, 360, 512, 4420, 589, 11, 2944, 264, 3542, 646, 3911, 11, 2944], "temperature": 0.0, "avg_logprob": -0.11307758980609, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.00011543802975211293}, {"id": 89, "seek": 67688, "start": 676.88, "end": 683.24, "text": " the results back onto the stack, you create an array of this Lua registry functions where you", "tokens": [264, 3542, 646, 3911, 264, 8630, 11, 291, 1884, 364, 10225, 295, 341, 441, 4398, 36468, 6828, 689, 291], "temperature": 0.0, "avg_logprob": -0.13054537773132324, "compression_ratio": 1.8855721393034826, "no_speech_prob": 9.19996018637903e-05}, {"id": 90, "seek": 67688, "start": 683.24, "end": 689.0, "text": " have a name plus a pointer to the function, a sentinel value to mark the end of the array,", "tokens": [362, 257, 1315, 1804, 257, 23918, 281, 264, 2445, 11, 257, 2279, 40952, 2158, 281, 1491, 264, 917, 295, 264, 10225, 11], "temperature": 0.0, "avg_logprob": -0.13054537773132324, "compression_ratio": 1.8855721393034826, "no_speech_prob": 9.19996018637903e-05}, {"id": 91, "seek": 67688, "start": 689.0, "end": 696.4399999999999, "text": " and then you have a Lua open underscore and then the name of your, the name of your, the name of", "tokens": [293, 550, 291, 362, 257, 441, 4398, 1269, 37556, 293, 550, 264, 1315, 295, 428, 11, 264, 1315, 295, 428, 11, 264, 1315, 295], "temperature": 0.0, "avg_logprob": -0.13054537773132324, "compression_ratio": 1.8855721393034826, "no_speech_prob": 9.19996018637903e-05}, {"id": 92, "seek": 67688, "start": 696.4399999999999, "end": 702.56, "text": " your module, which returns a new lip, so this will put your module that you just created onto the", "tokens": [428, 10088, 11, 597, 11247, 257, 777, 8280, 11, 370, 341, 486, 829, 428, 10088, 300, 291, 445, 2942, 3911, 264], "temperature": 0.0, "avg_logprob": -0.13054537773132324, "compression_ratio": 1.8855721393034826, "no_speech_prob": 9.19996018637903e-05}, {"id": 93, "seek": 70256, "start": 702.56, "end": 711.4399999999999, "text": " stack and return one for a single return value, and by doing this you can then load the module in", "tokens": [8630, 293, 2736, 472, 337, 257, 2167, 2736, 2158, 11, 293, 538, 884, 341, 291, 393, 550, 3677, 264, 10088, 294], "temperature": 0.0, "avg_logprob": -0.1263096673148019, "compression_ratio": 1.651685393258427, "no_speech_prob": 4.2958370613632724e-05}, {"id": 94, "seek": 70256, "start": 711.4399999999999, "end": 720.76, "text": " your Lua code and then call into the C code without any, well, call into the C code and get the", "tokens": [428, 441, 4398, 3089, 293, 550, 818, 666, 264, 383, 3089, 1553, 604, 11, 731, 11, 818, 666, 264, 383, 3089, 293, 483, 264], "temperature": 0.0, "avg_logprob": -0.1263096673148019, "compression_ratio": 1.651685393258427, "no_speech_prob": 4.2958370613632724e-05}, {"id": 95, "seek": 70256, "start": 720.76, "end": 731.4, "text": " result back. Of course, having to do, well, having to build a shared object might be a bit annoying,", "tokens": [1874, 646, 13, 2720, 1164, 11, 1419, 281, 360, 11, 731, 11, 1419, 281, 1322, 257, 5507, 2657, 1062, 312, 257, 857, 11304, 11], "temperature": 0.0, "avg_logprob": -0.1263096673148019, "compression_ratio": 1.651685393258427, "no_speech_prob": 4.2958370613632724e-05}, {"id": 96, "seek": 73140, "start": 731.4, "end": 737.64, "text": " you have to convince your, you have to convince your build system to create a shared object for", "tokens": [291, 362, 281, 13447, 428, 11, 291, 362, 281, 13447, 428, 1322, 1185, 281, 1884, 257, 5507, 2657, 337], "temperature": 0.0, "avg_logprob": -0.1165162363360005, "compression_ratio": 1.899497487437186, "no_speech_prob": 3.841055149678141e-05}, {"id": 97, "seek": 73140, "start": 737.64, "end": 743.8, "text": " you, there's no, and there's no way to share then between a C application and your Lua code,", "tokens": [291, 11, 456, 311, 572, 11, 293, 456, 311, 572, 636, 281, 2073, 550, 1296, 257, 383, 3861, 293, 428, 441, 4398, 3089, 11], "temperature": 0.0, "avg_logprob": -0.1165162363360005, "compression_ratio": 1.899497487437186, "no_speech_prob": 3.841055149678141e-05}, {"id": 98, "seek": 73140, "start": 743.8, "end": 751.3199999999999, "text": " so there's a, there's a fix for that actually, you can publish internal functions in your Lua", "tokens": [370, 456, 311, 257, 11, 456, 311, 257, 3191, 337, 300, 767, 11, 291, 393, 11374, 6920, 6828, 294, 428, 441, 4398], "temperature": 0.0, "avg_logprob": -0.1165162363360005, "compression_ratio": 1.899497487437186, "no_speech_prob": 3.841055149678141e-05}, {"id": 99, "seek": 73140, "start": 751.3199999999999, "end": 761.04, "text": " application, so functions that exist within your C application and make them available to a Lua", "tokens": [3861, 11, 370, 6828, 300, 2514, 1951, 428, 383, 3861, 293, 652, 552, 2435, 281, 257, 441, 4398], "temperature": 0.0, "avg_logprob": -0.1165162363360005, "compression_ratio": 1.899497487437186, "no_speech_prob": 3.841055149678141e-05}, {"id": 100, "seek": 76104, "start": 761.04, "end": 766.8, "text": " context that is created in that application, by combining basically the previous two approaches,", "tokens": [4319, 300, 307, 2942, 294, 300, 3861, 11, 538, 21928, 1936, 264, 3894, 732, 11587, 11], "temperature": 0.0, "avg_logprob": -0.17393604006086077, "compression_ratio": 1.540983606557377, "no_speech_prob": 4.7650260967202485e-05}, {"id": 101, "seek": 76104, "start": 766.8, "end": 776.88, "text": " so same thing here, subtract function defined as a Lua C function, returns the result of A-B,", "tokens": [370, 912, 551, 510, 11, 16390, 2445, 7642, 382, 257, 441, 4398, 383, 2445, 11, 11247, 264, 1874, 295, 316, 12, 33, 11], "temperature": 0.0, "avg_logprob": -0.17393604006086077, "compression_ratio": 1.540983606557377, "no_speech_prob": 4.7650260967202485e-05}, {"id": 102, "seek": 76104, "start": 776.88, "end": 785.4, "text": " you register it and then in your code you can just say, you can just push this Lua new lip,", "tokens": [291, 7280, 309, 293, 550, 294, 428, 3089, 291, 393, 445, 584, 11, 291, 393, 445, 2944, 341, 441, 4398, 777, 8280, 11], "temperature": 0.0, "avg_logprob": -0.17393604006086077, "compression_ratio": 1.540983606557377, "no_speech_prob": 4.7650260967202485e-05}, {"id": 103, "seek": 78540, "start": 785.4, "end": 791.64, "text": " so the module that will be created, it's actually, it's actually a table with function pointers", "tokens": [370, 264, 10088, 300, 486, 312, 2942, 11, 309, 311, 767, 11, 309, 311, 767, 257, 3199, 365, 2445, 44548], "temperature": 0.0, "avg_logprob": -0.11536130126641721, "compression_ratio": 1.7285067873303168, "no_speech_prob": 7.040552736725658e-05}, {"id": 104, "seek": 78540, "start": 791.64, "end": 797.68, "text": " because everything is a table in Lua, and then instead of, well, instead of it being a shared", "tokens": [570, 1203, 307, 257, 3199, 294, 441, 4398, 11, 293, 550, 2602, 295, 11, 731, 11, 2602, 295, 309, 885, 257, 5507], "temperature": 0.0, "avg_logprob": -0.11536130126641721, "compression_ratio": 1.7285067873303168, "no_speech_prob": 7.040552736725658e-05}, {"id": 105, "seek": 78540, "start": 797.68, "end": 802.12, "text": " object and being registered, you can just say, okay, the thing that I just put on top of the", "tokens": [2657, 293, 885, 13968, 11, 291, 393, 445, 584, 11, 1392, 11, 264, 551, 300, 286, 445, 829, 322, 1192, 295, 264], "temperature": 0.0, "avg_logprob": -0.11536130126641721, "compression_ratio": 1.7285067873303168, "no_speech_prob": 7.040552736725658e-05}, {"id": 106, "seek": 78540, "start": 802.12, "end": 809.4, "text": " stack, make it global and have it be, and make it global under the following name, so in this case,", "tokens": [8630, 11, 652, 309, 4338, 293, 362, 309, 312, 11, 293, 652, 309, 4338, 833, 264, 3480, 1315, 11, 370, 294, 341, 1389, 11], "temperature": 0.0, "avg_logprob": -0.11536130126641721, "compression_ratio": 1.7285067873303168, "no_speech_prob": 7.040552736725658e-05}, {"id": 107, "seek": 80940, "start": 809.4, "end": 817.48, "text": " C arithmetic, and in that case, any other Lua script that you use doesn't even have to load the", "tokens": [383, 42973, 11, 293, 294, 300, 1389, 11, 604, 661, 441, 4398, 5755, 300, 291, 764, 1177, 380, 754, 362, 281, 3677, 264], "temperature": 0.0, "avg_logprob": -0.13291975478051413, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.00010442983329994604}, {"id": 108, "seek": 80940, "start": 817.48, "end": 821.8, "text": " module, it will automatically be loaded, it's already in the context, and so wherever you're", "tokens": [10088, 11, 309, 486, 6772, 312, 13210, 11, 309, 311, 1217, 294, 264, 4319, 11, 293, 370, 8660, 291, 434], "temperature": 0.0, "avg_logprob": -0.13291975478051413, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.00010442983329994604}, {"id": 109, "seek": 80940, "start": 821.8, "end": 826.76, "text": " doing this, you can just say, you can just call this C arithmetic module and then the functions", "tokens": [884, 341, 11, 291, 393, 445, 584, 11, 291, 393, 445, 818, 341, 383, 42973, 10088, 293, 550, 264, 6828], "temperature": 0.0, "avg_logprob": -0.13291975478051413, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.00010442983329994604}, {"id": 110, "seek": 82676, "start": 826.76, "end": 841.96, "text": " that exist within there, so in short, Lua can, well, you could say Lua can help you get more done", "tokens": [300, 2514, 1951, 456, 11, 370, 294, 2099, 11, 441, 4398, 393, 11, 731, 11, 291, 727, 584, 441, 4398, 393, 854, 291, 483, 544, 1096], "temperature": 0.0, "avg_logprob": -0.12828659094296968, "compression_ratio": 1.3884892086330936, "no_speech_prob": 4.3836025724885985e-05}, {"id": 111, "seek": 82676, "start": 841.96, "end": 850.68, "text": " quicker, but keeping this, being a virtuous programmer in mind, I think that Lua can definitely", "tokens": [16255, 11, 457, 5145, 341, 11, 885, 257, 48918, 32116, 294, 1575, 11, 286, 519, 300, 441, 4398, 393, 2138], "temperature": 0.0, "avg_logprob": -0.12828659094296968, "compression_ratio": 1.3884892086330936, "no_speech_prob": 4.3836025724885985e-05}, {"id": 112, "seek": 85068, "start": 850.68, "end": 861.4799999999999, "text": " help you embody this virtue of laziness, and so there's some time left even. I, all the code", "tokens": [854, 291, 42575, 341, 20816, 295, 19320, 1324, 11, 293, 370, 456, 311, 512, 565, 1411, 754, 13, 286, 11, 439, 264, 3089], "temperature": 0.0, "avg_logprob": -0.17341182629267374, "compression_ratio": 1.3381294964028776, "no_speech_prob": 0.00012493411486502737}, {"id": 113, "seek": 85068, "start": 861.4799999999999, "end": 869.7199999999999, "text": " that was in the presentation, I basically have some executable examples for that open GitLab,", "tokens": [300, 390, 294, 264, 5860, 11, 286, 1936, 362, 512, 7568, 712, 5110, 337, 300, 1269, 16939, 37880, 11], "temperature": 0.0, "avg_logprob": -0.17341182629267374, "compression_ratio": 1.3381294964028776, "no_speech_prob": 0.00012493411486502737}, {"id": 114, "seek": 86972, "start": 869.72, "end": 881.0, "text": " if you want to check it out, and that's it, so thank you for your attention. If you have any", "tokens": [498, 291, 528, 281, 1520, 309, 484, 11, 293, 300, 311, 309, 11, 370, 1309, 291, 337, 428, 3202, 13, 759, 291, 362, 604], "temperature": 0.0, "avg_logprob": -0.11742692523532444, "compression_ratio": 1.4724409448818898, "no_speech_prob": 0.0005844999686814845}, {"id": 115, "seek": 86972, "start": 881.0, "end": 885.32, "text": " questions, or you want to tell me I'm wrong, or you want to talk to me about something I'll be", "tokens": [1651, 11, 420, 291, 528, 281, 980, 385, 286, 478, 2085, 11, 420, 291, 528, 281, 751, 281, 385, 466, 746, 286, 603, 312], "temperature": 0.0, "avg_logprob": -0.11742692523532444, "compression_ratio": 1.4724409448818898, "no_speech_prob": 0.0005844999686814845}, {"id": 116, "seek": 88532, "start": 885.32, "end": 899.8000000000001, "text": " in the hallway after your presentation, so thank you. Thank you. We have 20 seconds, if we have", "tokens": [294, 264, 23903, 934, 428, 5860, 11, 370, 1309, 291, 13, 1044, 291, 13, 492, 362, 945, 3949, 11, 498, 321, 362], "temperature": 0.0, "avg_logprob": -0.18863382706275353, "compression_ratio": 1.130952380952381, "no_speech_prob": 0.0005159961292520165}, {"id": 117, "seek": 89980, "start": 899.8, "end": 916.28, "text": " one question maybe, very quick one.", "tokens": [50364, 472, 1168, 1310, 11, 588, 1702, 472, 13, 51188], "temperature": 0.0, "avg_logprob": -0.38890253413807263, "compression_ratio": 0.8333333333333334, "no_speech_prob": 0.0006025306647643447}], "language": "en"}