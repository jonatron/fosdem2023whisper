{"text": " last talk of the day, I am glad that there are still people in this room, like usually people tend to go like dinner early or so, but well, let's close this tab room and please welcome Istvan on stage, he's going to talk about how to test your compose UI. So thank you very much, hello, I'm Istvan from here and thank you all for still being here, that's really encouraging. So let's get started, I'll be talking about testing Jetpack Compose UI on Android. So first of all, just a little extra, there is a sample project, which I took all the samples in this talk from, so feel free to check it out on my GitHub page. Okay, so a quick recap on Android testing without compose, so the regular view system. With Android, with the regular view system, we have views or view groups, which are objects created from inflating XML, or of course from code, and they have rendering and behavior attached to them, and because of this, or well, because of their actual object, we have a grasp on them, we can get their reference from code or reference for them from the view hierarchy by find view by ID or so. Okay, let's see how compose compares to that. Of course, we have a declaration of the UI and not the UI objects themselves, so we don't have a grasp on what compose actually does, what the framework actually translates our description of the UI to, and of course not every composable actually emits UI elements into the composition, so that might make our work harder as well. Okay, so let's see what composables we will be testing in the next few minutes. First of all, there is an entry list, which is just a simple screen of a list, which will display hydration entry items, and the entry list is just a wrapper around the laser column that does just that, that translates hydration entries into hydration item composables, and the items themselves are just a simple row with two texts to display the data on the screen. Okay, let's see how we can solve tests in our Android project for these composables. We have to just add a few dependencies, of course now we have a nice bomb to do that, so after we do that we add those to our grader files, we can already start writing compose UI tests. And how a compose UI test looks, like it's just a regular test class, so nothing special there, if you were writing Android UI tests, this is pretty much the same. The first thing that you can spot is that there's just another rule that we have to use inside the instrumented test, and actually we can create that rule with a built-in create Android compose rule function, which has a type parameter, which has to be an activity, so for that type parameter we can set main activity or any other activity inside the replication that we want to start, so this rule created by this function will start the activity provided in that parameter. Of course, if we want to test composables in isolation without any specific activity, we can do that as well, then we can just pass component activity to that type parameter, and yeah, component activity is just a base class for many Android X activities, it's just a foundation of all the other classes, and it can host composables, so that's that. And if we want to do this, there's actually a shortcut to do that, which is called create compose rule, which does just the same as you've seen before, but in a multi-platform way, so if you want to prepare for a multi-platform project, then you can call this create compose rule, and on Android it will translate to what you've seen before. Okay, with that out of the way, we can start writing URI tests. The tests themselves are just regular test functions, nothing special there. The specialty comes when we actually start to write the test, because all of the calls, all of the test calls, has to be made on this test rule, so we can actually scope to that, scope to, say scope to that, we apply because this is just regular Kotlin code, so we can do whatever we want and whatever we know of, so we can just scope to this compose rules, scope to this compose rule and call anything on that. And the compose test rule has a set content method, which you could have already met, as an extension on the activity or as a function of compose view, if you do interoperability, so yeah, this is the entrance to the compose world inside our tests. And in that content, we can actually call anything, any composable at this point, but for this example, we'll call our applications theme, and then just call the entry list composable, which we've seen before, with just a fake list of entries, and if you wonder where those entries can come from, they can come from basically anywhere, we're still just writing Kotlin code, so these entries could be just a fake list of entries that you provide to the test suite from anywhere. Okay, so now we know how to set up our tests, but we still have no grasp on that entry list composable or anything that entry list composable actually emits into the composition, so let's see how we can fix that problem. Enter the Semantix tree. So the Semantix tree is actually another tree that is built in parallel with the composition, consists of node that will be rendered after some processing, of course, and the composables that we write emit nodes into the composition, but they also emit nodes into the Semantix tree, which is used by the accessibility frameworks and also the testing framework. And just as with the composition, composables that we write can, but may not contribute to the Semantix tree in any way, but also that behavior can be modified, and we will see how we can do that as well. Okay, so let's simplify our example a bit. Now we just call a simple text composable inside the set content of our test through, and by doing that, the Semantix tree will look like that on the right. So there will always be a root node for the Semantix tree, and the text composable by default emits its text content into a new Semantix node, which you can see as a green node. And yeah, that's it. So let's change quickly to the canonical representation that you will see when you will be writing tests and observing this Semantix tree. Now is the root node, of course, and the text contributes, text attributes of 100 milliliters text inside that Semantix node. Okay, let's add the row, because as you can see, we are building the items of the list. So let's add row, and yeah, that doesn't change the Semantix tree in any way, because the row composable is actually a layout composable, and it doesn't emit anything into the composition. And by default, it doesn't emit anything into the Semantix tree either. Let's add another text, and of course, that will create a new Semantix node, which will be a sibling of the previous one, and the child of the root node in this example. Okay, so this is a really easy example, but of course, when you're writing an application, you will be facing complex screens and complex subcomposables and whatnot. So you will be looking at more and more complex Semantix trees as well, which you have to assert on. So of course, there must be a way to visualize this. One thing that we can do in our tests is call the own root finder method. We will be talking about those later. And call print to log on it with a test tag, sorry, a log tag. So what this will do when you run such a UI test that has this line on it, is that it will print this structured log, which you can find by the log tag, and you will see the root node here and all the other nodes structured inside this log entry. The other way might be a bit easier. You can configure the layout inspector, if you have a fully composed screen, of course, to highlight the nodes that are contributing into the Semantix tree and to inspect the attributes of those nodes. Okay, let's get back to this easy example and let's see how we can modify the behavior of how composables emit things into the Semantix tree. There is a modifier called Semantix because of course, there are modifiers for everything. So yeah, the Semantix modifier by itself does nothing, as you can see on the Semantix tree representation. So by default, adding the Semantix tree modifier into the modifier cascade won't do anything special. As long as we start adding some attribute values inside the Semantix modifier. So in this example, we add a content description to the row. And as you can see, this will actually modify the behavior of row. And with this row will actually contribute to the Semantix tree with the new Semantix node. That will be the parent of the two text nodes that are the children of the row, of course. And as you can see, the content description Semantix setting adds a content description attribute into that new node with the text of a list item. That will be picked up by the accessibility and testing frameworks, but also we can define a test tag which will only be picked up by the testing framework and not the accessibility framework. And of course, we will be able to assert on this as well. As you can see, the test tag attribute actually contributes with a tag attribute inside the accessibility node, and it will be a text as well. Okay, so with this knowledge, we can already start asserting and exercising our UI's with the Compose UI testing framework. Let's see what APIs we can use to do so. We've already seen this first one, the onRoot, which selects the, so we already seen this first finder which selects the root node of the whole Semantix tree. And yeah, there are a few functions that you can call on them, call on the root node. One you already seen, this is the print to log, which can be useful when you start writing your UI tests. There is another family of functions which is called onNodeWith, and there are a few variants on this which can find our nodes based on multiple predefined tags or multiple predefined attributes that can be present in our Semantix nodes. In this example, onNodeWith tag selects the node with the tag that matches there. In the next example, it matches for a content description, and yeah, in the next one, it matches on the text. It can be a test tag and so on and so forth. Of course, these finders try to find exactly one matching node. So if you don't have a matching node, or if you have multiple nodes that would match the criteria, this will fail your UI test. There are another family of functions that you can use to find nodes they are called onAllNodesWith, and they also have the same variants predefined, and these will try to match one or more of the nodes of the criteria. If they don't find any nodes, of course, they will also fail our tests. Just as in Espresso, if you found a node in Espresso, you can find a view. Here you can find the Semantix node. Just as in Espresso, you can perform some actions on your found nodes which will translate to actions in the actual composables that you are referring to by Semantix nodes. Let's see this example of a button. It's just a simple button that has a text inside of it. You would expect that it can be clickable, and there is a perform click on the node class that the onNodeWith functions return. If you do this perform click, then the button will be actually clicked in our UI test. This is because the button, besides many, many attributes that it contributes to the Semantix tree with, it defines an action which is called onClick, and perform click checks for this action, and if it's there on the button's Semantix node, then it deems it clickable and it will be clicked. For the rest of the APIs, because we don't have much time here, you can check the official compost testing cheat sheet which you can find on that link. Okay. Let's dive into the last topic for today, pretty much. It's hybrid UI testing. So what's hybrid UI in this context? Hybrid UI is when you want to include composable content inside the view hierarchy or the other way around, you want to include your existing custom views for whatever reason inside a composition, so like a full screen made with Compose. And luckily, we have support for this. Espresso and the compost testing framework can work together to test such cases. Let's see our first example here. So in this example, we will go with the Compose UVay, meaning that the container here, the toolbar, and the rest of the screen, except the button, will be in XML, and we will be trying to include the button which is written in Compose. So yeah, this is the context that we will be using. There's a constraint layout with the toolbar, with its regular attributes, and there is a Compose view which will be our entry point for Compose inside our layout. Okay. Yeah, here is the fluff that we need to set up this layout. We have an activity that uses view binding to set up its views. And of course, with the binding, we will be setting up the toolbar title, but the most, but the more important thing is that we set up our Compose view where we can call the setContent method that you can see here. Sorry. And yeah, there is a custom button Composable which is written somewhere else. It doesn't really matter. We can set a text on it, and it won't be, we won't be clicking it, so we just set its clickListener to nothing. All right. So how would we test this scenario? First of all, we declare our Compose test rule with starting that Compose view demo activity that we declared previously, and then we scope to the Compose test rule and call our tests. First of all, this is just a regular espresso call. Of course, we are acting on a regular view hierarchy, so this is displayed check on the toolbar. It will work. There's nothing special there. But the next thing that will also work is just calling the Compose testing API on this same layout in this same activity, and that assertion will actually pass as well because of the interoperability between the Jetpack Compose testing APIs and espresso. Okay. That's really nice. Let's see the other way around. So in this example, the whole screen you see in here except the button will be in Compose, and we'll be including this custom button here, which is written in the plain old view system. It will be a custom view. Okay. This is the custom button view. Nothing special is here. The layout is inflated from a layout XML. There might be some fluff on it, and there is a subtext method to set the text, and there is an onClickListener method to set the clickListener. Of course, nothing special here. And this is a constraint layout, so this is like a deep custom button. Of course, there might be better examples than this, like an external SDK's custom view that's still not implemented in Compose. But for this example, we'll stick to this custom button view. Okay. And this is the Composable that we will be including that button in. It's called Android View Demo, and it has an onButtonClick parameter to lift up the action handling of the button. Okay. Of course, we are using a scaffold. We are adding a top up bar there that's the fluff here, and there is the interoperability API for including a view inside the Compose position, and that's called Android View. You can read on it in the documentation. The important part here is that there we call the constructor of the custom button view and set it up like you would with a regular view in code. Okay. So how do we test this scenario? We will just, sorry, we will just call the createCompose rule because we don't need an exact activity to test this Composable in isolation. And then we set up our test, and we do a kind of behavioral test pattern there for our Android View Demo Composable. As you can see, the button click handler is just setting up an external value outside. Okay. So if the button will be clicked, then we would expect that button clicked variable to be set to true, and we will be asserting on that. So let's start testing. First things first. Android View, we are testing if the toolbar in the Composable is visible, and that will pass. Then we do the espresso testing for the button to check if it's visible, and then it's displayed, and that will pass as well. Again, this is the power of interoperability between espresso and Compos. Okay. So let's go forward and try to click that button that we have this as a view, that we have here as a view. And we would expect that that assert equals on the button will be passing, but unfortunately that's not the case as of now. So yeah, as of now with the latest Compos bomb and the latest Compos version, this will not pass. This will not happen, actually. That perform click won't be clicking the button because of a bug in espresso. The thing that we can do is to call perform click on the view that's provided by us in espresso, but the problem with this is that perform click won't be happening inside the context of espresso. So there might be timing issues, and when you want to run a check after doing this, that might fail because the click is not performed or the side effects of the click won't be performed in time. So with this, yeah, we now have a kind of flaky test, which we could circumvent by doing some more fluff around it with espresso, but by default this is the case now. Hopefully it will be fixed soon. So we're almost done. There are more topics that you can check out on Compos testing. The best part of it is the libraries that do screenshot testing, of course, but yeah, this topic is pretty deep, so yeah, feel free to check out these. Finally, here are some resources that I use to create this talk, and also there is a 40-minute version on my website that you can watch, and multiple instances actually. So yeah, if you're interested in this topic and some more tools to use and some more examples, check out those as well. And yeah, finally, thank you for your attention. If you have any questions, I guess we have some time, and yeah, that's it. Thank you. Thank you. Thank you.", "segments": [{"id": 0, "seek": 3000, "start": 30.0, "end": 37.04, "text": " last talk of the day, I am glad that there are still people in this room, like usually", "tokens": [50364, 1036, 751, 295, 264, 786, 11, 286, 669, 5404, 300, 456, 366, 920, 561, 294, 341, 1808, 11, 411, 2673, 50716], "temperature": 0.0, "avg_logprob": -0.36109108083388386, "compression_ratio": 1.5, "no_speech_prob": 0.4406825602054596}, {"id": 1, "seek": 3000, "start": 37.04, "end": 44.76, "text": " people tend to go like dinner early or so, but well, let's close this tab room and please", "tokens": [50716, 561, 3928, 281, 352, 411, 6148, 2440, 420, 370, 11, 457, 731, 11, 718, 311, 1998, 341, 4421, 1808, 293, 1767, 51102], "temperature": 0.0, "avg_logprob": -0.36109108083388386, "compression_ratio": 1.5, "no_speech_prob": 0.4406825602054596}, {"id": 2, "seek": 3000, "start": 44.76, "end": 55.36, "text": " welcome Istvan on stage, he's going to talk about how to test your compose UI.", "tokens": [51102, 2928, 12810, 9768, 322, 3233, 11, 415, 311, 516, 281, 751, 466, 577, 281, 1500, 428, 35925, 15682, 13, 51632], "temperature": 0.0, "avg_logprob": -0.36109108083388386, "compression_ratio": 1.5, "no_speech_prob": 0.4406825602054596}, {"id": 3, "seek": 5536, "start": 55.36, "end": 62.2, "text": " So thank you very much, hello, I'm Istvan from here and thank you all for still being here,", "tokens": [50364, 407, 1309, 291, 588, 709, 11, 7751, 11, 286, 478, 12810, 9768, 490, 510, 293, 1309, 291, 439, 337, 920, 885, 510, 11, 50706], "temperature": 0.0, "avg_logprob": -0.2592483096652561, "compression_ratio": 1.5210084033613445, "no_speech_prob": 0.09118084609508514}, {"id": 4, "seek": 5536, "start": 62.2, "end": 64.32, "text": " that's really encouraging.", "tokens": [50706, 300, 311, 534, 14580, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2592483096652561, "compression_ratio": 1.5210084033613445, "no_speech_prob": 0.09118084609508514}, {"id": 5, "seek": 5536, "start": 64.32, "end": 70.88, "text": " So let's get started, I'll be talking about testing Jetpack Compose UI on Android.", "tokens": [50812, 407, 718, 311, 483, 1409, 11, 286, 603, 312, 1417, 466, 4997, 28730, 9539, 6620, 541, 15682, 322, 8853, 13, 51140], "temperature": 0.0, "avg_logprob": -0.2592483096652561, "compression_ratio": 1.5210084033613445, "no_speech_prob": 0.09118084609508514}, {"id": 6, "seek": 5536, "start": 70.88, "end": 74.96000000000001, "text": " So first of all, just a little extra, there is a sample project, which I took all the", "tokens": [51140, 407, 700, 295, 439, 11, 445, 257, 707, 2857, 11, 456, 307, 257, 6889, 1716, 11, 597, 286, 1890, 439, 264, 51344], "temperature": 0.0, "avg_logprob": -0.2592483096652561, "compression_ratio": 1.5210084033613445, "no_speech_prob": 0.09118084609508514}, {"id": 7, "seek": 5536, "start": 74.96000000000001, "end": 80.64, "text": " samples in this talk from, so feel free to check it out on my GitHub page.", "tokens": [51344, 10938, 294, 341, 751, 490, 11, 370, 841, 1737, 281, 1520, 309, 484, 322, 452, 23331, 3028, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2592483096652561, "compression_ratio": 1.5210084033613445, "no_speech_prob": 0.09118084609508514}, {"id": 8, "seek": 8064, "start": 81.08, "end": 88.16, "text": " Okay, so a quick recap on Android testing without compose, so the regular view system.", "tokens": [50386, 1033, 11, 370, 257, 1702, 20928, 322, 8853, 4997, 1553, 35925, 11, 370, 264, 3890, 1910, 1185, 13, 50740], "temperature": 0.0, "avg_logprob": -0.26411678089815027, "compression_ratio": 1.714975845410628, "no_speech_prob": 0.020837850868701935}, {"id": 9, "seek": 8064, "start": 88.16, "end": 92.4, "text": " With Android, with the regular view system, we have views or view groups, which are objects", "tokens": [50740, 2022, 8853, 11, 365, 264, 3890, 1910, 1185, 11, 321, 362, 6809, 420, 1910, 3935, 11, 597, 366, 6565, 50952], "temperature": 0.0, "avg_logprob": -0.26411678089815027, "compression_ratio": 1.714975845410628, "no_speech_prob": 0.020837850868701935}, {"id": 10, "seek": 8064, "start": 92.4, "end": 99.0, "text": " created from inflating XML, or of course from code, and they have rendering and behavior", "tokens": [50952, 2942, 490, 9922, 990, 43484, 11, 420, 295, 1164, 490, 3089, 11, 293, 436, 362, 22407, 293, 5223, 51282], "temperature": 0.0, "avg_logprob": -0.26411678089815027, "compression_ratio": 1.714975845410628, "no_speech_prob": 0.020837850868701935}, {"id": 11, "seek": 8064, "start": 99.0, "end": 107.04, "text": " attached to them, and because of this, or well, because of their actual object, we have", "tokens": [51282, 8570, 281, 552, 11, 293, 570, 295, 341, 11, 420, 731, 11, 570, 295, 641, 3539, 2657, 11, 321, 362, 51684], "temperature": 0.0, "avg_logprob": -0.26411678089815027, "compression_ratio": 1.714975845410628, "no_speech_prob": 0.020837850868701935}, {"id": 12, "seek": 10704, "start": 107.12, "end": 113.52000000000001, "text": " a grasp on them, we can get their reference from code or reference for them from the view", "tokens": [50368, 257, 21743, 322, 552, 11, 321, 393, 483, 641, 6408, 490, 3089, 420, 6408, 337, 552, 490, 264, 1910, 50688], "temperature": 0.0, "avg_logprob": -0.23708560854889627, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.007848347537219524}, {"id": 13, "seek": 10704, "start": 113.52000000000001, "end": 118.32000000000001, "text": " hierarchy by find view by ID or so.", "tokens": [50688, 22333, 538, 915, 1910, 538, 7348, 420, 370, 13, 50928], "temperature": 0.0, "avg_logprob": -0.23708560854889627, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.007848347537219524}, {"id": 14, "seek": 10704, "start": 118.32000000000001, "end": 120.64, "text": " Okay, let's see how compose compares to that.", "tokens": [50928, 1033, 11, 718, 311, 536, 577, 35925, 38334, 281, 300, 13, 51044], "temperature": 0.0, "avg_logprob": -0.23708560854889627, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.007848347537219524}, {"id": 15, "seek": 10704, "start": 120.64, "end": 127.08000000000001, "text": " Of course, we have a declaration of the UI and not the UI objects themselves, so we", "tokens": [51044, 2720, 1164, 11, 321, 362, 257, 27606, 295, 264, 15682, 293, 406, 264, 15682, 6565, 2969, 11, 370, 321, 51366], "temperature": 0.0, "avg_logprob": -0.23708560854889627, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.007848347537219524}, {"id": 16, "seek": 10704, "start": 127.08000000000001, "end": 131.8, "text": " don't have a grasp on what compose actually does, what the framework actually translates", "tokens": [51366, 500, 380, 362, 257, 21743, 322, 437, 35925, 767, 775, 11, 437, 264, 8388, 767, 28468, 51602], "temperature": 0.0, "avg_logprob": -0.23708560854889627, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.007848347537219524}, {"id": 17, "seek": 13180, "start": 131.8, "end": 138.20000000000002, "text": " our description of the UI to, and of course not every composable actually emits UI elements", "tokens": [50364, 527, 3855, 295, 264, 15682, 281, 11, 293, 295, 1164, 406, 633, 10199, 712, 767, 846, 1208, 15682, 4959, 50684], "temperature": 0.0, "avg_logprob": -0.19554651351202101, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.0018639181507751346}, {"id": 18, "seek": 13180, "start": 138.20000000000002, "end": 144.72, "text": " into the composition, so that might make our work harder as well.", "tokens": [50684, 666, 264, 12686, 11, 370, 300, 1062, 652, 527, 589, 6081, 382, 731, 13, 51010], "temperature": 0.0, "avg_logprob": -0.19554651351202101, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.0018639181507751346}, {"id": 19, "seek": 13180, "start": 144.72, "end": 153.76000000000002, "text": " Okay, so let's see what composables we will be testing in the next few minutes.", "tokens": [51010, 1033, 11, 370, 718, 311, 536, 437, 10199, 2965, 321, 486, 312, 4997, 294, 264, 958, 1326, 2077, 13, 51462], "temperature": 0.0, "avg_logprob": -0.19554651351202101, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.0018639181507751346}, {"id": 20, "seek": 13180, "start": 153.76000000000002, "end": 158.36, "text": " First of all, there is an entry list, which is just a simple screen of a list, which will", "tokens": [51462, 2386, 295, 439, 11, 456, 307, 364, 8729, 1329, 11, 597, 307, 445, 257, 2199, 2568, 295, 257, 1329, 11, 597, 486, 51692], "temperature": 0.0, "avg_logprob": -0.19554651351202101, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.0018639181507751346}, {"id": 21, "seek": 15836, "start": 158.4, "end": 165.88000000000002, "text": " display hydration entry items, and the entry list is just a wrapper around the laser column", "tokens": [50366, 4674, 43631, 8729, 4754, 11, 293, 264, 8729, 1329, 307, 445, 257, 46906, 926, 264, 12530, 7738, 50740], "temperature": 0.0, "avg_logprob": -0.2056170773793416, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004845666699111462}, {"id": 22, "seek": 15836, "start": 165.88000000000002, "end": 172.88000000000002, "text": " that does just that, that translates hydration entries into hydration item composables, and", "tokens": [50740, 300, 775, 445, 300, 11, 300, 28468, 43631, 23041, 666, 43631, 3174, 10199, 2965, 11, 293, 51090], "temperature": 0.0, "avg_logprob": -0.2056170773793416, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004845666699111462}, {"id": 23, "seek": 15836, "start": 172.88000000000002, "end": 178.08, "text": " the items themselves are just a simple row with two texts to display the data on the", "tokens": [51090, 264, 4754, 2969, 366, 445, 257, 2199, 5386, 365, 732, 15765, 281, 4674, 264, 1412, 322, 264, 51350], "temperature": 0.0, "avg_logprob": -0.2056170773793416, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004845666699111462}, {"id": 24, "seek": 15836, "start": 178.08, "end": 179.08, "text": " screen.", "tokens": [51350, 2568, 13, 51400], "temperature": 0.0, "avg_logprob": -0.2056170773793416, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004845666699111462}, {"id": 25, "seek": 15836, "start": 179.08, "end": 187.0, "text": " Okay, let's see how we can solve tests in our Android project for these composables.", "tokens": [51400, 1033, 11, 718, 311, 536, 577, 321, 393, 5039, 6921, 294, 527, 8853, 1716, 337, 613, 10199, 2965, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2056170773793416, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004845666699111462}, {"id": 26, "seek": 18700, "start": 187.56, "end": 193.04, "text": " We have to just add a few dependencies, of course now we have a nice bomb to do that,", "tokens": [50392, 492, 362, 281, 445, 909, 257, 1326, 36606, 11, 295, 1164, 586, 321, 362, 257, 1481, 7851, 281, 360, 300, 11, 50666], "temperature": 0.0, "avg_logprob": -0.21746040672384281, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.07782968133687973}, {"id": 27, "seek": 18700, "start": 193.04, "end": 198.32, "text": " so after we do that we add those to our grader files, we can already start writing compose", "tokens": [50666, 370, 934, 321, 360, 300, 321, 909, 729, 281, 527, 2771, 260, 7098, 11, 321, 393, 1217, 722, 3579, 35925, 50930], "temperature": 0.0, "avg_logprob": -0.21746040672384281, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.07782968133687973}, {"id": 28, "seek": 18700, "start": 198.32, "end": 200.32, "text": " UI tests.", "tokens": [50930, 15682, 6921, 13, 51030], "temperature": 0.0, "avg_logprob": -0.21746040672384281, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.07782968133687973}, {"id": 29, "seek": 18700, "start": 200.32, "end": 206.08, "text": " And how a compose UI test looks, like it's just a regular test class, so nothing special", "tokens": [51030, 400, 577, 257, 35925, 15682, 1500, 1542, 11, 411, 309, 311, 445, 257, 3890, 1500, 1508, 11, 370, 1825, 2121, 51318], "temperature": 0.0, "avg_logprob": -0.21746040672384281, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.07782968133687973}, {"id": 30, "seek": 18700, "start": 206.08, "end": 210.4, "text": " there, if you were writing Android UI tests, this is pretty much the same.", "tokens": [51318, 456, 11, 498, 291, 645, 3579, 8853, 15682, 6921, 11, 341, 307, 1238, 709, 264, 912, 13, 51534], "temperature": 0.0, "avg_logprob": -0.21746040672384281, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.07782968133687973}, {"id": 31, "seek": 21040, "start": 210.4, "end": 217.6, "text": " The first thing that you can spot is that there's just another rule that we have to", "tokens": [50364, 440, 700, 551, 300, 291, 393, 4008, 307, 300, 456, 311, 445, 1071, 4978, 300, 321, 362, 281, 50724], "temperature": 0.0, "avg_logprob": -0.17313625754379644, "compression_ratio": 1.7587939698492463, "no_speech_prob": 0.016686225309967995}, {"id": 32, "seek": 21040, "start": 217.6, "end": 225.36, "text": " use inside the instrumented test, and actually we can create that rule with a built-in create", "tokens": [50724, 764, 1854, 264, 7198, 292, 1500, 11, 293, 767, 321, 393, 1884, 300, 4978, 365, 257, 3094, 12, 259, 1884, 51112], "temperature": 0.0, "avg_logprob": -0.17313625754379644, "compression_ratio": 1.7587939698492463, "no_speech_prob": 0.016686225309967995}, {"id": 33, "seek": 21040, "start": 225.36, "end": 230.84, "text": " Android compose rule function, which has a type parameter, which has to be an activity,", "tokens": [51112, 8853, 35925, 4978, 2445, 11, 597, 575, 257, 2010, 13075, 11, 597, 575, 281, 312, 364, 5191, 11, 51386], "temperature": 0.0, "avg_logprob": -0.17313625754379644, "compression_ratio": 1.7587939698492463, "no_speech_prob": 0.016686225309967995}, {"id": 34, "seek": 21040, "start": 230.84, "end": 235.76, "text": " so for that type parameter we can set main activity or any other activity inside the", "tokens": [51386, 370, 337, 300, 2010, 13075, 321, 393, 992, 2135, 5191, 420, 604, 661, 5191, 1854, 264, 51632], "temperature": 0.0, "avg_logprob": -0.17313625754379644, "compression_ratio": 1.7587939698492463, "no_speech_prob": 0.016686225309967995}, {"id": 35, "seek": 23576, "start": 235.79999999999998, "end": 241.79999999999998, "text": " replication that we want to start, so this rule created by this function will start the", "tokens": [50366, 39911, 300, 321, 528, 281, 722, 11, 370, 341, 4978, 2942, 538, 341, 2445, 486, 722, 264, 50666], "temperature": 0.0, "avg_logprob": -0.20731295896380136, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.012120679020881653}, {"id": 36, "seek": 23576, "start": 241.79999999999998, "end": 244.39999999999998, "text": " activity provided in that parameter.", "tokens": [50666, 5191, 5649, 294, 300, 13075, 13, 50796], "temperature": 0.0, "avg_logprob": -0.20731295896380136, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.012120679020881653}, {"id": 37, "seek": 23576, "start": 244.39999999999998, "end": 250.32, "text": " Of course, if we want to test composables in isolation without any specific activity, we", "tokens": [50796, 2720, 1164, 11, 498, 321, 528, 281, 1500, 10199, 2965, 294, 16001, 1553, 604, 2685, 5191, 11, 321, 51092], "temperature": 0.0, "avg_logprob": -0.20731295896380136, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.012120679020881653}, {"id": 38, "seek": 23576, "start": 250.32, "end": 254.68, "text": " can do that as well, then we can just pass component activity to that type parameter,", "tokens": [51092, 393, 360, 300, 382, 731, 11, 550, 321, 393, 445, 1320, 6542, 5191, 281, 300, 2010, 13075, 11, 51310], "temperature": 0.0, "avg_logprob": -0.20731295896380136, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.012120679020881653}, {"id": 39, "seek": 23576, "start": 254.68, "end": 261.68, "text": " and yeah, component activity is just a base class for many Android X activities, it's", "tokens": [51310, 293, 1338, 11, 6542, 5191, 307, 445, 257, 3096, 1508, 337, 867, 8853, 1783, 5354, 11, 309, 311, 51660], "temperature": 0.0, "avg_logprob": -0.20731295896380136, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.012120679020881653}, {"id": 40, "seek": 26168, "start": 262.6, "end": 269.36, "text": " just a foundation of all the other classes, and it can host composables, so that's that.", "tokens": [50410, 445, 257, 7030, 295, 439, 264, 661, 5359, 11, 293, 309, 393, 3975, 10199, 2965, 11, 370, 300, 311, 300, 13, 50748], "temperature": 0.0, "avg_logprob": -0.17167282104492188, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0025696002412587404}, {"id": 41, "seek": 26168, "start": 269.36, "end": 273.36, "text": " And if we want to do this, there's actually a shortcut to do that, which is called create", "tokens": [50748, 400, 498, 321, 528, 281, 360, 341, 11, 456, 311, 767, 257, 24822, 281, 360, 300, 11, 597, 307, 1219, 1884, 50948], "temperature": 0.0, "avg_logprob": -0.17167282104492188, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0025696002412587404}, {"id": 42, "seek": 26168, "start": 273.36, "end": 278.28000000000003, "text": " compose rule, which does just the same as you've seen before, but in a multi-platform", "tokens": [50948, 35925, 4978, 11, 597, 775, 445, 264, 912, 382, 291, 600, 1612, 949, 11, 457, 294, 257, 4825, 12, 39975, 837, 51194], "temperature": 0.0, "avg_logprob": -0.17167282104492188, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0025696002412587404}, {"id": 43, "seek": 26168, "start": 278.28000000000003, "end": 283.6, "text": " way, so if you want to prepare for a multi-platform project, then you can call this create compose", "tokens": [51194, 636, 11, 370, 498, 291, 528, 281, 5940, 337, 257, 4825, 12, 39975, 837, 1716, 11, 550, 291, 393, 818, 341, 1884, 35925, 51460], "temperature": 0.0, "avg_logprob": -0.17167282104492188, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0025696002412587404}, {"id": 44, "seek": 26168, "start": 283.6, "end": 287.28000000000003, "text": " rule, and on Android it will translate to what you've seen before.", "tokens": [51460, 4978, 11, 293, 322, 8853, 309, 486, 13799, 281, 437, 291, 600, 1612, 949, 13, 51644], "temperature": 0.0, "avg_logprob": -0.17167282104492188, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0025696002412587404}, {"id": 45, "seek": 28728, "start": 288.0, "end": 293.4, "text": " Okay, with that out of the way, we can start writing URI tests. The tests themselves are", "tokens": [50400, 1033, 11, 365, 300, 484, 295, 264, 636, 11, 321, 393, 722, 3579, 624, 5577, 6921, 13, 440, 6921, 2969, 366, 50670], "temperature": 0.0, "avg_logprob": -0.19784095695426873, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.008720573037862778}, {"id": 46, "seek": 28728, "start": 293.4, "end": 298.96, "text": " just regular test functions, nothing special there. The specialty comes when we actually", "tokens": [50670, 445, 3890, 1500, 6828, 11, 1825, 2121, 456, 13, 440, 22000, 1487, 562, 321, 767, 50948], "temperature": 0.0, "avg_logprob": -0.19784095695426873, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.008720573037862778}, {"id": 47, "seek": 28728, "start": 298.96, "end": 304.84, "text": " start to write the test, because all of the calls, all of the test calls, has to be made", "tokens": [50948, 722, 281, 2464, 264, 1500, 11, 570, 439, 295, 264, 5498, 11, 439, 295, 264, 1500, 5498, 11, 575, 281, 312, 1027, 51242], "temperature": 0.0, "avg_logprob": -0.19784095695426873, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.008720573037862778}, {"id": 48, "seek": 28728, "start": 304.84, "end": 311.84, "text": " on this test rule, so we can actually scope to that, scope to, say scope to that, we apply", "tokens": [51242, 322, 341, 1500, 4978, 11, 370, 321, 393, 767, 11923, 281, 300, 11, 11923, 281, 11, 584, 11923, 281, 300, 11, 321, 3079, 51592], "temperature": 0.0, "avg_logprob": -0.19784095695426873, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.008720573037862778}, {"id": 49, "seek": 28728, "start": 311.84, "end": 316.47999999999996, "text": " because this is just regular Kotlin code, so we can do whatever we want and whatever", "tokens": [51592, 570, 341, 307, 445, 3890, 30123, 5045, 3089, 11, 370, 321, 393, 360, 2035, 321, 528, 293, 2035, 51824], "temperature": 0.0, "avg_logprob": -0.19784095695426873, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.008720573037862778}, {"id": 50, "seek": 31648, "start": 316.52000000000004, "end": 322.52000000000004, "text": " we know of, so we can just scope to this compose rules, scope to this compose rule and call", "tokens": [50366, 321, 458, 295, 11, 370, 321, 393, 445, 11923, 281, 341, 35925, 4474, 11, 11923, 281, 341, 35925, 4978, 293, 818, 50666], "temperature": 0.0, "avg_logprob": -0.22190767923990887, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0016380802262574434}, {"id": 51, "seek": 31648, "start": 322.52000000000004, "end": 329.52000000000004, "text": " anything on that. And the compose test rule has a set content method, which you could", "tokens": [50666, 1340, 322, 300, 13, 400, 264, 35925, 1500, 4978, 575, 257, 992, 2701, 3170, 11, 597, 291, 727, 51016], "temperature": 0.0, "avg_logprob": -0.22190767923990887, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0016380802262574434}, {"id": 52, "seek": 31648, "start": 330.64000000000004, "end": 336.64000000000004, "text": " have already met, as an extension on the activity or as a function of compose view, if you do", "tokens": [51072, 362, 1217, 1131, 11, 382, 364, 10320, 322, 264, 5191, 420, 382, 257, 2445, 295, 35925, 1910, 11, 498, 291, 360, 51372], "temperature": 0.0, "avg_logprob": -0.22190767923990887, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0016380802262574434}, {"id": 53, "seek": 31648, "start": 338.6, "end": 345.6, "text": " interoperability, so yeah, this is the entrance to the compose world inside our tests. And", "tokens": [51470, 728, 7192, 2310, 11, 370, 1338, 11, 341, 307, 264, 12014, 281, 264, 35925, 1002, 1854, 527, 6921, 13, 400, 51820], "temperature": 0.0, "avg_logprob": -0.22190767923990887, "compression_ratio": 1.7572815533980584, "no_speech_prob": 0.0016380802262574434}, {"id": 54, "seek": 34560, "start": 346.36, "end": 352.36, "text": " in that content, we can actually call anything, any composable at this point, but for this", "tokens": [50402, 294, 300, 2701, 11, 321, 393, 767, 818, 1340, 11, 604, 10199, 712, 412, 341, 935, 11, 457, 337, 341, 50702], "temperature": 0.0, "avg_logprob": -0.1895427703857422, "compression_ratio": 1.861344537815126, "no_speech_prob": 0.0005452826153486967}, {"id": 55, "seek": 34560, "start": 352.36, "end": 358.0, "text": " example, we'll call our applications theme, and then just call the entry list composable,", "tokens": [50702, 1365, 11, 321, 603, 818, 527, 5821, 6314, 11, 293, 550, 445, 818, 264, 8729, 1329, 10199, 712, 11, 50984], "temperature": 0.0, "avg_logprob": -0.1895427703857422, "compression_ratio": 1.861344537815126, "no_speech_prob": 0.0005452826153486967}, {"id": 56, "seek": 34560, "start": 358.0, "end": 362.32000000000005, "text": " which we've seen before, with just a fake list of entries, and if you wonder where those", "tokens": [50984, 597, 321, 600, 1612, 949, 11, 365, 445, 257, 7592, 1329, 295, 23041, 11, 293, 498, 291, 2441, 689, 729, 51200], "temperature": 0.0, "avg_logprob": -0.1895427703857422, "compression_ratio": 1.861344537815126, "no_speech_prob": 0.0005452826153486967}, {"id": 57, "seek": 34560, "start": 362.32000000000005, "end": 365.96000000000004, "text": " entries can come from, they can come from basically anywhere, we're still just writing", "tokens": [51200, 23041, 393, 808, 490, 11, 436, 393, 808, 490, 1936, 4992, 11, 321, 434, 920, 445, 3579, 51382], "temperature": 0.0, "avg_logprob": -0.1895427703857422, "compression_ratio": 1.861344537815126, "no_speech_prob": 0.0005452826153486967}, {"id": 58, "seek": 34560, "start": 365.96000000000004, "end": 370.52000000000004, "text": " Kotlin code, so these entries could be just a fake list of entries that you provide to", "tokens": [51382, 30123, 5045, 3089, 11, 370, 613, 23041, 727, 312, 445, 257, 7592, 1329, 295, 23041, 300, 291, 2893, 281, 51610], "temperature": 0.0, "avg_logprob": -0.1895427703857422, "compression_ratio": 1.861344537815126, "no_speech_prob": 0.0005452826153486967}, {"id": 59, "seek": 37052, "start": 370.59999999999997, "end": 377.59999999999997, "text": " the test suite from anywhere. Okay, so now we know how to set up our tests, but we still", "tokens": [50368, 264, 1500, 14205, 490, 4992, 13, 1033, 11, 370, 586, 321, 458, 577, 281, 992, 493, 527, 6921, 11, 457, 321, 920, 50718], "temperature": 0.0, "avg_logprob": -0.1446164379949155, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.0019393307156860828}, {"id": 60, "seek": 37052, "start": 379.28, "end": 385.2, "text": " have no grasp on that entry list composable or anything that entry list composable actually", "tokens": [50802, 362, 572, 21743, 322, 300, 8729, 1329, 10199, 712, 420, 1340, 300, 8729, 1329, 10199, 712, 767, 51098], "temperature": 0.0, "avg_logprob": -0.1446164379949155, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.0019393307156860828}, {"id": 61, "seek": 37052, "start": 385.2, "end": 391.32, "text": " emits into the composition, so let's see how we can fix that problem. Enter the Semantix", "tokens": [51098, 846, 1208, 666, 264, 12686, 11, 370, 718, 311, 536, 577, 321, 393, 3191, 300, 1154, 13, 10399, 264, 14421, 394, 970, 51404], "temperature": 0.0, "avg_logprob": -0.1446164379949155, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.0019393307156860828}, {"id": 62, "seek": 37052, "start": 391.32, "end": 398.32, "text": " tree. So the Semantix tree is actually another tree that is built in parallel with the composition,", "tokens": [51404, 4230, 13, 407, 264, 14421, 394, 970, 4230, 307, 767, 1071, 4230, 300, 307, 3094, 294, 8952, 365, 264, 12686, 11, 51754], "temperature": 0.0, "avg_logprob": -0.1446164379949155, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.0019393307156860828}, {"id": 63, "seek": 39832, "start": 399.08, "end": 406.08, "text": " consists of node that will be rendered after some processing, of course, and the composables", "tokens": [50402, 14689, 295, 9984, 300, 486, 312, 28748, 934, 512, 9007, 11, 295, 1164, 11, 293, 264, 10199, 2965, 50752], "temperature": 0.0, "avg_logprob": -0.15395621131448184, "compression_ratio": 1.8781725888324874, "no_speech_prob": 0.0016556213377043605}, {"id": 64, "seek": 39832, "start": 407.52, "end": 412.68, "text": " that we write emit nodes into the composition, but they also emit nodes into the Semantix", "tokens": [50824, 300, 321, 2464, 32084, 13891, 666, 264, 12686, 11, 457, 436, 611, 32084, 13891, 666, 264, 14421, 394, 970, 51082], "temperature": 0.0, "avg_logprob": -0.15395621131448184, "compression_ratio": 1.8781725888324874, "no_speech_prob": 0.0016556213377043605}, {"id": 65, "seek": 39832, "start": 412.68, "end": 419.28, "text": " tree, which is used by the accessibility frameworks and also the testing framework. And just as", "tokens": [51082, 4230, 11, 597, 307, 1143, 538, 264, 15002, 29834, 293, 611, 264, 4997, 8388, 13, 400, 445, 382, 51412], "temperature": 0.0, "avg_logprob": -0.15395621131448184, "compression_ratio": 1.8781725888324874, "no_speech_prob": 0.0016556213377043605}, {"id": 66, "seek": 39832, "start": 419.28, "end": 425.03999999999996, "text": " with the composition, composables that we write can, but may not contribute to the Semantix", "tokens": [51412, 365, 264, 12686, 11, 10199, 2965, 300, 321, 2464, 393, 11, 457, 815, 406, 10586, 281, 264, 14421, 394, 970, 51700], "temperature": 0.0, "avg_logprob": -0.15395621131448184, "compression_ratio": 1.8781725888324874, "no_speech_prob": 0.0016556213377043605}, {"id": 67, "seek": 42504, "start": 425.04, "end": 432.04, "text": " tree in any way, but also that behavior can be modified, and we will see how we can do", "tokens": [50364, 4230, 294, 604, 636, 11, 457, 611, 300, 5223, 393, 312, 15873, 11, 293, 321, 486, 536, 577, 321, 393, 360, 50714], "temperature": 0.0, "avg_logprob": -0.17162967481111224, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0014997231774032116}, {"id": 68, "seek": 42504, "start": 432.68, "end": 439.68, "text": " that as well. Okay, so let's simplify our example a bit. Now we just call a simple text", "tokens": [50746, 300, 382, 731, 13, 1033, 11, 370, 718, 311, 20460, 527, 1365, 257, 857, 13, 823, 321, 445, 818, 257, 2199, 2487, 51096], "temperature": 0.0, "avg_logprob": -0.17162967481111224, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0014997231774032116}, {"id": 69, "seek": 42504, "start": 439.68, "end": 445.24, "text": " composable inside the set content of our test through, and by doing that, the Semantix tree", "tokens": [51096, 10199, 712, 1854, 264, 992, 2701, 295, 527, 1500, 807, 11, 293, 538, 884, 300, 11, 264, 14421, 394, 970, 4230, 51374], "temperature": 0.0, "avg_logprob": -0.17162967481111224, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0014997231774032116}, {"id": 70, "seek": 42504, "start": 445.24, "end": 450.92, "text": " will look like that on the right. So there will always be a root node for the Semantix", "tokens": [51374, 486, 574, 411, 300, 322, 264, 558, 13, 407, 456, 486, 1009, 312, 257, 5593, 9984, 337, 264, 14421, 394, 970, 51658], "temperature": 0.0, "avg_logprob": -0.17162967481111224, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0014997231774032116}, {"id": 71, "seek": 45092, "start": 451.0, "end": 458.0, "text": " tree, and the text composable by default emits its text content into a new Semantix node,", "tokens": [50368, 4230, 11, 293, 264, 2487, 10199, 712, 538, 7576, 846, 1208, 1080, 2487, 2701, 666, 257, 777, 14421, 394, 970, 9984, 11, 50718], "temperature": 0.0, "avg_logprob": -0.20284149672958876, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.022244051098823547}, {"id": 72, "seek": 45092, "start": 459.16, "end": 466.16, "text": " which you can see as a green node. And yeah, that's it. So let's change quickly to the", "tokens": [50776, 597, 291, 393, 536, 382, 257, 3092, 9984, 13, 400, 1338, 11, 300, 311, 309, 13, 407, 718, 311, 1319, 2661, 281, 264, 51126], "temperature": 0.0, "avg_logprob": -0.20284149672958876, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.022244051098823547}, {"id": 73, "seek": 45092, "start": 466.6, "end": 472.0, "text": " canonical representation that you will see when you will be writing tests and observing", "tokens": [51148, 46491, 10290, 300, 291, 486, 536, 562, 291, 486, 312, 3579, 6921, 293, 22107, 51418], "temperature": 0.0, "avg_logprob": -0.20284149672958876, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.022244051098823547}, {"id": 74, "seek": 45092, "start": 472.0, "end": 479.0, "text": " this Semantix tree. Now is the root node, of course, and the text contributes, text attributes", "tokens": [51418, 341, 14421, 394, 970, 4230, 13, 823, 307, 264, 5593, 9984, 11, 295, 1164, 11, 293, 264, 2487, 32035, 11, 2487, 17212, 51768], "temperature": 0.0, "avg_logprob": -0.20284149672958876, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.022244051098823547}, {"id": 75, "seek": 47900, "start": 480.0, "end": 487.0, "text": " of 100 milliliters text inside that Semantix node. Okay, let's add the row, because as", "tokens": [50414, 295, 2319, 1728, 34050, 433, 2487, 1854, 300, 14421, 394, 970, 9984, 13, 1033, 11, 718, 311, 909, 264, 5386, 11, 570, 382, 50764], "temperature": 0.0, "avg_logprob": -0.1660147991377054, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.002440305659547448}, {"id": 76, "seek": 47900, "start": 488.6, "end": 493.4, "text": " you can see, we are building the items of the list. So let's add row, and yeah, that", "tokens": [50844, 291, 393, 536, 11, 321, 366, 2390, 264, 4754, 295, 264, 1329, 13, 407, 718, 311, 909, 5386, 11, 293, 1338, 11, 300, 51084], "temperature": 0.0, "avg_logprob": -0.1660147991377054, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.002440305659547448}, {"id": 77, "seek": 47900, "start": 493.4, "end": 499.4, "text": " doesn't change the Semantix tree in any way, because the row composable is actually a layout", "tokens": [51084, 1177, 380, 1319, 264, 14421, 394, 970, 4230, 294, 604, 636, 11, 570, 264, 5386, 10199, 712, 307, 767, 257, 13333, 51384], "temperature": 0.0, "avg_logprob": -0.1660147991377054, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.002440305659547448}, {"id": 78, "seek": 47900, "start": 499.4, "end": 504.88, "text": " composable, and it doesn't emit anything into the composition. And by default, it doesn't", "tokens": [51384, 10199, 712, 11, 293, 309, 1177, 380, 32084, 1340, 666, 264, 12686, 13, 400, 538, 7576, 11, 309, 1177, 380, 51658], "temperature": 0.0, "avg_logprob": -0.1660147991377054, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.002440305659547448}, {"id": 79, "seek": 50488, "start": 504.96, "end": 511.48, "text": " emit anything into the Semantix tree either. Let's add another text, and of course, that", "tokens": [50368, 32084, 1340, 666, 264, 14421, 394, 970, 4230, 2139, 13, 961, 311, 909, 1071, 2487, 11, 293, 295, 1164, 11, 300, 50694], "temperature": 0.0, "avg_logprob": -0.15055562080220974, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0008237094152718782}, {"id": 80, "seek": 50488, "start": 511.48, "end": 516.2, "text": " will create a new Semantix node, which will be a sibling of the previous one, and the", "tokens": [50694, 486, 1884, 257, 777, 14421, 394, 970, 9984, 11, 597, 486, 312, 257, 39409, 295, 264, 3894, 472, 11, 293, 264, 50930], "temperature": 0.0, "avg_logprob": -0.15055562080220974, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0008237094152718782}, {"id": 81, "seek": 50488, "start": 516.2, "end": 523.2, "text": " child of the root node in this example. Okay, so this is a really easy example, but of course,", "tokens": [50930, 1440, 295, 264, 5593, 9984, 294, 341, 1365, 13, 1033, 11, 370, 341, 307, 257, 534, 1858, 1365, 11, 457, 295, 1164, 11, 51280], "temperature": 0.0, "avg_logprob": -0.15055562080220974, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0008237094152718782}, {"id": 82, "seek": 50488, "start": 523.4, "end": 529.6, "text": " when you're writing an application, you will be facing complex screens and complex subcomposables", "tokens": [51290, 562, 291, 434, 3579, 364, 3861, 11, 291, 486, 312, 7170, 3997, 11171, 293, 3997, 1422, 21541, 329, 2965, 51600], "temperature": 0.0, "avg_logprob": -0.15055562080220974, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.0008237094152718782}, {"id": 83, "seek": 52960, "start": 529.6800000000001, "end": 536.6800000000001, "text": " and whatnot. So you will be looking at more and more complex Semantix trees as well, which", "tokens": [50368, 293, 25882, 13, 407, 291, 486, 312, 1237, 412, 544, 293, 544, 3997, 14421, 394, 970, 5852, 382, 731, 11, 597, 50718], "temperature": 0.0, "avg_logprob": -0.20505254293225475, "compression_ratio": 1.5594713656387664, "no_speech_prob": 0.003194961464032531}, {"id": 84, "seek": 52960, "start": 537.44, "end": 544.44, "text": " you have to assert on. So of course, there must be a way to visualize this. One thing", "tokens": [50756, 291, 362, 281, 19810, 322, 13, 407, 295, 1164, 11, 456, 1633, 312, 257, 636, 281, 23273, 341, 13, 1485, 551, 51106], "temperature": 0.0, "avg_logprob": -0.20505254293225475, "compression_ratio": 1.5594713656387664, "no_speech_prob": 0.003194961464032531}, {"id": 85, "seek": 52960, "start": 544.5600000000001, "end": 549.24, "text": " that we can do in our tests is call the own root finder method. We will be talking about", "tokens": [51112, 300, 321, 393, 360, 294, 527, 6921, 307, 818, 264, 1065, 5593, 915, 260, 3170, 13, 492, 486, 312, 1417, 466, 51346], "temperature": 0.0, "avg_logprob": -0.20505254293225475, "compression_ratio": 1.5594713656387664, "no_speech_prob": 0.003194961464032531}, {"id": 86, "seek": 52960, "start": 549.24, "end": 556.24, "text": " those later. And call print to log on it with a test tag, sorry, a log tag. So what this", "tokens": [51346, 729, 1780, 13, 400, 818, 4482, 281, 3565, 322, 309, 365, 257, 1500, 6162, 11, 2597, 11, 257, 3565, 6162, 13, 407, 437, 341, 51696], "temperature": 0.0, "avg_logprob": -0.20505254293225475, "compression_ratio": 1.5594713656387664, "no_speech_prob": 0.003194961464032531}, {"id": 87, "seek": 55624, "start": 557.2, "end": 562.92, "text": " will do when you run such a UI test that has this line on it, is that it will print this", "tokens": [50412, 486, 360, 562, 291, 1190, 1270, 257, 15682, 1500, 300, 575, 341, 1622, 322, 309, 11, 307, 300, 309, 486, 4482, 341, 50698], "temperature": 0.0, "avg_logprob": -0.1310536914401584, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.0005802871892228723}, {"id": 88, "seek": 55624, "start": 562.92, "end": 568.44, "text": " structured log, which you can find by the log tag, and you will see the root node here", "tokens": [50698, 18519, 3565, 11, 597, 291, 393, 915, 538, 264, 3565, 6162, 11, 293, 291, 486, 536, 264, 5593, 9984, 510, 50974], "temperature": 0.0, "avg_logprob": -0.1310536914401584, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.0005802871892228723}, {"id": 89, "seek": 55624, "start": 568.44, "end": 575.44, "text": " and all the other nodes structured inside this log entry. The other way might be a", "tokens": [50974, 293, 439, 264, 661, 13891, 18519, 1854, 341, 3565, 8729, 13, 440, 661, 636, 1062, 312, 257, 51324], "temperature": 0.0, "avg_logprob": -0.1310536914401584, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.0005802871892228723}, {"id": 90, "seek": 55624, "start": 576.16, "end": 582.4, "text": " bit easier. You can configure the layout inspector, if you have a fully composed screen, of course,", "tokens": [51360, 857, 3571, 13, 509, 393, 22162, 264, 13333, 34564, 11, 498, 291, 362, 257, 4498, 18204, 2568, 11, 295, 1164, 11, 51672], "temperature": 0.0, "avg_logprob": -0.1310536914401584, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.0005802871892228723}, {"id": 91, "seek": 58240, "start": 582.48, "end": 588.4, "text": " to highlight the nodes that are contributing into the Semantix tree and to inspect the", "tokens": [50368, 281, 5078, 264, 13891, 300, 366, 19270, 666, 264, 14421, 394, 970, 4230, 293, 281, 15018, 264, 50664], "temperature": 0.0, "avg_logprob": -0.1826533175062859, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006670487346127629}, {"id": 92, "seek": 58240, "start": 588.4, "end": 595.4, "text": " attributes of those nodes. Okay, let's get back to this easy example and let's see how", "tokens": [50664, 17212, 295, 729, 13891, 13, 1033, 11, 718, 311, 483, 646, 281, 341, 1858, 1365, 293, 718, 311, 536, 577, 51014], "temperature": 0.0, "avg_logprob": -0.1826533175062859, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006670487346127629}, {"id": 93, "seek": 58240, "start": 595.6, "end": 600.84, "text": " we can modify the behavior of how composables emit things into the Semantix tree. There", "tokens": [51024, 321, 393, 16927, 264, 5223, 295, 577, 10199, 2965, 32084, 721, 666, 264, 14421, 394, 970, 4230, 13, 821, 51286], "temperature": 0.0, "avg_logprob": -0.1826533175062859, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006670487346127629}, {"id": 94, "seek": 58240, "start": 600.84, "end": 607.84, "text": " is a modifier called Semantix because of course, there are modifiers for everything. So yeah,", "tokens": [51286, 307, 257, 38011, 1219, 14421, 394, 970, 570, 295, 1164, 11, 456, 366, 1072, 23463, 337, 1203, 13, 407, 1338, 11, 51636], "temperature": 0.0, "avg_logprob": -0.1826533175062859, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006670487346127629}, {"id": 95, "seek": 60784, "start": 608.36, "end": 614.36, "text": " the Semantix modifier by itself does nothing, as you can see on the Semantix tree representation.", "tokens": [50390, 264, 14421, 394, 970, 38011, 538, 2564, 775, 1825, 11, 382, 291, 393, 536, 322, 264, 14421, 394, 970, 4230, 10290, 13, 50690], "temperature": 0.0, "avg_logprob": -0.16203547048044728, "compression_ratio": 1.8, "no_speech_prob": 0.004000429064035416}, {"id": 96, "seek": 60784, "start": 614.36, "end": 619.72, "text": " So by default, adding the Semantix tree modifier into the modifier cascade won't do anything", "tokens": [50690, 407, 538, 7576, 11, 5127, 264, 14421, 394, 970, 4230, 38011, 666, 264, 38011, 50080, 1582, 380, 360, 1340, 50958], "temperature": 0.0, "avg_logprob": -0.16203547048044728, "compression_ratio": 1.8, "no_speech_prob": 0.004000429064035416}, {"id": 97, "seek": 60784, "start": 619.72, "end": 626.72, "text": " special. As long as we start adding some attribute values inside the Semantix modifier.", "tokens": [50958, 2121, 13, 1018, 938, 382, 321, 722, 5127, 512, 19667, 4190, 1854, 264, 14421, 394, 970, 38011, 13, 51308], "temperature": 0.0, "avg_logprob": -0.16203547048044728, "compression_ratio": 1.8, "no_speech_prob": 0.004000429064035416}, {"id": 98, "seek": 60784, "start": 627.48, "end": 633.36, "text": " So in this example, we add a content description to the row. And as you can see, this will", "tokens": [51346, 407, 294, 341, 1365, 11, 321, 909, 257, 2701, 3855, 281, 264, 5386, 13, 400, 382, 291, 393, 536, 11, 341, 486, 51640], "temperature": 0.0, "avg_logprob": -0.16203547048044728, "compression_ratio": 1.8, "no_speech_prob": 0.004000429064035416}, {"id": 99, "seek": 63336, "start": 633.4, "end": 639.04, "text": " actually modify the behavior of row. And with this row will actually contribute to the", "tokens": [50366, 767, 16927, 264, 5223, 295, 5386, 13, 400, 365, 341, 5386, 486, 767, 10586, 281, 264, 50648], "temperature": 0.0, "avg_logprob": -0.163730899107109, "compression_ratio": 1.8547008547008548, "no_speech_prob": 0.0034162397496402264}, {"id": 100, "seek": 63336, "start": 639.04, "end": 644.0, "text": " Semantix tree with the new Semantix node. That will be the parent of the two text nodes", "tokens": [50648, 14421, 394, 970, 4230, 365, 264, 777, 14421, 394, 970, 9984, 13, 663, 486, 312, 264, 2596, 295, 264, 732, 2487, 13891, 50896], "temperature": 0.0, "avg_logprob": -0.163730899107109, "compression_ratio": 1.8547008547008548, "no_speech_prob": 0.0034162397496402264}, {"id": 101, "seek": 63336, "start": 644.0, "end": 649.12, "text": " that are the children of the row, of course. And as you can see, the content description", "tokens": [50896, 300, 366, 264, 2227, 295, 264, 5386, 11, 295, 1164, 13, 400, 382, 291, 393, 536, 11, 264, 2701, 3855, 51152], "temperature": 0.0, "avg_logprob": -0.163730899107109, "compression_ratio": 1.8547008547008548, "no_speech_prob": 0.0034162397496402264}, {"id": 102, "seek": 63336, "start": 649.12, "end": 653.76, "text": " Semantix setting adds a content description attribute into that new node with the text", "tokens": [51152, 14421, 394, 970, 3287, 10860, 257, 2701, 3855, 19667, 666, 300, 777, 9984, 365, 264, 2487, 51384], "temperature": 0.0, "avg_logprob": -0.163730899107109, "compression_ratio": 1.8547008547008548, "no_speech_prob": 0.0034162397496402264}, {"id": 103, "seek": 63336, "start": 653.76, "end": 658.88, "text": " of a list item. That will be picked up by the accessibility and testing frameworks,", "tokens": [51384, 295, 257, 1329, 3174, 13, 663, 486, 312, 6183, 493, 538, 264, 15002, 293, 4997, 29834, 11, 51640], "temperature": 0.0, "avg_logprob": -0.163730899107109, "compression_ratio": 1.8547008547008548, "no_speech_prob": 0.0034162397496402264}, {"id": 104, "seek": 65888, "start": 658.92, "end": 665.2, "text": " but also we can define a test tag which will only be picked up by the testing framework", "tokens": [50366, 457, 611, 321, 393, 6964, 257, 1500, 6162, 597, 486, 787, 312, 6183, 493, 538, 264, 4997, 8388, 50680], "temperature": 0.0, "avg_logprob": -0.18679256928272736, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.002847761381417513}, {"id": 105, "seek": 65888, "start": 665.2, "end": 670.48, "text": " and not the accessibility framework. And of course, we will be able to assert on this", "tokens": [50680, 293, 406, 264, 15002, 8388, 13, 400, 295, 1164, 11, 321, 486, 312, 1075, 281, 19810, 322, 341, 50944], "temperature": 0.0, "avg_logprob": -0.18679256928272736, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.002847761381417513}, {"id": 106, "seek": 65888, "start": 670.48, "end": 677.48, "text": " as well. As you can see, the test tag attribute actually contributes with a tag attribute", "tokens": [50944, 382, 731, 13, 1018, 291, 393, 536, 11, 264, 1500, 6162, 19667, 767, 32035, 365, 257, 6162, 19667, 51294], "temperature": 0.0, "avg_logprob": -0.18679256928272736, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.002847761381417513}, {"id": 107, "seek": 65888, "start": 678.04, "end": 684.04, "text": " inside the accessibility node, and it will be a text as well.", "tokens": [51322, 1854, 264, 15002, 9984, 11, 293, 309, 486, 312, 257, 2487, 382, 731, 13, 51622], "temperature": 0.0, "avg_logprob": -0.18679256928272736, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.002847761381417513}, {"id": 108, "seek": 68404, "start": 685.0, "end": 690.5999999999999, "text": " Okay, so with this knowledge, we can already start asserting and exercising our UI's with", "tokens": [50412, 1033, 11, 370, 365, 341, 3601, 11, 321, 393, 1217, 722, 1256, 27187, 293, 27272, 527, 15682, 311, 365, 50692], "temperature": 0.0, "avg_logprob": -0.19991912444432577, "compression_ratio": 1.639269406392694, "no_speech_prob": 0.0027025924064219}, {"id": 109, "seek": 68404, "start": 690.5999999999999, "end": 697.5999999999999, "text": " the Compose UI testing framework. Let's see what APIs we can use to do so. We've already", "tokens": [50692, 264, 6620, 541, 15682, 4997, 8388, 13, 961, 311, 536, 437, 21445, 321, 393, 764, 281, 360, 370, 13, 492, 600, 1217, 51042], "temperature": 0.0, "avg_logprob": -0.19991912444432577, "compression_ratio": 1.639269406392694, "no_speech_prob": 0.0027025924064219}, {"id": 110, "seek": 68404, "start": 697.8399999999999, "end": 703.8399999999999, "text": " seen this first one, the onRoot, which selects the, so we already seen this first finder", "tokens": [51054, 1612, 341, 700, 472, 11, 264, 322, 49, 6259, 11, 597, 3048, 82, 264, 11, 370, 321, 1217, 1612, 341, 700, 915, 260, 51354], "temperature": 0.0, "avg_logprob": -0.19991912444432577, "compression_ratio": 1.639269406392694, "no_speech_prob": 0.0027025924064219}, {"id": 111, "seek": 68404, "start": 703.8399999999999, "end": 710.8399999999999, "text": " which selects the root node of the whole Semantix tree. And yeah, there are a few functions", "tokens": [51354, 597, 3048, 82, 264, 5593, 9984, 295, 264, 1379, 14421, 394, 970, 4230, 13, 400, 1338, 11, 456, 366, 257, 1326, 6828, 51704], "temperature": 0.0, "avg_logprob": -0.19991912444432577, "compression_ratio": 1.639269406392694, "no_speech_prob": 0.0027025924064219}, {"id": 112, "seek": 71084, "start": 711.84, "end": 717.32, "text": " that you can call on them, call on the root node. One you already seen, this is the print", "tokens": [50414, 300, 291, 393, 818, 322, 552, 11, 818, 322, 264, 5593, 9984, 13, 1485, 291, 1217, 1612, 11, 341, 307, 264, 4482, 50688], "temperature": 0.0, "avg_logprob": -0.24576630703238553, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016660880064591765}, {"id": 113, "seek": 71084, "start": 717.32, "end": 724.32, "text": " to log, which can be useful when you start writing your UI tests. There is another family", "tokens": [50688, 281, 3565, 11, 597, 393, 312, 4420, 562, 291, 722, 3579, 428, 15682, 6921, 13, 821, 307, 1071, 1605, 51038], "temperature": 0.0, "avg_logprob": -0.24576630703238553, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016660880064591765}, {"id": 114, "seek": 71084, "start": 724.9200000000001, "end": 731.44, "text": " of functions which is called onNodeWith, and there are a few variants on this which can", "tokens": [51068, 295, 6828, 597, 307, 1219, 322, 45, 1429, 20943, 11, 293, 456, 366, 257, 1326, 21669, 322, 341, 597, 393, 51394], "temperature": 0.0, "avg_logprob": -0.24576630703238553, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016660880064591765}, {"id": 115, "seek": 71084, "start": 731.44, "end": 737.52, "text": " find our nodes based on multiple predefined tags or multiple predefined attributes that", "tokens": [51394, 915, 527, 13891, 2361, 322, 3866, 659, 37716, 18632, 420, 3866, 659, 37716, 17212, 300, 51698], "temperature": 0.0, "avg_logprob": -0.24576630703238553, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016660880064591765}, {"id": 116, "seek": 73752, "start": 737.6, "end": 743.8, "text": " can be present in our Semantix nodes. In this example, onNodeWith tag selects the node with", "tokens": [50368, 393, 312, 1974, 294, 527, 14421, 394, 970, 13891, 13, 682, 341, 1365, 11, 322, 45, 1429, 20943, 6162, 3048, 82, 264, 9984, 365, 50678], "temperature": 0.0, "avg_logprob": -0.17942832946777343, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.002639524405822158}, {"id": 117, "seek": 73752, "start": 743.8, "end": 749.8, "text": " the tag that matches there. In the next example, it matches for a content description, and", "tokens": [50678, 264, 6162, 300, 10676, 456, 13, 682, 264, 958, 1365, 11, 309, 10676, 337, 257, 2701, 3855, 11, 293, 50978], "temperature": 0.0, "avg_logprob": -0.17942832946777343, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.002639524405822158}, {"id": 118, "seek": 73752, "start": 749.8, "end": 756.8, "text": " yeah, in the next one, it matches on the text. It can be a test tag and so on and so forth.", "tokens": [50978, 1338, 11, 294, 264, 958, 472, 11, 309, 10676, 322, 264, 2487, 13, 467, 393, 312, 257, 1500, 6162, 293, 370, 322, 293, 370, 5220, 13, 51328], "temperature": 0.0, "avg_logprob": -0.17942832946777343, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.002639524405822158}, {"id": 119, "seek": 73752, "start": 757.28, "end": 764.28, "text": " Of course, these finders try to find exactly one matching node. So if you don't have a", "tokens": [51352, 2720, 1164, 11, 613, 915, 433, 853, 281, 915, 2293, 472, 14324, 9984, 13, 407, 498, 291, 500, 380, 362, 257, 51702], "temperature": 0.0, "avg_logprob": -0.17942832946777343, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.002639524405822158}, {"id": 120, "seek": 76428, "start": 765.24, "end": 770.92, "text": " matching node, or if you have multiple nodes that would match the criteria, this will fail", "tokens": [50412, 14324, 9984, 11, 420, 498, 291, 362, 3866, 13891, 300, 576, 2995, 264, 11101, 11, 341, 486, 3061, 50696], "temperature": 0.0, "avg_logprob": -0.1640411548400193, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.002106425352394581}, {"id": 121, "seek": 76428, "start": 770.92, "end": 777.92, "text": " your UI test. There are another family of functions that you can use to find nodes they", "tokens": [50696, 428, 15682, 1500, 13, 821, 366, 1071, 1605, 295, 6828, 300, 291, 393, 764, 281, 915, 13891, 436, 51046], "temperature": 0.0, "avg_logprob": -0.1640411548400193, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.002106425352394581}, {"id": 122, "seek": 76428, "start": 778.4399999999999, "end": 785.1999999999999, "text": " are called onAllNodesWith, and they also have the same variants predefined, and these will", "tokens": [51072, 366, 1219, 322, 7868, 45, 4789, 20943, 11, 293, 436, 611, 362, 264, 912, 21669, 659, 37716, 11, 293, 613, 486, 51410], "temperature": 0.0, "avg_logprob": -0.1640411548400193, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.002106425352394581}, {"id": 123, "seek": 76428, "start": 785.1999999999999, "end": 792.1999999999999, "text": " try to match one or more of the nodes of the criteria. If they don't find any nodes, of", "tokens": [51410, 853, 281, 2995, 472, 420, 544, 295, 264, 13891, 295, 264, 11101, 13, 759, 436, 500, 380, 915, 604, 13891, 11, 295, 51760], "temperature": 0.0, "avg_logprob": -0.1640411548400193, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.002106425352394581}, {"id": 124, "seek": 79220, "start": 792.72, "end": 799.72, "text": " course, they will also fail our tests. Just as in Espresso, if you found a node in Espresso,", "tokens": [50390, 1164, 11, 436, 486, 611, 3061, 527, 6921, 13, 1449, 382, 294, 2313, 14508, 539, 11, 498, 291, 1352, 257, 9984, 294, 2313, 14508, 539, 11, 50740], "temperature": 0.0, "avg_logprob": -0.17688958268416555, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0005915802903473377}, {"id": 125, "seek": 79220, "start": 802.76, "end": 809.76, "text": " you can find a view. Here you can find the Semantix node. Just as in Espresso, you can", "tokens": [50892, 291, 393, 915, 257, 1910, 13, 1692, 291, 393, 915, 264, 14421, 394, 970, 9984, 13, 1449, 382, 294, 2313, 14508, 539, 11, 291, 393, 51242], "temperature": 0.0, "avg_logprob": -0.17688958268416555, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0005915802903473377}, {"id": 126, "seek": 79220, "start": 810.0, "end": 817.0, "text": " perform some actions on your found nodes which will translate to actions in the actual composables", "tokens": [51254, 2042, 512, 5909, 322, 428, 1352, 13891, 597, 486, 13799, 281, 5909, 294, 264, 3539, 10199, 2965, 51604], "temperature": 0.0, "avg_logprob": -0.17688958268416555, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0005915802903473377}, {"id": 127, "seek": 81700, "start": 817.0, "end": 823.16, "text": " that you are referring to by Semantix nodes. Let's see this example of a button. It's just", "tokens": [50364, 300, 291, 366, 13761, 281, 538, 14421, 394, 970, 13891, 13, 961, 311, 536, 341, 1365, 295, 257, 2960, 13, 467, 311, 445, 50672], "temperature": 0.0, "avg_logprob": -0.17012598159465384, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.002682039048522711}, {"id": 128, "seek": 81700, "start": 823.16, "end": 829.84, "text": " a simple button that has a text inside of it. You would expect that it can be clickable,", "tokens": [50672, 257, 2199, 2960, 300, 575, 257, 2487, 1854, 295, 309, 13, 509, 576, 2066, 300, 309, 393, 312, 2052, 712, 11, 51006], "temperature": 0.0, "avg_logprob": -0.17012598159465384, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.002682039048522711}, {"id": 129, "seek": 81700, "start": 829.84, "end": 836.84, "text": " and there is a perform click on the node class that the onNodeWith functions return. If you", "tokens": [51006, 293, 456, 307, 257, 2042, 2052, 322, 264, 9984, 1508, 300, 264, 322, 45, 1429, 20943, 6828, 2736, 13, 759, 291, 51356], "temperature": 0.0, "avg_logprob": -0.17012598159465384, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.002682039048522711}, {"id": 130, "seek": 81700, "start": 837.28, "end": 842.84, "text": " do this perform click, then the button will be actually clicked in our UI test. This is", "tokens": [51378, 360, 341, 2042, 2052, 11, 550, 264, 2960, 486, 312, 767, 23370, 294, 527, 15682, 1500, 13, 639, 307, 51656], "temperature": 0.0, "avg_logprob": -0.17012598159465384, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.002682039048522711}, {"id": 131, "seek": 84284, "start": 842.96, "end": 849.96, "text": " because the button, besides many, many attributes that it contributes to the Semantix tree with,", "tokens": [50370, 570, 264, 2960, 11, 11868, 867, 11, 867, 17212, 300, 309, 32035, 281, 264, 14421, 394, 970, 4230, 365, 11, 50720], "temperature": 0.0, "avg_logprob": -0.16299873151277242, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.004852167796343565}, {"id": 132, "seek": 84284, "start": 850.08, "end": 855.1600000000001, "text": " it defines an action which is called onClick, and perform click checks for this action,", "tokens": [50726, 309, 23122, 364, 3069, 597, 307, 1219, 322, 9966, 618, 11, 293, 2042, 2052, 13834, 337, 341, 3069, 11, 50980], "temperature": 0.0, "avg_logprob": -0.16299873151277242, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.004852167796343565}, {"id": 133, "seek": 84284, "start": 855.1600000000001, "end": 860.5600000000001, "text": " and if it's there on the button's Semantix node, then it deems it clickable and it will", "tokens": [50980, 293, 498, 309, 311, 456, 322, 264, 2960, 311, 14421, 394, 970, 9984, 11, 550, 309, 368, 9097, 309, 2052, 712, 293, 309, 486, 51250], "temperature": 0.0, "avg_logprob": -0.16299873151277242, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.004852167796343565}, {"id": 134, "seek": 84284, "start": 860.5600000000001, "end": 867.32, "text": " be clicked. For the rest of the APIs, because we don't have much time here, you can check", "tokens": [51250, 312, 23370, 13, 1171, 264, 1472, 295, 264, 21445, 11, 570, 321, 500, 380, 362, 709, 565, 510, 11, 291, 393, 1520, 51588], "temperature": 0.0, "avg_logprob": -0.16299873151277242, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.004852167796343565}, {"id": 135, "seek": 86732, "start": 867.32, "end": 872.32, "text": " the official compost testing cheat sheet which you can find on that link.", "tokens": [50364, 264, 4783, 20203, 4997, 17470, 8193, 597, 291, 393, 915, 322, 300, 2113, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1980433406600033, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.00555409537628293}, {"id": 136, "seek": 86732, "start": 872.32, "end": 879.32, "text": " Okay. Let's dive into the last topic for today, pretty much. It's hybrid UI testing. So what's", "tokens": [50614, 1033, 13, 961, 311, 9192, 666, 264, 1036, 4829, 337, 965, 11, 1238, 709, 13, 467, 311, 13051, 15682, 4997, 13, 407, 437, 311, 50964], "temperature": 0.0, "avg_logprob": -0.1980433406600033, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.00555409537628293}, {"id": 137, "seek": 86732, "start": 880.32, "end": 887.32, "text": " hybrid UI in this context? Hybrid UI is when you want to include composable content inside", "tokens": [51014, 13051, 15682, 294, 341, 4319, 30, 47088, 15682, 307, 562, 291, 528, 281, 4090, 10199, 712, 2701, 1854, 51364], "temperature": 0.0, "avg_logprob": -0.1980433406600033, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.00555409537628293}, {"id": 138, "seek": 86732, "start": 887.8000000000001, "end": 892.6800000000001, "text": " the view hierarchy or the other way around, you want to include your existing custom views", "tokens": [51388, 264, 1910, 22333, 420, 264, 661, 636, 926, 11, 291, 528, 281, 4090, 428, 6741, 2375, 6809, 51632], "temperature": 0.0, "avg_logprob": -0.1980433406600033, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.00555409537628293}, {"id": 139, "seek": 89268, "start": 892.68, "end": 899.68, "text": " for whatever reason inside a composition, so like a full screen made with Compose. And", "tokens": [50364, 337, 2035, 1778, 1854, 257, 12686, 11, 370, 411, 257, 1577, 2568, 1027, 365, 6620, 541, 13, 400, 50714], "temperature": 0.0, "avg_logprob": -0.22813733418782553, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.0035547271836549044}, {"id": 140, "seek": 89268, "start": 900.16, "end": 905.64, "text": " luckily, we have support for this. Espresso and the compost testing framework can work", "tokens": [50738, 22880, 11, 321, 362, 1406, 337, 341, 13, 2313, 14508, 539, 293, 264, 20203, 4997, 8388, 393, 589, 51012], "temperature": 0.0, "avg_logprob": -0.22813733418782553, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.0035547271836549044}, {"id": 141, "seek": 89268, "start": 905.64, "end": 912.64, "text": " together to test such cases. Let's see our first example here. So in this example, we", "tokens": [51012, 1214, 281, 1500, 1270, 3331, 13, 961, 311, 536, 527, 700, 1365, 510, 13, 407, 294, 341, 1365, 11, 321, 51362], "temperature": 0.0, "avg_logprob": -0.22813733418782553, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.0035547271836549044}, {"id": 142, "seek": 89268, "start": 913.88, "end": 920.88, "text": " will go with the Compose UVay, meaning that the container here, the toolbar, and the rest", "tokens": [51424, 486, 352, 365, 264, 6620, 541, 17887, 320, 11, 3620, 300, 264, 10129, 510, 11, 264, 47715, 11, 293, 264, 1472, 51774], "temperature": 0.0, "avg_logprob": -0.22813733418782553, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.0035547271836549044}, {"id": 143, "seek": 92088, "start": 921.36, "end": 928.36, "text": " of the screen, except the button, will be in XML, and we will be trying to include the", "tokens": [50388, 295, 264, 2568, 11, 3993, 264, 2960, 11, 486, 312, 294, 43484, 11, 293, 321, 486, 312, 1382, 281, 4090, 264, 50738], "temperature": 0.0, "avg_logprob": -0.2138173633151584, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.00243047415278852}, {"id": 144, "seek": 92088, "start": 928.72, "end": 935.56, "text": " button which is written in Compose. So yeah, this is the context that we will be using.", "tokens": [50756, 2960, 597, 307, 3720, 294, 6620, 541, 13, 407, 1338, 11, 341, 307, 264, 4319, 300, 321, 486, 312, 1228, 13, 51098], "temperature": 0.0, "avg_logprob": -0.2138173633151584, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.00243047415278852}, {"id": 145, "seek": 92088, "start": 935.56, "end": 940.72, "text": " There's a constraint layout with the toolbar, with its regular attributes, and there is", "tokens": [51098, 821, 311, 257, 25534, 13333, 365, 264, 47715, 11, 365, 1080, 3890, 17212, 11, 293, 456, 307, 51356], "temperature": 0.0, "avg_logprob": -0.2138173633151584, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.00243047415278852}, {"id": 146, "seek": 92088, "start": 940.72, "end": 947.72, "text": " a Compose view which will be our entry point for Compose inside our layout. Okay. Yeah,", "tokens": [51356, 257, 6620, 541, 1910, 597, 486, 312, 527, 8729, 935, 337, 6620, 541, 1854, 527, 13333, 13, 1033, 13, 865, 11, 51706], "temperature": 0.0, "avg_logprob": -0.2138173633151584, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.00243047415278852}, {"id": 147, "seek": 94772, "start": 947.72, "end": 954.72, "text": " here is the fluff that we need to set up this layout. We have an activity that uses view", "tokens": [50364, 510, 307, 264, 41533, 300, 321, 643, 281, 992, 493, 341, 13333, 13, 492, 362, 364, 5191, 300, 4960, 1910, 50714], "temperature": 0.0, "avg_logprob": -0.1769793930874076, "compression_ratio": 1.6904761904761905, "no_speech_prob": 0.0023095100186765194}, {"id": 148, "seek": 94772, "start": 955.64, "end": 962.24, "text": " binding to set up its views. And of course, with the binding, we will be setting up the", "tokens": [50760, 17359, 281, 992, 493, 1080, 6809, 13, 400, 295, 1164, 11, 365, 264, 17359, 11, 321, 486, 312, 3287, 493, 264, 51090], "temperature": 0.0, "avg_logprob": -0.1769793930874076, "compression_ratio": 1.6904761904761905, "no_speech_prob": 0.0023095100186765194}, {"id": 149, "seek": 94772, "start": 962.24, "end": 966.64, "text": " toolbar title, but the most, but the more important thing is that we set up our Compose", "tokens": [51090, 47715, 4876, 11, 457, 264, 881, 11, 457, 264, 544, 1021, 551, 307, 300, 321, 992, 493, 527, 6620, 541, 51310], "temperature": 0.0, "avg_logprob": -0.1769793930874076, "compression_ratio": 1.6904761904761905, "no_speech_prob": 0.0023095100186765194}, {"id": 150, "seek": 94772, "start": 966.64, "end": 973.64, "text": " view where we can call the setContent method that you can see here. Sorry. And yeah, there", "tokens": [51310, 1910, 689, 321, 393, 818, 264, 992, 29821, 317, 3170, 300, 291, 393, 536, 510, 13, 4919, 13, 400, 1338, 11, 456, 51660], "temperature": 0.0, "avg_logprob": -0.1769793930874076, "compression_ratio": 1.6904761904761905, "no_speech_prob": 0.0023095100186765194}, {"id": 151, "seek": 97364, "start": 974.64, "end": 979.64, "text": " is a custom button Composable which is written somewhere else. It doesn't really matter.", "tokens": [50414, 307, 257, 2375, 2960, 6620, 329, 712, 597, 307, 3720, 4079, 1646, 13, 467, 1177, 380, 534, 1871, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17878566904270904, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004191515035927296}, {"id": 152, "seek": 97364, "start": 979.64, "end": 985.64, "text": " We can set a text on it, and it won't be, we won't be clicking it, so we just set its", "tokens": [50664, 492, 393, 992, 257, 2487, 322, 309, 11, 293, 309, 1582, 380, 312, 11, 321, 1582, 380, 312, 9697, 309, 11, 370, 321, 445, 992, 1080, 50964], "temperature": 0.0, "avg_logprob": -0.17878566904270904, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004191515035927296}, {"id": 153, "seek": 97364, "start": 985.64, "end": 992.64, "text": " clickListener to nothing. All right. So how would we test this scenario? First of all,", "tokens": [50964, 2052, 35819, 260, 281, 1825, 13, 1057, 558, 13, 407, 577, 576, 321, 1500, 341, 9005, 30, 2386, 295, 439, 11, 51314], "temperature": 0.0, "avg_logprob": -0.17878566904270904, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004191515035927296}, {"id": 154, "seek": 97364, "start": 993.12, "end": 999.3199999999999, "text": " we declare our Compose test rule with starting that Compose view demo activity that we declared", "tokens": [51338, 321, 19710, 527, 6620, 541, 1500, 4978, 365, 2891, 300, 6620, 541, 1910, 10723, 5191, 300, 321, 15489, 51648], "temperature": 0.0, "avg_logprob": -0.17878566904270904, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004191515035927296}, {"id": 155, "seek": 99932, "start": 999.4000000000001, "end": 1006.32, "text": " previously, and then we scope to the Compose test rule and call our tests. First of all,", "tokens": [50368, 8046, 11, 293, 550, 321, 11923, 281, 264, 6620, 541, 1500, 4978, 293, 818, 527, 6921, 13, 2386, 295, 439, 11, 50714], "temperature": 0.0, "avg_logprob": -0.16841069134798917, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006329882889986038}, {"id": 156, "seek": 99932, "start": 1006.32, "end": 1011.88, "text": " this is just a regular espresso call. Of course, we are acting on a regular view hierarchy,", "tokens": [50714, 341, 307, 445, 257, 3890, 44140, 818, 13, 2720, 1164, 11, 321, 366, 6577, 322, 257, 3890, 1910, 22333, 11, 50992], "temperature": 0.0, "avg_logprob": -0.16841069134798917, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006329882889986038}, {"id": 157, "seek": 99932, "start": 1011.88, "end": 1018.08, "text": " so this is displayed check on the toolbar. It will work. There's nothing special there.", "tokens": [50992, 370, 341, 307, 16372, 1520, 322, 264, 47715, 13, 467, 486, 589, 13, 821, 311, 1825, 2121, 456, 13, 51302], "temperature": 0.0, "avg_logprob": -0.16841069134798917, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006329882889986038}, {"id": 158, "seek": 99932, "start": 1018.08, "end": 1023.0, "text": " But the next thing that will also work is just calling the Compose testing API on this", "tokens": [51302, 583, 264, 958, 551, 300, 486, 611, 589, 307, 445, 5141, 264, 6620, 541, 4997, 9362, 322, 341, 51548], "temperature": 0.0, "avg_logprob": -0.16841069134798917, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006329882889986038}, {"id": 159, "seek": 102300, "start": 1023.08, "end": 1029.48, "text": " same layout in this same activity, and that assertion will actually pass as well because", "tokens": [50368, 912, 13333, 294, 341, 912, 5191, 11, 293, 300, 19810, 313, 486, 767, 1320, 382, 731, 570, 50688], "temperature": 0.0, "avg_logprob": -0.17115858231467762, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.011018352583050728}, {"id": 160, "seek": 102300, "start": 1029.48, "end": 1036.48, "text": " of the interoperability between the Jetpack Compose testing APIs and espresso. Okay. That's", "tokens": [50688, 295, 264, 728, 7192, 2310, 1296, 264, 28730, 9539, 6620, 541, 4997, 21445, 293, 44140, 13, 1033, 13, 663, 311, 51038], "temperature": 0.0, "avg_logprob": -0.17115858231467762, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.011018352583050728}, {"id": 161, "seek": 102300, "start": 1037.36, "end": 1042.92, "text": " really nice. Let's see the other way around. So in this example, the whole screen you see", "tokens": [51082, 534, 1481, 13, 961, 311, 536, 264, 661, 636, 926, 13, 407, 294, 341, 1365, 11, 264, 1379, 2568, 291, 536, 51360], "temperature": 0.0, "avg_logprob": -0.17115858231467762, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.011018352583050728}, {"id": 162, "seek": 102300, "start": 1042.92, "end": 1049.92, "text": " in here except the button will be in Compose, and we'll be including this custom button", "tokens": [51360, 294, 510, 3993, 264, 2960, 486, 312, 294, 6620, 541, 11, 293, 321, 603, 312, 3009, 341, 2375, 2960, 51710], "temperature": 0.0, "avg_logprob": -0.17115858231467762, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.011018352583050728}, {"id": 163, "seek": 104992, "start": 1050.04, "end": 1057.04, "text": " here, which is written in the plain old view system. It will be a custom view. Okay. This", "tokens": [50370, 510, 11, 597, 307, 3720, 294, 264, 11121, 1331, 1910, 1185, 13, 467, 486, 312, 257, 2375, 1910, 13, 1033, 13, 639, 50720], "temperature": 0.0, "avg_logprob": -0.17654132843017578, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0022930537816137075}, {"id": 164, "seek": 104992, "start": 1058.0, "end": 1063.64, "text": " is the custom button view. Nothing special is here. The layout is inflated from a layout", "tokens": [50768, 307, 264, 2375, 2960, 1910, 13, 6693, 2121, 307, 510, 13, 440, 13333, 307, 9922, 770, 490, 257, 13333, 51050], "temperature": 0.0, "avg_logprob": -0.17654132843017578, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0022930537816137075}, {"id": 165, "seek": 104992, "start": 1063.64, "end": 1070.24, "text": " XML. There might be some fluff on it, and there is a subtext method to set the text,", "tokens": [51050, 43484, 13, 821, 1062, 312, 512, 41533, 322, 309, 11, 293, 456, 307, 257, 1422, 25111, 3170, 281, 992, 264, 2487, 11, 51380], "temperature": 0.0, "avg_logprob": -0.17654132843017578, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0022930537816137075}, {"id": 166, "seek": 104992, "start": 1070.24, "end": 1073.8000000000002, "text": " and there is an onClickListener method to set the clickListener. Of course, nothing", "tokens": [51380, 293, 456, 307, 364, 322, 9966, 618, 35819, 260, 3170, 281, 992, 264, 2052, 35819, 260, 13, 2720, 1164, 11, 1825, 51558], "temperature": 0.0, "avg_logprob": -0.17654132843017578, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0022930537816137075}, {"id": 167, "seek": 107380, "start": 1073.84, "end": 1080.84, "text": " special here. And this is a constraint layout, so this is like a deep custom button. Of course,", "tokens": [50366, 2121, 510, 13, 400, 341, 307, 257, 25534, 13333, 11, 370, 341, 307, 411, 257, 2452, 2375, 2960, 13, 2720, 1164, 11, 50716], "temperature": 0.0, "avg_logprob": -0.21979781353112424, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.005174858029931784}, {"id": 168, "seek": 107380, "start": 1080.8799999999999, "end": 1087.8799999999999, "text": " there might be better examples than this, like an external SDK's custom view that's", "tokens": [50718, 456, 1062, 312, 1101, 5110, 813, 341, 11, 411, 364, 8320, 37135, 311, 2375, 1910, 300, 311, 51068], "temperature": 0.0, "avg_logprob": -0.21979781353112424, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.005174858029931784}, {"id": 169, "seek": 107380, "start": 1088.8, "end": 1095.8, "text": " still not implemented in Compose. But for this example, we'll stick to this custom button", "tokens": [51114, 920, 406, 12270, 294, 6620, 541, 13, 583, 337, 341, 1365, 11, 321, 603, 2897, 281, 341, 2375, 2960, 51464], "temperature": 0.0, "avg_logprob": -0.21979781353112424, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.005174858029931784}, {"id": 170, "seek": 109580, "start": 1096.8, "end": 1103.8, "text": " view. Okay. And this is the Composable that we will be including that button in. It's called", "tokens": [50414, 1910, 13, 1033, 13, 400, 341, 307, 264, 6620, 329, 712, 300, 321, 486, 312, 3009, 300, 2960, 294, 13, 467, 311, 1219, 50764], "temperature": 0.0, "avg_logprob": -0.18345519474574498, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0030274202581495047}, {"id": 171, "seek": 109580, "start": 1105.12, "end": 1111.52, "text": " Android View Demo, and it has an onButtonClick parameter to lift up the action handling", "tokens": [50830, 8853, 13909, 4686, 78, 11, 293, 309, 575, 364, 322, 7835, 1756, 9966, 618, 13075, 281, 5533, 493, 264, 3069, 13175, 51150], "temperature": 0.0, "avg_logprob": -0.18345519474574498, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0030274202581495047}, {"id": 172, "seek": 109580, "start": 1111.52, "end": 1117.8, "text": " of the button. Okay. Of course, we are using a scaffold. We are adding a top up bar there", "tokens": [51150, 295, 264, 2960, 13, 1033, 13, 2720, 1164, 11, 321, 366, 1228, 257, 44094, 13, 492, 366, 5127, 257, 1192, 493, 2159, 456, 51464], "temperature": 0.0, "avg_logprob": -0.18345519474574498, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0030274202581495047}, {"id": 173, "seek": 109580, "start": 1117.8, "end": 1124.8, "text": " that's the fluff here, and there is the interoperability API for including a view inside the Compose", "tokens": [51464, 300, 311, 264, 41533, 510, 11, 293, 456, 307, 264, 728, 7192, 2310, 9362, 337, 3009, 257, 1910, 1854, 264, 6620, 541, 51814], "temperature": 0.0, "avg_logprob": -0.18345519474574498, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0030274202581495047}, {"id": 174, "seek": 112580, "start": 1125.8, "end": 1132.8, "text": " position, and that's called Android View. You can read on it in the documentation. The", "tokens": [50364, 2535, 11, 293, 300, 311, 1219, 8853, 13909, 13, 509, 393, 1401, 322, 309, 294, 264, 14333, 13, 440, 50714], "temperature": 0.0, "avg_logprob": -0.18303597768147786, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.00280302157625556}, {"id": 175, "seek": 112580, "start": 1134.2, "end": 1139.6399999999999, "text": " important part here is that there we call the constructor of the custom button view and", "tokens": [50784, 1021, 644, 510, 307, 300, 456, 321, 818, 264, 47479, 295, 264, 2375, 2960, 1910, 293, 51056], "temperature": 0.0, "avg_logprob": -0.18303597768147786, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.00280302157625556}, {"id": 176, "seek": 112580, "start": 1139.6399999999999, "end": 1146.6399999999999, "text": " set it up like you would with a regular view in code. Okay. So how do we test this scenario?", "tokens": [51056, 992, 309, 493, 411, 291, 576, 365, 257, 3890, 1910, 294, 3089, 13, 1033, 13, 407, 577, 360, 321, 1500, 341, 9005, 30, 51406], "temperature": 0.0, "avg_logprob": -0.18303597768147786, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.00280302157625556}, {"id": 177, "seek": 112580, "start": 1148.1599999999999, "end": 1152.6399999999999, "text": " We will just, sorry, we will just call the createCompose rule because we don't need an", "tokens": [51482, 492, 486, 445, 11, 2597, 11, 321, 486, 445, 818, 264, 1884, 34, 8586, 541, 4978, 570, 321, 500, 380, 643, 364, 51706], "temperature": 0.0, "avg_logprob": -0.18303597768147786, "compression_ratio": 1.5391304347826087, "no_speech_prob": 0.00280302157625556}, {"id": 178, "seek": 115264, "start": 1152.68, "end": 1159.68, "text": " exact activity to test this Composable in isolation. And then we set up our test, and", "tokens": [50366, 1900, 5191, 281, 1500, 341, 6620, 329, 712, 294, 16001, 13, 400, 550, 321, 992, 493, 527, 1500, 11, 293, 50716], "temperature": 0.0, "avg_logprob": -0.1613506487946012, "compression_ratio": 1.4719101123595506, "no_speech_prob": 0.0021001866552978754}, {"id": 179, "seek": 115264, "start": 1159.88, "end": 1166.88, "text": " we do a kind of behavioral test pattern there for our Android View Demo Composable. As you", "tokens": [50726, 321, 360, 257, 733, 295, 19124, 1500, 5102, 456, 337, 527, 8853, 13909, 4686, 78, 6620, 329, 712, 13, 1018, 291, 51076], "temperature": 0.0, "avg_logprob": -0.1613506487946012, "compression_ratio": 1.4719101123595506, "no_speech_prob": 0.0021001866552978754}, {"id": 180, "seek": 115264, "start": 1167.5200000000002, "end": 1174.5200000000002, "text": " can see, the button click handler is just setting up an external value outside. Okay.", "tokens": [51108, 393, 536, 11, 264, 2960, 2052, 41967, 307, 445, 3287, 493, 364, 8320, 2158, 2380, 13, 1033, 13, 51458], "temperature": 0.0, "avg_logprob": -0.1613506487946012, "compression_ratio": 1.4719101123595506, "no_speech_prob": 0.0021001866552978754}, {"id": 181, "seek": 117452, "start": 1174.84, "end": 1180.84, "text": " So if the button will be clicked, then we would expect that button clicked variable to be", "tokens": [50380, 407, 498, 264, 2960, 486, 312, 23370, 11, 550, 321, 576, 2066, 300, 2960, 23370, 7006, 281, 312, 50680], "temperature": 0.0, "avg_logprob": -0.28912173377143013, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.009138268418610096}, {"id": 182, "seek": 117452, "start": 1180.84, "end": 1186.96, "text": " set to true, and we will be asserting on that. So let's start testing. First things first.", "tokens": [50680, 992, 281, 2074, 11, 293, 321, 486, 312, 1256, 27187, 322, 300, 13, 407, 718, 311, 722, 4997, 13, 2386, 721, 700, 13, 50986], "temperature": 0.0, "avg_logprob": -0.28912173377143013, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.009138268418610096}, {"id": 183, "seek": 117452, "start": 1186.96, "end": 1193.96, "text": " Android View, we are testing if the toolbar in the Composable is visible, and that will", "tokens": [50986, 8853, 13909, 11, 321, 366, 4997, 498, 264, 47715, 294, 264, 6620, 329, 712, 307, 8974, 11, 293, 300, 486, 51336], "temperature": 0.0, "avg_logprob": -0.28912173377143013, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.009138268418610096}, {"id": 184, "seek": 117452, "start": 1195.84, "end": 1202.84, "text": " pass. Then we do the espresso testing for the button to check if it's visible, and then", "tokens": [51430, 1320, 13, 1396, 321, 360, 264, 44140, 4997, 337, 264, 2960, 281, 1520, 498, 309, 311, 8974, 11, 293, 550, 51780], "temperature": 0.0, "avg_logprob": -0.28912173377143013, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.009138268418610096}, {"id": 185, "seek": 120452, "start": 1204.52, "end": 1209.8, "text": " it's displayed, and that will pass as well. Again, this is the power of interoperability", "tokens": [50364, 309, 311, 16372, 11, 293, 300, 486, 1320, 382, 731, 13, 3764, 11, 341, 307, 264, 1347, 295, 728, 7192, 2310, 50628], "temperature": 0.0, "avg_logprob": -0.20435407887334409, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.005164367612451315}, {"id": 186, "seek": 120452, "start": 1209.8, "end": 1216.8, "text": " between espresso and Compos. Okay. So let's go forward and try to click that button that", "tokens": [50628, 1296, 44140, 293, 6620, 329, 13, 1033, 13, 407, 718, 311, 352, 2128, 293, 853, 281, 2052, 300, 2960, 300, 50978], "temperature": 0.0, "avg_logprob": -0.20435407887334409, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.005164367612451315}, {"id": 187, "seek": 120452, "start": 1218.36, "end": 1223.28, "text": " we have this as a view, that we have here as a view. And we would expect that that assert", "tokens": [51056, 321, 362, 341, 382, 257, 1910, 11, 300, 321, 362, 510, 382, 257, 1910, 13, 400, 321, 576, 2066, 300, 300, 19810, 51302], "temperature": 0.0, "avg_logprob": -0.20435407887334409, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.005164367612451315}, {"id": 188, "seek": 120452, "start": 1223.28, "end": 1230.28, "text": " equals on the button will be passing, but unfortunately that's not the case as of now.", "tokens": [51302, 6915, 322, 264, 2960, 486, 312, 8437, 11, 457, 7015, 300, 311, 406, 264, 1389, 382, 295, 586, 13, 51652], "temperature": 0.0, "avg_logprob": -0.20435407887334409, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.005164367612451315}, {"id": 189, "seek": 123028, "start": 1230.3999999999999, "end": 1235.6, "text": " So yeah, as of now with the latest Compos bomb and the latest Compos version, this will", "tokens": [50370, 407, 1338, 11, 382, 295, 586, 365, 264, 6792, 6620, 329, 7851, 293, 264, 6792, 6620, 329, 3037, 11, 341, 486, 50630], "temperature": 0.0, "avg_logprob": -0.15934434943242903, "compression_ratio": 1.8619246861924685, "no_speech_prob": 0.009683377109467983}, {"id": 190, "seek": 123028, "start": 1235.6, "end": 1241.0, "text": " not pass. This will not happen, actually. That perform click won't be clicking the button", "tokens": [50630, 406, 1320, 13, 639, 486, 406, 1051, 11, 767, 13, 663, 2042, 2052, 1582, 380, 312, 9697, 264, 2960, 50900], "temperature": 0.0, "avg_logprob": -0.15934434943242903, "compression_ratio": 1.8619246861924685, "no_speech_prob": 0.009683377109467983}, {"id": 191, "seek": 123028, "start": 1241.0, "end": 1247.84, "text": " because of a bug in espresso. The thing that we can do is to call perform click on the", "tokens": [50900, 570, 295, 257, 7426, 294, 44140, 13, 440, 551, 300, 321, 393, 360, 307, 281, 818, 2042, 2052, 322, 264, 51242], "temperature": 0.0, "avg_logprob": -0.15934434943242903, "compression_ratio": 1.8619246861924685, "no_speech_prob": 0.009683377109467983}, {"id": 192, "seek": 123028, "start": 1247.84, "end": 1254.48, "text": " view that's provided by us in espresso, but the problem with this is that perform click", "tokens": [51242, 1910, 300, 311, 5649, 538, 505, 294, 44140, 11, 457, 264, 1154, 365, 341, 307, 300, 2042, 2052, 51574], "temperature": 0.0, "avg_logprob": -0.15934434943242903, "compression_ratio": 1.8619246861924685, "no_speech_prob": 0.009683377109467983}, {"id": 193, "seek": 123028, "start": 1254.48, "end": 1259.68, "text": " won't be happening inside the context of espresso. So there might be timing issues, and when", "tokens": [51574, 1582, 380, 312, 2737, 1854, 264, 4319, 295, 44140, 13, 407, 456, 1062, 312, 10822, 2663, 11, 293, 562, 51834], "temperature": 0.0, "avg_logprob": -0.15934434943242903, "compression_ratio": 1.8619246861924685, "no_speech_prob": 0.009683377109467983}, {"id": 194, "seek": 125968, "start": 1259.76, "end": 1264.76, "text": " you want to run a check after doing this, that might fail because the click is not performed", "tokens": [50368, 291, 528, 281, 1190, 257, 1520, 934, 884, 341, 11, 300, 1062, 3061, 570, 264, 2052, 307, 406, 10332, 50618], "temperature": 0.0, "avg_logprob": -0.13133423063490127, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.001038433751091361}, {"id": 195, "seek": 125968, "start": 1264.76, "end": 1271.76, "text": " or the side effects of the click won't be performed in time. So with this, yeah, we", "tokens": [50618, 420, 264, 1252, 5065, 295, 264, 2052, 1582, 380, 312, 10332, 294, 565, 13, 407, 365, 341, 11, 1338, 11, 321, 50968], "temperature": 0.0, "avg_logprob": -0.13133423063490127, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.001038433751091361}, {"id": 196, "seek": 125968, "start": 1272.0, "end": 1277.28, "text": " now have a kind of flaky test, which we could circumvent by doing some more fluff around", "tokens": [50980, 586, 362, 257, 733, 295, 932, 15681, 1500, 11, 597, 321, 727, 7125, 2475, 538, 884, 512, 544, 41533, 926, 51244], "temperature": 0.0, "avg_logprob": -0.13133423063490127, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.001038433751091361}, {"id": 197, "seek": 125968, "start": 1277.28, "end": 1284.28, "text": " it with espresso, but by default this is the case now. Hopefully it will be fixed soon.", "tokens": [51244, 309, 365, 44140, 11, 457, 538, 7576, 341, 307, 264, 1389, 586, 13, 10429, 309, 486, 312, 6806, 2321, 13, 51594], "temperature": 0.0, "avg_logprob": -0.13133423063490127, "compression_ratio": 1.6045454545454545, "no_speech_prob": 0.001038433751091361}, {"id": 198, "seek": 128428, "start": 1284.72, "end": 1291.72, "text": " So we're almost done. There are more topics that you can check out on Compos testing.", "tokens": [50386, 407, 321, 434, 1920, 1096, 13, 821, 366, 544, 8378, 300, 291, 393, 1520, 484, 322, 6620, 329, 4997, 13, 50736], "temperature": 0.0, "avg_logprob": -0.1899348364935981, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.0028264764696359634}, {"id": 199, "seek": 128428, "start": 1293.16, "end": 1298.72, "text": " The best part of it is the libraries that do screenshot testing, of course, but yeah,", "tokens": [50808, 440, 1151, 644, 295, 309, 307, 264, 15148, 300, 360, 27712, 4997, 11, 295, 1164, 11, 457, 1338, 11, 51086], "temperature": 0.0, "avg_logprob": -0.1899348364935981, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.0028264764696359634}, {"id": 200, "seek": 128428, "start": 1298.72, "end": 1304.3999999999999, "text": " this topic is pretty deep, so yeah, feel free to check out these. Finally, here are some", "tokens": [51086, 341, 4829, 307, 1238, 2452, 11, 370, 1338, 11, 841, 1737, 281, 1520, 484, 613, 13, 6288, 11, 510, 366, 512, 51370], "temperature": 0.0, "avg_logprob": -0.1899348364935981, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.0028264764696359634}, {"id": 201, "seek": 128428, "start": 1304.3999999999999, "end": 1309.48, "text": " resources that I use to create this talk, and also there is a 40-minute version on my", "tokens": [51370, 3593, 300, 286, 764, 281, 1884, 341, 751, 11, 293, 611, 456, 307, 257, 3356, 12, 18256, 3037, 322, 452, 51624], "temperature": 0.0, "avg_logprob": -0.1899348364935981, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.0028264764696359634}, {"id": 202, "seek": 130948, "start": 1309.52, "end": 1315.0, "text": " website that you can watch, and multiple instances actually. So yeah, if you're interested in", "tokens": [50366, 3144, 300, 291, 393, 1159, 11, 293, 3866, 14519, 767, 13, 407, 1338, 11, 498, 291, 434, 3102, 294, 50640], "temperature": 0.0, "avg_logprob": -0.17925674159352373, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.003126542316749692}, {"id": 203, "seek": 130948, "start": 1315.0, "end": 1322.0, "text": " this topic and some more tools to use and some more examples, check out those as well.", "tokens": [50640, 341, 4829, 293, 512, 544, 3873, 281, 764, 293, 512, 544, 5110, 11, 1520, 484, 729, 382, 731, 13, 50990], "temperature": 0.0, "avg_logprob": -0.17925674159352373, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.003126542316749692}, {"id": 204, "seek": 130948, "start": 1324.08, "end": 1328.6, "text": " And yeah, finally, thank you for your attention. If you have any questions, I guess we have", "tokens": [51094, 400, 1338, 11, 2721, 11, 1309, 291, 337, 428, 3202, 13, 759, 291, 362, 604, 1651, 11, 286, 2041, 321, 362, 51320], "temperature": 0.0, "avg_logprob": -0.17925674159352373, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.003126542316749692}, {"id": 205, "seek": 130948, "start": 1328.6, "end": 1332.6, "text": " some time, and yeah, that's it. Thank you.", "tokens": [51320, 512, 565, 11, 293, 1338, 11, 300, 311, 309, 13, 1044, 291, 13, 51520], "temperature": 0.0, "avg_logprob": -0.17925674159352373, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.003126542316749692}, {"id": 206, "seek": 133260, "start": 1332.8999999999999, "end": 1336.06, "text": " Thank you.", "tokens": [50379, 1044, 291, 13, 50537], "temperature": 1.0, "avg_logprob": -1.587433554909446, "compression_ratio": 1.0, "no_speech_prob": 0.5168549418449402}, {"id": 207, "seek": 133260, "start": 1336.06, "end": 1339.06, "text": " Thank you.", "tokens": [50537, 1044, 291, 13, 50687], "temperature": 1.0, "avg_logprob": -1.587433554909446, "compression_ratio": 1.0, "no_speech_prob": 0.5168549418449402}], "language": "en"}