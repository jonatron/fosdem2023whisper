{"text": " Hello, everyone. Hello again. So we are going to resume. If you are in the back, please come in. We have seats in the front. And please make sure to make yourself comfortable for this next talk, where I have the pleasure to introduce Russell. So Russell is coming all the way from the USA to be with us today. He works at Touch Labs, knows everything about Kotlin multi-platform. And today he will tell us about from Hello World to the real world. Yeah, thanks a lot. Yeah, I'm here from Boston, where it's actually like negative 24 degrees Celsius today. So I'm all right with the rain. And yeah, my name is Russell Wolf. I'm a Google developer expert for Kotlin. And I work at Touch Lab, where we do all Kotlin multi-platform all the time. So I'm going to talk a little bit about taking a Kotlin multi-platform from like the basic kind of Hello World example that you might start out with to the sorts of things that you might need for a production hyalab. And I've been part of work at Touch Lab. I've been doing Kotlin multi-platform things since pretty much day one. In a couple weeks, it's going to be five years since I wrote my first Kotlin multi-platform code, which is kind of cool. I don't know. It hopefully means I know something about what I'm talking about, but you can let me know. So let's get started. So quick introduction to Kotlin multi-platform. And I'm kind of breaking up my talk, breaking up the talk by the sections of the title. So started with Kotlin multi-platform. So Kotlin grew up initially as a JVM language, but it also has backends on JavaScript and native. And all of these are actually kind of families of platforms where JVM includes Android, native includes all sorts of different targets. And Kotlin multi-platform adds not just the targets themselves, but the ability to share code between them. So you have platform code that runs on a particular target, and then you have common code that runs on all of them, or runs on combinations of them. And what this enables is a really nice kind of flexible interop where you can share the post of your code that makes sense to share, but you have the ability to drop into platform specific code for things that you don't want to share. And it lets you treat your shared code as basically just another library. So you can be writing what would like an otherwise fully native app and share just a piece of it. Say a couple words on KMP versus KMM. So KMP is Kotlin multi-platform is the kind of whole universe of all the different things that call it in the target. KMM is Kotlin multi-platform mobile, which is the mobile part of that story, which is the first piece that JetBrains is stabilizing. So that's the thing that they announced is in beta. There's not really a hard technical line between them, because KMM in the end is just like parts of KMP. It's just kind of working on the same technology stack. But in terms of what they're focused on for the developer experience, KMM is kind of the piece that's coming first. And yeah, as I mentioned before, it's recently moved into beta. It's planned to go stable this year. So it's a really good time to get into it, start using it, if you haven't yet. And what beta means to JetBrains can be a little bit different than you might be used to from other projects. They're very slow about designated things as stable. They want to be absolutely sure of every little detail. But even by calling it beta, they're very strongly committed to keeping things working. They're just saying there might be some breaking changes in the future. And to kind of break down how call-on-mobile platform code works, I like to use this kind of Venn diagram and focus on the mobile use case. So we're talking about Android and iOS. So if you're an Android developer, you're used to kind of this type of diagram. You have access to kind of all the Kotlin APIs you're used to. You have access to JVM and Android APIs. And there's a subset of that, just the kind of pure Kotlin stuff, that in principle you can run on any platform. Which then means you can take that over to the iOS side, also add some iOS platform specific code. And then, so you have kind of your shared bits and your platform bits. And the KMP tool chain brings all of that together. So that essentially each of these different colors on the diagram are just a different source directory. And the tool chain knows how to kind of put the right parts together so that you get the right code for your platform. And again, there's more to KMP than just KMM, but the 8-way Venn diagram of everything is a lot more complicated to draw. So what does it look like when you're writing your first Hello Worlds in Kotlin Multiclapform? And one way to get that is to start with the Kotlin Multiclapform mobile plugin for Android Studio. So you can do a lot of the stuff. I tend to use IntelliJ IDEA more than Android Studio when I'm doing my KMP development. But the new project template in Android Studio is a little bit easier to get started with. They have these Kotlin Multiclapform application, or Kotlin Multiclapform library. And what they give you is some code that looks kind of like this. And don't worry about kind of every little detail of it. But this is kind of like the Hello World template that it generates for you. So there's a platform interface in the common code. The common code is in the center here. The Android is on the left. The iOS is on the right. So there's a platform interface that's implemented on each platform as Android platform and iOS platform. There's a expect function. So expect an actual or two keywords that Kotlin Multiclapform adds to the language that essentially let you declare something in your common code, but implement it in your platform code. Essentially kind of like a header. Actually, they use the header keyword for it before Kotlin Multiclapform was released in 2017, 2018-ish. So there's an expect function that you kind of get a default platform that has actual implementations on each platform. And then there's a greeting class that just kind of brings it all together and prints the name of the platform that you're on. And this gives you a little playground to start messing around with Kotlin Multiclapform code. And I actually really like there's, I like the way that they use expect actual in here. It's very easy when you have this new tool starting out with Kotlin Multiclapform to kind of overuse it. I mean, you start making all these expect classes and things like that. I tend to find it's really nice to also use, like, hold on to interfaces as well. So when you define an interface platform rather than an expect class platform, you can substitute other implementations a lot more easily. And so this is kind of like a rough sense of the code structure that you get from this template. So the code that I showed you is kind of this bottom three boxes. So there's common code in the middle, the orange, there's Android sources in that that you then compile to an Android library. There's iOS sources that you then compile to a iOS framework file. And then if you use one of the application templates, it'll look at the app layer that consumes that. There's multiple ways that you can configure the iOS app to consume it. So you can, which essentially there's different dependency managers that you can use in iOS. There's a default that's just kind of manually include the framework. You kind of add a custom build step into Xcode that will call into Kotlin and do that. There's also a plug-in that's part of the Kotlin tool chain that uses Cocopods. So Cocopods is kind of, has historically been a commonly used dependency manager on iOS. It's these days starting to be replaced by Swift package manager, but the Kotlin tool chain doesn't have as good of integration into SPM yet. And then I'll also just call out, we at TouchLab have a sample called CampKit that can also be a nice kind of place to start out if you're playing this stuff for the first time. It's a somewhat more complicated sample than that Hello World. It has a bit more kind of architecture to it and shows kind of some of our standard architecture and library practices. And also has a bunch of documentation kind of explaining why we make some of the choices that we do. So check that out also if you're interested. So what are kind of some common themes around these sorts of starter projects? And there's a lot more than just those two, I should say also. There's lots of people that have kind of put together interesting multiple from samples that you can use when you're first learning. And something that comes up often in a lot of them is they tend to aim at maximizing shared code, which like in an ideal world is really nice. In the real world, oftentimes you're starting from two separate native apps and you want to incrementally move towards more shared. And you don't always get a good sense of what that looks like from any of the standard samples. Things also tend to be mono repos when you're looking at starter samples. So what if I already have existing apps? They live in different places, but I want to start sharing code between them. What does that look like? A big piece of a lot of them is there will be some step in your build process where in your build process in iOS where Xcode has to manually call into Gradle to build your Kotlin. But if you're on a larger team, you might not want to have to do that every time. Your iOS team might not even have a JDK set up if they're not used to using that. So what do you do in that case? And they also tend to be single module when you're looking at sample projects. But what happens when things get bigger? So that brings us to what does it look like when you take all of these sorts of things and start scaling it up to real-world projects? And I'm going to talk about some of the ways that we tend to think about this at touch lab as well as some tools and things that we've put out into the community to help out with some of these things. And the first thing I want to talk about is team structure. This is something we've been talking about a lot internally at touch lab recently and kind of building out this sort of taxonomy of different ways that different teams approach the way that they handle their shared code. And a common core piece of that is being thoughtful about the ways that the structure of your team impacts the way that you want to organize your code. Because lots of teams are very different. So the distinction I'll highlight here and it kind of works across a couple of different dimensions. I tend to think of it as kind of small teams versus large teams. But it's also sometimes teams that work kind of as one unit versus teams that work as multiple units. And a key piece of that is often is the group that is writing the shared code the same group as the people who are consuming the shared code. So when you're a smaller team or if you're one unit you tend to have kind of fewer worries about who's owning what parts of the code. You're more kind of unified in what your developer setup looks like. And you're more likely to be in a situation where you're kind of sharing a higher percentage of things and just kind of wrapping a thing UI around it. And you're more likely to be doing all of your feature development kind of at once for both platforms. On the other hand, when teams get larger, things get a little bit messier. You're more likely to have iOS specialists who don't want to kind of deal with the Kotlin directly. And your Kotlin code, you're more likely to have a larger iOS app than just what the Kotlin is. And so you might, like your Kotlin is just kind of one more thing in a sea of other native libraries that your iOS app is using. And you tend to want to minimize the impact of your Kotlin on the rest of the iOS code. And what the topic means in practice is you want to kind of rather than linking your XO build to your Kotlin directly, you want to kind of publish it as an external library. And so the diagram that's why I showed you that kind of diagram on the left earlier, the way it can look like in a larger team is rather than directly consuming things, your shared code is being published to some sort of artifact repository, and then your apps are pulling that artifact down. And there's kind of more of a two-step process to making updates, but it lets you kind of work in separate streams more easily. And we put out a tool to help with this in the fall. We touch lab. It's called KMM bridge, and it's a Gradle plugin that can essentially manage the publishing of your iOS framework in a couple different ways. So it gives you a Gradle task to publish a new version when you've made changes. It has options around how you implement that version and things like that, options for where you want to host that binary and the ability to plug in your own. And then some helpers, if you're using a package manager for making that local development flow a little bit easier. So sometimes you want to be able to toggle between using the binary that you pulled down versus building it directly when you're trying to write new code or debug it. So we have some helpers to make that flow a little bit easier. There's a bunch of little things that are still kind of a work in progress on here. If you're a team that's interested in using it, we'd love to talk to you and get some feedback. So feel free to find me and let me know if you want to learn more about that. Another problem that comes up at scale is modularization. So when you write a hello world, it tends to be one module. But when you're writing bigger things, you might want to have more than one. And Kotlin native, it turns out, makes us a little bit complicated. So when you have multiple Kotlin native modules and you export them to iOS, they're essentially their own kind of separate worlds. And so each of these modules has its own copy of any internal dependencies, their own copy of the standard library, their own copy of any third module that you might have underneath them that you're trying to share between them. And they can't kind of talk between each other very easily. And this can be okay if they're doing very distinct things. So maybe one of them is making analyst calls and one of them is running your database and they don't really need to interact with each other. And then having them separate can be okay. But often you end up wanting to kind of write this umbrella module on top of them so that in your Kotlin layer, you can have them talk to each other more easily. And then you have sort of a shared module on top that you export as your iOS framework. And that lets you more easily have that more typical kind of modular structure while working with the Kotlin native limitations. There's still some messiness to this because your umbrella framework will have, you and I have kind of namespace clashes where all of your declarations in here are essentially in one giant global namespace. And there's romantic that will improve this. But right now it can be a little messy when you have a lot of code in there. Another thing that comes up in real-world projects is your binary size. So hello world tends to be small, real apps tend to be larger. And real apps have consequences when things are too large. Where things like the app store will throttle your downloading or force you to do it on Wi-Fi rather than on mobile if your app gets too big. And this can be a significant impact to the amount of downloads that you get. And it turns out one of the biggest contributors to this is the Object2C interface that Kotlin native uses to export your code to iOS. And the kind of trick to use here is you want to limit the amount of public decorations that you have in your Kotlin code. And that will shrink that Object2C interface because it only needs to be generated for public decorations. And that hitter from Object2C annotation that Marco mentioned earlier can also be a way to do that. Or there's kind of different monitoring structures you can sometimes use. So I'll mention quickly a couple other tools that Tesla puts out that can be helpful when you're running loads of apps. So by default, the crash reporting that you get out of Kotlin native doesn't kind of export to Swift very well. So we have this tool called Crash Kios that will essentially symbolicate your stack traces better. We have some updates to that in-flight that will kind of clean up different pieces of that story, but I'm not going to go into detail there because I'm getting kind of low on time. And we also have a Xcode debugger that lets you debug your Kotlin code from Xcode, which can be a nicer environment for your iOS developers when you're kind of introducing that. That recently to be a CLI-based interface, which makes it much easier to update and install. So if you've tried it out in the past, feel free to give it another look. One of the things I want to talk about is kind of the shape of your API service. So Hello World apps tend to be small, but as your app gets bigger, you start to care more and more about what, sort of, how idiomatic is your API? And Swift and Kotlin tend to want to eat different things with that. So I just want to point out, like, don't be afraid to kind of need a bit of translation layer between your shared code and your platform code. And we have some tooling that we're working on to make some of that easier, but it's not in the open yet, so I'm not going to go into detail there. I'll skip the example because I'm running out of time. But kind of the overall lesson that I want to highlight is different teams and have different structures and want slightly different things. Kotlin is all about adaptability. And so if you're a team that wants to share a lot of code, you can do that. If you're a team that wants to minimize the impact of the Kotlin on the rest of your domain team, you can do that. And you have the flexibility to kind of choose the way that you want to approach all of that. So thanks. I think I'm probably out of time for questions, but I'm definitely happy to answer stuff in person. Feel free to tap me on the shoulder, find me whatever later today. If I'm sharing out my laptop, it's not important because it's Saturday, so I might love to chat. Thanks.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.120000000000001, "text": " Hello, everyone. Hello again. So we are going to resume. If you are in the back, please come", "tokens": [2425, 11, 1518, 13, 2425, 797, 13, 407, 321, 366, 516, 281, 15358, 13, 759, 291, 366, 294, 264, 646, 11, 1767, 808], "temperature": 0.0, "avg_logprob": -0.2380981659621335, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.3383878469467163}, {"id": 1, "seek": 0, "start": 10.120000000000001, "end": 16.28, "text": " in. We have seats in the front. And please make sure to make yourself comfortable for", "tokens": [294, 13, 492, 362, 11069, 294, 264, 1868, 13, 400, 1767, 652, 988, 281, 652, 1803, 4619, 337], "temperature": 0.0, "avg_logprob": -0.2380981659621335, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.3383878469467163}, {"id": 2, "seek": 0, "start": 16.28, "end": 21.2, "text": " this next talk, where I have the pleasure to introduce Russell. So Russell is coming", "tokens": [341, 958, 751, 11, 689, 286, 362, 264, 6834, 281, 5366, 20937, 13, 407, 20937, 307, 1348], "temperature": 0.0, "avg_logprob": -0.2380981659621335, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.3383878469467163}, {"id": 3, "seek": 0, "start": 21.2, "end": 26.04, "text": " all the way from the USA to be with us today. He works at Touch Labs, knows everything about", "tokens": [439, 264, 636, 490, 264, 10827, 281, 312, 365, 505, 965, 13, 634, 1985, 412, 20029, 40047, 11, 3255, 1203, 466], "temperature": 0.0, "avg_logprob": -0.2380981659621335, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.3383878469467163}, {"id": 4, "seek": 2604, "start": 26.04, "end": 30.68, "text": " Kotlin multi-platform. And today he will tell us about from Hello World to the real world.", "tokens": [30123, 5045, 4825, 12, 39975, 837, 13, 400, 965, 415, 486, 980, 505, 466, 490, 2425, 3937, 281, 264, 957, 1002, 13], "temperature": 0.0, "avg_logprob": -0.21271403784890777, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00018316757632419467}, {"id": 5, "seek": 2604, "start": 30.68, "end": 40.2, "text": " Yeah, thanks a lot. Yeah, I'm here from Boston, where it's actually like negative 24 degrees", "tokens": [865, 11, 3231, 257, 688, 13, 865, 11, 286, 478, 510, 490, 12333, 11, 689, 309, 311, 767, 411, 3671, 4022, 5310], "temperature": 0.0, "avg_logprob": -0.21271403784890777, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00018316757632419467}, {"id": 6, "seek": 2604, "start": 40.2, "end": 48.599999999999994, "text": " Celsius today. So I'm all right with the rain. And yeah, my name is Russell Wolf. I'm a Google", "tokens": [22658, 965, 13, 407, 286, 478, 439, 558, 365, 264, 4830, 13, 400, 1338, 11, 452, 1315, 307, 20937, 16634, 13, 286, 478, 257, 3329], "temperature": 0.0, "avg_logprob": -0.21271403784890777, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00018316757632419467}, {"id": 7, "seek": 2604, "start": 48.599999999999994, "end": 54.8, "text": " developer expert for Kotlin. And I work at Touch Lab, where we do all Kotlin multi-platform all", "tokens": [10754, 5844, 337, 30123, 5045, 13, 400, 286, 589, 412, 20029, 10137, 11, 689, 321, 360, 439, 30123, 5045, 4825, 12, 39975, 837, 439], "temperature": 0.0, "avg_logprob": -0.21271403784890777, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00018316757632419467}, {"id": 8, "seek": 5480, "start": 54.8, "end": 62.0, "text": " the time. So I'm going to talk a little bit about taking a Kotlin multi-platform from like the", "tokens": [264, 565, 13, 407, 286, 478, 516, 281, 751, 257, 707, 857, 466, 1940, 257, 30123, 5045, 4825, 12, 39975, 837, 490, 411, 264], "temperature": 0.0, "avg_logprob": -0.17868037556493005, "compression_ratio": 1.7472527472527473, "no_speech_prob": 5.0452366849640384e-05}, {"id": 9, "seek": 5480, "start": 62.0, "end": 65.96, "text": " basic kind of Hello World example that you might start out with to the sorts of things that you", "tokens": [3875, 733, 295, 2425, 3937, 1365, 300, 291, 1062, 722, 484, 365, 281, 264, 7527, 295, 721, 300, 291], "temperature": 0.0, "avg_logprob": -0.17868037556493005, "compression_ratio": 1.7472527472527473, "no_speech_prob": 5.0452366849640384e-05}, {"id": 10, "seek": 5480, "start": 65.96, "end": 74.6, "text": " might need for a production hyalab. And I've been part of work at Touch Lab. I've been doing", "tokens": [1062, 643, 337, 257, 4265, 2477, 304, 455, 13, 400, 286, 600, 668, 644, 295, 589, 412, 20029, 10137, 13, 286, 600, 668, 884], "temperature": 0.0, "avg_logprob": -0.17868037556493005, "compression_ratio": 1.7472527472527473, "no_speech_prob": 5.0452366849640384e-05}, {"id": 11, "seek": 5480, "start": 74.6, "end": 79.32, "text": " Kotlin multi-platform things since pretty much day one. In a couple weeks, it's going to be five", "tokens": [30123, 5045, 4825, 12, 39975, 837, 721, 1670, 1238, 709, 786, 472, 13, 682, 257, 1916, 3259, 11, 309, 311, 516, 281, 312, 1732], "temperature": 0.0, "avg_logprob": -0.17868037556493005, "compression_ratio": 1.7472527472527473, "no_speech_prob": 5.0452366849640384e-05}, {"id": 12, "seek": 5480, "start": 79.32, "end": 84.52, "text": " years since I wrote my first Kotlin multi-platform code, which is kind of cool. I don't know. It", "tokens": [924, 1670, 286, 4114, 452, 700, 30123, 5045, 4825, 12, 39975, 837, 3089, 11, 597, 307, 733, 295, 1627, 13, 286, 500, 380, 458, 13, 467], "temperature": 0.0, "avg_logprob": -0.17868037556493005, "compression_ratio": 1.7472527472527473, "no_speech_prob": 5.0452366849640384e-05}, {"id": 13, "seek": 8452, "start": 84.52, "end": 87.28, "text": " hopefully means I know something about what I'm talking about, but you can let me know.", "tokens": [4696, 1355, 286, 458, 746, 466, 437, 286, 478, 1417, 466, 11, 457, 291, 393, 718, 385, 458, 13], "temperature": 0.0, "avg_logprob": -0.12494060516357422, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.6558560421108268e-05}, {"id": 14, "seek": 8452, "start": 87.28, "end": 100.52, "text": " So let's get started. So quick introduction to Kotlin multi-platform. And I'm kind of breaking", "tokens": [407, 718, 311, 483, 1409, 13, 407, 1702, 9339, 281, 30123, 5045, 4825, 12, 39975, 837, 13, 400, 286, 478, 733, 295, 7697], "temperature": 0.0, "avg_logprob": -0.12494060516357422, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.6558560421108268e-05}, {"id": 15, "seek": 8452, "start": 100.52, "end": 107.56, "text": " up my talk, breaking up the talk by the sections of the title. So started with Kotlin multi-platform.", "tokens": [493, 452, 751, 11, 7697, 493, 264, 751, 538, 264, 10863, 295, 264, 4876, 13, 407, 1409, 365, 30123, 5045, 4825, 12, 39975, 837, 13], "temperature": 0.0, "avg_logprob": -0.12494060516357422, "compression_ratio": 1.6511627906976745, "no_speech_prob": 2.6558560421108268e-05}, {"id": 16, "seek": 10756, "start": 107.56, "end": 119.88, "text": " So Kotlin grew up initially as a JVM language, but it also has backends on JavaScript and", "tokens": [407, 30123, 5045, 6109, 493, 9105, 382, 257, 508, 53, 44, 2856, 11, 457, 309, 611, 575, 646, 2581, 322, 15778, 293], "temperature": 0.0, "avg_logprob": -0.13923578676970108, "compression_ratio": 1.489247311827957, "no_speech_prob": 3.2543419365538284e-05}, {"id": 17, "seek": 10756, "start": 119.88, "end": 126.4, "text": " native. And all of these are actually kind of families of platforms where JVM includes Android,", "tokens": [8470, 13, 400, 439, 295, 613, 366, 767, 733, 295, 4466, 295, 9473, 689, 508, 53, 44, 5974, 8853, 11], "temperature": 0.0, "avg_logprob": -0.13923578676970108, "compression_ratio": 1.489247311827957, "no_speech_prob": 3.2543419365538284e-05}, {"id": 18, "seek": 10756, "start": 126.4, "end": 134.32, "text": " native includes all sorts of different targets. And Kotlin multi-platform adds not just the", "tokens": [8470, 5974, 439, 7527, 295, 819, 12911, 13, 400, 30123, 5045, 4825, 12, 39975, 837, 10860, 406, 445, 264], "temperature": 0.0, "avg_logprob": -0.13923578676970108, "compression_ratio": 1.489247311827957, "no_speech_prob": 3.2543419365538284e-05}, {"id": 19, "seek": 13432, "start": 134.32, "end": 140.35999999999999, "text": " targets themselves, but the ability to share code between them. So you have platform code", "tokens": [12911, 2969, 11, 457, 264, 3485, 281, 2073, 3089, 1296, 552, 13, 407, 291, 362, 3663, 3089], "temperature": 0.0, "avg_logprob": -0.10596058918879582, "compression_ratio": 1.6235294117647059, "no_speech_prob": 3.3082105801440775e-05}, {"id": 20, "seek": 13432, "start": 140.35999999999999, "end": 148.6, "text": " that runs on a particular target, and then you have common code that runs on all of them,", "tokens": [300, 6676, 322, 257, 1729, 3779, 11, 293, 550, 291, 362, 2689, 3089, 300, 6676, 322, 439, 295, 552, 11], "temperature": 0.0, "avg_logprob": -0.10596058918879582, "compression_ratio": 1.6235294117647059, "no_speech_prob": 3.3082105801440775e-05}, {"id": 21, "seek": 13432, "start": 148.6, "end": 157.32, "text": " or runs on combinations of them. And what this enables is a really nice kind of flexible interop", "tokens": [420, 6676, 322, 21267, 295, 552, 13, 400, 437, 341, 17077, 307, 257, 534, 1481, 733, 295, 11358, 728, 404], "temperature": 0.0, "avg_logprob": -0.10596058918879582, "compression_ratio": 1.6235294117647059, "no_speech_prob": 3.3082105801440775e-05}, {"id": 22, "seek": 15732, "start": 157.32, "end": 165.0, "text": " where you can share the post of your code that makes sense to share, but you have the ability", "tokens": [689, 291, 393, 2073, 264, 2183, 295, 428, 3089, 300, 1669, 2020, 281, 2073, 11, 457, 291, 362, 264, 3485], "temperature": 0.0, "avg_logprob": -0.2134247713310774, "compression_ratio": 1.6621004566210045, "no_speech_prob": 1.6153398973983712e-05}, {"id": 23, "seek": 15732, "start": 165.0, "end": 169.79999999999998, "text": " to drop into platform specific code for things that you don't want to share. And it lets you", "tokens": [281, 3270, 666, 3663, 2685, 3089, 337, 721, 300, 291, 500, 380, 528, 281, 2073, 13, 400, 309, 6653, 291], "temperature": 0.0, "avg_logprob": -0.2134247713310774, "compression_ratio": 1.6621004566210045, "no_speech_prob": 1.6153398973983712e-05}, {"id": 24, "seek": 15732, "start": 169.79999999999998, "end": 176.04, "text": " treat your shared code as basically just another library. So you can be writing what would", "tokens": [2387, 428, 5507, 3089, 382, 1936, 445, 1071, 6405, 13, 407, 291, 393, 312, 3579, 437, 576], "temperature": 0.0, "avg_logprob": -0.2134247713310774, "compression_ratio": 1.6621004566210045, "no_speech_prob": 1.6153398973983712e-05}, {"id": 25, "seek": 15732, "start": 176.04, "end": 186.4, "text": " like an otherwise fully native app and share just a piece of it. Say a couple words on", "tokens": [411, 364, 5911, 4498, 8470, 724, 293, 2073, 445, 257, 2522, 295, 309, 13, 6463, 257, 1916, 2283, 322], "temperature": 0.0, "avg_logprob": -0.2134247713310774, "compression_ratio": 1.6621004566210045, "no_speech_prob": 1.6153398973983712e-05}, {"id": 26, "seek": 18640, "start": 186.4, "end": 192.72, "text": " KMP versus KMM. So KMP is Kotlin multi-platform is the kind of whole universe of all the different", "tokens": [591, 12224, 5717, 591, 17365, 13, 407, 591, 12224, 307, 30123, 5045, 4825, 12, 39975, 837, 307, 264, 733, 295, 1379, 6445, 295, 439, 264, 819], "temperature": 0.0, "avg_logprob": -0.12112787246704101, "compression_ratio": 1.6877828054298643, "no_speech_prob": 4.2448900785529986e-05}, {"id": 27, "seek": 18640, "start": 192.72, "end": 199.76, "text": " things that call it in the target. KMM is Kotlin multi-platform mobile, which is the mobile part", "tokens": [721, 300, 818, 309, 294, 264, 3779, 13, 591, 17365, 307, 30123, 5045, 4825, 12, 39975, 837, 6013, 11, 597, 307, 264, 6013, 644], "temperature": 0.0, "avg_logprob": -0.12112787246704101, "compression_ratio": 1.6877828054298643, "no_speech_prob": 4.2448900785529986e-05}, {"id": 28, "seek": 18640, "start": 199.76, "end": 205.92000000000002, "text": " of that story, which is the first piece that JetBrains is stabilizing. So that's the thing", "tokens": [295, 300, 1657, 11, 597, 307, 264, 700, 2522, 300, 28730, 45606, 1292, 307, 11652, 3319, 13, 407, 300, 311, 264, 551], "temperature": 0.0, "avg_logprob": -0.12112787246704101, "compression_ratio": 1.6877828054298643, "no_speech_prob": 4.2448900785529986e-05}, {"id": 29, "seek": 18640, "start": 205.92000000000002, "end": 211.12, "text": " that they announced is in beta. There's not really a hard technical line between them,", "tokens": [300, 436, 7548, 307, 294, 9861, 13, 821, 311, 406, 534, 257, 1152, 6191, 1622, 1296, 552, 11], "temperature": 0.0, "avg_logprob": -0.12112787246704101, "compression_ratio": 1.6877828054298643, "no_speech_prob": 4.2448900785529986e-05}, {"id": 30, "seek": 21112, "start": 211.12, "end": 217.96, "text": " because KMM in the end is just like parts of KMP. It's just kind of working on the same technology", "tokens": [570, 591, 17365, 294, 264, 917, 307, 445, 411, 3166, 295, 591, 12224, 13, 467, 311, 445, 733, 295, 1364, 322, 264, 912, 2899], "temperature": 0.0, "avg_logprob": -0.17455520629882812, "compression_ratio": 1.4766839378238341, "no_speech_prob": 4.167350198258646e-05}, {"id": 31, "seek": 21112, "start": 217.96, "end": 225.68, "text": " stack. But in terms of what they're focused on for the developer experience, KMM is kind of", "tokens": [8630, 13, 583, 294, 2115, 295, 437, 436, 434, 5178, 322, 337, 264, 10754, 1752, 11, 591, 17365, 307, 733, 295], "temperature": 0.0, "avg_logprob": -0.17455520629882812, "compression_ratio": 1.4766839378238341, "no_speech_prob": 4.167350198258646e-05}, {"id": 32, "seek": 21112, "start": 225.68, "end": 232.8, "text": " the piece that's coming first. And yeah, as I mentioned before, it's recently moved into beta.", "tokens": [264, 2522, 300, 311, 1348, 700, 13, 400, 1338, 11, 382, 286, 2835, 949, 11, 309, 311, 3938, 4259, 666, 9861, 13], "temperature": 0.0, "avg_logprob": -0.17455520629882812, "compression_ratio": 1.4766839378238341, "no_speech_prob": 4.167350198258646e-05}, {"id": 33, "seek": 23280, "start": 232.8, "end": 241.72, "text": " It's planned to go stable this year. So it's a really good time to get into it, start using it,", "tokens": [467, 311, 8589, 281, 352, 8351, 341, 1064, 13, 407, 309, 311, 257, 534, 665, 565, 281, 483, 666, 309, 11, 722, 1228, 309, 11], "temperature": 0.0, "avg_logprob": -0.1166405011248845, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1286067092441954e-05}, {"id": 34, "seek": 23280, "start": 241.72, "end": 250.64000000000001, "text": " if you haven't yet. And what beta means to JetBrains can be a little bit different than you", "tokens": [498, 291, 2378, 380, 1939, 13, 400, 437, 9861, 1355, 281, 28730, 45606, 1292, 393, 312, 257, 707, 857, 819, 813, 291], "temperature": 0.0, "avg_logprob": -0.1166405011248845, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1286067092441954e-05}, {"id": 35, "seek": 23280, "start": 250.64000000000001, "end": 256.8, "text": " might be used to from other projects. They're very slow about designated things as stable.", "tokens": [1062, 312, 1143, 281, 490, 661, 4455, 13, 814, 434, 588, 2964, 466, 21688, 721, 382, 8351, 13], "temperature": 0.0, "avg_logprob": -0.1166405011248845, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1286067092441954e-05}, {"id": 36, "seek": 23280, "start": 256.8, "end": 260.52, "text": " They want to be absolutely sure of every little detail. But even by calling it beta,", "tokens": [814, 528, 281, 312, 3122, 988, 295, 633, 707, 2607, 13, 583, 754, 538, 5141, 309, 9861, 11], "temperature": 0.0, "avg_logprob": -0.1166405011248845, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.1286067092441954e-05}, {"id": 37, "seek": 26052, "start": 260.52, "end": 265.88, "text": " they're very strongly committed to keeping things working. They're just saying there might be some", "tokens": [436, 434, 588, 10613, 7784, 281, 5145, 721, 1364, 13, 814, 434, 445, 1566, 456, 1062, 312, 512], "temperature": 0.0, "avg_logprob": -0.1535023237529554, "compression_ratio": 1.6422413793103448, "no_speech_prob": 1.4269204257288948e-05}, {"id": 38, "seek": 26052, "start": 265.88, "end": 273.76, "text": " breaking changes in the future. And to kind of break down how call-on-mobile platform code works,", "tokens": [7697, 2962, 294, 264, 2027, 13, 400, 281, 733, 295, 1821, 760, 577, 818, 12, 266, 12, 76, 13632, 3663, 3089, 1985, 11], "temperature": 0.0, "avg_logprob": -0.1535023237529554, "compression_ratio": 1.6422413793103448, "no_speech_prob": 1.4269204257288948e-05}, {"id": 39, "seek": 26052, "start": 273.76, "end": 280.44, "text": " I like to use this kind of Venn diagram and focus on the mobile use case. So we're talking about", "tokens": [286, 411, 281, 764, 341, 733, 295, 691, 1857, 10686, 293, 1879, 322, 264, 6013, 764, 1389, 13, 407, 321, 434, 1417, 466], "temperature": 0.0, "avg_logprob": -0.1535023237529554, "compression_ratio": 1.6422413793103448, "no_speech_prob": 1.4269204257288948e-05}, {"id": 40, "seek": 26052, "start": 280.44, "end": 287.0, "text": " Android and iOS. So if you're an Android developer, you're used to kind of this type of", "tokens": [8853, 293, 17430, 13, 407, 498, 291, 434, 364, 8853, 10754, 11, 291, 434, 1143, 281, 733, 295, 341, 2010, 295], "temperature": 0.0, "avg_logprob": -0.1535023237529554, "compression_ratio": 1.6422413793103448, "no_speech_prob": 1.4269204257288948e-05}, {"id": 41, "seek": 28700, "start": 287.0, "end": 293.92, "text": " diagram. You have access to kind of all the Kotlin APIs you're used to. You have access to", "tokens": [10686, 13, 509, 362, 2105, 281, 733, 295, 439, 264, 30123, 5045, 21445, 291, 434, 1143, 281, 13, 509, 362, 2105, 281], "temperature": 0.0, "avg_logprob": -0.1311071370099042, "compression_ratio": 1.5280898876404494, "no_speech_prob": 2.208883779530879e-05}, {"id": 42, "seek": 28700, "start": 293.92, "end": 302.6, "text": " JVM and Android APIs. And there's a subset of that, just the kind of pure Kotlin stuff,", "tokens": [508, 53, 44, 293, 8853, 21445, 13, 400, 456, 311, 257, 25993, 295, 300, 11, 445, 264, 733, 295, 6075, 30123, 5045, 1507, 11], "temperature": 0.0, "avg_logprob": -0.1311071370099042, "compression_ratio": 1.5280898876404494, "no_speech_prob": 2.208883779530879e-05}, {"id": 43, "seek": 28700, "start": 302.6, "end": 308.68, "text": " that in principle you can run on any platform. Which then means you can take that over to the", "tokens": [300, 294, 8665, 291, 393, 1190, 322, 604, 3663, 13, 3013, 550, 1355, 291, 393, 747, 300, 670, 281, 264], "temperature": 0.0, "avg_logprob": -0.1311071370099042, "compression_ratio": 1.5280898876404494, "no_speech_prob": 2.208883779530879e-05}, {"id": 44, "seek": 30868, "start": 308.68, "end": 322.28000000000003, "text": " iOS side, also add some iOS platform specific code. And then, so you have kind of your shared bits", "tokens": [17430, 1252, 11, 611, 909, 512, 17430, 3663, 2685, 3089, 13, 400, 550, 11, 370, 291, 362, 733, 295, 428, 5507, 9239], "temperature": 0.0, "avg_logprob": -0.18324359495248368, "compression_ratio": 1.5856353591160222, "no_speech_prob": 5.010293079976691e-06}, {"id": 45, "seek": 30868, "start": 322.28000000000003, "end": 330.48, "text": " and your platform bits. And the KMP tool chain brings all of that together. So that essentially", "tokens": [293, 428, 3663, 9239, 13, 400, 264, 591, 12224, 2290, 5021, 5607, 439, 295, 300, 1214, 13, 407, 300, 4476], "temperature": 0.0, "avg_logprob": -0.18324359495248368, "compression_ratio": 1.5856353591160222, "no_speech_prob": 5.010293079976691e-06}, {"id": 46, "seek": 30868, "start": 330.48, "end": 335.84000000000003, "text": " each of these different colors on the diagram are just a different source directory. And the", "tokens": [1184, 295, 613, 819, 4577, 322, 264, 10686, 366, 445, 257, 819, 4009, 21120, 13, 400, 264], "temperature": 0.0, "avg_logprob": -0.18324359495248368, "compression_ratio": 1.5856353591160222, "no_speech_prob": 5.010293079976691e-06}, {"id": 47, "seek": 33584, "start": 335.84, "end": 340.11999999999995, "text": " tool chain knows how to kind of put the right parts together so that you get the right code for", "tokens": [2290, 5021, 3255, 577, 281, 733, 295, 829, 264, 558, 3166, 1214, 370, 300, 291, 483, 264, 558, 3089, 337], "temperature": 0.0, "avg_logprob": -0.1418872137327452, "compression_ratio": 1.4663212435233162, "no_speech_prob": 2.58235650107963e-05}, {"id": 48, "seek": 33584, "start": 340.11999999999995, "end": 349.44, "text": " your platform. And again, there's more to KMP than just KMM, but the 8-way Venn diagram of", "tokens": [428, 3663, 13, 400, 797, 11, 456, 311, 544, 281, 591, 12224, 813, 445, 591, 17365, 11, 457, 264, 1649, 12, 676, 691, 1857, 10686, 295], "temperature": 0.0, "avg_logprob": -0.1418872137327452, "compression_ratio": 1.4663212435233162, "no_speech_prob": 2.58235650107963e-05}, {"id": 49, "seek": 33584, "start": 349.44, "end": 356.64, "text": " everything is a lot more complicated to draw. So what does it look like when you're writing your", "tokens": [1203, 307, 257, 688, 544, 6179, 281, 2642, 13, 407, 437, 775, 309, 574, 411, 562, 291, 434, 3579, 428], "temperature": 0.0, "avg_logprob": -0.1418872137327452, "compression_ratio": 1.4663212435233162, "no_speech_prob": 2.58235650107963e-05}, {"id": 50, "seek": 35664, "start": 356.64, "end": 366.47999999999996, "text": " first Hello Worlds in Kotlin Multiclapform? And one way to get that is to start with the", "tokens": [700, 2425, 43003, 294, 30123, 5045, 14665, 299, 75, 569, 837, 30, 400, 472, 636, 281, 483, 300, 307, 281, 722, 365, 264], "temperature": 0.0, "avg_logprob": -0.15087448796139488, "compression_ratio": 1.4734042553191489, "no_speech_prob": 1.7441358068026602e-05}, {"id": 51, "seek": 35664, "start": 366.47999999999996, "end": 375.24, "text": " Kotlin Multiclapform mobile plugin for Android Studio. So you can do a lot of the stuff. I tend", "tokens": [30123, 5045, 14665, 299, 75, 569, 837, 6013, 23407, 337, 8853, 13500, 13, 407, 291, 393, 360, 257, 688, 295, 264, 1507, 13, 286, 3928], "temperature": 0.0, "avg_logprob": -0.15087448796139488, "compression_ratio": 1.4734042553191489, "no_speech_prob": 1.7441358068026602e-05}, {"id": 52, "seek": 35664, "start": 375.24, "end": 382.76, "text": " to use IntelliJ IDEA more than Android Studio when I'm doing my KMP development. But the new", "tokens": [281, 764, 18762, 72, 41, 40930, 32, 544, 813, 8853, 13500, 562, 286, 478, 884, 452, 591, 12224, 3250, 13, 583, 264, 777], "temperature": 0.0, "avg_logprob": -0.15087448796139488, "compression_ratio": 1.4734042553191489, "no_speech_prob": 1.7441358068026602e-05}, {"id": 53, "seek": 38276, "start": 382.76, "end": 388.08, "text": " project template in Android Studio is a little bit easier to get started with. They have these", "tokens": [1716, 12379, 294, 8853, 13500, 307, 257, 707, 857, 3571, 281, 483, 1409, 365, 13, 814, 362, 613], "temperature": 0.0, "avg_logprob": -0.1237623393535614, "compression_ratio": 1.658008658008658, "no_speech_prob": 1.9493427316774614e-05}, {"id": 54, "seek": 38276, "start": 388.08, "end": 398.24, "text": " Kotlin Multiclapform application, or Kotlin Multiclapform library. And what they give you is", "tokens": [30123, 5045, 14665, 299, 75, 569, 837, 3861, 11, 420, 30123, 5045, 14665, 299, 75, 569, 837, 6405, 13, 400, 437, 436, 976, 291, 307], "temperature": 0.0, "avg_logprob": -0.1237623393535614, "compression_ratio": 1.658008658008658, "no_speech_prob": 1.9493427316774614e-05}, {"id": 55, "seek": 38276, "start": 398.24, "end": 402.24, "text": " some code that looks kind of like this. And don't worry about kind of every little detail of it.", "tokens": [512, 3089, 300, 1542, 733, 295, 411, 341, 13, 400, 500, 380, 3292, 466, 733, 295, 633, 707, 2607, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.1237623393535614, "compression_ratio": 1.658008658008658, "no_speech_prob": 1.9493427316774614e-05}, {"id": 56, "seek": 38276, "start": 402.24, "end": 412.28, "text": " But this is kind of like the Hello World template that it generates for you. So there's a platform", "tokens": [583, 341, 307, 733, 295, 411, 264, 2425, 3937, 12379, 300, 309, 23815, 337, 291, 13, 407, 456, 311, 257, 3663], "temperature": 0.0, "avg_logprob": -0.1237623393535614, "compression_ratio": 1.658008658008658, "no_speech_prob": 1.9493427316774614e-05}, {"id": 57, "seek": 41228, "start": 412.28, "end": 416.08, "text": " interface in the common code. The common code is in the center here. The Android is on the left.", "tokens": [9226, 294, 264, 2689, 3089, 13, 440, 2689, 3089, 307, 294, 264, 3056, 510, 13, 440, 8853, 307, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.13566365402736022, "compression_ratio": 1.8009478672985781, "no_speech_prob": 3.525738065945916e-05}, {"id": 58, "seek": 41228, "start": 416.08, "end": 423.4, "text": " The iOS is on the right. So there's a platform interface that's implemented on each platform", "tokens": [440, 17430, 307, 322, 264, 558, 13, 407, 456, 311, 257, 3663, 9226, 300, 311, 12270, 322, 1184, 3663], "temperature": 0.0, "avg_logprob": -0.13566365402736022, "compression_ratio": 1.8009478672985781, "no_speech_prob": 3.525738065945916e-05}, {"id": 59, "seek": 41228, "start": 423.4, "end": 431.15999999999997, "text": " as Android platform and iOS platform. There's a expect function. So expect an actual or two", "tokens": [382, 8853, 3663, 293, 17430, 3663, 13, 821, 311, 257, 2066, 2445, 13, 407, 2066, 364, 3539, 420, 732], "temperature": 0.0, "avg_logprob": -0.13566365402736022, "compression_ratio": 1.8009478672985781, "no_speech_prob": 3.525738065945916e-05}, {"id": 60, "seek": 41228, "start": 431.15999999999997, "end": 438.35999999999996, "text": " keywords that Kotlin Multiclapform adds to the language that essentially let you declare something", "tokens": [21009, 300, 30123, 5045, 14665, 299, 75, 569, 837, 10860, 281, 264, 2856, 300, 4476, 718, 291, 19710, 746], "temperature": 0.0, "avg_logprob": -0.13566365402736022, "compression_ratio": 1.8009478672985781, "no_speech_prob": 3.525738065945916e-05}, {"id": 61, "seek": 43836, "start": 438.36, "end": 446.52000000000004, "text": " in your common code, but implement it in your platform code. Essentially kind of like a header.", "tokens": [294, 428, 2689, 3089, 11, 457, 4445, 309, 294, 428, 3663, 3089, 13, 23596, 733, 295, 411, 257, 23117, 13], "temperature": 0.0, "avg_logprob": -0.23816122327532088, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.94926506082993e-05}, {"id": 62, "seek": 43836, "start": 446.52000000000004, "end": 453.88, "text": " Actually, they use the header keyword for it before Kotlin Multiclapform was released in 2017,", "tokens": [5135, 11, 436, 764, 264, 23117, 20428, 337, 309, 949, 30123, 5045, 14665, 299, 75, 569, 837, 390, 4736, 294, 6591, 11], "temperature": 0.0, "avg_logprob": -0.23816122327532088, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.94926506082993e-05}, {"id": 63, "seek": 43836, "start": 453.88, "end": 464.0, "text": " 2018-ish. So there's an expect function that you kind of get a default platform that has", "tokens": [6096, 12, 742, 13, 407, 456, 311, 364, 2066, 2445, 300, 291, 733, 295, 483, 257, 7576, 3663, 300, 575], "temperature": 0.0, "avg_logprob": -0.23816122327532088, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.94926506082993e-05}, {"id": 64, "seek": 46400, "start": 464.0, "end": 468.8, "text": " actual implementations on each platform. And then there's a greeting class that just kind of brings", "tokens": [3539, 4445, 763, 322, 1184, 3663, 13, 400, 550, 456, 311, 257, 28174, 1508, 300, 445, 733, 295, 5607], "temperature": 0.0, "avg_logprob": -0.15500691731770833, "compression_ratio": 1.8250950570342206, "no_speech_prob": 2.352017691009678e-05}, {"id": 65, "seek": 46400, "start": 468.8, "end": 473.8, "text": " it all together and prints the name of the platform that you're on. And this gives you a", "tokens": [309, 439, 1214, 293, 22305, 264, 1315, 295, 264, 3663, 300, 291, 434, 322, 13, 400, 341, 2709, 291, 257], "temperature": 0.0, "avg_logprob": -0.15500691731770833, "compression_ratio": 1.8250950570342206, "no_speech_prob": 2.352017691009678e-05}, {"id": 66, "seek": 46400, "start": 473.8, "end": 482.88, "text": " little playground to start messing around with Kotlin Multiclapform code. And I actually really", "tokens": [707, 24646, 281, 722, 23258, 926, 365, 30123, 5045, 14665, 299, 75, 569, 837, 3089, 13, 400, 286, 767, 534], "temperature": 0.0, "avg_logprob": -0.15500691731770833, "compression_ratio": 1.8250950570342206, "no_speech_prob": 2.352017691009678e-05}, {"id": 67, "seek": 46400, "start": 482.88, "end": 489.72, "text": " like there's, I like the way that they use expect actual in here. It's very easy when you have this", "tokens": [411, 456, 311, 11, 286, 411, 264, 636, 300, 436, 764, 2066, 3539, 294, 510, 13, 467, 311, 588, 1858, 562, 291, 362, 341], "temperature": 0.0, "avg_logprob": -0.15500691731770833, "compression_ratio": 1.8250950570342206, "no_speech_prob": 2.352017691009678e-05}, {"id": 68, "seek": 46400, "start": 489.72, "end": 493.84, "text": " new tool starting out with Kotlin Multiclapform to kind of overuse it. I mean, you start making", "tokens": [777, 2290, 2891, 484, 365, 30123, 5045, 14665, 299, 75, 569, 837, 281, 733, 295, 670, 438, 309, 13, 286, 914, 11, 291, 722, 1455], "temperature": 0.0, "avg_logprob": -0.15500691731770833, "compression_ratio": 1.8250950570342206, "no_speech_prob": 2.352017691009678e-05}, {"id": 69, "seek": 49384, "start": 493.84, "end": 501.2, "text": " all these expect classes and things like that. I tend to find it's really nice to also use,", "tokens": [439, 613, 2066, 5359, 293, 721, 411, 300, 13, 286, 3928, 281, 915, 309, 311, 534, 1481, 281, 611, 764, 11], "temperature": 0.0, "avg_logprob": -0.18369089855867274, "compression_ratio": 1.5513513513513513, "no_speech_prob": 2.7484033125801943e-05}, {"id": 70, "seek": 49384, "start": 501.2, "end": 506.76, "text": " like, hold on to interfaces as well. So when you define an interface platform rather than an expect", "tokens": [411, 11, 1797, 322, 281, 28416, 382, 731, 13, 407, 562, 291, 6964, 364, 9226, 3663, 2831, 813, 364, 2066], "temperature": 0.0, "avg_logprob": -0.18369089855867274, "compression_ratio": 1.5513513513513513, "no_speech_prob": 2.7484033125801943e-05}, {"id": 71, "seek": 49384, "start": 506.76, "end": 517.64, "text": " class platform, you can substitute other implementations a lot more easily. And so this is kind", "tokens": [1508, 3663, 11, 291, 393, 15802, 661, 4445, 763, 257, 688, 544, 3612, 13, 400, 370, 341, 307, 733], "temperature": 0.0, "avg_logprob": -0.18369089855867274, "compression_ratio": 1.5513513513513513, "no_speech_prob": 2.7484033125801943e-05}, {"id": 72, "seek": 51764, "start": 517.64, "end": 524.24, "text": " of like a rough sense of the code structure that you get from this template. So the code that I", "tokens": [295, 411, 257, 5903, 2020, 295, 264, 3089, 3877, 300, 291, 483, 490, 341, 12379, 13, 407, 264, 3089, 300, 286], "temperature": 0.0, "avg_logprob": -0.18665050779070172, "compression_ratio": 1.6420454545454546, "no_speech_prob": 1.771326242305804e-05}, {"id": 73, "seek": 51764, "start": 524.24, "end": 532.52, "text": " showed you is kind of this bottom three boxes. So there's common code in the middle, the orange,", "tokens": [4712, 291, 307, 733, 295, 341, 2767, 1045, 9002, 13, 407, 456, 311, 2689, 3089, 294, 264, 2808, 11, 264, 7671, 11], "temperature": 0.0, "avg_logprob": -0.18665050779070172, "compression_ratio": 1.6420454545454546, "no_speech_prob": 1.771326242305804e-05}, {"id": 74, "seek": 51764, "start": 532.52, "end": 539.68, "text": " there's Android sources in that that you then compile to an Android library. There's iOS sources", "tokens": [456, 311, 8853, 7139, 294, 300, 300, 291, 550, 31413, 281, 364, 8853, 6405, 13, 821, 311, 17430, 7139], "temperature": 0.0, "avg_logprob": -0.18665050779070172, "compression_ratio": 1.6420454545454546, "no_speech_prob": 1.771326242305804e-05}, {"id": 75, "seek": 53968, "start": 539.68, "end": 547.5999999999999, "text": " that you then compile to a iOS framework file. And then if you use one of the application templates,", "tokens": [300, 291, 550, 31413, 281, 257, 17430, 8388, 3991, 13, 400, 550, 498, 291, 764, 472, 295, 264, 3861, 21165, 11], "temperature": 0.0, "avg_logprob": -0.17634491359486298, "compression_ratio": 1.5549738219895288, "no_speech_prob": 1.9765793695114553e-05}, {"id": 76, "seek": 53968, "start": 547.5999999999999, "end": 557.68, "text": " it'll look at the app layer that consumes that. There's multiple ways that you can configure the", "tokens": [309, 603, 574, 412, 264, 724, 4583, 300, 48823, 300, 13, 821, 311, 3866, 2098, 300, 291, 393, 22162, 264], "temperature": 0.0, "avg_logprob": -0.17634491359486298, "compression_ratio": 1.5549738219895288, "no_speech_prob": 1.9765793695114553e-05}, {"id": 77, "seek": 53968, "start": 557.68, "end": 562.9599999999999, "text": " iOS app to consume it. So you can, which essentially there's different dependency managers that you", "tokens": [17430, 724, 281, 14732, 309, 13, 407, 291, 393, 11, 597, 4476, 456, 311, 819, 33621, 14084, 300, 291], "temperature": 0.0, "avg_logprob": -0.17634491359486298, "compression_ratio": 1.5549738219895288, "no_speech_prob": 1.9765793695114553e-05}, {"id": 78, "seek": 56296, "start": 562.96, "end": 573.52, "text": " can use in iOS. There's a default that's just kind of manually include the framework. You kind of", "tokens": [393, 764, 294, 17430, 13, 821, 311, 257, 7576, 300, 311, 445, 733, 295, 16945, 4090, 264, 8388, 13, 509, 733, 295], "temperature": 0.0, "avg_logprob": -0.17911365032196044, "compression_ratio": 1.5837837837837838, "no_speech_prob": 2.4941979063441977e-05}, {"id": 79, "seek": 56296, "start": 573.52, "end": 582.0400000000001, "text": " add a custom build step into Xcode that will call into Kotlin and do that. There's also a plug-in", "tokens": [909, 257, 2375, 1322, 1823, 666, 1783, 22332, 300, 486, 818, 666, 30123, 5045, 293, 360, 300, 13, 821, 311, 611, 257, 5452, 12, 259], "temperature": 0.0, "avg_logprob": -0.17911365032196044, "compression_ratio": 1.5837837837837838, "no_speech_prob": 2.4941979063441977e-05}, {"id": 80, "seek": 56296, "start": 582.0400000000001, "end": 590.9200000000001, "text": " that's part of the Kotlin tool chain that uses Cocopods. So Cocopods is kind of, has historically", "tokens": [300, 311, 644, 295, 264, 30123, 5045, 2290, 5021, 300, 4960, 30430, 404, 19768, 13, 407, 30430, 404, 19768, 307, 733, 295, 11, 575, 16180], "temperature": 0.0, "avg_logprob": -0.17911365032196044, "compression_ratio": 1.5837837837837838, "no_speech_prob": 2.4941979063441977e-05}, {"id": 81, "seek": 59092, "start": 590.92, "end": 597.64, "text": " been a commonly used dependency manager on iOS. It's these days starting to be replaced by Swift", "tokens": [668, 257, 12719, 1143, 33621, 6598, 322, 17430, 13, 467, 311, 613, 1708, 2891, 281, 312, 10772, 538, 25539], "temperature": 0.0, "avg_logprob": -0.22219362523820665, "compression_ratio": 1.4228855721393034, "no_speech_prob": 1.0931734323094133e-05}, {"id": 82, "seek": 59092, "start": 597.64, "end": 603.36, "text": " package manager, but the Kotlin tool chain doesn't have as good of integration into SPM yet.", "tokens": [7372, 6598, 11, 457, 264, 30123, 5045, 2290, 5021, 1177, 380, 362, 382, 665, 295, 10980, 666, 8420, 44, 1939, 13], "temperature": 0.0, "avg_logprob": -0.22219362523820665, "compression_ratio": 1.4228855721393034, "no_speech_prob": 1.0931734323094133e-05}, {"id": 83, "seek": 59092, "start": 603.36, "end": 618.0, "text": " And then I'll also just call out, we at TouchLab have a sample called CampKit that can also be a", "tokens": [400, 550, 286, 603, 611, 445, 818, 484, 11, 321, 412, 20029, 37880, 362, 257, 6889, 1219, 9189, 45626, 300, 393, 611, 312, 257], "temperature": 0.0, "avg_logprob": -0.22219362523820665, "compression_ratio": 1.4228855721393034, "no_speech_prob": 1.0931734323094133e-05}, {"id": 84, "seek": 61800, "start": 618.0, "end": 625.28, "text": " nice kind of place to start out if you're playing this stuff for the first time. It's a somewhat", "tokens": [1481, 733, 295, 1081, 281, 722, 484, 498, 291, 434, 2433, 341, 1507, 337, 264, 700, 565, 13, 467, 311, 257, 8344], "temperature": 0.0, "avg_logprob": -0.14014951749281448, "compression_ratio": 1.6754385964912282, "no_speech_prob": 1.8591708794701844e-05}, {"id": 85, "seek": 61800, "start": 625.28, "end": 631.96, "text": " more complicated sample than that Hello World. It has a bit more kind of architecture to it and", "tokens": [544, 6179, 6889, 813, 300, 2425, 3937, 13, 467, 575, 257, 857, 544, 733, 295, 9482, 281, 309, 293], "temperature": 0.0, "avg_logprob": -0.14014951749281448, "compression_ratio": 1.6754385964912282, "no_speech_prob": 1.8591708794701844e-05}, {"id": 86, "seek": 61800, "start": 631.96, "end": 638.4, "text": " shows kind of some of our standard architecture and library practices. And also has a bunch of", "tokens": [3110, 733, 295, 512, 295, 527, 3832, 9482, 293, 6405, 7525, 13, 400, 611, 575, 257, 3840, 295], "temperature": 0.0, "avg_logprob": -0.14014951749281448, "compression_ratio": 1.6754385964912282, "no_speech_prob": 1.8591708794701844e-05}, {"id": 87, "seek": 61800, "start": 638.4, "end": 644.36, "text": " documentation kind of explaining why we make some of the choices that we do. So check that out", "tokens": [14333, 733, 295, 13468, 983, 321, 652, 512, 295, 264, 7994, 300, 321, 360, 13, 407, 1520, 300, 484], "temperature": 0.0, "avg_logprob": -0.14014951749281448, "compression_ratio": 1.6754385964912282, "no_speech_prob": 1.8591708794701844e-05}, {"id": 88, "seek": 64436, "start": 644.36, "end": 652.08, "text": " also if you're interested. So what are kind of some common themes around these sorts of starter", "tokens": [611, 498, 291, 434, 3102, 13, 407, 437, 366, 733, 295, 512, 2689, 13544, 926, 613, 7527, 295, 22465], "temperature": 0.0, "avg_logprob": -0.18512535095214844, "compression_ratio": 1.6375545851528384, "no_speech_prob": 1.0599870620353613e-05}, {"id": 89, "seek": 64436, "start": 652.08, "end": 659.32, "text": " projects? And there's a lot more than just those two, I should say also. There's lots of people", "tokens": [4455, 30, 400, 456, 311, 257, 688, 544, 813, 445, 729, 732, 11, 286, 820, 584, 611, 13, 821, 311, 3195, 295, 561], "temperature": 0.0, "avg_logprob": -0.18512535095214844, "compression_ratio": 1.6375545851528384, "no_speech_prob": 1.0599870620353613e-05}, {"id": 90, "seek": 64436, "start": 659.32, "end": 664.52, "text": " that have kind of put together interesting multiple from samples that you can use when you're", "tokens": [300, 362, 733, 295, 829, 1214, 1880, 3866, 490, 10938, 300, 291, 393, 764, 562, 291, 434], "temperature": 0.0, "avg_logprob": -0.18512535095214844, "compression_ratio": 1.6375545851528384, "no_speech_prob": 1.0599870620353613e-05}, {"id": 91, "seek": 64436, "start": 664.52, "end": 672.2, "text": " first learning. And something that comes up often in a lot of them is they tend to aim at", "tokens": [700, 2539, 13, 400, 746, 300, 1487, 493, 2049, 294, 257, 688, 295, 552, 307, 436, 3928, 281, 5939, 412], "temperature": 0.0, "avg_logprob": -0.18512535095214844, "compression_ratio": 1.6375545851528384, "no_speech_prob": 1.0599870620353613e-05}, {"id": 92, "seek": 67220, "start": 672.2, "end": 682.36, "text": " maximizing shared code, which like in an ideal world is really nice. In the real world, oftentimes", "tokens": [5138, 3319, 5507, 3089, 11, 597, 411, 294, 364, 7157, 1002, 307, 534, 1481, 13, 682, 264, 957, 1002, 11, 18349], "temperature": 0.0, "avg_logprob": -0.12305632633949394, "compression_ratio": 1.5185185185185186, "no_speech_prob": 1.317534133704612e-05}, {"id": 93, "seek": 67220, "start": 682.36, "end": 686.8000000000001, "text": " you're starting from two separate native apps and you want to incrementally move towards more", "tokens": [291, 434, 2891, 490, 732, 4994, 8470, 7733, 293, 291, 528, 281, 26200, 379, 1286, 3030, 544], "temperature": 0.0, "avg_logprob": -0.12305632633949394, "compression_ratio": 1.5185185185185186, "no_speech_prob": 1.317534133704612e-05}, {"id": 94, "seek": 67220, "start": 686.8000000000001, "end": 692.5200000000001, "text": " shared. And you don't always get a good sense of what that looks like from any of the standard", "tokens": [5507, 13, 400, 291, 500, 380, 1009, 483, 257, 665, 2020, 295, 437, 300, 1542, 411, 490, 604, 295, 264, 3832], "temperature": 0.0, "avg_logprob": -0.12305632633949394, "compression_ratio": 1.5185185185185186, "no_speech_prob": 1.317534133704612e-05}, {"id": 95, "seek": 69252, "start": 692.52, "end": 703.1999999999999, "text": " samples. Things also tend to be mono repos when you're looking at starter samples. So what if I", "tokens": [10938, 13, 9514, 611, 3928, 281, 312, 35624, 1085, 329, 562, 291, 434, 1237, 412, 22465, 10938, 13, 407, 437, 498, 286], "temperature": 0.0, "avg_logprob": -0.15555739140772556, "compression_ratio": 1.5940170940170941, "no_speech_prob": 2.827712523867376e-05}, {"id": 96, "seek": 69252, "start": 703.1999999999999, "end": 706.4399999999999, "text": " already have existing apps? They live in different places, but I want to start sharing code", "tokens": [1217, 362, 6741, 7733, 30, 814, 1621, 294, 819, 3190, 11, 457, 286, 528, 281, 722, 5414, 3089], "temperature": 0.0, "avg_logprob": -0.15555739140772556, "compression_ratio": 1.5940170940170941, "no_speech_prob": 2.827712523867376e-05}, {"id": 97, "seek": 69252, "start": 706.4399999999999, "end": 714.28, "text": " between them. What does that look like? A big piece of a lot of them is there will be some", "tokens": [1296, 552, 13, 708, 775, 300, 574, 411, 30, 316, 955, 2522, 295, 257, 688, 295, 552, 307, 456, 486, 312, 512], "temperature": 0.0, "avg_logprob": -0.15555739140772556, "compression_ratio": 1.5940170940170941, "no_speech_prob": 2.827712523867376e-05}, {"id": 98, "seek": 69252, "start": 714.28, "end": 721.24, "text": " step in your build process where in your build process in iOS where Xcode has to manually call", "tokens": [1823, 294, 428, 1322, 1399, 689, 294, 428, 1322, 1399, 294, 17430, 689, 1783, 22332, 575, 281, 16945, 818], "temperature": 0.0, "avg_logprob": -0.15555739140772556, "compression_ratio": 1.5940170940170941, "no_speech_prob": 2.827712523867376e-05}, {"id": 99, "seek": 72124, "start": 721.24, "end": 728.32, "text": " into Gradle to build your Kotlin. But if you're on a larger team, you might not want to have to do", "tokens": [666, 16710, 306, 281, 1322, 428, 30123, 5045, 13, 583, 498, 291, 434, 322, 257, 4833, 1469, 11, 291, 1062, 406, 528, 281, 362, 281, 360], "temperature": 0.0, "avg_logprob": -0.15094176530838013, "compression_ratio": 1.5078534031413613, "no_speech_prob": 2.208901241829153e-05}, {"id": 100, "seek": 72124, "start": 728.32, "end": 735.96, "text": " that every time. Your iOS team might not even have a JDK set up if they're not used to using", "tokens": [300, 633, 565, 13, 2260, 17430, 1469, 1062, 406, 754, 362, 257, 37082, 42, 992, 493, 498, 436, 434, 406, 1143, 281, 1228], "temperature": 0.0, "avg_logprob": -0.15094176530838013, "compression_ratio": 1.5078534031413613, "no_speech_prob": 2.208901241829153e-05}, {"id": 101, "seek": 72124, "start": 735.96, "end": 748.2, "text": " that. So what do you do in that case? And they also tend to be single module when you're looking", "tokens": [300, 13, 407, 437, 360, 291, 360, 294, 300, 1389, 30, 400, 436, 611, 3928, 281, 312, 2167, 10088, 562, 291, 434, 1237], "temperature": 0.0, "avg_logprob": -0.15094176530838013, "compression_ratio": 1.5078534031413613, "no_speech_prob": 2.208901241829153e-05}, {"id": 102, "seek": 74820, "start": 748.2, "end": 759.2800000000001, "text": " at sample projects. But what happens when things get bigger? So that brings us to what does it", "tokens": [412, 6889, 4455, 13, 583, 437, 2314, 562, 721, 483, 3801, 30, 407, 300, 5607, 505, 281, 437, 775, 309], "temperature": 0.0, "avg_logprob": -0.13912236863288327, "compression_ratio": 1.5593220338983051, "no_speech_prob": 3.065308919758536e-05}, {"id": 103, "seek": 74820, "start": 759.2800000000001, "end": 763.2800000000001, "text": " look like when you take all of these sorts of things and start scaling it up to real-world", "tokens": [574, 411, 562, 291, 747, 439, 295, 613, 7527, 295, 721, 293, 722, 21589, 309, 493, 281, 957, 12, 13217], "temperature": 0.0, "avg_logprob": -0.13912236863288327, "compression_ratio": 1.5593220338983051, "no_speech_prob": 3.065308919758536e-05}, {"id": 104, "seek": 74820, "start": 763.2800000000001, "end": 772.36, "text": " projects? And I'm going to talk about some of the ways that we tend to think about this at", "tokens": [4455, 30, 400, 286, 478, 516, 281, 751, 466, 512, 295, 264, 2098, 300, 321, 3928, 281, 519, 466, 341, 412], "temperature": 0.0, "avg_logprob": -0.13912236863288327, "compression_ratio": 1.5593220338983051, "no_speech_prob": 3.065308919758536e-05}, {"id": 105, "seek": 77236, "start": 772.36, "end": 779.96, "text": " touch lab as well as some tools and things that we've put out into the community to help out with", "tokens": [2557, 2715, 382, 731, 382, 512, 3873, 293, 721, 300, 321, 600, 829, 484, 666, 264, 1768, 281, 854, 484, 365], "temperature": 0.0, "avg_logprob": -0.14557471729460217, "compression_ratio": 1.732394366197183, "no_speech_prob": 1.6161633539013565e-05}, {"id": 106, "seek": 77236, "start": 779.96, "end": 787.44, "text": " some of these things. And the first thing I want to talk about is team structure. This is", "tokens": [512, 295, 613, 721, 13, 400, 264, 700, 551, 286, 528, 281, 751, 466, 307, 1469, 3877, 13, 639, 307], "temperature": 0.0, "avg_logprob": -0.14557471729460217, "compression_ratio": 1.732394366197183, "no_speech_prob": 1.6161633539013565e-05}, {"id": 107, "seek": 77236, "start": 787.44, "end": 791.84, "text": " something we've been talking about a lot internally at touch lab recently and kind of", "tokens": [746, 321, 600, 668, 1417, 466, 257, 688, 19501, 412, 2557, 2715, 3938, 293, 733, 295], "temperature": 0.0, "avg_logprob": -0.14557471729460217, "compression_ratio": 1.732394366197183, "no_speech_prob": 1.6161633539013565e-05}, {"id": 108, "seek": 77236, "start": 791.84, "end": 798.88, "text": " building out this sort of taxonomy of different ways that different teams approach the way that", "tokens": [2390, 484, 341, 1333, 295, 3366, 23423, 295, 819, 2098, 300, 819, 5491, 3109, 264, 636, 300], "temperature": 0.0, "avg_logprob": -0.14557471729460217, "compression_ratio": 1.732394366197183, "no_speech_prob": 1.6161633539013565e-05}, {"id": 109, "seek": 79888, "start": 798.88, "end": 808.88, "text": " they handle their shared code. And a common core piece of that is being thoughtful about the", "tokens": [436, 4813, 641, 5507, 3089, 13, 400, 257, 2689, 4965, 2522, 295, 300, 307, 885, 21566, 466, 264], "temperature": 0.0, "avg_logprob": -0.17271768851358382, "compression_ratio": 1.5, "no_speech_prob": 2.8213695259182714e-05}, {"id": 110, "seek": 79888, "start": 808.88, "end": 813.0, "text": " ways that the structure of your team impacts the way that you want to organize your code.", "tokens": [2098, 300, 264, 3877, 295, 428, 1469, 11606, 264, 636, 300, 291, 528, 281, 13859, 428, 3089, 13], "temperature": 0.0, "avg_logprob": -0.17271768851358382, "compression_ratio": 1.5, "no_speech_prob": 2.8213695259182714e-05}, {"id": 111, "seek": 79888, "start": 813.0, "end": 825.2, "text": " Because lots of teams are very different. So the distinction I'll highlight here and it", "tokens": [1436, 3195, 295, 5491, 366, 588, 819, 13, 407, 264, 16844, 286, 603, 5078, 510, 293, 309], "temperature": 0.0, "avg_logprob": -0.17271768851358382, "compression_ratio": 1.5, "no_speech_prob": 2.8213695259182714e-05}, {"id": 112, "seek": 82520, "start": 825.2, "end": 830.4000000000001, "text": " kind of works across a couple of different dimensions. I tend to think of it as kind of", "tokens": [733, 295, 1985, 2108, 257, 1916, 295, 819, 12819, 13, 286, 3928, 281, 519, 295, 309, 382, 733, 295], "temperature": 0.0, "avg_logprob": -0.11901325403257858, "compression_ratio": 1.7881773399014778, "no_speech_prob": 1.6919186236918904e-05}, {"id": 113, "seek": 82520, "start": 830.4000000000001, "end": 837.44, "text": " small teams versus large teams. But it's also sometimes teams that work kind of as one unit", "tokens": [1359, 5491, 5717, 2416, 5491, 13, 583, 309, 311, 611, 2171, 5491, 300, 589, 733, 295, 382, 472, 4985], "temperature": 0.0, "avg_logprob": -0.11901325403257858, "compression_ratio": 1.7881773399014778, "no_speech_prob": 1.6919186236918904e-05}, {"id": 114, "seek": 82520, "start": 837.44, "end": 846.48, "text": " versus teams that work as multiple units. And a key piece of that is often is the group that", "tokens": [5717, 5491, 300, 589, 382, 3866, 6815, 13, 400, 257, 2141, 2522, 295, 300, 307, 2049, 307, 264, 1594, 300], "temperature": 0.0, "avg_logprob": -0.11901325403257858, "compression_ratio": 1.7881773399014778, "no_speech_prob": 1.6919186236918904e-05}, {"id": 115, "seek": 82520, "start": 846.48, "end": 850.5600000000001, "text": " is writing the shared code the same group as the people who are consuming the shared code.", "tokens": [307, 3579, 264, 5507, 3089, 264, 912, 1594, 382, 264, 561, 567, 366, 19867, 264, 5507, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11901325403257858, "compression_ratio": 1.7881773399014778, "no_speech_prob": 1.6919186236918904e-05}, {"id": 116, "seek": 85056, "start": 850.56, "end": 858.3199999999999, "text": " So when you're a smaller team or if you're one unit you tend to have kind of fewer worries", "tokens": [407, 562, 291, 434, 257, 4356, 1469, 420, 498, 291, 434, 472, 4985, 291, 3928, 281, 362, 733, 295, 13366, 16340], "temperature": 0.0, "avg_logprob": -0.1171994295987216, "compression_ratio": 1.8387096774193548, "no_speech_prob": 3.4627857530722395e-05}, {"id": 117, "seek": 85056, "start": 858.3199999999999, "end": 864.3199999999999, "text": " about who's owning what parts of the code. You're more kind of unified in what your developer", "tokens": [466, 567, 311, 29820, 437, 3166, 295, 264, 3089, 13, 509, 434, 544, 733, 295, 26787, 294, 437, 428, 10754], "temperature": 0.0, "avg_logprob": -0.1171994295987216, "compression_ratio": 1.8387096774193548, "no_speech_prob": 3.4627857530722395e-05}, {"id": 118, "seek": 85056, "start": 864.3199999999999, "end": 870.0, "text": " setup looks like. And you're more likely to be in a situation where you're kind of sharing", "tokens": [8657, 1542, 411, 13, 400, 291, 434, 544, 3700, 281, 312, 294, 257, 2590, 689, 291, 434, 733, 295, 5414], "temperature": 0.0, "avg_logprob": -0.1171994295987216, "compression_ratio": 1.8387096774193548, "no_speech_prob": 3.4627857530722395e-05}, {"id": 119, "seek": 85056, "start": 870.0, "end": 875.3599999999999, "text": " a higher percentage of things and just kind of wrapping a thing UI around it. And you're", "tokens": [257, 2946, 9668, 295, 721, 293, 445, 733, 295, 21993, 257, 551, 15682, 926, 309, 13, 400, 291, 434], "temperature": 0.0, "avg_logprob": -0.1171994295987216, "compression_ratio": 1.8387096774193548, "no_speech_prob": 3.4627857530722395e-05}, {"id": 120, "seek": 85056, "start": 875.3599999999999, "end": 879.76, "text": " more likely to be doing all of your feature development kind of at once for both platforms.", "tokens": [544, 3700, 281, 312, 884, 439, 295, 428, 4111, 3250, 733, 295, 412, 1564, 337, 1293, 9473, 13], "temperature": 0.0, "avg_logprob": -0.1171994295987216, "compression_ratio": 1.8387096774193548, "no_speech_prob": 3.4627857530722395e-05}, {"id": 121, "seek": 87976, "start": 879.76, "end": 887.68, "text": " On the other hand, when teams get larger, things get a little bit messier. You're more", "tokens": [1282, 264, 661, 1011, 11, 562, 5491, 483, 4833, 11, 721, 483, 257, 707, 857, 2082, 811, 13, 509, 434, 544], "temperature": 0.0, "avg_logprob": -0.14283635881212023, "compression_ratio": 1.560693641618497, "no_speech_prob": 3.366936289239675e-05}, {"id": 122, "seek": 87976, "start": 887.68, "end": 893.92, "text": " likely to have iOS specialists who don't want to kind of deal with the Kotlin directly.", "tokens": [3700, 281, 362, 17430, 25476, 567, 500, 380, 528, 281, 733, 295, 2028, 365, 264, 30123, 5045, 3838, 13], "temperature": 0.0, "avg_logprob": -0.14283635881212023, "compression_ratio": 1.560693641618497, "no_speech_prob": 3.366936289239675e-05}, {"id": 123, "seek": 87976, "start": 896.4, "end": 903.12, "text": " And your Kotlin code, you're more likely to have a larger iOS app than just what the Kotlin is.", "tokens": [400, 428, 30123, 5045, 3089, 11, 291, 434, 544, 3700, 281, 362, 257, 4833, 17430, 724, 813, 445, 437, 264, 30123, 5045, 307, 13], "temperature": 0.0, "avg_logprob": -0.14283635881212023, "compression_ratio": 1.560693641618497, "no_speech_prob": 3.366936289239675e-05}, {"id": 124, "seek": 90312, "start": 903.12, "end": 910.0, "text": " And so you might, like your Kotlin is just kind of one more thing in a sea of other native libraries", "tokens": [400, 370, 291, 1062, 11, 411, 428, 30123, 5045, 307, 445, 733, 295, 472, 544, 551, 294, 257, 4158, 295, 661, 8470, 15148], "temperature": 0.0, "avg_logprob": -0.11841777906025926, "compression_ratio": 1.5988700564971752, "no_speech_prob": 9.348329513159115e-06}, {"id": 125, "seek": 90312, "start": 910.0, "end": 916.88, "text": " that your iOS app is using. And you tend to want to minimize the impact of your Kotlin", "tokens": [300, 428, 17430, 724, 307, 1228, 13, 400, 291, 3928, 281, 528, 281, 17522, 264, 2712, 295, 428, 30123, 5045], "temperature": 0.0, "avg_logprob": -0.11841777906025926, "compression_ratio": 1.5988700564971752, "no_speech_prob": 9.348329513159115e-06}, {"id": 126, "seek": 90312, "start": 917.92, "end": 926.0, "text": " on the rest of the iOS code. And what the topic means in practice is you want to kind of rather", "tokens": [322, 264, 1472, 295, 264, 17430, 3089, 13, 400, 437, 264, 4829, 1355, 294, 3124, 307, 291, 528, 281, 733, 295, 2831], "temperature": 0.0, "avg_logprob": -0.11841777906025926, "compression_ratio": 1.5988700564971752, "no_speech_prob": 9.348329513159115e-06}, {"id": 127, "seek": 92600, "start": 926.0, "end": 937.52, "text": " than linking your XO build to your Kotlin directly, you want to kind of publish it as an external", "tokens": [813, 25775, 428, 1783, 46, 1322, 281, 428, 30123, 5045, 3838, 11, 291, 528, 281, 733, 295, 11374, 309, 382, 364, 8320], "temperature": 0.0, "avg_logprob": -0.14950052429648006, "compression_ratio": 1.5277777777777777, "no_speech_prob": 2.4800756364129484e-06}, {"id": 128, "seek": 92600, "start": 937.52, "end": 945.28, "text": " library. And so the diagram that's why I showed you that kind of diagram on the left earlier,", "tokens": [6405, 13, 400, 370, 264, 10686, 300, 311, 983, 286, 4712, 291, 300, 733, 295, 10686, 322, 264, 1411, 3071, 11], "temperature": 0.0, "avg_logprob": -0.14950052429648006, "compression_ratio": 1.5277777777777777, "no_speech_prob": 2.4800756364129484e-06}, {"id": 129, "seek": 92600, "start": 946.08, "end": 950.16, "text": " the way it can look like in a larger team is rather than directly consuming things,", "tokens": [264, 636, 309, 393, 574, 411, 294, 257, 4833, 1469, 307, 2831, 813, 3838, 19867, 721, 11], "temperature": 0.0, "avg_logprob": -0.14950052429648006, "compression_ratio": 1.5277777777777777, "no_speech_prob": 2.4800756364129484e-06}, {"id": 130, "seek": 95016, "start": 950.16, "end": 957.36, "text": " your shared code is being published to some sort of artifact repository, and then your apps are", "tokens": [428, 5507, 3089, 307, 885, 6572, 281, 512, 1333, 295, 34806, 25841, 11, 293, 550, 428, 7733, 366], "temperature": 0.0, "avg_logprob": -0.18020713192293014, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.136595685442444e-05}, {"id": 131, "seek": 95016, "start": 957.36, "end": 961.76, "text": " pulling that artifact down. And there's kind of more of a two-step process to making updates,", "tokens": [8407, 300, 34806, 760, 13, 400, 456, 311, 733, 295, 544, 295, 257, 732, 12, 16792, 1399, 281, 1455, 9205, 11], "temperature": 0.0, "avg_logprob": -0.18020713192293014, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.136595685442444e-05}, {"id": 132, "seek": 95016, "start": 962.9599999999999, "end": 965.76, "text": " but it lets you kind of work in separate streams more easily.", "tokens": [457, 309, 6653, 291, 733, 295, 589, 294, 4994, 15842, 544, 3612, 13], "temperature": 0.0, "avg_logprob": -0.18020713192293014, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.136595685442444e-05}, {"id": 133, "seek": 95016, "start": 970.56, "end": 979.76, "text": " And we put out a tool to help with this in the fall. We touch lab. It's called KMM bridge,", "tokens": [400, 321, 829, 484, 257, 2290, 281, 854, 365, 341, 294, 264, 2100, 13, 492, 2557, 2715, 13, 467, 311, 1219, 591, 17365, 7283, 11], "temperature": 0.0, "avg_logprob": -0.18020713192293014, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.136595685442444e-05}, {"id": 134, "seek": 97976, "start": 979.76, "end": 986.72, "text": " and it's a Gradle plugin that can essentially manage the publishing of your iOS framework", "tokens": [293, 309, 311, 257, 16710, 306, 23407, 300, 393, 4476, 3067, 264, 17832, 295, 428, 17430, 8388], "temperature": 0.0, "avg_logprob": -0.11788436344691686, "compression_ratio": 1.6840148698884758, "no_speech_prob": 1.0773757821880281e-05}, {"id": 135, "seek": 97976, "start": 986.72, "end": 990.88, "text": " in a couple different ways. So it gives you a Gradle task to publish a new version when you've", "tokens": [294, 257, 1916, 819, 2098, 13, 407, 309, 2709, 291, 257, 16710, 306, 5633, 281, 11374, 257, 777, 3037, 562, 291, 600], "temperature": 0.0, "avg_logprob": -0.11788436344691686, "compression_ratio": 1.6840148698884758, "no_speech_prob": 1.0773757821880281e-05}, {"id": 136, "seek": 97976, "start": 990.88, "end": 995.6, "text": " made changes. It has options around how you implement that version and things like that,", "tokens": [1027, 2962, 13, 467, 575, 3956, 926, 577, 291, 4445, 300, 3037, 293, 721, 411, 300, 11], "temperature": 0.0, "avg_logprob": -0.11788436344691686, "compression_ratio": 1.6840148698884758, "no_speech_prob": 1.0773757821880281e-05}, {"id": 137, "seek": 97976, "start": 996.24, "end": 999.6, "text": " options for where you want to host that binary and the ability to plug in your own.", "tokens": [3956, 337, 689, 291, 528, 281, 3975, 300, 17434, 293, 264, 3485, 281, 5452, 294, 428, 1065, 13], "temperature": 0.0, "avg_logprob": -0.11788436344691686, "compression_ratio": 1.6840148698884758, "no_speech_prob": 1.0773757821880281e-05}, {"id": 138, "seek": 97976, "start": 1001.92, "end": 1008.3199999999999, "text": " And then some helpers, if you're using a package manager for making that local development flow", "tokens": [400, 550, 512, 854, 433, 11, 498, 291, 434, 1228, 257, 7372, 6598, 337, 1455, 300, 2654, 3250, 3095], "temperature": 0.0, "avg_logprob": -0.11788436344691686, "compression_ratio": 1.6840148698884758, "no_speech_prob": 1.0773757821880281e-05}, {"id": 139, "seek": 100832, "start": 1008.32, "end": 1016.48, "text": " a little bit easier. So sometimes you want to be able to toggle between using the binary", "tokens": [257, 707, 857, 3571, 13, 407, 2171, 291, 528, 281, 312, 1075, 281, 31225, 1296, 1228, 264, 17434], "temperature": 0.0, "avg_logprob": -0.0845590697394477, "compression_ratio": 1.7063492063492063, "no_speech_prob": 1.2785521903424524e-05}, {"id": 140, "seek": 100832, "start": 1016.48, "end": 1021.2, "text": " that you pulled down versus building it directly when you're trying to write new code or debug it.", "tokens": [300, 291, 7373, 760, 5717, 2390, 309, 3838, 562, 291, 434, 1382, 281, 2464, 777, 3089, 420, 24083, 309, 13], "temperature": 0.0, "avg_logprob": -0.0845590697394477, "compression_ratio": 1.7063492063492063, "no_speech_prob": 1.2785521903424524e-05}, {"id": 141, "seek": 100832, "start": 1022.96, "end": 1027.2, "text": " So we have some helpers to make that flow a little bit easier. There's a bunch of little", "tokens": [407, 321, 362, 512, 854, 433, 281, 652, 300, 3095, 257, 707, 857, 3571, 13, 821, 311, 257, 3840, 295, 707], "temperature": 0.0, "avg_logprob": -0.0845590697394477, "compression_ratio": 1.7063492063492063, "no_speech_prob": 1.2785521903424524e-05}, {"id": 142, "seek": 100832, "start": 1027.2, "end": 1031.28, "text": " things that are still kind of a work in progress on here. If you're a team that's", "tokens": [721, 300, 366, 920, 733, 295, 257, 589, 294, 4205, 322, 510, 13, 759, 291, 434, 257, 1469, 300, 311], "temperature": 0.0, "avg_logprob": -0.0845590697394477, "compression_ratio": 1.7063492063492063, "no_speech_prob": 1.2785521903424524e-05}, {"id": 143, "seek": 100832, "start": 1032.64, "end": 1035.6000000000001, "text": " interested in using it, we'd love to talk to you and get some feedback.", "tokens": [3102, 294, 1228, 309, 11, 321, 1116, 959, 281, 751, 281, 291, 293, 483, 512, 5824, 13], "temperature": 0.0, "avg_logprob": -0.0845590697394477, "compression_ratio": 1.7063492063492063, "no_speech_prob": 1.2785521903424524e-05}, {"id": 144, "seek": 103560, "start": 1035.6, "end": 1040.08, "text": " So feel free to find me and let me know if you want to learn more about that.", "tokens": [407, 841, 1737, 281, 915, 385, 293, 718, 385, 458, 498, 291, 528, 281, 1466, 544, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.12620115792879494, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.5664130842196755e-05}, {"id": 145, "seek": 103560, "start": 1042.6399999999999, "end": 1049.52, "text": " Another problem that comes up at scale is modularization. So when you write a hello world,", "tokens": [3996, 1154, 300, 1487, 493, 412, 4373, 307, 31111, 2144, 13, 407, 562, 291, 2464, 257, 7751, 1002, 11], "temperature": 0.0, "avg_logprob": -0.12620115792879494, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.5664130842196755e-05}, {"id": 146, "seek": 103560, "start": 1049.52, "end": 1054.3999999999999, "text": " it tends to be one module. But when you're writing bigger things, you might want to have more than", "tokens": [309, 12258, 281, 312, 472, 10088, 13, 583, 562, 291, 434, 3579, 3801, 721, 11, 291, 1062, 528, 281, 362, 544, 813], "temperature": 0.0, "avg_logprob": -0.12620115792879494, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.5664130842196755e-05}, {"id": 147, "seek": 103560, "start": 1054.3999999999999, "end": 1060.48, "text": " one. And Kotlin native, it turns out, makes us a little bit complicated. So when you have multiple", "tokens": [472, 13, 400, 30123, 5045, 8470, 11, 309, 4523, 484, 11, 1669, 505, 257, 707, 857, 6179, 13, 407, 562, 291, 362, 3866], "temperature": 0.0, "avg_logprob": -0.12620115792879494, "compression_ratio": 1.6266666666666667, "no_speech_prob": 1.5664130842196755e-05}, {"id": 148, "seek": 106048, "start": 1060.48, "end": 1068.72, "text": " Kotlin native modules and you export them to iOS, they're essentially their own kind of", "tokens": [30123, 5045, 8470, 16679, 293, 291, 10725, 552, 281, 17430, 11, 436, 434, 4476, 641, 1065, 733, 295], "temperature": 0.0, "avg_logprob": -0.085215239297776, "compression_ratio": 1.7242990654205608, "no_speech_prob": 3.520843529258855e-05}, {"id": 149, "seek": 106048, "start": 1068.72, "end": 1074.56, "text": " separate worlds. And so each of these modules has its own copy of any internal dependencies,", "tokens": [4994, 13401, 13, 400, 370, 1184, 295, 613, 16679, 575, 1080, 1065, 5055, 295, 604, 6920, 36606, 11], "temperature": 0.0, "avg_logprob": -0.085215239297776, "compression_ratio": 1.7242990654205608, "no_speech_prob": 3.520843529258855e-05}, {"id": 150, "seek": 106048, "start": 1074.56, "end": 1078.96, "text": " their own copy of the standard library, their own copy of any third module that you might have", "tokens": [641, 1065, 5055, 295, 264, 3832, 6405, 11, 641, 1065, 5055, 295, 604, 2636, 10088, 300, 291, 1062, 362], "temperature": 0.0, "avg_logprob": -0.085215239297776, "compression_ratio": 1.7242990654205608, "no_speech_prob": 3.520843529258855e-05}, {"id": 151, "seek": 106048, "start": 1078.96, "end": 1082.32, "text": " underneath them that you're trying to share between them. And they can't kind of talk between", "tokens": [7223, 552, 300, 291, 434, 1382, 281, 2073, 1296, 552, 13, 400, 436, 393, 380, 733, 295, 751, 1296], "temperature": 0.0, "avg_logprob": -0.085215239297776, "compression_ratio": 1.7242990654205608, "no_speech_prob": 3.520843529258855e-05}, {"id": 152, "seek": 108232, "start": 1082.32, "end": 1090.8799999999999, "text": " each other very easily. And this can be okay if they're doing very distinct things. So maybe one", "tokens": [1184, 661, 588, 3612, 13, 400, 341, 393, 312, 1392, 498, 436, 434, 884, 588, 10644, 721, 13, 407, 1310, 472], "temperature": 0.0, "avg_logprob": -0.10060560956914374, "compression_ratio": 1.6939655172413792, "no_speech_prob": 1.8018263290286995e-05}, {"id": 153, "seek": 108232, "start": 1090.8799999999999, "end": 1096.1599999999999, "text": " of them is making analyst calls and one of them is running your database and they don't really need", "tokens": [295, 552, 307, 1455, 19085, 5498, 293, 472, 295, 552, 307, 2614, 428, 8149, 293, 436, 500, 380, 534, 643], "temperature": 0.0, "avg_logprob": -0.10060560956914374, "compression_ratio": 1.6939655172413792, "no_speech_prob": 1.8018263290286995e-05}, {"id": 154, "seek": 108232, "start": 1096.1599999999999, "end": 1104.32, "text": " to interact with each other. And then having them separate can be okay. But often you end up wanting", "tokens": [281, 4648, 365, 1184, 661, 13, 400, 550, 1419, 552, 4994, 393, 312, 1392, 13, 583, 2049, 291, 917, 493, 7935], "temperature": 0.0, "avg_logprob": -0.10060560956914374, "compression_ratio": 1.6939655172413792, "no_speech_prob": 1.8018263290286995e-05}, {"id": 155, "seek": 108232, "start": 1104.32, "end": 1110.72, "text": " to kind of write this umbrella module on top of them so that in your Kotlin layer, you can have", "tokens": [281, 733, 295, 2464, 341, 21925, 10088, 322, 1192, 295, 552, 370, 300, 294, 428, 30123, 5045, 4583, 11, 291, 393, 362], "temperature": 0.0, "avg_logprob": -0.10060560956914374, "compression_ratio": 1.6939655172413792, "no_speech_prob": 1.8018263290286995e-05}, {"id": 156, "seek": 111072, "start": 1110.72, "end": 1115.6000000000001, "text": " them talk to each other more easily. And then you have sort of a shared module on top that you", "tokens": [552, 751, 281, 1184, 661, 544, 3612, 13, 400, 550, 291, 362, 1333, 295, 257, 5507, 10088, 322, 1192, 300, 291], "temperature": 0.0, "avg_logprob": -0.12172257350041316, "compression_ratio": 1.5240641711229947, "no_speech_prob": 2.9268139769556e-05}, {"id": 157, "seek": 111072, "start": 1115.6000000000001, "end": 1126.72, "text": " export as your iOS framework. And that lets you more easily have that more typical kind of modular", "tokens": [10725, 382, 428, 17430, 8388, 13, 400, 300, 6653, 291, 544, 3612, 362, 300, 544, 7476, 733, 295, 31111], "temperature": 0.0, "avg_logprob": -0.12172257350041316, "compression_ratio": 1.5240641711229947, "no_speech_prob": 2.9268139769556e-05}, {"id": 158, "seek": 111072, "start": 1126.72, "end": 1133.6000000000001, "text": " structure while working with the Kotlin native limitations. There's still some messiness to", "tokens": [3877, 1339, 1364, 365, 264, 30123, 5045, 8470, 15705, 13, 821, 311, 920, 512, 2082, 1324, 281], "temperature": 0.0, "avg_logprob": -0.12172257350041316, "compression_ratio": 1.5240641711229947, "no_speech_prob": 2.9268139769556e-05}, {"id": 159, "seek": 113360, "start": 1133.6, "end": 1141.9199999999998, "text": " this because your umbrella framework will have, you and I have kind of namespace clashes where", "tokens": [341, 570, 428, 21925, 8388, 486, 362, 11, 291, 293, 286, 362, 733, 295, 5288, 17940, 596, 12808, 689], "temperature": 0.0, "avg_logprob": -0.25108978152275085, "compression_ratio": 1.5027624309392265, "no_speech_prob": 1.5670952052460052e-05}, {"id": 160, "seek": 113360, "start": 1141.9199999999998, "end": 1146.8799999999999, "text": " all of your declarations in here are essentially in one giant global namespace.", "tokens": [439, 295, 428, 16694, 763, 294, 510, 366, 4476, 294, 472, 7410, 4338, 5288, 17940, 13], "temperature": 0.0, "avg_logprob": -0.25108978152275085, "compression_ratio": 1.5027624309392265, "no_speech_prob": 1.5670952052460052e-05}, {"id": 161, "seek": 113360, "start": 1148.32, "end": 1154.6399999999999, "text": " And there's romantic that will improve this. But right now it can be a little messy when you have", "tokens": [400, 456, 311, 13590, 300, 486, 3470, 341, 13, 583, 558, 586, 309, 393, 312, 257, 707, 16191, 562, 291, 362], "temperature": 0.0, "avg_logprob": -0.25108978152275085, "compression_ratio": 1.5027624309392265, "no_speech_prob": 1.5670952052460052e-05}, {"id": 162, "seek": 115464, "start": 1154.64, "end": 1167.92, "text": " a lot of code in there. Another thing that comes up in real-world projects is your binary size.", "tokens": [257, 688, 295, 3089, 294, 456, 13, 3996, 551, 300, 1487, 493, 294, 957, 12, 13217, 4455, 307, 428, 17434, 2744, 13], "temperature": 0.0, "avg_logprob": -0.1227334773901737, "compression_ratio": 1.5555555555555556, "no_speech_prob": 1.297582366532879e-05}, {"id": 163, "seek": 115464, "start": 1169.0400000000002, "end": 1174.3200000000002, "text": " So hello world tends to be small, real apps tend to be larger. And real apps have consequences", "tokens": [407, 7751, 1002, 12258, 281, 312, 1359, 11, 957, 7733, 3928, 281, 312, 4833, 13, 400, 957, 7733, 362, 10098], "temperature": 0.0, "avg_logprob": -0.1227334773901737, "compression_ratio": 1.5555555555555556, "no_speech_prob": 1.297582366532879e-05}, {"id": 164, "seek": 115464, "start": 1174.3200000000002, "end": 1181.8400000000001, "text": " when things are too large. Where things like the app store will throttle your downloading", "tokens": [562, 721, 366, 886, 2416, 13, 2305, 721, 411, 264, 724, 3531, 486, 24235, 428, 32529], "temperature": 0.0, "avg_logprob": -0.1227334773901737, "compression_ratio": 1.5555555555555556, "no_speech_prob": 1.297582366532879e-05}, {"id": 165, "seek": 118184, "start": 1181.84, "end": 1185.52, "text": " or force you to do it on Wi-Fi rather than on mobile if your app gets too big. And this", "tokens": [420, 3464, 291, 281, 360, 309, 322, 14035, 12, 13229, 2831, 813, 322, 6013, 498, 428, 724, 2170, 886, 955, 13, 400, 341], "temperature": 0.0, "avg_logprob": -0.12601757049560547, "compression_ratio": 1.6071428571428572, "no_speech_prob": 2.2404658011510037e-05}, {"id": 166, "seek": 118184, "start": 1185.52, "end": 1192.48, "text": " can be a significant impact to the amount of downloads that you get. And it turns out", "tokens": [393, 312, 257, 4776, 2712, 281, 264, 2372, 295, 36553, 300, 291, 483, 13, 400, 309, 4523, 484], "temperature": 0.0, "avg_logprob": -0.12601757049560547, "compression_ratio": 1.6071428571428572, "no_speech_prob": 2.2404658011510037e-05}, {"id": 167, "seek": 118184, "start": 1193.36, "end": 1198.8, "text": " one of the biggest contributors to this is the Object2C interface that Kotlin native uses", "tokens": [472, 295, 264, 3880, 45627, 281, 341, 307, 264, 24753, 17, 34, 9226, 300, 30123, 5045, 8470, 4960], "temperature": 0.0, "avg_logprob": -0.12601757049560547, "compression_ratio": 1.6071428571428572, "no_speech_prob": 2.2404658011510037e-05}, {"id": 168, "seek": 118184, "start": 1199.6, "end": 1208.32, "text": " to export your code to iOS. And the kind of trick to use here is you want to limit the amount of", "tokens": [281, 10725, 428, 3089, 281, 17430, 13, 400, 264, 733, 295, 4282, 281, 764, 510, 307, 291, 528, 281, 4948, 264, 2372, 295], "temperature": 0.0, "avg_logprob": -0.12601757049560547, "compression_ratio": 1.6071428571428572, "no_speech_prob": 2.2404658011510037e-05}, {"id": 169, "seek": 120832, "start": 1208.32, "end": 1215.4399999999998, "text": " public decorations that you have in your Kotlin code. And that will shrink that Object2C interface", "tokens": [1908, 32367, 300, 291, 362, 294, 428, 30123, 5045, 3089, 13, 400, 300, 486, 23060, 300, 24753, 17, 34, 9226], "temperature": 0.0, "avg_logprob": -0.1719257170895496, "compression_ratio": 1.6008583690987124, "no_speech_prob": 5.462410263135098e-05}, {"id": 170, "seek": 120832, "start": 1215.4399999999998, "end": 1220.96, "text": " because it only needs to be generated for public decorations. And that hitter from Object2C", "tokens": [570, 309, 787, 2203, 281, 312, 10833, 337, 1908, 32367, 13, 400, 300, 2045, 391, 490, 24753, 17, 34], "temperature": 0.0, "avg_logprob": -0.1719257170895496, "compression_ratio": 1.6008583690987124, "no_speech_prob": 5.462410263135098e-05}, {"id": 171, "seek": 120832, "start": 1221.9199999999998, "end": 1228.08, "text": " annotation that Marco mentioned earlier can also be a way to do that. Or there's kind of", "tokens": [48654, 300, 26535, 2835, 3071, 393, 611, 312, 257, 636, 281, 360, 300, 13, 1610, 456, 311, 733, 295], "temperature": 0.0, "avg_logprob": -0.1719257170895496, "compression_ratio": 1.6008583690987124, "no_speech_prob": 5.462410263135098e-05}, {"id": 172, "seek": 122808, "start": 1228.08, "end": 1239.1999999999998, "text": " different monitoring structures you can sometimes use. So I'll mention quickly a couple other tools", "tokens": [819, 11028, 9227, 291, 393, 2171, 764, 13, 407, 286, 603, 2152, 2661, 257, 1916, 661, 3873], "temperature": 0.0, "avg_logprob": -0.2239534378051758, "compression_ratio": 1.52863436123348, "no_speech_prob": 1.6908403267734684e-05}, {"id": 173, "seek": 122808, "start": 1239.1999999999998, "end": 1244.56, "text": " that Tesla puts out that can be helpful when you're running loads of apps. So by default,", "tokens": [300, 13666, 8137, 484, 300, 393, 312, 4961, 562, 291, 434, 2614, 12668, 295, 7733, 13, 407, 538, 7576, 11], "temperature": 0.0, "avg_logprob": -0.2239534378051758, "compression_ratio": 1.52863436123348, "no_speech_prob": 1.6908403267734684e-05}, {"id": 174, "seek": 122808, "start": 1244.56, "end": 1252.32, "text": " the crash reporting that you get out of Kotlin native doesn't kind of export to Swift very well.", "tokens": [264, 8252, 10031, 300, 291, 483, 484, 295, 30123, 5045, 8470, 1177, 380, 733, 295, 10725, 281, 25539, 588, 731, 13], "temperature": 0.0, "avg_logprob": -0.2239534378051758, "compression_ratio": 1.52863436123348, "no_speech_prob": 1.6908403267734684e-05}, {"id": 175, "seek": 122808, "start": 1252.32, "end": 1255.6, "text": " So we have this tool called Crash Kios that will essentially", "tokens": [407, 321, 362, 341, 2290, 1219, 31787, 591, 2717, 300, 486, 4476], "temperature": 0.0, "avg_logprob": -0.2239534378051758, "compression_ratio": 1.52863436123348, "no_speech_prob": 1.6908403267734684e-05}, {"id": 176, "seek": 125560, "start": 1255.6, "end": 1263.1999999999998, "text": " symbolicate your stack traces better. We have some updates to that in-flight that will kind of", "tokens": [5986, 8700, 428, 8630, 26076, 1101, 13, 492, 362, 512, 9205, 281, 300, 294, 12, 43636, 300, 486, 733, 295], "temperature": 0.0, "avg_logprob": -0.12304473430552382, "compression_ratio": 1.5815899581589958, "no_speech_prob": 4.1915704059647396e-05}, {"id": 177, "seek": 125560, "start": 1263.1999999999998, "end": 1266.56, "text": " clean up different pieces of that story, but I'm not going to go into detail there because I'm", "tokens": [2541, 493, 819, 3755, 295, 300, 1657, 11, 457, 286, 478, 406, 516, 281, 352, 666, 2607, 456, 570, 286, 478], "temperature": 0.0, "avg_logprob": -0.12304473430552382, "compression_ratio": 1.5815899581589958, "no_speech_prob": 4.1915704059647396e-05}, {"id": 178, "seek": 125560, "start": 1266.56, "end": 1274.3999999999999, "text": " getting kind of low on time. And we also have a Xcode debugger that lets you debug your Kotlin", "tokens": [1242, 733, 295, 2295, 322, 565, 13, 400, 321, 611, 362, 257, 1783, 22332, 24083, 1321, 300, 6653, 291, 24083, 428, 30123, 5045], "temperature": 0.0, "avg_logprob": -0.12304473430552382, "compression_ratio": 1.5815899581589958, "no_speech_prob": 4.1915704059647396e-05}, {"id": 179, "seek": 125560, "start": 1274.3999999999999, "end": 1279.84, "text": " code from Xcode, which can be a nicer environment for your iOS developers when you're kind of", "tokens": [3089, 490, 1783, 22332, 11, 597, 393, 312, 257, 22842, 2823, 337, 428, 17430, 8849, 562, 291, 434, 733, 295], "temperature": 0.0, "avg_logprob": -0.12304473430552382, "compression_ratio": 1.5815899581589958, "no_speech_prob": 4.1915704059647396e-05}, {"id": 180, "seek": 127984, "start": 1279.84, "end": 1288.8799999999999, "text": " introducing that. That recently to be a CLI-based interface, which makes it much easier to update", "tokens": [15424, 300, 13, 663, 3938, 281, 312, 257, 12855, 40, 12, 6032, 9226, 11, 597, 1669, 309, 709, 3571, 281, 5623], "temperature": 0.0, "avg_logprob": -0.11948582823847381, "compression_ratio": 1.417989417989418, "no_speech_prob": 9.653462257119827e-06}, {"id": 181, "seek": 127984, "start": 1288.8799999999999, "end": 1292.6399999999999, "text": " and install. So if you've tried it out in the past, feel free to give it another look.", "tokens": [293, 3625, 13, 407, 498, 291, 600, 3031, 309, 484, 294, 264, 1791, 11, 841, 1737, 281, 976, 309, 1071, 574, 13], "temperature": 0.0, "avg_logprob": -0.11948582823847381, "compression_ratio": 1.417989417989418, "no_speech_prob": 9.653462257119827e-06}, {"id": 182, "seek": 127984, "start": 1296.08, "end": 1303.52, "text": " One of the things I want to talk about is kind of the shape of your API service. So", "tokens": [1485, 295, 264, 721, 286, 528, 281, 751, 466, 307, 733, 295, 264, 3909, 295, 428, 9362, 2643, 13, 407], "temperature": 0.0, "avg_logprob": -0.11948582823847381, "compression_ratio": 1.417989417989418, "no_speech_prob": 9.653462257119827e-06}, {"id": 183, "seek": 130352, "start": 1303.52, "end": 1309.12, "text": " Hello World apps tend to be small, but as your app gets bigger, you start to care more and more", "tokens": [2425, 3937, 7733, 3928, 281, 312, 1359, 11, 457, 382, 428, 724, 2170, 3801, 11, 291, 722, 281, 1127, 544, 293, 544], "temperature": 0.0, "avg_logprob": -0.2317054789999257, "compression_ratio": 1.5570175438596492, "no_speech_prob": 4.023857400170527e-06}, {"id": 184, "seek": 130352, "start": 1309.12, "end": 1316.96, "text": " about what, sort of, how idiomatic is your API? And Swift and Kotlin tend to want to", "tokens": [466, 437, 11, 1333, 295, 11, 577, 18014, 13143, 307, 428, 9362, 30, 400, 25539, 293, 30123, 5045, 3928, 281, 528, 281], "temperature": 0.0, "avg_logprob": -0.2317054789999257, "compression_ratio": 1.5570175438596492, "no_speech_prob": 4.023857400170527e-06}, {"id": 185, "seek": 130352, "start": 1316.96, "end": 1325.36, "text": " eat different things with that. So I just want to point out, like, don't be afraid to kind of", "tokens": [1862, 819, 721, 365, 300, 13, 407, 286, 445, 528, 281, 935, 484, 11, 411, 11, 500, 380, 312, 4638, 281, 733, 295], "temperature": 0.0, "avg_logprob": -0.2317054789999257, "compression_ratio": 1.5570175438596492, "no_speech_prob": 4.023857400170527e-06}, {"id": 186, "seek": 130352, "start": 1326.08, "end": 1330.24, "text": " need a bit of translation layer between your shared code and your platform code.", "tokens": [643, 257, 857, 295, 12853, 4583, 1296, 428, 5507, 3089, 293, 428, 3663, 3089, 13], "temperature": 0.0, "avg_logprob": -0.2317054789999257, "compression_ratio": 1.5570175438596492, "no_speech_prob": 4.023857400170527e-06}, {"id": 187, "seek": 133024, "start": 1330.24, "end": 1336.16, "text": " And we have some tooling that we're working on to make some of that easier, but it's not in", "tokens": [400, 321, 362, 512, 46593, 300, 321, 434, 1364, 322, 281, 652, 512, 295, 300, 3571, 11, 457, 309, 311, 406, 294], "temperature": 0.0, "avg_logprob": -0.10543082622771567, "compression_ratio": 1.6551724137931034, "no_speech_prob": 1.1821692169178277e-05}, {"id": 188, "seek": 133024, "start": 1336.16, "end": 1342.48, "text": " the open yet, so I'm not going to go into detail there. I'll skip the example because I'm running", "tokens": [264, 1269, 1939, 11, 370, 286, 478, 406, 516, 281, 352, 666, 2607, 456, 13, 286, 603, 10023, 264, 1365, 570, 286, 478, 2614], "temperature": 0.0, "avg_logprob": -0.10543082622771567, "compression_ratio": 1.6551724137931034, "no_speech_prob": 1.1821692169178277e-05}, {"id": 189, "seek": 133024, "start": 1342.48, "end": 1351.2, "text": " out of time. But kind of the overall lesson that I want to highlight is different teams and have", "tokens": [484, 295, 565, 13, 583, 733, 295, 264, 4787, 6898, 300, 286, 528, 281, 5078, 307, 819, 5491, 293, 362], "temperature": 0.0, "avg_logprob": -0.10543082622771567, "compression_ratio": 1.6551724137931034, "no_speech_prob": 1.1821692169178277e-05}, {"id": 190, "seek": 133024, "start": 1351.2, "end": 1358.96, "text": " different structures and want slightly different things. Kotlin is all about adaptability. And so", "tokens": [819, 9227, 293, 528, 4748, 819, 721, 13, 30123, 5045, 307, 439, 466, 6231, 2310, 13, 400, 370], "temperature": 0.0, "avg_logprob": -0.10543082622771567, "compression_ratio": 1.6551724137931034, "no_speech_prob": 1.1821692169178277e-05}, {"id": 191, "seek": 135896, "start": 1358.96, "end": 1363.52, "text": " if you're a team that wants to share a lot of code, you can do that. If you're a team that", "tokens": [498, 291, 434, 257, 1469, 300, 2738, 281, 2073, 257, 688, 295, 3089, 11, 291, 393, 360, 300, 13, 759, 291, 434, 257, 1469, 300], "temperature": 0.0, "avg_logprob": -0.13663041892171907, "compression_ratio": 1.77734375, "no_speech_prob": 1.1645113772829063e-05}, {"id": 192, "seek": 135896, "start": 1363.52, "end": 1367.68, "text": " wants to minimize the impact of the Kotlin on the rest of your domain team, you can do that.", "tokens": [2738, 281, 17522, 264, 2712, 295, 264, 30123, 5045, 322, 264, 1472, 295, 428, 9274, 1469, 11, 291, 393, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.13663041892171907, "compression_ratio": 1.77734375, "no_speech_prob": 1.1645113772829063e-05}, {"id": 193, "seek": 135896, "start": 1369.68, "end": 1374.4, "text": " And you have the flexibility to kind of choose the way that you want to approach all of that.", "tokens": [400, 291, 362, 264, 12635, 281, 733, 295, 2826, 264, 636, 300, 291, 528, 281, 3109, 439, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.13663041892171907, "compression_ratio": 1.77734375, "no_speech_prob": 1.1645113772829063e-05}, {"id": 194, "seek": 135896, "start": 1376.72, "end": 1381.3600000000001, "text": " So thanks. I think I'm probably out of time for questions, but I'm definitely happy to", "tokens": [407, 3231, 13, 286, 519, 286, 478, 1391, 484, 295, 565, 337, 1651, 11, 457, 286, 478, 2138, 2055, 281], "temperature": 0.0, "avg_logprob": -0.13663041892171907, "compression_ratio": 1.77734375, "no_speech_prob": 1.1645113772829063e-05}, {"id": 195, "seek": 135896, "start": 1381.3600000000001, "end": 1385.68, "text": " answer stuff in person. Feel free to tap me on the shoulder, find me whatever later today.", "tokens": [1867, 1507, 294, 954, 13, 14113, 1737, 281, 5119, 385, 322, 264, 7948, 11, 915, 385, 2035, 1780, 965, 13], "temperature": 0.0, "avg_logprob": -0.13663041892171907, "compression_ratio": 1.77734375, "no_speech_prob": 1.1645113772829063e-05}, {"id": 196, "seek": 138568, "start": 1385.68, "end": 1391.04, "text": " If I'm sharing out my laptop, it's not important because it's Saturday, so I might love to chat.", "tokens": [759, 286, 478, 5414, 484, 452, 10732, 11, 309, 311, 406, 1021, 570, 309, 311, 8803, 11, 370, 286, 1062, 959, 281, 5081, 13], "temperature": 0.0, "avg_logprob": -0.30976633871755294, "compression_ratio": 1.118279569892473, "no_speech_prob": 6.176353781484067e-05}, {"id": 197, "seek": 139104, "start": 1391.04, "end": 1416.3999999999999, "text": " Thanks.", "tokens": [50364, 2561, 13, 51632], "temperature": 0.0, "avg_logprob": -0.6514252662658692, "compression_ratio": 0.4666666666666667, "no_speech_prob": 0.0002665319771040231}], "language": "en"}