{"text": " Right, so welcome. My name is Ramco and I'm here to talk about two very undeclarative but very minimal and hopefully useful languages. So the first one is FORTH. FORTH is a very minimal programming language that's been around since the 70s. It's had mostly applications in low-level contexts such as embedded systems, spacecraft controllers and so on, but it's had some other applications as well. Now if you look at FORTH, the most obvious thing to notice is that it's stack-based. So it uses a reverse-polish notation where you first put something on the stack and then you call a function. But other than that, it looks like a regular high-level language with syntax for constant variables for comments, syntax for function definitions, loops and conditions and so on. But actually, that's an illusion. FORTH has almost no syntax. So FORTH executes through a very simple interpreter loop. So what it does is it reads something up until the next space and then decides, is it a number? I'm going to put it on the stack. Is it something else? Then I assume it's a function which is called a word in FORTH and it's going to execute it. So symbols is just like any normal word, so it's just a function of FORTH. Same goes for the colon. Colon starts a new definition of a word. Colon, when it executes, it puts the interpreter into a special mode called compilation mode. In this compilation mode, the interpreter still advances token by token, but when it encounters a number, instead of putting it on the stack, what it does is it generates some code that will put that number on the stack later when this word is executed. Same for another symbol. Instead of calling this function, what it's going to do is it's going to compile some code that will call this function when this word is executed. Now the same goes actually another, sorry, so it's going to compile. The exception for this is that there is a thing called immediate words. Immediate words are always executed even if your interpreter is in compiler mode. An example of such an immediate word is the opening parenthesis which starts a comment. When it executes, what it will do is it will actually consume all the input. Another immediate word is the semicolon. So the semicolon is what you see when you end the definition. What this will do is it will put your interpreter back out of compilation mode into interpretation mode. Other of these immediate words are the loops and the ifs and then else, and you can actually create your own immediate words and as such, extend the compiler because these are executed at compile time. So you extend the compiler and you create your own language. So in summary, fourth is actually nothing but a very simple interpreter loop with an integrated compiler. There is no syntax almost to fourth. Just paste the limited tokens. All the behavior of the language is in the execution of these definitions and you can actually extend the compiler yourself. This combination of super simplicity and power has actually made fourth a very attractive language to implement on a new piece of hardware and a restricted piece of hardware. Typically, these fourth implementations are targeted at hardware assembly, but you can actually do this in any low-level language, which brings me to the second language of my talk, WebAssembly. So I think everybody here knows WebAssembly. It's an open standard for portable binary code. Most browsers can execute WebAssembly. Many languages can compile to WebAssembly, so the result is that you can run all these languages in a browser. Although WebAssembly was designed for the web, there's actually nothing web-specific about WebAssembly. It's just an open standard of portable code. So most of the information you find online about WebAssembly is about how you compile your favorite language to WebAssembly or how you run WebAssembly in your browser. So a few years ago, I wanted to figure out what was actually under the hood of WebAssembly. And at the same time, I came across fourth. So what I did was I combined both, hoping that I would learn something about both. So that's why I created WA fourth. WA fourth is a small fourth system. It's completely handwritten in WebAssembly, and it compiles to WebAssembly. So goals are, WebAssembly tries to, WA fourth tries to do as much as possible in WebAssembly. Now the problem is WebAssembly is a portable standard, so you cannot do everything in WebAssembly. For example, it needs to do very few things outside of WebAssembly. For example, reading or writing a character to the output or reading from the input. WA fourth tries to be simple. So it's just one big WebAssembly file handwritten. There are no dependencies, no complex tools. The compiler is very simply written. It still tries to be complete enough to be useful. There's an ANS standard that defines what the fourth interpreter needs to implement, the minimal set of words. WA fourth implements these and implements a bunch of other words as well. What isn't the goal is speed. So of course, because WA fourth is implemented in WebAssembly, you're going to get some speed for free. But still the compiler is very naive, so I don't expect it to be very fast. Same goes for binary size of the system. It's written in WebAssembly, so it's going to be naturally very small. In fact, it's about 14 kilobytes of WebAssembly, compiled binary WebAssembly. However, I'm not doing any code golfing or something like that to keep the system small because I want to keep it simple. And as most fourths are not really known to be very user friendly and WA fourth is not different, although it does emit some debugging information to make debugging easier, as you will see. So what can you do with WA fourth? Well, you can embed it in any JavaScript application, which means you can run fourth code inside your JavaScript and you get bi-directional bindings to the system and back to JavaScript. To illustrate this, I have a few example applications. So the first one is the standard fourth console that always exists where you can interactively execute fourth code and you can even interactively compile code and then run this compiled code. So it's a wrapper, actually. I also have a small graphical programming environment where you can create some graphics using a logo-like turtle graphics language, but it uses fourth. It looks a lot like logo, but it's actually fourth. And I took this a bit further and then I created a notebook extension, VS Code extension to create VS Code notebooks. So these are actually formatted markdown files interleaved with runnable code, so you can run this code. This is ideal for tutorials because you can have the code directly there, you can execute it, you can change some parameters and then see what the effect is by rerunning the program. Now because this is just WebAssembly and it's just a very small system, there's also a script that converts these notebooks into a standalone, small standalone HTML file with all the functionality, but you don't actually need VS Code anymore to run it. Now let's have a look under the hood. Like most assembly formats, WebAssembly has a text-based format, which is much easier to read than the binary format for humans. So this text-based format is based on S expression, so it looks a lot like Lisp. So this right part here is the entire fourth interpreter that I described earlier, but comes straight out of WA fourth, and it's actually quite easy to understand. So first it starts by parsing something, parsing the token and then it's going to either execute it if it's a function or it's going to compile it if you're in compiler mode, or if it's a number then it's going to put it on the stack or it's going to compile it. So this tree-like code structure is then transformed to binary WebAssembly using a tool from WebIt. WebIt is a WebAssembly binary toolkit. This is actually a toolkit with a lot of tools to work with WebAssembly files. It's a very interesting project to look at. So this is the entire interpreter. The interpreter is actually quite simple. The interesting part is the part where you have to compile something. So you have to compile a call when you're in compiler mode. So how does this work? Well somewhere in memory there is a hard-coded binary header of a WebAssembly module with one function in it. So when a new word definition starts, what happens is some values in this header are reset and the pointer is initialized to start at the end of the header. So each time the interpreter, this is the piece of the interpreter, needs to compile a call to a function, what it does is it generates some raw binary WebAssembly hexcodes and puts it at the end of the header. So for example if it needs to do a call, what it does is it generates a hexcode for a constant instruction with the index of the function to call and then an indirect call instruction. And so the compiler keeps on adding binary code to the end of this module. Now once you reach the end of the definition, this code, this binary piece of code, needs to be loaded into the system. So WebAssembly doesn't support anything for this yet. So there's no support for just in time compilation, although there are some discussions about it. So what WA4 does is it takes a pointer to this piece in memory of binary code and it passes it to the host system. So in this case it's JavaScript. And JavaScript has a small piece of code here running, what it does is it takes this binary, it uses the WebAssembly API to create a new WebAssembly module and it instantiates it. That's all JavaScript has to do. The rest is tracked by WA4, it keeps track of which module corresponds to which function that it needs to call or compile later on. So here you can see the system in action. So what's happening here is now it's you start the definition, you start by compiling something so you're still in compilation mode. And so it's only when you reach the end of the definition that suddenly you're going to see a new entry in your WebAssembly debugger with a function that has been loaded. So, and this is the generated WebAssembly code that's been generated by the compiler. You can get even more control over this compilation process by writing your own WebAssembly inside 4th. So this is actually, this is again no new syntax, this is just standard 4th with some user defined words. And there's one direct one-to-one mapping from this to this, if you can read it, but probably can't from there. Last thing I want to note about implementation detail is that most 4ths have very efficient execution by using a system they call ThreadedCode. So ThreadedCode is actually called doing jump instructions all over the place using values that come from memory or from registers. Now this is something you can do in WebAssembly. WebAssembly only allows structured jumps. So WebAssembly is actually structured programming language. What WebAssembly does have is function tables. So these are dynamic tables where you can put functions in, function references in, and then it comes with a special instruction where you can say jump to the function at this index. This is a system that WA4th uses for calling the words. Now the downside is that this is a very inefficient system compared to direct calls or jumps. So I said that speed wasn't really a goal for WA4th, but it's still interesting to get some ID of ballpark numbers of speed and size involved. So I did some very unscientific thing, and I took an algorithm, in this case the sieve algorithm to compute prime numbers. I took a fourth implementation, ported it to JavaScript CE WebAssembly, and then ran it a few times and see what the result was. Again this is not a very representative benchmark, but it's just here to get a feel for some numbers. So if you look at the execution times, WA4th is about 10 times faster than a JavaScript 4th version. This is to be expected. JavaScript 4th versions do pure interpretation, WA4th uses compilation, so there's no surprise there. But what is a bit surprising is that G4th, which is a native 4th, is not much faster than WA4th. I have no idea why this is, I'm suspicious about this result, maybe it's because I'm using an architecture that G4th isn't optimized for. JavaScript is 10 times faster than WA4th, which is also normal because WA4th needs to do these constant indirect jumps, and JavaScript doesn't have this problem. It doesn't need to do any function calling at all. And then finally, if you have the C version, and you compile it to WebAssembly using M-scripten, it's about as fast as running the raw WebAssembly, and the native version of the algorithm is slightly faster. Although you have to say the WebAssembly engine is pretty good at running this code compared to native code. So if we look at the size of the runtime and the code that is executed, the main takeaway here is that WA4th is actually a very small system, it's like about 15K, but you need a complete browser to run it, so that's of course huge to run. So the question is, can we improve this situation? So actually there are several standalone implementations of WebAssembly in different languages. For example, WebIt has a reference implementation in C++, there's WasmTime, which is security focused and speed focused in Rust, but there are several others. But these only do the WebAssembly part, so there's still this small piece of code, these small pieces that are outside of the system that you need to call out to. If you wanted to use all these engines and try this out and create a standalone version, you would need to write this little piece of code in all these languages against all these APIs. Now luckily there's something called the WebAssembly C API, and this is a standardized Blackbox API that most of these systems implement. So actually the only thing you have to do is write these, I had to do was write these 200 lines of implementation in Dependency, and then I could drop in any engine I wanted and then have a standalone version of my system. Now if we look at some, the same benchmark again, we can see that speed-wise, WebIt is about 100 times slower than the browser version, which is normal. I mean, this version in WebIt, that's a reference implementation, it's very naive, it just does what it needs to do to be functional. What is a bit weird is that WasmTime, which is supposed to be fast, is still about 10 times faster than the browser version, and there is no good reason for this. So I don't know why this is, I haven't tried other engines yet. Now if you look at size, you see that if you use a relatively optimizing system, you still have 90 megabytes, which is a lot smaller than a browser, but still if you have a system of about 15K, this is still big. Can we do something about this? Well, you need the WebAssembly runtime to be able to run your fourth code and to compile your code and load it, but typically most programs, once you did the first pass and you did all the compilation necessary, you no longer need a compiler if you want to run the program again. So you can do some out-of-time compiling, and this is where WA4C comes in. So what it does is it takes your fourth program, it uses WA4C to run your program once, and at the end of the cycle, it's going to look at all the modules that you created, it's going to combine them all, combine the final state, and then create one big WebAssembly module out of this. Now it's going to take this big module and then use another tool from Rabbit, Rabbit is really a cool toolset, it's going to use another tool from Rabbit called Wasm2C to transform this big module into C, and then it's going to use your host compiler to create a native executable. So the end result is that you have a fourth code to native compiler and your native binary is your fourth code with the rest of the fourth system still in there, but the compiler left out. And the cool thing is that because this is all platform-independent stuff up until the native compiler, you can actually do cross-compiling easily, so you can just do cross-compiling from fourth to any architecture you want. And all this code is about 500 lines and uses a lot of stuff from Rabbit actually, and Rabbit is the only dependency here. So if you look at our final table of benchmarks, we see that the speed is slightly better than Wasm, than it was before in the browser version, and the binary is becoming a lot smaller, so the entire system is only about 116K in the end of native code. Now there's still room for improvement here. So what WA4C does is it just throws together all these modules and then generates the big module. Now this big module, there are no cross-module calls anymore, so what you could do is actually do some post-processing. You could change all these indirect calls into direct calls, which could speed up a lot because the calls are really the bottleneck here. Another thing you could do is throw away code that you don't need. So in conclusions, this was a very fast talk. I could only touch upon things very briefly. What I did was I used fourth to explore low-level language implementation in WebAssembly. Because fourth is so minimal, I was able to keep things very simple, try out a lot of things, and go a lot of places. But I think a lot of the things that I've shown here are actually applicable to other languages. You could use declarative languages if you want to compare to WebAssembly. Although I have to say, if you don't know fourth yet, I can really recommend having a look at it because I find that there's some interesting philosophies and concepts behind it. Thank you. Questions? It was fast, wasn't it? Sorry about that. Sir, I have a question. We seem to be dealing in rather old languages today. Yeah, yeah, yeah. I always have been. It's at least the 60s, I think, or 50s even. Yeah, yeah. And fourth is early 70s. Yeah, yeah, yeah. WebAssembly is nowhere. Yes. WebAssembly is slightly newer. So yes, I... We'll have more from the 90s later. Okay. One question? Yeah, one thing is that there was a... Potentially, you could... I'm not sure. One potential direction. You could also consider doing the code generation in JavaScript, as in you can just create function out of binary... Out of text in JavaScript. And the same thing... I'm not sure the infrastructure how much can be shared, but the same thing could happen also in JavaScript side, as in the thing of compiling the code, the JavaScript side, and then it's... So it could get to JavaScript. So the level of performance of JavaScript. I'm not sure if it's interesting. So the question is, can I reach the same performance if you do it in JavaScript? Potentially, there is this thing passing through WebAssembly and this JS port you mentioned, but potentially it's also possible to do code generation in JavaScript. So the question is, can you do also this code generation in JavaScript? Yes, of course you can. Potentially. Potentially you can. So typically what you will see is the handy part, because I'm working in WebAssembly, is that I have all the WebAssembly low levels at my disposal. The hard part, if you go to the other languages, is that you're going to be... You need to have something to manipulate these... For example, this function table is very critical. So you need to be able to talk to that and hook into that. That's going to be the tricky part, but it's definitely possible. But it's easier if you do it directly in WebAssembly. Of course, you would never write a complex language directly in WebAssembly. That's madness. So you can do it with force, but I would not recommend it with anything. Thank you. One more question. Yes, I'm interested because you also used WebAssembly to see compiler. Yes, I used it. You had poor performance compared to C. Have you checked the regions? I didn't know. I used the WebAssembly to see compiler. The performance was quite on par with... So if I took the C algorithm, it was about... It's a bad benchmark, but the performance was about 10% slower. So it was not much slower than native binary. So it's C-compiled to native and C-compiled to WebAssembly was only a little bit slower. Of course, you are running... Okay, but you are running in WebAssembly, you are still running in virtual machine, right? So the fact that the performance is going to be maybe a little bit slower, but I thought it was still okay, given that you're still in a VM. We need to solve. That's amazing.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.76, "text": " Right, so welcome.", "tokens": [1779, 11, 370, 2928, 13], "temperature": 0.0, "avg_logprob": -0.2257561823901008, "compression_ratio": 1.4201183431952662, "no_speech_prob": 0.0184670127928257}, {"id": 1, "seek": 0, "start": 7.76, "end": 14.44, "text": " My name is Ramco and I'm here to talk about two very undeclarative but very minimal and", "tokens": [1222, 1315, 307, 9078, 1291, 293, 286, 478, 510, 281, 751, 466, 732, 588, 674, 3045, 2200, 1166, 457, 588, 13206, 293], "temperature": 0.0, "avg_logprob": -0.2257561823901008, "compression_ratio": 1.4201183431952662, "no_speech_prob": 0.0184670127928257}, {"id": 2, "seek": 0, "start": 14.44, "end": 17.32, "text": " hopefully useful languages.", "tokens": [4696, 4420, 8650, 13], "temperature": 0.0, "avg_logprob": -0.2257561823901008, "compression_ratio": 1.4201183431952662, "no_speech_prob": 0.0184670127928257}, {"id": 3, "seek": 0, "start": 17.32, "end": 18.96, "text": " So the first one is FORTH.", "tokens": [407, 264, 700, 472, 307, 15174, 9620, 13], "temperature": 0.0, "avg_logprob": -0.2257561823901008, "compression_ratio": 1.4201183431952662, "no_speech_prob": 0.0184670127928257}, {"id": 4, "seek": 0, "start": 18.96, "end": 25.04, "text": " FORTH is a very minimal programming language that's been around since the 70s.", "tokens": [15174, 9620, 307, 257, 588, 13206, 9410, 2856, 300, 311, 668, 926, 1670, 264, 5285, 82, 13], "temperature": 0.0, "avg_logprob": -0.2257561823901008, "compression_ratio": 1.4201183431952662, "no_speech_prob": 0.0184670127928257}, {"id": 5, "seek": 2504, "start": 25.04, "end": 31.08, "text": " It's had mostly applications in low-level contexts such as embedded systems, spacecraft", "tokens": [467, 311, 632, 5240, 5821, 294, 2295, 12, 12418, 30628, 1270, 382, 16741, 3652, 11, 22910], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 6, "seek": 2504, "start": 31.08, "end": 35.04, "text": " controllers and so on, but it's had some other applications as well.", "tokens": [26903, 293, 370, 322, 11, 457, 309, 311, 632, 512, 661, 5821, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 7, "seek": 2504, "start": 35.04, "end": 40.56, "text": " Now if you look at FORTH, the most obvious thing to notice is that it's stack-based.", "tokens": [823, 498, 291, 574, 412, 15174, 9620, 11, 264, 881, 6322, 551, 281, 3449, 307, 300, 309, 311, 8630, 12, 6032, 13], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 8, "seek": 2504, "start": 40.56, "end": 45.84, "text": " So it uses a reverse-polish notation where you first put something on the stack and then", "tokens": [407, 309, 4960, 257, 9943, 12, 12892, 742, 24657, 689, 291, 700, 829, 746, 322, 264, 8630, 293, 550], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 9, "seek": 2504, "start": 45.84, "end": 46.84, "text": " you call a function.", "tokens": [291, 818, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 10, "seek": 2504, "start": 46.84, "end": 53.16, "text": " But other than that, it looks like a regular high-level language with syntax for constant", "tokens": [583, 661, 813, 300, 11, 309, 1542, 411, 257, 3890, 1090, 12, 12418, 2856, 365, 28431, 337, 5754], "temperature": 0.0, "avg_logprob": -0.16926424218973982, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.298855391331017e-05}, {"id": 11, "seek": 5316, "start": 53.16, "end": 58.8, "text": " variables for comments, syntax for function definitions, loops and conditions and so on.", "tokens": [9102, 337, 3053, 11, 28431, 337, 2445, 21988, 11, 16121, 293, 4487, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 12, "seek": 5316, "start": 58.8, "end": 61.31999999999999, "text": " But actually, that's an illusion.", "tokens": [583, 767, 11, 300, 311, 364, 18854, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 13, "seek": 5316, "start": 61.31999999999999, "end": 63.64, "text": " FORTH has almost no syntax.", "tokens": [15174, 9620, 575, 1920, 572, 28431, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 14, "seek": 5316, "start": 63.64, "end": 67.0, "text": " So FORTH executes through a very simple interpreter loop.", "tokens": [407, 15174, 9620, 4454, 1819, 807, 257, 588, 2199, 34132, 6367, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 15, "seek": 5316, "start": 67.0, "end": 73.52, "text": " So what it does is it reads something up until the next space and then decides, is it a number?", "tokens": [407, 437, 309, 775, 307, 309, 15700, 746, 493, 1826, 264, 958, 1901, 293, 550, 14898, 11, 307, 309, 257, 1230, 30], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 16, "seek": 5316, "start": 73.52, "end": 75.74, "text": " I'm going to put it on the stack.", "tokens": [286, 478, 516, 281, 829, 309, 322, 264, 8630, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 17, "seek": 5316, "start": 75.74, "end": 77.16, "text": " Is it something else?", "tokens": [1119, 309, 746, 1646, 30], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 18, "seek": 5316, "start": 77.16, "end": 81.12, "text": " Then I assume it's a function which is called a word in FORTH and it's going to execute", "tokens": [1396, 286, 6552, 309, 311, 257, 2445, 597, 307, 1219, 257, 1349, 294, 15174, 9620, 293, 309, 311, 516, 281, 14483], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 19, "seek": 5316, "start": 81.12, "end": 82.44, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.14764275589609535, "compression_ratio": 1.661764705882353, "no_speech_prob": 1.3002991181565449e-05}, {"id": 20, "seek": 8244, "start": 82.44, "end": 89.12, "text": " So symbols is just like any normal word, so it's just a function of FORTH.", "tokens": [407, 16944, 307, 445, 411, 604, 2710, 1349, 11, 370, 309, 311, 445, 257, 2445, 295, 15174, 9620, 13], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 21, "seek": 8244, "start": 89.12, "end": 90.36, "text": " Same goes for the colon.", "tokens": [10635, 1709, 337, 264, 8255, 13], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 22, "seek": 8244, "start": 90.36, "end": 93.92, "text": " Colon starts a new definition of a word.", "tokens": [21408, 3719, 257, 777, 7123, 295, 257, 1349, 13], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 23, "seek": 8244, "start": 93.92, "end": 100.0, "text": " Colon, when it executes, it puts the interpreter into a special mode called compilation mode.", "tokens": [21408, 11, 562, 309, 4454, 1819, 11, 309, 8137, 264, 34132, 666, 257, 2121, 4391, 1219, 40261, 4391, 13], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 24, "seek": 8244, "start": 100.0, "end": 105.56, "text": " In this compilation mode, the interpreter still advances token by token, but when it", "tokens": [682, 341, 40261, 4391, 11, 264, 34132, 920, 25297, 14862, 538, 14862, 11, 457, 562, 309], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 25, "seek": 8244, "start": 105.56, "end": 109.47999999999999, "text": " encounters a number, instead of putting it on the stack, what it does is it generates", "tokens": [26310, 257, 1230, 11, 2602, 295, 3372, 309, 322, 264, 8630, 11, 437, 309, 775, 307, 309, 23815], "temperature": 0.0, "avg_logprob": -0.15209621958213276, "compression_ratio": 1.6598360655737705, "no_speech_prob": 8.262950359494425e-06}, {"id": 26, "seek": 10948, "start": 109.48, "end": 114.96000000000001, "text": " some code that will put that number on the stack later when this word is executed.", "tokens": [512, 3089, 300, 486, 829, 300, 1230, 322, 264, 8630, 1780, 562, 341, 1349, 307, 17577, 13], "temperature": 0.0, "avg_logprob": -0.13634375920371403, "compression_ratio": 1.7465753424657535, "no_speech_prob": 1.6700305423000827e-05}, {"id": 27, "seek": 10948, "start": 114.96000000000001, "end": 117.0, "text": " Same for another symbol.", "tokens": [10635, 337, 1071, 5986, 13], "temperature": 0.0, "avg_logprob": -0.13634375920371403, "compression_ratio": 1.7465753424657535, "no_speech_prob": 1.6700305423000827e-05}, {"id": 28, "seek": 10948, "start": 117.0, "end": 120.28, "text": " Instead of calling this function, what it's going to do is it's going to compile some", "tokens": [7156, 295, 5141, 341, 2445, 11, 437, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 31413, 512], "temperature": 0.0, "avg_logprob": -0.13634375920371403, "compression_ratio": 1.7465753424657535, "no_speech_prob": 1.6700305423000827e-05}, {"id": 29, "seek": 10948, "start": 120.28, "end": 126.32000000000001, "text": " code that will call this function when this word is executed.", "tokens": [3089, 300, 486, 818, 341, 2445, 562, 341, 1349, 307, 17577, 13], "temperature": 0.0, "avg_logprob": -0.13634375920371403, "compression_ratio": 1.7465753424657535, "no_speech_prob": 1.6700305423000827e-05}, {"id": 30, "seek": 12632, "start": 126.32, "end": 139.76, "text": " Now the same goes actually another, sorry, so it's going to compile.", "tokens": [823, 264, 912, 1709, 767, 1071, 11, 2597, 11, 370, 309, 311, 516, 281, 31413, 13], "temperature": 0.0, "avg_logprob": -0.20601113637288412, "compression_ratio": 1.5736040609137056, "no_speech_prob": 2.994318265336915e-06}, {"id": 31, "seek": 12632, "start": 139.76, "end": 145.56, "text": " The exception for this is that there is a thing called immediate words.", "tokens": [440, 11183, 337, 341, 307, 300, 456, 307, 257, 551, 1219, 11629, 2283, 13], "temperature": 0.0, "avg_logprob": -0.20601113637288412, "compression_ratio": 1.5736040609137056, "no_speech_prob": 2.994318265336915e-06}, {"id": 32, "seek": 12632, "start": 145.56, "end": 150.12, "text": " Immediate words are always executed even if your interpreter is in compiler mode.", "tokens": [32157, 473, 2283, 366, 1009, 17577, 754, 498, 428, 34132, 307, 294, 31958, 4391, 13], "temperature": 0.0, "avg_logprob": -0.20601113637288412, "compression_ratio": 1.5736040609137056, "no_speech_prob": 2.994318265336915e-06}, {"id": 33, "seek": 12632, "start": 150.12, "end": 155.88, "text": " An example of such an immediate word is the opening parenthesis which starts a comment.", "tokens": [1107, 1365, 295, 1270, 364, 11629, 1349, 307, 264, 5193, 23350, 9374, 597, 3719, 257, 2871, 13], "temperature": 0.0, "avg_logprob": -0.20601113637288412, "compression_ratio": 1.5736040609137056, "no_speech_prob": 2.994318265336915e-06}, {"id": 34, "seek": 15588, "start": 155.88, "end": 167.56, "text": " When it executes, what it will do is it will actually consume all the input.", "tokens": [1133, 309, 4454, 1819, 11, 437, 309, 486, 360, 307, 309, 486, 767, 14732, 439, 264, 4846, 13], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 35, "seek": 15588, "start": 167.56, "end": 169.76, "text": " Another immediate word is the semicolon.", "tokens": [3996, 11629, 1349, 307, 264, 27515, 38780, 13], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 36, "seek": 15588, "start": 169.76, "end": 173.0, "text": " So the semicolon is what you see when you end the definition.", "tokens": [407, 264, 27515, 38780, 307, 437, 291, 536, 562, 291, 917, 264, 7123, 13], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 37, "seek": 15588, "start": 173.0, "end": 179.28, "text": " What this will do is it will put your interpreter back out of compilation mode into interpretation", "tokens": [708, 341, 486, 360, 307, 309, 486, 829, 428, 34132, 646, 484, 295, 40261, 4391, 666, 14174], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 38, "seek": 15588, "start": 179.28, "end": 180.6, "text": " mode.", "tokens": [4391, 13], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 39, "seek": 15588, "start": 180.6, "end": 184.84, "text": " Other of these immediate words are the loops and the ifs and then else, and you can actually", "tokens": [5358, 295, 613, 11629, 2283, 366, 264, 16121, 293, 264, 498, 82, 293, 550, 1646, 11, 293, 291, 393, 767], "temperature": 0.0, "avg_logprob": -0.16514888886482484, "compression_ratio": 1.8480392156862746, "no_speech_prob": 9.21914033824578e-06}, {"id": 40, "seek": 18484, "start": 184.84, "end": 190.16, "text": " create your own immediate words and as such, extend the compiler because these are executed", "tokens": [1884, 428, 1065, 11629, 2283, 293, 382, 1270, 11, 10101, 264, 31958, 570, 613, 366, 17577], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 41, "seek": 18484, "start": 190.16, "end": 191.16, "text": " at compile time.", "tokens": [412, 31413, 565, 13], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 42, "seek": 18484, "start": 191.16, "end": 195.64000000000001, "text": " So you extend the compiler and you create your own language.", "tokens": [407, 291, 10101, 264, 31958, 293, 291, 1884, 428, 1065, 2856, 13], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 43, "seek": 18484, "start": 195.64000000000001, "end": 201.0, "text": " So in summary, fourth is actually nothing but a very simple interpreter loop with an", "tokens": [407, 294, 12691, 11, 6409, 307, 767, 1825, 457, 257, 588, 2199, 34132, 6367, 365, 364], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 44, "seek": 18484, "start": 201.0, "end": 203.84, "text": " integrated compiler.", "tokens": [10919, 31958, 13], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 45, "seek": 18484, "start": 203.84, "end": 206.32, "text": " There is no syntax almost to fourth.", "tokens": [821, 307, 572, 28431, 1920, 281, 6409, 13], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 46, "seek": 18484, "start": 206.32, "end": 208.12, "text": " Just paste the limited tokens.", "tokens": [1449, 9163, 264, 5567, 22667, 13], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 47, "seek": 18484, "start": 208.12, "end": 213.4, "text": " All the behavior of the language is in the execution of these definitions and you can", "tokens": [1057, 264, 5223, 295, 264, 2856, 307, 294, 264, 15058, 295, 613, 21988, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.13920318719112512, "compression_ratio": 1.7581967213114753, "no_speech_prob": 6.2403478295891546e-06}, {"id": 48, "seek": 21340, "start": 213.4, "end": 217.16, "text": " actually extend the compiler yourself.", "tokens": [767, 10101, 264, 31958, 1803, 13], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 49, "seek": 21340, "start": 217.16, "end": 224.24, "text": " This combination of super simplicity and power has actually made fourth a very attractive", "tokens": [639, 6562, 295, 1687, 25632, 293, 1347, 575, 767, 1027, 6409, 257, 588, 12609], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 50, "seek": 21340, "start": 224.24, "end": 229.84, "text": " language to implement on a new piece of hardware and a restricted piece of hardware.", "tokens": [2856, 281, 4445, 322, 257, 777, 2522, 295, 8837, 293, 257, 20608, 2522, 295, 8837, 13], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 51, "seek": 21340, "start": 229.84, "end": 235.0, "text": " Typically, these fourth implementations are targeted at hardware assembly, but you can", "tokens": [23129, 11, 613, 6409, 4445, 763, 366, 15045, 412, 8837, 12103, 11, 457, 291, 393], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 52, "seek": 21340, "start": 235.0, "end": 240.52, "text": " actually do this in any low-level language, which brings me to the second language of", "tokens": [767, 360, 341, 294, 604, 2295, 12, 12418, 2856, 11, 597, 5607, 385, 281, 264, 1150, 2856, 295], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 53, "seek": 21340, "start": 240.52, "end": 242.04000000000002, "text": " my talk, WebAssembly.", "tokens": [452, 751, 11, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.13080318239000108, "compression_ratio": 1.7361702127659575, "no_speech_prob": 1.4280431059887633e-05}, {"id": 54, "seek": 24204, "start": 242.04, "end": 244.79999999999998, "text": " So I think everybody here knows WebAssembly.", "tokens": [407, 286, 519, 2201, 510, 3255, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 55, "seek": 24204, "start": 244.79999999999998, "end": 248.6, "text": " It's an open standard for portable binary code.", "tokens": [467, 311, 364, 1269, 3832, 337, 21800, 17434, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 56, "seek": 24204, "start": 248.6, "end": 251.79999999999998, "text": " Most browsers can execute WebAssembly.", "tokens": [4534, 36069, 393, 14483, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 57, "seek": 24204, "start": 251.79999999999998, "end": 256.12, "text": " Many languages can compile to WebAssembly, so the result is that you can run all these", "tokens": [5126, 8650, 393, 31413, 281, 9573, 10884, 19160, 11, 370, 264, 1874, 307, 300, 291, 393, 1190, 439, 613], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 58, "seek": 24204, "start": 256.12, "end": 259.28, "text": " languages in a browser.", "tokens": [8650, 294, 257, 11185, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 59, "seek": 24204, "start": 259.28, "end": 264.32, "text": " Although WebAssembly was designed for the web, there's actually nothing web-specific", "tokens": [5780, 9573, 10884, 19160, 390, 4761, 337, 264, 3670, 11, 456, 311, 767, 1825, 3670, 12, 29258], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 60, "seek": 24204, "start": 264.32, "end": 265.32, "text": " about WebAssembly.", "tokens": [466, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 61, "seek": 24204, "start": 265.32, "end": 270.08, "text": " It's just an open standard of portable code.", "tokens": [467, 311, 445, 364, 1269, 3832, 295, 21800, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1104583740234375, "compression_ratio": 1.7455357142857142, "no_speech_prob": 4.710563189291861e-06}, {"id": 62, "seek": 27008, "start": 270.08, "end": 275.44, "text": " So most of the information you find online about WebAssembly is about how you compile", "tokens": [407, 881, 295, 264, 1589, 291, 915, 2950, 466, 9573, 10884, 19160, 307, 466, 577, 291, 31413], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 63, "seek": 27008, "start": 275.44, "end": 280.44, "text": " your favorite language to WebAssembly or how you run WebAssembly in your browser.", "tokens": [428, 2954, 2856, 281, 9573, 10884, 19160, 420, 577, 291, 1190, 9573, 10884, 19160, 294, 428, 11185, 13], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 64, "seek": 27008, "start": 280.44, "end": 285.76, "text": " So a few years ago, I wanted to figure out what was actually under the hood of WebAssembly.", "tokens": [407, 257, 1326, 924, 2057, 11, 286, 1415, 281, 2573, 484, 437, 390, 767, 833, 264, 13376, 295, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 65, "seek": 27008, "start": 285.76, "end": 288.79999999999995, "text": " And at the same time, I came across fourth.", "tokens": [400, 412, 264, 912, 565, 11, 286, 1361, 2108, 6409, 13], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 66, "seek": 27008, "start": 288.79999999999995, "end": 294.4, "text": " So what I did was I combined both, hoping that I would learn something about both.", "tokens": [407, 437, 286, 630, 390, 286, 9354, 1293, 11, 7159, 300, 286, 576, 1466, 746, 466, 1293, 13], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 67, "seek": 27008, "start": 294.4, "end": 297.24, "text": " So that's why I created WA fourth.", "tokens": [407, 300, 311, 983, 286, 2942, 26915, 6409, 13], "temperature": 0.0, "avg_logprob": -0.13019129551878764, "compression_ratio": 1.7113821138211383, "no_speech_prob": 1.6536104112674366e-06}, {"id": 68, "seek": 29724, "start": 297.24, "end": 300.88, "text": " WA fourth is a small fourth system.", "tokens": [26915, 6409, 307, 257, 1359, 6409, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11249767907775275, "compression_ratio": 1.7971014492753623, "no_speech_prob": 8.267466000688728e-06}, {"id": 69, "seek": 29724, "start": 300.88, "end": 305.42, "text": " It's completely handwritten in WebAssembly, and it compiles to WebAssembly.", "tokens": [467, 311, 2584, 1011, 26859, 294, 9573, 10884, 19160, 11, 293, 309, 715, 4680, 281, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.11249767907775275, "compression_ratio": 1.7971014492753623, "no_speech_prob": 8.267466000688728e-06}, {"id": 70, "seek": 29724, "start": 305.42, "end": 311.36, "text": " So goals are, WebAssembly tries to, WA fourth tries to do as much as possible in WebAssembly.", "tokens": [407, 5493, 366, 11, 9573, 10884, 19160, 9898, 281, 11, 26915, 6409, 9898, 281, 360, 382, 709, 382, 1944, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.11249767907775275, "compression_ratio": 1.7971014492753623, "no_speech_prob": 8.267466000688728e-06}, {"id": 71, "seek": 29724, "start": 311.36, "end": 316.96000000000004, "text": " Now the problem is WebAssembly is a portable standard, so you cannot do everything in WebAssembly.", "tokens": [823, 264, 1154, 307, 9573, 10884, 19160, 307, 257, 21800, 3832, 11, 370, 291, 2644, 360, 1203, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.11249767907775275, "compression_ratio": 1.7971014492753623, "no_speech_prob": 8.267466000688728e-06}, {"id": 72, "seek": 29724, "start": 316.96000000000004, "end": 321.64, "text": " For example, it needs to do very few things outside of WebAssembly.", "tokens": [1171, 1365, 11, 309, 2203, 281, 360, 588, 1326, 721, 2380, 295, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.11249767907775275, "compression_ratio": 1.7971014492753623, "no_speech_prob": 8.267466000688728e-06}, {"id": 73, "seek": 32164, "start": 321.64, "end": 327.47999999999996, "text": " For example, reading or writing a character to the output or reading from the input.", "tokens": [1171, 1365, 11, 3760, 420, 3579, 257, 2517, 281, 264, 5598, 420, 3760, 490, 264, 4846, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 74, "seek": 32164, "start": 327.47999999999996, "end": 330.36, "text": " WA fourth tries to be simple.", "tokens": [26915, 6409, 9898, 281, 312, 2199, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 75, "seek": 32164, "start": 330.36, "end": 333.12, "text": " So it's just one big WebAssembly file handwritten.", "tokens": [407, 309, 311, 445, 472, 955, 9573, 10884, 19160, 3991, 1011, 26859, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 76, "seek": 32164, "start": 333.12, "end": 336.91999999999996, "text": " There are no dependencies, no complex tools.", "tokens": [821, 366, 572, 36606, 11, 572, 3997, 3873, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 77, "seek": 32164, "start": 336.91999999999996, "end": 339.91999999999996, "text": " The compiler is very simply written.", "tokens": [440, 31958, 307, 588, 2935, 3720, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 78, "seek": 32164, "start": 339.91999999999996, "end": 343.8, "text": " It still tries to be complete enough to be useful.", "tokens": [467, 920, 9898, 281, 312, 3566, 1547, 281, 312, 4420, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 79, "seek": 32164, "start": 343.8, "end": 348.28, "text": " There's an ANS standard that defines what the fourth interpreter needs to implement,", "tokens": [821, 311, 364, 5252, 50, 3832, 300, 23122, 437, 264, 6409, 34132, 2203, 281, 4445, 11], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 80, "seek": 32164, "start": 348.28, "end": 350.2, "text": " the minimal set of words.", "tokens": [264, 13206, 992, 295, 2283, 13], "temperature": 0.0, "avg_logprob": -0.17258092073293832, "compression_ratio": 1.623015873015873, "no_speech_prob": 2.2957131022849353e-06}, {"id": 81, "seek": 35020, "start": 350.2, "end": 357.2, "text": " WA fourth implements these and implements a bunch of other words as well.", "tokens": [26915, 6409, 704, 17988, 613, 293, 704, 17988, 257, 3840, 295, 661, 2283, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 82, "seek": 35020, "start": 357.2, "end": 358.68, "text": " What isn't the goal is speed.", "tokens": [708, 1943, 380, 264, 3387, 307, 3073, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 83, "seek": 35020, "start": 358.68, "end": 363.52, "text": " So of course, because WA fourth is implemented in WebAssembly, you're going to get some speed", "tokens": [407, 295, 1164, 11, 570, 26915, 6409, 307, 12270, 294, 9573, 10884, 19160, 11, 291, 434, 516, 281, 483, 512, 3073], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 84, "seek": 35020, "start": 363.52, "end": 364.8, "text": " for free.", "tokens": [337, 1737, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 85, "seek": 35020, "start": 364.8, "end": 369.91999999999996, "text": " But still the compiler is very naive, so I don't expect it to be very fast.", "tokens": [583, 920, 264, 31958, 307, 588, 29052, 11, 370, 286, 500, 380, 2066, 309, 281, 312, 588, 2370, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 86, "seek": 35020, "start": 369.91999999999996, "end": 372.76, "text": " Same goes for binary size of the system.", "tokens": [10635, 1709, 337, 17434, 2744, 295, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 87, "seek": 35020, "start": 372.76, "end": 375.91999999999996, "text": " It's written in WebAssembly, so it's going to be naturally very small.", "tokens": [467, 311, 3720, 294, 9573, 10884, 19160, 11, 370, 309, 311, 516, 281, 312, 8195, 588, 1359, 13], "temperature": 0.0, "avg_logprob": -0.11310710906982421, "compression_ratio": 1.6596638655462186, "no_speech_prob": 1.5443325537489727e-05}, {"id": 88, "seek": 37592, "start": 375.92, "end": 380.92, "text": " In fact, it's about 14 kilobytes of WebAssembly, compiled binary WebAssembly.", "tokens": [682, 1186, 11, 309, 311, 466, 3499, 5128, 996, 43673, 295, 9573, 10884, 19160, 11, 36548, 17434, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 89, "seek": 37592, "start": 380.92, "end": 386.40000000000003, "text": " However, I'm not doing any code golfing or something like that to keep the system small", "tokens": [2908, 11, 286, 478, 406, 884, 604, 3089, 12880, 278, 420, 746, 411, 300, 281, 1066, 264, 1185, 1359], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 90, "seek": 37592, "start": 386.40000000000003, "end": 388.88, "text": " because I want to keep it simple.", "tokens": [570, 286, 528, 281, 1066, 309, 2199, 13], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 91, "seek": 37592, "start": 388.88, "end": 395.20000000000005, "text": " And as most fourths are not really known to be very user friendly and WA fourth is not", "tokens": [400, 382, 881, 6409, 82, 366, 406, 534, 2570, 281, 312, 588, 4195, 9208, 293, 26915, 6409, 307, 406], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 92, "seek": 37592, "start": 395.20000000000005, "end": 401.16, "text": " different, although it does emit some debugging information to make debugging easier, as you", "tokens": [819, 11, 4878, 309, 775, 32084, 512, 45592, 1589, 281, 652, 45592, 3571, 11, 382, 291], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 93, "seek": 37592, "start": 401.16, "end": 403.8, "text": " will see.", "tokens": [486, 536, 13], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 94, "seek": 37592, "start": 403.8, "end": 405.44, "text": " So what can you do with WA fourth?", "tokens": [407, 437, 393, 291, 360, 365, 26915, 6409, 30], "temperature": 0.0, "avg_logprob": -0.16695077569635064, "compression_ratio": 1.593984962406015, "no_speech_prob": 6.143408427305985e-06}, {"id": 95, "seek": 40544, "start": 405.44, "end": 410.56, "text": " Well, you can embed it in any JavaScript application, which means you can run fourth", "tokens": [1042, 11, 291, 393, 12240, 309, 294, 604, 15778, 3861, 11, 597, 1355, 291, 393, 1190, 6409], "temperature": 0.0, "avg_logprob": -0.11555054783821106, "compression_ratio": 1.819327731092437, "no_speech_prob": 1.147762577602407e-05}, {"id": 96, "seek": 40544, "start": 410.56, "end": 417.6, "text": " code inside your JavaScript and you get bi-directional bindings to the system and back to JavaScript.", "tokens": [3089, 1854, 428, 15778, 293, 291, 483, 3228, 12, 18267, 41048, 14786, 1109, 281, 264, 1185, 293, 646, 281, 15778, 13], "temperature": 0.0, "avg_logprob": -0.11555054783821106, "compression_ratio": 1.819327731092437, "no_speech_prob": 1.147762577602407e-05}, {"id": 97, "seek": 40544, "start": 417.6, "end": 421.68, "text": " To illustrate this, I have a few example applications.", "tokens": [1407, 23221, 341, 11, 286, 362, 257, 1326, 1365, 5821, 13], "temperature": 0.0, "avg_logprob": -0.11555054783821106, "compression_ratio": 1.819327731092437, "no_speech_prob": 1.147762577602407e-05}, {"id": 98, "seek": 40544, "start": 421.68, "end": 428.56, "text": " So the first one is the standard fourth console that always exists where you can interactively", "tokens": [407, 264, 700, 472, 307, 264, 3832, 6409, 11076, 300, 1009, 8198, 689, 291, 393, 4648, 3413], "temperature": 0.0, "avg_logprob": -0.11555054783821106, "compression_ratio": 1.819327731092437, "no_speech_prob": 1.147762577602407e-05}, {"id": 99, "seek": 40544, "start": 428.56, "end": 434.72, "text": " execute fourth code and you can even interactively compile code and then run this compiled code.", "tokens": [14483, 6409, 3089, 293, 291, 393, 754, 4648, 3413, 31413, 3089, 293, 550, 1190, 341, 36548, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11555054783821106, "compression_ratio": 1.819327731092437, "no_speech_prob": 1.147762577602407e-05}, {"id": 100, "seek": 43472, "start": 434.72, "end": 439.04, "text": " So it's a wrapper, actually.", "tokens": [407, 309, 311, 257, 46906, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 101, "seek": 43472, "start": 439.04, "end": 445.04, "text": " I also have a small graphical programming environment where you can create some graphics", "tokens": [286, 611, 362, 257, 1359, 35942, 9410, 2823, 689, 291, 393, 1884, 512, 11837], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 102, "seek": 43472, "start": 445.04, "end": 450.12, "text": " using a logo-like turtle graphics language, but it uses fourth.", "tokens": [1228, 257, 9699, 12, 4092, 22866, 11837, 2856, 11, 457, 309, 4960, 6409, 13], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 103, "seek": 43472, "start": 450.12, "end": 452.72, "text": " It looks a lot like logo, but it's actually fourth.", "tokens": [467, 1542, 257, 688, 411, 9699, 11, 457, 309, 311, 767, 6409, 13], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 104, "seek": 43472, "start": 452.72, "end": 459.36, "text": " And I took this a bit further and then I created a notebook extension, VS Code extension to", "tokens": [400, 286, 1890, 341, 257, 857, 3052, 293, 550, 286, 2942, 257, 21060, 10320, 11, 25091, 15549, 10320, 281], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 105, "seek": 43472, "start": 459.36, "end": 460.72, "text": " create VS Code notebooks.", "tokens": [1884, 25091, 15549, 43782, 13], "temperature": 0.0, "avg_logprob": -0.21942182518970008, "compression_ratio": 1.6794258373205742, "no_speech_prob": 5.093254912935663e-06}, {"id": 106, "seek": 46072, "start": 460.72, "end": 467.72, "text": " So these are actually formatted markdown files interleaved with runnable code, so you can", "tokens": [407, 613, 366, 767, 1254, 32509, 1491, 5093, 7098, 728, 306, 12865, 365, 1190, 77, 712, 3089, 11, 370, 291, 393], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 107, "seek": 46072, "start": 467.72, "end": 468.72, "text": " run this code.", "tokens": [1190, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 108, "seek": 46072, "start": 468.72, "end": 472.72, "text": " This is ideal for tutorials because you can have the code directly there, you can execute", "tokens": [639, 307, 7157, 337, 17616, 570, 291, 393, 362, 264, 3089, 3838, 456, 11, 291, 393, 14483], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 109, "seek": 46072, "start": 472.72, "end": 478.44000000000005, "text": " it, you can change some parameters and then see what the effect is by rerunning the program.", "tokens": [309, 11, 291, 393, 1319, 512, 9834, 293, 550, 536, 437, 264, 1802, 307, 538, 43819, 25589, 264, 1461, 13], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 110, "seek": 46072, "start": 478.44000000000005, "end": 483.96000000000004, "text": " Now because this is just WebAssembly and it's just a very small system, there's also a script", "tokens": [823, 570, 341, 307, 445, 9573, 10884, 19160, 293, 309, 311, 445, 257, 588, 1359, 1185, 11, 456, 311, 611, 257, 5755], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 111, "seek": 46072, "start": 483.96000000000004, "end": 490.20000000000005, "text": " that converts these notebooks into a standalone, small standalone HTML file with all the functionality,", "tokens": [300, 38874, 613, 43782, 666, 257, 37454, 11, 1359, 37454, 17995, 3991, 365, 439, 264, 14980, 11], "temperature": 0.0, "avg_logprob": -0.1382612891819166, "compression_ratio": 1.6898954703832754, "no_speech_prob": 7.071406344039133e-06}, {"id": 112, "seek": 49020, "start": 490.2, "end": 493.88, "text": " but you don't actually need VS Code anymore to run it.", "tokens": [457, 291, 500, 380, 767, 643, 25091, 15549, 3602, 281, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.12722193627130418, "compression_ratio": 1.532994923857868, "no_speech_prob": 1.2408144357323181e-05}, {"id": 113, "seek": 49020, "start": 493.88, "end": 499.28, "text": " Now let's have a look under the hood.", "tokens": [823, 718, 311, 362, 257, 574, 833, 264, 13376, 13], "temperature": 0.0, "avg_logprob": -0.12722193627130418, "compression_ratio": 1.532994923857868, "no_speech_prob": 1.2408144357323181e-05}, {"id": 114, "seek": 49020, "start": 499.28, "end": 505.96, "text": " Like most assembly formats, WebAssembly has a text-based format, which is much easier", "tokens": [1743, 881, 12103, 25879, 11, 9573, 10884, 19160, 575, 257, 2487, 12, 6032, 7877, 11, 597, 307, 709, 3571], "temperature": 0.0, "avg_logprob": -0.12722193627130418, "compression_ratio": 1.532994923857868, "no_speech_prob": 1.2408144357323181e-05}, {"id": 115, "seek": 49020, "start": 505.96, "end": 508.84, "text": " to read than the binary format for humans.", "tokens": [281, 1401, 813, 264, 17434, 7877, 337, 6255, 13], "temperature": 0.0, "avg_logprob": -0.12722193627130418, "compression_ratio": 1.532994923857868, "no_speech_prob": 1.2408144357323181e-05}, {"id": 116, "seek": 49020, "start": 508.84, "end": 515.64, "text": " So this text-based format is based on S expression, so it looks a lot like Lisp.", "tokens": [407, 341, 2487, 12, 6032, 7877, 307, 2361, 322, 318, 6114, 11, 370, 309, 1542, 257, 688, 411, 441, 7631, 13], "temperature": 0.0, "avg_logprob": -0.12722193627130418, "compression_ratio": 1.532994923857868, "no_speech_prob": 1.2408144357323181e-05}, {"id": 117, "seek": 51564, "start": 515.64, "end": 522.24, "text": " So this right part here is the entire fourth interpreter that I described earlier, but", "tokens": [407, 341, 558, 644, 510, 307, 264, 2302, 6409, 34132, 300, 286, 7619, 3071, 11, 457], "temperature": 0.0, "avg_logprob": -0.1316750465183083, "compression_ratio": 1.8283261802575108, "no_speech_prob": 5.337734819477191e-06}, {"id": 118, "seek": 51564, "start": 522.24, "end": 526.96, "text": " comes straight out of WA fourth, and it's actually quite easy to understand.", "tokens": [1487, 2997, 484, 295, 26915, 6409, 11, 293, 309, 311, 767, 1596, 1858, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.1316750465183083, "compression_ratio": 1.8283261802575108, "no_speech_prob": 5.337734819477191e-06}, {"id": 119, "seek": 51564, "start": 526.96, "end": 532.56, "text": " So first it starts by parsing something, parsing the token and then it's going to either execute", "tokens": [407, 700, 309, 3719, 538, 21156, 278, 746, 11, 21156, 278, 264, 14862, 293, 550, 309, 311, 516, 281, 2139, 14483], "temperature": 0.0, "avg_logprob": -0.1316750465183083, "compression_ratio": 1.8283261802575108, "no_speech_prob": 5.337734819477191e-06}, {"id": 120, "seek": 51564, "start": 532.56, "end": 537.16, "text": " it if it's a function or it's going to compile it if you're in compiler mode, or if it's", "tokens": [309, 498, 309, 311, 257, 2445, 420, 309, 311, 516, 281, 31413, 309, 498, 291, 434, 294, 31958, 4391, 11, 420, 498, 309, 311], "temperature": 0.0, "avg_logprob": -0.1316750465183083, "compression_ratio": 1.8283261802575108, "no_speech_prob": 5.337734819477191e-06}, {"id": 121, "seek": 51564, "start": 537.16, "end": 541.08, "text": " a number then it's going to put it on the stack or it's going to compile it.", "tokens": [257, 1230, 550, 309, 311, 516, 281, 829, 309, 322, 264, 8630, 420, 309, 311, 516, 281, 31413, 309, 13], "temperature": 0.0, "avg_logprob": -0.1316750465183083, "compression_ratio": 1.8283261802575108, "no_speech_prob": 5.337734819477191e-06}, {"id": 122, "seek": 54108, "start": 541.08, "end": 550.72, "text": " So this tree-like code structure is then transformed to binary WebAssembly using a tool from WebIt.", "tokens": [407, 341, 4230, 12, 4092, 3089, 3877, 307, 550, 16894, 281, 17434, 9573, 10884, 19160, 1228, 257, 2290, 490, 9573, 3522, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 123, "seek": 54108, "start": 550.72, "end": 554.5600000000001, "text": " WebIt is a WebAssembly binary toolkit.", "tokens": [9573, 3522, 307, 257, 9573, 10884, 19160, 17434, 40167, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 124, "seek": 54108, "start": 554.5600000000001, "end": 559.1600000000001, "text": " This is actually a toolkit with a lot of tools to work with WebAssembly files.", "tokens": [639, 307, 767, 257, 40167, 365, 257, 688, 295, 3873, 281, 589, 365, 9573, 10884, 19160, 7098, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 125, "seek": 54108, "start": 559.1600000000001, "end": 563.84, "text": " It's a very interesting project to look at.", "tokens": [467, 311, 257, 588, 1880, 1716, 281, 574, 412, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 126, "seek": 54108, "start": 563.84, "end": 565.96, "text": " So this is the entire interpreter.", "tokens": [407, 341, 307, 264, 2302, 34132, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 127, "seek": 54108, "start": 565.96, "end": 567.72, "text": " The interpreter is actually quite simple.", "tokens": [440, 34132, 307, 767, 1596, 2199, 13], "temperature": 0.0, "avg_logprob": -0.14630091190338135, "compression_ratio": 1.715736040609137, "no_speech_prob": 1.3081039469398092e-06}, {"id": 128, "seek": 56772, "start": 567.72, "end": 571.2, "text": " The interesting part is the part where you have to compile something.", "tokens": [440, 1880, 644, 307, 264, 644, 689, 291, 362, 281, 31413, 746, 13], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 129, "seek": 56772, "start": 571.2, "end": 573.9200000000001, "text": " So you have to compile a call when you're in compiler mode.", "tokens": [407, 291, 362, 281, 31413, 257, 818, 562, 291, 434, 294, 31958, 4391, 13], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 130, "seek": 56772, "start": 573.9200000000001, "end": 576.36, "text": " So how does this work?", "tokens": [407, 577, 775, 341, 589, 30], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 131, "seek": 56772, "start": 576.36, "end": 582.8000000000001, "text": " Well somewhere in memory there is a hard-coded binary header of a WebAssembly module with", "tokens": [1042, 4079, 294, 4675, 456, 307, 257, 1152, 12, 66, 12340, 17434, 23117, 295, 257, 9573, 10884, 19160, 10088, 365], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 132, "seek": 56772, "start": 582.8000000000001, "end": 584.5400000000001, "text": " one function in it.", "tokens": [472, 2445, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 133, "seek": 56772, "start": 584.5400000000001, "end": 590.2, "text": " So when a new word definition starts, what happens is some values in this header are reset", "tokens": [407, 562, 257, 777, 1349, 7123, 3719, 11, 437, 2314, 307, 512, 4190, 294, 341, 23117, 366, 14322], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 134, "seek": 56772, "start": 590.2, "end": 594.48, "text": " and the pointer is initialized to start at the end of the header.", "tokens": [293, 264, 23918, 307, 5883, 1602, 281, 722, 412, 264, 917, 295, 264, 23117, 13], "temperature": 0.0, "avg_logprob": -0.1211777357297523, "compression_ratio": 1.7242798353909465, "no_speech_prob": 3.2375000955653377e-06}, {"id": 135, "seek": 59448, "start": 594.48, "end": 599.24, "text": " So each time the interpreter, this is the piece of the interpreter, needs to compile", "tokens": [407, 1184, 565, 264, 34132, 11, 341, 307, 264, 2522, 295, 264, 34132, 11, 2203, 281, 31413], "temperature": 0.0, "avg_logprob": -0.09986400604248047, "compression_ratio": 1.8544600938967135, "no_speech_prob": 3.288572997917072e-06}, {"id": 136, "seek": 59448, "start": 599.24, "end": 608.24, "text": " a call to a function, what it does is it generates some raw binary WebAssembly hexcodes and puts", "tokens": [257, 818, 281, 257, 2445, 11, 437, 309, 775, 307, 309, 23815, 512, 8936, 17434, 9573, 10884, 19160, 23291, 66, 4789, 293, 8137], "temperature": 0.0, "avg_logprob": -0.09986400604248047, "compression_ratio": 1.8544600938967135, "no_speech_prob": 3.288572997917072e-06}, {"id": 137, "seek": 59448, "start": 608.24, "end": 609.36, "text": " it at the end of the header.", "tokens": [309, 412, 264, 917, 295, 264, 23117, 13], "temperature": 0.0, "avg_logprob": -0.09986400604248047, "compression_ratio": 1.8544600938967135, "no_speech_prob": 3.288572997917072e-06}, {"id": 138, "seek": 59448, "start": 609.36, "end": 615.28, "text": " So for example if it needs to do a call, what it does is it generates a hexcode for a constant", "tokens": [407, 337, 1365, 498, 309, 2203, 281, 360, 257, 818, 11, 437, 309, 775, 307, 309, 23815, 257, 23291, 22332, 337, 257, 5754], "temperature": 0.0, "avg_logprob": -0.09986400604248047, "compression_ratio": 1.8544600938967135, "no_speech_prob": 3.288572997917072e-06}, {"id": 139, "seek": 59448, "start": 615.28, "end": 621.28, "text": " instruction with the index of the function to call and then an indirect call instruction.", "tokens": [10951, 365, 264, 8186, 295, 264, 2445, 281, 818, 293, 550, 364, 19523, 818, 10951, 13], "temperature": 0.0, "avg_logprob": -0.09986400604248047, "compression_ratio": 1.8544600938967135, "no_speech_prob": 3.288572997917072e-06}, {"id": 140, "seek": 62128, "start": 621.28, "end": 626.3199999999999, "text": " And so the compiler keeps on adding binary code to the end of this module.", "tokens": [400, 370, 264, 31958, 5965, 322, 5127, 17434, 3089, 281, 264, 917, 295, 341, 10088, 13], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 141, "seek": 62128, "start": 626.3199999999999, "end": 630.92, "text": " Now once you reach the end of the definition, this code, this binary piece of code, needs", "tokens": [823, 1564, 291, 2524, 264, 917, 295, 264, 7123, 11, 341, 3089, 11, 341, 17434, 2522, 295, 3089, 11, 2203], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 142, "seek": 62128, "start": 630.92, "end": 633.1999999999999, "text": " to be loaded into the system.", "tokens": [281, 312, 13210, 666, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 143, "seek": 62128, "start": 633.1999999999999, "end": 636.24, "text": " So WebAssembly doesn't support anything for this yet.", "tokens": [407, 9573, 10884, 19160, 1177, 380, 1406, 1340, 337, 341, 1939, 13], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 144, "seek": 62128, "start": 636.24, "end": 641.04, "text": " So there's no support for just in time compilation, although there are some discussions about", "tokens": [407, 456, 311, 572, 1406, 337, 445, 294, 565, 40261, 11, 4878, 456, 366, 512, 11088, 466], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 145, "seek": 62128, "start": 641.04, "end": 643.04, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 146, "seek": 62128, "start": 643.04, "end": 647.92, "text": " So what WA4 does is it takes a pointer to this piece in memory of binary code and it", "tokens": [407, 437, 26915, 19, 775, 307, 309, 2516, 257, 23918, 281, 341, 2522, 294, 4675, 295, 17434, 3089, 293, 309], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 147, "seek": 62128, "start": 647.92, "end": 649.52, "text": " passes it to the host system.", "tokens": [11335, 309, 281, 264, 3975, 1185, 13], "temperature": 0.0, "avg_logprob": -0.13448883505428538, "compression_ratio": 1.7662835249042146, "no_speech_prob": 4.63752849100274e-06}, {"id": 148, "seek": 64952, "start": 649.52, "end": 651.76, "text": " So in this case it's JavaScript.", "tokens": [407, 294, 341, 1389, 309, 311, 15778, 13], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 149, "seek": 64952, "start": 651.76, "end": 655.88, "text": " And JavaScript has a small piece of code here running, what it does is it takes this binary,", "tokens": [400, 15778, 575, 257, 1359, 2522, 295, 3089, 510, 2614, 11, 437, 309, 775, 307, 309, 2516, 341, 17434, 11], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 150, "seek": 64952, "start": 655.88, "end": 662.88, "text": " it uses the WebAssembly API to create a new WebAssembly module and it instantiates it.", "tokens": [309, 4960, 264, 9573, 10884, 19160, 9362, 281, 1884, 257, 777, 9573, 10884, 19160, 10088, 293, 309, 9836, 72, 1024, 309, 13], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 151, "seek": 64952, "start": 662.88, "end": 665.0, "text": " That's all JavaScript has to do.", "tokens": [663, 311, 439, 15778, 575, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 152, "seek": 64952, "start": 665.0, "end": 670.4, "text": " The rest is tracked by WA4, it keeps track of which module corresponds to which function", "tokens": [440, 1472, 307, 31703, 538, 26915, 19, 11, 309, 5965, 2837, 295, 597, 10088, 23249, 281, 597, 2445], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 153, "seek": 64952, "start": 670.4, "end": 674.8, "text": " that it needs to call or compile later on.", "tokens": [300, 309, 2203, 281, 818, 420, 31413, 1780, 322, 13], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 154, "seek": 64952, "start": 674.8, "end": 677.56, "text": " So here you can see the system in action.", "tokens": [407, 510, 291, 393, 536, 264, 1185, 294, 3069, 13], "temperature": 0.0, "avg_logprob": -0.09298684767314366, "compression_ratio": 1.6561264822134387, "no_speech_prob": 2.812924549289164e-06}, {"id": 155, "seek": 67756, "start": 677.56, "end": 683.4799999999999, "text": " So what's happening here is now it's you start the definition, you start by compiling something", "tokens": [407, 437, 311, 2737, 510, 307, 586, 309, 311, 291, 722, 264, 7123, 11, 291, 722, 538, 715, 4883, 746], "temperature": 0.0, "avg_logprob": -0.14245464927271792, "compression_ratio": 1.6203208556149733, "no_speech_prob": 4.22241146225133e-06}, {"id": 156, "seek": 67756, "start": 683.4799999999999, "end": 689.16, "text": " so you're still in compilation mode.", "tokens": [370, 291, 434, 920, 294, 40261, 4391, 13], "temperature": 0.0, "avg_logprob": -0.14245464927271792, "compression_ratio": 1.6203208556149733, "no_speech_prob": 4.22241146225133e-06}, {"id": 157, "seek": 67756, "start": 689.16, "end": 693.16, "text": " And so it's only when you reach the end of the definition that suddenly you're going", "tokens": [400, 370, 309, 311, 787, 562, 291, 2524, 264, 917, 295, 264, 7123, 300, 5800, 291, 434, 516], "temperature": 0.0, "avg_logprob": -0.14245464927271792, "compression_ratio": 1.6203208556149733, "no_speech_prob": 4.22241146225133e-06}, {"id": 158, "seek": 67756, "start": 693.16, "end": 698.5999999999999, "text": " to see a new entry in your WebAssembly debugger with a function that has been loaded.", "tokens": [281, 536, 257, 777, 8729, 294, 428, 9573, 10884, 19160, 24083, 1321, 365, 257, 2445, 300, 575, 668, 13210, 13], "temperature": 0.0, "avg_logprob": -0.14245464927271792, "compression_ratio": 1.6203208556149733, "no_speech_prob": 4.22241146225133e-06}, {"id": 159, "seek": 69860, "start": 698.6, "end": 707.88, "text": " So, and this is the generated WebAssembly code that's been generated by the compiler.", "tokens": [407, 11, 293, 341, 307, 264, 10833, 9573, 10884, 19160, 3089, 300, 311, 668, 10833, 538, 264, 31958, 13], "temperature": 0.0, "avg_logprob": -0.16888494240610222, "compression_ratio": 1.560846560846561, "no_speech_prob": 6.239494268811541e-06}, {"id": 160, "seek": 69860, "start": 707.88, "end": 714.2, "text": " You can get even more control over this compilation process by writing your own WebAssembly inside", "tokens": [509, 393, 483, 754, 544, 1969, 670, 341, 40261, 1399, 538, 3579, 428, 1065, 9573, 10884, 19160, 1854], "temperature": 0.0, "avg_logprob": -0.16888494240610222, "compression_ratio": 1.560846560846561, "no_speech_prob": 6.239494268811541e-06}, {"id": 161, "seek": 69860, "start": 714.2, "end": 716.2, "text": " 4th.", "tokens": [1017, 392, 13], "temperature": 0.0, "avg_logprob": -0.16888494240610222, "compression_ratio": 1.560846560846561, "no_speech_prob": 6.239494268811541e-06}, {"id": 162, "seek": 69860, "start": 716.2, "end": 721.9200000000001, "text": " So this is actually, this is again no new syntax, this is just standard 4th with some", "tokens": [407, 341, 307, 767, 11, 341, 307, 797, 572, 777, 28431, 11, 341, 307, 445, 3832, 1017, 392, 365, 512], "temperature": 0.0, "avg_logprob": -0.16888494240610222, "compression_ratio": 1.560846560846561, "no_speech_prob": 6.239494268811541e-06}, {"id": 163, "seek": 69860, "start": 721.9200000000001, "end": 723.76, "text": " user defined words.", "tokens": [4195, 7642, 2283, 13], "temperature": 0.0, "avg_logprob": -0.16888494240610222, "compression_ratio": 1.560846560846561, "no_speech_prob": 6.239494268811541e-06}, {"id": 164, "seek": 72376, "start": 723.76, "end": 728.52, "text": " And there's one direct one-to-one mapping from this to this, if you can read it, but", "tokens": [400, 456, 311, 472, 2047, 472, 12, 1353, 12, 546, 18350, 490, 341, 281, 341, 11, 498, 291, 393, 1401, 309, 11, 457], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 165, "seek": 72376, "start": 728.52, "end": 732.4, "text": " probably can't from there.", "tokens": [1391, 393, 380, 490, 456, 13], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 166, "seek": 72376, "start": 732.4, "end": 737.0, "text": " Last thing I want to note about implementation detail is that most 4ths have very efficient", "tokens": [5264, 551, 286, 528, 281, 3637, 466, 11420, 2607, 307, 300, 881, 1017, 32184, 362, 588, 7148], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 167, "seek": 72376, "start": 737.0, "end": 739.96, "text": " execution by using a system they call ThreadedCode.", "tokens": [15058, 538, 1228, 257, 1185, 436, 818, 334, 2538, 292, 34, 1429, 13], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 168, "seek": 72376, "start": 739.96, "end": 744.96, "text": " So ThreadedCode is actually called doing jump instructions all over the place using values", "tokens": [407, 334, 2538, 292, 34, 1429, 307, 767, 1219, 884, 3012, 9415, 439, 670, 264, 1081, 1228, 4190], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 169, "seek": 72376, "start": 744.96, "end": 747.96, "text": " that come from memory or from registers.", "tokens": [300, 808, 490, 4675, 420, 490, 38351, 13], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 170, "seek": 72376, "start": 747.96, "end": 750.6, "text": " Now this is something you can do in WebAssembly.", "tokens": [823, 341, 307, 746, 291, 393, 360, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 171, "seek": 72376, "start": 750.6, "end": 753.48, "text": " WebAssembly only allows structured jumps.", "tokens": [9573, 10884, 19160, 787, 4045, 18519, 16704, 13], "temperature": 0.0, "avg_logprob": -0.19476045437944614, "compression_ratio": 1.6655052264808363, "no_speech_prob": 5.771507403551368e-06}, {"id": 172, "seek": 75348, "start": 753.48, "end": 757.9200000000001, "text": " So WebAssembly is actually structured programming language.", "tokens": [407, 9573, 10884, 19160, 307, 767, 18519, 9410, 2856, 13], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 173, "seek": 75348, "start": 757.9200000000001, "end": 760.52, "text": " What WebAssembly does have is function tables.", "tokens": [708, 9573, 10884, 19160, 775, 362, 307, 2445, 8020, 13], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 174, "seek": 75348, "start": 760.52, "end": 765.6, "text": " So these are dynamic tables where you can put functions in, function references in,", "tokens": [407, 613, 366, 8546, 8020, 689, 291, 393, 829, 6828, 294, 11, 2445, 15400, 294, 11], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 175, "seek": 75348, "start": 765.6, "end": 770.28, "text": " and then it comes with a special instruction where you can say jump to the function at", "tokens": [293, 550, 309, 1487, 365, 257, 2121, 10951, 689, 291, 393, 584, 3012, 281, 264, 2445, 412], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 176, "seek": 75348, "start": 770.28, "end": 771.8000000000001, "text": " this index.", "tokens": [341, 8186, 13], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 177, "seek": 75348, "start": 771.8000000000001, "end": 777.96, "text": " This is a system that WA4th uses for calling the words.", "tokens": [639, 307, 257, 1185, 300, 26915, 19, 392, 4960, 337, 5141, 264, 2283, 13], "temperature": 0.0, "avg_logprob": -0.14576239812941777, "compression_ratio": 1.6507177033492824, "no_speech_prob": 3.905368885170901e-06}, {"id": 178, "seek": 77796, "start": 777.96, "end": 785.96, "text": " Now the downside is that this is a very inefficient system compared to direct calls or jumps.", "tokens": [823, 264, 25060, 307, 300, 341, 307, 257, 588, 43495, 1185, 5347, 281, 2047, 5498, 420, 16704, 13], "temperature": 0.0, "avg_logprob": -0.13998151862103006, "compression_ratio": 1.5341880341880343, "no_speech_prob": 2.9943771551188547e-06}, {"id": 179, "seek": 77796, "start": 785.96, "end": 792.76, "text": " So I said that speed wasn't really a goal for WA4th, but it's still interesting to get", "tokens": [407, 286, 848, 300, 3073, 2067, 380, 534, 257, 3387, 337, 26915, 19, 392, 11, 457, 309, 311, 920, 1880, 281, 483], "temperature": 0.0, "avg_logprob": -0.13998151862103006, "compression_ratio": 1.5341880341880343, "no_speech_prob": 2.9943771551188547e-06}, {"id": 180, "seek": 77796, "start": 792.76, "end": 797.8000000000001, "text": " some ID of ballpark numbers of speed and size involved.", "tokens": [512, 7348, 295, 2594, 31239, 3547, 295, 3073, 293, 2744, 3288, 13], "temperature": 0.0, "avg_logprob": -0.13998151862103006, "compression_ratio": 1.5341880341880343, "no_speech_prob": 2.9943771551188547e-06}, {"id": 181, "seek": 77796, "start": 797.8000000000001, "end": 803.12, "text": " So I did some very unscientific thing, and I took an algorithm, in this case the sieve", "tokens": [407, 286, 630, 512, 588, 2693, 5412, 1089, 551, 11, 293, 286, 1890, 364, 9284, 11, 294, 341, 1389, 264, 2804, 303], "temperature": 0.0, "avg_logprob": -0.13998151862103006, "compression_ratio": 1.5341880341880343, "no_speech_prob": 2.9943771551188547e-06}, {"id": 182, "seek": 77796, "start": 803.12, "end": 805.08, "text": " algorithm to compute prime numbers.", "tokens": [9284, 281, 14722, 5835, 3547, 13], "temperature": 0.0, "avg_logprob": -0.13998151862103006, "compression_ratio": 1.5341880341880343, "no_speech_prob": 2.9943771551188547e-06}, {"id": 183, "seek": 80508, "start": 805.08, "end": 809.88, "text": " I took a fourth implementation, ported it to JavaScript CE WebAssembly, and then ran", "tokens": [286, 1890, 257, 6409, 11420, 11, 2436, 292, 309, 281, 15778, 28109, 9573, 10884, 19160, 11, 293, 550, 5872], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 184, "seek": 80508, "start": 809.88, "end": 813.4000000000001, "text": " it a few times and see what the result was.", "tokens": [309, 257, 1326, 1413, 293, 536, 437, 264, 1874, 390, 13], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 185, "seek": 80508, "start": 813.4000000000001, "end": 818.84, "text": " Again this is not a very representative benchmark, but it's just here to get a feel for some", "tokens": [3764, 341, 307, 406, 257, 588, 12424, 18927, 11, 457, 309, 311, 445, 510, 281, 483, 257, 841, 337, 512], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 186, "seek": 80508, "start": 818.84, "end": 819.88, "text": " numbers.", "tokens": [3547, 13], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 187, "seek": 80508, "start": 819.88, "end": 825.1600000000001, "text": " So if you look at the execution times, WA4th is about 10 times faster than a JavaScript", "tokens": [407, 498, 291, 574, 412, 264, 15058, 1413, 11, 26915, 19, 392, 307, 466, 1266, 1413, 4663, 813, 257, 15778], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 188, "seek": 80508, "start": 825.1600000000001, "end": 826.5200000000001, "text": " 4th version.", "tokens": [1017, 392, 3037, 13], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 189, "seek": 80508, "start": 826.5200000000001, "end": 828.12, "text": " This is to be expected.", "tokens": [639, 307, 281, 312, 5176, 13], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 190, "seek": 80508, "start": 828.12, "end": 833.1600000000001, "text": " JavaScript 4th versions do pure interpretation, WA4th uses compilation, so there's no surprise", "tokens": [15778, 1017, 392, 9606, 360, 6075, 14174, 11, 26915, 19, 392, 4960, 40261, 11, 370, 456, 311, 572, 6365], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 191, "seek": 80508, "start": 833.1600000000001, "end": 834.1600000000001, "text": " there.", "tokens": [456, 13], "temperature": 0.0, "avg_logprob": -0.14953816421632846, "compression_ratio": 1.6618181818181819, "no_speech_prob": 5.092560513730859e-06}, {"id": 192, "seek": 83416, "start": 834.16, "end": 840.3199999999999, "text": " But what is a bit surprising is that G4th, which is a native 4th, is not much faster", "tokens": [583, 437, 307, 257, 857, 8830, 307, 300, 460, 19, 392, 11, 597, 307, 257, 8470, 1017, 392, 11, 307, 406, 709, 4663], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 193, "seek": 83416, "start": 840.3199999999999, "end": 841.3199999999999, "text": " than WA4th.", "tokens": [813, 26915, 19, 392, 13], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 194, "seek": 83416, "start": 841.3199999999999, "end": 845.88, "text": " I have no idea why this is, I'm suspicious about this result, maybe it's because I'm", "tokens": [286, 362, 572, 1558, 983, 341, 307, 11, 286, 478, 17931, 466, 341, 1874, 11, 1310, 309, 311, 570, 286, 478], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 195, "seek": 83416, "start": 845.88, "end": 850.8399999999999, "text": " using an architecture that G4th isn't optimized for.", "tokens": [1228, 364, 9482, 300, 460, 19, 392, 1943, 380, 26941, 337, 13], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 196, "seek": 83416, "start": 850.8399999999999, "end": 855.24, "text": " JavaScript is 10 times faster than WA4th, which is also normal because WA4th needs to", "tokens": [15778, 307, 1266, 1413, 4663, 813, 26915, 19, 392, 11, 597, 307, 611, 2710, 570, 26915, 19, 392, 2203, 281], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 197, "seek": 83416, "start": 855.24, "end": 858.92, "text": " do these constant indirect jumps, and JavaScript doesn't have this problem.", "tokens": [360, 613, 5754, 19523, 16704, 11, 293, 15778, 1177, 380, 362, 341, 1154, 13], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 198, "seek": 83416, "start": 858.92, "end": 863.04, "text": " It doesn't need to do any function calling at all.", "tokens": [467, 1177, 380, 643, 281, 360, 604, 2445, 5141, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.1568937224101245, "compression_ratio": 1.725868725868726, "no_speech_prob": 1.2027759112243075e-05}, {"id": 199, "seek": 86304, "start": 863.04, "end": 868.4399999999999, "text": " And then finally, if you have the C version, and you compile it to WebAssembly using M-scripten,", "tokens": [400, 550, 2721, 11, 498, 291, 362, 264, 383, 3037, 11, 293, 291, 31413, 309, 281, 9573, 10884, 19160, 1228, 376, 12, 82, 5944, 268, 11], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 200, "seek": 86304, "start": 868.4399999999999, "end": 873.36, "text": " it's about as fast as running the raw WebAssembly, and the native version of the algorithm is", "tokens": [309, 311, 466, 382, 2370, 382, 2614, 264, 8936, 9573, 10884, 19160, 11, 293, 264, 8470, 3037, 295, 264, 9284, 307], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 201, "seek": 86304, "start": 873.36, "end": 874.36, "text": " slightly faster.", "tokens": [4748, 4663, 13], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 202, "seek": 86304, "start": 874.36, "end": 879.28, "text": " Although you have to say the WebAssembly engine is pretty good at running this code compared", "tokens": [5780, 291, 362, 281, 584, 264, 9573, 10884, 19160, 2848, 307, 1238, 665, 412, 2614, 341, 3089, 5347], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 203, "seek": 86304, "start": 879.28, "end": 881.8, "text": " to native code.", "tokens": [281, 8470, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 204, "seek": 86304, "start": 881.8, "end": 887.0799999999999, "text": " So if we look at the size of the runtime and the code that is executed, the main takeaway", "tokens": [407, 498, 321, 574, 412, 264, 2744, 295, 264, 34474, 293, 264, 3089, 300, 307, 17577, 11, 264, 2135, 30681], "temperature": 0.0, "avg_logprob": -0.11815698191804706, "compression_ratio": 1.7130801687763713, "no_speech_prob": 6.0483730521809775e-06}, {"id": 205, "seek": 88708, "start": 887.08, "end": 895.2800000000001, "text": " here is that WA4th is actually a very small system, it's like about 15K, but you need", "tokens": [510, 307, 300, 26915, 19, 392, 307, 767, 257, 588, 1359, 1185, 11, 309, 311, 411, 466, 2119, 42, 11, 457, 291, 643], "temperature": 0.0, "avg_logprob": -0.15307019886217618, "compression_ratio": 1.4532019704433496, "no_speech_prob": 3.5557093269744655e-06}, {"id": 206, "seek": 88708, "start": 895.2800000000001, "end": 901.84, "text": " a complete browser to run it, so that's of course huge to run.", "tokens": [257, 3566, 11185, 281, 1190, 309, 11, 370, 300, 311, 295, 1164, 2603, 281, 1190, 13], "temperature": 0.0, "avg_logprob": -0.15307019886217618, "compression_ratio": 1.4532019704433496, "no_speech_prob": 3.5557093269744655e-06}, {"id": 207, "seek": 88708, "start": 901.84, "end": 906.84, "text": " So the question is, can we improve this situation?", "tokens": [407, 264, 1168, 307, 11, 393, 321, 3470, 341, 2590, 30], "temperature": 0.0, "avg_logprob": -0.15307019886217618, "compression_ratio": 1.4532019704433496, "no_speech_prob": 3.5557093269744655e-06}, {"id": 208, "seek": 88708, "start": 906.84, "end": 914.2, "text": " So actually there are several standalone implementations of WebAssembly in different languages.", "tokens": [407, 767, 456, 366, 2940, 37454, 4445, 763, 295, 9573, 10884, 19160, 294, 819, 8650, 13], "temperature": 0.0, "avg_logprob": -0.15307019886217618, "compression_ratio": 1.4532019704433496, "no_speech_prob": 3.5557093269744655e-06}, {"id": 209, "seek": 91420, "start": 914.2, "end": 919.96, "text": " For example, WebIt has a reference implementation in C++, there's WasmTime, which is security", "tokens": [1171, 1365, 11, 9573, 3522, 575, 257, 6408, 11420, 294, 383, 25472, 11, 456, 311, 3027, 76, 22233, 11, 597, 307, 3825], "temperature": 0.0, "avg_logprob": -0.16045798507391237, "compression_ratio": 1.6465863453815262, "no_speech_prob": 2.4822873001539847e-06}, {"id": 210, "seek": 91420, "start": 919.96, "end": 925.8000000000001, "text": " focused and speed focused in Rust, but there are several others.", "tokens": [5178, 293, 3073, 5178, 294, 34952, 11, 457, 456, 366, 2940, 2357, 13], "temperature": 0.0, "avg_logprob": -0.16045798507391237, "compression_ratio": 1.6465863453815262, "no_speech_prob": 2.4822873001539847e-06}, {"id": 211, "seek": 91420, "start": 925.8000000000001, "end": 931.4000000000001, "text": " But these only do the WebAssembly part, so there's still this small piece of code, these", "tokens": [583, 613, 787, 360, 264, 9573, 10884, 19160, 644, 11, 370, 456, 311, 920, 341, 1359, 2522, 295, 3089, 11, 613], "temperature": 0.0, "avg_logprob": -0.16045798507391237, "compression_ratio": 1.6465863453815262, "no_speech_prob": 2.4822873001539847e-06}, {"id": 212, "seek": 91420, "start": 931.4000000000001, "end": 936.08, "text": " small pieces that are outside of the system that you need to call out to.", "tokens": [1359, 3755, 300, 366, 2380, 295, 264, 1185, 300, 291, 643, 281, 818, 484, 281, 13], "temperature": 0.0, "avg_logprob": -0.16045798507391237, "compression_ratio": 1.6465863453815262, "no_speech_prob": 2.4822873001539847e-06}, {"id": 213, "seek": 91420, "start": 936.08, "end": 940.12, "text": " If you wanted to use all these engines and try this out and create a standalone version,", "tokens": [759, 291, 1415, 281, 764, 439, 613, 12982, 293, 853, 341, 484, 293, 1884, 257, 37454, 3037, 11], "temperature": 0.0, "avg_logprob": -0.16045798507391237, "compression_ratio": 1.6465863453815262, "no_speech_prob": 2.4822873001539847e-06}, {"id": 214, "seek": 94012, "start": 940.12, "end": 944.2, "text": " you would need to write this little piece of code in all these languages against all", "tokens": [291, 576, 643, 281, 2464, 341, 707, 2522, 295, 3089, 294, 439, 613, 8650, 1970, 439], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 215, "seek": 94012, "start": 944.2, "end": 945.2, "text": " these APIs.", "tokens": [613, 21445, 13], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 216, "seek": 94012, "start": 945.2, "end": 950.12, "text": " Now luckily there's something called the WebAssembly C API, and this is a standardized", "tokens": [823, 22880, 456, 311, 746, 1219, 264, 9573, 10884, 19160, 383, 9362, 11, 293, 341, 307, 257, 31677], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 217, "seek": 94012, "start": 950.12, "end": 955.96, "text": " Blackbox API that most of these systems implement.", "tokens": [4076, 4995, 9362, 300, 881, 295, 613, 3652, 4445, 13], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 218, "seek": 94012, "start": 955.96, "end": 960.88, "text": " So actually the only thing you have to do is write these, I had to do was write these", "tokens": [407, 767, 264, 787, 551, 291, 362, 281, 360, 307, 2464, 613, 11, 286, 632, 281, 360, 390, 2464, 613], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 219, "seek": 94012, "start": 960.88, "end": 966.36, "text": " 200 lines of implementation in Dependency, and then I could drop in any engine I wanted", "tokens": [2331, 3876, 295, 11420, 294, 4056, 521, 3020, 11, 293, 550, 286, 727, 3270, 294, 604, 2848, 286, 1415], "temperature": 0.0, "avg_logprob": -0.19706779479980469, "compression_ratio": 1.6, "no_speech_prob": 3.288455673100543e-06}, {"id": 220, "seek": 96636, "start": 966.36, "end": 971.92, "text": " and then have a standalone version of my system.", "tokens": [293, 550, 362, 257, 37454, 3037, 295, 452, 1185, 13], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 221, "seek": 96636, "start": 971.92, "end": 977.16, "text": " Now if we look at some, the same benchmark again, we can see that speed-wise, WebIt is", "tokens": [823, 498, 321, 574, 412, 512, 11, 264, 912, 18927, 797, 11, 321, 393, 536, 300, 3073, 12, 3711, 11, 9573, 3522, 307], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 222, "seek": 96636, "start": 977.16, "end": 981.4, "text": " about 100 times slower than the browser version, which is normal.", "tokens": [466, 2319, 1413, 14009, 813, 264, 11185, 3037, 11, 597, 307, 2710, 13], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 223, "seek": 96636, "start": 981.4, "end": 987.08, "text": " I mean, this version in WebIt, that's a reference implementation, it's very naive, it just does", "tokens": [286, 914, 11, 341, 3037, 294, 9573, 3522, 11, 300, 311, 257, 6408, 11420, 11, 309, 311, 588, 29052, 11, 309, 445, 775], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 224, "seek": 96636, "start": 987.08, "end": 990.04, "text": " what it needs to do to be functional.", "tokens": [437, 309, 2203, 281, 360, 281, 312, 11745, 13], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 225, "seek": 96636, "start": 990.04, "end": 994.52, "text": " What is a bit weird is that WasmTime, which is supposed to be fast, is still about 10", "tokens": [708, 307, 257, 857, 3657, 307, 300, 3027, 76, 22233, 11, 597, 307, 3442, 281, 312, 2370, 11, 307, 920, 466, 1266], "temperature": 0.0, "avg_logprob": -0.1619620072214227, "compression_ratio": 1.6509803921568627, "no_speech_prob": 6.5397857724747155e-06}, {"id": 226, "seek": 99452, "start": 994.52, "end": 998.3199999999999, "text": " times faster than the browser version, and there is no good reason for this.", "tokens": [1413, 4663, 813, 264, 11185, 3037, 11, 293, 456, 307, 572, 665, 1778, 337, 341, 13], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 227, "seek": 99452, "start": 998.3199999999999, "end": 1002.4399999999999, "text": " So I don't know why this is, I haven't tried other engines yet.", "tokens": [407, 286, 500, 380, 458, 983, 341, 307, 11, 286, 2378, 380, 3031, 661, 12982, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 228, "seek": 99452, "start": 1002.4399999999999, "end": 1009.68, "text": " Now if you look at size, you see that if you use a relatively optimizing system, you still", "tokens": [823, 498, 291, 574, 412, 2744, 11, 291, 536, 300, 498, 291, 764, 257, 7226, 40425, 1185, 11, 291, 920], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 229, "seek": 99452, "start": 1009.68, "end": 1015.0799999999999, "text": " have 90 megabytes, which is a lot smaller than a browser, but still if you have a system", "tokens": [362, 4289, 10816, 24538, 11, 597, 307, 257, 688, 4356, 813, 257, 11185, 11, 457, 920, 498, 291, 362, 257, 1185], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 230, "seek": 99452, "start": 1015.0799999999999, "end": 1020.04, "text": " of about 15K, this is still big.", "tokens": [295, 466, 2119, 42, 11, 341, 307, 920, 955, 13], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 231, "seek": 99452, "start": 1020.04, "end": 1023.16, "text": " Can we do something about this?", "tokens": [1664, 321, 360, 746, 466, 341, 30], "temperature": 0.0, "avg_logprob": -0.1530379885718936, "compression_ratio": 1.6244725738396624, "no_speech_prob": 8.013003935047891e-06}, {"id": 232, "seek": 102316, "start": 1023.16, "end": 1028.92, "text": " Well, you need the WebAssembly runtime to be able to run your fourth code and to compile", "tokens": [1042, 11, 291, 643, 264, 9573, 10884, 19160, 34474, 281, 312, 1075, 281, 1190, 428, 6409, 3089, 293, 281, 31413], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 233, "seek": 102316, "start": 1028.92, "end": 1033.52, "text": " your code and load it, but typically most programs, once you did the first pass and", "tokens": [428, 3089, 293, 3677, 309, 11, 457, 5850, 881, 4268, 11, 1564, 291, 630, 264, 700, 1320, 293], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 234, "seek": 102316, "start": 1033.52, "end": 1038.08, "text": " you did all the compilation necessary, you no longer need a compiler if you want to run", "tokens": [291, 630, 439, 264, 40261, 4818, 11, 291, 572, 2854, 643, 257, 31958, 498, 291, 528, 281, 1190], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 235, "seek": 102316, "start": 1038.08, "end": 1039.96, "text": " the program again.", "tokens": [264, 1461, 797, 13], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 236, "seek": 102316, "start": 1039.96, "end": 1044.68, "text": " So you can do some out-of-time compiling, and this is where WA4C comes in.", "tokens": [407, 291, 393, 360, 512, 484, 12, 2670, 12, 3766, 715, 4883, 11, 293, 341, 307, 689, 26915, 19, 34, 1487, 294, 13], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 237, "seek": 102316, "start": 1044.68, "end": 1051.32, "text": " So what it does is it takes your fourth program, it uses WA4C to run your program once, and", "tokens": [407, 437, 309, 775, 307, 309, 2516, 428, 6409, 1461, 11, 309, 4960, 26915, 19, 34, 281, 1190, 428, 1461, 1564, 11, 293], "temperature": 0.0, "avg_logprob": -0.14941329956054689, "compression_ratio": 1.8278688524590163, "no_speech_prob": 1.1124491720693186e-05}, {"id": 238, "seek": 105132, "start": 1051.32, "end": 1055.82, "text": " at the end of the cycle, it's going to look at all the modules that you created, it's", "tokens": [412, 264, 917, 295, 264, 6586, 11, 309, 311, 516, 281, 574, 412, 439, 264, 16679, 300, 291, 2942, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 239, "seek": 105132, "start": 1055.82, "end": 1061.3999999999999, "text": " going to combine them all, combine the final state, and then create one big WebAssembly module", "tokens": [516, 281, 10432, 552, 439, 11, 10432, 264, 2572, 1785, 11, 293, 550, 1884, 472, 955, 9573, 10884, 19160, 10088], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 240, "seek": 105132, "start": 1061.3999999999999, "end": 1062.3999999999999, "text": " out of this.", "tokens": [484, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 241, "seek": 105132, "start": 1062.3999999999999, "end": 1067.9199999999998, "text": " Now it's going to take this big module and then use another tool from Rabbit, Rabbit is", "tokens": [823, 309, 311, 516, 281, 747, 341, 955, 10088, 293, 550, 764, 1071, 2290, 490, 42092, 11, 42092, 307], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 242, "seek": 105132, "start": 1067.9199999999998, "end": 1074.0, "text": " really a cool toolset, it's going to use another tool from Rabbit called Wasm2C to transform", "tokens": [534, 257, 1627, 2290, 3854, 11, 309, 311, 516, 281, 764, 1071, 2290, 490, 42092, 1219, 343, 14774, 17, 34, 281, 4088], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 243, "seek": 105132, "start": 1074.0, "end": 1078.72, "text": " this big module into C, and then it's going to use your host compiler to create a native", "tokens": [341, 955, 10088, 666, 383, 11, 293, 550, 309, 311, 516, 281, 764, 428, 3975, 31958, 281, 1884, 257, 8470], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 244, "seek": 105132, "start": 1078.72, "end": 1080.4399999999998, "text": " executable.", "tokens": [7568, 712, 13], "temperature": 0.0, "avg_logprob": -0.16167159307570683, "compression_ratio": 2.021276595744681, "no_speech_prob": 4.860104127146769e-06}, {"id": 245, "seek": 108044, "start": 1080.44, "end": 1086.3200000000002, "text": " So the end result is that you have a fourth code to native compiler and your native binary", "tokens": [407, 264, 917, 1874, 307, 300, 291, 362, 257, 6409, 3089, 281, 8470, 31958, 293, 428, 8470, 17434], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 246, "seek": 108044, "start": 1086.3200000000002, "end": 1091.68, "text": " is your fourth code with the rest of the fourth system still in there, but the compiler left", "tokens": [307, 428, 6409, 3089, 365, 264, 1472, 295, 264, 6409, 1185, 920, 294, 456, 11, 457, 264, 31958, 1411], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 247, "seek": 108044, "start": 1091.68, "end": 1092.68, "text": " out.", "tokens": [484, 13], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 248, "seek": 108044, "start": 1092.68, "end": 1100.0, "text": " And the cool thing is that because this is all platform-independent stuff up until the", "tokens": [400, 264, 1627, 551, 307, 300, 570, 341, 307, 439, 3663, 12, 471, 4217, 317, 1507, 493, 1826, 264], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 249, "seek": 108044, "start": 1100.0, "end": 1104.8, "text": " native compiler, you can actually do cross-compiling easily, so you can just do cross-compiling", "tokens": [8470, 31958, 11, 291, 393, 767, 360, 3278, 12, 21541, 4883, 3612, 11, 370, 291, 393, 445, 360, 3278, 12, 21541, 4883], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 250, "seek": 108044, "start": 1104.8, "end": 1107.24, "text": " from fourth to any architecture you want.", "tokens": [490, 6409, 281, 604, 9482, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.13835561041738473, "compression_ratio": 1.8355555555555556, "no_speech_prob": 1.9032397631235654e-06}, {"id": 251, "seek": 110724, "start": 1107.24, "end": 1112.56, "text": " And all this code is about 500 lines and uses a lot of stuff from Rabbit actually, and Rabbit", "tokens": [400, 439, 341, 3089, 307, 466, 5923, 3876, 293, 4960, 257, 688, 295, 1507, 490, 42092, 767, 11, 293, 42092], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 252, "seek": 110724, "start": 1112.56, "end": 1117.56, "text": " is the only dependency here.", "tokens": [307, 264, 787, 33621, 510, 13], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 253, "seek": 110724, "start": 1117.56, "end": 1122.6, "text": " So if you look at our final table of benchmarks, we see that the speed is slightly better than", "tokens": [407, 498, 291, 574, 412, 527, 2572, 3199, 295, 43751, 11, 321, 536, 300, 264, 3073, 307, 4748, 1101, 813], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 254, "seek": 110724, "start": 1122.6, "end": 1127.1200000000001, "text": " Wasm, than it was before in the browser version, and the binary is becoming a lot smaller,", "tokens": [343, 14774, 11, 813, 309, 390, 949, 294, 264, 11185, 3037, 11, 293, 264, 17434, 307, 5617, 257, 688, 4356, 11], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 255, "seek": 110724, "start": 1127.1200000000001, "end": 1133.28, "text": " so the entire system is only about 116K in the end of native code.", "tokens": [370, 264, 2302, 1185, 307, 787, 466, 2975, 21, 42, 294, 264, 917, 295, 8470, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 256, "seek": 110724, "start": 1133.28, "end": 1136.0, "text": " Now there's still room for improvement here.", "tokens": [823, 456, 311, 920, 1808, 337, 10444, 510, 13], "temperature": 0.0, "avg_logprob": -0.14208126959399642, "compression_ratio": 1.5730337078651686, "no_speech_prob": 5.25490168001852e-06}, {"id": 257, "seek": 113600, "start": 1136.0, "end": 1142.56, "text": " So what WA4C does is it just throws together all these modules and then generates the big", "tokens": [407, 437, 26915, 19, 34, 775, 307, 309, 445, 19251, 1214, 439, 613, 16679, 293, 550, 23815, 264, 955], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 258, "seek": 113600, "start": 1142.56, "end": 1144.48, "text": " module.", "tokens": [10088, 13], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 259, "seek": 113600, "start": 1144.48, "end": 1149.28, "text": " Now this big module, there are no cross-module calls anymore, so what you could do is actually", "tokens": [823, 341, 955, 10088, 11, 456, 366, 572, 3278, 12, 8014, 2271, 5498, 3602, 11, 370, 437, 291, 727, 360, 307, 767], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 260, "seek": 113600, "start": 1149.28, "end": 1150.68, "text": " do some post-processing.", "tokens": [360, 512, 2183, 12, 41075, 278, 13], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 261, "seek": 113600, "start": 1150.68, "end": 1156.04, "text": " You could change all these indirect calls into direct calls, which could speed up a lot", "tokens": [509, 727, 1319, 439, 613, 19523, 5498, 666, 2047, 5498, 11, 597, 727, 3073, 493, 257, 688], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 262, "seek": 113600, "start": 1156.04, "end": 1159.12, "text": " because the calls are really the bottleneck here.", "tokens": [570, 264, 5498, 366, 534, 264, 44641, 547, 510, 13], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 263, "seek": 113600, "start": 1159.12, "end": 1162.76, "text": " Another thing you could do is throw away code that you don't need.", "tokens": [3996, 551, 291, 727, 360, 307, 3507, 1314, 3089, 300, 291, 500, 380, 643, 13], "temperature": 0.0, "avg_logprob": -0.12505650520324707, "compression_ratio": 1.743801652892562, "no_speech_prob": 7.888328582339454e-06}, {"id": 264, "seek": 116276, "start": 1162.76, "end": 1168.44, "text": " So in conclusions, this was a very fast talk.", "tokens": [407, 294, 22865, 11, 341, 390, 257, 588, 2370, 751, 13], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 265, "seek": 116276, "start": 1168.44, "end": 1171.08, "text": " I could only touch upon things very briefly.", "tokens": [286, 727, 787, 2557, 3564, 721, 588, 10515, 13], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 266, "seek": 116276, "start": 1171.08, "end": 1177.0, "text": " What I did was I used fourth to explore low-level language implementation in WebAssembly.", "tokens": [708, 286, 630, 390, 286, 1143, 6409, 281, 6839, 2295, 12, 12418, 2856, 11420, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 267, "seek": 116276, "start": 1177.0, "end": 1182.2, "text": " Because fourth is so minimal, I was able to keep things very simple, try out a lot of things,", "tokens": [1436, 6409, 307, 370, 13206, 11, 286, 390, 1075, 281, 1066, 721, 588, 2199, 11, 853, 484, 257, 688, 295, 721, 11], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 268, "seek": 116276, "start": 1182.2, "end": 1183.2, "text": " and go a lot of places.", "tokens": [293, 352, 257, 688, 295, 3190, 13], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 269, "seek": 116276, "start": 1183.2, "end": 1189.8, "text": " But I think a lot of the things that I've shown here are actually applicable to other", "tokens": [583, 286, 519, 257, 688, 295, 264, 721, 300, 286, 600, 4898, 510, 366, 767, 21142, 281, 661], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 270, "seek": 116276, "start": 1189.8, "end": 1190.8, "text": " languages.", "tokens": [8650, 13], "temperature": 0.0, "avg_logprob": -0.1360245943069458, "compression_ratio": 1.6527196652719665, "no_speech_prob": 1.2209769920445979e-05}, {"id": 271, "seek": 119080, "start": 1190.8, "end": 1193.8, "text": " You could use declarative languages if you want to compare to WebAssembly.", "tokens": [509, 727, 764, 16694, 1166, 8650, 498, 291, 528, 281, 6794, 281, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.2731761379518371, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.00020288725499995053}, {"id": 272, "seek": 119080, "start": 1193.8, "end": 1199.8, "text": " Although I have to say, if you don't know fourth yet, I can really recommend having a", "tokens": [5780, 286, 362, 281, 584, 11, 498, 291, 500, 380, 458, 6409, 1939, 11, 286, 393, 534, 2748, 1419, 257], "temperature": 0.0, "avg_logprob": -0.2731761379518371, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.00020288725499995053}, {"id": 273, "seek": 119080, "start": 1199.8, "end": 1204.3999999999999, "text": " look at it because I find that there's some interesting philosophies and concepts behind", "tokens": [574, 412, 309, 570, 286, 915, 300, 456, 311, 512, 1880, 14529, 530, 293, 10392, 2261], "temperature": 0.0, "avg_logprob": -0.2731761379518371, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.00020288725499995053}, {"id": 274, "seek": 119080, "start": 1204.3999999999999, "end": 1205.3999999999999, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.2731761379518371, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.00020288725499995053}, {"id": 275, "seek": 119080, "start": 1205.3999999999999, "end": 1206.3999999999999, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2731761379518371, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.00020288725499995053}, {"id": 276, "seek": 120640, "start": 1206.4, "end": 1226.48, "text": " Questions?", "tokens": [27738, 30], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 277, "seek": 120640, "start": 1226.48, "end": 1228.2, "text": " It was fast, wasn't it?", "tokens": [467, 390, 2370, 11, 2067, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 278, "seek": 120640, "start": 1228.2, "end": 1229.2, "text": " Sorry about that.", "tokens": [4919, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 279, "seek": 120640, "start": 1229.2, "end": 1231.2, "text": " Sir, I have a question.", "tokens": [6144, 11, 286, 362, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 280, "seek": 120640, "start": 1231.2, "end": 1234.4, "text": " We seem to be dealing in rather old languages today.", "tokens": [492, 1643, 281, 312, 6260, 294, 2831, 1331, 8650, 965, 13], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 281, "seek": 120640, "start": 1234.4, "end": 1235.4, "text": " Yeah, yeah, yeah.", "tokens": [865, 11, 1338, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.35979193907517654, "compression_ratio": 1.2352941176470589, "no_speech_prob": 0.0004356744757387787}, {"id": 282, "seek": 123540, "start": 1235.4, "end": 1236.4, "text": " I always have been.", "tokens": [286, 1009, 362, 668, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 283, "seek": 123540, "start": 1236.4, "end": 1239.4, "text": " It's at least the 60s, I think, or 50s even.", "tokens": [467, 311, 412, 1935, 264, 4060, 82, 11, 286, 519, 11, 420, 2625, 82, 754, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 284, "seek": 123540, "start": 1239.4, "end": 1240.4, "text": " Yeah, yeah.", "tokens": [865, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 285, "seek": 123540, "start": 1240.4, "end": 1241.4, "text": " And fourth is early 70s.", "tokens": [400, 6409, 307, 2440, 5285, 82, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 286, "seek": 123540, "start": 1241.4, "end": 1242.4, "text": " Yeah, yeah, yeah.", "tokens": [865, 11, 1338, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 287, "seek": 123540, "start": 1242.4, "end": 1243.4, "text": " WebAssembly is nowhere.", "tokens": [9573, 10884, 19160, 307, 11159, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 288, "seek": 123540, "start": 1243.4, "end": 1244.4, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 289, "seek": 123540, "start": 1244.4, "end": 1245.4, "text": " WebAssembly is slightly newer.", "tokens": [9573, 10884, 19160, 307, 4748, 17628, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 290, "seek": 123540, "start": 1245.4, "end": 1246.4, "text": " So yes, I...", "tokens": [407, 2086, 11, 286, 485], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 291, "seek": 123540, "start": 1246.4, "end": 1247.4, "text": " We'll have more from the 90s later.", "tokens": [492, 603, 362, 544, 490, 264, 4289, 82, 1780, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 292, "seek": 123540, "start": 1247.4, "end": 1248.4, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 293, "seek": 123540, "start": 1248.4, "end": 1249.4, "text": " One question?", "tokens": [1485, 1168, 30], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 294, "seek": 123540, "start": 1249.4, "end": 1250.4, "text": " Yeah, one thing is that there was a...", "tokens": [865, 11, 472, 551, 307, 300, 456, 390, 257, 485], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 295, "seek": 123540, "start": 1250.4, "end": 1251.4, "text": " Potentially, you could...", "tokens": [9145, 3137, 11, 291, 727, 485], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 296, "seek": 123540, "start": 1251.4, "end": 1252.4, "text": " I'm not sure.", "tokens": [286, 478, 406, 988, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 297, "seek": 123540, "start": 1252.4, "end": 1253.4, "text": " One potential direction.", "tokens": [1485, 3995, 3513, 13], "temperature": 0.0, "avg_logprob": -0.2734338875972863, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.001804469502530992}, {"id": 298, "seek": 125340, "start": 1253.4, "end": 1270.4, "text": " You could also consider doing the code generation in JavaScript, as in you can just create function", "tokens": [509, 727, 611, 1949, 884, 264, 3089, 5125, 294, 15778, 11, 382, 294, 291, 393, 445, 1884, 2445], "temperature": 0.0, "avg_logprob": -0.250530757601299, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0033130538649857044}, {"id": 299, "seek": 125340, "start": 1270.4, "end": 1271.4, "text": " out of binary...", "tokens": [484, 295, 17434, 485], "temperature": 0.0, "avg_logprob": -0.250530757601299, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0033130538649857044}, {"id": 300, "seek": 125340, "start": 1271.4, "end": 1274.4, "text": " Out of text in JavaScript.", "tokens": [5925, 295, 2487, 294, 15778, 13], "temperature": 0.0, "avg_logprob": -0.250530757601299, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0033130538649857044}, {"id": 301, "seek": 125340, "start": 1274.4, "end": 1275.4, "text": " And the same thing...", "tokens": [400, 264, 912, 551, 485], "temperature": 0.0, "avg_logprob": -0.250530757601299, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0033130538649857044}, {"id": 302, "seek": 125340, "start": 1275.4, "end": 1279.4, "text": " I'm not sure the infrastructure how much can be shared, but the same thing could happen", "tokens": [286, 478, 406, 988, 264, 6896, 577, 709, 393, 312, 5507, 11, 457, 264, 912, 551, 727, 1051], "temperature": 0.0, "avg_logprob": -0.250530757601299, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0033130538649857044}, {"id": 303, "seek": 127940, "start": 1279.4, "end": 1286.4, "text": " also in JavaScript side, as in the thing of compiling the code, the JavaScript side,", "tokens": [611, 294, 15778, 1252, 11, 382, 294, 264, 551, 295, 715, 4883, 264, 3089, 11, 264, 15778, 1252, 11], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 304, "seek": 127940, "start": 1286.4, "end": 1287.4, "text": " and then it's...", "tokens": [293, 550, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 305, "seek": 127940, "start": 1287.4, "end": 1290.4, "text": " So it could get to JavaScript.", "tokens": [407, 309, 727, 483, 281, 15778, 13], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 306, "seek": 127940, "start": 1290.4, "end": 1295.4, "text": " So the level of performance of JavaScript.", "tokens": [407, 264, 1496, 295, 3389, 295, 15778, 13], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 307, "seek": 127940, "start": 1295.4, "end": 1297.4, "text": " I'm not sure if it's interesting.", "tokens": [286, 478, 406, 988, 498, 309, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 308, "seek": 127940, "start": 1297.4, "end": 1304.4, "text": " So the question is, can I reach the same performance if you do it in JavaScript?", "tokens": [407, 264, 1168, 307, 11, 393, 286, 2524, 264, 912, 3389, 498, 291, 360, 309, 294, 15778, 30], "temperature": 0.0, "avg_logprob": -0.30634565353393556, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00041755594429560006}, {"id": 309, "seek": 130440, "start": 1304.4, "end": 1310.4, "text": " Potentially, there is this thing passing through WebAssembly and this JS port you mentioned,", "tokens": [9145, 3137, 11, 456, 307, 341, 551, 8437, 807, 9573, 10884, 19160, 293, 341, 33063, 2436, 291, 2835, 11], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 310, "seek": 130440, "start": 1310.4, "end": 1315.4, "text": " but potentially it's also possible to do code generation in JavaScript.", "tokens": [457, 7263, 309, 311, 611, 1944, 281, 360, 3089, 5125, 294, 15778, 13], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 311, "seek": 130440, "start": 1315.4, "end": 1318.4, "text": " So the question is, can you do also this code generation in JavaScript?", "tokens": [407, 264, 1168, 307, 11, 393, 291, 360, 611, 341, 3089, 5125, 294, 15778, 30], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 312, "seek": 130440, "start": 1318.4, "end": 1319.4, "text": " Yes, of course you can.", "tokens": [1079, 11, 295, 1164, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 313, "seek": 130440, "start": 1319.4, "end": 1320.4, "text": " Potentially.", "tokens": [9145, 3137, 13], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 314, "seek": 130440, "start": 1320.4, "end": 1321.4, "text": " Potentially you can.", "tokens": [9145, 3137, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 315, "seek": 130440, "start": 1321.4, "end": 1326.4, "text": " So typically what you will see is the handy part, because I'm working in WebAssembly, is", "tokens": [407, 5850, 437, 291, 486, 536, 307, 264, 13239, 644, 11, 570, 286, 478, 1364, 294, 9573, 10884, 19160, 11, 307], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 316, "seek": 130440, "start": 1326.4, "end": 1330.4, "text": " that I have all the WebAssembly low levels at my disposal.", "tokens": [300, 286, 362, 439, 264, 9573, 10884, 19160, 2295, 4358, 412, 452, 26400, 13], "temperature": 0.0, "avg_logprob": -0.15454189466393511, "compression_ratio": 1.782258064516129, "no_speech_prob": 0.00018997947336174548}, {"id": 317, "seek": 133040, "start": 1330.4, "end": 1334.4, "text": " The hard part, if you go to the other languages, is that you're going to be...", "tokens": [440, 1152, 644, 11, 498, 291, 352, 281, 264, 661, 8650, 11, 307, 300, 291, 434, 516, 281, 312, 485], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 318, "seek": 133040, "start": 1334.4, "end": 1337.4, "text": " You need to have something to manipulate these...", "tokens": [509, 643, 281, 362, 746, 281, 20459, 613, 485], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 319, "seek": 133040, "start": 1337.4, "end": 1340.4, "text": " For example, this function table is very critical.", "tokens": [1171, 1365, 11, 341, 2445, 3199, 307, 588, 4924, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 320, "seek": 133040, "start": 1340.4, "end": 1343.4, "text": " So you need to be able to talk to that and hook into that.", "tokens": [407, 291, 643, 281, 312, 1075, 281, 751, 281, 300, 293, 6328, 666, 300, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 321, "seek": 133040, "start": 1343.4, "end": 1346.4, "text": " That's going to be the tricky part, but it's definitely possible.", "tokens": [663, 311, 516, 281, 312, 264, 12414, 644, 11, 457, 309, 311, 2138, 1944, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 322, "seek": 133040, "start": 1346.4, "end": 1350.4, "text": " But it's easier if you do it directly in WebAssembly.", "tokens": [583, 309, 311, 3571, 498, 291, 360, 309, 3838, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 323, "seek": 133040, "start": 1350.4, "end": 1356.4, "text": " Of course, you would never write a complex language directly in WebAssembly.", "tokens": [2720, 1164, 11, 291, 576, 1128, 2464, 257, 3997, 2856, 3838, 294, 9573, 10884, 19160, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 324, "seek": 133040, "start": 1356.4, "end": 1357.4, "text": " That's madness.", "tokens": [663, 311, 28736, 13], "temperature": 0.0, "avg_logprob": -0.0993845285462939, "compression_ratio": 1.7213740458015268, "no_speech_prob": 1.8616423403727822e-05}, {"id": 325, "seek": 135740, "start": 1357.4, "end": 1361.4, "text": " So you can do it with force, but I would not recommend it with anything.", "tokens": [407, 291, 393, 360, 309, 365, 3464, 11, 457, 286, 576, 406, 2748, 309, 365, 1340, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 326, "seek": 135740, "start": 1361.4, "end": 1363.4, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 327, "seek": 135740, "start": 1363.4, "end": 1365.4, "text": " One more question.", "tokens": [1485, 544, 1168, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 328, "seek": 135740, "start": 1365.4, "end": 1371.4, "text": " Yes, I'm interested because you also used WebAssembly to see compiler.", "tokens": [1079, 11, 286, 478, 3102, 570, 291, 611, 1143, 9573, 10884, 19160, 281, 536, 31958, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 329, "seek": 135740, "start": 1371.4, "end": 1373.4, "text": " Yes, I used it.", "tokens": [1079, 11, 286, 1143, 309, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 330, "seek": 135740, "start": 1373.4, "end": 1382.4, "text": " You had poor performance compared to C. Have you checked the regions?", "tokens": [509, 632, 4716, 3389, 5347, 281, 383, 13, 3560, 291, 10033, 264, 10682, 30], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 331, "seek": 135740, "start": 1382.4, "end": 1383.4, "text": " I didn't know.", "tokens": [286, 994, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 332, "seek": 135740, "start": 1383.4, "end": 1385.4, "text": " I used the WebAssembly to see compiler.", "tokens": [286, 1143, 264, 9573, 10884, 19160, 281, 536, 31958, 13], "temperature": 0.0, "avg_logprob": -0.20625104186355428, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.0010459661716595292}, {"id": 333, "seek": 138540, "start": 1385.4, "end": 1388.4, "text": " The performance was quite on par with...", "tokens": [440, 3389, 390, 1596, 322, 971, 365, 485], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 334, "seek": 138540, "start": 1388.4, "end": 1392.4, "text": " So if I took the C algorithm, it was about...", "tokens": [407, 498, 286, 1890, 264, 383, 9284, 11, 309, 390, 466, 485], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 335, "seek": 138540, "start": 1392.4, "end": 1397.4, "text": " It's a bad benchmark, but the performance was about 10% slower.", "tokens": [467, 311, 257, 1578, 18927, 11, 457, 264, 3389, 390, 466, 1266, 4, 14009, 13], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 336, "seek": 138540, "start": 1397.4, "end": 1402.4, "text": " So it was not much slower than native binary.", "tokens": [407, 309, 390, 406, 709, 14009, 813, 8470, 17434, 13], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 337, "seek": 138540, "start": 1402.4, "end": 1407.4, "text": " So it's C-compiled to native and C-compiled to WebAssembly was only a little bit slower.", "tokens": [407, 309, 311, 383, 12, 21541, 7292, 281, 8470, 293, 383, 12, 21541, 7292, 281, 9573, 10884, 19160, 390, 787, 257, 707, 857, 14009, 13], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 338, "seek": 138540, "start": 1407.4, "end": 1410.4, "text": " Of course, you are running...", "tokens": [2720, 1164, 11, 291, 366, 2614, 485], "temperature": 0.0, "avg_logprob": -0.17013795035226004, "compression_ratio": 1.5671641791044777, "no_speech_prob": 9.798823884921148e-05}, {"id": 339, "seek": 141040, "start": 1410.4, "end": 1416.4, "text": " Okay, but you are running in WebAssembly, you are still running in virtual machine, right?", "tokens": [1033, 11, 457, 291, 366, 2614, 294, 9573, 10884, 19160, 11, 291, 366, 920, 2614, 294, 6374, 3479, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.21563698409439683, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00012859550770372152}, {"id": 340, "seek": 141040, "start": 1416.4, "end": 1420.4, "text": " So the fact that the performance is going to be maybe a little bit slower,", "tokens": [407, 264, 1186, 300, 264, 3389, 307, 516, 281, 312, 1310, 257, 707, 857, 14009, 11], "temperature": 0.0, "avg_logprob": -0.21563698409439683, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00012859550770372152}, {"id": 341, "seek": 141040, "start": 1420.4, "end": 1425.4, "text": " but I thought it was still okay, given that you're still in a VM.", "tokens": [457, 286, 1194, 309, 390, 920, 1392, 11, 2212, 300, 291, 434, 920, 294, 257, 18038, 13], "temperature": 0.0, "avg_logprob": -0.21563698409439683, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00012859550770372152}, {"id": 342, "seek": 142540, "start": 1425.4, "end": 1441.4, "text": " We need to solve. That's amazing.", "tokens": [50364, 492, 643, 281, 5039, 13, 663, 311, 2243, 13, 51164], "temperature": 0.0, "avg_logprob": -0.6091778675715128, "compression_ratio": 0.8048780487804879, "no_speech_prob": 0.0006164851947687566}], "language": "en"}