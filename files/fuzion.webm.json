{"text": " A really cool, interesting project, a new language being presented by Fridtjof called Fusion on the OpenJDK. Final session of the day, thank you so much for being with us, some of you, all day. So let's start with Fusion or end with Fusion. OK, thank you for staying so long, thank you for Gertjans, he just downloaded the latest version of my slide deck and was a bit shocked that it's almost one hundred slides and only have twenty minutes left, so let's see how that will work out. For those who came for the Fusion stickers, please pass them around and take one. So Fusion, a new language, and it's different, it's more from a Java perspective. But there's some overlap, you will see. So basically the idea, the original idea of Fusion was to have something like a simpler Java to simplify Java's features into Fusion features. Bit of my background, I did work on compilers for about thirty years, a big part of that working on read time Java implementations, read time garbage collection and so on. Start with motivating a quote from John Bacchus, the inventor of Fortran, who worked a lot on functional programming but was very disappointed because his work on functional programming basically failed and would likely always fail because functional programming is easy to do hard things but incredibly difficult to do simple things. Fusion has evolved into a functional language and I think, I hope, I find ways to even make the easy things easy with that. So the motivation of Fusion is we see that languages like Java get more and more things packed in there. We already have classes, methods, interfaces, constructors, traits in other languages, records, structs, packages and so on. In Fusion, all of these map to one single concept, which is the concept of a Fusion feature. Then I see today's compilers are much more powerful, so actually to distinguish whether some feature is used like a method or like a class or like a constructor is something that the compiler decides, then it is not needed that the developer decides that. And we see that more and more systems are becoming safety critical, so we need to ensure correctness. And I see that tools have to play in a very important role in ensuring this correctness by static analysis. Fusion is available on GitHub, there is a website flung.dev that gives an introduction into the language with lots of examples, lots of design documents, lots of ideas collections. Please go through that. I can't give a language introduction here, but yeah, you'll find more there. Fusion is backed by a small company, Tokiwa, with currently four employees. One of them is sitting here with us in the group, Michael. Now coming actually to this talk. So I will start with a very quick introduction into what the Fusion language looks like from a Java perspective, then talk a bit about side effects and their dangers, then propose algebraic effects as a solution to manage side effects and give lots of code examples how you could do these things in Fusion. So here a small example in Fusion, I will give a Java equivalent on the right side and the Fusion code on the left side that you can quickly understand what it's about. So I said Fusion maps Java features to Fusion features. So in Java, if you have a package in Fusion, it's just a Fusion feature, in this case Demo. If you have a class in Java, it is also a Fusion feature that is nested in another Fusion feature. If you have a method in Java, it is again a Fusion feature that is nested in this case in the Hello surrounding feature. In this case, what makes this feature different is that it's a function that returns a result which you can see from the result type here, which is unit. Unit type in Fusion is pretty much what the void type is in Java, but with the exception that it is a real type, so you can declare variables of type unit, you can return this as a value. It is not a very interesting value, but you can have this as a full-fetched type with only one single value. In contrast to that, void is also a type in Fusion, but that gets interesting again because void is a type that has no values. So basically the result type of something like system exit in Fusion would be void, which means it will never return. Then printing something is easy, there is a standard library function say that, in this case, prints hello world. Fusion uses a lot of type inferencing, so the result type unit here actually can be inferred because that's also the result type of say, so we don't need to explicitly note this. Then, I'll go back here, very similar to Java. If you have code like that, you don't have anything to run yet. You need in Java, you need some main function. In Fusion, there is one feature which is called the universe which surrounds everything and code put in the universe like here gets executed if you run your application. You can pass arguments to features and arguments are fields within those features and fields are also features, so they come in the same class, but features that are pre-calculated that hold a value. Fusion has inheritance, so you can define a feature hello to that inherits from hello. You can create an instance of that and call features on that. That much to a quick introduction into the language syntax and how it works. There's a number of things that Fusion does not have and mostly because these are things that are considered to a certain extent harmful in a safe to critical environment. There's no dynamic loading, there's nothing like macros, no reflection, no pointer arithmetic. Many of these things also Java doesn't have. There is no uncontrolled mutual abilities, so you cannot easily change variables. There's no direct support for exceptions in the language. The reason for this is we must know what the code does. We want to do static analysis of the code to ensure safety and also to a certain extent to allow better optimizations to increase the performance. Bitmare more on side effects and security. We learned a lot about security today already in earlier talks, but mostly addressing security aspects of the software development process and managing of security issues. I now come from the language side and say what we could do from the programming language to improve the security. If you look back at recent securities a lot, we learned about lock for J today, but there are similar things with Spring Shell, even the Rust community has similar issues. What these issues have in common is that library code that is used has unexpected side effects. You use a logging library, you don't expect this to go to the Internet and make an arbitrary connection and download code from somewhere else in the world. That is the common problem. One way that is used by many new upcoming language to control side effects is to use algebraic effects. Let me quickly explain to you what algebraic effect is. An algebraic effect is basically a set of non-functional operations that code might perform. These are operations that do not have an effect on the actual calculation on the return value of a function. Java already has one kind of algebraic effect built into the language, which is throws for methods that throw exceptions. But algebraic effect is more a broader concept. This is just one example that Java supports. Any operation in an algebraic effect can either resume or abort. So typically, if an algebraic effect is reading some data from some external input, it would return the read data and resume operation with the value that was read, while an operation that would be something like throw an exception would perform an abort, so it will not return but jump back to the corresponding handler. Side effects can be implemented by different implementations of the effect handlers. So there is no strict fixed wiring from the operations to a particular implementation. And very similar to exception handlers, effects may be nested. There's a kind of contrary view to two words algebraic effects. You can see algebraic effects. What I've presented so far is as the effects that the code might have, but you could also see them as capabilities that the code might require. Martin Odelski is starting a big research project in that area. What I do is I define my exception, which is our exception implementation, as a feature inheriting from the base library feature simple effect, which is just a basic standard effect, and our implementation of throw is just abort. So the simplest way to stop an operation. And now we define one feature that throws an exception, and what we do here is we call the operations throw, but we need to have an instance of the algebraic effect. And the syntax we use in Fusion for that is we use the type of the effect, which is my exception, from the environment. So.n means taking the innermost instance of that effect in the current environment and calling that operation on it. When we do that, we should declare in the signature of the function that this function requires the effect my exception. So this is very similar to a throws clause in Java. If I throw an unchecked exception, I need to declare that. Here if I require a certain effect, I declare this with the exclamation mark. Now I add some prints just to show what this code actually does, and I want to call this function, this feature F now, to call it. I have to first install an instance of the effect. So I create an instance of the my exception effect here called use on is, which is a standard effect function that takes a lambda expression, which then calls the code that is executed while this effect is installed. So adding some more prints that you see what is happening, and if I now run this code here, you see that it prints, the exception is installed, it prints the before throw, throw directly jumps, very similar like an exception, out of the use here, and we continue with the we are done. So the code after an operation that aborts here will not be executed at all, very similar to exceptions. Yeah, now let me talk a bit about mutation. I told you that fusion doesn't allow direct mutation of fields, so fields are immutable, which means if we do have code like that, we declare a field x, assign 1, 2, 3 to it, print it, and then assign 2 times x to another field x. We see the expected behavior, but if we create a feature that prints this field x, and try to compile this, or try to run this, we actually get an error, because the problem is this x here is not clear which one is referenced here, because we have two different variables here, there's two axes here, the first and the second, and they are only visible for the code following that. So we get an error message that there are two different axes, and that source code position here doesn't know which one to choose. So really every assignment creates a new field, and these fields are immutable. To make them mutable, to get actually the desired effect that we can print x here, we would have to create a mutable integer value, which is with the base library function mute, creates a mutable instance, assign this to the variable x, and now if we want to update this, we don't create a new field, which would be the colon equals operator, but we have an error operator which updates the value with a new value. If we run this now, behaves first like the code before, but this time the show x function can actually access this single variable, because now we have only one field left. We can now analyze this code for the effects that this code requires, and if we do that, we see there's two effects, there's IO out, this performs output, and there's the mutate effect because we have an update of a mutable field in our code. Now not all variables, very few variables actually usually need to be mutable. Here's an example of a small loop with an index variable counting from 0 to 9, and printing them, if we analyze this code for effects, we see that this only depends on the IO out effect. The reason is that every loop iteration creates a new instance of that variable, so we don't update the i variable here, but we have one independent instance for every iteration of the loop. So no variable is mutated, a new instance is created for every iteration. I want to talk a bit about error handling now, and show how the function can produce an error, and show them three different ways of how error handling could be done. The function I use is just to divide, that divides two integers, and I call this in a show div function that calls divide and prints the result, and then I call this with three different value pairs, and if I call this, I get, not very surprising, I get an error, there is a division by zero, the precondition of the division is not fulfilled. So that's the standard error handling in fusion, but it's not very nice because you have the whole application for failing. If you want to now somehow treat that error, what we could do is return an outcome, which is similar to Rust's result, which is basically a choice type between an error and an actually 32-bit integer, and check the case, if B is zero, we return an error, otherwise we return the result of the division, and if we run this, now the application runs through, it doesn't terminate, and in the middle case, we print the outcome, which is an error here. But if we want to now actually, after calling the divide, want to know was this divide successful or not, we would need to check the cases, so we need to distinguish whether we actually got a value, or we got an error, we can do this with a match over the different choices. Now an alternative would be to use the standard library try effect, which is kind of the default exception based on algebraic effects in fusion, and to do that, instead of returning an outcome, this would be just a function returning a 32-bit integer, but requiring the try effect to be installed, and now instead of causing an error, we would raise the error of the try instance in the current environment, so we don't need the else anymore because the raise would abort and would return immediately, so we could just continue with the code there. And when we call the divide now, we have to call it with an instance of the try effect being installed, so just like before, this can be done through a base library function. Try that installs an instance and calls the lambda, which is provided as a parameter, and this can then be matched very similarly to the outcome, but the big difference is that now the code in between, in between the position where the error is, and where we have this call, does not need to pass along these outcomes all the way, I'll come to an end very soon, but we can directly work with the i32s and the try would jump out directly, so we would see this outcome. So the penultimate slide, the current slide, the status of fusion, it's still very much in development, the language is getting a bit more stable recently, but there's still a lot of work, mostly also in the base library. The current implementation has two backends, one running on a JVM, and there's also a C code backend, and there's basic analysis tools available, as I've shown you, the effects analysis. Java maps actually very well to fusion, there's a tool that allows calling all of Java APIs, creating Java APIs from a fusion APIs from a Java module that we can call into Java, what doesn't work yet well is calling back from Java into fusion, but there's at least in one way, it's one-to-one mapping. We have effects to encapsulate non-functional aspects, and I ask everyone please have a look, we're happy for any feedback. Thank you for staying so long, I think time is over. The match is still needed because this try here installs the effect, and an effect in the case of an abort has to provide some way to join the value that is returned in the non-abort case with the value that is returned in the abort case, and for the try effect this join is just made by producing a value of type outcome, which is the choice between error and the value, but there could be other effects that would just replace it by a default value in that case, so it depends on the effect, but here it's definitely still needed, yeah. Do we have time, yeah? Yeah, I saw that at some point you showed that there was an IO effect, and I also saw a lot of code that uses the same function, which I presume uses that effect, but can you see the effect using any of the examples? Okay, yes, you took very good care, thank you. Yeah, it is not decided yet where the compiler should be strict and require this annotation. The current idea is that for basic code we should not require this annotation, but for a public library function we definitely want to know what are the effects. So, I don't want to enforce this for everything or for all the intermediate values, and there's also some cases where only a static analysis of a whole application can actually determine what the effects are, so static analysis plays a very important role there. I don't want to enforce too much typing basically for these effects here. Another one, there is, like John for example has this distinction between runtime exceptions and checked exceptions, and there are just these kind of exceptions that can have pretty much any code, like out of memory exception or static load, and I wonder how do you handle these kind of cases? Oops, they're shutting us down here. Okay. It's a small hint. I actually, it's not nothing of that is done yet, but I think I would like to get one step further and make it user configurable. What are the effects that you want to have considered acceptable in your environment? Like you want to have maybe add some debugging print or some logging in somewhere nested in some internal function that shouldn't have forced you to add effects all over through the code. So we must have some set, some way to define for the debugging build. These are the effects that are in there, and please don't complain about that. But we have to still see how we actually will do that. Thank you so much. Thank you for saying so long. Thank you. Thank you very much for attending the freegear room. This will be a room next year again. Hopefully we'll have two days and we'll have more time for sessions and hopefully many of you will submit proposals. You will all be very welcome to present in the freegear room next year. Thank you very much for coming.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.26, "text": " A really cool, interesting project, a new language being presented by Fridtjof called", "tokens": [316, 534, 1627, 11, 1880, 1716, 11, 257, 777, 2856, 885, 8212, 538, 1526, 327, 83, 73, 2670, 1219], "temperature": 0.0, "avg_logprob": -0.4056116649082729, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.524631142616272}, {"id": 1, "seek": 0, "start": 13.26, "end": 18.28, "text": " Fusion on the OpenJDK.", "tokens": [36721, 322, 264, 7238, 41, 35, 42, 13], "temperature": 0.0, "avg_logprob": -0.4056116649082729, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.524631142616272}, {"id": 2, "seek": 0, "start": 18.28, "end": 23.48, "text": " Final session of the day, thank you so much for being with us, some of you, all day.", "tokens": [13443, 5481, 295, 264, 786, 11, 1309, 291, 370, 709, 337, 885, 365, 505, 11, 512, 295, 291, 11, 439, 786, 13], "temperature": 0.0, "avg_logprob": -0.4056116649082729, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.524631142616272}, {"id": 3, "seek": 0, "start": 23.48, "end": 26.64, "text": " So let's start with Fusion or end with Fusion.", "tokens": [407, 718, 311, 722, 365, 36721, 420, 917, 365, 36721, 13], "temperature": 0.0, "avg_logprob": -0.4056116649082729, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.524631142616272}, {"id": 4, "seek": 2664, "start": 26.64, "end": 31.28, "text": " OK, thank you for staying so long, thank you for Gertjans, he just downloaded the latest", "tokens": [2264, 11, 1309, 291, 337, 7939, 370, 938, 11, 1309, 291, 337, 460, 911, 73, 599, 11, 415, 445, 21748, 264, 6792], "temperature": 0.0, "avg_logprob": -0.17078245253789992, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.0002395625488134101}, {"id": 5, "seek": 2664, "start": 31.28, "end": 35.68, "text": " version of my slide deck and was a bit shocked that it's almost one hundred slides and only", "tokens": [3037, 295, 452, 4137, 9341, 293, 390, 257, 857, 12763, 300, 309, 311, 1920, 472, 3262, 9788, 293, 787], "temperature": 0.0, "avg_logprob": -0.17078245253789992, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.0002395625488134101}, {"id": 6, "seek": 2664, "start": 35.68, "end": 39.68, "text": " have twenty minutes left, so let's see how that will work out.", "tokens": [362, 7699, 2077, 1411, 11, 370, 718, 311, 536, 577, 300, 486, 589, 484, 13], "temperature": 0.0, "avg_logprob": -0.17078245253789992, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.0002395625488134101}, {"id": 7, "seek": 2664, "start": 39.68, "end": 48.96, "text": " For those who came for the Fusion stickers, please pass them around and take one.", "tokens": [1171, 729, 567, 1361, 337, 264, 36721, 21019, 11, 1767, 1320, 552, 926, 293, 747, 472, 13], "temperature": 0.0, "avg_logprob": -0.17078245253789992, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.0002395625488134101}, {"id": 8, "seek": 2664, "start": 48.96, "end": 56.6, "text": " So Fusion, a new language, and it's different, it's more from a Java perspective.", "tokens": [407, 36721, 11, 257, 777, 2856, 11, 293, 309, 311, 819, 11, 309, 311, 544, 490, 257, 10745, 4585, 13], "temperature": 0.0, "avg_logprob": -0.17078245253789992, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.0002395625488134101}, {"id": 9, "seek": 5660, "start": 56.6, "end": 61.92, "text": " But there's some overlap, you will see.", "tokens": [583, 456, 311, 512, 19959, 11, 291, 486, 536, 13], "temperature": 0.0, "avg_logprob": -0.20328940468272944, "compression_ratio": 1.5803571428571428, "no_speech_prob": 1.0942302651528735e-05}, {"id": 10, "seek": 5660, "start": 61.92, "end": 66.72, "text": " So basically the idea, the original idea of Fusion was to have something like a simpler", "tokens": [407, 1936, 264, 1558, 11, 264, 3380, 1558, 295, 36721, 390, 281, 362, 746, 411, 257, 18587], "temperature": 0.0, "avg_logprob": -0.20328940468272944, "compression_ratio": 1.5803571428571428, "no_speech_prob": 1.0942302651528735e-05}, {"id": 11, "seek": 5660, "start": 66.72, "end": 74.28, "text": " Java to simplify Java's features into Fusion features.", "tokens": [10745, 281, 20460, 10745, 311, 4122, 666, 36721, 4122, 13], "temperature": 0.0, "avg_logprob": -0.20328940468272944, "compression_ratio": 1.5803571428571428, "no_speech_prob": 1.0942302651528735e-05}, {"id": 12, "seek": 5660, "start": 74.28, "end": 79.4, "text": " Bit of my background, I did work on compilers for about thirty years, a big part of that", "tokens": [9101, 295, 452, 3678, 11, 286, 630, 589, 322, 715, 388, 433, 337, 466, 11790, 924, 11, 257, 955, 644, 295, 300], "temperature": 0.0, "avg_logprob": -0.20328940468272944, "compression_ratio": 1.5803571428571428, "no_speech_prob": 1.0942302651528735e-05}, {"id": 13, "seek": 5660, "start": 79.4, "end": 85.12, "text": " working on read time Java implementations, read time garbage collection and so on.", "tokens": [1364, 322, 1401, 565, 10745, 4445, 763, 11, 1401, 565, 14150, 5765, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.20328940468272944, "compression_ratio": 1.5803571428571428, "no_speech_prob": 1.0942302651528735e-05}, {"id": 14, "seek": 8512, "start": 85.12, "end": 93.92, "text": " Start with motivating a quote from John Bacchus, the inventor of Fortran, who worked a lot", "tokens": [6481, 365, 41066, 257, 6513, 490, 2619, 363, 326, 339, 301, 11, 264, 41593, 295, 11002, 4257, 11, 567, 2732, 257, 688], "temperature": 0.0, "avg_logprob": -0.18941290482230808, "compression_ratio": 1.678391959798995, "no_speech_prob": 3.166576789226383e-05}, {"id": 15, "seek": 8512, "start": 93.92, "end": 99.0, "text": " on functional programming but was very disappointed because his work on functional programming", "tokens": [322, 11745, 9410, 457, 390, 588, 13856, 570, 702, 589, 322, 11745, 9410], "temperature": 0.0, "avg_logprob": -0.18941290482230808, "compression_ratio": 1.678391959798995, "no_speech_prob": 3.166576789226383e-05}, {"id": 16, "seek": 8512, "start": 99.0, "end": 104.48, "text": " basically failed and would likely always fail because functional programming is easy to", "tokens": [1936, 7612, 293, 576, 3700, 1009, 3061, 570, 11745, 9410, 307, 1858, 281], "temperature": 0.0, "avg_logprob": -0.18941290482230808, "compression_ratio": 1.678391959798995, "no_speech_prob": 3.166576789226383e-05}, {"id": 17, "seek": 8512, "start": 104.48, "end": 111.04, "text": " do hard things but incredibly difficult to do simple things.", "tokens": [360, 1152, 721, 457, 6252, 2252, 281, 360, 2199, 721, 13], "temperature": 0.0, "avg_logprob": -0.18941290482230808, "compression_ratio": 1.678391959798995, "no_speech_prob": 3.166576789226383e-05}, {"id": 18, "seek": 11104, "start": 111.04, "end": 117.16000000000001, "text": " Fusion has evolved into a functional language and I think, I hope, I find ways to even make", "tokens": [36721, 575, 14178, 666, 257, 11745, 2856, 293, 286, 519, 11, 286, 1454, 11, 286, 915, 2098, 281, 754, 652], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 19, "seek": 11104, "start": 117.16000000000001, "end": 120.16000000000001, "text": " the easy things easy with that.", "tokens": [264, 1858, 721, 1858, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 20, "seek": 11104, "start": 120.16000000000001, "end": 125.48, "text": " So the motivation of Fusion is we see that languages like Java get more and more things", "tokens": [407, 264, 12335, 295, 36721, 307, 321, 536, 300, 8650, 411, 10745, 483, 544, 293, 544, 721], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 21, "seek": 11104, "start": 125.48, "end": 126.48, "text": " packed in there.", "tokens": [13265, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 22, "seek": 11104, "start": 126.48, "end": 132.68, "text": " We already have classes, methods, interfaces, constructors, traits in other languages, records,", "tokens": [492, 1217, 362, 5359, 11, 7150, 11, 28416, 11, 7690, 830, 11, 19526, 294, 661, 8650, 11, 7724, 11], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 23, "seek": 11104, "start": 132.68, "end": 134.68, "text": " structs, packages and so on.", "tokens": [6594, 82, 11, 17401, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.15567450576953673, "compression_ratio": 1.6572769953051643, "no_speech_prob": 3.023167846549768e-05}, {"id": 24, "seek": 13468, "start": 134.68, "end": 142.48000000000002, "text": " In Fusion, all of these map to one single concept, which is the concept of a Fusion feature.", "tokens": [682, 36721, 11, 439, 295, 613, 4471, 281, 472, 2167, 3410, 11, 597, 307, 264, 3410, 295, 257, 36721, 4111, 13], "temperature": 0.0, "avg_logprob": -0.1417697551203709, "compression_ratio": 1.7410358565737052, "no_speech_prob": 6.436002422560705e-06}, {"id": 25, "seek": 13468, "start": 142.48000000000002, "end": 146.92000000000002, "text": " Then I see today's compilers are much more powerful, so actually to distinguish whether", "tokens": [1396, 286, 536, 965, 311, 715, 388, 433, 366, 709, 544, 4005, 11, 370, 767, 281, 20206, 1968], "temperature": 0.0, "avg_logprob": -0.1417697551203709, "compression_ratio": 1.7410358565737052, "no_speech_prob": 6.436002422560705e-06}, {"id": 26, "seek": 13468, "start": 146.92000000000002, "end": 152.92000000000002, "text": " some feature is used like a method or like a class or like a constructor is something", "tokens": [512, 4111, 307, 1143, 411, 257, 3170, 420, 411, 257, 1508, 420, 411, 257, 47479, 307, 746], "temperature": 0.0, "avg_logprob": -0.1417697551203709, "compression_ratio": 1.7410358565737052, "no_speech_prob": 6.436002422560705e-06}, {"id": 27, "seek": 13468, "start": 152.92000000000002, "end": 158.60000000000002, "text": " that the compiler decides, then it is not needed that the developer decides that.", "tokens": [300, 264, 31958, 14898, 11, 550, 309, 307, 406, 2978, 300, 264, 10754, 14898, 300, 13], "temperature": 0.0, "avg_logprob": -0.1417697551203709, "compression_ratio": 1.7410358565737052, "no_speech_prob": 6.436002422560705e-06}, {"id": 28, "seek": 13468, "start": 158.60000000000002, "end": 163.96, "text": " And we see that more and more systems are becoming safety critical, so we need to ensure", "tokens": [400, 321, 536, 300, 544, 293, 544, 3652, 366, 5617, 4514, 4924, 11, 370, 321, 643, 281, 5586], "temperature": 0.0, "avg_logprob": -0.1417697551203709, "compression_ratio": 1.7410358565737052, "no_speech_prob": 6.436002422560705e-06}, {"id": 29, "seek": 16396, "start": 163.96, "end": 165.6, "text": " correctness.", "tokens": [3006, 1287, 13], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 30, "seek": 16396, "start": 165.6, "end": 169.72, "text": " And I see that tools have to play in a very important role in ensuring this correctness", "tokens": [400, 286, 536, 300, 3873, 362, 281, 862, 294, 257, 588, 1021, 3090, 294, 16882, 341, 3006, 1287], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 31, "seek": 16396, "start": 169.72, "end": 173.48000000000002, "text": " by static analysis.", "tokens": [538, 13437, 5215, 13], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 32, "seek": 16396, "start": 173.48000000000002, "end": 181.88, "text": " Fusion is available on GitHub, there is a website flung.dev that gives an introduction into", "tokens": [36721, 307, 2435, 322, 23331, 11, 456, 307, 257, 3144, 932, 1063, 13, 40343, 300, 2709, 364, 9339, 666], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 33, "seek": 16396, "start": 181.88, "end": 187.44, "text": " the language with lots of examples, lots of design documents, lots of ideas collections.", "tokens": [264, 2856, 365, 3195, 295, 5110, 11, 3195, 295, 1715, 8512, 11, 3195, 295, 3487, 16641, 13], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 34, "seek": 16396, "start": 187.44, "end": 188.44, "text": " Please go through that.", "tokens": [2555, 352, 807, 300, 13], "temperature": 0.0, "avg_logprob": -0.19825479984283448, "compression_ratio": 1.555023923444976, "no_speech_prob": 1.1106887541245669e-05}, {"id": 35, "seek": 18844, "start": 188.44, "end": 196.2, "text": " I can't give a language introduction here, but yeah, you'll find more there.", "tokens": [286, 393, 380, 976, 257, 2856, 9339, 510, 11, 457, 1338, 11, 291, 603, 915, 544, 456, 13], "temperature": 0.0, "avg_logprob": -0.1782606237074908, "compression_ratio": 1.515695067264574, "no_speech_prob": 3.702081085066311e-05}, {"id": 36, "seek": 18844, "start": 196.2, "end": 200.6, "text": " Fusion is backed by a small company, Tokiwa, with currently four employees.", "tokens": [36721, 307, 20391, 538, 257, 1359, 2237, 11, 11036, 72, 4151, 11, 365, 4362, 1451, 6619, 13], "temperature": 0.0, "avg_logprob": -0.1782606237074908, "compression_ratio": 1.515695067264574, "no_speech_prob": 3.702081085066311e-05}, {"id": 37, "seek": 18844, "start": 200.6, "end": 206.12, "text": " One of them is sitting here with us in the group, Michael.", "tokens": [1485, 295, 552, 307, 3798, 510, 365, 505, 294, 264, 1594, 11, 5116, 13], "temperature": 0.0, "avg_logprob": -0.1782606237074908, "compression_ratio": 1.515695067264574, "no_speech_prob": 3.702081085066311e-05}, {"id": 38, "seek": 18844, "start": 206.12, "end": 207.68, "text": " Now coming actually to this talk.", "tokens": [823, 1348, 767, 281, 341, 751, 13], "temperature": 0.0, "avg_logprob": -0.1782606237074908, "compression_ratio": 1.515695067264574, "no_speech_prob": 3.702081085066311e-05}, {"id": 39, "seek": 18844, "start": 207.68, "end": 213.68, "text": " So I will start with a very quick introduction into what the Fusion language looks like from", "tokens": [407, 286, 486, 722, 365, 257, 588, 1702, 9339, 666, 437, 264, 36721, 2856, 1542, 411, 490], "temperature": 0.0, "avg_logprob": -0.1782606237074908, "compression_ratio": 1.515695067264574, "no_speech_prob": 3.702081085066311e-05}, {"id": 40, "seek": 21368, "start": 213.68, "end": 221.92000000000002, "text": " a Java perspective, then talk a bit about side effects and their dangers, then propose", "tokens": [257, 10745, 4585, 11, 550, 751, 257, 857, 466, 1252, 5065, 293, 641, 27701, 11, 550, 17421], "temperature": 0.0, "avg_logprob": -0.10992321497957472, "compression_ratio": 1.6216216216216217, "no_speech_prob": 1.384282859362429e-05}, {"id": 41, "seek": 21368, "start": 221.92000000000002, "end": 228.44, "text": " algebraic effects as a solution to manage side effects and give lots of code examples", "tokens": [21989, 299, 5065, 382, 257, 3827, 281, 3067, 1252, 5065, 293, 976, 3195, 295, 3089, 5110], "temperature": 0.0, "avg_logprob": -0.10992321497957472, "compression_ratio": 1.6216216216216217, "no_speech_prob": 1.384282859362429e-05}, {"id": 42, "seek": 21368, "start": 228.44, "end": 233.04000000000002, "text": " how you could do these things in Fusion.", "tokens": [577, 291, 727, 360, 613, 721, 294, 36721, 13], "temperature": 0.0, "avg_logprob": -0.10992321497957472, "compression_ratio": 1.6216216216216217, "no_speech_prob": 1.384282859362429e-05}, {"id": 43, "seek": 21368, "start": 233.04000000000002, "end": 241.84, "text": " So here a small example in Fusion, I will give a Java equivalent on the right side and", "tokens": [407, 510, 257, 1359, 1365, 294, 36721, 11, 286, 486, 976, 257, 10745, 10344, 322, 264, 558, 1252, 293], "temperature": 0.0, "avg_logprob": -0.10992321497957472, "compression_ratio": 1.6216216216216217, "no_speech_prob": 1.384282859362429e-05}, {"id": 44, "seek": 24184, "start": 241.84, "end": 245.52, "text": " the Fusion code on the left side that you can quickly understand what it's about.", "tokens": [264, 36721, 3089, 322, 264, 1411, 1252, 300, 291, 393, 2661, 1223, 437, 309, 311, 466, 13], "temperature": 0.0, "avg_logprob": -0.14355218410491943, "compression_ratio": 1.8121546961325967, "no_speech_prob": 9.366021913592704e-06}, {"id": 45, "seek": 24184, "start": 245.52, "end": 250.36, "text": " So I said Fusion maps Java features to Fusion features.", "tokens": [407, 286, 848, 36721, 11317, 10745, 4122, 281, 36721, 4122, 13], "temperature": 0.0, "avg_logprob": -0.14355218410491943, "compression_ratio": 1.8121546961325967, "no_speech_prob": 9.366021913592704e-06}, {"id": 46, "seek": 24184, "start": 250.36, "end": 256.88, "text": " So in Java, if you have a package in Fusion, it's just a Fusion feature, in this case Demo.", "tokens": [407, 294, 10745, 11, 498, 291, 362, 257, 7372, 294, 36721, 11, 309, 311, 445, 257, 36721, 4111, 11, 294, 341, 1389, 4686, 78, 13], "temperature": 0.0, "avg_logprob": -0.14355218410491943, "compression_ratio": 1.8121546961325967, "no_speech_prob": 9.366021913592704e-06}, {"id": 47, "seek": 24184, "start": 256.88, "end": 263.52, "text": " If you have a class in Java, it is also a Fusion feature that is nested in another Fusion", "tokens": [759, 291, 362, 257, 1508, 294, 10745, 11, 309, 307, 611, 257, 36721, 4111, 300, 307, 15646, 292, 294, 1071, 36721], "temperature": 0.0, "avg_logprob": -0.14355218410491943, "compression_ratio": 1.8121546961325967, "no_speech_prob": 9.366021913592704e-06}, {"id": 48, "seek": 24184, "start": 263.52, "end": 267.16, "text": " feature.", "tokens": [4111, 13], "temperature": 0.0, "avg_logprob": -0.14355218410491943, "compression_ratio": 1.8121546961325967, "no_speech_prob": 9.366021913592704e-06}, {"id": 49, "seek": 26716, "start": 267.16, "end": 275.08000000000004, "text": " If you have a method in Java, it is again a Fusion feature that is nested in this case", "tokens": [759, 291, 362, 257, 3170, 294, 10745, 11, 309, 307, 797, 257, 36721, 4111, 300, 307, 15646, 292, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.12510105803772642, "compression_ratio": 1.7203791469194314, "no_speech_prob": 3.904556251654867e-06}, {"id": 50, "seek": 26716, "start": 275.08000000000004, "end": 277.84000000000003, "text": " in the Hello surrounding feature.", "tokens": [294, 264, 2425, 11498, 4111, 13], "temperature": 0.0, "avg_logprob": -0.12510105803772642, "compression_ratio": 1.7203791469194314, "no_speech_prob": 3.904556251654867e-06}, {"id": 51, "seek": 26716, "start": 277.84000000000003, "end": 282.76000000000005, "text": " In this case, what makes this feature different is that it's a function that returns a result", "tokens": [682, 341, 1389, 11, 437, 1669, 341, 4111, 819, 307, 300, 309, 311, 257, 2445, 300, 11247, 257, 1874], "temperature": 0.0, "avg_logprob": -0.12510105803772642, "compression_ratio": 1.7203791469194314, "no_speech_prob": 3.904556251654867e-06}, {"id": 52, "seek": 26716, "start": 282.76000000000005, "end": 288.92, "text": " which you can see from the result type here, which is unit.", "tokens": [597, 291, 393, 536, 490, 264, 1874, 2010, 510, 11, 597, 307, 4985, 13], "temperature": 0.0, "avg_logprob": -0.12510105803772642, "compression_ratio": 1.7203791469194314, "no_speech_prob": 3.904556251654867e-06}, {"id": 53, "seek": 26716, "start": 288.92, "end": 294.64000000000004, "text": " Unit type in Fusion is pretty much what the void type is in Java, but with the exception", "tokens": [27894, 2010, 294, 36721, 307, 1238, 709, 437, 264, 22009, 2010, 307, 294, 10745, 11, 457, 365, 264, 11183], "temperature": 0.0, "avg_logprob": -0.12510105803772642, "compression_ratio": 1.7203791469194314, "no_speech_prob": 3.904556251654867e-06}, {"id": 54, "seek": 29464, "start": 294.64, "end": 300.0, "text": " that it is a real type, so you can declare variables of type unit, you can return this", "tokens": [300, 309, 307, 257, 957, 2010, 11, 370, 291, 393, 19710, 9102, 295, 2010, 4985, 11, 291, 393, 2736, 341], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 55, "seek": 29464, "start": 300.0, "end": 301.0, "text": " as a value.", "tokens": [382, 257, 2158, 13], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 56, "seek": 29464, "start": 301.0, "end": 307.91999999999996, "text": " It is not a very interesting value, but you can have this as a full-fetched type with", "tokens": [467, 307, 406, 257, 588, 1880, 2158, 11, 457, 291, 393, 362, 341, 382, 257, 1577, 12, 69, 7858, 292, 2010, 365], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 57, "seek": 29464, "start": 307.91999999999996, "end": 310.47999999999996, "text": " only one single value.", "tokens": [787, 472, 2167, 2158, 13], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 58, "seek": 29464, "start": 310.47999999999996, "end": 317.4, "text": " In contrast to that, void is also a type in Fusion, but that gets interesting again because", "tokens": [682, 8712, 281, 300, 11, 22009, 307, 611, 257, 2010, 294, 36721, 11, 457, 300, 2170, 1880, 797, 570], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 59, "seek": 29464, "start": 317.4, "end": 319.91999999999996, "text": " void is a type that has no values.", "tokens": [22009, 307, 257, 2010, 300, 575, 572, 4190, 13], "temperature": 0.0, "avg_logprob": -0.11970286215505292, "compression_ratio": 1.7765957446808511, "no_speech_prob": 9.514790690445807e-06}, {"id": 60, "seek": 31992, "start": 319.92, "end": 325.32, "text": " So basically the result type of something like system exit in Fusion would be void,", "tokens": [407, 1936, 264, 1874, 2010, 295, 746, 411, 1185, 11043, 294, 36721, 576, 312, 22009, 11], "temperature": 0.0, "avg_logprob": -0.2128185472990337, "compression_ratio": 1.5829145728643217, "no_speech_prob": 9.42195526931755e-07}, {"id": 61, "seek": 31992, "start": 325.32, "end": 330.28000000000003, "text": " which means it will never return.", "tokens": [597, 1355, 309, 486, 1128, 2736, 13], "temperature": 0.0, "avg_logprob": -0.2128185472990337, "compression_ratio": 1.5829145728643217, "no_speech_prob": 9.42195526931755e-07}, {"id": 62, "seek": 31992, "start": 330.28000000000003, "end": 336.68, "text": " Then printing something is easy, there is a standard library function say that, in this", "tokens": [1396, 14699, 746, 307, 1858, 11, 456, 307, 257, 3832, 6405, 2445, 584, 300, 11, 294, 341], "temperature": 0.0, "avg_logprob": -0.2128185472990337, "compression_ratio": 1.5829145728643217, "no_speech_prob": 9.42195526931755e-07}, {"id": 63, "seek": 31992, "start": 336.68, "end": 339.56, "text": " case, prints hello world.", "tokens": [1389, 11, 22305, 7751, 1002, 13], "temperature": 0.0, "avg_logprob": -0.2128185472990337, "compression_ratio": 1.5829145728643217, "no_speech_prob": 9.42195526931755e-07}, {"id": 64, "seek": 31992, "start": 339.56, "end": 345.88, "text": " Fusion uses a lot of type inferencing, so the result type unit here actually can be", "tokens": [36721, 4960, 257, 688, 295, 2010, 13596, 13644, 11, 370, 264, 1874, 2010, 4985, 510, 767, 393, 312], "temperature": 0.0, "avg_logprob": -0.2128185472990337, "compression_ratio": 1.5829145728643217, "no_speech_prob": 9.42195526931755e-07}, {"id": 65, "seek": 34588, "start": 345.88, "end": 350.92, "text": " inferred because that's also the result type of say, so we don't need to explicitly note", "tokens": [13596, 986, 570, 300, 311, 611, 264, 1874, 2010, 295, 584, 11, 370, 321, 500, 380, 643, 281, 20803, 3637], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 66, "seek": 34588, "start": 350.92, "end": 354.12, "text": " this.", "tokens": [341, 13], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 67, "seek": 34588, "start": 354.12, "end": 359.6, "text": " Then, I'll go back here, very similar to Java.", "tokens": [1396, 11, 286, 603, 352, 646, 510, 11, 588, 2531, 281, 10745, 13], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 68, "seek": 34588, "start": 359.6, "end": 362.68, "text": " If you have code like that, you don't have anything to run yet.", "tokens": [759, 291, 362, 3089, 411, 300, 11, 291, 500, 380, 362, 1340, 281, 1190, 1939, 13], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 69, "seek": 34588, "start": 362.68, "end": 365.08, "text": " You need in Java, you need some main function.", "tokens": [509, 643, 294, 10745, 11, 291, 643, 512, 2135, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 70, "seek": 34588, "start": 365.08, "end": 371.2, "text": " In Fusion, there is one feature which is called the universe which surrounds everything and", "tokens": [682, 36721, 11, 456, 307, 472, 4111, 597, 307, 1219, 264, 6445, 597, 44576, 1203, 293], "temperature": 0.0, "avg_logprob": -0.17782068252563477, "compression_ratio": 1.5565610859728507, "no_speech_prob": 4.157117018621648e-06}, {"id": 71, "seek": 37120, "start": 371.2, "end": 379.2, "text": " code put in the universe like here gets executed if you run your application.", "tokens": [3089, 829, 294, 264, 6445, 411, 510, 2170, 17577, 498, 291, 1190, 428, 3861, 13], "temperature": 0.0, "avg_logprob": -0.13413531852490973, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.3924586710345466e-06}, {"id": 72, "seek": 37120, "start": 379.2, "end": 387.44, "text": " You can pass arguments to features and arguments are fields within those features and fields", "tokens": [509, 393, 1320, 12869, 281, 4122, 293, 12869, 366, 7909, 1951, 729, 4122, 293, 7909], "temperature": 0.0, "avg_logprob": -0.13413531852490973, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.3924586710345466e-06}, {"id": 73, "seek": 37120, "start": 387.44, "end": 393.28, "text": " are also features, so they come in the same class, but features that are pre-calculated", "tokens": [366, 611, 4122, 11, 370, 436, 808, 294, 264, 912, 1508, 11, 457, 4122, 300, 366, 659, 12, 9895, 2444, 770], "temperature": 0.0, "avg_logprob": -0.13413531852490973, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.3924586710345466e-06}, {"id": 74, "seek": 37120, "start": 393.28, "end": 396.96, "text": " that hold a value.", "tokens": [300, 1797, 257, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13413531852490973, "compression_ratio": 1.6390532544378698, "no_speech_prob": 1.3924586710345466e-06}, {"id": 75, "seek": 39696, "start": 396.96, "end": 403.44, "text": " Fusion has inheritance, so you can define a feature hello to that inherits from hello.", "tokens": [36721, 575, 32122, 11, 370, 291, 393, 6964, 257, 4111, 7751, 281, 300, 9484, 1208, 490, 7751, 13], "temperature": 0.0, "avg_logprob": -0.15772925337699994, "compression_ratio": 1.5939086294416243, "no_speech_prob": 8.938122846302576e-06}, {"id": 76, "seek": 39696, "start": 403.44, "end": 410.24, "text": " You can create an instance of that and call features on that.", "tokens": [509, 393, 1884, 364, 5197, 295, 300, 293, 818, 4122, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.15772925337699994, "compression_ratio": 1.5939086294416243, "no_speech_prob": 8.938122846302576e-06}, {"id": 77, "seek": 39696, "start": 410.24, "end": 418.76, "text": " That much to a quick introduction into the language syntax and how it works.", "tokens": [663, 709, 281, 257, 1702, 9339, 666, 264, 2856, 28431, 293, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.15772925337699994, "compression_ratio": 1.5939086294416243, "no_speech_prob": 8.938122846302576e-06}, {"id": 78, "seek": 39696, "start": 418.76, "end": 424.96, "text": " There's a number of things that Fusion does not have and mostly because these are things", "tokens": [821, 311, 257, 1230, 295, 721, 300, 36721, 775, 406, 362, 293, 5240, 570, 613, 366, 721], "temperature": 0.0, "avg_logprob": -0.15772925337699994, "compression_ratio": 1.5939086294416243, "no_speech_prob": 8.938122846302576e-06}, {"id": 79, "seek": 42496, "start": 424.96, "end": 430.59999999999997, "text": " that are considered to a certain extent harmful in a safe to critical environment.", "tokens": [300, 366, 4888, 281, 257, 1629, 8396, 19727, 294, 257, 3273, 281, 4924, 2823, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 80, "seek": 42496, "start": 430.59999999999997, "end": 436.4, "text": " There's no dynamic loading, there's nothing like macros, no reflection, no pointer arithmetic.", "tokens": [821, 311, 572, 8546, 15114, 11, 456, 311, 1825, 411, 7912, 2635, 11, 572, 12914, 11, 572, 23918, 42973, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 81, "seek": 42496, "start": 436.4, "end": 439.03999999999996, "text": " Many of these things also Java doesn't have.", "tokens": [5126, 295, 613, 721, 611, 10745, 1177, 380, 362, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 82, "seek": 42496, "start": 439.03999999999996, "end": 444.84, "text": " There is no uncontrolled mutual abilities, so you cannot easily change variables.", "tokens": [821, 307, 572, 36019, 28850, 16917, 11582, 11, 370, 291, 2644, 3612, 1319, 9102, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 83, "seek": 42496, "start": 444.84, "end": 449.4, "text": " There's no direct support for exceptions in the language.", "tokens": [821, 311, 572, 2047, 1406, 337, 22847, 294, 264, 2856, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 84, "seek": 42496, "start": 449.4, "end": 452.35999999999996, "text": " The reason for this is we must know what the code does.", "tokens": [440, 1778, 337, 341, 307, 321, 1633, 458, 437, 264, 3089, 775, 13], "temperature": 0.0, "avg_logprob": -0.16973662862972339, "compression_ratio": 1.613899613899614, "no_speech_prob": 1.3417089576250874e-05}, {"id": 85, "seek": 45236, "start": 452.36, "end": 458.6, "text": " We want to do static analysis of the code to ensure safety and also to a certain extent", "tokens": [492, 528, 281, 360, 13437, 5215, 295, 264, 3089, 281, 5586, 4514, 293, 611, 281, 257, 1629, 8396], "temperature": 0.0, "avg_logprob": -0.19363656119694786, "compression_ratio": 1.5434782608695652, "no_speech_prob": 8.797253030934371e-06}, {"id": 86, "seek": 45236, "start": 458.6, "end": 466.76, "text": " to allow better optimizations to increase the performance.", "tokens": [281, 2089, 1101, 5028, 14455, 281, 3488, 264, 3389, 13], "temperature": 0.0, "avg_logprob": -0.19363656119694786, "compression_ratio": 1.5434782608695652, "no_speech_prob": 8.797253030934371e-06}, {"id": 87, "seek": 45236, "start": 466.76, "end": 469.6, "text": " Bitmare more on side effects and security.", "tokens": [9101, 15455, 544, 322, 1252, 5065, 293, 3825, 13], "temperature": 0.0, "avg_logprob": -0.19363656119694786, "compression_ratio": 1.5434782608695652, "no_speech_prob": 8.797253030934371e-06}, {"id": 88, "seek": 45236, "start": 469.6, "end": 477.84000000000003, "text": " We learned a lot about security today already in earlier talks, but mostly addressing security", "tokens": [492, 3264, 257, 688, 466, 3825, 965, 1217, 294, 3071, 6686, 11, 457, 5240, 14329, 3825], "temperature": 0.0, "avg_logprob": -0.19363656119694786, "compression_ratio": 1.5434782608695652, "no_speech_prob": 8.797253030934371e-06}, {"id": 89, "seek": 47784, "start": 477.84, "end": 484.64, "text": " aspects of the software development process and managing of security issues.", "tokens": [7270, 295, 264, 4722, 3250, 1399, 293, 11642, 295, 3825, 2663, 13], "temperature": 0.0, "avg_logprob": -0.19048704924406828, "compression_ratio": 1.6233183856502242, "no_speech_prob": 2.5795174224185757e-05}, {"id": 90, "seek": 47784, "start": 484.64, "end": 490.88, "text": " I now come from the language side and say what we could do from the programming language", "tokens": [286, 586, 808, 490, 264, 2856, 1252, 293, 584, 437, 321, 727, 360, 490, 264, 9410, 2856], "temperature": 0.0, "avg_logprob": -0.19048704924406828, "compression_ratio": 1.6233183856502242, "no_speech_prob": 2.5795174224185757e-05}, {"id": 91, "seek": 47784, "start": 490.88, "end": 496.55999999999995, "text": " to improve the security.", "tokens": [281, 3470, 264, 3825, 13], "temperature": 0.0, "avg_logprob": -0.19048704924406828, "compression_ratio": 1.6233183856502242, "no_speech_prob": 2.5795174224185757e-05}, {"id": 92, "seek": 47784, "start": 496.55999999999995, "end": 501.28, "text": " If you look back at recent securities a lot, we learned about lock for J today, but there", "tokens": [759, 291, 574, 646, 412, 5162, 38597, 257, 688, 11, 321, 3264, 466, 4017, 337, 508, 965, 11, 457, 456], "temperature": 0.0, "avg_logprob": -0.19048704924406828, "compression_ratio": 1.6233183856502242, "no_speech_prob": 2.5795174224185757e-05}, {"id": 93, "seek": 47784, "start": 501.28, "end": 505.96, "text": " are similar things with Spring Shell, even the Rust community has similar issues.", "tokens": [366, 2531, 721, 365, 14013, 22863, 11, 754, 264, 34952, 1768, 575, 2531, 2663, 13], "temperature": 0.0, "avg_logprob": -0.19048704924406828, "compression_ratio": 1.6233183856502242, "no_speech_prob": 2.5795174224185757e-05}, {"id": 94, "seek": 50596, "start": 505.96, "end": 516.68, "text": " What these issues have in common is that library code that is used has unexpected side effects.", "tokens": [708, 613, 2663, 362, 294, 2689, 307, 300, 6405, 3089, 300, 307, 1143, 575, 13106, 1252, 5065, 13], "temperature": 0.0, "avg_logprob": -0.14520753713754508, "compression_ratio": 1.558659217877095, "no_speech_prob": 1.749503098835703e-05}, {"id": 95, "seek": 50596, "start": 516.68, "end": 522.0799999999999, "text": " You use a logging library, you don't expect this to go to the Internet and make an arbitrary", "tokens": [509, 764, 257, 27991, 6405, 11, 291, 500, 380, 2066, 341, 281, 352, 281, 264, 7703, 293, 652, 364, 23211], "temperature": 0.0, "avg_logprob": -0.14520753713754508, "compression_ratio": 1.558659217877095, "no_speech_prob": 1.749503098835703e-05}, {"id": 96, "seek": 50596, "start": 522.0799999999999, "end": 527.0, "text": " connection and download code from somewhere else in the world.", "tokens": [4984, 293, 5484, 3089, 490, 4079, 1646, 294, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.14520753713754508, "compression_ratio": 1.558659217877095, "no_speech_prob": 1.749503098835703e-05}, {"id": 97, "seek": 50596, "start": 527.0, "end": 530.12, "text": " That is the common problem.", "tokens": [663, 307, 264, 2689, 1154, 13], "temperature": 0.0, "avg_logprob": -0.14520753713754508, "compression_ratio": 1.558659217877095, "no_speech_prob": 1.749503098835703e-05}, {"id": 98, "seek": 53012, "start": 530.12, "end": 538.6, "text": " One way that is used by many new upcoming language to control side effects is to use", "tokens": [1485, 636, 300, 307, 1143, 538, 867, 777, 11500, 2856, 281, 1969, 1252, 5065, 307, 281, 764], "temperature": 0.0, "avg_logprob": -0.16801655292510986, "compression_ratio": 1.565217391304348, "no_speech_prob": 4.637058736989275e-06}, {"id": 99, "seek": 53012, "start": 538.6, "end": 541.8, "text": " algebraic effects.", "tokens": [21989, 299, 5065, 13], "temperature": 0.0, "avg_logprob": -0.16801655292510986, "compression_ratio": 1.565217391304348, "no_speech_prob": 4.637058736989275e-06}, {"id": 100, "seek": 53012, "start": 541.8, "end": 546.44, "text": " Let me quickly explain to you what algebraic effect is.", "tokens": [961, 385, 2661, 2903, 281, 291, 437, 21989, 299, 1802, 307, 13], "temperature": 0.0, "avg_logprob": -0.16801655292510986, "compression_ratio": 1.565217391304348, "no_speech_prob": 4.637058736989275e-06}, {"id": 101, "seek": 53012, "start": 546.44, "end": 554.52, "text": " An algebraic effect is basically a set of non-functional operations that code might", "tokens": [1107, 21989, 299, 1802, 307, 1936, 257, 992, 295, 2107, 12, 22845, 304, 7705, 300, 3089, 1062], "temperature": 0.0, "avg_logprob": -0.16801655292510986, "compression_ratio": 1.565217391304348, "no_speech_prob": 4.637058736989275e-06}, {"id": 102, "seek": 53012, "start": 554.52, "end": 555.52, "text": " perform.", "tokens": [2042, 13], "temperature": 0.0, "avg_logprob": -0.16801655292510986, "compression_ratio": 1.565217391304348, "no_speech_prob": 4.637058736989275e-06}, {"id": 103, "seek": 55552, "start": 555.52, "end": 561.88, "text": " These are operations that do not have an effect on the actual calculation on the return value", "tokens": [1981, 366, 7705, 300, 360, 406, 362, 364, 1802, 322, 264, 3539, 17108, 322, 264, 2736, 2158], "temperature": 0.0, "avg_logprob": -0.28266903206154154, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.2407870599417947e-05}, {"id": 104, "seek": 55552, "start": 561.88, "end": 564.1999999999999, "text": " of a function.", "tokens": [295, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.28266903206154154, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.2407870599417947e-05}, {"id": 105, "seek": 55552, "start": 564.1999999999999, "end": 576.28, "text": " Java already has one kind of algebraic effect built into the language, which is throws for", "tokens": [10745, 1217, 575, 472, 733, 295, 21989, 299, 1802, 3094, 666, 264, 2856, 11, 597, 307, 19251, 337], "temperature": 0.0, "avg_logprob": -0.28266903206154154, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.2407870599417947e-05}, {"id": 106, "seek": 55552, "start": 576.28, "end": 579.0799999999999, "text": " methods that throw exceptions.", "tokens": [7150, 300, 3507, 22847, 13], "temperature": 0.0, "avg_logprob": -0.28266903206154154, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.2407870599417947e-05}, {"id": 107, "seek": 57908, "start": 579.08, "end": 585.5200000000001, "text": " But algebraic effect is more a broader concept.", "tokens": [583, 21989, 299, 1802, 307, 544, 257, 13227, 3410, 13], "temperature": 0.0, "avg_logprob": -0.1512888611340132, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.7258195132162655e-06}, {"id": 108, "seek": 57908, "start": 585.5200000000001, "end": 589.1600000000001, "text": " This is just one example that Java supports.", "tokens": [639, 307, 445, 472, 1365, 300, 10745, 9346, 13], "temperature": 0.0, "avg_logprob": -0.1512888611340132, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.7258195132162655e-06}, {"id": 109, "seek": 57908, "start": 589.1600000000001, "end": 596.5200000000001, "text": " Any operation in an algebraic effect can either resume or abort.", "tokens": [2639, 6916, 294, 364, 21989, 299, 1802, 393, 2139, 15358, 420, 38117, 13], "temperature": 0.0, "avg_logprob": -0.1512888611340132, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.7258195132162655e-06}, {"id": 110, "seek": 57908, "start": 596.5200000000001, "end": 603.9200000000001, "text": " So typically, if an algebraic effect is reading some data from some external input, it would", "tokens": [407, 5850, 11, 498, 364, 21989, 299, 1802, 307, 3760, 512, 1412, 490, 512, 8320, 4846, 11, 309, 576], "temperature": 0.0, "avg_logprob": -0.1512888611340132, "compression_ratio": 1.5337423312883436, "no_speech_prob": 2.7258195132162655e-06}, {"id": 111, "seek": 60392, "start": 603.92, "end": 611.7199999999999, "text": " return the read data and resume operation with the value that was read, while an operation", "tokens": [2736, 264, 1401, 1412, 293, 15358, 6916, 365, 264, 2158, 300, 390, 1401, 11, 1339, 364, 6916], "temperature": 0.0, "avg_logprob": -0.1988504634183996, "compression_ratio": 1.5405405405405406, "no_speech_prob": 5.592517027253052e-06}, {"id": 112, "seek": 60392, "start": 611.7199999999999, "end": 617.24, "text": " that would be something like throw an exception would perform an abort, so it will not return", "tokens": [300, 576, 312, 746, 411, 3507, 364, 11183, 576, 2042, 364, 38117, 11, 370, 309, 486, 406, 2736], "temperature": 0.0, "avg_logprob": -0.1988504634183996, "compression_ratio": 1.5405405405405406, "no_speech_prob": 5.592517027253052e-06}, {"id": 113, "seek": 60392, "start": 617.24, "end": 624.1999999999999, "text": " but jump back to the corresponding handler.", "tokens": [457, 3012, 646, 281, 264, 11760, 41967, 13], "temperature": 0.0, "avg_logprob": -0.1988504634183996, "compression_ratio": 1.5405405405405406, "no_speech_prob": 5.592517027253052e-06}, {"id": 114, "seek": 62420, "start": 624.2, "end": 634.1600000000001, "text": " Side effects can be implemented by different implementations of the effect handlers.", "tokens": [19026, 5065, 393, 312, 12270, 538, 819, 4445, 763, 295, 264, 1802, 1011, 11977, 13], "temperature": 0.0, "avg_logprob": -0.16497555145850548, "compression_ratio": 1.5918367346938775, "no_speech_prob": 8.39266249386128e-06}, {"id": 115, "seek": 62420, "start": 634.1600000000001, "end": 641.76, "text": " So there is no strict fixed wiring from the operations to a particular implementation.", "tokens": [407, 456, 307, 572, 10910, 6806, 27520, 490, 264, 7705, 281, 257, 1729, 11420, 13], "temperature": 0.0, "avg_logprob": -0.16497555145850548, "compression_ratio": 1.5918367346938775, "no_speech_prob": 8.39266249386128e-06}, {"id": 116, "seek": 62420, "start": 641.76, "end": 653.2800000000001, "text": " And very similar to exception handlers, effects may be nested.", "tokens": [400, 588, 2531, 281, 11183, 1011, 11977, 11, 5065, 815, 312, 15646, 292, 13], "temperature": 0.0, "avg_logprob": -0.16497555145850548, "compression_ratio": 1.5918367346938775, "no_speech_prob": 8.39266249386128e-06}, {"id": 117, "seek": 65328, "start": 653.28, "end": 658.88, "text": " There's a kind of contrary view to two words algebraic effects.", "tokens": [821, 311, 257, 733, 295, 19506, 1910, 281, 732, 2283, 21989, 299, 5065, 13], "temperature": 0.0, "avg_logprob": -0.1978637351364386, "compression_ratio": 1.576158940397351, "no_speech_prob": 6.745166956534376e-06}, {"id": 118, "seek": 65328, "start": 658.88, "end": 661.4399999999999, "text": " You can see algebraic effects.", "tokens": [509, 393, 536, 21989, 299, 5065, 13], "temperature": 0.0, "avg_logprob": -0.1978637351364386, "compression_ratio": 1.576158940397351, "no_speech_prob": 6.745166956534376e-06}, {"id": 119, "seek": 65328, "start": 661.4399999999999, "end": 667.4, "text": " What I've presented so far is as the effects that the code might have, but you could also", "tokens": [708, 286, 600, 8212, 370, 1400, 307, 382, 264, 5065, 300, 264, 3089, 1062, 362, 11, 457, 291, 727, 611], "temperature": 0.0, "avg_logprob": -0.1978637351364386, "compression_ratio": 1.576158940397351, "no_speech_prob": 6.745166956534376e-06}, {"id": 120, "seek": 65328, "start": 667.4, "end": 672.28, "text": " see them as capabilities that the code might require.", "tokens": [536, 552, 382, 10862, 300, 264, 3089, 1062, 3651, 13], "temperature": 0.0, "avg_logprob": -0.1978637351364386, "compression_ratio": 1.576158940397351, "no_speech_prob": 6.745166956534376e-06}, {"id": 121, "seek": 67228, "start": 672.28, "end": 686.9599999999999, "text": " Martin Odelski is starting a big research project in that area.", "tokens": [9184, 12210, 1625, 2984, 307, 2891, 257, 955, 2132, 1716, 294, 300, 1859, 13], "temperature": 0.0, "avg_logprob": -0.3071028921339247, "compression_ratio": 0.984375, "no_speech_prob": 0.00012482887541409582}, {"id": 122, "seek": 68696, "start": 686.96, "end": 715.96, "text": " What I do is I define my exception, which is our exception implementation, as a feature", "tokens": [708, 286, 360, 307, 286, 6964, 452, 11183, 11, 597, 307, 527, 11183, 11420, 11, 382, 257, 4111], "temperature": 0.0, "avg_logprob": -0.14801351590590042, "compression_ratio": 1.12987012987013, "no_speech_prob": 0.00011403825919842348}, {"id": 123, "seek": 71596, "start": 715.96, "end": 721.0400000000001, "text": " inheriting from the base library feature simple effect, which is just a basic standard", "tokens": [9484, 1748, 490, 264, 3096, 6405, 4111, 2199, 1802, 11, 597, 307, 445, 257, 3875, 3832], "temperature": 0.0, "avg_logprob": -0.17468553689809946, "compression_ratio": 1.588235294117647, "no_speech_prob": 5.172972578293411e-06}, {"id": 124, "seek": 71596, "start": 721.0400000000001, "end": 728.96, "text": " effect, and our implementation of throw is just abort.", "tokens": [1802, 11, 293, 527, 11420, 295, 3507, 307, 445, 38117, 13], "temperature": 0.0, "avg_logprob": -0.17468553689809946, "compression_ratio": 1.588235294117647, "no_speech_prob": 5.172972578293411e-06}, {"id": 125, "seek": 71596, "start": 728.96, "end": 734.6, "text": " So the simplest way to stop an operation.", "tokens": [407, 264, 22811, 636, 281, 1590, 364, 6916, 13], "temperature": 0.0, "avg_logprob": -0.17468553689809946, "compression_ratio": 1.588235294117647, "no_speech_prob": 5.172972578293411e-06}, {"id": 126, "seek": 71596, "start": 734.6, "end": 742.76, "text": " And now we define one feature that throws an exception, and what we do here is we call", "tokens": [400, 586, 321, 6964, 472, 4111, 300, 19251, 364, 11183, 11, 293, 437, 321, 360, 510, 307, 321, 818], "temperature": 0.0, "avg_logprob": -0.17468553689809946, "compression_ratio": 1.588235294117647, "no_speech_prob": 5.172972578293411e-06}, {"id": 127, "seek": 74276, "start": 742.76, "end": 750.88, "text": " the operations throw, but we need to have an instance of the algebraic effect.", "tokens": [264, 7705, 3507, 11, 457, 321, 643, 281, 362, 364, 5197, 295, 264, 21989, 299, 1802, 13], "temperature": 0.0, "avg_logprob": -0.14695325162675646, "compression_ratio": 1.6101694915254237, "no_speech_prob": 6.238838523131562e-06}, {"id": 128, "seek": 74276, "start": 750.88, "end": 756.16, "text": " And the syntax we use in Fusion for that is we use the type of the effect, which is my", "tokens": [400, 264, 28431, 321, 764, 294, 36721, 337, 300, 307, 321, 764, 264, 2010, 295, 264, 1802, 11, 597, 307, 452], "temperature": 0.0, "avg_logprob": -0.14695325162675646, "compression_ratio": 1.6101694915254237, "no_speech_prob": 6.238838523131562e-06}, {"id": 129, "seek": 74276, "start": 756.16, "end": 759.08, "text": " exception, from the environment.", "tokens": [11183, 11, 490, 264, 2823, 13], "temperature": 0.0, "avg_logprob": -0.14695325162675646, "compression_ratio": 1.6101694915254237, "no_speech_prob": 6.238838523131562e-06}, {"id": 130, "seek": 74276, "start": 759.08, "end": 766.88, "text": " So.n means taking the innermost instance of that effect in the current environment and", "tokens": [407, 2411, 77, 1355, 1940, 264, 7714, 966, 555, 5197, 295, 300, 1802, 294, 264, 2190, 2823, 293], "temperature": 0.0, "avg_logprob": -0.14695325162675646, "compression_ratio": 1.6101694915254237, "no_speech_prob": 6.238838523131562e-06}, {"id": 131, "seek": 76688, "start": 766.88, "end": 773.2, "text": " calling that operation on it.", "tokens": [5141, 300, 6916, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.14298931520376632, "compression_ratio": 1.572289156626506, "no_speech_prob": 1.3923578308094875e-06}, {"id": 132, "seek": 76688, "start": 773.2, "end": 780.96, "text": " When we do that, we should declare in the signature of the function that this function", "tokens": [1133, 321, 360, 300, 11, 321, 820, 19710, 294, 264, 13397, 295, 264, 2445, 300, 341, 2445], "temperature": 0.0, "avg_logprob": -0.14298931520376632, "compression_ratio": 1.572289156626506, "no_speech_prob": 1.3923578308094875e-06}, {"id": 133, "seek": 76688, "start": 780.96, "end": 784.92, "text": " requires the effect my exception.", "tokens": [7029, 264, 1802, 452, 11183, 13], "temperature": 0.0, "avg_logprob": -0.14298931520376632, "compression_ratio": 1.572289156626506, "no_speech_prob": 1.3923578308094875e-06}, {"id": 134, "seek": 76688, "start": 784.92, "end": 788.6, "text": " So this is very similar to a throws clause in Java.", "tokens": [407, 341, 307, 588, 2531, 281, 257, 19251, 25925, 294, 10745, 13], "temperature": 0.0, "avg_logprob": -0.14298931520376632, "compression_ratio": 1.572289156626506, "no_speech_prob": 1.3923578308094875e-06}, {"id": 135, "seek": 76688, "start": 788.6, "end": 793.0, "text": " If I throw an unchecked exception, I need to declare that.", "tokens": [759, 286, 3507, 364, 46672, 292, 11183, 11, 286, 643, 281, 19710, 300, 13], "temperature": 0.0, "avg_logprob": -0.14298931520376632, "compression_ratio": 1.572289156626506, "no_speech_prob": 1.3923578308094875e-06}, {"id": 136, "seek": 79300, "start": 793.0, "end": 800.32, "text": " Here if I require a certain effect, I declare this with the exclamation mark.", "tokens": [1692, 498, 286, 3651, 257, 1629, 1802, 11, 286, 19710, 341, 365, 264, 1624, 43233, 1491, 13], "temperature": 0.0, "avg_logprob": -0.17666747543838, "compression_ratio": 1.6650943396226414, "no_speech_prob": 2.1565399492828874e-06}, {"id": 137, "seek": 79300, "start": 800.32, "end": 806.0, "text": " Now I add some prints just to show what this code actually does, and I want to call this", "tokens": [823, 286, 909, 512, 22305, 445, 281, 855, 437, 341, 3089, 767, 775, 11, 293, 286, 528, 281, 818, 341], "temperature": 0.0, "avg_logprob": -0.17666747543838, "compression_ratio": 1.6650943396226414, "no_speech_prob": 2.1565399492828874e-06}, {"id": 138, "seek": 79300, "start": 806.0, "end": 809.84, "text": " function, this feature F now, to call it.", "tokens": [2445, 11, 341, 4111, 479, 586, 11, 281, 818, 309, 13], "temperature": 0.0, "avg_logprob": -0.17666747543838, "compression_ratio": 1.6650943396226414, "no_speech_prob": 2.1565399492828874e-06}, {"id": 139, "seek": 79300, "start": 809.84, "end": 813.52, "text": " I have to first install an instance of the effect.", "tokens": [286, 362, 281, 700, 3625, 364, 5197, 295, 264, 1802, 13], "temperature": 0.0, "avg_logprob": -0.17666747543838, "compression_ratio": 1.6650943396226414, "no_speech_prob": 2.1565399492828874e-06}, {"id": 140, "seek": 79300, "start": 813.52, "end": 820.28, "text": " So I create an instance of the my exception effect here called use on is, which is a standard", "tokens": [407, 286, 1884, 364, 5197, 295, 264, 452, 11183, 1802, 510, 1219, 764, 322, 307, 11, 597, 307, 257, 3832], "temperature": 0.0, "avg_logprob": -0.17666747543838, "compression_ratio": 1.6650943396226414, "no_speech_prob": 2.1565399492828874e-06}, {"id": 141, "seek": 82028, "start": 820.28, "end": 827.36, "text": " effect function that takes a lambda expression, which then calls the code that is executed", "tokens": [1802, 2445, 300, 2516, 257, 13607, 6114, 11, 597, 550, 5498, 264, 3089, 300, 307, 17577], "temperature": 0.0, "avg_logprob": -0.14957675668928358, "compression_ratio": 1.6885245901639345, "no_speech_prob": 1.5777286535012536e-06}, {"id": 142, "seek": 82028, "start": 827.36, "end": 831.52, "text": " while this effect is installed.", "tokens": [1339, 341, 1802, 307, 8899, 13], "temperature": 0.0, "avg_logprob": -0.14957675668928358, "compression_ratio": 1.6885245901639345, "no_speech_prob": 1.5777286535012536e-06}, {"id": 143, "seek": 82028, "start": 831.52, "end": 837.9599999999999, "text": " So adding some more prints that you see what is happening, and if I now run this code here,", "tokens": [407, 5127, 512, 544, 22305, 300, 291, 536, 437, 307, 2737, 11, 293, 498, 286, 586, 1190, 341, 3089, 510, 11], "temperature": 0.0, "avg_logprob": -0.14957675668928358, "compression_ratio": 1.6885245901639345, "no_speech_prob": 1.5777286535012536e-06}, {"id": 144, "seek": 82028, "start": 837.9599999999999, "end": 845.8399999999999, "text": " you see that it prints, the exception is installed, it prints the before throw, throw directly", "tokens": [291, 536, 300, 309, 22305, 11, 264, 11183, 307, 8899, 11, 309, 22305, 264, 949, 3507, 11, 3507, 3838], "temperature": 0.0, "avg_logprob": -0.14957675668928358, "compression_ratio": 1.6885245901639345, "no_speech_prob": 1.5777286535012536e-06}, {"id": 145, "seek": 84584, "start": 845.84, "end": 850.84, "text": " jumps, very similar like an exception, out of the use here, and we continue with the", "tokens": [16704, 11, 588, 2531, 411, 364, 11183, 11, 484, 295, 264, 764, 510, 11, 293, 321, 2354, 365, 264], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 146, "seek": 84584, "start": 850.84, "end": 851.84, "text": " we are done.", "tokens": [321, 366, 1096, 13], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 147, "seek": 84584, "start": 851.84, "end": 858.32, "text": " So the code after an operation that aborts here will not be executed at all, very similar", "tokens": [407, 264, 3089, 934, 364, 6916, 300, 410, 3299, 510, 486, 406, 312, 17577, 412, 439, 11, 588, 2531], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 148, "seek": 84584, "start": 858.32, "end": 861.76, "text": " to exceptions.", "tokens": [281, 22847, 13], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 149, "seek": 84584, "start": 861.76, "end": 864.44, "text": " Yeah, now let me talk a bit about mutation.", "tokens": [865, 11, 586, 718, 385, 751, 257, 857, 466, 27960, 13], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 150, "seek": 84584, "start": 864.44, "end": 871.96, "text": " I told you that fusion doesn't allow direct mutation of fields, so fields are immutable,", "tokens": [286, 1907, 291, 300, 23100, 1177, 380, 2089, 2047, 27960, 295, 7909, 11, 370, 7909, 366, 3397, 32148, 11], "temperature": 0.0, "avg_logprob": -0.1893191391162658, "compression_ratio": 1.642156862745098, "no_speech_prob": 2.0259262782929e-06}, {"id": 151, "seek": 87196, "start": 871.96, "end": 878.8000000000001, "text": " which means if we do have code like that, we declare a field x, assign 1, 2, 3 to it,", "tokens": [597, 1355, 498, 321, 360, 362, 3089, 411, 300, 11, 321, 19710, 257, 2519, 2031, 11, 6269, 502, 11, 568, 11, 805, 281, 309, 11], "temperature": 0.0, "avg_logprob": -0.16224170798686013, "compression_ratio": 1.5466666666666666, "no_speech_prob": 3.7261220313666854e-06}, {"id": 152, "seek": 87196, "start": 878.8000000000001, "end": 886.1600000000001, "text": " print it, and then assign 2 times x to another field x.", "tokens": [4482, 309, 11, 293, 550, 6269, 568, 1413, 2031, 281, 1071, 2519, 2031, 13], "temperature": 0.0, "avg_logprob": -0.16224170798686013, "compression_ratio": 1.5466666666666666, "no_speech_prob": 3.7261220313666854e-06}, {"id": 153, "seek": 87196, "start": 886.1600000000001, "end": 895.8000000000001, "text": " We see the expected behavior, but if we create a feature that prints this field x, and try", "tokens": [492, 536, 264, 5176, 5223, 11, 457, 498, 321, 1884, 257, 4111, 300, 22305, 341, 2519, 2031, 11, 293, 853], "temperature": 0.0, "avg_logprob": -0.16224170798686013, "compression_ratio": 1.5466666666666666, "no_speech_prob": 3.7261220313666854e-06}, {"id": 154, "seek": 89580, "start": 895.8, "end": 902.8, "text": " to compile this, or try to run this, we actually get an error, because the problem is this", "tokens": [281, 31413, 341, 11, 420, 853, 281, 1190, 341, 11, 321, 767, 483, 364, 6713, 11, 570, 264, 1154, 307, 341], "temperature": 0.0, "avg_logprob": -0.14242457318049606, "compression_ratio": 1.819047619047619, "no_speech_prob": 9.817106729315128e-06}, {"id": 155, "seek": 89580, "start": 902.8, "end": 909.8, "text": " x here is not clear which one is referenced here, because we have two different variables", "tokens": [2031, 510, 307, 406, 1850, 597, 472, 307, 32734, 510, 11, 570, 321, 362, 732, 819, 9102], "temperature": 0.0, "avg_logprob": -0.14242457318049606, "compression_ratio": 1.819047619047619, "no_speech_prob": 9.817106729315128e-06}, {"id": 156, "seek": 89580, "start": 909.8, "end": 915.4399999999999, "text": " here, there's two axes here, the first and the second, and they are only visible for", "tokens": [510, 11, 456, 311, 732, 35387, 510, 11, 264, 700, 293, 264, 1150, 11, 293, 436, 366, 787, 8974, 337], "temperature": 0.0, "avg_logprob": -0.14242457318049606, "compression_ratio": 1.819047619047619, "no_speech_prob": 9.817106729315128e-06}, {"id": 157, "seek": 89580, "start": 915.4399999999999, "end": 918.28, "text": " the code following that.", "tokens": [264, 3089, 3480, 300, 13], "temperature": 0.0, "avg_logprob": -0.14242457318049606, "compression_ratio": 1.819047619047619, "no_speech_prob": 9.817106729315128e-06}, {"id": 158, "seek": 89580, "start": 918.28, "end": 925.4, "text": " So we get an error message that there are two different axes, and that source code position", "tokens": [407, 321, 483, 364, 6713, 3636, 300, 456, 366, 732, 819, 35387, 11, 293, 300, 4009, 3089, 2535], "temperature": 0.0, "avg_logprob": -0.14242457318049606, "compression_ratio": 1.819047619047619, "no_speech_prob": 9.817106729315128e-06}, {"id": 159, "seek": 92540, "start": 925.4, "end": 929.0, "text": " here doesn't know which one to choose.", "tokens": [510, 1177, 380, 458, 597, 472, 281, 2826, 13], "temperature": 0.0, "avg_logprob": -0.11656274022282781, "compression_ratio": 1.549738219895288, "no_speech_prob": 1.1188533335371176e-06}, {"id": 160, "seek": 92540, "start": 929.0, "end": 939.88, "text": " So really every assignment creates a new field, and these fields are immutable.", "tokens": [407, 534, 633, 15187, 7829, 257, 777, 2519, 11, 293, 613, 7909, 366, 3397, 32148, 13], "temperature": 0.0, "avg_logprob": -0.11656274022282781, "compression_ratio": 1.549738219895288, "no_speech_prob": 1.1188533335371176e-06}, {"id": 161, "seek": 92540, "start": 939.88, "end": 946.4399999999999, "text": " To make them mutable, to get actually the desired effect that we can print x here, we", "tokens": [1407, 652, 552, 5839, 712, 11, 281, 483, 767, 264, 14721, 1802, 300, 321, 393, 4482, 2031, 510, 11, 321], "temperature": 0.0, "avg_logprob": -0.11656274022282781, "compression_ratio": 1.549738219895288, "no_speech_prob": 1.1188533335371176e-06}, {"id": 162, "seek": 92540, "start": 946.4399999999999, "end": 953.4, "text": " would have to create a mutable integer value, which is with the base library function mute,", "tokens": [576, 362, 281, 1884, 257, 5839, 712, 24922, 2158, 11, 597, 307, 365, 264, 3096, 6405, 2445, 24523, 11], "temperature": 0.0, "avg_logprob": -0.11656274022282781, "compression_ratio": 1.549738219895288, "no_speech_prob": 1.1188533335371176e-06}, {"id": 163, "seek": 95340, "start": 953.4, "end": 960.0, "text": " creates a mutable instance, assign this to the variable x, and now if we want to update", "tokens": [7829, 257, 5839, 712, 5197, 11, 6269, 341, 281, 264, 7006, 2031, 11, 293, 586, 498, 321, 528, 281, 5623], "temperature": 0.0, "avg_logprob": -0.13224266236086926, "compression_ratio": 1.6717948717948719, "no_speech_prob": 4.5653760025743395e-06}, {"id": 164, "seek": 95340, "start": 960.0, "end": 968.72, "text": " this, we don't create a new field, which would be the colon equals operator, but we have", "tokens": [341, 11, 321, 500, 380, 1884, 257, 777, 2519, 11, 597, 576, 312, 264, 8255, 6915, 12973, 11, 457, 321, 362], "temperature": 0.0, "avg_logprob": -0.13224266236086926, "compression_ratio": 1.6717948717948719, "no_speech_prob": 4.5653760025743395e-06}, {"id": 165, "seek": 95340, "start": 968.72, "end": 973.48, "text": " an error operator which updates the value with a new value.", "tokens": [364, 6713, 12973, 597, 9205, 264, 2158, 365, 257, 777, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13224266236086926, "compression_ratio": 1.6717948717948719, "no_speech_prob": 4.5653760025743395e-06}, {"id": 166, "seek": 95340, "start": 973.48, "end": 982.56, "text": " If we run this now, behaves first like the code before, but this time the show x function", "tokens": [759, 321, 1190, 341, 586, 11, 36896, 700, 411, 264, 3089, 949, 11, 457, 341, 565, 264, 855, 2031, 2445], "temperature": 0.0, "avg_logprob": -0.13224266236086926, "compression_ratio": 1.6717948717948719, "no_speech_prob": 4.5653760025743395e-06}, {"id": 167, "seek": 98256, "start": 982.56, "end": 993.52, "text": " can actually access this single variable, because now we have only one field left.", "tokens": [393, 767, 2105, 341, 2167, 7006, 11, 570, 586, 321, 362, 787, 472, 2519, 1411, 13], "temperature": 0.0, "avg_logprob": -0.14002203218864673, "compression_ratio": 1.5757575757575757, "no_speech_prob": 1.9946294287365163e-06}, {"id": 168, "seek": 98256, "start": 993.52, "end": 999.92, "text": " We can now analyze this code for the effects that this code requires, and if we do that,", "tokens": [492, 393, 586, 12477, 341, 3089, 337, 264, 5065, 300, 341, 3089, 7029, 11, 293, 498, 321, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.14002203218864673, "compression_ratio": 1.5757575757575757, "no_speech_prob": 1.9946294287365163e-06}, {"id": 169, "seek": 98256, "start": 999.92, "end": 1005.68, "text": " we see there's two effects, there's IO out, this performs output, and there's the mutate", "tokens": [321, 536, 456, 311, 732, 5065, 11, 456, 311, 39839, 484, 11, 341, 26213, 5598, 11, 293, 456, 311, 264, 5839, 473], "temperature": 0.0, "avg_logprob": -0.14002203218864673, "compression_ratio": 1.5757575757575757, "no_speech_prob": 1.9946294287365163e-06}, {"id": 170, "seek": 100568, "start": 1005.68, "end": 1014.8, "text": " effect because we have an update of a mutable field in our code.", "tokens": [1802, 570, 321, 362, 364, 5623, 295, 257, 5839, 712, 2519, 294, 527, 3089, 13], "temperature": 0.0, "avg_logprob": -0.15295426320221464, "compression_ratio": 1.4873417721518987, "no_speech_prob": 5.804398028885771e-07}, {"id": 171, "seek": 100568, "start": 1014.8, "end": 1023.5999999999999, "text": " Now not all variables, very few variables actually usually need to be mutable.", "tokens": [823, 406, 439, 9102, 11, 588, 1326, 9102, 767, 2673, 643, 281, 312, 5839, 712, 13], "temperature": 0.0, "avg_logprob": -0.15295426320221464, "compression_ratio": 1.4873417721518987, "no_speech_prob": 5.804398028885771e-07}, {"id": 172, "seek": 100568, "start": 1023.5999999999999, "end": 1034.08, "text": " Here's an example of a small loop with an index variable counting from 0 to 9, and printing", "tokens": [1692, 311, 364, 1365, 295, 257, 1359, 6367, 365, 364, 8186, 7006, 13251, 490, 1958, 281, 1722, 11, 293, 14699], "temperature": 0.0, "avg_logprob": -0.15295426320221464, "compression_ratio": 1.4873417721518987, "no_speech_prob": 5.804398028885771e-07}, {"id": 173, "seek": 103408, "start": 1034.08, "end": 1040.9199999999998, "text": " them, if we analyze this code for effects, we see that this only depends on the IO out", "tokens": [552, 11, 498, 321, 12477, 341, 3089, 337, 5065, 11, 321, 536, 300, 341, 787, 5946, 322, 264, 39839, 484], "temperature": 0.0, "avg_logprob": -0.12875877486334908, "compression_ratio": 1.6473988439306357, "no_speech_prob": 2.44375928559748e-06}, {"id": 174, "seek": 103408, "start": 1040.9199999999998, "end": 1041.9199999999998, "text": " effect.", "tokens": [1802, 13], "temperature": 0.0, "avg_logprob": -0.12875877486334908, "compression_ratio": 1.6473988439306357, "no_speech_prob": 2.44375928559748e-06}, {"id": 175, "seek": 103408, "start": 1041.9199999999998, "end": 1048.84, "text": " The reason is that every loop iteration creates a new instance of that variable, so we don't", "tokens": [440, 1778, 307, 300, 633, 6367, 24784, 7829, 257, 777, 5197, 295, 300, 7006, 11, 370, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.12875877486334908, "compression_ratio": 1.6473988439306357, "no_speech_prob": 2.44375928559748e-06}, {"id": 176, "seek": 103408, "start": 1048.84, "end": 1056.28, "text": " update the i variable here, but we have one independent instance for every iteration of", "tokens": [5623, 264, 741, 7006, 510, 11, 457, 321, 362, 472, 6695, 5197, 337, 633, 24784, 295], "temperature": 0.0, "avg_logprob": -0.12875877486334908, "compression_ratio": 1.6473988439306357, "no_speech_prob": 2.44375928559748e-06}, {"id": 177, "seek": 103408, "start": 1056.28, "end": 1058.76, "text": " the loop.", "tokens": [264, 6367, 13], "temperature": 0.0, "avg_logprob": -0.12875877486334908, "compression_ratio": 1.6473988439306357, "no_speech_prob": 2.44375928559748e-06}, {"id": 178, "seek": 105876, "start": 1058.76, "end": 1067.76, "text": " So no variable is mutated, a new instance is created for every iteration.", "tokens": [407, 572, 7006, 307, 5839, 770, 11, 257, 777, 5197, 307, 2942, 337, 633, 24784, 13], "temperature": 0.0, "avg_logprob": -0.17536182726843882, "compression_ratio": 1.5384615384615385, "no_speech_prob": 2.443418225084315e-06}, {"id": 179, "seek": 105876, "start": 1067.76, "end": 1075.8799999999999, "text": " I want to talk a bit about error handling now, and show how the function can produce", "tokens": [286, 528, 281, 751, 257, 857, 466, 6713, 13175, 586, 11, 293, 855, 577, 264, 2445, 393, 5258], "temperature": 0.0, "avg_logprob": -0.17536182726843882, "compression_ratio": 1.5384615384615385, "no_speech_prob": 2.443418225084315e-06}, {"id": 180, "seek": 105876, "start": 1075.8799999999999, "end": 1081.16, "text": " an error, and show them three different ways of how error handling could be done.", "tokens": [364, 6713, 11, 293, 855, 552, 1045, 819, 2098, 295, 577, 6713, 13175, 727, 312, 1096, 13], "temperature": 0.0, "avg_logprob": -0.17536182726843882, "compression_ratio": 1.5384615384615385, "no_speech_prob": 2.443418225084315e-06}, {"id": 181, "seek": 108116, "start": 1081.16, "end": 1091.24, "text": " The function I use is just to divide, that divides two integers, and I call this in a", "tokens": [440, 2445, 286, 764, 307, 445, 281, 9845, 11, 300, 41347, 732, 41674, 11, 293, 286, 818, 341, 294, 257], "temperature": 0.0, "avg_logprob": -0.18613262737498565, "compression_ratio": 1.7077922077922079, "no_speech_prob": 6.239184131118236e-06}, {"id": 182, "seek": 108116, "start": 1091.24, "end": 1098.0, "text": " show div function that calls divide and prints the result, and then I call this with three", "tokens": [855, 3414, 2445, 300, 5498, 9845, 293, 22305, 264, 1874, 11, 293, 550, 286, 818, 341, 365, 1045], "temperature": 0.0, "avg_logprob": -0.18613262737498565, "compression_ratio": 1.7077922077922079, "no_speech_prob": 6.239184131118236e-06}, {"id": 183, "seek": 108116, "start": 1098.0, "end": 1108.88, "text": " different value pairs, and if I call this, I get, not very surprising, I get an error,", "tokens": [819, 2158, 15494, 11, 293, 498, 286, 818, 341, 11, 286, 483, 11, 406, 588, 8830, 11, 286, 483, 364, 6713, 11], "temperature": 0.0, "avg_logprob": -0.18613262737498565, "compression_ratio": 1.7077922077922079, "no_speech_prob": 6.239184131118236e-06}, {"id": 184, "seek": 110888, "start": 1108.88, "end": 1120.64, "text": " there is a division by zero, the precondition of the division is not fulfilled.", "tokens": [456, 307, 257, 10044, 538, 4018, 11, 264, 4346, 684, 849, 295, 264, 10044, 307, 406, 21380, 13], "temperature": 0.0, "avg_logprob": -0.17177981546480361, "compression_ratio": 1.5502645502645502, "no_speech_prob": 7.294899660337251e-06}, {"id": 185, "seek": 110888, "start": 1120.64, "end": 1126.0400000000002, "text": " So that's the standard error handling in fusion, but it's not very nice because you", "tokens": [407, 300, 311, 264, 3832, 6713, 13175, 294, 23100, 11, 457, 309, 311, 406, 588, 1481, 570, 291], "temperature": 0.0, "avg_logprob": -0.17177981546480361, "compression_ratio": 1.5502645502645502, "no_speech_prob": 7.294899660337251e-06}, {"id": 186, "seek": 110888, "start": 1126.0400000000002, "end": 1128.8000000000002, "text": " have the whole application for failing.", "tokens": [362, 264, 1379, 3861, 337, 18223, 13], "temperature": 0.0, "avg_logprob": -0.17177981546480361, "compression_ratio": 1.5502645502645502, "no_speech_prob": 7.294899660337251e-06}, {"id": 187, "seek": 110888, "start": 1128.8000000000002, "end": 1138.2, "text": " If you want to now somehow treat that error, what we could do is return an outcome, which", "tokens": [759, 291, 528, 281, 586, 6063, 2387, 300, 6713, 11, 437, 321, 727, 360, 307, 2736, 364, 9700, 11, 597], "temperature": 0.0, "avg_logprob": -0.17177981546480361, "compression_ratio": 1.5502645502645502, "no_speech_prob": 7.294899660337251e-06}, {"id": 188, "seek": 113820, "start": 1138.2, "end": 1144.48, "text": " is similar to Rust's result, which is basically a choice type between an error and an actually", "tokens": [307, 2531, 281, 34952, 311, 1874, 11, 597, 307, 1936, 257, 3922, 2010, 1296, 364, 6713, 293, 364, 767], "temperature": 0.0, "avg_logprob": -0.17655052677277597, "compression_ratio": 1.6574074074074074, "no_speech_prob": 6.958758604014292e-06}, {"id": 189, "seek": 113820, "start": 1144.48, "end": 1152.6000000000001, "text": " 32-bit integer, and check the case, if B is zero, we return an error, otherwise we return", "tokens": [8858, 12, 5260, 24922, 11, 293, 1520, 264, 1389, 11, 498, 363, 307, 4018, 11, 321, 2736, 364, 6713, 11, 5911, 321, 2736], "temperature": 0.0, "avg_logprob": -0.17655052677277597, "compression_ratio": 1.6574074074074074, "no_speech_prob": 6.958758604014292e-06}, {"id": 190, "seek": 113820, "start": 1152.6000000000001, "end": 1157.68, "text": " the result of the division, and if we run this, now the application runs through, it", "tokens": [264, 1874, 295, 264, 10044, 11, 293, 498, 321, 1190, 341, 11, 586, 264, 3861, 6676, 807, 11, 309], "temperature": 0.0, "avg_logprob": -0.17655052677277597, "compression_ratio": 1.6574074074074074, "no_speech_prob": 6.958758604014292e-06}, {"id": 191, "seek": 113820, "start": 1157.68, "end": 1167.6000000000001, "text": " doesn't terminate, and in the middle case, we print the outcome, which is an error here.", "tokens": [1177, 380, 10761, 473, 11, 293, 294, 264, 2808, 1389, 11, 321, 4482, 264, 9700, 11, 597, 307, 364, 6713, 510, 13], "temperature": 0.0, "avg_logprob": -0.17655052677277597, "compression_ratio": 1.6574074074074074, "no_speech_prob": 6.958758604014292e-06}, {"id": 192, "seek": 116760, "start": 1167.6, "end": 1177.24, "text": " But if we want to now actually, after calling the divide, want to know was this divide successful", "tokens": [583, 498, 321, 528, 281, 586, 767, 11, 934, 5141, 264, 9845, 11, 528, 281, 458, 390, 341, 9845, 4406], "temperature": 0.0, "avg_logprob": -0.12544524151345957, "compression_ratio": 1.6506024096385543, "no_speech_prob": 7.068882041494362e-06}, {"id": 193, "seek": 116760, "start": 1177.24, "end": 1184.1999999999998, "text": " or not, we would need to check the cases, so we need to distinguish whether we actually", "tokens": [420, 406, 11, 321, 576, 643, 281, 1520, 264, 3331, 11, 370, 321, 643, 281, 20206, 1968, 321, 767], "temperature": 0.0, "avg_logprob": -0.12544524151345957, "compression_ratio": 1.6506024096385543, "no_speech_prob": 7.068882041494362e-06}, {"id": 194, "seek": 116760, "start": 1184.1999999999998, "end": 1193.12, "text": " got a value, or we got an error, we can do this with a match over the different choices.", "tokens": [658, 257, 2158, 11, 420, 321, 658, 364, 6713, 11, 321, 393, 360, 341, 365, 257, 2995, 670, 264, 819, 7994, 13], "temperature": 0.0, "avg_logprob": -0.12544524151345957, "compression_ratio": 1.6506024096385543, "no_speech_prob": 7.068882041494362e-06}, {"id": 195, "seek": 119312, "start": 1193.12, "end": 1201.6, "text": " Now an alternative would be to use the standard library try effect, which is kind of the default", "tokens": [823, 364, 8535, 576, 312, 281, 764, 264, 3832, 6405, 853, 1802, 11, 597, 307, 733, 295, 264, 7576], "temperature": 0.0, "avg_logprob": -0.09388495225172777, "compression_ratio": 1.5469613259668509, "no_speech_prob": 1.7600403907636064e-06}, {"id": 196, "seek": 119312, "start": 1201.6, "end": 1211.3999999999999, "text": " exception based on algebraic effects in fusion, and to do that, instead of returning an outcome,", "tokens": [11183, 2361, 322, 21989, 299, 5065, 294, 23100, 11, 293, 281, 360, 300, 11, 2602, 295, 12678, 364, 9700, 11], "temperature": 0.0, "avg_logprob": -0.09388495225172777, "compression_ratio": 1.5469613259668509, "no_speech_prob": 1.7600403907636064e-06}, {"id": 197, "seek": 119312, "start": 1211.3999999999999, "end": 1218.8, "text": " this would be just a function returning a 32-bit integer, but requiring the try effect", "tokens": [341, 576, 312, 445, 257, 2445, 12678, 257, 8858, 12, 5260, 24922, 11, 457, 24165, 264, 853, 1802], "temperature": 0.0, "avg_logprob": -0.09388495225172777, "compression_ratio": 1.5469613259668509, "no_speech_prob": 1.7600403907636064e-06}, {"id": 198, "seek": 121880, "start": 1218.8, "end": 1229.0, "text": " to be installed, and now instead of causing an error, we would raise the error of the", "tokens": [281, 312, 8899, 11, 293, 586, 2602, 295, 9853, 364, 6713, 11, 321, 576, 5300, 264, 6713, 295, 264], "temperature": 0.0, "avg_logprob": -0.15813765987273184, "compression_ratio": 1.679245283018868, "no_speech_prob": 3.1870079055806855e-06}, {"id": 199, "seek": 121880, "start": 1229.0, "end": 1234.36, "text": " try instance in the current environment, so we don't need the else anymore because the", "tokens": [853, 5197, 294, 264, 2190, 2823, 11, 370, 321, 500, 380, 643, 264, 1646, 3602, 570, 264], "temperature": 0.0, "avg_logprob": -0.15813765987273184, "compression_ratio": 1.679245283018868, "no_speech_prob": 3.1870079055806855e-06}, {"id": 200, "seek": 121880, "start": 1234.36, "end": 1241.9199999999998, "text": " raise would abort and would return immediately, so we could just continue with the code there.", "tokens": [5300, 576, 38117, 293, 576, 2736, 4258, 11, 370, 321, 727, 445, 2354, 365, 264, 3089, 456, 13], "temperature": 0.0, "avg_logprob": -0.15813765987273184, "compression_ratio": 1.679245283018868, "no_speech_prob": 3.1870079055806855e-06}, {"id": 201, "seek": 124192, "start": 1241.92, "end": 1251.04, "text": " And when we call the divide now, we have to call it with an instance of the try effect", "tokens": [400, 562, 321, 818, 264, 9845, 586, 11, 321, 362, 281, 818, 309, 365, 364, 5197, 295, 264, 853, 1802], "temperature": 0.0, "avg_logprob": -0.1359615921974182, "compression_ratio": 1.5204678362573099, "no_speech_prob": 2.7262212825007737e-06}, {"id": 202, "seek": 124192, "start": 1251.04, "end": 1258.1200000000001, "text": " being installed, so just like before, this can be done through a base library function.", "tokens": [885, 8899, 11, 370, 445, 411, 949, 11, 341, 393, 312, 1096, 807, 257, 3096, 6405, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1359615921974182, "compression_ratio": 1.5204678362573099, "no_speech_prob": 2.7262212825007737e-06}, {"id": 203, "seek": 124192, "start": 1258.1200000000001, "end": 1267.2, "text": " Try that installs an instance and calls the lambda, which is provided as a parameter,", "tokens": [6526, 300, 3625, 82, 364, 5197, 293, 5498, 264, 13607, 11, 597, 307, 5649, 382, 257, 13075, 11], "temperature": 0.0, "avg_logprob": -0.1359615921974182, "compression_ratio": 1.5204678362573099, "no_speech_prob": 2.7262212825007737e-06}, {"id": 204, "seek": 126720, "start": 1267.2, "end": 1276.2, "text": " and this can then be matched very similarly to the outcome, but the big difference is", "tokens": [293, 341, 393, 550, 312, 21447, 588, 14138, 281, 264, 9700, 11, 457, 264, 955, 2649, 307], "temperature": 0.0, "avg_logprob": -0.16718367063082182, "compression_ratio": 1.6049382716049383, "no_speech_prob": 1.2802540368284099e-05}, {"id": 205, "seek": 126720, "start": 1276.2, "end": 1281.48, "text": " that now the code in between, in between the position where the error is, and where we", "tokens": [300, 586, 264, 3089, 294, 1296, 11, 294, 1296, 264, 2535, 689, 264, 6713, 307, 11, 293, 689, 321], "temperature": 0.0, "avg_logprob": -0.16718367063082182, "compression_ratio": 1.6049382716049383, "no_speech_prob": 1.2802540368284099e-05}, {"id": 206, "seek": 126720, "start": 1281.48, "end": 1287.28, "text": " have this call, does not need to pass along these outcomes all the way, I'll come to an", "tokens": [362, 341, 818, 11, 775, 406, 643, 281, 1320, 2051, 613, 10070, 439, 264, 636, 11, 286, 603, 808, 281, 364], "temperature": 0.0, "avg_logprob": -0.16718367063082182, "compression_ratio": 1.6049382716049383, "no_speech_prob": 1.2802540368284099e-05}, {"id": 207, "seek": 128728, "start": 1287.28, "end": 1299.92, "text": " end very soon, but we can directly work with the i32s and the try would jump out directly,", "tokens": [917, 588, 2321, 11, 457, 321, 393, 3838, 589, 365, 264, 741, 11440, 82, 293, 264, 853, 576, 3012, 484, 3838, 11], "temperature": 0.0, "avg_logprob": -0.12581261721524326, "compression_ratio": 1.572192513368984, "no_speech_prob": 4.8563542804913595e-06}, {"id": 208, "seek": 128728, "start": 1299.92, "end": 1303.28, "text": " so we would see this outcome.", "tokens": [370, 321, 576, 536, 341, 9700, 13], "temperature": 0.0, "avg_logprob": -0.12581261721524326, "compression_ratio": 1.572192513368984, "no_speech_prob": 4.8563542804913595e-06}, {"id": 209, "seek": 128728, "start": 1303.28, "end": 1312.28, "text": " So the penultimate slide, the current slide, the status of fusion, it's still very much", "tokens": [407, 264, 3435, 723, 2905, 4137, 11, 264, 2190, 4137, 11, 264, 6558, 295, 23100, 11, 309, 311, 920, 588, 709], "temperature": 0.0, "avg_logprob": -0.12581261721524326, "compression_ratio": 1.572192513368984, "no_speech_prob": 4.8563542804913595e-06}, {"id": 210, "seek": 128728, "start": 1312.28, "end": 1317.0, "text": " in development, the language is getting a bit more stable recently, but there's still", "tokens": [294, 3250, 11, 264, 2856, 307, 1242, 257, 857, 544, 8351, 3938, 11, 457, 456, 311, 920], "temperature": 0.0, "avg_logprob": -0.12581261721524326, "compression_ratio": 1.572192513368984, "no_speech_prob": 4.8563542804913595e-06}, {"id": 211, "seek": 131700, "start": 1317.0, "end": 1321.0, "text": " a lot of work, mostly also in the base library.", "tokens": [257, 688, 295, 589, 11, 5240, 611, 294, 264, 3096, 6405, 13], "temperature": 0.0, "avg_logprob": -0.23373152992942117, "compression_ratio": 1.5424528301886793, "no_speech_prob": 5.859836164745502e-06}, {"id": 212, "seek": 131700, "start": 1321.0, "end": 1326.16, "text": " The current implementation has two backends, one running on a JVM, and there's also a C", "tokens": [440, 2190, 11420, 575, 732, 646, 2581, 11, 472, 2614, 322, 257, 508, 53, 44, 11, 293, 456, 311, 611, 257, 383], "temperature": 0.0, "avg_logprob": -0.23373152992942117, "compression_ratio": 1.5424528301886793, "no_speech_prob": 5.859836164745502e-06}, {"id": 213, "seek": 131700, "start": 1326.16, "end": 1333.36, "text": " code backend, and there's basic analysis tools available, as I've shown you, the effects", "tokens": [3089, 646, 521, 11, 293, 456, 311, 3875, 5215, 3873, 2435, 11, 382, 286, 600, 4898, 291, 11, 264, 5065], "temperature": 0.0, "avg_logprob": -0.23373152992942117, "compression_ratio": 1.5424528301886793, "no_speech_prob": 5.859836164745502e-06}, {"id": 214, "seek": 131700, "start": 1333.36, "end": 1337.4, "text": " analysis.", "tokens": [5215, 13], "temperature": 0.0, "avg_logprob": -0.23373152992942117, "compression_ratio": 1.5424528301886793, "no_speech_prob": 5.859836164745502e-06}, {"id": 215, "seek": 131700, "start": 1337.4, "end": 1345.52, "text": " Java maps actually very well to fusion, there's a tool that allows calling all of Java APIs,", "tokens": [10745, 11317, 767, 588, 731, 281, 23100, 11, 456, 311, 257, 2290, 300, 4045, 5141, 439, 295, 10745, 21445, 11], "temperature": 0.0, "avg_logprob": -0.23373152992942117, "compression_ratio": 1.5424528301886793, "no_speech_prob": 5.859836164745502e-06}, {"id": 216, "seek": 134552, "start": 1345.52, "end": 1351.52, "text": " creating Java APIs from a fusion APIs from a Java module that we can call into Java,", "tokens": [4084, 10745, 21445, 490, 257, 23100, 21445, 490, 257, 10745, 10088, 300, 321, 393, 818, 666, 10745, 11], "temperature": 0.0, "avg_logprob": -0.20261433919270833, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7845136375835864e-06}, {"id": 217, "seek": 134552, "start": 1351.52, "end": 1356.68, "text": " what doesn't work yet well is calling back from Java into fusion, but there's at least", "tokens": [437, 1177, 380, 589, 1939, 731, 307, 5141, 646, 490, 10745, 666, 23100, 11, 457, 456, 311, 412, 1935], "temperature": 0.0, "avg_logprob": -0.20261433919270833, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7845136375835864e-06}, {"id": 218, "seek": 134552, "start": 1356.68, "end": 1360.3, "text": " in one way, it's one-to-one mapping.", "tokens": [294, 472, 636, 11, 309, 311, 472, 12, 1353, 12, 546, 18350, 13], "temperature": 0.0, "avg_logprob": -0.20261433919270833, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7845136375835864e-06}, {"id": 219, "seek": 134552, "start": 1360.3, "end": 1368.28, "text": " We have effects to encapsulate non-functional aspects, and I ask everyone please have a", "tokens": [492, 362, 5065, 281, 38745, 5256, 2107, 12, 22845, 304, 7270, 11, 293, 286, 1029, 1518, 1767, 362, 257], "temperature": 0.0, "avg_logprob": -0.20261433919270833, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7845136375835864e-06}, {"id": 220, "seek": 134552, "start": 1368.28, "end": 1373.92, "text": " look, we're happy for any feedback.", "tokens": [574, 11, 321, 434, 2055, 337, 604, 5824, 13], "temperature": 0.0, "avg_logprob": -0.20261433919270833, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7845136375835864e-06}, {"id": 221, "seek": 137392, "start": 1373.92, "end": 1383.92, "text": " Thank you for staying so long, I think time is over.", "tokens": [1044, 291, 337, 7939, 370, 938, 11, 286, 519, 565, 307, 670, 13], "temperature": 0.0, "avg_logprob": -0.3224368482022672, "compression_ratio": 1.2432432432432432, "no_speech_prob": 7.359239680226892e-05}, {"id": 222, "seek": 137392, "start": 1383.92, "end": 1403.28, "text": " The match is still needed because this try here installs the effect, and an effect in", "tokens": [440, 2995, 307, 920, 2978, 570, 341, 853, 510, 3625, 82, 264, 1802, 11, 293, 364, 1802, 294], "temperature": 0.0, "avg_logprob": -0.3224368482022672, "compression_ratio": 1.2432432432432432, "no_speech_prob": 7.359239680226892e-05}, {"id": 223, "seek": 140328, "start": 1403.28, "end": 1412.24, "text": " the case of an abort has to provide some way to join the value that is returned in the", "tokens": [264, 1389, 295, 364, 38117, 575, 281, 2893, 512, 636, 281, 3917, 264, 2158, 300, 307, 8752, 294, 264], "temperature": 0.0, "avg_logprob": -0.10542314902119253, "compression_ratio": 1.8453608247422681, "no_speech_prob": 1.8052272935165092e-05}, {"id": 224, "seek": 140328, "start": 1412.24, "end": 1417.8799999999999, "text": " non-abort case with the value that is returned in the abort case, and for the try effect", "tokens": [2107, 12, 455, 477, 1389, 365, 264, 2158, 300, 307, 8752, 294, 264, 38117, 1389, 11, 293, 337, 264, 853, 1802], "temperature": 0.0, "avg_logprob": -0.10542314902119253, "compression_ratio": 1.8453608247422681, "no_speech_prob": 1.8052272935165092e-05}, {"id": 225, "seek": 140328, "start": 1417.8799999999999, "end": 1423.68, "text": " this join is just made by producing a value of type outcome, which is the choice between", "tokens": [341, 3917, 307, 445, 1027, 538, 10501, 257, 2158, 295, 2010, 9700, 11, 597, 307, 264, 3922, 1296], "temperature": 0.0, "avg_logprob": -0.10542314902119253, "compression_ratio": 1.8453608247422681, "no_speech_prob": 1.8052272935165092e-05}, {"id": 226, "seek": 140328, "start": 1423.68, "end": 1430.32, "text": " error and the value, but there could be other effects that would just replace it by a default", "tokens": [6713, 293, 264, 2158, 11, 457, 456, 727, 312, 661, 5065, 300, 576, 445, 7406, 309, 538, 257, 7576], "temperature": 0.0, "avg_logprob": -0.10542314902119253, "compression_ratio": 1.8453608247422681, "no_speech_prob": 1.8052272935165092e-05}, {"id": 227, "seek": 143032, "start": 1430.32, "end": 1437.32, "text": " value in that case, so it depends on the effect, but here it's definitely still needed, yeah.", "tokens": [2158, 294, 300, 1389, 11, 370, 309, 5946, 322, 264, 1802, 11, 457, 510, 309, 311, 2138, 920, 2978, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.3543426178313874, "compression_ratio": 1.6243902439024391, "no_speech_prob": 5.7233388361055404e-05}, {"id": 228, "seek": 143032, "start": 1437.32, "end": 1439.32, "text": " Do we have time, yeah?", "tokens": [1144, 321, 362, 565, 11, 1338, 30], "temperature": 0.0, "avg_logprob": -0.3543426178313874, "compression_ratio": 1.6243902439024391, "no_speech_prob": 5.7233388361055404e-05}, {"id": 229, "seek": 143032, "start": 1439.32, "end": 1445.32, "text": " Yeah, I saw that at some point you showed that there was an IO effect, and I also saw", "tokens": [865, 11, 286, 1866, 300, 412, 512, 935, 291, 4712, 300, 456, 390, 364, 39839, 1802, 11, 293, 286, 611, 1866], "temperature": 0.0, "avg_logprob": -0.3543426178313874, "compression_ratio": 1.6243902439024391, "no_speech_prob": 5.7233388361055404e-05}, {"id": 230, "seek": 143032, "start": 1445.32, "end": 1450.32, "text": " a lot of code that uses the same function, which I presume uses that effect, but can", "tokens": [257, 688, 295, 3089, 300, 4960, 264, 912, 2445, 11, 597, 286, 43283, 4960, 300, 1802, 11, 457, 393], "temperature": 0.0, "avg_logprob": -0.3543426178313874, "compression_ratio": 1.6243902439024391, "no_speech_prob": 5.7233388361055404e-05}, {"id": 231, "seek": 143032, "start": 1450.32, "end": 1453.32, "text": " you see the effect using any of the examples?", "tokens": [291, 536, 264, 1802, 1228, 604, 295, 264, 5110, 30], "temperature": 0.0, "avg_logprob": -0.3543426178313874, "compression_ratio": 1.6243902439024391, "no_speech_prob": 5.7233388361055404e-05}, {"id": 232, "seek": 145332, "start": 1453.32, "end": 1460.32, "text": " Okay, yes, you took very good care, thank you.", "tokens": [1033, 11, 2086, 11, 291, 1890, 588, 665, 1127, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.13560448752509224, "compression_ratio": 1.5925925925925926, "no_speech_prob": 8.134868039633147e-06}, {"id": 233, "seek": 145332, "start": 1460.32, "end": 1465.32, "text": " Yeah, it is not decided yet where the compiler should be strict and require this annotation.", "tokens": [865, 11, 309, 307, 406, 3047, 1939, 689, 264, 31958, 820, 312, 10910, 293, 3651, 341, 48654, 13], "temperature": 0.0, "avg_logprob": -0.13560448752509224, "compression_ratio": 1.5925925925925926, "no_speech_prob": 8.134868039633147e-06}, {"id": 234, "seek": 145332, "start": 1465.32, "end": 1473.32, "text": " The current idea is that for basic code we should not require this annotation, but for", "tokens": [440, 2190, 1558, 307, 300, 337, 3875, 3089, 321, 820, 406, 3651, 341, 48654, 11, 457, 337], "temperature": 0.0, "avg_logprob": -0.13560448752509224, "compression_ratio": 1.5925925925925926, "no_speech_prob": 8.134868039633147e-06}, {"id": 235, "seek": 145332, "start": 1473.32, "end": 1478.32, "text": " a public library function we definitely want to know what are the effects.", "tokens": [257, 1908, 6405, 2445, 321, 2138, 528, 281, 458, 437, 366, 264, 5065, 13], "temperature": 0.0, "avg_logprob": -0.13560448752509224, "compression_ratio": 1.5925925925925926, "no_speech_prob": 8.134868039633147e-06}, {"id": 236, "seek": 147832, "start": 1478.32, "end": 1485.32, "text": " So, I don't want to enforce this for everything or for all the intermediate values, and there's", "tokens": [407, 11, 286, 500, 380, 528, 281, 24825, 341, 337, 1203, 420, 337, 439, 264, 19376, 4190, 11, 293, 456, 311], "temperature": 0.0, "avg_logprob": -0.11372876167297363, "compression_ratio": 1.7055837563451777, "no_speech_prob": 1.9819244698737748e-05}, {"id": 237, "seek": 147832, "start": 1485.32, "end": 1491.32, "text": " also some cases where only a static analysis of a whole application can actually determine", "tokens": [611, 512, 3331, 689, 787, 257, 13437, 5215, 295, 257, 1379, 3861, 393, 767, 6997], "temperature": 0.0, "avg_logprob": -0.11372876167297363, "compression_ratio": 1.7055837563451777, "no_speech_prob": 1.9819244698737748e-05}, {"id": 238, "seek": 147832, "start": 1491.32, "end": 1497.32, "text": " what the effects are, so static analysis plays a very important role there.", "tokens": [437, 264, 5065, 366, 11, 370, 13437, 5215, 5749, 257, 588, 1021, 3090, 456, 13], "temperature": 0.0, "avg_logprob": -0.11372876167297363, "compression_ratio": 1.7055837563451777, "no_speech_prob": 1.9819244698737748e-05}, {"id": 239, "seek": 147832, "start": 1497.32, "end": 1504.32, "text": " I don't want to enforce too much typing basically for these effects here.", "tokens": [286, 500, 380, 528, 281, 24825, 886, 709, 18444, 1936, 337, 613, 5065, 510, 13], "temperature": 0.0, "avg_logprob": -0.11372876167297363, "compression_ratio": 1.7055837563451777, "no_speech_prob": 1.9819244698737748e-05}, {"id": 240, "seek": 150432, "start": 1504.32, "end": 1510.32, "text": " Another one, there is, like John for example has this distinction between runtime exceptions", "tokens": [3996, 472, 11, 456, 307, 11, 411, 2619, 337, 1365, 575, 341, 16844, 1296, 34474, 22847], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 241, "seek": 150432, "start": 1510.32, "end": 1516.32, "text": " and checked exceptions, and there are just these kind of exceptions that can have pretty", "tokens": [293, 10033, 22847, 11, 293, 456, 366, 445, 613, 733, 295, 22847, 300, 393, 362, 1238], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 242, "seek": 150432, "start": 1516.32, "end": 1522.32, "text": " much any code, like out of memory exception or static load, and I wonder how do you handle", "tokens": [709, 604, 3089, 11, 411, 484, 295, 4675, 11183, 420, 13437, 3677, 11, 293, 286, 2441, 577, 360, 291, 4813], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 243, "seek": 150432, "start": 1522.32, "end": 1524.32, "text": " these kind of cases?", "tokens": [613, 733, 295, 3331, 30], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 244, "seek": 150432, "start": 1524.32, "end": 1528.32, "text": " Oops, they're shutting us down here.", "tokens": [21726, 11, 436, 434, 36057, 505, 760, 510, 13], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 245, "seek": 150432, "start": 1528.32, "end": 1529.32, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 246, "seek": 150432, "start": 1529.32, "end": 1531.32, "text": " It's a small hint.", "tokens": [467, 311, 257, 1359, 12075, 13], "temperature": 0.0, "avg_logprob": -0.3228512446085612, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.0007152463076636195}, {"id": 247, "seek": 153132, "start": 1531.32, "end": 1538.32, "text": " I actually, it's not nothing of that is done yet, but I think I would like to get one step", "tokens": [286, 767, 11, 309, 311, 406, 1825, 295, 300, 307, 1096, 1939, 11, 457, 286, 519, 286, 576, 411, 281, 483, 472, 1823], "temperature": 0.0, "avg_logprob": -0.13754329942677118, "compression_ratio": 1.5431472081218274, "no_speech_prob": 8.011927093320992e-06}, {"id": 248, "seek": 153132, "start": 1538.32, "end": 1542.32, "text": " further and make it user configurable.", "tokens": [3052, 293, 652, 309, 4195, 22192, 712, 13], "temperature": 0.0, "avg_logprob": -0.13754329942677118, "compression_ratio": 1.5431472081218274, "no_speech_prob": 8.011927093320992e-06}, {"id": 249, "seek": 153132, "start": 1542.32, "end": 1549.32, "text": " What are the effects that you want to have considered acceptable in your environment?", "tokens": [708, 366, 264, 5065, 300, 291, 528, 281, 362, 4888, 15513, 294, 428, 2823, 30], "temperature": 0.0, "avg_logprob": -0.13754329942677118, "compression_ratio": 1.5431472081218274, "no_speech_prob": 8.011927093320992e-06}, {"id": 250, "seek": 153132, "start": 1549.32, "end": 1555.32, "text": " Like you want to have maybe add some debugging print or some logging in somewhere nested", "tokens": [1743, 291, 528, 281, 362, 1310, 909, 512, 45592, 4482, 420, 512, 27991, 294, 4079, 15646, 292], "temperature": 0.0, "avg_logprob": -0.13754329942677118, "compression_ratio": 1.5431472081218274, "no_speech_prob": 8.011927093320992e-06}, {"id": 251, "seek": 155532, "start": 1555.32, "end": 1562.32, "text": " in some internal function that shouldn't have forced you to add effects all over through", "tokens": [294, 512, 6920, 2445, 300, 4659, 380, 362, 7579, 291, 281, 909, 5065, 439, 670, 807], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 252, "seek": 155532, "start": 1562.32, "end": 1563.32, "text": " the code.", "tokens": [264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 253, "seek": 155532, "start": 1563.32, "end": 1568.32, "text": " So we must have some set, some way to define for the debugging build.", "tokens": [407, 321, 1633, 362, 512, 992, 11, 512, 636, 281, 6964, 337, 264, 45592, 1322, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 254, "seek": 155532, "start": 1568.32, "end": 1574.32, "text": " These are the effects that are in there, and please don't complain about that.", "tokens": [1981, 366, 264, 5065, 300, 366, 294, 456, 11, 293, 1767, 500, 380, 11024, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 255, "seek": 155532, "start": 1574.32, "end": 1579.32, "text": " But we have to still see how we actually will do that.", "tokens": [583, 321, 362, 281, 920, 536, 577, 321, 767, 486, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 256, "seek": 155532, "start": 1579.32, "end": 1581.32, "text": " Thank you so much.", "tokens": [1044, 291, 370, 709, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 257, "seek": 155532, "start": 1581.32, "end": 1584.32, "text": " Thank you for saying so long.", "tokens": [1044, 291, 337, 1566, 370, 938, 13], "temperature": 0.0, "avg_logprob": -0.12811485413582094, "compression_ratio": 1.6175115207373272, "no_speech_prob": 5.857853466295637e-06}, {"id": 258, "seek": 158432, "start": 1584.32, "end": 1585.32, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 259, "seek": 158432, "start": 1585.32, "end": 1588.32, "text": " Thank you very much for attending the freegear room.", "tokens": [1044, 291, 588, 709, 337, 15862, 264, 1737, 432, 289, 1808, 13], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 260, "seek": 158432, "start": 1588.32, "end": 1591.32, "text": " This will be a room next year again.", "tokens": [639, 486, 312, 257, 1808, 958, 1064, 797, 13], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 261, "seek": 158432, "start": 1591.32, "end": 1596.32, "text": " Hopefully we'll have two days and we'll have more time for sessions and hopefully many", "tokens": [10429, 321, 603, 362, 732, 1708, 293, 321, 603, 362, 544, 565, 337, 11081, 293, 4696, 867], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 262, "seek": 158432, "start": 1596.32, "end": 1598.32, "text": " of you will submit proposals.", "tokens": [295, 291, 486, 10315, 20198, 13], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 263, "seek": 158432, "start": 1598.32, "end": 1602.32, "text": " You will all be very welcome to present in the freegear room next year.", "tokens": [509, 486, 439, 312, 588, 2928, 281, 1974, 294, 264, 1737, 432, 289, 1808, 958, 1064, 13], "temperature": 0.0, "avg_logprob": -0.1837797719378804, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.005036048591136932}, {"id": 264, "seek": 160232, "start": 1602.32, "end": 1614.32, "text": " Thank you very much for coming.", "tokens": [50364, 1044, 291, 588, 709, 337, 1348, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17343488931655884, "compression_ratio": 0.7948717948717948, "no_speech_prob": 0.00032500317320227623}], "language": "en"}