{"text": " It's getting late already in Brussels, the sun is shutting down, but we still managed to find a second tiny go talk somehow. Daniel has got to tell us everything about visual programming in Go, which I think means that I no longer have to write codes. So, run for class. Can you hear me? First of all, thank March and the rest of the organization for this beautiful go depth room today. Also, the foster. And I'm Daniel Esteban, also known as Conejo, and I'm going to talk about visually programming Go. Probably you will use your eyes to program right now, but I'm talking about visual programming language, which is like you use graphically element, graphical element instead of text or code. Usually, there are two main branches of visual programming language. One is flow based, and the other is block based. And today we are going to focus on this block based way of programming Go. Why? because I like to make crazy things with Go, especially tiny Go, and I wanted to know if it's possible to make some code graphically and then translate it to Go, because, well, more seriously, because I think Go is programming is an essential skill for the future. It's a great way to introduce a non-programmer to programming, especially children. It's great for simple tasks like home automation or if F-E-R-A-I-F-T-T-T. Also no code, no code movement are great in popular, and Go has a standard nice library, some nice package, it's easy to read, and has multiple targets. You can run Go on Mac Windows, but also on a lot of microcontrollers. How are we going to visually program Go? Well, there is blocky, blocky. Also known as make code or scratch or hard to block, all of them use the same engine, and we are going to see this in a few moments. Blockly is a poor JavaScript library, it's 100% client-side, no server-side dependencies, it's compatible with all major browsers, and it's highly customizable and extensible. Blockly, unfortunately, does not support Go officially, so I'm here to fix that. Unfortunately, I have a playground specifically made, but I left the last update at my home. It's not on the internet, so I cannot run on my laptop right now, but I will show you some screen shots and we are going to see some demo. As you can see on the left side, the blockly editor is run on your web browser. Once we have, it generates the Go code, and then we send it to a server, so it can compile, it can format the code, and then we can get one file that runs on the web and the browser again, so we can see the output or we just get the file for our device. We are using for the server to compile, we are using TinyGo, which is a Go compiler for microcontroller, but you can use a regular Go. Let's see Sonet's sample. This is for example, we can make, and we are going to see different features of Blockly. The first one is, of course, a Hellover. So Blockly, we have these different blocks already made, and we just drag and drop them, we can edit them, we can add, we want, for example, to bring Hellover, and we just go for a text, we drop here, Hello Foster, and we are going to make this five time, and yeah, this doesn't work, sorry, but well, we just drop and drop the different element. The code it will generate, it's pretty simple, and it's just Go code. So this was our first example, you will need to trust me like this is working, but like I said, the last version of the playground is not, I couldn't bring it here. Our next example is like, especially focused to children or non-programming people, I present you the logo turtle, turtles are educational robots in computer science, yes, because it's really easy to see, you program the turtle, the robot, and you can see like you tell them move forward one meter, turn right, or turn left, move forward again, go back, and then you see the little robot moving, and it's very easy for children to understand the principle of programming. So they became popular with the local language and turtle graphic, so we make our own version, is the goferino, this little one, okay, this is a different robot, the chassis, the brain is a BBC micro bit, which can go inside, and then the eyes are a ultrasonic distance sensor. We are going to avoid obstacle, the first example like you can see is we set a variable called distance, it's a number variable, and then while forever, we just get, we read the distance from the sensor, and if the distance is less than a value, we just move to the, we spin to arrive, if not, we are going forward, and then repeat it indefinitely. The generate go code will take, I mean, Blockly will make the right imports, it will declare some variable needed for it, and it generates valid, this block will generate a valid code. So we just run, I will skip the flash bar, because again, it's just wasting time, and I think we are pretty tired for a long day, but we just can see, wait, maybe, yes, and when it finds an obstacle, it just spins. Bye bye goferino. The next sample is what I call the stream tank problem. I have a stream tank at home, oh, I need to live in a very specific temperature, and it turns out like water heater are very cheap, but water cooler are not, instead, you can just blow air with a fan to the fish tank, and it will lower the temperature. So I couldn't bring the fish tank here, but I have hopefully a still hot coffee, and hopefully still cold water, the circuit is very simple, it's an Arduino Nano RP2040, it has a waterproof temperature sensor here, and instead of blowing a fan, I will just put some RGB LEDs, so you can see them on the back. The code is quite similar as before, we just have a variable called temperature, we just initialize the device, we read the temperature, and if the temperature is higher than 30 degrees, we just blink red, if it's under 20 degrees Celsius, it will be blue, and if the temperature is okay, it will be green. So the temperature is okay, we're going to put the sensor in the coffee, it turns red, and now in the water it will get hopefully blue. So we can make this small thing, because with very, very few blocks, we just save us a lot of money instead of buying a water cooler. The code again is very simple, I just keep some pa, but it makes just regular code. Also the next example is more focused on no cold, low cold, and wet assembly, wet assembly is getting supported by more and more entities, more and more in service, like Fastly, Cloth Fair, Capsuleware, X-Team, you can have serverless function right now, X-Team is trying to make what Lua was a couple of years ago, you can have your program and you can include some extension from the user or the community in wet assembly. So I just create a once worker, it's a visit counter, in orange you can see the special block to work with Cloth Fair, we just create a data store with a name counter or the connection, we get, it's time we visit the main route on the web server, it gets the value of that data store, it's increment by one and then put it back, just a simple visit counter. The code generate here is again like HTTP function, you can probably write if you have done some web server code, this is a bit ugly code, I will explain later, but the race is let's just convert from string to integer, just add one and then put back again, and then we search the code, wait, the URL that publishes here, this is right now one, two, we keep reloading the page, it will contain, and if we go to the back end on Cloth Fair, we can see the value is there. So again with very few blocks, we can allow non-programmer people of our team to write an extension for our main program or whatever tool they are using. Now let's make the blocks, you need to define the blocks, it's a JSON structure which you have what type of block, the message to show, if it has some input, the output, the next statement, even you can add a tooltip, some comment or documentation, and then you just define what the block does and what the go code that it should write finally. There is even a block generator, you can add different properties to your block, and now the feature of the block is they are type checking, there is a little bit of type checking, you cannot assign a text variable to, I mean a text to a text variable or something like that, some blocks you can define what type is returning, you also have conditional, of course, you can edit the own block on life to add more else if or else condition, you have some list also, you have inline documentation, just wait a little bit and just the tooltip appear of what does block does, it can be translate, of course, in any language which makes it really, really easy for people to start, and you can have different colors and different style for each type of block. You can also have some image on any part of the block which helps a lot, again, the user to know that, okay, this block is an LED or a temperature sensor or something like that. The limitation is currently not everything is yet supported, you need to create a block for it, it's probably worse for vision impaired people or screen reader user, because I guess just text file or code file is easier for them, static typing is complicated because there are a lot of different types, and Blockly was made with JavaScript, Python, and Dart in mind, like dynamic type in kind of language, you have to make a lot of decision in behalf of the user, like, for example, on our example of, or at what service, we just assume like the response writer will be called D and the request is R-E-Q, so you have to have that in mind when you make other blocks, ugly code is sometimes needed, because, for example, and just focusing on tiny go, I expect all number variables to be 32, because it is common in tiny go, so when you have to typecast into I'm 32 or something like that, it gets ugly, and there is not much documentation right now about how to debug it or how to develop on Blockly, so it's kind of hard right now. Here are the links for the different projects, and that's it. Thank you. I'll give you some time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.24, "text": " It's getting late already in Brussels, the sun is shutting down, but we still managed", "tokens": [467, 311, 1242, 3469, 1217, 294, 38717, 11, 264, 3295, 307, 36057, 760, 11, 457, 321, 920, 6453], "temperature": 0.0, "avg_logprob": -0.40076605031188106, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.49089205265045166}, {"id": 1, "seek": 0, "start": 14.24, "end": 17.28, "text": " to find a second tiny go talk somehow.", "tokens": [281, 915, 257, 1150, 5870, 352, 751, 6063, 13], "temperature": 0.0, "avg_logprob": -0.40076605031188106, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.49089205265045166}, {"id": 2, "seek": 0, "start": 17.28, "end": 22.92, "text": " Daniel has got to tell us everything about visual programming in Go, which I think means", "tokens": [8033, 575, 658, 281, 980, 505, 1203, 466, 5056, 9410, 294, 1037, 11, 597, 286, 519, 1355], "temperature": 0.0, "avg_logprob": -0.40076605031188106, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.49089205265045166}, {"id": 3, "seek": 0, "start": 22.92, "end": 24.68, "text": " that I no longer have to write codes.", "tokens": [300, 286, 572, 2854, 362, 281, 2464, 14211, 13], "temperature": 0.0, "avg_logprob": -0.40076605031188106, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.49089205265045166}, {"id": 4, "seek": 0, "start": 24.68, "end": 26.68, "text": " So, run for class.", "tokens": [407, 11, 1190, 337, 1508, 13], "temperature": 0.0, "avg_logprob": -0.40076605031188106, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.49089205265045166}, {"id": 5, "seek": 2668, "start": 26.68, "end": 32.0, "text": " Can you hear me?", "tokens": [1664, 291, 1568, 385, 30], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 6, "seek": 2668, "start": 32.0, "end": 36.92, "text": " First of all, thank March and the rest of the organization for this beautiful go depth", "tokens": [2386, 295, 439, 11, 1309, 6129, 293, 264, 1472, 295, 264, 4475, 337, 341, 2238, 352, 7161], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 7, "seek": 2668, "start": 36.92, "end": 37.92, "text": " room today.", "tokens": [1808, 965, 13], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 8, "seek": 2668, "start": 37.92, "end": 41.6, "text": " Also, the foster.", "tokens": [2743, 11, 264, 17114, 13], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 9, "seek": 2668, "start": 41.6, "end": 47.32, "text": " And I'm Daniel Esteban, also known as Conejo, and I'm going to talk about visually programming", "tokens": [400, 286, 478, 8033, 16105, 5144, 11, 611, 2570, 382, 383, 546, 5134, 11, 293, 286, 478, 516, 281, 751, 466, 19622, 9410], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 10, "seek": 2668, "start": 47.32, "end": 48.32, "text": " Go.", "tokens": [1037, 13], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 11, "seek": 2668, "start": 48.32, "end": 54.519999999999996, "text": " Probably you will use your eyes to program right now, but I'm talking about visual programming", "tokens": [9210, 291, 486, 764, 428, 2575, 281, 1461, 558, 586, 11, 457, 286, 478, 1417, 466, 5056, 9410], "temperature": 0.0, "avg_logprob": -0.31566645590107095, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.001216580276377499}, {"id": 12, "seek": 5452, "start": 54.52, "end": 61.760000000000005, "text": " language, which is like you use graphically element, graphical element instead of text", "tokens": [2856, 11, 597, 307, 411, 291, 764, 4295, 984, 4478, 11, 35942, 4478, 2602, 295, 2487], "temperature": 0.0, "avg_logprob": -0.27831039965992244, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.0005843673716299236}, {"id": 13, "seek": 5452, "start": 61.760000000000005, "end": 62.760000000000005, "text": " or code.", "tokens": [420, 3089, 13], "temperature": 0.0, "avg_logprob": -0.27831039965992244, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.0005843673716299236}, {"id": 14, "seek": 5452, "start": 62.760000000000005, "end": 69.0, "text": " Usually, there are two main branches of visual programming language.", "tokens": [11419, 11, 456, 366, 732, 2135, 14770, 295, 5056, 9410, 2856, 13], "temperature": 0.0, "avg_logprob": -0.27831039965992244, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.0005843673716299236}, {"id": 15, "seek": 5452, "start": 69.0, "end": 73.60000000000001, "text": " One is flow based, and the other is block based.", "tokens": [1485, 307, 3095, 2361, 11, 293, 264, 661, 307, 3461, 2361, 13], "temperature": 0.0, "avg_logprob": -0.27831039965992244, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.0005843673716299236}, {"id": 16, "seek": 5452, "start": 73.60000000000001, "end": 80.24000000000001, "text": " And today we are going to focus on this block based way of programming Go.", "tokens": [400, 965, 321, 366, 516, 281, 1879, 322, 341, 3461, 2361, 636, 295, 9410, 1037, 13], "temperature": 0.0, "avg_logprob": -0.27831039965992244, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.0005843673716299236}, {"id": 17, "seek": 8024, "start": 80.24, "end": 89.32, "text": " Why? because I like to make crazy things with Go, especially tiny Go, and I wanted to know", "tokens": [1545, 30, 570, 286, 411, 281, 652, 3219, 721, 365, 1037, 11, 2318, 5870, 1037, 11, 293, 286, 1415, 281, 458], "temperature": 0.0, "avg_logprob": -0.2124987929614622, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0004401997721288353}, {"id": 18, "seek": 8024, "start": 89.32, "end": 100.56, "text": " if it's possible to make some code graphically and then translate it to Go, because, well,", "tokens": [498, 309, 311, 1944, 281, 652, 512, 3089, 4295, 984, 293, 550, 13799, 309, 281, 1037, 11, 570, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.2124987929614622, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0004401997721288353}, {"id": 19, "seek": 8024, "start": 100.56, "end": 108.11999999999999, "text": " more seriously, because I think Go is programming is an essential skill for the future.", "tokens": [544, 6638, 11, 570, 286, 519, 1037, 307, 9410, 307, 364, 7115, 5389, 337, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.2124987929614622, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0004401997721288353}, {"id": 20, "seek": 10812, "start": 108.12, "end": 118.28, "text": " It's a great way to introduce a non-programmer to programming, especially children.", "tokens": [467, 311, 257, 869, 636, 281, 5366, 257, 2107, 12, 32726, 936, 281, 9410, 11, 2318, 2227, 13], "temperature": 0.0, "avg_logprob": -0.31687482198079425, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.00019256450468674302}, {"id": 21, "seek": 10812, "start": 118.28, "end": 127.16, "text": " It's great for simple tasks like home automation or if F-E-R-A-I-F-T-T-T.", "tokens": [467, 311, 869, 337, 2199, 9608, 411, 1280, 17769, 420, 498, 479, 12, 36, 12, 49, 12, 32, 12, 40, 12, 37, 12, 51, 12, 51, 12, 51, 13], "temperature": 0.0, "avg_logprob": -0.31687482198079425, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.00019256450468674302}, {"id": 22, "seek": 10812, "start": 127.16, "end": 134.6, "text": " Also no code, no code movement are great in popular, and Go has a standard nice library,", "tokens": [2743, 572, 3089, 11, 572, 3089, 3963, 366, 869, 294, 3743, 11, 293, 1037, 575, 257, 3832, 1481, 6405, 11], "temperature": 0.0, "avg_logprob": -0.31687482198079425, "compression_ratio": 1.3898305084745763, "no_speech_prob": 0.00019256450468674302}, {"id": 23, "seek": 13460, "start": 134.6, "end": 140.32, "text": " some nice package, it's easy to read, and has multiple targets.", "tokens": [512, 1481, 7372, 11, 309, 311, 1858, 281, 1401, 11, 293, 575, 3866, 12911, 13], "temperature": 0.0, "avg_logprob": -0.2880904485308935, "compression_ratio": 1.3311688311688312, "no_speech_prob": 8.05799281806685e-05}, {"id": 24, "seek": 13460, "start": 140.32, "end": 148.35999999999999, "text": " You can run Go on Mac Windows, but also on a lot of microcontrollers.", "tokens": [509, 393, 1190, 1037, 322, 5707, 8591, 11, 457, 611, 322, 257, 688, 295, 4532, 9000, 3970, 433, 13], "temperature": 0.0, "avg_logprob": -0.2880904485308935, "compression_ratio": 1.3311688311688312, "no_speech_prob": 8.05799281806685e-05}, {"id": 25, "seek": 13460, "start": 148.35999999999999, "end": 154.92, "text": " How are we going to visually program Go?", "tokens": [1012, 366, 321, 516, 281, 19622, 1461, 1037, 30], "temperature": 0.0, "avg_logprob": -0.2880904485308935, "compression_ratio": 1.3311688311688312, "no_speech_prob": 8.05799281806685e-05}, {"id": 26, "seek": 13460, "start": 154.92, "end": 160.6, "text": " Well, there is blocky, blocky.", "tokens": [1042, 11, 456, 307, 3461, 88, 11, 3461, 88, 13], "temperature": 0.0, "avg_logprob": -0.2880904485308935, "compression_ratio": 1.3311688311688312, "no_speech_prob": 8.05799281806685e-05}, {"id": 27, "seek": 16060, "start": 160.6, "end": 169.24, "text": " Also known as make code or scratch or hard to block, all of them use the same engine,", "tokens": [2743, 2570, 382, 652, 3089, 420, 8459, 420, 1152, 281, 3461, 11, 439, 295, 552, 764, 264, 912, 2848, 11], "temperature": 0.0, "avg_logprob": -0.30556120695891203, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00011680629540933296}, {"id": 28, "seek": 16060, "start": 169.24, "end": 172.84, "text": " and we are going to see this in a few moments.", "tokens": [293, 321, 366, 516, 281, 536, 341, 294, 257, 1326, 6065, 13], "temperature": 0.0, "avg_logprob": -0.30556120695891203, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00011680629540933296}, {"id": 29, "seek": 16060, "start": 172.84, "end": 180.04, "text": " Blockly is a poor JavaScript library, it's 100% client-side, no server-side dependencies,", "tokens": [17500, 356, 307, 257, 4716, 15778, 6405, 11, 309, 311, 2319, 4, 6423, 12, 1812, 11, 572, 7154, 12, 1812, 36606, 11], "temperature": 0.0, "avg_logprob": -0.30556120695891203, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00011680629540933296}, {"id": 30, "seek": 16060, "start": 180.04, "end": 187.07999999999998, "text": " it's compatible with all major browsers, and it's highly customizable and extensible.", "tokens": [309, 311, 18218, 365, 439, 2563, 36069, 11, 293, 309, 311, 5405, 47922, 293, 1279, 30633, 13], "temperature": 0.0, "avg_logprob": -0.30556120695891203, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00011680629540933296}, {"id": 31, "seek": 18708, "start": 187.08, "end": 195.60000000000002, "text": " Blockly, unfortunately, does not support Go officially, so I'm here to fix that.", "tokens": [17500, 356, 11, 7015, 11, 775, 406, 1406, 1037, 12053, 11, 370, 286, 478, 510, 281, 3191, 300, 13], "temperature": 0.0, "avg_logprob": -0.2592195417822861, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0002424160047667101}, {"id": 32, "seek": 18708, "start": 195.60000000000002, "end": 205.60000000000002, "text": " Unfortunately, I have a playground specifically made, but I left the last update at my home.", "tokens": [8590, 11, 286, 362, 257, 24646, 4682, 1027, 11, 457, 286, 1411, 264, 1036, 5623, 412, 452, 1280, 13], "temperature": 0.0, "avg_logprob": -0.2592195417822861, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0002424160047667101}, {"id": 33, "seek": 18708, "start": 205.60000000000002, "end": 210.68, "text": " It's not on the internet, so I cannot run on my laptop right now, but I will show you", "tokens": [467, 311, 406, 322, 264, 4705, 11, 370, 286, 2644, 1190, 322, 452, 10732, 558, 586, 11, 457, 286, 486, 855, 291], "temperature": 0.0, "avg_logprob": -0.2592195417822861, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0002424160047667101}, {"id": 34, "seek": 18708, "start": 210.68, "end": 216.04000000000002, "text": " some screen shots and we are going to see some demo.", "tokens": [512, 2568, 8305, 293, 321, 366, 516, 281, 536, 512, 10723, 13], "temperature": 0.0, "avg_logprob": -0.2592195417822861, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0002424160047667101}, {"id": 35, "seek": 21604, "start": 216.04, "end": 225.51999999999998, "text": " As you can see on the left side, the blockly editor is run on your web browser.", "tokens": [1018, 291, 393, 536, 322, 264, 1411, 1252, 11, 264, 3461, 356, 9839, 307, 1190, 322, 428, 3670, 11185, 13], "temperature": 0.0, "avg_logprob": -0.2606451797485352, "compression_ratio": 1.3571428571428572, "no_speech_prob": 7.398296293104067e-05}, {"id": 36, "seek": 21604, "start": 225.51999999999998, "end": 233.04, "text": " Once we have, it generates the Go code, and then we send it to a server, so it can compile,", "tokens": [3443, 321, 362, 11, 309, 23815, 264, 1037, 3089, 11, 293, 550, 321, 2845, 309, 281, 257, 7154, 11, 370, 309, 393, 31413, 11], "temperature": 0.0, "avg_logprob": -0.2606451797485352, "compression_ratio": 1.3571428571428572, "no_speech_prob": 7.398296293104067e-05}, {"id": 37, "seek": 23304, "start": 233.04, "end": 247.44, "text": " it can format the code, and then we can get one file that runs on the web and the browser", "tokens": [309, 393, 7877, 264, 3089, 11, 293, 550, 321, 393, 483, 472, 3991, 300, 6676, 322, 264, 3670, 293, 264, 11185], "temperature": 0.0, "avg_logprob": -0.1980456464430865, "compression_ratio": 1.6064516129032258, "no_speech_prob": 1.11406579890172e-05}, {"id": 38, "seek": 23304, "start": 247.44, "end": 253.84, "text": " again, so we can see the output or we just get the file for our device.", "tokens": [797, 11, 370, 321, 393, 536, 264, 5598, 420, 321, 445, 483, 264, 3991, 337, 527, 4302, 13], "temperature": 0.0, "avg_logprob": -0.1980456464430865, "compression_ratio": 1.6064516129032258, "no_speech_prob": 1.11406579890172e-05}, {"id": 39, "seek": 23304, "start": 253.84, "end": 259.6, "text": " We are using for the server to compile, we are using TinyGo, which is a Go compiler for", "tokens": [492, 366, 1228, 337, 264, 7154, 281, 31413, 11, 321, 366, 1228, 39992, 12104, 11, 597, 307, 257, 1037, 31958, 337], "temperature": 0.0, "avg_logprob": -0.1980456464430865, "compression_ratio": 1.6064516129032258, "no_speech_prob": 1.11406579890172e-05}, {"id": 40, "seek": 25960, "start": 259.6, "end": 267.20000000000005, "text": " microcontroller, but you can use a regular Go.", "tokens": [4532, 9000, 22922, 11, 457, 291, 393, 764, 257, 3890, 1037, 13], "temperature": 0.0, "avg_logprob": -0.32609291682167657, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.00012125608191126958}, {"id": 41, "seek": 25960, "start": 267.20000000000005, "end": 269.36, "text": " Let's see Sonet's sample.", "tokens": [961, 311, 536, 5185, 302, 311, 6889, 13], "temperature": 0.0, "avg_logprob": -0.32609291682167657, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.00012125608191126958}, {"id": 42, "seek": 25960, "start": 269.36, "end": 281.48, "text": " This is for example, we can make, and we are going to see different features of Blockly.", "tokens": [639, 307, 337, 1365, 11, 321, 393, 652, 11, 293, 321, 366, 516, 281, 536, 819, 4122, 295, 17500, 356, 13], "temperature": 0.0, "avg_logprob": -0.32609291682167657, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.00012125608191126958}, {"id": 43, "seek": 25960, "start": 281.48, "end": 288.36, "text": " The first one is, of course, a Hellover.", "tokens": [440, 700, 472, 307, 11, 295, 1164, 11, 257, 12090, 3570, 13], "temperature": 0.0, "avg_logprob": -0.32609291682167657, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.00012125608191126958}, {"id": 44, "seek": 28836, "start": 288.36, "end": 302.52000000000004, "text": " So Blockly, we have these different blocks already made, and we just drag and drop them,", "tokens": [407, 17500, 356, 11, 321, 362, 613, 819, 8474, 1217, 1027, 11, 293, 321, 445, 5286, 293, 3270, 552, 11], "temperature": 0.0, "avg_logprob": -0.21448925018310547, "compression_ratio": 1.43801652892562, "no_speech_prob": 5.652928302879445e-05}, {"id": 45, "seek": 28836, "start": 302.52000000000004, "end": 314.56, "text": " we can edit them, we can add, we want, for example, to bring Hellover, and we just go", "tokens": [321, 393, 8129, 552, 11, 321, 393, 909, 11, 321, 528, 11, 337, 1365, 11, 281, 1565, 12090, 3570, 11, 293, 321, 445, 352], "temperature": 0.0, "avg_logprob": -0.21448925018310547, "compression_ratio": 1.43801652892562, "no_speech_prob": 5.652928302879445e-05}, {"id": 46, "seek": 31456, "start": 314.56, "end": 333.92, "text": " for a text, we drop here, Hello Foster, and we are going to make this five time, and yeah,", "tokens": [337, 257, 2487, 11, 321, 3270, 510, 11, 2425, 38756, 11, 293, 321, 366, 516, 281, 652, 341, 1732, 565, 11, 293, 1338, 11], "temperature": 0.0, "avg_logprob": -0.3420350211007254, "compression_ratio": 1.3790322580645162, "no_speech_prob": 6.463727913796902e-05}, {"id": 47, "seek": 31456, "start": 333.92, "end": 343.48, "text": " this doesn't work, sorry, but well, we just drop and drop the different element.", "tokens": [341, 1177, 380, 589, 11, 2597, 11, 457, 731, 11, 321, 445, 3270, 293, 3270, 264, 819, 4478, 13], "temperature": 0.0, "avg_logprob": -0.3420350211007254, "compression_ratio": 1.3790322580645162, "no_speech_prob": 6.463727913796902e-05}, {"id": 48, "seek": 34348, "start": 343.48, "end": 361.64000000000004, "text": " The code it will generate, it's pretty simple, and it's just Go code.", "tokens": [440, 3089, 309, 486, 8460, 11, 309, 311, 1238, 2199, 11, 293, 309, 311, 445, 1037, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1915585777976296, "compression_ratio": 1.3418803418803418, "no_speech_prob": 0.00014080764958634973}, {"id": 49, "seek": 34348, "start": 361.64000000000004, "end": 367.08000000000004, "text": " So this was our first example, you will need to trust me like this is working, but like", "tokens": [407, 341, 390, 527, 700, 1365, 11, 291, 486, 643, 281, 3361, 385, 411, 341, 307, 1364, 11, 457, 411], "temperature": 0.0, "avg_logprob": -0.1915585777976296, "compression_ratio": 1.3418803418803418, "no_speech_prob": 0.00014080764958634973}, {"id": 50, "seek": 36708, "start": 367.08, "end": 378.35999999999996, "text": " I said, the last version of the playground is not, I couldn't bring it here.", "tokens": [286, 848, 11, 264, 1036, 3037, 295, 264, 24646, 307, 406, 11, 286, 2809, 380, 1565, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.26205331087112427, "compression_ratio": 1.441988950276243, "no_speech_prob": 9.967029473045841e-05}, {"id": 51, "seek": 36708, "start": 378.35999999999996, "end": 386.44, "text": " Our next example is like, especially focused to children or non-programming people, I present", "tokens": [2621, 958, 1365, 307, 411, 11, 2318, 5178, 281, 2227, 420, 2107, 12, 32726, 2810, 561, 11, 286, 1974], "temperature": 0.0, "avg_logprob": -0.26205331087112427, "compression_ratio": 1.441988950276243, "no_speech_prob": 9.967029473045841e-05}, {"id": 52, "seek": 36708, "start": 386.44, "end": 395.91999999999996, "text": " you the logo turtle, turtles are educational robots in computer science, yes, because it's", "tokens": [291, 264, 9699, 22866, 11, 32422, 366, 10189, 14733, 294, 3820, 3497, 11, 2086, 11, 570, 309, 311], "temperature": 0.0, "avg_logprob": -0.26205331087112427, "compression_ratio": 1.441988950276243, "no_speech_prob": 9.967029473045841e-05}, {"id": 53, "seek": 39592, "start": 395.92, "end": 405.52000000000004, "text": " really easy to see, you program the turtle, the robot, and you can see like you tell them", "tokens": [534, 1858, 281, 536, 11, 291, 1461, 264, 22866, 11, 264, 7881, 11, 293, 291, 393, 536, 411, 291, 980, 552], "temperature": 0.0, "avg_logprob": -0.19301435392196864, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.00011704157805070281}, {"id": 54, "seek": 39592, "start": 405.52000000000004, "end": 411.96000000000004, "text": " move forward one meter, turn right, or turn left, move forward again, go back, and then", "tokens": [1286, 2128, 472, 9255, 11, 1261, 558, 11, 420, 1261, 1411, 11, 1286, 2128, 797, 11, 352, 646, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.19301435392196864, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.00011704157805070281}, {"id": 55, "seek": 39592, "start": 411.96000000000004, "end": 417.24, "text": " you see the little robot moving, and it's very easy for children to understand the principle", "tokens": [291, 536, 264, 707, 7881, 2684, 11, 293, 309, 311, 588, 1858, 337, 2227, 281, 1223, 264, 8665], "temperature": 0.0, "avg_logprob": -0.19301435392196864, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.00011704157805070281}, {"id": 56, "seek": 39592, "start": 417.24, "end": 418.6, "text": " of programming.", "tokens": [295, 9410, 13], "temperature": 0.0, "avg_logprob": -0.19301435392196864, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.00011704157805070281}, {"id": 57, "seek": 41860, "start": 418.6, "end": 428.72, "text": " So they became popular with the local language and turtle graphic, so we make our own version,", "tokens": [407, 436, 3062, 3743, 365, 264, 2654, 2856, 293, 22866, 14089, 11, 370, 321, 652, 527, 1065, 3037, 11], "temperature": 0.0, "avg_logprob": -0.3853928524514903, "compression_ratio": 1.1325301204819278, "no_speech_prob": 0.00010603145346976817}, {"id": 58, "seek": 42872, "start": 428.72, "end": 451.40000000000003, "text": " is the goferino, this little one, okay, this is a different robot, the chassis, the brain", "tokens": [307, 264, 352, 612, 2982, 11, 341, 707, 472, 11, 1392, 11, 341, 307, 257, 819, 7881, 11, 264, 28262, 11, 264, 3567], "temperature": 0.0, "avg_logprob": -0.37079849949589483, "compression_ratio": 1.1866666666666668, "no_speech_prob": 0.00021475821267813444}, {"id": 59, "seek": 45140, "start": 451.4, "end": 466.88, "text": " is a BBC micro bit, which can go inside, and then the eyes are a ultrasonic distance sensor.", "tokens": [307, 257, 22669, 4532, 857, 11, 597, 393, 352, 1854, 11, 293, 550, 264, 2575, 366, 257, 3725, 81, 39460, 4560, 10200, 13], "temperature": 0.0, "avg_logprob": -0.2903120319048564, "compression_ratio": 1.3533834586466165, "no_speech_prob": 0.00013550081348512322}, {"id": 60, "seek": 45140, "start": 466.88, "end": 476.71999999999997, "text": " We are going to avoid obstacle, the first example like you can see is we set a variable", "tokens": [492, 366, 516, 281, 5042, 23112, 11, 264, 700, 1365, 411, 291, 393, 536, 307, 321, 992, 257, 7006], "temperature": 0.0, "avg_logprob": -0.2903120319048564, "compression_ratio": 1.3533834586466165, "no_speech_prob": 0.00013550081348512322}, {"id": 61, "seek": 47672, "start": 476.72, "end": 487.36, "text": " called distance, it's a number variable, and then while forever, we just get, we read the", "tokens": [1219, 4560, 11, 309, 311, 257, 1230, 7006, 11, 293, 550, 1339, 5680, 11, 321, 445, 483, 11, 321, 1401, 264], "temperature": 0.0, "avg_logprob": -0.21962265287126814, "compression_ratio": 1.6560509554140128, "no_speech_prob": 0.00038424183730967343}, {"id": 62, "seek": 47672, "start": 487.36, "end": 495.68, "text": " distance from the sensor, and if the distance is less than a value, we just move to the,", "tokens": [4560, 490, 264, 10200, 11, 293, 498, 264, 4560, 307, 1570, 813, 257, 2158, 11, 321, 445, 1286, 281, 264, 11], "temperature": 0.0, "avg_logprob": -0.21962265287126814, "compression_ratio": 1.6560509554140128, "no_speech_prob": 0.00038424183730967343}, {"id": 63, "seek": 47672, "start": 495.68, "end": 502.52000000000004, "text": " we spin to arrive, if not, we are going forward, and then repeat it indefinitely.", "tokens": [321, 6060, 281, 8881, 11, 498, 406, 11, 321, 366, 516, 2128, 11, 293, 550, 7149, 309, 24162, 10925, 13], "temperature": 0.0, "avg_logprob": -0.21962265287126814, "compression_ratio": 1.6560509554140128, "no_speech_prob": 0.00038424183730967343}, {"id": 64, "seek": 50252, "start": 502.52, "end": 515.96, "text": " The generate go code will take, I mean, Blockly will make the right imports, it will declare", "tokens": [440, 8460, 352, 3089, 486, 747, 11, 286, 914, 11, 17500, 356, 486, 652, 264, 558, 41596, 11, 309, 486, 19710], "temperature": 0.0, "avg_logprob": -0.23595538346663766, "compression_ratio": 1.4375, "no_speech_prob": 0.00081693718675524}, {"id": 65, "seek": 50252, "start": 515.96, "end": 526.0799999999999, "text": " some variable needed for it, and it generates valid, this block will generate a valid code.", "tokens": [512, 7006, 2978, 337, 309, 11, 293, 309, 23815, 7363, 11, 341, 3461, 486, 8460, 257, 7363, 3089, 13], "temperature": 0.0, "avg_logprob": -0.23595538346663766, "compression_ratio": 1.4375, "no_speech_prob": 0.00081693718675524}, {"id": 66, "seek": 52608, "start": 526.08, "end": 535.12, "text": " So we just run, I will skip the flash bar, because again, it's just wasting time, and", "tokens": [407, 321, 445, 1190, 11, 286, 486, 10023, 264, 7319, 2159, 11, 570, 797, 11, 309, 311, 445, 20457, 565, 11, 293], "temperature": 0.0, "avg_logprob": -0.2053793210249681, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.000524054397828877}, {"id": 67, "seek": 52608, "start": 535.12, "end": 553.0400000000001, "text": " I think we are pretty tired for a long day, but we just can see, wait, maybe, yes, and", "tokens": [286, 519, 321, 366, 1238, 5868, 337, 257, 938, 786, 11, 457, 321, 445, 393, 536, 11, 1699, 11, 1310, 11, 2086, 11, 293], "temperature": 0.0, "avg_logprob": -0.2053793210249681, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.000524054397828877}, {"id": 68, "seek": 55304, "start": 553.04, "end": 568.04, "text": " when it finds an obstacle, it just spins.", "tokens": [562, 309, 10704, 364, 23112, 11, 309, 445, 31587, 13], "temperature": 0.0, "avg_logprob": -0.41524338722229004, "compression_ratio": 1.1274509803921569, "no_speech_prob": 0.00016179762315005064}, {"id": 69, "seek": 55304, "start": 568.04, "end": 576.52, "text": " Bye bye goferino.", "tokens": [4621, 6543, 352, 612, 2982, 13], "temperature": 0.0, "avg_logprob": -0.41524338722229004, "compression_ratio": 1.1274509803921569, "no_speech_prob": 0.00016179762315005064}, {"id": 70, "seek": 55304, "start": 576.52, "end": 581.4399999999999, "text": " The next sample is what I call the stream tank problem.", "tokens": [440, 958, 6889, 307, 437, 286, 818, 264, 4309, 5466, 1154, 13], "temperature": 0.0, "avg_logprob": -0.41524338722229004, "compression_ratio": 1.1274509803921569, "no_speech_prob": 0.00016179762315005064}, {"id": 71, "seek": 58144, "start": 581.44, "end": 595.32, "text": " I have a stream tank at home, oh, I need to live in a very specific temperature, and it", "tokens": [286, 362, 257, 4309, 5466, 412, 1280, 11, 1954, 11, 286, 643, 281, 1621, 294, 257, 588, 2685, 4292, 11, 293, 309], "temperature": 0.0, "avg_logprob": -0.3205567420797145, "compression_ratio": 1.4146341463414633, "no_speech_prob": 0.001804244238883257}, {"id": 72, "seek": 58144, "start": 595.32, "end": 606.48, "text": " turns out like water heater are very cheap, but water cooler are not, instead, you can", "tokens": [4523, 484, 411, 1281, 30408, 366, 588, 7084, 11, 457, 1281, 15566, 366, 406, 11, 2602, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.3205567420797145, "compression_ratio": 1.4146341463414633, "no_speech_prob": 0.001804244238883257}, {"id": 73, "seek": 60648, "start": 606.48, "end": 617.8000000000001, "text": " just blow air with a fan to the fish tank, and it will lower the temperature.", "tokens": [445, 6327, 1988, 365, 257, 3429, 281, 264, 3506, 5466, 11, 293, 309, 486, 3126, 264, 4292, 13], "temperature": 0.0, "avg_logprob": -0.16202522913614908, "compression_ratio": 1.3983739837398375, "no_speech_prob": 0.0001810243702493608}, {"id": 74, "seek": 60648, "start": 617.8000000000001, "end": 628.0, "text": " So I couldn't bring the fish tank here, but I have hopefully a still hot coffee, and hopefully", "tokens": [407, 286, 2809, 380, 1565, 264, 3506, 5466, 510, 11, 457, 286, 362, 4696, 257, 920, 2368, 4982, 11, 293, 4696], "temperature": 0.0, "avg_logprob": -0.16202522913614908, "compression_ratio": 1.3983739837398375, "no_speech_prob": 0.0001810243702493608}, {"id": 75, "seek": 62800, "start": 628.0, "end": 638.72, "text": " still cold water, the circuit is very simple, it's an Arduino Nano RP2040, it has a waterproof", "tokens": [920, 3554, 1281, 11, 264, 9048, 307, 588, 2199, 11, 309, 311, 364, 39539, 43511, 14105, 2009, 5254, 11, 309, 575, 257, 27974], "temperature": 0.0, "avg_logprob": -0.24524112701416015, "compression_ratio": 1.230263157894737, "no_speech_prob": 0.00015965852071531117}, {"id": 76, "seek": 62800, "start": 638.72, "end": 650.48, "text": " temperature sensor here, and instead of blowing a fan, I will just put some RGB LEDs, so you", "tokens": [4292, 10200, 510, 11, 293, 2602, 295, 15068, 257, 3429, 11, 286, 486, 445, 829, 512, 31231, 33366, 11, 370, 291], "temperature": 0.0, "avg_logprob": -0.24524112701416015, "compression_ratio": 1.230263157894737, "no_speech_prob": 0.00015965852071531117}, {"id": 77, "seek": 65048, "start": 650.48, "end": 658.2, "text": " can see them on the back.", "tokens": [393, 536, 552, 322, 264, 646, 13], "temperature": 0.0, "avg_logprob": -0.1379616845328853, "compression_ratio": 1.536231884057971, "no_speech_prob": 0.00020855022012256086}, {"id": 78, "seek": 65048, "start": 658.2, "end": 666.16, "text": " The code is quite similar as before, we just have a variable called temperature, we just", "tokens": [440, 3089, 307, 1596, 2531, 382, 949, 11, 321, 445, 362, 257, 7006, 1219, 4292, 11, 321, 445], "temperature": 0.0, "avg_logprob": -0.1379616845328853, "compression_ratio": 1.536231884057971, "no_speech_prob": 0.00020855022012256086}, {"id": 79, "seek": 65048, "start": 666.16, "end": 674.32, "text": " initialize the device, we read the temperature, and if the temperature is higher than 30 degrees,", "tokens": [5883, 1125, 264, 4302, 11, 321, 1401, 264, 4292, 11, 293, 498, 264, 4292, 307, 2946, 813, 2217, 5310, 11], "temperature": 0.0, "avg_logprob": -0.1379616845328853, "compression_ratio": 1.536231884057971, "no_speech_prob": 0.00020855022012256086}, {"id": 80, "seek": 67432, "start": 674.32, "end": 684.1600000000001, "text": " we just blink red, if it's under 20 degrees Celsius, it will be blue, and if the temperature", "tokens": [321, 445, 24667, 2182, 11, 498, 309, 311, 833, 945, 5310, 22658, 11, 309, 486, 312, 3344, 11, 293, 498, 264, 4292], "temperature": 0.0, "avg_logprob": -0.15215558272141677, "compression_ratio": 1.108433734939759, "no_speech_prob": 0.0010897795436903834}, {"id": 81, "seek": 68416, "start": 684.16, "end": 707.4399999999999, "text": " is okay, it will be green.", "tokens": [307, 1392, 11, 309, 486, 312, 3092, 13], "temperature": 0.0, "avg_logprob": -0.20539446671803793, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.000773657055106014}, {"id": 82, "seek": 70744, "start": 707.44, "end": 727.32, "text": " So the temperature is okay, we're going to put the sensor in the coffee, it turns red,", "tokens": [407, 264, 4292, 307, 1392, 11, 321, 434, 516, 281, 829, 264, 10200, 294, 264, 4982, 11, 309, 4523, 2182, 11], "temperature": 0.0, "avg_logprob": -0.2826866722106934, "compression_ratio": 1.1025641025641026, "no_speech_prob": 0.00037497078301385045}, {"id": 83, "seek": 72732, "start": 727.32, "end": 737.9200000000001, "text": " and now in the water it will get hopefully blue.", "tokens": [293, 586, 294, 264, 1281, 309, 486, 483, 4696, 3344, 13], "temperature": 0.0, "avg_logprob": -0.22387161254882812, "compression_ratio": 1.348148148148148, "no_speech_prob": 0.00044632842764258385}, {"id": 84, "seek": 72732, "start": 737.9200000000001, "end": 747.24, "text": " So we can make this small thing, because with very, very few blocks, we just save us a lot", "tokens": [407, 321, 393, 652, 341, 1359, 551, 11, 570, 365, 588, 11, 588, 1326, 8474, 11, 321, 445, 3155, 505, 257, 688], "temperature": 0.0, "avg_logprob": -0.22387161254882812, "compression_ratio": 1.348148148148148, "no_speech_prob": 0.00044632842764258385}, {"id": 85, "seek": 72732, "start": 747.24, "end": 750.7600000000001, "text": " of money instead of buying a water cooler.", "tokens": [295, 1460, 2602, 295, 6382, 257, 1281, 15566, 13], "temperature": 0.0, "avg_logprob": -0.22387161254882812, "compression_ratio": 1.348148148148148, "no_speech_prob": 0.00044632842764258385}, {"id": 86, "seek": 75076, "start": 750.76, "end": 763.28, "text": " The code again is very simple, I just keep some pa, but it makes just regular code.", "tokens": [440, 3089, 797, 307, 588, 2199, 11, 286, 445, 1066, 512, 2502, 11, 457, 309, 1669, 445, 3890, 3089, 13], "temperature": 0.0, "avg_logprob": -0.30755474256432574, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0004989030421711504}, {"id": 87, "seek": 75076, "start": 763.28, "end": 772.64, "text": " Also the next example is more focused on no cold, low cold, and wet assembly, wet assembly", "tokens": [2743, 264, 958, 1365, 307, 544, 5178, 322, 572, 3554, 11, 2295, 3554, 11, 293, 6630, 12103, 11, 6630, 12103], "temperature": 0.0, "avg_logprob": -0.30755474256432574, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0004989030421711504}, {"id": 88, "seek": 75076, "start": 772.64, "end": 777.64, "text": " is getting supported by more and more entities, more and more in service, like Fastly, Cloth", "tokens": [307, 1242, 8104, 538, 544, 293, 544, 16667, 11, 544, 293, 544, 294, 2643, 11, 411, 15968, 356, 11, 2033, 900], "temperature": 0.0, "avg_logprob": -0.30755474256432574, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0004989030421711504}, {"id": 89, "seek": 77764, "start": 777.64, "end": 792.48, "text": " Fair, Capsuleware, X-Team, you can have serverless function right now, X-Team is trying to make", "tokens": [12157, 11, 383, 2382, 2271, 3039, 11, 1783, 12, 38588, 11, 291, 393, 362, 7154, 1832, 2445, 558, 586, 11, 1783, 12, 38588, 307, 1382, 281, 652], "temperature": 0.0, "avg_logprob": -0.30012368256191035, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.0007340285228565335}, {"id": 90, "seek": 77764, "start": 792.48, "end": 801.4, "text": " what Lua was a couple of years ago, you can have your program and you can include some", "tokens": [437, 441, 4398, 390, 257, 1916, 295, 924, 2057, 11, 291, 393, 362, 428, 1461, 293, 291, 393, 4090, 512], "temperature": 0.0, "avg_logprob": -0.30012368256191035, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.0007340285228565335}, {"id": 91, "seek": 80140, "start": 801.4, "end": 808.16, "text": " extension from the user or the community in wet assembly.", "tokens": [10320, 490, 264, 4195, 420, 264, 1768, 294, 6630, 12103, 13], "temperature": 0.0, "avg_logprob": -0.25322960269066597, "compression_ratio": 1.5093167701863355, "no_speech_prob": 0.00017638188728597015}, {"id": 92, "seek": 80140, "start": 808.16, "end": 820.52, "text": " So I just create a once worker, it's a visit counter, in orange you can see the special", "tokens": [407, 286, 445, 1884, 257, 1564, 11346, 11, 309, 311, 257, 3441, 5682, 11, 294, 7671, 291, 393, 536, 264, 2121], "temperature": 0.0, "avg_logprob": -0.25322960269066597, "compression_ratio": 1.5093167701863355, "no_speech_prob": 0.00017638188728597015}, {"id": 93, "seek": 80140, "start": 820.52, "end": 828.88, "text": " block to work with Cloth Fair, we just create a data store with a name counter or the connection,", "tokens": [3461, 281, 589, 365, 2033, 900, 12157, 11, 321, 445, 1884, 257, 1412, 3531, 365, 257, 1315, 5682, 420, 264, 4984, 11], "temperature": 0.0, "avg_logprob": -0.25322960269066597, "compression_ratio": 1.5093167701863355, "no_speech_prob": 0.00017638188728597015}, {"id": 94, "seek": 82888, "start": 828.88, "end": 840.32, "text": " we get, it's time we visit the main route on the web server, it gets the value of that", "tokens": [321, 483, 11, 309, 311, 565, 321, 3441, 264, 2135, 7955, 322, 264, 3670, 7154, 11, 309, 2170, 264, 2158, 295, 300], "temperature": 0.0, "avg_logprob": -0.22045149405797324, "compression_ratio": 1.4132231404958677, "no_speech_prob": 6.87999272486195e-05}, {"id": 95, "seek": 82888, "start": 840.32, "end": 850.92, "text": " data store, it's increment by one and then put it back, just a simple visit counter.", "tokens": [1412, 3531, 11, 309, 311, 26200, 538, 472, 293, 550, 829, 309, 646, 11, 445, 257, 2199, 3441, 5682, 13], "temperature": 0.0, "avg_logprob": -0.22045149405797324, "compression_ratio": 1.4132231404958677, "no_speech_prob": 6.87999272486195e-05}, {"id": 96, "seek": 85092, "start": 850.92, "end": 862.4399999999999, "text": " The code generate here is again like HTTP function, you can probably write if you have", "tokens": [440, 3089, 8460, 510, 307, 797, 411, 33283, 2445, 11, 291, 393, 1391, 2464, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.321063592698839, "compression_ratio": 1.3435114503816794, "no_speech_prob": 0.00010959419887512922}, {"id": 97, "seek": 85092, "start": 862.4399999999999, "end": 874.16, "text": " done some web server code, this is a bit ugly code, I will explain later, but the race is", "tokens": [1096, 512, 3670, 7154, 3089, 11, 341, 307, 257, 857, 12246, 3089, 11, 286, 486, 2903, 1780, 11, 457, 264, 4569, 307], "temperature": 0.0, "avg_logprob": -0.321063592698839, "compression_ratio": 1.3435114503816794, "no_speech_prob": 0.00010959419887512922}, {"id": 98, "seek": 87416, "start": 874.16, "end": 882.16, "text": " let's just convert from string to integer, just add one and then put back again, and", "tokens": [718, 311, 445, 7620, 490, 6798, 281, 24922, 11, 445, 909, 472, 293, 550, 829, 646, 797, 11, 293], "temperature": 0.0, "avg_logprob": -0.4338407931120499, "compression_ratio": 1.12, "no_speech_prob": 0.0006985058425925672}, {"id": 99, "seek": 88216, "start": 882.16, "end": 911.8399999999999, "text": " then we search the code, wait, the URL that publishes here, this is right now one,", "tokens": [550, 321, 3164, 264, 3089, 11, 1699, 11, 264, 12905, 300, 11374, 279, 510, 11, 341, 307, 558, 586, 472, 11], "temperature": 0.0, "avg_logprob": -0.7037175750732422, "compression_ratio": 1.0789473684210527, "no_speech_prob": 0.0006990170804783702}, {"id": 100, "seek": 91184, "start": 911.84, "end": 932.4, "text": " two, we keep reloading the page, it will contain, and if we go to the back end on Cloth Fair,", "tokens": [732, 11, 321, 1066, 25628, 278, 264, 3028, 11, 309, 486, 5304, 11, 293, 498, 321, 352, 281, 264, 646, 917, 322, 2033, 900, 12157, 11], "temperature": 0.0, "avg_logprob": -0.28595259189605715, "compression_ratio": 1.2525252525252526, "no_speech_prob": 0.0003028745704796165}, {"id": 101, "seek": 91184, "start": 932.4, "end": 935.88, "text": " we can see the value is there.", "tokens": [321, 393, 536, 264, 2158, 307, 456, 13], "temperature": 0.0, "avg_logprob": -0.28595259189605715, "compression_ratio": 1.2525252525252526, "no_speech_prob": 0.0003028745704796165}, {"id": 102, "seek": 93588, "start": 935.88, "end": 952.24, "text": " So again with very few blocks, we can allow non-programmer people of our team to write", "tokens": [407, 797, 365, 588, 1326, 8474, 11, 321, 393, 2089, 2107, 12, 32726, 936, 561, 295, 527, 1469, 281, 2464], "temperature": 0.0, "avg_logprob": -0.24357313987536308, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002108084736391902}, {"id": 103, "seek": 93588, "start": 952.24, "end": 958.96, "text": " an extension for our main program or whatever tool they are using.", "tokens": [364, 10320, 337, 527, 2135, 1461, 420, 2035, 2290, 436, 366, 1228, 13], "temperature": 0.0, "avg_logprob": -0.24357313987536308, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002108084736391902}, {"id": 104, "seek": 95896, "start": 958.96, "end": 971.64, "text": " Now let's make the blocks, you need to define the blocks, it's a JSON structure which you", "tokens": [823, 718, 311, 652, 264, 8474, 11, 291, 643, 281, 6964, 264, 8474, 11, 309, 311, 257, 31828, 3877, 597, 291], "temperature": 0.0, "avg_logprob": -0.3073903297891422, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.0006974536227062345}, {"id": 105, "seek": 95896, "start": 971.64, "end": 981.8000000000001, "text": " have what type of block, the message to show, if it has some input, the output, the next", "tokens": [362, 437, 2010, 295, 3461, 11, 264, 3636, 281, 855, 11, 498, 309, 575, 512, 4846, 11, 264, 5598, 11, 264, 958], "temperature": 0.0, "avg_logprob": -0.3073903297891422, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.0006974536227062345}, {"id": 106, "seek": 98180, "start": 981.8, "end": 993.8399999999999, "text": " statement, even you can add a tooltip, some comment or documentation, and then you just", "tokens": [5629, 11, 754, 291, 393, 909, 257, 2290, 83, 647, 11, 512, 2871, 420, 14333, 11, 293, 550, 291, 445], "temperature": 0.0, "avg_logprob": -0.32736283256894066, "compression_ratio": 1.4102564102564104, "no_speech_prob": 0.0002129988424712792}, {"id": 107, "seek": 98180, "start": 993.8399999999999, "end": 1005.0, "text": " define what the block does and what the go code that it should write finally.", "tokens": [6964, 437, 264, 3461, 775, 293, 437, 264, 352, 3089, 300, 309, 820, 2464, 2721, 13], "temperature": 0.0, "avg_logprob": -0.32736283256894066, "compression_ratio": 1.4102564102564104, "no_speech_prob": 0.0002129988424712792}, {"id": 108, "seek": 100500, "start": 1005.0, "end": 1016.08, "text": " There is even a block generator, you can add different properties to your block, and now", "tokens": [821, 307, 754, 257, 3461, 19265, 11, 291, 393, 909, 819, 7221, 281, 428, 3461, 11, 293, 586], "temperature": 0.0, "avg_logprob": -0.24466473506047176, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.000205737364012748}, {"id": 109, "seek": 100500, "start": 1016.08, "end": 1024.68, "text": " the feature of the block is they are type checking, there is a little bit of type checking,", "tokens": [264, 4111, 295, 264, 3461, 307, 436, 366, 2010, 8568, 11, 456, 307, 257, 707, 857, 295, 2010, 8568, 11], "temperature": 0.0, "avg_logprob": -0.24466473506047176, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.000205737364012748}, {"id": 110, "seek": 100500, "start": 1024.68, "end": 1031.08, "text": " you cannot assign a text variable to, I mean a text to a text variable or something like", "tokens": [291, 2644, 6269, 257, 2487, 7006, 281, 11, 286, 914, 257, 2487, 281, 257, 2487, 7006, 420, 746, 411], "temperature": 0.0, "avg_logprob": -0.24466473506047176, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.000205737364012748}, {"id": 111, "seek": 103108, "start": 1031.08, "end": 1044.12, "text": " that, some blocks you can define what type is returning, you also have conditional, of", "tokens": [300, 11, 512, 8474, 291, 393, 6964, 437, 2010, 307, 12678, 11, 291, 611, 362, 27708, 11, 295], "temperature": 0.0, "avg_logprob": -0.25948765061118384, "compression_ratio": 1.4700854700854702, "no_speech_prob": 0.00023039657389745116}, {"id": 112, "seek": 103108, "start": 1044.12, "end": 1053.3999999999999, "text": " course, you can edit the own block on life to add more else if or else condition, you", "tokens": [1164, 11, 291, 393, 8129, 264, 1065, 3461, 322, 993, 281, 909, 544, 1646, 498, 420, 1646, 4188, 11, 291], "temperature": 0.0, "avg_logprob": -0.25948765061118384, "compression_ratio": 1.4700854700854702, "no_speech_prob": 0.00023039657389745116}, {"id": 113, "seek": 105340, "start": 1053.4, "end": 1064.52, "text": " have some list also, you have inline documentation, just wait a little bit and just the tooltip", "tokens": [362, 512, 1329, 611, 11, 291, 362, 294, 1889, 14333, 11, 445, 1699, 257, 707, 857, 293, 445, 264, 2290, 83, 647], "temperature": 0.0, "avg_logprob": -0.21697195252375817, "compression_ratio": 1.563953488372093, "no_speech_prob": 9.234727622242644e-05}, {"id": 114, "seek": 105340, "start": 1064.52, "end": 1073.48, "text": " appear of what does block does, it can be translate, of course, in any language which", "tokens": [4204, 295, 437, 775, 3461, 775, 11, 309, 393, 312, 13799, 11, 295, 1164, 11, 294, 604, 2856, 597], "temperature": 0.0, "avg_logprob": -0.21697195252375817, "compression_ratio": 1.563953488372093, "no_speech_prob": 9.234727622242644e-05}, {"id": 115, "seek": 105340, "start": 1073.48, "end": 1081.96, "text": " makes it really, really easy for people to start, and you can have different colors and", "tokens": [1669, 309, 534, 11, 534, 1858, 337, 561, 281, 722, 11, 293, 291, 393, 362, 819, 4577, 293], "temperature": 0.0, "avg_logprob": -0.21697195252375817, "compression_ratio": 1.563953488372093, "no_speech_prob": 9.234727622242644e-05}, {"id": 116, "seek": 108196, "start": 1081.96, "end": 1088.92, "text": " different style for each type of block.", "tokens": [819, 3758, 337, 1184, 2010, 295, 3461, 13], "temperature": 0.0, "avg_logprob": -0.27040374488161323, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.00010357728751841933}, {"id": 117, "seek": 108196, "start": 1088.92, "end": 1097.08, "text": " You can also have some image on any part of the block which helps a lot, again, the user", "tokens": [509, 393, 611, 362, 512, 3256, 322, 604, 644, 295, 264, 3461, 597, 3665, 257, 688, 11, 797, 11, 264, 4195], "temperature": 0.0, "avg_logprob": -0.27040374488161323, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.00010357728751841933}, {"id": 118, "seek": 108196, "start": 1097.08, "end": 1106.88, "text": " to know that, okay, this block is an LED or a temperature sensor or something like that.", "tokens": [281, 458, 300, 11, 1392, 11, 341, 3461, 307, 364, 11261, 420, 257, 4292, 10200, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.27040374488161323, "compression_ratio": 1.4276315789473684, "no_speech_prob": 0.00010357728751841933}, {"id": 119, "seek": 110688, "start": 1106.88, "end": 1112.2, "text": " The limitation is currently not everything is yet supported, you need to create a block", "tokens": [440, 27432, 307, 4362, 406, 1203, 307, 1939, 8104, 11, 291, 643, 281, 1884, 257, 3461], "temperature": 0.0, "avg_logprob": -0.295283980288748, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00011723828356480226}, {"id": 120, "seek": 110688, "start": 1112.2, "end": 1120.2800000000002, "text": " for it, it's probably worse for vision impaired people or screen reader user, because I guess", "tokens": [337, 309, 11, 309, 311, 1391, 5324, 337, 5201, 36762, 561, 420, 2568, 15149, 4195, 11, 570, 286, 2041], "temperature": 0.0, "avg_logprob": -0.295283980288748, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00011723828356480226}, {"id": 121, "seek": 110688, "start": 1120.2800000000002, "end": 1128.2, "text": " just text file or code file is easier for them, static typing is complicated because", "tokens": [445, 2487, 3991, 420, 3089, 3991, 307, 3571, 337, 552, 11, 13437, 18444, 307, 6179, 570], "temperature": 0.0, "avg_logprob": -0.295283980288748, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.00011723828356480226}, {"id": 122, "seek": 112820, "start": 1128.2, "end": 1137.0, "text": " there are a lot of different types, and Blockly was made with JavaScript, Python, and Dart", "tokens": [456, 366, 257, 688, 295, 819, 3467, 11, 293, 17500, 356, 390, 1027, 365, 15778, 11, 15329, 11, 293, 30271], "temperature": 0.0, "avg_logprob": -0.3575509654151069, "compression_ratio": 1.5054945054945055, "no_speech_prob": 5.603818499366753e-05}, {"id": 123, "seek": 112820, "start": 1137.0, "end": 1143.92, "text": " in mind, like dynamic type in kind of language, you have to make a lot of decision in behalf", "tokens": [294, 1575, 11, 411, 8546, 2010, 294, 733, 295, 2856, 11, 291, 362, 281, 652, 257, 688, 295, 3537, 294, 9490], "temperature": 0.0, "avg_logprob": -0.3575509654151069, "compression_ratio": 1.5054945054945055, "no_speech_prob": 5.603818499366753e-05}, {"id": 124, "seek": 112820, "start": 1143.92, "end": 1154.32, "text": " of the user, like, for example, on our example of, or at what service, we just assume like", "tokens": [295, 264, 4195, 11, 411, 11, 337, 1365, 11, 322, 527, 1365, 295, 11, 420, 412, 437, 2643, 11, 321, 445, 6552, 411], "temperature": 0.0, "avg_logprob": -0.3575509654151069, "compression_ratio": 1.5054945054945055, "no_speech_prob": 5.603818499366753e-05}, {"id": 125, "seek": 115432, "start": 1154.32, "end": 1162.48, "text": " the response writer will be called D and the request is R-E-Q, so you have to have that", "tokens": [264, 4134, 9936, 486, 312, 1219, 413, 293, 264, 5308, 307, 497, 12, 36, 12, 48, 11, 370, 291, 362, 281, 362, 300], "temperature": 0.0, "avg_logprob": -0.3520778111049107, "compression_ratio": 1.4126984126984128, "no_speech_prob": 9.33077244553715e-05}, {"id": 126, "seek": 115432, "start": 1162.48, "end": 1174.84, "text": " in mind when you make other blocks, ugly code is sometimes needed, because, for example,", "tokens": [294, 1575, 562, 291, 652, 661, 8474, 11, 12246, 3089, 307, 2171, 2978, 11, 570, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.3520778111049107, "compression_ratio": 1.4126984126984128, "no_speech_prob": 9.33077244553715e-05}, {"id": 127, "seek": 115432, "start": 1174.84, "end": 1183.3999999999999, "text": " and just focusing on tiny go, I expect all number variables to be 32, because it is common", "tokens": [293, 445, 8416, 322, 5870, 352, 11, 286, 2066, 439, 1230, 9102, 281, 312, 8858, 11, 570, 309, 307, 2689], "temperature": 0.0, "avg_logprob": -0.3520778111049107, "compression_ratio": 1.4126984126984128, "no_speech_prob": 9.33077244553715e-05}, {"id": 128, "seek": 118340, "start": 1183.4, "end": 1193.6000000000001, "text": " in tiny go, so when you have to typecast into I'm 32 or something like that, it gets ugly,", "tokens": [294, 5870, 352, 11, 370, 562, 291, 362, 281, 2010, 3734, 666, 286, 478, 8858, 420, 746, 411, 300, 11, 309, 2170, 12246, 11], "temperature": 0.0, "avg_logprob": -0.28512722406631863, "compression_ratio": 1.492063492063492, "no_speech_prob": 4.905901732854545e-05}, {"id": 129, "seek": 118340, "start": 1193.6000000000001, "end": 1200.0400000000002, "text": " and there is not much documentation right now about how to debug it or how to develop", "tokens": [293, 456, 307, 406, 709, 14333, 558, 586, 466, 577, 281, 24083, 309, 420, 577, 281, 1499], "temperature": 0.0, "avg_logprob": -0.28512722406631863, "compression_ratio": 1.492063492063492, "no_speech_prob": 4.905901732854545e-05}, {"id": 130, "seek": 118340, "start": 1200.0400000000002, "end": 1204.52, "text": " on Blockly, so it's kind of hard right now.", "tokens": [322, 17500, 356, 11, 370, 309, 311, 733, 295, 1152, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.28512722406631863, "compression_ratio": 1.492063492063492, "no_speech_prob": 4.905901732854545e-05}, {"id": 131, "seek": 118340, "start": 1204.52, "end": 1210.24, "text": " Here are the links for the different projects, and that's it.", "tokens": [1692, 366, 264, 6123, 337, 264, 819, 4455, 11, 293, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.28512722406631863, "compression_ratio": 1.492063492063492, "no_speech_prob": 4.905901732854545e-05}, {"id": 132, "seek": 121024, "start": 1210.24, "end": 1217.24, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.35743986765543617, "compression_ratio": 0.875, "no_speech_prob": 0.0014765922678634524}, {"id": 133, "seek": 121724, "start": 1217.24, "end": 1244.24, "text": " I'll give you some time.", "tokens": [50364, 286, 603, 976, 291, 512, 565, 13, 51714], "temperature": 0.0, "avg_logprob": -0.5310722827911377, "compression_ratio": 0.75, "no_speech_prob": 0.02487560361623764}], "language": "en"}