{"text": " Thank you. Hello for them. I'm Yanam Dawi. I'm working on a twig on a project called Nickel, and Nickel is a configuration language. And is it okay? And so in this talk, I want to talk about Nick Cell, which is a framework to use Nickel as an alternative front-end language for Knicks. And my dear friend and colleague Guillaume, who just got off stage, has a strange morning routine where he stands in front of me and says, I have a question. When? So when can I use Nickel for Knicks? And so my primary motivation is just to be able to enjoy my morning coffee in peace. And my second motivation is to try to get you as excited as Guillaume is about Nickel, or at least 10% would be already quite, because he's a very enthusiastic man. So beside maybe a few people who got lost, because for them is huge. I think we all agree in this room that Knicks is a powerful tool. There are a bunch of things that only Knicks is capable of. My personal favorites are Dev Shares. So you need to hack on a project, you just enter the directory, type Knicks develop, you have all your tools you need, then you exit the directory, everything is back to normal. Knicks OS, we talk about that, being able to manage your whole configuration in.files, rollbacks, competing versions of the same package is pretty nice. And I guess each one of you has their own usage for embedded or whatever of Knicks, either personal or professional. And if that's the case, one of your main interface you have with Knicks is the language, Knicks Expressions. And in fact, it's a pretty simple language. It's mostly JSON plus functions plus a bit of small strings things, but mostly. And paradoxically, if the language is simple, I find it quite hard to use actually, yes, it's two with only one O, to use in practice for a bench or resin, at least for Knicks. And one of the main issue is error reporting. And I think it's a pretty fundamental problem in the language which is dynamically typed and lazy, is that when you make a mistake, your little mistake travels all around the code base. And only when something consume your value, then everything blows up. And the error usually points out deep inside Knicks code, because that's what is consuming your value. And I would like those errors to point out like the point when I made the mistake originally. My favorite one is infinite recursion in the module system. So I was in UB at Knicks. I tried to move my Knicks OS config to Flakes. I made a typo and an argument to a simple module and I got like infinite recursion, but nothing was recursive. I didn't know what was happening at all. Something can be said about discoverability, in particular when you're writing code. So I'm writing some Knicks code. I would like to know what are the standard library functions that are available? What are the least functions from Knicks packages that I can use? What are their type? What argument should I put there? I'm writing a flake. What is the schema of a flake? Could I have some completion or at least some in code information to know what field I'm supposed or attribute I'm supposed to feed? And the last point is that Knicks is simple and usually it's a good thing in language design. Like you build a rock city core and then the rest can be done as library function. But Knicks is not a general purpose language. It's a domain-specific language. And if users of your domain found themselves having to solve the same problem again and again and again, then maybe the domain-specific language should provide a native list way to solve this problem. And one example is overwriting. Something that you do a lot in Knicks is taking a module or a configuration or whatever object, tweaking a parameter and get the new result with all the dependency updated and so on. And it's pretty not trivial to do in Knicks. There are a lot of different ways, a lot of different abstraction implemented by different people, and that makes for hard experience in my opinion, especially as a newbie. And it's not me saying that. It's actually Elko, the creator of Knicks, who wrote a gist some long time ago, which is partly one of the origin of Knickl, about the deficiencies of the Knicks language. And one thing he says that Knicks is a DSL for package and configuration management, but it doesn't have any notion of package nor configuration. So to recap, one of the main things is developer experience in general. Error reporting is one of the main interface with the language or something goes wrong. It's important. There is something to be said about Knicks being too simple somehow or too bearable for its own good. And so people reinvent the wheel in a lot of different ways. And I mean, sometimes it's fine to have competing libraries and so on. But for fundamental things, it's like when you want to put something in the standard library of a language, that should be only one way to do it. And it's efficient and so on. So what can we do about it? Well, I propose to do Knickl. Knickl is a general purpose domain-specific language, if that makes sense, for configuration. And what Knickl has, it has sound-gradual typing, it has opting static typing with higher rank polymorphism, structural typing with full polymorphism. Contract is like I'm going to find that. No. I mean, yes, in fact, but that's not the point. The point, I mean, those are means to an end. And the end is that your practice is nice. So here it's a little video demo. On the right, we have something called a contract. It's like Knicks-Wes types, something that is checked at one time by the Knickl interpreter. And you write it actually pretty much like a type or a schema. You say, oh, Knickl derivation, this is taken from Knicks-Wes. This contract defined by Knicks-Wes should have a name, a version, dependencies, system, and so on. You can attach other contracts and meta data in general to those fields. You can say, oh, name must be a string, version must be a string. Dependency should be an array of derivation. Derivation is another contract that you'll define somewhere. You can attach default value. Dependencies are empty by default. You can attach, you can say that a field is optional, for example, because I think Knicks is not strictly required by a built-in derivation that version is defined. And the thing is that all those meta data can be leveraged by the tooling. On the left, we are trying to write something looking like a derivation. That doesn't matter at this point. But we define an output field. Field is just Knickl name for attribute. And we apply this contract. We just import it. And let's see how it turns out. It turns out that we get completion for what we should put inside this output stuff. Like name, okay, we have documentation. We have the type. Actually, type in a string is named whatever the contract. We get completion for built-in command. And for nested recall, like, oh, what should I put in that built-in command? You can leverage also this information, not only from the LSP, but from the CLI. Oh, no, sorry, I forgot. You get completion for the standard library and actually any library. Those functions are statically typed, but there's another subject. You can leverage this information from the CLI. Using Knickl query, you can say, oh, what's inside a contract that's named? What is the field Knickl derivation? You get documentation. And what are the available fields? You can say, oh, okay, what is built command in particular? I get documentation and field. Now, what happens if I make a silly mistake and build command, which should be a record of strings, I just made it a string, like, instead of an attribute set? And I try to run Knickl on that. What I get is a normal message. The first blue part says, what is a contract that I just broke? You should have a record with args and so on. The second light points at where I define the value. Now, it's used. It's read. And it says, oh, this is one. This doesn't respect this contract. The third part is not really useful there, but it's giving you the evaluated value, which means that if build command was a complex expression bit out of map and fold, you still get the final stuff that it builds. And this green thing here is taking who the L is imposing this contract. So these points to build command field inside the Knickl derivation contract inside the Knickl library. And so this is just runtime validation. You could do it with libraries. Knickl does it. But first, I think this kind of nice structural syntax for it, as well as this advanced real-world reporting, it's really hard if not impossible to achieve purely in library code. Because there are special things in the Knickl interpreter to handle contract application and track argument and the stack and so on. So what Knickl is about is relevant, thorough, and early error reporting as much as possible. Discourability, you can attach all those meta information to fields and they are understood by the tooling. And in particular, by the LSP, giving you interactive development process. And in the end, arguably, the language is more sophisticated than Knicks, but as a user, I find it easier. Okay, great. That's fine. That's just my great 80,000 package. Not a big deal. Nope, not going to happen. Knicks package is a huge behemoth. It's probably the, I mean, the most important thing in Knicks. I mean, the value of Knicks is all this domain knowledge on how to build package encoded in a code that can be actioned by the machine. And it's not going anywhere. So whatever we do, if we want to use an alternative front end, we have to be able to use Knicks packages. So meet your first Knickl derivation. It's a DevShell. And from a distance, I want you to notice that there is no function at the top. So usually, Knicks packages, the first thing you do when you define a package is to define a function. This has a number of problems. One being that before doing anything with it, like getting the name or the version, you have to apply it to some arguments. And this argument may be packages. So you need to apply them and so on. So you need to evaluate the transitive dependency before doing anything. Here is just a flat record. Records are recursive by default in Knickl. So line one, we import some things called builders. We'll see later what is from the Knicks cell. Builders is given by Knicks cell. And line four to six, for now, or API is that you need to declare a bit like a flake. But at the level of the derivation, what you are going to take from the Knicks world. So here I say I want to take CRL from Knicks packages. Line nine to 12, I'm defining the actual derivation, so to speak, even if it seems way smaller. So I give a name. And then I put this input dot CRL in the pass. So this funny-looking string, I won't have time to detail, but it's called a symbolic string, is a way to simulate Knicks string context. But not only actually, it's a pretty generic mechanism, but to have the same namesities like input dot CRL is not actually a string, it's a derivation which has store pass and so on. And you do that in Knicks, and it's not trivial to do it in a different language. But yeah, this has all solutions to that. And we are using this input dot CRL, but we haven't seen any inputs yet. The other was called input spec. So input is defined, but not really, but is defined line seven. This is just a field without a definition. And in Nickel, the idea is that we call a recursive, and we have something called merge operation, which is the unpercent. It's a bit like the slash slash of Knicks, that is combining records, but it doesn't give priority to the left hand side, right hand side. You just try to combine and see if there is a conflict, you have to use priorities. A bit like the Knicks or the module system. But it does what you expect naively when you start Knicks, that it works on nested record, and that it works on recursive record. That is, if you override something there, everything that depends on it recursively will be automatically overridden. So what we do, line seven is a bit like defining a function argument. So we're just doing function in different way, so to speak, but in a way that is way nicer for Knicks, because it just looks like configuration. Overriding is trivial. I just add one line, and I merge with something that redefines the value. Combining stuff is trivial. So for example, line 14 and 15, I use some predefined builders, which are mostly looking like this derivation, and that has rest-day environments and a seed-developer environment in my shell. So I will end up with a shell that has URL, all the rest-toolchain, and C. So I think I won't have time to dwell into the detail too much, but it's a bit convoluted right now. We have a lot of the back and forth between Knicks and Nickel. Knicks is a driver. What's important is that these parts will get improved, but somehow it's not truly, it's a bit orthogonal to all the design of the Nickel side, what do the API look like, what are the builders, how we do overriding. It's orthogonal. This part is just how do we communicate with Knicks packages. Right now, Knicks is leading, and everything that crosses boundaries can't be functions. It has to be data. So in practice, it's JSON, and so you have a bit of back and forth like, what's your input? Oh, I will extract that from Knicks packages. I give you the derivation at JSON. Nickel has almost everything to build a derivation, but it cannot build it, so it kind of gives an argument to Knicks saying, please, can you call derivation for me? But that works for now, at least. That's something. So the limitation of this model is that you have a lot on back and forth, and the error messages at the boundary are pretty bad. If you try to import the packages that don't exist in Knicks packages, that's going to be ugly. And you can't override the Knicks package from within Nickel. That's kind of an important limitation because the only thing you can get is data. You can do it on the Knicks side in the overarching flake, but it's kind of defeat the purpose. We like to be able to do that from Nickel. The roadmap to solve that is to be able to import and involve Knicks expression directly in Nickel. It's actually not that unreasonable because Knicks is simple and close to being a subset of Nickel. So we're already able to transpire most of Knicks as far as the language is concerned, but we are missing all the built-in dot atro of derivation and things like that to make it work, and I think it's the hardest part, actually. Yeah, having a Nickel built-in to build derivation would probably piggyback on Knicks, but so that at least we don't have to do the last back and forth. We have three minutes including question left. Okay, we'll go quick. And so we can do all those things and Nickel becomes a driver and you don't have to go through this back and forth. You can override from from Nickel. For Knicks, what does it mean? I hope it means an improved developer experience. Unified approach to configuration. This looks like configuration more than Knicks. I find like you just define a bunch of fields and you merge steps together and a smoother learning curve for the newcomers. I didn't cover performance, but also having this merging being native and not library function as more room for optimizations. And beyond, my secret dream is that Nickel is general purpose for configuration. So you could use the same language with the same notion, same contract, same data model for all of your stack to reform Kubernetes, Knicks, exchange instinct between the layer. And something we are working on is incremental evaluation. It's a bit like incremental build, but at the level of evaluation, I have this huge Knicks-based configuration. I change one option. I want the interpreter to only propagate the changes to what needs to be actually recomputed. So to answer the initial question, Nickel, Knicks, when? Well, now you can already do this stuff. Well, next week because we haven't merged everything. But Knicks-L will be releasing the 0.1. You could do derivation and basic Dev shells. Knicks-L will be itself will be reaching 1.0 in the coming months. And it's still rough around the edge. You can't do everything you would like to do in Knicks. But the point is that I think we did the hardest. Like arriving at the first derivation was really complex. And now everything is aligned. And somehow we just have to build the same to polish the API and so on. And there is the same for Terraform, Nickel. Thank you. Before that, I would like to know if Rodrigo at Paul is in the room. Okay, you're here. Okay, great. We have one question I think we can take maybe to you. Yes. So did I understand and write yet that you are transpiling between Knicks and Nickel? So not yet. But that's okay. Sorry, did you finish your question or? Yes. So I'm asked if we are transpiling Knicks to Nickel. Right now, no, we are doing this back and forth with Knicks and Jason and so on. But that's the plan in the end. To transpile Knicks. You could import food at Knicks from Nickel and that would give you an idea of what's going on. Food at Knicks from Nickel and that would give you a Nickel value and then you can do whatever you want with it. Yes. Yes, so you mentioned. Yeah. So I've used Terraform Knicks before. Could you just use that? Yeah, yeah, it's true. I guess you could. But probably the idea here is to reuse the Nickel overriding mechanism, which is, we hope, way simpler. Somehow you don't have to do anything to get your things to be overriding easily. So if I think Terraform Knicks is not using a module like system. Yeah. And there is Terra Knicks maybe that is doing that. I don't remember. Yes. But yeah, you could do that. Actually, you could wrap any Knicks package with a Nickel interface somehow like a FFI or you could redo it a bit to have a more both are possible. I guess. One more round of applause, please.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.24, "text": " Thank you. Hello for them. I'm Yanam Dawi. I'm working on a", "tokens": [1044, 291, 13, 2425, 337, 552, 13, 286, 478, 13633, 335, 413, 38402, 13, 286, 478, 1364, 322, 257], "temperature": 0.0, "avg_logprob": -0.6150603824191623, "compression_ratio": 1.2231404958677685, "no_speech_prob": 0.2236618995666504}, {"id": 1, "seek": 0, "start": 15.24, "end": 29.68, "text": " twig on a project called Nickel, and Nickel is a configuration language. And is it okay?", "tokens": [683, 328, 322, 257, 1716, 1219, 45416, 11, 293, 45416, 307, 257, 11694, 2856, 13, 400, 307, 309, 1392, 30], "temperature": 0.0, "avg_logprob": -0.6150603824191623, "compression_ratio": 1.2231404958677685, "no_speech_prob": 0.2236618995666504}, {"id": 2, "seek": 2968, "start": 29.68, "end": 36.56, "text": " And so in this talk, I want to talk about Nick Cell, which is a framework to use Nickel as", "tokens": [400, 370, 294, 341, 751, 11, 286, 528, 281, 751, 466, 9449, 28859, 11, 597, 307, 257, 8388, 281, 764, 45416, 382], "temperature": 0.0, "avg_logprob": -0.2365210107032289, "compression_ratio": 1.5301724137931034, "no_speech_prob": 0.0004846078809350729}, {"id": 3, "seek": 2968, "start": 36.56, "end": 41.76, "text": " an alternative front-end language for Knicks. And my dear friend and colleague Guillaume,", "tokens": [364, 8535, 1868, 12, 521, 2856, 337, 10519, 7663, 13, 400, 452, 6875, 1277, 293, 13532, 2694, 5291, 2540, 11], "temperature": 0.0, "avg_logprob": -0.2365210107032289, "compression_ratio": 1.5301724137931034, "no_speech_prob": 0.0004846078809350729}, {"id": 4, "seek": 2968, "start": 41.76, "end": 48.8, "text": " who just got off stage, has a strange morning routine where he stands in front of me and", "tokens": [567, 445, 658, 766, 3233, 11, 575, 257, 5861, 2446, 9927, 689, 415, 7382, 294, 1868, 295, 385, 293], "temperature": 0.0, "avg_logprob": -0.2365210107032289, "compression_ratio": 1.5301724137931034, "no_speech_prob": 0.0004846078809350729}, {"id": 5, "seek": 2968, "start": 48.8, "end": 55.2, "text": " says, I have a question. When? So when can I use Nickel for Knicks? And so my primary", "tokens": [1619, 11, 286, 362, 257, 1168, 13, 1133, 30, 407, 562, 393, 286, 764, 45416, 337, 10519, 7663, 30, 400, 370, 452, 6194], "temperature": 0.0, "avg_logprob": -0.2365210107032289, "compression_ratio": 1.5301724137931034, "no_speech_prob": 0.0004846078809350729}, {"id": 6, "seek": 5520, "start": 55.2, "end": 60.88, "text": " motivation is just to be able to enjoy my morning coffee in peace. And my second motivation is to", "tokens": [12335, 307, 445, 281, 312, 1075, 281, 2103, 452, 2446, 4982, 294, 4336, 13, 400, 452, 1150, 12335, 307, 281], "temperature": 0.0, "avg_logprob": -0.10164073982624093, "compression_ratio": 1.5236220472440944, "no_speech_prob": 0.00018515082774683833}, {"id": 7, "seek": 5520, "start": 60.88, "end": 67.12, "text": " try to get you as excited as Guillaume is about Nickel, or at least 10% would be already quite,", "tokens": [853, 281, 483, 291, 382, 2919, 382, 2694, 5291, 2540, 307, 466, 45416, 11, 420, 412, 1935, 1266, 4, 576, 312, 1217, 1596, 11], "temperature": 0.0, "avg_logprob": -0.10164073982624093, "compression_ratio": 1.5236220472440944, "no_speech_prob": 0.00018515082774683833}, {"id": 8, "seek": 5520, "start": 67.12, "end": 74.56, "text": " because he's a very enthusiastic man. So beside maybe a few people who got lost, because for them", "tokens": [570, 415, 311, 257, 588, 28574, 587, 13, 407, 15726, 1310, 257, 1326, 561, 567, 658, 2731, 11, 570, 337, 552], "temperature": 0.0, "avg_logprob": -0.10164073982624093, "compression_ratio": 1.5236220472440944, "no_speech_prob": 0.00018515082774683833}, {"id": 9, "seek": 5520, "start": 74.56, "end": 79.76, "text": " is huge. I think we all agree in this room that Knicks is a powerful tool. There are a bunch of", "tokens": [307, 2603, 13, 286, 519, 321, 439, 3986, 294, 341, 1808, 300, 10519, 7663, 307, 257, 4005, 2290, 13, 821, 366, 257, 3840, 295], "temperature": 0.0, "avg_logprob": -0.10164073982624093, "compression_ratio": 1.5236220472440944, "no_speech_prob": 0.00018515082774683833}, {"id": 10, "seek": 7976, "start": 79.76, "end": 86.48, "text": " things that only Knicks is capable of. My personal favorites are Dev Shares. So you need to hack on", "tokens": [721, 300, 787, 10519, 7663, 307, 8189, 295, 13, 1222, 2973, 16907, 366, 9096, 1160, 8643, 13, 407, 291, 643, 281, 10339, 322], "temperature": 0.0, "avg_logprob": -0.14706262287340666, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.00024997215950861573}, {"id": 11, "seek": 7976, "start": 86.48, "end": 92.80000000000001, "text": " a project, you just enter the directory, type Knicks develop, you have all your tools you need,", "tokens": [257, 1716, 11, 291, 445, 3242, 264, 21120, 11, 2010, 10519, 7663, 1499, 11, 291, 362, 439, 428, 3873, 291, 643, 11], "temperature": 0.0, "avg_logprob": -0.14706262287340666, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.00024997215950861573}, {"id": 12, "seek": 7976, "start": 92.80000000000001, "end": 98.4, "text": " then you exit the directory, everything is back to normal. Knicks OS, we talk about that,", "tokens": [550, 291, 11043, 264, 21120, 11, 1203, 307, 646, 281, 2710, 13, 10519, 7663, 12731, 11, 321, 751, 466, 300, 11], "temperature": 0.0, "avg_logprob": -0.14706262287340666, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.00024997215950861573}, {"id": 13, "seek": 7976, "start": 99.44, "end": 105.28, "text": " being able to manage your whole configuration in.files, rollbacks, competing versions of the", "tokens": [885, 1075, 281, 3067, 428, 1379, 11694, 294, 2411, 69, 4680, 11, 3373, 17758, 11, 15439, 9606, 295, 264], "temperature": 0.0, "avg_logprob": -0.14706262287340666, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.00024997215950861573}, {"id": 14, "seek": 10528, "start": 105.28, "end": 112.16, "text": " same package is pretty nice. And I guess each one of you has their own usage for embedded or", "tokens": [912, 7372, 307, 1238, 1481, 13, 400, 286, 2041, 1184, 472, 295, 291, 575, 641, 1065, 14924, 337, 16741, 420], "temperature": 0.0, "avg_logprob": -0.15032454038921156, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0001030594139592722}, {"id": 15, "seek": 10528, "start": 112.16, "end": 118.48, "text": " whatever of Knicks, either personal or professional. And if that's the case, one of your main interface", "tokens": [2035, 295, 10519, 7663, 11, 2139, 2973, 420, 4843, 13, 400, 498, 300, 311, 264, 1389, 11, 472, 295, 428, 2135, 9226], "temperature": 0.0, "avg_logprob": -0.15032454038921156, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0001030594139592722}, {"id": 16, "seek": 10528, "start": 118.48, "end": 123.28, "text": " you have with Knicks is the language, Knicks Expressions. And in fact, it's a pretty simple", "tokens": [291, 362, 365, 10519, 7663, 307, 264, 2856, 11, 10519, 7663, 20212, 626, 13, 400, 294, 1186, 11, 309, 311, 257, 1238, 2199], "temperature": 0.0, "avg_logprob": -0.15032454038921156, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0001030594139592722}, {"id": 17, "seek": 10528, "start": 123.28, "end": 129.44, "text": " language. It's mostly JSON plus functions plus a bit of small strings things, but mostly. And", "tokens": [2856, 13, 467, 311, 5240, 31828, 1804, 6828, 1804, 257, 857, 295, 1359, 13985, 721, 11, 457, 5240, 13, 400], "temperature": 0.0, "avg_logprob": -0.15032454038921156, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0001030594139592722}, {"id": 18, "seek": 12944, "start": 129.44, "end": 135.68, "text": " paradoxically, if the language is simple, I find it quite hard to use actually, yes, it's two with", "tokens": [26221, 984, 11, 498, 264, 2856, 307, 2199, 11, 286, 915, 309, 1596, 1152, 281, 764, 767, 11, 2086, 11, 309, 311, 732, 365], "temperature": 0.0, "avg_logprob": -0.15990218919577057, "compression_ratio": 1.5942622950819672, "no_speech_prob": 6.611872231587768e-05}, {"id": 19, "seek": 12944, "start": 135.68, "end": 143.6, "text": " only one O, to use in practice for a bench or resin, at least for Knicks. And one of the main", "tokens": [787, 472, 422, 11, 281, 764, 294, 3124, 337, 257, 10638, 420, 26365, 11, 412, 1935, 337, 10519, 7663, 13, 400, 472, 295, 264, 2135], "temperature": 0.0, "avg_logprob": -0.15990218919577057, "compression_ratio": 1.5942622950819672, "no_speech_prob": 6.611872231587768e-05}, {"id": 20, "seek": 12944, "start": 143.6, "end": 150.24, "text": " issue is error reporting. And I think it's a pretty fundamental problem in the language which is", "tokens": [2734, 307, 6713, 10031, 13, 400, 286, 519, 309, 311, 257, 1238, 8088, 1154, 294, 264, 2856, 597, 307], "temperature": 0.0, "avg_logprob": -0.15990218919577057, "compression_ratio": 1.5942622950819672, "no_speech_prob": 6.611872231587768e-05}, {"id": 21, "seek": 12944, "start": 150.24, "end": 156.56, "text": " dynamically typed and lazy, is that when you make a mistake, your little mistake travels all around", "tokens": [43492, 33941, 293, 14847, 11, 307, 300, 562, 291, 652, 257, 6146, 11, 428, 707, 6146, 19863, 439, 926], "temperature": 0.0, "avg_logprob": -0.15990218919577057, "compression_ratio": 1.5942622950819672, "no_speech_prob": 6.611872231587768e-05}, {"id": 22, "seek": 15656, "start": 156.56, "end": 161.68, "text": " the code base. And only when something consume your value, then everything blows up. And the", "tokens": [264, 3089, 3096, 13, 400, 787, 562, 746, 14732, 428, 2158, 11, 550, 1203, 18458, 493, 13, 400, 264], "temperature": 0.0, "avg_logprob": -0.16161713479947643, "compression_ratio": 1.6953405017921146, "no_speech_prob": 8.184975013136864e-05}, {"id": 23, "seek": 15656, "start": 161.68, "end": 167.2, "text": " error usually points out deep inside Knicks code, because that's what is consuming your value.", "tokens": [6713, 2673, 2793, 484, 2452, 1854, 10519, 7663, 3089, 11, 570, 300, 311, 437, 307, 19867, 428, 2158, 13], "temperature": 0.0, "avg_logprob": -0.16161713479947643, "compression_ratio": 1.6953405017921146, "no_speech_prob": 8.184975013136864e-05}, {"id": 24, "seek": 15656, "start": 167.2, "end": 171.92000000000002, "text": " And I would like those errors to point out like the point when I made the mistake originally.", "tokens": [400, 286, 576, 411, 729, 13603, 281, 935, 484, 411, 264, 935, 562, 286, 1027, 264, 6146, 7993, 13], "temperature": 0.0, "avg_logprob": -0.16161713479947643, "compression_ratio": 1.6953405017921146, "no_speech_prob": 8.184975013136864e-05}, {"id": 25, "seek": 15656, "start": 173.04, "end": 178.64000000000001, "text": " My favorite one is infinite recursion in the module system. So I was in UB at Knicks. I tried to", "tokens": [1222, 2954, 472, 307, 13785, 20560, 313, 294, 264, 10088, 1185, 13, 407, 286, 390, 294, 624, 33, 412, 10519, 7663, 13, 286, 3031, 281], "temperature": 0.0, "avg_logprob": -0.16161713479947643, "compression_ratio": 1.6953405017921146, "no_speech_prob": 8.184975013136864e-05}, {"id": 26, "seek": 15656, "start": 178.64000000000001, "end": 184.24, "text": " move my Knicks OS config to Flakes. I made a typo and an argument to a simple module and I got", "tokens": [1286, 452, 10519, 7663, 12731, 6662, 281, 3235, 3419, 13, 286, 1027, 257, 2125, 78, 293, 364, 6770, 281, 257, 2199, 10088, 293, 286, 658], "temperature": 0.0, "avg_logprob": -0.16161713479947643, "compression_ratio": 1.6953405017921146, "no_speech_prob": 8.184975013136864e-05}, {"id": 27, "seek": 18424, "start": 184.24, "end": 189.20000000000002, "text": " like infinite recursion, but nothing was recursive. I didn't know what was happening at all.", "tokens": [411, 13785, 20560, 313, 11, 457, 1825, 390, 20560, 488, 13, 286, 994, 380, 458, 437, 390, 2737, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.11471191903819208, "compression_ratio": 1.7984496124031009, "no_speech_prob": 6.362786371028051e-05}, {"id": 28, "seek": 18424, "start": 191.36, "end": 195.68, "text": " Something can be said about discoverability, in particular when you're writing code. So", "tokens": [6595, 393, 312, 848, 466, 4411, 2310, 11, 294, 1729, 562, 291, 434, 3579, 3089, 13, 407], "temperature": 0.0, "avg_logprob": -0.11471191903819208, "compression_ratio": 1.7984496124031009, "no_speech_prob": 6.362786371028051e-05}, {"id": 29, "seek": 18424, "start": 195.68, "end": 199.76000000000002, "text": " I'm writing some Knicks code. I would like to know what are the standard library functions", "tokens": [286, 478, 3579, 512, 10519, 7663, 3089, 13, 286, 576, 411, 281, 458, 437, 366, 264, 3832, 6405, 6828], "temperature": 0.0, "avg_logprob": -0.11471191903819208, "compression_ratio": 1.7984496124031009, "no_speech_prob": 6.362786371028051e-05}, {"id": 30, "seek": 18424, "start": 199.76000000000002, "end": 203.36, "text": " that are available? What are the least functions from Knicks packages that I can use? What are", "tokens": [300, 366, 2435, 30, 708, 366, 264, 1935, 6828, 490, 10519, 7663, 17401, 300, 286, 393, 764, 30, 708, 366], "temperature": 0.0, "avg_logprob": -0.11471191903819208, "compression_ratio": 1.7984496124031009, "no_speech_prob": 6.362786371028051e-05}, {"id": 31, "seek": 18424, "start": 203.36, "end": 208.88, "text": " their type? What argument should I put there? I'm writing a flake. What is the schema of a flake?", "tokens": [641, 2010, 30, 708, 6770, 820, 286, 829, 456, 30, 286, 478, 3579, 257, 932, 619, 13, 708, 307, 264, 34078, 295, 257, 932, 619, 30], "temperature": 0.0, "avg_logprob": -0.11471191903819208, "compression_ratio": 1.7984496124031009, "no_speech_prob": 6.362786371028051e-05}, {"id": 32, "seek": 20888, "start": 208.88, "end": 214.4, "text": " Could I have some completion or at least some in code information to know what field I'm supposed", "tokens": [7497, 286, 362, 512, 19372, 420, 412, 1935, 512, 294, 3089, 1589, 281, 458, 437, 2519, 286, 478, 3442], "temperature": 0.0, "avg_logprob": -0.13419813805438102, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.814632408553734e-05}, {"id": 33, "seek": 20888, "start": 214.4, "end": 223.2, "text": " or attribute I'm supposed to feed? And the last point is that Knicks is simple and usually it's", "tokens": [420, 19667, 286, 478, 3442, 281, 3154, 30, 400, 264, 1036, 935, 307, 300, 10519, 7663, 307, 2199, 293, 2673, 309, 311], "temperature": 0.0, "avg_logprob": -0.13419813805438102, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.814632408553734e-05}, {"id": 34, "seek": 20888, "start": 223.2, "end": 228.16, "text": " a good thing in language design. Like you build a rock city core and then the rest can be done as", "tokens": [257, 665, 551, 294, 2856, 1715, 13, 1743, 291, 1322, 257, 3727, 2307, 4965, 293, 550, 264, 1472, 393, 312, 1096, 382], "temperature": 0.0, "avg_logprob": -0.13419813805438102, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.814632408553734e-05}, {"id": 35, "seek": 20888, "start": 228.16, "end": 233.68, "text": " library function. But Knicks is not a general purpose language. It's a domain-specific language.", "tokens": [6405, 2445, 13, 583, 10519, 7663, 307, 406, 257, 2674, 4334, 2856, 13, 467, 311, 257, 9274, 12, 29258, 2856, 13], "temperature": 0.0, "avg_logprob": -0.13419813805438102, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.814632408553734e-05}, {"id": 36, "seek": 23368, "start": 233.68, "end": 239.76000000000002, "text": " And if users of your domain found themselves having to solve the same problem again and again", "tokens": [400, 498, 5022, 295, 428, 9274, 1352, 2969, 1419, 281, 5039, 264, 912, 1154, 797, 293, 797], "temperature": 0.0, "avg_logprob": -0.10290038585662842, "compression_ratio": 1.6866197183098592, "no_speech_prob": 8.617091953055933e-05}, {"id": 37, "seek": 23368, "start": 239.76000000000002, "end": 245.92000000000002, "text": " and again, then maybe the domain-specific language should provide a native list way to solve this", "tokens": [293, 797, 11, 550, 1310, 264, 9274, 12, 29258, 2856, 820, 2893, 257, 8470, 1329, 636, 281, 5039, 341], "temperature": 0.0, "avg_logprob": -0.10290038585662842, "compression_ratio": 1.6866197183098592, "no_speech_prob": 8.617091953055933e-05}, {"id": 38, "seek": 23368, "start": 245.92000000000002, "end": 252.08, "text": " problem. And one example is overwriting. Something that you do a lot in Knicks is taking a module", "tokens": [1154, 13, 400, 472, 1365, 307, 670, 19868, 13, 6595, 300, 291, 360, 257, 688, 294, 10519, 7663, 307, 1940, 257, 10088], "temperature": 0.0, "avg_logprob": -0.10290038585662842, "compression_ratio": 1.6866197183098592, "no_speech_prob": 8.617091953055933e-05}, {"id": 39, "seek": 23368, "start": 252.08, "end": 258.16, "text": " or a configuration or whatever object, tweaking a parameter and get the new result with all the", "tokens": [420, 257, 11694, 420, 2035, 2657, 11, 6986, 2456, 257, 13075, 293, 483, 264, 777, 1874, 365, 439, 264], "temperature": 0.0, "avg_logprob": -0.10290038585662842, "compression_ratio": 1.6866197183098592, "no_speech_prob": 8.617091953055933e-05}, {"id": 40, "seek": 23368, "start": 258.16, "end": 263.6, "text": " dependency updated and so on. And it's pretty not trivial to do in Knicks. There are a lot of", "tokens": [33621, 10588, 293, 370, 322, 13, 400, 309, 311, 1238, 406, 26703, 281, 360, 294, 10519, 7663, 13, 821, 366, 257, 688, 295], "temperature": 0.0, "avg_logprob": -0.10290038585662842, "compression_ratio": 1.6866197183098592, "no_speech_prob": 8.617091953055933e-05}, {"id": 41, "seek": 26360, "start": 263.6, "end": 268.16, "text": " different ways, a lot of different abstraction implemented by different people, and that makes", "tokens": [819, 2098, 11, 257, 688, 295, 819, 37765, 12270, 538, 819, 561, 11, 293, 300, 1669], "temperature": 0.0, "avg_logprob": -0.1066909116857192, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.00010317322448827326}, {"id": 42, "seek": 26360, "start": 268.16, "end": 277.84000000000003, "text": " for hard experience in my opinion, especially as a newbie. And it's not me saying that. It's", "tokens": [337, 1152, 1752, 294, 452, 4800, 11, 2318, 382, 257, 777, 7392, 13, 400, 309, 311, 406, 385, 1566, 300, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.1066909116857192, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.00010317322448827326}, {"id": 43, "seek": 26360, "start": 277.84000000000003, "end": 283.68, "text": " actually Elko, the creator of Knicks, who wrote a gist some long time ago, which is partly one", "tokens": [767, 2699, 4093, 11, 264, 14181, 295, 10519, 7663, 11, 567, 4114, 257, 290, 468, 512, 938, 565, 2057, 11, 597, 307, 17031, 472], "temperature": 0.0, "avg_logprob": -0.1066909116857192, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.00010317322448827326}, {"id": 44, "seek": 26360, "start": 283.68, "end": 288.24, "text": " of the origin of Knickl, about the deficiencies of the Knicks language. And one thing he says", "tokens": [295, 264, 4957, 295, 10519, 618, 75, 11, 466, 264, 19248, 31294, 295, 264, 10519, 7663, 2856, 13, 400, 472, 551, 415, 1619], "temperature": 0.0, "avg_logprob": -0.1066909116857192, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.00010317322448827326}, {"id": 45, "seek": 26360, "start": 288.24, "end": 292.8, "text": " that Knicks is a DSL for package and configuration management, but it doesn't have any notion of", "tokens": [300, 10519, 7663, 307, 257, 15816, 43, 337, 7372, 293, 11694, 4592, 11, 457, 309, 1177, 380, 362, 604, 10710, 295], "temperature": 0.0, "avg_logprob": -0.1066909116857192, "compression_ratio": 1.6596491228070176, "no_speech_prob": 0.00010317322448827326}, {"id": 46, "seek": 29280, "start": 292.8, "end": 301.44, "text": " package nor configuration. So to recap, one of the main things is developer experience in general.", "tokens": [7372, 6051, 11694, 13, 407, 281, 20928, 11, 472, 295, 264, 2135, 721, 307, 10754, 1752, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.10862067576204792, "compression_ratio": 1.590717299578059, "no_speech_prob": 3.692789323395118e-05}, {"id": 47, "seek": 29280, "start": 301.44, "end": 305.92, "text": " Error reporting is one of the main interface with the language or something goes wrong. It's", "tokens": [3300, 2874, 10031, 307, 472, 295, 264, 2135, 9226, 365, 264, 2856, 420, 746, 1709, 2085, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.10862067576204792, "compression_ratio": 1.590717299578059, "no_speech_prob": 3.692789323395118e-05}, {"id": 48, "seek": 29280, "start": 305.92, "end": 311.92, "text": " important. There is something to be said about Knicks being too simple somehow or too bearable", "tokens": [1021, 13, 821, 307, 746, 281, 312, 848, 466, 10519, 7663, 885, 886, 2199, 6063, 420, 886, 6155, 712], "temperature": 0.0, "avg_logprob": -0.10862067576204792, "compression_ratio": 1.590717299578059, "no_speech_prob": 3.692789323395118e-05}, {"id": 49, "seek": 29280, "start": 311.92, "end": 317.2, "text": " for its own good. And so people reinvent the wheel in a lot of different ways. And I mean,", "tokens": [337, 1080, 1065, 665, 13, 400, 370, 561, 33477, 264, 5589, 294, 257, 688, 295, 819, 2098, 13, 400, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.10862067576204792, "compression_ratio": 1.590717299578059, "no_speech_prob": 3.692789323395118e-05}, {"id": 50, "seek": 31720, "start": 317.2, "end": 324.56, "text": " sometimes it's fine to have competing libraries and so on. But for fundamental things, it's like", "tokens": [2171, 309, 311, 2489, 281, 362, 15439, 15148, 293, 370, 322, 13, 583, 337, 8088, 721, 11, 309, 311, 411], "temperature": 0.0, "avg_logprob": -0.10964776992797852, "compression_ratio": 1.5884773662551441, "no_speech_prob": 3.0456909371423535e-05}, {"id": 51, "seek": 31720, "start": 324.56, "end": 328.8, "text": " when you want to put something in the standard library of a language, that should be only one", "tokens": [562, 291, 528, 281, 829, 746, 294, 264, 3832, 6405, 295, 257, 2856, 11, 300, 820, 312, 787, 472], "temperature": 0.0, "avg_logprob": -0.10964776992797852, "compression_ratio": 1.5884773662551441, "no_speech_prob": 3.0456909371423535e-05}, {"id": 52, "seek": 31720, "start": 328.8, "end": 338.4, "text": " way to do it. And it's efficient and so on. So what can we do about it? Well, I propose to do", "tokens": [636, 281, 360, 309, 13, 400, 309, 311, 7148, 293, 370, 322, 13, 407, 437, 393, 321, 360, 466, 309, 30, 1042, 11, 286, 17421, 281, 360], "temperature": 0.0, "avg_logprob": -0.10964776992797852, "compression_ratio": 1.5884773662551441, "no_speech_prob": 3.0456909371423535e-05}, {"id": 53, "seek": 31720, "start": 338.4, "end": 344.64, "text": " Knickl. Knickl is a general purpose domain-specific language, if that makes sense, for configuration.", "tokens": [10519, 618, 75, 13, 10519, 618, 75, 307, 257, 2674, 4334, 9274, 12, 29258, 2856, 11, 498, 300, 1669, 2020, 11, 337, 11694, 13], "temperature": 0.0, "avg_logprob": -0.10964776992797852, "compression_ratio": 1.5884773662551441, "no_speech_prob": 3.0456909371423535e-05}, {"id": 54, "seek": 34464, "start": 344.64, "end": 349.03999999999996, "text": " And what Knickl has, it has sound-gradual typing, it has opting static typing with higher rank", "tokens": [400, 437, 10519, 618, 75, 575, 11, 309, 575, 1626, 12, 7165, 901, 18444, 11, 309, 575, 2427, 278, 13437, 18444, 365, 2946, 6181], "temperature": 0.0, "avg_logprob": -0.23602544996473523, "compression_ratio": 1.6928571428571428, "no_speech_prob": 0.00022964848903939128}, {"id": 55, "seek": 34464, "start": 349.03999999999996, "end": 353.91999999999996, "text": " polymorphism, structural typing with full polymorphism. Contract is like I'm going to find that. No.", "tokens": [6754, 76, 18191, 1434, 11, 15067, 18444, 365, 1577, 6754, 76, 18191, 1434, 13, 44659, 307, 411, 286, 478, 516, 281, 915, 300, 13, 883, 13], "temperature": 0.0, "avg_logprob": -0.23602544996473523, "compression_ratio": 1.6928571428571428, "no_speech_prob": 0.00022964848903939128}, {"id": 56, "seek": 34464, "start": 353.91999999999996, "end": 360.08, "text": " I mean, yes, in fact, but that's not the point. The point, I mean, those are means to an end.", "tokens": [286, 914, 11, 2086, 11, 294, 1186, 11, 457, 300, 311, 406, 264, 935, 13, 440, 935, 11, 286, 914, 11, 729, 366, 1355, 281, 364, 917, 13], "temperature": 0.0, "avg_logprob": -0.23602544996473523, "compression_ratio": 1.6928571428571428, "no_speech_prob": 0.00022964848903939128}, {"id": 57, "seek": 34464, "start": 360.08, "end": 368.0, "text": " And the end is that your practice is nice. So here it's a little video demo. On the right,", "tokens": [400, 264, 917, 307, 300, 428, 3124, 307, 1481, 13, 407, 510, 309, 311, 257, 707, 960, 10723, 13, 1282, 264, 558, 11], "temperature": 0.0, "avg_logprob": -0.23602544996473523, "compression_ratio": 1.6928571428571428, "no_speech_prob": 0.00022964848903939128}, {"id": 58, "seek": 34464, "start": 368.0, "end": 373.03999999999996, "text": " we have something called a contract. It's like Knicks-Wes types, something that is checked at", "tokens": [321, 362, 746, 1219, 257, 4364, 13, 467, 311, 411, 10519, 7663, 12, 54, 279, 3467, 11, 746, 300, 307, 10033, 412], "temperature": 0.0, "avg_logprob": -0.23602544996473523, "compression_ratio": 1.6928571428571428, "no_speech_prob": 0.00022964848903939128}, {"id": 59, "seek": 37304, "start": 373.04, "end": 379.6, "text": " one time by the Knickl interpreter. And you write it actually pretty much like a type or a schema.", "tokens": [472, 565, 538, 264, 10519, 618, 75, 34132, 13, 400, 291, 2464, 309, 767, 1238, 709, 411, 257, 2010, 420, 257, 34078, 13], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 60, "seek": 37304, "start": 379.6, "end": 384.32, "text": " You say, oh, Knickl derivation, this is taken from Knicks-Wes. This contract defined by Knicks-Wes", "tokens": [509, 584, 11, 1954, 11, 10519, 618, 75, 10151, 399, 11, 341, 307, 2726, 490, 10519, 7663, 12, 54, 279, 13, 639, 4364, 7642, 538, 10519, 7663, 12, 54, 279], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 61, "seek": 37304, "start": 384.32, "end": 389.52000000000004, "text": " should have a name, a version, dependencies, system, and so on. You can attach other contracts", "tokens": [820, 362, 257, 1315, 11, 257, 3037, 11, 36606, 11, 1185, 11, 293, 370, 322, 13, 509, 393, 5085, 661, 13952], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 62, "seek": 37304, "start": 390.08000000000004, "end": 393.44, "text": " and meta data in general to those fields. You can say, oh, name must be a string,", "tokens": [293, 19616, 1412, 294, 2674, 281, 729, 7909, 13, 509, 393, 584, 11, 1954, 11, 1315, 1633, 312, 257, 6798, 11], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 63, "seek": 37304, "start": 393.44, "end": 397.52000000000004, "text": " version must be a string. Dependency should be an array of derivation. Derivation is another", "tokens": [3037, 1633, 312, 257, 6798, 13, 4056, 521, 3020, 820, 312, 364, 10225, 295, 10151, 399, 13, 5618, 592, 399, 307, 1071], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 64, "seek": 37304, "start": 397.52000000000004, "end": 402.24, "text": " contract that you'll define somewhere. You can attach default value. Dependencies are empty by", "tokens": [4364, 300, 291, 603, 6964, 4079, 13, 509, 393, 5085, 7576, 2158, 13, 4056, 521, 6464, 366, 6707, 538], "temperature": 0.0, "avg_logprob": -0.1355944569905599, "compression_ratio": 1.8609271523178808, "no_speech_prob": 6.779430259484798e-05}, {"id": 65, "seek": 40224, "start": 402.24, "end": 408.88, "text": " default. You can attach, you can say that a field is optional, for example, because I think Knicks", "tokens": [7576, 13, 509, 393, 5085, 11, 291, 393, 584, 300, 257, 2519, 307, 17312, 11, 337, 1365, 11, 570, 286, 519, 10519, 7663], "temperature": 0.0, "avg_logprob": -0.11931462538869757, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.7432966817286797e-05}, {"id": 66, "seek": 40224, "start": 408.88, "end": 415.28000000000003, "text": " is not strictly required by a built-in derivation that version is defined. And the thing is that", "tokens": [307, 406, 20792, 4739, 538, 257, 3094, 12, 259, 10151, 399, 300, 3037, 307, 7642, 13, 400, 264, 551, 307, 300], "temperature": 0.0, "avg_logprob": -0.11931462538869757, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.7432966817286797e-05}, {"id": 67, "seek": 40224, "start": 415.28000000000003, "end": 420.8, "text": " all those meta data can be leveraged by the tooling. On the left, we are trying to write", "tokens": [439, 729, 19616, 1412, 393, 312, 12451, 2980, 538, 264, 46593, 13, 1282, 264, 1411, 11, 321, 366, 1382, 281, 2464], "temperature": 0.0, "avg_logprob": -0.11931462538869757, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.7432966817286797e-05}, {"id": 68, "seek": 40224, "start": 420.8, "end": 425.6, "text": " something looking like a derivation. That doesn't matter at this point. But we define an output", "tokens": [746, 1237, 411, 257, 10151, 399, 13, 663, 1177, 380, 1871, 412, 341, 935, 13, 583, 321, 6964, 364, 5598], "temperature": 0.0, "avg_logprob": -0.11931462538869757, "compression_ratio": 1.5833333333333333, "no_speech_prob": 2.7432966817286797e-05}, {"id": 69, "seek": 42560, "start": 425.6, "end": 432.32000000000005, "text": " field. Field is just Knickl name for attribute. And we apply this contract. We just import it. And", "tokens": [2519, 13, 17952, 307, 445, 10519, 618, 75, 1315, 337, 19667, 13, 400, 321, 3079, 341, 4364, 13, 492, 445, 974, 309, 13, 400], "temperature": 0.0, "avg_logprob": -0.16079166412353516, "compression_ratio": 1.6781115879828326, "no_speech_prob": 5.3434450819622725e-05}, {"id": 70, "seek": 42560, "start": 432.32000000000005, "end": 439.04, "text": " let's see how it turns out. It turns out that we get completion for what we should put inside this", "tokens": [718, 311, 536, 577, 309, 4523, 484, 13, 467, 4523, 484, 300, 321, 483, 19372, 337, 437, 321, 820, 829, 1854, 341], "temperature": 0.0, "avg_logprob": -0.16079166412353516, "compression_ratio": 1.6781115879828326, "no_speech_prob": 5.3434450819622725e-05}, {"id": 71, "seek": 42560, "start": 439.04, "end": 444.72, "text": " output stuff. Like name, okay, we have documentation. We have the type. Actually, type in a string is", "tokens": [5598, 1507, 13, 1743, 1315, 11, 1392, 11, 321, 362, 14333, 13, 492, 362, 264, 2010, 13, 5135, 11, 2010, 294, 257, 6798, 307], "temperature": 0.0, "avg_logprob": -0.16079166412353516, "compression_ratio": 1.6781115879828326, "no_speech_prob": 5.3434450819622725e-05}, {"id": 72, "seek": 42560, "start": 444.72, "end": 450.72, "text": " named whatever the contract. We get completion for built-in command. And for nested recall,", "tokens": [4926, 2035, 264, 4364, 13, 492, 483, 19372, 337, 3094, 12, 259, 5622, 13, 400, 337, 15646, 292, 9901, 11], "temperature": 0.0, "avg_logprob": -0.16079166412353516, "compression_ratio": 1.6781115879828326, "no_speech_prob": 5.3434450819622725e-05}, {"id": 73, "seek": 45072, "start": 450.72, "end": 457.04, "text": " like, oh, what should I put in that built-in command? You can leverage also this information,", "tokens": [411, 11, 1954, 11, 437, 820, 286, 829, 294, 300, 3094, 12, 259, 5622, 30, 509, 393, 13982, 611, 341, 1589, 11], "temperature": 0.0, "avg_logprob": -0.14467251685357863, "compression_ratio": 1.7095588235294117, "no_speech_prob": 6.727669097017497e-05}, {"id": 74, "seek": 45072, "start": 457.04, "end": 462.0, "text": " not only from the LSP, but from the CLI. Oh, no, sorry, I forgot. You get completion for", "tokens": [406, 787, 490, 264, 441, 27921, 11, 457, 490, 264, 12855, 40, 13, 876, 11, 572, 11, 2597, 11, 286, 5298, 13, 509, 483, 19372, 337], "temperature": 0.0, "avg_logprob": -0.14467251685357863, "compression_ratio": 1.7095588235294117, "no_speech_prob": 6.727669097017497e-05}, {"id": 75, "seek": 45072, "start": 462.0, "end": 466.56, "text": " the standard library and actually any library. Those functions are statically typed, but there's", "tokens": [264, 3832, 6405, 293, 767, 604, 6405, 13, 3950, 6828, 366, 2219, 984, 33941, 11, 457, 456, 311], "temperature": 0.0, "avg_logprob": -0.14467251685357863, "compression_ratio": 1.7095588235294117, "no_speech_prob": 6.727669097017497e-05}, {"id": 76, "seek": 45072, "start": 466.56, "end": 472.96000000000004, "text": " another subject. You can leverage this information from the CLI. Using Knickl query, you can say,", "tokens": [1071, 3983, 13, 509, 393, 13982, 341, 1589, 490, 264, 12855, 40, 13, 11142, 10519, 618, 75, 14581, 11, 291, 393, 584, 11], "temperature": 0.0, "avg_logprob": -0.14467251685357863, "compression_ratio": 1.7095588235294117, "no_speech_prob": 6.727669097017497e-05}, {"id": 77, "seek": 45072, "start": 472.96000000000004, "end": 477.20000000000005, "text": " oh, what's inside a contract that's named? What is the field Knickl derivation? You get", "tokens": [1954, 11, 437, 311, 1854, 257, 4364, 300, 311, 4926, 30, 708, 307, 264, 2519, 10519, 618, 75, 10151, 399, 30, 509, 483], "temperature": 0.0, "avg_logprob": -0.14467251685357863, "compression_ratio": 1.7095588235294117, "no_speech_prob": 6.727669097017497e-05}, {"id": 78, "seek": 47720, "start": 477.2, "end": 481.84, "text": " documentation. And what are the available fields? You can say, oh, okay, what is built command in", "tokens": [14333, 13, 400, 437, 366, 264, 2435, 7909, 30, 509, 393, 584, 11, 1954, 11, 1392, 11, 437, 307, 3094, 5622, 294], "temperature": 0.0, "avg_logprob": -0.14373096498120733, "compression_ratio": 1.6813186813186813, "no_speech_prob": 2.5849160010693595e-05}, {"id": 79, "seek": 47720, "start": 481.84, "end": 487.76, "text": " particular? I get documentation and field. Now, what happens if I make a silly mistake", "tokens": [1729, 30, 286, 483, 14333, 293, 2519, 13, 823, 11, 437, 2314, 498, 286, 652, 257, 11774, 6146], "temperature": 0.0, "avg_logprob": -0.14373096498120733, "compression_ratio": 1.6813186813186813, "no_speech_prob": 2.5849160010693595e-05}, {"id": 80, "seek": 47720, "start": 487.76, "end": 492.71999999999997, "text": " and build command, which should be a record of strings, I just made it a string, like,", "tokens": [293, 1322, 5622, 11, 597, 820, 312, 257, 2136, 295, 13985, 11, 286, 445, 1027, 309, 257, 6798, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.14373096498120733, "compression_ratio": 1.6813186813186813, "no_speech_prob": 2.5849160010693595e-05}, {"id": 81, "seek": 47720, "start": 492.71999999999997, "end": 500.0, "text": " instead of an attribute set? And I try to run Knickl on that. What I get is a normal message.", "tokens": [2602, 295, 364, 19667, 992, 30, 400, 286, 853, 281, 1190, 10519, 618, 75, 322, 300, 13, 708, 286, 483, 307, 257, 2710, 3636, 13], "temperature": 0.0, "avg_logprob": -0.14373096498120733, "compression_ratio": 1.6813186813186813, "no_speech_prob": 2.5849160010693595e-05}, {"id": 82, "seek": 47720, "start": 500.0, "end": 504.71999999999997, "text": " The first blue part says, what is a contract that I just broke? You should have a record with", "tokens": [440, 700, 3344, 644, 1619, 11, 437, 307, 257, 4364, 300, 286, 445, 6902, 30, 509, 820, 362, 257, 2136, 365], "temperature": 0.0, "avg_logprob": -0.14373096498120733, "compression_ratio": 1.6813186813186813, "no_speech_prob": 2.5849160010693595e-05}, {"id": 83, "seek": 50472, "start": 504.72, "end": 510.40000000000003, "text": " args and so on. The second light points at where I define the value. Now, it's used. It's read.", "tokens": [3882, 82, 293, 370, 322, 13, 440, 1150, 1442, 2793, 412, 689, 286, 6964, 264, 2158, 13, 823, 11, 309, 311, 1143, 13, 467, 311, 1401, 13], "temperature": 0.0, "avg_logprob": -0.14357864565965606, "compression_ratio": 1.7269503546099292, "no_speech_prob": 0.00010054400627268478}, {"id": 84, "seek": 50472, "start": 510.40000000000003, "end": 516.32, "text": " And it says, oh, this is one. This doesn't respect this contract. The third part is not really useful", "tokens": [400, 309, 1619, 11, 1954, 11, 341, 307, 472, 13, 639, 1177, 380, 3104, 341, 4364, 13, 440, 2636, 644, 307, 406, 534, 4420], "temperature": 0.0, "avg_logprob": -0.14357864565965606, "compression_ratio": 1.7269503546099292, "no_speech_prob": 0.00010054400627268478}, {"id": 85, "seek": 50472, "start": 516.32, "end": 521.0400000000001, "text": " there, but it's giving you the evaluated value, which means that if build command was a complex", "tokens": [456, 11, 457, 309, 311, 2902, 291, 264, 25509, 2158, 11, 597, 1355, 300, 498, 1322, 5622, 390, 257, 3997], "temperature": 0.0, "avg_logprob": -0.14357864565965606, "compression_ratio": 1.7269503546099292, "no_speech_prob": 0.00010054400627268478}, {"id": 86, "seek": 50472, "start": 521.0400000000001, "end": 527.28, "text": " expression bit out of map and fold, you still get the final stuff that it builds. And this green", "tokens": [6114, 857, 484, 295, 4471, 293, 4860, 11, 291, 920, 483, 264, 2572, 1507, 300, 309, 15182, 13, 400, 341, 3092], "temperature": 0.0, "avg_logprob": -0.14357864565965606, "compression_ratio": 1.7269503546099292, "no_speech_prob": 0.00010054400627268478}, {"id": 87, "seek": 50472, "start": 527.28, "end": 534.48, "text": " thing here is taking who the L is imposing this contract. So these points to build command field", "tokens": [551, 510, 307, 1940, 567, 264, 441, 307, 40288, 341, 4364, 13, 407, 613, 2793, 281, 1322, 5622, 2519], "temperature": 0.0, "avg_logprob": -0.14357864565965606, "compression_ratio": 1.7269503546099292, "no_speech_prob": 0.00010054400627268478}, {"id": 88, "seek": 53448, "start": 534.48, "end": 540.8000000000001, "text": " inside the Knickl derivation contract inside the Knickl library. And so this is just runtime", "tokens": [1854, 264, 10519, 618, 75, 10151, 399, 4364, 1854, 264, 10519, 618, 75, 6405, 13, 400, 370, 341, 307, 445, 34474], "temperature": 0.0, "avg_logprob": -0.17582829793294272, "compression_ratio": 1.6884057971014492, "no_speech_prob": 2.973698610730935e-05}, {"id": 89, "seek": 53448, "start": 540.8000000000001, "end": 546.4, "text": " validation. You could do it with libraries. Knickl does it. But first, I think this kind of", "tokens": [24071, 13, 509, 727, 360, 309, 365, 15148, 13, 10519, 618, 75, 775, 309, 13, 583, 700, 11, 286, 519, 341, 733, 295], "temperature": 0.0, "avg_logprob": -0.17582829793294272, "compression_ratio": 1.6884057971014492, "no_speech_prob": 2.973698610730935e-05}, {"id": 90, "seek": 53448, "start": 547.12, "end": 552.24, "text": " nice structural syntax for it, as well as this advanced real-world reporting, it's really hard", "tokens": [1481, 15067, 28431, 337, 309, 11, 382, 731, 382, 341, 7339, 957, 12, 13217, 10031, 11, 309, 311, 534, 1152], "temperature": 0.0, "avg_logprob": -0.17582829793294272, "compression_ratio": 1.6884057971014492, "no_speech_prob": 2.973698610730935e-05}, {"id": 91, "seek": 53448, "start": 552.24, "end": 556.4, "text": " if not impossible to achieve purely in library code. Because there are special things in the", "tokens": [498, 406, 6243, 281, 4584, 17491, 294, 6405, 3089, 13, 1436, 456, 366, 2121, 721, 294, 264], "temperature": 0.0, "avg_logprob": -0.17582829793294272, "compression_ratio": 1.6884057971014492, "no_speech_prob": 2.973698610730935e-05}, {"id": 92, "seek": 53448, "start": 556.4, "end": 560.96, "text": " Knickl interpreter to handle contract application and track argument and the stack and so on.", "tokens": [10519, 618, 75, 34132, 281, 4813, 4364, 3861, 293, 2837, 6770, 293, 264, 8630, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.17582829793294272, "compression_ratio": 1.6884057971014492, "no_speech_prob": 2.973698610730935e-05}, {"id": 93, "seek": 56096, "start": 560.96, "end": 569.6800000000001, "text": " So what Knickl is about is relevant, thorough, and early error reporting as much as possible.", "tokens": [407, 437, 10519, 618, 75, 307, 466, 307, 7340, 11, 12934, 11, 293, 2440, 6713, 10031, 382, 709, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.20052383606692395, "compression_ratio": 1.5217391304347827, "no_speech_prob": 4.3462896428536624e-05}, {"id": 94, "seek": 56096, "start": 570.48, "end": 576.5600000000001, "text": " Discourability, you can attach all those meta information to fields and they are understood", "tokens": [19839, 396, 2310, 11, 291, 393, 5085, 439, 729, 19616, 1589, 281, 7909, 293, 436, 366, 7320], "temperature": 0.0, "avg_logprob": -0.20052383606692395, "compression_ratio": 1.5217391304347827, "no_speech_prob": 4.3462896428536624e-05}, {"id": 95, "seek": 56096, "start": 576.5600000000001, "end": 582.24, "text": " by the tooling. And in particular, by the LSP, giving you interactive development process.", "tokens": [538, 264, 46593, 13, 400, 294, 1729, 11, 538, 264, 441, 27921, 11, 2902, 291, 15141, 3250, 1399, 13], "temperature": 0.0, "avg_logprob": -0.20052383606692395, "compression_ratio": 1.5217391304347827, "no_speech_prob": 4.3462896428536624e-05}, {"id": 96, "seek": 56096, "start": 583.0400000000001, "end": 586.96, "text": " And in the end, arguably, the language is more sophisticated than Knicks,", "tokens": [400, 294, 264, 917, 11, 26771, 11, 264, 2856, 307, 544, 16950, 813, 10519, 7663, 11], "temperature": 0.0, "avg_logprob": -0.20052383606692395, "compression_ratio": 1.5217391304347827, "no_speech_prob": 4.3462896428536624e-05}, {"id": 97, "seek": 58696, "start": 586.96, "end": 594.32, "text": " but as a user, I find it easier. Okay, great. That's fine. That's just my great 80,000 package.", "tokens": [457, 382, 257, 4195, 11, 286, 915, 309, 3571, 13, 1033, 11, 869, 13, 663, 311, 2489, 13, 663, 311, 445, 452, 869, 4688, 11, 1360, 7372, 13], "temperature": 0.0, "avg_logprob": -0.13134157216107403, "compression_ratio": 1.5965665236051503, "no_speech_prob": 0.00021004628797527403}, {"id": 98, "seek": 58696, "start": 594.32, "end": 602.1600000000001, "text": " Not a big deal. Nope, not going to happen. Knicks package is a huge behemoth. It's probably the,", "tokens": [1726, 257, 955, 2028, 13, 12172, 11, 406, 516, 281, 1051, 13, 10519, 7663, 7372, 307, 257, 2603, 1540, 443, 900, 13, 467, 311, 1391, 264, 11], "temperature": 0.0, "avg_logprob": -0.13134157216107403, "compression_ratio": 1.5965665236051503, "no_speech_prob": 0.00021004628797527403}, {"id": 99, "seek": 58696, "start": 602.88, "end": 607.12, "text": " I mean, the most important thing in Knicks. I mean, the value of Knicks is all this domain", "tokens": [286, 914, 11, 264, 881, 1021, 551, 294, 10519, 7663, 13, 286, 914, 11, 264, 2158, 295, 10519, 7663, 307, 439, 341, 9274], "temperature": 0.0, "avg_logprob": -0.13134157216107403, "compression_ratio": 1.5965665236051503, "no_speech_prob": 0.00021004628797527403}, {"id": 100, "seek": 58696, "start": 607.12, "end": 612.5600000000001, "text": " knowledge on how to build package encoded in a code that can be actioned by the machine.", "tokens": [3601, 322, 577, 281, 1322, 7372, 2058, 12340, 294, 257, 3089, 300, 393, 312, 3069, 292, 538, 264, 3479, 13], "temperature": 0.0, "avg_logprob": -0.13134157216107403, "compression_ratio": 1.5965665236051503, "no_speech_prob": 0.00021004628797527403}, {"id": 101, "seek": 61256, "start": 612.56, "end": 617.1199999999999, "text": " And it's not going anywhere. So whatever we do, if we want to use an alternative front end,", "tokens": [400, 309, 311, 406, 516, 4992, 13, 407, 2035, 321, 360, 11, 498, 321, 528, 281, 764, 364, 8535, 1868, 917, 11], "temperature": 0.0, "avg_logprob": -0.09341821670532227, "compression_ratio": 1.6816479400749065, "no_speech_prob": 5.457895895233378e-05}, {"id": 102, "seek": 61256, "start": 617.1199999999999, "end": 624.88, "text": " we have to be able to use Knicks packages. So meet your first Knickl derivation. It's a DevShell.", "tokens": [321, 362, 281, 312, 1075, 281, 764, 10519, 7663, 17401, 13, 407, 1677, 428, 700, 10519, 618, 75, 10151, 399, 13, 467, 311, 257, 9096, 9526, 285, 13], "temperature": 0.0, "avg_logprob": -0.09341821670532227, "compression_ratio": 1.6816479400749065, "no_speech_prob": 5.457895895233378e-05}, {"id": 103, "seek": 61256, "start": 625.76, "end": 631.52, "text": " And from a distance, I want you to notice that there is no function at the top. So usually,", "tokens": [400, 490, 257, 4560, 11, 286, 528, 291, 281, 3449, 300, 456, 307, 572, 2445, 412, 264, 1192, 13, 407, 2673, 11], "temperature": 0.0, "avg_logprob": -0.09341821670532227, "compression_ratio": 1.6816479400749065, "no_speech_prob": 5.457895895233378e-05}, {"id": 104, "seek": 61256, "start": 631.52, "end": 635.28, "text": " Knicks packages, the first thing you do when you define a package is to define a function.", "tokens": [10519, 7663, 17401, 11, 264, 700, 551, 291, 360, 562, 291, 6964, 257, 7372, 307, 281, 6964, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.09341821670532227, "compression_ratio": 1.6816479400749065, "no_speech_prob": 5.457895895233378e-05}, {"id": 105, "seek": 61256, "start": 635.28, "end": 639.28, "text": " This has a number of problems. One being that before doing anything with it,", "tokens": [639, 575, 257, 1230, 295, 2740, 13, 1485, 885, 300, 949, 884, 1340, 365, 309, 11], "temperature": 0.0, "avg_logprob": -0.09341821670532227, "compression_ratio": 1.6816479400749065, "no_speech_prob": 5.457895895233378e-05}, {"id": 106, "seek": 63928, "start": 639.28, "end": 643.68, "text": " like getting the name or the version, you have to apply it to some arguments. And this argument", "tokens": [411, 1242, 264, 1315, 420, 264, 3037, 11, 291, 362, 281, 3079, 309, 281, 512, 12869, 13, 400, 341, 6770], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 107, "seek": 63928, "start": 643.68, "end": 647.36, "text": " may be packages. So you need to apply them and so on. So you need to evaluate the transitive", "tokens": [815, 312, 17401, 13, 407, 291, 643, 281, 3079, 552, 293, 370, 322, 13, 407, 291, 643, 281, 13059, 264, 1145, 2187], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 108, "seek": 63928, "start": 647.36, "end": 651.76, "text": " dependency before doing anything. Here is just a flat record. Records are recursive by default", "tokens": [33621, 949, 884, 1340, 13, 1692, 307, 445, 257, 4962, 2136, 13, 31928, 366, 20560, 488, 538, 7576], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 109, "seek": 63928, "start": 651.76, "end": 658.0799999999999, "text": " in Knickl. So line one, we import some things called builders. We'll see later what is from the", "tokens": [294, 10519, 618, 75, 13, 407, 1622, 472, 11, 321, 974, 512, 721, 1219, 36281, 13, 492, 603, 536, 1780, 437, 307, 490, 264], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 110, "seek": 63928, "start": 658.0799999999999, "end": 665.04, "text": " Knicks cell. Builders is given by Knicks cell. And line four to six, for now, or API is that you", "tokens": [10519, 7663, 2815, 13, 11875, 433, 307, 2212, 538, 10519, 7663, 2815, 13, 400, 1622, 1451, 281, 2309, 11, 337, 586, 11, 420, 9362, 307, 300, 291], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 111, "seek": 63928, "start": 665.04, "end": 668.8, "text": " need to declare a bit like a flake. But at the level of the derivation, what you are going to", "tokens": [643, 281, 19710, 257, 857, 411, 257, 932, 619, 13, 583, 412, 264, 1496, 295, 264, 10151, 399, 11, 437, 291, 366, 516, 281], "temperature": 0.0, "avg_logprob": -0.12535248826814177, "compression_ratio": 1.7647058823529411, "no_speech_prob": 4.869037729804404e-05}, {"id": 112, "seek": 66880, "start": 668.8, "end": 673.52, "text": " take from the Knicks world. So here I say I want to take CRL from Knicks packages.", "tokens": [747, 490, 264, 10519, 7663, 1002, 13, 407, 510, 286, 584, 286, 528, 281, 747, 383, 10740, 490, 10519, 7663, 17401, 13], "temperature": 0.0, "avg_logprob": -0.18361296880812872, "compression_ratio": 1.540084388185654, "no_speech_prob": 9.005452739074826e-05}, {"id": 113, "seek": 66880, "start": 676.0, "end": 682.4799999999999, "text": " Line nine to 12, I'm defining the actual derivation, so to speak, even if it seems way smaller.", "tokens": [14670, 4949, 281, 2272, 11, 286, 478, 17827, 264, 3539, 10151, 399, 11, 370, 281, 1710, 11, 754, 498, 309, 2544, 636, 4356, 13], "temperature": 0.0, "avg_logprob": -0.18361296880812872, "compression_ratio": 1.540084388185654, "no_speech_prob": 9.005452739074826e-05}, {"id": 114, "seek": 66880, "start": 683.04, "end": 690.0799999999999, "text": " So I give a name. And then I put this input dot CRL in the pass. So this funny-looking string,", "tokens": [407, 286, 976, 257, 1315, 13, 400, 550, 286, 829, 341, 4846, 5893, 383, 10740, 294, 264, 1320, 13, 407, 341, 4074, 12, 16129, 6798, 11], "temperature": 0.0, "avg_logprob": -0.18361296880812872, "compression_ratio": 1.540084388185654, "no_speech_prob": 9.005452739074826e-05}, {"id": 115, "seek": 66880, "start": 690.0799999999999, "end": 697.1999999999999, "text": " I won't have time to detail, but it's called a symbolic string, is a way to simulate Knicks", "tokens": [286, 1582, 380, 362, 565, 281, 2607, 11, 457, 309, 311, 1219, 257, 25755, 6798, 11, 307, 257, 636, 281, 27817, 10519, 7663], "temperature": 0.0, "avg_logprob": -0.18361296880812872, "compression_ratio": 1.540084388185654, "no_speech_prob": 9.005452739074826e-05}, {"id": 116, "seek": 69720, "start": 697.2, "end": 701.0400000000001, "text": " string context. But not only actually, it's a pretty generic mechanism, but to have the same", "tokens": [6798, 4319, 13, 583, 406, 787, 767, 11, 309, 311, 257, 1238, 19577, 7513, 11, 457, 281, 362, 264, 912], "temperature": 0.0, "avg_logprob": -0.17054140286182795, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.00011748241377063096}, {"id": 117, "seek": 69720, "start": 701.0400000000001, "end": 705.36, "text": " namesities like input dot CRL is not actually a string, it's a derivation which has store pass and", "tokens": [5288, 1088, 411, 4846, 5893, 383, 10740, 307, 406, 767, 257, 6798, 11, 309, 311, 257, 10151, 399, 597, 575, 3531, 1320, 293], "temperature": 0.0, "avg_logprob": -0.17054140286182795, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.00011748241377063096}, {"id": 118, "seek": 69720, "start": 705.36, "end": 710.5600000000001, "text": " so on. And you do that in Knicks, and it's not trivial to do it in a different language. But", "tokens": [370, 322, 13, 400, 291, 360, 300, 294, 10519, 7663, 11, 293, 309, 311, 406, 26703, 281, 360, 309, 294, 257, 819, 2856, 13, 583], "temperature": 0.0, "avg_logprob": -0.17054140286182795, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.00011748241377063096}, {"id": 119, "seek": 69720, "start": 710.5600000000001, "end": 716.8000000000001, "text": " yeah, this has all solutions to that. And we are using this input dot CRL, but we haven't seen any", "tokens": [1338, 11, 341, 575, 439, 6547, 281, 300, 13, 400, 321, 366, 1228, 341, 4846, 5893, 383, 10740, 11, 457, 321, 2378, 380, 1612, 604], "temperature": 0.0, "avg_logprob": -0.17054140286182795, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.00011748241377063096}, {"id": 120, "seek": 69720, "start": 716.8000000000001, "end": 724.88, "text": " inputs yet. The other was called input spec. So input is defined, but not really, but is defined", "tokens": [15743, 1939, 13, 440, 661, 390, 1219, 4846, 1608, 13, 407, 4846, 307, 7642, 11, 457, 406, 534, 11, 457, 307, 7642], "temperature": 0.0, "avg_logprob": -0.17054140286182795, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.00011748241377063096}, {"id": 121, "seek": 72488, "start": 724.88, "end": 731.28, "text": " line seven. This is just a field without a definition. And in Nickel, the idea is that", "tokens": [1622, 3407, 13, 639, 307, 445, 257, 2519, 1553, 257, 7123, 13, 400, 294, 45416, 11, 264, 1558, 307, 300], "temperature": 0.0, "avg_logprob": -0.2035710427068895, "compression_ratio": 1.6901408450704225, "no_speech_prob": 8.19625856820494e-05}, {"id": 122, "seek": 72488, "start": 731.28, "end": 737.68, "text": " we call a recursive, and we have something called merge operation, which is the unpercent. It's a", "tokens": [321, 818, 257, 20560, 488, 11, 293, 321, 362, 746, 1219, 22183, 6916, 11, 597, 307, 264, 517, 610, 2207, 13, 467, 311, 257], "temperature": 0.0, "avg_logprob": -0.2035710427068895, "compression_ratio": 1.6901408450704225, "no_speech_prob": 8.19625856820494e-05}, {"id": 123, "seek": 72488, "start": 737.68, "end": 743.6, "text": " bit like the slash slash of Knicks, that is combining records, but it doesn't give priority to the", "tokens": [857, 411, 264, 17330, 17330, 295, 10519, 7663, 11, 300, 307, 21928, 7724, 11, 457, 309, 1177, 380, 976, 9365, 281, 264], "temperature": 0.0, "avg_logprob": -0.2035710427068895, "compression_ratio": 1.6901408450704225, "no_speech_prob": 8.19625856820494e-05}, {"id": 124, "seek": 72488, "start": 743.6, "end": 747.04, "text": " left hand side, right hand side. You just try to combine and see if there is a conflict, you have", "tokens": [1411, 1011, 1252, 11, 558, 1011, 1252, 13, 509, 445, 853, 281, 10432, 293, 536, 498, 456, 307, 257, 6596, 11, 291, 362], "temperature": 0.0, "avg_logprob": -0.2035710427068895, "compression_ratio": 1.6901408450704225, "no_speech_prob": 8.19625856820494e-05}, {"id": 125, "seek": 72488, "start": 747.04, "end": 752.56, "text": " to use priorities. A bit like the Knicks or the module system. But it does what you expect naively", "tokens": [281, 764, 15503, 13, 316, 857, 411, 264, 10519, 7663, 420, 264, 10088, 1185, 13, 583, 309, 775, 437, 291, 2066, 1667, 3413], "temperature": 0.0, "avg_logprob": -0.2035710427068895, "compression_ratio": 1.6901408450704225, "no_speech_prob": 8.19625856820494e-05}, {"id": 126, "seek": 75256, "start": 752.56, "end": 757.28, "text": " when you start Knicks, that it works on nested record, and that it works on recursive record.", "tokens": [562, 291, 722, 10519, 7663, 11, 300, 309, 1985, 322, 15646, 292, 2136, 11, 293, 300, 309, 1985, 322, 20560, 488, 2136, 13], "temperature": 0.0, "avg_logprob": -0.12591697858727496, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00012167482782388106}, {"id": 127, "seek": 75256, "start": 757.28, "end": 761.1999999999999, "text": " That is, if you override something there, everything that depends on it recursively", "tokens": [663, 307, 11, 498, 291, 42321, 746, 456, 11, 1203, 300, 5946, 322, 309, 20560, 3413], "temperature": 0.0, "avg_logprob": -0.12591697858727496, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00012167482782388106}, {"id": 128, "seek": 75256, "start": 761.1999999999999, "end": 766.4, "text": " will be automatically overridden. So what we do, line seven is a bit like defining", "tokens": [486, 312, 6772, 670, 81, 6171, 13, 407, 437, 321, 360, 11, 1622, 3407, 307, 257, 857, 411, 17827], "temperature": 0.0, "avg_logprob": -0.12591697858727496, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00012167482782388106}, {"id": 129, "seek": 75256, "start": 767.3599999999999, "end": 773.5999999999999, "text": " a function argument. So we're just doing function in different way, so to speak, but in a way that", "tokens": [257, 2445, 6770, 13, 407, 321, 434, 445, 884, 2445, 294, 819, 636, 11, 370, 281, 1710, 11, 457, 294, 257, 636, 300], "temperature": 0.0, "avg_logprob": -0.12591697858727496, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00012167482782388106}, {"id": 130, "seek": 75256, "start": 773.5999999999999, "end": 779.3599999999999, "text": " is way nicer for Knicks, because it just looks like configuration. Overriding is trivial. I just", "tokens": [307, 636, 22842, 337, 10519, 7663, 11, 570, 309, 445, 1542, 411, 11694, 13, 4886, 81, 2819, 307, 26703, 13, 286, 445], "temperature": 0.0, "avg_logprob": -0.12591697858727496, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00012167482782388106}, {"id": 131, "seek": 77936, "start": 779.36, "end": 784.48, "text": " add one line, and I merge with something that redefines the value. Combining stuff is trivial.", "tokens": [909, 472, 1622, 11, 293, 286, 22183, 365, 746, 300, 38818, 1652, 264, 2158, 13, 25939, 1760, 1507, 307, 26703, 13], "temperature": 0.0, "avg_logprob": -0.22327248091550217, "compression_ratio": 1.5833333333333333, "no_speech_prob": 5.369938298827037e-05}, {"id": 132, "seek": 77936, "start": 784.48, "end": 790.32, "text": " So for example, line 14 and 15, I use some predefined builders, which are mostly looking", "tokens": [407, 337, 1365, 11, 1622, 3499, 293, 2119, 11, 286, 764, 512, 659, 37716, 36281, 11, 597, 366, 5240, 1237], "temperature": 0.0, "avg_logprob": -0.22327248091550217, "compression_ratio": 1.5833333333333333, "no_speech_prob": 5.369938298827037e-05}, {"id": 133, "seek": 77936, "start": 790.32, "end": 796.24, "text": " like this derivation, and that has rest-day environments and a seed-developer environment", "tokens": [411, 341, 10151, 399, 11, 293, 300, 575, 1472, 12, 810, 12388, 293, 257, 8871, 12, 35464, 260, 2823], "temperature": 0.0, "avg_logprob": -0.22327248091550217, "compression_ratio": 1.5833333333333333, "no_speech_prob": 5.369938298827037e-05}, {"id": 134, "seek": 77936, "start": 796.24, "end": 802.5600000000001, "text": " in my shell. So I will end up with a shell that has URL, all the rest-toolchain, and C.", "tokens": [294, 452, 8720, 13, 407, 286, 486, 917, 493, 365, 257, 8720, 300, 575, 12905, 11, 439, 264, 1472, 12, 83, 1092, 11509, 11, 293, 383, 13], "temperature": 0.0, "avg_logprob": -0.22327248091550217, "compression_ratio": 1.5833333333333333, "no_speech_prob": 5.369938298827037e-05}, {"id": 135, "seek": 80256, "start": 802.56, "end": 810.4, "text": " So I think I won't have time to dwell into the detail too much, but it's a bit convoluted right", "tokens": [407, 286, 519, 286, 1582, 380, 362, 565, 281, 24355, 666, 264, 2607, 886, 709, 11, 457, 309, 311, 257, 857, 3754, 2308, 292, 558], "temperature": 0.0, "avg_logprob": -0.19365410650930098, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.00013520638458430767}, {"id": 136, "seek": 80256, "start": 810.4, "end": 816.3199999999999, "text": " now. We have a lot of the back and forth between Knicks and Nickel. Knicks is a driver. What's", "tokens": [586, 13, 492, 362, 257, 688, 295, 264, 646, 293, 5220, 1296, 10519, 7663, 293, 45416, 13, 10519, 7663, 307, 257, 6787, 13, 708, 311], "temperature": 0.0, "avg_logprob": -0.19365410650930098, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.00013520638458430767}, {"id": 137, "seek": 80256, "start": 816.3199999999999, "end": 821.92, "text": " important is that these parts will get improved, but somehow it's not truly, it's a bit orthogonal", "tokens": [1021, 307, 300, 613, 3166, 486, 483, 9689, 11, 457, 6063, 309, 311, 406, 4908, 11, 309, 311, 257, 857, 41488], "temperature": 0.0, "avg_logprob": -0.19365410650930098, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.00013520638458430767}, {"id": 138, "seek": 80256, "start": 821.92, "end": 827.28, "text": " to all the design of the Nickel side, what do the API look like, what are the builders,", "tokens": [281, 439, 264, 1715, 295, 264, 45416, 1252, 11, 437, 360, 264, 9362, 574, 411, 11, 437, 366, 264, 36281, 11], "temperature": 0.0, "avg_logprob": -0.19365410650930098, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.00013520638458430767}, {"id": 139, "seek": 80256, "start": 827.28, "end": 831.3599999999999, "text": " how we do overriding. It's orthogonal. This part is just how do we communicate with", "tokens": [577, 321, 360, 670, 81, 2819, 13, 467, 311, 41488, 13, 639, 644, 307, 445, 577, 360, 321, 7890, 365], "temperature": 0.0, "avg_logprob": -0.19365410650930098, "compression_ratio": 1.6702898550724639, "no_speech_prob": 0.00013520638458430767}, {"id": 140, "seek": 83136, "start": 831.36, "end": 837.76, "text": " Knicks packages. Right now, Knicks is leading, and everything that crosses boundaries can't be", "tokens": [10519, 7663, 17401, 13, 1779, 586, 11, 10519, 7663, 307, 5775, 11, 293, 1203, 300, 28467, 13180, 393, 380, 312], "temperature": 0.0, "avg_logprob": -0.17317098284524585, "compression_ratio": 1.6597222222222223, "no_speech_prob": 7.783380715409294e-05}, {"id": 141, "seek": 83136, "start": 837.76, "end": 843.2, "text": " functions. It has to be data. So in practice, it's JSON, and so you have a bit of back and", "tokens": [6828, 13, 467, 575, 281, 312, 1412, 13, 407, 294, 3124, 11, 309, 311, 31828, 11, 293, 370, 291, 362, 257, 857, 295, 646, 293], "temperature": 0.0, "avg_logprob": -0.17317098284524585, "compression_ratio": 1.6597222222222223, "no_speech_prob": 7.783380715409294e-05}, {"id": 142, "seek": 83136, "start": 843.2, "end": 847.6, "text": " forth like, what's your input? Oh, I will extract that from Knicks packages. I give you the derivation", "tokens": [5220, 411, 11, 437, 311, 428, 4846, 30, 876, 11, 286, 486, 8947, 300, 490, 10519, 7663, 17401, 13, 286, 976, 291, 264, 10151, 399], "temperature": 0.0, "avg_logprob": -0.17317098284524585, "compression_ratio": 1.6597222222222223, "no_speech_prob": 7.783380715409294e-05}, {"id": 143, "seek": 83136, "start": 847.6, "end": 852.64, "text": " at JSON. Nickel has almost everything to build a derivation, but it cannot build it, so it kind", "tokens": [412, 31828, 13, 45416, 575, 1920, 1203, 281, 1322, 257, 10151, 399, 11, 457, 309, 2644, 1322, 309, 11, 370, 309, 733], "temperature": 0.0, "avg_logprob": -0.17317098284524585, "compression_ratio": 1.6597222222222223, "no_speech_prob": 7.783380715409294e-05}, {"id": 144, "seek": 83136, "start": 852.64, "end": 858.4, "text": " of gives an argument to Knicks saying, please, can you call derivation for me? But that works", "tokens": [295, 2709, 364, 6770, 281, 10519, 7663, 1566, 11, 1767, 11, 393, 291, 818, 10151, 399, 337, 385, 30, 583, 300, 1985], "temperature": 0.0, "avg_logprob": -0.17317098284524585, "compression_ratio": 1.6597222222222223, "no_speech_prob": 7.783380715409294e-05}, {"id": 145, "seek": 85840, "start": 858.4, "end": 864.64, "text": " for now, at least. That's something. So the limitation of this model is that you have a lot", "tokens": [337, 586, 11, 412, 1935, 13, 663, 311, 746, 13, 407, 264, 27432, 295, 341, 2316, 307, 300, 291, 362, 257, 688], "temperature": 0.0, "avg_logprob": -0.08924561012081983, "compression_ratio": 1.7720588235294117, "no_speech_prob": 9.433855302631855e-05}, {"id": 146, "seek": 85840, "start": 864.64, "end": 869.1999999999999, "text": " on back and forth, and the error messages at the boundary are pretty bad. If you try to import", "tokens": [322, 646, 293, 5220, 11, 293, 264, 6713, 7897, 412, 264, 12866, 366, 1238, 1578, 13, 759, 291, 853, 281, 974], "temperature": 0.0, "avg_logprob": -0.08924561012081983, "compression_ratio": 1.7720588235294117, "no_speech_prob": 9.433855302631855e-05}, {"id": 147, "seek": 85840, "start": 869.1999999999999, "end": 876.24, "text": " the packages that don't exist in Knicks packages, that's going to be ugly. And you can't override", "tokens": [264, 17401, 300, 500, 380, 2514, 294, 10519, 7663, 17401, 11, 300, 311, 516, 281, 312, 12246, 13, 400, 291, 393, 380, 42321], "temperature": 0.0, "avg_logprob": -0.08924561012081983, "compression_ratio": 1.7720588235294117, "no_speech_prob": 9.433855302631855e-05}, {"id": 148, "seek": 85840, "start": 876.24, "end": 883.4399999999999, "text": " the Knicks package from within Nickel. That's kind of an important limitation because the only thing", "tokens": [264, 10519, 7663, 7372, 490, 1951, 45416, 13, 663, 311, 733, 295, 364, 1021, 27432, 570, 264, 787, 551], "temperature": 0.0, "avg_logprob": -0.08924561012081983, "compression_ratio": 1.7720588235294117, "no_speech_prob": 9.433855302631855e-05}, {"id": 149, "seek": 85840, "start": 883.4399999999999, "end": 888.0, "text": " you can get is data. You can do it on the Knicks side in the overarching flake, but it's kind of", "tokens": [291, 393, 483, 307, 1412, 13, 509, 393, 360, 309, 322, 264, 10519, 7663, 1252, 294, 264, 45501, 932, 619, 11, 457, 309, 311, 733, 295], "temperature": 0.0, "avg_logprob": -0.08924561012081983, "compression_ratio": 1.7720588235294117, "no_speech_prob": 9.433855302631855e-05}, {"id": 150, "seek": 88800, "start": 888.0, "end": 895.04, "text": " defeat the purpose. We like to be able to do that from Nickel. The roadmap to solve that is to be", "tokens": [11785, 264, 4334, 13, 492, 411, 281, 312, 1075, 281, 360, 300, 490, 45416, 13, 440, 35738, 281, 5039, 300, 307, 281, 312], "temperature": 0.0, "avg_logprob": -0.1279499848683675, "compression_ratio": 1.7427536231884058, "no_speech_prob": 6.850876525277272e-05}, {"id": 151, "seek": 88800, "start": 895.04, "end": 899.28, "text": " able to import and involve Knicks expression directly in Nickel. It's actually not that", "tokens": [1075, 281, 974, 293, 9494, 10519, 7663, 6114, 3838, 294, 45416, 13, 467, 311, 767, 406, 300], "temperature": 0.0, "avg_logprob": -0.1279499848683675, "compression_ratio": 1.7427536231884058, "no_speech_prob": 6.850876525277272e-05}, {"id": 152, "seek": 88800, "start": 899.28, "end": 904.56, "text": " unreasonable because Knicks is simple and close to being a subset of Nickel. So we're already able", "tokens": [41730, 570, 10519, 7663, 307, 2199, 293, 1998, 281, 885, 257, 25993, 295, 45416, 13, 407, 321, 434, 1217, 1075], "temperature": 0.0, "avg_logprob": -0.1279499848683675, "compression_ratio": 1.7427536231884058, "no_speech_prob": 6.850876525277272e-05}, {"id": 153, "seek": 88800, "start": 904.56, "end": 910.16, "text": " to transpire most of Knicks as far as the language is concerned, but we are missing all the built-in", "tokens": [281, 7132, 621, 881, 295, 10519, 7663, 382, 1400, 382, 264, 2856, 307, 5922, 11, 457, 321, 366, 5361, 439, 264, 3094, 12, 259], "temperature": 0.0, "avg_logprob": -0.1279499848683675, "compression_ratio": 1.7427536231884058, "no_speech_prob": 6.850876525277272e-05}, {"id": 154, "seek": 88800, "start": 910.16, "end": 915.12, "text": " dot atro of derivation and things like that to make it work, and I think it's the hardest part,", "tokens": [5893, 412, 340, 295, 10151, 399, 293, 721, 411, 300, 281, 652, 309, 589, 11, 293, 286, 519, 309, 311, 264, 13158, 644, 11], "temperature": 0.0, "avg_logprob": -0.1279499848683675, "compression_ratio": 1.7427536231884058, "no_speech_prob": 6.850876525277272e-05}, {"id": 155, "seek": 91512, "start": 915.12, "end": 921.84, "text": " actually. Yeah, having a Nickel built-in to build derivation would probably piggyback on Knicks,", "tokens": [767, 13, 865, 11, 1419, 257, 45416, 3094, 12, 259, 281, 1322, 10151, 399, 576, 1391, 39349, 3207, 322, 10519, 7663, 11], "temperature": 0.0, "avg_logprob": -0.20407662932405768, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0002008915616897866}, {"id": 156, "seek": 91512, "start": 921.84, "end": 931.28, "text": " but so that at least we don't have to do the last back and forth. We have three minutes", "tokens": [457, 370, 300, 412, 1935, 321, 500, 380, 362, 281, 360, 264, 1036, 646, 293, 5220, 13, 492, 362, 1045, 2077], "temperature": 0.0, "avg_logprob": -0.20407662932405768, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0002008915616897866}, {"id": 157, "seek": 91512, "start": 931.28, "end": 936.8, "text": " including question left. Okay, we'll go quick. And so we can do all those things and Nickel becomes", "tokens": [3009, 1168, 1411, 13, 1033, 11, 321, 603, 352, 1702, 13, 400, 370, 321, 393, 360, 439, 729, 721, 293, 45416, 3643], "temperature": 0.0, "avg_logprob": -0.20407662932405768, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0002008915616897866}, {"id": 158, "seek": 91512, "start": 936.8, "end": 942.24, "text": " a driver and you don't have to go through this back and forth. You can override from from Nickel.", "tokens": [257, 6787, 293, 291, 500, 380, 362, 281, 352, 807, 341, 646, 293, 5220, 13, 509, 393, 42321, 490, 490, 45416, 13], "temperature": 0.0, "avg_logprob": -0.20407662932405768, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0002008915616897866}, {"id": 159, "seek": 94224, "start": 942.24, "end": 947.28, "text": " For Knicks, what does it mean? I hope it means an improved developer experience. Unified approach", "tokens": [1171, 10519, 7663, 11, 437, 775, 309, 914, 30, 286, 1454, 309, 1355, 364, 9689, 10754, 1752, 13, 1156, 2587, 3109], "temperature": 0.0, "avg_logprob": -0.1576459248860677, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.00021342572290450335}, {"id": 160, "seek": 94224, "start": 947.28, "end": 950.8, "text": " to configuration. This looks like configuration more than Knicks. I find like you just define a", "tokens": [281, 11694, 13, 639, 1542, 411, 11694, 544, 813, 10519, 7663, 13, 286, 915, 411, 291, 445, 6964, 257], "temperature": 0.0, "avg_logprob": -0.1576459248860677, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.00021342572290450335}, {"id": 161, "seek": 94224, "start": 950.8, "end": 956.88, "text": " bunch of fields and you merge steps together and a smoother learning curve for the newcomers.", "tokens": [3840, 295, 7909, 293, 291, 22183, 4439, 1214, 293, 257, 28640, 2539, 7605, 337, 264, 40014, 433, 13], "temperature": 0.0, "avg_logprob": -0.1576459248860677, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.00021342572290450335}, {"id": 162, "seek": 94224, "start": 956.88, "end": 963.36, "text": " I didn't cover performance, but also having this merging being native and not library function", "tokens": [286, 994, 380, 2060, 3389, 11, 457, 611, 1419, 341, 44559, 885, 8470, 293, 406, 6405, 2445], "temperature": 0.0, "avg_logprob": -0.1576459248860677, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.00021342572290450335}, {"id": 163, "seek": 94224, "start": 963.36, "end": 970.0, "text": " as more room for optimizations. And beyond, my secret dream is that Nickel is general", "tokens": [382, 544, 1808, 337, 5028, 14455, 13, 400, 4399, 11, 452, 4054, 3055, 307, 300, 45416, 307, 2674], "temperature": 0.0, "avg_logprob": -0.1576459248860677, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.00021342572290450335}, {"id": 164, "seek": 97000, "start": 970.0, "end": 974.4, "text": " purpose for configuration. So you could use the same language with the same notion,", "tokens": [4334, 337, 11694, 13, 407, 291, 727, 764, 264, 912, 2856, 365, 264, 912, 10710, 11], "temperature": 0.0, "avg_logprob": -0.13096833229064941, "compression_ratio": 1.7054263565891472, "no_speech_prob": 9.868187771644443e-05}, {"id": 165, "seek": 97000, "start": 974.4, "end": 979.76, "text": " same contract, same data model for all of your stack to reform Kubernetes, Knicks,", "tokens": [912, 4364, 11, 912, 1412, 2316, 337, 439, 295, 428, 8630, 281, 8290, 23145, 11, 10519, 7663, 11], "temperature": 0.0, "avg_logprob": -0.13096833229064941, "compression_ratio": 1.7054263565891472, "no_speech_prob": 9.868187771644443e-05}, {"id": 166, "seek": 97000, "start": 979.76, "end": 986.72, "text": " exchange instinct between the layer. And something we are working on is incremental", "tokens": [7742, 16556, 1296, 264, 4583, 13, 400, 746, 321, 366, 1364, 322, 307, 35759], "temperature": 0.0, "avg_logprob": -0.13096833229064941, "compression_ratio": 1.7054263565891472, "no_speech_prob": 9.868187771644443e-05}, {"id": 167, "seek": 97000, "start": 986.72, "end": 992.8, "text": " evaluation. It's a bit like incremental build, but at the level of evaluation, I have this huge", "tokens": [13344, 13, 467, 311, 257, 857, 411, 35759, 1322, 11, 457, 412, 264, 1496, 295, 13344, 11, 286, 362, 341, 2603], "temperature": 0.0, "avg_logprob": -0.13096833229064941, "compression_ratio": 1.7054263565891472, "no_speech_prob": 9.868187771644443e-05}, {"id": 168, "seek": 97000, "start": 992.8, "end": 997.04, "text": " Knicks-based configuration. I change one option. I want the interpreter to only propagate the", "tokens": [10519, 7663, 12, 6032, 11694, 13, 286, 1319, 472, 3614, 13, 286, 528, 264, 34132, 281, 787, 48256, 264], "temperature": 0.0, "avg_logprob": -0.13096833229064941, "compression_ratio": 1.7054263565891472, "no_speech_prob": 9.868187771644443e-05}, {"id": 169, "seek": 99704, "start": 997.04, "end": 1003.8399999999999, "text": " changes to what needs to be actually recomputed. So to answer the initial question,", "tokens": [2962, 281, 437, 2203, 281, 312, 767, 23334, 2582, 292, 13, 407, 281, 1867, 264, 5883, 1168, 11], "temperature": 0.0, "avg_logprob": -0.20164674425882007, "compression_ratio": 1.6512455516014235, "no_speech_prob": 0.0001292777160415426}, {"id": 170, "seek": 99704, "start": 1003.8399999999999, "end": 1008.48, "text": " Nickel, Knicks, when? Well, now you can already do this stuff. Well, next week because we haven't", "tokens": [45416, 11, 10519, 7663, 11, 562, 30, 1042, 11, 586, 291, 393, 1217, 360, 341, 1507, 13, 1042, 11, 958, 1243, 570, 321, 2378, 380], "temperature": 0.0, "avg_logprob": -0.20164674425882007, "compression_ratio": 1.6512455516014235, "no_speech_prob": 0.0001292777160415426}, {"id": 171, "seek": 99704, "start": 1008.48, "end": 1013.04, "text": " merged everything. But Knicks-L will be releasing the 0.1. You could do derivation and basic", "tokens": [36427, 1203, 13, 583, 10519, 7663, 12, 43, 486, 312, 16327, 264, 1958, 13, 16, 13, 509, 727, 360, 10151, 399, 293, 3875], "temperature": 0.0, "avg_logprob": -0.20164674425882007, "compression_ratio": 1.6512455516014235, "no_speech_prob": 0.0001292777160415426}, {"id": 172, "seek": 99704, "start": 1013.04, "end": 1020.0799999999999, "text": " Dev shells. Knicks-L will be itself will be reaching 1.0 in the coming months. And it's still", "tokens": [9096, 22523, 13, 10519, 7663, 12, 43, 486, 312, 2564, 486, 312, 9906, 502, 13, 15, 294, 264, 1348, 2493, 13, 400, 309, 311, 920], "temperature": 0.0, "avg_logprob": -0.20164674425882007, "compression_ratio": 1.6512455516014235, "no_speech_prob": 0.0001292777160415426}, {"id": 173, "seek": 99704, "start": 1020.0799999999999, "end": 1024.8799999999999, "text": " rough around the edge. You can't do everything you would like to do in Knicks. But the point is", "tokens": [5903, 926, 264, 4691, 13, 509, 393, 380, 360, 1203, 291, 576, 411, 281, 360, 294, 10519, 7663, 13, 583, 264, 935, 307], "temperature": 0.0, "avg_logprob": -0.20164674425882007, "compression_ratio": 1.6512455516014235, "no_speech_prob": 0.0001292777160415426}, {"id": 174, "seek": 102488, "start": 1024.88, "end": 1030.96, "text": " that I think we did the hardest. Like arriving at the first derivation was really complex.", "tokens": [300, 286, 519, 321, 630, 264, 13158, 13, 1743, 22436, 412, 264, 700, 10151, 399, 390, 534, 3997, 13], "temperature": 0.0, "avg_logprob": -0.18826408684253693, "compression_ratio": 1.456140350877193, "no_speech_prob": 0.0002600376901682466}, {"id": 175, "seek": 102488, "start": 1030.96, "end": 1035.68, "text": " And now everything is aligned. And somehow we just have to build the same to polish the API", "tokens": [400, 586, 1203, 307, 17962, 13, 400, 6063, 321, 445, 362, 281, 1322, 264, 912, 281, 20452, 264, 9362], "temperature": 0.0, "avg_logprob": -0.18826408684253693, "compression_ratio": 1.456140350877193, "no_speech_prob": 0.0002600376901682466}, {"id": 176, "seek": 102488, "start": 1035.68, "end": 1039.0400000000002, "text": " and so on. And there is the same for Terraform, Nickel. Thank you.", "tokens": [293, 370, 322, 13, 400, 456, 307, 264, 912, 337, 25366, 837, 11, 45416, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.18826408684253693, "compression_ratio": 1.456140350877193, "no_speech_prob": 0.0002600376901682466}, {"id": 177, "seek": 103904, "start": 1039.04, "end": 1055.52, "text": " Before that, I would like to know if Rodrigo at Paul is in the room. Okay, you're here. Okay, great. We have one question I think we can take maybe to you. Yes.", "tokens": [4546, 300, 11, 286, 576, 411, 281, 458, 498, 25904, 78, 412, 4552, 307, 294, 264, 1808, 13, 1033, 11, 291, 434, 510, 13, 1033, 11, 869, 13, 492, 362, 472, 1168, 286, 519, 321, 393, 747, 1310, 281, 291, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.3437565742655003, "compression_ratio": 1.25, "no_speech_prob": 0.0017244018381461501}, {"id": 178, "seek": 105552, "start": 1055.52, "end": 1083.52, "text": " So did I understand and write yet that you are transpiling between Knicks and Nickel? So not yet. But that's okay. Sorry, did you finish your question or? Yes. So I'm asked if we are transpiling Knicks to Nickel. Right now, no, we are doing this back and forth with Knicks and Jason and so on. But that's the plan in the end. To transpile Knicks. You could import food at Knicks from Nickel and that would give you an idea of what's going on.", "tokens": [407, 630, 286, 1223, 293, 2464, 1939, 300, 291, 366, 7132, 4883, 1296, 10519, 7663, 293, 45416, 30, 407, 406, 1939, 13, 583, 300, 311, 1392, 13, 4919, 11, 630, 291, 2413, 428, 1168, 420, 30, 1079, 13, 407, 286, 478, 2351, 498, 321, 366, 7132, 4883, 10519, 7663, 281, 45416, 13, 1779, 586, 11, 572, 11, 321, 366, 884, 341, 646, 293, 5220, 365, 10519, 7663, 293, 11181, 293, 370, 322, 13, 583, 300, 311, 264, 1393, 294, 264, 917, 13, 1407, 7132, 794, 10519, 7663, 13, 509, 727, 974, 1755, 412, 10519, 7663, 490, 45416, 293, 300, 576, 976, 291, 364, 1558, 295, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.3279143550939727, "compression_ratio": 1.7265625, "no_speech_prob": 0.0012592023704200983}, {"id": 179, "seek": 108352, "start": 1083.52, "end": 1108.56, "text": " Food at Knicks from Nickel and that would give you a Nickel value and then you can do whatever you want with it. Yes. Yes, so you mentioned. Yeah. So I've used Terraform Knicks before. Could you just use that? Yeah, yeah, it's true. I guess you could.", "tokens": [11675, 412, 10519, 7663, 490, 45416, 293, 300, 576, 976, 291, 257, 45416, 2158, 293, 550, 291, 393, 360, 2035, 291, 528, 365, 309, 13, 1079, 13, 1079, 11, 370, 291, 2835, 13, 865, 13, 407, 286, 600, 1143, 25366, 837, 10519, 7663, 949, 13, 7497, 291, 445, 764, 300, 30, 865, 11, 1338, 11, 309, 311, 2074, 13, 286, 2041, 291, 727, 13], "temperature": 0.0, "avg_logprob": -0.3036816260393928, "compression_ratio": 1.485207100591716, "no_speech_prob": 0.0004942575469613075}, {"id": 180, "seek": 110856, "start": 1108.56, "end": 1131.44, "text": " But probably the idea here is to reuse the Nickel overriding mechanism, which is, we hope, way simpler. Somehow you don't have to do anything to get your things to be overriding easily. So if I think Terraform Knicks is not using a module like system. Yeah. And there is Terra Knicks maybe that is doing that. I don't remember. Yes.", "tokens": [583, 1391, 264, 1558, 510, 307, 281, 26225, 264, 45416, 670, 81, 2819, 7513, 11, 597, 307, 11, 321, 1454, 11, 636, 18587, 13, 28357, 291, 500, 380, 362, 281, 360, 1340, 281, 483, 428, 721, 281, 312, 670, 81, 2819, 3612, 13, 407, 498, 286, 519, 25366, 837, 10519, 7663, 307, 406, 1228, 257, 10088, 411, 1185, 13, 865, 13, 400, 456, 307, 25366, 10519, 7663, 1310, 300, 307, 884, 300, 13, 286, 500, 380, 1604, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.23815647761027017, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.00027271773433312774}, {"id": 181, "seek": 113144, "start": 1131.44, "end": 1145.44, "text": " But yeah, you could do that. Actually, you could wrap any Knicks package with a Nickel interface somehow like a FFI or you could redo it a bit to have a more both are possible. I guess. One more round of applause, please.", "tokens": [50364, 583, 1338, 11, 291, 727, 360, 300, 13, 5135, 11, 291, 727, 7019, 604, 10519, 7663, 7372, 365, 257, 45416, 9226, 6063, 411, 257, 479, 38568, 420, 291, 727, 29956, 309, 257, 857, 281, 362, 257, 544, 1293, 366, 1944, 13, 286, 2041, 13, 1485, 544, 3098, 295, 9969, 11, 1767, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22430936639959162, "compression_ratio": 1.3987341772151898, "no_speech_prob": 0.0005849472945556045}], "language": "en"}