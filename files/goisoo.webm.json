{"text": " Okay, thank you. We have to stay on our schedule. So our next speaker, Rona, she stood here three years ago, but before the pandemic was a thing, and she gave us a challenge to solve the go diversity problem within a year. Rona, is it solved? As far as I can tell, yes. Well done. Well done. No, no. So actually, Marty has stole this from me because, yeah, three years ago, I did challenge this forum to solve the problem of lack of diversity within the Go community within a year. And then the pandemic hit and it seems that these issues kind of took aside, were pushed aside, unfortunately. But we can start again. So I'm here to talk to you today about a lighter topic is Go object oriented. Now, it appears to be something that people have many opinions about. And I hope that you do too because that will be fun. So I am Rona. I am a Google developer expert for Go. I create workshops. That's kind of like my thing when I want to teach something. I make a workshop about it. And in 2022, I kind of realized that after a few years of seeing developers struggling with different paradigms around the Go typing system, specifically with interfaces, I figured why not create a workshop about it. And I submitted it to Go for Con Europe. It was the name of the Go workshop was object oriented design with Go. And then the comments started coming. So something between object oriented is dead. Somebody posted a comment on my tweet and then blocked me. Because apparently that's how the internet works. So, yeah, and somebody blamed me for introducing Spring into Go. Now, I have been a developer for 20 years, but I have not done any Spring in my life. And that is such a specific accusation. I was fairly surprised. So I am not here to promote my workshop, even though I am giving it again this year in Berlin in June, because that will be bad. So what is object oriented programming? So it's the idea of separating software into things or objects or concerns or instances and adding some functionality to them usually called messages or methods or member functions. So that we can work with software in a more intuitive way, the way that we understand how we interact with the real world. That's it. Now, where there are things, it can get incredibly messy. That's the business model behind Marie Kondo. Yeah. I felt the sigh. You don't have 14 items maximum in your house. You're not alone. And we have this lovely quote from Joe Armstrong. The problem with object oriented languages is that they've got all of this implicit environment that they carry with them. You wanted a banana, but what you got was a gorilla holding a banana and the entire jungle. And that feels like it does. It really does. So gone really went a different way. It tried to sort of stay away from this. But we will see what remained and what actually remained from this and what actually we were able to let go of in a second. So we're going to hold a trial where we're going to check. You're going to be the jury. You're going to decide if Go is object oriented. I'm going to try and convince you. I'm going to show you the arguments for both sides. And I'm going to have to convince you that it is object oriented or I am responsible for defamation. I am taking the goes good name and dragging it through the mud, tarnishing it, hurting its reputation. You're the jury. You will decide. So disclaimer, this is not a real trial. But and I'm the judge and the rules are what I say they are, which is to say that these proceedings are going to be ridiculous. But yeah, we're just going to have to do it. So what have we come to expect from an object oriented language? Most of you know this by heart, really. We have classes because classes and only classes can have methods. Classes can also have these constructors. Classes are created, allowed to create objects safely. And we also expect inheritance. Objection. So in go, we don't have classes. And therefore we don't have constructors. But we pretend to have them. So here's where we pretend to have something. Now this one is quite fun. So this is a package that I created. And you can see here that inside type robot, the Godoc aggregated nicely, a function called new. Now you can see that it doesn't actually have a receiver. It's not a method. It's not anything. And it's just a package level function that the Godoc understood to be a constructor. And then he added it where it should be nicely nested inside the robot type. Which is really interesting because what that means was that the Go team essentially decided at some point that safe construction of objects is a tooling problem, not a language problem. It's interesting. We work with constructors. Okay. All types can have methods. So you've probably seen this or code similar to this at some point in your life. So I created a new type my thing out of an integer. So we have a new type with an underlying type int. I added a method foo to it using the receiver. Just remember that we said earlier that we have objects interacting through messages. It's called a receiver because it perceives. It's that easy. Come on. All together. Nobody agrees? What's going on? Yeah, okay. Pathetic. I said I was going to judge. All right. And then we have, so now we created a variable t of type my thing. We assigned it one. And then we're able to call a method on t foo. Voila. We have a primitive type and it has a method. Because in Go, all types are created equal. Thank you. Okay. So let's move on to inheritance. So we get in Go. We get composition. We don't get inheritance. That's not something that's available to us. So this little snippet here is supposed to show the difference. I created a type a. It's an empty struct. I added a method foo to it. It has a method bar. foo calls bar. That's nice. Returns bar. We have type p that embeds a. It can embed as many, as many as many as many types as it wants. It embeds a. That means that now it has foo and bar. And then it decided to override bar. Fine. Variable b of b lowercase b of type uppercase b. To be confusing. Not to be confused. Okay. Get it. And we can call b.bar. And we expect b.bar to be invoked directly. And then we call b.foo. Now, with inheritance, we would expect b.foo, which returns a.bar, which is overridden, to be called. So we would expect to get b in both cases. But that's not what's going to happen. Because we do not have this type of polymorphism. That is true. Who was it that said it earlier? Raise your hands. Round of applause to the gentleman. Okay. Moving on. So let's talk about single and multiple inheritance because this really bugs me. So I started my career with seven years of C++. And yes, it sounds biblical because it is. Thank you. Yeah. So I started with seven years of C++. C++ actually has a really nifty feature. You can inherit a lot. You have multiple inheritance. It's not limited. Java, Ruby, they allow you to inherit exactly once. That to me does not feel like a feature. That feels like a limitation. I don't understand it. Let's say that you have a truck and you want to describe a container of goods and a vehicle. You cannot inherit from both. What do you do? Well, in Go we have composition. But in many, many languages that offer inheritance, you only get single inheritance. Now, I will say this. If you feel, and I know that a lot of people do, if you feel that inheritance is that important, it just doesn't make sense that it will be so limited a feature that you will not be able to use properly or fully. And I do believe also that that is the cause of all the messy code that we see because the classes that I used to define were very small were one function, two functions. I didn't have to make odd choices of what is going to go into a class or what wouldn't. So it was really easy to be very expressive. So that's what I personally, my personal opinion is about single and multiple inheritance. I don't feel in most common languages, since it's usually single inheritance, I don't feel that it makes it something that is going to determine whether a language is or isn't object oriented. Because if it is, then as far as I'm concerned, single, any language that has single inheritance cannot be object oriented. So Go is not object oriented. The usual argument summary, and I'm going to, like, you have to understand that I'm aggregating here everything that was said to me over the internet, which is a great source of information and also a great source of information. So Go is simple, object oriented programming isn't, therefore Go is not object oriented. Go doesn't have classes, so Go cannot be object oriented. It doesn't have inheritance, so it's not object oriented. And lastly, and this one is a great argument, we're going to dive into that one. Objects are not really messages, so Go is not object oriented. Now, this one is fun. So this comes from the Alan Kay School. So all the fans of Alan Kay have jumped in to let me know everything about the history of object oriented. So here's what I've got. One person said, technically they aren't methods, so he's referring to method receivers. They aren't methods on type T, they are functions where the first argument is type is the type. The promotion to them as methods is syntactic sugar. It's why you can call, now look at this, this is amazing. V.foo with bar or T, call the type, invoke a method on the type, and provide V as a parameter. And it's true. Show you what it looks like. So same code as before, we have a empty struct. We have method foo that we added to A. Quiet in the court. We have method foo that we added to type A, which is nice. And we can invoke it using two ways. One is clearly less common than the other. So this is the common way. Or we can invoke it on the type and pass in lowercase a as a parameter. You have the screen? That's why, by the way, a pointer receiver can be nil. So I have this game. I play this game all the time with people who are new to go and I ask them what's going to happen. So we are able to create methods with pointer receivers. So I add foo and make the receiver a pointer. I create variable a, which is a pointer to uppercase a. It's zero value is nil. And I invoke a.foo. And then I ask people what will happen. Now, we're not going to be able to do this quiz here because we are late on time and we have to make up some time. So I'm just going to run this. So high from foo is actually returned by foo, which means that we are able to invoke a method on a nil pointer. It's possible because there is no receiver. There is no actual receiver. Most of the time when we call a method in other languages, what happens is that we have to go and go through some reference that's somewhere in the address space of the variable itself. This tells us that it's not where the method is at all. It's not where it's defined. It's not where the runtime looks for it. It's just not. So my co-organizer, my women who go co-organize it, Jessica Green saw this and said, ah, so there is no spoon, which I thought was amazing because this is kind of a design thing, right? So everything is in our minds. Really everything is in our minds. We sort of, you know, we have these philosophical ideas and then we put them into code. If there is anybody who actually thinks that the gopher that you saw, the gopher that you saw on the screen in the maze, there is an actual gopher out there doing this, let me know. I want to hang out. So where do receivers come from? So listen to this because this is very interesting. Going to the Go team, the Inspiration 2 method receivers came from Oberon 2, which is the object-oriented version of Oberon. Okay? And they're called receivers because they receive messages, except there is no receiver. So everybody's right. Another thing that the same person brought up, which is really cool, he said, well, I forgot to say who Alan Kay was. What's wrong with me? Alan Kay is the creator of Smalltalk and also is considered to be the person who coined the term object-oriented. So he's supposedly supposed to know stuff about it. So that's why people quote him and that's fine. It's totally fine. And he has a lot of opinions, which is also great. We encourage opinions. So what a person said to me, so in Smalltalk, you don't need to explicitly declare that an object can have a specific message. You send it a message and then it decides whether to handle it. So duck typing. Now, this is really interesting. Can we do this in Go? Can we check if a certain value, if it can handle a certain message or has, in layman's terms, has certain methods? Well, the answer is yes through the magic of interface conversion. So again, we type a, we added function foo. It doesn't do much. We don't actually care what it does. And we created interface i, uppercase i. And this interface has one function, defines one function foo that returns a string. And a coincidentally or pointer to a coincidentally also has foo, which is a string. Now, this is where Go completely differently than other languages. In Go, interfaces are implicit. In most languages, if you have, let's say, class A and you wanted to implement interface i, you have to, at the time of creating that class, you have to say something like class A implements i. That means that you cannot have a type that is not aware, has no idea that an implements, that a certain interface exists and will implement it. Not unless, not unless, that's why a lot of people move to scripting languages, because that allows them to pick some code from the internet and use it. You know, just use it unless of what's going on. And Go allows you to actually download some random code from the internet and plug it in using your own interfaces. It's very strange. It's very unique. So with that in mind, if you have implicit interfaces, it makes sense to be able to try and be able to ask whether a type implements an interface, because maybe it does. In other languages, it just doesn't make sense, because the answer will be no. Right? Right. Okay. So therefore, we use interface conversion. Now, this is the syntax. What you need to understand from this expression is that if everything was fine, then Val will have a type, will have B, which is, which it points to A. And with the interface of i, inside the interface of i, Val will have all of that and will be able to invoke foo, which is this one, which is exactly what's going to happen. And this is how stringers work. Now, we said that small talk, we said that, we said that small talk was created by Alan Kay and he coined object-oriented. Well, actually, he created small talk with explicit, explicitly with his ideas of what object-oriented is supposed to be. And it's important, because according to Robert Grisimer, who is one of the creators of the Go programming language, this is what, small talk was actually the inspiration for this kind of interface conversion, so that at runtime, we can actually check if a type has certain methods. And Russ Cox compared it to duck typing. And by the way, this is a really, really nice read. So if you just Google Russ Cox duck typing, you will find it. It is a really nice read. He explains how the runtime does it and also how the caching works, because obviously you cannot compute well, compile time, you cannot compute every type against all the interfaces in the world. It's really, really nice. And finally, we have a surprise witness. Martier is going to be the proxy of said surprise witness. Do you have your? I am here. So before I introduce our witness, I am going to ask the witness, do you remember, given an interview in 2010, to Danny Kalev? I don't recall. Well it's on the internet, so it must be true. It's true. I submit into evidence a web page. Exhibit 90210. So please read a portion of the text from the web page in your own voice. Go is an object oriented, even though it doesn't have the notion of a class, the type system is more general. Any type, even basic types such as integers and strings, can have minutes. Thank you very much. So what makes you such an expert to be able to say such, to make some such claims? I co-created the language. You created the language. What is your name? Rob Pike. Thank you, Rob. New glasses? Yeah, new dress. When they made it. Thank you very much. Thank you, Martia. So yes, Rob Pike actually said that in 2010. I don't know if he actually changed his mind since. But the truth is that I feel that at this point it is clearly a matter of opinion. So I would like to know yours since you are the jury. Voting is now open. So the verdict. It's verdict time. I hope it's now open. Yeah, it is. The co-team is not permitted to answer. I believe one of my members asked the co-team last year if go is object oriented. That's a dare. I am going to give you 35 more seconds because we have to wrap it up. Am I correct? You already see 105 judgments. 108. Oh, no. I created a bunch of bots. All right. So I have to close this. Unfortunately, let's find out what you said. That's interesting. Why can't I see the results? Yeah, I don't know what happened. Let's do this. That's what I did. Wow. Okay. So I am going to cancel these proceedings because clearly you're out of your minds. As the judge, I condemn myself to providing you with stickers, lots and lots and lots of stickers. Iris, Rona, thank you very much. I have to get off. Thank you. If you have a sticker, you have also have to give her one if she convinced you. Again, housekeeping announcement, if you submitted lightning talk, check your mail, matrix, discord, WhatsApp, whatever you sent to me, I'll try to contact you if you got accepted. If you aren't sure, our master on account has contacted me on Twitter.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.72, "text": " Okay, thank you. We have to stay on our schedule. So our next speaker, Rona, she stood here", "tokens": [1033, 11, 1309, 291, 13, 492, 362, 281, 1754, 322, 527, 7567, 13, 407, 527, 958, 8145, 11, 497, 4037, 11, 750, 9371, 510], "temperature": 0.0, "avg_logprob": -0.28278826243841826, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.6494331359863281}, {"id": 1, "seek": 0, "start": 15.72, "end": 21.16, "text": " three years ago, but before the pandemic was a thing, and she gave us a challenge to solve", "tokens": [1045, 924, 2057, 11, 457, 949, 264, 5388, 390, 257, 551, 11, 293, 750, 2729, 505, 257, 3430, 281, 5039], "temperature": 0.0, "avg_logprob": -0.28278826243841826, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.6494331359863281}, {"id": 2, "seek": 0, "start": 21.16, "end": 24.68, "text": " the go diversity problem within a year. Rona, is it solved?", "tokens": [264, 352, 8811, 1154, 1951, 257, 1064, 13, 497, 4037, 11, 307, 309, 13041, 30], "temperature": 0.0, "avg_logprob": -0.28278826243841826, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.6494331359863281}, {"id": 3, "seek": 2468, "start": 24.68, "end": 36.56, "text": " As far as I can tell, yes. Well done. Well done. No, no. So actually, Marty has stole", "tokens": [1018, 1400, 382, 286, 393, 980, 11, 2086, 13, 1042, 1096, 13, 1042, 1096, 13, 883, 11, 572, 13, 407, 767, 11, 29192, 575, 16326], "temperature": 0.0, "avg_logprob": -0.22782083968041647, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.00028113159351050854}, {"id": 4, "seek": 2468, "start": 36.56, "end": 41.56, "text": " this from me because, yeah, three years ago, I did challenge this forum to solve the problem", "tokens": [341, 490, 385, 570, 11, 1338, 11, 1045, 924, 2057, 11, 286, 630, 3430, 341, 17542, 281, 5039, 264, 1154], "temperature": 0.0, "avg_logprob": -0.22782083968041647, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.00028113159351050854}, {"id": 5, "seek": 2468, "start": 41.56, "end": 49.6, "text": " of lack of diversity within the Go community within a year. And then the pandemic hit and", "tokens": [295, 5011, 295, 8811, 1951, 264, 1037, 1768, 1951, 257, 1064, 13, 400, 550, 264, 5388, 2045, 293], "temperature": 0.0, "avg_logprob": -0.22782083968041647, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.00028113159351050854}, {"id": 6, "seek": 4960, "start": 49.6, "end": 59.6, "text": " it seems that these issues kind of took aside, were pushed aside, unfortunately. But we can", "tokens": [309, 2544, 300, 613, 2663, 733, 295, 1890, 7359, 11, 645, 9152, 7359, 11, 7015, 13, 583, 321, 393], "temperature": 0.0, "avg_logprob": -0.16935633168076025, "compression_ratio": 1.4331550802139037, "no_speech_prob": 7.664188160561025e-05}, {"id": 7, "seek": 4960, "start": 59.6, "end": 67.8, "text": " start again. So I'm here to talk to you today about a lighter topic is Go object oriented.", "tokens": [722, 797, 13, 407, 286, 478, 510, 281, 751, 281, 291, 965, 466, 257, 11546, 4829, 307, 1037, 2657, 21841, 13], "temperature": 0.0, "avg_logprob": -0.16935633168076025, "compression_ratio": 1.4331550802139037, "no_speech_prob": 7.664188160561025e-05}, {"id": 8, "seek": 4960, "start": 67.8, "end": 73.92, "text": " Now, it appears to be something that people have many opinions about. And I hope that", "tokens": [823, 11, 309, 7038, 281, 312, 746, 300, 561, 362, 867, 11819, 466, 13, 400, 286, 1454, 300], "temperature": 0.0, "avg_logprob": -0.16935633168076025, "compression_ratio": 1.4331550802139037, "no_speech_prob": 7.664188160561025e-05}, {"id": 9, "seek": 7392, "start": 73.92, "end": 82.48, "text": " you do too because that will be fun. So I am Rona. I am a Google developer expert for Go.", "tokens": [291, 360, 886, 570, 300, 486, 312, 1019, 13, 407, 286, 669, 497, 4037, 13, 286, 669, 257, 3329, 10754, 5844, 337, 1037, 13], "temperature": 0.0, "avg_logprob": -0.15063947981054132, "compression_ratio": 1.5107296137339057, "no_speech_prob": 4.964319305145182e-05}, {"id": 10, "seek": 7392, "start": 82.48, "end": 87.48, "text": " I create workshops. That's kind of like my thing when I want to teach something. I make", "tokens": [286, 1884, 19162, 13, 663, 311, 733, 295, 411, 452, 551, 562, 286, 528, 281, 2924, 746, 13, 286, 652], "temperature": 0.0, "avg_logprob": -0.15063947981054132, "compression_ratio": 1.5107296137339057, "no_speech_prob": 4.964319305145182e-05}, {"id": 11, "seek": 7392, "start": 87.48, "end": 95.76, "text": " a workshop about it. And in 2022, I kind of realized that after a few years of seeing", "tokens": [257, 13541, 466, 309, 13, 400, 294, 20229, 11, 286, 733, 295, 5334, 300, 934, 257, 1326, 924, 295, 2577], "temperature": 0.0, "avg_logprob": -0.15063947981054132, "compression_ratio": 1.5107296137339057, "no_speech_prob": 4.964319305145182e-05}, {"id": 12, "seek": 7392, "start": 95.76, "end": 103.0, "text": " developers struggling with different paradigms around the Go typing system, specifically", "tokens": [8849, 9314, 365, 819, 13480, 328, 2592, 926, 264, 1037, 18444, 1185, 11, 4682], "temperature": 0.0, "avg_logprob": -0.15063947981054132, "compression_ratio": 1.5107296137339057, "no_speech_prob": 4.964319305145182e-05}, {"id": 13, "seek": 10300, "start": 103.0, "end": 107.8, "text": " with interfaces, I figured why not create a workshop about it. And I submitted it to", "tokens": [365, 28416, 11, 286, 8932, 983, 406, 1884, 257, 13541, 466, 309, 13, 400, 286, 14405, 309, 281], "temperature": 0.0, "avg_logprob": -0.19347295604768347, "compression_ratio": 1.5087719298245614, "no_speech_prob": 2.8703645511996e-05}, {"id": 14, "seek": 10300, "start": 107.8, "end": 116.12, "text": " Go for Con Europe. It was the name of the Go workshop was object oriented design with", "tokens": [1037, 337, 2656, 3315, 13, 467, 390, 264, 1315, 295, 264, 1037, 13541, 390, 2657, 21841, 1715, 365], "temperature": 0.0, "avg_logprob": -0.19347295604768347, "compression_ratio": 1.5087719298245614, "no_speech_prob": 2.8703645511996e-05}, {"id": 15, "seek": 10300, "start": 116.12, "end": 127.03999999999999, "text": " Go. And then the comments started coming. So something between object oriented is dead.", "tokens": [1037, 13, 400, 550, 264, 3053, 1409, 1348, 13, 407, 746, 1296, 2657, 21841, 307, 3116, 13], "temperature": 0.0, "avg_logprob": -0.19347295604768347, "compression_ratio": 1.5087719298245614, "no_speech_prob": 2.8703645511996e-05}, {"id": 16, "seek": 12704, "start": 127.04, "end": 140.08, "text": " Somebody posted a comment on my tweet and then blocked me. Because apparently that's", "tokens": [13463, 9437, 257, 2871, 322, 452, 15258, 293, 550, 15470, 385, 13, 1436, 7970, 300, 311], "temperature": 0.0, "avg_logprob": -0.22652087578406702, "compression_ratio": 1.4388888888888889, "no_speech_prob": 4.601390173775144e-05}, {"id": 17, "seek": 12704, "start": 140.08, "end": 149.36, "text": " how the internet works. So, yeah, and somebody blamed me for introducing Spring into Go.", "tokens": [577, 264, 4705, 1985, 13, 407, 11, 1338, 11, 293, 2618, 32027, 385, 337, 15424, 14013, 666, 1037, 13], "temperature": 0.0, "avg_logprob": -0.22652087578406702, "compression_ratio": 1.4388888888888889, "no_speech_prob": 4.601390173775144e-05}, {"id": 18, "seek": 12704, "start": 149.36, "end": 155.32, "text": " Now, I have been a developer for 20 years, but I have not done any Spring in my life.", "tokens": [823, 11, 286, 362, 668, 257, 10754, 337, 945, 924, 11, 457, 286, 362, 406, 1096, 604, 14013, 294, 452, 993, 13], "temperature": 0.0, "avg_logprob": -0.22652087578406702, "compression_ratio": 1.4388888888888889, "no_speech_prob": 4.601390173775144e-05}, {"id": 19, "seek": 15532, "start": 155.32, "end": 166.12, "text": " And that is such a specific accusation. I was fairly surprised. So I am not here to promote", "tokens": [400, 300, 307, 1270, 257, 2685, 11168, 399, 13, 286, 390, 6457, 6100, 13, 407, 286, 669, 406, 510, 281, 9773], "temperature": 0.0, "avg_logprob": -0.19872194347959576, "compression_ratio": 1.413978494623656, "no_speech_prob": 4.520844595390372e-05}, {"id": 20, "seek": 15532, "start": 166.12, "end": 174.16, "text": " my workshop, even though I am giving it again this year in Berlin in June, because that", "tokens": [452, 13541, 11, 754, 1673, 286, 669, 2902, 309, 797, 341, 1064, 294, 13848, 294, 6928, 11, 570, 300], "temperature": 0.0, "avg_logprob": -0.19872194347959576, "compression_ratio": 1.413978494623656, "no_speech_prob": 4.520844595390372e-05}, {"id": 21, "seek": 15532, "start": 174.16, "end": 184.32, "text": " will be bad. So what is object oriented programming? So it's the idea of separating", "tokens": [486, 312, 1578, 13, 407, 437, 307, 2657, 21841, 9410, 30, 407, 309, 311, 264, 1558, 295, 29279], "temperature": 0.0, "avg_logprob": -0.19872194347959576, "compression_ratio": 1.413978494623656, "no_speech_prob": 4.520844595390372e-05}, {"id": 22, "seek": 18432, "start": 184.32, "end": 191.72, "text": " software into things or objects or concerns or instances and adding some functionality", "tokens": [4722, 666, 721, 420, 6565, 420, 7389, 420, 14519, 293, 5127, 512, 14980], "temperature": 0.0, "avg_logprob": -0.1642801912525032, "compression_ratio": 1.6859903381642511, "no_speech_prob": 6.909004878252745e-05}, {"id": 23, "seek": 18432, "start": 191.72, "end": 200.28, "text": " to them usually called messages or methods or member functions. So that we can work", "tokens": [281, 552, 2673, 1219, 7897, 420, 7150, 420, 4006, 6828, 13, 407, 300, 321, 393, 589], "temperature": 0.0, "avg_logprob": -0.1642801912525032, "compression_ratio": 1.6859903381642511, "no_speech_prob": 6.909004878252745e-05}, {"id": 24, "seek": 18432, "start": 200.28, "end": 205.07999999999998, "text": " with software in a more intuitive way, the way that we understand how we interact with", "tokens": [365, 4722, 294, 257, 544, 21769, 636, 11, 264, 636, 300, 321, 1223, 577, 321, 4648, 365], "temperature": 0.0, "avg_logprob": -0.1642801912525032, "compression_ratio": 1.6859903381642511, "no_speech_prob": 6.909004878252745e-05}, {"id": 25, "seek": 18432, "start": 205.07999999999998, "end": 214.16, "text": " the real world. That's it. Now, where there are things, it can get incredibly messy. That's", "tokens": [264, 957, 1002, 13, 663, 311, 309, 13, 823, 11, 689, 456, 366, 721, 11, 309, 393, 483, 6252, 16191, 13, 663, 311], "temperature": 0.0, "avg_logprob": -0.1642801912525032, "compression_ratio": 1.6859903381642511, "no_speech_prob": 6.909004878252745e-05}, {"id": 26, "seek": 21416, "start": 214.16, "end": 223.8, "text": " the business model behind Marie Kondo. Yeah. I felt the sigh. You don't have 14 items maximum", "tokens": [264, 1606, 2316, 2261, 15130, 591, 27720, 13, 865, 13, 286, 2762, 264, 29472, 13, 509, 500, 380, 362, 3499, 4754, 6674], "temperature": 0.0, "avg_logprob": -0.18340257497934195, "compression_ratio": 1.402061855670103, "no_speech_prob": 0.00013681076234206557}, {"id": 27, "seek": 21416, "start": 223.8, "end": 233.88, "text": " in your house. You're not alone. And we have this lovely quote from Joe Armstrong. The", "tokens": [294, 428, 1782, 13, 509, 434, 406, 3312, 13, 400, 321, 362, 341, 7496, 6513, 490, 6807, 36100, 13, 440], "temperature": 0.0, "avg_logprob": -0.18340257497934195, "compression_ratio": 1.402061855670103, "no_speech_prob": 0.00013681076234206557}, {"id": 28, "seek": 21416, "start": 233.88, "end": 239.04, "text": " problem with object oriented languages is that they've got all of this implicit environment", "tokens": [1154, 365, 2657, 21841, 8650, 307, 300, 436, 600, 658, 439, 295, 341, 26947, 2823], "temperature": 0.0, "avg_logprob": -0.18340257497934195, "compression_ratio": 1.402061855670103, "no_speech_prob": 0.00013681076234206557}, {"id": 29, "seek": 23904, "start": 239.04, "end": 244.32, "text": " that they carry with them. You wanted a banana, but what you got was a gorilla holding a banana", "tokens": [300, 436, 3985, 365, 552, 13, 509, 1415, 257, 14194, 11, 457, 437, 291, 658, 390, 257, 45066, 5061, 257, 14194], "temperature": 0.0, "avg_logprob": -0.1686896448550017, "compression_ratio": 1.5139664804469273, "no_speech_prob": 0.000214537198189646}, {"id": 30, "seek": 23904, "start": 244.32, "end": 255.48, "text": " and the entire jungle. And that feels like it does. It really does. So gone really went", "tokens": [293, 264, 2302, 18228, 13, 400, 300, 3417, 411, 309, 775, 13, 467, 534, 775, 13, 407, 2780, 534, 1437], "temperature": 0.0, "avg_logprob": -0.1686896448550017, "compression_ratio": 1.5139664804469273, "no_speech_prob": 0.000214537198189646}, {"id": 31, "seek": 23904, "start": 255.48, "end": 262.08, "text": " a different way. It tried to sort of stay away from this. But we will see what remained", "tokens": [257, 819, 636, 13, 467, 3031, 281, 1333, 295, 1754, 1314, 490, 341, 13, 583, 321, 486, 536, 437, 12780], "temperature": 0.0, "avg_logprob": -0.1686896448550017, "compression_ratio": 1.5139664804469273, "no_speech_prob": 0.000214537198189646}, {"id": 32, "seek": 26208, "start": 262.08, "end": 269.68, "text": " and what actually remained from this and what actually we were able to let go of in a second.", "tokens": [293, 437, 767, 12780, 490, 341, 293, 437, 767, 321, 645, 1075, 281, 718, 352, 295, 294, 257, 1150, 13], "temperature": 0.0, "avg_logprob": -0.1316278758801912, "compression_ratio": 1.836734693877551, "no_speech_prob": 1.7759726688382216e-05}, {"id": 33, "seek": 26208, "start": 269.68, "end": 274.03999999999996, "text": " So we're going to hold a trial where we're going to check. You're going to be the jury.", "tokens": [407, 321, 434, 516, 281, 1797, 257, 7308, 689, 321, 434, 516, 281, 1520, 13, 509, 434, 516, 281, 312, 264, 19516, 13], "temperature": 0.0, "avg_logprob": -0.1316278758801912, "compression_ratio": 1.836734693877551, "no_speech_prob": 1.7759726688382216e-05}, {"id": 34, "seek": 26208, "start": 274.03999999999996, "end": 278.15999999999997, "text": " You're going to decide if Go is object oriented. I'm going to try and convince you. I'm going", "tokens": [509, 434, 516, 281, 4536, 498, 1037, 307, 2657, 21841, 13, 286, 478, 516, 281, 853, 293, 13447, 291, 13, 286, 478, 516], "temperature": 0.0, "avg_logprob": -0.1316278758801912, "compression_ratio": 1.836734693877551, "no_speech_prob": 1.7759726688382216e-05}, {"id": 35, "seek": 26208, "start": 278.15999999999997, "end": 282.28, "text": " to show you the arguments for both sides. And I'm going to have to convince you that", "tokens": [281, 855, 291, 264, 12869, 337, 1293, 4881, 13, 400, 286, 478, 516, 281, 362, 281, 13447, 291, 300], "temperature": 0.0, "avg_logprob": -0.1316278758801912, "compression_ratio": 1.836734693877551, "no_speech_prob": 1.7759726688382216e-05}, {"id": 36, "seek": 28228, "start": 282.28, "end": 292.2, "text": " it is object oriented or I am responsible for defamation. I am taking the goes good name", "tokens": [309, 307, 2657, 21841, 420, 286, 669, 6250, 337, 1060, 30477, 13, 286, 669, 1940, 264, 1709, 665, 1315], "temperature": 0.0, "avg_logprob": -0.15604291643415177, "compression_ratio": 1.497175141242938, "no_speech_prob": 6.904997280798852e-05}, {"id": 37, "seek": 28228, "start": 292.2, "end": 299.71999999999997, "text": " and dragging it through the mud, tarnishing it, hurting its reputation. You're the jury.", "tokens": [293, 24385, 309, 807, 264, 8933, 11, 256, 1083, 3807, 309, 11, 17744, 1080, 13061, 13, 509, 434, 264, 19516, 13], "temperature": 0.0, "avg_logprob": -0.15604291643415177, "compression_ratio": 1.497175141242938, "no_speech_prob": 6.904997280798852e-05}, {"id": 38, "seek": 28228, "start": 299.71999999999997, "end": 308.35999999999996, "text": " You will decide. So disclaimer, this is not a real trial. But and I'm the judge and the", "tokens": [509, 486, 4536, 13, 407, 40896, 11, 341, 307, 406, 257, 957, 7308, 13, 583, 293, 286, 478, 264, 6995, 293, 264], "temperature": 0.0, "avg_logprob": -0.15604291643415177, "compression_ratio": 1.497175141242938, "no_speech_prob": 6.904997280798852e-05}, {"id": 39, "seek": 30836, "start": 308.36, "end": 312.96000000000004, "text": " rules are what I say they are, which is to say that these proceedings are going to be", "tokens": [4474, 366, 437, 286, 584, 436, 366, 11, 597, 307, 281, 584, 300, 613, 37254, 366, 516, 281, 312], "temperature": 0.0, "avg_logprob": -0.14092706550251355, "compression_ratio": 1.6181818181818182, "no_speech_prob": 6.7405060690362e-05}, {"id": 40, "seek": 30836, "start": 312.96000000000004, "end": 321.32, "text": " ridiculous. But yeah, we're just going to have to do it. So what have we come to expect", "tokens": [11083, 13, 583, 1338, 11, 321, 434, 445, 516, 281, 362, 281, 360, 309, 13, 407, 437, 362, 321, 808, 281, 2066], "temperature": 0.0, "avg_logprob": -0.14092706550251355, "compression_ratio": 1.6181818181818182, "no_speech_prob": 6.7405060690362e-05}, {"id": 41, "seek": 30836, "start": 321.32, "end": 327.08000000000004, "text": " from an object oriented language? Most of you know this by heart, really. We have classes", "tokens": [490, 364, 2657, 21841, 2856, 30, 4534, 295, 291, 458, 341, 538, 1917, 11, 534, 13, 492, 362, 5359], "temperature": 0.0, "avg_logprob": -0.14092706550251355, "compression_ratio": 1.6181818181818182, "no_speech_prob": 6.7405060690362e-05}, {"id": 42, "seek": 30836, "start": 327.08000000000004, "end": 334.16, "text": " because classes and only classes can have methods. Classes can also have these constructors.", "tokens": [570, 5359, 293, 787, 5359, 393, 362, 7150, 13, 9471, 279, 393, 611, 362, 613, 7690, 830, 13], "temperature": 0.0, "avg_logprob": -0.14092706550251355, "compression_ratio": 1.6181818181818182, "no_speech_prob": 6.7405060690362e-05}, {"id": 43, "seek": 33416, "start": 334.16, "end": 356.48, "text": " Classes are created, allowed to create objects safely. And we also expect inheritance. Objection.", "tokens": [9471, 279, 366, 2942, 11, 4350, 281, 1884, 6565, 11750, 13, 400, 321, 611, 2066, 32122, 13, 24753, 313, 13], "temperature": 0.0, "avg_logprob": -0.3173673947652181, "compression_ratio": 1.127906976744186, "no_speech_prob": 0.0001322790194535628}, {"id": 44, "seek": 35648, "start": 356.48, "end": 365.48, "text": " So in go, we don't have classes. And therefore we don't have constructors. But we pretend", "tokens": [407, 294, 352, 11, 321, 500, 380, 362, 5359, 13, 400, 4412, 321, 500, 380, 362, 7690, 830, 13, 583, 321, 11865], "temperature": 0.0, "avg_logprob": -0.1697200207000083, "compression_ratio": 1.6872037914691944, "no_speech_prob": 3.7259101191011723e-06}, {"id": 45, "seek": 35648, "start": 365.48, "end": 372.40000000000003, "text": " to have them. So here's where we pretend to have something. Now this one is quite fun.", "tokens": [281, 362, 552, 13, 407, 510, 311, 689, 321, 11865, 281, 362, 746, 13, 823, 341, 472, 307, 1596, 1019, 13], "temperature": 0.0, "avg_logprob": -0.1697200207000083, "compression_ratio": 1.6872037914691944, "no_speech_prob": 3.7259101191011723e-06}, {"id": 46, "seek": 35648, "start": 372.40000000000003, "end": 380.28000000000003, "text": " So this is a package that I created. And you can see here that inside type robot, the Godoc", "tokens": [407, 341, 307, 257, 7372, 300, 286, 2942, 13, 400, 291, 393, 536, 510, 300, 1854, 2010, 7881, 11, 264, 1265, 905], "temperature": 0.0, "avg_logprob": -0.1697200207000083, "compression_ratio": 1.6872037914691944, "no_speech_prob": 3.7259101191011723e-06}, {"id": 47, "seek": 35648, "start": 380.28000000000003, "end": 384.88, "text": " aggregated nicely, a function called new. Now you can see that it doesn't actually have", "tokens": [16743, 770, 9594, 11, 257, 2445, 1219, 777, 13, 823, 291, 393, 536, 300, 309, 1177, 380, 767, 362], "temperature": 0.0, "avg_logprob": -0.1697200207000083, "compression_ratio": 1.6872037914691944, "no_speech_prob": 3.7259101191011723e-06}, {"id": 48, "seek": 38488, "start": 384.88, "end": 391.12, "text": " a receiver. It's not a method. It's not anything. And it's just a package level function that", "tokens": [257, 20086, 13, 467, 311, 406, 257, 3170, 13, 467, 311, 406, 1340, 13, 400, 309, 311, 445, 257, 7372, 1496, 2445, 300], "temperature": 0.0, "avg_logprob": -0.13467173856847425, "compression_ratio": 1.6339285714285714, "no_speech_prob": 8.06501557235606e-05}, {"id": 49, "seek": 38488, "start": 391.12, "end": 397.15999999999997, "text": " the Godoc understood to be a constructor. And then he added it where it should be nicely", "tokens": [264, 1265, 905, 7320, 281, 312, 257, 47479, 13, 400, 550, 415, 3869, 309, 689, 309, 820, 312, 9594], "temperature": 0.0, "avg_logprob": -0.13467173856847425, "compression_ratio": 1.6339285714285714, "no_speech_prob": 8.06501557235606e-05}, {"id": 50, "seek": 38488, "start": 397.15999999999997, "end": 403.36, "text": " nested inside the robot type. Which is really interesting because what that means was that", "tokens": [15646, 292, 1854, 264, 7881, 2010, 13, 3013, 307, 534, 1880, 570, 437, 300, 1355, 390, 300], "temperature": 0.0, "avg_logprob": -0.13467173856847425, "compression_ratio": 1.6339285714285714, "no_speech_prob": 8.06501557235606e-05}, {"id": 51, "seek": 38488, "start": 403.36, "end": 409.48, "text": " the Go team essentially decided at some point that safe construction of objects is a tooling", "tokens": [264, 1037, 1469, 4476, 3047, 412, 512, 935, 300, 3273, 6435, 295, 6565, 307, 257, 46593], "temperature": 0.0, "avg_logprob": -0.13467173856847425, "compression_ratio": 1.6339285714285714, "no_speech_prob": 8.06501557235606e-05}, {"id": 52, "seek": 40948, "start": 409.48, "end": 420.92, "text": " problem, not a language problem. It's interesting. We work with constructors. Okay. All types", "tokens": [1154, 11, 406, 257, 2856, 1154, 13, 467, 311, 1880, 13, 492, 589, 365, 7690, 830, 13, 1033, 13, 1057, 3467], "temperature": 0.0, "avg_logprob": -0.1588836455009353, "compression_ratio": 1.4808743169398908, "no_speech_prob": 4.1922034142771736e-05}, {"id": 53, "seek": 40948, "start": 420.92, "end": 427.12, "text": " can have methods. So you've probably seen this or code similar to this at some point", "tokens": [393, 362, 7150, 13, 407, 291, 600, 1391, 1612, 341, 420, 3089, 2531, 281, 341, 412, 512, 935], "temperature": 0.0, "avg_logprob": -0.1588836455009353, "compression_ratio": 1.4808743169398908, "no_speech_prob": 4.1922034142771736e-05}, {"id": 54, "seek": 40948, "start": 427.12, "end": 433.8, "text": " in your life. So I created a new type my thing out of an integer. So we have a new type with", "tokens": [294, 428, 993, 13, 407, 286, 2942, 257, 777, 2010, 452, 551, 484, 295, 364, 24922, 13, 407, 321, 362, 257, 777, 2010, 365], "temperature": 0.0, "avg_logprob": -0.1588836455009353, "compression_ratio": 1.4808743169398908, "no_speech_prob": 4.1922034142771736e-05}, {"id": 55, "seek": 43380, "start": 433.8, "end": 443.08, "text": " an underlying type int. I added a method foo to it using the receiver. Just remember that", "tokens": [364, 14217, 2010, 560, 13, 286, 3869, 257, 3170, 726, 78, 281, 309, 1228, 264, 20086, 13, 1449, 1604, 300], "temperature": 0.0, "avg_logprob": -0.1763206637182901, "compression_ratio": 1.4274809160305344, "no_speech_prob": 2.6253102987539023e-05}, {"id": 56, "seek": 43380, "start": 443.08, "end": 451.6, "text": " we said earlier that we have objects interacting through messages. It's called a receiver because", "tokens": [321, 848, 3071, 300, 321, 362, 6565, 18017, 807, 7897, 13, 467, 311, 1219, 257, 20086, 570], "temperature": 0.0, "avg_logprob": -0.1763206637182901, "compression_ratio": 1.4274809160305344, "no_speech_prob": 2.6253102987539023e-05}, {"id": 57, "seek": 45160, "start": 451.6, "end": 465.64000000000004, "text": " it perceives. It's that easy. Come on. All together. Nobody agrees? What's going on?", "tokens": [309, 9016, 1539, 13, 467, 311, 300, 1858, 13, 2492, 322, 13, 1057, 1214, 13, 9297, 26383, 30, 708, 311, 516, 322, 30], "temperature": 0.0, "avg_logprob": -0.253066963619656, "compression_ratio": 1.2573529411764706, "no_speech_prob": 1.2407858775986824e-05}, {"id": 58, "seek": 45160, "start": 465.64000000000004, "end": 478.6, "text": " Yeah, okay. Pathetic. I said I was going to judge. All right. And then we have, so now", "tokens": [865, 11, 1392, 13, 21914, 3532, 13, 286, 848, 286, 390, 516, 281, 6995, 13, 1057, 558, 13, 400, 550, 321, 362, 11, 370, 586], "temperature": 0.0, "avg_logprob": -0.253066963619656, "compression_ratio": 1.2573529411764706, "no_speech_prob": 1.2407858775986824e-05}, {"id": 59, "seek": 47860, "start": 478.6, "end": 484.12, "text": " we created a variable t of type my thing. We assigned it one. And then we're able to", "tokens": [321, 2942, 257, 7006, 256, 295, 2010, 452, 551, 13, 492, 13279, 309, 472, 13, 400, 550, 321, 434, 1075, 281], "temperature": 0.0, "avg_logprob": -0.22363862284907587, "compression_ratio": 1.3533834586466165, "no_speech_prob": 8.149373024934903e-05}, {"id": 60, "seek": 47860, "start": 484.12, "end": 492.6, "text": " call a method on t foo. Voila. We have a primitive type and it has a method. Because in Go, all", "tokens": [818, 257, 3170, 322, 256, 726, 78, 13, 7518, 7371, 13, 492, 362, 257, 28540, 2010, 293, 309, 575, 257, 3170, 13, 1436, 294, 1037, 11, 439], "temperature": 0.0, "avg_logprob": -0.22363862284907587, "compression_ratio": 1.3533834586466165, "no_speech_prob": 8.149373024934903e-05}, {"id": 61, "seek": 49260, "start": 492.6, "end": 512.96, "text": " types are created equal. Thank you. Okay. So let's move on to inheritance. So we get", "tokens": [3467, 366, 2942, 2681, 13, 1044, 291, 13, 1033, 13, 407, 718, 311, 1286, 322, 281, 32122, 13, 407, 321, 483], "temperature": 0.0, "avg_logprob": -0.1623207132021586, "compression_ratio": 1.37984496124031, "no_speech_prob": 2.4951323212007992e-05}, {"id": 62, "seek": 49260, "start": 512.96, "end": 519.9200000000001, "text": " in Go. We get composition. We don't get inheritance. That's not something that's available to", "tokens": [294, 1037, 13, 492, 483, 12686, 13, 492, 500, 380, 483, 32122, 13, 663, 311, 406, 746, 300, 311, 2435, 281], "temperature": 0.0, "avg_logprob": -0.1623207132021586, "compression_ratio": 1.37984496124031, "no_speech_prob": 2.4951323212007992e-05}, {"id": 63, "seek": 51992, "start": 519.92, "end": 526.64, "text": " us. So this little snippet here is supposed to show the difference. I created a type a.", "tokens": [505, 13, 407, 341, 707, 35623, 302, 510, 307, 3442, 281, 855, 264, 2649, 13, 286, 2942, 257, 2010, 257, 13], "temperature": 0.0, "avg_logprob": -0.15305451993589048, "compression_ratio": 1.5688622754491017, "no_speech_prob": 4.3258671212242916e-05}, {"id": 64, "seek": 51992, "start": 526.64, "end": 534.64, "text": " It's an empty struct. I added a method foo to it. It has a method bar. foo calls bar.", "tokens": [467, 311, 364, 6707, 6594, 13, 286, 3869, 257, 3170, 726, 78, 281, 309, 13, 467, 575, 257, 3170, 2159, 13, 726, 78, 5498, 2159, 13], "temperature": 0.0, "avg_logprob": -0.15305451993589048, "compression_ratio": 1.5688622754491017, "no_speech_prob": 4.3258671212242916e-05}, {"id": 65, "seek": 51992, "start": 534.64, "end": 542.0, "text": " That's nice. Returns bar. We have type p that embeds a. It can embed as many, as many as", "tokens": [663, 311, 1481, 13, 24350, 82, 2159, 13, 492, 362, 2010, 280, 300, 12240, 82, 257, 13, 467, 393, 12240, 382, 867, 11, 382, 867, 382], "temperature": 0.0, "avg_logprob": -0.15305451993589048, "compression_ratio": 1.5688622754491017, "no_speech_prob": 4.3258671212242916e-05}, {"id": 66, "seek": 54200, "start": 542.0, "end": 550.36, "text": " many as many types as it wants. It embeds a. That means that now it has foo and bar.", "tokens": [867, 382, 867, 3467, 382, 309, 2738, 13, 467, 12240, 82, 257, 13, 663, 1355, 300, 586, 309, 575, 726, 78, 293, 2159, 13], "temperature": 0.0, "avg_logprob": -0.18921290374383692, "compression_ratio": 1.5348837209302326, "no_speech_prob": 1.2597617569554131e-05}, {"id": 67, "seek": 54200, "start": 550.36, "end": 559.72, "text": " And then it decided to override bar. Fine. Variable b of b lowercase b of type uppercase", "tokens": [400, 550, 309, 3047, 281, 42321, 2159, 13, 12024, 13, 32511, 712, 272, 295, 272, 3126, 9765, 272, 295, 2010, 11775, 2869, 651], "temperature": 0.0, "avg_logprob": -0.18921290374383692, "compression_ratio": 1.5348837209302326, "no_speech_prob": 1.2597617569554131e-05}, {"id": 68, "seek": 54200, "start": 559.72, "end": 569.76, "text": " b. To be confusing. Not to be confused. Okay. Get it. And we can call b.bar. And we expect", "tokens": [272, 13, 1407, 312, 13181, 13, 1726, 281, 312, 9019, 13, 1033, 13, 3240, 309, 13, 400, 321, 393, 818, 272, 13, 5356, 13, 400, 321, 2066], "temperature": 0.0, "avg_logprob": -0.18921290374383692, "compression_ratio": 1.5348837209302326, "no_speech_prob": 1.2597617569554131e-05}, {"id": 69, "seek": 56976, "start": 569.76, "end": 579.28, "text": " b.bar to be invoked directly. And then we call b.foo. Now, with inheritance, we would", "tokens": [272, 13, 5356, 281, 312, 1048, 9511, 3838, 13, 400, 550, 321, 818, 272, 13, 69, 1986, 13, 823, 11, 365, 32122, 11, 321, 576], "temperature": 0.0, "avg_logprob": -0.11688007959505407, "compression_ratio": 1.5056818181818181, "no_speech_prob": 7.124404510250315e-05}, {"id": 70, "seek": 56976, "start": 579.28, "end": 593.0, "text": " expect b.foo, which returns a.bar, which is overridden, to be called. So we would expect", "tokens": [2066, 272, 13, 69, 1986, 11, 597, 11247, 257, 13, 5356, 11, 597, 307, 670, 81, 6171, 11, 281, 312, 1219, 13, 407, 321, 576, 2066], "temperature": 0.0, "avg_logprob": -0.11688007959505407, "compression_ratio": 1.5056818181818181, "no_speech_prob": 7.124404510250315e-05}, {"id": 71, "seek": 56976, "start": 593.0, "end": 599.48, "text": " to get b in both cases. But that's not what's going to happen. Because we do not have this", "tokens": [281, 483, 272, 294, 1293, 3331, 13, 583, 300, 311, 406, 437, 311, 516, 281, 1051, 13, 1436, 321, 360, 406, 362, 341], "temperature": 0.0, "avg_logprob": -0.11688007959505407, "compression_ratio": 1.5056818181818181, "no_speech_prob": 7.124404510250315e-05}, {"id": 72, "seek": 59948, "start": 599.48, "end": 608.32, "text": " type of polymorphism. That is true. Who was it that said it earlier? Raise your hands.", "tokens": [2010, 295, 6754, 76, 18191, 1434, 13, 663, 307, 2074, 13, 2102, 390, 309, 300, 848, 309, 3071, 30, 30062, 428, 2377, 13], "temperature": 0.0, "avg_logprob": -0.19127274921962192, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.00010677403042791411}, {"id": 73, "seek": 59948, "start": 608.32, "end": 618.04, "text": " Round of applause to the gentleman. Okay. Moving on. So let's talk about single and multiple", "tokens": [18525, 295, 9969, 281, 264, 15761, 13, 1033, 13, 14242, 322, 13, 407, 718, 311, 751, 466, 2167, 293, 3866], "temperature": 0.0, "avg_logprob": -0.19127274921962192, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.00010677403042791411}, {"id": 74, "seek": 59948, "start": 618.04, "end": 623.4, "text": " inheritance because this really bugs me. So I started my career with seven years of C++.", "tokens": [32122, 570, 341, 534, 15120, 385, 13, 407, 286, 1409, 452, 3988, 365, 3407, 924, 295, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.19127274921962192, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.00010677403042791411}, {"id": 75, "seek": 62340, "start": 623.4, "end": 634.56, "text": " And yes, it sounds biblical because it is. Thank you. Yeah. So I started with seven years", "tokens": [400, 2086, 11, 309, 3263, 26083, 570, 309, 307, 13, 1044, 291, 13, 865, 13, 407, 286, 1409, 365, 3407, 924], "temperature": 0.0, "avg_logprob": -0.1233267909602115, "compression_ratio": 1.4387755102040816, "no_speech_prob": 2.800986658257898e-05}, {"id": 76, "seek": 62340, "start": 634.56, "end": 643.88, "text": " of C++. C++ actually has a really nifty feature. You can inherit a lot. You have multiple inheritance.", "tokens": [295, 383, 25472, 13, 383, 25472, 767, 575, 257, 534, 297, 37177, 4111, 13, 509, 393, 21389, 257, 688, 13, 509, 362, 3866, 32122, 13], "temperature": 0.0, "avg_logprob": -0.1233267909602115, "compression_ratio": 1.4387755102040816, "no_speech_prob": 2.800986658257898e-05}, {"id": 77, "seek": 62340, "start": 643.88, "end": 650.76, "text": " It's not limited. Java, Ruby, they allow you to inherit exactly once. That to me does not", "tokens": [467, 311, 406, 5567, 13, 10745, 11, 19907, 11, 436, 2089, 291, 281, 21389, 2293, 1564, 13, 663, 281, 385, 775, 406], "temperature": 0.0, "avg_logprob": -0.1233267909602115, "compression_ratio": 1.4387755102040816, "no_speech_prob": 2.800986658257898e-05}, {"id": 78, "seek": 65076, "start": 650.76, "end": 655.3199999999999, "text": " feel like a feature. That feels like a limitation. I don't understand it. Let's say that you", "tokens": [841, 411, 257, 4111, 13, 663, 3417, 411, 257, 27432, 13, 286, 500, 380, 1223, 309, 13, 961, 311, 584, 300, 291], "temperature": 0.0, "avg_logprob": -0.12940545426201575, "compression_ratio": 1.5537190082644627, "no_speech_prob": 3.760613253689371e-05}, {"id": 79, "seek": 65076, "start": 655.3199999999999, "end": 662.04, "text": " have a truck and you want to describe a container of goods and a vehicle. You cannot inherit", "tokens": [362, 257, 5898, 293, 291, 528, 281, 6786, 257, 10129, 295, 10179, 293, 257, 5864, 13, 509, 2644, 21389], "temperature": 0.0, "avg_logprob": -0.12940545426201575, "compression_ratio": 1.5537190082644627, "no_speech_prob": 3.760613253689371e-05}, {"id": 80, "seek": 65076, "start": 662.04, "end": 669.28, "text": " from both. What do you do? Well, in Go we have composition. But in many, many languages that", "tokens": [490, 1293, 13, 708, 360, 291, 360, 30, 1042, 11, 294, 1037, 321, 362, 12686, 13, 583, 294, 867, 11, 867, 8650, 300], "temperature": 0.0, "avg_logprob": -0.12940545426201575, "compression_ratio": 1.5537190082644627, "no_speech_prob": 3.760613253689371e-05}, {"id": 81, "seek": 65076, "start": 669.28, "end": 675.04, "text": " offer inheritance, you only get single inheritance. Now, I will say this. If you feel, and I know", "tokens": [2626, 32122, 11, 291, 787, 483, 2167, 32122, 13, 823, 11, 286, 486, 584, 341, 13, 759, 291, 841, 11, 293, 286, 458], "temperature": 0.0, "avg_logprob": -0.12940545426201575, "compression_ratio": 1.5537190082644627, "no_speech_prob": 3.760613253689371e-05}, {"id": 82, "seek": 67504, "start": 675.04, "end": 682.4, "text": " that a lot of people do, if you feel that inheritance is that important, it just doesn't", "tokens": [300, 257, 688, 295, 561, 360, 11, 498, 291, 841, 300, 32122, 307, 300, 1021, 11, 309, 445, 1177, 380], "temperature": 0.0, "avg_logprob": -0.15047364885156805, "compression_ratio": 1.6854460093896713, "no_speech_prob": 1.748240720189642e-05}, {"id": 83, "seek": 67504, "start": 682.4, "end": 688.28, "text": " make sense that it will be so limited a feature that you will not be able to use properly or", "tokens": [652, 2020, 300, 309, 486, 312, 370, 5567, 257, 4111, 300, 291, 486, 406, 312, 1075, 281, 764, 6108, 420], "temperature": 0.0, "avg_logprob": -0.15047364885156805, "compression_ratio": 1.6854460093896713, "no_speech_prob": 1.748240720189642e-05}, {"id": 84, "seek": 67504, "start": 688.28, "end": 694.4399999999999, "text": " fully. And I do believe also that that is the cause of all the messy code that we see", "tokens": [4498, 13, 400, 286, 360, 1697, 611, 300, 300, 307, 264, 3082, 295, 439, 264, 16191, 3089, 300, 321, 536], "temperature": 0.0, "avg_logprob": -0.15047364885156805, "compression_ratio": 1.6854460093896713, "no_speech_prob": 1.748240720189642e-05}, {"id": 85, "seek": 67504, "start": 694.4399999999999, "end": 701.48, "text": " because the classes that I used to define were very small were one function, two functions.", "tokens": [570, 264, 5359, 300, 286, 1143, 281, 6964, 645, 588, 1359, 645, 472, 2445, 11, 732, 6828, 13], "temperature": 0.0, "avg_logprob": -0.15047364885156805, "compression_ratio": 1.6854460093896713, "no_speech_prob": 1.748240720189642e-05}, {"id": 86, "seek": 70148, "start": 701.48, "end": 707.44, "text": " I didn't have to make odd choices of what is going to go into a class or what wouldn't.", "tokens": [286, 994, 380, 362, 281, 652, 7401, 7994, 295, 437, 307, 516, 281, 352, 666, 257, 1508, 420, 437, 2759, 380, 13], "temperature": 0.0, "avg_logprob": -0.11326087604869496, "compression_ratio": 1.6966824644549763, "no_speech_prob": 7.405776614177739e-06}, {"id": 87, "seek": 70148, "start": 707.44, "end": 715.24, "text": " So it was really easy to be very expressive. So that's what I personally, my personal opinion", "tokens": [407, 309, 390, 534, 1858, 281, 312, 588, 40189, 13, 407, 300, 311, 437, 286, 5665, 11, 452, 2973, 4800], "temperature": 0.0, "avg_logprob": -0.11326087604869496, "compression_ratio": 1.6966824644549763, "no_speech_prob": 7.405776614177739e-06}, {"id": 88, "seek": 70148, "start": 715.24, "end": 720.9200000000001, "text": " is about single and multiple inheritance. I don't feel in most common languages, since", "tokens": [307, 466, 2167, 293, 3866, 32122, 13, 286, 500, 380, 841, 294, 881, 2689, 8650, 11, 1670], "temperature": 0.0, "avg_logprob": -0.11326087604869496, "compression_ratio": 1.6966824644549763, "no_speech_prob": 7.405776614177739e-06}, {"id": 89, "seek": 70148, "start": 720.9200000000001, "end": 730.4, "text": " it's usually single inheritance, I don't feel that it makes it something that is going to", "tokens": [309, 311, 2673, 2167, 32122, 11, 286, 500, 380, 841, 300, 309, 1669, 309, 746, 300, 307, 516, 281], "temperature": 0.0, "avg_logprob": -0.11326087604869496, "compression_ratio": 1.6966824644549763, "no_speech_prob": 7.405776614177739e-06}, {"id": 90, "seek": 73040, "start": 730.4, "end": 736.28, "text": " determine whether a language is or isn't object oriented. Because if it is, then as far as", "tokens": [6997, 1968, 257, 2856, 307, 420, 1943, 380, 2657, 21841, 13, 1436, 498, 309, 307, 11, 550, 382, 1400, 382], "temperature": 0.0, "avg_logprob": -0.18515378778631036, "compression_ratio": 1.6576576576576576, "no_speech_prob": 2.543711343605537e-05}, {"id": 91, "seek": 73040, "start": 736.28, "end": 742.76, "text": " I'm concerned, single, any language that has single inheritance cannot be object oriented.", "tokens": [286, 478, 5922, 11, 2167, 11, 604, 2856, 300, 575, 2167, 32122, 2644, 312, 2657, 21841, 13], "temperature": 0.0, "avg_logprob": -0.18515378778631036, "compression_ratio": 1.6576576576576576, "no_speech_prob": 2.543711343605537e-05}, {"id": 92, "seek": 73040, "start": 742.76, "end": 749.4399999999999, "text": " So Go is not object oriented. The usual argument summary, and I'm going to, like, you have", "tokens": [407, 1037, 307, 406, 2657, 21841, 13, 440, 7713, 6770, 12691, 11, 293, 286, 478, 516, 281, 11, 411, 11, 291, 362], "temperature": 0.0, "avg_logprob": -0.18515378778631036, "compression_ratio": 1.6576576576576576, "no_speech_prob": 2.543711343605537e-05}, {"id": 93, "seek": 73040, "start": 749.4399999999999, "end": 754.16, "text": " to understand that I'm aggregating here everything that was said to me over the internet, which", "tokens": [281, 1223, 300, 286, 478, 16743, 990, 510, 1203, 300, 390, 848, 281, 385, 670, 264, 4705, 11, 597], "temperature": 0.0, "avg_logprob": -0.18515378778631036, "compression_ratio": 1.6576576576576576, "no_speech_prob": 2.543711343605537e-05}, {"id": 94, "seek": 75416, "start": 754.16, "end": 762.4, "text": " is a great source of information and also a great source of information. So Go is simple,", "tokens": [307, 257, 869, 4009, 295, 1589, 293, 611, 257, 869, 4009, 295, 1589, 13, 407, 1037, 307, 2199, 11], "temperature": 0.0, "avg_logprob": -0.11989714882590553, "compression_ratio": 1.8645833333333333, "no_speech_prob": 7.290084340638714e-06}, {"id": 95, "seek": 75416, "start": 762.4, "end": 767.64, "text": " object oriented programming isn't, therefore Go is not object oriented. Go doesn't have", "tokens": [2657, 21841, 9410, 1943, 380, 11, 4412, 1037, 307, 406, 2657, 21841, 13, 1037, 1177, 380, 362], "temperature": 0.0, "avg_logprob": -0.11989714882590553, "compression_ratio": 1.8645833333333333, "no_speech_prob": 7.290084340638714e-06}, {"id": 96, "seek": 75416, "start": 767.64, "end": 774.4, "text": " classes, so Go cannot be object oriented. It doesn't have inheritance, so it's not object", "tokens": [5359, 11, 370, 1037, 2644, 312, 2657, 21841, 13, 467, 1177, 380, 362, 32122, 11, 370, 309, 311, 406, 2657], "temperature": 0.0, "avg_logprob": -0.11989714882590553, "compression_ratio": 1.8645833333333333, "no_speech_prob": 7.290084340638714e-06}, {"id": 97, "seek": 75416, "start": 774.4, "end": 780.24, "text": " oriented. And lastly, and this one is a great argument, we're going to dive into that one.", "tokens": [21841, 13, 400, 16386, 11, 293, 341, 472, 307, 257, 869, 6770, 11, 321, 434, 516, 281, 9192, 666, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.11989714882590553, "compression_ratio": 1.8645833333333333, "no_speech_prob": 7.290084340638714e-06}, {"id": 98, "seek": 78024, "start": 780.24, "end": 785.64, "text": " Objects are not really messages, so Go is not object oriented. Now, this one is fun.", "tokens": [24753, 82, 366, 406, 534, 7897, 11, 370, 1037, 307, 406, 2657, 21841, 13, 823, 11, 341, 472, 307, 1019, 13], "temperature": 0.0, "avg_logprob": -0.1937886143589879, "compression_ratio": 1.6961538461538461, "no_speech_prob": 3.212920273654163e-05}, {"id": 99, "seek": 78024, "start": 785.64, "end": 791.92, "text": " So this comes from the Alan Kay School. So all the fans of Alan Kay have jumped in to", "tokens": [407, 341, 1487, 490, 264, 16442, 14179, 5070, 13, 407, 439, 264, 4499, 295, 16442, 14179, 362, 13864, 294, 281], "temperature": 0.0, "avg_logprob": -0.1937886143589879, "compression_ratio": 1.6961538461538461, "no_speech_prob": 3.212920273654163e-05}, {"id": 100, "seek": 78024, "start": 791.92, "end": 797.4, "text": " let me know everything about the history of object oriented. So here's what I've got.", "tokens": [718, 385, 458, 1203, 466, 264, 2503, 295, 2657, 21841, 13, 407, 510, 311, 437, 286, 600, 658, 13], "temperature": 0.0, "avg_logprob": -0.1937886143589879, "compression_ratio": 1.6961538461538461, "no_speech_prob": 3.212920273654163e-05}, {"id": 101, "seek": 78024, "start": 797.4, "end": 802.76, "text": " One person said, technically they aren't methods, so he's referring to method receivers. They", "tokens": [1485, 954, 848, 11, 12120, 436, 3212, 380, 7150, 11, 370, 415, 311, 13761, 281, 3170, 49196, 13, 814], "temperature": 0.0, "avg_logprob": -0.1937886143589879, "compression_ratio": 1.6961538461538461, "no_speech_prob": 3.212920273654163e-05}, {"id": 102, "seek": 78024, "start": 802.76, "end": 809.28, "text": " aren't methods on type T, they are functions where the first argument is type is the type.", "tokens": [3212, 380, 7150, 322, 2010, 314, 11, 436, 366, 6828, 689, 264, 700, 6770, 307, 2010, 307, 264, 2010, 13], "temperature": 0.0, "avg_logprob": -0.1937886143589879, "compression_ratio": 1.6961538461538461, "no_speech_prob": 3.212920273654163e-05}, {"id": 103, "seek": 80928, "start": 809.28, "end": 814.04, "text": " The promotion to them as methods is syntactic sugar. It's why you can call, now look at", "tokens": [440, 15783, 281, 552, 382, 7150, 307, 23980, 19892, 5076, 13, 467, 311, 983, 291, 393, 818, 11, 586, 574, 412], "temperature": 0.0, "avg_logprob": -0.18141507483147956, "compression_ratio": 1.4802259887005649, "no_speech_prob": 1.2014266758342274e-05}, {"id": 104, "seek": 80928, "start": 814.04, "end": 825.92, "text": " this, this is amazing. V.foo with bar or T, call the type, invoke a method on the type,", "tokens": [341, 11, 341, 307, 2243, 13, 691, 13, 69, 1986, 365, 2159, 420, 314, 11, 818, 264, 2010, 11, 41117, 257, 3170, 322, 264, 2010, 11], "temperature": 0.0, "avg_logprob": -0.18141507483147956, "compression_ratio": 1.4802259887005649, "no_speech_prob": 1.2014266758342274e-05}, {"id": 105, "seek": 80928, "start": 825.92, "end": 835.88, "text": " and provide V as a parameter. And it's true. Show you what it looks like. So same code", "tokens": [293, 2893, 691, 382, 257, 13075, 13, 400, 309, 311, 2074, 13, 6895, 291, 437, 309, 1542, 411, 13, 407, 912, 3089], "temperature": 0.0, "avg_logprob": -0.18141507483147956, "compression_ratio": 1.4802259887005649, "no_speech_prob": 1.2014266758342274e-05}, {"id": 106, "seek": 83588, "start": 835.88, "end": 846.84, "text": " as before, we have a empty struct. We have method foo that we added to A. Quiet in the", "tokens": [382, 949, 11, 321, 362, 257, 6707, 6594, 13, 492, 362, 3170, 726, 78, 300, 321, 3869, 281, 316, 13, 32193, 294, 264], "temperature": 0.0, "avg_logprob": -0.16734125063969538, "compression_ratio": 1.5175438596491229, "no_speech_prob": 5.7751371059566736e-05}, {"id": 107, "seek": 83588, "start": 846.84, "end": 859.6, "text": " court. We have method foo that we added to type A, which is nice. And we can invoke it", "tokens": [4753, 13, 492, 362, 3170, 726, 78, 300, 321, 3869, 281, 2010, 316, 11, 597, 307, 1481, 13, 400, 321, 393, 41117, 309], "temperature": 0.0, "avg_logprob": -0.16734125063969538, "compression_ratio": 1.5175438596491229, "no_speech_prob": 5.7751371059566736e-05}, {"id": 108, "seek": 85960, "start": 859.6, "end": 866.96, "text": " using two ways. One is clearly less common than the other. So this is the common way.", "tokens": [1228, 732, 2098, 13, 1485, 307, 4448, 1570, 2689, 813, 264, 661, 13, 407, 341, 307, 264, 2689, 636, 13], "temperature": 0.0, "avg_logprob": -0.1575132973340093, "compression_ratio": 1.37984496124031, "no_speech_prob": 3.639051647041924e-05}, {"id": 109, "seek": 85960, "start": 866.96, "end": 885.08, "text": " Or we can invoke it on the type and pass in lowercase a as a parameter. You have the screen?", "tokens": [1610, 321, 393, 41117, 309, 322, 264, 2010, 293, 1320, 294, 3126, 9765, 257, 382, 257, 13075, 13, 509, 362, 264, 2568, 30], "temperature": 0.0, "avg_logprob": -0.1575132973340093, "compression_ratio": 1.37984496124031, "no_speech_prob": 3.639051647041924e-05}, {"id": 110, "seek": 88508, "start": 885.08, "end": 891.6800000000001, "text": " That's why, by the way, a pointer receiver can be nil. So I have this game. I play this", "tokens": [663, 311, 983, 11, 538, 264, 636, 11, 257, 23918, 20086, 393, 312, 297, 388, 13, 407, 286, 362, 341, 1216, 13, 286, 862, 341], "temperature": 0.0, "avg_logprob": -0.15732573174141548, "compression_ratio": 1.6319018404907975, "no_speech_prob": 5.8142843045061454e-05}, {"id": 111, "seek": 88508, "start": 891.6800000000001, "end": 897.36, "text": " game all the time with people who are new to go and I ask them what's going to happen.", "tokens": [1216, 439, 264, 565, 365, 561, 567, 366, 777, 281, 352, 293, 286, 1029, 552, 437, 311, 516, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.15732573174141548, "compression_ratio": 1.6319018404907975, "no_speech_prob": 5.8142843045061454e-05}, {"id": 112, "seek": 88508, "start": 897.36, "end": 907.9200000000001, "text": " So we are able to create methods with pointer receivers. So I add foo and make the receiver", "tokens": [407, 321, 366, 1075, 281, 1884, 7150, 365, 23918, 49196, 13, 407, 286, 909, 726, 78, 293, 652, 264, 20086], "temperature": 0.0, "avg_logprob": -0.15732573174141548, "compression_ratio": 1.6319018404907975, "no_speech_prob": 5.8142843045061454e-05}, {"id": 113, "seek": 90792, "start": 907.92, "end": 916.9599999999999, "text": " a pointer. I create variable a, which is a pointer to uppercase a. It's zero value is", "tokens": [257, 23918, 13, 286, 1884, 7006, 257, 11, 597, 307, 257, 23918, 281, 11775, 2869, 651, 257, 13, 467, 311, 4018, 2158, 307], "temperature": 0.0, "avg_logprob": -0.16322925090789794, "compression_ratio": 1.4887640449438202, "no_speech_prob": 2.666472391865682e-05}, {"id": 114, "seek": 90792, "start": 916.9599999999999, "end": 928.3199999999999, "text": " nil. And I invoke a.foo. And then I ask people what will happen. Now, we're not going to", "tokens": [297, 388, 13, 400, 286, 41117, 257, 13, 69, 1986, 13, 400, 550, 286, 1029, 561, 437, 486, 1051, 13, 823, 11, 321, 434, 406, 516, 281], "temperature": 0.0, "avg_logprob": -0.16322925090789794, "compression_ratio": 1.4887640449438202, "no_speech_prob": 2.666472391865682e-05}, {"id": 115, "seek": 90792, "start": 928.3199999999999, "end": 935.5999999999999, "text": " be able to do this quiz here because we are late on time and we have to make up some time.", "tokens": [312, 1075, 281, 360, 341, 15450, 510, 570, 321, 366, 3469, 322, 565, 293, 321, 362, 281, 652, 493, 512, 565, 13], "temperature": 0.0, "avg_logprob": -0.16322925090789794, "compression_ratio": 1.4887640449438202, "no_speech_prob": 2.666472391865682e-05}, {"id": 116, "seek": 93560, "start": 935.6, "end": 948.32, "text": " So I'm just going to run this. So high from foo is actually returned by foo, which means", "tokens": [407, 286, 478, 445, 516, 281, 1190, 341, 13, 407, 1090, 490, 726, 78, 307, 767, 8752, 538, 726, 78, 11, 597, 1355], "temperature": 0.0, "avg_logprob": -0.21771754681224553, "compression_ratio": 1.5202312138728324, "no_speech_prob": 3.7588513805530965e-05}, {"id": 117, "seek": 93560, "start": 948.32, "end": 955.8000000000001, "text": " that we are able to invoke a method on a nil pointer. It's possible because there is no", "tokens": [300, 321, 366, 1075, 281, 41117, 257, 3170, 322, 257, 297, 388, 23918, 13, 467, 311, 1944, 570, 456, 307, 572], "temperature": 0.0, "avg_logprob": -0.21771754681224553, "compression_ratio": 1.5202312138728324, "no_speech_prob": 3.7588513805530965e-05}, {"id": 118, "seek": 93560, "start": 955.8000000000001, "end": 960.96, "text": " receiver. There is no actual receiver. Most of the time when we call a method in other", "tokens": [20086, 13, 821, 307, 572, 3539, 20086, 13, 4534, 295, 264, 565, 562, 321, 818, 257, 3170, 294, 661], "temperature": 0.0, "avg_logprob": -0.21771754681224553, "compression_ratio": 1.5202312138728324, "no_speech_prob": 3.7588513805530965e-05}, {"id": 119, "seek": 96096, "start": 960.96, "end": 970.24, "text": " languages, what happens is that we have to go and go through some reference that's somewhere", "tokens": [8650, 11, 437, 2314, 307, 300, 321, 362, 281, 352, 293, 352, 807, 512, 6408, 300, 311, 4079], "temperature": 0.0, "avg_logprob": -0.12190620289292446, "compression_ratio": 1.421875, "no_speech_prob": 4.6050081436987966e-05}, {"id": 120, "seek": 96096, "start": 970.24, "end": 980.4000000000001, "text": " in the address space of the variable itself. This tells us that it's not where the method", "tokens": [294, 264, 2985, 1901, 295, 264, 7006, 2564, 13, 639, 5112, 505, 300, 309, 311, 406, 689, 264, 3170], "temperature": 0.0, "avg_logprob": -0.12190620289292446, "compression_ratio": 1.421875, "no_speech_prob": 4.6050081436987966e-05}, {"id": 121, "seek": 98040, "start": 980.4, "end": 992.0799999999999, "text": " is at all. It's not where it's defined. It's not where the runtime looks for it. It's just", "tokens": [307, 412, 439, 13, 467, 311, 406, 689, 309, 311, 7642, 13, 467, 311, 406, 689, 264, 34474, 1542, 337, 309, 13, 467, 311, 445], "temperature": 0.0, "avg_logprob": -0.19737616372764658, "compression_ratio": 1.6681614349775784, "no_speech_prob": 2.584120193205308e-05}, {"id": 122, "seek": 98040, "start": 992.0799999999999, "end": 993.0799999999999, "text": " not.", "tokens": [406, 13], "temperature": 0.0, "avg_logprob": -0.19737616372764658, "compression_ratio": 1.6681614349775784, "no_speech_prob": 2.584120193205308e-05}, {"id": 123, "seek": 98040, "start": 993.0799999999999, "end": 997.3199999999999, "text": " So my co-organizer, my women who go co-organize it, Jessica Green saw this and said, ah, so", "tokens": [407, 452, 598, 12, 12372, 6545, 11, 452, 2266, 567, 352, 598, 12, 12372, 1125, 309, 11, 15570, 6969, 1866, 341, 293, 848, 11, 3716, 11, 370], "temperature": 0.0, "avg_logprob": -0.19737616372764658, "compression_ratio": 1.6681614349775784, "no_speech_prob": 2.584120193205308e-05}, {"id": 124, "seek": 98040, "start": 997.3199999999999, "end": 1004.6, "text": " there is no spoon, which I thought was amazing because this is kind of a design thing, right?", "tokens": [456, 307, 572, 12453, 11, 597, 286, 1194, 390, 2243, 570, 341, 307, 733, 295, 257, 1715, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19737616372764658, "compression_ratio": 1.6681614349775784, "no_speech_prob": 2.584120193205308e-05}, {"id": 125, "seek": 98040, "start": 1004.6, "end": 1009.12, "text": " So everything is in our minds. Really everything is in our minds. We sort of, you know, we", "tokens": [407, 1203, 307, 294, 527, 9634, 13, 4083, 1203, 307, 294, 527, 9634, 13, 492, 1333, 295, 11, 291, 458, 11, 321], "temperature": 0.0, "avg_logprob": -0.19737616372764658, "compression_ratio": 1.6681614349775784, "no_speech_prob": 2.584120193205308e-05}, {"id": 126, "seek": 100912, "start": 1009.12, "end": 1013.12, "text": " have these philosophical ideas and then we put them into code. If there is anybody who", "tokens": [362, 613, 25066, 3487, 293, 550, 321, 829, 552, 666, 3089, 13, 759, 456, 307, 4472, 567], "temperature": 0.0, "avg_logprob": -0.16407938317938164, "compression_ratio": 1.7192118226600985, "no_speech_prob": 2.4661119823576882e-05}, {"id": 127, "seek": 100912, "start": 1013.12, "end": 1017.2, "text": " actually thinks that the gopher that you saw, the gopher that you saw on the screen in the", "tokens": [767, 7309, 300, 264, 352, 79, 511, 300, 291, 1866, 11, 264, 352, 79, 511, 300, 291, 1866, 322, 264, 2568, 294, 264], "temperature": 0.0, "avg_logprob": -0.16407938317938164, "compression_ratio": 1.7192118226600985, "no_speech_prob": 2.4661119823576882e-05}, {"id": 128, "seek": 100912, "start": 1017.2, "end": 1026.68, "text": " maze, there is an actual gopher out there doing this, let me know. I want to hang out.", "tokens": [33032, 11, 456, 307, 364, 3539, 352, 79, 511, 484, 456, 884, 341, 11, 718, 385, 458, 13, 286, 528, 281, 3967, 484, 13], "temperature": 0.0, "avg_logprob": -0.16407938317938164, "compression_ratio": 1.7192118226600985, "no_speech_prob": 2.4661119823576882e-05}, {"id": 129, "seek": 100912, "start": 1026.68, "end": 1032.76, "text": " So where do receivers come from? So listen to this because this is very interesting.", "tokens": [407, 689, 360, 49196, 808, 490, 30, 407, 2140, 281, 341, 570, 341, 307, 588, 1880, 13], "temperature": 0.0, "avg_logprob": -0.16407938317938164, "compression_ratio": 1.7192118226600985, "no_speech_prob": 2.4661119823576882e-05}, {"id": 130, "seek": 103276, "start": 1032.76, "end": 1041.8799999999999, "text": " Going to the Go team, the Inspiration 2 method receivers came from Oberon 2, which is the", "tokens": [10963, 281, 264, 1037, 1469, 11, 264, 32671, 7611, 568, 3170, 49196, 1361, 490, 27664, 266, 568, 11, 597, 307, 264], "temperature": 0.0, "avg_logprob": -0.29660778045654296, "compression_ratio": 1.072289156626506, "no_speech_prob": 8.203634934034199e-05}, {"id": 131, "seek": 104188, "start": 1041.88, "end": 1063.88, "text": " object-oriented version of Oberon. Okay? And they're called receivers because they receive", "tokens": [2657, 12, 27414, 3037, 295, 27664, 266, 13, 1033, 30, 400, 436, 434, 1219, 49196, 570, 436, 4774], "temperature": 0.0, "avg_logprob": -0.23013463887301358, "compression_ratio": 1.0714285714285714, "no_speech_prob": 2.1419100448838435e-05}, {"id": 132, "seek": 106388, "start": 1063.88, "end": 1072.7600000000002, "text": " messages, except there is no receiver. So everybody's right. Another thing that the", "tokens": [7897, 11, 3993, 456, 307, 572, 20086, 13, 407, 2201, 311, 558, 13, 3996, 551, 300, 264], "temperature": 0.0, "avg_logprob": -0.1724537838710828, "compression_ratio": 1.5478260869565217, "no_speech_prob": 2.316635800525546e-05}, {"id": 133, "seek": 106388, "start": 1072.7600000000002, "end": 1078.7600000000002, "text": " same person brought up, which is really cool, he said, well, I forgot to say who Alan Kay", "tokens": [912, 954, 3038, 493, 11, 597, 307, 534, 1627, 11, 415, 848, 11, 731, 11, 286, 5298, 281, 584, 567, 16442, 14179], "temperature": 0.0, "avg_logprob": -0.1724537838710828, "compression_ratio": 1.5478260869565217, "no_speech_prob": 2.316635800525546e-05}, {"id": 134, "seek": 106388, "start": 1078.7600000000002, "end": 1083.96, "text": " was. What's wrong with me? Alan Kay is the creator of Smalltalk and also is considered", "tokens": [390, 13, 708, 311, 2085, 365, 385, 30, 16442, 14179, 307, 264, 14181, 295, 15287, 29302, 293, 611, 307, 4888], "temperature": 0.0, "avg_logprob": -0.1724537838710828, "compression_ratio": 1.5478260869565217, "no_speech_prob": 2.316635800525546e-05}, {"id": 135, "seek": 106388, "start": 1083.96, "end": 1089.48, "text": " to be the person who coined the term object-oriented. So he's supposedly supposed to know stuff", "tokens": [281, 312, 264, 954, 567, 45222, 264, 1433, 2657, 12, 27414, 13, 407, 415, 311, 20581, 3442, 281, 458, 1507], "temperature": 0.0, "avg_logprob": -0.1724537838710828, "compression_ratio": 1.5478260869565217, "no_speech_prob": 2.316635800525546e-05}, {"id": 136, "seek": 108948, "start": 1089.48, "end": 1097.52, "text": " about it. So that's why people quote him and that's fine. It's totally fine. And he has", "tokens": [466, 309, 13, 407, 300, 311, 983, 561, 6513, 796, 293, 300, 311, 2489, 13, 467, 311, 3879, 2489, 13, 400, 415, 575], "temperature": 0.0, "avg_logprob": -0.13084878921508789, "compression_ratio": 1.5642201834862386, "no_speech_prob": 4.188207822153345e-05}, {"id": 137, "seek": 108948, "start": 1097.52, "end": 1103.84, "text": " a lot of opinions, which is also great. We encourage opinions. So what a person said", "tokens": [257, 688, 295, 11819, 11, 597, 307, 611, 869, 13, 492, 5373, 11819, 13, 407, 437, 257, 954, 848], "temperature": 0.0, "avg_logprob": -0.13084878921508789, "compression_ratio": 1.5642201834862386, "no_speech_prob": 4.188207822153345e-05}, {"id": 138, "seek": 108948, "start": 1103.84, "end": 1108.0, "text": " to me, so in Smalltalk, you don't need to explicitly declare that an object can have", "tokens": [281, 385, 11, 370, 294, 15287, 29302, 11, 291, 500, 380, 643, 281, 20803, 19710, 300, 364, 2657, 393, 362], "temperature": 0.0, "avg_logprob": -0.13084878921508789, "compression_ratio": 1.5642201834862386, "no_speech_prob": 4.188207822153345e-05}, {"id": 139, "seek": 108948, "start": 1108.0, "end": 1115.2, "text": " a specific message. You send it a message and then it decides whether to handle it.", "tokens": [257, 2685, 3636, 13, 509, 2845, 309, 257, 3636, 293, 550, 309, 14898, 1968, 281, 4813, 309, 13], "temperature": 0.0, "avg_logprob": -0.13084878921508789, "compression_ratio": 1.5642201834862386, "no_speech_prob": 4.188207822153345e-05}, {"id": 140, "seek": 111520, "start": 1115.2, "end": 1124.4, "text": " So duck typing. Now, this is really interesting. Can we do this in Go? Can we check if a certain", "tokens": [407, 12482, 18444, 13, 823, 11, 341, 307, 534, 1880, 13, 1664, 321, 360, 341, 294, 1037, 30, 1664, 321, 1520, 498, 257, 1629], "temperature": 0.0, "avg_logprob": -0.21204208003150093, "compression_ratio": 1.4972375690607735, "no_speech_prob": 7.589246524730697e-05}, {"id": 141, "seek": 111520, "start": 1124.4, "end": 1132.52, "text": " value, if it can handle a certain message or has, in layman's terms, has certain methods?", "tokens": [2158, 11, 498, 309, 393, 4813, 257, 1629, 3636, 420, 575, 11, 294, 2360, 1601, 311, 2115, 11, 575, 1629, 7150, 30], "temperature": 0.0, "avg_logprob": -0.21204208003150093, "compression_ratio": 1.4972375690607735, "no_speech_prob": 7.589246524730697e-05}, {"id": 142, "seek": 111520, "start": 1132.52, "end": 1140.4, "text": " Well, the answer is yes through the magic of interface conversion. So again, we type", "tokens": [1042, 11, 264, 1867, 307, 2086, 807, 264, 5585, 295, 9226, 14298, 13, 407, 797, 11, 321, 2010], "temperature": 0.0, "avg_logprob": -0.21204208003150093, "compression_ratio": 1.4972375690607735, "no_speech_prob": 7.589246524730697e-05}, {"id": 143, "seek": 114040, "start": 1140.4, "end": 1148.92, "text": " a, we added function foo. It doesn't do much. We don't actually care what it does. And we", "tokens": [257, 11, 321, 3869, 2445, 726, 78, 13, 467, 1177, 380, 360, 709, 13, 492, 500, 380, 767, 1127, 437, 309, 775, 13, 400, 321], "temperature": 0.0, "avg_logprob": -0.18130275365468618, "compression_ratio": 1.670731707317073, "no_speech_prob": 2.8379508876241744e-05}, {"id": 144, "seek": 114040, "start": 1148.92, "end": 1158.92, "text": " created interface i, uppercase i. And this interface has one function, defines one function", "tokens": [2942, 9226, 741, 11, 11775, 2869, 651, 741, 13, 400, 341, 9226, 575, 472, 2445, 11, 23122, 472, 2445], "temperature": 0.0, "avg_logprob": -0.18130275365468618, "compression_ratio": 1.670731707317073, "no_speech_prob": 2.8379508876241744e-05}, {"id": 145, "seek": 114040, "start": 1158.92, "end": 1170.0800000000002, "text": " foo that returns a string. And a coincidentally or pointer to a coincidentally also has foo,", "tokens": [726, 78, 300, 11247, 257, 6798, 13, 400, 257, 13001, 36578, 420, 23918, 281, 257, 13001, 36578, 611, 575, 726, 78, 11], "temperature": 0.0, "avg_logprob": -0.18130275365468618, "compression_ratio": 1.670731707317073, "no_speech_prob": 2.8379508876241744e-05}, {"id": 146, "seek": 117008, "start": 1170.08, "end": 1176.6, "text": " which is a string. Now, this is where Go completely differently than other languages.", "tokens": [597, 307, 257, 6798, 13, 823, 11, 341, 307, 689, 1037, 2584, 7614, 813, 661, 8650, 13], "temperature": 0.0, "avg_logprob": -0.15058585272894964, "compression_ratio": 1.6886792452830188, "no_speech_prob": 2.8400767405400984e-05}, {"id": 147, "seek": 117008, "start": 1176.6, "end": 1186.32, "text": " In Go, interfaces are implicit. In most languages, if you have, let's say, class A and you wanted", "tokens": [682, 1037, 11, 28416, 366, 26947, 13, 682, 881, 8650, 11, 498, 291, 362, 11, 718, 311, 584, 11, 1508, 316, 293, 291, 1415], "temperature": 0.0, "avg_logprob": -0.15058585272894964, "compression_ratio": 1.6886792452830188, "no_speech_prob": 2.8400767405400984e-05}, {"id": 148, "seek": 117008, "start": 1186.32, "end": 1191.9199999999998, "text": " to implement interface i, you have to, at the time of creating that class, you have to say", "tokens": [281, 4445, 9226, 741, 11, 291, 362, 281, 11, 412, 264, 565, 295, 4084, 300, 1508, 11, 291, 362, 281, 584], "temperature": 0.0, "avg_logprob": -0.15058585272894964, "compression_ratio": 1.6886792452830188, "no_speech_prob": 2.8400767405400984e-05}, {"id": 149, "seek": 117008, "start": 1191.9199999999998, "end": 1198.84, "text": " something like class A implements i. That means that you cannot have a type that is", "tokens": [746, 411, 1508, 316, 704, 17988, 741, 13, 663, 1355, 300, 291, 2644, 362, 257, 2010, 300, 307], "temperature": 0.0, "avg_logprob": -0.15058585272894964, "compression_ratio": 1.6886792452830188, "no_speech_prob": 2.8400767405400984e-05}, {"id": 150, "seek": 119884, "start": 1198.84, "end": 1209.3999999999999, "text": " not aware, has no idea that an implements, that a certain interface exists and will implement", "tokens": [406, 3650, 11, 575, 572, 1558, 300, 364, 704, 17988, 11, 300, 257, 1629, 9226, 8198, 293, 486, 4445], "temperature": 0.0, "avg_logprob": -0.1844341582146244, "compression_ratio": 1.5632183908045978, "no_speech_prob": 1.9211483959225006e-05}, {"id": 151, "seek": 119884, "start": 1209.3999999999999, "end": 1216.6799999999998, "text": " it. Not unless, not unless, that's why a lot of people move to scripting languages, because", "tokens": [309, 13, 1726, 5969, 11, 406, 5969, 11, 300, 311, 983, 257, 688, 295, 561, 1286, 281, 5755, 278, 8650, 11, 570], "temperature": 0.0, "avg_logprob": -0.1844341582146244, "compression_ratio": 1.5632183908045978, "no_speech_prob": 1.9211483959225006e-05}, {"id": 152, "seek": 119884, "start": 1216.6799999999998, "end": 1224.72, "text": " that allows them to pick some code from the internet and use it. You know, just use it", "tokens": [300, 4045, 552, 281, 1888, 512, 3089, 490, 264, 4705, 293, 764, 309, 13, 509, 458, 11, 445, 764, 309], "temperature": 0.0, "avg_logprob": -0.1844341582146244, "compression_ratio": 1.5632183908045978, "no_speech_prob": 1.9211483959225006e-05}, {"id": 153, "seek": 122472, "start": 1224.72, "end": 1229.96, "text": " unless of what's going on. And Go allows you to actually download some random code from", "tokens": [5969, 295, 437, 311, 516, 322, 13, 400, 1037, 4045, 291, 281, 767, 5484, 512, 4974, 3089, 490], "temperature": 0.0, "avg_logprob": -0.12180016645744665, "compression_ratio": 1.5, "no_speech_prob": 6.692307943012565e-05}, {"id": 154, "seek": 122472, "start": 1229.96, "end": 1240.68, "text": " the internet and plug it in using your own interfaces. It's very strange. It's very unique.", "tokens": [264, 4705, 293, 5452, 309, 294, 1228, 428, 1065, 28416, 13, 467, 311, 588, 5861, 13, 467, 311, 588, 3845, 13], "temperature": 0.0, "avg_logprob": -0.12180016645744665, "compression_ratio": 1.5, "no_speech_prob": 6.692307943012565e-05}, {"id": 155, "seek": 122472, "start": 1240.68, "end": 1247.2, "text": " So with that in mind, if you have implicit interfaces, it makes sense to be able to try", "tokens": [407, 365, 300, 294, 1575, 11, 498, 291, 362, 26947, 28416, 11, 309, 1669, 2020, 281, 312, 1075, 281, 853], "temperature": 0.0, "avg_logprob": -0.12180016645744665, "compression_ratio": 1.5, "no_speech_prob": 6.692307943012565e-05}, {"id": 156, "seek": 124720, "start": 1247.2, "end": 1256.28, "text": " and be able to ask whether a type implements an interface, because maybe it does. In other", "tokens": [293, 312, 1075, 281, 1029, 1968, 257, 2010, 704, 17988, 364, 9226, 11, 570, 1310, 309, 775, 13, 682, 661], "temperature": 0.0, "avg_logprob": -0.14797329557114752, "compression_ratio": 1.440217391304348, "no_speech_prob": 7.874889888626058e-06}, {"id": 157, "seek": 124720, "start": 1256.28, "end": 1266.04, "text": " languages, it just doesn't make sense, because the answer will be no. Right? Right. Okay.", "tokens": [8650, 11, 309, 445, 1177, 380, 652, 2020, 11, 570, 264, 1867, 486, 312, 572, 13, 1779, 30, 1779, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.14797329557114752, "compression_ratio": 1.440217391304348, "no_speech_prob": 7.874889888626058e-06}, {"id": 158, "seek": 124720, "start": 1266.04, "end": 1270.4, "text": " So therefore, we use interface conversion. Now, this is the syntax. What you need to", "tokens": [407, 4412, 11, 321, 764, 9226, 14298, 13, 823, 11, 341, 307, 264, 28431, 13, 708, 291, 643, 281], "temperature": 0.0, "avg_logprob": -0.14797329557114752, "compression_ratio": 1.440217391304348, "no_speech_prob": 7.874889888626058e-06}, {"id": 159, "seek": 127040, "start": 1270.4, "end": 1277.4, "text": " understand from this expression is that if everything was fine, then Val will have a", "tokens": [1223, 490, 341, 6114, 307, 300, 498, 1203, 390, 2489, 11, 550, 7188, 486, 362, 257], "temperature": 0.0, "avg_logprob": -0.20838398252214704, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00010363136243540794}, {"id": 160, "seek": 127040, "start": 1277.4, "end": 1290.4, "text": " type, will have B, which is, which it points to A. And with the interface of i, inside", "tokens": [2010, 11, 486, 362, 363, 11, 597, 307, 11, 597, 309, 2793, 281, 316, 13, 400, 365, 264, 9226, 295, 741, 11, 1854], "temperature": 0.0, "avg_logprob": -0.20838398252214704, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00010363136243540794}, {"id": 161, "seek": 127040, "start": 1290.4, "end": 1296.4, "text": " the interface of i, Val will have all of that and will be able to invoke foo, which is this", "tokens": [264, 9226, 295, 741, 11, 7188, 486, 362, 439, 295, 300, 293, 486, 312, 1075, 281, 41117, 726, 78, 11, 597, 307, 341], "temperature": 0.0, "avg_logprob": -0.20838398252214704, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00010363136243540794}, {"id": 162, "seek": 129640, "start": 1296.4, "end": 1303.2, "text": " one, which is exactly what's going to happen. And this is how stringers work. Now, we said", "tokens": [472, 11, 597, 307, 2293, 437, 311, 516, 281, 1051, 13, 400, 341, 307, 577, 6798, 433, 589, 13, 823, 11, 321, 848], "temperature": 0.0, "avg_logprob": -0.2330198848948759, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.416133040445857e-05}, {"id": 163, "seek": 129640, "start": 1303.2, "end": 1309.44, "text": " that small talk, we said that, we said that small talk was created by Alan Kay and he", "tokens": [300, 1359, 751, 11, 321, 848, 300, 11, 321, 848, 300, 1359, 751, 390, 2942, 538, 16442, 14179, 293, 415], "temperature": 0.0, "avg_logprob": -0.2330198848948759, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.416133040445857e-05}, {"id": 164, "seek": 129640, "start": 1309.44, "end": 1318.4, "text": " coined object-oriented. Well, actually, he created small talk with explicit, explicitly", "tokens": [45222, 2657, 12, 27414, 13, 1042, 11, 767, 11, 415, 2942, 1359, 751, 365, 13691, 11, 20803], "temperature": 0.0, "avg_logprob": -0.2330198848948759, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.416133040445857e-05}, {"id": 165, "seek": 131840, "start": 1318.4, "end": 1326.4, "text": " with his ideas of what object-oriented is supposed to be. And it's important, because", "tokens": [365, 702, 3487, 295, 437, 2657, 12, 27414, 307, 3442, 281, 312, 13, 400, 309, 311, 1021, 11, 570], "temperature": 0.0, "avg_logprob": -0.1581594603402274, "compression_ratio": 1.5281385281385282, "no_speech_prob": 1.3172890248824842e-05}, {"id": 166, "seek": 131840, "start": 1326.4, "end": 1331.68, "text": " according to Robert Grisimer, who is one of the creators of the Go programming language,", "tokens": [4650, 281, 7977, 2606, 271, 9713, 11, 567, 307, 472, 295, 264, 16039, 295, 264, 1037, 9410, 2856, 11], "temperature": 0.0, "avg_logprob": -0.1581594603402274, "compression_ratio": 1.5281385281385282, "no_speech_prob": 1.3172890248824842e-05}, {"id": 167, "seek": 131840, "start": 1331.68, "end": 1338.2, "text": " this is what, small talk was actually the inspiration for this kind of interface conversion,", "tokens": [341, 307, 437, 11, 1359, 751, 390, 767, 264, 10249, 337, 341, 733, 295, 9226, 14298, 11], "temperature": 0.0, "avg_logprob": -0.1581594603402274, "compression_ratio": 1.5281385281385282, "no_speech_prob": 1.3172890248824842e-05}, {"id": 168, "seek": 131840, "start": 1338.2, "end": 1345.8400000000001, "text": " so that at runtime, we can actually check if a type has certain methods. And Russ Cox", "tokens": [370, 300, 412, 34474, 11, 321, 393, 767, 1520, 498, 257, 2010, 575, 1629, 7150, 13, 400, 3878, 41576], "temperature": 0.0, "avg_logprob": -0.1581594603402274, "compression_ratio": 1.5281385281385282, "no_speech_prob": 1.3172890248824842e-05}, {"id": 169, "seek": 134584, "start": 1345.84, "end": 1352.36, "text": " compared it to duck typing. And by the way, this is a really, really nice read. So if", "tokens": [5347, 309, 281, 12482, 18444, 13, 400, 538, 264, 636, 11, 341, 307, 257, 534, 11, 534, 1481, 1401, 13, 407, 498], "temperature": 0.0, "avg_logprob": -0.16490083270602757, "compression_ratio": 1.65, "no_speech_prob": 8.317296305904165e-05}, {"id": 170, "seek": 134584, "start": 1352.36, "end": 1358.4399999999998, "text": " you just Google Russ Cox duck typing, you will find it. It is a really nice read. He explains", "tokens": [291, 445, 3329, 3878, 41576, 12482, 18444, 11, 291, 486, 915, 309, 13, 467, 307, 257, 534, 1481, 1401, 13, 634, 13948], "temperature": 0.0, "avg_logprob": -0.16490083270602757, "compression_ratio": 1.65, "no_speech_prob": 8.317296305904165e-05}, {"id": 171, "seek": 134584, "start": 1358.4399999999998, "end": 1364.04, "text": " how the runtime does it and also how the caching works, because obviously you cannot compute", "tokens": [577, 264, 34474, 775, 309, 293, 611, 577, 264, 269, 2834, 1985, 11, 570, 2745, 291, 2644, 14722], "temperature": 0.0, "avg_logprob": -0.16490083270602757, "compression_ratio": 1.65, "no_speech_prob": 8.317296305904165e-05}, {"id": 172, "seek": 134584, "start": 1364.04, "end": 1369.36, "text": " well, compile time, you cannot compute every type against all the interfaces in the world.", "tokens": [731, 11, 31413, 565, 11, 291, 2644, 14722, 633, 2010, 1970, 439, 264, 28416, 294, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.16490083270602757, "compression_ratio": 1.65, "no_speech_prob": 8.317296305904165e-05}, {"id": 173, "seek": 136936, "start": 1369.36, "end": 1377.9599999999998, "text": " It's really, really nice. And finally, we have a surprise witness. Martier is going", "tokens": [467, 311, 534, 11, 534, 1481, 13, 400, 2721, 11, 321, 362, 257, 6365, 7286, 13, 5807, 811, 307, 516], "temperature": 0.0, "avg_logprob": -0.20959978945115032, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.00029529695166274905}, {"id": 174, "seek": 136936, "start": 1377.9599999999998, "end": 1382.08, "text": " to be the proxy of said surprise witness. Do you have your?", "tokens": [281, 312, 264, 29690, 295, 848, 6365, 7286, 13, 1144, 291, 362, 428, 30], "temperature": 0.0, "avg_logprob": -0.20959978945115032, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.00029529695166274905}, {"id": 175, "seek": 136936, "start": 1382.08, "end": 1385.36, "text": " I am here.", "tokens": [286, 669, 510, 13], "temperature": 0.0, "avg_logprob": -0.20959978945115032, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.00029529695166274905}, {"id": 176, "seek": 136936, "start": 1385.36, "end": 1396.28, "text": " So before I introduce our witness, I am going to ask the witness, do you remember, given", "tokens": [407, 949, 286, 5366, 527, 7286, 11, 286, 669, 516, 281, 1029, 264, 7286, 11, 360, 291, 1604, 11, 2212], "temperature": 0.0, "avg_logprob": -0.20959978945115032, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.00029529695166274905}, {"id": 177, "seek": 139628, "start": 1396.28, "end": 1403.04, "text": " an interview in 2010, to Danny Kalev?", "tokens": [364, 4049, 294, 9657, 11, 281, 16682, 591, 1220, 85, 30], "temperature": 0.0, "avg_logprob": -0.31404197917265053, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.0013829716481268406}, {"id": 178, "seek": 139628, "start": 1403.04, "end": 1405.56, "text": " I don't recall.", "tokens": [286, 500, 380, 9901, 13], "temperature": 0.0, "avg_logprob": -0.31404197917265053, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.0013829716481268406}, {"id": 179, "seek": 139628, "start": 1405.56, "end": 1407.92, "text": " Well it's on the internet, so it must be true.", "tokens": [1042, 309, 311, 322, 264, 4705, 11, 370, 309, 1633, 312, 2074, 13], "temperature": 0.0, "avg_logprob": -0.31404197917265053, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.0013829716481268406}, {"id": 180, "seek": 139628, "start": 1407.92, "end": 1409.72, "text": " It's true.", "tokens": [467, 311, 2074, 13], "temperature": 0.0, "avg_logprob": -0.31404197917265053, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.0013829716481268406}, {"id": 181, "seek": 139628, "start": 1409.72, "end": 1423.08, "text": " I submit into evidence a web page. Exhibit 90210. So please read a portion of the text", "tokens": [286, 10315, 666, 4467, 257, 3670, 3028, 13, 2111, 5455, 270, 4289, 17, 3279, 13, 407, 1767, 1401, 257, 8044, 295, 264, 2487], "temperature": 0.0, "avg_logprob": -0.31404197917265053, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.0013829716481268406}, {"id": 182, "seek": 142308, "start": 1423.08, "end": 1426.6, "text": " from the web page in your own voice.", "tokens": [490, 264, 3670, 3028, 294, 428, 1065, 3177, 13], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 183, "seek": 142308, "start": 1426.6, "end": 1432.12, "text": " Go is an object oriented, even though it doesn't have the notion of a class, the type system", "tokens": [1037, 307, 364, 2657, 21841, 11, 754, 1673, 309, 1177, 380, 362, 264, 10710, 295, 257, 1508, 11, 264, 2010, 1185], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 184, "seek": 142308, "start": 1432.12, "end": 1439.32, "text": " is more general. Any type, even basic types such as integers and strings, can have minutes.", "tokens": [307, 544, 2674, 13, 2639, 2010, 11, 754, 3875, 3467, 1270, 382, 41674, 293, 13985, 11, 393, 362, 2077, 13], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 185, "seek": 142308, "start": 1439.32, "end": 1445.1999999999998, "text": " Thank you very much. So what makes you such an expert to be able to say such, to make", "tokens": [1044, 291, 588, 709, 13, 407, 437, 1669, 291, 1270, 364, 5844, 281, 312, 1075, 281, 584, 1270, 11, 281, 652], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 186, "seek": 142308, "start": 1445.1999999999998, "end": 1447.32, "text": " some such claims?", "tokens": [512, 1270, 9441, 30], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 187, "seek": 142308, "start": 1447.32, "end": 1449.72, "text": " I co-created the language.", "tokens": [286, 598, 12, 66, 26559, 264, 2856, 13], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 188, "seek": 142308, "start": 1449.72, "end": 1451.96, "text": " You created the language. What is your name?", "tokens": [509, 2942, 264, 2856, 13, 708, 307, 428, 1315, 30], "temperature": 0.0, "avg_logprob": -0.2095434556313611, "compression_ratio": 1.613821138211382, "no_speech_prob": 0.0019126379629597068}, {"id": 189, "seek": 145196, "start": 1451.96, "end": 1454.4, "text": " Rob Pike.", "tokens": [5424, 46791, 13], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 190, "seek": 145196, "start": 1454.4, "end": 1456.0, "text": " Thank you, Rob. New glasses?", "tokens": [1044, 291, 11, 5424, 13, 1873, 10812, 30], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 191, "seek": 145196, "start": 1456.0, "end": 1459.56, "text": " Yeah, new dress. When they made it.", "tokens": [865, 11, 777, 5231, 13, 1133, 436, 1027, 309, 13], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 192, "seek": 145196, "start": 1459.56, "end": 1468.6000000000001, "text": " Thank you very much. Thank you, Martia.", "tokens": [1044, 291, 588, 709, 13, 1044, 291, 11, 5807, 654, 13], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 193, "seek": 145196, "start": 1468.6000000000001, "end": 1474.56, "text": " So yes, Rob Pike actually said that in 2010. I don't know if he actually changed his mind", "tokens": [407, 2086, 11, 5424, 46791, 767, 848, 300, 294, 9657, 13, 286, 500, 380, 458, 498, 415, 767, 3105, 702, 1575], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 194, "seek": 145196, "start": 1474.56, "end": 1481.56, "text": " since. But the truth is that I feel that at this point it is clearly a matter of opinion.", "tokens": [1670, 13, 583, 264, 3494, 307, 300, 286, 841, 300, 412, 341, 935, 309, 307, 4448, 257, 1871, 295, 4800, 13], "temperature": 0.0, "avg_logprob": -0.2201206467368386, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0007973400643095374}, {"id": 195, "seek": 148156, "start": 1481.56, "end": 1487.3999999999999, "text": " So I would like to know yours since you are the jury.", "tokens": [407, 286, 576, 411, 281, 458, 6342, 1670, 291, 366, 264, 19516, 13], "temperature": 0.0, "avg_logprob": -0.18444125935182734, "compression_ratio": 1.3656716417910448, "no_speech_prob": 0.005165690556168556}, {"id": 196, "seek": 148156, "start": 1487.3999999999999, "end": 1504.08, "text": " Voting is now open. So the verdict. It's verdict time. I hope it's now open. Yeah, it is.", "tokens": [691, 17001, 307, 586, 1269, 13, 407, 264, 33957, 13, 467, 311, 33957, 565, 13, 286, 1454, 309, 311, 586, 1269, 13, 865, 11, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.18444125935182734, "compression_ratio": 1.3656716417910448, "no_speech_prob": 0.005165690556168556}, {"id": 197, "seek": 148156, "start": 1504.08, "end": 1510.56, "text": " The co-team is not permitted to answer.", "tokens": [440, 598, 12, 975, 335, 307, 406, 28658, 281, 1867, 13], "temperature": 0.0, "avg_logprob": -0.18444125935182734, "compression_ratio": 1.3656716417910448, "no_speech_prob": 0.005165690556168556}, {"id": 198, "seek": 151056, "start": 1510.56, "end": 1518.1599999999999, "text": " I believe one of my members asked the co-team last year if go is object oriented.", "tokens": [286, 1697, 472, 295, 452, 2679, 2351, 264, 598, 12, 975, 335, 1036, 1064, 498, 352, 307, 2657, 21841, 13], "temperature": 0.0, "avg_logprob": -0.20883969337709488, "compression_ratio": 1.103448275862069, "no_speech_prob": 0.0005238198209553957}, {"id": 199, "seek": 151056, "start": 1518.1599999999999, "end": 1532.6799999999998, "text": " That's a dare.", "tokens": [663, 311, 257, 8955, 13], "temperature": 0.0, "avg_logprob": -0.20883969337709488, "compression_ratio": 1.103448275862069, "no_speech_prob": 0.0005238198209553957}, {"id": 200, "seek": 153268, "start": 1532.68, "end": 1552.04, "text": " I am going to give you 35 more seconds because we have to wrap it up.", "tokens": [286, 669, 516, 281, 976, 291, 6976, 544, 3949, 570, 321, 362, 281, 7019, 309, 493, 13], "temperature": 0.0, "avg_logprob": -0.19159889221191406, "compression_ratio": 1.1140350877192982, "no_speech_prob": 0.0015106435166671872}, {"id": 201, "seek": 153268, "start": 1552.04, "end": 1561.72, "text": " Am I correct? You already see 105 judgments. 108. Oh, no.", "tokens": [2012, 286, 3006, 30, 509, 1217, 536, 33705, 40337, 13, 41342, 13, 876, 11, 572, 13], "temperature": 0.0, "avg_logprob": -0.19159889221191406, "compression_ratio": 1.1140350877192982, "no_speech_prob": 0.0015106435166671872}, {"id": 202, "seek": 156172, "start": 1561.72, "end": 1572.04, "text": " I created a bunch of bots.", "tokens": [286, 2942, 257, 3840, 295, 35410, 13], "temperature": 0.0, "avg_logprob": -0.26298654840347613, "compression_ratio": 1.21875, "no_speech_prob": 0.0010821393225342035}, {"id": 203, "seek": 156172, "start": 1572.04, "end": 1582.3600000000001, "text": " All right. So I have to close this. Unfortunately, let's find out what you said.", "tokens": [1057, 558, 13, 407, 286, 362, 281, 1998, 341, 13, 8590, 11, 718, 311, 915, 484, 437, 291, 848, 13], "temperature": 0.0, "avg_logprob": -0.26298654840347613, "compression_ratio": 1.21875, "no_speech_prob": 0.0010821393225342035}, {"id": 204, "seek": 156172, "start": 1582.3600000000001, "end": 1588.72, "text": " That's interesting. Why can't I see the results?", "tokens": [663, 311, 1880, 13, 1545, 393, 380, 286, 536, 264, 3542, 30], "temperature": 0.0, "avg_logprob": -0.26298654840347613, "compression_ratio": 1.21875, "no_speech_prob": 0.0010821393225342035}, {"id": 205, "seek": 158872, "start": 1588.72, "end": 1608.72, "text": " Yeah, I don't know what happened.", "tokens": [865, 11, 286, 500, 380, 458, 437, 2011, 13], "temperature": 0.0, "avg_logprob": -0.37486117226736887, "compression_ratio": 1.0140845070422535, "no_speech_prob": 0.0015891401562839746}, {"id": 206, "seek": 158872, "start": 1608.72, "end": 1615.72, "text": " Let's do this. That's what I did. Wow.", "tokens": [961, 311, 360, 341, 13, 663, 311, 437, 286, 630, 13, 3153, 13], "temperature": 0.0, "avg_logprob": -0.37486117226736887, "compression_ratio": 1.0140845070422535, "no_speech_prob": 0.0015891401562839746}, {"id": 207, "seek": 161572, "start": 1615.72, "end": 1627.52, "text": " Okay. So I am going to cancel these proceedings because clearly you're out of your minds.", "tokens": [1033, 13, 407, 286, 669, 516, 281, 10373, 613, 37254, 570, 4448, 291, 434, 484, 295, 428, 9634, 13], "temperature": 0.0, "avg_logprob": -0.2397674322128296, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.0006117094890214503}, {"id": 208, "seek": 161572, "start": 1627.52, "end": 1639.3600000000001, "text": " As the judge, I condemn myself to providing you with stickers, lots and lots and lots", "tokens": [1018, 264, 6995, 11, 286, 30733, 2059, 281, 6530, 291, 365, 21019, 11, 3195, 293, 3195, 293, 3195], "temperature": 0.0, "avg_logprob": -0.2397674322128296, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.0006117094890214503}, {"id": 209, "seek": 161572, "start": 1639.3600000000001, "end": 1644.56, "text": " of stickers. Iris, Rona, thank you very much. I have to get off.", "tokens": [295, 21019, 13, 40789, 11, 497, 4037, 11, 1309, 291, 588, 709, 13, 286, 362, 281, 483, 766, 13], "temperature": 0.0, "avg_logprob": -0.2397674322128296, "compression_ratio": 1.437125748502994, "no_speech_prob": 0.0006117094890214503}, {"id": 210, "seek": 164456, "start": 1644.56, "end": 1658.72, "text": " Thank you. If you have a sticker, you have also have to give her one if she convinced", "tokens": [1044, 291, 13, 759, 291, 362, 257, 20400, 11, 291, 362, 611, 362, 281, 976, 720, 472, 498, 750, 12561], "temperature": 0.0, "avg_logprob": -0.29856694539388023, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.004278157372027636}, {"id": 211, "seek": 164456, "start": 1658.72, "end": 1663.72, "text": " you. Again, housekeeping announcement, if you submitted", "tokens": [291, 13, 3764, 11, 48033, 12847, 11, 498, 291, 14405], "temperature": 0.0, "avg_logprob": -0.29856694539388023, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.004278157372027636}, {"id": 212, "seek": 164456, "start": 1663.72, "end": 1669.1599999999999, "text": " lightning talk, check your mail, matrix, discord, WhatsApp, whatever you sent to me, I'll try", "tokens": [16589, 751, 11, 1520, 428, 10071, 11, 8141, 11, 32989, 11, 30513, 11, 2035, 291, 2279, 281, 385, 11, 286, 603, 853], "temperature": 0.0, "avg_logprob": -0.29856694539388023, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.004278157372027636}, {"id": 213, "seek": 166916, "start": 1669.16, "end": 1674.8000000000002, "text": " to contact you if you got accepted. If you aren't sure, our master on account has", "tokens": [281, 3385, 291, 498, 291, 658, 9035, 13, 759, 291, 3212, 380, 988, 11, 527, 4505, 322, 2696, 575], "temperature": 0.0, "avg_logprob": -0.37012697302776837, "compression_ratio": 1.0945945945945945, "no_speech_prob": 0.004059434402734041}, {"id": 214, "seek": 167480, "start": 1674.8, "end": 1702.28, "text": " contacted me on Twitter.", "tokens": [21546, 385, 322, 5794, 13], "temperature": 1.0, "avg_logprob": -2.1872904035780163, "compression_ratio": 0.75, "no_speech_prob": 0.0005011676694266498}], "language": "en"}