{"text": " Hi, how are you doing? Welcome to FOSDOM. Congratulations on managing to get inside a room. This is the largest one I've ever seen. Usually it's just looking at the doors of ones that are full. So yeah, my name's Daniel Stone. I'm here to just give a relatively high level overview of the graphic stack. My hope with this, like I said, it's fairly high level, is to give you a decent understanding of all the different components that go into the modern graphic stack, how they fit together. So if you're trying to work with it anyway, you won't be trying to debug it because it's already perfect, but just being able to give you a good understanding of how everything does fit together. And now we have graphics output working, so that's a good start for this talk because that wasn't looking likely five minutes ago. Right, so the graphic stack looks like this. Any questions? That's the simplified version as well. More sensibly, if we try to build it up incrementally, just try and work through all of the different pieces and different components in essentially the order of near to far, which is, you know, in networking you think of upstream and downstream, usually in the graphics for the lot of what we think of is what's close to your eye and what's far from your eye. So in our case, the display is closest to your eyes, and this one's incredibly bright. In between, just underneath the display, controlling the display and giving you determining what should be shown, we have the window system layer, so that's your Wayland. It can be X11, but we don't talk about that. And then at the very back end, at the upstream side, you've got the clients, which are actually presenting the thing that you want to show. But then it turns out that your window system also uses the GPU to render, so it's not just OpenGL games that use accelerated graphics. It's the window system, so the nice diagram already gets a bit muddied because we're breaking the layers. And then maybe the window system uses some media output because you want to stream stuff onto it or, you know, to stream a conference talk, hello. And maybe one of your clients is also a window system because it turns out that even Chrome is a Wayland server these days, so our lovely little, we have three classes of three main components of our graphic stack. This illusion's already disappeared. But, you know, let's pretend that everything is fine and let's just try to build it up. So for us, DOM and KMS, the acronyms you mostly see, the direct rendering manager is anything to do with graphics or display inside the kernel. It's a weird legacy name. And those are all of the GPU and display drivers. And KMS is very specifically the part of DRM that actually controls the display. So when you're talking about HDMI output or something like that, then it's going to be KMS. And KMS is that very last step in the pipeline, the one that's closest to your eye. Its job is to turn pixels into light. Some people will tell you that there's a thing called FB Dev as well, but that's not right. FB Dev doesn't exist. And, yeah, in the division of responsibility as we go one step further back from your eye, the Windows system's job is to fundamentally to take a bunch of images from clients, combine them into a single image or multiple images if you have multiple displays, get them out to the eye and bring input events back. So, you know, Wayland is a protocol and nothing else. There's a very, there's a very small C layer in Wayland, which is really just IPC. And apart from that, it's just protocols and conventions. So, you know, MATA, the GNOME users is a Wayland server. Other popular ones would be KWIN, Western, WL routes. That's where all the implementation actually lies. And, yeah, like I say, they just combine window images together, get them out to the output device in the reverse direction they're bringing input back. X11 doesn't exist either. So, that's, we'll move on. Yeah. So, OpenGL and Vulkan, in a way they fit in. Their APIs, as we know for accelerated 3D, so you provide them a mesh and some textures and some shaders. Run this thing, make it fast. Great. But they only handle rendering. So, GL and Vulkan themselves have no concept of I want to be able to display to Wayland. That comes in with EGL and what we call the Vulkan WSI for window system integration layer. Their job is to bridge the two worlds. So, with OpenGL, you have EGL on the side that's the bridge between GL and say Wayland. With Vulkan, you have Core Vulkan and then the WSI on the side is that bridge bringing all the content across to the window system. And then there's GBM as well, which is maybe the most ill-fitting part of what we have. GBM is kind of a side channel to bridge EGL to KMS. So, right now, I mean, this is all happening through GNOME shell and MOTA. It's using GL to render my image with the next slide as a bonus preview and this one that you can see. MOTA, yeah, it uses GL to render and it uses EGL plus GBM to be able to pull images out to kernel mode setting. And GBM is a really, really strange and idiosyncratic bridge. Some people will tell you that GBM stands for the generic buffer manager. That's definitely not true. Yeah, we had an idea that GBM would be the thing that let people kind of peek under the hood of what EGL does as an implementation and be able to generically allocate buffers. We got as far as making it work for kernel mode setting and then realized how terrible the whole problem space was. So, we just pretended that it was never an acronym, that it's not generic and moved on with our words. So, at the end of all that, before we get into something more meaty, we've got clients rendering the content, maybe with the GPU, maybe just on the CPU, maybe it's just doing mem copy. It will pass a handle to that content over to the Wayland compositor with some metadata, some context. The compositor is going to pull it all together, choose how it's going to display it, apply any kind of policy or what have you. And then it's going to just push that final image out to KMS, which is going to turn it into electrons. So, we've got the diagram that's back to making sense. So, if we're looking at how KMS is actually put together, every single discrete device in your system is its own. I just have an Intel up top here. I have one DRM device, which is the entire Intel GPU and display complex. If you're on ARM systems usually, you're going to have two devices. The display and GPU are separate IP blocks from separate vendors who aren't really on speaking terms. So, you'll have one DRM device for your display controller and another DRM device for your GPU and they're completely separate. So, yeah, four KMS devices. We've got connectors representing real displays. So, we've got an embedded display port connector here and various display ports and HDMI connectors from my external outputs. CRTCs, that does stand for CRT controller because that's how long ago it was when we designed all this. CRTCs are the thing immediately upstream from connectors. They generate a pixel stream for the displays. So, any kind of scaling, cropping, compositing is done in the CRTC space. And CRTCs are just a combination of planes. So, planes, they take frame buffers. They can scale. They can be positioned within the CRTC. They can be stacked. And then the CRTC is the one that combines them. So, in quite a poor diagram, because for a graphics person, I can't actually draw very well, more of a text person, to be honest. Yeah, it's the frame buffer is just the client content. The plane is the one that's going to do any format conversion or scaling or what have you. Then the CRTC combines them all together, pushes them out to the connector. Then I think the important thing to bear in mind if you're trying to reason about graphics pipelines is that timing flows backwards. Timing never flows forwards. Because when you've got a physical display, it's going to refresh at a certain point in time. Unless it's VRR, no one asked about VRR. We don't quite know how that works yet. But timing flows backwards because this HDMI output is ticking at 60 hertz. That's happening at a very, very fixed point in time. And so that's the beginning of our reference. When we know that we want to present stuff to HDMI, we know exactly when the next refresh cycle is going to start, the next one after that, so on and so forth. So timing is always flowing backwards. This goes right the whole way from the connector back to the CRTC, back to the Windows system, and then back to the clients. It's always starting from that fixed hardware source. So yeah, you want to use DRM and KMS. Good for you. I'd recommend it. It's just a set of objects, like everything that turns out in computer science. It's objects with properties, and that's it. So you open your KMS device, you enumerate a list of objects, your CRTCs, your connectors, your planes, you look into their properties. So this connector type is DisplayPort, this one's HDMI, whatever. And then any time you want to actually affect something, so display new content, change resolution, whatever, that's all done through what we call Atomic Mode Setting, which is about 10 years old now, and it's a very low-level property-based interface. I wouldn't really recommend trying to drive it yourself, but it is possible. So Atomic is just a list of properties. So you've got all of your different objects and their different types. You know how you want to put them together. You know that I want this plane to go to this CRTC, to this connector, and so you take all of those objects, you do a massive property set, and then you do an atomic check before you commit just to see if the configuration is going to be accepted. One of the things about display hardware is that it's weird. It's really, really weird. There are infinite constraints on what you can actually do with the display hardware. So you might have three or four planes that you can use to composite content without using the GPU, but you can only use a couple of them at a time, or only one of them can have compressed content, or only two of them can be scaled. So because we don't have a good generic way of expressing these constraints and of constraint solving within the kernel, we do the dumbest possible thing. It's brute force. We just try every possible configuration that will get us to where we want to and see which one's going to stick. Then yeah, once you've gone through all that, you've done your atomic commit, you've got a frame on screen, it lives there until you change it. Because DRM is, it's a frame by frame API. It's not a producer-consumer where you connect a camera to an output and magic things occur and you get a video stream. You know, that's the domain of high-level frameworks like say PipeWire and Gstreamer have that pipeline concept. DRM is quite dumb. It just does what you tell it to, and it doesn't do anything else until you tell it to do something else. So yeah, we've essentially summing up, you know, we've enumerated all of our devices, we've used the DRM to do that, all of the objects. And again, as with timing, we're working backwards from the starting point of a connector. So we know that HDMI1 is the thing that we want to light up, so you always work backwards from that when you're building up your object tree. And then, you know, you are going to need a way to allocate some memory to display. It's not just a malloc pointer. So we have Gem, the graphics execution manager. It doesn't manage execution of any graphics jobs, it's just a memory allocator. This was about the point where we stopped actually naming acronyms because we've got almost all of them wrong. So Gem, you see a lot of, because that's the base of our kernel allocator for all graphics and display memory. And BO is something you see a lot of as well. So really, I told you about it, acronyms. So Gem BO is just, like a malloc pointer, it's untyped, it's a raw bucket of bytes. It can be pixel buffers, it can be shaders, it can be geometry meshes, whatever you want it to be. It doesn't have any properties or metadata, just a length and some content. But you can't allocate them generically because hardware is really that weird. We gave up on that a long time ago. So you're going to need some kind of hardware specific API to come up with a Gem BO. And you might be quite disappointed about that, which is reasonable. So we came up with dumb buffers as a specific class of Gem BOs designed specifically for CPU rendering when you're displaying KMS. So if you have something like Plymouth for your early start splash screen, that's not going to be using the GPU. It's just going to be doing CPU rendering, no device dependent code. And dumb buffers are the path to that there. I just wanted to get something up on the screen. I don't care if it's amazingly fast or efficient, I just need it to work and work everywhere. So this is actually a generic API inside KMS dumb buffers. Gives you a Gem BO, you can map it, you can fill it up with some nice pixels. And then wrap that in a KMS frame buffer is what annotates the BO with stuff like format and width and height and stuff that people think might be important. So yeah, like I said, you can use it for splash screens. Please don't try to use it for other stuff. It's not a generic memory allocation API either. It's just the thing that works. So yeah, with all that being said, that's a reasonable end-to-end picture of how to use KMS. You've allocated all the buffers you need or imported them from other clients. You've attached those frame buffers to planes. You've stuck them on a CRTC to get them in a kind of logical space and stacked against each other. You've set your CRTC and connector up for the output path. Commit everything. Hopefully that works. Then the kernel tells you that it's complete. You know when the next frame is going to be and you just keep on going. You can't click these links if you're sitting in this room, but they are clickable on the PDF. There's a bunch of pretty decent documentation examples and formats because I'm not trying to show you the entire thing. Just give you a good idea and some pointers. If you're bored of KMS or you just don't find display that exciting, you might want to move on to the Windows system world. There's a super quick one through Wayland. Again, it's the same thing. It's clients giving you images and you're giving clients pointer and keyboard and top screen events in return. I think the main thing about Wayland that people take a while to grasp is that it's descriptive rather than prescriptive. What I mean by that is in X11, when you have a pop-up, you tell X as a client, put this window exactly here on the screen. Give me all of the input events until I tell you otherwise because you're dictating specific outcomes. Wayland is exactly the other direction from that. The client tells the compositor, this is a pop-up. The compositor does the right thing for pop-ups, including capturing input and making it always be on top, but still letting your screensaver work, which is nice. It's just about the client annotating everything it has with a bunch of descriptive information and properties and then relying on the server to actually implement the right semantics. There's a fair bit of trust, but it gives us much, much more flexibility because by the end after how many years of X11, we were kind of painted into a corner really because clients were just dictating so much. We tried to make sure that there were no pods in Wayland that required the compositor to do a huge amount of work because it's such a critical part of the stack that you can't have it burning loads and loads of time. Like I said at the start, your compositor could be GNOME, K-Win, could be Western, Sway or something like that. They're all designed for different things and different use cases like window managers in X11 were. I think Western is the best one because I work on it. It's basically designed for everything that isn't a desktop, literally planes, trains and automobiles, digital signage, that kind of thing. It's really, really efficient and predictable and reliable, but I do use a desktop so I have GNOME on this one. There are absolutely a pile of them to choose from, but they all use the same protocol so they all look alike to the client. It's just a large collection of essentially all extension interfaces. WLBuffer is much like a frame buffer to handle to some pixels somewhere, no other information just width and height. A WL surface is a window, can be a pop-up, can be an application window, can be a subsurface. It takes the buffer, it just crops it and optionally it takes input back. XDG surface is the main one you'd interact with really because that's what adds all the desktop-like things of being able to resize and move windows and all that kind of thing. WLC is where the input comes from because we're still bad at naming, it turns out. That one was my fault actually. We did design Wailand fundamentally to be really, really easy to extend so there are quite a pile of extensions that you need to sort through and deal with. The nice thing is with it having been designed with KMS in mind, it's pretty similar. You've got your compositor doing the final output at the end and that's composed of a bunch of windows and surfaces which have got buffers attached to them. The compositor is the ultimate source of the timing and it flows that timing back to the clients as feedback. If you take that, it looks exactly the same as the KMS diagram we had earlier which is not really any coincidence and using that is exactly the same flow as KMS. This slide was almost copy and paste. Again, I'm not trying to give you a complete guide to how to write every Wailand client in the world. Please do use a tool kit. They will make your lives much easier so GTK, QT, STL, IMGUI, whatever. Use a compositor tool kit as well if you like. Libwestern in particular and WL routes are tool kits you can use to build compositors on top of good code bases. There's some links in here as well to Wailand info is a good tool to inspect. WL hacks is a debugging tool. Western debug is another debugging tool. There's some sample clients as well. The simple SHM and simple EGL are our kind of references of how do I actually start using this and start approaching it. Now we've got all that out of the way. I'm not going to try and explain GL to you because we'd be here forever. Like I said, it's GL as a model for accelerated 3D is clients providing the vertex data so you're kind of wire frame geometry, your input textures, material images, and your shader programs as well to run to generate the final output. No shaders can deform the geometry so you can do cool stuff. You can also do things like lighting per pixel and do that in a nice reflective way that's all computational. I guess the main thing to recognize about GPU is they're enormously parallel so thousands of threads, really. There's not much in the way of synchronization or shared memory. They really, GPUs can't do branching like CPUs. They want to have everything set up for them a long time in advance and just do straight line things from there. It's a long, deep pipeline essentially and you want to make that roughly as static as you can. The cost of being enormously fast and really, really powerful, it turns out, is that they're really power hungry. That's why we have composition in the display hardware as well because it turns out that just spinning up your GPU once per frame to produce the final display output. I worked on a device where the video runtime went from five hours if we didn't use the GPU to four hours if we did. It's a really measurable cost to get a GPU involved. You only want to do it if you've got the right reasons for it or if you actually need it. Like I said, it's just a pure 3D only API when you talk about GL and GLES because it came out of SGI where you told it to draw and it was drawing because there's only one screen and obviously it's going to come out at the right place in the screen as a simpler time. Then SGI realized that they needed some more nuance. They brought in GLX, which was the first go at integrating OpenGL with the Windows system. Originally it had the X server processing all the commands. That was terrible. We came up with the DRI for direct rendering infrastructure, not let the clients directly access the GPU. It relied on central memory allocation. We came up with DRI2 where the main innovation was that clients would manage their own memory in cooperation with the kernel and also execute all of their own commands. That was so good that any time you see DRI it just means accelerated rendering, so roughly describing the last 20 years. Any time you see DRI2 it doesn't mean actual DRI2 in X11. It just means this kind of looks like a modern Windows system by which I mean about the last 15 years. That can be confusing because those two terms are massively ambiguous, but if you ever see DRI2 it probably means that you're somewhere good. Then yeah, EGL is an abstraction of GLX. Rather than just plugging GL into X11 it lets you do Wayland, Android, whatever. All it really does is give you Windows that you can share with the Windows system, gives you some vague notion of timing, but it doesn't have any kind of events, so the only way you can get a consistent frame timing is if you block a lot in EGL. It just tries to hide everything and make it implicit, which again is where GBM comes in because that's what lets us steal buffers away from EGL, push them into KMS for display, handle our own timing and do it properly this time. EGL has that shape and then not coincidentally Vulkan has a fairly similar shape. Vulkan is the rendering API and that's it. Vulkan WSI is the EGL equivalent which provides that Windows system integration of creating Windows, posting content to them and so on. The main difference with Vulkan is that it's really, really explicit and clear about what it's doing. The downside is that because it's so explicit and clear you end up typing a hell of a lot of code. So it's more effort to use, but there's no magic hidden under Vulkan. You know exactly what's going on for better or worse. It's really good on the desktop that on mobile SOCs the hardware isn't necessarily entirely there yet. If you're doing high performance things or you just like seeing what's going on under the hood, I'd recommend Vulkan. And yeah, I think about the last bit that we'd end up having time for is I keep on going on about how we, you know, just saying that EGL will get things from GL to Wayland. The way we do that is DMA buff. It's a kernel concept about sharing memory regions between different subsystems, different processes, different contexts, whatever. So, you know, we've already got in the graphics side of things. We've got the gem buffer objects, but they're local to one particular device and to one particular user context. So, you know, when you want to export a buffer to your Wayland server or share it between, you know, V4L for your video capture and, excuse me, sorry, V4L for your video capture and your GPU to do some analysis on it. That's DMA buff, which just gives you a file descriptor you can use as a handle to that memory area and import it into different contexts or subsystems or places. And that's completely consistent throughout the stack, like all of Wayland, EGL, KMS, Vulkan, everything I've discussed has DMA buff integration because that's our lowest common denominator. So, yeah, we put it all together. I mean, because they're all built on the same building blocks, it's largely how you think it is. Well, hopefully if I've done a decent job of this talk, you know, the client's connecting to the compositor. It's creating a window declaring some very simple annotations about that. It wants to use the GPU, so it creates an EGL context pointing to the Wayland server. I'd like to render over here. The Wayland server has some DMA buff protocols, which tells it what it can and can't accept. The client uses GLES to render into that. That's wrapped in a DMA buff and passed over to the compositor. The compositor is deciding how to place and configure everything. It's importing that DMA buff that it's got from the client to generate one final image. It's then waiting until the next deadline, you know, that sort of 60 hertz cadence that we have. It's waiting until the next deadline to present that out going into KMS. That might be KMS doing its own composition directly in the display hardware or through the GPU itself. It's tough because the display hardware can do that final image composition of taking your sort of four or five images, mashing them all together and coming up with one. It is, like I said, a really measurable win on things like power and memory bandwidth, memory usage as well, but it's kind of complicated in that, you know, it's hard to know, be predictable about when you can and can't use it. It's a bit fiddly. It's one of the reasons I recommend using compositor frameworks like LibWestern, which do do all of this heavy lifting for you. You know, I've spent 10 years of my life trying to solve this problem and wouldn't recommend anyone else does it. It's not even really that interesting. Internally, Western has, like I said, that kind of brute force loop of just trying every possible configuration that could work, seeing what happens and throwing it at KMS to check if that will work. Currently, that's the most advanced one, but yeah, others are catching up. I think really to sum up what I was trying to say about GPUs and efficiency is one of the things that gets collaborate a lot is that no one realizes that every problem on mobile comes down to memory bandwidth. And so you can solve every problem by just copying buffers around more. But when you've got 4K buffers and you've got a low-end device, it turns out that this is always where your performance problem is. It's down in things like copies and naive memory usage. So yeah, that's just one thing to really be aware of is try and go for a zero-copy pipeline because when you have 4K and 144Hz, you really don't have much time and you don't want to spend it all just waiting for slow memory. Yeah, with that, I think we're pretty much coming up on time. So yeah, there's the quick whirlwind tour of how all that fits together. Anyone has any questions or wants to talk about how Wayland's amazing? Please feel free. If you have any questions, please raise your hand. When we launch a game in full screen, for example, does it go straight from GPU to screen or does it go all the way through KMS on that? It will go through the Windows system. So yeah, the question being, if you have a full screen game, will it go straight from the GPU to the display or will the Windows system still be involved? It will still be there, but ideally doing nothing. So it will just take the client buffer, give it directly to KMS and ask KMS to display it in the happy case. But it's always involved as the mediator, so when a notification pops up, it already has control, so it can show it. Hello. I can't. Is it working? Yeah. Okay. So forget the super new big question. When you say the frame buffer is tied to a plane, a plane is not a desktop, a plane is just a window. When you tie a frame buffer to a plane, the plane goes in the compositor. So the plane is a window, it's not the entire desktop. Yeah, exactly. So the CRTC is your final output as one flat image and planes are windows within that CRTC. Thank you. More questions? All right. Hello. Is it working? Hello. You mentioned that kernel mode setting is used turning the pixels into... Sorry, could you please... Sorry. Yeah. You mentioned that KMS kernel mode setting is used to turn the data into pixels on the screen. Is this where graphics card drivers are involved, another vendor-specific software, or is that earlier or later in the pipeline? Sorry, which parameters? So basically, where did graphics card drivers come in? Because I know there's like vendor-specific hardware that requires its own drivers somewhere in kernel space, I believe, so what does this fit in the pipeline? So all of the properties and parameters are defined in kernel space, and we try to standardize them as much as possible. So in the generic world, we do stick pretty religiously to a standard set of parameters that have common behavior across everyone. If you go to things like Android where you have hardware composer and vendor-based tells, it's completely different. And they're all... That's more of a negotiation between kernel and user space, which are both vendor-specific. That answers your question. Do you know if there's any toolkit libraries for writing compositors that are not desktop-specific? Any compositor libraries that are... Libraries for writing compositors that are not desktop-specific. So it's like LibWestern is good for writing desktops, types, things, but for highly embedded use cases, I've found any things that make it easy to write a compositor like that. Yeah, so LibWestern's the one for those kind of embedded or single-purpose use cases. MOTA, which is the basis of GNOME shell, can be used by anyone else, but it's really GPU reliant. And WROOTS is, I guess, kind of in the middle. It's not as friendly and desktop-y as GNOME, but it's not as sort of insanely efficient as Western, and that's the halfway house, I guess. Is there any tool you would recommend for profiling? Sorry, could you speak up? Is there any tool that you would recommend for profiling, the graphics tech? Is there a tool for profiling the graphics tech? Profiling, are there any tools for profiling the graphics tech? Kind of. So Mesa has integration with a tool called Profetto, which is the basis of Android GPU Inspector. There's some support in there for Western, specifically, to interpose its timeline on top of Profetto, but it's pretty patchy, to be honest. We've been working on that basically to try and make it easier so we can stop getting paid for debugging and profiling stuff, to be honest. But yeah, it's a slow process. Profetto is the best one there. I have a question. So why can't we do screen recording or screen sharing in a Bayland? You can. Screen sharing in Bayland is done through the XDG screencast portal and we did that because once, if you try to put it in Bayland itself as like a core protocol for clients to use, it was really going against the grain because everything was designed with this idea of the timing coming from the display and flowing back to the clients. And then once you put it in the other way that the client's receiving content, it really just is a terrible fit with pretty much every interface we had. So it's easier for us to and also working for like sandboxing and containers to go with the XDG portal solution. And yeah, it works every way basically. Okay. I think, yeah. Okay. Thank you, Daniel. Thanks very much. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.120000000000001, "text": " Hi, how are you doing? Welcome to FOSDOM. Congratulations on managing to get inside a room. This is the", "tokens": [2421, 11, 577, 366, 291, 884, 30, 4027, 281, 479, 4367, 35, 5251, 13, 9694, 322, 11642, 281, 483, 1854, 257, 1808, 13, 639, 307, 264], "temperature": 0.0, "avg_logprob": -0.27879475911458335, "compression_ratio": 1.3980099502487562, "no_speech_prob": 0.26932159066200256}, {"id": 1, "seek": 0, "start": 14.120000000000001, "end": 18.92, "text": " largest one I've ever seen. Usually it's just looking at the doors of ones that are full.", "tokens": [6443, 472, 286, 600, 1562, 1612, 13, 11419, 309, 311, 445, 1237, 412, 264, 8077, 295, 2306, 300, 366, 1577, 13], "temperature": 0.0, "avg_logprob": -0.27879475911458335, "compression_ratio": 1.3980099502487562, "no_speech_prob": 0.26932159066200256}, {"id": 2, "seek": 0, "start": 18.92, "end": 26.52, "text": " So yeah, my name's Daniel Stone. I'm here to just give a relatively high level overview", "tokens": [407, 1338, 11, 452, 1315, 311, 8033, 15012, 13, 286, 478, 510, 281, 445, 976, 257, 7226, 1090, 1496, 12492], "temperature": 0.0, "avg_logprob": -0.27879475911458335, "compression_ratio": 1.3980099502487562, "no_speech_prob": 0.26932159066200256}, {"id": 3, "seek": 2652, "start": 26.52, "end": 34.2, "text": " of the graphic stack. My hope with this, like I said, it's fairly high level, is to give you a", "tokens": [295, 264, 14089, 8630, 13, 1222, 1454, 365, 341, 11, 411, 286, 848, 11, 309, 311, 6457, 1090, 1496, 11, 307, 281, 976, 291, 257], "temperature": 0.0, "avg_logprob": -0.12911654578314888, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0001390875841025263}, {"id": 4, "seek": 2652, "start": 34.2, "end": 40.44, "text": " decent understanding of all the different components that go into the modern graphic stack,", "tokens": [8681, 3701, 295, 439, 264, 819, 6677, 300, 352, 666, 264, 4363, 14089, 8630, 11], "temperature": 0.0, "avg_logprob": -0.12911654578314888, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0001390875841025263}, {"id": 5, "seek": 2652, "start": 40.44, "end": 48.36, "text": " how they fit together. So if you're trying to work with it anyway, you won't be trying to", "tokens": [577, 436, 3318, 1214, 13, 407, 498, 291, 434, 1382, 281, 589, 365, 309, 4033, 11, 291, 1582, 380, 312, 1382, 281], "temperature": 0.0, "avg_logprob": -0.12911654578314888, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0001390875841025263}, {"id": 6, "seek": 2652, "start": 48.36, "end": 55.8, "text": " debug it because it's already perfect, but just being able to give you a good understanding", "tokens": [24083, 309, 570, 309, 311, 1217, 2176, 11, 457, 445, 885, 1075, 281, 976, 291, 257, 665, 3701], "temperature": 0.0, "avg_logprob": -0.12911654578314888, "compression_ratio": 1.665158371040724, "no_speech_prob": 0.0001390875841025263}, {"id": 7, "seek": 5580, "start": 55.8, "end": 62.28, "text": " of how everything does fit together. And now we have graphics output working, so that's a good", "tokens": [295, 577, 1203, 775, 3318, 1214, 13, 400, 586, 321, 362, 11837, 5598, 1364, 11, 370, 300, 311, 257, 665], "temperature": 0.0, "avg_logprob": -0.1435076300777606, "compression_ratio": 1.4635416666666667, "no_speech_prob": 3.632862353697419e-05}, {"id": 8, "seek": 5580, "start": 62.28, "end": 71.03999999999999, "text": " start for this talk because that wasn't looking likely five minutes ago. Right, so the graphic", "tokens": [722, 337, 341, 751, 570, 300, 2067, 380, 1237, 3700, 1732, 2077, 2057, 13, 1779, 11, 370, 264, 14089], "temperature": 0.0, "avg_logprob": -0.1435076300777606, "compression_ratio": 1.4635416666666667, "no_speech_prob": 3.632862353697419e-05}, {"id": 9, "seek": 5580, "start": 71.03999999999999, "end": 82.75999999999999, "text": " stack looks like this. Any questions? That's the simplified version as well. More sensibly,", "tokens": [8630, 1542, 411, 341, 13, 2639, 1651, 30, 663, 311, 264, 26335, 3037, 382, 731, 13, 5048, 2923, 3545, 11], "temperature": 0.0, "avg_logprob": -0.1435076300777606, "compression_ratio": 1.4635416666666667, "no_speech_prob": 3.632862353697419e-05}, {"id": 10, "seek": 8276, "start": 82.76, "end": 91.44, "text": " if we try to build it up incrementally, just try and work through all of the different pieces", "tokens": [498, 321, 853, 281, 1322, 309, 493, 26200, 379, 11, 445, 853, 293, 589, 807, 439, 295, 264, 819, 3755], "temperature": 0.0, "avg_logprob": -0.14400923802302434, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.0001448980183340609}, {"id": 11, "seek": 8276, "start": 91.44, "end": 101.92, "text": " and different components in essentially the order of near to far, which is, you know,", "tokens": [293, 819, 6677, 294, 4476, 264, 1668, 295, 2651, 281, 1400, 11, 597, 307, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.14400923802302434, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.0001448980183340609}, {"id": 12, "seek": 8276, "start": 101.92, "end": 107.68, "text": " in networking you think of upstream and downstream, usually in the graphics for the lot of what we", "tokens": [294, 17985, 291, 519, 295, 33915, 293, 30621, 11, 2673, 294, 264, 11837, 337, 264, 688, 295, 437, 321], "temperature": 0.0, "avg_logprob": -0.14400923802302434, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.0001448980183340609}, {"id": 13, "seek": 10768, "start": 107.68, "end": 114.96000000000001, "text": " think of is what's close to your eye and what's far from your eye. So in our case, the display", "tokens": [519, 295, 307, 437, 311, 1998, 281, 428, 3313, 293, 437, 311, 1400, 490, 428, 3313, 13, 407, 294, 527, 1389, 11, 264, 4674], "temperature": 0.0, "avg_logprob": -0.14889490944998604, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.0001762261672411114}, {"id": 14, "seek": 10768, "start": 114.96000000000001, "end": 124.04, "text": " is closest to your eyes, and this one's incredibly bright. In between, just underneath the display,", "tokens": [307, 13699, 281, 428, 2575, 11, 293, 341, 472, 311, 6252, 4730, 13, 682, 1296, 11, 445, 7223, 264, 4674, 11], "temperature": 0.0, "avg_logprob": -0.14889490944998604, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.0001762261672411114}, {"id": 15, "seek": 10768, "start": 124.04, "end": 132.76000000000002, "text": " controlling the display and giving you determining what should be shown, we have the window system", "tokens": [14905, 264, 4674, 293, 2902, 291, 23751, 437, 820, 312, 4898, 11, 321, 362, 264, 4910, 1185], "temperature": 0.0, "avg_logprob": -0.14889490944998604, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.0001762261672411114}, {"id": 16, "seek": 13276, "start": 132.76, "end": 141.92, "text": " layer, so that's your Wayland. It can be X11, but we don't talk about that. And then at the very", "tokens": [4583, 11, 370, 300, 311, 428, 9558, 1661, 13, 467, 393, 312, 1783, 5348, 11, 457, 321, 500, 380, 751, 466, 300, 13, 400, 550, 412, 264, 588], "temperature": 0.0, "avg_logprob": -0.14367170822926056, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.0004447569081094116}, {"id": 17, "seek": 13276, "start": 141.92, "end": 148.07999999999998, "text": " back end, at the upstream side, you've got the clients, which are actually presenting the thing", "tokens": [646, 917, 11, 412, 264, 33915, 1252, 11, 291, 600, 658, 264, 6982, 11, 597, 366, 767, 15578, 264, 551], "temperature": 0.0, "avg_logprob": -0.14367170822926056, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.0004447569081094116}, {"id": 18, "seek": 13276, "start": 148.07999999999998, "end": 157.88, "text": " that you want to show. But then it turns out that your window system also uses the GPU to render,", "tokens": [300, 291, 528, 281, 855, 13, 583, 550, 309, 4523, 484, 300, 428, 4910, 1185, 611, 4960, 264, 18407, 281, 15529, 11], "temperature": 0.0, "avg_logprob": -0.14367170822926056, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.0004447569081094116}, {"id": 19, "seek": 15788, "start": 157.88, "end": 166.28, "text": " so it's not just OpenGL games that use accelerated graphics. It's the window system, so the nice", "tokens": [370, 309, 311, 406, 445, 7238, 19440, 2813, 300, 764, 29763, 11837, 13, 467, 311, 264, 4910, 1185, 11, 370, 264, 1481], "temperature": 0.0, "avg_logprob": -0.12881808213784662, "compression_ratio": 1.529100529100529, "no_speech_prob": 3.949966048821807e-05}, {"id": 20, "seek": 15788, "start": 166.28, "end": 173.96, "text": " diagram already gets a bit muddied because we're breaking the layers. And then maybe the window", "tokens": [10686, 1217, 2170, 257, 857, 8933, 67, 1091, 570, 321, 434, 7697, 264, 7914, 13, 400, 550, 1310, 264, 4910], "temperature": 0.0, "avg_logprob": -0.12881808213784662, "compression_ratio": 1.529100529100529, "no_speech_prob": 3.949966048821807e-05}, {"id": 21, "seek": 15788, "start": 173.96, "end": 182.92, "text": " system uses some media output because you want to stream stuff onto it or, you know, to stream a", "tokens": [1185, 4960, 512, 3021, 5598, 570, 291, 528, 281, 4309, 1507, 3911, 309, 420, 11, 291, 458, 11, 281, 4309, 257], "temperature": 0.0, "avg_logprob": -0.12881808213784662, "compression_ratio": 1.529100529100529, "no_speech_prob": 3.949966048821807e-05}, {"id": 22, "seek": 18292, "start": 182.92, "end": 194.2, "text": " conference talk, hello. And maybe one of your clients is also a window system because it turns", "tokens": [7586, 751, 11, 7751, 13, 400, 1310, 472, 295, 428, 6982, 307, 611, 257, 4910, 1185, 570, 309, 4523], "temperature": 0.0, "avg_logprob": -0.15837134485659393, "compression_ratio": 1.3450704225352113, "no_speech_prob": 7.807899237377569e-05}, {"id": 23, "seek": 18292, "start": 194.2, "end": 203.16, "text": " out that even Chrome is a Wayland server these days, so our lovely little, we have three classes", "tokens": [484, 300, 754, 15327, 307, 257, 9558, 1661, 7154, 613, 1708, 11, 370, 527, 7496, 707, 11, 321, 362, 1045, 5359], "temperature": 0.0, "avg_logprob": -0.15837134485659393, "compression_ratio": 1.3450704225352113, "no_speech_prob": 7.807899237377569e-05}, {"id": 24, "seek": 20316, "start": 203.16, "end": 213.32, "text": " of three main components of our graphic stack. This illusion's already disappeared. But, you know,", "tokens": [295, 1045, 2135, 6677, 295, 527, 14089, 8630, 13, 639, 18854, 311, 1217, 13954, 13, 583, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.211166723719183, "compression_ratio": 1.2913907284768211, "no_speech_prob": 3.505174026940949e-05}, {"id": 25, "seek": 20316, "start": 213.32, "end": 225.6, "text": " let's pretend that everything is fine and let's just try to build it up. So for us, DOM and KMS,", "tokens": [718, 311, 11865, 300, 1203, 307, 2489, 293, 718, 311, 445, 853, 281, 1322, 309, 493, 13, 407, 337, 505, 11, 413, 5251, 293, 591, 10288, 11], "temperature": 0.0, "avg_logprob": -0.211166723719183, "compression_ratio": 1.2913907284768211, "no_speech_prob": 3.505174026940949e-05}, {"id": 26, "seek": 22560, "start": 225.6, "end": 234.35999999999999, "text": " the acronyms you mostly see, the direct rendering manager is anything to do with graphics or display", "tokens": [264, 31713, 88, 2592, 291, 5240, 536, 11, 264, 2047, 22407, 6598, 307, 1340, 281, 360, 365, 11837, 420, 4674], "temperature": 0.0, "avg_logprob": -0.09857242879733233, "compression_ratio": 1.4405940594059405, "no_speech_prob": 0.00011283622006885707}, {"id": 27, "seek": 22560, "start": 234.35999999999999, "end": 243.51999999999998, "text": " inside the kernel. It's a weird legacy name. And those are all of the GPU and display drivers.", "tokens": [1854, 264, 28256, 13, 467, 311, 257, 3657, 11711, 1315, 13, 400, 729, 366, 439, 295, 264, 18407, 293, 4674, 11590, 13], "temperature": 0.0, "avg_logprob": -0.09857242879733233, "compression_ratio": 1.4405940594059405, "no_speech_prob": 0.00011283622006885707}, {"id": 28, "seek": 22560, "start": 243.51999999999998, "end": 252.48, "text": " And KMS is very specifically the part of DRM that actually controls the display. So when you're", "tokens": [400, 591, 10288, 307, 588, 4682, 264, 644, 295, 12118, 44, 300, 767, 9003, 264, 4674, 13, 407, 562, 291, 434], "temperature": 0.0, "avg_logprob": -0.09857242879733233, "compression_ratio": 1.4405940594059405, "no_speech_prob": 0.00011283622006885707}, {"id": 29, "seek": 25248, "start": 252.48, "end": 262.12, "text": " talking about HDMI output or something like that, then it's going to be KMS. And KMS is that very", "tokens": [1417, 466, 30811, 5598, 420, 746, 411, 300, 11, 550, 309, 311, 516, 281, 312, 591, 10288, 13, 400, 591, 10288, 307, 300, 588], "temperature": 0.0, "avg_logprob": -0.10814929589992617, "compression_ratio": 1.5076142131979695, "no_speech_prob": 8.224381599575281e-05}, {"id": 30, "seek": 25248, "start": 262.12, "end": 268.88, "text": " last step in the pipeline, the one that's closest to your eye. Its job is to turn pixels into light.", "tokens": [1036, 1823, 294, 264, 15517, 11, 264, 472, 300, 311, 13699, 281, 428, 3313, 13, 6953, 1691, 307, 281, 1261, 18668, 666, 1442, 13], "temperature": 0.0, "avg_logprob": -0.10814929589992617, "compression_ratio": 1.5076142131979695, "no_speech_prob": 8.224381599575281e-05}, {"id": 31, "seek": 25248, "start": 268.88, "end": 277.59999999999997, "text": " Some people will tell you that there's a thing called FB Dev as well, but that's not right. FB Dev", "tokens": [2188, 561, 486, 980, 291, 300, 456, 311, 257, 551, 1219, 479, 33, 9096, 382, 731, 11, 457, 300, 311, 406, 558, 13, 479, 33, 9096], "temperature": 0.0, "avg_logprob": -0.10814929589992617, "compression_ratio": 1.5076142131979695, "no_speech_prob": 8.224381599575281e-05}, {"id": 32, "seek": 27760, "start": 277.6, "end": 289.24, "text": " doesn't exist. And, yeah, in the division of responsibility as we go one step further back", "tokens": [1177, 380, 2514, 13, 400, 11, 1338, 11, 294, 264, 10044, 295, 6357, 382, 321, 352, 472, 1823, 3052, 646], "temperature": 0.0, "avg_logprob": -0.14077623188495636, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00010362969624111429}, {"id": 33, "seek": 27760, "start": 289.24, "end": 297.0, "text": " from your eye, the Windows system's job is to fundamentally to take a bunch of images from", "tokens": [490, 428, 3313, 11, 264, 8591, 1185, 311, 1691, 307, 281, 17879, 281, 747, 257, 3840, 295, 5267, 490], "temperature": 0.0, "avg_logprob": -0.14077623188495636, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00010362969624111429}, {"id": 34, "seek": 27760, "start": 297.0, "end": 302.72, "text": " clients, combine them into a single image or multiple images if you have multiple displays,", "tokens": [6982, 11, 10432, 552, 666, 257, 2167, 3256, 420, 3866, 5267, 498, 291, 362, 3866, 20119, 11], "temperature": 0.0, "avg_logprob": -0.14077623188495636, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.00010362969624111429}, {"id": 35, "seek": 30272, "start": 302.72, "end": 311.44000000000005, "text": " get them out to the eye and bring input events back. So, you know, Wayland is a protocol and", "tokens": [483, 552, 484, 281, 264, 3313, 293, 1565, 4846, 3931, 646, 13, 407, 11, 291, 458, 11, 9558, 1661, 307, 257, 10336, 293], "temperature": 0.0, "avg_logprob": -0.18142627198019146, "compression_ratio": 1.4816753926701571, "no_speech_prob": 9.252236486645415e-05}, {"id": 36, "seek": 30272, "start": 311.44000000000005, "end": 320.76000000000005, "text": " nothing else. There's a very, there's a very small C layer in Wayland, which is really just IPC.", "tokens": [1825, 1646, 13, 821, 311, 257, 588, 11, 456, 311, 257, 588, 1359, 383, 4583, 294, 9558, 1661, 11, 597, 307, 534, 445, 8671, 34, 13], "temperature": 0.0, "avg_logprob": -0.18142627198019146, "compression_ratio": 1.4816753926701571, "no_speech_prob": 9.252236486645415e-05}, {"id": 37, "seek": 30272, "start": 320.76000000000005, "end": 328.48, "text": " And apart from that, it's just protocols and conventions. So, you know, MATA, the GNOME users", "tokens": [400, 4936, 490, 300, 11, 309, 311, 445, 20618, 293, 33520, 13, 407, 11, 291, 458, 11, 5904, 32, 11, 264, 46411, 23344, 5022], "temperature": 0.0, "avg_logprob": -0.18142627198019146, "compression_ratio": 1.4816753926701571, "no_speech_prob": 9.252236486645415e-05}, {"id": 38, "seek": 32848, "start": 328.48, "end": 336.04, "text": " is a Wayland server. Other popular ones would be KWIN, Western, WL routes. That's where all the", "tokens": [307, 257, 9558, 1661, 7154, 13, 5358, 3743, 2306, 576, 312, 591, 54, 1464, 11, 8724, 11, 343, 43, 18242, 13, 663, 311, 689, 439, 264], "temperature": 0.0, "avg_logprob": -0.21830008370535714, "compression_ratio": 1.404040404040404, "no_speech_prob": 4.731454828288406e-05}, {"id": 39, "seek": 32848, "start": 336.04, "end": 344.12, "text": " implementation actually lies. And, yeah, like I say, they just combine window images together,", "tokens": [11420, 767, 9134, 13, 400, 11, 1338, 11, 411, 286, 584, 11, 436, 445, 10432, 4910, 5267, 1214, 11], "temperature": 0.0, "avg_logprob": -0.21830008370535714, "compression_ratio": 1.404040404040404, "no_speech_prob": 4.731454828288406e-05}, {"id": 40, "seek": 32848, "start": 344.12, "end": 349.20000000000005, "text": " get them out to the output device in the reverse direction they're bringing input back.", "tokens": [483, 552, 484, 281, 264, 5598, 4302, 294, 264, 9943, 3513, 436, 434, 5062, 4846, 646, 13], "temperature": 0.0, "avg_logprob": -0.21830008370535714, "compression_ratio": 1.404040404040404, "no_speech_prob": 4.731454828288406e-05}, {"id": 41, "seek": 34920, "start": 349.2, "end": 363.8, "text": " X11 doesn't exist either. So, that's, we'll move on. Yeah. So, OpenGL and Vulkan, in a way they fit", "tokens": [1783, 5348, 1177, 380, 2514, 2139, 13, 407, 11, 300, 311, 11, 321, 603, 1286, 322, 13, 865, 13, 407, 11, 7238, 19440, 293, 41434, 5225, 11, 294, 257, 636, 436, 3318], "temperature": 0.0, "avg_logprob": -0.18771642153380347, "compression_ratio": 1.2420382165605095, "no_speech_prob": 0.00020619010319933295}, {"id": 42, "seek": 34920, "start": 363.8, "end": 372.59999999999997, "text": " in. Their APIs, as we know for accelerated 3D, so you provide them a mesh and some textures and", "tokens": [294, 13, 6710, 21445, 11, 382, 321, 458, 337, 29763, 805, 35, 11, 370, 291, 2893, 552, 257, 17407, 293, 512, 24501, 293], "temperature": 0.0, "avg_logprob": -0.18771642153380347, "compression_ratio": 1.2420382165605095, "no_speech_prob": 0.00020619010319933295}, {"id": 43, "seek": 37260, "start": 372.6, "end": 380.68, "text": " some shaders. Run this thing, make it fast. Great. But they only handle rendering. So,", "tokens": [512, 5744, 433, 13, 8950, 341, 551, 11, 652, 309, 2370, 13, 3769, 13, 583, 436, 787, 4813, 22407, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.13170828501383464, "compression_ratio": 1.4234693877551021, "no_speech_prob": 6.95171402185224e-05}, {"id": 44, "seek": 37260, "start": 380.68, "end": 390.24, "text": " GL and Vulkan themselves have no concept of I want to be able to display to Wayland. That comes in", "tokens": [16225, 293, 41434, 5225, 2969, 362, 572, 3410, 295, 286, 528, 281, 312, 1075, 281, 4674, 281, 9558, 1661, 13, 663, 1487, 294], "temperature": 0.0, "avg_logprob": -0.13170828501383464, "compression_ratio": 1.4234693877551021, "no_speech_prob": 6.95171402185224e-05}, {"id": 45, "seek": 37260, "start": 390.24, "end": 400.08000000000004, "text": " with EGL and what we call the Vulkan WSI for window system integration layer. Their job is to", "tokens": [365, 462, 19440, 293, 437, 321, 818, 264, 41434, 5225, 343, 20262, 337, 4910, 1185, 10980, 4583, 13, 6710, 1691, 307, 281], "temperature": 0.0, "avg_logprob": -0.13170828501383464, "compression_ratio": 1.4234693877551021, "no_speech_prob": 6.95171402185224e-05}, {"id": 46, "seek": 40008, "start": 400.08, "end": 408.0, "text": " bridge the two worlds. So, with OpenGL, you have EGL on the side that's the bridge between GL and", "tokens": [7283, 264, 732, 13401, 13, 407, 11, 365, 7238, 19440, 11, 291, 362, 462, 19440, 322, 264, 1252, 300, 311, 264, 7283, 1296, 16225, 293], "temperature": 0.0, "avg_logprob": -0.14710305287287787, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0001648758043302223}, {"id": 47, "seek": 40008, "start": 408.0, "end": 417.71999999999997, "text": " say Wayland. With Vulkan, you have Core Vulkan and then the WSI on the side is that bridge", "tokens": [584, 9558, 1661, 13, 2022, 41434, 5225, 11, 291, 362, 14798, 41434, 5225, 293, 550, 264, 343, 20262, 322, 264, 1252, 307, 300, 7283], "temperature": 0.0, "avg_logprob": -0.14710305287287787, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0001648758043302223}, {"id": 48, "seek": 40008, "start": 417.71999999999997, "end": 428.15999999999997, "text": " bringing all the content across to the window system. And then there's GBM as well, which is", "tokens": [5062, 439, 264, 2701, 2108, 281, 264, 4910, 1185, 13, 400, 550, 456, 311, 460, 18345, 382, 731, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.14710305287287787, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.0001648758043302223}, {"id": 49, "seek": 42816, "start": 428.16, "end": 439.0, "text": " maybe the most ill-fitting part of what we have. GBM is kind of a side channel to bridge EGL to", "tokens": [1310, 264, 881, 3171, 12, 69, 2414, 644, 295, 437, 321, 362, 13, 460, 18345, 307, 733, 295, 257, 1252, 2269, 281, 7283, 462, 19440, 281], "temperature": 0.0, "avg_logprob": -0.16155605628842212, "compression_ratio": 1.2467532467532467, "no_speech_prob": 0.00011216037819394842}, {"id": 50, "seek": 42816, "start": 439.0, "end": 450.24, "text": " KMS. So, right now, I mean, this is all happening through GNOME shell and MOTA. It's using GL to", "tokens": [591, 10288, 13, 407, 11, 558, 586, 11, 286, 914, 11, 341, 307, 439, 2737, 807, 46411, 23344, 8720, 293, 376, 5068, 32, 13, 467, 311, 1228, 16225, 281], "temperature": 0.0, "avg_logprob": -0.16155605628842212, "compression_ratio": 1.2467532467532467, "no_speech_prob": 0.00011216037819394842}, {"id": 51, "seek": 45024, "start": 450.24, "end": 458.92, "text": " render my image with the next slide as a bonus preview and this one that you can see. MOTA,", "tokens": [15529, 452, 3256, 365, 264, 958, 4137, 382, 257, 10882, 14281, 293, 341, 472, 300, 291, 393, 536, 13, 376, 5068, 32, 11], "temperature": 0.0, "avg_logprob": -0.13831523748544547, "compression_ratio": 1.3037037037037038, "no_speech_prob": 6.928661605343223e-05}, {"id": 52, "seek": 45024, "start": 458.92, "end": 469.04, "text": " yeah, it uses GL to render and it uses EGL plus GBM to be able to pull images out to", "tokens": [1338, 11, 309, 4960, 16225, 281, 15529, 293, 309, 4960, 462, 19440, 1804, 460, 18345, 281, 312, 1075, 281, 2235, 5267, 484, 281], "temperature": 0.0, "avg_logprob": -0.13831523748544547, "compression_ratio": 1.3037037037037038, "no_speech_prob": 6.928661605343223e-05}, {"id": 53, "seek": 46904, "start": 469.04, "end": 481.0, "text": " kernel mode setting. And GBM is a really, really strange and idiosyncratic bridge. Some people", "tokens": [28256, 4391, 3287, 13, 400, 460, 18345, 307, 257, 534, 11, 534, 5861, 293, 4496, 2717, 2534, 10757, 2399, 7283, 13, 2188, 561], "temperature": 0.0, "avg_logprob": -0.14226172721549257, "compression_ratio": 1.4736842105263157, "no_speech_prob": 8.498334500472993e-05}, {"id": 54, "seek": 46904, "start": 481.0, "end": 487.6, "text": " will tell you that GBM stands for the generic buffer manager. That's definitely not true.", "tokens": [486, 980, 291, 300, 460, 18345, 7382, 337, 264, 19577, 21762, 6598, 13, 663, 311, 2138, 406, 2074, 13], "temperature": 0.0, "avg_logprob": -0.14226172721549257, "compression_ratio": 1.4736842105263157, "no_speech_prob": 8.498334500472993e-05}, {"id": 55, "seek": 46904, "start": 487.6, "end": 497.20000000000005, "text": " Yeah, we had an idea that GBM would be the thing that let people kind of peek under the hood of", "tokens": [865, 11, 321, 632, 364, 1558, 300, 460, 18345, 576, 312, 264, 551, 300, 718, 561, 733, 295, 19604, 833, 264, 13376, 295], "temperature": 0.0, "avg_logprob": -0.14226172721549257, "compression_ratio": 1.4736842105263157, "no_speech_prob": 8.498334500472993e-05}, {"id": 56, "seek": 49720, "start": 497.2, "end": 505.4, "text": " what EGL does as an implementation and be able to generically allocate buffers. We got as far as", "tokens": [437, 462, 19440, 775, 382, 364, 11420, 293, 312, 1075, 281, 1337, 984, 35713, 9204, 433, 13, 492, 658, 382, 1400, 382], "temperature": 0.0, "avg_logprob": -0.12006800515311104, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.00010423952335258946}, {"id": 57, "seek": 49720, "start": 505.4, "end": 511.48, "text": " making it work for kernel mode setting and then realized how terrible the whole problem space was.", "tokens": [1455, 309, 589, 337, 28256, 4391, 3287, 293, 550, 5334, 577, 6237, 264, 1379, 1154, 1901, 390, 13], "temperature": 0.0, "avg_logprob": -0.12006800515311104, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.00010423952335258946}, {"id": 58, "seek": 49720, "start": 511.48, "end": 517.68, "text": " So, we just pretended that it was never an acronym, that it's not generic and moved on with our", "tokens": [407, 11, 321, 445, 45056, 300, 309, 390, 1128, 364, 39195, 11, 300, 309, 311, 406, 19577, 293, 4259, 322, 365, 527], "temperature": 0.0, "avg_logprob": -0.12006800515311104, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.00010423952335258946}, {"id": 59, "seek": 51768, "start": 517.68, "end": 529.0, "text": " words. So, at the end of all that, before we get into something more meaty, we've got clients", "tokens": [2283, 13, 407, 11, 412, 264, 917, 295, 439, 300, 11, 949, 321, 483, 666, 746, 544, 4615, 88, 11, 321, 600, 658, 6982], "temperature": 0.0, "avg_logprob": -0.13644135964883342, "compression_ratio": 1.5384615384615385, "no_speech_prob": 6.482896424131468e-05}, {"id": 60, "seek": 51768, "start": 529.0, "end": 534.9599999999999, "text": " rendering the content, maybe with the GPU, maybe just on the CPU, maybe it's just doing mem copy.", "tokens": [22407, 264, 2701, 11, 1310, 365, 264, 18407, 11, 1310, 445, 322, 264, 13199, 11, 1310, 309, 311, 445, 884, 1334, 5055, 13], "temperature": 0.0, "avg_logprob": -0.13644135964883342, "compression_ratio": 1.5384615384615385, "no_speech_prob": 6.482896424131468e-05}, {"id": 61, "seek": 51768, "start": 534.9599999999999, "end": 542.76, "text": " It will pass a handle to that content over to the Wayland compositor with some metadata,", "tokens": [467, 486, 1320, 257, 4813, 281, 300, 2701, 670, 281, 264, 9558, 1661, 10199, 3029, 365, 512, 26603, 11], "temperature": 0.0, "avg_logprob": -0.13644135964883342, "compression_ratio": 1.5384615384615385, "no_speech_prob": 6.482896424131468e-05}, {"id": 62, "seek": 54276, "start": 542.76, "end": 551.52, "text": " some context. The compositor is going to pull it all together, choose how it's going to display it,", "tokens": [512, 4319, 13, 440, 10199, 3029, 307, 516, 281, 2235, 309, 439, 1214, 11, 2826, 577, 309, 311, 516, 281, 4674, 309, 11], "temperature": 0.0, "avg_logprob": -0.11575861981040553, "compression_ratio": 1.5268817204301075, "no_speech_prob": 3.287506115157157e-05}, {"id": 63, "seek": 54276, "start": 551.52, "end": 559.8, "text": " apply any kind of policy or what have you. And then it's going to just push that final image", "tokens": [3079, 604, 733, 295, 3897, 420, 437, 362, 291, 13, 400, 550, 309, 311, 516, 281, 445, 2944, 300, 2572, 3256], "temperature": 0.0, "avg_logprob": -0.11575861981040553, "compression_ratio": 1.5268817204301075, "no_speech_prob": 3.287506115157157e-05}, {"id": 64, "seek": 54276, "start": 559.8, "end": 569.28, "text": " out to KMS, which is going to turn it into electrons. So, we've got the diagram that's back", "tokens": [484, 281, 591, 10288, 11, 597, 307, 516, 281, 1261, 309, 666, 14265, 13, 407, 11, 321, 600, 658, 264, 10686, 300, 311, 646], "temperature": 0.0, "avg_logprob": -0.11575861981040553, "compression_ratio": 1.5268817204301075, "no_speech_prob": 3.287506115157157e-05}, {"id": 65, "seek": 56928, "start": 569.28, "end": 581.68, "text": " to making sense. So, if we're looking at how KMS is actually put together, every single discrete", "tokens": [281, 1455, 2020, 13, 407, 11, 498, 321, 434, 1237, 412, 577, 591, 10288, 307, 767, 829, 1214, 11, 633, 2167, 27706], "temperature": 0.0, "avg_logprob": -0.12317664093441433, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.796836947207339e-05}, {"id": 66, "seek": 56928, "start": 581.68, "end": 587.6, "text": " device in your system is its own. I just have an Intel up top here. I have one DRM device,", "tokens": [4302, 294, 428, 1185, 307, 1080, 1065, 13, 286, 445, 362, 364, 19762, 493, 1192, 510, 13, 286, 362, 472, 12118, 44, 4302, 11], "temperature": 0.0, "avg_logprob": -0.12317664093441433, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.796836947207339e-05}, {"id": 67, "seek": 56928, "start": 587.6, "end": 595.8, "text": " which is the entire Intel GPU and display complex. If you're on ARM systems usually,", "tokens": [597, 307, 264, 2302, 19762, 18407, 293, 4674, 3997, 13, 759, 291, 434, 322, 45209, 3652, 2673, 11], "temperature": 0.0, "avg_logprob": -0.12317664093441433, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.796836947207339e-05}, {"id": 68, "seek": 59580, "start": 595.8, "end": 603.0, "text": " you're going to have two devices. The display and GPU are separate IP blocks from separate", "tokens": [291, 434, 516, 281, 362, 732, 5759, 13, 440, 4674, 293, 18407, 366, 4994, 8671, 8474, 490, 4994], "temperature": 0.0, "avg_logprob": -0.14659989963878284, "compression_ratio": 1.5511363636363635, "no_speech_prob": 9.096406574826688e-05}, {"id": 69, "seek": 59580, "start": 603.0, "end": 610.92, "text": " vendors who aren't really on speaking terms. So, you'll have one DRM device for your display", "tokens": [22056, 567, 3212, 380, 534, 322, 4124, 2115, 13, 407, 11, 291, 603, 362, 472, 12118, 44, 4302, 337, 428, 4674], "temperature": 0.0, "avg_logprob": -0.14659989963878284, "compression_ratio": 1.5511363636363635, "no_speech_prob": 9.096406574826688e-05}, {"id": 70, "seek": 59580, "start": 610.92, "end": 618.12, "text": " controller and another DRM device for your GPU and they're completely separate. So, yeah,", "tokens": [10561, 293, 1071, 12118, 44, 4302, 337, 428, 18407, 293, 436, 434, 2584, 4994, 13, 407, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.14659989963878284, "compression_ratio": 1.5511363636363635, "no_speech_prob": 9.096406574826688e-05}, {"id": 71, "seek": 61812, "start": 618.12, "end": 628.36, "text": " four KMS devices. We've got connectors representing real displays. So, we've got an embedded", "tokens": [1451, 591, 10288, 5759, 13, 492, 600, 658, 31865, 13460, 957, 20119, 13, 407, 11, 321, 600, 658, 364, 16741], "temperature": 0.0, "avg_logprob": -0.16626977186936598, "compression_ratio": 1.5054347826086956, "no_speech_prob": 4.5687746023759246e-05}, {"id": 72, "seek": 61812, "start": 628.36, "end": 635.32, "text": " display port connector here and various display ports and HDMI connectors from my external outputs.", "tokens": [4674, 2436, 19127, 510, 293, 3683, 4674, 18160, 293, 30811, 31865, 490, 452, 8320, 23930, 13], "temperature": 0.0, "avg_logprob": -0.16626977186936598, "compression_ratio": 1.5054347826086956, "no_speech_prob": 4.5687746023759246e-05}, {"id": 73, "seek": 61812, "start": 635.32, "end": 645.36, "text": " CRTCs, that does stand for CRT controller because that's how long ago it was when we", "tokens": [14123, 18238, 82, 11, 300, 775, 1463, 337, 14123, 51, 10561, 570, 300, 311, 577, 938, 2057, 309, 390, 562, 321], "temperature": 0.0, "avg_logprob": -0.16626977186936598, "compression_ratio": 1.5054347826086956, "no_speech_prob": 4.5687746023759246e-05}, {"id": 74, "seek": 64536, "start": 645.36, "end": 657.48, "text": " designed all this. CRTCs are the thing immediately upstream from connectors. They generate a pixel", "tokens": [4761, 439, 341, 13, 14123, 18238, 82, 366, 264, 551, 4258, 33915, 490, 31865, 13, 814, 8460, 257, 19261], "temperature": 0.0, "avg_logprob": -0.0990913200378418, "compression_ratio": 1.3873239436619718, "no_speech_prob": 0.00014973690849728882}, {"id": 75, "seek": 64536, "start": 657.48, "end": 667.2, "text": " stream for the displays. So, any kind of scaling, cropping, compositing is done in the CRTC space.", "tokens": [4309, 337, 264, 20119, 13, 407, 11, 604, 733, 295, 21589, 11, 4848, 3759, 11, 10199, 1748, 307, 1096, 294, 264, 14123, 18238, 1901, 13], "temperature": 0.0, "avg_logprob": -0.0990913200378418, "compression_ratio": 1.3873239436619718, "no_speech_prob": 0.00014973690849728882}, {"id": 76, "seek": 66720, "start": 667.2, "end": 680.5200000000001, "text": " And CRTCs are just a combination of planes. So, planes, they take frame buffers. They", "tokens": [400, 14123, 18238, 82, 366, 445, 257, 6562, 295, 14952, 13, 407, 11, 14952, 11, 436, 747, 3920, 9204, 433, 13, 814], "temperature": 0.0, "avg_logprob": -0.15872454969850305, "compression_ratio": 1.5739644970414202, "no_speech_prob": 9.165969822788611e-05}, {"id": 77, "seek": 66720, "start": 680.5200000000001, "end": 688.1600000000001, "text": " can scale. They can be positioned within the CRTC. They can be stacked. And then the CRTC", "tokens": [393, 4373, 13, 814, 393, 312, 24889, 1951, 264, 14123, 18238, 13, 814, 393, 312, 28867, 13, 400, 550, 264, 14123, 18238], "temperature": 0.0, "avg_logprob": -0.15872454969850305, "compression_ratio": 1.5739644970414202, "no_speech_prob": 9.165969822788611e-05}, {"id": 78, "seek": 66720, "start": 688.1600000000001, "end": 694.76, "text": " is the one that combines them. So, in quite a poor diagram, because for a graphics person,", "tokens": [307, 264, 472, 300, 29520, 552, 13, 407, 11, 294, 1596, 257, 4716, 10686, 11, 570, 337, 257, 11837, 954, 11], "temperature": 0.0, "avg_logprob": -0.15872454969850305, "compression_ratio": 1.5739644970414202, "no_speech_prob": 9.165969822788611e-05}, {"id": 79, "seek": 69476, "start": 694.76, "end": 702.8, "text": " I can't actually draw very well, more of a text person, to be honest. Yeah, it's the", "tokens": [286, 393, 380, 767, 2642, 588, 731, 11, 544, 295, 257, 2487, 954, 11, 281, 312, 3245, 13, 865, 11, 309, 311, 264], "temperature": 0.0, "avg_logprob": -0.14766586091783312, "compression_ratio": 1.56, "no_speech_prob": 0.00011712494597304612}, {"id": 80, "seek": 69476, "start": 702.8, "end": 710.2, "text": " frame buffer is just the client content. The plane is the one that's going to do any format", "tokens": [3920, 21762, 307, 445, 264, 6423, 2701, 13, 440, 5720, 307, 264, 472, 300, 311, 516, 281, 360, 604, 7877], "temperature": 0.0, "avg_logprob": -0.14766586091783312, "compression_ratio": 1.56, "no_speech_prob": 0.00011712494597304612}, {"id": 81, "seek": 69476, "start": 710.2, "end": 717.8, "text": " conversion or scaling or what have you. Then the CRTC combines them all together, pushes", "tokens": [14298, 420, 21589, 420, 437, 362, 291, 13, 1396, 264, 14123, 18238, 29520, 552, 439, 1214, 11, 21020], "temperature": 0.0, "avg_logprob": -0.14766586091783312, "compression_ratio": 1.56, "no_speech_prob": 0.00011712494597304612}, {"id": 82, "seek": 69476, "start": 717.8, "end": 724.16, "text": " them out to the connector. Then I think the important thing to bear in mind if you're", "tokens": [552, 484, 281, 264, 19127, 13, 1396, 286, 519, 264, 1021, 551, 281, 6155, 294, 1575, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.14766586091783312, "compression_ratio": 1.56, "no_speech_prob": 0.00011712494597304612}, {"id": 83, "seek": 72416, "start": 724.16, "end": 731.16, "text": " trying to reason about graphics pipelines is that timing flows backwards. Timing never", "tokens": [1382, 281, 1778, 466, 11837, 40168, 307, 300, 10822, 12867, 12204, 13, 7172, 278, 1128], "temperature": 0.0, "avg_logprob": -0.13386105757493238, "compression_ratio": 1.4602272727272727, "no_speech_prob": 0.00017905629647430032}, {"id": 84, "seek": 72416, "start": 731.16, "end": 738.52, "text": " flows forwards. Because when you've got a physical display, it's going to refresh at", "tokens": [12867, 30126, 13, 1436, 562, 291, 600, 658, 257, 4001, 4674, 11, 309, 311, 516, 281, 15134, 412], "temperature": 0.0, "avg_logprob": -0.13386105757493238, "compression_ratio": 1.4602272727272727, "no_speech_prob": 0.00017905629647430032}, {"id": 85, "seek": 72416, "start": 738.52, "end": 744.36, "text": " a certain point in time. Unless it's VRR, no one asked about VRR. We don't quite know", "tokens": [257, 1629, 935, 294, 565, 13, 16581, 309, 311, 13722, 49, 11, 572, 472, 2351, 466, 13722, 49, 13, 492, 500, 380, 1596, 458], "temperature": 0.0, "avg_logprob": -0.13386105757493238, "compression_ratio": 1.4602272727272727, "no_speech_prob": 0.00017905629647430032}, {"id": 86, "seek": 74436, "start": 744.36, "end": 755.12, "text": " how that works yet. But timing flows backwards because this HDMI output is ticking at 60", "tokens": [577, 300, 1985, 1939, 13, 583, 10822, 12867, 12204, 570, 341, 30811, 5598, 307, 33999, 412, 4060], "temperature": 0.0, "avg_logprob": -0.1450491685133714, "compression_ratio": 1.4064171122994653, "no_speech_prob": 7.802064646966755e-05}, {"id": 87, "seek": 74436, "start": 755.12, "end": 760.88, "text": " hertz. That's happening at a very, very fixed point in time. And so that's the beginning", "tokens": [45830, 13, 663, 311, 2737, 412, 257, 588, 11, 588, 6806, 935, 294, 565, 13, 400, 370, 300, 311, 264, 2863], "temperature": 0.0, "avg_logprob": -0.1450491685133714, "compression_ratio": 1.4064171122994653, "no_speech_prob": 7.802064646966755e-05}, {"id": 88, "seek": 74436, "start": 760.88, "end": 768.36, "text": " of our reference. When we know that we want to present stuff to HDMI, we know exactly", "tokens": [295, 527, 6408, 13, 1133, 321, 458, 300, 321, 528, 281, 1974, 1507, 281, 30811, 11, 321, 458, 2293], "temperature": 0.0, "avg_logprob": -0.1450491685133714, "compression_ratio": 1.4064171122994653, "no_speech_prob": 7.802064646966755e-05}, {"id": 89, "seek": 76836, "start": 768.36, "end": 774.72, "text": " when the next refresh cycle is going to start, the next one after that, so on and so forth.", "tokens": [562, 264, 958, 15134, 6586, 307, 516, 281, 722, 11, 264, 958, 472, 934, 300, 11, 370, 322, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.16335125530467315, "compression_ratio": 1.5705882352941176, "no_speech_prob": 3.2465235562995076e-05}, {"id": 90, "seek": 76836, "start": 774.72, "end": 781.76, "text": " So timing is always flowing backwards. This goes right the whole way from the connector", "tokens": [407, 10822, 307, 1009, 13974, 12204, 13, 639, 1709, 558, 264, 1379, 636, 490, 264, 19127], "temperature": 0.0, "avg_logprob": -0.16335125530467315, "compression_ratio": 1.5705882352941176, "no_speech_prob": 3.2465235562995076e-05}, {"id": 91, "seek": 76836, "start": 781.76, "end": 789.48, "text": " back to the CRTC, back to the Windows system, and then back to the clients. It's always", "tokens": [646, 281, 264, 14123, 18238, 11, 646, 281, 264, 8591, 1185, 11, 293, 550, 646, 281, 264, 6982, 13, 467, 311, 1009], "temperature": 0.0, "avg_logprob": -0.16335125530467315, "compression_ratio": 1.5705882352941176, "no_speech_prob": 3.2465235562995076e-05}, {"id": 92, "seek": 78948, "start": 789.48, "end": 798.48, "text": " starting from that fixed hardware source. So yeah, you want to use DRM and KMS. Good", "tokens": [2891, 490, 300, 6806, 8837, 4009, 13, 407, 1338, 11, 291, 528, 281, 764, 12118, 44, 293, 591, 10288, 13, 2205], "temperature": 0.0, "avg_logprob": -0.1845178734766294, "compression_ratio": 1.4171122994652405, "no_speech_prob": 3.6555818951455876e-05}, {"id": 93, "seek": 78948, "start": 798.48, "end": 807.6800000000001, "text": " for you. I'd recommend it. It's just a set of objects, like everything that turns out", "tokens": [337, 291, 13, 286, 1116, 2748, 309, 13, 467, 311, 445, 257, 992, 295, 6565, 11, 411, 1203, 300, 4523, 484], "temperature": 0.0, "avg_logprob": -0.1845178734766294, "compression_ratio": 1.4171122994652405, "no_speech_prob": 3.6555818951455876e-05}, {"id": 94, "seek": 78948, "start": 807.6800000000001, "end": 815.8000000000001, "text": " in computer science. It's objects with properties, and that's it. So you open your KMS device,", "tokens": [294, 3820, 3497, 13, 467, 311, 6565, 365, 7221, 11, 293, 300, 311, 309, 13, 407, 291, 1269, 428, 591, 10288, 4302, 11], "temperature": 0.0, "avg_logprob": -0.1845178734766294, "compression_ratio": 1.4171122994652405, "no_speech_prob": 3.6555818951455876e-05}, {"id": 95, "seek": 81580, "start": 815.8, "end": 822.64, "text": " you enumerate a list of objects, your CRTCs, your connectors, your planes, you look into", "tokens": [291, 465, 15583, 473, 257, 1329, 295, 6565, 11, 428, 14123, 18238, 82, 11, 428, 31865, 11, 428, 14952, 11, 291, 574, 666], "temperature": 0.0, "avg_logprob": -0.1624575372952134, "compression_ratio": 1.4606741573033708, "no_speech_prob": 5.861942918272689e-05}, {"id": 96, "seek": 81580, "start": 822.64, "end": 831.68, "text": " their properties. So this connector type is DisplayPort, this one's HDMI, whatever. And", "tokens": [641, 7221, 13, 407, 341, 19127, 2010, 307, 32229, 47, 477, 11, 341, 472, 311, 30811, 11, 2035, 13, 400], "temperature": 0.0, "avg_logprob": -0.1624575372952134, "compression_ratio": 1.4606741573033708, "no_speech_prob": 5.861942918272689e-05}, {"id": 97, "seek": 81580, "start": 831.68, "end": 839.04, "text": " then any time you want to actually affect something, so display new content, change", "tokens": [550, 604, 565, 291, 528, 281, 767, 3345, 746, 11, 370, 4674, 777, 2701, 11, 1319], "temperature": 0.0, "avg_logprob": -0.1624575372952134, "compression_ratio": 1.4606741573033708, "no_speech_prob": 5.861942918272689e-05}, {"id": 98, "seek": 83904, "start": 839.04, "end": 845.7199999999999, "text": " resolution, whatever, that's all done through what we call Atomic Mode Setting, which is", "tokens": [8669, 11, 2035, 11, 300, 311, 439, 1096, 807, 437, 321, 818, 1711, 21401, 20500, 21063, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.1466564450945173, "compression_ratio": 1.4083769633507854, "no_speech_prob": 8.31073775771074e-05}, {"id": 99, "seek": 83904, "start": 845.7199999999999, "end": 853.92, "text": " about 10 years old now, and it's a very low-level property-based interface. I wouldn't really", "tokens": [466, 1266, 924, 1331, 586, 11, 293, 309, 311, 257, 588, 2295, 12, 12418, 4707, 12, 6032, 9226, 13, 286, 2759, 380, 534], "temperature": 0.0, "avg_logprob": -0.1466564450945173, "compression_ratio": 1.4083769633507854, "no_speech_prob": 8.31073775771074e-05}, {"id": 100, "seek": 83904, "start": 853.92, "end": 863.36, "text": " recommend trying to drive it yourself, but it is possible. So Atomic is just a list of", "tokens": [2748, 1382, 281, 3332, 309, 1803, 11, 457, 309, 307, 1944, 13, 407, 1711, 21401, 307, 445, 257, 1329, 295], "temperature": 0.0, "avg_logprob": -0.1466564450945173, "compression_ratio": 1.4083769633507854, "no_speech_prob": 8.31073775771074e-05}, {"id": 101, "seek": 86336, "start": 863.36, "end": 870.92, "text": " properties. So you've got all of your different objects and their different types. You know", "tokens": [7221, 13, 407, 291, 600, 658, 439, 295, 428, 819, 6565, 293, 641, 819, 3467, 13, 509, 458], "temperature": 0.0, "avg_logprob": -0.12287486284628682, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014964638103265315}, {"id": 102, "seek": 86336, "start": 870.92, "end": 877.52, "text": " how you want to put them together. You know that I want this plane to go to this CRTC,", "tokens": [577, 291, 528, 281, 829, 552, 1214, 13, 509, 458, 300, 286, 528, 341, 5720, 281, 352, 281, 341, 14123, 18238, 11], "temperature": 0.0, "avg_logprob": -0.12287486284628682, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014964638103265315}, {"id": 103, "seek": 86336, "start": 877.52, "end": 885.64, "text": " to this connector, and so you take all of those objects, you do a massive property set,", "tokens": [281, 341, 19127, 11, 293, 370, 291, 747, 439, 295, 729, 6565, 11, 291, 360, 257, 5994, 4707, 992, 11], "temperature": 0.0, "avg_logprob": -0.12287486284628682, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014964638103265315}, {"id": 104, "seek": 86336, "start": 885.64, "end": 892.28, "text": " and then you do an atomic check before you commit just to see if the configuration is", "tokens": [293, 550, 291, 360, 364, 22275, 1520, 949, 291, 5599, 445, 281, 536, 498, 264, 11694, 307], "temperature": 0.0, "avg_logprob": -0.12287486284628682, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.00014964638103265315}, {"id": 105, "seek": 89228, "start": 892.28, "end": 899.9599999999999, "text": " going to be accepted. One of the things about display hardware is that it's weird. It's", "tokens": [516, 281, 312, 9035, 13, 1485, 295, 264, 721, 466, 4674, 8837, 307, 300, 309, 311, 3657, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.11161844757781632, "compression_ratio": 1.669767441860465, "no_speech_prob": 0.00018135190475732088}, {"id": 106, "seek": 89228, "start": 899.9599999999999, "end": 907.16, "text": " really, really weird. There are infinite constraints on what you can actually do with the display", "tokens": [534, 11, 534, 3657, 13, 821, 366, 13785, 18491, 322, 437, 291, 393, 767, 360, 365, 264, 4674], "temperature": 0.0, "avg_logprob": -0.11161844757781632, "compression_ratio": 1.669767441860465, "no_speech_prob": 0.00018135190475732088}, {"id": 107, "seek": 89228, "start": 907.16, "end": 912.88, "text": " hardware. So you might have three or four planes that you can use to composite content", "tokens": [8837, 13, 407, 291, 1062, 362, 1045, 420, 1451, 14952, 300, 291, 393, 764, 281, 25557, 2701], "temperature": 0.0, "avg_logprob": -0.11161844757781632, "compression_ratio": 1.669767441860465, "no_speech_prob": 0.00018135190475732088}, {"id": 108, "seek": 89228, "start": 912.88, "end": 920.52, "text": " without using the GPU, but you can only use a couple of them at a time, or only one of", "tokens": [1553, 1228, 264, 18407, 11, 457, 291, 393, 787, 764, 257, 1916, 295, 552, 412, 257, 565, 11, 420, 787, 472, 295], "temperature": 0.0, "avg_logprob": -0.11161844757781632, "compression_ratio": 1.669767441860465, "no_speech_prob": 0.00018135190475732088}, {"id": 109, "seek": 92052, "start": 920.52, "end": 928.96, "text": " them can have compressed content, or only two of them can be scaled. So because we don't", "tokens": [552, 393, 362, 30353, 2701, 11, 420, 787, 732, 295, 552, 393, 312, 36039, 13, 407, 570, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.1252705180455768, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.0005198297440074384}, {"id": 110, "seek": 92052, "start": 928.96, "end": 936.12, "text": " have a good generic way of expressing these constraints and of constraint solving within", "tokens": [362, 257, 665, 19577, 636, 295, 22171, 613, 18491, 293, 295, 25534, 12606, 1951], "temperature": 0.0, "avg_logprob": -0.1252705180455768, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.0005198297440074384}, {"id": 111, "seek": 92052, "start": 936.12, "end": 943.92, "text": " the kernel, we do the dumbest possible thing. It's brute force. We just try every possible", "tokens": [264, 28256, 11, 321, 360, 264, 10316, 377, 1944, 551, 13, 467, 311, 47909, 3464, 13, 492, 445, 853, 633, 1944], "temperature": 0.0, "avg_logprob": -0.1252705180455768, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.0005198297440074384}, {"id": 112, "seek": 94392, "start": 943.92, "end": 950.92, "text": " configuration that will get us to where we want to and see which one's going to stick.", "tokens": [11694, 300, 486, 483, 505, 281, 689, 321, 528, 281, 293, 536, 597, 472, 311, 516, 281, 2897, 13], "temperature": 0.0, "avg_logprob": -0.17975652721566213, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0002600341977085918}, {"id": 113, "seek": 94392, "start": 950.92, "end": 957.76, "text": " Then yeah, once you've gone through all that, you've done your atomic commit, you've got", "tokens": [1396, 1338, 11, 1564, 291, 600, 2780, 807, 439, 300, 11, 291, 600, 1096, 428, 22275, 5599, 11, 291, 600, 658], "temperature": 0.0, "avg_logprob": -0.17975652721566213, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0002600341977085918}, {"id": 114, "seek": 94392, "start": 957.76, "end": 966.16, "text": " a frame on screen, it lives there until you change it. Because DRM is, it's a frame by", "tokens": [257, 3920, 322, 2568, 11, 309, 2909, 456, 1826, 291, 1319, 309, 13, 1436, 12118, 44, 307, 11, 309, 311, 257, 3920, 538], "temperature": 0.0, "avg_logprob": -0.17975652721566213, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0002600341977085918}, {"id": 115, "seek": 96616, "start": 966.16, "end": 976.9599999999999, "text": " frame API. It's not a producer-consumer where you connect a camera to an output and magic", "tokens": [3920, 9362, 13, 467, 311, 406, 257, 12314, 12, 21190, 15583, 689, 291, 1745, 257, 2799, 281, 364, 5598, 293, 5585], "temperature": 0.0, "avg_logprob": -0.21636087600498982, "compression_ratio": 1.3775510204081634, "no_speech_prob": 7.002767961239442e-05}, {"id": 116, "seek": 96616, "start": 976.9599999999999, "end": 983.56, "text": " things occur and you get a video stream. You know, that's the domain of high-level frameworks", "tokens": [721, 5160, 293, 291, 483, 257, 960, 4309, 13, 509, 458, 11, 300, 311, 264, 9274, 295, 1090, 12, 12418, 29834], "temperature": 0.0, "avg_logprob": -0.21636087600498982, "compression_ratio": 1.3775510204081634, "no_speech_prob": 7.002767961239442e-05}, {"id": 117, "seek": 96616, "start": 983.56, "end": 992.68, "text": " like say PipeWire and Gstreamer have that pipeline concept. DRM is quite dumb. It just", "tokens": [411, 584, 430, 6527, 54, 621, 293, 460, 9291, 260, 362, 300, 15517, 3410, 13, 12118, 44, 307, 1596, 10316, 13, 467, 445], "temperature": 0.0, "avg_logprob": -0.21636087600498982, "compression_ratio": 1.3775510204081634, "no_speech_prob": 7.002767961239442e-05}, {"id": 118, "seek": 99268, "start": 992.68, "end": 998.8399999999999, "text": " does what you tell it to, and it doesn't do anything else until you tell it to do something", "tokens": [775, 437, 291, 980, 309, 281, 11, 293, 309, 1177, 380, 360, 1340, 1646, 1826, 291, 980, 309, 281, 360, 746], "temperature": 0.0, "avg_logprob": -0.1801578326103015, "compression_ratio": 1.5798816568047338, "no_speech_prob": 7.95041341916658e-05}, {"id": 119, "seek": 99268, "start": 998.8399999999999, "end": 1010.5999999999999, "text": " else. So yeah, we've essentially summing up, you know, we've enumerated all of our devices,", "tokens": [1646, 13, 407, 1338, 11, 321, 600, 4476, 2408, 2810, 493, 11, 291, 458, 11, 321, 600, 465, 15583, 770, 439, 295, 527, 5759, 11], "temperature": 0.0, "avg_logprob": -0.1801578326103015, "compression_ratio": 1.5798816568047338, "no_speech_prob": 7.95041341916658e-05}, {"id": 120, "seek": 99268, "start": 1010.5999999999999, "end": 1016.92, "text": " we've used the DRM to do that, all of the objects. And again, as with timing, we're", "tokens": [321, 600, 1143, 264, 12118, 44, 281, 360, 300, 11, 439, 295, 264, 6565, 13, 400, 797, 11, 382, 365, 10822, 11, 321, 434], "temperature": 0.0, "avg_logprob": -0.1801578326103015, "compression_ratio": 1.5798816568047338, "no_speech_prob": 7.95041341916658e-05}, {"id": 121, "seek": 101692, "start": 1016.92, "end": 1025.04, "text": " working backwards from the starting point of a connector. So we know that HDMI1 is the", "tokens": [1364, 12204, 490, 264, 2891, 935, 295, 257, 19127, 13, 407, 321, 458, 300, 30811, 16, 307, 264], "temperature": 0.0, "avg_logprob": -0.1284035212958037, "compression_ratio": 1.489010989010989, "no_speech_prob": 4.1507861169520766e-05}, {"id": 122, "seek": 101692, "start": 1025.04, "end": 1030.72, "text": " thing that we want to light up, so you always work backwards from that when you're building", "tokens": [551, 300, 321, 528, 281, 1442, 493, 11, 370, 291, 1009, 589, 12204, 490, 300, 562, 291, 434, 2390], "temperature": 0.0, "avg_logprob": -0.1284035212958037, "compression_ratio": 1.489010989010989, "no_speech_prob": 4.1507861169520766e-05}, {"id": 123, "seek": 101692, "start": 1030.72, "end": 1041.2, "text": " up your object tree. And then, you know, you are going to need a way to allocate some memory", "tokens": [493, 428, 2657, 4230, 13, 400, 550, 11, 291, 458, 11, 291, 366, 516, 281, 643, 257, 636, 281, 35713, 512, 4675], "temperature": 0.0, "avg_logprob": -0.1284035212958037, "compression_ratio": 1.489010989010989, "no_speech_prob": 4.1507861169520766e-05}, {"id": 124, "seek": 104120, "start": 1041.2, "end": 1051.0800000000002, "text": " to display. It's not just a malloc pointer. So we have Gem, the graphics execution manager.", "tokens": [281, 4674, 13, 467, 311, 406, 445, 257, 16026, 905, 23918, 13, 407, 321, 362, 22894, 11, 264, 11837, 15058, 6598, 13], "temperature": 0.0, "avg_logprob": -0.13602309440498922, "compression_ratio": 1.5, "no_speech_prob": 4.660943886847235e-05}, {"id": 125, "seek": 104120, "start": 1051.0800000000002, "end": 1058.1200000000001, "text": " It doesn't manage execution of any graphics jobs, it's just a memory allocator. This was", "tokens": [467, 1177, 380, 3067, 15058, 295, 604, 11837, 4782, 11, 309, 311, 445, 257, 4675, 12660, 1639, 13, 639, 390], "temperature": 0.0, "avg_logprob": -0.13602309440498922, "compression_ratio": 1.5, "no_speech_prob": 4.660943886847235e-05}, {"id": 126, "seek": 104120, "start": 1058.1200000000001, "end": 1063.8400000000001, "text": " about the point where we stopped actually naming acronyms because we've got almost all", "tokens": [466, 264, 935, 689, 321, 5936, 767, 25290, 31713, 88, 2592, 570, 321, 600, 658, 1920, 439], "temperature": 0.0, "avg_logprob": -0.13602309440498922, "compression_ratio": 1.5, "no_speech_prob": 4.660943886847235e-05}, {"id": 127, "seek": 106384, "start": 1063.84, "end": 1073.56, "text": " of them wrong. So Gem, you see a lot of, because that's the base of our kernel allocator for", "tokens": [295, 552, 2085, 13, 407, 22894, 11, 291, 536, 257, 688, 295, 11, 570, 300, 311, 264, 3096, 295, 527, 28256, 12660, 1639, 337], "temperature": 0.0, "avg_logprob": -0.18271651091399016, "compression_ratio": 1.469945355191257, "no_speech_prob": 6.577755993930623e-05}, {"id": 128, "seek": 106384, "start": 1073.56, "end": 1081.6, "text": " all graphics and display memory. And BO is something you see a lot of as well. So really,", "tokens": [439, 11837, 293, 4674, 4675, 13, 400, 22785, 307, 746, 291, 536, 257, 688, 295, 382, 731, 13, 407, 534, 11], "temperature": 0.0, "avg_logprob": -0.18271651091399016, "compression_ratio": 1.469945355191257, "no_speech_prob": 6.577755993930623e-05}, {"id": 129, "seek": 106384, "start": 1081.6, "end": 1090.8799999999999, "text": " I told you about it, acronyms. So Gem BO is just, like a malloc pointer, it's untyped,", "tokens": [286, 1907, 291, 466, 309, 11, 31713, 88, 2592, 13, 407, 22894, 22785, 307, 445, 11, 411, 257, 16026, 905, 23918, 11, 309, 311, 517, 874, 3452, 11], "temperature": 0.0, "avg_logprob": -0.18271651091399016, "compression_ratio": 1.469945355191257, "no_speech_prob": 6.577755993930623e-05}, {"id": 130, "seek": 109088, "start": 1090.88, "end": 1099.3600000000001, "text": " it's a raw bucket of bytes. It can be pixel buffers, it can be shaders, it can be geometry", "tokens": [309, 311, 257, 8936, 13058, 295, 36088, 13, 467, 393, 312, 19261, 9204, 433, 11, 309, 393, 312, 5744, 433, 11, 309, 393, 312, 18426], "temperature": 0.0, "avg_logprob": -0.13572433259752062, "compression_ratio": 1.5222222222222221, "no_speech_prob": 9.241489169653505e-05}, {"id": 131, "seek": 109088, "start": 1099.3600000000001, "end": 1106.16, "text": " meshes, whatever you want it to be. It doesn't have any properties or metadata, just a length", "tokens": [3813, 8076, 11, 2035, 291, 528, 309, 281, 312, 13, 467, 1177, 380, 362, 604, 7221, 420, 26603, 11, 445, 257, 4641], "temperature": 0.0, "avg_logprob": -0.13572433259752062, "compression_ratio": 1.5222222222222221, "no_speech_prob": 9.241489169653505e-05}, {"id": 132, "seek": 109088, "start": 1106.16, "end": 1115.5600000000002, "text": " and some content. But you can't allocate them generically because hardware is really that", "tokens": [293, 512, 2701, 13, 583, 291, 393, 380, 35713, 552, 1337, 984, 570, 8837, 307, 534, 300], "temperature": 0.0, "avg_logprob": -0.13572433259752062, "compression_ratio": 1.5222222222222221, "no_speech_prob": 9.241489169653505e-05}, {"id": 133, "seek": 111556, "start": 1115.56, "end": 1121.36, "text": " weird. We gave up on that a long time ago. So you're going to need some kind of hardware", "tokens": [3657, 13, 492, 2729, 493, 322, 300, 257, 938, 565, 2057, 13, 407, 291, 434, 516, 281, 643, 512, 733, 295, 8837], "temperature": 0.0, "avg_logprob": -0.1106950283050537, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.00020309753017500043}, {"id": 134, "seek": 111556, "start": 1121.36, "end": 1129.96, "text": " specific API to come up with a Gem BO. And you might be quite disappointed about that,", "tokens": [2685, 9362, 281, 808, 493, 365, 257, 22894, 22785, 13, 400, 291, 1062, 312, 1596, 13856, 466, 300, 11], "temperature": 0.0, "avg_logprob": -0.1106950283050537, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.00020309753017500043}, {"id": 135, "seek": 111556, "start": 1129.96, "end": 1141.52, "text": " which is reasonable. So we came up with dumb buffers as a specific class of Gem BOs designed", "tokens": [597, 307, 10585, 13, 407, 321, 1361, 493, 365, 10316, 9204, 433, 382, 257, 2685, 1508, 295, 22894, 22785, 82, 4761], "temperature": 0.0, "avg_logprob": -0.1106950283050537, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.00020309753017500043}, {"id": 136, "seek": 114152, "start": 1141.52, "end": 1147.76, "text": " specifically for CPU rendering when you're displaying KMS. So if you have something like", "tokens": [4682, 337, 13199, 22407, 562, 291, 434, 36834, 591, 10288, 13, 407, 498, 291, 362, 746, 411], "temperature": 0.0, "avg_logprob": -0.12347327107968538, "compression_ratio": 1.5869565217391304, "no_speech_prob": 5.769246490672231e-05}, {"id": 137, "seek": 114152, "start": 1147.76, "end": 1155.08, "text": " Plymouth for your early start splash screen, that's not going to be using the GPU. It's", "tokens": [430, 356, 22357, 337, 428, 2440, 722, 25757, 2568, 11, 300, 311, 406, 516, 281, 312, 1228, 264, 18407, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.12347327107968538, "compression_ratio": 1.5869565217391304, "no_speech_prob": 5.769246490672231e-05}, {"id": 138, "seek": 114152, "start": 1155.08, "end": 1162.28, "text": " just going to be doing CPU rendering, no device dependent code. And dumb buffers are the path", "tokens": [445, 516, 281, 312, 884, 13199, 22407, 11, 572, 4302, 12334, 3089, 13, 400, 10316, 9204, 433, 366, 264, 3100], "temperature": 0.0, "avg_logprob": -0.12347327107968538, "compression_ratio": 1.5869565217391304, "no_speech_prob": 5.769246490672231e-05}, {"id": 139, "seek": 114152, "start": 1162.28, "end": 1168.6399999999999, "text": " to that there. I just wanted to get something up on the screen. I don't care if it's amazingly", "tokens": [281, 300, 456, 13, 286, 445, 1415, 281, 483, 746, 493, 322, 264, 2568, 13, 286, 500, 380, 1127, 498, 309, 311, 31762], "temperature": 0.0, "avg_logprob": -0.12347327107968538, "compression_ratio": 1.5869565217391304, "no_speech_prob": 5.769246490672231e-05}, {"id": 140, "seek": 116864, "start": 1168.64, "end": 1175.6000000000001, "text": " fast or efficient, I just need it to work and work everywhere. So this is actually a", "tokens": [2370, 420, 7148, 11, 286, 445, 643, 309, 281, 589, 293, 589, 5315, 13, 407, 341, 307, 767, 257], "temperature": 0.0, "avg_logprob": -0.15054464864206837, "compression_ratio": 1.5377777777777777, "no_speech_prob": 3.668248245958239e-05}, {"id": 141, "seek": 116864, "start": 1175.6000000000001, "end": 1181.3200000000002, "text": " generic API inside KMS dumb buffers. Gives you a Gem BO, you can map it, you can fill", "tokens": [19577, 9362, 1854, 591, 10288, 10316, 9204, 433, 13, 460, 1539, 291, 257, 22894, 22785, 11, 291, 393, 4471, 309, 11, 291, 393, 2836], "temperature": 0.0, "avg_logprob": -0.15054464864206837, "compression_ratio": 1.5377777777777777, "no_speech_prob": 3.668248245958239e-05}, {"id": 142, "seek": 116864, "start": 1181.3200000000002, "end": 1188.0800000000002, "text": " it up with some nice pixels. And then wrap that in a KMS frame buffer is what annotates", "tokens": [309, 493, 365, 512, 1481, 18668, 13, 400, 550, 7019, 300, 294, 257, 591, 10288, 3920, 21762, 307, 437, 25339, 1024], "temperature": 0.0, "avg_logprob": -0.15054464864206837, "compression_ratio": 1.5377777777777777, "no_speech_prob": 3.668248245958239e-05}, {"id": 143, "seek": 116864, "start": 1188.0800000000002, "end": 1194.3600000000001, "text": " the BO with stuff like format and width and height and stuff that people think might be", "tokens": [264, 22785, 365, 1507, 411, 7877, 293, 11402, 293, 6681, 293, 1507, 300, 561, 519, 1062, 312], "temperature": 0.0, "avg_logprob": -0.15054464864206837, "compression_ratio": 1.5377777777777777, "no_speech_prob": 3.668248245958239e-05}, {"id": 144, "seek": 119436, "start": 1194.36, "end": 1200.7199999999998, "text": " important. So yeah, like I said, you can use it for splash screens. Please don't try to", "tokens": [1021, 13, 407, 1338, 11, 411, 286, 848, 11, 291, 393, 764, 309, 337, 25757, 11171, 13, 2555, 500, 380, 853, 281], "temperature": 0.0, "avg_logprob": -0.11350300908088684, "compression_ratio": 1.5848214285714286, "no_speech_prob": 3.953913619625382e-05}, {"id": 145, "seek": 119436, "start": 1200.7199999999998, "end": 1207.36, "text": " use it for other stuff. It's not a generic memory allocation API either. It's just the", "tokens": [764, 309, 337, 661, 1507, 13, 467, 311, 406, 257, 19577, 4675, 27599, 9362, 2139, 13, 467, 311, 445, 264], "temperature": 0.0, "avg_logprob": -0.11350300908088684, "compression_ratio": 1.5848214285714286, "no_speech_prob": 3.953913619625382e-05}, {"id": 146, "seek": 119436, "start": 1207.36, "end": 1215.6799999999998, "text": " thing that works. So yeah, with all that being said, that's a reasonable end-to-end picture", "tokens": [551, 300, 1985, 13, 407, 1338, 11, 365, 439, 300, 885, 848, 11, 300, 311, 257, 10585, 917, 12, 1353, 12, 521, 3036], "temperature": 0.0, "avg_logprob": -0.11350300908088684, "compression_ratio": 1.5848214285714286, "no_speech_prob": 3.953913619625382e-05}, {"id": 147, "seek": 119436, "start": 1215.6799999999998, "end": 1222.9599999999998, "text": " of how to use KMS. You've allocated all the buffers you need or imported them from other", "tokens": [295, 577, 281, 764, 591, 10288, 13, 509, 600, 29772, 439, 264, 9204, 433, 291, 643, 420, 25524, 552, 490, 661], "temperature": 0.0, "avg_logprob": -0.11350300908088684, "compression_ratio": 1.5848214285714286, "no_speech_prob": 3.953913619625382e-05}, {"id": 148, "seek": 122296, "start": 1222.96, "end": 1229.04, "text": " clients. You've attached those frame buffers to planes. You've stuck them on a CRTC to", "tokens": [6982, 13, 509, 600, 8570, 729, 3920, 9204, 433, 281, 14952, 13, 509, 600, 5541, 552, 322, 257, 14123, 18238, 281], "temperature": 0.0, "avg_logprob": -0.15376542123515954, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.00012940294982399791}, {"id": 149, "seek": 122296, "start": 1229.04, "end": 1235.88, "text": " get them in a kind of logical space and stacked against each other. You've set your CRTC", "tokens": [483, 552, 294, 257, 733, 295, 14978, 1901, 293, 28867, 1970, 1184, 661, 13, 509, 600, 992, 428, 14123, 18238], "temperature": 0.0, "avg_logprob": -0.15376542123515954, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.00012940294982399791}, {"id": 150, "seek": 122296, "start": 1235.88, "end": 1243.48, "text": " and connector up for the output path. Commit everything. Hopefully that works. Then the", "tokens": [293, 19127, 493, 337, 264, 5598, 3100, 13, 3046, 270, 1203, 13, 10429, 300, 1985, 13, 1396, 264], "temperature": 0.0, "avg_logprob": -0.15376542123515954, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.00012940294982399791}, {"id": 151, "seek": 122296, "start": 1243.48, "end": 1248.48, "text": " kernel tells you that it's complete. You know when the next frame is going to be and you", "tokens": [28256, 5112, 291, 300, 309, 311, 3566, 13, 509, 458, 562, 264, 958, 3920, 307, 516, 281, 312, 293, 291], "temperature": 0.0, "avg_logprob": -0.15376542123515954, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.00012940294982399791}, {"id": 152, "seek": 124848, "start": 1248.48, "end": 1255.8, "text": " just keep on going. You can't click these links if you're sitting in this room, but", "tokens": [445, 1066, 322, 516, 13, 509, 393, 380, 2052, 613, 6123, 498, 291, 434, 3798, 294, 341, 1808, 11, 457], "temperature": 0.0, "avg_logprob": -0.16166552030123196, "compression_ratio": 1.403225806451613, "no_speech_prob": 3.849748463835567e-05}, {"id": 153, "seek": 124848, "start": 1255.8, "end": 1262.84, "text": " they are clickable on the PDF. There's a bunch of pretty decent documentation examples and", "tokens": [436, 366, 2052, 712, 322, 264, 17752, 13, 821, 311, 257, 3840, 295, 1238, 8681, 14333, 5110, 293], "temperature": 0.0, "avg_logprob": -0.16166552030123196, "compression_ratio": 1.403225806451613, "no_speech_prob": 3.849748463835567e-05}, {"id": 154, "seek": 124848, "start": 1262.84, "end": 1267.72, "text": " formats because I'm not trying to show you the entire thing. Just give you a good idea", "tokens": [25879, 570, 286, 478, 406, 1382, 281, 855, 291, 264, 2302, 551, 13, 1449, 976, 291, 257, 665, 1558], "temperature": 0.0, "avg_logprob": -0.16166552030123196, "compression_ratio": 1.403225806451613, "no_speech_prob": 3.849748463835567e-05}, {"id": 155, "seek": 126772, "start": 1267.72, "end": 1279.24, "text": " and some pointers. If you're bored of KMS or you just don't find display that exciting,", "tokens": [293, 512, 44548, 13, 759, 291, 434, 13521, 295, 591, 10288, 420, 291, 445, 500, 380, 915, 4674, 300, 4670, 11], "temperature": 0.0, "avg_logprob": -0.17990151257582113, "compression_ratio": 1.4479166666666667, "no_speech_prob": 4.2616899008862674e-05}, {"id": 156, "seek": 126772, "start": 1279.24, "end": 1286.52, "text": " you might want to move on to the Windows system world. There's a super quick one through Wayland.", "tokens": [291, 1062, 528, 281, 1286, 322, 281, 264, 8591, 1185, 1002, 13, 821, 311, 257, 1687, 1702, 472, 807, 9558, 1661, 13], "temperature": 0.0, "avg_logprob": -0.17990151257582113, "compression_ratio": 1.4479166666666667, "no_speech_prob": 4.2616899008862674e-05}, {"id": 157, "seek": 126772, "start": 1286.52, "end": 1295.56, "text": " Again, it's the same thing. It's clients giving you images and you're giving clients pointer", "tokens": [3764, 11, 309, 311, 264, 912, 551, 13, 467, 311, 6982, 2902, 291, 5267, 293, 291, 434, 2902, 6982, 23918], "temperature": 0.0, "avg_logprob": -0.17990151257582113, "compression_ratio": 1.4479166666666667, "no_speech_prob": 4.2616899008862674e-05}, {"id": 158, "seek": 129556, "start": 1295.56, "end": 1303.2, "text": " and keyboard and top screen events in return. I think the main thing about Wayland that", "tokens": [293, 10186, 293, 1192, 2568, 3931, 294, 2736, 13, 286, 519, 264, 2135, 551, 466, 9558, 1661, 300], "temperature": 0.0, "avg_logprob": -0.09357999445317866, "compression_ratio": 1.579185520361991, "no_speech_prob": 7.42716365493834e-05}, {"id": 159, "seek": 129556, "start": 1303.2, "end": 1310.6, "text": " people take a while to grasp is that it's descriptive rather than prescriptive. What", "tokens": [561, 747, 257, 1339, 281, 21743, 307, 300, 309, 311, 42585, 2831, 813, 1183, 5944, 488, 13, 708], "temperature": 0.0, "avg_logprob": -0.09357999445317866, "compression_ratio": 1.579185520361991, "no_speech_prob": 7.42716365493834e-05}, {"id": 160, "seek": 129556, "start": 1310.6, "end": 1319.0, "text": " I mean by that is in X11, when you have a pop-up, you tell X as a client, put this window", "tokens": [286, 914, 538, 300, 307, 294, 1783, 5348, 11, 562, 291, 362, 257, 1665, 12, 1010, 11, 291, 980, 1783, 382, 257, 6423, 11, 829, 341, 4910], "temperature": 0.0, "avg_logprob": -0.09357999445317866, "compression_ratio": 1.579185520361991, "no_speech_prob": 7.42716365493834e-05}, {"id": 161, "seek": 129556, "start": 1319.0, "end": 1324.84, "text": " exactly here on the screen. Give me all of the input events until I tell you otherwise", "tokens": [2293, 510, 322, 264, 2568, 13, 5303, 385, 439, 295, 264, 4846, 3931, 1826, 286, 980, 291, 5911], "temperature": 0.0, "avg_logprob": -0.09357999445317866, "compression_ratio": 1.579185520361991, "no_speech_prob": 7.42716365493834e-05}, {"id": 162, "seek": 132484, "start": 1324.84, "end": 1331.08, "text": " because you're dictating specific outcomes. Wayland is exactly the other direction from", "tokens": [570, 291, 434, 12569, 990, 2685, 10070, 13, 9558, 1661, 307, 2293, 264, 661, 3513, 490], "temperature": 0.0, "avg_logprob": -0.1116773804952932, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.00011742261267499998}, {"id": 163, "seek": 132484, "start": 1331.08, "end": 1337.56, "text": " that. The client tells the compositor, this is a pop-up. The compositor does the right", "tokens": [300, 13, 440, 6423, 5112, 264, 10199, 3029, 11, 341, 307, 257, 1665, 12, 1010, 13, 440, 10199, 3029, 775, 264, 558], "temperature": 0.0, "avg_logprob": -0.1116773804952932, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.00011742261267499998}, {"id": 164, "seek": 132484, "start": 1337.56, "end": 1344.6799999999998, "text": " thing for pop-ups, including capturing input and making it always be on top, but still", "tokens": [551, 337, 1665, 12, 7528, 11, 3009, 23384, 4846, 293, 1455, 309, 1009, 312, 322, 1192, 11, 457, 920], "temperature": 0.0, "avg_logprob": -0.1116773804952932, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.00011742261267499998}, {"id": 165, "seek": 132484, "start": 1344.6799999999998, "end": 1353.6399999999999, "text": " letting your screensaver work, which is nice. It's just about the client annotating everything", "tokens": [8295, 428, 11171, 20655, 589, 11, 597, 307, 1481, 13, 467, 311, 445, 466, 264, 6423, 25339, 990, 1203], "temperature": 0.0, "avg_logprob": -0.1116773804952932, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.00011742261267499998}, {"id": 166, "seek": 135364, "start": 1353.64, "end": 1361.48, "text": " it has with a bunch of descriptive information and properties and then relying on the server", "tokens": [309, 575, 365, 257, 3840, 295, 42585, 1589, 293, 7221, 293, 550, 24140, 322, 264, 7154], "temperature": 0.0, "avg_logprob": -0.14815403502664448, "compression_ratio": 1.524229074889868, "no_speech_prob": 4.584140333463438e-05}, {"id": 167, "seek": 135364, "start": 1361.48, "end": 1368.48, "text": " to actually implement the right semantics. There's a fair bit of trust, but it gives", "tokens": [281, 767, 4445, 264, 558, 4361, 45298, 13, 821, 311, 257, 3143, 857, 295, 3361, 11, 457, 309, 2709], "temperature": 0.0, "avg_logprob": -0.14815403502664448, "compression_ratio": 1.524229074889868, "no_speech_prob": 4.584140333463438e-05}, {"id": 168, "seek": 135364, "start": 1368.48, "end": 1375.2800000000002, "text": " us much, much more flexibility because by the end after how many years of X11, we were", "tokens": [505, 709, 11, 709, 544, 12635, 570, 538, 264, 917, 934, 577, 867, 924, 295, 1783, 5348, 11, 321, 645], "temperature": 0.0, "avg_logprob": -0.14815403502664448, "compression_ratio": 1.524229074889868, "no_speech_prob": 4.584140333463438e-05}, {"id": 169, "seek": 135364, "start": 1375.2800000000002, "end": 1383.6000000000001, "text": " kind of painted into a corner really because clients were just dictating so much.", "tokens": [733, 295, 11797, 666, 257, 4538, 534, 570, 6982, 645, 445, 12569, 990, 370, 709, 13], "temperature": 0.0, "avg_logprob": -0.14815403502664448, "compression_ratio": 1.524229074889868, "no_speech_prob": 4.584140333463438e-05}, {"id": 170, "seek": 138360, "start": 1383.6, "end": 1390.0, "text": " We tried to make sure that there were no pods in Wayland that required the compositor to", "tokens": [492, 3031, 281, 652, 988, 300, 456, 645, 572, 31925, 294, 9558, 1661, 300, 4739, 264, 10199, 3029, 281], "temperature": 0.0, "avg_logprob": -0.13338606844666184, "compression_ratio": 1.5442477876106195, "no_speech_prob": 7.381044270005077e-05}, {"id": 171, "seek": 138360, "start": 1390.0, "end": 1394.6799999999998, "text": " do a huge amount of work because it's such a critical part of the stack that you can't", "tokens": [360, 257, 2603, 2372, 295, 589, 570, 309, 311, 1270, 257, 4924, 644, 295, 264, 8630, 300, 291, 393, 380], "temperature": 0.0, "avg_logprob": -0.13338606844666184, "compression_ratio": 1.5442477876106195, "no_speech_prob": 7.381044270005077e-05}, {"id": 172, "seek": 138360, "start": 1394.6799999999998, "end": 1404.04, "text": " have it burning loads and loads of time. Like I said at the start, your compositor could", "tokens": [362, 309, 9488, 12668, 293, 12668, 295, 565, 13, 1743, 286, 848, 412, 264, 722, 11, 428, 10199, 3029, 727], "temperature": 0.0, "avg_logprob": -0.13338606844666184, "compression_ratio": 1.5442477876106195, "no_speech_prob": 7.381044270005077e-05}, {"id": 173, "seek": 138360, "start": 1404.04, "end": 1412.76, "text": " be GNOME, K-Win, could be Western, Sway or something like that. They're all designed", "tokens": [312, 46411, 23344, 11, 591, 12, 54, 259, 11, 727, 312, 8724, 11, 318, 676, 420, 746, 411, 300, 13, 814, 434, 439, 4761], "temperature": 0.0, "avg_logprob": -0.13338606844666184, "compression_ratio": 1.5442477876106195, "no_speech_prob": 7.381044270005077e-05}, {"id": 174, "seek": 141276, "start": 1412.76, "end": 1419.36, "text": " for different things and different use cases like window managers in X11 were. I think", "tokens": [337, 819, 721, 293, 819, 764, 3331, 411, 4910, 14084, 294, 1783, 5348, 645, 13, 286, 519], "temperature": 0.0, "avg_logprob": -0.13555101506850298, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.180702570825815e-05}, {"id": 175, "seek": 141276, "start": 1419.36, "end": 1425.52, "text": " Western is the best one because I work on it. It's basically designed for everything", "tokens": [8724, 307, 264, 1151, 472, 570, 286, 589, 322, 309, 13, 467, 311, 1936, 4761, 337, 1203], "temperature": 0.0, "avg_logprob": -0.13555101506850298, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.180702570825815e-05}, {"id": 176, "seek": 141276, "start": 1425.52, "end": 1432.44, "text": " that isn't a desktop, literally planes, trains and automobiles, digital signage, that kind", "tokens": [300, 1943, 380, 257, 14502, 11, 3736, 14952, 11, 16329, 293, 3553, 996, 4680, 11, 4562, 1465, 609, 11, 300, 733], "temperature": 0.0, "avg_logprob": -0.13555101506850298, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.180702570825815e-05}, {"id": 177, "seek": 141276, "start": 1432.44, "end": 1439.56, "text": " of thing. It's really, really efficient and predictable and reliable, but I do use a desktop", "tokens": [295, 551, 13, 467, 311, 534, 11, 534, 7148, 293, 27737, 293, 12924, 11, 457, 286, 360, 764, 257, 14502], "temperature": 0.0, "avg_logprob": -0.13555101506850298, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.180702570825815e-05}, {"id": 178, "seek": 143956, "start": 1439.56, "end": 1447.0, "text": " so I have GNOME on this one. There are absolutely a pile of them to choose from, but they all", "tokens": [370, 286, 362, 46411, 23344, 322, 341, 472, 13, 821, 366, 3122, 257, 14375, 295, 552, 281, 2826, 490, 11, 457, 436, 439], "temperature": 0.0, "avg_logprob": -0.17830108460925875, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.00021945062326267362}, {"id": 179, "seek": 143956, "start": 1447.0, "end": 1455.6799999999998, "text": " use the same protocol so they all look alike to the client.", "tokens": [764, 264, 912, 10336, 370, 436, 439, 574, 20025, 281, 264, 6423, 13], "temperature": 0.0, "avg_logprob": -0.17830108460925875, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.00021945062326267362}, {"id": 180, "seek": 143956, "start": 1455.6799999999998, "end": 1463.04, "text": " It's just a large collection of essentially all extension interfaces. WLBuffer is much", "tokens": [467, 311, 445, 257, 2416, 5765, 295, 4476, 439, 10320, 28416, 13, 343, 43, 33, 1245, 260, 307, 709], "temperature": 0.0, "avg_logprob": -0.17830108460925875, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.00021945062326267362}, {"id": 181, "seek": 146304, "start": 1463.04, "end": 1469.6, "text": " like a frame buffer to handle to some pixels somewhere, no other information just width", "tokens": [411, 257, 3920, 21762, 281, 4813, 281, 512, 18668, 4079, 11, 572, 661, 1589, 445, 11402], "temperature": 0.0, "avg_logprob": -0.2044015748160226, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.00025023645139299333}, {"id": 182, "seek": 146304, "start": 1469.6, "end": 1476.6399999999999, "text": " and height. A WL surface is a window, can be a pop-up, can be an application window,", "tokens": [293, 6681, 13, 316, 343, 43, 3753, 307, 257, 4910, 11, 393, 312, 257, 1665, 12, 1010, 11, 393, 312, 364, 3861, 4910, 11], "temperature": 0.0, "avg_logprob": -0.2044015748160226, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.00025023645139299333}, {"id": 183, "seek": 146304, "start": 1476.6399999999999, "end": 1485.36, "text": " can be a subsurface. It takes the buffer, it just crops it and optionally it takes input", "tokens": [393, 312, 257, 2090, 374, 2868, 13, 467, 2516, 264, 21762, 11, 309, 445, 16829, 309, 293, 3614, 379, 309, 2516, 4846], "temperature": 0.0, "avg_logprob": -0.2044015748160226, "compression_ratio": 1.562874251497006, "no_speech_prob": 0.00025023645139299333}, {"id": 184, "seek": 148536, "start": 1485.36, "end": 1494.9599999999998, "text": " back. XDG surface is the main one you'd interact with really because that's what adds all the", "tokens": [646, 13, 1783, 35, 38, 3753, 307, 264, 2135, 472, 291, 1116, 4648, 365, 534, 570, 300, 311, 437, 10860, 439, 264], "temperature": 0.0, "avg_logprob": -0.1735016005379813, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.0002170538791688159}, {"id": 185, "seek": 148536, "start": 1494.9599999999998, "end": 1504.1599999999999, "text": " desktop-like things of being able to resize and move windows and all that kind of thing.", "tokens": [14502, 12, 4092, 721, 295, 885, 1075, 281, 50069, 293, 1286, 9309, 293, 439, 300, 733, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.1735016005379813, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.0002170538791688159}, {"id": 186, "seek": 148536, "start": 1504.1599999999999, "end": 1511.6799999999998, "text": " WLC is where the input comes from because we're still bad at naming, it turns out. That", "tokens": [343, 14766, 307, 689, 264, 4846, 1487, 490, 570, 321, 434, 920, 1578, 412, 25290, 11, 309, 4523, 484, 13, 663], "temperature": 0.0, "avg_logprob": -0.1735016005379813, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.0002170538791688159}, {"id": 187, "seek": 151168, "start": 1511.68, "end": 1518.96, "text": " one was my fault actually. We did design Wailand fundamentally to be really, really easy", "tokens": [472, 390, 452, 7441, 767, 13, 492, 630, 1715, 343, 864, 474, 17879, 281, 312, 534, 11, 534, 1858], "temperature": 0.0, "avg_logprob": -0.1676760549130647, "compression_ratio": 1.4838709677419355, "no_speech_prob": 7.117656787158921e-05}, {"id": 188, "seek": 151168, "start": 1518.96, "end": 1527.4, "text": " to extend so there are quite a pile of extensions that you need to sort through and deal with.", "tokens": [281, 10101, 370, 456, 366, 1596, 257, 14375, 295, 25129, 300, 291, 643, 281, 1333, 807, 293, 2028, 365, 13], "temperature": 0.0, "avg_logprob": -0.1676760549130647, "compression_ratio": 1.4838709677419355, "no_speech_prob": 7.117656787158921e-05}, {"id": 189, "seek": 151168, "start": 1527.4, "end": 1536.28, "text": " The nice thing is with it having been designed with KMS in mind, it's pretty similar. You've", "tokens": [440, 1481, 551, 307, 365, 309, 1419, 668, 4761, 365, 591, 10288, 294, 1575, 11, 309, 311, 1238, 2531, 13, 509, 600], "temperature": 0.0, "avg_logprob": -0.1676760549130647, "compression_ratio": 1.4838709677419355, "no_speech_prob": 7.117656787158921e-05}, {"id": 190, "seek": 153628, "start": 1536.28, "end": 1542.92, "text": " got your compositor doing the final output at the end and that's composed of a bunch", "tokens": [658, 428, 10199, 3029, 884, 264, 2572, 5598, 412, 264, 917, 293, 300, 311, 18204, 295, 257, 3840], "temperature": 0.0, "avg_logprob": -0.10186746716499329, "compression_ratio": 1.5664739884393064, "no_speech_prob": 2.8782838853658177e-05}, {"id": 191, "seek": 153628, "start": 1542.92, "end": 1551.12, "text": " of windows and surfaces which have got buffers attached to them. The compositor is the ultimate", "tokens": [295, 9309, 293, 16130, 597, 362, 658, 9204, 433, 8570, 281, 552, 13, 440, 10199, 3029, 307, 264, 9705], "temperature": 0.0, "avg_logprob": -0.10186746716499329, "compression_ratio": 1.5664739884393064, "no_speech_prob": 2.8782838853658177e-05}, {"id": 192, "seek": 153628, "start": 1551.12, "end": 1563.16, "text": " source of the timing and it flows that timing back to the clients as feedback. If you take", "tokens": [4009, 295, 264, 10822, 293, 309, 12867, 300, 10822, 646, 281, 264, 6982, 382, 5824, 13, 759, 291, 747], "temperature": 0.0, "avg_logprob": -0.10186746716499329, "compression_ratio": 1.5664739884393064, "no_speech_prob": 2.8782838853658177e-05}, {"id": 193, "seek": 156316, "start": 1563.16, "end": 1570.88, "text": " that, it looks exactly the same as the KMS diagram we had earlier which is not really", "tokens": [300, 11, 309, 1542, 2293, 264, 912, 382, 264, 591, 10288, 10686, 321, 632, 3071, 597, 307, 406, 534], "temperature": 0.0, "avg_logprob": -0.10584542245575876, "compression_ratio": 1.4857142857142858, "no_speech_prob": 6.842829316155985e-05}, {"id": 194, "seek": 156316, "start": 1570.88, "end": 1579.16, "text": " any coincidence and using that is exactly the same flow as KMS. This slide was almost", "tokens": [604, 22137, 293, 1228, 300, 307, 2293, 264, 912, 3095, 382, 591, 10288, 13, 639, 4137, 390, 1920], "temperature": 0.0, "avg_logprob": -0.10584542245575876, "compression_ratio": 1.4857142857142858, "no_speech_prob": 6.842829316155985e-05}, {"id": 195, "seek": 156316, "start": 1579.16, "end": 1588.3600000000001, "text": " copy and paste. Again, I'm not trying to give you a complete guide to how to write every", "tokens": [5055, 293, 9163, 13, 3764, 11, 286, 478, 406, 1382, 281, 976, 291, 257, 3566, 5934, 281, 577, 281, 2464, 633], "temperature": 0.0, "avg_logprob": -0.10584542245575876, "compression_ratio": 1.4857142857142858, "no_speech_prob": 6.842829316155985e-05}, {"id": 196, "seek": 158836, "start": 1588.36, "end": 1595.08, "text": " Wailand client in the world. Please do use a tool kit. They will make your lives much", "tokens": [343, 864, 474, 6423, 294, 264, 1002, 13, 2555, 360, 764, 257, 2290, 8260, 13, 814, 486, 652, 428, 2909, 709], "temperature": 0.0, "avg_logprob": -0.24639575512378248, "compression_ratio": 1.430939226519337, "no_speech_prob": 9.253169264411554e-05}, {"id": 197, "seek": 158836, "start": 1595.08, "end": 1606.1999999999998, "text": " easier so GTK, QT, STL, IMGUI, whatever. Use a compositor tool kit as well if you like.", "tokens": [3571, 370, 17530, 42, 11, 1249, 51, 11, 4904, 43, 11, 21463, 32298, 40, 11, 2035, 13, 8278, 257, 10199, 3029, 2290, 8260, 382, 731, 498, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.24639575512378248, "compression_ratio": 1.430939226519337, "no_speech_prob": 9.253169264411554e-05}, {"id": 198, "seek": 158836, "start": 1606.1999999999998, "end": 1611.6399999999999, "text": " Libwestern in particular and WL routes are tool kits you can use to build compositors", "tokens": [15834, 8750, 1248, 294, 1729, 293, 343, 43, 18242, 366, 2290, 22095, 291, 393, 764, 281, 1322, 10199, 9862], "temperature": 0.0, "avg_logprob": -0.24639575512378248, "compression_ratio": 1.430939226519337, "no_speech_prob": 9.253169264411554e-05}, {"id": 199, "seek": 161164, "start": 1611.64, "end": 1619.96, "text": " on top of good code bases. There's some links in here as well to Wailand info is a good", "tokens": [322, 1192, 295, 665, 3089, 17949, 13, 821, 311, 512, 6123, 294, 510, 382, 731, 281, 343, 864, 474, 13614, 307, 257, 665], "temperature": 0.0, "avg_logprob": -0.2577214308187995, "compression_ratio": 1.6107784431137724, "no_speech_prob": 9.179189510177821e-05}, {"id": 200, "seek": 161164, "start": 1619.96, "end": 1632.0800000000002, "text": " tool to inspect. WL hacks is a debugging tool. Western debug is another debugging tool. There's", "tokens": [2290, 281, 15018, 13, 343, 43, 33617, 307, 257, 45592, 2290, 13, 8724, 24083, 307, 1071, 45592, 2290, 13, 821, 311], "temperature": 0.0, "avg_logprob": -0.2577214308187995, "compression_ratio": 1.6107784431137724, "no_speech_prob": 9.179189510177821e-05}, {"id": 201, "seek": 161164, "start": 1632.0800000000002, "end": 1639.2, "text": " some sample clients as well. The simple SHM and simple EGL are our kind of references", "tokens": [512, 6889, 6982, 382, 731, 13, 440, 2199, 7405, 44, 293, 2199, 462, 19440, 366, 527, 733, 295, 15400], "temperature": 0.0, "avg_logprob": -0.2577214308187995, "compression_ratio": 1.6107784431137724, "no_speech_prob": 9.179189510177821e-05}, {"id": 202, "seek": 163920, "start": 1639.2, "end": 1650.3600000000001, "text": " of how do I actually start using this and start approaching it. Now we've got all that", "tokens": [295, 577, 360, 286, 767, 722, 1228, 341, 293, 722, 14908, 309, 13, 823, 321, 600, 658, 439, 300], "temperature": 0.0, "avg_logprob": -0.1742676910088987, "compression_ratio": 1.3235294117647058, "no_speech_prob": 0.00013210416364017874}, {"id": 203, "seek": 163920, "start": 1650.3600000000001, "end": 1660.24, "text": " out of the way. I'm not going to try and explain GL to you because we'd be here forever. Like", "tokens": [484, 295, 264, 636, 13, 286, 478, 406, 516, 281, 853, 293, 2903, 16225, 281, 291, 570, 321, 1116, 312, 510, 5680, 13, 1743], "temperature": 0.0, "avg_logprob": -0.1742676910088987, "compression_ratio": 1.3235294117647058, "no_speech_prob": 0.00013210416364017874}, {"id": 204, "seek": 166024, "start": 1660.24, "end": 1670.52, "text": " I said, it's GL as a model for accelerated 3D is clients providing the vertex data so", "tokens": [286, 848, 11, 309, 311, 16225, 382, 257, 2316, 337, 29763, 805, 35, 307, 6982, 6530, 264, 28162, 1412, 370], "temperature": 0.0, "avg_logprob": -0.20668164766751804, "compression_ratio": 1.4505494505494505, "no_speech_prob": 7.029759581200778e-05}, {"id": 205, "seek": 166024, "start": 1670.52, "end": 1677.4, "text": " you're kind of wire frame geometry, your input textures, material images, and your shader", "tokens": [291, 434, 733, 295, 6234, 3920, 18426, 11, 428, 4846, 24501, 11, 2527, 5267, 11, 293, 428, 5744, 260], "temperature": 0.0, "avg_logprob": -0.20668164766751804, "compression_ratio": 1.4505494505494505, "no_speech_prob": 7.029759581200778e-05}, {"id": 206, "seek": 166024, "start": 1677.4, "end": 1685.08, "text": " programs as well to run to generate the final output. No shaders can deform the geometry", "tokens": [4268, 382, 731, 281, 1190, 281, 8460, 264, 2572, 5598, 13, 883, 5744, 433, 393, 36094, 264, 18426], "temperature": 0.0, "avg_logprob": -0.20668164766751804, "compression_ratio": 1.4505494505494505, "no_speech_prob": 7.029759581200778e-05}, {"id": 207, "seek": 168508, "start": 1685.08, "end": 1694.1599999999999, "text": " so you can do cool stuff. You can also do things like lighting per pixel and do that", "tokens": [370, 291, 393, 360, 1627, 1507, 13, 509, 393, 611, 360, 721, 411, 9577, 680, 19261, 293, 360, 300], "temperature": 0.0, "avg_logprob": -0.16046593405983664, "compression_ratio": 1.3211678832116789, "no_speech_prob": 8.504621655447409e-05}, {"id": 208, "seek": 168508, "start": 1694.1599999999999, "end": 1704.52, "text": " in a nice reflective way that's all computational. I guess the main thing to recognize about GPU", "tokens": [294, 257, 1481, 28931, 636, 300, 311, 439, 28270, 13, 286, 2041, 264, 2135, 551, 281, 5521, 466, 18407], "temperature": 0.0, "avg_logprob": -0.16046593405983664, "compression_ratio": 1.3211678832116789, "no_speech_prob": 8.504621655447409e-05}, {"id": 209, "seek": 170452, "start": 1704.52, "end": 1716.16, "text": " is they're enormously parallel so thousands of threads, really. There's not much in the", "tokens": [307, 436, 434, 39669, 8952, 370, 5383, 295, 19314, 11, 534, 13, 821, 311, 406, 709, 294, 264], "temperature": 0.0, "avg_logprob": -0.1814565947561553, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.00013729634520132095}, {"id": 210, "seek": 170452, "start": 1716.16, "end": 1725.2, "text": " way of synchronization or shared memory. They really, GPUs can't do branching like CPUs.", "tokens": [636, 295, 19331, 2144, 420, 5507, 4675, 13, 814, 534, 11, 18407, 82, 393, 380, 360, 9819, 278, 411, 13199, 82, 13], "temperature": 0.0, "avg_logprob": -0.1814565947561553, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.00013729634520132095}, {"id": 211, "seek": 170452, "start": 1725.2, "end": 1731.6399999999999, "text": " They want to have everything set up for them a long time in advance and just do straight", "tokens": [814, 528, 281, 362, 1203, 992, 493, 337, 552, 257, 938, 565, 294, 7295, 293, 445, 360, 2997], "temperature": 0.0, "avg_logprob": -0.1814565947561553, "compression_ratio": 1.4480874316939891, "no_speech_prob": 0.00013729634520132095}, {"id": 212, "seek": 173164, "start": 1731.64, "end": 1740.3200000000002, "text": " line things from there. It's a long, deep pipeline essentially and you want to make", "tokens": [1622, 721, 490, 456, 13, 467, 311, 257, 938, 11, 2452, 15517, 4476, 293, 291, 528, 281, 652], "temperature": 0.0, "avg_logprob": -0.14451083540916443, "compression_ratio": 1.5114942528735633, "no_speech_prob": 4.054747842019424e-05}, {"id": 213, "seek": 173164, "start": 1740.3200000000002, "end": 1748.6000000000001, "text": " that roughly as static as you can. The cost of being enormously fast and really, really", "tokens": [300, 9810, 382, 13437, 382, 291, 393, 13, 440, 2063, 295, 885, 39669, 2370, 293, 534, 11, 534], "temperature": 0.0, "avg_logprob": -0.14451083540916443, "compression_ratio": 1.5114942528735633, "no_speech_prob": 4.054747842019424e-05}, {"id": 214, "seek": 173164, "start": 1748.6000000000001, "end": 1755.68, "text": " powerful, it turns out, is that they're really power hungry. That's why we have composition", "tokens": [4005, 11, 309, 4523, 484, 11, 307, 300, 436, 434, 534, 1347, 8067, 13, 663, 311, 983, 321, 362, 12686], "temperature": 0.0, "avg_logprob": -0.14451083540916443, "compression_ratio": 1.5114942528735633, "no_speech_prob": 4.054747842019424e-05}, {"id": 215, "seek": 175568, "start": 1755.68, "end": 1763.04, "text": " in the display hardware as well because it turns out that just spinning up your GPU once", "tokens": [294, 264, 4674, 8837, 382, 731, 570, 309, 4523, 484, 300, 445, 15640, 493, 428, 18407, 1564], "temperature": 0.0, "avg_logprob": -0.13148321005014274, "compression_ratio": 1.5056818181818181, "no_speech_prob": 1.0980740626109764e-05}, {"id": 216, "seek": 175568, "start": 1763.04, "end": 1773.04, "text": " per frame to produce the final display output. I worked on a device where the video runtime", "tokens": [680, 3920, 281, 5258, 264, 2572, 4674, 5598, 13, 286, 2732, 322, 257, 4302, 689, 264, 960, 34474], "temperature": 0.0, "avg_logprob": -0.13148321005014274, "compression_ratio": 1.5056818181818181, "no_speech_prob": 1.0980740626109764e-05}, {"id": 217, "seek": 175568, "start": 1773.04, "end": 1781.88, "text": " went from five hours if we didn't use the GPU to four hours if we did. It's a really", "tokens": [1437, 490, 1732, 2496, 498, 321, 994, 380, 764, 264, 18407, 281, 1451, 2496, 498, 321, 630, 13, 467, 311, 257, 534], "temperature": 0.0, "avg_logprob": -0.13148321005014274, "compression_ratio": 1.5056818181818181, "no_speech_prob": 1.0980740626109764e-05}, {"id": 218, "seek": 178188, "start": 1781.88, "end": 1788.0, "text": " measurable cost to get a GPU involved. You only want to do it if you've got the right", "tokens": [43615, 2063, 281, 483, 257, 18407, 3288, 13, 509, 787, 528, 281, 360, 309, 498, 291, 600, 658, 264, 558], "temperature": 0.0, "avg_logprob": -0.1357708772023519, "compression_ratio": 1.401098901098901, "no_speech_prob": 1.3214815226092469e-05}, {"id": 219, "seek": 178188, "start": 1788.0, "end": 1802.48, "text": " reasons for it or if you actually need it. Like I said, it's just a pure 3D only API", "tokens": [4112, 337, 309, 420, 498, 291, 767, 643, 309, 13, 1743, 286, 848, 11, 309, 311, 445, 257, 6075, 805, 35, 787, 9362], "temperature": 0.0, "avg_logprob": -0.1357708772023519, "compression_ratio": 1.401098901098901, "no_speech_prob": 1.3214815226092469e-05}, {"id": 220, "seek": 178188, "start": 1802.48, "end": 1810.96, "text": " when you talk about GL and GLES because it came out of SGI where you told it to draw", "tokens": [562, 291, 751, 466, 16225, 293, 16225, 2358, 570, 309, 1361, 484, 295, 318, 26252, 689, 291, 1907, 309, 281, 2642], "temperature": 0.0, "avg_logprob": -0.1357708772023519, "compression_ratio": 1.401098901098901, "no_speech_prob": 1.3214815226092469e-05}, {"id": 221, "seek": 181096, "start": 1810.96, "end": 1817.0, "text": " and it was drawing because there's only one screen and obviously it's going to come out", "tokens": [293, 309, 390, 6316, 570, 456, 311, 787, 472, 2568, 293, 2745, 309, 311, 516, 281, 808, 484], "temperature": 0.0, "avg_logprob": -0.13095175136219372, "compression_ratio": 1.435483870967742, "no_speech_prob": 3.0373796107596718e-05}, {"id": 222, "seek": 181096, "start": 1817.0, "end": 1826.44, "text": " at the right place in the screen as a simpler time. Then SGI realized that they needed some", "tokens": [412, 264, 558, 1081, 294, 264, 2568, 382, 257, 18587, 565, 13, 1396, 318, 26252, 5334, 300, 436, 2978, 512], "temperature": 0.0, "avg_logprob": -0.13095175136219372, "compression_ratio": 1.435483870967742, "no_speech_prob": 3.0373796107596718e-05}, {"id": 223, "seek": 181096, "start": 1826.44, "end": 1835.44, "text": " more nuance. They brought in GLX, which was the first go at integrating OpenGL with the", "tokens": [544, 42625, 13, 814, 3038, 294, 16225, 55, 11, 597, 390, 264, 700, 352, 412, 26889, 7238, 19440, 365, 264], "temperature": 0.0, "avg_logprob": -0.13095175136219372, "compression_ratio": 1.435483870967742, "no_speech_prob": 3.0373796107596718e-05}, {"id": 224, "seek": 183544, "start": 1835.44, "end": 1844.68, "text": " Windows system. Originally it had the X server processing all the commands. That was terrible.", "tokens": [8591, 1185, 13, 28696, 309, 632, 264, 1783, 7154, 9007, 439, 264, 16901, 13, 663, 390, 6237, 13], "temperature": 0.0, "avg_logprob": -0.1857595897856213, "compression_ratio": 1.4728260869565217, "no_speech_prob": 4.811008693650365e-05}, {"id": 225, "seek": 183544, "start": 1844.68, "end": 1851.44, "text": " We came up with the DRI for direct rendering infrastructure, not let the clients directly", "tokens": [492, 1361, 493, 365, 264, 413, 5577, 337, 2047, 22407, 6896, 11, 406, 718, 264, 6982, 3838], "temperature": 0.0, "avg_logprob": -0.1857595897856213, "compression_ratio": 1.4728260869565217, "no_speech_prob": 4.811008693650365e-05}, {"id": 226, "seek": 183544, "start": 1851.44, "end": 1862.56, "text": " access the GPU. It relied on central memory allocation. We came up with DRI2 where the", "tokens": [2105, 264, 18407, 13, 467, 35463, 322, 5777, 4675, 27599, 13, 492, 1361, 493, 365, 413, 5577, 17, 689, 264], "temperature": 0.0, "avg_logprob": -0.1857595897856213, "compression_ratio": 1.4728260869565217, "no_speech_prob": 4.811008693650365e-05}, {"id": 227, "seek": 186256, "start": 1862.56, "end": 1870.9199999999998, "text": " main innovation was that clients would manage their own memory in cooperation with the kernel", "tokens": [2135, 8504, 390, 300, 6982, 576, 3067, 641, 1065, 4675, 294, 14968, 365, 264, 28256], "temperature": 0.0, "avg_logprob": -0.13526088396708172, "compression_ratio": 1.489010989010989, "no_speech_prob": 5.468734525493346e-05}, {"id": 228, "seek": 186256, "start": 1870.9199999999998, "end": 1879.24, "text": " and also execute all of their own commands. That was so good that any time you see DRI", "tokens": [293, 611, 14483, 439, 295, 641, 1065, 16901, 13, 663, 390, 370, 665, 300, 604, 565, 291, 536, 413, 5577], "temperature": 0.0, "avg_logprob": -0.13526088396708172, "compression_ratio": 1.489010989010989, "no_speech_prob": 5.468734525493346e-05}, {"id": 229, "seek": 186256, "start": 1879.24, "end": 1886.9199999999998, "text": " it just means accelerated rendering, so roughly describing the last 20 years. Any time you", "tokens": [309, 445, 1355, 29763, 22407, 11, 370, 9810, 16141, 264, 1036, 945, 924, 13, 2639, 565, 291], "temperature": 0.0, "avg_logprob": -0.13526088396708172, "compression_ratio": 1.489010989010989, "no_speech_prob": 5.468734525493346e-05}, {"id": 230, "seek": 188692, "start": 1886.92, "end": 1896.72, "text": " see DRI2 it doesn't mean actual DRI2 in X11. It just means this kind of looks like a modern", "tokens": [536, 413, 5577, 17, 309, 1177, 380, 914, 3539, 413, 5577, 17, 294, 1783, 5348, 13, 467, 445, 1355, 341, 733, 295, 1542, 411, 257, 4363], "temperature": 0.0, "avg_logprob": -0.12438013818528917, "compression_ratio": 1.421875, "no_speech_prob": 0.00023098215751815587}, {"id": 231, "seek": 188692, "start": 1896.72, "end": 1905.6000000000001, "text": " Windows system by which I mean about the last 15 years. That can be confusing because those", "tokens": [8591, 1185, 538, 597, 286, 914, 466, 264, 1036, 2119, 924, 13, 663, 393, 312, 13181, 570, 729], "temperature": 0.0, "avg_logprob": -0.12438013818528917, "compression_ratio": 1.421875, "no_speech_prob": 0.00023098215751815587}, {"id": 232, "seek": 188692, "start": 1905.6000000000001, "end": 1912.76, "text": " two terms are massively ambiguous, but if you ever see DRI2 it probably means that you're", "tokens": [732, 2115, 366, 29379, 39465, 11, 457, 498, 291, 1562, 536, 413, 5577, 17, 309, 1391, 1355, 300, 291, 434], "temperature": 0.0, "avg_logprob": -0.12438013818528917, "compression_ratio": 1.421875, "no_speech_prob": 0.00023098215751815587}, {"id": 233, "seek": 191276, "start": 1912.76, "end": 1925.6, "text": " somewhere good. Then yeah, EGL is an abstraction of GLX. Rather than just plugging GL into", "tokens": [4079, 665, 13, 1396, 1338, 11, 462, 19440, 307, 364, 37765, 295, 16225, 55, 13, 16571, 813, 445, 42975, 16225, 666], "temperature": 0.0, "avg_logprob": -0.2594076662647481, "compression_ratio": 1.2482758620689656, "no_speech_prob": 2.9854672902729362e-05}, {"id": 234, "seek": 191276, "start": 1925.6, "end": 1934.96, "text": " X11 it lets you do Wayland, Android, whatever. All it really does is give you Windows that", "tokens": [1783, 5348, 309, 6653, 291, 360, 9558, 1661, 11, 8853, 11, 2035, 13, 1057, 309, 534, 775, 307, 976, 291, 8591, 300], "temperature": 0.0, "avg_logprob": -0.2594076662647481, "compression_ratio": 1.2482758620689656, "no_speech_prob": 2.9854672902729362e-05}, {"id": 235, "seek": 193496, "start": 1934.96, "end": 1944.48, "text": " you can share with the Windows system, gives you some vague notion of timing, but it doesn't", "tokens": [291, 393, 2073, 365, 264, 8591, 1185, 11, 2709, 291, 512, 24247, 10710, 295, 10822, 11, 457, 309, 1177, 380], "temperature": 0.0, "avg_logprob": -0.12387051301843979, "compression_ratio": 1.4565217391304348, "no_speech_prob": 1.6617070286883973e-05}, {"id": 236, "seek": 193496, "start": 1944.48, "end": 1951.04, "text": " have any kind of events, so the only way you can get a consistent frame timing is if you", "tokens": [362, 604, 733, 295, 3931, 11, 370, 264, 787, 636, 291, 393, 483, 257, 8398, 3920, 10822, 307, 498, 291], "temperature": 0.0, "avg_logprob": -0.12387051301843979, "compression_ratio": 1.4565217391304348, "no_speech_prob": 1.6617070286883973e-05}, {"id": 237, "seek": 193496, "start": 1951.04, "end": 1960.1200000000001, "text": " block a lot in EGL. It just tries to hide everything and make it implicit, which again", "tokens": [3461, 257, 688, 294, 462, 19440, 13, 467, 445, 9898, 281, 6479, 1203, 293, 652, 309, 26947, 11, 597, 797], "temperature": 0.0, "avg_logprob": -0.12387051301843979, "compression_ratio": 1.4565217391304348, "no_speech_prob": 1.6617070286883973e-05}, {"id": 238, "seek": 196012, "start": 1960.12, "end": 1970.56, "text": " is where GBM comes in because that's what lets us steal buffers away from EGL, push", "tokens": [307, 689, 460, 18345, 1487, 294, 570, 300, 311, 437, 6653, 505, 11009, 9204, 433, 1314, 490, 462, 19440, 11, 2944], "temperature": 0.0, "avg_logprob": -0.12410843372344971, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.00011425659613450989}, {"id": 239, "seek": 196012, "start": 1970.56, "end": 1983.3999999999999, "text": " them into KMS for display, handle our own timing and do it properly this time. EGL has", "tokens": [552, 666, 591, 10288, 337, 4674, 11, 4813, 527, 1065, 10822, 293, 360, 309, 6108, 341, 565, 13, 462, 19440, 575], "temperature": 0.0, "avg_logprob": -0.12410843372344971, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.00011425659613450989}, {"id": 240, "seek": 198340, "start": 1983.4, "end": 1991.8400000000001, "text": " that shape and then not coincidentally Vulkan has a fairly similar shape. Vulkan is the", "tokens": [300, 3909, 293, 550, 406, 13001, 36578, 41434, 5225, 575, 257, 6457, 2531, 3909, 13, 41434, 5225, 307, 264], "temperature": 0.0, "avg_logprob": -0.12804658710956573, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.00014936437946744263}, {"id": 241, "seek": 198340, "start": 1991.8400000000001, "end": 2001.16, "text": " rendering API and that's it. Vulkan WSI is the EGL equivalent which provides that Windows", "tokens": [22407, 9362, 293, 300, 311, 309, 13, 41434, 5225, 343, 20262, 307, 264, 462, 19440, 10344, 597, 6417, 300, 8591], "temperature": 0.0, "avg_logprob": -0.12804658710956573, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.00014936437946744263}, {"id": 242, "seek": 198340, "start": 2001.16, "end": 2009.48, "text": " system integration of creating Windows, posting content to them and so on. The main difference", "tokens": [1185, 10980, 295, 4084, 8591, 11, 15978, 2701, 281, 552, 293, 370, 322, 13, 440, 2135, 2649], "temperature": 0.0, "avg_logprob": -0.12804658710956573, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.00014936437946744263}, {"id": 243, "seek": 200948, "start": 2009.48, "end": 2016.48, "text": " with Vulkan is that it's really, really explicit and clear about what it's doing. The downside", "tokens": [365, 41434, 5225, 307, 300, 309, 311, 534, 11, 534, 13691, 293, 1850, 466, 437, 309, 311, 884, 13, 440, 25060], "temperature": 0.0, "avg_logprob": -0.14560593729433807, "compression_ratio": 1.6556603773584906, "no_speech_prob": 4.878022809862159e-05}, {"id": 244, "seek": 200948, "start": 2016.48, "end": 2022.24, "text": " is that because it's so explicit and clear you end up typing a hell of a lot of code.", "tokens": [307, 300, 570, 309, 311, 370, 13691, 293, 1850, 291, 917, 493, 18444, 257, 4921, 295, 257, 688, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14560593729433807, "compression_ratio": 1.6556603773584906, "no_speech_prob": 4.878022809862159e-05}, {"id": 245, "seek": 200948, "start": 2022.24, "end": 2028.32, "text": " So it's more effort to use, but there's no magic hidden under Vulkan. You know exactly", "tokens": [407, 309, 311, 544, 4630, 281, 764, 11, 457, 456, 311, 572, 5585, 7633, 833, 41434, 5225, 13, 509, 458, 2293], "temperature": 0.0, "avg_logprob": -0.14560593729433807, "compression_ratio": 1.6556603773584906, "no_speech_prob": 4.878022809862159e-05}, {"id": 246, "seek": 200948, "start": 2028.32, "end": 2036.32, "text": " what's going on for better or worse. It's really good on the desktop that on mobile", "tokens": [437, 311, 516, 322, 337, 1101, 420, 5324, 13, 467, 311, 534, 665, 322, 264, 14502, 300, 322, 6013], "temperature": 0.0, "avg_logprob": -0.14560593729433807, "compression_ratio": 1.6556603773584906, "no_speech_prob": 4.878022809862159e-05}, {"id": 247, "seek": 203632, "start": 2036.32, "end": 2044.2, "text": " SOCs the hardware isn't necessarily entirely there yet. If you're doing high performance", "tokens": [10621, 33290, 264, 8837, 1943, 380, 4725, 7696, 456, 1939, 13, 759, 291, 434, 884, 1090, 3389], "temperature": 0.0, "avg_logprob": -0.17926270214479362, "compression_ratio": 1.4162162162162162, "no_speech_prob": 3.41698614647612e-05}, {"id": 248, "seek": 203632, "start": 2044.2, "end": 2052.48, "text": " things or you just like seeing what's going on under the hood, I'd recommend Vulkan.", "tokens": [721, 420, 291, 445, 411, 2577, 437, 311, 516, 322, 833, 264, 13376, 11, 286, 1116, 2748, 41434, 5225, 13], "temperature": 0.0, "avg_logprob": -0.17926270214479362, "compression_ratio": 1.4162162162162162, "no_speech_prob": 3.41698614647612e-05}, {"id": 249, "seek": 203632, "start": 2052.48, "end": 2058.2799999999997, "text": " And yeah, I think about the last bit that we'd end up having time for is I keep on going", "tokens": [400, 1338, 11, 286, 519, 466, 264, 1036, 857, 300, 321, 1116, 917, 493, 1419, 565, 337, 307, 286, 1066, 322, 516], "temperature": 0.0, "avg_logprob": -0.17926270214479362, "compression_ratio": 1.4162162162162162, "no_speech_prob": 3.41698614647612e-05}, {"id": 250, "seek": 205828, "start": 2058.28, "end": 2069.6400000000003, "text": " on about how we, you know, just saying that EGL will get things from GL to Wayland. The", "tokens": [322, 466, 577, 321, 11, 291, 458, 11, 445, 1566, 300, 462, 19440, 486, 483, 721, 490, 16225, 281, 9558, 1661, 13, 440], "temperature": 0.0, "avg_logprob": -0.1637084063361673, "compression_ratio": 1.45, "no_speech_prob": 5.3286632464732975e-05}, {"id": 251, "seek": 205828, "start": 2069.6400000000003, "end": 2078.52, "text": " way we do that is DMA buff. It's a kernel concept about sharing memory regions between", "tokens": [636, 321, 360, 300, 307, 413, 9998, 9204, 13, 467, 311, 257, 28256, 3410, 466, 5414, 4675, 10682, 1296], "temperature": 0.0, "avg_logprob": -0.1637084063361673, "compression_ratio": 1.45, "no_speech_prob": 5.3286632464732975e-05}, {"id": 252, "seek": 205828, "start": 2078.52, "end": 2085.1600000000003, "text": " different subsystems, different processes, different contexts, whatever. So, you know,", "tokens": [819, 2090, 9321, 82, 11, 819, 7555, 11, 819, 30628, 11, 2035, 13, 407, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.1637084063361673, "compression_ratio": 1.45, "no_speech_prob": 5.3286632464732975e-05}, {"id": 253, "seek": 208516, "start": 2085.16, "end": 2091.3199999999997, "text": " we've already got in the graphics side of things. We've got the gem buffer objects,", "tokens": [321, 600, 1217, 658, 294, 264, 11837, 1252, 295, 721, 13, 492, 600, 658, 264, 7173, 21762, 6565, 11], "temperature": 0.0, "avg_logprob": -0.16263822408822867, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.00010934861347777769}, {"id": 254, "seek": 208516, "start": 2091.3199999999997, "end": 2099.16, "text": " but they're local to one particular device and to one particular user context. So, you", "tokens": [457, 436, 434, 2654, 281, 472, 1729, 4302, 293, 281, 472, 1729, 4195, 4319, 13, 407, 11, 291], "temperature": 0.0, "avg_logprob": -0.16263822408822867, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.00010934861347777769}, {"id": 255, "seek": 208516, "start": 2099.16, "end": 2105.8799999999997, "text": " know, when you want to export a buffer to your Wayland server or share it between, you", "tokens": [458, 11, 562, 291, 528, 281, 10725, 257, 21762, 281, 428, 9558, 1661, 7154, 420, 2073, 309, 1296, 11, 291], "temperature": 0.0, "avg_logprob": -0.16263822408822867, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.00010934861347777769}, {"id": 256, "seek": 210588, "start": 2105.88, "end": 2116.48, "text": " know, V4L for your video capture and, excuse me, sorry, V4L for your video capture and", "tokens": [458, 11, 691, 19, 43, 337, 428, 960, 7983, 293, 11, 8960, 385, 11, 2597, 11, 691, 19, 43, 337, 428, 960, 7983, 293], "temperature": 0.0, "avg_logprob": -0.11398230234781902, "compression_ratio": 1.4891304347826086, "no_speech_prob": 6.618804764002562e-05}, {"id": 257, "seek": 210588, "start": 2116.48, "end": 2124.32, "text": " your GPU to do some analysis on it. That's DMA buff, which just gives you a file descriptor", "tokens": [428, 18407, 281, 360, 512, 5215, 322, 309, 13, 663, 311, 413, 9998, 9204, 11, 597, 445, 2709, 291, 257, 3991, 31280, 284], "temperature": 0.0, "avg_logprob": -0.11398230234781902, "compression_ratio": 1.4891304347826086, "no_speech_prob": 6.618804764002562e-05}, {"id": 258, "seek": 210588, "start": 2124.32, "end": 2132.4, "text": " you can use as a handle to that memory area and import it into different contexts or subsystems", "tokens": [291, 393, 764, 382, 257, 4813, 281, 300, 4675, 1859, 293, 974, 309, 666, 819, 30628, 420, 2090, 9321, 82], "temperature": 0.0, "avg_logprob": -0.11398230234781902, "compression_ratio": 1.4891304347826086, "no_speech_prob": 6.618804764002562e-05}, {"id": 259, "seek": 213240, "start": 2132.4, "end": 2139.64, "text": " or places. And that's completely consistent throughout the stack, like all of Wayland,", "tokens": [420, 3190, 13, 400, 300, 311, 2584, 8398, 3710, 264, 8630, 11, 411, 439, 295, 9558, 1661, 11], "temperature": 0.0, "avg_logprob": -0.166822269398679, "compression_ratio": 1.4650205761316872, "no_speech_prob": 4.6084845962468535e-05}, {"id": 260, "seek": 213240, "start": 2139.64, "end": 2147.52, "text": " EGL, KMS, Vulkan, everything I've discussed has DMA buff integration because that's our", "tokens": [462, 19440, 11, 591, 10288, 11, 41434, 5225, 11, 1203, 286, 600, 7152, 575, 413, 9998, 9204, 10980, 570, 300, 311, 527], "temperature": 0.0, "avg_logprob": -0.166822269398679, "compression_ratio": 1.4650205761316872, "no_speech_prob": 4.6084845962468535e-05}, {"id": 261, "seek": 213240, "start": 2147.52, "end": 2155.04, "text": " lowest common denominator. So, yeah, we put it all together. I mean, because they're all", "tokens": [12437, 2689, 20687, 13, 407, 11, 1338, 11, 321, 829, 309, 439, 1214, 13, 286, 914, 11, 570, 436, 434, 439], "temperature": 0.0, "avg_logprob": -0.166822269398679, "compression_ratio": 1.4650205761316872, "no_speech_prob": 4.6084845962468535e-05}, {"id": 262, "seek": 213240, "start": 2155.04, "end": 2162.04, "text": " built on the same building blocks, it's largely how you think it is. Well, hopefully if I've", "tokens": [3094, 322, 264, 912, 2390, 8474, 11, 309, 311, 11611, 577, 291, 519, 309, 307, 13, 1042, 11, 4696, 498, 286, 600], "temperature": 0.0, "avg_logprob": -0.166822269398679, "compression_ratio": 1.4650205761316872, "no_speech_prob": 4.6084845962468535e-05}, {"id": 263, "seek": 216204, "start": 2162.04, "end": 2171.52, "text": " done a decent job of this talk, you know, the client's connecting to the compositor.", "tokens": [1096, 257, 8681, 1691, 295, 341, 751, 11, 291, 458, 11, 264, 6423, 311, 11015, 281, 264, 10199, 3029, 13], "temperature": 0.0, "avg_logprob": -0.14459184390395435, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0001769895461620763}, {"id": 264, "seek": 216204, "start": 2171.52, "end": 2178.44, "text": " It's creating a window declaring some very simple annotations about that. It wants to", "tokens": [467, 311, 4084, 257, 4910, 40374, 512, 588, 2199, 25339, 763, 466, 300, 13, 467, 2738, 281], "temperature": 0.0, "avg_logprob": -0.14459184390395435, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0001769895461620763}, {"id": 265, "seek": 216204, "start": 2178.44, "end": 2184.68, "text": " use the GPU, so it creates an EGL context pointing to the Wayland server. I'd like to", "tokens": [764, 264, 18407, 11, 370, 309, 7829, 364, 462, 19440, 4319, 12166, 281, 264, 9558, 1661, 7154, 13, 286, 1116, 411, 281], "temperature": 0.0, "avg_logprob": -0.14459184390395435, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0001769895461620763}, {"id": 266, "seek": 218468, "start": 2184.68, "end": 2192.96, "text": " render over here. The Wayland server has some DMA buff protocols, which tells it what it", "tokens": [15529, 670, 510, 13, 440, 9558, 1661, 7154, 575, 512, 413, 9998, 9204, 20618, 11, 597, 5112, 309, 437, 309], "temperature": 0.0, "avg_logprob": -0.1123668214549189, "compression_ratio": 1.5028901734104045, "no_speech_prob": 2.9828464903403074e-05}, {"id": 267, "seek": 218468, "start": 2192.96, "end": 2203.48, "text": " can and can't accept. The client uses GLES to render into that. That's wrapped in a", "tokens": [393, 293, 393, 380, 3241, 13, 440, 6423, 4960, 16225, 2358, 281, 15529, 666, 300, 13, 663, 311, 14226, 294, 257], "temperature": 0.0, "avg_logprob": -0.1123668214549189, "compression_ratio": 1.5028901734104045, "no_speech_prob": 2.9828464903403074e-05}, {"id": 268, "seek": 218468, "start": 2203.48, "end": 2212.52, "text": " DMA buff and passed over to the compositor. The compositor is deciding how to place and", "tokens": [413, 9998, 9204, 293, 4678, 670, 281, 264, 10199, 3029, 13, 440, 10199, 3029, 307, 17990, 577, 281, 1081, 293], "temperature": 0.0, "avg_logprob": -0.1123668214549189, "compression_ratio": 1.5028901734104045, "no_speech_prob": 2.9828464903403074e-05}, {"id": 269, "seek": 221252, "start": 2212.52, "end": 2220.32, "text": " configure everything. It's importing that DMA buff that it's got from the client to", "tokens": [22162, 1203, 13, 467, 311, 43866, 300, 413, 9998, 9204, 300, 309, 311, 658, 490, 264, 6423, 281], "temperature": 0.0, "avg_logprob": -0.10139550268650055, "compression_ratio": 1.603658536585366, "no_speech_prob": 5.4625932534690946e-05}, {"id": 270, "seek": 221252, "start": 2220.32, "end": 2228.8, "text": " generate one final image. It's then waiting until the next deadline, you know, that sort", "tokens": [8460, 472, 2572, 3256, 13, 467, 311, 550, 3806, 1826, 264, 958, 20615, 11, 291, 458, 11, 300, 1333], "temperature": 0.0, "avg_logprob": -0.10139550268650055, "compression_ratio": 1.603658536585366, "no_speech_prob": 5.4625932534690946e-05}, {"id": 271, "seek": 221252, "start": 2228.8, "end": 2237.32, "text": " of 60 hertz cadence that we have. It's waiting until the next deadline to present that out", "tokens": [295, 4060, 45830, 46109, 300, 321, 362, 13, 467, 311, 3806, 1826, 264, 958, 20615, 281, 1974, 300, 484], "temperature": 0.0, "avg_logprob": -0.10139550268650055, "compression_ratio": 1.603658536585366, "no_speech_prob": 5.4625932534690946e-05}, {"id": 272, "seek": 223732, "start": 2237.32, "end": 2244.96, "text": " going into KMS. That might be KMS doing its own composition directly in the display hardware", "tokens": [516, 666, 591, 10288, 13, 663, 1062, 312, 591, 10288, 884, 1080, 1065, 12686, 3838, 294, 264, 4674, 8837], "temperature": 0.0, "avg_logprob": -0.17494508832000022, "compression_ratio": 1.3759398496240602, "no_speech_prob": 8.611391967860982e-05}, {"id": 273, "seek": 223732, "start": 2244.96, "end": 2262.8, "text": " or through the GPU itself. It's tough because the display hardware can do that final image", "tokens": [420, 807, 264, 18407, 2564, 13, 467, 311, 4930, 570, 264, 4674, 8837, 393, 360, 300, 2572, 3256], "temperature": 0.0, "avg_logprob": -0.17494508832000022, "compression_ratio": 1.3759398496240602, "no_speech_prob": 8.611391967860982e-05}, {"id": 274, "seek": 226280, "start": 2262.8, "end": 2267.6800000000003, "text": " composition of taking your sort of four or five images, mashing them all together and", "tokens": [12686, 295, 1940, 428, 1333, 295, 1451, 420, 1732, 5267, 11, 2300, 571, 552, 439, 1214, 293], "temperature": 0.0, "avg_logprob": -0.17268317937850952, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.026901529461611e-05}, {"id": 275, "seek": 226280, "start": 2267.6800000000003, "end": 2273.92, "text": " coming up with one. It is, like I said, a really measurable win on things like power and memory", "tokens": [1348, 493, 365, 472, 13, 467, 307, 11, 411, 286, 848, 11, 257, 534, 43615, 1942, 322, 721, 411, 1347, 293, 4675], "temperature": 0.0, "avg_logprob": -0.17268317937850952, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.026901529461611e-05}, {"id": 276, "seek": 226280, "start": 2273.92, "end": 2282.36, "text": " bandwidth, memory usage as well, but it's kind of complicated in that, you know, it's hard", "tokens": [23647, 11, 4675, 14924, 382, 731, 11, 457, 309, 311, 733, 295, 6179, 294, 300, 11, 291, 458, 11, 309, 311, 1152], "temperature": 0.0, "avg_logprob": -0.17268317937850952, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.026901529461611e-05}, {"id": 277, "seek": 226280, "start": 2282.36, "end": 2292.28, "text": " to know, be predictable about when you can and can't use it. It's a bit fiddly. It's", "tokens": [281, 458, 11, 312, 27737, 466, 562, 291, 393, 293, 393, 380, 764, 309, 13, 467, 311, 257, 857, 283, 14273, 356, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.17268317937850952, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.026901529461611e-05}, {"id": 278, "seek": 229228, "start": 2292.28, "end": 2298.76, "text": " one of the reasons I recommend using compositor frameworks like LibWestern, which do do all", "tokens": [472, 295, 264, 4112, 286, 2748, 1228, 10199, 3029, 29834, 411, 15834, 37943, 1248, 11, 597, 360, 360, 439], "temperature": 0.0, "avg_logprob": -0.22107336414394094, "compression_ratio": 1.4322916666666667, "no_speech_prob": 9.902505553327501e-05}, {"id": 279, "seek": 229228, "start": 2298.76, "end": 2305.44, "text": " of this heavy lifting for you. You know, I've spent 10 years of my life trying to solve", "tokens": [295, 341, 4676, 15798, 337, 291, 13, 509, 458, 11, 286, 600, 4418, 1266, 924, 295, 452, 993, 1382, 281, 5039], "temperature": 0.0, "avg_logprob": -0.22107336414394094, "compression_ratio": 1.4322916666666667, "no_speech_prob": 9.902505553327501e-05}, {"id": 280, "seek": 229228, "start": 2305.44, "end": 2318.6800000000003, "text": " this problem and wouldn't recommend anyone else does it. It's not even really that interesting.", "tokens": [341, 1154, 293, 2759, 380, 2748, 2878, 1646, 775, 309, 13, 467, 311, 406, 754, 534, 300, 1880, 13], "temperature": 0.0, "avg_logprob": -0.22107336414394094, "compression_ratio": 1.4322916666666667, "no_speech_prob": 9.902505553327501e-05}, {"id": 281, "seek": 231868, "start": 2318.68, "end": 2327.8399999999997, "text": " Internally, Western has, like I said, that kind of brute force loop of just trying every", "tokens": [4844, 379, 11, 8724, 575, 11, 411, 286, 848, 11, 300, 733, 295, 47909, 3464, 6367, 295, 445, 1382, 633], "temperature": 0.0, "avg_logprob": -0.1859851543719952, "compression_ratio": 1.4210526315789473, "no_speech_prob": 3.370124250068329e-05}, {"id": 282, "seek": 231868, "start": 2327.8399999999997, "end": 2336.24, "text": " possible configuration that could work, seeing what happens and throwing it at KMS to check", "tokens": [1944, 11694, 300, 727, 589, 11, 2577, 437, 2314, 293, 10238, 309, 412, 591, 10288, 281, 1520], "temperature": 0.0, "avg_logprob": -0.1859851543719952, "compression_ratio": 1.4210526315789473, "no_speech_prob": 3.370124250068329e-05}, {"id": 283, "seek": 231868, "start": 2336.24, "end": 2342.96, "text": " if that will work. Currently, that's the most advanced one, but yeah, others are catching", "tokens": [498, 300, 486, 589, 13, 19964, 11, 300, 311, 264, 881, 7339, 472, 11, 457, 1338, 11, 2357, 366, 16124], "temperature": 0.0, "avg_logprob": -0.1859851543719952, "compression_ratio": 1.4210526315789473, "no_speech_prob": 3.370124250068329e-05}, {"id": 284, "seek": 234296, "start": 2342.96, "end": 2353.2400000000002, "text": " up. I think really to sum up what I was trying to say about GPUs and efficiency is one of", "tokens": [493, 13, 286, 519, 534, 281, 2408, 493, 437, 286, 390, 1382, 281, 584, 466, 18407, 82, 293, 10493, 307, 472, 295], "temperature": 0.0, "avg_logprob": -0.15086186121380518, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.00020462169777601957}, {"id": 285, "seek": 234296, "start": 2353.2400000000002, "end": 2360.2, "text": " the things that gets collaborate a lot is that no one realizes that every problem on", "tokens": [264, 721, 300, 2170, 18338, 257, 688, 307, 300, 572, 472, 29316, 300, 633, 1154, 322], "temperature": 0.0, "avg_logprob": -0.15086186121380518, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.00020462169777601957}, {"id": 286, "seek": 234296, "start": 2360.2, "end": 2368.96, "text": " mobile comes down to memory bandwidth. And so you can solve every problem by just copying", "tokens": [6013, 1487, 760, 281, 4675, 23647, 13, 400, 370, 291, 393, 5039, 633, 1154, 538, 445, 27976], "temperature": 0.0, "avg_logprob": -0.15086186121380518, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.00020462169777601957}, {"id": 287, "seek": 236896, "start": 2368.96, "end": 2376.6, "text": " buffers around more. But when you've got 4K buffers and you've got a low-end device,", "tokens": [9204, 433, 926, 544, 13, 583, 562, 291, 600, 658, 1017, 42, 9204, 433, 293, 291, 600, 658, 257, 2295, 12, 521, 4302, 11], "temperature": 0.0, "avg_logprob": -0.135361385345459, "compression_ratio": 1.434065934065934, "no_speech_prob": 4.578484731609933e-05}, {"id": 288, "seek": 236896, "start": 2376.6, "end": 2382.44, "text": " it turns out that this is always where your performance problem is. It's down in things", "tokens": [309, 4523, 484, 300, 341, 307, 1009, 689, 428, 3389, 1154, 307, 13, 467, 311, 760, 294, 721], "temperature": 0.0, "avg_logprob": -0.135361385345459, "compression_ratio": 1.434065934065934, "no_speech_prob": 4.578484731609933e-05}, {"id": 289, "seek": 236896, "start": 2382.44, "end": 2391.0, "text": " like copies and naive memory usage. So yeah, that's just one thing to really be aware of", "tokens": [411, 14341, 293, 29052, 4675, 14924, 13, 407, 1338, 11, 300, 311, 445, 472, 551, 281, 534, 312, 3650, 295], "temperature": 0.0, "avg_logprob": -0.135361385345459, "compression_ratio": 1.434065934065934, "no_speech_prob": 4.578484731609933e-05}, {"id": 290, "seek": 239100, "start": 2391.0, "end": 2400.28, "text": " is try and go for a zero-copy pipeline because when you have 4K and 144Hz, you really don't", "tokens": [307, 853, 293, 352, 337, 257, 4018, 12, 13084, 88, 15517, 570, 562, 291, 362, 1017, 42, 293, 45218, 21409, 11, 291, 534, 500, 380], "temperature": 0.0, "avg_logprob": -0.16889883342542147, "compression_ratio": 1.4594594594594594, "no_speech_prob": 5.790631257696077e-05}, {"id": 291, "seek": 239100, "start": 2400.28, "end": 2409.76, "text": " have much time and you don't want to spend it all just waiting for slow memory. Yeah,", "tokens": [362, 709, 565, 293, 291, 500, 380, 528, 281, 3496, 309, 439, 445, 3806, 337, 2964, 4675, 13, 865, 11], "temperature": 0.0, "avg_logprob": -0.16889883342542147, "compression_ratio": 1.4594594594594594, "no_speech_prob": 5.790631257696077e-05}, {"id": 292, "seek": 239100, "start": 2409.76, "end": 2417.24, "text": " with that, I think we're pretty much coming up on time. So yeah, there's the quick whirlwind", "tokens": [365, 300, 11, 286, 519, 321, 434, 1238, 709, 1348, 493, 322, 565, 13, 407, 1338, 11, 456, 311, 264, 1702, 35706, 12199], "temperature": 0.0, "avg_logprob": -0.16889883342542147, "compression_ratio": 1.4594594594594594, "no_speech_prob": 5.790631257696077e-05}, {"id": 293, "seek": 241724, "start": 2417.24, "end": 2425.8799999999997, "text": " tour of how all that fits together. Anyone has any questions or wants to talk about how", "tokens": [3512, 295, 577, 439, 300, 9001, 1214, 13, 14643, 575, 604, 1651, 420, 2738, 281, 751, 466, 577], "temperature": 0.0, "avg_logprob": -0.18507277170817057, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0024132125545293093}, {"id": 294, "seek": 241724, "start": 2425.8799999999997, "end": 2434.8799999999997, "text": " Wayland's amazing? Please feel free. If you have any questions, please raise your hand.", "tokens": [9558, 1661, 311, 2243, 30, 2555, 841, 1737, 13, 759, 291, 362, 604, 1651, 11, 1767, 5300, 428, 1011, 13], "temperature": 0.0, "avg_logprob": -0.18507277170817057, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0024132125545293093}, {"id": 295, "seek": 241724, "start": 2434.8799999999997, "end": 2440.6, "text": " When we launch a game in full screen, for example, does it go straight from GPU to screen", "tokens": [1133, 321, 4025, 257, 1216, 294, 1577, 2568, 11, 337, 1365, 11, 775, 309, 352, 2997, 490, 18407, 281, 2568], "temperature": 0.0, "avg_logprob": -0.18507277170817057, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0024132125545293093}, {"id": 296, "seek": 241724, "start": 2440.6, "end": 2446.16, "text": " or does it go all the way through KMS on that? It will go through the Windows system. So", "tokens": [420, 775, 309, 352, 439, 264, 636, 807, 591, 10288, 322, 300, 30, 467, 486, 352, 807, 264, 8591, 1185, 13, 407], "temperature": 0.0, "avg_logprob": -0.18507277170817057, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0024132125545293093}, {"id": 297, "seek": 244616, "start": 2446.16, "end": 2449.64, "text": " yeah, the question being, if you have a full screen game, will it go straight from the", "tokens": [1338, 11, 264, 1168, 885, 11, 498, 291, 362, 257, 1577, 2568, 1216, 11, 486, 309, 352, 2997, 490, 264], "temperature": 0.0, "avg_logprob": -0.14707197461809432, "compression_ratio": 1.5347826086956522, "no_speech_prob": 0.0003659382346086204}, {"id": 298, "seek": 244616, "start": 2449.64, "end": 2455.56, "text": " GPU to the display or will the Windows system still be involved? It will still be there,", "tokens": [18407, 281, 264, 4674, 420, 486, 264, 8591, 1185, 920, 312, 3288, 30, 467, 486, 920, 312, 456, 11], "temperature": 0.0, "avg_logprob": -0.14707197461809432, "compression_ratio": 1.5347826086956522, "no_speech_prob": 0.0003659382346086204}, {"id": 299, "seek": 244616, "start": 2455.56, "end": 2461.8399999999997, "text": " but ideally doing nothing. So it will just take the client buffer, give it directly to", "tokens": [457, 22915, 884, 1825, 13, 407, 309, 486, 445, 747, 264, 6423, 21762, 11, 976, 309, 3838, 281], "temperature": 0.0, "avg_logprob": -0.14707197461809432, "compression_ratio": 1.5347826086956522, "no_speech_prob": 0.0003659382346086204}, {"id": 300, "seek": 244616, "start": 2461.8399999999997, "end": 2468.3999999999996, "text": " KMS and ask KMS to display it in the happy case. But it's always involved as the mediator,", "tokens": [591, 10288, 293, 1029, 591, 10288, 281, 4674, 309, 294, 264, 2055, 1389, 13, 583, 309, 311, 1009, 3288, 382, 264, 17269, 1639, 11], "temperature": 0.0, "avg_logprob": -0.14707197461809432, "compression_ratio": 1.5347826086956522, "no_speech_prob": 0.0003659382346086204}, {"id": 301, "seek": 246840, "start": 2468.4, "end": 2477.92, "text": " so when a notification pops up, it already has control, so it can show it.", "tokens": [370, 562, 257, 11554, 16795, 493, 11, 309, 1217, 575, 1969, 11, 370, 309, 393, 855, 309, 13], "temperature": 0.0, "avg_logprob": -0.3170843557877974, "compression_ratio": 1.0571428571428572, "no_speech_prob": 0.0007463652291335166}, {"id": 302, "seek": 247792, "start": 2477.92, "end": 2497.04, "text": " Hello. I can't. Is it working? Yeah. Okay. So forget the super new big question. When", "tokens": [2425, 13, 286, 393, 380, 13, 1119, 309, 1364, 30, 865, 13, 1033, 13, 407, 2870, 264, 1687, 777, 955, 1168, 13, 1133], "temperature": 0.0, "avg_logprob": -0.22030217039818858, "compression_ratio": 1.3129770992366412, "no_speech_prob": 0.0045431917533278465}, {"id": 303, "seek": 247792, "start": 2497.04, "end": 2502.48, "text": " you say the frame buffer is tied to a plane, a plane is not a desktop, a plane is just", "tokens": [291, 584, 264, 3920, 21762, 307, 9601, 281, 257, 5720, 11, 257, 5720, 307, 406, 257, 14502, 11, 257, 5720, 307, 445], "temperature": 0.0, "avg_logprob": -0.22030217039818858, "compression_ratio": 1.3129770992366412, "no_speech_prob": 0.0045431917533278465}, {"id": 304, "seek": 250248, "start": 2502.48, "end": 2510.72, "text": " a window. When you tie a frame buffer to a plane, the plane goes in the compositor.", "tokens": [257, 4910, 13, 1133, 291, 7582, 257, 3920, 21762, 281, 257, 5720, 11, 264, 5720, 1709, 294, 264, 10199, 3029, 13], "temperature": 0.0, "avg_logprob": -0.1824397369169853, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.002000582404434681}, {"id": 305, "seek": 250248, "start": 2510.72, "end": 2516.68, "text": " So the plane is a window, it's not the entire desktop. Yeah, exactly. So the CRTC is your", "tokens": [407, 264, 5720, 307, 257, 4910, 11, 309, 311, 406, 264, 2302, 14502, 13, 865, 11, 2293, 13, 407, 264, 14123, 18238, 307, 428], "temperature": 0.0, "avg_logprob": -0.1824397369169853, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.002000582404434681}, {"id": 306, "seek": 250248, "start": 2516.68, "end": 2530.28, "text": " final output as one flat image and planes are windows within that CRTC. Thank you.", "tokens": [2572, 5598, 382, 472, 4962, 3256, 293, 14952, 366, 9309, 1951, 300, 14123, 18238, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1824397369169853, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.002000582404434681}, {"id": 307, "seek": 253028, "start": 2530.28, "end": 2550.2000000000003, "text": " More questions? All right. Hello. Is it working? Hello. You mentioned that kernel mode setting", "tokens": [5048, 1651, 30, 1057, 558, 13, 2425, 13, 1119, 309, 1364, 30, 2425, 13, 509, 2835, 300, 28256, 4391, 3287], "temperature": 0.0, "avg_logprob": -0.32530462476942273, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.0021609903778880835}, {"id": 308, "seek": 253028, "start": 2550.2000000000003, "end": 2554.32, "text": " is used turning the pixels into... Sorry, could you please... Sorry. Yeah. You mentioned", "tokens": [307, 1143, 6246, 264, 18668, 666, 485, 4919, 11, 727, 291, 1767, 485, 4919, 13, 865, 13, 509, 2835], "temperature": 0.0, "avg_logprob": -0.32530462476942273, "compression_ratio": 1.3759398496240602, "no_speech_prob": 0.0021609903778880835}, {"id": 309, "seek": 255432, "start": 2554.32, "end": 2560.76, "text": " that KMS kernel mode setting is used to turn the data into pixels on the screen. Is this", "tokens": [300, 591, 10288, 28256, 4391, 3287, 307, 1143, 281, 1261, 264, 1412, 666, 18668, 322, 264, 2568, 13, 1119, 341], "temperature": 0.0, "avg_logprob": -0.2345245879830666, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.0007541050435975194}, {"id": 310, "seek": 255432, "start": 2560.76, "end": 2565.84, "text": " where graphics card drivers are involved, another vendor-specific software, or is that", "tokens": [689, 11837, 2920, 11590, 366, 3288, 11, 1071, 24321, 12, 29258, 4722, 11, 420, 307, 300], "temperature": 0.0, "avg_logprob": -0.2345245879830666, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.0007541050435975194}, {"id": 311, "seek": 255432, "start": 2565.84, "end": 2571.7200000000003, "text": " earlier or later in the pipeline? Sorry, which parameters? So basically, where did graphics", "tokens": [3071, 420, 1780, 294, 264, 15517, 30, 4919, 11, 597, 9834, 30, 407, 1936, 11, 689, 630, 11837], "temperature": 0.0, "avg_logprob": -0.2345245879830666, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.0007541050435975194}, {"id": 312, "seek": 255432, "start": 2571.7200000000003, "end": 2575.6000000000004, "text": " card drivers come in? Because I know there's like vendor-specific hardware that requires", "tokens": [2920, 11590, 808, 294, 30, 1436, 286, 458, 456, 311, 411, 24321, 12, 29258, 8837, 300, 7029], "temperature": 0.0, "avg_logprob": -0.2345245879830666, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.0007541050435975194}, {"id": 313, "seek": 255432, "start": 2575.6000000000004, "end": 2580.56, "text": " its own drivers somewhere in kernel space, I believe, so what does this fit in the pipeline?", "tokens": [1080, 1065, 11590, 4079, 294, 28256, 1901, 11, 286, 1697, 11, 370, 437, 775, 341, 3318, 294, 264, 15517, 30], "temperature": 0.0, "avg_logprob": -0.2345245879830666, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.0007541050435975194}, {"id": 314, "seek": 258056, "start": 2580.56, "end": 2587.08, "text": " So all of the properties and parameters are defined in kernel space, and we try to standardize", "tokens": [407, 439, 295, 264, 7221, 293, 9834, 366, 7642, 294, 28256, 1901, 11, 293, 321, 853, 281, 3832, 1125], "temperature": 0.0, "avg_logprob": -0.16318196516770583, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.0001412282872479409}, {"id": 315, "seek": 258056, "start": 2587.08, "end": 2593.44, "text": " them as much as possible. So in the generic world, we do stick pretty religiously to a", "tokens": [552, 382, 709, 382, 1944, 13, 407, 294, 264, 19577, 1002, 11, 321, 360, 2897, 1238, 7185, 356, 281, 257], "temperature": 0.0, "avg_logprob": -0.16318196516770583, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.0001412282872479409}, {"id": 316, "seek": 258056, "start": 2593.44, "end": 2598.56, "text": " standard set of parameters that have common behavior across everyone. If you go to things", "tokens": [3832, 992, 295, 9834, 300, 362, 2689, 5223, 2108, 1518, 13, 759, 291, 352, 281, 721], "temperature": 0.0, "avg_logprob": -0.16318196516770583, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.0001412282872479409}, {"id": 317, "seek": 258056, "start": 2598.56, "end": 2605.12, "text": " like Android where you have hardware composer and vendor-based tells, it's completely different.", "tokens": [411, 8853, 689, 291, 362, 8837, 26003, 293, 24321, 12, 6032, 5112, 11, 309, 311, 2584, 819, 13], "temperature": 0.0, "avg_logprob": -0.16318196516770583, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.0001412282872479409}, {"id": 318, "seek": 258056, "start": 2605.12, "end": 2610.04, "text": " And they're all... That's more of a negotiation between kernel and user space, which are", "tokens": [400, 436, 434, 439, 485, 663, 311, 544, 295, 257, 27573, 1296, 28256, 293, 4195, 1901, 11, 597, 366], "temperature": 0.0, "avg_logprob": -0.16318196516770583, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.0001412282872479409}, {"id": 319, "seek": 261004, "start": 2610.04, "end": 2621.84, "text": " both vendor-specific. That answers your question.", "tokens": [1293, 24321, 12, 29258, 13, 663, 6338, 428, 1168, 13], "temperature": 0.0, "avg_logprob": -0.15293749447526603, "compression_ratio": 1.818840579710145, "no_speech_prob": 0.0007724793395027518}, {"id": 320, "seek": 261004, "start": 2621.84, "end": 2628.32, "text": " Do you know if there's any toolkit libraries for writing compositors that are not desktop-specific?", "tokens": [1144, 291, 458, 498, 456, 311, 604, 40167, 15148, 337, 3579, 10199, 9862, 300, 366, 406, 14502, 12, 29258, 30], "temperature": 0.0, "avg_logprob": -0.15293749447526603, "compression_ratio": 1.818840579710145, "no_speech_prob": 0.0007724793395027518}, {"id": 321, "seek": 261004, "start": 2628.32, "end": 2635.7599999999998, "text": " Any compositor libraries that are... Libraries for writing compositors that are not desktop-specific.", "tokens": [2639, 10199, 3029, 15148, 300, 366, 485, 12006, 4889, 337, 3579, 10199, 9862, 300, 366, 406, 14502, 12, 29258, 13], "temperature": 0.0, "avg_logprob": -0.15293749447526603, "compression_ratio": 1.818840579710145, "no_speech_prob": 0.0007724793395027518}, {"id": 322, "seek": 263576, "start": 2635.76, "end": 2642.1200000000003, "text": " So it's like LibWestern is good for writing desktops, types, things, but for highly embedded", "tokens": [407, 309, 311, 411, 15834, 37943, 1248, 307, 665, 337, 3579, 730, 2320, 3370, 11, 3467, 11, 721, 11, 457, 337, 5405, 16741], "temperature": 0.0, "avg_logprob": -0.3000789343142042, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00010285332245985046}, {"id": 323, "seek": 263576, "start": 2642.1200000000003, "end": 2648.5200000000004, "text": " use cases, I've found any things that make it easy to write a compositor like that.", "tokens": [764, 3331, 11, 286, 600, 1352, 604, 721, 300, 652, 309, 1858, 281, 2464, 257, 10199, 3029, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.3000789343142042, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00010285332245985046}, {"id": 324, "seek": 263576, "start": 2648.5200000000004, "end": 2657.28, "text": " Yeah, so LibWestern's the one for those kind of embedded or single-purpose use cases. MOTA,", "tokens": [865, 11, 370, 15834, 37943, 1248, 311, 264, 472, 337, 729, 733, 295, 16741, 420, 2167, 12, 42601, 764, 3331, 13, 376, 5068, 32, 11], "temperature": 0.0, "avg_logprob": -0.3000789343142042, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00010285332245985046}, {"id": 325, "seek": 263576, "start": 2657.28, "end": 2664.0, "text": " which is the basis of GNOME shell, can be used by anyone else, but it's really GPU reliant.", "tokens": [597, 307, 264, 5143, 295, 46411, 23344, 8720, 11, 393, 312, 1143, 538, 2878, 1646, 11, 457, 309, 311, 534, 18407, 1039, 5798, 13], "temperature": 0.0, "avg_logprob": -0.3000789343142042, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00010285332245985046}, {"id": 326, "seek": 266400, "start": 2664.0, "end": 2671.0, "text": " And WROOTS is, I guess, kind of in the middle. It's not as friendly and desktop-y as GNOME,", "tokens": [400, 343, 49, 3783, 7327, 307, 11, 286, 2041, 11, 733, 295, 294, 264, 2808, 13, 467, 311, 406, 382, 9208, 293, 14502, 12, 88, 382, 46411, 23344, 11], "temperature": 0.0, "avg_logprob": -0.2640193421163677, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.000877680373378098}, {"id": 327, "seek": 266400, "start": 2671.0, "end": 2677.32, "text": " but it's not as sort of insanely efficient as Western, and that's the halfway house,", "tokens": [457, 309, 311, 406, 382, 1333, 295, 40965, 7148, 382, 8724, 11, 293, 300, 311, 264, 15461, 1782, 11], "temperature": 0.0, "avg_logprob": -0.2640193421163677, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.000877680373378098}, {"id": 328, "seek": 266400, "start": 2677.32, "end": 2682.76, "text": " I guess.", "tokens": [286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.2640193421163677, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.000877680373378098}, {"id": 329, "seek": 266400, "start": 2682.76, "end": 2685.8, "text": " Is there any tool you would recommend for profiling?", "tokens": [1119, 456, 604, 2290, 291, 576, 2748, 337, 1740, 4883, 30], "temperature": 0.0, "avg_logprob": -0.2640193421163677, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.000877680373378098}, {"id": 330, "seek": 266400, "start": 2685.8, "end": 2687.12, "text": " Sorry, could you speak up?", "tokens": [4919, 11, 727, 291, 1710, 493, 30], "temperature": 0.0, "avg_logprob": -0.2640193421163677, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.000877680373378098}, {"id": 331, "seek": 268712, "start": 2687.12, "end": 2694.12, "text": " Is there any tool that you would recommend for profiling, the graphics tech? Is there", "tokens": [1119, 456, 604, 2290, 300, 291, 576, 2748, 337, 1740, 4883, 11, 264, 11837, 7553, 30, 1119, 456], "temperature": 0.0, "avg_logprob": -0.2725510474963066, "compression_ratio": 1.7861271676300579, "no_speech_prob": 0.00099185889121145}, {"id": 332, "seek": 268712, "start": 2694.12, "end": 2698.8399999999997, "text": " a tool for profiling the graphics tech?", "tokens": [257, 2290, 337, 1740, 4883, 264, 11837, 7553, 30], "temperature": 0.0, "avg_logprob": -0.2725510474963066, "compression_ratio": 1.7861271676300579, "no_speech_prob": 0.00099185889121145}, {"id": 333, "seek": 268712, "start": 2698.8399999999997, "end": 2710.0, "text": " Profiling, are there any tools for profiling the graphics tech? Kind of. So Mesa has integration", "tokens": [6039, 4883, 11, 366, 456, 604, 3873, 337, 1740, 4883, 264, 11837, 7553, 30, 9242, 295, 13, 407, 376, 13708, 575, 10980], "temperature": 0.0, "avg_logprob": -0.2725510474963066, "compression_ratio": 1.7861271676300579, "no_speech_prob": 0.00099185889121145}, {"id": 334, "seek": 268712, "start": 2710.0, "end": 2715.88, "text": " with a tool called Profetto, which is the basis of Android GPU Inspector. There's some", "tokens": [365, 257, 2290, 1219, 6039, 23778, 11, 597, 307, 264, 5143, 295, 8853, 18407, 33402, 13, 821, 311, 512], "temperature": 0.0, "avg_logprob": -0.2725510474963066, "compression_ratio": 1.7861271676300579, "no_speech_prob": 0.00099185889121145}, {"id": 335, "seek": 271588, "start": 2715.88, "end": 2724.28, "text": " support in there for Western, specifically, to interpose its timeline on top of Profetto,", "tokens": [1406, 294, 456, 337, 8724, 11, 4682, 11, 281, 728, 43501, 1080, 12933, 322, 1192, 295, 6039, 23778, 11], "temperature": 0.0, "avg_logprob": -0.16189181103425868, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.00038948061410337687}, {"id": 336, "seek": 271588, "start": 2724.28, "end": 2732.1600000000003, "text": " but it's pretty patchy, to be honest. We've been working on that basically to try and", "tokens": [457, 309, 311, 1238, 9972, 88, 11, 281, 312, 3245, 13, 492, 600, 668, 1364, 322, 300, 1936, 281, 853, 293], "temperature": 0.0, "avg_logprob": -0.16189181103425868, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.00038948061410337687}, {"id": 337, "seek": 271588, "start": 2732.1600000000003, "end": 2738.1600000000003, "text": " make it easier so we can stop getting paid for debugging and profiling stuff, to be honest.", "tokens": [652, 309, 3571, 370, 321, 393, 1590, 1242, 4835, 337, 45592, 293, 1740, 4883, 1507, 11, 281, 312, 3245, 13], "temperature": 0.0, "avg_logprob": -0.16189181103425868, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.00038948061410337687}, {"id": 338, "seek": 273816, "start": 2738.16, "end": 2745.16, "text": " But yeah, it's a slow process. Profetto is the best one there.", "tokens": [583, 1338, 11, 309, 311, 257, 2964, 1399, 13, 6039, 23778, 307, 264, 1151, 472, 456, 13], "temperature": 0.0, "avg_logprob": -0.3370003483512185, "compression_ratio": 1.2314049586776858, "no_speech_prob": 0.0007428050157614052}, {"id": 339, "seek": 273816, "start": 2745.16, "end": 2761.16, "text": " I have a question. So why can't we do screen recording or screen sharing in a Bayland?", "tokens": [286, 362, 257, 1168, 13, 407, 983, 393, 380, 321, 360, 2568, 6613, 420, 2568, 5414, 294, 257, 7840, 1661, 30], "temperature": 0.0, "avg_logprob": -0.3370003483512185, "compression_ratio": 1.2314049586776858, "no_speech_prob": 0.0007428050157614052}, {"id": 340, "seek": 276116, "start": 2761.16, "end": 2770.3599999999997, "text": " You can. Screen sharing in Bayland is done through the XDG screencast portal and we did", "tokens": [509, 393, 13, 25823, 5414, 294, 7840, 1661, 307, 1096, 807, 264, 32336, 38, 2568, 3734, 14982, 293, 321, 630], "temperature": 0.0, "avg_logprob": -0.13708849651057545, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.00019057792087551206}, {"id": 341, "seek": 276116, "start": 2770.3599999999997, "end": 2777.2, "text": " that because once, if you try to put it in Bayland itself as like a core protocol for", "tokens": [300, 570, 1564, 11, 498, 291, 853, 281, 829, 309, 294, 7840, 1661, 2564, 382, 411, 257, 4965, 10336, 337], "temperature": 0.0, "avg_logprob": -0.13708849651057545, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.00019057792087551206}, {"id": 342, "seek": 276116, "start": 2777.2, "end": 2783.7599999999998, "text": " clients to use, it was really going against the grain because everything was designed", "tokens": [6982, 281, 764, 11, 309, 390, 534, 516, 1970, 264, 12837, 570, 1203, 390, 4761], "temperature": 0.0, "avg_logprob": -0.13708849651057545, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.00019057792087551206}, {"id": 343, "seek": 276116, "start": 2783.7599999999998, "end": 2789.8799999999997, "text": " with this idea of the timing coming from the display and flowing back to the clients.", "tokens": [365, 341, 1558, 295, 264, 10822, 1348, 490, 264, 4674, 293, 13974, 646, 281, 264, 6982, 13], "temperature": 0.0, "avg_logprob": -0.13708849651057545, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.00019057792087551206}, {"id": 344, "seek": 278988, "start": 2789.88, "end": 2796.2400000000002, "text": " And then once you put it in the other way that the client's receiving content, it really", "tokens": [400, 550, 1564, 291, 829, 309, 294, 264, 661, 636, 300, 264, 6423, 311, 10040, 2701, 11, 309, 534], "temperature": 0.0, "avg_logprob": -0.14137524716994343, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.00010619786917231977}, {"id": 345, "seek": 278988, "start": 2796.2400000000002, "end": 2804.6800000000003, "text": " just is a terrible fit with pretty much every interface we had. So it's easier for us to", "tokens": [445, 307, 257, 6237, 3318, 365, 1238, 709, 633, 9226, 321, 632, 13, 407, 309, 311, 3571, 337, 505, 281], "temperature": 0.0, "avg_logprob": -0.14137524716994343, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.00010619786917231977}, {"id": 346, "seek": 278988, "start": 2804.6800000000003, "end": 2814.04, "text": " and also working for like sandboxing and containers to go with the XDG portal solution. And yeah,", "tokens": [293, 611, 1364, 337, 411, 42115, 278, 293, 17089, 281, 352, 365, 264, 32336, 38, 14982, 3827, 13, 400, 1338, 11], "temperature": 0.0, "avg_logprob": -0.14137524716994343, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.00010619786917231977}, {"id": 347, "seek": 281404, "start": 2814.04, "end": 2821.04, "text": " it works every way basically. Okay. I think, yeah.", "tokens": [309, 1985, 633, 636, 1936, 13, 1033, 13, 286, 519, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.3424053192138672, "compression_ratio": 1.1954022988505748, "no_speech_prob": 0.00016741502622608095}, {"id": 348, "seek": 282104, "start": 2821.04, "end": 2844.04, "text": " Okay. Thank you, Daniel. Thanks very much. Thank you.", "tokens": [50364, 1033, 13, 1044, 291, 11, 8033, 13, 2561, 588, 709, 13, 1044, 291, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3110034606036018, "compression_ratio": 1.127659574468085, "no_speech_prob": 0.0005886337021365762}], "language": "en"}