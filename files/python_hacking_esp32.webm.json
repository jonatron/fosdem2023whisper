{"text": " I'm here to talk to you about graphics programming in Python on an embedded microcontroller, which is hilarious because I'm none of these things, I'm not a graphics programmer, I'm not a Python programmer and I'm not an embedded programmer, so we'll see how this goes. It's for that reason I just, you know, I can't emphasise enough this part of the talk description, this is not an instructional talk, this is just what I did. So there's some background, EMF camp is this weekend camping festival for hackers and makers and it's in a similar vein to the chaos communication camp and the Dutch hacker festival, you know, there's robots and lasers and geodesic domes and things, it's great fun if you get the opportunity to go, I highly recommend it and it's a bit of a tradition of these style of events to give the attendees electronic event badges and the aim of these is to give attendees opportunity to play with some hardware that they might not have come across before. These are the two most recent badges from EMF camp, the one on the left here. If I told you they had, they put a SIM card on it and a GSM modem and then they set up an onsite cell phone network, you'll understand why it's made to look like a Nokia Engage, but it's got all of the usual like peripherals and sensors and things on there as well like accelerometers and humidity and temperature and things and because it runs micropycin it allows people to easily get started with experimenting with that kind of hardware. The one on the right there is the newest one, these photographs aren't to scale by the way, let me just hold them up for comparison, the newest one is much smaller. The reasons for that you might guess is because of the silicon shortage that's been caused by fire, flood and plague as you might expect, but it's still a lovely device. The one on the left here you can see, you might recognise this as a version of the settlers of Ketan, I spent a lot of time trying to isolate small parts of the screen to redraw because the update speed on that screen was so slow, it was almost, it's almost unusable for anything in real time. So when I got my hands on the new one this year I obviously wanted to see what this one could do. And so the first thing I wanted to do was to just try and glitter full screen of pixels to the device using the display driver directly and let's talk about 70 milliseconds which is already orders of magnitude faster than the old badge. If I draw to an off-screen buffer instead that's way faster, but you know if you're doing that you then you have to get into the business of implementing your own drawing functions for primitives and I didn't really want to do that. That is ominous foreshadowing by the way. But I did discover that MicroPython has this frame buff module which provides you with an off-screen frame buffer and also some drawing functions which is great. So 41 milliseconds, I thought that was fair compromise, that's a good start. Now I've got a baseline for how fast I can draw to the screen. So obviously what this is about is drawing 3D things to the screen of this device and so this is just here to, in case you don't know this is basically, I guess this is 3D rasterization 101, this is like the minimum we have to do in order to get 3D points onto the screen. You know we start with our vertex coordinates and then that's multiplied by the model matrix to get into world space and then you multiply that by the view matrix to get the view space and then by the projection matrix you get the clip space and then the clip space allows you to see which vertices will be eclipped by the edges of the screen or not. So then once we know we've got the list of vertices we want to render then we can do the perspective division to bring that into normalize device coordinate space or NDC space. The perspective division is just the part that makes the further away points closer together so it gives you that illusion of 3D. And then we've got to convert the normalize device coordinates which are like between minus one and one to screen space which is like our pixel coordinates. And so when I was doing this, these, to render these eight points on the screen from a cube it was pretty, it wasn't too bad 53 seconds and then if you like join those up to create your cube wireframe it's not that much, not that much slower there's 12 triangles there obviously. The next step is to then start filling in these triangles you want to draw solid shapes after all, annoyingly there's no method or no function for doing that in the frame buff module for MicroPython. There is in the display driver but as I mentioned like using the display driver directly is much slower because we're making many more calls to hardware and you know we're setting pins high and low and stuff for every time we want to draw something and we just want to do that once when we blip the whole thing to the screen. And yeah so frame buff doesn't provide a like polygon or polygon fill method and so I do have to get into the business of writing these sort of functions myself after all. So yeah the display driver itself does have these methods so obviously that's the first place I looked for implementation clues, they have a polygon and a fill polygon method only obviously there are problems with it and it's a little bit rubbish here's the figure on the left there is just using the outline polygon method and then the second one here is where I've tried to draw in a filled polygon over the top of the wireframe polygon and you can see it just doesn't quite match up. And so reading the code there is it seems to be implementing like quite a well known or well documented fill polygon method and there's a link to the website where this algorithm is described and that also supplies a reference implementation so I was able to like copy the reference implementation to see if that if the display drivers implementation was different and it isn't it's exactly the same it looks like the display drivers inherited the same problems that we're in the reference implementation and you'll notice that it's not only incorrect on this side but like the left edge here is completely different to this edge here so it's like over drawing on this side and not drawing enough on that side. A lot of the problems with it were sort of like rounding errors and like floating point to integer truncation and that sort of thing which I've managed to mostly fix except for this really annoying pixel down here that I just couldn't get and when I submitted because I wanted to submit like this enhancement to the frame buff module upstream to the micro platform project and so we spent a few days scratching our heads over this to try and figure out what we could do we were initially we proposed just drawing the outline again on top of that on top of the filled polygon just to like sweep it under the rug but eventually we managed to figure out a much better way of doing it we just like try to detect when these stray pixels were we're going to happen and then fill them in explicitly instead of letting the algorithm do it oh yeah I you know these it was quite it's pretty obvious that the algorithm I think was developed by a physicist or a mathematician because in the article that describes the algorithm it says and I'm quoting here the detecting points on the polygon edge will deliver unpredictable results but that is quote not generally a problem because quotes the edge of the polygon is infinitely thin now my polygons have an edge of one pixel so this is obviously why we had to like it fix the problems of it anyway now we can draw arbitrary polygons to the screen and let's see what that looks like this is the cube here again which is like basically you know the hello world of 3d graphics programming and it seems to work pretty well 66 milliseconds there but you can see on the on the left hand screenshot there that's not the inside it looks like you're looking at the inside of the cube but it's just because we are drawing the back face of the back of the cube on top of the front face of the front of the cube so as part of this 3d rasterization process that you've now got to do like back face calling which is more maths added on to that pipeline you know you've got to take the you've got to calculate the normal vector of the face which is the direction the face is facing and then compute the dot product of that with the direction you're looking so that you can know if the face if the triangle is facing you or not and then just don't bother drawing the ones that aren't facing you but yeah that's much it's just more maths so it adds more time and oh yeah get the occasional like really long frame and that coincides with a garbage collection I guess we'll talk a bit more about that in a bit yeah so like there's some really low hanging fruit things we can do to improve the performance initially which is basically amounts to being smarter about the algorithms we use we pre-calculate the normals instead of calculating them every frame which for like static model like this makes total sense and yeah avoid doing the perspective division if we can help it because it's like part of the I'd implemented it as part of the matrix multiplication process and usually it's a and usually it's a no op unless you're multiplying it by the perspective matrix and only then is it doing something so we can just avoid doing those those divisions at all on you know on every vertex in every face in every frame that's quite a lot of time saved but it does mean I can add more things to it and make it do extra work like you know add as rudimentary lighting model and make the cube nice looking by adding shading and whatnot and the what I'm trying to do basically is to keep the rendering time below 100 milliseconds as well because that seems like a good target to have if I can do that then I get like a reasonable performance of 10 frames per second and so this is although this is this works well that's within that target it's close to that target so I want to try something a bit more complex so I download a model of the industry standard teapot and try and render that this is about 240 faces 240 triangles and this obviously completely destroyed my 100 millisecond time limit so I've got to think of I had to think of more ways to make this faster and the obvious way is to rewrite all the hottest math functions in C as a micro Python native module the two ones that are called the most often are like the matrix vector matrix multiplying method and the dot product method and yeah you can see that more than cuts the time in half and with the success of that it's pretty clear I should write rewrite all of the math in C because you know if I've got the bonnet up I might as well and but that you know that brings the time right down to a glorious glorious glorious six frames per second but yeah like as a general strategy if you find yourself calling a method you know 12 1200 times a frame it's probably a good target to be to be pushed down into the native layer so yeah a note on writing a native code for micro Python there's really two ways of doing it there's the what is called the external C modules which is basically C code that you write there's a module exposed to the Python runtime those are compiled directly into the firmware which is a bit suboptimal because I yeah it would be nice if I didn't require other people who have these devices to reflash the firmware every time I changed this program so the other way of doing it is to write what they call a native module which allows your application to supply native code as an MPY file and then that can be dynamically loaded by your application at runtime which is much nicer the way of doing it so obviously that's what I wanted to do but I did come across problems when I tried to build the native code because I'd used a floating point division in there for the perspective division step of the pipeline I got this problem which is a linker error from the expressive tool chain for the ESP32 I'd love to know why this happens and if anyone from expressive is here I'd love to know if it's fixed in a newer version as well but it seems like it can't link this software implementation of floating point division so obviously what I did was I downloaded the source for their tool chain and found the assembly implementation of this method to add into my project which also didn't work the micro Python build system wasn't prepared to accept that but that was an easy fix and that was actually the first change I got accepted into micro Python they were very good they're very good at or in my experience they're very good at accepting patches and then once I got that building I got it to just cause my application to crash I'm not sure why this happens but there seems to be like a reference to the native stuff that gets collected erroneously by the garbage collection and I spent a lot of time like trying to reduce my object allocations you know in the frames but all that did was just like push out the crash to further in the future so you know I had to settle for compiling my maths functions directly into the firmware there's some other things I did to try and make it faster the big one is trying to reduce object insatiations it's super costly in Python and wherever you can pre-allocate like lists and arrays and things and then just reuse them I initially wanted to have like a lot of my classes to be totally immutable as a good programmer I am but they just totally wasn't feasible so I just you know you just have to mutate when you do calculations on your vertices just mutate one of the operands and send it back that way you can also the other thing I found that saved some time was reducing crossing reducing the amount of times that we cross from Python into native code and back again I found I was doing like lots of the same operation to vertices and matrices so if I could just send them all as one batch in a single function call into the native side then that made it perform a lot quicker I think there's a lot of function and stack manipulation overhead there that you save and also pass arrays and not lists into the native functions as well especially for this kind of stuff where we know that the data that we're passing our floats or whatever you know ahead of time what type is in your array which means you can make some assumptions that my Python can't make and when and when you manipulate this the data objects in a native side you can like skip a bunch of like type safe stuff you can just write directly to the to the data structure which is useful and also I this wrong surprise me as well that I well I don't know if it's surprising maybe it's obvious to people who are veteran Python Easter's but I didn't expect to a native the libc qsort function to be so much faster than the sort function in Python but I was if you look at the if you look at this this picture here you can see that some parts of the teapot are drawn on top of that should be occluded drawn on top of the body of the teapot so what I had to do was Z sort the faces so that we draw the faces from from back to front and that's what I was doing I was what I was using the list sort method for here but just like implementing this sorting this face sorting as a native function as well was like as it says it's 100 times faster and the other thing that was made a measurable difference as well was locally caching object references in your functions as well so like instead of if you're using an object value more than once instead of doing self food self food self food just have yeah just created a local reference a local variable in their function and use that instead so there's some like dereferencing overheads there that is quite significant that we're saving and so after applying all of this sort of stuff this is the final result or the results so far I'm pretty happy with it getting the teapot model down to under 100 milliseconds per frame was really pleasing and yeah I'm pretty happy with the performance so what can this be used for honestly this was a this this was just a fun way to spend a few weekends after the festival had happened but you know it seems to be performing enough the way you could do some kind of like small 3d game like a lunar lander or something like that or you know make yourself a Jurassic Park style 3d user interface for your home automation but really the chief lesson for me I think was that the the best way to get involved with a project like micro python was to just start using it and eventually you come across some kind of limitation that probably your best place to overcome because you know you're the one who's trying to solve the problem you've got the vested interest in it you have you know all of the information is currently paged into your brain so yeah and then the the micro python people were extremely helpful in helping me whip up whip my year contributions into shape so yeah thanks to them for helping me get involved in micro python and thanks to you for listening I can try and answer questions but I'm not super expert on anything I've been talking about hi and thanks for your talk I had a question about the ESP 2 that you were implementing on this did you ever look at using like the dual core setup to try to sort of accelerate any of the mass but that is a good question and someone has mentioned this to me before but when I was writing this I was actually unaware that it had more than one core so I haven't yet but it's a great idea thanks very much for your talk if you're interested in micro python in the building a there is a stance about micro python and also a stand by pine 64 who make like smartwatch that can run micro python and stuff", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 26.400000000000002, "text": " I'm here to talk to you about graphics programming in Python on an embedded microcontroller,", "tokens": [286, 478, 510, 281, 751, 281, 291, 466, 11837, 9410, 294, 15329, 322, 364, 16741, 4532, 9000, 22922, 11], "temperature": 0.0, "avg_logprob": -0.5311941063922384, "compression_ratio": 1.0823529411764705, "no_speech_prob": 0.27859073877334595}, {"id": 1, "seek": 2640, "start": 26.4, "end": 30.0, "text": " which is hilarious because I'm none of these things, I'm not a graphics programmer, I'm", "tokens": [597, 307, 19796, 570, 286, 478, 6022, 295, 613, 721, 11, 286, 478, 406, 257, 11837, 32116, 11, 286, 478], "temperature": 0.0, "avg_logprob": -0.1849872415715998, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.001024450408294797}, {"id": 2, "seek": 2640, "start": 30.0, "end": 36.879999999999995, "text": " not a Python programmer and I'm not an embedded programmer, so we'll see how this goes.", "tokens": [406, 257, 15329, 32116, 293, 286, 478, 406, 364, 16741, 32116, 11, 370, 321, 603, 536, 577, 341, 1709, 13], "temperature": 0.0, "avg_logprob": -0.1849872415715998, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.001024450408294797}, {"id": 3, "seek": 2640, "start": 36.879999999999995, "end": 41.8, "text": " It's for that reason I just, you know, I can't emphasise enough this part of the talk description,", "tokens": [467, 311, 337, 300, 1778, 286, 445, 11, 291, 458, 11, 286, 393, 380, 7896, 908, 1547, 341, 644, 295, 264, 751, 3855, 11], "temperature": 0.0, "avg_logprob": -0.1849872415715998, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.001024450408294797}, {"id": 4, "seek": 2640, "start": 41.8, "end": 48.76, "text": " this is not an instructional talk, this is just what I did.", "tokens": [341, 307, 406, 364, 35716, 751, 11, 341, 307, 445, 437, 286, 630, 13], "temperature": 0.0, "avg_logprob": -0.1849872415715998, "compression_ratio": 1.6868686868686869, "no_speech_prob": 0.001024450408294797}, {"id": 5, "seek": 4876, "start": 48.76, "end": 57.68, "text": " So there's some background, EMF camp is this weekend camping festival for hackers and makers", "tokens": [407, 456, 311, 512, 3678, 11, 16237, 37, 2255, 307, 341, 6711, 19470, 12091, 337, 39766, 293, 19323], "temperature": 0.0, "avg_logprob": -0.22373822530110676, "compression_ratio": 1.6590909090909092, "no_speech_prob": 1.576507929712534e-05}, {"id": 6, "seek": 4876, "start": 57.68, "end": 67.32, "text": " and it's in a similar vein to the chaos communication camp and the Dutch hacker festival, you know,", "tokens": [293, 309, 311, 294, 257, 2531, 30669, 281, 264, 14158, 6101, 2255, 293, 264, 15719, 38155, 12091, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.22373822530110676, "compression_ratio": 1.6590909090909092, "no_speech_prob": 1.576507929712534e-05}, {"id": 7, "seek": 4876, "start": 67.32, "end": 71.03999999999999, "text": " there's robots and lasers and geodesic domes and things, it's great fun if you get the", "tokens": [456, 311, 14733, 293, 37948, 293, 1519, 4789, 299, 3285, 279, 293, 721, 11, 309, 311, 869, 1019, 498, 291, 483, 264], "temperature": 0.0, "avg_logprob": -0.22373822530110676, "compression_ratio": 1.6590909090909092, "no_speech_prob": 1.576507929712534e-05}, {"id": 8, "seek": 4876, "start": 71.03999999999999, "end": 77.47999999999999, "text": " opportunity to go, I highly recommend it and it's a bit of a tradition of these style", "tokens": [2650, 281, 352, 11, 286, 5405, 2748, 309, 293, 309, 311, 257, 857, 295, 257, 6994, 295, 613, 3758], "temperature": 0.0, "avg_logprob": -0.22373822530110676, "compression_ratio": 1.6590909090909092, "no_speech_prob": 1.576507929712534e-05}, {"id": 9, "seek": 7748, "start": 77.48, "end": 94.52000000000001, "text": " of events to give the attendees electronic event badges and the aim of these is to give", "tokens": [295, 3931, 281, 976, 264, 34826, 10092, 2280, 43894, 293, 264, 5939, 295, 613, 307, 281, 976], "temperature": 0.0, "avg_logprob": -0.1376033073816544, "compression_ratio": 1.5083333333333333, "no_speech_prob": 9.648237755754963e-05}, {"id": 10, "seek": 7748, "start": 94.52000000000001, "end": 102.48, "text": " attendees opportunity to play with some hardware that they might not have come across before.", "tokens": [34826, 2650, 281, 862, 365, 512, 8837, 300, 436, 1062, 406, 362, 808, 2108, 949, 13], "temperature": 0.0, "avg_logprob": -0.1376033073816544, "compression_ratio": 1.5083333333333333, "no_speech_prob": 9.648237755754963e-05}, {"id": 11, "seek": 10248, "start": 102.48, "end": 110.2, "text": " These are the two most recent badges from EMF camp, the one on the left here.", "tokens": [1981, 366, 264, 732, 881, 5162, 43894, 490, 16237, 37, 2255, 11, 264, 472, 322, 264, 1411, 510, 13], "temperature": 0.0, "avg_logprob": -0.13066125909487405, "compression_ratio": 1.5491071428571428, "no_speech_prob": 5.6838103773770854e-05}, {"id": 12, "seek": 10248, "start": 110.2, "end": 117.64, "text": " If I told you they had, they put a SIM card on it and a GSM modem and then they set up", "tokens": [759, 286, 1907, 291, 436, 632, 11, 436, 829, 257, 24738, 2920, 322, 309, 293, 257, 460, 26693, 1072, 443, 293, 550, 436, 992, 493], "temperature": 0.0, "avg_logprob": -0.13066125909487405, "compression_ratio": 1.5491071428571428, "no_speech_prob": 5.6838103773770854e-05}, {"id": 13, "seek": 10248, "start": 117.64, "end": 123.28, "text": " an onsite cell phone network, you'll understand why it's made to look like a Nokia Engage,", "tokens": [364, 18818, 642, 2815, 2593, 3209, 11, 291, 603, 1223, 983, 309, 311, 1027, 281, 574, 411, 257, 43980, 2469, 609, 11], "temperature": 0.0, "avg_logprob": -0.13066125909487405, "compression_ratio": 1.5491071428571428, "no_speech_prob": 5.6838103773770854e-05}, {"id": 14, "seek": 10248, "start": 123.28, "end": 129.4, "text": " but it's got all of the usual like peripherals and sensors and things on there as well like", "tokens": [457, 309, 311, 658, 439, 295, 264, 7713, 411, 26807, 1124, 293, 14840, 293, 721, 322, 456, 382, 731, 411], "temperature": 0.0, "avg_logprob": -0.13066125909487405, "compression_ratio": 1.5491071428571428, "no_speech_prob": 5.6838103773770854e-05}, {"id": 15, "seek": 12940, "start": 129.4, "end": 136.36, "text": " accelerometers and humidity and temperature and things and because it runs micropycin", "tokens": [10172, 34675, 293, 24751, 293, 4292, 293, 721, 293, 570, 309, 6676, 3123, 1513, 88, 20021], "temperature": 0.0, "avg_logprob": -0.16862317843314928, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.00010876292799366638}, {"id": 16, "seek": 12940, "start": 136.36, "end": 143.04000000000002, "text": " it allows people to easily get started with experimenting with that kind of hardware.", "tokens": [309, 4045, 561, 281, 3612, 483, 1409, 365, 29070, 365, 300, 733, 295, 8837, 13], "temperature": 0.0, "avg_logprob": -0.16862317843314928, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.00010876292799366638}, {"id": 17, "seek": 12940, "start": 143.04000000000002, "end": 147.96, "text": " The one on the right there is the newest one, these photographs aren't to scale by the", "tokens": [440, 472, 322, 264, 558, 456, 307, 264, 17569, 472, 11, 613, 17649, 3212, 380, 281, 4373, 538, 264], "temperature": 0.0, "avg_logprob": -0.16862317843314928, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.00010876292799366638}, {"id": 18, "seek": 12940, "start": 147.96, "end": 154.08, "text": " way, let me just hold them up for comparison, the newest one is much smaller.", "tokens": [636, 11, 718, 385, 445, 1797, 552, 493, 337, 9660, 11, 264, 17569, 472, 307, 709, 4356, 13], "temperature": 0.0, "avg_logprob": -0.16862317843314928, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.00010876292799366638}, {"id": 19, "seek": 15408, "start": 154.08, "end": 161.32000000000002, "text": " The reasons for that you might guess is because of the silicon shortage that's been caused", "tokens": [440, 4112, 337, 300, 291, 1062, 2041, 307, 570, 295, 264, 22848, 24708, 300, 311, 668, 7008], "temperature": 0.0, "avg_logprob": -0.16376047784631903, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.00011094498768215999}, {"id": 20, "seek": 15408, "start": 161.32000000000002, "end": 169.16000000000003, "text": " by fire, flood and plague as you might expect, but it's still a lovely device.", "tokens": [538, 2610, 11, 10481, 293, 28185, 382, 291, 1062, 2066, 11, 457, 309, 311, 920, 257, 7496, 4302, 13], "temperature": 0.0, "avg_logprob": -0.16376047784631903, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.00011094498768215999}, {"id": 21, "seek": 15408, "start": 169.16000000000003, "end": 173.12, "text": " The one on the left here you can see, you might recognise this as a version of the settlers", "tokens": [440, 472, 322, 264, 1411, 510, 291, 393, 536, 11, 291, 1062, 23991, 341, 382, 257, 3037, 295, 264, 43798], "temperature": 0.0, "avg_logprob": -0.16376047784631903, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.00011094498768215999}, {"id": 22, "seek": 15408, "start": 173.12, "end": 182.20000000000002, "text": " of Ketan, I spent a lot of time trying to isolate small parts of the screen to redraw", "tokens": [295, 591, 302, 282, 11, 286, 4418, 257, 688, 295, 565, 1382, 281, 25660, 1359, 3166, 295, 264, 2568, 281, 2182, 5131], "temperature": 0.0, "avg_logprob": -0.16376047784631903, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.00011094498768215999}, {"id": 23, "seek": 18220, "start": 182.2, "end": 188.07999999999998, "text": " because the update speed on that screen was so slow, it was almost, it's almost unusable", "tokens": [570, 264, 5623, 3073, 322, 300, 2568, 390, 370, 2964, 11, 309, 390, 1920, 11, 309, 311, 1920, 10054, 712], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 24, "seek": 18220, "start": 188.07999999999998, "end": 189.92, "text": " for anything in real time.", "tokens": [337, 1340, 294, 957, 565, 13], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 25, "seek": 18220, "start": 189.92, "end": 194.72, "text": " So when I got my hands on the new one this year I obviously wanted to see what this one", "tokens": [407, 562, 286, 658, 452, 2377, 322, 264, 777, 472, 341, 1064, 286, 2745, 1415, 281, 536, 437, 341, 472], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 26, "seek": 18220, "start": 194.72, "end": 198.95999999999998, "text": " could do.", "tokens": [727, 360, 13], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 27, "seek": 18220, "start": 198.95999999999998, "end": 204.44, "text": " And so the first thing I wanted to do was to just try and glitter full screen of pixels", "tokens": [400, 370, 264, 700, 551, 286, 1415, 281, 360, 390, 281, 445, 853, 293, 18620, 1577, 2568, 295, 18668], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 28, "seek": 18220, "start": 204.44, "end": 211.04, "text": " to the device using the display driver directly and let's talk about 70 milliseconds which", "tokens": [281, 264, 4302, 1228, 264, 4674, 6787, 3838, 293, 718, 311, 751, 466, 5285, 34184, 597], "temperature": 0.0, "avg_logprob": -0.1710363310210559, "compression_ratio": 1.6065573770491803, "no_speech_prob": 2.9904669645475224e-05}, {"id": 29, "seek": 21104, "start": 211.04, "end": 215.95999999999998, "text": " is already orders of magnitude faster than the old badge.", "tokens": [307, 1217, 9470, 295, 15668, 4663, 813, 264, 1331, 25797, 13], "temperature": 0.0, "avg_logprob": -0.15077810509260312, "compression_ratio": 1.5660377358490567, "no_speech_prob": 5.017345029045828e-05}, {"id": 30, "seek": 21104, "start": 215.95999999999998, "end": 224.32, "text": " If I draw to an off-screen buffer instead that's way faster, but you know if you're", "tokens": [759, 286, 2642, 281, 364, 766, 12, 12439, 21762, 2602, 300, 311, 636, 4663, 11, 457, 291, 458, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.15077810509260312, "compression_ratio": 1.5660377358490567, "no_speech_prob": 5.017345029045828e-05}, {"id": 31, "seek": 21104, "start": 224.32, "end": 229.07999999999998, "text": " doing that you then you have to get into the business of implementing your own drawing", "tokens": [884, 300, 291, 550, 291, 362, 281, 483, 666, 264, 1606, 295, 18114, 428, 1065, 6316], "temperature": 0.0, "avg_logprob": -0.15077810509260312, "compression_ratio": 1.5660377358490567, "no_speech_prob": 5.017345029045828e-05}, {"id": 32, "seek": 21104, "start": 229.07999999999998, "end": 234.64, "text": " functions for primitives and I didn't really want to do that.", "tokens": [6828, 337, 2886, 38970, 293, 286, 994, 380, 534, 528, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.15077810509260312, "compression_ratio": 1.5660377358490567, "no_speech_prob": 5.017345029045828e-05}, {"id": 33, "seek": 21104, "start": 234.64, "end": 240.07999999999998, "text": " That is ominous foreshadowing by the way.", "tokens": [663, 307, 46812, 563, 2091, 2716, 345, 9637, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.15077810509260312, "compression_ratio": 1.5660377358490567, "no_speech_prob": 5.017345029045828e-05}, {"id": 34, "seek": 24008, "start": 240.08, "end": 245.28, "text": " But I did discover that MicroPython has this frame buff module which provides you with", "tokens": [583, 286, 630, 4411, 300, 25642, 47, 88, 11943, 575, 341, 3920, 9204, 10088, 597, 6417, 291, 365], "temperature": 0.0, "avg_logprob": -0.14141599337259927, "compression_ratio": 1.560483870967742, "no_speech_prob": 3.380679845577106e-05}, {"id": 35, "seek": 24008, "start": 245.28, "end": 250.60000000000002, "text": " an off-screen frame buffer and also some drawing functions which is great.", "tokens": [364, 766, 12, 12439, 3920, 21762, 293, 611, 512, 6316, 6828, 597, 307, 869, 13], "temperature": 0.0, "avg_logprob": -0.14141599337259927, "compression_ratio": 1.560483870967742, "no_speech_prob": 3.380679845577106e-05}, {"id": 36, "seek": 24008, "start": 250.60000000000002, "end": 255.8, "text": " So 41 milliseconds, I thought that was fair compromise, that's a good start.", "tokens": [407, 18173, 34184, 11, 286, 1194, 300, 390, 3143, 18577, 11, 300, 311, 257, 665, 722, 13], "temperature": 0.0, "avg_logprob": -0.14141599337259927, "compression_ratio": 1.560483870967742, "no_speech_prob": 3.380679845577106e-05}, {"id": 37, "seek": 24008, "start": 255.8, "end": 261.16, "text": " Now I've got a baseline for how fast I can draw to the screen.", "tokens": [823, 286, 600, 658, 257, 20518, 337, 577, 2370, 286, 393, 2642, 281, 264, 2568, 13], "temperature": 0.0, "avg_logprob": -0.14141599337259927, "compression_ratio": 1.560483870967742, "no_speech_prob": 3.380679845577106e-05}, {"id": 38, "seek": 24008, "start": 261.16, "end": 268.28000000000003, "text": " So obviously what this is about is drawing 3D things to the screen of this device and", "tokens": [407, 2745, 437, 341, 307, 466, 307, 6316, 805, 35, 721, 281, 264, 2568, 295, 341, 4302, 293], "temperature": 0.0, "avg_logprob": -0.14141599337259927, "compression_ratio": 1.560483870967742, "no_speech_prob": 3.380679845577106e-05}, {"id": 39, "seek": 26828, "start": 268.28, "end": 277.32, "text": " so this is just here to, in case you don't know this is basically, I guess this is 3D", "tokens": [370, 341, 307, 445, 510, 281, 11, 294, 1389, 291, 500, 380, 458, 341, 307, 1936, 11, 286, 2041, 341, 307, 805, 35], "temperature": 0.0, "avg_logprob": -0.19030839204788208, "compression_ratio": 1.6787330316742082, "no_speech_prob": 5.588543717749417e-05}, {"id": 40, "seek": 26828, "start": 277.32, "end": 282.88, "text": " rasterization 101, this is like the minimum we have to do in order to get 3D points onto", "tokens": [367, 1727, 2144, 21055, 11, 341, 307, 411, 264, 7285, 321, 362, 281, 360, 294, 1668, 281, 483, 805, 35, 2793, 3911], "temperature": 0.0, "avg_logprob": -0.19030839204788208, "compression_ratio": 1.6787330316742082, "no_speech_prob": 5.588543717749417e-05}, {"id": 41, "seek": 26828, "start": 282.88, "end": 284.2, "text": " the screen.", "tokens": [264, 2568, 13], "temperature": 0.0, "avg_logprob": -0.19030839204788208, "compression_ratio": 1.6787330316742082, "no_speech_prob": 5.588543717749417e-05}, {"id": 42, "seek": 26828, "start": 284.2, "end": 288.08, "text": " You know we start with our vertex coordinates and then that's multiplied by the model matrix", "tokens": [509, 458, 321, 722, 365, 527, 28162, 21056, 293, 550, 300, 311, 17207, 538, 264, 2316, 8141], "temperature": 0.0, "avg_logprob": -0.19030839204788208, "compression_ratio": 1.6787330316742082, "no_speech_prob": 5.588543717749417e-05}, {"id": 43, "seek": 26828, "start": 288.08, "end": 293.32, "text": " to get into world space and then you multiply that by the view matrix to get the view space", "tokens": [281, 483, 666, 1002, 1901, 293, 550, 291, 12972, 300, 538, 264, 1910, 8141, 281, 483, 264, 1910, 1901], "temperature": 0.0, "avg_logprob": -0.19030839204788208, "compression_ratio": 1.6787330316742082, "no_speech_prob": 5.588543717749417e-05}, {"id": 44, "seek": 29332, "start": 293.32, "end": 299.92, "text": " and then by the projection matrix you get the clip space and then the clip space allows", "tokens": [293, 550, 538, 264, 22743, 8141, 291, 483, 264, 7353, 1901, 293, 550, 264, 7353, 1901, 4045], "temperature": 0.0, "avg_logprob": -0.16948428298487808, "compression_ratio": 1.7899159663865547, "no_speech_prob": 1.8933791579911485e-05}, {"id": 45, "seek": 29332, "start": 299.92, "end": 304.44, "text": " you to see which vertices will be eclipped by the edges of the screen or not.", "tokens": [291, 281, 536, 597, 32053, 486, 312, 308, 3474, 5529, 538, 264, 8819, 295, 264, 2568, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.16948428298487808, "compression_ratio": 1.7899159663865547, "no_speech_prob": 1.8933791579911485e-05}, {"id": 46, "seek": 29332, "start": 304.44, "end": 310.48, "text": " So then once we know we've got the list of vertices we want to render then we can do", "tokens": [407, 550, 1564, 321, 458, 321, 600, 658, 264, 1329, 295, 32053, 321, 528, 281, 15529, 550, 321, 393, 360], "temperature": 0.0, "avg_logprob": -0.16948428298487808, "compression_ratio": 1.7899159663865547, "no_speech_prob": 1.8933791579911485e-05}, {"id": 47, "seek": 29332, "start": 310.48, "end": 316.64, "text": " the perspective division to bring that into normalize device coordinate space or NDC space.", "tokens": [264, 4585, 10044, 281, 1565, 300, 666, 2710, 1125, 4302, 15670, 1901, 420, 426, 25619, 1901, 13], "temperature": 0.0, "avg_logprob": -0.16948428298487808, "compression_ratio": 1.7899159663865547, "no_speech_prob": 1.8933791579911485e-05}, {"id": 48, "seek": 29332, "start": 316.64, "end": 320.64, "text": " The perspective division is just the part that makes the further away points closer", "tokens": [440, 4585, 10044, 307, 445, 264, 644, 300, 1669, 264, 3052, 1314, 2793, 4966], "temperature": 0.0, "avg_logprob": -0.16948428298487808, "compression_ratio": 1.7899159663865547, "no_speech_prob": 1.8933791579911485e-05}, {"id": 49, "seek": 32064, "start": 320.64, "end": 324.59999999999997, "text": " together so it gives you that illusion of 3D.", "tokens": [1214, 370, 309, 2709, 291, 300, 18854, 295, 805, 35, 13], "temperature": 0.0, "avg_logprob": -0.2069804138607449, "compression_ratio": 1.5233160621761659, "no_speech_prob": 3.0095819965936244e-05}, {"id": 50, "seek": 32064, "start": 324.59999999999997, "end": 329.4, "text": " And then we've got to convert the normalize device coordinates which are like between", "tokens": [400, 550, 321, 600, 658, 281, 7620, 264, 2710, 1125, 4302, 21056, 597, 366, 411, 1296], "temperature": 0.0, "avg_logprob": -0.2069804138607449, "compression_ratio": 1.5233160621761659, "no_speech_prob": 3.0095819965936244e-05}, {"id": 51, "seek": 32064, "start": 329.4, "end": 336.44, "text": " minus one and one to screen space which is like our pixel coordinates.", "tokens": [3175, 472, 293, 472, 281, 2568, 1901, 597, 307, 411, 527, 19261, 21056, 13], "temperature": 0.0, "avg_logprob": -0.2069804138607449, "compression_ratio": 1.5233160621761659, "no_speech_prob": 3.0095819965936244e-05}, {"id": 52, "seek": 32064, "start": 336.44, "end": 346.84, "text": " And so when I was doing this, these, to render these eight points on the screen from a cube", "tokens": [400, 370, 562, 286, 390, 884, 341, 11, 613, 11, 281, 15529, 613, 3180, 2793, 322, 264, 2568, 490, 257, 13728], "temperature": 0.0, "avg_logprob": -0.2069804138607449, "compression_ratio": 1.5233160621761659, "no_speech_prob": 3.0095819965936244e-05}, {"id": 53, "seek": 34684, "start": 346.84, "end": 353.32, "text": " it was pretty, it wasn't too bad 53 seconds and then if you like join those up to create", "tokens": [309, 390, 1238, 11, 309, 2067, 380, 886, 1578, 21860, 3949, 293, 550, 498, 291, 411, 3917, 729, 493, 281, 1884], "temperature": 0.0, "avg_logprob": -0.18353513990129744, "compression_ratio": 1.510752688172043, "no_speech_prob": 2.598860373836942e-05}, {"id": 54, "seek": 34684, "start": 353.32, "end": 358.03999999999996, "text": " your cube wireframe it's not that much, not that much slower there's 12 triangles there", "tokens": [428, 13728, 6234, 17265, 309, 311, 406, 300, 709, 11, 406, 300, 709, 14009, 456, 311, 2272, 29896, 456], "temperature": 0.0, "avg_logprob": -0.18353513990129744, "compression_ratio": 1.510752688172043, "no_speech_prob": 2.598860373836942e-05}, {"id": 55, "seek": 34684, "start": 358.03999999999996, "end": 362.2, "text": " obviously.", "tokens": [2745, 13], "temperature": 0.0, "avg_logprob": -0.18353513990129744, "compression_ratio": 1.510752688172043, "no_speech_prob": 2.598860373836942e-05}, {"id": 56, "seek": 34684, "start": 362.2, "end": 368.12, "text": " The next step is to then start filling in these triangles you want to draw solid shapes after", "tokens": [440, 958, 1823, 307, 281, 550, 722, 10623, 294, 613, 29896, 291, 528, 281, 2642, 5100, 10854, 934], "temperature": 0.0, "avg_logprob": -0.18353513990129744, "compression_ratio": 1.510752688172043, "no_speech_prob": 2.598860373836942e-05}, {"id": 57, "seek": 36812, "start": 368.12, "end": 378.96, "text": " all, annoyingly there's no method or no function for doing that in the frame buff module for", "tokens": [439, 11, 11304, 356, 456, 311, 572, 3170, 420, 572, 2445, 337, 884, 300, 294, 264, 3920, 9204, 10088, 337], "temperature": 0.0, "avg_logprob": -0.1794337797700689, "compression_ratio": 1.6271929824561404, "no_speech_prob": 8.4514613263309e-06}, {"id": 58, "seek": 36812, "start": 378.96, "end": 380.4, "text": " MicroPython.", "tokens": [25642, 47, 88, 11943, 13], "temperature": 0.0, "avg_logprob": -0.1794337797700689, "compression_ratio": 1.6271929824561404, "no_speech_prob": 8.4514613263309e-06}, {"id": 59, "seek": 36812, "start": 380.4, "end": 389.28000000000003, "text": " There is in the display driver but as I mentioned like using the display driver directly is", "tokens": [821, 307, 294, 264, 4674, 6787, 457, 382, 286, 2835, 411, 1228, 264, 4674, 6787, 3838, 307], "temperature": 0.0, "avg_logprob": -0.1794337797700689, "compression_ratio": 1.6271929824561404, "no_speech_prob": 8.4514613263309e-06}, {"id": 60, "seek": 36812, "start": 389.28000000000003, "end": 393.6, "text": " much slower because we're making many more calls to hardware and you know we're setting", "tokens": [709, 14009, 570, 321, 434, 1455, 867, 544, 5498, 281, 8837, 293, 291, 458, 321, 434, 3287], "temperature": 0.0, "avg_logprob": -0.1794337797700689, "compression_ratio": 1.6271929824561404, "no_speech_prob": 8.4514613263309e-06}, {"id": 61, "seek": 36812, "start": 393.6, "end": 396.88, "text": " pins high and low and stuff for every time we want to draw something and we just want", "tokens": [16392, 1090, 293, 2295, 293, 1507, 337, 633, 565, 321, 528, 281, 2642, 746, 293, 321, 445, 528], "temperature": 0.0, "avg_logprob": -0.1794337797700689, "compression_ratio": 1.6271929824561404, "no_speech_prob": 8.4514613263309e-06}, {"id": 62, "seek": 39688, "start": 396.88, "end": 401.88, "text": " to do that once when we blip the whole thing to the screen.", "tokens": [281, 360, 300, 1564, 562, 321, 888, 647, 264, 1379, 551, 281, 264, 2568, 13], "temperature": 0.0, "avg_logprob": -0.13746430999354312, "compression_ratio": 1.5870646766169154, "no_speech_prob": 1.1972376341873314e-05}, {"id": 63, "seek": 39688, "start": 401.88, "end": 410.2, "text": " And yeah so frame buff doesn't provide a like polygon or polygon fill method and so", "tokens": [400, 1338, 370, 3920, 9204, 1177, 380, 2893, 257, 411, 48242, 420, 48242, 2836, 3170, 293, 370], "temperature": 0.0, "avg_logprob": -0.13746430999354312, "compression_ratio": 1.5870646766169154, "no_speech_prob": 1.1972376341873314e-05}, {"id": 64, "seek": 39688, "start": 410.2, "end": 417.15999999999997, "text": " I do have to get into the business of writing these sort of functions myself after all.", "tokens": [286, 360, 362, 281, 483, 666, 264, 1606, 295, 3579, 613, 1333, 295, 6828, 2059, 934, 439, 13], "temperature": 0.0, "avg_logprob": -0.13746430999354312, "compression_ratio": 1.5870646766169154, "no_speech_prob": 1.1972376341873314e-05}, {"id": 65, "seek": 39688, "start": 417.15999999999997, "end": 422.6, "text": " So yeah the display driver itself does have these methods so obviously that's the first", "tokens": [407, 1338, 264, 4674, 6787, 2564, 775, 362, 613, 7150, 370, 2745, 300, 311, 264, 700], "temperature": 0.0, "avg_logprob": -0.13746430999354312, "compression_ratio": 1.5870646766169154, "no_speech_prob": 1.1972376341873314e-05}, {"id": 66, "seek": 42260, "start": 422.6, "end": 429.44, "text": " place I looked for implementation clues, they have a polygon and a fill polygon method", "tokens": [1081, 286, 2956, 337, 11420, 20936, 11, 436, 362, 257, 48242, 293, 257, 2836, 48242, 3170], "temperature": 0.0, "avg_logprob": -0.13959808672888804, "compression_ratio": 1.5903614457831325, "no_speech_prob": 3.203394226147793e-05}, {"id": 67, "seek": 42260, "start": 429.44, "end": 441.04, "text": " only obviously there are problems with it and it's a little bit rubbish here's the figure", "tokens": [787, 2745, 456, 366, 2740, 365, 309, 293, 309, 311, 257, 707, 857, 29978, 510, 311, 264, 2573], "temperature": 0.0, "avg_logprob": -0.13959808672888804, "compression_ratio": 1.5903614457831325, "no_speech_prob": 3.203394226147793e-05}, {"id": 68, "seek": 42260, "start": 441.04, "end": 449.64000000000004, "text": " on the left there is just using the outline polygon method and then the second one here", "tokens": [322, 264, 1411, 456, 307, 445, 1228, 264, 16387, 48242, 3170, 293, 550, 264, 1150, 472, 510], "temperature": 0.0, "avg_logprob": -0.13959808672888804, "compression_ratio": 1.5903614457831325, "no_speech_prob": 3.203394226147793e-05}, {"id": 69, "seek": 44964, "start": 449.64, "end": 455.91999999999996, "text": " is where I've tried to draw in a filled polygon over the top of the wireframe polygon and", "tokens": [307, 689, 286, 600, 3031, 281, 2642, 294, 257, 6412, 48242, 670, 264, 1192, 295, 264, 6234, 17265, 48242, 293], "temperature": 0.0, "avg_logprob": -0.13933285246504115, "compression_ratio": 1.677685950413223, "no_speech_prob": 2.236523141618818e-05}, {"id": 70, "seek": 44964, "start": 455.91999999999996, "end": 459.96, "text": " you can see it just doesn't quite match up.", "tokens": [291, 393, 536, 309, 445, 1177, 380, 1596, 2995, 493, 13], "temperature": 0.0, "avg_logprob": -0.13933285246504115, "compression_ratio": 1.677685950413223, "no_speech_prob": 2.236523141618818e-05}, {"id": 71, "seek": 44964, "start": 459.96, "end": 465.64, "text": " And so reading the code there is it seems to be implementing like quite a well known", "tokens": [400, 370, 3760, 264, 3089, 456, 307, 309, 2544, 281, 312, 18114, 411, 1596, 257, 731, 2570], "temperature": 0.0, "avg_logprob": -0.13933285246504115, "compression_ratio": 1.677685950413223, "no_speech_prob": 2.236523141618818e-05}, {"id": 72, "seek": 44964, "start": 465.64, "end": 472.47999999999996, "text": " or well documented fill polygon method and there's a link to the website where this algorithm", "tokens": [420, 731, 23007, 2836, 48242, 3170, 293, 456, 311, 257, 2113, 281, 264, 3144, 689, 341, 9284], "temperature": 0.0, "avg_logprob": -0.13933285246504115, "compression_ratio": 1.677685950413223, "no_speech_prob": 2.236523141618818e-05}, {"id": 73, "seek": 44964, "start": 472.47999999999996, "end": 477.68, "text": " is described and that also supplies a reference implementation so I was able to like copy the", "tokens": [307, 7619, 293, 300, 611, 11768, 257, 6408, 11420, 370, 286, 390, 1075, 281, 411, 5055, 264], "temperature": 0.0, "avg_logprob": -0.13933285246504115, "compression_ratio": 1.677685950413223, "no_speech_prob": 2.236523141618818e-05}, {"id": 74, "seek": 47768, "start": 477.68, "end": 484.48, "text": " reference implementation to see if that if the display drivers implementation was different", "tokens": [6408, 11420, 281, 536, 498, 300, 498, 264, 4674, 11590, 11420, 390, 819], "temperature": 0.0, "avg_logprob": -0.1770145538005423, "compression_ratio": 2.0231481481481484, "no_speech_prob": 4.018843173980713e-05}, {"id": 75, "seek": 47768, "start": 484.48, "end": 488.52, "text": " and it isn't it's exactly the same it looks like the display drivers inherited the same", "tokens": [293, 309, 1943, 380, 309, 311, 2293, 264, 912, 309, 1542, 411, 264, 4674, 11590, 27091, 264, 912], "temperature": 0.0, "avg_logprob": -0.1770145538005423, "compression_ratio": 2.0231481481481484, "no_speech_prob": 4.018843173980713e-05}, {"id": 76, "seek": 47768, "start": 488.52, "end": 494.6, "text": " problems that we're in the reference implementation and you'll notice that it's not only incorrect", "tokens": [2740, 300, 321, 434, 294, 264, 6408, 11420, 293, 291, 603, 3449, 300, 309, 311, 406, 787, 18424], "temperature": 0.0, "avg_logprob": -0.1770145538005423, "compression_ratio": 2.0231481481481484, "no_speech_prob": 4.018843173980713e-05}, {"id": 77, "seek": 47768, "start": 494.6, "end": 498.48, "text": " on this side but like the left edge here is completely different to this edge here so", "tokens": [322, 341, 1252, 457, 411, 264, 1411, 4691, 510, 307, 2584, 819, 281, 341, 4691, 510, 370], "temperature": 0.0, "avg_logprob": -0.1770145538005423, "compression_ratio": 2.0231481481481484, "no_speech_prob": 4.018843173980713e-05}, {"id": 78, "seek": 47768, "start": 498.48, "end": 503.88, "text": " it's like over drawing on this side and not drawing enough on that side.", "tokens": [309, 311, 411, 670, 6316, 322, 341, 1252, 293, 406, 6316, 1547, 322, 300, 1252, 13], "temperature": 0.0, "avg_logprob": -0.1770145538005423, "compression_ratio": 2.0231481481481484, "no_speech_prob": 4.018843173980713e-05}, {"id": 79, "seek": 50388, "start": 503.88, "end": 511.24, "text": " A lot of the problems with it were sort of like rounding errors and like floating point", "tokens": [316, 688, 295, 264, 2740, 365, 309, 645, 1333, 295, 411, 48237, 13603, 293, 411, 12607, 935], "temperature": 0.0, "avg_logprob": -0.13826739637157584, "compression_ratio": 1.6435185185185186, "no_speech_prob": 4.884580903308233e-06}, {"id": 80, "seek": 50388, "start": 511.24, "end": 517.88, "text": " to integer truncation and that sort of thing which I've managed to mostly fix except for", "tokens": [281, 24922, 504, 409, 46252, 293, 300, 1333, 295, 551, 597, 286, 600, 6453, 281, 5240, 3191, 3993, 337], "temperature": 0.0, "avg_logprob": -0.13826739637157584, "compression_ratio": 1.6435185185185186, "no_speech_prob": 4.884580903308233e-06}, {"id": 81, "seek": 50388, "start": 517.88, "end": 525.72, "text": " this really annoying pixel down here that I just couldn't get and when I submitted because", "tokens": [341, 534, 11304, 19261, 760, 510, 300, 286, 445, 2809, 380, 483, 293, 562, 286, 14405, 570], "temperature": 0.0, "avg_logprob": -0.13826739637157584, "compression_ratio": 1.6435185185185186, "no_speech_prob": 4.884580903308233e-06}, {"id": 82, "seek": 50388, "start": 525.72, "end": 530.24, "text": " I wanted to submit like this enhancement to the frame buff module upstream to the micro", "tokens": [286, 1415, 281, 10315, 411, 341, 40776, 281, 264, 3920, 9204, 10088, 33915, 281, 264, 4532], "temperature": 0.0, "avg_logprob": -0.13826739637157584, "compression_ratio": 1.6435185185185186, "no_speech_prob": 4.884580903308233e-06}, {"id": 83, "seek": 53024, "start": 530.24, "end": 536.72, "text": " platform project and so we spent a few days scratching our heads over this to try and figure", "tokens": [3663, 1716, 293, 370, 321, 4418, 257, 1326, 1708, 29699, 527, 8050, 670, 341, 281, 853, 293, 2573], "temperature": 0.0, "avg_logprob": -0.14211520026711857, "compression_ratio": 1.752895752895753, "no_speech_prob": 5.1097744290018454e-05}, {"id": 84, "seek": 53024, "start": 536.72, "end": 542.48, "text": " out what we could do we were initially we proposed just drawing the outline again on top of that", "tokens": [484, 437, 321, 727, 360, 321, 645, 9105, 321, 10348, 445, 6316, 264, 16387, 797, 322, 1192, 295, 300], "temperature": 0.0, "avg_logprob": -0.14211520026711857, "compression_ratio": 1.752895752895753, "no_speech_prob": 5.1097744290018454e-05}, {"id": 85, "seek": 53024, "start": 542.48, "end": 546.96, "text": " on top of the filled polygon just to like sweep it under the rug but eventually we", "tokens": [322, 1192, 295, 264, 6412, 48242, 445, 281, 411, 22169, 309, 833, 264, 18329, 457, 4728, 321], "temperature": 0.0, "avg_logprob": -0.14211520026711857, "compression_ratio": 1.752895752895753, "no_speech_prob": 5.1097744290018454e-05}, {"id": 86, "seek": 53024, "start": 546.96, "end": 552.72, "text": " managed to figure out a much better way of doing it we just like try to detect when these", "tokens": [6453, 281, 2573, 484, 257, 709, 1101, 636, 295, 884, 309, 321, 445, 411, 853, 281, 5531, 562, 613], "temperature": 0.0, "avg_logprob": -0.14211520026711857, "compression_ratio": 1.752895752895753, "no_speech_prob": 5.1097744290018454e-05}, {"id": 87, "seek": 53024, "start": 552.72, "end": 559.84, "text": " stray pixels were we're going to happen and then fill them in explicitly instead of letting", "tokens": [36219, 18668, 645, 321, 434, 516, 281, 1051, 293, 550, 2836, 552, 294, 20803, 2602, 295, 8295], "temperature": 0.0, "avg_logprob": -0.14211520026711857, "compression_ratio": 1.752895752895753, "no_speech_prob": 5.1097744290018454e-05}, {"id": 88, "seek": 55984, "start": 559.84, "end": 578.64, "text": " the algorithm do it oh yeah I you know these it was quite it's pretty obvious that the", "tokens": [264, 9284, 360, 309, 1954, 1338, 286, 291, 458, 613, 309, 390, 1596, 309, 311, 1238, 6322, 300, 264], "temperature": 0.0, "avg_logprob": -0.28406949043273927, "compression_ratio": 1.4112903225806452, "no_speech_prob": 1.8421276763547212e-05}, {"id": 89, "seek": 55984, "start": 578.64, "end": 585.24, "text": " algorithm I think was developed by a physicist or a mathematician because in the article", "tokens": [9284, 286, 519, 390, 4743, 538, 257, 42466, 420, 257, 48281, 570, 294, 264, 7222], "temperature": 0.0, "avg_logprob": -0.28406949043273927, "compression_ratio": 1.4112903225806452, "no_speech_prob": 1.8421276763547212e-05}, {"id": 90, "seek": 58524, "start": 585.24, "end": 594.88, "text": " that describes the algorithm it says and I'm quoting here the detecting points on the", "tokens": [300, 15626, 264, 9284, 309, 1619, 293, 286, 478, 41552, 510, 264, 40237, 2793, 322, 264], "temperature": 0.0, "avg_logprob": -0.12478631734848022, "compression_ratio": 1.5783132530120483, "no_speech_prob": 7.585904677398503e-05}, {"id": 91, "seek": 58524, "start": 594.88, "end": 602.84, "text": " polygon edge will deliver unpredictable results but that is quote not generally a problem", "tokens": [48242, 4691, 486, 4239, 31160, 3542, 457, 300, 307, 6513, 406, 5101, 257, 1154], "temperature": 0.0, "avg_logprob": -0.12478631734848022, "compression_ratio": 1.5783132530120483, "no_speech_prob": 7.585904677398503e-05}, {"id": 92, "seek": 58524, "start": 602.84, "end": 612.84, "text": " because quotes the edge of the polygon is infinitely thin now my polygons have an edge", "tokens": [570, 19963, 264, 4691, 295, 264, 48242, 307, 36227, 5862, 586, 452, 6754, 70, 892, 362, 364, 4691], "temperature": 0.0, "avg_logprob": -0.12478631734848022, "compression_ratio": 1.5783132530120483, "no_speech_prob": 7.585904677398503e-05}, {"id": 93, "seek": 61284, "start": 612.84, "end": 620.72, "text": " of one pixel so this is obviously why we had to like it fix the problems of it anyway now", "tokens": [295, 472, 19261, 370, 341, 307, 2745, 983, 321, 632, 281, 411, 309, 3191, 264, 2740, 295, 309, 4033, 586], "temperature": 0.0, "avg_logprob": -0.15801370505130652, "compression_ratio": 1.5423728813559323, "no_speech_prob": 4.47587481176015e-05}, {"id": 94, "seek": 61284, "start": 620.72, "end": 627.44, "text": " we can draw arbitrary polygons to the screen and let's see what that looks like this is", "tokens": [321, 393, 2642, 23211, 6754, 70, 892, 281, 264, 2568, 293, 718, 311, 536, 437, 300, 1542, 411, 341, 307], "temperature": 0.0, "avg_logprob": -0.15801370505130652, "compression_ratio": 1.5423728813559323, "no_speech_prob": 4.47587481176015e-05}, {"id": 95, "seek": 61284, "start": 627.44, "end": 635.52, "text": " the cube here again which is like basically you know the hello world of 3d graphics programming", "tokens": [264, 13728, 510, 797, 597, 307, 411, 1936, 291, 458, 264, 7751, 1002, 295, 805, 67, 11837, 9410], "temperature": 0.0, "avg_logprob": -0.15801370505130652, "compression_ratio": 1.5423728813559323, "no_speech_prob": 4.47587481176015e-05}, {"id": 96, "seek": 63552, "start": 635.52, "end": 644.8, "text": " and it seems to work pretty well 66 milliseconds there but you can see on the on the left hand", "tokens": [293, 309, 2544, 281, 589, 1238, 731, 21126, 34184, 456, 457, 291, 393, 536, 322, 264, 322, 264, 1411, 1011], "temperature": 0.0, "avg_logprob": -0.14021413781669703, "compression_ratio": 1.8402061855670102, "no_speech_prob": 4.920272476738319e-05}, {"id": 97, "seek": 63552, "start": 644.8, "end": 649.12, "text": " screenshot there that's not the inside it looks like you're looking at the inside of", "tokens": [27712, 456, 300, 311, 406, 264, 1854, 309, 1542, 411, 291, 434, 1237, 412, 264, 1854, 295], "temperature": 0.0, "avg_logprob": -0.14021413781669703, "compression_ratio": 1.8402061855670102, "no_speech_prob": 4.920272476738319e-05}, {"id": 98, "seek": 63552, "start": 649.12, "end": 654.3199999999999, "text": " the cube but it's just because we are drawing the back face of the back of the cube on top", "tokens": [264, 13728, 457, 309, 311, 445, 570, 321, 366, 6316, 264, 646, 1851, 295, 264, 646, 295, 264, 13728, 322, 1192], "temperature": 0.0, "avg_logprob": -0.14021413781669703, "compression_ratio": 1.8402061855670102, "no_speech_prob": 4.920272476738319e-05}, {"id": 99, "seek": 63552, "start": 654.3199999999999, "end": 661.56, "text": " of the front face of the front of the cube so as part of this 3d rasterization process", "tokens": [295, 264, 1868, 1851, 295, 264, 1868, 295, 264, 13728, 370, 382, 644, 295, 341, 805, 67, 367, 1727, 2144, 1399], "temperature": 0.0, "avg_logprob": -0.14021413781669703, "compression_ratio": 1.8402061855670102, "no_speech_prob": 4.920272476738319e-05}, {"id": 100, "seek": 66156, "start": 661.56, "end": 667.8, "text": " that you've now got to do like back face calling which is more maths added on to that pipeline", "tokens": [300, 291, 600, 586, 658, 281, 360, 411, 646, 1851, 5141, 597, 307, 544, 36287, 3869, 322, 281, 300, 15517], "temperature": 0.0, "avg_logprob": -0.15495972321412274, "compression_ratio": 2.0, "no_speech_prob": 5.3374420531326905e-05}, {"id": 101, "seek": 66156, "start": 667.8, "end": 675.64, "text": " you know you've got to take the you've got to calculate the normal vector of the face", "tokens": [291, 458, 291, 600, 658, 281, 747, 264, 291, 600, 658, 281, 8873, 264, 2710, 8062, 295, 264, 1851], "temperature": 0.0, "avg_logprob": -0.15495972321412274, "compression_ratio": 2.0, "no_speech_prob": 5.3374420531326905e-05}, {"id": 102, "seek": 66156, "start": 675.64, "end": 681.28, "text": " which is the direction the face is facing and then compute the dot product of that with", "tokens": [597, 307, 264, 3513, 264, 1851, 307, 7170, 293, 550, 14722, 264, 5893, 1674, 295, 300, 365], "temperature": 0.0, "avg_logprob": -0.15495972321412274, "compression_ratio": 2.0, "no_speech_prob": 5.3374420531326905e-05}, {"id": 103, "seek": 66156, "start": 681.28, "end": 685.9599999999999, "text": " the direction you're looking so that you can know if the face if the triangle is facing", "tokens": [264, 3513, 291, 434, 1237, 370, 300, 291, 393, 458, 498, 264, 1851, 498, 264, 13369, 307, 7170], "temperature": 0.0, "avg_logprob": -0.15495972321412274, "compression_ratio": 2.0, "no_speech_prob": 5.3374420531326905e-05}, {"id": 104, "seek": 66156, "start": 685.9599999999999, "end": 690.52, "text": " you or not and then just don't bother drawing the ones that aren't facing you but yeah that's", "tokens": [291, 420, 406, 293, 550, 445, 500, 380, 8677, 6316, 264, 2306, 300, 3212, 380, 7170, 291, 457, 1338, 300, 311], "temperature": 0.0, "avg_logprob": -0.15495972321412274, "compression_ratio": 2.0, "no_speech_prob": 5.3374420531326905e-05}, {"id": 105, "seek": 69052, "start": 690.52, "end": 697.24, "text": " much it's just more maths so it adds more time and oh yeah get the occasional like really", "tokens": [709, 309, 311, 445, 544, 36287, 370, 309, 10860, 544, 565, 293, 1954, 1338, 483, 264, 31644, 411, 534], "temperature": 0.0, "avg_logprob": -0.1346080214888961, "compression_ratio": 1.6743119266055047, "no_speech_prob": 2.968750413856469e-05}, {"id": 106, "seek": 69052, "start": 697.24, "end": 705.16, "text": " long frame and that coincides with a garbage collection I guess we'll talk a bit more about", "tokens": [938, 3920, 293, 300, 13001, 1875, 365, 257, 14150, 5765, 286, 2041, 321, 603, 751, 257, 857, 544, 466], "temperature": 0.0, "avg_logprob": -0.1346080214888961, "compression_ratio": 1.6743119266055047, "no_speech_prob": 2.968750413856469e-05}, {"id": 107, "seek": 69052, "start": 705.16, "end": 713.04, "text": " that in a bit yeah so like there's some really low hanging fruit things we can do to improve", "tokens": [300, 294, 257, 857, 1338, 370, 411, 456, 311, 512, 534, 2295, 8345, 6773, 721, 321, 393, 360, 281, 3470], "temperature": 0.0, "avg_logprob": -0.1346080214888961, "compression_ratio": 1.6743119266055047, "no_speech_prob": 2.968750413856469e-05}, {"id": 108, "seek": 69052, "start": 713.04, "end": 719.0, "text": " the performance initially which is basically amounts to being smarter about the algorithms", "tokens": [264, 3389, 9105, 597, 307, 1936, 11663, 281, 885, 20294, 466, 264, 14642], "temperature": 0.0, "avg_logprob": -0.1346080214888961, "compression_ratio": 1.6743119266055047, "no_speech_prob": 2.968750413856469e-05}, {"id": 109, "seek": 71900, "start": 719.0, "end": 724.08, "text": " we use we pre-calculate the normals instead of calculating them every frame which for", "tokens": [321, 764, 321, 659, 12, 9895, 2444, 473, 264, 2026, 1124, 2602, 295, 28258, 552, 633, 3920, 597, 337], "temperature": 0.0, "avg_logprob": -0.14677081050643, "compression_ratio": 1.7014218009478672, "no_speech_prob": 2.342136576771736e-05}, {"id": 110, "seek": 71900, "start": 724.08, "end": 732.12, "text": " like static model like this makes total sense and yeah avoid doing the perspective division", "tokens": [411, 13437, 2316, 411, 341, 1669, 3217, 2020, 293, 1338, 5042, 884, 264, 4585, 10044], "temperature": 0.0, "avg_logprob": -0.14677081050643, "compression_ratio": 1.7014218009478672, "no_speech_prob": 2.342136576771736e-05}, {"id": 111, "seek": 71900, "start": 732.12, "end": 739.04, "text": " if we can help it because it's like part of the I'd implemented it as part of the matrix", "tokens": [498, 321, 393, 854, 309, 570, 309, 311, 411, 644, 295, 264, 286, 1116, 12270, 309, 382, 644, 295, 264, 8141], "temperature": 0.0, "avg_logprob": -0.14677081050643, "compression_ratio": 1.7014218009478672, "no_speech_prob": 2.342136576771736e-05}, {"id": 112, "seek": 71900, "start": 739.04, "end": 746.22, "text": " multiplication process and usually it's a and usually it's a no op unless you're multiplying", "tokens": [27290, 1399, 293, 2673, 309, 311, 257, 293, 2673, 309, 311, 257, 572, 999, 5969, 291, 434, 30955], "temperature": 0.0, "avg_logprob": -0.14677081050643, "compression_ratio": 1.7014218009478672, "no_speech_prob": 2.342136576771736e-05}, {"id": 113, "seek": 74622, "start": 746.22, "end": 753.08, "text": " it by the perspective matrix and only then is it doing something so we can just avoid", "tokens": [309, 538, 264, 4585, 8141, 293, 787, 550, 307, 309, 884, 746, 370, 321, 393, 445, 5042], "temperature": 0.0, "avg_logprob": -0.1066516467503139, "compression_ratio": 1.7009803921568627, "no_speech_prob": 1.9174549379386008e-05}, {"id": 114, "seek": 74622, "start": 753.08, "end": 760.64, "text": " doing those those divisions at all on you know on every vertex in every face in every", "tokens": [884, 729, 729, 24328, 412, 439, 322, 291, 458, 322, 633, 28162, 294, 633, 1851, 294, 633], "temperature": 0.0, "avg_logprob": -0.1066516467503139, "compression_ratio": 1.7009803921568627, "no_speech_prob": 1.9174549379386008e-05}, {"id": 115, "seek": 74622, "start": 760.64, "end": 766.44, "text": " frame that's quite a lot of time saved but it does mean I can add more things to it and", "tokens": [3920, 300, 311, 1596, 257, 688, 295, 565, 6624, 457, 309, 775, 914, 286, 393, 909, 544, 721, 281, 309, 293], "temperature": 0.0, "avg_logprob": -0.1066516467503139, "compression_ratio": 1.7009803921568627, "no_speech_prob": 1.9174549379386008e-05}, {"id": 116, "seek": 74622, "start": 766.44, "end": 771.5600000000001, "text": " make it do extra work like you know add as rudimentary lighting model and make the cube", "tokens": [652, 309, 360, 2857, 589, 411, 291, 458, 909, 382, 32109, 2328, 822, 9577, 2316, 293, 652, 264, 13728], "temperature": 0.0, "avg_logprob": -0.1066516467503139, "compression_ratio": 1.7009803921568627, "no_speech_prob": 1.9174549379386008e-05}, {"id": 117, "seek": 77156, "start": 771.56, "end": 784.8399999999999, "text": " nice looking by adding shading and whatnot and the what I'm trying to do basically is", "tokens": [1481, 1237, 538, 5127, 30556, 293, 25882, 293, 264, 437, 286, 478, 1382, 281, 360, 1936, 307], "temperature": 0.0, "avg_logprob": -0.10702506049734647, "compression_ratio": 1.5574712643678161, "no_speech_prob": 7.0479645728482865e-06}, {"id": 118, "seek": 77156, "start": 784.8399999999999, "end": 792.2399999999999, "text": " to keep the rendering time below 100 milliseconds as well because that seems like a good target", "tokens": [281, 1066, 264, 22407, 565, 2507, 2319, 34184, 382, 731, 570, 300, 2544, 411, 257, 665, 3779], "temperature": 0.0, "avg_logprob": -0.10702506049734647, "compression_ratio": 1.5574712643678161, "no_speech_prob": 7.0479645728482865e-06}, {"id": 119, "seek": 77156, "start": 792.2399999999999, "end": 798.16, "text": " to have if I can do that then I get like a reasonable performance of 10 frames per second", "tokens": [281, 362, 498, 286, 393, 360, 300, 550, 286, 483, 411, 257, 10585, 3389, 295, 1266, 12083, 680, 1150], "temperature": 0.0, "avg_logprob": -0.10702506049734647, "compression_ratio": 1.5574712643678161, "no_speech_prob": 7.0479645728482865e-06}, {"id": 120, "seek": 79816, "start": 798.16, "end": 806.92, "text": " and so this is although this is this works well that's within that target it's close", "tokens": [293, 370, 341, 307, 4878, 341, 307, 341, 1985, 731, 300, 311, 1951, 300, 3779, 309, 311, 1998], "temperature": 0.0, "avg_logprob": -0.10196229389735631, "compression_ratio": 1.6211180124223603, "no_speech_prob": 3.06559304590337e-05}, {"id": 121, "seek": 79816, "start": 806.92, "end": 813.76, "text": " to that target so I want to try something a bit more complex so I download a model of", "tokens": [281, 300, 3779, 370, 286, 528, 281, 853, 746, 257, 857, 544, 3997, 370, 286, 5484, 257, 2316, 295], "temperature": 0.0, "avg_logprob": -0.10196229389735631, "compression_ratio": 1.6211180124223603, "no_speech_prob": 3.06559304590337e-05}, {"id": 122, "seek": 79816, "start": 813.76, "end": 823.36, "text": " the industry standard teapot and try and render that this is about 240 faces 240 triangles", "tokens": [264, 3518, 3832, 535, 569, 310, 293, 853, 293, 15529, 300, 341, 307, 466, 26837, 8475, 26837, 29896], "temperature": 0.0, "avg_logprob": -0.10196229389735631, "compression_ratio": 1.6211180124223603, "no_speech_prob": 3.06559304590337e-05}, {"id": 123, "seek": 82336, "start": 823.36, "end": 832.04, "text": " and this obviously completely destroyed my 100 millisecond time limit so I've got to", "tokens": [293, 341, 2745, 2584, 8937, 452, 2319, 27940, 18882, 565, 4948, 370, 286, 600, 658, 281], "temperature": 0.0, "avg_logprob": -0.18907481809205648, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.678682176338043e-05}, {"id": 124, "seek": 82336, "start": 832.04, "end": 838.08, "text": " think of I had to think of more ways to make this faster and the obvious way is to rewrite", "tokens": [519, 295, 286, 632, 281, 519, 295, 544, 2098, 281, 652, 341, 4663, 293, 264, 6322, 636, 307, 281, 28132], "temperature": 0.0, "avg_logprob": -0.18907481809205648, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.678682176338043e-05}, {"id": 125, "seek": 82336, "start": 838.08, "end": 846.12, "text": " all the hottest math functions in C as a micro Python native module the two ones that are", "tokens": [439, 264, 32780, 5221, 6828, 294, 383, 382, 257, 4532, 15329, 8470, 10088, 264, 732, 2306, 300, 366], "temperature": 0.0, "avg_logprob": -0.18907481809205648, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.678682176338043e-05}, {"id": 126, "seek": 82336, "start": 846.12, "end": 851.12, "text": " called the most often are like the matrix vector matrix multiplying method and the dot", "tokens": [1219, 264, 881, 2049, 366, 411, 264, 8141, 8062, 8141, 30955, 3170, 293, 264, 5893], "temperature": 0.0, "avg_logprob": -0.18907481809205648, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.678682176338043e-05}, {"id": 127, "seek": 85112, "start": 851.12, "end": 861.8, "text": " product method and yeah you can see that more than cuts the time in half and with the success", "tokens": [1674, 3170, 293, 1338, 291, 393, 536, 300, 544, 813, 9992, 264, 565, 294, 1922, 293, 365, 264, 2245], "temperature": 0.0, "avg_logprob": -0.13872329048488452, "compression_ratio": 1.6140350877192982, "no_speech_prob": 9.989898899220861e-06}, {"id": 128, "seek": 85112, "start": 861.8, "end": 871.2, "text": " of that it's pretty clear I should write rewrite all of the math in C because you know if I've", "tokens": [295, 300, 309, 311, 1238, 1850, 286, 820, 2464, 28132, 439, 295, 264, 5221, 294, 383, 570, 291, 458, 498, 286, 600], "temperature": 0.0, "avg_logprob": -0.13872329048488452, "compression_ratio": 1.6140350877192982, "no_speech_prob": 9.989898899220861e-06}, {"id": 129, "seek": 85112, "start": 871.2, "end": 875.48, "text": " got the bonnet up I might as well and but that you know that brings the time right down", "tokens": [658, 264, 4428, 7129, 493, 286, 1062, 382, 731, 293, 457, 300, 291, 458, 300, 5607, 264, 565, 558, 760], "temperature": 0.0, "avg_logprob": -0.13872329048488452, "compression_ratio": 1.6140350877192982, "no_speech_prob": 9.989898899220861e-06}, {"id": 130, "seek": 87548, "start": 875.48, "end": 884.72, "text": " to a glorious glorious glorious six frames per second but yeah like as a general strategy", "tokens": [281, 257, 24026, 24026, 24026, 2309, 12083, 680, 1150, 457, 1338, 411, 382, 257, 2674, 5206], "temperature": 0.0, "avg_logprob": -0.17824689168778676, "compression_ratio": 1.6, "no_speech_prob": 5.560598310694331e-06}, {"id": 131, "seek": 87548, "start": 884.72, "end": 890.4, "text": " if you find yourself calling a method you know 12 1200 times a frame it's probably a good", "tokens": [498, 291, 915, 1803, 5141, 257, 3170, 291, 458, 2272, 29139, 1413, 257, 3920, 309, 311, 1391, 257, 665], "temperature": 0.0, "avg_logprob": -0.17824689168778676, "compression_ratio": 1.6, "no_speech_prob": 5.560598310694331e-06}, {"id": 132, "seek": 87548, "start": 890.4, "end": 903.48, "text": " target to be to be pushed down into the native layer so yeah a note on writing a native code", "tokens": [3779, 281, 312, 281, 312, 9152, 760, 666, 264, 8470, 4583, 370, 1338, 257, 3637, 322, 3579, 257, 8470, 3089], "temperature": 0.0, "avg_logprob": -0.17824689168778676, "compression_ratio": 1.6, "no_speech_prob": 5.560598310694331e-06}, {"id": 133, "seek": 90348, "start": 903.48, "end": 911.2, "text": " for micro Python there's really two ways of doing it there's the what is called the external", "tokens": [337, 4532, 15329, 456, 311, 534, 732, 2098, 295, 884, 309, 456, 311, 264, 437, 307, 1219, 264, 8320], "temperature": 0.0, "avg_logprob": -0.15697852900770845, "compression_ratio": 1.6167664670658684, "no_speech_prob": 4.043159424327314e-05}, {"id": 134, "seek": 90348, "start": 911.2, "end": 920.44, "text": " C modules which is basically C code that you write there's a module exposed to the Python", "tokens": [383, 16679, 597, 307, 1936, 383, 3089, 300, 291, 2464, 456, 311, 257, 10088, 9495, 281, 264, 15329], "temperature": 0.0, "avg_logprob": -0.15697852900770845, "compression_ratio": 1.6167664670658684, "no_speech_prob": 4.043159424327314e-05}, {"id": 135, "seek": 90348, "start": 920.44, "end": 928.96, "text": " runtime those are compiled directly into the firmware which is a bit suboptimal because", "tokens": [34474, 729, 366, 36548, 3838, 666, 264, 30289, 597, 307, 257, 857, 1422, 5747, 10650, 570], "temperature": 0.0, "avg_logprob": -0.15697852900770845, "compression_ratio": 1.6167664670658684, "no_speech_prob": 4.043159424327314e-05}, {"id": 136, "seek": 92896, "start": 928.96, "end": 936.2, "text": " I yeah it would be nice if I didn't require other people who have these devices to reflash", "tokens": [286, 1338, 309, 576, 312, 1481, 498, 286, 994, 380, 3651, 661, 561, 567, 362, 613, 5759, 281, 1895, 75, 1299], "temperature": 0.0, "avg_logprob": -0.17454278325460043, "compression_ratio": 1.6409090909090909, "no_speech_prob": 1.7952061170944944e-05}, {"id": 137, "seek": 92896, "start": 936.2, "end": 942.52, "text": " the firmware every time I changed this program so the other way of doing it is to write what", "tokens": [264, 30289, 633, 565, 286, 3105, 341, 1461, 370, 264, 661, 636, 295, 884, 309, 307, 281, 2464, 437], "temperature": 0.0, "avg_logprob": -0.17454278325460043, "compression_ratio": 1.6409090909090909, "no_speech_prob": 1.7952061170944944e-05}, {"id": 138, "seek": 92896, "start": 942.52, "end": 951.2, "text": " they call a native module which allows your application to supply native code as an MPY", "tokens": [436, 818, 257, 8470, 10088, 597, 4045, 428, 3861, 281, 5847, 8470, 3089, 382, 364, 14146, 56], "temperature": 0.0, "avg_logprob": -0.17454278325460043, "compression_ratio": 1.6409090909090909, "no_speech_prob": 1.7952061170944944e-05}, {"id": 139, "seek": 92896, "start": 951.2, "end": 956.08, "text": " file and then that can be dynamically loaded by your application at runtime which is much", "tokens": [3991, 293, 550, 300, 393, 312, 43492, 13210, 538, 428, 3861, 412, 34474, 597, 307, 709], "temperature": 0.0, "avg_logprob": -0.17454278325460043, "compression_ratio": 1.6409090909090909, "no_speech_prob": 1.7952061170944944e-05}, {"id": 140, "seek": 95608, "start": 956.08, "end": 959.88, "text": " nicer the way of doing it so obviously that's what I wanted to do but I did come across", "tokens": [22842, 264, 636, 295, 884, 309, 370, 2745, 300, 311, 437, 286, 1415, 281, 360, 457, 286, 630, 808, 2108], "temperature": 0.0, "avg_logprob": -0.1585249844719382, "compression_ratio": 1.6126126126126126, "no_speech_prob": 6.0874659538967535e-05}, {"id": 141, "seek": 95608, "start": 959.88, "end": 967.0400000000001, "text": " problems when I tried to build the native code because I'd used a floating point division", "tokens": [2740, 562, 286, 3031, 281, 1322, 264, 8470, 3089, 570, 286, 1116, 1143, 257, 12607, 935, 10044], "temperature": 0.0, "avg_logprob": -0.1585249844719382, "compression_ratio": 1.6126126126126126, "no_speech_prob": 6.0874659538967535e-05}, {"id": 142, "seek": 95608, "start": 967.0400000000001, "end": 973.88, "text": " in there for the perspective division step of the pipeline I got this problem which is", "tokens": [294, 456, 337, 264, 4585, 10044, 1823, 295, 264, 15517, 286, 658, 341, 1154, 597, 307], "temperature": 0.0, "avg_logprob": -0.1585249844719382, "compression_ratio": 1.6126126126126126, "no_speech_prob": 6.0874659538967535e-05}, {"id": 143, "seek": 95608, "start": 973.88, "end": 984.12, "text": " a linker error from the expressive tool chain for the ESP32 I'd love to know why this happens", "tokens": [257, 2113, 260, 6713, 490, 264, 40189, 2290, 5021, 337, 264, 12564, 47, 11440, 286, 1116, 959, 281, 458, 983, 341, 2314], "temperature": 0.0, "avg_logprob": -0.1585249844719382, "compression_ratio": 1.6126126126126126, "no_speech_prob": 6.0874659538967535e-05}, {"id": 144, "seek": 98412, "start": 984.12, "end": 988.24, "text": " and if anyone from expressive is here I'd love to know if it's fixed in a newer version", "tokens": [293, 498, 2878, 490, 40189, 307, 510, 286, 1116, 959, 281, 458, 498, 309, 311, 6806, 294, 257, 17628, 3037], "temperature": 0.0, "avg_logprob": -0.11639197831301346, "compression_ratio": 1.661596958174905, "no_speech_prob": 3.368604666320607e-05}, {"id": 145, "seek": 98412, "start": 988.24, "end": 992.2, "text": " as well but it seems like it can't link this software implementation of floating point", "tokens": [382, 731, 457, 309, 2544, 411, 309, 393, 380, 2113, 341, 4722, 11420, 295, 12607, 935], "temperature": 0.0, "avg_logprob": -0.11639197831301346, "compression_ratio": 1.661596958174905, "no_speech_prob": 3.368604666320607e-05}, {"id": 146, "seek": 98412, "start": 992.2, "end": 1000.92, "text": " division so obviously what I did was I downloaded the source for their tool chain and found", "tokens": [10044, 370, 2745, 437, 286, 630, 390, 286, 21748, 264, 4009, 337, 641, 2290, 5021, 293, 1352], "temperature": 0.0, "avg_logprob": -0.11639197831301346, "compression_ratio": 1.661596958174905, "no_speech_prob": 3.368604666320607e-05}, {"id": 147, "seek": 98412, "start": 1000.92, "end": 1006.96, "text": " the assembly implementation of this method to add into my project which also didn't", "tokens": [264, 12103, 11420, 295, 341, 3170, 281, 909, 666, 452, 1716, 597, 611, 994, 380], "temperature": 0.0, "avg_logprob": -0.11639197831301346, "compression_ratio": 1.661596958174905, "no_speech_prob": 3.368604666320607e-05}, {"id": 148, "seek": 98412, "start": 1006.96, "end": 1011.5600000000001, "text": " work the micro Python build system wasn't prepared to accept that but that was an easy", "tokens": [589, 264, 4532, 15329, 1322, 1185, 2067, 380, 4927, 281, 3241, 300, 457, 300, 390, 364, 1858], "temperature": 0.0, "avg_logprob": -0.11639197831301346, "compression_ratio": 1.661596958174905, "no_speech_prob": 3.368604666320607e-05}, {"id": 149, "seek": 101156, "start": 1011.56, "end": 1015.52, "text": " fix and that was actually the first change I got accepted into micro Python they were", "tokens": [3191, 293, 300, 390, 767, 264, 700, 1319, 286, 658, 9035, 666, 4532, 15329, 436, 645], "temperature": 0.0, "avg_logprob": -0.16385110219319662, "compression_ratio": 1.7073170731707317, "no_speech_prob": 3.3981756132561713e-05}, {"id": 150, "seek": 101156, "start": 1015.52, "end": 1021.1199999999999, "text": " very good they're very good at or in my experience they're very good at accepting patches and", "tokens": [588, 665, 436, 434, 588, 665, 412, 420, 294, 452, 1752, 436, 434, 588, 665, 412, 17391, 26531, 293], "temperature": 0.0, "avg_logprob": -0.16385110219319662, "compression_ratio": 1.7073170731707317, "no_speech_prob": 3.3981756132561713e-05}, {"id": 151, "seek": 101156, "start": 1021.1199999999999, "end": 1029.1599999999999, "text": " then once I got that building I got it to just cause my application to crash I'm not", "tokens": [550, 1564, 286, 658, 300, 2390, 286, 658, 309, 281, 445, 3082, 452, 3861, 281, 8252, 286, 478, 406], "temperature": 0.0, "avg_logprob": -0.16385110219319662, "compression_ratio": 1.7073170731707317, "no_speech_prob": 3.3981756132561713e-05}, {"id": 152, "seek": 101156, "start": 1029.1599999999999, "end": 1036.48, "text": " sure why this happens but there seems to be like a reference to the native stuff that", "tokens": [988, 983, 341, 2314, 457, 456, 2544, 281, 312, 411, 257, 6408, 281, 264, 8470, 1507, 300], "temperature": 0.0, "avg_logprob": -0.16385110219319662, "compression_ratio": 1.7073170731707317, "no_speech_prob": 3.3981756132561713e-05}, {"id": 153, "seek": 103648, "start": 1036.48, "end": 1043.44, "text": " gets collected erroneously by the garbage collection and I spent a lot of time like", "tokens": [2170, 11087, 1189, 26446, 5098, 538, 264, 14150, 5765, 293, 286, 4418, 257, 688, 295, 565, 411], "temperature": 0.0, "avg_logprob": -0.11142860970846037, "compression_ratio": 1.6556603773584906, "no_speech_prob": 1.7668624423095025e-05}, {"id": 154, "seek": 103648, "start": 1043.44, "end": 1049.1200000000001, "text": " trying to reduce my object allocations you know in the frames but all that did was just", "tokens": [1382, 281, 5407, 452, 2657, 12660, 763, 291, 458, 294, 264, 12083, 457, 439, 300, 630, 390, 445], "temperature": 0.0, "avg_logprob": -0.11142860970846037, "compression_ratio": 1.6556603773584906, "no_speech_prob": 1.7668624423095025e-05}, {"id": 155, "seek": 103648, "start": 1049.1200000000001, "end": 1058.28, "text": " like push out the crash to further in the future so you know I had to settle for compiling", "tokens": [411, 2944, 484, 264, 8252, 281, 3052, 294, 264, 2027, 370, 291, 458, 286, 632, 281, 11852, 337, 715, 4883], "temperature": 0.0, "avg_logprob": -0.11142860970846037, "compression_ratio": 1.6556603773584906, "no_speech_prob": 1.7668624423095025e-05}, {"id": 156, "seek": 103648, "start": 1058.28, "end": 1065.1200000000001, "text": " my maths functions directly into the firmware there's some other things I did to try and", "tokens": [452, 36287, 6828, 3838, 666, 264, 30289, 456, 311, 512, 661, 721, 286, 630, 281, 853, 293], "temperature": 0.0, "avg_logprob": -0.11142860970846037, "compression_ratio": 1.6556603773584906, "no_speech_prob": 1.7668624423095025e-05}, {"id": 157, "seek": 106512, "start": 1065.12, "end": 1071.2399999999998, "text": " make it faster the big one is trying to reduce object insatiations it's super costly in", "tokens": [652, 309, 4663, 264, 955, 472, 307, 1382, 281, 5407, 2657, 1028, 6908, 763, 309, 311, 1687, 28328, 294], "temperature": 0.0, "avg_logprob": -0.20904103536454458, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.00015424525190610439}, {"id": 158, "seek": 106512, "start": 1071.2399999999998, "end": 1079.8799999999999, "text": " Python and wherever you can pre-allocate like lists and arrays and things and then just", "tokens": [15329, 293, 8660, 291, 393, 659, 12, 336, 42869, 411, 14511, 293, 41011, 293, 721, 293, 550, 445], "temperature": 0.0, "avg_logprob": -0.20904103536454458, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.00015424525190610439}, {"id": 159, "seek": 106512, "start": 1079.8799999999999, "end": 1090.84, "text": " reuse them I initially wanted to have like a lot of my classes to be totally immutable", "tokens": [26225, 552, 286, 9105, 1415, 281, 362, 411, 257, 688, 295, 452, 5359, 281, 312, 3879, 3397, 32148], "temperature": 0.0, "avg_logprob": -0.20904103536454458, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.00015424525190610439}, {"id": 160, "seek": 109084, "start": 1090.84, "end": 1097.0, "text": " as a good programmer I am but they just totally wasn't feasible so I just you know you just", "tokens": [382, 257, 665, 32116, 286, 669, 457, 436, 445, 3879, 2067, 380, 26648, 370, 286, 445, 291, 458, 291, 445], "temperature": 0.0, "avg_logprob": -0.17626479734857398, "compression_ratio": 1.6651162790697673, "no_speech_prob": 6.279806257225573e-05}, {"id": 161, "seek": 109084, "start": 1097.0, "end": 1103.12, "text": " have to mutate when you do calculations on your vertices just mutate one of the operands", "tokens": [362, 281, 5839, 473, 562, 291, 360, 20448, 322, 428, 32053, 445, 5839, 473, 472, 295, 264, 2208, 2967], "temperature": 0.0, "avg_logprob": -0.17626479734857398, "compression_ratio": 1.6651162790697673, "no_speech_prob": 6.279806257225573e-05}, {"id": 162, "seek": 109084, "start": 1103.12, "end": 1111.6399999999999, "text": " and send it back that way you can also the other thing I found that saved some time was", "tokens": [293, 2845, 309, 646, 300, 636, 291, 393, 611, 264, 661, 551, 286, 1352, 300, 6624, 512, 565, 390], "temperature": 0.0, "avg_logprob": -0.17626479734857398, "compression_ratio": 1.6651162790697673, "no_speech_prob": 6.279806257225573e-05}, {"id": 163, "seek": 109084, "start": 1111.6399999999999, "end": 1116.28, "text": " reducing crossing reducing the amount of times that we cross from Python into native code", "tokens": [12245, 14712, 12245, 264, 2372, 295, 1413, 300, 321, 3278, 490, 15329, 666, 8470, 3089], "temperature": 0.0, "avg_logprob": -0.17626479734857398, "compression_ratio": 1.6651162790697673, "no_speech_prob": 6.279806257225573e-05}, {"id": 164, "seek": 111628, "start": 1116.28, "end": 1123.56, "text": " and back again I found I was doing like lots of the same operation to vertices and matrices", "tokens": [293, 646, 797, 286, 1352, 286, 390, 884, 411, 3195, 295, 264, 912, 6916, 281, 32053, 293, 32284], "temperature": 0.0, "avg_logprob": -0.13665992831006463, "compression_ratio": 1.669811320754717, "no_speech_prob": 7.818047015462071e-05}, {"id": 165, "seek": 111628, "start": 1123.56, "end": 1128.8799999999999, "text": " so if I could just send them all as one batch in a single function call into the native", "tokens": [370, 498, 286, 727, 445, 2845, 552, 439, 382, 472, 15245, 294, 257, 2167, 2445, 818, 666, 264, 8470], "temperature": 0.0, "avg_logprob": -0.13665992831006463, "compression_ratio": 1.669811320754717, "no_speech_prob": 7.818047015462071e-05}, {"id": 166, "seek": 111628, "start": 1128.8799999999999, "end": 1134.16, "text": " side then that made it perform a lot quicker I think there's a lot of function and stack", "tokens": [1252, 550, 300, 1027, 309, 2042, 257, 688, 16255, 286, 519, 456, 311, 257, 688, 295, 2445, 293, 8630], "temperature": 0.0, "avg_logprob": -0.13665992831006463, "compression_ratio": 1.669811320754717, "no_speech_prob": 7.818047015462071e-05}, {"id": 167, "seek": 111628, "start": 1134.16, "end": 1142.24, "text": " manipulation overhead there that you save and also pass arrays and not lists into the", "tokens": [26475, 19922, 456, 300, 291, 3155, 293, 611, 1320, 41011, 293, 406, 14511, 666, 264], "temperature": 0.0, "avg_logprob": -0.13665992831006463, "compression_ratio": 1.669811320754717, "no_speech_prob": 7.818047015462071e-05}, {"id": 168, "seek": 114224, "start": 1142.24, "end": 1146.96, "text": " native functions as well especially for this kind of stuff where we know that the data", "tokens": [8470, 6828, 382, 731, 2318, 337, 341, 733, 295, 1507, 689, 321, 458, 300, 264, 1412], "temperature": 0.0, "avg_logprob": -0.18474775372129498, "compression_ratio": 1.785425101214575, "no_speech_prob": 1.662010072323028e-05}, {"id": 169, "seek": 114224, "start": 1146.96, "end": 1153.48, "text": " that we're passing our floats or whatever you know ahead of time what type is in your", "tokens": [300, 321, 434, 8437, 527, 37878, 420, 2035, 291, 458, 2286, 295, 565, 437, 2010, 307, 294, 428], "temperature": 0.0, "avg_logprob": -0.18474775372129498, "compression_ratio": 1.785425101214575, "no_speech_prob": 1.662010072323028e-05}, {"id": 170, "seek": 114224, "start": 1153.48, "end": 1157.44, "text": " array which means you can make some assumptions that my Python can't make and when and when", "tokens": [10225, 597, 1355, 291, 393, 652, 512, 17695, 300, 452, 15329, 393, 380, 652, 293, 562, 293, 562], "temperature": 0.0, "avg_logprob": -0.18474775372129498, "compression_ratio": 1.785425101214575, "no_speech_prob": 1.662010072323028e-05}, {"id": 171, "seek": 114224, "start": 1157.44, "end": 1165.08, "text": " you manipulate this the data objects in a native side you can like skip a bunch of like", "tokens": [291, 20459, 341, 264, 1412, 6565, 294, 257, 8470, 1252, 291, 393, 411, 10023, 257, 3840, 295, 411], "temperature": 0.0, "avg_logprob": -0.18474775372129498, "compression_ratio": 1.785425101214575, "no_speech_prob": 1.662010072323028e-05}, {"id": 172, "seek": 114224, "start": 1165.08, "end": 1171.84, "text": " type safe stuff you can just write directly to the to the data structure which is useful", "tokens": [2010, 3273, 1507, 291, 393, 445, 2464, 3838, 281, 264, 281, 264, 1412, 3877, 597, 307, 4420], "temperature": 0.0, "avg_logprob": -0.18474775372129498, "compression_ratio": 1.785425101214575, "no_speech_prob": 1.662010072323028e-05}, {"id": 173, "seek": 117184, "start": 1171.84, "end": 1177.4399999999998, "text": " and also I this wrong surprise me as well that I well I don't know if it's surprising", "tokens": [293, 611, 286, 341, 2085, 6365, 385, 382, 731, 300, 286, 731, 286, 500, 380, 458, 498, 309, 311, 8830], "temperature": 0.0, "avg_logprob": -0.2673931121826172, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00010659407416824251}, {"id": 174, "seek": 117184, "start": 1177.4399999999998, "end": 1186.24, "text": " maybe it's obvious to people who are veteran Python Easter's but I didn't expect to a native", "tokens": [1310, 309, 311, 6322, 281, 561, 567, 366, 18324, 15329, 9403, 311, 457, 286, 994, 380, 2066, 281, 257, 8470], "temperature": 0.0, "avg_logprob": -0.2673931121826172, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00010659407416824251}, {"id": 175, "seek": 117184, "start": 1186.24, "end": 1195.1999999999998, "text": " the libc qsort function to be so much faster than the sort function in Python but I was", "tokens": [264, 22854, 66, 9505, 82, 477, 2445, 281, 312, 370, 709, 4663, 813, 264, 1333, 2445, 294, 15329, 457, 286, 390], "temperature": 0.0, "avg_logprob": -0.2673931121826172, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.00010659407416824251}, {"id": 176, "seek": 119520, "start": 1195.2, "end": 1202.8, "text": " if you look at the if you look at this this picture here you can see that some parts of", "tokens": [498, 291, 574, 412, 264, 498, 291, 574, 412, 341, 341, 3036, 510, 291, 393, 536, 300, 512, 3166, 295], "temperature": 0.0, "avg_logprob": -0.1771597963698367, "compression_ratio": 1.9217877094972067, "no_speech_prob": 2.9235907277325168e-05}, {"id": 177, "seek": 119520, "start": 1202.8, "end": 1207.72, "text": " the teapot are drawn on top of that should be occluded drawn on top of the body of the", "tokens": [264, 535, 569, 310, 366, 10117, 322, 1192, 295, 300, 820, 312, 2678, 44412, 10117, 322, 1192, 295, 264, 1772, 295, 264], "temperature": 0.0, "avg_logprob": -0.1771597963698367, "compression_ratio": 1.9217877094972067, "no_speech_prob": 2.9235907277325168e-05}, {"id": 178, "seek": 119520, "start": 1207.72, "end": 1215.04, "text": " teapot so what I had to do was Z sort the faces so that we draw the faces from from", "tokens": [535, 569, 310, 370, 437, 286, 632, 281, 360, 390, 1176, 1333, 264, 8475, 370, 300, 321, 2642, 264, 8475, 490, 490], "temperature": 0.0, "avg_logprob": -0.1771597963698367, "compression_ratio": 1.9217877094972067, "no_speech_prob": 2.9235907277325168e-05}, {"id": 179, "seek": 119520, "start": 1215.04, "end": 1221.24, "text": " back to front and that's what I was doing I was what I was using the list sort method", "tokens": [646, 281, 1868, 293, 300, 311, 437, 286, 390, 884, 286, 390, 437, 286, 390, 1228, 264, 1329, 1333, 3170], "temperature": 0.0, "avg_logprob": -0.1771597963698367, "compression_ratio": 1.9217877094972067, "no_speech_prob": 2.9235907277325168e-05}, {"id": 180, "seek": 122124, "start": 1221.24, "end": 1227.16, "text": " for here but just like implementing this sorting this face sorting as a native function as", "tokens": [337, 510, 457, 445, 411, 18114, 341, 32411, 341, 1851, 32411, 382, 257, 8470, 2445, 382], "temperature": 0.0, "avg_logprob": -0.16209935538376433, "compression_ratio": 1.7821782178217822, "no_speech_prob": 2.0796889657503925e-05}, {"id": 181, "seek": 122124, "start": 1227.16, "end": 1235.48, "text": " well was like as it says it's 100 times faster and the other thing that was made a measurable", "tokens": [731, 390, 411, 382, 309, 1619, 309, 311, 2319, 1413, 4663, 293, 264, 661, 551, 300, 390, 1027, 257, 43615], "temperature": 0.0, "avg_logprob": -0.16209935538376433, "compression_ratio": 1.7821782178217822, "no_speech_prob": 2.0796889657503925e-05}, {"id": 182, "seek": 122124, "start": 1235.48, "end": 1241.16, "text": " difference as well was locally caching object references in your functions as well so like", "tokens": [2649, 382, 731, 390, 16143, 269, 2834, 2657, 15400, 294, 428, 6828, 382, 731, 370, 411], "temperature": 0.0, "avg_logprob": -0.16209935538376433, "compression_ratio": 1.7821782178217822, "no_speech_prob": 2.0796889657503925e-05}, {"id": 183, "seek": 122124, "start": 1241.16, "end": 1248.16, "text": " instead of if you're using an object value more than once instead of doing self food", "tokens": [2602, 295, 498, 291, 434, 1228, 364, 2657, 2158, 544, 813, 1564, 2602, 295, 884, 2698, 1755], "temperature": 0.0, "avg_logprob": -0.16209935538376433, "compression_ratio": 1.7821782178217822, "no_speech_prob": 2.0796889657503925e-05}, {"id": 184, "seek": 124816, "start": 1248.16, "end": 1254.0800000000002, "text": " self food self food just have yeah just created a local reference a local variable in their", "tokens": [2698, 1755, 2698, 1755, 445, 362, 1338, 445, 2942, 257, 2654, 6408, 257, 2654, 7006, 294, 641], "temperature": 0.0, "avg_logprob": -0.21125815709431967, "compression_ratio": 1.6918238993710693, "no_speech_prob": 1.3467166354530491e-05}, {"id": 185, "seek": 124816, "start": 1254.0800000000002, "end": 1260.28, "text": " function and use that instead so there's some like dereferencing overheads there that is", "tokens": [2445, 293, 764, 300, 2602, 370, 456, 311, 512, 411, 15969, 612, 13644, 19922, 82, 456, 300, 307], "temperature": 0.0, "avg_logprob": -0.21125815709431967, "compression_ratio": 1.6918238993710693, "no_speech_prob": 1.3467166354530491e-05}, {"id": 186, "seek": 124816, "start": 1260.28, "end": 1270.88, "text": " quite significant that we're saving and so after applying all of this sort of stuff this", "tokens": [1596, 4776, 300, 321, 434, 6816, 293, 370, 934, 9275, 439, 295, 341, 1333, 295, 1507, 341], "temperature": 0.0, "avg_logprob": -0.21125815709431967, "compression_ratio": 1.6918238993710693, "no_speech_prob": 1.3467166354530491e-05}, {"id": 187, "seek": 127088, "start": 1270.88, "end": 1279.48, "text": " is the final result or the results so far I'm pretty happy with it getting the teapot", "tokens": [307, 264, 2572, 1874, 420, 264, 3542, 370, 1400, 286, 478, 1238, 2055, 365, 309, 1242, 264, 535, 569, 310], "temperature": 0.0, "avg_logprob": -0.18004441815753316, "compression_ratio": 1.435483870967742, "no_speech_prob": 2.5186529455822892e-05}, {"id": 188, "seek": 127088, "start": 1279.48, "end": 1297.5200000000002, "text": " model down to under 100 milliseconds per frame was really pleasing and yeah I'm pretty happy", "tokens": [2316, 760, 281, 833, 2319, 34184, 680, 3920, 390, 534, 32798, 293, 1338, 286, 478, 1238, 2055], "temperature": 0.0, "avg_logprob": -0.18004441815753316, "compression_ratio": 1.435483870967742, "no_speech_prob": 2.5186529455822892e-05}, {"id": 189, "seek": 129752, "start": 1297.52, "end": 1309.08, "text": " with the performance so what can this be used for honestly this was a this this was just", "tokens": [365, 264, 3389, 370, 437, 393, 341, 312, 1143, 337, 6095, 341, 390, 257, 341, 341, 390, 445], "temperature": 0.0, "avg_logprob": -0.14044411977132162, "compression_ratio": 1.6049382716049383, "no_speech_prob": 5.4872274631634355e-05}, {"id": 190, "seek": 129752, "start": 1309.08, "end": 1314.84, "text": " a fun way to spend a few weekends after the festival had happened but you know it seems", "tokens": [257, 1019, 636, 281, 3496, 257, 1326, 23595, 934, 264, 12091, 632, 2011, 457, 291, 458, 309, 2544], "temperature": 0.0, "avg_logprob": -0.14044411977132162, "compression_ratio": 1.6049382716049383, "no_speech_prob": 5.4872274631634355e-05}, {"id": 191, "seek": 129752, "start": 1314.84, "end": 1321.32, "text": " to be performing enough the way you could do some kind of like small 3d game like a", "tokens": [281, 312, 10205, 1547, 264, 636, 291, 727, 360, 512, 733, 295, 411, 1359, 805, 67, 1216, 411, 257], "temperature": 0.0, "avg_logprob": -0.14044411977132162, "compression_ratio": 1.6049382716049383, "no_speech_prob": 5.4872274631634355e-05}, {"id": 192, "seek": 132132, "start": 1321.32, "end": 1327.56, "text": " lunar lander or something like that or you know make yourself a Jurassic Park style 3d", "tokens": [32581, 2117, 260, 420, 746, 411, 300, 420, 291, 458, 652, 1803, 257, 44730, 4964, 3758, 805, 67], "temperature": 0.0, "avg_logprob": -0.15028801212063084, "compression_ratio": 1.6129032258064515, "no_speech_prob": 7.008817919995636e-05}, {"id": 193, "seek": 132132, "start": 1327.56, "end": 1335.96, "text": " user interface for your home automation but really the chief lesson for me I think was", "tokens": [4195, 9226, 337, 428, 1280, 17769, 457, 534, 264, 9588, 6898, 337, 385, 286, 519, 390], "temperature": 0.0, "avg_logprob": -0.15028801212063084, "compression_ratio": 1.6129032258064515, "no_speech_prob": 7.008817919995636e-05}, {"id": 194, "seek": 132132, "start": 1335.96, "end": 1342.04, "text": " that the the best way to get involved with a project like micro python was to just start", "tokens": [300, 264, 264, 1151, 636, 281, 483, 3288, 365, 257, 1716, 411, 4532, 38797, 390, 281, 445, 722], "temperature": 0.0, "avg_logprob": -0.15028801212063084, "compression_ratio": 1.6129032258064515, "no_speech_prob": 7.008817919995636e-05}, {"id": 195, "seek": 132132, "start": 1342.04, "end": 1350.1599999999999, "text": " using it and eventually you come across some kind of limitation that probably your best", "tokens": [1228, 309, 293, 4728, 291, 808, 2108, 512, 733, 295, 27432, 300, 1391, 428, 1151], "temperature": 0.0, "avg_logprob": -0.15028801212063084, "compression_ratio": 1.6129032258064515, "no_speech_prob": 7.008817919995636e-05}, {"id": 196, "seek": 135016, "start": 1350.16, "end": 1356.68, "text": " place to overcome because you know you're the one who's trying to solve the problem", "tokens": [1081, 281, 10473, 570, 291, 458, 291, 434, 264, 472, 567, 311, 1382, 281, 5039, 264, 1154], "temperature": 0.0, "avg_logprob": -0.10961376825968425, "compression_ratio": 1.5903614457831325, "no_speech_prob": 6.183327059261501e-05}, {"id": 197, "seek": 135016, "start": 1356.68, "end": 1362.5600000000002, "text": " you've got the vested interest in it you have you know all of the information is currently", "tokens": [291, 600, 658, 264, 49317, 1179, 294, 309, 291, 362, 291, 458, 439, 295, 264, 1589, 307, 4362], "temperature": 0.0, "avg_logprob": -0.10961376825968425, "compression_ratio": 1.5903614457831325, "no_speech_prob": 6.183327059261501e-05}, {"id": 198, "seek": 135016, "start": 1362.5600000000002, "end": 1372.64, "text": " paged into your brain so yeah and then the the micro python people were extremely helpful", "tokens": [280, 2980, 666, 428, 3567, 370, 1338, 293, 550, 264, 264, 4532, 38797, 561, 645, 4664, 4961], "temperature": 0.0, "avg_logprob": -0.10961376825968425, "compression_ratio": 1.5903614457831325, "no_speech_prob": 6.183327059261501e-05}, {"id": 199, "seek": 137264, "start": 1372.64, "end": 1383.0800000000002, "text": " in helping me whip up whip my year contributions into shape so yeah thanks to them for helping", "tokens": [294, 4315, 385, 22377, 493, 22377, 452, 1064, 15725, 666, 3909, 370, 1338, 3231, 281, 552, 337, 4315], "temperature": 0.0, "avg_logprob": -0.14137143623538134, "compression_ratio": 1.4916666666666667, "no_speech_prob": 7.514424942201003e-05}, {"id": 200, "seek": 137264, "start": 1383.0800000000002, "end": 1397.64, "text": " me get involved in micro python and thanks to you for listening I can try and answer", "tokens": [385, 483, 3288, 294, 4532, 38797, 293, 3231, 281, 291, 337, 4764, 286, 393, 853, 293, 1867], "temperature": 0.0, "avg_logprob": -0.14137143623538134, "compression_ratio": 1.4916666666666667, "no_speech_prob": 7.514424942201003e-05}, {"id": 201, "seek": 139764, "start": 1397.64, "end": 1409.88, "text": " questions but I'm not super expert on anything I've been talking about hi and thanks for", "tokens": [1651, 457, 286, 478, 406, 1687, 5844, 322, 1340, 286, 600, 668, 1417, 466, 4879, 293, 3231, 337], "temperature": 0.0, "avg_logprob": -0.16458290815353394, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0008698434103280306}, {"id": 202, "seek": 139764, "start": 1409.88, "end": 1415.44, "text": " your talk I had a question about the ESP 2 that you were implementing on this did you", "tokens": [428, 751, 286, 632, 257, 1168, 466, 264, 12564, 47, 568, 300, 291, 645, 18114, 322, 341, 630, 291], "temperature": 0.0, "avg_logprob": -0.16458290815353394, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0008698434103280306}, {"id": 203, "seek": 139764, "start": 1415.44, "end": 1421.96, "text": " ever look at using like the dual core setup to try to sort of accelerate any of the mass", "tokens": [1562, 574, 412, 1228, 411, 264, 11848, 4965, 8657, 281, 853, 281, 1333, 295, 21341, 604, 295, 264, 2758], "temperature": 0.0, "avg_logprob": -0.16458290815353394, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0008698434103280306}, {"id": 204, "seek": 142196, "start": 1421.96, "end": 1427.8, "text": " but that is a good question and someone has mentioned this to me before but when I was", "tokens": [457, 300, 307, 257, 665, 1168, 293, 1580, 575, 2835, 341, 281, 385, 949, 457, 562, 286, 390], "temperature": 0.0, "avg_logprob": -0.18643657459932214, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007621417753398418}, {"id": 205, "seek": 142196, "start": 1427.8, "end": 1433.0, "text": " writing this I was actually unaware that it had more than one core so I haven't yet but", "tokens": [3579, 341, 286, 390, 767, 32065, 300, 309, 632, 544, 813, 472, 4965, 370, 286, 2378, 380, 1939, 457], "temperature": 0.0, "avg_logprob": -0.18643657459932214, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007621417753398418}, {"id": 206, "seek": 142196, "start": 1433.0, "end": 1442.4, "text": " it's a great idea thanks very much for your talk if you're interested in micro python", "tokens": [309, 311, 257, 869, 1558, 3231, 588, 709, 337, 428, 751, 498, 291, 434, 3102, 294, 4532, 38797], "temperature": 0.0, "avg_logprob": -0.18643657459932214, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007621417753398418}, {"id": 207, "seek": 142196, "start": 1442.4, "end": 1448.32, "text": " in the building a there is a stance about micro python and also a stand by pine 64 who make", "tokens": [294, 264, 2390, 257, 456, 307, 257, 21033, 466, 4532, 38797, 293, 611, 257, 1463, 538, 15113, 12145, 567, 652], "temperature": 0.0, "avg_logprob": -0.18643657459932214, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.0007621417753398418}, {"id": 208, "seek": 144832, "start": 1448.32, "end": 1455.0, "text": " like smartwatch that can run micro python and stuff", "tokens": [50364, 411, 4069, 15219, 300, 393, 1190, 4532, 38797, 293, 1507, 50698], "temperature": 0.0, "avg_logprob": -0.34673558748685396, "compression_ratio": 0.9272727272727272, "no_speech_prob": 0.0007343096658587456}], "language": "en"}