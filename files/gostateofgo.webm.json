{"text": " Good morning everyone. Finally I can hear you again after two years online where I just had to stare at a boring matrix chat. I am honestly so glad to be here and welcome everyone back. Just like every year we are starting with an update with the state of Go. We are going to talk about what is new in Go. I will quickly touch on some topics. The interesting things about Go come in later talks. So what I am going to look into today is change the language as well as the standard library, tooling of course. I got two interesting design drafts for new releases in Go and of course an update on our Go community. What is new in Go since Go 180? Well of course Go 119 was released in August of last year. Go 1.20 was released a few days ago. It is just the first time that they released a Go version before I do this talk. What are the big new changes? There are four new changes to the language as the most we ever had. However one is not really a change so it is more like two and a half changes but actually more like 2.25. Let's just keep it there. Two real changes to the languages addition. The first one is that there is a new syntax for converting a slice to an array. Those of you who are new to Go might be confused because what is the difference between a slice and an array? I call them both arrays. Well technically in Go an array has a fixed length and the slice does not. That is too easy to say it is not correct. But you can go verb between those two and you could have done so since Go 117 using this ugly syntax which has to do with pointers and how it works underneath. I would have never come up with this myself. But in Go 1.20 it is more logical now. You can just make an array with a fixed length of 3 and put your slice in it. This now works. The next change has to do with generics which were introduced just last year. It has to do with a comparable constraint which we could give to variables. You could say a variable has to be comparable. Why would you use this? For example when you have to loop over a map it has to have a comparable key. So you could write something like this to make a sum of some numbers. And you can use it wherever you want. You make a map from strings and ints and it will count this. Okay strings will work because they are comparable. How do I know that? Simple. You can compare them with equal signs. But what about the empty interface? Is that comparable? Well that depends what the interface is. Before this was not valid. You couldn't do this. But in Go 1.20 you can because now we have two types of comparables. You have strictly comparables like ints, string, bytes, usual, but also non-strictly comparables like the empty interface. Do be careful because this might panic at runtime. It's allowed but it can panic. The next change is the comparables of strict values. It now checks one property at a time and it will exit at the first mismatch. Wait a minute. This was always this way. Yes, it was always implemented this way but it was never specified in the language specification. This isn't really a change in the language. The next change has to do with three new unsafe functions. This is the unsafe package. You should just avoid doing this. Next up, what is new with the Go Tooling? Well, I say this every year and before me, Frances said it every year, is that there are new warnings in Go Vats. Why should you care? Okay, there's a new squiggly line in your editor. You might not care about those squiggly lines in your editor. You should but you can't. Okay, but it also runs when you run tests with Go tests. So your CI might suddenly turn red if you update your Go version because there are new warnings. That's why these are important. The first new warning this year is in Go 119, that it will now error when you pass a pointer to an error in the Error.Ask function, which is such a common mistake that kid of co-pilot wrote this code for me. It's not bad. It doesn't work. The next warning has to do with incorrect date formats. Let's say I want to format a date of today in an ISO-like notation. Well, I would write some code like this. But wait a minute, let's think twice about my codea. How do I format a date in Go? Well, you always have to think about Monday, January the second of 2006. This is February 1st. Many of you probably haven't noticed. Again, this is a common mistake because people are confused between 1 and 2. Go Vats will now warn you against the above format because it probably is used nowhere. There are also some welcome changes to Go Dock. You can now make lists, link, and headers inside your Dock comments, which will be rendered into HTML. Use an example below where I put a header in, I link to the RC I'm implementing, and I'm also listing which guys of coffee my machine supports. There is also in 119 a new Unix build constraint. If you want to build a file that only will be built on a Unix system, you can do that using Go column builds. Okay, in the past, you could do it by listing all different Unix systems. There are a lot of them. Okay, that's a lot of code, right? Well, in 1 to 19, you can just do Go column build Unix. Wait a minute. Isn't this a common thing to do? Because a file system in Unix is almost the same everywhere. Okay, so I asked chatGPT, like every developer does these days. I asked, give me a Unix build constraint, and it gave me this thing. Go build, not Windows. Okay, you all know what's going to happen, right? Okay, you say, it's an AI, I trust the AI. Let's think tries about this. Don't try to be smart and reach the actual compiler code, like every one of you does all day. And immediately I found this thing. Oh, JavaScript is a thing. WebAssembly, one important fact I didn't even talk about if Plan 9 is Unix or not. No, I just love like JavaScript. That's not Unix, and it's also not Windows. So just don't trust your AI, please. 1.20 ads also coverage on building binaries. Why should you care about this? Well, many integration and end-to-end tests, you run them by making a special binary, running it, and getting your test results. If you also want coverage results, this wasn't possible before. If you now build it with dash cover and at a co-cover deer environment variable, then run the script, okay, you get your output, and you also get which lines all your code touched, so you can put it in your site, your favorite coverage tool. There are also a few small changes I want to touch upon. C code will now be disabled if a C tool chain is not found. Many container people will now be happy. Go generate and go test also have a skip flag, which you can put in the red text for which file to skip. Okay, let's take a look at the standard library. Go as many things in the standard library, and of course we have changes in those every year. The first one is in 1.20, and I find super useful. You can now wrap multiple errors. You can do so using error.fmt.errorf. You can now put multiple percent sign w in there. You can just wrap multiple errors. Your functions that you will run on them like errors.is or errors.s, just loop over all those errors. It does that by using the underlying new unwrap interface, which just gives you the slice of original errors back. There is also the new errors.join function, which you can just throw all your errors into. Why would you use this? Okay, you always written a code like this. You just loop over a list, and you want to check for some errors. Okay, you could just return a slice of error, but then you have to check for the length, if it's not nil, etc. Okay, you just want a single error out there. You can use errors.join, and you get a list of all your errors, which are joined together. You can just treat it like a normal error in your code, and even use errors.is and errors.us. So you can just say, oh, was there any empty string in this list? There are also a few changes to the strings and byte package, which is that it now has a new cut function. It just works as an act trim with trim prefix, cut prefix, and cut suffix, except it will now return a boolean if a cut has happened. There is also a clone function, which returns the same instance copied in memory. Also, few small changes to the time package. We now have a compare function, which is a combination of before and after. It does both. It will return you an integer from either minus one plus one or zero, depending on if it's before, after, or the same as a given time. There are also three new layout constraints, which you can use, and those actually came from you. Those came from the Go user survey that they are commonly used, so they added time. There is date time, which gives you an ISO-like notation. There is also date only and time only, which gives you only the date and only the time. There is also a change in the TLS package like every edition. This time, it's a change in how it treats memory. It now shares a copy of your certificate in memory. Why is this useful for you? Well, let's say you have an application that does many concurrent connections, like Kubernetes. Well, until then, now it's sort of a copy of your certificate for every connection in memory. It now is sharing those amongst multiple connections, so you are saving memory. If you somehow have an invalid certificate, you also get a specific error that says the certificate is not valid instead of a general error. And yes, we also have breaking changes this edition in the standard library. The first one happened in 119 in the HTTP package. The HTTP client will now no longer give an error back if you serve a sense of 300 response without the location header set. If you rely on your code to check if the location is set or not by using this error, yes, your code will break now. Also, a change in the random package. It is now preceded when you use the global random functions. You no longer have to call the dot seed function with some random number you get from somewhere. It now does that for you. Of course, it deprecates the dot seed function. If you still need your own seed for predictable random numbers, you can do so by using the random new function. If this somehow breaks your code, it could. You can disable it using this new go debug variable. In tar and zip, there are also some changes which are welcome, which is that it will now error if your R guy has an absolute pot, an invalid character in a file name, or a reserved name on the Windows platform. It will now return error in secure pot. This to protect your server from being hacked. If you somehow don't want this, you can also turn it off in go debug. There is one new package in the standard library, which is the elliptic curve of the helmet gear change. Yay. Very excited. This was possible. Go can do it using the lower elliptic one, but you had to implement more yourself. So it's probably more secure than you would. Okay. The go runtime. We also have a few changes in there. Well, go 119 has a revised memory model, and I have no idea how they did that. I don't know. So if you want something, we actually know what he's talking about, Russ Cox wrote an amazing blog post about it. But what does this mean for us average go developers and not compiler developers? Well, first of all, go now has a soft memory limit. You can now tell go how much memory you wanted to maximum use. It's a soft limit. Okay. You can, for example, set it to be one gigabyte. Okay. What will happen tomorrow? Go towards one gigabyte limit. It will try to trigger the garbage collector more to get more memory frets. Yes, you can see the results if it's too low. Well, what will happen is if it's too much, it will try to limit it to 50% of the CPU execution time, which your process is using to be garbage collection. There is, however, a warning. If you set it to tens of limit, tens of megabytes, it might just work because your operating system says that's absolutely not enough. This also results in a new atomic package, which provides low level atomic memory access. So you could now access these variables in multiple go routines. It works only for primitives like integers, booleans, and unsafe pointers. It does this by exposing the function store and load. Also add for integers and compare and compare and swap. Okay. But if you use these, you need to know exactly what you're doing. You need to know how our topics work. As always. And it's still not really recommended. They recommend that you still share memory by communicating, for example, with channels and not communicate by sharing memory. So please only use this as if this is your only option. Go 1.20 has a few small changes in the runtime. The garbage collector got better yet again. Say this every year for five years, it got better. And it is now a Leatheretic. There is also a new mode, which you can compile the binaries in, which is P go, which you can give it a profile of your program that has been running, which will now will try to optimize the binary towards your CPU profile from a previous run by, for example, inlining frequently called functions. The go team claims that is up to 4% faster. I had some colleagues who were looking into this, but not in time to get actual benchmarks. At last, I want to give you a small update on go ports. So what is happening on the ports in go? Well, go 1.19 added a new processor architecture on Linux, which is long arc. It's a Chinese built architecture. It's not yet in white use hour. Go 1.20 will be the last one to support Windows 7 and 8. It will also be the last one to support Mac OS 10.13 and 10.14, but who cares? Go 1.20 also has experimental support for RISC 5 and the free BSD platform. Yay. Okay. That is the current version of go. But of course, let's take a look at the future. And always we try to look in the future. It won't always work. I have two interesting design drafts, which I found. The first one is one for structured logging, something you all do, but doesn't work in the standard library. There is a proposal to make an S log package in log in a standard library. They want this to produce machine readable logging. And it hopes to replace the many, many, many, many, many structured logging libraries like log RISC that ZLog, log arc, log, HLOc, and however you pronounce all those. It tries to propose something like this. Something like every library probably already did is you set up for something, you set up what you want to send it to, you put in messages, you put in variables, and it logs those out in something that is machine readable. This is the text output, which is just key value peps. So your computers can all read it and can index it and make it searchable. How does it want to do this? It wants to give you a logger interface. Again, these are all interfaces. You can just implement them in your own library. Okay, it wants to give you fellow functions like info, error, warning, log attributes. It then makes those into a record. This is just a track containing all this data, and you give this record to a handler, and this handler will turn it into something that's machine readable. If you want JSON, you just give it to a JSON handler. If you want some proprietary format, you just make your own. So it tries to give you an implementation and interfaces in the standard library for different log levels like debug, info, warning, error, passing in data to be printed out, and now putting it into text in JSON and maybe more formats. Again, this is a design proposal. It's not yet implemented anywhere. If you have strong opinions about logging, you can read the full proposal on this link. I will publish the site of FOSDM later today, and you can go there, read everything about it, and leave some comments in their issue tracker. The next big thing they want to tackle is Go version compatibility. Why do they want to do that? Well, we've been doing this talk ever since 2015. A lot has changed, bigger room, different speakers, and especially different slide templates, but there's one thing that always stayed the same. It's this slide. Freaking changes. We wait a minute, Marcia. Isn't there the Go 1.0 compatibility promise? And yes. Well, Go's emphasis on backwards compatibility is why we all use Go, because we don't have to rewrite our whole application every two years. However, there are times which is not possible, for example, with external security dependencies or just bugs that we have to fix. Okay, let's take a look at this in practice. Let's look at the big Go project. Kubernetes again. When did Go break Kubernetes? Well, more than you think. Just in the last version, Go 115 broke Kubernetes in some way by deprecating the X509 company. 117, a bug fix in that part's IP broke it again. In 118, again, X509 broke Kubernetes again because Go changed something, they deprecated something. And in 119, a bug fix in loop path also broke Kubernetes. Oops. Of course, it's impossible not to break Kubernetes somehow. But still, let's try to avoid this in a language. So we have a solution, and it's a solution already we have today. Is that Go debug flag I've been showing on my slides? Okay, what is this proposal? It is to commit to adding one of these Go debug flags to every breaking change in the following releases. And also to guarantee that they'll stay there for a few years or maybe forever. They also want to add metrics to it so you can look at your program and see how many of those are there that you have to fix. And also to put it in code so you can use Go call and debug to override it inside the code yourself. Again, this is not yet fully implemented. There is a design proposal. You can read everything on the link there and leave any comments. But wait a minute, Marcia, don't we already have this? I have to specify that Go version in my modules file, right? Yeah, but what does it actually do? Oh, I know. This says the minimum Go version to build it. No. It will try, any version will just try to build it. It's just a suggestion. It might fail. Oh, I know. It says a Go version in which it uses. Also, no, sorry. It uses the installed version on your laptop. Nothing else. Oh, did I know. This says the semantic rule set for the version. And yes, that is correct. But only the semantic rule set. So that slides to array conversion. Yes, that is set by this flag. The octal numbers which got added two years ago. Yes, that is also checked by this flag. But that's all. Okay, they want to change this. And this is the Go toolchain proposal. They want to add a Go toolchain environment variable which you could use to set a specific toolchain. Okay, I want to use the 1.20 toolchain for this application. This will allow Go get to get a new Go toolchain just like you would get your Go modules. Okay, but it also needs to change the Go command a lot because it has to get your toolchain from somewhere and then first download it, check it, and run it. That changes our tooling a lot. And also, there is a cool toolchain local if you still need a local for some reason. Again, this is just a design proposal. I might be saying that this is implemented next year. If you have comments about it, there is a link here as well. There is also a proposal to add this to the Go mod file. So it's right under the Go version. You say, okay, my application uses the 1.19 syntax which has to use a 1.20 RC for toolchain. So if you build this module, it will go download this version of Go and build it using that. Okay, that's a technical thing. Let's talk about my favorite subject, the Go community. This is a map of all Go meetups in the world. We are pretty much covered everywhere where big populations are, but still not enough. What are the numbers? Well, the professional Go developer network on Meetup counts 127,000 members. That's 8,000 more than last year. There is sat news for the first time. There are now only 190 meetups that seeks less than last year, which also results in one country being less represented. Probably due to the pandemic. There are also the women who go and go break chapters, which is still stable at 41 chapters, and Berlin is still the most active one. But now let's talk about my favorite community, the Foslan community. Our deaf room is nine years old today. So we've been doing this since 2014. Okay, small room. Anyone can see themselves? Okay, we got upgraded in 2015, 2016. Okay, bigger one. We stayed in the same size for three years, which was a crowd enough, and today even is full house. 2019, we got the biggest upgrade ever. We got a giant room. And in 2020, we got the biggest room they could find for us. But I regret doing that because a month later, we were all in lockdown. That caused our 2021 edition to be fully online for the first time. We all did our best. We turned our living rooms into giant television studios trying to bring you some talks about Go. We learned a lot of lessons. And in 2022, we brought you gophers around the world, which we had great fun in producing. But hey, welcome back. This is something you'll never, ever see again today. There was just one guy still sitting there. And he'll be here at 9.00 at 9.00 p.m. Good. Let's talk about Go! Conference. You're all in the mood, right? So there is a Go! Conference. You are here. Please stay. There are better thoughts than mine. If you quickly catch a plane, right now, you can still make Go! Con Israel, February 7. Con 42 will still be held online in April. If you want to go to New York, you can do so at April 28. Go! Con Japan will be held online. Go! Con Europe will be in Berlin in June. Go! Con US will be in San Diego in September. And Go! Lapp in Florence, Italy will be held in November, which I have not officially confirmed yet. So we got an amazing schedule today. I already want to talk all speakers for signing up to be in our deaf room today. I hope you'll welcome me again next year. But before I leave you all, I want to give a few housekeeping announcements. First of all, out of tradition, we have lightning talks at the end of the day. We reserve the last half hour of the day to do five-minute talks. Those timing is strict. I will pull you offstage. We have a CFP for those. It's open till 17.00, or 5 p.m. for your Americans. And you can submit a tile till that hour at govres.gov.slide. I'll write it on the right board later. You just have to fill out three easy questions. And if you fill those out, I can welcome you onstage at the last half hour. So you have time to submit a talk. Quickly think of something. Submit it. We need you. If you want to talk to us about, talk to us about social media, you can do so by using hashtag Golan and hashtag FOSDEM23 or FOSDEM223 or FOSDEM, nobody agrees on that hashtag. But we stand to say with FOSDEM23. We're also on the Fediverse this year because Boo isn't. You can follow us, mention us, like us at godevroom at fosterdon.social. We have a social media responsible person this year. We will be happy to reply to all your angry tweets. So this is a state of go. I first of all want to thank the FOSDEM organization for welcoming us back in the ULB. I want to thank all the volunteers who are helping to make this room possible, as well as the AV team from FOSDEM, who makes my camera work. And everyone else who is working at FOSDEM. And at last I want to thank all speakers for coming here today. And of course, you all for coming to the Go Dev Room again. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.8, "text": " Good morning everyone. Finally I can hear you again after two years online where I just", "tokens": [2205, 2446, 1518, 13, 6288, 286, 393, 1568, 291, 797, 934, 732, 924, 2950, 689, 286, 445], "temperature": 0.0, "avg_logprob": -0.31790715594624364, "compression_ratio": 1.3875968992248062, "no_speech_prob": 0.36260777711868286}, {"id": 1, "seek": 0, "start": 12.8, "end": 19.32, "text": " had to stare at a boring matrix chat. I am honestly so glad to be here and welcome everyone", "tokens": [632, 281, 22432, 412, 257, 9989, 8141, 5081, 13, 286, 669, 6095, 370, 5404, 281, 312, 510, 293, 2928, 1518], "temperature": 0.0, "avg_logprob": -0.31790715594624364, "compression_ratio": 1.3875968992248062, "no_speech_prob": 0.36260777711868286}, {"id": 2, "seek": 1932, "start": 19.32, "end": 34.2, "text": " back. Just like every year we are starting with an update with the state of Go. We are", "tokens": [646, 13, 1449, 411, 633, 1064, 321, 366, 2891, 365, 364, 5623, 365, 264, 1785, 295, 1037, 13, 492, 366], "temperature": 0.0, "avg_logprob": -0.3150582368346466, "compression_ratio": 1.63013698630137, "no_speech_prob": 0.00042724539525806904}, {"id": 3, "seek": 1932, "start": 34.2, "end": 38.96, "text": " going to talk about what is new in Go. I will quickly touch on some topics. The interesting", "tokens": [516, 281, 751, 466, 437, 307, 777, 294, 1037, 13, 286, 486, 2661, 2557, 322, 512, 8378, 13, 440, 1880], "temperature": 0.0, "avg_logprob": -0.3150582368346466, "compression_ratio": 1.63013698630137, "no_speech_prob": 0.00042724539525806904}, {"id": 4, "seek": 1932, "start": 38.96, "end": 44.400000000000006, "text": " things about Go come in later talks. So what I am going to look into today is change the", "tokens": [721, 466, 1037, 808, 294, 1780, 6686, 13, 407, 437, 286, 669, 516, 281, 574, 666, 965, 307, 1319, 264], "temperature": 0.0, "avg_logprob": -0.3150582368346466, "compression_ratio": 1.63013698630137, "no_speech_prob": 0.00042724539525806904}, {"id": 5, "seek": 1932, "start": 44.400000000000006, "end": 48.96, "text": " language as well as the standard library, tooling of course. I got two interesting design", "tokens": [2856, 382, 731, 382, 264, 3832, 6405, 11, 46593, 295, 1164, 13, 286, 658, 732, 1880, 1715], "temperature": 0.0, "avg_logprob": -0.3150582368346466, "compression_ratio": 1.63013698630137, "no_speech_prob": 0.00042724539525806904}, {"id": 6, "seek": 4896, "start": 48.96, "end": 54.4, "text": " drafts for new releases in Go and of course an update on our Go community. What is new", "tokens": [11206, 82, 337, 777, 16952, 294, 1037, 293, 295, 1164, 364, 5623, 322, 527, 1037, 1768, 13, 708, 307, 777], "temperature": 0.0, "avg_logprob": -0.1861824201500934, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00014079472748562694}, {"id": 7, "seek": 4896, "start": 54.4, "end": 60.84, "text": " in Go since Go 180? Well of course Go 119 was released in August of last year. Go 1.20", "tokens": [294, 1037, 1670, 1037, 11971, 30, 1042, 295, 1164, 1037, 2975, 24, 390, 4736, 294, 6897, 295, 1036, 1064, 13, 1037, 502, 13, 2009], "temperature": 0.0, "avg_logprob": -0.1861824201500934, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00014079472748562694}, {"id": 8, "seek": 4896, "start": 60.84, "end": 65.28, "text": " was released a few days ago. It is just the first time that they released a Go version", "tokens": [390, 4736, 257, 1326, 1708, 2057, 13, 467, 307, 445, 264, 700, 565, 300, 436, 4736, 257, 1037, 3037], "temperature": 0.0, "avg_logprob": -0.1861824201500934, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00014079472748562694}, {"id": 9, "seek": 4896, "start": 65.28, "end": 71.28, "text": " before I do this talk. What are the big new changes? There are four new changes to the", "tokens": [949, 286, 360, 341, 751, 13, 708, 366, 264, 955, 777, 2962, 30, 821, 366, 1451, 777, 2962, 281, 264], "temperature": 0.0, "avg_logprob": -0.1861824201500934, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00014079472748562694}, {"id": 10, "seek": 4896, "start": 71.28, "end": 76.84, "text": " language as the most we ever had. However one is not really a change so it is more like", "tokens": [2856, 382, 264, 881, 321, 1562, 632, 13, 2908, 472, 307, 406, 534, 257, 1319, 370, 309, 307, 544, 411], "temperature": 0.0, "avg_logprob": -0.1861824201500934, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00014079472748562694}, {"id": 11, "seek": 7684, "start": 76.84, "end": 82.52000000000001, "text": " two and a half changes but actually more like 2.25. Let's just keep it there. Two real", "tokens": [732, 293, 257, 1922, 2962, 457, 767, 544, 411, 568, 13, 6074, 13, 961, 311, 445, 1066, 309, 456, 13, 4453, 957], "temperature": 0.0, "avg_logprob": -0.20460735048566545, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.1531995268305764e-05}, {"id": 12, "seek": 7684, "start": 82.52000000000001, "end": 87.64, "text": " changes to the languages addition. The first one is that there is a new syntax for converting", "tokens": [2962, 281, 264, 8650, 4500, 13, 440, 700, 472, 307, 300, 456, 307, 257, 777, 28431, 337, 29942], "temperature": 0.0, "avg_logprob": -0.20460735048566545, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.1531995268305764e-05}, {"id": 13, "seek": 7684, "start": 87.64, "end": 91.76, "text": " a slice to an array. Those of you who are new to Go might be confused because what is", "tokens": [257, 13153, 281, 364, 10225, 13, 3950, 295, 291, 567, 366, 777, 281, 1037, 1062, 312, 9019, 570, 437, 307], "temperature": 0.0, "avg_logprob": -0.20460735048566545, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.1531995268305764e-05}, {"id": 14, "seek": 7684, "start": 91.76, "end": 95.92, "text": " the difference between a slice and an array? I call them both arrays. Well technically in", "tokens": [264, 2649, 1296, 257, 13153, 293, 364, 10225, 30, 286, 818, 552, 1293, 41011, 13, 1042, 12120, 294], "temperature": 0.0, "avg_logprob": -0.20460735048566545, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.1531995268305764e-05}, {"id": 15, "seek": 7684, "start": 95.92, "end": 101.96000000000001, "text": " Go an array has a fixed length and the slice does not. That is too easy to say it is not", "tokens": [1037, 364, 10225, 575, 257, 6806, 4641, 293, 264, 13153, 775, 406, 13, 663, 307, 886, 1858, 281, 584, 309, 307, 406], "temperature": 0.0, "avg_logprob": -0.20460735048566545, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.1531995268305764e-05}, {"id": 16, "seek": 10196, "start": 101.96, "end": 108.0, "text": " correct. But you can go verb between those two and you could have done so since Go 117", "tokens": [3006, 13, 583, 291, 393, 352, 9595, 1296, 729, 732, 293, 291, 727, 362, 1096, 370, 1670, 1037, 2975, 22], "temperature": 0.0, "avg_logprob": -0.16431971958705358, "compression_ratio": 1.650190114068441, "no_speech_prob": 5.755647362093441e-05}, {"id": 17, "seek": 10196, "start": 108.0, "end": 113.28, "text": " using this ugly syntax which has to do with pointers and how it works underneath. I would", "tokens": [1228, 341, 12246, 28431, 597, 575, 281, 360, 365, 44548, 293, 577, 309, 1985, 7223, 13, 286, 576], "temperature": 0.0, "avg_logprob": -0.16431971958705358, "compression_ratio": 1.650190114068441, "no_speech_prob": 5.755647362093441e-05}, {"id": 18, "seek": 10196, "start": 113.28, "end": 119.52, "text": " have never come up with this myself. But in Go 1.20 it is more logical now. You can just", "tokens": [362, 1128, 808, 493, 365, 341, 2059, 13, 583, 294, 1037, 502, 13, 2009, 309, 307, 544, 14978, 586, 13, 509, 393, 445], "temperature": 0.0, "avg_logprob": -0.16431971958705358, "compression_ratio": 1.650190114068441, "no_speech_prob": 5.755647362093441e-05}, {"id": 19, "seek": 10196, "start": 119.52, "end": 125.28, "text": " make an array with a fixed length of 3 and put your slice in it. This now works. The", "tokens": [652, 364, 10225, 365, 257, 6806, 4641, 295, 805, 293, 829, 428, 13153, 294, 309, 13, 639, 586, 1985, 13, 440], "temperature": 0.0, "avg_logprob": -0.16431971958705358, "compression_ratio": 1.650190114068441, "no_speech_prob": 5.755647362093441e-05}, {"id": 20, "seek": 10196, "start": 125.28, "end": 129.84, "text": " next change has to do with generics which were introduced just last year. It has to", "tokens": [958, 1319, 575, 281, 360, 365, 1337, 1167, 597, 645, 7268, 445, 1036, 1064, 13, 467, 575, 281], "temperature": 0.0, "avg_logprob": -0.16431971958705358, "compression_ratio": 1.650190114068441, "no_speech_prob": 5.755647362093441e-05}, {"id": 21, "seek": 12984, "start": 129.84, "end": 133.88, "text": " do with a comparable constraint which we could give to variables. You could say a variable", "tokens": [360, 365, 257, 25323, 25534, 597, 321, 727, 976, 281, 9102, 13, 509, 727, 584, 257, 7006], "temperature": 0.0, "avg_logprob": -0.18720084930134712, "compression_ratio": 1.777327935222672, "no_speech_prob": 5.8134311984758824e-05}, {"id": 22, "seek": 12984, "start": 133.88, "end": 139.32, "text": " has to be comparable. Why would you use this? For example when you have to loop over a map", "tokens": [575, 281, 312, 25323, 13, 1545, 576, 291, 764, 341, 30, 1171, 1365, 562, 291, 362, 281, 6367, 670, 257, 4471], "temperature": 0.0, "avg_logprob": -0.18720084930134712, "compression_ratio": 1.777327935222672, "no_speech_prob": 5.8134311984758824e-05}, {"id": 23, "seek": 12984, "start": 139.32, "end": 144.04, "text": " it has to have a comparable key. So you could write something like this to make a sum of", "tokens": [309, 575, 281, 362, 257, 25323, 2141, 13, 407, 291, 727, 2464, 746, 411, 341, 281, 652, 257, 2408, 295], "temperature": 0.0, "avg_logprob": -0.18720084930134712, "compression_ratio": 1.777327935222672, "no_speech_prob": 5.8134311984758824e-05}, {"id": 24, "seek": 12984, "start": 144.04, "end": 149.08, "text": " some numbers. And you can use it wherever you want. You make a map from strings and", "tokens": [512, 3547, 13, 400, 291, 393, 764, 309, 8660, 291, 528, 13, 509, 652, 257, 4471, 490, 13985, 293], "temperature": 0.0, "avg_logprob": -0.18720084930134712, "compression_ratio": 1.777327935222672, "no_speech_prob": 5.8134311984758824e-05}, {"id": 25, "seek": 12984, "start": 149.08, "end": 153.88, "text": " ints and it will count this. Okay strings will work because they are comparable. How", "tokens": [560, 82, 293, 309, 486, 1207, 341, 13, 1033, 13985, 486, 589, 570, 436, 366, 25323, 13, 1012], "temperature": 0.0, "avg_logprob": -0.18720084930134712, "compression_ratio": 1.777327935222672, "no_speech_prob": 5.8134311984758824e-05}, {"id": 26, "seek": 15388, "start": 153.88, "end": 160.12, "text": " do I know that? Simple. You can compare them with equal signs. But what about the empty", "tokens": [360, 286, 458, 300, 30, 21532, 13, 509, 393, 6794, 552, 365, 2681, 7880, 13, 583, 437, 466, 264, 6707], "temperature": 0.0, "avg_logprob": -0.1696273668677406, "compression_ratio": 1.7609561752988048, "no_speech_prob": 4.8696922021918e-05}, {"id": 27, "seek": 15388, "start": 160.12, "end": 166.6, "text": " interface? Is that comparable? Well that depends what the interface is. Before this was not", "tokens": [9226, 30, 1119, 300, 25323, 30, 1042, 300, 5946, 437, 264, 9226, 307, 13, 4546, 341, 390, 406], "temperature": 0.0, "avg_logprob": -0.1696273668677406, "compression_ratio": 1.7609561752988048, "no_speech_prob": 4.8696922021918e-05}, {"id": 28, "seek": 15388, "start": 166.6, "end": 171.72, "text": " valid. You couldn't do this. But in Go 1.20 you can because now we have two types of", "tokens": [7363, 13, 509, 2809, 380, 360, 341, 13, 583, 294, 1037, 502, 13, 2009, 291, 393, 570, 586, 321, 362, 732, 3467, 295], "temperature": 0.0, "avg_logprob": -0.1696273668677406, "compression_ratio": 1.7609561752988048, "no_speech_prob": 4.8696922021918e-05}, {"id": 29, "seek": 15388, "start": 171.72, "end": 176.96, "text": " comparables. You have strictly comparables like ints, string, bytes, usual, but also", "tokens": [6311, 2965, 13, 509, 362, 20792, 6311, 2965, 411, 560, 82, 11, 6798, 11, 36088, 11, 7713, 11, 457, 611], "temperature": 0.0, "avg_logprob": -0.1696273668677406, "compression_ratio": 1.7609561752988048, "no_speech_prob": 4.8696922021918e-05}, {"id": 30, "seek": 15388, "start": 176.96, "end": 181.96, "text": " non-strictly comparables like the empty interface. Do be careful because this might panic at", "tokens": [2107, 12, 372, 3740, 356, 6311, 2965, 411, 264, 6707, 9226, 13, 1144, 312, 5026, 570, 341, 1062, 14783, 412], "temperature": 0.0, "avg_logprob": -0.1696273668677406, "compression_ratio": 1.7609561752988048, "no_speech_prob": 4.8696922021918e-05}, {"id": 31, "seek": 18196, "start": 181.96, "end": 189.54000000000002, "text": " runtime. It's allowed but it can panic. The next change is the comparables of strict values.", "tokens": [34474, 13, 467, 311, 4350, 457, 309, 393, 14783, 13, 440, 958, 1319, 307, 264, 6311, 2965, 295, 10910, 4190, 13], "temperature": 0.0, "avg_logprob": -0.202511249889027, "compression_ratio": 1.77734375, "no_speech_prob": 0.00015244880341924727}, {"id": 32, "seek": 18196, "start": 189.54000000000002, "end": 194.96, "text": " It now checks one property at a time and it will exit at the first mismatch. Wait a minute.", "tokens": [467, 586, 13834, 472, 4707, 412, 257, 565, 293, 309, 486, 11043, 412, 264, 700, 23220, 852, 13, 3802, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.202511249889027, "compression_ratio": 1.77734375, "no_speech_prob": 0.00015244880341924727}, {"id": 33, "seek": 18196, "start": 194.96, "end": 200.4, "text": " This was always this way. Yes, it was always implemented this way but it was never specified", "tokens": [639, 390, 1009, 341, 636, 13, 1079, 11, 309, 390, 1009, 12270, 341, 636, 457, 309, 390, 1128, 22206], "temperature": 0.0, "avg_logprob": -0.202511249889027, "compression_ratio": 1.77734375, "no_speech_prob": 0.00015244880341924727}, {"id": 34, "seek": 18196, "start": 200.4, "end": 204.64000000000001, "text": " in the language specification. This isn't really a change in the language. The next", "tokens": [294, 264, 2856, 31256, 13, 639, 1943, 380, 534, 257, 1319, 294, 264, 2856, 13, 440, 958], "temperature": 0.0, "avg_logprob": -0.202511249889027, "compression_ratio": 1.77734375, "no_speech_prob": 0.00015244880341924727}, {"id": 35, "seek": 18196, "start": 204.64000000000001, "end": 209.64000000000001, "text": " change has to do with three new unsafe functions. This is the unsafe package. You should just", "tokens": [1319, 575, 281, 360, 365, 1045, 777, 35948, 6828, 13, 639, 307, 264, 35948, 7372, 13, 509, 820, 445], "temperature": 0.0, "avg_logprob": -0.202511249889027, "compression_ratio": 1.77734375, "no_speech_prob": 0.00015244880341924727}, {"id": 36, "seek": 20964, "start": 209.64, "end": 218.72, "text": " avoid doing this. Next up, what is new with the Go Tooling? Well, I say this every year", "tokens": [5042, 884, 341, 13, 3087, 493, 11, 437, 307, 777, 365, 264, 1037, 15934, 278, 30, 1042, 11, 286, 584, 341, 633, 1064], "temperature": 0.0, "avg_logprob": -0.20435161432944055, "compression_ratio": 1.700374531835206, "no_speech_prob": 5.6937886256491765e-05}, {"id": 37, "seek": 20964, "start": 218.72, "end": 223.0, "text": " and before me, Frances said it every year, is that there are new warnings in Go Vats.", "tokens": [293, 949, 385, 11, 31441, 848, 309, 633, 1064, 11, 307, 300, 456, 366, 777, 30009, 294, 1037, 691, 1720, 13], "temperature": 0.0, "avg_logprob": -0.20435161432944055, "compression_ratio": 1.700374531835206, "no_speech_prob": 5.6937886256491765e-05}, {"id": 38, "seek": 20964, "start": 223.0, "end": 227.11999999999998, "text": " Why should you care? Okay, there's a new squiggly line in your editor. You might not care about", "tokens": [1545, 820, 291, 1127, 30, 1033, 11, 456, 311, 257, 777, 2339, 46737, 1622, 294, 428, 9839, 13, 509, 1062, 406, 1127, 466], "temperature": 0.0, "avg_logprob": -0.20435161432944055, "compression_ratio": 1.700374531835206, "no_speech_prob": 5.6937886256491765e-05}, {"id": 39, "seek": 20964, "start": 227.11999999999998, "end": 231.92, "text": " those squiggly lines in your editor. You should but you can't. Okay, but it also runs when", "tokens": [729, 2339, 46737, 3876, 294, 428, 9839, 13, 509, 820, 457, 291, 393, 380, 13, 1033, 11, 457, 309, 611, 6676, 562], "temperature": 0.0, "avg_logprob": -0.20435161432944055, "compression_ratio": 1.700374531835206, "no_speech_prob": 5.6937886256491765e-05}, {"id": 40, "seek": 20964, "start": 231.92, "end": 236.16, "text": " you run tests with Go tests. So your CI might suddenly turn red if you update your Go version", "tokens": [291, 1190, 6921, 365, 1037, 6921, 13, 407, 428, 37777, 1062, 5800, 1261, 2182, 498, 291, 5623, 428, 1037, 3037], "temperature": 0.0, "avg_logprob": -0.20435161432944055, "compression_ratio": 1.700374531835206, "no_speech_prob": 5.6937886256491765e-05}, {"id": 41, "seek": 23616, "start": 236.16, "end": 240.2, "text": " because there are new warnings. That's why these are important. The first new warning", "tokens": [570, 456, 366, 777, 30009, 13, 663, 311, 983, 613, 366, 1021, 13, 440, 700, 777, 9164], "temperature": 0.0, "avg_logprob": -0.20874719058766084, "compression_ratio": 1.5897435897435896, "no_speech_prob": 2.4496292098774575e-05}, {"id": 42, "seek": 23616, "start": 240.2, "end": 246.2, "text": " this year is in Go 119, that it will now error when you pass a pointer to an error in the", "tokens": [341, 1064, 307, 294, 1037, 2975, 24, 11, 300, 309, 486, 586, 6713, 562, 291, 1320, 257, 23918, 281, 364, 6713, 294, 264], "temperature": 0.0, "avg_logprob": -0.20874719058766084, "compression_ratio": 1.5897435897435896, "no_speech_prob": 2.4496292098774575e-05}, {"id": 43, "seek": 23616, "start": 246.2, "end": 250.07999999999998, "text": " Error.Ask function, which is such a common mistake that kid of co-pilot wrote this code", "tokens": [3300, 2874, 13, 47802, 2445, 11, 597, 307, 1270, 257, 2689, 6146, 300, 1636, 295, 598, 12, 79, 31516, 4114, 341, 3089], "temperature": 0.0, "avg_logprob": -0.20874719058766084, "compression_ratio": 1.5897435897435896, "no_speech_prob": 2.4496292098774575e-05}, {"id": 44, "seek": 23616, "start": 250.07999999999998, "end": 257.36, "text": " for me. It's not bad. It doesn't work. The next warning has to do with incorrect date", "tokens": [337, 385, 13, 467, 311, 406, 1578, 13, 467, 1177, 380, 589, 13, 440, 958, 9164, 575, 281, 360, 365, 18424, 4002], "temperature": 0.0, "avg_logprob": -0.20874719058766084, "compression_ratio": 1.5897435897435896, "no_speech_prob": 2.4496292098774575e-05}, {"id": 45, "seek": 23616, "start": 257.36, "end": 263.76, "text": " formats. Let's say I want to format a date of today in an ISO-like notation. Well, I", "tokens": [25879, 13, 961, 311, 584, 286, 528, 281, 7877, 257, 4002, 295, 965, 294, 364, 25042, 12, 4092, 24657, 13, 1042, 11, 286], "temperature": 0.0, "avg_logprob": -0.20874719058766084, "compression_ratio": 1.5897435897435896, "no_speech_prob": 2.4496292098774575e-05}, {"id": 46, "seek": 26376, "start": 263.76, "end": 269.28, "text": " would write some code like this. But wait a minute, let's think twice about my codea.", "tokens": [576, 2464, 512, 3089, 411, 341, 13, 583, 1699, 257, 3456, 11, 718, 311, 519, 6091, 466, 452, 3089, 64, 13], "temperature": 0.0, "avg_logprob": -0.176492622306755, "compression_ratio": 1.558303886925795, "no_speech_prob": 8.477373194182292e-05}, {"id": 47, "seek": 26376, "start": 269.28, "end": 273.84, "text": " How do I format a date in Go? Well, you always have to think about Monday, January the second", "tokens": [1012, 360, 286, 7877, 257, 4002, 294, 1037, 30, 1042, 11, 291, 1009, 362, 281, 519, 466, 8138, 11, 7061, 264, 1150], "temperature": 0.0, "avg_logprob": -0.176492622306755, "compression_ratio": 1.558303886925795, "no_speech_prob": 8.477373194182292e-05}, {"id": 48, "seek": 26376, "start": 273.84, "end": 281.15999999999997, "text": " of 2006. This is February 1st. Many of you probably haven't noticed. Again, this is a", "tokens": [295, 14062, 13, 639, 307, 8711, 502, 372, 13, 5126, 295, 291, 1391, 2378, 380, 5694, 13, 3764, 11, 341, 307, 257], "temperature": 0.0, "avg_logprob": -0.176492622306755, "compression_ratio": 1.558303886925795, "no_speech_prob": 8.477373194182292e-05}, {"id": 49, "seek": 26376, "start": 281.15999999999997, "end": 285.48, "text": " common mistake because people are confused between 1 and 2. Go Vats will now warn you", "tokens": [2689, 6146, 570, 561, 366, 9019, 1296, 502, 293, 568, 13, 1037, 691, 1720, 486, 586, 12286, 291], "temperature": 0.0, "avg_logprob": -0.176492622306755, "compression_ratio": 1.558303886925795, "no_speech_prob": 8.477373194182292e-05}, {"id": 50, "seek": 26376, "start": 285.48, "end": 290.92, "text": " against the above format because it probably is used nowhere. There are also some welcome", "tokens": [1970, 264, 3673, 7877, 570, 309, 1391, 307, 1143, 11159, 13, 821, 366, 611, 512, 2928], "temperature": 0.0, "avg_logprob": -0.176492622306755, "compression_ratio": 1.558303886925795, "no_speech_prob": 8.477373194182292e-05}, {"id": 51, "seek": 29092, "start": 290.92, "end": 297.2, "text": " changes to Go Dock. You can now make lists, link, and headers inside your Dock comments,", "tokens": [2962, 281, 1037, 1144, 547, 13, 509, 393, 586, 652, 14511, 11, 2113, 11, 293, 45101, 1854, 428, 1144, 547, 3053, 11], "temperature": 0.0, "avg_logprob": -0.22651290893554688, "compression_ratio": 1.5724381625441697, "no_speech_prob": 0.00011744980292860419}, {"id": 52, "seek": 29092, "start": 297.2, "end": 303.08000000000004, "text": " which will be rendered into HTML. Use an example below where I put a header in, I link to the", "tokens": [597, 486, 312, 28748, 666, 17995, 13, 8278, 364, 1365, 2507, 689, 286, 829, 257, 23117, 294, 11, 286, 2113, 281, 264], "temperature": 0.0, "avg_logprob": -0.22651290893554688, "compression_ratio": 1.5724381625441697, "no_speech_prob": 0.00011744980292860419}, {"id": 53, "seek": 29092, "start": 303.08000000000004, "end": 309.44, "text": " RC I'm implementing, and I'm also listing which guys of coffee my machine supports.", "tokens": [28987, 286, 478, 18114, 11, 293, 286, 478, 611, 22161, 597, 1074, 295, 4982, 452, 3479, 9346, 13], "temperature": 0.0, "avg_logprob": -0.22651290893554688, "compression_ratio": 1.5724381625441697, "no_speech_prob": 0.00011744980292860419}, {"id": 54, "seek": 29092, "start": 309.44, "end": 313.96000000000004, "text": " There is also in 119 a new Unix build constraint. If you want to build a file that only will", "tokens": [821, 307, 611, 294, 2975, 24, 257, 777, 1156, 970, 1322, 25534, 13, 759, 291, 528, 281, 1322, 257, 3991, 300, 787, 486], "temperature": 0.0, "avg_logprob": -0.22651290893554688, "compression_ratio": 1.5724381625441697, "no_speech_prob": 0.00011744980292860419}, {"id": 55, "seek": 29092, "start": 313.96000000000004, "end": 319.12, "text": " be built on a Unix system, you can do that using Go column builds. Okay, in the past,", "tokens": [312, 3094, 322, 257, 1156, 970, 1185, 11, 291, 393, 360, 300, 1228, 1037, 7738, 15182, 13, 1033, 11, 294, 264, 1791, 11], "temperature": 0.0, "avg_logprob": -0.22651290893554688, "compression_ratio": 1.5724381625441697, "no_speech_prob": 0.00011744980292860419}, {"id": 56, "seek": 31912, "start": 319.12, "end": 324.12, "text": " you could do it by listing all different Unix systems. There are a lot of them. Okay, that's", "tokens": [291, 727, 360, 309, 538, 22161, 439, 819, 1156, 970, 3652, 13, 821, 366, 257, 688, 295, 552, 13, 1033, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.23855295093781356, "compression_ratio": 1.5224489795918368, "no_speech_prob": 8.296182932099327e-05}, {"id": 57, "seek": 31912, "start": 324.12, "end": 331.84000000000003, "text": " a lot of code, right? Well, in 1 to 19, you can just do Go column build Unix. Wait a minute.", "tokens": [257, 688, 295, 3089, 11, 558, 30, 1042, 11, 294, 502, 281, 1294, 11, 291, 393, 445, 360, 1037, 7738, 1322, 1156, 970, 13, 3802, 257, 3456, 13], "temperature": 0.0, "avg_logprob": -0.23855295093781356, "compression_ratio": 1.5224489795918368, "no_speech_prob": 8.296182932099327e-05}, {"id": 58, "seek": 31912, "start": 331.84000000000003, "end": 336.48, "text": " Isn't this a common thing to do? Because a file system in Unix is almost the same everywhere.", "tokens": [6998, 380, 341, 257, 2689, 551, 281, 360, 30, 1436, 257, 3991, 1185, 294, 1156, 970, 307, 1920, 264, 912, 5315, 13], "temperature": 0.0, "avg_logprob": -0.23855295093781356, "compression_ratio": 1.5224489795918368, "no_speech_prob": 8.296182932099327e-05}, {"id": 59, "seek": 31912, "start": 336.48, "end": 342.64, "text": " Okay, so I asked chatGPT, like every developer does these days. I asked, give me a Unix build", "tokens": [1033, 11, 370, 286, 2351, 5081, 38, 47, 51, 11, 411, 633, 10754, 775, 613, 1708, 13, 286, 2351, 11, 976, 385, 257, 1156, 970, 1322], "temperature": 0.0, "avg_logprob": -0.23855295093781356, "compression_ratio": 1.5224489795918368, "no_speech_prob": 8.296182932099327e-05}, {"id": 60, "seek": 34264, "start": 342.64, "end": 354.28, "text": " constraint, and it gave me this thing. Go build, not Windows. Okay, you all know what's", "tokens": [25534, 11, 293, 309, 2729, 385, 341, 551, 13, 1037, 1322, 11, 406, 8591, 13, 1033, 11, 291, 439, 458, 437, 311], "temperature": 0.0, "avg_logprob": -0.21474506980494448, "compression_ratio": 1.4193548387096775, "no_speech_prob": 5.754418089054525e-05}, {"id": 61, "seek": 34264, "start": 354.28, "end": 360.76, "text": " going to happen, right? Okay, you say, it's an AI, I trust the AI. Let's think tries about", "tokens": [516, 281, 1051, 11, 558, 30, 1033, 11, 291, 584, 11, 309, 311, 364, 7318, 11, 286, 3361, 264, 7318, 13, 961, 311, 519, 9898, 466], "temperature": 0.0, "avg_logprob": -0.21474506980494448, "compression_ratio": 1.4193548387096775, "no_speech_prob": 5.754418089054525e-05}, {"id": 62, "seek": 34264, "start": 360.76, "end": 366.91999999999996, "text": " this. Don't try to be smart and reach the actual compiler code, like every one of you", "tokens": [341, 13, 1468, 380, 853, 281, 312, 4069, 293, 2524, 264, 3539, 31958, 3089, 11, 411, 633, 472, 295, 291], "temperature": 0.0, "avg_logprob": -0.21474506980494448, "compression_ratio": 1.4193548387096775, "no_speech_prob": 5.754418089054525e-05}, {"id": 63, "seek": 36692, "start": 366.92, "end": 374.16, "text": " does all day. And immediately I found this thing. Oh, JavaScript is a thing. WebAssembly,", "tokens": [775, 439, 786, 13, 400, 4258, 286, 1352, 341, 551, 13, 876, 11, 15778, 307, 257, 551, 13, 9573, 10884, 19160, 11], "temperature": 0.0, "avg_logprob": -0.15177988812206236, "compression_ratio": 1.5257731958762886, "no_speech_prob": 4.462960714590736e-05}, {"id": 64, "seek": 36692, "start": 374.16, "end": 378.24, "text": " one important fact I didn't even talk about if Plan 9 is Unix or not. No, I just love", "tokens": [472, 1021, 1186, 286, 994, 380, 754, 751, 466, 498, 8112, 1722, 307, 1156, 970, 420, 406, 13, 883, 11, 286, 445, 959], "temperature": 0.0, "avg_logprob": -0.15177988812206236, "compression_ratio": 1.5257731958762886, "no_speech_prob": 4.462960714590736e-05}, {"id": 65, "seek": 36692, "start": 378.24, "end": 382.92, "text": " like JavaScript. That's not Unix, and it's also not Windows. So just don't trust your", "tokens": [411, 15778, 13, 663, 311, 406, 1156, 970, 11, 293, 309, 311, 611, 406, 8591, 13, 407, 445, 500, 380, 3361, 428], "temperature": 0.0, "avg_logprob": -0.15177988812206236, "compression_ratio": 1.5257731958762886, "no_speech_prob": 4.462960714590736e-05}, {"id": 66, "seek": 36692, "start": 382.92, "end": 389.92, "text": " AI, please. 1.20 ads also coverage on building binaries. Why should you care about this?", "tokens": [7318, 11, 1767, 13, 502, 13, 2009, 10342, 611, 9645, 322, 2390, 5171, 4889, 13, 1545, 820, 291, 1127, 466, 341, 30], "temperature": 0.0, "avg_logprob": -0.15177988812206236, "compression_ratio": 1.5257731958762886, "no_speech_prob": 4.462960714590736e-05}, {"id": 67, "seek": 36692, "start": 389.92, "end": 394.72, "text": " Well, many integration and end-to-end tests, you run them by making a special binary, running", "tokens": [1042, 11, 867, 10980, 293, 917, 12, 1353, 12, 521, 6921, 11, 291, 1190, 552, 538, 1455, 257, 2121, 17434, 11, 2614], "temperature": 0.0, "avg_logprob": -0.15177988812206236, "compression_ratio": 1.5257731958762886, "no_speech_prob": 4.462960714590736e-05}, {"id": 68, "seek": 39472, "start": 394.72, "end": 398.6, "text": " it, and getting your test results. If you also want coverage results, this wasn't possible", "tokens": [309, 11, 293, 1242, 428, 1500, 3542, 13, 759, 291, 611, 528, 9645, 3542, 11, 341, 2067, 380, 1944], "temperature": 0.0, "avg_logprob": -0.25119102950644706, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.1379375539254397e-05}, {"id": 69, "seek": 39472, "start": 398.6, "end": 405.08000000000004, "text": " before. If you now build it with dash cover and at a co-cover deer environment variable,", "tokens": [949, 13, 759, 291, 586, 1322, 309, 365, 8240, 2060, 293, 412, 257, 598, 12, 12516, 17120, 2823, 7006, 11], "temperature": 0.0, "avg_logprob": -0.25119102950644706, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.1379375539254397e-05}, {"id": 70, "seek": 39472, "start": 405.08000000000004, "end": 411.12, "text": " then run the script, okay, you get your output, and you also get which lines all your code", "tokens": [550, 1190, 264, 5755, 11, 1392, 11, 291, 483, 428, 5598, 11, 293, 291, 611, 483, 597, 3876, 439, 428, 3089], "temperature": 0.0, "avg_logprob": -0.25119102950644706, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.1379375539254397e-05}, {"id": 71, "seek": 39472, "start": 411.12, "end": 415.76000000000005, "text": " touched, so you can put it in your site, your favorite coverage tool. There are also a few", "tokens": [9828, 11, 370, 291, 393, 829, 309, 294, 428, 3621, 11, 428, 2954, 9645, 2290, 13, 821, 366, 611, 257, 1326], "temperature": 0.0, "avg_logprob": -0.25119102950644706, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.1379375539254397e-05}, {"id": 72, "seek": 39472, "start": 415.76000000000005, "end": 420.28000000000003, "text": " small changes I want to touch upon. C code will now be disabled if a C tool chain is", "tokens": [1359, 2962, 286, 528, 281, 2557, 3564, 13, 383, 3089, 486, 586, 312, 15191, 498, 257, 383, 2290, 5021, 307], "temperature": 0.0, "avg_logprob": -0.25119102950644706, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.1379375539254397e-05}, {"id": 73, "seek": 42028, "start": 420.28, "end": 425.52, "text": " not found. Many container people will now be happy. Go generate and go test also have", "tokens": [406, 1352, 13, 5126, 10129, 561, 486, 586, 312, 2055, 13, 1037, 8460, 293, 352, 1500, 611, 362], "temperature": 0.0, "avg_logprob": -0.18773856044800813, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.824762072530575e-05}, {"id": 74, "seek": 42028, "start": 425.52, "end": 431.28, "text": " a skip flag, which you can put in the red text for which file to skip. Okay, let's take", "tokens": [257, 10023, 7166, 11, 597, 291, 393, 829, 294, 264, 2182, 2487, 337, 597, 3991, 281, 10023, 13, 1033, 11, 718, 311, 747], "temperature": 0.0, "avg_logprob": -0.18773856044800813, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.824762072530575e-05}, {"id": 75, "seek": 42028, "start": 431.28, "end": 434.71999999999997, "text": " a look at the standard library. Go as many things in the standard library, and of course", "tokens": [257, 574, 412, 264, 3832, 6405, 13, 1037, 382, 867, 721, 294, 264, 3832, 6405, 11, 293, 295, 1164], "temperature": 0.0, "avg_logprob": -0.18773856044800813, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.824762072530575e-05}, {"id": 76, "seek": 42028, "start": 434.71999999999997, "end": 440.76, "text": " we have changes in those every year. The first one is in 1.20, and I find super useful. You", "tokens": [321, 362, 2962, 294, 729, 633, 1064, 13, 440, 700, 472, 307, 294, 502, 13, 2009, 11, 293, 286, 915, 1687, 4420, 13, 509], "temperature": 0.0, "avg_logprob": -0.18773856044800813, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.824762072530575e-05}, {"id": 77, "seek": 42028, "start": 440.76, "end": 447.32, "text": " can now wrap multiple errors. You can do so using error.fmt.errorf. You can now put multiple", "tokens": [393, 586, 7019, 3866, 13603, 13, 509, 393, 360, 370, 1228, 6713, 13, 69, 42744, 13, 260, 2874, 69, 13, 509, 393, 586, 829, 3866], "temperature": 0.0, "avg_logprob": -0.18773856044800813, "compression_ratio": 1.6931818181818181, "no_speech_prob": 4.824762072530575e-05}, {"id": 78, "seek": 44732, "start": 447.32, "end": 451.8, "text": " percent sign w in there. You can just wrap multiple errors. Your functions that you will", "tokens": [3043, 1465, 261, 294, 456, 13, 509, 393, 445, 7019, 3866, 13603, 13, 2260, 6828, 300, 291, 486], "temperature": 0.0, "avg_logprob": -0.16641183801599452, "compression_ratio": 1.7372549019607844, "no_speech_prob": 4.131988680455834e-05}, {"id": 79, "seek": 44732, "start": 451.8, "end": 457.2, "text": " run on them like errors.is or errors.s, just loop over all those errors. It does that by", "tokens": [1190, 322, 552, 411, 13603, 13, 271, 420, 13603, 13, 82, 11, 445, 6367, 670, 439, 729, 13603, 13, 467, 775, 300, 538], "temperature": 0.0, "avg_logprob": -0.16641183801599452, "compression_ratio": 1.7372549019607844, "no_speech_prob": 4.131988680455834e-05}, {"id": 80, "seek": 44732, "start": 457.2, "end": 461.2, "text": " using the underlying new unwrap interface, which just gives you the slice of original", "tokens": [1228, 264, 14217, 777, 14853, 4007, 9226, 11, 597, 445, 2709, 291, 264, 13153, 295, 3380], "temperature": 0.0, "avg_logprob": -0.16641183801599452, "compression_ratio": 1.7372549019607844, "no_speech_prob": 4.131988680455834e-05}, {"id": 81, "seek": 44732, "start": 461.2, "end": 466.12, "text": " errors back. There is also the new errors.join function, which you can just throw all your", "tokens": [13603, 646, 13, 821, 307, 611, 264, 777, 13603, 13, 5134, 259, 2445, 11, 597, 291, 393, 445, 3507, 439, 428], "temperature": 0.0, "avg_logprob": -0.16641183801599452, "compression_ratio": 1.7372549019607844, "no_speech_prob": 4.131988680455834e-05}, {"id": 82, "seek": 44732, "start": 466.12, "end": 471.71999999999997, "text": " errors into. Why would you use this? Okay, you always written a code like this. You just", "tokens": [13603, 666, 13, 1545, 576, 291, 764, 341, 30, 1033, 11, 291, 1009, 3720, 257, 3089, 411, 341, 13, 509, 445], "temperature": 0.0, "avg_logprob": -0.16641183801599452, "compression_ratio": 1.7372549019607844, "no_speech_prob": 4.131988680455834e-05}, {"id": 83, "seek": 47172, "start": 471.72, "end": 477.52000000000004, "text": " loop over a list, and you want to check for some errors. Okay, you could just return a", "tokens": [6367, 670, 257, 1329, 11, 293, 291, 528, 281, 1520, 337, 512, 13603, 13, 1033, 11, 291, 727, 445, 2736, 257], "temperature": 0.0, "avg_logprob": -0.1517272222609747, "compression_ratio": 1.861344537815126, "no_speech_prob": 1.5201561836875044e-05}, {"id": 84, "seek": 47172, "start": 477.52000000000004, "end": 482.04, "text": " slice of error, but then you have to check for the length, if it's not nil, etc. Okay,", "tokens": [13153, 295, 6713, 11, 457, 550, 291, 362, 281, 1520, 337, 264, 4641, 11, 498, 309, 311, 406, 297, 388, 11, 5183, 13, 1033, 11], "temperature": 0.0, "avg_logprob": -0.1517272222609747, "compression_ratio": 1.861344537815126, "no_speech_prob": 1.5201561836875044e-05}, {"id": 85, "seek": 47172, "start": 482.04, "end": 486.12, "text": " you just want a single error out there. You can use errors.join, and you get a list of", "tokens": [291, 445, 528, 257, 2167, 6713, 484, 456, 13, 509, 393, 764, 13603, 13, 5134, 259, 11, 293, 291, 483, 257, 1329, 295], "temperature": 0.0, "avg_logprob": -0.1517272222609747, "compression_ratio": 1.861344537815126, "no_speech_prob": 1.5201561836875044e-05}, {"id": 86, "seek": 47172, "start": 486.12, "end": 490.40000000000003, "text": " all your errors, which are joined together. You can just treat it like a normal error", "tokens": [439, 428, 13603, 11, 597, 366, 6869, 1214, 13, 509, 393, 445, 2387, 309, 411, 257, 2710, 6713], "temperature": 0.0, "avg_logprob": -0.1517272222609747, "compression_ratio": 1.861344537815126, "no_speech_prob": 1.5201561836875044e-05}, {"id": 87, "seek": 47172, "start": 490.40000000000003, "end": 496.0, "text": " in your code, and even use errors.is and errors.us. So you can just say, oh, was there any empty", "tokens": [294, 428, 3089, 11, 293, 754, 764, 13603, 13, 271, 293, 13603, 13, 301, 13, 407, 291, 393, 445, 584, 11, 1954, 11, 390, 456, 604, 6707], "temperature": 0.0, "avg_logprob": -0.1517272222609747, "compression_ratio": 1.861344537815126, "no_speech_prob": 1.5201561836875044e-05}, {"id": 88, "seek": 49600, "start": 496.0, "end": 501.64, "text": " string in this list? There are also a few changes to the strings and byte package, which", "tokens": [6798, 294, 341, 1329, 30, 821, 366, 611, 257, 1326, 2962, 281, 264, 13985, 293, 40846, 7372, 11, 597], "temperature": 0.0, "avg_logprob": -0.18747522149767196, "compression_ratio": 1.7862903225806452, "no_speech_prob": 6.576790474355221e-05}, {"id": 89, "seek": 49600, "start": 501.64, "end": 506.44, "text": " is that it now has a new cut function. It just works as an act trim with trim prefix,", "tokens": [307, 300, 309, 586, 575, 257, 777, 1723, 2445, 13, 467, 445, 1985, 382, 364, 605, 10445, 365, 10445, 46969, 11], "temperature": 0.0, "avg_logprob": -0.18747522149767196, "compression_ratio": 1.7862903225806452, "no_speech_prob": 6.576790474355221e-05}, {"id": 90, "seek": 49600, "start": 506.44, "end": 511.96, "text": " cut prefix, and cut suffix, except it will now return a boolean if a cut has happened.", "tokens": [1723, 46969, 11, 293, 1723, 3889, 970, 11, 3993, 309, 486, 586, 2736, 257, 748, 4812, 282, 498, 257, 1723, 575, 2011, 13], "temperature": 0.0, "avg_logprob": -0.18747522149767196, "compression_ratio": 1.7862903225806452, "no_speech_prob": 6.576790474355221e-05}, {"id": 91, "seek": 49600, "start": 511.96, "end": 517.44, "text": " There is also a clone function, which returns the same instance copied in memory. Also,", "tokens": [821, 307, 611, 257, 26506, 2445, 11, 597, 11247, 264, 912, 5197, 25365, 294, 4675, 13, 2743, 11], "temperature": 0.0, "avg_logprob": -0.18747522149767196, "compression_ratio": 1.7862903225806452, "no_speech_prob": 6.576790474355221e-05}, {"id": 92, "seek": 49600, "start": 517.44, "end": 521.88, "text": " few small changes to the time package. We now have a compare function, which is a combination", "tokens": [1326, 1359, 2962, 281, 264, 565, 7372, 13, 492, 586, 362, 257, 6794, 2445, 11, 597, 307, 257, 6562], "temperature": 0.0, "avg_logprob": -0.18747522149767196, "compression_ratio": 1.7862903225806452, "no_speech_prob": 6.576790474355221e-05}, {"id": 93, "seek": 52188, "start": 521.88, "end": 526.32, "text": " of before and after. It does both. It will return you an integer from either minus one", "tokens": [295, 949, 293, 934, 13, 467, 775, 1293, 13, 467, 486, 2736, 291, 364, 24922, 490, 2139, 3175, 472], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 94, "seek": 52188, "start": 526.32, "end": 532.04, "text": " plus one or zero, depending on if it's before, after, or the same as a given time. There", "tokens": [1804, 472, 420, 4018, 11, 5413, 322, 498, 309, 311, 949, 11, 934, 11, 420, 264, 912, 382, 257, 2212, 565, 13, 821], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 95, "seek": 52188, "start": 532.04, "end": 535.64, "text": " are also three new layout constraints, which you can use, and those actually came from", "tokens": [366, 611, 1045, 777, 13333, 18491, 11, 597, 291, 393, 764, 11, 293, 729, 767, 1361, 490], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 96, "seek": 52188, "start": 535.64, "end": 540.4, "text": " you. Those came from the Go user survey that they are commonly used, so they added time.", "tokens": [291, 13, 3950, 1361, 490, 264, 1037, 4195, 8984, 300, 436, 366, 12719, 1143, 11, 370, 436, 3869, 565, 13], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 97, "seek": 52188, "start": 540.4, "end": 545.48, "text": " There is date time, which gives you an ISO-like notation. There is also date only and time", "tokens": [821, 307, 4002, 565, 11, 597, 2709, 291, 364, 25042, 12, 4092, 24657, 13, 821, 307, 611, 4002, 787, 293, 565], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 98, "seek": 52188, "start": 545.48, "end": 550.44, "text": " only, which gives you only the date and only the time. There is also a change in the TLS", "tokens": [787, 11, 597, 2709, 291, 787, 264, 4002, 293, 787, 264, 565, 13, 821, 307, 611, 257, 1319, 294, 264, 314, 19198], "temperature": 0.0, "avg_logprob": -0.17972326278686523, "compression_ratio": 1.8631578947368421, "no_speech_prob": 1.5427867765538394e-05}, {"id": 99, "seek": 55044, "start": 550.44, "end": 555.44, "text": " package like every edition. This time, it's a change in how it treats memory. It now shares", "tokens": [7372, 411, 633, 11377, 13, 639, 565, 11, 309, 311, 257, 1319, 294, 577, 309, 19566, 4675, 13, 467, 586, 12182], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 100, "seek": 55044, "start": 555.44, "end": 560.2800000000001, "text": " a copy of your certificate in memory. Why is this useful for you? Well, let's say you", "tokens": [257, 5055, 295, 428, 15953, 294, 4675, 13, 1545, 307, 341, 4420, 337, 291, 30, 1042, 11, 718, 311, 584, 291], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 101, "seek": 55044, "start": 560.2800000000001, "end": 565.2800000000001, "text": " have an application that does many concurrent connections, like Kubernetes. Well, until", "tokens": [362, 364, 3861, 300, 775, 867, 37702, 9271, 11, 411, 23145, 13, 1042, 11, 1826], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 102, "seek": 55044, "start": 565.2800000000001, "end": 568.96, "text": " then, now it's sort of a copy of your certificate for every connection in memory. It now is", "tokens": [550, 11, 586, 309, 311, 1333, 295, 257, 5055, 295, 428, 15953, 337, 633, 4984, 294, 4675, 13, 467, 586, 307], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 103, "seek": 55044, "start": 568.96, "end": 573.5600000000001, "text": " sharing those amongst multiple connections, so you are saving memory. If you somehow have", "tokens": [5414, 729, 12918, 3866, 9271, 11, 370, 291, 366, 6816, 4675, 13, 759, 291, 6063, 362], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 104, "seek": 55044, "start": 573.5600000000001, "end": 577.6, "text": " an invalid certificate, you also get a specific error that says the certificate is not valid", "tokens": [364, 34702, 15953, 11, 291, 611, 483, 257, 2685, 6713, 300, 1619, 264, 15953, 307, 406, 7363], "temperature": 0.0, "avg_logprob": -0.15351107788085938, "compression_ratio": 1.8881118881118881, "no_speech_prob": 7.465118687832728e-05}, {"id": 105, "seek": 57760, "start": 577.6, "end": 583.84, "text": " instead of a general error. And yes, we also have breaking changes this edition in the", "tokens": [2602, 295, 257, 2674, 6713, 13, 400, 2086, 11, 321, 611, 362, 7697, 2962, 341, 11377, 294, 264], "temperature": 0.0, "avg_logprob": -0.15839990277156651, "compression_ratio": 1.6718146718146718, "no_speech_prob": 1.6949587006820366e-05}, {"id": 106, "seek": 57760, "start": 583.84, "end": 589.72, "text": " standard library. The first one happened in 119 in the HTTP package. The HTTP client", "tokens": [3832, 6405, 13, 440, 700, 472, 2011, 294, 2975, 24, 294, 264, 33283, 7372, 13, 440, 33283, 6423], "temperature": 0.0, "avg_logprob": -0.15839990277156651, "compression_ratio": 1.6718146718146718, "no_speech_prob": 1.6949587006820366e-05}, {"id": 107, "seek": 57760, "start": 589.72, "end": 594.4, "text": " will now no longer give an error back if you serve a sense of 300 response without the", "tokens": [486, 586, 572, 2854, 976, 364, 6713, 646, 498, 291, 4596, 257, 2020, 295, 6641, 4134, 1553, 264], "temperature": 0.0, "avg_logprob": -0.15839990277156651, "compression_ratio": 1.6718146718146718, "no_speech_prob": 1.6949587006820366e-05}, {"id": 108, "seek": 57760, "start": 594.4, "end": 599.8000000000001, "text": " location header set. If you rely on your code to check if the location is set or not by", "tokens": [4914, 23117, 992, 13, 759, 291, 10687, 322, 428, 3089, 281, 1520, 498, 264, 4914, 307, 992, 420, 406, 538], "temperature": 0.0, "avg_logprob": -0.15839990277156651, "compression_ratio": 1.6718146718146718, "no_speech_prob": 1.6949587006820366e-05}, {"id": 109, "seek": 57760, "start": 599.8000000000001, "end": 605.32, "text": " using this error, yes, your code will break now. Also, a change in the random package.", "tokens": [1228, 341, 6713, 11, 2086, 11, 428, 3089, 486, 1821, 586, 13, 2743, 11, 257, 1319, 294, 264, 4974, 7372, 13], "temperature": 0.0, "avg_logprob": -0.15839990277156651, "compression_ratio": 1.6718146718146718, "no_speech_prob": 1.6949587006820366e-05}, {"id": 110, "seek": 60532, "start": 605.32, "end": 610.44, "text": " It is now preceded when you use the global random functions. You no longer have to call", "tokens": [467, 307, 586, 16969, 292, 562, 291, 764, 264, 4338, 4974, 6828, 13, 509, 572, 2854, 362, 281, 818], "temperature": 0.0, "avg_logprob": -0.14373733841370198, "compression_ratio": 1.8257261410788381, "no_speech_prob": 4.669303962145932e-05}, {"id": 111, "seek": 60532, "start": 610.44, "end": 614.32, "text": " the dot seed function with some random number you get from somewhere. It now does that for", "tokens": [264, 5893, 8871, 2445, 365, 512, 4974, 1230, 291, 483, 490, 4079, 13, 467, 586, 775, 300, 337], "temperature": 0.0, "avg_logprob": -0.14373733841370198, "compression_ratio": 1.8257261410788381, "no_speech_prob": 4.669303962145932e-05}, {"id": 112, "seek": 60532, "start": 614.32, "end": 619.12, "text": " you. Of course, it deprecates the dot seed function. If you still need your own seed", "tokens": [291, 13, 2720, 1164, 11, 309, 1367, 13867, 1024, 264, 5893, 8871, 2445, 13, 759, 291, 920, 643, 428, 1065, 8871], "temperature": 0.0, "avg_logprob": -0.14373733841370198, "compression_ratio": 1.8257261410788381, "no_speech_prob": 4.669303962145932e-05}, {"id": 113, "seek": 60532, "start": 619.12, "end": 625.4000000000001, "text": " for predictable random numbers, you can do so by using the random new function. If this", "tokens": [337, 27737, 4974, 3547, 11, 291, 393, 360, 370, 538, 1228, 264, 4974, 777, 2445, 13, 759, 341], "temperature": 0.0, "avg_logprob": -0.14373733841370198, "compression_ratio": 1.8257261410788381, "no_speech_prob": 4.669303962145932e-05}, {"id": 114, "seek": 60532, "start": 625.4000000000001, "end": 631.24, "text": " somehow breaks your code, it could. You can disable it using this new go debug variable.", "tokens": [6063, 9857, 428, 3089, 11, 309, 727, 13, 509, 393, 28362, 309, 1228, 341, 777, 352, 24083, 7006, 13], "temperature": 0.0, "avg_logprob": -0.14373733841370198, "compression_ratio": 1.8257261410788381, "no_speech_prob": 4.669303962145932e-05}, {"id": 115, "seek": 63124, "start": 631.24, "end": 635.36, "text": " In tar and zip, there are also some changes which are welcome, which is that it will now", "tokens": [682, 3112, 293, 20730, 11, 456, 366, 611, 512, 2962, 597, 366, 2928, 11, 597, 307, 300, 309, 486, 586], "temperature": 0.0, "avg_logprob": -0.20521296773638045, "compression_ratio": 1.6604477611940298, "no_speech_prob": 5.49019496247638e-05}, {"id": 116, "seek": 63124, "start": 635.36, "end": 640.04, "text": " error if your R guy has an absolute pot, an invalid character in a file name, or a reserved", "tokens": [6713, 498, 428, 497, 2146, 575, 364, 8236, 1847, 11, 364, 34702, 2517, 294, 257, 3991, 1315, 11, 420, 257, 24819], "temperature": 0.0, "avg_logprob": -0.20521296773638045, "compression_ratio": 1.6604477611940298, "no_speech_prob": 5.49019496247638e-05}, {"id": 117, "seek": 63124, "start": 640.04, "end": 644.64, "text": " name on the Windows platform. It will now return error in secure pot. This to protect", "tokens": [1315, 322, 264, 8591, 3663, 13, 467, 486, 586, 2736, 6713, 294, 7144, 1847, 13, 639, 281, 2371], "temperature": 0.0, "avg_logprob": -0.20521296773638045, "compression_ratio": 1.6604477611940298, "no_speech_prob": 5.49019496247638e-05}, {"id": 118, "seek": 63124, "start": 644.64, "end": 649.84, "text": " your server from being hacked. If you somehow don't want this, you can also turn it off", "tokens": [428, 7154, 490, 885, 36218, 13, 759, 291, 6063, 500, 380, 528, 341, 11, 291, 393, 611, 1261, 309, 766], "temperature": 0.0, "avg_logprob": -0.20521296773638045, "compression_ratio": 1.6604477611940298, "no_speech_prob": 5.49019496247638e-05}, {"id": 119, "seek": 63124, "start": 649.84, "end": 656.36, "text": " in go debug. There is one new package in the standard library, which is the elliptic curve", "tokens": [294, 352, 24083, 13, 821, 307, 472, 777, 7372, 294, 264, 3832, 6405, 11, 597, 307, 264, 8284, 22439, 299, 7605], "temperature": 0.0, "avg_logprob": -0.20521296773638045, "compression_ratio": 1.6604477611940298, "no_speech_prob": 5.49019496247638e-05}, {"id": 120, "seek": 65636, "start": 656.36, "end": 666.16, "text": " of the helmet gear change. Yay. Very excited. This was possible. Go can do it using the", "tokens": [295, 264, 15922, 7394, 1319, 13, 13268, 13, 4372, 2919, 13, 639, 390, 1944, 13, 1037, 393, 360, 309, 1228, 264], "temperature": 0.0, "avg_logprob": -0.22393734601079202, "compression_ratio": 1.4830508474576272, "no_speech_prob": 8.068054739851505e-05}, {"id": 121, "seek": 65636, "start": 666.16, "end": 671.5600000000001, "text": " lower elliptic one, but you had to implement more yourself. So it's probably more secure", "tokens": [3126, 8284, 22439, 299, 472, 11, 457, 291, 632, 281, 4445, 544, 1803, 13, 407, 309, 311, 1391, 544, 7144], "temperature": 0.0, "avg_logprob": -0.22393734601079202, "compression_ratio": 1.4830508474576272, "no_speech_prob": 8.068054739851505e-05}, {"id": 122, "seek": 65636, "start": 671.5600000000001, "end": 678.44, "text": " than you would. Okay. The go runtime. We also have a few changes in there. Well, go 119", "tokens": [813, 291, 576, 13, 1033, 13, 440, 352, 34474, 13, 492, 611, 362, 257, 1326, 2962, 294, 456, 13, 1042, 11, 352, 2975, 24], "temperature": 0.0, "avg_logprob": -0.22393734601079202, "compression_ratio": 1.4830508474576272, "no_speech_prob": 8.068054739851505e-05}, {"id": 123, "seek": 65636, "start": 678.44, "end": 684.5600000000001, "text": " has a revised memory model, and I have no idea how they did that. I don't know. So if", "tokens": [575, 257, 35228, 4675, 2316, 11, 293, 286, 362, 572, 1558, 577, 436, 630, 300, 13, 286, 500, 380, 458, 13, 407, 498], "temperature": 0.0, "avg_logprob": -0.22393734601079202, "compression_ratio": 1.4830508474576272, "no_speech_prob": 8.068054739851505e-05}, {"id": 124, "seek": 68456, "start": 684.56, "end": 688.28, "text": " you want something, we actually know what he's talking about, Russ Cox wrote an amazing", "tokens": [291, 528, 746, 11, 321, 767, 458, 437, 415, 311, 1417, 466, 11, 3878, 41576, 4114, 364, 2243], "temperature": 0.0, "avg_logprob": -0.20805723625316955, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.744367419742048e-05}, {"id": 125, "seek": 68456, "start": 688.28, "end": 693.16, "text": " blog post about it. But what does this mean for us average go developers and not compiler", "tokens": [6968, 2183, 466, 309, 13, 583, 437, 775, 341, 914, 337, 505, 4274, 352, 8849, 293, 406, 31958], "temperature": 0.0, "avg_logprob": -0.20805723625316955, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.744367419742048e-05}, {"id": 126, "seek": 68456, "start": 693.16, "end": 699.16, "text": " developers? Well, first of all, go now has a soft memory limit. You can now tell go how", "tokens": [8849, 30, 1042, 11, 700, 295, 439, 11, 352, 586, 575, 257, 2787, 4675, 4948, 13, 509, 393, 586, 980, 352, 577], "temperature": 0.0, "avg_logprob": -0.20805723625316955, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.744367419742048e-05}, {"id": 127, "seek": 68456, "start": 699.16, "end": 704.8, "text": " much memory you wanted to maximum use. It's a soft limit. Okay. You can, for example,", "tokens": [709, 4675, 291, 1415, 281, 6674, 764, 13, 467, 311, 257, 2787, 4948, 13, 1033, 13, 509, 393, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.20805723625316955, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.744367419742048e-05}, {"id": 128, "seek": 68456, "start": 704.8, "end": 710.0, "text": " set it to be one gigabyte. Okay. What will happen tomorrow? Go towards one gigabyte limit.", "tokens": [992, 309, 281, 312, 472, 8741, 34529, 13, 1033, 13, 708, 486, 1051, 4153, 30, 1037, 3030, 472, 8741, 34529, 4948, 13], "temperature": 0.0, "avg_logprob": -0.20805723625316955, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.744367419742048e-05}, {"id": 129, "seek": 71000, "start": 710.0, "end": 715.16, "text": " It will try to trigger the garbage collector more to get more memory frets. Yes, you can", "tokens": [467, 486, 853, 281, 7875, 264, 14150, 23960, 544, 281, 483, 544, 4675, 2130, 1373, 13, 1079, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.20880473593006962, "compression_ratio": 1.6492537313432836, "no_speech_prob": 4.640507177100517e-05}, {"id": 130, "seek": 71000, "start": 715.16, "end": 720.08, "text": " see the results if it's too low. Well, what will happen is if it's too much, it will try", "tokens": [536, 264, 3542, 498, 309, 311, 886, 2295, 13, 1042, 11, 437, 486, 1051, 307, 498, 309, 311, 886, 709, 11, 309, 486, 853], "temperature": 0.0, "avg_logprob": -0.20880473593006962, "compression_ratio": 1.6492537313432836, "no_speech_prob": 4.640507177100517e-05}, {"id": 131, "seek": 71000, "start": 720.08, "end": 724.68, "text": " to limit it to 50% of the CPU execution time, which your process is using to be garbage", "tokens": [281, 4948, 309, 281, 2625, 4, 295, 264, 13199, 15058, 565, 11, 597, 428, 1399, 307, 1228, 281, 312, 14150], "temperature": 0.0, "avg_logprob": -0.20880473593006962, "compression_ratio": 1.6492537313432836, "no_speech_prob": 4.640507177100517e-05}, {"id": 132, "seek": 71000, "start": 724.68, "end": 729.2, "text": " collection. There is, however, a warning. If you set it to tens of limit, tens of megabytes,", "tokens": [5765, 13, 821, 307, 11, 4461, 11, 257, 9164, 13, 759, 291, 992, 309, 281, 10688, 295, 4948, 11, 10688, 295, 10816, 24538, 11], "temperature": 0.0, "avg_logprob": -0.20880473593006962, "compression_ratio": 1.6492537313432836, "no_speech_prob": 4.640507177100517e-05}, {"id": 133, "seek": 71000, "start": 729.2, "end": 734.36, "text": " it might just work because your operating system says that's absolutely not enough.", "tokens": [309, 1062, 445, 589, 570, 428, 7447, 1185, 1619, 300, 311, 3122, 406, 1547, 13], "temperature": 0.0, "avg_logprob": -0.20880473593006962, "compression_ratio": 1.6492537313432836, "no_speech_prob": 4.640507177100517e-05}, {"id": 134, "seek": 73436, "start": 734.36, "end": 740.52, "text": " This also results in a new atomic package, which provides low level atomic memory access.", "tokens": [639, 611, 3542, 294, 257, 777, 22275, 7372, 11, 597, 6417, 2295, 1496, 22275, 4675, 2105, 13], "temperature": 0.0, "avg_logprob": -0.23931387428925416, "compression_ratio": 1.650735294117647, "no_speech_prob": 1.7474292690167204e-05}, {"id": 135, "seek": 73436, "start": 740.52, "end": 744.96, "text": " So you could now access these variables in multiple go routines. It works only for primitives", "tokens": [407, 291, 727, 586, 2105, 613, 9102, 294, 3866, 352, 33827, 13, 467, 1985, 787, 337, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.23931387428925416, "compression_ratio": 1.650735294117647, "no_speech_prob": 1.7474292690167204e-05}, {"id": 136, "seek": 73436, "start": 744.96, "end": 750.28, "text": " like integers, booleans, and unsafe pointers. It does this by exposing the function store", "tokens": [411, 41674, 11, 748, 4812, 599, 11, 293, 35948, 44548, 13, 467, 775, 341, 538, 33178, 264, 2445, 3531], "temperature": 0.0, "avg_logprob": -0.23931387428925416, "compression_ratio": 1.650735294117647, "no_speech_prob": 1.7474292690167204e-05}, {"id": 137, "seek": 73436, "start": 750.28, "end": 757.5600000000001, "text": " and load. Also add for integers and compare and compare and swap. Okay. But if you use", "tokens": [293, 3677, 13, 2743, 909, 337, 41674, 293, 6794, 293, 6794, 293, 18135, 13, 1033, 13, 583, 498, 291, 764], "temperature": 0.0, "avg_logprob": -0.23931387428925416, "compression_ratio": 1.650735294117647, "no_speech_prob": 1.7474292690167204e-05}, {"id": 138, "seek": 73436, "start": 757.5600000000001, "end": 762.64, "text": " these, you need to know exactly what you're doing. You need to know how our topics work.", "tokens": [613, 11, 291, 643, 281, 458, 2293, 437, 291, 434, 884, 13, 509, 643, 281, 458, 577, 527, 8378, 589, 13], "temperature": 0.0, "avg_logprob": -0.23931387428925416, "compression_ratio": 1.650735294117647, "no_speech_prob": 1.7474292690167204e-05}, {"id": 139, "seek": 76264, "start": 762.64, "end": 769.6, "text": " As always. And it's still not really recommended. They recommend that you still share memory", "tokens": [1018, 1009, 13, 400, 309, 311, 920, 406, 534, 9628, 13, 814, 2748, 300, 291, 920, 2073, 4675], "temperature": 0.0, "avg_logprob": -0.21230054975629928, "compression_ratio": 1.6678966789667897, "no_speech_prob": 3.21737679769285e-05}, {"id": 140, "seek": 76264, "start": 769.6, "end": 774.08, "text": " by communicating, for example, with channels and not communicate by sharing memory. So", "tokens": [538, 17559, 11, 337, 1365, 11, 365, 9235, 293, 406, 7890, 538, 5414, 4675, 13, 407], "temperature": 0.0, "avg_logprob": -0.21230054975629928, "compression_ratio": 1.6678966789667897, "no_speech_prob": 3.21737679769285e-05}, {"id": 141, "seek": 76264, "start": 774.08, "end": 779.92, "text": " please only use this as if this is your only option. Go 1.20 has a few small changes in", "tokens": [1767, 787, 764, 341, 382, 498, 341, 307, 428, 787, 3614, 13, 1037, 502, 13, 2009, 575, 257, 1326, 1359, 2962, 294], "temperature": 0.0, "avg_logprob": -0.21230054975629928, "compression_ratio": 1.6678966789667897, "no_speech_prob": 3.21737679769285e-05}, {"id": 142, "seek": 76264, "start": 779.92, "end": 784.52, "text": " the runtime. The garbage collector got better yet again. Say this every year for five years,", "tokens": [264, 34474, 13, 440, 14150, 23960, 658, 1101, 1939, 797, 13, 6463, 341, 633, 1064, 337, 1732, 924, 11], "temperature": 0.0, "avg_logprob": -0.21230054975629928, "compression_ratio": 1.6678966789667897, "no_speech_prob": 3.21737679769285e-05}, {"id": 143, "seek": 76264, "start": 784.52, "end": 789.48, "text": " it got better. And it is now a Leatheretic. There is also a new mode, which you can compile", "tokens": [309, 658, 1101, 13, 400, 309, 307, 586, 257, 1456, 1172, 3532, 13, 821, 307, 611, 257, 777, 4391, 11, 597, 291, 393, 31413], "temperature": 0.0, "avg_logprob": -0.21230054975629928, "compression_ratio": 1.6678966789667897, "no_speech_prob": 3.21737679769285e-05}, {"id": 144, "seek": 78948, "start": 789.48, "end": 793.32, "text": " the binaries in, which is P go, which you can give it a profile of your program that", "tokens": [264, 5171, 4889, 294, 11, 597, 307, 430, 352, 11, 597, 291, 393, 976, 309, 257, 7964, 295, 428, 1461, 300], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 145, "seek": 78948, "start": 793.32, "end": 798.28, "text": " has been running, which will now will try to optimize the binary towards your CPU profile", "tokens": [575, 668, 2614, 11, 597, 486, 586, 486, 853, 281, 19719, 264, 17434, 3030, 428, 13199, 7964], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 146, "seek": 78948, "start": 798.28, "end": 803.88, "text": " from a previous run by, for example, inlining frequently called functions. The go team claims", "tokens": [490, 257, 3894, 1190, 538, 11, 337, 1365, 11, 294, 31079, 10374, 1219, 6828, 13, 440, 352, 1469, 9441], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 147, "seek": 78948, "start": 803.88, "end": 807.64, "text": " that is up to 4% faster. I had some colleagues who were looking into this, but not in time", "tokens": [300, 307, 493, 281, 1017, 4, 4663, 13, 286, 632, 512, 7734, 567, 645, 1237, 666, 341, 11, 457, 406, 294, 565], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 148, "seek": 78948, "start": 807.64, "end": 815.2, "text": " to get actual benchmarks. At last, I want to give you a small update on go ports. So", "tokens": [281, 483, 3539, 43751, 13, 1711, 1036, 11, 286, 528, 281, 976, 291, 257, 1359, 5623, 322, 352, 18160, 13, 407], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 149, "seek": 78948, "start": 815.2, "end": 819.24, "text": " what is happening on the ports in go? Well, go 1.19 added a new processor architecture", "tokens": [437, 307, 2737, 322, 264, 18160, 294, 352, 30, 1042, 11, 352, 502, 13, 3405, 3869, 257, 777, 15321, 9482], "temperature": 0.0, "avg_logprob": -0.2041386703946697, "compression_ratio": 1.5945945945945945, "no_speech_prob": 4.1259121644543484e-05}, {"id": 150, "seek": 81924, "start": 819.24, "end": 824.08, "text": " on Linux, which is long arc. It's a Chinese built architecture. It's not yet in white", "tokens": [322, 18734, 11, 597, 307, 938, 10346, 13, 467, 311, 257, 4649, 3094, 9482, 13, 467, 311, 406, 1939, 294, 2418], "temperature": 0.0, "avg_logprob": -0.23840304254328162, "compression_ratio": 1.5108225108225108, "no_speech_prob": 7.128278957679868e-05}, {"id": 151, "seek": 81924, "start": 824.08, "end": 834.08, "text": " use hour. Go 1.20 will be the last one to support Windows 7 and 8. It will also be the", "tokens": [764, 1773, 13, 1037, 502, 13, 2009, 486, 312, 264, 1036, 472, 281, 1406, 8591, 1614, 293, 1649, 13, 467, 486, 611, 312, 264], "temperature": 0.0, "avg_logprob": -0.23840304254328162, "compression_ratio": 1.5108225108225108, "no_speech_prob": 7.128278957679868e-05}, {"id": 152, "seek": 81924, "start": 834.08, "end": 840.96, "text": " last one to support Mac OS 10.13 and 10.14, but who cares? Go 1.20 also has experimental", "tokens": [1036, 472, 281, 1406, 5707, 12731, 1266, 13, 7668, 293, 1266, 13, 7271, 11, 457, 567, 12310, 30, 1037, 502, 13, 2009, 611, 575, 17069], "temperature": 0.0, "avg_logprob": -0.23840304254328162, "compression_ratio": 1.5108225108225108, "no_speech_prob": 7.128278957679868e-05}, {"id": 153, "seek": 81924, "start": 840.96, "end": 847.96, "text": " support for RISC 5 and the free BSD platform. Yay. Okay. That is the current version of", "tokens": [1406, 337, 497, 2343, 34, 1025, 293, 264, 1737, 363, 23969, 3663, 13, 13268, 13, 1033, 13, 663, 307, 264, 2190, 3037, 295], "temperature": 0.0, "avg_logprob": -0.23840304254328162, "compression_ratio": 1.5108225108225108, "no_speech_prob": 7.128278957679868e-05}, {"id": 154, "seek": 84796, "start": 847.96, "end": 852.88, "text": " go. But of course, let's take a look at the future. And always we try to look in the future.", "tokens": [352, 13, 583, 295, 1164, 11, 718, 311, 747, 257, 574, 412, 264, 2027, 13, 400, 1009, 321, 853, 281, 574, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.18859976429050251, "compression_ratio": 1.75, "no_speech_prob": 0.00012134975258959457}, {"id": 155, "seek": 84796, "start": 852.88, "end": 858.12, "text": " It won't always work. I have two interesting design drafts, which I found. The first one", "tokens": [467, 1582, 380, 1009, 589, 13, 286, 362, 732, 1880, 1715, 11206, 82, 11, 597, 286, 1352, 13, 440, 700, 472], "temperature": 0.0, "avg_logprob": -0.18859976429050251, "compression_ratio": 1.75, "no_speech_prob": 0.00012134975258959457}, {"id": 156, "seek": 84796, "start": 858.12, "end": 863.2800000000001, "text": " is one for structured logging, something you all do, but doesn't work in the standard library.", "tokens": [307, 472, 337, 18519, 27991, 11, 746, 291, 439, 360, 11, 457, 1177, 380, 589, 294, 264, 3832, 6405, 13], "temperature": 0.0, "avg_logprob": -0.18859976429050251, "compression_ratio": 1.75, "no_speech_prob": 0.00012134975258959457}, {"id": 157, "seek": 84796, "start": 863.2800000000001, "end": 868.6, "text": " There is a proposal to make an S log package in log in a standard library. They want this", "tokens": [821, 307, 257, 11494, 281, 652, 364, 318, 3565, 7372, 294, 3565, 294, 257, 3832, 6405, 13, 814, 528, 341], "temperature": 0.0, "avg_logprob": -0.18859976429050251, "compression_ratio": 1.75, "no_speech_prob": 0.00012134975258959457}, {"id": 158, "seek": 84796, "start": 868.6, "end": 873.84, "text": " to produce machine readable logging. And it hopes to replace the many, many, many, many,", "tokens": [281, 5258, 3479, 49857, 27991, 13, 400, 309, 13681, 281, 7406, 264, 867, 11, 867, 11, 867, 11, 867, 11], "temperature": 0.0, "avg_logprob": -0.18859976429050251, "compression_ratio": 1.75, "no_speech_prob": 0.00012134975258959457}, {"id": 159, "seek": 87384, "start": 873.84, "end": 878.12, "text": " many structured logging libraries like log RISC that ZLog, log arc, log, HLOc, and however", "tokens": [867, 18519, 27991, 15148, 411, 3565, 497, 2343, 34, 300, 1176, 43, 664, 11, 3565, 10346, 11, 3565, 11, 389, 20184, 66, 11, 293, 4461], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 160, "seek": 87384, "start": 878.12, "end": 883.4, "text": " you pronounce all those. It tries to propose something like this. Something like every", "tokens": [291, 19567, 439, 729, 13, 467, 9898, 281, 17421, 746, 411, 341, 13, 6595, 411, 633], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 161, "seek": 87384, "start": 883.4, "end": 886.84, "text": " library probably already did is you set up for something, you set up what you want to", "tokens": [6405, 1391, 1217, 630, 307, 291, 992, 493, 337, 746, 11, 291, 992, 493, 437, 291, 528, 281], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 162, "seek": 87384, "start": 886.84, "end": 891.88, "text": " send it to, you put in messages, you put in variables, and it logs those out in something", "tokens": [2845, 309, 281, 11, 291, 829, 294, 7897, 11, 291, 829, 294, 9102, 11, 293, 309, 20820, 729, 484, 294, 746], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 163, "seek": 87384, "start": 891.88, "end": 897.52, "text": " that is machine readable. This is the text output, which is just key value peps. So your", "tokens": [300, 307, 3479, 49857, 13, 639, 307, 264, 2487, 5598, 11, 597, 307, 445, 2141, 2158, 520, 1878, 13, 407, 428], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 164, "seek": 87384, "start": 897.52, "end": 902.5600000000001, "text": " computers can all read it and can index it and make it searchable. How does it want to", "tokens": [10807, 393, 439, 1401, 309, 293, 393, 8186, 309, 293, 652, 309, 3164, 712, 13, 1012, 775, 309, 528, 281], "temperature": 0.2, "avg_logprob": -0.2784901654278791, "compression_ratio": 1.7993197278911566, "no_speech_prob": 6.899264553794637e-05}, {"id": 165, "seek": 90256, "start": 902.56, "end": 908.1999999999999, "text": " do this? It wants to give you a logger interface. Again, these are all interfaces. You can just", "tokens": [360, 341, 30, 467, 2738, 281, 976, 291, 257, 3565, 1321, 9226, 13, 3764, 11, 613, 366, 439, 28416, 13, 509, 393, 445], "temperature": 0.0, "avg_logprob": -0.15010730498427644, "compression_ratio": 1.6641509433962265, "no_speech_prob": 6.790741463191807e-05}, {"id": 166, "seek": 90256, "start": 908.1999999999999, "end": 912.7199999999999, "text": " implement them in your own library. Okay, it wants to give you fellow functions like", "tokens": [4445, 552, 294, 428, 1065, 6405, 13, 1033, 11, 309, 2738, 281, 976, 291, 7177, 6828, 411], "temperature": 0.0, "avg_logprob": -0.15010730498427644, "compression_ratio": 1.6641509433962265, "no_speech_prob": 6.790741463191807e-05}, {"id": 167, "seek": 90256, "start": 912.7199999999999, "end": 919.8, "text": " info, error, warning, log attributes. It then makes those into a record. This is just a", "tokens": [13614, 11, 6713, 11, 9164, 11, 3565, 17212, 13, 467, 550, 1669, 729, 666, 257, 2136, 13, 639, 307, 445, 257], "temperature": 0.0, "avg_logprob": -0.15010730498427644, "compression_ratio": 1.6641509433962265, "no_speech_prob": 6.790741463191807e-05}, {"id": 168, "seek": 90256, "start": 919.8, "end": 924.52, "text": " track containing all this data, and you give this record to a handler, and this handler", "tokens": [2837, 19273, 439, 341, 1412, 11, 293, 291, 976, 341, 2136, 281, 257, 41967, 11, 293, 341, 41967], "temperature": 0.0, "avg_logprob": -0.15010730498427644, "compression_ratio": 1.6641509433962265, "no_speech_prob": 6.790741463191807e-05}, {"id": 169, "seek": 90256, "start": 924.52, "end": 928.4, "text": " will turn it into something that's machine readable. If you want JSON, you just give", "tokens": [486, 1261, 309, 666, 746, 300, 311, 3479, 49857, 13, 759, 291, 528, 31828, 11, 291, 445, 976], "temperature": 0.0, "avg_logprob": -0.15010730498427644, "compression_ratio": 1.6641509433962265, "no_speech_prob": 6.790741463191807e-05}, {"id": 170, "seek": 92840, "start": 928.4, "end": 933.6, "text": " it to a JSON handler. If you want some proprietary format, you just make your own. So it tries", "tokens": [309, 281, 257, 31828, 41967, 13, 759, 291, 528, 512, 38992, 7877, 11, 291, 445, 652, 428, 1065, 13, 407, 309, 9898], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 171, "seek": 92840, "start": 933.6, "end": 936.84, "text": " to give you an implementation and interfaces in the standard library for different log", "tokens": [281, 976, 291, 364, 11420, 293, 28416, 294, 264, 3832, 6405, 337, 819, 3565], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 172, "seek": 92840, "start": 936.84, "end": 942.4399999999999, "text": " levels like debug, info, warning, error, passing in data to be printed out, and now putting", "tokens": [4358, 411, 24083, 11, 13614, 11, 9164, 11, 6713, 11, 8437, 294, 1412, 281, 312, 13567, 484, 11, 293, 586, 3372], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 173, "seek": 92840, "start": 942.4399999999999, "end": 948.0, "text": " it into text in JSON and maybe more formats. Again, this is a design proposal. It's not", "tokens": [309, 666, 2487, 294, 31828, 293, 1310, 544, 25879, 13, 3764, 11, 341, 307, 257, 1715, 11494, 13, 467, 311, 406], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 174, "seek": 92840, "start": 948.0, "end": 952.92, "text": " yet implemented anywhere. If you have strong opinions about logging, you can read the full", "tokens": [1939, 12270, 4992, 13, 759, 291, 362, 2068, 11819, 466, 27991, 11, 291, 393, 1401, 264, 1577], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 175, "seek": 92840, "start": 952.92, "end": 958.24, "text": " proposal on this link. I will publish the site of FOSDM later today, and you can go", "tokens": [11494, 322, 341, 2113, 13, 286, 486, 11374, 264, 3621, 295, 479, 4367, 35, 44, 1780, 965, 11, 293, 291, 393, 352], "temperature": 0.0, "avg_logprob": -0.18594931100161022, "compression_ratio": 1.6594427244582044, "no_speech_prob": 3.401418507564813e-05}, {"id": 176, "seek": 95824, "start": 958.24, "end": 963.16, "text": " there, read everything about it, and leave some comments in their issue tracker.", "tokens": [456, 11, 1401, 1203, 466, 309, 11, 293, 1856, 512, 3053, 294, 641, 2734, 37516, 13], "temperature": 0.0, "avg_logprob": -0.18330323254620587, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.4254966774606146e-05}, {"id": 177, "seek": 95824, "start": 963.16, "end": 966.8, "text": " The next big thing they want to tackle is Go version compatibility. Why do they want", "tokens": [440, 958, 955, 551, 436, 528, 281, 14896, 307, 1037, 3037, 34237, 13, 1545, 360, 436, 528], "temperature": 0.0, "avg_logprob": -0.18330323254620587, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.4254966774606146e-05}, {"id": 178, "seek": 95824, "start": 966.8, "end": 974.0, "text": " to do that? Well, we've been doing this talk ever since 2015. A lot has changed, bigger", "tokens": [281, 360, 300, 30, 1042, 11, 321, 600, 668, 884, 341, 751, 1562, 1670, 7546, 13, 316, 688, 575, 3105, 11, 3801], "temperature": 0.0, "avg_logprob": -0.18330323254620587, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.4254966774606146e-05}, {"id": 179, "seek": 95824, "start": 974.0, "end": 978.64, "text": " room, different speakers, and especially different slide templates, but there's one thing that", "tokens": [1808, 11, 819, 9518, 11, 293, 2318, 819, 4137, 21165, 11, 457, 456, 311, 472, 551, 300], "temperature": 0.0, "avg_logprob": -0.18330323254620587, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.4254966774606146e-05}, {"id": 180, "seek": 95824, "start": 978.64, "end": 985.08, "text": " always stayed the same. It's this slide. Freaking changes. We wait a minute, Marcia. Isn't", "tokens": [1009, 9181, 264, 912, 13, 467, 311, 341, 4137, 13, 6142, 2456, 2962, 13, 492, 1699, 257, 3456, 11, 2039, 2755, 13, 6998, 380], "temperature": 0.0, "avg_logprob": -0.18330323254620587, "compression_ratio": 1.6080586080586081, "no_speech_prob": 2.4254966774606146e-05}, {"id": 181, "seek": 98508, "start": 985.08, "end": 991.1600000000001, "text": " there the Go 1.0 compatibility promise? And yes. Well, Go's emphasis on backwards compatibility", "tokens": [456, 264, 1037, 502, 13, 15, 34237, 6228, 30, 400, 2086, 13, 1042, 11, 1037, 311, 16271, 322, 12204, 34237], "temperature": 0.0, "avg_logprob": -0.14627216098544835, "compression_ratio": 1.5729166666666667, "no_speech_prob": 9.872083319351077e-05}, {"id": 182, "seek": 98508, "start": 991.1600000000001, "end": 995.08, "text": " is why we all use Go, because we don't have to rewrite our whole application every two", "tokens": [307, 983, 321, 439, 764, 1037, 11, 570, 321, 500, 380, 362, 281, 28132, 527, 1379, 3861, 633, 732], "temperature": 0.0, "avg_logprob": -0.14627216098544835, "compression_ratio": 1.5729166666666667, "no_speech_prob": 9.872083319351077e-05}, {"id": 183, "seek": 98508, "start": 995.08, "end": 1000.12, "text": " years. However, there are times which is not possible, for example, with external security", "tokens": [924, 13, 2908, 11, 456, 366, 1413, 597, 307, 406, 1944, 11, 337, 1365, 11, 365, 8320, 3825], "temperature": 0.0, "avg_logprob": -0.14627216098544835, "compression_ratio": 1.5729166666666667, "no_speech_prob": 9.872083319351077e-05}, {"id": 184, "seek": 98508, "start": 1000.12, "end": 1005.8000000000001, "text": " dependencies or just bugs that we have to fix. Okay, let's take a look at this in practice.", "tokens": [36606, 420, 445, 15120, 300, 321, 362, 281, 3191, 13, 1033, 11, 718, 311, 747, 257, 574, 412, 341, 294, 3124, 13], "temperature": 0.0, "avg_logprob": -0.14627216098544835, "compression_ratio": 1.5729166666666667, "no_speech_prob": 9.872083319351077e-05}, {"id": 185, "seek": 98508, "start": 1005.8000000000001, "end": 1011.08, "text": " Let's look at the big Go project. Kubernetes again. When did Go break Kubernetes? Well,", "tokens": [961, 311, 574, 412, 264, 955, 1037, 1716, 13, 23145, 797, 13, 1133, 630, 1037, 1821, 23145, 30, 1042, 11], "temperature": 0.0, "avg_logprob": -0.14627216098544835, "compression_ratio": 1.5729166666666667, "no_speech_prob": 9.872083319351077e-05}, {"id": 186, "seek": 101108, "start": 1011.08, "end": 1016.5600000000001, "text": " more than you think. Just in the last version, Go 115 broke Kubernetes in some way by deprecating", "tokens": [544, 813, 291, 519, 13, 1449, 294, 264, 1036, 3037, 11, 1037, 39436, 6902, 23145, 294, 512, 636, 538, 1367, 13867, 990], "temperature": 0.0, "avg_logprob": -0.28755708342617, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.0002698955649975687}, {"id": 187, "seek": 101108, "start": 1016.5600000000001, "end": 1024.56, "text": " the X509 company. 117, a bug fix in that part's IP broke it again. In 118, again, X509 broke", "tokens": [264, 1783, 2803, 24, 2237, 13, 2975, 22, 11, 257, 7426, 3191, 294, 300, 644, 311, 8671, 6902, 309, 797, 13, 682, 2975, 23, 11, 797, 11, 1783, 2803, 24, 6902], "temperature": 0.0, "avg_logprob": -0.28755708342617, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.0002698955649975687}, {"id": 188, "seek": 101108, "start": 1024.56, "end": 1029.1200000000001, "text": " Kubernetes again because Go changed something, they deprecated something. And in 119, a bug", "tokens": [23145, 797, 570, 1037, 3105, 746, 11, 436, 1367, 13867, 770, 746, 13, 400, 294, 2975, 24, 11, 257, 7426], "temperature": 0.0, "avg_logprob": -0.28755708342617, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.0002698955649975687}, {"id": 189, "seek": 101108, "start": 1029.1200000000001, "end": 1035.72, "text": " fix in loop path also broke Kubernetes. Oops. Of course, it's impossible not to break Kubernetes", "tokens": [3191, 294, 6367, 3100, 611, 6902, 23145, 13, 21726, 13, 2720, 1164, 11, 309, 311, 6243, 406, 281, 1821, 23145], "temperature": 0.0, "avg_logprob": -0.28755708342617, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.0002698955649975687}, {"id": 190, "seek": 103572, "start": 1035.72, "end": 1044.16, "text": " somehow. But still, let's try to avoid this in a language. So we have a solution, and", "tokens": [6063, 13, 583, 920, 11, 718, 311, 853, 281, 5042, 341, 294, 257, 2856, 13, 407, 321, 362, 257, 3827, 11, 293], "temperature": 0.0, "avg_logprob": -0.17422437238263655, "compression_ratio": 1.6515151515151516, "no_speech_prob": 6.193439185153693e-05}, {"id": 191, "seek": 103572, "start": 1044.16, "end": 1047.76, "text": " it's a solution already we have today. Is that Go debug flag I've been showing on my", "tokens": [309, 311, 257, 3827, 1217, 321, 362, 965, 13, 1119, 300, 1037, 24083, 7166, 286, 600, 668, 4099, 322, 452], "temperature": 0.0, "avg_logprob": -0.17422437238263655, "compression_ratio": 1.6515151515151516, "no_speech_prob": 6.193439185153693e-05}, {"id": 192, "seek": 103572, "start": 1047.76, "end": 1053.56, "text": " slides? Okay, what is this proposal? It is to commit to adding one of these Go debug", "tokens": [9788, 30, 1033, 11, 437, 307, 341, 11494, 30, 467, 307, 281, 5599, 281, 5127, 472, 295, 613, 1037, 24083], "temperature": 0.0, "avg_logprob": -0.17422437238263655, "compression_ratio": 1.6515151515151516, "no_speech_prob": 6.193439185153693e-05}, {"id": 193, "seek": 103572, "start": 1053.56, "end": 1057.92, "text": " flags to every breaking change in the following releases. And also to guarantee that they'll", "tokens": [23265, 281, 633, 7697, 1319, 294, 264, 3480, 16952, 13, 400, 611, 281, 10815, 300, 436, 603], "temperature": 0.0, "avg_logprob": -0.17422437238263655, "compression_ratio": 1.6515151515151516, "no_speech_prob": 6.193439185153693e-05}, {"id": 194, "seek": 103572, "start": 1057.92, "end": 1063.1200000000001, "text": " stay there for a few years or maybe forever. They also want to add metrics to it so you", "tokens": [1754, 456, 337, 257, 1326, 924, 420, 1310, 5680, 13, 814, 611, 528, 281, 909, 16367, 281, 309, 370, 291], "temperature": 0.0, "avg_logprob": -0.17422437238263655, "compression_ratio": 1.6515151515151516, "no_speech_prob": 6.193439185153693e-05}, {"id": 195, "seek": 106312, "start": 1063.12, "end": 1067.56, "text": " can look at your program and see how many of those are there that you have to fix. And", "tokens": [393, 574, 412, 428, 1461, 293, 536, 577, 867, 295, 729, 366, 456, 300, 291, 362, 281, 3191, 13, 400], "temperature": 0.0, "avg_logprob": -0.16214332580566407, "compression_ratio": 1.618705035971223, "no_speech_prob": 6.583007052540779e-05}, {"id": 196, "seek": 106312, "start": 1067.56, "end": 1073.1999999999998, "text": " also to put it in code so you can use Go call and debug to override it inside the code yourself.", "tokens": [611, 281, 829, 309, 294, 3089, 370, 291, 393, 764, 1037, 818, 293, 24083, 281, 42321, 309, 1854, 264, 3089, 1803, 13], "temperature": 0.0, "avg_logprob": -0.16214332580566407, "compression_ratio": 1.618705035971223, "no_speech_prob": 6.583007052540779e-05}, {"id": 197, "seek": 106312, "start": 1073.1999999999998, "end": 1077.36, "text": " Again, this is not yet fully implemented. There is a design proposal. You can read everything", "tokens": [3764, 11, 341, 307, 406, 1939, 4498, 12270, 13, 821, 307, 257, 1715, 11494, 13, 509, 393, 1401, 1203], "temperature": 0.0, "avg_logprob": -0.16214332580566407, "compression_ratio": 1.618705035971223, "no_speech_prob": 6.583007052540779e-05}, {"id": 198, "seek": 106312, "start": 1077.36, "end": 1082.56, "text": " on the link there and leave any comments. But wait a minute, Marcia, don't we already", "tokens": [322, 264, 2113, 456, 293, 1856, 604, 3053, 13, 583, 1699, 257, 3456, 11, 2039, 2755, 11, 500, 380, 321, 1217], "temperature": 0.0, "avg_logprob": -0.16214332580566407, "compression_ratio": 1.618705035971223, "no_speech_prob": 6.583007052540779e-05}, {"id": 199, "seek": 106312, "start": 1082.56, "end": 1087.12, "text": " have this? I have to specify that Go version in my modules file, right? Yeah, but what", "tokens": [362, 341, 30, 286, 362, 281, 16500, 300, 1037, 3037, 294, 452, 16679, 3991, 11, 558, 30, 865, 11, 457, 437], "temperature": 0.0, "avg_logprob": -0.16214332580566407, "compression_ratio": 1.618705035971223, "no_speech_prob": 6.583007052540779e-05}, {"id": 200, "seek": 108712, "start": 1087.12, "end": 1093.76, "text": " does it actually do? Oh, I know. This says the minimum Go version to build it. No. It", "tokens": [775, 309, 767, 360, 30, 876, 11, 286, 458, 13, 639, 1619, 264, 7285, 1037, 3037, 281, 1322, 309, 13, 883, 13, 467], "temperature": 0.0, "avg_logprob": -0.19980322054731167, "compression_ratio": 1.7991803278688525, "no_speech_prob": 3.0212762794690207e-05}, {"id": 201, "seek": 108712, "start": 1093.76, "end": 1098.9599999999998, "text": " will try, any version will just try to build it. It's just a suggestion. It might fail.", "tokens": [486, 853, 11, 604, 3037, 486, 445, 853, 281, 1322, 309, 13, 467, 311, 445, 257, 16541, 13, 467, 1062, 3061, 13], "temperature": 0.0, "avg_logprob": -0.19980322054731167, "compression_ratio": 1.7991803278688525, "no_speech_prob": 3.0212762794690207e-05}, {"id": 202, "seek": 108712, "start": 1098.9599999999998, "end": 1105.32, "text": " Oh, I know. It says a Go version in which it uses. Also, no, sorry. It uses the installed", "tokens": [876, 11, 286, 458, 13, 467, 1619, 257, 1037, 3037, 294, 597, 309, 4960, 13, 2743, 11, 572, 11, 2597, 13, 467, 4960, 264, 8899], "temperature": 0.0, "avg_logprob": -0.19980322054731167, "compression_ratio": 1.7991803278688525, "no_speech_prob": 3.0212762794690207e-05}, {"id": 203, "seek": 108712, "start": 1105.32, "end": 1109.8799999999999, "text": " version on your laptop. Nothing else. Oh, did I know. This says the semantic rule set", "tokens": [3037, 322, 428, 10732, 13, 6693, 1646, 13, 876, 11, 630, 286, 458, 13, 639, 1619, 264, 47982, 4978, 992], "temperature": 0.0, "avg_logprob": -0.19980322054731167, "compression_ratio": 1.7991803278688525, "no_speech_prob": 3.0212762794690207e-05}, {"id": 204, "seek": 108712, "start": 1109.8799999999999, "end": 1115.1599999999999, "text": " for the version. And yes, that is correct. But only the semantic rule set. So that slides", "tokens": [337, 264, 3037, 13, 400, 2086, 11, 300, 307, 3006, 13, 583, 787, 264, 47982, 4978, 992, 13, 407, 300, 9788], "temperature": 0.0, "avg_logprob": -0.19980322054731167, "compression_ratio": 1.7991803278688525, "no_speech_prob": 3.0212762794690207e-05}, {"id": 205, "seek": 111516, "start": 1115.16, "end": 1119.1200000000001, "text": " to array conversion. Yes, that is set by this flag. The octal numbers which got added", "tokens": [281, 10225, 14298, 13, 1079, 11, 300, 307, 992, 538, 341, 7166, 13, 440, 13350, 304, 3547, 597, 658, 3869], "temperature": 0.0, "avg_logprob": -0.15565755544615187, "compression_ratio": 1.79296875, "no_speech_prob": 3.267317879362963e-05}, {"id": 206, "seek": 111516, "start": 1119.1200000000001, "end": 1124.2, "text": " two years ago. Yes, that is also checked by this flag. But that's all. Okay, they want", "tokens": [732, 924, 2057, 13, 1079, 11, 300, 307, 611, 10033, 538, 341, 7166, 13, 583, 300, 311, 439, 13, 1033, 11, 436, 528], "temperature": 0.0, "avg_logprob": -0.15565755544615187, "compression_ratio": 1.79296875, "no_speech_prob": 3.267317879362963e-05}, {"id": 207, "seek": 111516, "start": 1124.2, "end": 1129.96, "text": " to change this. And this is the Go toolchain proposal. They want to add a Go toolchain environment", "tokens": [281, 1319, 341, 13, 400, 341, 307, 264, 1037, 2290, 11509, 11494, 13, 814, 528, 281, 909, 257, 1037, 2290, 11509, 2823], "temperature": 0.0, "avg_logprob": -0.15565755544615187, "compression_ratio": 1.79296875, "no_speech_prob": 3.267317879362963e-05}, {"id": 208, "seek": 111516, "start": 1129.96, "end": 1135.0800000000002, "text": " variable which you could use to set a specific toolchain. Okay, I want to use the 1.20 toolchain", "tokens": [7006, 597, 291, 727, 764, 281, 992, 257, 2685, 2290, 11509, 13, 1033, 11, 286, 528, 281, 764, 264, 502, 13, 2009, 2290, 11509], "temperature": 0.0, "avg_logprob": -0.15565755544615187, "compression_ratio": 1.79296875, "no_speech_prob": 3.267317879362963e-05}, {"id": 209, "seek": 111516, "start": 1135.0800000000002, "end": 1140.88, "text": " for this application. This will allow Go get to get a new Go toolchain just like you would", "tokens": [337, 341, 3861, 13, 639, 486, 2089, 1037, 483, 281, 483, 257, 777, 1037, 2290, 11509, 445, 411, 291, 576], "temperature": 0.0, "avg_logprob": -0.15565755544615187, "compression_ratio": 1.79296875, "no_speech_prob": 3.267317879362963e-05}, {"id": 210, "seek": 114088, "start": 1140.88, "end": 1147.0400000000002, "text": " get your Go modules. Okay, but it also needs to change the Go command a lot because it", "tokens": [483, 428, 1037, 16679, 13, 1033, 11, 457, 309, 611, 2203, 281, 1319, 264, 1037, 5622, 257, 688, 570, 309], "temperature": 0.0, "avg_logprob": -0.1415204576083592, "compression_ratio": 1.7015503875968991, "no_speech_prob": 4.67527934233658e-05}, {"id": 211, "seek": 114088, "start": 1147.0400000000002, "end": 1151.72, "text": " has to get your toolchain from somewhere and then first download it, check it, and run", "tokens": [575, 281, 483, 428, 2290, 11509, 490, 4079, 293, 550, 700, 5484, 309, 11, 1520, 309, 11, 293, 1190], "temperature": 0.0, "avg_logprob": -0.1415204576083592, "compression_ratio": 1.7015503875968991, "no_speech_prob": 4.67527934233658e-05}, {"id": 212, "seek": 114088, "start": 1151.72, "end": 1156.4, "text": " it. That changes our tooling a lot. And also, there is a cool toolchain local if you still", "tokens": [309, 13, 663, 2962, 527, 46593, 257, 688, 13, 400, 611, 11, 456, 307, 257, 1627, 2290, 11509, 2654, 498, 291, 920], "temperature": 0.0, "avg_logprob": -0.1415204576083592, "compression_ratio": 1.7015503875968991, "no_speech_prob": 4.67527934233658e-05}, {"id": 213, "seek": 114088, "start": 1156.4, "end": 1160.72, "text": " need a local for some reason. Again, this is just a design proposal. I might be saying", "tokens": [643, 257, 2654, 337, 512, 1778, 13, 3764, 11, 341, 307, 445, 257, 1715, 11494, 13, 286, 1062, 312, 1566], "temperature": 0.0, "avg_logprob": -0.1415204576083592, "compression_ratio": 1.7015503875968991, "no_speech_prob": 4.67527934233658e-05}, {"id": 214, "seek": 114088, "start": 1160.72, "end": 1165.3600000000001, "text": " that this is implemented next year. If you have comments about it, there is a link here", "tokens": [300, 341, 307, 12270, 958, 1064, 13, 759, 291, 362, 3053, 466, 309, 11, 456, 307, 257, 2113, 510], "temperature": 0.0, "avg_logprob": -0.1415204576083592, "compression_ratio": 1.7015503875968991, "no_speech_prob": 4.67527934233658e-05}, {"id": 215, "seek": 116536, "start": 1165.36, "end": 1171.1999999999998, "text": " as well. There is also a proposal to add this to the Go mod file. So it's right under the", "tokens": [382, 731, 13, 821, 307, 611, 257, 11494, 281, 909, 341, 281, 264, 1037, 1072, 3991, 13, 407, 309, 311, 558, 833, 264], "temperature": 0.0, "avg_logprob": -0.22812072629851055, "compression_ratio": 1.5609756097560976, "no_speech_prob": 2.9749622626695782e-05}, {"id": 216, "seek": 116536, "start": 1171.1999999999998, "end": 1175.36, "text": " Go version. You say, okay, my application uses the 1.19 syntax which has to use a 1.20", "tokens": [1037, 3037, 13, 509, 584, 11, 1392, 11, 452, 3861, 4960, 264, 502, 13, 3405, 28431, 597, 575, 281, 764, 257, 502, 13, 2009], "temperature": 0.0, "avg_logprob": -0.22812072629851055, "compression_ratio": 1.5609756097560976, "no_speech_prob": 2.9749622626695782e-05}, {"id": 217, "seek": 116536, "start": 1175.36, "end": 1179.04, "text": " RC for toolchain. So if you build this module, it will go download this version of Go and", "tokens": [28987, 337, 2290, 11509, 13, 407, 498, 291, 1322, 341, 10088, 11, 309, 486, 352, 5484, 341, 3037, 295, 1037, 293], "temperature": 0.0, "avg_logprob": -0.22812072629851055, "compression_ratio": 1.5609756097560976, "no_speech_prob": 2.9749622626695782e-05}, {"id": 218, "seek": 116536, "start": 1179.04, "end": 1185.6, "text": " build it using that. Okay, that's a technical thing. Let's talk about my favorite subject,", "tokens": [1322, 309, 1228, 300, 13, 1033, 11, 300, 311, 257, 6191, 551, 13, 961, 311, 751, 466, 452, 2954, 3983, 11], "temperature": 0.0, "avg_logprob": -0.22812072629851055, "compression_ratio": 1.5609756097560976, "no_speech_prob": 2.9749622626695782e-05}, {"id": 219, "seek": 116536, "start": 1185.6, "end": 1191.24, "text": " the Go community. This is a map of all Go meetups in the world. We are pretty much covered", "tokens": [264, 1037, 1768, 13, 639, 307, 257, 4471, 295, 439, 1037, 1677, 7528, 294, 264, 1002, 13, 492, 366, 1238, 709, 5343], "temperature": 0.0, "avg_logprob": -0.22812072629851055, "compression_ratio": 1.5609756097560976, "no_speech_prob": 2.9749622626695782e-05}, {"id": 220, "seek": 119124, "start": 1191.24, "end": 1196.4, "text": " everywhere where big populations are, but still not enough. What are the numbers? Well,", "tokens": [5315, 689, 955, 12822, 366, 11, 457, 920, 406, 1547, 13, 708, 366, 264, 3547, 30, 1042, 11], "temperature": 0.0, "avg_logprob": -0.25250192924782083, "compression_ratio": 1.6258992805755397, "no_speech_prob": 0.0001114671686082147}, {"id": 221, "seek": 119124, "start": 1196.4, "end": 1204.0, "text": " the professional Go developer network on Meetup counts 127,000 members. That's 8,000 more", "tokens": [264, 4843, 1037, 10754, 3209, 322, 22963, 1010, 14893, 47561, 11, 1360, 2679, 13, 663, 311, 1649, 11, 1360, 544], "temperature": 0.0, "avg_logprob": -0.25250192924782083, "compression_ratio": 1.6258992805755397, "no_speech_prob": 0.0001114671686082147}, {"id": 222, "seek": 119124, "start": 1204.0, "end": 1209.44, "text": " than last year. There is sat news for the first time. There are now only 190 meetups that", "tokens": [813, 1036, 1064, 13, 821, 307, 3227, 2583, 337, 264, 700, 565, 13, 821, 366, 586, 787, 37609, 1677, 7528, 300], "temperature": 0.0, "avg_logprob": -0.25250192924782083, "compression_ratio": 1.6258992805755397, "no_speech_prob": 0.0001114671686082147}, {"id": 223, "seek": 119124, "start": 1209.44, "end": 1216.28, "text": " seeks less than last year, which also results in one country being less represented. Probably", "tokens": [28840, 1570, 813, 1036, 1064, 11, 597, 611, 3542, 294, 472, 1941, 885, 1570, 10379, 13, 9210], "temperature": 0.0, "avg_logprob": -0.25250192924782083, "compression_ratio": 1.6258992805755397, "no_speech_prob": 0.0001114671686082147}, {"id": 224, "seek": 119124, "start": 1216.28, "end": 1220.2, "text": " due to the pandemic. There are also the women who go and go break chapters, which is still", "tokens": [3462, 281, 264, 5388, 13, 821, 366, 611, 264, 2266, 567, 352, 293, 352, 1821, 20013, 11, 597, 307, 920], "temperature": 0.0, "avg_logprob": -0.25250192924782083, "compression_ratio": 1.6258992805755397, "no_speech_prob": 0.0001114671686082147}, {"id": 225, "seek": 122020, "start": 1220.2, "end": 1225.52, "text": " stable at 41 chapters, and Berlin is still the most active one. But now let's talk about", "tokens": [8351, 412, 18173, 20013, 11, 293, 13848, 307, 920, 264, 881, 4967, 472, 13, 583, 586, 718, 311, 751, 466], "temperature": 0.0, "avg_logprob": -0.2309476790889617, "compression_ratio": 1.4831932773109244, "no_speech_prob": 0.00013647766900248826}, {"id": 226, "seek": 122020, "start": 1225.52, "end": 1231.88, "text": " my favorite community, the Foslan community. Our deaf room is nine years old today. So", "tokens": [452, 2954, 1768, 11, 264, 479, 329, 8658, 1768, 13, 2621, 15559, 1808, 307, 4949, 924, 1331, 965, 13, 407], "temperature": 0.0, "avg_logprob": -0.2309476790889617, "compression_ratio": 1.4831932773109244, "no_speech_prob": 0.00013647766900248826}, {"id": 227, "seek": 122020, "start": 1231.88, "end": 1239.1200000000001, "text": " we've been doing this since 2014. Okay, small room. Anyone can see themselves? Okay, we", "tokens": [321, 600, 668, 884, 341, 1670, 8227, 13, 1033, 11, 1359, 1808, 13, 14643, 393, 536, 2969, 30, 1033, 11, 321], "temperature": 0.0, "avg_logprob": -0.2309476790889617, "compression_ratio": 1.4831932773109244, "no_speech_prob": 0.00013647766900248826}, {"id": 228, "seek": 122020, "start": 1239.1200000000001, "end": 1244.6000000000001, "text": " got upgraded in 2015, 2016. Okay, bigger one. We stayed in the same size for three years,", "tokens": [658, 24133, 294, 7546, 11, 6549, 13, 1033, 11, 3801, 472, 13, 492, 9181, 294, 264, 912, 2744, 337, 1045, 924, 11], "temperature": 0.0, "avg_logprob": -0.2309476790889617, "compression_ratio": 1.4831932773109244, "no_speech_prob": 0.00013647766900248826}, {"id": 229, "seek": 124460, "start": 1244.6, "end": 1250.52, "text": " which was a crowd enough, and today even is full house. 2019, we got the biggest upgrade", "tokens": [597, 390, 257, 6919, 1547, 11, 293, 965, 754, 307, 1577, 1782, 13, 6071, 11, 321, 658, 264, 3880, 11484], "temperature": 0.0, "avg_logprob": -0.17907782360515764, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.00011191496014362201}, {"id": 230, "seek": 124460, "start": 1250.52, "end": 1257.12, "text": " ever. We got a giant room. And in 2020, we got the biggest room they could find for us.", "tokens": [1562, 13, 492, 658, 257, 7410, 1808, 13, 400, 294, 4808, 11, 321, 658, 264, 3880, 1808, 436, 727, 915, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.17907782360515764, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.00011191496014362201}, {"id": 231, "seek": 124460, "start": 1257.12, "end": 1263.0, "text": " But I regret doing that because a month later, we were all in lockdown. That caused our 2021", "tokens": [583, 286, 10879, 884, 300, 570, 257, 1618, 1780, 11, 321, 645, 439, 294, 17267, 13, 663, 7008, 527, 7201], "temperature": 0.0, "avg_logprob": -0.17907782360515764, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.00011191496014362201}, {"id": 232, "seek": 124460, "start": 1263.0, "end": 1266.7199999999998, "text": " edition to be fully online for the first time. We all did our best. We turned our living rooms", "tokens": [11377, 281, 312, 4498, 2950, 337, 264, 700, 565, 13, 492, 439, 630, 527, 1151, 13, 492, 3574, 527, 2647, 9396], "temperature": 0.0, "avg_logprob": -0.17907782360515764, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.00011191496014362201}, {"id": 233, "seek": 124460, "start": 1266.7199999999998, "end": 1272.04, "text": " into giant television studios trying to bring you some talks about Go. We learned a lot", "tokens": [666, 7410, 8815, 24593, 1382, 281, 1565, 291, 512, 6686, 466, 1037, 13, 492, 3264, 257, 688], "temperature": 0.0, "avg_logprob": -0.17907782360515764, "compression_ratio": 1.6436363636363636, "no_speech_prob": 0.00011191496014362201}, {"id": 234, "seek": 127204, "start": 1272.04, "end": 1276.56, "text": " of lessons. And in 2022, we brought you gophers around the world, which we had great fun", "tokens": [295, 8820, 13, 400, 294, 20229, 11, 321, 3038, 291, 352, 950, 433, 926, 264, 1002, 11, 597, 321, 632, 869, 1019], "temperature": 0.0, "avg_logprob": -0.31775595591618466, "compression_ratio": 1.4644351464435146, "no_speech_prob": 0.00014603594900108874}, {"id": 235, "seek": 127204, "start": 1276.56, "end": 1287.72, "text": " in producing. But hey, welcome back. This is something you'll never, ever see again", "tokens": [294, 10501, 13, 583, 4177, 11, 2928, 646, 13, 639, 307, 746, 291, 603, 1128, 11, 1562, 536, 797], "temperature": 0.0, "avg_logprob": -0.31775595591618466, "compression_ratio": 1.4644351464435146, "no_speech_prob": 0.00014603594900108874}, {"id": 236, "seek": 127204, "start": 1287.72, "end": 1297.1599999999999, "text": " today. There was just one guy still sitting there. And he'll be here at 9.00 at 9.00 p.m.", "tokens": [965, 13, 821, 390, 445, 472, 2146, 920, 3798, 456, 13, 400, 415, 603, 312, 510, 412, 1722, 13, 628, 412, 1722, 13, 628, 280, 13, 76, 13], "temperature": 0.0, "avg_logprob": -0.31775595591618466, "compression_ratio": 1.4644351464435146, "no_speech_prob": 0.00014603594900108874}, {"id": 237, "seek": 127204, "start": 1297.1599999999999, "end": 1301.44, "text": " Good. Let's talk about Go! Conference. You're all in the mood, right? So there is a Go!", "tokens": [2205, 13, 961, 311, 751, 466, 1037, 0, 22131, 13, 509, 434, 439, 294, 264, 9268, 11, 558, 30, 407, 456, 307, 257, 1037, 0], "temperature": 0.0, "avg_logprob": -0.31775595591618466, "compression_ratio": 1.4644351464435146, "no_speech_prob": 0.00014603594900108874}, {"id": 238, "seek": 130144, "start": 1301.44, "end": 1307.0, "text": " Conference. You are here. Please stay. There are better thoughts than mine. If you quickly", "tokens": [22131, 13, 509, 366, 510, 13, 2555, 1754, 13, 821, 366, 1101, 4598, 813, 3892, 13, 759, 291, 2661], "temperature": 0.0, "avg_logprob": -0.2124958807422269, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.005325810983777046}, {"id": 239, "seek": 130144, "start": 1307.0, "end": 1313.24, "text": " catch a plane, right now, you can still make Go! Con Israel, February 7. Con 42 will still", "tokens": [3745, 257, 5720, 11, 558, 586, 11, 291, 393, 920, 652, 1037, 0, 2656, 5674, 11, 8711, 1614, 13, 2656, 14034, 486, 920], "temperature": 0.0, "avg_logprob": -0.2124958807422269, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.005325810983777046}, {"id": 240, "seek": 130144, "start": 1313.24, "end": 1318.8400000000001, "text": " be held online in April. If you want to go to New York, you can do so at April 28. Go!", "tokens": [312, 5167, 2950, 294, 6929, 13, 759, 291, 528, 281, 352, 281, 1873, 3609, 11, 291, 393, 360, 370, 412, 6929, 7562, 13, 1037, 0], "temperature": 0.0, "avg_logprob": -0.2124958807422269, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.005325810983777046}, {"id": 241, "seek": 130144, "start": 1318.8400000000001, "end": 1324.92, "text": " Con Japan will be held online. Go! Con Europe will be in Berlin in June. Go! Con US will", "tokens": [2656, 3367, 486, 312, 5167, 2950, 13, 1037, 0, 2656, 3315, 486, 312, 294, 13848, 294, 6928, 13, 1037, 0, 2656, 2546, 486], "temperature": 0.0, "avg_logprob": -0.2124958807422269, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.005325810983777046}, {"id": 242, "seek": 130144, "start": 1324.92, "end": 1330.0800000000002, "text": " be in San Diego in September. And Go! Lapp in Florence, Italy will be held in November,", "tokens": [312, 294, 5271, 16377, 294, 7216, 13, 400, 1037, 0, 441, 1746, 294, 34631, 11, 10705, 486, 312, 5167, 294, 7674, 11], "temperature": 0.0, "avg_logprob": -0.2124958807422269, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.005325810983777046}, {"id": 243, "seek": 133008, "start": 1330.08, "end": 1337.28, "text": " which I have not officially confirmed yet. So we got an amazing schedule today. I already", "tokens": [597, 286, 362, 406, 12053, 11341, 1939, 13, 407, 321, 658, 364, 2243, 7567, 965, 13, 286, 1217], "temperature": 0.0, "avg_logprob": -0.15444848433784816, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.0005328209372237325}, {"id": 244, "seek": 133008, "start": 1337.28, "end": 1341.32, "text": " want to talk all speakers for signing up to be in our deaf room today. I hope you'll welcome", "tokens": [528, 281, 751, 439, 9518, 337, 13393, 493, 281, 312, 294, 527, 15559, 1808, 965, 13, 286, 1454, 291, 603, 2928], "temperature": 0.0, "avg_logprob": -0.15444848433784816, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.0005328209372237325}, {"id": 245, "seek": 133008, "start": 1341.32, "end": 1347.52, "text": " me again next year. But before I leave you all, I want to give a few housekeeping announcements.", "tokens": [385, 797, 958, 1064, 13, 583, 949, 286, 1856, 291, 439, 11, 286, 528, 281, 976, 257, 1326, 48033, 23785, 13], "temperature": 0.0, "avg_logprob": -0.15444848433784816, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.0005328209372237325}, {"id": 246, "seek": 133008, "start": 1347.52, "end": 1351.96, "text": " First of all, out of tradition, we have lightning talks at the end of the day. We reserve the", "tokens": [2386, 295, 439, 11, 484, 295, 6994, 11, 321, 362, 16589, 6686, 412, 264, 917, 295, 264, 786, 13, 492, 17824, 264], "temperature": 0.0, "avg_logprob": -0.15444848433784816, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.0005328209372237325}, {"id": 247, "seek": 133008, "start": 1351.96, "end": 1357.28, "text": " last half hour of the day to do five-minute talks. Those timing is strict. I will pull", "tokens": [1036, 1922, 1773, 295, 264, 786, 281, 360, 1732, 12, 18256, 6686, 13, 3950, 10822, 307, 10910, 13, 286, 486, 2235], "temperature": 0.0, "avg_logprob": -0.15444848433784816, "compression_ratio": 1.6254416961130742, "no_speech_prob": 0.0005328209372237325}, {"id": 248, "seek": 135728, "start": 1357.28, "end": 1364.24, "text": " you offstage. We have a CFP for those. It's open till 17.00, or 5 p.m. for your Americans.", "tokens": [291, 766, 17882, 13, 492, 362, 257, 21792, 47, 337, 729, 13, 467, 311, 1269, 4288, 3282, 13, 628, 11, 420, 1025, 280, 13, 76, 13, 337, 428, 6280, 13], "temperature": 0.0, "avg_logprob": -0.2174971423931976, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.0005152033409103751}, {"id": 249, "seek": 135728, "start": 1364.24, "end": 1369.32, "text": " And you can submit a tile till that hour at govres.gov.slide. I'll write it on the right", "tokens": [400, 291, 393, 10315, 257, 20590, 4288, 300, 1773, 412, 352, 85, 495, 13, 16089, 13, 10418, 482, 13, 286, 603, 2464, 309, 322, 264, 558], "temperature": 0.0, "avg_logprob": -0.2174971423931976, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.0005152033409103751}, {"id": 250, "seek": 135728, "start": 1369.32, "end": 1375.08, "text": " board later. You just have to fill out three easy questions. And if you fill those out,", "tokens": [3150, 1780, 13, 509, 445, 362, 281, 2836, 484, 1045, 1858, 1651, 13, 400, 498, 291, 2836, 729, 484, 11], "temperature": 0.0, "avg_logprob": -0.2174971423931976, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.0005152033409103751}, {"id": 251, "seek": 135728, "start": 1375.08, "end": 1380.28, "text": " I can welcome you onstage at the last half hour. So you have time to submit a talk. Quickly", "tokens": [286, 393, 2928, 291, 322, 17882, 412, 264, 1036, 1922, 1773, 13, 407, 291, 362, 565, 281, 10315, 257, 751, 13, 31800], "temperature": 0.0, "avg_logprob": -0.2174971423931976, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.0005152033409103751}, {"id": 252, "seek": 135728, "start": 1380.28, "end": 1387.08, "text": " think of something. Submit it. We need you. If you want to talk to us about, talk to us", "tokens": [519, 295, 746, 13, 8511, 3508, 309, 13, 492, 643, 291, 13, 759, 291, 528, 281, 751, 281, 505, 466, 11, 751, 281, 505], "temperature": 0.0, "avg_logprob": -0.2174971423931976, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.0005152033409103751}, {"id": 253, "seek": 138708, "start": 1387.08, "end": 1393.52, "text": " about social media, you can do so by using hashtag Golan and hashtag FOSDEM23 or FOSDEM223", "tokens": [466, 2093, 3021, 11, 291, 393, 360, 370, 538, 1228, 20379, 460, 23754, 293, 20379, 479, 4367, 35, 6683, 9356, 420, 479, 4367, 35, 6683, 7490, 18], "temperature": 0.0, "avg_logprob": -0.2924491882324219, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0007806967478245497}, {"id": 254, "seek": 138708, "start": 1393.52, "end": 1399.52, "text": " or FOSDEM, nobody agrees on that hashtag. But we stand to say with FOSDEM23. We're", "tokens": [420, 479, 4367, 35, 6683, 11, 5079, 26383, 322, 300, 20379, 13, 583, 321, 1463, 281, 584, 365, 479, 4367, 35, 6683, 9356, 13, 492, 434], "temperature": 0.0, "avg_logprob": -0.2924491882324219, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0007806967478245497}, {"id": 255, "seek": 138708, "start": 1399.52, "end": 1404.4399999999998, "text": " also on the Fediverse this year because Boo isn't. You can follow us, mention us, like", "tokens": [611, 322, 264, 7772, 5376, 341, 1064, 570, 23351, 1943, 380, 13, 509, 393, 1524, 505, 11, 2152, 505, 11, 411], "temperature": 0.0, "avg_logprob": -0.2924491882324219, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0007806967478245497}, {"id": 256, "seek": 138708, "start": 1404.4399999999998, "end": 1411.32, "text": " us at godevroom at fosterdon.social. We have a social media responsible person this year.", "tokens": [505, 412, 352, 40343, 2861, 412, 17114, 13966, 13, 48600, 13, 492, 362, 257, 2093, 3021, 6250, 954, 341, 1064, 13], "temperature": 0.0, "avg_logprob": -0.2924491882324219, "compression_ratio": 1.583710407239819, "no_speech_prob": 0.0007806967478245497}, {"id": 257, "seek": 141132, "start": 1411.32, "end": 1418.8799999999999, "text": " We will be happy to reply to all your angry tweets. So this is a state of go. I first", "tokens": [492, 486, 312, 2055, 281, 16972, 281, 439, 428, 6884, 25671, 13, 407, 341, 307, 257, 1785, 295, 352, 13, 286, 700], "temperature": 0.0, "avg_logprob": -0.2238095653943779, "compression_ratio": 1.6452830188679246, "no_speech_prob": 0.0005805908003821969}, {"id": 258, "seek": 141132, "start": 1418.8799999999999, "end": 1423.32, "text": " of all want to thank the FOSDEM organization for welcoming us back in the ULB. I want to", "tokens": [295, 439, 528, 281, 1309, 264, 479, 4367, 35, 6683, 4475, 337, 17378, 505, 646, 294, 264, 624, 43, 33, 13, 286, 528, 281], "temperature": 0.0, "avg_logprob": -0.2238095653943779, "compression_ratio": 1.6452830188679246, "no_speech_prob": 0.0005805908003821969}, {"id": 259, "seek": 141132, "start": 1423.32, "end": 1428.08, "text": " thank all the volunteers who are helping to make this room possible, as well as the AV", "tokens": [1309, 439, 264, 14352, 567, 366, 4315, 281, 652, 341, 1808, 1944, 11, 382, 731, 382, 264, 30198], "temperature": 0.0, "avg_logprob": -0.2238095653943779, "compression_ratio": 1.6452830188679246, "no_speech_prob": 0.0005805908003821969}, {"id": 260, "seek": 141132, "start": 1428.08, "end": 1432.28, "text": " team from FOSDEM, who makes my camera work. And everyone else who is working at FOSDEM.", "tokens": [1469, 490, 479, 4367, 35, 6683, 11, 567, 1669, 452, 2799, 589, 13, 400, 1518, 1646, 567, 307, 1364, 412, 479, 4367, 35, 6683, 13], "temperature": 0.0, "avg_logprob": -0.2238095653943779, "compression_ratio": 1.6452830188679246, "no_speech_prob": 0.0005805908003821969}, {"id": 261, "seek": 141132, "start": 1432.28, "end": 1437.6399999999999, "text": " And at last I want to thank all speakers for coming here today. And of course, you all", "tokens": [400, 412, 1036, 286, 528, 281, 1309, 439, 9518, 337, 1348, 510, 965, 13, 400, 295, 1164, 11, 291, 439], "temperature": 0.0, "avg_logprob": -0.2238095653943779, "compression_ratio": 1.6452830188679246, "no_speech_prob": 0.0005805908003821969}, {"id": 262, "seek": 143764, "start": 1437.64, "end": 1444.64, "text": " for coming to the Go Dev Room again. Thank you.", "tokens": [50364, 337, 1348, 281, 264, 1037, 9096, 19190, 797, 13, 1044, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.31657962799072265, "compression_ratio": 0.8545454545454545, "no_speech_prob": 0.0010352840181440115}], "language": "en"}