{"text": " Hello, my name is Christophe de Dinosha, and today I'm going to talk about DB48X, which is my attempt at resurrecting Reverse Polish Lisp, or RPL, on a modern open-source platform. So, first of all, what are we going to talk about? Why revive RPL, and why should you care? I'm going to give a demo of what DB48X looks like, both on a simulator and on real hardware. The idea is to have a handy calculator that does tons of stuff for you. Then I'm going to give a brief history of RPL and of pocket calculators, notably from HP. I'm going to talk about free software on modern calculators, and I'm going, since this is really the topic of this track, to talk about the very minimalist aspects of calculators, even today. Here's a quick feature overview. I'm going to develop this a little with various examples, and I'm also going to explain how this works inside, and notably talk about a very compact C++ object model with garbage collection. So, let's start by running DB48X. I'm going to give two demos, one running on simulator, and the second one on SwissMicro's DM42 hardware. So, the demo on simulator can be formed online. You can scan this QR code to see the details of the demo. The point here is that we have a development environment that simulates at least the user-spaced portion of the application software, and will let us perform a variety of online tests automatically that are difficult to do on the physical calculator. Now, on real hardware, what you do is you have a USB interface. You simply load a DM42 program in it, and that's essentially it. When you exit, you have your new environment, and you can switch back and forth between this and, for instance, the standard DM42 software. So, RPL has a common line where you type, for instance, numbers, and you hit Enter, and you see that the numbers go on a stack that is used for operations. When you want to add numbers or subtract them, you will essentially operate on the last two items on the stack and push the result there. Operations like scientific computations operate exactly the same way. They operate on the top level number one of the stack. In terms of programming, RPL has this special signed brackets that identifies an RPL program, and I push the program on the stack. Then I'm going to give it a name, so 1 plus increments, the first level of the stack, and then to execute the program, I simply hit the soft key, and you see that every time I push it, I increment the number on the stack. So, fairly simple. There is a built-in markdown help if you hit a key and keep it held. So, here we are seeing the feature for that function, and then we can explore the hyperlinks. So, it's all markdown based, so we can reuse the same help for the GitHub repository and for the calculator itself. Now, let me give you a very brief history of RPL. So, again, RPL stands for Reverse Polish Lisp, and it's an interactive language for calculators that has been used by Hewlett-Packard from 1984 until 2015. So, RPL has an ancestry called RPL, Reverse Polish Notation, and this started with the HP35 scientific calculator that introduced this system which saves keystrokes and is very similar to the way you think about the computations you're doing. It also leads, naturally, to a step-by-step programming model where you simply record keystrokes and the calculator is going to replay these keystrokes. That was introduced with the HP65, which was really marvel for the day. The little slots you see on the side, for instance, are for card readers. So, you can actually store your software on little tapes. The last real complete RPL system was the HP41. I'm talking about a system because it could be connected to a variety of expansions. There was a bus, you could connect it to printers, to plotters, to data acquisition tools, and so on. But there were later machines that a RPL was introduced and still used RPN. So, essentially, the main difference has been a fixed size for the stack and no real type system. And the high end of that series is the HP42. Now, RPL itself was introduced with the HP28C in 1984 or five. That machine had only two kilobytes of run, so that tells you this can run on a very, very small system. It also introduced a new Hewlett-Pagard CPU called the Salon that I'm going to talk about in a moment. The series culminated, the historical series culminated with the HP48 series, and that had equations, larger graphics, was extensible. So, you had slots where you could put memory, ROM cards, etc. And then there were follow-ups like the 49, etc. that were not very different from the 48. That series was recreated with HP50G and other calculators like the 38, the 48G2, etc. that are essentially running the original software designed for the Salon CPU under emulation with an ARM CPU that emulates the Salon. And that gives you a significant boost in speed and essentially it executes exactly the same software. Now, because the ARM CPU itself is much, much faster than Salon, a number of folks started developing software for it. And these series of calculators were based on somewhat standard platforms that could be flashed. And so, people developed open-source software and free software to replace the built-in firmware. An example shown here is new RPL, which is an ARM native implementation of RPL, that is relatively complete as far as the language itself goes, but is missing a number of features from the original calculator, including graphics, equation editor, etc. Now, how does RPL work inside? It's very interesting because it's a very smart, minimalist system. So, first of all, it's optimized for the HP Salon CPU, which is a descendant from CPUs built for earlier calculators. And that's a four-bit CPU with 64-bit registers designed mostly for floating points. And so, you have four-bit nibbles that you can address individually in memory. Addresses are 20 bits, that's five nibbles. And the 64 bits in the register can be addressed in a variety of ways that correspond to a BCD representation of floating points. So, for instance, the X field is for exponent, the M for mantissa, the S for sine. So, there is a number of pieces of free software and free calculator firmware that can run either on ARM-based calculator, and then later led to platforms developed specifically to run this kind of software. In terms of available platforms, if you go beyond the HP calculators, so first of all, the ARM-based HP calculators can be flashed. So, even a lowly HP 20 something can be given new firmware and a new life. You have an example here with something called WP34S which creates a very advanced scientific calculator from a very inexpensive HP calculator. And there are also a number of free emulators for iOS, Android, etc. So, what you see here is a 42 emulator called 342. And Swiss Micros essentially started building the hardware around this software. So, they created the DM42 which runs a variant of 342 with some underlying firmware to provide operating system-level services. And so, they have this platform and that same platform just with a firmware flashing and changes in keyboard can emulate the HP 42, the HP 41, etc. Now, third-party firmware has started sporting like mushrooms but really large and advanced firmware. There are not that many variants. What you see here is the descendant of WP34S which is called 43S and has a number of really advanced features, but it's essentially still in the same spirit as the RPN calculators. In other words, it's still using the RPN logic with a fixed-size stack and not much in terms of typing. So, my first attempt to enter that space was to port a new RPL to DM42. And so, I created a simulator and you can see the results of this experiment there with a side-by-side setup where you have the DM42 on the left, the HP 50G simulator on the in the middle, and the HP Prime simulator on the right. And essentially, my work was to try to make the software more portable, support one-bit graphics on the DM42, but really take advantage of that platform. And on simulator, it worked pretty well. The problem is, as I said, this machine is really minimalist and it turns out that new RPL, as soon as I started trying to run it on the physical hardware, it just did not fit. Why? Because the platform is built around an ultra-low-power ARM Cortex M4F, which has, among other benefits, that the battery life on a battery like this is up to three years according to the vendor. Now, that machine has only 96K of RAM and only 70K free after the operating system load. How much is 64K? Well, that's essentially one Commodore 64 and a half. And the Commodore 64 is not exactly yesterday's machine. There's only two megabytes of flash available. So again, in terms of old stuff, what remains free once you have loaded standard libraries and the floating-point emulation library from Intel, et cetera, is about 700K. So that's about the same size as an original Macintosh floppy disk. So my conclusion within these numbers is that I had better restart from scratch to create a firmware that was redesigned to fit in such a small system. So how does that work? Well, first of all, I wanted to use C++ on a modern language with templates and various library utilities, et cetera. But I needed to have garbage collection for the objects, just like the original RPL, and a very, very minimal memory usage. Let's start with the features that are implemented today. And that's essentially based off the command set of the whole series from the HP48SX to the HP50G. The Intel floating-point library that ships with the platform gives me 34 decimal places for floating points. So you see E and Pi here with the number of digits that were computed by running the exponential of one and four times the octangent of one. The platform, so my application software on top of that also supports large integers like the HP50G as well as base numbers that today can be in hexadecimal, decimal, octal, or binary. And I plan to support arbitrary bases between two and 36 in a later firmware revision. You see here how these numbers are entered in the machine with the hashtag at the beginning. And then when you put this hashtag on the command line, the cursor shifts to be like binary or base. And then I can enter the numbers directly and the first row of letters changes directly to let me enter numbers more practically. So let me show you that live. So I bring up the calculator. I click on shift base. And you see that I have the hash sign here. And I can say hash one, two, A. And hash two, two, E plus. And I have my hexadecimal conversion here. So as I said, RPL has a number of data types that includes text, list, and arrays. So the lists are between braces. The arrays are between square brackets. And the text is between quotes. You see a program there on level two that takes the hello string, the world string, then does a plus. And when you evaluate that program, you get hello world. You have also programs and algebraic expressions. So I just showed what the program looks like. But you can also have algebraic expressions written the usual way. You see here, for instance, square root of x plus one. There is a plethora of scientific functions. The catalog in the HP48 series lists something like 1700 functions total. A little less on some other models, but it's the order of what you have. I also already implemented a storage mechanism for persistent values, so variables, directories, et cetera. And so what you see here is a three-level menu where when you hit the key, you evaluate what is inside the variable. When you shift, you will go to the second level in the menu and that will read the content of the variable. And if you shift twice, then you're going to the third level of the menu and you're going to store something in the variable. So again, I can show that live. I'm going to store the result I just had. So execute is for execute equation. I'm going to call that B and I do store, sorry, enter store. And then if I go to the recall menu that shows me the variable and you see my B here, and if I just evaluate B, I have the number I had. If I shift B, I record the value. And if I want to store something else in B, I will shift twice, hit that key, and now B is 12. So as you can see, the system works already at that level. So in order to be able to really have something efficient on such a small machine, I had to design a custom object model and I based it on RPL itself, the historical RPL, but I tried to make it much more compact. And for instance, I use LB128 to store all the objects in memory. So LB128 is this system used for instance in Dwarf that encodes integers by having only the last, so you have seven bits per byte, and the last one in the series has a bit clear, the other have a bit set. So the type that is the first byte or LB128 value is an index to the handler table used for evaluation. So instead of using direct addresses like in RPL, I use an index. And so that means I can have 128 one byte types or commands and 16384 fit in two bytes. And as a reminder, in RPL that was 205, 2.5 bytes, five nibbles for each type. So I'm saving a little here. So you see here the catalog on the HP 450, I think. So let me compare and contrast the storage of something like the number one. To be precise, it's the internal number one on the HP48. The HP48 has no real user integers, whereas a DB48X has. So when you type one, the most compact storage you have for, sorry, that's actually three, I got that wrong on the HP48. So the value that you see here, that's the prefix. And so the 02911 is the address of the evaluation handler for integers. And three, that should actually be one, is the payload. The storage in LB128 is 14, that's the index for integer types. And 01 is the actual value. And because the habit is not set, that stops here and we're done. If you look at ABC, how the text ABC is stored, the prefix in the HP48 is 0282C. So that's the five nibbles address. Then you have the total size, and then you have the ABC encoding itself. Whereas for DB48X, you have the type, which is two, then you have the length again encoded as a DB128. And so because it's less than 128, it uses only one byte. And then I have the data itself after that. The name ABC is exactly the same encoding, except that the prefix is not the same. And for DB48X, the type shifts from two to one C. The types themselves change with every build, by the way. So that means the evaluation loop is extremely simple. It's essentially the way this works. You can see the code here is that you're going to take for each object, you're going to compute its size, skip to the next one, and then call the handler and evaluate that handler. So it's really evaluating a program in DB48X is extremely fast. And there is a fast, simple copying garbage collector. And the picture that was supposed to illustrate that was a promptly garbage collector as well. So what is the improvement over existing ASP calculators? Well, moving from 4-bit to 32-bit CPU means that it's much, much faster on various tests like loops, et cetera, and between one, two or three orders of magnitude faster. Scientific computations are even faster. There is a high resolution monochrome in display. That means that when you switch off the calculator, it keeps a picture that you display there. And so we have these fancy off images that you can use. So let me show you some examples here. So you see this is one off image. And if I shift off, then I'm going to see another image. And again, because it's an E ink, it doesn't consume any memory. There are three rows for the softkey menu system. That's an improvement compared to the original HP calculators. Because of the high resolution display, we can display the functions associated with base function, shift, and double shift. And as I pointed out earlier, the highlighted portion in black moves as you hit the shift key. So let me show that again. So you see that if I hit the shift key once, then I get to recalling the value B. And if I hit twice, then I move there and then back to the original location. There is a common catalog and auto completion. So that's better shown than explained. So let me type. So let me go back to my demo system here. So let's say that if I hit the shift key and I hold it, I shift to alpha mode. And now I'm going to type, for instance, A. And we are going to see nothing because I was still in the recall menu. I hit plus. And you see that now I have auto completion at the bottom with the various comments that begin with A. There is a plus here. And you might wonder why the plus is here. It's because it also takes the name add. So add contains an A. And I have ABS, for instance. And now I can do ABS. And I have evaluated ABS of 12 directly. So that's pretty neat. That's a good way to quickly access a very, very large number of functions. And it's optimized for the original GM42 key layout. I paid a lot of attention to this. So for instance, I showed earlier how, for instance, when you type execute, which is execute a comment in the GM42, there is no real equivalent for the RPL model. So instead, I retranslate that as execute equation. And that does something that is very frequent in RPL, which is to have a symbolic value for something. You can see also that the cursor is moving, is changing depending on what I'm doing. So for instance, here it's A for algebraic. And it's white because I'm in alpha mode. If I leave alpha mode, it's going to turn black. But I'm still in algebraic mode. The row keys are, I have only two, the HP48 has four. So on the common line, up and down, move left and right. It's an acquired paste. There is also no real run stop for programs. So RS is instead translated as eval. So it evaluates the value that you have. And as I said, there is this markdown based online help. So you saw that in the video, but we can show it live now. So for instance, if I hit sin and I hold sin, then it's going to show the online help there. You see that there is this home button. So I can go to home and then I can go down and select, for instance, the first entry there. And I'm going to jump to help. And that explains how the help system works. So there is a lot that remains to be done. The future plans include support for complex numbers that are not implemented yet. Vector and metrics arithmetic, which is integral to the HP48 RPL variant that also exists today within 28, et cetera. That's a relatively complex set of things in particular, because I would like to do it like new RPL does, when new RPL does support matrices with symbolic values in there. So you can have a matrix with an X in there and as the determinant of that matrix, you're going to get the results. Whether I can fit that in the available space is unclear. As I said, there are about 1500 functions that remain to be implemented in some way, including variants. So for instance, the sin function for sinus, the sine cosine function, so all the trigonometrics are implemented for real numbers, but they are not implemented for complex numbers yet or for other data types. So there is some work that remains to be done also even on existing functions. Plotting and graphing is a key feature of these calculators. So I'd like to have that. The HP50G is quite advanced in that respect and getting to the point where we have feature piety is going to take a lot of time. So that's essentially what I had to show. I hope that you found this interesting and I'm really welcoming contributors if you want to take a look at how this works inside and if you want to help me add many of the new features or if it were only just to write or extend the online help, any kind of help is really welcome. And that's about it. Thanks a lot for listening. Now it's time for questions and the questions will be live and I'll have a calculator available if you want to play with it. So we should be live now. We have only 30 seconds left. So how do the funds work on these calculators? Is it possible to load custom funds for different steps? Okay, so there are two parts to this question. The first one is the funds themselves and the second one is non-letting scripts. So in terms of funds, there were multiple formats that I tried. The current model, the current firmware supports two formats that I call dense and sparse. The sparse format is more efficient for large funds that have a lot of space and the dense format is more compact for smaller funds that have something like, for instance if you have a five or eight bits of hate for very small funds, then practically all pixels inside are used and so you have a dense or format for that. So that's for the representation of funds. All the run presentations cover the 16-bit range of unicode and so they do include the most of the non-letting characters. So we do cover an arbitrary range of non-letting characters. What the system lacks at the moment is that it doesn't know how to do combining glyphs and it doesn't know how to do right to left rendering. Those are a bit complex, they are not implemented in the firmware at the moment. The fund that, and then I wrote in the GitHub repository, there is a tool that lets you convert any TTF font to use as a font in the system. The font that I used is derived from an open source font and I forgot what the name is and I changed a few glyphs inside just to make them look better on the screen. So you can look at the GitHub history and you'll see that I tried a dozen fonts until I found one that I thought would look good. Okay, thank you. Thanks for speaking at Fasten Christophe. I will catch you later, I'll move on to the next talk now. You can hang out in this room if people want to come and chat with you. This is a breakout room just for this talk. Yep, thanks a lot. Yeah, bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.080000000000002, "text": " Hello, my name is Christophe de Dinosha, and today I'm going to talk about DB48X, which", "tokens": [50364, 2425, 11, 452, 1315, 307, 2040, 404, 675, 368, 413, 15220, 1641, 11, 293, 965, 286, 478, 516, 281, 751, 466, 26754, 13318, 55, 11, 597, 51218], "temperature": 0.0, "avg_logprob": -0.34691152572631834, "compression_ratio": 0.9886363636363636, "no_speech_prob": 0.06913033127784729}, {"id": 1, "seek": 1708, "start": 17.08, "end": 25.72, "text": " is my attempt at resurrecting Reverse Polish Lisp, or RPL, on a modern open-source platform.", "tokens": [50364, 307, 452, 5217, 412, 34338, 278, 26314, 405, 18504, 441, 7631, 11, 420, 14105, 43, 11, 322, 257, 4363, 1269, 12, 41676, 3663, 13, 50796], "temperature": 0.0, "avg_logprob": -0.22404958551580256, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.027072008699178696}, {"id": 2, "seek": 1708, "start": 30.839999999999996, "end": 38.68, "text": " So, first of all, what are we going to talk about? Why revive RPL, and why should you care?", "tokens": [51052, 407, 11, 700, 295, 439, 11, 437, 366, 321, 516, 281, 751, 466, 30, 1545, 36292, 14105, 43, 11, 293, 983, 820, 291, 1127, 30, 51444], "temperature": 0.0, "avg_logprob": -0.22404958551580256, "compression_ratio": 1.2777777777777777, "no_speech_prob": 0.027072008699178696}, {"id": 3, "seek": 3868, "start": 39.32, "end": 48.84, "text": " I'm going to give a demo of what DB48X looks like, both on a simulator and on real hardware.", "tokens": [50396, 286, 478, 516, 281, 976, 257, 10723, 295, 437, 26754, 13318, 55, 1542, 411, 11, 1293, 322, 257, 32974, 293, 322, 957, 8837, 13, 50872], "temperature": 0.0, "avg_logprob": -0.1436328598947236, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.05952189117670059}, {"id": 4, "seek": 3868, "start": 49.88, "end": 53.88, "text": " The idea is to have a handy calculator that does tons of stuff for you.", "tokens": [50924, 440, 1558, 307, 281, 362, 257, 13239, 24993, 300, 775, 9131, 295, 1507, 337, 291, 13, 51124], "temperature": 0.0, "avg_logprob": -0.1436328598947236, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.05952189117670059}, {"id": 5, "seek": 3868, "start": 55.64, "end": 59.8, "text": " Then I'm going to give a brief history of RPL and of pocket calculators,", "tokens": [51212, 1396, 286, 478, 516, 281, 976, 257, 5353, 2503, 295, 14105, 43, 293, 295, 8963, 4322, 3391, 11, 51420], "temperature": 0.0, "avg_logprob": -0.1436328598947236, "compression_ratio": 1.4539877300613497, "no_speech_prob": 0.05952189117670059}, {"id": 6, "seek": 5980, "start": 59.8, "end": 66.44, "text": " notably from HP. I'm going to talk about free software on modern calculators,", "tokens": [50364, 31357, 490, 12557, 13, 286, 478, 516, 281, 751, 466, 1737, 4722, 322, 4363, 4322, 3391, 11, 50696], "temperature": 0.0, "avg_logprob": -0.1232764180501302, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.02267371490597725}, {"id": 7, "seek": 5980, "start": 68.03999999999999, "end": 71.47999999999999, "text": " and I'm going, since this is really the topic of this", "tokens": [50776, 293, 286, 478, 516, 11, 1670, 341, 307, 534, 264, 4829, 295, 341, 50948], "temperature": 0.0, "avg_logprob": -0.1232764180501302, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.02267371490597725}, {"id": 8, "seek": 5980, "start": 72.12, "end": 77.56, "text": " track, to talk about the very minimalist aspects of calculators, even today.", "tokens": [50980, 2837, 11, 281, 751, 466, 264, 588, 50192, 7270, 295, 4322, 3391, 11, 754, 965, 13, 51252], "temperature": 0.0, "avg_logprob": -0.1232764180501302, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.02267371490597725}, {"id": 9, "seek": 5980, "start": 79.64, "end": 83.96, "text": " Here's a quick feature overview. I'm going to develop this a little with various examples,", "tokens": [51356, 1692, 311, 257, 1702, 4111, 12492, 13, 286, 478, 516, 281, 1499, 341, 257, 707, 365, 3683, 5110, 11, 51572], "temperature": 0.0, "avg_logprob": -0.1232764180501302, "compression_ratio": 1.5904255319148937, "no_speech_prob": 0.02267371490597725}, {"id": 10, "seek": 8396, "start": 84.6, "end": 92.36, "text": " and I'm also going to explain how this works inside, and notably talk about a very compact", "tokens": [50396, 293, 286, 478, 611, 516, 281, 2903, 577, 341, 1985, 1854, 11, 293, 31357, 751, 466, 257, 588, 14679, 50784], "temperature": 0.0, "avg_logprob": -0.16778368420071071, "compression_ratio": 1.3826530612244898, "no_speech_prob": 0.002979476237669587}, {"id": 11, "seek": 8396, "start": 92.36, "end": 101.32, "text": " C++ object model with garbage collection. So, let's start by running DB48X. I'm going to give", "tokens": [50784, 383, 25472, 2657, 2316, 365, 14150, 5765, 13, 407, 11, 718, 311, 722, 538, 2614, 26754, 13318, 55, 13, 286, 478, 516, 281, 976, 51232], "temperature": 0.0, "avg_logprob": -0.16778368420071071, "compression_ratio": 1.3826530612244898, "no_speech_prob": 0.002979476237669587}, {"id": 12, "seek": 8396, "start": 101.32, "end": 107.32, "text": " two demos, one running on simulator, and the second one on SwissMicro's DM42 hardware.", "tokens": [51232, 732, 33788, 11, 472, 2614, 322, 32974, 11, 293, 264, 1150, 472, 322, 21965, 48831, 340, 311, 15322, 15628, 8837, 13, 51532], "temperature": 0.0, "avg_logprob": -0.16778368420071071, "compression_ratio": 1.3826530612244898, "no_speech_prob": 0.002979476237669587}, {"id": 13, "seek": 10732, "start": 107.72, "end": 119.08, "text": " So, the demo on simulator can be formed online. You can scan this QR code to see the details of", "tokens": [50384, 407, 11, 264, 10723, 322, 32974, 393, 312, 8693, 2950, 13, 509, 393, 11049, 341, 32784, 3089, 281, 536, 264, 4365, 295, 50952], "temperature": 0.0, "avg_logprob": -0.14650353388999826, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0011658306466415524}, {"id": 14, "seek": 10732, "start": 119.08, "end": 126.91999999999999, "text": " the demo. The point here is that we have a development environment that simulates at least", "tokens": [50952, 264, 10723, 13, 440, 935, 510, 307, 300, 321, 362, 257, 3250, 2823, 300, 1034, 26192, 412, 1935, 51344], "temperature": 0.0, "avg_logprob": -0.14650353388999826, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0011658306466415524}, {"id": 15, "seek": 10732, "start": 126.91999999999999, "end": 135.72, "text": " the user-spaced portion of the application software, and will let us perform a variety of", "tokens": [51344, 264, 4195, 12, 4952, 3839, 8044, 295, 264, 3861, 4722, 11, 293, 486, 718, 505, 2042, 257, 5673, 295, 51784], "temperature": 0.0, "avg_logprob": -0.14650353388999826, "compression_ratio": 1.5593220338983051, "no_speech_prob": 0.0011658306466415524}, {"id": 16, "seek": 13572, "start": 136.68, "end": 141.96, "text": " online tests automatically that are difficult to do on the physical calculator.", "tokens": [50412, 2950, 6921, 6772, 300, 366, 2252, 281, 360, 322, 264, 4001, 24993, 13, 50676], "temperature": 0.0, "avg_logprob": -0.11633270628312055, "compression_ratio": 1.4404145077720207, "no_speech_prob": 0.00037971805431880057}, {"id": 17, "seek": 13572, "start": 145.72, "end": 155.48, "text": " Now, on real hardware, what you do is you have a USB interface. You simply load a DM42 program in it,", "tokens": [50864, 823, 11, 322, 957, 8837, 11, 437, 291, 360, 307, 291, 362, 257, 10109, 9226, 13, 509, 2935, 3677, 257, 15322, 15628, 1461, 294, 309, 11, 51352], "temperature": 0.0, "avg_logprob": -0.11633270628312055, "compression_ratio": 1.4404145077720207, "no_speech_prob": 0.00037971805431880057}, {"id": 18, "seek": 13572, "start": 156.84, "end": 163.48, "text": " and that's essentially it. When you exit, you have your new environment, and you can switch back", "tokens": [51420, 293, 300, 311, 4476, 309, 13, 1133, 291, 11043, 11, 291, 362, 428, 777, 2823, 11, 293, 291, 393, 3679, 646, 51752], "temperature": 0.0, "avg_logprob": -0.11633270628312055, "compression_ratio": 1.4404145077720207, "no_speech_prob": 0.00037971805431880057}, {"id": 19, "seek": 16348, "start": 163.48, "end": 168.11999999999998, "text": " and forth between this and, for instance, the standard DM42 software.", "tokens": [50364, 293, 5220, 1296, 341, 293, 11, 337, 5197, 11, 264, 3832, 15322, 15628, 4722, 13, 50596], "temperature": 0.0, "avg_logprob": -0.09857299111106178, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0017782963113859296}, {"id": 20, "seek": 16348, "start": 170.51999999999998, "end": 176.83999999999997, "text": " So, RPL has a common line where you type, for instance, numbers, and you hit Enter,", "tokens": [50716, 407, 11, 14105, 43, 575, 257, 2689, 1622, 689, 291, 2010, 11, 337, 5197, 11, 3547, 11, 293, 291, 2045, 10399, 11, 51032], "temperature": 0.0, "avg_logprob": -0.09857299111106178, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0017782963113859296}, {"id": 21, "seek": 16348, "start": 177.64, "end": 184.51999999999998, "text": " and you see that the numbers go on a stack that is used for operations. When you want to add numbers", "tokens": [51072, 293, 291, 536, 300, 264, 3547, 352, 322, 257, 8630, 300, 307, 1143, 337, 7705, 13, 1133, 291, 528, 281, 909, 3547, 51416], "temperature": 0.0, "avg_logprob": -0.09857299111106178, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0017782963113859296}, {"id": 22, "seek": 16348, "start": 184.51999999999998, "end": 189.95999999999998, "text": " or subtract them, you will essentially operate on the last two items on the stack and push the", "tokens": [51416, 420, 16390, 552, 11, 291, 486, 4476, 9651, 322, 264, 1036, 732, 4754, 322, 264, 8630, 293, 2944, 264, 51688], "temperature": 0.0, "avg_logprob": -0.09857299111106178, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.0017782963113859296}, {"id": 23, "seek": 18996, "start": 189.96, "end": 197.8, "text": " result there. Operations like scientific computations operate exactly the same way.", "tokens": [50364, 1874, 456, 13, 36381, 411, 8134, 2807, 763, 9651, 2293, 264, 912, 636, 13, 50756], "temperature": 0.0, "avg_logprob": -0.13652436733245848, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0003681584494188428}, {"id": 24, "seek": 18996, "start": 198.76000000000002, "end": 201.8, "text": " They operate on the top level number one of the stack.", "tokens": [50804, 814, 9651, 322, 264, 1192, 1496, 1230, 472, 295, 264, 8630, 13, 50956], "temperature": 0.0, "avg_logprob": -0.13652436733245848, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0003681584494188428}, {"id": 25, "seek": 18996, "start": 204.04000000000002, "end": 210.84, "text": " In terms of programming, RPL has this special signed brackets that identifies an RPL program,", "tokens": [51068, 682, 2115, 295, 9410, 11, 14105, 43, 575, 341, 2121, 8175, 26179, 300, 34597, 364, 14105, 43, 1461, 11, 51408], "temperature": 0.0, "avg_logprob": -0.13652436733245848, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0003681584494188428}, {"id": 26, "seek": 18996, "start": 210.84, "end": 216.12, "text": " and I push the program on the stack. Then I'm going to give it a name, so 1 plus increments,", "tokens": [51408, 293, 286, 2944, 264, 1461, 322, 264, 8630, 13, 1396, 286, 478, 516, 281, 976, 309, 257, 1315, 11, 370, 502, 1804, 1946, 1117, 11, 51672], "temperature": 0.0, "avg_logprob": -0.13652436733245848, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0003681584494188428}, {"id": 27, "seek": 21612, "start": 217.0, "end": 222.68, "text": " the first level of the stack, and then to execute the program, I simply hit the soft key,", "tokens": [50408, 264, 700, 1496, 295, 264, 8630, 11, 293, 550, 281, 14483, 264, 1461, 11, 286, 2935, 2045, 264, 2787, 2141, 11, 50692], "temperature": 0.0, "avg_logprob": -0.11283641702988569, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.00042376312194392085}, {"id": 28, "seek": 21612, "start": 222.68, "end": 228.28, "text": " and you see that every time I push it, I increment the number on the stack. So, fairly simple.", "tokens": [50692, 293, 291, 536, 300, 633, 565, 286, 2944, 309, 11, 286, 26200, 264, 1230, 322, 264, 8630, 13, 407, 11, 6457, 2199, 13, 50972], "temperature": 0.0, "avg_logprob": -0.11283641702988569, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.00042376312194392085}, {"id": 29, "seek": 21612, "start": 230.76, "end": 237.64000000000001, "text": " There is a built-in markdown help if you hit a key and keep it held. So, here we are seeing", "tokens": [51096, 821, 307, 257, 3094, 12, 259, 1491, 5093, 854, 498, 291, 2045, 257, 2141, 293, 1066, 309, 5167, 13, 407, 11, 510, 321, 366, 2577, 51440], "temperature": 0.0, "avg_logprob": -0.11283641702988569, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.00042376312194392085}, {"id": 30, "seek": 21612, "start": 237.64000000000001, "end": 243.64000000000001, "text": " the feature for that function, and then we can explore the hyperlinks. So, it's all markdown", "tokens": [51440, 264, 4111, 337, 300, 2445, 11, 293, 550, 321, 393, 6839, 264, 9848, 75, 16431, 13, 407, 11, 309, 311, 439, 1491, 5093, 51740], "temperature": 0.0, "avg_logprob": -0.11283641702988569, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.00042376312194392085}, {"id": 31, "seek": 24364, "start": 243.64, "end": 251.0, "text": " based, so we can reuse the same help for the GitHub repository and for the calculator itself.", "tokens": [50364, 2361, 11, 370, 321, 393, 26225, 264, 912, 854, 337, 264, 23331, 25841, 293, 337, 264, 24993, 2564, 13, 50732], "temperature": 0.0, "avg_logprob": -0.11968296002119015, "compression_ratio": 1.427860696517413, "no_speech_prob": 0.0015539441956207156}, {"id": 32, "seek": 24364, "start": 254.11999999999998, "end": 261.24, "text": " Now, let me give you a very brief history of RPL. So, again, RPL stands for Reverse Polish Lisp,", "tokens": [50888, 823, 11, 718, 385, 976, 291, 257, 588, 5353, 2503, 295, 14105, 43, 13, 407, 11, 797, 11, 14105, 43, 7382, 337, 26314, 405, 18504, 441, 7631, 11, 51244], "temperature": 0.0, "avg_logprob": -0.11968296002119015, "compression_ratio": 1.427860696517413, "no_speech_prob": 0.0015539441956207156}, {"id": 33, "seek": 24364, "start": 261.88, "end": 267.88, "text": " and it's an interactive language for calculators that has been used by Hewlett-Packard from 1984", "tokens": [51276, 293, 309, 311, 364, 15141, 2856, 337, 4322, 3391, 300, 575, 668, 1143, 538, 634, 86, 32547, 12, 47, 501, 515, 490, 27127, 51576], "temperature": 0.0, "avg_logprob": -0.11968296002119015, "compression_ratio": 1.427860696517413, "no_speech_prob": 0.0015539441956207156}, {"id": 34, "seek": 26788, "start": 267.88, "end": 277.15999999999997, "text": " until 2015. So, RPL has an ancestry called RPL, Reverse Polish Notation,", "tokens": [50364, 1826, 7546, 13, 407, 11, 14105, 43, 575, 364, 44729, 1219, 14105, 43, 11, 26314, 405, 18504, 1726, 399, 11, 50828], "temperature": 0.0, "avg_logprob": -0.15486565847245473, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.002739819698035717}, {"id": 35, "seek": 26788, "start": 278.2, "end": 285.48, "text": " and this started with the HP35 scientific calculator that introduced this system which", "tokens": [50880, 293, 341, 1409, 365, 264, 12557, 8794, 8134, 24993, 300, 7268, 341, 1185, 597, 51244], "temperature": 0.0, "avg_logprob": -0.15486565847245473, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.002739819698035717}, {"id": 36, "seek": 26788, "start": 285.48, "end": 291.96, "text": " saves keystrokes and is very similar to the way you think about the computations you're doing.", "tokens": [51244, 19155, 2141, 27616, 5993, 293, 307, 588, 2531, 281, 264, 636, 291, 519, 466, 264, 2807, 763, 291, 434, 884, 13, 51568], "temperature": 0.0, "avg_logprob": -0.15486565847245473, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.002739819698035717}, {"id": 37, "seek": 29196, "start": 292.52, "end": 299.88, "text": " It also leads, naturally, to a step-by-step programming model where you simply record keystrokes", "tokens": [50392, 467, 611, 6689, 11, 8195, 11, 281, 257, 1823, 12, 2322, 12, 16792, 9410, 2316, 689, 291, 2935, 2136, 2141, 27616, 5993, 50760], "temperature": 0.0, "avg_logprob": -0.21710920869634392, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.001979023450985551}, {"id": 38, "seek": 29196, "start": 299.88, "end": 305.0, "text": " and the calculator is going to replay these keystrokes. That was introduced with the HP65,", "tokens": [50760, 293, 264, 24993, 307, 516, 281, 23836, 613, 2141, 27616, 5993, 13, 663, 390, 7268, 365, 264, 12557, 16824, 11, 51016], "temperature": 0.0, "avg_logprob": -0.21710920869634392, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.001979023450985551}, {"id": 39, "seek": 29196, "start": 305.56, "end": 310.59999999999997, "text": " which was really marvel for the day. The little slots you see on the side, for instance,", "tokens": [51044, 597, 390, 534, 23893, 337, 264, 786, 13, 440, 707, 24266, 291, 536, 322, 264, 1252, 11, 337, 5197, 11, 51296], "temperature": 0.0, "avg_logprob": -0.21710920869634392, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.001979023450985551}, {"id": 40, "seek": 29196, "start": 310.59999999999997, "end": 315.4, "text": " are for card readers. So, you can actually store your software on little tapes.", "tokens": [51296, 366, 337, 2920, 17147, 13, 407, 11, 291, 393, 767, 3531, 428, 4722, 322, 707, 31349, 13, 51536], "temperature": 0.0, "avg_logprob": -0.21710920869634392, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.001979023450985551}, {"id": 41, "seek": 31540, "start": 316.12, "end": 323.32, "text": " The last real complete RPL system was the HP41. I'm talking about a system because it could be", "tokens": [50400, 440, 1036, 957, 3566, 14105, 43, 1185, 390, 264, 12557, 17344, 13, 286, 478, 1417, 466, 257, 1185, 570, 309, 727, 312, 50760], "temperature": 0.0, "avg_logprob": -0.2157966068812779, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.002422546735033393}, {"id": 42, "seek": 31540, "start": 323.32, "end": 327.79999999999995, "text": " connected to a variety of expansions. There was a bus, you could connect it to printers,", "tokens": [50760, 4582, 281, 257, 5673, 295, 9672, 626, 13, 821, 390, 257, 1255, 11, 291, 727, 1745, 309, 281, 40007, 11, 50984], "temperature": 0.0, "avg_logprob": -0.2157966068812779, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.002422546735033393}, {"id": 43, "seek": 31540, "start": 327.79999999999995, "end": 339.0, "text": " to plotters, to data acquisition tools, and so on. But there were later machines that a", "tokens": [50984, 281, 7542, 1559, 11, 281, 1412, 21668, 3873, 11, 293, 370, 322, 13, 583, 456, 645, 1780, 8379, 300, 257, 51544], "temperature": 0.0, "avg_logprob": -0.2157966068812779, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.002422546735033393}, {"id": 44, "seek": 33900, "start": 339.0, "end": 343.64, "text": " RPL was introduced and still used RPN. So, essentially, the main difference has been", "tokens": [50364, 14105, 43, 390, 7268, 293, 920, 1143, 14105, 45, 13, 407, 11, 4476, 11, 264, 2135, 2649, 575, 668, 50596], "temperature": 0.0, "avg_logprob": -0.14414102832476297, "compression_ratio": 1.478813559322034, "no_speech_prob": 0.010910866782069206}, {"id": 45, "seek": 33900, "start": 343.64, "end": 352.68, "text": " a fixed size for the stack and no real type system. And the high end of that series is the HP42.", "tokens": [50596, 257, 6806, 2744, 337, 264, 8630, 293, 572, 957, 2010, 1185, 13, 400, 264, 1090, 917, 295, 300, 2638, 307, 264, 12557, 15628, 13, 51048], "temperature": 0.0, "avg_logprob": -0.14414102832476297, "compression_ratio": 1.478813559322034, "no_speech_prob": 0.010910866782069206}, {"id": 46, "seek": 33900, "start": 354.92, "end": 363.16, "text": " Now, RPL itself was introduced with the HP28C in 1984 or five. That machine had only", "tokens": [51160, 823, 11, 14105, 43, 2564, 390, 7268, 365, 264, 12557, 11205, 34, 294, 27127, 420, 1732, 13, 663, 3479, 632, 787, 51572], "temperature": 0.0, "avg_logprob": -0.14414102832476297, "compression_ratio": 1.478813559322034, "no_speech_prob": 0.010910866782069206}, {"id": 47, "seek": 33900, "start": 363.16, "end": 367.32, "text": " two kilobytes of run, so that tells you this can run on a very, very small system.", "tokens": [51572, 732, 5128, 996, 43673, 295, 1190, 11, 370, 300, 5112, 291, 341, 393, 1190, 322, 257, 588, 11, 588, 1359, 1185, 13, 51780], "temperature": 0.0, "avg_logprob": -0.14414102832476297, "compression_ratio": 1.478813559322034, "no_speech_prob": 0.010910866782069206}, {"id": 48, "seek": 36732, "start": 368.12, "end": 374.36, "text": " It also introduced a new Hewlett-Pagard CPU called the Salon that I'm going to talk about in a moment.", "tokens": [50404, 467, 611, 7268, 257, 777, 634, 86, 32547, 12, 47, 559, 515, 13199, 1219, 264, 5996, 266, 300, 286, 478, 516, 281, 751, 466, 294, 257, 1623, 13, 50716], "temperature": 0.0, "avg_logprob": -0.1833395909781408, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0007877235766500235}, {"id": 49, "seek": 36732, "start": 376.59999999999997, "end": 383.48, "text": " The series culminated, the historical series culminated with the HP48 series,", "tokens": [50828, 440, 2638, 28583, 770, 11, 264, 8584, 2638, 28583, 770, 365, 264, 12557, 13318, 2638, 11, 51172], "temperature": 0.0, "avg_logprob": -0.1833395909781408, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0007877235766500235}, {"id": 50, "seek": 36732, "start": 384.12, "end": 390.12, "text": " and that had equations, larger graphics, was extensible. So, you had slots where you could", "tokens": [51204, 293, 300, 632, 11787, 11, 4833, 11837, 11, 390, 1279, 30633, 13, 407, 11, 291, 632, 24266, 689, 291, 727, 51504], "temperature": 0.0, "avg_logprob": -0.1833395909781408, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0007877235766500235}, {"id": 51, "seek": 36732, "start": 390.12, "end": 396.12, "text": " put memory, ROM cards, etc. And then there were follow-ups like the 49, etc. that were not very", "tokens": [51504, 829, 4675, 11, 41678, 5632, 11, 5183, 13, 400, 550, 456, 645, 1524, 12, 7528, 411, 264, 16513, 11, 5183, 13, 300, 645, 406, 588, 51804], "temperature": 0.0, "avg_logprob": -0.1833395909781408, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0007877235766500235}, {"id": 52, "seek": 39612, "start": 396.12, "end": 405.64, "text": " different from the 48. That series was recreated with HP50G and other calculators like the 38,", "tokens": [50364, 819, 490, 264, 11174, 13, 663, 2638, 390, 850, 26559, 365, 12557, 2803, 38, 293, 661, 4322, 3391, 411, 264, 12843, 11, 50840], "temperature": 0.0, "avg_logprob": -0.10517303148905437, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.0009373339707963169}, {"id": 53, "seek": 39612, "start": 405.64, "end": 413.88, "text": " the 48G2, etc. that are essentially running the original software designed for the Salon CPU", "tokens": [50840, 264, 11174, 38, 17, 11, 5183, 13, 300, 366, 4476, 2614, 264, 3380, 4722, 4761, 337, 264, 5996, 266, 13199, 51252], "temperature": 0.0, "avg_logprob": -0.10517303148905437, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.0009373339707963169}, {"id": 54, "seek": 39612, "start": 414.52, "end": 422.76, "text": " under emulation with an ARM CPU that emulates the Salon. And that gives you a significant boost in", "tokens": [51284, 833, 846, 2776, 365, 364, 45209, 13199, 300, 846, 26192, 264, 5996, 266, 13, 400, 300, 2709, 291, 257, 4776, 9194, 294, 51696], "temperature": 0.0, "avg_logprob": -0.10517303148905437, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.0009373339707963169}, {"id": 55, "seek": 42276, "start": 422.76, "end": 432.12, "text": " speed and essentially it executes exactly the same software. Now, because the ARM CPU itself", "tokens": [50364, 3073, 293, 4476, 309, 4454, 1819, 2293, 264, 912, 4722, 13, 823, 11, 570, 264, 45209, 13199, 2564, 50832], "temperature": 0.0, "avg_logprob": -0.09804630279541016, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0015233054291456938}, {"id": 56, "seek": 42276, "start": 432.12, "end": 437.48, "text": " is much, much faster than Salon, a number of folks started developing software for it.", "tokens": [50832, 307, 709, 11, 709, 4663, 813, 5996, 266, 11, 257, 1230, 295, 4024, 1409, 6416, 4722, 337, 309, 13, 51100], "temperature": 0.0, "avg_logprob": -0.09804630279541016, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0015233054291456938}, {"id": 57, "seek": 42276, "start": 437.48, "end": 443.56, "text": " And these series of calculators were based on somewhat standard platforms that could be flashed.", "tokens": [51100, 400, 613, 2638, 295, 4322, 3391, 645, 2361, 322, 8344, 3832, 9473, 300, 727, 312, 7319, 292, 13, 51404], "temperature": 0.0, "avg_logprob": -0.09804630279541016, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0015233054291456938}, {"id": 58, "seek": 42276, "start": 444.28, "end": 451.88, "text": " And so, people developed open-source software and free software to replace the built-in firmware.", "tokens": [51440, 400, 370, 11, 561, 4743, 1269, 12, 41676, 4722, 293, 1737, 4722, 281, 7406, 264, 3094, 12, 259, 30289, 13, 51820], "temperature": 0.0, "avg_logprob": -0.09804630279541016, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.0015233054291456938}, {"id": 59, "seek": 45188, "start": 451.88, "end": 457.32, "text": " An example shown here is new RPL, which is an ARM native implementation of RPL,", "tokens": [50364, 1107, 1365, 4898, 510, 307, 777, 14105, 43, 11, 597, 307, 364, 45209, 8470, 11420, 295, 14105, 43, 11, 50636], "temperature": 0.0, "avg_logprob": -0.12368036451793853, "compression_ratio": 1.5086206896551724, "no_speech_prob": 0.00034479625173844397}, {"id": 60, "seek": 45188, "start": 457.88, "end": 463.71999999999997, "text": " that is relatively complete as far as the language itself goes, but is missing a number", "tokens": [50664, 300, 307, 7226, 3566, 382, 1400, 382, 264, 2856, 2564, 1709, 11, 457, 307, 5361, 257, 1230, 50956], "temperature": 0.0, "avg_logprob": -0.12368036451793853, "compression_ratio": 1.5086206896551724, "no_speech_prob": 0.00034479625173844397}, {"id": 61, "seek": 45188, "start": 463.71999999999997, "end": 468.28, "text": " of features from the original calculator, including graphics, equation editor, etc.", "tokens": [50956, 295, 4122, 490, 264, 3380, 24993, 11, 3009, 11837, 11, 5367, 9839, 11, 5183, 13, 51184], "temperature": 0.0, "avg_logprob": -0.12368036451793853, "compression_ratio": 1.5086206896551724, "no_speech_prob": 0.00034479625173844397}, {"id": 62, "seek": 45188, "start": 470.68, "end": 477.32, "text": " Now, how does RPL work inside? It's very interesting because it's a very smart, minimalist system.", "tokens": [51304, 823, 11, 577, 775, 14105, 43, 589, 1854, 30, 467, 311, 588, 1880, 570, 309, 311, 257, 588, 4069, 11, 50192, 1185, 13, 51636], "temperature": 0.0, "avg_logprob": -0.12368036451793853, "compression_ratio": 1.5086206896551724, "no_speech_prob": 0.00034479625173844397}, {"id": 63, "seek": 47732, "start": 478.12, "end": 483.96, "text": " So, first of all, it's optimized for the HP Salon CPU, which is a descendant from", "tokens": [50404, 407, 11, 700, 295, 439, 11, 309, 311, 26941, 337, 264, 12557, 5996, 266, 13199, 11, 597, 307, 257, 16333, 394, 490, 50696], "temperature": 0.0, "avg_logprob": -0.19527618252501197, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.001181787229143083}, {"id": 64, "seek": 47732, "start": 483.96, "end": 492.6, "text": " CPUs built for earlier calculators. And that's a four-bit CPU with 64-bit registers designed", "tokens": [50696, 13199, 82, 3094, 337, 3071, 4322, 3391, 13, 400, 300, 311, 257, 1451, 12, 5260, 13199, 365, 12145, 12, 5260, 38351, 4761, 51128], "temperature": 0.0, "avg_logprob": -0.19527618252501197, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.001181787229143083}, {"id": 65, "seek": 47732, "start": 492.6, "end": 499.15999999999997, "text": " mostly for floating points. And so, you have four-bit nibbles that you can address individually in", "tokens": [51128, 5240, 337, 12607, 2793, 13, 400, 370, 11, 291, 362, 1451, 12, 5260, 38956, 8806, 300, 291, 393, 2985, 16652, 294, 51456], "temperature": 0.0, "avg_logprob": -0.19527618252501197, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.001181787229143083}, {"id": 66, "seek": 47732, "start": 499.15999999999997, "end": 506.68, "text": " memory. Addresses are 20 bits, that's five nibbles. And the 64 bits in the register can be", "tokens": [51456, 4675, 13, 5349, 40352, 366, 945, 9239, 11, 300, 311, 1732, 38956, 8806, 13, 400, 264, 12145, 9239, 294, 264, 7280, 393, 312, 51832], "temperature": 0.0, "avg_logprob": -0.19527618252501197, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.001181787229143083}, {"id": 67, "seek": 50668, "start": 506.76, "end": 512.28, "text": " addressed in a variety of ways that correspond to a BCD representation of floating points.", "tokens": [50368, 13847, 294, 257, 5673, 295, 2098, 300, 6805, 281, 257, 14359, 35, 10290, 295, 12607, 2793, 13, 50644], "temperature": 0.0, "avg_logprob": -0.09631951262311238, "compression_ratio": 1.5943396226415094, "no_speech_prob": 0.0017387584084644914}, {"id": 68, "seek": 50668, "start": 512.28, "end": 517.32, "text": " So, for instance, the X field is for exponent, the M for mantissa, the S for sine.", "tokens": [50644, 407, 11, 337, 5197, 11, 264, 1783, 2519, 307, 337, 37871, 11, 264, 376, 337, 10845, 10138, 11, 264, 318, 337, 18609, 13, 50896], "temperature": 0.0, "avg_logprob": -0.09631951262311238, "compression_ratio": 1.5943396226415094, "no_speech_prob": 0.0017387584084644914}, {"id": 69, "seek": 50668, "start": 519.96, "end": 527.08, "text": " So, there is a number of pieces of free software and free calculator firmware", "tokens": [51028, 407, 11, 456, 307, 257, 1230, 295, 3755, 295, 1737, 4722, 293, 1737, 24993, 30289, 51384], "temperature": 0.0, "avg_logprob": -0.09631951262311238, "compression_ratio": 1.5943396226415094, "no_speech_prob": 0.0017387584084644914}, {"id": 70, "seek": 50668, "start": 527.08, "end": 534.76, "text": " that can run either on ARM-based calculator, and then later led to platforms developed", "tokens": [51384, 300, 393, 1190, 2139, 322, 45209, 12, 6032, 24993, 11, 293, 550, 1780, 4684, 281, 9473, 4743, 51768], "temperature": 0.0, "avg_logprob": -0.09631951262311238, "compression_ratio": 1.5943396226415094, "no_speech_prob": 0.0017387584084644914}, {"id": 71, "seek": 53476, "start": 534.76, "end": 541.64, "text": " specifically to run this kind of software. In terms of available platforms, if you go beyond", "tokens": [50364, 4682, 281, 1190, 341, 733, 295, 4722, 13, 682, 2115, 295, 2435, 9473, 11, 498, 291, 352, 4399, 50708], "temperature": 0.0, "avg_logprob": -0.11605090063971442, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.000784139265306294}, {"id": 72, "seek": 53476, "start": 541.64, "end": 548.4399999999999, "text": " the HP calculators, so first of all, the ARM-based HP calculators can be flashed. So, even a lowly", "tokens": [50708, 264, 12557, 4322, 3391, 11, 370, 700, 295, 439, 11, 264, 45209, 12, 6032, 12557, 4322, 3391, 393, 312, 7319, 292, 13, 407, 11, 754, 257, 2295, 356, 51048], "temperature": 0.0, "avg_logprob": -0.11605090063971442, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.000784139265306294}, {"id": 73, "seek": 53476, "start": 549.3199999999999, "end": 557.88, "text": " HP 20 something can be given new firmware and a new life. You have an example here with something", "tokens": [51092, 12557, 945, 746, 393, 312, 2212, 777, 30289, 293, 257, 777, 993, 13, 509, 362, 364, 1365, 510, 365, 746, 51520], "temperature": 0.0, "avg_logprob": -0.11605090063971442, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.000784139265306294}, {"id": 74, "seek": 55788, "start": 557.88, "end": 567.56, "text": " called WP34S which creates a very advanced scientific calculator from a very inexpensive HP calculator.", "tokens": [50364, 1219, 343, 47, 12249, 50, 597, 7829, 257, 588, 7339, 8134, 24993, 490, 257, 588, 28382, 12557, 24993, 13, 50848], "temperature": 0.0, "avg_logprob": -0.182117674085829, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.007245330605655909}, {"id": 75, "seek": 55788, "start": 570.84, "end": 577.48, "text": " And there are also a number of free emulators for iOS, Android, etc. So, what you see here is a 42", "tokens": [51012, 400, 456, 366, 611, 257, 1230, 295, 1737, 846, 39265, 337, 17430, 11, 8853, 11, 5183, 13, 407, 11, 437, 291, 536, 510, 307, 257, 14034, 51344], "temperature": 0.0, "avg_logprob": -0.182117674085829, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.007245330605655909}, {"id": 76, "seek": 55788, "start": 577.48, "end": 586.76, "text": " emulator called 342. And Swiss Micros essentially started building the hardware around this software.", "tokens": [51344, 846, 16381, 1219, 12790, 17, 13, 400, 21965, 5818, 2635, 4476, 1409, 2390, 264, 8837, 926, 341, 4722, 13, 51808], "temperature": 0.0, "avg_logprob": -0.182117674085829, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.007245330605655909}, {"id": 77, "seek": 58676, "start": 586.84, "end": 593.56, "text": " So, they created the DM42 which runs a variant of 342 with some underlying firmware", "tokens": [50368, 407, 11, 436, 2942, 264, 15322, 15628, 597, 6676, 257, 17501, 295, 12790, 17, 365, 512, 14217, 30289, 50704], "temperature": 0.0, "avg_logprob": -0.12131752967834472, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0002605041954666376}, {"id": 78, "seek": 58676, "start": 594.28, "end": 600.76, "text": " to provide operating system-level services. And so, they have this platform and that same", "tokens": [50740, 281, 2893, 7447, 1185, 12, 12418, 3328, 13, 400, 370, 11, 436, 362, 341, 3663, 293, 300, 912, 51064], "temperature": 0.0, "avg_logprob": -0.12131752967834472, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0002605041954666376}, {"id": 79, "seek": 58676, "start": 600.76, "end": 606.36, "text": " platform just with a firmware flashing and changes in keyboard can emulate the HP 42,", "tokens": [51064, 3663, 445, 365, 257, 30289, 31049, 293, 2962, 294, 10186, 393, 45497, 264, 12557, 14034, 11, 51344], "temperature": 0.0, "avg_logprob": -0.12131752967834472, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0002605041954666376}, {"id": 80, "seek": 58676, "start": 606.36, "end": 613.96, "text": " the HP 41, etc. Now, third-party firmware has started sporting like mushrooms but", "tokens": [51344, 264, 12557, 18173, 11, 5183, 13, 823, 11, 2636, 12, 23409, 30289, 575, 1409, 32366, 411, 17973, 457, 51724], "temperature": 0.0, "avg_logprob": -0.12131752967834472, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0002605041954666376}, {"id": 81, "seek": 61396, "start": 613.96, "end": 619.8000000000001, "text": " really large and advanced firmware. There are not that many variants. What you see here", "tokens": [50364, 534, 2416, 293, 7339, 30289, 13, 821, 366, 406, 300, 867, 21669, 13, 708, 291, 536, 510, 50656], "temperature": 0.0, "avg_logprob": -0.1083490226579749, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.004746935795992613}, {"id": 82, "seek": 61396, "start": 620.36, "end": 628.84, "text": " is the descendant of WP34S which is called 43S and has a number of really advanced features,", "tokens": [50684, 307, 264, 16333, 394, 295, 343, 47, 12249, 50, 597, 307, 1219, 17914, 50, 293, 575, 257, 1230, 295, 534, 7339, 4122, 11, 51108], "temperature": 0.0, "avg_logprob": -0.1083490226579749, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.004746935795992613}, {"id": 83, "seek": 61396, "start": 628.84, "end": 635.96, "text": " but it's essentially still in the same spirit as the RPN calculators. In other words, it's still", "tokens": [51108, 457, 309, 311, 4476, 920, 294, 264, 912, 3797, 382, 264, 14105, 45, 4322, 3391, 13, 682, 661, 2283, 11, 309, 311, 920, 51464], "temperature": 0.0, "avg_logprob": -0.1083490226579749, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.004746935795992613}, {"id": 84, "seek": 61396, "start": 635.96, "end": 641.32, "text": " using the RPN logic with a fixed-size stack and not much in terms of typing.", "tokens": [51464, 1228, 264, 14105, 45, 9952, 365, 257, 6806, 12, 27553, 8630, 293, 406, 709, 294, 2115, 295, 18444, 13, 51732], "temperature": 0.0, "avg_logprob": -0.1083490226579749, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.004746935795992613}, {"id": 85, "seek": 64132, "start": 642.12, "end": 649.32, "text": " So, my first attempt to enter that space was to port a new RPL to DM42. And so, I created a simulator", "tokens": [50404, 407, 11, 452, 700, 5217, 281, 3242, 300, 1901, 390, 281, 2436, 257, 777, 14105, 43, 281, 15322, 15628, 13, 400, 370, 11, 286, 2942, 257, 32974, 50764], "temperature": 0.0, "avg_logprob": -0.20044286751452786, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0006629305426031351}, {"id": 86, "seek": 64132, "start": 649.32, "end": 657.5600000000001, "text": " and you can see the results of this experiment there with a side-by-side setup where you have", "tokens": [50764, 293, 291, 393, 536, 264, 3542, 295, 341, 5120, 456, 365, 257, 1252, 12, 2322, 12, 1812, 8657, 689, 291, 362, 51176], "temperature": 0.0, "avg_logprob": -0.20044286751452786, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0006629305426031351}, {"id": 87, "seek": 64132, "start": 657.5600000000001, "end": 664.12, "text": " the DM42 on the left, the HP 50G simulator on the in the middle, and the HP Prime simulator on the", "tokens": [51176, 264, 15322, 15628, 322, 264, 1411, 11, 264, 12557, 2625, 38, 32974, 322, 264, 294, 264, 2808, 11, 293, 264, 12557, 9655, 32974, 322, 264, 51504], "temperature": 0.0, "avg_logprob": -0.20044286751452786, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0006629305426031351}, {"id": 88, "seek": 66412, "start": 664.12, "end": 672.12, "text": " right. And essentially, my work was to try to make the software more portable, support one-bit", "tokens": [50364, 558, 13, 400, 4476, 11, 452, 589, 390, 281, 853, 281, 652, 264, 4722, 544, 21800, 11, 1406, 472, 12, 5260, 50764], "temperature": 0.0, "avg_logprob": -0.1843362053235372, "compression_ratio": 1.5180722891566265, "no_speech_prob": 0.001249154913239181}, {"id": 89, "seek": 66412, "start": 672.12, "end": 680.12, "text": " graphics on the DM42, but really take advantage of that platform. And on simulator, it worked pretty", "tokens": [50764, 11837, 322, 264, 15322, 15628, 11, 457, 534, 747, 5002, 295, 300, 3663, 13, 400, 322, 32974, 11, 309, 2732, 1238, 51164], "temperature": 0.0, "avg_logprob": -0.1843362053235372, "compression_ratio": 1.5180722891566265, "no_speech_prob": 0.001249154913239181}, {"id": 90, "seek": 66412, "start": 680.12, "end": 686.6, "text": " well. The problem is, as I said, this machine is really minimalist and it turns out that new", "tokens": [51164, 731, 13, 440, 1154, 307, 11, 382, 286, 848, 11, 341, 3479, 307, 534, 50192, 293, 309, 4523, 484, 300, 777, 51488], "temperature": 0.0, "avg_logprob": -0.1843362053235372, "compression_ratio": 1.5180722891566265, "no_speech_prob": 0.001249154913239181}, {"id": 91, "seek": 66412, "start": 686.6, "end": 692.12, "text": " RPL, as soon as I started trying to run it on the physical hardware, it just did not fit.", "tokens": [51488, 14105, 43, 11, 382, 2321, 382, 286, 1409, 1382, 281, 1190, 309, 322, 264, 4001, 8837, 11, 309, 445, 630, 406, 3318, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1843362053235372, "compression_ratio": 1.5180722891566265, "no_speech_prob": 0.001249154913239181}, {"id": 92, "seek": 69212, "start": 692.84, "end": 701.24, "text": " Why? Because the platform is built around an ultra-low-power ARM Cortex M4F, which has,", "tokens": [50400, 1545, 30, 1436, 264, 3663, 307, 3094, 926, 364, 14808, 12, 14107, 12, 9513, 45209, 28522, 3121, 376, 19, 37, 11, 597, 575, 11, 50820], "temperature": 0.0, "avg_logprob": -0.2208197310164168, "compression_ratio": 1.3872549019607843, "no_speech_prob": 0.00156599679030478}, {"id": 93, "seek": 69212, "start": 701.24, "end": 707.4, "text": " among other benefits, that the battery life on a battery like this is up to three years according", "tokens": [50820, 3654, 661, 5311, 11, 300, 264, 5809, 993, 322, 257, 5809, 411, 341, 307, 493, 281, 1045, 924, 4650, 51128], "temperature": 0.0, "avg_logprob": -0.2208197310164168, "compression_ratio": 1.3872549019607843, "no_speech_prob": 0.00156599679030478}, {"id": 94, "seek": 69212, "start": 707.4, "end": 717.32, "text": " to the vendor. Now, that machine has only 96K of RAM and only 70K free after the operating system", "tokens": [51128, 281, 264, 24321, 13, 823, 11, 300, 3479, 575, 787, 24124, 42, 295, 14561, 293, 787, 5285, 42, 1737, 934, 264, 7447, 1185, 51624], "temperature": 0.0, "avg_logprob": -0.2208197310164168, "compression_ratio": 1.3872549019607843, "no_speech_prob": 0.00156599679030478}, {"id": 95, "seek": 71732, "start": 717.4000000000001, "end": 724.6, "text": " load. How much is 64K? Well, that's essentially one Commodore 64 and a half. And the Commodore 64", "tokens": [50368, 3677, 13, 1012, 709, 307, 12145, 42, 30, 1042, 11, 300, 311, 4476, 472, 3046, 34239, 12145, 293, 257, 1922, 13, 400, 264, 3046, 34239, 12145, 50728], "temperature": 0.0, "avg_logprob": -0.252566131385597, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0036340728402137756}, {"id": 96, "seek": 71732, "start": 724.6, "end": 732.2, "text": " is not exactly yesterday's machine. There's only two megabytes of flash available. So again, in terms", "tokens": [50728, 307, 406, 2293, 5186, 311, 3479, 13, 821, 311, 787, 732, 10816, 24538, 295, 7319, 2435, 13, 407, 797, 11, 294, 2115, 51108], "temperature": 0.0, "avg_logprob": -0.252566131385597, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0036340728402137756}, {"id": 97, "seek": 71732, "start": 732.2, "end": 739.5600000000001, "text": " of old stuff, what remains free once you have loaded standard libraries and the floating-point", "tokens": [51108, 295, 1331, 1507, 11, 437, 7023, 1737, 1564, 291, 362, 13210, 3832, 15148, 293, 264, 12607, 12, 6053, 51476], "temperature": 0.0, "avg_logprob": -0.252566131385597, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0036340728402137756}, {"id": 98, "seek": 73956, "start": 740.52, "end": 748.4399999999999, "text": " emulation library from Intel, et cetera, is about 700K. So that's about the same size as an original", "tokens": [50412, 846, 2776, 6405, 490, 19762, 11, 1030, 11458, 11, 307, 466, 15204, 42, 13, 407, 300, 311, 466, 264, 912, 2744, 382, 364, 3380, 50808], "temperature": 0.0, "avg_logprob": -0.12189116376511594, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.004219101741909981}, {"id": 99, "seek": 73956, "start": 748.4399999999999, "end": 756.5999999999999, "text": " Macintosh floppy disk. So my conclusion within these numbers is that I had better restart from", "tokens": [50808, 5707, 686, 3019, 25343, 8200, 12355, 13, 407, 452, 10063, 1951, 613, 3547, 307, 300, 286, 632, 1101, 21022, 490, 51216], "temperature": 0.0, "avg_logprob": -0.12189116376511594, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.004219101741909981}, {"id": 100, "seek": 73956, "start": 756.5999999999999, "end": 761.16, "text": " scratch to create a firmware that was redesigned to fit in such a small system.", "tokens": [51216, 8459, 281, 1884, 257, 30289, 300, 390, 16762, 16690, 281, 3318, 294, 1270, 257, 1359, 1185, 13, 51444], "temperature": 0.0, "avg_logprob": -0.12189116376511594, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.004219101741909981}, {"id": 101, "seek": 73956, "start": 762.92, "end": 769.4, "text": " So how does that work? Well, first of all, I wanted to use C++ on a modern language with", "tokens": [51532, 407, 577, 775, 300, 589, 30, 1042, 11, 700, 295, 439, 11, 286, 1415, 281, 764, 383, 25472, 322, 257, 4363, 2856, 365, 51856], "temperature": 0.0, "avg_logprob": -0.12189116376511594, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.004219101741909981}, {"id": 102, "seek": 76940, "start": 769.48, "end": 775.48, "text": " templates and various library utilities, et cetera. But I needed to have garbage collection", "tokens": [50368, 21165, 293, 3683, 6405, 30482, 11, 1030, 11458, 13, 583, 286, 2978, 281, 362, 14150, 5765, 50668], "temperature": 0.0, "avg_logprob": -0.1165693329601753, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.000697151874192059}, {"id": 103, "seek": 76940, "start": 775.48, "end": 781.16, "text": " for the objects, just like the original RPL, and a very, very minimal memory usage.", "tokens": [50668, 337, 264, 6565, 11, 445, 411, 264, 3380, 14105, 43, 11, 293, 257, 588, 11, 588, 13206, 4675, 14924, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1165693329601753, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.000697151874192059}, {"id": 104, "seek": 76940, "start": 783.24, "end": 786.6, "text": " Let's start with the features that are implemented today. And that's essentially", "tokens": [51056, 961, 311, 722, 365, 264, 4122, 300, 366, 12270, 965, 13, 400, 300, 311, 4476, 51224], "temperature": 0.0, "avg_logprob": -0.1165693329601753, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.000697151874192059}, {"id": 105, "seek": 76940, "start": 786.6, "end": 793.4, "text": " based off the command set of the whole series from the HP48SX to the HP50G.", "tokens": [51224, 2361, 766, 264, 5622, 992, 295, 264, 1379, 2638, 490, 264, 12557, 13318, 50, 55, 281, 264, 12557, 2803, 38, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1165693329601753, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.000697151874192059}, {"id": 106, "seek": 79340, "start": 794.12, "end": 801.3199999999999, "text": " The Intel floating-point library that ships with the platform gives me 34 decimal", "tokens": [50400, 440, 19762, 12607, 12, 6053, 6405, 300, 11434, 365, 264, 3663, 2709, 385, 12790, 26601, 50760], "temperature": 0.0, "avg_logprob": -0.19853996018231926, "compression_ratio": 1.4792899408284024, "no_speech_prob": 0.0010646111331880093}, {"id": 107, "seek": 79340, "start": 802.28, "end": 809.16, "text": " places for floating points. So you see E and Pi here with the number of digits that were computed", "tokens": [50808, 3190, 337, 12607, 2793, 13, 407, 291, 536, 462, 293, 17741, 510, 365, 264, 1230, 295, 27011, 300, 645, 40610, 51152], "temperature": 0.0, "avg_logprob": -0.19853996018231926, "compression_ratio": 1.4792899408284024, "no_speech_prob": 0.0010646111331880093}, {"id": 108, "seek": 79340, "start": 809.16, "end": 814.1999999999999, "text": " by running the exponential of one and four times the octangent of one.", "tokens": [51152, 538, 2614, 264, 21510, 295, 472, 293, 1451, 1413, 264, 13350, 656, 317, 295, 472, 13, 51404], "temperature": 0.0, "avg_logprob": -0.19853996018231926, "compression_ratio": 1.4792899408284024, "no_speech_prob": 0.0010646111331880093}, {"id": 109, "seek": 81420, "start": 814.6800000000001, "end": 825.4000000000001, "text": " The platform, so my application software on top of that also supports large integers like the HP50G", "tokens": [50388, 440, 3663, 11, 370, 452, 3861, 4722, 322, 1192, 295, 300, 611, 9346, 2416, 41674, 411, 264, 12557, 2803, 38, 50924], "temperature": 0.0, "avg_logprob": -0.23829078674316406, "compression_ratio": 1.433862433862434, "no_speech_prob": 0.001725793699733913}, {"id": 110, "seek": 81420, "start": 826.12, "end": 832.5200000000001, "text": " as well as base numbers that today can be in hexadecimal, decimal, octal, or binary.", "tokens": [50960, 382, 731, 382, 3096, 3547, 300, 965, 393, 312, 294, 23291, 762, 66, 10650, 11, 26601, 11, 13350, 304, 11, 420, 17434, 13, 51280], "temperature": 0.0, "avg_logprob": -0.23829078674316406, "compression_ratio": 1.433862433862434, "no_speech_prob": 0.001725793699733913}, {"id": 111, "seek": 81420, "start": 833.6400000000001, "end": 839.96, "text": " And I plan to support arbitrary bases between two and 36 in a later firmware revision.", "tokens": [51336, 400, 286, 1393, 281, 1406, 23211, 17949, 1296, 732, 293, 8652, 294, 257, 1780, 30289, 34218, 13, 51652], "temperature": 0.0, "avg_logprob": -0.23829078674316406, "compression_ratio": 1.433862433862434, "no_speech_prob": 0.001725793699733913}, {"id": 112, "seek": 83996, "start": 840.84, "end": 847.5600000000001, "text": " You see here how these numbers are entered in the machine with the hashtag at the beginning.", "tokens": [50408, 509, 536, 510, 577, 613, 3547, 366, 9065, 294, 264, 3479, 365, 264, 20379, 412, 264, 2863, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1547198976789202, "compression_ratio": 1.590643274853801, "no_speech_prob": 0.002747724764049053}, {"id": 113, "seek": 83996, "start": 848.2, "end": 856.76, "text": " And then when you put this hashtag on the command line, the cursor shifts to be like", "tokens": [50776, 400, 550, 562, 291, 829, 341, 20379, 322, 264, 5622, 1622, 11, 264, 28169, 19201, 281, 312, 411, 51204], "temperature": 0.0, "avg_logprob": -0.1547198976789202, "compression_ratio": 1.590643274853801, "no_speech_prob": 0.002747724764049053}, {"id": 114, "seek": 83996, "start": 856.76, "end": 864.2800000000001, "text": " binary or base. And then I can enter the numbers directly and the first row of letters changes", "tokens": [51204, 17434, 420, 3096, 13, 400, 550, 286, 393, 3242, 264, 3547, 3838, 293, 264, 700, 5386, 295, 7825, 2962, 51580], "temperature": 0.0, "avg_logprob": -0.1547198976789202, "compression_ratio": 1.590643274853801, "no_speech_prob": 0.002747724764049053}, {"id": 115, "seek": 86428, "start": 864.28, "end": 874.04, "text": " directly to let me enter numbers more practically. So let me show you that live. So I bring up the", "tokens": [50364, 3838, 281, 718, 385, 3242, 3547, 544, 15667, 13, 407, 718, 385, 855, 291, 300, 1621, 13, 407, 286, 1565, 493, 264, 50852], "temperature": 0.0, "avg_logprob": -0.14979837490962103, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0028883609920740128}, {"id": 116, "seek": 86428, "start": 874.04, "end": 881.48, "text": " calculator. I click on shift base. And you see that I have the hash sign here. And I can say hash", "tokens": [50852, 24993, 13, 286, 2052, 322, 5513, 3096, 13, 400, 291, 536, 300, 286, 362, 264, 22019, 1465, 510, 13, 400, 286, 393, 584, 22019, 51224], "temperature": 0.0, "avg_logprob": -0.14979837490962103, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.0028883609920740128}, {"id": 117, "seek": 88148, "start": 882.2, "end": 896.9200000000001, "text": " one, two, A. And hash two, two, E plus. And I have my hexadecimal conversion here.", "tokens": [50400, 472, 11, 732, 11, 316, 13, 400, 22019, 732, 11, 732, 11, 462, 1804, 13, 400, 286, 362, 452, 23291, 762, 66, 10650, 14298, 510, 13, 51136], "temperature": 0.0, "avg_logprob": -0.17654321904768022, "compression_ratio": 1.3088235294117647, "no_speech_prob": 0.004323242697864771}, {"id": 118, "seek": 88148, "start": 901.4, "end": 909.0, "text": " So as I said, RPL has a number of data types that includes text, list, and arrays. So the lists", "tokens": [51360, 407, 382, 286, 848, 11, 14105, 43, 575, 257, 1230, 295, 1412, 3467, 300, 5974, 2487, 11, 1329, 11, 293, 41011, 13, 407, 264, 14511, 51740], "temperature": 0.0, "avg_logprob": -0.17654321904768022, "compression_ratio": 1.3088235294117647, "no_speech_prob": 0.004323242697864771}, {"id": 119, "seek": 90900, "start": 909.0, "end": 916.92, "text": " are between braces. The arrays are between square brackets. And the text is between quotes.", "tokens": [50364, 366, 1296, 41537, 13, 440, 41011, 366, 1296, 3732, 26179, 13, 400, 264, 2487, 307, 1296, 19963, 13, 50760], "temperature": 0.0, "avg_logprob": -0.11860447395138624, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0014548563631251454}, {"id": 120, "seek": 90900, "start": 916.92, "end": 923.48, "text": " You see a program there on level two that takes the hello string, the world string,", "tokens": [50760, 509, 536, 257, 1461, 456, 322, 1496, 732, 300, 2516, 264, 7751, 6798, 11, 264, 1002, 6798, 11, 51088], "temperature": 0.0, "avg_logprob": -0.11860447395138624, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0014548563631251454}, {"id": 121, "seek": 90900, "start": 923.48, "end": 927.32, "text": " then does a plus. And when you evaluate that program, you get hello world.", "tokens": [51088, 550, 775, 257, 1804, 13, 400, 562, 291, 13059, 300, 1461, 11, 291, 483, 7751, 1002, 13, 51280], "temperature": 0.0, "avg_logprob": -0.11860447395138624, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0014548563631251454}, {"id": 122, "seek": 90900, "start": 929.24, "end": 934.76, "text": " You have also programs and algebraic expressions. So I just showed what the program looks like.", "tokens": [51376, 509, 362, 611, 4268, 293, 21989, 299, 15277, 13, 407, 286, 445, 4712, 437, 264, 1461, 1542, 411, 13, 51652], "temperature": 0.0, "avg_logprob": -0.11860447395138624, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0014548563631251454}, {"id": 123, "seek": 93476, "start": 934.76, "end": 942.04, "text": " But you can also have algebraic expressions written the usual way. You see here, for instance,", "tokens": [50364, 583, 291, 393, 611, 362, 21989, 299, 15277, 3720, 264, 7713, 636, 13, 509, 536, 510, 11, 337, 5197, 11, 50728], "temperature": 0.0, "avg_logprob": -0.18426314396644705, "compression_ratio": 1.4375, "no_speech_prob": 0.000842399662360549}, {"id": 124, "seek": 93476, "start": 942.04, "end": 949.96, "text": " square root of x plus one. There is a plethora of scientific functions. The catalog in the", "tokens": [50728, 3732, 5593, 295, 2031, 1804, 472, 13, 821, 307, 257, 499, 302, 7013, 295, 8134, 6828, 13, 440, 19746, 294, 264, 51124], "temperature": 0.0, "avg_logprob": -0.18426314396644705, "compression_ratio": 1.4375, "no_speech_prob": 0.000842399662360549}, {"id": 125, "seek": 93476, "start": 950.52, "end": 958.68, "text": " HP48 series lists something like 1700 functions total. A little less on some other models,", "tokens": [51152, 12557, 13318, 2638, 14511, 746, 411, 43373, 6828, 3217, 13, 316, 707, 1570, 322, 512, 661, 5245, 11, 51560], "temperature": 0.0, "avg_logprob": -0.18426314396644705, "compression_ratio": 1.4375, "no_speech_prob": 0.000842399662360549}, {"id": 126, "seek": 95868, "start": 958.68, "end": 965.0799999999999, "text": " but it's the order of what you have. I also already implemented a storage mechanism for", "tokens": [50364, 457, 309, 311, 264, 1668, 295, 437, 291, 362, 13, 286, 611, 1217, 12270, 257, 6725, 7513, 337, 50684], "temperature": 0.0, "avg_logprob": -0.10119012685922477, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0025846376083791256}, {"id": 127, "seek": 95868, "start": 965.0799999999999, "end": 971.56, "text": " persistent values, so variables, directories, et cetera. And so what you see here is a three-level", "tokens": [50684, 24315, 4190, 11, 370, 9102, 11, 5391, 530, 11, 1030, 11458, 13, 400, 370, 437, 291, 536, 510, 307, 257, 1045, 12, 12418, 51008], "temperature": 0.0, "avg_logprob": -0.10119012685922477, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0025846376083791256}, {"id": 128, "seek": 95868, "start": 972.04, "end": 980.68, "text": " menu where when you hit the key, you evaluate what is inside the variable. When you shift,", "tokens": [51032, 6510, 689, 562, 291, 2045, 264, 2141, 11, 291, 13059, 437, 307, 1854, 264, 7006, 13, 1133, 291, 5513, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10119012685922477, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0025846376083791256}, {"id": 129, "seek": 95868, "start": 981.4, "end": 986.28, "text": " you will go to the second level in the menu and that will read the content of the variable.", "tokens": [51500, 291, 486, 352, 281, 264, 1150, 1496, 294, 264, 6510, 293, 300, 486, 1401, 264, 2701, 295, 264, 7006, 13, 51744], "temperature": 0.0, "avg_logprob": -0.10119012685922477, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0025846376083791256}, {"id": 130, "seek": 98628, "start": 986.8399999999999, "end": 992.8399999999999, "text": " And if you shift twice, then you're going to the third level of the menu and you're going to", "tokens": [50392, 400, 498, 291, 5513, 6091, 11, 550, 291, 434, 516, 281, 264, 2636, 1496, 295, 264, 6510, 293, 291, 434, 516, 281, 50692], "temperature": 0.0, "avg_logprob": -0.13062880875228286, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00235892366617918}, {"id": 131, "seek": 98628, "start": 992.8399999999999, "end": 998.92, "text": " store something in the variable. So again, I can show that live. I'm going to store the result I", "tokens": [50692, 3531, 746, 294, 264, 7006, 13, 407, 797, 11, 286, 393, 855, 300, 1621, 13, 286, 478, 516, 281, 3531, 264, 1874, 286, 50996], "temperature": 0.0, "avg_logprob": -0.13062880875228286, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00235892366617918}, {"id": 132, "seek": 98628, "start": 998.92, "end": 1009.0, "text": " just had. So execute is for execute equation. I'm going to call that B and I do store, sorry,", "tokens": [50996, 445, 632, 13, 407, 14483, 307, 337, 14483, 5367, 13, 286, 478, 516, 281, 818, 300, 363, 293, 286, 360, 3531, 11, 2597, 11, 51500], "temperature": 0.0, "avg_logprob": -0.13062880875228286, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00235892366617918}, {"id": 133, "seek": 100900, "start": 1009.96, "end": 1017.0, "text": " enter store. And then if I go to the recall menu that shows me the variable and you see my B here,", "tokens": [50412, 3242, 3531, 13, 400, 550, 498, 286, 352, 281, 264, 9901, 6510, 300, 3110, 385, 264, 7006, 293, 291, 536, 452, 363, 510, 11, 50764], "temperature": 0.0, "avg_logprob": -0.12069055510730278, "compression_ratio": 1.5617977528089888, "no_speech_prob": 0.0061013721860945225}, {"id": 134, "seek": 100900, "start": 1017.64, "end": 1024.76, "text": " and if I just evaluate B, I have the number I had. If I shift B, I record the value.", "tokens": [50796, 293, 498, 286, 445, 13059, 363, 11, 286, 362, 264, 1230, 286, 632, 13, 759, 286, 5513, 363, 11, 286, 2136, 264, 2158, 13, 51152], "temperature": 0.0, "avg_logprob": -0.12069055510730278, "compression_ratio": 1.5617977528089888, "no_speech_prob": 0.0061013721860945225}, {"id": 135, "seek": 100900, "start": 1025.72, "end": 1035.0, "text": " And if I want to store something else in B, I will shift twice, hit that key, and now B is 12.", "tokens": [51200, 400, 498, 286, 528, 281, 3531, 746, 1646, 294, 363, 11, 286, 486, 5513, 6091, 11, 2045, 300, 2141, 11, 293, 586, 363, 307, 2272, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12069055510730278, "compression_ratio": 1.5617977528089888, "no_speech_prob": 0.0061013721860945225}, {"id": 136, "seek": 103500, "start": 1035.96, "end": 1045.8, "text": " So as you can see, the system works already at that level. So in order to be able to really", "tokens": [50412, 407, 382, 291, 393, 536, 11, 264, 1185, 1985, 1217, 412, 300, 1496, 13, 407, 294, 1668, 281, 312, 1075, 281, 534, 50904], "temperature": 0.0, "avg_logprob": -0.14366511776022714, "compression_ratio": 1.4455958549222798, "no_speech_prob": 0.00044299752335064113}, {"id": 137, "seek": 103500, "start": 1047.32, "end": 1054.52, "text": " have something efficient on such a small machine, I had to design a custom object model and I based", "tokens": [50980, 362, 746, 7148, 322, 1270, 257, 1359, 3479, 11, 286, 632, 281, 1715, 257, 2375, 2657, 2316, 293, 286, 2361, 51340], "temperature": 0.0, "avg_logprob": -0.14366511776022714, "compression_ratio": 1.4455958549222798, "no_speech_prob": 0.00044299752335064113}, {"id": 138, "seek": 103500, "start": 1054.52, "end": 1062.04, "text": " it on RPL itself, the historical RPL, but I tried to make it much more compact. And for", "tokens": [51340, 309, 322, 14105, 43, 2564, 11, 264, 8584, 14105, 43, 11, 457, 286, 3031, 281, 652, 309, 709, 544, 14679, 13, 400, 337, 51716], "temperature": 0.0, "avg_logprob": -0.14366511776022714, "compression_ratio": 1.4455958549222798, "no_speech_prob": 0.00044299752335064113}, {"id": 139, "seek": 106204, "start": 1062.04, "end": 1069.8, "text": " instance, I use LB128 to store all the objects in memory. So LB128 is this system used for", "tokens": [50364, 5197, 11, 286, 764, 441, 33, 4762, 23, 281, 3531, 439, 264, 6565, 294, 4675, 13, 407, 441, 33, 4762, 23, 307, 341, 1185, 1143, 337, 50752], "temperature": 0.0, "avg_logprob": -0.158349921063679, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.0005109566845931113}, {"id": 140, "seek": 106204, "start": 1069.8, "end": 1077.24, "text": " instance in Dwarf that encodes integers by having only the last, so you have seven bits per byte,", "tokens": [50752, 5197, 294, 413, 6925, 69, 300, 2058, 4789, 41674, 538, 1419, 787, 264, 1036, 11, 370, 291, 362, 3407, 9239, 680, 40846, 11, 51124], "temperature": 0.0, "avg_logprob": -0.158349921063679, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.0005109566845931113}, {"id": 141, "seek": 106204, "start": 1077.96, "end": 1086.2, "text": " and the last one in the series has a bit clear, the other have a bit set. So the type that is the", "tokens": [51160, 293, 264, 1036, 472, 294, 264, 2638, 575, 257, 857, 1850, 11, 264, 661, 362, 257, 857, 992, 13, 407, 264, 2010, 300, 307, 264, 51572], "temperature": 0.0, "avg_logprob": -0.158349921063679, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.0005109566845931113}, {"id": 142, "seek": 108620, "start": 1086.2, "end": 1093.88, "text": " first byte or LB128 value is an index to the handler table used for evaluation. So instead", "tokens": [50364, 700, 40846, 420, 441, 33, 4762, 23, 2158, 307, 364, 8186, 281, 264, 41967, 3199, 1143, 337, 13344, 13, 407, 2602, 50748], "temperature": 0.0, "avg_logprob": -0.11523157236527423, "compression_ratio": 1.289855072463768, "no_speech_prob": 0.004256183747202158}, {"id": 143, "seek": 108620, "start": 1093.88, "end": 1102.52, "text": " of using direct addresses like in RPL, I use an index. And so that means I can have 128", "tokens": [50748, 295, 1228, 2047, 16862, 411, 294, 14105, 43, 11, 286, 764, 364, 8186, 13, 400, 370, 300, 1355, 286, 393, 362, 29810, 51180], "temperature": 0.0, "avg_logprob": -0.11523157236527423, "compression_ratio": 1.289855072463768, "no_speech_prob": 0.004256183747202158}, {"id": 144, "seek": 110252, "start": 1103.16, "end": 1116.68, "text": " one byte types or commands and 16384 fit in two bytes. And as a reminder, in RPL that was 205,", "tokens": [50396, 472, 40846, 3467, 420, 16901, 293, 3165, 12625, 19, 3318, 294, 732, 36088, 13, 400, 382, 257, 13548, 11, 294, 14105, 43, 300, 390, 945, 20, 11, 51072], "temperature": 0.0, "avg_logprob": -0.2067478955802271, "compression_ratio": 1.2837837837837838, "no_speech_prob": 0.007003524340689182}, {"id": 145, "seek": 110252, "start": 1116.68, "end": 1126.84, "text": " 2.5 bytes, five nibbles for each type. So I'm saving a little here. So you see here the catalog", "tokens": [51072, 568, 13, 20, 36088, 11, 1732, 38956, 8806, 337, 1184, 2010, 13, 407, 286, 478, 6816, 257, 707, 510, 13, 407, 291, 536, 510, 264, 19746, 51580], "temperature": 0.0, "avg_logprob": -0.2067478955802271, "compression_ratio": 1.2837837837837838, "no_speech_prob": 0.007003524340689182}, {"id": 146, "seek": 112684, "start": 1126.84, "end": 1137.9599999999998, "text": " on the HP 450, I think. So let me compare and contrast the storage of something like the number", "tokens": [50364, 322, 264, 12557, 26034, 11, 286, 519, 13, 407, 718, 385, 6794, 293, 8712, 264, 6725, 295, 746, 411, 264, 1230, 50920], "temperature": 0.0, "avg_logprob": -0.13133641009060842, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.0017953489441424608}, {"id": 147, "seek": 112684, "start": 1137.9599999999998, "end": 1147.6399999999999, "text": " one. To be precise, it's the internal number one on the HP48. The HP48 has no real user integers,", "tokens": [50920, 472, 13, 1407, 312, 13600, 11, 309, 311, 264, 6920, 1230, 472, 322, 264, 12557, 13318, 13, 440, 12557, 13318, 575, 572, 957, 4195, 41674, 11, 51404], "temperature": 0.0, "avg_logprob": -0.13133641009060842, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.0017953489441424608}, {"id": 148, "seek": 114764, "start": 1147.72, "end": 1158.44, "text": " whereas a DB48X has. So when you type one, the most compact storage you have for, sorry,", "tokens": [50368, 9735, 257, 26754, 13318, 55, 575, 13, 407, 562, 291, 2010, 472, 11, 264, 881, 14679, 6725, 291, 362, 337, 11, 2597, 11, 50904], "temperature": 0.0, "avg_logprob": -0.18489568373736212, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.0036496820393949747}, {"id": 149, "seek": 114764, "start": 1158.44, "end": 1167.96, "text": " that's actually three, I got that wrong on the HP48. So the value that you see here,", "tokens": [50904, 300, 311, 767, 1045, 11, 286, 658, 300, 2085, 322, 264, 12557, 13318, 13, 407, 264, 2158, 300, 291, 536, 510, 11, 51380], "temperature": 0.0, "avg_logprob": -0.18489568373736212, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.0036496820393949747}, {"id": 150, "seek": 116796, "start": 1167.96, "end": 1177.88, "text": " that's the prefix. And so the 02911 is the address of the evaluation handler for integers.", "tokens": [50364, 300, 311, 264, 46969, 13, 400, 370, 264, 1958, 11871, 5348, 307, 264, 2985, 295, 264, 13344, 41967, 337, 41674, 13, 50860], "temperature": 0.0, "avg_logprob": -0.14708297729492187, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.0017273504054173827}, {"id": 151, "seek": 116796, "start": 1178.76, "end": 1186.04, "text": " And three, that should actually be one, is the payload. The storage in LB128 is 14,", "tokens": [50904, 400, 1045, 11, 300, 820, 767, 312, 472, 11, 307, 264, 30918, 13, 440, 6725, 294, 441, 33, 4762, 23, 307, 3499, 11, 51268], "temperature": 0.0, "avg_logprob": -0.14708297729492187, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.0017273504054173827}, {"id": 152, "seek": 116796, "start": 1186.04, "end": 1192.8400000000001, "text": " that's the index for integer types. And 01 is the actual value. And because the habit is not set,", "tokens": [51268, 300, 311, 264, 8186, 337, 24922, 3467, 13, 400, 23185, 307, 264, 3539, 2158, 13, 400, 570, 264, 7164, 307, 406, 992, 11, 51608], "temperature": 0.0, "avg_logprob": -0.14708297729492187, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.0017273504054173827}, {"id": 153, "seek": 119284, "start": 1192.84, "end": 1199.8799999999999, "text": " that stops here and we're done. If you look at ABC, how the text ABC is stored,", "tokens": [50364, 300, 10094, 510, 293, 321, 434, 1096, 13, 759, 291, 574, 412, 22342, 11, 577, 264, 2487, 22342, 307, 12187, 11, 50716], "temperature": 0.0, "avg_logprob": -0.14426297317316503, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.000542770663741976}, {"id": 154, "seek": 119284, "start": 1199.8799999999999, "end": 1208.52, "text": " the prefix in the HP48 is 0282C. So that's the five nibbles address. Then you have the total size,", "tokens": [50716, 264, 46969, 294, 264, 12557, 13318, 307, 1958, 11205, 17, 34, 13, 407, 300, 311, 264, 1732, 38956, 8806, 2985, 13, 1396, 291, 362, 264, 3217, 2744, 11, 51148], "temperature": 0.0, "avg_logprob": -0.14426297317316503, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.000542770663741976}, {"id": 155, "seek": 119284, "start": 1208.52, "end": 1219.3999999999999, "text": " and then you have the ABC encoding itself. Whereas for DB48X, you have the type, which is two,", "tokens": [51148, 293, 550, 291, 362, 264, 22342, 43430, 2564, 13, 13813, 337, 26754, 13318, 55, 11, 291, 362, 264, 2010, 11, 597, 307, 732, 11, 51692], "temperature": 0.0, "avg_logprob": -0.14426297317316503, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.000542770663741976}, {"id": 156, "seek": 121940, "start": 1219.4, "end": 1227.72, "text": " then you have the length again encoded as a DB128. And so because it's less than 128,", "tokens": [50364, 550, 291, 362, 264, 4641, 797, 2058, 12340, 382, 257, 26754, 4762, 23, 13, 400, 370, 570, 309, 311, 1570, 813, 29810, 11, 50780], "temperature": 0.0, "avg_logprob": -0.09935387078817788, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0005878318333998322}, {"id": 157, "seek": 121940, "start": 1227.72, "end": 1236.44, "text": " it uses only one byte. And then I have the data itself after that. The name ABC is exactly the", "tokens": [50780, 309, 4960, 787, 472, 40846, 13, 400, 550, 286, 362, 264, 1412, 2564, 934, 300, 13, 440, 1315, 22342, 307, 2293, 264, 51216], "temperature": 0.0, "avg_logprob": -0.09935387078817788, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0005878318333998322}, {"id": 158, "seek": 121940, "start": 1236.44, "end": 1242.76, "text": " same encoding, except that the prefix is not the same. And for DB48X, the type shifts from two to", "tokens": [51216, 912, 43430, 11, 3993, 300, 264, 46969, 307, 406, 264, 912, 13, 400, 337, 26754, 13318, 55, 11, 264, 2010, 19201, 490, 732, 281, 51532], "temperature": 0.0, "avg_logprob": -0.09935387078817788, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0005878318333998322}, {"id": 159, "seek": 124276, "start": 1242.84, "end": 1246.68, "text": " one C. The types themselves change with every build, by the way.", "tokens": [50368, 472, 383, 13, 440, 3467, 2969, 1319, 365, 633, 1322, 11, 538, 264, 636, 13, 50560], "temperature": 0.0, "avg_logprob": -0.1319380772264698, "compression_ratio": 1.5270935960591132, "no_speech_prob": 0.001896824687719345}, {"id": 160, "seek": 124276, "start": 1248.76, "end": 1252.04, "text": " So that means the evaluation loop is extremely simple.", "tokens": [50664, 407, 300, 1355, 264, 13344, 6367, 307, 4664, 2199, 13, 50828], "temperature": 0.0, "avg_logprob": -0.1319380772264698, "compression_ratio": 1.5270935960591132, "no_speech_prob": 0.001896824687719345}, {"id": 161, "seek": 124276, "start": 1254.92, "end": 1260.92, "text": " It's essentially the way this works. You can see the code here is that you're going to take for", "tokens": [50972, 467, 311, 4476, 264, 636, 341, 1985, 13, 509, 393, 536, 264, 3089, 510, 307, 300, 291, 434, 516, 281, 747, 337, 51272], "temperature": 0.0, "avg_logprob": -0.1319380772264698, "compression_ratio": 1.5270935960591132, "no_speech_prob": 0.001896824687719345}, {"id": 162, "seek": 124276, "start": 1260.92, "end": 1265.72, "text": " each object, you're going to compute its size, skip to the next one, and then call the handler", "tokens": [51272, 1184, 2657, 11, 291, 434, 516, 281, 14722, 1080, 2744, 11, 10023, 281, 264, 958, 472, 11, 293, 550, 818, 264, 41967, 51512], "temperature": 0.0, "avg_logprob": -0.1319380772264698, "compression_ratio": 1.5270935960591132, "no_speech_prob": 0.001896824687719345}, {"id": 163, "seek": 126572, "start": 1265.72, "end": 1273.24, "text": " and evaluate that handler. So it's really evaluating a program in DB48X is extremely fast.", "tokens": [50364, 293, 13059, 300, 41967, 13, 407, 309, 311, 534, 27479, 257, 1461, 294, 26754, 13318, 55, 307, 4664, 2370, 13, 50740], "temperature": 0.0, "avg_logprob": -0.11265378701882284, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.0007435821462422609}, {"id": 164, "seek": 126572, "start": 1275.16, "end": 1282.84, "text": " And there is a fast, simple copying garbage collector. And the picture that was supposed", "tokens": [50836, 400, 456, 307, 257, 2370, 11, 2199, 27976, 14150, 23960, 13, 400, 264, 3036, 300, 390, 3442, 51220], "temperature": 0.0, "avg_logprob": -0.11265378701882284, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.0007435821462422609}, {"id": 165, "seek": 126572, "start": 1282.84, "end": 1289.32, "text": " to illustrate that was a promptly garbage collector as well. So what is the improvement", "tokens": [51220, 281, 23221, 300, 390, 257, 48594, 14150, 23960, 382, 731, 13, 407, 437, 307, 264, 10444, 51544], "temperature": 0.0, "avg_logprob": -0.11265378701882284, "compression_ratio": 1.5614035087719298, "no_speech_prob": 0.0007435821462422609}, {"id": 166, "seek": 128932, "start": 1289.3999999999999, "end": 1296.2, "text": " over existing ASP calculators? Well, moving from 4-bit to 32-bit CPU means that it's much,", "tokens": [50368, 670, 6741, 7469, 47, 4322, 3391, 30, 1042, 11, 2684, 490, 1017, 12, 5260, 281, 8858, 12, 5260, 13199, 1355, 300, 309, 311, 709, 11, 50708], "temperature": 0.0, "avg_logprob": -0.16066977852269224, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.0089395297691226}, {"id": 167, "seek": 128932, "start": 1296.2, "end": 1302.76, "text": " much faster on various tests like loops, et cetera, and between one, two or three orders of magnitude", "tokens": [50708, 709, 4663, 322, 3683, 6921, 411, 16121, 11, 1030, 11458, 11, 293, 1296, 472, 11, 732, 420, 1045, 9470, 295, 15668, 51036], "temperature": 0.0, "avg_logprob": -0.16066977852269224, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.0089395297691226}, {"id": 168, "seek": 128932, "start": 1302.76, "end": 1310.4399999999998, "text": " faster. Scientific computations are even faster. There is a high resolution monochrome in display.", "tokens": [51036, 4663, 13, 47437, 2807, 763, 366, 754, 4663, 13, 821, 307, 257, 1090, 8669, 1108, 8997, 11505, 294, 4674, 13, 51420], "temperature": 0.0, "avg_logprob": -0.16066977852269224, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.0089395297691226}, {"id": 169, "seek": 128932, "start": 1311.3999999999999, "end": 1317.24, "text": " That means that when you switch off the calculator, it keeps a picture that you display there.", "tokens": [51468, 663, 1355, 300, 562, 291, 3679, 766, 264, 24993, 11, 309, 5965, 257, 3036, 300, 291, 4674, 456, 13, 51760], "temperature": 0.0, "avg_logprob": -0.16066977852269224, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.0089395297691226}, {"id": 170, "seek": 131724, "start": 1317.24, "end": 1324.36, "text": " And so we have these fancy off images that you can use. So let me show you some examples here.", "tokens": [50364, 400, 370, 321, 362, 613, 10247, 766, 5267, 300, 291, 393, 764, 13, 407, 718, 385, 855, 291, 512, 5110, 510, 13, 50720], "temperature": 0.0, "avg_logprob": -0.09466438293457032, "compression_ratio": 1.5754716981132075, "no_speech_prob": 0.0002690884575713426}, {"id": 171, "seek": 131724, "start": 1326.1200000000001, "end": 1331.4, "text": " So you see this is one off image. And if I shift off, then I'm going to see another image.", "tokens": [50808, 407, 291, 536, 341, 307, 472, 766, 3256, 13, 400, 498, 286, 5513, 766, 11, 550, 286, 478, 516, 281, 536, 1071, 3256, 13, 51072], "temperature": 0.0, "avg_logprob": -0.09466438293457032, "compression_ratio": 1.5754716981132075, "no_speech_prob": 0.0002690884575713426}, {"id": 172, "seek": 131724, "start": 1331.4, "end": 1335.4, "text": " And again, because it's an E ink, it doesn't consume any memory.", "tokens": [51072, 400, 797, 11, 570, 309, 311, 364, 462, 11276, 11, 309, 1177, 380, 14732, 604, 4675, 13, 51272], "temperature": 0.0, "avg_logprob": -0.09466438293457032, "compression_ratio": 1.5754716981132075, "no_speech_prob": 0.0002690884575713426}, {"id": 173, "seek": 131724, "start": 1338.2, "end": 1343.56, "text": " There are three rows for the softkey menu system. That's an improvement compared to", "tokens": [51412, 821, 366, 1045, 13241, 337, 264, 2787, 4119, 6510, 1185, 13, 663, 311, 364, 10444, 5347, 281, 51680], "temperature": 0.0, "avg_logprob": -0.09466438293457032, "compression_ratio": 1.5754716981132075, "no_speech_prob": 0.0002690884575713426}, {"id": 174, "seek": 134356, "start": 1344.52, "end": 1352.52, "text": " the original HP calculators. Because of the high resolution display, we can display", "tokens": [50412, 264, 3380, 12557, 4322, 3391, 13, 1436, 295, 264, 1090, 8669, 4674, 11, 321, 393, 4674, 50812], "temperature": 0.0, "avg_logprob": -0.13886870443820953, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.000998679781332612}, {"id": 175, "seek": 134356, "start": 1352.52, "end": 1360.36, "text": " the functions associated with base function, shift, and double shift. And as I pointed out earlier,", "tokens": [50812, 264, 6828, 6615, 365, 3096, 2445, 11, 5513, 11, 293, 3834, 5513, 13, 400, 382, 286, 10932, 484, 3071, 11, 51204], "temperature": 0.0, "avg_logprob": -0.13886870443820953, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.000998679781332612}, {"id": 176, "seek": 134356, "start": 1360.9199999999998, "end": 1366.9199999999998, "text": " the highlighted portion in black moves as you hit the shift key. So let me show that again.", "tokens": [51232, 264, 17173, 8044, 294, 2211, 6067, 382, 291, 2045, 264, 5513, 2141, 13, 407, 718, 385, 855, 300, 797, 13, 51532], "temperature": 0.0, "avg_logprob": -0.13886870443820953, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.000998679781332612}, {"id": 177, "seek": 136692, "start": 1367.88, "end": 1373.0800000000002, "text": " So you see that if I hit the shift key once, then I get to recalling the value B.", "tokens": [50412, 407, 291, 536, 300, 498, 286, 2045, 264, 5513, 2141, 1564, 11, 550, 286, 483, 281, 9901, 278, 264, 2158, 363, 13, 50672], "temperature": 0.0, "avg_logprob": -0.13017845153808594, "compression_ratio": 1.5123456790123457, "no_speech_prob": 0.0020494956988841295}, {"id": 178, "seek": 136692, "start": 1373.0800000000002, "end": 1379.48, "text": " And if I hit twice, then I move there and then back to the original location.", "tokens": [50672, 400, 498, 286, 2045, 6091, 11, 550, 286, 1286, 456, 293, 550, 646, 281, 264, 3380, 4914, 13, 50992], "temperature": 0.0, "avg_logprob": -0.13017845153808594, "compression_ratio": 1.5123456790123457, "no_speech_prob": 0.0020494956988841295}, {"id": 179, "seek": 136692, "start": 1383.24, "end": 1388.44, "text": " There is a common catalog and auto completion. So that's better shown than explained.", "tokens": [51180, 821, 307, 257, 2689, 19746, 293, 8399, 19372, 13, 407, 300, 311, 1101, 4898, 813, 8825, 13, 51440], "temperature": 0.0, "avg_logprob": -0.13017845153808594, "compression_ratio": 1.5123456790123457, "no_speech_prob": 0.0020494956988841295}, {"id": 180, "seek": 138844, "start": 1389.24, "end": 1397.72, "text": " So let me type. So let me go back to my demo system here. So let's say that if I hit the", "tokens": [50404, 407, 718, 385, 2010, 13, 407, 718, 385, 352, 646, 281, 452, 10723, 1185, 510, 13, 407, 718, 311, 584, 300, 498, 286, 2045, 264, 50828], "temperature": 0.0, "avg_logprob": -0.12179445016263711, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.015887370333075523}, {"id": 181, "seek": 138844, "start": 1398.8400000000001, "end": 1403.88, "text": " shift key and I hold it, I shift to alpha mode. And now I'm going to type, for instance,", "tokens": [50884, 5513, 2141, 293, 286, 1797, 309, 11, 286, 5513, 281, 8961, 4391, 13, 400, 586, 286, 478, 516, 281, 2010, 11, 337, 5197, 11, 51136], "temperature": 0.0, "avg_logprob": -0.12179445016263711, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.015887370333075523}, {"id": 182, "seek": 138844, "start": 1403.88, "end": 1409.24, "text": " A. And we are going to see nothing because I was still in the recall menu. I hit plus.", "tokens": [51136, 316, 13, 400, 321, 366, 516, 281, 536, 1825, 570, 286, 390, 920, 294, 264, 9901, 6510, 13, 286, 2045, 1804, 13, 51404], "temperature": 0.0, "avg_logprob": -0.12179445016263711, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.015887370333075523}, {"id": 183, "seek": 138844, "start": 1409.96, "end": 1414.3600000000001, "text": " And you see that now I have auto completion at the bottom with the various comments that begin", "tokens": [51440, 400, 291, 536, 300, 586, 286, 362, 8399, 19372, 412, 264, 2767, 365, 264, 3683, 3053, 300, 1841, 51660], "temperature": 0.0, "avg_logprob": -0.12179445016263711, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.015887370333075523}, {"id": 184, "seek": 141436, "start": 1414.36, "end": 1420.36, "text": " with A. There is a plus here. And you might wonder why the plus is here. It's because it also takes", "tokens": [50364, 365, 316, 13, 821, 307, 257, 1804, 510, 13, 400, 291, 1062, 2441, 983, 264, 1804, 307, 510, 13, 467, 311, 570, 309, 611, 2516, 50664], "temperature": 0.0, "avg_logprob": -0.10290211897629958, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00243295612744987}, {"id": 185, "seek": 141436, "start": 1420.36, "end": 1428.76, "text": " the name add. So add contains an A. And I have ABS, for instance. And now I can do ABS. And I have", "tokens": [50664, 264, 1315, 909, 13, 407, 909, 8306, 364, 316, 13, 400, 286, 362, 41707, 11, 337, 5197, 13, 400, 586, 286, 393, 360, 41707, 13, 400, 286, 362, 51084], "temperature": 0.0, "avg_logprob": -0.10290211897629958, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00243295612744987}, {"id": 186, "seek": 141436, "start": 1428.76, "end": 1435.9599999999998, "text": " evaluated ABS of 12 directly. So that's pretty neat. That's a good way to quickly access a very,", "tokens": [51084, 25509, 41707, 295, 2272, 3838, 13, 407, 300, 311, 1238, 10654, 13, 663, 311, 257, 665, 636, 281, 2661, 2105, 257, 588, 11, 51444], "temperature": 0.0, "avg_logprob": -0.10290211897629958, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00243295612744987}, {"id": 187, "seek": 141436, "start": 1435.9599999999998, "end": 1443.32, "text": " very large number of functions. And it's optimized for the original GM42 key layout.", "tokens": [51444, 588, 2416, 1230, 295, 6828, 13, 400, 309, 311, 26941, 337, 264, 3380, 16609, 15628, 2141, 13333, 13, 51812], "temperature": 0.0, "avg_logprob": -0.10290211897629958, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00243295612744987}, {"id": 188, "seek": 144332, "start": 1443.32, "end": 1449.32, "text": " I paid a lot of attention to this. So for instance, I showed earlier how, for instance,", "tokens": [50364, 286, 4835, 257, 688, 295, 3202, 281, 341, 13, 407, 337, 5197, 11, 286, 4712, 3071, 577, 11, 337, 5197, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12084613434255939, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0023832651786506176}, {"id": 189, "seek": 144332, "start": 1449.32, "end": 1459.3999999999999, "text": " when you type execute, which is execute a comment in the GM42, there is no real equivalent for the", "tokens": [50664, 562, 291, 2010, 14483, 11, 597, 307, 14483, 257, 2871, 294, 264, 16609, 15628, 11, 456, 307, 572, 957, 10344, 337, 264, 51168], "temperature": 0.0, "avg_logprob": -0.12084613434255939, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0023832651786506176}, {"id": 190, "seek": 144332, "start": 1461.32, "end": 1468.4399999999998, "text": " RPL model. So instead, I retranslate that as execute equation. And that does something that is", "tokens": [51264, 14105, 43, 2316, 13, 407, 2602, 11, 286, 23106, 599, 17593, 300, 382, 14483, 5367, 13, 400, 300, 775, 746, 300, 307, 51620], "temperature": 0.0, "avg_logprob": -0.12084613434255939, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0023832651786506176}, {"id": 191, "seek": 146844, "start": 1468.44, "end": 1478.6000000000001, "text": " very frequent in RPL, which is to have a symbolic value for something. You can see also that the", "tokens": [50364, 588, 18004, 294, 14105, 43, 11, 597, 307, 281, 362, 257, 25755, 2158, 337, 746, 13, 509, 393, 536, 611, 300, 264, 50872], "temperature": 0.0, "avg_logprob": -0.0953852653503418, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005632392596453428}, {"id": 192, "seek": 146844, "start": 1478.6000000000001, "end": 1484.8400000000001, "text": " cursor is moving, is changing depending on what I'm doing. So for instance, here it's A for algebraic.", "tokens": [50872, 28169, 307, 2684, 11, 307, 4473, 5413, 322, 437, 286, 478, 884, 13, 407, 337, 5197, 11, 510, 309, 311, 316, 337, 21989, 299, 13, 51184], "temperature": 0.0, "avg_logprob": -0.0953852653503418, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005632392596453428}, {"id": 193, "seek": 146844, "start": 1485.4, "end": 1490.28, "text": " And it's white because I'm in alpha mode. If I leave alpha mode, it's going to turn black. But", "tokens": [51212, 400, 309, 311, 2418, 570, 286, 478, 294, 8961, 4391, 13, 759, 286, 1856, 8961, 4391, 11, 309, 311, 516, 281, 1261, 2211, 13, 583, 51456], "temperature": 0.0, "avg_logprob": -0.0953852653503418, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005632392596453428}, {"id": 194, "seek": 149028, "start": 1490.28, "end": 1499.08, "text": " I'm still in algebraic mode. The row keys are, I have only two, the HP48 has four. So on the", "tokens": [50364, 286, 478, 920, 294, 21989, 299, 4391, 13, 440, 5386, 9317, 366, 11, 286, 362, 787, 732, 11, 264, 12557, 13318, 575, 1451, 13, 407, 322, 264, 50804], "temperature": 0.0, "avg_logprob": -0.14962169270456574, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00032444577664136887}, {"id": 195, "seek": 149028, "start": 1499.08, "end": 1508.6, "text": " common line, up and down, move left and right. It's an acquired paste. There is also no real", "tokens": [50804, 2689, 1622, 11, 493, 293, 760, 11, 1286, 1411, 293, 558, 13, 467, 311, 364, 17554, 9163, 13, 821, 307, 611, 572, 957, 51280], "temperature": 0.0, "avg_logprob": -0.14962169270456574, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00032444577664136887}, {"id": 196, "seek": 149028, "start": 1508.6, "end": 1516.28, "text": " run stop for programs. So RS is instead translated as eval. So it evaluates the value that you have.", "tokens": [51280, 1190, 1590, 337, 4268, 13, 407, 25855, 307, 2602, 16805, 382, 1073, 304, 13, 407, 309, 6133, 1024, 264, 2158, 300, 291, 362, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14962169270456574, "compression_ratio": 1.4591836734693877, "no_speech_prob": 0.00032444577664136887}, {"id": 197, "seek": 152028, "start": 1520.28, "end": 1524.68, "text": " And as I said, there is this markdown based online help. So you saw that in the video,", "tokens": [50364, 400, 382, 286, 848, 11, 456, 307, 341, 1491, 5093, 2361, 2950, 854, 13, 407, 291, 1866, 300, 294, 264, 960, 11, 50584], "temperature": 0.0, "avg_logprob": -0.10786903897921245, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.0007081779767759144}, {"id": 198, "seek": 152028, "start": 1524.68, "end": 1531.24, "text": " but we can show it live now. So for instance, if I hit sin and I hold sin,", "tokens": [50584, 457, 321, 393, 855, 309, 1621, 586, 13, 407, 337, 5197, 11, 498, 286, 2045, 3343, 293, 286, 1797, 3343, 11, 50912], "temperature": 0.0, "avg_logprob": -0.10786903897921245, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.0007081779767759144}, {"id": 199, "seek": 152028, "start": 1532.44, "end": 1537.8799999999999, "text": " then it's going to show the online help there. You see that there is this home button. So I can go", "tokens": [50972, 550, 309, 311, 516, 281, 855, 264, 2950, 854, 456, 13, 509, 536, 300, 456, 307, 341, 1280, 2960, 13, 407, 286, 393, 352, 51244], "temperature": 0.0, "avg_logprob": -0.10786903897921245, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.0007081779767759144}, {"id": 200, "seek": 152028, "start": 1537.8799999999999, "end": 1545.56, "text": " to home and then I can go down and select, for instance, the first entry there.", "tokens": [51244, 281, 1280, 293, 550, 286, 393, 352, 760, 293, 3048, 11, 337, 5197, 11, 264, 700, 8729, 456, 13, 51628], "temperature": 0.0, "avg_logprob": -0.10786903897921245, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.0007081779767759144}, {"id": 201, "seek": 154556, "start": 1546.52, "end": 1553.1599999999999, "text": " And I'm going to jump to help. And that explains how the help system works.", "tokens": [50412, 400, 286, 478, 516, 281, 3012, 281, 854, 13, 400, 300, 13948, 577, 264, 854, 1185, 1985, 13, 50744], "temperature": 0.0, "avg_logprob": -0.19429881870746613, "compression_ratio": 1.4010695187165776, "no_speech_prob": 0.0006646190886385739}, {"id": 202, "seek": 154556, "start": 1557.1599999999999, "end": 1563.1599999999999, "text": " So there is a lot that remains to be done. The future plans include support for complex numbers", "tokens": [50944, 407, 456, 307, 257, 688, 300, 7023, 281, 312, 1096, 13, 440, 2027, 5482, 4090, 1406, 337, 3997, 3547, 51244], "temperature": 0.0, "avg_logprob": -0.19429881870746613, "compression_ratio": 1.4010695187165776, "no_speech_prob": 0.0006646190886385739}, {"id": 203, "seek": 154556, "start": 1563.1599999999999, "end": 1569.8799999999999, "text": " that are not implemented yet. Vector and metrics arithmetic, which is integral to the HP48", "tokens": [51244, 300, 366, 406, 12270, 1939, 13, 691, 20814, 293, 16367, 42973, 11, 597, 307, 11573, 281, 264, 12557, 13318, 51580], "temperature": 0.0, "avg_logprob": -0.19429881870746613, "compression_ratio": 1.4010695187165776, "no_speech_prob": 0.0006646190886385739}, {"id": 204, "seek": 156988, "start": 1570.5200000000002, "end": 1578.68, "text": " RPL variant that also exists today within 28, et cetera. That's a relatively complex set of things", "tokens": [50396, 14105, 43, 17501, 300, 611, 8198, 965, 1951, 7562, 11, 1030, 11458, 13, 663, 311, 257, 7226, 3997, 992, 295, 721, 50804], "temperature": 0.0, "avg_logprob": -0.18832892238503635, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.005377607885748148}, {"id": 205, "seek": 156988, "start": 1578.68, "end": 1584.68, "text": " in particular, because I would like to do it like new RPL does, when new RPL does support", "tokens": [50804, 294, 1729, 11, 570, 286, 576, 411, 281, 360, 309, 411, 777, 14105, 43, 775, 11, 562, 777, 14105, 43, 775, 1406, 51104], "temperature": 0.0, "avg_logprob": -0.18832892238503635, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.005377607885748148}, {"id": 206, "seek": 156988, "start": 1584.68, "end": 1589.4, "text": " matrices with symbolic values in there. So you can have a matrix with an X in there", "tokens": [51104, 32284, 365, 25755, 4190, 294, 456, 13, 407, 291, 393, 362, 257, 8141, 365, 364, 1783, 294, 456, 51340], "temperature": 0.0, "avg_logprob": -0.18832892238503635, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.005377607885748148}, {"id": 207, "seek": 156988, "start": 1589.4, "end": 1592.92, "text": " and as the determinant of that matrix, you're going to get the results.", "tokens": [51340, 293, 382, 264, 41296, 295, 300, 8141, 11, 291, 434, 516, 281, 483, 264, 3542, 13, 51516], "temperature": 0.0, "avg_logprob": -0.18832892238503635, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.005377607885748148}, {"id": 208, "seek": 156988, "start": 1593.5600000000002, "end": 1596.7600000000002, "text": " Whether I can fit that in the available space is unclear.", "tokens": [51548, 8503, 286, 393, 3318, 300, 294, 264, 2435, 1901, 307, 25636, 13, 51708], "temperature": 0.0, "avg_logprob": -0.18832892238503635, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.005377607885748148}, {"id": 209, "seek": 159676, "start": 1596.76, "end": 1603.32, "text": " As I said, there are about 1500 functions that remain to be implemented in some way,", "tokens": [50364, 1018, 286, 848, 11, 456, 366, 466, 22671, 6828, 300, 6222, 281, 312, 12270, 294, 512, 636, 11, 50692], "temperature": 0.0, "avg_logprob": -0.1575653973747702, "compression_ratio": 1.751219512195122, "no_speech_prob": 0.000226847012527287}, {"id": 210, "seek": 159676, "start": 1604.6, "end": 1611.8799999999999, "text": " including variants. So for instance, the sin function for sinus, the sine cosine function,", "tokens": [50756, 3009, 21669, 13, 407, 337, 5197, 11, 264, 3343, 2445, 337, 3343, 301, 11, 264, 18609, 23565, 2445, 11, 51120], "temperature": 0.0, "avg_logprob": -0.1575653973747702, "compression_ratio": 1.751219512195122, "no_speech_prob": 0.000226847012527287}, {"id": 211, "seek": 159676, "start": 1611.8799999999999, "end": 1617.08, "text": " so all the trigonometrics are implemented for real numbers, but they are not implemented", "tokens": [51120, 370, 439, 264, 35386, 266, 649, 10716, 366, 12270, 337, 957, 3547, 11, 457, 436, 366, 406, 12270, 51380], "temperature": 0.0, "avg_logprob": -0.1575653973747702, "compression_ratio": 1.751219512195122, "no_speech_prob": 0.000226847012527287}, {"id": 212, "seek": 159676, "start": 1617.08, "end": 1624.28, "text": " for complex numbers yet or for other data types. So there is some work that remains to be done", "tokens": [51380, 337, 3997, 3547, 1939, 420, 337, 661, 1412, 3467, 13, 407, 456, 307, 512, 589, 300, 7023, 281, 312, 1096, 51740], "temperature": 0.0, "avg_logprob": -0.1575653973747702, "compression_ratio": 1.751219512195122, "no_speech_prob": 0.000226847012527287}, {"id": 213, "seek": 162428, "start": 1624.28, "end": 1632.84, "text": " also even on existing functions. Plotting and graphing is a key feature of these calculators.", "tokens": [50364, 611, 754, 322, 6741, 6828, 13, 2149, 310, 783, 293, 1295, 79, 571, 307, 257, 2141, 4111, 295, 613, 4322, 3391, 13, 50792], "temperature": 0.0, "avg_logprob": -0.12876102842133622, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0006876701372675598}, {"id": 214, "seek": 162428, "start": 1632.84, "end": 1640.2, "text": " So I'd like to have that. The HP50G is quite advanced in that respect and getting", "tokens": [50792, 407, 286, 1116, 411, 281, 362, 300, 13, 440, 12557, 2803, 38, 307, 1596, 7339, 294, 300, 3104, 293, 1242, 51160], "temperature": 0.0, "avg_logprob": -0.12876102842133622, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0006876701372675598}, {"id": 215, "seek": 162428, "start": 1640.2, "end": 1644.28, "text": " to the point where we have feature piety is going to take a lot of time.", "tokens": [51160, 281, 264, 935, 689, 321, 362, 4111, 280, 4014, 307, 516, 281, 747, 257, 688, 295, 565, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12876102842133622, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0006876701372675598}, {"id": 216, "seek": 162428, "start": 1645.96, "end": 1651.32, "text": " So that's essentially what I had to show. I hope that you found this interesting", "tokens": [51448, 407, 300, 311, 4476, 437, 286, 632, 281, 855, 13, 286, 1454, 300, 291, 1352, 341, 1880, 51716], "temperature": 0.0, "avg_logprob": -0.12876102842133622, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0006876701372675598}, {"id": 217, "seek": 165132, "start": 1651.32, "end": 1659.1599999999999, "text": " and I'm really welcoming contributors if you want to take a look at how this works inside and if you", "tokens": [50364, 293, 286, 478, 534, 17378, 45627, 498, 291, 528, 281, 747, 257, 574, 412, 577, 341, 1985, 1854, 293, 498, 291, 50756], "temperature": 0.0, "avg_logprob": -0.09109626932347074, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0004369478265289217}, {"id": 218, "seek": 165132, "start": 1659.1599999999999, "end": 1667.48, "text": " want to help me add many of the new features or if it were only just to write or extend the online", "tokens": [50756, 528, 281, 854, 385, 909, 867, 295, 264, 777, 4122, 420, 498, 309, 645, 787, 445, 281, 2464, 420, 10101, 264, 2950, 51172], "temperature": 0.0, "avg_logprob": -0.09109626932347074, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0004369478265289217}, {"id": 219, "seek": 165132, "start": 1667.48, "end": 1673.6399999999999, "text": " help, any kind of help is really welcome. And that's about it. Thanks a lot for listening.", "tokens": [51172, 854, 11, 604, 733, 295, 854, 307, 534, 2928, 13, 400, 300, 311, 466, 309, 13, 2561, 257, 688, 337, 4764, 13, 51480], "temperature": 0.0, "avg_logprob": -0.09109626932347074, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0004369478265289217}, {"id": 220, "seek": 165132, "start": 1673.6399999999999, "end": 1679.0, "text": " Now it's time for questions and the questions will be live and I'll have a calculator available", "tokens": [51480, 823, 309, 311, 565, 337, 1651, 293, 264, 1651, 486, 312, 1621, 293, 286, 603, 362, 257, 24993, 2435, 51748], "temperature": 0.0, "avg_logprob": -0.09109626932347074, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.0004369478265289217}, {"id": 221, "seek": 167900, "start": 1679.0, "end": 1695.88, "text": " if you want to play with it. So we should be live now. We have only 30 seconds left.", "tokens": [50364, 498, 291, 528, 281, 862, 365, 309, 13, 407, 321, 820, 312, 1621, 586, 13, 492, 362, 787, 2217, 3949, 1411, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1946792999903361, "compression_ratio": 1.3211678832116789, "no_speech_prob": 0.01119932159781456}, {"id": 222, "seek": 167900, "start": 1697.32, "end": 1702.68, "text": " So how do the funds work on these calculators? Is it possible to load custom funds for different", "tokens": [51280, 407, 577, 360, 264, 8271, 589, 322, 613, 4322, 3391, 30, 1119, 309, 1944, 281, 3677, 2375, 8271, 337, 819, 51548], "temperature": 0.0, "avg_logprob": -0.1946792999903361, "compression_ratio": 1.3211678832116789, "no_speech_prob": 0.01119932159781456}, {"id": 223, "seek": 170268, "start": 1702.68, "end": 1709.8, "text": " steps? Okay, so there are two parts to this question. The first one is the funds themselves", "tokens": [50364, 4439, 30, 1033, 11, 370, 456, 366, 732, 3166, 281, 341, 1168, 13, 440, 700, 472, 307, 264, 8271, 2969, 50720], "temperature": 0.0, "avg_logprob": -0.13974749152340107, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.004049555864185095}, {"id": 224, "seek": 170268, "start": 1709.8, "end": 1718.1200000000001, "text": " and the second one is non-letting scripts. So in terms of funds, there were multiple formats", "tokens": [50720, 293, 264, 1150, 472, 307, 2107, 12, 2631, 783, 23294, 13, 407, 294, 2115, 295, 8271, 11, 456, 645, 3866, 25879, 51136], "temperature": 0.0, "avg_logprob": -0.13974749152340107, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.004049555864185095}, {"id": 225, "seek": 170268, "start": 1718.1200000000001, "end": 1725.96, "text": " that I tried. The current model, the current firmware supports two formats that I call dense", "tokens": [51136, 300, 286, 3031, 13, 440, 2190, 2316, 11, 264, 2190, 30289, 9346, 732, 25879, 300, 286, 818, 18011, 51528], "temperature": 0.0, "avg_logprob": -0.13974749152340107, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.004049555864185095}, {"id": 226, "seek": 172596, "start": 1725.96, "end": 1733.88, "text": " and sparse. The sparse format is more efficient for large funds that have a lot of space and the", "tokens": [50364, 293, 637, 11668, 13, 440, 637, 11668, 7877, 307, 544, 7148, 337, 2416, 8271, 300, 362, 257, 688, 295, 1901, 293, 264, 50760], "temperature": 0.0, "avg_logprob": -0.11816133669952848, "compression_ratio": 1.7100591715976332, "no_speech_prob": 0.007002991158515215}, {"id": 227, "seek": 172596, "start": 1733.88, "end": 1744.6000000000001, "text": " dense format is more compact for smaller funds that have something like, for instance if you have a", "tokens": [50760, 18011, 7877, 307, 544, 14679, 337, 4356, 8271, 300, 362, 746, 411, 11, 337, 5197, 498, 291, 362, 257, 51296], "temperature": 0.0, "avg_logprob": -0.11816133669952848, "compression_ratio": 1.7100591715976332, "no_speech_prob": 0.007002991158515215}, {"id": 228, "seek": 172596, "start": 1744.6000000000001, "end": 1752.2, "text": " five or eight bits of hate for very small funds, then practically all pixels inside are used", "tokens": [51296, 1732, 420, 3180, 9239, 295, 4700, 337, 588, 1359, 8271, 11, 550, 15667, 439, 18668, 1854, 366, 1143, 51676], "temperature": 0.0, "avg_logprob": -0.11816133669952848, "compression_ratio": 1.7100591715976332, "no_speech_prob": 0.007002991158515215}, {"id": 229, "seek": 175220, "start": 1753.0, "end": 1759.16, "text": " and so you have a dense or format for that. So that's for the representation of funds.", "tokens": [50404, 293, 370, 291, 362, 257, 18011, 420, 7877, 337, 300, 13, 407, 300, 311, 337, 264, 10290, 295, 8271, 13, 50712], "temperature": 0.0, "avg_logprob": -0.20017560323079428, "compression_ratio": 1.3739837398373984, "no_speech_prob": 0.006663278676569462}, {"id": 230, "seek": 175220, "start": 1759.16, "end": 1767.4, "text": " All the run presentations cover the 16-bit range of unicode and so they do include", "tokens": [50712, 1057, 264, 1190, 18964, 2060, 264, 3165, 12, 5260, 3613, 295, 517, 299, 1429, 293, 370, 436, 360, 4090, 51124], "temperature": 0.0, "avg_logprob": -0.20017560323079428, "compression_ratio": 1.3739837398373984, "no_speech_prob": 0.006663278676569462}, {"id": 231, "seek": 176740, "start": 1768.1200000000001, "end": 1781.16, "text": " the most of the non-letting characters. So we do cover", "tokens": [50400, 264, 881, 295, 264, 2107, 12, 2631, 783, 4342, 13, 407, 321, 360, 2060, 51052], "temperature": 0.0, "avg_logprob": -0.2325660228729248, "compression_ratio": 1.4271844660194175, "no_speech_prob": 0.016692329198122025}, {"id": 232, "seek": 176740, "start": 1785.0800000000002, "end": 1793.4, "text": " an arbitrary range of non-letting characters. What the system lacks at the moment is that it", "tokens": [51248, 364, 23211, 3613, 295, 2107, 12, 2631, 783, 4342, 13, 708, 264, 1185, 31132, 412, 264, 1623, 307, 300, 309, 51664], "temperature": 0.0, "avg_logprob": -0.2325660228729248, "compression_ratio": 1.4271844660194175, "no_speech_prob": 0.016692329198122025}, {"id": 233, "seek": 179340, "start": 1793.4, "end": 1799.88, "text": " doesn't know how to do combining glyphs and it doesn't know how to do right to left rendering.", "tokens": [50364, 1177, 380, 458, 577, 281, 360, 21928, 22633, 950, 82, 293, 309, 1177, 380, 458, 577, 281, 360, 558, 281, 1411, 22407, 13, 50688], "temperature": 0.0, "avg_logprob": -0.13610537155814792, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.0030929220374673605}, {"id": 234, "seek": 179340, "start": 1800.44, "end": 1804.92, "text": " Those are a bit complex, they are not implemented in the firmware at the moment.", "tokens": [50716, 3950, 366, 257, 857, 3997, 11, 436, 366, 406, 12270, 294, 264, 30289, 412, 264, 1623, 13, 50940], "temperature": 0.0, "avg_logprob": -0.13610537155814792, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.0030929220374673605}, {"id": 235, "seek": 179340, "start": 1806.76, "end": 1814.92, "text": " The fund that, and then I wrote in the GitHub repository, there is a tool that lets you convert", "tokens": [51032, 440, 2374, 300, 11, 293, 550, 286, 4114, 294, 264, 23331, 25841, 11, 456, 307, 257, 2290, 300, 6653, 291, 7620, 51440], "temperature": 0.0, "avg_logprob": -0.13610537155814792, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.0030929220374673605}, {"id": 236, "seek": 181492, "start": 1814.92, "end": 1825.64, "text": " any TTF font to use as a font in the system. The font that I used is derived from an open source", "tokens": [50364, 604, 32576, 37, 10703, 281, 764, 382, 257, 10703, 294, 264, 1185, 13, 440, 10703, 300, 286, 1143, 307, 18949, 490, 364, 1269, 4009, 50900], "temperature": 0.0, "avg_logprob": -0.11152409252367522, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.008283796720206738}, {"id": 237, "seek": 181492, "start": 1825.64, "end": 1831.0, "text": " font and I forgot what the name is and I changed a few glyphs inside just to make them look better", "tokens": [50900, 10703, 293, 286, 5298, 437, 264, 1315, 307, 293, 286, 3105, 257, 1326, 22633, 950, 82, 1854, 445, 281, 652, 552, 574, 1101, 51168], "temperature": 0.0, "avg_logprob": -0.11152409252367522, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.008283796720206738}, {"id": 238, "seek": 181492, "start": 1832.52, "end": 1844.28, "text": " on the screen. So you can look at the GitHub history and you'll see that I tried a dozen", "tokens": [51244, 322, 264, 2568, 13, 407, 291, 393, 574, 412, 264, 23331, 2503, 293, 291, 603, 536, 300, 286, 3031, 257, 16654, 51832], "temperature": 0.0, "avg_logprob": -0.11152409252367522, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.008283796720206738}, {"id": 239, "seek": 184428, "start": 1844.28, "end": 1847.96, "text": " fonts until I found one that I thought would look good.", "tokens": [50364, 35316, 1826, 286, 1352, 472, 300, 286, 1194, 576, 574, 665, 13, 50548], "temperature": 0.0, "avg_logprob": -0.3255302772093355, "compression_ratio": 1.4906542056074767, "no_speech_prob": 0.008404206484556198}, {"id": 240, "seek": 184428, "start": 1850.84, "end": 1857.6399999999999, "text": " Okay, thank you. Thanks for speaking at Fasten Christophe. I will catch you later,", "tokens": [50692, 1033, 11, 1309, 291, 13, 2561, 337, 4124, 412, 15968, 268, 2040, 404, 675, 13, 286, 486, 3745, 291, 1780, 11, 51032], "temperature": 0.0, "avg_logprob": -0.3255302772093355, "compression_ratio": 1.4906542056074767, "no_speech_prob": 0.008404206484556198}, {"id": 241, "seek": 184428, "start": 1857.6399999999999, "end": 1863.72, "text": " I'll move on to the next talk now. You can hang out in this room if people want to come and chat", "tokens": [51032, 286, 603, 1286, 322, 281, 264, 958, 751, 586, 13, 509, 393, 3967, 484, 294, 341, 1808, 498, 561, 528, 281, 808, 293, 5081, 51336], "temperature": 0.0, "avg_logprob": -0.3255302772093355, "compression_ratio": 1.4906542056074767, "no_speech_prob": 0.008404206484556198}, {"id": 242, "seek": 184428, "start": 1863.72, "end": 1870.28, "text": " with you. This is a breakout room just for this talk. Yep, thanks a lot. Yeah, bye.", "tokens": [51336, 365, 291, 13, 639, 307, 257, 30067, 1808, 445, 337, 341, 751, 13, 7010, 11, 3231, 257, 688, 13, 865, 11, 6543, 13, 51664], "temperature": 0.0, "avg_logprob": -0.3255302772093355, "compression_ratio": 1.4906542056074767, "no_speech_prob": 0.008404206484556198}], "language": "en"}