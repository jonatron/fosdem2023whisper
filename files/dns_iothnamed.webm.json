{"text": " Tell me when, tell me when, five more seconds, okay. This time silly it makes the video of cutting process so much easier if we stick to a schedule. Good afternoon everybody, thank you for having me here. Let me start from a short introduction of what internet of threads means. What is an end node of internet? So, which are the communicating nodes of the internet? The legacy approach, what is at the beginning, it was the internet of hosts. Internet of threads were given to controller, to each controller. So, actually the communication took place, takes place between the controllers of hosts. This concept has been made wider and the networking, the network endpoint are virtual controllers of virtual machines or even in spaces. Internet of threads is one step farther, it means that we want even just processes or even threads within processes as nodes as internet. So, the idea is to give IP addresses, actually IPv6 address we wouldn't have as many IPv4 address as we need, to threads or processes. The idea can be depicted from this. Long time ago there were fixed line and really the telephone number was connected to a place, a room. And it was common to call a number and say, is Jack at home? Nowadays we use portable phones and the numbers are connected to people and it's very easy. So, on the internet what do we look for? We don't look for controllers, we look for services. So, the most natural way is to have IP addresses connected to the process with providing that service, not controllers or machines, virtual or real. An ether stack is just a layer between API to the application layer and the API to the data link layer. Actually these are two layers, layer three and four of the other stack. But anyway it's a slice in the middle. This implementation is currently most of the time deeply inside the kernel of the machine of the computer you're using. But it can be seen as a library and this library can be linked to a user process. And in this way the user process can directly, can talk with the network. We created, we made one further step to this implementation using the Libyot library for the Internet of Threads. It's not a library that implements a stack, it's a framework library that allows to load actual implementation for network stacks as plugins. Providing a unified API to the applications, in such a way it's possible to run applications that can use either the kernel stack or any implementation of the network stack as a library. Actually the actual implementation permits to change the implementation just by changing a string. The actual stack supported by Libyot are the kernel stack. Woody stack which is actually a trick. It's a namespace using a top inside the namespace. So we are borrowing the kernel stack using it at user level, then a real implementation of user level TCP-IP stacks like Pico TCP, the module is named PicoX. And the working process where I'm working to port lightweight IP to this port. Okay, what do we need in the API? The way to communicate, this is quite known and this is the standard way we use the stack. So open-closer communication point center. For all these, there are backlit sockets. But what is not common using the, if you use the kernel stack, you have as guaranteed as provided the definition of the stack as a configuration parameters of the stack, like which is the API address, which are the routing definitions and so on. So we needed to add this port for the API. The definition of stack needed some syntax, some specific syntax. When using the API, a new stack is created. There is a, it's a pointer to a specific structure that can be used for communication. So the only difference for socket unit, for the socket API, is that instead of using socket, there is a new call named mSocket, which has one further parameter, which is the actual stack implementation to use. Okay, and then there are all the other API calls well-known from Berkeley sockets. But okay, we needed to create and delete the stack, so in such a way to do that, we use those calls we have seen two years ago, and the pointer can be used for communicated. And what about configuration? Okay, for configuration, there is an NFC used, for example, by the Klinus kernel that uses the other family netlink to provide messages for configuring the network. So there is no need of further API entry for configuration. We just need to, we just need that our stack support AF netlink configuration. Another point about these sockets, using forum sockets, if it's a library level implementation of the stack, the problem is that this integer could be an internal number of the library. Instead, we need that integer to be a real file descriptor, because we need the file descriptor to be used, for example, for Paul socket. And we had to write a new kernel module in the library named Paul, that creates a file descriptor in which the elements can be synthesized. And so stack implemented at user level as a library can provide real file descriptor, and this file descriptor can be used on select Paul and so on. So we can use real file descriptor, file descriptor coming from different implementation of the network, and write an end dreaming program altogether. Just a quick look to give you the feeling of what does it mean. This is a program just sending chow using a datagram. This is the legacy way. This is the same example using internal threads. Here is the implementation. Just by changing this string, I can use any implementation I want, provided I have support for that. Okay, now the core of the presentation. We needed an ecosystem around this idea. We needed a lot of stuff that we currently have in our support, in our tool set, but we need them implemented as internal threads. We needed calls to configure the network. These are not calls from the Internet of Threads implementation of the library Internet of Threads. These calls generate net link messages. So it can be used even for configuring the kernel stack from a program. Let us pass quickly through this. We need a library to a query for DNS. Why? Because using the celib implementation, it uses the kernel stack, and it uses the definitions in atc.result.conf and the string atc.result.conf are coded in the celib code. It's not possible to change even the file to be used. But we designed a named proxy for word cache, especially for the Internet of Threads, which are the characteristics of this DNS. It uses the Internet of Threads so it can use for the same queries, or for word queries, different stacks defined by the user. But at the same time, they can provide further services, further features, specifically useful for the Internet of Threads. Let us pass. These are the configuration items. But I prefer to show you some scenario in which the IOTNMD can be used. This is a common scenario. It's a common proxy scenario, like libmasque or similar, but implemented using Internet of Threads. So the idea is that if we ask the cache, if it asks the proxy an address provided by a friendly node, we can cache the result and provide it back to the query, or we can add some specific local addresses. It doesn't provide a relay from external queries. The point is that we have a stack for the query and a stack to forward the query outside, in this case, in this configuration. I provide the service to all the processes connected to this stack, and I forward the queries on another different stack with a different implementation. Okay. These are the tests just to see that it is able to resolve foreign and local results. Or it can be used as a delegated subdomain. Okay. So they did that given there is an S record providing, forwarding, defining this pink server as the responsible to the server, dummy, v2, and so on. So it provides back the solution. And here the new point is that we can use different stack. But I have kept some time to show you some more ideas. Actually, managing DNS servers for IPv6 is a daunting process, very error-prone, because if you have to write all those huge, long numbers, it is very hard to not to insert errors in the configuration. That is to create IPv6 address, the health part of the IPv6 address using hash code, hash resolution, using the result of a hash function defined on the full defined domain name. So given the full domain name, we can have the health part of the IPv6 address for free. So this is the proxy as in the previous example, but I can ask the server to solve all the addresses like something hash.local. And I can use any string before the hash.local, and I get a name resolution. That means that if I add a new node, which can be a computer or even a process, I just have to baptize it to give it a name, and it will be connected on the net without having to write any single line in the DNS server. The slides are on the website, so if you want to pass through and download the prototype from GitHub, you can test this. The same thing can be done, the reverse will run, so having a delegated domain that also addresses using hash. So we can have a number of local machines that can be seen from the internet just by giving them a name. But there is one more result, one more, which is one time IP. One time IP is a security feature like a one time password. One time password means that you have a password that lasts for a short period of time, so if somebody is able to ice drop the password, it's kept useless in a few moments. This is the idea of one time IP, the host part of the address is defined by an hash definition that changes during the time. It's an hash not only of the name, of the fully qualified domain name, but it includes a password and the time. So if the legitimate user wanted to connect to the server, it knows which is the actual IP address. Any other user, even if he's able to trace the network traffic, it gets some address that will be null in a few seconds. Okay, I think I have no time to show the other. Minus means time for questions, isn't it? Yes, four minutes left including questions. Just one point and then I go to the question. Namely, ACP is another tool which asks, which uses the ACP server, but these ACP servers query the DNS to provide the address to the computer, not the processor whatsoever, so that you can just say to your computer which is the name, and the resolution is provided, and the definition of all the networking configuration is provided getting replies from the DNS server. Okay, I have to stop. I have a lot of more examples to give you. Questions? You can just repeat it. What is the overhead of using a network stack in every thread, especially if you're using the one-time IPs for each connection? What is the overhead that you get within the application if you have a lot of connections coming in? For sure on single connections we have some performance drop, but the point is that the overall bandwidth by all the applications you have on your system can use the entire bandwidth, so you have the experience that you spread democratically the bandwidth among your processes. Questions? Sorry, I can't tell you. Is latency a factor like bandwidth? Actually, the point is that behind the user-level stack there is a virtual network, which is a virtual-disputed internet, that using support like VxVD, which is like a VxLan without VTAP, so each process is part of the distributed stages. Latency are quite good because you have a direct UDP connection, a unique connection from end-to-end from a process in one machine to the process to the other machine so there is a direct UDP one-to-one. My idea is to have a new concept of computing elements, so instead of having your computer with the process, you have locally a network of a cluster of computers with all the processes which are of different networks. So you have the real networks, which is just the basic framework, and you extract this in a number of virtual networks that connect the processes running in which fields cannot be like. That's all the time we have. Thank you, Denzo.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.0, "text": " Tell me when, tell me when, five more seconds, okay.", "tokens": [5115, 385, 562, 11, 980, 385, 562, 11, 1732, 544, 3949, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.4935433009885392, "compression_ratio": 1.3972602739726028, "no_speech_prob": 0.22645655274391174}, {"id": 1, "seek": 0, "start": 13.0, "end": 20.0, "text": " This time silly it makes the video of cutting process so much easier if we stick to a schedule.", "tokens": [639, 565, 11774, 309, 1669, 264, 960, 295, 6492, 1399, 370, 709, 3571, 498, 321, 2897, 281, 257, 7567, 13], "temperature": 0.0, "avg_logprob": -0.4935433009885392, "compression_ratio": 1.3972602739726028, "no_speech_prob": 0.22645655274391174}, {"id": 2, "seek": 0, "start": 20.0, "end": 25.0, "text": " Good afternoon everybody, thank you for having me here.", "tokens": [2205, 6499, 2201, 11, 1309, 291, 337, 1419, 385, 510, 13], "temperature": 0.0, "avg_logprob": -0.4935433009885392, "compression_ratio": 1.3972602739726028, "no_speech_prob": 0.22645655274391174}, {"id": 3, "seek": 2500, "start": 25.0, "end": 34.0, "text": " Let me start from a short introduction of what internet of threads means.", "tokens": [961, 385, 722, 490, 257, 2099, 9339, 295, 437, 4705, 295, 19314, 1355, 13], "temperature": 0.0, "avg_logprob": -0.18687044779459636, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007607215084135532}, {"id": 4, "seek": 2500, "start": 34.0, "end": 37.0, "text": " What is an end node of internet?", "tokens": [708, 307, 364, 917, 9984, 295, 4705, 30], "temperature": 0.0, "avg_logprob": -0.18687044779459636, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007607215084135532}, {"id": 5, "seek": 2500, "start": 37.0, "end": 42.0, "text": " So, which are the communicating nodes of the internet?", "tokens": [407, 11, 597, 366, 264, 17559, 13891, 295, 264, 4705, 30], "temperature": 0.0, "avg_logprob": -0.18687044779459636, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007607215084135532}, {"id": 6, "seek": 2500, "start": 42.0, "end": 49.0, "text": " The legacy approach, what is at the beginning, it was the internet of hosts.", "tokens": [440, 11711, 3109, 11, 437, 307, 412, 264, 2863, 11, 309, 390, 264, 4705, 295, 21573, 13], "temperature": 0.0, "avg_logprob": -0.18687044779459636, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007607215084135532}, {"id": 7, "seek": 4900, "start": 49.0, "end": 56.0, "text": " Internet of threads were given to controller, to each controller.", "tokens": [7703, 295, 19314, 645, 2212, 281, 10561, 11, 281, 1184, 10561, 13], "temperature": 0.0, "avg_logprob": -0.18784712342654958, "compression_ratio": 1.3508771929824561, "no_speech_prob": 0.0005376670160330832}, {"id": 8, "seek": 4900, "start": 56.0, "end": 67.0, "text": " So, actually the communication took place, takes place between the controllers of hosts.", "tokens": [407, 11, 767, 264, 6101, 1890, 1081, 11, 2516, 1081, 1296, 264, 26903, 295, 21573, 13], "temperature": 0.0, "avg_logprob": -0.18784712342654958, "compression_ratio": 1.3508771929824561, "no_speech_prob": 0.0005376670160330832}, {"id": 9, "seek": 6700, "start": 67.0, "end": 89.0, "text": " This concept has been made wider and the networking, the network endpoint are virtual controllers of virtual machines or even in spaces.", "tokens": [639, 3410, 575, 668, 1027, 11842, 293, 264, 17985, 11, 264, 3209, 35795, 366, 6374, 26903, 295, 6374, 8379, 420, 754, 294, 7673, 13], "temperature": 0.0, "avg_logprob": -0.2648408923830305, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00017467864381615072}, {"id": 10, "seek": 8900, "start": 89.0, "end": 104.0, "text": " Internet of threads is one step farther, it means that we want even just processes or even threads within processes as nodes as internet.", "tokens": [7703, 295, 19314, 307, 472, 1823, 20344, 11, 309, 1355, 300, 321, 528, 754, 445, 7555, 420, 754, 19314, 1951, 7555, 382, 13891, 382, 4705, 13], "temperature": 0.0, "avg_logprob": -0.1712841120633212, "compression_ratio": 1.6287425149700598, "no_speech_prob": 0.00020129288895986974}, {"id": 11, "seek": 8900, "start": 104.0, "end": 116.0, "text": " So, the idea is to give IP addresses, actually IPv6 address we wouldn't have as many IPv4 address as we need, to threads or processes.", "tokens": [407, 11, 264, 1558, 307, 281, 976, 8671, 16862, 11, 767, 8671, 85, 21, 2985, 321, 2759, 380, 362, 382, 867, 8671, 85, 19, 2985, 382, 321, 643, 11, 281, 19314, 420, 7555, 13], "temperature": 0.0, "avg_logprob": -0.1712841120633212, "compression_ratio": 1.6287425149700598, "no_speech_prob": 0.00020129288895986974}, {"id": 12, "seek": 11600, "start": 116.0, "end": 120.0, "text": " The idea can be depicted from this.", "tokens": [440, 1558, 393, 312, 30207, 490, 341, 13], "temperature": 0.0, "avg_logprob": -0.1384008695494454, "compression_ratio": 1.375, "no_speech_prob": 0.000469136459287256}, {"id": 13, "seek": 11600, "start": 120.0, "end": 129.0, "text": " Long time ago there were fixed line and really the telephone number was connected to a place, a room.", "tokens": [8282, 565, 2057, 456, 645, 6806, 1622, 293, 534, 264, 19800, 1230, 390, 4582, 281, 257, 1081, 11, 257, 1808, 13], "temperature": 0.0, "avg_logprob": -0.1384008695494454, "compression_ratio": 1.375, "no_speech_prob": 0.000469136459287256}, {"id": 14, "seek": 11600, "start": 129.0, "end": 135.0, "text": " And it was common to call a number and say, is Jack at home?", "tokens": [400, 309, 390, 2689, 281, 818, 257, 1230, 293, 584, 11, 307, 4718, 412, 1280, 30], "temperature": 0.0, "avg_logprob": -0.1384008695494454, "compression_ratio": 1.375, "no_speech_prob": 0.000469136459287256}, {"id": 15, "seek": 13500, "start": 135.0, "end": 147.0, "text": " Nowadays we use portable phones and the numbers are connected to people and it's very easy.", "tokens": [28908, 321, 764, 21800, 10216, 293, 264, 3547, 366, 4582, 281, 561, 293, 309, 311, 588, 1858, 13], "temperature": 0.0, "avg_logprob": -0.14466593216876594, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.0005271153058856726}, {"id": 16, "seek": 13500, "start": 147.0, "end": 153.0, "text": " So, on the internet what do we look for?", "tokens": [407, 11, 322, 264, 4705, 437, 360, 321, 574, 337, 30], "temperature": 0.0, "avg_logprob": -0.14466593216876594, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.0005271153058856726}, {"id": 17, "seek": 13500, "start": 153.0, "end": 156.0, "text": " We don't look for controllers, we look for services.", "tokens": [492, 500, 380, 574, 337, 26903, 11, 321, 574, 337, 3328, 13], "temperature": 0.0, "avg_logprob": -0.14466593216876594, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.0005271153058856726}, {"id": 18, "seek": 15600, "start": 156.0, "end": 173.0, "text": " So, the most natural way is to have IP addresses connected to the process with providing that service, not controllers or machines, virtual or real.", "tokens": [407, 11, 264, 881, 3303, 636, 307, 281, 362, 8671, 16862, 4582, 281, 264, 1399, 365, 6530, 300, 2643, 11, 406, 26903, 420, 8379, 11, 6374, 420, 957, 13], "temperature": 0.0, "avg_logprob": -0.14931646982828775, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00012468254135455936}, {"id": 19, "seek": 15600, "start": 173.0, "end": 183.0, "text": " An ether stack is just a layer between API to the application layer and the API to the data link layer.", "tokens": [1107, 37096, 8630, 307, 445, 257, 4583, 1296, 9362, 281, 264, 3861, 4583, 293, 264, 9362, 281, 264, 1412, 2113, 4583, 13], "temperature": 0.0, "avg_logprob": -0.14931646982828775, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.00012468254135455936}, {"id": 20, "seek": 18300, "start": 183.0, "end": 189.0, "text": " Actually these are two layers, layer three and four of the other stack.", "tokens": [5135, 613, 366, 732, 7914, 11, 4583, 1045, 293, 1451, 295, 264, 661, 8630, 13], "temperature": 0.0, "avg_logprob": -0.13256101608276366, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0003513151896186173}, {"id": 21, "seek": 18300, "start": 189.0, "end": 195.0, "text": " But anyway it's a slice in the middle.", "tokens": [583, 4033, 309, 311, 257, 13153, 294, 264, 2808, 13], "temperature": 0.0, "avg_logprob": -0.13256101608276366, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0003513151896186173}, {"id": 22, "seek": 18300, "start": 195.0, "end": 209.0, "text": " This implementation is currently most of the time deeply inside the kernel of the machine of the computer you're using.", "tokens": [639, 11420, 307, 4362, 881, 295, 264, 565, 8760, 1854, 264, 28256, 295, 264, 3479, 295, 264, 3820, 291, 434, 1228, 13], "temperature": 0.0, "avg_logprob": -0.13256101608276366, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0003513151896186173}, {"id": 23, "seek": 20900, "start": 209.0, "end": 222.0, "text": " But it can be seen as a library and this library can be linked to a user process.", "tokens": [583, 309, 393, 312, 1612, 382, 257, 6405, 293, 341, 6405, 393, 312, 9408, 281, 257, 4195, 1399, 13], "temperature": 0.0, "avg_logprob": -0.19809029741985043, "compression_ratio": 1.4485981308411215, "no_speech_prob": 0.00042732429574243724}, {"id": 24, "seek": 20900, "start": 222.0, "end": 236.0, "text": " And in this way the user process can directly, can talk with the network.", "tokens": [400, 294, 341, 636, 264, 4195, 1399, 393, 3838, 11, 393, 751, 365, 264, 3209, 13], "temperature": 0.0, "avg_logprob": -0.19809029741985043, "compression_ratio": 1.4485981308411215, "no_speech_prob": 0.00042732429574243724}, {"id": 25, "seek": 23600, "start": 236.0, "end": 252.0, "text": " We created, we made one further step to this implementation using the Libyot library for the Internet of Threads.", "tokens": [492, 2942, 11, 321, 1027, 472, 3052, 1823, 281, 341, 11420, 1228, 264, 15834, 88, 310, 6405, 337, 264, 7703, 295, 334, 2538, 82, 13], "temperature": 0.0, "avg_logprob": -0.2451781733282681, "compression_ratio": 1.13, "no_speech_prob": 5.285076622385532e-05}, {"id": 26, "seek": 25200, "start": 252.0, "end": 269.0, "text": " It's not a library that implements a stack, it's a framework library that allows to load actual implementation for network stacks as plugins.", "tokens": [467, 311, 406, 257, 6405, 300, 704, 17988, 257, 8630, 11, 309, 311, 257, 8388, 6405, 300, 4045, 281, 3677, 3539, 11420, 337, 3209, 30792, 382, 33759, 13], "temperature": 0.0, "avg_logprob": -0.1449926197528839, "compression_ratio": 1.3557692307692308, "no_speech_prob": 0.0001312351960223168}, {"id": 27, "seek": 26900, "start": 269.0, "end": 286.0, "text": " Providing a unified API to the applications, in such a way it's possible to run applications that can use either the kernel stack or any implementation of the network stack as a library.", "tokens": [15685, 2819, 257, 26787, 9362, 281, 264, 5821, 11, 294, 1270, 257, 636, 309, 311, 1944, 281, 1190, 5821, 300, 393, 764, 2139, 264, 28256, 8630, 420, 604, 11420, 295, 264, 3209, 8630, 382, 257, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1200172654513655, "compression_ratio": 1.6473988439306357, "no_speech_prob": 0.00020349599071778357}, {"id": 28, "seek": 26900, "start": 286.0, "end": 298.0, "text": " Actually the actual implementation permits to change the implementation just by changing a string.", "tokens": [5135, 264, 3539, 11420, 30990, 281, 1319, 264, 11420, 445, 538, 4473, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.1200172654513655, "compression_ratio": 1.6473988439306357, "no_speech_prob": 0.00020349599071778357}, {"id": 29, "seek": 29800, "start": 298.0, "end": 305.0, "text": " The actual stack supported by Libyot are the kernel stack.", "tokens": [440, 3539, 8630, 8104, 538, 15834, 88, 310, 366, 264, 28256, 8630, 13], "temperature": 0.0, "avg_logprob": -0.16743932451520646, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00011212710523977876}, {"id": 30, "seek": 29800, "start": 305.0, "end": 309.0, "text": " Woody stack which is actually a trick.", "tokens": [40618, 8630, 597, 307, 767, 257, 4282, 13], "temperature": 0.0, "avg_logprob": -0.16743932451520646, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00011212710523977876}, {"id": 31, "seek": 29800, "start": 309.0, "end": 315.0, "text": " It's a namespace using a top inside the namespace.", "tokens": [467, 311, 257, 5288, 17940, 1228, 257, 1192, 1854, 264, 5288, 17940, 13], "temperature": 0.0, "avg_logprob": -0.16743932451520646, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00011212710523977876}, {"id": 32, "seek": 31500, "start": 315.0, "end": 333.0, "text": " So we are borrowing the kernel stack using it at user level, then a real implementation of user level TCP-IP stacks like Pico TCP, the module is named PicoX.", "tokens": [407, 321, 366, 35024, 264, 28256, 8630, 1228, 309, 412, 4195, 1496, 11, 550, 257, 957, 11420, 295, 4195, 1496, 48965, 12, 9139, 30792, 411, 430, 2789, 48965, 11, 264, 10088, 307, 4926, 430, 2789, 55, 13], "temperature": 0.0, "avg_logprob": -0.2755908642785024, "compression_ratio": 1.4567901234567902, "no_speech_prob": 9.94044094113633e-05}, {"id": 33, "seek": 31500, "start": 333.0, "end": 344.0, "text": " And the working process where I'm working to port lightweight IP to this port.", "tokens": [400, 264, 1364, 1399, 689, 286, 478, 1364, 281, 2436, 22052, 8671, 281, 341, 2436, 13], "temperature": 0.0, "avg_logprob": -0.2755908642785024, "compression_ratio": 1.4567901234567902, "no_speech_prob": 9.94044094113633e-05}, {"id": 34, "seek": 34400, "start": 344.0, "end": 351.0, "text": " Okay, what do we need in the API?", "tokens": [1033, 11, 437, 360, 321, 643, 294, 264, 9362, 30], "temperature": 0.0, "avg_logprob": -0.3114134800898564, "compression_ratio": 1.5195530726256983, "no_speech_prob": 0.0001232920039910823}, {"id": 35, "seek": 34400, "start": 351.0, "end": 358.0, "text": " The way to communicate, this is quite known and this is the standard way we use the stack.", "tokens": [440, 636, 281, 7890, 11, 341, 307, 1596, 2570, 293, 341, 307, 264, 3832, 636, 321, 764, 264, 8630, 13], "temperature": 0.0, "avg_logprob": -0.3114134800898564, "compression_ratio": 1.5195530726256983, "no_speech_prob": 0.0001232920039910823}, {"id": 36, "seek": 34400, "start": 358.0, "end": 361.0, "text": " So open-closer communication point center.", "tokens": [407, 1269, 12, 3474, 22150, 6101, 935, 3056, 13], "temperature": 0.0, "avg_logprob": -0.3114134800898564, "compression_ratio": 1.5195530726256983, "no_speech_prob": 0.0001232920039910823}, {"id": 37, "seek": 34400, "start": 361.0, "end": 365.0, "text": " For all these, there are backlit sockets.", "tokens": [1171, 439, 613, 11, 456, 366, 646, 23062, 370, 11984, 13], "temperature": 0.0, "avg_logprob": -0.3114134800898564, "compression_ratio": 1.5195530726256983, "no_speech_prob": 0.0001232920039910823}, {"id": 38, "seek": 34400, "start": 365.0, "end": 372.0, "text": " But what is not common using the, if you use the kernel stack,", "tokens": [583, 437, 307, 406, 2689, 1228, 264, 11, 498, 291, 764, 264, 28256, 8630, 11], "temperature": 0.0, "avg_logprob": -0.3114134800898564, "compression_ratio": 1.5195530726256983, "no_speech_prob": 0.0001232920039910823}, {"id": 39, "seek": 37200, "start": 372.0, "end": 383.0, "text": " you have as guaranteed as provided the definition of the stack as a configuration parameters of the stack,", "tokens": [291, 362, 382, 18031, 382, 5649, 264, 7123, 295, 264, 8630, 382, 257, 11694, 9834, 295, 264, 8630, 11], "temperature": 0.0, "avg_logprob": -0.18608321083916557, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.00011138950503664091}, {"id": 40, "seek": 37200, "start": 383.0, "end": 390.0, "text": " like which is the API address, which are the routing definitions and so on.", "tokens": [411, 597, 307, 264, 9362, 2985, 11, 597, 366, 264, 32722, 21988, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.18608321083916557, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.00011138950503664091}, {"id": 41, "seek": 37200, "start": 390.0, "end": 399.0, "text": " So we needed to add this port for the API.", "tokens": [407, 321, 2978, 281, 909, 341, 2436, 337, 264, 9362, 13], "temperature": 0.0, "avg_logprob": -0.18608321083916557, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.00011138950503664091}, {"id": 42, "seek": 39900, "start": 399.0, "end": 411.0, "text": " The definition of stack needed some syntax, some specific syntax.", "tokens": [440, 7123, 295, 8630, 2978, 512, 28431, 11, 512, 2685, 28431, 13], "temperature": 0.0, "avg_logprob": -0.1018471622467041, "compression_ratio": 1.380281690140845, "no_speech_prob": 5.503294232767075e-05}, {"id": 43, "seek": 39900, "start": 411.0, "end": 418.0, "text": " When using the API, a new stack is created.", "tokens": [1133, 1228, 264, 9362, 11, 257, 777, 8630, 307, 2942, 13], "temperature": 0.0, "avg_logprob": -0.1018471622467041, "compression_ratio": 1.380281690140845, "no_speech_prob": 5.503294232767075e-05}, {"id": 44, "seek": 39900, "start": 418.0, "end": 425.0, "text": " There is a, it's a pointer to a specific structure that can be used for communication.", "tokens": [821, 307, 257, 11, 309, 311, 257, 23918, 281, 257, 2685, 3877, 300, 393, 312, 1143, 337, 6101, 13], "temperature": 0.0, "avg_logprob": -0.1018471622467041, "compression_ratio": 1.380281690140845, "no_speech_prob": 5.503294232767075e-05}, {"id": 45, "seek": 42500, "start": 425.0, "end": 435.0, "text": " So the only difference for socket unit, for the socket API, is that instead of using socket,", "tokens": [407, 264, 787, 2649, 337, 19741, 4985, 11, 337, 264, 19741, 9362, 11, 307, 300, 2602, 295, 1228, 19741, 11], "temperature": 0.0, "avg_logprob": -0.18576994482076392, "compression_ratio": 1.471830985915493, "no_speech_prob": 7.054051820887253e-05}, {"id": 46, "seek": 42500, "start": 435.0, "end": 440.0, "text": " there is a new call named mSocket, which has one further parameter,", "tokens": [456, 307, 257, 777, 818, 4926, 275, 50, 31380, 11, 597, 575, 472, 3052, 13075, 11], "temperature": 0.0, "avg_logprob": -0.18576994482076392, "compression_ratio": 1.471830985915493, "no_speech_prob": 7.054051820887253e-05}, {"id": 47, "seek": 42500, "start": 440.0, "end": 445.0, "text": " which is the actual stack implementation to use.", "tokens": [597, 307, 264, 3539, 8630, 11420, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.18576994482076392, "compression_ratio": 1.471830985915493, "no_speech_prob": 7.054051820887253e-05}, {"id": 48, "seek": 44500, "start": 445.0, "end": 457.0, "text": " Okay, and then there are all the other API calls well-known from Berkeley sockets.", "tokens": [1033, 11, 293, 550, 456, 366, 439, 264, 661, 9362, 5498, 731, 12, 6861, 490, 23684, 370, 11984, 13], "temperature": 0.0, "avg_logprob": -0.216991258704144, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.00011165675823576748}, {"id": 49, "seek": 44500, "start": 457.0, "end": 467.0, "text": " But okay, we needed to create and delete the stack, so in such a way to do that,", "tokens": [583, 1392, 11, 321, 2978, 281, 1884, 293, 12097, 264, 8630, 11, 370, 294, 1270, 257, 636, 281, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.216991258704144, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.00011165675823576748}, {"id": 50, "seek": 46700, "start": 467.0, "end": 477.0, "text": " we use those calls we have seen two years ago, and the pointer can be used for communicated.", "tokens": [321, 764, 729, 5498, 321, 362, 1612, 732, 924, 2057, 11, 293, 264, 23918, 393, 312, 1143, 337, 34989, 13], "temperature": 0.0, "avg_logprob": -0.19650626182556152, "compression_ratio": 1.338235294117647, "no_speech_prob": 7.727571937721223e-05}, {"id": 51, "seek": 46700, "start": 477.0, "end": 480.0, "text": " And what about configuration?", "tokens": [400, 437, 466, 11694, 30], "temperature": 0.0, "avg_logprob": -0.19650626182556152, "compression_ratio": 1.338235294117647, "no_speech_prob": 7.727571937721223e-05}, {"id": 52, "seek": 46700, "start": 480.0, "end": 491.0, "text": " Okay, for configuration, there is an NFC used, for example,", "tokens": [1033, 11, 337, 11694, 11, 456, 307, 364, 13576, 34, 1143, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.19650626182556152, "compression_ratio": 1.338235294117647, "no_speech_prob": 7.727571937721223e-05}, {"id": 53, "seek": 49100, "start": 491.0, "end": 501.0, "text": " by the Klinus kernel that uses the other family netlink to provide messages for configuring the network.", "tokens": [538, 264, 591, 5045, 301, 28256, 300, 4960, 264, 661, 1605, 2533, 22473, 281, 2893, 7897, 337, 6662, 1345, 264, 3209, 13], "temperature": 0.0, "avg_logprob": -0.22150115966796874, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.499802500708029e-05}, {"id": 54, "seek": 49100, "start": 501.0, "end": 511.0, "text": " So there is no need of further API entry for configuration.", "tokens": [407, 456, 307, 572, 643, 295, 3052, 9362, 8729, 337, 11694, 13], "temperature": 0.0, "avg_logprob": -0.22150115966796874, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.499802500708029e-05}, {"id": 55, "seek": 51100, "start": 511.0, "end": 524.0, "text": " We just need to, we just need that our stack support AF netlink configuration.", "tokens": [492, 445, 643, 281, 11, 321, 445, 643, 300, 527, 8630, 1406, 20389, 2533, 22473, 11694, 13], "temperature": 0.0, "avg_logprob": -0.20876852671305338, "compression_ratio": 1.385185185185185, "no_speech_prob": 3.396313331904821e-05}, {"id": 56, "seek": 51100, "start": 524.0, "end": 531.0, "text": " Another point about these sockets, using forum sockets,", "tokens": [3996, 935, 466, 613, 370, 11984, 11, 1228, 17542, 370, 11984, 11], "temperature": 0.0, "avg_logprob": -0.20876852671305338, "compression_ratio": 1.385185185185185, "no_speech_prob": 3.396313331904821e-05}, {"id": 57, "seek": 51100, "start": 531.0, "end": 537.0, "text": " if it's a library level implementation of the stack,", "tokens": [498, 309, 311, 257, 6405, 1496, 11420, 295, 264, 8630, 11], "temperature": 0.0, "avg_logprob": -0.20876852671305338, "compression_ratio": 1.385185185185185, "no_speech_prob": 3.396313331904821e-05}, {"id": 58, "seek": 53700, "start": 537.0, "end": 547.0, "text": " the problem is that this integer could be an internal number of the library.", "tokens": [264, 1154, 307, 300, 341, 24922, 727, 312, 364, 6920, 1230, 295, 264, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1394068197770552, "compression_ratio": 1.562043795620438, "no_speech_prob": 0.00020449087605811656}, {"id": 59, "seek": 53700, "start": 547.0, "end": 552.0, "text": " Instead, we need that integer to be a real file descriptor,", "tokens": [7156, 11, 321, 643, 300, 24922, 281, 312, 257, 957, 3991, 31280, 284, 11], "temperature": 0.0, "avg_logprob": -0.1394068197770552, "compression_ratio": 1.562043795620438, "no_speech_prob": 0.00020449087605811656}, {"id": 60, "seek": 53700, "start": 552.0, "end": 560.0, "text": " because we need the file descriptor to be used, for example, for Paul socket.", "tokens": [570, 321, 643, 264, 3991, 31280, 284, 281, 312, 1143, 11, 337, 1365, 11, 337, 4552, 19741, 13], "temperature": 0.0, "avg_logprob": -0.1394068197770552, "compression_ratio": 1.562043795620438, "no_speech_prob": 0.00020449087605811656}, {"id": 61, "seek": 56000, "start": 560.0, "end": 576.0, "text": " And we had to write a new kernel module in the library named Paul,", "tokens": [400, 321, 632, 281, 2464, 257, 777, 28256, 10088, 294, 264, 6405, 4926, 4552, 11], "temperature": 0.0, "avg_logprob": -0.19482717249128553, "compression_ratio": 1.2522522522522523, "no_speech_prob": 2.080089871014934e-05}, {"id": 62, "seek": 56000, "start": 576.0, "end": 582.0, "text": " that creates a file descriptor in which the elements can be synthesized.", "tokens": [300, 7829, 257, 3991, 31280, 284, 294, 597, 264, 4959, 393, 312, 26617, 1602, 13], "temperature": 0.0, "avg_logprob": -0.19482717249128553, "compression_ratio": 1.2522522522522523, "no_speech_prob": 2.080089871014934e-05}, {"id": 63, "seek": 58200, "start": 582.0, "end": 596.0, "text": " And so stack implemented at user level as a library can provide real file descriptor,", "tokens": [400, 370, 8630, 12270, 412, 4195, 1496, 382, 257, 6405, 393, 2893, 957, 3991, 31280, 284, 11], "temperature": 0.0, "avg_logprob": -0.19040044148763022, "compression_ratio": 1.6866666666666668, "no_speech_prob": 0.0002149415377061814}, {"id": 64, "seek": 58200, "start": 596.0, "end": 600.0, "text": " and this file descriptor can be used on select Paul and so on.", "tokens": [293, 341, 3991, 31280, 284, 393, 312, 1143, 322, 3048, 4552, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.19040044148763022, "compression_ratio": 1.6866666666666668, "no_speech_prob": 0.0002149415377061814}, {"id": 65, "seek": 58200, "start": 600.0, "end": 605.0, "text": " So we can use real file descriptor, file descriptor coming from different implementation of the network,", "tokens": [407, 321, 393, 764, 957, 3991, 31280, 284, 11, 3991, 31280, 284, 1348, 490, 819, 11420, 295, 264, 3209, 11], "temperature": 0.0, "avg_logprob": -0.19040044148763022, "compression_ratio": 1.6866666666666668, "no_speech_prob": 0.0002149415377061814}, {"id": 66, "seek": 60500, "start": 605.0, "end": 612.0, "text": " and write an end dreaming program altogether.", "tokens": [293, 2464, 364, 917, 3055, 278, 1461, 19051, 13], "temperature": 0.0, "avg_logprob": -0.21682078883333025, "compression_ratio": 1.4274809160305344, "no_speech_prob": 7.394699059659615e-05}, {"id": 67, "seek": 60500, "start": 612.0, "end": 618.0, "text": " Just a quick look to give you the feeling of what does it mean.", "tokens": [1449, 257, 1702, 574, 281, 976, 291, 264, 2633, 295, 437, 775, 309, 914, 13], "temperature": 0.0, "avg_logprob": -0.21682078883333025, "compression_ratio": 1.4274809160305344, "no_speech_prob": 7.394699059659615e-05}, {"id": 68, "seek": 60500, "start": 618.0, "end": 627.0, "text": " This is a program just sending chow using a datagram.", "tokens": [639, 307, 257, 1461, 445, 7750, 417, 305, 1228, 257, 1137, 3914, 13], "temperature": 0.0, "avg_logprob": -0.21682078883333025, "compression_ratio": 1.4274809160305344, "no_speech_prob": 7.394699059659615e-05}, {"id": 69, "seek": 60500, "start": 627.0, "end": 631.0, "text": " This is the legacy way.", "tokens": [639, 307, 264, 11711, 636, 13], "temperature": 0.0, "avg_logprob": -0.21682078883333025, "compression_ratio": 1.4274809160305344, "no_speech_prob": 7.394699059659615e-05}, {"id": 70, "seek": 63100, "start": 631.0, "end": 640.0, "text": " This is the same example using internal threads.", "tokens": [639, 307, 264, 912, 1365, 1228, 6920, 19314, 13], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 71, "seek": 63100, "start": 640.0, "end": 642.0, "text": " Here is the implementation.", "tokens": [1692, 307, 264, 11420, 13], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 72, "seek": 63100, "start": 642.0, "end": 648.0, "text": " Just by changing this string, I can use any implementation I want,", "tokens": [1449, 538, 4473, 341, 6798, 11, 286, 393, 764, 604, 11420, 286, 528, 11], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 73, "seek": 63100, "start": 648.0, "end": 651.0, "text": " provided I have support for that.", "tokens": [5649, 286, 362, 1406, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 74, "seek": 63100, "start": 651.0, "end": 655.0, "text": " Okay, now the core of the presentation.", "tokens": [1033, 11, 586, 264, 4965, 295, 264, 5860, 13], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 75, "seek": 63100, "start": 655.0, "end": 659.0, "text": " We needed an ecosystem around this idea.", "tokens": [492, 2978, 364, 11311, 926, 341, 1558, 13], "temperature": 0.0, "avg_logprob": -0.14789160815152255, "compression_ratio": 1.4827586206896552, "no_speech_prob": 6.833920633653179e-05}, {"id": 76, "seek": 65900, "start": 659.0, "end": 668.0, "text": " We needed a lot of stuff that we currently have in our support,", "tokens": [492, 2978, 257, 688, 295, 1507, 300, 321, 4362, 362, 294, 527, 1406, 11], "temperature": 0.0, "avg_logprob": -0.08558062946095187, "compression_ratio": 1.2745098039215685, "no_speech_prob": 9.545931243337691e-05}, {"id": 77, "seek": 65900, "start": 668.0, "end": 680.0, "text": " in our tool set, but we need them implemented as internal threads.", "tokens": [294, 527, 2290, 992, 11, 457, 321, 643, 552, 12270, 382, 6920, 19314, 13], "temperature": 0.0, "avg_logprob": -0.08558062946095187, "compression_ratio": 1.2745098039215685, "no_speech_prob": 9.545931243337691e-05}, {"id": 78, "seek": 68000, "start": 680.0, "end": 689.0, "text": " We needed calls to configure the network.", "tokens": [492, 2978, 5498, 281, 22162, 264, 3209, 13], "temperature": 0.0, "avg_logprob": -0.21304913000627, "compression_ratio": 1.4958677685950412, "no_speech_prob": 4.0999519114848226e-05}, {"id": 79, "seek": 68000, "start": 689.0, "end": 696.0, "text": " These are not calls from the Internet of Threads implementation of the library Internet of Threads.", "tokens": [1981, 366, 406, 5498, 490, 264, 7703, 295, 334, 2538, 82, 11420, 295, 264, 6405, 7703, 295, 334, 2538, 82, 13], "temperature": 0.0, "avg_logprob": -0.21304913000627, "compression_ratio": 1.4958677685950412, "no_speech_prob": 4.0999519114848226e-05}, {"id": 80, "seek": 68000, "start": 696.0, "end": 701.0, "text": " These calls generate net link messages.", "tokens": [1981, 5498, 8460, 2533, 2113, 7897, 13], "temperature": 0.0, "avg_logprob": -0.21304913000627, "compression_ratio": 1.4958677685950412, "no_speech_prob": 4.0999519114848226e-05}, {"id": 81, "seek": 70100, "start": 701.0, "end": 714.0, "text": " So it can be used even for configuring the kernel stack from a program.", "tokens": [407, 309, 393, 312, 1143, 754, 337, 6662, 1345, 264, 28256, 8630, 490, 257, 1461, 13], "temperature": 0.0, "avg_logprob": -0.18818222604146817, "compression_ratio": 1.2016806722689075, "no_speech_prob": 8.482910197926685e-05}, {"id": 82, "seek": 70100, "start": 714.0, "end": 723.0, "text": " Let us pass quickly through this.", "tokens": [961, 505, 1320, 2661, 807, 341, 13], "temperature": 0.0, "avg_logprob": -0.18818222604146817, "compression_ratio": 1.2016806722689075, "no_speech_prob": 8.482910197926685e-05}, {"id": 83, "seek": 70100, "start": 723.0, "end": 728.0, "text": " We need a library to a query for DNS.", "tokens": [492, 643, 257, 6405, 281, 257, 14581, 337, 35153, 13], "temperature": 0.0, "avg_logprob": -0.18818222604146817, "compression_ratio": 1.2016806722689075, "no_speech_prob": 8.482910197926685e-05}, {"id": 84, "seek": 72800, "start": 728.0, "end": 735.0, "text": " Why? Because using the celib implementation,", "tokens": [1545, 30, 1436, 1228, 264, 9277, 897, 11420, 11], "temperature": 0.0, "avg_logprob": -0.21479727540697371, "compression_ratio": 1.5, "no_speech_prob": 0.0007269135676324368}, {"id": 85, "seek": 72800, "start": 735.0, "end": 741.0, "text": " it uses the kernel stack,", "tokens": [309, 4960, 264, 28256, 8630, 11], "temperature": 0.0, "avg_logprob": -0.21479727540697371, "compression_ratio": 1.5, "no_speech_prob": 0.0007269135676324368}, {"id": 86, "seek": 72800, "start": 741.0, "end": 748.0, "text": " and it uses the definitions in atc.result.conf", "tokens": [293, 309, 4960, 264, 21988, 294, 412, 66, 13, 495, 723, 13, 24697], "temperature": 0.0, "avg_logprob": -0.21479727540697371, "compression_ratio": 1.5, "no_speech_prob": 0.0007269135676324368}, {"id": 87, "seek": 72800, "start": 748.0, "end": 753.0, "text": " and the string atc.result.conf are coded in the celib code.", "tokens": [293, 264, 6798, 412, 66, 13, 495, 723, 13, 24697, 366, 34874, 294, 264, 9277, 897, 3089, 13], "temperature": 0.0, "avg_logprob": -0.21479727540697371, "compression_ratio": 1.5, "no_speech_prob": 0.0007269135676324368}, {"id": 88, "seek": 75300, "start": 753.0, "end": 758.0, "text": " It's not possible to change even the file to be used.", "tokens": [467, 311, 406, 1944, 281, 1319, 754, 264, 3991, 281, 312, 1143, 13], "temperature": 0.0, "avg_logprob": -0.1781197166442871, "compression_ratio": 1.2907801418439717, "no_speech_prob": 8.198075374821201e-05}, {"id": 89, "seek": 75300, "start": 758.0, "end": 769.0, "text": " But we designed a named proxy for word cache,", "tokens": [583, 321, 4761, 257, 4926, 29690, 337, 1349, 19459, 11], "temperature": 0.0, "avg_logprob": -0.1781197166442871, "compression_ratio": 1.2907801418439717, "no_speech_prob": 8.198075374821201e-05}, {"id": 90, "seek": 75300, "start": 769.0, "end": 772.0, "text": " especially for the Internet of Threads,", "tokens": [2318, 337, 264, 7703, 295, 334, 2538, 82, 11], "temperature": 0.0, "avg_logprob": -0.1781197166442871, "compression_ratio": 1.2907801418439717, "no_speech_prob": 8.198075374821201e-05}, {"id": 91, "seek": 75300, "start": 772.0, "end": 778.0, "text": " which are the characteristics of this DNS.", "tokens": [597, 366, 264, 10891, 295, 341, 35153, 13], "temperature": 0.0, "avg_logprob": -0.1781197166442871, "compression_ratio": 1.2907801418439717, "no_speech_prob": 8.198075374821201e-05}, {"id": 92, "seek": 77800, "start": 778.0, "end": 785.0, "text": " It uses the Internet of Threads so it can use for the same queries,", "tokens": [467, 4960, 264, 7703, 295, 334, 2538, 82, 370, 309, 393, 764, 337, 264, 912, 24109, 11], "temperature": 0.0, "avg_logprob": -0.18097009464186065, "compression_ratio": 1.4296875, "no_speech_prob": 7.367295620497316e-05}, {"id": 93, "seek": 77800, "start": 785.0, "end": 791.0, "text": " or for word queries, different stacks defined by the user.", "tokens": [420, 337, 1349, 24109, 11, 819, 30792, 7642, 538, 264, 4195, 13], "temperature": 0.0, "avg_logprob": -0.18097009464186065, "compression_ratio": 1.4296875, "no_speech_prob": 7.367295620497316e-05}, {"id": 94, "seek": 77800, "start": 791.0, "end": 798.0, "text": " But at the same time, they can provide further services,", "tokens": [583, 412, 264, 912, 565, 11, 436, 393, 2893, 3052, 3328, 11], "temperature": 0.0, "avg_logprob": -0.18097009464186065, "compression_ratio": 1.4296875, "no_speech_prob": 7.367295620497316e-05}, {"id": 95, "seek": 79800, "start": 798.0, "end": 808.0, "text": " further features, specifically useful for the Internet of Threads.", "tokens": [3052, 4122, 11, 4682, 4420, 337, 264, 7703, 295, 334, 2538, 82, 13], "temperature": 0.0, "avg_logprob": -0.2610013775709199, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.0001800159807316959}, {"id": 96, "seek": 79800, "start": 808.0, "end": 813.0, "text": " Let us pass.", "tokens": [961, 505, 1320, 13], "temperature": 0.0, "avg_logprob": -0.2610013775709199, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.0001800159807316959}, {"id": 97, "seek": 79800, "start": 813.0, "end": 821.0, "text": " These are the configuration items.", "tokens": [1981, 366, 264, 11694, 4754, 13], "temperature": 0.0, "avg_logprob": -0.2610013775709199, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.0001800159807316959}, {"id": 98, "seek": 79800, "start": 821.0, "end": 825.0, "text": " But I prefer to show you some scenario", "tokens": [583, 286, 4382, 281, 855, 291, 512, 9005], "temperature": 0.0, "avg_logprob": -0.2610013775709199, "compression_ratio": 1.2644628099173554, "no_speech_prob": 0.0001800159807316959}, {"id": 99, "seek": 82500, "start": 825.0, "end": 832.0, "text": " in which the IOTNMD can be used.", "tokens": [294, 597, 264, 286, 5068, 45, 44, 35, 393, 312, 1143, 13], "temperature": 0.0, "avg_logprob": -0.2522629382563572, "compression_ratio": 1.2519685039370079, "no_speech_prob": 6.750622560502961e-05}, {"id": 100, "seek": 82500, "start": 832.0, "end": 835.0, "text": " This is a common scenario.", "tokens": [639, 307, 257, 2689, 9005, 13], "temperature": 0.0, "avg_logprob": -0.2522629382563572, "compression_ratio": 1.2519685039370079, "no_speech_prob": 6.750622560502961e-05}, {"id": 101, "seek": 82500, "start": 835.0, "end": 842.0, "text": " It's a common proxy scenario, like libmasque or similar,", "tokens": [467, 311, 257, 2689, 29690, 9005, 11, 411, 22854, 3799, 1077, 420, 2531, 11], "temperature": 0.0, "avg_logprob": -0.2522629382563572, "compression_ratio": 1.2519685039370079, "no_speech_prob": 6.750622560502961e-05}, {"id": 102, "seek": 82500, "start": 842.0, "end": 848.0, "text": " but implemented using Internet of Threads.", "tokens": [457, 12270, 1228, 7703, 295, 334, 2538, 82, 13], "temperature": 0.0, "avg_logprob": -0.2522629382563572, "compression_ratio": 1.2519685039370079, "no_speech_prob": 6.750622560502961e-05}, {"id": 103, "seek": 84800, "start": 848.0, "end": 856.0, "text": " So the idea is that if we ask the cache,", "tokens": [407, 264, 1558, 307, 300, 498, 321, 1029, 264, 19459, 11], "temperature": 0.0, "avg_logprob": -0.12946668692997523, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.4439257433405146e-05}, {"id": 104, "seek": 84800, "start": 856.0, "end": 865.0, "text": " if it asks the proxy an address provided by a friendly node,", "tokens": [498, 309, 8962, 264, 29690, 364, 2985, 5649, 538, 257, 9208, 9984, 11], "temperature": 0.0, "avg_logprob": -0.12946668692997523, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.4439257433405146e-05}, {"id": 105, "seek": 84800, "start": 865.0, "end": 869.0, "text": " we can cache the result and provide it back to the query,", "tokens": [321, 393, 19459, 264, 1874, 293, 2893, 309, 646, 281, 264, 14581, 11], "temperature": 0.0, "avg_logprob": -0.12946668692997523, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.4439257433405146e-05}, {"id": 106, "seek": 84800, "start": 869.0, "end": 875.0, "text": " or we can add some specific local addresses.", "tokens": [420, 321, 393, 909, 512, 2685, 2654, 16862, 13], "temperature": 0.0, "avg_logprob": -0.12946668692997523, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.4439257433405146e-05}, {"id": 107, "seek": 87500, "start": 875.0, "end": 883.0, "text": " It doesn't provide a relay from external queries.", "tokens": [467, 1177, 380, 2893, 257, 24214, 490, 8320, 24109, 13], "temperature": 0.0, "avg_logprob": -0.127255795365673, "compression_ratio": 1.5578231292517006, "no_speech_prob": 7.126369018806145e-05}, {"id": 108, "seek": 87500, "start": 883.0, "end": 888.0, "text": " The point is that we have a stack for the query", "tokens": [440, 935, 307, 300, 321, 362, 257, 8630, 337, 264, 14581], "temperature": 0.0, "avg_logprob": -0.127255795365673, "compression_ratio": 1.5578231292517006, "no_speech_prob": 7.126369018806145e-05}, {"id": 109, "seek": 87500, "start": 888.0, "end": 893.0, "text": " and a stack to forward the query outside,", "tokens": [293, 257, 8630, 281, 2128, 264, 14581, 2380, 11], "temperature": 0.0, "avg_logprob": -0.127255795365673, "compression_ratio": 1.5578231292517006, "no_speech_prob": 7.126369018806145e-05}, {"id": 110, "seek": 87500, "start": 893.0, "end": 895.0, "text": " in this case, in this configuration.", "tokens": [294, 341, 1389, 11, 294, 341, 11694, 13], "temperature": 0.0, "avg_logprob": -0.127255795365673, "compression_ratio": 1.5578231292517006, "no_speech_prob": 7.126369018806145e-05}, {"id": 111, "seek": 87500, "start": 895.0, "end": 902.0, "text": " I provide the service to all the processes connected", "tokens": [286, 2893, 264, 2643, 281, 439, 264, 7555, 4582], "temperature": 0.0, "avg_logprob": -0.127255795365673, "compression_ratio": 1.5578231292517006, "no_speech_prob": 7.126369018806145e-05}, {"id": 112, "seek": 90200, "start": 902.0, "end": 909.0, "text": " to this stack, and I forward the queries", "tokens": [281, 341, 8630, 11, 293, 286, 2128, 264, 24109], "temperature": 0.0, "avg_logprob": -0.18478918075561523, "compression_ratio": 1.2777777777777777, "no_speech_prob": 4.620101390173659e-05}, {"id": 113, "seek": 90200, "start": 909.0, "end": 916.0, "text": " on another different stack with a different implementation.", "tokens": [322, 1071, 819, 8630, 365, 257, 819, 11420, 13], "temperature": 0.0, "avg_logprob": -0.18478918075561523, "compression_ratio": 1.2777777777777777, "no_speech_prob": 4.620101390173659e-05}, {"id": 114, "seek": 90200, "start": 916.0, "end": 920.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.18478918075561523, "compression_ratio": 1.2777777777777777, "no_speech_prob": 4.620101390173659e-05}, {"id": 115, "seek": 90200, "start": 920.0, "end": 928.0, "text": " These are the tests just to see", "tokens": [1981, 366, 264, 6921, 445, 281, 536], "temperature": 0.0, "avg_logprob": -0.18478918075561523, "compression_ratio": 1.2777777777777777, "no_speech_prob": 4.620101390173659e-05}, {"id": 116, "seek": 92800, "start": 928.0, "end": 934.0, "text": " that it is able to resolve foreign and local results.", "tokens": [300, 309, 307, 1075, 281, 14151, 5329, 293, 2654, 3542, 13], "temperature": 0.0, "avg_logprob": -0.19140593901924466, "compression_ratio": 1.2782608695652173, "no_speech_prob": 5.185739428270608e-05}, {"id": 117, "seek": 92800, "start": 934.0, "end": 938.0, "text": " Or it can be used as a delegated subdomain.", "tokens": [1610, 309, 393, 312, 1143, 382, 257, 15824, 770, 1422, 4121, 491, 13], "temperature": 0.0, "avg_logprob": -0.19140593901924466, "compression_ratio": 1.2782608695652173, "no_speech_prob": 5.185739428270608e-05}, {"id": 118, "seek": 92800, "start": 938.0, "end": 940.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19140593901924466, "compression_ratio": 1.2782608695652173, "no_speech_prob": 5.185739428270608e-05}, {"id": 119, "seek": 92800, "start": 940.0, "end": 947.0, "text": " So they did that given there is an S record", "tokens": [407, 436, 630, 300, 2212, 456, 307, 364, 318, 2136], "temperature": 0.0, "avg_logprob": -0.19140593901924466, "compression_ratio": 1.2782608695652173, "no_speech_prob": 5.185739428270608e-05}, {"id": 120, "seek": 94700, "start": 947.0, "end": 969.0, "text": " providing, forwarding, defining this pink server as the responsible", "tokens": [6530, 11, 2128, 278, 11, 17827, 341, 7022, 7154, 382, 264, 6250], "temperature": 0.0, "avg_logprob": -0.37361055804837134, "compression_ratio": 1.2093023255813953, "no_speech_prob": 0.00015906509361229837}, {"id": 121, "seek": 94700, "start": 969.0, "end": 973.0, "text": " to the server, dummy, v2, and so on.", "tokens": [281, 264, 7154, 11, 35064, 11, 371, 17, 11, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.37361055804837134, "compression_ratio": 1.2093023255813953, "no_speech_prob": 0.00015906509361229837}, {"id": 122, "seek": 97300, "start": 973.0, "end": 978.0, "text": " So it provides back the solution.", "tokens": [407, 309, 6417, 646, 264, 3827, 13], "temperature": 0.0, "avg_logprob": -0.20794031096667778, "compression_ratio": 1.2564102564102564, "no_speech_prob": 0.00011121592979179695}, {"id": 123, "seek": 97300, "start": 978.0, "end": 983.0, "text": " And here the new point is that we can use different stack.", "tokens": [400, 510, 264, 777, 935, 307, 300, 321, 393, 764, 819, 8630, 13], "temperature": 0.0, "avg_logprob": -0.20794031096667778, "compression_ratio": 1.2564102564102564, "no_speech_prob": 0.00011121592979179695}, {"id": 124, "seek": 97300, "start": 983.0, "end": 993.0, "text": " But I have kept some time to show you some more ideas.", "tokens": [583, 286, 362, 4305, 512, 565, 281, 855, 291, 512, 544, 3487, 13], "temperature": 0.0, "avg_logprob": -0.20794031096667778, "compression_ratio": 1.2564102564102564, "no_speech_prob": 0.00011121592979179695}, {"id": 125, "seek": 99300, "start": 993.0, "end": 1003.0, "text": " Actually, managing DNS servers for IPv6", "tokens": [5135, 11, 11642, 35153, 15909, 337, 8671, 85, 21], "temperature": 0.0, "avg_logprob": -0.1421453313129704, "compression_ratio": 1.1680672268907564, "no_speech_prob": 7.110503793228418e-05}, {"id": 126, "seek": 99300, "start": 1003.0, "end": 1009.0, "text": " is a daunting process, very error-prone,", "tokens": [307, 257, 37657, 1399, 11, 588, 6713, 12, 1424, 546, 11], "temperature": 0.0, "avg_logprob": -0.1421453313129704, "compression_ratio": 1.1680672268907564, "no_speech_prob": 7.110503793228418e-05}, {"id": 127, "seek": 99300, "start": 1009.0, "end": 1017.0, "text": " because if you have to write all those huge, long numbers,", "tokens": [570, 498, 291, 362, 281, 2464, 439, 729, 2603, 11, 938, 3547, 11], "temperature": 0.0, "avg_logprob": -0.1421453313129704, "compression_ratio": 1.1680672268907564, "no_speech_prob": 7.110503793228418e-05}, {"id": 128, "seek": 101700, "start": 1017.0, "end": 1026.0, "text": " it is very hard to not to insert errors in the configuration.", "tokens": [309, 307, 588, 1152, 281, 406, 281, 8969, 13603, 294, 264, 11694, 13], "temperature": 0.0, "avg_logprob": -0.14739615700461647, "compression_ratio": 1.474074074074074, "no_speech_prob": 9.693985339254141e-05}, {"id": 129, "seek": 101700, "start": 1026.0, "end": 1031.0, "text": " That is to create IPv6 address,", "tokens": [663, 307, 281, 1884, 8671, 85, 21, 2985, 11], "temperature": 0.0, "avg_logprob": -0.14739615700461647, "compression_ratio": 1.474074074074074, "no_speech_prob": 9.693985339254141e-05}, {"id": 130, "seek": 101700, "start": 1031.0, "end": 1036.0, "text": " the health part of the IPv6 address using hash code,", "tokens": [264, 1585, 644, 295, 264, 8671, 85, 21, 2985, 1228, 22019, 3089, 11], "temperature": 0.0, "avg_logprob": -0.14739615700461647, "compression_ratio": 1.474074074074074, "no_speech_prob": 9.693985339254141e-05}, {"id": 131, "seek": 101700, "start": 1036.0, "end": 1043.0, "text": " hash resolution, using the result of a hash function", "tokens": [22019, 8669, 11, 1228, 264, 1874, 295, 257, 22019, 2445], "temperature": 0.0, "avg_logprob": -0.14739615700461647, "compression_ratio": 1.474074074074074, "no_speech_prob": 9.693985339254141e-05}, {"id": 132, "seek": 104300, "start": 1043.0, "end": 1051.0, "text": " defined on the full defined domain name.", "tokens": [7642, 322, 264, 1577, 7642, 9274, 1315, 13], "temperature": 0.0, "avg_logprob": -0.11643906200633329, "compression_ratio": 1.435483870967742, "no_speech_prob": 0.00015575137513224036}, {"id": 133, "seek": 104300, "start": 1051.0, "end": 1056.0, "text": " So given the full domain name,", "tokens": [407, 2212, 264, 1577, 9274, 1315, 11], "temperature": 0.0, "avg_logprob": -0.11643906200633329, "compression_ratio": 1.435483870967742, "no_speech_prob": 0.00015575137513224036}, {"id": 134, "seek": 104300, "start": 1056.0, "end": 1066.0, "text": " we can have the health part of the IPv6 address for free.", "tokens": [321, 393, 362, 264, 1585, 644, 295, 264, 8671, 85, 21, 2985, 337, 1737, 13], "temperature": 0.0, "avg_logprob": -0.11643906200633329, "compression_ratio": 1.435483870967742, "no_speech_prob": 0.00015575137513224036}, {"id": 135, "seek": 104300, "start": 1066.0, "end": 1071.0, "text": " So this is the proxy as in the previous example,", "tokens": [407, 341, 307, 264, 29690, 382, 294, 264, 3894, 1365, 11], "temperature": 0.0, "avg_logprob": -0.11643906200633329, "compression_ratio": 1.435483870967742, "no_speech_prob": 0.00015575137513224036}, {"id": 136, "seek": 107100, "start": 1071.0, "end": 1080.0, "text": " but I can ask the server to solve all the addresses", "tokens": [457, 286, 393, 1029, 264, 7154, 281, 5039, 439, 264, 16862], "temperature": 0.0, "avg_logprob": -0.1259262482325236, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002906396402977407}, {"id": 137, "seek": 107100, "start": 1080.0, "end": 1083.0, "text": " like something hash.local.", "tokens": [411, 746, 22019, 13, 5842, 304, 13], "temperature": 0.0, "avg_logprob": -0.1259262482325236, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002906396402977407}, {"id": 138, "seek": 107100, "start": 1083.0, "end": 1090.0, "text": " And I can use any string before the hash.local,", "tokens": [400, 286, 393, 764, 604, 6798, 949, 264, 22019, 13, 5842, 304, 11], "temperature": 0.0, "avg_logprob": -0.1259262482325236, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002906396402977407}, {"id": 139, "seek": 107100, "start": 1090.0, "end": 1095.0, "text": " and I get a name resolution.", "tokens": [293, 286, 483, 257, 1315, 8669, 13], "temperature": 0.0, "avg_logprob": -0.1259262482325236, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002906396402977407}, {"id": 140, "seek": 107100, "start": 1095.0, "end": 1098.0, "text": " That means that if I add a new node,", "tokens": [663, 1355, 300, 498, 286, 909, 257, 777, 9984, 11], "temperature": 0.0, "avg_logprob": -0.1259262482325236, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002906396402977407}, {"id": 141, "seek": 109800, "start": 1098.0, "end": 1102.0, "text": " which can be a computer or even a process,", "tokens": [597, 393, 312, 257, 3820, 420, 754, 257, 1399, 11], "temperature": 0.0, "avg_logprob": -0.11348487484839655, "compression_ratio": 1.4013157894736843, "no_speech_prob": 0.00015675328904762864}, {"id": 142, "seek": 109800, "start": 1102.0, "end": 1106.0, "text": " I just have to baptize it to give it a name,", "tokens": [286, 445, 362, 281, 18222, 1125, 309, 281, 976, 309, 257, 1315, 11], "temperature": 0.0, "avg_logprob": -0.11348487484839655, "compression_ratio": 1.4013157894736843, "no_speech_prob": 0.00015675328904762864}, {"id": 143, "seek": 109800, "start": 1106.0, "end": 1108.0, "text": " and it will be connected on the net", "tokens": [293, 309, 486, 312, 4582, 322, 264, 2533], "temperature": 0.0, "avg_logprob": -0.11348487484839655, "compression_ratio": 1.4013157894736843, "no_speech_prob": 0.00015675328904762864}, {"id": 144, "seek": 109800, "start": 1108.0, "end": 1118.0, "text": " without having to write any single line in the DNS server.", "tokens": [1553, 1419, 281, 2464, 604, 2167, 1622, 294, 264, 35153, 7154, 13], "temperature": 0.0, "avg_logprob": -0.11348487484839655, "compression_ratio": 1.4013157894736843, "no_speech_prob": 0.00015675328904762864}, {"id": 145, "seek": 109800, "start": 1118.0, "end": 1124.0, "text": " The slides are on the website,", "tokens": [440, 9788, 366, 322, 264, 3144, 11], "temperature": 0.0, "avg_logprob": -0.11348487484839655, "compression_ratio": 1.4013157894736843, "no_speech_prob": 0.00015675328904762864}, {"id": 146, "seek": 112400, "start": 1124.0, "end": 1130.0, "text": " so if you want to pass through and download the prototype", "tokens": [370, 498, 291, 528, 281, 1320, 807, 293, 5484, 264, 19475], "temperature": 0.0, "avg_logprob": -0.1809192513519863, "compression_ratio": 1.3986013986013985, "no_speech_prob": 6.552297418238595e-05}, {"id": 147, "seek": 112400, "start": 1130.0, "end": 1139.0, "text": " from GitHub, you can test this.", "tokens": [490, 23331, 11, 291, 393, 1500, 341, 13], "temperature": 0.0, "avg_logprob": -0.1809192513519863, "compression_ratio": 1.3986013986013985, "no_speech_prob": 6.552297418238595e-05}, {"id": 148, "seek": 112400, "start": 1139.0, "end": 1143.0, "text": " The same thing can be done, the reverse will run,", "tokens": [440, 912, 551, 393, 312, 1096, 11, 264, 9943, 486, 1190, 11], "temperature": 0.0, "avg_logprob": -0.1809192513519863, "compression_ratio": 1.3986013986013985, "no_speech_prob": 6.552297418238595e-05}, {"id": 149, "seek": 112400, "start": 1143.0, "end": 1152.0, "text": " so having a delegated domain that also addresses using hash.", "tokens": [370, 1419, 257, 15824, 770, 9274, 300, 611, 16862, 1228, 22019, 13], "temperature": 0.0, "avg_logprob": -0.1809192513519863, "compression_ratio": 1.3986013986013985, "no_speech_prob": 6.552297418238595e-05}, {"id": 150, "seek": 115200, "start": 1152.0, "end": 1163.0, "text": " So we can have a number of local machines", "tokens": [407, 321, 393, 362, 257, 1230, 295, 2654, 8379], "temperature": 0.0, "avg_logprob": -0.14446959203603316, "compression_ratio": 1.3387096774193548, "no_speech_prob": 9.742658585309982e-05}, {"id": 151, "seek": 115200, "start": 1163.0, "end": 1169.0, "text": " that can be seen from the internet just by giving them a name.", "tokens": [300, 393, 312, 1612, 490, 264, 4705, 445, 538, 2902, 552, 257, 1315, 13], "temperature": 0.0, "avg_logprob": -0.14446959203603316, "compression_ratio": 1.3387096774193548, "no_speech_prob": 9.742658585309982e-05}, {"id": 152, "seek": 115200, "start": 1169.0, "end": 1174.0, "text": " But there is one more result, one more,", "tokens": [583, 456, 307, 472, 544, 1874, 11, 472, 544, 11], "temperature": 0.0, "avg_logprob": -0.14446959203603316, "compression_ratio": 1.3387096774193548, "no_speech_prob": 9.742658585309982e-05}, {"id": 153, "seek": 115200, "start": 1174.0, "end": 1178.0, "text": " which is one time IP.", "tokens": [597, 307, 472, 565, 8671, 13], "temperature": 0.0, "avg_logprob": -0.14446959203603316, "compression_ratio": 1.3387096774193548, "no_speech_prob": 9.742658585309982e-05}, {"id": 154, "seek": 117800, "start": 1178.0, "end": 1186.0, "text": " One time IP is a security feature like a one time password.", "tokens": [1485, 565, 8671, 307, 257, 3825, 4111, 411, 257, 472, 565, 11524, 13], "temperature": 0.0, "avg_logprob": -0.14850076039632162, "compression_ratio": 1.5364238410596027, "no_speech_prob": 4.347389403847046e-05}, {"id": 155, "seek": 117800, "start": 1186.0, "end": 1190.0, "text": " One time password means that you have a password", "tokens": [1485, 565, 11524, 1355, 300, 291, 362, 257, 11524], "temperature": 0.0, "avg_logprob": -0.14850076039632162, "compression_ratio": 1.5364238410596027, "no_speech_prob": 4.347389403847046e-05}, {"id": 156, "seek": 117800, "start": 1190.0, "end": 1193.0, "text": " that lasts for a short period of time,", "tokens": [300, 20669, 337, 257, 2099, 2896, 295, 565, 11], "temperature": 0.0, "avg_logprob": -0.14850076039632162, "compression_ratio": 1.5364238410596027, "no_speech_prob": 4.347389403847046e-05}, {"id": 157, "seek": 117800, "start": 1193.0, "end": 1199.0, "text": " so if somebody is able to ice drop the password,", "tokens": [370, 498, 2618, 307, 1075, 281, 4435, 3270, 264, 11524, 11], "temperature": 0.0, "avg_logprob": -0.14850076039632162, "compression_ratio": 1.5364238410596027, "no_speech_prob": 4.347389403847046e-05}, {"id": 158, "seek": 117800, "start": 1199.0, "end": 1203.0, "text": " it's kept useless in a few moments.", "tokens": [309, 311, 4305, 14115, 294, 257, 1326, 6065, 13], "temperature": 0.0, "avg_logprob": -0.14850076039632162, "compression_ratio": 1.5364238410596027, "no_speech_prob": 4.347389403847046e-05}, {"id": 159, "seek": 120300, "start": 1203.0, "end": 1209.0, "text": " This is the idea of one time IP, the host part of the address", "tokens": [639, 307, 264, 1558, 295, 472, 565, 8671, 11, 264, 3975, 644, 295, 264, 2985], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 160, "seek": 120300, "start": 1209.0, "end": 1214.0, "text": " is defined by an hash definition", "tokens": [307, 7642, 538, 364, 22019, 7123], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 161, "seek": 120300, "start": 1214.0, "end": 1217.0, "text": " that changes during the time.", "tokens": [300, 2962, 1830, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 162, "seek": 120300, "start": 1217.0, "end": 1221.0, "text": " It's an hash not only of the name,", "tokens": [467, 311, 364, 22019, 406, 787, 295, 264, 1315, 11], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 163, "seek": 120300, "start": 1221.0, "end": 1223.0, "text": " of the fully qualified domain name,", "tokens": [295, 264, 4498, 15904, 9274, 1315, 11], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 164, "seek": 120300, "start": 1223.0, "end": 1228.0, "text": " but it includes a password and the time.", "tokens": [457, 309, 5974, 257, 11524, 293, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.17027884810718139, "compression_ratio": 1.5629139072847682, "no_speech_prob": 0.0001238737313542515}, {"id": 165, "seek": 122800, "start": 1228.0, "end": 1233.0, "text": " So if the legitimate user wanted to connect to the server,", "tokens": [407, 498, 264, 17956, 4195, 1415, 281, 1745, 281, 264, 7154, 11], "temperature": 0.0, "avg_logprob": -0.13866465800517314, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.00016079586930572987}, {"id": 166, "seek": 122800, "start": 1233.0, "end": 1237.0, "text": " it knows which is the actual IP address.", "tokens": [309, 3255, 597, 307, 264, 3539, 8671, 2985, 13], "temperature": 0.0, "avg_logprob": -0.13866465800517314, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.00016079586930572987}, {"id": 167, "seek": 122800, "start": 1237.0, "end": 1245.0, "text": " Any other user, even if he's able to trace the network traffic,", "tokens": [2639, 661, 4195, 11, 754, 498, 415, 311, 1075, 281, 13508, 264, 3209, 6419, 11], "temperature": 0.0, "avg_logprob": -0.13866465800517314, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.00016079586930572987}, {"id": 168, "seek": 122800, "start": 1245.0, "end": 1252.0, "text": " it gets some address that will be null in a few seconds.", "tokens": [309, 2170, 512, 2985, 300, 486, 312, 18184, 294, 257, 1326, 3949, 13], "temperature": 0.0, "avg_logprob": -0.13866465800517314, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.00016079586930572987}, {"id": 169, "seek": 122800, "start": 1252.0, "end": 1257.0, "text": " Okay, I think I have no time to show the other.", "tokens": [1033, 11, 286, 519, 286, 362, 572, 565, 281, 855, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.13866465800517314, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.00016079586930572987}, {"id": 170, "seek": 125700, "start": 1257.0, "end": 1260.0, "text": " Minus means time for questions, isn't it?", "tokens": [2829, 301, 1355, 565, 337, 1651, 11, 1943, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 171, "seek": 125700, "start": 1260.0, "end": 1263.0, "text": " Yes, four minutes left including questions.", "tokens": [1079, 11, 1451, 2077, 1411, 3009, 1651, 13], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 172, "seek": 125700, "start": 1263.0, "end": 1268.0, "text": " Just one point and then I go to the question.", "tokens": [1449, 472, 935, 293, 550, 286, 352, 281, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 173, "seek": 125700, "start": 1268.0, "end": 1275.0, "text": " Namely, ACP is another tool which asks,", "tokens": [10684, 736, 11, 8157, 47, 307, 1071, 2290, 597, 8962, 11], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 174, "seek": 125700, "start": 1275.0, "end": 1278.0, "text": " which uses the ACP server,", "tokens": [597, 4960, 264, 8157, 47, 7154, 11], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 175, "seek": 125700, "start": 1278.0, "end": 1282.0, "text": " but these ACP servers query the DNS", "tokens": [457, 613, 8157, 47, 15909, 14581, 264, 35153], "temperature": 0.0, "avg_logprob": -0.2540179933820452, "compression_ratio": 1.4444444444444444, "no_speech_prob": 9.602639329386875e-05}, {"id": 176, "seek": 128200, "start": 1282.0, "end": 1288.0, "text": " to provide the address to the computer,", "tokens": [281, 2893, 264, 2985, 281, 264, 3820, 11], "temperature": 0.0, "avg_logprob": -0.15874006483289932, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.4698132367338985e-05}, {"id": 177, "seek": 128200, "start": 1288.0, "end": 1291.0, "text": " not the processor whatsoever,", "tokens": [406, 264, 15321, 17076, 11], "temperature": 0.0, "avg_logprob": -0.15874006483289932, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.4698132367338985e-05}, {"id": 178, "seek": 128200, "start": 1291.0, "end": 1303.0, "text": " so that you can just say to your computer", "tokens": [370, 300, 291, 393, 445, 584, 281, 428, 3820], "temperature": 0.0, "avg_logprob": -0.15874006483289932, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.4698132367338985e-05}, {"id": 179, "seek": 128200, "start": 1303.0, "end": 1305.0, "text": " which is the name,", "tokens": [597, 307, 264, 1315, 11], "temperature": 0.0, "avg_logprob": -0.15874006483289932, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.4698132367338985e-05}, {"id": 180, "seek": 128200, "start": 1305.0, "end": 1309.0, "text": " and the resolution is provided,", "tokens": [293, 264, 8669, 307, 5649, 11], "temperature": 0.0, "avg_logprob": -0.15874006483289932, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.4698132367338985e-05}, {"id": 181, "seek": 130900, "start": 1309.0, "end": 1313.0, "text": " and the definition of all the networking configuration", "tokens": [293, 264, 7123, 295, 439, 264, 17985, 11694], "temperature": 0.0, "avg_logprob": -0.16221394830820512, "compression_ratio": 1.2971014492753623, "no_speech_prob": 7.027055835351348e-05}, {"id": 182, "seek": 130900, "start": 1313.0, "end": 1320.0, "text": " is provided getting replies from the DNS server.", "tokens": [307, 5649, 1242, 42289, 490, 264, 35153, 7154, 13], "temperature": 0.0, "avg_logprob": -0.16221394830820512, "compression_ratio": 1.2971014492753623, "no_speech_prob": 7.027055835351348e-05}, {"id": 183, "seek": 130900, "start": 1320.0, "end": 1325.0, "text": " Okay, I have to stop.", "tokens": [1033, 11, 286, 362, 281, 1590, 13], "temperature": 0.0, "avg_logprob": -0.16221394830820512, "compression_ratio": 1.2971014492753623, "no_speech_prob": 7.027055835351348e-05}, {"id": 184, "seek": 130900, "start": 1325.0, "end": 1332.0, "text": " I have a lot of more examples to give you.", "tokens": [286, 362, 257, 688, 295, 544, 5110, 281, 976, 291, 13], "temperature": 0.0, "avg_logprob": -0.16221394830820512, "compression_ratio": 1.2971014492753623, "no_speech_prob": 7.027055835351348e-05}, {"id": 185, "seek": 130900, "start": 1332.0, "end": 1336.0, "text": " Questions?", "tokens": [27738, 30], "temperature": 0.0, "avg_logprob": -0.16221394830820512, "compression_ratio": 1.2971014492753623, "no_speech_prob": 7.027055835351348e-05}, {"id": 186, "seek": 133600, "start": 1336.0, "end": 1341.0, "text": " You can just repeat it.", "tokens": [509, 393, 445, 7149, 309, 13], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 187, "seek": 133600, "start": 1341.0, "end": 1345.0, "text": " What is the overhead of using a network stack in every thread,", "tokens": [708, 307, 264, 19922, 295, 1228, 257, 3209, 8630, 294, 633, 7207, 11], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 188, "seek": 133600, "start": 1345.0, "end": 1348.0, "text": " especially if you're using the one-time IPs for each connection?", "tokens": [2318, 498, 291, 434, 1228, 264, 472, 12, 3766, 8671, 82, 337, 1184, 4984, 30], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 189, "seek": 133600, "start": 1348.0, "end": 1352.0, "text": " What is the overhead that you get within the application", "tokens": [708, 307, 264, 19922, 300, 291, 483, 1951, 264, 3861], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 190, "seek": 133600, "start": 1352.0, "end": 1356.0, "text": " if you have a lot of connections coming in?", "tokens": [498, 291, 362, 257, 688, 295, 9271, 1348, 294, 30], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 191, "seek": 133600, "start": 1356.0, "end": 1364.0, "text": " For sure on single connections we have some performance drop,", "tokens": [1171, 988, 322, 2167, 9271, 321, 362, 512, 3389, 3270, 11], "temperature": 0.0, "avg_logprob": -0.14912646329855617, "compression_ratio": 1.6185567010309279, "no_speech_prob": 0.00020454556215554476}, {"id": 192, "seek": 136400, "start": 1364.0, "end": 1370.0, "text": " but the point is that the overall bandwidth", "tokens": [457, 264, 935, 307, 300, 264, 4787, 23647], "temperature": 0.0, "avg_logprob": -0.11866407768399108, "compression_ratio": 1.6165413533834587, "no_speech_prob": 7.833370182197541e-05}, {"id": 193, "seek": 136400, "start": 1370.0, "end": 1375.0, "text": " by all the applications you have on your system", "tokens": [538, 439, 264, 5821, 291, 362, 322, 428, 1185], "temperature": 0.0, "avg_logprob": -0.11866407768399108, "compression_ratio": 1.6165413533834587, "no_speech_prob": 7.833370182197541e-05}, {"id": 194, "seek": 136400, "start": 1375.0, "end": 1378.0, "text": " can use the entire bandwidth,", "tokens": [393, 764, 264, 2302, 23647, 11], "temperature": 0.0, "avg_logprob": -0.11866407768399108, "compression_ratio": 1.6165413533834587, "no_speech_prob": 7.833370182197541e-05}, {"id": 195, "seek": 136400, "start": 1378.0, "end": 1385.0, "text": " so you have the experience that you spread democratically", "tokens": [370, 291, 362, 264, 1752, 300, 291, 3974, 6366, 5030], "temperature": 0.0, "avg_logprob": -0.11866407768399108, "compression_ratio": 1.6165413533834587, "no_speech_prob": 7.833370182197541e-05}, {"id": 196, "seek": 136400, "start": 1385.0, "end": 1393.0, "text": " the bandwidth among your processes.", "tokens": [264, 23647, 3654, 428, 7555, 13], "temperature": 0.0, "avg_logprob": -0.11866407768399108, "compression_ratio": 1.6165413533834587, "no_speech_prob": 7.833370182197541e-05}, {"id": 197, "seek": 139300, "start": 1393.0, "end": 1411.0, "text": " Questions?", "tokens": [27738, 30], "temperature": 0.0, "avg_logprob": -0.22694204330444337, "compression_ratio": 0.9342105263157895, "no_speech_prob": 0.000444954726845026}, {"id": 198, "seek": 139300, "start": 1411.0, "end": 1413.0, "text": " Sorry, I can't tell you.", "tokens": [4919, 11, 286, 393, 380, 980, 291, 13], "temperature": 0.0, "avg_logprob": -0.22694204330444337, "compression_ratio": 0.9342105263157895, "no_speech_prob": 0.000444954726845026}, {"id": 199, "seek": 139300, "start": 1413.0, "end": 1419.0, "text": " Is latency a factor like bandwidth?", "tokens": [1119, 27043, 257, 5952, 411, 23647, 30], "temperature": 0.0, "avg_logprob": -0.22694204330444337, "compression_ratio": 0.9342105263157895, "no_speech_prob": 0.000444954726845026}, {"id": 200, "seek": 141900, "start": 1419.0, "end": 1431.0, "text": " Actually, the point is that behind the user-level stack", "tokens": [5135, 11, 264, 935, 307, 300, 2261, 264, 4195, 12, 12418, 8630], "temperature": 0.0, "avg_logprob": -0.2350992541159353, "compression_ratio": 1.3955223880597014, "no_speech_prob": 5.83527835260611e-05}, {"id": 201, "seek": 141900, "start": 1431.0, "end": 1434.0, "text": " there is a virtual network,", "tokens": [456, 307, 257, 6374, 3209, 11], "temperature": 0.0, "avg_logprob": -0.2350992541159353, "compression_ratio": 1.3955223880597014, "no_speech_prob": 5.83527835260611e-05}, {"id": 202, "seek": 141900, "start": 1434.0, "end": 1437.0, "text": " which is a virtual-disputed internet,", "tokens": [597, 307, 257, 6374, 12, 13731, 2582, 292, 4705, 11], "temperature": 0.0, "avg_logprob": -0.2350992541159353, "compression_ratio": 1.3955223880597014, "no_speech_prob": 5.83527835260611e-05}, {"id": 203, "seek": 141900, "start": 1437.0, "end": 1441.0, "text": " that using support like VxVD,", "tokens": [300, 1228, 1406, 411, 691, 87, 53, 35, 11], "temperature": 0.0, "avg_logprob": -0.2350992541159353, "compression_ratio": 1.3955223880597014, "no_speech_prob": 5.83527835260611e-05}, {"id": 204, "seek": 141900, "start": 1441.0, "end": 1445.0, "text": " which is like a VxLan without VTAP,", "tokens": [597, 307, 411, 257, 691, 87, 43, 282, 1553, 691, 51, 4715, 11], "temperature": 0.0, "avg_logprob": -0.2350992541159353, "compression_ratio": 1.3955223880597014, "no_speech_prob": 5.83527835260611e-05}, {"id": 205, "seek": 144500, "start": 1445.0, "end": 1451.0, "text": " so each process is part of the distributed stages.", "tokens": [370, 1184, 1399, 307, 644, 295, 264, 12631, 10232, 13], "temperature": 0.0, "avg_logprob": -0.2723514863422939, "compression_ratio": 1.5174825174825175, "no_speech_prob": 0.00015296702622435987}, {"id": 206, "seek": 144500, "start": 1451.0, "end": 1458.0, "text": " Latency are quite good because you have a direct UDP connection,", "tokens": [7354, 3020, 366, 1596, 665, 570, 291, 362, 257, 2047, 624, 11373, 4984, 11], "temperature": 0.0, "avg_logprob": -0.2723514863422939, "compression_ratio": 1.5174825174825175, "no_speech_prob": 0.00015296702622435987}, {"id": 207, "seek": 144500, "start": 1458.0, "end": 1463.0, "text": " a unique connection from end-to-end from a process", "tokens": [257, 3845, 4984, 490, 917, 12, 1353, 12, 521, 490, 257, 1399], "temperature": 0.0, "avg_logprob": -0.2723514863422939, "compression_ratio": 1.5174825174825175, "no_speech_prob": 0.00015296702622435987}, {"id": 208, "seek": 144500, "start": 1463.0, "end": 1466.0, "text": " in one machine to the process to the other machine", "tokens": [294, 472, 3479, 281, 264, 1399, 281, 264, 661, 3479], "temperature": 0.0, "avg_logprob": -0.2723514863422939, "compression_ratio": 1.5174825174825175, "no_speech_prob": 0.00015296702622435987}, {"id": 209, "seek": 146600, "start": 1466.0, "end": 1490.0, "text": " so there is a direct UDP one-to-one.", "tokens": [370, 456, 307, 257, 2047, 624, 11373, 472, 12, 1353, 12, 546, 13], "temperature": 0.0, "avg_logprob": -0.25427865982055664, "compression_ratio": 0.8571428571428571, "no_speech_prob": 6.744648271705955e-05}, {"id": 210, "seek": 149000, "start": 1490.0, "end": 1496.0, "text": " My idea is to have a new concept of computing elements,", "tokens": [1222, 1558, 307, 281, 362, 257, 777, 3410, 295, 15866, 4959, 11], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 211, "seek": 149000, "start": 1496.0, "end": 1500.0, "text": " so instead of having your computer with the process,", "tokens": [370, 2602, 295, 1419, 428, 3820, 365, 264, 1399, 11], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 212, "seek": 149000, "start": 1500.0, "end": 1505.0, "text": " you have locally a network of a cluster of computers", "tokens": [291, 362, 16143, 257, 3209, 295, 257, 13630, 295, 10807], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 213, "seek": 149000, "start": 1505.0, "end": 1511.0, "text": " with all the processes which are of different networks.", "tokens": [365, 439, 264, 7555, 597, 366, 295, 819, 9590, 13], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 214, "seek": 149000, "start": 1511.0, "end": 1513.0, "text": " So you have the real networks,", "tokens": [407, 291, 362, 264, 957, 9590, 11], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 215, "seek": 149000, "start": 1513.0, "end": 1516.0, "text": " which is just the basic framework,", "tokens": [597, 307, 445, 264, 3875, 8388, 11], "temperature": 0.0, "avg_logprob": -0.20044450759887694, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.00016645780124235898}, {"id": 216, "seek": 151600, "start": 1516.0, "end": 1523.0, "text": " and you extract this in a number of virtual networks", "tokens": [293, 291, 8947, 341, 294, 257, 1230, 295, 6374, 9590], "temperature": 0.0, "avg_logprob": -0.19905675252278646, "compression_ratio": 1.296875, "no_speech_prob": 0.0016409294912591577}, {"id": 217, "seek": 151600, "start": 1523.0, "end": 1529.0, "text": " that connect the processes running in which fields cannot be like.", "tokens": [300, 1745, 264, 7555, 2614, 294, 597, 7909, 2644, 312, 411, 13], "temperature": 0.0, "avg_logprob": -0.19905675252278646, "compression_ratio": 1.296875, "no_speech_prob": 0.0016409294912591577}, {"id": 218, "seek": 151600, "start": 1529.0, "end": 1531.0, "text": " That's all the time we have.", "tokens": [663, 311, 439, 264, 565, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.19905675252278646, "compression_ratio": 1.296875, "no_speech_prob": 0.0016409294912591577}, {"id": 219, "seek": 153100, "start": 1531.0, "end": 1547.0, "text": " Thank you, Denzo.", "tokens": [50364, 1044, 291, 11, 6458, 4765, 13, 51164], "temperature": 0.0, "avg_logprob": -0.4418288336859809, "compression_ratio": 0.68, "no_speech_prob": 0.002740146592259407}], "language": "en"}