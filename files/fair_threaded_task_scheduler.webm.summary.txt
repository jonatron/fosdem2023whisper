The talk is about a task scheduling algorithm that was developed for a game development company called Ubisoft. The algorithm was designed to handle the execution of code tasks efficiently, such as callbacks in a thread pool or timers in an event loop. The problem with the previous task scheduler used by the company was that it was unfair, meaning that tasks were pinned to specific threads, resulting in unbalanced CPU usage. Additionally, the previous scheduler used polling, which led to higher latency and unnecessary CPU usage. The new task scheduler addressed these problems by using a multi-threaded approach with routines, allowing tasks to yield their time to other tasks and eliminate polling. The talk also mentioned that the task scheduler was implemented using C++, but could potentially be implemented in other programming languages. The speaker also discussed the use of TLA+ for verifying the correctness of the algorithm and presented some benchmark results showing significant performance improvements compared to a naive implementation using mutexes. The talk concluded by mentioning future plans for the task scheduler, such as porting it to other languages and optimizing certain aspects of the algorithm.