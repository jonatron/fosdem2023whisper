{"text": " Hello everyone, today I'm happy to join Confidential Computing Dev Room to share the information rust-based shim firmware for Confidential Container. I'm Jay Wen-Yao, Principal Engineering Intel. I have been engaged as a firmware developer for about 20 years working on UEFI, TCG, DMTF, Industrial Standard Working Group. I'm an architect for the TDX virtual firmware. Here is today's agenda. First, I will show you some background of the firmware while we need the shim firmware and the TDShim internals. Today, the industry is adding hardware-based Confidential Computing support, for example AMD, SCV, or Intel TDX. This figure demonstrated the concept of the Confidential Computing. The hypervisor VMM is on the bottom. On the left-hand side, the red box shows the legacy VMs. This is a traditional VM hypervisor environment. The hypervisor has the highest privilege it can access or modify the VM environment. On the right-hand side, the green box is a Confidential Computing environment. We call it TE, Trusted Exclusion Environment. Like a virtual machine, it includes the virtual firmware, guest OS, and user APP. The VMM on the bottom is untrusted. With the help of hardware SOC such as TDX or SCV, the TE is isolated from the VMM and other TEs. Inside the TE, the memory and CPU state confidentiality and integrity is provided to keep the sensitive IP or workload data secure from the most hardware-based tech. Since the VMM is still the owner of the whole system resource, such as memory and CPU, also the VMM manages the TE launch and teardown, so the denial of service tech is out of scope. In a traditional VM hypervisor environment, we need a virtual firmware to provide the services to the guest OS. For example, the EDK2 OVMF, Open Virtual Machine Firmware, provides the UEFI services in the virtual firmware. This is also true for the TE environment. For example, we need to modify the OVMF to add the TE support. The TE virtual firmware owns its first instruction of a TE, which is a reset vector at all OS. Similar to the traditional virtual firmware, the TE virtual firmware loads the guest OS loader and jump to the OS loader. The TE virtual firmware enables the trusted boot capability to build a chain of trust from the hardware to the TE OS. Here we list the existing virtual firmware solution as an example. The CBIOS is a legacy 16-bit BIOS solution. It is used to boot legacy guest OS, such as Windows XP or non-UEFI Linux. Currently, the most widely used UEFI solution is OVMF, the Open Virtual Machine Firmware. Then NKVM are using OVMF to boot the guest UEFI OS UEFI Linux. The cloud hypervisor firmware is used by the cloud hypervisor as a lightweight solution. This does not have UEFI services. The TE hardware solution may have special requirements for the TE virtual firmware. Take TDX as an example, the entry point must be 32-bit. It needs a special multiple processor wake-up structure for the guest OS. The TE needs explicit accept the assigned memory before use it. The DMA for the virtual device is a shared private memory attribute switch. The TE virtual firmware must support the measurement extension to the next component to build the chain of trust for the TE. To meet those special requirements, the UEFI solution OVMF needs added TDX support and ACV support. We call TDVF, which stands for the TDX virtual firmware. The TDXM is the guest firmware solution for replace the cloud hypervisor firmware to support the confidential container use case. TDXM is a lightweight virtual firmware for confidential container environment. It's written in Rust program language, currently it's supporting the TDX, it's located in the confidential container community toward development work is open sourced. We have three release tag now. The responsibility of the TDXM is to own the first instruction or reserve actor of a TD. It provides the required boot information such as memory map, virtual CPU information to the next phase, which we call the payload. The payload could be the OS kernel or a biometric execution environment for the service TD. The TDXM need to build the chain of trust from the inter-TDX module to the payload. Here is the boot flow comparison between the TDXM and the TDVF. The right hand side is a TDVF based solution. The VMM passes TDHOP to the TDVF as input parameter, it's input memory information. The TDVF build the UEFI memory map, create the UEFI services and ACPR tables, then load and launch the UEFI OS loader and the UEFI OS. The left hand side is the TDXM, VMM pass the TDHOP to the TDXM same as the TDVF. The TDXM build the E820 memory map and create the static ACPR table, then load and jump to the Linux guest kernel directly. The OS loader in the middle can be skipped. Here is the comparison between TDXM and the TDVF features. From a use case perspective, TDVF is for the confidential VM or the rich service TD environment. The TDXM can be used for the confidential container and the parameter of small service TD. The TDVF is written in C while the TDXM is written in Rust without STD support. The TDXM does not provide any UEFI services, OS runtime or device drivers, which is different from TDVF. In order to support multiple processors, the TDXM still provides the static ACPR table, such as MADT and PUICUP structure, which is same as TDVF. The virtual device RQ information is in DSDT in the TDVF case, but DSDT is not required in the TDXM use case. As such, the virtual RQ information can be passed as part of boot parameter in the TDXM. For memory map, the TDXM uses E820 table to provide the TE memory map information, while the TDVF uses EFI memory map. The trusted boot support is same between TDXM and TDVF. Both solutions need to extend the next component to the RTMR and build the event log for the measurement. Secure Boot is also supported in both TDXM and TDVF. The difference is that TDVF uses standard UEFI secure boot, while the TDXM uses customized secure boot solution. We will introduce that later. The size of the image is different. By default, the TDVF OVM map is 4 MB, it keeps increasing recently. But the TDXM without secure boot only has 140 kb, even with secure boot is only 270 kb. That's why we call it as a SHIM firmware. Now we can introduce more TDXM internal information. In TDXM project, we define the TDXM specification to standardize the interface between VMM and the TDXM, and the interface between TDXM and the payload. The TDXM itself includes the reset vector. The reset vector is written in a symbolic language. The code runs by the bootstrap processor BSP, whose virtual CPU index is always zero. The BSP will park other application processor APs and switch to X64 long mode, set stack for the Rust code, then jump to the SHIM main function. The SHIM main function is written in the Rust language. This will pass the TDHUB input from the VMM. It measures the TDHUB, gets the memory mapping information, and builds the 820 table. Then it accepts the memory and loads the payload and jumps to the payload. People may use different payloads in a different use case. For example, in a normal confidential container use case, the TDSHIM can boot a Linux kernel directly based upon the Linux boot protocol. Service TD use case, the TDSHIM can boot the migration TD core to make it for migration TD. The migration TD is a service TD used in TDX 1.5 to support the guest OS live migration. Now we will introduce two important features in the TDSHIM, trust boot and secure boot. They are all documented in the TDSHIM specifications. First, let's take a look at trust boot. In the trust boot flow, one component must measure the next level component before transfer control to it. Later, a remote verifier can get the measurement data with digital signature signed by the trusted entity, and verify the TD environment launch as expected. This flow is called remote agitation. The TDSHIM supports the boot flow by extending the measurement to the TD runtime measurement register. The TD measured component includes the TDHUB, payload, and the boot parameter, etc. At the same time, TDSHIM provides a confidential computing event log called CCEL to the verifier. The event log may be used to reproduce the digest value recorded in RTMR. As such, the verifier can check each individual component described in the event log. The final attestation can be based on the hash of the measurement register or the hash of the event log. The TDX architecture provides one MRED and four RTMR measurement registers to map the TPM PCR-based measurement. MRTD1 maps the PCR0 as a firmware boot code, which is the TDSHIM itself. The RTMR0 maps the PCR1 and the PCR7 as a firmware configuration, such as TDHUB for the VMM or secured policy. RTMR1 maps the PCR2 to PCR6 as the OS or payload information. The RTMR2 will map the PCR8 to 15 as application information. From the transfer boot, the secure boot requires one component to verify the digital signature of the next-level component before transfer control to it. In order to support such verification, the TDSHIM needs to provision a non-good public key and the minimum secure version number, called SVM. The payload itself should include the image, digital signature, as well as the SVM value. The secure boot in a TDSHIM includes two step verification. In step one, the TDSHIM needs to verify its public key matches the public key hash in the TDSHIM image, then the TDSHIM needs to verify the digital signature of the payload according to the public key. The digital signature needs to cover both the payload image and the SVM value to prevent the SVM modification. In step two, the TDSHIM needs to verify the SVM in the payload to ensure it's equal to or bigger than the minimum SVM provision in the TDSHIM image. That is to prevent the payload-rollback attack. If the secure boot with SVM is enabled, the payload-remote attack station can be used in different verification policy. The verification can be based on the SVM on the image, not the image hash. This can be achieved without secure boot because there's no other secure way to allow the payload to pass the SVM information to the TDSHIM. With secure boot, the SVM value can be tampered by the adversary without being noticed. The measurement with secure boot is almost the same as the one without secure boot. The only difference is that the SVM value of the payload is extended to the RTMR1 as a specific entry. As such, the verifier can check the specific SVM entry in the event log. The policy could be, I require the TD payload bigger than SVM4. It could be any SVM with SVM5, SVM6, etc. To follow the secure best practice, the TDSHIM enables the protection such as data execution protection. It marks the code page to be read only and the data page to be non-skewable. It's useful to break the exploitation, even if the environment is compromised as such as buffer overflow or stack overflow, the attacker cannot inject the code. We're also trying to enable the control flow guard, CET, such as shadow stack and indirect branch tracking. That is still working on progress, and that work depends on the rest compiler. TDSHIM project provides a set of tools. For example, the TE InfoHash tool allows you to calculate the MRTD-based TE InfoHash value. As such, you can predict the value in the TD report. Payload reference calculator can be used to calculate the TD payload reference value by a big image, a busy image, and a kernel parameter. The metadata checker tool accepts the TDSHIM files as an input, and extracts the TDX metadata and verifies if the metadata is valid, then dumps them with metadata. Finally, we enable the set of tests for the TDSHIM project, for example, the fuzzing test with AFL fuzz and the cargo fuzz, which are two popular ones in the rust fuzzing. We enable the cargo clipy, and it runs the Rudra, Christie, MR, AI static analysis tools, and fix the reported issues there. Unfortunately, we notice that some tools cannot work with the latest rust compiler, such as Rudra. Argo Deny is integrated in CI to ensure that the great TDSHIM rely on does not have any known secure vulnerabilities. Beyond that, we also run the unit test and collect the coverage as well to ensure the quality of the project. Based on that, that's all for the TDSHIM introduction, and thank you for your attention. Please let me know if there is any question or that. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.52, "text": " Hello everyone, today I'm happy to join Confidential Computing Dev Room to share the information", "tokens": [50364, 2425, 1518, 11, 965, 286, 478, 2055, 281, 3917, 11701, 1078, 831, 37804, 278, 9096, 19190, 281, 2073, 264, 1589, 50940], "temperature": 0.0, "avg_logprob": -0.415164992388557, "compression_ratio": 1.4394618834080717, "no_speech_prob": 0.05134699121117592}, {"id": 1, "seek": 0, "start": 11.52, "end": 16.4, "text": " rust-based shim firmware for Confidential Container.", "tokens": [50940, 15259, 12, 6032, 402, 332, 30289, 337, 11701, 1078, 831, 43732, 260, 13, 51184], "temperature": 0.0, "avg_logprob": -0.415164992388557, "compression_ratio": 1.4394618834080717, "no_speech_prob": 0.05134699121117592}, {"id": 2, "seek": 0, "start": 16.4, "end": 19.36, "text": " I'm Jay Wen-Yao, Principal Engineering Intel.", "tokens": [51184, 286, 478, 11146, 23716, 12, 56, 25548, 11, 38575, 16215, 19762, 13, 51332], "temperature": 0.0, "avg_logprob": -0.415164992388557, "compression_ratio": 1.4394618834080717, "no_speech_prob": 0.05134699121117592}, {"id": 3, "seek": 0, "start": 19.36, "end": 26.68, "text": " I have been engaged as a firmware developer for about 20 years working on UEFI, TCG, DMTF,", "tokens": [51332, 286, 362, 668, 8237, 382, 257, 30289, 10754, 337, 466, 945, 924, 1364, 322, 42260, 38568, 11, 34150, 38, 11, 15322, 20527, 11, 51698], "temperature": 0.0, "avg_logprob": -0.415164992388557, "compression_ratio": 1.4394618834080717, "no_speech_prob": 0.05134699121117592}, {"id": 4, "seek": 0, "start": 26.68, "end": 28.88, "text": " Industrial Standard Working Group.", "tokens": [51698, 32059, 21298, 18337, 10500, 13, 51808], "temperature": 0.0, "avg_logprob": -0.415164992388557, "compression_ratio": 1.4394618834080717, "no_speech_prob": 0.05134699121117592}, {"id": 5, "seek": 2888, "start": 28.88, "end": 33.76, "text": " I'm an architect for the TDX virtual firmware.", "tokens": [50364, 286, 478, 364, 6331, 337, 264, 42606, 55, 6374, 30289, 13, 50608], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 6, "seek": 2888, "start": 33.76, "end": 35.16, "text": " Here is today's agenda.", "tokens": [50608, 1692, 307, 965, 311, 9829, 13, 50678], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 7, "seek": 2888, "start": 35.16, "end": 40.48, "text": " First, I will show you some background of the firmware while we need the shim firmware", "tokens": [50678, 2386, 11, 286, 486, 855, 291, 512, 3678, 295, 264, 30289, 1339, 321, 643, 264, 402, 332, 30289, 50944], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 8, "seek": 2888, "start": 40.48, "end": 44.56, "text": " and the TDShim internals.", "tokens": [50944, 293, 264, 42606, 7774, 332, 2154, 1124, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 9, "seek": 2888, "start": 44.56, "end": 50.0, "text": " Today, the industry is adding hardware-based Confidential Computing support, for example", "tokens": [51148, 2692, 11, 264, 3518, 307, 5127, 8837, 12, 6032, 11701, 1078, 831, 37804, 278, 1406, 11, 337, 1365, 51420], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 10, "seek": 2888, "start": 50.0, "end": 53.28, "text": " AMD, SCV, or Intel TDX.", "tokens": [51420, 34808, 11, 9028, 53, 11, 420, 19762, 42606, 55, 13, 51584], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 11, "seek": 2888, "start": 53.28, "end": 57.84, "text": " This figure demonstrated the concept of the Confidential Computing.", "tokens": [51584, 639, 2573, 18772, 264, 3410, 295, 264, 11701, 1078, 831, 37804, 278, 13, 51812], "temperature": 0.0, "avg_logprob": -0.2829862976074219, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.0004424883518368006}, {"id": 12, "seek": 5784, "start": 57.84, "end": 61.160000000000004, "text": " The hypervisor VMM is on the bottom.", "tokens": [50364, 440, 9848, 16457, 691, 17365, 307, 322, 264, 2767, 13, 50530], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 13, "seek": 5784, "start": 61.160000000000004, "end": 66.16, "text": " On the left-hand side, the red box shows the legacy VMs.", "tokens": [50530, 1282, 264, 1411, 12, 5543, 1252, 11, 264, 2182, 2424, 3110, 264, 11711, 18038, 82, 13, 50780], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 14, "seek": 5784, "start": 66.16, "end": 70.08, "text": " This is a traditional VM hypervisor environment.", "tokens": [50780, 639, 307, 257, 5164, 18038, 9848, 16457, 2823, 13, 50976], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 15, "seek": 5784, "start": 70.08, "end": 77.32000000000001, "text": " The hypervisor has the highest privilege it can access or modify the VM environment.", "tokens": [50976, 440, 9848, 16457, 575, 264, 6343, 12122, 309, 393, 2105, 420, 16927, 264, 18038, 2823, 13, 51338], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 16, "seek": 5784, "start": 77.32000000000001, "end": 81.84, "text": " On the right-hand side, the green box is a Confidential Computing environment.", "tokens": [51338, 1282, 264, 558, 12, 5543, 1252, 11, 264, 3092, 2424, 307, 257, 11701, 1078, 831, 37804, 278, 2823, 13, 51564], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 17, "seek": 5784, "start": 81.84, "end": 86.0, "text": " We call it TE, Trusted Exclusion Environment.", "tokens": [51564, 492, 818, 309, 19744, 11, 1765, 6589, 9368, 6485, 35354, 13, 51772], "temperature": 0.0, "avg_logprob": -0.21463289762798107, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0006867155898362398}, {"id": 18, "seek": 8600, "start": 86.0, "end": 91.92, "text": " Like a virtual machine, it includes the virtual firmware, guest OS, and user APP.", "tokens": [50364, 1743, 257, 6374, 3479, 11, 309, 5974, 264, 6374, 30289, 11, 8341, 12731, 11, 293, 4195, 22513, 13, 50660], "temperature": 0.0, "avg_logprob": -0.21136227521029385, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.012221995741128922}, {"id": 19, "seek": 8600, "start": 91.92, "end": 95.32, "text": " The VMM on the bottom is untrusted.", "tokens": [50660, 440, 691, 17365, 322, 264, 2767, 307, 1701, 81, 6589, 13, 50830], "temperature": 0.0, "avg_logprob": -0.21136227521029385, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.012221995741128922}, {"id": 20, "seek": 8600, "start": 95.32, "end": 103.6, "text": " With the help of hardware SOC such as TDX or SCV, the TE is isolated from the VMM and", "tokens": [50830, 2022, 264, 854, 295, 8837, 10621, 34, 1270, 382, 42606, 55, 420, 9028, 53, 11, 264, 19744, 307, 14621, 490, 264, 691, 17365, 293, 51244], "temperature": 0.0, "avg_logprob": -0.21136227521029385, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.012221995741128922}, {"id": 21, "seek": 8600, "start": 103.6, "end": 105.6, "text": " other TEs.", "tokens": [51244, 661, 19744, 82, 13, 51344], "temperature": 0.0, "avg_logprob": -0.21136227521029385, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.012221995741128922}, {"id": 22, "seek": 8600, "start": 105.6, "end": 113.76, "text": " Inside the TE, the memory and CPU state confidentiality and integrity is provided to keep the sensitive", "tokens": [51344, 15123, 264, 19744, 11, 264, 4675, 293, 13199, 1785, 27054, 507, 293, 16000, 307, 5649, 281, 1066, 264, 9477, 51752], "temperature": 0.0, "avg_logprob": -0.21136227521029385, "compression_ratio": 1.485981308411215, "no_speech_prob": 0.012221995741128922}, {"id": 23, "seek": 11376, "start": 113.76, "end": 119.76, "text": " IP or workload data secure from the most hardware-based tech.", "tokens": [50364, 8671, 420, 20139, 1412, 7144, 490, 264, 881, 8837, 12, 6032, 7553, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21434088067694024, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0016994347097352147}, {"id": 24, "seek": 11376, "start": 119.76, "end": 127.48, "text": " Since the VMM is still the owner of the whole system resource, such as memory and CPU, also", "tokens": [50664, 4162, 264, 691, 17365, 307, 920, 264, 7289, 295, 264, 1379, 1185, 7684, 11, 1270, 382, 4675, 293, 13199, 11, 611, 51050], "temperature": 0.0, "avg_logprob": -0.21434088067694024, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0016994347097352147}, {"id": 25, "seek": 11376, "start": 127.48, "end": 135.12, "text": " the VMM manages the TE launch and teardown, so the denial of service tech is out of scope.", "tokens": [51050, 264, 691, 17365, 22489, 264, 19744, 4025, 293, 535, 515, 648, 11, 370, 264, 28754, 295, 2643, 7553, 307, 484, 295, 11923, 13, 51432], "temperature": 0.0, "avg_logprob": -0.21434088067694024, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0016994347097352147}, {"id": 26, "seek": 11376, "start": 135.12, "end": 140.08, "text": " In a traditional VM hypervisor environment, we need a virtual firmware to provide the", "tokens": [51432, 682, 257, 5164, 18038, 9848, 16457, 2823, 11, 321, 643, 257, 6374, 30289, 281, 2893, 264, 51680], "temperature": 0.0, "avg_logprob": -0.21434088067694024, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0016994347097352147}, {"id": 27, "seek": 11376, "start": 140.08, "end": 142.76, "text": " services to the guest OS.", "tokens": [51680, 3328, 281, 264, 8341, 12731, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21434088067694024, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.0016994347097352147}, {"id": 28, "seek": 14276, "start": 142.76, "end": 150.0, "text": " For example, the EDK2 OVMF, Open Virtual Machine Firmware, provides the UEFI services in the", "tokens": [50364, 1171, 1365, 11, 264, 18050, 42, 17, 422, 53, 44, 37, 11, 7238, 23887, 22155, 479, 3692, 3039, 11, 6417, 264, 42260, 38568, 3328, 294, 264, 50726], "temperature": 0.0, "avg_logprob": -0.2502909885363632, "compression_ratio": 1.55, "no_speech_prob": 0.0037011592648923397}, {"id": 29, "seek": 14276, "start": 150.0, "end": 151.67999999999998, "text": " virtual firmware.", "tokens": [50726, 6374, 30289, 13, 50810], "temperature": 0.0, "avg_logprob": -0.2502909885363632, "compression_ratio": 1.55, "no_speech_prob": 0.0037011592648923397}, {"id": 30, "seek": 14276, "start": 151.67999999999998, "end": 154.95999999999998, "text": " This is also true for the TE environment.", "tokens": [50810, 639, 307, 611, 2074, 337, 264, 19744, 2823, 13, 50974], "temperature": 0.0, "avg_logprob": -0.2502909885363632, "compression_ratio": 1.55, "no_speech_prob": 0.0037011592648923397}, {"id": 31, "seek": 14276, "start": 154.95999999999998, "end": 159.84, "text": " For example, we need to modify the OVMF to add the TE support.", "tokens": [50974, 1171, 1365, 11, 321, 643, 281, 16927, 264, 422, 53, 44, 37, 281, 909, 264, 19744, 1406, 13, 51218], "temperature": 0.0, "avg_logprob": -0.2502909885363632, "compression_ratio": 1.55, "no_speech_prob": 0.0037011592648923397}, {"id": 32, "seek": 14276, "start": 159.84, "end": 167.16, "text": " The TE virtual firmware owns its first instruction of a TE, which is a reset vector at all OS.", "tokens": [51218, 440, 19744, 6374, 30289, 19143, 1080, 700, 10951, 295, 257, 19744, 11, 597, 307, 257, 14322, 8062, 412, 439, 12731, 13, 51584], "temperature": 0.0, "avg_logprob": -0.2502909885363632, "compression_ratio": 1.55, "no_speech_prob": 0.0037011592648923397}, {"id": 33, "seek": 16716, "start": 167.16, "end": 173.32, "text": " Similar to the traditional virtual firmware, the TE virtual firmware loads the guest OS", "tokens": [50364, 10905, 281, 264, 5164, 6374, 30289, 11, 264, 19744, 6374, 30289, 12668, 264, 8341, 12731, 50672], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 34, "seek": 16716, "start": 173.32, "end": 175.92, "text": " loader and jump to the OS loader.", "tokens": [50672, 3677, 260, 293, 3012, 281, 264, 12731, 3677, 260, 13, 50802], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 35, "seek": 16716, "start": 175.92, "end": 181.56, "text": " The TE virtual firmware enables the trusted boot capability to build a chain of trust", "tokens": [50802, 440, 19744, 6374, 30289, 17077, 264, 16034, 11450, 13759, 281, 1322, 257, 5021, 295, 3361, 51084], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 36, "seek": 16716, "start": 181.56, "end": 187.88, "text": " from the hardware to the TE OS.", "tokens": [51084, 490, 264, 8837, 281, 264, 19744, 12731, 13, 51400], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 37, "seek": 16716, "start": 187.88, "end": 192.68, "text": " Here we list the existing virtual firmware solution as an example.", "tokens": [51400, 1692, 321, 1329, 264, 6741, 6374, 30289, 3827, 382, 364, 1365, 13, 51640], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 38, "seek": 16716, "start": 192.68, "end": 196.35999999999999, "text": " The CBIOS is a legacy 16-bit BIOS solution.", "tokens": [51640, 440, 383, 11291, 4367, 307, 257, 11711, 3165, 12, 5260, 23524, 4367, 3827, 13, 51824], "temperature": 0.0, "avg_logprob": -0.19437792084433816, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0019858786836266518}, {"id": 39, "seek": 19636, "start": 196.36, "end": 203.12, "text": " It is used to boot legacy guest OS, such as Windows XP or non-UEFI Linux.", "tokens": [50364, 467, 307, 1143, 281, 11450, 11711, 8341, 12731, 11, 1270, 382, 8591, 33984, 420, 2107, 12, 16309, 38568, 18734, 13, 50702], "temperature": 0.0, "avg_logprob": -0.18874402668165124, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.0008158928831107914}, {"id": 40, "seek": 19636, "start": 203.12, "end": 210.32000000000002, "text": " Currently, the most widely used UEFI solution is OVMF, the Open Virtual Machine Firmware.", "tokens": [50702, 19964, 11, 264, 881, 13371, 1143, 42260, 38568, 3827, 307, 422, 53, 44, 37, 11, 264, 7238, 23887, 22155, 479, 3692, 3039, 13, 51062], "temperature": 0.0, "avg_logprob": -0.18874402668165124, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.0008158928831107914}, {"id": 41, "seek": 19636, "start": 210.32000000000002, "end": 217.4, "text": " Then NKVM are using OVMF to boot the guest UEFI OS UEFI Linux.", "tokens": [51062, 1396, 426, 42, 53, 44, 366, 1228, 422, 53, 44, 37, 281, 11450, 264, 8341, 42260, 38568, 12731, 42260, 38568, 18734, 13, 51416], "temperature": 0.0, "avg_logprob": -0.18874402668165124, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.0008158928831107914}, {"id": 42, "seek": 19636, "start": 217.4, "end": 223.44000000000003, "text": " The cloud hypervisor firmware is used by the cloud hypervisor as a lightweight solution.", "tokens": [51416, 440, 4588, 9848, 16457, 30289, 307, 1143, 538, 264, 4588, 9848, 16457, 382, 257, 22052, 3827, 13, 51718], "temperature": 0.0, "avg_logprob": -0.18874402668165124, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.0008158928831107914}, {"id": 43, "seek": 22344, "start": 223.44, "end": 227.04, "text": " This does not have UEFI services.", "tokens": [50364, 639, 775, 406, 362, 42260, 38568, 3328, 13, 50544], "temperature": 0.0, "avg_logprob": -0.25966842453201094, "compression_ratio": 1.4880382775119618, "no_speech_prob": 0.0028843421023339033}, {"id": 44, "seek": 22344, "start": 227.04, "end": 233.16, "text": " The TE hardware solution may have special requirements for the TE virtual firmware.", "tokens": [50544, 440, 19744, 8837, 3827, 815, 362, 2121, 7728, 337, 264, 19744, 6374, 30289, 13, 50850], "temperature": 0.0, "avg_logprob": -0.25966842453201094, "compression_ratio": 1.4880382775119618, "no_speech_prob": 0.0028843421023339033}, {"id": 45, "seek": 22344, "start": 233.16, "end": 238.2, "text": " Take TDX as an example, the entry point must be 32-bit.", "tokens": [50850, 3664, 42606, 55, 382, 364, 1365, 11, 264, 8729, 935, 1633, 312, 8858, 12, 5260, 13, 51102], "temperature": 0.0, "avg_logprob": -0.25966842453201094, "compression_ratio": 1.4880382775119618, "no_speech_prob": 0.0028843421023339033}, {"id": 46, "seek": 22344, "start": 238.2, "end": 243.16, "text": " It needs a special multiple processor wake-up structure for the guest OS.", "tokens": [51102, 467, 2203, 257, 2121, 3866, 15321, 6634, 12, 1010, 3877, 337, 264, 8341, 12731, 13, 51350], "temperature": 0.0, "avg_logprob": -0.25966842453201094, "compression_ratio": 1.4880382775119618, "no_speech_prob": 0.0028843421023339033}, {"id": 47, "seek": 22344, "start": 243.16, "end": 248.16, "text": " The TE needs explicit accept the assigned memory before use it.", "tokens": [51350, 440, 19744, 2203, 13691, 3241, 264, 13279, 4675, 949, 764, 309, 13, 51600], "temperature": 0.0, "avg_logprob": -0.25966842453201094, "compression_ratio": 1.4880382775119618, "no_speech_prob": 0.0028843421023339033}, {"id": 48, "seek": 24816, "start": 248.16, "end": 253.6, "text": " The DMA for the virtual device is a shared private memory attribute switch.", "tokens": [50364, 440, 413, 9998, 337, 264, 6374, 4302, 307, 257, 5507, 4551, 4675, 19667, 3679, 13, 50636], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 49, "seek": 24816, "start": 253.6, "end": 259.71999999999997, "text": " The TE virtual firmware must support the measurement extension to the next component to build the", "tokens": [50636, 440, 19744, 6374, 30289, 1633, 1406, 264, 13160, 10320, 281, 264, 958, 6542, 281, 1322, 264, 50942], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 50, "seek": 24816, "start": 259.71999999999997, "end": 262.71999999999997, "text": " chain of trust for the TE.", "tokens": [50942, 5021, 295, 3361, 337, 264, 19744, 13, 51092], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 51, "seek": 24816, "start": 262.71999999999997, "end": 269.8, "text": " To meet those special requirements, the UEFI solution OVMF needs added TDX support and", "tokens": [51092, 1407, 1677, 729, 2121, 7728, 11, 264, 42260, 38568, 3827, 422, 53, 44, 37, 2203, 3869, 42606, 55, 1406, 293, 51446], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 52, "seek": 24816, "start": 269.8, "end": 270.8, "text": " ACV support.", "tokens": [51446, 8157, 53, 1406, 13, 51496], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 53, "seek": 24816, "start": 270.8, "end": 277.36, "text": " We call TDVF, which stands for the TDX virtual firmware.", "tokens": [51496, 492, 818, 42606, 53, 37, 11, 597, 7382, 337, 264, 42606, 55, 6374, 30289, 13, 51824], "temperature": 0.0, "avg_logprob": -0.23200756114917798, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.014696123078465462}, {"id": 54, "seek": 27736, "start": 277.36, "end": 284.2, "text": " The TDXM is the guest firmware solution for replace the cloud hypervisor firmware to support", "tokens": [50364, 440, 42606, 55, 44, 307, 264, 8341, 30289, 3827, 337, 7406, 264, 4588, 9848, 16457, 30289, 281, 1406, 50706], "temperature": 0.0, "avg_logprob": -0.37936123679665956, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.002079225843772292}, {"id": 55, "seek": 27736, "start": 284.2, "end": 288.44, "text": " the confidential container use case.", "tokens": [50706, 264, 27054, 10129, 764, 1389, 13, 50918], "temperature": 0.0, "avg_logprob": -0.37936123679665956, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.002079225843772292}, {"id": 56, "seek": 27736, "start": 288.44, "end": 295.44, "text": " TDXM is a lightweight virtual firmware for confidential container environment.", "tokens": [50918, 42606, 55, 44, 307, 257, 22052, 6374, 30289, 337, 27054, 10129, 2823, 13, 51268], "temperature": 0.0, "avg_logprob": -0.37936123679665956, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.002079225843772292}, {"id": 57, "seek": 27736, "start": 295.44, "end": 301.68, "text": " It's written in Rust program language, currently it's supporting the TDX, it's located in the", "tokens": [51268, 467, 311, 3720, 294, 34952, 1461, 2856, 11, 4362, 309, 311, 7231, 264, 42606, 55, 11, 309, 311, 6870, 294, 264, 51580], "temperature": 0.0, "avg_logprob": -0.37936123679665956, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.002079225843772292}, {"id": 58, "seek": 30168, "start": 301.68, "end": 307.96, "text": " confidential container community toward development work is open sourced.", "tokens": [50364, 27054, 10129, 1768, 7361, 3250, 589, 307, 1269, 11006, 1232, 13, 50678], "temperature": 0.0, "avg_logprob": -0.2536624908447266, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.008053109981119633}, {"id": 59, "seek": 30168, "start": 307.96, "end": 311.08, "text": " We have three release tag now.", "tokens": [50678, 492, 362, 1045, 4374, 6162, 586, 13, 50834], "temperature": 0.0, "avg_logprob": -0.2536624908447266, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.008053109981119633}, {"id": 60, "seek": 30168, "start": 311.08, "end": 317.56, "text": " The responsibility of the TDXM is to own the first instruction or reserve actor of a TD.", "tokens": [50834, 440, 6357, 295, 264, 42606, 55, 44, 307, 281, 1065, 264, 700, 10951, 420, 17824, 8747, 295, 257, 42606, 13, 51158], "temperature": 0.0, "avg_logprob": -0.2536624908447266, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.008053109981119633}, {"id": 61, "seek": 30168, "start": 317.56, "end": 323.36, "text": " It provides the required boot information such as memory map, virtual CPU information", "tokens": [51158, 467, 6417, 264, 4739, 11450, 1589, 1270, 382, 4675, 4471, 11, 6374, 13199, 1589, 51448], "temperature": 0.0, "avg_logprob": -0.2536624908447266, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.008053109981119633}, {"id": 62, "seek": 30168, "start": 323.36, "end": 326.68, "text": " to the next phase, which we call the payload.", "tokens": [51448, 281, 264, 958, 5574, 11, 597, 321, 818, 264, 30918, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2536624908447266, "compression_ratio": 1.4840182648401827, "no_speech_prob": 0.008053109981119633}, {"id": 63, "seek": 32668, "start": 326.68, "end": 333.56, "text": " The payload could be the OS kernel or a biometric execution environment for the service TD.", "tokens": [50364, 440, 30918, 727, 312, 264, 12731, 28256, 420, 257, 3228, 29470, 15058, 2823, 337, 264, 2643, 42606, 13, 50708], "temperature": 0.0, "avg_logprob": -0.26429047584533694, "compression_ratio": 1.5, "no_speech_prob": 0.002215161919593811}, {"id": 64, "seek": 32668, "start": 333.56, "end": 342.08, "text": " The TDXM need to build the chain of trust from the inter-TDX module to the payload.", "tokens": [50708, 440, 42606, 55, 44, 643, 281, 1322, 264, 5021, 295, 3361, 490, 264, 728, 12, 51, 35, 55, 10088, 281, 264, 30918, 13, 51134], "temperature": 0.0, "avg_logprob": -0.26429047584533694, "compression_ratio": 1.5, "no_speech_prob": 0.002215161919593811}, {"id": 65, "seek": 32668, "start": 342.08, "end": 346.48, "text": " Here is the boot flow comparison between the TDXM and the TDVF.", "tokens": [51134, 1692, 307, 264, 11450, 3095, 9660, 1296, 264, 42606, 55, 44, 293, 264, 42606, 53, 37, 13, 51354], "temperature": 0.0, "avg_logprob": -0.26429047584533694, "compression_ratio": 1.5, "no_speech_prob": 0.002215161919593811}, {"id": 66, "seek": 32668, "start": 346.48, "end": 351.48, "text": " The right hand side is a TDVF based solution.", "tokens": [51354, 440, 558, 1011, 1252, 307, 257, 42606, 53, 37, 2361, 3827, 13, 51604], "temperature": 0.0, "avg_logprob": -0.26429047584533694, "compression_ratio": 1.5, "no_speech_prob": 0.002215161919593811}, {"id": 67, "seek": 35148, "start": 351.48, "end": 360.04, "text": " The VMM passes TDHOP to the TDVF as input parameter, it's input memory information.", "tokens": [50364, 440, 691, 17365, 11335, 42606, 39, 12059, 281, 264, 42606, 53, 37, 382, 4846, 13075, 11, 309, 311, 4846, 4675, 1589, 13, 50792], "temperature": 0.0, "avg_logprob": -0.21804959433419363, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0014546671882271767}, {"id": 68, "seek": 35148, "start": 360.04, "end": 367.36, "text": " The TDVF build the UEFI memory map, create the UEFI services and ACPR tables, then load", "tokens": [50792, 440, 42606, 53, 37, 1322, 264, 42260, 38568, 4675, 4471, 11, 1884, 264, 42260, 38568, 3328, 293, 8157, 15958, 8020, 11, 550, 3677, 51158], "temperature": 0.0, "avg_logprob": -0.21804959433419363, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0014546671882271767}, {"id": 69, "seek": 35148, "start": 367.36, "end": 373.36, "text": " and launch the UEFI OS loader and the UEFI OS.", "tokens": [51158, 293, 4025, 264, 42260, 38568, 12731, 3677, 260, 293, 264, 42260, 38568, 12731, 13, 51458], "temperature": 0.0, "avg_logprob": -0.21804959433419363, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0014546671882271767}, {"id": 70, "seek": 35148, "start": 373.36, "end": 380.88, "text": " The left hand side is the TDXM, VMM pass the TDHOP to the TDXM same as the TDVF.", "tokens": [51458, 440, 1411, 1011, 1252, 307, 264, 42606, 55, 44, 11, 691, 17365, 1320, 264, 42606, 39, 12059, 281, 264, 42606, 55, 44, 912, 382, 264, 42606, 53, 37, 13, 51834], "temperature": 0.0, "avg_logprob": -0.21804959433419363, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0014546671882271767}, {"id": 71, "seek": 38088, "start": 380.88, "end": 388.64, "text": " The TDXM build the E820 memory map and create the static ACPR table, then load and jump", "tokens": [50364, 440, 42606, 55, 44, 1322, 264, 462, 23, 2009, 4675, 4471, 293, 1884, 264, 13437, 8157, 15958, 3199, 11, 550, 3677, 293, 3012, 50752], "temperature": 0.0, "avg_logprob": -0.20660419678420164, "compression_ratio": 1.4484304932735426, "no_speech_prob": 0.0005790105205960572}, {"id": 72, "seek": 38088, "start": 388.64, "end": 391.64, "text": " to the Linux guest kernel directly.", "tokens": [50752, 281, 264, 18734, 8341, 28256, 3838, 13, 50902], "temperature": 0.0, "avg_logprob": -0.20660419678420164, "compression_ratio": 1.4484304932735426, "no_speech_prob": 0.0005790105205960572}, {"id": 73, "seek": 38088, "start": 391.64, "end": 397.2, "text": " The OS loader in the middle can be skipped.", "tokens": [50902, 440, 12731, 3677, 260, 294, 264, 2808, 393, 312, 30193, 13, 51180], "temperature": 0.0, "avg_logprob": -0.20660419678420164, "compression_ratio": 1.4484304932735426, "no_speech_prob": 0.0005790105205960572}, {"id": 74, "seek": 38088, "start": 397.2, "end": 401.4, "text": " Here is the comparison between TDXM and the TDVF features.", "tokens": [51180, 1692, 307, 264, 9660, 1296, 42606, 55, 44, 293, 264, 42606, 53, 37, 4122, 13, 51390], "temperature": 0.0, "avg_logprob": -0.20660419678420164, "compression_ratio": 1.4484304932735426, "no_speech_prob": 0.0005790105205960572}, {"id": 75, "seek": 38088, "start": 401.4, "end": 409.4, "text": " From a use case perspective, TDVF is for the confidential VM or the rich service TD environment.", "tokens": [51390, 3358, 257, 764, 1389, 4585, 11, 42606, 53, 37, 307, 337, 264, 27054, 18038, 420, 264, 4593, 2643, 42606, 2823, 13, 51790], "temperature": 0.0, "avg_logprob": -0.20660419678420164, "compression_ratio": 1.4484304932735426, "no_speech_prob": 0.0005790105205960572}, {"id": 76, "seek": 40940, "start": 409.4, "end": 414.56, "text": " The TDXM can be used for the confidential container and the parameter of small service", "tokens": [50364, 440, 42606, 55, 44, 393, 312, 1143, 337, 264, 27054, 10129, 293, 264, 13075, 295, 1359, 2643, 50622], "temperature": 0.0, "avg_logprob": -0.2116527557373047, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.005637728609144688}, {"id": 77, "seek": 40940, "start": 414.56, "end": 415.56, "text": " TD.", "tokens": [50622, 42606, 13, 50672], "temperature": 0.0, "avg_logprob": -0.2116527557373047, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.005637728609144688}, {"id": 78, "seek": 40940, "start": 415.56, "end": 426.03999999999996, "text": " The TDVF is written in C while the TDXM is written in Rust without STD support.", "tokens": [50672, 440, 42606, 53, 37, 307, 3720, 294, 383, 1339, 264, 42606, 55, 44, 307, 3720, 294, 34952, 1553, 4904, 35, 1406, 13, 51196], "temperature": 0.0, "avg_logprob": -0.2116527557373047, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.005637728609144688}, {"id": 79, "seek": 40940, "start": 426.03999999999996, "end": 433.0, "text": " The TDXM does not provide any UEFI services, OS runtime or device drivers, which is different", "tokens": [51196, 440, 42606, 55, 44, 775, 406, 2893, 604, 42260, 38568, 3328, 11, 12731, 34474, 420, 4302, 11590, 11, 597, 307, 819, 51544], "temperature": 0.0, "avg_logprob": -0.2116527557373047, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.005637728609144688}, {"id": 80, "seek": 40940, "start": 433.0, "end": 435.4, "text": " from TDVF.", "tokens": [51544, 490, 42606, 53, 37, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2116527557373047, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.005637728609144688}, {"id": 81, "seek": 43540, "start": 435.4, "end": 441.52, "text": " In order to support multiple processors, the TDXM still provides the static ACPR table,", "tokens": [50364, 682, 1668, 281, 1406, 3866, 27751, 11, 264, 42606, 55, 44, 920, 6417, 264, 13437, 8157, 15958, 3199, 11, 50670], "temperature": 0.0, "avg_logprob": -0.22029061965000482, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.003072411520406604}, {"id": 82, "seek": 43540, "start": 441.52, "end": 448.4, "text": " such as MADT and PUICUP structure, which is same as TDVF.", "tokens": [50670, 1270, 382, 376, 6112, 51, 293, 44098, 2532, 22917, 3877, 11, 597, 307, 912, 382, 42606, 53, 37, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22029061965000482, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.003072411520406604}, {"id": 83, "seek": 43540, "start": 448.4, "end": 456.84, "text": " The virtual device RQ information is in DSDT in the TDVF case, but DSDT is not required", "tokens": [51014, 440, 6374, 4302, 497, 48, 1589, 307, 294, 15816, 35, 51, 294, 264, 42606, 53, 37, 1389, 11, 457, 15816, 35, 51, 307, 406, 4739, 51436], "temperature": 0.0, "avg_logprob": -0.22029061965000482, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.003072411520406604}, {"id": 84, "seek": 43540, "start": 456.84, "end": 459.0, "text": " in the TDXM use case.", "tokens": [51436, 294, 264, 42606, 55, 44, 764, 1389, 13, 51544], "temperature": 0.0, "avg_logprob": -0.22029061965000482, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.003072411520406604}, {"id": 85, "seek": 45900, "start": 459.0, "end": 467.8, "text": " As such, the virtual RQ information can be passed as part of boot parameter in the TDXM.", "tokens": [50364, 1018, 1270, 11, 264, 6374, 497, 48, 1589, 393, 312, 4678, 382, 644, 295, 11450, 13075, 294, 264, 42606, 55, 44, 13, 50804], "temperature": 0.0, "avg_logprob": -0.19617905194246316, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0022508802358061075}, {"id": 86, "seek": 45900, "start": 467.8, "end": 475.4, "text": " For memory map, the TDXM uses E820 table to provide the TE memory map information, while", "tokens": [50804, 1171, 4675, 4471, 11, 264, 42606, 55, 44, 4960, 462, 23, 2009, 3199, 281, 2893, 264, 19744, 4675, 4471, 1589, 11, 1339, 51184], "temperature": 0.0, "avg_logprob": -0.19617905194246316, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0022508802358061075}, {"id": 87, "seek": 45900, "start": 475.4, "end": 479.64, "text": " the TDVF uses EFI memory map.", "tokens": [51184, 264, 42606, 53, 37, 4960, 462, 38568, 4675, 4471, 13, 51396], "temperature": 0.0, "avg_logprob": -0.19617905194246316, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0022508802358061075}, {"id": 88, "seek": 45900, "start": 479.64, "end": 484.68, "text": " The trusted boot support is same between TDXM and TDVF.", "tokens": [51396, 440, 16034, 11450, 1406, 307, 912, 1296, 42606, 55, 44, 293, 42606, 53, 37, 13, 51648], "temperature": 0.0, "avg_logprob": -0.19617905194246316, "compression_ratio": 1.5114942528735633, "no_speech_prob": 0.0022508802358061075}, {"id": 89, "seek": 48468, "start": 484.68, "end": 491.28000000000003, "text": " Both solutions need to extend the next component to the RTMR and build the event log for the", "tokens": [50364, 6767, 6547, 643, 281, 10101, 264, 958, 6542, 281, 264, 21797, 21173, 293, 1322, 264, 2280, 3565, 337, 264, 50694], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 90, "seek": 48468, "start": 491.28000000000003, "end": 493.28000000000003, "text": " measurement.", "tokens": [50694, 13160, 13, 50794], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 91, "seek": 48468, "start": 493.28000000000003, "end": 497.28000000000003, "text": " Secure Boot is also supported in both TDXM and TDVF.", "tokens": [50794, 3306, 540, 37263, 307, 611, 8104, 294, 1293, 42606, 55, 44, 293, 42606, 53, 37, 13, 50994], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 92, "seek": 48468, "start": 497.28000000000003, "end": 504.32, "text": " The difference is that TDVF uses standard UEFI secure boot, while the TDXM uses customized", "tokens": [50994, 440, 2649, 307, 300, 42606, 53, 37, 4960, 3832, 42260, 38568, 7144, 11450, 11, 1339, 264, 42606, 55, 44, 4960, 30581, 51346], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 93, "seek": 48468, "start": 504.32, "end": 506.08, "text": " secure boot solution.", "tokens": [51346, 7144, 11450, 3827, 13, 51434], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 94, "seek": 48468, "start": 506.08, "end": 509.08, "text": " We will introduce that later.", "tokens": [51434, 492, 486, 5366, 300, 1780, 13, 51584], "temperature": 0.0, "avg_logprob": -0.2648841578785966, "compression_ratio": 1.49009900990099, "no_speech_prob": 0.020625893026590347}, {"id": 95, "seek": 50908, "start": 509.08, "end": 511.35999999999996, "text": " The size of the image is different.", "tokens": [50364, 440, 2744, 295, 264, 3256, 307, 819, 13, 50478], "temperature": 0.0, "avg_logprob": -0.2664591041771141, "compression_ratio": 1.3163841807909604, "no_speech_prob": 0.02158777043223381}, {"id": 96, "seek": 50908, "start": 511.35999999999996, "end": 517.92, "text": " By default, the TDVF OVM map is 4 MB, it keeps increasing recently.", "tokens": [50478, 3146, 7576, 11, 264, 42606, 53, 37, 422, 53, 44, 4471, 307, 1017, 28866, 11, 309, 5965, 5662, 3938, 13, 50806], "temperature": 0.0, "avg_logprob": -0.2664591041771141, "compression_ratio": 1.3163841807909604, "no_speech_prob": 0.02158777043223381}, {"id": 97, "seek": 50908, "start": 517.92, "end": 529.1999999999999, "text": " But the TDXM without secure boot only has 140 kb, even with secure boot is only 270 kb.", "tokens": [50806, 583, 264, 42606, 55, 44, 1553, 7144, 11450, 787, 575, 21548, 350, 65, 11, 754, 365, 7144, 11450, 307, 787, 40774, 350, 65, 13, 51370], "temperature": 0.0, "avg_logprob": -0.2664591041771141, "compression_ratio": 1.3163841807909604, "no_speech_prob": 0.02158777043223381}, {"id": 98, "seek": 50908, "start": 529.1999999999999, "end": 535.3199999999999, "text": " That's why we call it as a SHIM firmware.", "tokens": [51370, 663, 311, 983, 321, 818, 309, 382, 257, 7405, 6324, 30289, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2664591041771141, "compression_ratio": 1.3163841807909604, "no_speech_prob": 0.02158777043223381}, {"id": 99, "seek": 53532, "start": 535.32, "end": 539.12, "text": " Now we can introduce more TDXM internal information.", "tokens": [50364, 823, 321, 393, 5366, 544, 42606, 55, 44, 6920, 1589, 13, 50554], "temperature": 0.0, "avg_logprob": -0.18778096893687307, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.050914328545331955}, {"id": 100, "seek": 53532, "start": 539.12, "end": 547.0, "text": " In TDXM project, we define the TDXM specification to standardize the interface between VMM and", "tokens": [50554, 682, 42606, 55, 44, 1716, 11, 321, 6964, 264, 42606, 55, 44, 31256, 281, 3832, 1125, 264, 9226, 1296, 691, 17365, 293, 50948], "temperature": 0.0, "avg_logprob": -0.18778096893687307, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.050914328545331955}, {"id": 101, "seek": 53532, "start": 547.0, "end": 552.5600000000001, "text": " the TDXM, and the interface between TDXM and the payload.", "tokens": [50948, 264, 42606, 55, 44, 11, 293, 264, 9226, 1296, 42606, 55, 44, 293, 264, 30918, 13, 51226], "temperature": 0.0, "avg_logprob": -0.18778096893687307, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.050914328545331955}, {"id": 102, "seek": 53532, "start": 552.5600000000001, "end": 555.6800000000001, "text": " The TDXM itself includes the reset vector.", "tokens": [51226, 440, 42606, 55, 44, 2564, 5974, 264, 14322, 8062, 13, 51382], "temperature": 0.0, "avg_logprob": -0.18778096893687307, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.050914328545331955}, {"id": 103, "seek": 53532, "start": 555.6800000000001, "end": 559.7600000000001, "text": " The reset vector is written in a symbolic language.", "tokens": [51382, 440, 14322, 8062, 307, 3720, 294, 257, 25755, 2856, 13, 51586], "temperature": 0.0, "avg_logprob": -0.18778096893687307, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.050914328545331955}, {"id": 104, "seek": 55976, "start": 559.76, "end": 568.12, "text": " The code runs by the bootstrap processor BSP, whose virtual CPU index is always zero.", "tokens": [50364, 440, 3089, 6676, 538, 264, 11450, 372, 4007, 15321, 27253, 47, 11, 6104, 6374, 13199, 8186, 307, 1009, 4018, 13, 50782], "temperature": 0.0, "avg_logprob": -0.18310472839757017, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.005723710171878338}, {"id": 105, "seek": 55976, "start": 568.12, "end": 576.88, "text": " The BSP will park other application processor APs and switch to X64 long mode, set stack", "tokens": [50782, 440, 27253, 47, 486, 3884, 661, 3861, 15321, 5372, 82, 293, 3679, 281, 1783, 19395, 938, 4391, 11, 992, 8630, 51220], "temperature": 0.0, "avg_logprob": -0.18310472839757017, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.005723710171878338}, {"id": 106, "seek": 55976, "start": 576.88, "end": 583.4, "text": " for the Rust code, then jump to the SHIM main function.", "tokens": [51220, 337, 264, 34952, 3089, 11, 550, 3012, 281, 264, 7405, 6324, 2135, 2445, 13, 51546], "temperature": 0.0, "avg_logprob": -0.18310472839757017, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.005723710171878338}, {"id": 107, "seek": 55976, "start": 583.4, "end": 587.76, "text": " The SHIM main function is written in the Rust language.", "tokens": [51546, 440, 7405, 6324, 2135, 2445, 307, 3720, 294, 264, 34952, 2856, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18310472839757017, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.005723710171878338}, {"id": 108, "seek": 58776, "start": 587.76, "end": 591.8, "text": " This will pass the TDHUB input from the VMM.", "tokens": [50364, 639, 486, 1320, 264, 42606, 39, 23553, 4846, 490, 264, 691, 17365, 13, 50566], "temperature": 0.0, "avg_logprob": -0.2735105514526367, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.004127754829823971}, {"id": 109, "seek": 58776, "start": 591.8, "end": 600.84, "text": " It measures the TDHUB, gets the memory mapping information, and builds the 820 table.", "tokens": [50566, 467, 8000, 264, 42606, 39, 23553, 11, 2170, 264, 4675, 18350, 1589, 11, 293, 15182, 264, 1649, 2009, 3199, 13, 51018], "temperature": 0.0, "avg_logprob": -0.2735105514526367, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.004127754829823971}, {"id": 110, "seek": 58776, "start": 600.84, "end": 610.24, "text": " Then it accepts the memory and loads the payload and jumps to the payload.", "tokens": [51018, 1396, 309, 33538, 264, 4675, 293, 12668, 264, 30918, 293, 16704, 281, 264, 30918, 13, 51488], "temperature": 0.0, "avg_logprob": -0.2735105514526367, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.004127754829823971}, {"id": 111, "seek": 58776, "start": 610.24, "end": 613.4399999999999, "text": " People may use different payloads in a different use case.", "tokens": [51488, 3432, 815, 764, 819, 30918, 82, 294, 257, 819, 764, 1389, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2735105514526367, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.004127754829823971}, {"id": 112, "seek": 61344, "start": 613.44, "end": 619.08, "text": " For example, in a normal confidential container use case, the TDSHIM can boot a Linux kernel", "tokens": [50364, 1171, 1365, 11, 294, 257, 2710, 27054, 10129, 764, 1389, 11, 264, 42606, 17308, 6324, 393, 11450, 257, 18734, 28256, 50646], "temperature": 0.0, "avg_logprob": -0.17946200143723262, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.017693717032670975}, {"id": 113, "seek": 61344, "start": 619.08, "end": 623.6400000000001, "text": " directly based upon the Linux boot protocol.", "tokens": [50646, 3838, 2361, 3564, 264, 18734, 11450, 10336, 13, 50874], "temperature": 0.0, "avg_logprob": -0.17946200143723262, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.017693717032670975}, {"id": 114, "seek": 61344, "start": 623.6400000000001, "end": 629.8000000000001, "text": " Service TD use case, the TDSHIM can boot the migration TD core to make it for migration", "tokens": [50874, 9561, 42606, 764, 1389, 11, 264, 42606, 17308, 6324, 393, 11450, 264, 17011, 42606, 4965, 281, 652, 309, 337, 17011, 51182], "temperature": 0.0, "avg_logprob": -0.17946200143723262, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.017693717032670975}, {"id": 115, "seek": 61344, "start": 629.8000000000001, "end": 630.8000000000001, "text": " TD.", "tokens": [51182, 42606, 13, 51232], "temperature": 0.0, "avg_logprob": -0.17946200143723262, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.017693717032670975}, {"id": 116, "seek": 61344, "start": 630.8000000000001, "end": 642.6400000000001, "text": " The migration TD is a service TD used in TDX 1.5 to support the guest OS live migration.", "tokens": [51232, 440, 17011, 42606, 307, 257, 2643, 42606, 1143, 294, 42606, 55, 502, 13, 20, 281, 1406, 264, 8341, 12731, 1621, 17011, 13, 51824], "temperature": 0.0, "avg_logprob": -0.17946200143723262, "compression_ratio": 1.6825396825396826, "no_speech_prob": 0.017693717032670975}, {"id": 117, "seek": 64264, "start": 642.64, "end": 648.3199999999999, "text": " Now we will introduce two important features in the TDSHIM, trust boot and secure boot.", "tokens": [50364, 823, 321, 486, 5366, 732, 1021, 4122, 294, 264, 42606, 17308, 6324, 11, 3361, 11450, 293, 7144, 11450, 13, 50648], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 118, "seek": 64264, "start": 648.3199999999999, "end": 651.52, "text": " They are all documented in the TDSHIM specifications.", "tokens": [50648, 814, 366, 439, 23007, 294, 264, 42606, 17308, 6324, 29448, 13, 50808], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 119, "seek": 64264, "start": 651.52, "end": 656.08, "text": " First, let's take a look at trust boot.", "tokens": [50808, 2386, 11, 718, 311, 747, 257, 574, 412, 3361, 11450, 13, 51036], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 120, "seek": 64264, "start": 656.08, "end": 662.72, "text": " In the trust boot flow, one component must measure the next level component before transfer", "tokens": [51036, 682, 264, 3361, 11450, 3095, 11, 472, 6542, 1633, 3481, 264, 958, 1496, 6542, 949, 5003, 51368], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 121, "seek": 64264, "start": 662.72, "end": 665.04, "text": " control to it.", "tokens": [51368, 1969, 281, 309, 13, 51484], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 122, "seek": 64264, "start": 665.04, "end": 670.88, "text": " Later, a remote verifier can get the measurement data with digital signature signed by the", "tokens": [51484, 11965, 11, 257, 8607, 1306, 9902, 393, 483, 264, 13160, 1412, 365, 4562, 13397, 8175, 538, 264, 51776], "temperature": 0.0, "avg_logprob": -0.2279890723850416, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.015167320147156715}, {"id": 123, "seek": 67088, "start": 670.88, "end": 676.92, "text": " trusted entity, and verify the TD environment launch as expected.", "tokens": [50364, 16034, 13977, 11, 293, 16888, 264, 42606, 2823, 4025, 382, 5176, 13, 50666], "temperature": 0.0, "avg_logprob": -0.27038609640938893, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.003170653246343136}, {"id": 124, "seek": 67088, "start": 676.92, "end": 680.32, "text": " This flow is called remote agitation.", "tokens": [50666, 639, 3095, 307, 1219, 8607, 623, 4614, 13, 50836], "temperature": 0.0, "avg_logprob": -0.27038609640938893, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.003170653246343136}, {"id": 125, "seek": 67088, "start": 680.32, "end": 686.16, "text": " The TDSHIM supports the boot flow by extending the measurement to the TD runtime measurement", "tokens": [50836, 440, 42606, 17308, 6324, 9346, 264, 11450, 3095, 538, 24360, 264, 13160, 281, 264, 42606, 34474, 13160, 51128], "temperature": 0.0, "avg_logprob": -0.27038609640938893, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.003170653246343136}, {"id": 126, "seek": 67088, "start": 686.16, "end": 687.68, "text": " register.", "tokens": [51128, 7280, 13, 51204], "temperature": 0.0, "avg_logprob": -0.27038609640938893, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.003170653246343136}, {"id": 127, "seek": 67088, "start": 687.68, "end": 695.04, "text": " The TD measured component includes the TDHUB, payload, and the boot parameter, etc.", "tokens": [51204, 440, 42606, 12690, 6542, 5974, 264, 42606, 39, 23553, 11, 30918, 11, 293, 264, 11450, 13075, 11, 5183, 13, 51572], "temperature": 0.0, "avg_logprob": -0.27038609640938893, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.003170653246343136}, {"id": 128, "seek": 69504, "start": 695.04, "end": 702.88, "text": " At the same time, TDSHIM provides a confidential computing event log called CCEL to the verifier.", "tokens": [50364, 1711, 264, 912, 565, 11, 42606, 17308, 6324, 6417, 257, 27054, 15866, 2280, 3565, 1219, 12630, 3158, 281, 264, 1306, 9902, 13, 50756], "temperature": 0.0, "avg_logprob": -0.10683506655405803, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.016388803720474243}, {"id": 129, "seek": 69504, "start": 702.88, "end": 710.04, "text": " The event log may be used to reproduce the digest value recorded in RTMR.", "tokens": [50756, 440, 2280, 3565, 815, 312, 1143, 281, 29501, 264, 13884, 2158, 8287, 294, 21797, 21173, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10683506655405803, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.016388803720474243}, {"id": 130, "seek": 69504, "start": 710.04, "end": 717.52, "text": " As such, the verifier can check each individual component described in the event log.", "tokens": [51114, 1018, 1270, 11, 264, 1306, 9902, 393, 1520, 1184, 2609, 6542, 7619, 294, 264, 2280, 3565, 13, 51488], "temperature": 0.0, "avg_logprob": -0.10683506655405803, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.016388803720474243}, {"id": 131, "seek": 69504, "start": 717.52, "end": 723.0, "text": " The final attestation can be based on the hash of the measurement register or the hash", "tokens": [51488, 440, 2572, 951, 377, 399, 393, 312, 2361, 322, 264, 22019, 295, 264, 13160, 7280, 420, 264, 22019, 51762], "temperature": 0.0, "avg_logprob": -0.10683506655405803, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.016388803720474243}, {"id": 132, "seek": 72300, "start": 723.0, "end": 728.84, "text": " of the event log.", "tokens": [50364, 295, 264, 2280, 3565, 13, 50656], "temperature": 0.0, "avg_logprob": -0.28507376498863346, "compression_ratio": 1.3096774193548386, "no_speech_prob": 0.013626434840261936}, {"id": 133, "seek": 72300, "start": 728.84, "end": 737.88, "text": " The TDX architecture provides one MRED and four RTMR measurement registers to map the", "tokens": [50656, 440, 42606, 55, 9482, 6417, 472, 9808, 4731, 293, 1451, 21797, 21173, 13160, 38351, 281, 4471, 264, 51108], "temperature": 0.0, "avg_logprob": -0.28507376498863346, "compression_ratio": 1.3096774193548386, "no_speech_prob": 0.013626434840261936}, {"id": 134, "seek": 72300, "start": 737.88, "end": 740.56, "text": " TPM PCR-based measurement.", "tokens": [51108, 314, 18819, 44022, 12, 6032, 13160, 13, 51242], "temperature": 0.0, "avg_logprob": -0.28507376498863346, "compression_ratio": 1.3096774193548386, "no_speech_prob": 0.013626434840261936}, {"id": 135, "seek": 72300, "start": 740.56, "end": 749.0, "text": " MRTD1 maps the PCR0 as a firmware boot code, which is the TDSHIM itself.", "tokens": [51242, 9808, 51, 35, 16, 11317, 264, 44022, 15, 382, 257, 30289, 11450, 3089, 11, 597, 307, 264, 42606, 17308, 6324, 2564, 13, 51664], "temperature": 0.0, "avg_logprob": -0.28507376498863346, "compression_ratio": 1.3096774193548386, "no_speech_prob": 0.013626434840261936}, {"id": 136, "seek": 74900, "start": 749.0, "end": 756.68, "text": " The RTMR0 maps the PCR1 and the PCR7 as a firmware configuration, such as TDHUB for the VMM or", "tokens": [50364, 440, 21797, 21173, 15, 11317, 264, 44022, 16, 293, 264, 44022, 22, 382, 257, 30289, 11694, 11, 1270, 382, 42606, 39, 23553, 337, 264, 691, 17365, 420, 50748], "temperature": 0.0, "avg_logprob": -0.26972190539042157, "compression_ratio": 1.4625, "no_speech_prob": 0.05571550130844116}, {"id": 137, "seek": 74900, "start": 756.68, "end": 758.18, "text": " secured policy.", "tokens": [50748, 22905, 3897, 13, 50823], "temperature": 0.0, "avg_logprob": -0.26972190539042157, "compression_ratio": 1.4625, "no_speech_prob": 0.05571550130844116}, {"id": 138, "seek": 74900, "start": 758.18, "end": 766.12, "text": " RTMR1 maps the PCR2 to PCR6 as the OS or payload information.", "tokens": [50823, 21797, 21173, 16, 11317, 264, 44022, 17, 281, 44022, 21, 382, 264, 12731, 420, 30918, 1589, 13, 51220], "temperature": 0.0, "avg_logprob": -0.26972190539042157, "compression_ratio": 1.4625, "no_speech_prob": 0.05571550130844116}, {"id": 139, "seek": 74900, "start": 766.12, "end": 778.0, "text": " The RTMR2 will map the PCR8 to 15 as application information.", "tokens": [51220, 440, 21797, 21173, 17, 486, 4471, 264, 44022, 23, 281, 2119, 382, 3861, 1589, 13, 51814], "temperature": 0.0, "avg_logprob": -0.26972190539042157, "compression_ratio": 1.4625, "no_speech_prob": 0.05571550130844116}, {"id": 140, "seek": 77800, "start": 778.0, "end": 783.72, "text": " From the transfer boot, the secure boot requires one component to verify the digital signature", "tokens": [50364, 3358, 264, 5003, 11450, 11, 264, 7144, 11450, 7029, 472, 6542, 281, 16888, 264, 4562, 13397, 50650], "temperature": 0.0, "avg_logprob": -0.2768140046492867, "compression_ratio": 1.5206185567010309, "no_speech_prob": 0.0072220019064843655}, {"id": 141, "seek": 77800, "start": 783.72, "end": 788.52, "text": " of the next-level component before transfer control to it.", "tokens": [50650, 295, 264, 958, 12, 12418, 6542, 949, 5003, 1969, 281, 309, 13, 50890], "temperature": 0.0, "avg_logprob": -0.2768140046492867, "compression_ratio": 1.5206185567010309, "no_speech_prob": 0.0072220019064843655}, {"id": 142, "seek": 77800, "start": 788.52, "end": 794.84, "text": " In order to support such verification, the TDSHIM needs to provision a non-good public", "tokens": [50890, 682, 1668, 281, 1406, 1270, 30206, 11, 264, 42606, 17308, 6324, 2203, 281, 17225, 257, 2107, 12, 21753, 1908, 51206], "temperature": 0.0, "avg_logprob": -0.2768140046492867, "compression_ratio": 1.5206185567010309, "no_speech_prob": 0.0072220019064843655}, {"id": 143, "seek": 77800, "start": 794.84, "end": 802.0, "text": " key and the minimum secure version number, called SVM.", "tokens": [51206, 2141, 293, 264, 7285, 7144, 3037, 1230, 11, 1219, 31910, 44, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2768140046492867, "compression_ratio": 1.5206185567010309, "no_speech_prob": 0.0072220019064843655}, {"id": 144, "seek": 80200, "start": 802.0, "end": 809.6, "text": " The payload itself should include the image, digital signature, as well as the SVM value.", "tokens": [50364, 440, 30918, 2564, 820, 4090, 264, 3256, 11, 4562, 13397, 11, 382, 731, 382, 264, 31910, 44, 2158, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1388226721021864, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.02296173945069313}, {"id": 145, "seek": 80200, "start": 809.6, "end": 814.72, "text": " The secure boot in a TDSHIM includes two step verification.", "tokens": [50744, 440, 7144, 11450, 294, 257, 42606, 17308, 6324, 5974, 732, 1823, 30206, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1388226721021864, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.02296173945069313}, {"id": 146, "seek": 80200, "start": 814.72, "end": 820.8, "text": " In step one, the TDSHIM needs to verify its public key matches the public key hash in", "tokens": [51000, 682, 1823, 472, 11, 264, 42606, 17308, 6324, 2203, 281, 16888, 1080, 1908, 2141, 10676, 264, 1908, 2141, 22019, 294, 51304], "temperature": 0.0, "avg_logprob": -0.1388226721021864, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.02296173945069313}, {"id": 147, "seek": 80200, "start": 820.8, "end": 826.48, "text": " the TDSHIM image, then the TDSHIM needs to verify the digital signature of the payload", "tokens": [51304, 264, 42606, 17308, 6324, 3256, 11, 550, 264, 42606, 17308, 6324, 2203, 281, 16888, 264, 4562, 13397, 295, 264, 30918, 51588], "temperature": 0.0, "avg_logprob": -0.1388226721021864, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.02296173945069313}, {"id": 148, "seek": 80200, "start": 826.48, "end": 829.04, "text": " according to the public key.", "tokens": [51588, 4650, 281, 264, 1908, 2141, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1388226721021864, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.02296173945069313}, {"id": 149, "seek": 82904, "start": 829.04, "end": 834.8, "text": " The digital signature needs to cover both the payload image and the SVM value to prevent", "tokens": [50364, 440, 4562, 13397, 2203, 281, 2060, 1293, 264, 30918, 3256, 293, 264, 31910, 44, 2158, 281, 4871, 50652], "temperature": 0.0, "avg_logprob": -0.18933190495134836, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00042371617746539414}, {"id": 150, "seek": 82904, "start": 834.8, "end": 837.24, "text": " the SVM modification.", "tokens": [50652, 264, 31910, 44, 26747, 13, 50774], "temperature": 0.0, "avg_logprob": -0.18933190495134836, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00042371617746539414}, {"id": 151, "seek": 82904, "start": 837.24, "end": 843.36, "text": " In step two, the TDSHIM needs to verify the SVM in the payload to ensure it's equal to", "tokens": [50774, 682, 1823, 732, 11, 264, 42606, 17308, 6324, 2203, 281, 16888, 264, 31910, 44, 294, 264, 30918, 281, 5586, 309, 311, 2681, 281, 51080], "temperature": 0.0, "avg_logprob": -0.18933190495134836, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00042371617746539414}, {"id": 152, "seek": 82904, "start": 843.36, "end": 849.0, "text": " or bigger than the minimum SVM provision in the TDSHIM image.", "tokens": [51080, 420, 3801, 813, 264, 7285, 31910, 44, 17225, 294, 264, 42606, 17308, 6324, 3256, 13, 51362], "temperature": 0.0, "avg_logprob": -0.18933190495134836, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00042371617746539414}, {"id": 153, "seek": 82904, "start": 849.0, "end": 853.24, "text": " That is to prevent the payload-rollback attack.", "tokens": [51362, 663, 307, 281, 4871, 264, 30918, 12, 3970, 3207, 2690, 13, 51574], "temperature": 0.0, "avg_logprob": -0.18933190495134836, "compression_ratio": 1.6329787234042554, "no_speech_prob": 0.00042371617746539414}, {"id": 154, "seek": 85324, "start": 853.24, "end": 859.16, "text": " If the secure boot with SVM is enabled, the payload-remote attack station can be used in", "tokens": [50364, 759, 264, 7144, 11450, 365, 31910, 44, 307, 15172, 11, 264, 30918, 12, 2579, 1370, 2690, 5214, 393, 312, 1143, 294, 50660], "temperature": 0.0, "avg_logprob": -0.15729723537669463, "compression_ratio": 1.675, "no_speech_prob": 0.006384149193763733}, {"id": 155, "seek": 85324, "start": 859.16, "end": 861.6, "text": " different verification policy.", "tokens": [50660, 819, 30206, 3897, 13, 50782], "temperature": 0.0, "avg_logprob": -0.15729723537669463, "compression_ratio": 1.675, "no_speech_prob": 0.006384149193763733}, {"id": 156, "seek": 85324, "start": 861.6, "end": 867.96, "text": " The verification can be based on the SVM on the image, not the image hash.", "tokens": [50782, 440, 30206, 393, 312, 2361, 322, 264, 31910, 44, 322, 264, 3256, 11, 406, 264, 3256, 22019, 13, 51100], "temperature": 0.0, "avg_logprob": -0.15729723537669463, "compression_ratio": 1.675, "no_speech_prob": 0.006384149193763733}, {"id": 157, "seek": 85324, "start": 867.96, "end": 874.72, "text": " This can be achieved without secure boot because there's no other secure way to allow the payload", "tokens": [51100, 639, 393, 312, 11042, 1553, 7144, 11450, 570, 456, 311, 572, 661, 7144, 636, 281, 2089, 264, 30918, 51438], "temperature": 0.0, "avg_logprob": -0.15729723537669463, "compression_ratio": 1.675, "no_speech_prob": 0.006384149193763733}, {"id": 158, "seek": 85324, "start": 874.72, "end": 879.16, "text": " to pass the SVM information to the TDSHIM.", "tokens": [51438, 281, 1320, 264, 31910, 44, 1589, 281, 264, 42606, 17308, 6324, 13, 51660], "temperature": 0.0, "avg_logprob": -0.15729723537669463, "compression_ratio": 1.675, "no_speech_prob": 0.006384149193763733}, {"id": 159, "seek": 87916, "start": 879.16, "end": 887.48, "text": " With secure boot, the SVM value can be tampered by the adversary without being noticed.", "tokens": [50364, 2022, 7144, 11450, 11, 264, 31910, 44, 2158, 393, 312, 7677, 40004, 538, 264, 48222, 1553, 885, 5694, 13, 50780], "temperature": 0.0, "avg_logprob": -0.13892638817262115, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.008978881873190403}, {"id": 160, "seek": 87916, "start": 887.48, "end": 893.24, "text": " The measurement with secure boot is almost the same as the one without secure boot.", "tokens": [50780, 440, 13160, 365, 7144, 11450, 307, 1920, 264, 912, 382, 264, 472, 1553, 7144, 11450, 13, 51068], "temperature": 0.0, "avg_logprob": -0.13892638817262115, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.008978881873190403}, {"id": 161, "seek": 87916, "start": 893.24, "end": 899.76, "text": " The only difference is that the SVM value of the payload is extended to the RTMR1 as a", "tokens": [51068, 440, 787, 2649, 307, 300, 264, 31910, 44, 2158, 295, 264, 30918, 307, 10913, 281, 264, 21797, 21173, 16, 382, 257, 51394], "temperature": 0.0, "avg_logprob": -0.13892638817262115, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.008978881873190403}, {"id": 162, "seek": 87916, "start": 899.76, "end": 901.8, "text": " specific entry.", "tokens": [51394, 2685, 8729, 13, 51496], "temperature": 0.0, "avg_logprob": -0.13892638817262115, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.008978881873190403}, {"id": 163, "seek": 87916, "start": 901.8, "end": 907.4399999999999, "text": " As such, the verifier can check the specific SVM entry in the event log.", "tokens": [51496, 1018, 1270, 11, 264, 1306, 9902, 393, 1520, 264, 2685, 31910, 44, 8729, 294, 264, 2280, 3565, 13, 51778], "temperature": 0.0, "avg_logprob": -0.13892638817262115, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.008978881873190403}, {"id": 164, "seek": 90744, "start": 907.44, "end": 913.24, "text": " The policy could be, I require the TD payload bigger than SVM4.", "tokens": [50364, 440, 3897, 727, 312, 11, 286, 3651, 264, 42606, 30918, 3801, 813, 31910, 44, 19, 13, 50654], "temperature": 0.0, "avg_logprob": -0.2360234753838901, "compression_ratio": 1.5265957446808511, "no_speech_prob": 0.006895043887197971}, {"id": 165, "seek": 90744, "start": 913.24, "end": 920.9200000000001, "text": " It could be any SVM with SVM5, SVM6, etc.", "tokens": [50654, 467, 727, 312, 604, 31910, 44, 365, 31910, 44, 20, 11, 31910, 44, 21, 11, 5183, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2360234753838901, "compression_ratio": 1.5265957446808511, "no_speech_prob": 0.006895043887197971}, {"id": 166, "seek": 90744, "start": 920.9200000000001, "end": 929.12, "text": " To follow the secure best practice, the TDSHIM enables the protection such as data execution", "tokens": [51038, 1407, 1524, 264, 7144, 1151, 3124, 11, 264, 42606, 17308, 6324, 17077, 264, 6334, 1270, 382, 1412, 15058, 51448], "temperature": 0.0, "avg_logprob": -0.2360234753838901, "compression_ratio": 1.5265957446808511, "no_speech_prob": 0.006895043887197971}, {"id": 167, "seek": 90744, "start": 929.12, "end": 930.62, "text": " protection.", "tokens": [51448, 6334, 13, 51523], "temperature": 0.0, "avg_logprob": -0.2360234753838901, "compression_ratio": 1.5265957446808511, "no_speech_prob": 0.006895043887197971}, {"id": 168, "seek": 90744, "start": 930.62, "end": 936.8000000000001, "text": " It marks the code page to be read only and the data page to be non-skewable.", "tokens": [51523, 467, 10640, 264, 3089, 3028, 281, 312, 1401, 787, 293, 264, 1412, 3028, 281, 312, 2107, 12, 82, 330, 86, 712, 13, 51832], "temperature": 0.0, "avg_logprob": -0.2360234753838901, "compression_ratio": 1.5265957446808511, "no_speech_prob": 0.006895043887197971}, {"id": 169, "seek": 93680, "start": 936.8, "end": 942.8399999999999, "text": " It's useful to break the exploitation, even if the environment is compromised as such", "tokens": [50364, 467, 311, 4420, 281, 1821, 264, 33122, 11, 754, 498, 264, 2823, 307, 32463, 382, 1270, 50666], "temperature": 0.0, "avg_logprob": -0.2924825880262587, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.02672586590051651}, {"id": 170, "seek": 93680, "start": 942.8399999999999, "end": 950.0, "text": " as buffer overflow or stack overflow, the attacker cannot inject the code.", "tokens": [50666, 382, 21762, 37772, 420, 8630, 37772, 11, 264, 35871, 2644, 10711, 264, 3089, 13, 51024], "temperature": 0.0, "avg_logprob": -0.2924825880262587, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.02672586590051651}, {"id": 171, "seek": 93680, "start": 950.0, "end": 955.9599999999999, "text": " We're also trying to enable the control flow guard, CET, such as shadow stack and indirect", "tokens": [51024, 492, 434, 611, 1382, 281, 9528, 264, 1969, 3095, 6290, 11, 383, 4850, 11, 1270, 382, 8576, 8630, 293, 19523, 51322], "temperature": 0.0, "avg_logprob": -0.2924825880262587, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.02672586590051651}, {"id": 172, "seek": 93680, "start": 955.9599999999999, "end": 957.56, "text": " branch tracking.", "tokens": [51322, 9819, 11603, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2924825880262587, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.02672586590051651}, {"id": 173, "seek": 93680, "start": 957.56, "end": 964.0, "text": " That is still working on progress, and that work depends on the rest compiler.", "tokens": [51402, 663, 307, 920, 1364, 322, 4205, 11, 293, 300, 589, 5946, 322, 264, 1472, 31958, 13, 51724], "temperature": 0.0, "avg_logprob": -0.2924825880262587, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.02672586590051651}, {"id": 174, "seek": 96400, "start": 965.0, "end": 968.72, "text": " TDSHIM project provides a set of tools.", "tokens": [50414, 42606, 17308, 6324, 1716, 6417, 257, 992, 295, 3873, 13, 50600], "temperature": 0.0, "avg_logprob": -0.25331685807969834, "compression_ratio": 1.615, "no_speech_prob": 0.0005189335788600147}, {"id": 175, "seek": 96400, "start": 968.72, "end": 976.0, "text": " For example, the TE InfoHash tool allows you to calculate the MRTD-based TE InfoHash value.", "tokens": [50600, 1171, 1365, 11, 264, 19744, 11537, 78, 39, 1299, 2290, 4045, 291, 281, 8873, 264, 9808, 51, 35, 12, 6032, 19744, 11537, 78, 39, 1299, 2158, 13, 50964], "temperature": 0.0, "avg_logprob": -0.25331685807969834, "compression_ratio": 1.615, "no_speech_prob": 0.0005189335788600147}, {"id": 176, "seek": 96400, "start": 976.0, "end": 980.4, "text": " As such, you can predict the value in the TD report.", "tokens": [50964, 1018, 1270, 11, 291, 393, 6069, 264, 2158, 294, 264, 42606, 2275, 13, 51184], "temperature": 0.0, "avg_logprob": -0.25331685807969834, "compression_ratio": 1.615, "no_speech_prob": 0.0005189335788600147}, {"id": 177, "seek": 96400, "start": 980.4, "end": 985.6, "text": " Payload reference calculator can be used to calculate the TD payload reference value by", "tokens": [51184, 11431, 2907, 6408, 24993, 393, 312, 1143, 281, 8873, 264, 42606, 30918, 6408, 2158, 538, 51444], "temperature": 0.0, "avg_logprob": -0.25331685807969834, "compression_ratio": 1.615, "no_speech_prob": 0.0005189335788600147}, {"id": 178, "seek": 96400, "start": 985.6, "end": 990.36, "text": " a big image, a busy image, and a kernel parameter.", "tokens": [51444, 257, 955, 3256, 11, 257, 5856, 3256, 11, 293, 257, 28256, 13075, 13, 51682], "temperature": 0.0, "avg_logprob": -0.25331685807969834, "compression_ratio": 1.615, "no_speech_prob": 0.0005189335788600147}, {"id": 179, "seek": 99036, "start": 990.36, "end": 997.76, "text": " The metadata checker tool accepts the TDSHIM files as an input, and extracts the TDX metadata", "tokens": [50364, 440, 26603, 1520, 260, 2290, 33538, 264, 42606, 17308, 6324, 7098, 382, 364, 4846, 11, 293, 8947, 82, 264, 42606, 55, 26603, 50734], "temperature": 0.0, "avg_logprob": -0.3124821033883602, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.004068139940500259}, {"id": 180, "seek": 99036, "start": 997.76, "end": 1003.48, "text": " and verifies if the metadata is valid, then dumps them with metadata.", "tokens": [50734, 293, 1306, 11221, 498, 264, 26603, 307, 7363, 11, 550, 11430, 82, 552, 365, 26603, 13, 51020], "temperature": 0.0, "avg_logprob": -0.3124821033883602, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.004068139940500259}, {"id": 181, "seek": 99036, "start": 1003.48, "end": 1011.88, "text": " Finally, we enable the set of tests for the TDSHIM project, for example, the fuzzing test", "tokens": [51020, 6288, 11, 321, 9528, 264, 992, 295, 6921, 337, 264, 42606, 17308, 6324, 1716, 11, 337, 1365, 11, 264, 283, 3334, 8781, 1500, 51440], "temperature": 0.0, "avg_logprob": -0.3124821033883602, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.004068139940500259}, {"id": 182, "seek": 99036, "start": 1011.88, "end": 1019.6, "text": " with AFL fuzz and the cargo fuzz, which are two popular ones in the rust fuzzing.", "tokens": [51440, 365, 20389, 43, 283, 16740, 293, 264, 19449, 283, 16740, 11, 597, 366, 732, 3743, 2306, 294, 264, 15259, 283, 3334, 8781, 13, 51826], "temperature": 0.0, "avg_logprob": -0.3124821033883602, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.004068139940500259}, {"id": 183, "seek": 101960, "start": 1019.6, "end": 1027.52, "text": " We enable the cargo clipy, and it runs the Rudra, Christie, MR, AI static analysis tools,", "tokens": [50364, 492, 9528, 264, 19449, 7353, 88, 11, 293, 309, 6676, 264, 18636, 424, 11, 46111, 11, 9808, 11, 7318, 13437, 5215, 3873, 11, 50760], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 184, "seek": 101960, "start": 1027.52, "end": 1030.24, "text": " and fix the reported issues there.", "tokens": [50760, 293, 3191, 264, 7055, 2663, 456, 13, 50896], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 185, "seek": 101960, "start": 1030.24, "end": 1036.3600000000001, "text": " Unfortunately, we notice that some tools cannot work with the latest rust compiler, such as", "tokens": [50896, 8590, 11, 321, 3449, 300, 512, 3873, 2644, 589, 365, 264, 6792, 15259, 31958, 11, 1270, 382, 51202], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 186, "seek": 101960, "start": 1036.3600000000001, "end": 1037.3600000000001, "text": " Rudra.", "tokens": [51202, 18636, 424, 13, 51252], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 187, "seek": 101960, "start": 1037.3600000000001, "end": 1046.16, "text": " Argo Deny is integrated in CI to ensure that the great TDSHIM rely on does not have any", "tokens": [51252, 1587, 1571, 6458, 88, 307, 10919, 294, 37777, 281, 5586, 300, 264, 869, 42606, 17308, 6324, 10687, 322, 775, 406, 362, 604, 51692], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 188, "seek": 101960, "start": 1046.16, "end": 1048.16, "text": " known secure vulnerabilities.", "tokens": [51692, 2570, 7144, 37633, 13, 51792], "temperature": 0.0, "avg_logprob": -0.34727997250027126, "compression_ratio": 1.482608695652174, "no_speech_prob": 0.0012057616841048002}, {"id": 189, "seek": 104816, "start": 1048.92, "end": 1055.96, "text": " Beyond that, we also run the unit test and collect the coverage as well to ensure the", "tokens": [50402, 19707, 300, 11, 321, 611, 1190, 264, 4985, 1500, 293, 2500, 264, 9645, 382, 731, 281, 5586, 264, 50754], "temperature": 0.0, "avg_logprob": -0.29022196256197413, "compression_ratio": 1.4593023255813953, "no_speech_prob": 0.0032701496966183186}, {"id": 190, "seek": 104816, "start": 1055.96, "end": 1057.6000000000001, "text": " quality of the project.", "tokens": [50754, 3125, 295, 264, 1716, 13, 50836], "temperature": 0.0, "avg_logprob": -0.29022196256197413, "compression_ratio": 1.4593023255813953, "no_speech_prob": 0.0032701496966183186}, {"id": 191, "seek": 104816, "start": 1060.1200000000001, "end": 1065.8000000000002, "text": " Based on that, that's all for the TDSHIM introduction, and thank you for your attention.", "tokens": [50962, 18785, 322, 300, 11, 300, 311, 439, 337, 264, 42606, 17308, 6324, 9339, 11, 293, 1309, 291, 337, 428, 3202, 13, 51246], "temperature": 0.0, "avg_logprob": -0.29022196256197413, "compression_ratio": 1.4593023255813953, "no_speech_prob": 0.0032701496966183186}, {"id": 192, "seek": 104816, "start": 1065.8000000000002, "end": 1068.8000000000002, "text": " Please let me know if there is any question or that.", "tokens": [51246, 2555, 718, 385, 458, 498, 456, 307, 604, 1168, 420, 300, 13, 51396], "temperature": 0.0, "avg_logprob": -0.29022196256197413, "compression_ratio": 1.4593023255813953, "no_speech_prob": 0.0032701496966183186}, {"id": 193, "seek": 107816, "start": 1078.16, "end": 1079.16, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.953306516011556, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9968735575675964}], "language": "en"}