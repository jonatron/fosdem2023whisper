{"text": " We will start, so I guess we can start. Hello, my name is Radon Svaka, and I will be presenting how to harden a system with a file access policy statement. So, I'll start with the brief introduction of the framework. Can you hear me? Is it better? Is it better? So, FEPO-CD is an acronym for file access policy statement, and it's in a lightweight implementation of application-wide listing. It has many features. I will just highlight that it has integration with RPM, and it can load some data from RPM base, and it can log events to audit or syslog, and it heavily relies on FA Notify API from kernel. So, when we look at this framework architecture, we can see several components of the framework. The main component of the framework is the daemon. This daemon usually listens to this FA Notify events from kernel. When it loads up, it reads all the data from the backends, and it creates its own database, which is called trustdb. The first backend is RPMDB, which handles data from RPM database, or metadata, better term, and the second one is file backend, which loads all the trust information from user-defined trust lists. There is also CLI component, which can manage trust and also the daemon's properties. So, how does it work? When we look closer, we can see that it is on this image. There are two processes on the system. The first on the left side is bash, and the second on the right side is FA policy daemon. FA policy daemon is the situation listens for these events, and it's just waiting. Bash is trying to execute PS command, and it calls exactly system call, and this execution of the system call is on hold, so it's like post, and it's also waiting. Meanwhile, on the other side can also send an event to the daemon that something is happening on the system, and daemon can read from this event that there is some process called bash, and it wants to accept this PS command, and it has PID 500, so it does a rules evaluation, and when the decision is allowed, it sends affinity response to the kernel, and kernel will let this exact V eventually finish with success. If the decision was denied, then this exact V will return error code. So the daemon is the main part of the project, and it works with the rules, and there are rules and trust, and both have power over what to do with the files and their execution system. So these rules, they are pretty similar to SC Linux, they have also subject object notation, and they start with the decision part. Decision part is, it can be allow or deny, or it can be combined with syslog or audit attribute. The second part of the rule is permission, which can be open or exec, but that refers to the original system call from which that event comes from, and any is like place order and will match both of them. We also support just these two because this is, because FA notified us that. Our subject is what is executing, and object is what is being executed. So this trust is a very important concept here in FA policy, it can be defined by user, and it is usually done by CLI, and that there is also, or we don't have to add system binaries or files to the trust, because they are trusted by default, they are loaded by this backend, so this is done automatically, so when we run FA policy by default, it somehow works. So these are some rules example, I don't know if you see them, but the first one says, the first one allows loading of trusted shared libraries on the system, and the second one opposed to that, like denies untrusted libraries. Third one will allow execution of trusted files on the system, and fourth one allows using of scripts, which are trusted on the system, and fifth denies untrusted scripts. And there are two cage of rules, first one is for execution of all files, and the seventh is open for everything. So they are also described here. So when we want to install FA policy demand, it's very simple, we can just use normal Federa program for installation, which is called DNF, this is one liner, when we install it, the installation consists of, or it installs three packages to the system, the first one is FA policy, which is main package, which contains demon and CLI. The second one is RPM plugin for FA policy, which works, or which, during the RPM transactions, it sends the new metadata that are needed for correct behavior, so it sends it to the demon, and then demon can work with them, and they are up to date, and it also notifies the demon when the transaction ends, so it can behave, the demon can behave accordingly. And the third one is service package for FA policy, with the service policy. So when the installation is complete, we can start FA policy. There are several ways how to do that. In our examples, we will use debug deny, because we are interested in deny events, or debugging of the deny events, and we don't need anything more. If we would like to see also allowed events, or something else, some other debug information, it can be done via debug option, and when we want to run it on something more like production environment, we can use system CTL. So when we run it, FA policy will tell us that it's listening for these events, so it's okay, and we can start playing with this. So there are, I prepared a few scenarios to demonstrate how it works. So the first scenario is called execution of untrusted software. So I downloaded this file, this is Python script called exploit.py, and I want to try to run it. I make it executable, and when I run it, I can see that it's blocked, and we can see down there that there is deny event from FA policy that says that this exploit.py is not trusted, so it cannot be run. So it blocked this unknown program to be. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.76, "text": " We will start, so I guess we can start.", "tokens": [492, 486, 722, 11, 370, 286, 2041, 321, 393, 722, 13], "temperature": 0.0, "avg_logprob": -0.5895206744854267, "compression_ratio": 1.1941747572815533, "no_speech_prob": 0.5886371731758118}, {"id": 1, "seek": 0, "start": 17.76, "end": 23.36, "text": " Hello, my name is Radon Svaka, and I will be presenting how to harden a system with", "tokens": [2425, 11, 452, 1315, 307, 9654, 266, 318, 85, 7849, 11, 293, 286, 486, 312, 15578, 577, 281, 50203, 257, 1185, 365], "temperature": 0.0, "avg_logprob": -0.5895206744854267, "compression_ratio": 1.1941747572815533, "no_speech_prob": 0.5886371731758118}, {"id": 2, "seek": 2336, "start": 23.36, "end": 30.36, "text": " a file access policy statement. So, I'll start with the brief introduction of the framework.", "tokens": [257, 3991, 2105, 3897, 5629, 13, 407, 11, 286, 603, 722, 365, 264, 5353, 9339, 295, 264, 8388, 13], "temperature": 0.0, "avg_logprob": -0.5761209487915039, "compression_ratio": 1.101010101010101, "no_speech_prob": 0.02139900252223015}, {"id": 3, "seek": 2336, "start": 30.36, "end": 39.36, "text": " Can you hear me?", "tokens": [1664, 291, 1568, 385, 30], "temperature": 0.0, "avg_logprob": -0.5761209487915039, "compression_ratio": 1.101010101010101, "no_speech_prob": 0.02139900252223015}, {"id": 4, "seek": 3936, "start": 39.36, "end": 60.36, "text": " Is it better? Is it better? So, FEPO-CD is an acronym for file access policy statement,", "tokens": [1119, 309, 1101, 30, 1119, 309, 1101, 30, 407, 11, 479, 8929, 46, 12, 16508, 307, 364, 39195, 337, 3991, 2105, 3897, 5629, 11], "temperature": 0.0, "avg_logprob": -0.40351966449192594, "compression_ratio": 1.0609756097560976, "no_speech_prob": 0.005991656333208084}, {"id": 5, "seek": 6036, "start": 60.36, "end": 70.36, "text": " and it's in a lightweight implementation of application-wide listing. It has many features.", "tokens": [293, 309, 311, 294, 257, 22052, 11420, 295, 3861, 12, 7990, 22161, 13, 467, 575, 867, 4122, 13], "temperature": 0.0, "avg_logprob": -0.24459328762320584, "compression_ratio": 1.338235294117647, "no_speech_prob": 0.004309645853936672}, {"id": 6, "seek": 6036, "start": 70.36, "end": 80.36, "text": " I will just highlight that it has integration with RPM, and it can load some data from RPM", "tokens": [286, 486, 445, 5078, 300, 309, 575, 10980, 365, 37389, 11, 293, 309, 393, 3677, 512, 1412, 490, 37389], "temperature": 0.0, "avg_logprob": -0.24459328762320584, "compression_ratio": 1.338235294117647, "no_speech_prob": 0.004309645853936672}, {"id": 7, "seek": 8036, "start": 80.36, "end": 92.36, "text": " base, and it can log events to audit or syslog, and it heavily relies on FA Notify API from", "tokens": [3096, 11, 293, 309, 393, 3565, 3931, 281, 17748, 420, 262, 749, 4987, 11, 293, 309, 10950, 30910, 322, 19894, 1726, 2505, 9362, 490], "temperature": 0.0, "avg_logprob": -0.23520581265713306, "compression_ratio": 1.2805755395683454, "no_speech_prob": 0.0009398725815117359}, {"id": 8, "seek": 8036, "start": 92.36, "end": 103.36, "text": " kernel. So, when we look at this framework architecture, we can see several components", "tokens": [28256, 13, 407, 11, 562, 321, 574, 412, 341, 8388, 9482, 11, 321, 393, 536, 2940, 6677], "temperature": 0.0, "avg_logprob": -0.23520581265713306, "compression_ratio": 1.2805755395683454, "no_speech_prob": 0.0009398725815117359}, {"id": 9, "seek": 10336, "start": 103.36, "end": 111.36, "text": " of the framework. The main component of the framework is the daemon. This daemon usually", "tokens": [295, 264, 8388, 13, 440, 2135, 6542, 295, 264, 8388, 307, 264, 1120, 36228, 13, 639, 1120, 36228, 2673], "temperature": 0.0, "avg_logprob": -0.17693508693150112, "compression_ratio": 1.5459770114942528, "no_speech_prob": 0.001175311510451138}, {"id": 10, "seek": 10336, "start": 111.36, "end": 122.36, "text": " listens to this FA Notify events from kernel. When it loads up, it reads all the data from", "tokens": [35959, 281, 341, 19894, 1726, 2505, 3931, 490, 28256, 13, 1133, 309, 12668, 493, 11, 309, 15700, 439, 264, 1412, 490], "temperature": 0.0, "avg_logprob": -0.17693508693150112, "compression_ratio": 1.5459770114942528, "no_speech_prob": 0.001175311510451138}, {"id": 11, "seek": 10336, "start": 122.36, "end": 130.36, "text": " the backends, and it creates its own database, which is called trustdb. The first backend", "tokens": [264, 646, 2581, 11, 293, 309, 7829, 1080, 1065, 8149, 11, 597, 307, 1219, 3361, 67, 65, 13, 440, 700, 646, 521], "temperature": 0.0, "avg_logprob": -0.17693508693150112, "compression_ratio": 1.5459770114942528, "no_speech_prob": 0.001175311510451138}, {"id": 12, "seek": 13036, "start": 130.36, "end": 140.36, "text": " is RPMDB, which handles data from RPM database, or metadata, better term, and the second", "tokens": [307, 37389, 27735, 11, 597, 18722, 1412, 490, 37389, 8149, 11, 420, 26603, 11, 1101, 1433, 11, 293, 264, 1150], "temperature": 0.0, "avg_logprob": -0.21805383894178604, "compression_ratio": 1.390625, "no_speech_prob": 0.0005894297501072288}, {"id": 13, "seek": 13036, "start": 140.36, "end": 150.36, "text": " one is file backend, which loads all the trust information from user-defined trust lists.", "tokens": [472, 307, 3991, 646, 521, 11, 597, 12668, 439, 264, 3361, 1589, 490, 4195, 12, 37716, 3361, 14511, 13], "temperature": 0.0, "avg_logprob": -0.21805383894178604, "compression_ratio": 1.390625, "no_speech_prob": 0.0005894297501072288}, {"id": 14, "seek": 15036, "start": 150.36, "end": 162.36, "text": " There is also CLI component, which can manage trust and also the daemon's properties. So,", "tokens": [821, 307, 611, 12855, 40, 6542, 11, 597, 393, 3067, 3361, 293, 611, 264, 1120, 36228, 311, 7221, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.1382517613155741, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.0009155140724033117}, {"id": 15, "seek": 15036, "start": 162.36, "end": 169.36, "text": " how does it work? When we look closer, we can see that it is on this image. There are", "tokens": [577, 775, 309, 589, 30, 1133, 321, 574, 4966, 11, 321, 393, 536, 300, 309, 307, 322, 341, 3256, 13, 821, 366], "temperature": 0.0, "avg_logprob": -0.1382517613155741, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.0009155140724033117}, {"id": 16, "seek": 15036, "start": 169.36, "end": 177.36, "text": " two processes on the system. The first on the left side is bash, and the second on the", "tokens": [732, 7555, 322, 264, 1185, 13, 440, 700, 322, 264, 1411, 1252, 307, 46183, 11, 293, 264, 1150, 322, 264], "temperature": 0.0, "avg_logprob": -0.1382517613155741, "compression_ratio": 1.4886363636363635, "no_speech_prob": 0.0009155140724033117}, {"id": 17, "seek": 17736, "start": 177.36, "end": 185.36, "text": " right side is FA policy daemon. FA policy daemon is the situation listens for these events,", "tokens": [558, 1252, 307, 19894, 3897, 1120, 36228, 13, 19894, 3897, 1120, 36228, 307, 264, 2590, 35959, 337, 613, 3931, 11], "temperature": 0.0, "avg_logprob": -0.2135736412472195, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.004076424520462751}, {"id": 18, "seek": 17736, "start": 185.36, "end": 198.36, "text": " and it's just waiting. Bash is trying to execute PS command, and it calls exactly system call,", "tokens": [293, 309, 311, 445, 3806, 13, 43068, 307, 1382, 281, 14483, 8168, 5622, 11, 293, 309, 5498, 2293, 1185, 818, 11], "temperature": 0.0, "avg_logprob": -0.2135736412472195, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.004076424520462751}, {"id": 19, "seek": 17736, "start": 198.36, "end": 206.36, "text": " and this execution of the system call is on hold, so it's like post, and it's also waiting.", "tokens": [293, 341, 15058, 295, 264, 1185, 818, 307, 322, 1797, 11, 370, 309, 311, 411, 2183, 11, 293, 309, 311, 611, 3806, 13], "temperature": 0.0, "avg_logprob": -0.2135736412472195, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.004076424520462751}, {"id": 20, "seek": 20636, "start": 206.36, "end": 214.36, "text": " Meanwhile, on the other side can also send an event to the daemon that something is happening", "tokens": [13879, 11, 322, 264, 661, 1252, 393, 611, 2845, 364, 2280, 281, 264, 1120, 36228, 300, 746, 307, 2737], "temperature": 0.0, "avg_logprob": -0.1505784579685756, "compression_ratio": 1.5449438202247192, "no_speech_prob": 0.00142373435664922}, {"id": 21, "seek": 20636, "start": 214.36, "end": 221.36, "text": " on the system, and daemon can read from this event that there is some process called bash,", "tokens": [322, 264, 1185, 11, 293, 1120, 36228, 393, 1401, 490, 341, 2280, 300, 456, 307, 512, 1399, 1219, 46183, 11], "temperature": 0.0, "avg_logprob": -0.1505784579685756, "compression_ratio": 1.5449438202247192, "no_speech_prob": 0.00142373435664922}, {"id": 22, "seek": 20636, "start": 221.36, "end": 235.36, "text": " and it wants to accept this PS command, and it has PID 500, so it does a rules evaluation,", "tokens": [293, 309, 2738, 281, 3241, 341, 8168, 5622, 11, 293, 309, 575, 430, 2777, 5923, 11, 370, 309, 775, 257, 4474, 13344, 11], "temperature": 0.0, "avg_logprob": -0.1505784579685756, "compression_ratio": 1.5449438202247192, "no_speech_prob": 0.00142373435664922}, {"id": 23, "seek": 23536, "start": 235.36, "end": 243.36, "text": " and when the decision is allowed, it sends affinity response to the kernel, and kernel", "tokens": [293, 562, 264, 3537, 307, 4350, 11, 309, 14790, 39703, 4134, 281, 264, 28256, 11, 293, 28256], "temperature": 0.0, "avg_logprob": -0.17027156352996825, "compression_ratio": 1.3951612903225807, "no_speech_prob": 0.0005886574508622289}, {"id": 24, "seek": 23536, "start": 243.36, "end": 253.36, "text": " will let this exact V eventually finish with success. If the decision was denied, then", "tokens": [486, 718, 341, 1900, 691, 4728, 2413, 365, 2245, 13, 759, 264, 3537, 390, 17774, 11, 550], "temperature": 0.0, "avg_logprob": -0.17027156352996825, "compression_ratio": 1.3951612903225807, "no_speech_prob": 0.0005886574508622289}, {"id": 25, "seek": 25336, "start": 253.36, "end": 267.36, "text": " this exact V will return error code. So the daemon is the main part of the project, and", "tokens": [341, 1900, 691, 486, 2736, 6713, 3089, 13, 407, 264, 1120, 36228, 307, 264, 2135, 644, 295, 264, 1716, 11, 293], "temperature": 0.0, "avg_logprob": -0.12080950432635368, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.0005205002380535007}, {"id": 26, "seek": 25336, "start": 267.36, "end": 279.36, "text": " it works with the rules, and there are rules and trust, and both have power over what to", "tokens": [309, 1985, 365, 264, 4474, 11, 293, 456, 366, 4474, 293, 3361, 11, 293, 1293, 362, 1347, 670, 437, 281], "temperature": 0.0, "avg_logprob": -0.12080950432635368, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.0005205002380535007}, {"id": 27, "seek": 27936, "start": 279.36, "end": 288.36, "text": " do with the files and their execution system. So these rules, they are pretty similar to", "tokens": [360, 365, 264, 7098, 293, 641, 15058, 1185, 13, 407, 613, 4474, 11, 436, 366, 1238, 2531, 281], "temperature": 0.0, "avg_logprob": -0.19372506072555762, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.001265990431420505}, {"id": 28, "seek": 27936, "start": 288.36, "end": 297.36, "text": " SC Linux, they have also subject object notation, and they start with the decision part. Decision", "tokens": [9028, 18734, 11, 436, 362, 611, 3983, 2657, 24657, 11, 293, 436, 722, 365, 264, 3537, 644, 13, 12427, 1991], "temperature": 0.0, "avg_logprob": -0.19372506072555762, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.001265990431420505}, {"id": 29, "seek": 27936, "start": 297.36, "end": 306.36, "text": " part is, it can be allow or deny, or it can be combined with syslog or audit attribute.", "tokens": [644, 307, 11, 309, 393, 312, 2089, 420, 15744, 11, 420, 309, 393, 312, 9354, 365, 262, 749, 4987, 420, 17748, 19667, 13], "temperature": 0.0, "avg_logprob": -0.19372506072555762, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.001265990431420505}, {"id": 30, "seek": 30636, "start": 306.36, "end": 314.36, "text": " The second part of the rule is permission, which can be open or exec, but that refers", "tokens": [440, 1150, 644, 295, 264, 4978, 307, 11226, 11, 597, 393, 312, 1269, 420, 4454, 11, 457, 300, 14942], "temperature": 0.0, "avg_logprob": -0.20807604491710663, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0019857988227158785}, {"id": 31, "seek": 30636, "start": 314.36, "end": 321.36, "text": " to the original system call from which that event comes from, and any is like place order", "tokens": [281, 264, 3380, 1185, 818, 490, 597, 300, 2280, 1487, 490, 11, 293, 604, 307, 411, 1081, 1668], "temperature": 0.0, "avg_logprob": -0.20807604491710663, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0019857988227158785}, {"id": 32, "seek": 30636, "start": 321.36, "end": 329.36, "text": " and will match both of them. We also support just these two because this is, because FA", "tokens": [293, 486, 2995, 1293, 295, 552, 13, 492, 611, 1406, 445, 613, 732, 570, 341, 307, 11, 570, 19894], "temperature": 0.0, "avg_logprob": -0.20807604491710663, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0019857988227158785}, {"id": 33, "seek": 32936, "start": 329.36, "end": 345.36, "text": " notified us that. Our subject is what is executing, and object is what is being executed. So this", "tokens": [18013, 505, 300, 13, 2621, 3983, 307, 437, 307, 32368, 11, 293, 2657, 307, 437, 307, 885, 17577, 13, 407, 341], "temperature": 0.0, "avg_logprob": -0.2068033624202647, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.0008904414717108011}, {"id": 34, "seek": 32936, "start": 345.36, "end": 358.36, "text": " trust is a very important concept here in FA policy, it can be defined by user, and it", "tokens": [3361, 307, 257, 588, 1021, 3410, 510, 294, 19894, 3897, 11, 309, 393, 312, 7642, 538, 4195, 11, 293, 309], "temperature": 0.0, "avg_logprob": -0.2068033624202647, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.0008904414717108011}, {"id": 35, "seek": 35836, "start": 358.36, "end": 368.36, "text": " is usually done by CLI, and that there is also, or we don't have to add system binaries or", "tokens": [307, 2673, 1096, 538, 12855, 40, 11, 293, 300, 456, 307, 611, 11, 420, 321, 500, 380, 362, 281, 909, 1185, 5171, 4889, 420], "temperature": 0.0, "avg_logprob": -0.1581022885380959, "compression_ratio": 1.3953488372093024, "no_speech_prob": 0.0013472483260557055}, {"id": 36, "seek": 35836, "start": 368.36, "end": 378.36, "text": " files to the trust, because they are trusted by default, they are loaded by this backend,", "tokens": [7098, 281, 264, 3361, 11, 570, 436, 366, 16034, 538, 7576, 11, 436, 366, 13210, 538, 341, 38087, 11], "temperature": 0.0, "avg_logprob": -0.1581022885380959, "compression_ratio": 1.3953488372093024, "no_speech_prob": 0.0013472483260557055}, {"id": 37, "seek": 37836, "start": 378.36, "end": 388.36, "text": " so this is done automatically, so when we run FA policy by default, it somehow works. So", "tokens": [370, 341, 307, 1096, 6772, 11, 370, 562, 321, 1190, 19894, 3897, 538, 7576, 11, 309, 6063, 1985, 13, 407], "temperature": 0.0, "avg_logprob": -0.17908755215731534, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0017565740272402763}, {"id": 38, "seek": 37836, "start": 388.36, "end": 396.36, "text": " these are some rules example, I don't know if you see them, but the first one says, the", "tokens": [613, 366, 512, 4474, 1365, 11, 286, 500, 380, 458, 498, 291, 536, 552, 11, 457, 264, 700, 472, 1619, 11, 264], "temperature": 0.0, "avg_logprob": -0.17908755215731534, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0017565740272402763}, {"id": 39, "seek": 37836, "start": 396.36, "end": 403.36, "text": " first one allows loading of trusted shared libraries on the system, and the second one", "tokens": [700, 472, 4045, 15114, 295, 16034, 5507, 15148, 322, 264, 1185, 11, 293, 264, 1150, 472], "temperature": 0.0, "avg_logprob": -0.17908755215731534, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.0017565740272402763}, {"id": 40, "seek": 40336, "start": 403.36, "end": 416.36, "text": " opposed to that, like denies untrusted libraries. Third one will allow execution of trusted", "tokens": [8851, 281, 300, 11, 411, 1441, 530, 1701, 81, 6589, 15148, 13, 12548, 472, 486, 2089, 15058, 295, 16034], "temperature": 0.0, "avg_logprob": -0.2378138830495435, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.0014501436380669475}, {"id": 41, "seek": 40336, "start": 416.36, "end": 428.36, "text": " files on the system, and fourth one allows using of scripts, which are trusted on the", "tokens": [7098, 322, 264, 1185, 11, 293, 6409, 472, 4045, 1228, 295, 23294, 11, 597, 366, 16034, 322, 264], "temperature": 0.0, "avg_logprob": -0.2378138830495435, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.0014501436380669475}, {"id": 42, "seek": 42836, "start": 428.36, "end": 438.36, "text": " system, and fifth denies untrusted scripts. And there are two cage of rules, first one", "tokens": [1185, 11, 293, 9266, 1441, 530, 1701, 81, 6589, 23294, 13, 400, 456, 366, 732, 17302, 295, 4474, 11, 700, 472], "temperature": 0.0, "avg_logprob": -0.2275022838426673, "compression_ratio": 1.359375, "no_speech_prob": 0.00030476300162263215}, {"id": 43, "seek": 42836, "start": 438.36, "end": 451.36, "text": " is for execution of all files, and the seventh is open for everything. So they are also", "tokens": [307, 337, 15058, 295, 439, 7098, 11, 293, 264, 17875, 307, 1269, 337, 1203, 13, 407, 436, 366, 611], "temperature": 0.0, "avg_logprob": -0.2275022838426673, "compression_ratio": 1.359375, "no_speech_prob": 0.00030476300162263215}, {"id": 44, "seek": 45136, "start": 451.36, "end": 460.36, "text": " described here. So when we want to install FA policy demand, it's very simple, we can", "tokens": [7619, 510, 13, 407, 562, 321, 528, 281, 3625, 19894, 3897, 4733, 11, 309, 311, 588, 2199, 11, 321, 393], "temperature": 0.0, "avg_logprob": -0.18221843943876379, "compression_ratio": 1.5027932960893855, "no_speech_prob": 0.0009669003775343299}, {"id": 45, "seek": 45136, "start": 460.36, "end": 468.36, "text": " just use normal Federa program for installation, which is called DNF, this is one liner, when", "tokens": [445, 764, 2710, 7772, 1663, 1461, 337, 13260, 11, 597, 307, 1219, 21500, 37, 11, 341, 307, 472, 24468, 11, 562], "temperature": 0.0, "avg_logprob": -0.18221843943876379, "compression_ratio": 1.5027932960893855, "no_speech_prob": 0.0009669003775343299}, {"id": 46, "seek": 45136, "start": 468.36, "end": 476.36, "text": " we install it, the installation consists of, or it installs three packages to the system,", "tokens": [321, 3625, 309, 11, 264, 13260, 14689, 295, 11, 420, 309, 3625, 82, 1045, 17401, 281, 264, 1185, 11], "temperature": 0.0, "avg_logprob": -0.18221843943876379, "compression_ratio": 1.5027932960893855, "no_speech_prob": 0.0009669003775343299}, {"id": 47, "seek": 47636, "start": 476.36, "end": 483.36, "text": " the first one is FA policy, which is main package, which contains demon and CLI. The", "tokens": [264, 700, 472, 307, 19894, 3897, 11, 597, 307, 2135, 7372, 11, 597, 8306, 14283, 293, 12855, 40, 13, 440], "temperature": 0.0, "avg_logprob": -0.26591977206143463, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.00011875265772687271}, {"id": 48, "seek": 47636, "start": 483.36, "end": 493.36, "text": " second one is RPM plugin for FA policy, which works, or which, during the RPM transactions,", "tokens": [1150, 472, 307, 37389, 23407, 337, 19894, 3897, 11, 597, 1985, 11, 420, 597, 11, 1830, 264, 37389, 16856, 11], "temperature": 0.0, "avg_logprob": -0.26591977206143463, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.00011875265772687271}, {"id": 49, "seek": 47636, "start": 493.36, "end": 503.36, "text": " it sends the new metadata that are needed for correct behavior, so it sends it to the", "tokens": [309, 14790, 264, 777, 26603, 300, 366, 2978, 337, 3006, 5223, 11, 370, 309, 14790, 309, 281, 264], "temperature": 0.0, "avg_logprob": -0.26591977206143463, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.00011875265772687271}, {"id": 50, "seek": 50336, "start": 503.36, "end": 511.36, "text": " demon, and then demon can work with them, and they are up to date, and it also notifies", "tokens": [14283, 11, 293, 550, 14283, 393, 589, 365, 552, 11, 293, 436, 366, 493, 281, 4002, 11, 293, 309, 611, 406, 11221], "temperature": 0.0, "avg_logprob": -0.14912613955411044, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.000323897460475564}, {"id": 51, "seek": 50336, "start": 511.36, "end": 519.36, "text": " the demon when the transaction ends, so it can behave, the demon can behave accordingly.", "tokens": [264, 14283, 562, 264, 14425, 5314, 11, 370, 309, 393, 15158, 11, 264, 14283, 393, 15158, 19717, 13], "temperature": 0.0, "avg_logprob": -0.14912613955411044, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.000323897460475564}, {"id": 52, "seek": 50336, "start": 519.36, "end": 528.36, "text": " And the third one is service package for FA policy, with the service policy. So when", "tokens": [400, 264, 2636, 472, 307, 2643, 7372, 337, 19894, 3897, 11, 365, 264, 2643, 3897, 13, 407, 562], "temperature": 0.0, "avg_logprob": -0.14912613955411044, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.000323897460475564}, {"id": 53, "seek": 52836, "start": 528.36, "end": 535.36, "text": " the installation is complete, we can start FA policy. There are several ways how to do", "tokens": [264, 13260, 307, 3566, 11, 321, 393, 722, 19894, 3897, 13, 821, 366, 2940, 2098, 577, 281, 360], "temperature": 0.0, "avg_logprob": -0.1476678421248251, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.004803868476301432}, {"id": 54, "seek": 52836, "start": 535.36, "end": 542.36, "text": " that. In our examples, we will use debug deny, because we are interested in deny events, or", "tokens": [300, 13, 682, 527, 5110, 11, 321, 486, 764, 24083, 15744, 11, 570, 321, 366, 3102, 294, 15744, 3931, 11, 420], "temperature": 0.0, "avg_logprob": -0.1476678421248251, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.004803868476301432}, {"id": 55, "seek": 52836, "start": 542.36, "end": 550.36, "text": " debugging of the deny events, and we don't need anything more. If we would like to see", "tokens": [45592, 295, 264, 15744, 3931, 11, 293, 321, 500, 380, 643, 1340, 544, 13, 759, 321, 576, 411, 281, 536], "temperature": 0.0, "avg_logprob": -0.1476678421248251, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.004803868476301432}, {"id": 56, "seek": 55036, "start": 550.36, "end": 559.36, "text": " also allowed events, or something else, some other debug information, it can be done via", "tokens": [611, 4350, 3931, 11, 420, 746, 1646, 11, 512, 661, 24083, 1589, 11, 309, 393, 312, 1096, 5766], "temperature": 0.0, "avg_logprob": -0.1896002942865545, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.0013038780307397246}, {"id": 57, "seek": 55036, "start": 559.36, "end": 568.36, "text": " debug option, and when we want to run it on something more like production environment,", "tokens": [24083, 3614, 11, 293, 562, 321, 528, 281, 1190, 309, 322, 746, 544, 411, 4265, 2823, 11], "temperature": 0.0, "avg_logprob": -0.1896002942865545, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.0013038780307397246}, {"id": 58, "seek": 55036, "start": 568.36, "end": 578.36, "text": " we can use system CTL. So when we run it, FA policy will tell us that it's listening for", "tokens": [321, 393, 764, 1185, 19529, 43, 13, 407, 562, 321, 1190, 309, 11, 19894, 3897, 486, 980, 505, 300, 309, 311, 4764, 337], "temperature": 0.0, "avg_logprob": -0.1896002942865545, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.0013038780307397246}, {"id": 59, "seek": 57836, "start": 578.36, "end": 586.36, "text": " these events, so it's okay, and we can start playing with this. So there are, I prepared", "tokens": [613, 3931, 11, 370, 309, 311, 1392, 11, 293, 321, 393, 722, 2433, 365, 341, 13, 407, 456, 366, 11, 286, 4927], "temperature": 0.0, "avg_logprob": -0.16204539341713065, "compression_ratio": 1.502824858757062, "no_speech_prob": 0.0005195282865315676}, {"id": 60, "seek": 57836, "start": 586.36, "end": 593.36, "text": " a few scenarios to demonstrate how it works. So the first scenario is called execution", "tokens": [257, 1326, 15077, 281, 11698, 577, 309, 1985, 13, 407, 264, 700, 9005, 307, 1219, 15058], "temperature": 0.0, "avg_logprob": -0.16204539341713065, "compression_ratio": 1.502824858757062, "no_speech_prob": 0.0005195282865315676}, {"id": 61, "seek": 57836, "start": 593.36, "end": 603.36, "text": " of untrusted software. So I downloaded this file, this is Python script called exploit.py,", "tokens": [295, 1701, 81, 6589, 4722, 13, 407, 286, 21748, 341, 3991, 11, 341, 307, 15329, 5755, 1219, 25924, 13, 8200, 11], "temperature": 0.0, "avg_logprob": -0.16204539341713065, "compression_ratio": 1.502824858757062, "no_speech_prob": 0.0005195282865315676}, {"id": 62, "seek": 60336, "start": 603.36, "end": 614.36, "text": " and I want to try to run it. I make it executable, and when I run it, I can see that it's blocked,", "tokens": [293, 286, 528, 281, 853, 281, 1190, 309, 13, 286, 652, 309, 7568, 712, 11, 293, 562, 286, 1190, 309, 11, 286, 393, 536, 300, 309, 311, 15470, 11], "temperature": 0.0, "avg_logprob": -0.12235147612435478, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.001333186635747552}, {"id": 63, "seek": 60336, "start": 614.36, "end": 624.36, "text": " and we can see down there that there is deny event from FA policy that says that this exploit.py", "tokens": [293, 321, 393, 536, 760, 456, 300, 456, 307, 15744, 2280, 490, 19894, 3897, 300, 1619, 300, 341, 25924, 13, 8200], "temperature": 0.0, "avg_logprob": -0.12235147612435478, "compression_ratio": 1.4661654135338347, "no_speech_prob": 0.001333186635747552}, {"id": 64, "seek": 62436, "start": 624.36, "end": 634.36, "text": " is not trusted, so it cannot be run. So it blocked this unknown program to be.", "tokens": [50364, 307, 406, 16034, 11, 370, 309, 2644, 312, 1190, 13, 407, 309, 15470, 341, 9841, 1461, 281, 312, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3151111602783203, "compression_ratio": 1.0684931506849316, "no_speech_prob": 0.004397959914058447}, {"id": 65, "seek": 65436, "start": 654.36, "end": 664.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.8145478566487631, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.991876482963562}, {"id": 66, "seek": 68436, "start": 684.36, "end": 694.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.547909140586853, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9900842905044556}, {"id": 67, "seek": 71436, "start": 714.36, "end": 724.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3898279666900635, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9879853129386902}, {"id": 68, "seek": 74436, "start": 744.36, "end": 754.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.28838926553726196, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9878657460212708}, {"id": 69, "seek": 77436, "start": 774.36, "end": 784.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3003003199895223, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9873464703559875}, {"id": 70, "seek": 80436, "start": 804.36, "end": 814.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2890736659367879, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9852268695831299}, {"id": 71, "seek": 83436, "start": 834.36, "end": 844.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2723597089449565, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9846787452697754}, {"id": 72, "seek": 86436, "start": 864.36, "end": 874.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21968573331832886, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9843504428863525}, {"id": 73, "seek": 89436, "start": 894.36, "end": 904.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24852987130482992, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9833734035491943}, {"id": 74, "seek": 92436, "start": 924.36, "end": 934.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2585419217745463, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9846299290657043}, {"id": 75, "seek": 95436, "start": 954.36, "end": 964.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24241097768147787, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.983944833278656}, {"id": 76, "seek": 98436, "start": 984.36, "end": 994.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2227992614110311, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9839678406715393}, {"id": 77, "seek": 101436, "start": 1014.36, "end": 1024.3600000000001, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.23361674944559732, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9842588901519775}, {"id": 78, "seek": 104436, "start": 1044.36, "end": 1054.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.23354379336039224, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9831323027610779}, {"id": 79, "seek": 107436, "start": 1074.36, "end": 1084.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2327484885851542, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9826844334602356}, {"id": 80, "seek": 110436, "start": 1104.36, "end": 1114.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.23214644193649292, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9830011129379272}, {"id": 81, "seek": 113436, "start": 1134.36, "end": 1144.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2057861884435018, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9831152558326721}, {"id": 82, "seek": 116436, "start": 1164.36, "end": 1174.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2192777395248413, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9819122552871704}, {"id": 83, "seek": 119436, "start": 1194.36, "end": 1204.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22480509678522745, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9817715883255005}, {"id": 84, "seek": 122436, "start": 1224.36, "end": 1234.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22002434730529785, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9822522401809692}, {"id": 85, "seek": 125436, "start": 1254.36, "end": 1264.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21312475204467773, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9814001321792603}, {"id": 86, "seek": 128436, "start": 1284.36, "end": 1294.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1929099957148234, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9816411137580872}, {"id": 87, "seek": 131436, "start": 1314.36, "end": 1324.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19984964529673258, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9802128672599792}, {"id": 88, "seek": 134436, "start": 1344.36, "end": 1354.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19415716330210367, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.979740560054779}, {"id": 89, "seek": 137436, "start": 1374.36, "end": 1384.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20184115568796793, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9789432883262634}, {"id": 90, "seek": 140436, "start": 1404.36, "end": 1414.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1944113572438558, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9785020351409912}, {"id": 91, "seek": 143436, "start": 1434.36, "end": 1444.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1831161379814148, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9776911735534668}, {"id": 92, "seek": 146436, "start": 1464.36, "end": 1474.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18639951944351196, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.97849440574646}, {"id": 93, "seek": 149436, "start": 1494.36, "end": 1504.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24369466304779053, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9519065618515015}], "language": "en"}