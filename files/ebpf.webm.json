{"text": " Hi, everyone. So my name is Francis Daniel, and today I will present you Inspector Gadget, an EDPF-based tool to observe containers. So first of all, what are containers? Containers permits you to run applications isolated from each other. So on the figure on the right, you can see that there are actually three containers, and three applications, A, B, and C. To isolate and run those applications, we rely on a container engine like Cryo or container D. The container engine will ask to the operating kernel to the host operating system to create containers for us. So contrary to virtual machine, where you have a guest operating system and an host operating system, all containers here share the same host operating system. So container engine will ask to the kernel to create two containers, but sadly in the Linux kernel, there is no structure used to represent a container. Like you have the task structure, the presenter's task, there is no such structure. Instead, the container relies on several features provided to you by the kernel. To have security isolation, you will rely on the name spaces. For example, with the moon name spaces, each container will have its own set of files, and for example, container A will not be able to access file of container B except explicit sharing. To isolate these time resources, you will use the C group. So you will be able to dedicate a resource to one container. For example, with the memory C group, you will be able to limit the memory footprint of a container. For example, you will set the limit to 2 gigabytes, and if your container allocates and tries to touch 3 gigabytes, it will be out of memory keel. So containers are really cool because they permit you to isolate different workloads. Sadly, using them pose several problems, particularly when something is wrong and to debug them. First, it is harder to attach debugger to a running application. You can still do it, but it is not as simple as running GDB and running things locally. Also, you will need to take into account the communication between different containers. Nowadays, it is not common to explode your application into several micro services. For example, if you have a website, you will have maybe one container for the web server and another container for the database engine. So you will need to be sure that those two containers communicate, otherwise your website will just do nothing. To do so, we developed Inspector Gadget, which is a Swiss Army knife based on EBPF. It comes with actually two binary local gadgets, the first one to debug locally running container and cut-cutter gadget, which this time focus on containers running in Kubernetes cluster. So on the figure, I will show you the different tools offered by Inspector Gadget and which part of the kernel they permit to monitor. The first type of gadget we have are the tracer. The tracer will basically print events as they are going on the standard output. So for example, with TraceExec, you will be able to trace the call made to the syscall exec. With TraceMoon, you will be able to monitor the call to the syscall moon, which can be pretty useful when you need to mount volume. And for example, with TraceOutOfMemoryKill, you will trace when the OutOfMemoryKiller kills one application. Then we will find the profile category. So for example, the profile category, you will make it run for a given amount of time. And with ProfileLockIO, you will get information regarding the distribution of your input outputs. Then you will find the snapshot category, which will give you some information on the system as it is running at time t. So for example, with snapshot process, you will be able to get all the processes which are running in your containers, or you can also get this information for your world Kubernetes cluster. Then you will find the top category. So the top category mimics the top command line interface tool, as it will print ranking on information, which will be actualized each second. So for example, with top file, you will get information regarding the file that are the most accessed. And the last category is there is only one gadget in this category, and it is TraceLoop. TraceLoop can be seen as a trace bus for containers. So you will be able to monitor all the syscoles done by your container. OK. So before going into the internal architecture of InspectorGadget and what is eBPF, I will show you a small demonstration to compile local gadget TraceExec, so the tool to trace exact syscoles made by container running locally, and ExactSnoop, which is an already existing eBPF tool. OK. So we will first create a test container. So the test container will execute sleep periodically. And then we will now trace the new processes creation using ExactSnoop. So ExactSnoop is an eBPF tool based and made by IOvisorBCC people. So as you can see, there are two types of sleep. There is one sleep, 0.3 seconds, and one other sleep, 0.5 seconds. Sadly, in my container, I only use 0.3 seconds, so the 0.5 is done by the host. And I'm not interested at all at processes running in my host. To do so, I will use local gadget to trace the same types of events, but this time I will be able to get only the event inside the container. And as you can see, we will get the same information plus the name of the container when the event occurs. OK. So before going into the internal architecture of Inspector Gadget, what is eBPF? According to Brandon Gregg, eBPF does to Linux what JavaScript does to HTML. It permits you to run mini-program which are safe into a virtual machine inside a kernel which will be run only on some particular event, for example, disk IO. Sadly, the eBPF program safety comes at a price. You are kind of limited. For example, you cannot have an eBPF program which will have an infinite loop or not statically bounded loop. Also, there is no function like malloc or camalloc, so you cannot allocate dynamically memory, but you will see that there are some possibilities to cope with this limitation. OK. Inside the kernel, you will find two software components which are related to eBPF. The first one is the verifier. It will take as input your eBPF program and will ensure that it is safe. If this is the case, it will end your safe program to the just-in-time compiler. The just-in-time compiler will basically translate your eBPF bytecode to the machine code and it will install it to be run on some event. When you want to develop an eBPF program, you will write it in a syntax which is almost that of the C. You will then compile it using clang and the target eBPF to get an eBPF object file. So this eBPF object file will contain the eBPF bytecode. You will then include this eBPF object file into another program running in the userland. So to do so, you can use your favorite language. You can use C, you can use Golang, the alpentee of possibilities. So you will use this program and you will use also maps, eBPF maps. eBPF maps are data structure related to eBPF. It takes this plenty of different types of maps. You will get one eBPF map to represent array, one eBPF map to represent key value store. You have several possibilities. So when you want to load your eBPF program into the kernel, you will mainly use a library related to eBPF like eBPF in C or Cilium eBPF in Golang. So your eBPF program will be loaded into the kernel through the eBPF C-Score. It will be verified. If it is okay, it will be just in time compiled and installed to monitor some event. We will do the same with the map because for example, we will be able to use the map to either share information between several eBPF programs or between kernel land and user land as our eBPF program are run into the kernel. So now let's say that I have a process which called the exact C-Score. Then our eBPF program will be executed. It will write some information into the eBPF map and thanks to the library, I will be able to read this information and print it, for example, to the standard output. And then deal with them in user land. Okay, regarding local gadgets, the main component is the local gadget manager. So the local gadget manager at each time maintains a container collection. So it knows perfectly what are the running containers in the system at a given time. Indeed, we rely on rank fanotify to add containers to this container collection when containers are created and to remove them when they are deleted. We are also able to start some inspector gadget tracer like the one to trace the exact system core. So when we decide to start tracer, for example, the one to trace exact C-Score, we will not directly load the eBPF program. We will create a particular eBPF map that we will use to store information regarding our container of interest. Indeed, the eBPF program will be executed each time an event occurs and we need to do a filtering realing this. In the first demonstration, I was only interested into events occurring inside containers and not on the host. To do so, this eBPF map will contain the mooned namespace ID of the container which interests me. So when I will run my eBPF program, we will install the eBPF program and basically we basically compared to the eBPF code of the exact snoop that I presented into the first demonstration, we took it and we modified it to add this filtering. So basically with this code snippet, we will get the mooned namespace ID of the current task and we will compare it if it is present into this map or not. If it is not the case, we just do not care about this container and we just do not care about this task because it is not in our container. If it is the case, if the mooned namespace ID is inside the container, we will continue the execution of our eBPF program because we care about it. Okay, so now we will show you a more realistic world demonstration of local gadgets, particularly how to use it to verify the second profile. So okay, we will create an nginx container with a second profile installed. So second profile is a feature offered by the Linux kernel to allow or disallow the call of some syscall. So okay, I will create it, I wrote by hand the second profile that I gave to Docker. So okay, let's create it and now let's query the nginx server. Okay, some mistakes, maybe I forgot to add one syscall into the second profile. So I will stop the nginx container. Now we will start local gadget and I will start local gadget on a container, on one particular container, the nginx container. Note that it is perfectly possible to start the local gadget with a given container name even if this container name does not exist at the time because it will be added automatically thanks to the container correction and rank for notify. Okay, I will now run an nginx container but without any second profile, I will curl it. Now I will stop my container, it will automatically stop local gadget. Now I will just compare the two second profiles, the one that I wrote and the one generated by local gadget. Okay, I forgot the send file syscalls, so it can maybe explain some few bugs. So okay, let's run again the nginx container with this new second profile. Okay, and now it's the moment of truth, let's curl it and yeah, everything is okay. So yeah, basically local gadget really helps us to verify the second profile that I wrote by hand and more than that, it can generate for you second profile. Okay, so I told you about local gadget and when I presented you first inspector gadget, I told you it comes with two binary local gadget that I already presented and kept kept a gadget. So kept kept a gadget is designed to monitor containers inside Kubernetes cluster. So on the figure I represented the schematic of Kubernetes cluster, so on the left we have the developer laptop, on the right we have the Kubernetes cluster, so we have one node for the Kubernetes control plane and we have one worker node. First of all, we will need to deploy an inspector gadget pod on each node to be able to monitor the events occurring on this node. So we will create a diamond set, Kubernetes will deploy then an inspector gadget pod on each node of our cluster. Then we will want to trace a specific event, for example, the X axis goal, so we will use the kept kept a gadget trace exact command, we will ask to the control plane to create a trace CRD, so a trace CRD is a custom resource definition which is proper to inspector gadget and that we use mainly to start and stop tracer. So we will have also a trace CRD per node like we have one gadget pod per node. So we will create the eBPF program on the associated map, we will install it into the kernel, the eBPF program will be executed if there are some code to exec occurring on our node, those events will be written to a path buffer, a path buffer is a specific type of eBPF map, I saw it in the time to enter into the details. So we will be able to read this information from New Zealand and the events will be published to a stream, to a gRPC stream, we will then use kept kept a exact to read the gRPC stream and so the information will be printed on the developer laptop. So now I will show you a more realistic example about how to use kept kept a gadget to verify the container capabilities. So just before jumping into the demonstration, the capabilities are another feature by the kernel to limit what your application can do. So again time from the demonstration. Okay so this time I will deploy an nginux web server with some capabilities set. So here is the list of the capabilities, so for example you can see that there is the sysadmin capabilities which is not forcefully capabilities you want to but it seems nginux needs it to run so you don't have the choice. So I deployed it and suddenly it seems that there are some mistakes, so okay let's get some more information, okay operation not permitted, okay if I have an operation not permitted it may be because I forgot one capability into my deployment. So on the bottom I run the kept kept a gadget trace capabilities so as you can see I just want to get capabilities which are used in the namespace demo because it is the namespace where my nginux container is and so the big difference between local gadget and kept kept a gadget is that kept kept a gadget will give us information regarding Kubernetes. So for each event we will get the node where the event occurs, the namespace, the pod and the container. It is really aware of the fact that it is running inside Kubernetes. So okay I deleted my deployment, I will run it again, okay we run the whole demonstration for the beginning. Okay so during this time if someone has quick question or if there was one point that wasn't clear you can take it quickly. Okay everything was clear until this moment, so perfect. So okay let's delete our previews deployment and now it can take a bit of time because it is in Kubernetes so yeah compared to when running locally you need to take into a good communication with remote services. Okay now I will deploy my nginux deployment again and so we will get the information directly so as you can see we have the name of the capabilities and when they are used and we are also in this column if it is allowed by the kernel or if it is denied so all the above capabilities were allowed and the shown capabilities was denied. Yeah I think I forgot it in my deployment file so I will just delete my deployment file again, yeah there is a lot of back and forth but suddenly I do not think we have a lot of choice. Yeah again if there is quick question during the deleting and the redeployment of the whole thing I can take it and so I will update my deployment file to add the capabilities that I missed. Okay let's deploy it again and just cross the finger but it is the last time. Okay let's wait for everything to be ready. Okay take also a bit of time so that's okay should do the trick and anyway I do not think we can wait faster so okay everything seems to be ready now we will get the IP of our pod we will now kill it and now it's the moment of truth and as we can see we get the nginux default message so everything was fine I just forgot to add one capability in my deployment file so it's now time to conclude so as I show you during this presentation inspector gadget permits to monitor containers both running locally with local gadget and both unrunning in Kubernetes cluster with cup cutter gadget it is of precious help to debug this application I really like to use gdb but and any kind of debugger but in the case that I show you it would be not so helpful particularly because if you run gdb for the second profile you will just get a narrow number and it will not be so helpful and the same with the capability example we will not be able to know why the syscall failed we will just know it failed with a narrow number but kind of hard to say it was because of the missing capability so as a future work we plan to improve the scaling of inspector gadget because I told you we use cup cutter exact to read the grpc stream and suddenly doesn't scale very well we also plan to add a new gadget and as inspector gadgets is an open source software if you have any idea of a gadget or if you want to contribute one I will be really happy to see your contribution and to review it so you can find us on our website inspector gadget.io we are also on github so under the inspector gadget organization and we also have a channel in the kubernetes slack so inspector gadget so yeah if one day you use inspector gadget and there is something that you do not understand please just feel free to come to the channel and ask we will be really we are here to help you and it will be a real pleasure to chat with you so I thank you a lot for your attention and if you have any question feel free to ask thank you thank you very interesting talk I would like to know I've seen that you were deploying the agents as a demon set so you were running it in all the nodes I was wondering if you can just tailor it to one single node because you know that the the current workload that you want to check or the current part you want to check is there second question would be I understand that this is really big for for debugging environments would you do you think that this would be ready if you had an incident or something going on that you want to investigate in a production environment okay just to be sure that I understood correctly your question you were asking precision when I deploy the inspector gadget pod I deployed it in each node in the kubernetes cluster and so you wanted to know if it is possible to not deploy it on each node yes perfectly there is and related to that when you're running the the comments from your computer does it apply to all nodes at the same time or can you tailor out so to just go target it to one node or something no you can you can target one node so you can basically you can filter by several you have three possibilities to filter you can filter by node you can filter by name space and you can filter by pod name even container name and of course you can mix all of this I was a bit quick regarding the demonstration on this but yeah you have yeah you can do a lot of filtering so yeah so you can do you can deploy the inspector gadget pod on each node and then filter by no by node name but even though if you know that there is one specific problem occurring on one particular node you can deploy the pod on only this specific node we had we have an option to do so with capital gadget deploy to only say to specify which node you want to deploy it thank you you're welcome thanks for the talk again I'm just wondering if you can send the metrics to Grafana or something do to do the filtering and the querying around is that possible so just to be sure you asked if I can send the metrics to Grafana yeah the traces that okay so we plan to we we are actually developing it a lot and we are actually working on it a lot and we plan to add an exporter to Prometheus all right but yeah it is still I would not say work in progress but thinking in progress all right yeah but nonetheless nonetheless if you're really interested into Prometheus I think there is only if you go to the inspector gadget repository there will be you know on the right there is a used by and so there is a project which does the exporting to Prometheus but this is not us who developed it and we plan to yeah there is us there is a lot of things that we want to do actually and yeah Prometheus is on our to the list and on the things that we want to support all right thanks then I think we're done oh one more question yeah I have a question regarding this demon said that it should be installed on the Kubernetes nodes is recommended to it like keep it there always or just install when you need to debug and then remove it back I'm sorry can you please repeat it this demon said on the Kubernetes nodes is it recommended to keep it there for always like or just install for the back and then remove back in the diamond set if I can this remote component no so basically the question was about when I deploy the inspector gadget pod if it is recommended to have it running it for a long time or just shortly no clearly you should not have a running you should not have it running for a long time as we install ebpf program we need to have some privilege and we need for example the capsis admin and all this sort of stuff we cannot use the user name of space which were which was added recently in Kubernetes so no you just deploy it you collect the matrix you collect the you monitor the events you want to monitor and then you just undeploy it so undeploying its specter gadget is as simple as deploying it is one command line interface call and you are done so yeah just avoid it having it running for a long time it's it is a tool to debug so it would be like if you run your application all the time with gdb attached to be kind of how do so yeah no is there a measurable performance impact on of having the agent deployed in your cluster since it's measuring all these things so you are asking about if when we monitor event if we have a decrease in performance right so not so much and it would be related to the world ebpf as ebpf program are running to the kernel you do not have you know context switch between userland and kernel land so it is kind of as quick and you avoid having a big decrease in performance okay thank you you're welcome then I think we're done thank you thank you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.68, "text": " Hi, everyone.", "tokens": [50364, 2421, 11, 1518, 13, 50698], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 1, "seek": 0, "start": 6.68, "end": 11.48, "text": " So my name is Francis Daniel, and today I will present you Inspector Gadget, an EDPF-based", "tokens": [50698, 407, 452, 1315, 307, 19648, 8033, 11, 293, 965, 286, 486, 1974, 291, 33402, 37171, 847, 11, 364, 462, 11373, 37, 12, 6032, 50938], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 2, "seek": 0, "start": 11.48, "end": 13.32, "text": " tool to observe containers.", "tokens": [50938, 2290, 281, 11441, 17089, 13, 51030], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 3, "seek": 0, "start": 13.32, "end": 16.36, "text": " So first of all, what are containers?", "tokens": [51030, 407, 700, 295, 439, 11, 437, 366, 17089, 30, 51182], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 4, "seek": 0, "start": 16.36, "end": 20.240000000000002, "text": " Containers permits you to run applications isolated from each other.", "tokens": [51182, 43732, 433, 30990, 291, 281, 1190, 5821, 14621, 490, 1184, 661, 13, 51376], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 5, "seek": 0, "start": 20.240000000000002, "end": 24.16, "text": " So on the figure on the right, you can see that there are actually three containers,", "tokens": [51376, 407, 322, 264, 2573, 322, 264, 558, 11, 291, 393, 536, 300, 456, 366, 767, 1045, 17089, 11, 51572], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 6, "seek": 0, "start": 24.16, "end": 29.92, "text": " and three applications, A, B, and C. To isolate and run those applications, we", "tokens": [51572, 293, 1045, 5821, 11, 316, 11, 363, 11, 293, 383, 13, 1407, 25660, 293, 1190, 729, 5821, 11, 321, 51860], "temperature": 0.0, "avg_logprob": -0.25977535967556936, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.1673177182674408}, {"id": 7, "seek": 2992, "start": 29.92, "end": 37.68, "text": " rely on a container engine like Cryo or container D. The container engine will ask to the operating", "tokens": [50364, 10687, 322, 257, 10129, 2848, 411, 12267, 78, 420, 10129, 413, 13, 440, 10129, 2848, 486, 1029, 281, 264, 7447, 50752], "temperature": 0.0, "avg_logprob": -0.1726845423380534, "compression_ratio": 2.1693121693121693, "no_speech_prob": 0.00636834092438221}, {"id": 8, "seek": 2992, "start": 37.68, "end": 42.44, "text": " kernel to the host operating system to create containers for us.", "tokens": [50752, 28256, 281, 264, 3975, 7447, 1185, 281, 1884, 17089, 337, 505, 13, 50990], "temperature": 0.0, "avg_logprob": -0.1726845423380534, "compression_ratio": 2.1693121693121693, "no_speech_prob": 0.00636834092438221}, {"id": 9, "seek": 2992, "start": 42.44, "end": 47.24, "text": " So contrary to virtual machine, where you have a guest operating system and an host", "tokens": [50990, 407, 19506, 281, 6374, 3479, 11, 689, 291, 362, 257, 8341, 7447, 1185, 293, 364, 3975, 51230], "temperature": 0.0, "avg_logprob": -0.1726845423380534, "compression_ratio": 2.1693121693121693, "no_speech_prob": 0.00636834092438221}, {"id": 10, "seek": 2992, "start": 47.24, "end": 53.96, "text": " operating system, all containers here share the same host operating system.", "tokens": [51230, 7447, 1185, 11, 439, 17089, 510, 2073, 264, 912, 3975, 7447, 1185, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1726845423380534, "compression_ratio": 2.1693121693121693, "no_speech_prob": 0.00636834092438221}, {"id": 11, "seek": 2992, "start": 53.96, "end": 58.68000000000001, "text": " So container engine will ask to the kernel to create two containers, but sadly in the", "tokens": [51566, 407, 10129, 2848, 486, 1029, 281, 264, 28256, 281, 1884, 732, 17089, 11, 457, 22023, 294, 264, 51802], "temperature": 0.0, "avg_logprob": -0.1726845423380534, "compression_ratio": 2.1693121693121693, "no_speech_prob": 0.00636834092438221}, {"id": 12, "seek": 5868, "start": 58.68, "end": 62.8, "text": " Linux kernel, there is no structure used to represent a container.", "tokens": [50364, 18734, 28256, 11, 456, 307, 572, 3877, 1143, 281, 2906, 257, 10129, 13, 50570], "temperature": 0.0, "avg_logprob": -0.21867165035671657, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.013402492739260197}, {"id": 13, "seek": 5868, "start": 62.8, "end": 67.44, "text": " Like you have the task structure, the presenter's task, there is no such structure.", "tokens": [50570, 1743, 291, 362, 264, 5633, 3877, 11, 264, 35594, 311, 5633, 11, 456, 307, 572, 1270, 3877, 13, 50802], "temperature": 0.0, "avg_logprob": -0.21867165035671657, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.013402492739260197}, {"id": 14, "seek": 5868, "start": 67.44, "end": 73.76, "text": " Instead, the container relies on several features provided to you by the kernel.", "tokens": [50802, 7156, 11, 264, 10129, 30910, 322, 2940, 4122, 5649, 281, 291, 538, 264, 28256, 13, 51118], "temperature": 0.0, "avg_logprob": -0.21867165035671657, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.013402492739260197}, {"id": 15, "seek": 5868, "start": 73.76, "end": 78.24, "text": " To have security isolation, you will rely on the name spaces.", "tokens": [51118, 1407, 362, 3825, 16001, 11, 291, 486, 10687, 322, 264, 1315, 7673, 13, 51342], "temperature": 0.0, "avg_logprob": -0.21867165035671657, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.013402492739260197}, {"id": 16, "seek": 5868, "start": 78.24, "end": 83.64, "text": " For example, with the moon name spaces, each container will have its own set of files,", "tokens": [51342, 1171, 1365, 11, 365, 264, 7135, 1315, 7673, 11, 1184, 10129, 486, 362, 1080, 1065, 992, 295, 7098, 11, 51612], "temperature": 0.0, "avg_logprob": -0.21867165035671657, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.013402492739260197}, {"id": 17, "seek": 8364, "start": 83.64, "end": 88.8, "text": " and for example, container A will not be able to access file of container B except", "tokens": [50364, 293, 337, 1365, 11, 10129, 316, 486, 406, 312, 1075, 281, 2105, 3991, 295, 10129, 363, 3993, 50622], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 18, "seek": 8364, "start": 88.8, "end": 91.12, "text": " explicit sharing.", "tokens": [50622, 13691, 5414, 13, 50738], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 19, "seek": 8364, "start": 91.12, "end": 95.6, "text": " To isolate these time resources, you will use the C group.", "tokens": [50738, 1407, 25660, 613, 565, 3593, 11, 291, 486, 764, 264, 383, 1594, 13, 50962], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 20, "seek": 8364, "start": 95.6, "end": 99.56, "text": " So you will be able to dedicate a resource to one container.", "tokens": [50962, 407, 291, 486, 312, 1075, 281, 30718, 257, 7684, 281, 472, 10129, 13, 51160], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 21, "seek": 8364, "start": 99.56, "end": 105.4, "text": " For example, with the memory C group, you will be able to limit the memory footprint", "tokens": [51160, 1171, 1365, 11, 365, 264, 4675, 383, 1594, 11, 291, 486, 312, 1075, 281, 4948, 264, 4675, 24222, 51452], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 22, "seek": 8364, "start": 105.4, "end": 106.64, "text": " of a container.", "tokens": [51452, 295, 257, 10129, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 23, "seek": 8364, "start": 106.64, "end": 113.2, "text": " For example, you will set the limit to 2 gigabytes, and if your container allocates", "tokens": [51514, 1171, 1365, 11, 291, 486, 992, 264, 4948, 281, 568, 42741, 11, 293, 498, 428, 10129, 12660, 1024, 51842], "temperature": 0.0, "avg_logprob": -0.1592252955717199, "compression_ratio": 1.937799043062201, "no_speech_prob": 0.16074004769325256}, {"id": 24, "seek": 11320, "start": 113.2, "end": 118.52000000000001, "text": " and tries to touch 3 gigabytes, it will be out of memory keel.", "tokens": [50364, 293, 9898, 281, 2557, 805, 42741, 11, 309, 486, 312, 484, 295, 4675, 803, 338, 13, 50630], "temperature": 0.0, "avg_logprob": -0.21305423535798726, "compression_ratio": 1.5731225296442688, "no_speech_prob": 0.004216435831040144}, {"id": 25, "seek": 11320, "start": 118.52000000000001, "end": 123.4, "text": " So containers are really cool because they permit you to isolate different workloads.", "tokens": [50630, 407, 17089, 366, 534, 1627, 570, 436, 13423, 291, 281, 25660, 819, 32452, 13, 50874], "temperature": 0.0, "avg_logprob": -0.21305423535798726, "compression_ratio": 1.5731225296442688, "no_speech_prob": 0.004216435831040144}, {"id": 26, "seek": 11320, "start": 123.4, "end": 129.4, "text": " Sadly, using them pose several problems, particularly when something is wrong and to debug them.", "tokens": [50874, 29628, 11, 1228, 552, 10774, 2940, 2740, 11, 4098, 562, 746, 307, 2085, 293, 281, 24083, 552, 13, 51174], "temperature": 0.0, "avg_logprob": -0.21305423535798726, "compression_ratio": 1.5731225296442688, "no_speech_prob": 0.004216435831040144}, {"id": 27, "seek": 11320, "start": 129.4, "end": 133.92000000000002, "text": " First, it is harder to attach debugger to a running application.", "tokens": [51174, 2386, 11, 309, 307, 6081, 281, 5085, 24083, 1321, 281, 257, 2614, 3861, 13, 51400], "temperature": 0.0, "avg_logprob": -0.21305423535798726, "compression_ratio": 1.5731225296442688, "no_speech_prob": 0.004216435831040144}, {"id": 28, "seek": 11320, "start": 133.92000000000002, "end": 139.96, "text": " You can still do it, but it is not as simple as running GDB and running things locally.", "tokens": [51400, 509, 393, 920, 360, 309, 11, 457, 309, 307, 406, 382, 2199, 382, 2614, 460, 27735, 293, 2614, 721, 16143, 13, 51702], "temperature": 0.0, "avg_logprob": -0.21305423535798726, "compression_ratio": 1.5731225296442688, "no_speech_prob": 0.004216435831040144}, {"id": 29, "seek": 13996, "start": 140.20000000000002, "end": 146.24, "text": " Also, you will need to take into account the communication between different containers.", "tokens": [50376, 2743, 11, 291, 486, 643, 281, 747, 666, 2696, 264, 6101, 1296, 819, 17089, 13, 50678], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 30, "seek": 13996, "start": 146.24, "end": 151.64000000000001, "text": " Nowadays, it is not common to explode your application into several micro services.", "tokens": [50678, 28908, 11, 309, 307, 406, 2689, 281, 21411, 428, 3861, 666, 2940, 4532, 3328, 13, 50948], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 31, "seek": 13996, "start": 151.64000000000001, "end": 157.64000000000001, "text": " For example, if you have a website, you will have maybe one container for the web server", "tokens": [50948, 1171, 1365, 11, 498, 291, 362, 257, 3144, 11, 291, 486, 362, 1310, 472, 10129, 337, 264, 3670, 7154, 51248], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 32, "seek": 13996, "start": 157.64000000000001, "end": 162.36, "text": " and another container for the database engine.", "tokens": [51248, 293, 1071, 10129, 337, 264, 8149, 2848, 13, 51484], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 33, "seek": 13996, "start": 162.36, "end": 166.84, "text": " So you will need to be sure that those two containers communicate, otherwise your website", "tokens": [51484, 407, 291, 486, 643, 281, 312, 988, 300, 729, 732, 17089, 7890, 11, 5911, 428, 3144, 51708], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 34, "seek": 13996, "start": 166.84, "end": 169.76000000000002, "text": " will just do nothing.", "tokens": [51708, 486, 445, 360, 1825, 13, 51854], "temperature": 0.0, "avg_logprob": -0.21862863457721213, "compression_ratio": 1.7872340425531914, "no_speech_prob": 0.06820749491453171}, {"id": 35, "seek": 16976, "start": 169.76, "end": 175.0, "text": " To do so, we developed Inspector Gadget, which is a Swiss Army knife based on EBPF.", "tokens": [50364, 1407, 360, 370, 11, 321, 4743, 33402, 37171, 847, 11, 597, 307, 257, 21965, 9583, 7976, 2361, 322, 50148, 47, 37, 13, 50626], "temperature": 0.0, "avg_logprob": -0.21448957305593588, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00382444029673934}, {"id": 36, "seek": 16976, "start": 175.0, "end": 180.95999999999998, "text": " It comes with actually two binary local gadgets, the first one to debug locally running container", "tokens": [50626, 467, 1487, 365, 767, 732, 17434, 2654, 37635, 11, 264, 700, 472, 281, 24083, 16143, 2614, 10129, 50924], "temperature": 0.0, "avg_logprob": -0.21448957305593588, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00382444029673934}, {"id": 37, "seek": 16976, "start": 180.95999999999998, "end": 188.04, "text": " and cut-cutter gadget, which this time focus on containers running in Kubernetes cluster.", "tokens": [50924, 293, 1723, 12, 6672, 391, 38090, 11, 597, 341, 565, 1879, 322, 17089, 2614, 294, 23145, 13630, 13, 51278], "temperature": 0.0, "avg_logprob": -0.21448957305593588, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00382444029673934}, {"id": 38, "seek": 16976, "start": 188.04, "end": 191.95999999999998, "text": " So on the figure, I will show you the different tools offered by Inspector Gadget and which", "tokens": [51278, 407, 322, 264, 2573, 11, 286, 486, 855, 291, 264, 819, 3873, 8059, 538, 33402, 37171, 847, 293, 597, 51474], "temperature": 0.0, "avg_logprob": -0.21448957305593588, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00382444029673934}, {"id": 39, "seek": 16976, "start": 191.95999999999998, "end": 196.35999999999999, "text": " part of the kernel they permit to monitor.", "tokens": [51474, 644, 295, 264, 28256, 436, 13423, 281, 6002, 13, 51694], "temperature": 0.0, "avg_logprob": -0.21448957305593588, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00382444029673934}, {"id": 40, "seek": 19636, "start": 196.36, "end": 198.92000000000002, "text": " The first type of gadget we have are the tracer.", "tokens": [50364, 440, 700, 2010, 295, 38090, 321, 362, 366, 264, 504, 12858, 13, 50492], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 41, "seek": 19636, "start": 198.92000000000002, "end": 203.92000000000002, "text": " The tracer will basically print events as they are going on the standard output.", "tokens": [50492, 440, 504, 12858, 486, 1936, 4482, 3931, 382, 436, 366, 516, 322, 264, 3832, 5598, 13, 50742], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 42, "seek": 19636, "start": 203.92000000000002, "end": 208.56, "text": " So for example, with TraceExec, you will be able to trace the call made to the syscall", "tokens": [50742, 407, 337, 1365, 11, 365, 1765, 617, 11149, 3045, 11, 291, 486, 312, 1075, 281, 13508, 264, 818, 1027, 281, 264, 262, 749, 45459, 50974], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 43, "seek": 19636, "start": 208.56, "end": 209.88000000000002, "text": " exec.", "tokens": [50974, 4454, 13, 51040], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 44, "seek": 19636, "start": 209.88000000000002, "end": 214.60000000000002, "text": " With TraceMoon, you will be able to monitor the call to the syscall moon, which can be", "tokens": [51040, 2022, 1765, 617, 46015, 11, 291, 486, 312, 1075, 281, 6002, 264, 818, 281, 264, 262, 749, 45459, 7135, 11, 597, 393, 312, 51276], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 45, "seek": 19636, "start": 214.60000000000002, "end": 218.48000000000002, "text": " pretty useful when you need to mount volume.", "tokens": [51276, 1238, 4420, 562, 291, 643, 281, 3746, 5523, 13, 51470], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 46, "seek": 19636, "start": 218.48000000000002, "end": 222.60000000000002, "text": " And for example, with TraceOutOfMemoryKill, you will trace when the OutOfMemoryKiller", "tokens": [51470, 400, 337, 1365, 11, 365, 1765, 617, 28353, 23919, 44, 443, 827, 42, 373, 11, 291, 486, 13508, 562, 264, 5925, 23919, 44, 443, 827, 42, 10497, 51676], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 47, "seek": 19636, "start": 222.60000000000002, "end": 225.68, "text": " kills one application.", "tokens": [51676, 14563, 472, 3861, 13, 51830], "temperature": 0.0, "avg_logprob": -0.1708645573368779, "compression_ratio": 1.8373015873015872, "no_speech_prob": 0.11275805532932281}, {"id": 48, "seek": 22568, "start": 225.68, "end": 229.24, "text": " Then we will find the profile category.", "tokens": [50364, 1396, 321, 486, 915, 264, 7964, 7719, 13, 50542], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 49, "seek": 22568, "start": 229.24, "end": 234.4, "text": " So for example, the profile category, you will make it run for a given amount of time.", "tokens": [50542, 407, 337, 1365, 11, 264, 7964, 7719, 11, 291, 486, 652, 309, 1190, 337, 257, 2212, 2372, 295, 565, 13, 50800], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 50, "seek": 22568, "start": 234.4, "end": 241.48000000000002, "text": " And with ProfileLockIO, you will get information regarding the distribution of your input outputs.", "tokens": [50800, 400, 365, 6039, 794, 43, 1560, 15167, 11, 291, 486, 483, 1589, 8595, 264, 7316, 295, 428, 4846, 23930, 13, 51154], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 51, "seek": 22568, "start": 241.48000000000002, "end": 246.28, "text": " Then you will find the snapshot category, which will give you some information on the", "tokens": [51154, 1396, 291, 486, 915, 264, 30163, 7719, 11, 597, 486, 976, 291, 512, 1589, 322, 264, 51394], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 52, "seek": 22568, "start": 246.28, "end": 248.84, "text": " system as it is running at time t.", "tokens": [51394, 1185, 382, 309, 307, 2614, 412, 565, 256, 13, 51522], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 53, "seek": 22568, "start": 248.84, "end": 252.60000000000002, "text": " So for example, with snapshot process, you will be able to get all the processes which", "tokens": [51522, 407, 337, 1365, 11, 365, 30163, 1399, 11, 291, 486, 312, 1075, 281, 483, 439, 264, 7555, 597, 51710], "temperature": 0.0, "avg_logprob": -0.15174310775030228, "compression_ratio": 1.8663793103448276, "no_speech_prob": 0.0136702386662364}, {"id": 54, "seek": 25260, "start": 252.6, "end": 258.6, "text": " are running in your containers, or you can also get this information for your world Kubernetes", "tokens": [50364, 366, 2614, 294, 428, 17089, 11, 420, 291, 393, 611, 483, 341, 1589, 337, 428, 1002, 23145, 50664], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 55, "seek": 25260, "start": 258.6, "end": 261.0, "text": " cluster.", "tokens": [50664, 13630, 13, 50784], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 56, "seek": 25260, "start": 261.0, "end": 262.96, "text": " Then you will find the top category.", "tokens": [50784, 1396, 291, 486, 915, 264, 1192, 7719, 13, 50882], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 57, "seek": 25260, "start": 262.96, "end": 269.92, "text": " So the top category mimics the top command line interface tool, as it will print ranking", "tokens": [50882, 407, 264, 1192, 7719, 12247, 1167, 264, 1192, 5622, 1622, 9226, 2290, 11, 382, 309, 486, 4482, 17833, 51230], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 58, "seek": 25260, "start": 269.92, "end": 273.84, "text": " on information, which will be actualized each second.", "tokens": [51230, 322, 1589, 11, 597, 486, 312, 3539, 1602, 1184, 1150, 13, 51426], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 59, "seek": 25260, "start": 273.84, "end": 277.64, "text": " So for example, with top file, you will get information regarding the file that are the", "tokens": [51426, 407, 337, 1365, 11, 365, 1192, 3991, 11, 291, 486, 483, 1589, 8595, 264, 3991, 300, 366, 264, 51616], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 60, "seek": 25260, "start": 277.64, "end": 280.12, "text": " most accessed.", "tokens": [51616, 881, 34211, 13, 51740], "temperature": 0.0, "avg_logprob": -0.20271141298355594, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.004897010046988726}, {"id": 61, "seek": 28012, "start": 280.12, "end": 287.0, "text": " And the last category is there is only one gadget in this category, and it is TraceLoop.", "tokens": [50364, 400, 264, 1036, 7719, 307, 456, 307, 787, 472, 38090, 294, 341, 7719, 11, 293, 309, 307, 1765, 617, 43, 15812, 13, 50708], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 62, "seek": 28012, "start": 287.0, "end": 290.64, "text": " TraceLoop can be seen as a trace bus for containers.", "tokens": [50708, 1765, 617, 43, 15812, 393, 312, 1612, 382, 257, 13508, 1255, 337, 17089, 13, 50890], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 63, "seek": 28012, "start": 290.64, "end": 296.64, "text": " So you will be able to monitor all the syscoles done by your container.", "tokens": [50890, 407, 291, 486, 312, 1075, 281, 6002, 439, 264, 262, 749, 66, 7456, 1096, 538, 428, 10129, 13, 51190], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 64, "seek": 28012, "start": 296.64, "end": 298.0, "text": " OK.", "tokens": [51190, 2264, 13, 51258], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 65, "seek": 28012, "start": 298.0, "end": 303.16, "text": " So before going into the internal architecture of InspectorGadget and what is eBPF, I will", "tokens": [51258, 407, 949, 516, 666, 264, 6920, 9482, 295, 33402, 38, 345, 847, 293, 437, 307, 308, 33, 47, 37, 11, 286, 486, 51516], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 66, "seek": 28012, "start": 303.16, "end": 309.36, "text": " show you a small demonstration to compile local gadget TraceExec, so the tool to trace", "tokens": [51516, 855, 291, 257, 1359, 16520, 281, 31413, 2654, 38090, 1765, 617, 11149, 3045, 11, 370, 264, 2290, 281, 13508, 51826], "temperature": 0.0, "avg_logprob": -0.23694031517784875, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.01807224564254284}, {"id": 67, "seek": 30936, "start": 309.36, "end": 314.12, "text": " exact syscoles made by container running locally, and ExactSnoop, which is an already", "tokens": [50364, 1900, 262, 749, 66, 7456, 1027, 538, 10129, 2614, 16143, 11, 293, 7199, 50, 1771, 404, 11, 597, 307, 364, 1217, 50602], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 68, "seek": 30936, "start": 314.12, "end": 317.44, "text": " existing eBPF tool.", "tokens": [50602, 6741, 308, 33, 47, 37, 2290, 13, 50768], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 69, "seek": 30936, "start": 317.44, "end": 319.48, "text": " OK.", "tokens": [50768, 2264, 13, 50870], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 70, "seek": 30936, "start": 319.48, "end": 322.0, "text": " So we will first create a test container.", "tokens": [50870, 407, 321, 486, 700, 1884, 257, 1500, 10129, 13, 50996], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 71, "seek": 30936, "start": 322.0, "end": 328.88, "text": " So the test container will execute sleep periodically.", "tokens": [50996, 407, 264, 1500, 10129, 486, 14483, 2817, 38916, 13, 51340], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 72, "seek": 30936, "start": 328.88, "end": 334.0, "text": " And then we will now trace the new processes creation using ExactSnoop.", "tokens": [51340, 400, 550, 321, 486, 586, 13508, 264, 777, 7555, 8016, 1228, 7199, 50, 1771, 404, 13, 51596], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 73, "seek": 30936, "start": 334.0, "end": 338.68, "text": " So ExactSnoop is an eBPF tool based and made by IOvisorBCC people.", "tokens": [51596, 407, 7199, 50, 1771, 404, 307, 364, 308, 33, 47, 37, 2290, 2361, 293, 1027, 538, 39839, 16457, 33, 11717, 561, 13, 51830], "temperature": 0.0, "avg_logprob": -0.22837592106239468, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0033504131715744734}, {"id": 74, "seek": 33868, "start": 338.68, "end": 341.84000000000003, "text": " So as you can see, there are two types of sleep.", "tokens": [50364, 407, 382, 291, 393, 536, 11, 456, 366, 732, 3467, 295, 2817, 13, 50522], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 75, "seek": 33868, "start": 341.84000000000003, "end": 346.72, "text": " There is one sleep, 0.3 seconds, and one other sleep, 0.5 seconds.", "tokens": [50522, 821, 307, 472, 2817, 11, 1958, 13, 18, 3949, 11, 293, 472, 661, 2817, 11, 1958, 13, 20, 3949, 13, 50766], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 76, "seek": 33868, "start": 346.72, "end": 352.64, "text": " Sadly, in my container, I only use 0.3 seconds, so the 0.5 is done by the host.", "tokens": [50766, 29628, 11, 294, 452, 10129, 11, 286, 787, 764, 1958, 13, 18, 3949, 11, 370, 264, 1958, 13, 20, 307, 1096, 538, 264, 3975, 13, 51062], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 77, "seek": 33868, "start": 352.64, "end": 357.24, "text": " And I'm not interested at all at processes running in my host.", "tokens": [51062, 400, 286, 478, 406, 3102, 412, 439, 412, 7555, 2614, 294, 452, 3975, 13, 51292], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 78, "seek": 33868, "start": 357.24, "end": 363.52, "text": " To do so, I will use local gadget to trace the same types of events, but this time I", "tokens": [51292, 1407, 360, 370, 11, 286, 486, 764, 2654, 38090, 281, 13508, 264, 912, 3467, 295, 3931, 11, 457, 341, 565, 286, 51606], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 79, "seek": 33868, "start": 363.52, "end": 368.0, "text": " will be able to get only the event inside the container.", "tokens": [51606, 486, 312, 1075, 281, 483, 787, 264, 2280, 1854, 264, 10129, 13, 51830], "temperature": 0.0, "avg_logprob": -0.16033970808782497, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.07593023777008057}, {"id": 80, "seek": 36800, "start": 368.0, "end": 372.64, "text": " And as you can see, we will get the same information plus the name of the container", "tokens": [50364, 400, 382, 291, 393, 536, 11, 321, 486, 483, 264, 912, 1589, 1804, 264, 1315, 295, 264, 10129, 50596], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 81, "seek": 36800, "start": 372.64, "end": 378.0, "text": " when the event occurs.", "tokens": [50596, 562, 264, 2280, 11843, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 82, "seek": 36800, "start": 378.0, "end": 382.12, "text": " OK.", "tokens": [50864, 2264, 13, 51070], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 83, "seek": 36800, "start": 382.12, "end": 388.04, "text": " So before going into the internal architecture of Inspector Gadget, what is eBPF?", "tokens": [51070, 407, 949, 516, 666, 264, 6920, 9482, 295, 33402, 37171, 847, 11, 437, 307, 308, 33, 47, 37, 30, 51366], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 84, "seek": 36800, "start": 388.04, "end": 392.44, "text": " According to Brandon Gregg, eBPF does to Linux what JavaScript does to HTML.", "tokens": [51366, 7328, 281, 22606, 14986, 1615, 11, 308, 33, 47, 37, 775, 281, 18734, 437, 15778, 775, 281, 17995, 13, 51586], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 85, "seek": 36800, "start": 392.44, "end": 397.4, "text": " It permits you to run mini-program which are safe into a virtual machine inside a kernel", "tokens": [51586, 467, 30990, 291, 281, 1190, 8382, 12, 32726, 597, 366, 3273, 666, 257, 6374, 3479, 1854, 257, 28256, 51834], "temperature": 0.0, "avg_logprob": -0.2247332723517167, "compression_ratio": 1.4916666666666667, "no_speech_prob": 0.012662645429372787}, {"id": 86, "seek": 39740, "start": 397.44, "end": 403.44, "text": " which will be run only on some particular event, for example, disk IO.", "tokens": [50366, 597, 486, 312, 1190, 787, 322, 512, 1729, 2280, 11, 337, 1365, 11, 12355, 39839, 13, 50666], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 87, "seek": 39740, "start": 403.44, "end": 406.71999999999997, "text": " Sadly, the eBPF program safety comes at a price.", "tokens": [50666, 29628, 11, 264, 308, 33, 47, 37, 1461, 4514, 1487, 412, 257, 3218, 13, 50830], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 88, "seek": 39740, "start": 406.71999999999997, "end": 408.15999999999997, "text": " You are kind of limited.", "tokens": [50830, 509, 366, 733, 295, 5567, 13, 50902], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 89, "seek": 39740, "start": 408.15999999999997, "end": 414.52, "text": " For example, you cannot have an eBPF program which will have an infinite loop or not statically", "tokens": [50902, 1171, 1365, 11, 291, 2644, 362, 364, 308, 33, 47, 37, 1461, 597, 486, 362, 364, 13785, 6367, 420, 406, 2219, 984, 51220], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 90, "seek": 39740, "start": 414.52, "end": 415.52, "text": " bounded loop.", "tokens": [51220, 37498, 6367, 13, 51270], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 91, "seek": 39740, "start": 415.52, "end": 420.38, "text": " Also, there is no function like malloc or camalloc, so you cannot allocate dynamically", "tokens": [51270, 2743, 11, 456, 307, 572, 2445, 411, 16026, 905, 420, 1945, 336, 905, 11, 370, 291, 2644, 35713, 43492, 51513], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 92, "seek": 39740, "start": 420.38, "end": 426.88, "text": " memory, but you will see that there are some possibilities to cope with this limitation.", "tokens": [51513, 4675, 11, 457, 291, 486, 536, 300, 456, 366, 512, 12178, 281, 22598, 365, 341, 27432, 13, 51838], "temperature": 0.0, "avg_logprob": -0.23697345024716537, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.03758125752210617}, {"id": 93, "seek": 42688, "start": 427.36, "end": 428.36, "text": " OK.", "tokens": [50388, 2264, 13, 50438], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 94, "seek": 42688, "start": 428.36, "end": 432.92, "text": " Inside the kernel, you will find two software components which are related to eBPF.", "tokens": [50438, 15123, 264, 28256, 11, 291, 486, 915, 732, 4722, 6677, 597, 366, 4077, 281, 308, 33, 47, 37, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 95, "seek": 42688, "start": 432.92, "end": 434.8, "text": " The first one is the verifier.", "tokens": [50666, 440, 700, 472, 307, 264, 1306, 9902, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 96, "seek": 42688, "start": 434.8, "end": 440.32, "text": " It will take as input your eBPF program and will ensure that it is safe.", "tokens": [50760, 467, 486, 747, 382, 4846, 428, 308, 33, 47, 37, 1461, 293, 486, 5586, 300, 309, 307, 3273, 13, 51036], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 97, "seek": 42688, "start": 440.32, "end": 444.6, "text": " If this is the case, it will end your safe program to the just-in-time compiler.", "tokens": [51036, 759, 341, 307, 264, 1389, 11, 309, 486, 917, 428, 3273, 1461, 281, 264, 445, 12, 259, 12, 3766, 31958, 13, 51250], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 98, "seek": 42688, "start": 444.6, "end": 449.92, "text": " The just-in-time compiler will basically translate your eBPF bytecode to the machine code and", "tokens": [51250, 440, 445, 12, 259, 12, 3766, 31958, 486, 1936, 13799, 428, 308, 33, 47, 37, 40846, 22332, 281, 264, 3479, 3089, 293, 51516], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 99, "seek": 42688, "start": 449.92, "end": 454.24, "text": " it will install it to be run on some event.", "tokens": [51516, 309, 486, 3625, 309, 281, 312, 1190, 322, 512, 2280, 13, 51732], "temperature": 0.0, "avg_logprob": -0.1483770629106942, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015729069709777832}, {"id": 100, "seek": 45424, "start": 454.24, "end": 458.92, "text": " When you want to develop an eBPF program, you will write it in a syntax which is almost", "tokens": [50364, 1133, 291, 528, 281, 1499, 364, 308, 33, 47, 37, 1461, 11, 291, 486, 2464, 309, 294, 257, 28431, 597, 307, 1920, 50598], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 101, "seek": 45424, "start": 458.92, "end": 464.6, "text": " that of the C. You will then compile it using clang and the target eBPF to get an eBPF object", "tokens": [50598, 300, 295, 264, 383, 13, 509, 486, 550, 31413, 309, 1228, 596, 656, 293, 264, 3779, 308, 33, 47, 37, 281, 483, 364, 308, 33, 47, 37, 2657, 50882], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 102, "seek": 45424, "start": 464.6, "end": 465.76, "text": " file.", "tokens": [50882, 3991, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 103, "seek": 45424, "start": 465.76, "end": 469.8, "text": " So this eBPF object file will contain the eBPF bytecode.", "tokens": [50940, 407, 341, 308, 33, 47, 37, 2657, 3991, 486, 5304, 264, 308, 33, 47, 37, 40846, 22332, 13, 51142], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 104, "seek": 45424, "start": 469.8, "end": 475.56, "text": " You will then include this eBPF object file into another program running in the userland.", "tokens": [51142, 509, 486, 550, 4090, 341, 308, 33, 47, 37, 2657, 3991, 666, 1071, 1461, 2614, 294, 264, 4195, 1661, 13, 51430], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 105, "seek": 45424, "start": 475.56, "end": 479.40000000000003, "text": " So to do so, you can use your favorite language.", "tokens": [51430, 407, 281, 360, 370, 11, 291, 393, 764, 428, 2954, 2856, 13, 51622], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 106, "seek": 45424, "start": 479.40000000000003, "end": 484.16, "text": " You can use C, you can use Golang, the alpentee of possibilities.", "tokens": [51622, 509, 393, 764, 383, 11, 291, 393, 764, 36319, 656, 11, 264, 419, 79, 1576, 68, 295, 12178, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1761585987397354, "compression_ratio": 1.8401639344262295, "no_speech_prob": 0.016316574066877365}, {"id": 107, "seek": 48416, "start": 484.16, "end": 488.56, "text": " So you will use this program and you will use also maps, eBPF maps.", "tokens": [50364, 407, 291, 486, 764, 341, 1461, 293, 291, 486, 764, 611, 11317, 11, 308, 33, 47, 37, 11317, 13, 50584], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 108, "seek": 48416, "start": 488.56, "end": 492.28000000000003, "text": " eBPF maps are data structure related to eBPF.", "tokens": [50584, 308, 33, 47, 37, 11317, 366, 1412, 3877, 4077, 281, 308, 33, 47, 37, 13, 50770], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 109, "seek": 48416, "start": 492.28000000000003, "end": 495.04, "text": " It takes this plenty of different types of maps.", "tokens": [50770, 467, 2516, 341, 7140, 295, 819, 3467, 295, 11317, 13, 50908], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 110, "seek": 48416, "start": 495.04, "end": 500.76000000000005, "text": " You will get one eBPF map to represent array, one eBPF map to represent key value store.", "tokens": [50908, 509, 486, 483, 472, 308, 33, 47, 37, 4471, 281, 2906, 10225, 11, 472, 308, 33, 47, 37, 4471, 281, 2906, 2141, 2158, 3531, 13, 51194], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 111, "seek": 48416, "start": 500.76000000000005, "end": 503.8, "text": " You have several possibilities.", "tokens": [51194, 509, 362, 2940, 12178, 13, 51346], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 112, "seek": 48416, "start": 503.8, "end": 509.04, "text": " So when you want to load your eBPF program into the kernel, you will mainly use a library", "tokens": [51346, 407, 562, 291, 528, 281, 3677, 428, 308, 33, 47, 37, 1461, 666, 264, 28256, 11, 291, 486, 8704, 764, 257, 6405, 51608], "temperature": 0.0, "avg_logprob": -0.17686826532537286, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.005677950568497181}, {"id": 113, "seek": 50904, "start": 509.04, "end": 514.36, "text": " related to eBPF like eBPF in C or Cilium eBPF in Golang.", "tokens": [50364, 4077, 281, 308, 33, 47, 37, 411, 308, 33, 47, 37, 294, 383, 420, 383, 388, 2197, 308, 33, 47, 37, 294, 36319, 656, 13, 50630], "temperature": 0.0, "avg_logprob": -0.20988163858089806, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.19814670085906982}, {"id": 114, "seek": 50904, "start": 514.36, "end": 519.36, "text": " So your eBPF program will be loaded into the kernel through the eBPF C-Score.", "tokens": [50630, 407, 428, 308, 33, 47, 37, 1461, 486, 312, 13210, 666, 264, 28256, 807, 264, 308, 33, 47, 37, 383, 12, 50, 12352, 13, 50880], "temperature": 0.0, "avg_logprob": -0.20988163858089806, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.19814670085906982}, {"id": 115, "seek": 50904, "start": 519.36, "end": 520.76, "text": " It will be verified.", "tokens": [50880, 467, 486, 312, 31197, 13, 50950], "temperature": 0.0, "avg_logprob": -0.20988163858089806, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.19814670085906982}, {"id": 116, "seek": 50904, "start": 520.76, "end": 528.32, "text": " If it is okay, it will be just in time compiled and installed to monitor some event.", "tokens": [50950, 759, 309, 307, 1392, 11, 309, 486, 312, 445, 294, 565, 36548, 293, 8899, 281, 6002, 512, 2280, 13, 51328], "temperature": 0.0, "avg_logprob": -0.20988163858089806, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.19814670085906982}, {"id": 117, "seek": 50904, "start": 528.32, "end": 532.96, "text": " We will do the same with the map because for example, we will be able to use the map to", "tokens": [51328, 492, 486, 360, 264, 912, 365, 264, 4471, 570, 337, 1365, 11, 321, 486, 312, 1075, 281, 764, 264, 4471, 281, 51560], "temperature": 0.0, "avg_logprob": -0.20988163858089806, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.19814670085906982}, {"id": 118, "seek": 53296, "start": 532.96, "end": 538.64, "text": " either share information between several eBPF programs or between kernel land and user", "tokens": [50364, 2139, 2073, 1589, 1296, 2940, 308, 33, 47, 37, 4268, 420, 1296, 28256, 2117, 293, 4195, 50648], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 119, "seek": 53296, "start": 538.64, "end": 543.76, "text": " land as our eBPF program are run into the kernel.", "tokens": [50648, 2117, 382, 527, 308, 33, 47, 37, 1461, 366, 1190, 666, 264, 28256, 13, 50904], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 120, "seek": 53296, "start": 543.76, "end": 548.72, "text": " So now let's say that I have a process which called the exact C-Score.", "tokens": [50904, 407, 586, 718, 311, 584, 300, 286, 362, 257, 1399, 597, 1219, 264, 1900, 383, 12, 50, 12352, 13, 51152], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 121, "seek": 53296, "start": 548.72, "end": 551.08, "text": " Then our eBPF program will be executed.", "tokens": [51152, 1396, 527, 308, 33, 47, 37, 1461, 486, 312, 17577, 13, 51270], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 122, "seek": 53296, "start": 551.08, "end": 556.9200000000001, "text": " It will write some information into the eBPF map and thanks to the library, I will be able", "tokens": [51270, 467, 486, 2464, 512, 1589, 666, 264, 308, 33, 47, 37, 4471, 293, 3231, 281, 264, 6405, 11, 286, 486, 312, 1075, 51562], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 123, "seek": 53296, "start": 556.9200000000001, "end": 562.6800000000001, "text": " to read this information and print it, for example, to the standard output.", "tokens": [51562, 281, 1401, 341, 1589, 293, 4482, 309, 11, 337, 1365, 11, 281, 264, 3832, 5598, 13, 51850], "temperature": 0.0, "avg_logprob": -0.18140769004821777, "compression_ratio": 1.7617021276595746, "no_speech_prob": 0.0699663758277893}, {"id": 124, "seek": 56268, "start": 562.68, "end": 565.4799999999999, "text": " And then deal with them in user land.", "tokens": [50364, 400, 550, 2028, 365, 552, 294, 4195, 2117, 13, 50504], "temperature": 0.0, "avg_logprob": -0.2548305420648484, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.14199306070804596}, {"id": 125, "seek": 56268, "start": 565.4799999999999, "end": 572.5999999999999, "text": " Okay, regarding local gadgets, the main component is the local gadget manager.", "tokens": [50504, 1033, 11, 8595, 2654, 37635, 11, 264, 2135, 6542, 307, 264, 2654, 38090, 6598, 13, 50860], "temperature": 0.0, "avg_logprob": -0.2548305420648484, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.14199306070804596}, {"id": 126, "seek": 56268, "start": 572.5999999999999, "end": 576.88, "text": " So the local gadget manager at each time maintains a container collection.", "tokens": [50860, 407, 264, 2654, 38090, 6598, 412, 1184, 565, 33385, 257, 10129, 5765, 13, 51074], "temperature": 0.0, "avg_logprob": -0.2548305420648484, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.14199306070804596}, {"id": 127, "seek": 56268, "start": 576.88, "end": 583.0, "text": " So it knows perfectly what are the running containers in the system at a given time.", "tokens": [51074, 407, 309, 3255, 6239, 437, 366, 264, 2614, 17089, 294, 264, 1185, 412, 257, 2212, 565, 13, 51380], "temperature": 0.0, "avg_logprob": -0.2548305420648484, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.14199306070804596}, {"id": 128, "seek": 56268, "start": 583.0, "end": 588.8, "text": " Indeed, we rely on rank fanotify to add containers to this container collection when containers", "tokens": [51380, 15061, 11, 321, 10687, 322, 6181, 3429, 310, 2505, 281, 909, 17089, 281, 341, 10129, 5765, 562, 17089, 51670], "temperature": 0.0, "avg_logprob": -0.2548305420648484, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.14199306070804596}, {"id": 129, "seek": 58880, "start": 588.8, "end": 593.4, "text": " are created and to remove them when they are deleted.", "tokens": [50364, 366, 2942, 293, 281, 4159, 552, 562, 436, 366, 22981, 13, 50594], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 130, "seek": 58880, "start": 593.4, "end": 598.24, "text": " We are also able to start some inspector gadget tracer like the one to trace the exact system", "tokens": [50594, 492, 366, 611, 1075, 281, 722, 512, 34564, 38090, 504, 12858, 411, 264, 472, 281, 13508, 264, 1900, 1185, 50836], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 131, "seek": 58880, "start": 598.24, "end": 599.56, "text": " core.", "tokens": [50836, 4965, 13, 50902], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 132, "seek": 58880, "start": 599.56, "end": 606.0799999999999, "text": " So when we decide to start tracer, for example, the one to trace exact C-Score, we will not", "tokens": [50902, 407, 562, 321, 4536, 281, 722, 504, 12858, 11, 337, 1365, 11, 264, 472, 281, 13508, 1900, 383, 12, 50, 12352, 11, 321, 486, 406, 51228], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 133, "seek": 58880, "start": 606.0799999999999, "end": 608.42, "text": " directly load the eBPF program.", "tokens": [51228, 3838, 3677, 264, 308, 33, 47, 37, 1461, 13, 51345], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 134, "seek": 58880, "start": 608.42, "end": 615.1999999999999, "text": " We will create a particular eBPF map that we will use to store information regarding", "tokens": [51345, 492, 486, 1884, 257, 1729, 308, 33, 47, 37, 4471, 300, 321, 486, 764, 281, 3531, 1589, 8595, 51684], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 135, "seek": 58880, "start": 615.1999999999999, "end": 617.4, "text": " our container of interest.", "tokens": [51684, 527, 10129, 295, 1179, 13, 51794], "temperature": 0.0, "avg_logprob": -0.15144558861142113, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.09006163477897644}, {"id": 136, "seek": 61740, "start": 618.0, "end": 622.88, "text": " Indeed, the eBPF program will be executed each time an event occurs and we need to do", "tokens": [50394, 15061, 11, 264, 308, 33, 47, 37, 1461, 486, 312, 17577, 1184, 565, 364, 2280, 11843, 293, 321, 643, 281, 360, 50638], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 137, "seek": 61740, "start": 622.88, "end": 625.36, "text": " a filtering realing this.", "tokens": [50638, 257, 30822, 957, 278, 341, 13, 50762], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 138, "seek": 61740, "start": 625.36, "end": 632.48, "text": " In the first demonstration, I was only interested into events occurring inside containers and", "tokens": [50762, 682, 264, 700, 16520, 11, 286, 390, 787, 3102, 666, 3931, 18386, 1854, 17089, 293, 51118], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 139, "seek": 61740, "start": 632.48, "end": 634.16, "text": " not on the host.", "tokens": [51118, 406, 322, 264, 3975, 13, 51202], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 140, "seek": 61740, "start": 634.16, "end": 639.04, "text": " To do so, this eBPF map will contain the mooned namespace ID of the container which", "tokens": [51202, 1407, 360, 370, 11, 341, 308, 33, 47, 37, 4471, 486, 5304, 264, 7135, 292, 5288, 17940, 7348, 295, 264, 10129, 597, 51446], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 141, "seek": 61740, "start": 639.04, "end": 641.84, "text": " interests me.", "tokens": [51446, 8847, 385, 13, 51586], "temperature": 0.0, "avg_logprob": -0.2349182838617369, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.007897692732512951}, {"id": 142, "seek": 64184, "start": 641.84, "end": 650.44, "text": " So when I will run my eBPF program, we will install the eBPF program and basically we", "tokens": [50364, 407, 562, 286, 486, 1190, 452, 308, 33, 47, 37, 1461, 11, 321, 486, 3625, 264, 308, 33, 47, 37, 1461, 293, 1936, 321, 50794], "temperature": 0.0, "avg_logprob": -0.16475621136752042, "compression_ratio": 1.6994818652849741, "no_speech_prob": 0.022019140422344208}, {"id": 143, "seek": 64184, "start": 650.44, "end": 656.2, "text": " basically compared to the eBPF code of the exact snoop that I presented into the first", "tokens": [50794, 1936, 5347, 281, 264, 308, 33, 47, 37, 3089, 295, 264, 1900, 43287, 404, 300, 286, 8212, 666, 264, 700, 51082], "temperature": 0.0, "avg_logprob": -0.16475621136752042, "compression_ratio": 1.6994818652849741, "no_speech_prob": 0.022019140422344208}, {"id": 144, "seek": 64184, "start": 656.2, "end": 660.84, "text": " demonstration, we took it and we modified it to add this filtering.", "tokens": [51082, 16520, 11, 321, 1890, 309, 293, 321, 15873, 309, 281, 909, 341, 30822, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16475621136752042, "compression_ratio": 1.6994818652849741, "no_speech_prob": 0.022019140422344208}, {"id": 145, "seek": 64184, "start": 660.84, "end": 665.84, "text": " So basically with this code snippet, we will get the mooned namespace ID of the current", "tokens": [51314, 407, 1936, 365, 341, 3089, 35623, 302, 11, 321, 486, 483, 264, 7135, 292, 5288, 17940, 7348, 295, 264, 2190, 51564], "temperature": 0.0, "avg_logprob": -0.16475621136752042, "compression_ratio": 1.6994818652849741, "no_speech_prob": 0.022019140422344208}, {"id": 146, "seek": 66584, "start": 665.84, "end": 672.24, "text": " task and we will compare it if it is present into this map or not.", "tokens": [50364, 5633, 293, 321, 486, 6794, 309, 498, 309, 307, 1974, 666, 341, 4471, 420, 406, 13, 50684], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 147, "seek": 66584, "start": 672.24, "end": 676.52, "text": " If it is not the case, we just do not care about this container and we just do not care", "tokens": [50684, 759, 309, 307, 406, 264, 1389, 11, 321, 445, 360, 406, 1127, 466, 341, 10129, 293, 321, 445, 360, 406, 1127, 50898], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 148, "seek": 66584, "start": 676.52, "end": 680.12, "text": " about this task because it is not in our container.", "tokens": [50898, 466, 341, 5633, 570, 309, 307, 406, 294, 527, 10129, 13, 51078], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 149, "seek": 66584, "start": 680.12, "end": 685.08, "text": " If it is the case, if the mooned namespace ID is inside the container, we will continue", "tokens": [51078, 759, 309, 307, 264, 1389, 11, 498, 264, 7135, 292, 5288, 17940, 7348, 307, 1854, 264, 10129, 11, 321, 486, 2354, 51326], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 150, "seek": 66584, "start": 685.08, "end": 689.44, "text": " the execution of our eBPF program because we care about it.", "tokens": [51326, 264, 15058, 295, 527, 308, 33, 47, 37, 1461, 570, 321, 1127, 466, 309, 13, 51544], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 151, "seek": 66584, "start": 689.44, "end": 695.6, "text": " Okay, so now we will show you a more realistic world demonstration of local gadgets, particularly", "tokens": [51544, 1033, 11, 370, 586, 321, 486, 855, 291, 257, 544, 12465, 1002, 16520, 295, 2654, 37635, 11, 4098, 51852], "temperature": 0.0, "avg_logprob": -0.11305033749547498, "compression_ratio": 1.8991596638655461, "no_speech_prob": 0.06376536935567856}, {"id": 152, "seek": 69560, "start": 695.6, "end": 707.9200000000001, "text": " how to use it to verify the second profile.", "tokens": [50364, 577, 281, 764, 309, 281, 16888, 264, 1150, 7964, 13, 50980], "temperature": 0.0, "avg_logprob": -0.3230281892370005, "compression_ratio": 1.5625, "no_speech_prob": 0.15622925758361816}, {"id": 153, "seek": 69560, "start": 707.9200000000001, "end": 711.9200000000001, "text": " So okay, we will create an nginx container with a second profile installed.", "tokens": [50980, 407, 1392, 11, 321, 486, 1884, 364, 297, 1494, 87, 10129, 365, 257, 1150, 7964, 8899, 13, 51180], "temperature": 0.0, "avg_logprob": -0.3230281892370005, "compression_ratio": 1.5625, "no_speech_prob": 0.15622925758361816}, {"id": 154, "seek": 69560, "start": 711.9200000000001, "end": 719.2, "text": " So second profile is a feature offered by the Linux kernel to allow or disallow the", "tokens": [51180, 407, 1150, 7964, 307, 257, 4111, 8059, 538, 264, 18734, 28256, 281, 2089, 420, 717, 13253, 264, 51544], "temperature": 0.0, "avg_logprob": -0.3230281892370005, "compression_ratio": 1.5625, "no_speech_prob": 0.15622925758361816}, {"id": 155, "seek": 69560, "start": 719.2, "end": 721.64, "text": " call of some syscall.", "tokens": [51544, 818, 295, 512, 262, 749, 45459, 13, 51666], "temperature": 0.0, "avg_logprob": -0.3230281892370005, "compression_ratio": 1.5625, "no_speech_prob": 0.15622925758361816}, {"id": 156, "seek": 72164, "start": 721.64, "end": 728.52, "text": " So okay, I will create it, I wrote by hand the second profile that I gave to Docker.", "tokens": [50364, 407, 1392, 11, 286, 486, 1884, 309, 11, 286, 4114, 538, 1011, 264, 1150, 7964, 300, 286, 2729, 281, 33772, 13, 50708], "temperature": 0.0, "avg_logprob": -0.1933581227003926, "compression_ratio": 1.79, "no_speech_prob": 0.282530277967453}, {"id": 157, "seek": 72164, "start": 728.52, "end": 732.56, "text": " So okay, let's create it and now let's query the nginx server.", "tokens": [50708, 407, 1392, 11, 718, 311, 1884, 309, 293, 586, 718, 311, 14581, 264, 297, 1494, 87, 7154, 13, 50910], "temperature": 0.0, "avg_logprob": -0.1933581227003926, "compression_ratio": 1.79, "no_speech_prob": 0.282530277967453}, {"id": 158, "seek": 72164, "start": 732.56, "end": 740.0, "text": " Okay, some mistakes, maybe I forgot to add one syscall into the second profile.", "tokens": [50910, 1033, 11, 512, 8038, 11, 1310, 286, 5298, 281, 909, 472, 262, 749, 45459, 666, 264, 1150, 7964, 13, 51282], "temperature": 0.0, "avg_logprob": -0.1933581227003926, "compression_ratio": 1.79, "no_speech_prob": 0.282530277967453}, {"id": 159, "seek": 72164, "start": 740.0, "end": 744.52, "text": " So I will stop the nginx container.", "tokens": [51282, 407, 286, 486, 1590, 264, 297, 1494, 87, 10129, 13, 51508], "temperature": 0.0, "avg_logprob": -0.1933581227003926, "compression_ratio": 1.79, "no_speech_prob": 0.282530277967453}, {"id": 160, "seek": 72164, "start": 744.52, "end": 750.3199999999999, "text": " Now we will start local gadget and I will start local gadget on a container, on one particular", "tokens": [51508, 823, 321, 486, 722, 2654, 38090, 293, 286, 486, 722, 2654, 38090, 322, 257, 10129, 11, 322, 472, 1729, 51798], "temperature": 0.0, "avg_logprob": -0.1933581227003926, "compression_ratio": 1.79, "no_speech_prob": 0.282530277967453}, {"id": 161, "seek": 75032, "start": 750.32, "end": 752.6, "text": " container, the nginx container.", "tokens": [50364, 10129, 11, 264, 297, 1494, 87, 10129, 13, 50478], "temperature": 0.0, "avg_logprob": -0.18730578703038833, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.1010570377111435}, {"id": 162, "seek": 75032, "start": 752.6, "end": 759.48, "text": " Note that it is perfectly possible to start the local gadget with a given container name", "tokens": [50478, 11633, 300, 309, 307, 6239, 1944, 281, 722, 264, 2654, 38090, 365, 257, 2212, 10129, 1315, 50822], "temperature": 0.0, "avg_logprob": -0.18730578703038833, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.1010570377111435}, {"id": 163, "seek": 75032, "start": 759.48, "end": 764.84, "text": " even if this container name does not exist at the time because it will be added automatically", "tokens": [50822, 754, 498, 341, 10129, 1315, 775, 406, 2514, 412, 264, 565, 570, 309, 486, 312, 3869, 6772, 51090], "temperature": 0.0, "avg_logprob": -0.18730578703038833, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.1010570377111435}, {"id": 164, "seek": 75032, "start": 764.84, "end": 768.44, "text": " thanks to the container correction and rank for notify.", "tokens": [51090, 3231, 281, 264, 10129, 19984, 293, 6181, 337, 36560, 13, 51270], "temperature": 0.0, "avg_logprob": -0.18730578703038833, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.1010570377111435}, {"id": 165, "seek": 75032, "start": 768.44, "end": 775.36, "text": " Okay, I will now run an nginx container but without any second profile, I will curl it.", "tokens": [51270, 1033, 11, 286, 486, 586, 1190, 364, 297, 1494, 87, 10129, 457, 1553, 604, 1150, 7964, 11, 286, 486, 22591, 309, 13, 51616], "temperature": 0.0, "avg_logprob": -0.18730578703038833, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.1010570377111435}, {"id": 166, "seek": 77536, "start": 775.36, "end": 781.6800000000001, "text": " Now I will stop my container, it will automatically stop local gadget.", "tokens": [50364, 823, 286, 486, 1590, 452, 10129, 11, 309, 486, 6772, 1590, 2654, 38090, 13, 50680], "temperature": 0.0, "avg_logprob": -0.22818448964287252, "compression_ratio": 1.5670731707317074, "no_speech_prob": 0.014841669239103794}, {"id": 167, "seek": 77536, "start": 781.6800000000001, "end": 787.2, "text": " Now I will just compare the two second profiles, the one that I wrote and the one generated", "tokens": [50680, 823, 286, 486, 445, 6794, 264, 732, 1150, 23693, 11, 264, 472, 300, 286, 4114, 293, 264, 472, 10833, 50956], "temperature": 0.0, "avg_logprob": -0.22818448964287252, "compression_ratio": 1.5670731707317074, "no_speech_prob": 0.014841669239103794}, {"id": 168, "seek": 77536, "start": 787.2, "end": 790.08, "text": " by local gadget.", "tokens": [50956, 538, 2654, 38090, 13, 51100], "temperature": 0.0, "avg_logprob": -0.22818448964287252, "compression_ratio": 1.5670731707317074, "no_speech_prob": 0.014841669239103794}, {"id": 169, "seek": 77536, "start": 790.08, "end": 797.6800000000001, "text": " Okay, I forgot the send file syscalls, so it can maybe explain some few bugs.", "tokens": [51100, 1033, 11, 286, 5298, 264, 2845, 3991, 262, 749, 66, 39655, 11, 370, 309, 393, 1310, 2903, 512, 1326, 15120, 13, 51480], "temperature": 0.0, "avg_logprob": -0.22818448964287252, "compression_ratio": 1.5670731707317074, "no_speech_prob": 0.014841669239103794}, {"id": 170, "seek": 79768, "start": 797.68, "end": 804.68, "text": " So okay, let's run again the nginx container with this new second profile.", "tokens": [50364, 407, 1392, 11, 718, 311, 1190, 797, 264, 297, 1494, 87, 10129, 365, 341, 777, 1150, 7964, 13, 50714], "temperature": 0.0, "avg_logprob": -0.28128200624047256, "compression_ratio": 1.6373056994818653, "no_speech_prob": 0.11782407760620117}, {"id": 171, "seek": 79768, "start": 804.68, "end": 812.1999999999999, "text": " Okay, and now it's the moment of truth, let's curl it and yeah, everything is okay.", "tokens": [50714, 1033, 11, 293, 586, 309, 311, 264, 1623, 295, 3494, 11, 718, 311, 22591, 309, 293, 1338, 11, 1203, 307, 1392, 13, 51090], "temperature": 0.0, "avg_logprob": -0.28128200624047256, "compression_ratio": 1.6373056994818653, "no_speech_prob": 0.11782407760620117}, {"id": 172, "seek": 79768, "start": 812.1999999999999, "end": 817.8, "text": " So yeah, basically local gadget really helps us to verify the second profile that I wrote", "tokens": [51090, 407, 1338, 11, 1936, 2654, 38090, 534, 3665, 505, 281, 16888, 264, 1150, 7964, 300, 286, 4114, 51370], "temperature": 0.0, "avg_logprob": -0.28128200624047256, "compression_ratio": 1.6373056994818653, "no_speech_prob": 0.11782407760620117}, {"id": 173, "seek": 79768, "start": 817.8, "end": 822.5999999999999, "text": " by hand and more than that, it can generate for you second profile.", "tokens": [51370, 538, 1011, 293, 544, 813, 300, 11, 309, 393, 8460, 337, 291, 1150, 7964, 13, 51610], "temperature": 0.0, "avg_logprob": -0.28128200624047256, "compression_ratio": 1.6373056994818653, "no_speech_prob": 0.11782407760620117}, {"id": 174, "seek": 82260, "start": 823.08, "end": 828.88, "text": " Okay, so I told you about local gadget and when I presented you first inspector gadget,", "tokens": [50388, 1033, 11, 370, 286, 1907, 291, 466, 2654, 38090, 293, 562, 286, 8212, 291, 700, 34564, 38090, 11, 50678], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 175, "seek": 82260, "start": 828.88, "end": 832.88, "text": " I told you it comes with two binary local gadget that I already presented and kept", "tokens": [50678, 286, 1907, 291, 309, 1487, 365, 732, 17434, 2654, 38090, 300, 286, 1217, 8212, 293, 4305, 50878], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 176, "seek": 82260, "start": 832.88, "end": 834.36, "text": " kept a gadget.", "tokens": [50878, 4305, 257, 38090, 13, 50952], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 177, "seek": 82260, "start": 834.36, "end": 840.32, "text": " So kept kept a gadget is designed to monitor containers inside Kubernetes cluster.", "tokens": [50952, 407, 4305, 4305, 257, 38090, 307, 4761, 281, 6002, 17089, 1854, 23145, 13630, 13, 51250], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 178, "seek": 82260, "start": 840.32, "end": 846.08, "text": " So on the figure I represented the schematic of Kubernetes cluster, so on the left we have", "tokens": [51250, 407, 322, 264, 2573, 286, 10379, 264, 44739, 295, 23145, 13630, 11, 370, 322, 264, 1411, 321, 362, 51538], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 179, "seek": 82260, "start": 846.08, "end": 851.2, "text": " the developer laptop, on the right we have the Kubernetes cluster, so we have one node", "tokens": [51538, 264, 10754, 10732, 11, 322, 264, 558, 321, 362, 264, 23145, 13630, 11, 370, 321, 362, 472, 9984, 51794], "temperature": 0.0, "avg_logprob": -0.30266499986835554, "compression_ratio": 1.9647577092511013, "no_speech_prob": 0.05868533253669739}, {"id": 180, "seek": 85120, "start": 851.2, "end": 857.44, "text": " for the Kubernetes control plane and we have one worker node.", "tokens": [50364, 337, 264, 23145, 1969, 5720, 293, 321, 362, 472, 11346, 9984, 13, 50676], "temperature": 0.0, "avg_logprob": -0.19209612528483072, "compression_ratio": 1.7191011235955056, "no_speech_prob": 0.0023539795074611902}, {"id": 181, "seek": 85120, "start": 857.44, "end": 862.9200000000001, "text": " First of all, we will need to deploy an inspector gadget pod on each node to be able to monitor", "tokens": [50676, 2386, 295, 439, 11, 321, 486, 643, 281, 7274, 364, 34564, 38090, 2497, 322, 1184, 9984, 281, 312, 1075, 281, 6002, 50950], "temperature": 0.0, "avg_logprob": -0.19209612528483072, "compression_ratio": 1.7191011235955056, "no_speech_prob": 0.0023539795074611902}, {"id": 182, "seek": 85120, "start": 862.9200000000001, "end": 865.96, "text": " the events occurring on this node.", "tokens": [50950, 264, 3931, 18386, 322, 341, 9984, 13, 51102], "temperature": 0.0, "avg_logprob": -0.19209612528483072, "compression_ratio": 1.7191011235955056, "no_speech_prob": 0.0023539795074611902}, {"id": 183, "seek": 85120, "start": 865.96, "end": 872.96, "text": " So we will create a diamond set, Kubernetes will deploy then an inspector gadget pod on", "tokens": [51102, 407, 321, 486, 1884, 257, 16059, 992, 11, 23145, 486, 7274, 550, 364, 34564, 38090, 2497, 322, 51452], "temperature": 0.0, "avg_logprob": -0.19209612528483072, "compression_ratio": 1.7191011235955056, "no_speech_prob": 0.0023539795074611902}, {"id": 184, "seek": 85120, "start": 872.96, "end": 876.96, "text": " each node of our cluster.", "tokens": [51452, 1184, 9984, 295, 527, 13630, 13, 51652], "temperature": 0.0, "avg_logprob": -0.19209612528483072, "compression_ratio": 1.7191011235955056, "no_speech_prob": 0.0023539795074611902}, {"id": 185, "seek": 87696, "start": 876.96, "end": 882.64, "text": " Then we will want to trace a specific event, for example, the X axis goal, so we will use", "tokens": [50364, 1396, 321, 486, 528, 281, 13508, 257, 2685, 2280, 11, 337, 1365, 11, 264, 1783, 10298, 3387, 11, 370, 321, 486, 764, 50648], "temperature": 0.0, "avg_logprob": -0.23738797505696616, "compression_ratio": 1.7587719298245614, "no_speech_prob": 0.3692127466201782}, {"id": 186, "seek": 87696, "start": 882.64, "end": 888.08, "text": " the kept kept a gadget trace exact command, we will ask to the control plane to create", "tokens": [50648, 264, 4305, 4305, 257, 38090, 13508, 1900, 5622, 11, 321, 486, 1029, 281, 264, 1969, 5720, 281, 1884, 50920], "temperature": 0.0, "avg_logprob": -0.23738797505696616, "compression_ratio": 1.7587719298245614, "no_speech_prob": 0.3692127466201782}, {"id": 187, "seek": 87696, "start": 888.08, "end": 894.52, "text": " a trace CRD, so a trace CRD is a custom resource definition which is proper to inspector gadget", "tokens": [50920, 257, 13508, 14123, 35, 11, 370, 257, 13508, 14123, 35, 307, 257, 2375, 7684, 7123, 597, 307, 2296, 281, 34564, 38090, 51242], "temperature": 0.0, "avg_logprob": -0.23738797505696616, "compression_ratio": 1.7587719298245614, "no_speech_prob": 0.3692127466201782}, {"id": 188, "seek": 87696, "start": 894.52, "end": 898.52, "text": " and that we use mainly to start and stop tracer.", "tokens": [51242, 293, 300, 321, 764, 8704, 281, 722, 293, 1590, 504, 12858, 13, 51442], "temperature": 0.0, "avg_logprob": -0.23738797505696616, "compression_ratio": 1.7587719298245614, "no_speech_prob": 0.3692127466201782}, {"id": 189, "seek": 87696, "start": 898.52, "end": 906.2800000000001, "text": " So we will have also a trace CRD per node like we have one gadget pod per node.", "tokens": [51442, 407, 321, 486, 362, 611, 257, 13508, 14123, 35, 680, 9984, 411, 321, 362, 472, 38090, 2497, 680, 9984, 13, 51830], "temperature": 0.0, "avg_logprob": -0.23738797505696616, "compression_ratio": 1.7587719298245614, "no_speech_prob": 0.3692127466201782}, {"id": 190, "seek": 90628, "start": 906.28, "end": 910.8, "text": " So we will create the eBPF program on the associated map, we will install it into the", "tokens": [50364, 407, 321, 486, 1884, 264, 308, 33, 47, 37, 1461, 322, 264, 6615, 4471, 11, 321, 486, 3625, 309, 666, 264, 50590], "temperature": 0.0, "avg_logprob": -0.2298969962380149, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.08433536440134048}, {"id": 191, "seek": 90628, "start": 910.8, "end": 917.36, "text": " kernel, the eBPF program will be executed if there are some code to exec occurring on", "tokens": [50590, 28256, 11, 264, 308, 33, 47, 37, 1461, 486, 312, 17577, 498, 456, 366, 512, 3089, 281, 4454, 18386, 322, 50918], "temperature": 0.0, "avg_logprob": -0.2298969962380149, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.08433536440134048}, {"id": 192, "seek": 90628, "start": 917.36, "end": 924.28, "text": " our node, those events will be written to a path buffer, a path buffer is a specific", "tokens": [50918, 527, 9984, 11, 729, 3931, 486, 312, 3720, 281, 257, 3100, 21762, 11, 257, 3100, 21762, 307, 257, 2685, 51264], "temperature": 0.0, "avg_logprob": -0.2298969962380149, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.08433536440134048}, {"id": 193, "seek": 90628, "start": 924.28, "end": 930.0799999999999, "text": " type of eBPF map, I saw it in the time to enter into the details.", "tokens": [51264, 2010, 295, 308, 33, 47, 37, 4471, 11, 286, 1866, 309, 294, 264, 565, 281, 3242, 666, 264, 4365, 13, 51554], "temperature": 0.0, "avg_logprob": -0.2298969962380149, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.08433536440134048}, {"id": 194, "seek": 90628, "start": 930.0799999999999, "end": 936.0799999999999, "text": " So we will be able to read this information from New Zealand and the events will be published", "tokens": [51554, 407, 321, 486, 312, 1075, 281, 1401, 341, 1589, 490, 1873, 13883, 293, 264, 3931, 486, 312, 6572, 51854], "temperature": 0.0, "avg_logprob": -0.2298969962380149, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.08433536440134048}, {"id": 195, "seek": 93608, "start": 936.08, "end": 943.8000000000001, "text": " to a stream, to a gRPC stream, we will then use kept kept a exact to read the gRPC stream", "tokens": [50364, 281, 257, 4309, 11, 281, 257, 290, 49, 12986, 4309, 11, 321, 486, 550, 764, 4305, 4305, 257, 1900, 281, 1401, 264, 290, 49, 12986, 4309, 50750], "temperature": 0.0, "avg_logprob": -0.23070566841725554, "compression_ratio": 1.7023255813953488, "no_speech_prob": 0.012547362595796585}, {"id": 196, "seek": 93608, "start": 943.8000000000001, "end": 948.48, "text": " and so the information will be printed on the developer laptop.", "tokens": [50750, 293, 370, 264, 1589, 486, 312, 13567, 322, 264, 10754, 10732, 13, 50984], "temperature": 0.0, "avg_logprob": -0.23070566841725554, "compression_ratio": 1.7023255813953488, "no_speech_prob": 0.012547362595796585}, {"id": 197, "seek": 93608, "start": 948.48, "end": 956.36, "text": " So now I will show you a more realistic example about how to use kept kept a gadget to verify", "tokens": [50984, 407, 586, 286, 486, 855, 291, 257, 544, 12465, 1365, 466, 577, 281, 764, 4305, 4305, 257, 38090, 281, 16888, 51378], "temperature": 0.0, "avg_logprob": -0.23070566841725554, "compression_ratio": 1.7023255813953488, "no_speech_prob": 0.012547362595796585}, {"id": 198, "seek": 93608, "start": 956.36, "end": 958.4000000000001, "text": " the container capabilities.", "tokens": [51378, 264, 10129, 10862, 13, 51480], "temperature": 0.0, "avg_logprob": -0.23070566841725554, "compression_ratio": 1.7023255813953488, "no_speech_prob": 0.012547362595796585}, {"id": 199, "seek": 93608, "start": 958.4000000000001, "end": 964.6400000000001, "text": " So just before jumping into the demonstration, the capabilities are another feature by the", "tokens": [51480, 407, 445, 949, 11233, 666, 264, 16520, 11, 264, 10862, 366, 1071, 4111, 538, 264, 51792], "temperature": 0.0, "avg_logprob": -0.23070566841725554, "compression_ratio": 1.7023255813953488, "no_speech_prob": 0.012547362595796585}, {"id": 200, "seek": 96464, "start": 964.64, "end": 968.28, "text": " kernel to limit what your application can do.", "tokens": [50364, 28256, 281, 4948, 437, 428, 3861, 393, 360, 13, 50546], "temperature": 0.0, "avg_logprob": -0.29793081844554226, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.3211516737937927}, {"id": 201, "seek": 96464, "start": 968.28, "end": 976.48, "text": " So again time from the demonstration.", "tokens": [50546, 407, 797, 565, 490, 264, 16520, 13, 50956], "temperature": 0.0, "avg_logprob": -0.29793081844554226, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.3211516737937927}, {"id": 202, "seek": 96464, "start": 976.48, "end": 982.1999999999999, "text": " Okay so this time I will deploy an nginux web server with some capabilities set.", "tokens": [50956, 1033, 370, 341, 565, 286, 486, 7274, 364, 6415, 259, 2449, 3670, 7154, 365, 512, 10862, 992, 13, 51242], "temperature": 0.0, "avg_logprob": -0.29793081844554226, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.3211516737937927}, {"id": 203, "seek": 96464, "start": 982.1999999999999, "end": 986.64, "text": " So here is the list of the capabilities, so for example you can see that there is the", "tokens": [51242, 407, 510, 307, 264, 1329, 295, 264, 10862, 11, 370, 337, 1365, 291, 393, 536, 300, 456, 307, 264, 51464], "temperature": 0.0, "avg_logprob": -0.29793081844554226, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.3211516737937927}, {"id": 204, "seek": 96464, "start": 986.64, "end": 991.76, "text": " sysadmin capabilities which is not forcefully capabilities you want to but it seems nginux", "tokens": [51464, 262, 749, 345, 2367, 10862, 597, 307, 406, 3464, 2277, 10862, 291, 528, 281, 457, 309, 2544, 6415, 259, 2449, 51720], "temperature": 0.0, "avg_logprob": -0.29793081844554226, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.3211516737937927}, {"id": 205, "seek": 99176, "start": 991.76, "end": 995.52, "text": " needs it to run so you don't have the choice.", "tokens": [50364, 2203, 309, 281, 1190, 370, 291, 500, 380, 362, 264, 3922, 13, 50552], "temperature": 0.0, "avg_logprob": -0.27910895969556726, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.14679959416389465}, {"id": 206, "seek": 99176, "start": 995.52, "end": 1000.16, "text": " So I deployed it and suddenly it seems that there are some mistakes, so okay let's get", "tokens": [50552, 407, 286, 17826, 309, 293, 5800, 309, 2544, 300, 456, 366, 512, 8038, 11, 370, 1392, 718, 311, 483, 50784], "temperature": 0.0, "avg_logprob": -0.27910895969556726, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.14679959416389465}, {"id": 207, "seek": 99176, "start": 1000.16, "end": 1005.96, "text": " some more information, okay operation not permitted, okay if I have an operation not", "tokens": [50784, 512, 544, 1589, 11, 1392, 6916, 406, 28658, 11, 1392, 498, 286, 362, 364, 6916, 406, 51074], "temperature": 0.0, "avg_logprob": -0.27910895969556726, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.14679959416389465}, {"id": 208, "seek": 99176, "start": 1005.96, "end": 1013.3199999999999, "text": " permitted it may be because I forgot one capability into my deployment.", "tokens": [51074, 28658, 309, 815, 312, 570, 286, 5298, 472, 13759, 666, 452, 19317, 13, 51442], "temperature": 0.0, "avg_logprob": -0.27910895969556726, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.14679959416389465}, {"id": 209, "seek": 99176, "start": 1013.3199999999999, "end": 1019.64, "text": " So on the bottom I run the kept kept a gadget trace capabilities so as you can see I just", "tokens": [51442, 407, 322, 264, 2767, 286, 1190, 264, 4305, 4305, 257, 38090, 13508, 10862, 370, 382, 291, 393, 536, 286, 445, 51758], "temperature": 0.0, "avg_logprob": -0.27910895969556726, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.14679959416389465}, {"id": 210, "seek": 101964, "start": 1019.64, "end": 1024.92, "text": " want to get capabilities which are used in the namespace demo because it is the namespace", "tokens": [50364, 528, 281, 483, 10862, 597, 366, 1143, 294, 264, 5288, 17940, 10723, 570, 309, 307, 264, 5288, 17940, 50628], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 211, "seek": 101964, "start": 1024.92, "end": 1031.48, "text": " where my nginux container is and so the big difference between local gadget and kept kept", "tokens": [50628, 689, 452, 6415, 259, 2449, 10129, 307, 293, 370, 264, 955, 2649, 1296, 2654, 38090, 293, 4305, 4305, 50956], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 212, "seek": 101964, "start": 1031.48, "end": 1036.92, "text": " a gadget is that kept kept a gadget will give us information regarding Kubernetes.", "tokens": [50956, 257, 38090, 307, 300, 4305, 4305, 257, 38090, 486, 976, 505, 1589, 8595, 23145, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 213, "seek": 101964, "start": 1036.92, "end": 1041.8, "text": " So for each event we will get the node where the event occurs, the namespace, the pod and", "tokens": [51228, 407, 337, 1184, 2280, 321, 486, 483, 264, 9984, 689, 264, 2280, 11843, 11, 264, 5288, 17940, 11, 264, 2497, 293, 51472], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 214, "seek": 101964, "start": 1041.8, "end": 1042.8, "text": " the container.", "tokens": [51472, 264, 10129, 13, 51522], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 215, "seek": 101964, "start": 1042.8, "end": 1046.6399999999999, "text": " It is really aware of the fact that it is running inside Kubernetes.", "tokens": [51522, 467, 307, 534, 3650, 295, 264, 1186, 300, 309, 307, 2614, 1854, 23145, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1780636241135088, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.3396574556827545}, {"id": 216, "seek": 104664, "start": 1046.64, "end": 1073.88, "text": " So okay I deleted my deployment, I will run it again, okay we run the whole demonstration", "tokens": [50364, 407, 1392, 286, 22981, 452, 19317, 11, 286, 486, 1190, 309, 797, 11, 1392, 321, 1190, 264, 1379, 16520, 51726], "temperature": 0.0, "avg_logprob": -0.4654792259479391, "compression_ratio": 1.1868131868131868, "no_speech_prob": 0.33391234278678894}, {"id": 217, "seek": 104664, "start": 1073.88, "end": 1075.3600000000001, "text": " for the beginning.", "tokens": [51726, 337, 264, 2863, 13, 51800], "temperature": 0.0, "avg_logprob": -0.4654792259479391, "compression_ratio": 1.1868131868131868, "no_speech_prob": 0.33391234278678894}, {"id": 218, "seek": 107536, "start": 1076.24, "end": 1081.1599999999999, "text": " Okay so during this time if someone has quick question or if there was one point that wasn't", "tokens": [50408, 1033, 370, 1830, 341, 565, 498, 1580, 575, 1702, 1168, 420, 498, 456, 390, 472, 935, 300, 2067, 380, 50654], "temperature": 0.0, "avg_logprob": -0.34535837173461914, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.4863143265247345}, {"id": 219, "seek": 107536, "start": 1081.1599999999999, "end": 1084.6799999999998, "text": " clear you can take it quickly.", "tokens": [50654, 1850, 291, 393, 747, 309, 2661, 13, 50830], "temperature": 0.0, "avg_logprob": -0.34535837173461914, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.4863143265247345}, {"id": 220, "seek": 107536, "start": 1084.6799999999998, "end": 1087.4399999999998, "text": " Okay everything was clear until this moment, so perfect.", "tokens": [50830, 1033, 1203, 390, 1850, 1826, 341, 1623, 11, 370, 2176, 13, 50968], "temperature": 0.0, "avg_logprob": -0.34535837173461914, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.4863143265247345}, {"id": 221, "seek": 110536, "start": 1105.36, "end": 1119.28, "text": " So okay let's delete our previews deployment and now it can take a bit of time because", "tokens": [50364, 407, 1392, 718, 311, 12097, 527, 14281, 82, 19317, 293, 586, 309, 393, 747, 257, 857, 295, 565, 570, 51060], "temperature": 0.0, "avg_logprob": -0.37840713500976564, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.013259142637252808}, {"id": 222, "seek": 110536, "start": 1119.28, "end": 1125.4799999999998, "text": " it is in Kubernetes so yeah compared to when running locally you need to take into a good", "tokens": [51060, 309, 307, 294, 23145, 370, 1338, 5347, 281, 562, 2614, 16143, 291, 643, 281, 747, 666, 257, 665, 51370], "temperature": 0.0, "avg_logprob": -0.37840713500976564, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.013259142637252808}, {"id": 223, "seek": 110536, "start": 1125.4799999999998, "end": 1128.8799999999999, "text": " communication with remote services.", "tokens": [51370, 6101, 365, 8607, 3328, 13, 51540], "temperature": 0.0, "avg_logprob": -0.37840713500976564, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.013259142637252808}, {"id": 224, "seek": 112888, "start": 1128.88, "end": 1137.64, "text": " Okay now I will deploy my nginux deployment again and so we will get the information", "tokens": [50364, 1033, 586, 286, 486, 7274, 452, 6415, 259, 2449, 19317, 797, 293, 370, 321, 486, 483, 264, 1589, 50802], "temperature": 0.0, "avg_logprob": -0.2113689470894729, "compression_ratio": 1.7671957671957672, "no_speech_prob": 0.035045914351940155}, {"id": 225, "seek": 112888, "start": 1137.64, "end": 1143.2800000000002, "text": " directly so as you can see we have the name of the capabilities and when they are used", "tokens": [50802, 3838, 370, 382, 291, 393, 536, 321, 362, 264, 1315, 295, 264, 10862, 293, 562, 436, 366, 1143, 51084], "temperature": 0.0, "avg_logprob": -0.2113689470894729, "compression_ratio": 1.7671957671957672, "no_speech_prob": 0.035045914351940155}, {"id": 226, "seek": 112888, "start": 1143.2800000000002, "end": 1150.1200000000001, "text": " and we are also in this column if it is allowed by the kernel or if it is denied so all the", "tokens": [51084, 293, 321, 366, 611, 294, 341, 7738, 498, 309, 307, 4350, 538, 264, 28256, 420, 498, 309, 307, 17774, 370, 439, 264, 51426], "temperature": 0.0, "avg_logprob": -0.2113689470894729, "compression_ratio": 1.7671957671957672, "no_speech_prob": 0.035045914351940155}, {"id": 227, "seek": 112888, "start": 1150.1200000000001, "end": 1154.6000000000001, "text": " above capabilities were allowed and the shown capabilities was denied.", "tokens": [51426, 3673, 10862, 645, 4350, 293, 264, 4898, 10862, 390, 17774, 13, 51650], "temperature": 0.0, "avg_logprob": -0.2113689470894729, "compression_ratio": 1.7671957671957672, "no_speech_prob": 0.035045914351940155}, {"id": 228, "seek": 115460, "start": 1154.84, "end": 1162.08, "text": " Yeah I think I forgot it in my deployment file so I will just delete my deployment file", "tokens": [50376, 865, 286, 519, 286, 5298, 309, 294, 452, 19317, 3991, 370, 286, 486, 445, 12097, 452, 19317, 3991, 50738], "temperature": 0.0, "avg_logprob": -0.2558313681154835, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.11843869090080261}, {"id": 229, "seek": 115460, "start": 1162.08, "end": 1166.08, "text": " again, yeah there is a lot of back and forth but suddenly I do not think we have a lot", "tokens": [50738, 797, 11, 1338, 456, 307, 257, 688, 295, 646, 293, 5220, 457, 5800, 286, 360, 406, 519, 321, 362, 257, 688, 50938], "temperature": 0.0, "avg_logprob": -0.2558313681154835, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.11843869090080261}, {"id": 230, "seek": 115460, "start": 1166.08, "end": 1167.08, "text": " of choice.", "tokens": [50938, 295, 3922, 13, 50988], "temperature": 0.0, "avg_logprob": -0.2558313681154835, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.11843869090080261}, {"id": 231, "seek": 118460, "start": 1185.6, "end": 1192.24, "text": " Yeah again if there is quick question during the deleting and the redeployment of the whole", "tokens": [50414, 865, 797, 498, 456, 307, 1702, 1168, 1830, 264, 48946, 293, 264, 14328, 2384, 518, 295, 264, 1379, 50746], "temperature": 0.0, "avg_logprob": -0.26904732433717643, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.011517735198140144}, {"id": 232, "seek": 118460, "start": 1192.24, "end": 1200.12, "text": " thing I can take it and so I will update my deployment file to add the capabilities that", "tokens": [50746, 551, 286, 393, 747, 309, 293, 370, 286, 486, 5623, 452, 19317, 3991, 281, 909, 264, 10862, 300, 51140], "temperature": 0.0, "avg_logprob": -0.26904732433717643, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.011517735198140144}, {"id": 233, "seek": 118460, "start": 1200.12, "end": 1203.12, "text": " I missed.", "tokens": [51140, 286, 6721, 13, 51290], "temperature": 0.0, "avg_logprob": -0.26904732433717643, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.011517735198140144}, {"id": 234, "seek": 118460, "start": 1203.12, "end": 1211.9199999999998, "text": " Okay let's deploy it again and just cross the finger but it is the last time.", "tokens": [51290, 1033, 718, 311, 7274, 309, 797, 293, 445, 3278, 264, 5984, 457, 309, 307, 264, 1036, 565, 13, 51730], "temperature": 0.0, "avg_logprob": -0.26904732433717643, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.011517735198140144}, {"id": 235, "seek": 121192, "start": 1212.92, "end": 1217.92, "text": " Okay let's wait for everything to be ready.", "tokens": [50414, 1033, 718, 311, 1699, 337, 1203, 281, 312, 1919, 13, 50664], "temperature": 0.0, "avg_logprob": -0.504885060446603, "compression_ratio": 0.8431372549019608, "no_speech_prob": 0.007102303672581911}, {"id": 236, "seek": 121792, "start": 1217.92, "end": 1247.1200000000001, "text": " Okay take also a bit of time so that's okay should do the trick and anyway I do not think", "tokens": [50364, 1033, 747, 611, 257, 857, 295, 565, 370, 300, 311, 1392, 820, 360, 264, 4282, 293, 4033, 286, 360, 406, 519, 51824], "temperature": 0.0, "avg_logprob": -0.28650733947753904, "compression_ratio": 1.1125, "no_speech_prob": 0.05746536701917648}, {"id": 237, "seek": 124712, "start": 1247.12, "end": 1255.4399999999998, "text": " we can wait faster so okay everything seems to be ready now we will get the IP of our", "tokens": [50364, 321, 393, 1699, 4663, 370, 1392, 1203, 2544, 281, 312, 1919, 586, 321, 486, 483, 264, 8671, 295, 527, 50780], "temperature": 0.0, "avg_logprob": -0.18650918719412266, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.19420838356018066}, {"id": 238, "seek": 124712, "start": 1255.4399999999998, "end": 1261.7199999999998, "text": " pod we will now kill it and now it's the moment of truth and as we can see we get the nginux", "tokens": [50780, 2497, 321, 486, 586, 1961, 309, 293, 586, 309, 311, 264, 1623, 295, 3494, 293, 382, 321, 393, 536, 321, 483, 264, 6415, 259, 2449, 51094], "temperature": 0.0, "avg_logprob": -0.18650918719412266, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.19420838356018066}, {"id": 239, "seek": 124712, "start": 1261.7199999999998, "end": 1266.8, "text": " default message so everything was fine I just forgot to add one capability in my deployment", "tokens": [51094, 7576, 3636, 370, 1203, 390, 2489, 286, 445, 5298, 281, 909, 472, 13759, 294, 452, 19317, 51348], "temperature": 0.0, "avg_logprob": -0.18650918719412266, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.19420838356018066}, {"id": 240, "seek": 124712, "start": 1266.8, "end": 1274.84, "text": " file so it's now time to conclude so as I show you during this presentation inspector", "tokens": [51348, 3991, 370, 309, 311, 586, 565, 281, 16886, 370, 382, 286, 855, 291, 1830, 341, 5860, 34564, 51750], "temperature": 0.0, "avg_logprob": -0.18650918719412266, "compression_ratio": 1.655813953488372, "no_speech_prob": 0.19420838356018066}, {"id": 241, "seek": 127484, "start": 1274.84, "end": 1279.8799999999999, "text": " gadget permits to monitor containers both running locally with local gadget and both", "tokens": [50364, 38090, 30990, 281, 6002, 17089, 1293, 2614, 16143, 365, 2654, 38090, 293, 1293, 50616], "temperature": 0.0, "avg_logprob": -0.19281932830810547, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.6744266152381897}, {"id": 242, "seek": 127484, "start": 1279.8799999999999, "end": 1285.56, "text": " unrunning in Kubernetes cluster with cup cutter gadget it is of precious help to debug", "tokens": [50616, 517, 45482, 294, 23145, 13630, 365, 4414, 25531, 38090, 309, 307, 295, 12406, 854, 281, 24083, 50900], "temperature": 0.0, "avg_logprob": -0.19281932830810547, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.6744266152381897}, {"id": 243, "seek": 127484, "start": 1285.56, "end": 1291.84, "text": " this application I really like to use gdb but and any kind of debugger but in the case", "tokens": [50900, 341, 3861, 286, 534, 411, 281, 764, 290, 67, 65, 457, 293, 604, 733, 295, 24083, 1321, 457, 294, 264, 1389, 51214], "temperature": 0.0, "avg_logprob": -0.19281932830810547, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.6744266152381897}, {"id": 244, "seek": 127484, "start": 1291.84, "end": 1299.1599999999999, "text": " that I show you it would be not so helpful particularly because if you run gdb for the", "tokens": [51214, 300, 286, 855, 291, 309, 576, 312, 406, 370, 4961, 4098, 570, 498, 291, 1190, 290, 67, 65, 337, 264, 51580], "temperature": 0.0, "avg_logprob": -0.19281932830810547, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.6744266152381897}, {"id": 245, "seek": 127484, "start": 1299.1599999999999, "end": 1304.04, "text": " second profile you will just get a narrow number and it will not be so helpful and the", "tokens": [51580, 1150, 7964, 291, 486, 445, 483, 257, 9432, 1230, 293, 309, 486, 406, 312, 370, 4961, 293, 264, 51824], "temperature": 0.0, "avg_logprob": -0.19281932830810547, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.6744266152381897}, {"id": 246, "seek": 130404, "start": 1304.04, "end": 1310.84, "text": " same with the capability example we will not be able to know why the syscall failed we", "tokens": [50364, 912, 365, 264, 13759, 1365, 321, 486, 406, 312, 1075, 281, 458, 983, 264, 262, 749, 45459, 7612, 321, 50704], "temperature": 0.0, "avg_logprob": -0.22334675561814082, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.06413158774375916}, {"id": 247, "seek": 130404, "start": 1310.84, "end": 1316.36, "text": " will just know it failed with a narrow number but kind of hard to say it was because of", "tokens": [50704, 486, 445, 458, 309, 7612, 365, 257, 9432, 1230, 457, 733, 295, 1152, 281, 584, 309, 390, 570, 295, 50980], "temperature": 0.0, "avg_logprob": -0.22334675561814082, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.06413158774375916}, {"id": 248, "seek": 130404, "start": 1316.36, "end": 1321.96, "text": " the missing capability so as a future work we plan to improve the scaling of inspector", "tokens": [50980, 264, 5361, 13759, 370, 382, 257, 2027, 589, 321, 1393, 281, 3470, 264, 21589, 295, 34564, 51260], "temperature": 0.0, "avg_logprob": -0.22334675561814082, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.06413158774375916}, {"id": 249, "seek": 130404, "start": 1321.96, "end": 1327.1599999999999, "text": " gadget because I told you we use cup cutter exact to read the grpc stream and suddenly", "tokens": [51260, 38090, 570, 286, 1907, 291, 321, 764, 4414, 25531, 1900, 281, 1401, 264, 290, 81, 79, 66, 4309, 293, 5800, 51520], "temperature": 0.0, "avg_logprob": -0.22334675561814082, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.06413158774375916}, {"id": 250, "seek": 132716, "start": 1327.3200000000002, "end": 1334.3600000000001, "text": " doesn't scale very well we also plan to add a new gadget and as inspector gadgets is an open", "tokens": [50372, 1177, 380, 4373, 588, 731, 321, 611, 1393, 281, 909, 257, 777, 38090, 293, 382, 34564, 37635, 307, 364, 1269, 50724], "temperature": 0.0, "avg_logprob": -0.12073735440714975, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.22576430439949036}, {"id": 251, "seek": 132716, "start": 1334.3600000000001, "end": 1339.88, "text": " source software if you have any idea of a gadget or if you want to contribute one I will be really", "tokens": [50724, 4009, 4722, 498, 291, 362, 604, 1558, 295, 257, 38090, 420, 498, 291, 528, 281, 10586, 472, 286, 486, 312, 534, 51000], "temperature": 0.0, "avg_logprob": -0.12073735440714975, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.22576430439949036}, {"id": 252, "seek": 132716, "start": 1339.88, "end": 1346.2, "text": " happy to see your contribution and to review it so you can find us on our website inspector", "tokens": [51000, 2055, 281, 536, 428, 13150, 293, 281, 3131, 309, 370, 291, 393, 915, 505, 322, 527, 3144, 34564, 51316], "temperature": 0.0, "avg_logprob": -0.12073735440714975, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.22576430439949036}, {"id": 253, "seek": 132716, "start": 1346.2, "end": 1352.6000000000001, "text": " gadget.io we are also on github so under the inspector gadget organization and we also have", "tokens": [51316, 38090, 13, 1004, 321, 366, 611, 322, 290, 355, 836, 370, 833, 264, 34564, 38090, 4475, 293, 321, 611, 362, 51636], "temperature": 0.0, "avg_logprob": -0.12073735440714975, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.22576430439949036}, {"id": 254, "seek": 135260, "start": 1352.6799999999998, "end": 1358.4399999999998, "text": " a channel in the kubernetes slack so inspector gadget so yeah if one day you use inspector", "tokens": [50368, 257, 2269, 294, 264, 350, 22457, 29767, 370, 34564, 38090, 370, 1338, 498, 472, 786, 291, 764, 34564, 50656], "temperature": 0.0, "avg_logprob": -0.08487287787503975, "compression_ratio": 1.775609756097561, "no_speech_prob": 0.03567897900938988}, {"id": 255, "seek": 135260, "start": 1358.4399999999998, "end": 1364.12, "text": " gadget and there is something that you do not understand please just feel free to come to", "tokens": [50656, 38090, 293, 456, 307, 746, 300, 291, 360, 406, 1223, 1767, 445, 841, 1737, 281, 808, 281, 50940], "temperature": 0.0, "avg_logprob": -0.08487287787503975, "compression_ratio": 1.775609756097561, "no_speech_prob": 0.03567897900938988}, {"id": 256, "seek": 135260, "start": 1364.12, "end": 1369.8, "text": " the channel and ask we will be really we are here to help you and it will be a real pleasure to", "tokens": [50940, 264, 2269, 293, 1029, 321, 486, 312, 534, 321, 366, 510, 281, 854, 291, 293, 309, 486, 312, 257, 957, 6834, 281, 51224], "temperature": 0.0, "avg_logprob": -0.08487287787503975, "compression_ratio": 1.775609756097561, "no_speech_prob": 0.03567897900938988}, {"id": 257, "seek": 135260, "start": 1370.52, "end": 1375.24, "text": " chat with you so I thank you a lot for your attention and if you have any question feel", "tokens": [51260, 5081, 365, 291, 370, 286, 1309, 291, 257, 688, 337, 428, 3202, 293, 498, 291, 362, 604, 1168, 841, 51496], "temperature": 0.0, "avg_logprob": -0.08487287787503975, "compression_ratio": 1.775609756097561, "no_speech_prob": 0.03567897900938988}, {"id": 258, "seek": 137524, "start": 1375.24, "end": 1383.88, "text": " free to ask thank you", "tokens": [50364, 1737, 281, 1029, 1309, 291, 50796], "temperature": 0.0, "avg_logprob": -0.30429019246782574, "compression_ratio": 1.255813953488372, "no_speech_prob": 0.016484860330820084}, {"id": 259, "seek": 137524, "start": 1398.44, "end": 1404.6, "text": " thank you very interesting talk I would like to know I've seen that you were deploying", "tokens": [51524, 1309, 291, 588, 1880, 751, 286, 576, 411, 281, 458, 286, 600, 1612, 300, 291, 645, 34198, 51832], "temperature": 0.0, "avg_logprob": -0.30429019246782574, "compression_ratio": 1.255813953488372, "no_speech_prob": 0.016484860330820084}, {"id": 260, "seek": 140460, "start": 1404.6799999999998, "end": 1410.28, "text": " the agents as a demon set so you were running it in all the nodes I was wondering if you can just", "tokens": [50368, 264, 12554, 382, 257, 14283, 992, 370, 291, 645, 2614, 309, 294, 439, 264, 13891, 286, 390, 6359, 498, 291, 393, 445, 50648], "temperature": 0.0, "avg_logprob": -0.10263441159174992, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.061082374304533005}, {"id": 261, "seek": 140460, "start": 1410.28, "end": 1415.48, "text": " tailor it to one single node because you know that the the current workload that you want to", "tokens": [50648, 33068, 309, 281, 472, 2167, 9984, 570, 291, 458, 300, 264, 264, 2190, 20139, 300, 291, 528, 281, 50908], "temperature": 0.0, "avg_logprob": -0.10263441159174992, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.061082374304533005}, {"id": 262, "seek": 140460, "start": 1415.48, "end": 1421.32, "text": " check or the current part you want to check is there second question would be I understand", "tokens": [50908, 1520, 420, 264, 2190, 644, 291, 528, 281, 1520, 307, 456, 1150, 1168, 576, 312, 286, 1223, 51200], "temperature": 0.0, "avg_logprob": -0.10263441159174992, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.061082374304533005}, {"id": 263, "seek": 140460, "start": 1421.32, "end": 1426.36, "text": " that this is really big for for debugging environments would you do you think that this", "tokens": [51200, 300, 341, 307, 534, 955, 337, 337, 45592, 12388, 576, 291, 360, 291, 519, 300, 341, 51452], "temperature": 0.0, "avg_logprob": -0.10263441159174992, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.061082374304533005}, {"id": 264, "seek": 140460, "start": 1426.36, "end": 1430.36, "text": " would be ready if you had an incident or something going on that you want to investigate in a", "tokens": [51452, 576, 312, 1919, 498, 291, 632, 364, 9348, 420, 746, 516, 322, 300, 291, 528, 281, 15013, 294, 257, 51652], "temperature": 0.0, "avg_logprob": -0.10263441159174992, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.061082374304533005}, {"id": 265, "seek": 143036, "start": 1430.36, "end": 1435.56, "text": " production environment okay just to be sure that I understood correctly your question you were", "tokens": [50364, 4265, 2823, 1392, 445, 281, 312, 988, 300, 286, 7320, 8944, 428, 1168, 291, 645, 50624], "temperature": 0.0, "avg_logprob": -0.10096605007465069, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.03017127886414528}, {"id": 266, "seek": 143036, "start": 1435.56, "end": 1440.28, "text": " asking precision when I deploy the inspector gadget pod I deployed it in each node in the", "tokens": [50624, 3365, 18356, 562, 286, 7274, 264, 34564, 38090, 2497, 286, 17826, 309, 294, 1184, 9984, 294, 264, 50860], "temperature": 0.0, "avg_logprob": -0.10096605007465069, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.03017127886414528}, {"id": 267, "seek": 143036, "start": 1440.28, "end": 1446.52, "text": " kubernetes cluster and so you wanted to know if it is possible to not deploy it on each node", "tokens": [50860, 350, 22457, 13630, 293, 370, 291, 1415, 281, 458, 498, 309, 307, 1944, 281, 406, 7274, 309, 322, 1184, 9984, 51172], "temperature": 0.0, "avg_logprob": -0.10096605007465069, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.03017127886414528}, {"id": 268, "seek": 143036, "start": 1446.52, "end": 1452.9199999999998, "text": " yes perfectly there is and related to that when you're running the the comments from your computer", "tokens": [51172, 2086, 6239, 456, 307, 293, 4077, 281, 300, 562, 291, 434, 2614, 264, 264, 3053, 490, 428, 3820, 51492], "temperature": 0.0, "avg_logprob": -0.10096605007465069, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.03017127886414528}, {"id": 269, "seek": 143036, "start": 1452.9199999999998, "end": 1458.28, "text": " does it apply to all nodes at the same time or can you tailor out so to just go target it to", "tokens": [51492, 775, 309, 3079, 281, 439, 13891, 412, 264, 912, 565, 420, 393, 291, 33068, 484, 370, 281, 445, 352, 3779, 309, 281, 51760], "temperature": 0.0, "avg_logprob": -0.10096605007465069, "compression_ratio": 1.763157894736842, "no_speech_prob": 0.03017127886414528}, {"id": 270, "seek": 145828, "start": 1458.28, "end": 1463.48, "text": " one node or something no you can you can target one node so you can basically you can filter by", "tokens": [50364, 472, 9984, 420, 746, 572, 291, 393, 291, 393, 3779, 472, 9984, 370, 291, 393, 1936, 291, 393, 6608, 538, 50624], "temperature": 0.0, "avg_logprob": -0.07987416347610617, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.02105727605521679}, {"id": 271, "seek": 145828, "start": 1463.48, "end": 1469.24, "text": " several you have three possibilities to filter you can filter by node you can filter by name space", "tokens": [50624, 2940, 291, 362, 1045, 12178, 281, 6608, 291, 393, 6608, 538, 9984, 291, 393, 6608, 538, 1315, 1901, 50912], "temperature": 0.0, "avg_logprob": -0.07987416347610617, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.02105727605521679}, {"id": 272, "seek": 145828, "start": 1469.24, "end": 1474.28, "text": " and you can filter by pod name even container name and of course you can mix all of this", "tokens": [50912, 293, 291, 393, 6608, 538, 2497, 1315, 754, 10129, 1315, 293, 295, 1164, 291, 393, 2890, 439, 295, 341, 51164], "temperature": 0.0, "avg_logprob": -0.07987416347610617, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.02105727605521679}, {"id": 273, "seek": 145828, "start": 1474.28, "end": 1479.48, "text": " I was a bit quick regarding the demonstration on this but yeah you have yeah you can do a lot", "tokens": [51164, 286, 390, 257, 857, 1702, 8595, 264, 16520, 322, 341, 457, 1338, 291, 362, 1338, 291, 393, 360, 257, 688, 51424], "temperature": 0.0, "avg_logprob": -0.07987416347610617, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.02105727605521679}, {"id": 274, "seek": 145828, "start": 1479.48, "end": 1485.16, "text": " of filtering so yeah so you can do you can deploy the inspector gadget pod on each node", "tokens": [51424, 295, 30822, 370, 1338, 370, 291, 393, 360, 291, 393, 7274, 264, 34564, 38090, 2497, 322, 1184, 9984, 51708], "temperature": 0.0, "avg_logprob": -0.07987416347610617, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.02105727605521679}, {"id": 275, "seek": 148516, "start": 1485.8000000000002, "end": 1491.64, "text": " and then filter by no by node name but even though if you know that there is one specific", "tokens": [50396, 293, 550, 6608, 538, 572, 538, 9984, 1315, 457, 754, 1673, 498, 291, 458, 300, 456, 307, 472, 2685, 50688], "temperature": 0.0, "avg_logprob": -0.13571614485520583, "compression_ratio": 1.7317073170731707, "no_speech_prob": 0.008657621219754219}, {"id": 276, "seek": 148516, "start": 1491.64, "end": 1497.64, "text": " problem occurring on one particular node you can deploy the pod on only this specific node we had", "tokens": [50688, 1154, 18386, 322, 472, 1729, 9984, 291, 393, 7274, 264, 2497, 322, 787, 341, 2685, 9984, 321, 632, 50988], "temperature": 0.0, "avg_logprob": -0.13571614485520583, "compression_ratio": 1.7317073170731707, "no_speech_prob": 0.008657621219754219}, {"id": 277, "seek": 148516, "start": 1497.64, "end": 1504.2, "text": " we have an option to do so with capital gadget deploy to only say to specify which node you want", "tokens": [50988, 321, 362, 364, 3614, 281, 360, 370, 365, 4238, 38090, 7274, 281, 787, 584, 281, 16500, 597, 9984, 291, 528, 51316], "temperature": 0.0, "avg_logprob": -0.13571614485520583, "compression_ratio": 1.7317073170731707, "no_speech_prob": 0.008657621219754219}, {"id": 278, "seek": 150420, "start": 1504.2, "end": 1507.88, "text": " to deploy it thank you you're welcome", "tokens": [50364, 281, 7274, 309, 1309, 291, 291, 434, 2928, 50548], "temperature": 0.0, "avg_logprob": -0.19691965135477357, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.021661704406142235}, {"id": 279, "seek": 150420, "start": 1519.56, "end": 1526.04, "text": " thanks for the talk again I'm just wondering if you can send the metrics to Grafana or something", "tokens": [51132, 3231, 337, 264, 751, 797, 286, 478, 445, 6359, 498, 291, 393, 2845, 264, 16367, 281, 8985, 69, 2095, 420, 746, 51456], "temperature": 0.0, "avg_logprob": -0.19691965135477357, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.021661704406142235}, {"id": 280, "seek": 150420, "start": 1526.04, "end": 1533.48, "text": " do to do the filtering and the querying around is that possible so just to be sure you asked if I", "tokens": [51456, 360, 281, 360, 264, 30822, 293, 264, 7083, 1840, 926, 307, 300, 1944, 370, 445, 281, 312, 988, 291, 2351, 498, 286, 51828], "temperature": 0.0, "avg_logprob": -0.19691965135477357, "compression_ratio": 1.5163398692810457, "no_speech_prob": 0.021661704406142235}, {"id": 281, "seek": 153348, "start": 1533.48, "end": 1543.72, "text": " can send the metrics to Grafana yeah the traces that okay so we plan to we we are actually developing", "tokens": [50364, 393, 2845, 264, 16367, 281, 8985, 69, 2095, 1338, 264, 26076, 300, 1392, 370, 321, 1393, 281, 321, 321, 366, 767, 6416, 50876], "temperature": 0.0, "avg_logprob": -0.1419734640435858, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.010004326701164246}, {"id": 282, "seek": 153348, "start": 1543.72, "end": 1549.0, "text": " it a lot and we are actually working on it a lot and we plan to add an exporter to Prometheus", "tokens": [50876, 309, 257, 688, 293, 321, 366, 767, 1364, 322, 309, 257, 688, 293, 321, 1393, 281, 909, 364, 1278, 6122, 281, 2114, 649, 42209, 51140], "temperature": 0.0, "avg_logprob": -0.1419734640435858, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.010004326701164246}, {"id": 283, "seek": 153348, "start": 1549.64, "end": 1556.76, "text": " all right but yeah it is still I would not say work in progress but thinking in progress all right", "tokens": [51172, 439, 558, 457, 1338, 309, 307, 920, 286, 576, 406, 584, 589, 294, 4205, 457, 1953, 294, 4205, 439, 558, 51528], "temperature": 0.0, "avg_logprob": -0.1419734640435858, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.010004326701164246}, {"id": 284, "seek": 153348, "start": 1556.76, "end": 1563.16, "text": " yeah but nonetheless nonetheless if you're really interested into Prometheus I think", "tokens": [51528, 1338, 457, 26756, 26756, 498, 291, 434, 534, 3102, 666, 2114, 649, 42209, 286, 519, 51848], "temperature": 0.0, "avg_logprob": -0.1419734640435858, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.010004326701164246}, {"id": 285, "seek": 156316, "start": 1563.24, "end": 1568.76, "text": " there is only if you go to the inspector gadget repository there will be you know on the right", "tokens": [50368, 456, 307, 787, 498, 291, 352, 281, 264, 34564, 38090, 25841, 456, 486, 312, 291, 458, 322, 264, 558, 50644], "temperature": 0.0, "avg_logprob": -0.0980841530693902, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.02536069229245186}, {"id": 286, "seek": 156316, "start": 1568.76, "end": 1575.0800000000002, "text": " there is a used by and so there is a project which does the exporting to Prometheus", "tokens": [50644, 456, 307, 257, 1143, 538, 293, 370, 456, 307, 257, 1716, 597, 775, 264, 44686, 281, 2114, 649, 42209, 50960], "temperature": 0.0, "avg_logprob": -0.0980841530693902, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.02536069229245186}, {"id": 287, "seek": 156316, "start": 1576.28, "end": 1582.44, "text": " but this is not us who developed it and we plan to yeah there is us there is a lot of", "tokens": [51020, 457, 341, 307, 406, 505, 567, 4743, 309, 293, 321, 1393, 281, 1338, 456, 307, 505, 456, 307, 257, 688, 295, 51328], "temperature": 0.0, "avg_logprob": -0.0980841530693902, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.02536069229245186}, {"id": 288, "seek": 156316, "start": 1582.44, "end": 1588.0400000000002, "text": " things that we want to do actually and yeah Prometheus is on our to the list and on the", "tokens": [51328, 721, 300, 321, 528, 281, 360, 767, 293, 1338, 2114, 649, 42209, 307, 322, 527, 281, 264, 1329, 293, 322, 264, 51608], "temperature": 0.0, "avg_logprob": -0.0980841530693902, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.02536069229245186}, {"id": 289, "seek": 158804, "start": 1588.04, "end": 1592.68, "text": " things that we want to support all right thanks", "tokens": [50364, 721, 300, 321, 528, 281, 1406, 439, 558, 3231, 50596], "temperature": 0.0, "avg_logprob": -0.22154287858442825, "compression_ratio": 1.4274809160305344, "no_speech_prob": 0.024234766140580177}, {"id": 290, "seek": 158804, "start": 1599.0, "end": 1600.68, "text": " then I think we're done oh one more question", "tokens": [50912, 550, 286, 519, 321, 434, 1096, 1954, 472, 544, 1168, 50996], "temperature": 0.0, "avg_logprob": -0.22154287858442825, "compression_ratio": 1.4274809160305344, "no_speech_prob": 0.024234766140580177}, {"id": 291, "seek": 158804, "start": 1611.56, "end": 1616.04, "text": " yeah I have a question regarding this demon said that it should be installed on the Kubernetes", "tokens": [51540, 1338, 286, 362, 257, 1168, 8595, 341, 14283, 848, 300, 309, 820, 312, 8899, 322, 264, 23145, 51764], "temperature": 0.0, "avg_logprob": -0.22154287858442825, "compression_ratio": 1.4274809160305344, "no_speech_prob": 0.024234766140580177}, {"id": 292, "seek": 161604, "start": 1616.04, "end": 1621.0, "text": " nodes is recommended to it like keep it there always or just install when you need to debug", "tokens": [50364, 13891, 307, 9628, 281, 309, 411, 1066, 309, 456, 1009, 420, 445, 3625, 562, 291, 643, 281, 24083, 50612], "temperature": 0.0, "avg_logprob": -0.11166276931762695, "compression_ratio": 1.79874213836478, "no_speech_prob": 0.030309045687317848}, {"id": 293, "seek": 161604, "start": 1621.0, "end": 1626.92, "text": " and then remove it back I'm sorry can you please repeat it this demon said on the Kubernetes nodes", "tokens": [50612, 293, 550, 4159, 309, 646, 286, 478, 2597, 393, 291, 1767, 7149, 309, 341, 14283, 848, 322, 264, 23145, 13891, 50908], "temperature": 0.0, "avg_logprob": -0.11166276931762695, "compression_ratio": 1.79874213836478, "no_speech_prob": 0.030309045687317848}, {"id": 294, "seek": 161604, "start": 1627.6399999999999, "end": 1632.68, "text": " is it recommended to keep it there for always like or just install for the back and then remove", "tokens": [50944, 307, 309, 9628, 281, 1066, 309, 456, 337, 1009, 411, 420, 445, 3625, 337, 264, 646, 293, 550, 4159, 51196], "temperature": 0.0, "avg_logprob": -0.11166276931762695, "compression_ratio": 1.79874213836478, "no_speech_prob": 0.030309045687317848}, {"id": 295, "seek": 163268, "start": 1632.68, "end": 1638.04, "text": " back in the diamond set if I can this remote component", "tokens": [50364, 646, 294, 264, 16059, 992, 498, 286, 393, 341, 8607, 6542, 50632], "temperature": 0.0, "avg_logprob": -0.31675877290613513, "compression_ratio": 1.3177570093457944, "no_speech_prob": 0.06198051571846008}, {"id": 296, "seek": 163268, "start": 1652.6000000000001, "end": 1656.8400000000001, "text": " no so basically the question was about when I deploy the inspector gadget pod if it is", "tokens": [51360, 572, 370, 1936, 264, 1168, 390, 466, 562, 286, 7274, 264, 34564, 38090, 2497, 498, 309, 307, 51572], "temperature": 0.0, "avg_logprob": -0.31675877290613513, "compression_ratio": 1.3177570093457944, "no_speech_prob": 0.06198051571846008}, {"id": 297, "seek": 165684, "start": 1656.84, "end": 1662.52, "text": " recommended to have it running it for a long time or just shortly no clearly you should not have", "tokens": [50364, 9628, 281, 362, 309, 2614, 309, 337, 257, 938, 565, 420, 445, 13392, 572, 4448, 291, 820, 406, 362, 50648], "temperature": 0.0, "avg_logprob": -0.14792414578524501, "compression_ratio": 1.9754098360655739, "no_speech_prob": 0.05880216509103775}, {"id": 298, "seek": 165684, "start": 1662.52, "end": 1668.6799999999998, "text": " a running you should not have it running for a long time as we install ebpf program we need to", "tokens": [50648, 257, 2614, 291, 820, 406, 362, 309, 2614, 337, 257, 938, 565, 382, 321, 3625, 308, 65, 25302, 1461, 321, 643, 281, 50956], "temperature": 0.0, "avg_logprob": -0.14792414578524501, "compression_ratio": 1.9754098360655739, "no_speech_prob": 0.05880216509103775}, {"id": 299, "seek": 165684, "start": 1668.6799999999998, "end": 1673.48, "text": " have some privilege and we need for example the capsis admin and all this sort of stuff we cannot", "tokens": [50956, 362, 512, 12122, 293, 321, 643, 337, 1365, 264, 13855, 271, 24236, 293, 439, 341, 1333, 295, 1507, 321, 2644, 51196], "temperature": 0.0, "avg_logprob": -0.14792414578524501, "compression_ratio": 1.9754098360655739, "no_speech_prob": 0.05880216509103775}, {"id": 300, "seek": 165684, "start": 1673.48, "end": 1680.12, "text": " use the user name of space which were which was added recently in Kubernetes so no you just deploy", "tokens": [51196, 764, 264, 4195, 1315, 295, 1901, 597, 645, 597, 390, 3869, 3938, 294, 23145, 370, 572, 291, 445, 7274, 51528], "temperature": 0.0, "avg_logprob": -0.14792414578524501, "compression_ratio": 1.9754098360655739, "no_speech_prob": 0.05880216509103775}, {"id": 301, "seek": 165684, "start": 1680.12, "end": 1685.08, "text": " it you collect the matrix you collect the you monitor the events you want to monitor and then", "tokens": [51528, 309, 291, 2500, 264, 8141, 291, 2500, 264, 291, 6002, 264, 3931, 291, 528, 281, 6002, 293, 550, 51776], "temperature": 0.0, "avg_logprob": -0.14792414578524501, "compression_ratio": 1.9754098360655739, "no_speech_prob": 0.05880216509103775}, {"id": 302, "seek": 168508, "start": 1685.08, "end": 1690.1999999999998, "text": " you just undeploy it so undeploying its specter gadget is as simple as deploying it is one", "tokens": [50364, 291, 445, 674, 68, 2384, 309, 370, 674, 68, 2384, 278, 1080, 6177, 260, 38090, 307, 382, 2199, 382, 34198, 309, 307, 472, 50620], "temperature": 0.0, "avg_logprob": -0.14328794610010434, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.006621179636567831}, {"id": 303, "seek": 168508, "start": 1690.1999999999998, "end": 1695.72, "text": " command line interface call and you are done so yeah just avoid it having it running for a long", "tokens": [50620, 5622, 1622, 9226, 818, 293, 291, 366, 1096, 370, 1338, 445, 5042, 309, 1419, 309, 2614, 337, 257, 938, 50896], "temperature": 0.0, "avg_logprob": -0.14328794610010434, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.006621179636567831}, {"id": 304, "seek": 168508, "start": 1695.72, "end": 1703.0, "text": " time it's it is a tool to debug so it would be like if you run your application all the time with", "tokens": [50896, 565, 309, 311, 309, 307, 257, 2290, 281, 24083, 370, 309, 576, 312, 411, 498, 291, 1190, 428, 3861, 439, 264, 565, 365, 51260], "temperature": 0.0, "avg_logprob": -0.14328794610010434, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.006621179636567831}, {"id": 305, "seek": 170300, "start": 1703.0, "end": 1707.16, "text": " gdb attached to be kind of how do so yeah no", "tokens": [50364, 290, 67, 65, 8570, 281, 312, 733, 295, 577, 360, 370, 1338, 572, 50572], "temperature": 0.0, "avg_logprob": -0.1990080381694593, "compression_ratio": 1.5328947368421053, "no_speech_prob": 0.008907984010875225}, {"id": 306, "seek": 170300, "start": 1717.32, "end": 1723.56, "text": " is there a measurable performance impact on of having the agent deployed in your cluster", "tokens": [51080, 307, 456, 257, 43615, 3389, 2712, 322, 295, 1419, 264, 9461, 17826, 294, 428, 13630, 51392], "temperature": 0.0, "avg_logprob": -0.1990080381694593, "compression_ratio": 1.5328947368421053, "no_speech_prob": 0.008907984010875225}, {"id": 307, "seek": 170300, "start": 1723.56, "end": 1729.08, "text": " since it's measuring all these things so you are asking about if when we monitor event if we have a", "tokens": [51392, 1670, 309, 311, 13389, 439, 613, 721, 370, 291, 366, 3365, 466, 498, 562, 321, 6002, 2280, 498, 321, 362, 257, 51668], "temperature": 0.0, "avg_logprob": -0.1990080381694593, "compression_ratio": 1.5328947368421053, "no_speech_prob": 0.008907984010875225}, {"id": 308, "seek": 172908, "start": 1730.04, "end": 1739.0, "text": " decrease in performance right so not so much and it would be related to the world ebpf as ebpf", "tokens": [50412, 11514, 294, 3389, 558, 370, 406, 370, 709, 293, 309, 576, 312, 4077, 281, 264, 1002, 308, 65, 25302, 382, 308, 65, 25302, 50860], "temperature": 0.0, "avg_logprob": -0.15680048624674478, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.015647107735276222}, {"id": 309, "seek": 172908, "start": 1739.0, "end": 1743.3999999999999, "text": " program are running to the kernel you do not have you know context switch between userland and", "tokens": [50860, 1461, 366, 2614, 281, 264, 28256, 291, 360, 406, 362, 291, 458, 4319, 3679, 1296, 4195, 1661, 293, 51080], "temperature": 0.0, "avg_logprob": -0.15680048624674478, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.015647107735276222}, {"id": 310, "seek": 172908, "start": 1743.3999999999999, "end": 1749.24, "text": " kernel land so it is kind of as quick and you avoid having a big decrease in performance", "tokens": [51080, 28256, 2117, 370, 309, 307, 733, 295, 382, 1702, 293, 291, 5042, 1419, 257, 955, 11514, 294, 3389, 51372], "temperature": 0.0, "avg_logprob": -0.15680048624674478, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.015647107735276222}, {"id": 311, "seek": 172908, "start": 1750.1999999999998, "end": 1751.72, "text": " okay thank you you're welcome", "tokens": [51420, 1392, 1309, 291, 291, 434, 2928, 51496], "temperature": 0.0, "avg_logprob": -0.15680048624674478, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.015647107735276222}, {"id": 312, "seek": 175172, "start": 1751.72, "end": 1760.3600000000001, "text": " then I think we're done thank you thank you", "tokens": [50364, 550, 286, 519, 321, 434, 1096, 1309, 291, 1309, 291, 50796], "temperature": 0.0, "avg_logprob": -0.48921830837543195, "compression_ratio": 1.075, "no_speech_prob": 0.01865968480706215}], "language": "en"}