{"text": " Yeah, hi, I'm Ludwig from SUSE. I'm a research engineer there working in the so-called future technologies team and today I'm presenting some crazy idea. Not because we're going to build a product with that, but just because we can. So, first let's take a look what's the difference between package-based and image-based. I mean, I'm from the package-based world, so I don't have too many insights into actual image-based systems like I'm embedded world, so that's just my view. Anyway, packages are known by all of you, I guess, from your desktop Linux installation, so you have individual components pre-built, the vendor ships your packages and the client side decides which one to install, so there's some kind of dependency resolver that takes the components, puts them on your local system. Usually you don't need to reboot for that. This has advantages and disadvantages, so the advantages, if you need a new VIM version, you just get it and it works right away. The disadvantages, if it breaks, it's broken. On image-based systems, on the other hand, you get a full Linux system pre-built by the operating system vendor. That means it's a ready-made file system that is typically downloaded and DD to some partition, for example, or it's a table that gets extracted somewhere. Installing that one or activating the install requires a reboot, so that's an advantage because it wouldn't break into intermediate states, but it just either works or doesn't. The disadvantage is that it's typically not extendable, at least not the original image, so you would have to have some other mechanism like system desizics nowadays that plays some tricks to get extra layers on top. So, let's first take a look at the file-stem layout of a typical image-based system, or one, I think, our system, the envisions it. So, we have the operating system in slash user for Linux systems after user merge. Then the EDC partition at the EDC volume is on slash, which is writable. The boot partition nowadays should be the ESP, no matter where it's mounted actually, and your data is in var on a separate volume again. So, how do you do updates? Usually you have separate partitions for user, so the standard case is AP, so two versions, and then you DD your operating system into one, while the other one runs, and on reboot you just switch. That's quite an easy technology because it's just a regular partition table. It's actually read-only if the file-stem you use is a read-only one. You could use our single CAsync to download deltas and getting it from the server, and the signing is also pretty easy because it's one image, so you can put some GPG signature on it, and that's it, and you can even verify it afterwards because the image is unmodified on your partition. Disadvantages, there's no deduplication, so you always consume twice the space basically, or however big your user partition is. Even if your updates are small, you still need all that space. The amount is limited, so usually if you have only two partitions, you have two versions of the operating system, and the space is pre-allocated. Again, that could be an advantage because there's no surprises, the space is just there, and if it's there, you can put the image, period. The disadvantages, your image can't grow, and the updates are always of a fixed size basically. So I can be optimized that. You could actually use butterfaces to our operating system, that's how the micro-S works, some more details on that later in Ignite's talk. Anyway, we use a sub-volume for the operating system. That means you get the copy and write semantics automatically, so deduplication means your updated system does not automatically need twice the space, but only the changed amount. You can still use rsync or casync to only apply deltas. The amount of versions you can store is basically infinite, only depends on how big your updates are. So if you only have updates on text files, it could be a lot of versions. Disadvantages, it's not really read-only, it's just a butterfaces flag, and that can be changed of course. Also, put a question mark on verification. So previously with image, we could just run GPG for example, and you can verify whether the image was modified or not. Here we have to take a look how to solve that later. But how do distributions actually build those images? At least an operating system vendor like OpenSUSE would use packages to build the image, just on server side. We learned that we can even use this technology for building any of these, and the way the image would be shipped would be just install packages somewhere on a server system and then throw away everything that is not in user. That means all the scriptlets that run in packages are just modifying something that's not relevant. Like in EDC and VAR, it doesn't make any sense to have a scriptlet doing something there. So when, for example, a package needs to add a user, it can't just call user add. It needs to use SystemDISUS users. Same if you don't enable a service, you can't just call SystemControlEnable, you need to ship presets. And that way packages also can't just put the kernel in slash boot anymore because that's not in user. That means there needs to be some extra tool that somehow makes a system bootable when there's a new kernel, for example. So back to verification. Actually packages, at least RPM packages, have signed headers, and the headers have check sums for each file. So in the end, an image is a list of RPMs with signed headers, and by verifying each header, you can also verify each file. So in the end, you have a tree that could be verified, you can check that there's no file added, no file removed, and no file modified, just by looking at the RPM headers. Disadvantages and images that you ship, you typically remove the RPM database because it's this ugly binary blob. Even if it's a SQLite database, it's still an ugly binary blob with more binary blobs in there. So that's why people really hate having the RPM database there. This is something that nobody wants to see in an image. So how can we fix that? We could actually store the RPM headers as files. So we just dump the header part of the package into a directory. That means the directory is the RPM database that looks much less ugly. Different two file directory listings to actually see which packages could update it. That is quite useful if you already use Microsoft, for example, and do some snapper compare, then it tells you this RPM database and this RPM database change, but you don't know what. If the database is a listing of files, it's naturally visible what changed. And still we have the RPM header, so users fully verifiable because they're signed. So the question now is, what do we actually need an image for? So you don't need to take those RPMs, put them into some file system, and then download the whole file system or this image or table. You could actually define an image as a text file that lists RPMs. And then you download those RPMs, which are bits of your image, and just put them into this file system or partition that is user. Disadvantage of this method again would be that with nowadays RPMs you would lose the ability to do easy deltas because the payload is actually a CPO that is compressed with some compression. So if you don't want to use delta RPMs or other fancy things, you need to find a solution for the payload of RPMs. So the payload doesn't actually have to be a CPO that is compressed. It could be actually completely uncompressed. So you just concatenate all the file contents at the end of the RPM header. And because RPM header contains also the file sizes, you know which file is where. Now if we do another trick and align those file datas to page size, you actually get reflinkable packages. That means you could download this uncompressed RPM, for example by means of CAsync, which would compress it actually on the server side. Then you have the RPM on disk. And then instead of copying the payload to some other location, you just use reflinks as a file system feature that reuses the blocks. So you have this one big chunk of data as the RPM. And to create your actual files, you just link the data into there. That means user bin bash is not actually a copy, it's just sharing the same data that is in this RPM that is stored there, which conveniently is at the same time your RPM database. So it's not just the headers that are in this directory, it is the full package. So in the end, in this example, I put userLibsusImagePackages. UserLibsusImagesPackages would be your image. That means users just a view. And if you would map this into ButterFS, like in this example, that means you have several versions of this image directory as a snapshot. And then you could create other ButterFS volumes that just link into those RPM headers. Or you could even omit this user completely, a colleague of mine Fabian, even wrote a fuse plugin that just creates a file system from looking at RPM, RPM's in the directory. Quite crazy. So to summarize, we could build an image-like system by leveraging ButterFS. So instead of using AP partitions, we just use snapshots. The behavior would be exactly the same because you prepare this new snapshot, put all your data in there, and then you have to reboot to activate it. But since it's still packages, you retain the flexibility to actually change it on client side. You could ship the image as a list of RPM's on text file, but you could also add RPM's locally in this directory, and you have them installed. So best of both worlds. And this is not just completely crazy in my head. I actually built a prototype that kind of works. So it uses busybox because it was easy to modify the RPM implementation in there, to work with those raffle link in the packages. This is our sync for updates, and it uses SystemD's kernel installed to make this system actually bootable. So you can try it out. There's also pull request open for RPM, I think, to have this raffle linkable stuff and send a patch to busybox, but I don't expect it to be accepted. It's just a proof of concept. Of course, to make this work in practice, there's lots of to-do's. So in existing distros like OpenSUSE, we have to fix all the packages to no longer use scriptlets. We need to talk about the butterfly sub volumes. The naming should be standardized. There was actually a discussion like two years ago already on the list. RPM raffle link payload would be nice to have upstream. There are other stakeholders that also would like to have that. I'm already working on SystemD's kernel installed to make it usable for this use case. In case of micro-as-like systems, we want to have roll-baggles of slash and just the operating system. For installing deltas, I would like to use the async, which we revisited. And last but not least, all of that should be native in RPM or SIP, and in my opinion, not just some extra tool. And that's it already. So any questions for this crazy stuff? Okay, me first. So how did you handle the timestamp AC? Because if you're using BTRFS and doing an RPM minus I, you get the A time, M time, and C time in the i-node. And an image-based system is supposed to hash end to end the same. And if it has different timestamps, it doesn't hash end to end. Yeah, well, you can't modify the timestamps. You can't modify. You can only look at the ones that are under your control. But then doesn't that mean that effectively we can't use this to reconstruct image-based systems? Well, it's not a bit-to-bit identical. What is on disk is not bit-to-bit identical, of course. Only the actual RPM payload. But you know that the payload that is linked is actually the same. So I don't think, I mean, maybe there's a use case why the timestamps need to be exact. But in my view, it's not important because the, like, user bin bash is user bin bash, no matter what the timestamp is. Well, the use case is just for image-based systems. The end-to-end hash tells you that you've done the right thing. And it's simple to compute. With your system, you basically have to do a tree hash down all the packages to prove that this is what you're supposed to have installed. It's, semantically, they are equivalent. It's just the latter is more difficult to do than the former, which is why people like image-based. I mean, you only need to hash the directory with all the RPMs in them, right? So if the RPMs, you have to check some of all the RPMs, and then you can verify the RPMs. Yeah, I'm not disputing. Exactly. You're just saying it's more complicated. Yeah, it's, of course, there's always a trade-off. Of course, yeah, yeah. And depends on how you construct this user view. I mean, if it's really a butterfly, it's a real file system tree, then you have to walk it. But if it's only a view, like with a view stingy, then it doesn't actually exist on disk. It's just, you know, looking at the RPMs. So it cannot be modified. You need to walk, don't need to walk the tree. You just hash the RPMs. Okay. Yeah. So how would you integrate that into what we have heard in the previous talks? So during boot, I specify something similar to my dm-varity root hash, so that I know that I'm actually booting from an unmodified root of s. That's a good question. That problem is not solved yet. Yeah. So far, the challenges are already at the point, how do you actually specify which version of the user tree do you want to boot. But now all the models assume that if you ship a new image, like a new user version, it also comes with a new kernel and a new init.d. So this init.d knows what disk to boot. But in the Butterfest use case, there is a kernel that can have a number of init.d.s and those init.d.s match with a number of snapshots that they can actually boot. So then I'm already struggling with this part. So the verification comes later. So dm-varity gives you authenticity of the blocks at runtime. So the device cannot switch them underneath. And I guess that if you verify the kernel headers, the RPM headers, I don't know, when loading the image, this wouldn't give you the same runtime properties. I haven't played with those technologies yet, to be honest. So another interesting thing would be this FA policy daemon. Only with a bit about it, it uses the audit subsystem to actually block access to modified files by comparing them with the information in the RPM header. So it would be another area to just explore how to integrate some verification technologies into this model. Any more questions? If not, then I guess we'll wrap up this talk. Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.120000000000001, "text": " Yeah, hi, I'm Ludwig from SUSE. I'm a research engineer there working in the so-called future", "tokens": [865, 11, 4879, 11, 286, 478, 30550, 33313, 490, 40117, 36, 13, 286, 478, 257, 2132, 11403, 456, 1364, 294, 264, 370, 12, 11880, 2027], "temperature": 0.0, "avg_logprob": -0.21556087375916155, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.18832416832447052}, {"id": 1, "seek": 0, "start": 12.120000000000001, "end": 17.64, "text": " technologies team and today I'm presenting some crazy idea. Not because we're going", "tokens": [7943, 1469, 293, 965, 286, 478, 15578, 512, 3219, 1558, 13, 1726, 570, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.21556087375916155, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.18832416832447052}, {"id": 2, "seek": 0, "start": 17.64, "end": 22.92, "text": " to build a product with that, but just because we can. So, first let's take a look what's", "tokens": [281, 1322, 257, 1674, 365, 300, 11, 457, 445, 570, 321, 393, 13, 407, 11, 700, 718, 311, 747, 257, 574, 437, 311], "temperature": 0.0, "avg_logprob": -0.21556087375916155, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.18832416832447052}, {"id": 3, "seek": 0, "start": 22.92, "end": 27.88, "text": " the difference between package-based and image-based. I mean, I'm from the package-based world,", "tokens": [264, 2649, 1296, 7372, 12, 6032, 293, 3256, 12, 6032, 13, 286, 914, 11, 286, 478, 490, 264, 7372, 12, 6032, 1002, 11], "temperature": 0.0, "avg_logprob": -0.21556087375916155, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.18832416832447052}, {"id": 4, "seek": 2788, "start": 27.88, "end": 33.04, "text": " so I don't have too many insights into actual image-based systems like I'm embedded world,", "tokens": [370, 286, 500, 380, 362, 886, 867, 14310, 666, 3539, 3256, 12, 6032, 3652, 411, 286, 478, 16741, 1002, 11], "temperature": 0.0, "avg_logprob": -0.17231657794702834, "compression_ratio": 1.6192170818505338, "no_speech_prob": 5.3579857194563374e-05}, {"id": 5, "seek": 2788, "start": 33.04, "end": 38.519999999999996, "text": " so that's just my view. Anyway, packages are known by all of you, I guess, from your desktop", "tokens": [370, 300, 311, 445, 452, 1910, 13, 5684, 11, 17401, 366, 2570, 538, 439, 295, 291, 11, 286, 2041, 11, 490, 428, 14502], "temperature": 0.0, "avg_logprob": -0.17231657794702834, "compression_ratio": 1.6192170818505338, "no_speech_prob": 5.3579857194563374e-05}, {"id": 6, "seek": 2788, "start": 38.519999999999996, "end": 46.120000000000005, "text": " Linux installation, so you have individual components pre-built, the vendor ships your", "tokens": [18734, 13260, 11, 370, 291, 362, 2609, 6677, 659, 12, 23018, 11, 264, 24321, 11434, 428], "temperature": 0.0, "avg_logprob": -0.17231657794702834, "compression_ratio": 1.6192170818505338, "no_speech_prob": 5.3579857194563374e-05}, {"id": 7, "seek": 2788, "start": 46.120000000000005, "end": 51.36, "text": " packages and the client side decides which one to install, so there's some kind of dependency", "tokens": [17401, 293, 264, 6423, 1252, 14898, 597, 472, 281, 3625, 11, 370, 456, 311, 512, 733, 295, 33621], "temperature": 0.0, "avg_logprob": -0.17231657794702834, "compression_ratio": 1.6192170818505338, "no_speech_prob": 5.3579857194563374e-05}, {"id": 8, "seek": 2788, "start": 51.36, "end": 56.8, "text": " resolver that takes the components, puts them on your local system. Usually you don't need", "tokens": [34480, 300, 2516, 264, 6677, 11, 8137, 552, 322, 428, 2654, 1185, 13, 11419, 291, 500, 380, 643], "temperature": 0.0, "avg_logprob": -0.17231657794702834, "compression_ratio": 1.6192170818505338, "no_speech_prob": 5.3579857194563374e-05}, {"id": 9, "seek": 5680, "start": 56.8, "end": 62.16, "text": " to reboot for that. This has advantages and disadvantages, so the advantages, if you need", "tokens": [281, 33818, 337, 300, 13, 639, 575, 14906, 293, 37431, 11, 370, 264, 14906, 11, 498, 291, 643], "temperature": 0.0, "avg_logprob": -0.16676108711644222, "compression_ratio": 1.6578947368421053, "no_speech_prob": 3.9376987842842937e-05}, {"id": 10, "seek": 5680, "start": 62.16, "end": 67.2, "text": " a new VIM version, you just get it and it works right away. The disadvantages, if it breaks,", "tokens": [257, 777, 691, 6324, 3037, 11, 291, 445, 483, 309, 293, 309, 1985, 558, 1314, 13, 440, 37431, 11, 498, 309, 9857, 11], "temperature": 0.0, "avg_logprob": -0.16676108711644222, "compression_ratio": 1.6578947368421053, "no_speech_prob": 3.9376987842842937e-05}, {"id": 11, "seek": 5680, "start": 67.2, "end": 74.52, "text": " it's broken. On image-based systems, on the other hand, you get a full Linux system pre-built by", "tokens": [309, 311, 5463, 13, 1282, 3256, 12, 6032, 3652, 11, 322, 264, 661, 1011, 11, 291, 483, 257, 1577, 18734, 1185, 659, 12, 23018, 538], "temperature": 0.0, "avg_logprob": -0.16676108711644222, "compression_ratio": 1.6578947368421053, "no_speech_prob": 3.9376987842842937e-05}, {"id": 12, "seek": 5680, "start": 74.52, "end": 81.36, "text": " the operating system vendor. That means it's a ready-made file system that is typically downloaded", "tokens": [264, 7447, 1185, 24321, 13, 663, 1355, 309, 311, 257, 1919, 12, 10341, 3991, 1185, 300, 307, 5850, 21748], "temperature": 0.0, "avg_logprob": -0.16676108711644222, "compression_ratio": 1.6578947368421053, "no_speech_prob": 3.9376987842842937e-05}, {"id": 13, "seek": 8136, "start": 81.36, "end": 87.96, "text": " and DD to some partition, for example, or it's a table that gets extracted somewhere. Installing", "tokens": [293, 30778, 281, 512, 24808, 11, 337, 1365, 11, 420, 309, 311, 257, 3199, 300, 2170, 34086, 4079, 13, 2730, 24021], "temperature": 0.0, "avg_logprob": -0.178378168741862, "compression_ratio": 1.6234309623430963, "no_speech_prob": 5.057273665443063e-05}, {"id": 14, "seek": 8136, "start": 87.96, "end": 94.44, "text": " that one or activating the install requires a reboot, so that's an advantage because it wouldn't", "tokens": [300, 472, 420, 42481, 264, 3625, 7029, 257, 33818, 11, 370, 300, 311, 364, 5002, 570, 309, 2759, 380], "temperature": 0.0, "avg_logprob": -0.178378168741862, "compression_ratio": 1.6234309623430963, "no_speech_prob": 5.057273665443063e-05}, {"id": 15, "seek": 8136, "start": 94.44, "end": 100.52, "text": " break into intermediate states, but it just either works or doesn't. The disadvantage is that it's", "tokens": [1821, 666, 19376, 4368, 11, 457, 309, 445, 2139, 1985, 420, 1177, 380, 13, 440, 24292, 307, 300, 309, 311], "temperature": 0.0, "avg_logprob": -0.178378168741862, "compression_ratio": 1.6234309623430963, "no_speech_prob": 5.057273665443063e-05}, {"id": 16, "seek": 8136, "start": 100.52, "end": 104.72, "text": " typically not extendable, at least not the original image, so you would have to have some other", "tokens": [5850, 406, 10101, 712, 11, 412, 1935, 406, 264, 3380, 3256, 11, 370, 291, 576, 362, 281, 362, 512, 661], "temperature": 0.0, "avg_logprob": -0.178378168741862, "compression_ratio": 1.6234309623430963, "no_speech_prob": 5.057273665443063e-05}, {"id": 17, "seek": 10472, "start": 104.72, "end": 113.24, "text": " mechanism like system desizics nowadays that plays some tricks to get extra layers on top. So,", "tokens": [7513, 411, 1185, 730, 590, 1167, 13434, 300, 5749, 512, 11733, 281, 483, 2857, 7914, 322, 1192, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.25623618855195884, "compression_ratio": 1.5925925925925926, "no_speech_prob": 9.154010331258178e-05}, {"id": 18, "seek": 10472, "start": 113.24, "end": 119.8, "text": " let's first take a look at the file-stem layout of a typical image-based system, or one, I think,", "tokens": [718, 311, 700, 747, 257, 574, 412, 264, 3991, 12, 1099, 13333, 295, 257, 7476, 3256, 12, 6032, 1185, 11, 420, 472, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.25623618855195884, "compression_ratio": 1.5925925925925926, "no_speech_prob": 9.154010331258178e-05}, {"id": 19, "seek": 10472, "start": 119.8, "end": 125.36, "text": " our system, the envisions it. So, we have the operating system in slash user for Linux systems", "tokens": [527, 1185, 11, 264, 2267, 4252, 309, 13, 407, 11, 321, 362, 264, 7447, 1185, 294, 17330, 4195, 337, 18734, 3652], "temperature": 0.0, "avg_logprob": -0.25623618855195884, "compression_ratio": 1.5925925925925926, "no_speech_prob": 9.154010331258178e-05}, {"id": 20, "seek": 10472, "start": 125.36, "end": 133.24, "text": " after user merge. Then the EDC partition at the EDC volume is on slash, which is writable. The boot", "tokens": [934, 4195, 22183, 13, 1396, 264, 18050, 34, 24808, 412, 264, 18050, 34, 5523, 307, 322, 17330, 11, 597, 307, 10912, 712, 13, 440, 11450], "temperature": 0.0, "avg_logprob": -0.25623618855195884, "compression_ratio": 1.5925925925925926, "no_speech_prob": 9.154010331258178e-05}, {"id": 21, "seek": 13324, "start": 133.24, "end": 138.12, "text": " partition nowadays should be the ESP, no matter where it's mounted actually, and your data is in", "tokens": [24808, 13434, 820, 312, 264, 12564, 47, 11, 572, 1871, 689, 309, 311, 19138, 767, 11, 293, 428, 1412, 307, 294], "temperature": 0.0, "avg_logprob": -0.16261762253781584, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.00013508653501048684}, {"id": 22, "seek": 13324, "start": 138.12, "end": 145.24, "text": " var on a separate volume again. So, how do you do updates? Usually you have separate partitions", "tokens": [1374, 322, 257, 4994, 5523, 797, 13, 407, 11, 577, 360, 291, 360, 9205, 30, 11419, 291, 362, 4994, 644, 2451], "temperature": 0.0, "avg_logprob": -0.16261762253781584, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.00013508653501048684}, {"id": 23, "seek": 13324, "start": 145.24, "end": 153.84, "text": " for user, so the standard case is AP, so two versions, and then you DD your operating system", "tokens": [337, 4195, 11, 370, 264, 3832, 1389, 307, 5372, 11, 370, 732, 9606, 11, 293, 550, 291, 30778, 428, 7447, 1185], "temperature": 0.0, "avg_logprob": -0.16261762253781584, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.00013508653501048684}, {"id": 24, "seek": 13324, "start": 153.84, "end": 159.92000000000002, "text": " into one, while the other one runs, and on reboot you just switch. That's quite an easy", "tokens": [666, 472, 11, 1339, 264, 661, 472, 6676, 11, 293, 322, 33818, 291, 445, 3679, 13, 663, 311, 1596, 364, 1858], "temperature": 0.0, "avg_logprob": -0.16261762253781584, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.00013508653501048684}, {"id": 25, "seek": 15992, "start": 159.92, "end": 165.72, "text": " technology because it's just a regular partition table. It's actually read-only if the file-stem", "tokens": [2899, 570, 309, 311, 445, 257, 3890, 24808, 3199, 13, 467, 311, 767, 1401, 12, 25202, 498, 264, 3991, 12, 1099], "temperature": 0.0, "avg_logprob": -0.18142898499019564, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.463652193313465e-05}, {"id": 26, "seek": 15992, "start": 165.72, "end": 172.16, "text": " you use is a read-only one. You could use our single CAsync to download deltas and getting it", "tokens": [291, 764, 307, 257, 1401, 12, 25202, 472, 13, 509, 727, 764, 527, 2167, 383, 10884, 34015, 281, 5484, 1103, 83, 296, 293, 1242, 309], "temperature": 0.0, "avg_logprob": -0.18142898499019564, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.463652193313465e-05}, {"id": 27, "seek": 15992, "start": 172.16, "end": 177.23999999999998, "text": " from the server, and the signing is also pretty easy because it's one image, so you can put some", "tokens": [490, 264, 7154, 11, 293, 264, 13393, 307, 611, 1238, 1858, 570, 309, 311, 472, 3256, 11, 370, 291, 393, 829, 512], "temperature": 0.0, "avg_logprob": -0.18142898499019564, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.463652193313465e-05}, {"id": 28, "seek": 15992, "start": 177.23999999999998, "end": 181.32, "text": " GPG signature on it, and that's it, and you can even verify it afterwards because the image is", "tokens": [26039, 38, 13397, 322, 309, 11, 293, 300, 311, 309, 11, 293, 291, 393, 754, 16888, 309, 10543, 570, 264, 3256, 307], "temperature": 0.0, "avg_logprob": -0.18142898499019564, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.463652193313465e-05}, {"id": 29, "seek": 15992, "start": 181.32, "end": 188.0, "text": " unmodified on your partition. Disadvantages, there's no deduplication, so you always consume", "tokens": [517, 8014, 2587, 322, 428, 24808, 13, 4208, 345, 5219, 1660, 11, 456, 311, 572, 4172, 84, 4770, 399, 11, 370, 291, 1009, 14732], "temperature": 0.0, "avg_logprob": -0.18142898499019564, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.463652193313465e-05}, {"id": 30, "seek": 18800, "start": 188.0, "end": 194.52, "text": " twice the space basically, or however big your user partition is. Even if your updates are small,", "tokens": [6091, 264, 1901, 1936, 11, 420, 4461, 955, 428, 4195, 24808, 307, 13, 2754, 498, 428, 9205, 366, 1359, 11], "temperature": 0.0, "avg_logprob": -0.13365137577056885, "compression_ratio": 1.6828193832599119, "no_speech_prob": 5.214145130594261e-05}, {"id": 31, "seek": 18800, "start": 194.52, "end": 202.84, "text": " you still need all that space. The amount is limited, so usually if you have only two partitions,", "tokens": [291, 920, 643, 439, 300, 1901, 13, 440, 2372, 307, 5567, 11, 370, 2673, 498, 291, 362, 787, 732, 644, 2451, 11], "temperature": 0.0, "avg_logprob": -0.13365137577056885, "compression_ratio": 1.6828193832599119, "no_speech_prob": 5.214145130594261e-05}, {"id": 32, "seek": 18800, "start": 202.84, "end": 207.6, "text": " you have two versions of the operating system, and the space is pre-allocated. Again, that could", "tokens": [291, 362, 732, 9606, 295, 264, 7447, 1185, 11, 293, 264, 1901, 307, 659, 12, 336, 905, 770, 13, 3764, 11, 300, 727], "temperature": 0.0, "avg_logprob": -0.13365137577056885, "compression_ratio": 1.6828193832599119, "no_speech_prob": 5.214145130594261e-05}, {"id": 33, "seek": 18800, "start": 207.6, "end": 213.76, "text": " be an advantage because there's no surprises, the space is just there, and if it's there,", "tokens": [312, 364, 5002, 570, 456, 311, 572, 22655, 11, 264, 1901, 307, 445, 456, 11, 293, 498, 309, 311, 456, 11], "temperature": 0.0, "avg_logprob": -0.13365137577056885, "compression_ratio": 1.6828193832599119, "no_speech_prob": 5.214145130594261e-05}, {"id": 34, "seek": 21376, "start": 213.76, "end": 218.51999999999998, "text": " you can put the image, period. The disadvantages, your image can't grow, and the updates are always", "tokens": [291, 393, 829, 264, 3256, 11, 2896, 13, 440, 37431, 11, 428, 3256, 393, 380, 1852, 11, 293, 264, 9205, 366, 1009], "temperature": 0.0, "avg_logprob": -0.2977351188659668, "compression_ratio": 1.5755102040816327, "no_speech_prob": 4.749653453473002e-05}, {"id": 35, "seek": 21376, "start": 218.51999999999998, "end": 226.64, "text": " of a fixed size basically. So I can be optimized that. You could actually use butterfaces to our", "tokens": [295, 257, 6806, 2744, 1936, 13, 407, 286, 393, 312, 26941, 300, 13, 509, 727, 767, 764, 5517, 69, 2116, 281, 527], "temperature": 0.0, "avg_logprob": -0.2977351188659668, "compression_ratio": 1.5755102040816327, "no_speech_prob": 4.749653453473002e-05}, {"id": 36, "seek": 21376, "start": 226.64, "end": 233.0, "text": " operating system, that's how the micro-S works, some more details on that later in Ignite's talk.", "tokens": [7447, 1185, 11, 300, 311, 577, 264, 4532, 12, 50, 1985, 11, 512, 544, 4365, 322, 300, 1780, 294, 24754, 642, 311, 751, 13], "temperature": 0.0, "avg_logprob": -0.2977351188659668, "compression_ratio": 1.5755102040816327, "no_speech_prob": 4.749653453473002e-05}, {"id": 37, "seek": 21376, "start": 233.0, "end": 240.95999999999998, "text": " Anyway, we use a sub-volume for the operating system. That means you get the copy and write", "tokens": [5684, 11, 321, 764, 257, 1422, 12, 9646, 2540, 337, 264, 7447, 1185, 13, 663, 1355, 291, 483, 264, 5055, 293, 2464], "temperature": 0.0, "avg_logprob": -0.2977351188659668, "compression_ratio": 1.5755102040816327, "no_speech_prob": 4.749653453473002e-05}, {"id": 38, "seek": 24096, "start": 240.96, "end": 247.52, "text": " semantics automatically, so deduplication means your updated system does not automatically need", "tokens": [4361, 45298, 6772, 11, 370, 4172, 84, 4770, 399, 1355, 428, 10588, 1185, 775, 406, 6772, 643], "temperature": 0.0, "avg_logprob": -0.15126125179991431, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.00014571360952686518}, {"id": 39, "seek": 24096, "start": 247.52, "end": 253.32, "text": " twice the space, but only the changed amount. You can still use rsync or casync to only apply", "tokens": [6091, 264, 1901, 11, 457, 787, 264, 3105, 2372, 13, 509, 393, 920, 764, 367, 82, 34015, 420, 1335, 82, 34015, 281, 787, 3079], "temperature": 0.0, "avg_logprob": -0.15126125179991431, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.00014571360952686518}, {"id": 40, "seek": 24096, "start": 253.32, "end": 259.0, "text": " deltas. The amount of versions you can store is basically infinite, only depends on how big your", "tokens": [1103, 83, 296, 13, 440, 2372, 295, 9606, 291, 393, 3531, 307, 1936, 13785, 11, 787, 5946, 322, 577, 955, 428], "temperature": 0.0, "avg_logprob": -0.15126125179991431, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.00014571360952686518}, {"id": 41, "seek": 24096, "start": 259.0, "end": 266.16, "text": " updates are. So if you only have updates on text files, it could be a lot of versions. Disadvantages,", "tokens": [9205, 366, 13, 407, 498, 291, 787, 362, 9205, 322, 2487, 7098, 11, 309, 727, 312, 257, 688, 295, 9606, 13, 4208, 345, 5219, 1660, 11], "temperature": 0.0, "avg_logprob": -0.15126125179991431, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.00014571360952686518}, {"id": 42, "seek": 26616, "start": 266.16, "end": 272.12, "text": " it's not really read-only, it's just a butterfaces flag, and that can be changed of course. Also,", "tokens": [309, 311, 406, 534, 1401, 12, 25202, 11, 309, 311, 445, 257, 5517, 69, 2116, 7166, 11, 293, 300, 393, 312, 3105, 295, 1164, 13, 2743, 11], "temperature": 0.0, "avg_logprob": -0.17997582425776215, "compression_ratio": 1.531496062992126, "no_speech_prob": 0.00010048041440313682}, {"id": 43, "seek": 26616, "start": 272.12, "end": 277.56, "text": " put a question mark on verification. So previously with image, we could just run GPG for example,", "tokens": [829, 257, 1168, 1491, 322, 30206, 13, 407, 8046, 365, 3256, 11, 321, 727, 445, 1190, 26039, 38, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.17997582425776215, "compression_ratio": 1.531496062992126, "no_speech_prob": 0.00010048041440313682}, {"id": 44, "seek": 26616, "start": 277.56, "end": 283.52000000000004, "text": " and you can verify whether the image was modified or not. Here we have to take a look how to solve", "tokens": [293, 291, 393, 16888, 1968, 264, 3256, 390, 15873, 420, 406, 13, 1692, 321, 362, 281, 747, 257, 574, 577, 281, 5039], "temperature": 0.0, "avg_logprob": -0.17997582425776215, "compression_ratio": 1.531496062992126, "no_speech_prob": 0.00010048041440313682}, {"id": 45, "seek": 26616, "start": 283.52000000000004, "end": 290.16, "text": " that later. But how do distributions actually build those images? At least an operating system", "tokens": [300, 1780, 13, 583, 577, 360, 37870, 767, 1322, 729, 5267, 30, 1711, 1935, 364, 7447, 1185], "temperature": 0.0, "avg_logprob": -0.17997582425776215, "compression_ratio": 1.531496062992126, "no_speech_prob": 0.00010048041440313682}, {"id": 46, "seek": 29016, "start": 290.16, "end": 296.48, "text": " vendor like OpenSUSE would use packages to build the image, just on server side. We learned that", "tokens": [24321, 411, 7238, 50, 44626, 576, 764, 17401, 281, 1322, 264, 3256, 11, 445, 322, 7154, 1252, 13, 492, 3264, 300], "temperature": 0.0, "avg_logprob": -0.19389221124481737, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.0002725469530560076}, {"id": 47, "seek": 29016, "start": 296.48, "end": 302.20000000000005, "text": " we can even use this technology for building any of these, and the way the image would be shipped", "tokens": [321, 393, 754, 764, 341, 2899, 337, 2390, 604, 295, 613, 11, 293, 264, 636, 264, 3256, 576, 312, 25312], "temperature": 0.0, "avg_logprob": -0.19389221124481737, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.0002725469530560076}, {"id": 48, "seek": 29016, "start": 302.20000000000005, "end": 306.8, "text": " would be just install packages somewhere on a server system and then throw away everything that is", "tokens": [576, 312, 445, 3625, 17401, 4079, 322, 257, 7154, 1185, 293, 550, 3507, 1314, 1203, 300, 307], "temperature": 0.0, "avg_logprob": -0.19389221124481737, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.0002725469530560076}, {"id": 49, "seek": 29016, "start": 306.8, "end": 314.08000000000004, "text": " not in user. That means all the scriptlets that run in packages are just modifying something that's", "tokens": [406, 294, 4195, 13, 663, 1355, 439, 264, 5755, 12541, 300, 1190, 294, 17401, 366, 445, 42626, 746, 300, 311], "temperature": 0.0, "avg_logprob": -0.19389221124481737, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.0002725469530560076}, {"id": 50, "seek": 29016, "start": 314.08000000000004, "end": 319.6, "text": " not relevant. Like in EDC and VAR, it doesn't make any sense to have a scriptlet doing something", "tokens": [406, 7340, 13, 1743, 294, 18050, 34, 293, 691, 1899, 11, 309, 1177, 380, 652, 604, 2020, 281, 362, 257, 5755, 2631, 884, 746], "temperature": 0.0, "avg_logprob": -0.19389221124481737, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.0002725469530560076}, {"id": 51, "seek": 31960, "start": 319.6, "end": 324.8, "text": " there. So when, for example, a package needs to add a user, it can't just call user add. It needs to", "tokens": [456, 13, 407, 562, 11, 337, 1365, 11, 257, 7372, 2203, 281, 909, 257, 4195, 11, 309, 393, 380, 445, 818, 4195, 909, 13, 467, 2203, 281], "temperature": 0.0, "avg_logprob": -0.20784633599438715, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.00020562268036883324}, {"id": 52, "seek": 31960, "start": 324.8, "end": 330.6, "text": " use SystemDISUS users. Same if you don't enable a service, you can't just call SystemControlEnable,", "tokens": [764, 8910, 35, 2343, 3447, 5022, 13, 10635, 498, 291, 500, 380, 9528, 257, 2643, 11, 291, 393, 380, 445, 818, 8910, 29821, 6623, 16257, 712, 11], "temperature": 0.0, "avg_logprob": -0.20784633599438715, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.00020562268036883324}, {"id": 53, "seek": 31960, "start": 330.6, "end": 337.6, "text": " you need to ship presets. And that way packages also can't just put the kernel in slash boot", "tokens": [291, 643, 281, 5374, 41865, 13, 400, 300, 636, 17401, 611, 393, 380, 445, 829, 264, 28256, 294, 17330, 11450], "temperature": 0.0, "avg_logprob": -0.20784633599438715, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.00020562268036883324}, {"id": 54, "seek": 31960, "start": 337.6, "end": 342.32000000000005, "text": " anymore because that's not in user. That means there needs to be some extra tool that somehow", "tokens": [3602, 570, 300, 311, 406, 294, 4195, 13, 663, 1355, 456, 2203, 281, 312, 512, 2857, 2290, 300, 6063], "temperature": 0.0, "avg_logprob": -0.20784633599438715, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.00020562268036883324}, {"id": 55, "seek": 34232, "start": 342.32, "end": 352.08, "text": " makes a system bootable when there's a new kernel, for example. So back to verification. Actually", "tokens": [1669, 257, 1185, 11450, 712, 562, 456, 311, 257, 777, 28256, 11, 337, 1365, 13, 407, 646, 281, 30206, 13, 5135], "temperature": 0.0, "avg_logprob": -0.1673361417409536, "compression_ratio": 1.598901098901099, "no_speech_prob": 5.295892333379015e-05}, {"id": 56, "seek": 34232, "start": 352.08, "end": 360.56, "text": " packages, at least RPM packages, have signed headers, and the headers have check sums for each", "tokens": [17401, 11, 412, 1935, 37389, 17401, 11, 362, 8175, 45101, 11, 293, 264, 45101, 362, 1520, 34499, 337, 1184], "temperature": 0.0, "avg_logprob": -0.1673361417409536, "compression_ratio": 1.598901098901099, "no_speech_prob": 5.295892333379015e-05}, {"id": 57, "seek": 34232, "start": 360.56, "end": 371.2, "text": " file. So in the end, an image is a list of RPMs with signed headers, and by verifying each header,", "tokens": [3991, 13, 407, 294, 264, 917, 11, 364, 3256, 307, 257, 1329, 295, 14105, 26386, 365, 8175, 45101, 11, 293, 538, 1306, 5489, 1184, 23117, 11], "temperature": 0.0, "avg_logprob": -0.1673361417409536, "compression_ratio": 1.598901098901099, "no_speech_prob": 5.295892333379015e-05}, {"id": 58, "seek": 37120, "start": 371.2, "end": 376.92, "text": " you can also verify each file. So in the end, you have a tree that could be verified, you can", "tokens": [291, 393, 611, 16888, 1184, 3991, 13, 407, 294, 264, 917, 11, 291, 362, 257, 4230, 300, 727, 312, 31197, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.11520653412121684, "compression_ratio": 1.8249027237354085, "no_speech_prob": 3.9373739127768204e-05}, {"id": 59, "seek": 37120, "start": 376.92, "end": 382.32, "text": " check that there's no file added, no file removed, and no file modified, just by looking at the", "tokens": [1520, 300, 456, 311, 572, 3991, 3869, 11, 572, 3991, 7261, 11, 293, 572, 3991, 15873, 11, 445, 538, 1237, 412, 264], "temperature": 0.0, "avg_logprob": -0.11520653412121684, "compression_ratio": 1.8249027237354085, "no_speech_prob": 3.9373739127768204e-05}, {"id": 60, "seek": 37120, "start": 382.32, "end": 389.32, "text": " RPM headers. Disadvantages and images that you ship, you typically remove the RPM database", "tokens": [37389, 45101, 13, 4208, 345, 5219, 1660, 293, 5267, 300, 291, 5374, 11, 291, 5850, 4159, 264, 37389, 8149], "temperature": 0.0, "avg_logprob": -0.11520653412121684, "compression_ratio": 1.8249027237354085, "no_speech_prob": 3.9373739127768204e-05}, {"id": 61, "seek": 37120, "start": 389.32, "end": 394.36, "text": " because it's this ugly binary blob. Even if it's a SQLite database, it's still an ugly binary", "tokens": [570, 309, 311, 341, 12246, 17434, 46115, 13, 2754, 498, 309, 311, 257, 19200, 642, 8149, 11, 309, 311, 920, 364, 12246, 17434], "temperature": 0.0, "avg_logprob": -0.11520653412121684, "compression_ratio": 1.8249027237354085, "no_speech_prob": 3.9373739127768204e-05}, {"id": 62, "seek": 37120, "start": 394.36, "end": 400.48, "text": " blob with more binary blobs in there. So that's why people really hate having the RPM database", "tokens": [46115, 365, 544, 17434, 1749, 929, 294, 456, 13, 407, 300, 311, 983, 561, 534, 4700, 1419, 264, 37389, 8149], "temperature": 0.0, "avg_logprob": -0.11520653412121684, "compression_ratio": 1.8249027237354085, "no_speech_prob": 3.9373739127768204e-05}, {"id": 63, "seek": 40048, "start": 400.48, "end": 406.28000000000003, "text": " there. This is something that nobody wants to see in an image. So how can we fix that? We could", "tokens": [456, 13, 639, 307, 746, 300, 5079, 2738, 281, 536, 294, 364, 3256, 13, 407, 577, 393, 321, 3191, 300, 30, 492, 727], "temperature": 0.0, "avg_logprob": -0.12203868778272607, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.00010859236499527469}, {"id": 64, "seek": 40048, "start": 406.28000000000003, "end": 414.20000000000005, "text": " actually store the RPM headers as files. So we just dump the header part of the package into a", "tokens": [767, 3531, 264, 37389, 45101, 382, 7098, 13, 407, 321, 445, 11430, 264, 23117, 644, 295, 264, 7372, 666, 257], "temperature": 0.0, "avg_logprob": -0.12203868778272607, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.00010859236499527469}, {"id": 65, "seek": 40048, "start": 414.20000000000005, "end": 420.40000000000003, "text": " directory. That means the directory is the RPM database that looks much less ugly. Different", "tokens": [21120, 13, 663, 1355, 264, 21120, 307, 264, 37389, 8149, 300, 1542, 709, 1570, 12246, 13, 20825], "temperature": 0.0, "avg_logprob": -0.12203868778272607, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.00010859236499527469}, {"id": 66, "seek": 40048, "start": 420.40000000000003, "end": 427.40000000000003, "text": " two file directory listings to actually see which packages could update it. That is quite useful", "tokens": [732, 3991, 21120, 45615, 281, 767, 536, 597, 17401, 727, 5623, 309, 13, 663, 307, 1596, 4420], "temperature": 0.0, "avg_logprob": -0.12203868778272607, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.00010859236499527469}, {"id": 67, "seek": 42740, "start": 427.4, "end": 433.23999999999995, "text": " if you already use Microsoft, for example, and do some snapper compare, then it tells you this", "tokens": [498, 291, 1217, 764, 8116, 11, 337, 1365, 11, 293, 360, 512, 14528, 3717, 6794, 11, 550, 309, 5112, 291, 341], "temperature": 0.0, "avg_logprob": -0.18947757921720806, "compression_ratio": 1.5909090909090908, "no_speech_prob": 3.3173160773003474e-05}, {"id": 68, "seek": 42740, "start": 433.23999999999995, "end": 439.03999999999996, "text": " RPM database and this RPM database change, but you don't know what. If the database is a listing", "tokens": [37389, 8149, 293, 341, 37389, 8149, 1319, 11, 457, 291, 500, 380, 458, 437, 13, 759, 264, 8149, 307, 257, 22161], "temperature": 0.0, "avg_logprob": -0.18947757921720806, "compression_ratio": 1.5909090909090908, "no_speech_prob": 3.3173160773003474e-05}, {"id": 69, "seek": 42740, "start": 439.03999999999996, "end": 446.71999999999997, "text": " of files, it's naturally visible what changed. And still we have the RPM header, so users fully", "tokens": [295, 7098, 11, 309, 311, 8195, 8974, 437, 3105, 13, 400, 920, 321, 362, 264, 37389, 23117, 11, 370, 5022, 4498], "temperature": 0.0, "avg_logprob": -0.18947757921720806, "compression_ratio": 1.5909090909090908, "no_speech_prob": 3.3173160773003474e-05}, {"id": 70, "seek": 42740, "start": 446.71999999999997, "end": 455.03999999999996, "text": " verifiable because they're signed. So the question now is, what do we actually need an image for?", "tokens": [1306, 30876, 570, 436, 434, 8175, 13, 407, 264, 1168, 586, 307, 11, 437, 360, 321, 767, 643, 364, 3256, 337, 30], "temperature": 0.0, "avg_logprob": -0.18947757921720806, "compression_ratio": 1.5909090909090908, "no_speech_prob": 3.3173160773003474e-05}, {"id": 71, "seek": 45504, "start": 455.04, "end": 461.8, "text": " So you don't need to take those RPMs, put them into some file system, and then download the whole", "tokens": [407, 291, 500, 380, 643, 281, 747, 729, 14105, 26386, 11, 829, 552, 666, 512, 3991, 1185, 11, 293, 550, 5484, 264, 1379], "temperature": 0.0, "avg_logprob": -0.15238543192545573, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.00024808727903291583}, {"id": 72, "seek": 45504, "start": 461.8, "end": 469.16, "text": " file system or this image or table. You could actually define an image as a text file that lists", "tokens": [3991, 1185, 420, 341, 3256, 420, 3199, 13, 509, 727, 767, 6964, 364, 3256, 382, 257, 2487, 3991, 300, 14511], "temperature": 0.0, "avg_logprob": -0.15238543192545573, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.00024808727903291583}, {"id": 73, "seek": 45504, "start": 469.16, "end": 477.52000000000004, "text": " RPMs. And then you download those RPMs, which are bits of your image, and just put them into this", "tokens": [14105, 26386, 13, 400, 550, 291, 5484, 729, 14105, 26386, 11, 597, 366, 9239, 295, 428, 3256, 11, 293, 445, 829, 552, 666, 341], "temperature": 0.0, "avg_logprob": -0.15238543192545573, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.00024808727903291583}, {"id": 74, "seek": 47752, "start": 477.52, "end": 485.64, "text": " file system or partition that is user. Disadvantage of this method again would be that with nowadays", "tokens": [3991, 1185, 420, 24808, 300, 307, 4195, 13, 4208, 345, 23408, 295, 341, 3170, 797, 576, 312, 300, 365, 13434], "temperature": 0.0, "avg_logprob": -0.12795081581037068, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00012881917064078152}, {"id": 75, "seek": 47752, "start": 485.64, "end": 491.28, "text": " RPMs you would lose the ability to do easy deltas because the payload is actually a CPO that is", "tokens": [14105, 26386, 291, 576, 3624, 264, 3485, 281, 360, 1858, 1103, 83, 296, 570, 264, 30918, 307, 767, 257, 22431, 46, 300, 307], "temperature": 0.0, "avg_logprob": -0.12795081581037068, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00012881917064078152}, {"id": 76, "seek": 47752, "start": 491.28, "end": 497.0, "text": " compressed with some compression. So if you don't want to use delta RPMs or other fancy things,", "tokens": [30353, 365, 512, 19355, 13, 407, 498, 291, 500, 380, 528, 281, 764, 8289, 14105, 26386, 420, 661, 10247, 721, 11], "temperature": 0.0, "avg_logprob": -0.12795081581037068, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00012881917064078152}, {"id": 77, "seek": 47752, "start": 497.0, "end": 503.03999999999996, "text": " you need to find a solution for the payload of RPMs. So the payload doesn't actually have to be a", "tokens": [291, 643, 281, 915, 257, 3827, 337, 264, 30918, 295, 14105, 26386, 13, 407, 264, 30918, 1177, 380, 767, 362, 281, 312, 257], "temperature": 0.0, "avg_logprob": -0.12795081581037068, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00012881917064078152}, {"id": 78, "seek": 50304, "start": 503.04, "end": 509.56, "text": " CPO that is compressed. It could be actually completely uncompressed. So you just concatenate", "tokens": [22431, 46, 300, 307, 30353, 13, 467, 727, 312, 767, 2584, 8585, 79, 3805, 13, 407, 291, 445, 1588, 7186, 473], "temperature": 0.0, "avg_logprob": -0.16821916641727572, "compression_ratio": 1.6724890829694323, "no_speech_prob": 5.213361146161333e-05}, {"id": 79, "seek": 50304, "start": 509.56, "end": 515.12, "text": " all the file contents at the end of the RPM header. And because RPM header contains also the file", "tokens": [439, 264, 3991, 15768, 412, 264, 917, 295, 264, 37389, 23117, 13, 400, 570, 37389, 23117, 8306, 611, 264, 3991], "temperature": 0.0, "avg_logprob": -0.16821916641727572, "compression_ratio": 1.6724890829694323, "no_speech_prob": 5.213361146161333e-05}, {"id": 80, "seek": 50304, "start": 515.12, "end": 525.24, "text": " sizes, you know which file is where. Now if we do another trick and align those file datas to", "tokens": [11602, 11, 291, 458, 597, 3991, 307, 689, 13, 823, 498, 321, 360, 1071, 4282, 293, 7975, 729, 3991, 20377, 281], "temperature": 0.0, "avg_logprob": -0.16821916641727572, "compression_ratio": 1.6724890829694323, "no_speech_prob": 5.213361146161333e-05}, {"id": 81, "seek": 50304, "start": 525.24, "end": 531.96, "text": " page size, you actually get reflinkable packages. That means you could download this uncompressed", "tokens": [3028, 2744, 11, 291, 767, 483, 1895, 75, 475, 712, 17401, 13, 663, 1355, 291, 727, 5484, 341, 8585, 79, 3805], "temperature": 0.0, "avg_logprob": -0.16821916641727572, "compression_ratio": 1.6724890829694323, "no_speech_prob": 5.213361146161333e-05}, {"id": 82, "seek": 53196, "start": 531.96, "end": 537.12, "text": " RPM, for example by means of CAsync, which would compress it actually on the server side. Then", "tokens": [37389, 11, 337, 1365, 538, 1355, 295, 383, 10884, 34015, 11, 597, 576, 14778, 309, 767, 322, 264, 7154, 1252, 13, 1396], "temperature": 0.0, "avg_logprob": -0.19217582543691, "compression_ratio": 1.5982905982905984, "no_speech_prob": 5.465071080834605e-05}, {"id": 83, "seek": 53196, "start": 537.12, "end": 543.2800000000001, "text": " you have the RPM on disk. And then instead of copying the payload to some other location,", "tokens": [291, 362, 264, 37389, 322, 12355, 13, 400, 550, 2602, 295, 27976, 264, 30918, 281, 512, 661, 4914, 11], "temperature": 0.0, "avg_logprob": -0.19217582543691, "compression_ratio": 1.5982905982905984, "no_speech_prob": 5.465071080834605e-05}, {"id": 84, "seek": 53196, "start": 543.2800000000001, "end": 550.72, "text": " you just use reflinks as a file system feature that reuses the blocks. So you have this one big", "tokens": [291, 445, 764, 1895, 75, 16431, 382, 257, 3991, 1185, 4111, 300, 319, 8355, 264, 8474, 13, 407, 291, 362, 341, 472, 955], "temperature": 0.0, "avg_logprob": -0.19217582543691, "compression_ratio": 1.5982905982905984, "no_speech_prob": 5.465071080834605e-05}, {"id": 85, "seek": 53196, "start": 550.72, "end": 557.12, "text": " chunk of data as the RPM. And to create your actual files, you just link the data into there.", "tokens": [16635, 295, 1412, 382, 264, 37389, 13, 400, 281, 1884, 428, 3539, 7098, 11, 291, 445, 2113, 264, 1412, 666, 456, 13], "temperature": 0.0, "avg_logprob": -0.19217582543691, "compression_ratio": 1.5982905982905984, "no_speech_prob": 5.465071080834605e-05}, {"id": 86, "seek": 55712, "start": 557.12, "end": 565.24, "text": " That means user bin bash is not actually a copy, it's just sharing the same data that is in this", "tokens": [663, 1355, 4195, 5171, 46183, 307, 406, 767, 257, 5055, 11, 309, 311, 445, 5414, 264, 912, 1412, 300, 307, 294, 341], "temperature": 0.0, "avg_logprob": -0.20808295153696602, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012115640856791288}, {"id": 87, "seek": 55712, "start": 565.24, "end": 570.16, "text": " RPM that is stored there, which conveniently is at the same time your RPM database. So it's not", "tokens": [37389, 300, 307, 12187, 456, 11, 597, 44375, 307, 412, 264, 912, 565, 428, 37389, 8149, 13, 407, 309, 311, 406], "temperature": 0.0, "avg_logprob": -0.20808295153696602, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012115640856791288}, {"id": 88, "seek": 55712, "start": 570.16, "end": 577.12, "text": " just the headers that are in this directory, it is the full package. So in the end, in this example,", "tokens": [445, 264, 45101, 300, 366, 294, 341, 21120, 11, 309, 307, 264, 1577, 7372, 13, 407, 294, 264, 917, 11, 294, 341, 1365, 11], "temperature": 0.0, "avg_logprob": -0.20808295153696602, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012115640856791288}, {"id": 89, "seek": 55712, "start": 577.12, "end": 585.48, "text": " I put userLibsusImagePackages. UserLibsusImagesPackages would be your image. That means users just", "tokens": [286, 829, 4195, 43, 897, 82, 301, 31128, 609, 47, 501, 1660, 13, 32127, 43, 897, 82, 301, 31128, 1660, 47, 501, 1660, 576, 312, 428, 3256, 13, 663, 1355, 5022, 445], "temperature": 0.0, "avg_logprob": -0.20808295153696602, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012115640856791288}, {"id": 90, "seek": 58548, "start": 585.48, "end": 591.5600000000001, "text": " a view. And if you would map this into ButterFS, like in this example, that means you have several", "tokens": [257, 1910, 13, 400, 498, 291, 576, 4471, 341, 666, 22646, 29318, 11, 411, 294, 341, 1365, 11, 300, 1355, 291, 362, 2940], "temperature": 0.0, "avg_logprob": -0.17756258923074472, "compression_ratio": 1.6041666666666667, "no_speech_prob": 7.830684626242146e-05}, {"id": 91, "seek": 58548, "start": 591.5600000000001, "end": 596.88, "text": " versions of this image directory as a snapshot. And then you could create other ButterFS volumes", "tokens": [9606, 295, 341, 3256, 21120, 382, 257, 30163, 13, 400, 550, 291, 727, 1884, 661, 22646, 29318, 22219], "temperature": 0.0, "avg_logprob": -0.17756258923074472, "compression_ratio": 1.6041666666666667, "no_speech_prob": 7.830684626242146e-05}, {"id": 92, "seek": 58548, "start": 596.88, "end": 605.6, "text": " that just link into those RPM headers. Or you could even omit this user completely, a colleague", "tokens": [300, 445, 2113, 666, 729, 37389, 45101, 13, 1610, 291, 727, 754, 3406, 270, 341, 4195, 2584, 11, 257, 13532], "temperature": 0.0, "avg_logprob": -0.17756258923074472, "compression_ratio": 1.6041666666666667, "no_speech_prob": 7.830684626242146e-05}, {"id": 93, "seek": 58548, "start": 605.6, "end": 611.0, "text": " of mine Fabian, even wrote a fuse plugin that just creates a file system from looking at RPM,", "tokens": [295, 3892, 17440, 952, 11, 754, 4114, 257, 31328, 23407, 300, 445, 7829, 257, 3991, 1185, 490, 1237, 412, 37389, 11], "temperature": 0.0, "avg_logprob": -0.17756258923074472, "compression_ratio": 1.6041666666666667, "no_speech_prob": 7.830684626242146e-05}, {"id": 94, "seek": 61100, "start": 611.0, "end": 619.88, "text": " RPM's in the directory. Quite crazy. So to summarize, we could build an image-like system by", "tokens": [37389, 311, 294, 264, 21120, 13, 20464, 3219, 13, 407, 281, 20858, 11, 321, 727, 1322, 364, 3256, 12, 4092, 1185, 538], "temperature": 0.0, "avg_logprob": -0.1621297375186459, "compression_ratio": 1.5165289256198347, "no_speech_prob": 3.214572643628344e-05}, {"id": 95, "seek": 61100, "start": 619.88, "end": 626.4, "text": " leveraging ButterFS. So instead of using AP partitions, we just use snapshots. The behavior", "tokens": [32666, 22646, 29318, 13, 407, 2602, 295, 1228, 5372, 644, 2451, 11, 321, 445, 764, 19206, 27495, 13, 440, 5223], "temperature": 0.0, "avg_logprob": -0.1621297375186459, "compression_ratio": 1.5165289256198347, "no_speech_prob": 3.214572643628344e-05}, {"id": 96, "seek": 61100, "start": 626.4, "end": 630.68, "text": " would be exactly the same because you prepare this new snapshot, put all your data in there,", "tokens": [576, 312, 2293, 264, 912, 570, 291, 5940, 341, 777, 30163, 11, 829, 439, 428, 1412, 294, 456, 11], "temperature": 0.0, "avg_logprob": -0.1621297375186459, "compression_ratio": 1.5165289256198347, "no_speech_prob": 3.214572643628344e-05}, {"id": 97, "seek": 61100, "start": 630.68, "end": 635.92, "text": " and then you have to reboot to activate it. But since it's still packages, you retain the", "tokens": [293, 550, 291, 362, 281, 33818, 281, 13615, 309, 13, 583, 1670, 309, 311, 920, 17401, 11, 291, 18340, 264], "temperature": 0.0, "avg_logprob": -0.1621297375186459, "compression_ratio": 1.5165289256198347, "no_speech_prob": 3.214572643628344e-05}, {"id": 98, "seek": 63592, "start": 635.92, "end": 641.24, "text": " flexibility to actually change it on client side. You could ship the image as a list of RPM's on", "tokens": [12635, 281, 767, 1319, 309, 322, 6423, 1252, 13, 509, 727, 5374, 264, 3256, 382, 257, 1329, 295, 37389, 311, 322], "temperature": 0.0, "avg_logprob": -0.19511028758266516, "compression_ratio": 1.6180555555555556, "no_speech_prob": 6.492784450529143e-05}, {"id": 99, "seek": 63592, "start": 641.24, "end": 646.4799999999999, "text": " text file, but you could also add RPM's locally in this directory, and you have them installed.", "tokens": [2487, 3991, 11, 457, 291, 727, 611, 909, 37389, 311, 16143, 294, 341, 21120, 11, 293, 291, 362, 552, 8899, 13], "temperature": 0.0, "avg_logprob": -0.19511028758266516, "compression_ratio": 1.6180555555555556, "no_speech_prob": 6.492784450529143e-05}, {"id": 100, "seek": 63592, "start": 646.4799999999999, "end": 652.64, "text": " So best of both worlds. And this is not just completely crazy in my head. I actually built", "tokens": [407, 1151, 295, 1293, 13401, 13, 400, 341, 307, 406, 445, 2584, 3219, 294, 452, 1378, 13, 286, 767, 3094], "temperature": 0.0, "avg_logprob": -0.19511028758266516, "compression_ratio": 1.6180555555555556, "no_speech_prob": 6.492784450529143e-05}, {"id": 101, "seek": 63592, "start": 652.64, "end": 659.8, "text": " a prototype that kind of works. So it uses busybox because it was easy to modify the RPM", "tokens": [257, 19475, 300, 733, 295, 1985, 13, 407, 309, 4960, 5856, 4995, 570, 309, 390, 1858, 281, 16927, 264, 37389], "temperature": 0.0, "avg_logprob": -0.19511028758266516, "compression_ratio": 1.6180555555555556, "no_speech_prob": 6.492784450529143e-05}, {"id": 102, "seek": 63592, "start": 659.8, "end": 664.56, "text": " implementation in there, to work with those raffle link in the packages. This is our sync for", "tokens": [11420, 294, 456, 11, 281, 589, 365, 729, 367, 29264, 2113, 294, 264, 17401, 13, 639, 307, 527, 20271, 337], "temperature": 0.0, "avg_logprob": -0.19511028758266516, "compression_ratio": 1.6180555555555556, "no_speech_prob": 6.492784450529143e-05}, {"id": 103, "seek": 66456, "start": 664.56, "end": 671.52, "text": " updates, and it uses SystemD's kernel installed to make this system actually bootable. So you", "tokens": [9205, 11, 293, 309, 4960, 8910, 35, 311, 28256, 8899, 281, 652, 341, 1185, 767, 11450, 712, 13, 407, 291], "temperature": 0.0, "avg_logprob": -0.1829907948734196, "compression_ratio": 1.5723684210526316, "no_speech_prob": 0.0004621660045813769}, {"id": 104, "seek": 66456, "start": 671.52, "end": 677.8, "text": " can try it out. There's also pull request open for RPM, I think, to have this raffle linkable", "tokens": [393, 853, 309, 484, 13, 821, 311, 611, 2235, 5308, 1269, 337, 37389, 11, 286, 519, 11, 281, 362, 341, 367, 29264, 2113, 712], "temperature": 0.0, "avg_logprob": -0.1829907948734196, "compression_ratio": 1.5723684210526316, "no_speech_prob": 0.0004621660045813769}, {"id": 105, "seek": 66456, "start": 677.8, "end": 682.4799999999999, "text": " stuff and send a patch to busybox, but I don't expect it to be accepted. It's just a proof of", "tokens": [1507, 293, 2845, 257, 9972, 281, 5856, 4995, 11, 457, 286, 500, 380, 2066, 309, 281, 312, 9035, 13, 467, 311, 445, 257, 8177, 295], "temperature": 0.0, "avg_logprob": -0.1829907948734196, "compression_ratio": 1.5723684210526316, "no_speech_prob": 0.0004621660045813769}, {"id": 106, "seek": 66456, "start": 682.4799999999999, "end": 687.68, "text": " concept. Of course, to make this work in practice, there's lots of to-do's. So in existing distros", "tokens": [3410, 13, 2720, 1164, 11, 281, 652, 341, 589, 294, 3124, 11, 456, 311, 3195, 295, 281, 12, 2595, 311, 13, 407, 294, 6741, 1483, 2635], "temperature": 0.0, "avg_logprob": -0.1829907948734196, "compression_ratio": 1.5723684210526316, "no_speech_prob": 0.0004621660045813769}, {"id": 107, "seek": 66456, "start": 687.68, "end": 692.76, "text": " like OpenSUSE, we have to fix all the packages to no longer use scriptlets. We need to talk about", "tokens": [411, 7238, 50, 44626, 11, 321, 362, 281, 3191, 439, 264, 17401, 281, 572, 2854, 764, 5755, 12541, 13, 492, 643, 281, 751, 466], "temperature": 0.0, "avg_logprob": -0.1829907948734196, "compression_ratio": 1.5723684210526316, "no_speech_prob": 0.0004621660045813769}, {"id": 108, "seek": 69276, "start": 692.76, "end": 697.16, "text": " the butterfly sub volumes. The naming should be standardized. There was actually a discussion", "tokens": [264, 22140, 1422, 22219, 13, 440, 25290, 820, 312, 31677, 13, 821, 390, 767, 257, 5017], "temperature": 0.0, "avg_logprob": -0.1817281571301547, "compression_ratio": 1.5583333333333333, "no_speech_prob": 0.00013520392531063408}, {"id": 109, "seek": 69276, "start": 697.16, "end": 703.04, "text": " like two years ago already on the list. RPM raffle link payload would be nice to have upstream.", "tokens": [411, 732, 924, 2057, 1217, 322, 264, 1329, 13, 37389, 367, 29264, 2113, 30918, 576, 312, 1481, 281, 362, 33915, 13], "temperature": 0.0, "avg_logprob": -0.1817281571301547, "compression_ratio": 1.5583333333333333, "no_speech_prob": 0.00013520392531063408}, {"id": 110, "seek": 69276, "start": 703.04, "end": 708.88, "text": " There are other stakeholders that also would like to have that. I'm already working on SystemD's", "tokens": [821, 366, 661, 17779, 300, 611, 576, 411, 281, 362, 300, 13, 286, 478, 1217, 1364, 322, 8910, 35, 311], "temperature": 0.0, "avg_logprob": -0.1817281571301547, "compression_ratio": 1.5583333333333333, "no_speech_prob": 0.00013520392531063408}, {"id": 111, "seek": 69276, "start": 708.88, "end": 716.96, "text": " kernel installed to make it usable for this use case. In case of micro-as-like systems,", "tokens": [28256, 8899, 281, 652, 309, 29975, 337, 341, 764, 1389, 13, 682, 1389, 295, 4532, 12, 296, 12, 4092, 3652, 11], "temperature": 0.0, "avg_logprob": -0.1817281571301547, "compression_ratio": 1.5583333333333333, "no_speech_prob": 0.00013520392531063408}, {"id": 112, "seek": 71696, "start": 716.96, "end": 722.96, "text": " we want to have roll-baggles of slash and just the operating system. For installing deltas, I would", "tokens": [321, 528, 281, 362, 3373, 12, 17282, 70, 904, 295, 17330, 293, 445, 264, 7447, 1185, 13, 1171, 20762, 1103, 83, 296, 11, 286, 576], "temperature": 0.0, "avg_logprob": -0.25343924832631304, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.0001728274510242045}, {"id": 113, "seek": 71696, "start": 722.96, "end": 728.52, "text": " like to use the async, which we revisited. And last but not least, all of that should be native", "tokens": [411, 281, 764, 264, 382, 34015, 11, 597, 321, 20767, 1226, 13, 400, 1036, 457, 406, 1935, 11, 439, 295, 300, 820, 312, 8470], "temperature": 0.0, "avg_logprob": -0.25343924832631304, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.0001728274510242045}, {"id": 114, "seek": 71696, "start": 728.52, "end": 736.24, "text": " in RPM or SIP, and in my opinion, not just some extra tool. And that's it already. So any questions", "tokens": [294, 37389, 420, 318, 9139, 11, 293, 294, 452, 4800, 11, 406, 445, 512, 2857, 2290, 13, 400, 300, 311, 309, 1217, 13, 407, 604, 1651], "temperature": 0.0, "avg_logprob": -0.25343924832631304, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.0001728274510242045}, {"id": 115, "seek": 73624, "start": 736.24, "end": 749.0, "text": " for this crazy stuff? Okay, me first. So how did you handle the timestamp AC? Because if you're", "tokens": [337, 341, 3219, 1507, 30, 1033, 11, 385, 700, 13, 407, 577, 630, 291, 4813, 264, 49108, 1215, 8157, 30, 1436, 498, 291, 434], "temperature": 0.0, "avg_logprob": -0.19410991668701172, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.00026550202164798975}, {"id": 116, "seek": 73624, "start": 749.0, "end": 754.8, "text": " using BTRFS and doing an RPM minus I, you get the A time, M time, and C time in the i-node. And", "tokens": [1228, 363, 25936, 29318, 293, 884, 364, 37389, 3175, 286, 11, 291, 483, 264, 316, 565, 11, 376, 565, 11, 293, 383, 565, 294, 264, 741, 12, 77, 1429, 13, 400], "temperature": 0.0, "avg_logprob": -0.19410991668701172, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.00026550202164798975}, {"id": 117, "seek": 73624, "start": 754.8, "end": 761.04, "text": " an image-based system is supposed to hash end to end the same. And if it has different timestamps,", "tokens": [364, 3256, 12, 6032, 1185, 307, 3442, 281, 22019, 917, 281, 917, 264, 912, 13, 400, 498, 309, 575, 819, 49108, 23150, 11], "temperature": 0.0, "avg_logprob": -0.19410991668701172, "compression_ratio": 1.4572864321608041, "no_speech_prob": 0.00026550202164798975}, {"id": 118, "seek": 76104, "start": 761.04, "end": 766.04, "text": " it doesn't hash end to end. Yeah, well, you can't modify the timestamps. You can't modify. You can", "tokens": [309, 1177, 380, 22019, 917, 281, 917, 13, 865, 11, 731, 11, 291, 393, 380, 16927, 264, 49108, 23150, 13, 509, 393, 380, 16927, 13, 509, 393], "temperature": 0.0, "avg_logprob": -0.14327506484272323, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00018861342687159777}, {"id": 119, "seek": 76104, "start": 766.04, "end": 772.12, "text": " only look at the ones that are under your control. But then doesn't that mean that effectively we", "tokens": [787, 574, 412, 264, 2306, 300, 366, 833, 428, 1969, 13, 583, 550, 1177, 380, 300, 914, 300, 8659, 321], "temperature": 0.0, "avg_logprob": -0.14327506484272323, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00018861342687159777}, {"id": 120, "seek": 76104, "start": 772.12, "end": 778.0799999999999, "text": " can't use this to reconstruct image-based systems? Well, it's not a bit-to-bit identical. What is", "tokens": [393, 380, 764, 341, 281, 31499, 3256, 12, 6032, 3652, 30, 1042, 11, 309, 311, 406, 257, 857, 12, 1353, 12, 5260, 14800, 13, 708, 307], "temperature": 0.0, "avg_logprob": -0.14327506484272323, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00018861342687159777}, {"id": 121, "seek": 76104, "start": 778.0799999999999, "end": 783.1999999999999, "text": " on disk is not bit-to-bit identical, of course. Only the actual RPM payload. But you know that", "tokens": [322, 12355, 307, 406, 857, 12, 1353, 12, 5260, 14800, 11, 295, 1164, 13, 5686, 264, 3539, 37389, 30918, 13, 583, 291, 458, 300], "temperature": 0.0, "avg_logprob": -0.14327506484272323, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00018861342687159777}, {"id": 122, "seek": 78320, "start": 783.2, "end": 791.12, "text": " the payload that is linked is actually the same. So I don't think, I mean, maybe there's a use case", "tokens": [264, 30918, 300, 307, 9408, 307, 767, 264, 912, 13, 407, 286, 500, 380, 519, 11, 286, 914, 11, 1310, 456, 311, 257, 764, 1389], "temperature": 0.0, "avg_logprob": -0.14509273243841725, "compression_ratio": 1.6309012875536482, "no_speech_prob": 8.260928734671324e-05}, {"id": 123, "seek": 78320, "start": 791.12, "end": 796.32, "text": " why the timestamps need to be exact. But in my view, it's not important because the, like,", "tokens": [983, 264, 49108, 23150, 643, 281, 312, 1900, 13, 583, 294, 452, 1910, 11, 309, 311, 406, 1021, 570, 264, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.14509273243841725, "compression_ratio": 1.6309012875536482, "no_speech_prob": 8.260928734671324e-05}, {"id": 124, "seek": 78320, "start": 796.32, "end": 802.96, "text": " user bin bash is user bin bash, no matter what the timestamp is. Well, the use case is just for", "tokens": [4195, 5171, 46183, 307, 4195, 5171, 46183, 11, 572, 1871, 437, 264, 49108, 1215, 307, 13, 1042, 11, 264, 764, 1389, 307, 445, 337], "temperature": 0.0, "avg_logprob": -0.14509273243841725, "compression_ratio": 1.6309012875536482, "no_speech_prob": 8.260928734671324e-05}, {"id": 125, "seek": 78320, "start": 802.96, "end": 808.32, "text": " image-based systems. The end-to-end hash tells you that you've done the right thing. And it's", "tokens": [3256, 12, 6032, 3652, 13, 440, 917, 12, 1353, 12, 521, 22019, 5112, 291, 300, 291, 600, 1096, 264, 558, 551, 13, 400, 309, 311], "temperature": 0.0, "avg_logprob": -0.14509273243841725, "compression_ratio": 1.6309012875536482, "no_speech_prob": 8.260928734671324e-05}, {"id": 126, "seek": 80832, "start": 808.32, "end": 813.44, "text": " simple to compute. With your system, you basically have to do a tree hash down all the packages", "tokens": [2199, 281, 14722, 13, 2022, 428, 1185, 11, 291, 1936, 362, 281, 360, 257, 4230, 22019, 760, 439, 264, 17401], "temperature": 0.0, "avg_logprob": -0.12947969588022384, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.00010289226338500157}, {"id": 127, "seek": 80832, "start": 813.44, "end": 818.4000000000001, "text": " to prove that this is what you're supposed to have installed. It's, semantically, they are", "tokens": [281, 7081, 300, 341, 307, 437, 291, 434, 3442, 281, 362, 8899, 13, 467, 311, 11, 4361, 49505, 11, 436, 366], "temperature": 0.0, "avg_logprob": -0.12947969588022384, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.00010289226338500157}, {"id": 128, "seek": 80832, "start": 818.4000000000001, "end": 822.72, "text": " equivalent. It's just the latter is more difficult to do than the former, which is why people like", "tokens": [10344, 13, 467, 311, 445, 264, 18481, 307, 544, 2252, 281, 360, 813, 264, 5819, 11, 597, 307, 983, 561, 411], "temperature": 0.0, "avg_logprob": -0.12947969588022384, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.00010289226338500157}, {"id": 129, "seek": 80832, "start": 822.72, "end": 830.6, "text": " image-based. I mean, you only need to hash the directory with all the RPMs in them, right? So", "tokens": [3256, 12, 6032, 13, 286, 914, 11, 291, 787, 643, 281, 22019, 264, 21120, 365, 439, 264, 14105, 26386, 294, 552, 11, 558, 30, 407], "temperature": 0.0, "avg_logprob": -0.12947969588022384, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.00010289226338500157}, {"id": 130, "seek": 80832, "start": 830.6, "end": 836.1600000000001, "text": " if the RPMs, you have to check some of all the RPMs, and then you can verify the RPMs. Yeah,", "tokens": [498, 264, 14105, 26386, 11, 291, 362, 281, 1520, 512, 295, 439, 264, 14105, 26386, 11, 293, 550, 291, 393, 16888, 264, 14105, 26386, 13, 865, 11], "temperature": 0.0, "avg_logprob": -0.12947969588022384, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.00010289226338500157}, {"id": 131, "seek": 83616, "start": 836.16, "end": 839.8399999999999, "text": " I'm not disputing. Exactly. You're just saying it's more complicated. Yeah, it's, of course,", "tokens": [286, 478, 406, 37669, 278, 13, 7587, 13, 509, 434, 445, 1566, 309, 311, 544, 6179, 13, 865, 11, 309, 311, 11, 295, 1164, 11], "temperature": 0.0, "avg_logprob": -0.17672320774623326, "compression_ratio": 1.6348122866894197, "no_speech_prob": 0.00036434311186894774}, {"id": 132, "seek": 83616, "start": 839.8399999999999, "end": 844.0, "text": " there's always a trade-off. Of course, yeah, yeah. And depends on how you construct this user view.", "tokens": [456, 311, 1009, 257, 4923, 12, 4506, 13, 2720, 1164, 11, 1338, 11, 1338, 13, 400, 5946, 322, 577, 291, 7690, 341, 4195, 1910, 13], "temperature": 0.0, "avg_logprob": -0.17672320774623326, "compression_ratio": 1.6348122866894197, "no_speech_prob": 0.00036434311186894774}, {"id": 133, "seek": 83616, "start": 844.0, "end": 847.8399999999999, "text": " I mean, if it's really a butterfly, it's a real file system tree, then you have to walk it. But if", "tokens": [286, 914, 11, 498, 309, 311, 534, 257, 22140, 11, 309, 311, 257, 957, 3991, 1185, 4230, 11, 550, 291, 362, 281, 1792, 309, 13, 583, 498], "temperature": 0.0, "avg_logprob": -0.17672320774623326, "compression_ratio": 1.6348122866894197, "no_speech_prob": 0.00036434311186894774}, {"id": 134, "seek": 83616, "start": 847.8399999999999, "end": 852.64, "text": " it's only a view, like with a view stingy, then it doesn't actually exist on disk. It's just,", "tokens": [309, 311, 787, 257, 1910, 11, 411, 365, 257, 1910, 27175, 88, 11, 550, 309, 1177, 380, 767, 2514, 322, 12355, 13, 467, 311, 445, 11], "temperature": 0.0, "avg_logprob": -0.17672320774623326, "compression_ratio": 1.6348122866894197, "no_speech_prob": 0.00036434311186894774}, {"id": 135, "seek": 83616, "start": 853.28, "end": 857.6, "text": " you know, looking at the RPMs. So it cannot be modified. You need to walk, don't need to walk", "tokens": [291, 458, 11, 1237, 412, 264, 14105, 26386, 13, 407, 309, 2644, 312, 15873, 13, 509, 643, 281, 1792, 11, 500, 380, 643, 281, 1792], "temperature": 0.0, "avg_logprob": -0.17672320774623326, "compression_ratio": 1.6348122866894197, "no_speech_prob": 0.00036434311186894774}, {"id": 136, "seek": 85760, "start": 857.6, "end": 868.24, "text": " the tree. You just hash the RPMs. Okay. Yeah. So how would you integrate that into what we have", "tokens": [264, 4230, 13, 509, 445, 22019, 264, 14105, 26386, 13, 1033, 13, 865, 13, 407, 577, 576, 291, 13365, 300, 666, 437, 321, 362], "temperature": 0.0, "avg_logprob": -0.15423448586169583, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001528143766336143}, {"id": 137, "seek": 85760, "start": 868.24, "end": 875.12, "text": " heard in the previous talks? So during boot, I specify something similar to my dm-varity root", "tokens": [2198, 294, 264, 3894, 6686, 30, 407, 1830, 11450, 11, 286, 16500, 746, 2531, 281, 452, 274, 76, 12, 8517, 507, 5593], "temperature": 0.0, "avg_logprob": -0.15423448586169583, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001528143766336143}, {"id": 138, "seek": 85760, "start": 875.12, "end": 880.8000000000001, "text": " hash, so that I know that I'm actually booting from an unmodified root of s. That's a good question.", "tokens": [22019, 11, 370, 300, 286, 458, 300, 286, 478, 767, 11450, 278, 490, 364, 517, 8014, 2587, 5593, 295, 262, 13, 663, 311, 257, 665, 1168, 13], "temperature": 0.0, "avg_logprob": -0.15423448586169583, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.0001528143766336143}, {"id": 139, "seek": 88080, "start": 880.8, "end": 888.0799999999999, "text": " That problem is not solved yet. Yeah. So far, the challenges are already at the point, how do you", "tokens": [663, 1154, 307, 406, 13041, 1939, 13, 865, 13, 407, 1400, 11, 264, 4759, 366, 1217, 412, 264, 935, 11, 577, 360, 291], "temperature": 0.0, "avg_logprob": -0.13975193921257467, "compression_ratio": 1.646551724137931, "no_speech_prob": 8.732153219170868e-05}, {"id": 140, "seek": 88080, "start": 888.0799999999999, "end": 895.4399999999999, "text": " actually specify which version of the user tree do you want to boot. But now all the models assume", "tokens": [767, 16500, 597, 3037, 295, 264, 4195, 4230, 360, 291, 528, 281, 11450, 13, 583, 586, 439, 264, 5245, 6552], "temperature": 0.0, "avg_logprob": -0.13975193921257467, "compression_ratio": 1.646551724137931, "no_speech_prob": 8.732153219170868e-05}, {"id": 141, "seek": 88080, "start": 895.4399999999999, "end": 899.5999999999999, "text": " that if you ship a new image, like a new user version, it also comes with a new kernel and a", "tokens": [300, 498, 291, 5374, 257, 777, 3256, 11, 411, 257, 777, 4195, 3037, 11, 309, 611, 1487, 365, 257, 777, 28256, 293, 257], "temperature": 0.0, "avg_logprob": -0.13975193921257467, "compression_ratio": 1.646551724137931, "no_speech_prob": 8.732153219170868e-05}, {"id": 142, "seek": 88080, "start": 899.5999999999999, "end": 907.12, "text": " new init.d. So this init.d knows what disk to boot. But in the Butterfest use case, there is", "tokens": [777, 3157, 13, 67, 13, 407, 341, 3157, 13, 67, 3255, 437, 12355, 281, 11450, 13, 583, 294, 264, 22646, 32348, 764, 1389, 11, 456, 307], "temperature": 0.0, "avg_logprob": -0.13975193921257467, "compression_ratio": 1.646551724137931, "no_speech_prob": 8.732153219170868e-05}, {"id": 143, "seek": 90712, "start": 907.12, "end": 913.84, "text": " a kernel that can have a number of init.d.s and those init.d.s match with a number of snapshots", "tokens": [257, 28256, 300, 393, 362, 257, 1230, 295, 3157, 13, 67, 13, 82, 293, 729, 3157, 13, 67, 13, 82, 2995, 365, 257, 1230, 295, 19206, 27495], "temperature": 0.0, "avg_logprob": -0.11688037922507838, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.001277206582017243}, {"id": 144, "seek": 90712, "start": 913.84, "end": 919.76, "text": " that they can actually boot. So then I'm already struggling with this part. So the verification", "tokens": [300, 436, 393, 767, 11450, 13, 407, 550, 286, 478, 1217, 9314, 365, 341, 644, 13, 407, 264, 30206], "temperature": 0.0, "avg_logprob": -0.11688037922507838, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.001277206582017243}, {"id": 145, "seek": 90712, "start": 919.76, "end": 934.48, "text": " comes later. So dm-varity gives you authenticity of the blocks at runtime. So the device cannot", "tokens": [1487, 1780, 13, 407, 274, 76, 12, 8517, 507, 2709, 291, 34215, 295, 264, 8474, 412, 34474, 13, 407, 264, 4302, 2644], "temperature": 0.0, "avg_logprob": -0.11688037922507838, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.001277206582017243}, {"id": 146, "seek": 93448, "start": 934.48, "end": 941.28, "text": " switch them underneath. And I guess that if you verify the kernel headers, the RPM headers,", "tokens": [3679, 552, 7223, 13, 400, 286, 2041, 300, 498, 291, 16888, 264, 28256, 45101, 11, 264, 37389, 45101, 11], "temperature": 0.0, "avg_logprob": -0.17223517449347528, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.0006383306463249028}, {"id": 147, "seek": 93448, "start": 943.6, "end": 948.8000000000001, "text": " I don't know, when loading the image, this wouldn't give you the same runtime properties.", "tokens": [286, 500, 380, 458, 11, 562, 15114, 264, 3256, 11, 341, 2759, 380, 976, 291, 264, 912, 34474, 7221, 13], "temperature": 0.0, "avg_logprob": -0.17223517449347528, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.0006383306463249028}, {"id": 148, "seek": 93448, "start": 950.32, "end": 955.6800000000001, "text": " I haven't played with those technologies yet, to be honest. So another interesting thing would be", "tokens": [286, 2378, 380, 3737, 365, 729, 7943, 1939, 11, 281, 312, 3245, 13, 407, 1071, 1880, 551, 576, 312], "temperature": 0.0, "avg_logprob": -0.17223517449347528, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.0006383306463249028}, {"id": 149, "seek": 93448, "start": 955.6800000000001, "end": 963.76, "text": " this FA policy daemon. Only with a bit about it, it uses the audit subsystem to actually block access", "tokens": [341, 19894, 3897, 1120, 36228, 13, 5686, 365, 257, 857, 466, 309, 11, 309, 4960, 264, 17748, 2090, 9321, 281, 767, 3461, 2105], "temperature": 0.0, "avg_logprob": -0.17223517449347528, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.0006383306463249028}, {"id": 150, "seek": 96376, "start": 963.76, "end": 969.36, "text": " to modified files by comparing them with the information in the RPM header. So", "tokens": [281, 15873, 7098, 538, 15763, 552, 365, 264, 1589, 294, 264, 37389, 23117, 13, 407], "temperature": 0.0, "avg_logprob": -0.12087466639857139, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.0001816183648770675}, {"id": 151, "seek": 96376, "start": 970.0, "end": 976.16, "text": " it would be another area to just explore how to integrate some verification technologies into", "tokens": [309, 576, 312, 1071, 1859, 281, 445, 6839, 577, 281, 13365, 512, 30206, 7943, 666], "temperature": 0.0, "avg_logprob": -0.12087466639857139, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.0001816183648770675}, {"id": 152, "seek": 97616, "start": 976.16, "end": 995.68, "text": " this model. Any more questions? If not, then I guess we'll wrap up this talk. Thank you very much.", "tokens": [50364, 341, 2316, 13, 2639, 544, 1651, 30, 759, 406, 11, 550, 286, 2041, 321, 603, 7019, 493, 341, 751, 13, 1044, 291, 588, 709, 13, 51340], "temperature": 0.0, "avg_logprob": -0.18469132695879256, "compression_ratio": 1.0425531914893618, "no_speech_prob": 0.0003784173750318587}], "language": "en"}