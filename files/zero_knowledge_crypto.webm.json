{"text": " I'm going to talk about the new breakthroughs that are happening in cryptography, the opening doors to unexplored spaces. I will try to speak louder. The free software movement and Linux at one time had power, it had vitality but then somewhere along the way we started to play catch up, we started to try and follow the competition. This on the desktop never happened. The once great browser Firefox, its market share dwindled to zero. Even this conference which has the best minds in free software community is funded by surveillance capitalism, Google, Microsoft. In this talk I want to talk about how we can escape the death trap and create the new paradigm of computing. This talk is dedicated to Peter Hintzians. Peter Hintzians was from Brussels and he was a programmer who, he wasn't born in Brussels but he lived and he died in Brussels and he really embodied the ideas of what elegant abstraction means. Abstraction is something which Don Pauli creates complexity, Don Well empowers the software developer but he was not just a good developer who made, for example, zero MQ which is really interesting conceptualization about how we could build distributed systems but he was also a theorist on creating free software, the social layer and creating free software communities. He taught us that free software is more than just having the code being accessible but it's an entire philosophy and when we create the good, elegant abstractions, it enables us to create software that's composable while not contributing complexity. This is like the basis of how the Linux architecture is created, there's components and rather than like in a Windows system where there's a system 32 filled with hundreds of DLLs, there is a component which people can modify and in our projects we try to embody his ideals, we try to carry his philosophy. So everything that we use today, the concept of the sockets, the processes, the file system was invented in the 70s with Unix. Since then, nothing has fundamentally changed about computing and when they created Unix, their vision was something that would enable deep collaboration between communities and the infrastructure that they created, the software, ended up becoming the basis of the web but they, at the time, they couldn't take their vision to its full conclusion. They didn't have the algorithms that we have now like around peer to peer and consensus and cryptography and so on. There wasn't huge network bandwidths, the resources in the hardware weren't as big. And since its invention, not much has changed. What is a zero knowledge proof? If I have a simple function and I call the function on a set of parameters or arguments and I produce a result, the return value of the function, if I want to show to you that this value that I've computed from the function is computed from some parameters that went into the function, then normally the way that you do that, like logically, is I would have to give you those input parameters and you have the function and you would compute the function yourself and get that result at the end and then be able to verify that the result is what it claims it is. For example, in a Bitcoin blockchain, you're doing transactions and everybody verifies the transactions that the computation is to advance the state machine to the next state is correctly done. Then there are two very interesting properties of ZK proof. So first, the ZK proof is succinct. What that means is the actual proof object that proves the computation that has been run on the values is very small. It's smaller than the input parameters that go into the function. You would expect that it would be some big proof, but actually, we save computation. When you want to verify that, you save computation compared to if you would compute the evaluation of the input values, what we call the witnesses yourself. The proof size is small and the time to verify the proof is very small compared to actually computing it and it can be anonymous. So there are some values that you put into a function to get a result. You don't know what S, X, and Y are. You know Z, you know Foo, but you don't know S, X, and Y and that enable us, they give us a very powerful technique in our arsenal, in our toolkit of anonymous engineering. So this is the general schema of ZK proofing. So you have a proof function. So that means that's how we generate a ZK proof. So you have some private values, the input values to your function Foo, and you have the output of the function, which are your public values, and you create a proof. And then I give to you the proof, and you want to verify the proof, and you have the public values from the evaluation of that function, and you get true or false back. So how does it work? This is obviously greatly simplified, but just observe this property. If I have polynomials, and I add two polynomials, and then I evaluate the polynomial, that is the same as evaluating the polynomials and adding them together. This is due to what is called mathematically the homomorphic property of the function that maps from the ring of the polynomials to the ring of the closure. And it works as well for multiplication. So just remember that homomorphic property, and then what we do is that function Foo, we do this step called erythmetization. So any code that you write, we turn that code into a set of polynomials. So how do we do that? Well, here imagine A and B are Boolean values, either 1 or 0. So how can we turn those into arithmetic expressions? So if you notice with those formulas in the top left, and these tables on the right, if you do the calculation, you will get the same thing as long as A and B are 0 or 1. When you perform those formulas, they are the equivalent to those Boolean expressions. And if you want to enforce, just as a side note, that a value s is in a certain range of values, for example, 0 or 1, well, it's just the same as saying s minus 0 multiplied by s minus 1 is equal to 0, which is the roots of the polynomial where it would evaluate to 0. That will be a degree to polynomial, and there will be no other roots of 0 there. And so we have that function foo, which, if you remember, where was it? It was here, this one. If s return x times y, else return x plus y. And how do we arithmeticize that? Well, you can see below that we have z is equal to sxy plus open bracket 1 minus s x plus y. Both of those are equivalent. So we've taken piece of code, we've arithmeticized it as a mathematical expression. So then we can use this Schwartz-Zippel lemma, which is rather than having to give you all of these huge degree polynomials, depending on the number of equations that you're checking. There is something that we can do where we can just evaluate a polynomial at one point. That relies on the Schwartz-Zippel lemma. So let's pretend that we have two polynomials that we're trying to check a multiplication of. If you remember in the first slide, we had fg evaluated alpha is equal to f of alpha multiplied by g of alpha. So these polynomials, if you notice, they're constructed so that they intersect through a certain number of points here. So the red one goes through 1, x equals 0, the red one goes through 1, x equals 1, the red one goes through 2, x equals 2, goes through minus 1, x equals 3, goes through 1, etc., 2, 3, 2. So that's a Lagrange interpolation of those points. And the yellow one, likewise, does the same, but for 0, 2, 2, 0, 2, 1, 3. So you can imagine those are the lines of our kind of proof or program that we're trying to enforce. So the first one might be that we want to check that 0 times 1 is equal to 0, and 2 times 2 is equal to 4, and 2 times minus 1 is equal to minus 2. So how do we construct that proof? Well, if we multiply the points together, like so, we get a new set of points. And then, because these polynomials are degree 6, to create the polynomial that comes from multiplying these two polynomials, we need 12 points, which are multiplied from both of these, but I've only done six here. So then we have these points, and we interpolate, we draw a polynomial interpolating those. So this is the new polynomial we get, the pink one. And if you remember this relation from earlier, we now have this polynomial FG, and therefore, if there is a protocol where a random point or a random X value is selected, then it's sufficient to prove that there is this evaluation at this combined polynomial FG of alpha is equal to evaluations of the other two polynomials multiplied together. And therefore, you can be sure that that pink one is the multiplication of all the individual points, because the random point and the probability of you being able to preempt that is basically nearly zero. And so we can actually see here, if we look at any two points, the top two is the red and the yellow one, and the white one is actually the multiplication of the two points, and the purple one is the purple one. So we've actually created the polynomial which have this property at all points along it. And because it has this property, it's sufficient just to pick a random point and check that that's true. And there is another puzzle piece which is the polynomial commitment proof. So essentially, you can create a commitment of a polynomial which is like hashing a polynomial, and you don't know what the polynomial is, so this is where the zero knowledge property come from, and then there's an object representing a polynomial in your system, and any time you can create a proof using the polynomial which has this statement on the right, which says that the f is a commitment or hash of this polynomial f, and z is equal to an evaluation of f at s. And so that's what that open does is it creates this proof on the right, and then I can give you this proof, and I can give you the commitment to the polynomial, which is just a hash of the polynomial essentially, and you can verify that whatever polynomial is inside of f is equal, is the z is equal to f, or evaluator s, and the same principle is true for addition. So we have multiplication and we have addition, which means we can construct any NP-complete program inside of zk proof. Also, another technique is multi-party computation. So in NPC, so with a zero knowledge proof, I can compute a value, I can prove a statement about some values that I hold, but maybe sometimes we need to compute, or other people need to be able to know certain facts about other actors in the system, and maybe they don't have the incentive to create a zk proof or to prove statements about values that they hold. So that's where we use another technique that's called MPC, and I will show you how we can do addition of values with MPC. So Alice has some number, some secret number, 110, and Alice and Bob has some other number, 1177, and Alice now splits her number randomly, such that those numbers add up to 110. So if you add them up, it would be 110, and then sends them to each other's servers. So none of the servers know what Alice's number is, but they know parts of it. They can reconstruct it if they collude, but we're assuming they don't collude, and then Bob does the same thing, he sends his numbers, and now when we want to compute an addition of the values, each of the server will add the values together, and now they get these new values. And if you look, those values added together when they reconstruct it is the answer of adding the two private values together, and multiplication is similar, but slightly more involved, but also it's possible. So MPC is another powerful technique. Also we have homomorphic encryption, so very simple partial homomorphic encryption is simply this function, which is elliptic curve multiplication. So if I have two values, and I add them together, and I multiply them by the generator of an elliptic curve, or just some point on the elliptic curve, that is the same as taking the value multiplying it by g, and then adding it to the other value multiplied by g. So homomorphic encryption, the original idea in the 80s was there's a cloud, and anybody can put values into this cloud, but they're encrypted, and then other people can compute answers encrypted for a certain public key. So you can use this to make computations on secret values. From an abstract level, there is this new emerging field of anonymous engineering, so we can compare it to other forms of engineering, so for example when we have software, we write these instructions that run on a CPU and execute, and when we do cryptography we try to use deep mathematical laws to try and create primitives or schemas, but the anonymous engineering is actually using those different techniques like the ones I just showed, or other ones like VDF or hash function, public key, asymmetric crypto, et cetera, to try and come up with schemas that enable certain forms of applications with invariance to hold. So let's give the first practical example, which is I have a set, I have a set of values, and this set is just represented by a single hash, and I want to prove that my value is in this set of objects, so to do that we have to construct something called a Merkel tree, so let's say we have eight values, and what we do is we take two values at a time, so we take the first two values and we hash them together, so we get hash of them, and let's represent that by A, and now let's hash the next two values, we get another node B, and then we hash them together and we get another node, so we get this kind of tree which the root R represents the entire set of values, and this is a simplified diagram, normally these might be 32 layers, so two to the power of 32 values will be in the tree, so for example we had V1 and V2, and we hash them together and we get A, and likewise we have V1, V3 and V4, we hash them together and we get B, and then we hash those together and we get AB, and then we do the same, we do the same on the right hand side and eventually we get to R, now if I have some value, any value, let's say, I don't know, V5, and let's say we also have R, how can I prove to you that I have, that V5 is in R, well what I need is a pathway to be able to get to R, so what does that pathway mean, so for example if I give you V6, then we can hash those together and we get C, and then if I give you D and we hash those together, then we get CD, and then if I give you AB and we hash that with CD, then we get R, and then I've proved to you that V5 is in R, using, instead of needing to give you all of the items, I just give you a logarithmic number of items, I give you a smaller number of items, so it's faster, it's used as a technique, but it can also be used to create an anonymous inclusion proof, so we can anonymously prove that there is some value in R, and we can even encrypt that value, or we can prove other statements on that value, so I'll show you some code, how that looks like, maybe I can put this mic somehow, like this, yeah that would be great, I need to speed up, but here is the proof, you see the Merkel route at the top, we're saying, and there's a pathway, we're proving some values in the route, and then we're re-encrypting the value, and we're exporting it, and, yeah hold it, yeah, and to compile it, and then I compile the proof, like this, so it's compiled, and then I have, sorry it's here, I have the code which actually computes the Merkel tree with the value, but then also you see, includes the ZK proof code, and then creates the witnesses, and where is it, and then loads the circuit, and then creates, constructs the proof here, so now we get a proof, and then for the verifier we do here, we verify the proof, so we can just run that, like so, ah, okay, no internet, but anyway, let's not worry about that, okay, so then we can use that to create anonymous voting, so how do we do that, well, we say on the, we create, when we create, constructs the people who are going to vote, we create something like a coin, and there's like a, you generate a random serial number, that's private, and you just create this commitment to it, and then when you want to use up your vote, then you burn the coin, and you make that public, that secret value S, which means you can't ever generate the same thing again, because that value is deterministic, and then you just, you prove that there is a C, that's the hash of S, and that C is in the tree, using the previous inclusion proof, and so how do we change that to do anonymous payments, well, it's very similar, except now this coin, not just being a hash of S, is also a hash of value for the coin, so it's two and four, which are owned by Alice, and then when we want to spend that coin that Alice has, then we reveal those serial numbers, and we can compute the partial homomorphic encryption of the two and the four, and we create this transaction with two outputs, and we create the two new coins, like we showed before in the previous slide, but we also want to prove that the value that goes into a transaction is the same as the value that goes out, and we do that using homomorphic encryption, like we showed earlier, and you see here, we've got the two plus the four is equal to the three plus the three, so there we go, then we can do atomic swaps with different types of assets, so Alice constructs her input and one output sending to Bob, Bob takes the transaction, adds his input and one output sending to Alice, Bob also signs the transaction, Bob signs and sends the finalised transaction, we can also do something where you have a network with anonymous spam protection, so you have a sharing scheme, and normally, so basically with this, you have this evaluation, I'm going to go fast now, and when you want to send a message you compute the message M, you compute this X and Y, and if in one epoch, you again create another message, so you're spamming the network, then you get these values, which using the equation on the first line, you can compute what A0 is, and A0 is actually your secret key, and so then that means that whenever you try to send another message to the network in any other epoch, now you've lost your account, you can never send, but it also means that messages are unlinkable, so you have unlinkability, we can do anonymous auctions using MPC, so Alice has bids $4, Bob bids $6, they do a computation, they compute who's the winner, we can do anonymous WikiLeaks, so I have this thing.jpeg, and then there's a protocol where, you know, I've said that this is, I've made some claim about what this file is, and it selects a random chunk from the file, and then we verify, yep, that file is what it claims it is, and then there's an auction on the remaining chunks, and the winners of those auctions decrypt the remaining parts, and then the file is decrypted, so if you go to doc.fi website, and you go to the docs section, we have, where is it? So go to the website, and there's also a blog called Insights, we have our own peer-to-peer anonymous chat, there's no concept of identities, so if you go to the doc, there's a section called IRCD, and we have a weekly meeting every Monday, but also there's a crypto section, ZCAS section, testnet guide, you know, we're looking for good devs as well, so, conclusion, so, we missed the mobile and the desktop, will we also miss the crypto renaissance, this is like our best chance to capture value for development, like, this is the biggest problem with creative people, is they create value, they don't necessarily have a way to capture some of that value back, we now have techniques to do that, we were promised this future of computing in the 90s, you know, the interface is, whatever happened to that, never got it, and now, our phones, they're filled with all these dog shit, electron apps, like, that's a failed paradigm, we're literally trying to copy Silicon Valley, I'm optimistic that now people are actually going, actually, no, Linux is different, we're distinct, we have our own energy, but we need to rediscover that, we need to create something that's new, because their model is about capturing users under surveillance capitalism, to extract value from them, our model is we create infrastructure, we create economic value for our networks to become strong, and as a movement grow powerful, it's a different way of thinking, open source was a mistake, you know, like, we discarded the beating heart of what gave us energy, so we need to conceptualize the computing paradigm, so, you know, let's build something new, like, actually inventive, so if I have a couple of minutes, I'm actually just going to show our website, so I can show where to find docs, okay, I guess there's no, no, I'm not there, come on to it, go into it. All right, let's give a tour of how docsos, so here, there's book, I talked about peer-to-peer distributed IRCD, you see there, instructions. There's also crypto section. You see here. And also implementations. There's a ZK explainer and also implementations of most of the major ZK algos. And also, probably more interesting for you guys, the ZCAS stuff, like how anonymous voting works and also anonymous payments. All right, I just showed the distributed chat. You just run a daemon like that. Open my WeChat, bam, here we are. There's encrypted channels as well. You just set in your config file an encrypted channel and then we have a chat. See I can chat with other people. So, yep, that's it. That's my talk. Thanks very much. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.24, "text": " I'm going to talk about the new breakthroughs that are happening in cryptography, the opening", "tokens": [286, 478, 516, 281, 751, 466, 264, 777, 22397, 82, 300, 366, 2737, 294, 9844, 5820, 11, 264, 5193], "temperature": 0.0, "avg_logprob": -0.27694704221642535, "compression_ratio": 1.1341463414634145, "no_speech_prob": 0.2355717271566391}, {"id": 1, "seek": 1424, "start": 14.24, "end": 31.880000000000003, "text": " doors to unexplored spaces.", "tokens": [8077, 281, 11572, 564, 2769, 7673, 13], "temperature": 0.0, "avg_logprob": -0.3743917942047119, "compression_ratio": 0.9016393442622951, "no_speech_prob": 0.002656103577464819}, {"id": 2, "seek": 1424, "start": 31.880000000000003, "end": 38.08, "text": " I will try to speak louder.", "tokens": [286, 486, 853, 281, 1710, 22717, 13], "temperature": 0.0, "avg_logprob": -0.3743917942047119, "compression_ratio": 0.9016393442622951, "no_speech_prob": 0.002656103577464819}, {"id": 3, "seek": 3808, "start": 38.08, "end": 50.56, "text": " The free software movement and Linux at one time had power, it had vitality but then somewhere", "tokens": [440, 1737, 4722, 3963, 293, 18734, 412, 472, 565, 632, 1347, 11, 309, 632, 11707, 507, 457, 550, 4079], "temperature": 0.0, "avg_logprob": -0.22850743207064542, "compression_ratio": 1.4076923076923078, "no_speech_prob": 0.0003422228910494596}, {"id": 4, "seek": 3808, "start": 50.56, "end": 63.16, "text": " along the way we started to play catch up, we started to try and follow the competition.", "tokens": [2051, 264, 636, 321, 1409, 281, 862, 3745, 493, 11, 321, 1409, 281, 853, 293, 1524, 264, 6211, 13], "temperature": 0.0, "avg_logprob": -0.22850743207064542, "compression_ratio": 1.4076923076923078, "no_speech_prob": 0.0003422228910494596}, {"id": 5, "seek": 6316, "start": 63.16, "end": 70.24, "text": " This on the desktop never happened.", "tokens": [639, 322, 264, 14502, 1128, 2011, 13], "temperature": 0.0, "avg_logprob": -0.18102637581203296, "compression_ratio": 1.348993288590604, "no_speech_prob": 0.0003601360658649355}, {"id": 6, "seek": 6316, "start": 70.24, "end": 80.56, "text": " The once great browser Firefox, its market share dwindled to zero.", "tokens": [440, 1564, 869, 11185, 46613, 11, 1080, 2142, 2073, 274, 12199, 1493, 281, 4018, 13], "temperature": 0.0, "avg_logprob": -0.18102637581203296, "compression_ratio": 1.348993288590604, "no_speech_prob": 0.0003601360658649355}, {"id": 7, "seek": 6316, "start": 80.56, "end": 90.75999999999999, "text": " Even this conference which has the best minds in free software community is funded by surveillance", "tokens": [2754, 341, 7586, 597, 575, 264, 1151, 9634, 294, 1737, 4722, 1768, 307, 14385, 538, 18475], "temperature": 0.0, "avg_logprob": -0.18102637581203296, "compression_ratio": 1.348993288590604, "no_speech_prob": 0.0003601360658649355}, {"id": 8, "seek": 9076, "start": 90.76, "end": 95.84, "text": " capitalism, Google, Microsoft.", "tokens": [19704, 11, 3329, 11, 8116, 13], "temperature": 0.0, "avg_logprob": -0.1819171905517578, "compression_ratio": 1.2254901960784315, "no_speech_prob": 0.00109223579056561}, {"id": 9, "seek": 9076, "start": 95.84, "end": 106.56, "text": " In this talk I want to talk about how we can escape the death trap and create the new paradigm", "tokens": [682, 341, 751, 286, 528, 281, 751, 466, 577, 321, 393, 7615, 264, 2966, 11487, 293, 1884, 264, 777, 24709], "temperature": 0.0, "avg_logprob": -0.1819171905517578, "compression_ratio": 1.2254901960784315, "no_speech_prob": 0.00109223579056561}, {"id": 10, "seek": 10656, "start": 106.56, "end": 124.0, "text": " of computing.", "tokens": [295, 15866, 13], "temperature": 0.0, "avg_logprob": -0.8028452055794852, "compression_ratio": 0.6190476190476191, "no_speech_prob": 0.0017908480949699879}, {"id": 11, "seek": 12400, "start": 124.0, "end": 151.24, "text": " This", "tokens": [639], "temperature": 0.0, "avg_logprob": -0.49607090950012206, "compression_ratio": 0.3333333333333333, "no_speech_prob": 0.006993983406573534}, {"id": 12, "seek": 15124, "start": 151.24, "end": 161.96, "text": " talk is dedicated to Peter Hintzians.", "tokens": [751, 307, 8374, 281, 6508, 389, 686, 89, 2567, 13], "temperature": 0.0, "avg_logprob": -0.3282867637840477, "compression_ratio": 1.2828282828282829, "no_speech_prob": 0.00314719183370471}, {"id": 13, "seek": 15124, "start": 161.96, "end": 172.8, "text": " Peter Hintzians was from Brussels and he was a programmer who, he wasn't born in Brussels", "tokens": [6508, 389, 686, 89, 2567, 390, 490, 38717, 293, 415, 390, 257, 32116, 567, 11, 415, 2067, 380, 4232, 294, 38717], "temperature": 0.0, "avg_logprob": -0.3282867637840477, "compression_ratio": 1.2828282828282829, "no_speech_prob": 0.00314719183370471}, {"id": 14, "seek": 17280, "start": 172.8, "end": 181.76000000000002, "text": " but he lived and he died in Brussels and he really embodied the ideas of what elegant", "tokens": [457, 415, 5152, 293, 415, 4539, 294, 38717, 293, 415, 534, 42046, 264, 3487, 295, 437, 21117], "temperature": 0.0, "avg_logprob": -0.315251096089681, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.0011565950699150562}, {"id": 15, "seek": 17280, "start": 181.76000000000002, "end": 184.04000000000002, "text": " abstraction means.", "tokens": [37765, 1355, 13], "temperature": 0.0, "avg_logprob": -0.315251096089681, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.0011565950699150562}, {"id": 16, "seek": 17280, "start": 184.04000000000002, "end": 194.04000000000002, "text": " Abstraction is something which Don Pauli creates complexity, Don Well empowers the software", "tokens": [46853, 26766, 307, 746, 597, 1468, 4552, 72, 7829, 14024, 11, 1468, 1042, 4012, 23054, 264, 4722], "temperature": 0.0, "avg_logprob": -0.315251096089681, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.0011565950699150562}, {"id": 17, "seek": 19404, "start": 194.04, "end": 204.07999999999998, "text": " developer but he was not just a good developer who made, for example, zero MQ which is really", "tokens": [10754, 457, 415, 390, 406, 445, 257, 665, 10754, 567, 1027, 11, 337, 1365, 11, 4018, 376, 48, 597, 307, 534], "temperature": 0.0, "avg_logprob": -0.2939337453534526, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.0016248697647824883}, {"id": 18, "seek": 19404, "start": 204.07999999999998, "end": 209.32, "text": " interesting conceptualization about how we could build distributed systems but he was", "tokens": [1880, 24106, 2144, 466, 577, 321, 727, 1322, 12631, 3652, 457, 415, 390], "temperature": 0.0, "avg_logprob": -0.2939337453534526, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.0016248697647824883}, {"id": 19, "seek": 19404, "start": 209.32, "end": 216.07999999999998, "text": " also a theorist on creating free software, the social layer and creating free software", "tokens": [611, 257, 27423, 468, 322, 4084, 1737, 4722, 11, 264, 2093, 4583, 293, 4084, 1737, 4722], "temperature": 0.0, "avg_logprob": -0.2939337453534526, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.0016248697647824883}, {"id": 20, "seek": 19404, "start": 216.07999999999998, "end": 217.92, "text": " communities.", "tokens": [4456, 13], "temperature": 0.0, "avg_logprob": -0.2939337453534526, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.0016248697647824883}, {"id": 21, "seek": 21792, "start": 217.92, "end": 226.64, "text": " He taught us that free software is more than just having the code being accessible but", "tokens": [634, 5928, 505, 300, 1737, 4722, 307, 544, 813, 445, 1419, 264, 3089, 885, 9515, 457], "temperature": 0.0, "avg_logprob": -0.20422174280340022, "compression_ratio": 1.5, "no_speech_prob": 0.001557188923470676}, {"id": 22, "seek": 21792, "start": 226.64, "end": 235.88, "text": " it's an entire philosophy and when we create the good, elegant abstractions, it enables", "tokens": [309, 311, 364, 2302, 10675, 293, 562, 321, 1884, 264, 665, 11, 21117, 12649, 626, 11, 309, 17077], "temperature": 0.0, "avg_logprob": -0.20422174280340022, "compression_ratio": 1.5, "no_speech_prob": 0.001557188923470676}, {"id": 23, "seek": 21792, "start": 235.88, "end": 241.04, "text": " us to create software that's composable while not contributing complexity.", "tokens": [505, 281, 1884, 4722, 300, 311, 10199, 712, 1339, 406, 19270, 14024, 13], "temperature": 0.0, "avg_logprob": -0.20422174280340022, "compression_ratio": 1.5, "no_speech_prob": 0.001557188923470676}, {"id": 24, "seek": 24104, "start": 241.04, "end": 249.16, "text": " This is like the basis of how the Linux architecture is created, there's components and rather", "tokens": [639, 307, 411, 264, 5143, 295, 577, 264, 18734, 9482, 307, 2942, 11, 456, 311, 6677, 293, 2831], "temperature": 0.0, "avg_logprob": -0.20963942038046346, "compression_ratio": 1.5532994923857868, "no_speech_prob": 0.0007939559291116893}, {"id": 25, "seek": 24104, "start": 249.16, "end": 255.56, "text": " than like in a Windows system where there's a system 32 filled with hundreds of DLLs,", "tokens": [813, 411, 294, 257, 8591, 1185, 689, 456, 311, 257, 1185, 8858, 6412, 365, 6779, 295, 413, 24010, 82, 11], "temperature": 0.0, "avg_logprob": -0.20963942038046346, "compression_ratio": 1.5532994923857868, "no_speech_prob": 0.0007939559291116893}, {"id": 26, "seek": 24104, "start": 255.56, "end": 263.44, "text": " there is a component which people can modify and in our projects we try to embody his ideals,", "tokens": [456, 307, 257, 6542, 597, 561, 393, 16927, 293, 294, 527, 4455, 321, 853, 281, 42575, 702, 30956, 11], "temperature": 0.0, "avg_logprob": -0.20963942038046346, "compression_ratio": 1.5532994923857868, "no_speech_prob": 0.0007939559291116893}, {"id": 27, "seek": 24104, "start": 263.44, "end": 269.88, "text": " we try to carry his philosophy.", "tokens": [321, 853, 281, 3985, 702, 10675, 13], "temperature": 0.0, "avg_logprob": -0.20963942038046346, "compression_ratio": 1.5532994923857868, "no_speech_prob": 0.0007939559291116893}, {"id": 28, "seek": 26988, "start": 269.88, "end": 282.88, "text": " So everything that we use today, the concept of the sockets, the processes, the file system", "tokens": [407, 1203, 300, 321, 764, 965, 11, 264, 3410, 295, 264, 370, 11984, 11, 264, 7555, 11, 264, 3991, 1185], "temperature": 0.0, "avg_logprob": -0.1797719884801794, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.0017512416234239936}, {"id": 29, "seek": 26988, "start": 282.88, "end": 287.08, "text": " was invented in the 70s with Unix.", "tokens": [390, 14479, 294, 264, 5285, 82, 365, 1156, 970, 13], "temperature": 0.0, "avg_logprob": -0.1797719884801794, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.0017512416234239936}, {"id": 30, "seek": 26988, "start": 287.08, "end": 298.6, "text": " Since then, nothing has fundamentally changed about computing and when they created Unix,", "tokens": [4162, 550, 11, 1825, 575, 17879, 3105, 466, 15866, 293, 562, 436, 2942, 1156, 970, 11], "temperature": 0.0, "avg_logprob": -0.1797719884801794, "compression_ratio": 1.4210526315789473, "no_speech_prob": 0.0017512416234239936}, {"id": 31, "seek": 29860, "start": 298.6, "end": 306.68, "text": " their vision was something that would enable deep collaboration between communities and", "tokens": [641, 5201, 390, 746, 300, 576, 9528, 2452, 9363, 1296, 4456, 293], "temperature": 0.0, "avg_logprob": -0.16511896494272593, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.0004592857148963958}, {"id": 32, "seek": 29860, "start": 306.68, "end": 311.52000000000004, "text": " the infrastructure that they created, the software, ended up becoming the basis of the", "tokens": [264, 6896, 300, 436, 2942, 11, 264, 4722, 11, 4590, 493, 5617, 264, 5143, 295, 264], "temperature": 0.0, "avg_logprob": -0.16511896494272593, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.0004592857148963958}, {"id": 33, "seek": 29860, "start": 311.52000000000004, "end": 320.84000000000003, "text": " web but they, at the time, they couldn't take their vision to its full conclusion.", "tokens": [3670, 457, 436, 11, 412, 264, 565, 11, 436, 2809, 380, 747, 641, 5201, 281, 1080, 1577, 10063, 13], "temperature": 0.0, "avg_logprob": -0.16511896494272593, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.0004592857148963958}, {"id": 34, "seek": 29860, "start": 320.84000000000003, "end": 328.04, "text": " They didn't have the algorithms that we have now like around peer to peer and consensus", "tokens": [814, 994, 380, 362, 264, 14642, 300, 321, 362, 586, 411, 926, 15108, 281, 15108, 293, 19115], "temperature": 0.0, "avg_logprob": -0.16511896494272593, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.0004592857148963958}, {"id": 35, "seek": 32804, "start": 328.04, "end": 332.28000000000003, "text": " and cryptography and so on.", "tokens": [293, 9844, 5820, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.24314006682365172, "compression_ratio": 1.1935483870967742, "no_speech_prob": 0.0006324916612356901}, {"id": 36, "seek": 32804, "start": 332.28000000000003, "end": 341.04, "text": " There wasn't huge network bandwidths, the resources in the hardware weren't as big.", "tokens": [821, 2067, 380, 2603, 3209, 23647, 82, 11, 264, 3593, 294, 264, 8837, 4999, 380, 382, 955, 13], "temperature": 0.0, "avg_logprob": -0.24314006682365172, "compression_ratio": 1.1935483870967742, "no_speech_prob": 0.0006324916612356901}, {"id": 37, "seek": 34104, "start": 341.04, "end": 363.52000000000004, "text": " And since its invention, not much has changed.", "tokens": [400, 1670, 1080, 22265, 11, 406, 709, 575, 3105, 13], "temperature": 0.0, "avg_logprob": -0.28627352092577063, "compression_ratio": 1.0129870129870129, "no_speech_prob": 0.00033375044586136937}, {"id": 38, "seek": 34104, "start": 363.52000000000004, "end": 367.28000000000003, "text": " What is a zero knowledge proof?", "tokens": [708, 307, 257, 4018, 3601, 8177, 30], "temperature": 0.0, "avg_logprob": -0.28627352092577063, "compression_ratio": 1.0129870129870129, "no_speech_prob": 0.00033375044586136937}, {"id": 39, "seek": 36728, "start": 367.28, "end": 380.71999999999997, "text": " If I have a simple function and I call the function on a set of parameters or arguments", "tokens": [759, 286, 362, 257, 2199, 2445, 293, 286, 818, 264, 2445, 322, 257, 992, 295, 9834, 420, 12869], "temperature": 0.0, "avg_logprob": -0.08656992382473416, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.0014574225060641766}, {"id": 40, "seek": 36728, "start": 380.71999999999997, "end": 388.84, "text": " and I produce a result, the return value of the function, if I want to show to you that", "tokens": [293, 286, 5258, 257, 1874, 11, 264, 2736, 2158, 295, 264, 2445, 11, 498, 286, 528, 281, 855, 281, 291, 300], "temperature": 0.0, "avg_logprob": -0.08656992382473416, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.0014574225060641766}, {"id": 41, "seek": 38884, "start": 388.84, "end": 398.32, "text": " this value that I've computed from the function is computed from some parameters that went", "tokens": [341, 2158, 300, 286, 600, 40610, 490, 264, 2445, 307, 40610, 490, 512, 9834, 300, 1437], "temperature": 0.0, "avg_logprob": -0.08450005054473878, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.0009540567989461124}, {"id": 42, "seek": 38884, "start": 398.32, "end": 405.08, "text": " into the function, then normally the way that you do that, like logically, is I would have", "tokens": [666, 264, 2445, 11, 550, 5646, 264, 636, 300, 291, 360, 300, 11, 411, 38887, 11, 307, 286, 576, 362], "temperature": 0.0, "avg_logprob": -0.08450005054473878, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.0009540567989461124}, {"id": 43, "seek": 38884, "start": 405.08, "end": 411.0, "text": " to give you those input parameters and you have the function and you would compute the", "tokens": [281, 976, 291, 729, 4846, 9834, 293, 291, 362, 264, 2445, 293, 291, 576, 14722, 264], "temperature": 0.0, "avg_logprob": -0.08450005054473878, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.0009540567989461124}, {"id": 44, "seek": 38884, "start": 411.0, "end": 418.59999999999997, "text": " function yourself and get that result at the end and then be able to verify that the result", "tokens": [2445, 1803, 293, 483, 300, 1874, 412, 264, 917, 293, 550, 312, 1075, 281, 16888, 300, 264, 1874], "temperature": 0.0, "avg_logprob": -0.08450005054473878, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.0009540567989461124}, {"id": 45, "seek": 41860, "start": 418.6, "end": 421.6, "text": " is what it claims it is.", "tokens": [307, 437, 309, 9441, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.2224884766798753, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.0012170732952654362}, {"id": 46, "seek": 41860, "start": 421.6, "end": 430.12, "text": " For example, in a Bitcoin blockchain, you're doing transactions and everybody verifies", "tokens": [1171, 1365, 11, 294, 257, 11414, 17176, 11, 291, 434, 884, 16856, 293, 2201, 1306, 11221], "temperature": 0.0, "avg_logprob": -0.2224884766798753, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.0012170732952654362}, {"id": 47, "seek": 41860, "start": 430.12, "end": 436.52000000000004, "text": " the transactions that the computation is to advance the state machine to the next state", "tokens": [264, 16856, 300, 264, 24903, 307, 281, 7295, 264, 1785, 3479, 281, 264, 958, 1785], "temperature": 0.0, "avg_logprob": -0.2224884766798753, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.0012170732952654362}, {"id": 48, "seek": 41860, "start": 436.52000000000004, "end": 448.56, "text": " is correctly done.", "tokens": [307, 8944, 1096, 13], "temperature": 0.0, "avg_logprob": -0.2224884766798753, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.0012170732952654362}, {"id": 49, "seek": 44856, "start": 448.56, "end": 452.8, "text": " Then there are two very interesting properties of ZK proof.", "tokens": [1396, 456, 366, 732, 588, 1880, 7221, 295, 1176, 42, 8177, 13], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 50, "seek": 44856, "start": 452.8, "end": 456.6, "text": " So first, the ZK proof is succinct.", "tokens": [407, 700, 11, 264, 1176, 42, 8177, 307, 21578, 5460, 13], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 51, "seek": 44856, "start": 456.6, "end": 462.0, "text": " What that means is the actual proof object that proves the computation that has been", "tokens": [708, 300, 1355, 307, 264, 3539, 8177, 2657, 300, 25019, 264, 24903, 300, 575, 668], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 52, "seek": 44856, "start": 462.0, "end": 465.56, "text": " run on the values is very small.", "tokens": [1190, 322, 264, 4190, 307, 588, 1359, 13], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 53, "seek": 44856, "start": 465.56, "end": 469.64, "text": " It's smaller than the input parameters that go into the function.", "tokens": [467, 311, 4356, 813, 264, 4846, 9834, 300, 352, 666, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 54, "seek": 44856, "start": 469.64, "end": 478.46, "text": " You would expect that it would be some big proof, but actually, we save computation.", "tokens": [509, 576, 2066, 300, 309, 576, 312, 512, 955, 8177, 11, 457, 767, 11, 321, 3155, 24903, 13], "temperature": 0.0, "avg_logprob": -0.23630955455067393, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.0014748158864676952}, {"id": 55, "seek": 47846, "start": 478.46, "end": 487.03999999999996, "text": " When you want to verify that, you save computation compared to if you would compute the evaluation", "tokens": [1133, 291, 528, 281, 16888, 300, 11, 291, 3155, 24903, 5347, 281, 498, 291, 576, 14722, 264, 13344], "temperature": 0.0, "avg_logprob": -0.13893688292730422, "compression_ratio": 1.7414634146341463, "no_speech_prob": 0.0006425957544706762}, {"id": 56, "seek": 47846, "start": 487.03999999999996, "end": 493.08, "text": " of the input values, what we call the witnesses yourself.", "tokens": [295, 264, 4846, 4190, 11, 437, 321, 818, 264, 20217, 1803, 13], "temperature": 0.0, "avg_logprob": -0.13893688292730422, "compression_ratio": 1.7414634146341463, "no_speech_prob": 0.0006425957544706762}, {"id": 57, "seek": 47846, "start": 493.08, "end": 498.88, "text": " The proof size is small and the time to verify the proof is very small compared to actually", "tokens": [440, 8177, 2744, 307, 1359, 293, 264, 565, 281, 16888, 264, 8177, 307, 588, 1359, 5347, 281, 767], "temperature": 0.0, "avg_logprob": -0.13893688292730422, "compression_ratio": 1.7414634146341463, "no_speech_prob": 0.0006425957544706762}, {"id": 58, "seek": 47846, "start": 498.88, "end": 502.52, "text": " computing it and it can be anonymous.", "tokens": [15866, 309, 293, 309, 393, 312, 24932, 13], "temperature": 0.0, "avg_logprob": -0.13893688292730422, "compression_ratio": 1.7414634146341463, "no_speech_prob": 0.0006425957544706762}, {"id": 59, "seek": 47846, "start": 502.52, "end": 507.32, "text": " So there are some values that you put into a function to get a result.", "tokens": [407, 456, 366, 512, 4190, 300, 291, 829, 666, 257, 2445, 281, 483, 257, 1874, 13], "temperature": 0.0, "avg_logprob": -0.13893688292730422, "compression_ratio": 1.7414634146341463, "no_speech_prob": 0.0006425957544706762}, {"id": 60, "seek": 50732, "start": 507.32, "end": 510.08, "text": " You don't know what S, X, and Y are.", "tokens": [509, 500, 380, 458, 437, 318, 11, 1783, 11, 293, 398, 366, 13], "temperature": 0.0, "avg_logprob": -0.17929375308683548, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.00037656910717487335}, {"id": 61, "seek": 50732, "start": 510.08, "end": 516.12, "text": " You know Z, you know Foo, but you don't know S, X, and Y and that enable us, they give", "tokens": [509, 458, 1176, 11, 291, 458, 479, 1986, 11, 457, 291, 500, 380, 458, 318, 11, 1783, 11, 293, 398, 293, 300, 9528, 505, 11, 436, 976], "temperature": 0.0, "avg_logprob": -0.17929375308683548, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.00037656910717487335}, {"id": 62, "seek": 50732, "start": 516.12, "end": 525.56, "text": " us a very powerful technique in our arsenal, in our toolkit of anonymous engineering.", "tokens": [505, 257, 588, 4005, 6532, 294, 527, 42227, 11, 294, 527, 40167, 295, 24932, 7043, 13], "temperature": 0.0, "avg_logprob": -0.17929375308683548, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.00037656910717487335}, {"id": 63, "seek": 50732, "start": 525.56, "end": 532.56, "text": " So this is the general schema of ZK proofing.", "tokens": [407, 341, 307, 264, 2674, 34078, 295, 1176, 42, 8177, 278, 13], "temperature": 0.0, "avg_logprob": -0.17929375308683548, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.00037656910717487335}, {"id": 64, "seek": 50732, "start": 532.56, "end": 534.84, "text": " So you have a proof function.", "tokens": [407, 291, 362, 257, 8177, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17929375308683548, "compression_ratio": 1.565934065934066, "no_speech_prob": 0.00037656910717487335}, {"id": 65, "seek": 53484, "start": 534.84, "end": 538.2800000000001, "text": " So that means that's how we generate a ZK proof.", "tokens": [407, 300, 1355, 300, 311, 577, 321, 8460, 257, 1176, 42, 8177, 13], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 66, "seek": 53484, "start": 538.2800000000001, "end": 545.48, "text": " So you have some private values, the input values to your function Foo, and you have", "tokens": [407, 291, 362, 512, 4551, 4190, 11, 264, 4846, 4190, 281, 428, 2445, 479, 1986, 11, 293, 291, 362], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 67, "seek": 53484, "start": 545.48, "end": 549.6800000000001, "text": " the output of the function, which are your public values, and you create a proof.", "tokens": [264, 5598, 295, 264, 2445, 11, 597, 366, 428, 1908, 4190, 11, 293, 291, 1884, 257, 8177, 13], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 68, "seek": 53484, "start": 549.6800000000001, "end": 554.08, "text": " And then I give to you the proof, and you want to verify the proof, and you have the", "tokens": [400, 550, 286, 976, 281, 291, 264, 8177, 11, 293, 291, 528, 281, 16888, 264, 8177, 11, 293, 291, 362, 264], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 69, "seek": 53484, "start": 554.08, "end": 561.0, "text": " public values from the evaluation of that function, and you get true or false back.", "tokens": [1908, 4190, 490, 264, 13344, 295, 300, 2445, 11, 293, 291, 483, 2074, 420, 7908, 646, 13], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 70, "seek": 53484, "start": 561.0, "end": 563.32, "text": " So how does it work?", "tokens": [407, 577, 775, 309, 589, 30], "temperature": 0.0, "avg_logprob": -0.14907043951529045, "compression_ratio": 1.8577981651376148, "no_speech_prob": 0.0004951396258547902}, {"id": 71, "seek": 56332, "start": 563.32, "end": 571.5600000000001, "text": " This is obviously greatly simplified, but just observe this property.", "tokens": [639, 307, 2745, 14147, 26335, 11, 457, 445, 11441, 341, 4707, 13], "temperature": 0.0, "avg_logprob": -0.11125966947372645, "compression_ratio": 1.7431693989071038, "no_speech_prob": 0.0008753514848649502}, {"id": 72, "seek": 56332, "start": 571.5600000000001, "end": 578.6400000000001, "text": " If I have polynomials, and I add two polynomials, and then I evaluate the polynomial, that is", "tokens": [759, 286, 362, 22560, 12356, 11, 293, 286, 909, 732, 22560, 12356, 11, 293, 550, 286, 13059, 264, 26110, 11, 300, 307], "temperature": 0.0, "avg_logprob": -0.11125966947372645, "compression_ratio": 1.7431693989071038, "no_speech_prob": 0.0008753514848649502}, {"id": 73, "seek": 56332, "start": 578.6400000000001, "end": 584.6800000000001, "text": " the same as evaluating the polynomials and adding them together.", "tokens": [264, 912, 382, 27479, 264, 22560, 12356, 293, 5127, 552, 1214, 13], "temperature": 0.0, "avg_logprob": -0.11125966947372645, "compression_ratio": 1.7431693989071038, "no_speech_prob": 0.0008753514848649502}, {"id": 74, "seek": 56332, "start": 584.6800000000001, "end": 592.08, "text": " This is due to what is called mathematically the homomorphic property of the function that", "tokens": [639, 307, 3462, 281, 437, 307, 1219, 44003, 264, 3655, 32702, 299, 4707, 295, 264, 2445, 300], "temperature": 0.0, "avg_logprob": -0.11125966947372645, "compression_ratio": 1.7431693989071038, "no_speech_prob": 0.0008753514848649502}, {"id": 75, "seek": 59208, "start": 592.08, "end": 602.08, "text": " maps from the ring of the polynomials to the ring of the closure.", "tokens": [11317, 490, 264, 4875, 295, 264, 22560, 12356, 281, 264, 4875, 295, 264, 24653, 13], "temperature": 0.0, "avg_logprob": -0.1467272937297821, "compression_ratio": 1.4777070063694266, "no_speech_prob": 0.0009595434530638158}, {"id": 76, "seek": 59208, "start": 602.08, "end": 605.44, "text": " And it works as well for multiplication.", "tokens": [400, 309, 1985, 382, 731, 337, 27290, 13], "temperature": 0.0, "avg_logprob": -0.1467272937297821, "compression_ratio": 1.4777070063694266, "no_speech_prob": 0.0009595434530638158}, {"id": 77, "seek": 59208, "start": 605.44, "end": 615.44, "text": " So just remember that homomorphic property, and then what we do is that function Foo,", "tokens": [407, 445, 1604, 300, 3655, 32702, 299, 4707, 11, 293, 550, 437, 321, 360, 307, 300, 2445, 479, 1986, 11], "temperature": 0.0, "avg_logprob": -0.1467272937297821, "compression_ratio": 1.4777070063694266, "no_speech_prob": 0.0009595434530638158}, {"id": 78, "seek": 59208, "start": 615.44, "end": 618.6400000000001, "text": " we do this step called erythmetization.", "tokens": [321, 360, 341, 1823, 1219, 1189, 88, 392, 5537, 2144, 13], "temperature": 0.0, "avg_logprob": -0.1467272937297821, "compression_ratio": 1.4777070063694266, "no_speech_prob": 0.0009595434530638158}, {"id": 79, "seek": 61864, "start": 618.64, "end": 626.04, "text": " So any code that you write, we turn that code into a set of polynomials.", "tokens": [407, 604, 3089, 300, 291, 2464, 11, 321, 1261, 300, 3089, 666, 257, 992, 295, 22560, 12356, 13], "temperature": 0.0, "avg_logprob": -0.16002648217337473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.0004061042855028063}, {"id": 80, "seek": 61864, "start": 626.04, "end": 627.68, "text": " So how do we do that?", "tokens": [407, 577, 360, 321, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.16002648217337473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.0004061042855028063}, {"id": 81, "seek": 61864, "start": 627.68, "end": 634.84, "text": " Well, here imagine A and B are Boolean values, either 1 or 0.", "tokens": [1042, 11, 510, 3811, 316, 293, 363, 366, 23351, 28499, 4190, 11, 2139, 502, 420, 1958, 13], "temperature": 0.0, "avg_logprob": -0.16002648217337473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.0004061042855028063}, {"id": 82, "seek": 61864, "start": 634.84, "end": 639.0, "text": " So how can we turn those into arithmetic expressions?", "tokens": [407, 577, 393, 321, 1261, 729, 666, 42973, 15277, 30], "temperature": 0.0, "avg_logprob": -0.16002648217337473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.0004061042855028063}, {"id": 83, "seek": 61864, "start": 639.0, "end": 646.48, "text": " So if you notice with those formulas in the top left, and these tables on the right, if", "tokens": [407, 498, 291, 3449, 365, 729, 30546, 294, 264, 1192, 1411, 11, 293, 613, 8020, 322, 264, 558, 11, 498], "temperature": 0.0, "avg_logprob": -0.16002648217337473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.0004061042855028063}, {"id": 84, "seek": 64648, "start": 646.48, "end": 654.76, "text": " you do the calculation, you will get the same thing as long as A and B are 0 or 1.", "tokens": [291, 360, 264, 17108, 11, 291, 486, 483, 264, 912, 551, 382, 938, 382, 316, 293, 363, 366, 1958, 420, 502, 13], "temperature": 0.0, "avg_logprob": -0.12449498737559599, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.0003727783914655447}, {"id": 85, "seek": 64648, "start": 654.76, "end": 662.48, "text": " When you perform those formulas, they are the equivalent to those Boolean expressions.", "tokens": [1133, 291, 2042, 729, 30546, 11, 436, 366, 264, 10344, 281, 729, 23351, 28499, 15277, 13], "temperature": 0.0, "avg_logprob": -0.12449498737559599, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.0003727783914655447}, {"id": 86, "seek": 64648, "start": 662.48, "end": 670.8000000000001, "text": " And if you want to enforce, just as a side note, that a value s is in a certain range", "tokens": [400, 498, 291, 528, 281, 24825, 11, 445, 382, 257, 1252, 3637, 11, 300, 257, 2158, 262, 307, 294, 257, 1629, 3613], "temperature": 0.0, "avg_logprob": -0.12449498737559599, "compression_ratio": 1.5088757396449703, "no_speech_prob": 0.0003727783914655447}, {"id": 87, "seek": 67080, "start": 670.8, "end": 677.8399999999999, "text": " of values, for example, 0 or 1, well, it's just the same as saying s minus 0 multiplied", "tokens": [295, 4190, 11, 337, 1365, 11, 1958, 420, 502, 11, 731, 11, 309, 311, 445, 264, 912, 382, 1566, 262, 3175, 1958, 17207], "temperature": 0.0, "avg_logprob": -0.15601821899414062, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.000958831689786166}, {"id": 88, "seek": 67080, "start": 677.8399999999999, "end": 685.7199999999999, "text": " by s minus 1 is equal to 0, which is the roots of the polynomial where it would evaluate", "tokens": [538, 262, 3175, 502, 307, 2681, 281, 1958, 11, 597, 307, 264, 10669, 295, 264, 26110, 689, 309, 576, 13059], "temperature": 0.0, "avg_logprob": -0.15601821899414062, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.000958831689786166}, {"id": 89, "seek": 67080, "start": 685.7199999999999, "end": 686.7199999999999, "text": " to 0.", "tokens": [281, 1958, 13], "temperature": 0.0, "avg_logprob": -0.15601821899414062, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.000958831689786166}, {"id": 90, "seek": 67080, "start": 686.7199999999999, "end": 694.76, "text": " That will be a degree to polynomial, and there will be no other roots of 0 there.", "tokens": [663, 486, 312, 257, 4314, 281, 26110, 11, 293, 456, 486, 312, 572, 661, 10669, 295, 1958, 456, 13], "temperature": 0.0, "avg_logprob": -0.15601821899414062, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.000958831689786166}, {"id": 91, "seek": 69476, "start": 694.76, "end": 702.24, "text": " And so we have that function foo, which, if you remember, where was it?", "tokens": [400, 370, 321, 362, 300, 2445, 726, 78, 11, 597, 11, 498, 291, 1604, 11, 689, 390, 309, 30], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 92, "seek": 69476, "start": 702.24, "end": 706.8, "text": " It was here, this one.", "tokens": [467, 390, 510, 11, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 93, "seek": 69476, "start": 706.8, "end": 712.2, "text": " If s return x times y, else return x plus y.", "tokens": [759, 262, 2736, 2031, 1413, 288, 11, 1646, 2736, 2031, 1804, 288, 13], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 94, "seek": 69476, "start": 712.2, "end": 714.04, "text": " And how do we arithmeticize that?", "tokens": [400, 577, 360, 321, 42973, 1125, 300, 30], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 95, "seek": 69476, "start": 714.04, "end": 722.12, "text": " Well, you can see below that we have z is equal to sxy plus open bracket 1 minus s x", "tokens": [1042, 11, 291, 393, 536, 2507, 300, 321, 362, 710, 307, 2681, 281, 262, 12876, 1804, 1269, 16904, 502, 3175, 262, 2031], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 96, "seek": 69476, "start": 722.12, "end": 723.12, "text": " plus y.", "tokens": [1804, 288, 13], "temperature": 0.0, "avg_logprob": -0.2286025646121003, "compression_ratio": 1.5113636363636365, "no_speech_prob": 7.741398439975455e-05}, {"id": 97, "seek": 72312, "start": 723.12, "end": 725.32, "text": " Both of those are equivalent.", "tokens": [6767, 295, 729, 366, 10344, 13], "temperature": 0.0, "avg_logprob": -0.2127375943320138, "compression_ratio": 1.3691275167785235, "no_speech_prob": 0.0007594848284497857}, {"id": 98, "seek": 72312, "start": 725.32, "end": 736.76, "text": " So we've taken piece of code, we've arithmeticized it as a mathematical expression.", "tokens": [407, 321, 600, 2726, 2522, 295, 3089, 11, 321, 600, 42973, 1602, 309, 382, 257, 18894, 6114, 13], "temperature": 0.0, "avg_logprob": -0.2127375943320138, "compression_ratio": 1.3691275167785235, "no_speech_prob": 0.0007594848284497857}, {"id": 99, "seek": 72312, "start": 736.76, "end": 747.12, "text": " So then we can use this Schwartz-Zippel lemma, which is rather than having to give you all", "tokens": [407, 550, 321, 393, 764, 341, 17576, 45929, 12, 57, 2488, 338, 7495, 1696, 11, 597, 307, 2831, 813, 1419, 281, 976, 291, 439], "temperature": 0.0, "avg_logprob": -0.2127375943320138, "compression_ratio": 1.3691275167785235, "no_speech_prob": 0.0007594848284497857}, {"id": 100, "seek": 74712, "start": 747.12, "end": 762.44, "text": " of these huge degree polynomials, depending on the number of equations that you're checking.", "tokens": [295, 613, 2603, 4314, 22560, 12356, 11, 5413, 322, 264, 1230, 295, 11787, 300, 291, 434, 8568, 13], "temperature": 0.0, "avg_logprob": -0.14000327963578074, "compression_ratio": 1.4509803921568627, "no_speech_prob": 0.0009213199955411255}, {"id": 101, "seek": 74712, "start": 762.44, "end": 769.28, "text": " There is something that we can do where we can just evaluate a polynomial at one point.", "tokens": [821, 307, 746, 300, 321, 393, 360, 689, 321, 393, 445, 13059, 257, 26110, 412, 472, 935, 13], "temperature": 0.0, "avg_logprob": -0.14000327963578074, "compression_ratio": 1.4509803921568627, "no_speech_prob": 0.0009213199955411255}, {"id": 102, "seek": 74712, "start": 769.28, "end": 771.48, "text": " That relies on the Schwartz-Zippel lemma.", "tokens": [663, 30910, 322, 264, 17576, 45929, 12, 57, 2488, 338, 7495, 1696, 13], "temperature": 0.0, "avg_logprob": -0.14000327963578074, "compression_ratio": 1.4509803921568627, "no_speech_prob": 0.0009213199955411255}, {"id": 103, "seek": 77148, "start": 771.48, "end": 781.6, "text": " So let's pretend that we have two polynomials that we're trying to check a multiplication", "tokens": [407, 718, 311, 11865, 300, 321, 362, 732, 22560, 12356, 300, 321, 434, 1382, 281, 1520, 257, 27290], "temperature": 0.0, "avg_logprob": -0.13223700012479508, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.0006011216901242733}, {"id": 104, "seek": 77148, "start": 781.6, "end": 782.6, "text": " of.", "tokens": [295, 13], "temperature": 0.0, "avg_logprob": -0.13223700012479508, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.0006011216901242733}, {"id": 105, "seek": 77148, "start": 782.6, "end": 788.72, "text": " If you remember in the first slide, we had fg evaluated alpha is equal to f of alpha", "tokens": [759, 291, 1604, 294, 264, 700, 4137, 11, 321, 632, 283, 70, 25509, 8961, 307, 2681, 281, 283, 295, 8961], "temperature": 0.0, "avg_logprob": -0.13223700012479508, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.0006011216901242733}, {"id": 106, "seek": 77148, "start": 788.72, "end": 791.16, "text": " multiplied by g of alpha.", "tokens": [17207, 538, 290, 295, 8961, 13], "temperature": 0.0, "avg_logprob": -0.13223700012479508, "compression_ratio": 1.4366197183098592, "no_speech_prob": 0.0006011216901242733}, {"id": 107, "seek": 79116, "start": 791.16, "end": 802.36, "text": " So these polynomials, if you notice, they're constructed so that they intersect through", "tokens": [407, 613, 22560, 12356, 11, 498, 291, 3449, 11, 436, 434, 17083, 370, 300, 436, 27815, 807], "temperature": 0.0, "avg_logprob": -0.12464477334703718, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0003236238844692707}, {"id": 108, "seek": 79116, "start": 802.36, "end": 804.64, "text": " a certain number of points here.", "tokens": [257, 1629, 1230, 295, 2793, 510, 13], "temperature": 0.0, "avg_logprob": -0.12464477334703718, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0003236238844692707}, {"id": 109, "seek": 79116, "start": 804.64, "end": 814.56, "text": " So the red one goes through 1, x equals 0, the red one goes through 1, x equals 1, the", "tokens": [407, 264, 2182, 472, 1709, 807, 502, 11, 2031, 6915, 1958, 11, 264, 2182, 472, 1709, 807, 502, 11, 2031, 6915, 502, 11, 264], "temperature": 0.0, "avg_logprob": -0.12464477334703718, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0003236238844692707}, {"id": 110, "seek": 81456, "start": 814.56, "end": 822.0, "text": " red one goes through 2, x equals 2, goes through minus 1, x equals 3, goes through 1, etc.,", "tokens": [2182, 472, 1709, 807, 568, 11, 2031, 6915, 568, 11, 1709, 807, 3175, 502, 11, 2031, 6915, 805, 11, 1709, 807, 502, 11, 5183, 7933], "temperature": 0.0, "avg_logprob": -0.15966009385514968, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00039905571611598134}, {"id": 111, "seek": 81456, "start": 822.0, "end": 823.88, "text": " 2, 3, 2.", "tokens": [568, 11, 805, 11, 568, 13], "temperature": 0.0, "avg_logprob": -0.15966009385514968, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00039905571611598134}, {"id": 112, "seek": 81456, "start": 823.88, "end": 828.52, "text": " So that's a Lagrange interpolation of those points.", "tokens": [407, 300, 311, 257, 24886, 14521, 44902, 399, 295, 729, 2793, 13], "temperature": 0.0, "avg_logprob": -0.15966009385514968, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00039905571611598134}, {"id": 113, "seek": 81456, "start": 828.52, "end": 836.2399999999999, "text": " And the yellow one, likewise, does the same, but for 0, 2, 2, 0, 2, 1, 3.", "tokens": [400, 264, 5566, 472, 11, 32407, 11, 775, 264, 912, 11, 457, 337, 1958, 11, 568, 11, 568, 11, 1958, 11, 568, 11, 502, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.15966009385514968, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00039905571611598134}, {"id": 114, "seek": 81456, "start": 836.2399999999999, "end": 843.88, "text": " So you can imagine those are the lines of our kind of proof or program that we're trying", "tokens": [407, 291, 393, 3811, 729, 366, 264, 3876, 295, 527, 733, 295, 8177, 420, 1461, 300, 321, 434, 1382], "temperature": 0.0, "avg_logprob": -0.15966009385514968, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00039905571611598134}, {"id": 115, "seek": 84388, "start": 843.88, "end": 844.88, "text": " to enforce.", "tokens": [281, 24825, 13], "temperature": 0.0, "avg_logprob": -0.121300329644996, "compression_ratio": 1.6347305389221556, "no_speech_prob": 0.000933100120164454}, {"id": 116, "seek": 84388, "start": 844.88, "end": 853.4, "text": " So the first one might be that we want to check that 0 times 1 is equal to 0, and 2 times", "tokens": [407, 264, 700, 472, 1062, 312, 300, 321, 528, 281, 1520, 300, 1958, 1413, 502, 307, 2681, 281, 1958, 11, 293, 568, 1413], "temperature": 0.0, "avg_logprob": -0.121300329644996, "compression_ratio": 1.6347305389221556, "no_speech_prob": 0.000933100120164454}, {"id": 117, "seek": 84388, "start": 853.4, "end": 857.8, "text": " 2 is equal to 4, and 2 times minus 1 is equal to minus 2.", "tokens": [568, 307, 2681, 281, 1017, 11, 293, 568, 1413, 3175, 502, 307, 2681, 281, 3175, 568, 13], "temperature": 0.0, "avg_logprob": -0.121300329644996, "compression_ratio": 1.6347305389221556, "no_speech_prob": 0.000933100120164454}, {"id": 118, "seek": 84388, "start": 857.8, "end": 860.48, "text": " So how do we construct that proof?", "tokens": [407, 577, 360, 321, 7690, 300, 8177, 30], "temperature": 0.0, "avg_logprob": -0.121300329644996, "compression_ratio": 1.6347305389221556, "no_speech_prob": 0.000933100120164454}, {"id": 119, "seek": 84388, "start": 860.48, "end": 868.36, "text": " Well, if we multiply the points together, like so, we get a new set of points.", "tokens": [1042, 11, 498, 321, 12972, 264, 2793, 1214, 11, 411, 370, 11, 321, 483, 257, 777, 992, 295, 2793, 13], "temperature": 0.0, "avg_logprob": -0.121300329644996, "compression_ratio": 1.6347305389221556, "no_speech_prob": 0.000933100120164454}, {"id": 120, "seek": 86836, "start": 868.36, "end": 876.4, "text": " And then, because these polynomials are degree 6, to create the polynomial that comes from", "tokens": [400, 550, 11, 570, 613, 22560, 12356, 366, 4314, 1386, 11, 281, 1884, 264, 26110, 300, 1487, 490], "temperature": 0.0, "avg_logprob": -0.14840564727783204, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.0004324893234297633}, {"id": 121, "seek": 86836, "start": 876.4, "end": 884.52, "text": " multiplying these two polynomials, we need 12 points, which are multiplied from both", "tokens": [30955, 613, 732, 22560, 12356, 11, 321, 643, 2272, 2793, 11, 597, 366, 17207, 490, 1293], "temperature": 0.0, "avg_logprob": -0.14840564727783204, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.0004324893234297633}, {"id": 122, "seek": 86836, "start": 884.52, "end": 887.1, "text": " of these, but I've only done six here.", "tokens": [295, 613, 11, 457, 286, 600, 787, 1096, 2309, 510, 13], "temperature": 0.0, "avg_logprob": -0.14840564727783204, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.0004324893234297633}, {"id": 123, "seek": 86836, "start": 887.1, "end": 895.84, "text": " So then we have these points, and we interpolate, we draw a polynomial interpolating those.", "tokens": [407, 550, 321, 362, 613, 2793, 11, 293, 321, 44902, 473, 11, 321, 2642, 257, 26110, 44902, 990, 729, 13], "temperature": 0.0, "avg_logprob": -0.14840564727783204, "compression_ratio": 1.6630434782608696, "no_speech_prob": 0.0004324893234297633}, {"id": 124, "seek": 89584, "start": 895.84, "end": 902.8000000000001, "text": " So this is the new polynomial we get, the pink one.", "tokens": [407, 341, 307, 264, 777, 26110, 321, 483, 11, 264, 7022, 472, 13], "temperature": 0.0, "avg_logprob": -0.17259156398284128, "compression_ratio": 1.2920353982300885, "no_speech_prob": 0.0004732434172183275}, {"id": 125, "seek": 89584, "start": 902.8000000000001, "end": 917.2800000000001, "text": " And if you remember this relation from earlier, we now have this polynomial FG, and therefore,", "tokens": [400, 498, 291, 1604, 341, 9721, 490, 3071, 11, 321, 586, 362, 341, 26110, 479, 38, 11, 293, 4412, 11], "temperature": 0.0, "avg_logprob": -0.17259156398284128, "compression_ratio": 1.2920353982300885, "no_speech_prob": 0.0004732434172183275}, {"id": 126, "seek": 91728, "start": 917.28, "end": 925.72, "text": " if there is a protocol where a random point or a random X value is selected, then it's", "tokens": [498, 456, 307, 257, 10336, 689, 257, 4974, 935, 420, 257, 4974, 1783, 2158, 307, 8209, 11, 550, 309, 311], "temperature": 0.0, "avg_logprob": -0.1232281484101948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00023007368145044893}, {"id": 127, "seek": 91728, "start": 925.72, "end": 938.72, "text": " sufficient to prove that there is this evaluation at this combined polynomial FG of alpha is", "tokens": [11563, 281, 7081, 300, 456, 307, 341, 13344, 412, 341, 9354, 26110, 479, 38, 295, 8961, 307], "temperature": 0.0, "avg_logprob": -0.1232281484101948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00023007368145044893}, {"id": 128, "seek": 91728, "start": 938.72, "end": 944.52, "text": " equal to evaluations of the other two polynomials multiplied together.", "tokens": [2681, 281, 43085, 295, 264, 661, 732, 22560, 12356, 17207, 1214, 13], "temperature": 0.0, "avg_logprob": -0.1232281484101948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00023007368145044893}, {"id": 129, "seek": 94452, "start": 944.52, "end": 950.64, "text": " And therefore, you can be sure that that pink one is the multiplication of all the individual", "tokens": [400, 4412, 11, 291, 393, 312, 988, 300, 300, 7022, 472, 307, 264, 27290, 295, 439, 264, 2609], "temperature": 0.0, "avg_logprob": -0.1802462935447693, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.0012276256456971169}, {"id": 130, "seek": 94452, "start": 950.64, "end": 959.0, "text": " points, because the random point and the probability of you being able to preempt that is basically", "tokens": [2793, 11, 570, 264, 4974, 935, 293, 264, 8482, 295, 291, 885, 1075, 281, 659, 4543, 300, 307, 1936], "temperature": 0.0, "avg_logprob": -0.1802462935447693, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.0012276256456971169}, {"id": 131, "seek": 94452, "start": 959.0, "end": 964.0, "text": " nearly zero.", "tokens": [6217, 4018, 13], "temperature": 0.0, "avg_logprob": -0.1802462935447693, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.0012276256456971169}, {"id": 132, "seek": 96400, "start": 964.0, "end": 980.28, "text": " And so we can actually see here, if we look at any two points, the top two is the red", "tokens": [400, 370, 321, 393, 767, 536, 510, 11, 498, 321, 574, 412, 604, 732, 2793, 11, 264, 1192, 732, 307, 264, 2182], "temperature": 0.0, "avg_logprob": -0.11539550413165175, "compression_ratio": 1.688, "no_speech_prob": 0.0020483452826738358}, {"id": 133, "seek": 96400, "start": 980.28, "end": 987.88, "text": " and the yellow one, and the white one is actually the multiplication of the two points, and", "tokens": [293, 264, 5566, 472, 11, 293, 264, 2418, 472, 307, 767, 264, 27290, 295, 264, 732, 2793, 11, 293], "temperature": 0.0, "avg_logprob": -0.11539550413165175, "compression_ratio": 1.688, "no_speech_prob": 0.0020483452826738358}, {"id": 134, "seek": 96400, "start": 987.88, "end": 990.16, "text": " the purple one is the purple one.", "tokens": [264, 9656, 472, 307, 264, 9656, 472, 13], "temperature": 0.0, "avg_logprob": -0.11539550413165175, "compression_ratio": 1.688, "no_speech_prob": 0.0020483452826738358}, {"id": 135, "seek": 99016, "start": 990.16, "end": 1000.52, "text": " So we've actually created the polynomial which have this property at all points along it.", "tokens": [407, 321, 600, 767, 2942, 264, 26110, 597, 362, 341, 4707, 412, 439, 2793, 2051, 309, 13], "temperature": 0.0, "avg_logprob": -0.13980262478192648, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0010924416128546}, {"id": 136, "seek": 99016, "start": 1000.52, "end": 1006.4, "text": " And because it has this property, it's sufficient just to pick a random point and check that", "tokens": [400, 570, 309, 575, 341, 4707, 11, 309, 311, 11563, 445, 281, 1888, 257, 4974, 935, 293, 1520, 300], "temperature": 0.0, "avg_logprob": -0.13980262478192648, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0010924416128546}, {"id": 137, "seek": 99016, "start": 1006.4, "end": 1014.9599999999999, "text": " that's true.", "tokens": [300, 311, 2074, 13], "temperature": 0.0, "avg_logprob": -0.13980262478192648, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.0010924416128546}, {"id": 138, "seek": 101496, "start": 1014.96, "end": 1024.32, "text": " And there is another puzzle piece which is the polynomial commitment proof.", "tokens": [400, 456, 307, 1071, 12805, 2522, 597, 307, 264, 26110, 8371, 8177, 13], "temperature": 0.0, "avg_logprob": -0.14022332224352607, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0006679106736555696}, {"id": 139, "seek": 101496, "start": 1024.32, "end": 1032.96, "text": " So essentially, you can create a commitment of a polynomial which is like hashing a polynomial,", "tokens": [407, 4476, 11, 291, 393, 1884, 257, 8371, 295, 257, 26110, 597, 307, 411, 575, 571, 257, 26110, 11], "temperature": 0.0, "avg_logprob": -0.14022332224352607, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0006679106736555696}, {"id": 140, "seek": 101496, "start": 1032.96, "end": 1036.96, "text": " and you don't know what the polynomial is, so this is where the zero knowledge property", "tokens": [293, 291, 500, 380, 458, 437, 264, 26110, 307, 11, 370, 341, 307, 689, 264, 4018, 3601, 4707], "temperature": 0.0, "avg_logprob": -0.14022332224352607, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0006679106736555696}, {"id": 141, "seek": 103696, "start": 1036.96, "end": 1048.16, "text": " come from, and then there's an object representing a polynomial in your system, and any time", "tokens": [808, 490, 11, 293, 550, 456, 311, 364, 2657, 13460, 257, 26110, 294, 428, 1185, 11, 293, 604, 565], "temperature": 0.0, "avg_logprob": -0.15198245502653576, "compression_ratio": 1.448, "no_speech_prob": 0.0013311017537489533}, {"id": 142, "seek": 103696, "start": 1048.16, "end": 1056.28, "text": " you can create a proof using the polynomial which has this statement on the right, which", "tokens": [291, 393, 1884, 257, 8177, 1228, 264, 26110, 597, 575, 341, 5629, 322, 264, 558, 11, 597], "temperature": 0.0, "avg_logprob": -0.15198245502653576, "compression_ratio": 1.448, "no_speech_prob": 0.0013311017537489533}, {"id": 143, "seek": 105628, "start": 1056.28, "end": 1071.24, "text": " says that the f is a commitment or hash of this polynomial f, and z is equal to an evaluation", "tokens": [1619, 300, 264, 283, 307, 257, 8371, 420, 22019, 295, 341, 26110, 283, 11, 293, 710, 307, 2681, 281, 364, 13344], "temperature": 0.0, "avg_logprob": -0.17461085319519043, "compression_ratio": 1.4071428571428573, "no_speech_prob": 0.00047556404024362564}, {"id": 144, "seek": 105628, "start": 1071.24, "end": 1073.6399999999999, "text": " of f at s.", "tokens": [295, 283, 412, 262, 13], "temperature": 0.0, "avg_logprob": -0.17461085319519043, "compression_ratio": 1.4071428571428573, "no_speech_prob": 0.00047556404024362564}, {"id": 145, "seek": 105628, "start": 1073.6399999999999, "end": 1083.36, "text": " And so that's what that open does is it creates this proof on the right, and then I can give", "tokens": [400, 370, 300, 311, 437, 300, 1269, 775, 307, 309, 7829, 341, 8177, 322, 264, 558, 11, 293, 550, 286, 393, 976], "temperature": 0.0, "avg_logprob": -0.17461085319519043, "compression_ratio": 1.4071428571428573, "no_speech_prob": 0.00047556404024362564}, {"id": 146, "seek": 108336, "start": 1083.36, "end": 1089.12, "text": " you this proof, and I can give you the commitment to the polynomial, which is just a hash of", "tokens": [291, 341, 8177, 11, 293, 286, 393, 976, 291, 264, 8371, 281, 264, 26110, 11, 597, 307, 445, 257, 22019, 295], "temperature": 0.0, "avg_logprob": -0.19496849907769098, "compression_ratio": 1.7069767441860466, "no_speech_prob": 0.0003057059075217694}, {"id": 147, "seek": 108336, "start": 1089.12, "end": 1095.84, "text": " the polynomial essentially, and you can verify that whatever polynomial is inside of f is", "tokens": [264, 26110, 4476, 11, 293, 291, 393, 16888, 300, 2035, 26110, 307, 1854, 295, 283, 307], "temperature": 0.0, "avg_logprob": -0.19496849907769098, "compression_ratio": 1.7069767441860466, "no_speech_prob": 0.0003057059075217694}, {"id": 148, "seek": 108336, "start": 1095.84, "end": 1106.12, "text": " equal, is the z is equal to f, or evaluator s, and the same principle is true for addition.", "tokens": [2681, 11, 307, 264, 710, 307, 2681, 281, 283, 11, 420, 6133, 1639, 262, 11, 293, 264, 912, 8665, 307, 2074, 337, 4500, 13], "temperature": 0.0, "avg_logprob": -0.19496849907769098, "compression_ratio": 1.7069767441860466, "no_speech_prob": 0.0003057059075217694}, {"id": 149, "seek": 108336, "start": 1106.12, "end": 1112.36, "text": " So we have multiplication and we have addition, which means we can construct any NP-complete", "tokens": [407, 321, 362, 27290, 293, 321, 362, 4500, 11, 597, 1355, 321, 393, 7690, 604, 38611, 12, 1112, 17220], "temperature": 0.0, "avg_logprob": -0.19496849907769098, "compression_ratio": 1.7069767441860466, "no_speech_prob": 0.0003057059075217694}, {"id": 150, "seek": 111236, "start": 1112.36, "end": 1115.6399999999999, "text": " program inside of zk proof.", "tokens": [1461, 1854, 295, 710, 74, 8177, 13], "temperature": 0.0, "avg_logprob": -0.36427108101222827, "compression_ratio": 1.0394736842105263, "no_speech_prob": 0.0004811083781532943}, {"id": 151, "seek": 111236, "start": 1115.6399999999999, "end": 1123.8, "text": " Also, another technique is multi-party computation.", "tokens": [2743, 11, 1071, 6532, 307, 4825, 12, 23409, 24903, 13], "temperature": 0.0, "avg_logprob": -0.36427108101222827, "compression_ratio": 1.0394736842105263, "no_speech_prob": 0.0004811083781532943}, {"id": 152, "seek": 112380, "start": 1123.8, "end": 1151.8799999999999, "text": " So in NPC, so with a zero knowledge proof, I can compute a value, I can prove a statement", "tokens": [407, 294, 28787, 11, 370, 365, 257, 4018, 3601, 8177, 11, 286, 393, 14722, 257, 2158, 11, 286, 393, 7081, 257, 5629], "temperature": 0.0, "avg_logprob": -0.1806044211754432, "compression_ratio": 1.0595238095238095, "no_speech_prob": 0.00022950928541831672}, {"id": 153, "seek": 115188, "start": 1151.88, "end": 1161.72, "text": " about some values that I hold, but maybe sometimes we need to compute, or other people need to", "tokens": [466, 512, 4190, 300, 286, 1797, 11, 457, 1310, 2171, 321, 643, 281, 14722, 11, 420, 661, 561, 643, 281], "temperature": 0.0, "avg_logprob": -0.11884615314540578, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.00096580182434991}, {"id": 154, "seek": 115188, "start": 1161.72, "end": 1168.1200000000001, "text": " be able to know certain facts about other actors in the system, and maybe they don't", "tokens": [312, 1075, 281, 458, 1629, 9130, 466, 661, 10037, 294, 264, 1185, 11, 293, 1310, 436, 500, 380], "temperature": 0.0, "avg_logprob": -0.11884615314540578, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.00096580182434991}, {"id": 155, "seek": 115188, "start": 1168.1200000000001, "end": 1175.5600000000002, "text": " have the incentive to create a zk proof or to prove statements about values that they", "tokens": [362, 264, 22346, 281, 1884, 257, 710, 74, 8177, 420, 281, 7081, 12363, 466, 4190, 300, 436], "temperature": 0.0, "avg_logprob": -0.11884615314540578, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.00096580182434991}, {"id": 156, "seek": 115188, "start": 1175.5600000000002, "end": 1176.5600000000002, "text": " hold.", "tokens": [1797, 13], "temperature": 0.0, "avg_logprob": -0.11884615314540578, "compression_ratio": 1.6130952380952381, "no_speech_prob": 0.00096580182434991}, {"id": 157, "seek": 117656, "start": 1176.56, "end": 1184.24, "text": " So that's where we use another technique that's called MPC, and I will show you how we can", "tokens": [407, 300, 311, 689, 321, 764, 1071, 6532, 300, 311, 1219, 376, 12986, 11, 293, 286, 486, 855, 291, 577, 321, 393], "temperature": 0.0, "avg_logprob": -0.1961840290134236, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.0007100096554495394}, {"id": 158, "seek": 117656, "start": 1184.24, "end": 1187.96, "text": " do addition of values with MPC.", "tokens": [360, 4500, 295, 4190, 365, 376, 12986, 13], "temperature": 0.0, "avg_logprob": -0.1961840290134236, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.0007100096554495394}, {"id": 159, "seek": 117656, "start": 1187.96, "end": 1200.28, "text": " So Alice has some number, some secret number, 110, and Alice and Bob has some other number,", "tokens": [407, 16004, 575, 512, 1230, 11, 512, 4054, 1230, 11, 20154, 11, 293, 16004, 293, 6085, 575, 512, 661, 1230, 11], "temperature": 0.0, "avg_logprob": -0.1961840290134236, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.0007100096554495394}, {"id": 160, "seek": 120028, "start": 1200.28, "end": 1212.8, "text": " 1177, and Alice now splits her number randomly, such that those numbers add up to 110.", "tokens": [2975, 17512, 11, 293, 16004, 586, 37741, 720, 1230, 16979, 11, 1270, 300, 729, 3547, 909, 493, 281, 20154, 13], "temperature": 0.0, "avg_logprob": -0.15656521009362262, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.0017617364646866918}, {"id": 161, "seek": 120028, "start": 1212.8, "end": 1217.68, "text": " So if you add them up, it would be 110, and then sends them to each other's servers.", "tokens": [407, 498, 291, 909, 552, 493, 11, 309, 576, 312, 20154, 11, 293, 550, 14790, 552, 281, 1184, 661, 311, 15909, 13], "temperature": 0.0, "avg_logprob": -0.15656521009362262, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.0017617364646866918}, {"id": 162, "seek": 120028, "start": 1217.68, "end": 1223.8, "text": " So none of the servers know what Alice's number is, but they know parts of it.", "tokens": [407, 6022, 295, 264, 15909, 458, 437, 16004, 311, 1230, 307, 11, 457, 436, 458, 3166, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.15656521009362262, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.0017617364646866918}, {"id": 163, "seek": 120028, "start": 1223.8, "end": 1228.72, "text": " They can reconstruct it if they collude, but we're assuming they don't collude, and then", "tokens": [814, 393, 31499, 309, 498, 436, 1263, 2303, 11, 457, 321, 434, 11926, 436, 500, 380, 1263, 2303, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.15656521009362262, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.0017617364646866918}, {"id": 164, "seek": 122872, "start": 1228.72, "end": 1236.9, "text": " Bob does the same thing, he sends his numbers, and now when we want to compute an addition", "tokens": [6085, 775, 264, 912, 551, 11, 415, 14790, 702, 3547, 11, 293, 586, 562, 321, 528, 281, 14722, 364, 4500], "temperature": 0.0, "avg_logprob": -0.11881959097726004, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.0013340116711333394}, {"id": 165, "seek": 122872, "start": 1236.9, "end": 1242.6000000000001, "text": " of the values, each of the server will add the values together, and now they get these", "tokens": [295, 264, 4190, 11, 1184, 295, 264, 7154, 486, 909, 264, 4190, 1214, 11, 293, 586, 436, 483, 613], "temperature": 0.0, "avg_logprob": -0.11881959097726004, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.0013340116711333394}, {"id": 166, "seek": 122872, "start": 1242.6000000000001, "end": 1244.56, "text": " new values.", "tokens": [777, 4190, 13], "temperature": 0.0, "avg_logprob": -0.11881959097726004, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.0013340116711333394}, {"id": 167, "seek": 122872, "start": 1244.56, "end": 1256.04, "text": " And if you look, those values added together when they reconstruct it is the answer of adding", "tokens": [400, 498, 291, 574, 11, 729, 4190, 3869, 1214, 562, 436, 31499, 309, 307, 264, 1867, 295, 5127], "temperature": 0.0, "avg_logprob": -0.11881959097726004, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.0013340116711333394}, {"id": 168, "seek": 125604, "start": 1256.04, "end": 1264.04, "text": " the two private values together, and multiplication is similar, but slightly more involved, but", "tokens": [264, 732, 4551, 4190, 1214, 11, 293, 27290, 307, 2531, 11, 457, 4748, 544, 3288, 11, 457], "temperature": 0.0, "avg_logprob": -0.14017555075632016, "compression_ratio": 1.5677083333333333, "no_speech_prob": 0.000666235398966819}, {"id": 169, "seek": 125604, "start": 1264.04, "end": 1265.76, "text": " also it's possible.", "tokens": [611, 309, 311, 1944, 13], "temperature": 0.0, "avg_logprob": -0.14017555075632016, "compression_ratio": 1.5677083333333333, "no_speech_prob": 0.000666235398966819}, {"id": 170, "seek": 125604, "start": 1265.76, "end": 1272.84, "text": " So MPC is another powerful technique.", "tokens": [407, 376, 12986, 307, 1071, 4005, 6532, 13], "temperature": 0.0, "avg_logprob": -0.14017555075632016, "compression_ratio": 1.5677083333333333, "no_speech_prob": 0.000666235398966819}, {"id": 171, "seek": 125604, "start": 1272.84, "end": 1280.68, "text": " Also we have homomorphic encryption, so very simple partial homomorphic encryption is simply", "tokens": [2743, 321, 362, 3655, 32702, 299, 29575, 11, 370, 588, 2199, 14641, 3655, 32702, 299, 29575, 307, 2935], "temperature": 0.0, "avg_logprob": -0.14017555075632016, "compression_ratio": 1.5677083333333333, "no_speech_prob": 0.000666235398966819}, {"id": 172, "seek": 125604, "start": 1280.68, "end": 1284.8799999999999, "text": " this function, which is elliptic curve multiplication.", "tokens": [341, 2445, 11, 597, 307, 8284, 22439, 299, 7605, 27290, 13], "temperature": 0.0, "avg_logprob": -0.14017555075632016, "compression_ratio": 1.5677083333333333, "no_speech_prob": 0.000666235398966819}, {"id": 173, "seek": 128488, "start": 1284.88, "end": 1291.3600000000001, "text": " So if I have two values, and I add them together, and I multiply them by the generator of an", "tokens": [407, 498, 286, 362, 732, 4190, 11, 293, 286, 909, 552, 1214, 11, 293, 286, 12972, 552, 538, 264, 19265, 295, 364], "temperature": 0.0, "avg_logprob": -0.09058122431978266, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0004441052151378244}, {"id": 174, "seek": 128488, "start": 1291.3600000000001, "end": 1297.0400000000002, "text": " elliptic curve, or just some point on the elliptic curve, that is the same as taking", "tokens": [8284, 22439, 299, 7605, 11, 420, 445, 512, 935, 322, 264, 8284, 22439, 299, 7605, 11, 300, 307, 264, 912, 382, 1940], "temperature": 0.0, "avg_logprob": -0.09058122431978266, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0004441052151378244}, {"id": 175, "seek": 128488, "start": 1297.0400000000002, "end": 1304.3600000000001, "text": " the value multiplying it by g, and then adding it to the other value multiplied by g.", "tokens": [264, 2158, 30955, 309, 538, 290, 11, 293, 550, 5127, 309, 281, 264, 661, 2158, 17207, 538, 290, 13], "temperature": 0.0, "avg_logprob": -0.09058122431978266, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0004441052151378244}, {"id": 176, "seek": 128488, "start": 1304.3600000000001, "end": 1314.4, "text": " So homomorphic encryption, the original idea in the 80s was there's a cloud, and anybody", "tokens": [407, 3655, 32702, 299, 29575, 11, 264, 3380, 1558, 294, 264, 4688, 82, 390, 456, 311, 257, 4588, 11, 293, 4472], "temperature": 0.0, "avg_logprob": -0.09058122431978266, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0004441052151378244}, {"id": 177, "seek": 131440, "start": 1314.4, "end": 1322.6000000000001, "text": " can put values into this cloud, but they're encrypted, and then other people can compute", "tokens": [393, 829, 4190, 666, 341, 4588, 11, 457, 436, 434, 36663, 11, 293, 550, 661, 561, 393, 14722], "temperature": 0.0, "avg_logprob": -0.12106701668272628, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.0006630159332416952}, {"id": 178, "seek": 131440, "start": 1322.6000000000001, "end": 1329.3200000000002, "text": " answers encrypted for a certain public key.", "tokens": [6338, 36663, 337, 257, 1629, 1908, 2141, 13], "temperature": 0.0, "avg_logprob": -0.12106701668272628, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.0006630159332416952}, {"id": 179, "seek": 131440, "start": 1329.3200000000002, "end": 1338.88, "text": " So you can use this to make computations on secret values.", "tokens": [407, 291, 393, 764, 341, 281, 652, 2807, 763, 322, 4054, 4190, 13], "temperature": 0.0, "avg_logprob": -0.12106701668272628, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.0006630159332416952}, {"id": 180, "seek": 133888, "start": 1338.88, "end": 1350.4, "text": " From an abstract level, there is this new emerging field of anonymous engineering, so", "tokens": [3358, 364, 12649, 1496, 11, 456, 307, 341, 777, 14989, 2519, 295, 24932, 7043, 11, 370], "temperature": 0.0, "avg_logprob": -0.17899708449840546, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.0006677205674350262}, {"id": 181, "seek": 133888, "start": 1350.4, "end": 1358.4, "text": " we can compare it to other forms of engineering, so for example when we have software, we write", "tokens": [321, 393, 6794, 309, 281, 661, 6422, 295, 7043, 11, 370, 337, 1365, 562, 321, 362, 4722, 11, 321, 2464], "temperature": 0.0, "avg_logprob": -0.17899708449840546, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.0006677205674350262}, {"id": 182, "seek": 133888, "start": 1358.4, "end": 1368.0, "text": " these instructions that run on a CPU and execute, and when we do cryptography we try to use", "tokens": [613, 9415, 300, 1190, 322, 257, 13199, 293, 14483, 11, 293, 562, 321, 360, 9844, 5820, 321, 853, 281, 764], "temperature": 0.0, "avg_logprob": -0.17899708449840546, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.0006677205674350262}, {"id": 183, "seek": 136800, "start": 1368.0, "end": 1376.56, "text": " deep mathematical laws to try and create primitives or schemas, but the anonymous engineering is", "tokens": [2452, 18894, 6064, 281, 853, 293, 1884, 2886, 38970, 420, 22627, 296, 11, 457, 264, 24932, 7043, 307], "temperature": 0.0, "avg_logprob": -0.15066371330848108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.001039939932525158}, {"id": 184, "seek": 136800, "start": 1376.56, "end": 1381.72, "text": " actually using those different techniques like the ones I just showed, or other ones", "tokens": [767, 1228, 729, 819, 7512, 411, 264, 2306, 286, 445, 4712, 11, 420, 661, 2306], "temperature": 0.0, "avg_logprob": -0.15066371330848108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.001039939932525158}, {"id": 185, "seek": 136800, "start": 1381.72, "end": 1390.16, "text": " like VDF or hash function, public key, asymmetric crypto, et cetera, to try and come up with", "tokens": [411, 691, 35, 37, 420, 22019, 2445, 11, 1908, 2141, 11, 37277, 17475, 17240, 11, 1030, 11458, 11, 281, 853, 293, 808, 493, 365], "temperature": 0.0, "avg_logprob": -0.15066371330848108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.001039939932525158}, {"id": 186, "seek": 139016, "start": 1390.16, "end": 1399.68, "text": " schemas that enable certain forms of applications with invariance to hold.", "tokens": [22627, 296, 300, 9528, 1629, 6422, 295, 5821, 365, 33270, 719, 281, 1797, 13], "temperature": 0.0, "avg_logprob": -0.13956504644349563, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0006123690400272608}, {"id": 187, "seek": 139016, "start": 1399.68, "end": 1411.1200000000001, "text": " So let's give the first practical example, which is I have a set, I have a set of values,", "tokens": [407, 718, 311, 976, 264, 700, 8496, 1365, 11, 597, 307, 286, 362, 257, 992, 11, 286, 362, 257, 992, 295, 4190, 11], "temperature": 0.0, "avg_logprob": -0.13956504644349563, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0006123690400272608}, {"id": 188, "seek": 141112, "start": 1411.12, "end": 1421.2399999999998, "text": " and this set is just represented by a single hash, and I want to prove that my value is", "tokens": [293, 341, 992, 307, 445, 10379, 538, 257, 2167, 22019, 11, 293, 286, 528, 281, 7081, 300, 452, 2158, 307], "temperature": 0.0, "avg_logprob": -0.12201635042826335, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.0005355386529117823}, {"id": 189, "seek": 141112, "start": 1421.2399999999998, "end": 1430.32, "text": " in this set of objects, so to do that we have to construct something called a Merkel tree,", "tokens": [294, 341, 992, 295, 6565, 11, 370, 281, 360, 300, 321, 362, 281, 7690, 746, 1219, 257, 6124, 7124, 4230, 11], "temperature": 0.0, "avg_logprob": -0.12201635042826335, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.0005355386529117823}, {"id": 190, "seek": 141112, "start": 1430.32, "end": 1439.9599999999998, "text": " so let's say we have eight values, and what we do is we take two values at a time, so", "tokens": [370, 718, 311, 584, 321, 362, 3180, 4190, 11, 293, 437, 321, 360, 307, 321, 747, 732, 4190, 412, 257, 565, 11, 370], "temperature": 0.0, "avg_logprob": -0.12201635042826335, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.0005355386529117823}, {"id": 191, "seek": 143996, "start": 1439.96, "end": 1448.08, "text": " we take the first two values and we hash them together, so we get hash of them, and let's", "tokens": [321, 747, 264, 700, 732, 4190, 293, 321, 22019, 552, 1214, 11, 370, 321, 483, 22019, 295, 552, 11, 293, 718, 311], "temperature": 0.0, "avg_logprob": -0.15820529725816515, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.000577530066948384}, {"id": 192, "seek": 143996, "start": 1448.08, "end": 1457.56, "text": " represent that by A, and now let's hash the next two values, we get another node B, and", "tokens": [2906, 300, 538, 316, 11, 293, 586, 718, 311, 22019, 264, 958, 732, 4190, 11, 321, 483, 1071, 9984, 363, 11, 293], "temperature": 0.0, "avg_logprob": -0.15820529725816515, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.000577530066948384}, {"id": 193, "seek": 143996, "start": 1457.56, "end": 1466.28, "text": " then we hash them together and we get another node, so we get this kind of tree which the", "tokens": [550, 321, 22019, 552, 1214, 293, 321, 483, 1071, 9984, 11, 370, 321, 483, 341, 733, 295, 4230, 597, 264], "temperature": 0.0, "avg_logprob": -0.15820529725816515, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.000577530066948384}, {"id": 194, "seek": 146628, "start": 1466.28, "end": 1474.36, "text": " root R represents the entire set of values, and this is a simplified diagram, normally", "tokens": [5593, 497, 8855, 264, 2302, 992, 295, 4190, 11, 293, 341, 307, 257, 26335, 10686, 11, 5646], "temperature": 0.0, "avg_logprob": -0.11553282419840495, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0006356955855153501}, {"id": 195, "seek": 146628, "start": 1474.36, "end": 1482.32, "text": " these might be 32 layers, so two to the power of 32 values will be in the tree, so for example", "tokens": [613, 1062, 312, 8858, 7914, 11, 370, 732, 281, 264, 1347, 295, 8858, 4190, 486, 312, 294, 264, 4230, 11, 370, 337, 1365], "temperature": 0.0, "avg_logprob": -0.11553282419840495, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0006356955855153501}, {"id": 196, "seek": 146628, "start": 1482.32, "end": 1491.56, "text": " we had V1 and V2, and we hash them together and we get A, and likewise we have V1, V3", "tokens": [321, 632, 691, 16, 293, 691, 17, 11, 293, 321, 22019, 552, 1214, 293, 321, 483, 316, 11, 293, 32407, 321, 362, 691, 16, 11, 691, 18], "temperature": 0.0, "avg_logprob": -0.11553282419840495, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.0006356955855153501}, {"id": 197, "seek": 149156, "start": 1491.56, "end": 1499.8799999999999, "text": " and V4, we hash them together and we get B, and then we hash those together and we get", "tokens": [293, 691, 19, 11, 321, 22019, 552, 1214, 293, 321, 483, 363, 11, 293, 550, 321, 22019, 729, 1214, 293, 321, 483], "temperature": 0.0, "avg_logprob": -0.19596986417417173, "compression_ratio": 1.7635135135135136, "no_speech_prob": 0.0005526801105588675}, {"id": 198, "seek": 149156, "start": 1499.8799999999999, "end": 1507.48, "text": " AB, and then we do the same, we do the same on the right hand side and eventually we get", "tokens": [13838, 11, 293, 550, 321, 360, 264, 912, 11, 321, 360, 264, 912, 322, 264, 558, 1011, 1252, 293, 4728, 321, 483], "temperature": 0.0, "avg_logprob": -0.19596986417417173, "compression_ratio": 1.7635135135135136, "no_speech_prob": 0.0005526801105588675}, {"id": 199, "seek": 149156, "start": 1507.48, "end": 1519.36, "text": " to R, now if I have some value, any value, let's say, I don't know, V5, and let's say", "tokens": [281, 497, 11, 586, 498, 286, 362, 512, 2158, 11, 604, 2158, 11, 718, 311, 584, 11, 286, 500, 380, 458, 11, 691, 20, 11, 293, 718, 311, 584], "temperature": 0.0, "avg_logprob": -0.19596986417417173, "compression_ratio": 1.7635135135135136, "no_speech_prob": 0.0005526801105588675}, {"id": 200, "seek": 151936, "start": 1519.36, "end": 1529.7199999999998, "text": " we also have R, how can I prove to you that I have, that V5 is in R, well what I need", "tokens": [321, 611, 362, 497, 11, 577, 393, 286, 7081, 281, 291, 300, 286, 362, 11, 300, 691, 20, 307, 294, 497, 11, 731, 437, 286, 643], "temperature": 0.0, "avg_logprob": -0.09738806441978172, "compression_ratio": 1.4098360655737705, "no_speech_prob": 0.0006715236813761294}, {"id": 201, "seek": 151936, "start": 1529.7199999999998, "end": 1537.6399999999999, "text": " is a pathway to be able to get to R, so what does that pathway mean, so for example if", "tokens": [307, 257, 18590, 281, 312, 1075, 281, 483, 281, 497, 11, 370, 437, 775, 300, 18590, 914, 11, 370, 337, 1365, 498], "temperature": 0.0, "avg_logprob": -0.09738806441978172, "compression_ratio": 1.4098360655737705, "no_speech_prob": 0.0006715236813761294}, {"id": 202, "seek": 153764, "start": 1537.64, "end": 1553.1200000000001, "text": " I give you V6, then we can hash those together and we get C, and then if I give you D and", "tokens": [286, 976, 291, 691, 21, 11, 550, 321, 393, 22019, 729, 1214, 293, 321, 483, 383, 11, 293, 550, 498, 286, 976, 291, 413, 293], "temperature": 0.0, "avg_logprob": -0.12431628749055683, "compression_ratio": 1.84375, "no_speech_prob": 0.0007913314620964229}, {"id": 203, "seek": 153764, "start": 1553.1200000000001, "end": 1563.76, "text": " we hash those together, then we get CD, and then if I give you AB and we hash that with", "tokens": [321, 22019, 729, 1214, 11, 550, 321, 483, 6743, 11, 293, 550, 498, 286, 976, 291, 13838, 293, 321, 22019, 300, 365], "temperature": 0.0, "avg_logprob": -0.12431628749055683, "compression_ratio": 1.84375, "no_speech_prob": 0.0007913314620964229}, {"id": 204, "seek": 156376, "start": 1563.76, "end": 1571.96, "text": " CD, then we get R, and then I've proved to you that V5 is in R, using, instead of needing", "tokens": [6743, 11, 550, 321, 483, 497, 11, 293, 550, 286, 600, 14617, 281, 291, 300, 691, 20, 307, 294, 497, 11, 1228, 11, 2602, 295, 18006], "temperature": 0.0, "avg_logprob": -0.10546652475992839, "compression_ratio": 1.7004830917874396, "no_speech_prob": 0.0004896600730717182}, {"id": 205, "seek": 156376, "start": 1571.96, "end": 1576.8, "text": " to give you all of the items, I just give you a logarithmic number of items, I give", "tokens": [281, 976, 291, 439, 295, 264, 4754, 11, 286, 445, 976, 291, 257, 41473, 355, 13195, 1230, 295, 4754, 11, 286, 976], "temperature": 0.0, "avg_logprob": -0.10546652475992839, "compression_ratio": 1.7004830917874396, "no_speech_prob": 0.0004896600730717182}, {"id": 206, "seek": 156376, "start": 1576.8, "end": 1582.2, "text": " you a smaller number of items, so it's faster, it's used as a technique, but it can also", "tokens": [291, 257, 4356, 1230, 295, 4754, 11, 370, 309, 311, 4663, 11, 309, 311, 1143, 382, 257, 6532, 11, 457, 309, 393, 611], "temperature": 0.0, "avg_logprob": -0.10546652475992839, "compression_ratio": 1.7004830917874396, "no_speech_prob": 0.0004896600730717182}, {"id": 207, "seek": 156376, "start": 1582.2, "end": 1588.8, "text": " be used to create an anonymous inclusion proof, so we can anonymously prove that there is", "tokens": [312, 1143, 281, 1884, 364, 24932, 15874, 8177, 11, 370, 321, 393, 37293, 5098, 7081, 300, 456, 307], "temperature": 0.0, "avg_logprob": -0.10546652475992839, "compression_ratio": 1.7004830917874396, "no_speech_prob": 0.0004896600730717182}, {"id": 208, "seek": 158880, "start": 1588.8, "end": 1595.76, "text": " some value in R, and we can even encrypt that value, or we can prove other statements on", "tokens": [512, 2158, 294, 497, 11, 293, 321, 393, 754, 17972, 662, 300, 2158, 11, 420, 321, 393, 7081, 661, 12363, 322], "temperature": 0.0, "avg_logprob": -0.08969145405049227, "compression_ratio": 1.4146341463414633, "no_speech_prob": 0.0008898632950149477}, {"id": 209, "seek": 158880, "start": 1595.76, "end": 1602.96, "text": " that value, so I'll show you some code, how that looks like, maybe I can put this mic", "tokens": [300, 2158, 11, 370, 286, 603, 855, 291, 512, 3089, 11, 577, 300, 1542, 411, 11, 1310, 286, 393, 829, 341, 3123], "temperature": 0.0, "avg_logprob": -0.08969145405049227, "compression_ratio": 1.4146341463414633, "no_speech_prob": 0.0008898632950149477}, {"id": 210, "seek": 160296, "start": 1602.96, "end": 1629.96, "text": " somehow, like this, yeah that would be great, I need to speed up, but here is the proof,", "tokens": [6063, 11, 411, 341, 11, 1338, 300, 576, 312, 869, 11, 286, 643, 281, 3073, 493, 11, 457, 510, 307, 264, 8177, 11], "temperature": 0.0, "avg_logprob": -0.23498413297865126, "compression_ratio": 1.1, "no_speech_prob": 0.0006903425673954189}, {"id": 211, "seek": 162996, "start": 1629.96, "end": 1635.72, "text": " you see the Merkel route at the top, we're saying, and there's a pathway, we're proving", "tokens": [291, 536, 264, 38356, 7955, 412, 264, 1192, 11, 321, 434, 1566, 11, 293, 456, 311, 257, 18590, 11, 321, 434, 27221], "temperature": 0.0, "avg_logprob": -0.19001822873770471, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0008975316304713488}, {"id": 212, "seek": 162996, "start": 1635.72, "end": 1645.56, "text": " some values in the route, and then we're re-encrypting the value, and we're exporting it, and, yeah", "tokens": [512, 4190, 294, 264, 7955, 11, 293, 550, 321, 434, 319, 12, 22660, 627, 662, 278, 264, 2158, 11, 293, 321, 434, 44686, 309, 11, 293, 11, 1338], "temperature": 0.0, "avg_logprob": -0.19001822873770471, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0008975316304713488}, {"id": 213, "seek": 162996, "start": 1645.56, "end": 1652.92, "text": " hold it, yeah, and to compile it, and then I compile the proof, like this, so it's compiled,", "tokens": [1797, 309, 11, 1338, 11, 293, 281, 31413, 309, 11, 293, 550, 286, 31413, 264, 8177, 11, 411, 341, 11, 370, 309, 311, 36548, 11], "temperature": 0.0, "avg_logprob": -0.19001822873770471, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.0008975316304713488}, {"id": 214, "seek": 165292, "start": 1652.92, "end": 1669.64, "text": " and then I have, sorry it's here, I have the code which actually computes the Merkel tree", "tokens": [293, 550, 286, 362, 11, 2597, 309, 311, 510, 11, 286, 362, 264, 3089, 597, 767, 715, 1819, 264, 38356, 4230], "temperature": 0.0, "avg_logprob": -0.1881258010864258, "compression_ratio": 1.0987654320987654, "no_speech_prob": 0.00048223574412986636}, {"id": 215, "seek": 166964, "start": 1669.64, "end": 1683.2800000000002, "text": " with the value, but then also you see, includes the ZK proof code, and then creates the witnesses,", "tokens": [365, 264, 2158, 11, 457, 550, 611, 291, 536, 11, 5974, 264, 1176, 42, 8177, 3089, 11, 293, 550, 7829, 264, 20217, 11], "temperature": 0.0, "avg_logprob": -0.1779073987688337, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.0007201877888292074}, {"id": 216, "seek": 166964, "start": 1683.2800000000002, "end": 1689.8400000000001, "text": " and where is it, and then loads the circuit, and then creates, constructs the proof here,", "tokens": [293, 689, 307, 309, 11, 293, 550, 12668, 264, 9048, 11, 293, 550, 7829, 11, 7690, 82, 264, 8177, 510, 11], "temperature": 0.0, "avg_logprob": -0.1779073987688337, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.0007201877888292074}, {"id": 217, "seek": 166964, "start": 1689.8400000000001, "end": 1697.5200000000002, "text": " so now we get a proof, and then for the verifier we do here, we verify the proof, so we can", "tokens": [370, 586, 321, 483, 257, 8177, 11, 293, 550, 337, 264, 1306, 9902, 321, 360, 510, 11, 321, 16888, 264, 8177, 11, 370, 321, 393], "temperature": 0.0, "avg_logprob": -0.1779073987688337, "compression_ratio": 1.8300653594771241, "no_speech_prob": 0.0007201877888292074}, {"id": 218, "seek": 169752, "start": 1697.52, "end": 1723.4, "text": " just run that, like so, ah, okay, no internet, but anyway, let's not worry about that, okay,", "tokens": [445, 1190, 300, 11, 411, 370, 11, 3716, 11, 1392, 11, 572, 4705, 11, 457, 4033, 11, 718, 311, 406, 3292, 466, 300, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.23686639467875162, "compression_ratio": 1.1794871794871795, "no_speech_prob": 0.0006415445823222399}, {"id": 219, "seek": 172340, "start": 1723.4, "end": 1734.16, "text": " so then we can use that to create anonymous voting, so how do we do that, well, we say", "tokens": [370, 550, 321, 393, 764, 300, 281, 1884, 24932, 10419, 11, 370, 577, 360, 321, 360, 300, 11, 731, 11, 321, 584], "temperature": 0.0, "avg_logprob": -0.19015002250671387, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.0005788827547803521}, {"id": 220, "seek": 172340, "start": 1734.16, "end": 1743.64, "text": " on the, we create, when we create, constructs the people who are going to vote, we create", "tokens": [322, 264, 11, 321, 1884, 11, 562, 321, 1884, 11, 7690, 82, 264, 561, 567, 366, 516, 281, 4740, 11, 321, 1884], "temperature": 0.0, "avg_logprob": -0.19015002250671387, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.0005788827547803521}, {"id": 221, "seek": 172340, "start": 1743.64, "end": 1748.88, "text": " something like a coin, and there's like a, you generate a random serial number, that's", "tokens": [746, 411, 257, 11464, 11, 293, 456, 311, 411, 257, 11, 291, 8460, 257, 4974, 17436, 1230, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.19015002250671387, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.0005788827547803521}, {"id": 222, "seek": 174888, "start": 1748.88, "end": 1753.72, "text": " private, and you just create this commitment to it, and then when you want to use up your", "tokens": [4551, 11, 293, 291, 445, 1884, 341, 8371, 281, 309, 11, 293, 550, 562, 291, 528, 281, 764, 493, 428], "temperature": 0.0, "avg_logprob": -0.16034527414852812, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.0015529306838288903}, {"id": 223, "seek": 174888, "start": 1753.72, "end": 1761.2, "text": " vote, then you burn the coin, and you make that public, that secret value S, which means", "tokens": [4740, 11, 550, 291, 5064, 264, 11464, 11, 293, 291, 652, 300, 1908, 11, 300, 4054, 2158, 318, 11, 597, 1355], "temperature": 0.0, "avg_logprob": -0.16034527414852812, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.0015529306838288903}, {"id": 224, "seek": 174888, "start": 1761.2, "end": 1767.5200000000002, "text": " you can't ever generate the same thing again, because that value is deterministic, and then", "tokens": [291, 393, 380, 1562, 8460, 264, 912, 551, 797, 11, 570, 300, 2158, 307, 15957, 3142, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.16034527414852812, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.0015529306838288903}, {"id": 225, "seek": 174888, "start": 1767.5200000000002, "end": 1774.16, "text": " you just, you prove that there is a C, that's the hash of S, and that C is in the tree, using", "tokens": [291, 445, 11, 291, 7081, 300, 456, 307, 257, 383, 11, 300, 311, 264, 22019, 295, 318, 11, 293, 300, 383, 307, 294, 264, 4230, 11, 1228], "temperature": 0.0, "avg_logprob": -0.16034527414852812, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.0015529306838288903}, {"id": 226, "seek": 177416, "start": 1774.16, "end": 1780.3600000000001, "text": " the previous inclusion proof, and so how do we change that to do anonymous payments, well,", "tokens": [264, 3894, 15874, 8177, 11, 293, 370, 577, 360, 321, 1319, 300, 281, 360, 24932, 14348, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.17296097013685438, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0014186847256496549}, {"id": 227, "seek": 177416, "start": 1780.3600000000001, "end": 1787.4, "text": " it's very similar, except now this coin, not just being a hash of S, is also a hash of", "tokens": [309, 311, 588, 2531, 11, 3993, 586, 341, 11464, 11, 406, 445, 885, 257, 22019, 295, 318, 11, 307, 611, 257, 22019, 295], "temperature": 0.0, "avg_logprob": -0.17296097013685438, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0014186847256496549}, {"id": 228, "seek": 177416, "start": 1787.4, "end": 1799.16, "text": " value for the coin, so it's two and four, which are owned by Alice, and then when we", "tokens": [2158, 337, 264, 11464, 11, 370, 309, 311, 732, 293, 1451, 11, 597, 366, 11684, 538, 16004, 11, 293, 550, 562, 321], "temperature": 0.0, "avg_logprob": -0.17296097013685438, "compression_ratio": 1.4802259887005649, "no_speech_prob": 0.0014186847256496549}, {"id": 229, "seek": 179916, "start": 1799.16, "end": 1805.0800000000002, "text": " want to spend that coin that Alice has, then we reveal those serial numbers, and we can", "tokens": [528, 281, 3496, 300, 11464, 300, 16004, 575, 11, 550, 321, 10658, 729, 17436, 3547, 11, 293, 321, 393], "temperature": 0.0, "avg_logprob": -0.12302425108760236, "compression_ratio": 1.7688442211055277, "no_speech_prob": 0.0018416654784232378}, {"id": 230, "seek": 179916, "start": 1805.0800000000002, "end": 1815.8000000000002, "text": " compute the partial homomorphic encryption of the two and the four, and we create this", "tokens": [14722, 264, 14641, 3655, 32702, 299, 29575, 295, 264, 732, 293, 264, 1451, 11, 293, 321, 1884, 341], "temperature": 0.0, "avg_logprob": -0.12302425108760236, "compression_ratio": 1.7688442211055277, "no_speech_prob": 0.0018416654784232378}, {"id": 231, "seek": 179916, "start": 1815.8000000000002, "end": 1823.3600000000001, "text": " transaction with two outputs, and we create the two new coins, like we showed before in", "tokens": [14425, 365, 732, 23930, 11, 293, 321, 1884, 264, 732, 777, 13561, 11, 411, 321, 4712, 949, 294], "temperature": 0.0, "avg_logprob": -0.12302425108760236, "compression_ratio": 1.7688442211055277, "no_speech_prob": 0.0018416654784232378}, {"id": 232, "seek": 179916, "start": 1823.3600000000001, "end": 1827.8400000000001, "text": " the previous slide, but we also want to prove that the value that goes into a transaction", "tokens": [264, 3894, 4137, 11, 457, 321, 611, 528, 281, 7081, 300, 264, 2158, 300, 1709, 666, 257, 14425], "temperature": 0.0, "avg_logprob": -0.12302425108760236, "compression_ratio": 1.7688442211055277, "no_speech_prob": 0.0018416654784232378}, {"id": 233, "seek": 182784, "start": 1827.84, "end": 1834.08, "text": " is the same as the value that goes out, and we do that using homomorphic encryption, like", "tokens": [307, 264, 912, 382, 264, 2158, 300, 1709, 484, 11, 293, 321, 360, 300, 1228, 3655, 32702, 299, 29575, 11, 411], "temperature": 0.0, "avg_logprob": -0.09455236707414899, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.0010460523189976811}, {"id": 234, "seek": 182784, "start": 1834.08, "end": 1840.56, "text": " we showed earlier, and you see here, we've got the two plus the four is equal to the", "tokens": [321, 4712, 3071, 11, 293, 291, 536, 510, 11, 321, 600, 658, 264, 732, 1804, 264, 1451, 307, 2681, 281, 264], "temperature": 0.0, "avg_logprob": -0.09455236707414899, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.0010460523189976811}, {"id": 235, "seek": 182784, "start": 1840.56, "end": 1849.8, "text": " three plus the three, so there we go, then we can do atomic swaps with different types", "tokens": [1045, 1804, 264, 1045, 11, 370, 456, 321, 352, 11, 550, 321, 393, 360, 22275, 1693, 2382, 365, 819, 3467], "temperature": 0.0, "avg_logprob": -0.09455236707414899, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.0010460523189976811}, {"id": 236, "seek": 184980, "start": 1849.8, "end": 1859.52, "text": " of assets, so Alice constructs her input and one output sending to Bob, Bob takes the transaction,", "tokens": [295, 9769, 11, 370, 16004, 7690, 82, 720, 4846, 293, 472, 5598, 7750, 281, 6085, 11, 6085, 2516, 264, 14425, 11], "temperature": 0.0, "avg_logprob": -0.13039016723632812, "compression_ratio": 1.8211920529801324, "no_speech_prob": 0.0008733171853236854}, {"id": 237, "seek": 184980, "start": 1859.52, "end": 1865.3999999999999, "text": " adds his input and one output sending to Alice, Bob also signs the transaction, Bob signs", "tokens": [10860, 702, 4846, 293, 472, 5598, 7750, 281, 16004, 11, 6085, 611, 7880, 264, 14425, 11, 6085, 7880], "temperature": 0.0, "avg_logprob": -0.13039016723632812, "compression_ratio": 1.8211920529801324, "no_speech_prob": 0.0008733171853236854}, {"id": 238, "seek": 184980, "start": 1865.3999999999999, "end": 1872.84, "text": " and sends the finalised transaction, we can also do something where you have a network", "tokens": [293, 14790, 264, 2572, 2640, 14425, 11, 321, 393, 611, 360, 746, 689, 291, 362, 257, 3209], "temperature": 0.0, "avg_logprob": -0.13039016723632812, "compression_ratio": 1.8211920529801324, "no_speech_prob": 0.0008733171853236854}, {"id": 239, "seek": 187284, "start": 1872.84, "end": 1885.72, "text": " with anonymous spam protection, so you have a sharing scheme, and normally, so basically", "tokens": [365, 24932, 24028, 6334, 11, 370, 291, 362, 257, 5414, 12232, 11, 293, 5646, 11, 370, 1936], "temperature": 0.0, "avg_logprob": -0.19613026512993706, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.0007753008394502103}, {"id": 240, "seek": 187284, "start": 1885.72, "end": 1893.12, "text": " with this, you have this evaluation, I'm going to go fast now, and when you want to send", "tokens": [365, 341, 11, 291, 362, 341, 13344, 11, 286, 478, 516, 281, 352, 2370, 586, 11, 293, 562, 291, 528, 281, 2845], "temperature": 0.0, "avg_logprob": -0.19613026512993706, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.0007753008394502103}, {"id": 241, "seek": 189312, "start": 1893.12, "end": 1902.8799999999999, "text": " a message you compute the message M, you compute this X and Y, and if in one epoch, you again", "tokens": [257, 3636, 291, 14722, 264, 3636, 376, 11, 291, 14722, 341, 1783, 293, 398, 11, 293, 498, 294, 472, 30992, 339, 11, 291, 797], "temperature": 0.0, "avg_logprob": -0.14918477005428737, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.0008633331162855029}, {"id": 242, "seek": 189312, "start": 1902.8799999999999, "end": 1910.4799999999998, "text": " create another message, so you're spamming the network, then you get these values, which", "tokens": [1884, 1071, 3636, 11, 370, 291, 434, 24028, 2810, 264, 3209, 11, 550, 291, 483, 613, 4190, 11, 597], "temperature": 0.0, "avg_logprob": -0.14918477005428737, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.0008633331162855029}, {"id": 243, "seek": 189312, "start": 1910.4799999999998, "end": 1918.76, "text": " using the equation on the first line, you can compute what A0 is, and A0 is actually", "tokens": [1228, 264, 5367, 322, 264, 700, 1622, 11, 291, 393, 14722, 437, 316, 15, 307, 11, 293, 316, 15, 307, 767], "temperature": 0.0, "avg_logprob": -0.14918477005428737, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.0008633331162855029}, {"id": 244, "seek": 191876, "start": 1918.76, "end": 1923.72, "text": " your secret key, and so then that means that whenever you try to send another message to", "tokens": [428, 4054, 2141, 11, 293, 370, 550, 300, 1355, 300, 5699, 291, 853, 281, 2845, 1071, 3636, 281], "temperature": 0.0, "avg_logprob": -0.13020511234507842, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0010602272814139724}, {"id": 245, "seek": 191876, "start": 1923.72, "end": 1929.36, "text": " the network in any other epoch, now you've lost your account, you can never send, but", "tokens": [264, 3209, 294, 604, 661, 30992, 339, 11, 586, 291, 600, 2731, 428, 2696, 11, 291, 393, 1128, 2845, 11, 457], "temperature": 0.0, "avg_logprob": -0.13020511234507842, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0010602272814139724}, {"id": 246, "seek": 191876, "start": 1929.36, "end": 1939.16, "text": " it also means that messages are unlinkable, so you have unlinkability, we can do anonymous", "tokens": [309, 611, 1355, 300, 7897, 366, 517, 22473, 712, 11, 370, 291, 362, 517, 22473, 2310, 11, 321, 393, 360, 24932], "temperature": 0.0, "avg_logprob": -0.13020511234507842, "compression_ratio": 1.6358024691358024, "no_speech_prob": 0.0010602272814139724}, {"id": 247, "seek": 193916, "start": 1939.16, "end": 1949.24, "text": " auctions using MPC, so Alice has bids $4, Bob bids $6, they do a computation, they compute", "tokens": [1609, 3916, 1228, 376, 12986, 11, 370, 16004, 575, 272, 3742, 1848, 19, 11, 6085, 272, 3742, 1848, 21, 11, 436, 360, 257, 24903, 11, 436, 14722], "temperature": 0.0, "avg_logprob": -0.18065201668512254, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0012476571137085557}, {"id": 248, "seek": 193916, "start": 1949.24, "end": 1961.8000000000002, "text": " who's the winner, we can do anonymous WikiLeaks, so I have this thing.jpeg, and then there's", "tokens": [567, 311, 264, 8507, 11, 321, 393, 360, 24932, 35892, 11020, 5461, 11, 370, 286, 362, 341, 551, 13, 73, 494, 70, 11, 293, 550, 456, 311], "temperature": 0.0, "avg_logprob": -0.18065201668512254, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0012476571137085557}, {"id": 249, "seek": 193916, "start": 1961.8000000000002, "end": 1967.44, "text": " a protocol where, you know, I've said that this is, I've made some claim about what this", "tokens": [257, 10336, 689, 11, 291, 458, 11, 286, 600, 848, 300, 341, 307, 11, 286, 600, 1027, 512, 3932, 466, 437, 341], "temperature": 0.0, "avg_logprob": -0.18065201668512254, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0012476571137085557}, {"id": 250, "seek": 196744, "start": 1967.44, "end": 1974.72, "text": " file is, and it selects a random chunk from the file, and then we verify, yep, that file", "tokens": [3991, 307, 11, 293, 309, 3048, 82, 257, 4974, 16635, 490, 264, 3991, 11, 293, 550, 321, 16888, 11, 18633, 11, 300, 3991], "temperature": 0.0, "avg_logprob": -0.13023825867535316, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.0010431421687826514}, {"id": 251, "seek": 196744, "start": 1974.72, "end": 1980.3600000000001, "text": " is what it claims it is, and then there's an auction on the remaining chunks, and the", "tokens": [307, 437, 309, 9441, 309, 307, 11, 293, 550, 456, 311, 364, 24139, 322, 264, 8877, 24004, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.13023825867535316, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.0010431421687826514}, {"id": 252, "seek": 196744, "start": 1980.3600000000001, "end": 1994.3200000000002, "text": " winners of those auctions decrypt the remaining parts, and then the file is decrypted, so", "tokens": [17193, 295, 729, 1609, 3916, 979, 627, 662, 264, 8877, 3166, 11, 293, 550, 264, 3991, 307, 979, 627, 25383, 11, 370], "temperature": 0.0, "avg_logprob": -0.13023825867535316, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.0010431421687826514}, {"id": 253, "seek": 199432, "start": 1994.32, "end": 2010.08, "text": " if you go to doc.fi website, and you go to the docs section, we have, where is it?", "tokens": [498, 291, 352, 281, 3211, 13, 13325, 3144, 11, 293, 291, 352, 281, 264, 45623, 3541, 11, 321, 362, 11, 689, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.2072341271809169, "compression_ratio": 1.4621848739495797, "no_speech_prob": 0.000452078616945073}, {"id": 254, "seek": 199432, "start": 2010.08, "end": 2016.84, "text": " So go to the website, and there's also a blog called Insights, we have our own peer-to-peer", "tokens": [407, 352, 281, 264, 3144, 11, 293, 456, 311, 611, 257, 6968, 1219, 9442, 5761, 11, 321, 362, 527, 1065, 15108, 12, 1353, 12, 494, 260], "temperature": 0.0, "avg_logprob": -0.2072341271809169, "compression_ratio": 1.4621848739495797, "no_speech_prob": 0.000452078616945073}, {"id": 255, "seek": 201684, "start": 2016.84, "end": 2025.08, "text": " anonymous chat, there's no concept of identities, so if you go to the doc, there's a section", "tokens": [24932, 5081, 11, 456, 311, 572, 3410, 295, 24239, 11, 370, 498, 291, 352, 281, 264, 3211, 11, 456, 311, 257, 3541], "temperature": 0.0, "avg_logprob": -0.1454116762900839, "compression_ratio": 1.3863636363636365, "no_speech_prob": 0.0006236211629584432}, {"id": 256, "seek": 201684, "start": 2025.08, "end": 2036.0, "text": " called IRCD, and we have a weekly meeting every Monday, but also there's a crypto section,", "tokens": [1219, 16486, 16508, 11, 293, 321, 362, 257, 12460, 3440, 633, 8138, 11, 457, 611, 456, 311, 257, 17240, 3541, 11], "temperature": 0.0, "avg_logprob": -0.1454116762900839, "compression_ratio": 1.3863636363636365, "no_speech_prob": 0.0006236211629584432}, {"id": 257, "seek": 203600, "start": 2036.0, "end": 2054.76, "text": " ZCAS section, testnet guide, you know, we're looking for good devs as well, so, conclusion,", "tokens": [1176, 34, 3160, 3541, 11, 1500, 7129, 5934, 11, 291, 458, 11, 321, 434, 1237, 337, 665, 1905, 82, 382, 731, 11, 370, 11, 10063, 11], "temperature": 0.0, "avg_logprob": -0.2870613733927409, "compression_ratio": 1.058139534883721, "no_speech_prob": 0.0004371295217424631}, {"id": 258, "seek": 205476, "start": 2054.76, "end": 2067.0400000000004, "text": " so, we missed the mobile and the desktop, will we also miss the crypto renaissance, this", "tokens": [370, 11, 321, 6721, 264, 6013, 293, 264, 14502, 11, 486, 321, 611, 1713, 264, 17240, 319, 629, 14431, 11, 341], "temperature": 0.0, "avg_logprob": -0.18667159447303186, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.000837014289572835}, {"id": 259, "seek": 205476, "start": 2067.0400000000004, "end": 2073.7200000000003, "text": " is like our best chance to capture value for development, like, this is the biggest problem", "tokens": [307, 411, 527, 1151, 2931, 281, 7983, 2158, 337, 3250, 11, 411, 11, 341, 307, 264, 3880, 1154], "temperature": 0.0, "avg_logprob": -0.18667159447303186, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.000837014289572835}, {"id": 260, "seek": 205476, "start": 2073.7200000000003, "end": 2078.5600000000004, "text": " with creative people, is they create value, they don't necessarily have a way to capture", "tokens": [365, 5880, 561, 11, 307, 436, 1884, 2158, 11, 436, 500, 380, 4725, 362, 257, 636, 281, 7983], "temperature": 0.0, "avg_logprob": -0.18667159447303186, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.000837014289572835}, {"id": 261, "seek": 207856, "start": 2078.56, "end": 2086.84, "text": " some of that value back, we now have techniques to do that, we were promised this future of", "tokens": [512, 295, 300, 2158, 646, 11, 321, 586, 362, 7512, 281, 360, 300, 11, 321, 645, 10768, 341, 2027, 295], "temperature": 0.0, "avg_logprob": -0.17633501688639322, "compression_ratio": 1.4108527131782946, "no_speech_prob": 0.000921917031519115}, {"id": 262, "seek": 207856, "start": 2086.84, "end": 2096.92, "text": " computing in the 90s, you know, the interface is, whatever happened to that, never got it,", "tokens": [15866, 294, 264, 4289, 82, 11, 291, 458, 11, 264, 9226, 307, 11, 2035, 2011, 281, 300, 11, 1128, 658, 309, 11], "temperature": 0.0, "avg_logprob": -0.17633501688639322, "compression_ratio": 1.4108527131782946, "no_speech_prob": 0.000921917031519115}, {"id": 263, "seek": 209692, "start": 2096.92, "end": 2108.88, "text": " and now, our phones, they're filled with all these dog shit, electron apps, like, that's", "tokens": [293, 586, 11, 527, 10216, 11, 436, 434, 6412, 365, 439, 613, 3000, 4611, 11, 6084, 7733, 11, 411, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.25758131257780303, "compression_ratio": 1.5955555555555556, "no_speech_prob": 0.001129227690398693}, {"id": 264, "seek": 209692, "start": 2108.88, "end": 2114.7200000000003, "text": " a failed paradigm, we're literally trying to copy Silicon Valley, I'm optimistic that", "tokens": [257, 7612, 24709, 11, 321, 434, 3736, 1382, 281, 5055, 25351, 10666, 11, 286, 478, 19397, 300], "temperature": 0.0, "avg_logprob": -0.25758131257780303, "compression_ratio": 1.5955555555555556, "no_speech_prob": 0.001129227690398693}, {"id": 265, "seek": 209692, "start": 2114.7200000000003, "end": 2120.08, "text": " now people are actually going, actually, no, Linux is different, we're distinct, we have", "tokens": [586, 561, 366, 767, 516, 11, 767, 11, 572, 11, 18734, 307, 819, 11, 321, 434, 10644, 11, 321, 362], "temperature": 0.0, "avg_logprob": -0.25758131257780303, "compression_ratio": 1.5955555555555556, "no_speech_prob": 0.001129227690398693}, {"id": 266, "seek": 209692, "start": 2120.08, "end": 2125.92, "text": " our own energy, but we need to rediscover that, we need to create something that's new, because", "tokens": [527, 1065, 2281, 11, 457, 321, 643, 281, 2182, 40080, 300, 11, 321, 643, 281, 1884, 746, 300, 311, 777, 11, 570], "temperature": 0.0, "avg_logprob": -0.25758131257780303, "compression_ratio": 1.5955555555555556, "no_speech_prob": 0.001129227690398693}, {"id": 267, "seek": 212592, "start": 2125.92, "end": 2131.76, "text": " their model is about capturing users under surveillance capitalism, to extract value", "tokens": [641, 2316, 307, 466, 23384, 5022, 833, 18475, 19704, 11, 281, 8947, 2158], "temperature": 0.0, "avg_logprob": -0.14392021555959442, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.0009808418108150363}, {"id": 268, "seek": 212592, "start": 2131.76, "end": 2137.4, "text": " from them, our model is we create infrastructure, we create economic value for our networks", "tokens": [490, 552, 11, 527, 2316, 307, 321, 1884, 6896, 11, 321, 1884, 4836, 2158, 337, 527, 9590], "temperature": 0.0, "avg_logprob": -0.14392021555959442, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.0009808418108150363}, {"id": 269, "seek": 212592, "start": 2137.4, "end": 2146.2000000000003, "text": " to become strong, and as a movement grow powerful, it's a different way of thinking, open source", "tokens": [281, 1813, 2068, 11, 293, 382, 257, 3963, 1852, 4005, 11, 309, 311, 257, 819, 636, 295, 1953, 11, 1269, 4009], "temperature": 0.0, "avg_logprob": -0.14392021555959442, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.0009808418108150363}, {"id": 270, "seek": 212592, "start": 2146.2000000000003, "end": 2152.32, "text": " was a mistake, you know, like, we discarded the beating heart of what gave us energy,", "tokens": [390, 257, 6146, 11, 291, 458, 11, 411, 11, 321, 45469, 264, 13497, 1917, 295, 437, 2729, 505, 2281, 11], "temperature": 0.0, "avg_logprob": -0.14392021555959442, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.0009808418108150363}, {"id": 271, "seek": 215232, "start": 2152.32, "end": 2157.84, "text": " so we need to conceptualize the computing paradigm, so, you know, let's build something", "tokens": [370, 321, 643, 281, 24106, 1125, 264, 15866, 24709, 11, 370, 11, 291, 458, 11, 718, 311, 1322, 746], "temperature": 0.0, "avg_logprob": -0.20934096803056432, "compression_ratio": 1.3643410852713178, "no_speech_prob": 0.0004213250649627298}, {"id": 272, "seek": 215232, "start": 2157.84, "end": 2162.92, "text": " new, like, actually inventive, so if I have a couple of minutes, I'm actually just going", "tokens": [777, 11, 411, 11, 767, 7962, 488, 11, 370, 498, 286, 362, 257, 1916, 295, 2077, 11, 286, 478, 767, 445, 516], "temperature": 0.0, "avg_logprob": -0.20934096803056432, "compression_ratio": 1.3643410852713178, "no_speech_prob": 0.0004213250649627298}, {"id": 273, "seek": 216292, "start": 2162.92, "end": 2192.8, "text": " to show our website, so I can show where to find docs, okay, I guess there's no, no,", "tokens": [281, 855, 527, 3144, 11, 370, 286, 393, 855, 689, 281, 915, 45623, 11, 1392, 11, 286, 2041, 456, 311, 572, 11, 572, 11], "temperature": 0.0, "avg_logprob": -0.38292268344334196, "compression_ratio": 1.0909090909090908, "no_speech_prob": 0.00038744803168810904}, {"id": 274, "seek": 219280, "start": 2192.8, "end": 2200.98, "text": " I'm not there, come on to it, go into it.", "tokens": [286, 478, 406, 456, 11, 808, 322, 281, 309, 11, 352, 666, 309, 13], "temperature": 1.0, "avg_logprob": -1.1774523209552377, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.0004524335090536624}, {"id": 275, "seek": 219280, "start": 2200.98, "end": 2219.44, "text": " All right, let's give a tour of how docsos, so here, there's book, I talked about peer-to-peer", "tokens": [1057, 558, 11, 718, 311, 976, 257, 3512, 295, 577, 45623, 329, 11, 370, 510, 11, 456, 311, 1446, 11, 286, 2825, 466, 15108, 12, 1353, 12, 494, 260], "temperature": 1.0, "avg_logprob": -1.1774523209552377, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.0004524335090536624}, {"id": 276, "seek": 221944, "start": 2219.44, "end": 2224.44, "text": " distributed IRCD, you see there, instructions.", "tokens": [12631, 16486, 34, 35, 11, 291, 536, 456, 11, 9415, 13], "temperature": 0.0, "avg_logprob": -0.432934824625651, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.24584047496318817}, {"id": 277, "seek": 221944, "start": 2231.0, "end": 2233.52, "text": " There's also crypto section.", "tokens": [821, 311, 611, 17240, 3541, 13], "temperature": 0.0, "avg_logprob": -0.432934824625651, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.24584047496318817}, {"id": 278, "seek": 221944, "start": 2235.88, "end": 2236.7200000000003, "text": " You see here.", "tokens": [509, 536, 510, 13], "temperature": 0.0, "avg_logprob": -0.432934824625651, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.24584047496318817}, {"id": 279, "seek": 221944, "start": 2238.0, "end": 2241.6, "text": " And also implementations.", "tokens": [400, 611, 4445, 763, 13], "temperature": 0.0, "avg_logprob": -0.432934824625651, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.24584047496318817}, {"id": 280, "seek": 221944, "start": 2242.64, "end": 2245.36, "text": " There's a ZK explainer and also implementations", "tokens": [821, 311, 257, 1176, 42, 2903, 260, 293, 611, 4445, 763], "temperature": 0.0, "avg_logprob": -0.432934824625651, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.24584047496318817}, {"id": 281, "seek": 224536, "start": 2245.36, "end": 2247.6800000000003, "text": " of most of the major ZK algos.", "tokens": [295, 881, 295, 264, 2563, 1176, 42, 3501, 329, 13], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 282, "seek": 224536, "start": 2250.7200000000003, "end": 2254.48, "text": " And also, probably more interesting for you guys,", "tokens": [400, 611, 11, 1391, 544, 1880, 337, 291, 1074, 11], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 283, "seek": 224536, "start": 2254.48, "end": 2259.48, "text": " the ZCAS stuff, like how anonymous voting works", "tokens": [264, 1176, 34, 3160, 1507, 11, 411, 577, 24932, 10419, 1985], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 284, "seek": 224536, "start": 2259.48, "end": 2261.6200000000003, "text": " and also anonymous payments.", "tokens": [293, 611, 24932, 14348, 13], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 285, "seek": 224536, "start": 2264.8, "end": 2268.08, "text": " All right, I just showed the distributed chat.", "tokens": [1057, 558, 11, 286, 445, 4712, 264, 12631, 5081, 13], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 286, "seek": 224536, "start": 2269.0, "end": 2270.56, "text": " You just run a daemon like that.", "tokens": [509, 445, 1190, 257, 1120, 36228, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.26619659644969995, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.00040101134800352156}, {"id": 287, "seek": 227056, "start": 2270.56, "end": 2275.56, "text": " Open my WeChat, bam, here we are.", "tokens": [7238, 452, 492, 41683, 11, 18132, 11, 510, 321, 366, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 288, "seek": 227056, "start": 2279.08, "end": 2282.24, "text": " There's encrypted channels as well.", "tokens": [821, 311, 36663, 9235, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 289, "seek": 227056, "start": 2282.24, "end": 2285.0, "text": " You just set in your config file an encrypted channel", "tokens": [509, 445, 992, 294, 428, 6662, 3991, 364, 36663, 2269], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 290, "seek": 227056, "start": 2285.0, "end": 2286.88, "text": " and then we have a chat.", "tokens": [293, 550, 321, 362, 257, 5081, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 291, "seek": 227056, "start": 2286.88, "end": 2289.16, "text": " See I can chat with other people.", "tokens": [3008, 286, 393, 5081, 365, 661, 561, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 292, "seek": 227056, "start": 2289.16, "end": 2290.64, "text": " So, yep, that's it.", "tokens": [407, 11, 18633, 11, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 293, "seek": 227056, "start": 2290.64, "end": 2292.0, "text": " That's my talk.", "tokens": [663, 311, 452, 751, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 294, "seek": 227056, "start": 2292.0, "end": 2293.08, "text": " Thanks very much.", "tokens": [2561, 588, 709, 13], "temperature": 0.0, "avg_logprob": -0.2595453751392854, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.00028903892962262034}, {"id": 295, "seek": 229308, "start": 2293.08, "end": 2300.08, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.4737131992975871, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.00030528707429766655}], "language": "en"}