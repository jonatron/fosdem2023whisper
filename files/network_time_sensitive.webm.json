{"text": " Hi. Welcome to my talk. So you want to build a deterministic networking system, a gentle introduction to time-sensitive networking just out of interest. How many of you have heard of TSN or time-sensitive networking so far? That's quite a few for a networking session. That's great. How many of you have already worked with that? Not so many. Okay. You will after that talk. Yeah. Who am I? I think I'm a former system engineer. I worked a lot with time-sensitive networking and its predecessors. I also took part in standardization. So I also did some of that. And since last summer, I worked at a kernel developer at Pengatronics. That's a German Linux consulting and support company. We have roughly 7,600 patches in the kernel. And we also do consulting for real-time networking amongst many other stuff. And by the way, we're hiring, of course. Now, to what we will look into today, we will look into applications. I will give you some examples why you would probably want to do networking over or real-time data transport over networking and what the implications of that is, what the requirements of these applications are. We will look into the basic building blocks. So sorry for the folks who already know about that. And we will talk a bit about which Linux user space and kernel components are used in building these applications. And I will sum up the state of the union a bit. And then, just as an announcement in advance, there are some bonus slides where I will give some more details and some references to open-source projects already working with TSM. So if you're interested in that, just download the slides from the penta and, well, check out the links. And I also gave an example of how to basically glue together a stage box, so a transport system for audio data over the network. I won't make that into the talk because it has been shortened to half an hour. So the example I will focus on today is audio video bridging. So if you want to transport real-time data over a network for an application just as this talk, you want to have as low jitter buff or as small jitter buff as possible to reduce latency in the system because if you transport data over a traditional network, packets could get dropped. So you have to resend them or you have to make sure that somehow, magically, interfering traffic doesn't do you any harm. And that usually involves quite large jitter buffers up to several seconds. And if I talk now and you hear me from stage and you hear me from the PA four seconds after that, that would be quite annoying. So you want to cut that down to as low as possible transmission latency, overall end-to-end latency. Of course, for TSN, which started as audio video bridging or AVB as a standard, they came across the fact that this technology could also be useful for quite some other applications. Most of the customers do like machine control stuff with that. So if you have a large production line and you want to transmit data between your PLC and your server drives or your robot arms and stuff, you also want to make sure that your control data arrives in time at the actor or your sensor data is read in within a certain point in time. And that's quite important to keep that timing. Same holds, of course, for aerospace and automotive and railways and stuff. I won't go into these applications today because we're, as I said, short on time. The first requirement of said applications is that you need to establish a common time base in the network. That's due to the fact that while measuring time in computers, it's basically hooking up a hardware counter to a crystal oscillator. These crystal oscillators tend to have frequency drift over time, especially with temperature. And due to the different switch on points in time, you also have quite large offsets. So if you start one device, say at 12 o'clock and the other at 1 p.m., they have one hour of offset in there. So you want to make sure that all your network devices have a common meaning or a common sense of time passing and a common sense of what time it is. Because lots of scheduling decisions for networking traffic may depend on timing. Also, for some applications as the audio example, you also would like to regenerate your audio sampling clocks. So basically in order not to introduce any additional degradation in audio quality, you want to make sure that your sampling clocks of your ADC and DAC run basically in lockstep. And that is why you want to make sure that your time is distributed evenly. And the way that this is done usually in networks is just shown basically in this old style picture. You elect a so-called master clock. So basically that's the best clock reference in your network or the most stable clock reference in your network. And then basically you compare all other clocks to that clock reference and they have to adjust their local time for that reference time. It's basically just as those three gentlemen do in that picture. I like that comparison because you find a lot of analogies and the standards to just the way that works with like pocket watches. And if you look into that, you will find that basic idea quite useful to keep in mind. Now the other thing we want to have guaranteed is as I already said bound and transmission latency. So if we go across the transmission of a data stream in the network, so that's what the standard calls a talker at the left. And that's what the standard calls bridges. Usually as we're dealing with layer two, that's ethnic switches. And in the right, that's what the standard calls a listener. You also call it a source and a sync. But the standard talks about talkers and listeners. And the packet goes from bridge to bridge to along its pass across the network. And each switch basically a bridge has an ingress queue and a switch fabric and an egress queue. That's due to the fact that you can only transmit one packet out of a certain network port at a time. You can't just if another packet at another port arrives for that destination port, you have to store it. And you have to wait until the last transmission is done. And then you can transmit the next packet. And this introduces what's called the residence time in each switch. So even if you have a perfect pass through through network without any additional interfering traffic, you add a little time at each step, your payload packet travels through the network. So if our audio starts here, it's a bit later when it arrives here, and a bit later when it arrives there, and so on so forth. So that's fine, as long as you have no interfering traffic because if you have additional interfering traffic, and that might be because we of course want to use our audio on converged networks. So we want to use the same network for say our live PA system and for our network internet connection. And we want to download large file because we want to download a presentation recording from FOSTA. And basically that's where this entity arrives and it's introduced or it creates a large amount of traffic here. This will cause the packet here to be delayed until it's sent out of the egress port. And basically it won't arrive in time. And if we go for a small jitter buffers as possible, that's a problem because we have a buffer underrun at the listener side. And basically we have audio dropouts in the audio case, or we have stalling motors in the industrial control case. That's something we have to avoid under any circumstances. So basically something we want to have is quality of service. And so the picture, of course, your professional networking engineer, so you don't need that picture, but the picture I like to use for that is a bus lane in the street because also the bus runs in a more or less isochronous way. So you send those bus or packets down the lane and the way not to be hindered by the interfering traffic there is just basically to introduce a priority lane. And that is what we also use in networks basically when we introduce quality of service measures. Another thing we need for at least some of these applications is link layer redundancy. So imagine if there's a mixing desk right in the back and we run a network link back there and someone just trips over that link, rips out the cable, or maybe it's a fiber link and someone stomps on the fiber link, bad things happen. And basically if our stem is over, we don't want to have that. So we want to introduce means of having redundancy schemes there. Basically you can't think of it as a real-time capable, real-time healing with no waiting time like spanning tree-ish thing you want to have. The standard spanning trees quite don't cut it for these kinds of applications. So we have to introduce other stuff there. We have some other application requirements there. They're not so important so I leave them out for now. Now what does the or what kernel and user space components do we have to implement that? We will look into what the TSM components are later or what the TSM standards are because that's basically just numbers and letters. So for time synchronization, especially TSM, we use GPTP. That's a flavor of the precision time protocol, generalised precision time protocol, of which you can think of PTP standard PTP, IEEE 1588 boils down to layer 2. So of course we're dealing with raw, ethnic frames so we can't use UDP for transport and it also has some other quirks but they're not too important right there. And the way we do that with Linux kernel, we have the hardware time sampling units and the PTP hardware clocks. That's basically the interface to hardware clocks in your FNMAC or FI. And the user space component to run all the remaining stuff is PTP for Linux. That's basically the way it works and it works quite well. You can achieve down to several nanoseconds precision from point to point with that. For traffic shaping, that's the quality of service measure we want to employ. The kernel has the TC subsystem and usually if you configure that manually you use IPv2 or netlink if you want to do that programmatically and that's basically the way it works and we will look into a bit of detail later. For network management, so basically if you have to reserve a data flow from a talker to a listener, that's where it gets a bit sketchy because that's of course user space demons and there aren't much. There's also a problem because there's several ways of doing that, the traditional way or ABB style, the initial implementation used the so-called stream reservation protocol. Modern ways for especially pre-calculated or pre-engineered networks is using young NETCON extensions and there are some demons for that but support for the TSN extensions is not too great. So if you're into that, that's quite a nice thing to work on. For the real-time data packetization, that's mostly user space. Of course you want to use some kernel features like ETF, Qdisk and XDP to have as low overhead as possible and to make sure that your transmission is sent out as asynchronously as possible and you want to use offloading for that and then there's some very application-specific user space components. So for audio-video stuff, you can use the G-streamer plugins and for industrial control, I'd recommend to use a 2G Open 6651 implementation. That's not quite finished yet but it's a good starting point at least. And for the link layer redundancy, that's what PCR and FRER is, basically the standards are finished since one or two years. There's not much hardware supporting that yet and you really want to have hardware offloading for that. So you're basically down to proprietary vendor stacks at the moment. There are efforts to put stuff mainline but there are not quite there yet. But stuff is coming and that's the good thing with that. So I think one slide is missing there, which is not a too big problem. Yes, one slide is missing. So basically the stuff, how to put stuff together with TSN, I will summarize it without a slide. With TSN we have GPTP, that's IEEE 802.1AS for the IEEE standard fetishists here in the room. And traffic shaping, the basic standard stuff is the credit-based shaper but there are more time-aware shapers available right now. They are basically making more efficient use of your network and the way that works is basically a reserving bandwidth along your data flow path in your network. Network management, again, that's a bit, that's a bit application-specific. So the audio video and professional audio video stuff is still using the stream reservation protocols and for the payload, as I already told, that's really, really application-specific. And for redundancy we use PCR and FRER. Usually there are some exceptions to that, especially for professional audio video. PCR and FRER were unstandardized when those standards were written so there are some proprietary or not proprietary but some other redundancy schemes where you basically send two different streams and try to separate your networks via means of VLANs usually and try to force different data paths through network. Basically nowadays you want to go PCR and FRER whenever your hardware supports that. So state of the union, the hard stuff is already done. So there's already implementations in the kernel, there are user space demons available. That's again the stuff that's difficult to get right. So if you want to implement those standards, first of all you have to read tons of paper. I did that for an employer, took me two years. So that's really hard to get right. And the good thing is that that is already implemented, you just have to use it and you have to use the right knobs. For some stuff like GPTP and traffic shaping you want to really, really use, for GPTP you have to use, for traffic shaping you want to use, hardware offloading. You have to bear in mind that your network gear has to support explicitly GPTP and traffic shaping. So about the preservation and basically making sure that your traffic shaping is applied properly. That's not true for every hardware, especially not for commodity hardware. And bear in mind that sometimes configuration especially for traffic shaping can be quite tricky. As I said, I have added bonus slides to the presentation. I will check that they have the right slides in there later on or just contact me. And the point is especially credit based shapers can be really, really tricky to set up properly and to make sure that you reserve the bandwidth you want because you want to have the remaining bandwidth to be available for best effort traffic. So the idea is that you can use like say 70% of your link for your audio video stuff and still have like 30% of your gigabit link, which is what we're usually dealing with for like audio video available for just best effort network management traffic and what so ever. So you really want to make sure your shapers are configured the right way TM. And it's quite hard to treat the right knobs and IP route too. So there are good examples and I'd strongly recommend to read the docs on that. There's also a link to the TSN read the docs for Linux. It's quite a good starting point for getting into that whole topic. And yeah, basically I think that's it. Do you have any questions? Any questions here? Thanks for this. What's the highest speed Ethernet implementation of this you've seen? Have you seen anything beyond like 10 gig E for example? I have seen a 10 gig implementation for that. As far as I recall the standards and have some limitations with respect to how you communicate your bandwidth requirements and they're a bit capped. I'm sure and I know that they are working on that for future revisions of the standards because of course now faster links are becoming available more and more. Most applications for TSN like the control stuff or the AV stuff are running on 100 megabit links still. You want to go to gigabit links because you can achieve quite a bit lower end to end latencies on faster links. But I haven't seen, personally haven't seen faster stuff than 10 gigs so far. But I'd be interested to do so. Do you have happy stories or really users that have put this in production and can you tell more about this? Yeah, so if you want to check that out you can just Google for Milan and TSN which is the professional audio video stuff and they just before Covid started, shortly before Covid started they ran the Rammstein concert in Munich over a TSN system. It's a really large system with several video walls and several like hundreds or thousands of audio streams and pyrotechnics and light control and stuff all in the same network converged. So that's the largest installation for live audio I know of and I think that's quite a good story to tell. I was curious if you had the chance to play around with synchronous ethernet as well. I haven't looked into that too deep yet so I can't tell you too much about that. You mentioned XTP. Are you aware of any applications of XTP in that area? To be honest I haven't seen them and I will start working on some of them for a customer project in just a few weeks probably. The idea is that basically because it's layer 2 you don't have much network stack above the hardware layer. So if you can cut some of the Linux networking stack because you don't use it anyway, you work on raw sockets anyway, you could just cut some of that out and try to achieve lower latencies in your basically Linux stack there. Probably on the next Fostum I can probably give you a talk on that. This is probably a big question but how do you go about debugging this sort of stuff so like setting it up or if you think there's a problem, how do you go about finding problems? That's actually a bit of a pain point and you have to know at least a bit what same values for like path delays for the PTP and stuff are and one of the most useful debugging tools I've found so far is a good ethernet switch because it will give you like output for your stream reservations, it will give you output for your PTP or GPTP. You can also like sniff traffic with wiretaps basically and analyze it in Wireshark or Skypie or whatever your tool of choice is. That works best to be honest for 100 megabit links because you can use passive tabs. It doesn't work that great for gigabit links because it violates some of the sound it's a bit. You can also use like mirror ports and switches to exfiltrate traffic but basically it's a more manual approach of debugging and I'd like to get in touch with if anyone is interested in just write me an email to start a community-based project of automated analysis of TSN networks basically because I think it's something we really really need especially for people who aren't that deep into the standards and we need to make sure that we can basically have a one-click check and setup and can tell from a tool that at least if that looks okay-ish or not what you're doing but I'm not aware of any project so far so I'd like to start but I'm not too experienced in how to start such a project so if you're experienced in that or are interested in that just write me an email, get in touch and maybe we can set up something. Any more questions? That's all the last one. You mentioned some protocols for link redundancy. Can they also be used for node redundancy? I'm not entirely sure. I would have to look something up. I think basically it should work because it's about the data path so if one node drops out basically that would work as well but it won't work for the endpoints so for the talk of the listener of course it won't work but for nodes in the middle of your graph that would probably work. Okay thank you very much again for your presentation. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.280000000000001, "text": " Hi. Welcome to my talk. So you want to build a deterministic networking system, a gentle", "tokens": [2421, 13, 4027, 281, 452, 751, 13, 407, 291, 528, 281, 1322, 257, 15957, 3142, 17985, 1185, 11, 257, 6424], "temperature": 0.0, "avg_logprob": -0.2223456556146795, "compression_ratio": 1.5602409638554218, "no_speech_prob": 0.06552500277757645}, {"id": 1, "seek": 0, "start": 12.280000000000001, "end": 17.76, "text": " introduction to time-sensitive networking just out of interest. How many of you have", "tokens": [9339, 281, 565, 12, 82, 34465, 17985, 445, 484, 295, 1179, 13, 1012, 867, 295, 291, 362], "temperature": 0.0, "avg_logprob": -0.2223456556146795, "compression_ratio": 1.5602409638554218, "no_speech_prob": 0.06552500277757645}, {"id": 2, "seek": 0, "start": 17.76, "end": 23.72, "text": " heard of TSN or time-sensitive networking so far? That's quite a few for a networking", "tokens": [2198, 295, 314, 32481, 420, 565, 12, 82, 34465, 17985, 370, 1400, 30, 663, 311, 1596, 257, 1326, 337, 257, 17985], "temperature": 0.0, "avg_logprob": -0.2223456556146795, "compression_ratio": 1.5602409638554218, "no_speech_prob": 0.06552500277757645}, {"id": 3, "seek": 2372, "start": 23.72, "end": 30.72, "text": " session. That's great. How many of you have already worked with that? Not so many. Okay.", "tokens": [5481, 13, 663, 311, 869, 13, 1012, 867, 295, 291, 362, 1217, 2732, 365, 300, 30, 1726, 370, 867, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.18469283978144327, "compression_ratio": 1.510548523206751, "no_speech_prob": 0.00010338915308238938}, {"id": 4, "seek": 2372, "start": 30.72, "end": 38.2, "text": " You will after that talk. Yeah. Who am I? I think I'm a former system engineer. I worked", "tokens": [509, 486, 934, 300, 751, 13, 865, 13, 2102, 669, 286, 30, 286, 519, 286, 478, 257, 5819, 1185, 11403, 13, 286, 2732], "temperature": 0.0, "avg_logprob": -0.18469283978144327, "compression_ratio": 1.510548523206751, "no_speech_prob": 0.00010338915308238938}, {"id": 5, "seek": 2372, "start": 38.2, "end": 44.68, "text": " a lot with time-sensitive networking and its predecessors. I also took part in standardization.", "tokens": [257, 688, 365, 565, 12, 82, 34465, 17985, 293, 1080, 24874, 45700, 13, 286, 611, 1890, 644, 294, 3832, 2144, 13], "temperature": 0.0, "avg_logprob": -0.18469283978144327, "compression_ratio": 1.510548523206751, "no_speech_prob": 0.00010338915308238938}, {"id": 6, "seek": 2372, "start": 44.68, "end": 50.16, "text": " So I also did some of that. And since last summer, I worked at a kernel developer at", "tokens": [407, 286, 611, 630, 512, 295, 300, 13, 400, 1670, 1036, 4266, 11, 286, 2732, 412, 257, 28256, 10754, 412], "temperature": 0.0, "avg_logprob": -0.18469283978144327, "compression_ratio": 1.510548523206751, "no_speech_prob": 0.00010338915308238938}, {"id": 7, "seek": 5016, "start": 50.16, "end": 57.16, "text": " Pengatronics. That's a German Linux consulting and support company. We have roughly 7,600", "tokens": [25783, 267, 37042, 13, 663, 311, 257, 6521, 18734, 23682, 293, 1406, 2237, 13, 492, 362, 9810, 1614, 11, 15707], "temperature": 0.0, "avg_logprob": -0.19191767095209478, "compression_ratio": 1.4979423868312758, "no_speech_prob": 4.6576351451221853e-05}, {"id": 8, "seek": 5016, "start": 57.16, "end": 64.24, "text": " patches in the kernel. And we also do consulting for real-time networking amongst many other", "tokens": [26531, 294, 264, 28256, 13, 400, 321, 611, 360, 23682, 337, 957, 12, 3766, 17985, 12918, 867, 661], "temperature": 0.0, "avg_logprob": -0.19191767095209478, "compression_ratio": 1.4979423868312758, "no_speech_prob": 4.6576351451221853e-05}, {"id": 9, "seek": 5016, "start": 64.24, "end": 71.72, "text": " stuff. And by the way, we're hiring, of course. Now, to what we will look into today, we will", "tokens": [1507, 13, 400, 538, 264, 636, 11, 321, 434, 15335, 11, 295, 1164, 13, 823, 11, 281, 437, 321, 486, 574, 666, 965, 11, 321, 486], "temperature": 0.0, "avg_logprob": -0.19191767095209478, "compression_ratio": 1.4979423868312758, "no_speech_prob": 4.6576351451221853e-05}, {"id": 10, "seek": 5016, "start": 71.72, "end": 79.6, "text": " look into applications. I will give you some examples why you would probably want to do", "tokens": [574, 666, 5821, 13, 286, 486, 976, 291, 512, 5110, 983, 291, 576, 1391, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.19191767095209478, "compression_ratio": 1.4979423868312758, "no_speech_prob": 4.6576351451221853e-05}, {"id": 11, "seek": 7960, "start": 79.6, "end": 87.24, "text": " networking over or real-time data transport over networking and what the implications", "tokens": [17985, 670, 420, 957, 12, 3766, 1412, 5495, 670, 17985, 293, 437, 264, 16602], "temperature": 0.0, "avg_logprob": -0.12057066583014153, "compression_ratio": 1.7129186602870814, "no_speech_prob": 3.2649968488840386e-05}, {"id": 12, "seek": 7960, "start": 87.24, "end": 92.8, "text": " of that is, what the requirements of these applications are. We will look into the basic", "tokens": [295, 300, 307, 11, 437, 264, 7728, 295, 613, 5821, 366, 13, 492, 486, 574, 666, 264, 3875], "temperature": 0.0, "avg_logprob": -0.12057066583014153, "compression_ratio": 1.7129186602870814, "no_speech_prob": 3.2649968488840386e-05}, {"id": 13, "seek": 7960, "start": 92.8, "end": 98.52, "text": " building blocks. So sorry for the folks who already know about that. And we will talk", "tokens": [2390, 8474, 13, 407, 2597, 337, 264, 4024, 567, 1217, 458, 466, 300, 13, 400, 321, 486, 751], "temperature": 0.0, "avg_logprob": -0.12057066583014153, "compression_ratio": 1.7129186602870814, "no_speech_prob": 3.2649968488840386e-05}, {"id": 14, "seek": 7960, "start": 98.52, "end": 106.08, "text": " a bit about which Linux user space and kernel components are used in building these applications.", "tokens": [257, 857, 466, 597, 18734, 4195, 1901, 293, 28256, 6677, 366, 1143, 294, 2390, 613, 5821, 13], "temperature": 0.0, "avg_logprob": -0.12057066583014153, "compression_ratio": 1.7129186602870814, "no_speech_prob": 3.2649968488840386e-05}, {"id": 15, "seek": 10608, "start": 106.08, "end": 111.75999999999999, "text": " And I will sum up the state of the union a bit. And then, just as an announcement in", "tokens": [400, 286, 486, 2408, 493, 264, 1785, 295, 264, 11671, 257, 857, 13, 400, 550, 11, 445, 382, 364, 12847, 294], "temperature": 0.0, "avg_logprob": -0.14741663101616256, "compression_ratio": 1.5992779783393503, "no_speech_prob": 3.31758419633843e-05}, {"id": 16, "seek": 10608, "start": 111.75999999999999, "end": 116.75999999999999, "text": " advance, there are some bonus slides where I will give some more details and some references", "tokens": [7295, 11, 456, 366, 512, 10882, 9788, 689, 286, 486, 976, 512, 544, 4365, 293, 512, 15400], "temperature": 0.0, "avg_logprob": -0.14741663101616256, "compression_ratio": 1.5992779783393503, "no_speech_prob": 3.31758419633843e-05}, {"id": 17, "seek": 10608, "start": 116.75999999999999, "end": 122.32, "text": " to open-source projects already working with TSM. So if you're interested in that, just", "tokens": [281, 1269, 12, 41676, 4455, 1217, 1364, 365, 314, 26693, 13, 407, 498, 291, 434, 3102, 294, 300, 11, 445], "temperature": 0.0, "avg_logprob": -0.14741663101616256, "compression_ratio": 1.5992779783393503, "no_speech_prob": 3.31758419633843e-05}, {"id": 18, "seek": 10608, "start": 122.32, "end": 128.56, "text": " download the slides from the penta and, well, check out the links. And I also gave an example", "tokens": [5484, 264, 9788, 490, 264, 280, 8938, 293, 11, 731, 11, 1520, 484, 264, 6123, 13, 400, 286, 611, 2729, 364, 1365], "temperature": 0.0, "avg_logprob": -0.14741663101616256, "compression_ratio": 1.5992779783393503, "no_speech_prob": 3.31758419633843e-05}, {"id": 19, "seek": 10608, "start": 128.56, "end": 134.56, "text": " of how to basically glue together a stage box, so a transport system for audio data", "tokens": [295, 577, 281, 1936, 8998, 1214, 257, 3233, 2424, 11, 370, 257, 5495, 1185, 337, 6278, 1412], "temperature": 0.0, "avg_logprob": -0.14741663101616256, "compression_ratio": 1.5992779783393503, "no_speech_prob": 3.31758419633843e-05}, {"id": 20, "seek": 13456, "start": 134.56, "end": 141.32, "text": " over the network. I won't make that into the talk because it has been shortened to half", "tokens": [670, 264, 3209, 13, 286, 1582, 380, 652, 300, 666, 264, 751, 570, 309, 575, 668, 45183, 281, 1922], "temperature": 0.0, "avg_logprob": -0.17271401908960235, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.794352622004226e-05}, {"id": 21, "seek": 13456, "start": 141.32, "end": 149.28, "text": " an hour. So the example I will focus on today is audio video bridging. So if you want to", "tokens": [364, 1773, 13, 407, 264, 1365, 286, 486, 1879, 322, 965, 307, 6278, 960, 16362, 3249, 13, 407, 498, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.17271401908960235, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.794352622004226e-05}, {"id": 22, "seek": 13456, "start": 149.28, "end": 155.76, "text": " transport real-time data over a network for an application just as this talk, you want", "tokens": [5495, 957, 12, 3766, 1412, 670, 257, 3209, 337, 364, 3861, 445, 382, 341, 751, 11, 291, 528], "temperature": 0.0, "avg_logprob": -0.17271401908960235, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.794352622004226e-05}, {"id": 23, "seek": 13456, "start": 155.76, "end": 160.72, "text": " to have as low jitter buff or as small jitter buff as possible to reduce latency in the", "tokens": [281, 362, 382, 2295, 361, 3904, 9204, 420, 382, 1359, 361, 3904, 9204, 382, 1944, 281, 5407, 27043, 294, 264], "temperature": 0.0, "avg_logprob": -0.17271401908960235, "compression_ratio": 1.588235294117647, "no_speech_prob": 2.794352622004226e-05}, {"id": 24, "seek": 16072, "start": 160.72, "end": 167.0, "text": " system because if you transport data over a traditional network, packets could get dropped.", "tokens": [1185, 570, 498, 291, 5495, 1412, 670, 257, 5164, 3209, 11, 30364, 727, 483, 8119, 13], "temperature": 0.0, "avg_logprob": -0.12276865641276041, "compression_ratio": 1.683206106870229, "no_speech_prob": 1.642966344661545e-05}, {"id": 25, "seek": 16072, "start": 167.0, "end": 173.28, "text": " So you have to resend them or you have to make sure that somehow, magically, interfering", "tokens": [407, 291, 362, 281, 725, 521, 552, 420, 291, 362, 281, 652, 988, 300, 6063, 11, 39763, 11, 48721], "temperature": 0.0, "avg_logprob": -0.12276865641276041, "compression_ratio": 1.683206106870229, "no_speech_prob": 1.642966344661545e-05}, {"id": 26, "seek": 16072, "start": 173.28, "end": 179.96, "text": " traffic doesn't do you any harm. And that usually involves quite large jitter buffers", "tokens": [6419, 1177, 380, 360, 291, 604, 6491, 13, 400, 300, 2673, 11626, 1596, 2416, 361, 3904, 9204, 433], "temperature": 0.0, "avg_logprob": -0.12276865641276041, "compression_ratio": 1.683206106870229, "no_speech_prob": 1.642966344661545e-05}, {"id": 27, "seek": 16072, "start": 179.96, "end": 185.48, "text": " up to several seconds. And if I talk now and you hear me from stage and you hear me from", "tokens": [493, 281, 2940, 3949, 13, 400, 498, 286, 751, 586, 293, 291, 1568, 385, 490, 3233, 293, 291, 1568, 385, 490], "temperature": 0.0, "avg_logprob": -0.12276865641276041, "compression_ratio": 1.683206106870229, "no_speech_prob": 1.642966344661545e-05}, {"id": 28, "seek": 16072, "start": 185.48, "end": 189.36, "text": " the PA four seconds after that, that would be quite annoying. So you want to cut that", "tokens": [264, 17718, 1451, 3949, 934, 300, 11, 300, 576, 312, 1596, 11304, 13, 407, 291, 528, 281, 1723, 300], "temperature": 0.0, "avg_logprob": -0.12276865641276041, "compression_ratio": 1.683206106870229, "no_speech_prob": 1.642966344661545e-05}, {"id": 29, "seek": 18936, "start": 189.36, "end": 200.04000000000002, "text": " down to as low as possible transmission latency, overall end-to-end latency. Of course, for", "tokens": [760, 281, 382, 2295, 382, 1944, 11574, 27043, 11, 4787, 917, 12, 1353, 12, 521, 27043, 13, 2720, 1164, 11, 337], "temperature": 0.0, "avg_logprob": -0.1625196793500115, "compression_ratio": 1.5021097046413503, "no_speech_prob": 1.2020337635476608e-05}, {"id": 30, "seek": 18936, "start": 200.04000000000002, "end": 207.88000000000002, "text": " TSN, which started as audio video bridging or AVB as a standard, they came across the", "tokens": [314, 32481, 11, 597, 1409, 382, 6278, 960, 16362, 3249, 420, 30198, 33, 382, 257, 3832, 11, 436, 1361, 2108, 264], "temperature": 0.0, "avg_logprob": -0.1625196793500115, "compression_ratio": 1.5021097046413503, "no_speech_prob": 1.2020337635476608e-05}, {"id": 31, "seek": 18936, "start": 207.88000000000002, "end": 213.68, "text": " fact that this technology could also be useful for quite some other applications. Most of", "tokens": [1186, 300, 341, 2899, 727, 611, 312, 4420, 337, 1596, 512, 661, 5821, 13, 4534, 295], "temperature": 0.0, "avg_logprob": -0.1625196793500115, "compression_ratio": 1.5021097046413503, "no_speech_prob": 1.2020337635476608e-05}, {"id": 32, "seek": 18936, "start": 213.68, "end": 218.72000000000003, "text": " the customers do like machine control stuff with that. So if you have a large production", "tokens": [264, 4581, 360, 411, 3479, 1969, 1507, 365, 300, 13, 407, 498, 291, 362, 257, 2416, 4265], "temperature": 0.0, "avg_logprob": -0.1625196793500115, "compression_ratio": 1.5021097046413503, "no_speech_prob": 1.2020337635476608e-05}, {"id": 33, "seek": 21872, "start": 218.72, "end": 225.36, "text": " line and you want to transmit data between your PLC and your server drives or your robot", "tokens": [1622, 293, 291, 528, 281, 17831, 1412, 1296, 428, 6999, 34, 293, 428, 7154, 11754, 420, 428, 7881], "temperature": 0.0, "avg_logprob": -0.0996685257877212, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.99848104279954e-05}, {"id": 34, "seek": 21872, "start": 225.36, "end": 233.88, "text": " arms and stuff, you also want to make sure that your control data arrives in time at", "tokens": [5812, 293, 1507, 11, 291, 611, 528, 281, 652, 988, 300, 428, 1969, 1412, 20116, 294, 565, 412], "temperature": 0.0, "avg_logprob": -0.0996685257877212, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.99848104279954e-05}, {"id": 35, "seek": 21872, "start": 233.88, "end": 240.92, "text": " the actor or your sensor data is read in within a certain point in time. And that's quite", "tokens": [264, 8747, 420, 428, 10200, 1412, 307, 1401, 294, 1951, 257, 1629, 935, 294, 565, 13, 400, 300, 311, 1596], "temperature": 0.0, "avg_logprob": -0.0996685257877212, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.99848104279954e-05}, {"id": 36, "seek": 21872, "start": 240.92, "end": 246.68, "text": " important to keep that timing. Same holds, of course, for aerospace and automotive and", "tokens": [1021, 281, 1066, 300, 10822, 13, 10635, 9190, 11, 295, 1164, 11, 337, 46817, 293, 32866, 293], "temperature": 0.0, "avg_logprob": -0.0996685257877212, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.99848104279954e-05}, {"id": 37, "seek": 24668, "start": 246.68, "end": 252.96, "text": " railways and stuff. I won't go into these applications today because we're, as I said,", "tokens": [8765, 942, 293, 1507, 13, 286, 1582, 380, 352, 666, 613, 5821, 965, 570, 321, 434, 11, 382, 286, 848, 11], "temperature": 0.0, "avg_logprob": -0.14370701952678402, "compression_ratio": 1.5981308411214954, "no_speech_prob": 1.8033528249361552e-05}, {"id": 38, "seek": 24668, "start": 252.96, "end": 259.08, "text": " short on time. The first requirement of said applications is that you need to establish", "tokens": [2099, 322, 565, 13, 440, 700, 11695, 295, 848, 5821, 307, 300, 291, 643, 281, 8327], "temperature": 0.0, "avg_logprob": -0.14370701952678402, "compression_ratio": 1.5981308411214954, "no_speech_prob": 1.8033528249361552e-05}, {"id": 39, "seek": 24668, "start": 259.08, "end": 264.8, "text": " a common time base in the network. That's due to the fact that while measuring time", "tokens": [257, 2689, 565, 3096, 294, 264, 3209, 13, 663, 311, 3462, 281, 264, 1186, 300, 1339, 13389, 565], "temperature": 0.0, "avg_logprob": -0.14370701952678402, "compression_ratio": 1.5981308411214954, "no_speech_prob": 1.8033528249361552e-05}, {"id": 40, "seek": 24668, "start": 264.8, "end": 270.68, "text": " in computers, it's basically hooking up a hardware counter to a crystal oscillator.", "tokens": [294, 10807, 11, 309, 311, 1936, 1106, 5953, 493, 257, 8837, 5682, 281, 257, 13662, 43859, 13], "temperature": 0.0, "avg_logprob": -0.14370701952678402, "compression_ratio": 1.5981308411214954, "no_speech_prob": 1.8033528249361552e-05}, {"id": 41, "seek": 27068, "start": 270.68, "end": 277.16, "text": " These crystal oscillators tend to have frequency drift over time, especially with temperature.", "tokens": [1981, 13662, 18225, 3391, 3928, 281, 362, 7893, 19699, 670, 565, 11, 2318, 365, 4292, 13], "temperature": 0.0, "avg_logprob": -0.1469195048014323, "compression_ratio": 1.5814977973568283, "no_speech_prob": 9.507293725619093e-06}, {"id": 42, "seek": 27068, "start": 277.16, "end": 282.40000000000003, "text": " And due to the different switch on points in time, you also have quite large offsets.", "tokens": [400, 3462, 281, 264, 819, 3679, 322, 2793, 294, 565, 11, 291, 611, 362, 1596, 2416, 39457, 1385, 13], "temperature": 0.0, "avg_logprob": -0.1469195048014323, "compression_ratio": 1.5814977973568283, "no_speech_prob": 9.507293725619093e-06}, {"id": 43, "seek": 27068, "start": 282.40000000000003, "end": 290.36, "text": " So if you start one device, say at 12 o'clock and the other at 1 p.m., they have one hour", "tokens": [407, 498, 291, 722, 472, 4302, 11, 584, 412, 2272, 277, 6, 9023, 293, 264, 661, 412, 502, 280, 13, 76, 7933, 436, 362, 472, 1773], "temperature": 0.0, "avg_logprob": -0.1469195048014323, "compression_ratio": 1.5814977973568283, "no_speech_prob": 9.507293725619093e-06}, {"id": 44, "seek": 27068, "start": 290.36, "end": 298.84000000000003, "text": " of offset in there. So you want to make sure that all your network devices have a common", "tokens": [295, 18687, 294, 456, 13, 407, 291, 528, 281, 652, 988, 300, 439, 428, 3209, 5759, 362, 257, 2689], "temperature": 0.0, "avg_logprob": -0.1469195048014323, "compression_ratio": 1.5814977973568283, "no_speech_prob": 9.507293725619093e-06}, {"id": 45, "seek": 29884, "start": 298.84, "end": 308.67999999999995, "text": " meaning or a common sense of time passing and a common sense of what time it is. Because", "tokens": [3620, 420, 257, 2689, 2020, 295, 565, 8437, 293, 257, 2689, 2020, 295, 437, 565, 309, 307, 13, 1436], "temperature": 0.0, "avg_logprob": -0.12218025752476283, "compression_ratio": 1.6272727272727272, "no_speech_prob": 2.1757898139185272e-05}, {"id": 46, "seek": 29884, "start": 308.67999999999995, "end": 313.79999999999995, "text": " lots of scheduling decisions for networking traffic may depend on timing. Also, for some", "tokens": [3195, 295, 29055, 5327, 337, 17985, 6419, 815, 5672, 322, 10822, 13, 2743, 11, 337, 512], "temperature": 0.0, "avg_logprob": -0.12218025752476283, "compression_ratio": 1.6272727272727272, "no_speech_prob": 2.1757898139185272e-05}, {"id": 47, "seek": 29884, "start": 313.79999999999995, "end": 318.84, "text": " applications as the audio example, you also would like to regenerate your audio sampling", "tokens": [5821, 382, 264, 6278, 1365, 11, 291, 611, 576, 411, 281, 26358, 473, 428, 6278, 21179], "temperature": 0.0, "avg_logprob": -0.12218025752476283, "compression_ratio": 1.6272727272727272, "no_speech_prob": 2.1757898139185272e-05}, {"id": 48, "seek": 29884, "start": 318.84, "end": 326.12, "text": " clocks. So basically in order not to introduce any additional degradation in audio quality,", "tokens": [41528, 13, 407, 1936, 294, 1668, 406, 281, 5366, 604, 4497, 40519, 294, 6278, 3125, 11], "temperature": 0.0, "avg_logprob": -0.12218025752476283, "compression_ratio": 1.6272727272727272, "no_speech_prob": 2.1757898139185272e-05}, {"id": 49, "seek": 32612, "start": 326.12, "end": 334.08, "text": " you want to make sure that your sampling clocks of your ADC and DAC run basically in lockstep.", "tokens": [291, 528, 281, 652, 988, 300, 428, 21179, 41528, 295, 428, 9135, 34, 293, 39038, 1190, 1936, 294, 4017, 16792, 13], "temperature": 0.0, "avg_logprob": -0.1318188809800422, "compression_ratio": 1.7523809523809524, "no_speech_prob": 1.2597982276929542e-05}, {"id": 50, "seek": 32612, "start": 334.08, "end": 339.32, "text": " And that is why you want to make sure that your time is distributed evenly. And the way", "tokens": [400, 300, 307, 983, 291, 528, 281, 652, 988, 300, 428, 565, 307, 12631, 17658, 13, 400, 264, 636], "temperature": 0.0, "avg_logprob": -0.1318188809800422, "compression_ratio": 1.7523809523809524, "no_speech_prob": 1.2597982276929542e-05}, {"id": 51, "seek": 32612, "start": 339.32, "end": 346.12, "text": " that this is done usually in networks is just shown basically in this old style picture.", "tokens": [300, 341, 307, 1096, 2673, 294, 9590, 307, 445, 4898, 1936, 294, 341, 1331, 3758, 3036, 13], "temperature": 0.0, "avg_logprob": -0.1318188809800422, "compression_ratio": 1.7523809523809524, "no_speech_prob": 1.2597982276929542e-05}, {"id": 52, "seek": 32612, "start": 346.12, "end": 352.36, "text": " You elect a so-called master clock. So basically that's the best clock reference in your network", "tokens": [509, 2185, 257, 370, 12, 11880, 4505, 7830, 13, 407, 1936, 300, 311, 264, 1151, 7830, 6408, 294, 428, 3209], "temperature": 0.0, "avg_logprob": -0.1318188809800422, "compression_ratio": 1.7523809523809524, "no_speech_prob": 1.2597982276929542e-05}, {"id": 53, "seek": 35236, "start": 352.36, "end": 358.6, "text": " or the most stable clock reference in your network. And then basically you compare all", "tokens": [420, 264, 881, 8351, 7830, 6408, 294, 428, 3209, 13, 400, 550, 1936, 291, 6794, 439], "temperature": 0.0, "avg_logprob": -0.12571067810058595, "compression_ratio": 1.7451923076923077, "no_speech_prob": 1.5524527043453418e-05}, {"id": 54, "seek": 35236, "start": 358.6, "end": 365.32, "text": " other clocks to that clock reference and they have to adjust their local time for that reference", "tokens": [661, 41528, 281, 300, 7830, 6408, 293, 436, 362, 281, 4369, 641, 2654, 565, 337, 300, 6408], "temperature": 0.0, "avg_logprob": -0.12571067810058595, "compression_ratio": 1.7451923076923077, "no_speech_prob": 1.5524527043453418e-05}, {"id": 55, "seek": 35236, "start": 365.32, "end": 371.84000000000003, "text": " time. It's basically just as those three gentlemen do in that picture. I like that comparison", "tokens": [565, 13, 467, 311, 1936, 445, 382, 729, 1045, 11669, 360, 294, 300, 3036, 13, 286, 411, 300, 9660], "temperature": 0.0, "avg_logprob": -0.12571067810058595, "compression_ratio": 1.7451923076923077, "no_speech_prob": 1.5524527043453418e-05}, {"id": 56, "seek": 35236, "start": 371.84000000000003, "end": 377.92, "text": " because you find a lot of analogies and the standards to just the way that works with", "tokens": [570, 291, 915, 257, 688, 295, 16660, 530, 293, 264, 7787, 281, 445, 264, 636, 300, 1985, 365], "temperature": 0.0, "avg_logprob": -0.12571067810058595, "compression_ratio": 1.7451923076923077, "no_speech_prob": 1.5524527043453418e-05}, {"id": 57, "seek": 37792, "start": 377.92, "end": 388.88, "text": " like pocket watches. And if you look into that, you will find that basic idea quite", "tokens": [411, 8963, 17062, 13, 400, 498, 291, 574, 666, 300, 11, 291, 486, 915, 300, 3875, 1558, 1596], "temperature": 0.0, "avg_logprob": -0.1441716686371834, "compression_ratio": 1.4772727272727273, "no_speech_prob": 2.5392397219548002e-05}, {"id": 58, "seek": 37792, "start": 388.88, "end": 396.40000000000003, "text": " useful to keep in mind. Now the other thing we want to have guaranteed is as I already", "tokens": [4420, 281, 1066, 294, 1575, 13, 823, 264, 661, 551, 321, 528, 281, 362, 18031, 307, 382, 286, 1217], "temperature": 0.0, "avg_logprob": -0.1441716686371834, "compression_ratio": 1.4772727272727273, "no_speech_prob": 2.5392397219548002e-05}, {"id": 59, "seek": 37792, "start": 396.40000000000003, "end": 402.8, "text": " said bound and transmission latency. So if we go across the transmission of a data stream", "tokens": [848, 5472, 293, 11574, 27043, 13, 407, 498, 321, 352, 2108, 264, 11574, 295, 257, 1412, 4309], "temperature": 0.0, "avg_logprob": -0.1441716686371834, "compression_ratio": 1.4772727272727273, "no_speech_prob": 2.5392397219548002e-05}, {"id": 60, "seek": 40280, "start": 402.8, "end": 408.48, "text": " in the network, so that's what the standard calls a talker at the left. And that's what", "tokens": [294, 264, 3209, 11, 370, 300, 311, 437, 264, 3832, 5498, 257, 751, 260, 412, 264, 1411, 13, 400, 300, 311, 437], "temperature": 0.0, "avg_logprob": -0.19601859627189216, "compression_ratio": 1.890625, "no_speech_prob": 3.1624556868337095e-05}, {"id": 61, "seek": 40280, "start": 408.48, "end": 414.44, "text": " the standard calls bridges. Usually as we're dealing with layer two, that's ethnic switches.", "tokens": [264, 3832, 5498, 21114, 13, 11419, 382, 321, 434, 6260, 365, 4583, 732, 11, 300, 311, 14363, 19458, 13], "temperature": 0.0, "avg_logprob": -0.19601859627189216, "compression_ratio": 1.890625, "no_speech_prob": 3.1624556868337095e-05}, {"id": 62, "seek": 40280, "start": 414.44, "end": 419.44, "text": " And in the right, that's what the standard calls a listener. You also call it a source", "tokens": [400, 294, 264, 558, 11, 300, 311, 437, 264, 3832, 5498, 257, 31569, 13, 509, 611, 818, 309, 257, 4009], "temperature": 0.0, "avg_logprob": -0.19601859627189216, "compression_ratio": 1.890625, "no_speech_prob": 3.1624556868337095e-05}, {"id": 63, "seek": 40280, "start": 419.44, "end": 427.6, "text": " and a sync. But the standard talks about talkers and listeners. And the packet goes from bridge", "tokens": [293, 257, 20271, 13, 583, 264, 3832, 6686, 466, 751, 433, 293, 23274, 13, 400, 264, 20300, 1709, 490, 7283], "temperature": 0.0, "avg_logprob": -0.19601859627189216, "compression_ratio": 1.890625, "no_speech_prob": 3.1624556868337095e-05}, {"id": 64, "seek": 42760, "start": 427.6, "end": 435.28000000000003, "text": " to bridge to along its pass across the network. And each switch basically a bridge has an", "tokens": [281, 7283, 281, 2051, 1080, 1320, 2108, 264, 3209, 13, 400, 1184, 3679, 1936, 257, 7283, 575, 364], "temperature": 0.0, "avg_logprob": -0.17157745361328125, "compression_ratio": 1.816326530612245, "no_speech_prob": 7.645140613021795e-06}, {"id": 65, "seek": 42760, "start": 435.28000000000003, "end": 441.20000000000005, "text": " ingress queue and a switch fabric and an egress queue. That's due to the fact that you can", "tokens": [3957, 735, 18639, 293, 257, 3679, 7253, 293, 364, 308, 3091, 18639, 13, 663, 311, 3462, 281, 264, 1186, 300, 291, 393], "temperature": 0.0, "avg_logprob": -0.17157745361328125, "compression_ratio": 1.816326530612245, "no_speech_prob": 7.645140613021795e-06}, {"id": 66, "seek": 42760, "start": 441.20000000000005, "end": 447.68, "text": " only transmit one packet out of a certain network port at a time. You can't just if", "tokens": [787, 17831, 472, 20300, 484, 295, 257, 1629, 3209, 2436, 412, 257, 565, 13, 509, 393, 380, 445, 498], "temperature": 0.0, "avg_logprob": -0.17157745361328125, "compression_ratio": 1.816326530612245, "no_speech_prob": 7.645140613021795e-06}, {"id": 67, "seek": 42760, "start": 447.68, "end": 452.88, "text": " another packet at another port arrives for that destination port, you have to store it.", "tokens": [1071, 20300, 412, 1071, 2436, 20116, 337, 300, 12236, 2436, 11, 291, 362, 281, 3531, 309, 13], "temperature": 0.0, "avg_logprob": -0.17157745361328125, "compression_ratio": 1.816326530612245, "no_speech_prob": 7.645140613021795e-06}, {"id": 68, "seek": 42760, "start": 452.88, "end": 457.40000000000003, "text": " And you have to wait until the last transmission is done. And then you can transmit the next", "tokens": [400, 291, 362, 281, 1699, 1826, 264, 1036, 11574, 307, 1096, 13, 400, 550, 291, 393, 17831, 264, 958], "temperature": 0.0, "avg_logprob": -0.17157745361328125, "compression_ratio": 1.816326530612245, "no_speech_prob": 7.645140613021795e-06}, {"id": 69, "seek": 45740, "start": 457.4, "end": 463.03999999999996, "text": " packet. And this introduces what's called the residence time in each switch. So even", "tokens": [20300, 13, 400, 341, 31472, 437, 311, 1219, 264, 19607, 565, 294, 1184, 3679, 13, 407, 754], "temperature": 0.0, "avg_logprob": -0.12905038977569006, "compression_ratio": 1.875, "no_speech_prob": 2.4214585209847428e-05}, {"id": 70, "seek": 45740, "start": 463.03999999999996, "end": 469.15999999999997, "text": " if you have a perfect pass through through network without any additional interfering", "tokens": [498, 291, 362, 257, 2176, 1320, 807, 807, 3209, 1553, 604, 4497, 48721], "temperature": 0.0, "avg_logprob": -0.12905038977569006, "compression_ratio": 1.875, "no_speech_prob": 2.4214585209847428e-05}, {"id": 71, "seek": 45740, "start": 469.15999999999997, "end": 474.84, "text": " traffic, you add a little time at each step, your payload packet travels through the network.", "tokens": [6419, 11, 291, 909, 257, 707, 565, 412, 1184, 1823, 11, 428, 30918, 20300, 19863, 807, 264, 3209, 13], "temperature": 0.0, "avg_logprob": -0.12905038977569006, "compression_ratio": 1.875, "no_speech_prob": 2.4214585209847428e-05}, {"id": 72, "seek": 45740, "start": 474.84, "end": 480.12, "text": " So if our audio starts here, it's a bit later when it arrives here, and a bit later when", "tokens": [407, 498, 527, 6278, 3719, 510, 11, 309, 311, 257, 857, 1780, 562, 309, 20116, 510, 11, 293, 257, 857, 1780, 562], "temperature": 0.0, "avg_logprob": -0.12905038977569006, "compression_ratio": 1.875, "no_speech_prob": 2.4214585209847428e-05}, {"id": 73, "seek": 45740, "start": 480.12, "end": 487.23999999999995, "text": " it arrives there, and so on so forth. So that's fine, as long as you have no interfering traffic", "tokens": [309, 20116, 456, 11, 293, 370, 322, 370, 5220, 13, 407, 300, 311, 2489, 11, 382, 938, 382, 291, 362, 572, 48721, 6419], "temperature": 0.0, "avg_logprob": -0.12905038977569006, "compression_ratio": 1.875, "no_speech_prob": 2.4214585209847428e-05}, {"id": 74, "seek": 48724, "start": 487.24, "end": 492.76, "text": " because if you have additional interfering traffic, and that might be because we of course", "tokens": [570, 498, 291, 362, 4497, 48721, 6419, 11, 293, 300, 1062, 312, 570, 321, 295, 1164], "temperature": 0.0, "avg_logprob": -0.1945320411964699, "compression_ratio": 1.6933962264150944, "no_speech_prob": 4.981103847967461e-05}, {"id": 75, "seek": 48724, "start": 492.76, "end": 497.56, "text": " want to use our audio on converged networks. So we want to use the same network for say", "tokens": [528, 281, 764, 527, 6278, 322, 9652, 3004, 9590, 13, 407, 321, 528, 281, 764, 264, 912, 3209, 337, 584], "temperature": 0.0, "avg_logprob": -0.1945320411964699, "compression_ratio": 1.6933962264150944, "no_speech_prob": 4.981103847967461e-05}, {"id": 76, "seek": 48724, "start": 497.56, "end": 505.72, "text": " our live PA system and for our network internet connection. And we want to download large file", "tokens": [527, 1621, 17718, 1185, 293, 337, 527, 3209, 4705, 4984, 13, 400, 321, 528, 281, 5484, 2416, 3991], "temperature": 0.0, "avg_logprob": -0.1945320411964699, "compression_ratio": 1.6933962264150944, "no_speech_prob": 4.981103847967461e-05}, {"id": 77, "seek": 48724, "start": 505.72, "end": 513.6800000000001, "text": " because we want to download a presentation recording from FOSTA. And basically that's", "tokens": [570, 321, 528, 281, 5484, 257, 5860, 6613, 490, 479, 4367, 8241, 13, 400, 1936, 300, 311], "temperature": 0.0, "avg_logprob": -0.1945320411964699, "compression_ratio": 1.6933962264150944, "no_speech_prob": 4.981103847967461e-05}, {"id": 78, "seek": 51368, "start": 513.68, "end": 521.92, "text": " where this entity arrives and it's introduced or it creates a large amount of traffic here.", "tokens": [689, 341, 13977, 20116, 293, 309, 311, 7268, 420, 309, 7829, 257, 2416, 2372, 295, 6419, 510, 13], "temperature": 0.0, "avg_logprob": -0.1437776865584127, "compression_ratio": 1.655813953488372, "no_speech_prob": 2.543925802456215e-05}, {"id": 79, "seek": 51368, "start": 521.92, "end": 527.68, "text": " This will cause the packet here to be delayed until it's sent out of the egress port. And", "tokens": [639, 486, 3082, 264, 20300, 510, 281, 312, 20268, 1826, 309, 311, 2279, 484, 295, 264, 308, 3091, 2436, 13, 400], "temperature": 0.0, "avg_logprob": -0.1437776865584127, "compression_ratio": 1.655813953488372, "no_speech_prob": 2.543925802456215e-05}, {"id": 80, "seek": 51368, "start": 527.68, "end": 534.12, "text": " basically it won't arrive in time. And if we go for a small jitter buffers as possible,", "tokens": [1936, 309, 1582, 380, 8881, 294, 565, 13, 400, 498, 321, 352, 337, 257, 1359, 361, 3904, 9204, 433, 382, 1944, 11], "temperature": 0.0, "avg_logprob": -0.1437776865584127, "compression_ratio": 1.655813953488372, "no_speech_prob": 2.543925802456215e-05}, {"id": 81, "seek": 51368, "start": 534.12, "end": 539.88, "text": " that's a problem because we have a buffer underrun at the listener side. And basically", "tokens": [300, 311, 257, 1154, 570, 321, 362, 257, 21762, 833, 12997, 412, 264, 31569, 1252, 13, 400, 1936], "temperature": 0.0, "avg_logprob": -0.1437776865584127, "compression_ratio": 1.655813953488372, "no_speech_prob": 2.543925802456215e-05}, {"id": 82, "seek": 53988, "start": 539.88, "end": 544.84, "text": " we have audio dropouts in the audio case, or we have stalling motors in the industrial", "tokens": [321, 362, 6278, 3270, 7711, 294, 264, 6278, 1389, 11, 420, 321, 362, 19633, 278, 25035, 294, 264, 9987], "temperature": 0.0, "avg_logprob": -0.18403542483294452, "compression_ratio": 1.735408560311284, "no_speech_prob": 9.357496310258284e-06}, {"id": 83, "seek": 53988, "start": 544.84, "end": 551.0, "text": " control case. That's something we have to avoid under any circumstances. So basically", "tokens": [1969, 1389, 13, 663, 311, 746, 321, 362, 281, 5042, 833, 604, 9121, 13, 407, 1936], "temperature": 0.0, "avg_logprob": -0.18403542483294452, "compression_ratio": 1.735408560311284, "no_speech_prob": 9.357496310258284e-06}, {"id": 84, "seek": 53988, "start": 551.0, "end": 558.68, "text": " something we want to have is quality of service. And so the picture, of course, your professional", "tokens": [746, 321, 528, 281, 362, 307, 3125, 295, 2643, 13, 400, 370, 264, 3036, 11, 295, 1164, 11, 428, 4843], "temperature": 0.0, "avg_logprob": -0.18403542483294452, "compression_ratio": 1.735408560311284, "no_speech_prob": 9.357496310258284e-06}, {"id": 85, "seek": 53988, "start": 558.68, "end": 562.76, "text": " networking engineer, so you don't need that picture, but the picture I like to use for", "tokens": [17985, 11403, 11, 370, 291, 500, 380, 643, 300, 3036, 11, 457, 264, 3036, 286, 411, 281, 764, 337], "temperature": 0.0, "avg_logprob": -0.18403542483294452, "compression_ratio": 1.735408560311284, "no_speech_prob": 9.357496310258284e-06}, {"id": 86, "seek": 53988, "start": 562.76, "end": 569.0, "text": " that is a bus lane in the street because also the bus runs in a more or less isochronous", "tokens": [300, 307, 257, 1255, 12705, 294, 264, 4838, 570, 611, 264, 1255, 6676, 294, 257, 544, 420, 1570, 307, 8997, 2044, 563], "temperature": 0.0, "avg_logprob": -0.18403542483294452, "compression_ratio": 1.735408560311284, "no_speech_prob": 9.357496310258284e-06}, {"id": 87, "seek": 56900, "start": 569.0, "end": 579.6, "text": " way. So you send those bus or packets down the lane and the way not to be hindered by", "tokens": [636, 13, 407, 291, 2845, 729, 1255, 420, 30364, 760, 264, 12705, 293, 264, 636, 406, 281, 312, 20138, 4073, 538], "temperature": 0.0, "avg_logprob": -0.1630145231882731, "compression_ratio": 1.5535714285714286, "no_speech_prob": 1.1655608432192821e-05}, {"id": 88, "seek": 56900, "start": 579.6, "end": 586.44, "text": " the interfering traffic there is just basically to introduce a priority lane. And that is", "tokens": [264, 48721, 6419, 456, 307, 445, 1936, 281, 5366, 257, 9365, 12705, 13, 400, 300, 307], "temperature": 0.0, "avg_logprob": -0.1630145231882731, "compression_ratio": 1.5535714285714286, "no_speech_prob": 1.1655608432192821e-05}, {"id": 89, "seek": 56900, "start": 586.44, "end": 594.08, "text": " what we also use in networks basically when we introduce quality of service measures.", "tokens": [437, 321, 611, 764, 294, 9590, 1936, 562, 321, 5366, 3125, 295, 2643, 8000, 13], "temperature": 0.0, "avg_logprob": -0.1630145231882731, "compression_ratio": 1.5535714285714286, "no_speech_prob": 1.1655608432192821e-05}, {"id": 90, "seek": 59408, "start": 594.08, "end": 599.5600000000001, "text": " Another thing we need for at least some of these applications is link layer redundancy.", "tokens": [3996, 551, 321, 643, 337, 412, 1935, 512, 295, 613, 5821, 307, 2113, 4583, 27830, 6717, 13], "temperature": 0.0, "avg_logprob": -0.1801403511402219, "compression_ratio": 1.6367924528301887, "no_speech_prob": 6.909650983288884e-05}, {"id": 91, "seek": 59408, "start": 599.5600000000001, "end": 606.12, "text": " So imagine if there's a mixing desk right in the back and we run a network link back", "tokens": [407, 3811, 498, 456, 311, 257, 11983, 10026, 558, 294, 264, 646, 293, 321, 1190, 257, 3209, 2113, 646], "temperature": 0.0, "avg_logprob": -0.1801403511402219, "compression_ratio": 1.6367924528301887, "no_speech_prob": 6.909650983288884e-05}, {"id": 92, "seek": 59408, "start": 606.12, "end": 612.2, "text": " there and someone just trips over that link, rips out the cable, or maybe it's a fiber", "tokens": [456, 293, 1580, 445, 16051, 670, 300, 2113, 11, 367, 2600, 484, 264, 8220, 11, 420, 1310, 309, 311, 257, 12874], "temperature": 0.0, "avg_logprob": -0.1801403511402219, "compression_ratio": 1.6367924528301887, "no_speech_prob": 6.909650983288884e-05}, {"id": 93, "seek": 59408, "start": 612.2, "end": 617.32, "text": " link and someone stomps on the fiber link, bad things happen. And basically if our stem", "tokens": [2113, 293, 1580, 9036, 1878, 322, 264, 12874, 2113, 11, 1578, 721, 1051, 13, 400, 1936, 498, 527, 12312], "temperature": 0.0, "avg_logprob": -0.1801403511402219, "compression_ratio": 1.6367924528301887, "no_speech_prob": 6.909650983288884e-05}, {"id": 94, "seek": 61732, "start": 617.32, "end": 624.9200000000001, "text": " is over, we don't want to have that. So we want to introduce means of having redundancy", "tokens": [307, 670, 11, 321, 500, 380, 528, 281, 362, 300, 13, 407, 321, 528, 281, 5366, 1355, 295, 1419, 27830, 6717], "temperature": 0.0, "avg_logprob": -0.14195538650859485, "compression_ratio": 1.7184466019417475, "no_speech_prob": 7.518759503000183e-06}, {"id": 95, "seek": 61732, "start": 624.9200000000001, "end": 632.08, "text": " schemes there. Basically you can't think of it as a real-time capable, real-time healing", "tokens": [26954, 456, 13, 8537, 291, 393, 380, 519, 295, 309, 382, 257, 957, 12, 3766, 8189, 11, 957, 12, 3766, 9745], "temperature": 0.0, "avg_logprob": -0.14195538650859485, "compression_ratio": 1.7184466019417475, "no_speech_prob": 7.518759503000183e-06}, {"id": 96, "seek": 61732, "start": 632.08, "end": 641.44, "text": " with no waiting time like spanning tree-ish thing you want to have. The standard spanning", "tokens": [365, 572, 3806, 565, 411, 47626, 4230, 12, 742, 551, 291, 528, 281, 362, 13, 440, 3832, 47626], "temperature": 0.0, "avg_logprob": -0.14195538650859485, "compression_ratio": 1.7184466019417475, "no_speech_prob": 7.518759503000183e-06}, {"id": 97, "seek": 61732, "start": 641.44, "end": 646.6400000000001, "text": " trees quite don't cut it for these kinds of applications. So we have to introduce other", "tokens": [5852, 1596, 500, 380, 1723, 309, 337, 613, 3685, 295, 5821, 13, 407, 321, 362, 281, 5366, 661], "temperature": 0.0, "avg_logprob": -0.14195538650859485, "compression_ratio": 1.7184466019417475, "no_speech_prob": 7.518759503000183e-06}, {"id": 98, "seek": 64664, "start": 646.64, "end": 652.12, "text": " stuff there. We have some other application requirements there. They're not so important", "tokens": [1507, 456, 13, 492, 362, 512, 661, 3861, 7728, 456, 13, 814, 434, 406, 370, 1021], "temperature": 0.0, "avg_logprob": -0.1438918408052421, "compression_ratio": 1.6168224299065421, "no_speech_prob": 1.1994270607829094e-05}, {"id": 99, "seek": 64664, "start": 652.12, "end": 660.88, "text": " so I leave them out for now. Now what does the or what kernel and user space components", "tokens": [370, 286, 1856, 552, 484, 337, 586, 13, 823, 437, 775, 264, 420, 437, 28256, 293, 4195, 1901, 6677], "temperature": 0.0, "avg_logprob": -0.1438918408052421, "compression_ratio": 1.6168224299065421, "no_speech_prob": 1.1994270607829094e-05}, {"id": 100, "seek": 64664, "start": 660.88, "end": 668.52, "text": " do we have to implement that? We will look into what the TSM components are later or", "tokens": [360, 321, 362, 281, 4445, 300, 30, 492, 486, 574, 666, 437, 264, 314, 26693, 6677, 366, 1780, 420], "temperature": 0.0, "avg_logprob": -0.1438918408052421, "compression_ratio": 1.6168224299065421, "no_speech_prob": 1.1994270607829094e-05}, {"id": 101, "seek": 64664, "start": 668.52, "end": 673.6, "text": " what the TSM standards are because that's basically just numbers and letters. So for", "tokens": [437, 264, 314, 26693, 7787, 366, 570, 300, 311, 1936, 445, 3547, 293, 7825, 13, 407, 337], "temperature": 0.0, "avg_logprob": -0.1438918408052421, "compression_ratio": 1.6168224299065421, "no_speech_prob": 1.1994270607829094e-05}, {"id": 102, "seek": 67360, "start": 673.6, "end": 680.16, "text": " time synchronization, especially TSM, we use GPTP. That's a flavor of the precision", "tokens": [565, 19331, 2144, 11, 2318, 314, 26693, 11, 321, 764, 26039, 16804, 13, 663, 311, 257, 6813, 295, 264, 18356], "temperature": 0.0, "avg_logprob": -0.2658110476554708, "compression_ratio": 1.4641350210970465, "no_speech_prob": 1.5198392247839365e-05}, {"id": 103, "seek": 67360, "start": 680.16, "end": 688.0, "text": " time protocol, generalised precision time protocol, of which you can think of PTP standard", "tokens": [565, 10336, 11, 2674, 2640, 18356, 565, 10336, 11, 295, 597, 291, 393, 519, 295, 430, 16804, 3832], "temperature": 0.0, "avg_logprob": -0.2658110476554708, "compression_ratio": 1.4641350210970465, "no_speech_prob": 1.5198392247839365e-05}, {"id": 104, "seek": 67360, "start": 688.0, "end": 695.96, "text": " PTP, IEEE 1588 boils down to layer 2. So of course we're dealing with raw, ethnic frames", "tokens": [430, 16804, 11, 286, 7258, 36, 2119, 16919, 35049, 760, 281, 4583, 568, 13, 407, 295, 1164, 321, 434, 6260, 365, 8936, 11, 14363, 12083], "temperature": 0.0, "avg_logprob": -0.2658110476554708, "compression_ratio": 1.4641350210970465, "no_speech_prob": 1.5198392247839365e-05}, {"id": 105, "seek": 67360, "start": 695.96, "end": 701.8000000000001, "text": " so we can't use UDP for transport and it also has some other quirks but they're not", "tokens": [370, 321, 393, 380, 764, 624, 11373, 337, 5495, 293, 309, 611, 575, 512, 661, 35645, 1694, 457, 436, 434, 406], "temperature": 0.0, "avg_logprob": -0.2658110476554708, "compression_ratio": 1.4641350210970465, "no_speech_prob": 1.5198392247839365e-05}, {"id": 106, "seek": 70180, "start": 701.8, "end": 707.04, "text": " too important right there. And the way we do that with Linux kernel, we have the hardware", "tokens": [886, 1021, 558, 456, 13, 400, 264, 636, 321, 360, 300, 365, 18734, 28256, 11, 321, 362, 264, 8837], "temperature": 0.0, "avg_logprob": -0.17320376092737372, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.319255120004527e-05}, {"id": 107, "seek": 70180, "start": 707.04, "end": 713.28, "text": " time sampling units and the PTP hardware clocks. That's basically the interface to", "tokens": [565, 21179, 6815, 293, 264, 430, 16804, 8837, 41528, 13, 663, 311, 1936, 264, 9226, 281], "temperature": 0.0, "avg_logprob": -0.17320376092737372, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.319255120004527e-05}, {"id": 108, "seek": 70180, "start": 713.28, "end": 720.88, "text": " hardware clocks in your FNMAC or FI. And the user space component to run all the remaining", "tokens": [8837, 41528, 294, 428, 479, 45, 44, 4378, 420, 479, 40, 13, 400, 264, 4195, 1901, 6542, 281, 1190, 439, 264, 8877], "temperature": 0.0, "avg_logprob": -0.17320376092737372, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.319255120004527e-05}, {"id": 109, "seek": 70180, "start": 720.88, "end": 725.56, "text": " stuff is PTP for Linux. That's basically the way it works and it works quite well. You", "tokens": [1507, 307, 430, 16804, 337, 18734, 13, 663, 311, 1936, 264, 636, 309, 1985, 293, 309, 1985, 1596, 731, 13, 509], "temperature": 0.0, "avg_logprob": -0.17320376092737372, "compression_ratio": 1.6355140186915889, "no_speech_prob": 3.319255120004527e-05}, {"id": 110, "seek": 72556, "start": 725.56, "end": 732.1199999999999, "text": " can achieve down to several nanoseconds precision from point to point with that. For traffic", "tokens": [393, 4584, 760, 281, 2940, 14067, 541, 28750, 18356, 490, 935, 281, 935, 365, 300, 13, 1171, 6419], "temperature": 0.0, "avg_logprob": -0.19086618533079652, "compression_ratio": 1.5646551724137931, "no_speech_prob": 1.2191176210762933e-05}, {"id": 111, "seek": 72556, "start": 732.1199999999999, "end": 737.52, "text": " shaping, that's the quality of service measure we want to employ. The kernel has the TC", "tokens": [25945, 11, 300, 311, 264, 3125, 295, 2643, 3481, 321, 528, 281, 3188, 13, 440, 28256, 575, 264, 34150], "temperature": 0.0, "avg_logprob": -0.19086618533079652, "compression_ratio": 1.5646551724137931, "no_speech_prob": 1.2191176210762933e-05}, {"id": 112, "seek": 72556, "start": 737.52, "end": 746.1999999999999, "text": " subsystem and usually if you configure that manually you use IPv2 or netlink if you want", "tokens": [2090, 9321, 293, 2673, 498, 291, 22162, 300, 16945, 291, 764, 8671, 85, 17, 420, 2533, 22473, 498, 291, 528], "temperature": 0.0, "avg_logprob": -0.19086618533079652, "compression_ratio": 1.5646551724137931, "no_speech_prob": 1.2191176210762933e-05}, {"id": 113, "seek": 72556, "start": 746.1999999999999, "end": 753.8399999999999, "text": " to do that programmatically and that's basically the way it works and we will look into a bit", "tokens": [281, 360, 300, 37648, 5030, 293, 300, 311, 1936, 264, 636, 309, 1985, 293, 321, 486, 574, 666, 257, 857], "temperature": 0.0, "avg_logprob": -0.19086618533079652, "compression_ratio": 1.5646551724137931, "no_speech_prob": 1.2191176210762933e-05}, {"id": 114, "seek": 75384, "start": 753.84, "end": 761.2800000000001, "text": " of detail later. For network management, so basically if you have to reserve a data flow", "tokens": [295, 2607, 1780, 13, 1171, 3209, 4592, 11, 370, 1936, 498, 291, 362, 281, 17824, 257, 1412, 3095], "temperature": 0.0, "avg_logprob": -0.16573797270309093, "compression_ratio": 1.5777777777777777, "no_speech_prob": 3.117660162388347e-05}, {"id": 115, "seek": 75384, "start": 761.2800000000001, "end": 766.64, "text": " from a talker to a listener, that's where it gets a bit sketchy because that's of course", "tokens": [490, 257, 751, 260, 281, 257, 31569, 11, 300, 311, 689, 309, 2170, 257, 857, 12325, 88, 570, 300, 311, 295, 1164], "temperature": 0.0, "avg_logprob": -0.16573797270309093, "compression_ratio": 1.5777777777777777, "no_speech_prob": 3.117660162388347e-05}, {"id": 116, "seek": 75384, "start": 766.64, "end": 773.12, "text": " user space demons and there aren't much. There's also a problem because there's several ways", "tokens": [4195, 1901, 19733, 293, 456, 3212, 380, 709, 13, 821, 311, 611, 257, 1154, 570, 456, 311, 2940, 2098], "temperature": 0.0, "avg_logprob": -0.16573797270309093, "compression_ratio": 1.5777777777777777, "no_speech_prob": 3.117660162388347e-05}, {"id": 117, "seek": 75384, "start": 773.12, "end": 780.24, "text": " of doing that, the traditional way or ABB style, the initial implementation used the", "tokens": [295, 884, 300, 11, 264, 5164, 636, 420, 13838, 33, 3758, 11, 264, 5883, 11420, 1143, 264], "temperature": 0.0, "avg_logprob": -0.16573797270309093, "compression_ratio": 1.5777777777777777, "no_speech_prob": 3.117660162388347e-05}, {"id": 118, "seek": 78024, "start": 780.24, "end": 790.36, "text": " so-called stream reservation protocol. Modern ways for especially pre-calculated or pre-engineered", "tokens": [370, 12, 11880, 4309, 28922, 10336, 13, 19814, 2098, 337, 2318, 659, 12, 9895, 2444, 770, 420, 659, 12, 25609, 4073], "temperature": 0.0, "avg_logprob": -0.2041044796214384, "compression_ratio": 1.4623655913978495, "no_speech_prob": 1.86217985174153e-05}, {"id": 119, "seek": 78024, "start": 790.36, "end": 798.84, "text": " networks is using young NETCON extensions and there are some demons for that but support", "tokens": [9590, 307, 1228, 2037, 426, 4850, 45541, 25129, 293, 456, 366, 512, 19733, 337, 300, 457, 1406], "temperature": 0.0, "avg_logprob": -0.2041044796214384, "compression_ratio": 1.4623655913978495, "no_speech_prob": 1.86217985174153e-05}, {"id": 120, "seek": 78024, "start": 798.84, "end": 804.8, "text": " for the TSN extensions is not too great. So if you're into that, that's quite a nice", "tokens": [337, 264, 314, 32481, 25129, 307, 406, 886, 869, 13, 407, 498, 291, 434, 666, 300, 11, 300, 311, 1596, 257, 1481], "temperature": 0.0, "avg_logprob": -0.2041044796214384, "compression_ratio": 1.4623655913978495, "no_speech_prob": 1.86217985174153e-05}, {"id": 121, "seek": 80480, "start": 804.8, "end": 815.7199999999999, "text": " thing to work on. For the real-time data packetization, that's mostly user space. Of course you want", "tokens": [551, 281, 589, 322, 13, 1171, 264, 957, 12, 3766, 1412, 20300, 2144, 11, 300, 311, 5240, 4195, 1901, 13, 2720, 1164, 291, 528], "temperature": 0.0, "avg_logprob": -0.20796469279697963, "compression_ratio": 1.4574468085106382, "no_speech_prob": 3.26433582813479e-05}, {"id": 122, "seek": 80480, "start": 815.7199999999999, "end": 824.3599999999999, "text": " to use some kernel features like ETF, Qdisk and XDP to have as low overhead as possible", "tokens": [281, 764, 512, 28256, 4122, 411, 36953, 37, 11, 1249, 67, 7797, 293, 1783, 11373, 281, 362, 382, 2295, 19922, 382, 1944], "temperature": 0.0, "avg_logprob": -0.20796469279697963, "compression_ratio": 1.4574468085106382, "no_speech_prob": 3.26433582813479e-05}, {"id": 123, "seek": 80480, "start": 824.3599999999999, "end": 830.92, "text": " and to make sure that your transmission is sent out as asynchronously as possible and", "tokens": [293, 281, 652, 988, 300, 428, 11574, 307, 2279, 484, 382, 42642, 5098, 382, 1944, 293], "temperature": 0.0, "avg_logprob": -0.20796469279697963, "compression_ratio": 1.4574468085106382, "no_speech_prob": 3.26433582813479e-05}, {"id": 124, "seek": 83092, "start": 830.92, "end": 838.56, "text": " you want to use offloading for that and then there's some very application-specific user", "tokens": [291, 528, 281, 764, 766, 2907, 278, 337, 300, 293, 550, 456, 311, 512, 588, 3861, 12, 29258, 4195], "temperature": 0.0, "avg_logprob": -0.2776023201320482, "compression_ratio": 1.382198952879581, "no_speech_prob": 3.643408490461297e-05}, {"id": 125, "seek": 83092, "start": 838.56, "end": 845.9599999999999, "text": " space components. So for audio-video stuff, you can use the G-streamer plugins and for", "tokens": [1901, 6677, 13, 407, 337, 6278, 12, 40876, 1507, 11, 291, 393, 764, 264, 460, 12, 9291, 260, 33759, 293, 337], "temperature": 0.0, "avg_logprob": -0.2776023201320482, "compression_ratio": 1.382198952879581, "no_speech_prob": 3.643408490461297e-05}, {"id": 126, "seek": 83092, "start": 845.9599999999999, "end": 853.28, "text": " industrial control, I'd recommend to use a 2G Open 6651 implementation. That's not quite", "tokens": [9987, 1969, 11, 286, 1116, 2748, 281, 764, 257, 568, 38, 7238, 1386, 16824, 16, 11420, 13, 663, 311, 406, 1596], "temperature": 0.0, "avg_logprob": -0.2776023201320482, "compression_ratio": 1.382198952879581, "no_speech_prob": 3.643408490461297e-05}, {"id": 127, "seek": 85328, "start": 853.28, "end": 860.88, "text": " finished yet but it's a good starting point at least. And for the link layer redundancy,", "tokens": [4335, 1939, 457, 309, 311, 257, 665, 2891, 935, 412, 1935, 13, 400, 337, 264, 2113, 4583, 27830, 6717, 11], "temperature": 0.0, "avg_logprob": -0.1496587073665926, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.2803373212809674e-05}, {"id": 128, "seek": 85328, "start": 860.88, "end": 869.0799999999999, "text": " that's what PCR and FRER is, basically the standards are finished since one or two years.", "tokens": [300, 311, 437, 44022, 293, 15288, 1598, 307, 11, 1936, 264, 7787, 366, 4335, 1670, 472, 420, 732, 924, 13], "temperature": 0.0, "avg_logprob": -0.1496587073665926, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.2803373212809674e-05}, {"id": 129, "seek": 85328, "start": 869.0799999999999, "end": 875.64, "text": " There's not much hardware supporting that yet and you really want to have hardware offloading", "tokens": [821, 311, 406, 709, 8837, 7231, 300, 1939, 293, 291, 534, 528, 281, 362, 8837, 766, 2907, 278], "temperature": 0.0, "avg_logprob": -0.1496587073665926, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.2803373212809674e-05}, {"id": 130, "seek": 85328, "start": 875.64, "end": 882.4399999999999, "text": " for that. So you're basically down to proprietary vendor stacks at the moment. There are efforts", "tokens": [337, 300, 13, 407, 291, 434, 1936, 760, 281, 38992, 24321, 30792, 412, 264, 1623, 13, 821, 366, 6484], "temperature": 0.0, "avg_logprob": -0.1496587073665926, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.2803373212809674e-05}, {"id": 131, "seek": 88244, "start": 882.44, "end": 889.84, "text": " to put stuff mainline but there are not quite there yet. But stuff is coming and that's", "tokens": [281, 829, 1507, 2135, 1889, 457, 456, 366, 406, 1596, 456, 1939, 13, 583, 1507, 307, 1348, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.18909074200524223, "compression_ratio": 1.6035502958579881, "no_speech_prob": 2.7935171601711772e-05}, {"id": 132, "seek": 88244, "start": 889.84, "end": 901.6800000000001, "text": " the good thing with that. So I think one slide is missing there, which is not a too big problem.", "tokens": [264, 665, 551, 365, 300, 13, 407, 286, 519, 472, 4137, 307, 5361, 456, 11, 597, 307, 406, 257, 886, 955, 1154, 13], "temperature": 0.0, "avg_logprob": -0.18909074200524223, "compression_ratio": 1.6035502958579881, "no_speech_prob": 2.7935171601711772e-05}, {"id": 133, "seek": 88244, "start": 901.6800000000001, "end": 909.5200000000001, "text": " Yes, one slide is missing. So basically the stuff, how to put stuff together with TSN,", "tokens": [1079, 11, 472, 4137, 307, 5361, 13, 407, 1936, 264, 1507, 11, 577, 281, 829, 1507, 1214, 365, 314, 32481, 11], "temperature": 0.0, "avg_logprob": -0.18909074200524223, "compression_ratio": 1.6035502958579881, "no_speech_prob": 2.7935171601711772e-05}, {"id": 134, "seek": 90952, "start": 909.52, "end": 919.12, "text": " I will summarize it without a slide. With TSN we have GPTP, that's IEEE 802.1AS for", "tokens": [286, 486, 20858, 309, 1553, 257, 4137, 13, 2022, 314, 32481, 321, 362, 26039, 16804, 11, 300, 311, 286, 7258, 36, 4688, 17, 13, 16, 3160, 337], "temperature": 0.0, "avg_logprob": -0.16803966869007458, "compression_ratio": 1.3762886597938144, "no_speech_prob": 2.350559771002736e-05}, {"id": 135, "seek": 90952, "start": 919.12, "end": 927.16, "text": " the IEEE standard fetishists here in the room. And traffic shaping, the basic standard stuff", "tokens": [264, 286, 7258, 36, 3832, 15136, 742, 1751, 510, 294, 264, 1808, 13, 400, 6419, 25945, 11, 264, 3875, 3832, 1507], "temperature": 0.0, "avg_logprob": -0.16803966869007458, "compression_ratio": 1.3762886597938144, "no_speech_prob": 2.350559771002736e-05}, {"id": 136, "seek": 90952, "start": 927.16, "end": 934.52, "text": " is the credit-based shaper but there are more time-aware shapers available right now. They", "tokens": [307, 264, 5397, 12, 6032, 402, 2332, 457, 456, 366, 544, 565, 12, 17074, 6706, 433, 2435, 558, 586, 13, 814], "temperature": 0.0, "avg_logprob": -0.16803966869007458, "compression_ratio": 1.3762886597938144, "no_speech_prob": 2.350559771002736e-05}, {"id": 137, "seek": 93452, "start": 934.52, "end": 941.24, "text": " are basically making more efficient use of your network and the way that works is basically", "tokens": [366, 1936, 1455, 544, 7148, 764, 295, 428, 3209, 293, 264, 636, 300, 1985, 307, 1936], "temperature": 0.0, "avg_logprob": -0.24168140657486453, "compression_ratio": 1.5930232558139534, "no_speech_prob": 8.523881660948973e-06}, {"id": 138, "seek": 93452, "start": 941.24, "end": 950.56, "text": " a reserving bandwidth along your data flow path in your network. Network management,", "tokens": [257, 725, 20186, 23647, 2051, 428, 1412, 3095, 3100, 294, 428, 3209, 13, 12640, 4592, 11], "temperature": 0.0, "avg_logprob": -0.24168140657486453, "compression_ratio": 1.5930232558139534, "no_speech_prob": 8.523881660948973e-06}, {"id": 139, "seek": 93452, "start": 950.56, "end": 959.88, "text": " again, that's a bit, that's a bit application-specific. So the audio video and professional audio", "tokens": [797, 11, 300, 311, 257, 857, 11, 300, 311, 257, 857, 3861, 12, 29258, 13, 407, 264, 6278, 960, 293, 4843, 6278], "temperature": 0.0, "avg_logprob": -0.24168140657486453, "compression_ratio": 1.5930232558139534, "no_speech_prob": 8.523881660948973e-06}, {"id": 140, "seek": 95988, "start": 959.88, "end": 968.04, "text": " video stuff is still using the stream reservation protocols and for the payload, as I already", "tokens": [960, 1507, 307, 920, 1228, 264, 4309, 28922, 20618, 293, 337, 264, 30918, 11, 382, 286, 1217], "temperature": 0.0, "avg_logprob": -0.22008130608535395, "compression_ratio": 1.60352422907489, "no_speech_prob": 1.919212081702426e-05}, {"id": 141, "seek": 95988, "start": 968.04, "end": 976.36, "text": " told, that's really, really application-specific. And for redundancy we use PCR and FRER. Usually", "tokens": [1907, 11, 300, 311, 534, 11, 534, 3861, 12, 29258, 13, 400, 337, 27830, 6717, 321, 764, 44022, 293, 15288, 1598, 13, 11419], "temperature": 0.0, "avg_logprob": -0.22008130608535395, "compression_ratio": 1.60352422907489, "no_speech_prob": 1.919212081702426e-05}, {"id": 142, "seek": 95988, "start": 976.36, "end": 982.32, "text": " there are some exceptions to that, especially for professional audio video. PCR and FRER", "tokens": [456, 366, 512, 22847, 281, 300, 11, 2318, 337, 4843, 6278, 960, 13, 44022, 293, 15288, 1598], "temperature": 0.0, "avg_logprob": -0.22008130608535395, "compression_ratio": 1.60352422907489, "no_speech_prob": 1.919212081702426e-05}, {"id": 143, "seek": 95988, "start": 982.32, "end": 986.88, "text": " were unstandardized when those standards were written so there are some proprietary", "tokens": [645, 517, 1115, 515, 1602, 562, 729, 7787, 645, 3720, 370, 456, 366, 512, 38992], "temperature": 0.0, "avg_logprob": -0.22008130608535395, "compression_ratio": 1.60352422907489, "no_speech_prob": 1.919212081702426e-05}, {"id": 144, "seek": 98688, "start": 986.88, "end": 994.36, "text": " or not proprietary but some other redundancy schemes where you basically send two different", "tokens": [420, 406, 38992, 457, 512, 661, 27830, 6717, 26954, 689, 291, 1936, 2845, 732, 819], "temperature": 0.0, "avg_logprob": -0.16915628827851395, "compression_ratio": 1.5224719101123596, "no_speech_prob": 1.7468701116740704e-05}, {"id": 145, "seek": 98688, "start": 994.36, "end": 1004.0, "text": " streams and try to separate your networks via means of VLANs usually and try to force", "tokens": [15842, 293, 853, 281, 4994, 428, 9590, 5766, 1355, 295, 691, 36527, 82, 2673, 293, 853, 281, 3464], "temperature": 0.0, "avg_logprob": -0.16915628827851395, "compression_ratio": 1.5224719101123596, "no_speech_prob": 1.7468701116740704e-05}, {"id": 146, "seek": 98688, "start": 1004.0, "end": 1012.04, "text": " different data paths through network. Basically nowadays you want to go PCR and FRER whenever", "tokens": [819, 1412, 14518, 807, 3209, 13, 8537, 13434, 291, 528, 281, 352, 44022, 293, 15288, 1598, 5699], "temperature": 0.0, "avg_logprob": -0.16915628827851395, "compression_ratio": 1.5224719101123596, "no_speech_prob": 1.7468701116740704e-05}, {"id": 147, "seek": 101204, "start": 1012.04, "end": 1020.04, "text": " your hardware supports that. So state of the union, the hard stuff is already done. So", "tokens": [428, 8837, 9346, 300, 13, 407, 1785, 295, 264, 11671, 11, 264, 1152, 1507, 307, 1217, 1096, 13, 407], "temperature": 0.0, "avg_logprob": -0.21718212962150574, "compression_ratio": 1.5847953216374269, "no_speech_prob": 1.6161766325240023e-05}, {"id": 148, "seek": 101204, "start": 1020.04, "end": 1027.44, "text": " there's already implementations in the kernel, there are user space demons available. That's", "tokens": [456, 311, 1217, 4445, 763, 294, 264, 28256, 11, 456, 366, 4195, 1901, 19733, 2435, 13, 663, 311], "temperature": 0.0, "avg_logprob": -0.21718212962150574, "compression_ratio": 1.5847953216374269, "no_speech_prob": 1.6161766325240023e-05}, {"id": 149, "seek": 101204, "start": 1027.44, "end": 1034.3999999999999, "text": " again the stuff that's difficult to get right. So if you want to implement those standards,", "tokens": [797, 264, 1507, 300, 311, 2252, 281, 483, 558, 13, 407, 498, 291, 528, 281, 4445, 729, 7787, 11], "temperature": 0.0, "avg_logprob": -0.21718212962150574, "compression_ratio": 1.5847953216374269, "no_speech_prob": 1.6161766325240023e-05}, {"id": 150, "seek": 103440, "start": 1034.4, "end": 1042.4, "text": " first of all you have to read tons of paper. I did that for an employer, took me two years.", "tokens": [700, 295, 439, 291, 362, 281, 1401, 9131, 295, 3035, 13, 286, 630, 300, 337, 364, 16205, 11, 1890, 385, 732, 924, 13], "temperature": 0.0, "avg_logprob": -0.16336607682077509, "compression_ratio": 1.6543778801843319, "no_speech_prob": 4.1546104512235615e-06}, {"id": 151, "seek": 103440, "start": 1042.4, "end": 1047.96, "text": " So that's really hard to get right. And the good thing is that that is already implemented,", "tokens": [407, 300, 311, 534, 1152, 281, 483, 558, 13, 400, 264, 665, 551, 307, 300, 300, 307, 1217, 12270, 11], "temperature": 0.0, "avg_logprob": -0.16336607682077509, "compression_ratio": 1.6543778801843319, "no_speech_prob": 4.1546104512235615e-06}, {"id": 152, "seek": 103440, "start": 1047.96, "end": 1055.6000000000001, "text": " you just have to use it and you have to use the right knobs. For some stuff like GPTP and", "tokens": [291, 445, 362, 281, 764, 309, 293, 291, 362, 281, 764, 264, 558, 46999, 13, 1171, 512, 1507, 411, 26039, 16804, 293], "temperature": 0.0, "avg_logprob": -0.16336607682077509, "compression_ratio": 1.6543778801843319, "no_speech_prob": 4.1546104512235615e-06}, {"id": 153, "seek": 103440, "start": 1055.6000000000001, "end": 1062.0800000000002, "text": " traffic shaping you want to really, really use, for GPTP you have to use, for traffic", "tokens": [6419, 25945, 291, 528, 281, 534, 11, 534, 764, 11, 337, 26039, 16804, 291, 362, 281, 764, 11, 337, 6419], "temperature": 0.0, "avg_logprob": -0.16336607682077509, "compression_ratio": 1.6543778801843319, "no_speech_prob": 4.1546104512235615e-06}, {"id": 154, "seek": 106208, "start": 1062.08, "end": 1068.96, "text": " shaping you want to use, hardware offloading. You have to bear in mind that your network", "tokens": [25945, 291, 528, 281, 764, 11, 8837, 766, 2907, 278, 13, 509, 362, 281, 6155, 294, 1575, 300, 428, 3209], "temperature": 0.0, "avg_logprob": -0.19006166003999256, "compression_ratio": 1.5053763440860215, "no_speech_prob": 1.777199940988794e-05}, {"id": 155, "seek": 106208, "start": 1068.96, "end": 1077.28, "text": " gear has to support explicitly GPTP and traffic shaping. So about the preservation and basically", "tokens": [7394, 575, 281, 1406, 20803, 26039, 16804, 293, 6419, 25945, 13, 407, 466, 264, 27257, 293, 1936], "temperature": 0.0, "avg_logprob": -0.19006166003999256, "compression_ratio": 1.5053763440860215, "no_speech_prob": 1.777199940988794e-05}, {"id": 156, "seek": 106208, "start": 1077.28, "end": 1086.56, "text": " making sure that your traffic shaping is applied properly. That's not true for every hardware,", "tokens": [1455, 988, 300, 428, 6419, 25945, 307, 6456, 6108, 13, 663, 311, 406, 2074, 337, 633, 8837, 11], "temperature": 0.0, "avg_logprob": -0.19006166003999256, "compression_ratio": 1.5053763440860215, "no_speech_prob": 1.777199940988794e-05}, {"id": 157, "seek": 108656, "start": 1086.56, "end": 1093.6799999999998, "text": " especially not for commodity hardware. And bear in mind that sometimes configuration", "tokens": [2318, 406, 337, 29125, 8837, 13, 400, 6155, 294, 1575, 300, 2171, 11694], "temperature": 0.0, "avg_logprob": -0.15091014218020748, "compression_ratio": 1.6415094339622642, "no_speech_prob": 9.504824447503779e-06}, {"id": 158, "seek": 108656, "start": 1093.6799999999998, "end": 1100.8799999999999, "text": " especially for traffic shaping can be quite tricky. As I said, I have added bonus slides", "tokens": [2318, 337, 6419, 25945, 393, 312, 1596, 12414, 13, 1018, 286, 848, 11, 286, 362, 3869, 10882, 9788], "temperature": 0.0, "avg_logprob": -0.15091014218020748, "compression_ratio": 1.6415094339622642, "no_speech_prob": 9.504824447503779e-06}, {"id": 159, "seek": 108656, "start": 1100.8799999999999, "end": 1107.96, "text": " to the presentation. I will check that they have the right slides in there later on or", "tokens": [281, 264, 5860, 13, 286, 486, 1520, 300, 436, 362, 264, 558, 9788, 294, 456, 1780, 322, 420], "temperature": 0.0, "avg_logprob": -0.15091014218020748, "compression_ratio": 1.6415094339622642, "no_speech_prob": 9.504824447503779e-06}, {"id": 160, "seek": 108656, "start": 1107.96, "end": 1114.96, "text": " just contact me. And the point is especially credit based shapers can be really, really", "tokens": [445, 3385, 385, 13, 400, 264, 935, 307, 2318, 5397, 2361, 6706, 433, 393, 312, 534, 11, 534], "temperature": 0.0, "avg_logprob": -0.15091014218020748, "compression_ratio": 1.6415094339622642, "no_speech_prob": 9.504824447503779e-06}, {"id": 161, "seek": 111496, "start": 1114.96, "end": 1120.1200000000001, "text": " tricky to set up properly and to make sure that you reserve the bandwidth you want because", "tokens": [12414, 281, 992, 493, 6108, 293, 281, 652, 988, 300, 291, 17824, 264, 23647, 291, 528, 570], "temperature": 0.0, "avg_logprob": -0.14687751588367282, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.19309939793311e-05}, {"id": 162, "seek": 111496, "start": 1120.1200000000001, "end": 1126.44, "text": " you want to have the remaining bandwidth to be available for best effort traffic. So", "tokens": [291, 528, 281, 362, 264, 8877, 23647, 281, 312, 2435, 337, 1151, 4630, 6419, 13, 407], "temperature": 0.0, "avg_logprob": -0.14687751588367282, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.19309939793311e-05}, {"id": 163, "seek": 111496, "start": 1126.44, "end": 1131.52, "text": " the idea is that you can use like say 70% of your link for your audio video stuff and", "tokens": [264, 1558, 307, 300, 291, 393, 764, 411, 584, 5285, 4, 295, 428, 2113, 337, 428, 6278, 960, 1507, 293], "temperature": 0.0, "avg_logprob": -0.14687751588367282, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.19309939793311e-05}, {"id": 164, "seek": 111496, "start": 1131.52, "end": 1136.68, "text": " still have like 30% of your gigabit link, which is what we're usually dealing with for", "tokens": [920, 362, 411, 2217, 4, 295, 428, 8741, 455, 270, 2113, 11, 597, 307, 437, 321, 434, 2673, 6260, 365, 337], "temperature": 0.0, "avg_logprob": -0.14687751588367282, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.19309939793311e-05}, {"id": 165, "seek": 113668, "start": 1136.68, "end": 1145.44, "text": " like audio video available for just best effort network management traffic and what so ever.", "tokens": [411, 6278, 960, 2435, 337, 445, 1151, 4630, 3209, 4592, 6419, 293, 437, 370, 1562, 13], "temperature": 0.0, "avg_logprob": -0.22579047259162455, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.755992656806484e-05}, {"id": 166, "seek": 113668, "start": 1145.44, "end": 1151.68, "text": " So you really want to make sure your shapers are configured the right way TM. And it's", "tokens": [407, 291, 534, 528, 281, 652, 988, 428, 6706, 433, 366, 30538, 264, 558, 636, 33550, 13, 400, 309, 311], "temperature": 0.0, "avg_logprob": -0.22579047259162455, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.755992656806484e-05}, {"id": 167, "seek": 113668, "start": 1151.68, "end": 1159.88, "text": " quite hard to treat the right knobs and IP route too. So there are good examples and", "tokens": [1596, 1152, 281, 2387, 264, 558, 46999, 293, 8671, 7955, 886, 13, 407, 456, 366, 665, 5110, 293], "temperature": 0.0, "avg_logprob": -0.22579047259162455, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.755992656806484e-05}, {"id": 168, "seek": 113668, "start": 1159.88, "end": 1165.6000000000001, "text": " I'd strongly recommend to read the docs on that. There's also a link to the TSN read", "tokens": [286, 1116, 10613, 2748, 281, 1401, 264, 45623, 322, 300, 13, 821, 311, 611, 257, 2113, 281, 264, 37645, 45, 1401], "temperature": 0.0, "avg_logprob": -0.22579047259162455, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.755992656806484e-05}, {"id": 169, "seek": 116560, "start": 1165.6, "end": 1172.6, "text": " the docs for Linux. It's quite a good starting point for getting into that whole topic. And", "tokens": [264, 45623, 337, 18734, 13, 467, 311, 1596, 257, 665, 2891, 935, 337, 1242, 666, 300, 1379, 4829, 13, 400], "temperature": 0.0, "avg_logprob": -0.23407366010877823, "compression_ratio": 1.3206106870229009, "no_speech_prob": 0.00011621259909588844}, {"id": 170, "seek": 116560, "start": 1172.6, "end": 1187.6799999999998, "text": " yeah, basically I think that's it. Do you have any questions? Any questions here?", "tokens": [1338, 11, 1936, 286, 519, 300, 311, 309, 13, 1144, 291, 362, 604, 1651, 30, 2639, 1651, 510, 30], "temperature": 0.0, "avg_logprob": -0.23407366010877823, "compression_ratio": 1.3206106870229009, "no_speech_prob": 0.00011621259909588844}, {"id": 171, "seek": 118768, "start": 1187.68, "end": 1195.76, "text": " Thanks for this. What's the highest speed Ethernet implementation of this you've seen?", "tokens": [2561, 337, 341, 13, 708, 311, 264, 6343, 3073, 38636, 7129, 11420, 295, 341, 291, 600, 1612, 30], "temperature": 0.0, "avg_logprob": -0.2358303992978988, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.00017753787687979639}, {"id": 172, "seek": 118768, "start": 1195.76, "end": 1204.3200000000002, "text": " Have you seen anything beyond like 10 gig E for example? I have seen a 10 gig implementation", "tokens": [3560, 291, 1612, 1340, 4399, 411, 1266, 8741, 462, 337, 1365, 30, 286, 362, 1612, 257, 1266, 8741, 11420], "temperature": 0.0, "avg_logprob": -0.2358303992978988, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.00017753787687979639}, {"id": 173, "seek": 118768, "start": 1204.3200000000002, "end": 1211.96, "text": " for that. As far as I recall the standards and have some limitations with respect to", "tokens": [337, 300, 13, 1018, 1400, 382, 286, 9901, 264, 7787, 293, 362, 512, 15705, 365, 3104, 281], "temperature": 0.0, "avg_logprob": -0.2358303992978988, "compression_ratio": 1.5348837209302326, "no_speech_prob": 0.00017753787687979639}, {"id": 174, "seek": 121196, "start": 1211.96, "end": 1221.72, "text": " how you communicate your bandwidth requirements and they're a bit capped. I'm sure and I know", "tokens": [577, 291, 7890, 428, 23647, 7728, 293, 436, 434, 257, 857, 1335, 3320, 13, 286, 478, 988, 293, 286, 458], "temperature": 0.0, "avg_logprob": -0.15001298535254695, "compression_ratio": 1.4972972972972973, "no_speech_prob": 1.6419899111497216e-05}, {"id": 175, "seek": 121196, "start": 1221.72, "end": 1227.28, "text": " that they are working on that for future revisions of the standards because of course now faster", "tokens": [300, 436, 366, 1364, 322, 300, 337, 2027, 3698, 4252, 295, 264, 7787, 570, 295, 1164, 586, 4663], "temperature": 0.0, "avg_logprob": -0.15001298535254695, "compression_ratio": 1.4972972972972973, "no_speech_prob": 1.6419899111497216e-05}, {"id": 176, "seek": 121196, "start": 1227.28, "end": 1236.0, "text": " links are becoming available more and more. Most applications for TSN like the control", "tokens": [6123, 366, 5617, 2435, 544, 293, 544, 13, 4534, 5821, 337, 37645, 45, 411, 264, 1969], "temperature": 0.0, "avg_logprob": -0.15001298535254695, "compression_ratio": 1.4972972972972973, "no_speech_prob": 1.6419899111497216e-05}, {"id": 177, "seek": 123600, "start": 1236.0, "end": 1242.84, "text": " stuff or the AV stuff are running on 100 megabit links still. You want to go to gigabit links", "tokens": [1507, 420, 264, 30198, 1507, 366, 2614, 322, 2319, 10816, 455, 270, 6123, 920, 13, 509, 528, 281, 352, 281, 8741, 455, 270, 6123], "temperature": 0.0, "avg_logprob": -0.1888025469250149, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.0002261697081848979}, {"id": 178, "seek": 123600, "start": 1242.84, "end": 1251.72, "text": " because you can achieve quite a bit lower end to end latencies on faster links. But", "tokens": [570, 291, 393, 4584, 1596, 257, 857, 3126, 917, 281, 917, 4465, 6464, 322, 4663, 6123, 13, 583], "temperature": 0.0, "avg_logprob": -0.1888025469250149, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.0002261697081848979}, {"id": 179, "seek": 123600, "start": 1251.72, "end": 1259.08, "text": " I haven't seen, personally haven't seen faster stuff than 10 gigs so far. But I'd be interested", "tokens": [286, 2378, 380, 1612, 11, 5665, 2378, 380, 1612, 4663, 1507, 813, 1266, 34586, 370, 1400, 13, 583, 286, 1116, 312, 3102], "temperature": 0.0, "avg_logprob": -0.1888025469250149, "compression_ratio": 1.5511363636363635, "no_speech_prob": 0.0002261697081848979}, {"id": 180, "seek": 125908, "start": 1259.08, "end": 1266.52, "text": " to do so. Do you have happy stories or really users", "tokens": [281, 360, 370, 13, 1144, 291, 362, 2055, 3676, 420, 534, 5022], "temperature": 0.0, "avg_logprob": -0.23653938895777651, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.00048150005750358105}, {"id": 181, "seek": 125908, "start": 1266.52, "end": 1273.3999999999999, "text": " that have put this in production and can you tell more about this? Yeah, so if you want", "tokens": [300, 362, 829, 341, 294, 4265, 293, 393, 291, 980, 544, 466, 341, 30, 865, 11, 370, 498, 291, 528], "temperature": 0.0, "avg_logprob": -0.23653938895777651, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.00048150005750358105}, {"id": 182, "seek": 125908, "start": 1273.3999999999999, "end": 1280.1999999999998, "text": " to check that out you can just Google for Milan and TSN which is the professional audio", "tokens": [281, 1520, 300, 484, 291, 393, 445, 3329, 337, 32874, 293, 37645, 45, 597, 307, 264, 4843, 6278], "temperature": 0.0, "avg_logprob": -0.23653938895777651, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.00048150005750358105}, {"id": 183, "seek": 125908, "start": 1280.1999999999998, "end": 1286.28, "text": " video stuff and they just before Covid started, shortly before Covid started they ran the", "tokens": [960, 1507, 293, 436, 445, 949, 14633, 1409, 11, 13392, 949, 14633, 1409, 436, 5872, 264], "temperature": 0.0, "avg_logprob": -0.23653938895777651, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.00048150005750358105}, {"id": 184, "seek": 128628, "start": 1286.28, "end": 1293.72, "text": " Rammstein concert in Munich over a TSN system. It's a really large system with several video", "tokens": [497, 5136, 9089, 8543, 294, 40601, 670, 257, 37645, 45, 1185, 13, 467, 311, 257, 534, 2416, 1185, 365, 2940, 960], "temperature": 0.0, "avg_logprob": -0.1960306621733166, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.00021188527171034366}, {"id": 185, "seek": 128628, "start": 1293.72, "end": 1301.72, "text": " walls and several like hundreds or thousands of audio streams and pyrotechnics and light", "tokens": [7920, 293, 2940, 411, 6779, 420, 5383, 295, 6278, 15842, 293, 280, 6016, 31843, 1167, 293, 1442], "temperature": 0.0, "avg_logprob": -0.1960306621733166, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.00021188527171034366}, {"id": 186, "seek": 128628, "start": 1301.72, "end": 1306.92, "text": " control and stuff all in the same network converged. So that's the largest installation", "tokens": [1969, 293, 1507, 439, 294, 264, 912, 3209, 9652, 3004, 13, 407, 300, 311, 264, 6443, 13260], "temperature": 0.0, "avg_logprob": -0.1960306621733166, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.00021188527171034366}, {"id": 187, "seek": 130692, "start": 1306.92, "end": 1317.0, "text": " for live audio I know of and I think that's quite a good story to tell. I was curious", "tokens": [337, 1621, 6278, 286, 458, 295, 293, 286, 519, 300, 311, 1596, 257, 665, 1657, 281, 980, 13, 286, 390, 6369], "temperature": 0.0, "avg_logprob": -0.1546634176503057, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.0003324644931126386}, {"id": 188, "seek": 130692, "start": 1317.0, "end": 1323.04, "text": " if you had the chance to play around with synchronous ethernet as well. I haven't looked", "tokens": [498, 291, 632, 264, 2931, 281, 862, 926, 365, 44743, 37096, 7129, 382, 731, 13, 286, 2378, 380, 2956], "temperature": 0.0, "avg_logprob": -0.1546634176503057, "compression_ratio": 1.3488372093023255, "no_speech_prob": 0.0003324644931126386}, {"id": 189, "seek": 132304, "start": 1323.04, "end": 1338.36, "text": " into that too deep yet so I can't tell you too much about that.", "tokens": [666, 300, 886, 2452, 1939, 370, 286, 393, 380, 980, 291, 886, 709, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.1293942608050446, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.00011141449067508802}, {"id": 190, "seek": 132304, "start": 1338.36, "end": 1346.24, "text": " You mentioned XTP. Are you aware of any applications of XTP in that area? To be honest I haven't", "tokens": [509, 2835, 1783, 16804, 13, 2014, 291, 3650, 295, 604, 5821, 295, 1783, 16804, 294, 300, 1859, 30, 1407, 312, 3245, 286, 2378, 380], "temperature": 0.0, "avg_logprob": -0.1293942608050446, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.00011141449067508802}, {"id": 191, "seek": 132304, "start": 1346.24, "end": 1352.76, "text": " seen them and I will start working on some of them for a customer project in just a few", "tokens": [1612, 552, 293, 286, 486, 722, 1364, 322, 512, 295, 552, 337, 257, 5474, 1716, 294, 445, 257, 1326], "temperature": 0.0, "avg_logprob": -0.1293942608050446, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.00011141449067508802}, {"id": 192, "seek": 135276, "start": 1352.76, "end": 1360.8, "text": " weeks probably. The idea is that basically because it's layer 2 you don't have much", "tokens": [3259, 1391, 13, 440, 1558, 307, 300, 1936, 570, 309, 311, 4583, 568, 291, 500, 380, 362, 709], "temperature": 0.0, "avg_logprob": -0.14323248182024276, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.0001983968395506963}, {"id": 193, "seek": 135276, "start": 1360.8, "end": 1368.84, "text": " network stack above the hardware layer. So if you can cut some of the Linux networking", "tokens": [3209, 8630, 3673, 264, 8837, 4583, 13, 407, 498, 291, 393, 1723, 512, 295, 264, 18734, 17985], "temperature": 0.0, "avg_logprob": -0.14323248182024276, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.0001983968395506963}, {"id": 194, "seek": 135276, "start": 1368.84, "end": 1375.36, "text": " stack because you don't use it anyway, you work on raw sockets anyway, you could just", "tokens": [8630, 570, 291, 500, 380, 764, 309, 4033, 11, 291, 589, 322, 8936, 370, 11984, 4033, 11, 291, 727, 445], "temperature": 0.0, "avg_logprob": -0.14323248182024276, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.0001983968395506963}, {"id": 195, "seek": 137536, "start": 1375.36, "end": 1385.1999999999998, "text": " cut some of that out and try to achieve lower latencies in your basically Linux stack there.", "tokens": [1723, 512, 295, 300, 484, 293, 853, 281, 4584, 3126, 4465, 6464, 294, 428, 1936, 18734, 8630, 456, 13], "temperature": 0.0, "avg_logprob": -0.1995424831614775, "compression_ratio": 1.588785046728972, "no_speech_prob": 8.396415069000795e-05}, {"id": 196, "seek": 137536, "start": 1385.1999999999998, "end": 1390.6, "text": " Probably on the next Fostum I can probably give you a talk on that.", "tokens": [9210, 322, 264, 958, 479, 555, 449, 286, 393, 1391, 976, 291, 257, 751, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.1995424831614775, "compression_ratio": 1.588785046728972, "no_speech_prob": 8.396415069000795e-05}, {"id": 197, "seek": 137536, "start": 1390.6, "end": 1394.9199999999998, "text": " This is probably a big question but how do you go about debugging this sort of stuff", "tokens": [639, 307, 1391, 257, 955, 1168, 457, 577, 360, 291, 352, 466, 45592, 341, 1333, 295, 1507], "temperature": 0.0, "avg_logprob": -0.1995424831614775, "compression_ratio": 1.588785046728972, "no_speech_prob": 8.396415069000795e-05}, {"id": 198, "seek": 137536, "start": 1394.9199999999998, "end": 1401.28, "text": " so like setting it up or if you think there's a problem, how do you go about finding problems?", "tokens": [370, 411, 3287, 309, 493, 420, 498, 291, 519, 456, 311, 257, 1154, 11, 577, 360, 291, 352, 466, 5006, 2740, 30], "temperature": 0.0, "avg_logprob": -0.1995424831614775, "compression_ratio": 1.588785046728972, "no_speech_prob": 8.396415069000795e-05}, {"id": 199, "seek": 140128, "start": 1401.28, "end": 1409.76, "text": " That's actually a bit of a pain point and you have to know at least a bit what same", "tokens": [663, 311, 767, 257, 857, 295, 257, 1822, 935, 293, 291, 362, 281, 458, 412, 1935, 257, 857, 437, 912], "temperature": 0.0, "avg_logprob": -0.1414591542790445, "compression_ratio": 1.627906976744186, "no_speech_prob": 9.019322897074744e-05}, {"id": 200, "seek": 140128, "start": 1409.76, "end": 1417.56, "text": " values for like path delays for the PTP and stuff are and one of the most useful debugging", "tokens": [4190, 337, 411, 3100, 28610, 337, 264, 430, 16804, 293, 1507, 366, 293, 472, 295, 264, 881, 4420, 45592], "temperature": 0.0, "avg_logprob": -0.1414591542790445, "compression_ratio": 1.627906976744186, "no_speech_prob": 9.019322897074744e-05}, {"id": 201, "seek": 140128, "start": 1417.56, "end": 1423.28, "text": " tools I've found so far is a good ethernet switch because it will give you like output", "tokens": [3873, 286, 600, 1352, 370, 1400, 307, 257, 665, 37096, 7129, 3679, 570, 309, 486, 976, 291, 411, 5598], "temperature": 0.0, "avg_logprob": -0.1414591542790445, "compression_ratio": 1.627906976744186, "no_speech_prob": 9.019322897074744e-05}, {"id": 202, "seek": 140128, "start": 1423.28, "end": 1430.52, "text": " for your stream reservations, it will give you output for your PTP or GPTP. You can also", "tokens": [337, 428, 4309, 40222, 11, 309, 486, 976, 291, 5598, 337, 428, 430, 16804, 420, 26039, 16804, 13, 509, 393, 611], "temperature": 0.0, "avg_logprob": -0.1414591542790445, "compression_ratio": 1.627906976744186, "no_speech_prob": 9.019322897074744e-05}, {"id": 203, "seek": 143052, "start": 1430.52, "end": 1440.32, "text": " like sniff traffic with wiretaps basically and analyze it in Wireshark or Skypie or whatever", "tokens": [411, 31101, 6419, 365, 6234, 83, 2382, 1936, 293, 12477, 309, 294, 343, 3145, 71, 809, 420, 9879, 9144, 420, 2035], "temperature": 0.0, "avg_logprob": -0.18246224585999835, "compression_ratio": 1.5701754385964912, "no_speech_prob": 1.4734197975485586e-05}, {"id": 204, "seek": 143052, "start": 1440.32, "end": 1446.08, "text": " your tool of choice is. That works best to be honest for 100 megabit links because you", "tokens": [428, 2290, 295, 3922, 307, 13, 663, 1985, 1151, 281, 312, 3245, 337, 2319, 10816, 455, 270, 6123, 570, 291], "temperature": 0.0, "avg_logprob": -0.18246224585999835, "compression_ratio": 1.5701754385964912, "no_speech_prob": 1.4734197975485586e-05}, {"id": 205, "seek": 143052, "start": 1446.08, "end": 1452.0, "text": " can use passive tabs. It doesn't work that great for gigabit links because it violates", "tokens": [393, 764, 14975, 20743, 13, 467, 1177, 380, 589, 300, 869, 337, 8741, 455, 270, 6123, 570, 309, 3448, 1024], "temperature": 0.0, "avg_logprob": -0.18246224585999835, "compression_ratio": 1.5701754385964912, "no_speech_prob": 1.4734197975485586e-05}, {"id": 206, "seek": 143052, "start": 1452.0, "end": 1459.76, "text": " some of the sound it's a bit. You can also use like mirror ports and switches to exfiltrate", "tokens": [512, 295, 264, 1626, 309, 311, 257, 857, 13, 509, 393, 611, 764, 411, 8013, 18160, 293, 19458, 281, 454, 69, 2352, 4404], "temperature": 0.0, "avg_logprob": -0.18246224585999835, "compression_ratio": 1.5701754385964912, "no_speech_prob": 1.4734197975485586e-05}, {"id": 207, "seek": 145976, "start": 1459.76, "end": 1467.4, "text": " traffic but basically it's a more manual approach of debugging and I'd like to get in touch", "tokens": [6419, 457, 1936, 309, 311, 257, 544, 9688, 3109, 295, 45592, 293, 286, 1116, 411, 281, 483, 294, 2557], "temperature": 0.0, "avg_logprob": -0.15282738593316847, "compression_ratio": 1.4734042553191489, "no_speech_prob": 2.739631054282654e-05}, {"id": 208, "seek": 145976, "start": 1467.4, "end": 1475.44, "text": " with if anyone is interested in just write me an email to start a community-based project", "tokens": [365, 498, 2878, 307, 3102, 294, 445, 2464, 385, 364, 3796, 281, 722, 257, 1768, 12, 6032, 1716], "temperature": 0.0, "avg_logprob": -0.15282738593316847, "compression_ratio": 1.4734042553191489, "no_speech_prob": 2.739631054282654e-05}, {"id": 209, "seek": 145976, "start": 1475.44, "end": 1484.76, "text": " of automated analysis of TSN networks basically because I think it's something we really really", "tokens": [295, 18473, 5215, 295, 314, 32481, 9590, 1936, 570, 286, 519, 309, 311, 746, 321, 534, 534], "temperature": 0.0, "avg_logprob": -0.15282738593316847, "compression_ratio": 1.4734042553191489, "no_speech_prob": 2.739631054282654e-05}, {"id": 210, "seek": 148476, "start": 1484.76, "end": 1492.04, "text": " need especially for people who aren't that deep into the standards and we need to make", "tokens": [643, 2318, 337, 561, 567, 3212, 380, 300, 2452, 666, 264, 7787, 293, 321, 643, 281, 652], "temperature": 0.0, "avg_logprob": -0.13496215608384873, "compression_ratio": 1.6342592592592593, "no_speech_prob": 2.8305443265708163e-05}, {"id": 211, "seek": 148476, "start": 1492.04, "end": 1499.52, "text": " sure that we can basically have a one-click check and setup and can tell from a tool that", "tokens": [988, 300, 321, 393, 1936, 362, 257, 472, 12, 18548, 1520, 293, 8657, 293, 393, 980, 490, 257, 2290, 300], "temperature": 0.0, "avg_logprob": -0.13496215608384873, "compression_ratio": 1.6342592592592593, "no_speech_prob": 2.8305443265708163e-05}, {"id": 212, "seek": 148476, "start": 1499.52, "end": 1506.24, "text": " at least if that looks okay-ish or not what you're doing but I'm not aware of any project", "tokens": [412, 1935, 498, 300, 1542, 1392, 12, 742, 420, 406, 437, 291, 434, 884, 457, 286, 478, 406, 3650, 295, 604, 1716], "temperature": 0.0, "avg_logprob": -0.13496215608384873, "compression_ratio": 1.6342592592592593, "no_speech_prob": 2.8305443265708163e-05}, {"id": 213, "seek": 148476, "start": 1506.24, "end": 1513.48, "text": " so far so I'd like to start but I'm not too experienced in how to start such a project", "tokens": [370, 1400, 370, 286, 1116, 411, 281, 722, 457, 286, 478, 406, 886, 6751, 294, 577, 281, 722, 1270, 257, 1716], "temperature": 0.0, "avg_logprob": -0.13496215608384873, "compression_ratio": 1.6342592592592593, "no_speech_prob": 2.8305443265708163e-05}, {"id": 214, "seek": 151348, "start": 1513.48, "end": 1519.92, "text": " so if you're experienced in that or are interested in that just write me an email, get in touch", "tokens": [370, 498, 291, 434, 6751, 294, 300, 420, 366, 3102, 294, 300, 445, 2464, 385, 364, 3796, 11, 483, 294, 2557], "temperature": 0.0, "avg_logprob": -0.30792812679124915, "compression_ratio": 1.3358778625954197, "no_speech_prob": 0.0002174256951548159}, {"id": 215, "seek": 151348, "start": 1519.92, "end": 1533.24, "text": " and maybe we can set up something. Any more questions? That's all the last one.", "tokens": [293, 1310, 321, 393, 992, 493, 746, 13, 2639, 544, 1651, 30, 663, 311, 439, 264, 1036, 472, 13], "temperature": 0.0, "avg_logprob": -0.30792812679124915, "compression_ratio": 1.3358778625954197, "no_speech_prob": 0.0002174256951548159}, {"id": 216, "seek": 153324, "start": 1533.24, "end": 1544.6, "text": " You mentioned some protocols for link redundancy. Can they also be used for node redundancy?", "tokens": [509, 2835, 512, 20618, 337, 2113, 27830, 6717, 13, 1664, 436, 611, 312, 1143, 337, 9984, 27830, 6717, 30], "temperature": 0.0, "avg_logprob": -0.1510386033491655, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.0009259985527023673}, {"id": 217, "seek": 153324, "start": 1544.6, "end": 1556.2, "text": " I'm not entirely sure. I would have to look something up. I think basically it should", "tokens": [286, 478, 406, 7696, 988, 13, 286, 576, 362, 281, 574, 746, 493, 13, 286, 519, 1936, 309, 820], "temperature": 0.0, "avg_logprob": -0.1510386033491655, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.0009259985527023673}, {"id": 218, "seek": 155620, "start": 1556.2, "end": 1563.6000000000001, "text": " work because it's about the data path so if one node drops out basically that would work", "tokens": [589, 570, 309, 311, 466, 264, 1412, 3100, 370, 498, 472, 9984, 11438, 484, 1936, 300, 576, 589], "temperature": 0.0, "avg_logprob": -0.2826188802719116, "compression_ratio": 1.671875, "no_speech_prob": 0.00044699906720779836}, {"id": 219, "seek": 155620, "start": 1563.6000000000001, "end": 1567.0, "text": " as well but it won't work for the endpoints so for the talk of the listener of course", "tokens": [382, 731, 457, 309, 1582, 380, 589, 337, 264, 917, 20552, 370, 337, 264, 751, 295, 264, 31569, 295, 1164], "temperature": 0.0, "avg_logprob": -0.2826188802719116, "compression_ratio": 1.671875, "no_speech_prob": 0.00044699906720779836}, {"id": 220, "seek": 155620, "start": 1567.0, "end": 1575.1200000000001, "text": " it won't work but for nodes in the middle of your graph that would probably work.", "tokens": [309, 1582, 380, 589, 457, 337, 13891, 294, 264, 2808, 295, 428, 4295, 300, 576, 1391, 589, 13], "temperature": 0.0, "avg_logprob": -0.2826188802719116, "compression_ratio": 1.671875, "no_speech_prob": 0.00044699906720779836}, {"id": 221, "seek": 155620, "start": 1575.1200000000001, "end": 1577.0, "text": " Okay thank you very much again for your presentation.", "tokens": [1033, 1309, 291, 588, 709, 797, 337, 428, 5860, 13], "temperature": 0.0, "avg_logprob": -0.2826188802719116, "compression_ratio": 1.671875, "no_speech_prob": 0.00044699906720779836}, {"id": 222, "seek": 157700, "start": 1577.0, "end": 1587.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.7783921559651693, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.0009165673400275409}], "language": "en"}