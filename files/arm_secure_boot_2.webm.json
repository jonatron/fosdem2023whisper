{"text": " Okay, so we'll start now. The topic of this presentation is overview of secure boot state in the arm-based socks and this is the second edition of this presentation. No mic here. It's only for the video. Okay, so the first edition was taken place like two years ago. So now we want to present some update from the research that we have done two years ago. Maybe you can speak up a little bit. Okay. Okay. Sorry for some... A little technical issue. Okay. Sorry for that. Okay. Okay, so it is an agenda for this presentation. So first, I will tell you who I am and where I work. So say a couple of words about our company. Next, I will just present shortly what do I mean by secure boot in the case of arm socks and present how the typical implementation and workflow works. Later, we will show the results from the first edition, so from the 2028. Then we will discuss the two cases that we check for this edition, so the Mediatek and the Rockchip cases. Next, we will summarize the whole presentation. So try to look what was different between those two editions of the presentation and with some Q&A session. So this is me. I'm Tomasz Gieski and I'm an Embedded Systems Team Leader at 3MDep. I work there over three years now. Mostly, I work on the Embedded Systems built with the Yoctop project. So I try to integrate the update system and the OS creation for the Embedded Devices. But because I work with the Embedded Devices, I try to touch different areas of the whole life of the devices. So one of the things I work with is also the system security. And this is the topic of this presentation. So here are a couple of words about our company. We are from Poland and based in Gda\u0144sk. We are the core boot license service providers since 2016. Also, UFI adopters since 2018. Yoctop recipients, so this is the area which I work with. From the 2019, also like the consultants for the FWPD project and IBM Open Power Foundation members. Okay, so now let's explain first what do you mean by the secure boot in the context of this presentation. So here we are focused on the ARM context, which is like the feature of the boot room. One of the features that boot room has. Maybe we should call it more like the verified boot because the case here is that when we start the firmware, the next steps of the loaded images are like verified. The signatures is verified by the previous part of the firmware. So that's why we should call it the verified boot maybe. So we need to like use some private key to sign the binary that we put into our machine. Then we also need to take the public key from that private key and put it also there. So when we start it, we will be able to verify the signature and decide if it should be loaded or not. In ARM context, we assume that the boot room is our root of trust. We need to take that assumption because most of them are closed source. Probably it would be better if they would be open sourced, but it is what it is. And yeah, basically like the meaning of the secure boot can be different for any given architecture. So if you would be talking about the x86, that would be a different scenario. Okay, so this is the typical implementation. We have the public key that needs to be written inside our sock. Different vendors will have some different way to achieve that. So we can, for example, fuse them using electrical fuse. So one time write them in our sock and later use it every time that we start our firmware. There is also a possibility for the OTP registers. So those are the one time programmable. So as the name says also can be used only one time. And one of those two possibilities allow us to make from our boot room a root of trust, which we later use to expand it to the chain of trust. Next components can use like different keys. So in case of secure boot, we talk about the step between the boot room and the boot loader. And here we have some one key that was used to sign the binary and that public key that was used to verify it. But the later steps of starting our machine can use different keys. And yeah, so that would be it. So typically we have like let's say our host machine. That should be some secure location and our target device. So on our host machine we generate some private keys. We build binary and use specific tool to sign them. And later we need to take the public key part of that keys. Also design a binary and put it in the target device and then try to verify it. So if the verification will be successful, then we will just boot another step. If not, then specific things can happen depends on the vendor that we are using. Also let's say maybe a couple of words about what it is to sign the binary. Basically what is common between all the vendors probably is that the sign in binary means that we take the original binary and add some header on top of it. This header contains the signature of the digital signature and also some specific format at the start which can be different across some vendors or can be also different inside within one vendor but when we are using different signing tools. So if we try to like sign our binary we can always try to dump the first couple of bytes of our signed image and check if everything goes as expected. This is a quick recap from the last edition. So we look at the 11 cases. Five of them like the NXP, IMX and Liarscape, STSTM, Xilinix and NVIDIA looks like we're like fully open sourced let's say and there was none NDA problems with them so everyone could try to take the documentation needed using and signing tools and try to implement the secure boot on them. We have a couple of cases where there are information that there is some like secure boot to enable on that given machine but it is under the NDA. So we're talking here about the Marvel Armada, Texas Instruments, Sitara, Qualcomm and Microchips and also we talk about two stocks from the Chinese vendors like Rockchip and Allwinner where like documentation was, some documentation was there, another was missing. Also there were some information about tools but we were not able to find them or maybe use them correctly. Okay, so now I will go through three or five, three or four vendors that were listed from the last edition and talk about the differences that was between those two years. So now let's start from the NXP. In these cases like I think this is the easiest way to start with the secure boot on the ARM stocks because the full documentation is there. All documentation is probably like, all documentation is publicly available so everyone can use it. We have the HAP 4.4 so the high assurance boot mechanism on the platforms that are the NXP IMX50, 53, 67 and 8M. The application note is here. The only difference between here and there is that those applications are under the free registration to the site. The same is for the IMX8 and IMX8X which uses the HAP mechanism, so advanced high assurance boot. The same for CoreQ and as you see here the signing tool are available after the free registration. For Marvel Armada we can look at the manuals that are available on their sites. We saw that for the 38 and 39 X families we have some information that NDA is needed. For other families like I believe 8K there is only information that there is a secure boot available but nothing else there. At the last edition we present that in the U-boot repositories we can find some information about how to implement the secure boot on the Marvel Armada but now it is not there. It is only on the older releases. So this is another difficult step that needs to be taken to find those informations. But if you will just use this from the 2018 branch we will see the information how to implement the secure boot but still this is only the theoretical knowledge and there is no step-by-step solution how to achieve that so probably there is a room for mistakes. In Zidia Tegria another quick update. Last time we saw that there are some documentation and tools available. We checked that within last year and it looks like the documentation is some kind of uncertain because in one point it tells that the secure boot is available and they also provide the flashing tools, the script called flash sh. But in the other place they just say that the secure boot will be available in the future. Nobody exactly knows when the future will be but yeah that would be it. Also about fusing there is additional script for that but documentation of it is also some kind of updated. There is also one thread in the forum of Zidia where someone tried to use it to fuse keys on its platform and it caused the platform to break because it looks like not every board can be fused and before we execute that we just need to check the serial numbers because some of them are supported some not. Also update on Alwinner. Still we think that there is no official documentation about the Alwinner socks which would tell us about the secure boot and also no official documentation about the secure boot itself. But we found some interesting case on the forum where someone was able to use the Nano Pioneer with Alwinner H3. And he there provides like all the useful links like the 10 or 15 of them or also the whole list of the verification process. With the link to the Sanxi tools repository which contains some tools which need to be used in order to sign the binaries and also fuse the sock. The one vulnerability there is that in any case when we. Oh sorry. One vulnerability is here that if we try to start our firmware which is signed and the verification fails. The platform always goes to the cell mode which is some kind like the Debug mode. And the Debug mode can be accessed via the USB port. So if the verification fails someone could always like plug in the USB start some me come and then read everything from the fuses or maybe even wipe them. So the solution there for that was just to destroy the USB lines data lines on that given port. So even if the platform goes into the cell mode no one will be able to just read anything from it. Okay so now the Mediatek case documentation is provided on the GitLab pages. It is based on the Yocto project like project so the steps there needs to be done inside the Yocto project build system to achieve the signing to achieve the implementing the secure boot. But basically as in other ARM socks the boot room there is like the root of trust and later we just achieve it using other mechanism to have the whole chain of trust. So after secure boot we have the TFA trusted board boot and then you can use the U-boot feed wave side boot to load our kernel image. So if we have all those steps then we have like whole boot process verified. Yeah and it also was shown in a couple of reports that the Mediatek boot room has some vulnerability which if we like power it in some special scenario then the boot room may just skip the process of verification of the image and still load the firmware so it looks like even if we like have the public key in the fuses and also the firmware signed, a public key in the fuses and we provide the unsigned image and like use this vulnerability we will be still able to boot our platform. This is a short recap how the secure boot looks on the Mediatek so we have the BL1 step which is like the boot room which load the hashed based on the root of trust public key so this is the public key that we put in the fuses and calculates also the share of the signature of the BL2 so this is like the next step loaded. After that we compare those two values and if everything is okay we go next and then we load the signature from the BL2 and also calculate the share of it, make the comparison and if everything is once again is okay we boot the next steps. And here is the process of enabling the secure boot, it is not clear from the documentation on which socks the secure boot can be enabled. The documentation mentioned the MT-83-65 and MT-83-695 ones, different socks may have different fuses indexes so it is really like we need to check those before we try to fuse our fuses in those socks but unfortunately those information is provided with NDA. In the process of enabling the secure boot we need to create the two keys, private keys and provide them to our build system which sign the BL2 load firmware and also the something called the download agent which is later used by additional proprietary tools to flush the image inside our platform which is also described like here so we have the fuse writer tool, this is another tool provided with the NDA only which can be used to like check the secure boot state on our platform and check if the download agent authentication bits are set. If they are not set we just need to set them and then like provide the public key which will be fused on the key hash zero field and after that we will just sign our firmware and use this public key to verify it. Okay so now let's go to the Rockchip case. The public key here can be stored in a fuses in the OTP and it depends on which sock we are using. If the verification of loaded binary will be successful then we will just extend our rule of trust so the boot ROM as in the other ARM core socks to the chain of trust. And later in case of Rockchip you can use the verified boot mechanism, fit verified boot mechanism from the SPL to the U-boot and from the U-boot to kernel to provide the whole chain of trust. So basically to establish it we need to like once again generate some private and public keypire, burn the public key into the fuses or OTP registers, depends on which sock we are using. Then sign our firmware called id below the image in case of Rockchip which is like the U-boot TPL plus SPL merge into one file. Then configure verified boot in SPL and U-boot which means that we will use the fit images to verify it from the SPL to U-boot and from the U-boot to kernel and just flush our signed images. Documentation for Rockchip and for our winner is like how to find and if we find any probably it will be outdated or really short or just not such useful at first. So here we have a diagram of signing the whole of enabling the secure boot but basically it is something I just described on the previous slide and sorry for that but because of time we will just need to skip the description of it. And now we can talk about signing code in Rockchip. So code can be signed using one of the two tools, the Erka sign tool which can be started on Linux or secure boot tool which can be started on Windows. Linux tools can be found on the Erka bin repository. Windows tools was a couple days ago, some time ago was on the repository called Kools tools but now we are not able to find it. For some reasons the Rockchip based repositories are maintained in such way that some things may be missing after some time. But if you use the Erka sign tool we can just generate the signing keys and those keys can be used later with the Linux or Windows tools. And if you use it and also the Erka repository provides the any files which are the files that can be used to create the mini-loader used later to fuse our keys in the firmware. And basically any given firmware that you want to sign and use in our socks can be also signed with those two tools. There is another tool just to burn the effuses and we have for that the effuse tool which is only for the Windows machines. It turns out that when we burn the effuses on the Rockchip socks we also need to provide the voltage for the one of the pins of the sock. So it is not visible here but there should be like VCC, E effuse pin which needs to be powered up when we want to fuse the keys in our sock. So for that we need to find some pin that is there and provide the power by ourselves or maybe our platform has some special circuit just to enable that. Also this information comes from another documentation that is hard to find. This is a summarized of enable the secure boot. So we need to create loader using the boot manager script that is in the Erka bin repository. Next we create the keys with Erka sign tool. Next we need to sign the loader with secure boot tool because from what we know now only signed with that tool binaries can be later used on our socks. We try to sign with the Erka sign tool and it doesn't work and now it looks like this can be hard to achieve because there is no way to download the secure boot tool from what we know now. Then we need to use the effuse tool to fuse our public key in socks and use another tool called the Erka develop tool which is in the Erka bin repository just to load the signer tool. So we need to put loader into our platform and secure boot enabled. Here is a link for the blog post which describes all of that containing all of that what we done with the Rockchip platforms. So this is the summarized of where we are after the second edition. The changes are here about the NXP platforms where it looks like we now need to register to get the socks reference documentation. The NVIDIA Tegra looks like the documentation is not really uncertain and may be outdated. The Rockchip one we know now that it can be achieved but still the documentation is not the best quality. The same with the Allwinner and for the MediaTek we see that NDA is needed to achieve the secure boot. So this is the summary of the presentation. Looks like our knowledge is expanded over the last two years. We for example know now how to enable the secure boot on the Rockchip. Still the general principles is common for all the vendors so we want to authenticate image before we load it. We have some private key to sign the firmware. We need to fuse the public key inside the sock and the boot room is still fit as the root of trust. All cases use the SHA-2456 as a hash function for digital signatures and we see that more and more cases the documentation is under the NDA or the quality of it is really not the best. Here is the way of how you can contact us and thank you for that presentation. I think we are a little after time or maybe one question if there is any. Yes. The question is about in NXP secure boot you have a possibility to use ROM in your boot loader to check the fiber block. So you can use the secure boot of NXP for more components like fit and newborn and so on. Do you know of any of those new or the chips you have analyzed other platforms have similar thing but you can call the ROM and use it as a root for trust of everything. Okay so the question was that the NXP provides the possibility to use the boot ROM to verify other parts of the firmware loaded in the whole process. And the question is if other vendors also provide such things. From what we know now this is only like the NXP case and yeah basically that's the answer. And yeah maybe this one. How is given that you analyze so many vendors how is the support among the vendors for different types of key with different trust boundaries. Like for example like the delegation key for like some select like the production in Asia. Then you would remote that key using row back levels and use cases like this. Okay so the question was I believe if we try to somehow if there are any process to in order to change the key used to sign the firmware yes. To have multiple keys like you would hand out one key. Okay to have like multiple keys to one person and to another team to another company maybe even and then later revoke it. I believe that this will be depends on if we have some mechanism in our socks to provide more than one public key yeah. But as we said those are one time only flushed in the socks so if there is only one place then I think that it will be only one the private key used later for the verification. Okay thank you.", "segments": [{"id": 0, "seek": 3000, "start": 30.0, "end": 36.0, "text": " Okay, so we'll start now.", "tokens": [50364, 1033, 11, 370, 321, 603, 722, 586, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3223686218261719, "compression_ratio": 1.4295774647887325, "no_speech_prob": 0.7073760628700256}, {"id": 1, "seek": 3000, "start": 36.0, "end": 42.0, "text": " The topic of this presentation is overview of secure boot state in the arm-based socks", "tokens": [50664, 440, 4829, 295, 341, 5860, 307, 12492, 295, 7144, 11450, 1785, 294, 264, 3726, 12, 6032, 17564, 50964], "temperature": 0.0, "avg_logprob": -0.3223686218261719, "compression_ratio": 1.4295774647887325, "no_speech_prob": 0.7073760628700256}, {"id": 2, "seek": 3000, "start": 42.0, "end": 47.0, "text": " and this is the second edition of this presentation.", "tokens": [50964, 293, 341, 307, 264, 1150, 11377, 295, 341, 5860, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3223686218261719, "compression_ratio": 1.4295774647887325, "no_speech_prob": 0.7073760628700256}, {"id": 3, "seek": 3000, "start": 47.0, "end": 50.0, "text": " No mic here.", "tokens": [51214, 883, 3123, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3223686218261719, "compression_ratio": 1.4295774647887325, "no_speech_prob": 0.7073760628700256}, {"id": 4, "seek": 3000, "start": 50.0, "end": 55.0, "text": " It's only for the video.", "tokens": [51364, 467, 311, 787, 337, 264, 960, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3223686218261719, "compression_ratio": 1.4295774647887325, "no_speech_prob": 0.7073760628700256}, {"id": 5, "seek": 5500, "start": 55.0, "end": 59.0, "text": " Okay, so the first edition was taken place like two years ago.", "tokens": [50364, 1033, 11, 370, 264, 700, 11377, 390, 2726, 1081, 411, 732, 924, 2057, 13, 50564], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 6, "seek": 5500, "start": 59.0, "end": 67.0, "text": " So now we want to present some update from the research that we have done two years ago.", "tokens": [50564, 407, 586, 321, 528, 281, 1974, 512, 5623, 490, 264, 2132, 300, 321, 362, 1096, 732, 924, 2057, 13, 50964], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 7, "seek": 5500, "start": 67.0, "end": 69.0, "text": " Maybe you can speak up a little bit.", "tokens": [50964, 2704, 291, 393, 1710, 493, 257, 707, 857, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 8, "seek": 5500, "start": 69.0, "end": 71.0, "text": " Okay.", "tokens": [51064, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 9, "seek": 5500, "start": 71.0, "end": 75.0, "text": " Okay.", "tokens": [51164, 1033, 13, 51364], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 10, "seek": 5500, "start": 75.0, "end": 81.0, "text": " Sorry for some...", "tokens": [51364, 4919, 337, 512, 485, 51664], "temperature": 0.0, "avg_logprob": -0.21322377026081085, "compression_ratio": 1.4533333333333334, "no_speech_prob": 0.13287204504013062}, {"id": 11, "seek": 8100, "start": 81.0, "end": 89.0, "text": " A little technical issue.", "tokens": [50364, 316, 707, 6191, 2734, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1508556034253991, "compression_ratio": 0.9464285714285714, "no_speech_prob": 0.08733416348695755}, {"id": 12, "seek": 8100, "start": 89.0, "end": 97.0, "text": " Okay.", "tokens": [50764, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1508556034253991, "compression_ratio": 0.9464285714285714, "no_speech_prob": 0.08733416348695755}, {"id": 13, "seek": 8100, "start": 97.0, "end": 105.0, "text": " Sorry for that.", "tokens": [51164, 4919, 337, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1508556034253991, "compression_ratio": 0.9464285714285714, "no_speech_prob": 0.08733416348695755}, {"id": 14, "seek": 8100, "start": 105.0, "end": 109.0, "text": " Okay.", "tokens": [51564, 1033, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1508556034253991, "compression_ratio": 0.9464285714285714, "no_speech_prob": 0.08733416348695755}, {"id": 15, "seek": 10900, "start": 109.0, "end": 113.0, "text": " Okay, so it is an agenda for this presentation.", "tokens": [50364, 1033, 11, 370, 309, 307, 364, 9829, 337, 341, 5860, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1266064065875429, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.06387883424758911}, {"id": 16, "seek": 10900, "start": 113.0, "end": 121.0, "text": " So first, I will tell you who I am and where I work.", "tokens": [50564, 407, 700, 11, 286, 486, 980, 291, 567, 286, 669, 293, 689, 286, 589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1266064065875429, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.06387883424758911}, {"id": 17, "seek": 10900, "start": 121.0, "end": 127.0, "text": " So say a couple of words about our company.", "tokens": [50964, 407, 584, 257, 1916, 295, 2283, 466, 527, 2237, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1266064065875429, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.06387883424758911}, {"id": 18, "seek": 10900, "start": 127.0, "end": 135.0, "text": " Next, I will just present shortly what do I mean by secure boot in the case of arm socks", "tokens": [51264, 3087, 11, 286, 486, 445, 1974, 13392, 437, 360, 286, 914, 538, 7144, 11450, 294, 264, 1389, 295, 3726, 17564, 51664], "temperature": 0.0, "avg_logprob": -0.1266064065875429, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.06387883424758911}, {"id": 19, "seek": 13500, "start": 135.0, "end": 139.0, "text": " and present how the typical implementation and workflow works.", "tokens": [50364, 293, 1974, 577, 264, 7476, 11420, 293, 20993, 1985, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11494122823079427, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.12572820484638214}, {"id": 20, "seek": 13500, "start": 139.0, "end": 147.0, "text": " Later, we will show the results from the first edition, so from the 2028.", "tokens": [50564, 11965, 11, 321, 486, 855, 264, 3542, 490, 264, 700, 11377, 11, 370, 490, 264, 945, 11205, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11494122823079427, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.12572820484638214}, {"id": 21, "seek": 13500, "start": 147.0, "end": 155.0, "text": " Then we will discuss the two cases that we check for this edition,", "tokens": [50964, 1396, 321, 486, 2248, 264, 732, 3331, 300, 321, 1520, 337, 341, 11377, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11494122823079427, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.12572820484638214}, {"id": 22, "seek": 13500, "start": 155.0, "end": 159.0, "text": " so the Mediatek and the Rockchip cases.", "tokens": [51364, 370, 264, 3982, 13024, 74, 293, 264, 6922, 339, 647, 3331, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11494122823079427, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.12572820484638214}, {"id": 23, "seek": 13500, "start": 159.0, "end": 161.0, "text": " Next, we will summarize the whole presentation.", "tokens": [51564, 3087, 11, 321, 486, 20858, 264, 1379, 5860, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11494122823079427, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.12572820484638214}, {"id": 24, "seek": 16100, "start": 161.0, "end": 167.0, "text": " So try to look what was different between those two editions of the presentation", "tokens": [50364, 407, 853, 281, 574, 437, 390, 819, 1296, 729, 732, 44840, 295, 264, 5860, 50664], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 25, "seek": 16100, "start": 167.0, "end": 172.0, "text": " and with some Q&A session.", "tokens": [50664, 293, 365, 512, 1249, 5, 32, 5481, 13, 50914], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 26, "seek": 16100, "start": 172.0, "end": 175.0, "text": " So this is me.", "tokens": [50914, 407, 341, 307, 385, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 27, "seek": 16100, "start": 175.0, "end": 181.0, "text": " I'm Tomasz Gieski and I'm an Embedded Systems Team Leader at 3MDep.", "tokens": [51064, 286, 478, 5041, 19601, 460, 530, 2984, 293, 286, 478, 364, 24234, 292, 9207, 27059, 7606, 22650, 412, 805, 44, 35, 595, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 28, "seek": 16100, "start": 181.0, "end": 184.0, "text": " I work there over three years now.", "tokens": [51364, 286, 589, 456, 670, 1045, 924, 586, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 29, "seek": 16100, "start": 184.0, "end": 190.0, "text": " Mostly, I work on the Embedded Systems built with the Yoctop project.", "tokens": [51514, 29035, 11, 286, 589, 322, 264, 24234, 292, 9207, 27059, 3094, 365, 264, 7616, 349, 404, 1716, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19355462392171224, "compression_ratio": 1.4532019704433496, "no_speech_prob": 0.16212739050388336}, {"id": 30, "seek": 19000, "start": 190.0, "end": 197.0, "text": " So I try to integrate the update system and the OS creation for the Embedded Devices.", "tokens": [50364, 407, 286, 853, 281, 13365, 264, 5623, 1185, 293, 264, 12731, 8016, 337, 264, 24234, 292, 9207, 9096, 1473, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11656721332405187, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.03670799732208252}, {"id": 31, "seek": 19000, "start": 197.0, "end": 207.0, "text": " But because I work with the Embedded Devices, I try to touch different areas of the whole life of the devices.", "tokens": [50714, 583, 570, 286, 589, 365, 264, 24234, 292, 9207, 9096, 1473, 11, 286, 853, 281, 2557, 819, 3179, 295, 264, 1379, 993, 295, 264, 5759, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11656721332405187, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.03670799732208252}, {"id": 32, "seek": 19000, "start": 207.0, "end": 212.0, "text": " So one of the things I work with is also the system security.", "tokens": [51214, 407, 472, 295, 264, 721, 286, 589, 365, 307, 611, 264, 1185, 3825, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11656721332405187, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.03670799732208252}, {"id": 33, "seek": 19000, "start": 212.0, "end": 218.0, "text": " And this is the topic of this presentation.", "tokens": [51464, 400, 341, 307, 264, 4829, 295, 341, 5860, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11656721332405187, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.03670799732208252}, {"id": 34, "seek": 21800, "start": 218.0, "end": 223.0, "text": " So here are a couple of words about our company.", "tokens": [50364, 407, 510, 366, 257, 1916, 295, 2283, 466, 527, 2237, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2205137584520423, "compression_ratio": 1.3465909090909092, "no_speech_prob": 0.06847070157527924}, {"id": 35, "seek": 21800, "start": 223.0, "end": 229.0, "text": " We are from Poland and based in Gda\u0144sk.", "tokens": [50614, 492, 366, 490, 15950, 293, 2361, 294, 460, 2675, 27125, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2205137584520423, "compression_ratio": 1.3465909090909092, "no_speech_prob": 0.06847070157527924}, {"id": 36, "seek": 21800, "start": 229.0, "end": 235.0, "text": " We are the core boot license service providers since 2016.", "tokens": [50914, 492, 366, 264, 4965, 11450, 10476, 2643, 11330, 1670, 6549, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2205137584520423, "compression_ratio": 1.3465909090909092, "no_speech_prob": 0.06847070157527924}, {"id": 37, "seek": 21800, "start": 235.0, "end": 239.0, "text": " Also, UFI adopters since 2018.", "tokens": [51214, 2743, 11, 624, 38568, 22486, 1559, 1670, 6096, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2205137584520423, "compression_ratio": 1.3465909090909092, "no_speech_prob": 0.06847070157527924}, {"id": 38, "seek": 21800, "start": 239.0, "end": 245.0, "text": " Yoctop recipients, so this is the area which I work with.", "tokens": [51414, 7616, 349, 404, 32440, 11, 370, 341, 307, 264, 1859, 597, 286, 589, 365, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2205137584520423, "compression_ratio": 1.3465909090909092, "no_speech_prob": 0.06847070157527924}, {"id": 39, "seek": 24500, "start": 245.0, "end": 258.0, "text": " From the 2019, also like the consultants for the FWPD project and IBM Open Power Foundation members.", "tokens": [50364, 3358, 264, 6071, 11, 611, 411, 264, 38935, 337, 264, 479, 54, 17349, 1716, 293, 23487, 7238, 7086, 10335, 2679, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1964175436231825, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.056712087243795395}, {"id": 40, "seek": 24500, "start": 258.0, "end": 266.0, "text": " Okay, so now let's explain first what do you mean by the secure boot in the context of this presentation.", "tokens": [51014, 1033, 11, 370, 586, 718, 311, 2903, 700, 437, 360, 291, 914, 538, 264, 7144, 11450, 294, 264, 4319, 295, 341, 5860, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1964175436231825, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.056712087243795395}, {"id": 41, "seek": 24500, "start": 266.0, "end": 274.0, "text": " So here we are focused on the ARM context, which is like the feature of the boot room.", "tokens": [51414, 407, 510, 321, 366, 5178, 322, 264, 45209, 4319, 11, 597, 307, 411, 264, 4111, 295, 264, 11450, 1808, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1964175436231825, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.056712087243795395}, {"id": 42, "seek": 27400, "start": 274.0, "end": 278.0, "text": " One of the features that boot room has.", "tokens": [50364, 1485, 295, 264, 4122, 300, 11450, 1808, 575, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12048865109682083, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.17871414124965668}, {"id": 43, "seek": 27400, "start": 278.0, "end": 289.0, "text": " Maybe we should call it more like the verified boot because the case here is that when we start the firmware,", "tokens": [50564, 2704, 321, 820, 818, 309, 544, 411, 264, 31197, 11450, 570, 264, 1389, 510, 307, 300, 562, 321, 722, 264, 30289, 11, 51114], "temperature": 0.0, "avg_logprob": -0.12048865109682083, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.17871414124965668}, {"id": 44, "seek": 27400, "start": 289.0, "end": 294.0, "text": " the next steps of the loaded images are like verified.", "tokens": [51114, 264, 958, 4439, 295, 264, 13210, 5267, 366, 411, 31197, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12048865109682083, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.17871414124965668}, {"id": 45, "seek": 27400, "start": 294.0, "end": 302.0, "text": " The signatures is verified by the previous part of the firmware.", "tokens": [51364, 440, 32322, 307, 31197, 538, 264, 3894, 644, 295, 264, 30289, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12048865109682083, "compression_ratio": 1.6503067484662577, "no_speech_prob": 0.17871414124965668}, {"id": 46, "seek": 30200, "start": 302.0, "end": 308.0, "text": " So that's why we should call it the verified boot maybe.", "tokens": [50364, 407, 300, 311, 983, 321, 820, 818, 309, 264, 31197, 11450, 1310, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08964269161224366, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.04120184853672981}, {"id": 47, "seek": 30200, "start": 308.0, "end": 319.0, "text": " So we need to like use some private key to sign the binary that we put into our machine.", "tokens": [50664, 407, 321, 643, 281, 411, 764, 512, 4551, 2141, 281, 1465, 264, 17434, 300, 321, 829, 666, 527, 3479, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08964269161224366, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.04120184853672981}, {"id": 48, "seek": 30200, "start": 319.0, "end": 326.0, "text": " Then we also need to take the public key from that private key and put it also there.", "tokens": [51214, 1396, 321, 611, 643, 281, 747, 264, 1908, 2141, 490, 300, 4551, 2141, 293, 829, 309, 611, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08964269161224366, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.04120184853672981}, {"id": 49, "seek": 32600, "start": 326.0, "end": 334.0, "text": " So when we start it, we will be able to verify the signature and decide if it should be loaded or not.", "tokens": [50364, 407, 562, 321, 722, 309, 11, 321, 486, 312, 1075, 281, 16888, 264, 13397, 293, 4536, 498, 309, 820, 312, 13210, 420, 406, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10024119192554105, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.12224777042865753}, {"id": 50, "seek": 32600, "start": 334.0, "end": 344.0, "text": " In ARM context, we assume that the boot room is our root of trust.", "tokens": [50764, 682, 45209, 4319, 11, 321, 6552, 300, 264, 11450, 1808, 307, 527, 5593, 295, 3361, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10024119192554105, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.12224777042865753}, {"id": 51, "seek": 32600, "start": 344.0, "end": 349.0, "text": " We need to take that assumption because most of them are closed source.", "tokens": [51264, 492, 643, 281, 747, 300, 15302, 570, 881, 295, 552, 366, 5395, 4009, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10024119192554105, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.12224777042865753}, {"id": 52, "seek": 34900, "start": 349.0, "end": 357.0, "text": " Probably it would be better if they would be open sourced, but it is what it is.", "tokens": [50364, 9210, 309, 576, 312, 1101, 498, 436, 576, 312, 1269, 11006, 1232, 11, 457, 309, 307, 437, 309, 307, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1790103032038762, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.07420063018798828}, {"id": 53, "seek": 34900, "start": 357.0, "end": 362.0, "text": " And yeah, basically like the meaning of the secure boot can be different for any given architecture.", "tokens": [50764, 400, 1338, 11, 1936, 411, 264, 3620, 295, 264, 7144, 11450, 393, 312, 819, 337, 604, 2212, 9482, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1790103032038762, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.07420063018798828}, {"id": 54, "seek": 34900, "start": 362.0, "end": 371.0, "text": " So if you would be talking about the x86, that would be a different scenario.", "tokens": [51014, 407, 498, 291, 576, 312, 1417, 466, 264, 2031, 22193, 11, 300, 576, 312, 257, 819, 9005, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1790103032038762, "compression_ratio": 1.5235294117647058, "no_speech_prob": 0.07420063018798828}, {"id": 55, "seek": 37100, "start": 371.0, "end": 375.0, "text": " Okay, so this is the typical implementation.", "tokens": [50364, 1033, 11, 370, 341, 307, 264, 7476, 11420, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11632524562787407, "compression_ratio": 1.605, "no_speech_prob": 0.14903849363327026}, {"id": 56, "seek": 37100, "start": 375.0, "end": 380.0, "text": " We have the public key that needs to be written inside our sock.", "tokens": [50564, 492, 362, 264, 1908, 2141, 300, 2203, 281, 312, 3720, 1854, 527, 35302, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11632524562787407, "compression_ratio": 1.605, "no_speech_prob": 0.14903849363327026}, {"id": 57, "seek": 37100, "start": 380.0, "end": 388.0, "text": " Different vendors will have some different way to achieve that.", "tokens": [50814, 20825, 22056, 486, 362, 512, 819, 636, 281, 4584, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11632524562787407, "compression_ratio": 1.605, "no_speech_prob": 0.14903849363327026}, {"id": 58, "seek": 37100, "start": 388.0, "end": 392.0, "text": " So we can, for example, fuse them using electrical fuse.", "tokens": [51214, 407, 321, 393, 11, 337, 1365, 11, 31328, 552, 1228, 12147, 31328, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11632524562787407, "compression_ratio": 1.605, "no_speech_prob": 0.14903849363327026}, {"id": 59, "seek": 37100, "start": 392.0, "end": 400.0, "text": " So one time write them in our sock and later use it every time that we start our firmware.", "tokens": [51414, 407, 472, 565, 2464, 552, 294, 527, 35302, 293, 1780, 764, 309, 633, 565, 300, 321, 722, 527, 30289, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11632524562787407, "compression_ratio": 1.605, "no_speech_prob": 0.14903849363327026}, {"id": 60, "seek": 40000, "start": 400.0, "end": 404.0, "text": " There is also a possibility for the OTP registers.", "tokens": [50364, 821, 307, 611, 257, 7959, 337, 264, 422, 16804, 38351, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14872669864010502, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0540638230741024}, {"id": 61, "seek": 40000, "start": 404.0, "end": 407.0, "text": " So those are the one time programmable.", "tokens": [50564, 407, 729, 366, 264, 472, 565, 37648, 712, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14872669864010502, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0540638230741024}, {"id": 62, "seek": 40000, "start": 407.0, "end": 413.0, "text": " So as the name says also can be used only one time.", "tokens": [50714, 407, 382, 264, 1315, 1619, 611, 393, 312, 1143, 787, 472, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14872669864010502, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0540638230741024}, {"id": 63, "seek": 40000, "start": 413.0, "end": 424.0, "text": " And one of those two possibilities allow us to make from our boot room a root of trust,", "tokens": [51014, 400, 472, 295, 729, 732, 12178, 2089, 505, 281, 652, 490, 527, 11450, 1808, 257, 5593, 295, 3361, 11, 51564], "temperature": 0.0, "avg_logprob": -0.14872669864010502, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0540638230741024}, {"id": 64, "seek": 40000, "start": 424.0, "end": 429.0, "text": " which we later use to expand it to the chain of trust.", "tokens": [51564, 597, 321, 1780, 764, 281, 5268, 309, 281, 264, 5021, 295, 3361, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14872669864010502, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0540638230741024}, {"id": 65, "seek": 42900, "start": 429.0, "end": 434.0, "text": " Next components can use like different keys.", "tokens": [50364, 3087, 6677, 393, 764, 411, 819, 9317, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1222363618703989, "compression_ratio": 1.6808510638297873, "no_speech_prob": 0.06539790332317352}, {"id": 66, "seek": 42900, "start": 434.0, "end": 445.0, "text": " So in case of secure boot, we talk about the step between the boot room and the boot loader.", "tokens": [50614, 407, 294, 1389, 295, 7144, 11450, 11, 321, 751, 466, 264, 1823, 1296, 264, 11450, 1808, 293, 264, 11450, 3677, 260, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1222363618703989, "compression_ratio": 1.6808510638297873, "no_speech_prob": 0.06539790332317352}, {"id": 67, "seek": 42900, "start": 445.0, "end": 452.0, "text": " And here we have some one key that was used to sign the binary and that public key that was used to verify it.", "tokens": [51164, 400, 510, 321, 362, 512, 472, 2141, 300, 390, 1143, 281, 1465, 264, 17434, 293, 300, 1908, 2141, 300, 390, 1143, 281, 16888, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1222363618703989, "compression_ratio": 1.6808510638297873, "no_speech_prob": 0.06539790332317352}, {"id": 68, "seek": 42900, "start": 452.0, "end": 458.0, "text": " But the later steps of starting our machine can use different keys.", "tokens": [51514, 583, 264, 1780, 4439, 295, 2891, 527, 3479, 393, 764, 819, 9317, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1222363618703989, "compression_ratio": 1.6808510638297873, "no_speech_prob": 0.06539790332317352}, {"id": 69, "seek": 45800, "start": 459.0, "end": 464.0, "text": " And yeah, so that would be it.", "tokens": [50414, 400, 1338, 11, 370, 300, 576, 312, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 70, "seek": 45800, "start": 464.0, "end": 469.0, "text": " So typically we have like let's say our host machine.", "tokens": [50664, 407, 5850, 321, 362, 411, 718, 311, 584, 527, 3975, 3479, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 71, "seek": 45800, "start": 469.0, "end": 472.0, "text": " That should be some secure location and our target device.", "tokens": [50914, 663, 820, 312, 512, 7144, 4914, 293, 527, 3779, 4302, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 72, "seek": 45800, "start": 472.0, "end": 476.0, "text": " So on our host machine we generate some private keys.", "tokens": [51064, 407, 322, 527, 3975, 3479, 321, 8460, 512, 4551, 9317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 73, "seek": 45800, "start": 476.0, "end": 481.0, "text": " We build binary and use specific tool to sign them.", "tokens": [51264, 492, 1322, 17434, 293, 764, 2685, 2290, 281, 1465, 552, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 74, "seek": 45800, "start": 481.0, "end": 486.0, "text": " And later we need to take the public key part of that keys.", "tokens": [51514, 400, 1780, 321, 643, 281, 747, 264, 1908, 2141, 644, 295, 300, 9317, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1436972967008265, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.03692018985748291}, {"id": 75, "seek": 48600, "start": 486.0, "end": 493.0, "text": " Also design a binary and put it in the target device and then try to verify it.", "tokens": [50364, 2743, 1715, 257, 17434, 293, 829, 309, 294, 264, 3779, 4302, 293, 550, 853, 281, 16888, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13187745251233066, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.031424056738615036}, {"id": 76, "seek": 48600, "start": 493.0, "end": 498.0, "text": " So if the verification will be successful, then we will just boot another step.", "tokens": [50714, 407, 498, 264, 30206, 486, 312, 4406, 11, 550, 321, 486, 445, 11450, 1071, 1823, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13187745251233066, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.031424056738615036}, {"id": 77, "seek": 48600, "start": 498.0, "end": 508.0, "text": " If not, then specific things can happen depends on the vendor that we are using.", "tokens": [50964, 759, 406, 11, 550, 2685, 721, 393, 1051, 5946, 322, 264, 24321, 300, 321, 366, 1228, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13187745251233066, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.031424056738615036}, {"id": 78, "seek": 48600, "start": 508.0, "end": 515.0, "text": " Also let's say maybe a couple of words about what it is to sign the binary.", "tokens": [51464, 2743, 718, 311, 584, 1310, 257, 1916, 295, 2283, 466, 437, 309, 307, 281, 1465, 264, 17434, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13187745251233066, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.031424056738615036}, {"id": 79, "seek": 51500, "start": 515.0, "end": 524.0, "text": " Basically what is common between all the vendors probably is that the sign in binary means that we take the original binary", "tokens": [50364, 8537, 437, 307, 2689, 1296, 439, 264, 22056, 1391, 307, 300, 264, 1465, 294, 17434, 1355, 300, 321, 747, 264, 3380, 17434, 50814], "temperature": 0.0, "avg_logprob": -0.13139909505844116, "compression_ratio": 1.625, "no_speech_prob": 0.046523772180080414}, {"id": 80, "seek": 51500, "start": 524.0, "end": 528.0, "text": " and add some header on top of it.", "tokens": [50814, 293, 909, 512, 23117, 322, 1192, 295, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13139909505844116, "compression_ratio": 1.625, "no_speech_prob": 0.046523772180080414}, {"id": 81, "seek": 51500, "start": 528.0, "end": 540.0, "text": " This header contains the signature of the digital signature and also some specific format at the start", "tokens": [51014, 639, 23117, 8306, 264, 13397, 295, 264, 4562, 13397, 293, 611, 512, 2685, 7877, 412, 264, 722, 51614], "temperature": 0.0, "avg_logprob": -0.13139909505844116, "compression_ratio": 1.625, "no_speech_prob": 0.046523772180080414}, {"id": 82, "seek": 54000, "start": 540.0, "end": 547.0, "text": " which can be different across some vendors or can be also different inside within one vendor", "tokens": [50364, 597, 393, 312, 819, 2108, 512, 22056, 420, 393, 312, 611, 819, 1854, 1951, 472, 24321, 50714], "temperature": 0.0, "avg_logprob": -0.10040348679272097, "compression_ratio": 1.6292134831460674, "no_speech_prob": 0.11411858350038528}, {"id": 83, "seek": 54000, "start": 547.0, "end": 551.0, "text": " but when we are using different signing tools.", "tokens": [50714, 457, 562, 321, 366, 1228, 819, 13393, 3873, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10040348679272097, "compression_ratio": 1.6292134831460674, "no_speech_prob": 0.11411858350038528}, {"id": 84, "seek": 54000, "start": 551.0, "end": 560.0, "text": " So if we try to like sign our binary we can always try to dump the first couple of bytes of our signed image", "tokens": [50914, 407, 498, 321, 853, 281, 411, 1465, 527, 17434, 321, 393, 1009, 853, 281, 11430, 264, 700, 1916, 295, 36088, 295, 527, 8175, 3256, 51364], "temperature": 0.0, "avg_logprob": -0.10040348679272097, "compression_ratio": 1.6292134831460674, "no_speech_prob": 0.11411858350038528}, {"id": 85, "seek": 54000, "start": 560.0, "end": 566.0, "text": " and check if everything goes as expected.", "tokens": [51364, 293, 1520, 498, 1203, 1709, 382, 5176, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10040348679272097, "compression_ratio": 1.6292134831460674, "no_speech_prob": 0.11411858350038528}, {"id": 86, "seek": 56600, "start": 567.0, "end": 571.0, "text": " This is a quick recap from the last edition.", "tokens": [50414, 639, 307, 257, 1702, 20928, 490, 264, 1036, 11377, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2146207472857307, "compression_ratio": 1.4108910891089108, "no_speech_prob": 0.07117190212011337}, {"id": 87, "seek": 56600, "start": 571.0, "end": 575.0, "text": " So we look at the 11 cases.", "tokens": [50614, 407, 321, 574, 412, 264, 2975, 3331, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2146207472857307, "compression_ratio": 1.4108910891089108, "no_speech_prob": 0.07117190212011337}, {"id": 88, "seek": 56600, "start": 575.0, "end": 587.0, "text": " Five of them like the NXP, IMX and Liarscape, STSTM, Xilinix and NVIDIA looks like we're like fully open sourced let's say", "tokens": [50814, 9436, 295, 552, 411, 264, 426, 55, 47, 11, 21463, 55, 293, 8349, 685, 4747, 11, 4904, 6840, 44, 11, 1783, 388, 259, 970, 293, 426, 3958, 6914, 1542, 411, 321, 434, 411, 4498, 1269, 11006, 1232, 718, 311, 584, 51414], "temperature": 0.0, "avg_logprob": -0.2146207472857307, "compression_ratio": 1.4108910891089108, "no_speech_prob": 0.07117190212011337}, {"id": 89, "seek": 56600, "start": 587.0, "end": 594.0, "text": " and there was none NDA problems with them so everyone could try to take the documentation", "tokens": [51414, 293, 456, 390, 6022, 426, 7509, 2740, 365, 552, 370, 1518, 727, 853, 281, 747, 264, 14333, 51764], "temperature": 0.0, "avg_logprob": -0.2146207472857307, "compression_ratio": 1.4108910891089108, "no_speech_prob": 0.07117190212011337}, {"id": 90, "seek": 59400, "start": 595.0, "end": 602.0, "text": " needed using and signing tools and try to implement the secure boot on them.", "tokens": [50414, 2978, 1228, 293, 13393, 3873, 293, 853, 281, 4445, 264, 7144, 11450, 322, 552, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12815524339675904, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.02593768760561943}, {"id": 91, "seek": 59400, "start": 602.0, "end": 611.0, "text": " We have a couple of cases where there are information that there is some like secure boot to enable on that given machine", "tokens": [50764, 492, 362, 257, 1916, 295, 3331, 689, 456, 366, 1589, 300, 456, 307, 512, 411, 7144, 11450, 281, 9528, 322, 300, 2212, 3479, 51214], "temperature": 0.0, "avg_logprob": -0.12815524339675904, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.02593768760561943}, {"id": 92, "seek": 59400, "start": 611.0, "end": 613.0, "text": " but it is under the NDA.", "tokens": [51214, 457, 309, 307, 833, 264, 426, 7509, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12815524339675904, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.02593768760561943}, {"id": 93, "seek": 59400, "start": 613.0, "end": 622.0, "text": " So we're talking here about the Marvel Armada, Texas Instruments, Sitara, Qualcomm and Microchips", "tokens": [51314, 407, 321, 434, 1417, 510, 466, 264, 13837, 11893, 1538, 11, 7885, 39785, 4697, 11, 14523, 2419, 11, 13616, 13278, 293, 25642, 339, 2600, 51764], "temperature": 0.0, "avg_logprob": -0.12815524339675904, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.02593768760561943}, {"id": 94, "seek": 62200, "start": 622.0, "end": 629.0, "text": " and also we talk about two stocks from the Chinese vendors like Rockchip and Allwinner", "tokens": [50364, 293, 611, 321, 751, 466, 732, 12966, 490, 264, 4649, 22056, 411, 6922, 339, 647, 293, 1057, 9136, 1193, 50714], "temperature": 0.0, "avg_logprob": -0.17158274496755294, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.030791809782385826}, {"id": 95, "seek": 62200, "start": 629.0, "end": 636.0, "text": " where like documentation was, some documentation was there, another was missing.", "tokens": [50714, 689, 411, 14333, 390, 11, 512, 14333, 390, 456, 11, 1071, 390, 5361, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17158274496755294, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.030791809782385826}, {"id": 96, "seek": 62200, "start": 636.0, "end": 646.0, "text": " Also there were some information about tools but we were not able to find them or maybe use them correctly.", "tokens": [51064, 2743, 456, 645, 512, 1589, 466, 3873, 457, 321, 645, 406, 1075, 281, 915, 552, 420, 1310, 764, 552, 8944, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17158274496755294, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.030791809782385826}, {"id": 97, "seek": 64600, "start": 646.0, "end": 654.0, "text": " Okay, so now I will go through three or five, three or four vendors that were listed from the last edition", "tokens": [50364, 1033, 11, 370, 586, 286, 486, 352, 807, 1045, 420, 1732, 11, 1045, 420, 1451, 22056, 300, 645, 10052, 490, 264, 1036, 11377, 50764], "temperature": 0.0, "avg_logprob": -0.1408902948552912, "compression_ratio": 1.5353535353535352, "no_speech_prob": 0.08111082762479782}, {"id": 98, "seek": 64600, "start": 654.0, "end": 659.0, "text": " and talk about the differences that was between those two years.", "tokens": [50764, 293, 751, 466, 264, 7300, 300, 390, 1296, 729, 732, 924, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1408902948552912, "compression_ratio": 1.5353535353535352, "no_speech_prob": 0.08111082762479782}, {"id": 99, "seek": 64600, "start": 659.0, "end": 662.0, "text": " So now let's start from the NXP.", "tokens": [51014, 407, 586, 718, 311, 722, 490, 264, 426, 55, 47, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1408902948552912, "compression_ratio": 1.5353535353535352, "no_speech_prob": 0.08111082762479782}, {"id": 100, "seek": 64600, "start": 662.0, "end": 673.0, "text": " In these cases like I think this is the easiest way to start with the secure boot on the ARM stocks", "tokens": [51164, 682, 613, 3331, 411, 286, 519, 341, 307, 264, 12889, 636, 281, 722, 365, 264, 7144, 11450, 322, 264, 45209, 12966, 51714], "temperature": 0.0, "avg_logprob": -0.1408902948552912, "compression_ratio": 1.5353535353535352, "no_speech_prob": 0.08111082762479782}, {"id": 101, "seek": 67300, "start": 673.0, "end": 676.0, "text": " because the full documentation is there.", "tokens": [50364, 570, 264, 1577, 14333, 307, 456, 13, 50514], "temperature": 0.0, "avg_logprob": -0.20251283645629883, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.11251366138458252}, {"id": 102, "seek": 67300, "start": 676.0, "end": 687.0, "text": " All documentation is probably like, all documentation is publicly available so everyone can use it.", "tokens": [50514, 1057, 14333, 307, 1391, 411, 11, 439, 14333, 307, 14843, 2435, 370, 1518, 393, 764, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20251283645629883, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.11251366138458252}, {"id": 103, "seek": 68700, "start": 688.0, "end": 704.0, "text": " We have the HAP 4.4 so the high assurance boot mechanism on the platforms that are the NXP IMX50, 53, 67 and 8M.", "tokens": [50414, 492, 362, 264, 389, 4715, 1017, 13, 19, 370, 264, 1090, 32189, 11450, 7513, 322, 264, 9473, 300, 366, 264, 426, 55, 47, 21463, 55, 2803, 11, 21860, 11, 23879, 293, 1649, 44, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1903413884779986, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.20244665443897247}, {"id": 104, "seek": 68700, "start": 704.0, "end": 706.0, "text": " The application note is here.", "tokens": [51214, 440, 3861, 3637, 307, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1903413884779986, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.20244665443897247}, {"id": 105, "seek": 68700, "start": 706.0, "end": 716.0, "text": " The only difference between here and there is that those applications are under the free registration to the site.", "tokens": [51314, 440, 787, 2649, 1296, 510, 293, 456, 307, 300, 729, 5821, 366, 833, 264, 1737, 16847, 281, 264, 3621, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1903413884779986, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.20244665443897247}, {"id": 106, "seek": 71600, "start": 716.0, "end": 726.0, "text": " The same is for the IMX8 and IMX8X which uses the HAP mechanism, so advanced high assurance boot.", "tokens": [50364, 440, 912, 307, 337, 264, 21463, 55, 23, 293, 21463, 55, 23, 55, 597, 4960, 264, 389, 4715, 7513, 11, 370, 7339, 1090, 32189, 11450, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16800858424260065, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.06432903558015823}, {"id": 107, "seek": 71600, "start": 726.0, "end": 736.0, "text": " The same for CoreQ and as you see here the signing tool are available after the free registration.", "tokens": [50864, 440, 912, 337, 14798, 48, 293, 382, 291, 536, 510, 264, 13393, 2290, 366, 2435, 934, 264, 1737, 16847, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16800858424260065, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.06432903558015823}, {"id": 108, "seek": 73600, "start": 736.0, "end": 746.0, "text": " For Marvel Armada we can look at the manuals that are available on their sites.", "tokens": [50364, 1171, 13837, 11893, 1538, 321, 393, 574, 412, 264, 9688, 82, 300, 366, 2435, 322, 641, 7533, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12760934829711915, "compression_ratio": 1.5508021390374331, "no_speech_prob": 0.577298641204834}, {"id": 109, "seek": 73600, "start": 746.0, "end": 754.0, "text": " We saw that for the 38 and 39 X families we have some information that NDA is needed.", "tokens": [50864, 492, 1866, 300, 337, 264, 12843, 293, 15238, 1783, 4466, 321, 362, 512, 1589, 300, 426, 7509, 307, 2978, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12760934829711915, "compression_ratio": 1.5508021390374331, "no_speech_prob": 0.577298641204834}, {"id": 110, "seek": 73600, "start": 754.0, "end": 763.0, "text": " For other families like I believe 8K there is only information that there is a secure boot available but nothing else there.", "tokens": [51264, 1171, 661, 4466, 411, 286, 1697, 1649, 42, 456, 307, 787, 1589, 300, 456, 307, 257, 7144, 11450, 2435, 457, 1825, 1646, 456, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12760934829711915, "compression_ratio": 1.5508021390374331, "no_speech_prob": 0.577298641204834}, {"id": 111, "seek": 76300, "start": 764.0, "end": 775.0, "text": " At the last edition we present that in the U-boot repositories we can find some information about how to implement the secure boot on the Marvel Armada", "tokens": [50414, 1711, 264, 1036, 11377, 321, 1974, 300, 294, 264, 624, 12, 1763, 310, 22283, 2083, 321, 393, 915, 512, 1589, 466, 577, 281, 4445, 264, 7144, 11450, 322, 264, 13837, 11893, 1538, 50964], "temperature": 0.0, "avg_logprob": -0.18163137566553403, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.07222140580415726}, {"id": 112, "seek": 76300, "start": 775.0, "end": 778.0, "text": " but now it is not there.", "tokens": [50964, 457, 586, 309, 307, 406, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18163137566553403, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.07222140580415726}, {"id": 113, "seek": 76300, "start": 778.0, "end": 782.0, "text": " It is only on the older releases.", "tokens": [51114, 467, 307, 787, 322, 264, 4906, 16952, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18163137566553403, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.07222140580415726}, {"id": 114, "seek": 76300, "start": 782.0, "end": 792.0, "text": " So this is another difficult step that needs to be taken to find those informations.", "tokens": [51314, 407, 341, 307, 1071, 2252, 1823, 300, 2203, 281, 312, 2726, 281, 915, 729, 38855, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18163137566553403, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.07222140580415726}, {"id": 115, "seek": 79200, "start": 792.0, "end": 804.0, "text": " But if you will just use this from the 2018 branch we will see the information how to implement the secure boot but still this is only the theoretical knowledge", "tokens": [50364, 583, 498, 291, 486, 445, 764, 341, 490, 264, 6096, 9819, 321, 486, 536, 264, 1589, 577, 281, 4445, 264, 7144, 11450, 457, 920, 341, 307, 787, 264, 20864, 3601, 50964], "temperature": 0.0, "avg_logprob": -0.2370734780521716, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.050530292093753815}, {"id": 116, "seek": 79200, "start": 804.0, "end": 813.0, "text": " and there is no step-by-step solution how to achieve that so probably there is a room for mistakes.", "tokens": [50964, 293, 456, 307, 572, 1823, 12, 2322, 12, 16792, 3827, 577, 281, 4584, 300, 370, 1391, 456, 307, 257, 1808, 337, 8038, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2370734780521716, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.050530292093753815}, {"id": 117, "seek": 81300, "start": 814.0, "end": 820.0, "text": " In Zidia Tegria another quick update.", "tokens": [50414, 682, 1176, 327, 654, 314, 1146, 4668, 1071, 1702, 5623, 13, 50714], "temperature": 0.0, "avg_logprob": -0.23157552812920243, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.13083645701408386}, {"id": 118, "seek": 81300, "start": 820.0, "end": 827.0, "text": " Last time we saw that there are some documentation and tools available.", "tokens": [50714, 5264, 565, 321, 1866, 300, 456, 366, 512, 14333, 293, 3873, 2435, 13, 51064], "temperature": 0.0, "avg_logprob": -0.23157552812920243, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.13083645701408386}, {"id": 119, "seek": 81300, "start": 827.0, "end": 841.0, "text": " We checked that within last year and it looks like the documentation is some kind of uncertain because in one point it tells that the secure boot is available", "tokens": [51064, 492, 10033, 300, 1951, 1036, 1064, 293, 309, 1542, 411, 264, 14333, 307, 512, 733, 295, 11308, 570, 294, 472, 935, 309, 5112, 300, 264, 7144, 11450, 307, 2435, 51764], "temperature": 0.0, "avg_logprob": -0.23157552812920243, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.13083645701408386}, {"id": 120, "seek": 84100, "start": 841.0, "end": 846.0, "text": " and they also provide the flashing tools, the script called flash sh.", "tokens": [50364, 293, 436, 611, 2893, 264, 31049, 3873, 11, 264, 5755, 1219, 7319, 402, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20048219946366322, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.2016538828611374}, {"id": 121, "seek": 84100, "start": 846.0, "end": 851.0, "text": " But in the other place they just say that the secure boot will be available in the future.", "tokens": [50614, 583, 294, 264, 661, 1081, 436, 445, 584, 300, 264, 7144, 11450, 486, 312, 2435, 294, 264, 2027, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20048219946366322, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.2016538828611374}, {"id": 122, "seek": 84100, "start": 851.0, "end": 860.0, "text": " Nobody exactly knows when the future will be but yeah that would be it.", "tokens": [50864, 9297, 2293, 3255, 562, 264, 2027, 486, 312, 457, 1338, 300, 576, 312, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20048219946366322, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.2016538828611374}, {"id": 123, "seek": 84100, "start": 860.0, "end": 867.0, "text": " Also about fusing there is additional script for that but documentation of it is also some kind of updated.", "tokens": [51314, 2743, 466, 283, 7981, 456, 307, 4497, 5755, 337, 300, 457, 14333, 295, 309, 307, 611, 512, 733, 295, 10588, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20048219946366322, "compression_ratio": 1.642512077294686, "no_speech_prob": 0.2016538828611374}, {"id": 124, "seek": 86700, "start": 868.0, "end": 879.0, "text": " There is also one thread in the forum of Zidia where someone tried to use it to fuse keys on its platform and it caused the platform to break", "tokens": [50414, 821, 307, 611, 472, 7207, 294, 264, 17542, 295, 1176, 327, 654, 689, 1580, 3031, 281, 764, 309, 281, 31328, 9317, 322, 1080, 3663, 293, 309, 7008, 264, 3663, 281, 1821, 50964], "temperature": 0.0, "avg_logprob": -0.15519925612437574, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.34403955936431885}, {"id": 125, "seek": 86700, "start": 879.0, "end": 890.0, "text": " because it looks like not every board can be fused and before we execute that we just need to check the serial numbers because some of them are supported some not.", "tokens": [50964, 570, 309, 1542, 411, 406, 633, 3150, 393, 312, 283, 4717, 293, 949, 321, 14483, 300, 321, 445, 643, 281, 1520, 264, 17436, 3547, 570, 512, 295, 552, 366, 8104, 512, 406, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15519925612437574, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.34403955936431885}, {"id": 126, "seek": 86700, "start": 890.0, "end": 893.0, "text": " Also update on Alwinner.", "tokens": [51514, 2743, 5623, 322, 967, 9136, 1193, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15519925612437574, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.34403955936431885}, {"id": 127, "seek": 89300, "start": 894.0, "end": 907.0, "text": " Still we think that there is no official documentation about the Alwinner socks which would tell us about the secure boot and also no official documentation about the secure boot itself.", "tokens": [50414, 8291, 321, 519, 300, 456, 307, 572, 4783, 14333, 466, 264, 967, 9136, 1193, 17564, 597, 576, 980, 505, 466, 264, 7144, 11450, 293, 611, 572, 4783, 14333, 466, 264, 7144, 11450, 2564, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14180047584302496, "compression_ratio": 1.7085714285714286, "no_speech_prob": 0.05973329395055771}, {"id": 128, "seek": 89300, "start": 907.0, "end": 915.0, "text": " But we found some interesting case on the forum where someone was able to use the Nano Pioneer with Alwinner H3.", "tokens": [51064, 583, 321, 1352, 512, 1880, 1389, 322, 264, 17542, 689, 1580, 390, 1075, 281, 764, 264, 43511, 48844, 260, 365, 967, 9136, 1193, 389, 18, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14180047584302496, "compression_ratio": 1.7085714285714286, "no_speech_prob": 0.05973329395055771}, {"id": 129, "seek": 91500, "start": 916.0, "end": 925.0, "text": " And he there provides like all the useful links like the 10 or 15 of them or also the whole list of the verification process.", "tokens": [50414, 400, 415, 456, 6417, 411, 439, 264, 4420, 6123, 411, 264, 1266, 420, 2119, 295, 552, 420, 611, 264, 1379, 1329, 295, 264, 30206, 1399, 13, 50864], "temperature": 0.0, "avg_logprob": -0.25162032293894937, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.18539488315582275}, {"id": 130, "seek": 91500, "start": 927.0, "end": 941.0, "text": " With the link to the Sanxi tools repository which contains some tools which need to be used in order to sign the binaries and also fuse the sock.", "tokens": [50964, 2022, 264, 2113, 281, 264, 5271, 27579, 3873, 25841, 597, 8306, 512, 3873, 597, 643, 281, 312, 1143, 294, 1668, 281, 1465, 264, 5171, 4889, 293, 611, 31328, 264, 35302, 13, 51664], "temperature": 0.0, "avg_logprob": -0.25162032293894937, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.18539488315582275}, {"id": 131, "seek": 94100, "start": 942.0, "end": 949.0, "text": " The one vulnerability there is that in any case when we.", "tokens": [50414, 440, 472, 24210, 456, 307, 300, 294, 604, 1389, 562, 321, 13, 50764], "temperature": 0.0, "avg_logprob": -0.27173547896127853, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.15685150027275085}, {"id": 132, "seek": 94100, "start": 951.0, "end": 952.0, "text": " Oh sorry.", "tokens": [50864, 876, 2597, 13, 50914], "temperature": 0.0, "avg_logprob": -0.27173547896127853, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.15685150027275085}, {"id": 133, "seek": 94100, "start": 952.0, "end": 961.0, "text": " One vulnerability is here that if we try to start our firmware which is signed and the verification fails.", "tokens": [50914, 1485, 24210, 307, 510, 300, 498, 321, 853, 281, 722, 527, 30289, 597, 307, 8175, 293, 264, 30206, 18199, 13, 51364], "temperature": 0.0, "avg_logprob": -0.27173547896127853, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.15685150027275085}, {"id": 134, "seek": 94100, "start": 961.0, "end": 967.0, "text": " The platform always goes to the cell mode which is some kind like the Debug mode.", "tokens": [51364, 440, 3663, 1009, 1709, 281, 264, 2815, 4391, 597, 307, 512, 733, 411, 264, 27347, 697, 4391, 13, 51664], "temperature": 0.0, "avg_logprob": -0.27173547896127853, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.15685150027275085}, {"id": 135, "seek": 96700, "start": 967.0, "end": 973.0, "text": " And the Debug mode can be accessed via the USB port.", "tokens": [50364, 400, 264, 27347, 697, 4391, 393, 312, 34211, 5766, 264, 10109, 2436, 13, 50664], "temperature": 0.0, "avg_logprob": -0.18565446800655788, "compression_ratio": 1.578125, "no_speech_prob": 0.045608509331941605}, {"id": 136, "seek": 96700, "start": 973.0, "end": 986.0, "text": " So if the verification fails someone could always like plug in the USB start some me come and then read everything from the fuses or maybe even wipe them.", "tokens": [50664, 407, 498, 264, 30206, 18199, 1580, 727, 1009, 411, 5452, 294, 264, 10109, 722, 512, 385, 808, 293, 550, 1401, 1203, 490, 264, 283, 8355, 420, 1310, 754, 14082, 552, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18565446800655788, "compression_ratio": 1.578125, "no_speech_prob": 0.045608509331941605}, {"id": 137, "seek": 96700, "start": 986.0, "end": 994.0, "text": " So the solution there for that was just to destroy the USB lines data lines on that given port.", "tokens": [51314, 407, 264, 3827, 456, 337, 300, 390, 445, 281, 5293, 264, 10109, 3876, 1412, 3876, 322, 300, 2212, 2436, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18565446800655788, "compression_ratio": 1.578125, "no_speech_prob": 0.045608509331941605}, {"id": 138, "seek": 99400, "start": 994.0, "end": 1003.0, "text": " So even if the platform goes into the cell mode no one will be able to just read anything from it.", "tokens": [50364, 407, 754, 498, 264, 3663, 1709, 666, 264, 2815, 4391, 572, 472, 486, 312, 1075, 281, 445, 1401, 1340, 490, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21237337324354383, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.04253820702433586}, {"id": 139, "seek": 99400, "start": 1003.0, "end": 1010.0, "text": " Okay so now the Mediatek case documentation is provided on the GitLab pages.", "tokens": [50814, 1033, 370, 586, 264, 3982, 13024, 74, 1389, 14333, 307, 5649, 322, 264, 16939, 37880, 7183, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21237337324354383, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.04253820702433586}, {"id": 140, "seek": 101000, "start": 1011.0, "end": 1025.0, "text": " It is based on the Yocto project like project so the steps there needs to be done inside the Yocto project build system to achieve the signing to achieve the implementing the secure boot.", "tokens": [50414, 467, 307, 2361, 322, 264, 7616, 349, 78, 1716, 411, 1716, 370, 264, 4439, 456, 2203, 281, 312, 1096, 1854, 264, 7616, 349, 78, 1716, 1322, 1185, 281, 4584, 264, 13393, 281, 4584, 264, 18114, 264, 7144, 11450, 13, 51114], "temperature": 0.0, "avg_logprob": -0.22820796522983286, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.19581714272499084}, {"id": 141, "seek": 102500, "start": 1026.0, "end": 1040.0, "text": " But basically as in other ARM socks the boot room there is like the root of trust and later we just achieve it using other mechanism to have the whole chain of trust.", "tokens": [50414, 583, 1936, 382, 294, 661, 45209, 17564, 264, 11450, 1808, 456, 307, 411, 264, 5593, 295, 3361, 293, 1780, 321, 445, 4584, 309, 1228, 661, 7513, 281, 362, 264, 1379, 5021, 295, 3361, 13, 51114], "temperature": 0.0, "avg_logprob": -0.23575075467427573, "compression_ratio": 1.5957446808510638, "no_speech_prob": 0.19687680900096893}, {"id": 142, "seek": 102500, "start": 1040.0, "end": 1049.0, "text": " So after secure boot we have the TFA trusted board boot and then you can use the U-boot feed wave side boot to load our kernel image.", "tokens": [51114, 407, 934, 7144, 11450, 321, 362, 264, 314, 19684, 16034, 3150, 11450, 293, 550, 291, 393, 764, 264, 624, 12, 1763, 310, 3154, 5772, 1252, 11450, 281, 3677, 527, 28256, 3256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23575075467427573, "compression_ratio": 1.5957446808510638, "no_speech_prob": 0.19687680900096893}, {"id": 143, "seek": 104900, "start": 1049.0, "end": 1057.0, "text": " So if we have all those steps then we have like whole boot process verified.", "tokens": [50364, 407, 498, 321, 362, 439, 729, 4439, 550, 321, 362, 411, 1379, 11450, 1399, 31197, 13, 50764], "temperature": 0.0, "avg_logprob": -0.25530006885528567, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.517281174659729}, {"id": 144, "seek": 105700, "start": 1058.0, "end": 1085.0, "text": " Yeah and it also was shown in a couple of reports that the Mediatek boot room has some vulnerability which if we like power it in some special scenario then the boot room may just skip the process of verification of the image", "tokens": [50414, 865, 293, 309, 611, 390, 4898, 294, 257, 1916, 295, 7122, 300, 264, 3982, 13024, 74, 11450, 1808, 575, 512, 24210, 597, 498, 321, 411, 1347, 309, 294, 512, 2121, 9005, 550, 264, 11450, 1808, 815, 445, 10023, 264, 1399, 295, 30206, 295, 264, 3256, 51764], "temperature": 0.0, "avg_logprob": -0.12579127720424108, "compression_ratio": 1.490066225165563, "no_speech_prob": 0.20711784064769745}, {"id": 145, "seek": 108500, "start": 1085.0, "end": 1108.0, "text": " and still load the firmware so it looks like even if we like have the public key in the fuses and also the firmware signed, a public key in the fuses and we provide the unsigned image and like use this vulnerability we will be still able to boot our platform.", "tokens": [50364, 293, 920, 3677, 264, 30289, 370, 309, 1542, 411, 754, 498, 321, 411, 362, 264, 1908, 2141, 294, 264, 283, 8355, 293, 611, 264, 30289, 8175, 11, 257, 1908, 2141, 294, 264, 283, 8355, 293, 321, 2893, 264, 2693, 16690, 3256, 293, 411, 764, 341, 24210, 321, 486, 312, 920, 1075, 281, 11450, 527, 3663, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16715319951375326, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.15250931680202484}, {"id": 146, "seek": 110800, "start": 1109.0, "end": 1134.0, "text": " This is a short recap how the secure boot looks on the Mediatek so we have the BL1 step which is like the boot room which load the hashed based on the root of trust public key so this is the public key that we put in the fuses and calculates also the share of the signature of the BL2 so this is like the next step loaded.", "tokens": [50414, 639, 307, 257, 2099, 20928, 577, 264, 7144, 11450, 1542, 322, 264, 3982, 13024, 74, 370, 321, 362, 264, 15132, 16, 1823, 597, 307, 411, 264, 11450, 1808, 597, 3677, 264, 22019, 292, 2361, 322, 264, 5593, 295, 3361, 1908, 2141, 370, 341, 307, 264, 1908, 2141, 300, 321, 829, 294, 264, 283, 8355, 293, 4322, 1024, 611, 264, 2073, 295, 264, 13397, 295, 264, 15132, 17, 370, 341, 307, 411, 264, 958, 1823, 13210, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13490567207336426, "compression_ratio": 1.6858638743455496, "no_speech_prob": 0.2017347663640976}, {"id": 147, "seek": 113400, "start": 1134.0, "end": 1160.0, "text": " After that we compare those two values and if everything is okay we go next and then we load the signature from the BL2 and also calculate the share of it, make the comparison and if everything is once again is okay we boot the next steps.", "tokens": [50414, 2381, 300, 321, 6794, 729, 732, 4190, 293, 498, 1203, 307, 1392, 321, 352, 958, 293, 550, 321, 3677, 264, 13397, 490, 264, 15132, 17, 293, 611, 8873, 264, 2073, 295, 309, 11, 652, 264, 9660, 293, 498, 1203, 307, 1564, 797, 307, 1392, 321, 11450, 264, 958, 4439, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1853189468383789, "compression_ratio": 1.604026845637584, "no_speech_prob": 0.4168015122413635}, {"id": 148, "seek": 116400, "start": 1164.0, "end": 1173.0, "text": " And here is the process of enabling the secure boot, it is not clear from the documentation on which socks the secure boot can be enabled.", "tokens": [50364, 400, 510, 307, 264, 1399, 295, 23148, 264, 7144, 11450, 11, 309, 307, 406, 1850, 490, 264, 14333, 322, 597, 17564, 264, 7144, 11450, 393, 312, 15172, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22118155658245087, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.3647322356700897}, {"id": 149, "seek": 117300, "start": 1173.0, "end": 1202.0, "text": " The documentation mentioned the MT-83-65 and MT-83-695 ones, different socks may have different fuses indexes so it is really like we need to check those before we try to fuse our fuses in those socks but unfortunately those information is provided with NDA.", "tokens": [50364, 440, 14333, 2835, 264, 37333, 12, 31849, 12, 16824, 293, 37333, 12, 31849, 12, 21, 15718, 2306, 11, 819, 17564, 815, 362, 819, 283, 8355, 8186, 279, 370, 309, 307, 534, 411, 321, 643, 281, 1520, 729, 949, 321, 853, 281, 31328, 527, 283, 8355, 294, 729, 17564, 457, 7015, 729, 1589, 307, 5649, 365, 426, 7509, 13, 51814], "temperature": 0.0, "avg_logprob": -0.22031344742071432, "compression_ratio": 1.5, "no_speech_prob": 0.5275017023086548}, {"id": 150, "seek": 120300, "start": 1203.0, "end": 1223.0, "text": " In the process of enabling the secure boot we need to create the two keys, private keys and provide them to our build system which sign the BL2 load firmware and also the something called the download agent which is later used by additional", "tokens": [50364, 682, 264, 1399, 295, 23148, 264, 7144, 11450, 321, 643, 281, 1884, 264, 732, 9317, 11, 4551, 9317, 293, 2893, 552, 281, 527, 1322, 1185, 597, 1465, 264, 15132, 17, 3677, 30289, 293, 611, 264, 746, 1219, 264, 5484, 9461, 597, 307, 1780, 1143, 538, 4497, 51364], "temperature": 0.0, "avg_logprob": -0.18441814422607422, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.18030065298080444}, {"id": 151, "seek": 122300, "start": 1223.0, "end": 1252.0, "text": " proprietary tools to flush the image inside our platform which is also described like here so we have the fuse writer tool, this is another tool provided with the NDA only which can be used to like check the secure boot state on our platform and check if the download agent authentication bits are set.", "tokens": [50414, 38992, 3873, 281, 19568, 264, 3256, 1854, 527, 3663, 597, 307, 611, 7619, 411, 510, 370, 321, 362, 264, 283, 438, 9936, 2290, 11, 341, 307, 1071, 2290, 5649, 365, 264, 426, 7509, 787, 597, 393, 312, 1143, 281, 411, 1520, 264, 7144, 11450, 1785, 322, 527, 3663, 293, 1520, 498, 264, 5484, 9461, 26643, 9239, 366, 992, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20184304637293662, "compression_ratio": 1.597883597883598, "no_speech_prob": 0.5262159109115601}, {"id": 152, "seek": 125300, "start": 1253.0, "end": 1272.0, "text": " If they are not set we just need to set them and then like provide the public key which will be fused on the key hash zero field and after that we will just sign our firmware and use this public key to verify it.", "tokens": [50364, 759, 436, 366, 406, 992, 321, 445, 643, 281, 992, 552, 293, 550, 411, 2893, 264, 1908, 2141, 597, 486, 312, 283, 4717, 322, 264, 2141, 22019, 4018, 2519, 293, 934, 300, 321, 486, 445, 1465, 527, 30289, 293, 764, 341, 1908, 2141, 281, 16888, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1544501080232508, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.2988729178905487}, {"id": 153, "seek": 127200, "start": 1273.0, "end": 1278.0, "text": " Okay so now let's go to the Rockchip case.", "tokens": [50414, 1033, 370, 586, 718, 311, 352, 281, 264, 6922, 339, 647, 1389, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19365104761990634, "compression_ratio": 1.2260869565217392, "no_speech_prob": 0.19492541253566742}, {"id": 154, "seek": 127200, "start": 1279.0, "end": 1287.0, "text": " The public key here can be stored in a fuses in the OTP and it depends on which sock we are using.", "tokens": [50714, 440, 1908, 2141, 510, 393, 312, 12187, 294, 257, 283, 8355, 294, 264, 422, 16804, 293, 309, 5946, 322, 597, 35302, 321, 366, 1228, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19365104761990634, "compression_ratio": 1.2260869565217392, "no_speech_prob": 0.19492541253566742}, {"id": 155, "seek": 128700, "start": 1288.0, "end": 1304.0, "text": " If the verification of loaded binary will be successful then we will just extend our rule of trust so the boot ROM as in the other ARM core socks to the chain of trust.", "tokens": [50414, 759, 264, 30206, 295, 13210, 17434, 486, 312, 4406, 550, 321, 486, 445, 10101, 527, 4978, 295, 3361, 370, 264, 11450, 41678, 382, 294, 264, 661, 45209, 4965, 17564, 281, 264, 5021, 295, 3361, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24644074073204628, "compression_ratio": 1.344, "no_speech_prob": 0.1517382264137268}, {"id": 156, "seek": 130400, "start": 1305.0, "end": 1320.0, "text": " And later in case of Rockchip you can use the verified boot mechanism, fit verified boot mechanism from the SPL to the U-boot and from the U-boot to kernel to provide the whole chain of trust.", "tokens": [50414, 400, 1780, 294, 1389, 295, 6922, 339, 647, 291, 393, 764, 264, 31197, 11450, 7513, 11, 3318, 31197, 11450, 7513, 490, 264, 8420, 43, 281, 264, 624, 12, 1763, 310, 293, 490, 264, 624, 12, 1763, 310, 281, 28256, 281, 2893, 264, 1379, 5021, 295, 3361, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16454289006251915, "compression_ratio": 1.476923076923077, "no_speech_prob": 0.3500731587409973}, {"id": 157, "seek": 132000, "start": 1321.0, "end": 1335.0, "text": " So basically to establish it we need to like once again generate some private and public keypire, burn the public key into the fuses or OTP registers, depends on which sock we are using.", "tokens": [50414, 407, 1936, 281, 8327, 309, 321, 643, 281, 411, 1564, 797, 8460, 512, 4551, 293, 1908, 2141, 79, 621, 11, 5064, 264, 1908, 2141, 666, 264, 283, 8355, 420, 422, 16804, 38351, 11, 5946, 322, 597, 35302, 321, 366, 1228, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1597347895304362, "compression_ratio": 1.3777777777777778, "no_speech_prob": 0.4897933900356293}, {"id": 158, "seek": 133500, "start": 1336.0, "end": 1346.0, "text": " Then sign our firmware called id below the image in case of Rockchip which is like the U-boot TPL plus SPL merge into one file.", "tokens": [50414, 1396, 1465, 527, 30289, 1219, 4496, 2507, 264, 3256, 294, 1389, 295, 6922, 339, 647, 597, 307, 411, 264, 624, 12, 1763, 310, 314, 21593, 1804, 8420, 43, 22183, 666, 472, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10272151773626154, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.15850207209587097}, {"id": 159, "seek": 133500, "start": 1348.0, "end": 1359.0, "text": " Then configure verified boot in SPL and U-boot which means that we will use the fit images to verify it from the SPL to U-boot and from the U-boot to kernel and just flush our signed images.", "tokens": [51014, 1396, 22162, 31197, 11450, 294, 8420, 43, 293, 624, 12, 1763, 310, 597, 1355, 300, 321, 486, 764, 264, 3318, 5267, 281, 16888, 309, 490, 264, 8420, 43, 281, 624, 12, 1763, 310, 293, 490, 264, 624, 12, 1763, 310, 281, 28256, 293, 445, 19568, 527, 8175, 5267, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10272151773626154, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.15850207209587097}, {"id": 160, "seek": 135900, "start": 1360.0, "end": 1380.0, "text": " Documentation for Rockchip and for our winner is like how to find and if we find any probably it will be outdated or really short or just not such useful at first.", "tokens": [50414, 37684, 399, 337, 6922, 339, 647, 293, 337, 527, 8507, 307, 411, 577, 281, 915, 293, 498, 321, 915, 604, 1391, 309, 486, 312, 36313, 420, 534, 2099, 420, 445, 406, 1270, 4420, 412, 700, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17357443571090697, "compression_ratio": 1.3360655737704918, "no_speech_prob": 0.27000531554222107}, {"id": 161, "seek": 138000, "start": 1381.0, "end": 1400.0, "text": " So here we have a diagram of signing the whole of enabling the secure boot but basically it is something I just described on the previous slide and sorry for that but because of time we will just need to skip the description of it.", "tokens": [50414, 407, 510, 321, 362, 257, 10686, 295, 13393, 264, 1379, 295, 23148, 264, 7144, 11450, 457, 1936, 309, 307, 746, 286, 445, 7619, 322, 264, 3894, 4137, 293, 2597, 337, 300, 457, 570, 295, 565, 321, 486, 445, 643, 281, 10023, 264, 3855, 295, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19766666412353515, "compression_ratio": 1.5, "no_speech_prob": 0.1991480588912964}, {"id": 162, "seek": 140000, "start": 1401.0, "end": 1406.0, "text": " And now we can talk about signing code in Rockchip.", "tokens": [50414, 400, 586, 321, 393, 751, 466, 13393, 3089, 294, 6922, 339, 647, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19413379453263194, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.30547472834587097}, {"id": 163, "seek": 140000, "start": 1406.0, "end": 1415.0, "text": " So code can be signed using one of the two tools, the Erka sign tool which can be started on Linux or secure boot tool which can be started on Windows.", "tokens": [50664, 407, 3089, 393, 312, 8175, 1228, 472, 295, 264, 732, 3873, 11, 264, 3300, 2330, 1465, 2290, 597, 393, 312, 1409, 322, 18734, 420, 7144, 11450, 2290, 597, 393, 312, 1409, 322, 8591, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19413379453263194, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.30547472834587097}, {"id": 164, "seek": 141500, "start": 1416.0, "end": 1419.0, "text": " Linux tools can be found on the Erka bin repository.", "tokens": [50414, 18734, 3873, 393, 312, 1352, 322, 264, 3300, 2330, 5171, 25841, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2200981302464262, "compression_ratio": 1.40625, "no_speech_prob": 0.16774344444274902}, {"id": 165, "seek": 141500, "start": 1420.0, "end": 1432.0, "text": " Windows tools was a couple days ago, some time ago was on the repository called Kools tools but now we are not able to find it.", "tokens": [50614, 8591, 3873, 390, 257, 1916, 1708, 2057, 11, 512, 565, 2057, 390, 322, 264, 25841, 1219, 591, 29298, 3873, 457, 586, 321, 366, 406, 1075, 281, 915, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2200981302464262, "compression_ratio": 1.40625, "no_speech_prob": 0.16774344444274902}, {"id": 166, "seek": 143200, "start": 1433.0, "end": 1444.0, "text": " For some reasons the Rockchip based repositories are maintained in such way that some things may be missing after some time.", "tokens": [50414, 1171, 512, 4112, 264, 6922, 339, 647, 2361, 22283, 2083, 366, 17578, 294, 1270, 636, 300, 512, 721, 815, 312, 5361, 934, 512, 565, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1298030399885334, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.15532256662845612}, {"id": 167, "seek": 143200, "start": 1446.0, "end": 1454.0, "text": " But if you use the Erka sign tool we can just generate the signing keys and those keys can be used later with the Linux or Windows tools.", "tokens": [51064, 583, 498, 291, 764, 264, 3300, 2330, 1465, 2290, 321, 393, 445, 8460, 264, 13393, 9317, 293, 729, 9317, 393, 312, 1143, 1780, 365, 264, 18734, 420, 8591, 3873, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1298030399885334, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.15532256662845612}, {"id": 168, "seek": 145400, "start": 1455.0, "end": 1472.0, "text": " And if you use it and also the Erka repository provides the any files which are the files that can be used to create the mini-loader used later to fuse our keys in the firmware.", "tokens": [50414, 400, 498, 291, 764, 309, 293, 611, 264, 3300, 2330, 25841, 6417, 264, 604, 7098, 597, 366, 264, 7098, 300, 393, 312, 1143, 281, 1884, 264, 8382, 12, 2907, 260, 1143, 1780, 281, 31328, 527, 9317, 294, 264, 30289, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1971868432086447, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.18525657057762146}, {"id": 169, "seek": 145400, "start": 1475.0, "end": 1482.0, "text": " And basically any given firmware that you want to sign and use in our socks can be also signed with those two tools.", "tokens": [51414, 400, 1936, 604, 2212, 30289, 300, 291, 528, 281, 1465, 293, 764, 294, 527, 17564, 393, 312, 611, 8175, 365, 729, 732, 3873, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1971868432086447, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.18525657057762146}, {"id": 170, "seek": 148400, "start": 1485.0, "end": 1494.0, "text": " There is another tool just to burn the effuses and we have for that the effuse tool which is only for the Windows machines.", "tokens": [50414, 821, 307, 1071, 2290, 445, 281, 5064, 264, 1244, 8355, 293, 321, 362, 337, 300, 264, 1244, 438, 2290, 597, 307, 787, 337, 264, 8591, 8379, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1341257095336914, "compression_ratio": 1.6624203821656052, "no_speech_prob": 0.0683835968375206}, {"id": 171, "seek": 148400, "start": 1497.0, "end": 1509.0, "text": " It turns out that when we burn the effuses on the Rockchip socks we also need to provide the voltage for the one of the pins of the sock.", "tokens": [51014, 467, 4523, 484, 300, 562, 321, 5064, 264, 1244, 8355, 322, 264, 6922, 339, 647, 17564, 321, 611, 643, 281, 2893, 264, 8352, 337, 264, 472, 295, 264, 16392, 295, 264, 35302, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1341257095336914, "compression_ratio": 1.6624203821656052, "no_speech_prob": 0.0683835968375206}, {"id": 172, "seek": 150900, "start": 1509.0, "end": 1530.0, "text": " So it is not visible here but there should be like VCC, E effuse pin which needs to be powered up when we want to fuse the keys in our sock.", "tokens": [50364, 407, 309, 307, 406, 8974, 510, 457, 456, 820, 312, 411, 691, 11717, 11, 462, 1244, 438, 5447, 597, 2203, 281, 312, 17786, 493, 562, 321, 528, 281, 31328, 264, 9317, 294, 527, 35302, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19361370037763548, "compression_ratio": 1.25, "no_speech_prob": 0.257361501455307}, {"id": 173, "seek": 153000, "start": 1531.0, "end": 1543.0, "text": " So for that we need to find some pin that is there and provide the power by ourselves or maybe our platform has some special circuit just to enable that.", "tokens": [50414, 407, 337, 300, 321, 643, 281, 915, 512, 5447, 300, 307, 456, 293, 2893, 264, 1347, 538, 4175, 420, 1310, 527, 3663, 575, 512, 2121, 9048, 445, 281, 9528, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1136866569519043, "compression_ratio": 1.5231788079470199, "no_speech_prob": 0.15846200287342072}, {"id": 174, "seek": 153000, "start": 1545.0, "end": 1549.0, "text": " Also this information comes from another documentation that is hard to find.", "tokens": [51114, 2743, 341, 1589, 1487, 490, 1071, 14333, 300, 307, 1152, 281, 915, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1136866569519043, "compression_ratio": 1.5231788079470199, "no_speech_prob": 0.15846200287342072}, {"id": 175, "seek": 154900, "start": 1550.0, "end": 1553.0, "text": " This is a summarized of enable the secure boot.", "tokens": [50414, 639, 307, 257, 14611, 1602, 295, 9528, 264, 7144, 11450, 13, 50564], "temperature": 0.0, "avg_logprob": -0.19611906450848246, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.07924191653728485}, {"id": 176, "seek": 154900, "start": 1554.0, "end": 1560.0, "text": " So we need to create loader using the boot manager script that is in the Erka bin repository.", "tokens": [50614, 407, 321, 643, 281, 1884, 3677, 260, 1228, 264, 11450, 6598, 5755, 300, 307, 294, 264, 3300, 2330, 5171, 25841, 13, 50914], "temperature": 0.0, "avg_logprob": -0.19611906450848246, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.07924191653728485}, {"id": 177, "seek": 154900, "start": 1561.0, "end": 1563.0, "text": " Next we create the keys with Erka sign tool.", "tokens": [50964, 3087, 321, 1884, 264, 9317, 365, 3300, 2330, 1465, 2290, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19611906450848246, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.07924191653728485}, {"id": 178, "seek": 154900, "start": 1564.0, "end": 1577.0, "text": " Next we need to sign the loader with secure boot tool because from what we know now only signed with that tool binaries can be later used on our socks.", "tokens": [51114, 3087, 321, 643, 281, 1465, 264, 3677, 260, 365, 7144, 11450, 2290, 570, 490, 437, 321, 458, 586, 787, 8175, 365, 300, 2290, 5171, 4889, 393, 312, 1780, 1143, 322, 527, 17564, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19611906450848246, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.07924191653728485}, {"id": 179, "seek": 157700, "start": 1577.0, "end": 1590.0, "text": " We try to sign with the Erka sign tool and it doesn't work and now it looks like this can be hard to achieve because there is no way to download the secure boot tool from what we know now.", "tokens": [50364, 492, 853, 281, 1465, 365, 264, 3300, 2330, 1465, 2290, 293, 309, 1177, 380, 589, 293, 586, 309, 1542, 411, 341, 393, 312, 1152, 281, 4584, 570, 456, 307, 572, 636, 281, 5484, 264, 7144, 11450, 2290, 490, 437, 321, 458, 586, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1405572149488661, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.05278269946575165}, {"id": 180, "seek": 157700, "start": 1592.0, "end": 1606.0, "text": " Then we need to use the effuse tool to fuse our public key in socks and use another tool called the Erka develop tool which is in the Erka bin repository just to load the signer tool.", "tokens": [51114, 1396, 321, 643, 281, 764, 264, 1244, 438, 2290, 281, 31328, 527, 1908, 2141, 294, 17564, 293, 764, 1071, 2290, 1219, 264, 3300, 2330, 1499, 2290, 597, 307, 294, 264, 3300, 2330, 5171, 25841, 445, 281, 3677, 264, 1465, 260, 2290, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1405572149488661, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.05278269946575165}, {"id": 181, "seek": 160700, "start": 1607.0, "end": 1613.0, "text": " So we need to put loader into our platform and secure boot enabled.", "tokens": [50364, 407, 321, 643, 281, 829, 3677, 260, 666, 527, 3663, 293, 7144, 11450, 15172, 13, 50664], "temperature": 0.0, "avg_logprob": -0.31397143999735516, "compression_ratio": 1.4402985074626866, "no_speech_prob": 0.15170533955097198}, {"id": 182, "seek": 160700, "start": 1614.0, "end": 1624.0, "text": " Here is a link for the blog post which describes all of that containing all of that what we done with the Rockchip platforms.", "tokens": [50714, 1692, 307, 257, 2113, 337, 264, 6968, 2183, 597, 15626, 439, 295, 300, 19273, 439, 295, 300, 437, 321, 1096, 365, 264, 6922, 339, 647, 9473, 13, 51214], "temperature": 0.0, "avg_logprob": -0.31397143999735516, "compression_ratio": 1.4402985074626866, "no_speech_prob": 0.15170533955097198}, {"id": 183, "seek": 162400, "start": 1625.0, "end": 1630.0, "text": " So this is the summarized of where we are after the second edition.", "tokens": [50414, 407, 341, 307, 264, 14611, 1602, 295, 689, 321, 366, 934, 264, 1150, 11377, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14442551389653632, "compression_ratio": 1.4244604316546763, "no_speech_prob": 0.2596275806427002}, {"id": 184, "seek": 162400, "start": 1631.0, "end": 1642.0, "text": " The changes are here about the NXP platforms where it looks like we now need to register to get the socks reference documentation.", "tokens": [50714, 440, 2962, 366, 510, 466, 264, 426, 55, 47, 9473, 689, 309, 1542, 411, 321, 586, 643, 281, 7280, 281, 483, 264, 17564, 6408, 14333, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14442551389653632, "compression_ratio": 1.4244604316546763, "no_speech_prob": 0.2596275806427002}, {"id": 185, "seek": 164200, "start": 1643.0, "end": 1652.0, "text": " The NVIDIA Tegra looks like the documentation is not really uncertain and may be outdated.", "tokens": [50414, 440, 426, 3958, 6914, 1989, 20735, 1542, 411, 264, 14333, 307, 406, 534, 11308, 293, 815, 312, 36313, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20261009115921824, "compression_ratio": 1.5654450261780104, "no_speech_prob": 0.13984839618206024}, {"id": 186, "seek": 164200, "start": 1652.0, "end": 1658.0, "text": " The Rockchip one we know now that it can be achieved but still the documentation is not the best quality.", "tokens": [50864, 440, 6922, 339, 647, 472, 321, 458, 586, 300, 309, 393, 312, 11042, 457, 920, 264, 14333, 307, 406, 264, 1151, 3125, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20261009115921824, "compression_ratio": 1.5654450261780104, "no_speech_prob": 0.13984839618206024}, {"id": 187, "seek": 164200, "start": 1658.0, "end": 1667.0, "text": " The same with the Allwinner and for the MediaTek we see that NDA is needed to achieve the secure boot.", "tokens": [51164, 440, 912, 365, 264, 1057, 9136, 1193, 293, 337, 264, 14741, 51, 916, 321, 536, 300, 426, 7509, 307, 2978, 281, 4584, 264, 7144, 11450, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20261009115921824, "compression_ratio": 1.5654450261780104, "no_speech_prob": 0.13984839618206024}, {"id": 188, "seek": 166700, "start": 1668.0, "end": 1675.0, "text": " So this is the summary of the presentation. Looks like our knowledge is expanded over the last two years.", "tokens": [50414, 407, 341, 307, 264, 12691, 295, 264, 5860, 13, 10027, 411, 527, 3601, 307, 14342, 670, 264, 1036, 732, 924, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14397670240963206, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.08248504996299744}, {"id": 189, "seek": 166700, "start": 1675.0, "end": 1681.0, "text": " We for example know now how to enable the secure boot on the Rockchip.", "tokens": [50764, 492, 337, 1365, 458, 586, 577, 281, 9528, 264, 7144, 11450, 322, 264, 6922, 339, 647, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14397670240963206, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.08248504996299744}, {"id": 190, "seek": 166700, "start": 1681.0, "end": 1691.0, "text": " Still the general principles is common for all the vendors so we want to authenticate image before we load it.", "tokens": [51064, 8291, 264, 2674, 9156, 307, 2689, 337, 439, 264, 22056, 370, 321, 528, 281, 9214, 8700, 3256, 949, 321, 3677, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14397670240963206, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.08248504996299744}, {"id": 191, "seek": 169100, "start": 1692.0, "end": 1701.0, "text": " We have some private key to sign the firmware. We need to fuse the public key inside the sock and the boot room is still fit as the root of trust.", "tokens": [50414, 492, 362, 512, 4551, 2141, 281, 1465, 264, 30289, 13, 492, 643, 281, 31328, 264, 1908, 2141, 1854, 264, 35302, 293, 264, 11450, 1808, 307, 920, 3318, 382, 264, 5593, 295, 3361, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16934125423431395, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.10388419032096863}, {"id": 192, "seek": 169100, "start": 1701.0, "end": 1718.0, "text": " All cases use the SHA-2456 as a hash function for digital signatures and we see that more and more cases the documentation is under the NDA or the quality of it is really not the best.", "tokens": [50864, 1057, 3331, 764, 264, 38820, 12, 7911, 18317, 382, 257, 22019, 2445, 337, 4562, 32322, 293, 321, 536, 300, 544, 293, 544, 3331, 264, 14333, 307, 833, 264, 426, 7509, 420, 264, 3125, 295, 309, 307, 534, 406, 264, 1151, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16934125423431395, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.10388419032096863}, {"id": 193, "seek": 171800, "start": 1719.0, "end": 1726.0, "text": " Here is the way of how you can contact us and thank you for that presentation.", "tokens": [50414, 1692, 307, 264, 636, 295, 577, 291, 393, 3385, 505, 293, 1309, 291, 337, 300, 5860, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18792823553085328, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.1728862076997757}, {"id": 194, "seek": 171800, "start": 1733.0, "end": 1738.0, "text": " I think we are a little after time or maybe one question if there is any.", "tokens": [51114, 286, 519, 321, 366, 257, 707, 934, 565, 420, 1310, 472, 1168, 498, 456, 307, 604, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18792823553085328, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.1728862076997757}, {"id": 195, "seek": 173800, "start": 1739.0, "end": 1741.0, "text": " Yes.", "tokens": [50414, 1079, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2930412928263346, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.036597784608602524}, {"id": 196, "seek": 173800, "start": 1744.0, "end": 1757.0, "text": " The question is about in NXP secure boot you have a possibility to use ROM in your boot loader to check the fiber block.", "tokens": [50664, 440, 1168, 307, 466, 294, 426, 55, 47, 7144, 11450, 291, 362, 257, 7959, 281, 764, 41678, 294, 428, 11450, 3677, 260, 281, 1520, 264, 12874, 3461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2930412928263346, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.036597784608602524}, {"id": 197, "seek": 173800, "start": 1757.0, "end": 1762.0, "text": " So you can use the secure boot of NXP for more components like fit and newborn and so on.", "tokens": [51314, 407, 291, 393, 764, 264, 7144, 11450, 295, 426, 55, 47, 337, 544, 6677, 411, 3318, 293, 32928, 293, 370, 322, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2930412928263346, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.036597784608602524}, {"id": 198, "seek": 176200, "start": 1762.0, "end": 1773.0, "text": " Do you know of any of those new or the chips you have analyzed other platforms have similar thing but you can call the ROM and use it as a root for trust of everything.", "tokens": [50364, 1144, 291, 458, 295, 604, 295, 729, 777, 420, 264, 11583, 291, 362, 28181, 661, 9473, 362, 2531, 551, 457, 291, 393, 818, 264, 41678, 293, 764, 309, 382, 257, 5593, 337, 3361, 295, 1203, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2032430988468536, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.19482849538326263}, {"id": 199, "seek": 176200, "start": 1773.0, "end": 1784.0, "text": " Okay so the question was that the NXP provides the possibility to use the boot ROM to verify other parts of the firmware loaded in the whole process.", "tokens": [50914, 1033, 370, 264, 1168, 390, 300, 264, 426, 55, 47, 6417, 264, 7959, 281, 764, 264, 11450, 41678, 281, 16888, 661, 3166, 295, 264, 30289, 13210, 294, 264, 1379, 1399, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2032430988468536, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.19482849538326263}, {"id": 200, "seek": 178400, "start": 1785.0, "end": 1788.0, "text": " And the question is if other vendors also provide such things.", "tokens": [50414, 400, 264, 1168, 307, 498, 661, 22056, 611, 2893, 1270, 721, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18356388807296753, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.0900219976902008}, {"id": 201, "seek": 178400, "start": 1788.0, "end": 1797.0, "text": " From what we know now this is only like the NXP case and yeah basically that's the answer.", "tokens": [50564, 3358, 437, 321, 458, 586, 341, 307, 787, 411, 264, 426, 55, 47, 1389, 293, 1338, 1936, 300, 311, 264, 1867, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18356388807296753, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.0900219976902008}, {"id": 202, "seek": 178400, "start": 1797.0, "end": 1799.0, "text": " And yeah maybe this one.", "tokens": [51014, 400, 1338, 1310, 341, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18356388807296753, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.0900219976902008}, {"id": 203, "seek": 179900, "start": 1799.0, "end": 1808.0, "text": " How is given that you analyze so many vendors how is the support among the vendors for different types of key with different trust boundaries.", "tokens": [50364, 1012, 307, 2212, 300, 291, 12477, 370, 867, 22056, 577, 307, 264, 1406, 3654, 264, 22056, 337, 819, 3467, 295, 2141, 365, 819, 3361, 13180, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3000710046113427, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.22144927084445953}, {"id": 204, "seek": 179900, "start": 1808.0, "end": 1814.0, "text": " Like for example like the delegation key for like some select like the production in Asia.", "tokens": [50814, 1743, 337, 1365, 411, 264, 36602, 2141, 337, 411, 512, 3048, 411, 264, 4265, 294, 10038, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3000710046113427, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.22144927084445953}, {"id": 205, "seek": 179900, "start": 1814.0, "end": 1820.0, "text": " Then you would remote that key using row back levels and use cases like this.", "tokens": [51114, 1396, 291, 576, 8607, 300, 2141, 1228, 5386, 646, 4358, 293, 764, 3331, 411, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3000710046113427, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.22144927084445953}, {"id": 206, "seek": 182000, "start": 1820.0, "end": 1835.0, "text": " Okay so the question was I believe if we try to somehow if there are any process to in order to change the key used to sign the firmware yes.", "tokens": [50364, 1033, 370, 264, 1168, 390, 286, 1697, 498, 321, 853, 281, 6063, 498, 456, 366, 604, 1399, 281, 294, 1668, 281, 1319, 264, 2141, 1143, 281, 1465, 264, 30289, 2086, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20391696377804405, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.11524175852537155}, {"id": 207, "seek": 182000, "start": 1835.0, "end": 1839.0, "text": " To have multiple keys like you would hand out one key.", "tokens": [51114, 1407, 362, 3866, 9317, 411, 291, 576, 1011, 484, 472, 2141, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20391696377804405, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.11524175852537155}, {"id": 208, "seek": 182000, "start": 1839.0, "end": 1846.0, "text": " Okay to have like multiple keys to one person and to another team to another company maybe even and then later revoke it.", "tokens": [51314, 1033, 281, 362, 411, 3866, 9317, 281, 472, 954, 293, 281, 1071, 1469, 281, 1071, 2237, 1310, 754, 293, 550, 1780, 3698, 2949, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20391696377804405, "compression_ratio": 1.6391752577319587, "no_speech_prob": 0.11524175852537155}, {"id": 209, "seek": 184600, "start": 1847.0, "end": 1859.0, "text": " I believe that this will be depends on if we have some mechanism in our socks to provide more than one public key yeah.", "tokens": [50414, 286, 1697, 300, 341, 486, 312, 5946, 322, 498, 321, 362, 512, 7513, 294, 527, 17564, 281, 2893, 544, 813, 472, 1908, 2141, 1338, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15357251098190527, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.1576133817434311}, {"id": 210, "seek": 184600, "start": 1859.0, "end": 1871.0, "text": " But as we said those are one time only flushed in the socks so if there is only one place then I think that it will be only one the private key used later for the verification.", "tokens": [51014, 583, 382, 321, 848, 729, 366, 472, 565, 787, 19568, 292, 294, 264, 17564, 370, 498, 456, 307, 787, 472, 1081, 550, 286, 519, 300, 309, 486, 312, 787, 472, 264, 4551, 2141, 1143, 1780, 337, 264, 30206, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15357251098190527, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.1576133817434311}, {"id": 211, "seek": 187600, "start": 1876.0, "end": 1883.0, "text": " Okay thank you.", "tokens": [50414, 1033, 1309, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.32714840344020296, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.04549964889883995}], "language": "en"}