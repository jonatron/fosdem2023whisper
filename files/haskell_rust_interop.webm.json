{"text": " Okay, so our next talk is by Ivan Sraka. Ivan has commercial experience working in 3D graphics and runtime design with Rust, Nix and Haskell, and he also does design algorithm competitions and children's coding workshops. He lives in Belgium, loves biking, hiking, climbing and vegan cooking. His topic today is on the path of better interoperability with Rust. Thank you, Ivan. Thank you. Hi, everyone. So this talk is about a thing I worked past few months and there is also a blog article on engineering.iog.io, I guess, which is basically the content of these slides with links and references and everything. And so the IoG issue is there is really large Haskell code base to maintain and some parts of the code base are C-bits mainly for cryptographic library like Kriptonite. And so there is a will to more easily integrate Rust library because for cryptography there is cool Rust library implementation. And that's not quite simple right now to interface Haskell and Rust. And so this talk is about how to make the experience easier. And there is a repository, yeah, so it's the links here, the subtitle where you can find the source and everything. And so when we try to integrate to and time, for example, Rust and Haskell in our case, there is a lot of way to interoperate different programming languages and one of the solution which is often used is to use, I don't know, sockets or writing on a file or a pipe or something like that and to use a protocol, for example, protocol buffer from Google or anything you can use, JSON or an HTTP API, all this kind of stuff, but if you do such, you will rely on these calls like EOS to make interoperability works and if the library on which you rely, you want really little overhead to call it to rely on what the library does, library does, you prefer to use something which is called FFI which is more close to a system programming which is foreign function interface which is basically jumping the memory of binary code generated by another languages and hope it will work the right way and to make it work, it requires special attention and the tools needed to handle all that is we will take special attention to that right now and if we look at what exists to FFI between REST and other programming languages because there is such a common way to interact, interoperate stuff, we can see that from C to REST there is a thing called REST bind gene, from REST to C there is a thing called C bind gene, REST is, I will not name all them but there are all about a thing which is bind gene, which is generating bindings, maybe you already know that but why we do binding generation? Because FFI is really something dangerous where if your two foreign function interface didn't match, you will not know, your compiler will not warn you about that, it will warn you if a symbol is missing but it will not check the types, the number of your argument, if you respect the same calling convention, it will, so you want this interface to be generated so you can ensure it match, something really common but it does not exist between REST and ASCAL so that basically what this token project is about and so here are a bit of REST code, the way I choose to generate bind gene using macro which work like a function decorator, so it is a function that does something really simple, just print a low name, it is string interpolation in REST, here I import my library and here I have my custom thing which is I tell my binding generation about what would be my ASCAL wanted function signature and so a macro will expand the code, so it is code generation, macro actually in most languages so here is a code expanded by the macro, I have no mongrel things because maybe you know mongling, some things that exist in C++2 is function symbol change, a change in binary and we want to preserve it, we want binary to have the same symbol to be called from the website from an ASCAL program and all the other things I want you to look at is I use extern C here, precise C, that means in REST I want to use the C calling convention, C, HBI, so HBI is the calling convention and memory type layout which is a bit of the same part of the same definition, the thing is when you define FFI in ASCAL, I will show your ASCAL code just after this slide, you don't have the choice, you use the C calling convention, in REST you have a bit more choice but you can't use, that's not true, what did you say, you have the choice in ASCAL, never mind, I want just to point out that REST, HBIs, REST calling convention, the CUL convention, I use REST function inside the binary between the same, isn't stable, which is things that exist in ASCAL 2, which is a way that REST internals, the REST core team keep to be able to break the mechanism inside REST C without changing the measure version of the compiler, so for example the CUL convention changed several times since the stable version of the language, which is REST 1.0 something, so if we build a thing on top of REST, HBI, CUL convention, it will not be stable, it will be an ACC, so maintaining it will be really laborious because it's working with internal documentation which is not made for people to use it as a public API, and so why REST macro? I want to point out that because there is a lot of way to the binding generation and often it works as an external tooling and the issue with the external tooling is really easy to forget to integrate the external tooling into your build suite and if you do that your binding will be out of sync with your codes, so your program will not work, so we want binding generation to be part of the create compilation, create is a REST module, and so I did it that way, and I also want to point out that there is other program in REST space like C bind genes that just try to integrate REST code like search and replace regex, so if you for example in the language have two identifiers in different namespace, the C bind gene that generates C bind gene for REST will not be able to understand their meaning, so when it's an undefined behavior, it's part of the limitation of that library, which is not the part of the bind gene library we present here, that understands REST semantics because it's implemented as a macro, and so it expands REST code and it has to generate as a set effect ASCAL code and ASCAL modules that just have the wanted signature, so same symbol, same signature, things that sync together, so if we relook the REST code, there's another thing I want to talk to you about, here you see you have the C, the compatible calling conversion type, the thing I want you to look at is I use trait, trait, rep C, trait, rep REST, and that's trait REST type classes, that's a way to define contracts for data structure, you mean a data structure should implement this and this method, so I want every data structure that has this method would implement those, internally it's implemented as virtual table, like in C++, and why I use that, I use that to be extensive programmable, so I have nice error, it's part of REST type system, users can add types to this framework, and for the types, which is part of the standard library, that's I implement myself, at the care of the memory management, and we talk about it a bit later, and also the thing is in a FFI in REST, you can use only what's called FFE safe types, it means types that have a memory layout in C calling convention, and most of REST type have undefined memory layout for C calling convention, so the thing is for example if I get REST strings, I cast it safely to a C string, so that I could represent as C string works, which is another way that REST strings are actually represented, and so what about GC, the thing is REST have a destructor mechanism based on ownership, a lot of rusty things, but the idea is more about destructors, like when you go out of a scope, the destructor of the value is called, which is dropped, and so what I do here is I tell REST type system to, does not call drop on REST value, because it will live on the Askel side, so that's the other side of the bindings that need to free the value, which is a thing that you can do with March Mald, I don't know how to pronounce that library, and the thing is also I learned during this project the real semantic of safe and then safe foreign call definition, because I finally understand that unsafe mean you want to play with any object on the Askel heap, which is not the default case of what we actually do when we pass basic data types, that's our, does not need the garbage collector to pause, because it doesn't know if we could get an inconsistent state by some things that the foreign call will do, and so few users in safety will have a warning that say a cautious, an unsafe call will slow down your war program, are you sure you want to do that or not and anything, and yeah, and that's a library, a REST library, but those are things I did and that's also what exists for all of our REST tooling is a key tool that helps you to set up a project, because you have to tweak your REST build file, you have to tweak your R-scale build file, actually you have to do a setup.hs build customization in the Askel unless you use NICS, which I could understand a lot of people who won't do, and on REST side I use build.hs, if you do a dynamic library, because dynamic library that GAC fetch needs the GAC version in the name of the dynamic library, so that's the thing that I have to get as a build customization, this kind of tweak, but overall this library is really small, it's, I'll put the next slide just a few minutes later, the whole library, the whole tooling I present here is less than 1000 lines of code, so okay, it's 1000 lines of code, so that's really small, minimalist, and kiss, so actually I, I forget what I was about to say, actually you, you, you, all that, all this plumbery is, is simple, and I'm not sure myself, I want to, to make it more complex, because it just works, and the thing is, it works, but you use really simple data types, the C data types that are representable in Askel and REST, and there is a lot of things that are not representable in C, for example, REST slice, a slice is a pointer and a size, and you have a guarantee that there is memory in it, you can iterate on it, you can represent it in C with a strip, but it's not really a C type, you will do a custom strip, and, and those things are targeted by the REST RFC, which is named interoperable ABI, which is creating an ABI which is stable, which have more REST C things than the C ABI, but which is flagged as stable, which is not the case of the REST internal IBI, and the other thing is cabal customization is a bit of a mess, doing the setup that hashes to find the library and anything to make it work, because of cabal bugs, so I really love to have a standard way to integrate, for example, REST chain into cabal, here you have to run the two-tile chain in two different states, and that's it, I can throw a lot of questions, or I can do a demo if my talk is shorter than what I was expecting, so that's the date to ask questions, or, and, yeah. Yeah, I can do, I can do a quick demo, sorry, it's not, it's not easy because my, it's not mirroring, so I have to look at the, the screen why I, I doing this thing, what I can do, what I can do, yeah, yeah, did you, up, yeah, it will be unsafe on the Askel side, if you do that, for example, because you, you, will it be, I, I, it's an interesting example, I didn't try passing a function pointer, the thing is, there is, the thing is, you, you, if you want to pass complex data types, you, it's always more meaningful to use serialization, because it's, it's, it doesn't match the two language model, but function, I didn't honestly think about it, but I, you mean a function pointer that will cross the FFI barrier? So that's the whole question, right? Yeah, yeah, yeah. In Erlen, for example, you have no concept of sharing pointers, you copy the whole data, and use it to the other node, including function, which are serialized, and then reinterpreted on the other node. I guess it will not, not really be an issue, because, because in fact, there's no really boundary at the end, that's the one binary, so the only things that I, I want my mental model to, to have a better grasp around it is how GC, as a GC will behave in this case, but I think there is no special issue for doing that, but I'm, I think I should experiment on it first to, to, to, before saying it's, it's completely okay to do that. Yeah, thank you for the question. Uh, yeah, I, did you see something? Fuck. Fuck. So, sorry. So if I go here, for example, I have a little resting, SRC. Um, yeah, I can show you the lib.rs, which do, uh, cryptographic primitive, for example, and you, what you, you manipulate is clearly, uh, rest types, it's not C types, and I have a warning, and I don't know why, uh, yeah, because I don't install it first, and if I do, I guess it will work. I hope so. Uh, I can check what's happened with, after some macro expansion, uh, will it work? Yeah. Sorry. Uh, DEMO effect. Uh, yeah. Hmm. Why? I, I don't know why you do that, but maybe I'm no internet connection and that's the issue here. Yeah. I guess that's the issue. So never mind. I can show you the, the askels things generated. So, no, that's a cabal file generated by the client, and so, uh, I have, it looks like that. Uh, and I have, yeah, it looked like that. I have my, my code generated. Uh, and what can I show you? I can show you the build customization. You can see what it looks like. Uh, it looks like it. It's not really interesting, but it do a few things. And what can I show you? Uh, I have a little file that's unsure that's a client you use to generate the whole stuff is, uh, compatible with the version of the library you use, due to, if I want to change the whole Bay of York in the future. And yeah, on the askel side, it would look something like that. So I have a project, I have a cabal project, right? Uh, that looks like that. Uh, and the test thing just work like, that I have, uh, a test dot cabal. Uh, it looks like that. Or I can use it like it was a normal askel dependencies and my, uh, askel code is quite simple, I guess. Yeah. Uh, so it's fixed me, but don't look. Yeah. Uh, yeah, you have something like that. It's, it's always a bit, uh, you, you, you manipulate, um, low level data structure, but that's, that's often what you want to do when you, you, you brought something in the system programming language. That's one reason to use rest over something else. Otherwise, uh, um, but I don't know. I, I, I got the input that's the, the bind gen don't really need, don't sorry, don't really need, uh, more advanced data types. For example, OCaml have an interop, uh, OCaml interrupts things with rust. That's, uh, helps to represent, um, ADT, both rust and OCaml. And I don't know if we really need to have ADT conversion between languages for most of use case. I don't know. Um, yeah, uh, that's, that's many. I don't know if you have other question or just curious about something or, or another. Yeah. Okay. There's a question. So, uh, you said at one point that, uh, rest will not drop the value and that's to, for our scale to, to free. So how does that work? Is that done by the, by the GC or does it need to be done manually? Um, you mean how I tell rest to not drop a value? No, if, if we do, if rest doesn't drop the value, who does? Is it the, the, uh, the scale GC or, or somewhere we need to, to advise, you know, you know, program? Yeah. Uh, the, the idea is because it's part of, uh, the marshmallow things, you will have to free it explicitly as I understand it. If, if we do not survive with leave, uh, maybe get some, somebody could tell me if I, if I'm mistaken in this point, it's really hard to, to, to, to debug what actually GC does. Uh, so far he didn't experiment so much on that, but, but yeah, the real thing is really that if you, if you do not force for us to, to not drop things, it will, because it's part of its type system, it will, it will put code to, to free memory, to free of the memory allocator you used, uh, straight into the code. Uh, rest, uh, statically decide where to put allocation and release of memory inside the bin and binary. It's a computed as, uh, statically at compile time. So you have to tell type system to, to not do it for specific types if you, there's an internals for that. Uh, but on Askel side, I, I, I'm not sure, I'm pretty sure, unsure that the GC will, uh, track it, um, as, uh, as a Gaboch collected object, I, I think, because you have to, to do it explicitly. Yeah. But that's one of the, the point, I'm a bit unconfident, so I want to, to check again, it's this kind of scenario. Yeah. Um, do you have, was there a question? What do you do if there's an external Rust library that you don't have control over, um, because they might not want to add HS, bind gen macros to their code base? Is there a way of generating a shim or something? Um, okay. In fact, it's really easy in Rust to do reexport. So you can always create a new crate, reexport a crate as you, you say, uh, I depend on this crate and reexport the thing I want to reexport and I, I, I, I decorate or not element. Yeah, that works on functions that exist in the other library. Sorry, you can you put those macros on the functions in the other library then? Yeah. Yeah. Yeah. Um, in fact, it's just, just wrapping function by function. So, so you can do whatever you want. Um, and yeah. Uh, and you can opt in or opt out some function of a library and some not, which is, to me, is a, is a advantage of using macro and function decorator over, uh, code, uh, wall code, uh, parsing. That's not free though, is it? That's not. So if you're, sorry, so if you're, you're reexporting functions but you, but are you actually reexporting the same function or are you exporting a wrapper around the reexport? Yeah, but I, I, okay, I, in Rust, there is a clear, uh, um, idea of, uh, what symbol I want to expose and what symbol I don't want to expose. So I, I'm pretty confident that the compiler has the library to inline or not things. So for example, most of the trade implementation I do, which is casting, are inline. I explicitly say I want it to be inline. And so, yes, it's a function that's called a function, but at the end, it's just, it's, uh, have no, no runtime cost. So yeah. Okay. We're out of time. Thank you. So thanks very much, Yvonne. Let's give him a round of applause.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.0, "text": " Okay, so our next talk is by Ivan Sraka.", "tokens": [50364, 1033, 11, 370, 527, 958, 751, 307, 538, 28893, 318, 424, 2330, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3089121038263494, "compression_ratio": 1.3558282208588956, "no_speech_prob": 0.17762823402881622}, {"id": 1, "seek": 0, "start": 11.0, "end": 18.48, "text": " Ivan has commercial experience working in 3D graphics and runtime design with Rust, Nix", "tokens": [50914, 28893, 575, 6841, 1752, 1364, 294, 805, 35, 11837, 293, 34474, 1715, 365, 34952, 11, 426, 970, 51288], "temperature": 0.0, "avg_logprob": -0.3089121038263494, "compression_ratio": 1.3558282208588956, "no_speech_prob": 0.17762823402881622}, {"id": 2, "seek": 0, "start": 18.48, "end": 29.72, "text": " and Haskell, and he also does design algorithm competitions and children's coding workshops.", "tokens": [51288, 293, 8646, 43723, 11, 293, 415, 611, 775, 1715, 9284, 26185, 293, 2227, 311, 17720, 19162, 13, 51850], "temperature": 0.0, "avg_logprob": -0.3089121038263494, "compression_ratio": 1.3558282208588956, "no_speech_prob": 0.17762823402881622}, {"id": 3, "seek": 2972, "start": 29.72, "end": 34.8, "text": " He lives in Belgium, loves biking, hiking, climbing and vegan cooking.", "tokens": [50364, 634, 2909, 294, 28094, 11, 6752, 40276, 11, 23784, 11, 14780, 293, 12824, 6361, 13, 50618], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 4, "seek": 2972, "start": 34.8, "end": 40.72, "text": " His topic today is on the path of better interoperability with Rust.", "tokens": [50618, 2812, 4829, 965, 307, 322, 264, 3100, 295, 1101, 728, 7192, 2310, 365, 34952, 13, 50914], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 5, "seek": 2972, "start": 40.72, "end": 41.72, "text": " Thank you, Ivan.", "tokens": [50914, 1044, 291, 11, 28893, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 6, "seek": 2972, "start": 41.72, "end": 42.72, "text": " Thank you.", "tokens": [50964, 1044, 291, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 7, "seek": 2972, "start": 42.72, "end": 47.72, "text": " Hi, everyone.", "tokens": [51014, 2421, 11, 1518, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 8, "seek": 2972, "start": 47.72, "end": 58.72, "text": " So this talk is about a thing I worked past few months and there is also a blog article", "tokens": [51264, 407, 341, 751, 307, 466, 257, 551, 286, 2732, 1791, 1326, 2493, 293, 456, 307, 611, 257, 6968, 7222, 51814], "temperature": 0.0, "avg_logprob": -0.22503667195638022, "compression_ratio": 1.454054054054054, "no_speech_prob": 0.0257833544164896}, {"id": 9, "seek": 5872, "start": 58.72, "end": 67.03999999999999, "text": " on engineering.iog.io, I guess, which is basically the content of these slides with links and", "tokens": [50364, 322, 7043, 13, 1004, 70, 13, 1004, 11, 286, 2041, 11, 597, 307, 1936, 264, 2701, 295, 613, 9788, 365, 6123, 293, 50780], "temperature": 0.0, "avg_logprob": -0.24027284822965922, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.3337055742740631}, {"id": 10, "seek": 5872, "start": 67.03999999999999, "end": 69.44, "text": " references and everything.", "tokens": [50780, 15400, 293, 1203, 13, 50900], "temperature": 0.0, "avg_logprob": -0.24027284822965922, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.3337055742740631}, {"id": 11, "seek": 5872, "start": 69.44, "end": 78.32, "text": " And so the IoG issue is there is really large Haskell code base to maintain and some parts", "tokens": [50900, 400, 370, 264, 286, 78, 38, 2734, 307, 456, 307, 534, 2416, 8646, 43723, 3089, 3096, 281, 6909, 293, 512, 3166, 51344], "temperature": 0.0, "avg_logprob": -0.24027284822965922, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.3337055742740631}, {"id": 12, "seek": 5872, "start": 78.32, "end": 85.75999999999999, "text": " of the code base are C-bits mainly for cryptographic library like Kriptonite.", "tokens": [51344, 295, 264, 3089, 3096, 366, 383, 12, 34010, 8704, 337, 9844, 12295, 6405, 411, 591, 470, 21987, 642, 13, 51716], "temperature": 0.0, "avg_logprob": -0.24027284822965922, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.3337055742740631}, {"id": 13, "seek": 8576, "start": 85.76, "end": 93.88000000000001, "text": " And so there is a will to more easily integrate Rust library because for cryptography there", "tokens": [50364, 400, 370, 456, 307, 257, 486, 281, 544, 3612, 13365, 34952, 6405, 570, 337, 9844, 5820, 456, 50770], "temperature": 0.0, "avg_logprob": -0.19763843348768892, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.09184820204973221}, {"id": 14, "seek": 8576, "start": 93.88000000000001, "end": 99.88000000000001, "text": " is cool Rust library implementation.", "tokens": [50770, 307, 1627, 34952, 6405, 11420, 13, 51070], "temperature": 0.0, "avg_logprob": -0.19763843348768892, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.09184820204973221}, {"id": 15, "seek": 8576, "start": 99.88000000000001, "end": 104.92, "text": " And that's not quite simple right now to interface Haskell and Rust.", "tokens": [51070, 400, 300, 311, 406, 1596, 2199, 558, 586, 281, 9226, 8646, 43723, 293, 34952, 13, 51322], "temperature": 0.0, "avg_logprob": -0.19763843348768892, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.09184820204973221}, {"id": 16, "seek": 8576, "start": 104.92, "end": 110.76, "text": " And so this talk is about how to make the experience easier.", "tokens": [51322, 400, 370, 341, 751, 307, 466, 577, 281, 652, 264, 1752, 3571, 13, 51614], "temperature": 0.0, "avg_logprob": -0.19763843348768892, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.09184820204973221}, {"id": 17, "seek": 11076, "start": 110.76, "end": 117.56, "text": " And there is a repository, yeah, so it's the links here, the subtitle where you can find", "tokens": [50364, 400, 456, 307, 257, 25841, 11, 1338, 11, 370, 309, 311, 264, 6123, 510, 11, 264, 30706, 306, 689, 291, 393, 915, 50704], "temperature": 0.0, "avg_logprob": -0.2724055748481255, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.5488017201423645}, {"id": 18, "seek": 11076, "start": 117.56, "end": 119.76, "text": " the source and everything.", "tokens": [50704, 264, 4009, 293, 1203, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2724055748481255, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.5488017201423645}, {"id": 19, "seek": 11076, "start": 119.76, "end": 128.72, "text": " And so when we try to integrate to and time, for example, Rust and Haskell in our case,", "tokens": [50814, 400, 370, 562, 321, 853, 281, 13365, 281, 293, 565, 11, 337, 1365, 11, 34952, 293, 8646, 43723, 294, 527, 1389, 11, 51262], "temperature": 0.0, "avg_logprob": -0.2724055748481255, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.5488017201423645}, {"id": 20, "seek": 11076, "start": 128.72, "end": 139.44, "text": " there is a lot of way to interoperate different programming languages and one of the solution", "tokens": [51262, 456, 307, 257, 688, 295, 636, 281, 728, 7192, 473, 819, 9410, 8650, 293, 472, 295, 264, 3827, 51798], "temperature": 0.0, "avg_logprob": -0.2724055748481255, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.5488017201423645}, {"id": 21, "seek": 13944, "start": 139.44, "end": 148.04, "text": " which is often used is to use, I don't know, sockets or writing on a file or a pipe or", "tokens": [50364, 597, 307, 2049, 1143, 307, 281, 764, 11, 286, 500, 380, 458, 11, 370, 11984, 420, 3579, 322, 257, 3991, 420, 257, 11240, 420, 50794], "temperature": 0.0, "avg_logprob": -0.22308670149909127, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.10083073377609253}, {"id": 22, "seek": 13944, "start": 148.04, "end": 153.88, "text": " something like that and to use a protocol, for example, protocol buffer from Google or", "tokens": [50794, 746, 411, 300, 293, 281, 764, 257, 10336, 11, 337, 1365, 11, 10336, 21762, 490, 3329, 420, 51086], "temperature": 0.0, "avg_logprob": -0.22308670149909127, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.10083073377609253}, {"id": 23, "seek": 13944, "start": 153.88, "end": 163.36, "text": " anything you can use, JSON or an HTTP API, all this kind of stuff, but if you do such,", "tokens": [51086, 1340, 291, 393, 764, 11, 31828, 420, 364, 33283, 9362, 11, 439, 341, 733, 295, 1507, 11, 457, 498, 291, 360, 1270, 11, 51560], "temperature": 0.0, "avg_logprob": -0.22308670149909127, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.10083073377609253}, {"id": 24, "seek": 16336, "start": 163.36, "end": 172.0, "text": " you will rely on these calls like EOS to make interoperability works and if the library", "tokens": [50364, 291, 486, 10687, 322, 613, 5498, 411, 462, 4367, 281, 652, 728, 7192, 2310, 1985, 293, 498, 264, 6405, 50796], "temperature": 0.0, "avg_logprob": -0.2394575025977158, "compression_ratio": 1.7122641509433962, "no_speech_prob": 0.176612988114357}, {"id": 25, "seek": 16336, "start": 172.0, "end": 179.84, "text": " on which you rely, you want really little overhead to call it to rely on what the library", "tokens": [50796, 322, 597, 291, 10687, 11, 291, 528, 534, 707, 19922, 281, 818, 309, 281, 10687, 322, 437, 264, 6405, 51188], "temperature": 0.0, "avg_logprob": -0.2394575025977158, "compression_ratio": 1.7122641509433962, "no_speech_prob": 0.176612988114357}, {"id": 26, "seek": 16336, "start": 179.84, "end": 185.64000000000001, "text": " does, library does, you prefer to use something which is called FFI which is more close to", "tokens": [51188, 775, 11, 6405, 775, 11, 291, 4382, 281, 764, 746, 597, 307, 1219, 479, 38568, 597, 307, 544, 1998, 281, 51478], "temperature": 0.0, "avg_logprob": -0.2394575025977158, "compression_ratio": 1.7122641509433962, "no_speech_prob": 0.176612988114357}, {"id": 27, "seek": 16336, "start": 185.64000000000001, "end": 190.88000000000002, "text": " a system programming which is foreign function interface which is basically jumping the memory", "tokens": [51478, 257, 1185, 9410, 597, 307, 5329, 2445, 9226, 597, 307, 1936, 11233, 264, 4675, 51740], "temperature": 0.0, "avg_logprob": -0.2394575025977158, "compression_ratio": 1.7122641509433962, "no_speech_prob": 0.176612988114357}, {"id": 28, "seek": 19088, "start": 190.88, "end": 200.96, "text": " of binary code generated by another languages and hope it will work the right way and to", "tokens": [50364, 295, 17434, 3089, 10833, 538, 1071, 8650, 293, 1454, 309, 486, 589, 264, 558, 636, 293, 281, 50868], "temperature": 0.0, "avg_logprob": -0.20875726207610099, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.1705590784549713}, {"id": 29, "seek": 19088, "start": 200.96, "end": 208.64, "text": " make it work, it requires special attention and the tools needed to handle all that is", "tokens": [50868, 652, 309, 589, 11, 309, 7029, 2121, 3202, 293, 264, 3873, 2978, 281, 4813, 439, 300, 307, 51252], "temperature": 0.0, "avg_logprob": -0.20875726207610099, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.1705590784549713}, {"id": 30, "seek": 19088, "start": 208.64, "end": 217.96, "text": " we will take special attention to that right now and if we look at what exists to FFI between", "tokens": [51252, 321, 486, 747, 2121, 3202, 281, 300, 558, 586, 293, 498, 321, 574, 412, 437, 8198, 281, 479, 38568, 1296, 51718], "temperature": 0.0, "avg_logprob": -0.20875726207610099, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.1705590784549713}, {"id": 31, "seek": 21796, "start": 217.96, "end": 224.0, "text": " REST and other programming languages because there is such a common way to interact, interoperate", "tokens": [50364, 497, 14497, 293, 661, 9410, 8650, 570, 456, 307, 1270, 257, 2689, 636, 281, 4648, 11, 728, 7192, 473, 50666], "temperature": 0.0, "avg_logprob": -0.32062259473298726, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.16771730780601501}, {"id": 32, "seek": 21796, "start": 224.0, "end": 231.76000000000002, "text": " stuff, we can see that from C to REST there is a thing called REST bind gene, from REST", "tokens": [50666, 1507, 11, 321, 393, 536, 300, 490, 383, 281, 497, 14497, 456, 307, 257, 551, 1219, 497, 14497, 14786, 12186, 11, 490, 497, 14497, 51054], "temperature": 0.0, "avg_logprob": -0.32062259473298726, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.16771730780601501}, {"id": 33, "seek": 21796, "start": 231.76000000000002, "end": 237.60000000000002, "text": " to C there is a thing called C bind gene, REST is, I will not name all them but there", "tokens": [51054, 281, 383, 456, 307, 257, 551, 1219, 383, 14786, 12186, 11, 497, 14497, 307, 11, 286, 486, 406, 1315, 439, 552, 457, 456, 51346], "temperature": 0.0, "avg_logprob": -0.32062259473298726, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.16771730780601501}, {"id": 34, "seek": 21796, "start": 237.60000000000002, "end": 244.16, "text": " are all about a thing which is bind gene, which is generating bindings, maybe you already", "tokens": [51346, 366, 439, 466, 257, 551, 597, 307, 14786, 12186, 11, 597, 307, 17746, 14786, 1109, 11, 1310, 291, 1217, 51674], "temperature": 0.0, "avg_logprob": -0.32062259473298726, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.16771730780601501}, {"id": 35, "seek": 24416, "start": 244.16, "end": 250.07999999999998, "text": " know that but why we do binding generation?", "tokens": [50364, 458, 300, 457, 983, 321, 360, 17359, 5125, 30, 50660], "temperature": 0.0, "avg_logprob": -0.19691192781603015, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.4562252461910248}, {"id": 36, "seek": 24416, "start": 250.07999999999998, "end": 258.08, "text": " Because FFI is really something dangerous where if your two foreign function interface", "tokens": [50660, 1436, 479, 38568, 307, 534, 746, 5795, 689, 498, 428, 732, 5329, 2445, 9226, 51060], "temperature": 0.0, "avg_logprob": -0.19691192781603015, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.4562252461910248}, {"id": 37, "seek": 24416, "start": 258.08, "end": 264.56, "text": " didn't match, you will not know, your compiler will not warn you about that, it will warn", "tokens": [51060, 994, 380, 2995, 11, 291, 486, 406, 458, 11, 428, 31958, 486, 406, 12286, 291, 466, 300, 11, 309, 486, 12286, 51384], "temperature": 0.0, "avg_logprob": -0.19691192781603015, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.4562252461910248}, {"id": 38, "seek": 24416, "start": 264.56, "end": 272.44, "text": " you if a symbol is missing but it will not check the types, the number of your argument,", "tokens": [51384, 291, 498, 257, 5986, 307, 5361, 457, 309, 486, 406, 1520, 264, 3467, 11, 264, 1230, 295, 428, 6770, 11, 51778], "temperature": 0.0, "avg_logprob": -0.19691192781603015, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.4562252461910248}, {"id": 39, "seek": 27244, "start": 272.44, "end": 278.56, "text": " if you respect the same calling convention, it will, so you want this interface to be", "tokens": [50364, 498, 291, 3104, 264, 912, 5141, 10286, 11, 309, 486, 11, 370, 291, 528, 341, 9226, 281, 312, 50670], "temperature": 0.0, "avg_logprob": -0.30474820733070374, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.14466527104377747}, {"id": 40, "seek": 27244, "start": 278.56, "end": 286.52, "text": " generated so you can ensure it match, something really common but it does not exist between", "tokens": [50670, 10833, 370, 291, 393, 5586, 309, 2995, 11, 746, 534, 2689, 457, 309, 775, 406, 2514, 1296, 51068], "temperature": 0.0, "avg_logprob": -0.30474820733070374, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.14466527104377747}, {"id": 41, "seek": 27244, "start": 286.52, "end": 293.76, "text": " REST and ASCAL so that basically what this token project is about and so here are a bit", "tokens": [51068, 497, 14497, 293, 7469, 34, 3427, 370, 300, 1936, 437, 341, 14862, 1716, 307, 466, 293, 370, 510, 366, 257, 857, 51430], "temperature": 0.0, "avg_logprob": -0.30474820733070374, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.14466527104377747}, {"id": 42, "seek": 29376, "start": 293.76, "end": 302.56, "text": " of REST code, the way I choose to generate bind gene using macro which work like a function", "tokens": [50364, 295, 497, 14497, 3089, 11, 264, 636, 286, 2826, 281, 8460, 14786, 12186, 1228, 18887, 597, 589, 411, 257, 2445, 50804], "temperature": 0.0, "avg_logprob": -0.2857417631685064, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.43390798568725586}, {"id": 43, "seek": 29376, "start": 302.56, "end": 308.92, "text": " decorator, so it is a function that does something really simple, just print a low name, it is", "tokens": [50804, 7919, 1639, 11, 370, 309, 307, 257, 2445, 300, 775, 746, 534, 2199, 11, 445, 4482, 257, 2295, 1315, 11, 309, 307, 51122], "temperature": 0.0, "avg_logprob": -0.2857417631685064, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.43390798568725586}, {"id": 44, "seek": 29376, "start": 308.92, "end": 314.24, "text": " string interpolation in REST, here I import my library and here I have my custom thing", "tokens": [51122, 6798, 44902, 399, 294, 497, 14497, 11, 510, 286, 974, 452, 6405, 293, 510, 286, 362, 452, 2375, 551, 51388], "temperature": 0.0, "avg_logprob": -0.2857417631685064, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.43390798568725586}, {"id": 45, "seek": 29376, "start": 314.24, "end": 323.48, "text": " which is I tell my binding generation about what would be my ASCAL wanted function signature", "tokens": [51388, 597, 307, 286, 980, 452, 17359, 5125, 466, 437, 576, 312, 452, 7469, 34, 3427, 1415, 2445, 13397, 51850], "temperature": 0.0, "avg_logprob": -0.2857417631685064, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.43390798568725586}, {"id": 46, "seek": 32348, "start": 324.44, "end": 333.8, "text": " and so a macro will expand the code, so it is code generation, macro actually in most", "tokens": [50412, 293, 370, 257, 18887, 486, 5268, 264, 3089, 11, 370, 309, 307, 3089, 5125, 11, 18887, 767, 294, 881, 50880], "temperature": 0.0, "avg_logprob": -0.26272559695773656, "compression_ratio": 1.6635071090047393, "no_speech_prob": 0.04094705730676651}, {"id": 47, "seek": 32348, "start": 333.8, "end": 340.88, "text": " languages so here is a code expanded by the macro, I have no mongrel things because maybe", "tokens": [50880, 8650, 370, 510, 307, 257, 3089, 14342, 538, 264, 18887, 11, 286, 362, 572, 275, 556, 4419, 721, 570, 1310, 51234], "temperature": 0.0, "avg_logprob": -0.26272559695773656, "compression_ratio": 1.6635071090047393, "no_speech_prob": 0.04094705730676651}, {"id": 48, "seek": 32348, "start": 340.88, "end": 346.8, "text": " you know mongling, some things that exist in C++2 is function symbol change, a change", "tokens": [51234, 291, 458, 275, 556, 1688, 11, 512, 721, 300, 2514, 294, 383, 25472, 17, 307, 2445, 5986, 1319, 11, 257, 1319, 51530], "temperature": 0.0, "avg_logprob": -0.26272559695773656, "compression_ratio": 1.6635071090047393, "no_speech_prob": 0.04094705730676651}, {"id": 49, "seek": 32348, "start": 346.8, "end": 353.08000000000004, "text": " in binary and we want to preserve it, we want binary to have the same symbol to be called", "tokens": [51530, 294, 17434, 293, 321, 528, 281, 15665, 309, 11, 321, 528, 17434, 281, 362, 264, 912, 5986, 281, 312, 1219, 51844], "temperature": 0.0, "avg_logprob": -0.26272559695773656, "compression_ratio": 1.6635071090047393, "no_speech_prob": 0.04094705730676651}, {"id": 50, "seek": 35308, "start": 353.15999999999997, "end": 359.03999999999996, "text": " from the website from an ASCAL program and all the other things I want you to look at", "tokens": [50368, 490, 264, 3144, 490, 364, 7469, 34, 3427, 1461, 293, 439, 264, 661, 721, 286, 528, 291, 281, 574, 412, 50662], "temperature": 0.0, "avg_logprob": -0.3737265331910388, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.033498529344797134}, {"id": 51, "seek": 35308, "start": 359.03999999999996, "end": 366.8, "text": " is I use extern C here, precise C, that means in REST I want to use the C calling convention,", "tokens": [50662, 307, 286, 764, 30360, 383, 510, 11, 13600, 383, 11, 300, 1355, 294, 497, 14497, 286, 528, 281, 764, 264, 383, 5141, 10286, 11, 51050], "temperature": 0.0, "avg_logprob": -0.3737265331910388, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.033498529344797134}, {"id": 52, "seek": 35308, "start": 366.8, "end": 373.24, "text": " C, HBI, so HBI is the calling convention and memory type layout which is a bit of the", "tokens": [51050, 383, 11, 389, 33, 40, 11, 370, 389, 33, 40, 307, 264, 5141, 10286, 293, 4675, 2010, 13333, 597, 307, 257, 857, 295, 264, 51372], "temperature": 0.0, "avg_logprob": -0.3737265331910388, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.033498529344797134}, {"id": 53, "seek": 35308, "start": 373.24, "end": 383.03999999999996, "text": " same part of the same definition, the thing is when you define FFI in ASCAL, I will show", "tokens": [51372, 912, 644, 295, 264, 912, 7123, 11, 264, 551, 307, 562, 291, 6964, 479, 38568, 294, 7469, 34, 3427, 11, 286, 486, 855, 51862], "temperature": 0.0, "avg_logprob": -0.3737265331910388, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.033498529344797134}, {"id": 54, "seek": 38304, "start": 383.12, "end": 388.56, "text": " your ASCAL code just after this slide, you don't have the choice, you use the C calling", "tokens": [50368, 428, 7469, 34, 3427, 3089, 445, 934, 341, 4137, 11, 291, 500, 380, 362, 264, 3922, 11, 291, 764, 264, 383, 5141, 50640], "temperature": 0.0, "avg_logprob": -0.2730487309969388, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.014803973957896233}, {"id": 55, "seek": 38304, "start": 388.56, "end": 397.08000000000004, "text": " convention, in REST you have a bit more choice but you can't use, that's not true, what did", "tokens": [50640, 10286, 11, 294, 497, 14497, 291, 362, 257, 857, 544, 3922, 457, 291, 393, 380, 764, 11, 300, 311, 406, 2074, 11, 437, 630, 51066], "temperature": 0.0, "avg_logprob": -0.2730487309969388, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.014803973957896233}, {"id": 56, "seek": 38304, "start": 397.08000000000004, "end": 404.92, "text": " you say, you have the choice in ASCAL, never mind, I want just to point out that REST,", "tokens": [51066, 291, 584, 11, 291, 362, 264, 3922, 294, 7469, 34, 3427, 11, 1128, 1575, 11, 286, 528, 445, 281, 935, 484, 300, 497, 14497, 11, 51458], "temperature": 0.0, "avg_logprob": -0.2730487309969388, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.014803973957896233}, {"id": 57, "seek": 38304, "start": 404.92, "end": 409.16, "text": " HBIs, REST calling convention, the CUL convention, I use REST function inside the binary between", "tokens": [51458, 389, 33, 6802, 11, 497, 14497, 5141, 10286, 11, 264, 383, 10253, 10286, 11, 286, 764, 497, 14497, 2445, 1854, 264, 17434, 1296, 51670], "temperature": 0.0, "avg_logprob": -0.2730487309969388, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.014803973957896233}, {"id": 58, "seek": 40916, "start": 409.20000000000005, "end": 416.76000000000005, "text": " the same, isn't stable, which is things that exist in ASCAL 2, which is a way that REST", "tokens": [50366, 264, 912, 11, 1943, 380, 8351, 11, 597, 307, 721, 300, 2514, 294, 7469, 34, 3427, 568, 11, 597, 307, 257, 636, 300, 497, 14497, 50744], "temperature": 0.0, "avg_logprob": -0.3508676256452288, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.023608673363924026}, {"id": 59, "seek": 40916, "start": 416.76000000000005, "end": 427.88, "text": " internals, the REST core team keep to be able to break the mechanism inside REST C without", "tokens": [50744, 2154, 1124, 11, 264, 497, 14497, 4965, 1469, 1066, 281, 312, 1075, 281, 1821, 264, 7513, 1854, 497, 14497, 383, 1553, 51300], "temperature": 0.0, "avg_logprob": -0.3508676256452288, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.023608673363924026}, {"id": 60, "seek": 40916, "start": 427.88, "end": 432.96000000000004, "text": " changing the measure version of the compiler, so for example the CUL convention changed", "tokens": [51300, 4473, 264, 3481, 3037, 295, 264, 31958, 11, 370, 337, 1365, 264, 383, 10253, 10286, 3105, 51554], "temperature": 0.0, "avg_logprob": -0.3508676256452288, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.023608673363924026}, {"id": 61, "seek": 43296, "start": 432.96, "end": 439.91999999999996, "text": " several times since the stable version of the language, which is REST 1.0 something,", "tokens": [50364, 2940, 1413, 1670, 264, 8351, 3037, 295, 264, 2856, 11, 597, 307, 497, 14497, 502, 13, 15, 746, 11, 50712], "temperature": 0.0, "avg_logprob": -0.27908062678511425, "compression_ratio": 1.502202643171806, "no_speech_prob": 0.04734595865011215}, {"id": 62, "seek": 43296, "start": 439.91999999999996, "end": 446.4, "text": " so if we build a thing on top of REST, HBI, CUL convention, it will not be stable, it", "tokens": [50712, 370, 498, 321, 1322, 257, 551, 322, 1192, 295, 497, 14497, 11, 389, 33, 40, 11, 383, 10253, 10286, 11, 309, 486, 406, 312, 8351, 11, 309, 51036], "temperature": 0.0, "avg_logprob": -0.27908062678511425, "compression_ratio": 1.502202643171806, "no_speech_prob": 0.04734595865011215}, {"id": 63, "seek": 43296, "start": 446.4, "end": 452.67999999999995, "text": " will be an ACC, so maintaining it will be really laborious because it's working with", "tokens": [51036, 486, 312, 364, 8157, 34, 11, 370, 14916, 309, 486, 312, 534, 5938, 851, 570, 309, 311, 1364, 365, 51350], "temperature": 0.0, "avg_logprob": -0.27908062678511425, "compression_ratio": 1.502202643171806, "no_speech_prob": 0.04734595865011215}, {"id": 64, "seek": 43296, "start": 452.67999999999995, "end": 459.64, "text": " internal documentation which is not made for people to use it as a public API, and so", "tokens": [51350, 6920, 14333, 597, 307, 406, 1027, 337, 561, 281, 764, 309, 382, 257, 1908, 9362, 11, 293, 370, 51698], "temperature": 0.0, "avg_logprob": -0.27908062678511425, "compression_ratio": 1.502202643171806, "no_speech_prob": 0.04734595865011215}, {"id": 65, "seek": 45964, "start": 460.64, "end": 470.15999999999997, "text": " why REST macro? I want to point out that because there is a lot of way to the binding", "tokens": [50414, 983, 497, 14497, 18887, 30, 286, 528, 281, 935, 484, 300, 570, 456, 307, 257, 688, 295, 636, 281, 264, 17359, 50890], "temperature": 0.0, "avg_logprob": -0.28329550425211586, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.005665249656885862}, {"id": 66, "seek": 45964, "start": 470.15999999999997, "end": 475.91999999999996, "text": " generation and often it works as an external tooling and the issue with the external tooling", "tokens": [50890, 5125, 293, 2049, 309, 1985, 382, 364, 8320, 46593, 293, 264, 2734, 365, 264, 8320, 46593, 51178], "temperature": 0.0, "avg_logprob": -0.28329550425211586, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.005665249656885862}, {"id": 67, "seek": 45964, "start": 475.91999999999996, "end": 483.12, "text": " is really easy to forget to integrate the external tooling into your build suite and", "tokens": [51178, 307, 534, 1858, 281, 2870, 281, 13365, 264, 8320, 46593, 666, 428, 1322, 14205, 293, 51538], "temperature": 0.0, "avg_logprob": -0.28329550425211586, "compression_ratio": 1.6335403726708075, "no_speech_prob": 0.005665249656885862}, {"id": 68, "seek": 48312, "start": 483.12, "end": 491.12, "text": " if you do that your binding will be out of sync with your codes, so your program will", "tokens": [50364, 498, 291, 360, 300, 428, 17359, 486, 312, 484, 295, 20271, 365, 428, 14211, 11, 370, 428, 1461, 486, 50764], "temperature": 0.0, "avg_logprob": -0.23155150252781556, "compression_ratio": 1.6995073891625616, "no_speech_prob": 0.029545241966843605}, {"id": 69, "seek": 48312, "start": 491.12, "end": 496.88, "text": " not work, so we want binding generation to be part of the create compilation, create", "tokens": [50764, 406, 589, 11, 370, 321, 528, 17359, 5125, 281, 312, 644, 295, 264, 1884, 40261, 11, 1884, 51052], "temperature": 0.0, "avg_logprob": -0.23155150252781556, "compression_ratio": 1.6995073891625616, "no_speech_prob": 0.029545241966843605}, {"id": 70, "seek": 48312, "start": 496.88, "end": 504.48, "text": " is a REST module, and so I did it that way, and I also want to point out that there is", "tokens": [51052, 307, 257, 497, 14497, 10088, 11, 293, 370, 286, 630, 309, 300, 636, 11, 293, 286, 611, 528, 281, 935, 484, 300, 456, 307, 51432], "temperature": 0.0, "avg_logprob": -0.23155150252781556, "compression_ratio": 1.6995073891625616, "no_speech_prob": 0.029545241966843605}, {"id": 71, "seek": 48312, "start": 504.48, "end": 512.28, "text": " other program in REST space like C bind genes that just try to integrate REST code like", "tokens": [51432, 661, 1461, 294, 497, 14497, 1901, 411, 383, 14786, 14424, 300, 445, 853, 281, 13365, 497, 14497, 3089, 411, 51822], "temperature": 0.0, "avg_logprob": -0.23155150252781556, "compression_ratio": 1.6995073891625616, "no_speech_prob": 0.029545241966843605}, {"id": 72, "seek": 51228, "start": 512.4, "end": 518.76, "text": " search and replace regex, so if you for example in the language have two identifiers in different", "tokens": [50370, 3164, 293, 7406, 319, 432, 87, 11, 370, 498, 291, 337, 1365, 294, 264, 2856, 362, 732, 2473, 23463, 294, 819, 50688], "temperature": 0.0, "avg_logprob": -0.3190827620656867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.020838797092437744}, {"id": 73, "seek": 51228, "start": 518.76, "end": 526.0799999999999, "text": " namespace, the C bind gene that generates C bind gene for REST will not be able to understand", "tokens": [50688, 5288, 17940, 11, 264, 383, 14786, 12186, 300, 23815, 383, 14786, 12186, 337, 497, 14497, 486, 406, 312, 1075, 281, 1223, 51054], "temperature": 0.0, "avg_logprob": -0.3190827620656867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.020838797092437744}, {"id": 74, "seek": 51228, "start": 526.0799999999999, "end": 531.0, "text": " their meaning, so when it's an undefined behavior, it's part of the limitation of that library,", "tokens": [51054, 641, 3620, 11, 370, 562, 309, 311, 364, 674, 5666, 2001, 5223, 11, 309, 311, 644, 295, 264, 27432, 295, 300, 6405, 11, 51300], "temperature": 0.0, "avg_logprob": -0.3190827620656867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.020838797092437744}, {"id": 75, "seek": 51228, "start": 531.0, "end": 536.28, "text": " which is not the part of the bind gene library we present here, that understands REST semantics", "tokens": [51300, 597, 307, 406, 264, 644, 295, 264, 14786, 12186, 6405, 321, 1974, 510, 11, 300, 15146, 497, 14497, 4361, 45298, 51564], "temperature": 0.0, "avg_logprob": -0.3190827620656867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.020838797092437744}, {"id": 76, "seek": 53628, "start": 536.28, "end": 543.88, "text": " because it's implemented as a macro, and so it expands REST code and it has to generate", "tokens": [50364, 570, 309, 311, 12270, 382, 257, 18887, 11, 293, 370, 309, 33706, 497, 14497, 3089, 293, 309, 575, 281, 8460, 50744], "temperature": 0.0, "avg_logprob": -0.327049438267538, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.027472712099552155}, {"id": 77, "seek": 53628, "start": 543.88, "end": 550.8, "text": " as a set effect ASCAL code and ASCAL modules that just have the wanted signature, so same", "tokens": [50744, 382, 257, 992, 1802, 7469, 34, 3427, 3089, 293, 7469, 34, 3427, 16679, 300, 445, 362, 264, 1415, 13397, 11, 370, 912, 51090], "temperature": 0.0, "avg_logprob": -0.327049438267538, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.027472712099552155}, {"id": 78, "seek": 53628, "start": 550.8, "end": 561.8399999999999, "text": " symbol, same signature, things that sync together, so if we relook the REST code, there's another", "tokens": [51090, 5986, 11, 912, 13397, 11, 721, 300, 20271, 1214, 11, 370, 498, 321, 319, 12747, 264, 497, 14497, 3089, 11, 456, 311, 1071, 51642], "temperature": 0.0, "avg_logprob": -0.327049438267538, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.027472712099552155}, {"id": 79, "seek": 56184, "start": 561.9200000000001, "end": 568.6, "text": " thing I want to talk to you about, here you see you have the C, the compatible calling", "tokens": [50368, 551, 286, 528, 281, 751, 281, 291, 466, 11, 510, 291, 536, 291, 362, 264, 383, 11, 264, 18218, 5141, 50702], "temperature": 0.0, "avg_logprob": -0.27237305589901506, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0803200826048851}, {"id": 80, "seek": 56184, "start": 568.6, "end": 575.44, "text": " conversion type, the thing I want you to look at is I use trait, trait, rep C, trait, rep", "tokens": [50702, 14298, 2010, 11, 264, 551, 286, 528, 291, 281, 574, 412, 307, 286, 764, 22538, 11, 22538, 11, 1085, 383, 11, 22538, 11, 1085, 51044], "temperature": 0.0, "avg_logprob": -0.27237305589901506, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0803200826048851}, {"id": 81, "seek": 56184, "start": 575.44, "end": 583.48, "text": " REST, and that's trait REST type classes, that's a way to define contracts for data", "tokens": [51044, 497, 14497, 11, 293, 300, 311, 22538, 497, 14497, 2010, 5359, 11, 300, 311, 257, 636, 281, 6964, 13952, 337, 1412, 51446], "temperature": 0.0, "avg_logprob": -0.27237305589901506, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0803200826048851}, {"id": 82, "seek": 56184, "start": 583.48, "end": 589.88, "text": " structure, you mean a data structure should implement this and this method, so I want every", "tokens": [51446, 3877, 11, 291, 914, 257, 1412, 3877, 820, 4445, 341, 293, 341, 3170, 11, 370, 286, 528, 633, 51766], "temperature": 0.0, "avg_logprob": -0.27237305589901506, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.0803200826048851}, {"id": 83, "seek": 58988, "start": 589.92, "end": 596.56, "text": " data structure that has this method would implement those, internally it's implemented as virtual", "tokens": [50366, 1412, 3877, 300, 575, 341, 3170, 576, 4445, 729, 11, 19501, 309, 311, 12270, 382, 6374, 50698], "temperature": 0.0, "avg_logprob": -0.26954987314012313, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.010139415971934795}, {"id": 84, "seek": 58988, "start": 596.56, "end": 608.4, "text": " table, like in C++, and why I use that, I use that to be extensive programmable, so I have nice", "tokens": [50698, 3199, 11, 411, 294, 383, 25472, 11, 293, 983, 286, 764, 300, 11, 286, 764, 300, 281, 312, 13246, 37648, 712, 11, 370, 286, 362, 1481, 51290], "temperature": 0.0, "avg_logprob": -0.26954987314012313, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.010139415971934795}, {"id": 85, "seek": 58988, "start": 608.4, "end": 615.72, "text": " error, it's part of REST type system, users can add types to this framework, and for the", "tokens": [51290, 6713, 11, 309, 311, 644, 295, 497, 14497, 2010, 1185, 11, 5022, 393, 909, 3467, 281, 341, 8388, 11, 293, 337, 264, 51656], "temperature": 0.0, "avg_logprob": -0.26954987314012313, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.010139415971934795}, {"id": 86, "seek": 61572, "start": 615.76, "end": 620.76, "text": " types, which is part of the standard library, that's I implement myself, at the care of the", "tokens": [50366, 3467, 11, 597, 307, 644, 295, 264, 3832, 6405, 11, 300, 311, 286, 4445, 2059, 11, 412, 264, 1127, 295, 264, 50616], "temperature": 0.0, "avg_logprob": -0.24519803126653036, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.004461538512259722}, {"id": 87, "seek": 61572, "start": 620.76, "end": 627.96, "text": " memory management, and we talk about it a bit later, and also the thing is in a FFI in REST,", "tokens": [50616, 4675, 4592, 11, 293, 321, 751, 466, 309, 257, 857, 1780, 11, 293, 611, 264, 551, 307, 294, 257, 479, 38568, 294, 497, 14497, 11, 50976], "temperature": 0.0, "avg_logprob": -0.24519803126653036, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.004461538512259722}, {"id": 88, "seek": 61572, "start": 627.96, "end": 636.52, "text": " you can use only what's called FFE safe types, it means types that have a memory layout in", "tokens": [50976, 291, 393, 764, 787, 437, 311, 1219, 479, 28182, 3273, 3467, 11, 309, 1355, 3467, 300, 362, 257, 4675, 13333, 294, 51404], "temperature": 0.0, "avg_logprob": -0.24519803126653036, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.004461538512259722}, {"id": 89, "seek": 61572, "start": 636.52, "end": 641.5600000000001, "text": " C calling convention, and most of REST type have undefined memory layout for C calling", "tokens": [51404, 383, 5141, 10286, 11, 293, 881, 295, 497, 14497, 2010, 362, 674, 5666, 2001, 4675, 13333, 337, 383, 5141, 51656], "temperature": 0.0, "avg_logprob": -0.24519803126653036, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.004461538512259722}, {"id": 90, "seek": 64156, "start": 641.56, "end": 649.3199999999999, "text": " convention, so the thing is for example if I get REST strings, I cast it safely to a C string,", "tokens": [50364, 10286, 11, 370, 264, 551, 307, 337, 1365, 498, 286, 483, 497, 14497, 13985, 11, 286, 4193, 309, 11750, 281, 257, 383, 6798, 11, 50752], "temperature": 0.0, "avg_logprob": -0.2296985420020851, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.014291427098214626}, {"id": 91, "seek": 64156, "start": 649.3199999999999, "end": 655.4399999999999, "text": " so that I could represent as C string works, which is another way that REST strings are actually", "tokens": [50752, 370, 300, 286, 727, 2906, 382, 383, 6798, 1985, 11, 597, 307, 1071, 636, 300, 497, 14497, 13985, 366, 767, 51058], "temperature": 0.0, "avg_logprob": -0.2296985420020851, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.014291427098214626}, {"id": 92, "seek": 64156, "start": 655.4399999999999, "end": 667.9599999999999, "text": " represented, and so what about GC, the thing is REST have a destructor mechanism based on ownership,", "tokens": [51058, 10379, 11, 293, 370, 437, 466, 29435, 11, 264, 551, 307, 497, 14497, 362, 257, 2677, 14535, 7513, 2361, 322, 15279, 11, 51684], "temperature": 0.0, "avg_logprob": -0.2296985420020851, "compression_ratio": 1.6043956043956045, "no_speech_prob": 0.014291427098214626}, {"id": 93, "seek": 66796, "start": 668.36, "end": 675.4000000000001, "text": " a lot of rusty things, but the idea is more about destructors, like when you go out of a scope,", "tokens": [50384, 257, 688, 295, 45394, 721, 11, 457, 264, 1558, 307, 544, 466, 2677, 1757, 830, 11, 411, 562, 291, 352, 484, 295, 257, 11923, 11, 50736], "temperature": 0.0, "avg_logprob": -0.24421089815806193, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.02171877771615982}, {"id": 94, "seek": 66796, "start": 675.4000000000001, "end": 683.64, "text": " the destructor of the value is called, which is dropped, and so what I do here is I tell REST", "tokens": [50736, 264, 2677, 14535, 295, 264, 2158, 307, 1219, 11, 597, 307, 8119, 11, 293, 370, 437, 286, 360, 510, 307, 286, 980, 497, 14497, 51148], "temperature": 0.0, "avg_logprob": -0.24421089815806193, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.02171877771615982}, {"id": 95, "seek": 66796, "start": 683.64, "end": 692.84, "text": " type system to, does not call drop on REST value, because it will live on the Askel side, so that's", "tokens": [51148, 2010, 1185, 281, 11, 775, 406, 818, 3270, 322, 497, 14497, 2158, 11, 570, 309, 486, 1621, 322, 264, 1018, 7124, 1252, 11, 370, 300, 311, 51608], "temperature": 0.0, "avg_logprob": -0.24421089815806193, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.02171877771615982}, {"id": 96, "seek": 69284, "start": 692.9200000000001, "end": 700.52, "text": " the other side of the bindings that need to free the value, which is a thing that you can do with", "tokens": [50368, 264, 661, 1252, 295, 264, 14786, 1109, 300, 643, 281, 1737, 264, 2158, 11, 597, 307, 257, 551, 300, 291, 393, 360, 365, 50748], "temperature": 0.0, "avg_logprob": -0.20744928632463727, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.024801621213555336}, {"id": 97, "seek": 69284, "start": 700.52, "end": 709.48, "text": " March Mald, I don't know how to pronounce that library, and the thing is also I learned during", "tokens": [50748, 6129, 376, 3976, 11, 286, 500, 380, 458, 577, 281, 19567, 300, 6405, 11, 293, 264, 551, 307, 611, 286, 3264, 1830, 51196], "temperature": 0.0, "avg_logprob": -0.20744928632463727, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.024801621213555336}, {"id": 98, "seek": 69284, "start": 709.48, "end": 719.8000000000001, "text": " this project the real semantic of safe and then safe foreign call definition, because I finally", "tokens": [51196, 341, 1716, 264, 957, 47982, 295, 3273, 293, 550, 3273, 5329, 818, 7123, 11, 570, 286, 2721, 51712], "temperature": 0.0, "avg_logprob": -0.20744928632463727, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.024801621213555336}, {"id": 99, "seek": 71980, "start": 719.8, "end": 730.1999999999999, "text": " understand that unsafe mean you want to play with any object on the Askel heap, which is not the", "tokens": [50364, 1223, 300, 35948, 914, 291, 528, 281, 862, 365, 604, 2657, 322, 264, 1018, 7124, 33591, 11, 597, 307, 406, 264, 50884], "temperature": 0.0, "avg_logprob": -0.2207777062240912, "compression_ratio": 1.4087591240875912, "no_speech_prob": 0.028652532026171684}, {"id": 100, "seek": 71980, "start": 730.1999999999999, "end": 738.1999999999999, "text": " default case of what we actually do when we pass basic data types, that's our, does not need the", "tokens": [50884, 7576, 1389, 295, 437, 321, 767, 360, 562, 321, 1320, 3875, 1412, 3467, 11, 300, 311, 527, 11, 775, 406, 643, 264, 51284], "temperature": 0.0, "avg_logprob": -0.2207777062240912, "compression_ratio": 1.4087591240875912, "no_speech_prob": 0.028652532026171684}, {"id": 101, "seek": 73820, "start": 738.2, "end": 749.72, "text": " garbage collector to pause, because it doesn't know if we could get an inconsistent state by", "tokens": [50364, 14150, 23960, 281, 10465, 11, 570, 309, 1177, 380, 458, 498, 321, 727, 483, 364, 36891, 1785, 538, 50940], "temperature": 0.0, "avg_logprob": -0.2717833663478042, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.23015378415584564}, {"id": 102, "seek": 73820, "start": 750.36, "end": 757.5600000000001, "text": " some things that the foreign call will do, and so few users in safety will have a warning", "tokens": [50972, 512, 721, 300, 264, 5329, 818, 486, 360, 11, 293, 370, 1326, 5022, 294, 4514, 486, 362, 257, 9164, 51332], "temperature": 0.0, "avg_logprob": -0.2717833663478042, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.23015378415584564}, {"id": 103, "seek": 73820, "start": 757.5600000000001, "end": 765.4000000000001, "text": " that say a cautious, an unsafe call will slow down your war program, are you sure you want to", "tokens": [51332, 300, 584, 257, 25278, 11, 364, 35948, 818, 486, 2964, 760, 428, 1516, 1461, 11, 366, 291, 988, 291, 528, 281, 51724], "temperature": 0.0, "avg_logprob": -0.2717833663478042, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.23015378415584564}, {"id": 104, "seek": 76540, "start": 765.4, "end": 776.84, "text": " do that or not and anything, and yeah, and that's a library, a REST library, but those are things I", "tokens": [50364, 360, 300, 420, 406, 293, 1340, 11, 293, 1338, 11, 293, 300, 311, 257, 6405, 11, 257, 497, 14497, 6405, 11, 457, 729, 366, 721, 286, 50936], "temperature": 0.0, "avg_logprob": -0.179288439003818, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.013667048886418343}, {"id": 105, "seek": 76540, "start": 776.84, "end": 783.9599999999999, "text": " did and that's also what exists for all of our REST tooling is a key tool that helps you to set up a", "tokens": [50936, 630, 293, 300, 311, 611, 437, 8198, 337, 439, 295, 527, 497, 14497, 46593, 307, 257, 2141, 2290, 300, 3665, 291, 281, 992, 493, 257, 51292], "temperature": 0.0, "avg_logprob": -0.179288439003818, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.013667048886418343}, {"id": 106, "seek": 76540, "start": 783.9599999999999, "end": 793.4, "text": " project, because you have to tweak your REST build file, you have to tweak your R-scale build file,", "tokens": [51292, 1716, 11, 570, 291, 362, 281, 29879, 428, 497, 14497, 1322, 3991, 11, 291, 362, 281, 29879, 428, 497, 12, 20033, 1322, 3991, 11, 51764], "temperature": 0.0, "avg_logprob": -0.179288439003818, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.013667048886418343}, {"id": 107, "seek": 79340, "start": 794.04, "end": 801.3199999999999, "text": " actually you have to do a setup.hs build customization in the Askel unless you use NICS,", "tokens": [50396, 767, 291, 362, 281, 360, 257, 8657, 13, 71, 82, 1322, 39387, 294, 264, 1018, 7124, 5969, 291, 764, 426, 2532, 50, 11, 50760], "temperature": 0.0, "avg_logprob": -0.238203763961792, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.02290891483426094}, {"id": 108, "seek": 79340, "start": 801.3199999999999, "end": 812.76, "text": " which I could understand a lot of people who won't do, and on REST side I use build.hs, if you do a", "tokens": [50760, 597, 286, 727, 1223, 257, 688, 295, 561, 567, 1582, 380, 360, 11, 293, 322, 497, 14497, 1252, 286, 764, 1322, 13, 71, 82, 11, 498, 291, 360, 257, 51332], "temperature": 0.0, "avg_logprob": -0.238203763961792, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.02290891483426094}, {"id": 109, "seek": 79340, "start": 812.76, "end": 820.6, "text": " dynamic library, because dynamic library that GAC fetch needs the GAC version in the name of the", "tokens": [51332, 8546, 6405, 11, 570, 8546, 6405, 300, 460, 4378, 23673, 2203, 264, 460, 4378, 3037, 294, 264, 1315, 295, 264, 51724], "temperature": 0.0, "avg_logprob": -0.238203763961792, "compression_ratio": 1.4766839378238341, "no_speech_prob": 0.02290891483426094}, {"id": 110, "seek": 82060, "start": 820.6, "end": 827.96, "text": " dynamic library, so that's the thing that I have to get as a build customization, this kind of tweak,", "tokens": [50364, 8546, 6405, 11, 370, 300, 311, 264, 551, 300, 286, 362, 281, 483, 382, 257, 1322, 39387, 11, 341, 733, 295, 29879, 11, 50732], "temperature": 0.0, "avg_logprob": -0.20498655920159325, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.012660401873290539}, {"id": 111, "seek": 82060, "start": 829.16, "end": 839.08, "text": " but overall this library is really small, it's, I'll put the next slide just a few minutes later,", "tokens": [50792, 457, 4787, 341, 6405, 307, 534, 1359, 11, 309, 311, 11, 286, 603, 829, 264, 958, 4137, 445, 257, 1326, 2077, 1780, 11, 51288], "temperature": 0.0, "avg_logprob": -0.20498655920159325, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.012660401873290539}, {"id": 112, "seek": 82060, "start": 840.52, "end": 847.48, "text": " the whole library, the whole tooling I present here is less than 1000 lines of code, so", "tokens": [51360, 264, 1379, 6405, 11, 264, 1379, 46593, 286, 1974, 510, 307, 1570, 813, 9714, 3876, 295, 3089, 11, 370, 51708], "temperature": 0.0, "avg_logprob": -0.20498655920159325, "compression_ratio": 1.543010752688172, "no_speech_prob": 0.012660401873290539}, {"id": 113, "seek": 84748, "start": 848.44, "end": 859.16, "text": " okay, it's 1000 lines of code, so that's really small, minimalist, and kiss, so", "tokens": [50412, 1392, 11, 309, 311, 9714, 3876, 295, 3089, 11, 370, 300, 311, 534, 1359, 11, 50192, 11, 293, 7704, 11, 370, 50948], "temperature": 0.0, "avg_logprob": -0.3215815959832607, "compression_ratio": 1.2019230769230769, "no_speech_prob": 0.0034783706068992615}, {"id": 114, "seek": 84748, "start": 863.0, "end": 866.44, "text": " actually I, I forget what I was about to say,", "tokens": [51140, 767, 286, 11, 286, 2870, 437, 286, 390, 466, 281, 584, 11, 51312], "temperature": 0.0, "avg_logprob": -0.3215815959832607, "compression_ratio": 1.2019230769230769, "no_speech_prob": 0.0034783706068992615}, {"id": 115, "seek": 86644, "start": 867.4000000000001, "end": 878.6800000000001, "text": " actually you, you, you, all that, all this plumbery is, is simple, and I'm not sure myself, I want to,", "tokens": [50412, 767, 291, 11, 291, 11, 291, 11, 439, 300, 11, 439, 341, 499, 2860, 2109, 307, 11, 307, 2199, 11, 293, 286, 478, 406, 988, 2059, 11, 286, 528, 281, 11, 50976], "temperature": 0.0, "avg_logprob": -0.20082303215475644, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.006778388284146786}, {"id": 116, "seek": 86644, "start": 878.6800000000001, "end": 885.08, "text": " to make it more complex, because it just works, and the thing is, it works, but you use really", "tokens": [50976, 281, 652, 309, 544, 3997, 11, 570, 309, 445, 1985, 11, 293, 264, 551, 307, 11, 309, 1985, 11, 457, 291, 764, 534, 51296], "temperature": 0.0, "avg_logprob": -0.20082303215475644, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.006778388284146786}, {"id": 117, "seek": 86644, "start": 885.08, "end": 892.9200000000001, "text": " simple data types, the C data types that are representable in Askel and REST, and there is a", "tokens": [51296, 2199, 1412, 3467, 11, 264, 383, 1412, 3467, 300, 366, 2906, 712, 294, 1018, 7124, 293, 497, 14497, 11, 293, 456, 307, 257, 51688], "temperature": 0.0, "avg_logprob": -0.20082303215475644, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.006778388284146786}, {"id": 118, "seek": 89292, "start": 892.92, "end": 899.7199999999999, "text": " lot of things that are not representable in C, for example, REST slice, a slice is a pointer", "tokens": [50364, 688, 295, 721, 300, 366, 406, 2906, 712, 294, 383, 11, 337, 1365, 11, 497, 14497, 13153, 11, 257, 13153, 307, 257, 23918, 50704], "temperature": 0.0, "avg_logprob": -0.15633299380918092, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.0017687046201899648}, {"id": 119, "seek": 89292, "start": 899.7199999999999, "end": 904.5999999999999, "text": " and a size, and you have a guarantee that there is memory in it, you can iterate on it,", "tokens": [50704, 293, 257, 2744, 11, 293, 291, 362, 257, 10815, 300, 456, 307, 4675, 294, 309, 11, 291, 393, 44497, 322, 309, 11, 50948], "temperature": 0.0, "avg_logprob": -0.15633299380918092, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.0017687046201899648}, {"id": 120, "seek": 89292, "start": 905.4, "end": 911.8, "text": " you can represent it in C with a strip, but it's not really a C type, you will do a custom strip,", "tokens": [50988, 291, 393, 2906, 309, 294, 383, 365, 257, 12828, 11, 457, 309, 311, 406, 534, 257, 383, 2010, 11, 291, 486, 360, 257, 2375, 12828, 11, 51308], "temperature": 0.0, "avg_logprob": -0.15633299380918092, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.0017687046201899648}, {"id": 121, "seek": 91180, "start": 912.28, "end": 922.4399999999999, "text": " and, and those things are targeted by the REST RFC, which is named interoperable ABI,", "tokens": [50388, 293, 11, 293, 729, 721, 366, 15045, 538, 264, 497, 14497, 497, 18671, 11, 597, 307, 4926, 728, 7192, 712, 316, 11291, 11, 50896], "temperature": 0.0, "avg_logprob": -0.22237536642286512, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.03739199787378311}, {"id": 122, "seek": 91180, "start": 922.4399999999999, "end": 927.24, "text": " which is creating an ABI which is stable, which have more REST", "tokens": [50896, 597, 307, 4084, 364, 316, 11291, 597, 307, 8351, 11, 597, 362, 544, 497, 14497, 51136], "temperature": 0.0, "avg_logprob": -0.22237536642286512, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.03739199787378311}, {"id": 123, "seek": 91180, "start": 928.28, "end": 936.28, "text": " C things than the C ABI, but which is flagged as stable, which is not the case of the REST internal", "tokens": [51188, 383, 721, 813, 264, 383, 316, 11291, 11, 457, 597, 307, 7166, 3004, 382, 8351, 11, 597, 307, 406, 264, 1389, 295, 264, 497, 14497, 6920, 51588], "temperature": 0.0, "avg_logprob": -0.22237536642286512, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.03739199787378311}, {"id": 124, "seek": 93628, "start": 936.28, "end": 947.0799999999999, "text": " IBI, and the other thing is cabal customization is a bit of a mess, doing the setup that", "tokens": [50364, 286, 11291, 11, 293, 264, 661, 551, 307, 5487, 304, 39387, 307, 257, 857, 295, 257, 2082, 11, 884, 264, 8657, 300, 50904], "temperature": 0.0, "avg_logprob": -0.2534542579155464, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.019554391503334045}, {"id": 125, "seek": 93628, "start": 947.0799999999999, "end": 955.0, "text": " hashes to find the library and anything to make it work, because of cabal bugs, so I really love to", "tokens": [50904, 575, 8076, 281, 915, 264, 6405, 293, 1340, 281, 652, 309, 589, 11, 570, 295, 5487, 304, 15120, 11, 370, 286, 534, 959, 281, 51300], "temperature": 0.0, "avg_logprob": -0.2534542579155464, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.019554391503334045}, {"id": 126, "seek": 93628, "start": 955.0, "end": 963.3199999999999, "text": " have a standard way to integrate, for example, REST chain into cabal, here you have to run the", "tokens": [51300, 362, 257, 3832, 636, 281, 13365, 11, 337, 1365, 11, 497, 14497, 5021, 666, 5487, 304, 11, 510, 291, 362, 281, 1190, 264, 51716], "temperature": 0.0, "avg_logprob": -0.2534542579155464, "compression_ratio": 1.4973544973544974, "no_speech_prob": 0.019554391503334045}, {"id": 127, "seek": 96332, "start": 963.32, "end": 973.8000000000001, "text": " two-tile chain in two different states, and that's it, I can throw a lot of questions,", "tokens": [50364, 732, 12, 83, 794, 5021, 294, 732, 819, 4368, 11, 293, 300, 311, 309, 11, 286, 393, 3507, 257, 688, 295, 1651, 11, 50888], "temperature": 0.0, "avg_logprob": -0.27757598803593564, "compression_ratio": 1.3858267716535433, "no_speech_prob": 0.033342137932777405}, {"id": 128, "seek": 96332, "start": 973.8000000000001, "end": 982.84, "text": " or I can do a demo if my talk is shorter than what I was expecting, so that's the date to", "tokens": [50888, 420, 286, 393, 360, 257, 10723, 498, 452, 751, 307, 11639, 813, 437, 286, 390, 9650, 11, 370, 300, 311, 264, 4002, 281, 51340], "temperature": 0.0, "avg_logprob": -0.27757598803593564, "compression_ratio": 1.3858267716535433, "no_speech_prob": 0.033342137932777405}, {"id": 129, "seek": 98284, "start": 982.84, "end": 996.12, "text": " ask questions, or, and, yeah. Yeah, I can do, I can do a quick demo, sorry,", "tokens": [50364, 1029, 1651, 11, 420, 11, 293, 11, 1338, 13, 865, 11, 286, 393, 360, 11, 286, 393, 360, 257, 1702, 10723, 11, 2597, 11, 51028], "temperature": 0.0, "avg_logprob": -0.22381053054541872, "compression_ratio": 1.423728813559322, "no_speech_prob": 0.2573842704296112}, {"id": 130, "seek": 98284, "start": 1000.9200000000001, "end": 1005.96, "text": " it's not, it's not easy because my, it's not mirroring, so I have to look at the, the screen", "tokens": [51268, 309, 311, 406, 11, 309, 311, 406, 1858, 570, 452, 11, 309, 311, 406, 8013, 278, 11, 370, 286, 362, 281, 574, 412, 264, 11, 264, 2568, 51520], "temperature": 0.0, "avg_logprob": -0.22381053054541872, "compression_ratio": 1.423728813559322, "no_speech_prob": 0.2573842704296112}, {"id": 131, "seek": 100596, "start": 1005.96, "end": 1020.12, "text": " why I, I doing this thing, what I can do, what I can do, yeah,", "tokens": [50364, 983, 286, 11, 286, 884, 341, 551, 11, 437, 286, 393, 360, 11, 437, 286, 393, 360, 11, 1338, 11, 51072], "temperature": 0.0, "avg_logprob": -0.26675687233606976, "compression_ratio": 1.24, "no_speech_prob": 0.24865855276584625}, {"id": 132, "seek": 102012, "start": 1020.12, "end": 1034.28, "text": " yeah,", "tokens": [50364, 1338, 11, 51072], "temperature": 0.0, "avg_logprob": -0.7700929641723633, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.318256139755249}, {"id": 133, "seek": 102012, "start": 1034.28, "end": 1042.28, "text": " did you, up,", "tokens": [51072, 630, 291, 11, 493, 11, 51472], "temperature": 0.0, "avg_logprob": -0.7700929641723633, "compression_ratio": 0.6923076923076923, "no_speech_prob": 0.318256139755249}, {"id": 134, "seek": 104228, "start": 1042.44, "end": 1050.44, "text": " yeah,", "tokens": [50372, 1338, 11, 50772], "temperature": 0.2, "avg_logprob": -0.4602176666259766, "compression_ratio": 1.188235294117647, "no_speech_prob": 0.09043905884027481}, {"id": 135, "seek": 104228, "start": 1062.92, "end": 1069.08, "text": " it will be unsafe on the Askel side, if you do that, for example, because you, you, will it be,", "tokens": [51396, 309, 486, 312, 35948, 322, 264, 1018, 7124, 1252, 11, 498, 291, 360, 300, 11, 337, 1365, 11, 570, 291, 11, 291, 11, 486, 309, 312, 11, 51704], "temperature": 0.2, "avg_logprob": -0.4602176666259766, "compression_ratio": 1.188235294117647, "no_speech_prob": 0.09043905884027481}, {"id": 136, "seek": 106908, "start": 1069.08, "end": 1074.9199999999998, "text": " I, I, it's an interesting example, I didn't try", "tokens": [50364, 286, 11, 286, 11, 309, 311, 364, 1880, 1365, 11, 286, 994, 380, 853, 50656], "temperature": 0.0, "avg_logprob": -0.18670018039532563, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.01288803294301033}, {"id": 137, "seek": 106908, "start": 1078.6, "end": 1087.6399999999999, "text": " passing a function pointer, the thing is, there is, the thing is, you, you, if you want to pass", "tokens": [50840, 8437, 257, 2445, 23918, 11, 264, 551, 307, 11, 456, 307, 11, 264, 551, 307, 11, 291, 11, 291, 11, 498, 291, 528, 281, 1320, 51292], "temperature": 0.0, "avg_logprob": -0.18670018039532563, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.01288803294301033}, {"id": 138, "seek": 106908, "start": 1087.6399999999999, "end": 1093.8, "text": " complex data types, you, it's always more meaningful to use serialization, because it's,", "tokens": [51292, 3997, 1412, 3467, 11, 291, 11, 309, 311, 1009, 544, 10995, 281, 764, 17436, 2144, 11, 570, 309, 311, 11, 51600], "temperature": 0.0, "avg_logprob": -0.18670018039532563, "compression_ratio": 1.5890410958904109, "no_speech_prob": 0.01288803294301033}, {"id": 139, "seek": 109380, "start": 1094.04, "end": 1102.6, "text": " it's, it doesn't match the two language model, but function, I didn't honestly think about it, but I,", "tokens": [50376, 309, 311, 11, 309, 1177, 380, 2995, 264, 732, 2856, 2316, 11, 457, 2445, 11, 286, 994, 380, 6095, 519, 466, 309, 11, 457, 286, 11, 50804], "temperature": 0.0, "avg_logprob": -0.2340408773983226, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.08752909302711487}, {"id": 140, "seek": 109380, "start": 1105.72, "end": 1110.12, "text": " you mean a function pointer that will cross the FFI barrier?", "tokens": [50960, 291, 914, 257, 2445, 23918, 300, 486, 3278, 264, 479, 38568, 13357, 30, 51180], "temperature": 0.0, "avg_logprob": -0.2340408773983226, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.08752909302711487}, {"id": 141, "seek": 109380, "start": 1110.9199999999998, "end": 1112.84, "text": " So that's the whole question, right? Yeah, yeah, yeah.", "tokens": [51220, 407, 300, 311, 264, 1379, 1168, 11, 558, 30, 865, 11, 1338, 11, 1338, 13, 51316], "temperature": 0.0, "avg_logprob": -0.2340408773983226, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.08752909302711487}, {"id": 142, "seek": 109380, "start": 1114.12, "end": 1120.36, "text": " In Erlen, for example, you have no concept of sharing pointers, you copy the whole data,", "tokens": [51380, 682, 3300, 6698, 11, 337, 1365, 11, 291, 362, 572, 3410, 295, 5414, 44548, 11, 291, 5055, 264, 1379, 1412, 11, 51692], "temperature": 0.0, "avg_logprob": -0.2340408773983226, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.08752909302711487}, {"id": 143, "seek": 112036, "start": 1120.36, "end": 1125.32, "text": " and use it to the other node, including function, which are serialized, and then reinterpreted", "tokens": [50364, 293, 764, 309, 281, 264, 661, 9984, 11, 3009, 2445, 11, 597, 366, 17436, 1602, 11, 293, 550, 319, 41935, 292, 50612], "temperature": 0.0, "avg_logprob": -0.22272263873707165, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.02767273411154747}, {"id": 144, "seek": 112036, "start": 1125.32, "end": 1131.7199999999998, "text": " on the other node. I guess it will not, not really be an issue,", "tokens": [50612, 322, 264, 661, 9984, 13, 286, 2041, 309, 486, 406, 11, 406, 534, 312, 364, 2734, 11, 50932], "temperature": 0.0, "avg_logprob": -0.22272263873707165, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.02767273411154747}, {"id": 145, "seek": 112036, "start": 1134.84, "end": 1141.08, "text": " because, because in fact, there's no really boundary at the end, that's the one", "tokens": [51088, 570, 11, 570, 294, 1186, 11, 456, 311, 572, 534, 12866, 412, 264, 917, 11, 300, 311, 264, 472, 51400], "temperature": 0.0, "avg_logprob": -0.22272263873707165, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.02767273411154747}, {"id": 146, "seek": 112036, "start": 1142.36, "end": 1149.9599999999998, "text": " binary, so the only things that I, I want my mental model to, to have a better grasp", "tokens": [51464, 17434, 11, 370, 264, 787, 721, 300, 286, 11, 286, 528, 452, 4973, 2316, 281, 11, 281, 362, 257, 1101, 21743, 51844], "temperature": 0.0, "avg_logprob": -0.22272263873707165, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.02767273411154747}, {"id": 147, "seek": 114996, "start": 1149.96, "end": 1157.48, "text": " around it is how GC, as a GC will behave in this case, but I think there is no", "tokens": [50364, 926, 309, 307, 577, 29435, 11, 382, 257, 29435, 486, 15158, 294, 341, 1389, 11, 457, 286, 519, 456, 307, 572, 50740], "temperature": 0.0, "avg_logprob": -0.2146427180315997, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.020052282139658928}, {"id": 148, "seek": 114996, "start": 1157.48, "end": 1166.76, "text": " special issue for doing that, but I'm, I think I should experiment on it first to, to, to,", "tokens": [50740, 2121, 2734, 337, 884, 300, 11, 457, 286, 478, 11, 286, 519, 286, 820, 5120, 322, 309, 700, 281, 11, 281, 11, 281, 11, 51204], "temperature": 0.0, "avg_logprob": -0.2146427180315997, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.020052282139658928}, {"id": 149, "seek": 114996, "start": 1166.76, "end": 1172.68, "text": " before saying it's, it's completely okay to do that. Yeah, thank you for the question.", "tokens": [51204, 949, 1566, 309, 311, 11, 309, 311, 2584, 1392, 281, 360, 300, 13, 865, 11, 1309, 291, 337, 264, 1168, 13, 51500], "temperature": 0.0, "avg_logprob": -0.2146427180315997, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.020052282139658928}, {"id": 150, "seek": 117268, "start": 1173.0800000000002, "end": 1175.88, "text": " Uh, yeah, I,", "tokens": [50384, 4019, 11, 1338, 11, 286, 11, 50524], "temperature": 0.0, "avg_logprob": -0.8627450125558036, "compression_ratio": 0.8723404255319149, "no_speech_prob": 0.15408645570278168}, {"id": 151, "seek": 117268, "start": 1185.88, "end": 1186.8400000000001, "text": " did you see something?", "tokens": [51024, 630, 291, 536, 746, 30, 51072], "temperature": 0.0, "avg_logprob": -0.8627450125558036, "compression_ratio": 0.8723404255319149, "no_speech_prob": 0.15408645570278168}, {"id": 152, "seek": 117268, "start": 1188.2, "end": 1188.44, "text": " Fuck.", "tokens": [51140, 10965, 13, 51152], "temperature": 0.0, "avg_logprob": -0.8627450125558036, "compression_ratio": 0.8723404255319149, "no_speech_prob": 0.15408645570278168}, {"id": 153, "seek": 118844, "start": 1188.44, "end": 1192.2, "text": " Fuck.", "tokens": [50364, 10965, 13, 50552], "temperature": 0.0, "avg_logprob": -0.5237773772208921, "compression_ratio": 0.9620253164556962, "no_speech_prob": 0.022152584046125412}, {"id": 154, "seek": 118844, "start": 1201.3200000000002, "end": 1204.6000000000001, "text": " So, sorry.", "tokens": [51008, 407, 11, 2597, 13, 51172], "temperature": 0.0, "avg_logprob": -0.5237773772208921, "compression_ratio": 0.9620253164556962, "no_speech_prob": 0.022152584046125412}, {"id": 155, "seek": 118844, "start": 1207.0, "end": 1217.3200000000002, "text": " So if I go here, for example, I have a little resting, SRC.", "tokens": [51292, 407, 498, 286, 352, 510, 11, 337, 1365, 11, 286, 362, 257, 707, 21221, 11, 20840, 34, 13, 51808], "temperature": 0.0, "avg_logprob": -0.5237773772208921, "compression_ratio": 0.9620253164556962, "no_speech_prob": 0.022152584046125412}, {"id": 156, "seek": 121844, "start": 1219.16, "end": 1228.68, "text": " Um, yeah, I can show you the lib.rs, which do, uh, cryptographic primitive, for example,", "tokens": [50400, 3301, 11, 1338, 11, 286, 393, 855, 291, 264, 22854, 13, 81, 82, 11, 597, 360, 11, 2232, 11, 9844, 12295, 28540, 11, 337, 1365, 11, 50876], "temperature": 0.0, "avg_logprob": -0.1926746721620913, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.006726395804435015}, {"id": 157, "seek": 121844, "start": 1228.68, "end": 1235.56, "text": " and you, what you, you manipulate is clearly, uh, rest types, it's not C types,", "tokens": [50876, 293, 291, 11, 437, 291, 11, 291, 20459, 307, 4448, 11, 2232, 11, 1472, 3467, 11, 309, 311, 406, 383, 3467, 11, 51220], "temperature": 0.0, "avg_logprob": -0.1926746721620913, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.006726395804435015}, {"id": 158, "seek": 121844, "start": 1237.16, "end": 1244.76, "text": " and I have a warning, and I don't know why, uh, yeah, because I don't install it first,", "tokens": [51300, 293, 286, 362, 257, 9164, 11, 293, 286, 500, 380, 458, 983, 11, 2232, 11, 1338, 11, 570, 286, 500, 380, 3625, 309, 700, 11, 51680], "temperature": 0.0, "avg_logprob": -0.1926746721620913, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.006726395804435015}, {"id": 159, "seek": 124476, "start": 1244.76, "end": 1252.76, "text": " and if I do, I guess it will work. I hope so. Uh, I can check what's happened with, after", "tokens": [50364, 293, 498, 286, 360, 11, 286, 2041, 309, 486, 589, 13, 286, 1454, 370, 13, 4019, 11, 286, 393, 1520, 437, 311, 2011, 365, 11, 934, 50764], "temperature": 0.0, "avg_logprob": -0.2208823045094808, "compression_ratio": 1.0470588235294118, "no_speech_prob": 0.013089098036289215}, {"id": 160, "seek": 125276, "start": 1252.76, "end": 1259.16, "text": " some macro expansion, uh, will it work?", "tokens": [50364, 512, 18887, 11260, 11, 2232, 11, 486, 309, 589, 30, 50684], "temperature": 0.0, "avg_logprob": -0.5446220166755446, "compression_ratio": 1.0, "no_speech_prob": 0.07472222298383713}, {"id": 161, "seek": 125276, "start": 1267.8, "end": 1268.2, "text": " Yeah.", "tokens": [51116, 865, 13, 51136], "temperature": 0.0, "avg_logprob": -0.5446220166755446, "compression_ratio": 1.0, "no_speech_prob": 0.07472222298383713}, {"id": 162, "seek": 125276, "start": 1270.84, "end": 1274.92, "text": " Sorry. Uh, DEMO effect. Uh, yeah.", "tokens": [51268, 4919, 13, 4019, 11, 413, 6683, 46, 1802, 13, 4019, 11, 1338, 13, 51472], "temperature": 0.0, "avg_logprob": -0.5446220166755446, "compression_ratio": 1.0, "no_speech_prob": 0.07472222298383713}, {"id": 163, "seek": 127492, "start": 1275.88, "end": 1279.88, "text": " Hmm. Why?", "tokens": [50412, 8239, 13, 1545, 30, 50612], "temperature": 0.0, "avg_logprob": -0.34413678305489676, "compression_ratio": 1.3307692307692307, "no_speech_prob": 0.023759545758366585}, {"id": 164, "seek": 127492, "start": 1286.8400000000001, "end": 1292.68, "text": " I, I don't know why you do that, but maybe I'm no internet connection and that's the issue here.", "tokens": [50960, 286, 11, 286, 500, 380, 458, 983, 291, 360, 300, 11, 457, 1310, 286, 478, 572, 4705, 4984, 293, 300, 311, 264, 2734, 510, 13, 51252], "temperature": 0.0, "avg_logprob": -0.34413678305489676, "compression_ratio": 1.3307692307692307, "no_speech_prob": 0.023759545758366585}, {"id": 165, "seek": 127492, "start": 1293.48, "end": 1298.68, "text": " Yeah. I guess that's the issue. So never mind. I can show you the,", "tokens": [51292, 865, 13, 286, 2041, 300, 311, 264, 2734, 13, 407, 1128, 1575, 13, 286, 393, 855, 291, 264, 11, 51552], "temperature": 0.0, "avg_logprob": -0.34413678305489676, "compression_ratio": 1.3307692307692307, "no_speech_prob": 0.023759545758366585}, {"id": 166, "seek": 129868, "start": 1299.64, "end": 1305.4, "text": " the askels things generated. So, no, that's a cabal file generated by the client,", "tokens": [50412, 264, 382, 7124, 82, 721, 10833, 13, 407, 11, 572, 11, 300, 311, 257, 5487, 304, 3991, 10833, 538, 264, 6423, 11, 50700], "temperature": 0.0, "avg_logprob": -0.3072911500930786, "compression_ratio": 1.552, "no_speech_prob": 0.012357659637928009}, {"id": 167, "seek": 129868, "start": 1306.44, "end": 1313.16, "text": " and so, uh, I have, it looks like that. Uh, and I have,", "tokens": [50752, 293, 370, 11, 2232, 11, 286, 362, 11, 309, 1542, 411, 300, 13, 4019, 11, 293, 286, 362, 11, 51088], "temperature": 0.0, "avg_logprob": -0.3072911500930786, "compression_ratio": 1.552, "no_speech_prob": 0.012357659637928009}, {"id": 168, "seek": 129868, "start": 1317.24, "end": 1322.04, "text": " yeah, it looked like that. I have my, my code generated.", "tokens": [51292, 1338, 11, 309, 2956, 411, 300, 13, 286, 362, 452, 11, 452, 3089, 10833, 13, 51532], "temperature": 0.0, "avg_logprob": -0.3072911500930786, "compression_ratio": 1.552, "no_speech_prob": 0.012357659637928009}, {"id": 169, "seek": 132204, "start": 1322.28, "end": 1333.8, "text": " Uh, and what can I show you? I can show you the build customization. You can see what it looks like.", "tokens": [50376, 4019, 11, 293, 437, 393, 286, 855, 291, 30, 286, 393, 855, 291, 264, 1322, 39387, 13, 509, 393, 536, 437, 309, 1542, 411, 13, 50952], "temperature": 0.0, "avg_logprob": -0.26388468061174664, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.04451509565114975}, {"id": 170, "seek": 132204, "start": 1334.36, "end": 1339.6399999999999, "text": " Uh, it looks like it. It's not really interesting, but it do a few things.", "tokens": [50980, 4019, 11, 309, 1542, 411, 309, 13, 467, 311, 406, 534, 1880, 11, 457, 309, 360, 257, 1326, 721, 13, 51244], "temperature": 0.0, "avg_logprob": -0.26388468061174664, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.04451509565114975}, {"id": 171, "seek": 132204, "start": 1342.28, "end": 1349.6399999999999, "text": " And what can I show you? Uh, I have a little file that's unsure that's a client you use to", "tokens": [51376, 400, 437, 393, 286, 855, 291, 30, 4019, 11, 286, 362, 257, 707, 3991, 300, 311, 32486, 300, 311, 257, 6423, 291, 764, 281, 51744], "temperature": 0.0, "avg_logprob": -0.26388468061174664, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.04451509565114975}, {"id": 172, "seek": 134964, "start": 1349.64, "end": 1355.8000000000002, "text": " generate the whole stuff is, uh, compatible with the version of the library you use,", "tokens": [50364, 8460, 264, 1379, 1507, 307, 11, 2232, 11, 18218, 365, 264, 3037, 295, 264, 6405, 291, 764, 11, 50672], "temperature": 0.0, "avg_logprob": -0.24966460538197713, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.003891341621056199}, {"id": 173, "seek": 134964, "start": 1356.3600000000001, "end": 1360.5200000000002, "text": " due to, if I want to change the whole Bay of York in the future.", "tokens": [50700, 3462, 281, 11, 498, 286, 528, 281, 1319, 264, 1379, 7840, 295, 3609, 294, 264, 2027, 13, 50908], "temperature": 0.0, "avg_logprob": -0.24966460538197713, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.003891341621056199}, {"id": 174, "seek": 134964, "start": 1363.4, "end": 1367.24, "text": " And yeah, on the askel side, it would look something like that. So I have a project,", "tokens": [51052, 400, 1338, 11, 322, 264, 382, 7124, 1252, 11, 309, 576, 574, 746, 411, 300, 13, 407, 286, 362, 257, 1716, 11, 51244], "temperature": 0.0, "avg_logprob": -0.24966460538197713, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.003891341621056199}, {"id": 175, "seek": 134964, "start": 1367.24, "end": 1371.96, "text": " I have a cabal project, right? Uh, that looks like that.", "tokens": [51244, 286, 362, 257, 5487, 304, 1716, 11, 558, 30, 4019, 11, 300, 1542, 411, 300, 13, 51480], "temperature": 0.0, "avg_logprob": -0.24966460538197713, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.003891341621056199}, {"id": 176, "seek": 137196, "start": 1372.92, "end": 1377.96, "text": " Uh, and the test thing just work like,", "tokens": [50412, 4019, 11, 293, 264, 1500, 551, 445, 589, 411, 11, 50664], "temperature": 0.0, "avg_logprob": -0.35974455779453496, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.018272265791893005}, {"id": 177, "seek": 137196, "start": 1381.8, "end": 1385.88, "text": " that I have, uh, a test dot cabal.", "tokens": [50856, 300, 286, 362, 11, 2232, 11, 257, 1500, 5893, 5487, 304, 13, 51060], "temperature": 0.0, "avg_logprob": -0.35974455779453496, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.018272265791893005}, {"id": 178, "seek": 137196, "start": 1390.76, "end": 1399.32, "text": " Uh, it looks like that. Or I can use it like it was a normal askel dependencies and my,", "tokens": [51304, 4019, 11, 309, 1542, 411, 300, 13, 1610, 286, 393, 764, 309, 411, 309, 390, 257, 2710, 382, 7124, 36606, 293, 452, 11, 51732], "temperature": 0.0, "avg_logprob": -0.35974455779453496, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.018272265791893005}, {"id": 179, "seek": 139932, "start": 1400.12, "end": 1408.9199999999998, "text": " uh, askel code is quite simple, I guess. Yeah. Uh, so it's fixed me, but don't look.", "tokens": [50404, 2232, 11, 382, 7124, 3089, 307, 1596, 2199, 11, 286, 2041, 13, 865, 13, 4019, 11, 370, 309, 311, 6806, 385, 11, 457, 500, 380, 574, 13, 50844], "temperature": 0.0, "avg_logprob": -0.19832943810356987, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0027143792249262333}, {"id": 180, "seek": 139932, "start": 1411.8, "end": 1420.28, "text": " Yeah. Uh, yeah, you have something like that. It's, it's always a bit, uh, you, you, you manipulate,", "tokens": [50988, 865, 13, 4019, 11, 1338, 11, 291, 362, 746, 411, 300, 13, 467, 311, 11, 309, 311, 1009, 257, 857, 11, 2232, 11, 291, 11, 291, 11, 291, 20459, 11, 51412], "temperature": 0.0, "avg_logprob": -0.19832943810356987, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0027143792249262333}, {"id": 181, "seek": 139932, "start": 1421.0, "end": 1428.52, "text": " um, low level data structure, but that's, that's often what you want to do when you, you, you", "tokens": [51448, 1105, 11, 2295, 1496, 1412, 3877, 11, 457, 300, 311, 11, 300, 311, 2049, 437, 291, 528, 281, 360, 562, 291, 11, 291, 11, 291, 51824], "temperature": 0.0, "avg_logprob": -0.19832943810356987, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0027143792249262333}, {"id": 182, "seek": 142852, "start": 1428.52, "end": 1435.0, "text": " brought something in the system programming language. That's one reason to use rest over", "tokens": [50364, 3038, 746, 294, 264, 1185, 9410, 2856, 13, 663, 311, 472, 1778, 281, 764, 1472, 670, 50688], "temperature": 0.0, "avg_logprob": -0.21702214558919272, "compression_ratio": 1.563953488372093, "no_speech_prob": 0.030883193016052246}, {"id": 183, "seek": 142852, "start": 1435.0, "end": 1442.36, "text": " something else. Otherwise, uh, um, but I don't know. I, I, I got the input that's", "tokens": [50688, 746, 1646, 13, 10328, 11, 2232, 11, 1105, 11, 457, 286, 500, 380, 458, 13, 286, 11, 286, 11, 286, 658, 264, 4846, 300, 311, 51056], "temperature": 0.0, "avg_logprob": -0.21702214558919272, "compression_ratio": 1.563953488372093, "no_speech_prob": 0.030883193016052246}, {"id": 184, "seek": 142852, "start": 1443.24, "end": 1451.48, "text": " the, the bind gen don't really need, don't sorry, don't really need, uh, more advanced data types.", "tokens": [51100, 264, 11, 264, 14786, 1049, 500, 380, 534, 643, 11, 500, 380, 2597, 11, 500, 380, 534, 643, 11, 2232, 11, 544, 7339, 1412, 3467, 13, 51512], "temperature": 0.0, "avg_logprob": -0.21702214558919272, "compression_ratio": 1.563953488372093, "no_speech_prob": 0.030883193016052246}, {"id": 185, "seek": 145148, "start": 1451.48, "end": 1458.44, "text": " For example, OCaml have an interop, uh, OCaml interrupts things with rust. That's, uh, helps to", "tokens": [50364, 1171, 1365, 11, 422, 31030, 75, 362, 364, 728, 404, 11, 2232, 11, 422, 31030, 75, 12729, 82, 721, 365, 15259, 13, 663, 311, 11, 2232, 11, 3665, 281, 50712], "temperature": 0.0, "avg_logprob": -0.16805690400143888, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.08570752292871475}, {"id": 186, "seek": 145148, "start": 1458.44, "end": 1469.16, "text": " represent, um, ADT, both rust and OCaml. And I don't know if we really need to have ADT conversion", "tokens": [50712, 2906, 11, 1105, 11, 9135, 51, 11, 1293, 15259, 293, 422, 31030, 75, 13, 400, 286, 500, 380, 458, 498, 321, 534, 643, 281, 362, 9135, 51, 14298, 51248], "temperature": 0.0, "avg_logprob": -0.16805690400143888, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.08570752292871475}, {"id": 187, "seek": 145148, "start": 1469.16, "end": 1477.16, "text": " between languages for most of use case. I don't know. Um, yeah, uh, that's, that's many. I don't", "tokens": [51248, 1296, 8650, 337, 881, 295, 764, 1389, 13, 286, 500, 380, 458, 13, 3301, 11, 1338, 11, 2232, 11, 300, 311, 11, 300, 311, 867, 13, 286, 500, 380, 51648], "temperature": 0.0, "avg_logprob": -0.16805690400143888, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.08570752292871475}, {"id": 188, "seek": 147716, "start": 1477.16, "end": 1483.64, "text": " know if you have other question or just curious about something or, or another.", "tokens": [50364, 458, 498, 291, 362, 661, 1168, 420, 445, 6369, 466, 746, 420, 11, 420, 1071, 13, 50688], "temperature": 0.0, "avg_logprob": -0.20079565884774192, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.014394612051546574}, {"id": 189, "seek": 147716, "start": 1486.92, "end": 1488.2, "text": " Yeah. Okay. There's a question.", "tokens": [50852, 865, 13, 1033, 13, 821, 311, 257, 1168, 13, 50916], "temperature": 0.0, "avg_logprob": -0.20079565884774192, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.014394612051546574}, {"id": 190, "seek": 147716, "start": 1491.96, "end": 1498.2, "text": " So, uh, you said at one point that, uh, rest will not drop the value and that's to,", "tokens": [51104, 407, 11, 2232, 11, 291, 848, 412, 472, 935, 300, 11, 2232, 11, 1472, 486, 406, 3270, 264, 2158, 293, 300, 311, 281, 11, 51416], "temperature": 0.0, "avg_logprob": -0.20079565884774192, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.014394612051546574}, {"id": 191, "seek": 149820, "start": 1498.2, "end": 1507.4, "text": " for our scale to, to free. So how does that work? Is that done by the, by the GC or does it need to", "tokens": [50364, 337, 527, 4373, 281, 11, 281, 1737, 13, 407, 577, 775, 300, 589, 30, 1119, 300, 1096, 538, 264, 11, 538, 264, 29435, 420, 775, 309, 643, 281, 50824], "temperature": 0.0, "avg_logprob": -0.30946153210055444, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.08843944221735}, {"id": 192, "seek": 149820, "start": 1507.4, "end": 1518.04, "text": " be done manually? Um, you mean how I tell rest to not drop a value? No, if, if we do, if rest", "tokens": [50824, 312, 1096, 16945, 30, 3301, 11, 291, 914, 577, 286, 980, 1472, 281, 406, 3270, 257, 2158, 30, 883, 11, 498, 11, 498, 321, 360, 11, 498, 1472, 51356], "temperature": 0.0, "avg_logprob": -0.30946153210055444, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.08843944221735}, {"id": 193, "seek": 149820, "start": 1518.04, "end": 1525.24, "text": " doesn't drop the value, who does? Is it the, the, uh, the scale GC or, or somewhere we need to, to", "tokens": [51356, 1177, 380, 3270, 264, 2158, 11, 567, 775, 30, 1119, 309, 264, 11, 264, 11, 2232, 11, 264, 4373, 29435, 420, 11, 420, 4079, 321, 643, 281, 11, 281, 51716], "temperature": 0.0, "avg_logprob": -0.30946153210055444, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.08843944221735}, {"id": 194, "seek": 152524, "start": 1525.24, "end": 1531.72, "text": " advise, you know, you know, program? Yeah. Uh, the, the idea is because it's part of, uh, the", "tokens": [50364, 18312, 11, 291, 458, 11, 291, 458, 11, 1461, 30, 865, 13, 4019, 11, 264, 11, 264, 1558, 307, 570, 309, 311, 644, 295, 11, 2232, 11, 264, 50688], "temperature": 0.0, "avg_logprob": -0.2569129467010498, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.011010969057679176}, {"id": 195, "seek": 152524, "start": 1531.72, "end": 1539.4, "text": " marshmallow things, you will have to free it explicitly as I understand it. If, if we do not", "tokens": [50688, 43896, 721, 11, 291, 486, 362, 281, 1737, 309, 20803, 382, 286, 1223, 309, 13, 759, 11, 498, 321, 360, 406, 51072], "temperature": 0.0, "avg_logprob": -0.2569129467010498, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.011010969057679176}, {"id": 196, "seek": 152524, "start": 1539.4, "end": 1546.44, "text": " survive with leave, uh, maybe get some, somebody could tell me if I, if I'm mistaken in this", "tokens": [51072, 7867, 365, 1856, 11, 2232, 11, 1310, 483, 512, 11, 2618, 727, 980, 385, 498, 286, 11, 498, 286, 478, 21333, 294, 341, 51424], "temperature": 0.0, "avg_logprob": -0.2569129467010498, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.011010969057679176}, {"id": 197, "seek": 154644, "start": 1546.44, "end": 1555.24, "text": " point, it's really hard to, to, to, to debug what actually GC does. Uh, so far he didn't", "tokens": [50364, 935, 11, 309, 311, 534, 1152, 281, 11, 281, 11, 281, 11, 281, 24083, 437, 767, 29435, 775, 13, 4019, 11, 370, 1400, 415, 994, 380, 50804], "temperature": 0.0, "avg_logprob": -0.16877966042024545, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.14204494655132294}, {"id": 198, "seek": 154644, "start": 1555.24, "end": 1563.88, "text": " experiment so much on that, but, but yeah, the real thing is really that if you, if you do not", "tokens": [50804, 5120, 370, 709, 322, 300, 11, 457, 11, 457, 1338, 11, 264, 957, 551, 307, 534, 300, 498, 291, 11, 498, 291, 360, 406, 51236], "temperature": 0.0, "avg_logprob": -0.16877966042024545, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.14204494655132294}, {"id": 199, "seek": 154644, "start": 1564.44, "end": 1569.56, "text": " force for us to, to not drop things, it will, because it's part of its type system, it will,", "tokens": [51264, 3464, 337, 505, 281, 11, 281, 406, 3270, 721, 11, 309, 486, 11, 570, 309, 311, 644, 295, 1080, 2010, 1185, 11, 309, 486, 11, 51520], "temperature": 0.0, "avg_logprob": -0.16877966042024545, "compression_ratio": 1.6140350877192982, "no_speech_prob": 0.14204494655132294}, {"id": 200, "seek": 156956, "start": 1570.2, "end": 1577.8799999999999, "text": " it will put code to, to free memory, to free of the memory allocator you used, uh, straight into", "tokens": [50396, 309, 486, 829, 3089, 281, 11, 281, 1737, 4675, 11, 281, 1737, 295, 264, 4675, 12660, 1639, 291, 1143, 11, 2232, 11, 2997, 666, 50780], "temperature": 0.0, "avg_logprob": -0.21252962622312035, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.13073132932186127}, {"id": 201, "seek": 156956, "start": 1577.8799999999999, "end": 1584.6, "text": " the code. Uh, rest, uh, statically decide where to put allocation and release of memory", "tokens": [50780, 264, 3089, 13, 4019, 11, 1472, 11, 2232, 11, 2219, 984, 4536, 689, 281, 829, 27599, 293, 4374, 295, 4675, 51116], "temperature": 0.0, "avg_logprob": -0.21252962622312035, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.13073132932186127}, {"id": 202, "seek": 156956, "start": 1584.6, "end": 1590.6799999999998, "text": " inside the bin and binary. It's a computed as, uh, statically at compile time. So you have to", "tokens": [51116, 1854, 264, 5171, 293, 17434, 13, 467, 311, 257, 40610, 382, 11, 2232, 11, 2219, 984, 412, 31413, 565, 13, 407, 291, 362, 281, 51420], "temperature": 0.0, "avg_logprob": -0.21252962622312035, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.13073132932186127}, {"id": 203, "seek": 156956, "start": 1590.6799999999998, "end": 1596.9199999999998, "text": " tell type system to, to not do it for specific types if you, there's an internals for that.", "tokens": [51420, 980, 2010, 1185, 281, 11, 281, 406, 360, 309, 337, 2685, 3467, 498, 291, 11, 456, 311, 364, 2154, 1124, 337, 300, 13, 51732], "temperature": 0.0, "avg_logprob": -0.21252962622312035, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.13073132932186127}, {"id": 204, "seek": 159692, "start": 1597.8000000000002, "end": 1605.88, "text": " Uh, but on Askel side, I, I, I'm not sure, I'm pretty sure, unsure that the GC will, uh, track it,", "tokens": [50408, 4019, 11, 457, 322, 1018, 7124, 1252, 11, 286, 11, 286, 11, 286, 478, 406, 988, 11, 286, 478, 1238, 988, 11, 32486, 300, 264, 29435, 486, 11, 2232, 11, 2837, 309, 11, 50812], "temperature": 0.0, "avg_logprob": -0.2697836428272481, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.016323382034897804}, {"id": 205, "seek": 159692, "start": 1606.68, "end": 1614.6000000000001, "text": " um, as, uh, as a Gaboch collected object, I, I think, because you have to, to do it explicitly.", "tokens": [50852, 1105, 11, 382, 11, 2232, 11, 382, 257, 11995, 8997, 11087, 2657, 11, 286, 11, 286, 519, 11, 570, 291, 362, 281, 11, 281, 360, 309, 20803, 13, 51248], "temperature": 0.0, "avg_logprob": -0.2697836428272481, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.016323382034897804}, {"id": 206, "seek": 159692, "start": 1615.5600000000002, "end": 1622.8400000000001, "text": " Yeah. But that's one of the, the point, I'm a bit unconfident, so I want to, to check again,", "tokens": [51296, 865, 13, 583, 300, 311, 472, 295, 264, 11, 264, 935, 11, 286, 478, 257, 857, 517, 24697, 1078, 11, 370, 286, 528, 281, 11, 281, 1520, 797, 11, 51660], "temperature": 0.0, "avg_logprob": -0.2697836428272481, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.016323382034897804}, {"id": 207, "seek": 162284, "start": 1622.84, "end": 1629.3999999999999, "text": " it's this kind of scenario. Yeah. Um, do you have, was there a question?", "tokens": [50364, 309, 311, 341, 733, 295, 9005, 13, 865, 13, 3301, 11, 360, 291, 362, 11, 390, 456, 257, 1168, 30, 50692], "temperature": 0.0, "avg_logprob": -0.211643914381663, "compression_ratio": 1.506726457399103, "no_speech_prob": 0.005171945318579674}, {"id": 208, "seek": 162284, "start": 1632.1999999999998, "end": 1636.84, "text": " What do you do if there's an external Rust library that you don't have control over,", "tokens": [50832, 708, 360, 291, 360, 498, 456, 311, 364, 8320, 34952, 6405, 300, 291, 500, 380, 362, 1969, 670, 11, 51064], "temperature": 0.0, "avg_logprob": -0.211643914381663, "compression_ratio": 1.506726457399103, "no_speech_prob": 0.005171945318579674}, {"id": 209, "seek": 162284, "start": 1636.84, "end": 1643.56, "text": " um, because they might not want to add HS, bind gen macros to their code base? Is there a way of", "tokens": [51064, 1105, 11, 570, 436, 1062, 406, 528, 281, 909, 34194, 11, 14786, 1049, 7912, 2635, 281, 641, 3089, 3096, 30, 1119, 456, 257, 636, 295, 51400], "temperature": 0.0, "avg_logprob": -0.211643914381663, "compression_ratio": 1.506726457399103, "no_speech_prob": 0.005171945318579674}, {"id": 210, "seek": 162284, "start": 1644.6, "end": 1652.6, "text": " generating a shim or something? Um, okay. In fact, it's really easy in Rust to do", "tokens": [51452, 17746, 257, 402, 332, 420, 746, 30, 3301, 11, 1392, 13, 682, 1186, 11, 309, 311, 534, 1858, 294, 34952, 281, 360, 51852], "temperature": 0.0, "avg_logprob": -0.211643914381663, "compression_ratio": 1.506726457399103, "no_speech_prob": 0.005171945318579674}, {"id": 211, "seek": 165260, "start": 1652.6799999999998, "end": 1660.28, "text": " reexport. So you can always create a new crate, reexport a crate as you, you say, uh, I depend", "tokens": [50368, 319, 3121, 2707, 13, 407, 291, 393, 1009, 1884, 257, 777, 42426, 11, 319, 3121, 2707, 257, 42426, 382, 291, 11, 291, 584, 11, 2232, 11, 286, 5672, 50748], "temperature": 0.0, "avg_logprob": -0.1938197272164481, "compression_ratio": 1.7942583732057416, "no_speech_prob": 0.012696459889411926}, {"id": 212, "seek": 165260, "start": 1660.28, "end": 1666.28, "text": " on this crate and reexport the thing I want to reexport and I, I, I, I decorate or not", "tokens": [50748, 322, 341, 42426, 293, 319, 3121, 2707, 264, 551, 286, 528, 281, 319, 3121, 2707, 293, 286, 11, 286, 11, 286, 11, 286, 24229, 420, 406, 51048], "temperature": 0.0, "avg_logprob": -0.1938197272164481, "compression_ratio": 1.7942583732057416, "no_speech_prob": 0.012696459889411926}, {"id": 213, "seek": 165260, "start": 1667.0, "end": 1673.1599999999999, "text": " element. Yeah, that works on functions that exist in the other library. Sorry, you can you put", "tokens": [51084, 4478, 13, 865, 11, 300, 1985, 322, 6828, 300, 2514, 294, 264, 661, 6405, 13, 4919, 11, 291, 393, 291, 829, 51392], "temperature": 0.0, "avg_logprob": -0.1938197272164481, "compression_ratio": 1.7942583732057416, "no_speech_prob": 0.012696459889411926}, {"id": 214, "seek": 165260, "start": 1673.1599999999999, "end": 1680.36, "text": " those macros on the functions in the other library then? Yeah. Yeah. Yeah. Um, in fact, it's just,", "tokens": [51392, 729, 7912, 2635, 322, 264, 6828, 294, 264, 661, 6405, 550, 30, 865, 13, 865, 13, 865, 13, 3301, 11, 294, 1186, 11, 309, 311, 445, 11, 51752], "temperature": 0.0, "avg_logprob": -0.1938197272164481, "compression_ratio": 1.7942583732057416, "no_speech_prob": 0.012696459889411926}, {"id": 215, "seek": 168036, "start": 1680.36, "end": 1685.7199999999998, "text": " just wrapping function by function. So, so you can do whatever you want. Um,", "tokens": [50364, 445, 21993, 2445, 538, 2445, 13, 407, 11, 370, 291, 393, 360, 2035, 291, 528, 13, 3301, 11, 50632], "temperature": 0.0, "avg_logprob": -0.23127581975231432, "compression_ratio": 1.6012658227848102, "no_speech_prob": 0.0027865797746926546}, {"id": 216, "seek": 168036, "start": 1687.8, "end": 1694.36, "text": " and yeah. Uh, and you can opt in or opt out some function of a library and some not, which is,", "tokens": [50736, 293, 1338, 13, 4019, 11, 293, 291, 393, 2427, 294, 420, 2427, 484, 512, 2445, 295, 257, 6405, 293, 512, 406, 11, 597, 307, 11, 51064], "temperature": 0.0, "avg_logprob": -0.23127581975231432, "compression_ratio": 1.6012658227848102, "no_speech_prob": 0.0027865797746926546}, {"id": 217, "seek": 168036, "start": 1695.08, "end": 1700.9199999999998, "text": " to me, is a, is a advantage of using macro and function decorator over, uh, code,", "tokens": [51100, 281, 385, 11, 307, 257, 11, 307, 257, 5002, 295, 1228, 18887, 293, 2445, 7919, 1639, 670, 11, 2232, 11, 3089, 11, 51392], "temperature": 0.0, "avg_logprob": -0.23127581975231432, "compression_ratio": 1.6012658227848102, "no_speech_prob": 0.0027865797746926546}, {"id": 218, "seek": 170092, "start": 1701.88, "end": 1708.44, "text": " uh, wall code, uh, parsing. That's not free though, is it? That's not. So if you're, sorry,", "tokens": [50412, 2232, 11, 2929, 3089, 11, 2232, 11, 21156, 278, 13, 663, 311, 406, 1737, 1673, 11, 307, 309, 30, 663, 311, 406, 13, 407, 498, 291, 434, 11, 2597, 11, 50740], "temperature": 0.0, "avg_logprob": -0.21578858693440756, "compression_ratio": 1.7757009345794392, "no_speech_prob": 0.03492434322834015}, {"id": 219, "seek": 170092, "start": 1709.16, "end": 1713.72, "text": " so if you're, you're reexporting functions but you, but are you actually reexporting the same", "tokens": [50776, 370, 498, 291, 434, 11, 291, 434, 319, 3121, 2707, 278, 6828, 457, 291, 11, 457, 366, 291, 767, 319, 3121, 2707, 278, 264, 912, 51004], "temperature": 0.0, "avg_logprob": -0.21578858693440756, "compression_ratio": 1.7757009345794392, "no_speech_prob": 0.03492434322834015}, {"id": 220, "seek": 170092, "start": 1713.72, "end": 1722.04, "text": " function or are you exporting a wrapper around the reexport? Yeah, but I, I, okay, I, in Rust,", "tokens": [51004, 2445, 420, 366, 291, 44686, 257, 46906, 926, 264, 319, 3121, 2707, 30, 865, 11, 457, 286, 11, 286, 11, 1392, 11, 286, 11, 294, 34952, 11, 51420], "temperature": 0.0, "avg_logprob": -0.21578858693440756, "compression_ratio": 1.7757009345794392, "no_speech_prob": 0.03492434322834015}, {"id": 221, "seek": 170092, "start": 1722.04, "end": 1730.2, "text": " there is a clear, uh, um, idea of, uh, what symbol I want to expose and what symbol I don't want to", "tokens": [51420, 456, 307, 257, 1850, 11, 2232, 11, 1105, 11, 1558, 295, 11, 2232, 11, 437, 5986, 286, 528, 281, 19219, 293, 437, 5986, 286, 500, 380, 528, 281, 51828], "temperature": 0.0, "avg_logprob": -0.21578858693440756, "compression_ratio": 1.7757009345794392, "no_speech_prob": 0.03492434322834015}, {"id": 222, "seek": 173020, "start": 1730.28, "end": 1737.64, "text": " expose. So I, I'm pretty confident that the compiler has the library to inline or not things.", "tokens": [50368, 19219, 13, 407, 286, 11, 286, 478, 1238, 6679, 300, 264, 31958, 575, 264, 6405, 281, 294, 1889, 420, 406, 721, 13, 50736], "temperature": 0.0, "avg_logprob": -0.15907533545243113, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.007057787384837866}, {"id": 223, "seek": 173020, "start": 1737.64, "end": 1743.8, "text": " So for example, most of the trade implementation I do, which is casting, are inline. I explicitly", "tokens": [50736, 407, 337, 1365, 11, 881, 295, 264, 4923, 11420, 286, 360, 11, 597, 307, 17301, 11, 366, 294, 1889, 13, 286, 20803, 51044], "temperature": 0.0, "avg_logprob": -0.15907533545243113, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.007057787384837866}, {"id": 224, "seek": 173020, "start": 1743.8, "end": 1748.76, "text": " say I want it to be inline. And so, yes, it's a function that's called a function, but at the end,", "tokens": [51044, 584, 286, 528, 309, 281, 312, 294, 1889, 13, 400, 370, 11, 2086, 11, 309, 311, 257, 2445, 300, 311, 1219, 257, 2445, 11, 457, 412, 264, 917, 11, 51292], "temperature": 0.0, "avg_logprob": -0.15907533545243113, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.007057787384837866}, {"id": 225, "seek": 173020, "start": 1748.76, "end": 1758.52, "text": " it's just, it's, uh, have no, no runtime cost. So yeah. Okay. We're out of time. Thank you. So", "tokens": [51292, 309, 311, 445, 11, 309, 311, 11, 2232, 11, 362, 572, 11, 572, 34474, 2063, 13, 407, 1338, 13, 1033, 13, 492, 434, 484, 295, 565, 13, 1044, 291, 13, 407, 51780], "temperature": 0.0, "avg_logprob": -0.15907533545243113, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.007057787384837866}, {"id": 226, "seek": 175852, "start": 1758.52, "end": 1766.84, "text": " thanks very much, Yvonne. Let's give him a round of applause.", "tokens": [50364, 3231, 588, 709, 11, 398, 85, 22419, 13, 961, 311, 976, 796, 257, 3098, 295, 9969, 13, 50780], "temperature": 0.0, "avg_logprob": -0.3395261764526367, "compression_ratio": 0.8840579710144928, "no_speech_prob": 0.023946667090058327}], "language": "en"}