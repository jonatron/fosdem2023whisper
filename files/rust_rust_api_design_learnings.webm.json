{"text": " So, hello everyone, I'm happy to share some experience of mine with building Rust libraries. There's a lot that I went over to come up with like the lessons that I actually feel like are worth sharing and is much more than can fit into a talk, so I tried to sort of get it down to the things that are most important to me, but if we have some space at the end then we can sort of dive deeper into some of the things that I will only cover very briefly. So who am I? My name is Amin Roneha and I have been creating open source libraries for quite a while. I have originally written a lot of Python code, I wrote the Flask Microphone work for Python and I have been doing open source libraries probably since I'm 17 or something, so this is many years of experience in some sense and I started using Rust in one form or another almost exactly 10 years ago, so I have played with this language for really long at this point and so I went through some iterations of what works and what doesn't work. Commercially now I work for a company called Sentry, we are doing application monitoring and crash reporting and so we use Rust there and so I'm going to share the learnings of this in sort of two ways. One is open source libraries that are there for other people to use and the other one is libraries that are to be used within the context of one specific company because some of the things that we create, the only users really are us ourselves. And so in terms of open source libraries that sort of feed some into this talk, I'm taking a little bit of code from my Insta snapshot in testing library, my mini-changer template engine and a few others like my console library. Okay, so this is a quote that I read a couple of months ago and it's not so important but it really bothered me. It was a comment to an open source library written in Rust that more or less made a statement that defaults shouldn't exist and people should think really, really hard to spend the mental capacity of understanding what they should be doing, picking defaults blindly is a mistake and I don't subscribe to this at all because I believe that it's the responsibility of a library author to make sure that the defaults are the best that you can possibly take and the way I would think of this is you can think of creating a library or an API as if you're building a business. You have some sort of success criteria and you can measure yourself against this success criteria and I don't think the success criteria should ever be to confuse your user as much as possible. It should be that you measure how successful your customers are in using the API as you designed it, so if they do something that is not ideal, there's something you can fix and the second thing is then they will typically use your API to build a product themselves, to solve a problem themselves and the quality of the output that the user then produces in some way is also something that you have an impact on. So you can kind of think of it like the percentage of users that are making the wrong or right choices is the dial that you can sort of try to dial. The problem obviously is how the hell do you measure this? And it's really, really hard because most of the things that you can actually measure, they don't really show up in useful things, so you can define the success criteria and I think a lot of people do this in some way subconsciously, but they absolutely have no way to measure it. I don't have a way to measure most of those things. So the only thing you can do in the beginning is measure yourself, so you treat yourself as the first user, horrible sample size, but you can sort of figure out like as you are using your own stuff, does it do what you think it does? And then every time you sort of hate the experience, at least write down like it didn't like this. So it's a good start, but the problem is you're really flying blind, there's no good way to measure this and this is not unique to Rust, this is the fact most of the time it works like this. But in terms of API design, I think we have learned in other environments that there's actually a lot of stuff to measure, so if you were to create an HTTP library, a lot of companies are trying to figure out how often do the users that hit the APIs do the things that they don't want them to do, for instance, because they create bad load patterns or because they just generally hit the API in ways that is not efficient and they're trying to figure out like how do we optimize so that the user actually does the thing that you want. And this works if you run a service because you can see what everybody is doing. You can't really see anything that the developer is doing in your Rust library. The only numbers that we have for download statistics which are really pointless because they're heavily skewed towards libraries that are used by other libraries, so you can build the most amazing library ever to build an application, but if there's only ever application developers that are going to download this library, you're never going to accumulate a lot of download statistics because most of the download statistics come from either CI and very few people actually download the code to run on a desktop. So if you have 100 developers, they're going to pull this once each usually and then it's cached on the machine. The download numbers come from CI, so it's only this dependencies of dependencies that are actually ending up driving those numbers, and so they can be demotivating in some sense and they're definitely not that useful, so you can't really track anything sensible in terms of adoption just by the download numbers. So the first feedback you're probably going to get is some form of frustration, so it's usually bug reports or it's someone internally telling you that this thing is really inconvenient to use. In some ways, you have to prompt them to actually tell you that, but you can kind of do it like use a service in interviews to figure out like, do people like this, and you kind of usually don't get people to reply to service, so one other way to sort of solicit feedback out of people is you take this issue request, ignore it entirely almost, and you go back to why did they submit this in the first place, and they try to ask that question, because quite often when they submit a bug report, they're already down a really weird path anyways. Maybe you can take them on a higher level and figure out why did they even try to do this. I mean, when they do a feature request, bug report is less so. So as mentioned, it's really hard to measure, and so because it's really hard to measure, a second thing that you can sort of use is trying to figure out like, okay, if you think this is worth measuring, what is it that this number actually represents? This is typically some sort of values, and so these are the ones that I find are important to me. They're probably not necessarily important for everybody else, but I felt like over the years I can get behind those. So the first one is I think the hello world of your library should be relatively concise, so it should be easy enough to get started, to some degree this is simplifying onboarding, but to another one it's also that the less stuff there is, the easier it is to maintain the whole thing overall, or gotten to this a little bit. This also leads towards good defaults, ideally you don't have to copy paste five lines of code in if a single line of code does. The smaller the surface area of a library actually is at the end of the day, the easier you have in terms of maintenance and also in the ability to do modifications over time. Because the more API you expose, the higher the chance that you're going to break something, and I don't like breaking things. I think backwards compatibility is really important. I hate the idea of unnecessary churn. I've been part of the Python 2 to Python 3 migration thing, and it was horrible, and it was particularly horrible because a lot of people that really liked the language, as I've included, got stuck on Python 2 for a really long time because we used it in a commercial context, we used it for large projects, and those were the ones that moved the slowest. You had a lot of power users stuck on an old version that actually used it in a quite extensive context, and it took us a couple of years to move, and while we couldn't move or we could only play with it in small experiments, the language kept innovating, and all those innovations were unable to be used by the people that previously were really engaged in their thing. I don't like the idea of letting people behind, so the easier the migration path is forward, the fewer people are going to leave behind on all the versions. In a way, my goal is to keep people on the golden path. What's the golden path? It's the idea that you have an idea of how people should be building stuff. Typically, this is a thing that you do in system design, and you plot an idea for someone to execute along, and this is the blessed way to doing things, and you try to get as many people as possible on this golden path, but libraries have the same thing. If you want to build a security library, for instance, like an encryption standard library, there are many ways to build the wrong one, where you give people so many choices that they have no sensible way to being sure that they are on the one that actually does the right thing. But the problem with the golden path is that it will change over time. What is correct today might not necessarily be correct in two years. To go back to the security thing, at one point, we recommended everybody MD5, and then that was not a good idea anymore, so at the very least, it should be SHA-1 hashes, and now obviously we don't want that anymore. The problem with this is that a lot of things change over time, and so if you create, for instance, a library that wants to make a choice for a user, but it's designed in a way that that choice can never be changed on the fear of breaking code to some degree, and then you did something wrong in the sign origin already. Some change requires adjustment by users, and that's really hard to do, so if you have some sort of golden path, you can figure out how many people are on that, versus the thing that you don't want them to do anymore, and again, measuring is almost impossible, but one way you can do that is if you are building a library where you think other libraries are going to use that, you can use something like a GitHub code search to figure out how many people still use the deprecated pattern. You can also leverage dependabot quite a bit to figure out how many people that actually are getting a dependabot update are going through with the update versus not. Okay, so defaults matter. As mentioned earlier, I'm a strong believer in there should be good defaults, and I think defaults really come in two choices. One default is the absolute default. You're never going to change the default of a U32 integer to be anything other than zero and rust. There wouldn't even be a discussion about it to change it to one, right? There's an obvious default, and it's so dependent on that you just will never be able to change it. But then there are sort of defaults that are intentionally designed so that they can change over time. For me, a good example here is the hash table in Rust or any hashing function in Rust doesn't say what hashing algorithm uses. It defines some sort of properties around it within the boundaries of which it probably doesn't change, but the Rust developers could come in from one day to another and switch from SIP hash to FX hash, and most of us wouldn't notice, right? So to enable these sort of defaults, you have to design the system around it so that these can be changed, and you have to communicate to user how you're going to change them. There have to be some rules and expectations around what the stability here means, but you should try to aim that you can actually enable this change, because otherwise you end up in a situation where you have created an API and now you need to make a second one because the old one just doesn't work anymore, and you either have to take it away, it's going to be frustrating for user, or you have to lie about what it does. There are a lot of liars out there that say, hey, my function does SIP hash, and then in reality it just doesn't do that anymore because they wanted people to move up, but they were afraid of breaking it. So why does this work in Rust, for instance, with the hasher? Because they said, okay, this is never going to be portable, and I think this is a really interesting part because it also enforces without saying what it is, how good it is. What I mean with this is that the hasher in Rust randomizes all the time. If you even try to use it in a portable way, you're going to quickly figure out that every time you re-run your program, the hash is different, so you cannot even get into this mood of trying to use it for something that's portable, and there's a really good analog of something like this, which is every once in a while people build programming languages, and I think Go went down this very same path where they said, we're going to build a garbage collector, and it doesn't compact right away, but it's eventually going to be a compacting garbage collector. And the problem is if you don't start out with actually writing a compacting garbage collector, a compacting garbage collector takes a pointer and moves it somewhere else, so to compress down the heap space. But if you never compact to begin with, people get used to this idea that the point is really stable, and they will stash the pointer somewhere, and they rely on the fact that it never moves. And so at a later point, three years in, someone says, oh, now we built this awesome compacting garbage collector, but they can never turn it on because people took advantage of the fact that there was actually a conveyance in the API that they used that wasn't supposed to be there, but it wasn't enforced. And so what the Rust hasher does in this sense is it always randomizes, so it already makes it so uncomfortable to use for the wrong thing that you wouldn't use it. And so if you were, for instance, to build another language with a desire to eventually build a compacting garbage collector into it, you would probably try to make it so uncomfortable to use these pointers for stashing away that it already wouldn't work in the absence of one. So I think it's a really important part to make sure that if you want to be able to create this, change the defaults, that it start from the beginning thinking, OK, how do I build it so that I actually remain, keep this freedom. And so why do I even want to change this? Well, because you have this problem of cargo-culting. I have created things in the past myself where I discovered that people copy-paste the first example from documentation over and over and over again. And then you have this first example from documentation in millions of repositories. And for me, the weirdest one is that one of my frameworks that I built actually ended up in a university course as a programming 101. And universities are sort of an amazing catalyst for this because you end up with all of those students putting their GitHub repositories of the first courses on GitHub. And then you see the madness you have created, multiplied through like every single student that on boards. And it's a real lesson. So I really respond really negatively to this idea of this code example, which I know it's hard to read, but it basically is sort of the, that would be the equivalent of not picking a default hash. It would be like, well, we think that Rust is a hard programming language. It's supposed to be like C++, you should think. So you pick the hasher yourself, and then you just put it in there. And then I swear to you, this would be the first code example, even if the documentation says you should pick FX hasher for this type of hash map, and you should use SIP hasher for this other hash map. Nobody would read it. They take the first code example and copy paste it in, right? But now we discover maybe SIP hasher actually is better than FX hasher, but we cannot change everybody's code all at once because everybody has copy pasted the wrong thing over there. And what I know happens is that every once in a while, someone comes and is like, okay, we know that FX hasher is really popular, so we're going behind the scenes, change it to actually be a different hasher because everybody copy pasted this thing everywhere. It's incredibly common that you find an API that says, like, I'm named really misleadingly because this used to be my implementation, but now I'm something else entirely, right? So it doesn't, like this card-culting I hate, and I don't think it's good, but I understand it's really appealing because it's flexibility. This I think, I actually made the wrong code example here on the slide, but I was too lazy to change it afterwards, but just imagine for a second that this code example wouldn't return a string, but actually returns an enum with a variant called char256, but the idea here is more or less this. If you do create a library that does something of which in the future there might be different implementation coming along, what you probably want to do is not just return the output, but you want to annotate the output with what kind of thing it is. So if you create a, if you have a library that sort of is supposed to validate files on the file system, and it does it by calculating a checksum, it's much better for that library not to return the bytes of the checksum, but to return the bytes of the checksum and the information by the way I'm char256. Why? Mostly because it forces the developer to recognize that this thing might change, right? It might not be char256 forever. And this sort of explicit, like even if you never plan on actually changing this at all, it still forces something in the mind of the developer to recognize that this is probably going to change. And I know of a version control system that very famously picked one shahesh and is completely incapable of changing it now, not because it's technically impossible, they've changed everything, but because there's an ecosystem of stuff that assumed that it will never change, this change cannot be pushed through, right? They have the one version, the other version, the incompatible of each other as an example of this, right? I know this is very security heavy right now, but the idea is the same, like you, every once in a while there's a reason for you to move up to a different algorithm or something of that nature, and if you haven't created an API in the beginning that sort of hammers down this point that it might change, people will not necessarily think about this. Less is more, I think it's pretty obvious, the larger the API surface, the more stuff you will have to make sure doesn't break if you change internals. Particularly internal APIs are incredibly leaky accidentally or intentionally, and whenever you want to change it, you have to ask yourself the question if someone actually using this. A lot of people start out building libraries where every single module, every single function is just pop, and every version breaks everything ever, because you just don't have the time and, at least you don't have the time usually, and the capabilities to figure out if someone actually uses all of those functions, so you just break them all. Or you just spend all this extra time on making sure that they never break because it's impossible. So goal is small API surface, but then if you go to a small API surface, then there's some tricks in Rust you can use to reduce API surface, but not really. So for instance, we have some really common abstractions like Intot or SRFT, which can be used to be generic over something. So it saves you the necessity to build a function four times. You might want to open a file by string or you might want to open a file by path. Just write one function, you can do SRFT path, and it's possible to pass at any of those compatible types. Now, it's kind of cheating because it's really still four different APIs, but they're hidden behind a standard constructor that the developer understands. So this is an example from Minigenger. Both name and value are generic. One is converting into a copy and write string thing. So you can either pass it an own string or you can pass a static string reference. Both of those will be fine. So from an API point of view, it behaves as you would expect. The first thing is a string argument, like you cannot get it wrong. And the second thing is whatever converts into my internal value type of which there are a bunch of conversions. I could also have made seven different at whatever functions for every single data type that exists, but this is a simpler way to do it. And I could also have said, like, hey, you're going to pass the value directly already, but since I already need to provide a way for the user anyways to convert it into this value type, might as well use this. So it's very consistently throughout the API now using int of value. So there's only one function and it hides all of those different variations of actual API that still exists behind this int of thing. SRF is sort of the same. I actually hate SRF because it makes it really unreadable. So instead of your function taking a path by reference, it takes a p and then the p is hidden behind SRF path. And then before to use it, very often I use SRF.toPathPath, which is just weird, but this is a really common pattern. So I don't like it, but it's so standardized in the ecosystem that people get to expect it. And so because we all have been willing to live with it, I guess this is sort of enough of a reason to keep doing it. If you have this sort of APIs that use a lot of generics to do type conversions, you will immediately blow up your compile times. This is the standard trick to not do that, which is you keep the generic part into a tiny, tiny function and then call it the non-generic part. So in this case, the conversion goes to this value type. I know it's really hard to see in this projector, but basically the function render takes an object that can serialize with 30, and then it calls value from serializable, which takes this value, converts it into a value type, which is the non-generic, which I use all over the thing. And then all the function underscore, render, underscore, eval, they will not be generic. And so they have one instance, whereas the other one will be one instance per type actually passed. What does it mean? If you don't do this, if this was all one function, last time I checked this, the mini-changer compile times are exploding to more than double or three times just because of this one function. Why? Because it's very common that you pass different types of it, and the Rust compiler thinks that inlining is awesome, and it inlines this VM eval function there, which is, I think, like 15 kilobytes or something, and so it makes a duplication of those 16 kilobytes for every single type that you put in. In this case, I only have 16 kilobytes once, right? So it's a serious amount of code that you save with this, and it's probably the best way to save compile times for a lot of code. There are actually some tools that you can use these days to figure out, like, why these functions blow up that much. But if you use generics, particularly with SRF and into, it's worth looking for. So I mentioned earlier, I like to keep the API service as small as possible. That doesn't mean that I don't build actually an onion of API behind the scenes. So I like this onion concept, like, APIs are layered. But the user only gets the outermost layer, the inner layers are for own enjoyment. And then you keep these inner layers, and you have this flexibility of change remaining, but it's still kind of clean. And then over time, if that library becomes like the most stable thing ever, you can actually start exposing the next layers of the onion. A good example for this, I think, is Rust compiler plugins. Rust compiler, like many other systems, want you to be able to write a custom plugin for it, like the proc macros. But the problem is that that exposes a lot of the internal machinery of the compiler, which the compiler authors don't want to be stable. So what they did is they actually took the internals of that thing, they exposed it through a secondary library, which I think was soon, and I think soon is the one on top, but maybe it was proc macros too, but in any case, it was exposed as a secondary library. It actually used the same code, but they had different stability guarantees, and then they used a conversion system, which was basically serialized to string and deserialized from string to bridge between the two. And so if you do feel like, okay, I actually want to eventually expose this other library, and I want this inner most functionality to be available for customer, you can think of exposing it as a completely independent library for experimentation, and then eventually when it stabilizes, you can give it another onion layer to the customer. But again, once you have exposed that, your stability guarantees are going to be much harder to uphold. So just a simple example, internally in my templating engine, I have a lot of abstractions like compile template, which is something that I know would be awesome to use externally, but I don't want to give it to you, and then the code generator and the parser that have already been people asking how to get access to it, you're not going to get it for now. But I keep the abstraction internally because it's much more fun this way. As I mentioned, I like to have as little API service as possible, and by the way, I fail at this. You will notice that when I start a library, usually it has way more API than after three iterations when I take it away. But I basically try to keep it flat, so I expose all of the things I want you to use to the top level, and then all of my internal create structure is whatever, however I feel like to actually lay out those things. If I do have so much code in the library that I feel like there need to be sub-modules, make them up on the spot, so in the Insta Snapshot testing library that I wrote, I have a lot of internal types that you actually want to use as a user every once in a while, and they come from all different locations in the code base. So what I did is in my librs, I have a pop-mod internals, which is documented, those are internals you're allowed to use, but I just pull them from wherever they're defined. So this module doesn't exist as an internals.rs file. It's purely a thing that sits in my librs to organize the structure. And that way, I have the freedom to move these things around as I want. Related, every once in a while, you have to export an API that has to be public for reasons that mostly sit in the restrictions of the language. But I really don't want it to use it, so I just hide it. So dock hidden, you will find a lot of Rust libraries which have a lot more public API, but you're not supposed to use it. It's usually hidden behind underscore underscore, and it's just hidden. Why does it exist? On the one hand, because Microsoft needs to access functionality. The other reason is also that you might have to create dependencies. So Insta, for instance, has to expose internals out of itself into the test runner called Cargo Insta. And the way I do this, I have a hidden feature flag which says if you're Cargo Insta, you can use this feature flag. Everybody else, just please don't. But if you do still use that feature flag, you're still not going to see all of this API because it's kind of hidden away. This also helps when you use, for instance, DocsRS is an awesome tool to document your crates. A lot of people run DocsRS with all feature flags so that it's fully documented everything. If I wouldn't hide all of those things, then this internal feature flag that would turn on this API would accidentally document it. I don't want that. So even the APIs that sort of are there for me, I will still hide from documentation. Cool, traits. I have a really complicated relationship with them because I think they're awesome, but I also kind of don't want them to be in APIs. I think they fall into two categories. Some of them are, well, maybe the other way around, open traits are most common one. Asref into, everybody can implement them. And then there are a lot of cases where you might have traits that only exist as an internal abstraction. Let's call them sealed traits. They come from a crate and they're only implemented in the crate and nobody ever should implement those. Why do they exist? Because, for instance, you want to box something up or because you want to have really nice documentation where you can select, my crate accepts these types of things. So I wrote a Rust Redis library a couple of years ago where I made the conversion trait so that you can pass any Rust type that is compatible with Redis in all of those functions. And I didn't seal it off. And now it's public interface and people have been sealing off their own types, have been implementing for their own types. And so now it's just there. You can't take it away anymore. Which is fine for that library, but I didn't want to do it in other cases because, to me, that trait actually mostly only existed so that it's there for documentation purposes. So you can seal them in two ways. One is sort of the soft seal, which is just hide the functions that you're supposed to implement. And then it's unclear how you're actually going to implement it. In this case, it's soft sealed, so you can actually call it still and you can actually implement it. I'm not sure if I like it or not, but there are actually some use cases of why you might want to do this. Mostly you have to do it with code generation. But there's also the way of doing a full seal where you put a private serial size type into an argument and because it cannot name the type because it's never exposed, you can absolutely not call this ever. And the funny thing is Rust actually depends in the standard library of this pattern a lot. If you use any type and the generated downcasting feature, it uses an internal system called type ID to return a unique number for a type. If you were to be able to override this and lie about your own type, you could cause unsafe memory access, right? And so they have a seal marker in there that you can't implement and only the default implementation is only the valid only implementation. So it's a pattern. It's just not a pattern that has syntax support. It's just used that way. For now, maybe it will eventually get one. So why do I not like traits that much? Because I find them incredibly hard to discover. It's very annoying if you import a type from your library and then you want to call a method on it and the method is not there until you bring the traits into scope. And I know that a lot of people write this awesome preludes where like import this from my library and now, by the way, you have 20 types sitting around in your scope. It works, but it has a whole bunch of problems. One of which is that it makes your error messages a lot more confusing because there are traits in a standard library that if they are in scope, types with the inherent implementations will no longer function the same. There's a type called, I think it's called borough, a trait called borough. If you bring borough into your scope, you can no longer borrow from, I think, a ref cell. It will error because the trait overwrites the inherent implementation. So that's not great and there's a bug report from like seven years ago, I think, and there's already, but how do you change it now? It's like that's the behavior, but that's the problem that you have with preludes because they are just based by name and it will say like, well, there is no implementation by that name or it doesn't help you that there's an inherent method on this thing. I'm not going to let you call it. You have to disambigate your call. So there is some problem coming with the trait stuff and they're really useful, but you shouldn't maybe overdo them, I think, to some degree. It's really nice if the type out of the box already has a neat little behavior. And if you want to abstract to a multiple stuff, you can add the traits later anyways. There are however traits you should probably implement all the time. My favorite one is debug. It should be on all your public types. If you feel like it's blowing up your code generation times too much, you can hide it behind an external and extra flag you can turn on demand. I give you a very good reason why debug should be on all your types. Every once in a while, you have to be generic over something and then you will usually say like, I'm generic over serialize or I'm generic over my really cool thing that you should be calling. And the problem is when you're generic over serialize only and you're deep down in nested generic over serialize type and you want to debug print, you can no longer do that because serialize does not imply debug. So even if a type is capable of debug serializing because it's not a trade bound on the thing, you cannot call it there, which is very, very annoying in a lot of code setups. And so what I do these days, I will make debug and implied bound on a lot of, so like a super trade on a lot of the things that I actually expect to be very deep in code calls so that I can actually debug the whole thing. And the problem is that that requires that the ecosystem embraces the idea that almost everything is debuggable. So just make it debug. And if you really think it's blowing up a compile time, just put a second flag in that it can turn on when you need it. But not being able to debug very deep down in generic code land is just an unnecessary frustration you can avoid. This trade is almost like debug, it just converts this thing to string. It's obviously useful for a bunch of cases, but I can definitely overdo it. I much rather have the compiler yell at me that I should be telling it how to format rather than the string, that the type in itself just being formatable. But there are obviously like a lot of types for which it's necessary. Like if you have a UIA IDE, you would expect that the stringifies. If you have an error, errors have to be stringified so you can't really opt out of it anyways. But I feel like that a lot of types, actual way to convert it into a string is the debug thing is really hard to discover API. Like yes, of course, then I get two string methods appears, but you don't know if this is a thing that you're supposed to look at or if it's just a debug format with a different output. I've seen both. There are some types where you can call two string on it, but it's really not the real string form, you have to pick a different one, and it's just an alias for debug print, and sometimes it's the real deal. So this is a very confusing trait, I think. Copy and clone are obviously the most common traits that you have to deal with. Once granted, impossible to take away, I would say, because people start expecting that they can clone it. And so copy is a really tricky one because you can only uphold it for as long as it looks like a certain type of structure. Once you put something in there that's not copied, there is no way to fake the copy. And so if you make your type copy and then you later discover that that was a mistake, you now need to hold an arc, it's a breaking change, and I don't like breaking changes. So about copy, you have to think, will you uphold this forever? Clone, I think, is actually relatively fine to backport. If you discover over time that you really can't clone the thing anymore, you just put an arc over it. So a very common reason in the past, I've noticed that I have a type, it has cloned, and now it can no longer be cloned because it holds a boxed-in function. Doesn't actually matter. Instead of a boxed-in function, make an arced-in function, and it works again. So a lot of these sort of classic cases of, hey, I can't clone this anymore because of a reason, you just arc it, it's fine. And then the problem with copy is also that the inverse, you don't put copy on something and then people get really angry because they expect it to copy. Classic case is the range type in Rust. It doesn't copy, everybody is like, it doesn't understand why does it not copy. There's a good reason why it doesn't copy, but it's really annoying, and I think it's one of the most common frustrations in Rust that the range type is not copy, and that you have to clone it all the time, like this by response on GitHub, I think. This is one of our only briefly cover, but I don't have recommendations on if something should be sent or synced, but I do think that it's actually totally fine not to have objects that are thread safe. And the reason for that is that you can often just tell a user, they can create an API where the user doesn't really have to do this. They can just put this locally and they're done. Why? Because, for instance, one of the things that I love to do is create this sort of session abstraction. The session abstraction is I want to deal with a bunch of objects for the scope of one function only. So I load everything into some sort of environment where I do some stuff with it, I have an object called the session, it tracks a whole bunch of data modifications, it gives me access to something, it's the only thing that ever needs to hold this thing, and then when I'm done with it, I tear down the session and my lifetime problem goes away. So for as long as you don't have to pass this over really complicated boundaries, just have this thing, make a session abstraction, hold all the data in there that borrows temporarily and then disregard it. So this is from our Symbolication Library, it holds, when you want to deal with a debug file, you open up this debug session, you do a bunch of stuff, you tear it down. And we have never, I think, had a case where we need to hold on to this, where the lifetime was actually a problem. But you will notice here there's a self-cell in there, which I think is probably one of the best things you can have. Then you create an API, and then you discover I need to borrow into myself, and Russ doesn't do that, but self-cell lets you do that. So there are a lot of crates that have been created over the years that you can borrow into yourself, this is my favorite. It basically gives you almost like, it gives you a type that says here I hold some data and by the way I also hold a reference into myself, and it doesn't really convenient way. So if you have created yourself into a whole, where you feel like lifetimes are your enemy, this might dig you out of this. Yeah, last part, errors, I think they're important, they're talked by themselves. You have to consider if you panic or error. My strong recommendation is not panic, but if you do panic, use track caller, you probably know what this is, but it basically removes this one function from the cost of the call stack, and it removes this one function from the call stack, and then the panic message says, hey, your problem was where you called, in this case, pop on an empty stack, and not the completely pointless unwrap in there, because you want to know where you're fucked up and not here, obviously. Errors are really important, again, they would be a talk by themselves, but my ask to everybody is please implement STD error on those thingies, because then you can sort of compose them, a lot of people still don't do, it's very, very annoying if they don't. Thank you. So otherwise, we can also do it in the hallway, but might have one or two questions. Thank you very much for the talk.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.84, "text": " So, hello everyone, I'm happy to share some experience of mine with building Rust libraries.", "tokens": [407, 11, 7751, 1518, 11, 286, 478, 2055, 281, 2073, 512, 1752, 295, 3892, 365, 2390, 34952, 15148, 13], "temperature": 0.0, "avg_logprob": -0.2239168188074133, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0391886867582798}, {"id": 1, "seek": 0, "start": 12.84, "end": 18.56, "text": " There's a lot that I went over to come up with like the lessons that I actually feel", "tokens": [821, 311, 257, 688, 300, 286, 1437, 670, 281, 808, 493, 365, 411, 264, 8820, 300, 286, 767, 841], "temperature": 0.0, "avg_logprob": -0.2239168188074133, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0391886867582798}, {"id": 2, "seek": 0, "start": 18.56, "end": 22.68, "text": " like are worth sharing and is much more than can fit into a talk, so I tried to sort of", "tokens": [411, 366, 3163, 5414, 293, 307, 709, 544, 813, 393, 3318, 666, 257, 751, 11, 370, 286, 3031, 281, 1333, 295], "temperature": 0.0, "avg_logprob": -0.2239168188074133, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0391886867582798}, {"id": 3, "seek": 0, "start": 22.68, "end": 29.8, "text": " get it down to the things that are most important to me, but if we have some space at the end", "tokens": [483, 309, 760, 281, 264, 721, 300, 366, 881, 1021, 281, 385, 11, 457, 498, 321, 362, 512, 1901, 412, 264, 917], "temperature": 0.0, "avg_logprob": -0.2239168188074133, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.0391886867582798}, {"id": 4, "seek": 2980, "start": 29.8, "end": 34.84, "text": " then we can sort of dive deeper into some of the things that I will only cover very briefly.", "tokens": [550, 321, 393, 1333, 295, 9192, 7731, 666, 512, 295, 264, 721, 300, 286, 486, 787, 2060, 588, 10515, 13], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 5, "seek": 2980, "start": 34.84, "end": 36.08, "text": " So who am I?", "tokens": [407, 567, 669, 286, 30], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 6, "seek": 2980, "start": 36.08, "end": 41.64, "text": " My name is Amin Roneha and I have been creating open source libraries for quite a while.", "tokens": [1222, 1315, 307, 2012, 259, 497, 546, 1641, 293, 286, 362, 668, 4084, 1269, 4009, 15148, 337, 1596, 257, 1339, 13], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 7, "seek": 2980, "start": 41.64, "end": 46.36, "text": " I have originally written a lot of Python code, I wrote the Flask Microphone work for", "tokens": [286, 362, 7993, 3720, 257, 688, 295, 15329, 3089, 11, 286, 4114, 264, 3235, 3863, 25642, 4977, 589, 337], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 8, "seek": 2980, "start": 46.36, "end": 52.96, "text": " Python and I have been doing open source libraries probably since I'm 17 or something, so this", "tokens": [15329, 293, 286, 362, 668, 884, 1269, 4009, 15148, 1391, 1670, 286, 478, 3282, 420, 746, 11, 370, 341], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 9, "seek": 2980, "start": 52.96, "end": 59.6, "text": " is many years of experience in some sense and I started using Rust in one form or another", "tokens": [307, 867, 924, 295, 1752, 294, 512, 2020, 293, 286, 1409, 1228, 34952, 294, 472, 1254, 420, 1071], "temperature": 0.0, "avg_logprob": -0.19562920208635, "compression_ratio": 1.6607142857142858, "no_speech_prob": 9.254482574760914e-05}, {"id": 10, "seek": 5960, "start": 59.6, "end": 64.96000000000001, "text": " almost exactly 10 years ago, so I have played with this language for really long at this", "tokens": [1920, 2293, 1266, 924, 2057, 11, 370, 286, 362, 3737, 365, 341, 2856, 337, 534, 938, 412, 341], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 11, "seek": 5960, "start": 64.96000000000001, "end": 70.68, "text": " point and so I went through some iterations of what works and what doesn't work.", "tokens": [935, 293, 370, 286, 1437, 807, 512, 36540, 295, 437, 1985, 293, 437, 1177, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 12, "seek": 5960, "start": 70.68, "end": 74.32000000000001, "text": " Commercially now I work for a company called Sentry, we are doing application monitoring", "tokens": [2432, 936, 1909, 586, 286, 589, 337, 257, 2237, 1219, 23652, 627, 11, 321, 366, 884, 3861, 11028], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 13, "seek": 5960, "start": 74.32000000000001, "end": 80.76, "text": " and crash reporting and so we use Rust there and so I'm going to share the learnings of", "tokens": [293, 8252, 10031, 293, 370, 321, 764, 34952, 456, 293, 370, 286, 478, 516, 281, 2073, 264, 2539, 82, 295], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 14, "seek": 5960, "start": 80.76, "end": 82.12, "text": " this in sort of two ways.", "tokens": [341, 294, 1333, 295, 732, 2098, 13], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 15, "seek": 5960, "start": 82.12, "end": 85.44, "text": " One is open source libraries that are there for other people to use and the other one", "tokens": [1485, 307, 1269, 4009, 15148, 300, 366, 456, 337, 661, 561, 281, 764, 293, 264, 661, 472], "temperature": 0.0, "avg_logprob": -0.13538771277075415, "compression_ratio": 1.6962962962962962, "no_speech_prob": 1.913999039970804e-05}, {"id": 16, "seek": 8544, "start": 85.44, "end": 90.03999999999999, "text": " is libraries that are to be used within the context of one specific company because some", "tokens": [307, 15148, 300, 366, 281, 312, 1143, 1951, 264, 4319, 295, 472, 2685, 2237, 570, 512], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 17, "seek": 8544, "start": 90.03999999999999, "end": 95.75999999999999, "text": " of the things that we create, the only users really are us ourselves.", "tokens": [295, 264, 721, 300, 321, 1884, 11, 264, 787, 5022, 534, 366, 505, 4175, 13], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 18, "seek": 8544, "start": 95.75999999999999, "end": 99.88, "text": " And so in terms of open source libraries that sort of feed some into this talk, I'm taking", "tokens": [400, 370, 294, 2115, 295, 1269, 4009, 15148, 300, 1333, 295, 3154, 512, 666, 341, 751, 11, 286, 478, 1940], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 19, "seek": 8544, "start": 99.88, "end": 104.2, "text": " a little bit of code from my Insta snapshot in testing library, my mini-changer template", "tokens": [257, 707, 857, 295, 3089, 490, 452, 2730, 64, 30163, 294, 4997, 6405, 11, 452, 8382, 12, 339, 3176, 12379], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 20, "seek": 8544, "start": 104.2, "end": 109.24, "text": " engine and a few others like my console library.", "tokens": [2848, 293, 257, 1326, 2357, 411, 452, 11076, 6405, 13], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 21, "seek": 8544, "start": 109.24, "end": 115.03999999999999, "text": " Okay, so this is a quote that I read a couple of months ago and it's not so important but", "tokens": [1033, 11, 370, 341, 307, 257, 6513, 300, 286, 1401, 257, 1916, 295, 2493, 2057, 293, 309, 311, 406, 370, 1021, 457], "temperature": 0.0, "avg_logprob": -0.18805318000989082, "compression_ratio": 1.6914893617021276, "no_speech_prob": 5.0382390327285975e-05}, {"id": 22, "seek": 11504, "start": 115.04, "end": 117.4, "text": " it really bothered me.", "tokens": [309, 534, 22996, 385, 13], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 23, "seek": 11504, "start": 117.4, "end": 123.12, "text": " It was a comment to an open source library written in Rust that more or less made a", "tokens": [467, 390, 257, 2871, 281, 364, 1269, 4009, 6405, 3720, 294, 34952, 300, 544, 420, 1570, 1027, 257], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 24, "seek": 11504, "start": 123.12, "end": 130.36, "text": " statement that defaults shouldn't exist and people should think really, really hard to", "tokens": [5629, 300, 7576, 82, 4659, 380, 2514, 293, 561, 820, 519, 534, 11, 534, 1152, 281], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 25, "seek": 11504, "start": 130.36, "end": 134.68, "text": " spend the mental capacity of understanding what they should be doing, picking defaults", "tokens": [3496, 264, 4973, 6042, 295, 3701, 437, 436, 820, 312, 884, 11, 8867, 7576, 82], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 26, "seek": 11504, "start": 134.68, "end": 140.0, "text": " blindly is a mistake and I don't subscribe to this at all because I believe that it's", "tokens": [47744, 307, 257, 6146, 293, 286, 500, 380, 3022, 281, 341, 412, 439, 570, 286, 1697, 300, 309, 311], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 27, "seek": 11504, "start": 140.0, "end": 143.52, "text": " the responsibility of a library author to make sure that the defaults are the best that", "tokens": [264, 6357, 295, 257, 6405, 3793, 281, 652, 988, 300, 264, 7576, 82, 366, 264, 1151, 300], "temperature": 0.0, "avg_logprob": -0.12790347979618952, "compression_ratio": 1.752895752895753, "no_speech_prob": 8.126373722916469e-05}, {"id": 28, "seek": 14352, "start": 143.52, "end": 150.08, "text": " you can possibly take and the way I would think of this is you can think of creating", "tokens": [291, 393, 6264, 747, 293, 264, 636, 286, 576, 519, 295, 341, 307, 291, 393, 519, 295, 4084], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 29, "seek": 14352, "start": 150.08, "end": 153.68, "text": " a library or an API as if you're building a business.", "tokens": [257, 6405, 420, 364, 9362, 382, 498, 291, 434, 2390, 257, 1606, 13], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 30, "seek": 14352, "start": 153.68, "end": 158.12, "text": " You have some sort of success criteria and you can measure yourself against this success", "tokens": [509, 362, 512, 1333, 295, 2245, 11101, 293, 291, 393, 3481, 1803, 1970, 341, 2245], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 31, "seek": 14352, "start": 158.12, "end": 163.64000000000001, "text": " criteria and I don't think the success criteria should ever be to confuse your user as much", "tokens": [11101, 293, 286, 500, 380, 519, 264, 2245, 11101, 820, 1562, 312, 281, 28584, 428, 4195, 382, 709], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 32, "seek": 14352, "start": 163.64000000000001, "end": 165.64000000000001, "text": " as possible.", "tokens": [382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 33, "seek": 14352, "start": 165.64000000000001, "end": 170.96, "text": " It should be that you measure how successful your customers are in using the API as you", "tokens": [467, 820, 312, 300, 291, 3481, 577, 4406, 428, 4581, 366, 294, 1228, 264, 9362, 382, 291], "temperature": 0.0, "avg_logprob": -0.10016326515042052, "compression_ratio": 1.8421052631578947, "no_speech_prob": 3.5326771467225626e-05}, {"id": 34, "seek": 17096, "start": 170.96, "end": 177.24, "text": " designed it, so if they do something that is not ideal, there's something you can fix", "tokens": [4761, 309, 11, 370, 498, 436, 360, 746, 300, 307, 406, 7157, 11, 456, 311, 746, 291, 393, 3191], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 35, "seek": 17096, "start": 177.24, "end": 181.84, "text": " and the second thing is then they will typically use your API to build a product themselves,", "tokens": [293, 264, 1150, 551, 307, 550, 436, 486, 5850, 764, 428, 9362, 281, 1322, 257, 1674, 2969, 11], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 36, "seek": 17096, "start": 181.84, "end": 185.92000000000002, "text": " to solve a problem themselves and the quality of the output that the user then produces", "tokens": [281, 5039, 257, 1154, 2969, 293, 264, 3125, 295, 264, 5598, 300, 264, 4195, 550, 14725], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 37, "seek": 17096, "start": 185.92000000000002, "end": 190.04000000000002, "text": " in some way is also something that you have an impact on.", "tokens": [294, 512, 636, 307, 611, 746, 300, 291, 362, 364, 2712, 322, 13], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 38, "seek": 17096, "start": 190.04000000000002, "end": 193.20000000000002, "text": " So you can kind of think of it like the percentage of users that are making the wrong or right", "tokens": [407, 291, 393, 733, 295, 519, 295, 309, 411, 264, 9668, 295, 5022, 300, 366, 1455, 264, 2085, 420, 558], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 39, "seek": 17096, "start": 193.20000000000002, "end": 199.56, "text": " choices is the dial that you can sort of try to dial.", "tokens": [7994, 307, 264, 5502, 300, 291, 393, 1333, 295, 853, 281, 5502, 13], "temperature": 0.0, "avg_logprob": -0.16025323783401893, "compression_ratio": 1.8192307692307692, "no_speech_prob": 3.4737448004307225e-05}, {"id": 40, "seek": 19956, "start": 199.56, "end": 203.48, "text": " The problem obviously is how the hell do you measure this?", "tokens": [440, 1154, 2745, 307, 577, 264, 4921, 360, 291, 3481, 341, 30], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 41, "seek": 19956, "start": 203.48, "end": 208.6, "text": " And it's really, really hard because most of the things that you can actually measure,", "tokens": [400, 309, 311, 534, 11, 534, 1152, 570, 881, 295, 264, 721, 300, 291, 393, 767, 3481, 11], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 42, "seek": 19956, "start": 208.6, "end": 214.88, "text": " they don't really show up in useful things, so you can define the success criteria and", "tokens": [436, 500, 380, 534, 855, 493, 294, 4420, 721, 11, 370, 291, 393, 6964, 264, 2245, 11101, 293], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 43, "seek": 19956, "start": 214.88, "end": 220.88, "text": " I think a lot of people do this in some way subconsciously, but they absolutely have no", "tokens": [286, 519, 257, 688, 295, 561, 360, 341, 294, 512, 636, 27389, 356, 11, 457, 436, 3122, 362, 572], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 44, "seek": 19956, "start": 220.88, "end": 221.88, "text": " way to measure it.", "tokens": [636, 281, 3481, 309, 13], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 45, "seek": 19956, "start": 221.88, "end": 224.24, "text": " I don't have a way to measure most of those things.", "tokens": [286, 500, 380, 362, 257, 636, 281, 3481, 881, 295, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 46, "seek": 19956, "start": 224.24, "end": 227.04, "text": " So the only thing you can do in the beginning is measure yourself, so you treat yourself", "tokens": [407, 264, 787, 551, 291, 393, 360, 294, 264, 2863, 307, 3481, 1803, 11, 370, 291, 2387, 1803], "temperature": 0.0, "avg_logprob": -0.12960164687212775, "compression_ratio": 1.8604651162790697, "no_speech_prob": 2.388765278737992e-05}, {"id": 47, "seek": 22704, "start": 227.04, "end": 233.79999999999998, "text": " as the first user, horrible sample size, but you can sort of figure out like as you are", "tokens": [382, 264, 700, 4195, 11, 9263, 6889, 2744, 11, 457, 291, 393, 1333, 295, 2573, 484, 411, 382, 291, 366], "temperature": 0.0, "avg_logprob": -0.16825437116193342, "compression_ratio": 1.65234375, "no_speech_prob": 5.5208216508617625e-05}, {"id": 48, "seek": 22704, "start": 233.79999999999998, "end": 239.56, "text": " using your own stuff, does it do what you think it does?", "tokens": [1228, 428, 1065, 1507, 11, 775, 309, 360, 437, 291, 519, 309, 775, 30], "temperature": 0.0, "avg_logprob": -0.16825437116193342, "compression_ratio": 1.65234375, "no_speech_prob": 5.5208216508617625e-05}, {"id": 49, "seek": 22704, "start": 239.56, "end": 244.35999999999999, "text": " And then every time you sort of hate the experience, at least write down like it didn't like this.", "tokens": [400, 550, 633, 565, 291, 1333, 295, 4700, 264, 1752, 11, 412, 1935, 2464, 760, 411, 309, 994, 380, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.16825437116193342, "compression_ratio": 1.65234375, "no_speech_prob": 5.5208216508617625e-05}, {"id": 50, "seek": 22704, "start": 244.35999999999999, "end": 248.48, "text": " So it's a good start, but the problem is you're really flying blind, there's no good way to", "tokens": [407, 309, 311, 257, 665, 722, 11, 457, 264, 1154, 307, 291, 434, 534, 7137, 6865, 11, 456, 311, 572, 665, 636, 281], "temperature": 0.0, "avg_logprob": -0.16825437116193342, "compression_ratio": 1.65234375, "no_speech_prob": 5.5208216508617625e-05}, {"id": 51, "seek": 22704, "start": 248.48, "end": 256.08, "text": " measure this and this is not unique to Rust, this is the fact most of the time it works", "tokens": [3481, 341, 293, 341, 307, 406, 3845, 281, 34952, 11, 341, 307, 264, 1186, 881, 295, 264, 565, 309, 1985], "temperature": 0.0, "avg_logprob": -0.16825437116193342, "compression_ratio": 1.65234375, "no_speech_prob": 5.5208216508617625e-05}, {"id": 52, "seek": 25608, "start": 256.08, "end": 258.59999999999997, "text": " like this.", "tokens": [411, 341, 13], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 53, "seek": 25608, "start": 258.59999999999997, "end": 262.44, "text": " But in terms of API design, I think we have learned in other environments that there's", "tokens": [583, 294, 2115, 295, 9362, 1715, 11, 286, 519, 321, 362, 3264, 294, 661, 12388, 300, 456, 311], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 54, "seek": 25608, "start": 262.44, "end": 267.28, "text": " actually a lot of stuff to measure, so if you were to create an HTTP library, a lot", "tokens": [767, 257, 688, 295, 1507, 281, 3481, 11, 370, 498, 291, 645, 281, 1884, 364, 33283, 6405, 11, 257, 688], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 55, "seek": 25608, "start": 267.28, "end": 273.24, "text": " of companies are trying to figure out how often do the users that hit the APIs do the", "tokens": [295, 3431, 366, 1382, 281, 2573, 484, 577, 2049, 360, 264, 5022, 300, 2045, 264, 21445, 360, 264], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 56, "seek": 25608, "start": 273.24, "end": 277.4, "text": " things that they don't want them to do, for instance, because they create bad load patterns", "tokens": [721, 300, 436, 500, 380, 528, 552, 281, 360, 11, 337, 5197, 11, 570, 436, 1884, 1578, 3677, 8294], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 57, "seek": 25608, "start": 277.4, "end": 282.36, "text": " or because they just generally hit the API in ways that is not efficient and they're", "tokens": [420, 570, 436, 445, 5101, 2045, 264, 9362, 294, 2098, 300, 307, 406, 7148, 293, 436, 434], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 58, "seek": 25608, "start": 282.36, "end": 285.2, "text": " trying to figure out like how do we optimize so that the user actually does the thing that", "tokens": [1382, 281, 2573, 484, 411, 577, 360, 321, 19719, 370, 300, 264, 4195, 767, 775, 264, 551, 300], "temperature": 0.0, "avg_logprob": -0.12749994263168454, "compression_ratio": 1.8074324324324325, "no_speech_prob": 1.9172384781995788e-05}, {"id": 59, "seek": 28520, "start": 285.2, "end": 286.2, "text": " you want.", "tokens": [291, 528, 13], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 60, "seek": 28520, "start": 286.2, "end": 289.96, "text": " And this works if you run a service because you can see what everybody is doing.", "tokens": [400, 341, 1985, 498, 291, 1190, 257, 2643, 570, 291, 393, 536, 437, 2201, 307, 884, 13], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 61, "seek": 28520, "start": 289.96, "end": 294.4, "text": " You can't really see anything that the developer is doing in your Rust library.", "tokens": [509, 393, 380, 534, 536, 1340, 300, 264, 10754, 307, 884, 294, 428, 34952, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 62, "seek": 28520, "start": 294.4, "end": 298.12, "text": " The only numbers that we have for download statistics which are really pointless because", "tokens": [440, 787, 3547, 300, 321, 362, 337, 5484, 12523, 597, 366, 534, 32824, 570], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 63, "seek": 28520, "start": 298.12, "end": 303.0, "text": " they're heavily skewed towards libraries that are used by other libraries, so you can build", "tokens": [436, 434, 10950, 8756, 26896, 3030, 15148, 300, 366, 1143, 538, 661, 15148, 11, 370, 291, 393, 1322], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 64, "seek": 28520, "start": 303.0, "end": 308.03999999999996, "text": " the most amazing library ever to build an application, but if there's only ever application", "tokens": [264, 881, 2243, 6405, 1562, 281, 1322, 364, 3861, 11, 457, 498, 456, 311, 787, 1562, 3861], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 65, "seek": 28520, "start": 308.03999999999996, "end": 310.76, "text": " developers that are going to download this library, you're never going to accumulate", "tokens": [8849, 300, 366, 516, 281, 5484, 341, 6405, 11, 291, 434, 1128, 516, 281, 33384], "temperature": 0.0, "avg_logprob": -0.1321636808329615, "compression_ratio": 1.8657243816254416, "no_speech_prob": 4.00069220631849e-05}, {"id": 66, "seek": 31076, "start": 310.76, "end": 315.52, "text": " a lot of download statistics because most of the download statistics come from either", "tokens": [257, 688, 295, 5484, 12523, 570, 881, 295, 264, 5484, 12523, 808, 490, 2139], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 67, "seek": 31076, "start": 315.52, "end": 318.68, "text": " CI and very few people actually download the code to run on a desktop.", "tokens": [37777, 293, 588, 1326, 561, 767, 5484, 264, 3089, 281, 1190, 322, 257, 14502, 13], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 68, "seek": 31076, "start": 318.68, "end": 323.03999999999996, "text": " So if you have 100 developers, they're going to pull this once each usually and then it's", "tokens": [407, 498, 291, 362, 2319, 8849, 11, 436, 434, 516, 281, 2235, 341, 1564, 1184, 2673, 293, 550, 309, 311], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 69, "seek": 31076, "start": 323.03999999999996, "end": 324.24, "text": " cached on the machine.", "tokens": [269, 15095, 322, 264, 3479, 13], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 70, "seek": 31076, "start": 324.24, "end": 328.12, "text": " The download numbers come from CI, so it's only this dependencies of dependencies that", "tokens": [440, 5484, 3547, 808, 490, 37777, 11, 370, 309, 311, 787, 341, 36606, 295, 36606, 300], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 71, "seek": 31076, "start": 328.12, "end": 331.92, "text": " are actually ending up driving those numbers, and so they can be demotivating in some sense", "tokens": [366, 767, 8121, 493, 4840, 729, 3547, 11, 293, 370, 436, 393, 312, 1371, 310, 592, 990, 294, 512, 2020], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 72, "seek": 31076, "start": 331.92, "end": 336.48, "text": " and they're definitely not that useful, so you can't really track anything sensible in", "tokens": [293, 436, 434, 2138, 406, 300, 4420, 11, 370, 291, 393, 380, 534, 2837, 1340, 25380, 294], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 73, "seek": 31076, "start": 336.48, "end": 339.56, "text": " terms of adoption just by the download numbers.", "tokens": [2115, 295, 19215, 445, 538, 264, 5484, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1927271807635272, "compression_ratio": 1.821875, "no_speech_prob": 2.4266690161312e-05}, {"id": 74, "seek": 33956, "start": 339.56, "end": 343.92, "text": " So the first feedback you're probably going to get is some form of frustration, so it's", "tokens": [407, 264, 700, 5824, 291, 434, 1391, 516, 281, 483, 307, 512, 1254, 295, 20491, 11, 370, 309, 311], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 75, "seek": 33956, "start": 343.92, "end": 347.96, "text": " usually bug reports or it's someone internally telling you that this thing is really inconvenient", "tokens": [2673, 7426, 7122, 420, 309, 311, 1580, 19501, 3585, 291, 300, 341, 551, 307, 534, 46196], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 76, "seek": 33956, "start": 347.96, "end": 348.96, "text": " to use.", "tokens": [281, 764, 13], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 77, "seek": 33956, "start": 348.96, "end": 353.4, "text": " In some ways, you have to prompt them to actually tell you that, but you can kind of do it like", "tokens": [682, 512, 2098, 11, 291, 362, 281, 12391, 552, 281, 767, 980, 291, 300, 11, 457, 291, 393, 733, 295, 360, 309, 411], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 78, "seek": 33956, "start": 353.4, "end": 359.56, "text": " use a service in interviews to figure out like, do people like this, and you kind of", "tokens": [764, 257, 2643, 294, 12318, 281, 2573, 484, 411, 11, 360, 561, 411, 341, 11, 293, 291, 733, 295], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 79, "seek": 33956, "start": 359.56, "end": 363.2, "text": " usually don't get people to reply to service, so one other way to sort of solicit feedback", "tokens": [2673, 500, 380, 483, 561, 281, 16972, 281, 2643, 11, 370, 472, 661, 636, 281, 1333, 295, 23665, 270, 5824], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 80, "seek": 33956, "start": 363.2, "end": 368.28, "text": " out of people is you take this issue request, ignore it entirely almost, and you go back", "tokens": [484, 295, 561, 307, 291, 747, 341, 2734, 5308, 11, 11200, 309, 7696, 1920, 11, 293, 291, 352, 646], "temperature": 0.0, "avg_logprob": -0.14966593141909, "compression_ratio": 1.8528428093645486, "no_speech_prob": 2.614943696244154e-05}, {"id": 81, "seek": 36828, "start": 368.28, "end": 373.11999999999995, "text": " to why did they submit this in the first place, and they try to ask that question, because", "tokens": [281, 983, 630, 436, 10315, 341, 294, 264, 700, 1081, 11, 293, 436, 853, 281, 1029, 300, 1168, 11, 570], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 82, "seek": 36828, "start": 373.11999999999995, "end": 379.96, "text": " quite often when they submit a bug report, they're already down a really weird path anyways.", "tokens": [1596, 2049, 562, 436, 10315, 257, 7426, 2275, 11, 436, 434, 1217, 760, 257, 534, 3657, 3100, 13448, 13], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 83, "seek": 36828, "start": 379.96, "end": 382.55999999999995, "text": " Maybe you can take them on a higher level and figure out why did they even try to do", "tokens": [2704, 291, 393, 747, 552, 322, 257, 2946, 1496, 293, 2573, 484, 983, 630, 436, 754, 853, 281, 360], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 84, "seek": 36828, "start": 382.55999999999995, "end": 383.55999999999995, "text": " this.", "tokens": [341, 13], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 85, "seek": 36828, "start": 383.55999999999995, "end": 388.11999999999995, "text": " I mean, when they do a feature request, bug report is less so.", "tokens": [286, 914, 11, 562, 436, 360, 257, 4111, 5308, 11, 7426, 2275, 307, 1570, 370, 13], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 86, "seek": 36828, "start": 388.11999999999995, "end": 392.84, "text": " So as mentioned, it's really hard to measure, and so because it's really hard to measure,", "tokens": [407, 382, 2835, 11, 309, 311, 534, 1152, 281, 3481, 11, 293, 370, 570, 309, 311, 534, 1152, 281, 3481, 11], "temperature": 0.0, "avg_logprob": -0.2053600517479149, "compression_ratio": 1.7941176470588236, "no_speech_prob": 2.173444227082655e-05}, {"id": 87, "seek": 39284, "start": 392.84, "end": 398.32, "text": " a second thing that you can sort of use is trying to figure out like, okay, if you think", "tokens": [257, 1150, 551, 300, 291, 393, 1333, 295, 764, 307, 1382, 281, 2573, 484, 411, 11, 1392, 11, 498, 291, 519], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 88, "seek": 39284, "start": 398.32, "end": 402.32, "text": " this is worth measuring, what is it that this number actually represents?", "tokens": [341, 307, 3163, 13389, 11, 437, 307, 309, 300, 341, 1230, 767, 8855, 30], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 89, "seek": 39284, "start": 402.32, "end": 407.03999999999996, "text": " This is typically some sort of values, and so these are the ones that I find are important", "tokens": [639, 307, 5850, 512, 1333, 295, 4190, 11, 293, 370, 613, 366, 264, 2306, 300, 286, 915, 366, 1021], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 90, "seek": 39284, "start": 407.03999999999996, "end": 408.03999999999996, "text": " to me.", "tokens": [281, 385, 13], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 91, "seek": 39284, "start": 408.03999999999996, "end": 411.91999999999996, "text": " They're probably not necessarily important for everybody else, but I felt like over", "tokens": [814, 434, 1391, 406, 4725, 1021, 337, 2201, 1646, 11, 457, 286, 2762, 411, 670], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 92, "seek": 39284, "start": 411.91999999999996, "end": 414.08, "text": " the years I can get behind those.", "tokens": [264, 924, 286, 393, 483, 2261, 729, 13], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 93, "seek": 39284, "start": 414.08, "end": 418.76, "text": " So the first one is I think the hello world of your library should be relatively concise,", "tokens": [407, 264, 700, 472, 307, 286, 519, 264, 7751, 1002, 295, 428, 6405, 820, 312, 7226, 44882, 11], "temperature": 0.0, "avg_logprob": -0.16520476759525768, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.0440002117538825e-05}, {"id": 94, "seek": 41876, "start": 418.76, "end": 423.71999999999997, "text": " so it should be easy enough to get started, to some degree this is simplifying onboarding,", "tokens": [370, 309, 820, 312, 1858, 1547, 281, 483, 1409, 11, 281, 512, 4314, 341, 307, 6883, 5489, 24033, 278, 11], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 95, "seek": 41876, "start": 423.71999999999997, "end": 432.59999999999997, "text": " but to another one it's also that the less stuff there is, the easier it is to maintain", "tokens": [457, 281, 1071, 472, 309, 311, 611, 300, 264, 1570, 1507, 456, 307, 11, 264, 3571, 309, 307, 281, 6909], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 96, "seek": 41876, "start": 432.59999999999997, "end": 436.4, "text": " the whole thing overall, or gotten to this a little bit.", "tokens": [264, 1379, 551, 4787, 11, 420, 5768, 281, 341, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 97, "seek": 41876, "start": 436.4, "end": 440.0, "text": " This also leads towards good defaults, ideally you don't have to copy paste five lines of", "tokens": [639, 611, 6689, 3030, 665, 7576, 82, 11, 22915, 291, 500, 380, 362, 281, 5055, 9163, 1732, 3876, 295], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 98, "seek": 41876, "start": 440.0, "end": 442.96, "text": " code in if a single line of code does.", "tokens": [3089, 294, 498, 257, 2167, 1622, 295, 3089, 775, 13], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 99, "seek": 41876, "start": 442.96, "end": 446.8, "text": " The smaller the surface area of a library actually is at the end of the day, the easier", "tokens": [440, 4356, 264, 3753, 1859, 295, 257, 6405, 767, 307, 412, 264, 917, 295, 264, 786, 11, 264, 3571], "temperature": 0.0, "avg_logprob": -0.1404462897259256, "compression_ratio": 1.7056603773584906, "no_speech_prob": 2.4583676349720918e-05}, {"id": 100, "seek": 44680, "start": 446.8, "end": 451.84000000000003, "text": " you have in terms of maintenance and also in the ability to do modifications over time.", "tokens": [291, 362, 294, 2115, 295, 11258, 293, 611, 294, 264, 3485, 281, 360, 26881, 670, 565, 13], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 101, "seek": 44680, "start": 451.84000000000003, "end": 455.52000000000004, "text": " Because the more API you expose, the higher the chance that you're going to break something,", "tokens": [1436, 264, 544, 9362, 291, 19219, 11, 264, 2946, 264, 2931, 300, 291, 434, 516, 281, 1821, 746, 11], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 102, "seek": 44680, "start": 455.52000000000004, "end": 457.64, "text": " and I don't like breaking things.", "tokens": [293, 286, 500, 380, 411, 7697, 721, 13], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 103, "seek": 44680, "start": 457.64, "end": 460.40000000000003, "text": " I think backwards compatibility is really important.", "tokens": [286, 519, 12204, 34237, 307, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 104, "seek": 44680, "start": 460.40000000000003, "end": 463.48, "text": " I hate the idea of unnecessary churn.", "tokens": [286, 4700, 264, 1558, 295, 19350, 417, 925, 13], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 105, "seek": 44680, "start": 463.48, "end": 469.12, "text": " I've been part of the Python 2 to Python 3 migration thing, and it was horrible, and", "tokens": [286, 600, 668, 644, 295, 264, 15329, 568, 281, 15329, 805, 17011, 551, 11, 293, 309, 390, 9263, 11, 293], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 106, "seek": 44680, "start": 469.12, "end": 472.24, "text": " it was particularly horrible because a lot of people that really liked the language,", "tokens": [309, 390, 4098, 9263, 570, 257, 688, 295, 561, 300, 534, 4501, 264, 2856, 11], "temperature": 0.0, "avg_logprob": -0.17304047516414098, "compression_ratio": 1.70863309352518, "no_speech_prob": 4.124751649214886e-05}, {"id": 107, "seek": 47224, "start": 472.24, "end": 477.32, "text": " as I've included, got stuck on Python 2 for a really long time because we used it in a", "tokens": [382, 286, 600, 5556, 11, 658, 5541, 322, 15329, 568, 337, 257, 534, 938, 565, 570, 321, 1143, 309, 294, 257], "temperature": 0.0, "avg_logprob": -0.1580195300346982, "compression_ratio": 1.7234848484848484, "no_speech_prob": 5.113997758598998e-05}, {"id": 108, "seek": 47224, "start": 477.32, "end": 481.84000000000003, "text": " commercial context, we used it for large projects, and those were the ones that moved the slowest.", "tokens": [6841, 4319, 11, 321, 1143, 309, 337, 2416, 4455, 11, 293, 729, 645, 264, 2306, 300, 4259, 264, 2964, 377, 13], "temperature": 0.0, "avg_logprob": -0.1580195300346982, "compression_ratio": 1.7234848484848484, "no_speech_prob": 5.113997758598998e-05}, {"id": 109, "seek": 47224, "start": 481.84000000000003, "end": 488.36, "text": " You had a lot of power users stuck on an old version that actually used it in a quite", "tokens": [509, 632, 257, 688, 295, 1347, 5022, 5541, 322, 364, 1331, 3037, 300, 767, 1143, 309, 294, 257, 1596], "temperature": 0.0, "avg_logprob": -0.1580195300346982, "compression_ratio": 1.7234848484848484, "no_speech_prob": 5.113997758598998e-05}, {"id": 110, "seek": 47224, "start": 488.36, "end": 494.24, "text": " extensive context, and it took us a couple of years to move, and while we couldn't move", "tokens": [13246, 4319, 11, 293, 309, 1890, 505, 257, 1916, 295, 924, 281, 1286, 11, 293, 1339, 321, 2809, 380, 1286], "temperature": 0.0, "avg_logprob": -0.1580195300346982, "compression_ratio": 1.7234848484848484, "no_speech_prob": 5.113997758598998e-05}, {"id": 111, "seek": 47224, "start": 494.24, "end": 499.08, "text": " or we could only play with it in small experiments, the language kept innovating, and all those", "tokens": [420, 321, 727, 787, 862, 365, 309, 294, 1359, 12050, 11, 264, 2856, 4305, 5083, 990, 11, 293, 439, 729], "temperature": 0.0, "avg_logprob": -0.1580195300346982, "compression_ratio": 1.7234848484848484, "no_speech_prob": 5.113997758598998e-05}, {"id": 112, "seek": 49908, "start": 499.08, "end": 503.8, "text": " innovations were unable to be used by the people that previously were really engaged", "tokens": [24283, 645, 11299, 281, 312, 1143, 538, 264, 561, 300, 8046, 645, 534, 8237], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 113, "seek": 49908, "start": 503.8, "end": 505.8, "text": " in their thing.", "tokens": [294, 641, 551, 13], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 114, "seek": 49908, "start": 505.8, "end": 510.59999999999997, "text": " I don't like the idea of letting people behind, so the easier the migration path is forward,", "tokens": [286, 500, 380, 411, 264, 1558, 295, 8295, 561, 2261, 11, 370, 264, 3571, 264, 17011, 3100, 307, 2128, 11], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 115, "seek": 49908, "start": 510.59999999999997, "end": 515.36, "text": " the fewer people are going to leave behind on all the versions.", "tokens": [264, 13366, 561, 366, 516, 281, 1856, 2261, 322, 439, 264, 9606, 13], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 116, "seek": 49908, "start": 515.36, "end": 519.52, "text": " In a way, my goal is to keep people on the golden path.", "tokens": [682, 257, 636, 11, 452, 3387, 307, 281, 1066, 561, 322, 264, 9729, 3100, 13], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 117, "seek": 49908, "start": 519.52, "end": 520.52, "text": " What's the golden path?", "tokens": [708, 311, 264, 9729, 3100, 30], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 118, "seek": 49908, "start": 520.52, "end": 525.0, "text": " It's the idea that you have an idea of how people should be building stuff.", "tokens": [467, 311, 264, 1558, 300, 291, 362, 364, 1558, 295, 577, 561, 820, 312, 2390, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13667113894507998, "compression_ratio": 1.7574468085106383, "no_speech_prob": 1.88965041161282e-05}, {"id": 119, "seek": 52500, "start": 525.0, "end": 532.24, "text": " Typically, this is a thing that you do in system design, and you plot an idea for someone", "tokens": [23129, 11, 341, 307, 257, 551, 300, 291, 360, 294, 1185, 1715, 11, 293, 291, 7542, 364, 1558, 337, 1580], "temperature": 0.0, "avg_logprob": -0.13891044029822716, "compression_ratio": 1.7530364372469636, "no_speech_prob": 8.851094025885686e-05}, {"id": 120, "seek": 52500, "start": 532.24, "end": 536.64, "text": " to execute along, and this is the blessed way to doing things, and you try to get as", "tokens": [281, 14483, 2051, 11, 293, 341, 307, 264, 12351, 636, 281, 884, 721, 11, 293, 291, 853, 281, 483, 382], "temperature": 0.0, "avg_logprob": -0.13891044029822716, "compression_ratio": 1.7530364372469636, "no_speech_prob": 8.851094025885686e-05}, {"id": 121, "seek": 52500, "start": 536.64, "end": 541.24, "text": " many people as possible on this golden path, but libraries have the same thing.", "tokens": [867, 561, 382, 1944, 322, 341, 9729, 3100, 11, 457, 15148, 362, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.13891044029822716, "compression_ratio": 1.7530364372469636, "no_speech_prob": 8.851094025885686e-05}, {"id": 122, "seek": 52500, "start": 541.24, "end": 547.32, "text": " If you want to build a security library, for instance, like an encryption standard library,", "tokens": [759, 291, 528, 281, 1322, 257, 3825, 6405, 11, 337, 5197, 11, 411, 364, 29575, 3832, 6405, 11], "temperature": 0.0, "avg_logprob": -0.13891044029822716, "compression_ratio": 1.7530364372469636, "no_speech_prob": 8.851094025885686e-05}, {"id": 123, "seek": 52500, "start": 547.32, "end": 550.56, "text": " there are many ways to build the wrong one, where you give people so many choices that", "tokens": [456, 366, 867, 2098, 281, 1322, 264, 2085, 472, 11, 689, 291, 976, 561, 370, 867, 7994, 300], "temperature": 0.0, "avg_logprob": -0.13891044029822716, "compression_ratio": 1.7530364372469636, "no_speech_prob": 8.851094025885686e-05}, {"id": 124, "seek": 55056, "start": 550.56, "end": 555.4799999999999, "text": " they have no sensible way to being sure that they are on the one that actually does the", "tokens": [436, 362, 572, 25380, 636, 281, 885, 988, 300, 436, 366, 322, 264, 472, 300, 767, 775, 264], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 125, "seek": 55056, "start": 555.4799999999999, "end": 557.68, "text": " right thing.", "tokens": [558, 551, 13], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 126, "seek": 55056, "start": 557.68, "end": 560.8, "text": " But the problem with the golden path is that it will change over time.", "tokens": [583, 264, 1154, 365, 264, 9729, 3100, 307, 300, 309, 486, 1319, 670, 565, 13], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 127, "seek": 55056, "start": 560.8, "end": 563.92, "text": " What is correct today might not necessarily be correct in two years.", "tokens": [708, 307, 3006, 965, 1062, 406, 4725, 312, 3006, 294, 732, 924, 13], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 128, "seek": 55056, "start": 563.92, "end": 569.28, "text": " To go back to the security thing, at one point, we recommended everybody MD5, and then that", "tokens": [1407, 352, 646, 281, 264, 3825, 551, 11, 412, 472, 935, 11, 321, 9628, 2201, 22521, 20, 11, 293, 550, 300], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 129, "seek": 55056, "start": 569.28, "end": 573.1199999999999, "text": " was not a good idea anymore, so at the very least, it should be SHA-1 hashes, and now obviously", "tokens": [390, 406, 257, 665, 1558, 3602, 11, 370, 412, 264, 588, 1935, 11, 309, 820, 312, 38820, 12, 16, 575, 8076, 11, 293, 586, 2745], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 130, "seek": 55056, "start": 573.1199999999999, "end": 575.1999999999999, "text": " we don't want that anymore.", "tokens": [321, 500, 380, 528, 300, 3602, 13], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 131, "seek": 55056, "start": 575.1999999999999, "end": 579.28, "text": " The problem with this is that a lot of things change over time, and so if you create, for", "tokens": [440, 1154, 365, 341, 307, 300, 257, 688, 295, 721, 1319, 670, 565, 11, 293, 370, 498, 291, 1884, 11, 337], "temperature": 0.0, "avg_logprob": -0.16217018019223045, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.4765005693770945e-05}, {"id": 132, "seek": 57928, "start": 579.28, "end": 585.4399999999999, "text": " instance, a library that wants to make a choice for a user, but it's designed in a way that", "tokens": [5197, 11, 257, 6405, 300, 2738, 281, 652, 257, 3922, 337, 257, 4195, 11, 457, 309, 311, 4761, 294, 257, 636, 300], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 133, "seek": 57928, "start": 585.4399999999999, "end": 591.56, "text": " that choice can never be changed on the fear of breaking code to some degree, and then", "tokens": [300, 3922, 393, 1128, 312, 3105, 322, 264, 4240, 295, 7697, 3089, 281, 512, 4314, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 134, "seek": 57928, "start": 591.56, "end": 595.4, "text": " you did something wrong in the sign origin already.", "tokens": [291, 630, 746, 2085, 294, 264, 1465, 4957, 1217, 13], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 135, "seek": 57928, "start": 595.4, "end": 600.72, "text": " Some change requires adjustment by users, and that's really hard to do, so if you have", "tokens": [2188, 1319, 7029, 17132, 538, 5022, 11, 293, 300, 311, 534, 1152, 281, 360, 11, 370, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 136, "seek": 57928, "start": 600.72, "end": 604.92, "text": " some sort of golden path, you can figure out how many people are on that, versus the thing", "tokens": [512, 1333, 295, 9729, 3100, 11, 291, 393, 2573, 484, 577, 867, 561, 366, 322, 300, 11, 5717, 264, 551], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 137, "seek": 57928, "start": 604.92, "end": 609.12, "text": " that you don't want them to do anymore, and again, measuring is almost impossible, but", "tokens": [300, 291, 500, 380, 528, 552, 281, 360, 3602, 11, 293, 797, 11, 13389, 307, 1920, 6243, 11, 457], "temperature": 0.0, "avg_logprob": -0.14977184670870422, "compression_ratio": 1.7307692307692308, "no_speech_prob": 2.5031678887899034e-05}, {"id": 138, "seek": 60912, "start": 609.12, "end": 614.96, "text": " one way you can do that is if you are building a library where you think other libraries are", "tokens": [472, 636, 291, 393, 360, 300, 307, 498, 291, 366, 2390, 257, 6405, 689, 291, 519, 661, 15148, 366], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 139, "seek": 60912, "start": 614.96, "end": 618.88, "text": " going to use that, you can use something like a GitHub code search to figure out how many", "tokens": [516, 281, 764, 300, 11, 291, 393, 764, 746, 411, 257, 23331, 3089, 3164, 281, 2573, 484, 577, 867], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 140, "seek": 60912, "start": 618.88, "end": 621.36, "text": " people still use the deprecated pattern.", "tokens": [561, 920, 764, 264, 1367, 13867, 770, 5102, 13], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 141, "seek": 60912, "start": 621.36, "end": 626.64, "text": " You can also leverage dependabot quite a bit to figure out how many people that actually", "tokens": [509, 393, 611, 13982, 5672, 455, 310, 1596, 257, 857, 281, 2573, 484, 577, 867, 561, 300, 767], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 142, "seek": 60912, "start": 626.64, "end": 631.68, "text": " are getting a dependabot update are going through with the update versus not.", "tokens": [366, 1242, 257, 5672, 455, 310, 5623, 366, 516, 807, 365, 264, 5623, 5717, 406, 13], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 143, "seek": 60912, "start": 631.68, "end": 637.28, "text": " Okay, so defaults matter.", "tokens": [1033, 11, 370, 7576, 82, 1871, 13], "temperature": 0.0, "avg_logprob": -0.14390101152307846, "compression_ratio": 1.793103448275862, "no_speech_prob": 1.2018796041957103e-05}, {"id": 144, "seek": 63728, "start": 637.28, "end": 642.04, "text": " As mentioned earlier, I'm a strong believer in there should be good defaults, and I think", "tokens": [1018, 2835, 3071, 11, 286, 478, 257, 2068, 23892, 294, 456, 820, 312, 665, 7576, 82, 11, 293, 286, 519], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 145, "seek": 63728, "start": 642.04, "end": 643.68, "text": " defaults really come in two choices.", "tokens": [7576, 82, 534, 808, 294, 732, 7994, 13], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 146, "seek": 63728, "start": 643.68, "end": 647.6, "text": " One default is the absolute default.", "tokens": [1485, 7576, 307, 264, 8236, 7576, 13], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 147, "seek": 63728, "start": 647.6, "end": 651.6, "text": " You're never going to change the default of a U32 integer to be anything other than zero", "tokens": [509, 434, 1128, 516, 281, 1319, 264, 7576, 295, 257, 624, 11440, 24922, 281, 312, 1340, 661, 813, 4018], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 148, "seek": 63728, "start": 651.6, "end": 652.6, "text": " and rust.", "tokens": [293, 15259, 13], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 149, "seek": 63728, "start": 652.6, "end": 655.8, "text": " There wouldn't even be a discussion about it to change it to one, right?", "tokens": [821, 2759, 380, 754, 312, 257, 5017, 466, 309, 281, 1319, 309, 281, 472, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 150, "seek": 63728, "start": 655.8, "end": 660.92, "text": " There's an obvious default, and it's so dependent on that you just will never be able to change", "tokens": [821, 311, 364, 6322, 7576, 11, 293, 309, 311, 370, 12334, 322, 300, 291, 445, 486, 1128, 312, 1075, 281, 1319], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 151, "seek": 63728, "start": 660.92, "end": 662.92, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.15426866282587465, "compression_ratio": 1.686046511627907, "no_speech_prob": 3.165801172144711e-05}, {"id": 152, "seek": 66292, "start": 662.92, "end": 668.92, "text": " But then there are sort of defaults that are intentionally designed so that they can change", "tokens": [583, 550, 456, 366, 1333, 295, 7576, 82, 300, 366, 22062, 4761, 370, 300, 436, 393, 1319], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 153, "seek": 66292, "start": 668.92, "end": 669.92, "text": " over time.", "tokens": [670, 565, 13], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 154, "seek": 66292, "start": 669.92, "end": 677.64, "text": " For me, a good example here is the hash table in Rust or any hashing function in Rust doesn't", "tokens": [1171, 385, 11, 257, 665, 1365, 510, 307, 264, 22019, 3199, 294, 34952, 420, 604, 575, 571, 2445, 294, 34952, 1177, 380], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 155, "seek": 66292, "start": 677.64, "end": 679.92, "text": " say what hashing algorithm uses.", "tokens": [584, 437, 575, 571, 9284, 4960, 13], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 156, "seek": 66292, "start": 679.92, "end": 684.0799999999999, "text": " It defines some sort of properties around it within the boundaries of which it probably", "tokens": [467, 23122, 512, 1333, 295, 7221, 926, 309, 1951, 264, 13180, 295, 597, 309, 1391], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 157, "seek": 66292, "start": 684.0799999999999, "end": 688.8, "text": " doesn't change, but the Rust developers could come in from one day to another and switch", "tokens": [1177, 380, 1319, 11, 457, 264, 34952, 8849, 727, 808, 294, 490, 472, 786, 281, 1071, 293, 3679], "temperature": 0.0, "avg_logprob": -0.15066120028495789, "compression_ratio": 1.6707818930041152, "no_speech_prob": 5.593331025011139e-06}, {"id": 158, "seek": 68880, "start": 688.8, "end": 693.9599999999999, "text": " from SIP hash to FX hash, and most of us wouldn't notice, right?", "tokens": [490, 318, 9139, 22019, 281, 37849, 22019, 11, 293, 881, 295, 505, 2759, 380, 3449, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 159, "seek": 68880, "start": 693.9599999999999, "end": 698.12, "text": " So to enable these sort of defaults, you have to design the system around it so that these", "tokens": [407, 281, 9528, 613, 1333, 295, 7576, 82, 11, 291, 362, 281, 1715, 264, 1185, 926, 309, 370, 300, 613], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 160, "seek": 68880, "start": 698.12, "end": 702.56, "text": " can be changed, and you have to communicate to user how you're going to change them.", "tokens": [393, 312, 3105, 11, 293, 291, 362, 281, 7890, 281, 4195, 577, 291, 434, 516, 281, 1319, 552, 13], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 161, "seek": 68880, "start": 702.56, "end": 707.0, "text": " There have to be some rules and expectations around what the stability here means, but", "tokens": [821, 362, 281, 312, 512, 4474, 293, 9843, 926, 437, 264, 11826, 510, 1355, 11, 457], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 162, "seek": 68880, "start": 707.0, "end": 710.9599999999999, "text": " you should try to aim that you can actually enable this change, because otherwise you end", "tokens": [291, 820, 853, 281, 5939, 300, 291, 393, 767, 9528, 341, 1319, 11, 570, 5911, 291, 917], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 163, "seek": 68880, "start": 710.9599999999999, "end": 716.0799999999999, "text": " up in a situation where you have created an API and now you need to make a second one", "tokens": [493, 294, 257, 2590, 689, 291, 362, 2942, 364, 9362, 293, 586, 291, 643, 281, 652, 257, 1150, 472], "temperature": 0.0, "avg_logprob": -0.1415376120466527, "compression_ratio": 1.7344827586206897, "no_speech_prob": 1.2602296010300051e-05}, {"id": 164, "seek": 71608, "start": 716.08, "end": 719.0400000000001, "text": " because the old one just doesn't work anymore, and you either have to take it away, it's", "tokens": [570, 264, 1331, 472, 445, 1177, 380, 589, 3602, 11, 293, 291, 2139, 362, 281, 747, 309, 1314, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 165, "seek": 71608, "start": 719.0400000000001, "end": 721.9200000000001, "text": " going to be frustrating for user, or you have to lie about what it does.", "tokens": [516, 281, 312, 16522, 337, 4195, 11, 420, 291, 362, 281, 4544, 466, 437, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 166, "seek": 71608, "start": 721.9200000000001, "end": 725.8000000000001, "text": " There are a lot of liars out there that say, hey, my function does SIP hash, and then in", "tokens": [821, 366, 257, 688, 295, 375, 685, 484, 456, 300, 584, 11, 4177, 11, 452, 2445, 775, 318, 9139, 22019, 11, 293, 550, 294], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 167, "seek": 71608, "start": 725.8000000000001, "end": 731.1600000000001, "text": " reality it just doesn't do that anymore because they wanted people to move up, but they were", "tokens": [4103, 309, 445, 1177, 380, 360, 300, 3602, 570, 436, 1415, 561, 281, 1286, 493, 11, 457, 436, 645], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 168, "seek": 71608, "start": 731.1600000000001, "end": 734.44, "text": " afraid of breaking it.", "tokens": [4638, 295, 7697, 309, 13], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 169, "seek": 71608, "start": 734.44, "end": 737.08, "text": " So why does this work in Rust, for instance, with the hasher?", "tokens": [407, 983, 775, 341, 589, 294, 34952, 11, 337, 5197, 11, 365, 264, 575, 511, 30], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 170, "seek": 71608, "start": 737.08, "end": 741.8000000000001, "text": " Because they said, okay, this is never going to be portable, and I think this is a really", "tokens": [1436, 436, 848, 11, 1392, 11, 341, 307, 1128, 516, 281, 312, 21800, 11, 293, 286, 519, 341, 307, 257, 534], "temperature": 0.0, "avg_logprob": -0.13832696050191098, "compression_ratio": 1.7679180887372015, "no_speech_prob": 2.5454122805967927e-05}, {"id": 171, "seek": 74180, "start": 741.8, "end": 749.04, "text": " interesting part because it also enforces without saying what it is, how good it is.", "tokens": [1880, 644, 570, 309, 611, 25495, 887, 1553, 1566, 437, 309, 307, 11, 577, 665, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.13151866418344002, "compression_ratio": 1.6758893280632412, "no_speech_prob": 4.257326872902922e-05}, {"id": 172, "seek": 74180, "start": 749.04, "end": 753.52, "text": " What I mean with this is that the hasher in Rust randomizes all the time.", "tokens": [708, 286, 914, 365, 341, 307, 300, 264, 575, 511, 294, 34952, 4974, 5660, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.13151866418344002, "compression_ratio": 1.6758893280632412, "no_speech_prob": 4.257326872902922e-05}, {"id": 173, "seek": 74180, "start": 753.52, "end": 757.8, "text": " If you even try to use it in a portable way, you're going to quickly figure out that every", "tokens": [759, 291, 754, 853, 281, 764, 309, 294, 257, 21800, 636, 11, 291, 434, 516, 281, 2661, 2573, 484, 300, 633], "temperature": 0.0, "avg_logprob": -0.13151866418344002, "compression_ratio": 1.6758893280632412, "no_speech_prob": 4.257326872902922e-05}, {"id": 174, "seek": 74180, "start": 757.8, "end": 763.28, "text": " time you re-run your program, the hash is different, so you cannot even get into this", "tokens": [565, 291, 319, 12, 12997, 428, 1461, 11, 264, 22019, 307, 819, 11, 370, 291, 2644, 754, 483, 666, 341], "temperature": 0.0, "avg_logprob": -0.13151866418344002, "compression_ratio": 1.6758893280632412, "no_speech_prob": 4.257326872902922e-05}, {"id": 175, "seek": 74180, "start": 763.28, "end": 769.4399999999999, "text": " mood of trying to use it for something that's portable, and there's a really good analog", "tokens": [9268, 295, 1382, 281, 764, 309, 337, 746, 300, 311, 21800, 11, 293, 456, 311, 257, 534, 665, 16660], "temperature": 0.0, "avg_logprob": -0.13151866418344002, "compression_ratio": 1.6758893280632412, "no_speech_prob": 4.257326872902922e-05}, {"id": 176, "seek": 76944, "start": 769.44, "end": 774.48, "text": " of something like this, which is every once in a while people build programming languages,", "tokens": [295, 746, 411, 341, 11, 597, 307, 633, 1564, 294, 257, 1339, 561, 1322, 9410, 8650, 11], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 177, "seek": 76944, "start": 774.48, "end": 778.0, "text": " and I think Go went down this very same path where they said, we're going to build a garbage", "tokens": [293, 286, 519, 1037, 1437, 760, 341, 588, 912, 3100, 689, 436, 848, 11, 321, 434, 516, 281, 1322, 257, 14150], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 178, "seek": 76944, "start": 778.0, "end": 782.2, "text": " collector, and it doesn't compact right away, but it's eventually going to be a compacting", "tokens": [23960, 11, 293, 309, 1177, 380, 14679, 558, 1314, 11, 457, 309, 311, 4728, 516, 281, 312, 257, 14679, 278], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 179, "seek": 76944, "start": 782.2, "end": 783.2, "text": " garbage collector.", "tokens": [14150, 23960, 13], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 180, "seek": 76944, "start": 783.2, "end": 786.8000000000001, "text": " And the problem is if you don't start out with actually writing a compacting garbage", "tokens": [400, 264, 1154, 307, 498, 291, 500, 380, 722, 484, 365, 767, 3579, 257, 14679, 278, 14150], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 181, "seek": 76944, "start": 786.8000000000001, "end": 791.0400000000001, "text": " collector, a compacting garbage collector takes a pointer and moves it somewhere else,", "tokens": [23960, 11, 257, 14679, 278, 14150, 23960, 2516, 257, 23918, 293, 6067, 309, 4079, 1646, 11], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 182, "seek": 76944, "start": 791.0400000000001, "end": 794.0400000000001, "text": " so to compress down the heap space.", "tokens": [370, 281, 14778, 760, 264, 33591, 1901, 13], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 183, "seek": 76944, "start": 794.0400000000001, "end": 797.96, "text": " But if you never compact to begin with, people get used to this idea that the point is really", "tokens": [583, 498, 291, 1128, 14679, 281, 1841, 365, 11, 561, 483, 1143, 281, 341, 1558, 300, 264, 935, 307, 534], "temperature": 0.0, "avg_logprob": -0.14265785217285157, "compression_ratio": 1.9508196721311475, "no_speech_prob": 3.5869386920239776e-05}, {"id": 184, "seek": 79796, "start": 797.96, "end": 804.48, "text": " stable, and they will stash the pointer somewhere, and they rely on the fact that it never moves.", "tokens": [8351, 11, 293, 436, 486, 342, 1299, 264, 23918, 4079, 11, 293, 436, 10687, 322, 264, 1186, 300, 309, 1128, 6067, 13], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 185, "seek": 79796, "start": 804.48, "end": 808.24, "text": " And so at a later point, three years in, someone says, oh, now we built this awesome", "tokens": [400, 370, 412, 257, 1780, 935, 11, 1045, 924, 294, 11, 1580, 1619, 11, 1954, 11, 586, 321, 3094, 341, 3476], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 186, "seek": 79796, "start": 808.24, "end": 811.4000000000001, "text": " compacting garbage collector, but they can never turn it on because people took advantage", "tokens": [14679, 278, 14150, 23960, 11, 457, 436, 393, 1128, 1261, 309, 322, 570, 561, 1890, 5002], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 187, "seek": 79796, "start": 811.4000000000001, "end": 816.6, "text": " of the fact that there was actually a conveyance in the API that they used that wasn't supposed", "tokens": [295, 264, 1186, 300, 456, 390, 767, 257, 16965, 719, 294, 264, 9362, 300, 436, 1143, 300, 2067, 380, 3442], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 188, "seek": 79796, "start": 816.6, "end": 818.6, "text": " to be there, but it wasn't enforced.", "tokens": [281, 312, 456, 11, 457, 309, 2067, 380, 40953, 13], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 189, "seek": 79796, "start": 818.6, "end": 824.12, "text": " And so what the Rust hasher does in this sense is it always randomizes, so it already makes", "tokens": [400, 370, 437, 264, 34952, 575, 511, 775, 294, 341, 2020, 307, 309, 1009, 4974, 5660, 11, 370, 309, 1217, 1669], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 190, "seek": 79796, "start": 824.12, "end": 827.64, "text": " it so uncomfortable to use for the wrong thing that you wouldn't use it.", "tokens": [309, 370, 10532, 281, 764, 337, 264, 2085, 551, 300, 291, 2759, 380, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.10617700093229052, "compression_ratio": 1.78125, "no_speech_prob": 4.397184238769114e-05}, {"id": 191, "seek": 82764, "start": 827.64, "end": 833.12, "text": " And so if you were, for instance, to build another language with a desire to eventually", "tokens": [400, 370, 498, 291, 645, 11, 337, 5197, 11, 281, 1322, 1071, 2856, 365, 257, 7516, 281, 4728], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 192, "seek": 82764, "start": 833.12, "end": 837.24, "text": " build a compacting garbage collector into it, you would probably try to make it so uncomfortable", "tokens": [1322, 257, 14679, 278, 14150, 23960, 666, 309, 11, 291, 576, 1391, 853, 281, 652, 309, 370, 10532], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 193, "seek": 82764, "start": 837.24, "end": 841.84, "text": " to use these pointers for stashing away that it already wouldn't work in the absence of", "tokens": [281, 764, 613, 44548, 337, 342, 11077, 1314, 300, 309, 1217, 2759, 380, 589, 294, 264, 17145, 295], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 194, "seek": 82764, "start": 841.84, "end": 842.84, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 195, "seek": 82764, "start": 842.84, "end": 848.12, "text": " So I think it's a really important part to make sure that if you want to be able to create", "tokens": [407, 286, 519, 309, 311, 257, 534, 1021, 644, 281, 652, 988, 300, 498, 291, 528, 281, 312, 1075, 281, 1884], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 196, "seek": 82764, "start": 848.12, "end": 853.8, "text": " this, change the defaults, that it start from the beginning thinking, OK, how do I build", "tokens": [341, 11, 1319, 264, 7576, 82, 11, 300, 309, 722, 490, 264, 2863, 1953, 11, 2264, 11, 577, 360, 286, 1322], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 197, "seek": 82764, "start": 853.8, "end": 857.4, "text": " it so that I actually remain, keep this freedom.", "tokens": [309, 370, 300, 286, 767, 6222, 11, 1066, 341, 5645, 13], "temperature": 0.0, "avg_logprob": -0.11036981964111328, "compression_ratio": 1.7037037037037037, "no_speech_prob": 1.694677848718129e-05}, {"id": 198, "seek": 85740, "start": 857.4, "end": 859.3199999999999, "text": " And so why do I even want to change this?", "tokens": [400, 370, 983, 360, 286, 754, 528, 281, 1319, 341, 30], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 199, "seek": 85740, "start": 859.3199999999999, "end": 864.24, "text": " Well, because you have this problem of cargo-culting.", "tokens": [1042, 11, 570, 291, 362, 341, 1154, 295, 19449, 12, 66, 723, 278, 13], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 200, "seek": 85740, "start": 864.24, "end": 869.72, "text": " I have created things in the past myself where I discovered that people copy-paste the first", "tokens": [286, 362, 2942, 721, 294, 264, 1791, 2059, 689, 286, 6941, 300, 561, 5055, 12, 79, 9079, 264, 700], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 201, "seek": 85740, "start": 869.72, "end": 872.48, "text": " example from documentation over and over and over again.", "tokens": [1365, 490, 14333, 670, 293, 670, 293, 670, 797, 13], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 202, "seek": 85740, "start": 872.48, "end": 878.0799999999999, "text": " And then you have this first example from documentation in millions of repositories.", "tokens": [400, 550, 291, 362, 341, 700, 1365, 490, 14333, 294, 6803, 295, 22283, 2083, 13], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 203, "seek": 85740, "start": 878.0799999999999, "end": 883.68, "text": " And for me, the weirdest one is that one of my frameworks that I built actually ended", "tokens": [400, 337, 385, 11, 264, 44807, 472, 307, 300, 472, 295, 452, 29834, 300, 286, 3094, 767, 4590], "temperature": 0.0, "avg_logprob": -0.13611388442539932, "compression_ratio": 1.7478991596638656, "no_speech_prob": 3.8740843592677265e-05}, {"id": 204, "seek": 88368, "start": 883.68, "end": 888.12, "text": " up in a university course as a programming 101.", "tokens": [493, 294, 257, 5454, 1164, 382, 257, 9410, 21055, 13], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 205, "seek": 88368, "start": 888.12, "end": 893.4799999999999, "text": " And universities are sort of an amazing catalyst for this because you end up with all of those", "tokens": [400, 11779, 366, 1333, 295, 364, 2243, 23868, 337, 341, 570, 291, 917, 493, 365, 439, 295, 729], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 206, "seek": 88368, "start": 893.4799999999999, "end": 898.12, "text": " students putting their GitHub repositories of the first courses on GitHub.", "tokens": [1731, 3372, 641, 23331, 22283, 2083, 295, 264, 700, 7712, 322, 23331, 13], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 207, "seek": 88368, "start": 898.12, "end": 902.88, "text": " And then you see the madness you have created, multiplied through like every single student", "tokens": [400, 550, 291, 536, 264, 28736, 291, 362, 2942, 11, 17207, 807, 411, 633, 2167, 3107], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 208, "seek": 88368, "start": 902.88, "end": 903.88, "text": " that on boards.", "tokens": [300, 322, 13293, 13], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 209, "seek": 88368, "start": 903.88, "end": 907.0, "text": " And it's a real lesson.", "tokens": [400, 309, 311, 257, 957, 6898, 13], "temperature": 0.0, "avg_logprob": -0.1952324843988186, "compression_ratio": 1.6009174311926606, "no_speech_prob": 6.478288560174406e-05}, {"id": 210, "seek": 90700, "start": 907.0, "end": 914.4, "text": " So I really respond really negatively to this idea of this code example, which I know it's", "tokens": [407, 286, 534, 4196, 534, 29519, 281, 341, 1558, 295, 341, 3089, 1365, 11, 597, 286, 458, 309, 311], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 211, "seek": 90700, "start": 914.4, "end": 918.28, "text": " hard to read, but it basically is sort of the, that would be the equivalent of not picking", "tokens": [1152, 281, 1401, 11, 457, 309, 1936, 307, 1333, 295, 264, 11, 300, 576, 312, 264, 10344, 295, 406, 8867], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 212, "seek": 90700, "start": 918.28, "end": 919.28, "text": " a default hash.", "tokens": [257, 7576, 22019, 13], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 213, "seek": 90700, "start": 919.28, "end": 922.36, "text": " It would be like, well, we think that Rust is a hard programming language.", "tokens": [467, 576, 312, 411, 11, 731, 11, 321, 519, 300, 34952, 307, 257, 1152, 9410, 2856, 13], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 214, "seek": 90700, "start": 922.36, "end": 925.08, "text": " It's supposed to be like C++, you should think.", "tokens": [467, 311, 3442, 281, 312, 411, 383, 25472, 11, 291, 820, 519, 13], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 215, "seek": 90700, "start": 925.08, "end": 928.28, "text": " So you pick the hasher yourself, and then you just put it in there.", "tokens": [407, 291, 1888, 264, 575, 511, 1803, 11, 293, 550, 291, 445, 829, 309, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 216, "seek": 90700, "start": 928.28, "end": 931.4, "text": " And then I swear to you, this would be the first code example, even if the documentation", "tokens": [400, 550, 286, 11902, 281, 291, 11, 341, 576, 312, 264, 700, 3089, 1365, 11, 754, 498, 264, 14333], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 217, "seek": 90700, "start": 931.4, "end": 936.68, "text": " says you should pick FX hasher for this type of hash map, and you should use SIP hasher", "tokens": [1619, 291, 820, 1888, 37849, 575, 511, 337, 341, 2010, 295, 22019, 4471, 11, 293, 291, 820, 764, 318, 9139, 575, 511], "temperature": 0.0, "avg_logprob": -0.12755938024328858, "compression_ratio": 1.8225806451612903, "no_speech_prob": 2.583186505944468e-05}, {"id": 218, "seek": 93668, "start": 936.68, "end": 939.04, "text": " for this other hash map.", "tokens": [337, 341, 661, 22019, 4471, 13], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 219, "seek": 93668, "start": 939.04, "end": 940.04, "text": " Nobody would read it.", "tokens": [9297, 576, 1401, 309, 13], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 220, "seek": 93668, "start": 940.04, "end": 942.8399999999999, "text": " They take the first code example and copy paste it in, right?", "tokens": [814, 747, 264, 700, 3089, 1365, 293, 5055, 9163, 309, 294, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 221, "seek": 93668, "start": 942.8399999999999, "end": 947.64, "text": " But now we discover maybe SIP hasher actually is better than FX hasher, but we cannot change", "tokens": [583, 586, 321, 4411, 1310, 318, 9139, 575, 511, 767, 307, 1101, 813, 37849, 575, 511, 11, 457, 321, 2644, 1319], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 222, "seek": 93668, "start": 947.64, "end": 952.2399999999999, "text": " everybody's code all at once because everybody has copy pasted the wrong thing over there.", "tokens": [2201, 311, 3089, 439, 412, 1564, 570, 2201, 575, 5055, 1791, 292, 264, 2085, 551, 670, 456, 13], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 223, "seek": 93668, "start": 952.2399999999999, "end": 955.9599999999999, "text": " And what I know happens is that every once in a while, someone comes and is like, okay,", "tokens": [400, 437, 286, 458, 2314, 307, 300, 633, 1564, 294, 257, 1339, 11, 1580, 1487, 293, 307, 411, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 224, "seek": 93668, "start": 955.9599999999999, "end": 960.4, "text": " we know that FX hasher is really popular, so we're going behind the scenes, change it", "tokens": [321, 458, 300, 37849, 575, 511, 307, 534, 3743, 11, 370, 321, 434, 516, 2261, 264, 8026, 11, 1319, 309], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 225, "seek": 93668, "start": 960.4, "end": 965.28, "text": " to actually be a different hasher because everybody copy pasted this thing everywhere.", "tokens": [281, 767, 312, 257, 819, 575, 511, 570, 2201, 5055, 1791, 292, 341, 551, 5315, 13], "temperature": 0.0, "avg_logprob": -0.14497828312057384, "compression_ratio": 1.7724358974358974, "no_speech_prob": 1.4735794138687197e-05}, {"id": 226, "seek": 96528, "start": 965.28, "end": 970.04, "text": " It's incredibly common that you find an API that says, like, I'm named really misleadingly", "tokens": [467, 311, 6252, 2689, 300, 291, 915, 364, 9362, 300, 1619, 11, 411, 11, 286, 478, 4926, 534, 36429, 356], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 227, "seek": 96528, "start": 970.04, "end": 973.92, "text": " because this used to be my implementation, but now I'm something else entirely, right?", "tokens": [570, 341, 1143, 281, 312, 452, 11420, 11, 457, 586, 286, 478, 746, 1646, 7696, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 228, "seek": 96528, "start": 973.92, "end": 980.28, "text": " So it doesn't, like this card-culting I hate, and I don't think it's good, but I understand", "tokens": [407, 309, 1177, 380, 11, 411, 341, 2920, 12, 66, 723, 278, 286, 4700, 11, 293, 286, 500, 380, 519, 309, 311, 665, 11, 457, 286, 1223], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 229, "seek": 96528, "start": 980.28, "end": 985.04, "text": " it's really appealing because it's flexibility.", "tokens": [309, 311, 534, 23842, 570, 309, 311, 12635, 13], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 230, "seek": 96528, "start": 985.04, "end": 989.04, "text": " This I think, I actually made the wrong code example here on the slide, but I was too lazy", "tokens": [639, 286, 519, 11, 286, 767, 1027, 264, 2085, 3089, 1365, 510, 322, 264, 4137, 11, 457, 286, 390, 886, 14847], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 231, "seek": 96528, "start": 989.04, "end": 994.28, "text": " to change it afterwards, but just imagine for a second that this code example wouldn't", "tokens": [281, 1319, 309, 10543, 11, 457, 445, 3811, 337, 257, 1150, 300, 341, 3089, 1365, 2759, 380], "temperature": 0.0, "avg_logprob": -0.1526006062825521, "compression_ratio": 1.6610738255033557, "no_speech_prob": 3.423674570512958e-05}, {"id": 232, "seek": 99428, "start": 994.28, "end": 1000.72, "text": " return a string, but actually returns an enum with a variant called char256, but the idea", "tokens": [2736, 257, 6798, 11, 457, 767, 11247, 364, 465, 449, 365, 257, 17501, 1219, 1290, 6074, 21, 11, 457, 264, 1558], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 233, "seek": 99428, "start": 1000.72, "end": 1002.04, "text": " here is more or less this.", "tokens": [510, 307, 544, 420, 1570, 341, 13], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 234, "seek": 99428, "start": 1002.04, "end": 1007.1999999999999, "text": " If you do create a library that does something of which in the future there might be different", "tokens": [759, 291, 360, 1884, 257, 6405, 300, 775, 746, 295, 597, 294, 264, 2027, 456, 1062, 312, 819], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 235, "seek": 99428, "start": 1007.1999999999999, "end": 1012.92, "text": " implementation coming along, what you probably want to do is not just return the output,", "tokens": [11420, 1348, 2051, 11, 437, 291, 1391, 528, 281, 360, 307, 406, 445, 2736, 264, 5598, 11], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 236, "seek": 99428, "start": 1012.92, "end": 1015.6, "text": " but you want to annotate the output with what kind of thing it is.", "tokens": [457, 291, 528, 281, 25339, 473, 264, 5598, 365, 437, 733, 295, 551, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 237, "seek": 99428, "start": 1015.6, "end": 1021.3199999999999, "text": " So if you create a, if you have a library that sort of is supposed to validate files", "tokens": [407, 498, 291, 1884, 257, 11, 498, 291, 362, 257, 6405, 300, 1333, 295, 307, 3442, 281, 29562, 7098], "temperature": 0.0, "avg_logprob": -0.09818099226270403, "compression_ratio": 1.7121212121212122, "no_speech_prob": 1.5197379980236292e-05}, {"id": 238, "seek": 102132, "start": 1021.32, "end": 1027.04, "text": " on the file system, and it does it by calculating a checksum, it's much better for that library", "tokens": [322, 264, 3991, 1185, 11, 293, 309, 775, 309, 538, 28258, 257, 13834, 449, 11, 309, 311, 709, 1101, 337, 300, 6405], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 239, "seek": 102132, "start": 1027.04, "end": 1031.6000000000001, "text": " not to return the bytes of the checksum, but to return the bytes of the checksum and the", "tokens": [406, 281, 2736, 264, 36088, 295, 264, 13834, 449, 11, 457, 281, 2736, 264, 36088, 295, 264, 13834, 449, 293, 264], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 240, "seek": 102132, "start": 1031.6000000000001, "end": 1034.3200000000002, "text": " information by the way I'm char256.", "tokens": [1589, 538, 264, 636, 286, 478, 1290, 6074, 21, 13], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 241, "seek": 102132, "start": 1034.3200000000002, "end": 1035.3200000000002, "text": " Why?", "tokens": [1545, 30], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 242, "seek": 102132, "start": 1035.3200000000002, "end": 1039.3200000000002, "text": " Mostly because it forces the developer to recognize that this thing might change, right?", "tokens": [29035, 570, 309, 5874, 264, 10754, 281, 5521, 300, 341, 551, 1062, 1319, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 243, "seek": 102132, "start": 1039.3200000000002, "end": 1043.44, "text": " It might not be char256 forever.", "tokens": [467, 1062, 406, 312, 1290, 6074, 21, 5680, 13], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 244, "seek": 102132, "start": 1043.44, "end": 1047.6000000000001, "text": " And this sort of explicit, like even if you never plan on actually changing this at all,", "tokens": [400, 341, 1333, 295, 13691, 11, 411, 754, 498, 291, 1128, 1393, 322, 767, 4473, 341, 412, 439, 11], "temperature": 0.0, "avg_logprob": -0.1201639341271442, "compression_ratio": 1.7098039215686274, "no_speech_prob": 1.6692854842403904e-05}, {"id": 245, "seek": 104760, "start": 1047.6, "end": 1052.8, "text": " it still forces something in the mind of the developer to recognize that this is probably", "tokens": [309, 920, 5874, 746, 294, 264, 1575, 295, 264, 10754, 281, 5521, 300, 341, 307, 1391], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 246, "seek": 104760, "start": 1052.8, "end": 1053.8, "text": " going to change.", "tokens": [516, 281, 1319, 13], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 247, "seek": 104760, "start": 1053.8, "end": 1061.0, "text": " And I know of a version control system that very famously picked one shahesh and is completely", "tokens": [400, 286, 458, 295, 257, 3037, 1969, 1185, 300, 588, 34360, 6183, 472, 402, 545, 14935, 293, 307, 2584], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 248, "seek": 104760, "start": 1061.0, "end": 1064.8, "text": " incapable of changing it now, not because it's technically impossible, they've changed", "tokens": [44174, 295, 4473, 309, 586, 11, 406, 570, 309, 311, 12120, 6243, 11, 436, 600, 3105], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 249, "seek": 104760, "start": 1064.8, "end": 1071.0, "text": " everything, but because there's an ecosystem of stuff that assumed that it will never change,", "tokens": [1203, 11, 457, 570, 456, 311, 364, 11311, 295, 1507, 300, 15895, 300, 309, 486, 1128, 1319, 11], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 250, "seek": 104760, "start": 1071.0, "end": 1072.76, "text": " this change cannot be pushed through, right?", "tokens": [341, 1319, 2644, 312, 9152, 807, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15563872456550598, "compression_ratio": 1.6550387596899225, "no_speech_prob": 9.35556545300642e-06}, {"id": 251, "seek": 107276, "start": 1072.76, "end": 1078.52, "text": " They have the one version, the other version, the incompatible of each other as an example", "tokens": [814, 362, 264, 472, 3037, 11, 264, 661, 3037, 11, 264, 40393, 267, 964, 295, 1184, 661, 382, 364, 1365], "temperature": 0.0, "avg_logprob": -0.15681275633192554, "compression_ratio": 1.617391304347826, "no_speech_prob": 2.7442549253464676e-05}, {"id": 252, "seek": 107276, "start": 1078.52, "end": 1079.52, "text": " of this, right?", "tokens": [295, 341, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15681275633192554, "compression_ratio": 1.617391304347826, "no_speech_prob": 2.7442549253464676e-05}, {"id": 253, "seek": 107276, "start": 1079.52, "end": 1084.92, "text": " I know this is very security heavy right now, but the idea is the same, like you, every", "tokens": [286, 458, 341, 307, 588, 3825, 4676, 558, 586, 11, 457, 264, 1558, 307, 264, 912, 11, 411, 291, 11, 633], "temperature": 0.0, "avg_logprob": -0.15681275633192554, "compression_ratio": 1.617391304347826, "no_speech_prob": 2.7442549253464676e-05}, {"id": 254, "seek": 107276, "start": 1084.92, "end": 1090.48, "text": " once in a while there's a reason for you to move up to a different algorithm or something", "tokens": [1564, 294, 257, 1339, 456, 311, 257, 1778, 337, 291, 281, 1286, 493, 281, 257, 819, 9284, 420, 746], "temperature": 0.0, "avg_logprob": -0.15681275633192554, "compression_ratio": 1.617391304347826, "no_speech_prob": 2.7442549253464676e-05}, {"id": 255, "seek": 107276, "start": 1090.48, "end": 1096.12, "text": " of that nature, and if you haven't created an API in the beginning that sort of hammers", "tokens": [295, 300, 3687, 11, 293, 498, 291, 2378, 380, 2942, 364, 9362, 294, 264, 2863, 300, 1333, 295, 36600, 433], "temperature": 0.0, "avg_logprob": -0.15681275633192554, "compression_ratio": 1.617391304347826, "no_speech_prob": 2.7442549253464676e-05}, {"id": 256, "seek": 109612, "start": 1096.12, "end": 1103.84, "text": " down this point that it might change, people will not necessarily think about this.", "tokens": [760, 341, 935, 300, 309, 1062, 1319, 11, 561, 486, 406, 4725, 519, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.13180021988718132, "compression_ratio": 1.6733067729083666, "no_speech_prob": 2.1421445126179606e-05}, {"id": 257, "seek": 109612, "start": 1103.84, "end": 1109.6399999999999, "text": " Less is more, I think it's pretty obvious, the larger the API surface, the more stuff", "tokens": [18649, 307, 544, 11, 286, 519, 309, 311, 1238, 6322, 11, 264, 4833, 264, 9362, 3753, 11, 264, 544, 1507], "temperature": 0.0, "avg_logprob": -0.13180021988718132, "compression_ratio": 1.6733067729083666, "no_speech_prob": 2.1421445126179606e-05}, {"id": 258, "seek": 109612, "start": 1109.6399999999999, "end": 1114.52, "text": " you will have to make sure doesn't break if you change internals.", "tokens": [291, 486, 362, 281, 652, 988, 1177, 380, 1821, 498, 291, 1319, 2154, 1124, 13], "temperature": 0.0, "avg_logprob": -0.13180021988718132, "compression_ratio": 1.6733067729083666, "no_speech_prob": 2.1421445126179606e-05}, {"id": 259, "seek": 109612, "start": 1114.52, "end": 1121.3999999999999, "text": " Particularly internal APIs are incredibly leaky accidentally or intentionally, and whenever", "tokens": [32281, 6920, 21445, 366, 6252, 476, 15681, 15715, 420, 22062, 11, 293, 5699], "temperature": 0.0, "avg_logprob": -0.13180021988718132, "compression_ratio": 1.6733067729083666, "no_speech_prob": 2.1421445126179606e-05}, {"id": 260, "seek": 109612, "start": 1121.3999999999999, "end": 1125.12, "text": " you want to change it, you have to ask yourself the question if someone actually using this.", "tokens": [291, 528, 281, 1319, 309, 11, 291, 362, 281, 1029, 1803, 264, 1168, 498, 1580, 767, 1228, 341, 13], "temperature": 0.0, "avg_logprob": -0.13180021988718132, "compression_ratio": 1.6733067729083666, "no_speech_prob": 2.1421445126179606e-05}, {"id": 261, "seek": 112512, "start": 1125.12, "end": 1128.7199999999998, "text": " A lot of people start out building libraries where every single module, every single function", "tokens": [316, 688, 295, 561, 722, 484, 2390, 15148, 689, 633, 2167, 10088, 11, 633, 2167, 2445], "temperature": 0.0, "avg_logprob": -0.17103669194891902, "compression_ratio": 1.7975708502024292, "no_speech_prob": 2.9289754820638336e-05}, {"id": 262, "seek": 112512, "start": 1128.7199999999998, "end": 1136.04, "text": " is just pop, and every version breaks everything ever, because you just don't have the time", "tokens": [307, 445, 1665, 11, 293, 633, 3037, 9857, 1203, 1562, 11, 570, 291, 445, 500, 380, 362, 264, 565], "temperature": 0.0, "avg_logprob": -0.17103669194891902, "compression_ratio": 1.7975708502024292, "no_speech_prob": 2.9289754820638336e-05}, {"id": 263, "seek": 112512, "start": 1136.04, "end": 1142.3999999999999, "text": " and, at least you don't have the time usually, and the capabilities to figure out if someone", "tokens": [293, 11, 412, 1935, 291, 500, 380, 362, 264, 565, 2673, 11, 293, 264, 10862, 281, 2573, 484, 498, 1580], "temperature": 0.0, "avg_logprob": -0.17103669194891902, "compression_ratio": 1.7975708502024292, "no_speech_prob": 2.9289754820638336e-05}, {"id": 264, "seek": 112512, "start": 1142.3999999999999, "end": 1146.04, "text": " actually uses all of those functions, so you just break them all.", "tokens": [767, 4960, 439, 295, 729, 6828, 11, 370, 291, 445, 1821, 552, 439, 13], "temperature": 0.0, "avg_logprob": -0.17103669194891902, "compression_ratio": 1.7975708502024292, "no_speech_prob": 2.9289754820638336e-05}, {"id": 265, "seek": 112512, "start": 1146.04, "end": 1152.04, "text": " Or you just spend all this extra time on making sure that they never break because it's impossible.", "tokens": [1610, 291, 445, 3496, 439, 341, 2857, 565, 322, 1455, 988, 300, 436, 1128, 1821, 570, 309, 311, 6243, 13], "temperature": 0.0, "avg_logprob": -0.17103669194891902, "compression_ratio": 1.7975708502024292, "no_speech_prob": 2.9289754820638336e-05}, {"id": 266, "seek": 115204, "start": 1152.04, "end": 1157.72, "text": " So goal is small API surface, but then if you go to a small API surface, then there's", "tokens": [407, 3387, 307, 1359, 9362, 3753, 11, 457, 550, 498, 291, 352, 281, 257, 1359, 9362, 3753, 11, 550, 456, 311], "temperature": 0.0, "avg_logprob": -0.17376587125990126, "compression_ratio": 1.6333333333333333, "no_speech_prob": 1.4963736248319037e-05}, {"id": 267, "seek": 115204, "start": 1157.72, "end": 1166.2, "text": " some tricks in Rust you can use to reduce API surface, but not really.", "tokens": [512, 11733, 294, 34952, 291, 393, 764, 281, 5407, 9362, 3753, 11, 457, 406, 534, 13], "temperature": 0.0, "avg_logprob": -0.17376587125990126, "compression_ratio": 1.6333333333333333, "no_speech_prob": 1.4963736248319037e-05}, {"id": 268, "seek": 115204, "start": 1166.2, "end": 1173.2, "text": " So for instance, we have some really common abstractions like Intot or SRFT, which can", "tokens": [407, 337, 5197, 11, 321, 362, 512, 534, 2689, 12649, 626, 411, 5681, 310, 420, 20840, 25469, 11, 597, 393], "temperature": 0.0, "avg_logprob": -0.17376587125990126, "compression_ratio": 1.6333333333333333, "no_speech_prob": 1.4963736248319037e-05}, {"id": 269, "seek": 115204, "start": 1173.2, "end": 1175.36, "text": " be used to be generic over something.", "tokens": [312, 1143, 281, 312, 19577, 670, 746, 13], "temperature": 0.0, "avg_logprob": -0.17376587125990126, "compression_ratio": 1.6333333333333333, "no_speech_prob": 1.4963736248319037e-05}, {"id": 270, "seek": 115204, "start": 1175.36, "end": 1180.76, "text": " So it saves you the necessity to build a function four times.", "tokens": [407, 309, 19155, 291, 264, 24217, 281, 1322, 257, 2445, 1451, 1413, 13], "temperature": 0.0, "avg_logprob": -0.17376587125990126, "compression_ratio": 1.6333333333333333, "no_speech_prob": 1.4963736248319037e-05}, {"id": 271, "seek": 118076, "start": 1180.76, "end": 1185.16, "text": " You might want to open a file by string or you might want to open a file by path.", "tokens": [509, 1062, 528, 281, 1269, 257, 3991, 538, 6798, 420, 291, 1062, 528, 281, 1269, 257, 3991, 538, 3100, 13], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 272, "seek": 118076, "start": 1185.16, "end": 1189.4, "text": " Just write one function, you can do SRFT path, and it's possible to pass at any of those", "tokens": [1449, 2464, 472, 2445, 11, 291, 393, 360, 20840, 25469, 3100, 11, 293, 309, 311, 1944, 281, 1320, 412, 604, 295, 729], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 273, "seek": 118076, "start": 1189.4, "end": 1190.4, "text": " compatible types.", "tokens": [18218, 3467, 13], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 274, "seek": 118076, "start": 1190.4, "end": 1194.48, "text": " Now, it's kind of cheating because it's really still four different APIs, but they're hidden", "tokens": [823, 11, 309, 311, 733, 295, 18309, 570, 309, 311, 534, 920, 1451, 819, 21445, 11, 457, 436, 434, 7633], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 275, "seek": 118076, "start": 1194.48, "end": 1198.96, "text": " behind a standard constructor that the developer understands.", "tokens": [2261, 257, 3832, 47479, 300, 264, 10754, 15146, 13], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 276, "seek": 118076, "start": 1198.96, "end": 1203.76, "text": " So this is an example from Minigenger.", "tokens": [407, 341, 307, 364, 1365, 490, 2829, 3213, 1321, 13], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 277, "seek": 118076, "start": 1203.76, "end": 1206.64, "text": " Both name and value are generic.", "tokens": [6767, 1315, 293, 2158, 366, 19577, 13], "temperature": 0.0, "avg_logprob": -0.19706603076970466, "compression_ratio": 1.5779467680608366, "no_speech_prob": 2.7088195565738715e-05}, {"id": 278, "seek": 120664, "start": 1206.64, "end": 1212.76, "text": " One is converting into a copy and write string thing.", "tokens": [1485, 307, 29942, 666, 257, 5055, 293, 2464, 6798, 551, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 279, "seek": 120664, "start": 1212.76, "end": 1216.5200000000002, "text": " So you can either pass it an own string or you can pass a static string reference.", "tokens": [407, 291, 393, 2139, 1320, 309, 364, 1065, 6798, 420, 291, 393, 1320, 257, 13437, 6798, 6408, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 280, "seek": 120664, "start": 1216.5200000000002, "end": 1217.64, "text": " Both of those will be fine.", "tokens": [6767, 295, 729, 486, 312, 2489, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 281, "seek": 120664, "start": 1217.64, "end": 1221.96, "text": " So from an API point of view, it behaves as you would expect.", "tokens": [407, 490, 364, 9362, 935, 295, 1910, 11, 309, 36896, 382, 291, 576, 2066, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 282, "seek": 120664, "start": 1221.96, "end": 1224.88, "text": " The first thing is a string argument, like you cannot get it wrong.", "tokens": [440, 700, 551, 307, 257, 6798, 6770, 11, 411, 291, 2644, 483, 309, 2085, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 283, "seek": 120664, "start": 1224.88, "end": 1228.16, "text": " And the second thing is whatever converts into my internal value type of which there", "tokens": [400, 264, 1150, 551, 307, 2035, 38874, 666, 452, 6920, 2158, 2010, 295, 597, 456], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 284, "seek": 120664, "start": 1228.16, "end": 1230.44, "text": " are a bunch of conversions.", "tokens": [366, 257, 3840, 295, 42256, 13], "temperature": 0.0, "avg_logprob": -0.17678886709861386, "compression_ratio": 1.6748971193415638, "no_speech_prob": 9.28728113649413e-05}, {"id": 285, "seek": 123044, "start": 1230.44, "end": 1237.16, "text": " I could also have made seven different at whatever functions for every single data type", "tokens": [286, 727, 611, 362, 1027, 3407, 819, 412, 2035, 6828, 337, 633, 2167, 1412, 2010], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 286, "seek": 123044, "start": 1237.16, "end": 1241.1200000000001, "text": " that exists, but this is a simpler way to do it.", "tokens": [300, 8198, 11, 457, 341, 307, 257, 18587, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 287, "seek": 123044, "start": 1241.1200000000001, "end": 1245.8, "text": " And I could also have said, like, hey, you're going to pass the value directly already,", "tokens": [400, 286, 727, 611, 362, 848, 11, 411, 11, 4177, 11, 291, 434, 516, 281, 1320, 264, 2158, 3838, 1217, 11], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 288, "seek": 123044, "start": 1245.8, "end": 1249.3200000000002, "text": " but since I already need to provide a way for the user anyways to convert it into this", "tokens": [457, 1670, 286, 1217, 643, 281, 2893, 257, 636, 337, 264, 4195, 13448, 281, 7620, 309, 666, 341], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 289, "seek": 123044, "start": 1249.3200000000002, "end": 1251.3600000000001, "text": " value type, might as well use this.", "tokens": [2158, 2010, 11, 1062, 382, 731, 764, 341, 13], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 290, "seek": 123044, "start": 1251.3600000000001, "end": 1255.16, "text": " So it's very consistently throughout the API now using int of value.", "tokens": [407, 309, 311, 588, 14961, 3710, 264, 9362, 586, 1228, 560, 295, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 291, "seek": 123044, "start": 1255.16, "end": 1259.44, "text": " So there's only one function and it hides all of those different variations of actual", "tokens": [407, 456, 311, 787, 472, 2445, 293, 309, 35953, 439, 295, 729, 819, 17840, 295, 3539], "temperature": 0.0, "avg_logprob": -0.13288757449290792, "compression_ratio": 1.7074829931972788, "no_speech_prob": 7.408780675177695e-06}, {"id": 292, "seek": 125944, "start": 1259.44, "end": 1263.52, "text": " API that still exists behind this int of thing.", "tokens": [9362, 300, 920, 8198, 2261, 341, 560, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 293, "seek": 125944, "start": 1263.52, "end": 1264.72, "text": " SRF is sort of the same.", "tokens": [20840, 37, 307, 1333, 295, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 294, "seek": 125944, "start": 1264.72, "end": 1269.0, "text": " I actually hate SRF because it makes it really unreadable.", "tokens": [286, 767, 4700, 20840, 37, 570, 309, 1669, 309, 534, 517, 2538, 712, 13], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 295, "seek": 125944, "start": 1269.0, "end": 1276.04, "text": " So instead of your function taking a path by reference, it takes a p and then the p is", "tokens": [407, 2602, 295, 428, 2445, 1940, 257, 3100, 538, 6408, 11, 309, 2516, 257, 280, 293, 550, 264, 280, 307], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 296, "seek": 125944, "start": 1276.04, "end": 1277.76, "text": " hidden behind SRF path.", "tokens": [7633, 2261, 20840, 37, 3100, 13], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 297, "seek": 125944, "start": 1277.76, "end": 1283.92, "text": " And then before to use it, very often I use SRF.toPathPath, which is just weird, but this", "tokens": [400, 550, 949, 281, 764, 309, 11, 588, 2049, 286, 764, 20840, 37, 13, 1353, 47, 998, 47, 998, 11, 597, 307, 445, 3657, 11, 457, 341], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 298, "seek": 125944, "start": 1283.92, "end": 1286.52, "text": " is a really common pattern.", "tokens": [307, 257, 534, 2689, 5102, 13], "temperature": 0.0, "avg_logprob": -0.2063906660703855, "compression_ratio": 1.6, "no_speech_prob": 1.8914086467702873e-05}, {"id": 299, "seek": 128652, "start": 1286.52, "end": 1290.2, "text": " So I don't like it, but it's so standardized in the ecosystem that people get to expect", "tokens": [407, 286, 500, 380, 411, 309, 11, 457, 309, 311, 370, 31677, 294, 264, 11311, 300, 561, 483, 281, 2066], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 300, "seek": 128652, "start": 1290.2, "end": 1291.2, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 301, "seek": 128652, "start": 1291.2, "end": 1296.6399999999999, "text": " And so because we all have been willing to live with it, I guess this is sort of enough", "tokens": [400, 370, 570, 321, 439, 362, 668, 4950, 281, 1621, 365, 309, 11, 286, 2041, 341, 307, 1333, 295, 1547], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 302, "seek": 128652, "start": 1296.6399999999999, "end": 1300.96, "text": " of a reason to keep doing it.", "tokens": [295, 257, 1778, 281, 1066, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 303, "seek": 128652, "start": 1300.96, "end": 1306.44, "text": " If you have this sort of APIs that use a lot of generics to do type conversions, you will", "tokens": [759, 291, 362, 341, 1333, 295, 21445, 300, 764, 257, 688, 295, 1337, 1167, 281, 360, 2010, 42256, 11, 291, 486], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 304, "seek": 128652, "start": 1306.44, "end": 1308.76, "text": " immediately blow up your compile times.", "tokens": [4258, 6327, 493, 428, 31413, 1413, 13], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 305, "seek": 128652, "start": 1308.76, "end": 1313.52, "text": " This is the standard trick to not do that, which is you keep the generic part into a", "tokens": [639, 307, 264, 3832, 4282, 281, 406, 360, 300, 11, 597, 307, 291, 1066, 264, 19577, 644, 666, 257], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 306, "seek": 128652, "start": 1313.52, "end": 1316.48, "text": " tiny, tiny function and then call it the non-generic part.", "tokens": [5870, 11, 5870, 2445, 293, 550, 818, 309, 264, 2107, 12, 21848, 299, 644, 13], "temperature": 0.0, "avg_logprob": -0.08917075670682467, "compression_ratio": 1.6829268292682926, "no_speech_prob": 1.2797782801499125e-05}, {"id": 307, "seek": 131648, "start": 1316.48, "end": 1319.52, "text": " So in this case, the conversion goes to this value type.", "tokens": [407, 294, 341, 1389, 11, 264, 14298, 1709, 281, 341, 2158, 2010, 13], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 308, "seek": 131648, "start": 1319.52, "end": 1323.76, "text": " I know it's really hard to see in this projector, but basically the function render takes an", "tokens": [286, 458, 309, 311, 534, 1152, 281, 536, 294, 341, 39792, 11, 457, 1936, 264, 2445, 15529, 2516, 364], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 309, "seek": 131648, "start": 1323.76, "end": 1329.72, "text": " object that can serialize with 30, and then it calls value from serializable, which takes", "tokens": [2657, 300, 393, 17436, 1125, 365, 2217, 11, 293, 550, 309, 5498, 2158, 490, 17436, 22395, 11, 597, 2516], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 310, "seek": 131648, "start": 1329.72, "end": 1333.32, "text": " this value, converts it into a value type, which is the non-generic, which I use all", "tokens": [341, 2158, 11, 38874, 309, 666, 257, 2158, 2010, 11, 597, 307, 264, 2107, 12, 21848, 299, 11, 597, 286, 764, 439], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 311, "seek": 131648, "start": 1333.32, "end": 1334.6, "text": " over the thing.", "tokens": [670, 264, 551, 13], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 312, "seek": 131648, "start": 1334.6, "end": 1339.4, "text": " And then all the function underscore, render, underscore, eval, they will not be generic.", "tokens": [400, 550, 439, 264, 2445, 37556, 11, 15529, 11, 37556, 11, 1073, 304, 11, 436, 486, 406, 312, 19577, 13], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 313, "seek": 131648, "start": 1339.4, "end": 1344.8, "text": " And so they have one instance, whereas the other one will be one instance per type actually", "tokens": [400, 370, 436, 362, 472, 5197, 11, 9735, 264, 661, 472, 486, 312, 472, 5197, 680, 2010, 767], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 314, "seek": 131648, "start": 1344.8, "end": 1346.04, "text": " passed.", "tokens": [4678, 13], "temperature": 0.0, "avg_logprob": -0.13925175136990017, "compression_ratio": 1.8794326241134751, "no_speech_prob": 1.472040094085969e-05}, {"id": 315, "seek": 134604, "start": 1346.04, "end": 1347.56, "text": " What does it mean?", "tokens": [708, 775, 309, 914, 30], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 316, "seek": 134604, "start": 1347.56, "end": 1354.32, "text": " If you don't do this, if this was all one function, last time I checked this, the mini-changer", "tokens": [759, 291, 500, 380, 360, 341, 11, 498, 341, 390, 439, 472, 2445, 11, 1036, 565, 286, 10033, 341, 11, 264, 8382, 12, 339, 3176], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 317, "seek": 134604, "start": 1354.32, "end": 1359.24, "text": " compile times are exploding to more than double or three times just because of this one function.", "tokens": [31413, 1413, 366, 35175, 281, 544, 813, 3834, 420, 1045, 1413, 445, 570, 295, 341, 472, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 318, "seek": 134604, "start": 1359.24, "end": 1360.24, "text": " Why?", "tokens": [1545, 30], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 319, "seek": 134604, "start": 1360.24, "end": 1364.84, "text": " Because it's very common that you pass different types of it, and the Rust compiler thinks that", "tokens": [1436, 309, 311, 588, 2689, 300, 291, 1320, 819, 3467, 295, 309, 11, 293, 264, 34952, 31958, 7309, 300], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 320, "seek": 134604, "start": 1364.84, "end": 1369.6, "text": " inlining is awesome, and it inlines this VM eval function there, which is, I think,", "tokens": [294, 31079, 307, 3476, 11, 293, 309, 294, 11045, 341, 18038, 1073, 304, 2445, 456, 11, 597, 307, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 321, "seek": 134604, "start": 1369.6, "end": 1374.12, "text": " like 15 kilobytes or something, and so it makes a duplication of those 16 kilobytes for", "tokens": [411, 2119, 5128, 996, 43673, 420, 746, 11, 293, 370, 309, 1669, 257, 17154, 399, 295, 729, 3165, 5128, 996, 43673, 337], "temperature": 0.0, "avg_logprob": -0.14241988899171815, "compression_ratio": 1.6864111498257839, "no_speech_prob": 3.0221446650102735e-05}, {"id": 322, "seek": 137412, "start": 1374.12, "end": 1376.12, "text": " every single type that you put in.", "tokens": [633, 2167, 2010, 300, 291, 829, 294, 13], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 323, "seek": 137412, "start": 1376.12, "end": 1378.1599999999999, "text": " In this case, I only have 16 kilobytes once, right?", "tokens": [682, 341, 1389, 11, 286, 787, 362, 3165, 5128, 996, 43673, 1564, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 324, "seek": 137412, "start": 1378.1599999999999, "end": 1383.08, "text": " So it's a serious amount of code that you save with this, and it's probably the best", "tokens": [407, 309, 311, 257, 3156, 2372, 295, 3089, 300, 291, 3155, 365, 341, 11, 293, 309, 311, 1391, 264, 1151], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 325, "seek": 137412, "start": 1383.08, "end": 1385.32, "text": " way to save compile times for a lot of code.", "tokens": [636, 281, 3155, 31413, 1413, 337, 257, 688, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 326, "seek": 137412, "start": 1385.32, "end": 1388.8, "text": " There are actually some tools that you can use these days to figure out, like, why these", "tokens": [821, 366, 767, 512, 3873, 300, 291, 393, 764, 613, 1708, 281, 2573, 484, 11, 411, 11, 983, 613], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 327, "seek": 137412, "start": 1388.8, "end": 1391.1999999999998, "text": " functions blow up that much.", "tokens": [6828, 6327, 493, 300, 709, 13], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 328, "seek": 137412, "start": 1391.1999999999998, "end": 1399.3999999999999, "text": " But if you use generics, particularly with SRF and into, it's worth looking for.", "tokens": [583, 498, 291, 764, 1337, 1167, 11, 4098, 365, 20840, 37, 293, 666, 11, 309, 311, 3163, 1237, 337, 13], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 329, "seek": 137412, "start": 1399.3999999999999, "end": 1402.8, "text": " So I mentioned earlier, I like to keep the API service as small as possible.", "tokens": [407, 286, 2835, 3071, 11, 286, 411, 281, 1066, 264, 9362, 2643, 382, 1359, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.14262082683506297, "compression_ratio": 1.618421052631579, "no_speech_prob": 2.883245178963989e-05}, {"id": 330, "seek": 140280, "start": 1402.8, "end": 1407.6399999999999, "text": " That doesn't mean that I don't build actually an onion of API behind the scenes.", "tokens": [663, 1177, 380, 914, 300, 286, 500, 380, 1322, 767, 364, 10916, 295, 9362, 2261, 264, 8026, 13], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 331, "seek": 140280, "start": 1407.6399999999999, "end": 1410.96, "text": " So I like this onion concept, like, APIs are layered.", "tokens": [407, 286, 411, 341, 10916, 3410, 11, 411, 11, 21445, 366, 34666, 13], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 332, "seek": 140280, "start": 1410.96, "end": 1417.1399999999999, "text": " But the user only gets the outermost layer, the inner layers are for own enjoyment.", "tokens": [583, 264, 4195, 787, 2170, 264, 484, 966, 555, 4583, 11, 264, 7284, 7914, 366, 337, 1065, 32013, 13], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 333, "seek": 140280, "start": 1417.1399999999999, "end": 1421.2, "text": " And then you keep these inner layers, and you have this flexibility of change remaining,", "tokens": [400, 550, 291, 1066, 613, 7284, 7914, 11, 293, 291, 362, 341, 12635, 295, 1319, 8877, 11], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 334, "seek": 140280, "start": 1421.2, "end": 1422.96, "text": " but it's still kind of clean.", "tokens": [457, 309, 311, 920, 733, 295, 2541, 13], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 335, "seek": 140280, "start": 1422.96, "end": 1426.84, "text": " And then over time, if that library becomes like the most stable thing ever, you can actually", "tokens": [400, 550, 670, 565, 11, 498, 300, 6405, 3643, 411, 264, 881, 8351, 551, 1562, 11, 291, 393, 767], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 336, "seek": 140280, "start": 1426.84, "end": 1429.36, "text": " start exposing the next layers of the onion.", "tokens": [722, 33178, 264, 958, 7914, 295, 264, 10916, 13], "temperature": 0.0, "avg_logprob": -0.14951196237772452, "compression_ratio": 1.7184115523465704, "no_speech_prob": 3.637860208982602e-05}, {"id": 337, "seek": 142936, "start": 1429.36, "end": 1433.3999999999999, "text": " A good example for this, I think, is Rust compiler plugins.", "tokens": [316, 665, 1365, 337, 341, 11, 286, 519, 11, 307, 34952, 31958, 33759, 13], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 338, "seek": 142936, "start": 1433.3999999999999, "end": 1437.56, "text": " Rust compiler, like many other systems, want you to be able to write a custom plugin for", "tokens": [34952, 31958, 11, 411, 867, 661, 3652, 11, 528, 291, 281, 312, 1075, 281, 2464, 257, 2375, 23407, 337], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 339, "seek": 142936, "start": 1437.56, "end": 1439.08, "text": " it, like the proc macros.", "tokens": [309, 11, 411, 264, 9510, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 340, "seek": 142936, "start": 1439.08, "end": 1442.4799999999998, "text": " But the problem is that that exposes a lot of the internal machinery of the compiler,", "tokens": [583, 264, 1154, 307, 300, 300, 1278, 4201, 257, 688, 295, 264, 6920, 27302, 295, 264, 31958, 11], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 341, "seek": 142936, "start": 1442.4799999999998, "end": 1445.8, "text": " which the compiler authors don't want to be stable.", "tokens": [597, 264, 31958, 16552, 500, 380, 528, 281, 312, 8351, 13], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 342, "seek": 142936, "start": 1445.8, "end": 1450.28, "text": " So what they did is they actually took the internals of that thing, they exposed it through", "tokens": [407, 437, 436, 630, 307, 436, 767, 1890, 264, 2154, 1124, 295, 300, 551, 11, 436, 9495, 309, 807], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 343, "seek": 142936, "start": 1450.28, "end": 1456.8, "text": " a secondary library, which I think was soon, and I think soon is the one on top, but maybe", "tokens": [257, 11396, 6405, 11, 597, 286, 519, 390, 2321, 11, 293, 286, 519, 2321, 307, 264, 472, 322, 1192, 11, 457, 1310], "temperature": 0.0, "avg_logprob": -0.1595728566327433, "compression_ratio": 1.8401486988847584, "no_speech_prob": 4.4580086978385225e-05}, {"id": 344, "seek": 145680, "start": 1456.8, "end": 1460.24, "text": " it was proc macros too, but in any case, it was exposed as a secondary library.", "tokens": [309, 390, 9510, 7912, 2635, 886, 11, 457, 294, 604, 1389, 11, 309, 390, 9495, 382, 257, 11396, 6405, 13], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 345, "seek": 145680, "start": 1460.24, "end": 1464.72, "text": " It actually used the same code, but they had different stability guarantees, and then", "tokens": [467, 767, 1143, 264, 912, 3089, 11, 457, 436, 632, 819, 11826, 32567, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 346, "seek": 145680, "start": 1464.72, "end": 1468.56, "text": " they used a conversion system, which was basically serialized to string and deserialized from", "tokens": [436, 1143, 257, 14298, 1185, 11, 597, 390, 1936, 17436, 1602, 281, 6798, 293, 730, 260, 831, 1602, 490], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 347, "seek": 145680, "start": 1468.56, "end": 1471.28, "text": " string to bridge between the two.", "tokens": [6798, 281, 7283, 1296, 264, 732, 13], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 348, "seek": 145680, "start": 1471.28, "end": 1475.08, "text": " And so if you do feel like, okay, I actually want to eventually expose this other library,", "tokens": [400, 370, 498, 291, 360, 841, 411, 11, 1392, 11, 286, 767, 528, 281, 4728, 19219, 341, 661, 6405, 11], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 349, "seek": 145680, "start": 1475.08, "end": 1480.1599999999999, "text": " and I want this inner most functionality to be available for customer, you can think", "tokens": [293, 286, 528, 341, 7284, 881, 14980, 281, 312, 2435, 337, 5474, 11, 291, 393, 519], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 350, "seek": 145680, "start": 1480.1599999999999, "end": 1485.2, "text": " of exposing it as a completely independent library for experimentation, and then eventually", "tokens": [295, 33178, 309, 382, 257, 2584, 6695, 6405, 337, 37142, 11, 293, 550, 4728], "temperature": 0.0, "avg_logprob": -0.16273070871829987, "compression_ratio": 1.8096774193548386, "no_speech_prob": 2.38482953136554e-05}, {"id": 351, "seek": 148520, "start": 1485.2, "end": 1491.24, "text": " when it stabilizes, you can give it another onion layer to the customer.", "tokens": [562, 309, 11652, 5660, 11, 291, 393, 976, 309, 1071, 10916, 4583, 281, 264, 5474, 13], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 352, "seek": 148520, "start": 1491.24, "end": 1495.68, "text": " But again, once you have exposed that, your stability guarantees are going to be much", "tokens": [583, 797, 11, 1564, 291, 362, 9495, 300, 11, 428, 11826, 32567, 366, 516, 281, 312, 709], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 353, "seek": 148520, "start": 1495.68, "end": 1498.16, "text": " harder to uphold.", "tokens": [6081, 281, 34451, 13], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 354, "seek": 148520, "start": 1498.16, "end": 1503.16, "text": " So just a simple example, internally in my templating engine, I have a lot of abstractions", "tokens": [407, 445, 257, 2199, 1365, 11, 19501, 294, 452, 9100, 990, 2848, 11, 286, 362, 257, 688, 295, 12649, 626], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 355, "seek": 148520, "start": 1503.16, "end": 1507.72, "text": " like compile template, which is something that I know would be awesome to use externally,", "tokens": [411, 31413, 12379, 11, 597, 307, 746, 300, 286, 458, 576, 312, 3476, 281, 764, 40899, 11], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 356, "seek": 148520, "start": 1507.72, "end": 1511.48, "text": " but I don't want to give it to you, and then the code generator and the parser that have", "tokens": [457, 286, 500, 380, 528, 281, 976, 309, 281, 291, 11, 293, 550, 264, 3089, 19265, 293, 264, 21156, 260, 300, 362], "temperature": 0.0, "avg_logprob": -0.1348550623113459, "compression_ratio": 1.6704119850187267, "no_speech_prob": 1.3412236512522213e-05}, {"id": 357, "seek": 151148, "start": 1511.48, "end": 1516.16, "text": " already been people asking how to get access to it, you're not going to get it for now.", "tokens": [1217, 668, 561, 3365, 577, 281, 483, 2105, 281, 309, 11, 291, 434, 406, 516, 281, 483, 309, 337, 586, 13], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 358, "seek": 151148, "start": 1516.16, "end": 1522.08, "text": " But I keep the abstraction internally because it's much more fun this way.", "tokens": [583, 286, 1066, 264, 37765, 19501, 570, 309, 311, 709, 544, 1019, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 359, "seek": 151148, "start": 1522.08, "end": 1527.88, "text": " As I mentioned, I like to have as little API service as possible, and by the way, I fail", "tokens": [1018, 286, 2835, 11, 286, 411, 281, 362, 382, 707, 9362, 2643, 382, 1944, 11, 293, 538, 264, 636, 11, 286, 3061], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 360, "seek": 151148, "start": 1527.88, "end": 1528.88, "text": " at this.", "tokens": [412, 341, 13], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 361, "seek": 151148, "start": 1528.88, "end": 1532.92, "text": " You will notice that when I start a library, usually it has way more API than after three", "tokens": [509, 486, 3449, 300, 562, 286, 722, 257, 6405, 11, 2673, 309, 575, 636, 544, 9362, 813, 934, 1045], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 362, "seek": 151148, "start": 1532.92, "end": 1535.56, "text": " iterations when I take it away.", "tokens": [36540, 562, 286, 747, 309, 1314, 13], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 363, "seek": 151148, "start": 1535.56, "end": 1539.92, "text": " But I basically try to keep it flat, so I expose all of the things I want you to use", "tokens": [583, 286, 1936, 853, 281, 1066, 309, 4962, 11, 370, 286, 19219, 439, 295, 264, 721, 286, 528, 291, 281, 764], "temperature": 0.0, "avg_logprob": -0.11322286052088584, "compression_ratio": 1.6560283687943262, "no_speech_prob": 1.6692121789674275e-05}, {"id": 364, "seek": 153992, "start": 1539.92, "end": 1546.72, "text": " to the top level, and then all of my internal create structure is whatever, however I feel", "tokens": [281, 264, 1192, 1496, 11, 293, 550, 439, 295, 452, 6920, 1884, 3877, 307, 2035, 11, 4461, 286, 841], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 365, "seek": 153992, "start": 1546.72, "end": 1549.28, "text": " like to actually lay out those things.", "tokens": [411, 281, 767, 2360, 484, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 366, "seek": 153992, "start": 1549.28, "end": 1555.2, "text": " If I do have so much code in the library that I feel like there need to be sub-modules,", "tokens": [759, 286, 360, 362, 370, 709, 3089, 294, 264, 6405, 300, 286, 841, 411, 456, 643, 281, 312, 1422, 12, 8014, 3473, 11], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 367, "seek": 153992, "start": 1555.2, "end": 1562.4, "text": " make them up on the spot, so in the Insta Snapshot testing library that I wrote, I have a lot", "tokens": [652, 552, 493, 322, 264, 4008, 11, 370, 294, 264, 2730, 64, 9264, 2382, 12194, 4997, 6405, 300, 286, 4114, 11, 286, 362, 257, 688], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 368, "seek": 153992, "start": 1562.4, "end": 1566.8000000000002, "text": " of internal types that you actually want to use as a user every once in a while, and they", "tokens": [295, 6920, 3467, 300, 291, 767, 528, 281, 764, 382, 257, 4195, 633, 1564, 294, 257, 1339, 11, 293, 436], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 369, "seek": 153992, "start": 1566.8000000000002, "end": 1568.88, "text": " come from all different locations in the code base.", "tokens": [808, 490, 439, 819, 9253, 294, 264, 3089, 3096, 13], "temperature": 0.0, "avg_logprob": -0.1610334861178358, "compression_ratio": 1.7423076923076923, "no_speech_prob": 1.7741585907060653e-05}, {"id": 370, "seek": 156888, "start": 1568.88, "end": 1573.4, "text": " So what I did is in my librs, I have a pop-mod internals, which is documented, those are", "tokens": [407, 437, 286, 630, 307, 294, 452, 22854, 22943, 11, 286, 362, 257, 1665, 12, 8014, 2154, 1124, 11, 597, 307, 23007, 11, 729, 366], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 371, "seek": 156888, "start": 1573.4, "end": 1577.2800000000002, "text": " internals you're allowed to use, but I just pull them from wherever they're defined.", "tokens": [2154, 1124, 291, 434, 4350, 281, 764, 11, 457, 286, 445, 2235, 552, 490, 8660, 436, 434, 7642, 13], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 372, "seek": 156888, "start": 1577.2800000000002, "end": 1580.3600000000001, "text": " So this module doesn't exist as an internals.rs file.", "tokens": [407, 341, 10088, 1177, 380, 2514, 382, 364, 2154, 1124, 13, 22943, 3991, 13], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 373, "seek": 156888, "start": 1580.3600000000001, "end": 1585.1200000000001, "text": " It's purely a thing that sits in my librs to organize the structure.", "tokens": [467, 311, 17491, 257, 551, 300, 12696, 294, 452, 22854, 22943, 281, 13859, 264, 3877, 13], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 374, "seek": 156888, "start": 1585.1200000000001, "end": 1591.44, "text": " And that way, I have the freedom to move these things around as I want.", "tokens": [400, 300, 636, 11, 286, 362, 264, 5645, 281, 1286, 613, 721, 926, 382, 286, 528, 13], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 375, "seek": 156888, "start": 1591.44, "end": 1595.6000000000001, "text": " Related, every once in a while, you have to export an API that has to be public for reasons", "tokens": [8738, 770, 11, 633, 1564, 294, 257, 1339, 11, 291, 362, 281, 10725, 364, 9362, 300, 575, 281, 312, 1908, 337, 4112], "temperature": 0.0, "avg_logprob": -0.16865467462014025, "compression_ratio": 1.660649819494585, "no_speech_prob": 2.8778005798812956e-05}, {"id": 376, "seek": 159560, "start": 1595.6, "end": 1599.6, "text": " that mostly sit in the restrictions of the language.", "tokens": [300, 5240, 1394, 294, 264, 14191, 295, 264, 2856, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 377, "seek": 159560, "start": 1599.6, "end": 1602.28, "text": " But I really don't want it to use it, so I just hide it.", "tokens": [583, 286, 534, 500, 380, 528, 309, 281, 764, 309, 11, 370, 286, 445, 6479, 309, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 378, "seek": 159560, "start": 1602.28, "end": 1607.08, "text": " So dock hidden, you will find a lot of Rust libraries which have a lot more public API,", "tokens": [407, 20929, 7633, 11, 291, 486, 915, 257, 688, 295, 34952, 15148, 597, 362, 257, 688, 544, 1908, 9362, 11], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 379, "seek": 159560, "start": 1607.08, "end": 1608.08, "text": " but you're not supposed to use it.", "tokens": [457, 291, 434, 406, 3442, 281, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 380, "seek": 159560, "start": 1608.08, "end": 1612.0, "text": " It's usually hidden behind underscore underscore, and it's just hidden.", "tokens": [467, 311, 2673, 7633, 2261, 37556, 37556, 11, 293, 309, 311, 445, 7633, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 381, "seek": 159560, "start": 1612.0, "end": 1613.0, "text": " Why does it exist?", "tokens": [1545, 775, 309, 2514, 30], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 382, "seek": 159560, "start": 1613.0, "end": 1618.8, "text": " On the one hand, because Microsoft needs to access functionality.", "tokens": [1282, 264, 472, 1011, 11, 570, 8116, 2203, 281, 2105, 14980, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 383, "seek": 159560, "start": 1618.8, "end": 1622.28, "text": " The other reason is also that you might have to create dependencies.", "tokens": [440, 661, 1778, 307, 611, 300, 291, 1062, 362, 281, 1884, 36606, 13], "temperature": 0.0, "avg_logprob": -0.1397911976959746, "compression_ratio": 1.6070175438596492, "no_speech_prob": 7.181222372310003e-06}, {"id": 384, "seek": 162228, "start": 1622.28, "end": 1630.48, "text": " So Insta, for instance, has to expose internals out of itself into the test runner called", "tokens": [407, 2730, 64, 11, 337, 5197, 11, 575, 281, 19219, 2154, 1124, 484, 295, 2564, 666, 264, 1500, 24376, 1219], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 385, "seek": 162228, "start": 1630.48, "end": 1632.28, "text": " Cargo Insta.", "tokens": [2741, 1571, 2730, 64, 13], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 386, "seek": 162228, "start": 1632.28, "end": 1636.96, "text": " And the way I do this, I have a hidden feature flag which says if you're Cargo Insta, you", "tokens": [400, 264, 636, 286, 360, 341, 11, 286, 362, 257, 7633, 4111, 7166, 597, 1619, 498, 291, 434, 2741, 1571, 2730, 64, 11, 291], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 387, "seek": 162228, "start": 1636.96, "end": 1637.96, "text": " can use this feature flag.", "tokens": [393, 764, 341, 4111, 7166, 13], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 388, "seek": 162228, "start": 1637.96, "end": 1640.24, "text": " Everybody else, just please don't.", "tokens": [7646, 1646, 11, 445, 1767, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 389, "seek": 162228, "start": 1640.24, "end": 1643.3999999999999, "text": " But if you do still use that feature flag, you're still not going to see all of this", "tokens": [583, 498, 291, 360, 920, 764, 300, 4111, 7166, 11, 291, 434, 920, 406, 516, 281, 536, 439, 295, 341], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 390, "seek": 162228, "start": 1643.3999999999999, "end": 1646.12, "text": " API because it's kind of hidden away.", "tokens": [9362, 570, 309, 311, 733, 295, 7633, 1314, 13], "temperature": 0.0, "avg_logprob": -0.16475848798398618, "compression_ratio": 1.632034632034632, "no_speech_prob": 4.7493860620306805e-05}, {"id": 391, "seek": 164612, "start": 1646.12, "end": 1652.4799999999998, "text": " This also helps when you use, for instance, DocsRS is an awesome tool to document your", "tokens": [639, 611, 3665, 562, 291, 764, 11, 337, 5197, 11, 16024, 82, 43580, 307, 364, 3476, 2290, 281, 4166, 428], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 392, "seek": 164612, "start": 1652.4799999999998, "end": 1653.8, "text": " crates.", "tokens": [941, 1024, 13], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 393, "seek": 164612, "start": 1653.8, "end": 1660.0, "text": " A lot of people run DocsRS with all feature flags so that it's fully documented everything.", "tokens": [316, 688, 295, 561, 1190, 16024, 82, 43580, 365, 439, 4111, 23265, 370, 300, 309, 311, 4498, 23007, 1203, 13], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 394, "seek": 164612, "start": 1660.0, "end": 1664.12, "text": " If I wouldn't hide all of those things, then this internal feature flag that would turn", "tokens": [759, 286, 2759, 380, 6479, 439, 295, 729, 721, 11, 550, 341, 6920, 4111, 7166, 300, 576, 1261], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 395, "seek": 164612, "start": 1664.12, "end": 1666.4799999999998, "text": " on this API would accidentally document it.", "tokens": [322, 341, 9362, 576, 15715, 4166, 309, 13], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 396, "seek": 164612, "start": 1666.4799999999998, "end": 1668.1599999999999, "text": " I don't want that.", "tokens": [286, 500, 380, 528, 300, 13], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 397, "seek": 164612, "start": 1668.1599999999999, "end": 1673.6799999999998, "text": " So even the APIs that sort of are there for me, I will still hide from documentation.", "tokens": [407, 754, 264, 21445, 300, 1333, 295, 366, 456, 337, 385, 11, 286, 486, 920, 6479, 490, 14333, 13], "temperature": 0.0, "avg_logprob": -0.18324636979536577, "compression_ratio": 1.6987951807228916, "no_speech_prob": 3.3126761991297826e-05}, {"id": 398, "seek": 167368, "start": 1673.68, "end": 1679.3600000000001, "text": " Cool, traits.", "tokens": [8561, 11, 19526, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 399, "seek": 167368, "start": 1679.3600000000001, "end": 1682.76, "text": " I have a really complicated relationship with them because I think they're awesome, but", "tokens": [286, 362, 257, 534, 6179, 2480, 365, 552, 570, 286, 519, 436, 434, 3476, 11, 457], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 400, "seek": 167368, "start": 1682.76, "end": 1687.16, "text": " I also kind of don't want them to be in APIs.", "tokens": [286, 611, 733, 295, 500, 380, 528, 552, 281, 312, 294, 21445, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 401, "seek": 167368, "start": 1687.16, "end": 1689.28, "text": " I think they fall into two categories.", "tokens": [286, 519, 436, 2100, 666, 732, 10479, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 402, "seek": 167368, "start": 1689.28, "end": 1694.52, "text": " Some of them are, well, maybe the other way around, open traits are most common one.", "tokens": [2188, 295, 552, 366, 11, 731, 11, 1310, 264, 661, 636, 926, 11, 1269, 19526, 366, 881, 2689, 472, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 403, "seek": 167368, "start": 1694.52, "end": 1697.24, "text": " Asref into, everybody can implement them.", "tokens": [1018, 33115, 666, 11, 2201, 393, 4445, 552, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 404, "seek": 167368, "start": 1697.24, "end": 1700.96, "text": " And then there are a lot of cases where you might have traits that only exist as an internal", "tokens": [400, 550, 456, 366, 257, 688, 295, 3331, 689, 291, 1062, 362, 19526, 300, 787, 2514, 382, 364, 6920], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 405, "seek": 167368, "start": 1700.96, "end": 1701.96, "text": " abstraction.", "tokens": [37765, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 406, "seek": 167368, "start": 1701.96, "end": 1703.5600000000002, "text": " Let's call them sealed traits.", "tokens": [961, 311, 818, 552, 21514, 19526, 13], "temperature": 0.0, "avg_logprob": -0.15608163607322564, "compression_ratio": 1.6304347826086956, "no_speech_prob": 1.3840573956258595e-05}, {"id": 407, "seek": 170356, "start": 1703.56, "end": 1708.28, "text": " They come from a crate and they're only implemented in the crate and nobody ever should implement", "tokens": [814, 808, 490, 257, 42426, 293, 436, 434, 787, 12270, 294, 264, 42426, 293, 5079, 1562, 820, 4445], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 408, "seek": 170356, "start": 1708.28, "end": 1709.28, "text": " those.", "tokens": [729, 13], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 409, "seek": 170356, "start": 1709.28, "end": 1710.6799999999998, "text": " Why do they exist?", "tokens": [1545, 360, 436, 2514, 30], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 410, "seek": 170356, "start": 1710.6799999999998, "end": 1714.56, "text": " Because, for instance, you want to box something up or because you want to have really nice", "tokens": [1436, 11, 337, 5197, 11, 291, 528, 281, 2424, 746, 493, 420, 570, 291, 528, 281, 362, 534, 1481], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 411, "seek": 170356, "start": 1714.56, "end": 1718.2, "text": " documentation where you can select, my crate accepts these types of things.", "tokens": [14333, 689, 291, 393, 3048, 11, 452, 42426, 33538, 613, 3467, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 412, "seek": 170356, "start": 1718.2, "end": 1725.52, "text": " So I wrote a Rust Redis library a couple of years ago where I made the conversion trait", "tokens": [407, 286, 4114, 257, 34952, 4477, 271, 6405, 257, 1916, 295, 924, 2057, 689, 286, 1027, 264, 14298, 22538], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 413, "seek": 170356, "start": 1725.52, "end": 1732.44, "text": " so that you can pass any Rust type that is compatible with Redis in all of those functions.", "tokens": [370, 300, 291, 393, 1320, 604, 34952, 2010, 300, 307, 18218, 365, 4477, 271, 294, 439, 295, 729, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1653665694515262, "compression_ratio": 1.7065217391304348, "no_speech_prob": 1.8327073121326976e-05}, {"id": 414, "seek": 173244, "start": 1732.44, "end": 1733.8400000000001, "text": " And I didn't seal it off.", "tokens": [400, 286, 994, 380, 12185, 309, 766, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 415, "seek": 173244, "start": 1733.8400000000001, "end": 1737.64, "text": " And now it's public interface and people have been sealing off their own types, have been", "tokens": [400, 586, 309, 311, 1908, 9226, 293, 561, 362, 668, 48678, 766, 641, 1065, 3467, 11, 362, 668], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 416, "seek": 173244, "start": 1737.64, "end": 1739.8, "text": " implementing for their own types.", "tokens": [18114, 337, 641, 1065, 3467, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 417, "seek": 173244, "start": 1739.8, "end": 1741.72, "text": " And so now it's just there.", "tokens": [400, 370, 586, 309, 311, 445, 456, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 418, "seek": 173244, "start": 1741.72, "end": 1744.28, "text": " You can't take it away anymore.", "tokens": [509, 393, 380, 747, 309, 1314, 3602, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 419, "seek": 173244, "start": 1744.28, "end": 1749.3600000000001, "text": " Which is fine for that library, but I didn't want to do it in other cases because, to me,", "tokens": [3013, 307, 2489, 337, 300, 6405, 11, 457, 286, 994, 380, 528, 281, 360, 309, 294, 661, 3331, 570, 11, 281, 385, 11], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 420, "seek": 173244, "start": 1749.3600000000001, "end": 1753.44, "text": " that trait actually mostly only existed so that it's there for documentation purposes.", "tokens": [300, 22538, 767, 5240, 787, 13135, 370, 300, 309, 311, 456, 337, 14333, 9932, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 421, "seek": 173244, "start": 1753.44, "end": 1756.0, "text": " So you can seal them in two ways.", "tokens": [407, 291, 393, 12185, 552, 294, 732, 2098, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 422, "seek": 173244, "start": 1756.0, "end": 1761.04, "text": " One is sort of the soft seal, which is just hide the functions that you're supposed to", "tokens": [1485, 307, 1333, 295, 264, 2787, 12185, 11, 597, 307, 445, 6479, 264, 6828, 300, 291, 434, 3442, 281], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 423, "seek": 173244, "start": 1761.04, "end": 1762.04, "text": " implement.", "tokens": [4445, 13], "temperature": 0.0, "avg_logprob": -0.15929570405379587, "compression_ratio": 1.773972602739726, "no_speech_prob": 3.0174682251526974e-05}, {"id": 424, "seek": 176204, "start": 1762.04, "end": 1768.12, "text": " And then it's unclear how you're actually going to implement it.", "tokens": [400, 550, 309, 311, 25636, 577, 291, 434, 767, 516, 281, 4445, 309, 13], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 425, "seek": 176204, "start": 1768.12, "end": 1771.44, "text": " In this case, it's soft sealed, so you can actually call it still and you can actually", "tokens": [682, 341, 1389, 11, 309, 311, 2787, 21514, 11, 370, 291, 393, 767, 818, 309, 920, 293, 291, 393, 767], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 426, "seek": 176204, "start": 1771.44, "end": 1773.1599999999999, "text": " implement it.", "tokens": [4445, 309, 13], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 427, "seek": 176204, "start": 1773.1599999999999, "end": 1776.1599999999999, "text": " I'm not sure if I like it or not, but there are actually some use cases of why you might", "tokens": [286, 478, 406, 988, 498, 286, 411, 309, 420, 406, 11, 457, 456, 366, 767, 512, 764, 3331, 295, 983, 291, 1062], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 428, "seek": 176204, "start": 1776.1599999999999, "end": 1777.1599999999999, "text": " want to do this.", "tokens": [528, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 429, "seek": 176204, "start": 1777.1599999999999, "end": 1779.44, "text": " Mostly you have to do it with code generation.", "tokens": [29035, 291, 362, 281, 360, 309, 365, 3089, 5125, 13], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 430, "seek": 176204, "start": 1779.44, "end": 1783.6399999999999, "text": " But there's also the way of doing a full seal where you put a private serial size type", "tokens": [583, 456, 311, 611, 264, 636, 295, 884, 257, 1577, 12185, 689, 291, 829, 257, 4551, 17436, 2744, 2010], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 431, "seek": 176204, "start": 1783.6399999999999, "end": 1788.08, "text": " into an argument and because it cannot name the type because it's never exposed, you can", "tokens": [666, 364, 6770, 293, 570, 309, 2644, 1315, 264, 2010, 570, 309, 311, 1128, 9495, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 432, "seek": 176204, "start": 1788.08, "end": 1791.52, "text": " absolutely not call this ever.", "tokens": [3122, 406, 818, 341, 1562, 13], "temperature": 0.0, "avg_logprob": -0.14856261928586195, "compression_ratio": 1.8041237113402062, "no_speech_prob": 1.4955012375139631e-05}, {"id": 433, "seek": 179152, "start": 1791.52, "end": 1796.32, "text": " And the funny thing is Rust actually depends in the standard library of this pattern a lot.", "tokens": [400, 264, 4074, 551, 307, 34952, 767, 5946, 294, 264, 3832, 6405, 295, 341, 5102, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 434, "seek": 179152, "start": 1796.32, "end": 1803.4, "text": " If you use any type and the generated downcasting feature, it uses an internal system called", "tokens": [759, 291, 764, 604, 2010, 293, 264, 10833, 760, 48860, 4111, 11, 309, 4960, 364, 6920, 1185, 1219], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 435, "seek": 179152, "start": 1803.4, "end": 1806.8799999999999, "text": " type ID to return a unique number for a type.", "tokens": [2010, 7348, 281, 2736, 257, 3845, 1230, 337, 257, 2010, 13], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 436, "seek": 179152, "start": 1806.8799999999999, "end": 1811.16, "text": " If you were to be able to override this and lie about your own type, you could cause unsafe", "tokens": [759, 291, 645, 281, 312, 1075, 281, 42321, 341, 293, 4544, 466, 428, 1065, 2010, 11, 291, 727, 3082, 35948], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 437, "seek": 179152, "start": 1811.16, "end": 1812.68, "text": " memory access, right?", "tokens": [4675, 2105, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 438, "seek": 179152, "start": 1812.68, "end": 1817.6399999999999, "text": " And so they have a seal marker in there that you can't implement and only the default implementation", "tokens": [400, 370, 436, 362, 257, 12185, 15247, 294, 456, 300, 291, 393, 380, 4445, 293, 787, 264, 7576, 11420], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 439, "seek": 179152, "start": 1817.6399999999999, "end": 1821.44, "text": " is only the valid only implementation.", "tokens": [307, 787, 264, 7363, 787, 11420, 13], "temperature": 0.0, "avg_logprob": -0.12793438058150441, "compression_ratio": 1.7102473498233215, "no_speech_prob": 1.3618509001389612e-05}, {"id": 440, "seek": 182144, "start": 1821.44, "end": 1822.44, "text": " So it's a pattern.", "tokens": [407, 309, 311, 257, 5102, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 441, "seek": 182144, "start": 1822.44, "end": 1824.8400000000001, "text": " It's just not a pattern that has syntax support.", "tokens": [467, 311, 445, 406, 257, 5102, 300, 575, 28431, 1406, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 442, "seek": 182144, "start": 1824.8400000000001, "end": 1827.1200000000001, "text": " It's just used that way.", "tokens": [467, 311, 445, 1143, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 443, "seek": 182144, "start": 1827.1200000000001, "end": 1831.0800000000002, "text": " For now, maybe it will eventually get one.", "tokens": [1171, 586, 11, 1310, 309, 486, 4728, 483, 472, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 444, "seek": 182144, "start": 1831.0800000000002, "end": 1832.88, "text": " So why do I not like traits that much?", "tokens": [407, 983, 360, 286, 406, 411, 19526, 300, 709, 30], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 445, "seek": 182144, "start": 1832.88, "end": 1835.2, "text": " Because I find them incredibly hard to discover.", "tokens": [1436, 286, 915, 552, 6252, 1152, 281, 4411, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 446, "seek": 182144, "start": 1835.2, "end": 1839.44, "text": " It's very annoying if you import a type from your library and then you want to call a method", "tokens": [467, 311, 588, 11304, 498, 291, 974, 257, 2010, 490, 428, 6405, 293, 550, 291, 528, 281, 818, 257, 3170], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 447, "seek": 182144, "start": 1839.44, "end": 1843.6000000000001, "text": " on it and the method is not there until you bring the traits into scope.", "tokens": [322, 309, 293, 264, 3170, 307, 406, 456, 1826, 291, 1565, 264, 19526, 666, 11923, 13], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 448, "seek": 182144, "start": 1843.6000000000001, "end": 1847.48, "text": " And I know that a lot of people write this awesome preludes where like import this from", "tokens": [400, 286, 458, 300, 257, 688, 295, 561, 2464, 341, 3476, 659, 1471, 279, 689, 411, 974, 341, 490], "temperature": 0.0, "avg_logprob": -0.12847761809825897, "compression_ratio": 1.6914893617021276, "no_speech_prob": 2.9712920877500437e-05}, {"id": 449, "seek": 184748, "start": 1847.48, "end": 1853.1200000000001, "text": " my library and now, by the way, you have 20 types sitting around in your scope.", "tokens": [452, 6405, 293, 586, 11, 538, 264, 636, 11, 291, 362, 945, 3467, 3798, 926, 294, 428, 11923, 13], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 450, "seek": 184748, "start": 1853.1200000000001, "end": 1855.16, "text": " It works, but it has a whole bunch of problems.", "tokens": [467, 1985, 11, 457, 309, 575, 257, 1379, 3840, 295, 2740, 13], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 451, "seek": 184748, "start": 1855.16, "end": 1859.84, "text": " One of which is that it makes your error messages a lot more confusing because there are traits", "tokens": [1485, 295, 597, 307, 300, 309, 1669, 428, 6713, 7897, 257, 688, 544, 13181, 570, 456, 366, 19526], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 452, "seek": 184748, "start": 1859.84, "end": 1864.24, "text": " in a standard library that if they are in scope, types with the inherent implementations", "tokens": [294, 257, 3832, 6405, 300, 498, 436, 366, 294, 11923, 11, 3467, 365, 264, 26387, 4445, 763], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 453, "seek": 184748, "start": 1864.24, "end": 1865.84, "text": " will no longer function the same.", "tokens": [486, 572, 2854, 2445, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 454, "seek": 184748, "start": 1865.84, "end": 1870.52, "text": " There's a type called, I think it's called borough, a trait called borough.", "tokens": [821, 311, 257, 2010, 1219, 11, 286, 519, 309, 311, 1219, 14828, 581, 11, 257, 22538, 1219, 14828, 581, 13], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 455, "seek": 184748, "start": 1870.52, "end": 1875.24, "text": " If you bring borough into your scope, you can no longer borrow from, I think, a ref cell.", "tokens": [759, 291, 1565, 14828, 581, 666, 428, 11923, 11, 291, 393, 572, 2854, 11172, 490, 11, 286, 519, 11, 257, 1895, 2815, 13], "temperature": 0.0, "avg_logprob": -0.13557530894423975, "compression_ratio": 1.7534246575342465, "no_speech_prob": 1.3409548955678474e-05}, {"id": 456, "seek": 187524, "start": 1875.24, "end": 1880.28, "text": " It will error because the trait overwrites the inherent implementation.", "tokens": [467, 486, 6713, 570, 264, 22538, 670, 86, 30931, 264, 26387, 11420, 13], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 457, "seek": 187524, "start": 1880.28, "end": 1884.64, "text": " So that's not great and there's a bug report from like seven years ago, I think, and there's", "tokens": [407, 300, 311, 406, 869, 293, 456, 311, 257, 7426, 2275, 490, 411, 3407, 924, 2057, 11, 286, 519, 11, 293, 456, 311], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 458, "seek": 187524, "start": 1884.64, "end": 1886.68, "text": " already, but how do you change it now?", "tokens": [1217, 11, 457, 577, 360, 291, 1319, 309, 586, 30], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 459, "seek": 187524, "start": 1886.68, "end": 1889.84, "text": " It's like that's the behavior, but that's the problem that you have with preludes because", "tokens": [467, 311, 411, 300, 311, 264, 5223, 11, 457, 300, 311, 264, 1154, 300, 291, 362, 365, 659, 1471, 279, 570], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 460, "seek": 187524, "start": 1889.84, "end": 1894.44, "text": " they are just based by name and it will say like, well, there is no implementation by", "tokens": [436, 366, 445, 2361, 538, 1315, 293, 309, 486, 584, 411, 11, 731, 11, 456, 307, 572, 11420, 538], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 461, "seek": 187524, "start": 1894.44, "end": 1898.04, "text": " that name or it doesn't help you that there's an inherent method on this thing.", "tokens": [300, 1315, 420, 309, 1177, 380, 854, 291, 300, 456, 311, 364, 26387, 3170, 322, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 462, "seek": 187524, "start": 1898.04, "end": 1899.24, "text": " I'm not going to let you call it.", "tokens": [286, 478, 406, 516, 281, 718, 291, 818, 309, 13], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 463, "seek": 187524, "start": 1899.24, "end": 1901.68, "text": " You have to disambigate your call.", "tokens": [509, 362, 281, 717, 2173, 328, 473, 428, 818, 13], "temperature": 0.0, "avg_logprob": -0.20595506211401712, "compression_ratio": 1.8082191780821917, "no_speech_prob": 5.42046427653986e-06}, {"id": 464, "seek": 190168, "start": 1901.68, "end": 1908.3600000000001, "text": " So there is some problem coming with the trait stuff and they're really useful, but you shouldn't", "tokens": [407, 456, 307, 512, 1154, 1348, 365, 264, 22538, 1507, 293, 436, 434, 534, 4420, 11, 457, 291, 4659, 380], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 465, "seek": 190168, "start": 1908.3600000000001, "end": 1910.5600000000002, "text": " maybe overdo them, I think, to some degree.", "tokens": [1310, 670, 2595, 552, 11, 286, 519, 11, 281, 512, 4314, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 466, "seek": 190168, "start": 1910.5600000000002, "end": 1914.48, "text": " It's really nice if the type out of the box already has a neat little behavior.", "tokens": [467, 311, 534, 1481, 498, 264, 2010, 484, 295, 264, 2424, 1217, 575, 257, 10654, 707, 5223, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 467, "seek": 190168, "start": 1914.48, "end": 1919.88, "text": " And if you want to abstract to a multiple stuff, you can add the traits later anyways.", "tokens": [400, 498, 291, 528, 281, 12649, 281, 257, 3866, 1507, 11, 291, 393, 909, 264, 19526, 1780, 13448, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 468, "seek": 190168, "start": 1919.88, "end": 1922.6000000000001, "text": " There are however traits you should probably implement all the time.", "tokens": [821, 366, 4461, 19526, 291, 820, 1391, 4445, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 469, "seek": 190168, "start": 1922.6000000000001, "end": 1924.6000000000001, "text": " My favorite one is debug.", "tokens": [1222, 2954, 472, 307, 24083, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 470, "seek": 190168, "start": 1924.6000000000001, "end": 1926.28, "text": " It should be on all your public types.", "tokens": [467, 820, 312, 322, 439, 428, 1908, 3467, 13], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 471, "seek": 190168, "start": 1926.28, "end": 1931.6000000000001, "text": " If you feel like it's blowing up your code generation times too much, you can hide it", "tokens": [759, 291, 841, 411, 309, 311, 15068, 493, 428, 3089, 5125, 1413, 886, 709, 11, 291, 393, 6479, 309], "temperature": 0.0, "avg_logprob": -0.14906559133888186, "compression_ratio": 1.7142857142857142, "no_speech_prob": 5.769064500782406e-06}, {"id": 472, "seek": 193160, "start": 1931.6, "end": 1936.48, "text": " behind an external and extra flag you can turn on demand.", "tokens": [2261, 364, 8320, 293, 2857, 7166, 291, 393, 1261, 322, 4733, 13], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 473, "seek": 193160, "start": 1936.48, "end": 1940.36, "text": " I give you a very good reason why debug should be on all your types.", "tokens": [286, 976, 291, 257, 588, 665, 1778, 983, 24083, 820, 312, 322, 439, 428, 3467, 13], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 474, "seek": 193160, "start": 1940.36, "end": 1943.56, "text": " Every once in a while, you have to be generic over something and then you will usually say", "tokens": [2048, 1564, 294, 257, 1339, 11, 291, 362, 281, 312, 19577, 670, 746, 293, 550, 291, 486, 2673, 584], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 475, "seek": 193160, "start": 1943.56, "end": 1947.52, "text": " like, I'm generic over serialize or I'm generic over my really cool thing that you should", "tokens": [411, 11, 286, 478, 19577, 670, 17436, 1125, 420, 286, 478, 19577, 670, 452, 534, 1627, 551, 300, 291, 820], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 476, "seek": 193160, "start": 1947.52, "end": 1948.52, "text": " be calling.", "tokens": [312, 5141, 13], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 477, "seek": 193160, "start": 1948.52, "end": 1954.84, "text": " And the problem is when you're generic over serialize only and you're deep down in nested", "tokens": [400, 264, 1154, 307, 562, 291, 434, 19577, 670, 17436, 1125, 787, 293, 291, 434, 2452, 760, 294, 15646, 292], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 478, "seek": 193160, "start": 1954.84, "end": 1959.7199999999998, "text": " generic over serialize type and you want to debug print, you can no longer do that because", "tokens": [19577, 670, 17436, 1125, 2010, 293, 291, 528, 281, 24083, 4482, 11, 291, 393, 572, 2854, 360, 300, 570], "temperature": 0.0, "avg_logprob": -0.12631815338134766, "compression_ratio": 1.9157088122605364, "no_speech_prob": 3.6115627608523937e-06}, {"id": 479, "seek": 195972, "start": 1959.72, "end": 1962.44, "text": " serialize does not imply debug.", "tokens": [17436, 1125, 775, 406, 33616, 24083, 13], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 480, "seek": 195972, "start": 1962.44, "end": 1969.16, "text": " So even if a type is capable of debug serializing because it's not a trade bound on the thing,", "tokens": [407, 754, 498, 257, 2010, 307, 8189, 295, 24083, 17436, 3319, 570, 309, 311, 406, 257, 4923, 5472, 322, 264, 551, 11], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 481, "seek": 195972, "start": 1969.16, "end": 1973.8, "text": " you cannot call it there, which is very, very annoying in a lot of code setups.", "tokens": [291, 2644, 818, 309, 456, 11, 597, 307, 588, 11, 588, 11304, 294, 257, 688, 295, 3089, 46832, 13], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 482, "seek": 195972, "start": 1973.8, "end": 1978.64, "text": " And so what I do these days, I will make debug and implied bound on a lot of, so like a super", "tokens": [400, 370, 437, 286, 360, 613, 1708, 11, 286, 486, 652, 24083, 293, 32614, 5472, 322, 257, 688, 295, 11, 370, 411, 257, 1687], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 483, "seek": 195972, "start": 1978.64, "end": 1987.72, "text": " trade on a lot of the things that I actually expect to be very deep in code calls so that", "tokens": [4923, 322, 257, 688, 295, 264, 721, 300, 286, 767, 2066, 281, 312, 588, 2452, 294, 3089, 5498, 370, 300], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 484, "seek": 195972, "start": 1987.72, "end": 1989.1200000000001, "text": " I can actually debug the whole thing.", "tokens": [286, 393, 767, 24083, 264, 1379, 551, 13], "temperature": 0.0, "avg_logprob": -0.14256289967319422, "compression_ratio": 1.7613168724279835, "no_speech_prob": 4.9362365643901285e-06}, {"id": 485, "seek": 198912, "start": 1989.12, "end": 1993.8799999999999, "text": " And the problem is that that requires that the ecosystem embraces the idea that almost", "tokens": [400, 264, 1154, 307, 300, 300, 7029, 300, 264, 11311, 9392, 2116, 264, 1558, 300, 1920], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 486, "seek": 198912, "start": 1993.8799999999999, "end": 1995.8, "text": " everything is debuggable.", "tokens": [1203, 307, 3001, 3562, 712, 13], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 487, "seek": 198912, "start": 1995.8, "end": 1998.1999999999998, "text": " So just make it debug.", "tokens": [407, 445, 652, 309, 24083, 13], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 488, "seek": 198912, "start": 1998.1999999999998, "end": 2002.9199999999998, "text": " And if you really think it's blowing up a compile time, just put a second flag in that", "tokens": [400, 498, 291, 534, 519, 309, 311, 15068, 493, 257, 31413, 565, 11, 445, 829, 257, 1150, 7166, 294, 300], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 489, "seek": 198912, "start": 2002.9199999999998, "end": 2005.84, "text": " it can turn on when you need it.", "tokens": [309, 393, 1261, 322, 562, 291, 643, 309, 13], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 490, "seek": 198912, "start": 2005.84, "end": 2012.9599999999998, "text": " But not being able to debug very deep down in generic code land is just an unnecessary", "tokens": [583, 406, 885, 1075, 281, 24083, 588, 2452, 760, 294, 19577, 3089, 2117, 307, 445, 364, 19350], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 491, "seek": 198912, "start": 2012.9599999999998, "end": 2015.28, "text": " frustration you can avoid.", "tokens": [20491, 291, 393, 5042, 13], "temperature": 0.0, "avg_logprob": -0.11423622934441817, "compression_ratio": 1.618421052631579, "no_speech_prob": 1.1292054296063725e-05}, {"id": 492, "seek": 201528, "start": 2015.28, "end": 2019.2, "text": " This trade is almost like debug, it just converts this thing to string.", "tokens": [639, 4923, 307, 1920, 411, 24083, 11, 309, 445, 38874, 341, 551, 281, 6798, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 493, "seek": 201528, "start": 2019.2, "end": 2023.84, "text": " It's obviously useful for a bunch of cases, but I can definitely overdo it.", "tokens": [467, 311, 2745, 4420, 337, 257, 3840, 295, 3331, 11, 457, 286, 393, 2138, 670, 2595, 309, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 494, "seek": 201528, "start": 2023.84, "end": 2029.6399999999999, "text": " I much rather have the compiler yell at me that I should be telling it how to format", "tokens": [286, 709, 2831, 362, 264, 31958, 20525, 412, 385, 300, 286, 820, 312, 3585, 309, 577, 281, 7877], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 495, "seek": 201528, "start": 2029.6399999999999, "end": 2034.48, "text": " rather than the string, that the type in itself just being formatable.", "tokens": [2831, 813, 264, 6798, 11, 300, 264, 2010, 294, 2564, 445, 885, 7877, 712, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 496, "seek": 201528, "start": 2034.48, "end": 2036.6399999999999, "text": " But there are obviously like a lot of types for which it's necessary.", "tokens": [583, 456, 366, 2745, 411, 257, 688, 295, 3467, 337, 597, 309, 311, 4818, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 497, "seek": 201528, "start": 2036.6399999999999, "end": 2039.6, "text": " Like if you have a UIA IDE, you would expect that the stringifies.", "tokens": [1743, 498, 291, 362, 257, 624, 6914, 40930, 11, 291, 576, 2066, 300, 264, 6798, 11221, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 498, "seek": 201528, "start": 2039.6, "end": 2045.24, "text": " If you have an error, errors have to be stringified so you can't really opt out of it anyways.", "tokens": [759, 291, 362, 364, 6713, 11, 13603, 362, 281, 312, 6798, 2587, 370, 291, 393, 380, 534, 2427, 484, 295, 309, 13448, 13], "temperature": 0.0, "avg_logprob": -0.18137738304416628, "compression_ratio": 1.742671009771987, "no_speech_prob": 8.396807970711961e-06}, {"id": 499, "seek": 204524, "start": 2045.24, "end": 2055.72, "text": " But I feel like that a lot of types, actual way to convert it into a string is the debug", "tokens": [583, 286, 841, 411, 300, 257, 688, 295, 3467, 11, 3539, 636, 281, 7620, 309, 666, 257, 6798, 307, 264, 24083], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 500, "seek": 204524, "start": 2055.72, "end": 2059.48, "text": " thing is really hard to discover API.", "tokens": [551, 307, 534, 1152, 281, 4411, 9362, 13], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 501, "seek": 204524, "start": 2059.48, "end": 2063.8, "text": " Like yes, of course, then I get two string methods appears, but you don't know if this", "tokens": [1743, 2086, 11, 295, 1164, 11, 550, 286, 483, 732, 6798, 7150, 7038, 11, 457, 291, 500, 380, 458, 498, 341], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 502, "seek": 204524, "start": 2063.8, "end": 2067.4, "text": " is a thing that you're supposed to look at or if it's just a debug format with a different", "tokens": [307, 257, 551, 300, 291, 434, 3442, 281, 574, 412, 420, 498, 309, 311, 445, 257, 24083, 7877, 365, 257, 819], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 503, "seek": 204524, "start": 2067.4, "end": 2069.52, "text": " output.", "tokens": [5598, 13], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 504, "seek": 204524, "start": 2069.52, "end": 2070.52, "text": " I've seen both.", "tokens": [286, 600, 1612, 1293, 13], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 505, "seek": 204524, "start": 2070.52, "end": 2074.0, "text": " There are some types where you can call two string on it, but it's really not the real", "tokens": [821, 366, 512, 3467, 689, 291, 393, 818, 732, 6798, 322, 309, 11, 457, 309, 311, 534, 406, 264, 957], "temperature": 0.0, "avg_logprob": -0.17755347804019325, "compression_ratio": 1.6274509803921569, "no_speech_prob": 9.662767297413666e-06}, {"id": 506, "seek": 207400, "start": 2074.0, "end": 2078.64, "text": " string form, you have to pick a different one, and it's just an alias for debug print,", "tokens": [6798, 1254, 11, 291, 362, 281, 1888, 257, 819, 472, 11, 293, 309, 311, 445, 364, 419, 4609, 337, 24083, 4482, 11], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 507, "seek": 207400, "start": 2078.64, "end": 2080.44, "text": " and sometimes it's the real deal.", "tokens": [293, 2171, 309, 311, 264, 957, 2028, 13], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 508, "seek": 207400, "start": 2080.44, "end": 2085.2, "text": " So this is a very confusing trait, I think.", "tokens": [407, 341, 307, 257, 588, 13181, 22538, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 509, "seek": 207400, "start": 2085.2, "end": 2092.32, "text": " Copy and clone are obviously the most common traits that you have to deal with.", "tokens": [25653, 293, 26506, 366, 2745, 264, 881, 2689, 19526, 300, 291, 362, 281, 2028, 365, 13], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 510, "seek": 207400, "start": 2092.32, "end": 2096.96, "text": " Once granted, impossible to take away, I would say, because people start expecting that they", "tokens": [3443, 12344, 11, 6243, 281, 747, 1314, 11, 286, 576, 584, 11, 570, 561, 722, 9650, 300, 436], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 511, "seek": 207400, "start": 2096.96, "end": 2097.96, "text": " can clone it.", "tokens": [393, 26506, 309, 13], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 512, "seek": 207400, "start": 2097.96, "end": 2103.48, "text": " And so copy is a really tricky one because you can only uphold it for as long as it looks", "tokens": [400, 370, 5055, 307, 257, 534, 12414, 472, 570, 291, 393, 787, 34451, 309, 337, 382, 938, 382, 309, 1542], "temperature": 0.0, "avg_logprob": -0.12396459164826766, "compression_ratio": 1.6455223880597014, "no_speech_prob": 1.1121516763523687e-05}, {"id": 513, "seek": 210348, "start": 2103.48, "end": 2105.96, "text": " like a certain type of structure.", "tokens": [411, 257, 1629, 2010, 295, 3877, 13], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 514, "seek": 210348, "start": 2105.96, "end": 2110.16, "text": " Once you put something in there that's not copied, there is no way to fake the copy.", "tokens": [3443, 291, 829, 746, 294, 456, 300, 311, 406, 25365, 11, 456, 307, 572, 636, 281, 7592, 264, 5055, 13], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 515, "seek": 210348, "start": 2110.16, "end": 2114.2, "text": " And so if you make your type copy and then you later discover that that was a mistake,", "tokens": [400, 370, 498, 291, 652, 428, 2010, 5055, 293, 550, 291, 1780, 4411, 300, 300, 390, 257, 6146, 11], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 516, "seek": 210348, "start": 2114.2, "end": 2119.92, "text": " you now need to hold an arc, it's a breaking change, and I don't like breaking changes.", "tokens": [291, 586, 643, 281, 1797, 364, 10346, 11, 309, 311, 257, 7697, 1319, 11, 293, 286, 500, 380, 411, 7697, 2962, 13], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 517, "seek": 210348, "start": 2119.92, "end": 2125.72, "text": " So about copy, you have to think, will you uphold this forever?", "tokens": [407, 466, 5055, 11, 291, 362, 281, 519, 11, 486, 291, 34451, 341, 5680, 30], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 518, "seek": 210348, "start": 2125.72, "end": 2130.56, "text": " Clone, I think, is actually relatively fine to backport.", "tokens": [45536, 11, 286, 519, 11, 307, 767, 7226, 2489, 281, 646, 2707, 13], "temperature": 0.0, "avg_logprob": -0.15680892250754616, "compression_ratio": 1.649402390438247, "no_speech_prob": 1.4950246622902341e-05}, {"id": 519, "seek": 213056, "start": 2130.56, "end": 2134.36, "text": " If you discover over time that you really can't clone the thing anymore, you just put", "tokens": [759, 291, 4411, 670, 565, 300, 291, 534, 393, 380, 26506, 264, 551, 3602, 11, 291, 445, 829], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 520, "seek": 213056, "start": 2134.36, "end": 2135.7999999999997, "text": " an arc over it.", "tokens": [364, 10346, 670, 309, 13], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 521, "seek": 213056, "start": 2135.7999999999997, "end": 2140.4, "text": " So a very common reason in the past, I've noticed that I have a type, it has cloned,", "tokens": [407, 257, 588, 2689, 1778, 294, 264, 1791, 11, 286, 600, 5694, 300, 286, 362, 257, 2010, 11, 309, 575, 596, 19009, 11], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 522, "seek": 213056, "start": 2140.4, "end": 2144.2, "text": " and now it can no longer be cloned because it holds a boxed-in function.", "tokens": [293, 586, 309, 393, 572, 2854, 312, 596, 19009, 570, 309, 9190, 257, 2424, 292, 12, 259, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 523, "seek": 213056, "start": 2144.2, "end": 2145.2, "text": " Doesn't actually matter.", "tokens": [12955, 380, 767, 1871, 13], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 524, "seek": 213056, "start": 2145.2, "end": 2149.64, "text": " Instead of a boxed-in function, make an arced-in function, and it works again.", "tokens": [7156, 295, 257, 2424, 292, 12, 259, 2445, 11, 652, 364, 10346, 292, 12, 259, 2445, 11, 293, 309, 1985, 797, 13], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 525, "seek": 213056, "start": 2149.64, "end": 2153.2, "text": " So a lot of these sort of classic cases of, hey, I can't clone this anymore because of", "tokens": [407, 257, 688, 295, 613, 1333, 295, 7230, 3331, 295, 11, 4177, 11, 286, 393, 380, 26506, 341, 3602, 570, 295], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 526, "seek": 213056, "start": 2153.2, "end": 2159.2, "text": " a reason, you just arc it, it's fine.", "tokens": [257, 1778, 11, 291, 445, 10346, 309, 11, 309, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.1235878550922954, "compression_ratio": 1.8415094339622642, "no_speech_prob": 9.96895232674433e-06}, {"id": 527, "seek": 215920, "start": 2159.2, "end": 2163.56, "text": " And then the problem with copy is also that the inverse, you don't put copy on something", "tokens": [400, 550, 264, 1154, 365, 5055, 307, 611, 300, 264, 17340, 11, 291, 500, 380, 829, 5055, 322, 746], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 528, "seek": 215920, "start": 2163.56, "end": 2166.52, "text": " and then people get really angry because they expect it to copy.", "tokens": [293, 550, 561, 483, 534, 6884, 570, 436, 2066, 309, 281, 5055, 13], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 529, "seek": 215920, "start": 2166.52, "end": 2168.3999999999996, "text": " Classic case is the range type in Rust.", "tokens": [25008, 1389, 307, 264, 3613, 2010, 294, 34952, 13], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 530, "seek": 215920, "start": 2168.3999999999996, "end": 2173.2, "text": " It doesn't copy, everybody is like, it doesn't understand why does it not copy.", "tokens": [467, 1177, 380, 5055, 11, 2201, 307, 411, 11, 309, 1177, 380, 1223, 983, 775, 309, 406, 5055, 13], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 531, "seek": 215920, "start": 2173.2, "end": 2175.8399999999997, "text": " There's a good reason why it doesn't copy, but it's really annoying, and I think it's", "tokens": [821, 311, 257, 665, 1778, 983, 309, 1177, 380, 5055, 11, 457, 309, 311, 534, 11304, 11, 293, 286, 519, 309, 311], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 532, "seek": 215920, "start": 2175.8399999999997, "end": 2182.04, "text": " one of the most common frustrations in Rust that the range type is not copy, and that you", "tokens": [472, 295, 264, 881, 2689, 7454, 12154, 294, 34952, 300, 264, 3613, 2010, 307, 406, 5055, 11, 293, 300, 291], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 533, "seek": 215920, "start": 2182.04, "end": 2189.08, "text": " have to clone it all the time, like this by response on GitHub, I think.", "tokens": [362, 281, 26506, 309, 439, 264, 565, 11, 411, 341, 538, 4134, 322, 23331, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.15822389546562643, "compression_ratio": 1.8, "no_speech_prob": 3.367452882230282e-05}, {"id": 534, "seek": 218908, "start": 2189.08, "end": 2192.7599999999998, "text": " This is one of our only briefly cover, but I don't have recommendations on if something", "tokens": [639, 307, 472, 295, 527, 787, 10515, 2060, 11, 457, 286, 500, 380, 362, 10434, 322, 498, 746], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 535, "seek": 218908, "start": 2192.7599999999998, "end": 2200.56, "text": " should be sent or synced, but I do think that it's actually totally fine not to have objects", "tokens": [820, 312, 2279, 420, 5451, 1232, 11, 457, 286, 360, 519, 300, 309, 311, 767, 3879, 2489, 406, 281, 362, 6565], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 536, "seek": 218908, "start": 2200.56, "end": 2202.84, "text": " that are thread safe.", "tokens": [300, 366, 7207, 3273, 13], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 537, "seek": 218908, "start": 2202.84, "end": 2207.48, "text": " And the reason for that is that you can often just tell a user, they can create an API where", "tokens": [400, 264, 1778, 337, 300, 307, 300, 291, 393, 2049, 445, 980, 257, 4195, 11, 436, 393, 1884, 364, 9362, 689], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 538, "seek": 218908, "start": 2207.48, "end": 2209.24, "text": " the user doesn't really have to do this.", "tokens": [264, 4195, 1177, 380, 534, 362, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 539, "seek": 218908, "start": 2209.24, "end": 2213.36, "text": " They can just put this locally and they're done.", "tokens": [814, 393, 445, 829, 341, 16143, 293, 436, 434, 1096, 13], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 540, "seek": 218908, "start": 2213.36, "end": 2214.36, "text": " Why?", "tokens": [1545, 30], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 541, "seek": 218908, "start": 2214.36, "end": 2217.56, "text": " Because, for instance, one of the things that I love to do is create this sort of session", "tokens": [1436, 11, 337, 5197, 11, 472, 295, 264, 721, 300, 286, 959, 281, 360, 307, 1884, 341, 1333, 295, 5481], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 542, "seek": 218908, "start": 2217.56, "end": 2218.56, "text": " abstraction.", "tokens": [37765, 13], "temperature": 0.0, "avg_logprob": -0.16664758828970103, "compression_ratio": 1.7237762237762237, "no_speech_prob": 1.643580435484182e-05}, {"id": 543, "seek": 221856, "start": 2218.56, "end": 2223.24, "text": " The session abstraction is I want to deal with a bunch of objects for the scope of one", "tokens": [440, 5481, 37765, 307, 286, 528, 281, 2028, 365, 257, 3840, 295, 6565, 337, 264, 11923, 295, 472], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 544, "seek": 221856, "start": 2223.24, "end": 2224.88, "text": " function only.", "tokens": [2445, 787, 13], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 545, "seek": 221856, "start": 2224.88, "end": 2228.2799999999997, "text": " So I load everything into some sort of environment where I do some stuff with it, I have an object", "tokens": [407, 286, 3677, 1203, 666, 512, 1333, 295, 2823, 689, 286, 360, 512, 1507, 365, 309, 11, 286, 362, 364, 2657], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 546, "seek": 221856, "start": 2228.2799999999997, "end": 2231.84, "text": " called the session, it tracks a whole bunch of data modifications, it gives me access", "tokens": [1219, 264, 5481, 11, 309, 10218, 257, 1379, 3840, 295, 1412, 26881, 11, 309, 2709, 385, 2105], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 547, "seek": 221856, "start": 2231.84, "end": 2235.36, "text": " to something, it's the only thing that ever needs to hold this thing, and then when I'm", "tokens": [281, 746, 11, 309, 311, 264, 787, 551, 300, 1562, 2203, 281, 1797, 341, 551, 11, 293, 550, 562, 286, 478], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 548, "seek": 221856, "start": 2235.36, "end": 2239.24, "text": " done with it, I tear down the session and my lifetime problem goes away.", "tokens": [1096, 365, 309, 11, 286, 12556, 760, 264, 5481, 293, 452, 11364, 1154, 1709, 1314, 13], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 549, "seek": 221856, "start": 2239.24, "end": 2244.96, "text": " So for as long as you don't have to pass this over really complicated boundaries, just", "tokens": [407, 337, 382, 938, 382, 291, 500, 380, 362, 281, 1320, 341, 670, 534, 6179, 13180, 11, 445], "temperature": 0.0, "avg_logprob": -0.13100242614746094, "compression_ratio": 1.78, "no_speech_prob": 1.3005537766730413e-05}, {"id": 550, "seek": 224496, "start": 2244.96, "end": 2250.4, "text": " have this thing, make a session abstraction, hold all the data in there that borrows temporarily", "tokens": [362, 341, 551, 11, 652, 257, 5481, 37765, 11, 1797, 439, 264, 1412, 294, 456, 300, 14828, 28251, 23750], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 551, "seek": 224496, "start": 2250.4, "end": 2253.32, "text": " and then disregard it.", "tokens": [293, 550, 44493, 309, 13], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 552, "seek": 224496, "start": 2253.32, "end": 2257.6, "text": " So this is from our Symbolication Library, it holds, when you want to deal with a debug", "tokens": [407, 341, 307, 490, 527, 3902, 5612, 8758, 12806, 11, 309, 9190, 11, 562, 291, 528, 281, 2028, 365, 257, 24083], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 553, "seek": 224496, "start": 2257.6, "end": 2261.7200000000003, "text": " file, you open up this debug session, you do a bunch of stuff, you tear it down.", "tokens": [3991, 11, 291, 1269, 493, 341, 24083, 5481, 11, 291, 360, 257, 3840, 295, 1507, 11, 291, 12556, 309, 760, 13], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 554, "seek": 224496, "start": 2261.7200000000003, "end": 2266.28, "text": " And we have never, I think, had a case where we need to hold on to this, where the lifetime", "tokens": [400, 321, 362, 1128, 11, 286, 519, 11, 632, 257, 1389, 689, 321, 643, 281, 1797, 322, 281, 341, 11, 689, 264, 11364], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 555, "seek": 224496, "start": 2266.28, "end": 2267.52, "text": " was actually a problem.", "tokens": [390, 767, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 556, "seek": 224496, "start": 2267.52, "end": 2271.7200000000003, "text": " But you will notice here there's a self-cell in there, which I think is probably one of", "tokens": [583, 291, 486, 3449, 510, 456, 311, 257, 2698, 12, 4164, 294, 456, 11, 597, 286, 519, 307, 1391, 472, 295], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 557, "seek": 224496, "start": 2271.7200000000003, "end": 2273.84, "text": " the best things you can have.", "tokens": [264, 1151, 721, 291, 393, 362, 13], "temperature": 0.0, "avg_logprob": -0.1639873913356236, "compression_ratio": 1.7058823529411764, "no_speech_prob": 1.0610360732243862e-05}, {"id": 558, "seek": 227384, "start": 2273.84, "end": 2278.8, "text": " Then you create an API, and then you discover I need to borrow into myself, and Russ doesn't", "tokens": [1396, 291, 1884, 364, 9362, 11, 293, 550, 291, 4411, 286, 643, 281, 11172, 666, 2059, 11, 293, 3878, 1177, 380], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 559, "seek": 227384, "start": 2278.8, "end": 2281.7200000000003, "text": " do that, but self-cell lets you do that.", "tokens": [360, 300, 11, 457, 2698, 12, 4164, 6653, 291, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 560, "seek": 227384, "start": 2281.7200000000003, "end": 2284.44, "text": " So there are a lot of crates that have been created over the years that you can borrow", "tokens": [407, 456, 366, 257, 688, 295, 941, 1024, 300, 362, 668, 2942, 670, 264, 924, 300, 291, 393, 11172], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 561, "seek": 227384, "start": 2284.44, "end": 2287.84, "text": " into yourself, this is my favorite.", "tokens": [666, 1803, 11, 341, 307, 452, 2954, 13], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 562, "seek": 227384, "start": 2287.84, "end": 2294.36, "text": " It basically gives you almost like, it gives you a type that says here I hold some data", "tokens": [467, 1936, 2709, 291, 1920, 411, 11, 309, 2709, 291, 257, 2010, 300, 1619, 510, 286, 1797, 512, 1412], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 563, "seek": 227384, "start": 2294.36, "end": 2299.32, "text": " and by the way I also hold a reference into myself, and it doesn't really convenient way.", "tokens": [293, 538, 264, 636, 286, 611, 1797, 257, 6408, 666, 2059, 11, 293, 309, 1177, 380, 534, 10851, 636, 13], "temperature": 0.0, "avg_logprob": -0.1501676508810668, "compression_ratio": 1.7714285714285714, "no_speech_prob": 4.602613626047969e-05}, {"id": 564, "seek": 229932, "start": 2299.32, "end": 2305.0, "text": " So if you have created yourself into a whole, where you feel like lifetimes are your enemy,", "tokens": [407, 498, 291, 362, 2942, 1803, 666, 257, 1379, 11, 689, 291, 841, 411, 4545, 302, 1532, 366, 428, 5945, 11], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 565, "seek": 229932, "start": 2305.0, "end": 2307.6400000000003, "text": " this might dig you out of this.", "tokens": [341, 1062, 2528, 291, 484, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 566, "seek": 229932, "start": 2307.6400000000003, "end": 2315.0, "text": " Yeah, last part, errors, I think they're important, they're talked by themselves.", "tokens": [865, 11, 1036, 644, 11, 13603, 11, 286, 519, 436, 434, 1021, 11, 436, 434, 2825, 538, 2969, 13], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 567, "seek": 229932, "start": 2315.0, "end": 2317.56, "text": " You have to consider if you panic or error.", "tokens": [509, 362, 281, 1949, 498, 291, 14783, 420, 6713, 13], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 568, "seek": 229932, "start": 2317.56, "end": 2322.7200000000003, "text": " My strong recommendation is not panic, but if you do panic, use track caller, you probably", "tokens": [1222, 2068, 11879, 307, 406, 14783, 11, 457, 498, 291, 360, 14783, 11, 764, 2837, 48324, 11, 291, 1391], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 569, "seek": 229932, "start": 2322.7200000000003, "end": 2329.2400000000002, "text": " know what this is, but it basically removes this one function from the cost of the call", "tokens": [458, 437, 341, 307, 11, 457, 309, 1936, 30445, 341, 472, 2445, 490, 264, 2063, 295, 264, 818], "temperature": 0.0, "avg_logprob": -0.28247420284726205, "compression_ratio": 1.6984126984126984, "no_speech_prob": 3.577489769668318e-05}, {"id": 570, "seek": 232924, "start": 2329.24, "end": 2341.52, "text": " stack, and it removes this one function from the call stack, and then the panic message", "tokens": [8630, 11, 293, 309, 30445, 341, 472, 2445, 490, 264, 818, 8630, 11, 293, 550, 264, 14783, 3636], "temperature": 0.0, "avg_logprob": -0.2519269307454427, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0002310233103344217}, {"id": 571, "seek": 232924, "start": 2341.52, "end": 2347.12, "text": " says, hey, your problem was where you called, in this case, pop on an empty stack, and not", "tokens": [1619, 11, 4177, 11, 428, 1154, 390, 689, 291, 1219, 11, 294, 341, 1389, 11, 1665, 322, 364, 6707, 8630, 11, 293, 406], "temperature": 0.0, "avg_logprob": -0.2519269307454427, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0002310233103344217}, {"id": 572, "seek": 232924, "start": 2347.12, "end": 2350.8399999999997, "text": " the completely pointless unwrap in there, because you want to know where you're fucked", "tokens": [264, 2584, 32824, 14853, 4007, 294, 456, 11, 570, 291, 528, 281, 458, 689, 291, 434, 22518], "temperature": 0.0, "avg_logprob": -0.2519269307454427, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0002310233103344217}, {"id": 573, "seek": 232924, "start": 2350.8399999999997, "end": 2356.2799999999997, "text": " up and not here, obviously.", "tokens": [493, 293, 406, 510, 11, 2745, 13], "temperature": 0.0, "avg_logprob": -0.2519269307454427, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0002310233103344217}, {"id": 574, "seek": 235628, "start": 2356.28, "end": 2363.36, "text": " Errors are really important, again, they would be a talk by themselves, but my ask to everybody", "tokens": [3300, 9734, 366, 534, 1021, 11, 797, 11, 436, 576, 312, 257, 751, 538, 2969, 11, 457, 452, 1029, 281, 2201], "temperature": 0.0, "avg_logprob": -0.3058737677496833, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0005612888489849865}, {"id": 575, "seek": 235628, "start": 2363.36, "end": 2367.6000000000004, "text": " is please implement STD error on those thingies, because then you can sort of compose them,", "tokens": [307, 1767, 4445, 4904, 35, 6713, 322, 729, 551, 530, 11, 570, 550, 291, 393, 1333, 295, 35925, 552, 11], "temperature": 0.0, "avg_logprob": -0.3058737677496833, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0005612888489849865}, {"id": 576, "seek": 235628, "start": 2367.6000000000004, "end": 2373.28, "text": " a lot of people still don't do, it's very, very annoying if they don't.", "tokens": [257, 688, 295, 561, 920, 500, 380, 360, 11, 309, 311, 588, 11, 588, 11304, 498, 436, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.3058737677496833, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0005612888489849865}, {"id": 577, "seek": 235628, "start": 2373.28, "end": 2374.28, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.3058737677496833, "compression_ratio": 1.4835164835164836, "no_speech_prob": 0.0005612888489849865}, {"id": 578, "seek": 237428, "start": 2374.28, "end": 2400.28, "text": " So otherwise, we can also do it in the hallway, but might have one or two questions.", "tokens": [407, 5911, 11, 321, 393, 611, 360, 309, 294, 264, 23903, 11, 457, 1062, 362, 472, 420, 732, 1651, 13], "temperature": 0.0, "avg_logprob": -0.4476467768351237, "compression_ratio": 1.0632911392405062, "no_speech_prob": 0.001241776393726468}, {"id": 579, "seek": 240028, "start": 2400.28, "end": 2416.96, "text": " Thank you very much for the talk.", "tokens": [50364, 1044, 291, 588, 709, 337, 264, 751, 13, 51198], "temperature": 0.0, "avg_logprob": -0.7518855875188654, "compression_ratio": 0.8048780487804879, "no_speech_prob": 0.0035997070372104645}], "language": "en"}