{"text": " Hello, everyone, thanks for listening to my topic, URF5 system update and its future. Due to my visa application issue, I didn't find a proper way to go to Russell on site, therefore I have to upload a video for online presentation. My name is Xiang Gao, and I've been working on Lin's kernel stuff for most seven years, mainly focusing on the local file system stuff. I guess URF5 is still familiar stuff for some people, and here I try to give more useful information of URF5. Hopefully it is helpful to everyone. So URF5 stands for Enhanced Read-Only File System. It was originally started in the late 2017, and available since Lin's 4.19. It is designed to be a generic high-performance read-only file system, with a very simple but effective core on-disk format design. As a result, it almost has a powerful performance among the current in kernel read-only file system. URF5 is kernel-mountable as a SQL-occurval format replacement of traditional CPIO and TAR. And it is currently contributed by community lovers, like Google Cloud, Dance, Corepad, Google, Huawei, Oracle, and more. So as an option, URF5 supports core file LV4 and LVMA transparent data compression. However, URF5 can live without compression as well. It is targeted for various high-performance read-only solutions, such as system partitions and APX for Android, smartphone, and other embedded system, new CDs, and container images, as well as AR data sets. There are many useful features which are actively underdeveloped, so if you have any suggestions or contributions, always welcome. There are several main use cases for URF5. The first main use case is Android system partitions. So Android has several read-only partitions, which behave as system firewall, which means Android core can only be changed by way of an update. So in this way, it has many benefits, such as it is easy for vendors to shape, distribute, keep original signing for the images to its instance. And it is easy to roll back to the original shaped state or do incremental updates. And it is easy to check data traction or do data recovery even in a very low level, such as hardware. Also, it is easy for real storage devices to do hardware write protection and even more. So why we introduce URF5? Basically, because it exists, we read only compression solutions. In kernel, we cannot meet our performance requirements, but we need to do compression for our low-ended Android smartphones at that time. That is why we design URFS and sort it out from the beginning. We handled many basic common issues of generating read-only use cases to get high performance read-only file system. In addition, it is good to switch APX to URFS on disk format as well. Also, currently, APK is also another archival format. If it becomes URFS-mountable, that may leverage the latest long-demand review polling as well. So here is the first demo, which URFS is running on Android Cartofish emulator. URFS is running on Android Cartofish emulator. It is running on Android Cartofish emulator. URFS is running on Android Cartofish emulator. Our second main landed use case for URFS is container image with a user-space program called NEDAS. Private fly NEDAS is a user-space example which uses in kernel URFS to leverage its functionality to do faster container image distribution like lazy polling and data duplication across layers and images. Currently, NEDAS can do lazy polling for NEDAS URFS images as well as star GZ images and original OCI images with an extra minimal index, which is much similar to another project which is called SOCI. For more details of NEDAS itself, you could also refer to another topic which is called NEDAS Image Service for Confidential Containers at Confidential Computing Devroom. On the left-hand side, it is NEDAS architecture. You could see that an image format could be built with advanced features such as lazy polling, data duplication, and native or OCI compatible modes. And then a read-only file system for containers such as RunC, Cata, Cata CC, AMOs, and software package can be run by NEDAS-D with Linux, URFS Fuse, VTARO-FS, and URFS over-FS cache with pitch cache sharing. On the left-hand side, it is some partners which are learning NEDAS and driving fly solutions. The second demo, URFS is running with NEDAS 4 container images. So firstly, the run NEDAS container. And it finished in 16 seconds. Then it runs OCI container. You can see that it finished in 27 seconds. So that it induces times due to lazy polling. So this is the third demo. In this demo, URFS is running with original OCI and NEDAS slimy indexes for lazy polling. Note that this use case is still under development so that we could optimize it even further. So firstly, we start already in OCI container. And it costs 26 seconds. And we build NEDAS zero run indexes for OCI images. So next we start zero run OCI container. And you can see it costs 21 seconds. And that is the file system. You could see that the NEDAS slimy indexes is very small. So next I will go into take some minutes to give a brief introduction of URFS core internals. So as an effective with only internal solutions, core URFS on disk format is quite simple. Almost all URFS on disk structures are well aligned and laid within your single block, which means they are never across two blocks for performance. So on the left-hand side, this is on disk superblock format, which contains the overall file system statistics and the root I-node NID. Each URFS I-node is aligned in an I-node slot so that the basic I-node information can be in the same block. And they can be read and wins. On the right-hand side, there are URFS on disk I-node format. Short extended attributes can be kept just next to the core on disk I-node as well as chunk, compress, indexes, and inline data. Here is URFS on disk directory format. URFS directories consist of several directory blocks. Each block contains two parts called deranged part and name part so that with such on disk design, URFS can do a name lookup with binary search, which makes URFS more effective than other existing internal read-only file systems and kept in a simple implementation. So here is an overview of NIDUS use case. You can see that it has almost two parts. One part is called bootstrap or also called primary device, which has meta-blocks and data-blocks. So the meta-blocks could have super-blocks, I-nodes, and some inline data. The other data blocks could have directory blocks or some blocks for regular files. And the other part is called the blocks, which could have external data, which is separated with chunks so that in such designs, blocks can be referred with the metadata. And the details of compressed data is somewhat not quite trivial, but it could be referred from the following links as well if you have more interest in. Here is an URFS recent update. The first two features are called chunk-based file, which could implement sparse files and data deduplicated plain files. The next feature is called multiple devices and blocks, so URFS image can refer to other external data as well. Since 5.19, URFS over FS cache has been already landed, which is already mentioned by some materials available online as the following links. Since 6.1, URFS has been introduced a special I-node called piped I-node for TEL data so that TEL data or the whole of files can be deduced or compressed together. Also, since 6.1, URFS supported global compressed data deduplication by using ruling hush, URFS over FS cache page cache sharing is still working in progress. Here is a URFS compressed data deduplication test result. You can see that compared with scratch FS, URFS is more space saving by using this new optimization. In the next year, we've already planted some new features. Many of them are already working in progress, such as verification solutions and data deduplicated encryption solutions. We also have FS cache improvements together with bad dance folks, such as failover, multiple demons, and directories, as well as demoners. And more features can be referred to with the following links. So that's all of my topic. Thanks for listening again. If you have more interest in URFS, please kindly contact and join us. Thank you. We actually have time for five minutes of question. We don't know how bad the lag actually is, but we can type the question into the chat if you have one. Or you can just ask it. Thanks for the talk. There was mention of self-contained verification solution. Can you compare us with the severity and what advantages do you see in the verification solution you are working on? I mean, you can also write it, yeah? You have no idea what the lag is. Sure. Do you have the app installed, like the FOSM app? If you go into the schedule, then you just need to click a link. Ah. Thank you. Thank you. This is a text only development room, by the way, as you can see. Thank you. Thank you. Just saying, just saying, just saying.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 20.44, "text": " Hello, everyone, thanks for listening to my topic, URF5 system update and its future.", "tokens": [2425, 11, 1518, 11, 3231, 337, 4764, 281, 452, 4829, 11, 624, 49, 37, 20, 1185, 5623, 293, 1080, 2027, 13], "temperature": 0.0, "avg_logprob": -0.4888548056284587, "compression_ratio": 1.2554744525547445, "no_speech_prob": 0.1454964131116867}, {"id": 1, "seek": 0, "start": 20.44, "end": 27.96, "text": " Due to my visa application issue, I didn't find a proper way to go to Russell on site,", "tokens": [18980, 281, 452, 18589, 3861, 2734, 11, 286, 994, 380, 915, 257, 2296, 636, 281, 352, 281, 20937, 322, 3621, 11], "temperature": 0.0, "avg_logprob": -0.4888548056284587, "compression_ratio": 1.2554744525547445, "no_speech_prob": 0.1454964131116867}, {"id": 2, "seek": 2796, "start": 27.96, "end": 33.24, "text": " therefore I have to upload a video for online presentation.", "tokens": [4412, 286, 362, 281, 6580, 257, 960, 337, 2950, 5860, 13], "temperature": 0.0, "avg_logprob": -0.31788665492360185, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.00037793631781823933}, {"id": 3, "seek": 2796, "start": 33.24, "end": 39.4, "text": " My name is Xiang Gao, and I've been working on Lin's kernel stuff for most seven years,", "tokens": [1222, 1315, 307, 37935, 32235, 11, 293, 286, 600, 668, 1364, 322, 9355, 311, 28256, 1507, 337, 881, 3407, 924, 11], "temperature": 0.0, "avg_logprob": -0.31788665492360185, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.00037793631781823933}, {"id": 4, "seek": 2796, "start": 39.4, "end": 42.88, "text": " mainly focusing on the local file system stuff.", "tokens": [8704, 8416, 322, 264, 2654, 3991, 1185, 1507, 13], "temperature": 0.0, "avg_logprob": -0.31788665492360185, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.00037793631781823933}, {"id": 5, "seek": 2796, "start": 42.88, "end": 48.6, "text": " I guess URF5 is still familiar stuff for some people,", "tokens": [286, 2041, 624, 49, 37, 20, 307, 920, 4963, 1507, 337, 512, 561, 11], "temperature": 0.0, "avg_logprob": -0.31788665492360185, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.00037793631781823933}, {"id": 6, "seek": 2796, "start": 48.6, "end": 54.52, "text": " and here I try to give more useful information of URF5.", "tokens": [293, 510, 286, 853, 281, 976, 544, 4420, 1589, 295, 624, 49, 37, 20, 13], "temperature": 0.0, "avg_logprob": -0.31788665492360185, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.00037793631781823933}, {"id": 7, "seek": 5452, "start": 54.52, "end": 59.480000000000004, "text": " Hopefully it is helpful to everyone.", "tokens": [10429, 309, 307, 4961, 281, 1518, 13], "temperature": 0.0, "avg_logprob": -0.3053579472783786, "compression_ratio": 1.3220338983050848, "no_speech_prob": 6.206938269315287e-05}, {"id": 8, "seek": 5452, "start": 59.480000000000004, "end": 64.12, "text": " So URF5 stands for Enhanced Read-Only File System.", "tokens": [407, 624, 49, 37, 20, 7382, 337, 2193, 3451, 1232, 17604, 12, 35773, 26196, 8910, 13], "temperature": 0.0, "avg_logprob": -0.3053579472783786, "compression_ratio": 1.3220338983050848, "no_speech_prob": 6.206938269315287e-05}, {"id": 9, "seek": 5452, "start": 64.12, "end": 74.64, "text": " It was originally started in the late 2017, and available since Lin's 4.19.", "tokens": [467, 390, 7993, 1409, 294, 264, 3469, 6591, 11, 293, 2435, 1670, 9355, 311, 1017, 13, 3405, 13], "temperature": 0.0, "avg_logprob": -0.3053579472783786, "compression_ratio": 1.3220338983050848, "no_speech_prob": 6.206938269315287e-05}, {"id": 10, "seek": 5452, "start": 74.64, "end": 79.4, "text": " It is designed to be a generic high-performance read-only file system,", "tokens": [467, 307, 4761, 281, 312, 257, 19577, 1090, 12, 50242, 1401, 12, 25202, 3991, 1185, 11], "temperature": 0.0, "avg_logprob": -0.3053579472783786, "compression_ratio": 1.3220338983050848, "no_speech_prob": 6.206938269315287e-05}, {"id": 11, "seek": 7940, "start": 79.4, "end": 85.04, "text": " with a very simple but effective core on-disk format design.", "tokens": [365, 257, 588, 2199, 457, 4942, 4965, 322, 12, 67, 7797, 7877, 1715, 13], "temperature": 0.0, "avg_logprob": -0.29566010184909985, "compression_ratio": 1.3333333333333333, "no_speech_prob": 8.602606249041855e-05}, {"id": 12, "seek": 7940, "start": 85.04, "end": 96.56, "text": " As a result, it almost has a powerful performance among the current in kernel read-only file system.", "tokens": [1018, 257, 1874, 11, 309, 1920, 575, 257, 4005, 3389, 3654, 264, 2190, 294, 28256, 1401, 12, 25202, 3991, 1185, 13], "temperature": 0.0, "avg_logprob": -0.29566010184909985, "compression_ratio": 1.3333333333333333, "no_speech_prob": 8.602606249041855e-05}, {"id": 13, "seek": 7940, "start": 96.56, "end": 107.28, "text": " URF5 is kernel-mountable as a SQL-occurval format replacement of traditional CPIO and TAR.", "tokens": [624, 49, 37, 20, 307, 28256, 12, 45275, 712, 382, 257, 19200, 12, 905, 14112, 3337, 7877, 14419, 295, 5164, 22431, 15167, 293, 314, 1899, 13], "temperature": 0.0, "avg_logprob": -0.29566010184909985, "compression_ratio": 1.3333333333333333, "no_speech_prob": 8.602606249041855e-05}, {"id": 14, "seek": 10728, "start": 107.28, "end": 111.36, "text": " And it is currently contributed by community lovers,", "tokens": [400, 309, 307, 4362, 18434, 538, 1768, 22697, 11], "temperature": 0.0, "avg_logprob": -0.40657983977219153, "compression_ratio": 1.28125, "no_speech_prob": 7.265611930051818e-05}, {"id": 15, "seek": 10728, "start": 111.36, "end": 120.6, "text": " like Google Cloud, Dance, Corepad, Google, Huawei, Oracle, and more.", "tokens": [411, 3329, 8061, 11, 16114, 11, 14798, 13647, 11, 3329, 11, 28542, 11, 25654, 11, 293, 544, 13], "temperature": 0.0, "avg_logprob": -0.40657983977219153, "compression_ratio": 1.28125, "no_speech_prob": 7.265611930051818e-05}, {"id": 16, "seek": 10728, "start": 120.6, "end": 136.64, "text": " So as an option, URF5 supports core file LV4 and LVMA transparent data compression.", "tokens": [407, 382, 364, 3614, 11, 624, 49, 37, 20, 9346, 4965, 3991, 441, 53, 19, 293, 441, 53, 9998, 12737, 1412, 19355, 13], "temperature": 0.0, "avg_logprob": -0.40657983977219153, "compression_ratio": 1.28125, "no_speech_prob": 7.265611930051818e-05}, {"id": 17, "seek": 13664, "start": 136.64, "end": 144.83999999999997, "text": " However, URF5 can live without compression as well.", "tokens": [2908, 11, 624, 49, 37, 20, 393, 1621, 1553, 19355, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.21630471817990568, "compression_ratio": 1.232394366197183, "no_speech_prob": 8.515037188772112e-05}, {"id": 18, "seek": 13664, "start": 144.83999999999997, "end": 150.2, "text": " It is targeted for various high-performance read-only solutions,", "tokens": [467, 307, 15045, 337, 3683, 1090, 12, 50242, 1401, 12, 25202, 6547, 11], "temperature": 0.0, "avg_logprob": -0.21630471817990568, "compression_ratio": 1.232394366197183, "no_speech_prob": 8.515037188772112e-05}, {"id": 19, "seek": 13664, "start": 150.2, "end": 155.64, "text": " such as system partitions and APX for Android, smartphone,", "tokens": [1270, 382, 1185, 644, 2451, 293, 5372, 55, 337, 8853, 11, 13307, 11], "temperature": 0.0, "avg_logprob": -0.21630471817990568, "compression_ratio": 1.232394366197183, "no_speech_prob": 8.515037188772112e-05}, {"id": 20, "seek": 15564, "start": 155.64, "end": 168.04, "text": " and other embedded system, new CDs, and container images, as well as AR data sets.", "tokens": [293, 661, 16741, 1185, 11, 777, 45257, 11, 293, 10129, 5267, 11, 382, 731, 382, 8943, 1412, 6352, 13], "temperature": 0.0, "avg_logprob": -0.2456823984781901, "compression_ratio": 1.3741935483870968, "no_speech_prob": 8.095999510260299e-05}, {"id": 21, "seek": 15564, "start": 168.04, "end": 172.76, "text": " There are many useful features which are actively underdeveloped,", "tokens": [821, 366, 867, 4420, 4122, 597, 366, 13022, 833, 35464, 292, 11], "temperature": 0.0, "avg_logprob": -0.2456823984781901, "compression_ratio": 1.3741935483870968, "no_speech_prob": 8.095999510260299e-05}, {"id": 22, "seek": 15564, "start": 172.76, "end": 185.23999999999998, "text": " so if you have any suggestions or contributions, always welcome.", "tokens": [370, 498, 291, 362, 604, 13396, 420, 15725, 11, 1009, 2928, 13], "temperature": 0.0, "avg_logprob": -0.2456823984781901, "compression_ratio": 1.3741935483870968, "no_speech_prob": 8.095999510260299e-05}, {"id": 23, "seek": 18524, "start": 185.24, "end": 189.92000000000002, "text": " There are several main use cases for URF5.", "tokens": [821, 366, 2940, 2135, 764, 3331, 337, 624, 49, 37, 20, 13], "temperature": 0.0, "avg_logprob": -0.1533222652616955, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00012237485498189926}, {"id": 24, "seek": 18524, "start": 189.92000000000002, "end": 194.96, "text": " The first main use case is Android system partitions.", "tokens": [440, 700, 2135, 764, 1389, 307, 8853, 1185, 644, 2451, 13], "temperature": 0.0, "avg_logprob": -0.1533222652616955, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00012237485498189926}, {"id": 25, "seek": 18524, "start": 194.96, "end": 202.04000000000002, "text": " So Android has several read-only partitions, which behave as system firewall,", "tokens": [407, 8853, 575, 2940, 1401, 12, 25202, 644, 2451, 11, 597, 15158, 382, 1185, 36109, 11], "temperature": 0.0, "avg_logprob": -0.1533222652616955, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00012237485498189926}, {"id": 26, "seek": 18524, "start": 202.04000000000002, "end": 208.88, "text": " which means Android core can only be changed by way of an update.", "tokens": [597, 1355, 8853, 4965, 393, 787, 312, 3105, 538, 636, 295, 364, 5623, 13], "temperature": 0.0, "avg_logprob": -0.1533222652616955, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00012237485498189926}, {"id": 27, "seek": 20888, "start": 208.88, "end": 216.35999999999999, "text": " So in this way, it has many benefits, such as it is easy for vendors to shape, distribute,", "tokens": [407, 294, 341, 636, 11, 309, 575, 867, 5311, 11, 1270, 382, 309, 307, 1858, 337, 22056, 281, 3909, 11, 20594, 11], "temperature": 0.0, "avg_logprob": -0.2688479841801158, "compression_ratio": 1.4901960784313726, "no_speech_prob": 8.72062737471424e-05}, {"id": 28, "seek": 20888, "start": 216.35999999999999, "end": 221.56, "text": " keep original signing for the images to its instance.", "tokens": [1066, 3380, 13393, 337, 264, 5267, 281, 1080, 5197, 13], "temperature": 0.0, "avg_logprob": -0.2688479841801158, "compression_ratio": 1.4901960784313726, "no_speech_prob": 8.72062737471424e-05}, {"id": 29, "seek": 20888, "start": 221.56, "end": 231.92, "text": " And it is easy to roll back to the original shaped state or do incremental updates.", "tokens": [400, 309, 307, 1858, 281, 3373, 646, 281, 264, 3380, 13475, 1785, 420, 360, 35759, 9205, 13], "temperature": 0.0, "avg_logprob": -0.2688479841801158, "compression_ratio": 1.4901960784313726, "no_speech_prob": 8.72062737471424e-05}, {"id": 30, "seek": 23192, "start": 231.92, "end": 242.48, "text": " And it is easy to check data traction or do data recovery even in a very low level,", "tokens": [400, 309, 307, 1858, 281, 1520, 1412, 23558, 420, 360, 1412, 8597, 754, 294, 257, 588, 2295, 1496, 11], "temperature": 0.0, "avg_logprob": -0.17438602447509766, "compression_ratio": 1.4304635761589404, "no_speech_prob": 2.364873216720298e-05}, {"id": 31, "seek": 23192, "start": 242.48, "end": 245.23999999999998, "text": " such as hardware.", "tokens": [1270, 382, 8837, 13], "temperature": 0.0, "avg_logprob": -0.17438602447509766, "compression_ratio": 1.4304635761589404, "no_speech_prob": 2.364873216720298e-05}, {"id": 32, "seek": 23192, "start": 245.23999999999998, "end": 254.44, "text": " Also, it is easy for real storage devices to do hardware write protection and even more.", "tokens": [2743, 11, 309, 307, 1858, 337, 957, 6725, 5759, 281, 360, 8837, 2464, 6334, 293, 754, 544, 13], "temperature": 0.0, "avg_logprob": -0.17438602447509766, "compression_ratio": 1.4304635761589404, "no_speech_prob": 2.364873216720298e-05}, {"id": 33, "seek": 23192, "start": 254.44, "end": 257.56, "text": " So why we introduce URF5?", "tokens": [407, 983, 321, 5366, 624, 49, 37, 20, 30], "temperature": 0.0, "avg_logprob": -0.17438602447509766, "compression_ratio": 1.4304635761589404, "no_speech_prob": 2.364873216720298e-05}, {"id": 34, "seek": 25756, "start": 257.56, "end": 263.88, "text": " Basically, because it exists, we read only compression solutions.", "tokens": [8537, 11, 570, 309, 8198, 11, 321, 1401, 787, 19355, 6547, 13], "temperature": 0.0, "avg_logprob": -0.22820977961763422, "compression_ratio": 1.4195804195804196, "no_speech_prob": 7.632070628460497e-05}, {"id": 35, "seek": 25756, "start": 263.88, "end": 271.0, "text": " In kernel, we cannot meet our performance requirements,", "tokens": [682, 28256, 11, 321, 2644, 1677, 527, 3389, 7728, 11], "temperature": 0.0, "avg_logprob": -0.22820977961763422, "compression_ratio": 1.4195804195804196, "no_speech_prob": 7.632070628460497e-05}, {"id": 36, "seek": 25756, "start": 271.0, "end": 279.64, "text": " but we need to do compression for our low-ended Android smartphones at that time.", "tokens": [457, 321, 643, 281, 360, 19355, 337, 527, 2295, 12, 3502, 8853, 26782, 412, 300, 565, 13], "temperature": 0.0, "avg_logprob": -0.22820977961763422, "compression_ratio": 1.4195804195804196, "no_speech_prob": 7.632070628460497e-05}, {"id": 37, "seek": 27964, "start": 279.64, "end": 290.28, "text": " That is why we design URFS and sort it out from the beginning.", "tokens": [663, 307, 983, 321, 1715, 624, 49, 29318, 293, 1333, 309, 484, 490, 264, 2863, 13], "temperature": 0.0, "avg_logprob": -0.22409191131591796, "compression_ratio": 1.3458646616541354, "no_speech_prob": 4.585856368066743e-05}, {"id": 38, "seek": 27964, "start": 290.28, "end": 305.84, "text": " We handled many basic common issues of generating read-only use cases to get high performance read-only file system.", "tokens": [492, 18033, 867, 3875, 2689, 2663, 295, 17746, 1401, 12, 25202, 764, 3331, 281, 483, 1090, 3389, 1401, 12, 25202, 3991, 1185, 13], "temperature": 0.0, "avg_logprob": -0.22409191131591796, "compression_ratio": 1.3458646616541354, "no_speech_prob": 4.585856368066743e-05}, {"id": 39, "seek": 30584, "start": 305.84, "end": 313.76, "text": " In addition, it is good to switch APX to URFS on disk format as well.", "tokens": [682, 4500, 11, 309, 307, 665, 281, 3679, 5372, 55, 281, 624, 49, 29318, 322, 12355, 7877, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2769741938664363, "compression_ratio": 1.3374233128834356, "no_speech_prob": 0.0001195145450765267}, {"id": 40, "seek": 30584, "start": 313.76, "end": 319.08, "text": " Also, currently, APK is also another archival format.", "tokens": [2743, 11, 4362, 11, 5372, 42, 307, 611, 1071, 3912, 3576, 7877, 13], "temperature": 0.0, "avg_logprob": -0.2769741938664363, "compression_ratio": 1.3374233128834356, "no_speech_prob": 0.0001195145450765267}, {"id": 41, "seek": 30584, "start": 319.08, "end": 329.08, "text": " If it becomes URFS-mountable, that may leverage the latest long-demand review polling as well.", "tokens": [759, 309, 3643, 624, 49, 29318, 12, 45275, 712, 11, 300, 815, 13982, 264, 6792, 938, 12, 10730, 474, 3131, 29518, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2769741938664363, "compression_ratio": 1.3374233128834356, "no_speech_prob": 0.0001195145450765267}, {"id": 42, "seek": 32908, "start": 329.08, "end": 338.08, "text": " So here is the first demo, which URFS is running on Android Cartofish emulator.", "tokens": [50364, 407, 510, 307, 264, 700, 10723, 11, 597, 624, 49, 29318, 307, 2614, 322, 8853, 22478, 2670, 742, 846, 16381, 13, 50814], "temperature": 0.0, "avg_logprob": -0.41892484823862713, "compression_ratio": 0.9875, "no_speech_prob": 0.00047827273374423385}, {"id": 43, "seek": 35908, "start": 359.08, "end": 369.08, "text": " URFS is running on Android Cartofish emulator.", "tokens": [624, 49, 29318, 307, 2614, 322, 8853, 22478, 2670, 742, 846, 16381, 13], "temperature": 0.0, "avg_logprob": -0.8949247996012369, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.9915404915809631}, {"id": 44, "seek": 35908, "start": 369.08, "end": 379.08, "text": " It is running on Android Cartofish emulator.", "tokens": [467, 307, 2614, 322, 8853, 22478, 2670, 742, 846, 16381, 13], "temperature": 0.0, "avg_logprob": -0.8949247996012369, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.9915404915809631}, {"id": 45, "seek": 37908, "start": 379.08, "end": 406.08, "text": " URFS is running on Android Cartofish emulator.", "tokens": [624, 49, 29318, 307, 2614, 322, 8853, 22478, 2670, 742, 846, 16381, 13], "temperature": 0.0, "avg_logprob": -0.31798943351296816, "compression_ratio": 0.8518518518518519, "no_speech_prob": 0.03830761834979057}, {"id": 46, "seek": 40608, "start": 406.08, "end": 416.08, "text": " Our second main landed use case for URFS is container image with a user-space program called NEDAS.", "tokens": [2621, 1150, 2135, 15336, 764, 1389, 337, 624, 49, 29318, 307, 10129, 3256, 365, 257, 4195, 12, 24824, 1461, 1219, 426, 4731, 3160, 13], "temperature": 0.0, "avg_logprob": -0.266836510764228, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.00025650791940279305}, {"id": 47, "seek": 40608, "start": 416.08, "end": 425.08, "text": " Private fly NEDAS is a user-space example which uses in kernel URFS to leverage its functionality", "tokens": [30386, 3603, 426, 4731, 3160, 307, 257, 4195, 12, 24824, 1365, 597, 4960, 294, 28256, 624, 49, 29318, 281, 13982, 1080, 14980], "temperature": 0.0, "avg_logprob": -0.266836510764228, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.00025650791940279305}, {"id": 48, "seek": 40608, "start": 425.08, "end": 433.08, "text": " to do faster container image distribution like lazy polling and data duplication across layers and images.", "tokens": [281, 360, 4663, 10129, 3256, 7316, 411, 14847, 29518, 293, 1412, 17154, 399, 2108, 7914, 293, 5267, 13], "temperature": 0.0, "avg_logprob": -0.266836510764228, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.00025650791940279305}, {"id": 49, "seek": 43308, "start": 433.08, "end": 447.08, "text": " Currently, NEDAS can do lazy polling for NEDAS URFS images as well as star GZ images and original OCI images with an extra minimal index,", "tokens": [19964, 11, 426, 4731, 3160, 393, 360, 14847, 29518, 337, 426, 4731, 3160, 624, 49, 29318, 5267, 382, 731, 382, 3543, 460, 57, 5267, 293, 3380, 422, 25240, 5267, 365, 364, 2857, 13206, 8186, 11], "temperature": 0.0, "avg_logprob": -0.15544255574544272, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0002776130859274417}, {"id": 50, "seek": 43308, "start": 447.08, "end": 453.08, "text": " which is much similar to another project which is called SOCI.", "tokens": [597, 307, 709, 2531, 281, 1071, 1716, 597, 307, 1219, 10621, 25240, 13], "temperature": 0.0, "avg_logprob": -0.15544255574544272, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0002776130859274417}, {"id": 51, "seek": 45308, "start": 453.08, "end": 470.08, "text": " For more details of NEDAS itself, you could also refer to another topic which is called NEDAS Image Service for Confidential Containers at Confidential Computing Devroom.", "tokens": [1171, 544, 4365, 295, 426, 4731, 3160, 2564, 11, 291, 727, 611, 2864, 281, 1071, 4829, 597, 307, 1219, 426, 4731, 3160, 29903, 9561, 337, 11701, 1078, 831, 43732, 433, 412, 11701, 1078, 831, 37804, 278, 9096, 2861, 13], "temperature": 0.0, "avg_logprob": -0.13927111514779025, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0003243902465328574}, {"id": 52, "seek": 47008, "start": 470.08, "end": 484.08, "text": " On the left-hand side, it is NEDAS architecture. You could see that an image format could be built with advanced features such as lazy polling,", "tokens": [1282, 264, 1411, 12, 5543, 1252, 11, 309, 307, 426, 4731, 3160, 9482, 13, 509, 727, 536, 300, 364, 3256, 7877, 727, 312, 3094, 365, 7339, 4122, 1270, 382, 14847, 29518, 11], "temperature": 0.0, "avg_logprob": -0.14840967178344727, "compression_ratio": 1.304635761589404, "no_speech_prob": 0.00027605242212302983}, {"id": 53, "seek": 47008, "start": 484.08, "end": 491.08, "text": " data duplication, and native or OCI compatible modes.", "tokens": [1412, 17154, 399, 11, 293, 8470, 420, 422, 25240, 18218, 14068, 13], "temperature": 0.0, "avg_logprob": -0.14840967178344727, "compression_ratio": 1.304635761589404, "no_speech_prob": 0.00027605242212302983}, {"id": 54, "seek": 49108, "start": 491.08, "end": 509.08, "text": " And then a read-only file system for containers such as RunC, Cata, Cata CC, AMOs, and software package can be run by NEDAS-D with Linux,", "tokens": [400, 550, 257, 1401, 12, 25202, 3991, 1185, 337, 17089, 1270, 382, 8950, 34, 11, 383, 3274, 11, 383, 3274, 12630, 11, 6475, 31376, 11, 293, 4722, 7372, 393, 312, 1190, 538, 426, 4731, 3160, 12, 35, 365, 18734, 11], "temperature": 0.0, "avg_logprob": -0.40807689319957385, "compression_ratio": 1.1512605042016806, "no_speech_prob": 0.00030785094713792205}, {"id": 55, "seek": 50908, "start": 509.08, "end": 528.0799999999999, "text": " URFS Fuse, VTARO-FS, and URFS over-FS cache with pitch cache sharing. On the left-hand side, it is some partners which are learning NEDAS and driving fly solutions.", "tokens": [624, 49, 29318, 479, 438, 11, 691, 51, 1899, 46, 12, 29318, 11, 293, 624, 49, 29318, 670, 12, 29318, 19459, 365, 7293, 19459, 5414, 13, 1282, 264, 1411, 12, 5543, 1252, 11, 309, 307, 512, 4462, 597, 366, 2539, 426, 4731, 3160, 293, 4840, 3603, 6547, 13], "temperature": 0.0, "avg_logprob": -0.3969220748314491, "compression_ratio": 1.2330827067669172, "no_speech_prob": 4.8764901293907315e-05}, {"id": 56, "seek": 52808, "start": 528.08, "end": 544.08, "text": " The second demo, URFS is running with NEDAS 4 container images.", "tokens": [50364, 440, 1150, 10723, 11, 624, 49, 29318, 307, 2614, 365, 426, 4731, 3160, 1017, 10129, 5267, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17448532581329346, "compression_ratio": 0.9, "no_speech_prob": 0.00013733611558564007}, {"id": 57, "seek": 55808, "start": 558.08, "end": 585.08, "text": " So firstly, the run NEDAS container.", "tokens": [407, 27376, 11, 264, 1190, 426, 4731, 3160, 10129, 13], "temperature": 0.0, "avg_logprob": -0.5275304658072335, "compression_ratio": 0.8181818181818182, "no_speech_prob": 0.7199187278747559}, {"id": 58, "seek": 58508, "start": 585.08, "end": 614.08, "text": " And it finished in 16 seconds.", "tokens": [400, 309, 4335, 294, 3165, 3949, 13], "temperature": 0.0, "avg_logprob": -0.24146847291426224, "compression_ratio": 0.8333333333333334, "no_speech_prob": 0.0002419049124000594}, {"id": 59, "seek": 61408, "start": 614.08, "end": 628.08, "text": " Then it runs OCI container.", "tokens": [1396, 309, 6676, 422, 25240, 10129, 13], "temperature": 0.0, "avg_logprob": -0.19774690796347225, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.00018727572751231492}, {"id": 60, "seek": 61408, "start": 628.08, "end": 641.08, "text": " You can see that it finished in 27 seconds. So that it induces times due to lazy polling.", "tokens": [509, 393, 536, 300, 309, 4335, 294, 7634, 3949, 13, 407, 300, 309, 13716, 887, 1413, 3462, 281, 14847, 29518, 13], "temperature": 0.0, "avg_logprob": -0.19774690796347225, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.00018727572751231492}, {"id": 61, "seek": 64108, "start": 641.08, "end": 655.08, "text": " So this is the third demo. In this demo, URFS is running with original OCI and NEDAS slimy indexes for lazy polling.", "tokens": [407, 341, 307, 264, 2636, 10723, 13, 682, 341, 10723, 11, 624, 49, 29318, 307, 2614, 365, 3380, 422, 25240, 293, 426, 4731, 3160, 1061, 13189, 8186, 279, 337, 14847, 29518, 13], "temperature": 0.0, "avg_logprob": -0.14501950475904676, "compression_ratio": 1.0740740740740742, "no_speech_prob": 0.00031303518335334957}, {"id": 62, "seek": 65508, "start": 655.08, "end": 681.08, "text": " Note that this use case is still under development so that we could optimize it even further.", "tokens": [11633, 300, 341, 764, 1389, 307, 920, 833, 3250, 370, 300, 321, 727, 19719, 309, 754, 3052, 13], "temperature": 0.0, "avg_logprob": -0.11521025137467818, "compression_ratio": 1.1341463414634145, "no_speech_prob": 0.0013294689124450088}, {"id": 63, "seek": 68108, "start": 681.08, "end": 692.08, "text": " So firstly, we start already in OCI container.", "tokens": [407, 27376, 11, 321, 722, 1217, 294, 422, 25240, 10129, 13], "temperature": 0.0, "avg_logprob": -0.26144477595453675, "compression_ratio": 0.9342105263157895, "no_speech_prob": 0.00021226322860457003}, {"id": 64, "seek": 68108, "start": 692.08, "end": 701.08, "text": " And it costs 26 seconds.", "tokens": [400, 309, 5497, 7551, 3949, 13], "temperature": 0.0, "avg_logprob": -0.26144477595453675, "compression_ratio": 0.9342105263157895, "no_speech_prob": 0.00021226322860457003}, {"id": 65, "seek": 70108, "start": 701.08, "end": 717.08, "text": " And we build NEDAS zero run indexes for OCI images.", "tokens": [400, 321, 1322, 426, 4731, 3160, 4018, 1190, 8186, 279, 337, 422, 25240, 5267, 13], "temperature": 0.0, "avg_logprob": -0.19822828231319303, "compression_ratio": 1.069767441860465, "no_speech_prob": 0.0003331820189487189}, {"id": 66, "seek": 70108, "start": 717.08, "end": 725.08, "text": " So next we start zero run OCI container.", "tokens": [407, 958, 321, 722, 4018, 1190, 422, 25240, 10129, 13], "temperature": 0.0, "avg_logprob": -0.19822828231319303, "compression_ratio": 1.069767441860465, "no_speech_prob": 0.0003331820189487189}, {"id": 67, "seek": 72508, "start": 725.08, "end": 738.08, "text": " And you can see it costs 21 seconds. And that is the file system.", "tokens": [400, 291, 393, 536, 309, 5497, 5080, 3949, 13, 400, 300, 307, 264, 3991, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11999224361620452, "compression_ratio": 1.1603773584905661, "no_speech_prob": 0.00016687606694176793}, {"id": 68, "seek": 72508, "start": 738.08, "end": 746.08, "text": " You could see that the NEDAS slimy indexes is very small.", "tokens": [509, 727, 536, 300, 264, 426, 4731, 3160, 1061, 13189, 8186, 279, 307, 588, 1359, 13], "temperature": 0.0, "avg_logprob": -0.11999224361620452, "compression_ratio": 1.1603773584905661, "no_speech_prob": 0.00016687606694176793}, {"id": 69, "seek": 74608, "start": 746.08, "end": 756.08, "text": " So next I will go into take some minutes to give a brief introduction of URFS core internals.", "tokens": [407, 958, 286, 486, 352, 666, 747, 512, 2077, 281, 976, 257, 5353, 9339, 295, 624, 49, 29318, 4965, 2154, 1124, 13], "temperature": 0.0, "avg_logprob": -0.15857935540470075, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0002452773042023182}, {"id": 70, "seek": 74608, "start": 756.08, "end": 762.08, "text": " So as an effective with only internal solutions, core URFS on disk format is quite simple.", "tokens": [407, 382, 364, 4942, 365, 787, 6920, 6547, 11, 4965, 624, 49, 29318, 322, 12355, 7877, 307, 1596, 2199, 13], "temperature": 0.0, "avg_logprob": -0.15857935540470075, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0002452773042023182}, {"id": 71, "seek": 74608, "start": 762.08, "end": 769.08, "text": " Almost all URFS on disk structures are well aligned and laid within your single block,", "tokens": [12627, 439, 624, 49, 29318, 322, 12355, 9227, 366, 731, 17962, 293, 9897, 1951, 428, 2167, 3461, 11], "temperature": 0.0, "avg_logprob": -0.15857935540470075, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0002452773042023182}, {"id": 72, "seek": 74608, "start": 769.08, "end": 774.08, "text": " which means they are never across two blocks for performance.", "tokens": [597, 1355, 436, 366, 1128, 2108, 732, 8474, 337, 3389, 13], "temperature": 0.0, "avg_logprob": -0.15857935540470075, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0002452773042023182}, {"id": 73, "seek": 77408, "start": 774.08, "end": 779.08, "text": " So on the left-hand side, this is on disk superblock format,", "tokens": [407, 322, 264, 1411, 12, 5543, 1252, 11, 341, 307, 322, 12355, 1687, 28830, 7877, 11], "temperature": 0.0, "avg_logprob": -0.20075975882040487, "compression_ratio": 1.4698795180722892, "no_speech_prob": 0.000325087079545483}, {"id": 74, "seek": 77408, "start": 779.08, "end": 786.08, "text": " which contains the overall file system statistics and the root I-node NID.", "tokens": [597, 8306, 264, 4787, 3991, 1185, 12523, 293, 264, 5593, 286, 12, 77, 1429, 426, 2777, 13], "temperature": 0.0, "avg_logprob": -0.20075975882040487, "compression_ratio": 1.4698795180722892, "no_speech_prob": 0.000325087079545483}, {"id": 75, "seek": 77408, "start": 786.08, "end": 797.08, "text": " Each URFS I-node is aligned in an I-node slot so that the basic I-node information can be in the same block.", "tokens": [6947, 624, 49, 29318, 286, 12, 77, 1429, 307, 17962, 294, 364, 286, 12, 77, 1429, 14747, 370, 300, 264, 3875, 286, 12, 77, 1429, 1589, 393, 312, 294, 264, 912, 3461, 13], "temperature": 0.0, "avg_logprob": -0.20075975882040487, "compression_ratio": 1.4698795180722892, "no_speech_prob": 0.000325087079545483}, {"id": 76, "seek": 79708, "start": 797.08, "end": 810.08, "text": " And they can be read and wins. On the right-hand side, there are URFS on disk I-node format.", "tokens": [400, 436, 393, 312, 1401, 293, 10641, 13, 1282, 264, 558, 12, 5543, 1252, 11, 456, 366, 624, 49, 29318, 322, 12355, 286, 12, 77, 1429, 7877, 13], "temperature": 0.0, "avg_logprob": -0.17005790982927596, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.00012275553308427334}, {"id": 77, "seek": 79708, "start": 810.08, "end": 819.08, "text": " Short extended attributes can be kept just next to the core on disk I-node as well as chunk,", "tokens": [16881, 10913, 17212, 393, 312, 4305, 445, 958, 281, 264, 4965, 322, 12355, 286, 12, 77, 1429, 382, 731, 382, 16635, 11], "temperature": 0.0, "avg_logprob": -0.17005790982927596, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.00012275553308427334}, {"id": 78, "seek": 81908, "start": 819.08, "end": 829.08, "text": " compress, indexes, and inline data. Here is URFS on disk directory format.", "tokens": [14778, 11, 8186, 279, 11, 293, 294, 1889, 1412, 13, 1692, 307, 624, 49, 29318, 322, 12355, 21120, 7877, 13], "temperature": 0.0, "avg_logprob": -0.1539660146680929, "compression_ratio": 1.5033112582781456, "no_speech_prob": 4.9071408284362406e-05}, {"id": 79, "seek": 81908, "start": 829.08, "end": 834.08, "text": " URFS directories consist of several directory blocks.", "tokens": [624, 49, 29318, 5391, 530, 4603, 295, 2940, 21120, 8474, 13], "temperature": 0.0, "avg_logprob": -0.1539660146680929, "compression_ratio": 1.5033112582781456, "no_speech_prob": 4.9071408284362406e-05}, {"id": 80, "seek": 81908, "start": 834.08, "end": 847.08, "text": " Each block contains two parts called deranged part and name part so that with such on disk design,", "tokens": [6947, 3461, 8306, 732, 3166, 1219, 1163, 10296, 644, 293, 1315, 644, 370, 300, 365, 1270, 322, 12355, 1715, 11], "temperature": 0.0, "avg_logprob": -0.1539660146680929, "compression_ratio": 1.5033112582781456, "no_speech_prob": 4.9071408284362406e-05}, {"id": 81, "seek": 84708, "start": 847.08, "end": 852.08, "text": " URFS can do a name lookup with binary search,", "tokens": [624, 49, 29318, 393, 360, 257, 1315, 574, 1010, 365, 17434, 3164, 11], "temperature": 0.0, "avg_logprob": -0.17164563048969617, "compression_ratio": 1.2671755725190839, "no_speech_prob": 5.1832885219482705e-05}, {"id": 82, "seek": 84708, "start": 852.08, "end": 861.08, "text": " which makes URFS more effective than other existing internal read-only file systems", "tokens": [597, 1669, 624, 49, 29318, 544, 4942, 813, 661, 6741, 6920, 1401, 12, 25202, 3991, 3652], "temperature": 0.0, "avg_logprob": -0.17164563048969617, "compression_ratio": 1.2671755725190839, "no_speech_prob": 5.1832885219482705e-05}, {"id": 83, "seek": 84708, "start": 861.08, "end": 870.08, "text": " and kept in a simple implementation.", "tokens": [293, 4305, 294, 257, 2199, 11420, 13], "temperature": 0.0, "avg_logprob": -0.17164563048969617, "compression_ratio": 1.2671755725190839, "no_speech_prob": 5.1832885219482705e-05}, {"id": 84, "seek": 87008, "start": 870.08, "end": 881.08, "text": " So here is an overview of NIDUS use case. You can see that it has almost two parts.", "tokens": [407, 510, 307, 364, 12492, 295, 426, 2777, 3447, 764, 1389, 13, 509, 393, 536, 300, 309, 575, 1920, 732, 3166, 13], "temperature": 0.0, "avg_logprob": -0.22274433694234708, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.00017298107559327036}, {"id": 85, "seek": 87008, "start": 881.08, "end": 890.08, "text": " One part is called bootstrap or also called primary device,", "tokens": [1485, 644, 307, 1219, 11450, 372, 4007, 420, 611, 1219, 6194, 4302, 11], "temperature": 0.0, "avg_logprob": -0.22274433694234708, "compression_ratio": 1.2222222222222223, "no_speech_prob": 0.00017298107559327036}, {"id": 86, "seek": 89008, "start": 890.08, "end": 905.08, "text": " which has meta-blocks and data-blocks. So the meta-blocks could have super-blocks, I-nodes, and some inline data.", "tokens": [597, 575, 19616, 12, 15962, 2761, 293, 1412, 12, 15962, 2761, 13, 407, 264, 19616, 12, 15962, 2761, 727, 362, 1687, 12, 15962, 2761, 11, 286, 12, 77, 4789, 11, 293, 512, 294, 1889, 1412, 13], "temperature": 0.0, "avg_logprob": -0.21831114292144777, "compression_ratio": 1.2696629213483146, "no_speech_prob": 9.860961290542036e-05}, {"id": 87, "seek": 90508, "start": 905.08, "end": 920.08, "text": " The other data blocks could have directory blocks or some blocks for regular files.", "tokens": [440, 661, 1412, 8474, 727, 362, 21120, 8474, 420, 512, 8474, 337, 3890, 7098, 13], "temperature": 0.0, "avg_logprob": -0.11825300517835115, "compression_ratio": 1.1369863013698631, "no_speech_prob": 9.144343493971974e-05}, {"id": 88, "seek": 92008, "start": 920.08, "end": 941.08, "text": " And the other part is called the blocks, which could have external data, which is separated with chunks", "tokens": [400, 264, 661, 644, 307, 1219, 264, 8474, 11, 597, 727, 362, 8320, 1412, 11, 597, 307, 12005, 365, 24004], "temperature": 0.0, "avg_logprob": -0.1560950974623362, "compression_ratio": 1.197674418604651, "no_speech_prob": 9.459922148380429e-05}, {"id": 89, "seek": 94108, "start": 941.08, "end": 955.08, "text": " so that in such designs, blocks can be referred with the metadata.", "tokens": [370, 300, 294, 1270, 11347, 11, 8474, 393, 312, 10839, 365, 264, 26603, 13], "temperature": 0.0, "avg_logprob": -0.1418878734111786, "compression_ratio": 1.2571428571428571, "no_speech_prob": 3.977471715188585e-05}, {"id": 90, "seek": 94108, "start": 955.08, "end": 960.08, "text": " And the details of compressed data is somewhat not quite trivial,", "tokens": [400, 264, 4365, 295, 30353, 1412, 307, 8344, 406, 1596, 26703, 11], "temperature": 0.0, "avg_logprob": -0.1418878734111786, "compression_ratio": 1.2571428571428571, "no_speech_prob": 3.977471715188585e-05}, {"id": 91, "seek": 96008, "start": 960.08, "end": 973.08, "text": " but it could be referred from the following links as well if you have more interest in.", "tokens": [457, 309, 727, 312, 10839, 490, 264, 3480, 6123, 382, 731, 498, 291, 362, 544, 1179, 294, 13], "temperature": 0.0, "avg_logprob": -0.14142666079781271, "compression_ratio": 1.2686567164179106, "no_speech_prob": 0.00010621395631460473}, {"id": 92, "seek": 96008, "start": 973.08, "end": 982.08, "text": " Here is an URFS recent update. The first two features are called chunk-based file,", "tokens": [1692, 307, 364, 624, 49, 29318, 5162, 5623, 13, 440, 700, 732, 4122, 366, 1219, 16635, 12, 6032, 3991, 11], "temperature": 0.0, "avg_logprob": -0.14142666079781271, "compression_ratio": 1.2686567164179106, "no_speech_prob": 0.00010621395631460473}, {"id": 93, "seek": 98208, "start": 982.08, "end": 993.08, "text": " which could implement sparse files and data deduplicated plain files.", "tokens": [597, 727, 4445, 637, 11668, 7098, 293, 1412, 4172, 84, 4770, 770, 11121, 7098, 13], "temperature": 0.0, "avg_logprob": -0.17158974992468, "compression_ratio": 1.3308823529411764, "no_speech_prob": 6.387000757968053e-05}, {"id": 94, "seek": 98208, "start": 993.08, "end": 998.08, "text": " The next feature is called multiple devices and blocks,", "tokens": [440, 958, 4111, 307, 1219, 3866, 5759, 293, 8474, 11], "temperature": 0.0, "avg_logprob": -0.17158974992468, "compression_ratio": 1.3308823529411764, "no_speech_prob": 6.387000757968053e-05}, {"id": 95, "seek": 98208, "start": 998.08, "end": 1004.08, "text": " so URFS image can refer to other external data as well.", "tokens": [370, 624, 49, 29318, 3256, 393, 2864, 281, 661, 8320, 1412, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.17158974992468, "compression_ratio": 1.3308823529411764, "no_speech_prob": 6.387000757968053e-05}, {"id": 96, "seek": 100408, "start": 1004.08, "end": 1014.08, "text": " Since 5.19, URFS over FS cache has been already landed,", "tokens": [4162, 1025, 13, 3405, 11, 624, 49, 29318, 670, 41138, 19459, 575, 668, 1217, 15336, 11], "temperature": 0.0, "avg_logprob": -0.11139212714301215, "compression_ratio": 1.184873949579832, "no_speech_prob": 0.00015578411694150418}, {"id": 97, "seek": 100408, "start": 1014.08, "end": 1024.08, "text": " which is already mentioned by some materials available online as the following links.", "tokens": [597, 307, 1217, 2835, 538, 512, 5319, 2435, 2950, 382, 264, 3480, 6123, 13], "temperature": 0.0, "avg_logprob": -0.11139212714301215, "compression_ratio": 1.184873949579832, "no_speech_prob": 0.00015578411694150418}, {"id": 98, "seek": 102408, "start": 1024.08, "end": 1034.08, "text": " Since 6.1, URFS has been introduced a special I-node called piped I-node for TEL data", "tokens": [4162, 1386, 13, 16, 11, 624, 49, 29318, 575, 668, 7268, 257, 2121, 286, 12, 77, 1429, 1219, 8489, 292, 286, 12, 77, 1429, 337, 314, 3158, 1412], "temperature": 0.0, "avg_logprob": -0.24633191182063177, "compression_ratio": 1.2734375, "no_speech_prob": 8.96831916179508e-05}, {"id": 99, "seek": 102408, "start": 1034.08, "end": 1042.08, "text": " so that TEL data or the whole of files can be deduced or compressed together.", "tokens": [370, 300, 314, 3158, 1412, 420, 264, 1379, 295, 7098, 393, 312, 4172, 41209, 420, 30353, 1214, 13], "temperature": 0.0, "avg_logprob": -0.24633191182063177, "compression_ratio": 1.2734375, "no_speech_prob": 8.96831916179508e-05}, {"id": 100, "seek": 104208, "start": 1042.08, "end": 1056.08, "text": " Also, since 6.1, URFS supported global compressed data deduplication by using ruling hush,", "tokens": [2743, 11, 1670, 1386, 13, 16, 11, 624, 49, 29318, 8104, 4338, 30353, 1412, 4172, 84, 4770, 399, 538, 1228, 21437, 276, 1498, 11], "temperature": 0.0, "avg_logprob": -0.20802031622992623, "compression_ratio": 1.253968253968254, "no_speech_prob": 4.1058687202166766e-05}, {"id": 101, "seek": 104208, "start": 1056.08, "end": 1066.08, "text": " URFS over FS cache page cache sharing is still working in progress.", "tokens": [624, 49, 29318, 670, 41138, 19459, 3028, 19459, 5414, 307, 920, 1364, 294, 4205, 13], "temperature": 0.0, "avg_logprob": -0.20802031622992623, "compression_ratio": 1.253968253968254, "no_speech_prob": 4.1058687202166766e-05}, {"id": 102, "seek": 106608, "start": 1066.08, "end": 1072.08, "text": " Here is a URFS compressed data deduplication test result.", "tokens": [1692, 307, 257, 624, 49, 29318, 30353, 1412, 4172, 84, 4770, 399, 1500, 1874, 13], "temperature": 0.0, "avg_logprob": -0.16701297760009765, "compression_ratio": 1.35625, "no_speech_prob": 2.4730774384806864e-05}, {"id": 103, "seek": 106608, "start": 1072.08, "end": 1083.08, "text": " You can see that compared with scratch FS, URFS is more space saving", "tokens": [509, 393, 536, 300, 5347, 365, 8459, 41138, 11, 624, 49, 29318, 307, 544, 1901, 6816], "temperature": 0.0, "avg_logprob": -0.16701297760009765, "compression_ratio": 1.35625, "no_speech_prob": 2.4730774384806864e-05}, {"id": 104, "seek": 106608, "start": 1083.08, "end": 1091.08, "text": " by using this new optimization.", "tokens": [538, 1228, 341, 777, 19618, 13], "temperature": 0.0, "avg_logprob": -0.16701297760009765, "compression_ratio": 1.35625, "no_speech_prob": 2.4730774384806864e-05}, {"id": 105, "seek": 106608, "start": 1091.08, "end": 1095.08, "text": " In the next year, we've already planted some new features.", "tokens": [682, 264, 958, 1064, 11, 321, 600, 1217, 17395, 512, 777, 4122, 13], "temperature": 0.0, "avg_logprob": -0.16701297760009765, "compression_ratio": 1.35625, "no_speech_prob": 2.4730774384806864e-05}, {"id": 106, "seek": 109508, "start": 1095.08, "end": 1100.08, "text": " Many of them are already working in progress, such as verification solutions", "tokens": [5126, 295, 552, 366, 1217, 1364, 294, 4205, 11, 1270, 382, 30206, 6547], "temperature": 0.0, "avg_logprob": -0.21240061207821495, "compression_ratio": 1.5333333333333334, "no_speech_prob": 3.396778993192129e-05}, {"id": 107, "seek": 109508, "start": 1100.08, "end": 1104.08, "text": " and data deduplicated encryption solutions.", "tokens": [293, 1412, 4172, 84, 4770, 770, 29575, 6547, 13], "temperature": 0.0, "avg_logprob": -0.21240061207821495, "compression_ratio": 1.5333333333333334, "no_speech_prob": 3.396778993192129e-05}, {"id": 108, "seek": 109508, "start": 1104.08, "end": 1111.08, "text": " We also have FS cache improvements together with bad dance folks,", "tokens": [492, 611, 362, 41138, 19459, 13797, 1214, 365, 1578, 4489, 4024, 11], "temperature": 0.0, "avg_logprob": -0.21240061207821495, "compression_ratio": 1.5333333333333334, "no_speech_prob": 3.396778993192129e-05}, {"id": 109, "seek": 109508, "start": 1111.08, "end": 1117.08, "text": " such as failover, multiple demons, and directories, as well as demoners.", "tokens": [1270, 382, 3061, 3570, 11, 3866, 19733, 11, 293, 5391, 530, 11, 382, 731, 382, 14283, 433, 13], "temperature": 0.0, "avg_logprob": -0.21240061207821495, "compression_ratio": 1.5333333333333334, "no_speech_prob": 3.396778993192129e-05}, {"id": 110, "seek": 109508, "start": 1117.08, "end": 1124.08, "text": " And more features can be referred to with the following links.", "tokens": [400, 544, 4122, 393, 312, 10839, 281, 365, 264, 3480, 6123, 13], "temperature": 0.0, "avg_logprob": -0.21240061207821495, "compression_ratio": 1.5333333333333334, "no_speech_prob": 3.396778993192129e-05}, {"id": 111, "seek": 112408, "start": 1124.08, "end": 1129.08, "text": " So that's all of my topic. Thanks for listening again.", "tokens": [407, 300, 311, 439, 295, 452, 4829, 13, 2561, 337, 4764, 797, 13], "temperature": 0.0, "avg_logprob": -0.09042586424411872, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.00014555198140442371}, {"id": 112, "seek": 112408, "start": 1129.08, "end": 1140.08, "text": " If you have more interest in URFS, please kindly contact and join us. Thank you.", "tokens": [759, 291, 362, 544, 1179, 294, 624, 49, 29318, 11, 1767, 29736, 3385, 293, 3917, 505, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.09042586424411872, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.00014555198140442371}, {"id": 113, "seek": 112408, "start": 1140.08, "end": 1144.08, "text": " We actually have time for five minutes of question.", "tokens": [492, 767, 362, 565, 337, 1732, 2077, 295, 1168, 13], "temperature": 0.0, "avg_logprob": -0.09042586424411872, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.00014555198140442371}, {"id": 114, "seek": 112408, "start": 1144.08, "end": 1152.08, "text": " We don't know how bad the lag actually is, but we can type the question into the chat if you have one.", "tokens": [492, 500, 380, 458, 577, 1578, 264, 8953, 767, 307, 11, 457, 321, 393, 2010, 264, 1168, 666, 264, 5081, 498, 291, 362, 472, 13], "temperature": 0.0, "avg_logprob": -0.09042586424411872, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.00014555198140442371}, {"id": 115, "seek": 115208, "start": 1152.08, "end": 1173.08, "text": " Or you can just ask it.", "tokens": [1610, 291, 393, 445, 1029, 309, 13], "temperature": 0.0, "avg_logprob": -0.17591441062188917, "compression_ratio": 1.1573033707865168, "no_speech_prob": 0.00326167861931026}, {"id": 116, "seek": 115208, "start": 1173.08, "end": 1174.08, "text": " Thanks for the talk.", "tokens": [2561, 337, 264, 751, 13], "temperature": 0.0, "avg_logprob": -0.17591441062188917, "compression_ratio": 1.1573033707865168, "no_speech_prob": 0.00326167861931026}, {"id": 117, "seek": 115208, "start": 1174.08, "end": 1178.08, "text": " There was mention of self-contained verification solution.", "tokens": [821, 390, 2152, 295, 2698, 12, 9000, 3563, 30206, 3827, 13], "temperature": 0.0, "avg_logprob": -0.17591441062188917, "compression_ratio": 1.1573033707865168, "no_speech_prob": 0.00326167861931026}, {"id": 118, "seek": 117808, "start": 1178.08, "end": 1193.08, "text": " Can you compare us with the severity and what advantages do you see in the verification solution you are working on?", "tokens": [1664, 291, 6794, 505, 365, 264, 35179, 293, 437, 14906, 360, 291, 536, 294, 264, 30206, 3827, 291, 366, 1364, 322, 30], "temperature": 0.0, "avg_logprob": -0.3439796154315655, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0025132985319942236}, {"id": 119, "seek": 117808, "start": 1193.08, "end": 1198.08, "text": " I mean, you can also write it, yeah?", "tokens": [286, 914, 11, 291, 393, 611, 2464, 309, 11, 1338, 30], "temperature": 0.0, "avg_logprob": -0.3439796154315655, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0025132985319942236}, {"id": 120, "seek": 119808, "start": 1198.08, "end": 1209.08, "text": " You have no idea what the lag is.", "tokens": [509, 362, 572, 1558, 437, 264, 8953, 307, 13], "temperature": 0.0, "avg_logprob": -0.2272285150021923, "compression_ratio": 1.2622950819672132, "no_speech_prob": 0.008226237259805202}, {"id": 121, "seek": 119808, "start": 1209.08, "end": 1213.08, "text": " Sure. Do you have the app installed, like the FOSM app?", "tokens": [4894, 13, 1144, 291, 362, 264, 724, 8899, 11, 411, 264, 479, 4367, 44, 724, 30], "temperature": 0.0, "avg_logprob": -0.2272285150021923, "compression_ratio": 1.2622950819672132, "no_speech_prob": 0.008226237259805202}, {"id": 122, "seek": 119808, "start": 1213.08, "end": 1217.08, "text": " If you go into the schedule, then you just need to click a link.", "tokens": [759, 291, 352, 666, 264, 7567, 11, 550, 291, 445, 643, 281, 2052, 257, 2113, 13], "temperature": 0.0, "avg_logprob": -0.2272285150021923, "compression_ratio": 1.2622950819672132, "no_speech_prob": 0.008226237259805202}, {"id": 123, "seek": 121708, "start": 1217.08, "end": 1229.08, "text": " Ah.", "tokens": [2438, 13], "temperature": 0.0, "avg_logprob": -0.8371359507242838, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.005686398129910231}, {"id": 124, "seek": 122908, "start": 1229.08, "end": 1254.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.7402895518711635, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.006069508381187916}, {"id": 125, "seek": 125408, "start": 1254.08, "end": 1283.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.542473588671003, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.003928841091692448}, {"id": 126, "seek": 128308, "start": 1283.08, "end": 1311.08, "text": " This is a text only development room, by the way, as you can see.", "tokens": [639, 307, 257, 2487, 787, 3250, 1808, 11, 538, 264, 636, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.23642528624761672, "compression_ratio": 0.9701492537313433, "no_speech_prob": 0.001798377139493823}, {"id": 127, "seek": 131108, "start": 1311.08, "end": 1340.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.5987695966448102, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.016130894422531128}, {"id": 128, "seek": 134008, "start": 1340.08, "end": 1369.08, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.43663528987339567, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.026993317529559135}, {"id": 129, "seek": 136908, "start": 1369.08, "end": 1381.08, "text": " Just saying, just saying, just saying.", "tokens": [50364, 1449, 1566, 11, 445, 1566, 11, 445, 1566, 13, 50964], "temperature": 0.0, "avg_logprob": -0.5488045612970988, "compression_ratio": 1.52, "no_speech_prob": 0.01180268358439207}], "language": "en"}