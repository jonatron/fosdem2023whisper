In this talk, Pierre discusses Loup, a tool that measures compatibility for different operating systems. He emphasizes the importance of application compatibility for custom operating systems and argues that porting is not a sustainable solution. He proposes providing compatibility transparently by emulating popular operating systems or abstractions like Linux, POSIX, or the standard C library. He introduces Loup, which measures the system calls required to support an application and identifies which system calls can be stubbed or faked. He presents the results of using Loup on a dataset of popular cloud applications, showing that static analysis overestimates the number of necessary system calls, and that stubbing and faking can significantly reduce the engineering effort required for compatibility. He also demonstrates a quick demo of using Loup to measure compatibility for the LS command in a Docker container. Pierre concludes by mentioning that they are working on more fine-grained measurements and looking at the virtual file system API. Overall, the talk highlights the importance of compatibility for custom operating systems and presents Loup as a tool to optimize the process of creating compatibility layers.