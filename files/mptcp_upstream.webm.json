{"text": " We're ready for our next talk. Mathieu is going to talk about MPTCP in the upstream kernel. Thanks. Yes, hello, everybody. So welcome to this short presentation about MPTCP in the Linux kernel. So it was a long road that started almost 15 years ago. I'm indeed Mathieu Bartz, working at Tesserace in Nouvelle Anneur, so it's 30 kilometers from here. And let's start by a quick overview of the agenda. So today I suggest to begin with a short introduction of MPTCP and its main use cases. I will try to be quick for those who already know about that, but still trying to make the concepts clear for everybody, hopefully. Then I will explain what we can do today and what's expected for later. I will finish by giving some explanation about why it took so long to have it included in the official versions. So MPTCP is short for multi-pass TCP. This is an extension to TCP that breaks the assumption that a connection is linked to a fixed pair of IP addresses and ports. In one sentence, it allows to exchange data for a single connection over different paths simultaneously. Now that you can have multiple paths for the same connection, you can then have more redundancies, more bandwidth, and many more things. But enough with the nice definitions, let's have a look at a typical use case. Here is a classical MPTCP use case with smartphone. So a smartphone can typically connect to both Wi-Fi and cellular networks. That's a completely different view from the 70s when TCP was designed and where everything was fixed and clearly not transportable. Let's take a typical scenario. So you are here in the room connected to the Wi-Fi access point. Quickly you realize that, A, you have enough and don't want to listen to me anymore, and B, you got called by the smell of the fries outside. You then decide to watch a video stream about the history of fries. Why not? On your smartphone and leave the building to get real once, much better. Slowly, the Wi-Fi signal will become weaker and weaker and likely the video will stop. It will only restart when the system detected the issue and each app will then have to handle that by reconnecting to the server and then continue where it was if it can. It's clearly not a smooth experience for both devs and users, of course. In other words, do not leave the building if you don't have MPTCP on your phone. Of course there are fries for everybody. So I guess you already got that MPTCP is going to improve this situation. And yes, it will because it helps supporting seamless handover scenarios. MPTCP allows to create multiple paths for the same connection. So these paths are called subflows and they look like TCP connection when you look at packet traces. Except that these packet content are the channel TCP option to let the client and server attach new subflows. They can also announce available IP address. Of course they need to have some numbers to reassemble the data and more things. Multiple paths can be used at the same times like here on the slide. So with the same workout scenario, the frustration of being disconnected from one network goes away. Indeed, MPTCP can quickly take the decision to continue the communication on another path and even use multiple paths at the same time when one can no longer cope with the demand. This kind of use case is already supported by Apple with apps like Siri, Maps, Music and others but also by Samsung and LG in some countries like South Korea and Turkey. Another use case which is one that kept us busy for a bit of time at my company is the hybrid access network case. Many people are stuck at home with a not so great internet connection. That's usually because they are using a couple line and are far away from the street cabinet. Improving the situation is costly but also take time, especially if it is needed to deep new and long trenches to bring fibre to home. On the other hand, different assets of the network operator can be used, like the available capacity on the mobile network, so I mean 4G and 5G. With the help of a transparent proxy installed in the residential gateways for the client side and the telco cloud of the operator for the server side, MPTCP is used in the middle to offer more bandwidth to the end users. One last use case that can be quite interesting is that MPTCP can also play a key role in managing data between cellular networks like 5G and fixed one like Wi-Fi. So the 3GPP, which is the organisation in charge of defining the 5G technologies, suggests operator to set up an AT-SSS core function. The goal is to use MPTCP to have a seamless handover between networks, so 4G, 5G and Wi-Fi not to break connection when you go from one to another, but also to reduce the utilisation of the mobile network and avoid the situation of these mobile networks in the future. MPTCP is then part of 5G, but I cannot tell you if this is the same 5G as the one they put in the COVID vaccine. Anyway, enough with the theory, how do we use it and what can we do with it today? So MPTCP in the upstream kernel is fairly new, a recent kind of kernel is required. An application can create an MPTCP socket and use it like it would do with a TCP socket, so it's just one line change. You can see on the slide that IP Proto MPTCP is used instead of TCP. So yes, the application needs to explicitly pick MPTCP, but it is also possible to change the behaviour of existing applications by forcing them to create an MPTCP socket thanks to LD preload. It is also required to configure the network side to tell the kernel that multiple interfaces can be used. So tools like Network Manager and MPCPD can help doing that automatically, but it is also possible to do it manually with the IP tool. So it's probably better with an example. So just install a recent GNU Linux distribution, so Fedora Ubuntu and you name it, then you set up the network configuration. So here in this example, you can see that we need to declare which other IP addresses can be used to create new set flows. That's for the client side, the top, and also to signal the IP addresses to the other side. It is also needed to tell the kernel that the traffic generated from one IP should go through the right interface. So here we do that manually, but this can be done, of course, by a network manager and others. Finally, at the end, you can see that we need to run the application and here we use IPRF3 and we use it with MPTCP I just to force it to create an MPTCP socket. So the last table Linux kernel support most of the protocol features. So using multiple subflows, announcing IP addresses, priority, fast close, which is the equivalent of TCP reset and many other things. It also supports many socket options used by many apps. So for example, TCP fast open can be used with MPTCP, for those who know what it is. And it's also important to support these options because some existing application depends on them and would fail if they are not supported. It is also possible to retrieve information from the user space thanks to MIP counters, so also an INET-DIG interface and MPTCP socket option, which is the equivalent of TCP info. It's also important to mention that two pass managers are available and one packet scheduler, but maybe better if I explain what it is. So quickly just about the MPTCP path manager, so it's a component that is in charge of creating additional subflows, removing them if needed, announcing addresses, priority, etc. It is needed on both hands, but serve different purposes. So for example here, it is traditionally the client who create new paths and the server which announce additional addresses. There are two paths manager available, one where the user can define global settings to get the same behavior for all the MPTCP connection, that's the net name space, and also another one where the KNL notifies MPTCP events to user space via net link and accept commands to create, for example, new subflow, announce IP addresses, etc. So in short, the user space can control the path manager and take decision per connection. The other important component that I mentioned before is the MPTCP packet scheduler. Its role is to decide on which available paths the next packet will be sent to. So it can also decide to retransmit one packet to another path if needed, and that's what we call a reinjection. The packet scheduler relies on the TCP congestion control algorithm used on each subflow to know if more data can be pushed. But additionally, to better use all available resources, and sometimes limited buffers, it has also to send packet in a way to reduce packet reordering on one side, but also on top of that, it might decide to penalize some subflow that could impact the MPTCP connection, because some networks are quite bad with losses, buffer loads, and others. So the packet scheduler, in this case, might also be able to trigger a reinjection of data from one subflow to another, like if a failure has been detected. So there is an internal packet scheduler for the moment, and only one, but other ones will be able to be built with EBPF. So yes, we need EBPF for the packet scheduler, and not just to look cool, or to be accepted to conferences. In fact, EBPF here will avoid us to maintain all sorts of different packet scheduler in the kernel. It's a bit similar to TCP congestion control, there are few in the kernel, but sometimes no longer maintained. So quite a bit of work has already been done, and it is already possible to do some experimentation if you use a development version in our Git tree. But this work is currently on hold, because we ended up discussing the behavior of the current in-canner scheduler and its API, and yes, some work is still needed here. But there is also a system socket option that needs to be supported, but most likely they are specific to some very specific use cases. So it should be fine, but feel free to report them if some are missing. And one last thing that is worth mentioning is the support of Golang. As you may know, Golang does not depend on a C runtime library, or libc, and it is then not possible to use the LD preload technique with mpcp is to use mpcp. So the default net package doesn't allow application to create mpcp socket, only UDP or TCP, and a feature request has been sent to let apps easily create mpcp socket. But quickly the question Golang developers asked was, then why not using mpcp by default when a stream connection is requested, so when asking for TCP. And the proposition has been accepted, so we hope that stream application using the net package will be able to create mpcp connection, and maybe later that will become the new default behavior. So I will now finish this presentation with a bit of history. I think it is worth telling you that because it was not easy to get mpcp in the official Linux kernel, it could be good to say a few words about that. So still it was not as long and intense as having the full real-time support, and I see that some people here really know what I am talking about. The development of multi-pass TCP in the Linux kernel started in Belgium, at the university in Luven and Ev, something like 15 years ago. Surprisingly it didn't involve BS, no of course it did. The legend says that the ID popped up when the young authors were drinking bees at a crowd pub where the bartender was able to cope with the high demand by using multiple bee pumps at the same time. More seriously it started as a fork, but more to do some experimentation and to validate the concept. So at the beginning of his PhD, Sebastian just wanted to prove it could work. He started to modify TCP by adding more conditions, so just if it is multi-pass TCP, do that if not do something else. Later, more people, mostly Christophe and Gregory, joined the project to help Sebastian. They then took over his work to make it, let's call it, production ready, but also to be able to reach high performances. In other words, to get there, the modification in the Linux kernel were consequent and optimized for the mpcp use case. In parallel, mpcp v0 RFC has been published in 2013 and the same year, a big company with a logo looking like an apple, if you see, announced its support for the client side. And of course they needed to have the support for the backend side and I will let you imagine what they used. So if we concentrate on the very beginning of the project, we can say that it was easy to fork, but you will pay for it. Yeah, please don't read the two lines above out of the context. But anyway, there are different utilization of a fork. You can pick your level. So I let you guess which one has been picked here, probably ultraviolence. Maybe because the Linux kernel is big, it's also complex and the development is very active. So small modifications should not be difficult to maintain in a fork, but here we are talking about quite a lot of code and an important part is modifying the network stack, which still has many adaptations specific to mpcp. And in fact, from those that are even duplicated function that were adapted for mpcp case. So imagine that the code is modified on TCP side, we don't see it directly and then we need to adapt it later to mpcp. But still that was not the nightmare level. This is the nightmare level. So imagine that you have to deploy it on various embedded system with different LTS kernels from very old version like 3.4. So that's what we had to do at Tesserace and my explain why some of my colleague here look like the avatar just by mentioning kernel back ports. In the meantime, very old version have been deprecated, but thanks to the embedded system wall, this took time. So of course, this back port brought the drought of having to deal with many conflicts. But good tools like git re re re and topgit help a lot for that. So also add to that a bunch of batch script and it was possible to automate most of this laborious task. Topgit allows us to create a tree with dependency, that's what we can not really clearly see on the side, but it is also very handy if a fork has to be maintained by a team where regular sync with the upstream have to be done as well. So at the end for us, what we were doing is that we were applying the patch likely at the bottom and then propagated to all the kernel versions and then we had to resolve a few conflicts. But likely we were not doing that too much. At the end, the fork is still quite well used today despite all the work that has been done on the upstream code. I even published new releases last Friday and probably one of the last one. But on the bright side, the migration process has started, wait, just take time. The MPTCP support in the upstream kernel has started in 2020. Why a so long delay? Was it an homage to the Belgium Rideway company? No, it was not in fact a new idea. A few discussions and attempts have been made in the past, but were not successful. In all case, it was not an easy task to upstream MPTCP. Also because the Linux TCP stack is highly optimized, but also because the net dev maintainers have been clear on that topic. It is okay to include MPTCP in the official Linux kernel, but the new implementation cannot affect the existing TCP stack, which means no performance regression maintainable and possible to disable it can be extended via user space. Now with what I said earlier, you might already understand that we are not allowed to take the initial fork as it was. So it was built to support experiments and rapid changes, but not generic enough. Also at the end, it was and still used on environment where the majority of the connection are using MPTCP and not the opposite. So what were the solutions? A rewrite almost from scratch was needed. That's probably why it took so long to say, okay, we need to do it. A key difference with the upstream kernel is that a new circuit type is used. So there is no clean separation. The user space interacts with the MPTCP circuit, which controls the different TCP sub-flows. Thanks to the TCP upper layer protocol, ULP, that was introduced in 2017 for KTLS, it was possible to minimize the modification in TCP code while still avoiding duplicating code. An SKB extension mechanism has also been initially developed for MPTCP, not to include the socket buffer size for the generic case. This is also used now by other components today. Also we had to be very careful when modifying the TCP stacks. So any ID to avoid that were good to take. One last point is that the APIs have been defined not to have to maintain multiple version of pass manager and packet scheduler in the kernel, even if for the last one is still ongoing. But also one thing that we needed to do a lot of work. Here I just want to say a special thanks to our ex-maintenor, Matt Martino and other fellows at Intel who had to step out very recently. In conclusion, it was a long road and it's not over. Thank you. Thank you, we have time for a couple of questions. Thank you. Just two quick questions. One, when you have multiple connections, can you kind of do it RAID 1 sort of style, like where traffic goes on both simultaneously so that you don't have to resend something if something gets dropped? And can you speak also about SCTP and what's going on if it's dead or if, you know, because it's sort of in a similar space and I never understood why people focused more on MPTCP than SCTP. Thank you. I will maybe start just with the SCTP aspect because I don't know much about it. From what I remember is that here with multi-pass TCP we do an extension to TCP. So most likely where TCP was working before MPTCP can work. There are some exceptions with some nasty middle boxes, but I think that's the main reason why we can't see multi-pass TCP in the field and maybe not the SCTP. I think it is not dead and still used for data centers, but I don't know exactly about it. For the other question, I might have not understood everything, you said that you wanted to aggregate multiple paths. You have your two paths, can you send the same data simultaneously? Yes, you can. So there is even a packet scheduler called redundant packet scheduler. There is one small bit that is important to mention is that each path is still a TCP connection, which means that if you have some losses on one path, you still need to retransmit it on the same path. So at some point it might be okay to say that, okay, the other side received it via the other side, via the other path, so if you got a loss on one path. So the end host doesn't need it, but because there are middle boxes and others on the path, you need to retransmit it at the TCP level. I don't know if it's clear, but so you can do re-injection, but you need to continue retransmit on the same path too. You can't just when you're trying to receive that request, just drop it. No, if you want to do that, the best is probably to stop the connection, like if you want to have a low latency thing, or if you want a low latency, maybe don't use TCP, but that's another question, not the topic. But if you want to do that, it's probably best to stop the pass and recreate it. So I looked at the SysCityLs for MP TCP, and I found one called DSS checksum, and reading the patch notes, it's something to do with middle boxes. So is that giving you issues? And last question, depending on that, why is it not on by default? Yes, no good question. So in short, middle boxes are not nasty. They like to modify everything, and I will not comment too much about that because at my company, we do a transparent proxy, so we are kind of middle box. But what can happen is that middle boxes can change a lot of things in TCP. For example, you have all protocols like FTP, where the IP address is sent on the by-screen, but in clear text. Which means that if you have a NAT, you probably have a NAT that starts to look at the connection, identify it is FTP, and modify the text in the by-stream, like the IP addresses. But because it does that, the size can change, and if they don't update MP TCP header, because we need to add some information to be able to reassemble the data on the other hand, they can mess up with MP TCP. So there is this checksum mechanism. But there is one big inconvenience is that for the moment, there is no hardware acceleration, so it's quite costly. And the other thing is that at the end, it's quite rare that you have some middle boxes modifying the by-stream like that. I know that in the past, you had some, if you were going on some website, for example, for AT without HTTPS, it's possible that some by-stream were injected. And probably when they do the injection, they don't modify MP TCP. Sorry, we need to move on. Yeah, sorry. Otherwise, we won't be unscheduled. So that's why we don't have checksum. But thank you. Thank you so much for the talk. Thank you for the questions. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.56, "text": " We're ready for our next talk.", "tokens": [492, 434, 1919, 337, 527, 958, 751, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 1, "seek": 0, "start": 8.56, "end": 12.64, "text": " Mathieu is going to talk about MPTCP in the upstream kernel.", "tokens": [15776, 19347, 307, 516, 281, 751, 466, 14146, 18238, 47, 294, 264, 33915, 28256, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 2, "seek": 0, "start": 12.64, "end": 13.64, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 3, "seek": 0, "start": 13.64, "end": 18.72, "text": " Yes, hello, everybody.", "tokens": [1079, 11, 7751, 11, 2201, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 4, "seek": 0, "start": 18.72, "end": 24.32, "text": " So welcome to this short presentation about MPTCP in the Linux kernel.", "tokens": [407, 2928, 281, 341, 2099, 5860, 466, 14146, 18238, 47, 294, 264, 18734, 28256, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 5, "seek": 0, "start": 24.32, "end": 28.04, "text": " So it was a long road that started almost 15 years ago.", "tokens": [407, 309, 390, 257, 938, 3060, 300, 1409, 1920, 2119, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.34063610965258456, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.20821309089660645}, {"id": 6, "seek": 2804, "start": 28.04, "end": 33.48, "text": " I'm indeed Mathieu Bartz, working at Tesserace in Nouvelle Anneur, so it's 30 kilometers", "tokens": [286, 478, 6451, 15776, 19347, 22338, 89, 11, 1364, 412, 314, 14239, 617, 294, 426, 8162, 2447, 13706, 374, 11, 370, 309, 311, 2217, 13904], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 7, "seek": 2804, "start": 33.48, "end": 35.0, "text": " from here.", "tokens": [490, 510, 13], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 8, "seek": 2804, "start": 35.0, "end": 39.48, "text": " And let's start by a quick overview of the agenda.", "tokens": [400, 718, 311, 722, 538, 257, 1702, 12492, 295, 264, 9829, 13], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 9, "seek": 2804, "start": 39.48, "end": 45.56, "text": " So today I suggest to begin with a short introduction of MPTCP and its main use cases.", "tokens": [407, 965, 286, 3402, 281, 1841, 365, 257, 2099, 9339, 295, 14146, 18238, 47, 293, 1080, 2135, 764, 3331, 13], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 10, "seek": 2804, "start": 45.56, "end": 51.08, "text": " I will try to be quick for those who already know about that, but still trying to make", "tokens": [286, 486, 853, 281, 312, 1702, 337, 729, 567, 1217, 458, 466, 300, 11, 457, 920, 1382, 281, 652], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 11, "seek": 2804, "start": 51.08, "end": 55.44, "text": " the concepts clear for everybody, hopefully.", "tokens": [264, 10392, 1850, 337, 2201, 11, 4696, 13], "temperature": 0.0, "avg_logprob": -0.24228469924171372, "compression_ratio": 1.452755905511811, "no_speech_prob": 0.0012319755041971803}, {"id": 12, "seek": 5544, "start": 55.44, "end": 60.44, "text": " Then I will explain what we can do today and what's expected for later.", "tokens": [1396, 286, 486, 2903, 437, 321, 393, 360, 965, 293, 437, 311, 5176, 337, 1780, 13], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 13, "seek": 5544, "start": 60.44, "end": 65.75999999999999, "text": " I will finish by giving some explanation about why it took so long to have it included in", "tokens": [286, 486, 2413, 538, 2902, 512, 10835, 466, 983, 309, 1890, 370, 938, 281, 362, 309, 5556, 294], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 14, "seek": 5544, "start": 65.75999999999999, "end": 68.12, "text": " the official versions.", "tokens": [264, 4783, 9606, 13], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 15, "seek": 5544, "start": 68.12, "end": 70.96, "text": " So MPTCP is short for multi-pass TCP.", "tokens": [407, 14146, 18238, 47, 307, 2099, 337, 4825, 12, 9216, 48965, 13], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 16, "seek": 5544, "start": 70.96, "end": 76.0, "text": " This is an extension to TCP that breaks the assumption that a connection is linked to", "tokens": [639, 307, 364, 10320, 281, 48965, 300, 9857, 264, 15302, 300, 257, 4984, 307, 9408, 281], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 17, "seek": 5544, "start": 76.0, "end": 79.64, "text": " a fixed pair of IP addresses and ports.", "tokens": [257, 6806, 6119, 295, 8671, 16862, 293, 18160, 13], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 18, "seek": 5544, "start": 79.64, "end": 84.36, "text": " In one sentence, it allows to exchange data for a single connection over different paths", "tokens": [682, 472, 8174, 11, 309, 4045, 281, 7742, 1412, 337, 257, 2167, 4984, 670, 819, 14518], "temperature": 0.0, "avg_logprob": -0.14501877365825333, "compression_ratio": 1.594890510948905, "no_speech_prob": 0.0019005530048161745}, {"id": 19, "seek": 8436, "start": 84.36, "end": 86.6, "text": " simultaneously.", "tokens": [16561, 13], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 20, "seek": 8436, "start": 86.6, "end": 92.16, "text": " Now that you can have multiple paths for the same connection, you can then have more redundancies,", "tokens": [823, 300, 291, 393, 362, 3866, 14518, 337, 264, 912, 4984, 11, 291, 393, 550, 362, 544, 27830, 32286, 11], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 21, "seek": 8436, "start": 92.16, "end": 94.8, "text": " more bandwidth, and many more things.", "tokens": [544, 23647, 11, 293, 867, 544, 721, 13], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 22, "seek": 8436, "start": 94.8, "end": 100.36, "text": " But enough with the nice definitions, let's have a look at a typical use case.", "tokens": [583, 1547, 365, 264, 1481, 21988, 11, 718, 311, 362, 257, 574, 412, 257, 7476, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 23, "seek": 8436, "start": 100.36, "end": 105.36, "text": " Here is a classical MPTCP use case with smartphone.", "tokens": [1692, 307, 257, 13735, 14146, 18238, 47, 764, 1389, 365, 13307, 13], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 24, "seek": 8436, "start": 105.36, "end": 109.88, "text": " So a smartphone can typically connect to both Wi-Fi and cellular networks.", "tokens": [407, 257, 13307, 393, 5850, 1745, 281, 1293, 14035, 12, 13229, 293, 29267, 9590, 13], "temperature": 0.0, "avg_logprob": -0.17776394961925035, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.0010444133076816797}, {"id": 25, "seek": 10988, "start": 109.88, "end": 115.64, "text": " That's a completely different view from the 70s when TCP was designed and where everything", "tokens": [663, 311, 257, 2584, 819, 1910, 490, 264, 5285, 82, 562, 48965, 390, 4761, 293, 689, 1203], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 26, "seek": 10988, "start": 115.64, "end": 120.08, "text": " was fixed and clearly not transportable.", "tokens": [390, 6806, 293, 4448, 406, 5495, 712, 13], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 27, "seek": 10988, "start": 120.08, "end": 122.08, "text": " Let's take a typical scenario.", "tokens": [961, 311, 747, 257, 7476, 9005, 13], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 28, "seek": 10988, "start": 122.08, "end": 127.28, "text": " So you are here in the room connected to the Wi-Fi access point.", "tokens": [407, 291, 366, 510, 294, 264, 1808, 4582, 281, 264, 14035, 12, 13229, 2105, 935, 13], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 29, "seek": 10988, "start": 127.28, "end": 132.56, "text": " Quickly you realize that, A, you have enough and don't want to listen to me anymore, and", "tokens": [31800, 291, 4325, 300, 11, 316, 11, 291, 362, 1547, 293, 500, 380, 528, 281, 2140, 281, 385, 3602, 11, 293], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 30, "seek": 10988, "start": 132.56, "end": 136.16, "text": " B, you got called by the smell of the fries outside.", "tokens": [363, 11, 291, 658, 1219, 538, 264, 4316, 295, 264, 20733, 2380, 13], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 31, "seek": 10988, "start": 136.16, "end": 139.64, "text": " You then decide to watch a video stream about the history of fries.", "tokens": [509, 550, 4536, 281, 1159, 257, 960, 4309, 466, 264, 2503, 295, 20733, 13], "temperature": 0.0, "avg_logprob": -0.15915065152304514, "compression_ratio": 1.5387323943661972, "no_speech_prob": 0.0009387585450895131}, {"id": 32, "seek": 13964, "start": 139.64, "end": 140.64, "text": " Why not?", "tokens": [1545, 406, 30], "temperature": 0.0, "avg_logprob": -0.17184753645034062, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.0016420448664575815}, {"id": 33, "seek": 13964, "start": 140.64, "end": 145.48, "text": " On your smartphone and leave the building to get real once, much better.", "tokens": [1282, 428, 13307, 293, 1856, 264, 2390, 281, 483, 957, 1564, 11, 709, 1101, 13], "temperature": 0.0, "avg_logprob": -0.17184753645034062, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.0016420448664575815}, {"id": 34, "seek": 13964, "start": 145.48, "end": 152.64, "text": " Slowly, the Wi-Fi signal will become weaker and weaker and likely the video will stop.", "tokens": [29674, 11, 264, 14035, 12, 13229, 6358, 486, 1813, 24286, 293, 24286, 293, 3700, 264, 960, 486, 1590, 13], "temperature": 0.0, "avg_logprob": -0.17184753645034062, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.0016420448664575815}, {"id": 35, "seek": 13964, "start": 152.64, "end": 160.07999999999998, "text": " It will only restart when the system detected the issue and each app will then have to handle", "tokens": [467, 486, 787, 21022, 562, 264, 1185, 21896, 264, 2734, 293, 1184, 724, 486, 550, 362, 281, 4813], "temperature": 0.0, "avg_logprob": -0.17184753645034062, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.0016420448664575815}, {"id": 36, "seek": 13964, "start": 160.07999999999998, "end": 165.0, "text": " that by reconnecting to the server and then continue where it was if it can.", "tokens": [300, 538, 30095, 278, 281, 264, 7154, 293, 550, 2354, 689, 309, 390, 498, 309, 393, 13], "temperature": 0.0, "avg_logprob": -0.17184753645034062, "compression_ratio": 1.599056603773585, "no_speech_prob": 0.0016420448664575815}, {"id": 37, "seek": 16500, "start": 165.0, "end": 171.12, "text": " It's clearly not a smooth experience for both devs and users, of course.", "tokens": [467, 311, 4448, 406, 257, 5508, 1752, 337, 1293, 1905, 82, 293, 5022, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 38, "seek": 16500, "start": 171.12, "end": 176.56, "text": " In other words, do not leave the building if you don't have MPTCP on your phone.", "tokens": [682, 661, 2283, 11, 360, 406, 1856, 264, 2390, 498, 291, 500, 380, 362, 14146, 18238, 47, 322, 428, 2593, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 39, "seek": 16500, "start": 176.56, "end": 179.48, "text": " Of course there are fries for everybody.", "tokens": [2720, 1164, 456, 366, 20733, 337, 2201, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 40, "seek": 16500, "start": 179.48, "end": 184.56, "text": " So I guess you already got that MPTCP is going to improve this situation.", "tokens": [407, 286, 2041, 291, 1217, 658, 300, 14146, 18238, 47, 307, 516, 281, 3470, 341, 2590, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 41, "seek": 16500, "start": 184.56, "end": 190.04, "text": " And yes, it will because it helps supporting seamless handover scenarios.", "tokens": [400, 2086, 11, 309, 486, 570, 309, 3665, 7231, 28677, 1011, 3570, 15077, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 42, "seek": 16500, "start": 190.04, "end": 194.8, "text": " MPTCP allows to create multiple paths for the same connection.", "tokens": [14146, 18238, 47, 4045, 281, 1884, 3866, 14518, 337, 264, 912, 4984, 13], "temperature": 0.0, "avg_logprob": -0.15114588003892165, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.0003049248189199716}, {"id": 43, "seek": 19480, "start": 194.8, "end": 200.68, "text": " So these paths are called subflows and they look like TCP connection when you look at", "tokens": [407, 613, 14518, 366, 1219, 1422, 33229, 293, 436, 574, 411, 48965, 4984, 562, 291, 574, 412], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 44, "seek": 19480, "start": 200.68, "end": 203.84, "text": " packet traces.", "tokens": [20300, 26076, 13], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 45, "seek": 19480, "start": 203.84, "end": 209.52, "text": " Except that these packet content are the channel TCP option to let the client and server attach", "tokens": [16192, 300, 613, 20300, 2701, 366, 264, 2269, 48965, 3614, 281, 718, 264, 6423, 293, 7154, 5085], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 46, "seek": 19480, "start": 209.52, "end": 211.44, "text": " new subflows.", "tokens": [777, 1422, 33229, 13], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 47, "seek": 19480, "start": 211.44, "end": 213.96, "text": " They can also announce available IP address.", "tokens": [814, 393, 611, 7478, 2435, 8671, 2985, 13], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 48, "seek": 19480, "start": 213.96, "end": 221.20000000000002, "text": " Of course they need to have some numbers to reassemble the data and more things.", "tokens": [2720, 1164, 436, 643, 281, 362, 512, 3547, 281, 319, 37319, 264, 1412, 293, 544, 721, 13], "temperature": 0.0, "avg_logprob": -0.21099348068237306, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.00012876835535280406}, {"id": 49, "seek": 22120, "start": 221.2, "end": 226.48, "text": " Multiple paths can be used at the same times like here on the slide.", "tokens": [40056, 14518, 393, 312, 1143, 412, 264, 912, 1413, 411, 510, 322, 264, 4137, 13], "temperature": 0.0, "avg_logprob": -0.11394711482672044, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00041340888128615916}, {"id": 50, "seek": 22120, "start": 226.48, "end": 232.16, "text": " So with the same workout scenario, the frustration of being disconnected from one network goes", "tokens": [407, 365, 264, 912, 12169, 9005, 11, 264, 20491, 295, 885, 29426, 490, 472, 3209, 1709], "temperature": 0.0, "avg_logprob": -0.11394711482672044, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00041340888128615916}, {"id": 51, "seek": 22120, "start": 232.16, "end": 233.16, "text": " away.", "tokens": [1314, 13], "temperature": 0.0, "avg_logprob": -0.11394711482672044, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00041340888128615916}, {"id": 52, "seek": 22120, "start": 233.16, "end": 239.28, "text": " Indeed, MPTCP can quickly take the decision to continue the communication on another path", "tokens": [15061, 11, 14146, 18238, 47, 393, 2661, 747, 264, 3537, 281, 2354, 264, 6101, 322, 1071, 3100], "temperature": 0.0, "avg_logprob": -0.11394711482672044, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00041340888128615916}, {"id": 53, "seek": 22120, "start": 239.28, "end": 248.12, "text": " and even use multiple paths at the same time when one can no longer cope with the demand.", "tokens": [293, 754, 764, 3866, 14518, 412, 264, 912, 565, 562, 472, 393, 572, 2854, 22598, 365, 264, 4733, 13], "temperature": 0.0, "avg_logprob": -0.11394711482672044, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.00041340888128615916}, {"id": 54, "seek": 24812, "start": 248.12, "end": 254.6, "text": " This kind of use case is already supported by Apple with apps like Siri, Maps, Music", "tokens": [639, 733, 295, 764, 1389, 307, 1217, 8104, 538, 6373, 365, 7733, 411, 33682, 11, 28978, 11, 7609], "temperature": 0.0, "avg_logprob": -0.13867112093193587, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.00031503193895332515}, {"id": 55, "seek": 24812, "start": 254.6, "end": 261.76, "text": " and others but also by Samsung and LG in some countries like South Korea and Turkey.", "tokens": [293, 2357, 457, 611, 538, 13173, 293, 25449, 294, 512, 3517, 411, 4242, 6307, 293, 12647, 13], "temperature": 0.0, "avg_logprob": -0.13867112093193587, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.00031503193895332515}, {"id": 56, "seek": 24812, "start": 261.76, "end": 267.24, "text": " Another use case which is one that kept us busy for a bit of time at my company is the", "tokens": [3996, 764, 1389, 597, 307, 472, 300, 4305, 505, 5856, 337, 257, 857, 295, 565, 412, 452, 2237, 307, 264], "temperature": 0.0, "avg_logprob": -0.13867112093193587, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.00031503193895332515}, {"id": 57, "seek": 24812, "start": 267.24, "end": 270.8, "text": " hybrid access network case.", "tokens": [13051, 2105, 3209, 1389, 13], "temperature": 0.0, "avg_logprob": -0.13867112093193587, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.00031503193895332515}, {"id": 58, "seek": 24812, "start": 270.8, "end": 275.4, "text": " Many people are stuck at home with a not so great internet connection.", "tokens": [5126, 561, 366, 5541, 412, 1280, 365, 257, 406, 370, 869, 4705, 4984, 13], "temperature": 0.0, "avg_logprob": -0.13867112093193587, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.00031503193895332515}, {"id": 59, "seek": 27540, "start": 275.4, "end": 281.08, "text": " That's usually because they are using a couple line and are far away from the street cabinet.", "tokens": [663, 311, 2673, 570, 436, 366, 1228, 257, 1916, 1622, 293, 366, 1400, 1314, 490, 264, 4838, 15188, 13], "temperature": 0.0, "avg_logprob": -0.16553520899946972, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.0003849344211630523}, {"id": 60, "seek": 27540, "start": 281.08, "end": 286.56, "text": " Improving the situation is costly but also take time, especially if it is needed to deep", "tokens": [8270, 340, 798, 264, 2590, 307, 28328, 457, 611, 747, 565, 11, 2318, 498, 309, 307, 2978, 281, 2452], "temperature": 0.0, "avg_logprob": -0.16553520899946972, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.0003849344211630523}, {"id": 61, "seek": 27540, "start": 286.56, "end": 292.0, "text": " new and long trenches to bring fibre to home.", "tokens": [777, 293, 938, 48245, 281, 1565, 36738, 281, 1280, 13], "temperature": 0.0, "avg_logprob": -0.16553520899946972, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.0003849344211630523}, {"id": 62, "seek": 27540, "start": 292.0, "end": 298.15999999999997, "text": " On the other hand, different assets of the network operator can be used, like the available", "tokens": [1282, 264, 661, 1011, 11, 819, 9769, 295, 264, 3209, 12973, 393, 312, 1143, 11, 411, 264, 2435], "temperature": 0.0, "avg_logprob": -0.16553520899946972, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.0003849344211630523}, {"id": 63, "seek": 27540, "start": 298.15999999999997, "end": 302.88, "text": " capacity on the mobile network, so I mean 4G and 5G.", "tokens": [6042, 322, 264, 6013, 3209, 11, 370, 286, 914, 1017, 38, 293, 1025, 38, 13], "temperature": 0.0, "avg_logprob": -0.16553520899946972, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.0003849344211630523}, {"id": 64, "seek": 30288, "start": 302.88, "end": 309.04, "text": " With the help of a transparent proxy installed in the residential gateways for the client", "tokens": [2022, 264, 854, 295, 257, 12737, 29690, 8899, 294, 264, 17389, 8539, 942, 337, 264, 6423], "temperature": 0.0, "avg_logprob": -0.13623927189753607, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.00017029633454512805}, {"id": 65, "seek": 30288, "start": 309.04, "end": 316.08, "text": " side and the telco cloud of the operator for the server side, MPTCP is used in the middle", "tokens": [1252, 293, 264, 15284, 1291, 4588, 295, 264, 12973, 337, 264, 7154, 1252, 11, 14146, 18238, 47, 307, 1143, 294, 264, 2808], "temperature": 0.0, "avg_logprob": -0.13623927189753607, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.00017029633454512805}, {"id": 66, "seek": 30288, "start": 316.08, "end": 320.64, "text": " to offer more bandwidth to the end users.", "tokens": [281, 2626, 544, 23647, 281, 264, 917, 5022, 13], "temperature": 0.0, "avg_logprob": -0.13623927189753607, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.00017029633454512805}, {"id": 67, "seek": 30288, "start": 320.64, "end": 326.44, "text": " One last use case that can be quite interesting is that MPTCP can also play a key role in", "tokens": [1485, 1036, 764, 1389, 300, 393, 312, 1596, 1880, 307, 300, 14146, 18238, 47, 393, 611, 862, 257, 2141, 3090, 294], "temperature": 0.0, "avg_logprob": -0.13623927189753607, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.00017029633454512805}, {"id": 68, "seek": 32644, "start": 326.44, "end": 334.08, "text": " managing data between cellular networks like 5G and fixed one like Wi-Fi.", "tokens": [11642, 1412, 1296, 29267, 9590, 411, 1025, 38, 293, 6806, 472, 411, 14035, 12, 13229, 13], "temperature": 0.0, "avg_logprob": -0.20658017326803768, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.0002052326308330521}, {"id": 69, "seek": 32644, "start": 334.08, "end": 340.52, "text": " So the 3GPP, which is the organisation in charge of defining the 5G technologies, suggests", "tokens": [407, 264, 805, 38, 17755, 11, 597, 307, 264, 18641, 294, 4602, 295, 17827, 264, 1025, 38, 7943, 11, 13409], "temperature": 0.0, "avg_logprob": -0.20658017326803768, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.0002052326308330521}, {"id": 70, "seek": 32644, "start": 340.52, "end": 345.76, "text": " operator to set up an AT-SSS core function.", "tokens": [12973, 281, 992, 493, 364, 8872, 12, 21929, 50, 4965, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20658017326803768, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.0002052326308330521}, {"id": 71, "seek": 32644, "start": 345.76, "end": 352.56, "text": " The goal is to use MPTCP to have a seamless handover between networks, so 4G, 5G and Wi-Fi", "tokens": [440, 3387, 307, 281, 764, 14146, 18238, 47, 281, 362, 257, 28677, 1011, 3570, 1296, 9590, 11, 370, 1017, 38, 11, 1025, 38, 293, 14035, 12, 13229], "temperature": 0.0, "avg_logprob": -0.20658017326803768, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.0002052326308330521}, {"id": 72, "seek": 35256, "start": 352.56, "end": 359.2, "text": " not to break connection when you go from one to another, but also to reduce the utilisation", "tokens": [406, 281, 1821, 4984, 562, 291, 352, 490, 472, 281, 1071, 11, 457, 611, 281, 5407, 264, 4976, 7623], "temperature": 0.0, "avg_logprob": -0.2311033025964514, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0007684685406275094}, {"id": 73, "seek": 35256, "start": 359.2, "end": 365.88, "text": " of the mobile network and avoid the situation of these mobile networks in the future.", "tokens": [295, 264, 6013, 3209, 293, 5042, 264, 2590, 295, 613, 6013, 9590, 294, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.2311033025964514, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0007684685406275094}, {"id": 74, "seek": 35256, "start": 365.88, "end": 372.96, "text": " MPTCP is then part of 5G, but I cannot tell you if this is the same 5G as the one they", "tokens": [14146, 18238, 47, 307, 550, 644, 295, 1025, 38, 11, 457, 286, 2644, 980, 291, 498, 341, 307, 264, 912, 1025, 38, 382, 264, 472, 436], "temperature": 0.0, "avg_logprob": -0.2311033025964514, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0007684685406275094}, {"id": 75, "seek": 35256, "start": 372.96, "end": 375.08, "text": " put in the COVID vaccine.", "tokens": [829, 294, 264, 4566, 7007, 13], "temperature": 0.0, "avg_logprob": -0.2311033025964514, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0007684685406275094}, {"id": 76, "seek": 37508, "start": 375.08, "end": 384.2, "text": " Anyway, enough with the theory, how do we use it and what can we do with it today?", "tokens": [5684, 11, 1547, 365, 264, 5261, 11, 577, 360, 321, 764, 309, 293, 437, 393, 321, 360, 365, 309, 965, 30], "temperature": 0.0, "avg_logprob": -0.1631440281867981, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0002768508275039494}, {"id": 77, "seek": 37508, "start": 384.2, "end": 391.2, "text": " So MPTCP in the upstream kernel is fairly new, a recent kind of kernel is required.", "tokens": [407, 14146, 18238, 47, 294, 264, 33915, 28256, 307, 6457, 777, 11, 257, 5162, 733, 295, 28256, 307, 4739, 13], "temperature": 0.0, "avg_logprob": -0.1631440281867981, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0002768508275039494}, {"id": 78, "seek": 37508, "start": 391.2, "end": 397.88, "text": " An application can create an MPTCP socket and use it like it would do with a TCP socket,", "tokens": [1107, 3861, 393, 1884, 364, 14146, 18238, 47, 19741, 293, 764, 309, 411, 309, 576, 360, 365, 257, 48965, 19741, 11], "temperature": 0.0, "avg_logprob": -0.1631440281867981, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0002768508275039494}, {"id": 79, "seek": 37508, "start": 397.88, "end": 402.0, "text": " so it's just one line change.", "tokens": [370, 309, 311, 445, 472, 1622, 1319, 13], "temperature": 0.0, "avg_logprob": -0.1631440281867981, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.0002768508275039494}, {"id": 80, "seek": 40200, "start": 402.0, "end": 408.32, "text": " You can see on the slide that IP Proto MPTCP is used instead of TCP.", "tokens": [509, 393, 536, 322, 264, 4137, 300, 8671, 2114, 6738, 14146, 18238, 47, 307, 1143, 2602, 295, 48965, 13], "temperature": 0.0, "avg_logprob": -0.14283869483254172, "compression_ratio": 1.5570175438596492, "no_speech_prob": 9.846952889347449e-05}, {"id": 81, "seek": 40200, "start": 408.32, "end": 415.12, "text": " So yes, the application needs to explicitly pick MPTCP, but it is also possible to change", "tokens": [407, 2086, 11, 264, 3861, 2203, 281, 20803, 1888, 14146, 18238, 47, 11, 457, 309, 307, 611, 1944, 281, 1319], "temperature": 0.0, "avg_logprob": -0.14283869483254172, "compression_ratio": 1.5570175438596492, "no_speech_prob": 9.846952889347449e-05}, {"id": 82, "seek": 40200, "start": 415.12, "end": 421.68, "text": " the behaviour of existing applications by forcing them to create an MPTCP socket thanks", "tokens": [264, 17229, 295, 6741, 5821, 538, 19030, 552, 281, 1884, 364, 14146, 18238, 47, 19741, 3231], "temperature": 0.0, "avg_logprob": -0.14283869483254172, "compression_ratio": 1.5570175438596492, "no_speech_prob": 9.846952889347449e-05}, {"id": 83, "seek": 40200, "start": 421.68, "end": 425.44, "text": " to LD preload.", "tokens": [281, 33936, 659, 2907, 13], "temperature": 0.0, "avg_logprob": -0.14283869483254172, "compression_ratio": 1.5570175438596492, "no_speech_prob": 9.846952889347449e-05}, {"id": 84, "seek": 40200, "start": 425.44, "end": 431.32, "text": " It is also required to configure the network side to tell the kernel that multiple interfaces", "tokens": [467, 307, 611, 4739, 281, 22162, 264, 3209, 1252, 281, 980, 264, 28256, 300, 3866, 28416], "temperature": 0.0, "avg_logprob": -0.14283869483254172, "compression_ratio": 1.5570175438596492, "no_speech_prob": 9.846952889347449e-05}, {"id": 85, "seek": 43132, "start": 431.32, "end": 432.32, "text": " can be used.", "tokens": [393, 312, 1143, 13], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 86, "seek": 43132, "start": 432.32, "end": 439.48, "text": " So tools like Network Manager and MPCPD can help doing that automatically, but it is also", "tokens": [407, 3873, 411, 12640, 13821, 293, 376, 12986, 17349, 393, 854, 884, 300, 6772, 11, 457, 309, 307, 611], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 87, "seek": 43132, "start": 439.48, "end": 445.08, "text": " possible to do it manually with the IP tool.", "tokens": [1944, 281, 360, 309, 16945, 365, 264, 8671, 2290, 13], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 88, "seek": 43132, "start": 445.08, "end": 447.84, "text": " So it's probably better with an example.", "tokens": [407, 309, 311, 1391, 1101, 365, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 89, "seek": 43132, "start": 447.84, "end": 454.56, "text": " So just install a recent GNU Linux distribution, so Fedora Ubuntu and you name it, then you", "tokens": [407, 445, 3625, 257, 5162, 46411, 52, 18734, 7316, 11, 370, 7772, 3252, 30230, 45605, 293, 291, 1315, 309, 11, 550, 291], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 90, "seek": 43132, "start": 454.56, "end": 456.84, "text": " set up the network configuration.", "tokens": [992, 493, 264, 3209, 11694, 13], "temperature": 0.0, "avg_logprob": -0.24753291266305105, "compression_ratio": 1.4470046082949308, "no_speech_prob": 0.0001904019300127402}, {"id": 91, "seek": 45684, "start": 456.84, "end": 463.08, "text": " So here in this example, you can see that we need to declare which other IP addresses", "tokens": [407, 510, 294, 341, 1365, 11, 291, 393, 536, 300, 321, 643, 281, 19710, 597, 661, 8671, 16862], "temperature": 0.0, "avg_logprob": -0.12407918723232775, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00010876556189032272}, {"id": 92, "seek": 45684, "start": 463.08, "end": 466.88, "text": " can be used to create new set flows.", "tokens": [393, 312, 1143, 281, 1884, 777, 992, 12867, 13], "temperature": 0.0, "avg_logprob": -0.12407918723232775, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00010876556189032272}, {"id": 93, "seek": 45684, "start": 466.88, "end": 476.08, "text": " That's for the client side, the top, and also to signal the IP addresses to the other side.", "tokens": [663, 311, 337, 264, 6423, 1252, 11, 264, 1192, 11, 293, 611, 281, 6358, 264, 8671, 16862, 281, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.12407918723232775, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00010876556189032272}, {"id": 94, "seek": 45684, "start": 476.08, "end": 481.0, "text": " It is also needed to tell the kernel that the traffic generated from one IP should go", "tokens": [467, 307, 611, 2978, 281, 980, 264, 28256, 300, 264, 6419, 10833, 490, 472, 8671, 820, 352], "temperature": 0.0, "avg_logprob": -0.12407918723232775, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00010876556189032272}, {"id": 95, "seek": 45684, "start": 481.0, "end": 483.03999999999996, "text": " through the right interface.", "tokens": [807, 264, 558, 9226, 13], "temperature": 0.0, "avg_logprob": -0.12407918723232775, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00010876556189032272}, {"id": 96, "seek": 48304, "start": 483.04, "end": 488.68, "text": " So here we do that manually, but this can be done, of course, by a network manager and", "tokens": [407, 510, 321, 360, 300, 16945, 11, 457, 341, 393, 312, 1096, 11, 295, 1164, 11, 538, 257, 3209, 6598, 293], "temperature": 0.0, "avg_logprob": -0.2185308394893523, "compression_ratio": 1.5233644859813085, "no_speech_prob": 5.2051153033971786e-05}, {"id": 97, "seek": 48304, "start": 488.68, "end": 489.68, "text": " others.", "tokens": [2357, 13], "temperature": 0.0, "avg_logprob": -0.2185308394893523, "compression_ratio": 1.5233644859813085, "no_speech_prob": 5.2051153033971786e-05}, {"id": 98, "seek": 48304, "start": 489.68, "end": 498.6, "text": " Finally, at the end, you can see that we need to run the application and here we use IPRF3", "tokens": [6288, 11, 412, 264, 917, 11, 291, 393, 536, 300, 321, 643, 281, 1190, 264, 3861, 293, 510, 321, 764, 8671, 49, 37, 18], "temperature": 0.0, "avg_logprob": -0.2185308394893523, "compression_ratio": 1.5233644859813085, "no_speech_prob": 5.2051153033971786e-05}, {"id": 99, "seek": 48304, "start": 498.6, "end": 505.36, "text": " and we use it with MPTCP I just to force it to create an MPTCP socket.", "tokens": [293, 321, 764, 309, 365, 14146, 18238, 47, 286, 445, 281, 3464, 309, 281, 1884, 364, 14146, 18238, 47, 19741, 13], "temperature": 0.0, "avg_logprob": -0.2185308394893523, "compression_ratio": 1.5233644859813085, "no_speech_prob": 5.2051153033971786e-05}, {"id": 100, "seek": 48304, "start": 505.36, "end": 509.84000000000003, "text": " So the last table Linux kernel support most of the protocol features.", "tokens": [407, 264, 1036, 3199, 18734, 28256, 1406, 881, 295, 264, 10336, 4122, 13], "temperature": 0.0, "avg_logprob": -0.2185308394893523, "compression_ratio": 1.5233644859813085, "no_speech_prob": 5.2051153033971786e-05}, {"id": 101, "seek": 50984, "start": 509.84, "end": 516.36, "text": " So using multiple subflows, announcing IP addresses, priority, fast close, which is the equivalent", "tokens": [407, 1228, 3866, 1422, 33229, 11, 28706, 8671, 16862, 11, 9365, 11, 2370, 1998, 11, 597, 307, 264, 10344], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 102, "seek": 50984, "start": 516.36, "end": 519.8399999999999, "text": " of TCP reset and many other things.", "tokens": [295, 48965, 14322, 293, 867, 661, 721, 13], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 103, "seek": 50984, "start": 519.8399999999999, "end": 524.0799999999999, "text": " It also supports many socket options used by many apps.", "tokens": [467, 611, 9346, 867, 19741, 3956, 1143, 538, 867, 7733, 13], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 104, "seek": 50984, "start": 524.0799999999999, "end": 529.24, "text": " So for example, TCP fast open can be used with MPTCP, for those who know what it is.", "tokens": [407, 337, 1365, 11, 48965, 2370, 1269, 393, 312, 1143, 365, 14146, 18238, 47, 11, 337, 729, 567, 458, 437, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 105, "seek": 50984, "start": 529.24, "end": 534.64, "text": " And it's also important to support these options because some existing application depends", "tokens": [400, 309, 311, 611, 1021, 281, 1406, 613, 3956, 570, 512, 6741, 3861, 5946], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 106, "seek": 50984, "start": 534.64, "end": 538.76, "text": " on them and would fail if they are not supported.", "tokens": [322, 552, 293, 576, 3061, 498, 436, 366, 406, 8104, 13], "temperature": 0.0, "avg_logprob": -0.1704405975341797, "compression_ratio": 1.5817490494296578, "no_speech_prob": 0.0005062032141722739}, {"id": 107, "seek": 53876, "start": 538.76, "end": 544.96, "text": " It is also possible to retrieve information from the user space thanks to MIP counters,", "tokens": [467, 307, 611, 1944, 281, 30254, 1589, 490, 264, 4195, 1901, 3231, 281, 376, 9139, 39338, 11], "temperature": 0.0, "avg_logprob": -0.25032395954373515, "compression_ratio": 1.444954128440367, "no_speech_prob": 0.00020709486852865666}, {"id": 108, "seek": 53876, "start": 544.96, "end": 554.72, "text": " so also an INET-DIG interface and MPTCP socket option, which is the equivalent of TCP info.", "tokens": [370, 611, 364, 6892, 4850, 12, 3085, 38, 9226, 293, 14146, 18238, 47, 19741, 3614, 11, 597, 307, 264, 10344, 295, 48965, 13614, 13], "temperature": 0.0, "avg_logprob": -0.25032395954373515, "compression_ratio": 1.444954128440367, "no_speech_prob": 0.00020709486852865666}, {"id": 109, "seek": 53876, "start": 554.72, "end": 560.36, "text": " It's also important to mention that two pass managers are available and one packet scheduler,", "tokens": [467, 311, 611, 1021, 281, 2152, 300, 732, 1320, 14084, 366, 2435, 293, 472, 20300, 12000, 260, 11], "temperature": 0.0, "avg_logprob": -0.25032395954373515, "compression_ratio": 1.444954128440367, "no_speech_prob": 0.00020709486852865666}, {"id": 110, "seek": 53876, "start": 560.36, "end": 563.56, "text": " but maybe better if I explain what it is.", "tokens": [457, 1310, 1101, 498, 286, 2903, 437, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.25032395954373515, "compression_ratio": 1.444954128440367, "no_speech_prob": 0.00020709486852865666}, {"id": 111, "seek": 56356, "start": 563.56, "end": 572.4, "text": " So quickly just about the MPTCP path manager, so it's a component that is in charge of creating", "tokens": [407, 2661, 445, 466, 264, 14146, 18238, 47, 3100, 6598, 11, 370, 309, 311, 257, 6542, 300, 307, 294, 4602, 295, 4084], "temperature": 0.0, "avg_logprob": -0.1523763235513266, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.00013627570297103375}, {"id": 112, "seek": 56356, "start": 572.4, "end": 580.0799999999999, "text": " additional subflows, removing them if needed, announcing addresses, priority, etc.", "tokens": [4497, 1422, 33229, 11, 12720, 552, 498, 2978, 11, 28706, 16862, 11, 9365, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.1523763235513266, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.00013627570297103375}, {"id": 113, "seek": 56356, "start": 580.0799999999999, "end": 583.68, "text": " It is needed on both hands, but serve different purposes.", "tokens": [467, 307, 2978, 322, 1293, 2377, 11, 457, 4596, 819, 9932, 13], "temperature": 0.0, "avg_logprob": -0.1523763235513266, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.00013627570297103375}, {"id": 114, "seek": 56356, "start": 583.68, "end": 588.76, "text": " So for example here, it is traditionally the client who create new paths and the server", "tokens": [407, 337, 1365, 510, 11, 309, 307, 19067, 264, 6423, 567, 1884, 777, 14518, 293, 264, 7154], "temperature": 0.0, "avg_logprob": -0.1523763235513266, "compression_ratio": 1.5069767441860464, "no_speech_prob": 0.00013627570297103375}, {"id": 115, "seek": 58876, "start": 588.76, "end": 593.76, "text": " which announce additional addresses.", "tokens": [597, 7478, 4497, 16862, 13], "temperature": 0.0, "avg_logprob": -0.19605020854784094, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.00022151507437229156}, {"id": 116, "seek": 58876, "start": 593.76, "end": 599.0, "text": " There are two paths manager available, one where the user can define global settings", "tokens": [821, 366, 732, 14518, 6598, 2435, 11, 472, 689, 264, 4195, 393, 6964, 4338, 6257], "temperature": 0.0, "avg_logprob": -0.19605020854784094, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.00022151507437229156}, {"id": 117, "seek": 58876, "start": 599.0, "end": 605.2, "text": " to get the same behavior for all the MPTCP connection, that's the net name space, and", "tokens": [281, 483, 264, 912, 5223, 337, 439, 264, 14146, 18238, 47, 4984, 11, 300, 311, 264, 2533, 1315, 1901, 11, 293], "temperature": 0.0, "avg_logprob": -0.19605020854784094, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.00022151507437229156}, {"id": 118, "seek": 58876, "start": 605.2, "end": 612.24, "text": " also another one where the KNL notifies MPTCP events to user space via net link and accept", "tokens": [611, 1071, 472, 689, 264, 591, 45, 43, 406, 11221, 14146, 18238, 47, 3931, 281, 4195, 1901, 5766, 2533, 2113, 293, 3241], "temperature": 0.0, "avg_logprob": -0.19605020854784094, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.00022151507437229156}, {"id": 119, "seek": 58876, "start": 612.24, "end": 616.8, "text": " commands to create, for example, new subflow, announce IP addresses, etc.", "tokens": [16901, 281, 1884, 11, 337, 1365, 11, 777, 1422, 10565, 11, 7478, 8671, 16862, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.19605020854784094, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.00022151507437229156}, {"id": 120, "seek": 61680, "start": 616.8, "end": 623.92, "text": " So in short, the user space can control the path manager and take decision per connection.", "tokens": [407, 294, 2099, 11, 264, 4195, 1901, 393, 1969, 264, 3100, 6598, 293, 747, 3537, 680, 4984, 13], "temperature": 0.0, "avg_logprob": -0.12280360512111498, "compression_ratio": 1.6283185840707965, "no_speech_prob": 0.00039326021214947104}, {"id": 121, "seek": 61680, "start": 623.92, "end": 629.68, "text": " The other important component that I mentioned before is the MPTCP packet scheduler.", "tokens": [440, 661, 1021, 6542, 300, 286, 2835, 949, 307, 264, 14146, 18238, 47, 20300, 12000, 260, 13], "temperature": 0.0, "avg_logprob": -0.12280360512111498, "compression_ratio": 1.6283185840707965, "no_speech_prob": 0.00039326021214947104}, {"id": 122, "seek": 61680, "start": 629.68, "end": 636.88, "text": " Its role is to decide on which available paths the next packet will be sent to.", "tokens": [6953, 3090, 307, 281, 4536, 322, 597, 2435, 14518, 264, 958, 20300, 486, 312, 2279, 281, 13], "temperature": 0.0, "avg_logprob": -0.12280360512111498, "compression_ratio": 1.6283185840707965, "no_speech_prob": 0.00039326021214947104}, {"id": 123, "seek": 61680, "start": 636.88, "end": 642.1999999999999, "text": " So it can also decide to retransmit one packet to another path if needed, and that's what", "tokens": [407, 309, 393, 611, 4536, 281, 23106, 599, 3508, 472, 20300, 281, 1071, 3100, 498, 2978, 11, 293, 300, 311, 437], "temperature": 0.0, "avg_logprob": -0.12280360512111498, "compression_ratio": 1.6283185840707965, "no_speech_prob": 0.00039326021214947104}, {"id": 124, "seek": 61680, "start": 642.1999999999999, "end": 644.92, "text": " we call a reinjection.", "tokens": [321, 818, 257, 6561, 1020, 313, 13], "temperature": 0.0, "avg_logprob": -0.12280360512111498, "compression_ratio": 1.6283185840707965, "no_speech_prob": 0.00039326021214947104}, {"id": 125, "seek": 64492, "start": 644.92, "end": 651.5999999999999, "text": " The packet scheduler relies on the TCP congestion control algorithm used on each subflow to", "tokens": [440, 20300, 12000, 260, 30910, 322, 264, 48965, 40816, 1969, 9284, 1143, 322, 1184, 1422, 10565, 281], "temperature": 0.0, "avg_logprob": -0.14042684220776117, "compression_ratio": 1.592741935483871, "no_speech_prob": 0.0001244373997906223}, {"id": 126, "seek": 64492, "start": 651.5999999999999, "end": 655.28, "text": " know if more data can be pushed.", "tokens": [458, 498, 544, 1412, 393, 312, 9152, 13], "temperature": 0.0, "avg_logprob": -0.14042684220776117, "compression_ratio": 1.592741935483871, "no_speech_prob": 0.0001244373997906223}, {"id": 127, "seek": 64492, "start": 655.28, "end": 662.88, "text": " But additionally, to better use all available resources, and sometimes limited buffers,", "tokens": [583, 43181, 11, 281, 1101, 764, 439, 2435, 3593, 11, 293, 2171, 5567, 9204, 433, 11], "temperature": 0.0, "avg_logprob": -0.14042684220776117, "compression_ratio": 1.592741935483871, "no_speech_prob": 0.0001244373997906223}, {"id": 128, "seek": 64492, "start": 662.88, "end": 667.8399999999999, "text": " it has also to send packet in a way to reduce packet reordering on one side, but also on", "tokens": [309, 575, 611, 281, 2845, 20300, 294, 257, 636, 281, 5407, 20300, 319, 765, 1794, 322, 472, 1252, 11, 457, 611, 322], "temperature": 0.0, "avg_logprob": -0.14042684220776117, "compression_ratio": 1.592741935483871, "no_speech_prob": 0.0001244373997906223}, {"id": 129, "seek": 64492, "start": 667.8399999999999, "end": 674.48, "text": " top of that, it might decide to penalize some subflow that could impact the MPTCP connection,", "tokens": [1192, 295, 300, 11, 309, 1062, 4536, 281, 13661, 1125, 512, 1422, 10565, 300, 727, 2712, 264, 14146, 18238, 47, 4984, 11], "temperature": 0.0, "avg_logprob": -0.14042684220776117, "compression_ratio": 1.592741935483871, "no_speech_prob": 0.0001244373997906223}, {"id": 130, "seek": 67448, "start": 674.48, "end": 679.96, "text": " because some networks are quite bad with losses, buffer loads, and others.", "tokens": [570, 512, 9590, 366, 1596, 1578, 365, 15352, 11, 21762, 12668, 11, 293, 2357, 13], "temperature": 0.0, "avg_logprob": -0.14525897452171813, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.00024072696396615356}, {"id": 131, "seek": 67448, "start": 679.96, "end": 686.6, "text": " So the packet scheduler, in this case, might also be able to trigger a reinjection of data", "tokens": [407, 264, 20300, 12000, 260, 11, 294, 341, 1389, 11, 1062, 611, 312, 1075, 281, 7875, 257, 6561, 1020, 313, 295, 1412], "temperature": 0.0, "avg_logprob": -0.14525897452171813, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.00024072696396615356}, {"id": 132, "seek": 67448, "start": 686.6, "end": 693.6, "text": " from one subflow to another, like if a failure has been detected.", "tokens": [490, 472, 1422, 10565, 281, 1071, 11, 411, 498, 257, 7763, 575, 668, 21896, 13], "temperature": 0.0, "avg_logprob": -0.14525897452171813, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.00024072696396615356}, {"id": 133, "seek": 67448, "start": 693.6, "end": 699.72, "text": " So there is an internal packet scheduler for the moment, and only one, but other ones will", "tokens": [407, 456, 307, 364, 6920, 20300, 12000, 260, 337, 264, 1623, 11, 293, 787, 472, 11, 457, 661, 2306, 486], "temperature": 0.0, "avg_logprob": -0.14525897452171813, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.00024072696396615356}, {"id": 134, "seek": 67448, "start": 699.72, "end": 703.8000000000001, "text": " be able to be built with EBPF.", "tokens": [312, 1075, 281, 312, 3094, 365, 50148, 47, 37, 13], "temperature": 0.0, "avg_logprob": -0.14525897452171813, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.00024072696396615356}, {"id": 135, "seek": 70380, "start": 703.8, "end": 709.12, "text": " So yes, we need EBPF for the packet scheduler, and not just to look cool, or to be accepted", "tokens": [407, 2086, 11, 321, 643, 50148, 47, 37, 337, 264, 20300, 12000, 260, 11, 293, 406, 445, 281, 574, 1627, 11, 420, 281, 312, 9035], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 136, "seek": 70380, "start": 709.12, "end": 712.5999999999999, "text": " to conferences.", "tokens": [281, 22032, 13], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 137, "seek": 70380, "start": 712.5999999999999, "end": 717.9599999999999, "text": " In fact, EBPF here will avoid us to maintain all sorts of different packet scheduler in", "tokens": [682, 1186, 11, 50148, 47, 37, 510, 486, 5042, 505, 281, 6909, 439, 7527, 295, 819, 20300, 12000, 260, 294], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 138, "seek": 70380, "start": 717.9599999999999, "end": 718.9599999999999, "text": " the kernel.", "tokens": [264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 139, "seek": 70380, "start": 718.9599999999999, "end": 725.28, "text": " It's a bit similar to TCP congestion control, there are few in the kernel, but sometimes", "tokens": [467, 311, 257, 857, 2531, 281, 48965, 40816, 1969, 11, 456, 366, 1326, 294, 264, 28256, 11, 457, 2171], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 140, "seek": 70380, "start": 725.28, "end": 727.1999999999999, "text": " no longer maintained.", "tokens": [572, 2854, 17578, 13], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 141, "seek": 70380, "start": 727.1999999999999, "end": 732.76, "text": " So quite a bit of work has already been done, and it is already possible to do some experimentation", "tokens": [407, 1596, 257, 857, 295, 589, 575, 1217, 668, 1096, 11, 293, 309, 307, 1217, 1944, 281, 360, 512, 37142], "temperature": 0.0, "avg_logprob": -0.12524222460660067, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00032890282454900444}, {"id": 142, "seek": 73276, "start": 732.76, "end": 736.8, "text": " if you use a development version in our Git tree.", "tokens": [498, 291, 764, 257, 3250, 3037, 294, 527, 16939, 4230, 13], "temperature": 0.0, "avg_logprob": -0.3061849420720881, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0009822872234508395}, {"id": 143, "seek": 73276, "start": 736.8, "end": 741.08, "text": " But this work is currently on hold, because we ended up discussing the behavior of the", "tokens": [583, 341, 589, 307, 4362, 322, 1797, 11, 570, 321, 4590, 493, 10850, 264, 5223, 295, 264], "temperature": 0.0, "avg_logprob": -0.3061849420720881, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0009822872234508395}, {"id": 144, "seek": 73276, "start": 741.08, "end": 748.96, "text": " current in-canner scheduler and its API, and yes, some work is still needed here.", "tokens": [2190, 294, 12, 66, 9805, 12000, 260, 293, 1080, 9362, 11, 293, 2086, 11, 512, 589, 307, 920, 2978, 510, 13], "temperature": 0.0, "avg_logprob": -0.3061849420720881, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0009822872234508395}, {"id": 145, "seek": 73276, "start": 748.96, "end": 756.0, "text": " But there is also a system socket option that needs to be supported, but most likely they", "tokens": [583, 456, 307, 611, 257, 1185, 19741, 3614, 300, 2203, 281, 312, 8104, 11, 457, 881, 3700, 436], "temperature": 0.0, "avg_logprob": -0.3061849420720881, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0009822872234508395}, {"id": 146, "seek": 73276, "start": 756.0, "end": 760.84, "text": " are specific to some very specific use cases.", "tokens": [366, 2685, 281, 512, 588, 2685, 764, 3331, 13], "temperature": 0.0, "avg_logprob": -0.3061849420720881, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0009822872234508395}, {"id": 147, "seek": 76084, "start": 760.84, "end": 765.8000000000001, "text": " So it should be fine, but feel free to report them if some are missing.", "tokens": [407, 309, 820, 312, 2489, 11, 457, 841, 1737, 281, 2275, 552, 498, 512, 366, 5361, 13], "temperature": 0.0, "avg_logprob": -0.18355885418978604, "compression_ratio": 1.5463917525773196, "no_speech_prob": 0.0003416819963604212}, {"id": 148, "seek": 76084, "start": 765.8000000000001, "end": 770.0, "text": " And one last thing that is worth mentioning is the support of Golang.", "tokens": [400, 472, 1036, 551, 300, 307, 3163, 18315, 307, 264, 1406, 295, 36319, 656, 13], "temperature": 0.0, "avg_logprob": -0.18355885418978604, "compression_ratio": 1.5463917525773196, "no_speech_prob": 0.0003416819963604212}, {"id": 149, "seek": 76084, "start": 770.0, "end": 777.24, "text": " As you may know, Golang does not depend on a C runtime library, or libc, and it is then", "tokens": [1018, 291, 815, 458, 11, 36319, 656, 775, 406, 5672, 322, 257, 383, 34474, 6405, 11, 420, 22854, 66, 11, 293, 309, 307, 550], "temperature": 0.0, "avg_logprob": -0.18355885418978604, "compression_ratio": 1.5463917525773196, "no_speech_prob": 0.0003416819963604212}, {"id": 150, "seek": 76084, "start": 777.24, "end": 784.24, "text": " not possible to use the LD preload technique with mpcp is to use mpcp.", "tokens": [406, 1944, 281, 764, 264, 33936, 659, 2907, 6532, 365, 275, 79, 66, 79, 307, 281, 764, 275, 79, 66, 79, 13], "temperature": 0.0, "avg_logprob": -0.18355885418978604, "compression_ratio": 1.5463917525773196, "no_speech_prob": 0.0003416819963604212}, {"id": 151, "seek": 78424, "start": 784.24, "end": 792.52, "text": " So the default net package doesn't allow application to create mpcp socket, only UDP or TCP, and", "tokens": [407, 264, 7576, 2533, 7372, 1177, 380, 2089, 3861, 281, 1884, 275, 79, 66, 79, 19741, 11, 787, 624, 11373, 420, 48965, 11, 293], "temperature": 0.0, "avg_logprob": -0.18111030260721842, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0001938436325872317}, {"id": 152, "seek": 78424, "start": 792.52, "end": 798.4, "text": " a feature request has been sent to let apps easily create mpcp socket.", "tokens": [257, 4111, 5308, 575, 668, 2279, 281, 718, 7733, 3612, 1884, 275, 79, 66, 79, 19741, 13], "temperature": 0.0, "avg_logprob": -0.18111030260721842, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0001938436325872317}, {"id": 153, "seek": 78424, "start": 798.4, "end": 804.96, "text": " But quickly the question Golang developers asked was, then why not using mpcp by default", "tokens": [583, 2661, 264, 1168, 36319, 656, 8849, 2351, 390, 11, 550, 983, 406, 1228, 275, 79, 66, 79, 538, 7576], "temperature": 0.0, "avg_logprob": -0.18111030260721842, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0001938436325872317}, {"id": 154, "seek": 78424, "start": 804.96, "end": 810.16, "text": " when a stream connection is requested, so when asking for TCP.", "tokens": [562, 257, 4309, 4984, 307, 16436, 11, 370, 562, 3365, 337, 48965, 13], "temperature": 0.0, "avg_logprob": -0.18111030260721842, "compression_ratio": 1.5560975609756098, "no_speech_prob": 0.0001938436325872317}, {"id": 155, "seek": 81016, "start": 810.16, "end": 815.76, "text": " And the proposition has been accepted, so we hope that stream application using the net", "tokens": [400, 264, 24830, 575, 668, 9035, 11, 370, 321, 1454, 300, 4309, 3861, 1228, 264, 2533], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 156, "seek": 81016, "start": 815.76, "end": 822.52, "text": " package will be able to create mpcp connection, and maybe later that will become the new default", "tokens": [7372, 486, 312, 1075, 281, 1884, 275, 79, 66, 79, 4984, 11, 293, 1310, 1780, 300, 486, 1813, 264, 777, 7576], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 157, "seek": 81016, "start": 822.52, "end": 825.04, "text": " behavior.", "tokens": [5223, 13], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 158, "seek": 81016, "start": 825.04, "end": 829.4399999999999, "text": " So I will now finish this presentation with a bit of history.", "tokens": [407, 286, 486, 586, 2413, 341, 5860, 365, 257, 857, 295, 2503, 13], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 159, "seek": 81016, "start": 829.4399999999999, "end": 835.56, "text": " I think it is worth telling you that because it was not easy to get mpcp in the official", "tokens": [286, 519, 309, 307, 3163, 3585, 291, 300, 570, 309, 390, 406, 1858, 281, 483, 275, 79, 66, 79, 294, 264, 4783], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 160, "seek": 81016, "start": 835.56, "end": 840.12, "text": " Linux kernel, it could be good to say a few words about that.", "tokens": [18734, 28256, 11, 309, 727, 312, 665, 281, 584, 257, 1326, 2283, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.14459802572009633, "compression_ratio": 1.6150793650793651, "no_speech_prob": 0.0003364926960784942}, {"id": 161, "seek": 84012, "start": 840.12, "end": 845.6, "text": " So still it was not as long and intense as having the full real-time support, and I see", "tokens": [407, 920, 309, 390, 406, 382, 938, 293, 9447, 382, 1419, 264, 1577, 957, 12, 3766, 1406, 11, 293, 286, 536], "temperature": 0.0, "avg_logprob": -0.2617702267386697, "compression_ratio": 1.4406779661016949, "no_speech_prob": 0.0011620792793110013}, {"id": 162, "seek": 84012, "start": 845.6, "end": 851.92, "text": " that some people here really know what I am talking about.", "tokens": [300, 512, 561, 510, 534, 458, 437, 286, 669, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.2617702267386697, "compression_ratio": 1.4406779661016949, "no_speech_prob": 0.0011620792793110013}, {"id": 163, "seek": 84012, "start": 851.92, "end": 857.36, "text": " The development of multi-pass TCP in the Linux kernel started in Belgium, at the university", "tokens": [440, 3250, 295, 4825, 12, 9216, 48965, 294, 264, 18734, 28256, 1409, 294, 28094, 11, 412, 264, 5454], "temperature": 0.0, "avg_logprob": -0.2617702267386697, "compression_ratio": 1.4406779661016949, "no_speech_prob": 0.0011620792793110013}, {"id": 164, "seek": 84012, "start": 857.36, "end": 861.4, "text": " in Luven and Ev, something like 15 years ago.", "tokens": [294, 5047, 553, 293, 5689, 11, 746, 411, 2119, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.2617702267386697, "compression_ratio": 1.4406779661016949, "no_speech_prob": 0.0011620792793110013}, {"id": 165, "seek": 84012, "start": 861.4, "end": 865.72, "text": " Surprisingly it didn't involve BS, no of course it did.", "tokens": [49908, 309, 994, 380, 9494, 27253, 11, 572, 295, 1164, 309, 630, 13], "temperature": 0.0, "avg_logprob": -0.2617702267386697, "compression_ratio": 1.4406779661016949, "no_speech_prob": 0.0011620792793110013}, {"id": 166, "seek": 86572, "start": 865.72, "end": 871.48, "text": " The legend says that the ID popped up when the young authors were drinking bees at a", "tokens": [440, 9451, 1619, 300, 264, 7348, 21545, 493, 562, 264, 2037, 16552, 645, 7583, 17511, 412, 257], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 167, "seek": 86572, "start": 871.48, "end": 877.1600000000001, "text": " crowd pub where the bartender was able to cope with the high demand by using multiple", "tokens": [6919, 1535, 689, 264, 44768, 3216, 390, 1075, 281, 22598, 365, 264, 1090, 4733, 538, 1228, 3866], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 168, "seek": 86572, "start": 877.1600000000001, "end": 882.64, "text": " bee pumps at the same time.", "tokens": [17479, 27648, 412, 264, 912, 565, 13], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 169, "seek": 86572, "start": 882.64, "end": 887.9200000000001, "text": " More seriously it started as a fork, but more to do some experimentation and to validate", "tokens": [5048, 6638, 309, 1409, 382, 257, 17716, 11, 457, 544, 281, 360, 512, 37142, 293, 281, 29562], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 170, "seek": 86572, "start": 887.9200000000001, "end": 889.52, "text": " the concept.", "tokens": [264, 3410, 13], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 171, "seek": 86572, "start": 889.52, "end": 894.6, "text": " So at the beginning of his PhD, Sebastian just wanted to prove it could work.", "tokens": [407, 412, 264, 2863, 295, 702, 14476, 11, 31102, 445, 1415, 281, 7081, 309, 727, 589, 13], "temperature": 0.0, "avg_logprob": -0.18103286494379459, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.000633561983704567}, {"id": 172, "seek": 89460, "start": 894.6, "end": 901.5600000000001, "text": " He started to modify TCP by adding more conditions, so just if it is multi-pass TCP, do that", "tokens": [634, 1409, 281, 16927, 48965, 538, 5127, 544, 4487, 11, 370, 445, 498, 309, 307, 4825, 12, 9216, 48965, 11, 360, 300], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 173, "seek": 89460, "start": 901.5600000000001, "end": 903.64, "text": " if not do something else.", "tokens": [498, 406, 360, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 174, "seek": 89460, "start": 903.64, "end": 910.52, "text": " Later, more people, mostly Christophe and Gregory, joined the project to help Sebastian.", "tokens": [11965, 11, 544, 561, 11, 5240, 2040, 404, 675, 293, 37915, 11, 6869, 264, 1716, 281, 854, 31102, 13], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 175, "seek": 89460, "start": 910.52, "end": 916.44, "text": " They then took over his work to make it, let's call it, production ready, but also to be", "tokens": [814, 550, 1890, 670, 702, 589, 281, 652, 309, 11, 718, 311, 818, 309, 11, 4265, 1919, 11, 457, 611, 281, 312], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 176, "seek": 89460, "start": 916.44, "end": 919.52, "text": " able to reach high performances.", "tokens": [1075, 281, 2524, 1090, 16087, 13], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 177, "seek": 89460, "start": 919.52, "end": 924.24, "text": " In other words, to get there, the modification in the Linux kernel were consequent and", "tokens": [682, 661, 2283, 11, 281, 483, 456, 11, 264, 26747, 294, 264, 18734, 28256, 645, 7242, 317, 293], "temperature": 0.0, "avg_logprob": -0.17151267506251824, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0012967422371730208}, {"id": 178, "seek": 92424, "start": 924.24, "end": 929.6, "text": " optimized for the mpcp use case.", "tokens": [26941, 337, 264, 275, 79, 66, 79, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.18558620067124956, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.0007804787601344287}, {"id": 179, "seek": 92424, "start": 929.6, "end": 938.36, "text": " In parallel, mpcp v0 RFC has been published in 2013 and the same year, a big company with", "tokens": [682, 8952, 11, 275, 79, 66, 79, 371, 15, 497, 18671, 575, 668, 6572, 294, 9012, 293, 264, 912, 1064, 11, 257, 955, 2237, 365], "temperature": 0.0, "avg_logprob": -0.18558620067124956, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.0007804787601344287}, {"id": 180, "seek": 92424, "start": 938.36, "end": 944.32, "text": " a logo looking like an apple, if you see, announced its support for the client side.", "tokens": [257, 9699, 1237, 411, 364, 10606, 11, 498, 291, 536, 11, 7548, 1080, 1406, 337, 264, 6423, 1252, 13], "temperature": 0.0, "avg_logprob": -0.18558620067124956, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.0007804787601344287}, {"id": 181, "seek": 92424, "start": 944.32, "end": 948.88, "text": " And of course they needed to have the support for the backend side and I will let you imagine", "tokens": [400, 295, 1164, 436, 2978, 281, 362, 264, 1406, 337, 264, 38087, 1252, 293, 286, 486, 718, 291, 3811], "temperature": 0.0, "avg_logprob": -0.18558620067124956, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.0007804787601344287}, {"id": 182, "seek": 92424, "start": 948.88, "end": 951.16, "text": " what they used.", "tokens": [437, 436, 1143, 13], "temperature": 0.0, "avg_logprob": -0.18558620067124956, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.0007804787601344287}, {"id": 183, "seek": 95116, "start": 951.16, "end": 955.92, "text": " So if we concentrate on the very beginning of the project, we can say that it was easy", "tokens": [407, 498, 321, 18089, 322, 264, 588, 2863, 295, 264, 1716, 11, 321, 393, 584, 300, 309, 390, 1858], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 184, "seek": 95116, "start": 955.92, "end": 959.4399999999999, "text": " to fork, but you will pay for it.", "tokens": [281, 17716, 11, 457, 291, 486, 1689, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 185, "seek": 95116, "start": 959.4399999999999, "end": 965.4, "text": " Yeah, please don't read the two lines above out of the context.", "tokens": [865, 11, 1767, 500, 380, 1401, 264, 732, 3876, 3673, 484, 295, 264, 4319, 13], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 186, "seek": 95116, "start": 965.4, "end": 969.68, "text": " But anyway, there are different utilization of a fork.", "tokens": [583, 4033, 11, 456, 366, 819, 37074, 295, 257, 17716, 13], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 187, "seek": 95116, "start": 969.68, "end": 971.92, "text": " You can pick your level.", "tokens": [509, 393, 1888, 428, 1496, 13], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 188, "seek": 95116, "start": 971.92, "end": 979.88, "text": " So I let you guess which one has been picked here, probably ultraviolence.", "tokens": [407, 286, 718, 291, 2041, 597, 472, 575, 668, 6183, 510, 11, 1391, 14808, 23566, 655, 13], "temperature": 0.0, "avg_logprob": -0.18056740968123727, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013741342118009925}, {"id": 189, "seek": 97988, "start": 979.88, "end": 985.6, "text": " Maybe because the Linux kernel is big, it's also complex and the development is very active.", "tokens": [2704, 570, 264, 18734, 28256, 307, 955, 11, 309, 311, 611, 3997, 293, 264, 3250, 307, 588, 4967, 13], "temperature": 0.0, "avg_logprob": -0.16885880788167318, "compression_ratio": 1.5023696682464456, "no_speech_prob": 0.0003981906920671463}, {"id": 190, "seek": 97988, "start": 985.6, "end": 991.52, "text": " So small modifications should not be difficult to maintain in a fork, but here we are talking", "tokens": [407, 1359, 26881, 820, 406, 312, 2252, 281, 6909, 294, 257, 17716, 11, 457, 510, 321, 366, 1417], "temperature": 0.0, "avg_logprob": -0.16885880788167318, "compression_ratio": 1.5023696682464456, "no_speech_prob": 0.0003981906920671463}, {"id": 191, "seek": 97988, "start": 991.52, "end": 999.08, "text": " about quite a lot of code and an important part is modifying the network stack, which", "tokens": [466, 1596, 257, 688, 295, 3089, 293, 364, 1021, 644, 307, 42626, 264, 3209, 8630, 11, 597], "temperature": 0.0, "avg_logprob": -0.16885880788167318, "compression_ratio": 1.5023696682464456, "no_speech_prob": 0.0003981906920671463}, {"id": 192, "seek": 97988, "start": 999.08, "end": 1004.08, "text": " still has many adaptations specific to mpcp.", "tokens": [920, 575, 867, 44465, 2685, 281, 275, 79, 66, 79, 13], "temperature": 0.0, "avg_logprob": -0.16885880788167318, "compression_ratio": 1.5023696682464456, "no_speech_prob": 0.0003981906920671463}, {"id": 193, "seek": 100408, "start": 1004.08, "end": 1011.08, "text": " And in fact, from those that are even duplicated function that were adapted for mpcp case.", "tokens": [400, 294, 1186, 11, 490, 729, 300, 366, 754, 1581, 564, 3587, 2445, 300, 645, 20871, 337, 275, 79, 66, 79, 1389, 13], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 194, "seek": 100408, "start": 1011.08, "end": 1017.5600000000001, "text": " So imagine that the code is modified on TCP side, we don't see it directly and then we", "tokens": [407, 3811, 300, 264, 3089, 307, 15873, 322, 48965, 1252, 11, 321, 500, 380, 536, 309, 3838, 293, 550, 321], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 195, "seek": 100408, "start": 1017.5600000000001, "end": 1020.9200000000001, "text": " need to adapt it later to mpcp.", "tokens": [643, 281, 6231, 309, 1780, 281, 275, 79, 66, 79, 13], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 196, "seek": 100408, "start": 1020.9200000000001, "end": 1024.16, "text": " But still that was not the nightmare level.", "tokens": [583, 920, 300, 390, 406, 264, 18724, 1496, 13], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 197, "seek": 100408, "start": 1024.16, "end": 1025.96, "text": " This is the nightmare level.", "tokens": [639, 307, 264, 18724, 1496, 13], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 198, "seek": 100408, "start": 1025.96, "end": 1032.6000000000001, "text": " So imagine that you have to deploy it on various embedded system with different LTS kernels", "tokens": [407, 3811, 300, 291, 362, 281, 7274, 309, 322, 3683, 16741, 1185, 365, 819, 441, 7327, 23434, 1625], "temperature": 0.0, "avg_logprob": -0.17255118341729192, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.0005010439199395478}, {"id": 199, "seek": 103260, "start": 1032.6, "end": 1037.28, "text": " from very old version like 3.4.", "tokens": [490, 588, 1331, 3037, 411, 805, 13, 19, 13], "temperature": 0.0, "avg_logprob": -0.19678662373469427, "compression_ratio": 1.5, "no_speech_prob": 0.0009750169119797647}, {"id": 200, "seek": 103260, "start": 1037.28, "end": 1042.12, "text": " So that's what we had to do at Tesserace and my explain why some of my colleague here", "tokens": [407, 300, 311, 437, 321, 632, 281, 360, 412, 314, 14239, 617, 293, 452, 2903, 983, 512, 295, 452, 13532, 510], "temperature": 0.0, "avg_logprob": -0.19678662373469427, "compression_ratio": 1.5, "no_speech_prob": 0.0009750169119797647}, {"id": 201, "seek": 103260, "start": 1042.12, "end": 1048.24, "text": " look like the avatar just by mentioning kernel back ports.", "tokens": [574, 411, 264, 36205, 445, 538, 18315, 28256, 646, 18160, 13], "temperature": 0.0, "avg_logprob": -0.19678662373469427, "compression_ratio": 1.5, "no_speech_prob": 0.0009750169119797647}, {"id": 202, "seek": 103260, "start": 1048.24, "end": 1053.56, "text": " In the meantime, very old version have been deprecated, but thanks to the embedded system", "tokens": [682, 264, 14991, 11, 588, 1331, 3037, 362, 668, 1367, 13867, 770, 11, 457, 3231, 281, 264, 16741, 1185], "temperature": 0.0, "avg_logprob": -0.19678662373469427, "compression_ratio": 1.5, "no_speech_prob": 0.0009750169119797647}, {"id": 203, "seek": 103260, "start": 1053.56, "end": 1056.24, "text": " wall, this took time.", "tokens": [2929, 11, 341, 1890, 565, 13], "temperature": 0.0, "avg_logprob": -0.19678662373469427, "compression_ratio": 1.5, "no_speech_prob": 0.0009750169119797647}, {"id": 204, "seek": 105624, "start": 1056.24, "end": 1064.0, "text": " So of course, this back port brought the drought of having to deal with many conflicts.", "tokens": [407, 295, 1164, 11, 341, 646, 2436, 3038, 264, 22900, 295, 1419, 281, 2028, 365, 867, 19807, 13], "temperature": 0.0, "avg_logprob": -0.1995063657345979, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.0003255880728829652}, {"id": 205, "seek": 105624, "start": 1064.0, "end": 1069.28, "text": " But good tools like git re re re and topgit help a lot for that.", "tokens": [583, 665, 3873, 411, 18331, 319, 319, 319, 293, 1192, 70, 270, 854, 257, 688, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.1995063657345979, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.0003255880728829652}, {"id": 206, "seek": 105624, "start": 1069.28, "end": 1075.44, "text": " So also add to that a bunch of batch script and it was possible to automate most of this", "tokens": [407, 611, 909, 281, 300, 257, 3840, 295, 15245, 5755, 293, 309, 390, 1944, 281, 31605, 881, 295, 341], "temperature": 0.0, "avg_logprob": -0.1995063657345979, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.0003255880728829652}, {"id": 207, "seek": 105624, "start": 1075.44, "end": 1078.6, "text": " laborious task.", "tokens": [5938, 851, 5633, 13], "temperature": 0.0, "avg_logprob": -0.1995063657345979, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.0003255880728829652}, {"id": 208, "seek": 105624, "start": 1078.6, "end": 1084.08, "text": " Topgit allows us to create a tree with dependency, that's what we can not really clearly see", "tokens": [8840, 70, 270, 4045, 505, 281, 1884, 257, 4230, 365, 33621, 11, 300, 311, 437, 321, 393, 406, 534, 4448, 536], "temperature": 0.0, "avg_logprob": -0.1995063657345979, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.0003255880728829652}, {"id": 209, "seek": 108408, "start": 1084.08, "end": 1091.76, "text": " on the side, but it is also very handy if a fork has to be maintained by a team where", "tokens": [322, 264, 1252, 11, 457, 309, 307, 611, 588, 13239, 498, 257, 17716, 575, 281, 312, 17578, 538, 257, 1469, 689], "temperature": 0.0, "avg_logprob": -0.17052720313848452, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.00046106913941912353}, {"id": 210, "seek": 108408, "start": 1091.76, "end": 1096.36, "text": " regular sync with the upstream have to be done as well.", "tokens": [3890, 20271, 365, 264, 33915, 362, 281, 312, 1096, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.17052720313848452, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.00046106913941912353}, {"id": 211, "seek": 108408, "start": 1096.36, "end": 1101.52, "text": " So at the end for us, what we were doing is that we were applying the patch likely at", "tokens": [407, 412, 264, 917, 337, 505, 11, 437, 321, 645, 884, 307, 300, 321, 645, 9275, 264, 9972, 3700, 412], "temperature": 0.0, "avg_logprob": -0.17052720313848452, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.00046106913941912353}, {"id": 212, "seek": 108408, "start": 1101.52, "end": 1109.28, "text": " the bottom and then propagated to all the kernel versions and then we had to resolve", "tokens": [264, 2767, 293, 550, 12425, 770, 281, 439, 264, 28256, 9606, 293, 550, 321, 632, 281, 14151], "temperature": 0.0, "avg_logprob": -0.17052720313848452, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.00046106913941912353}, {"id": 213, "seek": 108408, "start": 1109.28, "end": 1112.9199999999998, "text": " a few conflicts.", "tokens": [257, 1326, 19807, 13], "temperature": 0.0, "avg_logprob": -0.17052720313848452, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.00046106913941912353}, {"id": 214, "seek": 111292, "start": 1112.92, "end": 1116.92, "text": " But likely we were not doing that too much.", "tokens": [583, 3700, 321, 645, 406, 884, 300, 886, 709, 13], "temperature": 0.0, "avg_logprob": -0.20362088680267335, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0003240999940317124}, {"id": 215, "seek": 111292, "start": 1116.92, "end": 1122.3200000000002, "text": " At the end, the fork is still quite well used today despite all the work that has been done", "tokens": [1711, 264, 917, 11, 264, 17716, 307, 920, 1596, 731, 1143, 965, 7228, 439, 264, 589, 300, 575, 668, 1096], "temperature": 0.0, "avg_logprob": -0.20362088680267335, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0003240999940317124}, {"id": 216, "seek": 111292, "start": 1122.3200000000002, "end": 1124.96, "text": " on the upstream code.", "tokens": [322, 264, 33915, 3089, 13], "temperature": 0.0, "avg_logprob": -0.20362088680267335, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0003240999940317124}, {"id": 217, "seek": 111292, "start": 1124.96, "end": 1131.8400000000001, "text": " I even published new releases last Friday and probably one of the last one.", "tokens": [286, 754, 6572, 777, 16952, 1036, 6984, 293, 1391, 472, 295, 264, 1036, 472, 13], "temperature": 0.0, "avg_logprob": -0.20362088680267335, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0003240999940317124}, {"id": 218, "seek": 111292, "start": 1131.8400000000001, "end": 1137.76, "text": " But on the bright side, the migration process has started, wait, just take time.", "tokens": [583, 322, 264, 4730, 1252, 11, 264, 17011, 1399, 575, 1409, 11, 1699, 11, 445, 747, 565, 13], "temperature": 0.0, "avg_logprob": -0.20362088680267335, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0003240999940317124}, {"id": 219, "seek": 113776, "start": 1137.76, "end": 1143.2, "text": " The MPTCP support in the upstream kernel has started in 2020.", "tokens": [440, 14146, 18238, 47, 1406, 294, 264, 33915, 28256, 575, 1409, 294, 4808, 13], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 220, "seek": 113776, "start": 1143.2, "end": 1145.0, "text": " Why a so long delay?", "tokens": [1545, 257, 370, 938, 8577, 30], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 221, "seek": 113776, "start": 1145.0, "end": 1148.6, "text": " Was it an homage to the Belgium Rideway company?", "tokens": [3027, 309, 364, 44073, 281, 264, 28094, 35042, 676, 2237, 30], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 222, "seek": 113776, "start": 1148.6, "end": 1153.2, "text": " No, it was not in fact a new idea.", "tokens": [883, 11, 309, 390, 406, 294, 1186, 257, 777, 1558, 13], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 223, "seek": 113776, "start": 1153.2, "end": 1160.36, "text": " A few discussions and attempts have been made in the past, but were not successful.", "tokens": [316, 1326, 11088, 293, 15257, 362, 668, 1027, 294, 264, 1791, 11, 457, 645, 406, 4406, 13], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 224, "seek": 113776, "start": 1160.36, "end": 1165.32, "text": " In all case, it was not an easy task to upstream MPTCP.", "tokens": [682, 439, 1389, 11, 309, 390, 406, 364, 1858, 5633, 281, 33915, 14146, 18238, 47, 13], "temperature": 0.0, "avg_logprob": -0.2294650345705868, "compression_ratio": 1.4502369668246446, "no_speech_prob": 0.0005342277581803501}, {"id": 225, "seek": 116532, "start": 1165.32, "end": 1172.24, "text": " Also because the Linux TCP stack is highly optimized, but also because the net dev maintainers", "tokens": [2743, 570, 264, 18734, 48965, 8630, 307, 5405, 26941, 11, 457, 611, 570, 264, 2533, 1905, 6909, 433], "temperature": 0.0, "avg_logprob": -0.1851298956223476, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.0006598878535442054}, {"id": 226, "seek": 116532, "start": 1172.24, "end": 1174.08, "text": " have been clear on that topic.", "tokens": [362, 668, 1850, 322, 300, 4829, 13], "temperature": 0.0, "avg_logprob": -0.1851298956223476, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.0006598878535442054}, {"id": 227, "seek": 116532, "start": 1174.08, "end": 1179.24, "text": " It is okay to include MPTCP in the official Linux kernel, but the new implementation cannot", "tokens": [467, 307, 1392, 281, 4090, 14146, 18238, 47, 294, 264, 4783, 18734, 28256, 11, 457, 264, 777, 11420, 2644], "temperature": 0.0, "avg_logprob": -0.1851298956223476, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.0006598878535442054}, {"id": 228, "seek": 116532, "start": 1179.24, "end": 1185.76, "text": " affect the existing TCP stack, which means no performance regression maintainable and", "tokens": [3345, 264, 6741, 48965, 8630, 11, 597, 1355, 572, 3389, 24590, 6909, 712, 293], "temperature": 0.0, "avg_logprob": -0.1851298956223476, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.0006598878535442054}, {"id": 229, "seek": 116532, "start": 1185.76, "end": 1192.4399999999998, "text": " possible to disable it can be extended via user space.", "tokens": [1944, 281, 28362, 309, 393, 312, 10913, 5766, 4195, 1901, 13], "temperature": 0.0, "avg_logprob": -0.1851298956223476, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.0006598878535442054}, {"id": 230, "seek": 119244, "start": 1192.44, "end": 1197.0800000000002, "text": " Now with what I said earlier, you might already understand that we are not allowed to take", "tokens": [823, 365, 437, 286, 848, 3071, 11, 291, 1062, 1217, 1223, 300, 321, 366, 406, 4350, 281, 747], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 231, "seek": 119244, "start": 1197.0800000000002, "end": 1199.6000000000001, "text": " the initial fork as it was.", "tokens": [264, 5883, 17716, 382, 309, 390, 13], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 232, "seek": 119244, "start": 1199.6000000000001, "end": 1206.3200000000002, "text": " So it was built to support experiments and rapid changes, but not generic enough.", "tokens": [407, 309, 390, 3094, 281, 1406, 12050, 293, 7558, 2962, 11, 457, 406, 19577, 1547, 13], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 233, "seek": 119244, "start": 1206.3200000000002, "end": 1212.56, "text": " Also at the end, it was and still used on environment where the majority of the connection", "tokens": [2743, 412, 264, 917, 11, 309, 390, 293, 920, 1143, 322, 2823, 689, 264, 6286, 295, 264, 4984], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 234, "seek": 119244, "start": 1212.56, "end": 1216.88, "text": " are using MPTCP and not the opposite.", "tokens": [366, 1228, 14146, 18238, 47, 293, 406, 264, 6182, 13], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 235, "seek": 119244, "start": 1216.88, "end": 1218.96, "text": " So what were the solutions?", "tokens": [407, 437, 645, 264, 6547, 30], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 236, "seek": 119244, "start": 1218.96, "end": 1222.04, "text": " A rewrite almost from scratch was needed.", "tokens": [316, 28132, 1920, 490, 8459, 390, 2978, 13], "temperature": 0.0, "avg_logprob": -0.15205389080625592, "compression_ratio": 1.5647058823529412, "no_speech_prob": 0.00029157838434912264}, {"id": 237, "seek": 122204, "start": 1222.04, "end": 1226.44, "text": " That's probably why it took so long to say, okay, we need to do it.", "tokens": [663, 311, 1391, 983, 309, 1890, 370, 938, 281, 584, 11, 1392, 11, 321, 643, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1660548731223824, "compression_ratio": 1.5041666666666667, "no_speech_prob": 0.0003534529241733253}, {"id": 238, "seek": 122204, "start": 1226.44, "end": 1232.32, "text": " A key difference with the upstream kernel is that a new circuit type is used.", "tokens": [316, 2141, 2649, 365, 264, 33915, 28256, 307, 300, 257, 777, 9048, 2010, 307, 1143, 13], "temperature": 0.0, "avg_logprob": -0.1660548731223824, "compression_ratio": 1.5041666666666667, "no_speech_prob": 0.0003534529241733253}, {"id": 239, "seek": 122204, "start": 1232.32, "end": 1234.52, "text": " So there is no clean separation.", "tokens": [407, 456, 307, 572, 2541, 14634, 13], "temperature": 0.0, "avg_logprob": -0.1660548731223824, "compression_ratio": 1.5041666666666667, "no_speech_prob": 0.0003534529241733253}, {"id": 240, "seek": 122204, "start": 1234.52, "end": 1241.48, "text": " The user space interacts with the MPTCP circuit, which controls the different TCP sub-flows.", "tokens": [440, 4195, 1901, 43582, 365, 264, 14146, 18238, 47, 9048, 11, 597, 9003, 264, 819, 48965, 1422, 12, 33229, 13], "temperature": 0.0, "avg_logprob": -0.1660548731223824, "compression_ratio": 1.5041666666666667, "no_speech_prob": 0.0003534529241733253}, {"id": 241, "seek": 122204, "start": 1241.48, "end": 1251.12, "text": " Thanks to the TCP upper layer protocol, ULP, that was introduced in 2017 for KTLS, it was", "tokens": [2561, 281, 264, 48965, 6597, 4583, 10336, 11, 624, 45196, 11, 300, 390, 7268, 294, 6591, 337, 591, 51, 19198, 11, 309, 390], "temperature": 0.0, "avg_logprob": -0.1660548731223824, "compression_ratio": 1.5041666666666667, "no_speech_prob": 0.0003534529241733253}, {"id": 242, "seek": 125112, "start": 1251.12, "end": 1258.36, "text": " possible to minimize the modification in TCP code while still avoiding duplicating code.", "tokens": [1944, 281, 17522, 264, 26747, 294, 48965, 3089, 1339, 920, 20220, 17154, 990, 3089, 13], "temperature": 0.0, "avg_logprob": -0.15313442032058516, "compression_ratio": 1.484304932735426, "no_speech_prob": 0.0001288703497266397}, {"id": 243, "seek": 125112, "start": 1258.36, "end": 1266.36, "text": " An SKB extension mechanism has also been initially developed for MPTCP, not to include the socket", "tokens": [1107, 21483, 33, 10320, 7513, 575, 611, 668, 9105, 4743, 337, 14146, 18238, 47, 11, 406, 281, 4090, 264, 19741], "temperature": 0.0, "avg_logprob": -0.15313442032058516, "compression_ratio": 1.484304932735426, "no_speech_prob": 0.0001288703497266397}, {"id": 244, "seek": 125112, "start": 1266.36, "end": 1268.9599999999998, "text": " buffer size for the generic case.", "tokens": [21762, 2744, 337, 264, 19577, 1389, 13], "temperature": 0.0, "avg_logprob": -0.15313442032058516, "compression_ratio": 1.484304932735426, "no_speech_prob": 0.0001288703497266397}, {"id": 245, "seek": 125112, "start": 1268.9599999999998, "end": 1273.3999999999999, "text": " This is also used now by other components today.", "tokens": [639, 307, 611, 1143, 586, 538, 661, 6677, 965, 13], "temperature": 0.0, "avg_logprob": -0.15313442032058516, "compression_ratio": 1.484304932735426, "no_speech_prob": 0.0001288703497266397}, {"id": 246, "seek": 125112, "start": 1273.3999999999999, "end": 1277.6399999999999, "text": " Also we had to be very careful when modifying the TCP stacks.", "tokens": [2743, 321, 632, 281, 312, 588, 5026, 562, 42626, 264, 48965, 30792, 13], "temperature": 0.0, "avg_logprob": -0.15313442032058516, "compression_ratio": 1.484304932735426, "no_speech_prob": 0.0001288703497266397}, {"id": 247, "seek": 127764, "start": 1277.64, "end": 1282.4, "text": " So any ID to avoid that were good to take.", "tokens": [407, 604, 7348, 281, 5042, 300, 645, 665, 281, 747, 13], "temperature": 0.0, "avg_logprob": -0.19928843704695554, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.00025923748034983873}, {"id": 248, "seek": 127764, "start": 1282.4, "end": 1288.0800000000002, "text": " One last point is that the APIs have been defined not to have to maintain multiple version of", "tokens": [1485, 1036, 935, 307, 300, 264, 21445, 362, 668, 7642, 406, 281, 362, 281, 6909, 3866, 3037, 295], "temperature": 0.0, "avg_logprob": -0.19928843704695554, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.00025923748034983873}, {"id": 249, "seek": 127764, "start": 1288.0800000000002, "end": 1294.24, "text": " pass manager and packet scheduler in the kernel, even if for the last one is still ongoing.", "tokens": [1320, 6598, 293, 20300, 12000, 260, 294, 264, 28256, 11, 754, 498, 337, 264, 1036, 472, 307, 920, 10452, 13], "temperature": 0.0, "avg_logprob": -0.19928843704695554, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.00025923748034983873}, {"id": 250, "seek": 127764, "start": 1294.24, "end": 1298.8000000000002, "text": " But also one thing that we needed to do a lot of work.", "tokens": [583, 611, 472, 551, 300, 321, 2978, 281, 360, 257, 688, 295, 589, 13], "temperature": 0.0, "avg_logprob": -0.19928843704695554, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.00025923748034983873}, {"id": 251, "seek": 127764, "start": 1298.8000000000002, "end": 1304.1200000000001, "text": " Here I just want to say a special thanks to our ex-maintenor, Matt Martino and other", "tokens": [1692, 286, 445, 528, 281, 584, 257, 2121, 3231, 281, 527, 454, 12, 49417, 1147, 284, 11, 7397, 5807, 2982, 293, 661], "temperature": 0.0, "avg_logprob": -0.19928843704695554, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.00025923748034983873}, {"id": 252, "seek": 130412, "start": 1304.12, "end": 1309.0, "text": " fellows at Intel who had to step out very recently.", "tokens": [35595, 412, 19762, 567, 632, 281, 1823, 484, 588, 3938, 13], "temperature": 0.0, "avg_logprob": -0.278109073638916, "compression_ratio": 1.1616161616161615, "no_speech_prob": 0.0008783945813775063}, {"id": 253, "seek": 130412, "start": 1309.0, "end": 1313.28, "text": " In conclusion, it was a long road and it's not over.", "tokens": [682, 10063, 11, 309, 390, 257, 938, 3060, 293, 309, 311, 406, 670, 13], "temperature": 0.0, "avg_logprob": -0.278109073638916, "compression_ratio": 1.1616161616161615, "no_speech_prob": 0.0008783945813775063}, {"id": 254, "seek": 130412, "start": 1313.28, "end": 1322.6, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.278109073638916, "compression_ratio": 1.1616161616161615, "no_speech_prob": 0.0008783945813775063}, {"id": 255, "seek": 132260, "start": 1322.6, "end": 1336.0, "text": " Thank you, we have time for a couple of questions.", "tokens": [1044, 291, 11, 321, 362, 565, 337, 257, 1916, 295, 1651, 13], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 256, "seek": 132260, "start": 1336.0, "end": 1337.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 257, "seek": 132260, "start": 1337.0, "end": 1338.6, "text": " Just two quick questions.", "tokens": [1449, 732, 1702, 1651, 13], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 258, "seek": 132260, "start": 1338.6, "end": 1344.12, "text": " One, when you have multiple connections, can you kind of do it RAID 1 sort of style, like", "tokens": [1485, 11, 562, 291, 362, 3866, 9271, 11, 393, 291, 733, 295, 360, 309, 14626, 2777, 502, 1333, 295, 3758, 11, 411], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 259, "seek": 132260, "start": 1344.12, "end": 1349.7199999999998, "text": " where traffic goes on both simultaneously so that you don't have to resend something", "tokens": [689, 6419, 1709, 322, 1293, 16561, 370, 300, 291, 500, 380, 362, 281, 725, 521, 746], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 260, "seek": 132260, "start": 1349.7199999999998, "end": 1351.9199999999998, "text": " if something gets dropped?", "tokens": [498, 746, 2170, 8119, 30], "temperature": 0.0, "avg_logprob": -0.19582051116150695, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0008239722228609025}, {"id": 261, "seek": 135192, "start": 1351.92, "end": 1358.48, "text": " And can you speak also about SCTP and what's going on if it's dead or if, you know, because", "tokens": [400, 393, 291, 1710, 611, 466, 9028, 16804, 293, 437, 311, 516, 322, 498, 309, 311, 3116, 420, 498, 11, 291, 458, 11, 570], "temperature": 0.0, "avg_logprob": -0.2074025084332722, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.0009929309599101543}, {"id": 262, "seek": 135192, "start": 1358.48, "end": 1365.04, "text": " it's sort of in a similar space and I never understood why people focused more on MPTCP", "tokens": [309, 311, 1333, 295, 294, 257, 2531, 1901, 293, 286, 1128, 7320, 983, 561, 5178, 544, 322, 14146, 18238, 47], "temperature": 0.0, "avg_logprob": -0.2074025084332722, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.0009929309599101543}, {"id": 263, "seek": 135192, "start": 1365.04, "end": 1366.28, "text": " than SCTP.", "tokens": [813, 9028, 16804, 13], "temperature": 0.0, "avg_logprob": -0.2074025084332722, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.0009929309599101543}, {"id": 264, "seek": 135192, "start": 1366.28, "end": 1367.28, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2074025084332722, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.0009929309599101543}, {"id": 265, "seek": 135192, "start": 1367.28, "end": 1376.96, "text": " I will maybe start just with the SCTP aspect because I don't know much about it.", "tokens": [286, 486, 1310, 722, 445, 365, 264, 9028, 16804, 4171, 570, 286, 500, 380, 458, 709, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.2074025084332722, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.0009929309599101543}, {"id": 266, "seek": 137696, "start": 1376.96, "end": 1382.8400000000001, "text": " From what I remember is that here with multi-pass TCP we do an extension to TCP.", "tokens": [3358, 437, 286, 1604, 307, 300, 510, 365, 4825, 12, 9216, 48965, 321, 360, 364, 10320, 281, 48965, 13], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 267, "seek": 137696, "start": 1382.8400000000001, "end": 1387.72, "text": " So most likely where TCP was working before MPTCP can work.", "tokens": [407, 881, 3700, 689, 48965, 390, 1364, 949, 14146, 18238, 47, 393, 589, 13], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 268, "seek": 137696, "start": 1387.72, "end": 1393.0, "text": " There are some exceptions with some nasty middle boxes, but I think that's the main reason", "tokens": [821, 366, 512, 22847, 365, 512, 17923, 2808, 9002, 11, 457, 286, 519, 300, 311, 264, 2135, 1778], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 269, "seek": 137696, "start": 1393.0, "end": 1398.3600000000001, "text": " why we can't see multi-pass TCP in the field and maybe not the SCTP.", "tokens": [983, 321, 393, 380, 536, 4825, 12, 9216, 48965, 294, 264, 2519, 293, 1310, 406, 264, 9028, 16804, 13], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 270, "seek": 137696, "start": 1398.3600000000001, "end": 1404.8400000000001, "text": " I think it is not dead and still used for data centers, but I don't know exactly about", "tokens": [286, 519, 309, 307, 406, 3116, 293, 920, 1143, 337, 1412, 10898, 11, 457, 286, 500, 380, 458, 2293, 466], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 271, "seek": 137696, "start": 1404.8400000000001, "end": 1406.8400000000001, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.1939345305820681, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.001001408789306879}, {"id": 272, "seek": 140684, "start": 1406.84, "end": 1414.0, "text": " For the other question, I might have not understood everything, you said that you wanted to aggregate", "tokens": [1171, 264, 661, 1168, 11, 286, 1062, 362, 406, 7320, 1203, 11, 291, 848, 300, 291, 1415, 281, 26118], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 273, "seek": 140684, "start": 1414.0, "end": 1415.0, "text": " multiple paths.", "tokens": [3866, 14518, 13], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 274, "seek": 140684, "start": 1415.0, "end": 1420.0, "text": " You have your two paths, can you send the same data simultaneously?", "tokens": [509, 362, 428, 732, 14518, 11, 393, 291, 2845, 264, 912, 1412, 16561, 30], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 275, "seek": 140684, "start": 1420.0, "end": 1421.0, "text": " Yes, you can.", "tokens": [1079, 11, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 276, "seek": 140684, "start": 1421.0, "end": 1427.12, "text": " So there is even a packet scheduler called redundant packet scheduler.", "tokens": [407, 456, 307, 754, 257, 20300, 12000, 260, 1219, 40997, 20300, 12000, 260, 13], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 277, "seek": 140684, "start": 1427.12, "end": 1435.72, "text": " There is one small bit that is important to mention is that each path is still a TCP connection,", "tokens": [821, 307, 472, 1359, 857, 300, 307, 1021, 281, 2152, 307, 300, 1184, 3100, 307, 920, 257, 48965, 4984, 11], "temperature": 0.0, "avg_logprob": -0.2419703837191121, "compression_ratio": 1.6167400881057268, "no_speech_prob": 0.0008643760811537504}, {"id": 278, "seek": 143572, "start": 1435.72, "end": 1439.92, "text": " which means that if you have some losses on one path, you still need to retransmit it", "tokens": [597, 1355, 300, 498, 291, 362, 512, 15352, 322, 472, 3100, 11, 291, 920, 643, 281, 23106, 599, 3508, 309], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 279, "seek": 143572, "start": 1439.92, "end": 1441.24, "text": " on the same path.", "tokens": [322, 264, 912, 3100, 13], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 280, "seek": 143572, "start": 1441.24, "end": 1445.84, "text": " So at some point it might be okay to say that, okay, the other side received it via the other", "tokens": [407, 412, 512, 935, 309, 1062, 312, 1392, 281, 584, 300, 11, 1392, 11, 264, 661, 1252, 4613, 309, 5766, 264, 661], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 281, "seek": 143572, "start": 1445.84, "end": 1451.72, "text": " side, via the other path, so if you got a loss on one path.", "tokens": [1252, 11, 5766, 264, 661, 3100, 11, 370, 498, 291, 658, 257, 4470, 322, 472, 3100, 13], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 282, "seek": 143572, "start": 1451.72, "end": 1459.68, "text": " So the end host doesn't need it, but because there are middle boxes and others on the path,", "tokens": [407, 264, 917, 3975, 1177, 380, 643, 309, 11, 457, 570, 456, 366, 2808, 9002, 293, 2357, 322, 264, 3100, 11], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 283, "seek": 143572, "start": 1459.68, "end": 1463.3600000000001, "text": " you need to retransmit it at the TCP level.", "tokens": [291, 643, 281, 23106, 599, 3508, 309, 412, 264, 48965, 1496, 13], "temperature": 0.0, "avg_logprob": -0.18997556669218046, "compression_ratio": 1.8364485981308412, "no_speech_prob": 0.0002715972950682044}, {"id": 284, "seek": 146336, "start": 1463.36, "end": 1468.1599999999999, "text": " I don't know if it's clear, but so you can do re-injection, but you need to continue", "tokens": [286, 500, 380, 458, 498, 309, 311, 1850, 11, 457, 370, 291, 393, 360, 319, 12, 259, 1020, 313, 11, 457, 291, 643, 281, 2354], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 285, "seek": 146336, "start": 1468.1599999999999, "end": 1470.1999999999998, "text": " retransmit on the same path too.", "tokens": [23106, 599, 3508, 322, 264, 912, 3100, 886, 13], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 286, "seek": 146336, "start": 1470.1999999999998, "end": 1473.9199999999998, "text": " You can't just when you're trying to receive that request, just drop it.", "tokens": [509, 393, 380, 445, 562, 291, 434, 1382, 281, 4774, 300, 5308, 11, 445, 3270, 309, 13], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 287, "seek": 146336, "start": 1473.9199999999998, "end": 1477.9599999999998, "text": " No, if you want to do that, the best is probably to stop the connection, like if you want to", "tokens": [883, 11, 498, 291, 528, 281, 360, 300, 11, 264, 1151, 307, 1391, 281, 1590, 264, 4984, 11, 411, 498, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 288, "seek": 146336, "start": 1477.9599999999998, "end": 1483.1599999999999, "text": " have a low latency thing, or if you want a low latency, maybe don't use TCP, but that's", "tokens": [362, 257, 2295, 27043, 551, 11, 420, 498, 291, 528, 257, 2295, 27043, 11, 1310, 500, 380, 764, 48965, 11, 457, 300, 311], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 289, "seek": 146336, "start": 1483.1599999999999, "end": 1486.32, "text": " another question, not the topic.", "tokens": [1071, 1168, 11, 406, 264, 4829, 13], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 290, "seek": 146336, "start": 1486.32, "end": 1492.36, "text": " But if you want to do that, it's probably best to stop the pass and recreate it.", "tokens": [583, 498, 291, 528, 281, 360, 300, 11, 309, 311, 1391, 1151, 281, 1590, 264, 1320, 293, 25833, 309, 13], "temperature": 0.0, "avg_logprob": -0.26286967141287665, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.0007530176662839949}, {"id": 291, "seek": 149236, "start": 1492.36, "end": 1500.9199999999998, "text": " So I looked at the SysCityLs for MP TCP, and I found one called DSS checksum, and reading", "tokens": [407, 286, 2956, 412, 264, 318, 749, 34, 507, 43, 82, 337, 14146, 48965, 11, 293, 286, 1352, 472, 1219, 15816, 50, 13834, 449, 11, 293, 3760], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 292, "seek": 149236, "start": 1500.9199999999998, "end": 1505.4399999999998, "text": " the patch notes, it's something to do with middle boxes.", "tokens": [264, 9972, 5570, 11, 309, 311, 746, 281, 360, 365, 2808, 9002, 13], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 293, "seek": 149236, "start": 1505.4399999999998, "end": 1508.76, "text": " So is that giving you issues?", "tokens": [407, 307, 300, 2902, 291, 2663, 30], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 294, "seek": 149236, "start": 1508.76, "end": 1513.1599999999999, "text": " And last question, depending on that, why is it not on by default?", "tokens": [400, 1036, 1168, 11, 5413, 322, 300, 11, 983, 307, 309, 406, 322, 538, 7576, 30], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 295, "seek": 149236, "start": 1513.1599999999999, "end": 1515.12, "text": " Yes, no good question.", "tokens": [1079, 11, 572, 665, 1168, 13], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 296, "seek": 149236, "start": 1515.12, "end": 1519.8799999999999, "text": " So in short, middle boxes are not nasty.", "tokens": [407, 294, 2099, 11, 2808, 9002, 366, 406, 17923, 13], "temperature": 0.0, "avg_logprob": -0.31386705624159944, "compression_ratio": 1.4688995215311005, "no_speech_prob": 0.0007970280130393803}, {"id": 297, "seek": 151988, "start": 1519.88, "end": 1524.3600000000001, "text": " They like to modify everything, and I will not comment too much about that because at", "tokens": [814, 411, 281, 16927, 1203, 11, 293, 286, 486, 406, 2871, 886, 709, 466, 300, 570, 412], "temperature": 0.0, "avg_logprob": -0.1825033963381589, "compression_ratio": 1.5, "no_speech_prob": 0.0002919007383752614}, {"id": 298, "seek": 151988, "start": 1524.3600000000001, "end": 1530.2, "text": " my company, we do a transparent proxy, so we are kind of middle box.", "tokens": [452, 2237, 11, 321, 360, 257, 12737, 29690, 11, 370, 321, 366, 733, 295, 2808, 2424, 13], "temperature": 0.0, "avg_logprob": -0.1825033963381589, "compression_ratio": 1.5, "no_speech_prob": 0.0002919007383752614}, {"id": 299, "seek": 151988, "start": 1530.2, "end": 1536.0, "text": " But what can happen is that middle boxes can change a lot of things in TCP.", "tokens": [583, 437, 393, 1051, 307, 300, 2808, 9002, 393, 1319, 257, 688, 295, 721, 294, 48965, 13], "temperature": 0.0, "avg_logprob": -0.1825033963381589, "compression_ratio": 1.5, "no_speech_prob": 0.0002919007383752614}, {"id": 300, "seek": 151988, "start": 1536.0, "end": 1546.0, "text": " For example, you have all protocols like FTP, where the IP address is sent on the by-screen,", "tokens": [1171, 1365, 11, 291, 362, 439, 20618, 411, 479, 16804, 11, 689, 264, 8671, 2985, 307, 2279, 322, 264, 538, 12, 12439, 11], "temperature": 0.0, "avg_logprob": -0.1825033963381589, "compression_ratio": 1.5, "no_speech_prob": 0.0002919007383752614}, {"id": 301, "seek": 151988, "start": 1546.0, "end": 1547.8400000000001, "text": " but in clear text.", "tokens": [457, 294, 1850, 2487, 13], "temperature": 0.0, "avg_logprob": -0.1825033963381589, "compression_ratio": 1.5, "no_speech_prob": 0.0002919007383752614}, {"id": 302, "seek": 154784, "start": 1547.84, "end": 1553.24, "text": " Which means that if you have a NAT, you probably have a NAT that starts to look at the connection,", "tokens": [3013, 1355, 300, 498, 291, 362, 257, 14500, 11, 291, 1391, 362, 257, 14500, 300, 3719, 281, 574, 412, 264, 4984, 11], "temperature": 0.0, "avg_logprob": -0.16039169751680815, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.0002063717838609591}, {"id": 303, "seek": 154784, "start": 1553.24, "end": 1560.1999999999998, "text": " identify it is FTP, and modify the text in the by-stream, like the IP addresses.", "tokens": [5876, 309, 307, 479, 16804, 11, 293, 16927, 264, 2487, 294, 264, 538, 12, 9291, 11, 411, 264, 8671, 16862, 13], "temperature": 0.0, "avg_logprob": -0.16039169751680815, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.0002063717838609591}, {"id": 304, "seek": 154784, "start": 1560.1999999999998, "end": 1566.1999999999998, "text": " But because it does that, the size can change, and if they don't update MP TCP header, because", "tokens": [583, 570, 309, 775, 300, 11, 264, 2744, 393, 1319, 11, 293, 498, 436, 500, 380, 5623, 14146, 48965, 23117, 11, 570], "temperature": 0.0, "avg_logprob": -0.16039169751680815, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.0002063717838609591}, {"id": 305, "seek": 154784, "start": 1566.1999999999998, "end": 1572.9199999999998, "text": " we need to add some information to be able to reassemble the data on the other hand, they", "tokens": [321, 643, 281, 909, 512, 1589, 281, 312, 1075, 281, 319, 37319, 264, 1412, 322, 264, 661, 1011, 11, 436], "temperature": 0.0, "avg_logprob": -0.16039169751680815, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.0002063717838609591}, {"id": 306, "seek": 154784, "start": 1572.9199999999998, "end": 1576.1599999999999, "text": " can mess up with MP TCP.", "tokens": [393, 2082, 493, 365, 14146, 48965, 13], "temperature": 0.0, "avg_logprob": -0.16039169751680815, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.0002063717838609591}, {"id": 307, "seek": 157616, "start": 1576.16, "end": 1579.92, "text": " So there is this checksum mechanism.", "tokens": [407, 456, 307, 341, 13834, 449, 7513, 13], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 308, "seek": 157616, "start": 1579.92, "end": 1586.4, "text": " But there is one big inconvenience is that for the moment, there is no hardware acceleration,", "tokens": [583, 456, 307, 472, 955, 28752, 1182, 307, 300, 337, 264, 1623, 11, 456, 307, 572, 8837, 17162, 11], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 309, "seek": 157616, "start": 1586.4, "end": 1588.44, "text": " so it's quite costly.", "tokens": [370, 309, 311, 1596, 28328, 13], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 310, "seek": 157616, "start": 1588.44, "end": 1595.3200000000002, "text": " And the other thing is that at the end, it's quite rare that you have some middle boxes", "tokens": [400, 264, 661, 551, 307, 300, 412, 264, 917, 11, 309, 311, 1596, 5892, 300, 291, 362, 512, 2808, 9002], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 311, "seek": 157616, "start": 1595.3200000000002, "end": 1597.52, "text": " modifying the by-stream like that.", "tokens": [42626, 264, 538, 12, 9291, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 312, "seek": 157616, "start": 1597.52, "end": 1602.6000000000001, "text": " I know that in the past, you had some, if you were going on some website, for example,", "tokens": [286, 458, 300, 294, 264, 1791, 11, 291, 632, 512, 11, 498, 291, 645, 516, 322, 512, 3144, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.19975196209150492, "compression_ratio": 1.6529680365296804, "no_speech_prob": 0.0003200116625521332}, {"id": 313, "seek": 160260, "start": 1602.6, "end": 1608.04, "text": " for AT without HTTPS, it's possible that some by-stream were injected.", "tokens": [337, 8872, 1553, 11751, 51, 6273, 11, 309, 311, 1944, 300, 512, 538, 12, 9291, 645, 36967, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 314, "seek": 160260, "start": 1608.04, "end": 1612.9199999999998, "text": " And probably when they do the injection, they don't modify MP TCP.", "tokens": [400, 1391, 562, 436, 360, 264, 22873, 11, 436, 500, 380, 16927, 14146, 48965, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 315, "seek": 160260, "start": 1612.9199999999998, "end": 1615.48, "text": " Sorry, we need to move on.", "tokens": [4919, 11, 321, 643, 281, 1286, 322, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 316, "seek": 160260, "start": 1615.48, "end": 1616.48, "text": " Yeah, sorry.", "tokens": [865, 11, 2597, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 317, "seek": 160260, "start": 1616.48, "end": 1617.48, "text": " Otherwise, we won't be unscheduled.", "tokens": [10328, 11, 321, 1582, 380, 312, 2693, 19318, 45893, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 318, "seek": 160260, "start": 1617.48, "end": 1618.48, "text": " So that's why we don't have checksum.", "tokens": [407, 300, 311, 983, 321, 500, 380, 362, 13834, 449, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 319, "seek": 160260, "start": 1618.48, "end": 1619.48, "text": " But thank you.", "tokens": [583, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 320, "seek": 160260, "start": 1619.48, "end": 1620.48, "text": " Thank you so much for the talk.", "tokens": [1044, 291, 370, 709, 337, 264, 751, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 321, "seek": 160260, "start": 1620.48, "end": 1621.48, "text": " Thank you for the questions.", "tokens": [1044, 291, 337, 264, 1651, 13], "temperature": 0.0, "avg_logprob": -0.2359285721412072, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.0002921236155088991}, {"id": 322, "seek": 162148, "start": 1621.48, "end": 1632.48, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50914], "temperature": 0.0, "avg_logprob": -0.9842066764831543, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.0037394887767732143}], "language": "en"}