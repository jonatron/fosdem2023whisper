{"text": " Hi, everyone! Hi, Fosdame. How are you doing? I hope that you're doing great. Yeah! Let's go! So I'm really honored to present my talk about how I ported Doom to the browser with Blazor Wazen. So it's a topic about another language, which is, we will see. So a quick word about myself. So I'm Yessin Ben-Abbas. I'm a DevRel at Wordline. I'm a teacher also. And during my spare time, I love to play video games. So that's one of the things that made me make this port. But before going further, let me explain what is a port. So game porting consists of making a game run in another platform other than the original one. There are many ports that are released nowadays. Some are good, some are bad, depending on how they are developed. And it consists of adapting the source code of the original game into the new platform. So adapting means that maybe we need to change some bits of the code. Maybe sometimes it can be a whole rewrite, depending on the differences between the platforms and how the game has been developed. And using a virtual machine or an emulator is not really considered as porting. You really need to have access to the source code and adapt it to the new target platform. So in the beginning, I wasn't really confident with making a port. I considered it as a complex task, difficult. I didn't have a clear vision on what it is. And what really gave me a first inspiration to consider porting games is modern vintage gamer. Who knows about MVG? Yes. So he's a game developer, a YouTuber who makes great videos. I didn't expect it, but he made a video where he showed how to port Heart of Darkness, one of the greatest games of retro gaming. And he showed how he ported it to the original Xbox. So he made a video where he showed changing includes. So watching this video really made me more confident and considering porting in one of my activities. But that's not the only thing that gave me the idea of porting a game. The other thing is I like to play with.NET framework. I really like this framework. Because it has many good things. Some of them is that it's an open source, cross platform, general purpose framework. So it runs on Linux, Windows, Mac, Android, iOS, a lot of platforms. And even other platforms that I'll talk about now. And the language, the main language of this framework is C-Sharp. So C-Sharp is really, really good language that keeps evolving over the years. It has some features that you can find in modern languages, null safety, extension functions, and this kind of stuff. So it really keeps evolving great language. However, in the beginning of the framework, the browser was not target. But in 2020, with the release of.NET 5,.NET introduced the support, the Blazor wasm framework. So it's a component-based framework, like Angular, React, and view with components. But the code of the component is in C-Sharp. And it runs locally, natively on the browser, thanks to a WebAssembly stack, as you can see here. So Blazor has WebAssembly implementation, which allows the developer to access Razor components and also access the.NET framework, and also communicate with the DOM. So this is an example of a Razor component. It's similar to what you see in Angular or View. The difference is that the code below is in C-Sharp. In addition to that, you can have also CSS, of course, and you can even call JavaScript and it interoperates with C-Sharp. So when I saw this, C-Sharp.js, which interoperates, I was like this. I was amazed. I was really happy to see this. And I told myself, it's time to make this port. So now I need to find a game to port. There are many games with source code available. And the game that I chose, no spoiler here, it's Doom. So I will tell you next why I chose Doom. But one of the reasons is that it's one of the most successful first-person shooters. And not footers, shooters, sorry, for the stick. And also, technically speaking, it's well developed, in my opinion, because the logic of the game is separate from the resources. So you have the famous WAD files of Doom. So it contains the assets of the game. And you have really what updates the game state, the position of the character, or the game logic in a separate project. So that allows to have Doom being portable by design. And in terms of ports, Doom has a lot of them in video game consoles, of course, and even anything that has a screen and some processing, as you can see here. And there are even more. So comes the reason why I chose Doom, because I found that there is a.NET port already existing of Doom, of Linux Doom, which is the source code released by id Software. And in GitHub, there is a repository which has developed a port of Doom in.NET. However, this port uses libraries that communicate with hardware, like graphics, audio input, which are not compatible with the browser. So that's why my work was to take this port of Doom and make it work on the browser. So just to be clear, I used the V1 of Managed Doom, because currently they are developing a V2, which uses another library, but just to be clear on my work. So to summarize, id Software released the source code of Doom for Linux. Since you developed Managed Doom, which targets any platform that is targeted by SFML, desktops mostly. And this is what I intervene to base my work on this port and make it work on the browser. So before starting work, my porting, I made a strategy which is this one. So this is an AI image, by the way. I tape Doom monster typing on keyboard, and I got this. So my porting strategy was to get something that works like proof of concept that works quickly and to demonstrate quickly. So the first step is to take the source code and compile it with the Blazor framework, as simple as it is. And as soon as I see a compilation error, I delete the code and I add the to-do. So another presentation with to-dos, that's fine. So after that, once the code compiles, I replaced little by little bits of code that are not implemented, or the methods or functions that are not implemented, by giving priority to frame rendering, because it's always nice to see something on the screen, rather than working blindly. And in terms of optimization, I always left that to later, unless it's really necessary. And in terms of reading documentation, so it's really well documented, how Doom is implemented, but I only read the parts which are really relevant and important, specifically how the Doom image is drawn on the screen, when the frame data is generated by the engine. And with this kind of porting strategy, like two, three weeks of part-time or site project work, I was able to achieve something, a port that can be run, executed, even if it's not perfect yet, but we'll see in the demo later how it works. Now let's enter into more details on how I ported more concretely this into the browser. So first of all, before giving more further explanations, let me show you how game is developed most of the time. So it's a big picture of the game algorithm. First of all, we have a wide loop, which is an infinite loop, but it doesn't iterate as soon as possible. It iterates only when the frame-pacing is relevant. For example, if you have 30 FPS game, this next iteration will wait a little bit if the previous frame was computed very quickly. So it allows to have a frame-pacing which is correct and nice to the eye for the user. So once the frame is ready, we get the user input compared to his previous frame. Really simple. And after that, we run a frame or we compute the next frame of the game. So we run the update game state. It's just an example name of the method. It takes the input of the user, the what file for the doom in this case. And then it advances the game one frame. So it updates the player position, the monster position, the ammo, the status, his life, all this kind of stuff. And it also generates to be rendered a frame and some audio. And this is run. So for each frame, this algorithm is run and it updates the game each frame. And once we get a frame and some audio, we play them and render them to the user. So when you see this, you can start guessing which parts. So in the managed doom, this all is done in C-sharp. That's clear. And you can start to see which parts need to be adapted for the browser, which are not available in C-sharp, but need to go to the JavaScript realm to be able to achieve it. But to show you what I ported more precisely, let me show this in another way. So here. So we have the while loop and the frame-pacing step here. Next, the user input is sent to the update game state with the what file as argument. And then we generate some audio and the frame to be rendered. And it loops. So this is what needs to be ported, what you see in red. So what you see on the top is frame pacing. It's not really Blazor relevant, but browser relevant. For a frame pacing, there is a better way to base frame in JavaScript, base frames in JavaScript. And to render, since SFML is not available in Blazor, so this needs to be replaced. Also the update game states which is also, so everything is in C-sharp. Update game state, even though it's a platform agnostic, it's not 100% the case. So there needs to be some bits that needed to be adapted to the browser. But hopefully 70% of the code approximately was across platform and runs on the browser without any problem. So after some work, some coding, some fun, some fails and learning, I achieved this result. So I replaced the white loop with request animation frame. Anyone knows about request animation frame here? Yes. Nice. So yeah, request animation frame is how you tell the browser, so I want to render frames in an optimized manner for the browser. For example, when you switch a tab, don't do anything to optimize energy. So you ask the browser, request a new frame. When you see it relevant to compute a new frame for my game, call me back. So it's a callback. And for each frame, we call it back. After that, so once this has been changed, change also the rendering. So for the audio, it's the audio context library. And for rendering, it's the canvas, of course. So audio context is the audio API of the browser. But there is one thing that I didn't mention yet, and that you see here, is that in this state, since I was, as I said earlier, Blazor is a component-based framework. It's like Angular View React. You need to have some kind of main component, which is the entry point of your program or of your component. So here it's missing. So that's why I added or I had to have a Blazor component, which only serves as the entry point to invoke the JavaScript, which then goes back to C sharp. So this is C sharp.net, C sharp. So when I say C sharp.net, I say them interchangeably. So this is JavaScript. We go back to C sharp. We go back to JavaScript. So there is a lot of context switching or language switching. And this is achieved thanks to this API. So Blazor provides an API that allows to go back and forth from a language to the other. So this is Blazor way of doing things before.NET 7. Starting.NET 7, there is even a better way to do this. I'll show it at the end of the presentation. Okay. So now we have something that runs. So I will show you, quickly show you for the audio parts, some code, and then I will continue the last, or maybe just the entry point and then continue the presentation. So this is the main component. As you can see here, which in the code, so we have the canvas here. And here we have, we initialize the DOM object or the game object. And then here we invoke the JavaScript method that calls request animation frame. So we invoke the JavaScript method here. We here handle the frame pacing. Okay. Here we handle the frame pacing. And then we call back.NET to run an iteration of the game, the DOM engine to run a computer frame. And then we call request animation frame to prepare for the next frame. Which calls back this method. So this is like an infinite loop. And this method that you see here, which invokes.NET code, just invokes the game objects and requests it to render a new, to compute a new frame with the user input. So this, I will just skip it. So this is how audio and video are rendered. So it's communication between C sharp and JavaScript. And I continue. So, so what I learned from this in Blazor, avoid copying arrays, big arrays. In the beginning, in the.managed DOM source code, the final image is generated by copying, converting a one-dimensional array into a 2D array. So this slowed down the game a lot, a lot, a lot. So I removed this part from the managed DOM source code. And I sent it to JavaScript. That's what you, what I was, was shown in the previous slide about frame rendering. And I don't have to cover it. But yeah, avoid copying big arrays in.NET. This is in.NET 5. Maybe in.NET 7 it has been improved. Avoid extensive logging. And calling Blazor from JavaScript from Blazor communication can be very fast if you use the correct API. As I said, however, this, the API that I used is undocumented. And I confirm it because I found no documentation, just some source code or some obscure GitHub repositories. But hopefully in.NET 7 it's, it's improved. In JavaScript, I learned that request animation frame is the way to paste frames. And to play audio programatically, you need to have some user interaction before or the audio context API doesn't work. So here is the demo. So I click the, to enable the audio, the user interaction. And let's see. Yes, of course. Yes. And here we go. So just to show you that we have sound. So don't be afraid. It's just a game. And just to show you that you also have secret passages. I don't know if you know this one. You have 200 armor. But that's another topic. And it runs correct frames. It's a 2012 Macbook and it runs at 30 FPS. No problem. Okay. So last two slides, the interrupt in.NET 7. So here's how interrupt works now. You don't need Blazor. It means you don't need to create component if you want to interact between JavaScript and.NET anymore. And I'm working currently on this part because it's really exciting to see this kind of work. So to call JavaScript methods from.NET, you just need to export your JavaScript method as you do in any JavaScript module. And you call here, you just import the method and you can have access to it. And in the opposite sense, you just export your.NET method and then you import it in JavaScript using this kind of code. And that's it. So I'm working on changing how the game is ported to this. And in terms of next step, then, it's to migrate to JS interupt. Update to manage Doom V2. Maybe I will gain some more performance. After that, I would like to have some game music and also to be able to play other wads. Currently, only the Doom one works. I don't know yet why. And as long-term, really, it's also a wish. Maybe this can be integrated to the official managed Doom project. So as a conclusion, wasm makes existing code compatible with browser. It means that, I mean, wasm is not just the very fast JavaScript alternative. It also opens the way to make many, many languages, many, many technologies run on the browser. So that's really what I like. What's really exciting for me, at least about wasm, and porting games is fun. Developing is fun. Do you agree? Yes. Thank you very much. Thank you. So we have time for a couple of questions. Who wants to ask the first question? Thank you. Hi. First thanks a lot. It was really, really insightful. Thank you. I have a question about request animation frame. I think I saw, so, because request animation runs at 60 FPS, right? And then I saw you do something with timestamps to try to do 30. Yes. Does it ever drop or become inaccurate? Or is it just, is that like the right way to achieve 30 FPS? Yeah, I guess it's, maybe, I'm not a JavaScript specialist on this. Me neither. I'm curious. It's here, I guess. Yes, it's here. For me, it worked. Yes, I didn't have eyes here. That's what I found on the Internet. I tried it. And I've seen the demo. It doesn't drop. When it drops, it's really when there is a lot of things happening. When there is a lot of audio, it's still not optimized a lot, the audio part. But this frame-pacing, for me, it works. So you compute the duration between the last request frame and the new request frame. So for me, it's okay. Excellent. Thank you very much. You're welcome. Next question. Yeah. The next speaker who is speaking after? Nobody? Nobody is speaking after you? I mean, who is taking that seat who are standing there? Okay, we'll call them. So it's a follow-up to the previous question, actually. Have you tried removing this check and see how fast you could run the game? Can you do 1,000 FPS? No, it's not 1,000. No. I actually tried to remove, but don't remember, but it's not 1,000 FPS. For sure, it's certain. It's not really, really fast also. Like maybe to 40, 50 FPS, it depends also on the machine. It depends on the hardware that you have. On the processor hardware that I have, I don't have a gaming computer. It was like maybe 40, 50 FPS. Okay, thanks. But yeah, that's a good question because you see when we talk about good ports, bad ports, for example, this, I mean, it's a quick to achieve port, but it's not the most optimized one. So that's when you see game companies making ports. And also, for example, when I said that the array copy on.NET is slow. So at the same time, if you don't have time to optimize, you just leave it as it, and you get a crappy port with slow frame rate. But I did the effort to at least make this part in JavaScript. Welcome. So next question. He's going to ask more if you don't, so he's ready. Go for it. Yeah, another question is, what is the size of the wasn't files or whatever that needs to be downloaded to play this game? It's big. Let me show you. I don't know. It's like this. It's a big file. It's a big file. So let me inspect. When you go to application here, you see the storage, you have like 21 megabytes. It's a big file. It's not huge. It's not like Windows when you start on desktop. It has a little bit of overhead, but it's not downloaded each time, you know, maybe the first time. Yeah, that's a good question. So we can have one last question. And in the meantime, while people are still thinking, please don't stay on the edge of the lines, because people are standing in the back. People arrive a couple of minutes later. So if you are at the edge, if you're here, and there is an empty seat, you need to shift just a bit. And you can also optimize this by making a service worker. I did it, but it doesn't work anymore. But you can also make this as a service worker. And now if you're here, if you see me looking at you, please shift a little bit. I don't do this for the pleasure of annoying you. It's because there are people who are going to enter the room. We're going to have more and more people, hopefully, who are going to ask written questions. So then please let them sit next to you. Also, there is a trash right there. So when you exit the room, and if you see something, Evan, if it's not yours, please pick it up. There is another trash there. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.68, "text": " Hi, everyone! Hi, Fosdame. How are you doing? I hope that you're doing great. Yeah! Let's", "tokens": [2421, 11, 1518, 0, 2421, 11, 479, 329, 67, 529, 13, 1012, 366, 291, 884, 30, 286, 1454, 300, 291, 434, 884, 869, 13, 865, 0, 961, 311], "temperature": 0.0, "avg_logprob": -0.3308815094361822, "compression_ratio": 1.3641025641025641, "no_speech_prob": 0.20480550825595856}, {"id": 1, "seek": 0, "start": 12.68, "end": 19.56, "text": " go! So I'm really honored to present my talk about how I ported Doom to the browser with", "tokens": [352, 0, 407, 286, 478, 534, 14556, 281, 1974, 452, 751, 466, 577, 286, 2436, 292, 30168, 281, 264, 11185, 365], "temperature": 0.0, "avg_logprob": -0.3308815094361822, "compression_ratio": 1.3641025641025641, "no_speech_prob": 0.20480550825595856}, {"id": 2, "seek": 0, "start": 19.56, "end": 26.48, "text": " Blazor Wazen. So it's a topic about another language, which is, we will see. So a quick", "tokens": [18925, 89, 284, 343, 921, 268, 13, 407, 309, 311, 257, 4829, 466, 1071, 2856, 11, 597, 307, 11, 321, 486, 536, 13, 407, 257, 1702], "temperature": 0.0, "avg_logprob": -0.3308815094361822, "compression_ratio": 1.3641025641025641, "no_speech_prob": 0.20480550825595856}, {"id": 3, "seek": 2648, "start": 26.48, "end": 32.84, "text": " word about myself. So I'm Yessin Ben-Abbas. I'm a DevRel at Wordline. I'm a teacher also.", "tokens": [1349, 466, 2059, 13, 407, 286, 478, 398, 442, 259, 3964, 12, 32, 6692, 296, 13, 286, 478, 257, 9096, 49029, 412, 8725, 1889, 13, 286, 478, 257, 5027, 611, 13], "temperature": 0.0, "avg_logprob": -0.1518711453392392, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.0023133663926273584}, {"id": 4, "seek": 2648, "start": 32.84, "end": 40.32, "text": " And during my spare time, I love to play video games. So that's one of the things that made me", "tokens": [400, 1830, 452, 13798, 565, 11, 286, 959, 281, 862, 960, 2813, 13, 407, 300, 311, 472, 295, 264, 721, 300, 1027, 385], "temperature": 0.0, "avg_logprob": -0.1518711453392392, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.0023133663926273584}, {"id": 5, "seek": 2648, "start": 40.32, "end": 48.24, "text": " make this port. But before going further, let me explain what is a port. So game porting consists", "tokens": [652, 341, 2436, 13, 583, 949, 516, 3052, 11, 718, 385, 2903, 437, 307, 257, 2436, 13, 407, 1216, 2436, 278, 14689], "temperature": 0.0, "avg_logprob": -0.1518711453392392, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.0023133663926273584}, {"id": 6, "seek": 2648, "start": 48.24, "end": 54.36, "text": " of making a game run in another platform other than the original one. There are many ports that", "tokens": [295, 1455, 257, 1216, 1190, 294, 1071, 3663, 661, 813, 264, 3380, 472, 13, 821, 366, 867, 18160, 300], "temperature": 0.0, "avg_logprob": -0.1518711453392392, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.0023133663926273584}, {"id": 7, "seek": 5436, "start": 54.36, "end": 60.88, "text": " are released nowadays. Some are good, some are bad, depending on how they are developed. And it", "tokens": [366, 4736, 13434, 13, 2188, 366, 665, 11, 512, 366, 1578, 11, 5413, 322, 577, 436, 366, 4743, 13, 400, 309], "temperature": 0.0, "avg_logprob": -0.10695616404215495, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.0001363997143926099}, {"id": 8, "seek": 5436, "start": 60.88, "end": 70.08, "text": " consists of adapting the source code of the original game into the new platform. So adapting means", "tokens": [14689, 295, 34942, 264, 4009, 3089, 295, 264, 3380, 1216, 666, 264, 777, 3663, 13, 407, 34942, 1355], "temperature": 0.0, "avg_logprob": -0.10695616404215495, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.0001363997143926099}, {"id": 9, "seek": 5436, "start": 70.08, "end": 75.36, "text": " that maybe we need to change some bits of the code. Maybe sometimes it can be a whole rewrite,", "tokens": [300, 1310, 321, 643, 281, 1319, 512, 9239, 295, 264, 3089, 13, 2704, 2171, 309, 393, 312, 257, 1379, 28132, 11], "temperature": 0.0, "avg_logprob": -0.10695616404215495, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.0001363997143926099}, {"id": 10, "seek": 5436, "start": 75.36, "end": 82.8, "text": " depending on the differences between the platforms and how the game has been developed. And using", "tokens": [5413, 322, 264, 7300, 1296, 264, 9473, 293, 577, 264, 1216, 575, 668, 4743, 13, 400, 1228], "temperature": 0.0, "avg_logprob": -0.10695616404215495, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.0001363997143926099}, {"id": 11, "seek": 8280, "start": 82.8, "end": 88.64, "text": " a virtual machine or an emulator is not really considered as porting. You really need to have", "tokens": [257, 6374, 3479, 420, 364, 846, 16381, 307, 406, 534, 4888, 382, 2436, 278, 13, 509, 534, 643, 281, 362], "temperature": 0.0, "avg_logprob": -0.09795269053033058, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.0003263417165726423}, {"id": 12, "seek": 8280, "start": 88.64, "end": 96.84, "text": " access to the source code and adapt it to the new target platform. So in the beginning, I wasn't", "tokens": [2105, 281, 264, 4009, 3089, 293, 6231, 309, 281, 264, 777, 3779, 3663, 13, 407, 294, 264, 2863, 11, 286, 2067, 380], "temperature": 0.0, "avg_logprob": -0.09795269053033058, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.0003263417165726423}, {"id": 13, "seek": 8280, "start": 96.84, "end": 103.28, "text": " really confident with making a port. I considered it as a complex task, difficult. I didn't have a", "tokens": [534, 6679, 365, 1455, 257, 2436, 13, 286, 4888, 309, 382, 257, 3997, 5633, 11, 2252, 13, 286, 994, 380, 362, 257], "temperature": 0.0, "avg_logprob": -0.09795269053033058, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.0003263417165726423}, {"id": 14, "seek": 8280, "start": 103.28, "end": 110.4, "text": " clear vision on what it is. And what really gave me a first inspiration to consider porting games", "tokens": [1850, 5201, 322, 437, 309, 307, 13, 400, 437, 534, 2729, 385, 257, 700, 10249, 281, 1949, 2436, 278, 2813], "temperature": 0.0, "avg_logprob": -0.09795269053033058, "compression_ratio": 1.6609442060085837, "no_speech_prob": 0.0003263417165726423}, {"id": 15, "seek": 11040, "start": 110.4, "end": 119.96000000000001, "text": " is modern vintage gamer. Who knows about MVG? Yes. So he's a game developer, a YouTuber who makes", "tokens": [307, 4363, 23050, 30266, 13, 2102, 3255, 466, 17663, 38, 30, 1079, 13, 407, 415, 311, 257, 1216, 10754, 11, 257, 23349, 567, 1669], "temperature": 0.0, "avg_logprob": -0.1646272219144381, "compression_ratio": 1.4773869346733668, "no_speech_prob": 0.005103586707264185}, {"id": 16, "seek": 11040, "start": 119.96000000000001, "end": 127.04, "text": " great videos. I didn't expect it, but he made a video where he showed how to port Heart of Darkness,", "tokens": [869, 2145, 13, 286, 994, 380, 2066, 309, 11, 457, 415, 1027, 257, 960, 689, 415, 4712, 577, 281, 2436, 13569, 295, 38198, 11], "temperature": 0.0, "avg_logprob": -0.1646272219144381, "compression_ratio": 1.4773869346733668, "no_speech_prob": 0.005103586707264185}, {"id": 17, "seek": 11040, "start": 127.04, "end": 134.76, "text": " one of the greatest games of retro gaming. And he showed how he ported it to the original Xbox.", "tokens": [472, 295, 264, 6636, 2813, 295, 18820, 9703, 13, 400, 415, 4712, 577, 415, 2436, 292, 309, 281, 264, 3380, 14544, 13], "temperature": 0.0, "avg_logprob": -0.1646272219144381, "compression_ratio": 1.4773869346733668, "no_speech_prob": 0.005103586707264185}, {"id": 18, "seek": 13476, "start": 134.76, "end": 141.88, "text": " So he made a video where he showed changing includes. So watching this video really made me", "tokens": [407, 415, 1027, 257, 960, 689, 415, 4712, 4473, 5974, 13, 407, 1976, 341, 960, 534, 1027, 385], "temperature": 0.0, "avg_logprob": -0.16319443523019983, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0009576835436746478}, {"id": 19, "seek": 13476, "start": 141.88, "end": 149.07999999999998, "text": " more confident and considering porting in one of my activities. But that's not the only thing", "tokens": [544, 6679, 293, 8079, 2436, 278, 294, 472, 295, 452, 5354, 13, 583, 300, 311, 406, 264, 787, 551], "temperature": 0.0, "avg_logprob": -0.16319443523019983, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0009576835436746478}, {"id": 20, "seek": 13476, "start": 149.07999999999998, "end": 156.04, "text": " that gave me the idea of porting a game. The other thing is I like to play with.NET framework.", "tokens": [300, 2729, 385, 264, 1558, 295, 2436, 278, 257, 1216, 13, 440, 661, 551, 307, 286, 411, 281, 862, 365, 2411, 35554, 8388, 13], "temperature": 0.0, "avg_logprob": -0.16319443523019983, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0009576835436746478}, {"id": 21, "seek": 15604, "start": 156.04, "end": 164.84, "text": " I really like this framework. Because it has many good things. Some of them is that it's an", "tokens": [286, 534, 411, 341, 8388, 13, 1436, 309, 575, 867, 665, 721, 13, 2188, 295, 552, 307, 300, 309, 311, 364], "temperature": 0.0, "avg_logprob": -0.17554049295921847, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0004325482586864382}, {"id": 22, "seek": 15604, "start": 164.84, "end": 172.23999999999998, "text": " open source, cross platform, general purpose framework. So it runs on Linux, Windows, Mac,", "tokens": [1269, 4009, 11, 3278, 3663, 11, 2674, 4334, 8388, 13, 407, 309, 6676, 322, 18734, 11, 8591, 11, 5707, 11], "temperature": 0.0, "avg_logprob": -0.17554049295921847, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0004325482586864382}, {"id": 23, "seek": 15604, "start": 172.23999999999998, "end": 181.12, "text": " Android, iOS, a lot of platforms. And even other platforms that I'll talk about now. And the language,", "tokens": [8853, 11, 17430, 11, 257, 688, 295, 9473, 13, 400, 754, 661, 9473, 300, 286, 603, 751, 466, 586, 13, 400, 264, 2856, 11], "temperature": 0.0, "avg_logprob": -0.17554049295921847, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.0004325482586864382}, {"id": 24, "seek": 18112, "start": 181.12, "end": 185.88, "text": " the main language of this framework is C-Sharp. So C-Sharp is really, really good language that keeps", "tokens": [264, 2135, 2856, 295, 341, 8388, 307, 383, 12, 50, 5854, 79, 13, 407, 383, 12, 50, 5854, 79, 307, 534, 11, 534, 665, 2856, 300, 5965], "temperature": 0.0, "avg_logprob": -0.16350251014786538, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.00026434805477038026}, {"id": 25, "seek": 18112, "start": 185.88, "end": 192.12, "text": " evolving over the years. It has some features that you can find in modern languages, null safety,", "tokens": [21085, 670, 264, 924, 13, 467, 575, 512, 4122, 300, 291, 393, 915, 294, 4363, 8650, 11, 18184, 4514, 11], "temperature": 0.0, "avg_logprob": -0.16350251014786538, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.00026434805477038026}, {"id": 26, "seek": 18112, "start": 192.12, "end": 200.04000000000002, "text": " extension functions, and this kind of stuff. So it really keeps evolving great language. However,", "tokens": [10320, 6828, 11, 293, 341, 733, 295, 1507, 13, 407, 309, 534, 5965, 21085, 869, 2856, 13, 2908, 11], "temperature": 0.0, "avg_logprob": -0.16350251014786538, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.00026434805477038026}, {"id": 27, "seek": 18112, "start": 200.04000000000002, "end": 209.96, "text": " in the beginning of the framework, the browser was not target. But in 2020, with the release of.NET", "tokens": [294, 264, 2863, 295, 264, 8388, 11, 264, 11185, 390, 406, 3779, 13, 583, 294, 4808, 11, 365, 264, 4374, 295, 2411, 35554], "temperature": 0.0, "avg_logprob": -0.16350251014786538, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.00026434805477038026}, {"id": 28, "seek": 20996, "start": 209.96, "end": 219.64000000000001, "text": " 5,.NET introduced the support, the Blazor wasm framework. So it's a component-based framework,", "tokens": [1025, 11, 2411, 35554, 7268, 264, 1406, 11, 264, 18925, 89, 284, 390, 76, 8388, 13, 407, 309, 311, 257, 6542, 12, 6032, 8388, 11], "temperature": 0.0, "avg_logprob": -0.18739425304324128, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0002228917583124712}, {"id": 29, "seek": 20996, "start": 219.64000000000001, "end": 228.0, "text": " like Angular, React, and view with components. But the code of the component is in C-Sharp. And it", "tokens": [411, 34107, 11, 30644, 11, 293, 1910, 365, 6677, 13, 583, 264, 3089, 295, 264, 6542, 307, 294, 383, 12, 50, 5854, 79, 13, 400, 309], "temperature": 0.0, "avg_logprob": -0.18739425304324128, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0002228917583124712}, {"id": 30, "seek": 20996, "start": 228.0, "end": 234.76000000000002, "text": " runs locally, natively on the browser, thanks to a WebAssembly stack, as you can see here. So Blazor", "tokens": [6676, 16143, 11, 8470, 356, 322, 264, 11185, 11, 3231, 281, 257, 9573, 10884, 19160, 8630, 11, 382, 291, 393, 536, 510, 13, 407, 18925, 89, 284], "temperature": 0.0, "avg_logprob": -0.18739425304324128, "compression_ratio": 1.4411764705882353, "no_speech_prob": 0.0002228917583124712}, {"id": 31, "seek": 23476, "start": 234.76, "end": 245.23999999999998, "text": " has WebAssembly implementation, which allows the developer to access Razor components and also", "tokens": [575, 9573, 10884, 19160, 11420, 11, 597, 4045, 264, 10754, 281, 2105, 29051, 284, 6677, 293, 611], "temperature": 0.0, "avg_logprob": -0.18538101859714673, "compression_ratio": 1.4595959595959596, "no_speech_prob": 9.83559075393714e-05}, {"id": 32, "seek": 23476, "start": 245.23999999999998, "end": 252.2, "text": " access the.NET framework, and also communicate with the DOM. So this is an example of a Razor", "tokens": [2105, 264, 2411, 35554, 8388, 11, 293, 611, 7890, 365, 264, 35727, 13, 407, 341, 307, 364, 1365, 295, 257, 29051, 284], "temperature": 0.0, "avg_logprob": -0.18538101859714673, "compression_ratio": 1.4595959595959596, "no_speech_prob": 9.83559075393714e-05}, {"id": 33, "seek": 23476, "start": 252.2, "end": 259.12, "text": " component. It's similar to what you see in Angular or View. The difference is that the code below is", "tokens": [6542, 13, 467, 311, 2531, 281, 437, 291, 536, 294, 34107, 420, 13909, 13, 440, 2649, 307, 300, 264, 3089, 2507, 307], "temperature": 0.0, "avg_logprob": -0.18538101859714673, "compression_ratio": 1.4595959595959596, "no_speech_prob": 9.83559075393714e-05}, {"id": 34, "seek": 25912, "start": 259.12, "end": 268.8, "text": " in C-Sharp. In addition to that, you can have also CSS, of course, and you can even call JavaScript", "tokens": [294, 383, 12, 50, 5854, 79, 13, 682, 4500, 281, 300, 11, 291, 393, 362, 611, 24387, 11, 295, 1164, 11, 293, 291, 393, 754, 818, 15778], "temperature": 0.0, "avg_logprob": -0.12375677625338237, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.00048683109343983233}, {"id": 35, "seek": 25912, "start": 268.8, "end": 277.44, "text": " and it interoperates with C-Sharp. So when I saw this, C-Sharp.js, which interoperates, I was like", "tokens": [293, 309, 728, 7192, 1024, 365, 383, 12, 50, 5854, 79, 13, 407, 562, 286, 1866, 341, 11, 383, 12, 50, 5854, 79, 13, 25530, 11, 597, 728, 7192, 1024, 11, 286, 390, 411], "temperature": 0.0, "avg_logprob": -0.12375677625338237, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.00048683109343983233}, {"id": 36, "seek": 25912, "start": 277.44, "end": 285.68, "text": " this. I was amazed. I was really happy to see this. And I told myself, it's time to make this port.", "tokens": [341, 13, 286, 390, 20507, 13, 286, 390, 534, 2055, 281, 536, 341, 13, 400, 286, 1907, 2059, 11, 309, 311, 565, 281, 652, 341, 2436, 13], "temperature": 0.0, "avg_logprob": -0.12375677625338237, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.00048683109343983233}, {"id": 37, "seek": 28568, "start": 285.68, "end": 295.44, "text": " So now I need to find a game to port. There are many games with source code available. And the", "tokens": [407, 586, 286, 643, 281, 915, 257, 1216, 281, 2436, 13, 821, 366, 867, 2813, 365, 4009, 3089, 2435, 13, 400, 264], "temperature": 0.0, "avg_logprob": -0.17409964096851838, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0003733225166797638}, {"id": 38, "seek": 28568, "start": 295.44, "end": 302.28000000000003, "text": " game that I chose, no spoiler here, it's Doom. So I will tell you next why I chose Doom. But one", "tokens": [1216, 300, 286, 5111, 11, 572, 26927, 510, 11, 309, 311, 30168, 13, 407, 286, 486, 980, 291, 958, 983, 286, 5111, 30168, 13, 583, 472], "temperature": 0.0, "avg_logprob": -0.17409964096851838, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0003733225166797638}, {"id": 39, "seek": 28568, "start": 302.28000000000003, "end": 309.56, "text": " of the reasons is that it's one of the most successful first-person shooters. And not footers,", "tokens": [295, 264, 4112, 307, 300, 309, 311, 472, 295, 264, 881, 4406, 700, 12, 10813, 45526, 13, 400, 406, 2671, 433, 11], "temperature": 0.0, "avg_logprob": -0.17409964096851838, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0003733225166797638}, {"id": 40, "seek": 30956, "start": 309.56, "end": 317.04, "text": " shooters, sorry, for the stick. And also, technically speaking, it's well developed, in my", "tokens": [45526, 11, 2597, 11, 337, 264, 2897, 13, 400, 611, 11, 12120, 4124, 11, 309, 311, 731, 4743, 11, 294, 452], "temperature": 0.0, "avg_logprob": -0.21663319167270456, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.00033302800147794187}, {"id": 41, "seek": 30956, "start": 317.04, "end": 323.92, "text": " opinion, because the logic of the game is separate from the resources. So you have the famous WAD", "tokens": [4800, 11, 570, 264, 9952, 295, 264, 1216, 307, 4994, 490, 264, 3593, 13, 407, 291, 362, 264, 4618, 343, 6112], "temperature": 0.0, "avg_logprob": -0.21663319167270456, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.00033302800147794187}, {"id": 42, "seek": 30956, "start": 323.92, "end": 331.96, "text": " files of Doom. So it contains the assets of the game. And you have really what updates the game", "tokens": [7098, 295, 30168, 13, 407, 309, 8306, 264, 9769, 295, 264, 1216, 13, 400, 291, 362, 534, 437, 9205, 264, 1216], "temperature": 0.0, "avg_logprob": -0.21663319167270456, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.00033302800147794187}, {"id": 43, "seek": 30956, "start": 331.96, "end": 338.8, "text": " state, the position of the character, or the game logic in a separate project. So that allows", "tokens": [1785, 11, 264, 2535, 295, 264, 2517, 11, 420, 264, 1216, 9952, 294, 257, 4994, 1716, 13, 407, 300, 4045], "temperature": 0.0, "avg_logprob": -0.21663319167270456, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.00033302800147794187}, {"id": 44, "seek": 33880, "start": 338.8, "end": 346.0, "text": " to have Doom being portable by design. And in terms of ports, Doom has a lot of them in video game", "tokens": [281, 362, 30168, 885, 2436, 712, 538, 1715, 13, 400, 294, 2115, 295, 18160, 11, 30168, 575, 257, 688, 295, 552, 294, 960, 1216], "temperature": 0.0, "avg_logprob": -0.16798713526774928, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0002517226675990969}, {"id": 45, "seek": 33880, "start": 346.0, "end": 351.36, "text": " consoles, of course, and even anything that has a screen and some processing, as you can see here.", "tokens": [28948, 11, 295, 1164, 11, 293, 754, 1340, 300, 575, 257, 2568, 293, 512, 9007, 11, 382, 291, 393, 536, 510, 13], "temperature": 0.0, "avg_logprob": -0.16798713526774928, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0002517226675990969}, {"id": 46, "seek": 33880, "start": 351.36, "end": 358.68, "text": " And there are even more. So comes the reason why I chose Doom, because I found that there is a", "tokens": [400, 456, 366, 754, 544, 13, 407, 1487, 264, 1778, 983, 286, 5111, 30168, 11, 570, 286, 1352, 300, 456, 307, 257], "temperature": 0.0, "avg_logprob": -0.16798713526774928, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0002517226675990969}, {"id": 47, "seek": 33880, "start": 358.68, "end": 365.92, "text": ".NET port already existing of Doom, of Linux Doom, which is the source code released by", "tokens": [2411, 35554, 2436, 1217, 6741, 295, 30168, 11, 295, 18734, 30168, 11, 597, 307, 264, 4009, 3089, 4736, 538], "temperature": 0.0, "avg_logprob": -0.16798713526774928, "compression_ratio": 1.59915611814346, "no_speech_prob": 0.0002517226675990969}, {"id": 48, "seek": 36592, "start": 365.92, "end": 373.76, "text": " id Software. And in GitHub, there is a repository which has developed a port of Doom in.NET.", "tokens": [4496, 27428, 13, 400, 294, 23331, 11, 456, 307, 257, 25841, 597, 575, 4743, 257, 2436, 295, 30168, 294, 2411, 35554, 13], "temperature": 0.0, "avg_logprob": -0.15830097478978775, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.000354039017111063}, {"id": 49, "seek": 36592, "start": 373.76, "end": 380.92, "text": " However, this port uses libraries that communicate with hardware, like graphics, audio input,", "tokens": [2908, 11, 341, 2436, 4960, 15148, 300, 7890, 365, 8837, 11, 411, 11837, 11, 6278, 4846, 11], "temperature": 0.0, "avg_logprob": -0.15830097478978775, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.000354039017111063}, {"id": 50, "seek": 36592, "start": 380.92, "end": 390.56, "text": " which are not compatible with the browser. So that's why my work was to take this port of Doom", "tokens": [597, 366, 406, 18218, 365, 264, 11185, 13, 407, 300, 311, 983, 452, 589, 390, 281, 747, 341, 2436, 295, 30168], "temperature": 0.0, "avg_logprob": -0.15830097478978775, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.000354039017111063}, {"id": 51, "seek": 39056, "start": 390.56, "end": 396.12, "text": " and make it work on the browser. So just to be clear, I used the V1 of Managed Doom,", "tokens": [293, 652, 309, 589, 322, 264, 11185, 13, 407, 445, 281, 312, 1850, 11, 286, 1143, 264, 691, 16, 295, 2458, 2980, 30168, 11], "temperature": 0.0, "avg_logprob": -0.18836603882492228, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00010009988181991503}, {"id": 52, "seek": 39056, "start": 396.12, "end": 403.16, "text": " because currently they are developing a V2, which uses another library, but just to be", "tokens": [570, 4362, 436, 366, 6416, 257, 691, 17, 11, 597, 4960, 1071, 6405, 11, 457, 445, 281, 312], "temperature": 0.0, "avg_logprob": -0.18836603882492228, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00010009988181991503}, {"id": 53, "seek": 39056, "start": 403.16, "end": 408.28, "text": " clear on my work. So to summarize, id Software released the source code of Doom for Linux.", "tokens": [1850, 322, 452, 589, 13, 407, 281, 20858, 11, 4496, 27428, 4736, 264, 4009, 3089, 295, 30168, 337, 18734, 13], "temperature": 0.0, "avg_logprob": -0.18836603882492228, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00010009988181991503}, {"id": 54, "seek": 39056, "start": 408.28, "end": 417.56, "text": " Since you developed Managed Doom, which targets any platform that is targeted by SFML, desktops", "tokens": [4162, 291, 4743, 2458, 2980, 30168, 11, 597, 12911, 604, 3663, 300, 307, 15045, 538, 31095, 12683, 11, 730, 2320, 3370], "temperature": 0.0, "avg_logprob": -0.18836603882492228, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.00010009988181991503}, {"id": 55, "seek": 41756, "start": 417.56, "end": 425.48, "text": " mostly. And this is what I intervene to base my work on this port and make it work on the browser.", "tokens": [5240, 13, 400, 341, 307, 437, 286, 30407, 281, 3096, 452, 589, 322, 341, 2436, 293, 652, 309, 589, 322, 264, 11185, 13], "temperature": 0.0, "avg_logprob": -0.18970739841461182, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00028935278533026576}, {"id": 56, "seek": 41756, "start": 425.48, "end": 437.44, "text": " So before starting work, my porting, I made a strategy which is this one. So this is an AI image,", "tokens": [407, 949, 2891, 589, 11, 452, 2436, 278, 11, 286, 1027, 257, 5206, 597, 307, 341, 472, 13, 407, 341, 307, 364, 7318, 3256, 11], "temperature": 0.0, "avg_logprob": -0.18970739841461182, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00028935278533026576}, {"id": 57, "seek": 41756, "start": 437.44, "end": 444.6, "text": " by the way. I tape Doom monster typing on keyboard, and I got this. So my porting strategy was to", "tokens": [538, 264, 636, 13, 286, 7314, 30168, 10090, 18444, 322, 10186, 11, 293, 286, 658, 341, 13, 407, 452, 2436, 278, 5206, 390, 281], "temperature": 0.0, "avg_logprob": -0.18970739841461182, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00028935278533026576}, {"id": 58, "seek": 44460, "start": 444.6, "end": 453.24, "text": " get something that works like proof of concept that works quickly and to demonstrate quickly. So", "tokens": [483, 746, 300, 1985, 411, 8177, 295, 3410, 300, 1985, 2661, 293, 281, 11698, 2661, 13, 407], "temperature": 0.0, "avg_logprob": -0.19146586753226616, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00022439411259256303}, {"id": 59, "seek": 44460, "start": 453.24, "end": 459.20000000000005, "text": " the first step is to take the source code and compile it with the Blazor framework, as simple as", "tokens": [264, 700, 1823, 307, 281, 747, 264, 4009, 3089, 293, 31413, 309, 365, 264, 18925, 89, 284, 8388, 11, 382, 2199, 382], "temperature": 0.0, "avg_logprob": -0.19146586753226616, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00022439411259256303}, {"id": 60, "seek": 44460, "start": 459.20000000000005, "end": 465.24, "text": " it is. And as soon as I see a compilation error, I delete the code and I add the to-do. So another", "tokens": [309, 307, 13, 400, 382, 2321, 382, 286, 536, 257, 40261, 6713, 11, 286, 12097, 264, 3089, 293, 286, 909, 264, 281, 12, 2595, 13, 407, 1071], "temperature": 0.0, "avg_logprob": -0.19146586753226616, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.00022439411259256303}, {"id": 61, "seek": 46524, "start": 465.24, "end": 474.8, "text": " presentation with to-dos, that's fine. So after that, once the code compiles, I replaced little by", "tokens": [5860, 365, 281, 12, 33749, 11, 300, 311, 2489, 13, 407, 934, 300, 11, 1564, 264, 3089, 715, 4680, 11, 286, 10772, 707, 538], "temperature": 0.0, "avg_logprob": -0.1665050779070173, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0001643098657950759}, {"id": 62, "seek": 46524, "start": 474.8, "end": 480.96000000000004, "text": " little bits of code that are not implemented, or the methods or functions that are not implemented,", "tokens": [707, 9239, 295, 3089, 300, 366, 406, 12270, 11, 420, 264, 7150, 420, 6828, 300, 366, 406, 12270, 11], "temperature": 0.0, "avg_logprob": -0.1665050779070173, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0001643098657950759}, {"id": 63, "seek": 46524, "start": 480.96000000000004, "end": 485.36, "text": " by giving priority to frame rendering, because it's always nice to see something on the screen,", "tokens": [538, 2902, 9365, 281, 3920, 22407, 11, 570, 309, 311, 1009, 1481, 281, 536, 746, 322, 264, 2568, 11], "temperature": 0.0, "avg_logprob": -0.1665050779070173, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0001643098657950759}, {"id": 64, "seek": 48536, "start": 485.36, "end": 495.68, "text": " rather than working blindly. And in terms of optimization, I always left that to later, unless", "tokens": [2831, 813, 1364, 47744, 13, 400, 294, 2115, 295, 19618, 11, 286, 1009, 1411, 300, 281, 1780, 11, 5969], "temperature": 0.0, "avg_logprob": -0.1228465661406517, "compression_ratio": 1.5819209039548023, "no_speech_prob": 0.0003722947440110147}, {"id": 65, "seek": 48536, "start": 495.68, "end": 503.48, "text": " it's really necessary. And in terms of reading documentation, so it's really well documented,", "tokens": [309, 311, 534, 4818, 13, 400, 294, 2115, 295, 3760, 14333, 11, 370, 309, 311, 534, 731, 23007, 11], "temperature": 0.0, "avg_logprob": -0.1228465661406517, "compression_ratio": 1.5819209039548023, "no_speech_prob": 0.0003722947440110147}, {"id": 66, "seek": 48536, "start": 503.48, "end": 508.96000000000004, "text": " how Doom is implemented, but I only read the parts which are really relevant and important,", "tokens": [577, 30168, 307, 12270, 11, 457, 286, 787, 1401, 264, 3166, 597, 366, 534, 7340, 293, 1021, 11], "temperature": 0.0, "avg_logprob": -0.1228465661406517, "compression_ratio": 1.5819209039548023, "no_speech_prob": 0.0003722947440110147}, {"id": 67, "seek": 50896, "start": 508.96, "end": 520.24, "text": " specifically how the Doom image is drawn on the screen, when the frame data is generated by the", "tokens": [4682, 577, 264, 30168, 3256, 307, 10117, 322, 264, 2568, 11, 562, 264, 3920, 1412, 307, 10833, 538, 264], "temperature": 0.0, "avg_logprob": -0.17631204708202466, "compression_ratio": 1.4747474747474747, "no_speech_prob": 0.00037582690129056573}, {"id": 68, "seek": 50896, "start": 520.24, "end": 528.92, "text": " engine. And with this kind of porting strategy, like two, three weeks of part-time or site project", "tokens": [2848, 13, 400, 365, 341, 733, 295, 2436, 278, 5206, 11, 411, 732, 11, 1045, 3259, 295, 644, 12, 3766, 420, 3621, 1716], "temperature": 0.0, "avg_logprob": -0.17631204708202466, "compression_ratio": 1.4747474747474747, "no_speech_prob": 0.00037582690129056573}, {"id": 69, "seek": 50896, "start": 528.92, "end": 535.6, "text": " work, I was able to achieve something, a port that can be run, executed, even if it's not perfect", "tokens": [589, 11, 286, 390, 1075, 281, 4584, 746, 11, 257, 2436, 300, 393, 312, 1190, 11, 17577, 11, 754, 498, 309, 311, 406, 2176], "temperature": 0.0, "avg_logprob": -0.17631204708202466, "compression_ratio": 1.4747474747474747, "no_speech_prob": 0.00037582690129056573}, {"id": 70, "seek": 53560, "start": 535.6, "end": 545.9200000000001, "text": " yet, but we'll see in the demo later how it works. Now let's enter into more details on how I ported", "tokens": [1939, 11, 457, 321, 603, 536, 294, 264, 10723, 1780, 577, 309, 1985, 13, 823, 718, 311, 3242, 666, 544, 4365, 322, 577, 286, 2436, 292], "temperature": 0.0, "avg_logprob": -0.11732501983642578, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.0004151760076638311}, {"id": 71, "seek": 53560, "start": 545.9200000000001, "end": 555.76, "text": " more concretely this into the browser. So first of all, before giving more further explanations,", "tokens": [544, 39481, 736, 341, 666, 264, 11185, 13, 407, 700, 295, 439, 11, 949, 2902, 544, 3052, 28708, 11], "temperature": 0.0, "avg_logprob": -0.11732501983642578, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.0004151760076638311}, {"id": 72, "seek": 53560, "start": 555.76, "end": 563.08, "text": " let me show you how game is developed most of the time. So it's a big picture of the game", "tokens": [718, 385, 855, 291, 577, 1216, 307, 4743, 881, 295, 264, 565, 13, 407, 309, 311, 257, 955, 3036, 295, 264, 1216], "temperature": 0.0, "avg_logprob": -0.11732501983642578, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.0004151760076638311}, {"id": 73, "seek": 56308, "start": 563.08, "end": 569.8000000000001, "text": " algorithm. First of all, we have a wide loop, which is an infinite loop, but it doesn't iterate as", "tokens": [9284, 13, 2386, 295, 439, 11, 321, 362, 257, 4874, 6367, 11, 597, 307, 364, 13785, 6367, 11, 457, 309, 1177, 380, 44497, 382], "temperature": 0.0, "avg_logprob": -0.1484219551086426, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.000835331913549453}, {"id": 74, "seek": 56308, "start": 569.8000000000001, "end": 575.76, "text": " soon as possible. It iterates only when the frame-pacing is relevant. For example, if you have", "tokens": [2321, 382, 1944, 13, 467, 17138, 1024, 787, 562, 264, 3920, 12, 79, 5615, 307, 7340, 13, 1171, 1365, 11, 498, 291, 362], "temperature": 0.0, "avg_logprob": -0.1484219551086426, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.000835331913549453}, {"id": 75, "seek": 56308, "start": 575.76, "end": 583.8000000000001, "text": " 30 FPS game, this next iteration will wait a little bit if the previous frame was computed", "tokens": [2217, 26429, 1216, 11, 341, 958, 24784, 486, 1699, 257, 707, 857, 498, 264, 3894, 3920, 390, 40610], "temperature": 0.0, "avg_logprob": -0.1484219551086426, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.000835331913549453}, {"id": 76, "seek": 56308, "start": 583.8000000000001, "end": 592.1600000000001, "text": " very quickly. So it allows to have a frame-pacing which is correct and nice to the eye for the user.", "tokens": [588, 2661, 13, 407, 309, 4045, 281, 362, 257, 3920, 12, 79, 5615, 597, 307, 3006, 293, 1481, 281, 264, 3313, 337, 264, 4195, 13], "temperature": 0.0, "avg_logprob": -0.1484219551086426, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.000835331913549453}, {"id": 77, "seek": 59216, "start": 592.16, "end": 599.48, "text": " So once the frame is ready, we get the user input compared to his previous frame. Really simple.", "tokens": [407, 1564, 264, 3920, 307, 1919, 11, 321, 483, 264, 4195, 4846, 5347, 281, 702, 3894, 3920, 13, 4083, 2199, 13], "temperature": 0.0, "avg_logprob": -0.11748958278346706, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00031817134004086256}, {"id": 78, "seek": 59216, "start": 599.48, "end": 609.6, "text": " And after that, we run a frame or we compute the next frame of the game. So we run the update", "tokens": [400, 934, 300, 11, 321, 1190, 257, 3920, 420, 321, 14722, 264, 958, 3920, 295, 264, 1216, 13, 407, 321, 1190, 264, 5623], "temperature": 0.0, "avg_logprob": -0.11748958278346706, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00031817134004086256}, {"id": 79, "seek": 59216, "start": 609.6, "end": 616.48, "text": " game state. It's just an example name of the method. It takes the input of the user, the", "tokens": [1216, 1785, 13, 467, 311, 445, 364, 1365, 1315, 295, 264, 3170, 13, 467, 2516, 264, 4846, 295, 264, 4195, 11, 264], "temperature": 0.0, "avg_logprob": -0.11748958278346706, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.00031817134004086256}, {"id": 80, "seek": 61648, "start": 616.48, "end": 623.2, "text": " what file for the doom in this case. And then it advances the game one frame. So it updates the", "tokens": [437, 3991, 337, 264, 37131, 294, 341, 1389, 13, 400, 550, 309, 25297, 264, 1216, 472, 3920, 13, 407, 309, 9205, 264], "temperature": 0.0, "avg_logprob": -0.1416183845284059, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0008523610886186361}, {"id": 81, "seek": 61648, "start": 623.2, "end": 628.5600000000001, "text": " player position, the monster position, the ammo, the status, his life, all this kind of stuff.", "tokens": [4256, 2535, 11, 264, 10090, 2535, 11, 264, 27340, 11, 264, 6558, 11, 702, 993, 11, 439, 341, 733, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1416183845284059, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0008523610886186361}, {"id": 82, "seek": 61648, "start": 628.5600000000001, "end": 636.64, "text": " And it also generates to be rendered a frame and some audio. And this is run. So for each frame,", "tokens": [400, 309, 611, 23815, 281, 312, 28748, 257, 3920, 293, 512, 6278, 13, 400, 341, 307, 1190, 13, 407, 337, 1184, 3920, 11], "temperature": 0.0, "avg_logprob": -0.1416183845284059, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0008523610886186361}, {"id": 83, "seek": 61648, "start": 636.64, "end": 644.64, "text": " this algorithm is run and it updates the game each frame. And once we get a frame and some", "tokens": [341, 9284, 307, 1190, 293, 309, 9205, 264, 1216, 1184, 3920, 13, 400, 1564, 321, 483, 257, 3920, 293, 512], "temperature": 0.0, "avg_logprob": -0.1416183845284059, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0008523610886186361}, {"id": 84, "seek": 64464, "start": 644.64, "end": 651.48, "text": " audio, we play them and render them to the user. So when you see this, you can start guessing", "tokens": [6278, 11, 321, 862, 552, 293, 15529, 552, 281, 264, 4195, 13, 407, 562, 291, 536, 341, 11, 291, 393, 722, 17939], "temperature": 0.0, "avg_logprob": -0.13941174862431546, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006065038614906371}, {"id": 85, "seek": 64464, "start": 651.48, "end": 657.84, "text": " which parts. So in the managed doom, this all is done in C-sharp. That's clear. And you can start", "tokens": [597, 3166, 13, 407, 294, 264, 6453, 37131, 11, 341, 439, 307, 1096, 294, 383, 12, 2716, 6529, 13, 663, 311, 1850, 13, 400, 291, 393, 722], "temperature": 0.0, "avg_logprob": -0.13941174862431546, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006065038614906371}, {"id": 86, "seek": 64464, "start": 657.84, "end": 663.28, "text": " to see which parts need to be adapted for the browser, which are not available in C-sharp,", "tokens": [281, 536, 597, 3166, 643, 281, 312, 20871, 337, 264, 11185, 11, 597, 366, 406, 2435, 294, 383, 12, 2716, 6529, 11], "temperature": 0.0, "avg_logprob": -0.13941174862431546, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006065038614906371}, {"id": 87, "seek": 64464, "start": 663.28, "end": 670.84, "text": " but need to go to the JavaScript realm to be able to achieve it. But to show you what I", "tokens": [457, 643, 281, 352, 281, 264, 15778, 15355, 281, 312, 1075, 281, 4584, 309, 13, 583, 281, 855, 291, 437, 286], "temperature": 0.0, "avg_logprob": -0.13941174862431546, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006065038614906371}, {"id": 88, "seek": 67084, "start": 670.84, "end": 679.12, "text": " ported more precisely, let me show this in another way. So here. So we have the while loop and the", "tokens": [2436, 292, 544, 13402, 11, 718, 385, 855, 341, 294, 1071, 636, 13, 407, 510, 13, 407, 321, 362, 264, 1339, 6367, 293, 264], "temperature": 0.0, "avg_logprob": -0.18817307790120444, "compression_ratio": 1.5865921787709498, "no_speech_prob": 0.00038858081097714603}, {"id": 89, "seek": 67084, "start": 679.12, "end": 686.72, "text": " frame-pacing step here. Next, the user input is sent to the update game state with the what", "tokens": [3920, 12, 79, 5615, 1823, 510, 13, 3087, 11, 264, 4195, 4846, 307, 2279, 281, 264, 5623, 1216, 1785, 365, 264, 437], "temperature": 0.0, "avg_logprob": -0.18817307790120444, "compression_ratio": 1.5865921787709498, "no_speech_prob": 0.00038858081097714603}, {"id": 90, "seek": 67084, "start": 686.72, "end": 694.64, "text": " file as argument. And then we generate some audio and the frame to be rendered. And it loops.", "tokens": [3991, 382, 6770, 13, 400, 550, 321, 8460, 512, 6278, 293, 264, 3920, 281, 312, 28748, 13, 400, 309, 16121, 13], "temperature": 0.0, "avg_logprob": -0.18817307790120444, "compression_ratio": 1.5865921787709498, "no_speech_prob": 0.00038858081097714603}, {"id": 91, "seek": 69464, "start": 694.64, "end": 702.3199999999999, "text": " So this is what needs to be ported, what you see in red. So what you see on the top is frame", "tokens": [407, 341, 307, 437, 2203, 281, 312, 2436, 292, 11, 437, 291, 536, 294, 2182, 13, 407, 437, 291, 536, 322, 264, 1192, 307, 3920], "temperature": 0.0, "avg_logprob": -0.20212155945447027, "compression_ratio": 1.7136150234741785, "no_speech_prob": 0.0005710829282179475}, {"id": 92, "seek": 69464, "start": 702.3199999999999, "end": 709.6, "text": " pacing. It's not really Blazor relevant, but browser relevant. For a frame pacing,", "tokens": [43285, 13, 467, 311, 406, 534, 18925, 89, 284, 7340, 11, 457, 11185, 7340, 13, 1171, 257, 3920, 43285, 11], "temperature": 0.0, "avg_logprob": -0.20212155945447027, "compression_ratio": 1.7136150234741785, "no_speech_prob": 0.0005710829282179475}, {"id": 93, "seek": 69464, "start": 709.6, "end": 716.88, "text": " there is a better way to base frame in JavaScript, base frames in JavaScript. And to render,", "tokens": [456, 307, 257, 1101, 636, 281, 3096, 3920, 294, 15778, 11, 3096, 12083, 294, 15778, 13, 400, 281, 15529, 11], "temperature": 0.0, "avg_logprob": -0.20212155945447027, "compression_ratio": 1.7136150234741785, "no_speech_prob": 0.0005710829282179475}, {"id": 94, "seek": 69464, "start": 716.88, "end": 724.2, "text": " since SFML is not available in Blazor, so this needs to be replaced. Also the update game states", "tokens": [1670, 31095, 12683, 307, 406, 2435, 294, 18925, 89, 284, 11, 370, 341, 2203, 281, 312, 10772, 13, 2743, 264, 5623, 1216, 4368], "temperature": 0.0, "avg_logprob": -0.20212155945447027, "compression_ratio": 1.7136150234741785, "no_speech_prob": 0.0005710829282179475}, {"id": 95, "seek": 72420, "start": 724.2, "end": 731.1600000000001, "text": " which is also, so everything is in C-sharp. Update game state, even though it's a platform", "tokens": [597, 307, 611, 11, 370, 1203, 307, 294, 383, 12, 2716, 6529, 13, 28923, 1216, 1785, 11, 754, 1673, 309, 311, 257, 3663], "temperature": 0.0, "avg_logprob": -0.16823168436686198, "compression_ratio": 1.5, "no_speech_prob": 7.8207602200564e-05}, {"id": 96, "seek": 72420, "start": 731.1600000000001, "end": 738.5200000000001, "text": " agnostic, it's not 100% the case. So there needs to be some bits that needed to be adapted to the", "tokens": [623, 77, 19634, 11, 309, 311, 406, 2319, 4, 264, 1389, 13, 407, 456, 2203, 281, 312, 512, 9239, 300, 2978, 281, 312, 20871, 281, 264], "temperature": 0.0, "avg_logprob": -0.16823168436686198, "compression_ratio": 1.5, "no_speech_prob": 7.8207602200564e-05}, {"id": 97, "seek": 72420, "start": 738.5200000000001, "end": 745.5200000000001, "text": " browser. But hopefully 70% of the code approximately was across platform and runs on the browser", "tokens": [11185, 13, 583, 4696, 5285, 4, 295, 264, 3089, 10447, 390, 2108, 3663, 293, 6676, 322, 264, 11185], "temperature": 0.0, "avg_logprob": -0.16823168436686198, "compression_ratio": 1.5, "no_speech_prob": 7.8207602200564e-05}, {"id": 98, "seek": 74552, "start": 745.52, "end": 754.6, "text": " without any problem. So after some work, some coding, some fun, some fails and learning,", "tokens": [1553, 604, 1154, 13, 407, 934, 512, 589, 11, 512, 17720, 11, 512, 1019, 11, 512, 18199, 293, 2539, 11], "temperature": 0.0, "avg_logprob": -0.19053243868278735, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.00018099829321727157}, {"id": 99, "seek": 74552, "start": 754.6, "end": 762.04, "text": " I achieved this result. So I replaced the white loop with request animation frame. Anyone knows", "tokens": [286, 11042, 341, 1874, 13, 407, 286, 10772, 264, 2418, 6367, 365, 5308, 9603, 3920, 13, 14643, 3255], "temperature": 0.0, "avg_logprob": -0.19053243868278735, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.00018099829321727157}, {"id": 100, "seek": 74552, "start": 762.04, "end": 770.92, "text": " about request animation frame here? Yes. Nice. So yeah, request animation frame is how you tell", "tokens": [466, 5308, 9603, 3920, 510, 30, 1079, 13, 5490, 13, 407, 1338, 11, 5308, 9603, 3920, 307, 577, 291, 980], "temperature": 0.0, "avg_logprob": -0.19053243868278735, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.00018099829321727157}, {"id": 101, "seek": 77092, "start": 770.92, "end": 776.4399999999999, "text": " the browser, so I want to render frames in an optimized manner for the browser. For example,", "tokens": [264, 11185, 11, 370, 286, 528, 281, 15529, 12083, 294, 364, 26941, 9060, 337, 264, 11185, 13, 1171, 1365, 11], "temperature": 0.0, "avg_logprob": -0.13507282257080078, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.0003384443116374314}, {"id": 102, "seek": 77092, "start": 776.4399999999999, "end": 781.4, "text": " when you switch a tab, don't do anything to optimize energy. So you ask the browser, request a", "tokens": [562, 291, 3679, 257, 4421, 11, 500, 380, 360, 1340, 281, 19719, 2281, 13, 407, 291, 1029, 264, 11185, 11, 5308, 257], "temperature": 0.0, "avg_logprob": -0.13507282257080078, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.0003384443116374314}, {"id": 103, "seek": 77092, "start": 781.4, "end": 788.04, "text": " new frame. When you see it relevant to compute a new frame for my game, call me back. So it's a", "tokens": [777, 3920, 13, 1133, 291, 536, 309, 7340, 281, 14722, 257, 777, 3920, 337, 452, 1216, 11, 818, 385, 646, 13, 407, 309, 311, 257], "temperature": 0.0, "avg_logprob": -0.13507282257080078, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.0003384443116374314}, {"id": 104, "seek": 77092, "start": 788.04, "end": 795.9599999999999, "text": " callback. And for each frame, we call it back. After that, so once this has been changed,", "tokens": [818, 3207, 13, 400, 337, 1184, 3920, 11, 321, 818, 309, 646, 13, 2381, 300, 11, 370, 1564, 341, 575, 668, 3105, 11], "temperature": 0.0, "avg_logprob": -0.13507282257080078, "compression_ratio": 1.6726457399103138, "no_speech_prob": 0.0003384443116374314}, {"id": 105, "seek": 79596, "start": 795.96, "end": 804.24, "text": " change also the rendering. So for the audio, it's the audio context library. And for rendering,", "tokens": [1319, 611, 264, 22407, 13, 407, 337, 264, 6278, 11, 309, 311, 264, 6278, 4319, 6405, 13, 400, 337, 22407, 11], "temperature": 0.0, "avg_logprob": -0.15910201323659798, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00019165454432368279}, {"id": 106, "seek": 79596, "start": 804.24, "end": 814.2, "text": " it's the canvas, of course. So audio context is the audio API of the browser. But there is one", "tokens": [309, 311, 264, 16267, 11, 295, 1164, 13, 407, 6278, 4319, 307, 264, 6278, 9362, 295, 264, 11185, 13, 583, 456, 307, 472], "temperature": 0.0, "avg_logprob": -0.15910201323659798, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00019165454432368279}, {"id": 107, "seek": 79596, "start": 814.2, "end": 821.32, "text": " thing that I didn't mention yet, and that you see here, is that in this state, since I was,", "tokens": [551, 300, 286, 994, 380, 2152, 1939, 11, 293, 300, 291, 536, 510, 11, 307, 300, 294, 341, 1785, 11, 1670, 286, 390, 11], "temperature": 0.0, "avg_logprob": -0.15910201323659798, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00019165454432368279}, {"id": 108, "seek": 82132, "start": 821.32, "end": 826.44, "text": " as I said earlier, Blazor is a component-based framework. It's like Angular View React. You", "tokens": [382, 286, 848, 3071, 11, 18925, 89, 284, 307, 257, 6542, 12, 6032, 8388, 13, 467, 311, 411, 34107, 13909, 30644, 13, 509], "temperature": 0.0, "avg_logprob": -0.1624814442225865, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.00015436834655702114}, {"id": 109, "seek": 82132, "start": 826.44, "end": 832.2800000000001, "text": " need to have some kind of main component, which is the entry point of your program or of your", "tokens": [643, 281, 362, 512, 733, 295, 2135, 6542, 11, 597, 307, 264, 8729, 935, 295, 428, 1461, 420, 295, 428], "temperature": 0.0, "avg_logprob": -0.1624814442225865, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.00015436834655702114}, {"id": 110, "seek": 82132, "start": 832.2800000000001, "end": 840.1600000000001, "text": " component. So here it's missing. So that's why I added or I had to have a Blazor component,", "tokens": [6542, 13, 407, 510, 309, 311, 5361, 13, 407, 300, 311, 983, 286, 3869, 420, 286, 632, 281, 362, 257, 18925, 89, 284, 6542, 11], "temperature": 0.0, "avg_logprob": -0.1624814442225865, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.00015436834655702114}, {"id": 111, "seek": 82132, "start": 840.1600000000001, "end": 846.6800000000001, "text": " which only serves as the entry point to invoke the JavaScript, which then goes back to C sharp.", "tokens": [597, 787, 13451, 382, 264, 8729, 935, 281, 41117, 264, 15778, 11, 597, 550, 1709, 646, 281, 383, 8199, 13], "temperature": 0.0, "avg_logprob": -0.1624814442225865, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.00015436834655702114}, {"id": 112, "seek": 84668, "start": 846.68, "end": 857.52, "text": " So this is C sharp.net, C sharp. So when I say C sharp.net, I say them interchangeably. So this", "tokens": [407, 341, 307, 383, 8199, 13, 7129, 11, 383, 8199, 13, 407, 562, 286, 584, 383, 8199, 13, 7129, 11, 286, 584, 552, 30358, 1188, 13, 407, 341], "temperature": 0.0, "avg_logprob": -0.14350605010986328, "compression_ratio": 1.8284313725490196, "no_speech_prob": 0.00021291841403581202}, {"id": 113, "seek": 84668, "start": 857.52, "end": 862.3599999999999, "text": " is JavaScript. We go back to C sharp. We go back to JavaScript. So there is a lot of context", "tokens": [307, 15778, 13, 492, 352, 646, 281, 383, 8199, 13, 492, 352, 646, 281, 15778, 13, 407, 456, 307, 257, 688, 295, 4319], "temperature": 0.0, "avg_logprob": -0.14350605010986328, "compression_ratio": 1.8284313725490196, "no_speech_prob": 0.00021291841403581202}, {"id": 114, "seek": 84668, "start": 862.3599999999999, "end": 870.4, "text": " switching or language switching. And this is achieved thanks to this API. So Blazor provides", "tokens": [16493, 420, 2856, 16493, 13, 400, 341, 307, 11042, 3231, 281, 341, 9362, 13, 407, 18925, 89, 284, 6417], "temperature": 0.0, "avg_logprob": -0.14350605010986328, "compression_ratio": 1.8284313725490196, "no_speech_prob": 0.00021291841403581202}, {"id": 115, "seek": 84668, "start": 870.4, "end": 876.4399999999999, "text": " an API that allows to go back and forth from a language to the other. So this is Blazor way", "tokens": [364, 9362, 300, 4045, 281, 352, 646, 293, 5220, 490, 257, 2856, 281, 264, 661, 13, 407, 341, 307, 18925, 89, 284, 636], "temperature": 0.0, "avg_logprob": -0.14350605010986328, "compression_ratio": 1.8284313725490196, "no_speech_prob": 0.00021291841403581202}, {"id": 116, "seek": 87644, "start": 876.44, "end": 884.0400000000001, "text": " of doing things before.NET 7. Starting.NET 7, there is even a better way to do this. I'll show", "tokens": [295, 884, 721, 949, 2411, 35554, 1614, 13, 16217, 2411, 35554, 1614, 11, 456, 307, 754, 257, 1101, 636, 281, 360, 341, 13, 286, 603, 855], "temperature": 0.0, "avg_logprob": -0.1495732190657635, "compression_ratio": 1.6681614349775784, "no_speech_prob": 0.00028219452360644937}, {"id": 117, "seek": 87644, "start": 884.0400000000001, "end": 892.6400000000001, "text": " it at the end of the presentation. Okay. So now we have something that runs. So I will show you,", "tokens": [309, 412, 264, 917, 295, 264, 5860, 13, 1033, 13, 407, 586, 321, 362, 746, 300, 6676, 13, 407, 286, 486, 855, 291, 11], "temperature": 0.0, "avg_logprob": -0.1495732190657635, "compression_ratio": 1.6681614349775784, "no_speech_prob": 0.00028219452360644937}, {"id": 118, "seek": 87644, "start": 892.6400000000001, "end": 898.36, "text": " quickly show you for the audio parts, some code, and then I will continue the last,", "tokens": [2661, 855, 291, 337, 264, 6278, 3166, 11, 512, 3089, 11, 293, 550, 286, 486, 2354, 264, 1036, 11], "temperature": 0.0, "avg_logprob": -0.1495732190657635, "compression_ratio": 1.6681614349775784, "no_speech_prob": 0.00028219452360644937}, {"id": 119, "seek": 87644, "start": 898.36, "end": 905.5600000000001, "text": " or maybe just the entry point and then continue the presentation. So this is the main component.", "tokens": [420, 1310, 445, 264, 8729, 935, 293, 550, 2354, 264, 5860, 13, 407, 341, 307, 264, 2135, 6542, 13], "temperature": 0.0, "avg_logprob": -0.1495732190657635, "compression_ratio": 1.6681614349775784, "no_speech_prob": 0.00028219452360644937}, {"id": 120, "seek": 90556, "start": 905.56, "end": 912.2399999999999, "text": " As you can see here, which in the code, so we have the canvas here. And here we have,", "tokens": [1018, 291, 393, 536, 510, 11, 597, 294, 264, 3089, 11, 370, 321, 362, 264, 16267, 510, 13, 400, 510, 321, 362, 11], "temperature": 0.0, "avg_logprob": -0.1629311477436739, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010299478162778541}, {"id": 121, "seek": 90556, "start": 912.2399999999999, "end": 918.52, "text": " we initialize the DOM object or the game object. And then here we invoke the JavaScript method", "tokens": [321, 5883, 1125, 264, 35727, 2657, 420, 264, 1216, 2657, 13, 400, 550, 510, 321, 41117, 264, 15778, 3170], "temperature": 0.0, "avg_logprob": -0.1629311477436739, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010299478162778541}, {"id": 122, "seek": 90556, "start": 918.52, "end": 926.7199999999999, "text": " that calls request animation frame. So we invoke the JavaScript method here. We here handle the", "tokens": [300, 5498, 5308, 9603, 3920, 13, 407, 321, 41117, 264, 15778, 3170, 510, 13, 492, 510, 4813, 264], "temperature": 0.0, "avg_logprob": -0.1629311477436739, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010299478162778541}, {"id": 123, "seek": 92672, "start": 926.72, "end": 935.6, "text": " frame pacing. Okay. Here we handle the frame pacing. And then we call back.NET to run an iteration", "tokens": [3920, 43285, 13, 1033, 13, 1692, 321, 4813, 264, 3920, 43285, 13, 400, 550, 321, 818, 646, 2411, 35554, 281, 1190, 364, 24784], "temperature": 0.0, "avg_logprob": -0.15794514616330466, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00015612914285156876}, {"id": 124, "seek": 92672, "start": 935.6, "end": 941.52, "text": " of the game, the DOM engine to run a computer frame. And then we call request animation frame to", "tokens": [295, 264, 1216, 11, 264, 35727, 2848, 281, 1190, 257, 3820, 3920, 13, 400, 550, 321, 818, 5308, 9603, 3920, 281], "temperature": 0.0, "avg_logprob": -0.15794514616330466, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00015612914285156876}, {"id": 125, "seek": 92672, "start": 941.52, "end": 947.4, "text": " prepare for the next frame. Which calls back this method. So this is like an infinite loop.", "tokens": [5940, 337, 264, 958, 3920, 13, 3013, 5498, 646, 341, 3170, 13, 407, 341, 307, 411, 364, 13785, 6367, 13], "temperature": 0.0, "avg_logprob": -0.15794514616330466, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00015612914285156876}, {"id": 126, "seek": 92672, "start": 947.4, "end": 955.24, "text": " And this method that you see here, which invokes.NET code, just invokes the game objects and", "tokens": [400, 341, 3170, 300, 291, 536, 510, 11, 597, 1048, 8606, 2411, 35554, 3089, 11, 445, 1048, 8606, 264, 1216, 6565, 293], "temperature": 0.0, "avg_logprob": -0.15794514616330466, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.00015612914285156876}, {"id": 127, "seek": 95524, "start": 955.24, "end": 962.04, "text": " requests it to render a new, to compute a new frame with the user input. So this,", "tokens": [12475, 309, 281, 15529, 257, 777, 11, 281, 14722, 257, 777, 3920, 365, 264, 4195, 4846, 13, 407, 341, 11], "temperature": 0.0, "avg_logprob": -0.18395282162560356, "compression_ratio": 1.4696132596685083, "no_speech_prob": 0.00012865604367107153}, {"id": 128, "seek": 95524, "start": 962.04, "end": 968.04, "text": " I will just skip it. So this is how audio and video are rendered. So it's communication between", "tokens": [286, 486, 445, 10023, 309, 13, 407, 341, 307, 577, 6278, 293, 960, 366, 28748, 13, 407, 309, 311, 6101, 1296], "temperature": 0.0, "avg_logprob": -0.18395282162560356, "compression_ratio": 1.4696132596685083, "no_speech_prob": 0.00012865604367107153}, {"id": 129, "seek": 95524, "start": 968.04, "end": 983.12, "text": " C sharp and JavaScript. And I continue. So, so what I learned from this in Blazor, avoid", "tokens": [383, 8199, 293, 15778, 13, 400, 286, 2354, 13, 407, 11, 370, 437, 286, 3264, 490, 341, 294, 18925, 89, 284, 11, 5042], "temperature": 0.0, "avg_logprob": -0.18395282162560356, "compression_ratio": 1.4696132596685083, "no_speech_prob": 0.00012865604367107153}, {"id": 130, "seek": 98312, "start": 983.12, "end": 993.32, "text": " copying arrays, big arrays. In the beginning, in the.managed DOM source code, the final image is", "tokens": [27976, 41011, 11, 955, 41011, 13, 682, 264, 2863, 11, 294, 264, 2411, 1601, 2980, 35727, 4009, 3089, 11, 264, 2572, 3256, 307], "temperature": 0.0, "avg_logprob": -0.19536280164531633, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0006318759405985475}, {"id": 131, "seek": 98312, "start": 993.32, "end": 999.88, "text": " generated by copying, converting a one-dimensional array into a 2D array. So this slowed down the", "tokens": [10833, 538, 27976, 11, 29942, 257, 472, 12, 18759, 10225, 666, 257, 568, 35, 10225, 13, 407, 341, 32057, 760, 264], "temperature": 0.0, "avg_logprob": -0.19536280164531633, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0006318759405985475}, {"id": 132, "seek": 98312, "start": 999.88, "end": 1005.52, "text": " game a lot, a lot, a lot. So I removed this part from the managed DOM source code. And I sent it", "tokens": [1216, 257, 688, 11, 257, 688, 11, 257, 688, 13, 407, 286, 7261, 341, 644, 490, 264, 6453, 35727, 4009, 3089, 13, 400, 286, 2279, 309], "temperature": 0.0, "avg_logprob": -0.19536280164531633, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0006318759405985475}, {"id": 133, "seek": 98312, "start": 1005.52, "end": 1011.4, "text": " to JavaScript. That's what you, what I was, was shown in the previous slide about frame rendering.", "tokens": [281, 15778, 13, 663, 311, 437, 291, 11, 437, 286, 390, 11, 390, 4898, 294, 264, 3894, 4137, 466, 3920, 22407, 13], "temperature": 0.0, "avg_logprob": -0.19536280164531633, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0006318759405985475}, {"id": 134, "seek": 101140, "start": 1011.4, "end": 1018.48, "text": " And I don't have to cover it. But yeah, avoid copying big arrays in.NET. This is in.NET 5.", "tokens": [400, 286, 500, 380, 362, 281, 2060, 309, 13, 583, 1338, 11, 5042, 27976, 955, 41011, 294, 2411, 35554, 13, 639, 307, 294, 2411, 35554, 1025, 13], "temperature": 0.0, "avg_logprob": -0.16758920669555663, "compression_ratio": 1.5183673469387755, "no_speech_prob": 0.00035709846997633576}, {"id": 135, "seek": 101140, "start": 1018.48, "end": 1025.32, "text": " Maybe in.NET 7 it has been improved. Avoid extensive logging. And calling Blazor from", "tokens": [2704, 294, 2411, 35554, 1614, 309, 575, 668, 9689, 13, 41061, 13246, 27991, 13, 400, 5141, 18925, 89, 284, 490], "temperature": 0.0, "avg_logprob": -0.16758920669555663, "compression_ratio": 1.5183673469387755, "no_speech_prob": 0.00035709846997633576}, {"id": 136, "seek": 101140, "start": 1025.32, "end": 1031.6399999999999, "text": " JavaScript from Blazor communication can be very fast if you use the correct API. As I said,", "tokens": [15778, 490, 18925, 89, 284, 6101, 393, 312, 588, 2370, 498, 291, 764, 264, 3006, 9362, 13, 1018, 286, 848, 11], "temperature": 0.0, "avg_logprob": -0.16758920669555663, "compression_ratio": 1.5183673469387755, "no_speech_prob": 0.00035709846997633576}, {"id": 137, "seek": 101140, "start": 1031.6399999999999, "end": 1038.28, "text": " however, this, the API that I used is undocumented. And I confirm it because I found no documentation,", "tokens": [4461, 11, 341, 11, 264, 9362, 300, 286, 1143, 307, 40472, 13, 400, 286, 9064, 309, 570, 286, 1352, 572, 14333, 11], "temperature": 0.0, "avg_logprob": -0.16758920669555663, "compression_ratio": 1.5183673469387755, "no_speech_prob": 0.00035709846997633576}, {"id": 138, "seek": 103828, "start": 1038.28, "end": 1044.28, "text": " just some source code or some obscure GitHub repositories. But hopefully in.NET 7 it's,", "tokens": [445, 512, 4009, 3089, 420, 512, 34443, 23331, 22283, 2083, 13, 583, 4696, 294, 2411, 35554, 1614, 309, 311, 11], "temperature": 0.0, "avg_logprob": -0.17552064748910756, "compression_ratio": 1.4240837696335078, "no_speech_prob": 0.0002684351638890803}, {"id": 139, "seek": 103828, "start": 1044.28, "end": 1050.3999999999999, "text": " it's improved. In JavaScript, I learned that request animation frame is the way to paste frames.", "tokens": [309, 311, 9689, 13, 682, 15778, 11, 286, 3264, 300, 5308, 9603, 3920, 307, 264, 636, 281, 9163, 12083, 13], "temperature": 0.0, "avg_logprob": -0.17552064748910756, "compression_ratio": 1.4240837696335078, "no_speech_prob": 0.0002684351638890803}, {"id": 140, "seek": 103828, "start": 1050.3999999999999, "end": 1056.96, "text": " And to play audio programatically, you need to have some user interaction before or the", "tokens": [400, 281, 862, 6278, 1461, 5030, 11, 291, 643, 281, 362, 512, 4195, 9285, 949, 420, 264], "temperature": 0.0, "avg_logprob": -0.17552064748910756, "compression_ratio": 1.4240837696335078, "no_speech_prob": 0.0002684351638890803}, {"id": 141, "seek": 105696, "start": 1056.96, "end": 1071.64, "text": " audio context API doesn't work. So here is the demo. So I click the, to enable the audio,", "tokens": [6278, 4319, 9362, 1177, 380, 589, 13, 407, 510, 307, 264, 10723, 13, 407, 286, 2052, 264, 11, 281, 9528, 264, 6278, 11], "temperature": 0.0, "avg_logprob": -0.15560040650544343, "compression_ratio": 1.366412213740458, "no_speech_prob": 5.481035987031646e-05}, {"id": 142, "seek": 105696, "start": 1071.64, "end": 1084.8400000000001, "text": " the user interaction. And let's see. Yes, of course. Yes. And here we go. So just to show", "tokens": [264, 4195, 9285, 13, 400, 718, 311, 536, 13, 1079, 11, 295, 1164, 13, 1079, 13, 400, 510, 321, 352, 13, 407, 445, 281, 855], "temperature": 0.0, "avg_logprob": -0.15560040650544343, "compression_ratio": 1.366412213740458, "no_speech_prob": 5.481035987031646e-05}, {"id": 143, "seek": 108484, "start": 1084.84, "end": 1096.8799999999999, "text": " you that we have sound. So don't be afraid. It's just a game. And just to show you that you also", "tokens": [291, 300, 321, 362, 1626, 13, 407, 500, 380, 312, 4638, 13, 467, 311, 445, 257, 1216, 13, 400, 445, 281, 855, 291, 300, 291, 611], "temperature": 0.0, "avg_logprob": -0.15377790277654474, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002957161341328174}, {"id": 144, "seek": 108484, "start": 1096.8799999999999, "end": 1101.6399999999999, "text": " have secret passages. I don't know if you know this one. You have 200 armor. But that's another", "tokens": [362, 4054, 31589, 13, 286, 500, 380, 458, 498, 291, 458, 341, 472, 13, 509, 362, 2331, 13124, 13, 583, 300, 311, 1071], "temperature": 0.0, "avg_logprob": -0.15377790277654474, "compression_ratio": 1.4014598540145986, "no_speech_prob": 0.0002957161341328174}, {"id": 145, "seek": 110164, "start": 1101.64, "end": 1116.3200000000002, "text": " topic. And it runs correct frames. It's a 2012 Macbook and it runs at 30 FPS. No problem. Okay.", "tokens": [4829, 13, 400, 309, 6676, 3006, 12083, 13, 467, 311, 257, 9125, 5707, 2939, 293, 309, 6676, 412, 2217, 26429, 13, 883, 1154, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.19152422796321822, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.00038638871046714485}, {"id": 146, "seek": 110164, "start": 1116.3200000000002, "end": 1124.3600000000001, "text": " So last two slides, the interrupt in.NET 7. So here's how interrupt works now. You don't need", "tokens": [407, 1036, 732, 9788, 11, 264, 12729, 294, 2411, 35554, 1614, 13, 407, 510, 311, 577, 12729, 1985, 586, 13, 509, 500, 380, 643], "temperature": 0.0, "avg_logprob": -0.19152422796321822, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.00038638871046714485}, {"id": 147, "seek": 110164, "start": 1124.3600000000001, "end": 1128.64, "text": " Blazor. It means you don't need to create component if you want to interact between JavaScript and", "tokens": [18925, 89, 284, 13, 467, 1355, 291, 500, 380, 643, 281, 1884, 6542, 498, 291, 528, 281, 4648, 1296, 15778, 293], "temperature": 0.0, "avg_logprob": -0.19152422796321822, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.00038638871046714485}, {"id": 148, "seek": 112864, "start": 1128.64, "end": 1134.2, "text": ".NET anymore. And I'm working currently on this part because it's really exciting to see this", "tokens": [2411, 35554, 3602, 13, 400, 286, 478, 1364, 4362, 322, 341, 644, 570, 309, 311, 534, 4670, 281, 536, 341], "temperature": 0.0, "avg_logprob": -0.14042655370568716, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0013422997435554862}, {"id": 149, "seek": 112864, "start": 1134.2, "end": 1140.3600000000001, "text": " kind of work. So to call JavaScript methods from.NET, you just need to export your JavaScript", "tokens": [733, 295, 589, 13, 407, 281, 818, 15778, 7150, 490, 2411, 35554, 11, 291, 445, 643, 281, 10725, 428, 15778], "temperature": 0.0, "avg_logprob": -0.14042655370568716, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0013422997435554862}, {"id": 150, "seek": 112864, "start": 1140.3600000000001, "end": 1150.3600000000001, "text": " method as you do in any JavaScript module. And you call here, you just import the method and you", "tokens": [3170, 382, 291, 360, 294, 604, 15778, 10088, 13, 400, 291, 818, 510, 11, 291, 445, 974, 264, 3170, 293, 291], "temperature": 0.0, "avg_logprob": -0.14042655370568716, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0013422997435554862}, {"id": 151, "seek": 112864, "start": 1150.3600000000001, "end": 1156.68, "text": " can have access to it. And in the opposite sense, you just export your.NET method and then you", "tokens": [393, 362, 2105, 281, 309, 13, 400, 294, 264, 6182, 2020, 11, 291, 445, 10725, 428, 2411, 35554, 3170, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.14042655370568716, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0013422997435554862}, {"id": 152, "seek": 115668, "start": 1156.68, "end": 1164.76, "text": " import it in JavaScript using this kind of code. And that's it. So I'm working on changing how the", "tokens": [974, 309, 294, 15778, 1228, 341, 733, 295, 3089, 13, 400, 300, 311, 309, 13, 407, 286, 478, 1364, 322, 4473, 577, 264], "temperature": 0.0, "avg_logprob": -0.1881749365064833, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.0008312675636261702}, {"id": 153, "seek": 115668, "start": 1164.76, "end": 1172.4, "text": " game is ported to this. And in terms of next step, then, it's to migrate to JS interupt. Update to", "tokens": [1216, 307, 2436, 292, 281, 341, 13, 400, 294, 2115, 295, 958, 1823, 11, 550, 11, 309, 311, 281, 31821, 281, 33063, 728, 84, 662, 13, 28923, 281], "temperature": 0.0, "avg_logprob": -0.1881749365064833, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.0008312675636261702}, {"id": 154, "seek": 115668, "start": 1172.4, "end": 1179.16, "text": " manage Doom V2. Maybe I will gain some more performance. After that, I would like to have some", "tokens": [3067, 30168, 691, 17, 13, 2704, 286, 486, 6052, 512, 544, 3389, 13, 2381, 300, 11, 286, 576, 411, 281, 362, 512], "temperature": 0.0, "avg_logprob": -0.1881749365064833, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.0008312675636261702}, {"id": 155, "seek": 115668, "start": 1179.16, "end": 1185.0800000000002, "text": " game music and also to be able to play other wads. Currently, only the Doom one works. I don't know", "tokens": [1216, 1318, 293, 611, 281, 312, 1075, 281, 862, 661, 261, 5834, 13, 19964, 11, 787, 264, 30168, 472, 1985, 13, 286, 500, 380, 458], "temperature": 0.0, "avg_logprob": -0.1881749365064833, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.0008312675636261702}, {"id": 156, "seek": 118508, "start": 1185.08, "end": 1193.1599999999999, "text": " yet why. And as long-term, really, it's also a wish. Maybe this can be integrated to the official", "tokens": [1939, 983, 13, 400, 382, 938, 12, 7039, 11, 534, 11, 309, 311, 611, 257, 3172, 13, 2704, 341, 393, 312, 10919, 281, 264, 4783], "temperature": 0.0, "avg_logprob": -0.2196837244807063, "compression_ratio": 1.4306930693069306, "no_speech_prob": 0.00043017376447096467}, {"id": 157, "seek": 118508, "start": 1193.1599999999999, "end": 1204.4399999999998, "text": " managed Doom project. So as a conclusion, wasm makes existing code compatible with browser. It", "tokens": [6453, 30168, 1716, 13, 407, 382, 257, 10063, 11, 390, 76, 1669, 6741, 3089, 18218, 365, 11185, 13, 467], "temperature": 0.0, "avg_logprob": -0.2196837244807063, "compression_ratio": 1.4306930693069306, "no_speech_prob": 0.00043017376447096467}, {"id": 158, "seek": 118508, "start": 1204.4399999999998, "end": 1211.96, "text": " means that, I mean, wasm is not just the very fast JavaScript alternative. It also opens the way", "tokens": [1355, 300, 11, 286, 914, 11, 390, 76, 307, 406, 445, 264, 588, 2370, 15778, 8535, 13, 467, 611, 9870, 264, 636], "temperature": 0.0, "avg_logprob": -0.2196837244807063, "compression_ratio": 1.4306930693069306, "no_speech_prob": 0.00043017376447096467}, {"id": 159, "seek": 121196, "start": 1211.96, "end": 1217.6000000000001, "text": " to make many, many languages, many, many technologies run on the browser. So that's really what I", "tokens": [281, 652, 867, 11, 867, 8650, 11, 867, 11, 867, 7943, 1190, 322, 264, 11185, 13, 407, 300, 311, 534, 437, 286], "temperature": 0.0, "avg_logprob": -0.17133636239134234, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007224485743790865}, {"id": 160, "seek": 121196, "start": 1217.6000000000001, "end": 1223.32, "text": " like. What's really exciting for me, at least about wasm, and porting games is fun. Developing is", "tokens": [411, 13, 708, 311, 534, 4670, 337, 385, 11, 412, 1935, 466, 390, 76, 11, 293, 2436, 278, 2813, 307, 1019, 13, 11442, 278, 307], "temperature": 0.0, "avg_logprob": -0.17133636239134234, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007224485743790865}, {"id": 161, "seek": 121196, "start": 1223.32, "end": 1237.52, "text": " fun. Do you agree? Yes. Thank you very much. Thank you. So we have time for a couple of questions.", "tokens": [1019, 13, 1144, 291, 3986, 30, 1079, 13, 1044, 291, 588, 709, 13, 1044, 291, 13, 407, 321, 362, 565, 337, 257, 1916, 295, 1651, 13], "temperature": 0.0, "avg_logprob": -0.17133636239134234, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0007224485743790865}, {"id": 162, "seek": 123752, "start": 1237.52, "end": 1251.24, "text": " Who wants to ask the first question? Thank you. Hi. First thanks a lot. It was really, really", "tokens": [2102, 2738, 281, 1029, 264, 700, 1168, 30, 1044, 291, 13, 2421, 13, 2386, 3231, 257, 688, 13, 467, 390, 534, 11, 534], "temperature": 0.0, "avg_logprob": -0.1873767444065639, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0011654873378574848}, {"id": 163, "seek": 123752, "start": 1251.24, "end": 1256.76, "text": " insightful. Thank you. I have a question about request animation frame. I think I saw, so,", "tokens": [46401, 13, 1044, 291, 13, 286, 362, 257, 1168, 466, 5308, 9603, 3920, 13, 286, 519, 286, 1866, 11, 370, 11], "temperature": 0.0, "avg_logprob": -0.1873767444065639, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0011654873378574848}, {"id": 164, "seek": 123752, "start": 1256.76, "end": 1262.36, "text": " because request animation runs at 60 FPS, right? And then I saw you do something with", "tokens": [570, 5308, 9603, 6676, 412, 4060, 26429, 11, 558, 30, 400, 550, 286, 1866, 291, 360, 746, 365], "temperature": 0.0, "avg_logprob": -0.1873767444065639, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.0011654873378574848}, {"id": 165, "seek": 126236, "start": 1262.36, "end": 1270.76, "text": " timestamps to try to do 30. Yes. Does it ever drop or become inaccurate? Or is it just,", "tokens": [49108, 23150, 281, 853, 281, 360, 2217, 13, 1079, 13, 4402, 309, 1562, 3270, 420, 1813, 46443, 30, 1610, 307, 309, 445, 11], "temperature": 0.0, "avg_logprob": -0.2188403577689665, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.002676354954019189}, {"id": 166, "seek": 126236, "start": 1270.76, "end": 1281.28, "text": " is that like the right way to achieve 30 FPS? Yeah, I guess it's, maybe, I'm not a JavaScript", "tokens": [307, 300, 411, 264, 558, 636, 281, 4584, 2217, 26429, 30, 865, 11, 286, 2041, 309, 311, 11, 1310, 11, 286, 478, 406, 257, 15778], "temperature": 0.0, "avg_logprob": -0.2188403577689665, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.002676354954019189}, {"id": 167, "seek": 126236, "start": 1281.28, "end": 1290.32, "text": " specialist on this. Me neither. I'm curious. It's here, I guess. Yes, it's here. For me,", "tokens": [17008, 322, 341, 13, 1923, 9662, 13, 286, 478, 6369, 13, 467, 311, 510, 11, 286, 2041, 13, 1079, 11, 309, 311, 510, 13, 1171, 385, 11], "temperature": 0.0, "avg_logprob": -0.2188403577689665, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.002676354954019189}, {"id": 168, "seek": 129032, "start": 1290.32, "end": 1296.2, "text": " it worked. Yes, I didn't have eyes here. That's what I found on the Internet. I tried it. And", "tokens": [309, 2732, 13, 1079, 11, 286, 994, 380, 362, 2575, 510, 13, 663, 311, 437, 286, 1352, 322, 264, 7703, 13, 286, 3031, 309, 13, 400], "temperature": 0.0, "avg_logprob": -0.20101643499926986, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012734188931062818}, {"id": 169, "seek": 129032, "start": 1296.2, "end": 1300.9199999999998, "text": " I've seen the demo. It doesn't drop. When it drops, it's really when there is a lot of things", "tokens": [286, 600, 1612, 264, 10723, 13, 467, 1177, 380, 3270, 13, 1133, 309, 11438, 11, 309, 311, 534, 562, 456, 307, 257, 688, 295, 721], "temperature": 0.0, "avg_logprob": -0.20101643499926986, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012734188931062818}, {"id": 170, "seek": 129032, "start": 1300.9199999999998, "end": 1309.24, "text": " happening. When there is a lot of audio, it's still not optimized a lot, the audio part. But this", "tokens": [2737, 13, 1133, 456, 307, 257, 688, 295, 6278, 11, 309, 311, 920, 406, 26941, 257, 688, 11, 264, 6278, 644, 13, 583, 341], "temperature": 0.0, "avg_logprob": -0.20101643499926986, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012734188931062818}, {"id": 171, "seek": 129032, "start": 1309.24, "end": 1316.3999999999999, "text": " frame-pacing, for me, it works. So you compute the duration between the last request frame and", "tokens": [3920, 12, 79, 5615, 11, 337, 385, 11, 309, 1985, 13, 407, 291, 14722, 264, 16365, 1296, 264, 1036, 5308, 3920, 293], "temperature": 0.0, "avg_logprob": -0.20101643499926986, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0012734188931062818}, {"id": 172, "seek": 131640, "start": 1316.4, "end": 1322.3600000000001, "text": " the new request frame. So for me, it's okay. Excellent. Thank you very much. You're welcome.", "tokens": [264, 777, 5308, 3920, 13, 407, 337, 385, 11, 309, 311, 1392, 13, 16723, 13, 1044, 291, 588, 709, 13, 509, 434, 2928, 13], "temperature": 0.0, "avg_logprob": -0.20361008056222576, "compression_ratio": 1.5, "no_speech_prob": 0.0005261777550913393}, {"id": 173, "seek": 131640, "start": 1322.3600000000001, "end": 1334.3200000000002, "text": " Next question. Yeah. The next speaker who is speaking after? Nobody? Nobody is speaking", "tokens": [3087, 1168, 13, 865, 13, 440, 958, 8145, 567, 307, 4124, 934, 30, 9297, 30, 9297, 307, 4124], "temperature": 0.0, "avg_logprob": -0.20361008056222576, "compression_ratio": 1.5, "no_speech_prob": 0.0005261777550913393}, {"id": 174, "seek": 131640, "start": 1334.3200000000002, "end": 1340.5600000000002, "text": " after you? I mean, who is taking that seat who are standing there? Okay, we'll call them.", "tokens": [934, 291, 30, 286, 914, 11, 567, 307, 1940, 300, 6121, 567, 366, 4877, 456, 30, 1033, 11, 321, 603, 818, 552, 13], "temperature": 0.0, "avg_logprob": -0.20361008056222576, "compression_ratio": 1.5, "no_speech_prob": 0.0005261777550913393}, {"id": 175, "seek": 134056, "start": 1340.56, "end": 1346.56, "text": " So it's a follow-up to the previous question, actually. Have you tried removing this check", "tokens": [407, 309, 311, 257, 1524, 12, 1010, 281, 264, 3894, 1168, 11, 767, 13, 3560, 291, 3031, 12720, 341, 1520], "temperature": 0.0, "avg_logprob": -0.20442210668805003, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0029552981723099947}, {"id": 176, "seek": 134056, "start": 1346.56, "end": 1354.76, "text": " and see how fast you could run the game? Can you do 1,000 FPS? No, it's not 1,000. No. I actually", "tokens": [293, 536, 577, 2370, 291, 727, 1190, 264, 1216, 30, 1664, 291, 360, 502, 11, 1360, 26429, 30, 883, 11, 309, 311, 406, 502, 11, 1360, 13, 883, 13, 286, 767], "temperature": 0.0, "avg_logprob": -0.20442210668805003, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0029552981723099947}, {"id": 177, "seek": 134056, "start": 1354.76, "end": 1362.36, "text": " tried to remove, but don't remember, but it's not 1,000 FPS. For sure, it's certain. It's not", "tokens": [3031, 281, 4159, 11, 457, 500, 380, 1604, 11, 457, 309, 311, 406, 502, 11, 1360, 26429, 13, 1171, 988, 11, 309, 311, 1629, 13, 467, 311, 406], "temperature": 0.0, "avg_logprob": -0.20442210668805003, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0029552981723099947}, {"id": 178, "seek": 136236, "start": 1362.36, "end": 1371.1599999999999, "text": " really, really fast also. Like maybe to 40, 50 FPS, it depends also on the machine. It depends", "tokens": [534, 11, 534, 2370, 611, 13, 1743, 1310, 281, 3356, 11, 2625, 26429, 11, 309, 5946, 611, 322, 264, 3479, 13, 467, 5946], "temperature": 0.0, "avg_logprob": -0.1763137120466966, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.0008744600345380604}, {"id": 179, "seek": 136236, "start": 1371.1599999999999, "end": 1376.04, "text": " on the hardware that you have. On the processor hardware that I have, I don't have a gaming", "tokens": [322, 264, 8837, 300, 291, 362, 13, 1282, 264, 15321, 8837, 300, 286, 362, 11, 286, 500, 380, 362, 257, 9703], "temperature": 0.0, "avg_logprob": -0.1763137120466966, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.0008744600345380604}, {"id": 180, "seek": 136236, "start": 1376.04, "end": 1384.12, "text": " computer. It was like maybe 40, 50 FPS. Okay, thanks. But yeah, that's a good question because", "tokens": [3820, 13, 467, 390, 411, 1310, 3356, 11, 2625, 26429, 13, 1033, 11, 3231, 13, 583, 1338, 11, 300, 311, 257, 665, 1168, 570], "temperature": 0.0, "avg_logprob": -0.1763137120466966, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.0008744600345380604}, {"id": 181, "seek": 136236, "start": 1384.12, "end": 1391.76, "text": " you see when we talk about good ports, bad ports, for example, this, I mean, it's a quick to achieve", "tokens": [291, 536, 562, 321, 751, 466, 665, 18160, 11, 1578, 18160, 11, 337, 1365, 11, 341, 11, 286, 914, 11, 309, 311, 257, 1702, 281, 4584], "temperature": 0.0, "avg_logprob": -0.1763137120466966, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.0008744600345380604}, {"id": 182, "seek": 139176, "start": 1391.76, "end": 1396.48, "text": " port, but it's not the most optimized one. So that's when you see game companies making ports.", "tokens": [2436, 11, 457, 309, 311, 406, 264, 881, 26941, 472, 13, 407, 300, 311, 562, 291, 536, 1216, 3431, 1455, 18160, 13], "temperature": 0.0, "avg_logprob": -0.14268844604492187, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.0019952175207436085}, {"id": 183, "seek": 139176, "start": 1396.48, "end": 1403.32, "text": " And also, for example, when I said that the array copy on.NET is slow. So at the same time,", "tokens": [400, 611, 11, 337, 1365, 11, 562, 286, 848, 300, 264, 10225, 5055, 322, 2411, 35554, 307, 2964, 13, 407, 412, 264, 912, 565, 11], "temperature": 0.0, "avg_logprob": -0.14268844604492187, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.0019952175207436085}, {"id": 184, "seek": 139176, "start": 1403.32, "end": 1407.48, "text": " if you don't have time to optimize, you just leave it as it, and you get a crappy port with", "tokens": [498, 291, 500, 380, 362, 565, 281, 19719, 11, 291, 445, 1856, 309, 382, 309, 11, 293, 291, 483, 257, 36531, 2436, 365], "temperature": 0.0, "avg_logprob": -0.14268844604492187, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.0019952175207436085}, {"id": 185, "seek": 139176, "start": 1407.48, "end": 1413.92, "text": " slow frame rate. But I did the effort to at least make this part in JavaScript. Welcome.", "tokens": [2964, 3920, 3314, 13, 583, 286, 630, 264, 4630, 281, 412, 1935, 652, 341, 644, 294, 15778, 13, 4027, 13], "temperature": 0.0, "avg_logprob": -0.14268844604492187, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.0019952175207436085}, {"id": 186, "seek": 141392, "start": 1413.92, "end": 1423.8000000000002, "text": " So next question. He's going to ask more if you don't, so he's ready. Go for it.", "tokens": [407, 958, 1168, 13, 634, 311, 516, 281, 1029, 544, 498, 291, 500, 380, 11, 370, 415, 311, 1919, 13, 1037, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.25519022127477137, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.0035930888261646032}, {"id": 187, "seek": 141392, "start": 1423.8000000000002, "end": 1431.52, "text": " Yeah, another question is, what is the size of the wasn't files or whatever that needs to be", "tokens": [865, 11, 1071, 1168, 307, 11, 437, 307, 264, 2744, 295, 264, 2067, 380, 7098, 420, 2035, 300, 2203, 281, 312], "temperature": 0.0, "avg_logprob": -0.25519022127477137, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.0035930888261646032}, {"id": 188, "seek": 141392, "start": 1431.52, "end": 1441.2, "text": " downloaded to play this game? It's big. Let me show you. I don't know. It's like this. It's a big", "tokens": [21748, 281, 862, 341, 1216, 30, 467, 311, 955, 13, 961, 385, 855, 291, 13, 286, 500, 380, 458, 13, 467, 311, 411, 341, 13, 467, 311, 257, 955], "temperature": 0.0, "avg_logprob": -0.25519022127477137, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.0035930888261646032}, {"id": 189, "seek": 144120, "start": 1441.2, "end": 1452.3600000000001, "text": " file. It's a big file. So let me inspect. When you go to application here, you see the storage,", "tokens": [3991, 13, 467, 311, 257, 955, 3991, 13, 407, 718, 385, 15018, 13, 1133, 291, 352, 281, 3861, 510, 11, 291, 536, 264, 6725, 11], "temperature": 0.0, "avg_logprob": -0.18269501203372154, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00047310005174949765}, {"id": 190, "seek": 144120, "start": 1452.3600000000001, "end": 1459.6000000000001, "text": " you have like 21 megabytes. It's a big file. It's not huge. It's not like Windows when you", "tokens": [291, 362, 411, 5080, 10816, 24538, 13, 467, 311, 257, 955, 3991, 13, 467, 311, 406, 2603, 13, 467, 311, 406, 411, 8591, 562, 291], "temperature": 0.0, "avg_logprob": -0.18269501203372154, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00047310005174949765}, {"id": 191, "seek": 144120, "start": 1459.6000000000001, "end": 1464.4, "text": " start on desktop. It has a little bit of overhead, but it's not downloaded each time, you know,", "tokens": [722, 322, 14502, 13, 467, 575, 257, 707, 857, 295, 19922, 11, 457, 309, 311, 406, 21748, 1184, 565, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.18269501203372154, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.00047310005174949765}, {"id": 192, "seek": 146440, "start": 1464.4, "end": 1475.8400000000001, "text": " maybe the first time. Yeah, that's a good question. So we can have one last question. And in the", "tokens": [1310, 264, 700, 565, 13, 865, 11, 300, 311, 257, 665, 1168, 13, 407, 321, 393, 362, 472, 1036, 1168, 13, 400, 294, 264], "temperature": 0.0, "avg_logprob": -0.1604036350840146, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0005230114329606295}, {"id": 193, "seek": 146440, "start": 1475.8400000000001, "end": 1481.1200000000001, "text": " meantime, while people are still thinking, please don't stay on the edge of the lines,", "tokens": [14991, 11, 1339, 561, 366, 920, 1953, 11, 1767, 500, 380, 1754, 322, 264, 4691, 295, 264, 3876, 11], "temperature": 0.0, "avg_logprob": -0.1604036350840146, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0005230114329606295}, {"id": 194, "seek": 146440, "start": 1481.1200000000001, "end": 1486.2800000000002, "text": " because people are standing in the back. People arrive a couple of minutes later. So if you are", "tokens": [570, 561, 366, 4877, 294, 264, 646, 13, 3432, 8881, 257, 1916, 295, 2077, 1780, 13, 407, 498, 291, 366], "temperature": 0.0, "avg_logprob": -0.1604036350840146, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0005230114329606295}, {"id": 195, "seek": 146440, "start": 1486.2800000000002, "end": 1492.8000000000002, "text": " at the edge, if you're here, and there is an empty seat, you need to shift just a bit.", "tokens": [412, 264, 4691, 11, 498, 291, 434, 510, 11, 293, 456, 307, 364, 6707, 6121, 11, 291, 643, 281, 5513, 445, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.1604036350840146, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0005230114329606295}, {"id": 196, "seek": 149280, "start": 1492.8, "end": 1499.6399999999999, "text": " And you can also optimize this by making a service worker. I did it, but it doesn't work", "tokens": [400, 291, 393, 611, 19719, 341, 538, 1455, 257, 2643, 11346, 13, 286, 630, 309, 11, 457, 309, 1177, 380, 589], "temperature": 0.0, "avg_logprob": -0.1380584312207771, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.0014079685788601637}, {"id": 197, "seek": 149280, "start": 1499.6399999999999, "end": 1509.76, "text": " anymore. But you can also make this as a service worker. And now if you're here, if you see me", "tokens": [3602, 13, 583, 291, 393, 611, 652, 341, 382, 257, 2643, 11346, 13, 400, 586, 498, 291, 434, 510, 11, 498, 291, 536, 385], "temperature": 0.0, "avg_logprob": -0.1380584312207771, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.0014079685788601637}, {"id": 198, "seek": 149280, "start": 1509.76, "end": 1514.8799999999999, "text": " looking at you, please shift a little bit. I don't do this for the pleasure of annoying you. It's", "tokens": [1237, 412, 291, 11, 1767, 5513, 257, 707, 857, 13, 286, 500, 380, 360, 341, 337, 264, 6834, 295, 11304, 291, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.1380584312207771, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.0014079685788601637}, {"id": 199, "seek": 149280, "start": 1514.8799999999999, "end": 1518.12, "text": " because there are people who are going to enter the room. We're going to have more and more", "tokens": [570, 456, 366, 561, 567, 366, 516, 281, 3242, 264, 1808, 13, 492, 434, 516, 281, 362, 544, 293, 544], "temperature": 0.0, "avg_logprob": -0.1380584312207771, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.0014079685788601637}, {"id": 200, "seek": 151812, "start": 1518.12, "end": 1524.1599999999999, "text": " people, hopefully, who are going to ask written questions. So then please let them sit next to", "tokens": [561, 11, 4696, 11, 567, 366, 516, 281, 1029, 3720, 1651, 13, 407, 550, 1767, 718, 552, 1394, 958, 281], "temperature": 0.0, "avg_logprob": -0.11953328450520834, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.0017521538538858294}, {"id": 201, "seek": 151812, "start": 1524.1599999999999, "end": 1530.36, "text": " you. Also, there is a trash right there. So when you exit the room, and if you see something,", "tokens": [291, 13, 2743, 11, 456, 307, 257, 11321, 558, 456, 13, 407, 562, 291, 11043, 264, 1808, 11, 293, 498, 291, 536, 746, 11], "temperature": 0.0, "avg_logprob": -0.11953328450520834, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.0017521538538858294}, {"id": 202, "seek": 153036, "start": 1530.36, "end": 1550.24, "text": " Evan, if it's not yours, please pick it up. There is another trash there. Thank you. Thank you.", "tokens": [50364, 22613, 11, 498, 309, 311, 406, 6342, 11, 1767, 1888, 309, 493, 13, 821, 307, 1071, 11321, 456, 13, 1044, 291, 13, 1044, 291, 13, 51358], "temperature": 0.0, "avg_logprob": -0.23976787499019078, "compression_ratio": 1.1585365853658536, "no_speech_prob": 0.0029887589626014233}], "language": "en"}