{"text": " Hello, so I will speak about two animations in Haskell using Gloss, Lens and State. I am Julien DeHos, and I am an assistant professor in computer science, and I use Haskell mostly for teaching functional programming. Haskell is not the most widely used language for implementing animations, but still it has some interesting tools, such as library bindings like SDL2. We also have some entity component system implementations, which is a classic technique for developing games, and we also have functional reactive programming, which is a technique for implementing complex user interfaces, for example. And you can find some cool projects developed in Haskell, for example the effect process, which is a game available on Steam, that has been open sourced recently, and also the weanimate library, which can make quite impressive animations. In this talk, I will show how to implement several animations on concrete examples using functional programming, and how to improve this code using some features of Haskell, like data type, release evaluation, students library and the state and one other. So first, let's look at a very simple example, let's say... I want to know, can we get to a little louder? Oh, okay. It's a little hard to understand. Okay. So as a first example, let's say we want to draw a disk on the screen with a fixed radius. To do that, we can use the Gloss library, which is a classic library in Haskell for implementing animations and 2D graphics. This library provides some functions for drawings, primitives, for handling user events, and the Gloss library also provides some main loops that will run the main application. So basically, all we have to do is to write some unlawful functions, which say how to run the scene or how to run the user inputs, and then we pass these functions to the main loop and that's all, we can run the program. So let's do that. For this first example, we don't have any particular data, we just want to draw a disk with a fixed radius, so there is no data to remember for describing the scene. So we can write a type, which represents the model of our application, but here we don't need anything, so we can say it's the unit type, which means no data. Then we have to write a function that renders the scene, so this function should take a model and return a picture. Here we use the solid circle function, which is provided by Gloss, to draw a disk on the screen, and we say we want a disk with 50 pixels as the radius. We also need a function to under user events, that function should take an event and a model and return a new model. This is a very classic way for modifying data in functional programming. We can't mutate a variable because it's a side effect and pure functional programming, we can't do that using pure functions. So we just take the current model and return a new model, a copy of the model, which contains the modifications. For now, the scene is static, so we just return the same model. And finally, to handle time, we just need a float, the elapsed time, the previous update, and the current model, and we return the new model with the modification. Once again, the scene is static, so for now, we return the same model. Now we can write the main function. We just have to set some parameters, for example, the initial value for the model, and some parameters for the window, the background color, and the format of the animation. Then we can call the play function, which is a main loop provided by the Gloss library, and we just pass to this function our parameters and our under function. This is a very classic way to do in a functional programming. We have functions that we can pass to other functions, and we can organize the code like this. So we get something like this, we can run the program, it's really impressive. Nice. And now let's add some animations. So let's say we want to refresh the scene every second and change the radius using a random number. So to do that, we can use a pseudo-random number generator. We need to model our scene differently, so we write a type, which is model here, which has two fields, first the current radius of the disk, and the random number generator that we can use to update the scene. So this is a record type in Haskell. We have two fields, which have each of them as a name, and we can then use the function here. So the name of the field is also a function that can access to this field using the model. So here we get the radius of the model, and we use that as the radius for drawing the disk. Of the under time function, all we have to do is to generate a new radius. So we take the generator inside the model, and we call this function to generate a new radius. Since we cannot mutate the generator, we have to return a new generator for the next random generation. So this is why we get a new radius here and a new generator here. And that's it, we can build and return the new model, which is the result of the function. We need to update the main function. We have to get a random number generator. We can do that with this function, which gets the standard number generator from the system. And we can also generate a first random number for the first radius of the animation. And the model is built, is constructed here. We get something like this, which is not so much impressive, but there is some animation. So this is a very classic way for generating random numbers, but in Askel, we can do differently. Since Askel has lazy evaluation, we can define an infinite list for all the radius of the animation, and Askel will compute the numbers when it needs them. So instead of the generator, we can use here a random list, an infinite list, and that's all we need. We will consume the elements in this list for having new reduces. The unmet time function can be in fact like this. So we have here the infinite list. And we can just get the first element for the new radius, and the rest of the list will be used for the next update of the scene. In the main function, we have a function to get an infinite list. So instead of the randomR function, we just have to call the randomRS function. And this gives us an infinite list of random numbers, and we don't have to under a random generator explicitly. Let's say we want a ball that moves inside the window, and bounces against the border of the window, and can show the result. So we want a ball that moves inside the window, it can bounce against the border of the screen, and if I hit on Turkey, the scene is initialized with a random velocity and a random position for the ball. So how can we do that? We need more complex types, so we can first describe a ball as a position and velocity. These fields are 2D vectors, and now the model is just the current ball and the infinite list of the other balls we can generate randomly as we did before with the radiuses. These types are more complex than before, because we have a model that has a ball, and a ball has two fields which are 2D vectors. So these vectors have x-coordinate and y-coordinate, so we have nested types which is a bit more complex to use. We can handle this type with a scale using standard record syntax, there is no problem with that. The syntax is just a little bit more complex. So here we get the ball field of the model, and here for example we return the same model as the argument, but we change the ball field with these balls here, which has been computed before. All the other fields of the model doesn't change, we still copy them, in fact. So this function updates the scene, I have implemented it in two steps. So first we move the ball and then we compute bounces against the border of the window. So let's look at the update bounces function. We have to compute the collision with the border of the windows, so we take a ball as input and we return the ball after all the collisions have been computed. To do that, we can use the record syntax as did before to change only the field that needs some modifications. But in fact, it's sometimes simpler to fully reconstruct a ball, so that's what I did here. I have detected a collision with the left border, and I have to return this ball so I can set explicitly what is the new position vector and the new velocity vector. In fact, there is only two fields which are different, the x-coordinate of the position and the x-coordinate of the velocity. So to avoid reconstructing the ball, we can use a library in a scale which is length and which can simplify this code. So the length library enables us to access and modify nested types so we can go deeper inside the type to just add a small modification. To do that, we need to construct lenses, lenses are just functions that can access to a data type. And when we have these functions, we can use all the functions an operator provided by the lens library. So let's do that. We can build these functions, these access functions using this function make lenses, and that does everything for us. So we just have to call make lenses for the ball and for the model. And that's it. We can use all the operators provided by the lens library. This can look like this. So here I return the model with two modifications, the first modification which is applying this function to the ball field and the second modification here where I apply the update lenses function to the ball field of the model. And finally, the model with these two modifications is returned. We have more than that. For example, for the update lenses function, instead of reconstructing the ball, we can now just getting deeply inside the type to apply some changes. For example here, I set this value to the X field of the position field of the ball and finally the ball is returned. And then I can change another modification here. I apply the negate function to the X field of the velocity field of the ball. So I can change several modifications and go deeply inside the type to make some modification, setting a value or applying a function. So this is quite interesting. We can still improve this code. As you can see, we take a ball and we turn a new ball. So it's just updating a ball. And to do that, we have computed here several steps which corresponds to the collision between all the borders of the windows. In fact, we are modifying a ball, but we can't do that in pure functional programming. So we have to use intermediate variables that store the modification after this collision and this collision. So the code is quite cumbersome and we can improve that using something in Askel, which is called the state monad. So the state monad is a very well-known monad in Askel, it's a very classic monad. It's just a context where we simulate mutating a state. So each action inside this monad is an access or a modification of the current state and we can get the final state or another result, we can do that also. And that works well with the lens library because the lens library provides a stateful version of its function and operators. So let's do that. We can change another function like this. Instead of applying several modifications, we can just execute the state actions defined here. So this is the function. We have to, this function takes a first parameter which is the previous ball and when we have applied all the action, the state action, we get a final state which is the final ball that we can use to update our model. Let's see the update monad's function. So instead of taking a ball and returning a ball, now it's clear that we are in a state monad and this is a state action where the current state is a ball and we can return a value but here we don't need that so the function returns a unit. That means that every action inside this function is now an action, a state action. So reading the state, modifying the state and so on. For example here we can access the postfield of the current state which is a ball. Here we can set this value to the x field of the position field of the ball or applying a function on the x field of the velocity field of the ball which is the current state. Since the state monad is a monad, we can use all the features available for monads such as the denotation so we can change several actions like this and we can also use some functions provided for monads such as the went function. As a result, the code is a little bit more simpler and it's clear that this is a state action that we have a current state which is modified according to the code and then we get the final state and this is checked by the compiler. So to conclude, we have seen that functional programming and ASCEL using a functional programming and ASCEL we can implement animations and this is very natural in functional programming since we just have to pass some function to other functions like a main loop and we can decompose and organize our code like this. We use infinite list to generate random numbers so we don't have to use random numbers explicitly. We just consume the elements of this list. We also use the lens library to access or modify nested types and we can go deeply inside these types. Then finally, we simulate mutable state using the state monad so we can modify variable and get the final result. So all of this is still based on functional programming so we just manipulate pure functions and static typing and this is quite easy to read and less work run since we have no side effects function only depends on its argument and produce the same result if the arguments are the same. And all of this is checked by the compiler. So this code, this state and the code shown here are available at this link and you can find some information in the documentation of the libraries and see things that sit for me. Thank you for your attention. Thanks to the organizer. Thank you, Julia, and there's five minutes for questions. If you have a question put up your hand, I'll bring the mic. Do we know what the performance of class is like for complex applications like could you write a complex QI in Gloss? Do we know what the performance of Gloss is for complex display? Gloss is based on OpenGL so it's not that slow but I don't know for very complex animations. I believe some projects use SDR and it seems they have no problem of performance but I have no experience more like that. In the play function it pretty much makes the whole program pure with no I.O. What if you do want to do any I.O. in an application? So the Gloss library provides both two interfaces, one which is purely functional and another where you can do I.O. So there is a version where you can do that. Any more questions? Yes. Can you explain the operators used for the lenses? There's many, many operators. Is the person signed? Yes. Okay. So there is two versions of these operators, one which is purely functional so you just take your data structure that it can access and return the value. So this is such operators. So that means we apply a modification, so the ball zero is returned after this modification. So this is what this operator means. Here it's for accessing another field. So it's an X field of the position field of the ball. And this operator says we set the value in this field and this operator says we apply a function on the field. And the stateful version is the same but we have an equal sign instead of the tilde. Like a get and a set. Yes, we can say like this. We can say that. Any more questions? Okay. Let's thank Julio. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.56, "text": " Hello, so I will speak about two animations in Haskell using Gloss, Lens and State.", "tokens": [2425, 11, 370, 286, 486, 1710, 466, 732, 22868, 294, 8646, 43723, 1228, 5209, 772, 11, 441, 694, 293, 4533, 13], "temperature": 0.0, "avg_logprob": -0.34840252524928045, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.07607727497816086}, {"id": 1, "seek": 0, "start": 11.56, "end": 17.36, "text": " I am Julien DeHos, and I am an assistant professor in computer science, and I use Haskell mostly", "tokens": [286, 669, 7174, 1053, 1346, 39, 329, 11, 293, 286, 669, 364, 10994, 8304, 294, 3820, 3497, 11, 293, 286, 764, 8646, 43723, 5240], "temperature": 0.0, "avg_logprob": -0.34840252524928045, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.07607727497816086}, {"id": 2, "seek": 0, "start": 17.36, "end": 21.72, "text": " for teaching functional programming.", "tokens": [337, 4571, 11745, 9410, 13], "temperature": 0.0, "avg_logprob": -0.34840252524928045, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.07607727497816086}, {"id": 3, "seek": 0, "start": 21.72, "end": 26.44, "text": " Haskell is not the most widely used language for implementing animations, but still it", "tokens": [8646, 43723, 307, 406, 264, 881, 13371, 1143, 2856, 337, 18114, 22868, 11, 457, 920, 309], "temperature": 0.0, "avg_logprob": -0.34840252524928045, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.07607727497816086}, {"id": 4, "seek": 2644, "start": 26.44, "end": 32.04, "text": " has some interesting tools, such as library bindings like SDL2.", "tokens": [575, 512, 1880, 3873, 11, 1270, 382, 6405, 14786, 1109, 411, 14638, 43, 17, 13], "temperature": 0.0, "avg_logprob": -0.1998326021082261, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.0003314057248644531}, {"id": 5, "seek": 2644, "start": 32.04, "end": 38.28, "text": " We also have some entity component system implementations, which is a classic technique", "tokens": [492, 611, 362, 512, 13977, 6542, 1185, 4445, 763, 11, 597, 307, 257, 7230, 6532], "temperature": 0.0, "avg_logprob": -0.1998326021082261, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.0003314057248644531}, {"id": 6, "seek": 2644, "start": 38.28, "end": 44.44, "text": " for developing games, and we also have functional reactive programming, which is a technique", "tokens": [337, 6416, 2813, 11, 293, 321, 611, 362, 11745, 28897, 9410, 11, 597, 307, 257, 6532], "temperature": 0.0, "avg_logprob": -0.1998326021082261, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.0003314057248644531}, {"id": 7, "seek": 2644, "start": 44.44, "end": 50.040000000000006, "text": " for implementing complex user interfaces, for example.", "tokens": [337, 18114, 3997, 4195, 28416, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1998326021082261, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.0003314057248644531}, {"id": 8, "seek": 2644, "start": 50.040000000000006, "end": 55.56, "text": " And you can find some cool projects developed in Haskell, for example the effect process,", "tokens": [400, 291, 393, 915, 512, 1627, 4455, 4743, 294, 8646, 43723, 11, 337, 1365, 264, 1802, 1399, 11], "temperature": 0.0, "avg_logprob": -0.1998326021082261, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.0003314057248644531}, {"id": 9, "seek": 5556, "start": 55.56, "end": 62.0, "text": " which is a game available on Steam, that has been open sourced recently, and also the", "tokens": [597, 307, 257, 1216, 2435, 322, 22517, 11, 300, 575, 668, 1269, 11006, 1232, 3938, 11, 293, 611, 264], "temperature": 0.0, "avg_logprob": -0.2771663143210215, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00019241242262069136}, {"id": 10, "seek": 5556, "start": 62.0, "end": 65.84, "text": " weanimate library, which can make quite impressive animations.", "tokens": [321, 282, 2905, 6405, 11, 597, 393, 652, 1596, 8992, 22868, 13], "temperature": 0.0, "avg_logprob": -0.2771663143210215, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00019241242262069136}, {"id": 11, "seek": 5556, "start": 65.84, "end": 74.72, "text": " In this talk, I will show how to implement several animations on concrete examples using", "tokens": [682, 341, 751, 11, 286, 486, 855, 577, 281, 4445, 2940, 22868, 322, 9859, 5110, 1228], "temperature": 0.0, "avg_logprob": -0.2771663143210215, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00019241242262069136}, {"id": 12, "seek": 5556, "start": 74.72, "end": 80.76, "text": " functional programming, and how to improve this code using some features of Haskell,", "tokens": [11745, 9410, 11, 293, 577, 281, 3470, 341, 3089, 1228, 512, 4122, 295, 8646, 43723, 11], "temperature": 0.0, "avg_logprob": -0.2771663143210215, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.00019241242262069136}, {"id": 13, "seek": 8076, "start": 80.76, "end": 89.24000000000001, "text": " like data type, release evaluation, students library and the state and one other.", "tokens": [411, 1412, 2010, 11, 4374, 13344, 11, 1731, 6405, 293, 264, 1785, 293, 472, 661, 13], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 14, "seek": 8076, "start": 89.24000000000001, "end": 93.24000000000001, "text": " So first, let's look at a very simple example, let's say...", "tokens": [407, 700, 11, 718, 311, 574, 412, 257, 588, 2199, 1365, 11, 718, 311, 584, 485], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 15, "seek": 8076, "start": 93.24000000000001, "end": 96.76, "text": " I want to know, can we get to a little louder?", "tokens": [286, 528, 281, 458, 11, 393, 321, 483, 281, 257, 707, 22717, 30], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 16, "seek": 8076, "start": 96.76, "end": 97.76, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 17, "seek": 8076, "start": 97.76, "end": 99.04, "text": " It's a little hard to understand.", "tokens": [467, 311, 257, 707, 1152, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 18, "seek": 8076, "start": 99.04, "end": 100.04, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 19, "seek": 8076, "start": 100.04, "end": 107.56, "text": " So as a first example, let's say we want to draw a disk on the screen with a fixed radius.", "tokens": [407, 382, 257, 700, 1365, 11, 718, 311, 584, 321, 528, 281, 2642, 257, 12355, 322, 264, 2568, 365, 257, 6806, 15845, 13], "temperature": 0.0, "avg_logprob": -0.44534002031598774, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.00043973617721349}, {"id": 20, "seek": 10756, "start": 107.56, "end": 112.2, "text": " To do that, we can use the Gloss library, which is a classic library in Haskell for", "tokens": [1407, 360, 300, 11, 321, 393, 764, 264, 5209, 772, 6405, 11, 597, 307, 257, 7230, 6405, 294, 8646, 43723, 337], "temperature": 0.0, "avg_logprob": -0.1942199544703707, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.00019236866501159966}, {"id": 21, "seek": 10756, "start": 112.2, "end": 116.12, "text": " implementing animations and 2D graphics.", "tokens": [18114, 22868, 293, 568, 35, 11837, 13], "temperature": 0.0, "avg_logprob": -0.1942199544703707, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.00019236866501159966}, {"id": 22, "seek": 10756, "start": 116.12, "end": 124.24000000000001, "text": " This library provides some functions for drawings, primitives, for handling user events, and the", "tokens": [639, 6405, 6417, 512, 6828, 337, 18618, 11, 2886, 38970, 11, 337, 13175, 4195, 3931, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.1942199544703707, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.00019236866501159966}, {"id": 23, "seek": 10756, "start": 124.24000000000001, "end": 130.16, "text": " Gloss library also provides some main loops that will run the main application.", "tokens": [5209, 772, 6405, 611, 6417, 512, 2135, 16121, 300, 486, 1190, 264, 2135, 3861, 13], "temperature": 0.0, "avg_logprob": -0.1942199544703707, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.00019236866501159966}, {"id": 24, "seek": 10756, "start": 130.16, "end": 134.52, "text": " So basically, all we have to do is to write some unlawful functions, which say how to", "tokens": [407, 1936, 11, 439, 321, 362, 281, 360, 307, 281, 2464, 512, 517, 5901, 906, 6828, 11, 597, 584, 577, 281], "temperature": 0.0, "avg_logprob": -0.1942199544703707, "compression_ratio": 1.6899563318777293, "no_speech_prob": 0.00019236866501159966}, {"id": 25, "seek": 13452, "start": 134.52, "end": 141.44, "text": " run the scene or how to run the user inputs, and then we pass these functions to the main", "tokens": [1190, 264, 4145, 420, 577, 281, 1190, 264, 4195, 15743, 11, 293, 550, 321, 1320, 613, 6828, 281, 264, 2135], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 26, "seek": 13452, "start": 141.44, "end": 146.04000000000002, "text": " loop and that's all, we can run the program.", "tokens": [6367, 293, 300, 311, 439, 11, 321, 393, 1190, 264, 1461, 13], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 27, "seek": 13452, "start": 146.04000000000002, "end": 148.04000000000002, "text": " So let's do that.", "tokens": [407, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 28, "seek": 13452, "start": 148.04000000000002, "end": 152.12, "text": " For this first example, we don't have any particular data, we just want to draw a disk", "tokens": [1171, 341, 700, 1365, 11, 321, 500, 380, 362, 604, 1729, 1412, 11, 321, 445, 528, 281, 2642, 257, 12355], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 29, "seek": 13452, "start": 152.12, "end": 158.16000000000003, "text": " with a fixed radius, so there is no data to remember for describing the scene.", "tokens": [365, 257, 6806, 15845, 11, 370, 456, 307, 572, 1412, 281, 1604, 337, 16141, 264, 4145, 13], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 30, "seek": 13452, "start": 158.16000000000003, "end": 163.92000000000002, "text": " So we can write a type, which represents the model of our application, but here we don't", "tokens": [407, 321, 393, 2464, 257, 2010, 11, 597, 8855, 264, 2316, 295, 527, 3861, 11, 457, 510, 321, 500, 380], "temperature": 0.0, "avg_logprob": -0.17070887504367654, "compression_ratio": 1.6612244897959183, "no_speech_prob": 9.8968725069426e-05}, {"id": 31, "seek": 16392, "start": 163.92, "end": 168.39999999999998, "text": " need anything, so we can say it's the unit type, which means no data.", "tokens": [643, 1340, 11, 370, 321, 393, 584, 309, 311, 264, 4985, 2010, 11, 597, 1355, 572, 1412, 13], "temperature": 0.0, "avg_logprob": -0.14956459791763968, "compression_ratio": 1.5794392523364487, "no_speech_prob": 6.471657252404839e-05}, {"id": 32, "seek": 16392, "start": 168.39999999999998, "end": 175.04, "text": " Then we have to write a function that renders the scene, so this function should take a", "tokens": [1396, 321, 362, 281, 2464, 257, 2445, 300, 6125, 433, 264, 4145, 11, 370, 341, 2445, 820, 747, 257], "temperature": 0.0, "avg_logprob": -0.14956459791763968, "compression_ratio": 1.5794392523364487, "no_speech_prob": 6.471657252404839e-05}, {"id": 33, "seek": 16392, "start": 175.04, "end": 178.39999999999998, "text": " model and return a picture.", "tokens": [2316, 293, 2736, 257, 3036, 13], "temperature": 0.0, "avg_logprob": -0.14956459791763968, "compression_ratio": 1.5794392523364487, "no_speech_prob": 6.471657252404839e-05}, {"id": 34, "seek": 16392, "start": 178.39999999999998, "end": 182.76, "text": " Here we use the solid circle function, which is provided by Gloss, to draw a disk on the", "tokens": [1692, 321, 764, 264, 5100, 6329, 2445, 11, 597, 307, 5649, 538, 5209, 772, 11, 281, 2642, 257, 12355, 322, 264], "temperature": 0.0, "avg_logprob": -0.14956459791763968, "compression_ratio": 1.5794392523364487, "no_speech_prob": 6.471657252404839e-05}, {"id": 35, "seek": 16392, "start": 182.76, "end": 190.0, "text": " screen, and we say we want a disk with 50 pixels as the radius.", "tokens": [2568, 11, 293, 321, 584, 321, 528, 257, 12355, 365, 2625, 18668, 382, 264, 15845, 13], "temperature": 0.0, "avg_logprob": -0.14956459791763968, "compression_ratio": 1.5794392523364487, "no_speech_prob": 6.471657252404839e-05}, {"id": 36, "seek": 19000, "start": 190.0, "end": 196.04, "text": " We also need a function to under user events, that function should take an event and a model", "tokens": [492, 611, 643, 257, 2445, 281, 833, 4195, 3931, 11, 300, 2445, 820, 747, 364, 2280, 293, 257, 2316], "temperature": 0.0, "avg_logprob": -0.1741545664799678, "compression_ratio": 1.6935483870967742, "no_speech_prob": 7.018016913207248e-05}, {"id": 37, "seek": 19000, "start": 196.04, "end": 198.24, "text": " and return a new model.", "tokens": [293, 2736, 257, 777, 2316, 13], "temperature": 0.0, "avg_logprob": -0.1741545664799678, "compression_ratio": 1.6935483870967742, "no_speech_prob": 7.018016913207248e-05}, {"id": 38, "seek": 19000, "start": 198.24, "end": 205.92, "text": " This is a very classic way for modifying data in functional programming.", "tokens": [639, 307, 257, 588, 7230, 636, 337, 42626, 1412, 294, 11745, 9410, 13], "temperature": 0.0, "avg_logprob": -0.1741545664799678, "compression_ratio": 1.6935483870967742, "no_speech_prob": 7.018016913207248e-05}, {"id": 39, "seek": 19000, "start": 205.92, "end": 213.8, "text": " We can't mutate a variable because it's a side effect and pure functional programming,", "tokens": [492, 393, 380, 5839, 473, 257, 7006, 570, 309, 311, 257, 1252, 1802, 293, 6075, 11745, 9410, 11], "temperature": 0.0, "avg_logprob": -0.1741545664799678, "compression_ratio": 1.6935483870967742, "no_speech_prob": 7.018016913207248e-05}, {"id": 40, "seek": 19000, "start": 213.8, "end": 216.56, "text": " we can't do that using pure functions.", "tokens": [321, 393, 380, 360, 300, 1228, 6075, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1741545664799678, "compression_ratio": 1.6935483870967742, "no_speech_prob": 7.018016913207248e-05}, {"id": 41, "seek": 21656, "start": 216.56, "end": 222.64000000000001, "text": " So we just take the current model and return a new model, a copy of the model, which contains", "tokens": [407, 321, 445, 747, 264, 2190, 2316, 293, 2736, 257, 777, 2316, 11, 257, 5055, 295, 264, 2316, 11, 597, 8306], "temperature": 0.0, "avg_logprob": -0.2613634533352322, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.00014250243839342147}, {"id": 42, "seek": 21656, "start": 222.64000000000001, "end": 224.8, "text": " the modifications.", "tokens": [264, 26881, 13], "temperature": 0.0, "avg_logprob": -0.2613634533352322, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.00014250243839342147}, {"id": 43, "seek": 21656, "start": 224.8, "end": 229.64000000000001, "text": " For now, the scene is static, so we just return the same model.", "tokens": [1171, 586, 11, 264, 4145, 307, 13437, 11, 370, 321, 445, 2736, 264, 912, 2316, 13], "temperature": 0.0, "avg_logprob": -0.2613634533352322, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.00014250243839342147}, {"id": 44, "seek": 21656, "start": 229.64000000000001, "end": 239.2, "text": " And finally, to handle time, we just need a float, the elapsed time, the previous update,", "tokens": [400, 2721, 11, 281, 4813, 565, 11, 321, 445, 643, 257, 15706, 11, 264, 806, 2382, 292, 565, 11, 264, 3894, 5623, 11], "temperature": 0.0, "avg_logprob": -0.2613634533352322, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.00014250243839342147}, {"id": 45, "seek": 21656, "start": 239.2, "end": 244.32, "text": " and the current model, and we return the new model with the modification.", "tokens": [293, 264, 2190, 2316, 11, 293, 321, 2736, 264, 777, 2316, 365, 264, 26747, 13], "temperature": 0.0, "avg_logprob": -0.2613634533352322, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.00014250243839342147}, {"id": 46, "seek": 24432, "start": 244.32, "end": 251.2, "text": " Once again, the scene is static, so for now, we return the same model.", "tokens": [3443, 797, 11, 264, 4145, 307, 13437, 11, 370, 337, 586, 11, 321, 2736, 264, 912, 2316, 13], "temperature": 0.0, "avg_logprob": -0.20398906951254986, "compression_ratio": 1.6576576576576576, "no_speech_prob": 7.66557568567805e-05}, {"id": 47, "seek": 24432, "start": 251.2, "end": 254.35999999999999, "text": " Now we can write the main function.", "tokens": [823, 321, 393, 2464, 264, 2135, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20398906951254986, "compression_ratio": 1.6576576576576576, "no_speech_prob": 7.66557568567805e-05}, {"id": 48, "seek": 24432, "start": 254.35999999999999, "end": 260.71999999999997, "text": " We just have to set some parameters, for example, the initial value for the model, and some", "tokens": [492, 445, 362, 281, 992, 512, 9834, 11, 337, 1365, 11, 264, 5883, 2158, 337, 264, 2316, 11, 293, 512], "temperature": 0.0, "avg_logprob": -0.20398906951254986, "compression_ratio": 1.6576576576576576, "no_speech_prob": 7.66557568567805e-05}, {"id": 49, "seek": 24432, "start": 260.71999999999997, "end": 266.6, "text": " parameters for the window, the background color, and the format of the animation.", "tokens": [9834, 337, 264, 4910, 11, 264, 3678, 2017, 11, 293, 264, 7877, 295, 264, 9603, 13], "temperature": 0.0, "avg_logprob": -0.20398906951254986, "compression_ratio": 1.6576576576576576, "no_speech_prob": 7.66557568567805e-05}, {"id": 50, "seek": 24432, "start": 266.6, "end": 272.08, "text": " Then we can call the play function, which is a main loop provided by the Gloss library,", "tokens": [1396, 321, 393, 818, 264, 862, 2445, 11, 597, 307, 257, 2135, 6367, 5649, 538, 264, 5209, 772, 6405, 11], "temperature": 0.0, "avg_logprob": -0.20398906951254986, "compression_ratio": 1.6576576576576576, "no_speech_prob": 7.66557568567805e-05}, {"id": 51, "seek": 27208, "start": 272.08, "end": 276.24, "text": " and we just pass to this function our parameters and our under function.", "tokens": [293, 321, 445, 1320, 281, 341, 2445, 527, 9834, 293, 527, 833, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 52, "seek": 27208, "start": 276.24, "end": 280.2, "text": " This is a very classic way to do in a functional programming.", "tokens": [639, 307, 257, 588, 7230, 636, 281, 360, 294, 257, 11745, 9410, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 53, "seek": 27208, "start": 280.2, "end": 285.84, "text": " We have functions that we can pass to other functions, and we can organize the code like", "tokens": [492, 362, 6828, 300, 321, 393, 1320, 281, 661, 6828, 11, 293, 321, 393, 13859, 264, 3089, 411], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 54, "seek": 27208, "start": 285.84, "end": 286.84, "text": " this.", "tokens": [341, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 55, "seek": 27208, "start": 286.84, "end": 292.88, "text": " So we get something like this, we can run the program, it's really impressive.", "tokens": [407, 321, 483, 746, 411, 341, 11, 321, 393, 1190, 264, 1461, 11, 309, 311, 534, 8992, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 56, "seek": 27208, "start": 292.88, "end": 296.64, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 57, "seek": 27208, "start": 296.64, "end": 300.08, "text": " And now let's add some animations.", "tokens": [400, 586, 718, 311, 909, 512, 22868, 13], "temperature": 0.0, "avg_logprob": -0.2741299513932113, "compression_ratio": 1.6698564593301435, "no_speech_prob": 0.00014468787412624806}, {"id": 58, "seek": 30008, "start": 300.08, "end": 305.91999999999996, "text": " So let's say we want to refresh the scene every second and change the radius using a", "tokens": [407, 718, 311, 584, 321, 528, 281, 15134, 264, 4145, 633, 1150, 293, 1319, 264, 15845, 1228, 257], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 59, "seek": 30008, "start": 305.91999999999996, "end": 308.03999999999996, "text": " random number.", "tokens": [4974, 1230, 13], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 60, "seek": 30008, "start": 308.03999999999996, "end": 312.64, "text": " So to do that, we can use a pseudo-random number generator.", "tokens": [407, 281, 360, 300, 11, 321, 393, 764, 257, 35899, 12, 3699, 298, 1230, 19265, 13], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 61, "seek": 30008, "start": 312.64, "end": 320.2, "text": " We need to model our scene differently, so we write a type, which is model here, which", "tokens": [492, 643, 281, 2316, 527, 4145, 7614, 11, 370, 321, 2464, 257, 2010, 11, 597, 307, 2316, 510, 11, 597], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 62, "seek": 30008, "start": 320.2, "end": 326.64, "text": " has two fields, first the current radius of the disk, and the random number generator", "tokens": [575, 732, 7909, 11, 700, 264, 2190, 15845, 295, 264, 12355, 11, 293, 264, 4974, 1230, 19265], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 63, "seek": 30008, "start": 326.64, "end": 328.71999999999997, "text": " that we can use to update the scene.", "tokens": [300, 321, 393, 764, 281, 5623, 264, 4145, 13], "temperature": 0.0, "avg_logprob": -0.19508234004384464, "compression_ratio": 1.7655502392344498, "no_speech_prob": 0.00025750836357474327}, {"id": 64, "seek": 32872, "start": 328.72, "end": 331.28000000000003, "text": " So this is a record type in Haskell.", "tokens": [407, 341, 307, 257, 2136, 2010, 294, 8646, 43723, 13], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 65, "seek": 32872, "start": 331.28000000000003, "end": 342.76000000000005, "text": " We have two fields, which have each of them as a name, and we can then use the function", "tokens": [492, 362, 732, 7909, 11, 597, 362, 1184, 295, 552, 382, 257, 1315, 11, 293, 321, 393, 550, 764, 264, 2445], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 66, "seek": 32872, "start": 342.76000000000005, "end": 343.76000000000005, "text": " here.", "tokens": [510, 13], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 67, "seek": 32872, "start": 343.76000000000005, "end": 347.8, "text": " So the name of the field is also a function that can access to this field using the model.", "tokens": [407, 264, 1315, 295, 264, 2519, 307, 611, 257, 2445, 300, 393, 2105, 281, 341, 2519, 1228, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 68, "seek": 32872, "start": 347.8, "end": 354.52000000000004, "text": " So here we get the radius of the model, and we use that as the radius for drawing the", "tokens": [407, 510, 321, 483, 264, 15845, 295, 264, 2316, 11, 293, 321, 764, 300, 382, 264, 15845, 337, 6316, 264], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 69, "seek": 32872, "start": 354.52000000000004, "end": 356.32000000000005, "text": " disk.", "tokens": [12355, 13], "temperature": 0.0, "avg_logprob": -0.16494456301914173, "compression_ratio": 1.729281767955801, "no_speech_prob": 0.00013873357966076583}, {"id": 70, "seek": 35632, "start": 356.32, "end": 360.76, "text": " Of the under time function, all we have to do is to generate a new radius.", "tokens": [2720, 264, 833, 565, 2445, 11, 439, 321, 362, 281, 360, 307, 281, 8460, 257, 777, 15845, 13], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 71, "seek": 35632, "start": 360.76, "end": 369.24, "text": " So we take the generator inside the model, and we call this function to generate a new", "tokens": [407, 321, 747, 264, 19265, 1854, 264, 2316, 11, 293, 321, 818, 341, 2445, 281, 8460, 257, 777], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 72, "seek": 35632, "start": 369.24, "end": 371.32, "text": " radius.", "tokens": [15845, 13], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 73, "seek": 35632, "start": 371.32, "end": 378.32, "text": " Since we cannot mutate the generator, we have to return a new generator for the next random", "tokens": [4162, 321, 2644, 5839, 473, 264, 19265, 11, 321, 362, 281, 2736, 257, 777, 19265, 337, 264, 958, 4974], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 74, "seek": 35632, "start": 378.32, "end": 379.32, "text": " generation.", "tokens": [5125, 13], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 75, "seek": 35632, "start": 379.32, "end": 385.0, "text": " So this is why we get a new radius here and a new generator here.", "tokens": [407, 341, 307, 983, 321, 483, 257, 777, 15845, 510, 293, 257, 777, 19265, 510, 13], "temperature": 0.0, "avg_logprob": -0.15606481573554906, "compression_ratio": 1.9709302325581395, "no_speech_prob": 0.0002085010928567499}, {"id": 76, "seek": 38500, "start": 385.0, "end": 393.8, "text": " And that's it, we can build and return the new model, which is the result of the function.", "tokens": [400, 300, 311, 309, 11, 321, 393, 1322, 293, 2736, 264, 777, 2316, 11, 597, 307, 264, 1874, 295, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17792015645041395, "compression_ratio": 1.6582278481012658, "no_speech_prob": 5.6658998801140115e-05}, {"id": 77, "seek": 38500, "start": 393.8, "end": 396.6, "text": " We need to update the main function.", "tokens": [492, 643, 281, 5623, 264, 2135, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17792015645041395, "compression_ratio": 1.6582278481012658, "no_speech_prob": 5.6658998801140115e-05}, {"id": 78, "seek": 38500, "start": 396.6, "end": 400.44, "text": " We have to get a random number generator.", "tokens": [492, 362, 281, 483, 257, 4974, 1230, 19265, 13], "temperature": 0.0, "avg_logprob": -0.17792015645041395, "compression_ratio": 1.6582278481012658, "no_speech_prob": 5.6658998801140115e-05}, {"id": 79, "seek": 38500, "start": 400.44, "end": 408.36, "text": " We can do that with this function, which gets the standard number generator from the system.", "tokens": [492, 393, 360, 300, 365, 341, 2445, 11, 597, 2170, 264, 3832, 1230, 19265, 490, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.17792015645041395, "compression_ratio": 1.6582278481012658, "no_speech_prob": 5.6658998801140115e-05}, {"id": 80, "seek": 40836, "start": 408.36, "end": 415.0, "text": " And we can also generate a first random number for the first radius of the animation.", "tokens": [400, 321, 393, 611, 8460, 257, 700, 4974, 1230, 337, 264, 700, 15845, 295, 264, 9603, 13], "temperature": 0.0, "avg_logprob": -0.21664211485120985, "compression_ratio": 1.4864864864864864, "no_speech_prob": 5.823242463520728e-05}, {"id": 81, "seek": 40836, "start": 415.0, "end": 419.24, "text": " And the model is built, is constructed here.", "tokens": [400, 264, 2316, 307, 3094, 11, 307, 17083, 510, 13], "temperature": 0.0, "avg_logprob": -0.21664211485120985, "compression_ratio": 1.4864864864864864, "no_speech_prob": 5.823242463520728e-05}, {"id": 82, "seek": 40836, "start": 419.24, "end": 431.68, "text": " We get something like this, which is not so much impressive, but there is some animation.", "tokens": [492, 483, 746, 411, 341, 11, 597, 307, 406, 370, 709, 8992, 11, 457, 456, 307, 512, 9603, 13], "temperature": 0.0, "avg_logprob": -0.21664211485120985, "compression_ratio": 1.4864864864864864, "no_speech_prob": 5.823242463520728e-05}, {"id": 83, "seek": 43168, "start": 431.68, "end": 441.72, "text": " So this is a very classic way for generating random numbers, but in Askel, we can do differently.", "tokens": [407, 341, 307, 257, 588, 7230, 636, 337, 17746, 4974, 3547, 11, 457, 294, 1018, 7124, 11, 321, 393, 360, 7614, 13], "temperature": 0.0, "avg_logprob": -0.1817990711757115, "compression_ratio": 1.4970414201183433, "no_speech_prob": 0.0001634844666114077}, {"id": 84, "seek": 43168, "start": 441.72, "end": 448.4, "text": " Since Askel has lazy evaluation, we can define an infinite list for all the radius of the", "tokens": [4162, 1018, 7124, 575, 14847, 13344, 11, 321, 393, 6964, 364, 13785, 1329, 337, 439, 264, 15845, 295, 264], "temperature": 0.0, "avg_logprob": -0.1817990711757115, "compression_ratio": 1.4970414201183433, "no_speech_prob": 0.0001634844666114077}, {"id": 85, "seek": 43168, "start": 448.4, "end": 456.2, "text": " animation, and Askel will compute the numbers when it needs them.", "tokens": [9603, 11, 293, 1018, 7124, 486, 14722, 264, 3547, 562, 309, 2203, 552, 13], "temperature": 0.0, "avg_logprob": -0.1817990711757115, "compression_ratio": 1.4970414201183433, "no_speech_prob": 0.0001634844666114077}, {"id": 86, "seek": 45620, "start": 456.2, "end": 463.47999999999996, "text": " So instead of the generator, we can use here a random list, an infinite list, and that's", "tokens": [407, 2602, 295, 264, 19265, 11, 321, 393, 764, 510, 257, 4974, 1329, 11, 364, 13785, 1329, 11, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 87, "seek": 45620, "start": 463.47999999999996, "end": 464.47999999999996, "text": " all we need.", "tokens": [439, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 88, "seek": 45620, "start": 464.47999999999996, "end": 472.08, "text": " We will consume the elements in this list for having new reduces.", "tokens": [492, 486, 14732, 264, 4959, 294, 341, 1329, 337, 1419, 777, 18081, 13], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 89, "seek": 45620, "start": 472.08, "end": 474.44, "text": " The unmet time function can be in fact like this.", "tokens": [440, 517, 5537, 565, 2445, 393, 312, 294, 1186, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 90, "seek": 45620, "start": 474.44, "end": 478.12, "text": " So we have here the infinite list.", "tokens": [407, 321, 362, 510, 264, 13785, 1329, 13], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 91, "seek": 45620, "start": 478.12, "end": 485.71999999999997, "text": " And we can just get the first element for the new radius, and the rest of the list will", "tokens": [400, 321, 393, 445, 483, 264, 700, 4478, 337, 264, 777, 15845, 11, 293, 264, 1472, 295, 264, 1329, 486], "temperature": 0.0, "avg_logprob": -0.18959453831548276, "compression_ratio": 1.683168316831683, "no_speech_prob": 9.560683974996209e-05}, {"id": 92, "seek": 48572, "start": 485.72, "end": 491.92, "text": " be used for the next update of the scene.", "tokens": [312, 1143, 337, 264, 958, 5623, 295, 264, 4145, 13], "temperature": 0.0, "avg_logprob": -0.2402985804789775, "compression_ratio": 1.73125, "no_speech_prob": 6.974217103561386e-05}, {"id": 93, "seek": 48572, "start": 491.92, "end": 495.8, "text": " In the main function, we have a function to get an infinite list.", "tokens": [682, 264, 2135, 2445, 11, 321, 362, 257, 2445, 281, 483, 364, 13785, 1329, 13], "temperature": 0.0, "avg_logprob": -0.2402985804789775, "compression_ratio": 1.73125, "no_speech_prob": 6.974217103561386e-05}, {"id": 94, "seek": 48572, "start": 495.8, "end": 502.0, "text": " So instead of the randomR function, we just have to call the randomRS function.", "tokens": [407, 2602, 295, 264, 4974, 49, 2445, 11, 321, 445, 362, 281, 818, 264, 4974, 49, 50, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2402985804789775, "compression_ratio": 1.73125, "no_speech_prob": 6.974217103561386e-05}, {"id": 95, "seek": 48572, "start": 502.0, "end": 507.24, "text": " And this gives us an infinite list of random numbers, and we don't have to under a random", "tokens": [400, 341, 2709, 505, 364, 13785, 1329, 295, 4974, 3547, 11, 293, 321, 500, 380, 362, 281, 833, 257, 4974], "temperature": 0.0, "avg_logprob": -0.2402985804789775, "compression_ratio": 1.73125, "no_speech_prob": 6.974217103561386e-05}, {"id": 96, "seek": 50724, "start": 507.24, "end": 516.4, "text": " generator explicitly.", "tokens": [19265, 20803, 13], "temperature": 0.0, "avg_logprob": -0.3505103771503155, "compression_ratio": 1.348623853211009, "no_speech_prob": 8.216890273615718e-05}, {"id": 97, "seek": 50724, "start": 516.4, "end": 521.5600000000001, "text": " Let's say we want a ball that moves inside the window, and bounces against the border", "tokens": [961, 311, 584, 321, 528, 257, 2594, 300, 6067, 1854, 264, 4910, 11, 293, 46901, 1970, 264, 7838], "temperature": 0.0, "avg_logprob": -0.3505103771503155, "compression_ratio": 1.348623853211009, "no_speech_prob": 8.216890273615718e-05}, {"id": 98, "seek": 50724, "start": 521.5600000000001, "end": 531.52, "text": " of the window, and can show the result.", "tokens": [295, 264, 4910, 11, 293, 393, 855, 264, 1874, 13], "temperature": 0.0, "avg_logprob": -0.3505103771503155, "compression_ratio": 1.348623853211009, "no_speech_prob": 8.216890273615718e-05}, {"id": 99, "seek": 53152, "start": 531.52, "end": 538.04, "text": " So we want a ball that moves inside the window, it can bounce against the border of the screen,", "tokens": [407, 321, 528, 257, 2594, 300, 6067, 1854, 264, 4910, 11, 309, 393, 15894, 1970, 264, 7838, 295, 264, 2568, 11], "temperature": 0.0, "avg_logprob": -0.2051256018948842, "compression_ratio": 1.57, "no_speech_prob": 0.00017150146595668048}, {"id": 100, "seek": 53152, "start": 538.04, "end": 546.28, "text": " and if I hit on Turkey, the scene is initialized with a random velocity and a random position", "tokens": [293, 498, 286, 2045, 322, 12647, 11, 264, 4145, 307, 5883, 1602, 365, 257, 4974, 9269, 293, 257, 4974, 2535], "temperature": 0.0, "avg_logprob": -0.2051256018948842, "compression_ratio": 1.57, "no_speech_prob": 0.00017150146595668048}, {"id": 101, "seek": 53152, "start": 546.28, "end": 548.84, "text": " for the ball.", "tokens": [337, 264, 2594, 13], "temperature": 0.0, "avg_logprob": -0.2051256018948842, "compression_ratio": 1.57, "no_speech_prob": 0.00017150146595668048}, {"id": 102, "seek": 53152, "start": 548.84, "end": 551.84, "text": " So how can we do that?", "tokens": [407, 577, 393, 321, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.2051256018948842, "compression_ratio": 1.57, "no_speech_prob": 0.00017150146595668048}, {"id": 103, "seek": 53152, "start": 551.84, "end": 559.0799999999999, "text": " We need more complex types, so we can first describe a ball as a position and velocity.", "tokens": [492, 643, 544, 3997, 3467, 11, 370, 321, 393, 700, 6786, 257, 2594, 382, 257, 2535, 293, 9269, 13], "temperature": 0.0, "avg_logprob": -0.2051256018948842, "compression_ratio": 1.57, "no_speech_prob": 0.00017150146595668048}, {"id": 104, "seek": 55908, "start": 559.08, "end": 565.36, "text": " These fields are 2D vectors, and now the model is just the current ball and the infinite list", "tokens": [1981, 7909, 366, 568, 35, 18875, 11, 293, 586, 264, 2316, 307, 445, 264, 2190, 2594, 293, 264, 13785, 1329], "temperature": 0.0, "avg_logprob": -0.17740685599190847, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00031314807711169124}, {"id": 105, "seek": 55908, "start": 565.36, "end": 573.36, "text": " of the other balls we can generate randomly as we did before with the radiuses.", "tokens": [295, 264, 661, 9803, 321, 393, 8460, 16979, 382, 321, 630, 949, 365, 264, 15845, 279, 13], "temperature": 0.0, "avg_logprob": -0.17740685599190847, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00031314807711169124}, {"id": 106, "seek": 55908, "start": 573.36, "end": 578.96, "text": " These types are more complex than before, because we have a model that has a ball, and", "tokens": [1981, 3467, 366, 544, 3997, 813, 949, 11, 570, 321, 362, 257, 2316, 300, 575, 257, 2594, 11, 293], "temperature": 0.0, "avg_logprob": -0.17740685599190847, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00031314807711169124}, {"id": 107, "seek": 55908, "start": 578.96, "end": 584.36, "text": " a ball has two fields which are 2D vectors.", "tokens": [257, 2594, 575, 732, 7909, 597, 366, 568, 35, 18875, 13], "temperature": 0.0, "avg_logprob": -0.17740685599190847, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00031314807711169124}, {"id": 108, "seek": 58436, "start": 584.36, "end": 591.76, "text": " So these vectors have x-coordinate and y-coordinate, so we have nested types which is a bit more", "tokens": [407, 613, 18875, 362, 2031, 12, 1291, 37326, 293, 288, 12, 1291, 37326, 11, 370, 321, 362, 15646, 292, 3467, 597, 307, 257, 857, 544], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 109, "seek": 58436, "start": 591.76, "end": 595.04, "text": " complex to use.", "tokens": [3997, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 110, "seek": 58436, "start": 595.04, "end": 600.84, "text": " We can handle this type with a scale using standard record syntax, there is no problem", "tokens": [492, 393, 4813, 341, 2010, 365, 257, 4373, 1228, 3832, 2136, 28431, 11, 456, 307, 572, 1154], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 111, "seek": 58436, "start": 600.84, "end": 601.84, "text": " with that.", "tokens": [365, 300, 13], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 112, "seek": 58436, "start": 601.84, "end": 604.6, "text": " The syntax is just a little bit more complex.", "tokens": [440, 28431, 307, 445, 257, 707, 857, 544, 3997, 13], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 113, "seek": 58436, "start": 604.6, "end": 609.9200000000001, "text": " So here we get the ball field of the model, and here for example we return the same model", "tokens": [407, 510, 321, 483, 264, 2594, 2519, 295, 264, 2316, 11, 293, 510, 337, 1365, 321, 2736, 264, 912, 2316], "temperature": 0.0, "avg_logprob": -0.16900423521636634, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.00010844536882359535}, {"id": 114, "seek": 60992, "start": 609.92, "end": 617.24, "text": " as the argument, but we change the ball field with these balls here, which has been computed", "tokens": [382, 264, 6770, 11, 457, 321, 1319, 264, 2594, 2519, 365, 613, 9803, 510, 11, 597, 575, 668, 40610], "temperature": 0.0, "avg_logprob": -0.19873776155359604, "compression_ratio": 1.6066350710900474, "no_speech_prob": 6.36600743746385e-05}, {"id": 115, "seek": 60992, "start": 617.24, "end": 618.24, "text": " before.", "tokens": [949, 13], "temperature": 0.0, "avg_logprob": -0.19873776155359604, "compression_ratio": 1.6066350710900474, "no_speech_prob": 6.36600743746385e-05}, {"id": 116, "seek": 60992, "start": 618.24, "end": 626.16, "text": " All the other fields of the model doesn't change, we still copy them, in fact.", "tokens": [1057, 264, 661, 7909, 295, 264, 2316, 1177, 380, 1319, 11, 321, 920, 5055, 552, 11, 294, 1186, 13], "temperature": 0.0, "avg_logprob": -0.19873776155359604, "compression_ratio": 1.6066350710900474, "no_speech_prob": 6.36600743746385e-05}, {"id": 117, "seek": 60992, "start": 626.16, "end": 632.28, "text": " So this function updates the scene, I have implemented it in two steps.", "tokens": [407, 341, 2445, 9205, 264, 4145, 11, 286, 362, 12270, 309, 294, 732, 4439, 13], "temperature": 0.0, "avg_logprob": -0.19873776155359604, "compression_ratio": 1.6066350710900474, "no_speech_prob": 6.36600743746385e-05}, {"id": 118, "seek": 60992, "start": 632.28, "end": 638.4399999999999, "text": " So first we move the ball and then we compute bounces against the border of the window.", "tokens": [407, 700, 321, 1286, 264, 2594, 293, 550, 321, 14722, 46901, 1970, 264, 7838, 295, 264, 4910, 13], "temperature": 0.0, "avg_logprob": -0.19873776155359604, "compression_ratio": 1.6066350710900474, "no_speech_prob": 6.36600743746385e-05}, {"id": 119, "seek": 63844, "start": 638.44, "end": 643.4000000000001, "text": " So let's look at the update bounces function.", "tokens": [407, 718, 311, 574, 412, 264, 5623, 46901, 2445, 13], "temperature": 0.0, "avg_logprob": -0.24739634685027292, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.00017363020742777735}, {"id": 120, "seek": 63844, "start": 643.4000000000001, "end": 649.12, "text": " We have to compute the collision with the border of the windows, so we take a ball as", "tokens": [492, 362, 281, 14722, 264, 24644, 365, 264, 7838, 295, 264, 9309, 11, 370, 321, 747, 257, 2594, 382], "temperature": 0.0, "avg_logprob": -0.24739634685027292, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.00017363020742777735}, {"id": 121, "seek": 63844, "start": 649.12, "end": 653.5200000000001, "text": " input and we return the ball after all the collisions have been computed.", "tokens": [4846, 293, 321, 2736, 264, 2594, 934, 439, 264, 46537, 362, 668, 40610, 13], "temperature": 0.0, "avg_logprob": -0.24739634685027292, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.00017363020742777735}, {"id": 122, "seek": 63844, "start": 653.5200000000001, "end": 661.8800000000001, "text": " To do that, we can use the record syntax as did before to change only the field that needs", "tokens": [1407, 360, 300, 11, 321, 393, 764, 264, 2136, 28431, 382, 630, 949, 281, 1319, 787, 264, 2519, 300, 2203], "temperature": 0.0, "avg_logprob": -0.24739634685027292, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.00017363020742777735}, {"id": 123, "seek": 63844, "start": 661.8800000000001, "end": 662.8800000000001, "text": " some modifications.", "tokens": [512, 26881, 13], "temperature": 0.0, "avg_logprob": -0.24739634685027292, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.00017363020742777735}, {"id": 124, "seek": 66288, "start": 662.88, "end": 670.68, "text": " But in fact, it's sometimes simpler to fully reconstruct a ball, so that's what I did here.", "tokens": [583, 294, 1186, 11, 309, 311, 2171, 18587, 281, 4498, 31499, 257, 2594, 11, 370, 300, 311, 437, 286, 630, 510, 13], "temperature": 0.0, "avg_logprob": -0.21452597684638444, "compression_ratio": 1.6350710900473933, "no_speech_prob": 0.0001287190243601799}, {"id": 125, "seek": 66288, "start": 670.68, "end": 678.12, "text": " I have detected a collision with the left border, and I have to return this ball so", "tokens": [286, 362, 21896, 257, 24644, 365, 264, 1411, 7838, 11, 293, 286, 362, 281, 2736, 341, 2594, 370], "temperature": 0.0, "avg_logprob": -0.21452597684638444, "compression_ratio": 1.6350710900473933, "no_speech_prob": 0.0001287190243601799}, {"id": 126, "seek": 66288, "start": 678.12, "end": 683.32, "text": " I can set explicitly what is the new position vector and the new velocity vector.", "tokens": [286, 393, 992, 20803, 437, 307, 264, 777, 2535, 8062, 293, 264, 777, 9269, 8062, 13], "temperature": 0.0, "avg_logprob": -0.21452597684638444, "compression_ratio": 1.6350710900473933, "no_speech_prob": 0.0001287190243601799}, {"id": 127, "seek": 66288, "start": 683.32, "end": 690.12, "text": " In fact, there is only two fields which are different, the x-coordinate of the position", "tokens": [682, 1186, 11, 456, 307, 787, 732, 7909, 597, 366, 819, 11, 264, 2031, 12, 1291, 37326, 295, 264, 2535], "temperature": 0.0, "avg_logprob": -0.21452597684638444, "compression_ratio": 1.6350710900473933, "no_speech_prob": 0.0001287190243601799}, {"id": 128, "seek": 69012, "start": 690.12, "end": 695.84, "text": " and the x-coordinate of the velocity.", "tokens": [293, 264, 2031, 12, 1291, 37326, 295, 264, 9269, 13], "temperature": 0.0, "avg_logprob": -0.1979271236218904, "compression_ratio": 1.6187845303867403, "no_speech_prob": 8.255131251644343e-05}, {"id": 129, "seek": 69012, "start": 695.84, "end": 704.12, "text": " So to avoid reconstructing the ball, we can use a library in a scale which is length and", "tokens": [407, 281, 5042, 31499, 278, 264, 2594, 11, 321, 393, 764, 257, 6405, 294, 257, 4373, 597, 307, 4641, 293], "temperature": 0.0, "avg_logprob": -0.1979271236218904, "compression_ratio": 1.6187845303867403, "no_speech_prob": 8.255131251644343e-05}, {"id": 130, "seek": 69012, "start": 704.12, "end": 705.92, "text": " which can simplify this code.", "tokens": [597, 393, 20460, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1979271236218904, "compression_ratio": 1.6187845303867403, "no_speech_prob": 8.255131251644343e-05}, {"id": 131, "seek": 69012, "start": 705.92, "end": 713.8, "text": " So the length library enables us to access and modify nested types so we can go deeper", "tokens": [407, 264, 4641, 6405, 17077, 505, 281, 2105, 293, 16927, 15646, 292, 3467, 370, 321, 393, 352, 7731], "temperature": 0.0, "avg_logprob": -0.1979271236218904, "compression_ratio": 1.6187845303867403, "no_speech_prob": 8.255131251644343e-05}, {"id": 132, "seek": 69012, "start": 713.8, "end": 717.48, "text": " inside the type to just add a small modification.", "tokens": [1854, 264, 2010, 281, 445, 909, 257, 1359, 26747, 13], "temperature": 0.0, "avg_logprob": -0.1979271236218904, "compression_ratio": 1.6187845303867403, "no_speech_prob": 8.255131251644343e-05}, {"id": 133, "seek": 71748, "start": 717.48, "end": 724.4, "text": " To do that, we need to construct lenses, lenses are just functions that can access", "tokens": [1407, 360, 300, 11, 321, 643, 281, 7690, 18059, 11, 18059, 366, 445, 6828, 300, 393, 2105], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 134, "seek": 71748, "start": 724.4, "end": 725.72, "text": " to a data type.", "tokens": [281, 257, 1412, 2010, 13], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 135, "seek": 71748, "start": 725.72, "end": 730.88, "text": " And when we have these functions, we can use all the functions an operator provided", "tokens": [400, 562, 321, 362, 613, 6828, 11, 321, 393, 764, 439, 264, 6828, 364, 12973, 5649], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 136, "seek": 71748, "start": 730.88, "end": 733.72, "text": " by the lens library.", "tokens": [538, 264, 6765, 6405, 13], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 137, "seek": 71748, "start": 733.72, "end": 736.04, "text": " So let's do that.", "tokens": [407, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 138, "seek": 71748, "start": 736.04, "end": 742.4, "text": " We can build these functions, these access functions using this function make lenses,", "tokens": [492, 393, 1322, 613, 6828, 11, 613, 2105, 6828, 1228, 341, 2445, 652, 18059, 11], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 139, "seek": 71748, "start": 742.4, "end": 744.12, "text": " and that does everything for us.", "tokens": [293, 300, 775, 1203, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.22209084170988236, "compression_ratio": 1.7525773195876289, "no_speech_prob": 7.664337317692116e-05}, {"id": 140, "seek": 74412, "start": 744.12, "end": 749.24, "text": " So we just have to call make lenses for the ball and for the model.", "tokens": [407, 321, 445, 362, 281, 818, 652, 18059, 337, 264, 2594, 293, 337, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.20385325656217687, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.00011670899402815849}, {"id": 141, "seek": 74412, "start": 749.24, "end": 750.24, "text": " And that's it.", "tokens": [400, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.20385325656217687, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.00011670899402815849}, {"id": 142, "seek": 74412, "start": 750.24, "end": 756.44, "text": " We can use all the operators provided by the lens library.", "tokens": [492, 393, 764, 439, 264, 19077, 5649, 538, 264, 6765, 6405, 13], "temperature": 0.0, "avg_logprob": -0.20385325656217687, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.00011670899402815849}, {"id": 143, "seek": 74412, "start": 756.44, "end": 758.68, "text": " This can look like this.", "tokens": [639, 393, 574, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.20385325656217687, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.00011670899402815849}, {"id": 144, "seek": 74412, "start": 758.68, "end": 766.04, "text": " So here I return the model with two modifications, the first modification which is applying this", "tokens": [407, 510, 286, 2736, 264, 2316, 365, 732, 26881, 11, 264, 700, 26747, 597, 307, 9275, 341], "temperature": 0.0, "avg_logprob": -0.20385325656217687, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.00011670899402815849}, {"id": 145, "seek": 76604, "start": 766.04, "end": 775.48, "text": " function to the ball field and the second modification here where I apply the update", "tokens": [2445, 281, 264, 2594, 2519, 293, 264, 1150, 26747, 510, 689, 286, 3079, 264, 5623], "temperature": 0.0, "avg_logprob": -0.18785697466706577, "compression_ratio": 1.7861271676300579, "no_speech_prob": 3.690996527438983e-05}, {"id": 146, "seek": 76604, "start": 775.48, "end": 778.24, "text": " lenses function to the ball field of the model.", "tokens": [18059, 2445, 281, 264, 2594, 2519, 295, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.18785697466706577, "compression_ratio": 1.7861271676300579, "no_speech_prob": 3.690996527438983e-05}, {"id": 147, "seek": 76604, "start": 778.24, "end": 787.64, "text": " And finally, the model with these two modifications is returned.", "tokens": [400, 2721, 11, 264, 2316, 365, 613, 732, 26881, 307, 8752, 13], "temperature": 0.0, "avg_logprob": -0.18785697466706577, "compression_ratio": 1.7861271676300579, "no_speech_prob": 3.690996527438983e-05}, {"id": 148, "seek": 76604, "start": 787.64, "end": 789.68, "text": " We have more than that.", "tokens": [492, 362, 544, 813, 300, 13], "temperature": 0.0, "avg_logprob": -0.18785697466706577, "compression_ratio": 1.7861271676300579, "no_speech_prob": 3.690996527438983e-05}, {"id": 149, "seek": 76604, "start": 789.68, "end": 795.0, "text": " For example, for the update lenses function, instead of reconstructing the ball, we can", "tokens": [1171, 1365, 11, 337, 264, 5623, 18059, 2445, 11, 2602, 295, 31499, 278, 264, 2594, 11, 321, 393], "temperature": 0.0, "avg_logprob": -0.18785697466706577, "compression_ratio": 1.7861271676300579, "no_speech_prob": 3.690996527438983e-05}, {"id": 150, "seek": 79500, "start": 795.0, "end": 800.36, "text": " now just getting deeply inside the type to apply some changes.", "tokens": [586, 445, 1242, 8760, 1854, 264, 2010, 281, 3079, 512, 2962, 13], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 151, "seek": 79500, "start": 800.36, "end": 807.88, "text": " For example here, I set this value to the X field of the position field of the ball", "tokens": [1171, 1365, 510, 11, 286, 992, 341, 2158, 281, 264, 1783, 2519, 295, 264, 2535, 2519, 295, 264, 2594], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 152, "seek": 79500, "start": 807.88, "end": 809.6, "text": " and finally the ball is returned.", "tokens": [293, 2721, 264, 2594, 307, 8752, 13], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 153, "seek": 79500, "start": 809.6, "end": 812.08, "text": " And then I can change another modification here.", "tokens": [400, 550, 286, 393, 1319, 1071, 26747, 510, 13], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 154, "seek": 79500, "start": 812.08, "end": 816.64, "text": " I apply the negate function to the X field of the velocity field of the ball.", "tokens": [286, 3079, 264, 2485, 473, 2445, 281, 264, 1783, 2519, 295, 264, 9269, 2519, 295, 264, 2594, 13], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 155, "seek": 79500, "start": 816.64, "end": 824.56, "text": " So I can change several modifications and go deeply inside the type to make some modification,", "tokens": [407, 286, 393, 1319, 2940, 26881, 293, 352, 8760, 1854, 264, 2010, 281, 652, 512, 26747, 11], "temperature": 0.0, "avg_logprob": -0.15402373671531677, "compression_ratio": 1.9326923076923077, "no_speech_prob": 0.00028021959587931633}, {"id": 156, "seek": 82456, "start": 824.56, "end": 826.92, "text": " setting a value or applying a function.", "tokens": [3287, 257, 2158, 420, 9275, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 157, "seek": 82456, "start": 826.92, "end": 829.9599999999999, "text": " So this is quite interesting.", "tokens": [407, 341, 307, 1596, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 158, "seek": 82456, "start": 829.9599999999999, "end": 833.68, "text": " We can still improve this code.", "tokens": [492, 393, 920, 3470, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 159, "seek": 82456, "start": 833.68, "end": 836.4399999999999, "text": " As you can see, we take a ball and we turn a new ball.", "tokens": [1018, 291, 393, 536, 11, 321, 747, 257, 2594, 293, 321, 1261, 257, 777, 2594, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 160, "seek": 82456, "start": 836.4399999999999, "end": 839.1199999999999, "text": " So it's just updating a ball.", "tokens": [407, 309, 311, 445, 25113, 257, 2594, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 161, "seek": 82456, "start": 839.1199999999999, "end": 846.88, "text": " And to do that, we have computed here several steps which corresponds to the collision between", "tokens": [400, 281, 360, 300, 11, 321, 362, 40610, 510, 2940, 4439, 597, 23249, 281, 264, 24644, 1296], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 162, "seek": 82456, "start": 846.88, "end": 848.88, "text": " all the borders of the windows.", "tokens": [439, 264, 16287, 295, 264, 9309, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 163, "seek": 82456, "start": 848.88, "end": 853.76, "text": " In fact, we are modifying a ball, but we can't do that in pure functional programming.", "tokens": [682, 1186, 11, 321, 366, 42626, 257, 2594, 11, 457, 321, 393, 380, 360, 300, 294, 6075, 11745, 9410, 13], "temperature": 0.0, "avg_logprob": -0.1581874918714862, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.00019048387184739113}, {"id": 164, "seek": 85376, "start": 853.76, "end": 860.04, "text": " So we have to use intermediate variables that store the modification after this collision", "tokens": [407, 321, 362, 281, 764, 19376, 9102, 300, 3531, 264, 26747, 934, 341, 24644], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 165, "seek": 85376, "start": 860.04, "end": 861.04, "text": " and this collision.", "tokens": [293, 341, 24644, 13], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 166, "seek": 85376, "start": 861.04, "end": 869.4399999999999, "text": " So the code is quite cumbersome and we can improve that using something in Askel, which", "tokens": [407, 264, 3089, 307, 1596, 12713, 1616, 423, 293, 321, 393, 3470, 300, 1228, 746, 294, 1018, 7124, 11, 597], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 167, "seek": 85376, "start": 869.4399999999999, "end": 872.76, "text": " is called the state monad.", "tokens": [307, 1219, 264, 1785, 1108, 345, 13], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 168, "seek": 85376, "start": 872.76, "end": 876.36, "text": " So the state monad is a very well-known monad in Askel, it's a very classic monad.", "tokens": [407, 264, 1785, 1108, 345, 307, 257, 588, 731, 12, 6861, 1108, 345, 294, 1018, 7124, 11, 309, 311, 257, 588, 7230, 1108, 345, 13], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 169, "seek": 85376, "start": 876.36, "end": 882.56, "text": " It's just a context where we simulate mutating a state.", "tokens": [467, 311, 445, 257, 4319, 689, 321, 27817, 5839, 990, 257, 1785, 13], "temperature": 0.0, "avg_logprob": -0.17991545765670305, "compression_ratio": 1.704225352112676, "no_speech_prob": 9.74206777755171e-05}, {"id": 170, "seek": 88256, "start": 882.56, "end": 888.4, "text": " So each action inside this monad is an access or a modification of the current state and", "tokens": [407, 1184, 3069, 1854, 341, 1108, 345, 307, 364, 2105, 420, 257, 26747, 295, 264, 2190, 1785, 293], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 171, "seek": 88256, "start": 888.4, "end": 894.88, "text": " we can get the final state or another result, we can do that also.", "tokens": [321, 393, 483, 264, 2572, 1785, 420, 1071, 1874, 11, 321, 393, 360, 300, 611, 13], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 172, "seek": 88256, "start": 894.88, "end": 900.28, "text": " And that works well with the lens library because the lens library provides a stateful", "tokens": [400, 300, 1985, 731, 365, 264, 6765, 6405, 570, 264, 6765, 6405, 6417, 257, 1785, 906], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 173, "seek": 88256, "start": 900.28, "end": 905.28, "text": " version of its function and operators.", "tokens": [3037, 295, 1080, 2445, 293, 19077, 13], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 174, "seek": 88256, "start": 905.28, "end": 906.28, "text": " So let's do that.", "tokens": [407, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 175, "seek": 88256, "start": 906.28, "end": 909.0799999999999, "text": " We can change another function like this.", "tokens": [492, 393, 1319, 1071, 2445, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.19042147468118106, "compression_ratio": 1.7135678391959799, "no_speech_prob": 8.096798410406336e-05}, {"id": 176, "seek": 90908, "start": 909.08, "end": 916.0400000000001, "text": " Instead of applying several modifications, we can just execute the state actions defined", "tokens": [7156, 295, 9275, 2940, 26881, 11, 321, 393, 445, 14483, 264, 1785, 5909, 7642], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 177, "seek": 90908, "start": 916.0400000000001, "end": 917.0400000000001, "text": " here.", "tokens": [510, 13], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 178, "seek": 90908, "start": 917.0400000000001, "end": 918.9200000000001, "text": " So this is the function.", "tokens": [407, 341, 307, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 179, "seek": 90908, "start": 918.9200000000001, "end": 924.64, "text": " We have to, this function takes a first parameter which is the previous ball and when we have", "tokens": [492, 362, 281, 11, 341, 2445, 2516, 257, 700, 13075, 597, 307, 264, 3894, 2594, 293, 562, 321, 362], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 180, "seek": 90908, "start": 924.64, "end": 929.0, "text": " applied all the action, the state action, we get a final state which is the final ball", "tokens": [6456, 439, 264, 3069, 11, 264, 1785, 3069, 11, 321, 483, 257, 2572, 1785, 597, 307, 264, 2572, 2594], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 181, "seek": 90908, "start": 929.0, "end": 933.72, "text": " that we can use to update our model.", "tokens": [300, 321, 393, 764, 281, 5623, 527, 2316, 13], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 182, "seek": 90908, "start": 933.72, "end": 935.96, "text": " Let's see the update monad's function.", "tokens": [961, 311, 536, 264, 5623, 1108, 345, 311, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20421204817922492, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00013098711497150362}, {"id": 183, "seek": 93596, "start": 935.96, "end": 940.8000000000001, "text": " So instead of taking a ball and returning a ball, now it's clear that we are in a state", "tokens": [407, 2602, 295, 1940, 257, 2594, 293, 12678, 257, 2594, 11, 586, 309, 311, 1850, 300, 321, 366, 294, 257, 1785], "temperature": 0.0, "avg_logprob": -0.14309027108801417, "compression_ratio": 1.7802197802197801, "no_speech_prob": 8.334670565091074e-05}, {"id": 184, "seek": 93596, "start": 940.8000000000001, "end": 948.8000000000001, "text": " monad and this is a state action where the current state is a ball and we can return", "tokens": [1108, 345, 293, 341, 307, 257, 1785, 3069, 689, 264, 2190, 1785, 307, 257, 2594, 293, 321, 393, 2736], "temperature": 0.0, "avg_logprob": -0.14309027108801417, "compression_ratio": 1.7802197802197801, "no_speech_prob": 8.334670565091074e-05}, {"id": 185, "seek": 93596, "start": 948.8000000000001, "end": 955.52, "text": " a value but here we don't need that so the function returns a unit.", "tokens": [257, 2158, 457, 510, 321, 500, 380, 643, 300, 370, 264, 2445, 11247, 257, 4985, 13], "temperature": 0.0, "avg_logprob": -0.14309027108801417, "compression_ratio": 1.7802197802197801, "no_speech_prob": 8.334670565091074e-05}, {"id": 186, "seek": 93596, "start": 955.52, "end": 962.32, "text": " That means that every action inside this function is now an action, a state action.", "tokens": [663, 1355, 300, 633, 3069, 1854, 341, 2445, 307, 586, 364, 3069, 11, 257, 1785, 3069, 13], "temperature": 0.0, "avg_logprob": -0.14309027108801417, "compression_ratio": 1.7802197802197801, "no_speech_prob": 8.334670565091074e-05}, {"id": 187, "seek": 96232, "start": 962.32, "end": 968.32, "text": " So reading the state, modifying the state and so on.", "tokens": [407, 3760, 264, 1785, 11, 42626, 264, 1785, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.13415919817410982, "compression_ratio": 1.94375, "no_speech_prob": 0.00018081716552842408}, {"id": 188, "seek": 96232, "start": 968.32, "end": 975.2, "text": " For example here we can access the postfield of the current state which is a ball.", "tokens": [1171, 1365, 510, 321, 393, 2105, 264, 2183, 7610, 295, 264, 2190, 1785, 597, 307, 257, 2594, 13], "temperature": 0.0, "avg_logprob": -0.13415919817410982, "compression_ratio": 1.94375, "no_speech_prob": 0.00018081716552842408}, {"id": 189, "seek": 96232, "start": 975.2, "end": 982.9200000000001, "text": " Here we can set this value to the x field of the position field of the ball or applying", "tokens": [1692, 321, 393, 992, 341, 2158, 281, 264, 2031, 2519, 295, 264, 2535, 2519, 295, 264, 2594, 420, 9275], "temperature": 0.0, "avg_logprob": -0.13415919817410982, "compression_ratio": 1.94375, "no_speech_prob": 0.00018081716552842408}, {"id": 190, "seek": 96232, "start": 982.9200000000001, "end": 989.2800000000001, "text": " a function on the x field of the velocity field of the ball which is the current state.", "tokens": [257, 2445, 322, 264, 2031, 2519, 295, 264, 9269, 2519, 295, 264, 2594, 597, 307, 264, 2190, 1785, 13], "temperature": 0.0, "avg_logprob": -0.13415919817410982, "compression_ratio": 1.94375, "no_speech_prob": 0.00018081716552842408}, {"id": 191, "seek": 98928, "start": 989.28, "end": 996.92, "text": " Since the state monad is a monad, we can use all the features available for monads such", "tokens": [4162, 264, 1785, 1108, 345, 307, 257, 1108, 345, 11, 321, 393, 764, 439, 264, 4122, 2435, 337, 1108, 5834, 1270], "temperature": 0.0, "avg_logprob": -0.15962389038830269, "compression_ratio": 1.7417582417582418, "no_speech_prob": 0.00012867640180047601}, {"id": 192, "seek": 98928, "start": 996.92, "end": 1004.68, "text": " as the denotation so we can change several actions like this and we can also use some", "tokens": [382, 264, 1441, 310, 399, 370, 321, 393, 1319, 2940, 5909, 411, 341, 293, 321, 393, 611, 764, 512], "temperature": 0.0, "avg_logprob": -0.15962389038830269, "compression_ratio": 1.7417582417582418, "no_speech_prob": 0.00012867640180047601}, {"id": 193, "seek": 98928, "start": 1004.68, "end": 1011.1999999999999, "text": " functions provided for monads such as the went function.", "tokens": [6828, 5649, 337, 1108, 5834, 1270, 382, 264, 1437, 2445, 13], "temperature": 0.0, "avg_logprob": -0.15962389038830269, "compression_ratio": 1.7417582417582418, "no_speech_prob": 0.00012867640180047601}, {"id": 194, "seek": 98928, "start": 1011.1999999999999, "end": 1017.8399999999999, "text": " As a result, the code is a little bit more simpler and it's clear that this is a state", "tokens": [1018, 257, 1874, 11, 264, 3089, 307, 257, 707, 857, 544, 18587, 293, 309, 311, 1850, 300, 341, 307, 257, 1785], "temperature": 0.0, "avg_logprob": -0.15962389038830269, "compression_ratio": 1.7417582417582418, "no_speech_prob": 0.00012867640180047601}, {"id": 195, "seek": 101784, "start": 1017.84, "end": 1024.68, "text": " action that we have a current state which is modified according to the code and then", "tokens": [3069, 300, 321, 362, 257, 2190, 1785, 597, 307, 15873, 4650, 281, 264, 3089, 293, 550], "temperature": 0.0, "avg_logprob": -0.2026259309502058, "compression_ratio": 1.8873873873873874, "no_speech_prob": 0.00012998728197999299}, {"id": 196, "seek": 101784, "start": 1024.68, "end": 1031.4, "text": " we get the final state and this is checked by the compiler.", "tokens": [321, 483, 264, 2572, 1785, 293, 341, 307, 10033, 538, 264, 31958, 13], "temperature": 0.0, "avg_logprob": -0.2026259309502058, "compression_ratio": 1.8873873873873874, "no_speech_prob": 0.00012998728197999299}, {"id": 197, "seek": 101784, "start": 1031.4, "end": 1038.08, "text": " So to conclude, we have seen that functional programming and ASCEL using a functional programming", "tokens": [407, 281, 16886, 11, 321, 362, 1612, 300, 11745, 9410, 293, 7469, 34, 3158, 1228, 257, 11745, 9410], "temperature": 0.0, "avg_logprob": -0.2026259309502058, "compression_ratio": 1.8873873873873874, "no_speech_prob": 0.00012998728197999299}, {"id": 198, "seek": 101784, "start": 1038.08, "end": 1042.04, "text": " and ASCEL we can implement animations and this is very natural in functional programming", "tokens": [293, 7469, 34, 3158, 321, 393, 4445, 22868, 293, 341, 307, 588, 3303, 294, 11745, 9410], "temperature": 0.0, "avg_logprob": -0.2026259309502058, "compression_ratio": 1.8873873873873874, "no_speech_prob": 0.00012998728197999299}, {"id": 199, "seek": 101784, "start": 1042.04, "end": 1047.16, "text": " since we just have to pass some function to other functions like a main loop and we can", "tokens": [1670, 321, 445, 362, 281, 1320, 512, 2445, 281, 661, 6828, 411, 257, 2135, 6367, 293, 321, 393], "temperature": 0.0, "avg_logprob": -0.2026259309502058, "compression_ratio": 1.8873873873873874, "no_speech_prob": 0.00012998728197999299}, {"id": 200, "seek": 104716, "start": 1047.16, "end": 1051.5600000000002, "text": " decompose and organize our code like this.", "tokens": [22867, 541, 293, 13859, 527, 3089, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.20410681442475656, "compression_ratio": 1.6123595505617978, "no_speech_prob": 0.00010912984726019204}, {"id": 201, "seek": 104716, "start": 1051.5600000000002, "end": 1060.0800000000002, "text": " We use infinite list to generate random numbers so we don't have to use random numbers explicitly.", "tokens": [492, 764, 13785, 1329, 281, 8460, 4974, 3547, 370, 321, 500, 380, 362, 281, 764, 4974, 3547, 20803, 13], "temperature": 0.0, "avg_logprob": -0.20410681442475656, "compression_ratio": 1.6123595505617978, "no_speech_prob": 0.00010912984726019204}, {"id": 202, "seek": 104716, "start": 1060.0800000000002, "end": 1064.48, "text": " We just consume the elements of this list.", "tokens": [492, 445, 14732, 264, 4959, 295, 341, 1329, 13], "temperature": 0.0, "avg_logprob": -0.20410681442475656, "compression_ratio": 1.6123595505617978, "no_speech_prob": 0.00010912984726019204}, {"id": 203, "seek": 104716, "start": 1064.48, "end": 1071.76, "text": " We also use the lens library to access or modify nested types and we can go deeply inside", "tokens": [492, 611, 764, 264, 6765, 6405, 281, 2105, 420, 16927, 15646, 292, 3467, 293, 321, 393, 352, 8760, 1854], "temperature": 0.0, "avg_logprob": -0.20410681442475656, "compression_ratio": 1.6123595505617978, "no_speech_prob": 0.00010912984726019204}, {"id": 204, "seek": 104716, "start": 1071.76, "end": 1074.3600000000001, "text": " these types.", "tokens": [613, 3467, 13], "temperature": 0.0, "avg_logprob": -0.20410681442475656, "compression_ratio": 1.6123595505617978, "no_speech_prob": 0.00010912984726019204}, {"id": 205, "seek": 107436, "start": 1074.36, "end": 1080.4799999999998, "text": " Then finally, we simulate mutable state using the state monad so we can modify variable", "tokens": [1396, 2721, 11, 321, 27817, 5839, 712, 1785, 1228, 264, 1785, 1108, 345, 370, 321, 393, 16927, 7006], "temperature": 0.0, "avg_logprob": -0.21670381412949674, "compression_ratio": 1.7232142857142858, "no_speech_prob": 5.0228092732140794e-05}, {"id": 206, "seek": 107436, "start": 1080.4799999999998, "end": 1084.04, "text": " and get the final result.", "tokens": [293, 483, 264, 2572, 1874, 13], "temperature": 0.0, "avg_logprob": -0.21670381412949674, "compression_ratio": 1.7232142857142858, "no_speech_prob": 5.0228092732140794e-05}, {"id": 207, "seek": 107436, "start": 1084.04, "end": 1091.6, "text": " So all of this is still based on functional programming so we just manipulate pure functions", "tokens": [407, 439, 295, 341, 307, 920, 2361, 322, 11745, 9410, 370, 321, 445, 20459, 6075, 6828], "temperature": 0.0, "avg_logprob": -0.21670381412949674, "compression_ratio": 1.7232142857142858, "no_speech_prob": 5.0228092732140794e-05}, {"id": 208, "seek": 107436, "start": 1091.6, "end": 1097.3999999999999, "text": " and static typing and this is quite easy to read and less work run since we have no side", "tokens": [293, 13437, 18444, 293, 341, 307, 1596, 1858, 281, 1401, 293, 1570, 589, 1190, 1670, 321, 362, 572, 1252], "temperature": 0.0, "avg_logprob": -0.21670381412949674, "compression_ratio": 1.7232142857142858, "no_speech_prob": 5.0228092732140794e-05}, {"id": 209, "seek": 107436, "start": 1097.3999999999999, "end": 1102.8, "text": " effects function only depends on its argument and produce the same result if the arguments", "tokens": [5065, 2445, 787, 5946, 322, 1080, 6770, 293, 5258, 264, 912, 1874, 498, 264, 12869], "temperature": 0.0, "avg_logprob": -0.21670381412949674, "compression_ratio": 1.7232142857142858, "no_speech_prob": 5.0228092732140794e-05}, {"id": 210, "seek": 110280, "start": 1102.8, "end": 1104.68, "text": " are the same.", "tokens": [366, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 211, "seek": 110280, "start": 1104.68, "end": 1110.12, "text": " And all of this is checked by the compiler.", "tokens": [400, 439, 295, 341, 307, 10033, 538, 264, 31958, 13], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 212, "seek": 110280, "start": 1110.12, "end": 1115.12, "text": " So this code, this state and the code shown here are available at this link and you can", "tokens": [407, 341, 3089, 11, 341, 1785, 293, 264, 3089, 4898, 510, 366, 2435, 412, 341, 2113, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 213, "seek": 110280, "start": 1115.12, "end": 1122.2, "text": " find some information in the documentation of the libraries and see things that sit for", "tokens": [915, 512, 1589, 294, 264, 14333, 295, 264, 15148, 293, 536, 721, 300, 1394, 337], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 214, "seek": 110280, "start": 1122.2, "end": 1123.2, "text": " me.", "tokens": [385, 13], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 215, "seek": 110280, "start": 1123.2, "end": 1124.2, "text": " Thank you for your attention.", "tokens": [1044, 291, 337, 428, 3202, 13], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 216, "seek": 110280, "start": 1124.2, "end": 1125.2, "text": " Thanks to the organizer.", "tokens": [2561, 281, 264, 41363, 13], "temperature": 0.0, "avg_logprob": -0.25639494363363685, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.0009283276158384979}, {"id": 217, "seek": 112520, "start": 1125.2, "end": 1135.4, "text": " Thank you, Julia, and there's five minutes for questions.", "tokens": [1044, 291, 11, 18551, 11, 293, 456, 311, 1732, 2077, 337, 1651, 13], "temperature": 0.0, "avg_logprob": -0.4336306435721261, "compression_ratio": 1.1919191919191918, "no_speech_prob": 0.0015143725322559476}, {"id": 218, "seek": 112520, "start": 1135.4, "end": 1148.2, "text": " If you have a question put up your hand, I'll bring the mic.", "tokens": [759, 291, 362, 257, 1168, 829, 493, 428, 1011, 11, 286, 603, 1565, 264, 3123, 13], "temperature": 0.0, "avg_logprob": -0.4336306435721261, "compression_ratio": 1.1919191919191918, "no_speech_prob": 0.0015143725322559476}, {"id": 219, "seek": 114820, "start": 1148.2, "end": 1172.28, "text": " Do we know what the performance of class is like for complex applications like could", "tokens": [1144, 321, 458, 437, 264, 3389, 295, 1508, 307, 411, 337, 3997, 5821, 411, 727], "temperature": 0.0, "avg_logprob": -0.5674850564253958, "compression_ratio": 1.12, "no_speech_prob": 0.0016445342916995287}, {"id": 220, "seek": 117228, "start": 1172.28, "end": 1179.92, "text": " you write a complex QI in Gloss?", "tokens": [291, 2464, 257, 3997, 1249, 40, 294, 5209, 772, 30], "temperature": 0.0, "avg_logprob": -0.3170054695822976, "compression_ratio": 1.3868613138686132, "no_speech_prob": 0.006578541826456785}, {"id": 221, "seek": 117228, "start": 1179.92, "end": 1185.76, "text": " Do we know what the performance of Gloss is for complex display?", "tokens": [1144, 321, 458, 437, 264, 3389, 295, 5209, 772, 307, 337, 3997, 4674, 30], "temperature": 0.0, "avg_logprob": -0.3170054695822976, "compression_ratio": 1.3868613138686132, "no_speech_prob": 0.006578541826456785}, {"id": 222, "seek": 117228, "start": 1185.76, "end": 1195.52, "text": " Gloss is based on OpenGL so it's not that slow but I don't know for very complex animations.", "tokens": [5209, 772, 307, 2361, 322, 7238, 19440, 370, 309, 311, 406, 300, 2964, 457, 286, 500, 380, 458, 337, 588, 3997, 22868, 13], "temperature": 0.0, "avg_logprob": -0.3170054695822976, "compression_ratio": 1.3868613138686132, "no_speech_prob": 0.006578541826456785}, {"id": 223, "seek": 119552, "start": 1195.52, "end": 1203.68, "text": " I believe some projects use SDR and it seems they have no problem of performance but I", "tokens": [286, 1697, 512, 4455, 764, 318, 9301, 293, 309, 2544, 436, 362, 572, 1154, 295, 3389, 457, 286], "temperature": 0.0, "avg_logprob": -0.2257660323498296, "compression_ratio": 1.3819444444444444, "no_speech_prob": 0.007260049227625132}, {"id": 224, "seek": 119552, "start": 1203.68, "end": 1217.36, "text": " have no experience more like that.", "tokens": [362, 572, 1752, 544, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2257660323498296, "compression_ratio": 1.3819444444444444, "no_speech_prob": 0.007260049227625132}, {"id": 225, "seek": 119552, "start": 1217.36, "end": 1223.48, "text": " In the play function it pretty much makes the whole program pure with no I.O.", "tokens": [682, 264, 862, 2445, 309, 1238, 709, 1669, 264, 1379, 1461, 6075, 365, 572, 286, 13, 46, 13], "temperature": 0.0, "avg_logprob": -0.2257660323498296, "compression_ratio": 1.3819444444444444, "no_speech_prob": 0.007260049227625132}, {"id": 226, "seek": 122348, "start": 1223.48, "end": 1228.92, "text": " What if you do want to do any I.O. in an application?", "tokens": [708, 498, 291, 360, 528, 281, 360, 604, 286, 13, 46, 13, 294, 364, 3861, 30], "temperature": 0.0, "avg_logprob": -0.3659401781418744, "compression_ratio": 1.4268292682926829, "no_speech_prob": 0.005827923305332661}, {"id": 227, "seek": 122348, "start": 1228.92, "end": 1236.52, "text": " So the Gloss library provides both two interfaces, one which is purely functional and another", "tokens": [407, 264, 5209, 772, 6405, 6417, 1293, 732, 28416, 11, 472, 597, 307, 17491, 11745, 293, 1071], "temperature": 0.0, "avg_logprob": -0.3659401781418744, "compression_ratio": 1.4268292682926829, "no_speech_prob": 0.005827923305332661}, {"id": 228, "seek": 122348, "start": 1236.52, "end": 1238.4, "text": " where you can do I.O.", "tokens": [689, 291, 393, 360, 286, 13, 46, 13], "temperature": 0.0, "avg_logprob": -0.3659401781418744, "compression_ratio": 1.4268292682926829, "no_speech_prob": 0.005827923305332661}, {"id": 229, "seek": 122348, "start": 1238.4, "end": 1248.92, "text": " So there is a version where you can do that.", "tokens": [407, 456, 307, 257, 3037, 689, 291, 393, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.3659401781418744, "compression_ratio": 1.4268292682926829, "no_speech_prob": 0.005827923305332661}, {"id": 230, "seek": 122348, "start": 1248.92, "end": 1250.92, "text": " Any more questions?", "tokens": [2639, 544, 1651, 30], "temperature": 0.0, "avg_logprob": -0.3659401781418744, "compression_ratio": 1.4268292682926829, "no_speech_prob": 0.005827923305332661}, {"id": 231, "seek": 125092, "start": 1250.92, "end": 1253.92, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 232, "seek": 125092, "start": 1253.92, "end": 1263.4, "text": " Can you explain the operators used for the lenses?", "tokens": [1664, 291, 2903, 264, 19077, 1143, 337, 264, 18059, 30], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 233, "seek": 125092, "start": 1263.4, "end": 1266.4, "text": " There's many, many operators.", "tokens": [821, 311, 867, 11, 867, 19077, 13], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 234, "seek": 125092, "start": 1266.4, "end": 1270.4, "text": " Is the person signed?", "tokens": [1119, 264, 954, 8175, 30], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 235, "seek": 125092, "start": 1270.4, "end": 1271.4, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 236, "seek": 125092, "start": 1271.4, "end": 1272.4, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 237, "seek": 125092, "start": 1272.4, "end": 1277.24, "text": " So there is two versions of these operators, one which is purely functional so you just", "tokens": [407, 456, 307, 732, 9606, 295, 613, 19077, 11, 472, 597, 307, 17491, 11745, 370, 291, 445], "temperature": 0.0, "avg_logprob": -0.5015500490782691, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.00371090997941792}, {"id": 238, "seek": 127724, "start": 1277.24, "end": 1282.6, "text": " take your data structure that it can access and return the value.", "tokens": [747, 428, 1412, 3877, 300, 309, 393, 2105, 293, 2736, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 239, "seek": 127724, "start": 1282.6, "end": 1284.48, "text": " So this is such operators.", "tokens": [407, 341, 307, 1270, 19077, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 240, "seek": 127724, "start": 1284.48, "end": 1292.56, "text": " So that means we apply a modification, so the ball zero is returned after this modification.", "tokens": [407, 300, 1355, 321, 3079, 257, 26747, 11, 370, 264, 2594, 4018, 307, 8752, 934, 341, 26747, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 241, "seek": 127724, "start": 1292.56, "end": 1295.28, "text": " So this is what this operator means.", "tokens": [407, 341, 307, 437, 341, 12973, 1355, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 242, "seek": 127724, "start": 1295.28, "end": 1298.08, "text": " Here it's for accessing another field.", "tokens": [1692, 309, 311, 337, 26440, 1071, 2519, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 243, "seek": 127724, "start": 1298.08, "end": 1301.96, "text": " So it's an X field of the position field of the ball.", "tokens": [407, 309, 311, 364, 1783, 2519, 295, 264, 2535, 2519, 295, 264, 2594, 13], "temperature": 0.0, "avg_logprob": -0.2926944214620708, "compression_ratio": 1.7119565217391304, "no_speech_prob": 0.0011266706278547645}, {"id": 244, "seek": 130196, "start": 1301.96, "end": 1309.8400000000001, "text": " And this operator says we set the value in this field and this operator says we apply", "tokens": [400, 341, 12973, 1619, 321, 992, 264, 2158, 294, 341, 2519, 293, 341, 12973, 1619, 321, 3079], "temperature": 0.0, "avg_logprob": -0.3849194015281788, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0011112588690593839}, {"id": 245, "seek": 130196, "start": 1309.8400000000001, "end": 1312.64, "text": " a function on the field.", "tokens": [257, 2445, 322, 264, 2519, 13], "temperature": 0.0, "avg_logprob": -0.3849194015281788, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0011112588690593839}, {"id": 246, "seek": 130196, "start": 1312.64, "end": 1320.0, "text": " And the stateful version is the same but we have an equal sign instead of the tilde.", "tokens": [400, 264, 1785, 906, 3037, 307, 264, 912, 457, 321, 362, 364, 2681, 1465, 2602, 295, 264, 45046, 13], "temperature": 0.0, "avg_logprob": -0.3849194015281788, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0011112588690593839}, {"id": 247, "seek": 130196, "start": 1320.0, "end": 1323.28, "text": " Like a get and a set.", "tokens": [1743, 257, 483, 293, 257, 992, 13], "temperature": 0.0, "avg_logprob": -0.3849194015281788, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0011112588690593839}, {"id": 248, "seek": 130196, "start": 1323.28, "end": 1326.64, "text": " Yes, we can say like this.", "tokens": [1079, 11, 321, 393, 584, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.3849194015281788, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0011112588690593839}, {"id": 249, "seek": 132664, "start": 1326.64, "end": 1332.3600000000001, "text": " We can say that.", "tokens": [492, 393, 584, 300, 13], "temperature": 0.0, "avg_logprob": -0.5891344547271729, "compression_ratio": 0.972972972972973, "no_speech_prob": 0.003884656820446253}, {"id": 250, "seek": 132664, "start": 1332.3600000000001, "end": 1334.3600000000001, "text": " Any more questions?", "tokens": [2639, 544, 1651, 30], "temperature": 0.0, "avg_logprob": -0.5891344547271729, "compression_ratio": 0.972972972972973, "no_speech_prob": 0.003884656820446253}, {"id": 251, "seek": 132664, "start": 1334.3600000000001, "end": 1335.3600000000001, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.5891344547271729, "compression_ratio": 0.972972972972973, "no_speech_prob": 0.003884656820446253}, {"id": 252, "seek": 132664, "start": 1335.3600000000001, "end": 1338.3600000000001, "text": " Let's thank Julio.", "tokens": [961, 311, 1309, 7174, 1004, 13], "temperature": 0.0, "avg_logprob": -0.5891344547271729, "compression_ratio": 0.972972972972973, "no_speech_prob": 0.003884656820446253}, {"id": 253, "seek": 132664, "start": 1338.3600000000001, "end": 1339.3600000000001, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.5891344547271729, "compression_ratio": 0.972972972972973, "no_speech_prob": 0.003884656820446253}, {"id": 254, "seek": 133936, "start": 1339.36, "end": 1361.1, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 51451], "temperature": 1.0, "avg_logprob": -1.5027821858723958, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.0013257348909974098}], "language": "en"}